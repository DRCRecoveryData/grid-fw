
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c6c0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000c6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          00003750  200005c0  0000cc80  000205bc  2**4
                  ALLOC
  5 .stack        00010000  20003d10  000103d0  000205bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   000814ae  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ac77  00000000  00000000  000a1af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a8a2  00000000  00000000  000ac768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002018  00000000  00000000  000d700a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e18  00000000  00000000  000d9022  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043c04  00000000  00000000  000dbe3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037c7a  00000000  00000000  0011fa3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001192cf  00000000  00000000  001576b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005bdc  00000000  00000000  00270988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 3d 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     .=. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	21 64 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     !d..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e9 60 00 00 fd 60 00 00     .........`...`..
      bc:	dd 5e 00 00 e9 5e 00 00 f5 5e 00 00 01 5f 00 00     .^...^...^..._..
      cc:	0d 5f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ._..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	55 62 00 00 21 6e 00 00 35 6e 00 00 49 6e 00 00     Ub..!n..5n..In..
     104:	5d 6e 00 00 71 6e 00 00 85 6e 00 00 99 6e 00 00     ]n..qn...n...n..
     114:	ad 6e 00 00 c1 6e 00 00 d5 6e 00 00 e9 6e 00 00     .n...n...n...n..
     124:	fd 6e 00 00 11 6f 00 00 25 6f 00 00 39 6f 00 00     .n...o..%o..9o..
     134:	4d 6f 00 00 61 6f 00 00 75 6f 00 00 89 6f 00 00     Mo..ao..uo...o..
     144:	9d 6f 00 00 b1 6f 00 00 c5 6f 00 00 d9 6f 00 00     .o...o...o...o..
     154:	ed 6f 00 00 01 70 00 00 15 70 00 00 29 70 00 00     .o...p...p..)p..
     164:	3d 70 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     =p..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 4d 8f 00 00     ............M...
     184:	59 8f 00 00 65 8f 00 00 71 8f 00 00 00 00 00 00     Y...e...q.......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 61 7c 00 00 75 7c 00 00     ........a|..u|..
     1f4:	89 7c 00 00 9d 7c 00 00 e5 02 00 00 e5 02 00 00     .|...|..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 71 5b 00 00 85 5b 00 00 99 5b 00 00     ....q[...[...[..
     224:	ad 5b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .[..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000c6c0 	.word	0x0000c6c0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000c6c0 	.word	0x0000c6c0
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000c6c0 	.word	0x0000c6c0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c59 	.word	0x00000c59
     2e0:	0000ad51 	.word	0x0000ad51

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000c6c0 	.word	0x0000c6c0
     364:	200005bc 	.word	0x200005bc
     368:	20003d10 	.word	0x20003d10
     36c:	200005c0 	.word	0x200005c0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000b531 	.word	0x0000b531
     37c:	000095cd 	.word	0x000095cd

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200005dc 	.word	0x200005dc
     400:	20000ff4 	.word	0x20000ff4
     404:	200010f0 	.word	0x200010f0
     408:	43001c00 	.word	0x43001c00
     40c:	00004031 	.word	0x00004031
     410:	000040d5 	.word	0x000040d5
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200005dc 	.word	0x200005dc
     4a4:	200011c8 	.word	0x200011c8
     4a8:	20000f4c 	.word	0x20000f4c
     4ac:	43002000 	.word	0x43002000
     4b0:	00004031 	.word	0x00004031
     4b4:	000040d5 	.word	0x000040d5
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20000f48 	.word	0x20000f48
     4e0:	00004371 	.word	0x00004371

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	000043f5 	.word	0x000043f5

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20000f2c 	.word	0x20000f2c
     544:	0000444d 	.word	0x0000444d

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	20000604 	.word	0x20000604
     5dc:	40003000 	.word	0x40003000
     5e0:	20001020 	.word	0x20001020
     5e4:	00004f4d 	.word	0x00004f4d
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	20000614 	.word	0x20000614
     680:	40003400 	.word	0x40003400
     684:	20001074 	.word	0x20001074
     688:	00004f4d 	.word	0x00004f4d
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	20000624 	.word	0x20000624
     724:	41012000 	.word	0x41012000
     728:	20000fa4 	.word	0x20000fa4
     72c:	00004f4d 	.word	0x00004f4d
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	20000ea4 	.word	0x20000ea4
     838:	0000485d 	.word	0x0000485d
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	20000634 	.word	0x20000634
     8d8:	20001128 	.word	0x20001128
     8dc:	00004f4d 	.word	0x00004f4d
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20000f64 	.word	0x20000f64
     988:	00004601 	.word	0x00004601
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000644 	.word	0x20000644
     a24:	43000800 	.word	0x43000800
     a28:	20001178 	.word	0x20001178
     a2c:	00004f4d 	.word	0x00004f4d
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200010c4 	.word	0x200010c4
     b30:	00004ac1 	.word	0x00004ac1
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	000043a1 	.word	0x000043a1

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	000052f9 	.word	0x000052f9
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     c14:	4a02      	ldr	r2, [pc, #8]	; (c20 <WDT_0_CLOCK_init+0xc>)
     c16:	6953      	ldr	r3, [r2, #20]
     c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     c1c:	6153      	str	r3, [r2, #20]
     c1e:	4770      	bx	lr
     c20:	40000800 	.word	0x40000800

00000c24 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     c24:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     c26:	4b06      	ldr	r3, [pc, #24]	; (c40 <WDT_0_init+0x1c>)
     c28:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     c2a:	2248      	movs	r2, #72	; 0x48
     c2c:	4905      	ldr	r1, [pc, #20]	; (c44 <WDT_0_init+0x20>)
     c2e:	2001      	movs	r0, #1
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <WDT_0_init+0x24>)
     c32:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c34:	4805      	ldr	r0, [pc, #20]	; (c4c <WDT_0_init+0x28>)
     c36:	4b06      	ldr	r3, [pc, #24]	; (c50 <WDT_0_init+0x2c>)
     c38:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <WDT_0_init+0x30>)
     c3c:	4798      	blx	r3
     c3e:	bd08      	pop	{r3, pc}
     c40:	00000c15 	.word	0x00000c15
     c44:	0000be84 	.word	0x0000be84
     c48:	00005645 	.word	0x00005645
     c4c:	20001070 	.word	0x20001070
     c50:	40002000 	.word	0x40002000
     c54:	00008f7d 	.word	0x00008f7d

00000c58 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c5c:	4ba2      	ldr	r3, [pc, #648]	; (ee8 <system_init+0x290>)
     c5e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c60:	4ba2      	ldr	r3, [pc, #648]	; (eec <system_init+0x294>)
     c62:	2220      	movs	r2, #32
     c64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c66:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c6c:	629a      	str	r2, [r3, #40]	; 0x28
     c6e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c72:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c74:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c78:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c84:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c86:	4e9a      	ldr	r6, [pc, #616]	; (ef0 <system_init+0x298>)
     c88:	629e      	str	r6, [r3, #40]	; 0x28
     c8a:	499a      	ldr	r1, [pc, #616]	; (ef4 <system_init+0x29c>)
     c8c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c8e:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c92:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c96:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c9a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c9e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca2:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ca6:	2180      	movs	r1, #128	; 0x80
     ca8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     cb0:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     cb4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     cb8:	4d8f      	ldr	r5, [pc, #572]	; (ef8 <system_init+0x2a0>)
     cba:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cbe:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     cc2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     cc6:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cca:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     cce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd2:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     cda:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cde:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ce6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     cea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cee:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cf6:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cfe:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d02:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d06:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     d0a:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d12:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     d16:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d1a:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d1e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     d22:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d26:	4c75      	ldr	r4, [pc, #468]	; (efc <system_init+0x2a4>)
     d28:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     d2c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d30:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     d34:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     d38:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d3c:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     d40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d48:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d4c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d50:	f8df e234 	ldr.w	lr, [pc, #564]	; f88 <system_init+0x330>
     d54:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d58:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d5c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d60:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d64:	f045 0504 	orr.w	r5, r5, #4
     d68:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d6c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d70:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d74:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d78:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d80:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d84:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d88:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d8c:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d94:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da0:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     da4:	4a56      	ldr	r2, [pc, #344]	; (f00 <system_init+0x2a8>)
     da6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     daa:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     dae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     db2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     db6:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     dba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dbe:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     dc6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     dd2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd6:	494b      	ldr	r1, [pc, #300]	; (f04 <system_init+0x2ac>)
     dd8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ddc:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     de0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de4:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     de8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     dec:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     df8:	4943      	ldr	r1, [pc, #268]	; (f08 <system_init+0x2b0>)
     dfa:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dfe:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     e02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e06:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e0a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e0e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     e16:	4a3d      	ldr	r2, [pc, #244]	; (f0c <system_init+0x2b4>)
     e18:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e1c:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e24:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     e28:	4b39      	ldr	r3, [pc, #228]	; (f10 <system_init+0x2b8>)
     e2a:	4798      	blx	r3
	ADC_1_init();
     e2c:	4b39      	ldr	r3, [pc, #228]	; (f14 <system_init+0x2bc>)
     e2e:	4798      	blx	r3

	CRC_0_init();
     e30:	4b39      	ldr	r3, [pc, #228]	; (f18 <system_init+0x2c0>)
     e32:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     e34:	4b39      	ldr	r3, [pc, #228]	; (f1c <system_init+0x2c4>)
     e36:	4798      	blx	r3

	FLASH_0_init();
     e38:	4b39      	ldr	r3, [pc, #228]	; (f20 <system_init+0x2c8>)
     e3a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     e3c:	4c39      	ldr	r4, [pc, #228]	; (f24 <system_init+0x2cc>)
     e3e:	6963      	ldr	r3, [r4, #20]
     e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e44:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e46:	4b38      	ldr	r3, [pc, #224]	; (f28 <system_init+0x2d0>)
     e48:	4798      	blx	r3
     e4a:	4602      	mov	r2, r0
     e4c:	4937      	ldr	r1, [pc, #220]	; (f2c <system_init+0x2d4>)
     e4e:	4838      	ldr	r0, [pc, #224]	; (f30 <system_init+0x2d8>)
     e50:	4d38      	ldr	r5, [pc, #224]	; (f34 <system_init+0x2dc>)
     e52:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e54:	4b38      	ldr	r3, [pc, #224]	; (f38 <system_init+0x2e0>)
     e56:	4798      	blx	r3
	USART_NORTH_init();
     e58:	4b38      	ldr	r3, [pc, #224]	; (f3c <system_init+0x2e4>)
     e5a:	4798      	blx	r3
	GRID_AUX_init();
     e5c:	4b38      	ldr	r3, [pc, #224]	; (f40 <system_init+0x2e8>)
     e5e:	4798      	blx	r3

	UI_SPI_init();
     e60:	4b38      	ldr	r3, [pc, #224]	; (f44 <system_init+0x2ec>)
     e62:	4798      	blx	r3
	USART_WEST_init();
     e64:	4b38      	ldr	r3, [pc, #224]	; (f48 <system_init+0x2f0>)
     e66:	4798      	blx	r3

	SYS_I2C_init();
     e68:	4b38      	ldr	r3, [pc, #224]	; (f4c <system_init+0x2f4>)
     e6a:	4798      	blx	r3
	USART_SOUTH_init();
     e6c:	4b38      	ldr	r3, [pc, #224]	; (f50 <system_init+0x2f8>)
     e6e:	4798      	blx	r3

	GRID_LED_init();
     e70:	4b38      	ldr	r3, [pc, #224]	; (f54 <system_init+0x2fc>)
     e72:	4798      	blx	r3

	delay_driver_init();
     e74:	4b38      	ldr	r3, [pc, #224]	; (f58 <system_init+0x300>)
     e76:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e78:	6963      	ldr	r3, [r4, #20]
     e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e7e:	6163      	str	r3, [r4, #20]
     e80:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e84:	f04f 0840 	mov.w	r8, #64	; 0x40
     e88:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e8c:	4e33      	ldr	r6, [pc, #204]	; (f5c <system_init+0x304>)
     e8e:	47b0      	blx	r6
     e90:	4602      	mov	r2, r0
     e92:	4933      	ldr	r1, [pc, #204]	; (f60 <system_init+0x308>)
     e94:	4833      	ldr	r0, [pc, #204]	; (f64 <system_init+0x30c>)
     e96:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e98:	6963      	ldr	r3, [r4, #20]
     e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e9e:	6163      	str	r3, [r4, #20]
     ea0:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     ea4:	47b0      	blx	r6
     ea6:	4602      	mov	r2, r0
     ea8:	492f      	ldr	r1, [pc, #188]	; (f68 <system_init+0x310>)
     eaa:	4830      	ldr	r0, [pc, #192]	; (f6c <system_init+0x314>)
     eac:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     eae:	69a3      	ldr	r3, [r4, #24]
     eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     eb4:	61a3      	str	r3, [r4, #24]
     eb6:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     eba:	47b0      	blx	r6
     ebc:	4602      	mov	r2, r0
     ebe:	492c      	ldr	r1, [pc, #176]	; (f70 <system_init+0x318>)
     ec0:	482c      	ldr	r0, [pc, #176]	; (f74 <system_init+0x31c>)
     ec2:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     ec4:	69a3      	ldr	r3, [r4, #24]
     ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     eca:	61a3      	str	r3, [r4, #24]
     ecc:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     ed0:	47b0      	blx	r6
     ed2:	4602      	mov	r2, r0
     ed4:	4928      	ldr	r1, [pc, #160]	; (f78 <system_init+0x320>)
     ed6:	4829      	ldr	r0, [pc, #164]	; (f7c <system_init+0x324>)
     ed8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     eda:	4b29      	ldr	r3, [pc, #164]	; (f80 <system_init+0x328>)
     edc:	4798      	blx	r3

	WDT_0_init();
     ede:	4b29      	ldr	r3, [pc, #164]	; (f84 <system_init+0x32c>)
     ee0:	4798      	blx	r3
     ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ee6:	bf00      	nop
     ee8:	00005bf1 	.word	0x00005bf1
     eec:	41008000 	.word	0x41008000
     ef0:	40020000 	.word	0x40020000
     ef4:	c0020020 	.word	0xc0020020
     ef8:	c0020000 	.word	0xc0020000
     efc:	40028000 	.word	0x40028000
     f00:	c0020004 	.word	0xc0020004
     f04:	c0000008 	.word	0xc0000008
     f08:	c0000010 	.word	0xc0000010
     f0c:	c0000020 	.word	0xc0000020
     f10:	00000381 	.word	0x00000381
     f14:	00000419 	.word	0x00000419
     f18:	000004bd 	.word	0x000004bd
     f1c:	000004e5 	.word	0x000004e5
     f20:	00000529 	.word	0x00000529
     f24:	40000800 	.word	0x40000800
     f28:	00006419 	.word	0x00006419
     f2c:	40002400 	.word	0x40002400
     f30:	20000eec 	.word	0x20000eec
     f34:	00004c69 	.word	0x00004c69
     f38:	000005b5 	.word	0x000005b5
     f3c:	00000659 	.word	0x00000659
     f40:	000006fd 	.word	0x000006fd
     f44:	00000819 	.word	0x00000819
     f48:	000008ad 	.word	0x000008ad
     f4c:	00000969 	.word	0x00000969
     f50:	000009fd 	.word	0x000009fd
     f54:	00000b11 	.word	0x00000b11
     f58:	00000b39 	.word	0x00000b39
     f5c:	00007c59 	.word	0x00007c59
     f60:	40003800 	.word	0x40003800
     f64:	20001214 	.word	0x20001214
     f68:	40003c00 	.word	0x40003c00
     f6c:	20001108 	.word	0x20001108
     f70:	4101a000 	.word	0x4101a000
     f74:	20000f0c 	.word	0x20000f0c
     f78:	4101c000 	.word	0x4101c000
     f7c:	200011f4 	.word	0x200011f4
     f80:	00000bf9 	.word	0x00000bf9
     f84:	00000c25 	.word	0x00000c25
     f88:	40020800 	.word	0x40020800

00000f8c <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
     f8c:	b538      	push	{r3, r4, r5, lr}
     f8e:	4604      	mov	r4, r0
     f90:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
     f92:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
     f94:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
     f96:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
     f98:	2300      	movs	r3, #0
     f9a:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
     f9c:	0048      	lsls	r0, r1, #1
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <grid_ain_channel_init+0x38>)
     fa0:	4798      	blx	r3
     fa2:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     fa4:	b14d      	cbz	r5, fba <grid_ain_channel_init+0x2e>
     fa6:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
     fa8:	4619      	mov	r1, r3
     faa:	6822      	ldr	r2, [r4, #0]
     fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     fb0:	3301      	adds	r3, #1
     fb2:	b2db      	uxtb	r3, r3
     fb4:	7922      	ldrb	r2, [r4, #4]
     fb6:	429a      	cmp	r2, r3
     fb8:	d8f7      	bhi.n	faa <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
     fba:	2000      	movs	r0, #0
     fbc:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
     fbe:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
     fc0:	bd38      	pop	{r3, r4, r5, pc}
     fc2:	bf00      	nop
     fc4:	0000b579 	.word	0x0000b579

00000fc8 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
     fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fcc:	4605      	mov	r5, r0
     fce:	4689      	mov	r9, r1
     fd0:	4617      	mov	r7, r2
     fd2:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
     fd4:	0100      	lsls	r0, r0, #4
     fd6:	4b0c      	ldr	r3, [pc, #48]	; (1008 <grid_ain_init+0x40>)
     fd8:	4798      	blx	r3
     fda:	4b0c      	ldr	r3, [pc, #48]	; (100c <grid_ain_init+0x44>)
     fdc:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
     fde:	b185      	cbz	r5, 1002 <grid_ain_init+0x3a>
     fe0:	3d01      	subs	r5, #1
     fe2:	b2ed      	uxtb	r5, r5
     fe4:	3501      	adds	r5, #1
     fe6:	012d      	lsls	r5, r5, #4
     fe8:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
     fea:	469a      	mov	sl, r3
     fec:	4e08      	ldr	r6, [pc, #32]	; (1010 <grid_ain_init+0x48>)
     fee:	4643      	mov	r3, r8
     ff0:	463a      	mov	r2, r7
     ff2:	4649      	mov	r1, r9
     ff4:	f8da 0000 	ldr.w	r0, [sl]
     ff8:	4420      	add	r0, r4
     ffa:	47b0      	blx	r6
     ffc:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
     ffe:	42ac      	cmp	r4, r5
    1000:	d1f5      	bne.n	fee <grid_ain_init+0x26>
	}

	return 0;
}
    1002:	2000      	movs	r0, #0
    1004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1008:	0000b579 	.word	0x0000b579
    100c:	20001770 	.word	0x20001770
    1010:	00000f8d 	.word	0x00000f8d

00001014 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    1018:	0100      	lsls	r0, r0, #4
    101a:	4b3c      	ldr	r3, [pc, #240]	; (110c <grid_ain_add_sample+0xf8>)
    101c:	f8d3 a000 	ldr.w	sl, [r3]
    1020:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1024:	f89c 6004 	ldrb.w	r6, [ip, #4]
    1028:	2e00      	cmp	r6, #0
    102a:	d05b      	beq.n	10e4 <grid_ain_add_sample+0xd0>
    102c:	f85a 5000 	ldr.w	r5, [sl, r0]
    1030:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1032:	2200      	movs	r2, #0
    1034:	4690      	mov	r8, r2
    1036:	4691      	mov	r9, r2
    1038:	4696      	mov	lr, r2
    103a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    103e:	4614      	mov	r4, r2
    1040:	fa5f fb82 	uxtb.w	fp, r2
    1044:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    1048:	441c      	add	r4, r3
		
		if (current > maximum){
    104a:	4573      	cmp	r3, lr
    104c:	bf84      	itt	hi
    104e:	46d8      	movhi	r8, fp
			maximum = current;
    1050:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1052:	42bb      	cmp	r3, r7
    1054:	bf3c      	itt	cc
    1056:	46d9      	movcc	r9, fp
			minimum = current;
    1058:	461f      	movcc	r7, r3
    105a:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    105c:	b2d3      	uxtb	r3, r2
    105e:	42b3      	cmp	r3, r6
    1060:	d3ee      	bcc.n	1040 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1062:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    1066:	b2b6      	uxth	r6, r6
    1068:	428e      	cmp	r6, r1
    106a:	d23f      	bcs.n	10ec <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    106c:	f85a 3000 	ldr.w	r3, [sl, r0]
    1070:	440c      	add	r4, r1
    1072:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    1076:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    1078:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    107c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1080:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1084:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1088:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    108c:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    108e:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1092:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1094:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    1096:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    1098:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    109c:	b29b      	uxth	r3, r3
    109e:	408b      	lsls	r3, r1
    10a0:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    10a2:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    10a6:	1b92      	subs	r2, r2, r6
    10a8:	2a00      	cmp	r2, #0
    10aa:	bfb8      	it	lt
    10ac:	4252      	neglt	r2, r2
    10ae:	2601      	movs	r6, #1
    10b0:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    10b4:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    10b8:	42be      	cmp	r6, r7
    10ba:	d020      	beq.n	10fe <grid_ain_add_sample+0xea>
    10bc:	4282      	cmp	r2, r0
    10be:	dc08      	bgt.n	10d2 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    10c0:	2201      	movs	r2, #1
    10c2:	fa02 f505 	lsl.w	r5, r2, r5
    10c6:	fa02 f101 	lsl.w	r1, r2, r1
    10ca:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    10cc:	428f      	cmp	r7, r1
    10ce:	d000      	beq.n	10d2 <grid_ain_add_sample+0xbe>
    10d0:	b9c7      	cbnz	r7, 1104 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    10d2:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    10d6:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    10da:	2001      	movs	r0, #1
    10dc:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    10e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    10e4:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    10e6:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    10e8:	2400      	movs	r4, #0
    10ea:	e7ba      	b.n	1062 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    10ec:	f85a 3000 	ldr.w	r3, [sl, r0]
    10f0:	440c      	add	r4, r1
    10f2:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    10f6:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    10f8:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    10fc:	e7be      	b.n	107c <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    10fe:	2000      	movs	r0, #0
    1100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1104:	2000      	movs	r0, #0
	}
	
}
    1106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    110a:	bf00      	nop
    110c:	20001770 	.word	0x20001770

00001110 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    1110:	4b02      	ldr	r3, [pc, #8]	; (111c <grid_ain_get_changed+0xc>)
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    1118:	7b00      	ldrb	r0, [r0, #12]
    111a:	4770      	bx	lr
    111c:	20001770 	.word	0x20001770

00001120 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    1120:	4b09      	ldr	r3, [pc, #36]	; (1148 <grid_ain_get_average+0x28>)
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    1128:	2300      	movs	r3, #0
    112a:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    112c:	1fcb      	subs	r3, r1, #7
    112e:	b2db      	uxtb	r3, r3
    1130:	2b07      	cmp	r3, #7
    1132:	d806      	bhi.n	1142 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1134:	8903      	ldrh	r3, [r0, #8]
    1136:	7940      	ldrb	r0, [r0, #5]
    1138:	1a40      	subs	r0, r0, r1
    113a:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    113e:	b280      	uxth	r0, r0
    1140:	4770      	bx	lr
    1142:	2000      	movs	r0, #0
    1144:	e7fb      	b.n	113e <grid_ain_get_average+0x1e>
    1146:	bf00      	nop
    1148:	20001770 	.word	0x20001770

0000114c <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    114c:	b538      	push	{r3, r4, r5, lr}
    114e:	4604      	mov	r4, r0
    1150:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1152:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1154:	2300      	movs	r3, #0
    1156:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    1158:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    115a:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    115c:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    115e:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1160:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1162:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1164:	4608      	mov	r0, r1
    1166:	4b08      	ldr	r3, [pc, #32]	; (1188 <grid_buffer_init+0x3c>)
    1168:	4798      	blx	r3
    116a:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    116c:	b900      	cbnz	r0, 1170 <grid_buffer_init+0x24>
    116e:	e7fe      	b.n	116e <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1170:	b145      	cbz	r5, 1184 <grid_buffer_init+0x38>
    1172:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1174:	4619      	mov	r1, r3
    1176:	6862      	ldr	r2, [r4, #4]
    1178:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    117a:	3301      	adds	r3, #1
    117c:	b29b      	uxth	r3, r3
    117e:	8822      	ldrh	r2, [r4, #0]
    1180:	429a      	cmp	r2, r3
    1182:	d8f8      	bhi.n	1176 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1184:	2001      	movs	r0, #1
    1186:	bd38      	pop	{r3, r4, r5, pc}
    1188:	0000b579 	.word	0x0000b579

0000118c <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    118c:	8903      	ldrh	r3, [r0, #8]
    118e:	8a02      	ldrh	r2, [r0, #16]
    1190:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1192:	bf8f      	iteee	hi
    1194:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1196:	8800      	ldrhls	r0, [r0, #0]
    1198:	18c0      	addls	r0, r0, r3
    119a:	1a80      	subls	r0, r0, r2
    119c:	b280      	uxth	r0, r0

	return space;

	
	
}
    119e:	4770      	bx	lr

000011a0 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    11a0:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    11a2:	8903      	ldrh	r3, [r0, #8]
    11a4:	8a02      	ldrh	r2, [r0, #16]
    11a6:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    11a8:	bf9c      	itt	ls
    11aa:	8804      	ldrhls	r4, [r0, #0]
    11ac:	191b      	addls	r3, r3, r4
    11ae:	1a9b      	subs	r3, r3, r2
    11b0:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    11b2:	428b      	cmp	r3, r1
    11b4:	d90a      	bls.n	11cc <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    11b6:	440a      	add	r2, r1
    11b8:	8804      	ldrh	r4, [r0, #0]
    11ba:	fb92 f3f4 	sdiv	r3, r2, r4
    11be:	fb04 2213 	mls	r2, r4, r3, r2
    11c2:	8242      	strh	r2, [r0, #18]
		
		return length;
    11c4:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    11c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    11ca:	4770      	bx	lr
		return 0; // failed
    11cc:	2000      	movs	r0, #0
    11ce:	e7fa      	b.n	11c6 <grid_buffer_write_init+0x26>

000011d0 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    11d0:	8a83      	ldrh	r3, [r0, #20]
    11d2:	6842      	ldr	r2, [r0, #4]
    11d4:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    11d6:	8a83      	ldrh	r3, [r0, #20]
    11d8:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    11da:	b29b      	uxth	r3, r3
    11dc:	8801      	ldrh	r1, [r0, #0]
    11de:	fbb3 f2f1 	udiv	r2, r3, r1
    11e2:	fb01 3312 	mls	r3, r1, r2, r3
    11e6:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    11e8:	2001      	movs	r0, #1
    11ea:	4770      	bx	lr

000011ec <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    11ec:	8a83      	ldrh	r3, [r0, #20]
    11ee:	8a42      	ldrh	r2, [r0, #18]
    11f0:	429a      	cmp	r2, r3
    11f2:	d000      	beq.n	11f6 <grid_buffer_write_acknowledge+0xa>
    11f4:	e7fe      	b.n	11f4 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    11f6:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    11f8:	2001      	movs	r0, #1
    11fa:	4770      	bx	lr

000011fc <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    11fc:	8983      	ldrh	r3, [r0, #12]
    11fe:	8942      	ldrh	r2, [r0, #10]
    1200:	429a      	cmp	r2, r3
    1202:	d000      	beq.n	1206 <grid_buffer_read_size+0xa>
    1204:	e7fe      	b.n	1204 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1206:	8902      	ldrh	r2, [r0, #8]
    1208:	429a      	cmp	r2, r3
    120a:	d000      	beq.n	120e <grid_buffer_read_size+0x12>
    120c:	e7fe      	b.n	120c <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    120e:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    1210:	8a05      	ldrh	r5, [r0, #16]
    1212:	42ab      	cmp	r3, r5
    1214:	d025      	beq.n	1262 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1216:	8804      	ldrh	r4, [r0, #0]
    1218:	b1fc      	cbz	r4, 125a <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    121a:	4626      	mov	r6, r4
    121c:	fb93 f2f4 	sdiv	r2, r3, r4
    1220:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1224:	b291      	uxth	r1, r2
    1226:	428d      	cmp	r5, r1
    1228:	d01d      	beq.n	1266 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    122a:	6840      	ldr	r0, [r0, #4]
    122c:	5c42      	ldrb	r2, [r0, r1]
    122e:	2a0a      	cmp	r2, #10
    1230:	d114      	bne.n	125c <grid_buffer_read_size+0x60>
    1232:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1234:	3301      	adds	r3, #1
    1236:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1238:	bcf0      	pop	{r4, r5, r6, r7}
    123a:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    123c:	fb92 f1f6 	sdiv	r1, r2, r6
    1240:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1244:	b28f      	uxth	r7, r1
    1246:	42bd      	cmp	r5, r7
    1248:	d00f      	beq.n	126a <grid_buffer_read_size+0x6e>
    124a:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    124c:	5dc1      	ldrb	r1, [r0, r7]
    124e:	290a      	cmp	r1, #10
    1250:	d0f0      	beq.n	1234 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1252:	3301      	adds	r3, #1
    1254:	b29b      	uxth	r3, r3
    1256:	42a3      	cmp	r3, r4
    1258:	d1f0      	bne.n	123c <grid_buffer_read_size+0x40>
    125a:	e7fe      	b.n	125a <grid_buffer_read_size+0x5e>
    125c:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    125e:	2300      	movs	r3, #0
    1260:	e7f7      	b.n	1252 <grid_buffer_read_size+0x56>
		return 0;
    1262:	2000      	movs	r0, #0
    1264:	e7e8      	b.n	1238 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    1266:	2000      	movs	r0, #0
    1268:	e7e6      	b.n	1238 <grid_buffer_read_size+0x3c>
    126a:	2000      	movs	r0, #0
    126c:	e7e4      	b.n	1238 <grid_buffer_read_size+0x3c>

0000126e <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    126e:	8982      	ldrh	r2, [r0, #12]
    1270:	8943      	ldrh	r3, [r0, #10]
    1272:	4293      	cmp	r3, r2
    1274:	d000      	beq.n	1278 <grid_buffer_read_init+0xa>
    1276:	e7fe      	b.n	1276 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1278:	8903      	ldrh	r3, [r0, #8]
    127a:	4293      	cmp	r3, r2
    127c:	d000      	beq.n	1280 <grid_buffer_read_init+0x12>
    127e:	e7fe      	b.n	127e <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1282:	8a05      	ldrh	r5, [r0, #16]
    1284:	42aa      	cmp	r2, r5
    1286:	d031      	beq.n	12ec <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1288:	8804      	ldrh	r4, [r0, #0]
    128a:	b35c      	cbz	r4, 12e4 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    128c:	4626      	mov	r6, r4
    128e:	fb92 f3f4 	sdiv	r3, r2, r4
    1292:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1296:	b299      	uxth	r1, r3
    1298:	428d      	cmp	r5, r1
    129a:	d029      	beq.n	12f0 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    129c:	6847      	ldr	r7, [r0, #4]
    129e:	460b      	mov	r3, r1
    12a0:	5c79      	ldrb	r1, [r7, r1]
    12a2:	290a      	cmp	r1, #10
    12a4:	d11f      	bne.n	12e6 <grid_buffer_read_init+0x78>
    12a6:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    12a8:	3301      	adds	r3, #1
    12aa:	fb93 f2f4 	sdiv	r2, r3, r4
    12ae:	fb04 3312 	mls	r3, r4, r2, r3
    12b2:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    12b4:	1c4b      	adds	r3, r1, #1
    12b6:	b29b      	uxth	r3, r3
    12b8:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    12ba:	4618      	mov	r0, r3
    12bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    12be:	fb92 f3f6 	sdiv	r3, r2, r6
    12c2:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    12c6:	fa1f fe83 	uxth.w	lr, r3
    12ca:	4575      	cmp	r5, lr
    12cc:	d012      	beq.n	12f4 <grid_buffer_read_init+0x86>
    12ce:	4673      	mov	r3, lr
    12d0:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    12d2:	f817 e00e 	ldrb.w	lr, [r7, lr]
    12d6:	f1be 0f0a 	cmp.w	lr, #10
    12da:	d0e5      	beq.n	12a8 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    12dc:	3101      	adds	r1, #1
    12de:	b289      	uxth	r1, r1
    12e0:	42a1      	cmp	r1, r4
    12e2:	d1ec      	bne.n	12be <grid_buffer_read_init+0x50>
    12e4:	e7fe      	b.n	12e4 <grid_buffer_read_init+0x76>
    12e6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    12e8:	2100      	movs	r1, #0
    12ea:	e7f7      	b.n	12dc <grid_buffer_read_init+0x6e>
		return 0;
    12ec:	2300      	movs	r3, #0
    12ee:	e7e4      	b.n	12ba <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    12f0:	2300      	movs	r3, #0
    12f2:	e7e2      	b.n	12ba <grid_buffer_read_init+0x4c>
    12f4:	2300      	movs	r3, #0
    12f6:	e7e0      	b.n	12ba <grid_buffer_read_init+0x4c>

000012f8 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    12f8:	8983      	ldrh	r3, [r0, #12]
    12fa:	8941      	ldrh	r1, [r0, #10]
    12fc:	4299      	cmp	r1, r3
    12fe:	d00e      	beq.n	131e <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    1300:	b410      	push	{r4}
    1302:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1304:	6841      	ldr	r1, [r0, #4]
    1306:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1308:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    130a:	b29b      	uxth	r3, r3
    130c:	8814      	ldrh	r4, [r2, #0]
    130e:	fbb3 f1f4 	udiv	r1, r3, r4
    1312:	fb04 3311 	mls	r3, r4, r1, r3
    1316:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1318:	f85d 4b04 	ldr.w	r4, [sp], #4
    131c:	4770      	bx	lr
    131e:	e7fe      	b.n	131e <grid_buffer_read_character+0x26>

00001320 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    1320:	8983      	ldrh	r3, [r0, #12]
    1322:	8942      	ldrh	r2, [r0, #10]
    1324:	429a      	cmp	r2, r3
    1326:	d000      	beq.n	132a <grid_buffer_read_acknowledge+0xa>
    1328:	e7fe      	b.n	1328 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    132a:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    132c:	2001      	movs	r0, #1
    132e:	4770      	bx	lr

00001330 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1334:	4604      	mov	r4, r0
    1336:	4690      	mov	r8, r2
    1338:	461f      	mov	r7, r3
    133a:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    133e:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1342:	4e33      	ldr	r6, [pc, #204]	; (1410 <grid_port_init+0xe0>)
    1344:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    1346:	4641      	mov	r1, r8
    1348:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    134c:	47b0      	blx	r6
	
	por->cooldown = 0;
    134e:	2300      	movs	r3, #0
    1350:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1352:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1356:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    1358:	f89d 201c 	ldrb.w	r2, [sp, #28]
    135c:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    135e:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1360:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1362:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1364:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    1366:	4619      	mov	r1, r3
    1368:	18e2      	adds	r2, r4, r3
    136a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    136e:	3301      	adds	r3, #1
    1370:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1374:	d1f8      	bne.n	1368 <grid_port_init+0x38>
    1376:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1378:	4619      	mov	r1, r3
    137a:	18e2      	adds	r2, r4, r3
    137c:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1380:	3301      	adds	r3, #1
    1382:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1386:	d1f8      	bne.n	137a <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    1388:	2300      	movs	r3, #0
    138a:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    138e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1392:	2301      	movs	r3, #1
    1394:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1398:	429d      	cmp	r5, r3
    139a:	d004      	beq.n	13a6 <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    139c:	2301      	movs	r3, #1
    139e:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    13a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    13a6:	2300      	movs	r3, #0
    13a8:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    13ac:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    13b0:	7a63      	ldrb	r3, [r4, #9]
    13b2:	b2db      	uxtb	r3, r3
    13b4:	2b11      	cmp	r3, #17
    13b6:	d013      	beq.n	13e0 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    13b8:	7a63      	ldrb	r3, [r4, #9]
    13ba:	b2db      	uxtb	r3, r3
    13bc:	2b12      	cmp	r3, #18
    13be:	d017      	beq.n	13f0 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    13c0:	7a63      	ldrb	r3, [r4, #9]
    13c2:	b2db      	uxtb	r3, r3
    13c4:	2b13      	cmp	r3, #19
    13c6:	d01b      	beq.n	1400 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    13c8:	7a63      	ldrb	r3, [r4, #9]
    13ca:	b2db      	uxtb	r3, r3
    13cc:	2b14      	cmp	r3, #20
    13ce:	d1e8      	bne.n	13a2 <grid_port_init+0x72>
			por->dx = -1;
    13d0:	23ff      	movs	r3, #255	; 0xff
    13d2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    13e0:	2300      	movs	r3, #0
    13e2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    13e6:	2301      	movs	r3, #1
    13e8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    13f0:	2301      	movs	r3, #1
    13f2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    13f6:	2300      	movs	r3, #0
    13f8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1400:	2300      	movs	r3, #0
    1402:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    1406:	23ff      	movs	r3, #255	; 0xff
    1408:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1410:	0000114d 	.word	0x0000114d

00001414 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1418:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    141a:	2600      	movs	r6, #0
    141c:	9602      	str	r6, [sp, #8]
    141e:	2311      	movs	r3, #17
    1420:	9301      	str	r3, [sp, #4]
    1422:	2401      	movs	r4, #1
    1424:	9400      	str	r4, [sp, #0]
    1426:	4b25      	ldr	r3, [pc, #148]	; (14bc <grid_port_init_all+0xa8>)
    1428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    142c:	4611      	mov	r1, r2
    142e:	4824      	ldr	r0, [pc, #144]	; (14c0 <grid_port_init_all+0xac>)
    1430:	4d24      	ldr	r5, [pc, #144]	; (14c4 <grid_port_init_all+0xb0>)
    1432:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1434:	9402      	str	r4, [sp, #8]
    1436:	2312      	movs	r3, #18
    1438:	9301      	str	r3, [sp, #4]
    143a:	9400      	str	r4, [sp, #0]
    143c:	4b22      	ldr	r3, [pc, #136]	; (14c8 <grid_port_init_all+0xb4>)
    143e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1442:	4611      	mov	r1, r2
    1444:	4821      	ldr	r0, [pc, #132]	; (14cc <grid_port_init_all+0xb8>)
    1446:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    1448:	f04f 0902 	mov.w	r9, #2
    144c:	f8cd 9008 	str.w	r9, [sp, #8]
    1450:	2313      	movs	r3, #19
    1452:	9301      	str	r3, [sp, #4]
    1454:	9400      	str	r4, [sp, #0]
    1456:	4b1e      	ldr	r3, [pc, #120]	; (14d0 <grid_port_init_all+0xbc>)
    1458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    145c:	4611      	mov	r1, r2
    145e:	481d      	ldr	r0, [pc, #116]	; (14d4 <grid_port_init_all+0xc0>)
    1460:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1462:	2703      	movs	r7, #3
    1464:	9702      	str	r7, [sp, #8]
    1466:	2314      	movs	r3, #20
    1468:	9301      	str	r3, [sp, #4]
    146a:	9400      	str	r4, [sp, #0]
    146c:	4b1a      	ldr	r3, [pc, #104]	; (14d8 <grid_port_init_all+0xc4>)
    146e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1472:	4611      	mov	r1, r2
    1474:	4819      	ldr	r0, [pc, #100]	; (14dc <grid_port_init_all+0xc8>)
    1476:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    1478:	f8df 8068 	ldr.w	r8, [pc, #104]	; 14e4 <grid_port_init_all+0xd0>
    147c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1480:	f8cd a008 	str.w	sl, [sp, #8]
    1484:	9601      	str	r6, [sp, #4]
    1486:	9700      	str	r7, [sp, #0]
    1488:	4633      	mov	r3, r6
    148a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    148e:	4611      	mov	r1, r2
    1490:	4640      	mov	r0, r8
    1492:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1494:	4f12      	ldr	r7, [pc, #72]	; (14e0 <grid_port_init_all+0xcc>)
    1496:	f8cd a008 	str.w	sl, [sp, #8]
    149a:	9601      	str	r6, [sp, #4]
    149c:	f8cd 9000 	str.w	r9, [sp]
    14a0:	4633      	mov	r3, r6
    14a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    14a6:	4611      	mov	r1, r2
    14a8:	4638      	mov	r0, r7
    14aa:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    14ac:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    14b0:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    14b4:	b004      	add	sp, #16
    14b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14ba:	bf00      	nop
    14bc:	20001074 	.word	0x20001074
    14c0:	20001238 	.word	0x20001238
    14c4:	00001331 	.word	0x00001331
    14c8:	20001020 	.word	0x20001020
    14cc:	2000309c 	.word	0x2000309c
    14d0:	20001178 	.word	0x20001178
    14d4:	20002678 	.word	0x20002678
    14d8:	20001128 	.word	0x20001128
    14dc:	20002154 	.word	0x20002154
    14e0:	20002b8c 	.word	0x20002b8c
    14e4:	20001788 	.word	0x20001788

000014e8 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    14e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ec:	b091      	sub	sp, #68	; 0x44
    14ee:	af02      	add	r7, sp, #8
    14f0:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    14f2:	f500 699e 	add.w	r9, r0, #1264	; 0x4f0
    14f6:	4648      	mov	r0, r9
    14f8:	4b54      	ldr	r3, [pc, #336]	; (164c <grid_port_process_inbound+0x164>)
    14fa:	4798      	blx	r3
	
	if (!packet_size){
    14fc:	b920      	cbnz	r0, 1508 <grid_port_process_inbound+0x20>
    14fe:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1500:	373c      	adds	r7, #60	; 0x3c
    1502:	46bd      	mov	sp, r7
    1504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1508:	4680      	mov	r8, r0
	}else{
    150a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    150e:	4b50      	ldr	r3, [pc, #320]	; (1650 <grid_port_process_inbound+0x168>)
    1510:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    1512:	4b50      	ldr	r3, [pc, #320]	; (1654 <grid_port_process_inbound+0x16c>)
    1514:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    1516:	4b50      	ldr	r3, [pc, #320]	; (1658 <grid_port_process_inbound+0x170>)
    1518:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    151a:	4b50      	ldr	r3, [pc, #320]	; (165c <grid_port_process_inbound+0x174>)
    151c:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    151e:	4b50      	ldr	r3, [pc, #320]	; (1660 <grid_port_process_inbound+0x178>)
    1520:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    1522:	4b50      	ldr	r3, [pc, #320]	; (1664 <grid_port_process_inbound+0x17c>)
    1524:	61fb      	str	r3, [r7, #28]
    1526:	f107 0308 	add.w	r3, r7, #8
    152a:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    152e:	2600      	movs	r6, #0
    1530:	e001      	b.n	1536 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1532:	428b      	cmp	r3, r1
    1534:	d00e      	beq.n	1554 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    1536:	f853 2b04 	ldr.w	r2, [r3], #4
    153a:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    153e:	2800      	cmp	r0, #0
    1540:	d0f7      	beq.n	1532 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1542:	f107 0038 	add.w	r0, r7, #56	; 0x38
    1546:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    154a:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    154e:	3601      	adds	r6, #1
    1550:	b2f6      	uxtb	r6, r6
    1552:	e7ee      	b.n	1532 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1554:	2e00      	cmp	r6, #0
    1556:	d068      	beq.n	162a <grid_port_process_inbound+0x142>
    1558:	f107 0a20 	add.w	sl, r7, #32
    155c:	1e74      	subs	r4, r6, #1
    155e:	b2e4      	uxtb	r4, r4
    1560:	3401      	adds	r4, #1
    1562:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    1566:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1568:	f8df b118 	ldr.w	fp, [pc, #280]	; 1684 <grid_port_process_inbound+0x19c>
    156c:	e001      	b.n	1572 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    156e:	42a5      	cmp	r5, r4
    1570:	d016      	beq.n	15a0 <grid_port_process_inbound+0xb8>
			if (port_array[i] != por){
    1572:	f855 0b04 	ldr.w	r0, [r5], #4
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	4283      	cmp	r3, r0
    157a:	d0f8      	beq.n	156e <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    157c:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1580:	47d8      	blx	fp
    1582:	4580      	cmp	r8, r0
    1584:	d9f3      	bls.n	156e <grid_port_process_inbound+0x86>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    1586:	23c8      	movs	r3, #200	; 0xc8
    1588:	9301      	str	r3, [sp, #4]
    158a:	2302      	movs	r3, #2
    158c:	9300      	str	r3, [sp, #0]
    158e:	2300      	movs	r3, #0
    1590:	2264      	movs	r2, #100	; 0x64
    1592:	4611      	mov	r1, r2
    1594:	4834      	ldr	r0, [pc, #208]	; (1668 <grid_port_process_inbound+0x180>)
    1596:	4c35      	ldr	r4, [pc, #212]	; (166c <grid_port_process_inbound+0x184>)
    1598:	47a0      	blx	r4
    159a:	f8d7 d000 	ldr.w	sp, [r7]
    159e:	e7ae      	b.n	14fe <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    15a0:	4648      	mov	r0, r9
    15a2:	4b33      	ldr	r3, [pc, #204]	; (1670 <grid_port_process_inbound+0x188>)
    15a4:	4798      	blx	r3
    15a6:	4580      	cmp	r8, r0
    15a8:	d000      	beq.n	15ac <grid_port_process_inbound+0xc4>
    15aa:	e7fe      	b.n	15aa <grid_port_process_inbound+0xc2>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    15ac:	4c31      	ldr	r4, [pc, #196]	; (1674 <grid_port_process_inbound+0x18c>)
    15ae:	e001      	b.n	15b4 <grid_port_process_inbound+0xcc>
		for (uint8_t i=0; i<port_count; i++)
    15b0:	45aa      	cmp	sl, r5
    15b2:	d03f      	beq.n	1634 <grid_port_process_inbound+0x14c>
			if (port_array[i] != por){
    15b4:	f85a 0b04 	ldr.w	r0, [sl], #4
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	4283      	cmp	r3, r0
    15bc:	d0f8      	beq.n	15b0 <grid_port_process_inbound+0xc8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    15be:	4641      	mov	r1, r8
    15c0:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    15c4:	47a0      	blx	r4
    15c6:	e7f3      	b.n	15b0 <grid_port_process_inbound+0xc8>
			for (uint8_t i=0; i<port_count; i++){
    15c8:	42a5      	cmp	r5, r4
    15ca:	d009      	beq.n	15e0 <grid_port_process_inbound+0xf8>
				if (port_array[i] != por){
    15cc:	f854 0b04 	ldr.w	r0, [r4], #4
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	4283      	cmp	r3, r0
    15d4:	d0f8      	beq.n	15c8 <grid_port_process_inbound+0xe0>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    15d6:	6839      	ldr	r1, [r7, #0]
    15d8:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    15dc:	47d8      	blx	fp
    15de:	e7f3      	b.n	15c8 <grid_port_process_inbound+0xe0>
    15e0:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    15e4:	fa1f f38a 	uxth.w	r3, sl
    15e8:	4543      	cmp	r3, r8
    15ea:	d208      	bcs.n	15fe <grid_port_process_inbound+0x116>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    15ec:	4648      	mov	r0, r9
    15ee:	4b22      	ldr	r3, [pc, #136]	; (1678 <grid_port_process_inbound+0x190>)
    15f0:	4798      	blx	r3
    15f2:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    15f4:	2e00      	cmp	r6, #0
    15f6:	d0f3      	beq.n	15e0 <grid_port_process_inbound+0xf8>
    15f8:	f107 0420 	add.w	r4, r7, #32
    15fc:	e7e6      	b.n	15cc <grid_port_process_inbound+0xe4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    15fe:	4648      	mov	r0, r9
    1600:	4b1e      	ldr	r3, [pc, #120]	; (167c <grid_port_process_inbound+0x194>)
    1602:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1604:	2e00      	cmp	r6, #0
    1606:	f43f af7b 	beq.w	1500 <grid_port_process_inbound+0x18>
    160a:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    160e:	4e1c      	ldr	r6, [pc, #112]	; (1680 <grid_port_process_inbound+0x198>)
    1610:	e002      	b.n	1618 <grid_port_process_inbound+0x130>
		for (uint8_t i=0; i<port_count; i++)
    1612:	42a5      	cmp	r5, r4
    1614:	f43f af74 	beq.w	1500 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    1618:	f854 0b04 	ldr.w	r0, [r4], #4
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	4283      	cmp	r3, r0
    1620:	d0f7      	beq.n	1612 <grid_port_process_inbound+0x12a>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1622:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1626:	47b0      	blx	r6
    1628:	e7f3      	b.n	1612 <grid_port_process_inbound+0x12a>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    162a:	4648      	mov	r0, r9
    162c:	4b10      	ldr	r3, [pc, #64]	; (1670 <grid_port_process_inbound+0x188>)
    162e:	4798      	blx	r3
    1630:	4540      	cmp	r0, r8
    1632:	d1ba      	bne.n	15aa <grid_port_process_inbound+0xc2>
    1634:	1e75      	subs	r5, r6, #1
    1636:	b2ed      	uxtb	r5, r5
    1638:	f107 0338 	add.w	r3, r7, #56	; 0x38
    163c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1640:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1642:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1646:	f8df b040 	ldr.w	fp, [pc, #64]	; 1688 <grid_port_process_inbound+0x1a0>
    164a:	e7cf      	b.n	15ec <grid_port_process_inbound+0x104>
    164c:	000011fd 	.word	0x000011fd
    1650:	20001238 	.word	0x20001238
    1654:	2000309c 	.word	0x2000309c
    1658:	20002678 	.word	0x20002678
    165c:	20002154 	.word	0x20002154
    1660:	20001788 	.word	0x20001788
    1664:	20002b8c 	.word	0x20002b8c
    1668:	20001ca4 	.word	0x20001ca4
    166c:	000038ad 	.word	0x000038ad
    1670:	0000126f 	.word	0x0000126f
    1674:	000011a1 	.word	0x000011a1
    1678:	000012f9 	.word	0x000012f9
    167c:	00001321 	.word	0x00001321
    1680:	000011ed 	.word	0x000011ed
    1684:	0000118d 	.word	0x0000118d
    1688:	000011d1 	.word	0x000011d1

0000168c <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1690:	b09b      	sub	sp, #108	; 0x6c
    1692:	af06      	add	r7, sp, #24
    1694:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1696:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    169a:	4630      	mov	r0, r6
    169c:	4b8c      	ldr	r3, [pc, #560]	; (18d0 <grid_port_process_outbound_usb+0x244>)
    169e:	4798      	blx	r3
	
	if (!length){		
    16a0:	b918      	cbnz	r0, 16aa <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    16a2:	3754      	adds	r7, #84	; 0x54
    16a4:	46bd      	mov	sp, r7
    16a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16aa:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    16ac:	4630      	mov	r0, r6
    16ae:	4b89      	ldr	r3, [pc, #548]	; (18d4 <grid_port_process_outbound_usb+0x248>)
    16b0:	4798      	blx	r3
    16b2:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    16b4:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1910 <grid_port_process_outbound_usb+0x284>
    16b8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 18dc <grid_port_process_outbound_usb+0x250>
    16bc:	4630      	mov	r0, r6
    16be:	47c8      	blx	r9
    16c0:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    16c4:	3501      	adds	r5, #1
    16c6:	b2ed      	uxtb	r5, r5
    16c8:	b2ab      	uxth	r3, r5
    16ca:	429c      	cmp	r4, r3
    16cc:	d8f6      	bhi.n	16bc <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    16ce:	4630      	mov	r0, r6
    16d0:	4b81      	ldr	r3, [pc, #516]	; (18d8 <grid_port_process_outbound_usb+0x24c>)
    16d2:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    16d4:	4d81      	ldr	r5, [pc, #516]	; (18dc <grid_port_process_outbound_usb+0x250>)
    16d6:	4628      	mov	r0, r5
    16d8:	4b81      	ldr	r3, [pc, #516]	; (18e0 <grid_port_process_outbound_usb+0x254>)
    16da:	4798      	blx	r3
    16dc:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    16de:	4628      	mov	r0, r5
    16e0:	4b80      	ldr	r3, [pc, #512]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    16e2:	4798      	blx	r3
    16e4:	387f      	subs	r0, #127	; 0x7f
    16e6:	b243      	sxtb	r3, r0
    16e8:	461e      	mov	r6, r3
    16ea:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    16ec:	4628      	mov	r0, r5
    16ee:	4b7e      	ldr	r3, [pc, #504]	; (18e8 <grid_port_process_outbound_usb+0x25c>)
    16f0:	4798      	blx	r3
    16f2:	387f      	subs	r0, #127	; 0x7f
    16f4:	b243      	sxtb	r3, r0
    16f6:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    16f8:	4628      	mov	r0, r5
    16fa:	4b7c      	ldr	r3, [pc, #496]	; (18ec <grid_port_process_outbound_usb+0x260>)
    16fc:	4798      	blx	r3
    16fe:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    1700:	2500      	movs	r5, #0
    1702:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy)%16;
    1706:	69bb      	ldr	r3, [r7, #24]
    1708:	633b      	str	r3, [r7, #48]	; 0x30
    170a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
    170e:	1aea      	subs	r2, r5, r3
    1710:	f003 030f 	and.w	r3, r3, #15
    1714:	f002 020f 	and.w	r2, r2, #15
    1718:	bf58      	it	pl
    171a:	4253      	negpl	r3, r2
    171c:	b2db      	uxtb	r3, r3
    171e:	461a      	mov	r2, r3
    1720:	623b      	str	r3, [r7, #32]
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1722:	62fe      	str	r6, [r7, #44]	; 0x2c
    1724:	0133      	lsls	r3, r6, #4
    1726:	61fb      	str	r3, [r7, #28]
    1728:	627a      	str	r2, [r7, #36]	; 0x24
    172a:	1e63      	subs	r3, r4, #1
    172c:	b29b      	uxth	r3, r3
    172e:	f103 0b01 	add.w	fp, r3, #1
    1732:	46aa      	mov	sl, r5
    1734:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1736:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 18dc <grid_port_process_outbound_usb+0x250>
    173a:	e006      	b.n	174a <grid_port_process_outbound_usb+0xbe>
				current_start = i;
    173c:	fa5f f58a 	uxtb.w	r5, sl
    1740:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t i=0; i<length; i++){
    1744:	45da      	cmp	sl, fp
    1746:	f000 819a 	beq.w	1a7e <grid_port_process_outbound_usb+0x3f2>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    174a:	f819 300a 	ldrb.w	r3, [r9, sl]
    174e:	b2db      	uxtb	r3, r3
    1750:	2b02      	cmp	r3, #2
    1752:	d0f3      	beq.n	173c <grid_port_process_outbound_usb+0xb0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1754:	f819 300a 	ldrb.w	r3, [r9, sl]
    1758:	b2db      	uxtb	r3, r3
    175a:	2b03      	cmp	r3, #3
    175c:	d1f0      	bne.n	1740 <grid_port_process_outbound_usb+0xb4>
    175e:	2d00      	cmp	r5, #0
    1760:	d0ee      	beq.n	1740 <grid_port_process_outbound_usb+0xb4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1762:	462c      	mov	r4, r5
    1764:	1c68      	adds	r0, r5, #1
    1766:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    176a:	2102      	movs	r1, #2
    176c:	4448      	add	r0, r9
    176e:	4b60      	ldr	r3, [pc, #384]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    1770:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1772:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1776:	d01e      	beq.n	17b6 <grid_port_process_outbound_usb+0x12a>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1778:	2e03      	cmp	r6, #3
    177a:	d072      	beq.n	1862 <grid_port_process_outbound_usb+0x1d6>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    177c:	2e01      	cmp	r6, #1
    177e:	f000 80c9 	beq.w	1914 <grid_port_process_outbound_usb+0x288>
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1782:	2e04      	cmp	r6, #4
    1784:	f000 8150 	beq.w	1a28 <grid_port_process_outbound_usb+0x39c>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1788:	2e02      	cmp	r6, #2
    178a:	f000 8176 	beq.w	1a7a <grid_port_process_outbound_usb+0x3ee>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    178e:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1790:	f105 0428 	add.w	r4, r5, #40	; 0x28
    1794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1796:	441c      	add	r4, r3
    1798:	b2c2      	uxtb	r2, r0
    179a:	4956      	ldr	r1, [pc, #344]	; (18f4 <grid_port_process_outbound_usb+0x268>)
    179c:	4620      	mov	r0, r4
    179e:	4b56      	ldr	r3, [pc, #344]	; (18f8 <grid_port_process_outbound_usb+0x26c>)
    17a0:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    17a2:	4620      	mov	r0, r4
    17a4:	4b55      	ldr	r3, [pc, #340]	; (18fc <grid_port_process_outbound_usb+0x270>)
    17a6:	4798      	blx	r3
    17a8:	eb05 0800 	add.w	r8, r5, r0
    17ac:	fa5f f388 	uxtb.w	r3, r8
    17b0:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    17b2:	2500      	movs	r5, #0
    17b4:	e7c4      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    17b6:	1ce8      	adds	r0, r5, #3
    17b8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17bc:	2102      	movs	r1, #2
    17be:	4448      	add	r0, r9
    17c0:	4b4b      	ldr	r3, [pc, #300]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    17c2:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    17c4:	1d68      	adds	r0, r5, #5
    17c6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17ca:	2102      	movs	r1, #2
    17cc:	4448      	add	r0, r9
    17ce:	4b48      	ldr	r3, [pc, #288]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    17d0:	4798      	blx	r3
    17d2:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    17d6:	1de8      	adds	r0, r5, #7
    17d8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17dc:	2102      	movs	r1, #2
    17de:	4448      	add	r0, r9
    17e0:	4b43      	ldr	r3, [pc, #268]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    17e2:	4798      	blx	r3
    17e4:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    17e6:	f105 0009 	add.w	r0, r5, #9
    17ea:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17ee:	2102      	movs	r1, #2
    17f0:	4448      	add	r0, r9
    17f2:	4b3f      	ldr	r3, [pc, #252]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    17f4:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    17f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    17f8:	3328      	adds	r3, #40	; 0x28
    17fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    17fc:	441a      	add	r2, r3
    17fe:	4615      	mov	r5, r2
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1800:	b2e4      	uxtb	r4, r4
    1802:	3440      	adds	r4, #64	; 0x40
    1804:	69f9      	ldr	r1, [r7, #28]
    1806:	440c      	add	r4, r1
    1808:	4263      	negs	r3, r4
    180a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    180e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1812:	bf58      	it	pl
    1814:	425c      	negpl	r4, r3
    1816:	b2e4      	uxtb	r4, r4
    1818:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    181a:	63fb      	str	r3, [r7, #60]	; 0x3c
    181c:	9305      	str	r3, [sp, #20]
    181e:	9404      	str	r4, [sp, #16]
    1820:	f8cd 800c 	str.w	r8, [sp, #12]
    1824:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1826:	9102      	str	r1, [sp, #8]
    1828:	6b79      	ldr	r1, [r7, #52]	; 0x34
    182a:	9101      	str	r1, [sp, #4]
    182c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    182e:	9100      	str	r1, [sp, #0]
    1830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1832:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1834:	4932      	ldr	r1, [pc, #200]	; (1900 <grid_port_process_outbound_usb+0x274>)
    1836:	62bd      	str	r5, [r7, #40]	; 0x28
    1838:	4628      	mov	r0, r5
    183a:	4d2f      	ldr	r5, [pc, #188]	; (18f8 <grid_port_process_outbound_usb+0x26c>)
    183c:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    183e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1840:	4b2e      	ldr	r3, [pc, #184]	; (18fc <grid_port_process_outbound_usb+0x270>)
    1842:	4798      	blx	r3
    1844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1846:	4418      	add	r0, r3
    1848:	b2c3      	uxtb	r3, r0
    184a:	647b      	str	r3, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    184c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    184e:	4622      	mov	r2, r4
    1850:	6a39      	ldr	r1, [r7, #32]
    1852:	ea48 0101 	orr.w	r1, r8, r1
    1856:	ea4f 1018 	mov.w	r0, r8, lsr #4
    185a:	4c2a      	ldr	r4, [pc, #168]	; (1904 <grid_port_process_outbound_usb+0x278>)
    185c:	47a0      	blx	r4
				current_start = 0;
    185e:	4635      	mov	r5, r6
    1860:	e76e      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
					if (dx == 0 && dy == 0){
    1862:	697b      	ldr	r3, [r7, #20]
    1864:	2b00      	cmp	r3, #0
    1866:	f040 8106 	bne.w	1a76 <grid_port_process_outbound_usb+0x3ea>
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	b10b      	cbz	r3, 1872 <grid_port_process_outbound_usb+0x1e6>
				current_start = 0;
    186e:	2500      	movs	r5, #0
    1870:	e766      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1872:	1ce8      	adds	r0, r5, #3
    1874:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1878:	2102      	movs	r1, #2
    187a:	4448      	add	r0, r9
    187c:	4b1c      	ldr	r3, [pc, #112]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    187e:	4798      	blx	r3
    1880:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1882:	1d68      	adds	r0, r5, #5
    1884:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1888:	2102      	movs	r1, #2
    188a:	4448      	add	r0, r9
    188c:	4b18      	ldr	r3, [pc, #96]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    188e:	4798      	blx	r3
    1890:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1892:	1de0      	adds	r0, r4, #7
    1894:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1898:	2102      	movs	r1, #2
    189a:	4448      	add	r0, r9
    189c:	4b14      	ldr	r3, [pc, #80]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    189e:	4798      	blx	r3
    18a0:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    18a2:	f104 0009 	add.w	r0, r4, #9
    18a6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    18aa:	2102      	movs	r1, #2
    18ac:	4448      	add	r0, r9
    18ae:	4b10      	ldr	r3, [pc, #64]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    18b0:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    18b2:	b2ed      	uxtb	r5, r5
    18b4:	2d63      	cmp	r5, #99	; 0x63
    18b6:	d001      	beq.n	18bc <grid_port_process_outbound_usb+0x230>
				current_start = 0;
    18b8:	2500      	movs	r5, #0
    18ba:	e741      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    18bc:	b2c3      	uxtb	r3, r0
    18be:	b2f2      	uxtb	r2, r6
    18c0:	fa5f f188 	uxtb.w	r1, r8
    18c4:	4810      	ldr	r0, [pc, #64]	; (1908 <grid_port_process_outbound_usb+0x27c>)
    18c6:	4c11      	ldr	r4, [pc, #68]	; (190c <grid_port_process_outbound_usb+0x280>)
    18c8:	47a0      	blx	r4
				current_start = 0;
    18ca:	2500      	movs	r5, #0
    18cc:	e738      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
    18ce:	bf00      	nop
    18d0:	000011fd 	.word	0x000011fd
    18d4:	0000126f 	.word	0x0000126f
    18d8:	00001321 	.word	0x00001321
    18dc:	200035e0 	.word	0x200035e0
    18e0:	00003b71 	.word	0x00003b71
    18e4:	00003b91 	.word	0x00003b91
    18e8:	00003bb1 	.word	0x00003bb1
    18ec:	00003bd1 	.word	0x00003bd1
    18f0:	00003901 	.word	0x00003901
    18f4:	0000bf30 	.word	0x0000bf30
    18f8:	0000b729 	.word	0x0000b729
    18fc:	0000b771 	.word	0x0000b771
    1900:	0000bea0 	.word	0x0000bea0
    1904:	0000a3d1 	.word	0x0000a3d1
    1908:	200035b0 	.word	0x200035b0
    190c:	00001d05 	.word	0x00001d05
    1910:	000012f9 	.word	0x000012f9
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1914:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1918:	fa5f f38a 	uxtb.w	r3, sl
    191c:	1b5b      	subs	r3, r3, r5
    191e:	3b03      	subs	r3, #3
    1920:	4a5a      	ldr	r2, [pc, #360]	; (1a8c <grid_port_process_outbound_usb+0x400>)
    1922:	fb82 1203 	smull	r1, r2, r2, r3
    1926:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    192a:	b2db      	uxtb	r3, r3
    192c:	4619      	mov	r1, r3
    192e:	60fb      	str	r3, [r7, #12]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1934:	3307      	adds	r3, #7
    1936:	f023 0307 	bic.w	r3, r3, #7
    193a:	ebad 0d03 	sub.w	sp, sp, r3
    193e:	ab06      	add	r3, sp, #24
    1940:	461e      	mov	r6, r3
    1942:	60bb      	str	r3, [r7, #8]
					for(uint8_t j=0; j<key_array_length; j++){
    1944:	2900      	cmp	r1, #0
    1946:	d064      	beq.n	1a12 <grid_port_process_outbound_usb+0x386>
    1948:	3403      	adds	r4, #3
    194a:	eb04 0809 	add.w	r8, r4, r9
    194e:	1e4b      	subs	r3, r1, #1
    1950:	b2db      	uxtb	r3, r3
    1952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1956:	3509      	adds	r5, #9
    1958:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    195c:	444b      	add	r3, r9
    195e:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1960:	63fe      	str	r6, [r7, #60]	; 0x3c
    1962:	f8c7 a004 	str.w	sl, [r7, #4]
    1966:	f8c7 b000 	str.w	fp, [r7]
    196a:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    196e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1972:	2102      	movs	r1, #2
    1974:	4640      	mov	r0, r8
    1976:	4b46      	ldr	r3, [pc, #280]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1978:	4798      	blx	r3
    197a:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    197c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1980:	2102      	movs	r1, #2
    1982:	eb08 0001 	add.w	r0, r8, r1
    1986:	4b42      	ldr	r3, [pc, #264]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1988:	4798      	blx	r3
    198a:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    198c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1990:	2102      	movs	r1, #2
    1992:	f108 0004 	add.w	r0, r8, #4
    1996:	4b3e      	ldr	r3, [pc, #248]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1998:	4798      	blx	r3
    199a:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    199c:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
    19a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    19a2:	449a      	add	sl, r3
    19a4:	4b3b      	ldr	r3, [pc, #236]	; (1a94 <grid_port_process_outbound_usb+0x408>)
    19a6:	4798      	blx	r3
    19a8:	9005      	str	r0, [sp, #20]
    19aa:	b2e4      	uxtb	r4, r4
    19ac:	9404      	str	r4, [sp, #16]
    19ae:	b2ed      	uxtb	r5, r5
    19b0:	9503      	str	r5, [sp, #12]
    19b2:	647e      	str	r6, [r7, #68]	; 0x44
    19b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    19b8:	9302      	str	r3, [sp, #8]
    19ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19bc:	9301      	str	r3, [sp, #4]
    19be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    19c0:	9300      	str	r3, [sp, #0]
    19c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    19c6:	4934      	ldr	r1, [pc, #208]	; (1a98 <grid_port_process_outbound_usb+0x40c>)
    19c8:	4650      	mov	r0, sl
    19ca:	4e34      	ldr	r6, [pc, #208]	; (1a9c <grid_port_process_outbound_usb+0x410>)
    19cc:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    19ce:	4650      	mov	r0, sl
    19d0:	4b33      	ldr	r3, [pc, #204]	; (1aa0 <grid_port_process_outbound_usb+0x414>)
    19d2:	4798      	blx	r3
    19d4:	4483      	add	fp, r0
    19d6:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    19da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    19de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    19e0:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    19e2:	2d82      	cmp	r5, #130	; 0x82
    19e4:	bf14      	ite	ne
    19e6:	2500      	movne	r5, #0
    19e8:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    19ea:	460b      	mov	r3, r1
    19ec:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    19ee:	2c80      	cmp	r4, #128	; 0x80
    19f0:	bf14      	ite	ne
    19f2:	2400      	movne	r4, #0
    19f4:	2401      	moveq	r4, #1
    19f6:	708c      	strb	r4, [r1, #2]
    19f8:	f108 0806 	add.w	r8, r8, #6
    19fc:	3303      	adds	r3, #3
    19fe:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a02:	4598      	cmp	r8, r3
    1a04:	d1b3      	bne.n	196e <grid_port_process_outbound_usb+0x2e2>
    1a06:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1a0a:	f8d7 a004 	ldr.w	sl, [r7, #4]
    1a0e:	f8d7 b000 	ldr.w	fp, [r7]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1a12:	68f9      	ldr	r1, [r7, #12]
    1a14:	68b8      	ldr	r0, [r7, #8]
    1a16:	4b23      	ldr	r3, [pc, #140]	; (1aa4 <grid_port_process_outbound_usb+0x418>)
    1a18:	4798      	blx	r3
    1a1a:	b2c0      	uxtb	r0, r0
    1a1c:	4b22      	ldr	r3, [pc, #136]	; (1aa8 <grid_port_process_outbound_usb+0x41c>)
    1a1e:	7058      	strb	r0, [r3, #1]
    1a20:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1a24:	2500      	movs	r5, #0
    1a26:	e68b      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
					uint8_t sys_bank		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a28:	1ce8      	adds	r0, r5, #3
    1a2a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a2e:	2102      	movs	r1, #2
    1a30:	4448      	add	r0, r9
    1a32:	4b17      	ldr	r3, [pc, #92]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1a34:	4798      	blx	r3
    1a36:	4605      	mov	r5, r0
					uint8_t sys_bank_select = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a38:	1d60      	adds	r0, r4, #5
    1a3a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a3e:	2102      	movs	r1, #2
    1a40:	4448      	add	r0, r9
    1a42:	4b13      	ldr	r3, [pc, #76]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1a44:	4798      	blx	r3
    1a46:	4606      	mov	r6, r0
					uint8_t sys_bank_value  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a48:	1de0      	adds	r0, r4, #7
    1a4a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a4e:	2102      	movs	r1, #2
    1a50:	4448      	add	r0, r9
    1a52:	4b0f      	ldr	r3, [pc, #60]	; (1a90 <grid_port_process_outbound_usb+0x404>)
    1a54:	4798      	blx	r3
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1a56:	b2ed      	uxtb	r5, r5
    1a58:	2d64      	cmp	r5, #100	; 0x64
    1a5a:	d001      	beq.n	1a60 <grid_port_process_outbound_usb+0x3d4>
				current_start = 0;
    1a5c:	2500      	movs	r5, #0
    1a5e:	e66f      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1a60:	b2f6      	uxtb	r6, r6
    1a62:	2e65      	cmp	r6, #101	; 0x65
    1a64:	d001      	beq.n	1a6a <grid_port_process_outbound_usb+0x3de>
				current_start = 0;
    1a66:	2500      	movs	r5, #0
    1a68:	e66a      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
						grid_sys_bank_select(&grid_sys_state, sys_bank_value);		
    1a6a:	b2c1      	uxtb	r1, r0
    1a6c:	480f      	ldr	r0, [pc, #60]	; (1aac <grid_port_process_outbound_usb+0x420>)
    1a6e:	4b10      	ldr	r3, [pc, #64]	; (1ab0 <grid_port_process_outbound_usb+0x424>)
    1a70:	4798      	blx	r3
				current_start = 0;
    1a72:	2500      	movs	r5, #0
    1a74:	e664      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
    1a76:	2500      	movs	r5, #0
    1a78:	e662      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
    1a7a:	2500      	movs	r5, #0
    1a7c:	e660      	b.n	1740 <grid_port_process_outbound_usb+0xb4>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1a80:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1a82:	3028      	adds	r0, #40	; 0x28
    1a84:	4b0b      	ldr	r3, [pc, #44]	; (1ab4 <grid_port_process_outbound_usb+0x428>)
    1a86:	4798      	blx	r3
}
    1a88:	e60b      	b.n	16a2 <grid_port_process_outbound_usb+0x16>
    1a8a:	bf00      	nop
    1a8c:	2aaaaaab 	.word	0x2aaaaaab
    1a90:	00003901 	.word	0x00003901
    1a94:	00003979 	.word	0x00003979
    1a98:	0000bee8 	.word	0x0000bee8
    1a9c:	0000b729 	.word	0x0000b729
    1aa0:	0000b771 	.word	0x0000b771
    1aa4:	00009e4d 	.word	0x00009e4d
    1aa8:	200037d4 	.word	0x200037d4
    1aac:	20001ca4 	.word	0x20001ca4
    1ab0:	00003a69 	.word	0x00003a69
    1ab4:	00009c0d 	.word	0x00009c0d

00001ab8 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1aba:	f500 659b 	add.w	r5, r0, #1240	; 0x4d8
    1abe:	4628      	mov	r0, r5
    1ac0:	4b0a      	ldr	r3, [pc, #40]	; (1aec <grid_port_process_outbound_ui+0x34>)
    1ac2:	4798      	blx	r3
	
	if (!packet_size){
    1ac4:	b900      	cbnz	r0, 1ac8 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ac8:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1aca:	4628      	mov	r0, r5
    1acc:	4b08      	ldr	r3, [pc, #32]	; (1af0 <grid_port_process_outbound_ui+0x38>)
    1ace:	4798      	blx	r3
    1ad0:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1ad2:	4f08      	ldr	r7, [pc, #32]	; (1af4 <grid_port_process_outbound_ui+0x3c>)
    1ad4:	4628      	mov	r0, r5
    1ad6:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1ad8:	3401      	adds	r4, #1
    1ada:	b2e4      	uxtb	r4, r4
    1adc:	b2a3      	uxth	r3, r4
    1ade:	429e      	cmp	r6, r3
    1ae0:	d8f8      	bhi.n	1ad4 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1ae2:	4628      	mov	r0, r5
    1ae4:	4b04      	ldr	r3, [pc, #16]	; (1af8 <grid_port_process_outbound_ui+0x40>)
    1ae6:	4798      	blx	r3
}
    1ae8:	e7ed      	b.n	1ac6 <grid_port_process_outbound_ui+0xe>
    1aea:	bf00      	nop
    1aec:	000011fd 	.word	0x000011fd
    1af0:	0000126f 	.word	0x0000126f
    1af4:	000012f9 	.word	0x000012f9
    1af8:	00001321 	.word	0x00001321

00001afc <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1afc:	8983      	ldrh	r3, [r0, #12]
    1afe:	b103      	cbz	r3, 1b02 <grid_port_process_outbound_usart+0x6>
    1b00:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b06:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1b08:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1b0c:	4630      	mov	r0, r6
    1b0e:	4b11      	ldr	r3, [pc, #68]	; (1b54 <grid_port_process_outbound_usart+0x58>)
    1b10:	4798      	blx	r3
    1b12:	4604      	mov	r4, r0
    1b14:	4607      	mov	r7, r0
		
		if (!packet_size){
    1b16:	b910      	cbnz	r0, 1b1e <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1b18:	2000      	movs	r0, #0
    1b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1b1e:	4630      	mov	r0, r6
    1b20:	4b0d      	ldr	r3, [pc, #52]	; (1b58 <grid_port_process_outbound_usart+0x5c>)
    1b22:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1b24:	81ac      	strh	r4, [r5, #12]
    1b26:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1b28:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1b64 <grid_port_process_outbound_usart+0x68>
    1b2c:	4630      	mov	r0, r6
    1b2e:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1b30:	192b      	adds	r3, r5, r4
    1b32:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1b36:	3401      	adds	r4, #1
    1b38:	b2e4      	uxtb	r4, r4
    1b3a:	42a7      	cmp	r7, r4
    1b3c:	d8f6      	bhi.n	1b2c <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1b3e:	4630      	mov	r0, r6
    1b40:	4b06      	ldr	r3, [pc, #24]	; (1b5c <grid_port_process_outbound_usart+0x60>)
    1b42:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1b44:	89aa      	ldrh	r2, [r5, #12]
    1b46:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1b4a:	6868      	ldr	r0, [r5, #4]
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <grid_port_process_outbound_usart+0x64>)
    1b4e:	4798      	blx	r3
			
		}
		
	}
	
}
    1b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b54:	000011fd 	.word	0x000011fd
    1b58:	0000126f 	.word	0x0000126f
    1b5c:	00001321 	.word	0x00001321
    1b60:	0000466d 	.word	0x0000466d
    1b64:	000012f9 	.word	0x000012f9

00001b68 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1b68:	2201      	movs	r2, #1
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <grid_led_hardware_transfer_complete_cb+0x8>)
    1b6c:	701a      	strb	r2, [r3, #0]
    1b6e:	4770      	bx	lr
    1b70:	20001234 	.word	0x20001234

00001b74 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1b74:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1b76:	7844      	ldrb	r4, [r0, #1]
    1b78:	428c      	cmp	r4, r1
    1b7a:	d802      	bhi.n	1b82 <grid_led_set_color+0xe>
		return -1;		
    1b7c:	20ff      	movs	r0, #255	; 0xff
}
    1b7e:	bc30      	pop	{r4, r5}
    1b80:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1b82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1b86:	0089      	lsls	r1, r1, #2
    1b88:	4c09      	ldr	r4, [pc, #36]	; (1bb0 <grid_led_set_color+0x3c>)
    1b8a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1b8e:	68c3      	ldr	r3, [r0, #12]
    1b90:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1b96:	68c3      	ldr	r3, [r0, #12]
    1b98:	440b      	add	r3, r1
    1b9a:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1b9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1ba0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1ba4:	68c3      	ldr	r3, [r0, #12]
    1ba6:	4419      	add	r1, r3
    1ba8:	608a      	str	r2, [r1, #8]
		return 0;
    1baa:	2000      	movs	r0, #0
    1bac:	e7e7      	b.n	1b7e <grid_led_set_color+0xa>
    1bae:	bf00      	nop
    1bb0:	20001d44 	.word	0x20001d44

00001bb4 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1bb4:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1bb6:	4c06      	ldr	r4, [pc, #24]	; (1bd0 <grid_led_hardware_init+0x1c>)
    1bb8:	f100 0114 	add.w	r1, r0, #20
    1bbc:	4620      	mov	r0, r4
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <grid_led_hardware_init+0x20>)
    1bc0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1bc2:	4a05      	ldr	r2, [pc, #20]	; (1bd8 <grid_led_hardware_init+0x24>)
    1bc4:	2100      	movs	r1, #0
    1bc6:	4620      	mov	r0, r4
    1bc8:	4b04      	ldr	r3, [pc, #16]	; (1bdc <grid_led_hardware_init+0x28>)
    1bca:	4798      	blx	r3
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	bf00      	nop
    1bd0:	200010c4 	.word	0x200010c4
    1bd4:	00004b65 	.word	0x00004b65
    1bd8:	00001b69 	.word	0x00001b69
    1bdc:	00004b35 	.word	0x00004b35

00001be0 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1be0:	7840      	ldrb	r0, [r0, #1]
    1be2:	4770      	bx	lr

00001be4 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1be4:	7843      	ldrb	r3, [r0, #1]
    1be6:	b1f3      	cbz	r3, 1c26 <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1be8:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1bea:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1bec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1bf0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1bf4:	6902      	ldr	r2, [r0, #16]
    1bf6:	440a      	add	r2, r1
    1bf8:	7ad1      	ldrb	r1, [r2, #11]
    1bfa:	7b14      	ldrb	r4, [r2, #12]
    1bfc:	4421      	add	r1, r4
    1bfe:	72d1      	strb	r1, [r2, #11]
    1c00:	7842      	ldrb	r2, [r0, #1]
    1c02:	441a      	add	r2, r3
    1c04:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c0c:	6901      	ldr	r1, [r0, #16]
    1c0e:	440a      	add	r2, r1
    1c10:	7ad1      	ldrb	r1, [r2, #11]
    1c12:	7b14      	ldrb	r4, [r2, #12]
    1c14:	4421      	add	r1, r4
    1c16:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1c18:	3301      	adds	r3, #1
    1c1a:	b2db      	uxtb	r3, r3
    1c1c:	7842      	ldrb	r2, [r0, #1]
    1c1e:	429a      	cmp	r2, r3
    1c20:	d8e4      	bhi.n	1bec <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1c22:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c26:	4770      	bx	lr

00001c28 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1c28:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1c2a:	7844      	ldrb	r4, [r0, #1]
    1c2c:	fb02 1404 	mla	r4, r2, r4, r1
    1c30:	6905      	ldr	r5, [r0, #16]
    1c32:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1c36:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1c3a:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1c3c:	7843      	ldrb	r3, [r0, #1]
    1c3e:	fb02 1303 	mla	r3, r2, r3, r1
    1c42:	6904      	ldr	r4, [r0, #16]
    1c44:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1c48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1c4c:	4423      	add	r3, r4
    1c4e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1c52:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1c54:	7843      	ldrb	r3, [r0, #1]
    1c56:	fb02 1203 	mla	r2, r2, r3, r1
    1c5a:	6903      	ldr	r3, [r0, #16]
    1c5c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c64:	441a      	add	r2, r3
    1c66:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1c6a:	7093      	strb	r3, [r2, #2]
}
    1c6c:	bc70      	pop	{r4, r5, r6}
    1c6e:	4770      	bx	lr

00001c70 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1c70:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1c72:	7844      	ldrb	r4, [r0, #1]
    1c74:	fb02 1404 	mla	r4, r2, r4, r1
    1c78:	6905      	ldr	r5, [r0, #16]
    1c7a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1c7e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1c82:	442c      	add	r4, r5
    1c84:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1c86:	7843      	ldrb	r3, [r0, #1]
    1c88:	fb02 1303 	mla	r3, r2, r3, r1
    1c8c:	6904      	ldr	r4, [r0, #16]
    1c8e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1c92:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1c96:	4423      	add	r3, r4
    1c98:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1c9c:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1c9e:	7843      	ldrb	r3, [r0, #1]
    1ca0:	fb02 1203 	mla	r2, r2, r3, r1
    1ca4:	6903      	ldr	r3, [r0, #16]
    1ca6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1caa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1cae:	441a      	add	r2, r3
    1cb0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1cb4:	7153      	strb	r3, [r2, #5]
}
    1cb6:	bc70      	pop	{r4, r5, r6}
    1cb8:	4770      	bx	lr

00001cba <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1cba:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1cbc:	7844      	ldrb	r4, [r0, #1]
    1cbe:	fb02 1404 	mla	r4, r2, r4, r1
    1cc2:	6905      	ldr	r5, [r0, #16]
    1cc4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1cc8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1ccc:	442c      	add	r4, r5
    1cce:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1cd0:	7843      	ldrb	r3, [r0, #1]
    1cd2:	fb02 1303 	mla	r3, r2, r3, r1
    1cd6:	6904      	ldr	r4, [r0, #16]
    1cd8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1cdc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1ce0:	4423      	add	r3, r4
    1ce2:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1ce6:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1ce8:	7843      	ldrb	r3, [r0, #1]
    1cea:	fb02 1203 	mla	r2, r2, r3, r1
    1cee:	6903      	ldr	r3, [r0, #16]
    1cf0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1cf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1cf8:	441a      	add	r2, r3
    1cfa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1cfe:	7213      	strb	r3, [r2, #8]
}
    1d00:	bc70      	pop	{r4, r5, r6}
    1d02:	4770      	bx	lr

00001d04 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1d04:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1d06:	7844      	ldrb	r4, [r0, #1]
    1d08:	fb02 1204 	mla	r2, r2, r4, r1
    1d0c:	6901      	ldr	r1, [r0, #16]
    1d0e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1d12:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1d16:	440a      	add	r2, r1
    1d18:	72d3      	strb	r3, [r2, #11]
}
    1d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d1e:	4770      	bx	lr

00001d20 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1d20:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1d22:	7844      	ldrb	r4, [r0, #1]
    1d24:	fb02 1204 	mla	r2, r2, r4, r1
    1d28:	6901      	ldr	r1, [r0, #16]
    1d2a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1d2e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1d32:	440a      	add	r2, r1
    1d34:	7313      	strb	r3, [r2, #12]
}
    1d36:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d3a:	4770      	bx	lr

00001d3c <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d40:	b083      	sub	sp, #12
    1d42:	4604      	mov	r4, r0
	mod->led_number = length;
    1d44:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1d46:	b2cd      	uxtb	r5, r1
    1d48:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1d4c:	0080      	lsls	r0, r0, #2
    1d4e:	3090      	adds	r0, #144	; 0x90
    1d50:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1d52:	4f3e      	ldr	r7, [pc, #248]	; (1e4c <grid_led_buffer_init+0x110>)
    1d54:	47b8      	blx	r7
    1d56:	4606      	mov	r6, r0
    1d58:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1d5a:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1d5e:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1d60:	201a      	movs	r0, #26
    1d62:	fb00 f005 	mul.w	r0, r0, r5
    1d66:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1d68:	2e00      	cmp	r6, #0
    1d6a:	d06e      	beq.n	1e4a <grid_led_buffer_init+0x10e>
    1d6c:	2800      	cmp	r0, #0
    1d6e:	d06c      	beq.n	1e4a <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1d70:	6120      	str	r0, [r4, #16]
    1d72:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1d74:	4619      	mov	r1, r3
    1d76:	68a2      	ldr	r2, [r4, #8]
    1d78:	54d1      	strb	r1, [r2, r3]
    1d7a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1d7c:	2b90      	cmp	r3, #144	; 0x90
    1d7e:	d1fa      	bne.n	1d76 <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1d80:	7863      	ldrb	r3, [r4, #1]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d05e      	beq.n	1e44 <grid_led_buffer_init+0x108>
    1d86:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1d88:	462e      	mov	r6, r5
    1d8a:	4f31      	ldr	r7, [pc, #196]	; (1e50 <grid_led_buffer_init+0x114>)
    1d8c:	9600      	str	r6, [sp, #0]
    1d8e:	4633      	mov	r3, r6
    1d90:	4632      	mov	r2, r6
    1d92:	4629      	mov	r1, r5
    1d94:	4620      	mov	r0, r4
    1d96:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1d98:	3501      	adds	r5, #1
    1d9a:	7863      	ldrb	r3, [r4, #1]
    1d9c:	42ab      	cmp	r3, r5
    1d9e:	d8f5      	bhi.n	1d8c <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1da0:	2b00      	cmp	r3, #0
    1da2:	d04f      	beq.n	1e44 <grid_led_buffer_init+0x108>
    1da4:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1da6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1e58 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1daa:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1e5c <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1dae:	2500      	movs	r5, #0
    1db0:	9501      	str	r5, [sp, #4]
    1db2:	9500      	str	r5, [sp, #0]
    1db4:	462b      	mov	r3, r5
    1db6:	462a      	mov	r2, r5
    1db8:	4631      	mov	r1, r6
    1dba:	4620      	mov	r0, r4
    1dbc:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1dbe:	9501      	str	r5, [sp, #4]
    1dc0:	237f      	movs	r3, #127	; 0x7f
    1dc2:	9300      	str	r3, [sp, #0]
    1dc4:	462b      	mov	r3, r5
    1dc6:	462a      	mov	r2, r5
    1dc8:	4631      	mov	r1, r6
    1dca:	4620      	mov	r0, r4
    1dcc:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1dce:	9501      	str	r5, [sp, #4]
    1dd0:	23ff      	movs	r3, #255	; 0xff
    1dd2:	9300      	str	r3, [sp, #0]
    1dd4:	462b      	mov	r3, r5
    1dd6:	462a      	mov	r2, r5
    1dd8:	4631      	mov	r1, r6
    1dda:	4620      	mov	r0, r4
    1ddc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1e60 <grid_led_buffer_init+0x124>
    1de0:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1de2:	462b      	mov	r3, r5
    1de4:	462a      	mov	r2, r5
    1de6:	4631      	mov	r1, r6
    1de8:	4620      	mov	r0, r4
    1dea:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1e64 <grid_led_buffer_init+0x128>
    1dee:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1df0:	462b      	mov	r3, r5
    1df2:	462a      	mov	r2, r5
    1df4:	4631      	mov	r1, r6
    1df6:	4620      	mov	r0, r4
    1df8:	4f16      	ldr	r7, [pc, #88]	; (1e54 <grid_led_buffer_init+0x118>)
    1dfa:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    1dfc:	9501      	str	r5, [sp, #4]
    1dfe:	9500      	str	r5, [sp, #0]
    1e00:	462b      	mov	r3, r5
    1e02:	2201      	movs	r2, #1
    1e04:	4631      	mov	r1, r6
    1e06:	4620      	mov	r0, r4
    1e08:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    1e0a:	9501      	str	r5, [sp, #4]
    1e0c:	9500      	str	r5, [sp, #0]
    1e0e:	462b      	mov	r3, r5
    1e10:	2201      	movs	r2, #1
    1e12:	4631      	mov	r1, r6
    1e14:	4620      	mov	r0, r4
    1e16:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1e18:	9501      	str	r5, [sp, #4]
    1e1a:	9500      	str	r5, [sp, #0]
    1e1c:	462b      	mov	r3, r5
    1e1e:	2201      	movs	r2, #1
    1e20:	4631      	mov	r1, r6
    1e22:	4620      	mov	r0, r4
    1e24:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    1e26:	462b      	mov	r3, r5
    1e28:	2201      	movs	r2, #1
    1e2a:	4631      	mov	r1, r6
    1e2c:	4620      	mov	r0, r4
    1e2e:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    1e30:	462b      	mov	r3, r5
    1e32:	2201      	movs	r2, #1
    1e34:	4631      	mov	r1, r6
    1e36:	4620      	mov	r0, r4
    1e38:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    1e3a:	3601      	adds	r6, #1
    1e3c:	b2f6      	uxtb	r6, r6
    1e3e:	7863      	ldrb	r3, [r4, #1]
    1e40:	42b3      	cmp	r3, r6
    1e42:	d8b4      	bhi.n	1dae <grid_led_buffer_init+0x72>
}
    1e44:	b003      	add	sp, #12
    1e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e4a:	e7fe      	b.n	1e4a <grid_led_buffer_init+0x10e>
    1e4c:	0000b579 	.word	0x0000b579
    1e50:	00001b75 	.word	0x00001b75
    1e54:	00001d05 	.word	0x00001d05
    1e58:	00001c29 	.word	0x00001c29
    1e5c:	00001c71 	.word	0x00001c71
    1e60:	00001cbb 	.word	0x00001cbb
    1e64:	00001d21 	.word	0x00001d21

00001e68 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    1e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e6c:	b083      	sub	sp, #12
    1e6e:	f890 c001 	ldrb.w	ip, [r0, #1]
    1e72:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    1e76:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    1e7a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1e7e:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    1e82:	6904      	ldr	r4, [r0, #16]
    1e84:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    1e86:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    1e88:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    1e8c:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    1e8e:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e90:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1f18 <grid_led_render+0xb0>
    1e94:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e96:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e9a:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e9c:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    1ea0:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    1ea4:	f894 a000 	ldrb.w	sl, [r4]
    1ea8:	f894 b003 	ldrb.w	fp, [r4, #3]
    1eac:	fb05 fb0b 	mul.w	fp, r5, fp
    1eb0:	fb09 bb0a 	mla	fp, r9, sl, fp
    1eb4:	f894 a006 	ldrb.w	sl, [r4, #6]
    1eb8:	fb06 ba0a 	mla	sl, r6, sl, fp
    1ebc:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    1ebe:	f894 a001 	ldrb.w	sl, [r4, #1]
    1ec2:	f894 b004 	ldrb.w	fp, [r4, #4]
    1ec6:	fb05 fb0b 	mul.w	fp, r5, fp
    1eca:	fb09 bb0a 	mla	fp, r9, sl, fp
    1ece:	f894 a007 	ldrb.w	sl, [r4, #7]
    1ed2:	fb06 ba0a 	mla	sl, r6, sl, fp
    1ed6:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    1ed8:	f894 a002 	ldrb.w	sl, [r4, #2]
    1edc:	f894 b005 	ldrb.w	fp, [r4, #5]
    1ee0:	fb05 f50b 	mul.w	r5, r5, fp
    1ee4:	fb09 590a 	mla	r9, r9, sl, r5
    1ee8:	7a25      	ldrb	r5, [r4, #8]
    1eea:	fb06 9505 	mla	r5, r6, r5, r9
    1eee:	44ae      	add	lr, r5
    1ef0:	3f01      	subs	r7, #1
    1ef2:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    1ef4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    1ef8:	d1cc      	bne.n	1e94 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    1efa:	f3ce 2447 	ubfx	r4, lr, #9, #8
    1efe:	9400      	str	r4, [sp, #0]
    1f00:	f3c3 2347 	ubfx	r3, r3, #9, #8
    1f04:	f3c2 2247 	ubfx	r2, r2, #9, #8
    1f08:	4c02      	ldr	r4, [pc, #8]	; (1f14 <grid_led_render+0xac>)
    1f0a:	47a0      	blx	r4
	
}
    1f0c:	b003      	add	sp, #12
    1f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f12:	bf00      	nop
    1f14:	00001b75 	.word	0x00001b75
    1f18:	20000000 	.word	0x20000000

00001f1c <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    1f1c:	7843      	ldrb	r3, [r0, #1]
    1f1e:	b15b      	cbz	r3, 1f38 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    1f20:	b570      	push	{r4, r5, r6, lr}
    1f22:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    1f24:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    1f26:	4e05      	ldr	r6, [pc, #20]	; (1f3c <grid_led_render_all+0x20>)
    1f28:	4621      	mov	r1, r4
    1f2a:	4628      	mov	r0, r5
    1f2c:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    1f2e:	3401      	adds	r4, #1
    1f30:	786b      	ldrb	r3, [r5, #1]
    1f32:	42a3      	cmp	r3, r4
    1f34:	d8f8      	bhi.n	1f28 <grid_led_render_all+0xc>
    1f36:	bd70      	pop	{r4, r5, r6, pc}
    1f38:	4770      	bx	lr
    1f3a:	bf00      	nop
    1f3c:	00001e69 	.word	0x00001e69

00001f40 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    1f40:	b510      	push	{r4, lr}
    1f42:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1f44:	2200      	movs	r2, #0
    1f46:	4b08      	ldr	r3, [pc, #32]	; (1f68 <grid_led_hardware_start_transfer_blocking+0x28>)
    1f48:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    1f4a:	4808      	ldr	r0, [pc, #32]	; (1f6c <grid_led_hardware_start_transfer_blocking+0x2c>)
    1f4c:	4b08      	ldr	r3, [pc, #32]	; (1f70 <grid_led_hardware_start_transfer_blocking+0x30>)
    1f4e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1f50:	88a2      	ldrh	r2, [r4, #4]
    1f52:	68a1      	ldr	r1, [r4, #8]
    1f54:	6960      	ldr	r0, [r4, #20]
    1f56:	4b07      	ldr	r3, [pc, #28]	; (1f74 <grid_led_hardware_start_transfer_blocking+0x34>)
    1f58:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    1f5a:	4a03      	ldr	r2, [pc, #12]	; (1f68 <grid_led_hardware_start_transfer_blocking+0x28>)
    1f5c:	7813      	ldrb	r3, [r2, #0]
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	2b01      	cmp	r3, #1
    1f62:	d1fb      	bne.n	1f5c <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    1f64:	bd10      	pop	{r4, pc}
    1f66:	bf00      	nop
    1f68:	20001234 	.word	0x20001234
    1f6c:	200010c4 	.word	0x200010c4
    1f70:	00004b0d 	.word	0x00004b0d
    1f74:	0000466d 	.word	0x0000466d

00001f78 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    1f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f7c:	b085      	sub	sp, #20
    1f7e:	4605      	mov	r5, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    1f80:	4b1f      	ldr	r3, [pc, #124]	; (2000 <grid_led_startup_animation+0x88>)
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    1f86:	2b20      	cmp	r3, #32
    1f88:	d00f      	beq.n	1faa <grid_led_startup_animation+0x32>
	uint8_t s		  = 1;
    1f8a:	2301      	movs	r3, #1
	uint8_t color_b   = 1;
    1f8c:	461a      	mov	r2, r3
	uint8_t color_r   = 0;
    1f8e:	2100      	movs	r1, #0
    1f90:	fb03 f101 	mul.w	r1, r3, r1
    1f94:	9102      	str	r1, [sp, #8]
    1f96:	fb03 f302 	mul.w	r3, r3, r2
    1f9a:	9303      	str	r3, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1f9c:	f04f 0a00 	mov.w	sl, #0
    1fa0:	46d3      	mov	fp, sl
    1fa2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    1fa6:	4e17      	ldr	r6, [pc, #92]	; (2004 <grid_led_startup_animation+0x8c>)
    1fa8:	e01d      	b.n	1fe6 <grid_led_startup_animation+0x6e>
		s= 2;
    1faa:	2302      	movs	r3, #2
		color_b = 0;
    1fac:	2200      	movs	r2, #0
		color_r = 1;
    1fae:	2101      	movs	r1, #1
    1fb0:	e7ee      	b.n	1f90 <grid_led_startup_animation+0x18>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1fb2:	9700      	str	r7, [sp, #0]
    1fb4:	2300      	movs	r3, #0
    1fb6:	4642      	mov	r2, r8
    1fb8:	4621      	mov	r1, r4
    1fba:	4628      	mov	r0, r5
    1fbc:	47b0      	blx	r6
		for (uint8_t j=0; j<mod->led_number; j++){
    1fbe:	3401      	adds	r4, #1
    1fc0:	b2e4      	uxtb	r4, r4
    1fc2:	786b      	ldrb	r3, [r5, #1]
    1fc4:	42a3      	cmp	r3, r4
    1fc6:	d8f4      	bhi.n	1fb2 <grid_led_startup_animation+0x3a>
		grid_led_hardware_start_transfer_blocking(mod);
    1fc8:	4628      	mov	r0, r5
    1fca:	4b0f      	ldr	r3, [pc, #60]	; (2008 <grid_led_startup_animation+0x90>)
    1fcc:	4798      	blx	r3
		delay_ms(1);
    1fce:	2001      	movs	r0, #1
    1fd0:	4b0e      	ldr	r3, [pc, #56]	; (200c <grid_led_startup_animation+0x94>)
    1fd2:	4798      	blx	r3
    1fd4:	f109 39ff 	add.w	r9, r9, #4294967295
    1fd8:	9b02      	ldr	r3, [sp, #8]
    1fda:	449b      	add	fp, r3
    1fdc:	9b03      	ldr	r3, [sp, #12]
    1fde:	449a      	add	sl, r3
	for (uint8_t i = 0; i<255; i++){
    1fe0:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1fe4:	d008      	beq.n	1ff8 <grid_led_startup_animation+0x80>
		for (uint8_t j=0; j<mod->led_number; j++){
    1fe6:	786b      	ldrb	r3, [r5, #1]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d0ed      	beq.n	1fc8 <grid_led_startup_animation+0x50>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1fec:	fa5f f88b 	uxtb.w	r8, fp
    1ff0:	fa5f f78a 	uxtb.w	r7, sl
    1ff4:	2400      	movs	r4, #0
    1ff6:	e7dc      	b.n	1fb2 <grid_led_startup_animation+0x3a>
}
    1ff8:	b005      	add	sp, #20
    1ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ffe:	bf00      	nop
    2000:	40000c00 	.word	0x40000c00
    2004:	00001b75 	.word	0x00001b75
    2008:	00001f41 	.word	0x00001f41
    200c:	000043d5 	.word	0x000043d5

00002010 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	4604      	mov	r4, r0
    2014:	4e2b      	ldr	r6, [pc, #172]	; (20c4 <grid_led_init+0xb4>)
    2016:	2200      	movs	r2, #0
    2018:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    201a:	f003 0001 	and.w	r0, r3, #1
    201e:	2800      	cmp	r0, #0
    2020:	bf14      	ite	ne
    2022:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    2026:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    202a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    202e:	2d00      	cmp	r5, #0
    2030:	bf14      	ite	ne
    2032:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    2036:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    203a:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    203c:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2040:	2800      	cmp	r0, #0
    2042:	bf14      	ite	ne
    2044:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2048:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    204c:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    204e:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    2052:	2d00      	cmp	r5, #0
    2054:	bf14      	ite	ne
    2056:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    205a:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    205e:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2060:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2064:	2d00      	cmp	r5, #0
    2066:	bf14      	ite	ne
    2068:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    206c:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2070:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2072:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2076:	2800      	cmp	r0, #0
    2078:	bf14      	ite	ne
    207a:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    207e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    2082:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2084:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2088:	2800      	cmp	r0, #0
    208a:	bf14      	ite	ne
    208c:	200e      	movne	r0, #14
    208e:	2008      	moveq	r0, #8
    2090:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2092:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2096:	2b00      	cmp	r3, #0
    2098:	bf14      	ite	ne
    209a:	23e0      	movne	r3, #224	; 0xe0
    209c:	2380      	moveq	r3, #128	; 0x80
    209e:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    20a0:	f846 3f04 	str.w	r3, [r6, #4]!
    20a4:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    20a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    20aa:	d1b5      	bne.n	2018 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    20ac:	4620      	mov	r0, r4
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <grid_led_init+0xb8>)
    20b0:	4798      	blx	r3
	grid_led_hardware_init(mod);
    20b2:	4620      	mov	r0, r4
    20b4:	4b05      	ldr	r3, [pc, #20]	; (20cc <grid_led_init+0xbc>)
    20b6:	4798      	blx	r3
	grid_led_startup_animation(mod);
    20b8:	4620      	mov	r0, r4
    20ba:	4b05      	ldr	r3, [pc, #20]	; (20d0 <grid_led_init+0xc0>)
    20bc:	4798      	blx	r3
}
    20be:	2000      	movs	r0, #0
    20c0:	bd70      	pop	{r4, r5, r6, pc}
    20c2:	bf00      	nop
    20c4:	20001d40 	.word	0x20001d40
    20c8:	00001d3d 	.word	0x00001d3d
    20cc:	00001bb5 	.word	0x00001bb5
    20d0:	00001f79 	.word	0x00001f79

000020d4 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    20d4:	b510      	push	{r4, lr}
    20d6:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    20d8:	2200      	movs	r2, #0
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <grid_led_hardware_start_transfer+0x1c>)
    20dc:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    20de:	4805      	ldr	r0, [pc, #20]	; (20f4 <grid_led_hardware_start_transfer+0x20>)
    20e0:	4b05      	ldr	r3, [pc, #20]	; (20f8 <grid_led_hardware_start_transfer+0x24>)
    20e2:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    20e4:	88a2      	ldrh	r2, [r4, #4]
    20e6:	68a1      	ldr	r1, [r4, #8]
    20e8:	6960      	ldr	r0, [r4, #20]
    20ea:	4b04      	ldr	r3, [pc, #16]	; (20fc <grid_led_hardware_start_transfer+0x28>)
    20ec:	4798      	blx	r3
    20ee:	bd10      	pop	{r4, pc}
    20f0:	20001234 	.word	0x20001234
    20f4:	200010c4 	.word	0x200010c4
    20f8:	00004b0d 	.word	0x00004b0d
    20fc:	0000466d 	.word	0x0000466d

00002100 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    2100:	4b01      	ldr	r3, [pc, #4]	; (2108 <grid_led_hardware_is_transfer_completed+0x8>)
    2102:	7818      	ldrb	r0, [r3, #0]
	
    2104:	4770      	bx	lr
    2106:	bf00      	nop
    2108:	20001234 	.word	0x20001234

0000210c <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    210c:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    210e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2112:	4b13      	ldr	r3, [pc, #76]	; (2160 <grid_module_common_init+0x54>)
    2114:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2118:	4b12      	ldr	r3, [pc, #72]	; (2164 <grid_module_common_init+0x58>)
    211a:	4798      	blx	r3
    211c:	b178      	cbz	r0, 213e <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    211e:	4b11      	ldr	r3, [pc, #68]	; (2164 <grid_module_common_init+0x58>)
    2120:	4798      	blx	r3
    2122:	2880      	cmp	r0, #128	; 0x80
    2124:	d00f      	beq.n	2146 <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    2126:	4b0f      	ldr	r3, [pc, #60]	; (2164 <grid_module_common_init+0x58>)
    2128:	4798      	blx	r3
    212a:	2840      	cmp	r0, #64	; 0x40
    212c:	d00f      	beq.n	214e <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    212e:	4b0d      	ldr	r3, [pc, #52]	; (2164 <grid_module_common_init+0x58>)
    2130:	4798      	blx	r3
    2132:	28c0      	cmp	r0, #192	; 0xc0
    2134:	d00f      	beq.n	2156 <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    2136:	480c      	ldr	r0, [pc, #48]	; (2168 <grid_module_common_init+0x5c>)
    2138:	4b0c      	ldr	r3, [pc, #48]	; (216c <grid_module_common_init+0x60>)
    213a:	4798      	blx	r3
    213c:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    213e:	480c      	ldr	r0, [pc, #48]	; (2170 <grid_module_common_init+0x64>)
    2140:	4b0c      	ldr	r3, [pc, #48]	; (2174 <grid_module_common_init+0x68>)
    2142:	4798      	blx	r3
    2144:	e7eb      	b.n	211e <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    2146:	480a      	ldr	r0, [pc, #40]	; (2170 <grid_module_common_init+0x64>)
    2148:	4b0b      	ldr	r3, [pc, #44]	; (2178 <grid_module_common_init+0x6c>)
    214a:	4798      	blx	r3
    214c:	e7eb      	b.n	2126 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    214e:	4808      	ldr	r0, [pc, #32]	; (2170 <grid_module_common_init+0x64>)
    2150:	4b0a      	ldr	r3, [pc, #40]	; (217c <grid_module_common_init+0x70>)
    2152:	4798      	blx	r3
    2154:	e7eb      	b.n	212e <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    2156:	4806      	ldr	r0, [pc, #24]	; (2170 <grid_module_common_init+0x64>)
    2158:	4b09      	ldr	r3, [pc, #36]	; (2180 <grid_module_common_init+0x74>)
    215a:	4798      	blx	r3
    215c:	e7eb      	b.n	2136 <grid_module_common_init+0x2a>
    215e:	bf00      	nop
    2160:	41008000 	.word	0x41008000
    2164:	00003979 	.word	0x00003979
    2168:	20001ca4 	.word	0x20001ca4
    216c:	00003801 	.word	0x00003801
    2170:	20001c98 	.word	0x20001c98
    2174:	00003429 	.word	0x00003429
    2178:	00002451 	.word	0x00002451
    217c:	00003029 	.word	0x00003029
    2180:	00002a95 	.word	0x00002a95

00002184 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    2184:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2186:	4803      	ldr	r0, [pc, #12]	; (2194 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2188:	4c03      	ldr	r4, [pc, #12]	; (2198 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    218a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    218c:	4803      	ldr	r0, [pc, #12]	; (219c <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    218e:	47a0      	blx	r4
    2190:	bd10      	pop	{r4, pc}
    2192:	bf00      	nop
    2194:	20000ff4 	.word	0x20000ff4
    2198:	0000432d 	.word	0x0000432d
    219c:	200011c8 	.word	0x200011c8

000021a0 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    21a0:	4b8d      	ldr	r3, [pc, #564]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	b92b      	cbnz	r3, 21b2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_bu16_revb_hardware_transfer_complete++;
    21a6:	4a8c      	ldr	r2, [pc, #560]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    21a8:	7813      	ldrb	r3, [r2, #0]
    21aa:	3301      	adds	r3, #1
    21ac:	b2db      	uxtb	r3, r3
    21ae:	7013      	strb	r3, [r2, #0]
    21b0:	4770      	bx	lr
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    21b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21b6:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    21b8:	4668      	mov	r0, sp
    21ba:	4b88      	ldr	r3, [pc, #544]	; (23dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23c>)
    21bc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21be:	4b88      	ldr	r3, [pc, #544]	; (23e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    21c0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21c4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21c8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    21cc:	4054      	eors	r4, r2
    21ce:	400c      	ands	r4, r1
    21d0:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    21d2:	4668      	mov	r0, sp
    21d4:	4b83      	ldr	r3, [pc, #524]	; (23e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    21d6:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    21d8:	4b83      	ldr	r3, [pc, #524]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    21da:	685b      	ldr	r3, [r3, #4]
    21dc:	68db      	ldr	r3, [r3, #12]
    21de:	781a      	ldrb	r2, [r3, #0]
    21e0:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    21e4:	4294      	cmp	r4, r2
    21e6:	d004      	beq.n	21f2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x52>
		
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    21e8:	2a00      	cmp	r2, #0
    21ea:	f000 80d9 	beq.w	23a0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);			
			grid_ui_report_set_changed_flag(mod, report_index);
		}
		else{
			
			mod->report_array[report_index].helper[0] = 0;
    21ee:	2200      	movs	r2, #0
    21f0:	701a      	strb	r2, [r3, #0]


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    21f8:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    21fc:	4b76      	ldr	r3, [pc, #472]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    21fe:	785a      	ldrb	r2, [r3, #1]
    2200:	3208      	adds	r2, #8
    2202:	487a      	ldr	r0, [pc, #488]	; (23ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    2204:	5c85      	ldrb	r5, [r0, r2]
    2206:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    2208:	785a      	ldrb	r2, [r3, #1]
    220a:	b2d2      	uxtb	r2, r2
    220c:	5c84      	ldrb	r4, [r0, r2]
    220e:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2210:	785a      	ldrb	r2, [r3, #1]
    2212:	3201      	adds	r2, #1
    2214:	b2d2      	uxtb	r2, r2
    2216:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2218:	785a      	ldrb	r2, [r3, #1]
    221a:	f002 0207 	and.w	r2, r2, #7
    221e:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2220:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    2222:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2226:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    222a:	4b6d      	ldr	r3, [pc, #436]	; (23e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    222c:	bf14      	ite	ne
    222e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2232:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    2236:	4b68      	ldr	r3, [pc, #416]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2238:	785b      	ldrb	r3, [r3, #1]
    223a:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    223e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2242:	4b67      	ldr	r3, [pc, #412]	; (23e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    2244:	bf14      	ite	ne
    2246:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    224a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    224e:	4b62      	ldr	r3, [pc, #392]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2250:	785b      	ldrb	r3, [r3, #1]
    2252:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2256:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    225a:	4b61      	ldr	r3, [pc, #388]	; (23e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    225c:	bf14      	ite	ne
    225e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2262:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2266:	2302      	movs	r3, #2
    2268:	f10d 0206 	add.w	r2, sp, #6
    226c:	2100      	movs	r1, #0
    226e:	4860      	ldr	r0, [pc, #384]	; (23f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    2270:	4e60      	ldr	r6, [pc, #384]	; (23f4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    2272:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2274:	2302      	movs	r3, #2
    2276:	aa01      	add	r2, sp, #4
    2278:	2100      	movs	r1, #0
    227a:	485f      	ldr	r0, [pc, #380]	; (23f8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x258>)
    227c:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    227e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2282:	f242 7310 	movw	r3, #10000	; 0x2710
    2286:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    2288:	bf8c      	ite	hi
    228a:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    228c:	237f      	movls	r3, #127	; 0x7f
    228e:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    2292:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2296:	f242 7310 	movw	r3, #10000	; 0x2710
    229a:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    229c:	bf8c      	ite	hi
    229e:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    22a0:	237f      	movls	r3, #127	; 0x7f
    22a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    22a6:	1c6e      	adds	r6, r5, #1
    22a8:	0136      	lsls	r6, r6, #4
    22aa:	4b4f      	ldr	r3, [pc, #316]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    22ac:	685b      	ldr	r3, [r3, #4]
    22ae:	4433      	add	r3, r6
    22b0:	68da      	ldr	r2, [r3, #12]
    22b2:	7812      	ldrb	r2, [r2, #0]
    22b4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    22b8:	4291      	cmp	r1, r2
    22ba:	d02f      	beq.n	231c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x17c>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    22bc:	2a00      	cmp	r2, #0
    22be:	bf0c      	ite	eq
    22c0:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    22c4:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    22c8:	6858      	ldr	r0, [r3, #4]
    22ca:	bf0c      	ite	eq
    22cc:	2290      	moveq	r2, #144	; 0x90
    22ce:	2280      	movne	r2, #128	; 0x80
    22d0:	2102      	movs	r1, #2
    22d2:	3005      	adds	r0, #5
    22d4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 2400 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>
    22d8:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    22da:	4f43      	ldr	r7, [pc, #268]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	4433      	add	r3, r6
    22e0:	6858      	ldr	r0, [r3, #4]
    22e2:	462a      	mov	r2, r5
    22e4:	2102      	movs	r1, #2
    22e6:	3007      	adds	r0, #7
    22e8:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	4433      	add	r3, r6
    22ee:	6858      	ldr	r0, [r3, #4]
    22f0:	464a      	mov	r2, r9
    22f2:	2102      	movs	r1, #2
    22f4:	3009      	adds	r0, #9
    22f6:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	4433      	add	r3, r6
    22fc:	6858      	ldr	r0, [r3, #4]
    22fe:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2302:	2102      	movs	r1, #2
    2304:	3015      	adds	r0, #21
    2306:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	441e      	add	r6, r3
    230c:	68f3      	ldr	r3, [r6, #12]
    230e:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2312:	1c69      	adds	r1, r5, #1
    2314:	b2c9      	uxtb	r1, r1
    2316:	4638      	mov	r0, r7
    2318:	4b38      	ldr	r3, [pc, #224]	; (23fc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    231a:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    231c:	1c65      	adds	r5, r4, #1
    231e:	012d      	lsls	r5, r5, #4
    2320:	4b31      	ldr	r3, [pc, #196]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    2322:	685b      	ldr	r3, [r3, #4]
    2324:	442b      	add	r3, r5
    2326:	68da      	ldr	r2, [r3, #12]
    2328:	7812      	ldrb	r2, [r2, #0]
    232a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    232e:	4291      	cmp	r1, r2
    2330:	d02e      	beq.n	2390 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f0>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2332:	2a00      	cmp	r2, #0
    2334:	bf0c      	ite	eq
    2336:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    233a:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    233e:	6858      	ldr	r0, [r3, #4]
    2340:	bf0c      	ite	eq
    2342:	2290      	moveq	r2, #144	; 0x90
    2344:	2280      	movne	r2, #128	; 0x80
    2346:	2102      	movs	r1, #2
    2348:	3005      	adds	r0, #5
    234a:	4f2d      	ldr	r7, [pc, #180]	; (2400 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>)
    234c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    234e:	4e26      	ldr	r6, [pc, #152]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    2350:	6873      	ldr	r3, [r6, #4]
    2352:	442b      	add	r3, r5
    2354:	6858      	ldr	r0, [r3, #4]
    2356:	4622      	mov	r2, r4
    2358:	2102      	movs	r1, #2
    235a:	3007      	adds	r0, #7
    235c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    235e:	6873      	ldr	r3, [r6, #4]
    2360:	442b      	add	r3, r5
    2362:	6858      	ldr	r0, [r3, #4]
    2364:	4642      	mov	r2, r8
    2366:	2102      	movs	r1, #2
    2368:	3009      	adds	r0, #9
    236a:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    236c:	6873      	ldr	r3, [r6, #4]
    236e:	442b      	add	r3, r5
    2370:	6858      	ldr	r0, [r3, #4]
    2372:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2376:	2102      	movs	r1, #2
    2378:	3015      	adds	r0, #21
    237a:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    237c:	6873      	ldr	r3, [r6, #4]
    237e:	441d      	add	r5, r3
    2380:	68eb      	ldr	r3, [r5, #12]
    2382:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2386:	1c61      	adds	r1, r4, #1
    2388:	b2c9      	uxtb	r1, r1
    238a:	4630      	mov	r0, r6
    238c:	4b1b      	ldr	r3, [pc, #108]	; (23fc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    238e:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2390:	2200      	movs	r2, #0
    2392:	4b11      	ldr	r3, [pc, #68]	; (23d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2394:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2396:	4b1b      	ldr	r3, [pc, #108]	; (2404 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x264>)
    2398:	4798      	blx	r3
}
    239a:	b003      	add	sp, #12
    239c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 1;
    23a0:	2201      	movs	r2, #1
    23a2:	701a      	strb	r2, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    23a4:	4a18      	ldr	r2, [pc, #96]	; (2408 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x268>)
    23a6:	7a53      	ldrb	r3, [r2, #9]
    23a8:	3301      	adds	r3, #1
    23aa:	4259      	negs	r1, r3
    23ac:	f003 0303 	and.w	r3, r3, #3
    23b0:	f001 0103 	and.w	r1, r1, #3
    23b4:	bf58      	it	pl
    23b6:	424b      	negpl	r3, r1
    23b8:	b2db      	uxtb	r3, r3
    23ba:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    23bc:	7a53      	ldrb	r3, [r2, #9]
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);			
    23be:	7a52      	ldrb	r2, [r2, #9]
    23c0:	4c09      	ldr	r4, [pc, #36]	; (23e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    23c2:	6863      	ldr	r3, [r4, #4]
    23c4:	6858      	ldr	r0, [r3, #4]
    23c6:	2102      	movs	r1, #2
    23c8:	3007      	adds	r0, #7
    23ca:	4b0d      	ldr	r3, [pc, #52]	; (2400 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>)
    23cc:	4798      	blx	r3
			grid_ui_report_set_changed_flag(mod, report_index);
    23ce:	2100      	movs	r1, #0
    23d0:	4620      	mov	r0, r4
    23d2:	4b0a      	ldr	r3, [pc, #40]	; (23fc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    23d4:	4798      	blx	r3
    23d6:	e70c      	b.n	21f2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x52>
    23d8:	20000654 	.word	0x20000654
    23dc:	00004355 	.word	0x00004355
    23e0:	41008000 	.word	0x41008000
    23e4:	00004363 	.word	0x00004363
    23e8:	20001c98 	.word	0x20001c98
    23ec:	20000300 	.word	0x20000300
    23f0:	20000ff4 	.word	0x20000ff4
    23f4:	0000424d 	.word	0x0000424d
    23f8:	200011c8 	.word	0x200011c8
    23fc:	00003e17 	.word	0x00003e17
    2400:	00003941 	.word	0x00003941
    2404:	00002185 	.word	0x00002185
    2408:	20001ca4 	.word	0x20001ca4

0000240c <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    240e:	4f0b      	ldr	r7, [pc, #44]	; (243c <grid_module_bu16_revb_hardware_init+0x30>)
    2410:	4c0b      	ldr	r4, [pc, #44]	; (2440 <grid_module_bu16_revb_hardware_init+0x34>)
    2412:	463b      	mov	r3, r7
    2414:	2200      	movs	r2, #0
    2416:	4611      	mov	r1, r2
    2418:	4620      	mov	r0, r4
    241a:	4e0a      	ldr	r6, [pc, #40]	; (2444 <grid_module_bu16_revb_hardware_init+0x38>)
    241c:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    241e:	4d0a      	ldr	r5, [pc, #40]	; (2448 <grid_module_bu16_revb_hardware_init+0x3c>)
    2420:	463b      	mov	r3, r7
    2422:	2200      	movs	r2, #0
    2424:	4611      	mov	r1, r2
    2426:	4628      	mov	r0, r5
    2428:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    242a:	2100      	movs	r1, #0
    242c:	4620      	mov	r0, r4
    242e:	4c07      	ldr	r4, [pc, #28]	; (244c <grid_module_bu16_revb_hardware_init+0x40>)
    2430:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    2432:	2100      	movs	r1, #0
    2434:	4628      	mov	r0, r5
    2436:	47a0      	blx	r4
    2438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    243a:	bf00      	nop
    243c:	000021a1 	.word	0x000021a1
    2440:	20000ff4 	.word	0x20000ff4
    2444:	000041cd 	.word	0x000041cd
    2448:	200011c8 	.word	0x200011c8
    244c:	0000418d 	.word	0x0000418d

00002450 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2454:	b09d      	sub	sp, #116	; 0x74
    2456:	4604      	mov	r4, r0
    2458:	900d      	str	r0, [sp, #52]	; 0x34

	grid_led_init(&grid_led_state, 16);
    245a:	2110      	movs	r1, #16
    245c:	483f      	ldr	r0, [pc, #252]	; (255c <grid_module_bu16_revb_init+0x10c>)
    245e:	4b40      	ldr	r3, [pc, #256]	; (2560 <grid_module_bu16_revb_init+0x110>)
    2460:	4798      	blx	r3
	grid_ui_model_init(mod, 17);
    2462:	2111      	movs	r1, #17
    2464:	4620      	mov	r0, r4
    2466:	4b3f      	ldr	r3, [pc, #252]	; (2564 <grid_module_bu16_revb_init+0x114>)
    2468:	4798      	blx	r3

 	
	if (mod->report_array == NULL)	{
    246a:	6863      	ldr	r3, [r4, #4]
    246c:	2b00      	cmp	r3, #0
    246e:	d072      	beq.n	2556 <grid_module_bu16_revb_init+0x106>
    2470:	f04f 37ff 	mov.w	r7, #4294967295
    2474:	2501      	movs	r5, #1
    2476:	2600      	movs	r6, #0

			);
			
		}
		else{
			uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2478:	f8df a104 	ldr.w	sl, [pc, #260]	; 2580 <grid_module_bu16_revb_init+0x130>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    247c:	f8df b104 	ldr.w	fp, [pc, #260]	; 2584 <grid_module_bu16_revb_init+0x134>
    2480:	e02d      	b.n	24de <grid_module_bu16_revb_init+0x8e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2482:	2303      	movs	r3, #3
    2484:	9303      	str	r3, [sp, #12]
    2486:	2400      	movs	r4, #0
    2488:	9402      	str	r4, [sp, #8]
    248a:	2365      	movs	r3, #101	; 0x65
    248c:	9301      	str	r3, [sp, #4]
    248e:	2364      	movs	r3, #100	; 0x64
    2490:	9300      	str	r3, [sp, #0]
    2492:	2304      	movs	r3, #4
    2494:	2202      	movs	r2, #2
    2496:	4934      	ldr	r1, [pc, #208]	; (2568 <grid_module_bu16_revb_init+0x118>)
    2498:	a814      	add	r0, sp, #80	; 0x50
    249a:	47d8      	blx	fp

			);
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    249c:	a814      	add	r0, sp, #80	; 0x50
    249e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2588 <grid_module_bu16_revb_init+0x138>
    24a2:	47c8      	blx	r9
    24a4:	900c      	str	r0, [sp, #48]	; 0x30

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    24a6:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    24aa:	4b30      	ldr	r3, [pc, #192]	; (256c <grid_module_bu16_revb_init+0x11c>)
    24ac:	681b      	ldr	r3, [r3, #0]
    24ae:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    24b2:	0c1b      	lsrs	r3, r3, #16
    24b4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		
		uint8_t helper_length = strlen(helper_template);
    24b8:	4640      	mov	r0, r8
    24ba:	47c8      	blx	r9
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    24bc:	b2c0      	uxtb	r0, r0
    24be:	9001      	str	r0, [sp, #4]
    24c0:	f8cd 8000 	str.w	r8, [sp]
    24c4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    24c8:	aa14      	add	r2, sp, #80	; 0x50
    24ca:	4621      	mov	r1, r4
    24cc:	980d      	ldr	r0, [sp, #52]	; 0x34
    24ce:	4c28      	ldr	r4, [pc, #160]	; (2570 <grid_module_bu16_revb_init+0x120>)
    24d0:	47a0      	blx	r4
		
		if (error != 0){
    24d2:	2800      	cmp	r0, #0
    24d4:	d13f      	bne.n	2556 <grid_module_bu16_revb_init+0x106>
    24d6:	3601      	adds	r6, #1
    24d8:	3501      	adds	r5, #1
    24da:	b2ed      	uxtb	r5, r5
    24dc:	3701      	adds	r7, #1
		if (i == 0){
    24de:	f016 09ff 	ands.w	r9, r6, #255	; 0xff
    24e2:	d0ce      	beq.n	2482 <grid_module_bu16_revb_init+0x32>
			uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    24e4:	ac0f      	add	r4, sp, #60	; 0x3c
    24e6:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
    24ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    24ee:	2103      	movs	r1, #3
    24f0:	910b      	str	r1, [sp, #44]	; 0x2c
    24f2:	2300      	movs	r3, #0
    24f4:	930a      	str	r3, [sp, #40]	; 0x28
    24f6:	5d3a      	ldrb	r2, [r7, r4]
    24f8:	9209      	str	r2, [sp, #36]	; 0x24
    24fa:	2263      	movs	r2, #99	; 0x63
    24fc:	9208      	str	r2, [sp, #32]
    24fe:	9307      	str	r3, [sp, #28]
    2500:	9106      	str	r1, [sp, #24]
    2502:	2202      	movs	r2, #2
    2504:	9205      	str	r2, [sp, #20]
    2506:	9104      	str	r1, [sp, #16]
    2508:	9303      	str	r3, [sp, #12]
    250a:	9702      	str	r7, [sp, #8]
    250c:	2190      	movs	r1, #144	; 0x90
    250e:	9101      	str	r1, [sp, #4]
    2510:	9300      	str	r3, [sp, #0]
    2512:	4918      	ldr	r1, [pc, #96]	; (2574 <grid_module_bu16_revb_init+0x124>)
    2514:	a814      	add	r0, sp, #80	; 0x50
    2516:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    2518:	a814      	add	r0, sp, #80	; 0x50
    251a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2588 <grid_module_bu16_revb_init+0x138>
    251e:	47c0      	blx	r8
    2520:	900c      	str	r0, [sp, #48]	; 0x30
		sprintf(helper_template, "00"); // LASTVALUE
    2522:	4b12      	ldr	r3, [pc, #72]	; (256c <grid_module_bu16_revb_init+0x11c>)
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    252a:	0c1b      	lsrs	r3, r3, #16
    252c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    2530:	4620      	mov	r0, r4
    2532:	47c0      	blx	r8
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2534:	b2c0      	uxtb	r0, r0
    2536:	9001      	str	r0, [sp, #4]
    2538:	9400      	str	r4, [sp, #0]
    253a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    253e:	aa14      	add	r2, sp, #80	; 0x50
    2540:	4649      	mov	r1, r9
    2542:	980d      	ldr	r0, [sp, #52]	; 0x34
    2544:	4c0a      	ldr	r4, [pc, #40]	; (2570 <grid_module_bu16_revb_init+0x120>)
    2546:	47a0      	blx	r4
		if (error != 0){
    2548:	b928      	cbnz	r0, 2556 <grid_module_bu16_revb_init+0x106>
	for(uint8_t i=0; i<17; i++){
    254a:	2d10      	cmp	r5, #16
    254c:	d9c3      	bls.n	24d6 <grid_module_bu16_revb_init+0x86>
			
		}

	}
			
	grid_module_bu16_revb_hardware_init();
    254e:	4b0a      	ldr	r3, [pc, #40]	; (2578 <grid_module_bu16_revb_init+0x128>)
    2550:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2552:	4b0a      	ldr	r3, [pc, #40]	; (257c <grid_module_bu16_revb_init+0x12c>)
    2554:	4798      	blx	r3

};
    2556:	b01d      	add	sp, #116	; 0x74
    2558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    255c:	200035b0 	.word	0x200035b0
    2560:	00002011 	.word	0x00002011
    2564:	00003d3d 	.word	0x00003d3d
    2568:	0000bf5c 	.word	0x0000bf5c
    256c:	0000bf74 	.word	0x0000bf74
    2570:	00003d55 	.word	0x00003d55
    2574:	0000bf78 	.word	0x0000bf78
    2578:	0000240d 	.word	0x0000240d
    257c:	00002185 	.word	0x00002185
    2580:	0000bf4c 	.word	0x0000bf4c
    2584:	0000b729 	.word	0x0000b729
    2588:	0000b771 	.word	0x0000b771

0000258c <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    258c:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    258e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2592:	4b06      	ldr	r3, [pc, #24]	; (25ac <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2594:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    2596:	4c06      	ldr	r4, [pc, #24]	; (25b0 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    2598:	4620      	mov	r0, r4
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    259c:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    259e:	2308      	movs	r3, #8
    25a0:	4a05      	ldr	r2, [pc, #20]	; (25b8 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    25a2:	4906      	ldr	r1, [pc, #24]	; (25bc <grid_module_en16_reva_hardware_start_transfer+0x30>)
    25a4:	4620      	mov	r0, r4
    25a6:	4c06      	ldr	r4, [pc, #24]	; (25c0 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    25a8:	47a0      	blx	r4
    25aa:	bd10      	pop	{r4, pc}
    25ac:	41008000 	.word	0x41008000
    25b0:	20000ea4 	.word	0x20000ea4
    25b4:	000048e1 	.word	0x000048e1
    25b8:	20001778 	.word	0x20001778
    25bc:	20000310 	.word	0x20000310
    25c0:	00004981 	.word	0x00004981
    25c4:	00000000 	.word	0x00000000

000025c8 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    25c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25cc:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25d2:	4bad      	ldr	r3, [pc, #692]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    25d4:	615a      	str	r2, [r3, #20]
    25d6:	4ead      	ldr	r6, [pc, #692]	; (288c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    25d8:	f04f 0800 	mov.w	r8, #0
    25dc:	e087      	b.n	26ee <grid_module_en16_reva_hardware_transfer_complete_cb+0x126>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi >= 0){
    25de:	7838      	ldrb	r0, [r7, #0]
    25e0:	49ab      	ldr	r1, [pc, #684]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    25e2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    25e6:	78c9      	ldrb	r1, [r1, #3]
    25e8:	42d1      	cmn	r1, r2
    25ea:	d405      	bmi.n	25f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x30>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    25ec:	4aa8      	ldr	r2, [pc, #672]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    25ee:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    25f2:	440b      	add	r3, r1
    25f4:	70c3      	strb	r3, [r0, #3]
    25f6:	e00a      	b.n	260e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 0;
    25f8:	4ba5      	ldr	r3, [pc, #660]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    25fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    25fe:	2300      	movs	r3, #0
    2600:	70c3      	strb	r3, [r0, #3]
    2602:	e004      	b.n	260e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
				else if (delta>0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 127;
    2604:	4ba2      	ldr	r3, [pc, #648]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2606:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    260a:	237f      	movs	r3, #127	; 0x7f
    260c:	70c3      	strb	r3, [r0, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_ui_report_get_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16)){
    260e:	7839      	ldrb	r1, [r7, #0]
    2610:	3111      	adds	r1, #17
    2612:	b2c9      	uxtb	r1, r1
    2614:	489f      	ldr	r0, [pc, #636]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2616:	4ba0      	ldr	r3, [pc, #640]	; (2898 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2618:	4798      	blx	r3
    261a:	2800      	cmp	r0, #0
    261c:	f040 8124 	bne.w	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
					value = 64; //CENTER
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = 0;
    2620:	783a      	ldrb	r2, [r7, #0]
    2622:	4b9c      	ldr	r3, [pc, #624]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2624:	685b      	ldr	r3, [r3, #4]
    2626:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    262a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    262e:	2200      	movs	r2, #0
    2630:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    2632:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2634:	fb09 3404 	mla	r4, r9, r4, r3
    2638:	b2e4      	uxtb	r4, r4
				
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    263a:	783a      	ldrb	r2, [r7, #0]
				
				if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    263c:	f102 0111 	add.w	r1, r2, #17
    2640:	4b94      	ldr	r3, [pc, #592]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2642:	685b      	ldr	r3, [r3, #4]
    2644:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2648:	68d9      	ldr	r1, [r3, #12]
    264a:	7809      	ldrb	r1, [r1, #0]
    264c:	42a1      	cmp	r1, r4
    264e:	d047      	beq.n	26e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2650:	498f      	ldr	r1, [pc, #572]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2652:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    2656:	f892 9003 	ldrb.w	r9, [r2, #3]
    265a:	ea4f 0949 	mov.w	r9, r9, lsl #1
    265e:	fa5f f989 	uxtb.w	r9, r9
					
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    2662:	6858      	ldr	r0, [r3, #4]
    2664:	22b0      	movs	r2, #176	; 0xb0
    2666:	2102      	movs	r1, #2
    2668:	3005      	adds	r0, #5
    266a:	f8df a260 	ldr.w	sl, [pc, #608]	; 28cc <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    266e:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2670:	783a      	ldrb	r2, [r7, #0]
    2672:	4d88      	ldr	r5, [pc, #544]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2674:	686b      	ldr	r3, [r5, #4]
    2676:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    267a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    267e:	2102      	movs	r1, #2
    2680:	3007      	adds	r0, #7
    2682:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    2684:	783a      	ldrb	r2, [r7, #0]
    2686:	686b      	ldr	r3, [r5, #4]
    2688:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    268c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2690:	4622      	mov	r2, r4
    2692:	2102      	movs	r1, #2
    2694:	3009      	adds	r0, #9
    2696:	47d0      	blx	sl
					
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    2698:	783a      	ldrb	r2, [r7, #0]
    269a:	686b      	ldr	r3, [r5, #4]
    269c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    26a4:	701c      	strb	r4, [r3, #0]
					grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    26a6:	7839      	ldrb	r1, [r7, #0]
    26a8:	3111      	adds	r1, #17
    26aa:	b2c9      	uxtb	r1, r1
    26ac:	4628      	mov	r0, r5
    26ae:	4c7b      	ldr	r4, [pc, #492]	; (289c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    26b0:	47a0      	blx	r4
					
					
					
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, actuator); // LED
    26b2:	783a      	ldrb	r2, [r7, #0]
    26b4:	686b      	ldr	r3, [r5, #4]
    26b6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26ba:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
    26be:	464a      	mov	r2, r9
    26c0:	2102      	movs	r1, #2
    26c2:	3009      	adds	r0, #9
    26c4:	47d0      	blx	sl
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = actuator;
    26c6:	783a      	ldrb	r2, [r7, #0]
    26c8:	686b      	ldr	r3, [r5, #4]
    26ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    26d2:	f883 9000 	strb.w	r9, [r3]
					grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    26d6:	7839      	ldrb	r1, [r7, #0]
    26d8:	3121      	adds	r1, #33	; 0x21
    26da:	b2c9      	uxtb	r1, r1
    26dc:	4628      	mov	r0, r5
    26de:	47a0      	blx	r4
    26e0:	f108 0801 	add.w	r8, r8, #1
    26e4:	3601      	adds	r6, #1
	for (uint8_t i=0; i<16; i++){
    26e6:	f1b8 0f10 	cmp.w	r8, #16
    26ea:	f000 8133 	beq.w	2954 <grid_module_en16_reva_hardware_transfer_complete_cb+0x38c>
    26ee:	fa5f f188 	uxtb.w	r1, r8
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    26f2:	084b      	lsrs	r3, r1, #1
    26f4:	4a6a      	ldr	r2, [pc, #424]	; (28a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    26f6:	5cd3      	ldrb	r3, [r2, r3]
    26f8:	f001 0201 	and.w	r2, r1, #1
    26fc:	0092      	lsls	r2, r2, #2
    26fe:	4113      	asrs	r3, r2
    2700:	b2db      	uxtb	r3, r3
    2702:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    2706:	4a67      	ldr	r2, [pc, #412]	; (28a4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    2708:	f812 2008 	ldrb.w	r2, [r2, r8]
    270c:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    270e:	4290      	cmp	r0, r2
    2710:	d0e6      	beq.n	26e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
			UI_SPI_DEBUG = i;
    2712:	4a65      	ldr	r2, [pc, #404]	; (28a8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2714:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    2716:	0881      	lsrs	r1, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    2718:	f3c0 0540 	ubfx	r5, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    271c:	f003 0401 	and.w	r4, r3, #1
    2720:	4637      	mov	r7, r6
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2722:	7833      	ldrb	r3, [r6, #0]
    2724:	4a5a      	ldr	r2, [pc, #360]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2726:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    272a:	7852      	ldrb	r2, [r2, #1]
    272c:	428a      	cmp	r2, r1
    272e:	d03e      	beq.n	27ae <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e6>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    2730:	4a57      	ldr	r2, [pc, #348]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2732:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2736:	2001      	movs	r0, #1
    2738:	7090      	strb	r0, [r2, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    273a:	7051      	strb	r1, [r2, #1]
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    273c:	4403      	add	r3, r0
    273e:	4a55      	ldr	r2, [pc, #340]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2740:	6852      	ldr	r2, [r2, #4]
    2742:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2746:	68da      	ldr	r2, [r3, #12]
    2748:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    274a:	2a00      	cmp	r2, #0
    274c:	bf0c      	ite	eq
    274e:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2752:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[5], 2, command);
    2756:	6858      	ldr	r0, [r3, #4]
    2758:	bf0c      	ite	eq
    275a:	2290      	moveq	r2, #144	; 0x90
    275c:	2280      	movne	r2, #128	; 0x80
    275e:	2102      	movs	r1, #2
    2760:	3005      	adds	r0, #5
    2762:	f8df b168 	ldr.w	fp, [pc, #360]	; 28cc <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2766:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2768:	7832      	ldrb	r2, [r6, #0]
    276a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>
    276e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2772:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2776:	6958      	ldr	r0, [r3, #20]
    2778:	2102      	movs	r1, #2
    277a:	3007      	adds	r0, #7
    277c:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[9], 2, velocity);
    277e:	7832      	ldrb	r2, [r6, #0]
    2780:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2784:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2788:	6958      	ldr	r0, [r3, #20]
    278a:	4652      	mov	r2, sl
    278c:	2102      	movs	r1, #2
    278e:	3009      	adds	r0, #9
    2790:	47d8      	blx	fp
				mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] = velocity;
    2792:	7832      	ldrb	r2, [r6, #0]
    2794:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2798:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    279c:	69db      	ldr	r3, [r3, #28]
    279e:	f883 a000 	strb.w	sl, [r3]
				grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1);
    27a2:	7831      	ldrb	r1, [r6, #0]
    27a4:	3101      	adds	r1, #1
    27a6:	b2c9      	uxtb	r1, r1
    27a8:	4648      	mov	r0, r9
    27aa:	4b3c      	ldr	r3, [pc, #240]	; (289c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    27ac:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous;
    27ae:	783a      	ldrb	r2, [r7, #0]
    27b0:	4b37      	ldr	r3, [pc, #220]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27b2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (a_now != a_prev){
    27b6:	7b5b      	ldrb	r3, [r3, #13]
    27b8:	42ab      	cmp	r3, r5
    27ba:	f000 80fe 	beq.w	29ba <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f2>
					delta = +1;
    27be:	42a5      	cmp	r5, r4
    27c0:	bf14      	ite	ne
    27c2:	f04f 39ff 	movne.w	r9, #4294967295
    27c6:	f04f 0901 	moveq.w	r9, #1
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = a_now;
    27ca:	4b31      	ldr	r3, [pc, #196]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27cc:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    27d0:	734d      	strb	r5, [r1, #13]
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    27d2:	738c      	strb	r4, [r1, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]+1].last_real_time);
    27d4:	6989      	ldr	r1, [r1, #24]
    27d6:	4835      	ldr	r0, [pc, #212]	; (28ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    27d8:	4b35      	ldr	r3, [pc, #212]	; (28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    27da:	4798      	blx	r3
    27dc:	9000      	str	r0, [sp, #0]
				if (elapsed_time>400){
    27de:	9b00      	ldr	r3, [sp, #0]
    27e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    27e4:	bf84      	itt	hi
    27e6:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    27ea:	9300      	strhi	r3, [sp, #0]
				if (elapsed_time<20){
    27ec:	9b00      	ldr	r3, [sp, #0]
    27ee:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    27f0:	bf9c      	itt	ls
    27f2:	2314      	movls	r3, #20
    27f4:	9300      	strls	r3, [sp, #0]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    27f6:	9b00      	ldr	r3, [sp, #0]
    27f8:	9800      	ldr	r0, [sp, #0]
    27fa:	fb00 f003 	mul.w	r0, r0, r3
    27fe:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2802:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2806:	4b2b      	ldr	r3, [pc, #172]	; (28b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    2808:	4798      	blx	r3
    280a:	a31d      	add	r3, pc, #116	; (adr r3, 2880 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    280c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2810:	4c29      	ldr	r4, [pc, #164]	; (28b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2812:	47a0      	blx	r4
    2814:	2200      	movs	r2, #0
    2816:	4b29      	ldr	r3, [pc, #164]	; (28bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    2818:	4c29      	ldr	r4, [pc, #164]	; (28c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    281a:	47a0      	blx	r4
    281c:	4b29      	ldr	r3, [pc, #164]	; (28c4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    281e:	4798      	blx	r3
    2820:	b2c4      	uxtb	r4, r0
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2822:	783d      	ldrb	r5, [r7, #0]
    2824:	4821      	ldr	r0, [pc, #132]	; (28ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2826:	4b28      	ldr	r3, [pc, #160]	; (28c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    2828:	4798      	blx	r3
    282a:	4b19      	ldr	r3, [pc, #100]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    282c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2830:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2832:	fb04 9309 	mla	r3, r4, r9, r9
    2836:	b29b      	uxth	r3, r3
    2838:	b21a      	sxth	r2, r3
				if (delta<0){
    283a:	f1b9 0f00 	cmp.w	r9, #0
    283e:	f6ff aece 	blt.w	25de <grid_module_en16_reva_hardware_transfer_complete_cb+0x16>
				else if (delta>0){
    2842:	f1b9 0f00 	cmp.w	r9, #0
    2846:	f77f aee2 	ble.w	260e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
    284a:	7838      	ldrb	r0, [r7, #0]
    284c:	4910      	ldr	r1, [pc, #64]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    284e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2852:	78c9      	ldrb	r1, [r1, #3]
    2854:	440a      	add	r2, r1
    2856:	2a7f      	cmp	r2, #127	; 0x7f
    2858:	f73f aed4 	bgt.w	2604 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    285c:	4a0c      	ldr	r2, [pc, #48]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    285e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    2862:	440b      	add	r3, r1
    2864:	70c3      	strb	r3, [r0, #3]
    2866:	e6d2      	b.n	260e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					value = mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0];
    2868:	783a      	ldrb	r2, [r7, #0]
    286a:	4b0a      	ldr	r3, [pc, #40]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    286c:	685b      	ldr	r3, [r3, #4]
    286e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2872:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    2876:	781b      	ldrb	r3, [r3, #0]
    2878:	e6dc      	b.n	2634 <grid_module_en16_reva_hardware_transfer_complete_cb+0x6c>
    287a:	bf00      	nop
    287c:	f3af 8000 	nop.w
    2880:	00000000 	.word	0x00000000
    2884:	40e38800 	.word	0x40e38800
    2888:	41008000 	.word	0x41008000
    288c:	20000320 	.word	0x20000320
    2890:	200037e0 	.word	0x200037e0
    2894:	20001c98 	.word	0x20001c98
    2898:	00003e0f 	.word	0x00003e0f
    289c:	00003e17 	.word	0x00003e17
    28a0:	20001778 	.word	0x20001778
    28a4:	20001760 	.word	0x20001760
    28a8:	20001748 	.word	0x20001748
    28ac:	20001ca4 	.word	0x20001ca4
    28b0:	00003845 	.word	0x00003845
    28b4:	0000afe1 	.word	0x0000afe1
    28b8:	0000b321 	.word	0x0000b321
    28bc:	3ff00000 	.word	0x3ff00000
    28c0:	0000ad69 	.word	0x0000ad69
    28c4:	0000b4f1 	.word	0x0000b4f1
    28c8:	00003841 	.word	0x00003841
    28cc:	00003941 	.word	0x00003941
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value--;
    28d0:	3b01      	subs	r3, #1
    28d2:	b2db      	uxtb	r3, r3
    28d4:	494a      	ldr	r1, [pc, #296]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    28d6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    28da:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    28dc:	005b      	lsls	r3, r3, #1
    28de:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, v); // LED
    28e0:	4d48      	ldr	r5, [pc, #288]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x43c>)
    28e2:	686b      	ldr	r3, [r5, #4]
    28e4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    28e8:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
    28ec:	4622      	mov	r2, r4
    28ee:	2102      	movs	r1, #2
    28f0:	3009      	adds	r0, #9
    28f2:	4b45      	ldr	r3, [pc, #276]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x440>)
    28f4:	4798      	blx	r3
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = v;
    28f6:	783a      	ldrb	r2, [r7, #0]
    28f8:	686b      	ldr	r3, [r5, #4]
    28fa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    28fe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    2902:	701c      	strb	r4, [r3, #0]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    2904:	7839      	ldrb	r1, [r7, #0]
    2906:	3121      	adds	r1, #33	; 0x21
    2908:	b2c9      	uxtb	r1, r1
    290a:	4628      	mov	r0, r5
    290c:	4b3f      	ldr	r3, [pc, #252]	; (2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x444>)
    290e:	4798      	blx	r3
    2910:	e066      	b.n	29e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x418>

					}
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value++;
    2912:	3301      	adds	r3, #1
    2914:	b2db      	uxtb	r3, r3
    2916:	493a      	ldr	r1, [pc, #232]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    2918:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    291c:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    291e:	005b      	lsls	r3, r3, #1
    2920:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, v); // LED
    2922:	4d38      	ldr	r5, [pc, #224]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x43c>)
    2924:	686b      	ldr	r3, [r5, #4]
    2926:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    292a:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
    292e:	4622      	mov	r2, r4
    2930:	2102      	movs	r1, #2
    2932:	3009      	adds	r0, #9
    2934:	4b34      	ldr	r3, [pc, #208]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x440>)
    2936:	4798      	blx	r3
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = v;
    2938:	783a      	ldrb	r2, [r7, #0]
    293a:	686b      	ldr	r3, [r5, #4]
    293c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2940:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    2944:	701c      	strb	r4, [r3, #0]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    2946:	7839      	ldrb	r1, [r7, #0]
    2948:	3121      	adds	r1, #33	; 0x21
    294a:	b2c9      	uxtb	r1, r1
    294c:	4628      	mov	r0, r5
    294e:	4b2f      	ldr	r3, [pc, #188]	; (2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x444>)
    2950:	4798      	blx	r3
    2952:	e04c      	b.n	29ee <grid_module_en16_reva_hardware_transfer_complete_cb+0x426>
	CRITICAL_SECTION_ENTER();
    2954:	a801      	add	r0, sp, #4
    2956:	4b2e      	ldr	r3, [pc, #184]	; (2a10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x448>)
    2958:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    295a:	4b2e      	ldr	r3, [pc, #184]	; (2a14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x44c>)
    295c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2960:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2964:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2968:	4054      	eors	r4, r2
    296a:	400c      	ands	r4, r1
    296c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    296e:	a801      	add	r0, sp, #4
    2970:	4b29      	ldr	r3, [pc, #164]	; (2a18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x450>)
    2972:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2974:	4b23      	ldr	r3, [pc, #140]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x43c>)
    2976:	685b      	ldr	r3, [r3, #4]
    2978:	68da      	ldr	r2, [r3, #12]
    297a:	7813      	ldrb	r3, [r2, #0]
    297c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2980:	429c      	cmp	r4, r3
    2982:	d00e      	beq.n	29a2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3da>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2984:	b9ab      	cbnz	r3, 29b2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ea>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    2986:	2301      	movs	r3, #1
    2988:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    298a:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    298c:	4c1d      	ldr	r4, [pc, #116]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x43c>)
    298e:	6863      	ldr	r3, [r4, #4]
    2990:	6858      	ldr	r0, [r3, #4]
    2992:	2102      	movs	r1, #2
    2994:	3003      	adds	r0, #3
    2996:	4b1c      	ldr	r3, [pc, #112]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x440>)
    2998:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    299a:	2100      	movs	r1, #0
    299c:	4620      	mov	r0, r4
    299e:	4b1b      	ldr	r3, [pc, #108]	; (2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x444>)
    29a0:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()




	grid_module_en16_reva_hardware_transfer_complete = 0;
    29a2:	2200      	movs	r2, #0
    29a4:	4b1d      	ldr	r3, [pc, #116]	; (2a1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x454>)
    29a6:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    29a8:	4b1d      	ldr	r3, [pc, #116]	; (2a20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x458>)
    29aa:	4798      	blx	r3
}
    29ac:	b003      	add	sp, #12
    29ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    29b2:	2300      	movs	r3, #0
    29b4:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    29b6:	2280      	movs	r2, #128	; 0x80
    29b8:	e7e8      	b.n	298c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    29ba:	4b11      	ldr	r3, [pc, #68]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    29bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    29c0:	7394      	strb	r4, [r2, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
    29c2:	6891      	ldr	r1, [r2, #8]
    29c4:	4817      	ldr	r0, [pc, #92]	; (2a24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x45c>)
    29c6:	4b18      	ldr	r3, [pc, #96]	; (2a28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x460>)
    29c8:	4798      	blx	r3
    29ca:	28c8      	cmp	r0, #200	; 0xc8
    29cc:	f67f ae88 	bls.w	26e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){
    29d0:	783a      	ldrb	r2, [r7, #0]
    29d2:	4b0b      	ldr	r3, [pc, #44]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    29d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    29d8:	78db      	ldrb	r3, [r3, #3]
    29da:	2b40      	cmp	r3, #64	; 0x40
    29dc:	f63f af78 	bhi.w	28d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){
    29e0:	783a      	ldrb	r2, [r7, #0]
    29e2:	4b07      	ldr	r3, [pc, #28]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    29e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    29e8:	78db      	ldrb	r3, [r3, #3]
    29ea:	2b3f      	cmp	r3, #63	; 0x3f
    29ec:	d991      	bls.n	2912 <grid_module_en16_reva_hardware_transfer_complete_cb+0x34a>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    29ee:	783c      	ldrb	r4, [r7, #0]
    29f0:	480c      	ldr	r0, [pc, #48]	; (2a24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x45c>)
    29f2:	4b0e      	ldr	r3, [pc, #56]	; (2a2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x464>)
    29f4:	4798      	blx	r3
    29f6:	4b02      	ldr	r3, [pc, #8]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x438>)
    29f8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29fc:	6098      	str	r0, [r3, #8]
    29fe:	e66f      	b.n	26e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
    2a00:	200037e0 	.word	0x200037e0
    2a04:	20001c98 	.word	0x20001c98
    2a08:	00003941 	.word	0x00003941
    2a0c:	00003e17 	.word	0x00003e17
    2a10:	00004355 	.word	0x00004355
    2a14:	41008000 	.word	0x41008000
    2a18:	00004363 	.word	0x00004363
    2a1c:	200035dc 	.word	0x200035dc
    2a20:	0000258d 	.word	0x0000258d
    2a24:	20001ca4 	.word	0x20001ca4
    2a28:	00003845 	.word	0x00003845
    2a2c:	00003841 	.word	0x00003841

00002a30 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2a30:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2a32:	4b0e      	ldr	r3, [pc, #56]	; (2a6c <grid_module_en16_reva_hardware_init+0x3c>)
    2a34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a38:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a3a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a40:	629a      	str	r2, [r3, #40]	; 0x28
    2a42:	4a0b      	ldr	r2, [pc, #44]	; (2a70 <grid_module_en16_reva_hardware_init+0x40>)
    2a44:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2a46:	4c0b      	ldr	r4, [pc, #44]	; (2a74 <grid_module_en16_reva_hardware_init+0x44>)
    2a48:	2103      	movs	r1, #3
    2a4a:	4620      	mov	r0, r4
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <grid_module_en16_reva_hardware_init+0x48>)
    2a4e:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2a50:	490a      	ldr	r1, [pc, #40]	; (2a7c <grid_module_en16_reva_hardware_init+0x4c>)
    2a52:	4620      	mov	r0, r4
    2a54:	4b0a      	ldr	r3, [pc, #40]	; (2a80 <grid_module_en16_reva_hardware_init+0x50>)
    2a56:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2a58:	490a      	ldr	r1, [pc, #40]	; (2a84 <grid_module_en16_reva_hardware_init+0x54>)
    2a5a:	4620      	mov	r0, r4
    2a5c:	4b0a      	ldr	r3, [pc, #40]	; (2a88 <grid_module_en16_reva_hardware_init+0x58>)
    2a5e:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2a60:	4a0a      	ldr	r2, [pc, #40]	; (2a8c <grid_module_en16_reva_hardware_init+0x5c>)
    2a62:	2100      	movs	r1, #0
    2a64:	4620      	mov	r0, r4
    2a66:	4b0a      	ldr	r3, [pc, #40]	; (2a90 <grid_module_en16_reva_hardware_init+0x60>)
    2a68:	4798      	blx	r3
    2a6a:	bd10      	pop	{r4, pc}
    2a6c:	41008000 	.word	0x41008000
    2a70:	c0000020 	.word	0xc0000020
    2a74:	20000ea4 	.word	0x20000ea4
    2a78:	00004945 	.word	0x00004945
    2a7c:	00061a80 	.word	0x00061a80
    2a80:	00004909 	.word	0x00004909
    2a84:	2000175c 	.word	0x2000175c
    2a88:	00004a2d 	.word	0x00004a2d
    2a8c:	000025c9 	.word	0x000025c9
    2a90:	000049e9 	.word	0x000049e9

00002a94 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a98:	b097      	sub	sp, #92	; 0x5c
    2a9a:	4604      	mov	r4, r0
    2a9c:	9007      	str	r0, [sp, #28]
	
	mod->report_length = 1+16+16+16;
    2a9e:	2331      	movs	r3, #49	; 0x31
    2aa0:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    2aa2:	f44f 7044 	mov.w	r0, #784	; 0x310
    2aa6:	4b4a      	ldr	r3, [pc, #296]	; (2bd0 <grid_module_en16_reva_init+0x13c>)
    2aa8:	4798      	blx	r3
    2aaa:	6060      	str	r0, [r4, #4]
    2aac:	f04f 38ff 	mov.w	r8, #4294967295
    2ab0:	2401      	movs	r4, #1
    2ab2:	2500      	movs	r5, #0
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2ab4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2bf4 <grid_module_en16_reva_init+0x160>

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2ab8:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2bf8 <grid_module_en16_reva_init+0x164>
		
		uint8_t helper_length = strlen(helper_template);

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2abc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 2bfc <grid_module_en16_reva_init+0x168>
    2ac0:	e05d      	b.n	2b7e <grid_module_en16_reva_init+0xea>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    2ac2:	2303      	movs	r3, #3
    2ac4:	9303      	str	r3, [sp, #12]
    2ac6:	232b      	movs	r3, #43	; 0x2b
    2ac8:	9302      	str	r3, [sp, #8]
    2aca:	2383      	movs	r3, #131	; 0x83
    2acc:	9301      	str	r3, [sp, #4]
    2ace:	2380      	movs	r3, #128	; 0x80
    2ad0:	9300      	str	r3, [sp, #0]
    2ad2:	2301      	movs	r3, #1
    2ad4:	2202      	movs	r2, #2
    2ad6:	493f      	ldr	r1, [pc, #252]	; (2bd4 <grid_module_en16_reva_init+0x140>)
    2ad8:	a80e      	add	r0, sp, #56	; 0x38
    2ada:	4e3f      	ldr	r6, [pc, #252]	; (2bd8 <grid_module_en16_reva_init+0x144>)
    2adc:	47b0      	blx	r6
		uint32_t payload_length = strlen(payload_template);
    2ade:	a80e      	add	r0, sp, #56	; 0x38
    2ae0:	47c8      	blx	r9
    2ae2:	4607      	mov	r7, r0
		sprintf(helper_template, "00"); // LASTVALUE
    2ae4:	ae09      	add	r6, sp, #36	; 0x24
    2ae6:	f8db 3000 	ldr.w	r3, [fp]
    2aea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    2aee:	0c1b      	lsrs	r3, r3, #16
    2af0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		uint8_t helper_length = strlen(helper_template);
    2af4:	4630      	mov	r0, r6
    2af6:	47c8      	blx	r9
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2af8:	b2c0      	uxtb	r0, r0
    2afa:	9001      	str	r0, [sp, #4]
    2afc:	9600      	str	r6, [sp, #0]
    2afe:	463b      	mov	r3, r7
    2b00:	aa0e      	add	r2, sp, #56	; 0x38
    2b02:	2100      	movs	r1, #0
    2b04:	9807      	ldr	r0, [sp, #28]
    2b06:	47d0      	blx	sl
    2b08:	e034      	b.n	2b74 <grid_module_en16_reva_init+0xe0>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b0a:	2303      	movs	r3, #3
    2b0c:	9304      	str	r3, [sp, #16]
    2b0e:	2300      	movs	r3, #0
    2b10:	9303      	str	r3, [sp, #12]
    2b12:	f8cd 8008 	str.w	r8, [sp, #8]
    2b16:	2290      	movs	r2, #144	; 0x90
    2b18:	9201      	str	r2, [sp, #4]
    2b1a:	9300      	str	r3, [sp, #0]
    2b1c:	2202      	movs	r2, #2
    2b1e:	492f      	ldr	r1, [pc, #188]	; (2bdc <grid_module_en16_reva_init+0x148>)
    2b20:	a80e      	add	r0, sp, #56	; 0x38
    2b22:	4f2d      	ldr	r7, [pc, #180]	; (2bd8 <grid_module_en16_reva_init+0x144>)
    2b24:	47b8      	blx	r7
    2b26:	e00e      	b.n	2b46 <grid_module_en16_reva_init+0xb2>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b28:	2303      	movs	r3, #3
    2b2a:	9304      	str	r3, [sp, #16]
    2b2c:	2200      	movs	r2, #0
    2b2e:	9203      	str	r2, [sp, #12]
    2b30:	f1a5 0121 	sub.w	r1, r5, #33	; 0x21
    2b34:	9102      	str	r1, [sp, #8]
    2b36:	2163      	movs	r1, #99	; 0x63
    2b38:	9101      	str	r1, [sp, #4]
    2b3a:	9200      	str	r2, [sp, #0]
    2b3c:	2202      	movs	r2, #2
    2b3e:	4927      	ldr	r1, [pc, #156]	; (2bdc <grid_module_en16_reva_init+0x148>)
    2b40:	a80e      	add	r0, sp, #56	; 0x38
    2b42:	4f25      	ldr	r7, [pc, #148]	; (2bd8 <grid_module_en16_reva_init+0x144>)
    2b44:	47b8      	blx	r7
		uint32_t payload_length = strlen(payload_template);
    2b46:	a80e      	add	r0, sp, #56	; 0x38
    2b48:	47c8      	blx	r9
    2b4a:	9006      	str	r0, [sp, #24]
		sprintf(helper_template, "00"); // LASTVALUE
    2b4c:	af09      	add	r7, sp, #36	; 0x24
    2b4e:	f8db 3000 	ldr.w	r3, [fp]
    2b52:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    2b56:	0c1b      	lsrs	r3, r3, #16
    2b58:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		uint8_t helper_length = strlen(helper_template);
    2b5c:	4638      	mov	r0, r7
    2b5e:	47c8      	blx	r9
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2b60:	b2c0      	uxtb	r0, r0
    2b62:	9001      	str	r0, [sp, #4]
    2b64:	9700      	str	r7, [sp, #0]
    2b66:	9b06      	ldr	r3, [sp, #24]
    2b68:	aa0e      	add	r2, sp, #56	; 0x38
    2b6a:	4631      	mov	r1, r6
    2b6c:	9807      	ldr	r0, [sp, #28]
    2b6e:	47d0      	blx	sl
	for(uint8_t i=0; i<1+16+16+16; i++){
    2b70:	2c30      	cmp	r4, #48	; 0x30
    2b72:	d81a      	bhi.n	2baa <grid_module_en16_reva_init+0x116>
    2b74:	3501      	adds	r5, #1
    2b76:	3401      	adds	r4, #1
    2b78:	b2e4      	uxtb	r4, r4
    2b7a:	f108 0801 	add.w	r8, r8, #1
		if (i == 0){
    2b7e:	f015 06ff 	ands.w	r6, r5, #255	; 0xff
    2b82:	d09e      	beq.n	2ac2 <grid_module_en16_reva_init+0x2e>
		else if (i<1+16){ // ROTATION
    2b84:	2e10      	cmp	r6, #16
    2b86:	d9c0      	bls.n	2b0a <grid_module_en16_reva_init+0x76>
		else if (i<1+16+16){ // BUTTON
    2b88:	2e20      	cmp	r6, #32
    2b8a:	d8cd      	bhi.n	2b28 <grid_module_en16_reva_init+0x94>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b8c:	2303      	movs	r3, #3
    2b8e:	9304      	str	r3, [sp, #16]
    2b90:	2300      	movs	r3, #0
    2b92:	9303      	str	r3, [sp, #12]
    2b94:	f8cd 8008 	str.w	r8, [sp, #8]
    2b98:	2290      	movs	r2, #144	; 0x90
    2b9a:	9201      	str	r2, [sp, #4]
    2b9c:	9300      	str	r3, [sp, #0]
    2b9e:	2202      	movs	r2, #2
    2ba0:	490e      	ldr	r1, [pc, #56]	; (2bdc <grid_module_en16_reva_init+0x148>)
    2ba2:	a80e      	add	r0, sp, #56	; 0x38
    2ba4:	4f0c      	ldr	r7, [pc, #48]	; (2bd8 <grid_module_en16_reva_init+0x144>)
    2ba6:	47b8      	blx	r7
    2ba8:	e7cd      	b.n	2b46 <grid_module_en16_reva_init+0xb2>
    2baa:	2300      	movs	r3, #0
		
	}

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2bac:	490c      	ldr	r1, [pc, #48]	; (2be0 <grid_module_en16_reva_init+0x14c>)
    2bae:	011a      	lsls	r2, r3, #4
    2bb0:	5453      	strb	r3, [r2, r1]
    2bb2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2bb4:	2b10      	cmp	r3, #16
    2bb6:	d1fa      	bne.n	2bae <grid_module_en16_reva_init+0x11a>
	}
	
	
	grid_led_init(&grid_led_state, 16);
    2bb8:	2110      	movs	r1, #16
    2bba:	480a      	ldr	r0, [pc, #40]	; (2be4 <grid_module_en16_reva_init+0x150>)
    2bbc:	4b0a      	ldr	r3, [pc, #40]	; (2be8 <grid_module_en16_reva_init+0x154>)
    2bbe:	4798      	blx	r3
	
	grid_module_en16_reva_hardware_init();
    2bc0:	4b0a      	ldr	r3, [pc, #40]	; (2bec <grid_module_en16_reva_init+0x158>)
    2bc2:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2bc4:	4b0a      	ldr	r3, [pc, #40]	; (2bf0 <grid_module_en16_reva_init+0x15c>)
    2bc6:	4798      	blx	r3
	
}
    2bc8:	b017      	add	sp, #92	; 0x5c
    2bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bce:	bf00      	nop
    2bd0:	0000b579 	.word	0x0000b579
    2bd4:	0000bfac 	.word	0x0000bfac
    2bd8:	0000b729 	.word	0x0000b729
    2bdc:	0000bf90 	.word	0x0000bf90
    2be0:	200037e0 	.word	0x200037e0
    2be4:	200035b0 	.word	0x200035b0
    2be8:	00002011 	.word	0x00002011
    2bec:	00002a31 	.word	0x00002a31
    2bf0:	0000258d 	.word	0x0000258d
    2bf4:	0000b771 	.word	0x0000b771
    2bf8:	0000bf74 	.word	0x0000bf74
    2bfc:	00003d55 	.word	0x00003d55

00002c00 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2c00:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2c02:	4803      	ldr	r0, [pc, #12]	; (2c10 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2c04:	4c03      	ldr	r4, [pc, #12]	; (2c14 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2c06:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2c08:	4803      	ldr	r0, [pc, #12]	; (2c18 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2c0a:	47a0      	blx	r4
    2c0c:	bd10      	pop	{r4, pc}
    2c0e:	bf00      	nop
    2c10:	20000ff4 	.word	0x20000ff4
    2c14:	0000432d 	.word	0x0000432d
    2c18:	200011c8 	.word	0x200011c8
    2c1c:	00000000 	.word	0x00000000

00002c20 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2c20:	4ba1      	ldr	r3, [pc, #644]	; (2ea8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	b92b      	cbnz	r3, 2c32 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2c26:	4aa0      	ldr	r2, [pc, #640]	; (2ea8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2c28:	7813      	ldrb	r3, [r2, #0]
    2c2a:	3301      	adds	r3, #1
    2c2c:	b2db      	uxtb	r3, r3
    2c2e:	7013      	strb	r3, [r2, #0]
    2c30:	4770      	bx	lr
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2c32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c36:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2c38:	4668      	mov	r0, sp
    2c3a:	4b9c      	ldr	r3, [pc, #624]	; (2eac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28c>)
    2c3c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c3e:	4b9c      	ldr	r3, [pc, #624]	; (2eb0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2c40:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c44:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c48:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2c4c:	4054      	eors	r4, r2
    2c4e:	400c      	ands	r4, r1
    2c50:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c52:	4668      	mov	r0, sp
    2c54:	4b97      	ldr	r3, [pc, #604]	; (2eb4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x294>)
    2c56:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2c58:	4b97      	ldr	r3, [pc, #604]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2c5a:	685b      	ldr	r3, [r3, #4]
    2c5c:	68db      	ldr	r3, [r3, #12]
    2c5e:	781a      	ldrb	r2, [r3, #0]
    2c60:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2c64:	4294      	cmp	r4, r2
    2c66:	d010      	beq.n	2c8a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6a>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2c68:	2a00      	cmp	r2, #0
    2c6a:	f040 8115 	bne.w	2e98 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x278>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    2c6e:	2201      	movs	r2, #1
    2c70:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2c72:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2c74:	4c90      	ldr	r4, [pc, #576]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2c76:	6863      	ldr	r3, [r4, #4]
    2c78:	6858      	ldr	r0, [r3, #4]
    2c7a:	2102      	movs	r1, #2
    2c7c:	3003      	adds	r0, #3
    2c7e:	4b8f      	ldr	r3, [pc, #572]	; (2ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>)
    2c80:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2c82:	2100      	movs	r1, #0
    2c84:	4620      	mov	r0, r4
    2c86:	4b8e      	ldr	r3, [pc, #568]	; (2ec0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2c88:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2c8a:	2300      	movs	r3, #0
    2c8c:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2c90:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2c94:	4b8b      	ldr	r3, [pc, #556]	; (2ec4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2c96:	781a      	ldrb	r2, [r3, #0]
    2c98:	3208      	adds	r2, #8
    2c9a:	498b      	ldr	r1, [pc, #556]	; (2ec8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2c9c:	5c8e      	ldrb	r6, [r1, r2]
    2c9e:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2ca0:	781a      	ldrb	r2, [r3, #0]
    2ca2:	b2d2      	uxtb	r2, r2
    2ca4:	5c8d      	ldrb	r5, [r1, r2]
    2ca6:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2ca8:	781a      	ldrb	r2, [r3, #0]
    2caa:	3201      	adds	r2, #1
    2cac:	b2d2      	uxtb	r2, r2
    2cae:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2cb0:	781a      	ldrb	r2, [r3, #0]
    2cb2:	f002 0207 	and.w	r2, r2, #7
    2cb6:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2cb8:	781b      	ldrb	r3, [r3, #0]
	if (level) {
    2cba:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2cc2:	4b7b      	ldr	r3, [pc, #492]	; (2eb0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2cc4:	bf14      	ite	ne
    2cc6:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cca:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2cce:	4b7d      	ldr	r3, [pc, #500]	; (2ec4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2cda:	4b75      	ldr	r3, [pc, #468]	; (2eb0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2cdc:	bf14      	ite	ne
    2cde:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2ce6:	4b77      	ldr	r3, [pc, #476]	; (2ec4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2cf2:	4b6f      	ldr	r3, [pc, #444]	; (2eb0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2cf4:	bf14      	ite	ne
    2cf6:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cfa:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2cfe:	2302      	movs	r3, #2
    2d00:	f10d 0206 	add.w	r2, sp, #6
    2d04:	2100      	movs	r1, #0
    2d06:	4871      	ldr	r0, [pc, #452]	; (2ecc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    2d08:	4c71      	ldr	r4, [pc, #452]	; (2ed0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2d0a:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2d0c:	2302      	movs	r3, #2
    2d0e:	aa01      	add	r2, sp, #4
    2d10:	2100      	movs	r1, #0
    2d12:	4870      	ldr	r0, [pc, #448]	; (2ed4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2d14:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2d16:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 2edc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>
    2d1a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2d1e:	47d8      	blx	fp
    2d20:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2ee0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>
    2d24:	a35e      	add	r3, pc, #376	; (adr r3, 2ea0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x280>)
    2d26:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d2a:	47d0      	blx	sl
    2d2c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2ee4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>
    2d30:	47c8      	blx	r9
    2d32:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2d36:	42a0      	cmp	r0, r4
    2d38:	bf28      	it	cs
    2d3a:	4620      	movcs	r0, r4
    2d3c:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2d3e:	fa1f f880 	uxth.w	r8, r0
    2d42:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2d46:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2d4a:	47d8      	blx	fp
    2d4c:	a354      	add	r3, pc, #336	; (adr r3, 2ea0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x280>)
    2d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d52:	47d0      	blx	sl
    2d54:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2d56:	42a0      	cmp	r0, r4
    2d58:	bf28      	it	cs
    2d5a:	4620      	movcs	r0, r4
    2d5c:	b280      	uxth	r0, r0
    2d5e:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2d62:	f1a5 0308 	sub.w	r3, r5, #8
    2d66:	b2db      	uxtb	r3, r3
    2d68:	2b01      	cmp	r3, #1
    2d6a:	f240 808d 	bls.w	2e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2d6e:	2e0d      	cmp	r6, #13
    2d70:	f240 80ba 	bls.w	2ee8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>
		
		if (adcresult_0>10000){
    2d74:	f242 7310 	movw	r3, #10000	; 0x2710
    2d78:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2d7a:	bf8c      	ite	hi
    2d7c:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2d7e:	237f      	movls	r3, #127	; 0x7f
    2d80:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2d84:	f242 7310 	movw	r3, #10000	; 0x2710
    2d88:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2d8a:	bf8c      	ite	hi
    2d8c:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2d8e:	237f      	movls	r3, #127	; 0x7f
    2d90:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_array[adc_index_0+1-4].helper[0]){
    2d94:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2d98:	3c03      	subs	r4, #3
    2d9a:	0124      	lsls	r4, r4, #4
    2d9c:	4b46      	ldr	r3, [pc, #280]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2d9e:	685b      	ldr	r3, [r3, #4]
    2da0:	4423      	add	r3, r4
    2da2:	68da      	ldr	r2, [r3, #12]
    2da4:	7812      	ldrb	r2, [r2, #0]
    2da6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2daa:	4291      	cmp	r1, r2
    2dac:	d02f      	beq.n	2e0e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1ee>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2dae:	2a00      	cmp	r2, #0
    2db0:	bf0c      	ite	eq
    2db2:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2db6:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[5], 2, command);
    2dba:	6858      	ldr	r0, [r3, #4]
    2dbc:	bf0c      	ite	eq
    2dbe:	2290      	moveq	r2, #144	; 0x90
    2dc0:	2280      	movne	r2, #128	; 0x80
    2dc2:	2102      	movs	r1, #2
    2dc4:	3005      	adds	r0, #5
    2dc6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
    2dca:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[7], 2, adc_index_0);
    2dcc:	4f3a      	ldr	r7, [pc, #232]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	4423      	add	r3, r4
    2dd2:	6858      	ldr	r0, [r3, #4]
    2dd4:	4632      	mov	r2, r6
    2dd6:	2102      	movs	r1, #2
    2dd8:	3007      	adds	r0, #7
    2dda:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[9], 2, velocity);
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	4423      	add	r3, r4
    2de0:	6858      	ldr	r0, [r3, #4]
    2de2:	464a      	mov	r2, r9
    2de4:	2102      	movs	r1, #2
    2de6:	3009      	adds	r0, #9
    2de8:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[21], 2, actuator);
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	4423      	add	r3, r4
    2dee:	6858      	ldr	r0, [r3, #4]
    2df0:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2df4:	2102      	movs	r1, #2
    2df6:	3015      	adds	r0, #21
    2df8:	47c0      	blx	r8
			mod->report_array[adc_index_0+1-4].helper[0] = velocity;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	441c      	add	r4, r3
    2dfe:	68e3      	ldr	r3, [r4, #12]
    2e00:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_0+1-4);
    2e04:	1ef1      	subs	r1, r6, #3
    2e06:	b2c9      	uxtb	r1, r1
    2e08:	4638      	mov	r0, r7
    2e0a:	4b2d      	ldr	r3, [pc, #180]	; (2ec0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2e0c:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_array[adc_index_1+1-4].helper[0]){
    2e0e:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2e12:	3c03      	subs	r4, #3
    2e14:	0124      	lsls	r4, r4, #4
    2e16:	4b28      	ldr	r3, [pc, #160]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2e18:	685b      	ldr	r3, [r3, #4]
    2e1a:	4423      	add	r3, r4
    2e1c:	68da      	ldr	r2, [r3, #12]
    2e1e:	7812      	ldrb	r2, [r2, #0]
    2e20:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2e24:	4291      	cmp	r1, r2
    2e26:	d02f      	beq.n	2e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2e28:	2a00      	cmp	r2, #0
    2e2a:	bf0c      	ite	eq
    2e2c:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2e30:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[5], 2, command);
    2e34:	6858      	ldr	r0, [r3, #4]
    2e36:	bf0c      	ite	eq
    2e38:	2290      	moveq	r2, #144	; 0x90
    2e3a:	2280      	movne	r2, #128	; 0x80
    2e3c:	2102      	movs	r1, #2
    2e3e:	3005      	adds	r0, #5
    2e40:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
    2e44:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[7], 2, adc_index_0);
    2e46:	4f1c      	ldr	r7, [pc, #112]	; (2eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2e48:	687b      	ldr	r3, [r7, #4]
    2e4a:	4423      	add	r3, r4
    2e4c:	6858      	ldr	r0, [r3, #4]
    2e4e:	4632      	mov	r2, r6
    2e50:	2102      	movs	r1, #2
    2e52:	3007      	adds	r0, #7
    2e54:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[9], 2, velocity);
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	4423      	add	r3, r4
    2e5a:	6858      	ldr	r0, [r3, #4]
    2e5c:	464a      	mov	r2, r9
    2e5e:	2102      	movs	r1, #2
    2e60:	3009      	adds	r0, #9
    2e62:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[21], 2, actuator);
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	4423      	add	r3, r4
    2e68:	6858      	ldr	r0, [r3, #4]
    2e6a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2e6e:	2102      	movs	r1, #2
    2e70:	3015      	adds	r0, #21
    2e72:	47c0      	blx	r8
			mod->report_array[adc_index_1+1-4].helper[0] = velocity;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	441c      	add	r4, r3
    2e78:	68e3      	ldr	r3, [r4, #12]
    2e7a:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_1+1-4);
    2e7e:	1ee9      	subs	r1, r5, #3
    2e80:	b2c9      	uxtb	r1, r1
    2e82:	4638      	mov	r0, r7
    2e84:	4b0e      	ldr	r3, [pc, #56]	; (2ec0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2e86:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2e88:	2200      	movs	r2, #0
    2e8a:	4b07      	ldr	r3, [pc, #28]	; (2ea8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2e8c:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2e8e:	4b12      	ldr	r3, [pc, #72]	; (2ed8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2e90:	4798      	blx	r3
}
    2e92:	b003      	add	sp, #12
    2e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    2e98:	2200      	movs	r2, #0
    2e9a:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2e9c:	2280      	movs	r2, #128	; 0x80
    2e9e:	e6e9      	b.n	2c74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x54>
    2ea0:	47ae147b 	.word	0x47ae147b
    2ea4:	3ff07ae1 	.word	0x3ff07ae1
    2ea8:	20001774 	.word	0x20001774
    2eac:	00004355 	.word	0x00004355
    2eb0:	41008000 	.word	0x41008000
    2eb4:	00004363 	.word	0x00004363
    2eb8:	20001c98 	.word	0x20001c98
    2ebc:	00003941 	.word	0x00003941
    2ec0:	00003e17 	.word	0x00003e17
    2ec4:	200035ac 	.word	0x200035ac
    2ec8:	20000334 	.word	0x20000334
    2ecc:	20000ff4 	.word	0x20000ff4
    2ed0:	0000424d 	.word	0x0000424d
    2ed4:	200011c8 	.word	0x200011c8
    2ed8:	00002c01 	.word	0x00002c01
    2edc:	0000b001 	.word	0x0000b001
    2ee0:	0000b0cd 	.word	0x0000b0cd
    2ee4:	0000b4f1 	.word	0x0000b4f1
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2ee8:	2d01      	cmp	r5, #1
    2eea:	d937      	bls.n	2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x33c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2eec:	b2b9      	uxth	r1, r7
    2eee:	4630      	mov	r0, r6
    2ef0:	4c36      	ldr	r4, [pc, #216]	; (2fcc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ac>)
    2ef2:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2ef4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2ef8:	4628      	mov	r0, r5
    2efa:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2efc:	4630      	mov	r0, r6
    2efe:	4b34      	ldr	r3, [pc, #208]	; (2fd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b0>)
    2f00:	4798      	blx	r3
    2f02:	2800      	cmp	r0, #0
    2f04:	d139      	bne.n	2f7a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35a>
		if (grid_ain_get_changed(adc_index_1)){
    2f06:	4628      	mov	r0, r5
    2f08:	4b31      	ldr	r3, [pc, #196]	; (2fd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b0>)
    2f0a:	4798      	blx	r3
    2f0c:	2800      	cmp	r0, #0
    2f0e:	d0bb      	beq.n	2e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2f10:	2107      	movs	r1, #7
    2f12:	4628      	mov	r0, r5
    2f14:	4b2f      	ldr	r3, [pc, #188]	; (2fd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>)
    2f16:	4798      	blx	r3
    2f18:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2f1a:	1c6f      	adds	r7, r5, #1
    2f1c:	ea4f 1807 	mov.w	r8, r7, lsl #4
    2f20:	4c2d      	ldr	r4, [pc, #180]	; (2fd8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b8>)
    2f22:	6863      	ldr	r3, [r4, #4]
    2f24:	4443      	add	r3, r8
    2f26:	6858      	ldr	r0, [r3, #4]
    2f28:	462a      	mov	r2, r5
    2f2a:	2102      	movs	r1, #2
    2f2c:	3007      	adds	r0, #7
    2f2e:	4d2b      	ldr	r5, [pc, #172]	; (2fdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3bc>)
    2f30:	47a8      	blx	r5
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    2f32:	6863      	ldr	r3, [r4, #4]
    2f34:	4443      	add	r3, r8
    2f36:	6858      	ldr	r0, [r3, #4]
    2f38:	b2f2      	uxtb	r2, r6
    2f3a:	2102      	movs	r1, #2
    2f3c:	3009      	adds	r0, #9
    2f3e:	47a8      	blx	r5
			uint8_t actuator = 2*value;
    2f40:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2f42:	6863      	ldr	r3, [r4, #4]
    2f44:	4443      	add	r3, r8
    2f46:	6858      	ldr	r0, [r3, #4]
    2f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2f4c:	2102      	movs	r1, #2
    2f4e:	3015      	adds	r0, #21
    2f50:	47a8      	blx	r5
			grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2f52:	b2f9      	uxtb	r1, r7
    2f54:	4620      	mov	r0, r4
    2f56:	4b22      	ldr	r3, [pc, #136]	; (2fe0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    2f58:	4798      	blx	r3
    2f5a:	e795      	b.n	2e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2f5c:	b2b9      	uxth	r1, r7
    2f5e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2f62:	eba8 0101 	sub.w	r1, r8, r1
    2f66:	4630      	mov	r0, r6
    2f68:	4c18      	ldr	r4, [pc, #96]	; (2fcc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ac>)
    2f6a:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2f6c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f70:	eba8 0101 	sub.w	r1, r8, r1
    2f74:	4628      	mov	r0, r5
    2f76:	47a0      	blx	r4
    2f78:	e7c0      	b.n	2efc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2f7a:	2107      	movs	r1, #7
    2f7c:	4630      	mov	r0, r6
    2f7e:	4b15      	ldr	r3, [pc, #84]	; (2fd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>)
    2f80:	4798      	blx	r3
    2f82:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2f84:	f106 0801 	add.w	r8, r6, #1
    2f88:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2f8c:	4c12      	ldr	r4, [pc, #72]	; (2fd8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b8>)
    2f8e:	6863      	ldr	r3, [r4, #4]
    2f90:	444b      	add	r3, r9
    2f92:	6858      	ldr	r0, [r3, #4]
    2f94:	4632      	mov	r2, r6
    2f96:	2102      	movs	r1, #2
    2f98:	3007      	adds	r0, #7
    2f9a:	4e10      	ldr	r6, [pc, #64]	; (2fdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3bc>)
    2f9c:	47b0      	blx	r6
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    2f9e:	6863      	ldr	r3, [r4, #4]
    2fa0:	444b      	add	r3, r9
    2fa2:	6858      	ldr	r0, [r3, #4]
    2fa4:	b2fa      	uxtb	r2, r7
    2fa6:	2102      	movs	r1, #2
    2fa8:	3009      	adds	r0, #9
    2faa:	47b0      	blx	r6
			uint8_t actuator = 2*value;
    2fac:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2fae:	6863      	ldr	r3, [r4, #4]
    2fb0:	444b      	add	r3, r9
    2fb2:	6858      	ldr	r0, [r3, #4]
    2fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2fb8:	2102      	movs	r1, #2
    2fba:	3015      	adds	r0, #21
    2fbc:	47b0      	blx	r6
			grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2fbe:	fa5f f188 	uxtb.w	r1, r8
    2fc2:	4620      	mov	r0, r4
    2fc4:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    2fc6:	4798      	blx	r3
    2fc8:	e79d      	b.n	2f06 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e6>
    2fca:	bf00      	nop
    2fcc:	00001015 	.word	0x00001015
    2fd0:	00001111 	.word	0x00001111
    2fd4:	00001121 	.word	0x00001121
    2fd8:	20001c98 	.word	0x20001c98
    2fdc:	00003941 	.word	0x00003941
    2fe0:	00003e17 	.word	0x00003e17

00002fe4 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    2fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2fe6:	4f0b      	ldr	r7, [pc, #44]	; (3014 <grid_module_pbf4_reva_hardware_init+0x30>)
    2fe8:	4c0b      	ldr	r4, [pc, #44]	; (3018 <grid_module_pbf4_reva_hardware_init+0x34>)
    2fea:	463b      	mov	r3, r7
    2fec:	2200      	movs	r2, #0
    2fee:	4611      	mov	r1, r2
    2ff0:	4620      	mov	r0, r4
    2ff2:	4e0a      	ldr	r6, [pc, #40]	; (301c <grid_module_pbf4_reva_hardware_init+0x38>)
    2ff4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2ff6:	4d0a      	ldr	r5, [pc, #40]	; (3020 <grid_module_pbf4_reva_hardware_init+0x3c>)
    2ff8:	463b      	mov	r3, r7
    2ffa:	2200      	movs	r2, #0
    2ffc:	4611      	mov	r1, r2
    2ffe:	4628      	mov	r0, r5
    3000:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    3002:	2100      	movs	r1, #0
    3004:	4620      	mov	r0, r4
    3006:	4c07      	ldr	r4, [pc, #28]	; (3024 <grid_module_pbf4_reva_hardware_init+0x40>)
    3008:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    300a:	2100      	movs	r1, #0
    300c:	4628      	mov	r0, r5
    300e:	47a0      	blx	r4
    3010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3012:	bf00      	nop
    3014:	00002c21 	.word	0x00002c21
    3018:	20000ff4 	.word	0x20000ff4
    301c:	000041cd 	.word	0x000041cd
    3020:	200011c8 	.word	0x200011c8
    3024:	0000418d 	.word	0x0000418d

00003028 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    302c:	b09a      	sub	sp, #104	; 0x68
    302e:	4607      	mov	r7, r0
	
	grid_ui_model_init(mod, 13);
    3030:	210d      	movs	r1, #13
    3032:	4b33      	ldr	r3, [pc, #204]	; (3100 <grid_module_pbf4_reva_init+0xd8>)
    3034:	4798      	blx	r3
	
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<mod->report_length; i++){
    3036:	783b      	ldrb	r3, [r7, #0]
    3038:	2b00      	cmp	r3, #0
    303a:	d04f      	beq.n	30dc <grid_module_pbf4_reva_init+0xb4>
    303c:	2400      	movs	r4, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    303e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3128 <grid_module_pbf4_reva_init+0x100>
    3042:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 312c <grid_module_pbf4_reva_init+0x104>
    3046:	e029      	b.n	309c <grid_module_pbf4_reva_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3048:	2303      	movs	r3, #3
    304a:	9303      	str	r3, [sp, #12]
    304c:	2339      	movs	r3, #57	; 0x39
    304e:	9302      	str	r3, [sp, #8]
    3050:	2383      	movs	r3, #131	; 0x83
    3052:	9301      	str	r3, [sp, #4]
    3054:	2380      	movs	r3, #128	; 0x80
    3056:	9300      	str	r3, [sp, #0]
    3058:	2301      	movs	r3, #1
    305a:	2202      	movs	r2, #2
    305c:	4929      	ldr	r1, [pc, #164]	; (3104 <grid_module_pbf4_reva_init+0xdc>)
    305e:	a812      	add	r0, sp, #72	; 0x48
    3060:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3062:	a812      	add	r0, sp, #72	; 0x48
    3064:	4e28      	ldr	r6, [pc, #160]	; (3108 <grid_module_pbf4_reva_init+0xe0>)
    3066:	47b0      	blx	r6
    3068:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    306a:	ad0d      	add	r5, sp, #52	; 0x34
    306c:	4b27      	ldr	r3, [pc, #156]	; (310c <grid_module_pbf4_reva_init+0xe4>)
    306e:	681b      	ldr	r3, [r3, #0]
    3070:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    3074:	0c1b      	lsrs	r3, r3, #16
    3076:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    307a:	4628      	mov	r0, r5
    307c:	47b0      	blx	r6

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    307e:	b2c0      	uxtb	r0, r0
    3080:	9001      	str	r0, [sp, #4]
    3082:	9500      	str	r5, [sp, #0]
    3084:	fa5f f388 	uxtb.w	r3, r8
    3088:	aa12      	add	r2, sp, #72	; 0x48
    308a:	4621      	mov	r1, r4
    308c:	4638      	mov	r0, r7
    308e:	4d20      	ldr	r5, [pc, #128]	; (3110 <grid_module_pbf4_reva_init+0xe8>)
    3090:	47a8      	blx	r5
	for(uint8_t i=0; i<mod->report_length; i++){
    3092:	3401      	adds	r4, #1
    3094:	b2e4      	uxtb	r4, r4
    3096:	783b      	ldrb	r3, [r7, #0]
    3098:	42a3      	cmp	r3, r4
    309a:	d91f      	bls.n	30dc <grid_module_pbf4_reva_init+0xb4>
		if (i == 0){
    309c:	2c00      	cmp	r4, #0
    309e:	d0d3      	beq.n	3048 <grid_module_pbf4_reva_init+0x20>
		else if (i<9){ // PORENTIOMETERS & FADERS
    30a0:	2c08      	cmp	r4, #8
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    30a2:	f104 30ff 	add.w	r0, r4, #4294967295
    30a6:	f04f 0103 	mov.w	r1, #3
    30aa:	910b      	str	r1, [sp, #44]	; 0x2c
    30ac:	f04f 0300 	mov.w	r3, #0
    30b0:	930a      	str	r3, [sp, #40]	; 0x28
    30b2:	9009      	str	r0, [sp, #36]	; 0x24
    30b4:	f04f 0263 	mov.w	r2, #99	; 0x63
    30b8:	9208      	str	r2, [sp, #32]
    30ba:	9307      	str	r3, [sp, #28]
    30bc:	9106      	str	r1, [sp, #24]
    30be:	f04f 0202 	mov.w	r2, #2
    30c2:	9205      	str	r2, [sp, #20]
    30c4:	9104      	str	r1, [sp, #16]
    30c6:	9303      	str	r3, [sp, #12]
    30c8:	9002      	str	r0, [sp, #8]
    30ca:	bf94      	ite	ls
    30cc:	21b0      	movls	r1, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    30ce:	2190      	movhi	r1, #144	; 0x90
    30d0:	9101      	str	r1, [sp, #4]
    30d2:	9300      	str	r3, [sp, #0]
    30d4:	4651      	mov	r1, sl
    30d6:	a812      	add	r0, sp, #72	; 0x48
    30d8:	47c8      	blx	r9
    30da:	e7c2      	b.n	3062 <grid_module_pbf4_reva_init+0x3a>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    30dc:	2307      	movs	r3, #7
    30de:	220e      	movs	r2, #14
    30e0:	2105      	movs	r1, #5
    30e2:	2010      	movs	r0, #16
    30e4:	4c0b      	ldr	r4, [pc, #44]	; (3114 <grid_module_pbf4_reva_init+0xec>)
    30e6:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    30e8:	210c      	movs	r1, #12
    30ea:	480b      	ldr	r0, [pc, #44]	; (3118 <grid_module_pbf4_reva_init+0xf0>)
    30ec:	4b0b      	ldr	r3, [pc, #44]	; (311c <grid_module_pbf4_reva_init+0xf4>)
    30ee:	4798      	blx	r3
	
	grid_module_pbf4_reva_hardware_init();
    30f0:	4b0b      	ldr	r3, [pc, #44]	; (3120 <grid_module_pbf4_reva_init+0xf8>)
    30f2:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    30f4:	4b0b      	ldr	r3, [pc, #44]	; (3124 <grid_module_pbf4_reva_init+0xfc>)
    30f6:	4798      	blx	r3
	
    30f8:	b01a      	add	sp, #104	; 0x68
    30fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30fe:	bf00      	nop
    3100:	00003d3d 	.word	0x00003d3d
    3104:	0000bf5c 	.word	0x0000bf5c
    3108:	0000b771 	.word	0x0000b771
    310c:	0000bf74 	.word	0x0000bf74
    3110:	00003d55 	.word	0x00003d55
    3114:	00000fc9 	.word	0x00000fc9
    3118:	200035b0 	.word	0x200035b0
    311c:	00002011 	.word	0x00002011
    3120:	00002fe5 	.word	0x00002fe5
    3124:	00002c01 	.word	0x00002c01
    3128:	0000bf78 	.word	0x0000bf78
    312c:	0000b729 	.word	0x0000b729

00003130 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3130:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3132:	4803      	ldr	r0, [pc, #12]	; (3140 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3134:	4c03      	ldr	r4, [pc, #12]	; (3144 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3136:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3138:	4803      	ldr	r0, [pc, #12]	; (3148 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    313a:	47a0      	blx	r4
    313c:	bd10      	pop	{r4, pc}
    313e:	bf00      	nop
    3140:	20000ff4 	.word	0x20000ff4
    3144:	0000432d 	.word	0x0000432d
    3148:	200011c8 	.word	0x200011c8
    314c:	00000000 	.word	0x00000000

00003150 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3150:	4b91      	ldr	r3, [pc, #580]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	b92b      	cbnz	r3, 3162 <grid_module_po16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_po16_revb_hardware_transfer_complete++;
    3156:	4a90      	ldr	r2, [pc, #576]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3158:	7813      	ldrb	r3, [r2, #0]
    315a:	3301      	adds	r3, #1
    315c:	b2db      	uxtb	r3, r3
    315e:	7013      	strb	r3, [r2, #0]
    3160:	4770      	bx	lr
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3166:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    3168:	4668      	mov	r0, sp
    316a:	4b8c      	ldr	r3, [pc, #560]	; (339c <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    316c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    316e:	4b8c      	ldr	r3, [pc, #560]	; (33a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3170:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3174:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3178:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    317c:	4054      	eors	r4, r2
    317e:	400c      	ands	r4, r1
    3180:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3182:	4668      	mov	r0, sp
    3184:	4b87      	ldr	r3, [pc, #540]	; (33a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    3186:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    3188:	4b87      	ldr	r3, [pc, #540]	; (33a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    318a:	685b      	ldr	r3, [r3, #4]
    318c:	68db      	ldr	r3, [r3, #12]
    318e:	781a      	ldrb	r2, [r3, #0]
    3190:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    3194:	4294      	cmp	r4, r2
    3196:	d018      	beq.n	31ca <grid_module_po16_revb_hardware_transfer_complete_cb+0x7a>
		
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    3198:	2a00      	cmp	r2, #0
    319a:	f040 8098 	bne.w	32ce <grid_module_po16_revb_hardware_transfer_complete_cb+0x17e>
			
			mod->report_array[report_index].helper[0] = 1;
    319e:	2201      	movs	r2, #1
    31a0:	701a      	strb	r2, [r3, #0]
			
			value = (grid_sys_state.bank_select++)%4;
    31a2:	4a82      	ldr	r2, [pc, #520]	; (33ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    31a4:	7a55      	ldrb	r5, [r2, #9]
    31a6:	b2ed      	uxtb	r5, r5
    31a8:	1c6b      	adds	r3, r5, #1
    31aa:	b2db      	uxtb	r3, r3
    31ac:	7253      	strb	r3, [r2, #9]
    31ae:	f005 0503 	and.w	r5, r5, #3
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[5], 2, value);
    31b2:	4c7d      	ldr	r4, [pc, #500]	; (33a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    31b4:	6863      	ldr	r3, [r4, #4]
    31b6:	6858      	ldr	r0, [r3, #4]
    31b8:	462a      	mov	r2, r5
    31ba:	2102      	movs	r1, #2
    31bc:	3005      	adds	r0, #5
    31be:	4b7c      	ldr	r3, [pc, #496]	; (33b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    31c0:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    31c2:	2100      	movs	r1, #0
    31c4:	4620      	mov	r0, r4
    31c6:	4b7b      	ldr	r3, [pc, #492]	; (33b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    31c8:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    31ca:	2300      	movs	r3, #0
    31cc:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    31d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    31d4:	4b70      	ldr	r3, [pc, #448]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    31d6:	785a      	ldrb	r2, [r3, #1]
    31d8:	3208      	adds	r2, #8
    31da:	4977      	ldr	r1, [pc, #476]	; (33b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    31dc:	5c8d      	ldrb	r5, [r1, r2]
    31de:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    31e0:	785a      	ldrb	r2, [r3, #1]
    31e2:	b2d2      	uxtb	r2, r2
    31e4:	5c8c      	ldrb	r4, [r1, r2]
    31e6:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    31e8:	785a      	ldrb	r2, [r3, #1]
    31ea:	3201      	adds	r2, #1
    31ec:	b2d2      	uxtb	r2, r2
    31ee:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    31f0:	785a      	ldrb	r2, [r3, #1]
    31f2:	f002 0207 	and.w	r2, r2, #7
    31f6:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    31f8:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    31fa:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    31fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3202:	4b67      	ldr	r3, [pc, #412]	; (33a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3204:	bf14      	ite	ne
    3206:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    320a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    320e:	4b62      	ldr	r3, [pc, #392]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3210:	785b      	ldrb	r3, [r3, #1]
    3212:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    321a:	4b61      	ldr	r3, [pc, #388]	; (33a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    321c:	bf14      	ite	ne
    321e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3222:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    3226:	4b5c      	ldr	r3, [pc, #368]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3228:	785b      	ldrb	r3, [r3, #1]
    322a:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    322e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3232:	4b5b      	ldr	r3, [pc, #364]	; (33a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3234:	bf14      	ite	ne
    3236:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    323a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    323e:	2302      	movs	r3, #2
    3240:	f10d 0206 	add.w	r2, sp, #6
    3244:	2100      	movs	r1, #0
    3246:	485d      	ldr	r0, [pc, #372]	; (33bc <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    3248:	4e5d      	ldr	r6, [pc, #372]	; (33c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    324a:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    324c:	2302      	movs	r3, #2
    324e:	aa01      	add	r2, sp, #4
    3250:	2100      	movs	r1, #0
    3252:	485c      	ldr	r0, [pc, #368]	; (33c4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x274>)
    3254:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    3256:	f8df a180 	ldr.w	sl, [pc, #384]	; 33d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>
    325a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    325e:	47d0      	blx	sl
    3260:	f8df 9178 	ldr.w	r9, [pc, #376]	; 33dc <grid_module_po16_revb_hardware_transfer_complete_cb+0x28c>
    3264:	a34a      	add	r3, pc, #296	; (adr r3, 3390 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    3266:	e9d3 2300 	ldrd	r2, r3, [r3]
    326a:	47c8      	blx	r9
    326c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 33e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x290>
    3270:	47c0      	blx	r8
    3272:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3276:	42b0      	cmp	r0, r6
    3278:	bf28      	it	cs
    327a:	4630      	movcs	r0, r6
    327c:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    327e:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3282:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    3286:	47d0      	blx	sl
    3288:	a341      	add	r3, pc, #260	; (adr r3, 3390 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    328a:	e9d3 2300 	ldrd	r2, r3, [r3]
    328e:	47c8      	blx	r9
    3290:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3292:	42b0      	cmp	r0, r6
    3294:	bf28      	it	cs
    3296:	4630      	movcs	r0, r6
    3298:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    329c:	b2b9      	uxth	r1, r7
    329e:	4628      	mov	r0, r5
    32a0:	4e49      	ldr	r6, [pc, #292]	; (33c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x278>)
    32a2:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    32a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    32a8:	4620      	mov	r0, r4
    32aa:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    32ac:	4628      	mov	r0, r5
    32ae:	4b47      	ldr	r3, [pc, #284]	; (33cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x27c>)
    32b0:	4798      	blx	r3
    32b2:	b978      	cbnz	r0, 32d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x184>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    32b4:	4620      	mov	r0, r4
    32b6:	4b45      	ldr	r3, [pc, #276]	; (33cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x27c>)
    32b8:	4798      	blx	r3
    32ba:	2800      	cmp	r0, #0
    32bc:	d139      	bne.n	3332 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e2>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    32be:	2200      	movs	r2, #0
    32c0:	4b35      	ldr	r3, [pc, #212]	; (3398 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    32c2:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    32c4:	4b42      	ldr	r3, [pc, #264]	; (33d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x280>)
    32c6:	4798      	blx	r3
}
    32c8:	b002      	add	sp, #8
    32ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mod->report_array[report_index].helper[0] = 0;
    32ce:	2200      	movs	r2, #0
    32d0:	701a      	strb	r2, [r3, #0]
    32d2:	e76e      	b.n	31b2 <grid_module_po16_revb_hardware_transfer_complete_cb+0x62>
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    32d4:	2107      	movs	r1, #7
    32d6:	4628      	mov	r0, r5
    32d8:	4b3e      	ldr	r3, [pc, #248]	; (33d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    32da:	4798      	blx	r3
    32dc:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    32e0:	f105 0901 	add.w	r9, r5, #1
    32e4:	ea4f 1709 	mov.w	r7, r9, lsl #4
    32e8:	4e2f      	ldr	r6, [pc, #188]	; (33a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    32ea:	6873      	ldr	r3, [r6, #4]
    32ec:	443b      	add	r3, r7
    32ee:	6858      	ldr	r0, [r3, #4]
    32f0:	462a      	mov	r2, r5
    32f2:	2102      	movs	r1, #2
    32f4:	3007      	adds	r0, #7
    32f6:	4d2e      	ldr	r5, [pc, #184]	; (33b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    32f8:	47a8      	blx	r5
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    32fa:	6873      	ldr	r3, [r6, #4]
    32fc:	443b      	add	r3, r7
    32fe:	6858      	ldr	r0, [r3, #4]
    3300:	4642      	mov	r2, r8
    3302:	2102      	movs	r1, #2
    3304:	3009      	adds	r0, #9
    3306:	47a8      	blx	r5
		uint8_t actuator = 2*value;
    3308:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    330c:	6873      	ldr	r3, [r6, #4]
    330e:	443b      	add	r3, r7
    3310:	6858      	ldr	r0, [r3, #4]
    3312:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3316:	2102      	movs	r1, #2
    3318:	3015      	adds	r0, #21
    331a:	47a8      	blx	r5
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    331c:	fa5f f189 	uxtb.w	r1, r9
    3320:	4630      	mov	r0, r6
    3322:	4b24      	ldr	r3, [pc, #144]	; (33b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    3324:	4798      	blx	r3
		mod->report_array[adc_index_0+1].helper[0] = value;
    3326:	6873      	ldr	r3, [r6, #4]
    3328:	441f      	add	r7, r3
    332a:	68fb      	ldr	r3, [r7, #12]
    332c:	f883 8000 	strb.w	r8, [r3]
    3330:	e7c0      	b.n	32b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x164>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3332:	2107      	movs	r1, #7
    3334:	4620      	mov	r0, r4
    3336:	4b27      	ldr	r3, [pc, #156]	; (33d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    3338:	4798      	blx	r3
    333a:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    333c:	f104 0801 	add.w	r8, r4, #1
    3340:	ea4f 1608 	mov.w	r6, r8, lsl #4
    3344:	4d18      	ldr	r5, [pc, #96]	; (33a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3346:	686b      	ldr	r3, [r5, #4]
    3348:	4433      	add	r3, r6
    334a:	6858      	ldr	r0, [r3, #4]
    334c:	4622      	mov	r2, r4
    334e:	2102      	movs	r1, #2
    3350:	3007      	adds	r0, #7
    3352:	4c17      	ldr	r4, [pc, #92]	; (33b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    3354:	47a0      	blx	r4
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    3356:	686b      	ldr	r3, [r5, #4]
    3358:	4433      	add	r3, r6
    335a:	6858      	ldr	r0, [r3, #4]
    335c:	463a      	mov	r2, r7
    335e:	2102      	movs	r1, #2
    3360:	3009      	adds	r0, #9
    3362:	47a0      	blx	r4
		uint8_t actuator = 2*value;
    3364:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    3366:	686b      	ldr	r3, [r5, #4]
    3368:	4433      	add	r3, r6
    336a:	6858      	ldr	r0, [r3, #4]
    336c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3370:	2102      	movs	r1, #2
    3372:	3015      	adds	r0, #21
    3374:	47a0      	blx	r4
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    3376:	fa5f f188 	uxtb.w	r1, r8
    337a:	4628      	mov	r0, r5
    337c:	4b0d      	ldr	r3, [pc, #52]	; (33b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    337e:	4798      	blx	r3
		mod->report_array[adc_index_1+1].helper[0] = value;
    3380:	686b      	ldr	r3, [r5, #4]
    3382:	441e      	add	r6, r3
    3384:	68f3      	ldr	r3, [r6, #12]
    3386:	701f      	strb	r7, [r3, #0]
    3388:	e799      	b.n	32be <grid_module_po16_revb_hardware_transfer_complete_cb+0x16e>
    338a:	bf00      	nop
    338c:	f3af 8000 	nop.w
    3390:	47ae147b 	.word	0x47ae147b
    3394:	3ff07ae1 	.word	0x3ff07ae1
    3398:	20000656 	.word	0x20000656
    339c:	00004355 	.word	0x00004355
    33a0:	41008000 	.word	0x41008000
    33a4:	00004363 	.word	0x00004363
    33a8:	20001c98 	.word	0x20001c98
    33ac:	20001ca4 	.word	0x20001ca4
    33b0:	00003941 	.word	0x00003941
    33b4:	00003e17 	.word	0x00003e17
    33b8:	20000344 	.word	0x20000344
    33bc:	20000ff4 	.word	0x20000ff4
    33c0:	0000424d 	.word	0x0000424d
    33c4:	200011c8 	.word	0x200011c8
    33c8:	00001015 	.word	0x00001015
    33cc:	00001111 	.word	0x00001111
    33d0:	00003131 	.word	0x00003131
    33d4:	00001121 	.word	0x00001121
    33d8:	0000b001 	.word	0x0000b001
    33dc:	0000b0cd 	.word	0x0000b0cd
    33e0:	0000b4f1 	.word	0x0000b4f1

000033e4 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    33e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    33e6:	4f0b      	ldr	r7, [pc, #44]	; (3414 <grid_module_po16_revb_hardware_init+0x30>)
    33e8:	4c0b      	ldr	r4, [pc, #44]	; (3418 <grid_module_po16_revb_hardware_init+0x34>)
    33ea:	463b      	mov	r3, r7
    33ec:	2200      	movs	r2, #0
    33ee:	4611      	mov	r1, r2
    33f0:	4620      	mov	r0, r4
    33f2:	4e0a      	ldr	r6, [pc, #40]	; (341c <grid_module_po16_revb_hardware_init+0x38>)
    33f4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    33f6:	4d0a      	ldr	r5, [pc, #40]	; (3420 <grid_module_po16_revb_hardware_init+0x3c>)
    33f8:	463b      	mov	r3, r7
    33fa:	2200      	movs	r2, #0
    33fc:	4611      	mov	r1, r2
    33fe:	4628      	mov	r0, r5
    3400:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3402:	2100      	movs	r1, #0
    3404:	4620      	mov	r0, r4
    3406:	4c07      	ldr	r4, [pc, #28]	; (3424 <grid_module_po16_revb_hardware_init+0x40>)
    3408:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    340a:	2100      	movs	r1, #0
    340c:	4628      	mov	r0, r5
    340e:	47a0      	blx	r4
    3410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3412:	bf00      	nop
    3414:	00003151 	.word	0x00003151
    3418:	20000ff4 	.word	0x20000ff4
    341c:	000041cd 	.word	0x000041cd
    3420:	200011c8 	.word	0x200011c8
    3424:	0000418d 	.word	0x0000418d

00003428 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    3428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    342c:	b09d      	sub	sp, #116	; 0x74
    342e:	900d      	str	r0, [sp, #52]	; 0x34
	

	grid_ui_model_init(mod, 17);
    3430:	2111      	movs	r1, #17
    3432:	4b3a      	ldr	r3, [pc, #232]	; (351c <grid_module_po16_revb_init+0xf4>)
    3434:	4798      	blx	r3
    3436:	2501      	movs	r5, #1
    3438:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    343a:	f8df b108 	ldr.w	fp, [pc, #264]	; 3544 <grid_module_po16_revb_init+0x11c>
    343e:	f8df a108 	ldr.w	sl, [pc, #264]	; 3548 <grid_module_po16_revb_init+0x120>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3442:	4f37      	ldr	r7, [pc, #220]	; (3520 <grid_module_po16_revb_init+0xf8>)
    3444:	e028      	b.n	3498 <grid_module_po16_revb_init+0x70>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3446:	2303      	movs	r3, #3
    3448:	9303      	str	r3, [sp, #12]
    344a:	2600      	movs	r6, #0
    344c:	9602      	str	r6, [sp, #8]
    344e:	2365      	movs	r3, #101	; 0x65
    3450:	9301      	str	r3, [sp, #4]
    3452:	2364      	movs	r3, #100	; 0x64
    3454:	9300      	str	r3, [sp, #0]
    3456:	2304      	movs	r3, #4
    3458:	2202      	movs	r2, #2
    345a:	4932      	ldr	r1, [pc, #200]	; (3524 <grid_module_po16_revb_init+0xfc>)
    345c:	a814      	add	r0, sp, #80	; 0x50
    345e:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    3460:	a814      	add	r0, sp, #80	; 0x50
    3462:	47b8      	blx	r7
    3464:	4681      	mov	r9, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    3466:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    346a:	4b2f      	ldr	r3, [pc, #188]	; (3528 <grid_module_po16_revb_init+0x100>)
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    3472:	0c1b      	lsrs	r3, r3, #16
    3474:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		
		uint8_t helper_length = strlen(helper_template);
    3478:	4640      	mov	r0, r8
    347a:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    347c:	b2c0      	uxtb	r0, r0
    347e:	9001      	str	r0, [sp, #4]
    3480:	f8cd 8000 	str.w	r8, [sp]
    3484:	fa5f f389 	uxtb.w	r3, r9
    3488:	aa14      	add	r2, sp, #80	; 0x50
    348a:	4631      	mov	r1, r6
    348c:	980d      	ldr	r0, [sp, #52]	; 0x34
    348e:	4e27      	ldr	r6, [pc, #156]	; (352c <grid_module_po16_revb_init+0x104>)
    3490:	47b0      	blx	r6
    3492:	3401      	adds	r4, #1
    3494:	3501      	adds	r5, #1
    3496:	b2ed      	uxtb	r5, r5
		if (i == 0){
    3498:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    349c:	d0d3      	beq.n	3446 <grid_module_po16_revb_init+0x1e>
    349e:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    34a0:	2103      	movs	r1, #3
    34a2:	910b      	str	r1, [sp, #44]	; 0x2c
    34a4:	2300      	movs	r3, #0
    34a6:	930a      	str	r3, [sp, #40]	; 0x28
    34a8:	9009      	str	r0, [sp, #36]	; 0x24
    34aa:	2263      	movs	r2, #99	; 0x63
    34ac:	9208      	str	r2, [sp, #32]
    34ae:	9307      	str	r3, [sp, #28]
    34b0:	9106      	str	r1, [sp, #24]
    34b2:	2202      	movs	r2, #2
    34b4:	9205      	str	r2, [sp, #20]
    34b6:	9104      	str	r1, [sp, #16]
    34b8:	9303      	str	r3, [sp, #12]
    34ba:	9002      	str	r0, [sp, #8]
    34bc:	21b0      	movs	r1, #176	; 0xb0
    34be:	9101      	str	r1, [sp, #4]
    34c0:	9300      	str	r3, [sp, #0]
    34c2:	4659      	mov	r1, fp
    34c4:	a814      	add	r0, sp, #80	; 0x50
    34c6:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    34c8:	a814      	add	r0, sp, #80	; 0x50
    34ca:	47b8      	blx	r7
    34cc:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    34ce:	ae0f      	add	r6, sp, #60	; 0x3c
    34d0:	4b15      	ldr	r3, [pc, #84]	; (3528 <grid_module_po16_revb_init+0x100>)
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    34d8:	0c1b      	lsrs	r3, r3, #16
    34da:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    34de:	4630      	mov	r0, r6
    34e0:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    34e2:	b2c0      	uxtb	r0, r0
    34e4:	9001      	str	r0, [sp, #4]
    34e6:	9600      	str	r6, [sp, #0]
    34e8:	fa5f f389 	uxtb.w	r3, r9
    34ec:	aa14      	add	r2, sp, #80	; 0x50
    34ee:	4641      	mov	r1, r8
    34f0:	980d      	ldr	r0, [sp, #52]	; 0x34
    34f2:	4e0e      	ldr	r6, [pc, #56]	; (352c <grid_module_po16_revb_init+0x104>)
    34f4:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    34f6:	2d10      	cmp	r5, #16
    34f8:	d9cb      	bls.n	3492 <grid_module_po16_revb_init+0x6a>
	

		
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    34fa:	2307      	movs	r3, #7
    34fc:	220e      	movs	r2, #14
    34fe:	2105      	movs	r1, #5
    3500:	2010      	movs	r0, #16
    3502:	4c0b      	ldr	r4, [pc, #44]	; (3530 <grid_module_po16_revb_init+0x108>)
    3504:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    3506:	2110      	movs	r1, #16
    3508:	480a      	ldr	r0, [pc, #40]	; (3534 <grid_module_po16_revb_init+0x10c>)
    350a:	4b0b      	ldr	r3, [pc, #44]	; (3538 <grid_module_po16_revb_init+0x110>)
    350c:	4798      	blx	r3
	
	grid_module_po16_revb_hardware_init();
    350e:	4b0b      	ldr	r3, [pc, #44]	; (353c <grid_module_po16_revb_init+0x114>)
    3510:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3512:	4b0b      	ldr	r3, [pc, #44]	; (3540 <grid_module_po16_revb_init+0x118>)
    3514:	4798      	blx	r3
	
    3516:	b01d      	add	sp, #116	; 0x74
    3518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    351c:	00003d3d 	.word	0x00003d3d
    3520:	0000b771 	.word	0x0000b771
    3524:	0000bf5c 	.word	0x0000bf5c
    3528:	0000bf74 	.word	0x0000bf74
    352c:	00003d55 	.word	0x00003d55
    3530:	00000fc9 	.word	0x00000fc9
    3534:	200035b0 	.word	0x200035b0
    3538:	00002011 	.word	0x00002011
    353c:	000033e5 	.word	0x000033e5
    3540:	00003131 	.word	0x00003131
    3544:	0000bf78 	.word	0x0000bf78
    3548:	0000b729 	.word	0x0000b729

0000354c <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    354c:	8982      	ldrh	r2, [r0, #12]
    354e:	b142      	cbz	r2, 3562 <tx_cb_USART_GRID+0x16>
    3550:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3554:	3227      	adds	r2, #39	; 0x27
    3556:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3558:	2100      	movs	r1, #0
    355a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    355e:	4293      	cmp	r3, r2
    3560:	d1fb      	bne.n	355a <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3562:	2300      	movs	r3, #0
    3564:	8183      	strh	r3, [r0, #12]
    3566:	4770      	bx	lr

00003568 <tx_cb_USART_GRID_W>:
{
    3568:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    356a:	4802      	ldr	r0, [pc, #8]	; (3574 <tx_cb_USART_GRID_W+0xc>)
    356c:	4b02      	ldr	r3, [pc, #8]	; (3578 <tx_cb_USART_GRID_W+0x10>)
    356e:	4798      	blx	r3
    3570:	bd08      	pop	{r3, pc}
    3572:	bf00      	nop
    3574:	20002154 	.word	0x20002154
    3578:	0000354d 	.word	0x0000354d

0000357c <tx_cb_USART_GRID_S>:
{
    357c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    357e:	4802      	ldr	r0, [pc, #8]	; (3588 <tx_cb_USART_GRID_S+0xc>)
    3580:	4b02      	ldr	r3, [pc, #8]	; (358c <tx_cb_USART_GRID_S+0x10>)
    3582:	4798      	blx	r3
    3584:	bd08      	pop	{r3, pc}
    3586:	bf00      	nop
    3588:	20002678 	.word	0x20002678
    358c:	0000354d 	.word	0x0000354d

00003590 <tx_cb_USART_GRID_E>:
{
    3590:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    3592:	4802      	ldr	r0, [pc, #8]	; (359c <tx_cb_USART_GRID_E+0xc>)
    3594:	4b02      	ldr	r3, [pc, #8]	; (35a0 <tx_cb_USART_GRID_E+0x10>)
    3596:	4798      	blx	r3
    3598:	bd08      	pop	{r3, pc}
    359a:	bf00      	nop
    359c:	2000309c 	.word	0x2000309c
    35a0:	0000354d 	.word	0x0000354d

000035a4 <tx_cb_USART_GRID_N>:
{
    35a4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    35a6:	4802      	ldr	r0, [pc, #8]	; (35b0 <tx_cb_USART_GRID_N+0xc>)
    35a8:	4b02      	ldr	r3, [pc, #8]	; (35b4 <tx_cb_USART_GRID_N+0x10>)
    35aa:	4798      	blx	r3
    35ac:	bd08      	pop	{r3, pc}
    35ae:	bf00      	nop
    35b0:	20001238 	.word	0x20001238
    35b4:	0000354d 	.word	0x0000354d

000035b8 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    35b8:	b508      	push	{r3, lr}
    35ba:	7a83      	ldrb	r3, [r0, #10]
    35bc:	011b      	lsls	r3, r3, #4
    35be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    35c2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    35c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    35c8:	f022 0202 	bic.w	r2, r2, #2
    35cc:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    35ce:	2100      	movs	r1, #0
    35d0:	7a80      	ldrb	r0, [r0, #10]
    35d2:	4b01      	ldr	r3, [pc, #4]	; (35d8 <grid_sys_port_reset_dma+0x20>)
    35d4:	4798      	blx	r3
    35d6:	bd08      	pop	{r3, pc}
    35d8:	00005e89 	.word	0x00005e89

000035dc <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    35dc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    35de:	4802      	ldr	r0, [pc, #8]	; (35e8 <dma_transfer_complete_w_cb+0xc>)
    35e0:	4b02      	ldr	r3, [pc, #8]	; (35ec <dma_transfer_complete_w_cb+0x10>)
    35e2:	4798      	blx	r3
    35e4:	bd08      	pop	{r3, pc}
    35e6:	bf00      	nop
    35e8:	20002154 	.word	0x20002154
    35ec:	000035b9 	.word	0x000035b9

000035f0 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    35f0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    35f2:	4802      	ldr	r0, [pc, #8]	; (35fc <dma_transfer_complete_s_cb+0xc>)
    35f4:	4b02      	ldr	r3, [pc, #8]	; (3600 <dma_transfer_complete_s_cb+0x10>)
    35f6:	4798      	blx	r3
    35f8:	bd08      	pop	{r3, pc}
    35fa:	bf00      	nop
    35fc:	20002678 	.word	0x20002678
    3600:	000035b9 	.word	0x000035b9

00003604 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    3604:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3606:	4802      	ldr	r0, [pc, #8]	; (3610 <dma_transfer_complete_e_cb+0xc>)
    3608:	4b02      	ldr	r3, [pc, #8]	; (3614 <dma_transfer_complete_e_cb+0x10>)
    360a:	4798      	blx	r3
    360c:	bd08      	pop	{r3, pc}
    360e:	bf00      	nop
    3610:	2000309c 	.word	0x2000309c
    3614:	000035b9 	.word	0x000035b9

00003618 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3618:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    361a:	4802      	ldr	r0, [pc, #8]	; (3624 <dma_transfer_complete_n_cb+0xc>)
    361c:	4b02      	ldr	r3, [pc, #8]	; (3628 <dma_transfer_complete_n_cb+0x10>)
    361e:	4798      	blx	r3
    3620:	bd08      	pop	{r3, pc}
    3622:	bf00      	nop
    3624:	20001238 	.word	0x20001238
    3628:	000035b9 	.word	0x000035b9

0000362c <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3630:	4b2f      	ldr	r3, [pc, #188]	; (36f0 <grid_sys_uart_init+0xc4>)
    3632:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3636:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    363a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    363e:	f042 0204 	orr.w	r2, r2, #4
    3642:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3646:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    364a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    364e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3652:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3656:	f042 0204 	orr.w	r2, r2, #4
    365a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    365e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3666:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    366a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    366e:	f042 0204 	orr.w	r2, r2, #4
    3672:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3676:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    367a:	f44f 7100 	mov.w	r1, #512	; 0x200
    367e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3682:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3686:	f042 0204 	orr.w	r2, r2, #4
    368a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    368e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3692:	f8df 8098 	ldr.w	r8, [pc, #152]	; 372c <grid_sys_uart_init+0x100>
    3696:	4a17      	ldr	r2, [pc, #92]	; (36f4 <grid_sys_uart_init+0xc8>)
    3698:	2101      	movs	r1, #1
    369a:	4640      	mov	r0, r8
    369c:	4c16      	ldr	r4, [pc, #88]	; (36f8 <grid_sys_uart_init+0xcc>)
    369e:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    36a0:	4f16      	ldr	r7, [pc, #88]	; (36fc <grid_sys_uart_init+0xd0>)
    36a2:	4a17      	ldr	r2, [pc, #92]	; (3700 <grid_sys_uart_init+0xd4>)
    36a4:	2101      	movs	r1, #1
    36a6:	4638      	mov	r0, r7
    36a8:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    36aa:	4e16      	ldr	r6, [pc, #88]	; (3704 <grid_sys_uart_init+0xd8>)
    36ac:	4a16      	ldr	r2, [pc, #88]	; (3708 <grid_sys_uart_init+0xdc>)
    36ae:	2101      	movs	r1, #1
    36b0:	4630      	mov	r0, r6
    36b2:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    36b4:	4d15      	ldr	r5, [pc, #84]	; (370c <grid_sys_uart_init+0xe0>)
    36b6:	4a16      	ldr	r2, [pc, #88]	; (3710 <grid_sys_uart_init+0xe4>)
    36b8:	2101      	movs	r1, #1
    36ba:	4628      	mov	r0, r5
    36bc:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    36be:	4915      	ldr	r1, [pc, #84]	; (3714 <grid_sys_uart_init+0xe8>)
    36c0:	4640      	mov	r0, r8
    36c2:	4c15      	ldr	r4, [pc, #84]	; (3718 <grid_sys_uart_init+0xec>)
    36c4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    36c6:	4915      	ldr	r1, [pc, #84]	; (371c <grid_sys_uart_init+0xf0>)
    36c8:	4638      	mov	r0, r7
    36ca:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    36cc:	4914      	ldr	r1, [pc, #80]	; (3720 <grid_sys_uart_init+0xf4>)
    36ce:	4630      	mov	r0, r6
    36d0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    36d2:	4914      	ldr	r1, [pc, #80]	; (3724 <grid_sys_uart_init+0xf8>)
    36d4:	4628      	mov	r0, r5
    36d6:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    36d8:	4640      	mov	r0, r8
    36da:	4c13      	ldr	r4, [pc, #76]	; (3728 <grid_sys_uart_init+0xfc>)
    36dc:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    36de:	4638      	mov	r0, r7
    36e0:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    36e2:	4630      	mov	r0, r6
    36e4:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    36e6:	4628      	mov	r0, r5
    36e8:	47a0      	blx	r4
    36ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ee:	bf00      	nop
    36f0:	41008000 	.word	0x41008000
    36f4:	000035a5 	.word	0x000035a5
    36f8:	00005031 	.word	0x00005031
    36fc:	20001020 	.word	0x20001020
    3700:	00003591 	.word	0x00003591
    3704:	20001178 	.word	0x20001178
    3708:	0000357d 	.word	0x0000357d
    370c:	20001128 	.word	0x20001128
    3710:	00003569 	.word	0x00003569
    3714:	20001ca0 	.word	0x20001ca0
    3718:	00005009 	.word	0x00005009
    371c:	20002664 	.word	0x20002664
    3720:	20002b88 	.word	0x20002b88
    3724:	200035d8 	.word	0x200035d8
    3728:	00004fdd 	.word	0x00004fdd
    372c:	20001074 	.word	0x20001074

00003730 <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	b083      	sub	sp, #12
    3734:	4605      	mov	r5, r0
    3736:	460f      	mov	r7, r1
    3738:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    373a:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    373c:	6843      	ldr	r3, [r0, #4]
    373e:	6a19      	ldr	r1, [r3, #32]
    3740:	3128      	adds	r1, #40	; 0x28
    3742:	4620      	mov	r0, r4
    3744:	4b0d      	ldr	r3, [pc, #52]	; (377c <grid_sys_dma_rx_init_one+0x4c>)
    3746:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3748:	f505 7120 	add.w	r1, r5, #640	; 0x280
    374c:	4620      	mov	r0, r4
    374e:	4b0c      	ldr	r3, [pc, #48]	; (3780 <grid_sys_dma_rx_init_one+0x50>)
    3750:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3752:	4639      	mov	r1, r7
    3754:	4620      	mov	r0, r4
    3756:	4b0b      	ldr	r3, [pc, #44]	; (3784 <grid_sys_dma_rx_init_one+0x54>)
    3758:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    375a:	4621      	mov	r1, r4
    375c:	a801      	add	r0, sp, #4
    375e:	4b0a      	ldr	r3, [pc, #40]	; (3788 <grid_sys_dma_rx_init_one+0x58>)
    3760:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3766:	2201      	movs	r2, #1
    3768:	2100      	movs	r1, #0
    376a:	4620      	mov	r0, r4
    376c:	4b07      	ldr	r3, [pc, #28]	; (378c <grid_sys_dma_rx_init_one+0x5c>)
    376e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3770:	2100      	movs	r1, #0
    3772:	4620      	mov	r0, r4
    3774:	4b06      	ldr	r3, [pc, #24]	; (3790 <grid_sys_dma_rx_init_one+0x60>)
    3776:	4798      	blx	r3
	

}
    3778:	b003      	add	sp, #12
    377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    377c:	00005e05 	.word	0x00005e05
    3780:	00005df5 	.word	0x00005df5
    3784:	00005e31 	.word	0x00005e31
    3788:	00005ec9 	.word	0x00005ec9
    378c:	00005da1 	.word	0x00005da1
    3790:	00005e89 	.word	0x00005e89

00003794 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3794:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3796:	4a10      	ldr	r2, [pc, #64]	; (37d8 <grid_sys_dma_rx_init+0x44>)
    3798:	f44f 7116 	mov.w	r1, #600	; 0x258
    379c:	480f      	ldr	r0, [pc, #60]	; (37dc <grid_sys_dma_rx_init+0x48>)
    379e:	4c10      	ldr	r4, [pc, #64]	; (37e0 <grid_sys_dma_rx_init+0x4c>)
    37a0:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    37a2:	4a10      	ldr	r2, [pc, #64]	; (37e4 <grid_sys_dma_rx_init+0x50>)
    37a4:	f44f 7116 	mov.w	r1, #600	; 0x258
    37a8:	480f      	ldr	r0, [pc, #60]	; (37e8 <grid_sys_dma_rx_init+0x54>)
    37aa:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    37ac:	4a0f      	ldr	r2, [pc, #60]	; (37ec <grid_sys_dma_rx_init+0x58>)
    37ae:	f44f 7116 	mov.w	r1, #600	; 0x258
    37b2:	480f      	ldr	r0, [pc, #60]	; (37f0 <grid_sys_dma_rx_init+0x5c>)
    37b4:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    37b6:	4a0f      	ldr	r2, [pc, #60]	; (37f4 <grid_sys_dma_rx_init+0x60>)
    37b8:	f44f 7116 	mov.w	r1, #600	; 0x258
    37bc:	480e      	ldr	r0, [pc, #56]	; (37f8 <grid_sys_dma_rx_init+0x64>)
    37be:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37c0:	4b0e      	ldr	r3, [pc, #56]	; (37fc <grid_sys_dma_rx_init+0x68>)
    37c2:	2200      	movs	r2, #0
    37c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    37c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    37cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    37d0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    37d4:	bd10      	pop	{r4, pc}
    37d6:	bf00      	nop
    37d8:	00003619 	.word	0x00003619
    37dc:	20001238 	.word	0x20001238
    37e0:	00003731 	.word	0x00003731
    37e4:	00003605 	.word	0x00003605
    37e8:	2000309c 	.word	0x2000309c
    37ec:	000035f1 	.word	0x000035f1
    37f0:	20002678 	.word	0x20002678
    37f4:	000035dd 	.word	0x000035dd
    37f8:	20002154 	.word	0x20002154
    37fc:	e000e100 	.word	0xe000e100

00003800 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    3800:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    3802:	2200      	movs	r2, #0
    3804:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    3806:	24c8      	movs	r4, #200	; 0xc8
    3808:	7284      	strb	r4, [r0, #10]
	mod->bank_color_g[0] = 100;
    380a:	2364      	movs	r3, #100	; 0x64
    380c:	7383      	strb	r3, [r0, #14]
	mod->bank_color_b[0] = 0;
    380e:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 50;
    3810:	2132      	movs	r1, #50	; 0x32
    3812:	72c1      	strb	r1, [r0, #11]
	mod->bank_color_g[1] = 100;
    3814:	73c3      	strb	r3, [r0, #15]
	mod->bank_color_b[1] = 150;
    3816:	2396      	movs	r3, #150	; 0x96
    3818:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    381a:	7301      	strb	r1, [r0, #12]
	mod->bank_color_g[2] = 200;
    381c:	7404      	strb	r4, [r0, #16]
	mod->bank_color_b[2] = 50;
    381e:	7501      	strb	r1, [r0, #20]
	
	mod->bank_color_r[3] = 150;
    3820:	7343      	strb	r3, [r0, #13]
	mod->bank_color_g[3] = 0;
    3822:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 150;
    3824:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    3826:	4b03      	ldr	r3, [pc, #12]	; (3834 <grid_sys_init+0x34>)
    3828:	4798      	blx	r3
	
	grid_sys_uart_init();
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <grid_sys_init+0x38>)
    382c:	4798      	blx	r3
	grid_sys_dma_rx_init();
    382e:	4b03      	ldr	r3, [pc, #12]	; (383c <grid_sys_init+0x3c>)
    3830:	4798      	blx	r3
    3832:	bd10      	pop	{r4, pc}
    3834:	00001415 	.word	0x00001415
    3838:	0000362d 	.word	0x0000362d
    383c:	00003795 	.word	0x00003795

00003840 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3840:	6980      	ldr	r0, [r0, #24]
    3842:	4770      	bx	lr

00003844 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t told){
	
	if (mod->realtime>told){
    3844:	6980      	ldr	r0, [r0, #24]
    3846:	4288      	cmp	r0, r1
		return mod->realtime-told;
    3848:	bf8e      	itee	hi
    384a:	1a40      	subhi	r0, r0, r1
	}
	else{
		return (1<<32)-1 - told + mod->realtime;
    384c:	43c9      	mvnls	r1, r1
    384e:	1840      	addls	r0, r0, r1
	}
	

}
    3850:	4770      	bx	lr

00003852 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3852:	6983      	ldr	r3, [r0, #24]
    3854:	3301      	adds	r3, #1
    3856:	6183      	str	r3, [r0, #24]
    3858:	4770      	bx	lr

0000385a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    385a:	7a00      	ldrb	r0, [r0, #8]
    385c:	4770      	bx	lr

0000385e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    385e:	2300      	movs	r3, #0
    3860:	7203      	strb	r3, [r0, #8]
    3862:	4770      	bx	lr

00003864 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3864:	7983      	ldrb	r3, [r0, #6]
    3866:	b123      	cbz	r3, 3872 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3868:	2b01      	cmp	r3, #1
    386a:	d00f      	beq.n	388c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    386c:	2b02      	cmp	r3, #2
    386e:	d015      	beq.n	389c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3870:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3872:	8880      	ldrh	r0, [r0, #4]
    3874:	0840      	lsrs	r0, r0, #1
    3876:	387d      	subs	r0, #125	; 0x7d
    3878:	2800      	cmp	r0, #0
    387a:	bfb8      	it	lt
    387c:	4240      	neglt	r0, r0
    387e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3882:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3886:	f3c0 0047 	ubfx	r0, r0, #1, #8
    388a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    388c:	8880      	ldrh	r0, [r0, #4]
    388e:	4b06      	ldr	r3, [pc, #24]	; (38a8 <grid_sys_alert_get_color_intensity+0x44>)
    3890:	fba3 3000 	umull	r3, r0, r3, r0
    3894:	f340 1000 	sbfx	r0, r0, #4, #1
    3898:	b2c0      	uxtb	r0, r0
    389a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    389c:	8880      	ldrh	r0, [r0, #4]
    389e:	2864      	cmp	r0, #100	; 0x64
    38a0:	bf8c      	ite	hi
    38a2:	20ff      	movhi	r0, #255	; 0xff
    38a4:	2000      	movls	r0, #0
    38a6:	4770      	bx	lr
    38a8:	10624dd3 	.word	0x10624dd3

000038ac <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    38ac:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    38ae:	2401      	movs	r4, #1
    38b0:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    38b2:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    38b4:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    38b6:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    38b8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    38bc:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    38be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    38c2:	7183      	strb	r3, [r0, #6]
	
}
    38c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    38c8:	4770      	bx	lr

000038ca <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    38ca:	7840      	ldrb	r0, [r0, #1]
    38cc:	4770      	bx	lr

000038ce <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    38ce:	7880      	ldrb	r0, [r0, #2]
    38d0:	4770      	bx	lr

000038d2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    38d2:	78c0      	ldrb	r0, [r0, #3]
    38d4:	4770      	bx	lr

000038d6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    38d6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    38d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    38dc:	b2d8      	uxtb	r0, r3
    38de:	2809      	cmp	r0, #9
    38e0:	d90d      	bls.n	38fe <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    38e2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    38e6:	b2db      	uxtb	r3, r3
    38e8:	2b05      	cmp	r3, #5
    38ea:	d903      	bls.n	38f4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    38ec:	b131      	cbz	r1, 38fc <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    38ee:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    38f0:	2000      	movs	r0, #0
    38f2:	4770      	bx	lr
		result = ascii - 97 + 10;
    38f4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    38f8:	b2c0      	uxtb	r0, r0
    38fa:	4770      	bx	lr
	uint8_t result = 0;
    38fc:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    38fe:	4770      	bx	lr

00003900 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3904:	b1c1      	cbz	r1, 3938 <grid_sys_read_hex_string_value+0x38>
    3906:	4690      	mov	r8, r2
    3908:	1e45      	subs	r5, r0, #1
    390a:	1e4b      	subs	r3, r1, #1
    390c:	009c      	lsls	r4, r3, #2
    390e:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3912:	3f02      	subs	r7, #2
    3914:	b2db      	uxtb	r3, r3
    3916:	1aff      	subs	r7, r7, r3
    3918:	00bf      	lsls	r7, r7, #2
    391a:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    391c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 393c <grid_sys_read_hex_string_value+0x3c>
    3920:	4641      	mov	r1, r8
    3922:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3926:	47c8      	blx	r9
    3928:	40a0      	lsls	r0, r4
    392a:	4406      	add	r6, r0
    392c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    392e:	42bc      	cmp	r4, r7
    3930:	d1f6      	bne.n	3920 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3932:	4630      	mov	r0, r6
    3934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3938:	2600      	movs	r6, #0
	return result;
    393a:	e7fa      	b.n	3932 <grid_sys_read_hex_string_value+0x32>
    393c:	000038d7 	.word	0x000038d7

00003940 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3940:	b530      	push	{r4, r5, lr}
    3942:	b085      	sub	sp, #20
    3944:	4605      	mov	r5, r0
    3946:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3948:	4909      	ldr	r1, [pc, #36]	; (3970 <grid_sys_write_hex_string_value+0x30>)
    394a:	a801      	add	r0, sp, #4
    394c:	4b09      	ldr	r3, [pc, #36]	; (3974 <grid_sys_write_hex_string_value+0x34>)
    394e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3950:	b164      	cbz	r4, 396c <grid_sys_write_hex_string_value+0x2c>
    3952:	ab04      	add	r3, sp, #16
    3954:	1b1a      	subs	r2, r3, r4
    3956:	3a05      	subs	r2, #5
    3958:	1e6b      	subs	r3, r5, #1
    395a:	1e60      	subs	r0, r4, #1
    395c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3960:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3964:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3968:	4283      	cmp	r3, r0
    396a:	d1f9      	bne.n	3960 <grid_sys_write_hex_string_value+0x20>
	}

}
    396c:	b005      	add	sp, #20
    396e:	bd30      	pop	{r4, r5, pc}
    3970:	0000bfc4 	.word	0x0000bfc4
    3974:	0000b729 	.word	0x0000b729

00003978 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3978:	4b34      	ldr	r3, [pc, #208]	; (3a4c <grid_sys_get_hwcfg+0xd4>)
    397a:	681b      	ldr	r3, [r3, #0]
    397c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3980:	d002      	beq.n	3988 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3982:	4b32      	ldr	r3, [pc, #200]	; (3a4c <grid_sys_get_hwcfg+0xd4>)
    3984:	6818      	ldr	r0, [r3, #0]
    3986:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    398c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    398e:	4b30      	ldr	r3, [pc, #192]	; (3a50 <grid_sys_get_hwcfg+0xd8>)
    3990:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3998:	492e      	ldr	r1, [pc, #184]	; (3a54 <grid_sys_get_hwcfg+0xdc>)
    399a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    399e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    39a2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    39a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    39aa:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    39ae:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    39b2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    39b6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    39ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    39be:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    39c2:	4925      	ldr	r1, [pc, #148]	; (3a58 <grid_sys_get_hwcfg+0xe0>)
    39c4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    39c8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    39cc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    39d4:	2001      	movs	r0, #1
    39d6:	4b21      	ldr	r3, [pc, #132]	; (3a5c <grid_sys_get_hwcfg+0xe4>)
    39d8:	4798      	blx	r3
    39da:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    39dc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    39de:	4d1c      	ldr	r5, [pc, #112]	; (3a50 <grid_sys_get_hwcfg+0xd8>)
    39e0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    39e4:	4f1d      	ldr	r7, [pc, #116]	; (3a5c <grid_sys_get_hwcfg+0xe4>)
    39e6:	e00c      	b.n	3a02 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    39e8:	2e07      	cmp	r6, #7
    39ea:	d027      	beq.n	3a3c <grid_sys_get_hwcfg+0xc4>
    39ec:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    39f0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    39f4:	2001      	movs	r0, #1
    39f6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39f8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    39fc:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    39fe:	2e08      	cmp	r6, #8
    3a00:	d01c      	beq.n	3a3c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a02:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3a06:	2001      	movs	r0, #1
    3a08:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    3a0a:	a801      	add	r0, sp, #4
    3a0c:	4b14      	ldr	r3, [pc, #80]	; (3a60 <grid_sys_get_hwcfg+0xe8>)
    3a0e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a10:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a14:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a18:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3a1c:	405c      	eors	r4, r3
    3a1e:	4014      	ands	r4, r2
    3a20:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3a22:	a801      	add	r0, sp, #4
    3a24:	4b0f      	ldr	r3, [pc, #60]	; (3a64 <grid_sys_get_hwcfg+0xec>)
    3a26:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3a28:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3a2c:	d0dc      	beq.n	39e8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3a2e:	2301      	movs	r3, #1
    3a30:	40b3      	lsls	r3, r6
    3a32:	ea43 0808 	orr.w	r8, r3, r8
    3a36:	fa5f f888 	uxtb.w	r8, r8
    3a3a:	e7d5      	b.n	39e8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3a3c:	4b03      	ldr	r3, [pc, #12]	; (3a4c <grid_sys_get_hwcfg+0xd4>)
    3a3e:	f8c3 8000 	str.w	r8, [r3]
}
    3a42:	4b02      	ldr	r3, [pc, #8]	; (3a4c <grid_sys_get_hwcfg+0xd4>)
    3a44:	6818      	ldr	r0, [r3, #0]
    3a46:	b003      	add	sp, #12
    3a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a4c:	20000354 	.word	0x20000354
    3a50:	41008000 	.word	0x41008000
    3a54:	40002000 	.word	0x40002000
    3a58:	40028000 	.word	0x40028000
    3a5c:	000043d5 	.word	0x000043d5
    3a60:	00004355 	.word	0x00004355
    3a64:	00004363 	.word	0x00004363

00003a68 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a6c:	b085      	sub	sp, #20
    3a6e:	4681      	mov	r9, r0
	mod->bank_select = banknumber%4;
    3a70:	f001 0103 	and.w	r1, r1, #3
    3a74:	7241      	strb	r1, [r0, #9]
	uint32_t hwtype = grid_sys_get_hwcfg();
    3a76:	4b2c      	ldr	r3, [pc, #176]	; (3b28 <grid_sys_bank_select+0xc0>)
    3a78:	4798      	blx	r3
    3a7a:	4682      	mov	sl, r0
	for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a7c:	2500      	movs	r5, #0
			grid_led_set_min(&grid_led_state, i, 0, r/64, g/64, b/64);
    3a7e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 3b3c <grid_sys_bank_select+0xd4>
    3a82:	9503      	str	r5, [sp, #12]
	for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a84:	e01d      	b.n	3ac2 <grid_sys_bank_select+0x5a>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3a86:	27ff      	movs	r7, #255	; 0xff
    3a88:	9701      	str	r7, [sp, #4]
    3a8a:	2600      	movs	r6, #0
    3a8c:	9600      	str	r6, [sp, #0]
    3a8e:	4633      	mov	r3, r6
    3a90:	4632      	mov	r2, r6
    3a92:	4621      	mov	r1, r4
    3a94:	4825      	ldr	r0, [pc, #148]	; (3b2c <grid_sys_bank_select+0xc4>)
    3a96:	47d8      	blx	fp
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3a98:	9601      	str	r6, [sp, #4]
    3a9a:	2305      	movs	r3, #5
    3a9c:	9300      	str	r3, [sp, #0]
    3a9e:	4633      	mov	r3, r6
    3aa0:	4632      	mov	r2, r6
    3aa2:	4621      	mov	r1, r4
    3aa4:	4821      	ldr	r0, [pc, #132]	; (3b2c <grid_sys_bank_select+0xc4>)
    3aa6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3b38 <grid_sys_bank_select+0xd0>
    3aaa:	47c0      	blx	r8
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3aac:	9601      	str	r6, [sp, #4]
    3aae:	9600      	str	r6, [sp, #0]
    3ab0:	463b      	mov	r3, r7
    3ab2:	4632      	mov	r2, r6
    3ab4:	4621      	mov	r1, r4
    3ab6:	481d      	ldr	r0, [pc, #116]	; (3b2c <grid_sys_bank_select+0xc4>)
    3ab8:	4c1d      	ldr	r4, [pc, #116]	; (3b30 <grid_sys_bank_select+0xc8>)
    3aba:	47a0      	blx	r4
    3abc:	9b03      	ldr	r3, [sp, #12]
    3abe:	3301      	adds	r3, #1
    3ac0:	9303      	str	r3, [sp, #12]
    3ac2:	f89d 400c 	ldrb.w	r4, [sp, #12]
	for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3ac6:	4819      	ldr	r0, [pc, #100]	; (3b2c <grid_sys_bank_select+0xc4>)
    3ac8:	4b1a      	ldr	r3, [pc, #104]	; (3b34 <grid_sys_bank_select+0xcc>)
    3aca:	4798      	blx	r3
    3acc:	42a0      	cmp	r0, r4
    3ace:	d928      	bls.n	3b22 <grid_sys_bank_select+0xba>
		if (hwtype == GRID_MODULE_EN16_RevA){
    3ad0:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3ad4:	d0d7      	beq.n	3a86 <grid_sys_bank_select+0x1e>
			uint8_t r = mod->bank_color_r[mod->bank_select];
    3ad6:	f899 3009 	ldrb.w	r3, [r9, #9]
    3ada:	444b      	add	r3, r9
    3adc:	7a9e      	ldrb	r6, [r3, #10]
			uint8_t g = mod->bank_color_g[mod->bank_select];
    3ade:	7b9f      	ldrb	r7, [r3, #14]
			uint8_t b = mod->bank_color_b[mod->bank_select];
    3ae0:	f893 8012 	ldrb.w	r8, [r3, #18]
			grid_led_set_min(&grid_led_state, i, 0, r/64, g/64, b/64);
    3ae4:	ea4f 1398 	mov.w	r3, r8, lsr #6
    3ae8:	9301      	str	r3, [sp, #4]
    3aea:	09bb      	lsrs	r3, r7, #6
    3aec:	9300      	str	r3, [sp, #0]
    3aee:	09b3      	lsrs	r3, r6, #6
    3af0:	2200      	movs	r2, #0
    3af2:	4621      	mov	r1, r4
    3af4:	480d      	ldr	r0, [pc, #52]	; (3b2c <grid_sys_bank_select+0xc4>)
    3af6:	47d8      	blx	fp
			grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3af8:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3afc:	9301      	str	r3, [sp, #4]
    3afe:	087b      	lsrs	r3, r7, #1
    3b00:	9300      	str	r3, [sp, #0]
    3b02:	0873      	lsrs	r3, r6, #1
    3b04:	2200      	movs	r2, #0
    3b06:	4621      	mov	r1, r4
    3b08:	4808      	ldr	r0, [pc, #32]	; (3b2c <grid_sys_bank_select+0xc4>)
    3b0a:	4d0b      	ldr	r5, [pc, #44]	; (3b38 <grid_sys_bank_select+0xd0>)
    3b0c:	47a8      	blx	r5
			grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3b0e:	f8cd 8004 	str.w	r8, [sp, #4]
    3b12:	9700      	str	r7, [sp, #0]
    3b14:	4633      	mov	r3, r6
    3b16:	2200      	movs	r2, #0
    3b18:	4621      	mov	r1, r4
    3b1a:	4804      	ldr	r0, [pc, #16]	; (3b2c <grid_sys_bank_select+0xc4>)
    3b1c:	4c04      	ldr	r4, [pc, #16]	; (3b30 <grid_sys_bank_select+0xc8>)
    3b1e:	47a0      	blx	r4
    3b20:	e7cc      	b.n	3abc <grid_sys_bank_select+0x54>
}
    3b22:	b005      	add	sp, #20
    3b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b28:	00003979 	.word	0x00003979
    3b2c:	200035b0 	.word	0x200035b0
    3b30:	00001cbb 	.word	0x00001cbb
    3b34:	00001be1 	.word	0x00001be1
    3b38:	00001c71 	.word	0x00001c71
    3b3c:	00001c29 	.word	0x00001c29

00003b40 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3b40:	2903      	cmp	r1, #3
    3b42:	d009      	beq.n	3b58 <grid_msg_get_checksum+0x18>
    3b44:	1e43      	subs	r3, r0, #1
    3b46:	3904      	subs	r1, #4
    3b48:	4401      	add	r1, r0
    3b4a:	2000      	movs	r0, #0
		checksum ^= str[i];
    3b4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3b50:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3b52:	428b      	cmp	r3, r1
    3b54:	d1fa      	bne.n	3b4c <grid_msg_get_checksum+0xc>
    3b56:	4770      	bx	lr
	uint8_t checksum = 0;
    3b58:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3b5a:	4770      	bx	lr

00003b5c <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3b5c:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3b5e:	1ecb      	subs	r3, r1, #3
    3b60:	2102      	movs	r1, #2
    3b62:	4418      	add	r0, r3
    3b64:	4b01      	ldr	r3, [pc, #4]	; (3b6c <grid_msg_set_checksum+0x10>)
    3b66:	4798      	blx	r3
    3b68:	bd08      	pop	{r3, pc}
    3b6a:	bf00      	nop
    3b6c:	00003941 	.word	0x00003941

00003b70 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3b70:	b500      	push	{lr}
    3b72:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b74:	aa02      	add	r2, sp, #8
    3b76:	2300      	movs	r3, #0
    3b78:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3b7c:	2102      	movs	r1, #2
    3b7e:	3004      	adds	r0, #4
    3b80:	4b02      	ldr	r3, [pc, #8]	; (3b8c <grid_msg_get_id+0x1c>)
    3b82:	4798      	blx	r3
	
}
    3b84:	b2c0      	uxtb	r0, r0
    3b86:	b003      	add	sp, #12
    3b88:	f85d fb04 	ldr.w	pc, [sp], #4
    3b8c:	00003901 	.word	0x00003901

00003b90 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3b90:	b500      	push	{lr}
    3b92:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b94:	aa02      	add	r2, sp, #8
    3b96:	2300      	movs	r3, #0
    3b98:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3b9c:	2102      	movs	r1, #2
    3b9e:	3006      	adds	r0, #6
    3ba0:	4b02      	ldr	r3, [pc, #8]	; (3bac <grid_msg_get_dx+0x1c>)
    3ba2:	4798      	blx	r3
	
}
    3ba4:	b2c0      	uxtb	r0, r0
    3ba6:	b003      	add	sp, #12
    3ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    3bac:	00003901 	.word	0x00003901

00003bb0 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3bb0:	b500      	push	{lr}
    3bb2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3bb4:	aa02      	add	r2, sp, #8
    3bb6:	2300      	movs	r3, #0
    3bb8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3bbc:	2102      	movs	r1, #2
    3bbe:	3008      	adds	r0, #8
    3bc0:	4b02      	ldr	r3, [pc, #8]	; (3bcc <grid_msg_get_dy+0x1c>)
    3bc2:	4798      	blx	r3

}
    3bc4:	b2c0      	uxtb	r0, r0
    3bc6:	b003      	add	sp, #12
    3bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    3bcc:	00003901 	.word	0x00003901

00003bd0 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3bd0:	b500      	push	{lr}
    3bd2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3bd4:	aa02      	add	r2, sp, #8
    3bd6:	2300      	movs	r3, #0
    3bd8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3bdc:	2102      	movs	r1, #2
    3bde:	300a      	adds	r0, #10
    3be0:	4b02      	ldr	r3, [pc, #8]	; (3bec <grid_msg_get_age+0x1c>)
    3be2:	4798      	blx	r3
	
}
    3be4:	b2c0      	uxtb	r0, r0
    3be6:	b003      	add	sp, #12
    3be8:	f85d fb04 	ldr.w	pc, [sp], #4
    3bec:	00003901 	.word	0x00003901

00003bf0 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3bf0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3bf2:	460a      	mov	r2, r1
    3bf4:	2102      	movs	r1, #2
    3bf6:	3004      	adds	r0, #4
    3bf8:	4b01      	ldr	r3, [pc, #4]	; (3c00 <grid_msg_set_id+0x10>)
    3bfa:	4798      	blx	r3
    3bfc:	bd08      	pop	{r3, pc}
    3bfe:	bf00      	nop
    3c00:	00003941 	.word	0x00003941

00003c04 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3c04:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3c06:	460a      	mov	r2, r1
    3c08:	2102      	movs	r1, #2
    3c0a:	3006      	adds	r0, #6
    3c0c:	4b01      	ldr	r3, [pc, #4]	; (3c14 <grid_msg_set_dx+0x10>)
    3c0e:	4798      	blx	r3
    3c10:	bd08      	pop	{r3, pc}
    3c12:	bf00      	nop
    3c14:	00003941 	.word	0x00003941

00003c18 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3c18:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3c1a:	460a      	mov	r2, r1
    3c1c:	2102      	movs	r1, #2
    3c1e:	3008      	adds	r0, #8
    3c20:	4b01      	ldr	r3, [pc, #4]	; (3c28 <grid_msg_set_dy+0x10>)
    3c22:	4798      	blx	r3
    3c24:	bd08      	pop	{r3, pc}
    3c26:	bf00      	nop
    3c28:	00003941 	.word	0x00003941

00003c2c <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3c2c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3c2e:	460a      	mov	r2, r1
    3c30:	2102      	movs	r1, #2
    3c32:	300a      	adds	r0, #10
    3c34:	4b01      	ldr	r3, [pc, #4]	; (3c3c <grid_msg_set_age+0x10>)
    3c36:	4798      	blx	r3
    3c38:	bd08      	pop	{r3, pc}
    3c3a:	bf00      	nop
    3c3c:	00003941 	.word	0x00003941

00003c40 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3c40:	69c3      	ldr	r3, [r0, #28]
    3c42:	4299      	cmp	r1, r3
    3c44:	d00d      	beq.n	3c62 <grid_msg_find_recent+0x22>
    3c46:	2301      	movs	r3, #1
    3c48:	f003 021f 	and.w	r2, r3, #31
    3c4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3c50:	69d2      	ldr	r2, [r2, #28]
    3c52:	428a      	cmp	r2, r1
    3c54:	d007      	beq.n	3c66 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3c56:	3301      	adds	r3, #1
    3c58:	b2db      	uxtb	r3, r3
    3c5a:	2b20      	cmp	r3, #32
    3c5c:	d1f4      	bne.n	3c48 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3c5e:	2000      	movs	r0, #0
    3c60:	4770      	bx	lr
			return 1;
    3c62:	2001      	movs	r0, #1
    3c64:	4770      	bx	lr
    3c66:	2001      	movs	r0, #1
}
    3c68:	4770      	bx	lr

00003c6a <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3c6a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3c6e:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3c70:	f003 031f 	and.w	r3, r3, #31
    3c74:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3c78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3c7c:	61c1      	str	r1, [r0, #28]
    3c7e:	4770      	bx	lr

00003c80 <grid_sys_ping>:
	
}


void grid_sys_ping(struct grid_port* por){
    3c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c82:	b085      	sub	sp, #20
    3c84:	4605      	mov	r5, r0
		
		
	uint8_t length = 16;
	uint32_t hwcfg = grid_sys_get_hwcfg();
    3c86:	4b27      	ldr	r3, [pc, #156]	; (3d24 <grid_sys_ping+0xa4>)
    3c88:	4798      	blx	r3
	char message[16] = {GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction, '0','0','0','0','0','0','0','0',GRID_MSG_END_OF_TRANSMISSION,'0','0','\n'};
    3c8a:	2301      	movs	r3, #1
    3c8c:	f88d 3000 	strb.w	r3, [sp]
    3c90:	230e      	movs	r3, #14
    3c92:	f88d 3001 	strb.w	r3, [sp, #1]
    3c96:	2307      	movs	r3, #7
    3c98:	f88d 3002 	strb.w	r3, [sp, #2]
    3c9c:	7a6b      	ldrb	r3, [r5, #9]
    3c9e:	f88d 3003 	strb.w	r3, [sp, #3]
    3ca2:	2330      	movs	r3, #48	; 0x30
    3ca4:	f88d 3004 	strb.w	r3, [sp, #4]
    3ca8:	f88d 3005 	strb.w	r3, [sp, #5]
    3cac:	f88d 3006 	strb.w	r3, [sp, #6]
    3cb0:	f88d 3007 	strb.w	r3, [sp, #7]
    3cb4:	f88d 3008 	strb.w	r3, [sp, #8]
    3cb8:	f88d 3009 	strb.w	r3, [sp, #9]
    3cbc:	f88d 300a 	strb.w	r3, [sp, #10]
    3cc0:	f88d 300b 	strb.w	r3, [sp, #11]
    3cc4:	2204      	movs	r2, #4
    3cc6:	f88d 200c 	strb.w	r2, [sp, #12]
    3cca:	f88d 300d 	strb.w	r3, [sp, #13]
    3cce:	f88d 300e 	strb.w	r3, [sp, #14]
    3cd2:	230a      	movs	r3, #10
    3cd4:	f88d 300f 	strb.w	r3, [sp, #15]
	// Create the packet
	//sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,hwcfg, GRID_MSG_END_OF_TRANSMISSION);
	//length = strlen(message);
	

	grid_sys_write_hex_string_value(&message[4], 8, hwcfg);
    3cd8:	4602      	mov	r2, r0
    3cda:	2108      	movs	r1, #8
    3cdc:	a801      	add	r0, sp, #4
    3cde:	4c12      	ldr	r4, [pc, #72]	; (3d28 <grid_sys_ping+0xa8>)
    3ce0:	47a0      	blx	r4
	

	
 	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3ce2:	2110      	movs	r1, #16
    3ce4:	4668      	mov	r0, sp
    3ce6:	4b11      	ldr	r3, [pc, #68]	; (3d2c <grid_sys_ping+0xac>)
    3ce8:	4798      	blx	r3
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3cea:	4602      	mov	r2, r0
    3cec:	2102      	movs	r1, #2
    3cee:	f10d 000d 	add.w	r0, sp, #13
    3cf2:	47a0      	blx	r4
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3cf4:	f505 659b 	add.w	r5, r5, #1240	; 0x4d8
    3cf8:	2110      	movs	r1, #16
    3cfa:	4628      	mov	r0, r5
    3cfc:	4b0c      	ldr	r3, [pc, #48]	; (3d30 <grid_sys_ping+0xb0>)
    3cfe:	4798      	blx	r3
    3d00:	b168      	cbz	r0, 3d1e <grid_sys_ping+0x9e>
    3d02:	f10d 34ff 	add.w	r4, sp, #4294967295
    3d06:	f10d 070f 	add.w	r7, sp, #15
		
		for(uint16_t i = 0; i<length; i++){
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3d0a:	4e0a      	ldr	r6, [pc, #40]	; (3d34 <grid_sys_ping+0xb4>)
    3d0c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3d10:	4628      	mov	r0, r5
    3d12:	47b0      	blx	r6
		for(uint16_t i = 0; i<length; i++){
    3d14:	42bc      	cmp	r4, r7
    3d16:	d1f9      	bne.n	3d0c <grid_sys_ping+0x8c>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3d18:	4628      	mov	r0, r5
    3d1a:	4b07      	ldr	r3, [pc, #28]	; (3d38 <grid_sys_ping+0xb8>)
    3d1c:	4798      	blx	r3
	}
				
}
    3d1e:	b005      	add	sp, #20
    3d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d22:	bf00      	nop
    3d24:	00003979 	.word	0x00003979
    3d28:	00003941 	.word	0x00003941
    3d2c:	00003b41 	.word	0x00003b41
    3d30:	000011a1 	.word	0x000011a1
    3d34:	000011d1 	.word	0x000011d1
    3d38:	000011ed 	.word	0x000011ed

00003d3c <grid_ui_model_init>:
	}
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3d3c:	b538      	push	{r3, r4, r5, lr}
    3d3e:	4604      	mov	r4, r0
    3d40:	460d      	mov	r5, r1
	
	mod->report_array = malloc(len*sizeof(struct grid_ui_report));
    3d42:	0108      	lsls	r0, r1, #4
    3d44:	4b02      	ldr	r3, [pc, #8]	; (3d50 <grid_ui_model_init+0x14>)
    3d46:	4798      	blx	r3
    3d48:	6060      	str	r0, [r4, #4]
	mod->report_length = len;
    3d4a:	7025      	strb	r5, [r4, #0]
	
}
    3d4c:	bd38      	pop	{r3, r4, r5, pc}
    3d4e:	bf00      	nop
    3d50:	0000b579 	.word	0x0000b579

00003d54 <grid_ui_report_init>:

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d58:	4605      	mov	r5, r0
    3d5a:	4690      	mov	r8, r2
    3d5c:	9e08      	ldr	r6, [sp, #32]

	mod->report_array[index].changed = 0;
    3d5e:	010c      	lsls	r4, r1, #4
    3d60:	6842      	ldr	r2, [r0, #4]
    3d62:	2100      	movs	r1, #0
    3d64:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3d66:	6842      	ldr	r2, [r0, #4]
    3d68:	4422      	add	r2, r4
    3d6a:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3d6c:	6842      	ldr	r2, [r0, #4]
    3d6e:	4422      	add	r2, r4
    3d70:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    3d74:	7211      	strb	r1, [r2, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3d76:	6842      	ldr	r2, [r0, #4]
    3d78:	eb02 0904 	add.w	r9, r2, r4
    3d7c:	4618      	mov	r0, r3
    3d7e:	4f1b      	ldr	r7, [pc, #108]	; (3dec <grid_ui_report_init+0x98>)
    3d80:	47b8      	blx	r7
    3d82:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3d86:	686b      	ldr	r3, [r5, #4]
    3d88:	eb03 0904 	add.w	r9, r3, r4
    3d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d8e:	47b8      	blx	r7
    3d90:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3d94:	686a      	ldr	r2, [r5, #4]
    3d96:	4422      	add	r2, r4
    3d98:	6853      	ldr	r3, [r2, #4]
    3d9a:	b30b      	cbz	r3, 3de0 <grid_ui_report_init+0x8c>
    3d9c:	68d3      	ldr	r3, [r2, #12]
    3d9e:	b313      	cbz	r3, 3de6 <grid_ui_report_init+0x92>
		return -1;
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3da0:	7853      	ldrb	r3, [r2, #1]
    3da2:	b15b      	cbz	r3, 3dbc <grid_ui_report_init+0x68>
    3da4:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3da6:	f818 1003 	ldrb.w	r1, [r8, r3]
    3daa:	6852      	ldr	r2, [r2, #4]
    3dac:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3dae:	3301      	adds	r3, #1
    3db0:	b2db      	uxtb	r3, r3
    3db2:	686a      	ldr	r2, [r5, #4]
    3db4:	4422      	add	r2, r4
    3db6:	7851      	ldrb	r1, [r2, #1]
    3db8:	4299      	cmp	r1, r3
    3dba:	d8f4      	bhi.n	3da6 <grid_ui_report_init+0x52>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3dbc:	686a      	ldr	r2, [r5, #4]
    3dbe:	4422      	add	r2, r4
    3dc0:	7a10      	ldrb	r0, [r2, #8]
    3dc2:	b188      	cbz	r0, 3de8 <grid_ui_report_init+0x94>
    3dc4:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3dc6:	5cf1      	ldrb	r1, [r6, r3]
    3dc8:	68d2      	ldr	r2, [r2, #12]
    3dca:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3dcc:	3301      	adds	r3, #1
    3dce:	b2db      	uxtb	r3, r3
    3dd0:	686a      	ldr	r2, [r5, #4]
    3dd2:	4422      	add	r2, r4
    3dd4:	7a11      	ldrb	r1, [r2, #8]
    3dd6:	4299      	cmp	r1, r3
    3dd8:	d8f5      	bhi.n	3dc6 <grid_ui_report_init+0x72>
	}
	
	return 0;
    3dda:	2000      	movs	r0, #0
    3ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3de0:	20ff      	movs	r0, #255	; 0xff
    3de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3de6:	20ff      	movs	r0, #255	; 0xff
	
}
    3de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dec:	0000b579 	.word	0x0000b579

00003df0 <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3df0:	6843      	ldr	r3, [r0, #4]
    3df2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3df6:	7848      	ldrb	r0, [r1, #1]
    3df8:	b140      	cbz	r0, 3e0c <grid_ui_report_render+0x1c>
    3dfa:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3dfc:	6848      	ldr	r0, [r1, #4]
    3dfe:	5cc0      	ldrb	r0, [r0, r3]
    3e00:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3e02:	3301      	adds	r3, #1
    3e04:	b2db      	uxtb	r3, r3
    3e06:	7848      	ldrb	r0, [r1, #1]
    3e08:	4298      	cmp	r0, r3
    3e0a:	d8f7      	bhi.n	3dfc <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3e0c:	4770      	bx	lr

00003e0e <grid_ui_report_get_changed_flag>:

uint8_t grid_ui_report_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index].changed;
    3e0e:	6843      	ldr	r3, [r0, #4]
    3e10:	0109      	lsls	r1, r1, #4
}
    3e12:	5c58      	ldrb	r0, [r3, r1]
    3e14:	4770      	bx	lr

00003e16 <grid_ui_report_set_changed_flag>:

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3e16:	6843      	ldr	r3, [r0, #4]
    3e18:	0109      	lsls	r1, r1, #4
    3e1a:	2201      	movs	r2, #1
    3e1c:	545a      	strb	r2, [r3, r1]
    3e1e:	4770      	bx	lr

00003e20 <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3e20:	6843      	ldr	r3, [r0, #4]
    3e22:	0109      	lsls	r1, r1, #4
    3e24:	2200      	movs	r2, #0
    3e26:	545a      	strb	r2, [r3, r1]
    3e28:	4770      	bx	lr
	...

00003e2c <grid_port_process_ui>:
	if (por->cooldown > 15){
    3e2c:	6803      	ldr	r3, [r0, #0]
    3e2e:	2b0f      	cmp	r3, #15
    3e30:	d829      	bhi.n	3e86 <grid_port_process_ui+0x5a>
void grid_port_process_ui(struct grid_port* por){
    3e32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e36:	b0cb      	sub	sp, #300	; 0x12c
	else if (por->cooldown>0){
    3e38:	b10b      	cbz	r3, 3e3e <grid_port_process_ui+0x12>
		por->cooldown--;
    3e3a:	3b01      	subs	r3, #1
    3e3c:	6003      	str	r3, [r0, #0]
    3e3e:	4607      	mov	r7, r0
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    3e40:	4b4c      	ldr	r3, [pc, #304]	; (3f74 <grid_port_process_ui+0x148>)
    3e42:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
	uint8_t age = grid_sys_state.age;
    3e46:	781b      	ldrb	r3, [r3, #0]
	sprintf(&message[length],
    3e48:	2117      	movs	r1, #23
    3e4a:	9105      	str	r1, [sp, #20]
    3e4c:	9304      	str	r3, [sp, #16]
    3e4e:	237f      	movs	r3, #127	; 0x7f
    3e50:	9303      	str	r3, [sp, #12]
    3e52:	9302      	str	r3, [sp, #8]
    3e54:	9201      	str	r2, [sp, #4]
    3e56:	2300      	movs	r3, #0
    3e58:	9300      	str	r3, [sp, #0]
    3e5a:	230f      	movs	r3, #15
    3e5c:	2201      	movs	r2, #1
    3e5e:	4946      	ldr	r1, [pc, #280]	; (3f78 <grid_port_process_ui+0x14c>)
    3e60:	a80a      	add	r0, sp, #40	; 0x28
    3e62:	4c46      	ldr	r4, [pc, #280]	; (3f7c <grid_port_process_ui+0x150>)
    3e64:	47a0      	blx	r4
	length += strlen(&message[length]);
    3e66:	a80a      	add	r0, sp, #40	; 0x28
    3e68:	4b45      	ldr	r3, [pc, #276]	; (3f80 <grid_port_process_ui+0x154>)
    3e6a:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3e6c:	4b45      	ldr	r3, [pc, #276]	; (3f84 <grid_port_process_ui+0x158>)
    3e6e:	781b      	ldrb	r3, [r3, #0]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d034      	beq.n	3ede <grid_port_process_ui+0xb2>
    3e74:	4605      	mov	r5, r0
    3e76:	2400      	movs	r4, #0
    3e78:	46a0      	mov	r8, r4
		CRITICAL_SECTION_ENTER()
    3e7a:	f8df a138 	ldr.w	sl, [pc, #312]	; 3fb4 <grid_port_process_ui+0x188>
	return mod->report_array[index].changed;
    3e7e:	4e41      	ldr	r6, [pc, #260]	; (3f84 <grid_port_process_ui+0x158>)
		CRITICAL_SECTION_LEAVE()
    3e80:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3fb8 <grid_port_process_ui+0x18c>
    3e84:	e00a      	b.n	3e9c <grid_port_process_ui+0x70>
		por->cooldown--;
    3e86:	3b01      	subs	r3, #1
    3e88:	6003      	str	r3, [r0, #0]
    3e8a:	4770      	bx	lr
		CRITICAL_SECTION_LEAVE()
    3e8c:	a807      	add	r0, sp, #28
    3e8e:	47c8      	blx	r9
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3e90:	3401      	adds	r4, #1
    3e92:	b2e4      	uxtb	r4, r4
    3e94:	7833      	ldrb	r3, [r6, #0]
    3e96:	b2db      	uxtb	r3, r3
    3e98:	42a3      	cmp	r3, r4
    3e9a:	d91d      	bls.n	3ed8 <grid_port_process_ui+0xac>
		if (length>200){
    3e9c:	2dc8      	cmp	r5, #200	; 0xc8
    3e9e:	d8f7      	bhi.n	3e90 <grid_port_process_ui+0x64>
		CRITICAL_SECTION_ENTER()
    3ea0:	a807      	add	r0, sp, #28
    3ea2:	47d0      	blx	sl
	return mod->report_array[index].changed;
    3ea4:	6872      	ldr	r2, [r6, #4]
    3ea6:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    3ea8:	5cd3      	ldrb	r3, [r2, r3]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d0ee      	beq.n	3e8c <grid_port_process_ui+0x60>
			packetvalid++;
    3eae:	f108 0801 	add.w	r8, r8, #1
    3eb2:	fa5f f888 	uxtb.w	r8, r8
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    3eb6:	ab0a      	add	r3, sp, #40	; 0x28
    3eb8:	eb03 0b05 	add.w	fp, r3, r5
    3ebc:	465a      	mov	r2, fp
    3ebe:	4621      	mov	r1, r4
    3ec0:	4630      	mov	r0, r6
    3ec2:	4b31      	ldr	r3, [pc, #196]	; (3f88 <grid_port_process_ui+0x15c>)
    3ec4:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    3ec6:	4621      	mov	r1, r4
    3ec8:	4630      	mov	r0, r6
    3eca:	4b30      	ldr	r3, [pc, #192]	; (3f8c <grid_port_process_ui+0x160>)
    3ecc:	4798      	blx	r3
			length += strlen(&message[length]);
    3ece:	4658      	mov	r0, fp
    3ed0:	4b2b      	ldr	r3, [pc, #172]	; (3f80 <grid_port_process_ui+0x154>)
    3ed2:	4798      	blx	r3
    3ed4:	4405      	add	r5, r0
    3ed6:	e7d9      	b.n	3e8c <grid_port_process_ui+0x60>
	if (packetvalid){
    3ed8:	f1b8 0f00 	cmp.w	r8, #0
    3edc:	d102      	bne.n	3ee4 <grid_port_process_ui+0xb8>
}
    3ede:	b04b      	add	sp, #300	; 0x12c
    3ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		por->cooldown += (10+por->cooldown);
    3ee4:	683b      	ldr	r3, [r7, #0]
    3ee6:	005b      	lsls	r3, r3, #1
    3ee8:	330a      	adds	r3, #10
    3eea:	603b      	str	r3, [r7, #0]
		grid_sys_state.next_broadcast_message_id++;
    3eec:	4a21      	ldr	r2, [pc, #132]	; (3f74 <grid_port_process_ui+0x148>)
    3eee:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    3ef2:	3301      	adds	r3, #1
    3ef4:	b2db      	uxtb	r3, r3
    3ef6:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    3efa:	ac0a      	add	r4, sp, #40	; 0x28
    3efc:	1966      	adds	r6, r4, r5
    3efe:	2204      	movs	r2, #4
    3f00:	4923      	ldr	r1, [pc, #140]	; (3f90 <grid_port_process_ui+0x164>)
    3f02:	4630      	mov	r0, r6
    3f04:	4f1d      	ldr	r7, [pc, #116]	; (3f7c <grid_port_process_ui+0x150>)
    3f06:	47b8      	blx	r7
		length += strlen(&message[length]);
    3f08:	4630      	mov	r0, r6
    3f0a:	4e1d      	ldr	r6, [pc, #116]	; (3f80 <grid_port_process_ui+0x154>)
    3f0c:	47b0      	blx	r6
    3f0e:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    3f10:	462a      	mov	r2, r5
    3f12:	4920      	ldr	r1, [pc, #128]	; (3f94 <grid_port_process_ui+0x168>)
    3f14:	a808      	add	r0, sp, #32
    3f16:	47b8      	blx	r7
		message[2] = length_string[0];
    3f18:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3f1c:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    3f1e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3f22:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    3f24:	4b1c      	ldr	r3, [pc, #112]	; (3f98 <grid_port_process_ui+0x16c>)
    3f26:	6818      	ldr	r0, [r3, #0]
    3f28:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    3f2a:	1960      	adds	r0, r4, r5
    3f2c:	47b0      	blx	r6
    3f2e:	4405      	add	r5, r0
		uint8_t checksum = grid_msg_get_checksum(message, length);
    3f30:	4629      	mov	r1, r5
    3f32:	4620      	mov	r0, r4
    3f34:	4b19      	ldr	r3, [pc, #100]	; (3f9c <grid_port_process_ui+0x170>)
    3f36:	4798      	blx	r3
		grid_msg_set_checksum(message, length, checksum);
    3f38:	b2c2      	uxtb	r2, r0
    3f3a:	4629      	mov	r1, r5
    3f3c:	4620      	mov	r0, r4
    3f3e:	4b18      	ldr	r3, [pc, #96]	; (3fa0 <grid_port_process_ui+0x174>)
    3f40:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    3f42:	b2a9      	uxth	r1, r5
    3f44:	4817      	ldr	r0, [pc, #92]	; (3fa4 <grid_port_process_ui+0x178>)
    3f46:	4b18      	ldr	r3, [pc, #96]	; (3fa8 <grid_port_process_ui+0x17c>)
    3f48:	4798      	blx	r3
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d0c7      	beq.n	3ede <grid_port_process_ui+0xb2>
			for(uint32_t i = 0; i<length; i++){
    3f4e:	b16d      	cbz	r5, 3f6c <grid_port_process_ui+0x140>
    3f50:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    3f54:	ab4a      	add	r3, sp, #296	; 0x128
    3f56:	441d      	add	r5, r3
    3f58:	f2a5 1501 	subw	r5, r5, #257	; 0x101
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    3f5c:	4f11      	ldr	r7, [pc, #68]	; (3fa4 <grid_port_process_ui+0x178>)
    3f5e:	4e13      	ldr	r6, [pc, #76]	; (3fac <grid_port_process_ui+0x180>)
    3f60:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3f64:	4638      	mov	r0, r7
    3f66:	47b0      	blx	r6
			for(uint32_t i = 0; i<length; i++){
    3f68:	42a5      	cmp	r5, r4
    3f6a:	d1f9      	bne.n	3f60 <grid_port_process_ui+0x134>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    3f6c:	480d      	ldr	r0, [pc, #52]	; (3fa4 <grid_port_process_ui+0x178>)
    3f6e:	4b10      	ldr	r3, [pc, #64]	; (3fb0 <grid_port_process_ui+0x184>)
    3f70:	4798      	blx	r3
    3f72:	e7b4      	b.n	3ede <grid_port_process_ui+0xb2>
    3f74:	20001ca4 	.word	0x20001ca4
    3f78:	0000bfcc 	.word	0x0000bfcc
    3f7c:	0000b729 	.word	0x0000b729
    3f80:	0000b771 	.word	0x0000b771
    3f84:	20001c98 	.word	0x20001c98
    3f88:	00003df1 	.word	0x00003df1
    3f8c:	00003e21 	.word	0x00003e21
    3f90:	0000bfe4 	.word	0x0000bfe4
    3f94:	0000bfe8 	.word	0x0000bfe8
    3f98:	0000bff0 	.word	0x0000bff0
    3f9c:	00003b41 	.word	0x00003b41
    3fa0:	00003b5d 	.word	0x00003b5d
    3fa4:	20001c78 	.word	0x20001c78
    3fa8:	000011a1 	.word	0x000011a1
    3fac:	000011d1 	.word	0x000011d1
    3fb0:	000011ed 	.word	0x000011ed
    3fb4:	00004355 	.word	0x00004355
    3fb8:	00004363 	.word	0x00004363

00003fbc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    3fbc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    3fbe:	6983      	ldr	r3, [r0, #24]
    3fc0:	b103      	cbz	r3, 3fc4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    3fc2:	4798      	blx	r3
    3fc4:	bd08      	pop	{r3, pc}

00003fc6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    3fc6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    3fc8:	69c3      	ldr	r3, [r0, #28]
    3fca:	b103      	cbz	r3, 3fce <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    3fcc:	4798      	blx	r3
    3fce:	bd08      	pop	{r3, pc}

00003fd0 <adc_async_channel_conversion_done>:
{
    3fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fd4:	4606      	mov	r6, r0
    3fd6:	460f      	mov	r7, r1
    3fd8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    3fda:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3fdc:	5c5c      	ldrb	r4, [r3, r1]
    3fde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3fe2:	00e4      	lsls	r4, r4, #3
    3fe4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    3fe8:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    3fec:	f105 0a04 	add.w	sl, r5, #4
    3ff0:	b2d1      	uxtb	r1, r2
    3ff2:	4650      	mov	r0, sl
    3ff4:	4b0c      	ldr	r3, [pc, #48]	; (4028 <adc_async_channel_conversion_done+0x58>)
    3ff6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    3ff8:	4630      	mov	r0, r6
    3ffa:	4b0c      	ldr	r3, [pc, #48]	; (402c <adc_async_channel_conversion_done+0x5c>)
    3ffc:	4798      	blx	r3
    3ffe:	2801      	cmp	r0, #1
    4000:	d907      	bls.n	4012 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4002:	ea4f 2119 	mov.w	r1, r9, lsr #8
    4006:	4650      	mov	r0, sl
    4008:	4b07      	ldr	r3, [pc, #28]	; (4028 <adc_async_channel_conversion_done+0x58>)
    400a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    400c:	8aab      	ldrh	r3, [r5, #20]
    400e:	3301      	adds	r3, #1
    4010:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4012:	8aab      	ldrh	r3, [r5, #20]
    4014:	3301      	adds	r3, #1
    4016:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4018:	f858 3004 	ldr.w	r3, [r8, r4]
    401c:	b113      	cbz	r3, 4024 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    401e:	4639      	mov	r1, r7
    4020:	4630      	mov	r0, r6
    4022:	4798      	blx	r3
    4024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4028:	00005781 	.word	0x00005781
    402c:	00005b07 	.word	0x00005b07

00004030 <adc_async_init>:
{
    4030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4034:	4689      	mov	r9, r1
    4036:	4616      	mov	r6, r2
    4038:	461c      	mov	r4, r3
    403a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    403e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4040:	4607      	mov	r7, r0
    4042:	b140      	cbz	r0, 4056 <adc_async_init+0x26>
    4044:	b149      	cbz	r1, 405a <adc_async_init+0x2a>
    4046:	b152      	cbz	r2, 405e <adc_async_init+0x2e>
    4048:	f1b8 0f00 	cmp.w	r8, #0
    404c:	d009      	beq.n	4062 <adc_async_init+0x32>
    404e:	1c28      	adds	r0, r5, #0
    4050:	bf18      	it	ne
    4052:	2001      	movne	r0, #1
    4054:	e006      	b.n	4064 <adc_async_init+0x34>
    4056:	2000      	movs	r0, #0
    4058:	e004      	b.n	4064 <adc_async_init+0x34>
    405a:	2000      	movs	r0, #0
    405c:	e002      	b.n	4064 <adc_async_init+0x34>
    405e:	2000      	movs	r0, #0
    4060:	e000      	b.n	4064 <adc_async_init+0x34>
    4062:	2000      	movs	r0, #0
    4064:	f8df b064 	ldr.w	fp, [pc, #100]	; 40cc <adc_async_init+0x9c>
    4068:	223f      	movs	r2, #63	; 0x3f
    406a:	4659      	mov	r1, fp
    406c:	f8df a060 	ldr.w	sl, [pc, #96]	; 40d0 <adc_async_init+0xa0>
    4070:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    4072:	1c60      	adds	r0, r4, #1
    4074:	2240      	movs	r2, #64	; 0x40
    4076:	4659      	mov	r1, fp
    4078:	4580      	cmp	r8, r0
    407a:	bfcc      	ite	gt
    407c:	2000      	movgt	r0, #0
    407e:	2001      	movle	r0, #1
    4080:	47d0      	blx	sl
	device = &descr->device;
    4082:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    4084:	21ff      	movs	r1, #255	; 0xff
    4086:	b2da      	uxtb	r2, r3
    4088:	54b1      	strb	r1, [r6, r2]
    408a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    408c:	b2da      	uxtb	r2, r3
    408e:	42a2      	cmp	r2, r4
    4090:	d9f9      	bls.n	4086 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    4092:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    4094:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    4098:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    409c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    409e:	4649      	mov	r1, r9
    40a0:	4638      	mov	r0, r7
    40a2:	4b06      	ldr	r3, [pc, #24]	; (40bc <adc_async_init+0x8c>)
    40a4:	4798      	blx	r3
	if (init_status) {
    40a6:	4603      	mov	r3, r0
    40a8:	b928      	cbnz	r0, 40b6 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    40aa:	4a05      	ldr	r2, [pc, #20]	; (40c0 <adc_async_init+0x90>)
    40ac:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    40ae:	4a05      	ldr	r2, [pc, #20]	; (40c4 <adc_async_init+0x94>)
    40b0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    40b2:	4a05      	ldr	r2, [pc, #20]	; (40c8 <adc_async_init+0x98>)
    40b4:	607a      	str	r2, [r7, #4]
}
    40b6:	4618      	mov	r0, r3
    40b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40bc:	000059d5 	.word	0x000059d5
    40c0:	00003fd1 	.word	0x00003fd1
    40c4:	00003fbd 	.word	0x00003fbd
    40c8:	00003fc7 	.word	0x00003fc7
    40cc:	0000bff4 	.word	0x0000bff4
    40d0:	00005645 	.word	0x00005645

000040d4 <adc_async_register_channel_buffer>:
{
    40d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40d8:	460e      	mov	r6, r1
    40da:	4617      	mov	r7, r2
    40dc:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    40de:	4605      	mov	r5, r0
    40e0:	2800      	cmp	r0, #0
    40e2:	d040      	beq.n	4166 <adc_async_register_channel_buffer+0x92>
    40e4:	2a00      	cmp	r2, #0
    40e6:	d040      	beq.n	416a <adc_async_register_channel_buffer+0x96>
    40e8:	1c18      	adds	r0, r3, #0
    40ea:	bf18      	it	ne
    40ec:	2001      	movne	r0, #1
    40ee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4188 <adc_async_register_channel_buffer+0xb4>
    40f2:	2266      	movs	r2, #102	; 0x66
    40f4:	4649      	mov	r1, r9
    40f6:	4c22      	ldr	r4, [pc, #136]	; (4180 <adc_async_register_channel_buffer+0xac>)
    40f8:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    40fa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    40fe:	2267      	movs	r2, #103	; 0x67
    4100:	4649      	mov	r1, r9
    4102:	42b0      	cmp	r0, r6
    4104:	bf34      	ite	cc
    4106:	2000      	movcc	r0, #0
    4108:	2001      	movcs	r0, #1
    410a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    410c:	6a29      	ldr	r1, [r5, #32]
    410e:	5d8b      	ldrb	r3, [r1, r6]
    4110:	2bff      	cmp	r3, #255	; 0xff
    4112:	d12c      	bne.n	416e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4114:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4118:	2300      	movs	r3, #0
    411a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    411c:	b2da      	uxtb	r2, r3
    411e:	5c8a      	ldrb	r2, [r1, r2]
    4120:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4122:	bf1c      	itt	ne
    4124:	3401      	addne	r4, #1
    4126:	b2e4      	uxtbne	r4, r4
    4128:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    412a:	b2da      	uxtb	r2, r3
    412c:	4282      	cmp	r2, r0
    412e:	d9f5      	bls.n	411c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4130:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4134:	42a3      	cmp	r3, r4
    4136:	d31d      	bcc.n	4174 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4138:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    413c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4140:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4142:	4448      	add	r0, r9
    4144:	4642      	mov	r2, r8
    4146:	4639      	mov	r1, r7
    4148:	3004      	adds	r0, #4
    414a:	4b0e      	ldr	r3, [pc, #56]	; (4184 <adc_async_register_channel_buffer+0xb0>)
    414c:	4798      	blx	r3
    414e:	4602      	mov	r2, r0
    4150:	b998      	cbnz	r0, 417a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    4152:	6a2b      	ldr	r3, [r5, #32]
    4154:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    4156:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4158:	4499      	add	r9, r3
    415a:	2300      	movs	r3, #0
    415c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    4160:	4610      	mov	r0, r2
    4162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4166:	2000      	movs	r0, #0
    4168:	e7c1      	b.n	40ee <adc_async_register_channel_buffer+0x1a>
    416a:	2000      	movs	r0, #0
    416c:	e7bf      	b.n	40ee <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    416e:	f06f 020c 	mvn.w	r2, #12
    4172:	e7f5      	b.n	4160 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    4174:	f06f 021b 	mvn.w	r2, #27
    4178:	e7f2      	b.n	4160 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    417a:	f06f 020c 	mvn.w	r2, #12
    417e:	e7ef      	b.n	4160 <adc_async_register_channel_buffer+0x8c>
    4180:	00005645 	.word	0x00005645
    4184:	000056ed 	.word	0x000056ed
    4188:	0000bff4 	.word	0x0000bff4

0000418c <adc_async_enable_channel>:
{
    418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    418e:	460d      	mov	r5, r1
	ASSERT(descr);
    4190:	4f0b      	ldr	r7, [pc, #44]	; (41c0 <adc_async_enable_channel+0x34>)
    4192:	4604      	mov	r4, r0
    4194:	2283      	movs	r2, #131	; 0x83
    4196:	4639      	mov	r1, r7
    4198:	3000      	adds	r0, #0
    419a:	bf18      	it	ne
    419c:	2001      	movne	r0, #1
    419e:	4e09      	ldr	r6, [pc, #36]	; (41c4 <adc_async_enable_channel+0x38>)
    41a0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    41a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    41a6:	2284      	movs	r2, #132	; 0x84
    41a8:	4639      	mov	r1, r7
    41aa:	42a8      	cmp	r0, r5
    41ac:	bf34      	ite	cc
    41ae:	2000      	movcc	r0, #0
    41b0:	2001      	movcs	r0, #1
    41b2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    41b4:	4629      	mov	r1, r5
    41b6:	4620      	mov	r0, r4
    41b8:	4b03      	ldr	r3, [pc, #12]	; (41c8 <adc_async_enable_channel+0x3c>)
    41ba:	4798      	blx	r3
}
    41bc:	2000      	movs	r0, #0
    41be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41c0:	0000bff4 	.word	0x0000bff4
    41c4:	00005645 	.word	0x00005645
    41c8:	00005af1 	.word	0x00005af1

000041cc <adc_async_register_callback>:
{
    41cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41d0:	460e      	mov	r6, r1
    41d2:	4614      	mov	r4, r2
    41d4:	4699      	mov	r9, r3
	ASSERT(descr);
    41d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4248 <adc_async_register_callback+0x7c>
    41da:	4605      	mov	r5, r0
    41dc:	229c      	movs	r2, #156	; 0x9c
    41de:	4641      	mov	r1, r8
    41e0:	3000      	adds	r0, #0
    41e2:	bf18      	it	ne
    41e4:	2001      	movne	r0, #1
    41e6:	4f16      	ldr	r7, [pc, #88]	; (4240 <adc_async_register_callback+0x74>)
    41e8:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    41ea:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    41ee:	229d      	movs	r2, #157	; 0x9d
    41f0:	4641      	mov	r1, r8
    41f2:	42b0      	cmp	r0, r6
    41f4:	bf34      	ite	cc
    41f6:	2000      	movcc	r0, #0
    41f8:	2001      	movcs	r0, #1
    41fa:	47b8      	blx	r7
	switch (type) {
    41fc:	2c01      	cmp	r4, #1
    41fe:	d019      	beq.n	4234 <adc_async_register_callback+0x68>
    4200:	b12c      	cbz	r4, 420e <adc_async_register_callback+0x42>
    4202:	2c02      	cmp	r4, #2
    4204:	d019      	beq.n	423a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    4206:	f06f 000c 	mvn.w	r0, #12
}
    420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    420e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4210:	5d9b      	ldrb	r3, [r3, r6]
    4212:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4218:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    421c:	f119 0300 	adds.w	r3, r9, #0
    4220:	bf18      	it	ne
    4222:	2301      	movne	r3, #1
    4224:	4622      	mov	r2, r4
    4226:	4631      	mov	r1, r6
    4228:	4628      	mov	r0, r5
    422a:	4c06      	ldr	r4, [pc, #24]	; (4244 <adc_async_register_callback+0x78>)
    422c:	47a0      	blx	r4
	return ERR_NONE;
    422e:	2000      	movs	r0, #0
    4230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4234:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4238:	e7f0      	b.n	421c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    423a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    423e:	e7ed      	b.n	421c <adc_async_register_callback+0x50>
    4240:	00005645 	.word	0x00005645
    4244:	00005b2f 	.word	0x00005b2f
    4248:	0000bff4 	.word	0x0000bff4

0000424c <adc_async_read_channel>:
{
    424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4250:	b083      	sub	sp, #12
    4252:	4688      	mov	r8, r1
    4254:	4691      	mov	r9, r2
    4256:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    4258:	4604      	mov	r4, r0
    425a:	2800      	cmp	r0, #0
    425c:	d04f      	beq.n	42fe <adc_async_read_channel+0xb2>
    425e:	2a00      	cmp	r2, #0
    4260:	d04f      	beq.n	4302 <adc_async_read_channel+0xb6>
    4262:	1c18      	adds	r0, r3, #0
    4264:	bf18      	it	ne
    4266:	2001      	movne	r0, #1
    4268:	4f29      	ldr	r7, [pc, #164]	; (4310 <adc_async_read_channel+0xc4>)
    426a:	22bc      	movs	r2, #188	; 0xbc
    426c:	4639      	mov	r1, r7
    426e:	4e29      	ldr	r6, [pc, #164]	; (4314 <adc_async_read_channel+0xc8>)
    4270:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4272:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4276:	22bd      	movs	r2, #189	; 0xbd
    4278:	4639      	mov	r1, r7
    427a:	4540      	cmp	r0, r8
    427c:	bf34      	ite	cc
    427e:	2000      	movcc	r0, #0
    4280:	2001      	movcs	r0, #1
    4282:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    4284:	4620      	mov	r0, r4
    4286:	4b24      	ldr	r3, [pc, #144]	; (4318 <adc_async_read_channel+0xcc>)
    4288:	4798      	blx	r3
	ASSERT(!(length % data_size));
    428a:	fb95 f3f0 	sdiv	r3, r5, r0
    428e:	fb03 5010 	mls	r0, r3, r0, r5
    4292:	22bf      	movs	r2, #191	; 0xbf
    4294:	4639      	mov	r1, r7
    4296:	fab0 f080 	clz	r0, r0
    429a:	0940      	lsrs	r0, r0, #5
    429c:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    429e:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    42a0:	f813 b008 	ldrb.w	fp, [r3, r8]
    42a4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    42a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42aa:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    42ae:	a801      	add	r0, sp, #4
    42b0:	4b1a      	ldr	r3, [pc, #104]	; (431c <adc_async_read_channel+0xd0>)
    42b2:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    42b4:	f10b 0a04 	add.w	sl, fp, #4
    42b8:	4650      	mov	r0, sl
    42ba:	4b19      	ldr	r3, [pc, #100]	; (4320 <adc_async_read_channel+0xd4>)
    42bc:	4798      	blx	r3
    42be:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    42c0:	a801      	add	r0, sp, #4
    42c2:	4b18      	ldr	r3, [pc, #96]	; (4324 <adc_async_read_channel+0xd8>)
    42c4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    42c6:	f1b8 0f00 	cmp.w	r8, #0
    42ca:	d01c      	beq.n	4306 <adc_async_read_channel+0xba>
    42cc:	b1ed      	cbz	r5, 430a <adc_async_read_channel+0xbe>
    42ce:	3d01      	subs	r5, #1
    42d0:	b2ad      	uxth	r5, r5
    42d2:	3502      	adds	r5, #2
    42d4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    42d6:	4f14      	ldr	r7, [pc, #80]	; (4328 <adc_async_read_channel+0xdc>)
    42d8:	b2a6      	uxth	r6, r4
    42da:	1e61      	subs	r1, r4, #1
    42dc:	4449      	add	r1, r9
    42de:	4650      	mov	r0, sl
    42e0:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    42e2:	4544      	cmp	r4, r8
    42e4:	d002      	beq.n	42ec <adc_async_read_channel+0xa0>
    42e6:	3401      	adds	r4, #1
    42e8:	42ac      	cmp	r4, r5
    42ea:	d1f5      	bne.n	42d8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    42ec:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    42f0:	1b9b      	subs	r3, r3, r6
    42f2:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    42f6:	4630      	mov	r0, r6
    42f8:	b003      	add	sp, #12
    42fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    42fe:	2000      	movs	r0, #0
    4300:	e7b2      	b.n	4268 <adc_async_read_channel+0x1c>
    4302:	2000      	movs	r0, #0
    4304:	e7b0      	b.n	4268 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4306:	2600      	movs	r6, #0
    4308:	e7f0      	b.n	42ec <adc_async_read_channel+0xa0>
    430a:	2600      	movs	r6, #0
    430c:	e7ee      	b.n	42ec <adc_async_read_channel+0xa0>
    430e:	bf00      	nop
    4310:	0000bff4 	.word	0x0000bff4
    4314:	00005645 	.word	0x00005645
    4318:	00005b07 	.word	0x00005b07
    431c:	00004355 	.word	0x00004355
    4320:	000057c1 	.word	0x000057c1
    4324:	00004363 	.word	0x00004363
    4328:	0000573d 	.word	0x0000573d

0000432c <adc_async_start_conversion>:
{
    432c:	b510      	push	{r4, lr}
	ASSERT(descr);
    432e:	4604      	mov	r4, r0
    4330:	22d6      	movs	r2, #214	; 0xd6
    4332:	4905      	ldr	r1, [pc, #20]	; (4348 <adc_async_start_conversion+0x1c>)
    4334:	3000      	adds	r0, #0
    4336:	bf18      	it	ne
    4338:	2001      	movne	r0, #1
    433a:	4b04      	ldr	r3, [pc, #16]	; (434c <adc_async_start_conversion+0x20>)
    433c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    433e:	4620      	mov	r0, r4
    4340:	4b03      	ldr	r3, [pc, #12]	; (4350 <adc_async_start_conversion+0x24>)
    4342:	4798      	blx	r3
}
    4344:	2000      	movs	r0, #0
    4346:	bd10      	pop	{r4, pc}
    4348:	0000bff4 	.word	0x0000bff4
    434c:	00005645 	.word	0x00005645
    4350:	00005b19 	.word	0x00005b19

00004354 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4354:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4358:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    435a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    435c:	f3bf 8f5f 	dmb	sy
    4360:	4770      	bx	lr

00004362 <atomic_leave_critical>:
    4362:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4366:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4368:	f383 8810 	msr	PRIMASK, r3
    436c:	4770      	bx	lr
	...

00004370 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4370:	b538      	push	{r3, r4, r5, lr}
    4372:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4374:	4605      	mov	r5, r0
    4376:	b158      	cbz	r0, 4390 <crc_sync_init+0x20>
    4378:	1c08      	adds	r0, r1, #0
    437a:	bf18      	it	ne
    437c:	2001      	movne	r0, #1
    437e:	222b      	movs	r2, #43	; 0x2b
    4380:	4904      	ldr	r1, [pc, #16]	; (4394 <crc_sync_init+0x24>)
    4382:	4b05      	ldr	r3, [pc, #20]	; (4398 <crc_sync_init+0x28>)
    4384:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4386:	4621      	mov	r1, r4
    4388:	4628      	mov	r0, r5
    438a:	4b04      	ldr	r3, [pc, #16]	; (439c <crc_sync_init+0x2c>)
    438c:	4798      	blx	r3
}
    438e:	bd38      	pop	{r3, r4, r5, pc}
    4390:	2000      	movs	r0, #0
    4392:	e7f4      	b.n	437e <crc_sync_init+0xe>
    4394:	0000c010 	.word	0x0000c010
    4398:	00005645 	.word	0x00005645
    439c:	00005f19 	.word	0x00005f19

000043a0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    43a0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    43a2:	4b02      	ldr	r3, [pc, #8]	; (43ac <delay_init+0xc>)
    43a4:	6018      	str	r0, [r3, #0]
    43a6:	4b02      	ldr	r3, [pc, #8]	; (43b0 <delay_init+0x10>)
    43a8:	4798      	blx	r3
    43aa:	bd08      	pop	{r3, pc}
    43ac:	20000658 	.word	0x20000658
    43b0:	000077d5 	.word	0x000077d5

000043b4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    43b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    43b6:	4b04      	ldr	r3, [pc, #16]	; (43c8 <delay_us+0x14>)
    43b8:	681c      	ldr	r4, [r3, #0]
    43ba:	4b04      	ldr	r3, [pc, #16]	; (43cc <delay_us+0x18>)
    43bc:	4798      	blx	r3
    43be:	4601      	mov	r1, r0
    43c0:	4620      	mov	r0, r4
    43c2:	4b03      	ldr	r3, [pc, #12]	; (43d0 <delay_us+0x1c>)
    43c4:	4798      	blx	r3
    43c6:	bd10      	pop	{r4, pc}
    43c8:	20000658 	.word	0x20000658
    43cc:	00005bdd 	.word	0x00005bdd
    43d0:	000077e9 	.word	0x000077e9

000043d4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    43d4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    43d6:	4b04      	ldr	r3, [pc, #16]	; (43e8 <delay_ms+0x14>)
    43d8:	681c      	ldr	r4, [r3, #0]
    43da:	4b04      	ldr	r3, [pc, #16]	; (43ec <delay_ms+0x18>)
    43dc:	4798      	blx	r3
    43de:	4601      	mov	r1, r0
    43e0:	4620      	mov	r0, r4
    43e2:	4b03      	ldr	r3, [pc, #12]	; (43f0 <delay_ms+0x1c>)
    43e4:	4798      	blx	r3
    43e6:	bd10      	pop	{r4, pc}
    43e8:	20000658 	.word	0x20000658
    43ec:	00005be5 	.word	0x00005be5
    43f0:	000077e9 	.word	0x000077e9

000043f4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    43f4:	b508      	push	{r3, lr}
	return _event_system_init();
    43f6:	4b01      	ldr	r3, [pc, #4]	; (43fc <event_system_init+0x8>)
    43f8:	4798      	blx	r3
}
    43fa:	bd08      	pop	{r3, pc}
    43fc:	00005f21 	.word	0x00005f21

00004400 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4400:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4402:	6943      	ldr	r3, [r0, #20]
    4404:	b103      	cbz	r3, 4408 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4406:	4798      	blx	r3
    4408:	bd08      	pop	{r3, pc}

0000440a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    440a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    440c:	6983      	ldr	r3, [r0, #24]
    440e:	b103      	cbz	r3, 4412 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4410:	4798      	blx	r3
    4412:	bd08      	pop	{r3, pc}

00004414 <flash_is_address_aligned>:
{
    4414:	b538      	push	{r3, r4, r5, lr}
    4416:	460c      	mov	r4, r1
	ASSERT(flash);
    4418:	4605      	mov	r5, r0
    441a:	f240 1217 	movw	r2, #279	; 0x117
    441e:	4908      	ldr	r1, [pc, #32]	; (4440 <flash_is_address_aligned+0x2c>)
    4420:	3000      	adds	r0, #0
    4422:	bf18      	it	ne
    4424:	2001      	movne	r0, #1
    4426:	4b07      	ldr	r3, [pc, #28]	; (4444 <flash_is_address_aligned+0x30>)
    4428:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    442a:	4628      	mov	r0, r5
    442c:	4b06      	ldr	r3, [pc, #24]	; (4448 <flash_is_address_aligned+0x34>)
    442e:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    4430:	3801      	subs	r0, #1
    4432:	4020      	ands	r0, r4
	return ERR_NONE;
    4434:	2800      	cmp	r0, #0
}
    4436:	bf14      	ite	ne
    4438:	f06f 000d 	mvnne.w	r0, #13
    443c:	2000      	moveq	r0, #0
    443e:	bd38      	pop	{r3, r4, r5, pc}
    4440:	0000c02c 	.word	0x0000c02c
    4444:	00005645 	.word	0x00005645
    4448:	000060a5 	.word	0x000060a5

0000444c <flash_init>:
{
    444c:	b538      	push	{r3, r4, r5, lr}
    444e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4450:	4604      	mov	r4, r0
    4452:	b190      	cbz	r0, 447a <flash_init+0x2e>
    4454:	1c08      	adds	r0, r1, #0
    4456:	bf18      	it	ne
    4458:	2001      	movne	r0, #1
    445a:	2238      	movs	r2, #56	; 0x38
    445c:	4908      	ldr	r1, [pc, #32]	; (4480 <flash_init+0x34>)
    445e:	4b09      	ldr	r3, [pc, #36]	; (4484 <flash_init+0x38>)
    4460:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4462:	4629      	mov	r1, r5
    4464:	4620      	mov	r0, r4
    4466:	4b08      	ldr	r3, [pc, #32]	; (4488 <flash_init+0x3c>)
    4468:	4798      	blx	r3
	if (rc) {
    446a:	4603      	mov	r3, r0
    446c:	b918      	cbnz	r0, 4476 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    446e:	4a07      	ldr	r2, [pc, #28]	; (448c <flash_init+0x40>)
    4470:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4472:	4a07      	ldr	r2, [pc, #28]	; (4490 <flash_init+0x44>)
    4474:	6062      	str	r2, [r4, #4]
}
    4476:	4618      	mov	r0, r3
    4478:	bd38      	pop	{r3, r4, r5, pc}
    447a:	2000      	movs	r0, #0
    447c:	e7ed      	b.n	445a <flash_init+0xe>
    447e:	bf00      	nop
    4480:	0000c02c 	.word	0x0000c02c
    4484:	00005645 	.word	0x00005645
    4488:	0000602d 	.word	0x0000602d
    448c:	00004401 	.word	0x00004401
    4490:	0000440b 	.word	0x0000440b

00004494 <flash_lock>:
{
    4494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4498:	460f      	mov	r7, r1
    449a:	4616      	mov	r6, r2
	ASSERT(flash && page_nums);
    449c:	4604      	mov	r4, r0
    449e:	b320      	cbz	r0, 44ea <flash_lock+0x56>
    44a0:	b35a      	cbz	r2, 44fa <flash_lock+0x66>
    44a2:	2001      	movs	r0, #1
    44a4:	22cb      	movs	r2, #203	; 0xcb
    44a6:	4920      	ldr	r1, [pc, #128]	; (4528 <flash_lock+0x94>)
    44a8:	4b20      	ldr	r3, [pc, #128]	; (452c <flash_lock+0x98>)
    44aa:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    44ac:	46a1      	mov	r9, r4
    44ae:	4620      	mov	r0, r4
    44b0:	4b1f      	ldr	r3, [pc, #124]	; (4530 <flash_lock+0x9c>)
    44b2:	4798      	blx	r3
    44b4:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    44b6:	4620      	mov	r0, r4
    44b8:	4b1e      	ldr	r3, [pc, #120]	; (4534 <flash_lock+0xa0>)
    44ba:	4798      	blx	r3
    44bc:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    44be:	4639      	mov	r1, r7
    44c0:	4620      	mov	r0, r4
    44c2:	4b1d      	ldr	r3, [pc, #116]	; (4538 <flash_lock+0xa4>)
    44c4:	4798      	blx	r3
	if (rc) {
    44c6:	4603      	mov	r3, r0
    44c8:	b960      	cbnz	r0, 44e4 <flash_lock+0x50>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    44ca:	4546      	cmp	r6, r8
    44cc:	d80f      	bhi.n	44ee <flash_lock+0x5a>
    44ce:	fbb7 f5f5 	udiv	r5, r7, r5
    44d2:	4435      	add	r5, r6
    44d4:	4545      	cmp	r5, r8
    44d6:	d80d      	bhi.n	44f4 <flash_lock+0x60>
	return _flash_lock(&flash->dev, dst_addr, page_nums);
    44d8:	4632      	mov	r2, r6
    44da:	4639      	mov	r1, r7
    44dc:	4648      	mov	r0, r9
    44de:	4b17      	ldr	r3, [pc, #92]	; (453c <flash_lock+0xa8>)
    44e0:	4798      	blx	r3
    44e2:	4603      	mov	r3, r0
}
    44e4:	4618      	mov	r0, r3
    44e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && page_nums);
    44ea:	2000      	movs	r0, #0
    44ec:	e7da      	b.n	44a4 <flash_lock+0x10>
		return ERR_INVALID_ARG;
    44ee:	f06f 030c 	mvn.w	r3, #12
    44f2:	e7f7      	b.n	44e4 <flash_lock+0x50>
    44f4:	f06f 030c 	mvn.w	r3, #12
    44f8:	e7f4      	b.n	44e4 <flash_lock+0x50>
	ASSERT(flash && page_nums);
    44fa:	22cb      	movs	r2, #203	; 0xcb
    44fc:	490a      	ldr	r1, [pc, #40]	; (4528 <flash_lock+0x94>)
    44fe:	2000      	movs	r0, #0
    4500:	4b0a      	ldr	r3, [pc, #40]	; (452c <flash_lock+0x98>)
    4502:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    4504:	46a1      	mov	r9, r4
    4506:	4620      	mov	r0, r4
    4508:	4b09      	ldr	r3, [pc, #36]	; (4530 <flash_lock+0x9c>)
    450a:	4798      	blx	r3
    450c:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    450e:	4620      	mov	r0, r4
    4510:	4b08      	ldr	r3, [pc, #32]	; (4534 <flash_lock+0xa0>)
    4512:	4798      	blx	r3
    4514:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    4516:	4639      	mov	r1, r7
    4518:	4620      	mov	r0, r4
    451a:	4b07      	ldr	r3, [pc, #28]	; (4538 <flash_lock+0xa4>)
    451c:	4798      	blx	r3
	if (rc) {
    451e:	4603      	mov	r3, r0
    4520:	2800      	cmp	r0, #0
    4522:	d0d4      	beq.n	44ce <flash_lock+0x3a>
    4524:	e7de      	b.n	44e4 <flash_lock+0x50>
    4526:	bf00      	nop
    4528:	0000c02c 	.word	0x0000c02c
    452c:	00005645 	.word	0x00005645
    4530:	000060a5 	.word	0x000060a5
    4534:	000060ab 	.word	0x000060ab
    4538:	00004415 	.word	0x00004415
    453c:	000060b3 	.word	0x000060b3

00004540 <flash_get_total_pages>:
{
    4540:	b510      	push	{r4, lr}
	ASSERT(flash);
    4542:	4604      	mov	r4, r0
    4544:	f44f 7280 	mov.w	r2, #256	; 0x100
    4548:	4904      	ldr	r1, [pc, #16]	; (455c <flash_get_total_pages+0x1c>)
    454a:	3000      	adds	r0, #0
    454c:	bf18      	it	ne
    454e:	2001      	movne	r0, #1
    4550:	4b03      	ldr	r3, [pc, #12]	; (4560 <flash_get_total_pages+0x20>)
    4552:	4798      	blx	r3
	return _flash_get_total_pages(&flash->dev);
    4554:	4620      	mov	r0, r4
    4556:	4b03      	ldr	r3, [pc, #12]	; (4564 <flash_get_total_pages+0x24>)
    4558:	4798      	blx	r3
}
    455a:	bd10      	pop	{r4, pc}
    455c:	0000c02c 	.word	0x0000c02c
    4560:	00005645 	.word	0x00005645
    4564:	000060ab 	.word	0x000060ab

00004568 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4568:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    456a:	8843      	ldrh	r3, [r0, #2]
    456c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4570:	d102      	bne.n	4578 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4572:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4574:	b103      	cbz	r3, 4578 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    4576:	4798      	blx	r3
    4578:	bd08      	pop	{r3, pc}

0000457a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    457a:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    457c:	8843      	ldrh	r3, [r0, #2]
    457e:	f413 7f80 	tst.w	r3, #256	; 0x100
    4582:	d102      	bne.n	458a <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4584:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4586:	b103      	cbz	r3, 458a <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    4588:	4798      	blx	r3
    458a:	bd08      	pop	{r3, pc}

0000458c <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    458c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    458e:	8843      	ldrh	r3, [r0, #2]
    4590:	f413 7f80 	tst.w	r3, #256	; 0x100
    4594:	d102      	bne.n	459c <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4596:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4598:	b103      	cbz	r3, 459c <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    459a:	4798      	blx	r3
    459c:	bd08      	pop	{r3, pc}
	...

000045a0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    45a0:	b510      	push	{r4, lr}
    45a2:	b084      	sub	sp, #16
    45a4:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    45a6:	8a83      	ldrh	r3, [r0, #20]
    45a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    45ac:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    45ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    45b2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    45b6:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    45b8:	a901      	add	r1, sp, #4
    45ba:	3828      	subs	r0, #40	; 0x28
    45bc:	4b03      	ldr	r3, [pc, #12]	; (45cc <i2c_m_async_write+0x2c>)
    45be:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    45c0:	2800      	cmp	r0, #0
    45c2:	bf08      	it	eq
    45c4:	4620      	moveq	r0, r4
    45c6:	b004      	add	sp, #16
    45c8:	bd10      	pop	{r4, pc}
    45ca:	bf00      	nop
    45cc:	00006cd5 	.word	0x00006cd5

000045d0 <i2c_m_async_read>:
{
    45d0:	b510      	push	{r4, lr}
    45d2:	b084      	sub	sp, #16
    45d4:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    45d6:	8a83      	ldrh	r3, [r0, #20]
    45d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    45dc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    45de:	f248 0301 	movw	r3, #32769	; 0x8001
    45e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    45e6:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    45e8:	a901      	add	r1, sp, #4
    45ea:	3828      	subs	r0, #40	; 0x28
    45ec:	4b03      	ldr	r3, [pc, #12]	; (45fc <i2c_m_async_read+0x2c>)
    45ee:	4798      	blx	r3
}
    45f0:	2800      	cmp	r0, #0
    45f2:	bf08      	it	eq
    45f4:	4620      	moveq	r0, r4
    45f6:	b004      	add	sp, #16
    45f8:	bd10      	pop	{r4, pc}
    45fa:	bf00      	nop
    45fc:	00006cd5 	.word	0x00006cd5

00004600 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4600:	b570      	push	{r4, r5, r6, lr}
    4602:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4604:	4604      	mov	r4, r0
    4606:	2289      	movs	r2, #137	; 0x89
    4608:	490f      	ldr	r1, [pc, #60]	; (4648 <i2c_m_async_init+0x48>)
    460a:	3000      	adds	r0, #0
    460c:	bf18      	it	ne
    460e:	2001      	movne	r0, #1
    4610:	4b0e      	ldr	r3, [pc, #56]	; (464c <i2c_m_async_init+0x4c>)
    4612:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4614:	4629      	mov	r1, r5
    4616:	4620      	mov	r0, r4
    4618:	4b0d      	ldr	r3, [pc, #52]	; (4650 <i2c_m_async_init+0x50>)
    461a:	4798      	blx	r3
	if (init_status) {
    461c:	4605      	mov	r5, r0
    461e:	b108      	cbz	r0, 4624 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4620:	4628      	mov	r0, r5
    4622:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4624:	4b0b      	ldr	r3, [pc, #44]	; (4654 <i2c_m_async_init+0x54>)
    4626:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4628:	4b0b      	ldr	r3, [pc, #44]	; (4658 <i2c_m_async_init+0x58>)
    462a:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    462c:	4a0b      	ldr	r2, [pc, #44]	; (465c <i2c_m_async_init+0x5c>)
    462e:	2101      	movs	r1, #1
    4630:	4620      	mov	r0, r4
    4632:	4e0b      	ldr	r6, [pc, #44]	; (4660 <i2c_m_async_init+0x60>)
    4634:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4636:	4a0b      	ldr	r2, [pc, #44]	; (4664 <i2c_m_async_init+0x64>)
    4638:	2102      	movs	r1, #2
    463a:	4620      	mov	r0, r4
    463c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    463e:	4a0a      	ldr	r2, [pc, #40]	; (4668 <i2c_m_async_init+0x68>)
    4640:	2100      	movs	r1, #0
    4642:	4620      	mov	r0, r4
    4644:	47b0      	blx	r6
	return ERR_NONE;
    4646:	e7eb      	b.n	4620 <i2c_m_async_init+0x20>
    4648:	0000c044 	.word	0x0000c044
    464c:	00005645 	.word	0x00005645
    4650:	00006c55 	.word	0x00006c55
    4654:	000045d1 	.word	0x000045d1
    4658:	000045a1 	.word	0x000045a1
    465c:	00004569 	.word	0x00004569
    4660:	00006e05 	.word	0x00006e05
    4664:	0000457b 	.word	0x0000457b
    4668:	0000458d 	.word	0x0000458d

0000466c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	460d      	mov	r5, r1
    4670:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4672:	4604      	mov	r4, r0
    4674:	b160      	cbz	r0, 4690 <io_write+0x24>
    4676:	1c08      	adds	r0, r1, #0
    4678:	bf18      	it	ne
    467a:	2001      	movne	r0, #1
    467c:	2234      	movs	r2, #52	; 0x34
    467e:	4905      	ldr	r1, [pc, #20]	; (4694 <io_write+0x28>)
    4680:	4b05      	ldr	r3, [pc, #20]	; (4698 <io_write+0x2c>)
    4682:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4684:	6823      	ldr	r3, [r4, #0]
    4686:	4632      	mov	r2, r6
    4688:	4629      	mov	r1, r5
    468a:	4620      	mov	r0, r4
    468c:	4798      	blx	r3
}
    468e:	bd70      	pop	{r4, r5, r6, pc}
    4690:	2000      	movs	r0, #0
    4692:	e7f3      	b.n	467c <io_write+0x10>
    4694:	0000c064 	.word	0x0000c064
    4698:	00005645 	.word	0x00005645

0000469c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469e:	460f      	mov	r7, r1
    46a0:	4616      	mov	r6, r2
	ASSERT(io);
    46a2:	4604      	mov	r4, r0
    46a4:	f240 1227 	movw	r2, #295	; 0x127
    46a8:	4909      	ldr	r1, [pc, #36]	; (46d0 <_spi_m_async_io_write+0x34>)
    46aa:	3000      	adds	r0, #0
    46ac:	bf18      	it	ne
    46ae:	2001      	movne	r0, #1
    46b0:	4b08      	ldr	r3, [pc, #32]	; (46d4 <_spi_m_async_io_write+0x38>)
    46b2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    46b4:	2500      	movs	r5, #0
    46b6:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    46b8:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    46ba:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    46bc:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    46be:	2310      	movs	r3, #16
    46c0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    46c2:	2101      	movs	r1, #1
    46c4:	f1a4 0020 	sub.w	r0, r4, #32
    46c8:	4b03      	ldr	r3, [pc, #12]	; (46d8 <_spi_m_async_io_write+0x3c>)
    46ca:	4798      	blx	r3

	return ERR_NONE;
}
    46cc:	4628      	mov	r0, r5
    46ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d0:	0000c078 	.word	0x0000c078
    46d4:	00005645 	.word	0x00005645
    46d8:	000072e9 	.word	0x000072e9

000046dc <_spi_m_async_io_read>:
{
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	460d      	mov	r5, r1
    46e0:	4616      	mov	r6, r2
	ASSERT(io);
    46e2:	4604      	mov	r4, r0
    46e4:	f240 1205 	movw	r2, #261	; 0x105
    46e8:	490c      	ldr	r1, [pc, #48]	; (471c <_spi_m_async_io_read+0x40>)
    46ea:	3000      	adds	r0, #0
    46ec:	bf18      	it	ne
    46ee:	2001      	movne	r0, #1
    46f0:	4b0b      	ldr	r3, [pc, #44]	; (4720 <_spi_m_async_io_read+0x44>)
    46f2:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    46f4:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    46f6:	2500      	movs	r5, #0
    46f8:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    46fa:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    46fc:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    46fe:	2310      	movs	r3, #16
    4700:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4702:	3c20      	subs	r4, #32
    4704:	2101      	movs	r1, #1
    4706:	4620      	mov	r0, r4
    4708:	4b06      	ldr	r3, [pc, #24]	; (4724 <_spi_m_async_io_read+0x48>)
    470a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    470c:	f240 11ff 	movw	r1, #511	; 0x1ff
    4710:	4620      	mov	r0, r4
    4712:	4b05      	ldr	r3, [pc, #20]	; (4728 <_spi_m_async_io_read+0x4c>)
    4714:	4798      	blx	r3
}
    4716:	4628      	mov	r0, r5
    4718:	bd70      	pop	{r4, r5, r6, pc}
    471a:	bf00      	nop
    471c:	0000c078 	.word	0x0000c078
    4720:	00005645 	.word	0x00005645
    4724:	0000731d 	.word	0x0000731d
    4728:	00007399 	.word	0x00007399

0000472c <_spi_dev_error>:
{
    472c:	b570      	push	{r4, r5, r6, lr}
    472e:	4604      	mov	r4, r0
    4730:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4732:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4734:	2100      	movs	r1, #0
    4736:	4b09      	ldr	r3, [pc, #36]	; (475c <_spi_dev_error+0x30>)
    4738:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    473a:	2100      	movs	r1, #0
    473c:	4620      	mov	r0, r4
    473e:	4b08      	ldr	r3, [pc, #32]	; (4760 <_spi_dev_error+0x34>)
    4740:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4742:	2100      	movs	r1, #0
    4744:	4620      	mov	r0, r4
    4746:	4b07      	ldr	r3, [pc, #28]	; (4764 <_spi_dev_error+0x38>)
    4748:	4798      	blx	r3
	spi->stat = 0;
    474a:	2300      	movs	r3, #0
    474c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4750:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4752:	b113      	cbz	r3, 475a <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4754:	4631      	mov	r1, r6
    4756:	4628      	mov	r0, r5
    4758:	4798      	blx	r3
    475a:	bd70      	pop	{r4, r5, r6, pc}
    475c:	000072e9 	.word	0x000072e9
    4760:	0000731d 	.word	0x0000731d
    4764:	0000735d 	.word	0x0000735d

00004768 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4768:	6c02      	ldr	r2, [r0, #64]	; 0x40
    476a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    476c:	429a      	cmp	r2, r3
    476e:	d200      	bcs.n	4772 <_spi_dev_complete+0xa>
    4770:	4770      	bx	lr
{
    4772:	b510      	push	{r4, lr}
    4774:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4776:	2100      	movs	r1, #0
    4778:	4b04      	ldr	r3, [pc, #16]	; (478c <_spi_dev_complete+0x24>)
    477a:	4798      	blx	r3
		spi->stat = 0;
    477c:	2300      	movs	r3, #0
    477e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4784:	b10b      	cbz	r3, 478a <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4786:	1f20      	subs	r0, r4, #4
    4788:	4798      	blx	r3
    478a:	bd10      	pop	{r4, pc}
    478c:	0000735d 	.word	0x0000735d

00004790 <_spi_dev_tx>:
{
    4790:	b510      	push	{r4, lr}
    4792:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4794:	7903      	ldrb	r3, [r0, #4]
    4796:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4798:	6b42      	ldr	r2, [r0, #52]	; 0x34
    479a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    479c:	f103 0101 	add.w	r1, r3, #1
    47a0:	6401      	str	r1, [r0, #64]	; 0x40
    47a2:	bf94      	ite	ls
    47a4:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    47a6:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    47aa:	4b08      	ldr	r3, [pc, #32]	; (47cc <_spi_dev_tx+0x3c>)
    47ac:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    47ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
    47b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    47b2:	429a      	cmp	r2, r3
    47b4:	d000      	beq.n	47b8 <_spi_dev_tx+0x28>
    47b6:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    47b8:	2100      	movs	r1, #0
    47ba:	4620      	mov	r0, r4
    47bc:	4b04      	ldr	r3, [pc, #16]	; (47d0 <_spi_dev_tx+0x40>)
    47be:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    47c0:	2101      	movs	r1, #1
    47c2:	4620      	mov	r0, r4
    47c4:	4b03      	ldr	r3, [pc, #12]	; (47d4 <_spi_dev_tx+0x44>)
    47c6:	4798      	blx	r3
}
    47c8:	e7f5      	b.n	47b6 <_spi_dev_tx+0x26>
    47ca:	bf00      	nop
    47cc:	00007399 	.word	0x00007399
    47d0:	000072e9 	.word	0x000072e9
    47d4:	0000735d 	.word	0x0000735d

000047d8 <_spi_dev_rx>:
{
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    47dc:	6b85      	ldr	r5, [r0, #56]	; 0x38
    47de:	b305      	cbz	r5, 4822 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    47e0:	7903      	ldrb	r3, [r0, #4]
    47e2:	2b01      	cmp	r3, #1
    47e4:	d916      	bls.n	4814 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    47e6:	6c06      	ldr	r6, [r0, #64]	; 0x40
    47e8:	1c73      	adds	r3, r6, #1
    47ea:	6403      	str	r3, [r0, #64]	; 0x40
    47ec:	4b18      	ldr	r3, [pc, #96]	; (4850 <_spi_dev_rx+0x78>)
    47ee:	4798      	blx	r3
    47f0:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    47f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    47f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    47f8:	4293      	cmp	r3, r2
    47fa:	d21d      	bcs.n	4838 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    47fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    47fe:	b1b2      	cbz	r2, 482e <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4800:	7921      	ldrb	r1, [r4, #4]
    4802:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4804:	bf94      	ite	ls
    4806:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4808:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    480c:	4620      	mov	r0, r4
    480e:	4b11      	ldr	r3, [pc, #68]	; (4854 <_spi_dev_rx+0x7c>)
    4810:	4798      	blx	r3
    4812:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4814:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4816:	1c73      	adds	r3, r6, #1
    4818:	6403      	str	r3, [r0, #64]	; 0x40
    481a:	4b0d      	ldr	r3, [pc, #52]	; (4850 <_spi_dev_rx+0x78>)
    481c:	4798      	blx	r3
    481e:	55a8      	strb	r0, [r5, r6]
    4820:	e7e8      	b.n	47f4 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4822:	4b0b      	ldr	r3, [pc, #44]	; (4850 <_spi_dev_rx+0x78>)
    4824:	4798      	blx	r3
		spi->xfercnt++;
    4826:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4828:	3301      	adds	r3, #1
    482a:	6423      	str	r3, [r4, #64]	; 0x40
    482c:	e7e2      	b.n	47f4 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    482e:	88e1      	ldrh	r1, [r4, #6]
    4830:	4620      	mov	r0, r4
    4832:	4b08      	ldr	r3, [pc, #32]	; (4854 <_spi_dev_rx+0x7c>)
    4834:	4798      	blx	r3
    4836:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4838:	2100      	movs	r1, #0
    483a:	4620      	mov	r0, r4
    483c:	4b06      	ldr	r3, [pc, #24]	; (4858 <_spi_dev_rx+0x80>)
    483e:	4798      	blx	r3
		spi->stat = 0;
    4840:	2300      	movs	r3, #0
    4842:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4848:	b10b      	cbz	r3, 484e <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    484a:	1f20      	subs	r0, r4, #4
    484c:	4798      	blx	r3
    484e:	bd70      	pop	{r4, r5, r6, pc}
    4850:	000073c9 	.word	0x000073c9
    4854:	00007399 	.word	0x00007399
    4858:	0000731d 	.word	0x0000731d

0000485c <spi_m_async_init>:
{
    485c:	b570      	push	{r4, r5, r6, lr}
    485e:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4860:	4606      	mov	r6, r0
    4862:	b330      	cbz	r0, 48b2 <spi_m_async_init+0x56>
    4864:	1c08      	adds	r0, r1, #0
    4866:	bf18      	it	ne
    4868:	2001      	movne	r0, #1
    486a:	22a5      	movs	r2, #165	; 0xa5
    486c:	4912      	ldr	r1, [pc, #72]	; (48b8 <spi_m_async_init+0x5c>)
    486e:	4b13      	ldr	r3, [pc, #76]	; (48bc <spi_m_async_init+0x60>)
    4870:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4872:	4634      	mov	r4, r6
    4874:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4878:	4629      	mov	r1, r5
    487a:	4620      	mov	r0, r4
    487c:	4b10      	ldr	r3, [pc, #64]	; (48c0 <spi_m_async_init+0x64>)
    487e:	4798      	blx	r3
	if (rc >= 0) {
    4880:	2800      	cmp	r0, #0
    4882:	db15      	blt.n	48b0 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4884:	4a0f      	ldr	r2, [pc, #60]	; (48c4 <spi_m_async_init+0x68>)
    4886:	2100      	movs	r1, #0
    4888:	4620      	mov	r0, r4
    488a:	4d0f      	ldr	r5, [pc, #60]	; (48c8 <spi_m_async_init+0x6c>)
    488c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    488e:	4a0f      	ldr	r2, [pc, #60]	; (48cc <spi_m_async_init+0x70>)
    4890:	2101      	movs	r1, #1
    4892:	4620      	mov	r0, r4
    4894:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4896:	4a0e      	ldr	r2, [pc, #56]	; (48d0 <spi_m_async_init+0x74>)
    4898:	2102      	movs	r1, #2
    489a:	4620      	mov	r0, r4
    489c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    489e:	4a0d      	ldr	r2, [pc, #52]	; (48d4 <spi_m_async_init+0x78>)
    48a0:	2103      	movs	r1, #3
    48a2:	4620      	mov	r0, r4
    48a4:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    48a6:	4b0c      	ldr	r3, [pc, #48]	; (48d8 <spi_m_async_init+0x7c>)
    48a8:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    48aa:	4b0c      	ldr	r3, [pc, #48]	; (48dc <spi_m_async_init+0x80>)
    48ac:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    48ae:	2000      	movs	r0, #0
}
    48b0:	bd70      	pop	{r4, r5, r6, pc}
    48b2:	2000      	movs	r0, #0
    48b4:	e7d9      	b.n	486a <spi_m_async_init+0xe>
    48b6:	bf00      	nop
    48b8:	0000c078 	.word	0x0000c078
    48bc:	00005645 	.word	0x00005645
    48c0:	000071e1 	.word	0x000071e1
    48c4:	00004791 	.word	0x00004791
    48c8:	000073f5 	.word	0x000073f5
    48cc:	000047d9 	.word	0x000047d9
    48d0:	00004769 	.word	0x00004769
    48d4:	0000472d 	.word	0x0000472d
    48d8:	000046dd 	.word	0x000046dd
    48dc:	0000469d 	.word	0x0000469d

000048e0 <spi_m_async_enable>:
{
    48e0:	b510      	push	{r4, lr}
	ASSERT(spi);
    48e2:	4604      	mov	r4, r0
    48e4:	22c1      	movs	r2, #193	; 0xc1
    48e6:	4905      	ldr	r1, [pc, #20]	; (48fc <spi_m_async_enable+0x1c>)
    48e8:	3000      	adds	r0, #0
    48ea:	bf18      	it	ne
    48ec:	2001      	movne	r0, #1
    48ee:	4b04      	ldr	r3, [pc, #16]	; (4900 <spi_m_async_enable+0x20>)
    48f0:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    48f2:	1d20      	adds	r0, r4, #4
    48f4:	4b03      	ldr	r3, [pc, #12]	; (4904 <spi_m_async_enable+0x24>)
    48f6:	4798      	blx	r3
    48f8:	bd10      	pop	{r4, pc}
    48fa:	bf00      	nop
    48fc:	0000c078 	.word	0x0000c078
    4900:	00005645 	.word	0x00005645
    4904:	00007249 	.word	0x00007249

00004908 <spi_m_async_set_baudrate>:
{
    4908:	b538      	push	{r3, r4, r5, lr}
    490a:	460d      	mov	r5, r1
	ASSERT(spi);
    490c:	4604      	mov	r4, r0
    490e:	22cf      	movs	r2, #207	; 0xcf
    4910:	4909      	ldr	r1, [pc, #36]	; (4938 <spi_m_async_set_baudrate+0x30>)
    4912:	3000      	adds	r0, #0
    4914:	bf18      	it	ne
    4916:	2001      	movne	r0, #1
    4918:	4b08      	ldr	r3, [pc, #32]	; (493c <spi_m_async_set_baudrate+0x34>)
    491a:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    491c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4920:	f013 0f10 	tst.w	r3, #16
    4924:	d104      	bne.n	4930 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4926:	4629      	mov	r1, r5
    4928:	1d20      	adds	r0, r4, #4
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <spi_m_async_set_baudrate+0x38>)
    492c:	4798      	blx	r3
    492e:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4930:	f06f 0003 	mvn.w	r0, #3
}
    4934:	bd38      	pop	{r3, r4, r5, pc}
    4936:	bf00      	nop
    4938:	0000c078 	.word	0x0000c078
    493c:	00005645 	.word	0x00005645
    4940:	000072ad 	.word	0x000072ad

00004944 <spi_m_async_set_mode>:
{
    4944:	b538      	push	{r3, r4, r5, lr}
    4946:	460d      	mov	r5, r1
	ASSERT(spi);
    4948:	4604      	mov	r4, r0
    494a:	22d9      	movs	r2, #217	; 0xd9
    494c:	4909      	ldr	r1, [pc, #36]	; (4974 <spi_m_async_set_mode+0x30>)
    494e:	3000      	adds	r0, #0
    4950:	bf18      	it	ne
    4952:	2001      	movne	r0, #1
    4954:	4b08      	ldr	r3, [pc, #32]	; (4978 <spi_m_async_set_mode+0x34>)
    4956:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4958:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    495c:	f013 0f10 	tst.w	r3, #16
    4960:	d104      	bne.n	496c <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4962:	4629      	mov	r1, r5
    4964:	1d20      	adds	r0, r4, #4
    4966:	4b05      	ldr	r3, [pc, #20]	; (497c <spi_m_async_set_mode+0x38>)
    4968:	4798      	blx	r3
    496a:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    496c:	f06f 0003 	mvn.w	r0, #3
}
    4970:	bd38      	pop	{r3, r4, r5, pc}
    4972:	bf00      	nop
    4974:	0000c078 	.word	0x0000c078
    4978:	00005645 	.word	0x00005645
    497c:	00007279 	.word	0x00007279

00004980 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4982:	460d      	mov	r5, r1
    4984:	4617      	mov	r7, r2
    4986:	461e      	mov	r6, r3
	ASSERT(spi);
    4988:	4604      	mov	r4, r0
    498a:	f44f 729c 	mov.w	r2, #312	; 0x138
    498e:	4912      	ldr	r1, [pc, #72]	; (49d8 <spi_m_async_transfer+0x58>)
    4990:	3000      	adds	r0, #0
    4992:	bf18      	it	ne
    4994:	2001      	movne	r0, #1
    4996:	4b11      	ldr	r3, [pc, #68]	; (49dc <spi_m_async_transfer+0x5c>)
    4998:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    499a:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    499c:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    499e:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    49a0:	2300      	movs	r3, #0
    49a2:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    49a4:	2310      	movs	r3, #16
    49a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    49aa:	1d26      	adds	r6, r4, #4
    49ac:	2101      	movs	r1, #1
    49ae:	4630      	mov	r0, r6
    49b0:	4b0b      	ldr	r3, [pc, #44]	; (49e0 <spi_m_async_transfer+0x60>)
    49b2:	4798      	blx	r3
	if (txbuf) {
    49b4:	b15d      	cbz	r5, 49ce <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    49b6:	7a23      	ldrb	r3, [r4, #8]
    49b8:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    49ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    49bc:	bf94      	ite	ls
    49be:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    49c0:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    49c4:	4630      	mov	r0, r6
    49c6:	4b07      	ldr	r3, [pc, #28]	; (49e4 <spi_m_async_transfer+0x64>)
    49c8:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    49ca:	2000      	movs	r0, #0
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    49ce:	8961      	ldrh	r1, [r4, #10]
    49d0:	4630      	mov	r0, r6
    49d2:	4b04      	ldr	r3, [pc, #16]	; (49e4 <spi_m_async_transfer+0x64>)
    49d4:	4798      	blx	r3
    49d6:	e7f8      	b.n	49ca <spi_m_async_transfer+0x4a>
    49d8:	0000c078 	.word	0x0000c078
    49dc:	00005645 	.word	0x00005645
    49e0:	0000731d 	.word	0x0000731d
    49e4:	00007399 	.word	0x00007399

000049e8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    49e8:	b570      	push	{r4, r5, r6, lr}
    49ea:	460c      	mov	r4, r1
    49ec:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    49ee:	4605      	mov	r5, r0
    49f0:	b158      	cbz	r0, 4a0a <spi_m_async_register_callback+0x22>
    49f2:	2901      	cmp	r1, #1
    49f4:	bf8c      	ite	hi
    49f6:	2000      	movhi	r0, #0
    49f8:	2001      	movls	r0, #1
    49fa:	f240 1263 	movw	r2, #355	; 0x163
    49fe:	4908      	ldr	r1, [pc, #32]	; (4a20 <spi_m_async_register_callback+0x38>)
    4a00:	4b08      	ldr	r3, [pc, #32]	; (4a24 <spi_m_async_register_callback+0x3c>)
    4a02:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4a04:	b91c      	cbnz	r4, 4a0e <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4a06:	632e      	str	r6, [r5, #48]	; 0x30
    4a08:	bd70      	pop	{r4, r5, r6, pc}
    4a0a:	2000      	movs	r0, #0
    4a0c:	e7f5      	b.n	49fa <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4a0e:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4a10:	1c32      	adds	r2, r6, #0
    4a12:	bf18      	it	ne
    4a14:	2201      	movne	r2, #1
    4a16:	2103      	movs	r1, #3
    4a18:	1d28      	adds	r0, r5, #4
    4a1a:	4b03      	ldr	r3, [pc, #12]	; (4a28 <spi_m_async_register_callback+0x40>)
    4a1c:	4798      	blx	r3
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
    4a20:	0000c078 	.word	0x0000c078
    4a24:	00005645 	.word	0x00005645
    4a28:	00007429 	.word	0x00007429

00004a2c <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4a2c:	b538      	push	{r3, r4, r5, lr}
    4a2e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4a30:	4604      	mov	r4, r0
    4a32:	b158      	cbz	r0, 4a4c <spi_m_async_get_io_descriptor+0x20>
    4a34:	1c08      	adds	r0, r1, #0
    4a36:	bf18      	it	ne
    4a38:	2001      	movne	r0, #1
    4a3a:	f240 126f 	movw	r2, #367	; 0x16f
    4a3e:	4904      	ldr	r1, [pc, #16]	; (4a50 <spi_m_async_get_io_descriptor+0x24>)
    4a40:	4b04      	ldr	r3, [pc, #16]	; (4a54 <spi_m_async_get_io_descriptor+0x28>)
    4a42:	4798      	blx	r3
	*io = &spi->io;
    4a44:	3424      	adds	r4, #36	; 0x24
    4a46:	602c      	str	r4, [r5, #0]
	return 0;
}
    4a48:	2000      	movs	r0, #0
    4a4a:	bd38      	pop	{r3, r4, r5, pc}
    4a4c:	2000      	movs	r0, #0
    4a4e:	e7f4      	b.n	4a3a <spi_m_async_get_io_descriptor+0xe>
    4a50:	0000c078 	.word	0x0000c078
    4a54:	00005645 	.word	0x00005645

00004a58 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4a58:	b570      	push	{r4, r5, r6, lr}
    4a5a:	460d      	mov	r5, r1
    4a5c:	4616      	mov	r6, r2
	ASSERT(io);
    4a5e:	4604      	mov	r4, r0
    4a60:	2298      	movs	r2, #152	; 0x98
    4a62:	4907      	ldr	r1, [pc, #28]	; (4a80 <_spi_m_dma_io_write+0x28>)
    4a64:	3000      	adds	r0, #0
    4a66:	bf18      	it	ne
    4a68:	2001      	movne	r0, #1
    4a6a:	4b06      	ldr	r3, [pc, #24]	; (4a84 <_spi_m_dma_io_write+0x2c>)
    4a6c:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4a6e:	4633      	mov	r3, r6
    4a70:	2200      	movs	r2, #0
    4a72:	4629      	mov	r1, r5
    4a74:	f1a4 001c 	sub.w	r0, r4, #28
    4a78:	4c03      	ldr	r4, [pc, #12]	; (4a88 <_spi_m_dma_io_write+0x30>)
    4a7a:	47a0      	blx	r4
}
    4a7c:	bd70      	pop	{r4, r5, r6, pc}
    4a7e:	bf00      	nop
    4a80:	0000c098 	.word	0x0000c098
    4a84:	00005645 	.word	0x00005645
    4a88:	0000767d 	.word	0x0000767d

00004a8c <_spi_m_dma_io_read>:
{
    4a8c:	b570      	push	{r4, r5, r6, lr}
    4a8e:	460d      	mov	r5, r1
    4a90:	4616      	mov	r6, r2
	ASSERT(io);
    4a92:	4604      	mov	r4, r0
    4a94:	2281      	movs	r2, #129	; 0x81
    4a96:	4907      	ldr	r1, [pc, #28]	; (4ab4 <_spi_m_dma_io_read+0x28>)
    4a98:	3000      	adds	r0, #0
    4a9a:	bf18      	it	ne
    4a9c:	2001      	movne	r0, #1
    4a9e:	4b06      	ldr	r3, [pc, #24]	; (4ab8 <_spi_m_dma_io_read+0x2c>)
    4aa0:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4aa2:	4633      	mov	r3, r6
    4aa4:	462a      	mov	r2, r5
    4aa6:	2100      	movs	r1, #0
    4aa8:	f1a4 001c 	sub.w	r0, r4, #28
    4aac:	4c03      	ldr	r4, [pc, #12]	; (4abc <_spi_m_dma_io_read+0x30>)
    4aae:	47a0      	blx	r4
}
    4ab0:	bd70      	pop	{r4, r5, r6, pc}
    4ab2:	bf00      	nop
    4ab4:	0000c098 	.word	0x0000c098
    4ab8:	00005645 	.word	0x00005645
    4abc:	0000767d 	.word	0x0000767d

00004ac0 <spi_m_dma_init>:
{
    4ac0:	b538      	push	{r3, r4, r5, lr}
    4ac2:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4ac4:	4605      	mov	r5, r0
    4ac6:	b1a0      	cbz	r0, 4af2 <spi_m_dma_init+0x32>
    4ac8:	1c08      	adds	r0, r1, #0
    4aca:	bf18      	it	ne
    4acc:	2001      	movne	r0, #1
    4ace:	223b      	movs	r2, #59	; 0x3b
    4ad0:	4909      	ldr	r1, [pc, #36]	; (4af8 <spi_m_dma_init+0x38>)
    4ad2:	4b0a      	ldr	r3, [pc, #40]	; (4afc <spi_m_dma_init+0x3c>)
    4ad4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4ad6:	4628      	mov	r0, r5
    4ad8:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4adc:	4621      	mov	r1, r4
    4ade:	4b08      	ldr	r3, [pc, #32]	; (4b00 <spi_m_dma_init+0x40>)
    4ae0:	4798      	blx	r3
	if (rc) {
    4ae2:	4603      	mov	r3, r0
    4ae4:	b918      	cbnz	r0, 4aee <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4ae6:	4a07      	ldr	r2, [pc, #28]	; (4b04 <spi_m_dma_init+0x44>)
    4ae8:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4aea:	4a07      	ldr	r2, [pc, #28]	; (4b08 <spi_m_dma_init+0x48>)
    4aec:	622a      	str	r2, [r5, #32]
}
    4aee:	4618      	mov	r0, r3
    4af0:	bd38      	pop	{r3, r4, r5, pc}
    4af2:	2000      	movs	r0, #0
    4af4:	e7eb      	b.n	4ace <spi_m_dma_init+0xe>
    4af6:	bf00      	nop
    4af8:	0000c098 	.word	0x0000c098
    4afc:	00005645 	.word	0x00005645
    4b00:	00007461 	.word	0x00007461
    4b04:	00004a8d 	.word	0x00004a8d
    4b08:	00004a59 	.word	0x00004a59

00004b0c <spi_m_dma_enable>:
{
    4b0c:	b510      	push	{r4, lr}
	ASSERT(spi);
    4b0e:	4604      	mov	r4, r0
    4b10:	2251      	movs	r2, #81	; 0x51
    4b12:	4905      	ldr	r1, [pc, #20]	; (4b28 <spi_m_dma_enable+0x1c>)
    4b14:	3000      	adds	r0, #0
    4b16:	bf18      	it	ne
    4b18:	2001      	movne	r0, #1
    4b1a:	4b04      	ldr	r3, [pc, #16]	; (4b2c <spi_m_dma_enable+0x20>)
    4b1c:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4b1e:	1d20      	adds	r0, r4, #4
    4b20:	4b03      	ldr	r3, [pc, #12]	; (4b30 <spi_m_dma_enable+0x24>)
    4b22:	4798      	blx	r3
    4b24:	bd10      	pop	{r4, pc}
    4b26:	bf00      	nop
    4b28:	0000c098 	.word	0x0000c098
    4b2c:	00005645 	.word	0x00005645
    4b30:	000075dd 	.word	0x000075dd

00004b34 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4b34:	b570      	push	{r4, r5, r6, lr}
    4b36:	460d      	mov	r5, r1
    4b38:	4616      	mov	r6, r2
	ASSERT(spi);
    4b3a:	4604      	mov	r4, r0
    4b3c:	22a8      	movs	r2, #168	; 0xa8
    4b3e:	4906      	ldr	r1, [pc, #24]	; (4b58 <spi_m_dma_register_callback+0x24>)
    4b40:	3000      	adds	r0, #0
    4b42:	bf18      	it	ne
    4b44:	2001      	movne	r0, #1
    4b46:	4b05      	ldr	r3, [pc, #20]	; (4b5c <spi_m_dma_register_callback+0x28>)
    4b48:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4b4a:	4632      	mov	r2, r6
    4b4c:	4629      	mov	r1, r5
    4b4e:	1d20      	adds	r0, r4, #4
    4b50:	4b03      	ldr	r3, [pc, #12]	; (4b60 <spi_m_dma_register_callback+0x2c>)
    4b52:	4798      	blx	r3
    4b54:	bd70      	pop	{r4, r5, r6, pc}
    4b56:	bf00      	nop
    4b58:	0000c098 	.word	0x0000c098
    4b5c:	00005645 	.word	0x00005645
    4b60:	0000760d 	.word	0x0000760d

00004b64 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4b64:	b538      	push	{r3, r4, r5, lr}
    4b66:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4b68:	4604      	mov	r4, r0
    4b6a:	b150      	cbz	r0, 4b82 <spi_m_dma_get_io_descriptor+0x1e>
    4b6c:	1c08      	adds	r0, r1, #0
    4b6e:	bf18      	it	ne
    4b70:	2001      	movne	r0, #1
    4b72:	22ae      	movs	r2, #174	; 0xae
    4b74:	4904      	ldr	r1, [pc, #16]	; (4b88 <spi_m_dma_get_io_descriptor+0x24>)
    4b76:	4b05      	ldr	r3, [pc, #20]	; (4b8c <spi_m_dma_get_io_descriptor+0x28>)
    4b78:	4798      	blx	r3
	*io = &spi->io;
    4b7a:	3420      	adds	r4, #32
    4b7c:	602c      	str	r4, [r5, #0]

	return 0;
}
    4b7e:	2000      	movs	r0, #0
    4b80:	bd38      	pop	{r3, r4, r5, pc}
    4b82:	2000      	movs	r0, #0
    4b84:	e7f5      	b.n	4b72 <spi_m_dma_get_io_descriptor+0xe>
    4b86:	bf00      	nop
    4b88:	0000c098 	.word	0x0000c098
    4b8c:	00005645 	.word	0x00005645

00004b90 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b92:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4b94:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4b96:	b12f      	cbz	r7, 4ba4 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4b98:	688d      	ldr	r5, [r1, #8]
    4b9a:	463c      	mov	r4, r7
    4b9c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4b9e:	f1c2 0e01 	rsb	lr, r2, #1
    4ba2:	e00b      	b.n	4bbc <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4ba4:	4b0e      	ldr	r3, [pc, #56]	; (4be0 <timer_add_timer_task+0x50>)
    4ba6:	4798      	blx	r3
		return;
    4ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4baa:	4473      	add	r3, lr
    4bac:	68a0      	ldr	r0, [r4, #8]
    4bae:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4bb0:	42ab      	cmp	r3, r5
    4bb2:	d20a      	bcs.n	4bca <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4bb4:	6823      	ldr	r3, [r4, #0]
    4bb6:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4bb8:	b153      	cbz	r3, 4bd0 <timer_add_timer_task+0x40>
    4bba:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4bbc:	6863      	ldr	r3, [r4, #4]
    4bbe:	4293      	cmp	r3, r2
    4bc0:	d8f3      	bhi.n	4baa <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4bc2:	68a0      	ldr	r0, [r4, #8]
    4bc4:	4403      	add	r3, r0
    4bc6:	1a9b      	subs	r3, r3, r2
    4bc8:	e7f2      	b.n	4bb0 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4bca:	42a7      	cmp	r7, r4
    4bcc:	d004      	beq.n	4bd8 <timer_add_timer_task+0x48>
    4bce:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4bd0:	4620      	mov	r0, r4
    4bd2:	4b04      	ldr	r3, [pc, #16]	; (4be4 <timer_add_timer_task+0x54>)
    4bd4:	4798      	blx	r3
    4bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4bd8:	4660      	mov	r0, ip
    4bda:	4b01      	ldr	r3, [pc, #4]	; (4be0 <timer_add_timer_task+0x50>)
    4bdc:	4798      	blx	r3
    4bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4be0:	0000566d 	.word	0x0000566d
    4be4:	00005699 	.word	0x00005699

00004be8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4bec:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4bee:	6907      	ldr	r7, [r0, #16]
    4bf0:	3701      	adds	r7, #1
    4bf2:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4bf4:	7e03      	ldrb	r3, [r0, #24]
    4bf6:	f013 0f01 	tst.w	r3, #1
    4bfa:	d113      	bne.n	4c24 <timer_process_counted+0x3c>
    4bfc:	7e03      	ldrb	r3, [r0, #24]
    4bfe:	f013 0f02 	tst.w	r3, #2
    4c02:	d10f      	bne.n	4c24 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4c04:	b354      	cbz	r4, 4c5c <timer_process_counted+0x74>
    4c06:	6863      	ldr	r3, [r4, #4]
    4c08:	1afb      	subs	r3, r7, r3
    4c0a:	68a2      	ldr	r2, [r4, #8]
    4c0c:	4293      	cmp	r3, r2
    4c0e:	d307      	bcc.n	4c20 <timer_process_counted+0x38>
    4c10:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4c12:	f100 0814 	add.w	r8, r0, #20
    4c16:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4c60 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4c1a:	f8df a048 	ldr.w	sl, [pc, #72]	; 4c64 <timer_process_counted+0x7c>
    4c1e:	e012      	b.n	4c46 <timer_process_counted+0x5e>
    4c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4c24:	7e03      	ldrb	r3, [r0, #24]
    4c26:	f043 0302 	orr.w	r3, r3, #2
    4c2a:	7603      	strb	r3, [r0, #24]
		return;
    4c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c30:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4c32:	68e3      	ldr	r3, [r4, #12]
    4c34:	4620      	mov	r0, r4
    4c36:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4c38:	b185      	cbz	r5, 4c5c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4c3a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4c3c:	686b      	ldr	r3, [r5, #4]
    4c3e:	1afb      	subs	r3, r7, r3
    4c40:	68aa      	ldr	r2, [r5, #8]
    4c42:	4293      	cmp	r3, r2
    4c44:	d30a      	bcc.n	4c5c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4c46:	4640      	mov	r0, r8
    4c48:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4c4a:	7c23      	ldrb	r3, [r4, #16]
    4c4c:	2b01      	cmp	r3, #1
    4c4e:	d1ef      	bne.n	4c30 <timer_process_counted+0x48>
			tmp->time_label = time;
    4c50:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4c52:	463a      	mov	r2, r7
    4c54:	4621      	mov	r1, r4
    4c56:	4640      	mov	r0, r8
    4c58:	47d0      	blx	sl
    4c5a:	e7e9      	b.n	4c30 <timer_process_counted+0x48>
    4c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c60:	000056e1 	.word	0x000056e1
    4c64:	00004b91 	.word	0x00004b91

00004c68 <timer_init>:
{
    4c68:	b570      	push	{r4, r5, r6, lr}
    4c6a:	460e      	mov	r6, r1
    4c6c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4c6e:	4604      	mov	r4, r0
    4c70:	b190      	cbz	r0, 4c98 <timer_init+0x30>
    4c72:	b199      	cbz	r1, 4c9c <timer_init+0x34>
    4c74:	1c10      	adds	r0, r2, #0
    4c76:	bf18      	it	ne
    4c78:	2001      	movne	r0, #1
    4c7a:	223b      	movs	r2, #59	; 0x3b
    4c7c:	4908      	ldr	r1, [pc, #32]	; (4ca0 <timer_init+0x38>)
    4c7e:	4b09      	ldr	r3, [pc, #36]	; (4ca4 <timer_init+0x3c>)
    4c80:	4798      	blx	r3
	descr->func = func;
    4c82:	4620      	mov	r0, r4
    4c84:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4c88:	682b      	ldr	r3, [r5, #0]
    4c8a:	4631      	mov	r1, r6
    4c8c:	4798      	blx	r3
	descr->time                           = 0;
    4c8e:	2000      	movs	r0, #0
    4c90:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4c92:	4b05      	ldr	r3, [pc, #20]	; (4ca8 <timer_init+0x40>)
    4c94:	6063      	str	r3, [r4, #4]
}
    4c96:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4c98:	2000      	movs	r0, #0
    4c9a:	e7ee      	b.n	4c7a <timer_init+0x12>
    4c9c:	2000      	movs	r0, #0
    4c9e:	e7ec      	b.n	4c7a <timer_init+0x12>
    4ca0:	0000c0b4 	.word	0x0000c0b4
    4ca4:	00005645 	.word	0x00005645
    4ca8:	00004be9 	.word	0x00004be9

00004cac <timer_start>:
{
    4cac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    4cae:	4604      	mov	r4, r0
    4cb0:	b198      	cbz	r0, 4cda <timer_start+0x2e>
    4cb2:	6800      	ldr	r0, [r0, #0]
    4cb4:	3000      	adds	r0, #0
    4cb6:	bf18      	it	ne
    4cb8:	2001      	movne	r0, #1
    4cba:	2254      	movs	r2, #84	; 0x54
    4cbc:	4909      	ldr	r1, [pc, #36]	; (4ce4 <timer_start+0x38>)
    4cbe:	4b0a      	ldr	r3, [pc, #40]	; (4ce8 <timer_start+0x3c>)
    4cc0:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4cc2:	1d25      	adds	r5, r4, #4
    4cc4:	6823      	ldr	r3, [r4, #0]
    4cc6:	699b      	ldr	r3, [r3, #24]
    4cc8:	4628      	mov	r0, r5
    4cca:	4798      	blx	r3
    4ccc:	b938      	cbnz	r0, 4cde <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    4cce:	6823      	ldr	r3, [r4, #0]
    4cd0:	689b      	ldr	r3, [r3, #8]
    4cd2:	4628      	mov	r0, r5
    4cd4:	4798      	blx	r3
	return ERR_NONE;
    4cd6:	2000      	movs	r0, #0
    4cd8:	bd38      	pop	{r3, r4, r5, pc}
    4cda:	2000      	movs	r0, #0
    4cdc:	e7ed      	b.n	4cba <timer_start+0xe>
		return ERR_DENIED;
    4cde:	f06f 0010 	mvn.w	r0, #16
}
    4ce2:	bd38      	pop	{r3, r4, r5, pc}
    4ce4:	0000c0b4 	.word	0x0000c0b4
    4ce8:	00005645 	.word	0x00005645

00004cec <timer_add_task>:
{
    4cec:	b570      	push	{r4, r5, r6, lr}
    4cee:	b082      	sub	sp, #8
    4cf0:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4cf2:	4604      	mov	r4, r0
    4cf4:	b328      	cbz	r0, 4d42 <timer_add_task+0x56>
    4cf6:	b331      	cbz	r1, 4d46 <timer_add_task+0x5a>
    4cf8:	6800      	ldr	r0, [r0, #0]
    4cfa:	3000      	adds	r0, #0
    4cfc:	bf18      	it	ne
    4cfe:	2001      	movne	r0, #1
    4d00:	227b      	movs	r2, #123	; 0x7b
    4d02:	4920      	ldr	r1, [pc, #128]	; (4d84 <timer_add_task+0x98>)
    4d04:	4b20      	ldr	r3, [pc, #128]	; (4d88 <timer_add_task+0x9c>)
    4d06:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4d08:	7f23      	ldrb	r3, [r4, #28]
    4d0a:	f043 0301 	orr.w	r3, r3, #1
    4d0e:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4d10:	f104 0618 	add.w	r6, r4, #24
    4d14:	4629      	mov	r1, r5
    4d16:	4630      	mov	r0, r6
    4d18:	4b1c      	ldr	r3, [pc, #112]	; (4d8c <timer_add_task+0xa0>)
    4d1a:	4798      	blx	r3
    4d1c:	b9a8      	cbnz	r0, 4d4a <timer_add_task+0x5e>
	task->time_label = descr->time;
    4d1e:	6963      	ldr	r3, [r4, #20]
    4d20:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4d22:	6962      	ldr	r2, [r4, #20]
    4d24:	4629      	mov	r1, r5
    4d26:	4630      	mov	r0, r6
    4d28:	4b19      	ldr	r3, [pc, #100]	; (4d90 <timer_add_task+0xa4>)
    4d2a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4d2c:	7f23      	ldrb	r3, [r4, #28]
    4d2e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4d32:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4d34:	7f23      	ldrb	r3, [r4, #28]
    4d36:	f013 0f02 	tst.w	r3, #2
    4d3a:	d112      	bne.n	4d62 <timer_add_task+0x76>
	return ERR_NONE;
    4d3c:	2000      	movs	r0, #0
}
    4d3e:	b002      	add	sp, #8
    4d40:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4d42:	2000      	movs	r0, #0
    4d44:	e7dc      	b.n	4d00 <timer_add_task+0x14>
    4d46:	2000      	movs	r0, #0
    4d48:	e7da      	b.n	4d00 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4d4a:	7f23      	ldrb	r3, [r4, #28]
    4d4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4d50:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4d52:	2280      	movs	r2, #128	; 0x80
    4d54:	490b      	ldr	r1, [pc, #44]	; (4d84 <timer_add_task+0x98>)
    4d56:	2000      	movs	r0, #0
    4d58:	4b0b      	ldr	r3, [pc, #44]	; (4d88 <timer_add_task+0x9c>)
    4d5a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4d5c:	f06f 0011 	mvn.w	r0, #17
    4d60:	e7ed      	b.n	4d3e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    4d62:	a801      	add	r0, sp, #4
    4d64:	4b0b      	ldr	r3, [pc, #44]	; (4d94 <timer_add_task+0xa8>)
    4d66:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4d68:	7f23      	ldrb	r3, [r4, #28]
    4d6a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d6e:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    4d70:	6823      	ldr	r3, [r4, #0]
    4d72:	69db      	ldr	r3, [r3, #28]
    4d74:	1d20      	adds	r0, r4, #4
    4d76:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4d78:	a801      	add	r0, sp, #4
    4d7a:	4b07      	ldr	r3, [pc, #28]	; (4d98 <timer_add_task+0xac>)
    4d7c:	4798      	blx	r3
	return ERR_NONE;
    4d7e:	2000      	movs	r0, #0
    4d80:	e7dd      	b.n	4d3e <timer_add_task+0x52>
    4d82:	bf00      	nop
    4d84:	0000c0b4 	.word	0x0000c0b4
    4d88:	00005645 	.word	0x00005645
    4d8c:	0000564b 	.word	0x0000564b
    4d90:	00004b91 	.word	0x00004b91
    4d94:	00004355 	.word	0x00004355
    4d98:	00004363 	.word	0x00004363

00004d9c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    4d9c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4d9e:	2300      	movs	r3, #0
    4da0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    4da2:	69c3      	ldr	r3, [r0, #28]
    4da4:	b11b      	cbz	r3, 4dae <usart_transmission_complete+0x12>
    4da6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    4daa:	4610      	mov	r0, r2
    4dac:	4798      	blx	r3
    4dae:	bd08      	pop	{r3, pc}

00004db0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    4db0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4db2:	2300      	movs	r3, #0
    4db4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    4db6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4db8:	b11b      	cbz	r3, 4dc2 <usart_error+0x12>
    4dba:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    4dbe:	4610      	mov	r0, r2
    4dc0:	4798      	blx	r3
    4dc2:	bd08      	pop	{r3, pc}

00004dc4 <usart_fill_rx_buffer>:
{
    4dc4:	b538      	push	{r3, r4, r5, lr}
    4dc6:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    4dc8:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    4dcc:	302c      	adds	r0, #44	; 0x2c
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <usart_fill_rx_buffer+0x18>)
    4dd0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    4dd2:	6a23      	ldr	r3, [r4, #32]
    4dd4:	b10b      	cbz	r3, 4dda <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    4dd6:	4628      	mov	r0, r5
    4dd8:	4798      	blx	r3
    4dda:	bd38      	pop	{r3, r4, r5, pc}
    4ddc:	00005781 	.word	0x00005781

00004de0 <usart_async_write>:
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	460e      	mov	r6, r1
    4de4:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    4de6:	4604      	mov	r4, r0
    4de8:	b1e0      	cbz	r0, 4e24 <usart_async_write+0x44>
    4dea:	b1e9      	cbz	r1, 4e28 <usart_async_write+0x48>
    4dec:	1c10      	adds	r0, r2, #0
    4dee:	bf18      	it	ne
    4df0:	2001      	movne	r0, #1
    4df2:	f240 123b 	movw	r2, #315	; 0x13b
    4df6:	490f      	ldr	r1, [pc, #60]	; (4e34 <usart_async_write+0x54>)
    4df8:	4b0f      	ldr	r3, [pc, #60]	; (4e38 <usart_async_write+0x58>)
    4dfa:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4dfc:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4e00:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4e04:	429a      	cmp	r2, r3
    4e06:	d111      	bne.n	4e2c <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4e08:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4e0a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4e0e:	2300      	movs	r3, #0
    4e10:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4e14:	2301      	movs	r3, #1
    4e16:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4e18:	f104 0008 	add.w	r0, r4, #8
    4e1c:	4b07      	ldr	r3, [pc, #28]	; (4e3c <usart_async_write+0x5c>)
    4e1e:	4798      	blx	r3
	return (int32_t)length;
    4e20:	4628      	mov	r0, r5
    4e22:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4e24:	2000      	movs	r0, #0
    4e26:	e7e4      	b.n	4df2 <usart_async_write+0x12>
    4e28:	2000      	movs	r0, #0
    4e2a:	e7e2      	b.n	4df2 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4e2c:	f06f 001b 	mvn.w	r0, #27
}
    4e30:	bd70      	pop	{r4, r5, r6, pc}
    4e32:	bf00      	nop
    4e34:	0000c0cc 	.word	0x0000c0cc
    4e38:	00005645 	.word	0x00005645
    4e3c:	00006bd7 	.word	0x00006bd7

00004e40 <usart_process_byte_sent>:
{
    4e40:	b510      	push	{r4, lr}
    4e42:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4e44:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4e46:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4e4a:	429a      	cmp	r2, r3
    4e4c:	d009      	beq.n	4e62 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4e4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4e50:	1c59      	adds	r1, r3, #1
    4e52:	8781      	strh	r1, [r0, #60]	; 0x3c
    4e54:	5cd1      	ldrb	r1, [r2, r3]
    4e56:	4b04      	ldr	r3, [pc, #16]	; (4e68 <usart_process_byte_sent+0x28>)
    4e58:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4e5a:	4620      	mov	r0, r4
    4e5c:	4b03      	ldr	r3, [pc, #12]	; (4e6c <usart_process_byte_sent+0x2c>)
    4e5e:	4798      	blx	r3
    4e60:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4e62:	4b03      	ldr	r3, [pc, #12]	; (4e70 <usart_process_byte_sent+0x30>)
    4e64:	4798      	blx	r3
    4e66:	bd10      	pop	{r4, pc}
    4e68:	00006bd1 	.word	0x00006bd1
    4e6c:	00006bd7 	.word	0x00006bd7
    4e70:	00006bdf 	.word	0x00006bdf

00004e74 <usart_async_read>:
{
    4e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e78:	b082      	sub	sp, #8
    4e7a:	460f      	mov	r7, r1
    4e7c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    4e7e:	4606      	mov	r6, r0
    4e80:	b1a0      	cbz	r0, 4eac <usart_async_read+0x38>
    4e82:	b199      	cbz	r1, 4eac <usart_async_read+0x38>
    4e84:	2a00      	cmp	r2, #0
    4e86:	d12d      	bne.n	4ee4 <usart_async_read+0x70>
    4e88:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4e8c:	4929      	ldr	r1, [pc, #164]	; (4f34 <usart_async_read+0xc0>)
    4e8e:	2000      	movs	r0, #0
    4e90:	4b29      	ldr	r3, [pc, #164]	; (4f38 <usart_async_read+0xc4>)
    4e92:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4e94:	a801      	add	r0, sp, #4
    4e96:	4b29      	ldr	r3, [pc, #164]	; (4f3c <usart_async_read+0xc8>)
    4e98:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4e9a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    4e9e:	4b28      	ldr	r3, [pc, #160]	; (4f40 <usart_async_read+0xcc>)
    4ea0:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    4ea2:	a801      	add	r0, sp, #4
    4ea4:	4b27      	ldr	r3, [pc, #156]	; (4f44 <usart_async_read+0xd0>)
    4ea6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4ea8:	2500      	movs	r5, #0
	return (int32_t)was_read;
    4eaa:	e03e      	b.n	4f2a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4eac:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4eb0:	4920      	ldr	r1, [pc, #128]	; (4f34 <usart_async_read+0xc0>)
    4eb2:	2000      	movs	r0, #0
    4eb4:	4b20      	ldr	r3, [pc, #128]	; (4f38 <usart_async_read+0xc4>)
    4eb6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4eb8:	a801      	add	r0, sp, #4
    4eba:	4b20      	ldr	r3, [pc, #128]	; (4f3c <usart_async_read+0xc8>)
    4ebc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4ebe:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4ec2:	4650      	mov	r0, sl
    4ec4:	4b1e      	ldr	r3, [pc, #120]	; (4f40 <usart_async_read+0xcc>)
    4ec6:	4798      	blx	r3
    4ec8:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4eca:	a801      	add	r0, sp, #4
    4ecc:	4b1d      	ldr	r3, [pc, #116]	; (4f44 <usart_async_read+0xd0>)
    4ece:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4ed0:	f1b9 0f00 	cmp.w	r9, #0
    4ed4:	d004      	beq.n	4ee0 <usart_async_read+0x6c>
    4ed6:	f1b8 0f00 	cmp.w	r8, #0
    4eda:	d119      	bne.n	4f10 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    4edc:	2500      	movs	r5, #0
    4ede:	e024      	b.n	4f2a <usart_async_read+0xb6>
    4ee0:	2500      	movs	r5, #0
    4ee2:	e022      	b.n	4f2a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4ee4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4ee8:	4912      	ldr	r1, [pc, #72]	; (4f34 <usart_async_read+0xc0>)
    4eea:	2001      	movs	r0, #1
    4eec:	4b12      	ldr	r3, [pc, #72]	; (4f38 <usart_async_read+0xc4>)
    4eee:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4ef0:	a801      	add	r0, sp, #4
    4ef2:	4b12      	ldr	r3, [pc, #72]	; (4f3c <usart_async_read+0xc8>)
    4ef4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4ef6:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4efa:	4650      	mov	r0, sl
    4efc:	4b10      	ldr	r3, [pc, #64]	; (4f40 <usart_async_read+0xcc>)
    4efe:	4798      	blx	r3
    4f00:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4f02:	a801      	add	r0, sp, #4
    4f04:	4b0f      	ldr	r3, [pc, #60]	; (4f44 <usart_async_read+0xd0>)
    4f06:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4f08:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    4f0a:	f1b9 0f00 	cmp.w	r9, #0
    4f0e:	d00c      	beq.n	4f2a <usart_async_read+0xb6>
{
    4f10:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    4f12:	4e0d      	ldr	r6, [pc, #52]	; (4f48 <usart_async_read+0xd4>)
    4f14:	1c60      	adds	r0, r4, #1
    4f16:	b285      	uxth	r5, r0
    4f18:	1939      	adds	r1, r7, r4
    4f1a:	4650      	mov	r0, sl
    4f1c:	47b0      	blx	r6
    4f1e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    4f20:	454c      	cmp	r4, r9
    4f22:	d202      	bcs.n	4f2a <usart_async_read+0xb6>
    4f24:	b2a3      	uxth	r3, r4
    4f26:	4598      	cmp	r8, r3
    4f28:	d8f4      	bhi.n	4f14 <usart_async_read+0xa0>
}
    4f2a:	4628      	mov	r0, r5
    4f2c:	b002      	add	sp, #8
    4f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f32:	bf00      	nop
    4f34:	0000c0cc 	.word	0x0000c0cc
    4f38:	00005645 	.word	0x00005645
    4f3c:	00004355 	.word	0x00004355
    4f40:	000057c1 	.word	0x000057c1
    4f44:	00004363 	.word	0x00004363
    4f48:	0000573d 	.word	0x0000573d

00004f4c <usart_async_init>:
{
    4f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f4e:	460d      	mov	r5, r1
    4f50:	4616      	mov	r6, r2
    4f52:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4f54:	4604      	mov	r4, r0
    4f56:	b320      	cbz	r0, 4fa2 <usart_async_init+0x56>
    4f58:	b329      	cbz	r1, 4fa6 <usart_async_init+0x5a>
    4f5a:	b332      	cbz	r2, 4faa <usart_async_init+0x5e>
    4f5c:	1c18      	adds	r0, r3, #0
    4f5e:	bf18      	it	ne
    4f60:	2001      	movne	r0, #1
    4f62:	223a      	movs	r2, #58	; 0x3a
    4f64:	4913      	ldr	r1, [pc, #76]	; (4fb4 <usart_async_init+0x68>)
    4f66:	4b14      	ldr	r3, [pc, #80]	; (4fb8 <usart_async_init+0x6c>)
    4f68:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    4f6a:	463a      	mov	r2, r7
    4f6c:	4631      	mov	r1, r6
    4f6e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4f72:	4b12      	ldr	r3, [pc, #72]	; (4fbc <usart_async_init+0x70>)
    4f74:	4798      	blx	r3
    4f76:	b9d0      	cbnz	r0, 4fae <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    4f78:	4629      	mov	r1, r5
    4f7a:	f104 0008 	add.w	r0, r4, #8
    4f7e:	4b10      	ldr	r3, [pc, #64]	; (4fc0 <usart_async_init+0x74>)
    4f80:	4798      	blx	r3
	if (init_status) {
    4f82:	4603      	mov	r3, r0
    4f84:	b958      	cbnz	r0, 4f9e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    4f86:	4a0f      	ldr	r2, [pc, #60]	; (4fc4 <usart_async_init+0x78>)
    4f88:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    4f8a:	4a0f      	ldr	r2, [pc, #60]	; (4fc8 <usart_async_init+0x7c>)
    4f8c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    4f8e:	4a0f      	ldr	r2, [pc, #60]	; (4fcc <usart_async_init+0x80>)
    4f90:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    4f92:	4a0f      	ldr	r2, [pc, #60]	; (4fd0 <usart_async_init+0x84>)
    4f94:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    4f96:	4a0f      	ldr	r2, [pc, #60]	; (4fd4 <usart_async_init+0x88>)
    4f98:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    4f9a:	4a0f      	ldr	r2, [pc, #60]	; (4fd8 <usart_async_init+0x8c>)
    4f9c:	6162      	str	r2, [r4, #20]
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4fa2:	2000      	movs	r0, #0
    4fa4:	e7dd      	b.n	4f62 <usart_async_init+0x16>
    4fa6:	2000      	movs	r0, #0
    4fa8:	e7db      	b.n	4f62 <usart_async_init+0x16>
    4faa:	2000      	movs	r0, #0
    4fac:	e7d9      	b.n	4f62 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    4fae:	f06f 030c 	mvn.w	r3, #12
    4fb2:	e7f4      	b.n	4f9e <usart_async_init+0x52>
    4fb4:	0000c0cc 	.word	0x0000c0cc
    4fb8:	00005645 	.word	0x00005645
    4fbc:	000056ed 	.word	0x000056ed
    4fc0:	00006b41 	.word	0x00006b41
    4fc4:	00004e75 	.word	0x00004e75
    4fc8:	00004de1 	.word	0x00004de1
    4fcc:	00004e41 	.word	0x00004e41
    4fd0:	00004dc5 	.word	0x00004dc5
    4fd4:	00004d9d 	.word	0x00004d9d
    4fd8:	00004db1 	.word	0x00004db1

00004fdc <usart_async_enable>:
{
    4fdc:	b510      	push	{r4, lr}
	ASSERT(descr);
    4fde:	4604      	mov	r4, r0
    4fe0:	2261      	movs	r2, #97	; 0x61
    4fe2:	4906      	ldr	r1, [pc, #24]	; (4ffc <usart_async_enable+0x20>)
    4fe4:	3000      	adds	r0, #0
    4fe6:	bf18      	it	ne
    4fe8:	2001      	movne	r0, #1
    4fea:	4b05      	ldr	r3, [pc, #20]	; (5000 <usart_async_enable+0x24>)
    4fec:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    4fee:	f104 0008 	add.w	r0, r4, #8
    4ff2:	4b04      	ldr	r3, [pc, #16]	; (5004 <usart_async_enable+0x28>)
    4ff4:	4798      	blx	r3
}
    4ff6:	2000      	movs	r0, #0
    4ff8:	bd10      	pop	{r4, pc}
    4ffa:	bf00      	nop
    4ffc:	0000c0cc 	.word	0x0000c0cc
    5000:	00005645 	.word	0x00005645
    5004:	00006bbd 	.word	0x00006bbd

00005008 <usart_async_get_io_descriptor>:
{
    5008:	b538      	push	{r3, r4, r5, lr}
    500a:	460c      	mov	r4, r1
	ASSERT(descr && io);
    500c:	4605      	mov	r5, r0
    500e:	b148      	cbz	r0, 5024 <usart_async_get_io_descriptor+0x1c>
    5010:	1c08      	adds	r0, r1, #0
    5012:	bf18      	it	ne
    5014:	2001      	movne	r0, #1
    5016:	2277      	movs	r2, #119	; 0x77
    5018:	4903      	ldr	r1, [pc, #12]	; (5028 <usart_async_get_io_descriptor+0x20>)
    501a:	4b04      	ldr	r3, [pc, #16]	; (502c <usart_async_get_io_descriptor+0x24>)
    501c:	4798      	blx	r3
	*io = &descr->io;
    501e:	6025      	str	r5, [r4, #0]
}
    5020:	2000      	movs	r0, #0
    5022:	bd38      	pop	{r3, r4, r5, pc}
    5024:	2000      	movs	r0, #0
    5026:	e7f6      	b.n	5016 <usart_async_get_io_descriptor+0xe>
    5028:	0000c0cc 	.word	0x0000c0cc
    502c:	00005645 	.word	0x00005645

00005030 <usart_async_register_callback>:
{
    5030:	b570      	push	{r4, r5, r6, lr}
    5032:	460c      	mov	r4, r1
    5034:	4616      	mov	r6, r2
	ASSERT(descr);
    5036:	4605      	mov	r5, r0
    5038:	2283      	movs	r2, #131	; 0x83
    503a:	4917      	ldr	r1, [pc, #92]	; (5098 <usart_async_register_callback+0x68>)
    503c:	3000      	adds	r0, #0
    503e:	bf18      	it	ne
    5040:	2001      	movne	r0, #1
    5042:	4b16      	ldr	r3, [pc, #88]	; (509c <usart_async_register_callback+0x6c>)
    5044:	4798      	blx	r3
	switch (type) {
    5046:	2c01      	cmp	r4, #1
    5048:	d010      	beq.n	506c <usart_async_register_callback+0x3c>
    504a:	b124      	cbz	r4, 5056 <usart_async_register_callback+0x26>
    504c:	2c02      	cmp	r4, #2
    504e:	d018      	beq.n	5082 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    5050:	f06f 000c 	mvn.w	r0, #12
}
    5054:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    5056:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    5058:	1c32      	adds	r2, r6, #0
    505a:	bf18      	it	ne
    505c:	2201      	movne	r2, #1
    505e:	2101      	movs	r1, #1
    5060:	f105 0008 	add.w	r0, r5, #8
    5064:	4b0e      	ldr	r3, [pc, #56]	; (50a0 <usart_async_register_callback+0x70>)
    5066:	4798      	blx	r3
	return ERR_NONE;
    5068:	2000      	movs	r0, #0
		break;
    506a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    506c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    506e:	1c32      	adds	r2, r6, #0
    5070:	bf18      	it	ne
    5072:	2201      	movne	r2, #1
    5074:	2102      	movs	r1, #2
    5076:	f105 0008 	add.w	r0, r5, #8
    507a:	4b09      	ldr	r3, [pc, #36]	; (50a0 <usart_async_register_callback+0x70>)
    507c:	4798      	blx	r3
	return ERR_NONE;
    507e:	2000      	movs	r0, #0
		break;
    5080:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5082:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5084:	1c32      	adds	r2, r6, #0
    5086:	bf18      	it	ne
    5088:	2201      	movne	r2, #1
    508a:	2103      	movs	r1, #3
    508c:	f105 0008 	add.w	r0, r5, #8
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <usart_async_register_callback+0x70>)
    5092:	4798      	blx	r3
	return ERR_NONE;
    5094:	2000      	movs	r0, #0
		break;
    5096:	bd70      	pop	{r4, r5, r6, pc}
    5098:	0000c0cc 	.word	0x0000c0cc
    509c:	00005645 	.word	0x00005645
    50a0:	00006be9 	.word	0x00006be9

000050a4 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    50a4:	4b0f      	ldr	r3, [pc, #60]	; (50e4 <_usb_d_find_ep+0x40>)
    50a6:	7859      	ldrb	r1, [r3, #1]
    50a8:	4288      	cmp	r0, r1
    50aa:	d018      	beq.n	50de <_usb_d_find_ep+0x3a>
{
    50ac:	b430      	push	{r4, r5}
    50ae:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    50b0:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    50b2:	f000 050f 	and.w	r5, r0, #15
    50b6:	e007      	b.n	50c8 <_usb_d_find_ep+0x24>
    50b8:	3301      	adds	r3, #1
    50ba:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    50bc:	2b0d      	cmp	r3, #13
    50be:	d009      	beq.n	50d4 <_usb_d_find_ep+0x30>
    50c0:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    50c2:	7851      	ldrb	r1, [r2, #1]
    50c4:	4281      	cmp	r1, r0
    50c6:	d007      	beq.n	50d8 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    50c8:	7814      	ldrb	r4, [r2, #0]
    50ca:	2c00      	cmp	r4, #0
    50cc:	d1f4      	bne.n	50b8 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    50ce:	428d      	cmp	r5, r1
    50d0:	d1f2      	bne.n	50b8 <_usb_d_find_ep+0x14>
    50d2:	e001      	b.n	50d8 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    50d4:	f04f 33ff 	mov.w	r3, #4294967295
}
    50d8:	4618      	mov	r0, r3
    50da:	bc30      	pop	{r4, r5}
    50dc:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    50de:	2300      	movs	r3, #0
}
    50e0:	4618      	mov	r0, r3
    50e2:	4770      	bx	lr
    50e4:	2000065c 	.word	0x2000065c

000050e8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    50e8:	2000      	movs	r0, #0
    50ea:	4770      	bx	lr

000050ec <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    50ec:	b538      	push	{r3, r4, r5, lr}
    50ee:	4604      	mov	r4, r0
    50f0:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    50f2:	4b09      	ldr	r3, [pc, #36]	; (5118 <usb_d_cb_trans_more+0x2c>)
    50f4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    50f6:	4b09      	ldr	r3, [pc, #36]	; (511c <usb_d_cb_trans_more+0x30>)
    50f8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    50fc:	789b      	ldrb	r3, [r3, #2]
    50fe:	2b03      	cmp	r3, #3
    5100:	d001      	beq.n	5106 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    5102:	2000      	movs	r0, #0
}
    5104:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    5106:	4b05      	ldr	r3, [pc, #20]	; (511c <usb_d_cb_trans_more+0x30>)
    5108:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    510c:	6983      	ldr	r3, [r0, #24]
    510e:	4629      	mov	r1, r5
    5110:	4620      	mov	r0, r4
    5112:	4798      	blx	r3
    5114:	bd38      	pop	{r3, r4, r5, pc}
    5116:	bf00      	nop
    5118:	000050a5 	.word	0x000050a5
    511c:	2000065c 	.word	0x2000065c

00005120 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5120:	b5f0      	push	{r4, r5, r6, r7, lr}
    5122:	b085      	sub	sp, #20
    5124:	4606      	mov	r6, r0
    5126:	460d      	mov	r5, r1
    5128:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    512a:	4b4d      	ldr	r3, [pc, #308]	; (5260 <_usb_d_cb_trans_done+0x140>)
    512c:	4798      	blx	r3
    512e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5130:	2d00      	cmp	r5, #0
    5132:	d15b      	bne.n	51ec <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5134:	4a4b      	ldr	r2, [pc, #300]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5136:	0143      	lsls	r3, r0, #5
    5138:	18d1      	adds	r1, r2, r3
    513a:	2000      	movs	r0, #0
    513c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    513e:	5cd3      	ldrb	r3, [r2, r3]
    5140:	b173      	cbz	r3, 5160 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5142:	4b48      	ldr	r3, [pc, #288]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5144:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5148:	2201      	movs	r2, #1
    514a:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    514c:	4845      	ldr	r0, [pc, #276]	; (5264 <_usb_d_cb_trans_done+0x144>)
    514e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5152:	69c3      	ldr	r3, [r0, #28]
    5154:	463a      	mov	r2, r7
    5156:	78c1      	ldrb	r1, [r0, #3]
    5158:	4630      	mov	r0, r6
    515a:	4798      	blx	r3
}
    515c:	b005      	add	sp, #20
    515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5160:	788b      	ldrb	r3, [r1, #2]
    5162:	2b03      	cmp	r3, #3
    5164:	d00b      	beq.n	517e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5166:	483f      	ldr	r0, [pc, #252]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5168:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    516c:	4614      	mov	r4, r2
    516e:	69d3      	ldr	r3, [r2, #28]
    5170:	320c      	adds	r2, #12
    5172:	2100      	movs	r1, #0
    5174:	7860      	ldrb	r0, [r4, #1]
    5176:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5178:	2302      	movs	r3, #2
    517a:	70a3      	strb	r3, [r4, #2]
    517c:	e7ee      	b.n	515c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    517e:	460b      	mov	r3, r1
    5180:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5184:	460a      	mov	r2, r1
    5186:	69ce      	ldr	r6, [r1, #28]
    5188:	320c      	adds	r2, #12
    518a:	2101      	movs	r1, #1
    518c:	7858      	ldrb	r0, [r3, #1]
    518e:	47b0      	blx	r6
		if (err) {
    5190:	b1a0      	cbz	r0, 51bc <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5192:	4b34      	ldr	r3, [pc, #208]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5194:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5198:	2205      	movs	r2, #5
    519a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    519c:	2202      	movs	r2, #2
    519e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    51a0:	2d00      	cmp	r5, #0
    51a2:	db09      	blt.n	51b8 <_usb_d_cb_trans_done+0x98>
    51a4:	482f      	ldr	r0, [pc, #188]	; (5264 <_usb_d_cb_trans_done+0x144>)
    51a6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    51aa:	7840      	ldrb	r0, [r0, #1]
    51ac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    51b0:	2101      	movs	r1, #1
    51b2:	4b2d      	ldr	r3, [pc, #180]	; (5268 <_usb_d_cb_trans_done+0x148>)
    51b4:	4798      	blx	r3
    51b6:	e7d1      	b.n	515c <_usb_d_cb_trans_done+0x3c>
    51b8:	7858      	ldrb	r0, [r3, #1]
    51ba:	e7f9      	b.n	51b0 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    51bc:	4829      	ldr	r0, [pc, #164]	; (5264 <_usb_d_cb_trans_done+0x144>)
    51be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    51c2:	2304      	movs	r3, #4
    51c4:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    51c6:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    51c8:	2200      	movs	r2, #0
    51ca:	9201      	str	r2, [sp, #4]
    51cc:	9202      	str	r2, [sp, #8]
    51ce:	4295      	cmp	r5, r2
    51d0:	bfac      	ite	ge
    51d2:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    51d6:	f003 030f 	andlt.w	r3, r3, #15
    51da:	f88d 300c 	strb.w	r3, [sp, #12]
    51de:	2301      	movs	r3, #1
    51e0:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    51e4:	a801      	add	r0, sp, #4
    51e6:	4b21      	ldr	r3, [pc, #132]	; (526c <_usb_d_cb_trans_done+0x14c>)
    51e8:	4798      	blx	r3
    51ea:	e7b7      	b.n	515c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    51ec:	2d01      	cmp	r5, #1
    51ee:	d00a      	beq.n	5206 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    51f0:	2d02      	cmp	r5, #2
    51f2:	d01c      	beq.n	522e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    51f4:	2d03      	cmp	r5, #3
    51f6:	d02a      	beq.n	524e <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    51f8:	4b1a      	ldr	r3, [pc, #104]	; (5264 <_usb_d_cb_trans_done+0x144>)
    51fa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    51fe:	2206      	movs	r2, #6
    5200:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5202:	70da      	strb	r2, [r3, #3]
    5204:	e7a2      	b.n	514c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5206:	4a17      	ldr	r2, [pc, #92]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5208:	0143      	lsls	r3, r0, #5
    520a:	18d1      	adds	r1, r2, r3
    520c:	2002      	movs	r0, #2
    520e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5210:	5cd3      	ldrb	r3, [r2, r3]
    5212:	b12b      	cbz	r3, 5220 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5214:	4b13      	ldr	r3, [pc, #76]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5216:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    521a:	2205      	movs	r2, #5
    521c:	709a      	strb	r2, [r3, #2]
    521e:	e795      	b.n	514c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5220:	460b      	mov	r3, r1
    5222:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5224:	2100      	movs	r1, #0
    5226:	4630      	mov	r0, r6
    5228:	4b0f      	ldr	r3, [pc, #60]	; (5268 <_usb_d_cb_trans_done+0x148>)
    522a:	4798      	blx	r3
    522c:	e78e      	b.n	514c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    522e:	4a0d      	ldr	r2, [pc, #52]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5230:	0143      	lsls	r3, r0, #5
    5232:	18d1      	adds	r1, r2, r3
    5234:	2004      	movs	r0, #4
    5236:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5238:	5cd3      	ldrb	r3, [r2, r3]
    523a:	b12b      	cbz	r3, 5248 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    523c:	4b09      	ldr	r3, [pc, #36]	; (5264 <_usb_d_cb_trans_done+0x144>)
    523e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5242:	2201      	movs	r2, #1
    5244:	709a      	strb	r2, [r3, #2]
    5246:	e781      	b.n	514c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5248:	2302      	movs	r3, #2
    524a:	708b      	strb	r3, [r1, #2]
			return;
    524c:	e786      	b.n	515c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    524e:	4b05      	ldr	r3, [pc, #20]	; (5264 <_usb_d_cb_trans_done+0x144>)
    5250:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5254:	2200      	movs	r2, #0
    5256:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5258:	2205      	movs	r2, #5
    525a:	70da      	strb	r2, [r3, #3]
    525c:	e776      	b.n	514c <_usb_d_cb_trans_done+0x2c>
    525e:	bf00      	nop
    5260:	000050a5 	.word	0x000050a5
    5264:	2000065c 	.word	0x2000065c
    5268:	00008b69 	.word	0x00008b69
    526c:	00008d11 	.word	0x00008d11

00005270 <usb_d_cb_trans_setup>:
{
    5270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5274:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5276:	4b1c      	ldr	r3, [pc, #112]	; (52e8 <usb_d_cb_trans_setup+0x78>)
    5278:	4798      	blx	r3
    527a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    527c:	4c1b      	ldr	r4, [pc, #108]	; (52ec <usb_d_cb_trans_setup+0x7c>)
    527e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5282:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5284:	4621      	mov	r1, r4
    5286:	4628      	mov	r0, r5
    5288:	4b19      	ldr	r3, [pc, #100]	; (52f0 <usb_d_cb_trans_setup+0x80>)
    528a:	4798      	blx	r3
	if (n != 8) {
    528c:	b2c0      	uxtb	r0, r0
    528e:	2808      	cmp	r0, #8
    5290:	d009      	beq.n	52a6 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5292:	2101      	movs	r1, #1
    5294:	4628      	mov	r0, r5
    5296:	4c17      	ldr	r4, [pc, #92]	; (52f4 <usb_d_cb_trans_setup+0x84>)
    5298:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    529a:	2101      	movs	r1, #1
    529c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    52a0:	47a0      	blx	r4
		return;
    52a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    52a6:	2100      	movs	r1, #0
    52a8:	4628      	mov	r0, r5
    52aa:	4f12      	ldr	r7, [pc, #72]	; (52f4 <usb_d_cb_trans_setup+0x84>)
    52ac:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    52ae:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    52b2:	2100      	movs	r1, #0
    52b4:	4640      	mov	r0, r8
    52b6:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    52b8:	4b0c      	ldr	r3, [pc, #48]	; (52ec <usb_d_cb_trans_setup+0x7c>)
    52ba:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    52be:	2201      	movs	r2, #1
    52c0:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    52c2:	695b      	ldr	r3, [r3, #20]
    52c4:	4621      	mov	r1, r4
    52c6:	4628      	mov	r0, r5
    52c8:	4798      	blx	r3
    52ca:	b108      	cbz	r0, 52d0 <usb_d_cb_trans_setup+0x60>
    52cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    52d0:	4b06      	ldr	r3, [pc, #24]	; (52ec <usb_d_cb_trans_setup+0x7c>)
    52d2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    52d6:	2305      	movs	r3, #5
    52d8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    52da:	2101      	movs	r1, #1
    52dc:	4628      	mov	r0, r5
    52de:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    52e0:	2101      	movs	r1, #1
    52e2:	4640      	mov	r0, r8
    52e4:	47b8      	blx	r7
    52e6:	e7f1      	b.n	52cc <usb_d_cb_trans_setup+0x5c>
    52e8:	000050a5 	.word	0x000050a5
    52ec:	2000065c 	.word	0x2000065c
    52f0:	00008cb1 	.word	0x00008cb1
    52f4:	00008b69 	.word	0x00008b69

000052f8 <usb_d_init>:

int32_t usb_d_init(void)
{
    52f8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    52fa:	4b11      	ldr	r3, [pc, #68]	; (5340 <usb_d_init+0x48>)
    52fc:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    52fe:	2800      	cmp	r0, #0
    5300:	db1d      	blt.n	533e <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5302:	4c10      	ldr	r4, [pc, #64]	; (5344 <usb_d_init+0x4c>)
    5304:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5308:	2100      	movs	r1, #0
    530a:	4620      	mov	r0, r4
    530c:	4b0e      	ldr	r3, [pc, #56]	; (5348 <usb_d_init+0x50>)
    530e:	4798      	blx	r3
    5310:	4623      	mov	r3, r4
    5312:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5316:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5318:	4a0c      	ldr	r2, [pc, #48]	; (534c <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    531a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    531c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    531e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5320:	61da      	str	r2, [r3, #28]
    5322:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5324:	4283      	cmp	r3, r0
    5326:	d1f8      	bne.n	531a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5328:	4909      	ldr	r1, [pc, #36]	; (5350 <usb_d_init+0x58>)
    532a:	2000      	movs	r0, #0
    532c:	4c09      	ldr	r4, [pc, #36]	; (5354 <usb_d_init+0x5c>)
    532e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5330:	4909      	ldr	r1, [pc, #36]	; (5358 <usb_d_init+0x60>)
    5332:	2001      	movs	r0, #1
    5334:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5336:	4909      	ldr	r1, [pc, #36]	; (535c <usb_d_init+0x64>)
    5338:	2002      	movs	r0, #2
    533a:	47a0      	blx	r4
	return ERR_NONE;
    533c:	2000      	movs	r0, #0
}
    533e:	bd10      	pop	{r4, pc}
    5340:	00008541 	.word	0x00008541
    5344:	2000065c 	.word	0x2000065c
    5348:	0000b59f 	.word	0x0000b59f
    534c:	000050e9 	.word	0x000050e9
    5350:	00005271 	.word	0x00005271
    5354:	00008f19 	.word	0x00008f19
    5358:	000050ed 	.word	0x000050ed
    535c:	00005121 	.word	0x00005121

00005360 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5360:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5362:	4b01      	ldr	r3, [pc, #4]	; (5368 <usb_d_register_callback+0x8>)
    5364:	4798      	blx	r3
    5366:	bd08      	pop	{r3, pc}
    5368:	00008ef1 	.word	0x00008ef1

0000536c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    536c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    536e:	4b01      	ldr	r3, [pc, #4]	; (5374 <usb_d_enable+0x8>)
    5370:	4798      	blx	r3
}
    5372:	bd08      	pop	{r3, pc}
    5374:	00008649 	.word	0x00008649

00005378 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5378:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    537a:	4b01      	ldr	r3, [pc, #4]	; (5380 <usb_d_attach+0x8>)
    537c:	4798      	blx	r3
    537e:	bd08      	pop	{r3, pc}
    5380:	000086b5 	.word	0x000086b5

00005384 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5384:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5386:	4b01      	ldr	r3, [pc, #4]	; (538c <usb_d_set_address+0x8>)
    5388:	4798      	blx	r3
    538a:	bd08      	pop	{r3, pc}
    538c:	000086c7 	.word	0x000086c7

00005390 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5392:	4606      	mov	r6, r0
    5394:	460c      	mov	r4, r1
    5396:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5398:	4b0f      	ldr	r3, [pc, #60]	; (53d8 <usb_d_ep_init+0x48>)
    539a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    539c:	2800      	cmp	r0, #0
    539e:	da14      	bge.n	53ca <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    53a0:	20ff      	movs	r0, #255	; 0xff
    53a2:	4b0d      	ldr	r3, [pc, #52]	; (53d8 <usb_d_ep_init+0x48>)
    53a4:	4798      	blx	r3
		if (ep_index < 0) {
    53a6:	1e05      	subs	r5, r0, #0
    53a8:	db12      	blt.n	53d0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    53aa:	463a      	mov	r2, r7
    53ac:	4621      	mov	r1, r4
    53ae:	4630      	mov	r0, r6
    53b0:	4b0a      	ldr	r3, [pc, #40]	; (53dc <usb_d_ep_init+0x4c>)
    53b2:	4798      	blx	r3
	if (rc < 0) {
    53b4:	2800      	cmp	r0, #0
    53b6:	db0d      	blt.n	53d4 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    53b8:	4b09      	ldr	r3, [pc, #36]	; (53e0 <usb_d_ep_init+0x50>)
    53ba:	0168      	lsls	r0, r5, #5
    53bc:	181a      	adds	r2, r3, r0
    53be:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    53c0:	f004 0403 	and.w	r4, r4, #3
    53c4:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    53c6:	2000      	movs	r0, #0
    53c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    53ca:	f06f 0013 	mvn.w	r0, #19
    53ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    53d0:	f06f 0014 	mvn.w	r0, #20
}
    53d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53d6:	bf00      	nop
    53d8:	000050a5 	.word	0x000050a5
    53dc:	000086d5 	.word	0x000086d5
    53e0:	2000065c 	.word	0x2000065c

000053e4 <usb_d_ep0_init>:
{
    53e4:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    53e6:	4602      	mov	r2, r0
    53e8:	2100      	movs	r1, #0
    53ea:	4608      	mov	r0, r1
    53ec:	4b01      	ldr	r3, [pc, #4]	; (53f4 <usb_d_ep0_init+0x10>)
    53ee:	4798      	blx	r3
}
    53f0:	bd08      	pop	{r3, pc}
    53f2:	bf00      	nop
    53f4:	00005391 	.word	0x00005391

000053f8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    53f8:	b538      	push	{r3, r4, r5, lr}
    53fa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    53fc:	4b06      	ldr	r3, [pc, #24]	; (5418 <usb_d_ep_deinit+0x20>)
    53fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5400:	1e04      	subs	r4, r0, #0
    5402:	db07      	blt.n	5414 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5404:	4628      	mov	r0, r5
    5406:	4b05      	ldr	r3, [pc, #20]	; (541c <usb_d_ep_deinit+0x24>)
    5408:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    540a:	4805      	ldr	r0, [pc, #20]	; (5420 <usb_d_ep_deinit+0x28>)
    540c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5410:	23ff      	movs	r3, #255	; 0xff
    5412:	7043      	strb	r3, [r0, #1]
    5414:	bd38      	pop	{r3, r4, r5, pc}
    5416:	bf00      	nop
    5418:	000050a5 	.word	0x000050a5
    541c:	000087ed 	.word	0x000087ed
    5420:	2000065c 	.word	0x2000065c

00005424 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5424:	b538      	push	{r3, r4, r5, lr}
    5426:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5428:	4b0e      	ldr	r3, [pc, #56]	; (5464 <usb_d_ep_enable+0x40>)
    542a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    542c:	1e04      	subs	r4, r0, #0
    542e:	db16      	blt.n	545e <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5430:	0163      	lsls	r3, r4, #5
    5432:	4a0d      	ldr	r2, [pc, #52]	; (5468 <usb_d_ep_enable+0x44>)
    5434:	5cd3      	ldrb	r3, [r2, r3]
    5436:	2b00      	cmp	r3, #0
    5438:	bf0c      	ite	eq
    543a:	2202      	moveq	r2, #2
    543c:	2201      	movne	r2, #1
    543e:	4b0a      	ldr	r3, [pc, #40]	; (5468 <usb_d_ep_enable+0x44>)
    5440:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5444:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5446:	4628      	mov	r0, r5
    5448:	4b08      	ldr	r3, [pc, #32]	; (546c <usb_d_ep_enable+0x48>)
    544a:	4798      	blx	r3
	if (rc < 0) {
    544c:	2800      	cmp	r0, #0
    544e:	db00      	blt.n	5452 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5450:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5452:	4b05      	ldr	r3, [pc, #20]	; (5468 <usb_d_ep_enable+0x44>)
    5454:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5458:	2300      	movs	r3, #0
    545a:	70a3      	strb	r3, [r4, #2]
    545c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    545e:	f06f 0011 	mvn.w	r0, #17
    5462:	e7f5      	b.n	5450 <usb_d_ep_enable+0x2c>
    5464:	000050a5 	.word	0x000050a5
    5468:	2000065c 	.word	0x2000065c
    546c:	000088b1 	.word	0x000088b1

00005470 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5474:	b086      	sub	sp, #24
    5476:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5478:	7a07      	ldrb	r7, [r0, #8]
    547a:	4638      	mov	r0, r7
    547c:	4b3f      	ldr	r3, [pc, #252]	; (557c <usb_d_ep_transfer+0x10c>)
    547e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5480:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5482:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5486:	1e06      	subs	r6, r0, #0
    5488:	db72      	blt.n	5570 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    548a:	a804      	add	r0, sp, #16
    548c:	4b3c      	ldr	r3, [pc, #240]	; (5580 <usb_d_ep_transfer+0x110>)
    548e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5490:	4b3c      	ldr	r3, [pc, #240]	; (5584 <usb_d_ep_transfer+0x114>)
    5492:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5496:	789b      	ldrb	r3, [r3, #2]
    5498:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    549c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    54a0:	b2db      	uxtb	r3, r3
    54a2:	2b01      	cmp	r3, #1
    54a4:	d011      	beq.n	54ca <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    54a6:	a804      	add	r0, sp, #16
    54a8:	4b37      	ldr	r3, [pc, #220]	; (5588 <usb_d_ep_transfer+0x118>)
    54aa:	4798      	blx	r3
		switch (state) {
    54ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    54b0:	b2db      	uxtb	r3, r3
    54b2:	2b05      	cmp	r3, #5
    54b4:	d05f      	beq.n	5576 <usb_d_ep_transfer+0x106>
    54b6:	2b06      	cmp	r3, #6
    54b8:	d023      	beq.n	5502 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    54ba:	2b00      	cmp	r3, #0
    54bc:	bf0c      	ite	eq
    54be:	f06f 0012 	mvneq.w	r0, #18
    54c2:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    54c4:	b006      	add	sp, #24
    54c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    54ca:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5584 <usb_d_ep_transfer+0x114>
    54ce:	ea4f 1946 	mov.w	r9, r6, lsl #5
    54d2:	eb0a 0309 	add.w	r3, sl, r9
    54d6:	2203      	movs	r2, #3
    54d8:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    54da:	a804      	add	r0, sp, #16
    54dc:	4b2a      	ldr	r3, [pc, #168]	; (5588 <usb_d_ep_transfer+0x118>)
    54de:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    54e0:	f81a 3009 	ldrb.w	r3, [sl, r9]
    54e4:	b183      	cbz	r3, 5508 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    54e6:	7a22      	ldrb	r2, [r4, #8]
    54e8:	3500      	adds	r5, #0
    54ea:	bf18      	it	ne
    54ec:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    54ee:	6823      	ldr	r3, [r4, #0]
    54f0:	9301      	str	r3, [sp, #4]
    54f2:	f8cd 8008 	str.w	r8, [sp, #8]
    54f6:	f017 0f80 	tst.w	r7, #128	; 0x80
    54fa:	d119      	bne.n	5530 <usb_d_ep_transfer+0xc0>
    54fc:	f002 030f 	and.w	r3, r2, #15
    5500:	e018      	b.n	5534 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5502:	f06f 000f 	mvn.w	r0, #15
    5506:	e7dd      	b.n	54c4 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5508:	4b1e      	ldr	r3, [pc, #120]	; (5584 <usb_d_ep_transfer+0x114>)
    550a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    550e:	7cda      	ldrb	r2, [r3, #19]
    5510:	7c9d      	ldrb	r5, [r3, #18]
    5512:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5516:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5518:	b9a5      	cbnz	r5, 5544 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    551a:	4b1a      	ldr	r3, [pc, #104]	; (5584 <usb_d_ep_transfer+0x114>)
    551c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5520:	2304      	movs	r3, #4
    5522:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5524:	2300      	movs	r3, #0
			zlp                 = true;
    5526:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5528:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    552a:	6821      	ldr	r1, [r4, #0]
    552c:	9101      	str	r1, [sp, #4]
    552e:	9302      	str	r3, [sp, #8]
    5530:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5534:	f88d 300c 	strb.w	r3, [sp, #12]
    5538:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    553c:	a801      	add	r0, sp, #4
    553e:	4b13      	ldr	r3, [pc, #76]	; (558c <usb_d_ep_transfer+0x11c>)
    5540:	4798      	blx	r3
	return rc;
    5542:	e7bf      	b.n	54c4 <usb_d_ep_transfer+0x54>
    5544:	4643      	mov	r3, r8
    5546:	45a8      	cmp	r8, r5
    5548:	bf28      	it	cs
    554a:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    554c:	4a0d      	ldr	r2, [pc, #52]	; (5584 <usb_d_ep_transfer+0x114>)
    554e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5552:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5556:	2a00      	cmp	r2, #0
    5558:	db05      	blt.n	5566 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    555a:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    555c:	6821      	ldr	r1, [r4, #0]
    555e:	9101      	str	r1, [sp, #4]
    5560:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5562:	2500      	movs	r5, #0
    5564:	e7ca      	b.n	54fc <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5566:	429d      	cmp	r5, r3
    5568:	bf94      	ite	ls
    556a:	2500      	movls	r5, #0
    556c:	2501      	movhi	r5, #1
    556e:	e7db      	b.n	5528 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5570:	f06f 0011 	mvn.w	r0, #17
    5574:	e7a6      	b.n	54c4 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5576:	2002      	movs	r0, #2
    5578:	e7a4      	b.n	54c4 <usb_d_ep_transfer+0x54>
    557a:	bf00      	nop
    557c:	000050a5 	.word	0x000050a5
    5580:	00004355 	.word	0x00004355
    5584:	2000065c 	.word	0x2000065c
    5588:	00004363 	.word	0x00004363
    558c:	00008d11 	.word	0x00008d11

00005590 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5590:	b538      	push	{r3, r4, r5, lr}
    5592:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5594:	b141      	cbz	r1, 55a8 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5596:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5598:	bf0c      	ite	eq
    559a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    559c:	2102      	movne	r1, #2
    559e:	4b13      	ldr	r3, [pc, #76]	; (55ec <usb_d_ep_halt+0x5c>)
    55a0:	4798      	blx	r3
    55a2:	4603      	mov	r3, r0
	}
}
    55a4:	4618      	mov	r0, r3
    55a6:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    55a8:	4b11      	ldr	r3, [pc, #68]	; (55f0 <usb_d_ep_halt+0x60>)
    55aa:	4798      	blx	r3
	if (ep_index < 0) {
    55ac:	1e05      	subs	r5, r0, #0
    55ae:	db19      	blt.n	55e4 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    55b0:	2102      	movs	r1, #2
    55b2:	4620      	mov	r0, r4
    55b4:	4b0d      	ldr	r3, [pc, #52]	; (55ec <usb_d_ep_halt+0x5c>)
    55b6:	4798      	blx	r3
    55b8:	4603      	mov	r3, r0
    55ba:	2800      	cmp	r0, #0
    55bc:	d0f2      	beq.n	55a4 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    55be:	2100      	movs	r1, #0
    55c0:	4620      	mov	r0, r4
    55c2:	4b0a      	ldr	r3, [pc, #40]	; (55ec <usb_d_ep_halt+0x5c>)
    55c4:	4798      	blx	r3
		if (rc < 0) {
    55c6:	1e03      	subs	r3, r0, #0
    55c8:	dbec      	blt.n	55a4 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    55ca:	4b0a      	ldr	r3, [pc, #40]	; (55f4 <usb_d_ep_halt+0x64>)
    55cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    55d0:	2201      	movs	r2, #1
    55d2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    55d4:	2103      	movs	r1, #3
    55d6:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    55d8:	69db      	ldr	r3, [r3, #28]
    55da:	2200      	movs	r2, #0
    55dc:	4620      	mov	r0, r4
    55de:	4798      	blx	r3
	return ERR_NONE;
    55e0:	2300      	movs	r3, #0
    55e2:	e7df      	b.n	55a4 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    55e4:	f06f 0311 	mvn.w	r3, #17
    55e8:	e7dc      	b.n	55a4 <usb_d_ep_halt+0x14>
    55ea:	bf00      	nop
    55ec:	00008b69 	.word	0x00008b69
    55f0:	000050a5 	.word	0x000050a5
    55f4:	2000065c 	.word	0x2000065c

000055f8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    55f8:	b538      	push	{r3, r4, r5, lr}
    55fa:	460d      	mov	r5, r1
    55fc:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    55fe:	4b0e      	ldr	r3, [pc, #56]	; (5638 <usb_d_ep_register_callback+0x40>)
    5600:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5602:	4b0e      	ldr	r3, [pc, #56]	; (563c <usb_d_ep_register_callback+0x44>)
    5604:	2c00      	cmp	r4, #0
    5606:	bf08      	it	eq
    5608:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    560a:	2800      	cmp	r0, #0
    560c:	db13      	blt.n	5636 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    560e:	2d01      	cmp	r5, #1
    5610:	d008      	beq.n	5624 <usb_d_ep_register_callback+0x2c>
    5612:	b115      	cbz	r5, 561a <usb_d_ep_register_callback+0x22>
    5614:	2d02      	cmp	r5, #2
    5616:	d00a      	beq.n	562e <usb_d_ep_register_callback+0x36>
    5618:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    561a:	4b09      	ldr	r3, [pc, #36]	; (5640 <usb_d_ep_register_callback+0x48>)
    561c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5620:	6144      	str	r4, [r0, #20]
		break;
    5622:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5624:	4b06      	ldr	r3, [pc, #24]	; (5640 <usb_d_ep_register_callback+0x48>)
    5626:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    562a:	6184      	str	r4, [r0, #24]
		break;
    562c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    562e:	4b04      	ldr	r3, [pc, #16]	; (5640 <usb_d_ep_register_callback+0x48>)
    5630:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5634:	61c4      	str	r4, [r0, #28]
    5636:	bd38      	pop	{r3, r4, r5, pc}
    5638:	000050a5 	.word	0x000050a5
    563c:	000050e9 	.word	0x000050e9
    5640:	2000065c 	.word	0x2000065c

00005644 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5644:	b900      	cbnz	r0, 5648 <assert+0x4>
		__asm("BKPT #0");
    5646:	be00      	bkpt	0x0000
    5648:	4770      	bx	lr

0000564a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    564a:	6803      	ldr	r3, [r0, #0]
    564c:	b14b      	cbz	r3, 5662 <is_list_element+0x18>
		if (it == element) {
    564e:	428b      	cmp	r3, r1
    5650:	d009      	beq.n	5666 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5652:	681b      	ldr	r3, [r3, #0]
    5654:	b11b      	cbz	r3, 565e <is_list_element+0x14>
		if (it == element) {
    5656:	4299      	cmp	r1, r3
    5658:	d1fb      	bne.n	5652 <is_list_element+0x8>
			return true;
    565a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    565c:	4770      	bx	lr
	return false;
    565e:	2000      	movs	r0, #0
    5660:	4770      	bx	lr
    5662:	2000      	movs	r0, #0
    5664:	4770      	bx	lr
			return true;
    5666:	2001      	movs	r0, #1
    5668:	4770      	bx	lr
	...

0000566c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    566c:	b538      	push	{r3, r4, r5, lr}
    566e:	4604      	mov	r4, r0
    5670:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5672:	4b06      	ldr	r3, [pc, #24]	; (568c <list_insert_as_head+0x20>)
    5674:	4798      	blx	r3
    5676:	f080 0001 	eor.w	r0, r0, #1
    567a:	2239      	movs	r2, #57	; 0x39
    567c:	4904      	ldr	r1, [pc, #16]	; (5690 <list_insert_as_head+0x24>)
    567e:	b2c0      	uxtb	r0, r0
    5680:	4b04      	ldr	r3, [pc, #16]	; (5694 <list_insert_as_head+0x28>)
    5682:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5684:	6823      	ldr	r3, [r4, #0]
    5686:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5688:	6025      	str	r5, [r4, #0]
    568a:	bd38      	pop	{r3, r4, r5, pc}
    568c:	0000564b 	.word	0x0000564b
    5690:	0000c0ec 	.word	0x0000c0ec
    5694:	00005645 	.word	0x00005645

00005698 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5698:	6803      	ldr	r3, [r0, #0]
    569a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    569c:	6001      	str	r1, [r0, #0]
    569e:	4770      	bx	lr

000056a0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    56a0:	b570      	push	{r4, r5, r6, lr}
    56a2:	4605      	mov	r5, r0
    56a4:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    56a6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    56a8:	4b0a      	ldr	r3, [pc, #40]	; (56d4 <list_insert_at_end+0x34>)
    56aa:	4798      	blx	r3
    56ac:	f080 0001 	eor.w	r0, r0, #1
    56b0:	224f      	movs	r2, #79	; 0x4f
    56b2:	4909      	ldr	r1, [pc, #36]	; (56d8 <list_insert_at_end+0x38>)
    56b4:	b2c0      	uxtb	r0, r0
    56b6:	4b09      	ldr	r3, [pc, #36]	; (56dc <list_insert_at_end+0x3c>)
    56b8:	4798      	blx	r3

	if (!list->head) {
    56ba:	682b      	ldr	r3, [r5, #0]
    56bc:	b91b      	cbnz	r3, 56c6 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    56be:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    56c0:	6033      	str	r3, [r6, #0]
		return;
    56c2:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    56c4:	461c      	mov	r4, r3
	while (it->next) {
    56c6:	6823      	ldr	r3, [r4, #0]
    56c8:	2b00      	cmp	r3, #0
    56ca:	d1fb      	bne.n	56c4 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    56cc:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    56ce:	6033      	str	r3, [r6, #0]
    56d0:	bd70      	pop	{r4, r5, r6, pc}
    56d2:	bf00      	nop
    56d4:	0000564b 	.word	0x0000564b
    56d8:	0000c0ec 	.word	0x0000c0ec
    56dc:	00005645 	.word	0x00005645

000056e0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    56e0:	6803      	ldr	r3, [r0, #0]
    56e2:	b10b      	cbz	r3, 56e8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    56e4:	681a      	ldr	r2, [r3, #0]
    56e6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    56e8:	4618      	mov	r0, r3
    56ea:	4770      	bx	lr

000056ec <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    56ec:	b570      	push	{r4, r5, r6, lr}
    56ee:	460e      	mov	r6, r1
    56f0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    56f2:	4604      	mov	r4, r0
    56f4:	b178      	cbz	r0, 5716 <ringbuffer_init+0x2a>
    56f6:	b181      	cbz	r1, 571a <ringbuffer_init+0x2e>
    56f8:	b1a2      	cbz	r2, 5724 <ringbuffer_init+0x38>
    56fa:	2001      	movs	r0, #1
    56fc:	2228      	movs	r2, #40	; 0x28
    56fe:	490d      	ldr	r1, [pc, #52]	; (5734 <ringbuffer_init+0x48>)
    5700:	4b0d      	ldr	r3, [pc, #52]	; (5738 <ringbuffer_init+0x4c>)
    5702:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5704:	1e6b      	subs	r3, r5, #1
    5706:	421d      	tst	r5, r3
    5708:	d109      	bne.n	571e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    570a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    570c:	2000      	movs	r0, #0
    570e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5710:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5712:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5714:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5716:	2000      	movs	r0, #0
    5718:	e7f0      	b.n	56fc <ringbuffer_init+0x10>
    571a:	2000      	movs	r0, #0
    571c:	e7ee      	b.n	56fc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    571e:	f06f 000c 	mvn.w	r0, #12
    5722:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5724:	2228      	movs	r2, #40	; 0x28
    5726:	4903      	ldr	r1, [pc, #12]	; (5734 <ringbuffer_init+0x48>)
    5728:	2000      	movs	r0, #0
    572a:	4b03      	ldr	r3, [pc, #12]	; (5738 <ringbuffer_init+0x4c>)
    572c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    572e:	1e6b      	subs	r3, r5, #1
    5730:	e7eb      	b.n	570a <ringbuffer_init+0x1e>
    5732:	bf00      	nop
    5734:	0000c10c 	.word	0x0000c10c
    5738:	00005645 	.word	0x00005645

0000573c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    573c:	b538      	push	{r3, r4, r5, lr}
    573e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5740:	4604      	mov	r4, r0
    5742:	b1a0      	cbz	r0, 576e <ringbuffer_get+0x32>
    5744:	1c08      	adds	r0, r1, #0
    5746:	bf18      	it	ne
    5748:	2001      	movne	r0, #1
    574a:	2240      	movs	r2, #64	; 0x40
    574c:	490a      	ldr	r1, [pc, #40]	; (5778 <ringbuffer_get+0x3c>)
    574e:	4b0b      	ldr	r3, [pc, #44]	; (577c <ringbuffer_get+0x40>)
    5750:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5752:	68a3      	ldr	r3, [r4, #8]
    5754:	68e2      	ldr	r2, [r4, #12]
    5756:	429a      	cmp	r2, r3
    5758:	d00b      	beq.n	5772 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    575a:	6862      	ldr	r2, [r4, #4]
    575c:	4013      	ands	r3, r2
    575e:	6822      	ldr	r2, [r4, #0]
    5760:	5cd3      	ldrb	r3, [r2, r3]
    5762:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5764:	68a3      	ldr	r3, [r4, #8]
    5766:	3301      	adds	r3, #1
    5768:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    576a:	2000      	movs	r0, #0
    576c:	bd38      	pop	{r3, r4, r5, pc}
    576e:	2000      	movs	r0, #0
    5770:	e7eb      	b.n	574a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5772:	f06f 0009 	mvn.w	r0, #9
}
    5776:	bd38      	pop	{r3, r4, r5, pc}
    5778:	0000c10c 	.word	0x0000c10c
    577c:	00005645 	.word	0x00005645

00005780 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5780:	b538      	push	{r3, r4, r5, lr}
    5782:	460d      	mov	r5, r1
	ASSERT(rb);
    5784:	4604      	mov	r4, r0
    5786:	2251      	movs	r2, #81	; 0x51
    5788:	490b      	ldr	r1, [pc, #44]	; (57b8 <ringbuffer_put+0x38>)
    578a:	3000      	adds	r0, #0
    578c:	bf18      	it	ne
    578e:	2001      	movne	r0, #1
    5790:	4b0a      	ldr	r3, [pc, #40]	; (57bc <ringbuffer_put+0x3c>)
    5792:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5794:	68e3      	ldr	r3, [r4, #12]
    5796:	6862      	ldr	r2, [r4, #4]
    5798:	4013      	ands	r3, r2
    579a:	6822      	ldr	r2, [r4, #0]
    579c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    579e:	68e3      	ldr	r3, [r4, #12]
    57a0:	6861      	ldr	r1, [r4, #4]
    57a2:	68a2      	ldr	r2, [r4, #8]
    57a4:	1a9a      	subs	r2, r3, r2
    57a6:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    57a8:	bf84      	itt	hi
    57aa:	1a59      	subhi	r1, r3, r1
    57ac:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    57ae:	3301      	adds	r3, #1
    57b0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    57b2:	2000      	movs	r0, #0
    57b4:	bd38      	pop	{r3, r4, r5, pc}
    57b6:	bf00      	nop
    57b8:	0000c10c 	.word	0x0000c10c
    57bc:	00005645 	.word	0x00005645

000057c0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    57c0:	b510      	push	{r4, lr}
	ASSERT(rb);
    57c2:	4604      	mov	r4, r0
    57c4:	2267      	movs	r2, #103	; 0x67
    57c6:	4905      	ldr	r1, [pc, #20]	; (57dc <ringbuffer_num+0x1c>)
    57c8:	3000      	adds	r0, #0
    57ca:	bf18      	it	ne
    57cc:	2001      	movne	r0, #1
    57ce:	4b04      	ldr	r3, [pc, #16]	; (57e0 <ringbuffer_num+0x20>)
    57d0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    57d2:	68e0      	ldr	r0, [r4, #12]
    57d4:	68a3      	ldr	r3, [r4, #8]
}
    57d6:	1ac0      	subs	r0, r0, r3
    57d8:	bd10      	pop	{r4, pc}
    57da:	bf00      	nop
    57dc:	0000c10c 	.word	0x0000c10c
    57e0:	00005645 	.word	0x00005645

000057e4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    57e4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    57e6:	4a06      	ldr	r2, [pc, #24]	; (5800 <_sbrk+0x1c>)
    57e8:	6812      	ldr	r2, [r2, #0]
    57ea:	b122      	cbz	r2, 57f6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    57ec:	4a04      	ldr	r2, [pc, #16]	; (5800 <_sbrk+0x1c>)
    57ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    57f0:	4403      	add	r3, r0
    57f2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    57f4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    57f6:	4903      	ldr	r1, [pc, #12]	; (5804 <_sbrk+0x20>)
    57f8:	4a01      	ldr	r2, [pc, #4]	; (5800 <_sbrk+0x1c>)
    57fa:	6011      	str	r1, [r2, #0]
    57fc:	e7f6      	b.n	57ec <_sbrk+0x8>
    57fe:	bf00      	nop
    5800:	200007fc 	.word	0x200007fc
    5804:	20013d10 	.word	0x20013d10

00005808 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5808:	6940      	ldr	r0, [r0, #20]
    580a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    580e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5812:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5814:	0040      	lsls	r0, r0, #1
    5816:	3076      	adds	r0, #118	; 0x76
}
    5818:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    581c:	4770      	bx	lr
	...

00005820 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5820:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5822:	f013 0f01 	tst.w	r3, #1
    5826:	d11b      	bne.n	5860 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5828:	6b03      	ldr	r3, [r0, #48]	; 0x30
    582a:	f013 0f03 	tst.w	r3, #3
    582e:	d1fb      	bne.n	5828 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5830:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5832:	f013 0f02 	tst.w	r3, #2
    5836:	d00d      	beq.n	5854 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5838:	8803      	ldrh	r3, [r0, #0]
    583a:	f023 0302 	bic.w	r3, r3, #2
    583e:	041b      	lsls	r3, r3, #16
    5840:	0c1b      	lsrs	r3, r3, #16
    5842:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5844:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5846:	f013 0f03 	tst.w	r3, #3
    584a:	d1fb      	bne.n	5844 <_adc_init+0x24>
    584c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    584e:	f013 0f02 	tst.w	r3, #2
    5852:	d1fb      	bne.n	584c <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5854:	2301      	movs	r3, #1
    5856:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5858:	6b03      	ldr	r3, [r0, #48]	; 0x30
    585a:	f013 0f03 	tst.w	r3, #3
    585e:	d1fb      	bne.n	5858 <_adc_init+0x38>
    5860:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5862:	f013 0f01 	tst.w	r3, #1
    5866:	d1fb      	bne.n	5860 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5868:	2316      	movs	r3, #22
    586a:	4a37      	ldr	r2, [pc, #220]	; (5948 <_adc_init+0x128>)
    586c:	fb03 2301 	mla	r3, r3, r1, r2
    5870:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5872:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5874:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5876:	f3c3 030b 	ubfx	r3, r3, #0, #12
    587a:	2b00      	cmp	r3, #0
    587c:	d1fa      	bne.n	5874 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    587e:	2316      	movs	r3, #22
    5880:	4a31      	ldr	r2, [pc, #196]	; (5948 <_adc_init+0x128>)
    5882:	fb03 2301 	mla	r3, r3, r1, r2
    5886:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5888:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    588a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    588c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5890:	2b00      	cmp	r3, #0
    5892:	d1fa      	bne.n	588a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5894:	2316      	movs	r3, #22
    5896:	4a2c      	ldr	r2, [pc, #176]	; (5948 <_adc_init+0x128>)
    5898:	fb03 2301 	mla	r3, r3, r1, r2
    589c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    589e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    58a0:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    58a2:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    58a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    58a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    58aa:	2b00      	cmp	r3, #0
    58ac:	d1fa      	bne.n	58a4 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    58ae:	2316      	movs	r3, #22
    58b0:	4a25      	ldr	r2, [pc, #148]	; (5948 <_adc_init+0x128>)
    58b2:	fb03 2301 	mla	r3, r3, r1, r2
    58b6:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    58b8:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    58ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    58bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    58c0:	2b00      	cmp	r3, #0
    58c2:	d1fa      	bne.n	58ba <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    58c4:	2316      	movs	r3, #22
    58c6:	4a20      	ldr	r2, [pc, #128]	; (5948 <_adc_init+0x128>)
    58c8:	fb03 2301 	mla	r3, r3, r1, r2
    58cc:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    58ce:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    58d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    58d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    58d6:	2b00      	cmp	r3, #0
    58d8:	d1fa      	bne.n	58d0 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    58da:	2316      	movs	r3, #22
    58dc:	4a1a      	ldr	r2, [pc, #104]	; (5948 <_adc_init+0x128>)
    58de:	fb03 2301 	mla	r3, r3, r1, r2
    58e2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    58e4:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    58e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    58e8:	f013 0f80 	tst.w	r3, #128	; 0x80
    58ec:	d1fb      	bne.n	58e6 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    58ee:	2316      	movs	r3, #22
    58f0:	4a15      	ldr	r2, [pc, #84]	; (5948 <_adc_init+0x128>)
    58f2:	fb03 2301 	mla	r3, r3, r1, r2
    58f6:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    58f8:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    58fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    58fc:	f413 7f80 	tst.w	r3, #256	; 0x100
    5900:	d1fb      	bne.n	58fa <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5902:	2316      	movs	r3, #22
    5904:	4a10      	ldr	r2, [pc, #64]	; (5948 <_adc_init+0x128>)
    5906:	fb03 2301 	mla	r3, r3, r1, r2
    590a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    590c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    590e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5910:	f413 7f00 	tst.w	r3, #512	; 0x200
    5914:	d1fb      	bne.n	590e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5916:	2316      	movs	r3, #22
    5918:	4a0b      	ldr	r2, [pc, #44]	; (5948 <_adc_init+0x128>)
    591a:	fb03 2301 	mla	r3, r3, r1, r2
    591e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5920:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5922:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5924:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5928:	d1fb      	bne.n	5922 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    592a:	2216      	movs	r2, #22
    592c:	4b06      	ldr	r3, [pc, #24]	; (5948 <_adc_init+0x128>)
    592e:	fb02 3101 	mla	r1, r2, r1, r3
    5932:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5934:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5936:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5938:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    593a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    593c:	f013 0f03 	tst.w	r3, #3
    5940:	d1fb      	bne.n	593a <_adc_init+0x11a>

	return ERR_NONE;
}
    5942:	2000      	movs	r0, #0
    5944:	4770      	bx	lr
    5946:	bf00      	nop
    5948:	0000c130 	.word	0x0000c130

0000594c <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    594c:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    594e:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5950:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5954:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5958:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    595a:	f013 0f01 	tst.w	r3, #1
    595e:	d106      	bne.n	596e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5960:	f013 0f02 	tst.w	r3, #2
    5964:	d10d      	bne.n	5982 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5966:	f013 0f04 	tst.w	r3, #4
    596a:	d111      	bne.n	5990 <_adc_interrupt_handler+0x44>
    596c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    596e:	2301      	movs	r3, #1
    5970:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5974:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5978:	6883      	ldr	r3, [r0, #8]
    597a:	b292      	uxth	r2, r2
    597c:	2100      	movs	r1, #0
    597e:	4798      	blx	r3
    5980:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5982:	2302      	movs	r3, #2
    5984:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5988:	6843      	ldr	r3, [r0, #4]
    598a:	2100      	movs	r1, #0
    598c:	4798      	blx	r3
    598e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5990:	2304      	movs	r3, #4
    5992:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5996:	6803      	ldr	r3, [r0, #0]
    5998:	2100      	movs	r1, #0
    599a:	4798      	blx	r3
	}
}
    599c:	e7e6      	b.n	596c <_adc_interrupt_handler+0x20>
	...

000059a0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    59a0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    59a4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    59a8:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    59ac:	b148      	cbz	r0, 59c2 <_adc_get_regs+0x22>
    59ae:	2801      	cmp	r0, #1
    59b0:	d009      	beq.n	59c6 <_adc_get_regs+0x26>
{
    59b2:	b508      	push	{r3, lr}
	ASSERT(false);
    59b4:	228c      	movs	r2, #140	; 0x8c
    59b6:	4905      	ldr	r1, [pc, #20]	; (59cc <_adc_get_regs+0x2c>)
    59b8:	2000      	movs	r0, #0
    59ba:	4b05      	ldr	r3, [pc, #20]	; (59d0 <_adc_get_regs+0x30>)
    59bc:	4798      	blx	r3
	return 0;
    59be:	2000      	movs	r0, #0
    59c0:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    59c2:	2000      	movs	r0, #0
    59c4:	4770      	bx	lr
    59c6:	2001      	movs	r0, #1
    59c8:	4770      	bx	lr
    59ca:	bf00      	nop
    59cc:	0000c15c 	.word	0x0000c15c
    59d0:	00005645 	.word	0x00005645

000059d4 <_adc_async_init>:
{
    59d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59d8:	460c      	mov	r4, r1
	ASSERT(device);
    59da:	4605      	mov	r5, r0
    59dc:	22e6      	movs	r2, #230	; 0xe6
    59de:	493b      	ldr	r1, [pc, #236]	; (5acc <_adc_async_init+0xf8>)
    59e0:	3000      	adds	r0, #0
    59e2:	bf18      	it	ne
    59e4:	2001      	movne	r0, #1
    59e6:	4b3a      	ldr	r3, [pc, #232]	; (5ad0 <_adc_async_init+0xfc>)
    59e8:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    59ea:	4620      	mov	r0, r4
    59ec:	4b39      	ldr	r3, [pc, #228]	; (5ad4 <_adc_async_init+0x100>)
    59ee:	4798      	blx	r3
    59f0:	4601      	mov	r1, r0
    59f2:	4620      	mov	r0, r4
    59f4:	4b38      	ldr	r3, [pc, #224]	; (5ad8 <_adc_async_init+0x104>)
    59f6:	4798      	blx	r3
	if (init_status) {
    59f8:	4606      	mov	r6, r0
    59fa:	b110      	cbz	r0, 5a02 <_adc_async_init+0x2e>
}
    59fc:	4630      	mov	r0, r6
    59fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5a02:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5a04:	4b35      	ldr	r3, [pc, #212]	; (5adc <_adc_async_init+0x108>)
    5a06:	429c      	cmp	r4, r3
    5a08:	d05c      	beq.n	5ac4 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5a0a:	4b35      	ldr	r3, [pc, #212]	; (5ae0 <_adc_async_init+0x10c>)
    5a0c:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5a0e:	bf04      	itt	eq
    5a10:	4b34      	ldreq	r3, [pc, #208]	; (5ae4 <_adc_async_init+0x110>)
    5a12:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5a14:	4628      	mov	r0, r5
    5a16:	4f34      	ldr	r7, [pc, #208]	; (5ae8 <_adc_async_init+0x114>)
    5a18:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a1a:	0943      	lsrs	r3, r0, #5
    5a1c:	f000 001f 	and.w	r0, r0, #31
    5a20:	2401      	movs	r4, #1
    5a22:	fa04 f000 	lsl.w	r0, r4, r0
    5a26:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5aec <_adc_async_init+0x118>
    5a2a:	3320      	adds	r3, #32
    5a2c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a34:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5a38:	4628      	mov	r0, r5
    5a3a:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a3c:	0943      	lsrs	r3, r0, #5
    5a3e:	f000 001f 	and.w	r0, r0, #31
    5a42:	fa04 f000 	lsl.w	r0, r4, r0
    5a46:	3360      	adds	r3, #96	; 0x60
    5a48:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5a4c:	4628      	mov	r0, r5
    5a4e:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a50:	0943      	lsrs	r3, r0, #5
    5a52:	f000 001f 	and.w	r0, r0, #31
    5a56:	4084      	lsls	r4, r0
    5a58:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5a5c:	4628      	mov	r0, r5
    5a5e:	47b8      	blx	r7
    5a60:	3001      	adds	r0, #1
    5a62:	b280      	uxth	r0, r0
    5a64:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5a66:	2b00      	cmp	r3, #0
    5a68:	dbc8      	blt.n	59fc <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a6a:	095b      	lsrs	r3, r3, #5
    5a6c:	f000 001f 	and.w	r0, r0, #31
    5a70:	2201      	movs	r2, #1
    5a72:	fa02 f000 	lsl.w	r0, r2, r0
    5a76:	3320      	adds	r3, #32
    5a78:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a80:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5a84:	4628      	mov	r0, r5
    5a86:	47b8      	blx	r7
    5a88:	3001      	adds	r0, #1
    5a8a:	b280      	uxth	r0, r0
    5a8c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5a8e:	2b00      	cmp	r3, #0
    5a90:	dbb4      	blt.n	59fc <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a92:	095b      	lsrs	r3, r3, #5
    5a94:	f000 001f 	and.w	r0, r0, #31
    5a98:	2201      	movs	r2, #1
    5a9a:	fa02 f000 	lsl.w	r0, r2, r0
    5a9e:	3360      	adds	r3, #96	; 0x60
    5aa0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5aa4:	4628      	mov	r0, r5
    5aa6:	47b8      	blx	r7
    5aa8:	3001      	adds	r0, #1
    5aaa:	b280      	uxth	r0, r0
    5aac:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5aae:	2b00      	cmp	r3, #0
    5ab0:	dba4      	blt.n	59fc <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ab2:	095b      	lsrs	r3, r3, #5
    5ab4:	f000 001f 	and.w	r0, r0, #31
    5ab8:	2201      	movs	r2, #1
    5aba:	fa02 f000 	lsl.w	r0, r2, r0
    5abe:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5ac2:	e79b      	b.n	59fc <_adc_async_init+0x28>
		_adc0_dev = dev;
    5ac4:	4b07      	ldr	r3, [pc, #28]	; (5ae4 <_adc_async_init+0x110>)
    5ac6:	601d      	str	r5, [r3, #0]
    5ac8:	e7a4      	b.n	5a14 <_adc_async_init+0x40>
    5aca:	bf00      	nop
    5acc:	0000c15c 	.word	0x0000c15c
    5ad0:	00005645 	.word	0x00005645
    5ad4:	000059a1 	.word	0x000059a1
    5ad8:	00005821 	.word	0x00005821
    5adc:	43001c00 	.word	0x43001c00
    5ae0:	43002000 	.word	0x43002000
    5ae4:	20000800 	.word	0x20000800
    5ae8:	00005809 	.word	0x00005809
    5aec:	e000e100 	.word	0xe000e100

00005af0 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5af0:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5af2:	8813      	ldrh	r3, [r2, #0]
    5af4:	b29b      	uxth	r3, r3
    5af6:	f043 0302 	orr.w	r3, r3, #2
    5afa:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5afc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5afe:	f013 0f03 	tst.w	r3, #3
    5b02:	d1fb      	bne.n	5afc <_adc_async_enable_channel+0xc>
}
    5b04:	4770      	bx	lr

00005b06 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5b06:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5b08:	88db      	ldrh	r3, [r3, #6]
    5b0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5b0e:	2b03      	cmp	r3, #3
}
    5b10:	bf0c      	ite	eq
    5b12:	2001      	moveq	r0, #1
    5b14:	2002      	movne	r0, #2
    5b16:	4770      	bx	lr

00005b18 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5b18:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5b1a:	7d13      	ldrb	r3, [r2, #20]
    5b1c:	f043 0302 	orr.w	r3, r3, #2
    5b20:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b22:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d1fa      	bne.n	5b22 <_adc_async_convert+0xa>
}
    5b2c:	4770      	bx	lr

00005b2e <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5b2e:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5b30:	2a01      	cmp	r2, #1
    5b32:	d007      	beq.n	5b44 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5b34:	2a02      	cmp	r2, #2
    5b36:	d00e      	beq.n	5b56 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5b38:	b91a      	cbnz	r2, 5b42 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5b3a:	b1ab      	cbz	r3, 5b68 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5b3c:	2301      	movs	r3, #1
    5b3e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5b42:	4770      	bx	lr
	if (value == 0x0) {
    5b44:	b91b      	cbnz	r3, 5b4e <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5b46:	2304      	movs	r3, #4
    5b48:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5b4c:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5b4e:	2304      	movs	r3, #4
    5b50:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5b54:	4770      	bx	lr
	if (value == 0x0) {
    5b56:	b91b      	cbnz	r3, 5b60 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5b58:	2302      	movs	r3, #2
    5b5a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5b5e:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5b60:	2302      	movs	r3, #2
    5b62:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5b66:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5b68:	2301      	movs	r3, #1
    5b6a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5b6e:	4770      	bx	lr

00005b70 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5b70:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5b72:	4b02      	ldr	r3, [pc, #8]	; (5b7c <ADC0_0_Handler+0xc>)
    5b74:	6818      	ldr	r0, [r3, #0]
    5b76:	4b02      	ldr	r3, [pc, #8]	; (5b80 <ADC0_0_Handler+0x10>)
    5b78:	4798      	blx	r3
    5b7a:	bd08      	pop	{r3, pc}
    5b7c:	20000800 	.word	0x20000800
    5b80:	0000594d 	.word	0x0000594d

00005b84 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5b84:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5b86:	4b02      	ldr	r3, [pc, #8]	; (5b90 <ADC0_1_Handler+0xc>)
    5b88:	6818      	ldr	r0, [r3, #0]
    5b8a:	4b02      	ldr	r3, [pc, #8]	; (5b94 <ADC0_1_Handler+0x10>)
    5b8c:	4798      	blx	r3
    5b8e:	bd08      	pop	{r3, pc}
    5b90:	20000800 	.word	0x20000800
    5b94:	0000594d 	.word	0x0000594d

00005b98 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5b98:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5b9a:	4b02      	ldr	r3, [pc, #8]	; (5ba4 <ADC1_0_Handler+0xc>)
    5b9c:	6858      	ldr	r0, [r3, #4]
    5b9e:	4b02      	ldr	r3, [pc, #8]	; (5ba8 <ADC1_0_Handler+0x10>)
    5ba0:	4798      	blx	r3
    5ba2:	bd08      	pop	{r3, pc}
    5ba4:	20000800 	.word	0x20000800
    5ba8:	0000594d 	.word	0x0000594d

00005bac <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    5bac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5bae:	4b02      	ldr	r3, [pc, #8]	; (5bb8 <ADC1_1_Handler+0xc>)
    5bb0:	6858      	ldr	r0, [r3, #4]
    5bb2:	4b02      	ldr	r3, [pc, #8]	; (5bbc <ADC1_1_Handler+0x10>)
    5bb4:	4798      	blx	r3
    5bb6:	bd08      	pop	{r3, pc}
    5bb8:	20000800 	.word	0x20000800
    5bbc:	0000594d 	.word	0x0000594d

00005bc0 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5bc0:	0943      	lsrs	r3, r0, #5
    5bc2:	f000 001f 	and.w	r0, r0, #31
    5bc6:	2201      	movs	r2, #1
    5bc8:	fa02 f000 	lsl.w	r0, r2, r0
    5bcc:	3340      	adds	r3, #64	; 0x40
    5bce:	4a02      	ldr	r2, [pc, #8]	; (5bd8 <_irq_set+0x18>)
    5bd0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5bd4:	4770      	bx	lr
    5bd6:	bf00      	nop
    5bd8:	e000e100 	.word	0xe000e100

00005bdc <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5bdc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5be0:	00c0      	lsls	r0, r0, #3
    5be2:	4770      	bx	lr

00005be4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5be4:	4b01      	ldr	r3, [pc, #4]	; (5bec <_get_cycles_for_ms+0x8>)
    5be6:	fb03 f000 	mul.w	r0, r3, r0
    5bea:	4770      	bx	lr
    5bec:	0001d4c0 	.word	0x0001d4c0

00005bf0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5bf0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5bf2:	4a0e      	ldr	r2, [pc, #56]	; (5c2c <_init_chip+0x3c>)
    5bf4:	8813      	ldrh	r3, [r2, #0]
    5bf6:	b29b      	uxth	r3, r3
    5bf8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5bfc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    5bfe:	4b0c      	ldr	r3, [pc, #48]	; (5c30 <_init_chip+0x40>)
    5c00:	4798      	blx	r3
	_oscctrl_init_sources();
    5c02:	4b0c      	ldr	r3, [pc, #48]	; (5c34 <_init_chip+0x44>)
    5c04:	4798      	blx	r3
	_mclk_init();
    5c06:	4b0c      	ldr	r3, [pc, #48]	; (5c38 <_init_chip+0x48>)
    5c08:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5c0a:	2004      	movs	r0, #4
    5c0c:	4c0b      	ldr	r4, [pc, #44]	; (5c3c <_init_chip+0x4c>)
    5c0e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    5c10:	4b0b      	ldr	r3, [pc, #44]	; (5c40 <_init_chip+0x50>)
    5c12:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5c14:	f640 70fb 	movw	r0, #4091	; 0xffb
    5c18:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5c1a:	4a0a      	ldr	r2, [pc, #40]	; (5c44 <_init_chip+0x54>)
    5c1c:	6913      	ldr	r3, [r2, #16]
    5c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5c22:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5c24:	4b08      	ldr	r3, [pc, #32]	; (5c48 <_init_chip+0x58>)
    5c26:	4798      	blx	r3
    5c28:	bd10      	pop	{r4, pc}
    5c2a:	bf00      	nop
    5c2c:	41004000 	.word	0x41004000
    5c30:	00006111 	.word	0x00006111
    5c34:	00006125 	.word	0x00006125
    5c38:	00005ff5 	.word	0x00005ff5
    5c3c:	00005f7d 	.word	0x00005f7d
    5c40:	00006129 	.word	0x00006129
    5c44:	40000800 	.word	0x40000800
    5c48:	00005cc1 	.word	0x00005cc1

00005c4c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5c4c:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    5c4e:	4a1a      	ldr	r2, [pc, #104]	; (5cb8 <_dmac_handler+0x6c>)
    5c50:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    5c52:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5c56:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5c5a:	4818      	ldr	r0, [pc, #96]	; (5cbc <_dmac_handler+0x70>)
    5c5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    5c60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5c64:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5c68:	f012 0f01 	tst.w	r2, #1
    5c6c:	d10a      	bne.n	5c84 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    5c6e:	011a      	lsls	r2, r3, #4
    5c70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5c74:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5c78:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5c7c:	f012 0f02 	tst.w	r2, #2
    5c80:	d10b      	bne.n	5c9a <_dmac_handler+0x4e>
    5c82:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5c84:	011a      	lsls	r2, r3, #4
    5c86:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5c8a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5c8e:	2101      	movs	r1, #1
    5c90:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    5c94:	6843      	ldr	r3, [r0, #4]
    5c96:	4798      	blx	r3
    5c98:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    5c9a:	011a      	lsls	r2, r3, #4
    5c9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5ca0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5ca4:	2102      	movs	r1, #2
    5ca6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    5caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5cae:	4a03      	ldr	r2, [pc, #12]	; (5cbc <_dmac_handler+0x70>)
    5cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cb4:	4798      	blx	r3
	}
}
    5cb6:	e7e4      	b.n	5c82 <_dmac_handler+0x36>
    5cb8:	4100a000 	.word	0x4100a000
    5cbc:	20000808 	.word	0x20000808

00005cc0 <_dma_init>:
{
    5cc0:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    5cc2:	4a32      	ldr	r2, [pc, #200]	; (5d8c <_dma_init+0xcc>)
    5cc4:	8813      	ldrh	r3, [r2, #0]
    5cc6:	f023 0302 	bic.w	r3, r3, #2
    5cca:	041b      	lsls	r3, r3, #16
    5ccc:	0c1b      	lsrs	r3, r3, #16
    5cce:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    5cd0:	8853      	ldrh	r3, [r2, #2]
    5cd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    5cd6:	041b      	lsls	r3, r3, #16
    5cd8:	0c1b      	lsrs	r3, r3, #16
    5cda:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    5cdc:	8813      	ldrh	r3, [r2, #0]
    5cde:	b29b      	uxth	r3, r3
    5ce0:	f043 0301 	orr.w	r3, r3, #1
    5ce4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    5ce6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    5ce8:	f013 0f01 	tst.w	r3, #1
    5cec:	d1fb      	bne.n	5ce6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    5cee:	4b27      	ldr	r3, [pc, #156]	; (5d8c <_dma_init+0xcc>)
    5cf0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    5cf4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    5cf6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    5cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    5cfc:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    5d00:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    5d02:	2100      	movs	r1, #0
    5d04:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    5d06:	4a22      	ldr	r2, [pc, #136]	; (5d90 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    5d08:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    5d0a:	4a22      	ldr	r2, [pc, #136]	; (5d94 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    5d0c:	639a      	str	r2, [r3, #56]	; 0x38
    5d0e:	4b22      	ldr	r3, [pc, #136]	; (5d98 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5d10:	4c1f      	ldr	r4, [pc, #124]	; (5d90 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5d12:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    5d14:	681d      	ldr	r5, [r3, #0]
    5d16:	0108      	lsls	r0, r1, #4
    5d18:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5d1c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    5d20:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    5d22:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    5d24:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    5d28:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    5d2a:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    5d2e:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5d30:	1822      	adds	r2, r4, r0
    5d32:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5d34:	60d6      	str	r6, [r2, #12]
    5d36:	3101      	adds	r1, #1
    5d38:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    5d3a:	2920      	cmp	r1, #32
    5d3c:	d1ea      	bne.n	5d14 <_dma_init+0x54>
    5d3e:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d40:	2001      	movs	r0, #1
    5d42:	4916      	ldr	r1, [pc, #88]	; (5d9c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    5d44:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    5d46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5d4a:	d00b      	beq.n	5d64 <_dma_init+0xa4>
    5d4c:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    5d4e:	2b24      	cmp	r3, #36	; 0x24
    5d50:	d1f8      	bne.n	5d44 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    5d52:	4a0e      	ldr	r2, [pc, #56]	; (5d8c <_dma_init+0xcc>)
    5d54:	8813      	ldrh	r3, [r2, #0]
    5d56:	b29b      	uxth	r3, r3
    5d58:	f043 0302 	orr.w	r3, r3, #2
    5d5c:	8013      	strh	r3, [r2, #0]
}
    5d5e:	2000      	movs	r0, #0
    5d60:	bc70      	pop	{r4, r5, r6}
    5d62:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d64:	095c      	lsrs	r4, r3, #5
    5d66:	f002 021f 	and.w	r2, r2, #31
    5d6a:	fa00 f202 	lsl.w	r2, r0, r2
    5d6e:	f104 0520 	add.w	r5, r4, #32
    5d72:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d7a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d7e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    5d82:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d86:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    5d8a:	e7df      	b.n	5d4c <_dma_init+0x8c>
    5d8c:	4100a000 	.word	0x4100a000
    5d90:	200038f0 	.word	0x200038f0
    5d94:	20003af0 	.word	0x20003af0
    5d98:	0000c174 	.word	0x0000c174
    5d9c:	e000e100 	.word	0xe000e100

00005da0 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    5da0:	b991      	cbnz	r1, 5dc8 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    5da2:	b942      	cbnz	r2, 5db6 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    5da4:	0100      	lsls	r0, r0, #4
    5da6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5daa:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5dae:	2302      	movs	r3, #2
    5db0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    5db4:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    5db6:	0100      	lsls	r0, r0, #4
    5db8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5dbc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5dc0:	2302      	movs	r3, #2
    5dc2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    5dc6:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    5dc8:	2901      	cmp	r1, #1
    5dca:	d000      	beq.n	5dce <_dma_set_irq_state+0x2e>
    5dcc:	4770      	bx	lr
	if (value == 0x0) {
    5dce:	b142      	cbz	r2, 5de2 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    5dd0:	0100      	lsls	r0, r0, #4
    5dd2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5dd6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5dda:	2301      	movs	r3, #1
    5ddc:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    5de0:	e7f4      	b.n	5dcc <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    5de2:	0100      	lsls	r0, r0, #4
    5de4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5de8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5dec:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    5df0:	4770      	bx	lr
	...

00005df4 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5df4:	4b02      	ldr	r3, [pc, #8]	; (5e00 <_dma_set_destination_address+0xc>)
    5df6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5dfa:	6081      	str	r1, [r0, #8]
}
    5dfc:	2000      	movs	r0, #0
    5dfe:	4770      	bx	lr
    5e00:	200038f0 	.word	0x200038f0

00005e04 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5e04:	4b02      	ldr	r3, [pc, #8]	; (5e10 <_dma_set_source_address+0xc>)
    5e06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5e0a:	6041      	str	r1, [r0, #4]
}
    5e0c:	2000      	movs	r0, #0
    5e0e:	4770      	bx	lr
    5e10:	200038f0 	.word	0x200038f0

00005e14 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5e14:	4a05      	ldr	r2, [pc, #20]	; (5e2c <_dma_srcinc_enable+0x18>)
    5e16:	0100      	lsls	r0, r0, #4
    5e18:	5a13      	ldrh	r3, [r2, r0]
    5e1a:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    5e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    5e20:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    5e24:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    5e26:	5211      	strh	r1, [r2, r0]
}
    5e28:	2000      	movs	r0, #0
    5e2a:	4770      	bx	lr
    5e2c:	200038f0 	.word	0x200038f0

00005e30 <_dma_set_data_amount>:
{
    5e30:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    5e32:	4c14      	ldr	r4, [pc, #80]	; (5e84 <_dma_set_data_amount+0x54>)
    5e34:	0102      	lsls	r2, r0, #4
    5e36:	18a3      	adds	r3, r4, r2
    5e38:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5e3a:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    5e3c:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5e40:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    5e42:	f412 6f00 	tst.w	r2, #2048	; 0x800
    5e46:	d006      	beq.n	5e56 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5e48:	fa01 f403 	lsl.w	r4, r1, r3
    5e4c:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5e4e:	4a0d      	ldr	r2, [pc, #52]	; (5e84 <_dma_set_data_amount+0x54>)
    5e50:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    5e54:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    5e56:	4c0b      	ldr	r4, [pc, #44]	; (5e84 <_dma_set_data_amount+0x54>)
    5e58:	0102      	lsls	r2, r0, #4
    5e5a:	18a5      	adds	r5, r4, r2
    5e5c:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5e5e:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    5e60:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5e64:	d005      	beq.n	5e72 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5e66:	fa01 f303 	lsl.w	r3, r1, r3
    5e6a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5e6c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    5e70:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    5e72:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    5e74:	4b03      	ldr	r3, [pc, #12]	; (5e84 <_dma_set_data_amount+0x54>)
    5e76:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5e7a:	8041      	strh	r1, [r0, #2]
}
    5e7c:	2000      	movs	r0, #0
    5e7e:	bc30      	pop	{r4, r5}
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop
    5e84:	200038f0 	.word	0x200038f0

00005e88 <_dma_enable_transaction>:
{
    5e88:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    5e8a:	4c0d      	ldr	r4, [pc, #52]	; (5ec0 <_dma_enable_transaction+0x38>)
    5e8c:	0103      	lsls	r3, r0, #4
    5e8e:	5ae2      	ldrh	r2, [r4, r3]
    5e90:	b292      	uxth	r2, r2
    5e92:	f042 0201 	orr.w	r2, r2, #1
    5e96:	52e2      	strh	r2, [r4, r3]
    5e98:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5e9c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    5ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5ea2:	f042 0202 	orr.w	r2, r2, #2
    5ea6:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    5ea8:	b131      	cbz	r1, 5eb8 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    5eaa:	4a06      	ldr	r2, [pc, #24]	; (5ec4 <_dma_enable_transaction+0x3c>)
    5eac:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    5eae:	2301      	movs	r3, #1
    5eb0:	fa03 f000 	lsl.w	r0, r3, r0
    5eb4:	4308      	orrs	r0, r1
    5eb6:	6110      	str	r0, [r2, #16]
}
    5eb8:	2000      	movs	r0, #0
    5eba:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ebe:	4770      	bx	lr
    5ec0:	200038f0 	.word	0x200038f0
    5ec4:	4100a000 	.word	0x4100a000

00005ec8 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    5ec8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ecc:	4b02      	ldr	r3, [pc, #8]	; (5ed8 <_dma_get_channel_resource+0x10>)
    5ece:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5ed2:	6001      	str	r1, [r0, #0]
}
    5ed4:	2000      	movs	r0, #0
    5ed6:	4770      	bx	lr
    5ed8:	20000808 	.word	0x20000808

00005edc <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    5edc:	b508      	push	{r3, lr}
	_dmac_handler();
    5ede:	4b01      	ldr	r3, [pc, #4]	; (5ee4 <DMAC_0_Handler+0x8>)
    5ee0:	4798      	blx	r3
    5ee2:	bd08      	pop	{r3, pc}
    5ee4:	00005c4d 	.word	0x00005c4d

00005ee8 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    5ee8:	b508      	push	{r3, lr}
	_dmac_handler();
    5eea:	4b01      	ldr	r3, [pc, #4]	; (5ef0 <DMAC_1_Handler+0x8>)
    5eec:	4798      	blx	r3
    5eee:	bd08      	pop	{r3, pc}
    5ef0:	00005c4d 	.word	0x00005c4d

00005ef4 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    5ef4:	b508      	push	{r3, lr}
	_dmac_handler();
    5ef6:	4b01      	ldr	r3, [pc, #4]	; (5efc <DMAC_2_Handler+0x8>)
    5ef8:	4798      	blx	r3
    5efa:	bd08      	pop	{r3, pc}
    5efc:	00005c4d 	.word	0x00005c4d

00005f00 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    5f00:	b508      	push	{r3, lr}
	_dmac_handler();
    5f02:	4b01      	ldr	r3, [pc, #4]	; (5f08 <DMAC_3_Handler+0x8>)
    5f04:	4798      	blx	r3
    5f06:	bd08      	pop	{r3, pc}
    5f08:	00005c4d 	.word	0x00005c4d

00005f0c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    5f0c:	b508      	push	{r3, lr}
	_dmac_handler();
    5f0e:	4b01      	ldr	r3, [pc, #4]	; (5f14 <DMAC_4_Handler+0x8>)
    5f10:	4798      	blx	r3
    5f12:	bd08      	pop	{r3, pc}
    5f14:	00005c4d 	.word	0x00005c4d

00005f18 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    5f18:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    5f1a:	2000      	movs	r0, #0
    5f1c:	4770      	bx	lr
	...

00005f20 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5f20:	b430      	push	{r4, r5}
    5f22:	4814      	ldr	r0, [pc, #80]	; (5f74 <_event_system_init+0x54>)
    5f24:	f100 0543 	add.w	r5, r0, #67	; 0x43
    5f28:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5f2a:	4c13      	ldr	r4, [pc, #76]	; (5f78 <_event_system_init+0x58>)
    5f2c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5f2e:	f813 1b01 	ldrb.w	r1, [r3], #1
    5f32:	3248      	adds	r2, #72	; 0x48
    5f34:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    5f38:	42ab      	cmp	r3, r5
    5f3a:	d1f7      	bne.n	5f2c <_event_system_init+0xc>
    5f3c:	480d      	ldr	r0, [pc, #52]	; (5f74 <_event_system_init+0x54>)
    5f3e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    5f42:	3080      	adds	r0, #128	; 0x80
    5f44:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5f46:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5f4a:	00ca      	lsls	r2, r1, #3
    5f4c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5f50:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5f54:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5f56:	f850 3f04 	ldr.w	r3, [r0, #4]!
    5f5a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5f5c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5f60:	43db      	mvns	r3, r3
    5f62:	b2db      	uxtb	r3, r3
    5f64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5f68:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5f6a:	2920      	cmp	r1, #32
    5f6c:	d1eb      	bne.n	5f46 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    5f6e:	2000      	movs	r0, #0
    5f70:	bc30      	pop	{r4, r5}
    5f72:	4770      	bx	lr
    5f74:	0000c274 	.word	0x0000c274
    5f78:	4100e000 	.word	0x4100e000

00005f7c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5f7c:	f010 0f01 	tst.w	r0, #1
    5f80:	d008      	beq.n	5f94 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5f82:	4a17      	ldr	r2, [pc, #92]	; (5fe0 <_gclk_init_generators_by_fref+0x64>)
    5f84:	4b17      	ldr	r3, [pc, #92]	; (5fe4 <_gclk_init_generators_by_fref+0x68>)
    5f86:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5f88:	4619      	mov	r1, r3
    5f8a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5f8e:	684b      	ldr	r3, [r1, #4]
    5f90:	4213      	tst	r3, r2
    5f92:	d1fc      	bne.n	5f8e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5f94:	f010 0f02 	tst.w	r0, #2
    5f98:	d008      	beq.n	5fac <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5f9a:	4a13      	ldr	r2, [pc, #76]	; (5fe8 <_gclk_init_generators_by_fref+0x6c>)
    5f9c:	4b11      	ldr	r3, [pc, #68]	; (5fe4 <_gclk_init_generators_by_fref+0x68>)
    5f9e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5fa0:	4619      	mov	r1, r3
    5fa2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5fa6:	684b      	ldr	r3, [r1, #4]
    5fa8:	4213      	tst	r3, r2
    5faa:	d1fc      	bne.n	5fa6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5fac:	f010 0f04 	tst.w	r0, #4
    5fb0:	d008      	beq.n	5fc4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5fb2:	4a0e      	ldr	r2, [pc, #56]	; (5fec <_gclk_init_generators_by_fref+0x70>)
    5fb4:	4b0b      	ldr	r3, [pc, #44]	; (5fe4 <_gclk_init_generators_by_fref+0x68>)
    5fb6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5fb8:	4619      	mov	r1, r3
    5fba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5fbe:	684b      	ldr	r3, [r1, #4]
    5fc0:	4213      	tst	r3, r2
    5fc2:	d1fc      	bne.n	5fbe <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5fc4:	f010 0f08 	tst.w	r0, #8
    5fc8:	d008      	beq.n	5fdc <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5fca:	4a09      	ldr	r2, [pc, #36]	; (5ff0 <_gclk_init_generators_by_fref+0x74>)
    5fcc:	4b05      	ldr	r3, [pc, #20]	; (5fe4 <_gclk_init_generators_by_fref+0x68>)
    5fce:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5fd0:	4619      	mov	r1, r3
    5fd2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5fd6:	684b      	ldr	r3, [r1, #4]
    5fd8:	4213      	tst	r3, r2
    5fda:	d1fc      	bne.n	5fd6 <_gclk_init_generators_by_fref+0x5a>
    5fdc:	4770      	bx	lr
    5fde:	bf00      	nop
    5fe0:	00010108 	.word	0x00010108
    5fe4:	40001c00 	.word	0x40001c00
    5fe8:	00010106 	.word	0x00010106
    5fec:	00100106 	.word	0x00100106
    5ff0:	00010104 	.word	0x00010104

00005ff4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    5ff4:	2201      	movs	r2, #1
    5ff6:	4b01      	ldr	r3, [pc, #4]	; (5ffc <_mclk_init+0x8>)
    5ff8:	715a      	strb	r2, [r3, #5]
    5ffa:	4770      	bx	lr
    5ffc:	40000800 	.word	0x40000800

00006000 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6000:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6002:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6004:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6006:	f012 0f01 	tst.w	r2, #1
    600a:	d005      	beq.n	6018 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    600c:	2201      	movs	r2, #1
    600e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6010:	6803      	ldr	r3, [r0, #0]
    6012:	b153      	cbz	r3, 602a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6014:	4798      	blx	r3
    6016:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6018:	8a1a      	ldrh	r2, [r3, #16]
    601a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    601c:	b12a      	cbz	r2, 602a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    601e:	f240 225e 	movw	r2, #606	; 0x25e
    6022:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6024:	6843      	ldr	r3, [r0, #4]
    6026:	b103      	cbz	r3, 602a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6028:	4798      	blx	r3
    602a:	bd08      	pop	{r3, pc}

0000602c <_flash_init>:
{
    602c:	b538      	push	{r3, r4, r5, lr}
    602e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    6030:	4605      	mov	r5, r0
    6032:	b350      	cbz	r0, 608a <_flash_init+0x5e>
    6034:	4816      	ldr	r0, [pc, #88]	; (6090 <_flash_init+0x64>)
    6036:	4281      	cmp	r1, r0
    6038:	bf14      	ite	ne
    603a:	2000      	movne	r0, #0
    603c:	2001      	moveq	r0, #1
    603e:	224b      	movs	r2, #75	; 0x4b
    6040:	4914      	ldr	r1, [pc, #80]	; (6094 <_flash_init+0x68>)
    6042:	4b15      	ldr	r3, [pc, #84]	; (6098 <_flash_init+0x6c>)
    6044:	4798      	blx	r3
	device->hw = hw;
    6046:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6048:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    604a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    604e:	049b      	lsls	r3, r3, #18
    6050:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    6052:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6054:	4b11      	ldr	r3, [pc, #68]	; (609c <_flash_init+0x70>)
    6056:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6058:	4b11      	ldr	r3, [pc, #68]	; (60a0 <_flash_init+0x74>)
    605a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    605e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6066:	f3bf 8f6f 	isb	sy
    606a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    606e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6072:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6076:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    607a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    607e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6082:	6019      	str	r1, [r3, #0]
    6084:	601a      	str	r2, [r3, #0]
}
    6086:	2000      	movs	r0, #0
    6088:	bd38      	pop	{r3, r4, r5, pc}
    608a:	2000      	movs	r0, #0
    608c:	e7d7      	b.n	603e <_flash_init+0x12>
    608e:	bf00      	nop
    6090:	41004000 	.word	0x41004000
    6094:	0000c378 	.word	0x0000c378
    6098:	00005645 	.word	0x00005645
    609c:	20000988 	.word	0x20000988
    60a0:	e000e100 	.word	0xe000e100

000060a4 <_flash_get_page_size>:
}
    60a4:	f44f 7000 	mov.w	r0, #512	; 0x200
    60a8:	4770      	bx	lr

000060aa <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    60aa:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    60ac:	6898      	ldr	r0, [r3, #8]
}
    60ae:	b280      	uxth	r0, r0
    60b0:	4770      	bx	lr

000060b2 <_flash_lock>:
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    60b2:	f421 53ff 	bic.w	r3, r1, #8160	; 0x1fe0
    60b6:	f023 031f 	bic.w	r3, r3, #31
	if ((page_nums != region_pages) || (dst_addr != block_start_addr)) {
    60ba:	2a40      	cmp	r2, #64	; 0x40
    60bc:	d10d      	bne.n	60da <_flash_lock+0x28>
    60be:	4299      	cmp	r1, r3
    60c0:	d10e      	bne.n	60e0 <_flash_lock+0x2e>
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    60c2:	6902      	ldr	r2, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    60c4:	8a53      	ldrh	r3, [r2, #18]
    60c6:	f013 0f01 	tst.w	r3, #1
    60ca:	d0fb      	beq.n	60c4 <_flash_lock+0x12>
}

static inline void hri_nvmctrl_write_ADDR_reg(const void *const hw, hri_nvmctrl_addr_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->ADDR.reg = data;
    60cc:	6151      	str	r1, [r2, #20]
	hri_nvmctrl_write_CTRLB_reg(device->hw, NVMCTRL_CTRLB_CMD_LR | NVMCTRL_CTRLB_CMDEX_KEY);
    60ce:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    60d0:	f24a 5211 	movw	r2, #42257	; 0xa511
    60d4:	809a      	strh	r2, [r3, #4]
	return (int32_t)FLASH_SIZE / (NVMCTRL_REGIONS_NUM * NVMCTRL_PAGE_SIZE);
    60d6:	2040      	movs	r0, #64	; 0x40
    60d8:	4770      	bx	lr
		return ERR_INVALID_ARG;
    60da:	f06f 000c 	mvn.w	r0, #12
    60de:	4770      	bx	lr
    60e0:	f06f 000c 	mvn.w	r0, #12
}
    60e4:	4770      	bx	lr
	...

000060e8 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    60e8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    60ea:	4b02      	ldr	r3, [pc, #8]	; (60f4 <NVMCTRL_0_Handler+0xc>)
    60ec:	6818      	ldr	r0, [r3, #0]
    60ee:	4b02      	ldr	r3, [pc, #8]	; (60f8 <NVMCTRL_0_Handler+0x10>)
    60f0:	4798      	blx	r3
    60f2:	bd08      	pop	{r3, pc}
    60f4:	20000988 	.word	0x20000988
    60f8:	00006001 	.word	0x00006001

000060fc <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    60fc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    60fe:	4b02      	ldr	r3, [pc, #8]	; (6108 <NVMCTRL_1_Handler+0xc>)
    6100:	6818      	ldr	r0, [r3, #0]
    6102:	4b02      	ldr	r3, [pc, #8]	; (610c <NVMCTRL_1_Handler+0x10>)
    6104:	4798      	blx	r3
    6106:	bd08      	pop	{r3, pc}
    6108:	20000988 	.word	0x20000988
    610c:	00006001 	.word	0x00006001

00006110 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6110:	4b03      	ldr	r3, [pc, #12]	; (6120 <_osc32kctrl_init_sources+0x10>)
    6112:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6114:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6118:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    611a:	2201      	movs	r2, #1
    611c:	741a      	strb	r2, [r3, #16]
    611e:	4770      	bx	lr
    6120:	40001400 	.word	0x40001400

00006124 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6124:	4770      	bx	lr
	...

00006128 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6128:	4a47      	ldr	r2, [pc, #284]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    612a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    612c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6130:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6134:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6136:	4611      	mov	r1, r2
    6138:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    613c:	684b      	ldr	r3, [r1, #4]
    613e:	4213      	tst	r3, r2
    6140:	d1fc      	bne.n	613c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6142:	4a41      	ldr	r2, [pc, #260]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    6144:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6146:	f013 0f04 	tst.w	r3, #4
    614a:	d1fb      	bne.n	6144 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    614c:	4b3f      	ldr	r3, [pc, #252]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    614e:	2200      	movs	r2, #0
    6150:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6152:	4a3f      	ldr	r2, [pc, #252]	; (6250 <_oscctrl_init_referenced_generators+0x128>)
    6154:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6156:	461a      	mov	r2, r3
    6158:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    615c:	f013 0f10 	tst.w	r3, #16
    6160:	d1fa      	bne.n	6158 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6162:	2200      	movs	r2, #0
    6164:	4b39      	ldr	r3, [pc, #228]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    6166:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    616a:	461a      	mov	r2, r3
    616c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6170:	f013 0f04 	tst.w	r3, #4
    6174:	d1fa      	bne.n	616c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6176:	2202      	movs	r2, #2
    6178:	4b34      	ldr	r3, [pc, #208]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    617a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    617c:	461a      	mov	r2, r3
    617e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6182:	f013 0f02 	tst.w	r3, #2
    6186:	d1fa      	bne.n	617e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6188:	4b30      	ldr	r3, [pc, #192]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    618a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    618c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    618e:	461a      	mov	r2, r3
    6190:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6194:	f013 0f08 	tst.w	r3, #8
    6198:	d1fa      	bne.n	6190 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    619a:	2288      	movs	r2, #136	; 0x88
    619c:	4b2b      	ldr	r3, [pc, #172]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    619e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    61a2:	461a      	mov	r2, r3
    61a4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    61a8:	f013 0f04 	tst.w	r3, #4
    61ac:	d1fa      	bne.n	61a4 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    61ae:	2242      	movs	r2, #66	; 0x42
    61b0:	4b25      	ldr	r3, [pc, #148]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    61b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    61b6:	2227      	movs	r2, #39	; 0x27
    61b8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    61bc:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    61be:	461a      	mov	r2, r3
    61c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    61c2:	f013 0f06 	tst.w	r3, #6
    61c6:	d1fb      	bne.n	61c0 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    61c8:	4b20      	ldr	r3, [pc, #128]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    61ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
    61ce:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    61d0:	2202      	movs	r2, #2
    61d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    61d6:	461a      	mov	r2, r3
    61d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    61da:	f013 0f02 	tst.w	r3, #2
    61de:	d1fb      	bne.n	61d8 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    61e0:	4b1a      	ldr	r3, [pc, #104]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    61e2:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    61e6:	f013 0f01 	tst.w	r3, #1
    61ea:	d026      	beq.n	623a <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    61ec:	4a17      	ldr	r2, [pc, #92]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    61ee:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    61f0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    61f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    61f8:	d1f9      	bne.n	61ee <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    61fa:	4b14      	ldr	r3, [pc, #80]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    61fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    61fe:	f012 0f01 	tst.w	r2, #1
    6202:	d103      	bne.n	620c <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6206:	f012 0f02 	tst.w	r2, #2
    620a:	d0f7      	beq.n	61fc <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    620c:	4a0e      	ldr	r2, [pc, #56]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    620e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6210:	2b00      	cmp	r3, #0
    6212:	d1fc      	bne.n	620e <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6214:	4a0c      	ldr	r2, [pc, #48]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    6216:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6218:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    621c:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6220:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6222:	4611      	mov	r1, r2
    6224:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6228:	684b      	ldr	r3, [r1, #4]
    622a:	4213      	tst	r3, r2
    622c:	d1fc      	bne.n	6228 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    622e:	4a06      	ldr	r2, [pc, #24]	; (6248 <_oscctrl_init_referenced_generators+0x120>)
    6230:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6232:	f013 0f04 	tst.w	r3, #4
    6236:	d1fb      	bne.n	6230 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6238:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    623a:	4a04      	ldr	r2, [pc, #16]	; (624c <_oscctrl_init_referenced_generators+0x124>)
    623c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    623e:	f413 7f80 	tst.w	r3, #256	; 0x100
    6242:	d0fb      	beq.n	623c <_oscctrl_init_referenced_generators+0x114>
    6244:	e7d9      	b.n	61fa <_oscctrl_init_referenced_generators+0xd2>
    6246:	bf00      	nop
    6248:	40001c00 	.word	0x40001c00
    624c:	40001000 	.word	0x40001000
    6250:	04010000 	.word	0x04010000

00006254 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    6254:	b500      	push	{lr}
    6256:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    6258:	4b0d      	ldr	r3, [pc, #52]	; (6290 <RAMECC_Handler+0x3c>)
    625a:	789b      	ldrb	r3, [r3, #2]
    625c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    625e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6260:	9b01      	ldr	r3, [sp, #4]
    6262:	f013 0f02 	tst.w	r3, #2
    6266:	d006      	beq.n	6276 <RAMECC_Handler+0x22>
    6268:	4b0a      	ldr	r3, [pc, #40]	; (6294 <RAMECC_Handler+0x40>)
    626a:	681b      	ldr	r3, [r3, #0]
    626c:	b11b      	cbz	r3, 6276 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    626e:	4a08      	ldr	r2, [pc, #32]	; (6290 <RAMECC_Handler+0x3c>)
    6270:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6272:	4798      	blx	r3
    6274:	e009      	b.n	628a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	f013 0f01 	tst.w	r3, #1
    627c:	d005      	beq.n	628a <RAMECC_Handler+0x36>
    627e:	4b05      	ldr	r3, [pc, #20]	; (6294 <RAMECC_Handler+0x40>)
    6280:	685b      	ldr	r3, [r3, #4]
    6282:	b113      	cbz	r3, 628a <RAMECC_Handler+0x36>
    6284:	4a02      	ldr	r2, [pc, #8]	; (6290 <RAMECC_Handler+0x3c>)
    6286:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6288:	4798      	blx	r3
	} else {
		return;
	}
}
    628a:	b003      	add	sp, #12
    628c:	f85d fb04 	ldr.w	pc, [sp], #4
    6290:	41020000 	.word	0x41020000
    6294:	20003cf0 	.word	0x20003cf0

00006298 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6298:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    629a:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    629c:	6913      	ldr	r3, [r2, #16]
    629e:	f013 0f60 	tst.w	r3, #96	; 0x60
    62a2:	d1fb      	bne.n	629c <_rtc_timer_set_period+0x4>
}
    62a4:	4770      	bx	lr

000062a6 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    62a6:	68c2      	ldr	r2, [r0, #12]
    62a8:	6913      	ldr	r3, [r2, #16]
    62aa:	f013 0f60 	tst.w	r3, #96	; 0x60
    62ae:	d1fb      	bne.n	62a8 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    62b0:	6a10      	ldr	r0, [r2, #32]
}
    62b2:	4770      	bx	lr

000062b4 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    62b4:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    62b6:	f248 0103 	movw	r1, #32771	; 0x8003
    62ba:	6913      	ldr	r3, [r2, #16]
    62bc:	420b      	tst	r3, r1
    62be:	d1fc      	bne.n	62ba <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    62c0:	8810      	ldrh	r0, [r2, #0]
}
    62c2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    62c6:	4770      	bx	lr

000062c8 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    62c8:	4770      	bx	lr
	...

000062cc <_rtc_timer_init>:
{
    62cc:	b538      	push	{r3, r4, r5, lr}
    62ce:	460c      	mov	r4, r1
	ASSERT(dev);
    62d0:	4605      	mov	r5, r0
    62d2:	2230      	movs	r2, #48	; 0x30
    62d4:	4914      	ldr	r1, [pc, #80]	; (6328 <_rtc_timer_init+0x5c>)
    62d6:	3000      	adds	r0, #0
    62d8:	bf18      	it	ne
    62da:	2001      	movne	r0, #1
    62dc:	4b13      	ldr	r3, [pc, #76]	; (632c <_rtc_timer_init+0x60>)
    62de:	4798      	blx	r3
	dev->hw = hw;
    62e0:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    62e2:	2301      	movs	r3, #1
    62e4:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    62e6:	f248 0203 	movw	r2, #32771	; 0x8003
    62ea:	6923      	ldr	r3, [r4, #16]
    62ec:	4213      	tst	r3, r2
    62ee:	d1fc      	bne.n	62ea <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    62f0:	68eb      	ldr	r3, [r5, #12]
    62f2:	691a      	ldr	r2, [r3, #16]
    62f4:	f012 0f01 	tst.w	r2, #1
    62f8:	d1fb      	bne.n	62f2 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    62fa:	f248 0280 	movw	r2, #32896	; 0x8080
    62fe:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6300:	f248 0103 	movw	r1, #32771	; 0x8003
    6304:	691a      	ldr	r2, [r3, #16]
    6306:	420a      	tst	r2, r1
    6308:	d1fc      	bne.n	6304 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    630a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    630c:	2301      	movs	r3, #1
    630e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6310:	6913      	ldr	r3, [r2, #16]
    6312:	f013 0f60 	tst.w	r3, #96	; 0x60
    6316:	d1fb      	bne.n	6310 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6318:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    631a:	f44f 7280 	mov.w	r2, #256	; 0x100
    631e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    6320:	4b03      	ldr	r3, [pc, #12]	; (6330 <_rtc_timer_init+0x64>)
    6322:	601d      	str	r5, [r3, #0]
}
    6324:	2000      	movs	r0, #0
    6326:	bd38      	pop	{r3, r4, r5, pc}
    6328:	0000c398 	.word	0x0000c398
    632c:	00005645 	.word	0x00005645
    6330:	2000098c 	.word	0x2000098c

00006334 <_rtc_timer_deinit>:
{
    6334:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6336:	4604      	mov	r4, r0
    6338:	b1c8      	cbz	r0, 636e <_rtc_timer_deinit+0x3a>
    633a:	68c0      	ldr	r0, [r0, #12]
    633c:	3000      	adds	r0, #0
    633e:	bf18      	it	ne
    6340:	2001      	movne	r0, #1
    6342:	2252      	movs	r2, #82	; 0x52
    6344:	490b      	ldr	r1, [pc, #44]	; (6374 <_rtc_timer_deinit+0x40>)
    6346:	4b0c      	ldr	r3, [pc, #48]	; (6378 <_rtc_timer_deinit+0x44>)
    6348:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    634a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    634e:	4b0b      	ldr	r3, [pc, #44]	; (637c <_rtc_timer_deinit+0x48>)
    6350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6358:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    635c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    635e:	2301      	movs	r3, #1
    6360:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6362:	f248 0103 	movw	r1, #32771	; 0x8003
    6366:	6913      	ldr	r3, [r2, #16]
    6368:	420b      	tst	r3, r1
    636a:	d1fc      	bne.n	6366 <_rtc_timer_deinit+0x32>
}
    636c:	bd10      	pop	{r4, pc}
    636e:	2000      	movs	r0, #0
    6370:	e7e7      	b.n	6342 <_rtc_timer_deinit+0xe>
    6372:	bf00      	nop
    6374:	0000c398 	.word	0x0000c398
    6378:	00005645 	.word	0x00005645
    637c:	e000e100 	.word	0xe000e100

00006380 <_rtc_timer_start>:
{
    6380:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6382:	4604      	mov	r4, r0
    6384:	b310      	cbz	r0, 63cc <_rtc_timer_start+0x4c>
    6386:	68c0      	ldr	r0, [r0, #12]
    6388:	3000      	adds	r0, #0
    638a:	bf18      	it	ne
    638c:	2001      	movne	r0, #1
    638e:	225e      	movs	r2, #94	; 0x5e
    6390:	490f      	ldr	r1, [pc, #60]	; (63d0 <_rtc_timer_start+0x50>)
    6392:	4b10      	ldr	r3, [pc, #64]	; (63d4 <_rtc_timer_start+0x54>)
    6394:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6396:	f44f 6200 	mov.w	r2, #2048	; 0x800
    639a:	4b0f      	ldr	r3, [pc, #60]	; (63d8 <_rtc_timer_start+0x58>)
    639c:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    639e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    63a0:	2300      	movs	r3, #0
    63a2:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    63a4:	6913      	ldr	r3, [r2, #16]
    63a6:	f013 0f08 	tst.w	r3, #8
    63aa:	d1fb      	bne.n	63a4 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    63ac:	68e3      	ldr	r3, [r4, #12]
    63ae:	691a      	ldr	r2, [r3, #16]
    63b0:	f012 0f08 	tst.w	r2, #8
    63b4:	d1fb      	bne.n	63ae <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    63b6:	881a      	ldrh	r2, [r3, #0]
    63b8:	b292      	uxth	r2, r2
    63ba:	f042 0202 	orr.w	r2, r2, #2
    63be:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    63c0:	f248 0103 	movw	r1, #32771	; 0x8003
    63c4:	691a      	ldr	r2, [r3, #16]
    63c6:	420a      	tst	r2, r1
    63c8:	d1fc      	bne.n	63c4 <_rtc_timer_start+0x44>
}
    63ca:	bd10      	pop	{r4, pc}
    63cc:	2000      	movs	r0, #0
    63ce:	e7de      	b.n	638e <_rtc_timer_start+0xe>
    63d0:	0000c398 	.word	0x0000c398
    63d4:	00005645 	.word	0x00005645
    63d8:	e000e100 	.word	0xe000e100

000063dc <_rtc_timer_stop>:
{
    63dc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    63de:	4604      	mov	r4, r0
    63e0:	b1a0      	cbz	r0, 640c <_rtc_timer_stop+0x30>
    63e2:	68c0      	ldr	r0, [r0, #12]
    63e4:	3000      	adds	r0, #0
    63e6:	bf18      	it	ne
    63e8:	2001      	movne	r0, #1
    63ea:	226b      	movs	r2, #107	; 0x6b
    63ec:	4908      	ldr	r1, [pc, #32]	; (6410 <_rtc_timer_stop+0x34>)
    63ee:	4b09      	ldr	r3, [pc, #36]	; (6414 <_rtc_timer_stop+0x38>)
    63f0:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    63f2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    63f4:	8813      	ldrh	r3, [r2, #0]
    63f6:	f023 0302 	bic.w	r3, r3, #2
    63fa:	041b      	lsls	r3, r3, #16
    63fc:	0c1b      	lsrs	r3, r3, #16
    63fe:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6400:	f248 0103 	movw	r1, #32771	; 0x8003
    6404:	6913      	ldr	r3, [r2, #16]
    6406:	420b      	tst	r3, r1
    6408:	d1fc      	bne.n	6404 <_rtc_timer_stop+0x28>
}
    640a:	bd10      	pop	{r4, pc}
    640c:	2000      	movs	r0, #0
    640e:	e7ec      	b.n	63ea <_rtc_timer_stop+0xe>
    6410:	0000c398 	.word	0x0000c398
    6414:	00005645 	.word	0x00005645

00006418 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6418:	4800      	ldr	r0, [pc, #0]	; (641c <_rtc_get_timer+0x4>)
    641a:	4770      	bx	lr
    641c:	20000358 	.word	0x20000358

00006420 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6420:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    6422:	4b08      	ldr	r3, [pc, #32]	; (6444 <RTC_Handler+0x24>)
    6424:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6426:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6428:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    642a:	f413 7f80 	tst.w	r3, #256	; 0x100
    642e:	d007      	beq.n	6440 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6430:	6823      	ldr	r3, [r4, #0]
    6432:	b10b      	cbz	r3, 6438 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    6434:	4620      	mov	r0, r4
    6436:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6438:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    643a:	f44f 7280 	mov.w	r2, #256	; 0x100
    643e:	819a      	strh	r2, [r3, #12]
    6440:	bd10      	pop	{r4, pc}
    6442:	bf00      	nop
    6444:	2000098c 	.word	0x2000098c

00006448 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6448:	b470      	push	{r4, r5, r6}
    644a:	b089      	sub	sp, #36	; 0x24
    644c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    644e:	466c      	mov	r4, sp
    6450:	4d0d      	ldr	r5, [pc, #52]	; (6488 <_sercom_get_hardware_index+0x40>)
    6452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6456:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    645a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    645e:	9b00      	ldr	r3, [sp, #0]
    6460:	42b3      	cmp	r3, r6
    6462:	d00d      	beq.n	6480 <_sercom_get_hardware_index+0x38>
    6464:	4631      	mov	r1, r6
    6466:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6468:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    646a:	f853 2b04 	ldr.w	r2, [r3], #4
    646e:	428a      	cmp	r2, r1
    6470:	d007      	beq.n	6482 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6472:	3001      	adds	r0, #1
    6474:	2808      	cmp	r0, #8
    6476:	d1f8      	bne.n	646a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6478:	2000      	movs	r0, #0
}
    647a:	b009      	add	sp, #36	; 0x24
    647c:	bc70      	pop	{r4, r5, r6}
    647e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6480:	2000      	movs	r0, #0
			return i;
    6482:	b2c0      	uxtb	r0, r0
    6484:	e7f9      	b.n	647a <_sercom_get_hardware_index+0x32>
    6486:	bf00      	nop
    6488:	0000c3b0 	.word	0x0000c3b0

0000648c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    648c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    648e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6490:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6492:	f013 0f01 	tst.w	r3, #1
    6496:	d003      	beq.n	64a0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6498:	7da3      	ldrb	r3, [r4, #22]
    649a:	f013 0f01 	tst.w	r3, #1
    649e:	d112      	bne.n	64c6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    64a0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    64a2:	f013 0f02 	tst.w	r3, #2
    64a6:	d003      	beq.n	64b0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    64a8:	7da3      	ldrb	r3, [r4, #22]
    64aa:	f013 0f02 	tst.w	r3, #2
    64ae:	d10f      	bne.n	64d0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    64b0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    64b2:	f013 0f04 	tst.w	r3, #4
    64b6:	d015      	beq.n	64e4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    64b8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    64ba:	f003 0337 	and.w	r3, r3, #55	; 0x37
    64be:	b163      	cbz	r3, 64da <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    64c0:	23ff      	movs	r3, #255	; 0xff
    64c2:	8363      	strh	r3, [r4, #26]
    64c4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    64c6:	2301      	movs	r3, #1
    64c8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    64ca:	6803      	ldr	r3, [r0, #0]
    64cc:	4798      	blx	r3
    64ce:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    64d0:	2302      	movs	r3, #2
    64d2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    64d4:	6883      	ldr	r3, [r0, #8]
    64d6:	4798      	blx	r3
    64d8:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    64da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    64dc:	6843      	ldr	r3, [r0, #4]
    64de:	b2c9      	uxtb	r1, r1
    64e0:	4798      	blx	r3
    64e2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    64e4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    64e6:	09db      	lsrs	r3, r3, #7
    64e8:	d100      	bne.n	64ec <_sercom_usart_interrupt_handler+0x60>
    64ea:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    64ec:	2380      	movs	r3, #128	; 0x80
    64ee:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    64f0:	68c3      	ldr	r3, [r0, #12]
    64f2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    64f4:	8b63      	ldrh	r3, [r4, #26]
    64f6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    64f8:	8363      	strh	r3, [r4, #26]
    64fa:	e7f6      	b.n	64ea <_sercom_usart_interrupt_handler+0x5e>

000064fc <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    64fc:	4b14      	ldr	r3, [pc, #80]	; (6550 <_sercom_init_irq_param+0x54>)
    64fe:	4298      	cmp	r0, r3
    6500:	d014      	beq.n	652c <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6502:	4b14      	ldr	r3, [pc, #80]	; (6554 <_sercom_init_irq_param+0x58>)
    6504:	4298      	cmp	r0, r3
    6506:	d014      	beq.n	6532 <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    6508:	4b13      	ldr	r3, [pc, #76]	; (6558 <_sercom_init_irq_param+0x5c>)
    650a:	4298      	cmp	r0, r3
    650c:	d014      	beq.n	6538 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    650e:	4b13      	ldr	r3, [pc, #76]	; (655c <_sercom_init_irq_param+0x60>)
    6510:	4298      	cmp	r0, r3
    6512:	d014      	beq.n	653e <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6514:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6518:	d014      	beq.n	6544 <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    651a:	4b11      	ldr	r3, [pc, #68]	; (6560 <_sercom_init_irq_param+0x64>)
    651c:	4298      	cmp	r0, r3
    651e:	d014      	beq.n	654a <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6520:	4b10      	ldr	r3, [pc, #64]	; (6564 <_sercom_init_irq_param+0x68>)
    6522:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    6524:	bf04      	itt	eq
    6526:	4b10      	ldreq	r3, [pc, #64]	; (6568 <_sercom_init_irq_param+0x6c>)
    6528:	6199      	streq	r1, [r3, #24]
    652a:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    652c:	4b0e      	ldr	r3, [pc, #56]	; (6568 <_sercom_init_irq_param+0x6c>)
    652e:	6019      	str	r1, [r3, #0]
    6530:	e7ed      	b.n	650e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6532:	4b0d      	ldr	r3, [pc, #52]	; (6568 <_sercom_init_irq_param+0x6c>)
    6534:	6059      	str	r1, [r3, #4]
    6536:	e7ed      	b.n	6514 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    6538:	4b0b      	ldr	r3, [pc, #44]	; (6568 <_sercom_init_irq_param+0x6c>)
    653a:	6099      	str	r1, [r3, #8]
    653c:	e7ed      	b.n	651a <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    653e:	4b0a      	ldr	r3, [pc, #40]	; (6568 <_sercom_init_irq_param+0x6c>)
    6540:	60d9      	str	r1, [r3, #12]
    6542:	e7ed      	b.n	6520 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6544:	4b08      	ldr	r3, [pc, #32]	; (6568 <_sercom_init_irq_param+0x6c>)
    6546:	6119      	str	r1, [r3, #16]
    6548:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    654a:	4b07      	ldr	r3, [pc, #28]	; (6568 <_sercom_init_irq_param+0x6c>)
    654c:	6159      	str	r1, [r3, #20]
    654e:	4770      	bx	lr
    6550:	40003000 	.word	0x40003000
    6554:	40003400 	.word	0x40003400
    6558:	41012000 	.word	0x41012000
    655c:	41014000 	.word	0x41014000
    6560:	43000400 	.word	0x43000400
    6564:	43000800 	.word	0x43000800
    6568:	20000990 	.word	0x20000990

0000656c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    656c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    656e:	4b03      	ldr	r3, [pc, #12]	; (657c <_sercom_get_irq_num+0x10>)
    6570:	4798      	blx	r3
    6572:	0080      	lsls	r0, r0, #2
    6574:	302e      	adds	r0, #46	; 0x2e
}
    6576:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    657a:	bd08      	pop	{r3, pc}
    657c:	00006449 	.word	0x00006449

00006580 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6580:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6582:	f013 0f01 	tst.w	r3, #1
    6586:	d109      	bne.n	659c <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6588:	6803      	ldr	r3, [r0, #0]
    658a:	f043 0302 	orr.w	r3, r3, #2
    658e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6590:	69c3      	ldr	r3, [r0, #28]
    6592:	f013 0f03 	tst.w	r3, #3
    6596:	d1fb      	bne.n	6590 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6598:	2000      	movs	r0, #0
    659a:	4770      	bx	lr
		return ERR_BUSY;
    659c:	f06f 0003 	mvn.w	r0, #3
}
    65a0:	4770      	bx	lr
	...

000065a4 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    65a4:	b538      	push	{r3, r4, r5, lr}
    65a6:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    65a8:	4b0b      	ldr	r3, [pc, #44]	; (65d8 <_spi_async_enable+0x34>)
    65aa:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    65ac:	4620      	mov	r0, r4
    65ae:	4b0b      	ldr	r3, [pc, #44]	; (65dc <_spi_async_enable+0x38>)
    65b0:	4798      	blx	r3
    65b2:	1d01      	adds	r1, r0, #4
    65b4:	b2c9      	uxtb	r1, r1
    65b6:	2501      	movs	r5, #1
    65b8:	4c09      	ldr	r4, [pc, #36]	; (65e0 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    65ba:	1c43      	adds	r3, r0, #1
    65bc:	b2db      	uxtb	r3, r3
    65be:	0942      	lsrs	r2, r0, #5
    65c0:	f000 001f 	and.w	r0, r0, #31
    65c4:	fa05 f000 	lsl.w	r0, r5, r0
    65c8:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    65cc:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    65ce:	4299      	cmp	r1, r3
    65d0:	d1f3      	bne.n	65ba <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    65d2:	2000      	movs	r0, #0
    65d4:	bd38      	pop	{r3, r4, r5, pc}
    65d6:	bf00      	nop
    65d8:	00006581 	.word	0x00006581
    65dc:	0000656d 	.word	0x0000656d
    65e0:	e000e100 	.word	0xe000e100

000065e4 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    65e4:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    65e6:	f013 0f03 	tst.w	r3, #3
    65ea:	d111      	bne.n	6610 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    65ec:	69c3      	ldr	r3, [r0, #28]
    65ee:	f013 0f03 	tst.w	r3, #3
    65f2:	d1fb      	bne.n	65ec <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    65f4:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    65f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    65fa:	0709      	lsls	r1, r1, #28
    65fc:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6600:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6602:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6604:	69c3      	ldr	r3, [r0, #28]
    6606:	f013 0f03 	tst.w	r3, #3
    660a:	d1fb      	bne.n	6604 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    660c:	2000      	movs	r0, #0
    660e:	4770      	bx	lr
		return ERR_BUSY;
    6610:	f06f 0003 	mvn.w	r0, #3
}
    6614:	4770      	bx	lr

00006616 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6616:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6618:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    661a:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    661c:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    661e:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6620:	f013 0f01 	tst.w	r3, #1
    6624:	d109      	bne.n	663a <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6626:	f013 0f04 	tst.w	r3, #4
    662a:	d109      	bne.n	6640 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    662c:	f013 0f02 	tst.w	r3, #2
    6630:	d109      	bne.n	6646 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6632:	f013 0f80 	tst.w	r3, #128	; 0x80
    6636:	d10b      	bne.n	6650 <_spi_handler+0x3a>
    6638:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    663a:	6883      	ldr	r3, [r0, #8]
    663c:	4798      	blx	r3
    663e:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6640:	68c3      	ldr	r3, [r0, #12]
    6642:	4798      	blx	r3
    6644:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6646:	2302      	movs	r3, #2
    6648:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    664a:	6903      	ldr	r3, [r0, #16]
    664c:	4798      	blx	r3
    664e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6650:	2304      	movs	r3, #4
    6652:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6654:	2380      	movs	r3, #128	; 0x80
    6656:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6658:	6943      	ldr	r3, [r0, #20]
    665a:	f06f 0112 	mvn.w	r1, #18
    665e:	4798      	blx	r3
	}
}
    6660:	e7ea      	b.n	6638 <_spi_handler+0x22>
	...

00006664 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6664:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6666:	4b03      	ldr	r3, [pc, #12]	; (6674 <_spi_get_tx_dma_channel+0x10>)
    6668:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    666a:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    666c:	bf0c      	ite	eq
    666e:	2008      	moveq	r0, #8
    6670:	2000      	movne	r0, #0
    6672:	bd08      	pop	{r3, pc}
    6674:	00006449 	.word	0x00006449

00006678 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6678:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    667a:	4b03      	ldr	r3, [pc, #12]	; (6688 <_spi_get_rx_dma_channel+0x10>)
    667c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    667e:	2807      	cmp	r0, #7
    6680:	bf8c      	ite	hi
    6682:	2000      	movhi	r0, #0
    6684:	2001      	movls	r0, #1
    6686:	bd08      	pop	{r3, pc}
    6688:	00006449 	.word	0x00006449

0000668c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    668c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    668e:	6883      	ldr	r3, [r0, #8]
    6690:	689b      	ldr	r3, [r3, #8]
    6692:	b103      	cbz	r3, 6696 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6694:	4798      	blx	r3
    6696:	bd08      	pop	{r3, pc}

00006698 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6698:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    669a:	6883      	ldr	r3, [r0, #8]
    669c:	685b      	ldr	r3, [r3, #4]
    669e:	b103      	cbz	r3, 66a2 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    66a0:	4798      	blx	r3
    66a2:	bd08      	pop	{r3, pc}

000066a4 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    66a4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    66a6:	6883      	ldr	r3, [r0, #8]
    66a8:	68db      	ldr	r3, [r3, #12]
    66aa:	b103      	cbz	r3, 66ae <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    66ac:	4798      	blx	r3
    66ae:	bd08      	pop	{r3, pc}

000066b0 <_usart_init>:
{
    66b0:	b510      	push	{r4, lr}
    66b2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    66b4:	4b48      	ldr	r3, [pc, #288]	; (67d8 <_usart_init+0x128>)
    66b6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    66b8:	2800      	cmp	r0, #0
    66ba:	d06a      	beq.n	6792 <_usart_init+0xe2>
    66bc:	2801      	cmp	r0, #1
    66be:	d062      	beq.n	6786 <_usart_init+0xd6>
    66c0:	2802      	cmp	r0, #2
    66c2:	d062      	beq.n	678a <_usart_init+0xda>
    66c4:	2804      	cmp	r0, #4
    66c6:	d062      	beq.n	678e <_usart_init+0xde>
    66c8:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    66ca:	bf08      	it	eq
    66cc:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    66ce:	d006      	beq.n	66de <_usart_init+0x2e>
	ASSERT(false);
    66d0:	f44f 721e 	mov.w	r2, #632	; 0x278
    66d4:	4941      	ldr	r1, [pc, #260]	; (67dc <_usart_init+0x12c>)
    66d6:	2000      	movs	r0, #0
    66d8:	4b41      	ldr	r3, [pc, #260]	; (67e0 <_usart_init+0x130>)
    66da:	4798      	blx	r3
	return 0;
    66dc:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    66de:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    66e0:	f013 0f01 	tst.w	r3, #1
    66e4:	d122      	bne.n	672c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    66e6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    66ea:	4a3e      	ldr	r2, [pc, #248]	; (67e4 <_usart_init+0x134>)
    66ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    66f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    66f2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    66f6:	69e3      	ldr	r3, [r4, #28]
    66f8:	f013 0f03 	tst.w	r3, #3
    66fc:	d1fb      	bne.n	66f6 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    66fe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6700:	f013 0f02 	tst.w	r3, #2
    6704:	d00b      	beq.n	671e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6706:	6823      	ldr	r3, [r4, #0]
    6708:	f023 0302 	bic.w	r3, r3, #2
    670c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    670e:	69e3      	ldr	r3, [r4, #28]
    6710:	f013 0f03 	tst.w	r3, #3
    6714:	d1fb      	bne.n	670e <_usart_init+0x5e>
    6716:	69e3      	ldr	r3, [r4, #28]
    6718:	f013 0f02 	tst.w	r3, #2
    671c:	d1fb      	bne.n	6716 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    671e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6722:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6724:	69e3      	ldr	r3, [r4, #28]
    6726:	f013 0f03 	tst.w	r3, #3
    672a:	d1fb      	bne.n	6724 <_usart_init+0x74>
    672c:	69e3      	ldr	r3, [r4, #28]
    672e:	f013 0f01 	tst.w	r3, #1
    6732:	d1fb      	bne.n	672c <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6734:	460a      	mov	r2, r1
    6736:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    673a:	4b2a      	ldr	r3, [pc, #168]	; (67e4 <_usart_init+0x134>)
    673c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6740:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6742:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6744:	69e3      	ldr	r3, [r4, #28]
    6746:	f013 0f03 	tst.w	r3, #3
    674a:	d1fb      	bne.n	6744 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    674c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6750:	4924      	ldr	r1, [pc, #144]	; (67e4 <_usart_init+0x134>)
    6752:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6758:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    675a:	69e3      	ldr	r3, [r4, #28]
    675c:	f013 0f1f 	tst.w	r3, #31
    6760:	d1fb      	bne.n	675a <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6762:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6766:	491f      	ldr	r1, [pc, #124]	; (67e4 <_usart_init+0x134>)
    6768:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    676e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6770:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6774:	d10f      	bne.n	6796 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6776:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    677a:	491a      	ldr	r1, [pc, #104]	; (67e4 <_usart_init+0x134>)
    677c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6780:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6782:	81a3      	strh	r3, [r4, #12]
    6784:	e016      	b.n	67b4 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6786:	2101      	movs	r1, #1
    6788:	e7a9      	b.n	66de <_usart_init+0x2e>
    678a:	2102      	movs	r1, #2
    678c:	e7a7      	b.n	66de <_usart_init+0x2e>
    678e:	2103      	movs	r1, #3
    6790:	e7a5      	b.n	66de <_usart_init+0x2e>
    6792:	2100      	movs	r1, #0
    6794:	e7a3      	b.n	66de <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6796:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    679a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    679e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    67a0:	89a1      	ldrh	r1, [r4, #12]
    67a2:	f360 010c 	bfi	r1, r0, #0, #13
    67a6:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    67a8:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    67ac:	89a3      	ldrh	r3, [r4, #12]
    67ae:	f361 334f 	bfi	r3, r1, #13, #3
    67b2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    67b4:	4b0b      	ldr	r3, [pc, #44]	; (67e4 <_usart_init+0x134>)
    67b6:	0051      	lsls	r1, r2, #1
    67b8:	1888      	adds	r0, r1, r2
    67ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    67be:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    67c2:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    67c4:	440a      	add	r2, r1
    67c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    67ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    67ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    67d2:	2000      	movs	r0, #0
    67d4:	bd10      	pop	{r4, pc}
    67d6:	bf00      	nop
    67d8:	00006449 	.word	0x00006449
    67dc:	0000c484 	.word	0x0000c484
    67e0:	00005645 	.word	0x00005645
    67e4:	0000c3b0 	.word	0x0000c3b0

000067e8 <_get_i2cm_index>:
{
    67e8:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    67ea:	4b07      	ldr	r3, [pc, #28]	; (6808 <_get_i2cm_index+0x20>)
    67ec:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    67ee:	2805      	cmp	r0, #5
    67f0:	d008      	beq.n	6804 <_get_i2cm_index+0x1c>
	ASSERT(false);
    67f2:	f240 32f3 	movw	r2, #1011	; 0x3f3
    67f6:	4905      	ldr	r1, [pc, #20]	; (680c <_get_i2cm_index+0x24>)
    67f8:	2000      	movs	r0, #0
    67fa:	4b05      	ldr	r3, [pc, #20]	; (6810 <_get_i2cm_index+0x28>)
    67fc:	4798      	blx	r3
	return -1;
    67fe:	f04f 30ff 	mov.w	r0, #4294967295
}
    6802:	bd08      	pop	{r3, pc}
			return i;
    6804:	2000      	movs	r0, #0
    6806:	bd08      	pop	{r3, pc}
    6808:	00006449 	.word	0x00006449
    680c:	0000c484 	.word	0x0000c484
    6810:	00005645 	.word	0x00005645

00006814 <_i2c_m_sync_init_impl>:
{
    6814:	b538      	push	{r3, r4, r5, lr}
    6816:	4605      	mov	r5, r0
    6818:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    681a:	4608      	mov	r0, r1
    681c:	4b34      	ldr	r3, [pc, #208]	; (68f0 <_i2c_m_sync_init_impl+0xdc>)
    681e:	4798      	blx	r3
    6820:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6822:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6824:	f013 0f01 	tst.w	r3, #1
    6828:	d123      	bne.n	6872 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    682a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    682e:	4a31      	ldr	r2, [pc, #196]	; (68f4 <_i2c_m_sync_init_impl+0xe0>)
    6830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6834:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6838:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    683c:	69e3      	ldr	r3, [r4, #28]
    683e:	f013 0f03 	tst.w	r3, #3
    6842:	d1fb      	bne.n	683c <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6844:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6846:	f013 0f02 	tst.w	r3, #2
    684a:	d00b      	beq.n	6864 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    684c:	6823      	ldr	r3, [r4, #0]
    684e:	f023 0302 	bic.w	r3, r3, #2
    6852:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6854:	69e3      	ldr	r3, [r4, #28]
    6856:	f013 0f03 	tst.w	r3, #3
    685a:	d1fb      	bne.n	6854 <_i2c_m_sync_init_impl+0x40>
    685c:	69e3      	ldr	r3, [r4, #28]
    685e:	f013 0f02 	tst.w	r3, #2
    6862:	d1fb      	bne.n	685c <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6864:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6868:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    686a:	69e3      	ldr	r3, [r4, #28]
    686c:	f013 0f03 	tst.w	r3, #3
    6870:	d1fb      	bne.n	686a <_i2c_m_sync_init_impl+0x56>
    6872:	69e3      	ldr	r3, [r4, #28]
    6874:	f013 0f01 	tst.w	r3, #1
    6878:	d1fb      	bne.n	6872 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    687a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    687e:	4a1d      	ldr	r2, [pc, #116]	; (68f4 <_i2c_m_sync_init_impl+0xe0>)
    6880:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6884:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6888:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    688a:	69e3      	ldr	r3, [r4, #28]
    688c:	f013 0f03 	tst.w	r3, #3
    6890:	d1fb      	bne.n	688a <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6892:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6896:	4917      	ldr	r1, [pc, #92]	; (68f4 <_i2c_m_sync_init_impl+0xe0>)
    6898:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    689c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    68a0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    68a2:	69e3      	ldr	r3, [r4, #28]
    68a4:	f013 0f04 	tst.w	r3, #4
    68a8:	d1fb      	bne.n	68a2 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    68aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    68ae:	4911      	ldr	r1, [pc, #68]	; (68f4 <_i2c_m_sync_init_impl+0xe0>)
    68b0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    68b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    68b8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    68ba:	f3c2 6301 	ubfx	r3, r2, #24, #2
    68be:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    68c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    68c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    68c6:	2b01      	cmp	r3, #1
    68c8:	bf94      	ite	ls
    68ca:	2300      	movls	r3, #0
    68cc:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    68ce:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    68d2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    68d4:	69e3      	ldr	r3, [r4, #28]
    68d6:	f013 0f04 	tst.w	r3, #4
    68da:	d1fb      	bne.n	68d4 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    68dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    68e0:	4b04      	ldr	r3, [pc, #16]	; (68f4 <_i2c_m_sync_init_impl+0xe0>)
    68e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    68e6:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    68ea:	81eb      	strh	r3, [r5, #14]
}
    68ec:	2000      	movs	r0, #0
    68ee:	bd38      	pop	{r3, r4, r5, pc}
    68f0:	000067e9 	.word	0x000067e9
    68f4:	0000c3b0 	.word	0x0000c3b0

000068f8 <_sercom_i2c_m_irq_handler>:
{
    68f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68fc:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    68fe:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6900:	7e26      	ldrb	r6, [r4, #24]
    6902:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6904:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6b3c <_sercom_i2c_m_irq_handler+0x244>
    6908:	f240 4265 	movw	r2, #1125	; 0x465
    690c:	4641      	mov	r1, r8
    690e:	3000      	adds	r0, #0
    6910:	bf18      	it	ne
    6912:	2001      	movne	r0, #1
    6914:	4f88      	ldr	r7, [pc, #544]	; (6b38 <_sercom_i2c_m_irq_handler+0x240>)
    6916:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6918:	6928      	ldr	r0, [r5, #16]
    691a:	f240 4266 	movw	r2, #1126	; 0x466
    691e:	4641      	mov	r1, r8
    6920:	3000      	adds	r0, #0
    6922:	bf18      	it	ne
    6924:	2001      	movne	r0, #1
    6926:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6928:	f016 0f80 	tst.w	r6, #128	; 0x80
    692c:	f040 80f4 	bne.w	6b18 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6930:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6932:	69e3      	ldr	r3, [r4, #28]
    6934:	f013 0f04 	tst.w	r3, #4
    6938:	d1fb      	bne.n	6932 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    693a:	8b63      	ldrh	r3, [r4, #26]
    693c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    693e:	f016 0f01 	tst.w	r6, #1
    6942:	f000 8090 	beq.w	6a66 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6946:	f013 0f02 	tst.w	r3, #2
    694a:	d022      	beq.n	6992 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    694c:	2201      	movs	r2, #1
    694e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6950:	886a      	ldrh	r2, [r5, #2]
    6952:	b292      	uxth	r2, r2
    6954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6958:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    695a:	886a      	ldrh	r2, [r5, #2]
    695c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6960:	0412      	lsls	r2, r2, #16
    6962:	0c12      	lsrs	r2, r2, #16
    6964:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6966:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    696a:	2b00      	cmp	r3, #0
    696c:	bf14      	ite	ne
    696e:	f06f 0104 	mvnne.w	r1, #4
    6972:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6976:	886b      	ldrh	r3, [r5, #2]
    6978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    697c:	041b      	lsls	r3, r3, #16
    697e:	0c1b      	lsrs	r3, r3, #16
    6980:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6982:	696b      	ldr	r3, [r5, #20]
    6984:	2b00      	cmp	r3, #0
    6986:	f000 80c5 	beq.w	6b14 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    698a:	4628      	mov	r0, r5
    698c:	4798      	blx	r3
    698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6992:	f013 0f04 	tst.w	r3, #4
    6996:	d124      	bne.n	69e2 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6998:	886b      	ldrh	r3, [r5, #2]
    699a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    699e:	d03e      	beq.n	6a1e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    69a0:	882b      	ldrh	r3, [r5, #0]
    69a2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    69a4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69a8:	69e3      	ldr	r3, [r4, #28]
    69aa:	f013 0f04 	tst.w	r3, #4
    69ae:	d1fb      	bne.n	69a8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    69b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    69b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    69b6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    69ba:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    69bc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69be:	69e3      	ldr	r3, [r4, #28]
    69c0:	f013 0f04 	tst.w	r3, #4
    69c4:	d1fb      	bne.n	69be <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    69c6:	886b      	ldrh	r3, [r5, #2]
    69c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    69cc:	041b      	lsls	r3, r3, #16
    69ce:	0c1b      	lsrs	r3, r3, #16
    69d0:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    69d2:	69ab      	ldr	r3, [r5, #24]
    69d4:	2b00      	cmp	r3, #0
    69d6:	f000 8088 	beq.w	6aea <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    69da:	4628      	mov	r0, r5
    69dc:	4798      	blx	r3
    69de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    69e2:	686b      	ldr	r3, [r5, #4]
    69e4:	2b00      	cmp	r3, #0
    69e6:	dd04      	ble.n	69f2 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    69e8:	886b      	ldrh	r3, [r5, #2]
    69ea:	b29b      	uxth	r3, r3
    69ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    69f0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    69f2:	886b      	ldrh	r3, [r5, #2]
    69f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    69f8:	d108      	bne.n	6a0c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    69fa:	886b      	ldrh	r3, [r5, #2]
    69fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a00:	041b      	lsls	r3, r3, #16
    6a02:	0c1b      	lsrs	r3, r3, #16
    6a04:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6a06:	f06f 0101 	mvn.w	r1, #1
    6a0a:	e7b4      	b.n	6976 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6a0c:	6863      	ldr	r3, [r4, #4]
    6a0e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6a12:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a14:	69e3      	ldr	r3, [r4, #28]
    6a16:	f013 0f04 	tst.w	r3, #4
    6a1a:	d1fb      	bne.n	6a14 <_sercom_i2c_m_irq_handler+0x11c>
    6a1c:	e7ed      	b.n	69fa <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6a1e:	686b      	ldr	r3, [r5, #4]
    6a20:	b99b      	cbnz	r3, 6a4a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6a22:	886b      	ldrh	r3, [r5, #2]
    6a24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6a28:	d106      	bne.n	6a38 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6a2a:	886b      	ldrh	r3, [r5, #2]
    6a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a30:	041b      	lsls	r3, r3, #16
    6a32:	0c1b      	lsrs	r3, r3, #16
    6a34:	806b      	strh	r3, [r5, #2]
    6a36:	e7cc      	b.n	69d2 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6a38:	6863      	ldr	r3, [r4, #4]
    6a3a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6a3e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a40:	69e3      	ldr	r3, [r4, #28]
    6a42:	f013 0f04 	tst.w	r3, #4
    6a46:	d1fb      	bne.n	6a40 <_sercom_i2c_m_irq_handler+0x148>
    6a48:	e7ef      	b.n	6a2a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6a4a:	68ab      	ldr	r3, [r5, #8]
    6a4c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6a4e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a50:	69e3      	ldr	r3, [r4, #28]
    6a52:	f013 0f04 	tst.w	r3, #4
    6a56:	d1fb      	bne.n	6a50 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6a58:	68ab      	ldr	r3, [r5, #8]
    6a5a:	3301      	adds	r3, #1
    6a5c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6a5e:	686b      	ldr	r3, [r5, #4]
    6a60:	3b01      	subs	r3, #1
    6a62:	606b      	str	r3, [r5, #4]
    6a64:	e7b5      	b.n	69d2 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6a66:	f016 0f02 	tst.w	r6, #2
    6a6a:	d041      	beq.n	6af0 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6a6c:	686a      	ldr	r2, [r5, #4]
    6a6e:	2a00      	cmp	r2, #0
    6a70:	d036      	beq.n	6ae0 <_sercom_i2c_m_irq_handler+0x1e8>
    6a72:	f013 0f04 	tst.w	r3, #4
    6a76:	d133      	bne.n	6ae0 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6a78:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6a7c:	3a01      	subs	r2, #1
    6a7e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6a80:	2a00      	cmp	r2, #0
    6a82:	d137      	bne.n	6af4 <_sercom_i2c_m_irq_handler+0x1fc>
    6a84:	2900      	cmp	r1, #0
    6a86:	d039      	beq.n	6afc <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6a88:	886b      	ldrh	r3, [r5, #2]
    6a8a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6a8e:	d116      	bne.n	6abe <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6a90:	886b      	ldrh	r3, [r5, #2]
    6a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a96:	041b      	lsls	r3, r3, #16
    6a98:	0c1b      	lsrs	r3, r3, #16
    6a9a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6a9c:	68aa      	ldr	r2, [r5, #8]
    6a9e:	1c53      	adds	r3, r2, #1
    6aa0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6aa2:	69e3      	ldr	r3, [r4, #28]
    6aa4:	f013 0f04 	tst.w	r3, #4
    6aa8:	d1fb      	bne.n	6aa2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6aac:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6aae:	2302      	movs	r3, #2
    6ab0:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6ab2:	69eb      	ldr	r3, [r5, #28]
    6ab4:	b1e3      	cbz	r3, 6af0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6ab6:	4628      	mov	r0, r5
    6ab8:	4798      	blx	r3
    6aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6abe:	6863      	ldr	r3, [r4, #4]
    6ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ac4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6ac6:	69e3      	ldr	r3, [r4, #28]
    6ac8:	f013 0f04 	tst.w	r3, #4
    6acc:	d1fb      	bne.n	6ac6 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6ace:	6863      	ldr	r3, [r4, #4]
    6ad0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6ad4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6ad6:	69e3      	ldr	r3, [r4, #28]
    6ad8:	f013 0f04 	tst.w	r3, #4
    6adc:	d1fb      	bne.n	6ad6 <_sercom_i2c_m_irq_handler+0x1de>
    6ade:	e7d7      	b.n	6a90 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6ae0:	2302      	movs	r3, #2
    6ae2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    6ae4:	f06f 0101 	mvn.w	r1, #1
    6ae8:	e745      	b.n	6976 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6aea:	f016 0f02 	tst.w	r6, #2
    6aee:	d1e0      	bne.n	6ab2 <_sercom_i2c_m_irq_handler+0x1ba>
    6af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6af4:	2a01      	cmp	r2, #1
    6af6:	d1d1      	bne.n	6a9c <_sercom_i2c_m_irq_handler+0x1a4>
    6af8:	2900      	cmp	r1, #0
    6afa:	d0cf      	beq.n	6a9c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6afc:	6863      	ldr	r3, [r4, #4]
    6afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6b02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6b04:	69e3      	ldr	r3, [r4, #28]
    6b06:	f013 0f04 	tst.w	r3, #4
    6b0a:	d1fb      	bne.n	6b04 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    6b0c:	686b      	ldr	r3, [r5, #4]
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d0ba      	beq.n	6a88 <_sercom_i2c_m_irq_handler+0x190>
    6b12:	e7c3      	b.n	6a9c <_sercom_i2c_m_irq_handler+0x1a4>
    6b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6b18:	886b      	ldrh	r3, [r5, #2]
    6b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b1e:	041b      	lsls	r3, r3, #16
    6b20:	0c1b      	lsrs	r3, r3, #16
    6b22:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6b24:	696b      	ldr	r3, [r5, #20]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d0e2      	beq.n	6af0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6b2a:	f06f 0104 	mvn.w	r1, #4
    6b2e:	4628      	mov	r0, r5
    6b30:	4798      	blx	r3
    6b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b36:	bf00      	nop
    6b38:	00005645 	.word	0x00005645
    6b3c:	0000c484 	.word	0x0000c484

00006b40 <_usart_async_init>:
{
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	460d      	mov	r5, r1
	ASSERT(device);
    6b44:	4606      	mov	r6, r0
    6b46:	22d8      	movs	r2, #216	; 0xd8
    6b48:	4917      	ldr	r1, [pc, #92]	; (6ba8 <_usart_async_init+0x68>)
    6b4a:	3000      	adds	r0, #0
    6b4c:	bf18      	it	ne
    6b4e:	2001      	movne	r0, #1
    6b50:	4b16      	ldr	r3, [pc, #88]	; (6bac <_usart_async_init+0x6c>)
    6b52:	4798      	blx	r3
	init_status = _usart_init(hw);
    6b54:	4628      	mov	r0, r5
    6b56:	4b16      	ldr	r3, [pc, #88]	; (6bb0 <_usart_async_init+0x70>)
    6b58:	4798      	blx	r3
	if (init_status) {
    6b5a:	4604      	mov	r4, r0
    6b5c:	b108      	cbz	r0, 6b62 <_usart_async_init+0x22>
}
    6b5e:	4620      	mov	r0, r4
    6b60:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    6b62:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    6b64:	4631      	mov	r1, r6
    6b66:	4628      	mov	r0, r5
    6b68:	4b12      	ldr	r3, [pc, #72]	; (6bb4 <_usart_async_init+0x74>)
    6b6a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6b6c:	4628      	mov	r0, r5
    6b6e:	4b12      	ldr	r3, [pc, #72]	; (6bb8 <_usart_async_init+0x78>)
    6b70:	4798      	blx	r3
    6b72:	1d01      	adds	r1, r0, #4
    6b74:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b76:	2501      	movs	r5, #1
    6b78:	f000 021f 	and.w	r2, r0, #31
    6b7c:	fa05 f202 	lsl.w	r2, r5, r2
    6b80:	0943      	lsrs	r3, r0, #5
    6b82:	009b      	lsls	r3, r3, #2
    6b84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6b88:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b94:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b9c:	601a      	str	r2, [r3, #0]
		irq++;
    6b9e:	3001      	adds	r0, #1
    6ba0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6ba2:	4281      	cmp	r1, r0
    6ba4:	d1e8      	bne.n	6b78 <_usart_async_init+0x38>
    6ba6:	e7da      	b.n	6b5e <_usart_async_init+0x1e>
    6ba8:	0000c484 	.word	0x0000c484
    6bac:	00005645 	.word	0x00005645
    6bb0:	000066b1 	.word	0x000066b1
    6bb4:	000064fd 	.word	0x000064fd
    6bb8:	0000656d 	.word	0x0000656d

00006bbc <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6bbc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6bbe:	6813      	ldr	r3, [r2, #0]
    6bc0:	f043 0302 	orr.w	r3, r3, #2
    6bc4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6bc6:	69d3      	ldr	r3, [r2, #28]
    6bc8:	f013 0f03 	tst.w	r3, #3
    6bcc:	d1fb      	bne.n	6bc6 <_usart_async_enable+0xa>
}
    6bce:	4770      	bx	lr

00006bd0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6bd0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    6bd2:	6299      	str	r1, [r3, #40]	; 0x28
    6bd4:	4770      	bx	lr

00006bd6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    6bd6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6bd8:	2201      	movs	r2, #1
    6bda:	759a      	strb	r2, [r3, #22]
    6bdc:	4770      	bx	lr

00006bde <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    6bde:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6be0:	2202      	movs	r2, #2
    6be2:	759a      	strb	r2, [r3, #22]
    6be4:	4770      	bx	lr
	...

00006be8 <_usart_async_set_irq_state>:
{
    6be8:	b570      	push	{r4, r5, r6, lr}
    6bea:	460c      	mov	r4, r1
    6bec:	4616      	mov	r6, r2
	ASSERT(device);
    6bee:	4605      	mov	r5, r0
    6bf0:	f44f 720e 	mov.w	r2, #568	; 0x238
    6bf4:	4915      	ldr	r1, [pc, #84]	; (6c4c <_usart_async_set_irq_state+0x64>)
    6bf6:	3000      	adds	r0, #0
    6bf8:	bf18      	it	ne
    6bfa:	2001      	movne	r0, #1
    6bfc:	4b14      	ldr	r3, [pc, #80]	; (6c50 <_usart_async_set_irq_state+0x68>)
    6bfe:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    6c00:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    6c04:	d10d      	bne.n	6c22 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    6c06:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6c08:	b92e      	cbnz	r6, 6c16 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6c0a:	2201      	movs	r2, #1
    6c0c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    6c0e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6c10:	2202      	movs	r2, #2
    6c12:	751a      	strb	r2, [r3, #20]
    6c14:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6c16:	2201      	movs	r2, #1
    6c18:	759a      	strb	r2, [r3, #22]
    6c1a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6c1c:	2202      	movs	r2, #2
    6c1e:	759a      	strb	r2, [r3, #22]
    6c20:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    6c22:	2c01      	cmp	r4, #1
    6c24:	d002      	beq.n	6c2c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    6c26:	2c03      	cmp	r4, #3
    6c28:	d008      	beq.n	6c3c <_usart_async_set_irq_state+0x54>
    6c2a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    6c2c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6c2e:	b916      	cbnz	r6, 6c36 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    6c30:	2204      	movs	r2, #4
    6c32:	751a      	strb	r2, [r3, #20]
    6c34:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    6c36:	2204      	movs	r2, #4
    6c38:	759a      	strb	r2, [r3, #22]
    6c3a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    6c3c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6c3e:	b116      	cbz	r6, 6c46 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    6c40:	2280      	movs	r2, #128	; 0x80
    6c42:	759a      	strb	r2, [r3, #22]
}
    6c44:	e7f1      	b.n	6c2a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    6c46:	2280      	movs	r2, #128	; 0x80
    6c48:	751a      	strb	r2, [r3, #20]
    6c4a:	bd70      	pop	{r4, r5, r6, pc}
    6c4c:	0000c484 	.word	0x0000c484
    6c50:	00005645 	.word	0x00005645

00006c54 <_i2c_m_async_init>:
{
    6c54:	b570      	push	{r4, r5, r6, lr}
    6c56:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    6c58:	4606      	mov	r6, r0
    6c5a:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    6c5e:	4918      	ldr	r1, [pc, #96]	; (6cc0 <_i2c_m_async_init+0x6c>)
    6c60:	3000      	adds	r0, #0
    6c62:	bf18      	it	ne
    6c64:	2001      	movne	r0, #1
    6c66:	4b17      	ldr	r3, [pc, #92]	; (6cc4 <_i2c_m_async_init+0x70>)
    6c68:	4798      	blx	r3
	i2c_dev->hw = hw;
    6c6a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6c6c:	4629      	mov	r1, r5
    6c6e:	4630      	mov	r0, r6
    6c70:	4b15      	ldr	r3, [pc, #84]	; (6cc8 <_i2c_m_async_init+0x74>)
    6c72:	4798      	blx	r3
	if (init_status) {
    6c74:	4604      	mov	r4, r0
    6c76:	b108      	cbz	r0, 6c7c <_i2c_m_async_init+0x28>
}
    6c78:	4620      	mov	r0, r4
    6c7a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6c7c:	4631      	mov	r1, r6
    6c7e:	4628      	mov	r0, r5
    6c80:	4b12      	ldr	r3, [pc, #72]	; (6ccc <_i2c_m_async_init+0x78>)
    6c82:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6c84:	4628      	mov	r0, r5
    6c86:	4b12      	ldr	r3, [pc, #72]	; (6cd0 <_i2c_m_async_init+0x7c>)
    6c88:	4798      	blx	r3
    6c8a:	1d01      	adds	r1, r0, #4
    6c8c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c8e:	2501      	movs	r5, #1
    6c90:	f000 021f 	and.w	r2, r0, #31
    6c94:	fa05 f202 	lsl.w	r2, r5, r2
    6c98:	0943      	lsrs	r3, r0, #5
    6c9a:	009b      	lsls	r3, r3, #2
    6c9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6ca0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6cac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cb4:	601a      	str	r2, [r3, #0]
		irq++;
    6cb6:	3001      	adds	r0, #1
    6cb8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6cba:	4281      	cmp	r1, r0
    6cbc:	d1e8      	bne.n	6c90 <_i2c_m_async_init+0x3c>
    6cbe:	e7db      	b.n	6c78 <_i2c_m_async_init+0x24>
    6cc0:	0000c484 	.word	0x0000c484
    6cc4:	00005645 	.word	0x00005645
    6cc8:	00006815 	.word	0x00006815
    6ccc:	000064fd 	.word	0x000064fd
    6cd0:	0000656d 	.word	0x0000656d

00006cd4 <_i2c_m_async_transfer>:
{
    6cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd8:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    6cda:	4605      	mov	r5, r0
    6cdc:	f110 0800 	adds.w	r8, r0, #0
    6ce0:	bf18      	it	ne
    6ce2:	f04f 0801 	movne.w	r8, #1
    6ce6:	4f45      	ldr	r7, [pc, #276]	; (6dfc <_i2c_m_async_transfer+0x128>)
    6ce8:	f240 522e 	movw	r2, #1326	; 0x52e
    6cec:	4639      	mov	r1, r7
    6cee:	4640      	mov	r0, r8
    6cf0:	4e43      	ldr	r6, [pc, #268]	; (6e00 <_i2c_m_async_transfer+0x12c>)
    6cf2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    6cf4:	6928      	ldr	r0, [r5, #16]
    6cf6:	f240 522f 	movw	r2, #1327	; 0x52f
    6cfa:	4639      	mov	r1, r7
    6cfc:	3000      	adds	r0, #0
    6cfe:	bf18      	it	ne
    6d00:	2001      	movne	r0, #1
    6d02:	47b0      	blx	r6
	ASSERT(msg);
    6d04:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    6d08:	4639      	mov	r1, r7
    6d0a:	1c20      	adds	r0, r4, #0
    6d0c:	bf18      	it	ne
    6d0e:	2001      	movne	r0, #1
    6d10:	47b0      	blx	r6
	if (msg->len == 0) {
    6d12:	6860      	ldr	r0, [r4, #4]
    6d14:	2800      	cmp	r0, #0
    6d16:	d06f      	beq.n	6df8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6d18:	886b      	ldrh	r3, [r5, #2]
    6d1a:	f413 7f80 	tst.w	r3, #256	; 0x100
    6d1e:	d169      	bne.n	6df4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    6d20:	8863      	ldrh	r3, [r4, #2]
    6d22:	b29b      	uxth	r3, r3
    6d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d28:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    6d2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6d2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6d32:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6d34:	6853      	ldr	r3, [r2, #4]
    6d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d3a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d3c:	69d3      	ldr	r3, [r2, #28]
    6d3e:	f013 0f04 	tst.w	r3, #4
    6d42:	d1fb      	bne.n	6d3c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    6d44:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6d46:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    6d48:	f240 5206 	movw	r2, #1286	; 0x506
    6d4c:	492b      	ldr	r1, [pc, #172]	; (6dfc <_i2c_m_async_transfer+0x128>)
    6d4e:	4640      	mov	r0, r8
    6d50:	4b2b      	ldr	r3, [pc, #172]	; (6e00 <_i2c_m_async_transfer+0x12c>)
    6d52:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    6d54:	686b      	ldr	r3, [r5, #4]
    6d56:	2b01      	cmp	r3, #1
    6d58:	d02a      	beq.n	6db0 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6d5a:	6863      	ldr	r3, [r4, #4]
    6d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6d60:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d62:	69e3      	ldr	r3, [r4, #28]
    6d64:	f013 0f04 	tst.w	r3, #4
    6d68:	d1fb      	bne.n	6d62 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    6d6a:	882b      	ldrh	r3, [r5, #0]
    6d6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6d70:	d02a      	beq.n	6dc8 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    6d72:	886a      	ldrh	r2, [r5, #2]
    6d74:	f012 0f01 	tst.w	r2, #1
    6d78:	d004      	beq.n	6d84 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    6d7a:	886a      	ldrh	r2, [r5, #2]
    6d7c:	b292      	uxth	r2, r2
    6d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6d82:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d84:	f240 72fe 	movw	r2, #2046	; 0x7fe
    6d88:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    6d8c:	69e3      	ldr	r3, [r4, #28]
    6d8e:	f013 0f04 	tst.w	r3, #4
    6d92:	d1fb      	bne.n	6d8c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6d9e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6da0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6da2:	69e3      	ldr	r3, [r4, #28]
    6da4:	f013 0f04 	tst.w	r3, #4
    6da8:	d1fb      	bne.n	6da2 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    6daa:	2000      	movs	r0, #0
    6dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    6db0:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    6db4:	d0d1      	beq.n	6d5a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6db6:	6863      	ldr	r3, [r4, #4]
    6db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6dbc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dbe:	69e3      	ldr	r3, [r4, #28]
    6dc0:	f013 0f04 	tst.w	r3, #4
    6dc4:	d1fb      	bne.n	6dbe <_i2c_m_async_transfer+0xea>
    6dc6:	e7d0      	b.n	6d6a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6dc8:	8869      	ldrh	r1, [r5, #2]
    6dca:	005a      	lsls	r2, r3, #1
    6dcc:	b2d2      	uxtb	r2, r2
    6dce:	f001 0301 	and.w	r3, r1, #1
    6dd2:	431a      	orrs	r2, r3
    6dd4:	69e3      	ldr	r3, [r4, #28]
    6dd6:	f013 0f04 	tst.w	r3, #4
    6dda:	d1fb      	bne.n	6dd4 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6de2:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6de4:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6de6:	69e3      	ldr	r3, [r4, #28]
    6de8:	f013 0f04 	tst.w	r3, #4
    6dec:	d1fb      	bne.n	6de6 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    6dee:	2000      	movs	r0, #0
    6df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    6df4:	f06f 0003 	mvn.w	r0, #3
}
    6df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dfc:	0000c484 	.word	0x0000c484
    6e00:	00005645 	.word	0x00005645

00006e04 <_i2c_m_async_register_callback>:
	switch (type) {
    6e04:	2901      	cmp	r1, #1
    6e06:	d006      	beq.n	6e16 <_i2c_m_async_register_callback+0x12>
    6e08:	b119      	cbz	r1, 6e12 <_i2c_m_async_register_callback+0xe>
    6e0a:	2902      	cmp	r1, #2
    6e0c:	d005      	beq.n	6e1a <_i2c_m_async_register_callback+0x16>
}
    6e0e:	2000      	movs	r0, #0
    6e10:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6e12:	6142      	str	r2, [r0, #20]
		break;
    6e14:	e7fb      	b.n	6e0e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6e16:	6182      	str	r2, [r0, #24]
		break;
    6e18:	e7f9      	b.n	6e0e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6e1a:	61c2      	str	r2, [r0, #28]
		break;
    6e1c:	e7f7      	b.n	6e0e <_i2c_m_async_register_callback+0xa>
	...

00006e20 <SERCOM0_0_Handler>:
{
    6e20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6e22:	4b02      	ldr	r3, [pc, #8]	; (6e2c <SERCOM0_0_Handler+0xc>)
    6e24:	6818      	ldr	r0, [r3, #0]
    6e26:	4b02      	ldr	r3, [pc, #8]	; (6e30 <SERCOM0_0_Handler+0x10>)
    6e28:	4798      	blx	r3
    6e2a:	bd08      	pop	{r3, pc}
    6e2c:	20000990 	.word	0x20000990
    6e30:	0000648d 	.word	0x0000648d

00006e34 <SERCOM0_1_Handler>:
{
    6e34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6e36:	4b02      	ldr	r3, [pc, #8]	; (6e40 <SERCOM0_1_Handler+0xc>)
    6e38:	6818      	ldr	r0, [r3, #0]
    6e3a:	4b02      	ldr	r3, [pc, #8]	; (6e44 <SERCOM0_1_Handler+0x10>)
    6e3c:	4798      	blx	r3
    6e3e:	bd08      	pop	{r3, pc}
    6e40:	20000990 	.word	0x20000990
    6e44:	0000648d 	.word	0x0000648d

00006e48 <SERCOM0_2_Handler>:
{
    6e48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6e4a:	4b02      	ldr	r3, [pc, #8]	; (6e54 <SERCOM0_2_Handler+0xc>)
    6e4c:	6818      	ldr	r0, [r3, #0]
    6e4e:	4b02      	ldr	r3, [pc, #8]	; (6e58 <SERCOM0_2_Handler+0x10>)
    6e50:	4798      	blx	r3
    6e52:	bd08      	pop	{r3, pc}
    6e54:	20000990 	.word	0x20000990
    6e58:	0000648d 	.word	0x0000648d

00006e5c <SERCOM0_3_Handler>:
{
    6e5c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6e5e:	4b02      	ldr	r3, [pc, #8]	; (6e68 <SERCOM0_3_Handler+0xc>)
    6e60:	6818      	ldr	r0, [r3, #0]
    6e62:	4b02      	ldr	r3, [pc, #8]	; (6e6c <SERCOM0_3_Handler+0x10>)
    6e64:	4798      	blx	r3
    6e66:	bd08      	pop	{r3, pc}
    6e68:	20000990 	.word	0x20000990
    6e6c:	0000648d 	.word	0x0000648d

00006e70 <SERCOM1_0_Handler>:
{
    6e70:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6e72:	4b02      	ldr	r3, [pc, #8]	; (6e7c <SERCOM1_0_Handler+0xc>)
    6e74:	6858      	ldr	r0, [r3, #4]
    6e76:	4b02      	ldr	r3, [pc, #8]	; (6e80 <SERCOM1_0_Handler+0x10>)
    6e78:	4798      	blx	r3
    6e7a:	bd08      	pop	{r3, pc}
    6e7c:	20000990 	.word	0x20000990
    6e80:	0000648d 	.word	0x0000648d

00006e84 <SERCOM1_1_Handler>:
{
    6e84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6e86:	4b02      	ldr	r3, [pc, #8]	; (6e90 <SERCOM1_1_Handler+0xc>)
    6e88:	6858      	ldr	r0, [r3, #4]
    6e8a:	4b02      	ldr	r3, [pc, #8]	; (6e94 <SERCOM1_1_Handler+0x10>)
    6e8c:	4798      	blx	r3
    6e8e:	bd08      	pop	{r3, pc}
    6e90:	20000990 	.word	0x20000990
    6e94:	0000648d 	.word	0x0000648d

00006e98 <SERCOM1_2_Handler>:
{
    6e98:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6e9a:	4b02      	ldr	r3, [pc, #8]	; (6ea4 <SERCOM1_2_Handler+0xc>)
    6e9c:	6858      	ldr	r0, [r3, #4]
    6e9e:	4b02      	ldr	r3, [pc, #8]	; (6ea8 <SERCOM1_2_Handler+0x10>)
    6ea0:	4798      	blx	r3
    6ea2:	bd08      	pop	{r3, pc}
    6ea4:	20000990 	.word	0x20000990
    6ea8:	0000648d 	.word	0x0000648d

00006eac <SERCOM1_3_Handler>:
{
    6eac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6eae:	4b02      	ldr	r3, [pc, #8]	; (6eb8 <SERCOM1_3_Handler+0xc>)
    6eb0:	6858      	ldr	r0, [r3, #4]
    6eb2:	4b02      	ldr	r3, [pc, #8]	; (6ebc <SERCOM1_3_Handler+0x10>)
    6eb4:	4798      	blx	r3
    6eb6:	bd08      	pop	{r3, pc}
    6eb8:	20000990 	.word	0x20000990
    6ebc:	0000648d 	.word	0x0000648d

00006ec0 <SERCOM2_0_Handler>:
{
    6ec0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ec2:	4b02      	ldr	r3, [pc, #8]	; (6ecc <SERCOM2_0_Handler+0xc>)
    6ec4:	6898      	ldr	r0, [r3, #8]
    6ec6:	4b02      	ldr	r3, [pc, #8]	; (6ed0 <SERCOM2_0_Handler+0x10>)
    6ec8:	4798      	blx	r3
    6eca:	bd08      	pop	{r3, pc}
    6ecc:	20000990 	.word	0x20000990
    6ed0:	0000648d 	.word	0x0000648d

00006ed4 <SERCOM2_1_Handler>:
{
    6ed4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ed6:	4b02      	ldr	r3, [pc, #8]	; (6ee0 <SERCOM2_1_Handler+0xc>)
    6ed8:	6898      	ldr	r0, [r3, #8]
    6eda:	4b02      	ldr	r3, [pc, #8]	; (6ee4 <SERCOM2_1_Handler+0x10>)
    6edc:	4798      	blx	r3
    6ede:	bd08      	pop	{r3, pc}
    6ee0:	20000990 	.word	0x20000990
    6ee4:	0000648d 	.word	0x0000648d

00006ee8 <SERCOM2_2_Handler>:
{
    6ee8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6eea:	4b02      	ldr	r3, [pc, #8]	; (6ef4 <SERCOM2_2_Handler+0xc>)
    6eec:	6898      	ldr	r0, [r3, #8]
    6eee:	4b02      	ldr	r3, [pc, #8]	; (6ef8 <SERCOM2_2_Handler+0x10>)
    6ef0:	4798      	blx	r3
    6ef2:	bd08      	pop	{r3, pc}
    6ef4:	20000990 	.word	0x20000990
    6ef8:	0000648d 	.word	0x0000648d

00006efc <SERCOM2_3_Handler>:
{
    6efc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6efe:	4b02      	ldr	r3, [pc, #8]	; (6f08 <SERCOM2_3_Handler+0xc>)
    6f00:	6898      	ldr	r0, [r3, #8]
    6f02:	4b02      	ldr	r3, [pc, #8]	; (6f0c <SERCOM2_3_Handler+0x10>)
    6f04:	4798      	blx	r3
    6f06:	bd08      	pop	{r3, pc}
    6f08:	20000990 	.word	0x20000990
    6f0c:	0000648d 	.word	0x0000648d

00006f10 <SERCOM3_0_Handler>:
{
    6f10:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6f12:	4b02      	ldr	r3, [pc, #8]	; (6f1c <SERCOM3_0_Handler+0xc>)
    6f14:	68d8      	ldr	r0, [r3, #12]
    6f16:	4b02      	ldr	r3, [pc, #8]	; (6f20 <SERCOM3_0_Handler+0x10>)
    6f18:	4798      	blx	r3
    6f1a:	bd08      	pop	{r3, pc}
    6f1c:	20000990 	.word	0x20000990
    6f20:	00006617 	.word	0x00006617

00006f24 <SERCOM3_1_Handler>:
{
    6f24:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6f26:	4b02      	ldr	r3, [pc, #8]	; (6f30 <SERCOM3_1_Handler+0xc>)
    6f28:	68d8      	ldr	r0, [r3, #12]
    6f2a:	4b02      	ldr	r3, [pc, #8]	; (6f34 <SERCOM3_1_Handler+0x10>)
    6f2c:	4798      	blx	r3
    6f2e:	bd08      	pop	{r3, pc}
    6f30:	20000990 	.word	0x20000990
    6f34:	00006617 	.word	0x00006617

00006f38 <SERCOM3_2_Handler>:
{
    6f38:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6f3a:	4b02      	ldr	r3, [pc, #8]	; (6f44 <SERCOM3_2_Handler+0xc>)
    6f3c:	68d8      	ldr	r0, [r3, #12]
    6f3e:	4b02      	ldr	r3, [pc, #8]	; (6f48 <SERCOM3_2_Handler+0x10>)
    6f40:	4798      	blx	r3
    6f42:	bd08      	pop	{r3, pc}
    6f44:	20000990 	.word	0x20000990
    6f48:	00006617 	.word	0x00006617

00006f4c <SERCOM3_3_Handler>:
{
    6f4c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6f4e:	4b02      	ldr	r3, [pc, #8]	; (6f58 <SERCOM3_3_Handler+0xc>)
    6f50:	68d8      	ldr	r0, [r3, #12]
    6f52:	4b02      	ldr	r3, [pc, #8]	; (6f5c <SERCOM3_3_Handler+0x10>)
    6f54:	4798      	blx	r3
    6f56:	bd08      	pop	{r3, pc}
    6f58:	20000990 	.word	0x20000990
    6f5c:	00006617 	.word	0x00006617

00006f60 <SERCOM4_0_Handler>:
{
    6f60:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6f62:	4b02      	ldr	r3, [pc, #8]	; (6f6c <SERCOM4_0_Handler+0xc>)
    6f64:	6918      	ldr	r0, [r3, #16]
    6f66:	4b02      	ldr	r3, [pc, #8]	; (6f70 <SERCOM4_0_Handler+0x10>)
    6f68:	4798      	blx	r3
    6f6a:	bd08      	pop	{r3, pc}
    6f6c:	20000990 	.word	0x20000990
    6f70:	0000648d 	.word	0x0000648d

00006f74 <SERCOM4_1_Handler>:
{
    6f74:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6f76:	4b02      	ldr	r3, [pc, #8]	; (6f80 <SERCOM4_1_Handler+0xc>)
    6f78:	6918      	ldr	r0, [r3, #16]
    6f7a:	4b02      	ldr	r3, [pc, #8]	; (6f84 <SERCOM4_1_Handler+0x10>)
    6f7c:	4798      	blx	r3
    6f7e:	bd08      	pop	{r3, pc}
    6f80:	20000990 	.word	0x20000990
    6f84:	0000648d 	.word	0x0000648d

00006f88 <SERCOM4_2_Handler>:
{
    6f88:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6f8a:	4b02      	ldr	r3, [pc, #8]	; (6f94 <SERCOM4_2_Handler+0xc>)
    6f8c:	6918      	ldr	r0, [r3, #16]
    6f8e:	4b02      	ldr	r3, [pc, #8]	; (6f98 <SERCOM4_2_Handler+0x10>)
    6f90:	4798      	blx	r3
    6f92:	bd08      	pop	{r3, pc}
    6f94:	20000990 	.word	0x20000990
    6f98:	0000648d 	.word	0x0000648d

00006f9c <SERCOM4_3_Handler>:
{
    6f9c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6f9e:	4b02      	ldr	r3, [pc, #8]	; (6fa8 <SERCOM4_3_Handler+0xc>)
    6fa0:	6918      	ldr	r0, [r3, #16]
    6fa2:	4b02      	ldr	r3, [pc, #8]	; (6fac <SERCOM4_3_Handler+0x10>)
    6fa4:	4798      	blx	r3
    6fa6:	bd08      	pop	{r3, pc}
    6fa8:	20000990 	.word	0x20000990
    6fac:	0000648d 	.word	0x0000648d

00006fb0 <SERCOM5_0_Handler>:
{
    6fb0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fb2:	4b02      	ldr	r3, [pc, #8]	; (6fbc <SERCOM5_0_Handler+0xc>)
    6fb4:	6958      	ldr	r0, [r3, #20]
    6fb6:	4b02      	ldr	r3, [pc, #8]	; (6fc0 <SERCOM5_0_Handler+0x10>)
    6fb8:	4798      	blx	r3
    6fba:	bd08      	pop	{r3, pc}
    6fbc:	20000990 	.word	0x20000990
    6fc0:	000068f9 	.word	0x000068f9

00006fc4 <SERCOM5_1_Handler>:
{
    6fc4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fc6:	4b02      	ldr	r3, [pc, #8]	; (6fd0 <SERCOM5_1_Handler+0xc>)
    6fc8:	6958      	ldr	r0, [r3, #20]
    6fca:	4b02      	ldr	r3, [pc, #8]	; (6fd4 <SERCOM5_1_Handler+0x10>)
    6fcc:	4798      	blx	r3
    6fce:	bd08      	pop	{r3, pc}
    6fd0:	20000990 	.word	0x20000990
    6fd4:	000068f9 	.word	0x000068f9

00006fd8 <SERCOM5_2_Handler>:
{
    6fd8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fda:	4b02      	ldr	r3, [pc, #8]	; (6fe4 <SERCOM5_2_Handler+0xc>)
    6fdc:	6958      	ldr	r0, [r3, #20]
    6fde:	4b02      	ldr	r3, [pc, #8]	; (6fe8 <SERCOM5_2_Handler+0x10>)
    6fe0:	4798      	blx	r3
    6fe2:	bd08      	pop	{r3, pc}
    6fe4:	20000990 	.word	0x20000990
    6fe8:	000068f9 	.word	0x000068f9

00006fec <SERCOM5_3_Handler>:
{
    6fec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fee:	4b02      	ldr	r3, [pc, #8]	; (6ff8 <SERCOM5_3_Handler+0xc>)
    6ff0:	6958      	ldr	r0, [r3, #20]
    6ff2:	4b02      	ldr	r3, [pc, #8]	; (6ffc <SERCOM5_3_Handler+0x10>)
    6ff4:	4798      	blx	r3
    6ff6:	bd08      	pop	{r3, pc}
    6ff8:	20000990 	.word	0x20000990
    6ffc:	000068f9 	.word	0x000068f9

00007000 <SERCOM6_0_Handler>:
{
    7000:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7002:	4b02      	ldr	r3, [pc, #8]	; (700c <SERCOM6_0_Handler+0xc>)
    7004:	6998      	ldr	r0, [r3, #24]
    7006:	4b02      	ldr	r3, [pc, #8]	; (7010 <SERCOM6_0_Handler+0x10>)
    7008:	4798      	blx	r3
    700a:	bd08      	pop	{r3, pc}
    700c:	20000990 	.word	0x20000990
    7010:	0000648d 	.word	0x0000648d

00007014 <SERCOM6_1_Handler>:
{
    7014:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7016:	4b02      	ldr	r3, [pc, #8]	; (7020 <SERCOM6_1_Handler+0xc>)
    7018:	6998      	ldr	r0, [r3, #24]
    701a:	4b02      	ldr	r3, [pc, #8]	; (7024 <SERCOM6_1_Handler+0x10>)
    701c:	4798      	blx	r3
    701e:	bd08      	pop	{r3, pc}
    7020:	20000990 	.word	0x20000990
    7024:	0000648d 	.word	0x0000648d

00007028 <SERCOM6_2_Handler>:
{
    7028:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    702a:	4b02      	ldr	r3, [pc, #8]	; (7034 <SERCOM6_2_Handler+0xc>)
    702c:	6998      	ldr	r0, [r3, #24]
    702e:	4b02      	ldr	r3, [pc, #8]	; (7038 <SERCOM6_2_Handler+0x10>)
    7030:	4798      	blx	r3
    7032:	bd08      	pop	{r3, pc}
    7034:	20000990 	.word	0x20000990
    7038:	0000648d 	.word	0x0000648d

0000703c <SERCOM6_3_Handler>:
{
    703c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    703e:	4b02      	ldr	r3, [pc, #8]	; (7048 <SERCOM6_3_Handler+0xc>)
    7040:	6998      	ldr	r0, [r3, #24]
    7042:	4b02      	ldr	r3, [pc, #8]	; (704c <SERCOM6_3_Handler+0x10>)
    7044:	4798      	blx	r3
    7046:	bd08      	pop	{r3, pc}
    7048:	20000990 	.word	0x20000990
    704c:	0000648d 	.word	0x0000648d

00007050 <_spi_m_sync_init>:
{
    7050:	b570      	push	{r4, r5, r6, lr}
    7052:	4606      	mov	r6, r0
    7054:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7056:	4608      	mov	r0, r1
    7058:	4b5d      	ldr	r3, [pc, #372]	; (71d0 <_spi_m_sync_init+0x180>)
    705a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    705c:	2803      	cmp	r0, #3
    705e:	d00c      	beq.n	707a <_spi_m_sync_init+0x2a>
    7060:	2807      	cmp	r0, #7
    7062:	bf08      	it	eq
    7064:	2301      	moveq	r3, #1
    7066:	d009      	beq.n	707c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    7068:	2e00      	cmp	r6, #0
    706a:	f000 809f 	beq.w	71ac <_spi_m_sync_init+0x15c>
    706e:	2c00      	cmp	r4, #0
    7070:	f040 80a5 	bne.w	71be <_spi_m_sync_init+0x16e>
	return NULL;
    7074:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7076:	2000      	movs	r0, #0
    7078:	e009      	b.n	708e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    707a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    707c:	4d55      	ldr	r5, [pc, #340]	; (71d4 <_spi_m_sync_init+0x184>)
    707e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7082:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7084:	2e00      	cmp	r6, #0
    7086:	d0f6      	beq.n	7076 <_spi_m_sync_init+0x26>
    7088:	2001      	movs	r0, #1
    708a:	2c00      	cmp	r4, #0
    708c:	d0f3      	beq.n	7076 <_spi_m_sync_init+0x26>
    708e:	f640 2291 	movw	r2, #2705	; 0xa91
    7092:	4951      	ldr	r1, [pc, #324]	; (71d8 <_spi_m_sync_init+0x188>)
    7094:	4b51      	ldr	r3, [pc, #324]	; (71dc <_spi_m_sync_init+0x18c>)
    7096:	4798      	blx	r3
	if (regs == NULL) {
    7098:	2d00      	cmp	r5, #0
    709a:	f000 8084 	beq.w	71a6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    709e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    70a0:	f013 0f01 	tst.w	r3, #1
    70a4:	d11d      	bne.n	70e2 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    70a6:	682b      	ldr	r3, [r5, #0]
    70a8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70ac:	69e3      	ldr	r3, [r4, #28]
    70ae:	f013 0f03 	tst.w	r3, #3
    70b2:	d1fb      	bne.n	70ac <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    70b4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    70b6:	f013 0f02 	tst.w	r3, #2
    70ba:	d00b      	beq.n	70d4 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    70bc:	6823      	ldr	r3, [r4, #0]
    70be:	f023 0302 	bic.w	r3, r3, #2
    70c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70c4:	69e3      	ldr	r3, [r4, #28]
    70c6:	f013 0f03 	tst.w	r3, #3
    70ca:	d1fb      	bne.n	70c4 <_spi_m_sync_init+0x74>
    70cc:	69e3      	ldr	r3, [r4, #28]
    70ce:	f013 0f02 	tst.w	r3, #2
    70d2:	d1fb      	bne.n	70cc <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    70d4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    70d8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70da:	69e3      	ldr	r3, [r4, #28]
    70dc:	f013 0f03 	tst.w	r3, #3
    70e0:	d1fb      	bne.n	70da <_spi_m_sync_init+0x8a>
    70e2:	69e3      	ldr	r3, [r4, #28]
    70e4:	f013 0f01 	tst.w	r3, #1
    70e8:	d1fb      	bne.n	70e2 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    70ea:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    70ec:	682b      	ldr	r3, [r5, #0]
    70ee:	f003 031c 	and.w	r3, r3, #28
    70f2:	2b08      	cmp	r3, #8
    70f4:	d02e      	beq.n	7154 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    70f6:	f640 1276 	movw	r2, #2422	; 0x976
    70fa:	4937      	ldr	r1, [pc, #220]	; (71d8 <_spi_m_sync_init+0x188>)
    70fc:	1c20      	adds	r0, r4, #0
    70fe:	bf18      	it	ne
    7100:	2001      	movne	r0, #1
    7102:	4b36      	ldr	r3, [pc, #216]	; (71dc <_spi_m_sync_init+0x18c>)
    7104:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7106:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7108:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    710c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7110:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7112:	69e3      	ldr	r3, [r4, #28]
    7114:	f013 0f03 	tst.w	r3, #3
    7118:	d1fb      	bne.n	7112 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    711a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    711c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7120:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7128:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    712a:	69e3      	ldr	r3, [r4, #28]
    712c:	f013 0f17 	tst.w	r3, #23
    7130:	d1fb      	bne.n	712a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7132:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7134:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7136:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7138:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    713c:	686b      	ldr	r3, [r5, #4]
    713e:	f003 0307 	and.w	r3, r3, #7
    7142:	2b00      	cmp	r3, #0
    7144:	bf0c      	ite	eq
    7146:	2301      	moveq	r3, #1
    7148:	2302      	movne	r3, #2
    714a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    714c:	89eb      	ldrh	r3, [r5, #14]
    714e:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7150:	2000      	movs	r0, #0
    7152:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7154:	f640 128a 	movw	r2, #2442	; 0x98a
    7158:	491f      	ldr	r1, [pc, #124]	; (71d8 <_spi_m_sync_init+0x188>)
    715a:	1c20      	adds	r0, r4, #0
    715c:	bf18      	it	ne
    715e:	2001      	movne	r0, #1
    7160:	4b1e      	ldr	r3, [pc, #120]	; (71dc <_spi_m_sync_init+0x18c>)
    7162:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7164:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7166:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    716a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    716e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7170:	69e3      	ldr	r3, [r4, #28]
    7172:	f013 0f03 	tst.w	r3, #3
    7176:	d1fb      	bne.n	7170 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7178:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    717a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    717e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7186:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    718a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    718c:	69e3      	ldr	r3, [r4, #28]
    718e:	f013 0f17 	tst.w	r3, #23
    7192:	d1fb      	bne.n	718c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7194:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7196:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7198:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    719a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    719e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    71a0:	2b00      	cmp	r3, #0
    71a2:	d1fc      	bne.n	719e <_spi_m_sync_init+0x14e>
    71a4:	e7ca      	b.n	713c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    71a6:	f06f 000c 	mvn.w	r0, #12
    71aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    71ac:	f640 2291 	movw	r2, #2705	; 0xa91
    71b0:	4909      	ldr	r1, [pc, #36]	; (71d8 <_spi_m_sync_init+0x188>)
    71b2:	2000      	movs	r0, #0
    71b4:	4b09      	ldr	r3, [pc, #36]	; (71dc <_spi_m_sync_init+0x18c>)
    71b6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    71b8:	f06f 000c 	mvn.w	r0, #12
    71bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    71be:	f640 2291 	movw	r2, #2705	; 0xa91
    71c2:	4905      	ldr	r1, [pc, #20]	; (71d8 <_spi_m_sync_init+0x188>)
    71c4:	2001      	movs	r0, #1
    71c6:	4b05      	ldr	r3, [pc, #20]	; (71dc <_spi_m_sync_init+0x18c>)
    71c8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    71ca:	f06f 000c 	mvn.w	r0, #12
    71ce:	bd70      	pop	{r4, r5, r6, pc}
    71d0:	00006449 	.word	0x00006449
    71d4:	0000c460 	.word	0x0000c460
    71d8:	0000c484 	.word	0x0000c484
    71dc:	00005645 	.word	0x00005645

000071e0 <_spi_m_async_init>:
{
    71e0:	b538      	push	{r3, r4, r5, lr}
    71e2:	4604      	mov	r4, r0
    71e4:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    71e6:	4b15      	ldr	r3, [pc, #84]	; (723c <_spi_m_async_init+0x5c>)
    71e8:	4798      	blx	r3
	if (rc < 0) {
    71ea:	2800      	cmp	r0, #0
    71ec:	db24      	blt.n	7238 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    71ee:	4621      	mov	r1, r4
    71f0:	4628      	mov	r0, r5
    71f2:	4b13      	ldr	r3, [pc, #76]	; (7240 <_spi_m_async_init+0x60>)
    71f4:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    71f6:	2300      	movs	r3, #0
    71f8:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    71fa:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    71fc:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    71fe:	4628      	mov	r0, r5
    7200:	4b10      	ldr	r3, [pc, #64]	; (7244 <_spi_m_async_init+0x64>)
    7202:	4798      	blx	r3
    7204:	1d01      	adds	r1, r0, #4
    7206:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7208:	2401      	movs	r4, #1
    720a:	f000 021f 	and.w	r2, r0, #31
    720e:	fa04 f202 	lsl.w	r2, r4, r2
    7212:	0943      	lsrs	r3, r0, #5
    7214:	009b      	lsls	r3, r3, #2
    7216:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    721a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    721e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7226:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    722a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    722e:	3001      	adds	r0, #1
    7230:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7232:	4281      	cmp	r1, r0
    7234:	d1e9      	bne.n	720a <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7236:	2000      	movs	r0, #0
}
    7238:	bd38      	pop	{r3, r4, r5, pc}
    723a:	bf00      	nop
    723c:	00007051 	.word	0x00007051
    7240:	000064fd 	.word	0x000064fd
    7244:	0000656d 	.word	0x0000656d

00007248 <_spi_m_async_enable>:
{
    7248:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    724a:	4604      	mov	r4, r0
    724c:	b160      	cbz	r0, 7268 <_spi_m_async_enable+0x20>
    724e:	6800      	ldr	r0, [r0, #0]
    7250:	3000      	adds	r0, #0
    7252:	bf18      	it	ne
    7254:	2001      	movne	r0, #1
    7256:	f640 22fe 	movw	r2, #2814	; 0xafe
    725a:	4904      	ldr	r1, [pc, #16]	; (726c <_spi_m_async_enable+0x24>)
    725c:	4b04      	ldr	r3, [pc, #16]	; (7270 <_spi_m_async_enable+0x28>)
    725e:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    7260:	6820      	ldr	r0, [r4, #0]
    7262:	4b04      	ldr	r3, [pc, #16]	; (7274 <_spi_m_async_enable+0x2c>)
    7264:	4798      	blx	r3
}
    7266:	bd10      	pop	{r4, pc}
    7268:	2000      	movs	r0, #0
    726a:	e7f4      	b.n	7256 <_spi_m_async_enable+0xe>
    726c:	0000c484 	.word	0x0000c484
    7270:	00005645 	.word	0x00005645
    7274:	000065a5 	.word	0x000065a5

00007278 <_spi_m_async_set_mode>:
{
    7278:	b538      	push	{r3, r4, r5, lr}
    727a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    727c:	4604      	mov	r4, r0
    727e:	b168      	cbz	r0, 729c <_spi_m_async_set_mode+0x24>
    7280:	6800      	ldr	r0, [r0, #0]
    7282:	3000      	adds	r0, #0
    7284:	bf18      	it	ne
    7286:	2001      	movne	r0, #1
    7288:	f640 322f 	movw	r2, #2863	; 0xb2f
    728c:	4904      	ldr	r1, [pc, #16]	; (72a0 <_spi_m_async_set_mode+0x28>)
    728e:	4b05      	ldr	r3, [pc, #20]	; (72a4 <_spi_m_async_set_mode+0x2c>)
    7290:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7292:	4629      	mov	r1, r5
    7294:	6820      	ldr	r0, [r4, #0]
    7296:	4b04      	ldr	r3, [pc, #16]	; (72a8 <_spi_m_async_set_mode+0x30>)
    7298:	4798      	blx	r3
}
    729a:	bd38      	pop	{r3, r4, r5, pc}
    729c:	2000      	movs	r0, #0
    729e:	e7f3      	b.n	7288 <_spi_m_async_set_mode+0x10>
    72a0:	0000c484 	.word	0x0000c484
    72a4:	00005645 	.word	0x00005645
    72a8:	000065e5 	.word	0x000065e5

000072ac <_spi_m_async_set_baudrate>:
{
    72ac:	b538      	push	{r3, r4, r5, lr}
    72ae:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    72b0:	4605      	mov	r5, r0
    72b2:	b198      	cbz	r0, 72dc <_spi_m_async_set_baudrate+0x30>
    72b4:	6800      	ldr	r0, [r0, #0]
    72b6:	3000      	adds	r0, #0
    72b8:	bf18      	it	ne
    72ba:	2001      	movne	r0, #1
    72bc:	f640 325e 	movw	r2, #2910	; 0xb5e
    72c0:	4907      	ldr	r1, [pc, #28]	; (72e0 <_spi_m_async_set_baudrate+0x34>)
    72c2:	4b08      	ldr	r3, [pc, #32]	; (72e4 <_spi_m_async_set_baudrate+0x38>)
    72c4:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    72c6:	682b      	ldr	r3, [r5, #0]
    72c8:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    72ca:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    72ce:	bf03      	ittte	eq
    72d0:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    72d2:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    72d4:	2000      	moveq	r0, #0
		return ERR_BUSY;
    72d6:	f06f 0003 	mvnne.w	r0, #3
}
    72da:	bd38      	pop	{r3, r4, r5, pc}
    72dc:	2000      	movs	r0, #0
    72de:	e7ed      	b.n	72bc <_spi_m_async_set_baudrate+0x10>
    72e0:	0000c484 	.word	0x0000c484
    72e4:	00005645 	.word	0x00005645

000072e8 <_spi_m_async_enable_tx>:
{
    72e8:	b538      	push	{r3, r4, r5, lr}
    72ea:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    72ec:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    72ee:	b160      	cbz	r0, 730a <_spi_m_async_enable_tx+0x22>
    72f0:	1c20      	adds	r0, r4, #0
    72f2:	bf18      	it	ne
    72f4:	2001      	movne	r0, #1
    72f6:	f640 4221 	movw	r2, #3105	; 0xc21
    72fa:	4906      	ldr	r1, [pc, #24]	; (7314 <_spi_m_async_enable_tx+0x2c>)
    72fc:	4b06      	ldr	r3, [pc, #24]	; (7318 <_spi_m_async_enable_tx+0x30>)
    72fe:	4798      	blx	r3
	if (state) {
    7300:	b92d      	cbnz	r5, 730e <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7302:	2301      	movs	r3, #1
    7304:	7523      	strb	r3, [r4, #20]
}
    7306:	2000      	movs	r0, #0
    7308:	bd38      	pop	{r3, r4, r5, pc}
    730a:	2000      	movs	r0, #0
    730c:	e7f3      	b.n	72f6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    730e:	2301      	movs	r3, #1
    7310:	75a3      	strb	r3, [r4, #22]
    7312:	e7f8      	b.n	7306 <_spi_m_async_enable_tx+0x1e>
    7314:	0000c484 	.word	0x0000c484
    7318:	00005645 	.word	0x00005645

0000731c <_spi_m_async_enable_rx>:
{
    731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    731e:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7320:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    7322:	4e0c      	ldr	r6, [pc, #48]	; (7354 <_spi_m_async_enable_rx+0x38>)
    7324:	f640 4235 	movw	r2, #3125	; 0xc35
    7328:	4631      	mov	r1, r6
    732a:	3000      	adds	r0, #0
    732c:	bf18      	it	ne
    732e:	2001      	movne	r0, #1
    7330:	4d09      	ldr	r5, [pc, #36]	; (7358 <_spi_m_async_enable_rx+0x3c>)
    7332:	47a8      	blx	r5
	ASSERT(hw);
    7334:	f640 4236 	movw	r2, #3126	; 0xc36
    7338:	4631      	mov	r1, r6
    733a:	1c20      	adds	r0, r4, #0
    733c:	bf18      	it	ne
    733e:	2001      	movne	r0, #1
    7340:	47a8      	blx	r5
	if (state) {
    7342:	b91f      	cbnz	r7, 734c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7344:	2304      	movs	r3, #4
    7346:	7523      	strb	r3, [r4, #20]
}
    7348:	2000      	movs	r0, #0
    734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    734c:	2304      	movs	r3, #4
    734e:	75a3      	strb	r3, [r4, #22]
    7350:	e7fa      	b.n	7348 <_spi_m_async_enable_rx+0x2c>
    7352:	bf00      	nop
    7354:	0000c484 	.word	0x0000c484
    7358:	00005645 	.word	0x00005645

0000735c <_spi_m_async_enable_tx_complete>:
{
    735c:	b538      	push	{r3, r4, r5, lr}
    735e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7360:	4604      	mov	r4, r0
    7362:	b170      	cbz	r0, 7382 <_spi_m_async_enable_tx_complete+0x26>
    7364:	6800      	ldr	r0, [r0, #0]
    7366:	3000      	adds	r0, #0
    7368:	bf18      	it	ne
    736a:	2001      	movne	r0, #1
    736c:	f640 4248 	movw	r2, #3144	; 0xc48
    7370:	4907      	ldr	r1, [pc, #28]	; (7390 <_spi_m_async_enable_tx_complete+0x34>)
    7372:	4b08      	ldr	r3, [pc, #32]	; (7394 <_spi_m_async_enable_tx_complete+0x38>)
    7374:	4798      	blx	r3
	if (state) {
    7376:	b935      	cbnz	r5, 7386 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7378:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    737a:	2202      	movs	r2, #2
    737c:	751a      	strb	r2, [r3, #20]
}
    737e:	2000      	movs	r0, #0
    7380:	bd38      	pop	{r3, r4, r5, pc}
    7382:	2000      	movs	r0, #0
    7384:	e7f2      	b.n	736c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7386:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7388:	2202      	movs	r2, #2
    738a:	759a      	strb	r2, [r3, #22]
    738c:	e7f7      	b.n	737e <_spi_m_async_enable_tx_complete+0x22>
    738e:	bf00      	nop
    7390:	0000c484 	.word	0x0000c484
    7394:	00005645 	.word	0x00005645

00007398 <_spi_m_async_write_one>:
{
    7398:	b538      	push	{r3, r4, r5, lr}
    739a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    739c:	4604      	mov	r4, r0
    739e:	b160      	cbz	r0, 73ba <_spi_m_async_write_one+0x22>
    73a0:	6800      	ldr	r0, [r0, #0]
    73a2:	3000      	adds	r0, #0
    73a4:	bf18      	it	ne
    73a6:	2001      	movne	r0, #1
    73a8:	f640 425a 	movw	r2, #3162	; 0xc5a
    73ac:	4904      	ldr	r1, [pc, #16]	; (73c0 <_spi_m_async_write_one+0x28>)
    73ae:	4b05      	ldr	r3, [pc, #20]	; (73c4 <_spi_m_async_write_one+0x2c>)
    73b0:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    73b2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    73b4:	629d      	str	r5, [r3, #40]	; 0x28
}
    73b6:	2000      	movs	r0, #0
    73b8:	bd38      	pop	{r3, r4, r5, pc}
    73ba:	2000      	movs	r0, #0
    73bc:	e7f4      	b.n	73a8 <_spi_m_async_write_one+0x10>
    73be:	bf00      	nop
    73c0:	0000c484 	.word	0x0000c484
    73c4:	00005645 	.word	0x00005645

000073c8 <_spi_m_async_read_one>:
{
    73c8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    73ca:	4604      	mov	r4, r0
    73cc:	b160      	cbz	r0, 73e8 <_spi_m_async_read_one+0x20>
    73ce:	6800      	ldr	r0, [r0, #0]
    73d0:	3000      	adds	r0, #0
    73d2:	bf18      	it	ne
    73d4:	2001      	movne	r0, #1
    73d6:	f640 4275 	movw	r2, #3189	; 0xc75
    73da:	4904      	ldr	r1, [pc, #16]	; (73ec <_spi_m_async_read_one+0x24>)
    73dc:	4b04      	ldr	r3, [pc, #16]	; (73f0 <_spi_m_async_read_one+0x28>)
    73de:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    73e0:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    73e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    73e4:	b280      	uxth	r0, r0
    73e6:	bd10      	pop	{r4, pc}
    73e8:	2000      	movs	r0, #0
    73ea:	e7f4      	b.n	73d6 <_spi_m_async_read_one+0xe>
    73ec:	0000c484 	.word	0x0000c484
    73f0:	00005645 	.word	0x00005645

000073f4 <_spi_m_async_register_callback>:
{
    73f4:	b570      	push	{r4, r5, r6, lr}
    73f6:	460d      	mov	r5, r1
    73f8:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    73fa:	4604      	mov	r4, r0
    73fc:	b168      	cbz	r0, 741a <_spi_m_async_register_callback+0x26>
    73fe:	2903      	cmp	r1, #3
    7400:	bf8c      	ite	hi
    7402:	2000      	movhi	r0, #0
    7404:	2001      	movls	r0, #1
    7406:	f640 428e 	movw	r2, #3214	; 0xc8e
    740a:	4905      	ldr	r1, [pc, #20]	; (7420 <_spi_m_async_register_callback+0x2c>)
    740c:	4b05      	ldr	r3, [pc, #20]	; (7424 <_spi_m_async_register_callback+0x30>)
    740e:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7410:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7414:	60a6      	str	r6, [r4, #8]
}
    7416:	2000      	movs	r0, #0
    7418:	bd70      	pop	{r4, r5, r6, pc}
    741a:	2000      	movs	r0, #0
    741c:	e7f3      	b.n	7406 <_spi_m_async_register_callback+0x12>
    741e:	bf00      	nop
    7420:	0000c484 	.word	0x0000c484
    7424:	00005645 	.word	0x00005645

00007428 <_spi_m_async_set_irq_state>:
{
    7428:	b570      	push	{r4, r5, r6, lr}
    742a:	460c      	mov	r4, r1
    742c:	4615      	mov	r5, r2
	ASSERT(device);
    742e:	4606      	mov	r6, r0
    7430:	f640 42cf 	movw	r2, #3279	; 0xccf
    7434:	4908      	ldr	r1, [pc, #32]	; (7458 <_spi_m_async_set_irq_state+0x30>)
    7436:	3000      	adds	r0, #0
    7438:	bf18      	it	ne
    743a:	2001      	movne	r0, #1
    743c:	4b07      	ldr	r3, [pc, #28]	; (745c <_spi_m_async_set_irq_state+0x34>)
    743e:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7440:	2c03      	cmp	r4, #3
    7442:	d000      	beq.n	7446 <_spi_m_async_set_irq_state+0x1e>
    7444:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7446:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7448:	b115      	cbz	r5, 7450 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    744a:	2280      	movs	r2, #128	; 0x80
    744c:	759a      	strb	r2, [r3, #22]
}
    744e:	e7f9      	b.n	7444 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7450:	2280      	movs	r2, #128	; 0x80
    7452:	751a      	strb	r2, [r3, #20]
    7454:	bd70      	pop	{r4, r5, r6, pc}
    7456:	bf00      	nop
    7458:	0000c484 	.word	0x0000c484
    745c:	00005645 	.word	0x00005645

00007460 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7464:	4605      	mov	r5, r0
    7466:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7468:	4608      	mov	r0, r1
    746a:	4b52      	ldr	r3, [pc, #328]	; (75b4 <_spi_m_dma_init+0x154>)
    746c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    746e:	2803      	cmp	r0, #3
    7470:	d00c      	beq.n	748c <_spi_m_dma_init+0x2c>
    7472:	2807      	cmp	r0, #7
    7474:	bf08      	it	eq
    7476:	2301      	moveq	r3, #1
    7478:	d009      	beq.n	748e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    747a:	2d00      	cmp	r5, #0
    747c:	f000 8086 	beq.w	758c <_spi_m_dma_init+0x12c>
    7480:	2c00      	cmp	r4, #0
    7482:	f040 808d 	bne.w	75a0 <_spi_m_dma_init+0x140>
	return NULL;
    7486:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7488:	2000      	movs	r0, #0
    748a:	e009      	b.n	74a0 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    748c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    748e:	4e4a      	ldr	r6, [pc, #296]	; (75b8 <_spi_m_dma_init+0x158>)
    7490:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7494:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7496:	2d00      	cmp	r5, #0
    7498:	d0f6      	beq.n	7488 <_spi_m_dma_init+0x28>
    749a:	2001      	movs	r0, #1
    749c:	2c00      	cmp	r4, #0
    749e:	d0f3      	beq.n	7488 <_spi_m_dma_init+0x28>
    74a0:	f640 52c3 	movw	r2, #3523	; 0xdc3
    74a4:	4945      	ldr	r1, [pc, #276]	; (75bc <_spi_m_dma_init+0x15c>)
    74a6:	4b46      	ldr	r3, [pc, #280]	; (75c0 <_spi_m_dma_init+0x160>)
    74a8:	4798      	blx	r3

	if (regs == NULL) {
    74aa:	2e00      	cmp	r6, #0
    74ac:	d06a      	beq.n	7584 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    74ae:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    74b0:	f013 0f01 	tst.w	r3, #1
    74b4:	d11d      	bne.n	74f2 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    74b6:	6833      	ldr	r3, [r6, #0]
    74b8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74bc:	69e3      	ldr	r3, [r4, #28]
    74be:	f013 0f03 	tst.w	r3, #3
    74c2:	d1fb      	bne.n	74bc <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    74c4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    74c6:	f013 0f02 	tst.w	r3, #2
    74ca:	d00b      	beq.n	74e4 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    74cc:	6823      	ldr	r3, [r4, #0]
    74ce:	f023 0302 	bic.w	r3, r3, #2
    74d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74d4:	69e3      	ldr	r3, [r4, #28]
    74d6:	f013 0f03 	tst.w	r3, #3
    74da:	d1fb      	bne.n	74d4 <_spi_m_dma_init+0x74>
    74dc:	69e3      	ldr	r3, [r4, #28]
    74de:	f013 0f02 	tst.w	r3, #2
    74e2:	d1fb      	bne.n	74dc <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    74e4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    74e8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74ea:	69e3      	ldr	r3, [r4, #28]
    74ec:	f013 0f03 	tst.w	r3, #3
    74f0:	d1fb      	bne.n	74ea <_spi_m_dma_init+0x8a>
    74f2:	69e3      	ldr	r3, [r4, #28]
    74f4:	f013 0f01 	tst.w	r3, #1
    74f8:	d1fb      	bne.n	74f2 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    74fa:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    74fc:	f640 1276 	movw	r2, #2422	; 0x976
    7500:	492e      	ldr	r1, [pc, #184]	; (75bc <_spi_m_dma_init+0x15c>)
    7502:	1c20      	adds	r0, r4, #0
    7504:	bf18      	it	ne
    7506:	2001      	movne	r0, #1
    7508:	4b2d      	ldr	r3, [pc, #180]	; (75c0 <_spi_m_dma_init+0x160>)
    750a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    750c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    750e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7512:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7516:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7518:	69e3      	ldr	r3, [r4, #28]
    751a:	f013 0f03 	tst.w	r3, #3
    751e:	d1fb      	bne.n	7518 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7520:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7522:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7526:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    752e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7530:	69e3      	ldr	r3, [r4, #28]
    7532:	f013 0f17 	tst.w	r3, #23
    7536:	d1fb      	bne.n	7530 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7538:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    753a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    753c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    753e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7542:	f105 0818 	add.w	r8, r5, #24
    7546:	4620      	mov	r0, r4
    7548:	4b1e      	ldr	r3, [pc, #120]	; (75c4 <_spi_m_dma_init+0x164>)
    754a:	4798      	blx	r3
    754c:	4601      	mov	r1, r0
    754e:	4640      	mov	r0, r8
    7550:	4f1d      	ldr	r7, [pc, #116]	; (75c8 <_spi_m_dma_init+0x168>)
    7552:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7554:	69ab      	ldr	r3, [r5, #24]
    7556:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7558:	69ab      	ldr	r3, [r5, #24]
    755a:	4a1c      	ldr	r2, [pc, #112]	; (75cc <_spi_m_dma_init+0x16c>)
    755c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    755e:	69ab      	ldr	r3, [r5, #24]
    7560:	4e1b      	ldr	r6, [pc, #108]	; (75d0 <_spi_m_dma_init+0x170>)
    7562:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7564:	4620      	mov	r0, r4
    7566:	4b1b      	ldr	r3, [pc, #108]	; (75d4 <_spi_m_dma_init+0x174>)
    7568:	4798      	blx	r3
    756a:	4601      	mov	r1, r0
    756c:	4640      	mov	r0, r8
    756e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7570:	69ab      	ldr	r3, [r5, #24]
    7572:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7574:	69ab      	ldr	r3, [r5, #24]
    7576:	4a18      	ldr	r2, [pc, #96]	; (75d8 <_spi_m_dma_init+0x178>)
    7578:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    757a:	69ab      	ldr	r3, [r5, #24]
    757c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    757e:	2000      	movs	r0, #0
    7580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7584:	f06f 000c 	mvn.w	r0, #12
    7588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    758c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7590:	490a      	ldr	r1, [pc, #40]	; (75bc <_spi_m_dma_init+0x15c>)
    7592:	2000      	movs	r0, #0
    7594:	4b0a      	ldr	r3, [pc, #40]	; (75c0 <_spi_m_dma_init+0x160>)
    7596:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7598:	f06f 000c 	mvn.w	r0, #12
    759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    75a0:	f640 52c3 	movw	r2, #3523	; 0xdc3
    75a4:	4905      	ldr	r1, [pc, #20]	; (75bc <_spi_m_dma_init+0x15c>)
    75a6:	2001      	movs	r0, #1
    75a8:	4b05      	ldr	r3, [pc, #20]	; (75c0 <_spi_m_dma_init+0x160>)
    75aa:	4798      	blx	r3
		return ERR_INVALID_ARG;
    75ac:	f06f 000c 	mvn.w	r0, #12
    75b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75b4:	00006449 	.word	0x00006449
    75b8:	0000c460 	.word	0x0000c460
    75bc:	0000c484 	.word	0x0000c484
    75c0:	00005645 	.word	0x00005645
    75c4:	00006679 	.word	0x00006679
    75c8:	00005ec9 	.word	0x00005ec9
    75cc:	0000668d 	.word	0x0000668d
    75d0:	000066a5 	.word	0x000066a5
    75d4:	00006665 	.word	0x00006665
    75d8:	00006699 	.word	0x00006699

000075dc <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    75dc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    75de:	4604      	mov	r4, r0
    75e0:	b160      	cbz	r0, 75fc <_spi_m_dma_enable+0x20>
    75e2:	6800      	ldr	r0, [r0, #0]
    75e4:	3000      	adds	r0, #0
    75e6:	bf18      	it	ne
    75e8:	2001      	movne	r0, #1
    75ea:	f640 52ec 	movw	r2, #3564	; 0xdec
    75ee:	4904      	ldr	r1, [pc, #16]	; (7600 <_spi_m_dma_enable+0x24>)
    75f0:	4b04      	ldr	r3, [pc, #16]	; (7604 <_spi_m_dma_enable+0x28>)
    75f2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    75f4:	6820      	ldr	r0, [r4, #0]
    75f6:	4b04      	ldr	r3, [pc, #16]	; (7608 <_spi_m_dma_enable+0x2c>)
    75f8:	4798      	blx	r3
}
    75fa:	bd10      	pop	{r4, pc}
    75fc:	2000      	movs	r0, #0
    75fe:	e7f4      	b.n	75ea <_spi_m_dma_enable+0xe>
    7600:	0000c484 	.word	0x0000c484
    7604:	00005645 	.word	0x00005645
    7608:	00006581 	.word	0x00006581

0000760c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    760c:	b570      	push	{r4, r5, r6, lr}
    760e:	4605      	mov	r5, r0
    7610:	4614      	mov	r4, r2
	switch (type) {
    7612:	2901      	cmp	r1, #1
    7614:	d00e      	beq.n	7634 <_spi_m_dma_register_callback+0x28>
    7616:	b111      	cbz	r1, 761e <_spi_m_dma_register_callback+0x12>
    7618:	2902      	cmp	r1, #2
    761a:	d016      	beq.n	764a <_spi_m_dma_register_callback+0x3e>
    761c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    761e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7620:	6800      	ldr	r0, [r0, #0]
    7622:	4b13      	ldr	r3, [pc, #76]	; (7670 <_spi_m_dma_register_callback+0x64>)
    7624:	4798      	blx	r3
    7626:	1c22      	adds	r2, r4, #0
    7628:	bf18      	it	ne
    762a:	2201      	movne	r2, #1
    762c:	2100      	movs	r1, #0
    762e:	4b11      	ldr	r3, [pc, #68]	; (7674 <_spi_m_dma_register_callback+0x68>)
    7630:	4798      	blx	r3
		break;
    7632:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7634:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7636:	6800      	ldr	r0, [r0, #0]
    7638:	4b0f      	ldr	r3, [pc, #60]	; (7678 <_spi_m_dma_register_callback+0x6c>)
    763a:	4798      	blx	r3
    763c:	1c22      	adds	r2, r4, #0
    763e:	bf18      	it	ne
    7640:	2201      	movne	r2, #1
    7642:	2100      	movs	r1, #0
    7644:	4b0b      	ldr	r3, [pc, #44]	; (7674 <_spi_m_dma_register_callback+0x68>)
    7646:	4798      	blx	r3
		break;
    7648:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    764a:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    764c:	6800      	ldr	r0, [r0, #0]
    764e:	4b0a      	ldr	r3, [pc, #40]	; (7678 <_spi_m_dma_register_callback+0x6c>)
    7650:	4798      	blx	r3
    7652:	3400      	adds	r4, #0
    7654:	bf18      	it	ne
    7656:	2401      	movne	r4, #1
    7658:	4622      	mov	r2, r4
    765a:	2101      	movs	r1, #1
    765c:	4e05      	ldr	r6, [pc, #20]	; (7674 <_spi_m_dma_register_callback+0x68>)
    765e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7660:	6828      	ldr	r0, [r5, #0]
    7662:	4b03      	ldr	r3, [pc, #12]	; (7670 <_spi_m_dma_register_callback+0x64>)
    7664:	4798      	blx	r3
    7666:	4622      	mov	r2, r4
    7668:	2101      	movs	r1, #1
    766a:	47b0      	blx	r6
    766c:	bd70      	pop	{r4, r5, r6, pc}
    766e:	bf00      	nop
    7670:	00006665 	.word	0x00006665
    7674:	00005da1 	.word	0x00005da1
    7678:	00006679 	.word	0x00006679

0000767c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7680:	4605      	mov	r5, r0
    7682:	4689      	mov	r9, r1
    7684:	4617      	mov	r7, r2
    7686:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7688:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    768c:	4658      	mov	r0, fp
    768e:	4b46      	ldr	r3, [pc, #280]	; (77a8 <_spi_m_dma_transfer+0x12c>)
    7690:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7692:	2803      	cmp	r0, #3
    7694:	d053      	beq.n	773e <_spi_m_dma_transfer+0xc2>
    7696:	2807      	cmp	r0, #7
    7698:	bf08      	it	eq
    769a:	2201      	moveq	r2, #1
    769c:	d050      	beq.n	7740 <_spi_m_dma_transfer+0xc4>
	return NULL;
    769e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    76a2:	4658      	mov	r0, fp
    76a4:	4b41      	ldr	r3, [pc, #260]	; (77ac <_spi_m_dma_transfer+0x130>)
    76a6:	4798      	blx	r3
    76a8:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    76aa:	4658      	mov	r0, fp
    76ac:	4b40      	ldr	r3, [pc, #256]	; (77b0 <_spi_m_dma_transfer+0x134>)
    76ae:	4798      	blx	r3
    76b0:	4604      	mov	r4, r0

	if (rxbuf) {
    76b2:	2f00      	cmp	r7, #0
    76b4:	d04b      	beq.n	774e <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    76b6:	2d00      	cmp	r5, #0
    76b8:	d047      	beq.n	774a <_spi_m_dma_transfer+0xce>
    76ba:	f11b 0000 	adds.w	r0, fp, #0
    76be:	bf18      	it	ne
    76c0:	2001      	movne	r0, #1
    76c2:	f640 5236 	movw	r2, #3382	; 0xd36
    76c6:	493b      	ldr	r1, [pc, #236]	; (77b4 <_spi_m_dma_transfer+0x138>)
    76c8:	4b3b      	ldr	r3, [pc, #236]	; (77b8 <_spi_m_dma_transfer+0x13c>)
    76ca:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    76cc:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    76ce:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    76d0:	f013 0f04 	tst.w	r3, #4
    76d4:	d107      	bne.n	76e6 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    76d6:	6853      	ldr	r3, [r2, #4]
    76d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    76dc:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    76de:	69d3      	ldr	r3, [r2, #28]
    76e0:	f013 0f17 	tst.w	r3, #23
    76e4:	d1fb      	bne.n	76de <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    76e6:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    76e8:	3128      	adds	r1, #40	; 0x28
    76ea:	4630      	mov	r0, r6
    76ec:	4b33      	ldr	r3, [pc, #204]	; (77bc <_spi_m_dma_transfer+0x140>)
    76ee:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    76f0:	4639      	mov	r1, r7
    76f2:	4630      	mov	r0, r6
    76f4:	4b32      	ldr	r3, [pc, #200]	; (77c0 <_spi_m_dma_transfer+0x144>)
    76f6:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    76f8:	4641      	mov	r1, r8
    76fa:	4630      	mov	r0, r6
    76fc:	4b31      	ldr	r3, [pc, #196]	; (77c4 <_spi_m_dma_transfer+0x148>)
    76fe:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7700:	2100      	movs	r1, #0
    7702:	4630      	mov	r0, r6
    7704:	4b30      	ldr	r3, [pc, #192]	; (77c8 <_spi_m_dma_transfer+0x14c>)
    7706:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7708:	f1b9 0f00 	cmp.w	r9, #0
    770c:	d039      	beq.n	7782 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    770e:	4649      	mov	r1, r9
    7710:	4620      	mov	r0, r4
    7712:	4b2a      	ldr	r3, [pc, #168]	; (77bc <_spi_m_dma_transfer+0x140>)
    7714:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7716:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7718:	3128      	adds	r1, #40	; 0x28
    771a:	4620      	mov	r0, r4
    771c:	4b28      	ldr	r3, [pc, #160]	; (77c0 <_spi_m_dma_transfer+0x144>)
    771e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7720:	2101      	movs	r1, #1
    7722:	4620      	mov	r0, r4
    7724:	4b29      	ldr	r3, [pc, #164]	; (77cc <_spi_m_dma_transfer+0x150>)
    7726:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7728:	4641      	mov	r1, r8
    772a:	4620      	mov	r0, r4
    772c:	4b25      	ldr	r3, [pc, #148]	; (77c4 <_spi_m_dma_transfer+0x148>)
    772e:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7730:	2100      	movs	r1, #0
    7732:	4620      	mov	r0, r4
    7734:	4b24      	ldr	r3, [pc, #144]	; (77c8 <_spi_m_dma_transfer+0x14c>)
    7736:	4798      	blx	r3

	return ERR_NONE;
}
    7738:	2000      	movs	r0, #0
    773a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    773e:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7740:	4b23      	ldr	r3, [pc, #140]	; (77d0 <_spi_m_dma_transfer+0x154>)
    7742:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7746:	4492      	add	sl, r2
    7748:	e7ab      	b.n	76a2 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    774a:	2000      	movs	r0, #0
    774c:	e7b9      	b.n	76c2 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    774e:	b1b5      	cbz	r5, 777e <_spi_m_dma_transfer+0x102>
    7750:	f11b 0000 	adds.w	r0, fp, #0
    7754:	bf18      	it	ne
    7756:	2001      	movne	r0, #1
    7758:	f640 523d 	movw	r2, #3389	; 0xd3d
    775c:	4915      	ldr	r1, [pc, #84]	; (77b4 <_spi_m_dma_transfer+0x138>)
    775e:	4b16      	ldr	r3, [pc, #88]	; (77b8 <_spi_m_dma_transfer+0x13c>)
    7760:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7762:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7764:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7766:	f013 0f04 	tst.w	r3, #4
    776a:	d1cd      	bne.n	7708 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    776c:	6853      	ldr	r3, [r2, #4]
    776e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7772:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7774:	69d3      	ldr	r3, [r2, #28]
    7776:	f013 0f17 	tst.w	r3, #23
    777a:	d1fb      	bne.n	7774 <_spi_m_dma_transfer+0xf8>
    777c:	e7c4      	b.n	7708 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    777e:	2000      	movs	r0, #0
    7780:	e7ea      	b.n	7758 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7782:	f10a 010e 	add.w	r1, sl, #14
    7786:	4620      	mov	r0, r4
    7788:	4b0c      	ldr	r3, [pc, #48]	; (77bc <_spi_m_dma_transfer+0x140>)
    778a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    778c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    778e:	3128      	adds	r1, #40	; 0x28
    7790:	4620      	mov	r0, r4
    7792:	4b0b      	ldr	r3, [pc, #44]	; (77c0 <_spi_m_dma_transfer+0x144>)
    7794:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7796:	2100      	movs	r1, #0
    7798:	4620      	mov	r0, r4
    779a:	4b0c      	ldr	r3, [pc, #48]	; (77cc <_spi_m_dma_transfer+0x150>)
    779c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    779e:	4641      	mov	r1, r8
    77a0:	4620      	mov	r0, r4
    77a2:	4b08      	ldr	r3, [pc, #32]	; (77c4 <_spi_m_dma_transfer+0x148>)
    77a4:	4798      	blx	r3
    77a6:	e7c3      	b.n	7730 <_spi_m_dma_transfer+0xb4>
    77a8:	00006449 	.word	0x00006449
    77ac:	00006679 	.word	0x00006679
    77b0:	00006665 	.word	0x00006665
    77b4:	0000c484 	.word	0x0000c484
    77b8:	00005645 	.word	0x00005645
    77bc:	00005e05 	.word	0x00005e05
    77c0:	00005df5 	.word	0x00005df5
    77c4:	00005e31 	.word	0x00005e31
    77c8:	00005e89 	.word	0x00005e89
    77cc:	00005e15 	.word	0x00005e15
    77d0:	0000c460 	.word	0x0000c460

000077d4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    77d4:	4b03      	ldr	r3, [pc, #12]	; (77e4 <_delay_init+0x10>)
    77d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    77da:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    77dc:	2205      	movs	r2, #5
    77de:	601a      	str	r2, [r3, #0]
    77e0:	4770      	bx	lr
    77e2:	bf00      	nop
    77e4:	e000e010 	.word	0xe000e010

000077e8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    77e8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    77ea:	b303      	cbz	r3, 782e <_delay_cycles+0x46>
{
    77ec:	b430      	push	{r4, r5}
    77ee:	1e5d      	subs	r5, r3, #1
    77f0:	b2ed      	uxtb	r5, r5
	while (n--) {
    77f2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    77f4:	4a12      	ldr	r2, [pc, #72]	; (7840 <_delay_cycles+0x58>)
    77f6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    77fa:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    77fc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    77fe:	6813      	ldr	r3, [r2, #0]
    7800:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7804:	d0fb      	beq.n	77fe <_delay_cycles+0x16>
	while (n--) {
    7806:	3801      	subs	r0, #1
    7808:	b2c0      	uxtb	r0, r0
    780a:	28ff      	cmp	r0, #255	; 0xff
    780c:	d1f5      	bne.n	77fa <_delay_cycles+0x12>
    780e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    7812:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7816:	3101      	adds	r1, #1
    7818:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    781a:	4b09      	ldr	r3, [pc, #36]	; (7840 <_delay_cycles+0x58>)
    781c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    781e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7820:	461a      	mov	r2, r3
    7822:	6813      	ldr	r3, [r2, #0]
    7824:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7828:	d0fb      	beq.n	7822 <_delay_cycles+0x3a>
		;
}
    782a:	bc30      	pop	{r4, r5}
    782c:	4770      	bx	lr
	SysTick->LOAD = buf;
    782e:	4b04      	ldr	r3, [pc, #16]	; (7840 <_delay_cycles+0x58>)
    7830:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7832:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7834:	461a      	mov	r2, r3
    7836:	6813      	ldr	r3, [r2, #0]
    7838:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    783c:	d0fb      	beq.n	7836 <_delay_cycles+0x4e>
    783e:	4770      	bx	lr
    7840:	e000e010 	.word	0xe000e010

00007844 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7844:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7846:	6813      	ldr	r3, [r2, #0]
    7848:	f043 0302 	orr.w	r3, r3, #2
    784c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    784e:	6913      	ldr	r3, [r2, #16]
    7850:	f013 0f03 	tst.w	r3, #3
    7854:	d1fb      	bne.n	784e <_tc_timer_start+0xa>
}
    7856:	4770      	bx	lr

00007858 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7858:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    785a:	6813      	ldr	r3, [r2, #0]
    785c:	f023 0302 	bic.w	r3, r3, #2
    7860:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7862:	6913      	ldr	r3, [r2, #16]
    7864:	f013 0f03 	tst.w	r3, #3
    7868:	d1fb      	bne.n	7862 <_tc_timer_stop+0xa>
}
    786a:	4770      	bx	lr

0000786c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    786c:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    786e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7870:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7874:	2a02      	cmp	r2, #2
    7876:	d00a      	beq.n	788e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7878:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    787a:	f012 0f0c 	tst.w	r2, #12
    787e:	d10c      	bne.n	789a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7880:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7882:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7884:	691a      	ldr	r2, [r3, #16]
    7886:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    788a:	d1fb      	bne.n	7884 <_tc_timer_set_period+0x18>
    788c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    788e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7890:	691a      	ldr	r2, [r3, #16]
    7892:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7896:	d1fb      	bne.n	7890 <_tc_timer_set_period+0x24>
    7898:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    789a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    789c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    78a0:	2a01      	cmp	r2, #1
    78a2:	d000      	beq.n	78a6 <_tc_timer_set_period+0x3a>
    78a4:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    78a6:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    78a8:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    78aa:	691a      	ldr	r2, [r3, #16]
    78ac:	f012 0f20 	tst.w	r2, #32
    78b0:	d1fb      	bne.n	78aa <_tc_timer_set_period+0x3e>
    78b2:	e7f7      	b.n	78a4 <_tc_timer_set_period+0x38>

000078b4 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    78b4:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    78b6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    78b8:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    78bc:	2a02      	cmp	r2, #2
    78be:	d00a      	beq.n	78d6 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    78c0:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    78c2:	f012 0f0c 	tst.w	r2, #12
    78c6:	d10c      	bne.n	78e2 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    78c8:	691a      	ldr	r2, [r3, #16]
    78ca:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    78ce:	d1fb      	bne.n	78c8 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    78d0:	8b98      	ldrh	r0, [r3, #28]
    78d2:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    78d4:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    78d6:	691a      	ldr	r2, [r3, #16]
    78d8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    78dc:	d1fb      	bne.n	78d6 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    78de:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    78e0:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    78e2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    78e4:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    78e8:	2a01      	cmp	r2, #1
    78ea:	d001      	beq.n	78f0 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    78ec:	2000      	movs	r0, #0
}
    78ee:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    78f0:	691a      	ldr	r2, [r3, #16]
    78f2:	f012 0f20 	tst.w	r2, #32
    78f6:	d1fb      	bne.n	78f0 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    78f8:	7ed8      	ldrb	r0, [r3, #27]
    78fa:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    78fc:	4770      	bx	lr

000078fe <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    78fe:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7900:	6913      	ldr	r3, [r2, #16]
    7902:	f013 0f03 	tst.w	r3, #3
    7906:	d1fb      	bne.n	7900 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7908:	6810      	ldr	r0, [r2, #0]
}
    790a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    790e:	4770      	bx	lr

00007910 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7910:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7912:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7914:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7916:	f012 0f01 	tst.w	r2, #1
    791a:	d100      	bne.n	791e <tc_interrupt_handler+0xe>
    791c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    791e:	2201      	movs	r2, #1
    7920:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7922:	6803      	ldr	r3, [r0, #0]
    7924:	4798      	blx	r3
	}
}
    7926:	e7f9      	b.n	791c <tc_interrupt_handler+0xc>

00007928 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	b088      	sub	sp, #32
    792c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    792e:	466c      	mov	r4, sp
    7930:	4d19      	ldr	r5, [pc, #100]	; (7998 <get_tc_index+0x70>)
    7932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7936:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    793a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    793e:	9b00      	ldr	r3, [sp, #0]
    7940:	42b3      	cmp	r3, r6
    7942:	d00c      	beq.n	795e <get_tc_index+0x36>
    7944:	4630      	mov	r0, r6
    7946:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7948:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    794a:	f852 1b04 	ldr.w	r1, [r2], #4
    794e:	4281      	cmp	r1, r0
    7950:	d006      	beq.n	7960 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7952:	3301      	adds	r3, #1
    7954:	2b08      	cmp	r3, #8
    7956:	d1f8      	bne.n	794a <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7958:	2000      	movs	r0, #0
			return i;
    795a:	b240      	sxtb	r0, r0
    795c:	e013      	b.n	7986 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    795e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7960:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7964:	d015      	beq.n	7992 <get_tc_index+0x6a>
    7966:	2b01      	cmp	r3, #1
    7968:	d00f      	beq.n	798a <get_tc_index+0x62>
    796a:	2b02      	cmp	r3, #2
    796c:	d00f      	beq.n	798e <get_tc_index+0x66>
    796e:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7970:	bf08      	it	eq
    7972:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7974:	d0f1      	beq.n	795a <get_tc_index+0x32>
	ASSERT(false);
    7976:	f240 1267 	movw	r2, #359	; 0x167
    797a:	4908      	ldr	r1, [pc, #32]	; (799c <get_tc_index+0x74>)
    797c:	2000      	movs	r0, #0
    797e:	4b08      	ldr	r3, [pc, #32]	; (79a0 <get_tc_index+0x78>)
    7980:	4798      	blx	r3
	return -1;
    7982:	f04f 30ff 	mov.w	r0, #4294967295
}
    7986:	b008      	add	sp, #32
    7988:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    798a:	2001      	movs	r0, #1
    798c:	e7e5      	b.n	795a <get_tc_index+0x32>
    798e:	2002      	movs	r0, #2
    7990:	e7e3      	b.n	795a <get_tc_index+0x32>
    7992:	2000      	movs	r0, #0
    7994:	e7e1      	b.n	795a <get_tc_index+0x32>
    7996:	bf00      	nop
    7998:	0000c4a0 	.word	0x0000c4a0
    799c:	0000c510 	.word	0x0000c510
    79a0:	00005645 	.word	0x00005645

000079a4 <_tc_timer_init>:
{
    79a4:	b570      	push	{r4, r5, r6, lr}
    79a6:	4606      	mov	r6, r0
    79a8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    79aa:	4608      	mov	r0, r1
    79ac:	4b71      	ldr	r3, [pc, #452]	; (7b74 <_tc_timer_init+0x1d0>)
    79ae:	4798      	blx	r3
    79b0:	4605      	mov	r5, r0
	device->hw = hw;
    79b2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    79b4:	22a0      	movs	r2, #160	; 0xa0
    79b6:	4970      	ldr	r1, [pc, #448]	; (7b78 <_tc_timer_init+0x1d4>)
    79b8:	2001      	movs	r0, #1
    79ba:	4b70      	ldr	r3, [pc, #448]	; (7b7c <_tc_timer_init+0x1d8>)
    79bc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    79be:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    79c0:	f013 0f01 	tst.w	r3, #1
    79c4:	d119      	bne.n	79fa <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    79c6:	6923      	ldr	r3, [r4, #16]
    79c8:	f013 0f03 	tst.w	r3, #3
    79cc:	d1fb      	bne.n	79c6 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    79ce:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    79d0:	f013 0f02 	tst.w	r3, #2
    79d4:	d00b      	beq.n	79ee <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    79d6:	6823      	ldr	r3, [r4, #0]
    79d8:	f023 0302 	bic.w	r3, r3, #2
    79dc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    79de:	6923      	ldr	r3, [r4, #16]
    79e0:	f013 0f03 	tst.w	r3, #3
    79e4:	d1fb      	bne.n	79de <_tc_timer_init+0x3a>
    79e6:	6923      	ldr	r3, [r4, #16]
    79e8:	f013 0f02 	tst.w	r3, #2
    79ec:	d1fb      	bne.n	79e6 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    79ee:	2301      	movs	r3, #1
    79f0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    79f2:	6923      	ldr	r3, [r4, #16]
    79f4:	f013 0f03 	tst.w	r3, #3
    79f8:	d1fb      	bne.n	79f2 <_tc_timer_init+0x4e>
    79fa:	6923      	ldr	r3, [r4, #16]
    79fc:	f013 0f01 	tst.w	r3, #1
    7a00:	d1fb      	bne.n	79fa <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7a02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7a06:	4a5e      	ldr	r2, [pc, #376]	; (7b80 <_tc_timer_init+0x1dc>)
    7a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7a0e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a10:	6923      	ldr	r3, [r4, #16]
    7a12:	f013 0f03 	tst.w	r3, #3
    7a16:	d1fb      	bne.n	7a10 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7a18:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7a1c:	4958      	ldr	r1, [pc, #352]	; (7b80 <_tc_timer_init+0x1dc>)
    7a1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7a22:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7a26:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7a2a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7a2c:	2301      	movs	r3, #1
    7a2e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7a30:	f002 020c 	and.w	r2, r2, #12
    7a34:	2a08      	cmp	r2, #8
    7a36:	d056      	beq.n	7ae6 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7a38:	2a00      	cmp	r2, #0
    7a3a:	d16b      	bne.n	7b14 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7a3c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7a40:	4a4f      	ldr	r2, [pc, #316]	; (7b80 <_tc_timer_init+0x1dc>)
    7a42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7a46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7a48:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a4a:	6923      	ldr	r3, [r4, #16]
    7a4c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7a50:	d1fb      	bne.n	7a4a <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7a52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7a56:	4a4a      	ldr	r2, [pc, #296]	; (7b80 <_tc_timer_init+0x1dc>)
    7a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7a5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7a5e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a60:	6923      	ldr	r3, [r4, #16]
    7a62:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7a66:	d1fb      	bne.n	7a60 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7a68:	2301      	movs	r3, #1
    7a6a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7a6c:	4b45      	ldr	r3, [pc, #276]	; (7b84 <_tc_timer_init+0x1e0>)
    7a6e:	429c      	cmp	r4, r3
    7a70:	d077      	beq.n	7b62 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7a72:	4b45      	ldr	r3, [pc, #276]	; (7b88 <_tc_timer_init+0x1e4>)
    7a74:	429c      	cmp	r4, r3
    7a76:	d077      	beq.n	7b68 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7a78:	4b44      	ldr	r3, [pc, #272]	; (7b8c <_tc_timer_init+0x1e8>)
    7a7a:	429c      	cmp	r4, r3
    7a7c:	d077      	beq.n	7b6e <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    7a7e:	4b44      	ldr	r3, [pc, #272]	; (7b90 <_tc_timer_init+0x1ec>)
    7a80:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7a82:	bf04      	itt	eq
    7a84:	4b43      	ldreq	r3, [pc, #268]	; (7b94 <_tc_timer_init+0x1f0>)
    7a86:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7a88:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7a8c:	4a3c      	ldr	r2, [pc, #240]	; (7b80 <_tc_timer_init+0x1dc>)
    7a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7a92:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7a96:	2b00      	cmp	r3, #0
    7a98:	db23      	blt.n	7ae2 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a9a:	095a      	lsrs	r2, r3, #5
    7a9c:	f003 031f 	and.w	r3, r3, #31
    7aa0:	2101      	movs	r1, #1
    7aa2:	fa01 f303 	lsl.w	r3, r1, r3
    7aa6:	3220      	adds	r2, #32
    7aa8:	493b      	ldr	r1, [pc, #236]	; (7b98 <_tc_timer_init+0x1f4>)
    7aaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ab2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ab6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7aba:	4b31      	ldr	r3, [pc, #196]	; (7b80 <_tc_timer_init+0x1dc>)
    7abc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7ac0:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	db0c      	blt.n	7ae2 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ac8:	0959      	lsrs	r1, r3, #5
    7aca:	f003 031f 	and.w	r3, r3, #31
    7ace:	2201      	movs	r2, #1
    7ad0:	fa02 f303 	lsl.w	r3, r2, r3
    7ad4:	4a30      	ldr	r2, [pc, #192]	; (7b98 <_tc_timer_init+0x1f4>)
    7ad6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7ada:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ade:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    7ae2:	2000      	movs	r0, #0
    7ae4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7ae6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7aea:	4a25      	ldr	r2, [pc, #148]	; (7b80 <_tc_timer_init+0x1dc>)
    7aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7af2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7af4:	6923      	ldr	r3, [r4, #16]
    7af6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7afa:	d1fb      	bne.n	7af4 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7afc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7b00:	4a1f      	ldr	r2, [pc, #124]	; (7b80 <_tc_timer_init+0x1dc>)
    7b02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7b08:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b0a:	6923      	ldr	r3, [r4, #16]
    7b0c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7b10:	d1fb      	bne.n	7b0a <_tc_timer_init+0x166>
    7b12:	e7a9      	b.n	7a68 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7b14:	2a04      	cmp	r2, #4
    7b16:	d1a7      	bne.n	7a68 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7b18:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7b1c:	4a18      	ldr	r2, [pc, #96]	; (7b80 <_tc_timer_init+0x1dc>)
    7b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7b26:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b28:	6923      	ldr	r3, [r4, #16]
    7b2a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7b2e:	d1fb      	bne.n	7b28 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7b30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7b34:	4a12      	ldr	r2, [pc, #72]	; (7b80 <_tc_timer_init+0x1dc>)
    7b36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7b3e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b40:	6923      	ldr	r3, [r4, #16]
    7b42:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7b46:	d1fb      	bne.n	7b40 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7b48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7b4c:	4a0c      	ldr	r2, [pc, #48]	; (7b80 <_tc_timer_init+0x1dc>)
    7b4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7b52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7b56:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b58:	6923      	ldr	r3, [r4, #16]
    7b5a:	f013 0f20 	tst.w	r3, #32
    7b5e:	d1fb      	bne.n	7b58 <_tc_timer_init+0x1b4>
    7b60:	e782      	b.n	7a68 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7b62:	4b0c      	ldr	r3, [pc, #48]	; (7b94 <_tc_timer_init+0x1f0>)
    7b64:	601e      	str	r6, [r3, #0]
    7b66:	e78a      	b.n	7a7e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7b68:	4b0a      	ldr	r3, [pc, #40]	; (7b94 <_tc_timer_init+0x1f0>)
    7b6a:	605e      	str	r6, [r3, #4]
    7b6c:	e78c      	b.n	7a88 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    7b6e:	4b09      	ldr	r3, [pc, #36]	; (7b94 <_tc_timer_init+0x1f0>)
    7b70:	609e      	str	r6, [r3, #8]
    7b72:	e789      	b.n	7a88 <_tc_timer_init+0xe4>
    7b74:	00007929 	.word	0x00007929
    7b78:	0000c510 	.word	0x0000c510
    7b7c:	00005645 	.word	0x00005645
    7b80:	0000c4a0 	.word	0x0000c4a0
    7b84:	40003800 	.word	0x40003800
    7b88:	40003c00 	.word	0x40003c00
    7b8c:	4101a000 	.word	0x4101a000
    7b90:	4101c000 	.word	0x4101c000
    7b94:	200009ac 	.word	0x200009ac
    7b98:	e000e100 	.word	0xe000e100

00007b9c <_tc_timer_deinit>:
{
    7b9c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    7b9e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    7ba0:	4620      	mov	r0, r4
    7ba2:	4b18      	ldr	r3, [pc, #96]	; (7c04 <_tc_timer_deinit+0x68>)
    7ba4:	4798      	blx	r3
    7ba6:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7ba8:	22cd      	movs	r2, #205	; 0xcd
    7baa:	4917      	ldr	r1, [pc, #92]	; (7c08 <_tc_timer_deinit+0x6c>)
    7bac:	2001      	movs	r0, #1
    7bae:	4b17      	ldr	r3, [pc, #92]	; (7c0c <_tc_timer_deinit+0x70>)
    7bb0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7bb2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7bb6:	4b16      	ldr	r3, [pc, #88]	; (7c10 <_tc_timer_deinit+0x74>)
    7bb8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7bbc:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	db0d      	blt.n	7be0 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bc4:	095a      	lsrs	r2, r3, #5
    7bc6:	f003 031f 	and.w	r3, r3, #31
    7bca:	2101      	movs	r1, #1
    7bcc:	fa01 f303 	lsl.w	r3, r1, r3
    7bd0:	3220      	adds	r2, #32
    7bd2:	4910      	ldr	r1, [pc, #64]	; (7c14 <_tc_timer_deinit+0x78>)
    7bd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7bdc:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7be0:	6823      	ldr	r3, [r4, #0]
    7be2:	f023 0302 	bic.w	r3, r3, #2
    7be6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7be8:	6923      	ldr	r3, [r4, #16]
    7bea:	f013 0f03 	tst.w	r3, #3
    7bee:	d1fb      	bne.n	7be8 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7bf0:	6823      	ldr	r3, [r4, #0]
    7bf2:	f043 0301 	orr.w	r3, r3, #1
    7bf6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bf8:	6923      	ldr	r3, [r4, #16]
    7bfa:	f013 0f01 	tst.w	r3, #1
    7bfe:	d1fb      	bne.n	7bf8 <_tc_timer_deinit+0x5c>
}
    7c00:	bd38      	pop	{r3, r4, r5, pc}
    7c02:	bf00      	nop
    7c04:	00007929 	.word	0x00007929
    7c08:	0000c510 	.word	0x0000c510
    7c0c:	00005645 	.word	0x00005645
    7c10:	0000c4a0 	.word	0x0000c4a0
    7c14:	e000e100 	.word	0xe000e100

00007c18 <_tc_timer_set_irq>:
{
    7c18:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    7c1a:	68c0      	ldr	r0, [r0, #12]
    7c1c:	4b09      	ldr	r3, [pc, #36]	; (7c44 <_tc_timer_set_irq+0x2c>)
    7c1e:	4798      	blx	r3
    7c20:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7c22:	f44f 7291 	mov.w	r2, #290	; 0x122
    7c26:	4908      	ldr	r1, [pc, #32]	; (7c48 <_tc_timer_set_irq+0x30>)
    7c28:	2001      	movs	r0, #1
    7c2a:	4b08      	ldr	r3, [pc, #32]	; (7c4c <_tc_timer_set_irq+0x34>)
    7c2c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    7c2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7c32:	4b07      	ldr	r3, [pc, #28]	; (7c50 <_tc_timer_set_irq+0x38>)
    7c34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7c38:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    7c3c:	4b05      	ldr	r3, [pc, #20]	; (7c54 <_tc_timer_set_irq+0x3c>)
    7c3e:	4798      	blx	r3
    7c40:	bd10      	pop	{r4, pc}
    7c42:	bf00      	nop
    7c44:	00007929 	.word	0x00007929
    7c48:	0000c510 	.word	0x0000c510
    7c4c:	00005645 	.word	0x00005645
    7c50:	0000c4a0 	.word	0x0000c4a0
    7c54:	00005bc1 	.word	0x00005bc1

00007c58 <_tc_get_timer>:
}
    7c58:	4800      	ldr	r0, [pc, #0]	; (7c5c <_tc_get_timer+0x4>)
    7c5a:	4770      	bx	lr
    7c5c:	20000378 	.word	0x20000378

00007c60 <TC0_Handler>:
{
    7c60:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    7c62:	4b02      	ldr	r3, [pc, #8]	; (7c6c <TC0_Handler+0xc>)
    7c64:	6818      	ldr	r0, [r3, #0]
    7c66:	4b02      	ldr	r3, [pc, #8]	; (7c70 <TC0_Handler+0x10>)
    7c68:	4798      	blx	r3
    7c6a:	bd08      	pop	{r3, pc}
    7c6c:	200009ac 	.word	0x200009ac
    7c70:	00007911 	.word	0x00007911

00007c74 <TC1_Handler>:
{
    7c74:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    7c76:	4b02      	ldr	r3, [pc, #8]	; (7c80 <TC1_Handler+0xc>)
    7c78:	6858      	ldr	r0, [r3, #4]
    7c7a:	4b02      	ldr	r3, [pc, #8]	; (7c84 <TC1_Handler+0x10>)
    7c7c:	4798      	blx	r3
    7c7e:	bd08      	pop	{r3, pc}
    7c80:	200009ac 	.word	0x200009ac
    7c84:	00007911 	.word	0x00007911

00007c88 <TC2_Handler>:
{
    7c88:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    7c8a:	4b02      	ldr	r3, [pc, #8]	; (7c94 <TC2_Handler+0xc>)
    7c8c:	6898      	ldr	r0, [r3, #8]
    7c8e:	4b02      	ldr	r3, [pc, #8]	; (7c98 <TC2_Handler+0x10>)
    7c90:	4798      	blx	r3
    7c92:	bd08      	pop	{r3, pc}
    7c94:	200009ac 	.word	0x200009ac
    7c98:	00007911 	.word	0x00007911

00007c9c <TC3_Handler>:
{
    7c9c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    7c9e:	4b02      	ldr	r3, [pc, #8]	; (7ca8 <TC3_Handler+0xc>)
    7ca0:	68d8      	ldr	r0, [r3, #12]
    7ca2:	4b02      	ldr	r3, [pc, #8]	; (7cac <TC3_Handler+0x10>)
    7ca4:	4798      	blx	r3
    7ca6:	bd08      	pop	{r3, pc}
    7ca8:	200009ac 	.word	0x200009ac
    7cac:	00007911 	.word	0x00007911

00007cb0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    7cb0:	2000      	movs	r0, #0
    7cb2:	4770      	bx	lr

00007cb4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7cb4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7cb6:	7c83      	ldrb	r3, [r0, #18]
    7cb8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7cbc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    7cbe:	f002 0107 	and.w	r1, r2, #7
    7cc2:	2901      	cmp	r1, #1
    7cc4:	d00b      	beq.n	7cde <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7cc6:	015a      	lsls	r2, r3, #5
    7cc8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7ccc:	2110      	movs	r1, #16
    7cce:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7cd2:	015b      	lsls	r3, r3, #5
    7cd4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7cd8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    7cdc:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    7cde:	f012 0f40 	tst.w	r2, #64	; 0x40
    7ce2:	d00c      	beq.n	7cfe <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    7ce4:	7cc2      	ldrb	r2, [r0, #19]
    7ce6:	f36f 1286 	bfc	r2, #6, #1
    7cea:	74c2      	strb	r2, [r0, #19]
    7cec:	015a      	lsls	r2, r3, #5
    7cee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7cf2:	2180      	movs	r1, #128	; 0x80
    7cf4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7cf8:	2140      	movs	r1, #64	; 0x40
    7cfa:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    7cfe:	7cc2      	ldrb	r2, [r0, #19]
    7d00:	f36f 02c3 	bfc	r2, #3, #1
    7d04:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    7d06:	490a      	ldr	r1, [pc, #40]	; (7d30 <_usb_d_dev_handle_setup+0x7c>)
    7d08:	015a      	lsls	r2, r3, #5
    7d0a:	188c      	adds	r4, r1, r2
    7d0c:	2500      	movs	r5, #0
    7d0e:	72a5      	strb	r5, [r4, #10]
    7d10:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7d12:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    7d16:	246f      	movs	r4, #111	; 0x6f
    7d18:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7d1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7d20:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    7d24:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    7d28:	7c80      	ldrb	r0, [r0, #18]
    7d2a:	4798      	blx	r3
    7d2c:	bd38      	pop	{r3, r4, r5, pc}
    7d2e:	bf00      	nop
    7d30:	200009bc 	.word	0x200009bc

00007d34 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7d34:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    7d36:	2320      	movs	r3, #32
    7d38:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    7d3c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7d3e:	7c83      	ldrb	r3, [r0, #18]
    7d40:	f003 030f 	and.w	r3, r3, #15
    7d44:	015b      	lsls	r3, r3, #5
    7d46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7d4a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    7d4e:	4b04      	ldr	r3, [pc, #16]	; (7d60 <_usb_d_dev_handle_stall+0x2c>)
    7d50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    7d54:	6882      	ldr	r2, [r0, #8]
    7d56:	2101      	movs	r1, #1
    7d58:	7c80      	ldrb	r0, [r0, #18]
    7d5a:	4798      	blx	r3
    7d5c:	bd08      	pop	{r3, pc}
    7d5e:	bf00      	nop
    7d60:	200009bc 	.word	0x200009bc

00007d64 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    7d64:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7d66:	7c84      	ldrb	r4, [r0, #18]
    7d68:	2cff      	cmp	r4, #255	; 0xff
    7d6a:	d003      	beq.n	7d74 <_usb_d_dev_trans_done+0x10>
    7d6c:	7cc3      	ldrb	r3, [r0, #19]
    7d6e:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d72:	d100      	bne.n	7d76 <_usb_d_dev_trans_done+0x12>
    7d74:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    7d76:	7cc2      	ldrb	r2, [r0, #19]
    7d78:	f36f 1286 	bfc	r2, #6, #1
    7d7c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    7d7e:	4a03      	ldr	r2, [pc, #12]	; (7d8c <_usb_d_dev_trans_done+0x28>)
    7d80:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    7d84:	6882      	ldr	r2, [r0, #8]
    7d86:	4620      	mov	r0, r4
    7d88:	47a8      	blx	r5
    7d8a:	e7f3      	b.n	7d74 <_usb_d_dev_trans_done+0x10>
    7d8c:	200009bc 	.word	0x200009bc

00007d90 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    7d90:	b530      	push	{r4, r5, lr}
    7d92:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7d94:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    7d96:	2425      	movs	r4, #37	; 0x25
    7d98:	f88d 4004 	strb.w	r4, [sp, #4]
    7d9c:	244a      	movs	r4, #74	; 0x4a
    7d9e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7da2:	2bff      	cmp	r3, #255	; 0xff
    7da4:	d01e      	beq.n	7de4 <_usb_d_dev_trans_stop+0x54>
    7da6:	7cc4      	ldrb	r4, [r0, #19]
    7da8:	f014 0f40 	tst.w	r4, #64	; 0x40
    7dac:	d01a      	beq.n	7de4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7dae:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    7db2:	b1c9      	cbz	r1, 7de8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7db4:	0163      	lsls	r3, r4, #5
    7db6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dba:	2580      	movs	r5, #128	; 0x80
    7dbc:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    7dc0:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    7dc2:	a902      	add	r1, sp, #8
    7dc4:	440b      	add	r3, r1
    7dc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7dca:	0163      	lsls	r3, r4, #5
    7dcc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dd0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7dd4:	0163      	lsls	r3, r4, #5
    7dd6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dda:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    7dde:	4611      	mov	r1, r2
    7de0:	4b05      	ldr	r3, [pc, #20]	; (7df8 <_usb_d_dev_trans_stop+0x68>)
    7de2:	4798      	blx	r3
}
    7de4:	b003      	add	sp, #12
    7de6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7de8:	0163      	lsls	r3, r4, #5
    7dea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dee:	2540      	movs	r5, #64	; 0x40
    7df0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    7df4:	e7e4      	b.n	7dc0 <_usb_d_dev_trans_stop+0x30>
    7df6:	bf00      	nop
    7df8:	00007d65 	.word	0x00007d65

00007dfc <_usb_d_dev_handle_trfail>:
{
    7dfc:	b530      	push	{r4, r5, lr}
    7dfe:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    7e00:	7c83      	ldrb	r3, [r0, #18]
    7e02:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    7e06:	2204      	movs	r2, #4
    7e08:	f88d 2004 	strb.w	r2, [sp, #4]
    7e0c:	2208      	movs	r2, #8
    7e0e:	f88d 2005 	strb.w	r2, [sp, #5]
    7e12:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    7e14:	460c      	mov	r4, r1
    7e16:	b391      	cbz	r1, 7e7e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e18:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    7e1c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7e20:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    7e24:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7e28:	4a32      	ldr	r2, [pc, #200]	; (7ef4 <_usb_d_dev_handle_trfail+0xf8>)
    7e2a:	440a      	add	r2, r1
    7e2c:	7a91      	ldrb	r1, [r2, #10]
    7e2e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7e30:	2d02      	cmp	r5, #2
    7e32:	d02c      	beq.n	7e8e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    7e34:	f011 0f02 	tst.w	r1, #2
    7e38:	d045      	beq.n	7ec6 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e3a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    7e3c:	7a91      	ldrb	r1, [r2, #10]
    7e3e:	f36f 0141 	bfc	r1, #1, #1
    7e42:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7e44:	aa02      	add	r2, sp, #8
    7e46:	4422      	add	r2, r4
    7e48:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7e4c:	015a      	lsls	r2, r3, #5
    7e4e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7e52:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7e56:	015b      	lsls	r3, r3, #5
    7e58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7e5c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    7e60:	f005 0307 	and.w	r3, r5, #7
    7e64:	2b01      	cmp	r3, #1
    7e66:	d143      	bne.n	7ef0 <_usb_d_dev_handle_trfail+0xf4>
    7e68:	7cc3      	ldrb	r3, [r0, #19]
    7e6a:	f013 0f40 	tst.w	r3, #64	; 0x40
    7e6e:	d03f      	beq.n	7ef0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    7e70:	09d9      	lsrs	r1, r3, #7
    7e72:	428c      	cmp	r4, r1
    7e74:	d03c      	beq.n	7ef0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    7e76:	2200      	movs	r2, #0
    7e78:	4b1f      	ldr	r3, [pc, #124]	; (7ef8 <_usb_d_dev_handle_trfail+0xfc>)
    7e7a:	4798      	blx	r3
    7e7c:	e038      	b.n	7ef0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e7e:	0159      	lsls	r1, r3, #5
    7e80:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7e84:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7e88:	f005 0507 	and.w	r5, r5, #7
    7e8c:	e7ca      	b.n	7e24 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7e8e:	f011 0f01 	tst.w	r1, #1
    7e92:	d0cf      	beq.n	7e34 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    7e94:	7a91      	ldrb	r1, [r2, #10]
    7e96:	f36f 0100 	bfc	r1, #0, #1
    7e9a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7e9c:	aa02      	add	r2, sp, #8
    7e9e:	4422      	add	r2, r4
    7ea0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7ea4:	015a      	lsls	r2, r3, #5
    7ea6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7eaa:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7eae:	015b      	lsls	r3, r3, #5
    7eb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7eb4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    7eb8:	2204      	movs	r2, #4
    7eba:	1c21      	adds	r1, r4, #0
    7ebc:	bf18      	it	ne
    7ebe:	2101      	movne	r1, #1
    7ec0:	4b0d      	ldr	r3, [pc, #52]	; (7ef8 <_usb_d_dev_handle_trfail+0xfc>)
    7ec2:	4798      	blx	r3
    7ec4:	e014      	b.n	7ef0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    7ec6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7eca:	4a0a      	ldr	r2, [pc, #40]	; (7ef4 <_usb_d_dev_handle_trfail+0xf8>)
    7ecc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7ed0:	2100      	movs	r1, #0
    7ed2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7ed4:	aa02      	add	r2, sp, #8
    7ed6:	4414      	add	r4, r2
    7ed8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7edc:	015a      	lsls	r2, r3, #5
    7ede:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7ee2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7ee6:	015b      	lsls	r3, r3, #5
    7ee8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7eec:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    7ef0:	b003      	add	sp, #12
    7ef2:	bd30      	pop	{r4, r5, pc}
    7ef4:	200009bc 	.word	0x200009bc
    7ef8:	00007d91 	.word	0x00007d91

00007efc <_usb_d_dev_reset_epts>:
{
    7efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f00:	4d0c      	ldr	r5, [pc, #48]	; (7f34 <_usb_d_dev_reset_epts+0x38>)
    7f02:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7f06:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7f0a:	f04f 0803 	mov.w	r8, #3
    7f0e:	4f0a      	ldr	r7, [pc, #40]	; (7f38 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    7f10:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7f12:	4641      	mov	r1, r8
    7f14:	4620      	mov	r0, r4
    7f16:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    7f18:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    7f1a:	2300      	movs	r3, #0
    7f1c:	74e3      	strb	r3, [r4, #19]
    7f1e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    7f20:	42ac      	cmp	r4, r5
    7f22:	d1f6      	bne.n	7f12 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    7f24:	22c0      	movs	r2, #192	; 0xc0
    7f26:	4619      	mov	r1, r3
    7f28:	4802      	ldr	r0, [pc, #8]	; (7f34 <_usb_d_dev_reset_epts+0x38>)
    7f2a:	4b04      	ldr	r3, [pc, #16]	; (7f3c <_usb_d_dev_reset_epts+0x40>)
    7f2c:	4798      	blx	r3
    7f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f32:	bf00      	nop
    7f34:	200009bc 	.word	0x200009bc
    7f38:	00007d65 	.word	0x00007d65
    7f3c:	0000b59f 	.word	0x0000b59f

00007f40 <_usb_d_dev_in_next>:
{
    7f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f44:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    7f46:	7c84      	ldrb	r4, [r0, #18]
    7f48:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7f4c:	4688      	mov	r8, r1
    7f4e:	2900      	cmp	r1, #0
    7f50:	f000 80a0 	beq.w	8094 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7f54:	4b58      	ldr	r3, [pc, #352]	; (80b8 <_usb_d_dev_in_next+0x178>)
    7f56:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7f5a:	6958      	ldr	r0, [r3, #20]
    7f5c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7f60:	8a2b      	ldrh	r3, [r5, #16]
    7f62:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7f66:	4293      	cmp	r3, r2
    7f68:	f000 808e 	beq.w	8088 <_usb_d_dev_in_next+0x148>
    7f6c:	3b01      	subs	r3, #1
    7f6e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7f70:	7cef      	ldrb	r7, [r5, #19]
    7f72:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    7f76:	f1b8 0f00 	cmp.w	r8, #0
    7f7a:	d005      	beq.n	7f88 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7f7c:	0162      	lsls	r2, r4, #5
    7f7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7f82:	2302      	movs	r3, #2
    7f84:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    7f88:	68a9      	ldr	r1, [r5, #8]
    7f8a:	eb0e 0301 	add.w	r3, lr, r1
    7f8e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    7f90:	686e      	ldr	r6, [r5, #4]
    7f92:	42b3      	cmp	r3, r6
    7f94:	d23f      	bcs.n	8016 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    7f96:	1af6      	subs	r6, r6, r3
    7f98:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    7f9a:	7cea      	ldrb	r2, [r5, #19]
    7f9c:	f012 0f20 	tst.w	r2, #32
    7fa0:	d02d      	beq.n	7ffe <_usb_d_dev_in_next+0xbe>
    7fa2:	8a2a      	ldrh	r2, [r5, #16]
    7fa4:	4296      	cmp	r6, r2
    7fa6:	bf28      	it	cs
    7fa8:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    7faa:	6829      	ldr	r1, [r5, #0]
    7fac:	4632      	mov	r2, r6
    7fae:	4419      	add	r1, r3
    7fb0:	68e8      	ldr	r0, [r5, #12]
    7fb2:	4b42      	ldr	r3, [pc, #264]	; (80bc <_usb_d_dev_in_next+0x17c>)
    7fb4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    7fb6:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    7fb8:	4b3f      	ldr	r3, [pc, #252]	; (80b8 <_usb_d_dev_in_next+0x178>)
    7fba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7fbe:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7fc0:	4b3d      	ldr	r3, [pc, #244]	; (80b8 <_usb_d_dev_in_next+0x178>)
    7fc2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7fc6:	695a      	ldr	r2, [r3, #20]
    7fc8:	f366 020d 	bfi	r2, r6, #0, #14
    7fcc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7fce:	695a      	ldr	r2, [r3, #20]
    7fd0:	f36f 329b 	bfc	r2, #14, #14
    7fd4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    7fd6:	f1b8 0f00 	cmp.w	r8, #0
    7fda:	d108      	bne.n	7fee <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    7fdc:	2f01      	cmp	r7, #1
    7fde:	bf0c      	ite	eq
    7fe0:	224e      	moveq	r2, #78	; 0x4e
    7fe2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7fe4:	0163      	lsls	r3, r4, #5
    7fe6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7fea:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7fee:	0164      	lsls	r4, r4, #5
    7ff0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7ff4:	2380      	movs	r3, #128	; 0x80
    7ff6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    7ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ffe:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8002:	bf28      	it	cs
    8004:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8008:	6829      	ldr	r1, [r5, #0]
    800a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    800c:	4a2a      	ldr	r2, [pc, #168]	; (80b8 <_usb_d_dev_in_next+0x178>)
    800e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8012:	6113      	str	r3, [r2, #16]
    8014:	e7d4      	b.n	7fc0 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8016:	7ceb      	ldrb	r3, [r5, #19]
    8018:	f013 0f10 	tst.w	r3, #16
    801c:	d00f      	beq.n	803e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    801e:	7ceb      	ldrb	r3, [r5, #19]
    8020:	f36f 1304 	bfc	r3, #4, #1
    8024:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8026:	4b24      	ldr	r3, [pc, #144]	; (80b8 <_usb_d_dev_in_next+0x178>)
    8028:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    802c:	695a      	ldr	r2, [r3, #20]
    802e:	f36f 020d 	bfc	r2, #0, #14
    8032:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8034:	695a      	ldr	r2, [r3, #20]
    8036:	f36f 329b 	bfc	r2, #14, #14
    803a:	615a      	str	r2, [r3, #20]
    803c:	e7cb      	b.n	7fd6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    803e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8040:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8044:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8048:	bf0c      	ite	eq
    804a:	234b      	moveq	r3, #75	; 0x4b
    804c:	234a      	movne	r3, #74	; 0x4a
    804e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8052:	8a2a      	ldrh	r2, [r5, #16]
    8054:	ea00 030e 	and.w	r3, r0, lr
    8058:	429a      	cmp	r2, r3
    805a:	d005      	beq.n	8068 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    805c:	2100      	movs	r1, #0
    805e:	4628      	mov	r0, r5
    8060:	4b17      	ldr	r3, [pc, #92]	; (80c0 <_usb_d_dev_in_next+0x180>)
    8062:	4798      	blx	r3
	return;
    8064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8068:	7ceb      	ldrb	r3, [r5, #19]
    806a:	f36f 1386 	bfc	r3, #6, #1
    806e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8070:	4b11      	ldr	r3, [pc, #68]	; (80b8 <_usb_d_dev_in_next+0x178>)
    8072:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8076:	68a9      	ldr	r1, [r5, #8]
    8078:	7ca8      	ldrb	r0, [r5, #18]
    807a:	4798      	blx	r3
    807c:	b9d0      	cbnz	r0, 80b4 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    807e:	7ceb      	ldrb	r3, [r5, #19]
    8080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8084:	74eb      	strb	r3, [r5, #19]
    8086:	e7e9      	b.n	805c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8088:	7cef      	ldrb	r7, [r5, #19]
    808a:	f007 0707 	and.w	r7, r7, #7
    808e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8092:	e773      	b.n	7f7c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8094:	8a03      	ldrh	r3, [r0, #16]
    8096:	f240 32ff 	movw	r2, #1023	; 0x3ff
    809a:	4293      	cmp	r3, r2
    809c:	d107      	bne.n	80ae <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    809e:	7cef      	ldrb	r7, [r5, #19]
    80a0:	f007 0707 	and.w	r7, r7, #7
    80a4:	f04f 0e00 	mov.w	lr, #0
    80a8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    80ac:	e76c      	b.n	7f88 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    80ae:	f04f 0e00 	mov.w	lr, #0
    80b2:	e75b      	b.n	7f6c <_usb_d_dev_in_next+0x2c>
    80b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80b8:	200009bc 	.word	0x200009bc
    80bc:	0000b589 	.word	0x0000b589
    80c0:	00007d65 	.word	0x00007d65

000080c4 <_usb_d_dev_out_next>:
{
    80c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80c8:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    80ca:	7c85      	ldrb	r5, [r0, #18]
    80cc:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    80d0:	4689      	mov	r9, r1
    80d2:	2900      	cmp	r1, #0
    80d4:	d056      	beq.n	8184 <_usb_d_dev_out_next+0xc0>
    80d6:	4b74      	ldr	r3, [pc, #464]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    80d8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    80dc:	685a      	ldr	r2, [r3, #4]
    80de:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    80e2:	685f      	ldr	r7, [r3, #4]
    80e4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    80e8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    80ea:	8a06      	ldrh	r6, [r0, #16]
    80ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
    80f0:	429e      	cmp	r6, r3
    80f2:	f000 80ba 	beq.w	826a <_usb_d_dev_out_next+0x1a6>
    80f6:	3e01      	subs	r6, #1
    80f8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    80fa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    80fe:	f894 8013 	ldrb.w	r8, [r4, #19]
    8102:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8106:	f1b9 0f00 	cmp.w	r9, #0
    810a:	d005      	beq.n	8118 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    810c:	016b      	lsls	r3, r5, #5
    810e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8112:	2201      	movs	r2, #1
    8114:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8118:	7ce3      	ldrb	r3, [r4, #19]
    811a:	f013 0f20 	tst.w	r3, #32
    811e:	d00d      	beq.n	813c <_usb_d_dev_out_next+0x78>
    8120:	6862      	ldr	r2, [r4, #4]
    8122:	2a00      	cmp	r2, #0
    8124:	d037      	beq.n	8196 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8126:	68a0      	ldr	r0, [r4, #8]
    8128:	1a12      	subs	r2, r2, r0
    812a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    812c:	6823      	ldr	r3, [r4, #0]
    812e:	42ba      	cmp	r2, r7
    8130:	bf28      	it	cs
    8132:	463a      	movcs	r2, r7
    8134:	68e1      	ldr	r1, [r4, #12]
    8136:	4418      	add	r0, r3
    8138:	4b5c      	ldr	r3, [pc, #368]	; (82ac <_usb_d_dev_out_next+0x1e8>)
    813a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    813c:	6863      	ldr	r3, [r4, #4]
    813e:	b353      	cbz	r3, 8196 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8140:	f1b9 0f00 	cmp.w	r9, #0
    8144:	d040      	beq.n	81c8 <_usb_d_dev_out_next+0x104>
    8146:	8a22      	ldrh	r2, [r4, #16]
    8148:	42ba      	cmp	r2, r7
    814a:	d93d      	bls.n	81c8 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    814c:	7ce3      	ldrb	r3, [r4, #19]
    814e:	f36f 1304 	bfc	r3, #4, #1
    8152:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8154:	68a3      	ldr	r3, [r4, #8]
    8156:	445b      	add	r3, fp
    8158:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    815a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    815e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8162:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8166:	bf0c      	ite	eq
    8168:	222d      	moveq	r2, #45	; 0x2d
    816a:	2225      	movne	r2, #37	; 0x25
    816c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8170:	b915      	cbnz	r5, 8178 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8172:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8174:	4b4c      	ldr	r3, [pc, #304]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    8176:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8178:	2100      	movs	r1, #0
    817a:	4620      	mov	r0, r4
    817c:	4b4c      	ldr	r3, [pc, #304]	; (82b0 <_usb_d_dev_out_next+0x1ec>)
    817e:	4798      	blx	r3
	return;
    8180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8184:	8a06      	ldrh	r6, [r0, #16]
    8186:	f240 33ff 	movw	r3, #1023	; 0x3ff
    818a:	429e      	cmp	r6, r3
    818c:	d07b      	beq.n	8286 <_usb_d_dev_out_next+0x1c2>
    818e:	f04f 0b00 	mov.w	fp, #0
    8192:	46da      	mov	sl, fp
    8194:	e7af      	b.n	80f6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8196:	7ce3      	ldrb	r3, [r4, #19]
    8198:	f013 0f10 	tst.w	r3, #16
    819c:	d06c      	beq.n	8278 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    819e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    81a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    81a4:	f043 0320 	orr.w	r3, r3, #32
    81a8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    81aa:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    81ac:	493e      	ldr	r1, [pc, #248]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    81ae:	016a      	lsls	r2, r5, #5
    81b0:	188b      	adds	r3, r1, r2
    81b2:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    81b4:	8a21      	ldrh	r1, [r4, #16]
    81b6:	685a      	ldr	r2, [r3, #4]
    81b8:	f361 329b 	bfi	r2, r1, #14, #14
    81bc:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    81be:	685a      	ldr	r2, [r3, #4]
    81c0:	f36f 020d 	bfc	r2, #0, #14
    81c4:	605a      	str	r2, [r3, #4]
    81c6:	e01d      	b.n	8204 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    81c8:	68a2      	ldr	r2, [r4, #8]
    81ca:	4452      	add	r2, sl
    81cc:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    81ce:	4293      	cmp	r3, r2
    81d0:	d9c3      	bls.n	815a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    81d2:	1a9b      	subs	r3, r3, r2
    81d4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    81d6:	7ce1      	ldrb	r1, [r4, #19]
    81d8:	f011 0f20 	tst.w	r1, #32
    81dc:	d026      	beq.n	822c <_usb_d_dev_out_next+0x168>
    81de:	8a22      	ldrh	r2, [r4, #16]
    81e0:	4293      	cmp	r3, r2
    81e2:	bf28      	it	cs
    81e4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    81e6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    81e8:	016a      	lsls	r2, r5, #5
    81ea:	492f      	ldr	r1, [pc, #188]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    81ec:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    81ee:	4a2e      	ldr	r2, [pc, #184]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    81f0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    81f4:	6851      	ldr	r1, [r2, #4]
    81f6:	f363 319b 	bfi	r1, r3, #14, #14
    81fa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    81fc:	6853      	ldr	r3, [r2, #4]
    81fe:	f36f 030d 	bfc	r3, #0, #14
    8202:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8204:	f1b9 0f00 	cmp.w	r9, #0
    8208:	d108      	bne.n	821c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    820a:	f1b8 0f01 	cmp.w	r8, #1
    820e:	d025      	beq.n	825c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8210:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8212:	016b      	lsls	r3, r5, #5
    8214:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8218:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    821c:	016d      	lsls	r5, r5, #5
    821e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8222:	2340      	movs	r3, #64	; 0x40
    8224:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    822c:	8a21      	ldrh	r1, [r4, #16]
    822e:	428b      	cmp	r3, r1
    8230:	d90a      	bls.n	8248 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8236:	d80e      	bhi.n	8256 <_usb_d_dev_out_next+0x192>
    8238:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    823c:	6821      	ldr	r1, [r4, #0]
    823e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8240:	0169      	lsls	r1, r5, #5
    8242:	4819      	ldr	r0, [pc, #100]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    8244:	5042      	str	r2, [r0, r1]
    8246:	e7d2      	b.n	81ee <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8248:	428b      	cmp	r3, r1
    824a:	d2f7      	bcs.n	823c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    824c:	7ce1      	ldrb	r1, [r4, #19]
    824e:	f041 0120 	orr.w	r1, r1, #32
    8252:	74e1      	strb	r1, [r4, #19]
    8254:	e7f2      	b.n	823c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    825a:	e7ef      	b.n	823c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    825c:	4b12      	ldr	r3, [pc, #72]	; (82a8 <_usb_d_dev_out_next+0x1e4>)
    825e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8262:	2200      	movs	r2, #0
    8264:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8266:	222d      	movs	r2, #45	; 0x2d
    8268:	e7d3      	b.n	8212 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    826a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    826e:	f890 8013 	ldrb.w	r8, [r0, #19]
    8272:	f008 0807 	and.w	r8, r8, #7
    8276:	e749      	b.n	810c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8278:	f1b9 0f00 	cmp.w	r9, #0
    827c:	d10b      	bne.n	8296 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    827e:	68a3      	ldr	r3, [r4, #8]
    8280:	4453      	add	r3, sl
    8282:	60a3      	str	r3, [r4, #8]
    8284:	e769      	b.n	815a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8286:	f890 8013 	ldrb.w	r8, [r0, #19]
    828a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    828e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8290:	46bb      	mov	fp, r7
    8292:	46ba      	mov	sl, r7
    8294:	e740      	b.n	8118 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8296:	8a23      	ldrh	r3, [r4, #16]
    8298:	42bb      	cmp	r3, r7
    829a:	f63f af57 	bhi.w	814c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    829e:	68a3      	ldr	r3, [r4, #8]
    82a0:	4453      	add	r3, sl
    82a2:	60a3      	str	r3, [r4, #8]
    82a4:	e759      	b.n	815a <_usb_d_dev_out_next+0x96>
    82a6:	bf00      	nop
    82a8:	200009bc 	.word	0x200009bc
    82ac:	0000b589 	.word	0x0000b589
    82b0:	00007d65 	.word	0x00007d65

000082b4 <_usb_d_dev_handler>:
{
    82b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    82b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    82bc:	8c1e      	ldrh	r6, [r3, #32]
    82be:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    82c0:	b146      	cbz	r6, 82d4 <_usb_d_dev_handler+0x20>
    82c2:	4d96      	ldr	r5, [pc, #600]	; (851c <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    82c4:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    82c6:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    82ca:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8538 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    82ce:	f8df 826c 	ldr.w	r8, [pc, #620]	; 853c <_usb_d_dev_handler+0x288>
    82d2:	e0de      	b.n	8492 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    82d4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    82d6:	8b1b      	ldrh	r3, [r3, #24]
    82d8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    82da:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    82dc:	f013 0f04 	tst.w	r3, #4
    82e0:	d11e      	bne.n	8320 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    82e2:	f413 7f00 	tst.w	r3, #512	; 0x200
    82e6:	d125      	bne.n	8334 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    82e8:	f013 0f80 	tst.w	r3, #128	; 0x80
    82ec:	d14f      	bne.n	838e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    82ee:	f013 0f70 	tst.w	r3, #112	; 0x70
    82f2:	d158      	bne.n	83a6 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    82f4:	f013 0f08 	tst.w	r3, #8
    82f8:	d178      	bne.n	83ec <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    82fa:	f013 0f01 	tst.w	r3, #1
    82fe:	d0e0      	beq.n	82c2 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8300:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8304:	f240 2201 	movw	r2, #513	; 0x201
    8308:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    830a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    830c:	2270      	movs	r2, #112	; 0x70
    830e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8310:	4b83      	ldr	r3, [pc, #524]	; (8520 <_usb_d_dev_handler+0x26c>)
    8312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8316:	2100      	movs	r1, #0
    8318:	2004      	movs	r0, #4
    831a:	4798      	blx	r3
    831c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8320:	2204      	movs	r2, #4
    8322:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8326:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8328:	4b7d      	ldr	r3, [pc, #500]	; (8520 <_usb_d_dev_handler+0x26c>)
    832a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    832e:	4798      	blx	r3
    8330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8334:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8338:	f240 2201 	movw	r2, #513	; 0x201
    833c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    833e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8340:	2270      	movs	r2, #112	; 0x70
    8342:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8344:	4b76      	ldr	r3, [pc, #472]	; (8520 <_usb_d_dev_handler+0x26c>)
    8346:	891b      	ldrh	r3, [r3, #8]
    8348:	f003 030f 	and.w	r3, r3, #15
    834c:	2b03      	cmp	r3, #3
    834e:	d014      	beq.n	837a <_usb_d_dev_handler+0xc6>
    8350:	2301      	movs	r3, #1
    8352:	4873      	ldr	r0, [pc, #460]	; (8520 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8354:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8356:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    835a:	8912      	ldrh	r2, [r2, #8]
    835c:	f002 020f 	and.w	r2, r2, #15
    8360:	2a03      	cmp	r2, #3
    8362:	d00b      	beq.n	837c <_usb_d_dev_handler+0xc8>
    8364:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8366:	2b05      	cmp	r3, #5
    8368:	d1f4      	bne.n	8354 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    836a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    836c:	4b6c      	ldr	r3, [pc, #432]	; (8520 <_usb_d_dev_handler+0x26c>)
    836e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8372:	2003      	movs	r0, #3
    8374:	4798      	blx	r3
    8376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    837a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    837c:	4b68      	ldr	r3, [pc, #416]	; (8520 <_usb_d_dev_handler+0x26c>)
    837e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8382:	8919      	ldrh	r1, [r3, #8]
    8384:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8388:	2200      	movs	r2, #0
    838a:	811a      	strh	r2, [r3, #8]
    838c:	e7ee      	b.n	836c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    838e:	2280      	movs	r2, #128	; 0x80
    8390:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8394:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8396:	4b62      	ldr	r3, [pc, #392]	; (8520 <_usb_d_dev_handler+0x26c>)
    8398:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    839c:	2100      	movs	r1, #0
    839e:	2005      	movs	r0, #5
    83a0:	4798      	blx	r3
    83a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    83a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83aa:	2270      	movs	r2, #112	; 0x70
    83ac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    83ae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    83b0:	f240 2201 	movw	r2, #513	; 0x201
    83b4:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    83b6:	4b5b      	ldr	r3, [pc, #364]	; (8524 <_usb_d_dev_handler+0x270>)
    83b8:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    83bc:	f013 0f01 	tst.w	r3, #1
    83c0:	d00e      	beq.n	83e0 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    83c2:	4a58      	ldr	r2, [pc, #352]	; (8524 <_usb_d_dev_handler+0x270>)
    83c4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    83c6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    83ca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    83ce:	d1f9      	bne.n	83c4 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    83d0:	4b53      	ldr	r3, [pc, #332]	; (8520 <_usb_d_dev_handler+0x26c>)
    83d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    83d6:	2100      	movs	r1, #0
    83d8:	2002      	movs	r0, #2
    83da:	4798      	blx	r3
    83dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    83e0:	4a50      	ldr	r2, [pc, #320]	; (8524 <_usb_d_dev_handler+0x270>)
    83e2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    83e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    83e8:	d0fb      	beq.n	83e2 <_usb_d_dev_handler+0x12e>
    83ea:	e7f1      	b.n	83d0 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    83ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83f0:	2400      	movs	r4, #0
    83f2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    83f6:	2208      	movs	r2, #8
    83f8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    83fa:	2270      	movs	r2, #112	; 0x70
    83fc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    83fe:	f240 2201 	movw	r2, #513	; 0x201
    8402:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8404:	4b48      	ldr	r3, [pc, #288]	; (8528 <_usb_d_dev_handler+0x274>)
    8406:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8408:	4b45      	ldr	r3, [pc, #276]	; (8520 <_usb_d_dev_handler+0x26c>)
    840a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    840e:	4621      	mov	r1, r4
    8410:	2001      	movs	r0, #1
    8412:	4798      	blx	r3
    8414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8418:	f011 0f10 	tst.w	r1, #16
    841c:	d109      	bne.n	8432 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    841e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8422:	d108      	bne.n	8436 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8424:	f011 0f20 	tst.w	r1, #32
    8428:	d02f      	beq.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    842a:	2100      	movs	r1, #0
    842c:	4b3f      	ldr	r3, [pc, #252]	; (852c <_usb_d_dev_handler+0x278>)
    842e:	4798      	blx	r3
    8430:	e02b      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8432:	47c8      	blx	r9
    8434:	e029      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8436:	2101      	movs	r1, #1
    8438:	4b3c      	ldr	r3, [pc, #240]	; (852c <_usb_d_dev_handler+0x278>)
    843a:	4798      	blx	r3
    843c:	e025      	b.n	848a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    843e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8442:	d111      	bne.n	8468 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8444:	f011 0f08 	tst.w	r1, #8
    8448:	d112      	bne.n	8470 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    844a:	f011 0f02 	tst.w	r1, #2
    844e:	d112      	bne.n	8476 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8450:	f003 0307 	and.w	r3, r3, #7
    8454:	2b01      	cmp	r3, #1
    8456:	d118      	bne.n	848a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8458:	f011 0f04 	tst.w	r1, #4
    845c:	d10f      	bne.n	847e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    845e:	f011 0f10 	tst.w	r1, #16
    8462:	d012      	beq.n	848a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8464:	47c8      	blx	r9
    8466:	e010      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8468:	2101      	movs	r1, #1
    846a:	4b30      	ldr	r3, [pc, #192]	; (852c <_usb_d_dev_handler+0x278>)
    846c:	4798      	blx	r3
    846e:	e00c      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8470:	2101      	movs	r1, #1
    8472:	47c0      	blx	r8
    8474:	e009      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8476:	2101      	movs	r1, #1
    8478:	4b2d      	ldr	r3, [pc, #180]	; (8530 <_usb_d_dev_handler+0x27c>)
    847a:	4798      	blx	r3
    847c:	e005      	b.n	848a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    847e:	2100      	movs	r1, #0
    8480:	47c0      	blx	r8
    8482:	e002      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8484:	2100      	movs	r1, #0
    8486:	4b29      	ldr	r3, [pc, #164]	; (852c <_usb_d_dev_handler+0x278>)
    8488:	4798      	blx	r3
    848a:	3401      	adds	r4, #1
    848c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    848e:	2c1b      	cmp	r4, #27
    8490:	d042      	beq.n	8518 <_usb_d_dev_handler+0x264>
    8492:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8494:	7cab      	ldrb	r3, [r5, #18]
    8496:	2bff      	cmp	r3, #255	; 0xff
    8498:	d0f7      	beq.n	848a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    849a:	f003 030f 	and.w	r3, r3, #15
    849e:	2101      	movs	r1, #1
    84a0:	4099      	lsls	r1, r3
    84a2:	4231      	tst	r1, r6
    84a4:	d0f1      	beq.n	848a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    84a6:	0159      	lsls	r1, r3, #5
    84a8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    84ac:	f501 7180 	add.w	r1, r1, #256	; 0x100
    84b0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    84b2:	015b      	lsls	r3, r3, #5
    84b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    84b8:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    84bc:	4019      	ands	r1, r3
    84be:	d0e4      	beq.n	848a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    84c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    84c4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    84c8:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    84cc:	f003 0247 	and.w	r2, r3, #71	; 0x47
    84d0:	2a01      	cmp	r2, #1
    84d2:	d0a1      	beq.n	8418 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    84d4:	f013 0f80 	tst.w	r3, #128	; 0x80
    84d8:	d1b1      	bne.n	843e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    84da:	f011 0f20 	tst.w	r1, #32
    84de:	d1d1      	bne.n	8484 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    84e0:	f011 0f04 	tst.w	r1, #4
    84e4:	d10e      	bne.n	8504 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    84e6:	f011 0f01 	tst.w	r1, #1
    84ea:	d10e      	bne.n	850a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    84ec:	f003 0307 	and.w	r3, r3, #7
    84f0:	2b01      	cmp	r3, #1
    84f2:	d1ca      	bne.n	848a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    84f4:	f011 0f08 	tst.w	r1, #8
    84f8:	d10b      	bne.n	8512 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    84fa:	f011 0f10 	tst.w	r1, #16
    84fe:	d0c4      	beq.n	848a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8500:	47c8      	blx	r9
    8502:	e7c2      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8504:	2100      	movs	r1, #0
    8506:	47c0      	blx	r8
    8508:	e7bf      	b.n	848a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    850a:	2101      	movs	r1, #1
    850c:	4b09      	ldr	r3, [pc, #36]	; (8534 <_usb_d_dev_handler+0x280>)
    850e:	4798      	blx	r3
    8510:	e7bb      	b.n	848a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8512:	2101      	movs	r1, #1
    8514:	47c0      	blx	r8
    8516:	e7b8      	b.n	848a <_usb_d_dev_handler+0x1d6>
    8518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    851c:	20000a90 	.word	0x20000a90
    8520:	200009bc 	.word	0x200009bc
    8524:	40001000 	.word	0x40001000
    8528:	00007efd 	.word	0x00007efd
    852c:	00007d35 	.word	0x00007d35
    8530:	00007f41 	.word	0x00007f41
    8534:	000080c5 	.word	0x000080c5
    8538:	00007cb5 	.word	0x00007cb5
    853c:	00007dfd 	.word	0x00007dfd

00008540 <_usb_d_dev_init>:
{
    8540:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8542:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8546:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8548:	f013 0f01 	tst.w	r3, #1
    854c:	d124      	bne.n	8598 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    854e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8552:	7893      	ldrb	r3, [r2, #2]
    8554:	f013 0f03 	tst.w	r3, #3
    8558:	d1fb      	bne.n	8552 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    855a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    855e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8560:	f013 0f02 	tst.w	r3, #2
    8564:	d00f      	beq.n	8586 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8566:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    856a:	7813      	ldrb	r3, [r2, #0]
    856c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8570:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8572:	7893      	ldrb	r3, [r2, #2]
    8574:	f013 0f03 	tst.w	r3, #3
    8578:	d1fb      	bne.n	8572 <_usb_d_dev_init+0x32>
    857a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    857e:	7893      	ldrb	r3, [r2, #2]
    8580:	f013 0f02 	tst.w	r3, #2
    8584:	d1fb      	bne.n	857e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8586:	2201      	movs	r2, #1
    8588:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    858c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    858e:	461a      	mov	r2, r3
    8590:	7893      	ldrb	r3, [r2, #2]
    8592:	f013 0f03 	tst.w	r3, #3
    8596:	d1fb      	bne.n	8590 <_usb_d_dev_init+0x50>
    8598:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    859c:	7893      	ldrb	r3, [r2, #2]
    859e:	f013 0f01 	tst.w	r3, #1
    85a2:	d1fb      	bne.n	859c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    85a4:	4b24      	ldr	r3, [pc, #144]	; (8638 <_usb_d_dev_init+0xf8>)
    85a6:	4a25      	ldr	r2, [pc, #148]	; (863c <_usb_d_dev_init+0xfc>)
    85a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    85ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    85b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    85b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    85b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    85bc:	4b20      	ldr	r3, [pc, #128]	; (8640 <_usb_d_dev_init+0x100>)
    85be:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    85c0:	4b20      	ldr	r3, [pc, #128]	; (8644 <_usb_d_dev_init+0x104>)
    85c2:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    85c4:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    85c8:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    85cc:	f011 011f 	ands.w	r1, r1, #31
    85d0:	d02b      	beq.n	862a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    85d2:	291f      	cmp	r1, #31
    85d4:	bf08      	it	eq
    85d6:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    85d8:	b34b      	cbz	r3, 862e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    85da:	2b1f      	cmp	r3, #31
    85dc:	bf08      	it	eq
    85de:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    85e0:	b33a      	cbz	r2, 8632 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    85e2:	2a07      	cmp	r2, #7
    85e4:	bf08      	it	eq
    85e6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    85e8:	f003 031f 	and.w	r3, r3, #31
    85ec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    85f0:	0312      	lsls	r2, r2, #12
    85f2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    85f6:	4313      	orrs	r3, r2
    85f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    85fc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    85fe:	78d3      	ldrb	r3, [r2, #3]
    8600:	f043 0303 	orr.w	r3, r3, #3
    8604:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8606:	78d3      	ldrb	r3, [r2, #3]
    8608:	f043 030c 	orr.w	r3, r3, #12
    860c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    860e:	2304      	movs	r3, #4
    8610:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8612:	7893      	ldrb	r3, [r2, #2]
    8614:	f013 0f03 	tst.w	r3, #3
    8618:	d1fb      	bne.n	8612 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    861a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    861e:	4a06      	ldr	r2, [pc, #24]	; (8638 <_usb_d_dev_init+0xf8>)
    8620:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8622:	2201      	movs	r2, #1
    8624:	811a      	strh	r2, [r3, #8]
}
    8626:	2000      	movs	r0, #0
    8628:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    862a:	2109      	movs	r1, #9
    862c:	e7d4      	b.n	85d8 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    862e:	2319      	movs	r3, #25
    8630:	e7d6      	b.n	85e0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8632:	2206      	movs	r2, #6
    8634:	e7d8      	b.n	85e8 <_usb_d_dev_init+0xa8>
    8636:	bf00      	nop
    8638:	200009bc 	.word	0x200009bc
    863c:	00007cb1 	.word	0x00007cb1
    8640:	00007efd 	.word	0x00007efd
    8644:	00800084 	.word	0x00800084

00008648 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8648:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    864c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    864e:	f013 0f03 	tst.w	r3, #3
    8652:	d129      	bne.n	86a8 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8654:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8658:	7893      	ldrb	r3, [r2, #2]
    865a:	f013 0f03 	tst.w	r3, #3
    865e:	d1fb      	bne.n	8658 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8660:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8668:	f013 0f02 	tst.w	r3, #2
    866c:	d108      	bne.n	8680 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    866e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8672:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8676:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8678:	7893      	ldrb	r3, [r2, #2]
    867a:	f013 0f03 	tst.w	r3, #3
    867e:	d1fb      	bne.n	8678 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8680:	4b0b      	ldr	r3, [pc, #44]	; (86b0 <_usb_d_dev_enable+0x68>)
    8682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8686:	609a      	str	r2, [r3, #8]
    8688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    868c:	609a      	str	r2, [r3, #8]
    868e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8692:	609a      	str	r2, [r3, #8]
    8694:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8698:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    869a:	f240 228d 	movw	r2, #653	; 0x28d
    869e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86a2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    86a4:	2000      	movs	r0, #0
    86a6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    86a8:	f06f 0010 	mvn.w	r0, #16
}
    86ac:	4770      	bx	lr
    86ae:	bf00      	nop
    86b0:	e000e100 	.word	0xe000e100

000086b4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    86b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    86b8:	8913      	ldrh	r3, [r2, #8]
    86ba:	f023 0301 	bic.w	r3, r3, #1
    86be:	041b      	lsls	r3, r3, #16
    86c0:	0c1b      	lsrs	r3, r3, #16
    86c2:	8113      	strh	r3, [r2, #8]
    86c4:	4770      	bx	lr

000086c6 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    86c6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    86ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86ce:	7298      	strb	r0, [r3, #10]
    86d0:	4770      	bx	lr
	...

000086d4 <_usb_d_dev_ep_init>:
{
    86d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86d6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    86da:	f010 050f 	ands.w	r5, r0, #15
    86de:	d04d      	beq.n	877c <_usb_d_dev_ep_init+0xa8>
    86e0:	f1be 0f00 	cmp.w	lr, #0
    86e4:	bfb4      	ite	lt
    86e6:	1d6c      	addlt	r4, r5, #5
    86e8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    86ea:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    86ee:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    86f0:	2d05      	cmp	r5, #5
    86f2:	d947      	bls.n	8784 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    86f4:	f06f 0011 	mvn.w	r0, #17
    86f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    86fa:	f1be 0f00 	cmp.w	lr, #0
    86fe:	db1b      	blt.n	8738 <_usb_d_dev_ep_init+0x64>
    8700:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8704:	4e37      	ldr	r6, [pc, #220]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    8706:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    870a:	2d00      	cmp	r5, #0
    870c:	d15e      	bne.n	87cc <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    870e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8712:	4d34      	ldr	r5, [pc, #208]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    8714:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8718:	4d33      	ldr	r5, [pc, #204]	; (87e8 <_usb_d_dev_ep_init+0x114>)
    871a:	00a6      	lsls	r6, r4, #2
    871c:	1933      	adds	r3, r6, r4
    871e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8722:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8726:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    872a:	3101      	adds	r1, #1
    872c:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8730:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8734:	2000      	movs	r0, #0
    8736:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8738:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    873c:	4e29      	ldr	r6, [pc, #164]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    873e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8742:	686d      	ldr	r5, [r5, #4]
    8744:	b935      	cbnz	r5, 8754 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    874a:	4d26      	ldr	r5, [pc, #152]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    874c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8750:	685f      	ldr	r7, [r3, #4]
    8752:	e7e1      	b.n	8718 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8754:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8758:	4e22      	ldr	r6, [pc, #136]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    875a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    875e:	896d      	ldrh	r5, [r5, #10]
    8760:	4295      	cmp	r5, r2
    8762:	daf0      	bge.n	8746 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8764:	f06f 0012 	mvn.w	r0, #18
    8768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    876a:	f06f 0013 	mvn.w	r0, #19
    876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8770:	f06f 0013 	mvn.w	r0, #19
    8774:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8776:	f06f 0012 	mvn.w	r0, #18
    877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    877c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8780:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8782:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8784:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8788:	4f17      	ldr	r7, [pc, #92]	; (87e8 <_usb_d_dev_ep_init+0x114>)
    878a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    878e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8792:	2eff      	cmp	r6, #255	; 0xff
    8794:	d1e9      	bne.n	876a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8796:	2900      	cmp	r1, #0
    8798:	d1af      	bne.n	86fa <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    879a:	b125      	cbz	r5, 87a6 <_usb_d_dev_ep_init+0xd2>
    879c:	f1be 0f00 	cmp.w	lr, #0
    87a0:	bfa4      	itt	ge
    87a2:	3505      	addge	r5, #5
    87a4:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    87a6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    87aa:	4e0f      	ldr	r6, [pc, #60]	; (87e8 <_usb_d_dev_ep_init+0x114>)
    87ac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    87b0:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    87b4:	2dff      	cmp	r5, #255	; 0xff
    87b6:	d1db      	bne.n	8770 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    87b8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    87bc:	4e09      	ldr	r6, [pc, #36]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    87be:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    87c2:	2d00      	cmp	r5, #0
    87c4:	d0d7      	beq.n	8776 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    87c6:	f1be 0f00 	cmp.w	lr, #0
    87ca:	dbb5      	blt.n	8738 <_usb_d_dev_ep_init+0x64>
    87cc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    87d0:	4e04      	ldr	r6, [pc, #16]	; (87e4 <_usb_d_dev_ep_init+0x110>)
    87d2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    87d6:	892d      	ldrh	r5, [r5, #8]
    87d8:	4295      	cmp	r5, r2
    87da:	da98      	bge.n	870e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    87dc:	f06f 0012 	mvn.w	r0, #18
    87e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87e2:	bf00      	nop
    87e4:	0000c524 	.word	0x0000c524
    87e8:	200009bc 	.word	0x200009bc

000087ec <_usb_d_dev_ep_deinit>:
{
    87ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ee:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    87f0:	f010 060f 	ands.w	r6, r0, #15
    87f4:	d00e      	beq.n	8814 <_usb_d_dev_ep_deinit+0x28>
    87f6:	2f00      	cmp	r7, #0
    87f8:	bfb4      	ite	lt
    87fa:	1d73      	addlt	r3, r6, #5
    87fc:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    87fe:	2e05      	cmp	r6, #5
    8800:	d900      	bls.n	8804 <_usb_d_dev_ep_deinit+0x18>
    8802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8804:	461d      	mov	r5, r3
    8806:	3301      	adds	r3, #1
    8808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    880c:	4a24      	ldr	r2, [pc, #144]	; (88a0 <_usb_d_dev_ep_deinit+0xb4>)
    880e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    8812:	e002      	b.n	881a <_usb_d_dev_ep_deinit+0x2e>
    8814:	f8df e094 	ldr.w	lr, [pc, #148]	; 88ac <_usb_d_dev_ep_deinit+0xc0>
    8818:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    881a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    881e:	4a21      	ldr	r2, [pc, #132]	; (88a4 <_usb_d_dev_ep_deinit+0xb8>)
    8820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8824:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    8828:	2aff      	cmp	r2, #255	; 0xff
    882a:	d0ea      	beq.n	8802 <_usb_d_dev_ep_deinit+0x16>
    882c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    882e:	2203      	movs	r2, #3
    8830:	0ff9      	lsrs	r1, r7, #31
    8832:	4670      	mov	r0, lr
    8834:	4b1c      	ldr	r3, [pc, #112]	; (88a8 <_usb_d_dev_ep_deinit+0xbc>)
    8836:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8838:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    883c:	4a19      	ldr	r2, [pc, #100]	; (88a4 <_usb_d_dev_ep_deinit+0xb8>)
    883e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8842:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8846:	f003 0307 	and.w	r3, r3, #7
    884a:	2b01      	cmp	r3, #1
    884c:	d016      	beq.n	887c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    884e:	2f00      	cmp	r7, #0
    8850:	db1b      	blt.n	888a <_usb_d_dev_ep_deinit+0x9e>
    8852:	0160      	lsls	r0, r4, #5
    8854:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8858:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    885c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8860:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8864:	4b0f      	ldr	r3, [pc, #60]	; (88a4 <_usb_d_dev_ep_deinit+0xb8>)
    8866:	00aa      	lsls	r2, r5, #2
    8868:	1951      	adds	r1, r2, r5
    886a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    886e:	2000      	movs	r0, #0
    8870:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8874:	22ff      	movs	r2, #255	; 0xff
    8876:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    887a:	e7c2      	b.n	8802 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    887c:	0160      	lsls	r0, r4, #5
    887e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8882:	2300      	movs	r3, #0
    8884:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8888:	e7ec      	b.n	8864 <_usb_d_dev_ep_deinit+0x78>
    888a:	0176      	lsls	r6, r6, #5
    888c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8890:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8894:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8898:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    889c:	e7e2      	b.n	8864 <_usb_d_dev_ep_deinit+0x78>
    889e:	bf00      	nop
    88a0:	20000a7c 	.word	0x20000a7c
    88a4:	200009bc 	.word	0x200009bc
    88a8:	00007d91 	.word	0x00007d91
    88ac:	20000a90 	.word	0x20000a90

000088b0 <_usb_d_dev_ep_enable>:
{
    88b0:	b4f0      	push	{r4, r5, r6, r7}
    88b2:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    88b4:	f010 000f 	ands.w	r0, r0, #15
    88b8:	f000 80a7 	beq.w	8a0a <_usb_d_dev_ep_enable+0x15a>
    88bc:	2e00      	cmp	r6, #0
    88be:	bfb4      	ite	lt
    88c0:	1d43      	addlt	r3, r0, #5
    88c2:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    88c4:	4605      	mov	r5, r0
    88c6:	0142      	lsls	r2, r0, #5
    88c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    88cc:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    88d0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    88d2:	2805      	cmp	r0, #5
    88d4:	f240 80a0 	bls.w	8a18 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    88d8:	f06f 0011 	mvn.w	r0, #17
    88dc:	e07d      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    88de:	f014 0f77 	tst.w	r4, #119	; 0x77
    88e2:	f040 8089 	bne.w	89f8 <_usb_d_dev_ep_enable+0x148>
    88e6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    88ea:	2111      	movs	r1, #17
    88ec:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    88f0:	4c9b      	ldr	r4, [pc, #620]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    88f2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    88f6:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    88fa:	4c9a      	ldr	r4, [pc, #616]	; (8b64 <_usb_d_dev_ep_enable+0x2b4>)
    88fc:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8900:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8904:	f200 80cd 	bhi.w	8aa2 <_usb_d_dev_ep_enable+0x1f2>
    8908:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    890c:	f200 8112 	bhi.w	8b34 <_usb_d_dev_ep_enable+0x284>
    8910:	2980      	cmp	r1, #128	; 0x80
    8912:	f200 8101 	bhi.w	8b18 <_usb_d_dev_ep_enable+0x268>
    8916:	2940      	cmp	r1, #64	; 0x40
    8918:	f200 8113 	bhi.w	8b42 <_usb_d_dev_ep_enable+0x292>
    891c:	2920      	cmp	r1, #32
    891e:	f200 8102 	bhi.w	8b26 <_usb_d_dev_ep_enable+0x276>
    8922:	2910      	cmp	r1, #16
    8924:	f200 8114 	bhi.w	8b50 <_usb_d_dev_ep_enable+0x2a0>
    8928:	2908      	cmp	r1, #8
    892a:	bf94      	ite	ls
    892c:	2600      	movls	r6, #0
    892e:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8930:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8934:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8936:	f3c1 010d 	ubfx	r1, r1, #0, #14
    893a:	e0b8      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    893c:	f014 0f70 	tst.w	r4, #112	; 0x70
    8940:	d15d      	bne.n	89fe <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8942:	4e87      	ldr	r6, [pc, #540]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    8944:	009f      	lsls	r7, r3, #2
    8946:	18f9      	adds	r1, r7, r3
    8948:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    894c:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8950:	0109      	lsls	r1, r1, #4
    8952:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8956:	430c      	orrs	r4, r1
    8958:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    895c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8960:	443b      	add	r3, r7
    8962:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8966:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    896a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    896e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8972:	d80f      	bhi.n	8994 <_usb_d_dev_ep_enable+0xe4>
    8974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8978:	d819      	bhi.n	89ae <_usb_d_dev_ep_enable+0xfe>
    897a:	2b80      	cmp	r3, #128	; 0x80
    897c:	d819      	bhi.n	89b2 <_usb_d_dev_ep_enable+0x102>
    897e:	2b40      	cmp	r3, #64	; 0x40
    8980:	d819      	bhi.n	89b6 <_usb_d_dev_ep_enable+0x106>
    8982:	2b20      	cmp	r3, #32
    8984:	d819      	bhi.n	89ba <_usb_d_dev_ep_enable+0x10a>
    8986:	2b10      	cmp	r3, #16
    8988:	d819      	bhi.n	89be <_usb_d_dev_ep_enable+0x10e>
    898a:	2b08      	cmp	r3, #8
    898c:	bf94      	ite	ls
    898e:	2300      	movls	r3, #0
    8990:	2301      	movhi	r3, #1
    8992:	e000      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    8994:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8996:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    899a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    899c:	2380      	movs	r3, #128	; 0x80
    899e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    89a2:	4b6f      	ldr	r3, [pc, #444]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    89a4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    89a8:	2000      	movs	r0, #0
    89aa:	76a8      	strb	r0, [r5, #26]
    89ac:	e015      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    89ae:	2306      	movs	r3, #6
    89b0:	e7f1      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    89b2:	2305      	movs	r3, #5
    89b4:	e7ef      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    89b6:	2304      	movs	r3, #4
    89b8:	e7ed      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    89ba:	2303      	movs	r3, #3
    89bc:	e7eb      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    89be:	2302      	movs	r3, #2
    89c0:	e7e9      	b.n	8996 <_usb_d_dev_ep_enable+0xe6>
    89c2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    89c4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    89c8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    89ca:	2340      	movs	r3, #64	; 0x40
    89cc:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    89d0:	4b63      	ldr	r3, [pc, #396]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    89d2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    89d6:	2000      	movs	r0, #0
    89d8:	72a8      	strb	r0, [r5, #10]
}
    89da:	bcf0      	pop	{r4, r5, r6, r7}
    89dc:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    89de:	2106      	movs	r1, #6
    89e0:	e7f0      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
    89e2:	2105      	movs	r1, #5
    89e4:	e7ee      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
    89e6:	2104      	movs	r1, #4
    89e8:	e7ec      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
    89ea:	2103      	movs	r1, #3
    89ec:	e7ea      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
    89ee:	2102      	movs	r1, #2
    89f0:	e7e8      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    89f2:	f06f 0011 	mvn.w	r0, #17
    89f6:	e7f0      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    89f8:	f06f 0013 	mvn.w	r0, #19
    89fc:	e7ed      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    89fe:	f06f 0013 	mvn.w	r0, #19
    8a02:	e7ea      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8a04:	f06f 0013 	mvn.w	r0, #19
    8a08:	e7e7      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a0e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    8a12:	b2e4      	uxtb	r4, r4
    8a14:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8a16:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8a18:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8a1c:	4950      	ldr	r1, [pc, #320]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    8a1e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8a22:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8a26:	2aff      	cmp	r2, #255	; 0xff
    8a28:	d0e3      	beq.n	89f2 <_usb_d_dev_ep_enable+0x142>
    8a2a:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8a2c:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8a2e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8a32:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8a36:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8a3a:	f001 0107 	and.w	r1, r1, #7
    8a3e:	2901      	cmp	r1, #1
    8a40:	f43f af4d 	beq.w	88de <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8a44:	2e00      	cmp	r6, #0
    8a46:	f6ff af79 	blt.w	893c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8a4a:	f014 0f07 	tst.w	r4, #7
    8a4e:	d1d9      	bne.n	8a04 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8a50:	4e43      	ldr	r6, [pc, #268]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    8a52:	009f      	lsls	r7, r3, #2
    8a54:	18f9      	adds	r1, r7, r3
    8a56:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8a5a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8a5e:	f001 0107 	and.w	r1, r1, #7
    8a62:	430c      	orrs	r4, r1
    8a64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a68:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8a6c:	443b      	add	r3, r7
    8a6e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8a72:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8a76:	4b3b      	ldr	r3, [pc, #236]	; (8b64 <_usb_d_dev_ep_enable+0x2b4>)
    8a78:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8a7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8a80:	d89f      	bhi.n	89c2 <_usb_d_dev_ep_enable+0x112>
    8a82:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8a86:	d8aa      	bhi.n	89de <_usb_d_dev_ep_enable+0x12e>
    8a88:	2980      	cmp	r1, #128	; 0x80
    8a8a:	d8aa      	bhi.n	89e2 <_usb_d_dev_ep_enable+0x132>
    8a8c:	2940      	cmp	r1, #64	; 0x40
    8a8e:	d8aa      	bhi.n	89e6 <_usb_d_dev_ep_enable+0x136>
    8a90:	2920      	cmp	r1, #32
    8a92:	d8aa      	bhi.n	89ea <_usb_d_dev_ep_enable+0x13a>
    8a94:	2910      	cmp	r1, #16
    8a96:	d8aa      	bhi.n	89ee <_usb_d_dev_ep_enable+0x13e>
    8a98:	2908      	cmp	r1, #8
    8a9a:	bf94      	ite	ls
    8a9c:	2100      	movls	r1, #0
    8a9e:	2101      	movhi	r1, #1
    8aa0:	e790      	b.n	89c4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8aa2:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8aa6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8aa8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8aac:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8aae:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8ab2:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8ab4:	2640      	movs	r6, #64	; 0x40
    8ab6:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8aba:	2180      	movs	r1, #128	; 0x80
    8abc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8ac0:	4f27      	ldr	r7, [pc, #156]	; (8b60 <_usb_d_dev_ep_enable+0x2b0>)
    8ac2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8ac6:	2000      	movs	r0, #0
    8ac8:	72a8      	strb	r0, [r5, #10]
    8aca:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8acc:	009c      	lsls	r4, r3, #2
    8ace:	18e1      	adds	r1, r4, r3
    8ad0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8ad4:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8ad8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8adc:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    8ae0:	0152      	lsls	r2, r2, #5
    8ae2:	18b9      	adds	r1, r7, r2
    8ae4:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8ae6:	4423      	add	r3, r4
    8ae8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8aec:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    8af0:	684b      	ldr	r3, [r1, #4]
    8af2:	f364 339b 	bfi	r3, r4, #14, #14
    8af6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8af8:	684b      	ldr	r3, [r1, #4]
    8afa:	f360 030d 	bfi	r3, r0, #0, #14
    8afe:	604b      	str	r3, [r1, #4]
    8b00:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8b04:	21b0      	movs	r1, #176	; 0xb0
    8b06:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8b0a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8b0e:	461a      	mov	r2, r3
    8b10:	2310      	movs	r3, #16
    8b12:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8b16:	e760      	b.n	89da <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b18:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b1c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b1e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b22:	2605      	movs	r6, #5
    8b24:	e7c3      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b26:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b2a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b2c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b30:	2603      	movs	r6, #3
    8b32:	e7bc      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b34:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b38:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b3a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b3e:	2606      	movs	r6, #6
    8b40:	e7b5      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b42:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b46:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b48:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b4c:	2604      	movs	r6, #4
    8b4e:	e7ae      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b50:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b54:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b56:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b5a:	2602      	movs	r6, #2
    8b5c:	e7a7      	b.n	8aae <_usb_d_dev_ep_enable+0x1fe>
    8b5e:	bf00      	nop
    8b60:	200009bc 	.word	0x200009bc
    8b64:	0fffc000 	.word	0x0fffc000

00008b68 <_usb_d_dev_ep_stall>:
{
    8b68:	b470      	push	{r4, r5, r6}
    8b6a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    8b6c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b6e:	f010 000f 	ands.w	r0, r0, #15
    8b72:	d008      	beq.n	8b86 <_usb_d_dev_ep_stall+0x1e>
    8b74:	2b00      	cmp	r3, #0
    8b76:	bfb4      	ite	lt
    8b78:	1d43      	addlt	r3, r0, #5
    8b7a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    8b7c:	2805      	cmp	r0, #5
    8b7e:	d903      	bls.n	8b88 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    8b80:	f06f 0011 	mvn.w	r0, #17
    8b84:	e018      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8b86:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8b88:	2901      	cmp	r1, #1
    8b8a:	d017      	beq.n	8bbc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8b8c:	2900      	cmp	r1, #0
    8b8e:	d03a      	beq.n	8c06 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8b94:	4a45      	ldr	r2, [pc, #276]	; (8cac <_usb_d_dev_ep_stall+0x144>)
    8b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8b9a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8b9e:	f003 030f 	and.w	r3, r3, #15
    8ba2:	015b      	lsls	r3, r3, #5
    8ba4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8ba8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8bac:	2310      	movs	r3, #16
    8bae:	40a3      	lsls	r3, r4
    8bb0:	421a      	tst	r2, r3
    8bb2:	bf14      	ite	ne
    8bb4:	2001      	movne	r0, #1
    8bb6:	2000      	moveq	r0, #0
}
    8bb8:	bc70      	pop	{r4, r5, r6}
    8bba:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8bbc:	2510      	movs	r5, #16
    8bbe:	40a5      	lsls	r5, r4
    8bc0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8bc2:	493a      	ldr	r1, [pc, #232]	; (8cac <_usb_d_dev_ep_stall+0x144>)
    8bc4:	009e      	lsls	r6, r3, #2
    8bc6:	18f2      	adds	r2, r6, r3
    8bc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8bcc:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8bd0:	f002 020f 	and.w	r2, r2, #15
    8bd4:	0150      	lsls	r0, r2, #5
    8bd6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8bda:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8bde:	2020      	movs	r0, #32
    8be0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8be4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8be6:	0152      	lsls	r2, r2, #5
    8be8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8bec:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    8bf0:	4433      	add	r3, r6
    8bf2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8bf6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8bfa:	f042 0208 	orr.w	r2, r2, #8
    8bfe:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8c02:	2000      	movs	r0, #0
    8c04:	e7d8      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8c06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8c0a:	4928      	ldr	r1, [pc, #160]	; (8cac <_usb_d_dev_ep_stall+0x144>)
    8c0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8c10:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8c14:	f002 020f 	and.w	r2, r2, #15
    8c18:	0151      	lsls	r1, r2, #5
    8c1a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8c1e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8c22:	2010      	movs	r0, #16
    8c24:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    8c26:	4205      	tst	r5, r0
    8c28:	d03c      	beq.n	8ca4 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8c2a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8c2c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8c30:	2020      	movs	r0, #32
    8c32:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8c34:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c36:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8c3a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    8c3e:	4202      	tst	r2, r0
    8c40:	d007      	beq.n	8c52 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c42:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8c46:	2201      	movs	r2, #1
    8c48:	fa02 f404 	lsl.w	r4, r2, r4
    8c4c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8c4e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8c52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8c56:	4815      	ldr	r0, [pc, #84]	; (8cac <_usb_d_dev_ep_stall+0x144>)
    8c58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8c5c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    8c60:	f002 0207 	and.w	r2, r2, #7
    8c64:	2a01      	cmp	r2, #1
    8c66:	d00c      	beq.n	8c82 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    8c68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8c6c:	4a0f      	ldr	r2, [pc, #60]	; (8cac <_usb_d_dev_ep_stall+0x144>)
    8c6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8c72:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8c76:	f36f 02c3 	bfc	r2, #3, #1
    8c7a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8c7e:	2000      	movs	r0, #0
    8c80:	e79a      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8c82:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8c86:	f012 0f30 	tst.w	r2, #48	; 0x30
    8c8a:	d10d      	bne.n	8ca8 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    8c8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8c90:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8c94:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8c98:	f36f 02c3 	bfc	r2, #3, #1
    8c9c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8ca0:	2000      	movs	r0, #0
    8ca2:	e789      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
    8ca4:	2000      	movs	r0, #0
    8ca6:	e787      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
    8ca8:	2000      	movs	r0, #0
    8caa:	e785      	b.n	8bb8 <_usb_d_dev_ep_stall+0x50>
    8cac:	200009bc 	.word	0x200009bc

00008cb0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    8cb0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    8cb2:	f000 040f 	and.w	r4, r0, #15
    8cb6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    8cb8:	4a14      	ldr	r2, [pc, #80]	; (8d0c <_usb_d_dev_ep_read_req+0x5c>)
    8cba:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    8cbc:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    8cbe:	6840      	ldr	r0, [r0, #4]
    8cc0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    8cc4:	2c05      	cmp	r4, #5
    8cc6:	d817      	bhi.n	8cf8 <_usb_d_dev_ep_read_req+0x48>
    8cc8:	b1c9      	cbz	r1, 8cfe <_usb_d_dev_ep_read_req+0x4e>
    8cca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8cce:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    8cd2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    8cd4:	2a11      	cmp	r2, #17
    8cd6:	d115      	bne.n	8d04 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8cd8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    8cdc:	f012 0f10 	tst.w	r2, #16
    8ce0:	d102      	bne.n	8ce8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    8ce2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    8ce4:	bc30      	pop	{r4, r5}
    8ce6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    8ce8:	682c      	ldr	r4, [r5, #0]
    8cea:	686a      	ldr	r2, [r5, #4]
    8cec:	600c      	str	r4, [r1, #0]
    8cee:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8cf0:	2210      	movs	r2, #16
    8cf2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    8cf6:	e7f5      	b.n	8ce4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    8cf8:	f06f 0011 	mvn.w	r0, #17
    8cfc:	e7f2      	b.n	8ce4 <_usb_d_dev_ep_read_req+0x34>
    8cfe:	f06f 0011 	mvn.w	r0, #17
    8d02:	e7ef      	b.n	8ce4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    8d04:	f06f 0012 	mvn.w	r0, #18
    8d08:	e7ec      	b.n	8ce4 <_usb_d_dev_ep_read_req+0x34>
    8d0a:	bf00      	nop
    8d0c:	200009bc 	.word	0x200009bc

00008d10 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    8d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d14:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    8d16:	7a03      	ldrb	r3, [r0, #8]
    8d18:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d1a:	f013 030f 	ands.w	r3, r3, #15
    8d1e:	f000 80c2 	beq.w	8ea6 <_usb_d_dev_ep_trans+0x196>
    8d22:	2e00      	cmp	r6, #0
    8d24:	bfb4      	ite	lt
    8d26:	1d5a      	addlt	r2, r3, #5
    8d28:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    8d2a:	4614      	mov	r4, r2
    8d2c:	4969      	ldr	r1, [pc, #420]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8d2e:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    8d32:	1c55      	adds	r5, r2, #1
    8d34:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8d38:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8d3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8d40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8d44:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8d48:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8d4c:	428a      	cmp	r2, r1
    8d4e:	d025      	beq.n	8d9c <_usb_d_dev_ep_trans+0x8c>
    8d50:	1e55      	subs	r5, r2, #1
    8d52:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    8d54:	6841      	ldr	r1, [r0, #4]
    8d56:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8d58:	2b05      	cmp	r3, #5
    8d5a:	f200 8092 	bhi.w	8e82 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    8d5e:	6803      	ldr	r3, [r0, #0]
    8d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8d64:	d31c      	bcc.n	8da0 <_usb_d_dev_ep_trans+0x90>
    8d66:	eb03 0c01 	add.w	ip, r3, r1
    8d6a:	f8df e180 	ldr.w	lr, [pc, #384]	; 8eec <_usb_d_dev_ep_trans+0x1dc>
    8d6e:	45f4      	cmp	ip, lr
    8d70:	d816      	bhi.n	8da0 <_usb_d_dev_ep_trans+0x90>
    8d72:	f013 0f03 	tst.w	r3, #3
    8d76:	d113      	bne.n	8da0 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    8d78:	2e00      	cmp	r6, #0
    8d7a:	db2a      	blt.n	8dd2 <_usb_d_dev_ep_trans+0xc2>
    8d7c:	428a      	cmp	r2, r1
    8d7e:	f200 809c 	bhi.w	8eba <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    8d82:	b34d      	cbz	r5, 8dd8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    8d84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8d88:	4a52      	ldr	r2, [pc, #328]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8d8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8d92:	2b00      	cmp	r3, #0
    8d94:	d07b      	beq.n	8e8e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    8d96:	f04f 0800 	mov.w	r8, #0
    8d9a:	e00c      	b.n	8db6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8d9c:	4615      	mov	r5, r2
    8d9e:	e7d9      	b.n	8d54 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    8da0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8da4:	4a4b      	ldr	r2, [pc, #300]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8da6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8dae:	2b00      	cmp	r3, #0
    8db0:	d06a      	beq.n	8e88 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    8db2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8db6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8dba:	4a46      	ldr	r2, [pc, #280]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8dbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8dc0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8dc4:	f013 0f08 	tst.w	r3, #8
    8dc8:	d009      	beq.n	8dde <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    8dca:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    8dcc:	b003      	add	sp, #12
    8dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    8dd2:	f04f 0800 	mov.w	r8, #0
    8dd6:	e7ee      	b.n	8db6 <_usb_d_dev_ep_trans+0xa6>
    8dd8:	f04f 0800 	mov.w	r8, #0
    8ddc:	e7eb      	b.n	8db6 <_usb_d_dev_ep_trans+0xa6>
    8dde:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    8de0:	a801      	add	r0, sp, #4
    8de2:	4b3d      	ldr	r3, [pc, #244]	; (8ed8 <_usb_d_dev_ep_trans+0x1c8>)
    8de4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    8de6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8dea:	4a3a      	ldr	r2, [pc, #232]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8dec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8df0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8df4:	f013 0f40 	tst.w	r3, #64	; 0x40
    8df8:	d13c      	bne.n	8e74 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    8dfa:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    8dfe:	4b35      	ldr	r3, [pc, #212]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8e00:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    8e04:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e0c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    8e10:	a801      	add	r0, sp, #4
    8e12:	4b32      	ldr	r3, [pc, #200]	; (8edc <_usb_d_dev_ep_trans+0x1cc>)
    8e14:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    8e16:	f8da 3000 	ldr.w	r3, [sl]
    8e1a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    8e1e:	f8da 3004 	ldr.w	r3, [sl, #4]
    8e22:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    8e26:	2300      	movs	r3, #0
    8e28:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    8e2c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    8e2e:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8e32:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    8e36:	f368 1345 	bfi	r3, r8, #5, #1
    8e3a:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    8e3e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    8e42:	b1e3      	cbz	r3, 8e7e <_usb_d_dev_ep_trans+0x16e>
    8e44:	fab5 f585 	clz	r5, r5
    8e48:	096d      	lsrs	r5, r5, #5
    8e4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8e4e:	4b21      	ldr	r3, [pc, #132]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8e50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8e54:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    8e58:	f365 1304 	bfi	r3, r5, #4, #1
    8e5c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    8e60:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    8e62:	f04f 0100 	mov.w	r1, #0
    8e66:	4638      	mov	r0, r7
    8e68:	bfb4      	ite	lt
    8e6a:	4b1d      	ldrlt	r3, [pc, #116]	; (8ee0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    8e6c:	4b1d      	ldrge	r3, [pc, #116]	; (8ee4 <_usb_d_dev_ep_trans+0x1d4>)
    8e6e:	4798      	blx	r3
	return ERR_NONE;
    8e70:	2000      	movs	r0, #0
    8e72:	e7ab      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    8e74:	a801      	add	r0, sp, #4
    8e76:	4b19      	ldr	r3, [pc, #100]	; (8edc <_usb_d_dev_ep_trans+0x1cc>)
    8e78:	4798      	blx	r3
		return USB_BUSY;
    8e7a:	2001      	movs	r0, #1
    8e7c:	e7a6      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
    8e7e:	2500      	movs	r5, #0
    8e80:	e7e3      	b.n	8e4a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    8e82:	f06f 0011 	mvn.w	r0, #17
    8e86:	e7a1      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8e88:	f06f 0012 	mvn.w	r0, #18
    8e8c:	e79e      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    8e8e:	f06f 0011 	mvn.w	r0, #17
    8e92:	e79b      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8e94:	f06f 0012 	mvn.w	r0, #18
    8e98:	e798      	b.n	8dcc <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    8e9a:	6841      	ldr	r1, [r0, #4]
    8e9c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    8ea0:	4f11      	ldr	r7, [pc, #68]	; (8ee8 <_usb_d_dev_ep_trans+0x1d8>)
    8ea2:	2400      	movs	r4, #0
    8ea4:	e75b      	b.n	8d5e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8ea6:	4a0b      	ldr	r2, [pc, #44]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8ea8:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8eac:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8eb0:	428a      	cmp	r2, r1
    8eb2:	d0f2      	beq.n	8e9a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    8eb4:	4f0c      	ldr	r7, [pc, #48]	; (8ee8 <_usb_d_dev_ep_trans+0x1d8>)
    8eb6:	2400      	movs	r4, #0
    8eb8:	e74a      	b.n	8d50 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    8eba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8ebe:	4a05      	ldr	r2, [pc, #20]	; (8ed4 <_usb_d_dev_ep_trans+0x1c4>)
    8ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d0e3      	beq.n	8e94 <_usb_d_dev_ep_trans+0x184>
    8ecc:	f04f 0801 	mov.w	r8, #1
    8ed0:	e771      	b.n	8db6 <_usb_d_dev_ep_trans+0xa6>
    8ed2:	bf00      	nop
    8ed4:	200009bc 	.word	0x200009bc
    8ed8:	00004355 	.word	0x00004355
    8edc:	00004363 	.word	0x00004363
    8ee0:	00007f41 	.word	0x00007f41
    8ee4:	000080c5 	.word	0x000080c5
    8ee8:	20000a90 	.word	0x20000a90
    8eec:	20041fff 	.word	0x20041fff

00008ef0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8ef0:	4b07      	ldr	r3, [pc, #28]	; (8f10 <_usb_d_dev_register_callback+0x20>)
    8ef2:	2900      	cmp	r1, #0
    8ef4:	bf08      	it	eq
    8ef6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    8ef8:	2801      	cmp	r0, #1
    8efa:	d004      	beq.n	8f06 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    8efc:	b910      	cbnz	r0, 8f04 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    8efe:	4b05      	ldr	r3, [pc, #20]	; (8f14 <_usb_d_dev_register_callback+0x24>)
    8f00:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    8f04:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    8f06:	4b03      	ldr	r3, [pc, #12]	; (8f14 <_usb_d_dev_register_callback+0x24>)
    8f08:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    8f0c:	4770      	bx	lr
    8f0e:	bf00      	nop
    8f10:	00007cb1 	.word	0x00007cb1
    8f14:	200009bc 	.word	0x200009bc

00008f18 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8f18:	4b0a      	ldr	r3, [pc, #40]	; (8f44 <_usb_d_dev_register_ep_callback+0x2c>)
    8f1a:	2900      	cmp	r1, #0
    8f1c:	bf08      	it	eq
    8f1e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    8f20:	4603      	mov	r3, r0
    8f22:	b138      	cbz	r0, 8f34 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    8f24:	2801      	cmp	r0, #1
    8f26:	d009      	beq.n	8f3c <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    8f28:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    8f2a:	bf04      	itt	eq
    8f2c:	4b06      	ldreq	r3, [pc, #24]	; (8f48 <_usb_d_dev_register_ep_callback+0x30>)
    8f2e:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    8f32:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    8f34:	4b04      	ldr	r3, [pc, #16]	; (8f48 <_usb_d_dev_register_ep_callback+0x30>)
    8f36:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    8f3a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    8f3c:	4b02      	ldr	r3, [pc, #8]	; (8f48 <_usb_d_dev_register_ep_callback+0x30>)
    8f3e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    8f42:	4770      	bx	lr
    8f44:	00007cb1 	.word	0x00007cb1
    8f48:	200009bc 	.word	0x200009bc

00008f4c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    8f4c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8f4e:	4b01      	ldr	r3, [pc, #4]	; (8f54 <USB_0_Handler+0x8>)
    8f50:	4798      	blx	r3
    8f52:	bd08      	pop	{r3, pc}
    8f54:	000082b5 	.word	0x000082b5

00008f58 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    8f58:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8f5a:	4b01      	ldr	r3, [pc, #4]	; (8f60 <USB_1_Handler+0x8>)
    8f5c:	4798      	blx	r3
    8f5e:	bd08      	pop	{r3, pc}
    8f60:	000082b5 	.word	0x000082b5

00008f64 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    8f64:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8f66:	4b01      	ldr	r3, [pc, #4]	; (8f6c <USB_2_Handler+0x8>)
    8f68:	4798      	blx	r3
    8f6a:	bd08      	pop	{r3, pc}
    8f6c:	000082b5 	.word	0x000082b5

00008f70 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    8f70:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8f72:	4b01      	ldr	r3, [pc, #4]	; (8f78 <USB_3_Handler+0x8>)
    8f74:	4798      	blx	r3
    8f76:	bd08      	pop	{r3, pc}
    8f78:	000082b5 	.word	0x000082b5

00008f7c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    8f7c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    8f7e:	4604      	mov	r4, r0
    8f80:	b340      	cbz	r0, 8fd4 <_wdt_init+0x58>
    8f82:	6800      	ldr	r0, [r0, #0]
    8f84:	3000      	adds	r0, #0
    8f86:	bf18      	it	ne
    8f88:	2001      	movne	r0, #1
    8f8a:	2250      	movs	r2, #80	; 0x50
    8f8c:	4915      	ldr	r1, [pc, #84]	; (8fe4 <_wdt_init+0x68>)
    8f8e:	4b16      	ldr	r3, [pc, #88]	; (8fe8 <_wdt_init+0x6c>)
    8f90:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    8f92:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8f94:	689a      	ldr	r2, [r3, #8]
    8f96:	f012 0f0e 	tst.w	r2, #14
    8f9a:	d1fb      	bne.n	8f94 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8f9c:	781a      	ldrb	r2, [r3, #0]
    8f9e:	09d2      	lsrs	r2, r2, #7
    8fa0:	d11a      	bne.n	8fd8 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8fa2:	689a      	ldr	r2, [r3, #8]
    8fa4:	f012 0f0e 	tst.w	r2, #14
    8fa8:	d1fb      	bne.n	8fa2 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8faa:	781a      	ldrb	r2, [r3, #0]
    8fac:	f012 0f02 	tst.w	r2, #2
    8fb0:	d115      	bne.n	8fde <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    8fb2:	781a      	ldrb	r2, [r3, #0]
    8fb4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8fb8:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8fba:	689a      	ldr	r2, [r3, #8]
    8fbc:	f012 0f0e 	tst.w	r2, #14
    8fc0:	d1fb      	bne.n	8fba <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    8fc2:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    8fc4:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    8fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    8fca:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    8fce:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    8fd0:	2000      	movs	r0, #0
    8fd2:	bd10      	pop	{r4, pc}
    8fd4:	2000      	movs	r0, #0
    8fd6:	e7d8      	b.n	8f8a <_wdt_init+0xe>
		return ERR_DENIED;
    8fd8:	f06f 0010 	mvn.w	r0, #16
    8fdc:	bd10      	pop	{r4, pc}
    8fde:	f06f 0010 	mvn.w	r0, #16
}
    8fe2:	bd10      	pop	{r4, pc}
    8fe4:	0000c56c 	.word	0x0000c56c
    8fe8:	00005645 	.word	0x00005645

00008fec <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    8fec:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    8fee:	4604      	mov	r4, r0
    8ff0:	b1d0      	cbz	r0, 9028 <_wdt_disable+0x3c>
    8ff2:	6800      	ldr	r0, [r0, #0]
    8ff4:	3000      	adds	r0, #0
    8ff6:	bf18      	it	ne
    8ff8:	2001      	movne	r0, #1
    8ffa:	f44f 7284 	mov.w	r2, #264	; 0x108
    8ffe:	490d      	ldr	r1, [pc, #52]	; (9034 <_wdt_disable+0x48>)
    9000:	4b0d      	ldr	r3, [pc, #52]	; (9038 <_wdt_disable+0x4c>)
    9002:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    9004:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9006:	689a      	ldr	r2, [r3, #8]
    9008:	f012 0f0e 	tst.w	r2, #14
    900c:	d1fb      	bne.n	9006 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    900e:	781a      	ldrb	r2, [r3, #0]
    9010:	09d2      	lsrs	r2, r2, #7
    9012:	d10b      	bne.n	902c <_wdt_disable+0x40>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    9014:	781a      	ldrb	r2, [r3, #0]
    9016:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    901a:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    901c:	689a      	ldr	r2, [r3, #8]
    901e:	f012 0f0e 	tst.w	r2, #14
    9022:	d1fb      	bne.n	901c <_wdt_disable+0x30>
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    9024:	2000      	movs	r0, #0
    9026:	bd10      	pop	{r4, pc}
    9028:	2000      	movs	r0, #0
    902a:	e7e6      	b.n	8ffa <_wdt_disable+0xe>
		return ERR_DENIED;
    902c:	f06f 0010 	mvn.w	r0, #16
}
    9030:	bd10      	pop	{r4, pc}
    9032:	bf00      	nop
    9034:	0000c56c 	.word	0x0000c56c
    9038:	00005645 	.word	0x00005645

0000903c <RTC_Scheduler_ping_cb>:
}


static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag++;
    903c:	4a04      	ldr	r2, [pc, #16]	; (9050 <RTC_Scheduler_ping_cb+0x14>)
    903e:	7813      	ldrb	r3, [r2, #0]
    9040:	3301      	adds	r3, #1
    9042:	b2db      	uxtb	r3, r3
    9044:	7013      	strb	r3, [r2, #0]
	pingflag_active++;
    9046:	7853      	ldrb	r3, [r2, #1]
    9048:	3301      	adds	r3, #1
    904a:	b2db      	uxtb	r3, r3
    904c:	7053      	strb	r3, [r2, #1]
    904e:	4770      	bx	lr
    9050:	20000d7c 	.word	0x20000d7c

00009054 <RTC_Scheduler_realtime_cb>:
}


static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{
    9054:	b508      	push	{r3, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);
    9056:	4802      	ldr	r0, [pc, #8]	; (9060 <RTC_Scheduler_realtime_cb+0xc>)
    9058:	4b02      	ldr	r3, [pc, #8]	; (9064 <RTC_Scheduler_realtime_cb+0x10>)
    905a:	4798      	blx	r3
    905c:	bd08      	pop	{r3, pc}
    905e:	bf00      	nop
    9060:	20001ca4 	.word	0x20001ca4
    9064:	00003853 	.word	0x00003853

00009068 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9068:	69c3      	ldr	r3, [r0, #28]
    906a:	2b00      	cmp	r3, #0
    906c:	d147      	bne.n	90fe <grid_port_receive_task+0x96>
void grid_port_receive_task(struct grid_port* por){
    906e:	b530      	push	{r4, r5, lr}
    9070:	b083      	sub	sp, #12
    9072:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    9074:	6983      	ldr	r3, [r0, #24]
    9076:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    907a:	d91c      	bls.n	90b6 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    907c:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    9080:	2b01      	cmp	r3, #1
    9082:	d005      	beq.n	9090 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    9084:	2300      	movs	r3, #0
    9086:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    9088:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    908a:	4b1d      	ldr	r3, [pc, #116]	; (9100 <grid_port_receive_task+0x98>)
    908c:	4798      	blx	r3
    908e:	e014      	b.n	90ba <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    9090:	2300      	movs	r3, #0
    9092:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    9094:	6243      	str	r3, [r0, #36]	; 0x24
			por->partner_status = 0;
    9096:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
			por->rx_double_buffer_timeout =0;
    909a:	6183      	str	r3, [r0, #24]
			grid_sys_port_reset_dma(por);
    909c:	4b18      	ldr	r3, [pc, #96]	; (9100 <grid_port_receive_task+0x98>)
    909e:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    90a0:	23c8      	movs	r3, #200	; 0xc8
    90a2:	9301      	str	r3, [sp, #4]
    90a4:	2302      	movs	r3, #2
    90a6:	9300      	str	r3, [sp, #0]
    90a8:	23ff      	movs	r3, #255	; 0xff
    90aa:	461a      	mov	r2, r3
    90ac:	4619      	mov	r1, r3
    90ae:	4815      	ldr	r0, [pc, #84]	; (9104 <grid_port_receive_task+0x9c>)
    90b0:	4d15      	ldr	r5, [pc, #84]	; (9108 <grid_port_receive_task+0xa0>)
    90b2:	47a8      	blx	r5
    90b4:	e001      	b.n	90ba <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    90b6:	3301      	adds	r3, #1
    90b8:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    90ba:	6a23      	ldr	r3, [r4, #32]
    90bc:	18e2      	adds	r2, r4, r3
    90be:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
    90c2:	2a0a      	cmp	r2, #10
    90c4:	d015      	beq.n	90f2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    90c6:	b1c2      	cbz	r2, 90fa <grid_port_receive_task+0x92>
    90c8:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    90cc:	f240 2056 	movw	r0, #598	; 0x256
			por->rx_double_buffer_seek_start_index=0;
    90d0:	2500      	movs	r5, #0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    90d2:	4283      	cmp	r3, r0
			por->rx_double_buffer_seek_start_index++;			
    90d4:	bf9a      	itte	ls
    90d6:	3301      	addls	r3, #1
    90d8:	6223      	strls	r3, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    90da:	6225      	strhi	r5, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    90dc:	3a01      	subs	r2, #1
    90de:	d00c      	beq.n	90fa <grid_port_receive_task+0x92>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    90e0:	6a23      	ldr	r3, [r4, #32]
    90e2:	18e1      	adds	r1, r4, r3
    90e4:	f891 1280 	ldrb.w	r1, [r1, #640]	; 0x280
    90e8:	290a      	cmp	r1, #10
    90ea:	d002      	beq.n	90f2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    90ec:	2900      	cmp	r1, #0
    90ee:	d1f0      	bne.n	90d2 <grid_port_receive_task+0x6a>
    90f0:	e003      	b.n	90fa <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
    90f2:	2301      	movs	r3, #1
    90f4:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    90f6:	2300      	movs	r3, #0
    90f8:	61a3      	str	r3, [r4, #24]
}
    90fa:	b003      	add	sp, #12
    90fc:	bd30      	pop	{r4, r5, pc}
    90fe:	4770      	bx	lr
    9100:	000035b9 	.word	0x000035b9
    9104:	20001ca4 	.word	0x20001ca4
    9108:	000038ad 	.word	0x000038ad

0000910c <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t length){
    910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9110:	b08b      	sub	sp, #44	; 0x2c
    9112:	af02      	add	r7, sp, #8
    9114:	4604      	mov	r4, r0
    9116:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    9118:	2301      	movs	r3, #1
    911a:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    911c:	230e      	movs	r3, #14
    911e:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    9120:	2315      	movs	r3, #21
    9122:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    9124:	2304      	movs	r3, #4
    9126:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    9128:	2330      	movs	r3, #48	; 0x30
    912a:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    912c:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    912e:	230a      	movs	r3, #10
    9130:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    9132:	2300      	movs	r3, #0
    9134:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    9136:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    9138:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    913a:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    913c:	1dd3      	adds	r3, r2, #7
    913e:	f023 0307 	bic.w	r3, r3, #7
    9142:	ebad 0d03 	sub.w	sp, sp, r3
    9146:	ae02      	add	r6, sp, #8
    9148:	46b0      	mov	r8, r6
	for (uint32_t i = 0; i<length; i++){
    914a:	b1b2      	cbz	r2, 917a <grid_port_receive_decode+0x6e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    914c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    914e:	eb06 0c02 	add.w	ip, r6, r2
    9152:	4632      	mov	r2, r6
    9154:	1b89      	subs	r1, r1, r6
    9156:	f8df e308 	ldr.w	lr, [pc, #776]	; 9460 <grid_port_receive_decode+0x354>
    915a:	f44f 7016 	mov.w	r0, #600	; 0x258
    915e:	eb01 0902 	add.w	r9, r1, r2
    9162:	fbae a309 	umull	sl, r3, lr, r9
    9166:	099b      	lsrs	r3, r3, #6
    9168:	fb00 9313 	mls	r3, r0, r3, r9
    916c:	4423      	add	r3, r4
    916e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    9172:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i<length; i++){
    9176:	4594      	cmp	ip, r2
    9178:	d1f1      	bne.n	915e <grid_port_receive_decode+0x52>
	if (message[0] == 1 && message [length-1] == 10){
    917a:	7833      	ldrb	r3, [r6, #0]
    917c:	2b01      	cmp	r3, #1
    917e:	d02e      	beq.n	91de <grid_port_receive_decode+0xd2>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    9180:	23c8      	movs	r3, #200	; 0xc8
    9182:	9301      	str	r3, [sp, #4]
    9184:	2302      	movs	r3, #2
    9186:	9300      	str	r3, [sp, #0]
    9188:	2314      	movs	r3, #20
    918a:	2200      	movs	r2, #0
    918c:	4611      	mov	r1, r2
    918e:	48b2      	ldr	r0, [pc, #712]	; (9458 <grid_port_receive_decode+0x34c>)
    9190:	4eb2      	ldr	r6, [pc, #712]	; (945c <grid_port_receive_decode+0x350>)
    9192:	47b0      	blx	r6
	for (uint32_t i = 0; i<length; i++){
    9194:	b18d      	cbz	r5, 91ba <grid_port_receive_decode+0xae>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    9196:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9198:	eb05 0e02 	add.w	lr, r5, r2
    919c:	4eb0      	ldr	r6, [pc, #704]	; (9460 <grid_port_receive_decode+0x354>)
    919e:	f44f 7016 	mov.w	r0, #600	; 0x258
    91a2:	2100      	movs	r1, #0
    91a4:	fba6 c302 	umull	ip, r3, r6, r2
    91a8:	099b      	lsrs	r3, r3, #6
    91aa:	fb00 2313 	mls	r3, r0, r3, r2
    91ae:	4423      	add	r3, r4
    91b0:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    91b4:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    91b6:	4596      	cmp	lr, r2
    91b8:	d1f4      	bne.n	91a4 <grid_port_receive_decode+0x98>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    91ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    91bc:	441d      	add	r5, r3
    91be:	4ba8      	ldr	r3, [pc, #672]	; (9460 <grid_port_receive_decode+0x354>)
    91c0:	fba3 2305 	umull	r2, r3, r3, r5
    91c4:	099b      	lsrs	r3, r3, #6
    91c6:	f44f 7216 	mov.w	r2, #600	; 0x258
    91ca:	fb02 5313 	mls	r3, r2, r3, r5
    91ce:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    91d0:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    91d2:	2300      	movs	r3, #0
    91d4:	61e3      	str	r3, [r4, #28]
}
    91d6:	3724      	adds	r7, #36	; 0x24
    91d8:	46bd      	mov	sp, r7
    91da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (message[0] == 1 && message [length-1] == 10){
    91de:	1973      	adds	r3, r6, r5
    91e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    91e4:	2b0a      	cmp	r3, #10
    91e6:	d1cb      	bne.n	9180 <grid_port_receive_decode+0x74>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    91e8:	1ee8      	subs	r0, r5, #3
    91ea:	f107 0213 	add.w	r2, r7, #19
    91ee:	2102      	movs	r1, #2
    91f0:	4430      	add	r0, r6
    91f2:	4b9c      	ldr	r3, [pc, #624]	; (9464 <grid_port_receive_decode+0x358>)
    91f4:	4798      	blx	r3
    91f6:	4681      	mov	r9, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    91f8:	4629      	mov	r1, r5
    91fa:	4630      	mov	r0, r6
    91fc:	4b9a      	ldr	r3, [pc, #616]	; (9468 <grid_port_receive_decode+0x35c>)
    91fe:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9200:	fa5f f989 	uxtb.w	r9, r9
    9204:	b2c0      	uxtb	r0, r0
    9206:	4581      	cmp	r9, r0
    9208:	d00e      	beq.n	9228 <grid_port_receive_decode+0x11c>
			if (error_flag != 0){		
    920a:	7cfb      	ldrb	r3, [r7, #19]
    920c:	2b00      	cmp	r3, #0
    920e:	f040 818c 	bne.w	952a <grid_port_receive_decode+0x41e>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // PURPLE BLINKY
    9212:	23c8      	movs	r3, #200	; 0xc8
    9214:	9301      	str	r3, [sp, #4]
    9216:	2301      	movs	r3, #1
    9218:	9300      	str	r3, [sp, #0]
    921a:	23ff      	movs	r3, #255	; 0xff
    921c:	2200      	movs	r2, #0
    921e:	2114      	movs	r1, #20
    9220:	488d      	ldr	r0, [pc, #564]	; (9458 <grid_port_receive_decode+0x34c>)
    9222:	4e8e      	ldr	r6, [pc, #568]	; (945c <grid_port_receive_decode+0x350>)
    9224:	47b0      	blx	r6
    9226:	e7b5      	b.n	9194 <grid_port_receive_decode+0x88>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9228:	f897 b013 	ldrb.w	fp, [r7, #19]
    922c:	f1bb 0f00 	cmp.w	fp, #0
    9230:	f040 817b 	bne.w	952a <grid_port_receive_decode+0x41e>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9234:	7873      	ldrb	r3, [r6, #1]
    9236:	2b0f      	cmp	r3, #15
    9238:	d00d      	beq.n	9256 <grid_port_receive_decode+0x14a>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    923a:	2b0e      	cmp	r3, #14
    923c:	f000 80cb 	beq.w	93d6 <grid_port_receive_decode+0x2ca>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    9240:	23c8      	movs	r3, #200	; 0xc8
    9242:	9301      	str	r3, [sp, #4]
    9244:	2302      	movs	r3, #2
    9246:	9300      	str	r3, [sp, #0]
    9248:	2300      	movs	r3, #0
    924a:	461a      	mov	r2, r3
    924c:	21ff      	movs	r1, #255	; 0xff
    924e:	4882      	ldr	r0, [pc, #520]	; (9458 <grid_port_receive_decode+0x34c>)
    9250:	4e82      	ldr	r6, [pc, #520]	; (945c <grid_port_receive_decode+0x350>)
    9252:	47b0      	blx	r6
    9254:	e79e      	b.n	9194 <grid_port_receive_decode+0x88>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9256:	4630      	mov	r0, r6
    9258:	4b84      	ldr	r3, [pc, #528]	; (946c <grid_port_receive_decode+0x360>)
    925a:	4798      	blx	r3
    925c:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    925e:	4630      	mov	r0, r6
    9260:	4b83      	ldr	r3, [pc, #524]	; (9470 <grid_port_receive_decode+0x364>)
    9262:	4798      	blx	r3
    9264:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9266:	4630      	mov	r0, r6
    9268:	4b82      	ldr	r3, [pc, #520]	; (9474 <grid_port_receive_decode+0x368>)
    926a:	4798      	blx	r3
    926c:	4682      	mov	sl, r0
    926e:	f1a0 097f 	sub.w	r9, r0, #127	; 0x7f
    9272:	fa4f f989 	sxtb.w	r9, r9
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    9276:	4630      	mov	r0, r6
    9278:	4b7f      	ldr	r3, [pc, #508]	; (9478 <grid_port_receive_decode+0x36c>)
    927a:	4798      	blx	r3
    927c:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9280:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9282:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    9286:	b182      	cbz	r2, 92aa <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 1){ // 90 deg
    9288:	2a01      	cmp	r2, #1
    928a:	d009      	beq.n	92a0 <grid_port_receive_decode+0x194>
				else if(por->partner_fi == 2){ // 180 deg
    928c:	2a02      	cmp	r2, #2
    928e:	d162      	bne.n	9356 <grid_port_receive_decode+0x24a>
					rotated_dx  -= received_dx;
    9290:	f1ca 097f 	rsb	r9, sl, #127	; 0x7f
    9294:	fa4f f989 	sxtb.w	r9, r9
					rotated_dy  -= received_dy;
    9298:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    929c:	b25b      	sxtb	r3, r3
    929e:	e004      	b.n	92aa <grid_port_receive_decode+0x19e>
					rotated_dx  -= received_dy;
    92a0:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    92a4:	464b      	mov	r3, r9
					rotated_dx  -= received_dy;
    92a6:	fa4f f980 	sxtb.w	r9, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    92aa:	f894 a50d 	ldrb.w	sl, [r4, #1293]	; 0x50d
    92ae:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    92b2:	44d1      	add	r9, sl
    92b4:	fa5f fa89 	uxtb.w	sl, r9
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    92b8:	f894 950e 	ldrb.w	r9, [r4, #1294]	; 0x50e
    92bc:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    92c0:	444b      	add	r3, r9
    92c2:	fa5f f983 	uxtb.w	r9, r3
				grid_msg_set_id(message, updated_id);
    92c6:	6879      	ldr	r1, [r7, #4]
    92c8:	4630      	mov	r0, r6
    92ca:	4b6c      	ldr	r3, [pc, #432]	; (947c <grid_port_receive_decode+0x370>)
    92cc:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    92ce:	4651      	mov	r1, sl
    92d0:	4630      	mov	r0, r6
    92d2:	4b6b      	ldr	r3, [pc, #428]	; (9480 <grid_port_receive_decode+0x374>)
    92d4:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    92d6:	4649      	mov	r1, r9
    92d8:	4630      	mov	r0, r6
    92da:	4b6a      	ldr	r3, [pc, #424]	; (9484 <grid_port_receive_decode+0x378>)
    92dc:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    92de:	6839      	ldr	r1, [r7, #0]
    92e0:	4630      	mov	r0, r6
    92e2:	4b69      	ldr	r3, [pc, #420]	; (9488 <grid_port_receive_decode+0x37c>)
    92e4:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
    92ec:	eb09 290a 	add.w	r9, r9, sl, lsl #8
    92f0:	683b      	ldr	r3, [r7, #0]
    92f2:	eb03 2909 	add.w	r9, r3, r9, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    92f6:	4649      	mov	r1, r9
    92f8:	4857      	ldr	r0, [pc, #348]	; (9458 <grid_port_receive_decode+0x34c>)
    92fa:	4b64      	ldr	r3, [pc, #400]	; (948c <grid_port_receive_decode+0x380>)
    92fc:	4798      	blx	r3
    92fe:	2800      	cmp	r0, #0
    9300:	d134      	bne.n	936c <grid_port_receive_decode+0x260>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    9302:	4629      	mov	r1, r5
    9304:	4630      	mov	r0, r6
    9306:	4b58      	ldr	r3, [pc, #352]	; (9468 <grid_port_receive_decode+0x35c>)
    9308:	4798      	blx	r3
    930a:	4602      	mov	r2, r0
    930c:	4629      	mov	r1, r5
    930e:	4630      	mov	r0, r6
    9310:	4b5f      	ldr	r3, [pc, #380]	; (9490 <grid_port_receive_decode+0x384>)
    9312:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    9314:	f504 669e 	add.w	r6, r4, #1264	; 0x4f0
    9318:	b2a9      	uxth	r1, r5
    931a:	4630      	mov	r0, r6
    931c:	4b5d      	ldr	r3, [pc, #372]	; (9494 <grid_port_receive_decode+0x388>)
    931e:	4798      	blx	r3
    9320:	b380      	cbz	r0, 9384 <grid_port_receive_decode+0x278>
						for (uint8_t i=0; i<length; i++){
    9322:	b15d      	cbz	r5, 933c <grid_port_receive_decode+0x230>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9324:	f8df a184 	ldr.w	sl, [pc, #388]	; 94ac <grid_port_receive_decode+0x3a0>
    9328:	f818 100b 	ldrb.w	r1, [r8, fp]
    932c:	4630      	mov	r0, r6
    932e:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    9330:	f10b 0b01 	add.w	fp, fp, #1
    9334:	fa5f fb8b 	uxtb.w	fp, fp
    9338:	455d      	cmp	r5, fp
    933a:	d8f5      	bhi.n	9328 <grid_port_receive_decode+0x21c>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    933c:	4630      	mov	r0, r6
    933e:	4b56      	ldr	r3, [pc, #344]	; (9498 <grid_port_receive_decode+0x38c>)
    9340:	4798      	blx	r3
						grid_port_process_inbound(por);
    9342:	4620      	mov	r0, r4
    9344:	4b55      	ldr	r3, [pc, #340]	; (949c <grid_port_receive_decode+0x390>)
    9346:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    9348:	4649      	mov	r1, r9
    934a:	4843      	ldr	r0, [pc, #268]	; (9458 <grid_port_receive_decode+0x34c>)
    934c:	4b54      	ldr	r3, [pc, #336]	; (94a0 <grid_port_receive_decode+0x394>)
    934e:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    9350:	2306      	movs	r3, #6
    9352:	75bb      	strb	r3, [r7, #22]
    9354:	e016      	b.n	9384 <grid_port_receive_decode+0x278>
				else if(por->partner_fi == 3){ // 270 deg
    9356:	2a03      	cmp	r2, #3
    9358:	d105      	bne.n	9366 <grid_port_receive_decode+0x25a>
					rotated_dy  -= received_dx;
    935a:	f1ca 0a7f 	rsb	sl, sl, #127	; 0x7f
					rotated_dx  += received_dy;
    935e:	4699      	mov	r9, r3
					rotated_dy  -= received_dx;
    9360:	fa4f f38a 	sxtb.w	r3, sl
    9364:	e7a1      	b.n	92aa <grid_port_receive_decode+0x19e>
				int8_t rotated_dy = 0;
    9366:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9368:	4699      	mov	r9, r3
    936a:	e79e      	b.n	92aa <grid_port_receive_decode+0x19e>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    936c:	2306      	movs	r3, #6
    936e:	75bb      	strb	r3, [r7, #22]
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    9370:	23c8      	movs	r3, #200	; 0xc8
    9372:	9301      	str	r3, [sp, #4]
    9374:	2302      	movs	r3, #2
    9376:	9300      	str	r3, [sp, #0]
    9378:	2332      	movs	r3, #50	; 0x32
    937a:	461a      	mov	r2, r3
    937c:	4619      	mov	r1, r3
    937e:	4836      	ldr	r0, [pc, #216]	; (9458 <grid_port_receive_decode+0x34c>)
    9380:	4e36      	ldr	r6, [pc, #216]	; (945c <grid_port_receive_decode+0x350>)
    9382:	47b0      	blx	r6
				uint32_t response_length = strlen(response);
    9384:	f107 0014 	add.w	r0, r7, #20
    9388:	4b46      	ldr	r3, [pc, #280]	; (94a4 <grid_port_receive_decode+0x398>)
    938a:	4798      	blx	r3
    938c:	4606      	mov	r6, r0
				if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    938e:	f504 699b 	add.w	r9, r4, #1240	; 0x4d8
    9392:	b281      	uxth	r1, r0
    9394:	4648      	mov	r0, r9
    9396:	4b3f      	ldr	r3, [pc, #252]	; (9494 <grid_port_receive_decode+0x388>)
    9398:	4798      	blx	r3
    939a:	2800      	cmp	r0, #0
    939c:	f43f aefa 	beq.w	9194 <grid_port_receive_decode+0x88>
					uint8_t checksum = grid_msg_get_checksum(response, response_length);
    93a0:	4631      	mov	r1, r6
    93a2:	f107 0014 	add.w	r0, r7, #20
    93a6:	4b30      	ldr	r3, [pc, #192]	; (9468 <grid_port_receive_decode+0x35c>)
    93a8:	4798      	blx	r3
					grid_msg_set_checksum(response, response_length, checksum);
    93aa:	b2c2      	uxtb	r2, r0
    93ac:	4631      	mov	r1, r6
    93ae:	f107 0014 	add.w	r0, r7, #20
    93b2:	4b37      	ldr	r3, [pc, #220]	; (9490 <grid_port_receive_decode+0x384>)
    93b4:	4798      	blx	r3
					for (uint32_t i=0; i<response_length; i++)
    93b6:	b156      	cbz	r6, 93ce <grid_port_receive_decode+0x2c2>
    93b8:	f107 0814 	add.w	r8, r7, #20
    93bc:	4446      	add	r6, r8
						grid_buffer_write_character(&por->tx_buffer, response[i]);
    93be:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 94ac <grid_port_receive_decode+0x3a0>
    93c2:	f818 1b01 	ldrb.w	r1, [r8], #1
    93c6:	4648      	mov	r0, r9
    93c8:	47d0      	blx	sl
					for (uint32_t i=0; i<response_length; i++)
    93ca:	4546      	cmp	r6, r8
    93cc:	d1f9      	bne.n	93c2 <grid_port_receive_decode+0x2b6>
					grid_buffer_write_acknowledge(&por->tx_buffer);
    93ce:	4648      	mov	r0, r9
    93d0:	4b31      	ldr	r3, [pc, #196]	; (9498 <grid_port_receive_decode+0x38c>)
    93d2:	4798      	blx	r3
    93d4:	e6de      	b.n	9194 <grid_port_receive_decode+0x88>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    93d6:	78b3      	ldrb	r3, [r6, #2]
    93d8:	2b06      	cmp	r3, #6
    93da:	d032      	beq.n	9442 <grid_port_receive_decode+0x336>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    93dc:	2b15      	cmp	r3, #21
    93de:	d067      	beq.n	94b0 <grid_port_receive_decode+0x3a4>
				else if (message[2] == GRID_MSG_BELL){
    93e0:	2b07      	cmp	r3, #7
    93e2:	f47f aed7 	bne.w	9194 <grid_port_receive_decode+0x88>
					if (por->partner_status == 0){
    93e6:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    93ea:	2b00      	cmp	r3, #0
    93ec:	d16a      	bne.n	94c4 <grid_port_receive_decode+0x3b8>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    93ee:	78f3      	ldrb	r3, [r6, #3]
    93f0:	7a62      	ldrb	r2, [r4, #9]
    93f2:	1a9b      	subs	r3, r3, r2
    93f4:	3306      	adds	r3, #6
    93f6:	425a      	negs	r2, r3
    93f8:	f003 0303 	and.w	r3, r3, #3
    93fc:	f002 0203 	and.w	r2, r2, #3
    9400:	bf58      	it	pl
    9402:	4253      	negpl	r3, r2
    9404:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9408:	f1a5 000c 	sub.w	r0, r5, #12
    940c:	2200      	movs	r2, #0
    940e:	2108      	movs	r1, #8
    9410:	4430      	add	r0, r6
    9412:	4b14      	ldr	r3, [pc, #80]	; (9464 <grid_port_receive_decode+0x358>)
    9414:	4798      	blx	r3
    9416:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    941a:	2301      	movs	r3, #1
    941c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9420:	4e0d      	ldr	r6, [pc, #52]	; (9458 <grid_port_receive_decode+0x34c>)
    9422:	4630      	mov	r0, r6
    9424:	4b20      	ldr	r3, [pc, #128]	; (94a8 <grid_port_receive_decode+0x39c>)
    9426:	4798      	blx	r3
    9428:	b2c0      	uxtb	r0, r0
    942a:	7030      	strb	r0, [r6, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    942c:	23c8      	movs	r3, #200	; 0xc8
    942e:	9301      	str	r3, [sp, #4]
    9430:	2302      	movs	r3, #2
    9432:	9300      	str	r3, [sp, #0]
    9434:	2300      	movs	r3, #0
    9436:	22ff      	movs	r2, #255	; 0xff
    9438:	4619      	mov	r1, r3
    943a:	4630      	mov	r0, r6
    943c:	4e07      	ldr	r6, [pc, #28]	; (945c <grid_port_receive_decode+0x350>)
    943e:	47b0      	blx	r6
    9440:	e6a8      	b.n	9194 <grid_port_receive_decode+0x88>
					grid_sys_alert_set_alert(&grid_sys_state, 30, 30, 30, 0, 250); // LIGHT WHITE PULSE
    9442:	23fa      	movs	r3, #250	; 0xfa
    9444:	9301      	str	r3, [sp, #4]
    9446:	2300      	movs	r3, #0
    9448:	9300      	str	r3, [sp, #0]
    944a:	231e      	movs	r3, #30
    944c:	461a      	mov	r2, r3
    944e:	4619      	mov	r1, r3
    9450:	4801      	ldr	r0, [pc, #4]	; (9458 <grid_port_receive_decode+0x34c>)
    9452:	4e02      	ldr	r6, [pc, #8]	; (945c <grid_port_receive_decode+0x350>)
    9454:	47b0      	blx	r6
    9456:	e69d      	b.n	9194 <grid_port_receive_decode+0x88>
    9458:	20001ca4 	.word	0x20001ca4
    945c:	000038ad 	.word	0x000038ad
    9460:	1b4e81b5 	.word	0x1b4e81b5
    9464:	00003901 	.word	0x00003901
    9468:	00003b41 	.word	0x00003b41
    946c:	00003b71 	.word	0x00003b71
    9470:	00003bd1 	.word	0x00003bd1
    9474:	00003b91 	.word	0x00003b91
    9478:	00003bb1 	.word	0x00003bb1
    947c:	00003bf1 	.word	0x00003bf1
    9480:	00003c05 	.word	0x00003c05
    9484:	00003c19 	.word	0x00003c19
    9488:	00003c2d 	.word	0x00003c2d
    948c:	00003c41 	.word	0x00003c41
    9490:	00003b5d 	.word	0x00003b5d
    9494:	000011a1 	.word	0x000011a1
    9498:	000011ed 	.word	0x000011ed
    949c:	000014e9 	.word	0x000014e9
    94a0:	00003c6b 	.word	0x00003c6b
    94a4:	0000b771 	.word	0x0000b771
    94a8:	00003841 	.word	0x00003841
    94ac:	000011d1 	.word	0x000011d1
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    94b0:	23fa      	movs	r3, #250	; 0xfa
    94b2:	9301      	str	r3, [sp, #4]
    94b4:	2200      	movs	r2, #0
    94b6:	9200      	str	r2, [sp, #0]
    94b8:	4613      	mov	r3, r2
    94ba:	2132      	movs	r1, #50	; 0x32
    94bc:	4820      	ldr	r0, [pc, #128]	; (9540 <grid_port_receive_decode+0x434>)
    94be:	4e21      	ldr	r6, [pc, #132]	; (9544 <grid_port_receive_decode+0x438>)
    94c0:	47b0      	blx	r6
    94c2:	e667      	b.n	9194 <grid_port_receive_decode+0x88>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    94c4:	78f3      	ldrb	r3, [r6, #3]
    94c6:	7a62      	ldrb	r2, [r4, #9]
    94c8:	1a9b      	subs	r3, r3, r2
    94ca:	3306      	adds	r3, #6
    94cc:	425a      	negs	r2, r3
    94ce:	f003 0303 	and.w	r3, r3, #3
    94d2:	f002 0203 	and.w	r2, r2, #3
    94d6:	bf58      	it	pl
    94d8:	4253      	negpl	r3, r2
    94da:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    94de:	4543      	cmp	r3, r8
    94e0:	bf14      	ite	ne
    94e2:	f04f 0800 	movne.w	r8, #0
    94e6:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    94ea:	f1a5 000c 	sub.w	r0, r5, #12
    94ee:	2200      	movs	r2, #0
    94f0:	2108      	movs	r1, #8
    94f2:	4430      	add	r0, r6
    94f4:	4b14      	ldr	r3, [pc, #80]	; (9548 <grid_port_receive_decode+0x43c>)
    94f6:	4798      	blx	r3
    94f8:	60b8      	str	r0, [r7, #8]
						volatile uint32_t debug2 = por->partner_hwcfg;
    94fa:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    94fe:	60fb      	str	r3, [r7, #12]
						validator &= (por->partner_hwcfg == debug);									
    9500:	68ba      	ldr	r2, [r7, #8]
						if (validator == 0){
    9502:	4293      	cmp	r3, r2
    9504:	d103      	bne.n	950e <grid_port_receive_decode+0x402>
    9506:	f1b8 0f00 	cmp.w	r8, #0
    950a:	f47f ae43 	bne.w	9194 <grid_port_receive_decode+0x88>
							por->partner_status = 0;	
    950e:	2300      	movs	r3, #0
    9510:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9514:	23c8      	movs	r3, #200	; 0xc8
    9516:	9301      	str	r3, [sp, #4]
    9518:	2302      	movs	r3, #2
    951a:	9300      	str	r3, [sp, #0]
    951c:	23ff      	movs	r3, #255	; 0xff
    951e:	461a      	mov	r2, r3
    9520:	4619      	mov	r1, r3
    9522:	4807      	ldr	r0, [pc, #28]	; (9540 <grid_port_receive_decode+0x434>)
    9524:	4e07      	ldr	r6, [pc, #28]	; (9544 <grid_port_receive_decode+0x438>)
    9526:	47b0      	blx	r6
    9528:	e634      	b.n	9194 <grid_port_receive_decode+0x88>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    952a:	23c8      	movs	r3, #200	; 0xc8
    952c:	9301      	str	r3, [sp, #4]
    952e:	2301      	movs	r3, #1
    9530:	9300      	str	r3, [sp, #0]
    9532:	2300      	movs	r3, #0
    9534:	461a      	mov	r2, r3
    9536:	2114      	movs	r1, #20
    9538:	4801      	ldr	r0, [pc, #4]	; (9540 <grid_port_receive_decode+0x434>)
    953a:	4e02      	ldr	r6, [pc, #8]	; (9544 <grid_port_receive_decode+0x438>)
    953c:	47b0      	blx	r6
    953e:	e629      	b.n	9194 <grid_port_receive_decode+0x88>
    9540:	20001ca4 	.word	0x20001ca4
    9544:	000038ad 	.word	0x000038ad
    9548:	00003901 	.word	0x00003901

0000954c <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    954c:	b510      	push	{r4, lr}
    954e:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    9550:	4b08      	ldr	r3, [pc, #32]	; (9574 <grid_port_receive_complete_task+0x28>)
    9552:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9554:	69e3      	ldr	r3, [r4, #28]
    9556:	b163      	cbz	r3, 9572 <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9558:	6a61      	ldr	r1, [r4, #36]	; 0x24
    955a:	6a22      	ldr	r2, [r4, #32]
    955c:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    955e:	bf34      	ite	cc
    9560:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9562:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    9566:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    9568:	4620      	mov	r0, r4
    956a:	4b03      	ldr	r3, [pc, #12]	; (9578 <grid_port_receive_complete_task+0x2c>)
    956c:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    956e:	2300      	movs	r3, #0
    9570:	61e3      	str	r3, [r4, #28]
    9572:	bd10      	pop	{r4, pc}
    9574:	00009069 	.word	0x00009069
    9578:	0000910d 	.word	0x0000910d

0000957c <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    957c:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20; //was /5: 200ms
    957e:	4c0d      	ldr	r4, [pc, #52]	; (95b4 <init_timer+0x38>)
    9580:	f240 3333 	movw	r3, #819	; 0x333
    9584:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    9586:	4b0c      	ldr	r3, [pc, #48]	; (95b8 <init_timer+0x3c>)
    9588:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    958a:	2301      	movs	r3, #1
    958c:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_realtime.interval = 1;
    958e:	6223      	str	r3, [r4, #32]
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    9590:	4a0a      	ldr	r2, [pc, #40]	; (95bc <init_timer+0x40>)
    9592:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    9594:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    9598:	4d09      	ldr	r5, [pc, #36]	; (95c0 <init_timer+0x44>)
    959a:	1d21      	adds	r1, r4, #4
    959c:	4628      	mov	r0, r5
    959e:	4e09      	ldr	r6, [pc, #36]	; (95c4 <init_timer+0x48>)
    95a0:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    95a2:	f104 0118 	add.w	r1, r4, #24
    95a6:	4628      	mov	r0, r5
    95a8:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    95aa:	4628      	mov	r0, r5
    95ac:	4b06      	ldr	r3, [pc, #24]	; (95c8 <init_timer+0x4c>)
    95ae:	4798      	blx	r3
    95b0:	bd70      	pop	{r4, r5, r6, pc}
    95b2:	bf00      	nop
    95b4:	20000d7c 	.word	0x20000d7c
    95b8:	0000903d 	.word	0x0000903d
    95bc:	00009055 	.word	0x00009055
    95c0:	20000eec 	.word	0x20000eec
    95c4:	00004ced 	.word	0x00004ced
    95c8:	00004cad 	.word	0x00004cad

000095cc <main>:




int main(void)
{
    95cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95d0:	b087      	sub	sp, #28

	atmel_start_init();	
    95d2:	4b6e      	ldr	r3, [pc, #440]	; (978c <main+0x1c0>)
    95d4:	4798      	blx	r3
	
	uint32_t flash_length = flash_get_total_pages(&FLASH_0);
    95d6:	4c6e      	ldr	r4, [pc, #440]	; (9790 <main+0x1c4>)
    95d8:	4620      	mov	r0, r4
    95da:	4b6e      	ldr	r3, [pc, #440]	; (9794 <main+0x1c8>)
    95dc:	4798      	blx	r3
	
	flash_lock(&FLASH_0, 0x00000000, flash_length);
    95de:	4602      	mov	r2, r0
    95e0:	2100      	movs	r1, #0
    95e2:	4620      	mov	r0, r4
    95e4:	4b6c      	ldr	r3, [pc, #432]	; (9798 <main+0x1cc>)
    95e6:	4798      	blx	r3
 * \retval 0  Completed sucessfully.
 * \retval -1 Always on, can't disable.
 */
static inline int32_t wdt_disable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    95e8:	4c6c      	ldr	r4, [pc, #432]	; (979c <main+0x1d0>)
    95ea:	6820      	ldr	r0, [r4, #0]
    95ec:	229b      	movs	r2, #155	; 0x9b
    95ee:	496c      	ldr	r1, [pc, #432]	; (97a0 <main+0x1d4>)
    95f0:	3000      	adds	r0, #0
    95f2:	bf18      	it	ne
    95f4:	2001      	movne	r0, #1
    95f6:	4b6b      	ldr	r3, [pc, #428]	; (97a4 <main+0x1d8>)
    95f8:	4798      	blx	r3

	return _wdt_disable(&wdt->dev);
    95fa:	4620      	mov	r0, r4
    95fc:	4b6a      	ldr	r3, [pc, #424]	; (97a8 <main+0x1dc>)
    95fe:	4798      	blx	r3


	
	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    9600:	4b6a      	ldr	r3, [pc, #424]	; (97ac <main+0x1e0>)
    9602:	4798      	blx	r3


	composite_device_start();
    9604:	4b6a      	ldr	r3, [pc, #424]	; (97b0 <main+0x1e4>)
    9606:	4798      	blx	r3

	grid_module_common_init();
    9608:	4b6a      	ldr	r3, [pc, #424]	; (97b4 <main+0x1e8>)
    960a:	4798      	blx	r3
	uint32_t loopstart = 0;

	

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    960c:	4b6a      	ldr	r3, [pc, #424]	; (97b8 <main+0x1ec>)
    960e:	4798      	blx	r3
    9610:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9612:	2600      	movs	r6, #0
    9614:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 9804 <main+0x238>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9618:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 97ec <main+0x220>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    961c:	e003      	b.n	9626 <main+0x5a>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    961e:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    9622:	d01c      	beq.n	965e <main+0x92>
    9624:	3601      	adds	r6, #1
    9626:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9628:	4864      	ldr	r0, [pc, #400]	; (97bc <main+0x1f0>)
    962a:	47c8      	blx	r9
    962c:	42a8      	cmp	r0, r5
    962e:	d8f6      	bhi.n	961e <main+0x52>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9630:	4b63      	ldr	r3, [pc, #396]	; (97c0 <main+0x1f4>)
    9632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9636:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    963a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    963e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    9642:	4960      	ldr	r1, [pc, #384]	; (97c4 <main+0x1f8>)
    9644:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9648:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PIN_GRID_SYNC_1, false);	
	
	init_timer();
    964c:	4b5e      	ldr	r3, [pc, #376]	; (97c8 <main+0x1fc>)
    964e:	4798      	blx	r3
	
	uint8_t loopcounter = 0;

	
	
	grid_sys_bank_select(&grid_sys_state, 0);
    9650:	2100      	movs	r1, #0
    9652:	485e      	ldr	r0, [pc, #376]	; (97cc <main+0x200>)
    9654:	4b5e      	ldr	r3, [pc, #376]	; (97d0 <main+0x204>)
    9656:	4798      	blx	r3
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9658:	f8df 9160 	ldr.w	r9, [pc, #352]	; 97bc <main+0x1f0>
    965c:	e0eb      	b.n	9836 <main+0x26a>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    965e:	27ff      	movs	r7, #255	; 0xff
    9660:	9701      	str	r7, [sp, #4]
    9662:	2400      	movs	r4, #0
    9664:	9400      	str	r4, [sp, #0]
    9666:	4623      	mov	r3, r4
    9668:	4622      	mov	r2, r4
    966a:	4629      	mov	r1, r5
    966c:	4853      	ldr	r0, [pc, #332]	; (97bc <main+0x1f0>)
    966e:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    9670:	9401      	str	r4, [sp, #4]
    9672:	2305      	movs	r3, #5
    9674:	9300      	str	r3, [sp, #0]
    9676:	4623      	mov	r3, r4
    9678:	4622      	mov	r2, r4
    967a:	4629      	mov	r1, r5
    967c:	484f      	ldr	r0, [pc, #316]	; (97bc <main+0x1f0>)
    967e:	f8df b180 	ldr.w	fp, [pc, #384]	; 9800 <main+0x234>
    9682:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    9684:	9401      	str	r4, [sp, #4]
    9686:	9400      	str	r4, [sp, #0]
    9688:	463b      	mov	r3, r7
    968a:	4622      	mov	r2, r4
    968c:	4629      	mov	r1, r5
    968e:	484b      	ldr	r0, [pc, #300]	; (97bc <main+0x1f0>)
    9690:	4c50      	ldr	r4, [pc, #320]	; (97d4 <main+0x208>)
    9692:	47a0      	blx	r4
    9694:	e7c6      	b.n	9624 <main+0x58>
				grid_sys_ping(&GRID_PORT_N);
    9696:	4850      	ldr	r0, [pc, #320]	; (97d8 <main+0x20c>)
    9698:	4b50      	ldr	r3, [pc, #320]	; (97dc <main+0x210>)
    969a:	4798      	blx	r3
    969c:	e0d8      	b.n	9850 <main+0x284>
				grid_sys_ping(&GRID_PORT_E);
    969e:	4850      	ldr	r0, [pc, #320]	; (97e0 <main+0x214>)
    96a0:	4b4e      	ldr	r3, [pc, #312]	; (97dc <main+0x210>)
    96a2:	4798      	blx	r3
    96a4:	e0db      	b.n	985e <main+0x292>
				grid_sys_ping(&GRID_PORT_S);
    96a6:	484f      	ldr	r0, [pc, #316]	; (97e4 <main+0x218>)
    96a8:	4b4c      	ldr	r3, [pc, #304]	; (97dc <main+0x210>)
    96aa:	4798      	blx	r3
    96ac:	e0de      	b.n	986c <main+0x2a0>
				grid_sys_ping(&GRID_PORT_W);
    96ae:	484e      	ldr	r0, [pc, #312]	; (97e8 <main+0x21c>)
    96b0:	4b4a      	ldr	r3, [pc, #296]	; (97dc <main+0x210>)
    96b2:	4798      	blx	r3
    96b4:	e0e1      	b.n	987a <main+0x2ae>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    96b6:	2300      	movs	r3, #0
    96b8:	9301      	str	r3, [sp, #4]
    96ba:	9300      	str	r3, [sp, #0]
    96bc:	2201      	movs	r2, #1
    96be:	4621      	mov	r1, r4
    96c0:	4648      	mov	r0, r9
    96c2:	4d4a      	ldr	r5, [pc, #296]	; (97ec <main+0x220>)
    96c4:	47a8      	blx	r5
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    96c6:	4f4a      	ldr	r7, [pc, #296]	; (97f0 <main+0x224>)
    96c8:	9803      	ldr	r0, [sp, #12]
    96ca:	47b8      	blx	r7
    96cc:	4e49      	ldr	r6, [pc, #292]	; (97f4 <main+0x228>)
    96ce:	2200      	movs	r2, #0
    96d0:	4b49      	ldr	r3, [pc, #292]	; (97f8 <main+0x22c>)
    96d2:	47b0      	blx	r6
    96d4:	4d49      	ldr	r5, [pc, #292]	; (97fc <main+0x230>)
    96d6:	47a8      	blx	r5
    96d8:	fa5f fb80 	uxtb.w	fp, r0
    96dc:	9804      	ldr	r0, [sp, #16]
    96de:	47b8      	blx	r7
    96e0:	2200      	movs	r2, #0
    96e2:	4b45      	ldr	r3, [pc, #276]	; (97f8 <main+0x22c>)
    96e4:	47b0      	blx	r6
    96e6:	47a8      	blx	r5
    96e8:	b2c0      	uxtb	r0, r0
    96ea:	9001      	str	r0, [sp, #4]
    96ec:	4650      	mov	r0, sl
    96ee:	47b8      	blx	r7
    96f0:	2200      	movs	r2, #0
    96f2:	4b41      	ldr	r3, [pc, #260]	; (97f8 <main+0x22c>)
    96f4:	47b0      	blx	r6
    96f6:	47a8      	blx	r5
    96f8:	b2c0      	uxtb	r0, r0
    96fa:	9000      	str	r0, [sp, #0]
    96fc:	465b      	mov	r3, fp
    96fe:	2201      	movs	r2, #1
    9700:	4621      	mov	r1, r4
    9702:	4648      	mov	r0, r9
    9704:	4d3e      	ldr	r5, [pc, #248]	; (9800 <main+0x234>)
    9706:	47a8      	blx	r5
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    9708:	9a04      	ldr	r2, [sp, #16]
    970a:	9201      	str	r2, [sp, #4]
    970c:	f8cd a000 	str.w	sl, [sp]
    9710:	9b03      	ldr	r3, [sp, #12]
    9712:	2201      	movs	r2, #1
    9714:	4621      	mov	r1, r4
    9716:	4648      	mov	r0, r9
    9718:	4c2e      	ldr	r4, [pc, #184]	; (97d4 <main+0x208>)
    971a:	47a0      	blx	r4
    971c:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9720:	4648      	mov	r0, r9
    9722:	4b38      	ldr	r3, [pc, #224]	; (9804 <main+0x238>)
    9724:	4798      	blx	r3
    9726:	f108 0801 	add.w	r8, r8, #1
    972a:	4284      	cmp	r4, r0
    972c:	d3c3      	bcc.n	96b6 <main+0xea>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    972e:	4827      	ldr	r0, [pc, #156]	; (97cc <main+0x200>)
    9730:	4b35      	ldr	r3, [pc, #212]	; (9808 <main+0x23c>)
    9732:	4798      	blx	r3
    9734:	4605      	mov	r5, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9736:	f899 3001 	ldrb.w	r3, [r9, #1]
    973a:	b16b      	cbz	r3, 9758 <main+0x18c>
    973c:	2400      	movs	r4, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    973e:	2701      	movs	r7, #1
    9740:	4e32      	ldr	r6, [pc, #200]	; (980c <main+0x240>)
    9742:	462b      	mov	r3, r5
    9744:	463a      	mov	r2, r7
    9746:	4621      	mov	r1, r4
    9748:	4648      	mov	r0, r9
    974a:	47b0      	blx	r6
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    974c:	3401      	adds	r4, #1
    974e:	b2e4      	uxtb	r4, r4
    9750:	f899 3001 	ldrb.w	r3, [r9, #1]
    9754:	42a3      	cmp	r3, r4
    9756:	d8f4      	bhi.n	9742 <main+0x176>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9758:	4c19      	ldr	r4, [pc, #100]	; (97c0 <main+0x1f4>)
    975a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    975e:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
						

		gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		
	
		grid_led_tick(&grid_led_state);
    9762:	4648      	mov	r0, r9
    9764:	4b2a      	ldr	r3, [pc, #168]	; (9810 <main+0x244>)
    9766:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9768:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
		gpio_set_pin_level(PIN_GRID_SYNC_1, false);
			
			
		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    976c:	4c29      	ldr	r4, [pc, #164]	; (9814 <main+0x248>)
    976e:	4648      	mov	r0, r9
    9770:	47a0      	blx	r4
    9772:	2801      	cmp	r0, #1
    9774:	d1fb      	bne.n	976e <main+0x1a2>
			
		}
		
		grid_led_render_all(&grid_led_state);
    9776:	4648      	mov	r0, r9
    9778:	4b27      	ldr	r3, [pc, #156]	; (9818 <main+0x24c>)
    977a:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    977c:	4648      	mov	r0, r9
    977e:	4b27      	ldr	r3, [pc, #156]	; (981c <main+0x250>)
    9780:	4798      	blx	r3
	
	
	

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9782:	4c27      	ldr	r4, [pc, #156]	; (9820 <main+0x254>)
			
			delay_us(10);
    9784:	4d27      	ldr	r5, [pc, #156]	; (9824 <main+0x258>)
    9786:	9e05      	ldr	r6, [sp, #20]
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9788:	e050      	b.n	982c <main+0x260>
    978a:	bf00      	nop
    978c:	000002d1 	.word	0x000002d1
    9790:	20000f2c 	.word	0x20000f2c
    9794:	00004541 	.word	0x00004541
    9798:	00004495 	.word	0x00004495
    979c:	20001070 	.word	0x20001070
    97a0:	0000be84 	.word	0x0000be84
    97a4:	00005645 	.word	0x00005645
    97a8:	00008fed 	.word	0x00008fed
    97ac:	0000a38d 	.word	0x0000a38d
    97b0:	0000ad35 	.word	0x0000ad35
    97b4:	0000210d 	.word	0x0000210d
    97b8:	00003979 	.word	0x00003979
    97bc:	200035b0 	.word	0x200035b0
    97c0:	41008000 	.word	0x41008000
    97c4:	c0000004 	.word	0xc0000004
    97c8:	0000957d 	.word	0x0000957d
    97cc:	20001ca4 	.word	0x20001ca4
    97d0:	00003a69 	.word	0x00003a69
    97d4:	00001cbb 	.word	0x00001cbb
    97d8:	20001238 	.word	0x20001238
    97dc:	00003c81 	.word	0x00003c81
    97e0:	2000309c 	.word	0x2000309c
    97e4:	20002678 	.word	0x20002678
    97e8:	20002154 	.word	0x20002154
    97ec:	00001c29 	.word	0x00001c29
    97f0:	0000b001 	.word	0x0000b001
    97f4:	0000b0cd 	.word	0x0000b0cd
    97f8:	3fe00000 	.word	0x3fe00000
    97fc:	0000b4f1 	.word	0x0000b4f1
    9800:	00001c71 	.word	0x00001c71
    9804:	00001be1 	.word	0x00001be1
    9808:	00003865 	.word	0x00003865
    980c:	00001d05 	.word	0x00001d05
    9810:	00001be5 	.word	0x00001be5
    9814:	00002101 	.word	0x00002101
    9818:	00001f1d 	.word	0x00001f1d
    981c:	000020d5 	.word	0x000020d5
    9820:	00003845 	.word	0x00003845
    9824:	000043b5 	.word	0x000043b5
			delay_us(10);
    9828:	200a      	movs	r0, #10
    982a:	47a8      	blx	r5
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    982c:	4631      	mov	r1, r6
    982e:	483a      	ldr	r0, [pc, #232]	; (9918 <main+0x34c>)
    9830:	47a0      	blx	r4
    9832:	280f      	cmp	r0, #15
    9834:	d9f8      	bls.n	9828 <main+0x25c>
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    9836:	4838      	ldr	r0, [pc, #224]	; (9918 <main+0x34c>)
    9838:	4b38      	ldr	r3, [pc, #224]	; (991c <main+0x350>)
    983a:	4798      	blx	r3
    983c:	9005      	str	r0, [sp, #20]
		if (pingflag_active){
    983e:	4b38      	ldr	r3, [pc, #224]	; (9920 <main+0x354>)
    9840:	785b      	ldrb	r3, [r3, #1]
    9842:	b1eb      	cbz	r3, 9880 <main+0x2b4>
			if (pingflag%4 == 0){
    9844:	4b36      	ldr	r3, [pc, #216]	; (9920 <main+0x354>)
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	f013 0f03 	tst.w	r3, #3
    984c:	f43f af23 	beq.w	9696 <main+0xca>
			if (pingflag%4 == 1){
    9850:	4b33      	ldr	r3, [pc, #204]	; (9920 <main+0x354>)
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	f003 0303 	and.w	r3, r3, #3
    9858:	2b01      	cmp	r3, #1
    985a:	f43f af20 	beq.w	969e <main+0xd2>
			if (pingflag%4 == 2){
    985e:	4b30      	ldr	r3, [pc, #192]	; (9920 <main+0x354>)
    9860:	781b      	ldrb	r3, [r3, #0]
    9862:	f003 0303 	and.w	r3, r3, #3
    9866:	2b02      	cmp	r3, #2
    9868:	f43f af1d 	beq.w	96a6 <main+0xda>
			if (pingflag%4 == 3){
    986c:	4b2c      	ldr	r3, [pc, #176]	; (9920 <main+0x354>)
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	f003 0303 	and.w	r3, r3, #3
    9874:	2b03      	cmp	r3, #3
    9876:	f43f af1a 	beq.w	96ae <main+0xe2>
			pingflag_active = 0;
    987a:	2200      	movs	r2, #0
    987c:	4b28      	ldr	r3, [pc, #160]	; (9920 <main+0x354>)
    987e:	705a      	strb	r2, [r3, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9880:	4828      	ldr	r0, [pc, #160]	; (9924 <main+0x358>)
    9882:	4c29      	ldr	r4, [pc, #164]	; (9928 <main+0x35c>)
    9884:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    9886:	4829      	ldr	r0, [pc, #164]	; (992c <main+0x360>)
    9888:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    988a:	4829      	ldr	r0, [pc, #164]	; (9930 <main+0x364>)
    988c:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    988e:	4829      	ldr	r0, [pc, #164]	; (9934 <main+0x368>)
    9890:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);
    9892:	4d29      	ldr	r5, [pc, #164]	; (9938 <main+0x36c>)
    9894:	4628      	mov	r0, r5
    9896:	4b29      	ldr	r3, [pc, #164]	; (993c <main+0x370>)
    9898:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    989a:	4628      	mov	r0, r5
    989c:	4c28      	ldr	r4, [pc, #160]	; (9940 <main+0x374>)
    989e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    98a0:	4820      	ldr	r0, [pc, #128]	; (9924 <main+0x358>)
    98a2:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    98a4:	4821      	ldr	r0, [pc, #132]	; (992c <main+0x360>)
    98a6:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    98a8:	4821      	ldr	r0, [pc, #132]	; (9930 <main+0x364>)
    98aa:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);						
    98ac:	4821      	ldr	r0, [pc, #132]	; (9934 <main+0x368>)
    98ae:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    98b0:	481c      	ldr	r0, [pc, #112]	; (9924 <main+0x358>)
    98b2:	4c24      	ldr	r4, [pc, #144]	; (9944 <main+0x378>)
    98b4:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    98b6:	481d      	ldr	r0, [pc, #116]	; (992c <main+0x360>)
    98b8:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    98ba:	481d      	ldr	r0, [pc, #116]	; (9930 <main+0x364>)
    98bc:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    98be:	481d      	ldr	r0, [pc, #116]	; (9934 <main+0x368>)
    98c0:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    98c2:	4821      	ldr	r0, [pc, #132]	; (9948 <main+0x37c>)
    98c4:	4b21      	ldr	r3, [pc, #132]	; (994c <main+0x380>)
    98c6:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    98c8:	4628      	mov	r0, r5
    98ca:	4b21      	ldr	r3, [pc, #132]	; (9950 <main+0x384>)
    98cc:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    98ce:	4b12      	ldr	r3, [pc, #72]	; (9918 <main+0x34c>)
    98d0:	889b      	ldrh	r3, [r3, #4]
    98d2:	b29b      	uxth	r3, r3
    98d4:	2b00      	cmp	r3, #0
    98d6:	f43f af3f 	beq.w	9758 <main+0x18c>
			grid_sys_state.alert_state--;
    98da:	4b0f      	ldr	r3, [pc, #60]	; (9918 <main+0x34c>)
    98dc:	889b      	ldrh	r3, [r3, #4]
    98de:	3b01      	subs	r3, #1
    98e0:	b29b      	uxth	r3, r3
    98e2:	4a0d      	ldr	r2, [pc, #52]	; (9918 <main+0x34c>)
    98e4:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    98e6:	4610      	mov	r0, r2
    98e8:	4b1a      	ldr	r3, [pc, #104]	; (9954 <main+0x388>)
    98ea:	4798      	blx	r3
    98ec:	2800      	cmp	r0, #0
    98ee:	f43f af1e 	beq.w	972e <main+0x162>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    98f2:	4809      	ldr	r0, [pc, #36]	; (9918 <main+0x34c>)
    98f4:	4b18      	ldr	r3, [pc, #96]	; (9958 <main+0x38c>)
    98f6:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    98f8:	4807      	ldr	r0, [pc, #28]	; (9918 <main+0x34c>)
    98fa:	4b18      	ldr	r3, [pc, #96]	; (995c <main+0x390>)
    98fc:	4798      	blx	r3
    98fe:	9003      	str	r0, [sp, #12]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9900:	4805      	ldr	r0, [pc, #20]	; (9918 <main+0x34c>)
    9902:	4b17      	ldr	r3, [pc, #92]	; (9960 <main+0x394>)
    9904:	4798      	blx	r3
    9906:	4682      	mov	sl, r0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9908:	4803      	ldr	r0, [pc, #12]	; (9918 <main+0x34c>)
    990a:	4b16      	ldr	r3, [pc, #88]	; (9964 <main+0x398>)
    990c:	4798      	blx	r3
    990e:	9004      	str	r0, [sp, #16]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9910:	f04f 0800 	mov.w	r8, #0
    9914:	e702      	b.n	971c <main+0x150>
    9916:	bf00      	nop
    9918:	20001ca4 	.word	0x20001ca4
    991c:	00003841 	.word	0x00003841
    9920:	20000d7c 	.word	0x20000d7c
    9924:	20001238 	.word	0x20001238
    9928:	0000954d 	.word	0x0000954d
    992c:	2000309c 	.word	0x2000309c
    9930:	20002678 	.word	0x20002678
    9934:	20002154 	.word	0x20002154
    9938:	20001788 	.word	0x20001788
    993c:	00003e2d 	.word	0x00003e2d
    9940:	000014e9 	.word	0x000014e9
    9944:	00001afd 	.word	0x00001afd
    9948:	20002b8c 	.word	0x20002b8c
    994c:	0000168d 	.word	0x0000168d
    9950:	00001ab9 	.word	0x00001ab9
    9954:	0000385b 	.word	0x0000385b
    9958:	0000385f 	.word	0x0000385f
    995c:	000038cb 	.word	0x000038cb
    9960:	000038cf 	.word	0x000038cf
    9964:	000038d3 	.word	0x000038d3

00009968 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9968:	b5f0      	push	{r4, r5, r6, r7, lr}
    996a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    996c:	780b      	ldrb	r3, [r1, #0]
    996e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9972:	2c01      	cmp	r4, #1
    9974:	d15e      	bne.n	9a34 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9976:	888c      	ldrh	r4, [r1, #4]
    9978:	4d35      	ldr	r5, [pc, #212]	; (9a50 <cdcdf_acm_req+0xe8>)
    997a:	782d      	ldrb	r5, [r5, #0]
    997c:	42a5      	cmp	r5, r4
    997e:	d003      	beq.n	9988 <cdcdf_acm_req+0x20>
    9980:	4d33      	ldr	r5, [pc, #204]	; (9a50 <cdcdf_acm_req+0xe8>)
    9982:	786d      	ldrb	r5, [r5, #1]
    9984:	42a5      	cmp	r5, r4
    9986:	d158      	bne.n	9a3a <cdcdf_acm_req+0xd2>
    9988:	4616      	mov	r6, r2
    998a:	460c      	mov	r4, r1
    998c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    998e:	f013 0f80 	tst.w	r3, #128	; 0x80
    9992:	d10c      	bne.n	99ae <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9994:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9996:	4b2f      	ldr	r3, [pc, #188]	; (9a54 <cdcdf_acm_req+0xec>)
    9998:	4798      	blx	r3
    999a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    999c:	7863      	ldrb	r3, [r4, #1]
    999e:	2b20      	cmp	r3, #32
    99a0:	d013      	beq.n	99ca <cdcdf_acm_req+0x62>
    99a2:	2b22      	cmp	r3, #34	; 0x22
    99a4:	d032      	beq.n	9a0c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    99a6:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    99aa:	b003      	add	sp, #12
    99ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    99ae:	2a01      	cmp	r2, #1
    99b0:	d046      	beq.n	9a40 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    99b2:	784b      	ldrb	r3, [r1, #1]
    99b4:	2b21      	cmp	r3, #33	; 0x21
    99b6:	d145      	bne.n	9a44 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    99b8:	88cb      	ldrh	r3, [r1, #6]
    99ba:	2b07      	cmp	r3, #7
    99bc:	d145      	bne.n	9a4a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    99be:	2300      	movs	r3, #0
    99c0:	2207      	movs	r2, #7
    99c2:	4925      	ldr	r1, [pc, #148]	; (9a58 <cdcdf_acm_req+0xf0>)
    99c4:	4c25      	ldr	r4, [pc, #148]	; (9a5c <cdcdf_acm_req+0xf4>)
    99c6:	47a0      	blx	r4
    99c8:	e7ef      	b.n	99aa <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    99ca:	2f07      	cmp	r7, #7
    99cc:	d12b      	bne.n	9a26 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    99ce:	b1be      	cbz	r6, 9a00 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    99d0:	6800      	ldr	r0, [r0, #0]
    99d2:	9000      	str	r0, [sp, #0]
    99d4:	888a      	ldrh	r2, [r1, #4]
    99d6:	798b      	ldrb	r3, [r1, #6]
    99d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    99dc:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    99e0:	4b1b      	ldr	r3, [pc, #108]	; (9a50 <cdcdf_acm_req+0xe8>)
    99e2:	691b      	ldr	r3, [r3, #16]
    99e4:	b113      	cbz	r3, 99ec <cdcdf_acm_req+0x84>
    99e6:	4668      	mov	r0, sp
    99e8:	4798      	blx	r3
    99ea:	b1f8      	cbz	r0, 9a2c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    99ec:	4b18      	ldr	r3, [pc, #96]	; (9a50 <cdcdf_acm_req+0xe8>)
    99ee:	aa02      	add	r2, sp, #8
    99f0:	e912 0003 	ldmdb	r2, {r0, r1}
    99f4:	6098      	str	r0, [r3, #8]
    99f6:	8199      	strh	r1, [r3, #12]
    99f8:	0c09      	lsrs	r1, r1, #16
    99fa:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    99fc:	2000      	movs	r0, #0
    99fe:	e7d4      	b.n	99aa <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9a00:	2300      	movs	r3, #0
    9a02:	2207      	movs	r2, #7
    9a04:	4628      	mov	r0, r5
    9a06:	4c15      	ldr	r4, [pc, #84]	; (9a5c <cdcdf_acm_req+0xf4>)
    9a08:	47a0      	blx	r4
    9a0a:	e7ce      	b.n	99aa <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9a0c:	2300      	movs	r3, #0
    9a0e:	461a      	mov	r2, r3
    9a10:	4619      	mov	r1, r3
    9a12:	4618      	mov	r0, r3
    9a14:	4d11      	ldr	r5, [pc, #68]	; (9a5c <cdcdf_acm_req+0xf4>)
    9a16:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9a18:	4b0d      	ldr	r3, [pc, #52]	; (9a50 <cdcdf_acm_req+0xe8>)
    9a1a:	695b      	ldr	r3, [r3, #20]
    9a1c:	b143      	cbz	r3, 9a30 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9a1e:	8860      	ldrh	r0, [r4, #2]
    9a20:	4798      	blx	r3
		return ERR_NONE;
    9a22:	2000      	movs	r0, #0
    9a24:	e7c1      	b.n	99aa <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9a26:	f04f 30ff 	mov.w	r0, #4294967295
    9a2a:	e7be      	b.n	99aa <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9a2c:	2000      	movs	r0, #0
    9a2e:	e7bc      	b.n	99aa <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9a30:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9a32:	e7ba      	b.n	99aa <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9a34:	f06f 0009 	mvn.w	r0, #9
    9a38:	e7b7      	b.n	99aa <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9a3a:	f06f 0009 	mvn.w	r0, #9
    9a3e:	e7b4      	b.n	99aa <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9a40:	2000      	movs	r0, #0
    9a42:	e7b2      	b.n	99aa <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9a44:	f06f 000c 	mvn.w	r0, #12
    9a48:	e7af      	b.n	99aa <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9a4a:	f04f 30ff 	mov.w	r0, #4294967295
    9a4e:	e7ac      	b.n	99aa <cdcdf_acm_req+0x42>
    9a50:	20000dac 	.word	0x20000dac
    9a54:	0000aab1 	.word	0x0000aab1
    9a58:	20000db4 	.word	0x20000db4
    9a5c:	0000a58d 	.word	0x0000a58d

00009a60 <cdcdf_acm_ctrl>:
{
    9a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a64:	b083      	sub	sp, #12
    9a66:	4616      	mov	r6, r2
	switch (ctrl) {
    9a68:	2901      	cmp	r1, #1
    9a6a:	d066      	beq.n	9b3a <cdcdf_acm_ctrl+0xda>
    9a6c:	b141      	cbz	r1, 9a80 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9a6e:	2902      	cmp	r1, #2
    9a70:	bf0c      	ite	eq
    9a72:	f06f 001a 	mvneq.w	r0, #26
    9a76:	f06f 000c 	mvnne.w	r0, #12
}
    9a7a:	b003      	add	sp, #12
    9a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9a80:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9a84:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9a86:	2800      	cmp	r0, #0
    9a88:	f000 8085 	beq.w	9b96 <cdcdf_acm_ctrl+0x136>
    9a8c:	f10a 3bff 	add.w	fp, sl, #4294967295
    9a90:	f10a 0301 	add.w	r3, sl, #1
    9a94:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9a96:	4f46      	ldr	r7, [pc, #280]	; (9bb0 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9a98:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9bc0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9a9c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9bc4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9aa0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9aa2:	7943      	ldrb	r3, [r0, #5]
    9aa4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9aa8:	2b02      	cmp	r3, #2
    9aaa:	d002      	beq.n	9ab2 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9aac:	f06f 0009 	mvn.w	r0, #9
    9ab0:	e7e3      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
    9ab2:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9ab6:	f89b 3000 	ldrb.w	r3, [fp]
    9aba:	429a      	cmp	r2, r3
    9abc:	d06e      	beq.n	9b9c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9abe:	2bff      	cmp	r3, #255	; 0xff
    9ac0:	d16f      	bne.n	9ba2 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9ac2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9ac6:	2205      	movs	r2, #5
    9ac8:	6871      	ldr	r1, [r6, #4]
    9aca:	4b3a      	ldr	r3, [pc, #232]	; (9bb4 <cdcdf_acm_ctrl+0x154>)
    9acc:	4798      	blx	r3
		while (NULL != ep) {
    9ace:	4604      	mov	r4, r0
    9ad0:	b1f8      	cbz	r0, 9b12 <cdcdf_acm_ctrl+0xb2>
    9ad2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9ad6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9ad8:	7963      	ldrb	r3, [r4, #5]
    9ada:	7922      	ldrb	r2, [r4, #4]
    9adc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9ae0:	b292      	uxth	r2, r2
    9ae2:	78e1      	ldrb	r1, [r4, #3]
    9ae4:	4628      	mov	r0, r5
    9ae6:	47b8      	blx	r7
    9ae8:	2800      	cmp	r0, #0
    9aea:	d15d      	bne.n	9ba8 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9aec:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9af0:	bf14      	ite	ne
    9af2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9af6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9afa:	4628      	mov	r0, r5
    9afc:	47c8      	blx	r9
			desc->sod = ep;
    9afe:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9b00:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9b02:	6871      	ldr	r1, [r6, #4]
    9b04:	4420      	add	r0, r4
    9b06:	47c0      	blx	r8
		while (NULL != ep) {
    9b08:	4604      	mov	r4, r0
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d1e3      	bne.n	9ad6 <cdcdf_acm_ctrl+0x76>
    9b0e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9b12:	6833      	ldr	r3, [r6, #0]
    9b14:	7818      	ldrb	r0, [r3, #0]
    9b16:	2204      	movs	r2, #4
    9b18:	6871      	ldr	r1, [r6, #4]
    9b1a:	4418      	add	r0, r3
    9b1c:	4b25      	ldr	r3, [pc, #148]	; (9bb4 <cdcdf_acm_ctrl+0x154>)
    9b1e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9b20:	9b00      	ldr	r3, [sp, #0]
    9b22:	459b      	cmp	fp, r3
    9b24:	d004      	beq.n	9b30 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9b26:	2800      	cmp	r0, #0
    9b28:	d1ba      	bne.n	9aa0 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9b2a:	f06f 0009 	mvn.w	r0, #9
    9b2e:	e7a4      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9b30:	2201      	movs	r2, #1
    9b32:	4b21      	ldr	r3, [pc, #132]	; (9bb8 <cdcdf_acm_ctrl+0x158>)
    9b34:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9b36:	2000      	movs	r0, #0
    9b38:	e79f      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9b3a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9b3c:	b142      	cbz	r2, 9b50 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9b3e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9b40:	795b      	ldrb	r3, [r3, #5]
    9b42:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9b46:	2b02      	cmp	r3, #2
    9b48:	d002      	beq.n	9b50 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9b4a:	f06f 0009 	mvn.w	r0, #9
    9b4e:	e794      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9b50:	7823      	ldrb	r3, [r4, #0]
    9b52:	2bff      	cmp	r3, #255	; 0xff
    9b54:	d008      	beq.n	9b68 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9b56:	23ff      	movs	r3, #255	; 0xff
    9b58:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9b5a:	78a0      	ldrb	r0, [r4, #2]
    9b5c:	4298      	cmp	r0, r3
    9b5e:	d003      	beq.n	9b68 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9b60:	4b16      	ldr	r3, [pc, #88]	; (9bbc <cdcdf_acm_ctrl+0x15c>)
    9b62:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9b64:	23ff      	movs	r3, #255	; 0xff
    9b66:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9b68:	7863      	ldrb	r3, [r4, #1]
    9b6a:	2bff      	cmp	r3, #255	; 0xff
    9b6c:	d008      	beq.n	9b80 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    9b6e:	23ff      	movs	r3, #255	; 0xff
    9b70:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    9b72:	78e0      	ldrb	r0, [r4, #3]
    9b74:	4298      	cmp	r0, r3
    9b76:	d003      	beq.n	9b80 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9b78:	4b10      	ldr	r3, [pc, #64]	; (9bbc <cdcdf_acm_ctrl+0x15c>)
    9b7a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9b7c:	23ff      	movs	r3, #255	; 0xff
    9b7e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    9b80:	7920      	ldrb	r0, [r4, #4]
    9b82:	28ff      	cmp	r0, #255	; 0xff
    9b84:	d003      	beq.n	9b8e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    9b86:	4b0d      	ldr	r3, [pc, #52]	; (9bbc <cdcdf_acm_ctrl+0x15c>)
    9b88:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9b8a:	23ff      	movs	r3, #255	; 0xff
    9b8c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    9b8e:	2000      	movs	r0, #0
    9b90:	4b09      	ldr	r3, [pc, #36]	; (9bb8 <cdcdf_acm_ctrl+0x158>)
    9b92:	7158      	strb	r0, [r3, #5]
    9b94:	e771      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    9b96:	f06f 0009 	mvn.w	r0, #9
    9b9a:	e76e      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    9b9c:	f06f 0011 	mvn.w	r0, #17
    9ba0:	e76b      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    9ba2:	f06f 001b 	mvn.w	r0, #27
    9ba6:	e768      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9ba8:	f06f 0013 	mvn.w	r0, #19
    9bac:	e765      	b.n	9a7a <cdcdf_acm_ctrl+0x1a>
    9bae:	bf00      	nop
    9bb0:	00005391 	.word	0x00005391
    9bb4:	0000aad1 	.word	0x0000aad1
    9bb8:	20000dac 	.word	0x20000dac
    9bbc:	000053f9 	.word	0x000053f9
    9bc0:	00005425 	.word	0x00005425
    9bc4:	0000ab0b 	.word	0x0000ab0b

00009bc8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9bc8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9bca:	4b0a      	ldr	r3, [pc, #40]	; (9bf4 <cdcdf_acm_init+0x2c>)
    9bcc:	4798      	blx	r3
    9bce:	2801      	cmp	r0, #1
    9bd0:	d80c      	bhi.n	9bec <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9bd2:	4809      	ldr	r0, [pc, #36]	; (9bf8 <cdcdf_acm_init+0x30>)
    9bd4:	4b09      	ldr	r3, [pc, #36]	; (9bfc <cdcdf_acm_init+0x34>)
    9bd6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9bd8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9bda:	3018      	adds	r0, #24
    9bdc:	4b08      	ldr	r3, [pc, #32]	; (9c00 <cdcdf_acm_init+0x38>)
    9bde:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9be0:	4908      	ldr	r1, [pc, #32]	; (9c04 <cdcdf_acm_init+0x3c>)
    9be2:	2001      	movs	r0, #1
    9be4:	4b08      	ldr	r3, [pc, #32]	; (9c08 <cdcdf_acm_init+0x40>)
    9be6:	4798      	blx	r3
	return ERR_NONE;
    9be8:	2000      	movs	r0, #0
    9bea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9bec:	f06f 0010 	mvn.w	r0, #16
}
    9bf0:	bd08      	pop	{r3, pc}
    9bf2:	bf00      	nop
    9bf4:	0000aabd 	.word	0x0000aabd
    9bf8:	20000dac 	.word	0x20000dac
    9bfc:	00009a61 	.word	0x00009a61
    9c00:	0000aa5d 	.word	0x0000aa5d
    9c04:	20000398 	.word	0x20000398
    9c08:	0000a9c9 	.word	0x0000a9c9

00009c0c <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    9c0c:	4b07      	ldr	r3, [pc, #28]	; (9c2c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    9c0e:	795b      	ldrb	r3, [r3, #5]
    9c10:	b143      	cbz	r3, 9c24 <cdcdf_acm_write+0x18>
{
    9c12:	b510      	push	{r4, lr}
    9c14:	460a      	mov	r2, r1
    9c16:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    9c18:	2301      	movs	r3, #1
    9c1a:	4804      	ldr	r0, [pc, #16]	; (9c2c <cdcdf_acm_write+0x20>)
    9c1c:	78c0      	ldrb	r0, [r0, #3]
    9c1e:	4c04      	ldr	r4, [pc, #16]	; (9c30 <cdcdf_acm_write+0x24>)
    9c20:	47a0      	blx	r4
    9c22:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    9c24:	f06f 0010 	mvn.w	r0, #16
    9c28:	4770      	bx	lr
    9c2a:	bf00      	nop
    9c2c:	20000dac 	.word	0x20000dac
    9c30:	0000a58d 	.word	0x0000a58d

00009c34 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9c34:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9c36:	780b      	ldrb	r3, [r1, #0]
    9c38:	2b81      	cmp	r3, #129	; 0x81
    9c3a:	d010      	beq.n	9c5e <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9c3c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9c40:	2b01      	cmp	r3, #1
    9c42:	d13f      	bne.n	9cc4 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    9c44:	888a      	ldrh	r2, [r1, #4]
    9c46:	4b22      	ldr	r3, [pc, #136]	; (9cd0 <hid_keyboard_req+0x9c>)
    9c48:	7b1b      	ldrb	r3, [r3, #12]
    9c4a:	429a      	cmp	r2, r3
    9c4c:	d13d      	bne.n	9cca <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    9c4e:	784b      	ldrb	r3, [r1, #1]
    9c50:	2b03      	cmp	r3, #3
    9c52:	d028      	beq.n	9ca6 <hid_keyboard_req+0x72>
    9c54:	2b0b      	cmp	r3, #11
    9c56:	d02c      	beq.n	9cb2 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9c58:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9c5c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9c5e:	784b      	ldrb	r3, [r1, #1]
    9c60:	2b06      	cmp	r3, #6
    9c62:	d002      	beq.n	9c6a <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    9c64:	f06f 0009 	mvn.w	r0, #9
    9c68:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9c6a:	888a      	ldrh	r2, [r1, #4]
    9c6c:	4b18      	ldr	r3, [pc, #96]	; (9cd0 <hid_keyboard_req+0x9c>)
    9c6e:	7b1b      	ldrb	r3, [r3, #12]
    9c70:	429a      	cmp	r2, r3
    9c72:	d002      	beq.n	9c7a <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    9c74:	f06f 0009 	mvn.w	r0, #9
    9c78:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9c7a:	884b      	ldrh	r3, [r1, #2]
    9c7c:	0a1b      	lsrs	r3, r3, #8
    9c7e:	2b21      	cmp	r3, #33	; 0x21
    9c80:	d004      	beq.n	9c8c <hid_keyboard_req+0x58>
    9c82:	2b22      	cmp	r3, #34	; 0x22
    9c84:	d009      	beq.n	9c9a <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    9c86:	f06f 000c 	mvn.w	r0, #12
    9c8a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    9c8c:	4b10      	ldr	r3, [pc, #64]	; (9cd0 <hid_keyboard_req+0x9c>)
    9c8e:	6819      	ldr	r1, [r3, #0]
    9c90:	2300      	movs	r3, #0
    9c92:	780a      	ldrb	r2, [r1, #0]
    9c94:	4c0f      	ldr	r4, [pc, #60]	; (9cd4 <hid_keyboard_req+0xa0>)
    9c96:	47a0      	blx	r4
    9c98:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    9c9a:	2300      	movs	r3, #0
    9c9c:	223b      	movs	r2, #59	; 0x3b
    9c9e:	490e      	ldr	r1, [pc, #56]	; (9cd8 <hid_keyboard_req+0xa4>)
    9ca0:	4c0c      	ldr	r4, [pc, #48]	; (9cd4 <hid_keyboard_req+0xa0>)
    9ca2:	47a0      	blx	r4
    9ca4:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    9ca6:	2300      	movs	r3, #0
    9ca8:	2201      	movs	r2, #1
    9caa:	490c      	ldr	r1, [pc, #48]	; (9cdc <hid_keyboard_req+0xa8>)
    9cac:	4c09      	ldr	r4, [pc, #36]	; (9cd4 <hid_keyboard_req+0xa0>)
    9cae:	47a0      	blx	r4
    9cb0:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    9cb2:	884a      	ldrh	r2, [r1, #2]
    9cb4:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <hid_keyboard_req+0x9c>)
    9cb6:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    9cb8:	2300      	movs	r3, #0
    9cba:	461a      	mov	r2, r3
    9cbc:	4619      	mov	r1, r3
    9cbe:	4c05      	ldr	r4, [pc, #20]	; (9cd4 <hid_keyboard_req+0xa0>)
    9cc0:	47a0      	blx	r4
    9cc2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9cc4:	f06f 0009 	mvn.w	r0, #9
    9cc8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9cca:	f06f 0009 	mvn.w	r0, #9
    9cce:	bd10      	pop	{r4, pc}
    9cd0:	20000dd0 	.word	0x20000dd0
    9cd4:	0000a58d 	.word	0x0000a58d
    9cd8:	0000c584 	.word	0x0000c584
    9cdc:	20000ddf 	.word	0x20000ddf

00009ce0 <hid_keyboard_ctrl>:
{
    9ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ce4:	4614      	mov	r4, r2
	switch (ctrl) {
    9ce6:	2901      	cmp	r1, #1
    9ce8:	d050      	beq.n	9d8c <hid_keyboard_ctrl+0xac>
    9cea:	b141      	cbz	r1, 9cfe <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9cec:	2902      	cmp	r1, #2
    9cee:	bf0c      	ite	eq
    9cf0:	f06f 051a 	mvneq.w	r5, #26
    9cf4:	f06f 050c 	mvnne.w	r5, #12
}
    9cf8:	4628      	mov	r0, r5
    9cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9cfe:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9d02:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9d04:	2b00      	cmp	r3, #0
    9d06:	d05e      	beq.n	9dc6 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9d08:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9d0a:	795b      	ldrb	r3, [r3, #5]
    9d0c:	2b03      	cmp	r3, #3
    9d0e:	d15d      	bne.n	9dcc <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9d10:	f898 300c 	ldrb.w	r3, [r8, #12]
    9d14:	429a      	cmp	r2, r3
    9d16:	d05c      	beq.n	9dd2 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9d18:	2bff      	cmp	r3, #255	; 0xff
    9d1a:	d15d      	bne.n	9dd8 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9d1c:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9d20:	6823      	ldr	r3, [r4, #0]
    9d22:	7818      	ldrb	r0, [r3, #0]
    9d24:	2221      	movs	r2, #33	; 0x21
    9d26:	6861      	ldr	r1, [r4, #4]
    9d28:	4418      	add	r0, r3
    9d2a:	4b31      	ldr	r3, [pc, #196]	; (9df0 <hid_keyboard_ctrl+0x110>)
    9d2c:	4798      	blx	r3
    9d2e:	4b31      	ldr	r3, [pc, #196]	; (9df4 <hid_keyboard_ctrl+0x114>)
    9d30:	6018      	str	r0, [r3, #0]
    9d32:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9d34:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9dfc <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9d38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9e00 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    9d3c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9e04 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9d40:	6823      	ldr	r3, [r4, #0]
    9d42:	7818      	ldrb	r0, [r3, #0]
    9d44:	6861      	ldr	r1, [r4, #4]
    9d46:	4418      	add	r0, r3
    9d48:	47c8      	blx	r9
		desc->sod = ep;
    9d4a:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    9d4c:	2800      	cmp	r0, #0
    9d4e:	d046      	beq.n	9dde <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    9d50:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9d52:	7943      	ldrb	r3, [r0, #5]
    9d54:	7902      	ldrb	r2, [r0, #4]
    9d56:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9d5a:	b292      	uxth	r2, r2
    9d5c:	78c1      	ldrb	r1, [r0, #3]
    9d5e:	4638      	mov	r0, r7
    9d60:	47d0      	blx	sl
    9d62:	4605      	mov	r5, r0
    9d64:	2800      	cmp	r0, #0
    9d66:	d13d      	bne.n	9de4 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9d68:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    9d6c:	bf14      	ite	ne
    9d6e:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9d72:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    9d76:	4638      	mov	r0, r7
    9d78:	47d8      	blx	fp
    9d7a:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    9d7c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    9d80:	d1de      	bne.n	9d40 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    9d82:	4b1c      	ldr	r3, [pc, #112]	; (9df4 <hid_keyboard_ctrl+0x114>)
    9d84:	2201      	movs	r2, #1
    9d86:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    9d88:	741a      	strb	r2, [r3, #16]
    9d8a:	e7b5      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9d8c:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9d8e:	b11a      	cbz	r2, 9d98 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9d90:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9d92:	795b      	ldrb	r3, [r3, #5]
    9d94:	2b03      	cmp	r3, #3
    9d96:	d128      	bne.n	9dea <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    9d98:	7b2b      	ldrb	r3, [r5, #12]
    9d9a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9d9c:	bf1c      	itt	ne
    9d9e:	23ff      	movne	r3, #255	; 0xff
    9da0:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    9da2:	7b68      	ldrb	r0, [r5, #13]
    9da4:	28ff      	cmp	r0, #255	; 0xff
    9da6:	d003      	beq.n	9db0 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    9da8:	4b13      	ldr	r3, [pc, #76]	; (9df8 <hid_keyboard_ctrl+0x118>)
    9daa:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9dac:	23ff      	movs	r3, #255	; 0xff
    9dae:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    9db0:	7ba8      	ldrb	r0, [r5, #14]
    9db2:	28ff      	cmp	r0, #255	; 0xff
    9db4:	d003      	beq.n	9dbe <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    9db6:	4b10      	ldr	r3, [pc, #64]	; (9df8 <hid_keyboard_ctrl+0x118>)
    9db8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9dba:	23ff      	movs	r3, #255	; 0xff
    9dbc:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    9dbe:	2500      	movs	r5, #0
    9dc0:	4b0c      	ldr	r3, [pc, #48]	; (9df4 <hid_keyboard_ctrl+0x114>)
    9dc2:	741d      	strb	r5, [r3, #16]
    9dc4:	e798      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9dc6:	f06f 0509 	mvn.w	r5, #9
    9dca:	e795      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9dcc:	f06f 0509 	mvn.w	r5, #9
    9dd0:	e792      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9dd2:	f06f 0511 	mvn.w	r5, #17
    9dd6:	e78f      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9dd8:	f06f 051b 	mvn.w	r5, #27
    9ddc:	e78c      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9dde:	f06f 0509 	mvn.w	r5, #9
    9de2:	e789      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9de4:	f06f 0513 	mvn.w	r5, #19
    9de8:	e786      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9dea:	f06f 0509 	mvn.w	r5, #9
    9dee:	e783      	b.n	9cf8 <hid_keyboard_ctrl+0x18>
    9df0:	0000aad1 	.word	0x0000aad1
    9df4:	20000dd0 	.word	0x20000dd0
    9df8:	000053f9 	.word	0x000053f9
    9dfc:	0000ab0b 	.word	0x0000ab0b
    9e00:	00005391 	.word	0x00005391
    9e04:	00005425 	.word	0x00005425

00009e08 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9e08:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9e0a:	4b0a      	ldr	r3, [pc, #40]	; (9e34 <hiddf_keyboard_init+0x2c>)
    9e0c:	4798      	blx	r3
    9e0e:	2801      	cmp	r0, #1
    9e10:	d80c      	bhi.n	9e2c <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9e12:	4809      	ldr	r0, [pc, #36]	; (9e38 <hiddf_keyboard_init+0x30>)
    9e14:	4b09      	ldr	r3, [pc, #36]	; (9e3c <hiddf_keyboard_init+0x34>)
    9e16:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    9e18:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    9e1a:	3014      	adds	r0, #20
    9e1c:	4b08      	ldr	r3, [pc, #32]	; (9e40 <hiddf_keyboard_init+0x38>)
    9e1e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    9e20:	4908      	ldr	r1, [pc, #32]	; (9e44 <hiddf_keyboard_init+0x3c>)
    9e22:	2001      	movs	r0, #1
    9e24:	4b08      	ldr	r3, [pc, #32]	; (9e48 <hiddf_keyboard_init+0x40>)
    9e26:	4798      	blx	r3
	return ERR_NONE;
    9e28:	2000      	movs	r0, #0
    9e2a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9e2c:	f06f 0010 	mvn.w	r0, #16
}
    9e30:	bd08      	pop	{r3, pc}
    9e32:	bf00      	nop
    9e34:	0000aabd 	.word	0x0000aabd
    9e38:	20000dd0 	.word	0x20000dd0
    9e3c:	00009ce1 	.word	0x00009ce1
    9e40:	0000aa5d 	.word	0x0000aa5d
    9e44:	200003a0 	.word	0x200003a0
    9e48:	0000a9c9 	.word	0x0000a9c9

00009e4c <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    9e4c:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    9e4e:	4b26      	ldr	r3, [pc, #152]	; (9ee8 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    9e50:	7c1b      	ldrb	r3, [r3, #16]
    9e52:	2b00      	cmp	r3, #0
    9e54:	d045      	beq.n	9ee2 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    9e56:	4a24      	ldr	r2, [pc, #144]	; (9ee8 <hiddf_keyboard_keys_state_change+0x9c>)
    9e58:	2300      	movs	r3, #0
    9e5a:	6053      	str	r3, [r2, #4]
    9e5c:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    9e5e:	b329      	cbz	r1, 9eac <hiddf_keyboard_keys_state_change+0x60>
    9e60:	4603      	mov	r3, r0
    9e62:	1e4d      	subs	r5, r1, #1
    9e64:	b2ed      	uxtb	r5, r5
    9e66:	3501      	adds	r5, #1
    9e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9e6c:	4405      	add	r5, r0
    9e6e:	2200      	movs	r2, #0
    9e70:	e002      	b.n	9e78 <hiddf_keyboard_keys_state_change+0x2c>
    9e72:	3303      	adds	r3, #3
    9e74:	42ab      	cmp	r3, r5
    9e76:	d005      	beq.n	9e84 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    9e78:	785c      	ldrb	r4, [r3, #1]
    9e7a:	2c00      	cmp	r4, #0
    9e7c:	d0f9      	beq.n	9e72 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    9e7e:	3201      	adds	r2, #1
    9e80:	b2d2      	uxtb	r2, r2
    9e82:	e7f6      	b.n	9e72 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    9e84:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    9e86:	b2d2      	uxtb	r2, r2
    9e88:	2a06      	cmp	r2, #6
    9e8a:	d809      	bhi.n	9ea0 <hiddf_keyboard_keys_state_change+0x54>
    9e8c:	4603      	mov	r3, r0
    9e8e:	1e4a      	subs	r2, r1, #1
    9e90:	b2d2      	uxtb	r2, r2
    9e92:	3201      	adds	r2, #1
    9e94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9e98:	4410      	add	r0, r2
    9e9a:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9e9c:	4d12      	ldr	r5, [pc, #72]	; (9ee8 <hiddf_keyboard_keys_state_change+0x9c>)
    9e9e:	e015      	b.n	9ecc <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    9ea0:	4b11      	ldr	r3, [pc, #68]	; (9ee8 <hiddf_keyboard_keys_state_change+0x9c>)
    9ea2:	f04f 32ff 	mov.w	r2, #4294967295
    9ea6:	f8c3 2006 	str.w	r2, [r3, #6]
    9eaa:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    9eac:	480e      	ldr	r0, [pc, #56]	; (9ee8 <hiddf_keyboard_keys_state_change+0x9c>)
    9eae:	2300      	movs	r3, #0
    9eb0:	2208      	movs	r2, #8
    9eb2:	1d01      	adds	r1, r0, #4
    9eb4:	7b40      	ldrb	r0, [r0, #13]
    9eb6:	4c0d      	ldr	r4, [pc, #52]	; (9eec <hiddf_keyboard_keys_state_change+0xa0>)
    9eb8:	47a0      	blx	r4
    9eba:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9ebc:	1c62      	adds	r2, r4, #1
    9ebe:	7819      	ldrb	r1, [r3, #0]
    9ec0:	442c      	add	r4, r5
    9ec2:	7121      	strb	r1, [r4, #4]
    9ec4:	b2d4      	uxtb	r4, r2
    9ec6:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    9ec8:	4283      	cmp	r3, r0
    9eca:	d0ef      	beq.n	9eac <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    9ecc:	789a      	ldrb	r2, [r3, #2]
    9ece:	2a01      	cmp	r2, #1
    9ed0:	d1f9      	bne.n	9ec6 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    9ed2:	785a      	ldrb	r2, [r3, #1]
    9ed4:	2a00      	cmp	r2, #0
    9ed6:	d0f1      	beq.n	9ebc <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    9ed8:	792a      	ldrb	r2, [r5, #4]
    9eda:	7819      	ldrb	r1, [r3, #0]
    9edc:	430a      	orrs	r2, r1
    9ede:	712a      	strb	r2, [r5, #4]
    9ee0:	e7f1      	b.n	9ec6 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    9ee2:	f06f 0010 	mvn.w	r0, #16
}
    9ee6:	bd38      	pop	{r3, r4, r5, pc}
    9ee8:	20000dd0 	.word	0x20000dd0
    9eec:	0000a58d 	.word	0x0000a58d

00009ef0 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9ef0:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9ef2:	780b      	ldrb	r3, [r1, #0]
    9ef4:	2b81      	cmp	r3, #129	; 0x81
    9ef6:	d010      	beq.n	9f1a <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9ef8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9efc:	2b01      	cmp	r3, #1
    9efe:	d13f      	bne.n	9f80 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    9f00:	888a      	ldrh	r2, [r1, #4]
    9f02:	4b22      	ldr	r3, [pc, #136]	; (9f8c <hid_mouse_req+0x9c>)
    9f04:	7a1b      	ldrb	r3, [r3, #8]
    9f06:	429a      	cmp	r2, r3
    9f08:	d13d      	bne.n	9f86 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    9f0a:	784b      	ldrb	r3, [r1, #1]
    9f0c:	2b03      	cmp	r3, #3
    9f0e:	d028      	beq.n	9f62 <hid_mouse_req+0x72>
    9f10:	2b0b      	cmp	r3, #11
    9f12:	d02c      	beq.n	9f6e <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9f14:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9f18:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9f1a:	784b      	ldrb	r3, [r1, #1]
    9f1c:	2b06      	cmp	r3, #6
    9f1e:	d002      	beq.n	9f26 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    9f20:	f06f 0009 	mvn.w	r0, #9
    9f24:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9f26:	888a      	ldrh	r2, [r1, #4]
    9f28:	4b18      	ldr	r3, [pc, #96]	; (9f8c <hid_mouse_req+0x9c>)
    9f2a:	7a1b      	ldrb	r3, [r3, #8]
    9f2c:	429a      	cmp	r2, r3
    9f2e:	d002      	beq.n	9f36 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    9f30:	f06f 0009 	mvn.w	r0, #9
    9f34:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9f36:	884b      	ldrh	r3, [r1, #2]
    9f38:	0a1b      	lsrs	r3, r3, #8
    9f3a:	2b21      	cmp	r3, #33	; 0x21
    9f3c:	d004      	beq.n	9f48 <hid_mouse_req+0x58>
    9f3e:	2b22      	cmp	r3, #34	; 0x22
    9f40:	d009      	beq.n	9f56 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    9f42:	f06f 000c 	mvn.w	r0, #12
    9f46:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    9f48:	4b10      	ldr	r3, [pc, #64]	; (9f8c <hid_mouse_req+0x9c>)
    9f4a:	6819      	ldr	r1, [r3, #0]
    9f4c:	2300      	movs	r3, #0
    9f4e:	780a      	ldrb	r2, [r1, #0]
    9f50:	4c0f      	ldr	r4, [pc, #60]	; (9f90 <hid_mouse_req+0xa0>)
    9f52:	47a0      	blx	r4
    9f54:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    9f56:	2300      	movs	r3, #0
    9f58:	2234      	movs	r2, #52	; 0x34
    9f5a:	490e      	ldr	r1, [pc, #56]	; (9f94 <hid_mouse_req+0xa4>)
    9f5c:	4c0c      	ldr	r4, [pc, #48]	; (9f90 <hid_mouse_req+0xa0>)
    9f5e:	47a0      	blx	r4
    9f60:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    9f62:	2300      	movs	r3, #0
    9f64:	2201      	movs	r2, #1
    9f66:	490c      	ldr	r1, [pc, #48]	; (9f98 <hid_mouse_req+0xa8>)
    9f68:	4c09      	ldr	r4, [pc, #36]	; (9f90 <hid_mouse_req+0xa0>)
    9f6a:	47a0      	blx	r4
    9f6c:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    9f6e:	884a      	ldrh	r2, [r1, #2]
    9f70:	4b06      	ldr	r3, [pc, #24]	; (9f8c <hid_mouse_req+0x9c>)
    9f72:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    9f74:	2300      	movs	r3, #0
    9f76:	461a      	mov	r2, r3
    9f78:	4619      	mov	r1, r3
    9f7a:	4c05      	ldr	r4, [pc, #20]	; (9f90 <hid_mouse_req+0xa0>)
    9f7c:	47a0      	blx	r4
    9f7e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9f80:	f06f 0009 	mvn.w	r0, #9
    9f84:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9f86:	f06f 0009 	mvn.w	r0, #9
    9f8a:	bd10      	pop	{r4, pc}
    9f8c:	20000df0 	.word	0x20000df0
    9f90:	0000a58d 	.word	0x0000a58d
    9f94:	0000c5c0 	.word	0x0000c5c0
    9f98:	20000dfa 	.word	0x20000dfa

00009f9c <hid_mouse_ctrl>:
{
    9f9c:	b570      	push	{r4, r5, r6, lr}
    9f9e:	4614      	mov	r4, r2
	switch (ctrl) {
    9fa0:	2901      	cmp	r1, #1
    9fa2:	d040      	beq.n	a026 <hid_mouse_ctrl+0x8a>
    9fa4:	b139      	cbz	r1, 9fb6 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    9fa6:	2902      	cmp	r1, #2
    9fa8:	bf0c      	ite	eq
    9faa:	f06f 041a 	mvneq.w	r4, #26
    9fae:	f06f 040c 	mvnne.w	r4, #12
}
    9fb2:	4620      	mov	r0, r4
    9fb4:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9fb6:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    9fb8:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9fba:	2b00      	cmp	r3, #0
    9fbc:	d049      	beq.n	a052 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9fbe:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9fc0:	795b      	ldrb	r3, [r3, #5]
    9fc2:	2b03      	cmp	r3, #3
    9fc4:	d148      	bne.n	a058 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9fc6:	7a2b      	ldrb	r3, [r5, #8]
    9fc8:	429a      	cmp	r2, r3
    9fca:	d048      	beq.n	a05e <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9fcc:	2bff      	cmp	r3, #255	; 0xff
    9fce:	d149      	bne.n	a064 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9fd0:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9fd2:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    9fd4:	7818      	ldrb	r0, [r3, #0]
    9fd6:	2221      	movs	r2, #33	; 0x21
    9fd8:	6861      	ldr	r1, [r4, #4]
    9fda:	4418      	add	r0, r3
    9fdc:	4b29      	ldr	r3, [pc, #164]	; (a084 <hid_mouse_ctrl+0xe8>)
    9fde:	4798      	blx	r3
    9fe0:	4b29      	ldr	r3, [pc, #164]	; (a088 <hid_mouse_ctrl+0xec>)
    9fe2:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9fe4:	6823      	ldr	r3, [r4, #0]
    9fe6:	7818      	ldrb	r0, [r3, #0]
    9fe8:	6861      	ldr	r1, [r4, #4]
    9fea:	4418      	add	r0, r3
    9fec:	4b27      	ldr	r3, [pc, #156]	; (a08c <hid_mouse_ctrl+0xf0>)
    9fee:	4798      	blx	r3
	desc->sod = ep;
    9ff0:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    9ff2:	2800      	cmp	r0, #0
    9ff4:	d039      	beq.n	a06a <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    9ff6:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9ff8:	7943      	ldrb	r3, [r0, #5]
    9ffa:	7902      	ldrb	r2, [r0, #4]
    9ffc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a000:	b292      	uxth	r2, r2
    a002:	78c1      	ldrb	r1, [r0, #3]
    a004:	4630      	mov	r0, r6
    a006:	4b22      	ldr	r3, [pc, #136]	; (a090 <hid_mouse_ctrl+0xf4>)
    a008:	4798      	blx	r3
    a00a:	4604      	mov	r4, r0
    a00c:	bb80      	cbnz	r0, a070 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a00e:	f016 0f80 	tst.w	r6, #128	; 0x80
    a012:	d030      	beq.n	a076 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a014:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a016:	4630      	mov	r0, r6
    a018:	4b1e      	ldr	r3, [pc, #120]	; (a094 <hid_mouse_ctrl+0xf8>)
    a01a:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a01c:	4b1a      	ldr	r3, [pc, #104]	; (a088 <hid_mouse_ctrl+0xec>)
    a01e:	2201      	movs	r2, #1
    a020:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a022:	72da      	strb	r2, [r3, #11]
    a024:	e7c5      	b.n	9fb2 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a026:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a028:	b11a      	cbz	r2, a032 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a02a:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a02c:	795b      	ldrb	r3, [r3, #5]
    a02e:	2b03      	cmp	r3, #3
    a030:	d124      	bne.n	a07c <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a032:	7a2b      	ldrb	r3, [r5, #8]
    a034:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a036:	bf1c      	itt	ne
    a038:	23ff      	movne	r3, #255	; 0xff
    a03a:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a03c:	7a68      	ldrb	r0, [r5, #9]
    a03e:	28ff      	cmp	r0, #255	; 0xff
    a040:	d003      	beq.n	a04a <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a042:	4b15      	ldr	r3, [pc, #84]	; (a098 <hid_mouse_ctrl+0xfc>)
    a044:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a046:	23ff      	movs	r3, #255	; 0xff
    a048:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a04a:	2400      	movs	r4, #0
    a04c:	4b0e      	ldr	r3, [pc, #56]	; (a088 <hid_mouse_ctrl+0xec>)
    a04e:	72dc      	strb	r4, [r3, #11]
    a050:	e7af      	b.n	9fb2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a052:	f06f 0409 	mvn.w	r4, #9
    a056:	e7ac      	b.n	9fb2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a058:	f06f 0409 	mvn.w	r4, #9
    a05c:	e7a9      	b.n	9fb2 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a05e:	f06f 0411 	mvn.w	r4, #17
    a062:	e7a6      	b.n	9fb2 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a064:	f06f 041b 	mvn.w	r4, #27
    a068:	e7a3      	b.n	9fb2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a06a:	f06f 0409 	mvn.w	r4, #9
    a06e:	e7a0      	b.n	9fb2 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a070:	f06f 0413 	mvn.w	r4, #19
    a074:	e79d      	b.n	9fb2 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a076:	f04f 34ff 	mov.w	r4, #4294967295
    a07a:	e79a      	b.n	9fb2 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a07c:	f06f 0409 	mvn.w	r4, #9
    a080:	e797      	b.n	9fb2 <hid_mouse_ctrl+0x16>
    a082:	bf00      	nop
    a084:	0000aad1 	.word	0x0000aad1
    a088:	20000df0 	.word	0x20000df0
    a08c:	0000ab0b 	.word	0x0000ab0b
    a090:	00005391 	.word	0x00005391
    a094:	00005425 	.word	0x00005425
    a098:	000053f9 	.word	0x000053f9

0000a09c <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a09c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a09e:	4b0a      	ldr	r3, [pc, #40]	; (a0c8 <hiddf_mouse_init+0x2c>)
    a0a0:	4798      	blx	r3
    a0a2:	2801      	cmp	r0, #1
    a0a4:	d80c      	bhi.n	a0c0 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a0a6:	4809      	ldr	r0, [pc, #36]	; (a0cc <hiddf_mouse_init+0x30>)
    a0a8:	4b09      	ldr	r3, [pc, #36]	; (a0d0 <hiddf_mouse_init+0x34>)
    a0aa:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a0ac:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a0ae:	300c      	adds	r0, #12
    a0b0:	4b08      	ldr	r3, [pc, #32]	; (a0d4 <hiddf_mouse_init+0x38>)
    a0b2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a0b4:	4908      	ldr	r1, [pc, #32]	; (a0d8 <hiddf_mouse_init+0x3c>)
    a0b6:	2001      	movs	r0, #1
    a0b8:	4b08      	ldr	r3, [pc, #32]	; (a0dc <hiddf_mouse_init+0x40>)
    a0ba:	4798      	blx	r3
	return ERR_NONE;
    a0bc:	2000      	movs	r0, #0
    a0be:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a0c0:	f06f 0010 	mvn.w	r0, #16
}
    a0c4:	bd08      	pop	{r3, pc}
    a0c6:	bf00      	nop
    a0c8:	0000aabd 	.word	0x0000aabd
    a0cc:	20000df0 	.word	0x20000df0
    a0d0:	00009f9d 	.word	0x00009f9d
    a0d4:	0000aa5d 	.word	0x0000aa5d
    a0d8:	200003a8 	.word	0x200003a8
    a0dc:	0000a9c9 	.word	0x0000a9c9

0000a0e0 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    a0e0:	2200      	movs	r2, #0
    a0e2:	4b0d      	ldr	r3, [pc, #52]	; (a118 <hiddf_mouse_move+0x38>)
    a0e4:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    a0e6:	2901      	cmp	r1, #1
    a0e8:	d00e      	beq.n	a108 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    a0ea:	2902      	cmp	r1, #2
    a0ec:	d00e      	beq.n	a10c <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    a0ee:	2903      	cmp	r1, #3
    a0f0:	d10f      	bne.n	a112 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    a0f2:	4b09      	ldr	r3, [pc, #36]	; (a118 <hiddf_mouse_move+0x38>)
    a0f4:	71d8      	strb	r0, [r3, #7]
{
    a0f6:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    a0f8:	4807      	ldr	r0, [pc, #28]	; (a118 <hiddf_mouse_move+0x38>)
    a0fa:	2300      	movs	r3, #0
    a0fc:	2204      	movs	r2, #4
    a0fe:	1881      	adds	r1, r0, r2
    a100:	7a40      	ldrb	r0, [r0, #9]
    a102:	4c06      	ldr	r4, [pc, #24]	; (a11c <hiddf_mouse_move+0x3c>)
    a104:	47a0      	blx	r4
    a106:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    a108:	7158      	strb	r0, [r3, #5]
    a10a:	e7f4      	b.n	a0f6 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    a10c:	4b02      	ldr	r3, [pc, #8]	; (a118 <hiddf_mouse_move+0x38>)
    a10e:	7198      	strb	r0, [r3, #6]
    a110:	e7f1      	b.n	a0f6 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    a112:	f06f 000c 	mvn.w	r0, #12
    a116:	4770      	bx	lr
    a118:	20000df0 	.word	0x20000df0
    a11c:	0000a58d 	.word	0x0000a58d

0000a120 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    a120:	4770      	bx	lr

0000a122 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a122:	e7fe      	b.n	a122 <midi_cb_ep_bulk_out>

0000a124 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a124:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a126:	780b      	ldrb	r3, [r1, #0]
    a128:	2b81      	cmp	r3, #129	; 0x81
    a12a:	d014      	beq.n	a156 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a12c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a130:	2b01      	cmp	r3, #1
    a132:	d132      	bne.n	a19a <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    a134:	888b      	ldrh	r3, [r1, #4]
    a136:	4a1c      	ldr	r2, [pc, #112]	; (a1a8 <audio_midi_req+0x84>)
    a138:	7912      	ldrb	r2, [r2, #4]
    a13a:	429a      	cmp	r2, r3
    a13c:	d003      	beq.n	a146 <audio_midi_req+0x22>
    a13e:	4a1a      	ldr	r2, [pc, #104]	; (a1a8 <audio_midi_req+0x84>)
    a140:	7952      	ldrb	r2, [r2, #5]
    a142:	429a      	cmp	r2, r3
    a144:	d12c      	bne.n	a1a0 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    a146:	784b      	ldrb	r3, [r1, #1]
    a148:	2b03      	cmp	r3, #3
    a14a:	d017      	beq.n	a17c <audio_midi_req+0x58>
    a14c:	2b0b      	cmp	r3, #11
    a14e:	d01b      	beq.n	a188 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    a150:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a154:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a156:	888b      	ldrh	r3, [r1, #4]
    a158:	4a13      	ldr	r2, [pc, #76]	; (a1a8 <audio_midi_req+0x84>)
    a15a:	7912      	ldrb	r2, [r2, #4]
    a15c:	429a      	cmp	r2, r3
    a15e:	d006      	beq.n	a16e <audio_midi_req+0x4a>
    a160:	4a11      	ldr	r2, [pc, #68]	; (a1a8 <audio_midi_req+0x84>)
    a162:	7952      	ldrb	r2, [r2, #5]
    a164:	429a      	cmp	r2, r3
    a166:	d002      	beq.n	a16e <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a168:	f06f 0009 	mvn.w	r0, #9
    a16c:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    a16e:	4b0e      	ldr	r3, [pc, #56]	; (a1a8 <audio_midi_req+0x84>)
    a170:	6819      	ldr	r1, [r3, #0]
    a172:	2300      	movs	r3, #0
    a174:	780a      	ldrb	r2, [r1, #0]
    a176:	4c0d      	ldr	r4, [pc, #52]	; (a1ac <audio_midi_req+0x88>)
    a178:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    a17a:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    a17c:	2300      	movs	r3, #0
    a17e:	2201      	movs	r2, #1
    a180:	490b      	ldr	r1, [pc, #44]	; (a1b0 <audio_midi_req+0x8c>)
    a182:	4c0a      	ldr	r4, [pc, #40]	; (a1ac <audio_midi_req+0x88>)
    a184:	47a0      	blx	r4
    a186:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    a188:	884a      	ldrh	r2, [r1, #2]
    a18a:	4b07      	ldr	r3, [pc, #28]	; (a1a8 <audio_midi_req+0x84>)
    a18c:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    a18e:	2300      	movs	r3, #0
    a190:	461a      	mov	r2, r3
    a192:	4619      	mov	r1, r3
    a194:	4c05      	ldr	r4, [pc, #20]	; (a1ac <audio_midi_req+0x88>)
    a196:	47a0      	blx	r4
    a198:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a19a:	f06f 0009 	mvn.w	r0, #9
    a19e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a1a0:	f06f 0009 	mvn.w	r0, #9
    a1a4:	bd10      	pop	{r4, pc}
    a1a6:	bf00      	nop
    a1a8:	20000e08 	.word	0x20000e08
    a1ac:	0000a58d 	.word	0x0000a58d
    a1b0:	20000e10 	.word	0x20000e10

0000a1b4 <audio_midi_ctrl>:
{
    a1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a1b8:	b083      	sub	sp, #12
    a1ba:	4615      	mov	r5, r2
	switch (ctrl) {
    a1bc:	2901      	cmp	r1, #1
    a1be:	f000 8092 	beq.w	a2e6 <audio_midi_ctrl+0x132>
    a1c2:	b141      	cbz	r1, a1d6 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    a1c4:	2902      	cmp	r1, #2
    a1c6:	bf0c      	ite	eq
    a1c8:	f06f 001a 	mvneq.w	r0, #26
    a1cc:	f06f 000c 	mvnne.w	r0, #12
}
    a1d0:	b003      	add	sp, #12
    a1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a1d6:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    a1da:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a1dc:	2800      	cmp	r0, #0
    a1de:	f000 80a9 	beq.w	a334 <audio_midi_ctrl+0x180>
    a1e2:	f109 0604 	add.w	r6, r9, #4
    a1e6:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a1e8:	f04f 0804 	mov.w	r8, #4
    a1ec:	4f5d      	ldr	r7, [pc, #372]	; (a364 <audio_midi_ctrl+0x1b0>)
    a1ee:	e019      	b.n	a224 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a1f0:	f816 3b01 	ldrb.w	r3, [r6], #1
    a1f4:	429a      	cmp	r2, r3
    a1f6:	f000 80a3 	beq.w	a340 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a1fa:	2bff      	cmp	r3, #255	; 0xff
    a1fc:	f040 80a3 	bne.w	a346 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a200:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    a204:	2c01      	cmp	r4, #1
    a206:	d016      	beq.n	a236 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a208:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a20a:	7818      	ldrb	r0, [r3, #0]
    a20c:	4642      	mov	r2, r8
    a20e:	6869      	ldr	r1, [r5, #4]
    a210:	4418      	add	r0, r3
    a212:	47b8      	blx	r7
    a214:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    a216:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a21a:	f000 809e 	beq.w	a35a <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    a21e:	2800      	cmp	r0, #0
    a220:	f000 808b 	beq.w	a33a <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    a224:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    a226:	7943      	ldrb	r3, [r0, #5]
    a228:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a22c:	2b01      	cmp	r3, #1
    a22e:	d0df      	beq.n	a1f0 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    a230:	f06f 0009 	mvn.w	r0, #9
    a234:	e7cc      	b.n	a1d0 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a236:	2205      	movs	r2, #5
    a238:	6869      	ldr	r1, [r5, #4]
    a23a:	4b4a      	ldr	r3, [pc, #296]	; (a364 <audio_midi_ctrl+0x1b0>)
    a23c:	4798      	blx	r3
    a23e:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a240:	4e49      	ldr	r6, [pc, #292]	; (a368 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a242:	f8df 8144 	ldr.w	r8, [pc, #324]	; a388 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    a246:	4f49      	ldr	r7, [pc, #292]	; (a36c <audio_midi_ctrl+0x1b8>)
    a248:	e01a      	b.n	a280 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    a24a:	4a47      	ldr	r2, [pc, #284]	; (a368 <audio_midi_ctrl+0x1b4>)
    a24c:	7953      	ldrb	r3, [r2, #5]
    a24e:	425b      	negs	r3, r3
    a250:	b2db      	uxtb	r3, r3
    a252:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    a254:	f06f 0013 	mvn.w	r0, #19
    a258:	e7ba      	b.n	a1d0 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    a25a:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a25e:	b2c0      	uxtb	r0, r0
    a260:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    a264:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    a266:	4a42      	ldr	r2, [pc, #264]	; (a370 <audio_midi_ctrl+0x1bc>)
    a268:	2102      	movs	r1, #2
    a26a:	f899 0006 	ldrb.w	r0, [r9, #6]
    a26e:	4b41      	ldr	r3, [pc, #260]	; (a374 <audio_midi_ctrl+0x1c0>)
    a270:	4798      	blx	r3
				desc->sod = ep;
    a272:	602c      	str	r4, [r5, #0]
    a274:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a276:	6869      	ldr	r1, [r5, #4]
    a278:	4420      	add	r0, r4
    a27a:	4b3f      	ldr	r3, [pc, #252]	; (a378 <audio_midi_ctrl+0x1c4>)
    a27c:	4798      	blx	r3
    a27e:	4604      	mov	r4, r0
			while (NULL != ep) {
    a280:	2c00      	cmp	r4, #0
    a282:	d063      	beq.n	a34c <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    a284:	78a3      	ldrb	r3, [r4, #2]
    a286:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    a28a:	78e3      	ldrb	r3, [r4, #3]
    a28c:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    a290:	7962      	ldrb	r2, [r4, #5]
    a292:	7923      	ldrb	r3, [r4, #4]
    a294:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a298:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    a29a:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a29e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a2a2:	b2db      	uxtb	r3, r3
    a2a4:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    a2a6:	2301      	movs	r3, #1
    a2a8:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a2aa:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a2ae:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a2b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a2b6:	b292      	uxth	r2, r2
    a2b8:	47c0      	blx	r8
    a2ba:	b2c0      	uxtb	r0, r0
    a2bc:	7170      	strb	r0, [r6, #5]
    a2be:	2800      	cmp	r0, #0
    a2c0:	d1c3      	bne.n	a24a <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a2c2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a2c6:	f013 0f80 	tst.w	r3, #128	; 0x80
    a2ca:	d1c6      	bne.n	a25a <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    a2cc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a2d0:	b2c0      	uxtb	r0, r0
    a2d2:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    a2d6:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    a2d8:	4a28      	ldr	r2, [pc, #160]	; (a37c <audio_midi_ctrl+0x1c8>)
    a2da:	2102      	movs	r1, #2
    a2dc:	f899 0007 	ldrb.w	r0, [r9, #7]
    a2e0:	4b24      	ldr	r3, [pc, #144]	; (a374 <audio_midi_ctrl+0x1c0>)
    a2e2:	4798      	blx	r3
    a2e4:	e7c5      	b.n	a272 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a2e6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a2e8:	b142      	cbz	r2, a2fc <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a2ea:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    a2ec:	795b      	ldrb	r3, [r3, #5]
    a2ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a2f2:	2b01      	cmp	r3, #1
    a2f4:	d002      	beq.n	a2fc <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    a2f6:	f06f 0009 	mvn.w	r0, #9
    a2fa:	e769      	b.n	a1d0 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    a2fc:	7923      	ldrb	r3, [r4, #4]
    a2fe:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    a300:	bf1c      	itt	ne
    a302:	23ff      	movne	r3, #255	; 0xff
    a304:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    a306:	7963      	ldrb	r3, [r4, #5]
    a308:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    a30a:	bf1c      	itt	ne
    a30c:	23ff      	movne	r3, #255	; 0xff
    a30e:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    a310:	79a0      	ldrb	r0, [r4, #6]
    a312:	28ff      	cmp	r0, #255	; 0xff
    a314:	d003      	beq.n	a31e <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    a316:	4b1a      	ldr	r3, [pc, #104]	; (a380 <audio_midi_ctrl+0x1cc>)
    a318:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a31a:	23ff      	movs	r3, #255	; 0xff
    a31c:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    a31e:	79e0      	ldrb	r0, [r4, #7]
    a320:	28ff      	cmp	r0, #255	; 0xff
    a322:	d003      	beq.n	a32c <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    a324:	4b16      	ldr	r3, [pc, #88]	; (a380 <audio_midi_ctrl+0x1cc>)
    a326:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a328:	23ff      	movs	r3, #255	; 0xff
    a32a:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    a32c:	2000      	movs	r0, #0
    a32e:	4b15      	ldr	r3, [pc, #84]	; (a384 <audio_midi_ctrl+0x1d0>)
    a330:	7358      	strb	r0, [r3, #13]
    a332:	e74d      	b.n	a1d0 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    a334:	f06f 0009 	mvn.w	r0, #9
    a338:	e74a      	b.n	a1d0 <audio_midi_ctrl+0x1c>
    a33a:	f06f 0009 	mvn.w	r0, #9
    a33e:	e747      	b.n	a1d0 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    a340:	f06f 0011 	mvn.w	r0, #17
    a344:	e744      	b.n	a1d0 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    a346:	f06f 001b 	mvn.w	r0, #27
    a34a:	e741      	b.n	a1d0 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a34c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a34e:	7818      	ldrb	r0, [r3, #0]
    a350:	2204      	movs	r2, #4
    a352:	6869      	ldr	r1, [r5, #4]
    a354:	4418      	add	r0, r3
    a356:	4b03      	ldr	r3, [pc, #12]	; (a364 <audio_midi_ctrl+0x1b0>)
    a358:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    a35a:	2201      	movs	r2, #1
    a35c:	4b09      	ldr	r3, [pc, #36]	; (a384 <audio_midi_ctrl+0x1d0>)
    a35e:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a360:	2000      	movs	r0, #0
    a362:	e735      	b.n	a1d0 <audio_midi_ctrl+0x1c>
    a364:	0000aad1 	.word	0x0000aad1
    a368:	20003d00 	.word	0x20003d00
    a36c:	00005425 	.word	0x00005425
    a370:	0000a121 	.word	0x0000a121
    a374:	000055f9 	.word	0x000055f9
    a378:	0000ab0b 	.word	0x0000ab0b
    a37c:	0000a123 	.word	0x0000a123
    a380:	000053f9 	.word	0x000053f9
    a384:	20000e08 	.word	0x20000e08
    a388:	00005391 	.word	0x00005391

0000a38c <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    a38c:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    a38e:	4b0a      	ldr	r3, [pc, #40]	; (a3b8 <audiodf_midi_init+0x2c>)
    a390:	4798      	blx	r3
    a392:	2801      	cmp	r0, #1
    a394:	d80c      	bhi.n	a3b0 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    a396:	4809      	ldr	r0, [pc, #36]	; (a3bc <audiodf_midi_init+0x30>)
    a398:	4b09      	ldr	r3, [pc, #36]	; (a3c0 <audiodf_midi_init+0x34>)
    a39a:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    a39c:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    a39e:	3010      	adds	r0, #16
    a3a0:	4b08      	ldr	r3, [pc, #32]	; (a3c4 <audiodf_midi_init+0x38>)
    a3a2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a3a4:	4908      	ldr	r1, [pc, #32]	; (a3c8 <audiodf_midi_init+0x3c>)
    a3a6:	2001      	movs	r0, #1
    a3a8:	4b08      	ldr	r3, [pc, #32]	; (a3cc <audiodf_midi_init+0x40>)
    a3aa:	4798      	blx	r3
	return ERR_NONE;
    a3ac:	2000      	movs	r0, #0
    a3ae:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a3b0:	f06f 0010 	mvn.w	r0, #16
}
    a3b4:	bd08      	pop	{r3, pc}
    a3b6:	bf00      	nop
    a3b8:	0000aabd 	.word	0x0000aabd
    a3bc:	20000e08 	.word	0x20000e08
    a3c0:	0000a1b5 	.word	0x0000a1b5
    a3c4:	0000aa5d 	.word	0x0000aa5d
    a3c8:	200003b0 	.word	0x200003b0
    a3cc:	0000a9c9 	.word	0x0000a9c9

0000a3d0 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a3d0:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a3d2:	4c06      	ldr	r4, [pc, #24]	; (a3ec <audiodf_midi_xfer_packet+0x1c>)
    a3d4:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a3d6:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a3d8:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a3da:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a3dc:	2300      	movs	r3, #0
    a3de:	2204      	movs	r2, #4
    a3e0:	f104 0109 	add.w	r1, r4, #9
    a3e4:	79a0      	ldrb	r0, [r4, #6]
    a3e6:	4c02      	ldr	r4, [pc, #8]	; (a3f0 <audiodf_midi_xfer_packet+0x20>)
    a3e8:	47a0      	blx	r4
	
	
}
    a3ea:	bd10      	pop	{r4, pc}
    a3ec:	20000e08 	.word	0x20000e08
    a3f0:	0000a58d 	.word	0x0000a58d

0000a3f4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a3f4:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a3f6:	4b07      	ldr	r3, [pc, #28]	; (a414 <usbdc_unconfig+0x20>)
    a3f8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a3fa:	b14c      	cbz	r4, a410 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a3fc:	2600      	movs	r6, #0
    a3fe:	2501      	movs	r5, #1
    a400:	6863      	ldr	r3, [r4, #4]
    a402:	4632      	mov	r2, r6
    a404:	4629      	mov	r1, r5
    a406:	4620      	mov	r0, r4
    a408:	4798      	blx	r3
		func = func->next;
    a40a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a40c:	2c00      	cmp	r4, #0
    a40e:	d1f7      	bne.n	a400 <usbdc_unconfig+0xc>
    a410:	bd70      	pop	{r4, r5, r6, pc}
    a412:	bf00      	nop
    a414:	20000e24 	.word	0x20000e24

0000a418 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a418:	b570      	push	{r4, r5, r6, lr}
    a41a:	4606      	mov	r6, r0
    a41c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a41e:	4b07      	ldr	r3, [pc, #28]	; (a43c <usbdc_change_notify+0x24>)
    a420:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a422:	b91c      	cbnz	r4, a42c <usbdc_change_notify+0x14>
    a424:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a426:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a428:	2c00      	cmp	r4, #0
    a42a:	d0fb      	beq.n	a424 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a42c:	6863      	ldr	r3, [r4, #4]
    a42e:	2b00      	cmp	r3, #0
    a430:	d0f9      	beq.n	a426 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a432:	4629      	mov	r1, r5
    a434:	4630      	mov	r0, r6
    a436:	4798      	blx	r3
    a438:	e7f5      	b.n	a426 <usbdc_change_notify+0xe>
    a43a:	bf00      	nop
    a43c:	20000e24 	.word	0x20000e24

0000a440 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a442:	4607      	mov	r7, r0
    a444:	460e      	mov	r6, r1
    a446:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a448:	4b0c      	ldr	r3, [pc, #48]	; (a47c <usbdc_request_handler+0x3c>)
    a44a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a44c:	b91c      	cbnz	r4, a456 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a44e:	2000      	movs	r0, #0
    a450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a452:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a454:	b16c      	cbz	r4, a472 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a456:	6863      	ldr	r3, [r4, #4]
    a458:	2b00      	cmp	r3, #0
    a45a:	d0fa      	beq.n	a452 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a45c:	462a      	mov	r2, r5
    a45e:	4631      	mov	r1, r6
    a460:	4638      	mov	r0, r7
    a462:	4798      	blx	r3
			if (0 == rc) {
    a464:	b138      	cbz	r0, a476 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a466:	f110 0f0a 	cmn.w	r0, #10
    a46a:	d0f2      	beq.n	a452 <usbdc_request_handler+0x12>
				return -1;
    a46c:	f04f 30ff 	mov.w	r0, #4294967295
}
    a470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a472:	2000      	movs	r0, #0
    a474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a476:	2001      	movs	r0, #1
    a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a47a:	bf00      	nop
    a47c:	20000e24 	.word	0x20000e24

0000a480 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a480:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a482:	4b06      	ldr	r3, [pc, #24]	; (a49c <usbd_sof_cb+0x1c>)
    a484:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a486:	b91c      	cbnz	r4, a490 <usbd_sof_cb+0x10>
    a488:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a48a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a48c:	2c00      	cmp	r4, #0
    a48e:	d0fb      	beq.n	a488 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a490:	6863      	ldr	r3, [r4, #4]
    a492:	2b00      	cmp	r3, #0
    a494:	d0f9      	beq.n	a48a <usbd_sof_cb+0xa>
			sof->cb();
    a496:	4798      	blx	r3
    a498:	e7f7      	b.n	a48a <usbd_sof_cb+0xa>
    a49a:	bf00      	nop
    a49c:	20000e24 	.word	0x20000e24

0000a4a0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a4a0:	b510      	push	{r4, lr}
    a4a2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a4a4:	b119      	cbz	r1, a4ae <usbdc_cb_ctl_done+0xe>
    a4a6:	2901      	cmp	r1, #1
    a4a8:	d026      	beq.n	a4f8 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a4aa:	2000      	movs	r0, #0
    a4ac:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a4ae:	7813      	ldrb	r3, [r2, #0]
    a4b0:	2b00      	cmp	r3, #0
    a4b2:	d1fa      	bne.n	a4aa <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a4b4:	7853      	ldrb	r3, [r2, #1]
    a4b6:	2b05      	cmp	r3, #5
    a4b8:	d00f      	beq.n	a4da <usbdc_cb_ctl_done+0x3a>
    a4ba:	2b09      	cmp	r3, #9
    a4bc:	d1f5      	bne.n	a4aa <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a4be:	8852      	ldrh	r2, [r2, #2]
    a4c0:	4b10      	ldr	r3, [pc, #64]	; (a504 <usbdc_cb_ctl_done+0x64>)
    a4c2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a4c4:	8863      	ldrh	r3, [r4, #2]
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	bf14      	ite	ne
    a4ca:	2104      	movne	r1, #4
    a4cc:	2103      	moveq	r1, #3
    a4ce:	4b0d      	ldr	r3, [pc, #52]	; (a504 <usbdc_cb_ctl_done+0x64>)
    a4d0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a4d2:	2001      	movs	r0, #1
    a4d4:	4b0c      	ldr	r3, [pc, #48]	; (a508 <usbdc_cb_ctl_done+0x68>)
    a4d6:	4798      	blx	r3
    a4d8:	e7e7      	b.n	a4aa <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a4da:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a4dc:	b2c0      	uxtb	r0, r0
    a4de:	4b0b      	ldr	r3, [pc, #44]	; (a50c <usbdc_cb_ctl_done+0x6c>)
    a4e0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a4e2:	8863      	ldrh	r3, [r4, #2]
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	bf14      	ite	ne
    a4e8:	2103      	movne	r1, #3
    a4ea:	2102      	moveq	r1, #2
    a4ec:	4b05      	ldr	r3, [pc, #20]	; (a504 <usbdc_cb_ctl_done+0x64>)
    a4ee:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a4f0:	2001      	movs	r0, #1
    a4f2:	4b05      	ldr	r3, [pc, #20]	; (a508 <usbdc_cb_ctl_done+0x68>)
    a4f4:	4798      	blx	r3
    a4f6:	e7d8      	b.n	a4aa <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a4f8:	2201      	movs	r2, #1
    a4fa:	4621      	mov	r1, r4
    a4fc:	2000      	movs	r0, #0
    a4fe:	4b04      	ldr	r3, [pc, #16]	; (a510 <usbdc_cb_ctl_done+0x70>)
    a500:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a502:	e7d2      	b.n	a4aa <usbdc_cb_ctl_done+0xa>
    a504:	20000e24 	.word	0x20000e24
    a508:	0000a419 	.word	0x0000a419
    a50c:	00005385 	.word	0x00005385
    a510:	0000a441 	.word	0x0000a441

0000a514 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a514:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a516:	4b0d      	ldr	r3, [pc, #52]	; (a54c <usbdc_reset+0x38>)
    a518:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a51a:	4d0d      	ldr	r5, [pc, #52]	; (a550 <usbdc_reset+0x3c>)
    a51c:	2602      	movs	r6, #2
    a51e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a520:	2400      	movs	r4, #0
    a522:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a524:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a526:	4620      	mov	r0, r4
    a528:	4b0a      	ldr	r3, [pc, #40]	; (a554 <usbdc_reset+0x40>)
    a52a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a52c:	7f28      	ldrb	r0, [r5, #28]
    a52e:	4b0a      	ldr	r3, [pc, #40]	; (a558 <usbdc_reset+0x44>)
    a530:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a532:	4a0a      	ldr	r2, [pc, #40]	; (a55c <usbdc_reset+0x48>)
    a534:	4621      	mov	r1, r4
    a536:	4620      	mov	r0, r4
    a538:	4d09      	ldr	r5, [pc, #36]	; (a560 <usbdc_reset+0x4c>)
    a53a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a53c:	4a09      	ldr	r2, [pc, #36]	; (a564 <usbdc_reset+0x50>)
    a53e:	4631      	mov	r1, r6
    a540:	4620      	mov	r0, r4
    a542:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a544:	4620      	mov	r0, r4
    a546:	4b08      	ldr	r3, [pc, #32]	; (a568 <usbdc_reset+0x54>)
    a548:	4798      	blx	r3
    a54a:	bd70      	pop	{r4, r5, r6, pc}
    a54c:	0000a3f5 	.word	0x0000a3f5
    a550:	20000e24 	.word	0x20000e24
    a554:	000053f9 	.word	0x000053f9
    a558:	000053e5 	.word	0x000053e5
    a55c:	0000a5ad 	.word	0x0000a5ad
    a560:	000055f9 	.word	0x000055f9
    a564:	0000a4a1 	.word	0x0000a4a1
    a568:	00005425 	.word	0x00005425

0000a56c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a56c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a56e:	b110      	cbz	r0, a576 <usbd_event_cb+0xa>
    a570:	2801      	cmp	r0, #1
    a572:	d004      	beq.n	a57e <usbd_event_cb+0x12>
    a574:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a576:	2000      	movs	r0, #0
    a578:	4b02      	ldr	r3, [pc, #8]	; (a584 <usbd_event_cb+0x18>)
    a57a:	4798      	blx	r3
		break;
    a57c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a57e:	4b02      	ldr	r3, [pc, #8]	; (a588 <usbd_event_cb+0x1c>)
    a580:	4798      	blx	r3
    a582:	bd08      	pop	{r3, pc}
    a584:	0000a419 	.word	0x0000a419
    a588:	0000a515 	.word	0x0000a515

0000a58c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a58c:	b500      	push	{lr}
    a58e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a590:	9101      	str	r1, [sp, #4]
    a592:	9202      	str	r2, [sp, #8]
    a594:	f88d 000c 	strb.w	r0, [sp, #12]
    a598:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a59c:	a801      	add	r0, sp, #4
    a59e:	4b02      	ldr	r3, [pc, #8]	; (a5a8 <usbdc_xfer+0x1c>)
    a5a0:	4798      	blx	r3
}
    a5a2:	b005      	add	sp, #20
    a5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a5a8:	00005471 	.word	0x00005471

0000a5ac <usbdc_cb_ctl_req>:
{
    a5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a5b0:	b083      	sub	sp, #12
    a5b2:	4605      	mov	r5, r0
    a5b4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a5b6:	2200      	movs	r2, #0
    a5b8:	4b9b      	ldr	r3, [pc, #620]	; (a828 <usbdc_cb_ctl_req+0x27c>)
    a5ba:	4798      	blx	r3
    a5bc:	f1b0 3fff 	cmp.w	r0, #4294967295
    a5c0:	d00b      	beq.n	a5da <usbdc_cb_ctl_req+0x2e>
    a5c2:	2801      	cmp	r0, #1
    a5c4:	f000 81e3 	beq.w	a98e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a5c8:	7823      	ldrb	r3, [r4, #0]
    a5ca:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a5ce:	d008      	beq.n	a5e2 <usbdc_cb_ctl_req+0x36>
    a5d0:	2a80      	cmp	r2, #128	; 0x80
    a5d2:	f000 80f4 	beq.w	a7be <usbdc_cb_ctl_req+0x212>
		return false;
    a5d6:	2000      	movs	r0, #0
    a5d8:	e000      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a5da:	2000      	movs	r0, #0
}
    a5dc:	b003      	add	sp, #12
    a5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a5e2:	7862      	ldrb	r2, [r4, #1]
    a5e4:	3a01      	subs	r2, #1
    a5e6:	2a0a      	cmp	r2, #10
    a5e8:	f200 81d3 	bhi.w	a992 <usbdc_cb_ctl_req+0x3e6>
    a5ec:	e8df f012 	tbh	[pc, r2, lsl #1]
    a5f0:	01d10060 	.word	0x01d10060
    a5f4:	01d10076 	.word	0x01d10076
    a5f8:	01d1000b 	.word	0x01d1000b
    a5fc:	01d101d1 	.word	0x01d101d1
    a600:	01d10015 	.word	0x01d10015
    a604:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a606:	2301      	movs	r3, #1
    a608:	2200      	movs	r2, #0
    a60a:	4611      	mov	r1, r2
    a60c:	4628      	mov	r0, r5
    a60e:	4c87      	ldr	r4, [pc, #540]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a610:	47a0      	blx	r4
    a612:	fab0 f080 	clz	r0, r0
    a616:	0940      	lsrs	r0, r0, #5
    a618:	e7e0      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a61a:	8862      	ldrh	r2, [r4, #2]
    a61c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a61e:	b1ca      	cbz	r2, a654 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a620:	4b83      	ldr	r3, [pc, #524]	; (a830 <usbdc_cb_ctl_req+0x284>)
    a622:	681b      	ldr	r3, [r3, #0]
    a624:	6859      	ldr	r1, [r3, #4]
    a626:	6818      	ldr	r0, [r3, #0]
    a628:	4b82      	ldr	r3, [pc, #520]	; (a834 <usbdc_cb_ctl_req+0x288>)
    a62a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a62c:	2800      	cmp	r0, #0
    a62e:	f000 81be 	beq.w	a9ae <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    a632:	78c2      	ldrb	r2, [r0, #3]
    a634:	7881      	ldrb	r1, [r0, #2]
    a636:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a63a:	fa10 f181 	uxtah	r1, r0, r1
    a63e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a640:	2204      	movs	r2, #4
    a642:	4b7d      	ldr	r3, [pc, #500]	; (a838 <usbdc_cb_ctl_req+0x28c>)
    a644:	4798      	blx	r3
    a646:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a648:	b130      	cbz	r0, a658 <usbdc_cb_ctl_req+0xac>
    a64a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a64c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a830 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a650:	4f79      	ldr	r7, [pc, #484]	; (a838 <usbdc_cb_ctl_req+0x28c>)
    a652:	e018      	b.n	a686 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a654:	4b79      	ldr	r3, [pc, #484]	; (a83c <usbdc_cb_ctl_req+0x290>)
    a656:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a658:	2301      	movs	r3, #1
    a65a:	2200      	movs	r2, #0
    a65c:	4611      	mov	r1, r2
    a65e:	4628      	mov	r0, r5
    a660:	4c72      	ldr	r4, [pc, #456]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a662:	47a0      	blx	r4
    a664:	fab0 f080 	clz	r0, r0
    a668:	0940      	lsrs	r0, r0, #5
    a66a:	e7b7      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a66c:	464c      	mov	r4, r9
    a66e:	e000      	b.n	a672 <usbdc_cb_ctl_req+0xc6>
    a670:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a672:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a674:	7803      	ldrb	r3, [r0, #0]
    a676:	4418      	add	r0, r3
    a678:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a67a:	2204      	movs	r2, #4
    a67c:	9901      	ldr	r1, [sp, #4]
    a67e:	47b8      	blx	r7
    a680:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a682:	2800      	cmp	r0, #0
    a684:	d0e8      	beq.n	a658 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a686:	f890 9002 	ldrb.w	r9, [r0, #2]
    a68a:	45a1      	cmp	r9, r4
    a68c:	d0f1      	beq.n	a672 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a68e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a692:	2c00      	cmp	r4, #0
    a694:	d0ea      	beq.n	a66c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a696:	2600      	movs	r6, #0
    a698:	6863      	ldr	r3, [r4, #4]
    a69a:	466a      	mov	r2, sp
    a69c:	4631      	mov	r1, r6
    a69e:	4620      	mov	r0, r4
    a6a0:	4798      	blx	r3
    a6a2:	2800      	cmp	r0, #0
    a6a4:	d0e4      	beq.n	a670 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a6a6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a6a8:	2c00      	cmp	r4, #0
    a6aa:	d1f5      	bne.n	a698 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a6ac:	464c      	mov	r4, r9
    a6ae:	e7e0      	b.n	a672 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a6b0:	f003 031f 	and.w	r3, r3, #31
    a6b4:	2b02      	cmp	r3, #2
    a6b6:	f040 816e 	bne.w	a996 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a6ba:	88e3      	ldrh	r3, [r4, #6]
    a6bc:	b10b      	cbz	r3, a6c2 <usbdc_cb_ctl_req+0x116>
			return false;
    a6be:	2000      	movs	r0, #0
    a6c0:	e78c      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a6c2:	88a0      	ldrh	r0, [r4, #4]
    a6c4:	2100      	movs	r1, #0
    a6c6:	b2c0      	uxtb	r0, r0
    a6c8:	4b5d      	ldr	r3, [pc, #372]	; (a840 <usbdc_cb_ctl_req+0x294>)
    a6ca:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a6cc:	2301      	movs	r3, #1
    a6ce:	2200      	movs	r2, #0
    a6d0:	4611      	mov	r1, r2
    a6d2:	4628      	mov	r0, r5
    a6d4:	4c55      	ldr	r4, [pc, #340]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a6d6:	47a0      	blx	r4
		return true;
    a6d8:	2001      	movs	r0, #1
    a6da:	e77f      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a6dc:	f003 031f 	and.w	r3, r3, #31
    a6e0:	2b02      	cmp	r3, #2
    a6e2:	f040 815a 	bne.w	a99a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a6e6:	88e3      	ldrh	r3, [r4, #6]
    a6e8:	b10b      	cbz	r3, a6ee <usbdc_cb_ctl_req+0x142>
			return false;
    a6ea:	2000      	movs	r0, #0
    a6ec:	e776      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a6ee:	88a0      	ldrh	r0, [r4, #4]
    a6f0:	2101      	movs	r1, #1
    a6f2:	b2c0      	uxtb	r0, r0
    a6f4:	4b52      	ldr	r3, [pc, #328]	; (a840 <usbdc_cb_ctl_req+0x294>)
    a6f6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a6f8:	2301      	movs	r3, #1
    a6fa:	2200      	movs	r2, #0
    a6fc:	4611      	mov	r1, r2
    a6fe:	4628      	mov	r0, r5
    a700:	4c4a      	ldr	r4, [pc, #296]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a702:	47a0      	blx	r4
		return true;
    a704:	2001      	movs	r0, #1
    a706:	e769      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a708:	8866      	ldrh	r6, [r4, #2]
    a70a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a70c:	4a48      	ldr	r2, [pc, #288]	; (a830 <usbdc_cb_ctl_req+0x284>)
    a70e:	6813      	ldr	r3, [r2, #0]
    a710:	7ed2      	ldrb	r2, [r2, #27]
    a712:	6859      	ldr	r1, [r3, #4]
    a714:	6818      	ldr	r0, [r3, #0]
    a716:	4b47      	ldr	r3, [pc, #284]	; (a834 <usbdc_cb_ctl_req+0x288>)
    a718:	4798      	blx	r3
	if (NULL == ifc) {
    a71a:	2800      	cmp	r0, #0
    a71c:	d045      	beq.n	a7aa <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a71e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a720:	78c2      	ldrb	r2, [r0, #3]
    a722:	7881      	ldrb	r1, [r0, #2]
    a724:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a728:	fa10 f181 	uxtah	r1, r0, r1
    a72c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a72e:	2204      	movs	r2, #4
    a730:	4b41      	ldr	r3, [pc, #260]	; (a838 <usbdc_cb_ctl_req+0x28c>)
    a732:	4798      	blx	r3
    a734:	4603      	mov	r3, r0
    a736:	2800      	cmp	r0, #0
    a738:	d039      	beq.n	a7ae <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a73a:	2704      	movs	r7, #4
    a73c:	4d3e      	ldr	r5, [pc, #248]	; (a838 <usbdc_cb_ctl_req+0x28c>)
    a73e:	e008      	b.n	a752 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a740:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a742:	7803      	ldrb	r3, [r0, #0]
    a744:	4418      	add	r0, r3
    a746:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a748:	463a      	mov	r2, r7
    a74a:	9901      	ldr	r1, [sp, #4]
    a74c:	47a8      	blx	r5
		if (NULL == ifc) {
    a74e:	4603      	mov	r3, r0
    a750:	b378      	cbz	r0, a7b2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a752:	789a      	ldrb	r2, [r3, #2]
    a754:	42a2      	cmp	r2, r4
    a756:	d1f3      	bne.n	a740 <usbdc_cb_ctl_req+0x194>
    a758:	78da      	ldrb	r2, [r3, #3]
    a75a:	42b2      	cmp	r2, r6
    a75c:	d1f0      	bne.n	a740 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a75e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a760:	4b33      	ldr	r3, [pc, #204]	; (a830 <usbdc_cb_ctl_req+0x284>)
    a762:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a764:	b33d      	cbz	r5, a7b6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a766:	2701      	movs	r7, #1
    a768:	686b      	ldr	r3, [r5, #4]
    a76a:	466a      	mov	r2, sp
    a76c:	4639      	mov	r1, r7
    a76e:	4628      	mov	r0, r5
    a770:	4798      	blx	r3
    a772:	b120      	cbz	r0, a77e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a774:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a776:	2d00      	cmp	r5, #0
    a778:	d1f6      	bne.n	a768 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a77a:	2000      	movs	r0, #0
    a77c:	e72e      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a77e:	686b      	ldr	r3, [r5, #4]
    a780:	466a      	mov	r2, sp
    a782:	2100      	movs	r1, #0
    a784:	4628      	mov	r0, r5
    a786:	4798      	blx	r3
    a788:	b9b8      	cbnz	r0, a7ba <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a78a:	b136      	cbz	r6, a79a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a78c:	4a28      	ldr	r2, [pc, #160]	; (a830 <usbdc_cb_ctl_req+0x284>)
    a78e:	2301      	movs	r3, #1
    a790:	fa03 f404 	lsl.w	r4, r3, r4
    a794:	7f53      	ldrb	r3, [r2, #29]
    a796:	4323      	orrs	r3, r4
    a798:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a79a:	2300      	movs	r3, #0
    a79c:	461a      	mov	r2, r3
    a79e:	4619      	mov	r1, r3
    a7a0:	4618      	mov	r0, r3
    a7a2:	4c22      	ldr	r4, [pc, #136]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a7a4:	47a0      	blx	r4
			return true;
    a7a6:	2001      	movs	r0, #1
    a7a8:	e718      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a7aa:	2000      	movs	r0, #0
    a7ac:	e716      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a7ae:	2000      	movs	r0, #0
    a7b0:	e714      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
			return false;
    a7b2:	2000      	movs	r0, #0
    a7b4:	e712      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	return false;
    a7b6:	2000      	movs	r0, #0
    a7b8:	e710      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
			return false;
    a7ba:	2000      	movs	r0, #0
    a7bc:	e70e      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a7be:	7862      	ldrb	r2, [r4, #1]
    a7c0:	2a0a      	cmp	r2, #10
    a7c2:	f200 80ec 	bhi.w	a99e <usbdc_cb_ctl_req+0x3f2>
    a7c6:	e8df f012 	tbh	[pc, r2, lsl #1]
    a7ca:	008e      	.short	0x008e
    a7cc:	00ea00ea 	.word	0x00ea00ea
    a7d0:	00ea00ea 	.word	0x00ea00ea
    a7d4:	000b00ea 	.word	0x000b00ea
    a7d8:	008200ea 	.word	0x008200ea
    a7dc:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a7e0:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a7e2:	0a13      	lsrs	r3, r2, #8
    a7e4:	2b02      	cmp	r3, #2
    a7e6:	d02d      	beq.n	a844 <usbdc_cb_ctl_req+0x298>
    a7e8:	2b03      	cmp	r3, #3
    a7ea:	d050      	beq.n	a88e <usbdc_cb_ctl_req+0x2e2>
    a7ec:	2b01      	cmp	r3, #1
    a7ee:	d001      	beq.n	a7f4 <usbdc_cb_ctl_req+0x248>
	return false;
    a7f0:	2000      	movs	r0, #0
    a7f2:	e6f3      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a7f4:	88e2      	ldrh	r2, [r4, #6]
    a7f6:	2a12      	cmp	r2, #18
    a7f8:	bf28      	it	cs
    a7fa:	2212      	movcs	r2, #18
    a7fc:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a7fe:	4b0c      	ldr	r3, [pc, #48]	; (a830 <usbdc_cb_ctl_req+0x284>)
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	2201      	movs	r2, #1
    a804:	6859      	ldr	r1, [r3, #4]
    a806:	6818      	ldr	r0, [r3, #0]
    a808:	4b0b      	ldr	r3, [pc, #44]	; (a838 <usbdc_cb_ctl_req+0x28c>)
    a80a:	4798      	blx	r3
	if (!dev_desc) {
    a80c:	4601      	mov	r1, r0
    a80e:	2800      	cmp	r0, #0
    a810:	f000 80c7 	beq.w	a9a2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a814:	2300      	movs	r3, #0
    a816:	4622      	mov	r2, r4
    a818:	4628      	mov	r0, r5
    a81a:	4c04      	ldr	r4, [pc, #16]	; (a82c <usbdc_cb_ctl_req+0x280>)
    a81c:	47a0      	blx	r4
    a81e:	fab0 f080 	clz	r0, r0
    a822:	0940      	lsrs	r0, r0, #5
    a824:	e6da      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
    a826:	bf00      	nop
    a828:	0000a441 	.word	0x0000a441
    a82c:	0000a58d 	.word	0x0000a58d
    a830:	20000e24 	.word	0x20000e24
    a834:	0000ab51 	.word	0x0000ab51
    a838:	0000aad1 	.word	0x0000aad1
    a83c:	0000a3f5 	.word	0x0000a3f5
    a840:	00005591 	.word	0x00005591
	uint16_t length   = req->wLength;
    a844:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a846:	4b5b      	ldr	r3, [pc, #364]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a848:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a84a:	681b      	ldr	r3, [r3, #0]
    a84c:	3201      	adds	r2, #1
    a84e:	b2d2      	uxtb	r2, r2
    a850:	6859      	ldr	r1, [r3, #4]
    a852:	6818      	ldr	r0, [r3, #0]
    a854:	4b58      	ldr	r3, [pc, #352]	; (a9b8 <usbdc_cb_ctl_req+0x40c>)
    a856:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a858:	4601      	mov	r1, r0
    a85a:	2800      	cmp	r0, #0
    a85c:	f000 80a3 	beq.w	a9a6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a860:	78c3      	ldrb	r3, [r0, #3]
    a862:	7882      	ldrb	r2, [r0, #2]
    a864:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a868:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a86a:	4294      	cmp	r4, r2
    a86c:	d90d      	bls.n	a88a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a86e:	3e01      	subs	r6, #1
    a870:	4226      	tst	r6, r4
    a872:	bf0c      	ite	eq
    a874:	2301      	moveq	r3, #1
    a876:	2300      	movne	r3, #0
		length = total_len;
    a878:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a87a:	4622      	mov	r2, r4
    a87c:	4628      	mov	r0, r5
    a87e:	4c4f      	ldr	r4, [pc, #316]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a880:	47a0      	blx	r4
    a882:	fab0 f080 	clz	r0, r0
    a886:	0940      	lsrs	r0, r0, #5
    a888:	e6a8      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a88a:	2300      	movs	r3, #0
    a88c:	e7f5      	b.n	a87a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a88e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a890:	4b48      	ldr	r3, [pc, #288]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a892:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a894:	681b      	ldr	r3, [r3, #0]
    a896:	b2d2      	uxtb	r2, r2
    a898:	6859      	ldr	r1, [r3, #4]
    a89a:	6818      	ldr	r0, [r3, #0]
    a89c:	4b48      	ldr	r3, [pc, #288]	; (a9c0 <usbdc_cb_ctl_req+0x414>)
    a89e:	4798      	blx	r3
	if (NULL == str_desc) {
    a8a0:	4601      	mov	r1, r0
    a8a2:	2800      	cmp	r0, #0
    a8a4:	f000 8081 	beq.w	a9aa <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a8a8:	7802      	ldrb	r2, [r0, #0]
    a8aa:	4294      	cmp	r4, r2
    a8ac:	d90d      	bls.n	a8ca <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a8ae:	3e01      	subs	r6, #1
    a8b0:	4226      	tst	r6, r4
    a8b2:	bf0c      	ite	eq
    a8b4:	2301      	moveq	r3, #1
    a8b6:	2300      	movne	r3, #0
		length = str_desc[0];
    a8b8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a8ba:	4622      	mov	r2, r4
    a8bc:	4628      	mov	r0, r5
    a8be:	4c3f      	ldr	r4, [pc, #252]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a8c0:	47a0      	blx	r4
    a8c2:	fab0 f080 	clz	r0, r0
    a8c6:	0940      	lsrs	r0, r0, #5
    a8c8:	e688      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a8ca:	2300      	movs	r3, #0
    a8cc:	e7f5      	b.n	a8ba <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a8ce:	4939      	ldr	r1, [pc, #228]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a8d0:	694b      	ldr	r3, [r1, #20]
    a8d2:	7eca      	ldrb	r2, [r1, #27]
    a8d4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a8d6:	2300      	movs	r3, #0
    a8d8:	2201      	movs	r2, #1
    a8da:	6949      	ldr	r1, [r1, #20]
    a8dc:	4628      	mov	r0, r5
    a8de:	4c37      	ldr	r4, [pc, #220]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a8e0:	47a0      	blx	r4
		return true;
    a8e2:	2001      	movs	r0, #1
    a8e4:	e67a      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a8e6:	f003 031f 	and.w	r3, r3, #31
    a8ea:	2b01      	cmp	r3, #1
    a8ec:	d903      	bls.n	a8f6 <usbdc_cb_ctl_req+0x34a>
    a8ee:	2b02      	cmp	r3, #2
    a8f0:	d010      	beq.n	a914 <usbdc_cb_ctl_req+0x368>
		return false;
    a8f2:	2000      	movs	r0, #0
    a8f4:	e672      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		st = 0;
    a8f6:	2300      	movs	r3, #0
    a8f8:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a8fa:	492e      	ldr	r1, [pc, #184]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a8fc:	694b      	ldr	r3, [r1, #20]
    a8fe:	f8bd 2000 	ldrh.w	r2, [sp]
    a902:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a904:	2300      	movs	r3, #0
    a906:	2202      	movs	r2, #2
    a908:	6949      	ldr	r1, [r1, #20]
    a90a:	4628      	mov	r0, r5
    a90c:	4c2b      	ldr	r4, [pc, #172]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a90e:	47a0      	blx	r4
	return true;
    a910:	2001      	movs	r0, #1
    a912:	e663      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a914:	88a0      	ldrh	r0, [r4, #4]
    a916:	2102      	movs	r1, #2
    a918:	b2c0      	uxtb	r0, r0
    a91a:	4b2a      	ldr	r3, [pc, #168]	; (a9c4 <usbdc_cb_ctl_req+0x418>)
    a91c:	4798      	blx	r3
		if (st < 0) {
    a91e:	2800      	cmp	r0, #0
    a920:	db03      	blt.n	a92a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a922:	f000 0001 	and.w	r0, r0, #1
    a926:	9000      	str	r0, [sp, #0]
    a928:	e7e7      	b.n	a8fa <usbdc_cb_ctl_req+0x34e>
			return false;
    a92a:	2000      	movs	r0, #0
    a92c:	e656      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a92e:	4b21      	ldr	r3, [pc, #132]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a930:	7f5b      	ldrb	r3, [r3, #29]
    a932:	88a2      	ldrh	r2, [r4, #4]
    a934:	4113      	asrs	r3, r2
    a936:	f013 0f01 	tst.w	r3, #1
    a93a:	d012      	beq.n	a962 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a93c:	4b1d      	ldr	r3, [pc, #116]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a93e:	691d      	ldr	r5, [r3, #16]
	return false;
    a940:	2000      	movs	r0, #0
	while (NULL != func) {
    a942:	2d00      	cmp	r5, #0
    a944:	f43f ae4a 	beq.w	a5dc <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a948:	2602      	movs	r6, #2
    a94a:	686b      	ldr	r3, [r5, #4]
    a94c:	4622      	mov	r2, r4
    a94e:	4631      	mov	r1, r6
    a950:	4628      	mov	r0, r5
    a952:	4798      	blx	r3
    a954:	2800      	cmp	r0, #0
    a956:	da0f      	bge.n	a978 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a958:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a95a:	2d00      	cmp	r5, #0
    a95c:	d1f5      	bne.n	a94a <usbdc_cb_ctl_req+0x39e>
	return false;
    a95e:	2000      	movs	r0, #0
    a960:	e63c      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a962:	4914      	ldr	r1, [pc, #80]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a964:	694b      	ldr	r3, [r1, #20]
    a966:	2000      	movs	r0, #0
    a968:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a96a:	4603      	mov	r3, r0
    a96c:	2201      	movs	r2, #1
    a96e:	6949      	ldr	r1, [r1, #20]
    a970:	4c12      	ldr	r4, [pc, #72]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a972:	47a0      	blx	r4
		return true;
    a974:	2001      	movs	r0, #1
    a976:	e631      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a978:	490e      	ldr	r1, [pc, #56]	; (a9b4 <usbdc_cb_ctl_req+0x408>)
    a97a:	694b      	ldr	r3, [r1, #20]
    a97c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a97e:	2300      	movs	r3, #0
    a980:	2201      	movs	r2, #1
    a982:	6949      	ldr	r1, [r1, #20]
    a984:	4618      	mov	r0, r3
    a986:	4c0d      	ldr	r4, [pc, #52]	; (a9bc <usbdc_cb_ctl_req+0x410>)
    a988:	47a0      	blx	r4
			return true;
    a98a:	2001      	movs	r0, #1
    a98c:	e626      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return true;
    a98e:	2001      	movs	r0, #1
    a990:	e624      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a992:	2000      	movs	r0, #0
    a994:	e622      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a996:	2000      	movs	r0, #0
    a998:	e620      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a99a:	2000      	movs	r0, #0
    a99c:	e61e      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a99e:	2000      	movs	r0, #0
    a9a0:	e61c      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a9a2:	2000      	movs	r0, #0
    a9a4:	e61a      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a9a6:	2000      	movs	r0, #0
    a9a8:	e618      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
		return false;
    a9aa:	2000      	movs	r0, #0
    a9ac:	e616      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
			return false;
    a9ae:	2000      	movs	r0, #0
    a9b0:	e614      	b.n	a5dc <usbdc_cb_ctl_req+0x30>
    a9b2:	bf00      	nop
    a9b4:	20000e24 	.word	0x20000e24
    a9b8:	0000ab51 	.word	0x0000ab51
    a9bc:	0000a58d 	.word	0x0000a58d
    a9c0:	0000abb9 	.word	0x0000abb9
    a9c4:	00005591 	.word	0x00005591

0000a9c8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a9c8:	b508      	push	{r3, lr}
	switch (type) {
    a9ca:	2801      	cmp	r0, #1
    a9cc:	d007      	beq.n	a9de <usbdc_register_handler+0x16>
    a9ce:	b110      	cbz	r0, a9d6 <usbdc_register_handler+0xe>
    a9d0:	2802      	cmp	r0, #2
    a9d2:	d008      	beq.n	a9e6 <usbdc_register_handler+0x1e>
    a9d4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a9d6:	4806      	ldr	r0, [pc, #24]	; (a9f0 <usbdc_register_handler+0x28>)
    a9d8:	4b06      	ldr	r3, [pc, #24]	; (a9f4 <usbdc_register_handler+0x2c>)
    a9da:	4798      	blx	r3
		break;
    a9dc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a9de:	4806      	ldr	r0, [pc, #24]	; (a9f8 <usbdc_register_handler+0x30>)
    a9e0:	4b04      	ldr	r3, [pc, #16]	; (a9f4 <usbdc_register_handler+0x2c>)
    a9e2:	4798      	blx	r3
		break;
    a9e4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a9e6:	4805      	ldr	r0, [pc, #20]	; (a9fc <usbdc_register_handler+0x34>)
    a9e8:	4b02      	ldr	r3, [pc, #8]	; (a9f4 <usbdc_register_handler+0x2c>)
    a9ea:	4798      	blx	r3
    a9ec:	bd08      	pop	{r3, pc}
    a9ee:	bf00      	nop
    a9f0:	20000e28 	.word	0x20000e28
    a9f4:	000056a1 	.word	0x000056a1
    a9f8:	20000e2c 	.word	0x20000e2c
    a9fc:	20000e30 	.word	0x20000e30

0000aa00 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    aa00:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    aa02:	4605      	mov	r5, r0
    aa04:	f240 3255 	movw	r2, #853	; 0x355
    aa08:	490c      	ldr	r1, [pc, #48]	; (aa3c <usbdc_init+0x3c>)
    aa0a:	3000      	adds	r0, #0
    aa0c:	bf18      	it	ne
    aa0e:	2001      	movne	r0, #1
    aa10:	4b0b      	ldr	r3, [pc, #44]	; (aa40 <usbdc_init+0x40>)
    aa12:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    aa14:	4b0b      	ldr	r3, [pc, #44]	; (aa44 <usbdc_init+0x44>)
    aa16:	4798      	blx	r3
	if (rc < 0) {
    aa18:	2800      	cmp	r0, #0
    aa1a:	db0e      	blt.n	aa3a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    aa1c:	4c0a      	ldr	r4, [pc, #40]	; (aa48 <usbdc_init+0x48>)
    aa1e:	2220      	movs	r2, #32
    aa20:	2100      	movs	r1, #0
    aa22:	4620      	mov	r0, r4
    aa24:	4b09      	ldr	r3, [pc, #36]	; (aa4c <usbdc_init+0x4c>)
    aa26:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    aa28:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    aa2a:	4909      	ldr	r1, [pc, #36]	; (aa50 <usbdc_init+0x50>)
    aa2c:	2000      	movs	r0, #0
    aa2e:	4c09      	ldr	r4, [pc, #36]	; (aa54 <usbdc_init+0x54>)
    aa30:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    aa32:	4909      	ldr	r1, [pc, #36]	; (aa58 <usbdc_init+0x58>)
    aa34:	2001      	movs	r0, #1
    aa36:	47a0      	blx	r4

	return 0;
    aa38:	2000      	movs	r0, #0
}
    aa3a:	bd38      	pop	{r3, r4, r5, pc}
    aa3c:	0000c5f4 	.word	0x0000c5f4
    aa40:	00005645 	.word	0x00005645
    aa44:	000052f9 	.word	0x000052f9
    aa48:	20000e24 	.word	0x20000e24
    aa4c:	0000b59f 	.word	0x0000b59f
    aa50:	0000a481 	.word	0x0000a481
    aa54:	00005361 	.word	0x00005361
    aa58:	0000a56d 	.word	0x0000a56d

0000aa5c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    aa5c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    aa5e:	4601      	mov	r1, r0
    aa60:	4801      	ldr	r0, [pc, #4]	; (aa68 <usbdc_register_function+0xc>)
    aa62:	4b02      	ldr	r3, [pc, #8]	; (aa6c <usbdc_register_function+0x10>)
    aa64:	4798      	blx	r3
    aa66:	bd08      	pop	{r3, pc}
    aa68:	20000e34 	.word	0x20000e34
    aa6c:	000056a1 	.word	0x000056a1

0000aa70 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    aa70:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    aa72:	4b0a      	ldr	r3, [pc, #40]	; (aa9c <usbdc_start+0x2c>)
    aa74:	7e9b      	ldrb	r3, [r3, #26]
    aa76:	b95b      	cbnz	r3, aa90 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    aa78:	b168      	cbz	r0, aa96 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    aa7a:	4b08      	ldr	r3, [pc, #32]	; (aa9c <usbdc_start+0x2c>)
    aa7c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    aa7e:	6802      	ldr	r2, [r0, #0]
    aa80:	79d2      	ldrb	r2, [r2, #7]
    aa82:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    aa84:	2201      	movs	r2, #1
    aa86:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    aa88:	4b05      	ldr	r3, [pc, #20]	; (aaa0 <usbdc_start+0x30>)
    aa8a:	4798      	blx	r3
	return ERR_NONE;
    aa8c:	2000      	movs	r0, #0
    aa8e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    aa90:	f06f 0003 	mvn.w	r0, #3
    aa94:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    aa96:	f06f 0008 	mvn.w	r0, #8
}
    aa9a:	bd08      	pop	{r3, pc}
    aa9c:	20000e24 	.word	0x20000e24
    aaa0:	0000536d 	.word	0x0000536d

0000aaa4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    aaa4:	b508      	push	{r3, lr}
	usb_d_attach();
    aaa6:	4b01      	ldr	r3, [pc, #4]	; (aaac <usbdc_attach+0x8>)
    aaa8:	4798      	blx	r3
    aaaa:	bd08      	pop	{r3, pc}
    aaac:	00005379 	.word	0x00005379

0000aab0 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    aab0:	4b01      	ldr	r3, [pc, #4]	; (aab8 <usbdc_get_ctrl_buffer+0x8>)
    aab2:	6958      	ldr	r0, [r3, #20]
    aab4:	4770      	bx	lr
    aab6:	bf00      	nop
    aab8:	20000e24 	.word	0x20000e24

0000aabc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    aabc:	4b03      	ldr	r3, [pc, #12]	; (aacc <usbdc_get_state+0x10>)
    aabe:	7e98      	ldrb	r0, [r3, #26]
    aac0:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    aac4:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    aac6:	bf18      	it	ne
    aac8:	2010      	movne	r0, #16
    aaca:	4770      	bx	lr
    aacc:	20000e24 	.word	0x20000e24

0000aad0 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    aad0:	4288      	cmp	r0, r1
    aad2:	d214      	bcs.n	aafe <usb_find_desc+0x2e>
	return desc[0];
    aad4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    aad6:	2b01      	cmp	r3, #1
    aad8:	d913      	bls.n	ab02 <usb_find_desc+0x32>
{
    aada:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    aadc:	7844      	ldrb	r4, [r0, #1]
    aade:	4294      	cmp	r4, r2
    aae0:	d00a      	beq.n	aaf8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    aae2:	4418      	add	r0, r3
	while (desc < eof) {
    aae4:	4281      	cmp	r1, r0
    aae6:	d906      	bls.n	aaf6 <usb_find_desc+0x26>
	return desc[0];
    aae8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    aaea:	2b01      	cmp	r3, #1
    aaec:	d90b      	bls.n	ab06 <usb_find_desc+0x36>
	return desc[1];
    aaee:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    aaf0:	4294      	cmp	r4, r2
    aaf2:	d1f6      	bne.n	aae2 <usb_find_desc+0x12>
    aaf4:	e000      	b.n	aaf8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    aaf6:	2000      	movs	r0, #0
}
    aaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
    aafc:	4770      	bx	lr
	return NULL;
    aafe:	2000      	movs	r0, #0
    ab00:	4770      	bx	lr
		_desc_len_check();
    ab02:	2000      	movs	r0, #0
    ab04:	4770      	bx	lr
    ab06:	2000      	movs	r0, #0
    ab08:	e7f6      	b.n	aaf8 <usb_find_desc+0x28>

0000ab0a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ab0a:	4288      	cmp	r0, r1
    ab0c:	d216      	bcs.n	ab3c <usb_find_ep_desc+0x32>
	return desc[0];
    ab0e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ab10:	2b01      	cmp	r3, #1
    ab12:	d915      	bls.n	ab40 <usb_find_ep_desc+0x36>
	return desc[1];
    ab14:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ab16:	2a04      	cmp	r2, #4
    ab18:	d014      	beq.n	ab44 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ab1a:	2a05      	cmp	r2, #5
    ab1c:	d00b      	beq.n	ab36 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    ab1e:	4418      	add	r0, r3
	while (desc < eof) {
    ab20:	4281      	cmp	r1, r0
    ab22:	d909      	bls.n	ab38 <usb_find_ep_desc+0x2e>
	return desc[0];
    ab24:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ab26:	2b01      	cmp	r3, #1
    ab28:	d90e      	bls.n	ab48 <usb_find_ep_desc+0x3e>
	return desc[1];
    ab2a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ab2c:	2a04      	cmp	r2, #4
    ab2e:	d00d      	beq.n	ab4c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ab30:	2a05      	cmp	r2, #5
    ab32:	d1f4      	bne.n	ab1e <usb_find_ep_desc+0x14>
    ab34:	e00b      	b.n	ab4e <usb_find_ep_desc+0x44>
    ab36:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    ab38:	2000      	movs	r0, #0
    ab3a:	4770      	bx	lr
    ab3c:	2000      	movs	r0, #0
    ab3e:	4770      	bx	lr
		_desc_len_check();
    ab40:	2000      	movs	r0, #0
    ab42:	4770      	bx	lr
	return NULL;
    ab44:	2000      	movs	r0, #0
    ab46:	4770      	bx	lr
		_desc_len_check();
    ab48:	2000      	movs	r0, #0
    ab4a:	4770      	bx	lr
	return NULL;
    ab4c:	2000      	movs	r0, #0
}
    ab4e:	4770      	bx	lr

0000ab50 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ab50:	b538      	push	{r3, r4, r5, lr}
    ab52:	460c      	mov	r4, r1
    ab54:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ab56:	2202      	movs	r2, #2
    ab58:	4b16      	ldr	r3, [pc, #88]	; (abb4 <usb_find_cfg_desc+0x64>)
    ab5a:	4798      	blx	r3
	if (!desc) {
    ab5c:	4603      	mov	r3, r0
    ab5e:	b1e8      	cbz	r0, ab9c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    ab60:	4284      	cmp	r4, r0
    ab62:	d91d      	bls.n	aba0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    ab64:	7802      	ldrb	r2, [r0, #0]
    ab66:	2a01      	cmp	r2, #1
    ab68:	d91c      	bls.n	aba4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    ab6a:	7842      	ldrb	r2, [r0, #1]
    ab6c:	2a02      	cmp	r2, #2
    ab6e:	d11b      	bne.n	aba8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    ab70:	7942      	ldrb	r2, [r0, #5]
    ab72:	42aa      	cmp	r2, r5
    ab74:	d012      	beq.n	ab9c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    ab76:	78d9      	ldrb	r1, [r3, #3]
    ab78:	789a      	ldrb	r2, [r3, #2]
    ab7a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ab7e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    ab82:	429c      	cmp	r4, r3
    ab84:	d909      	bls.n	ab9a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    ab86:	781a      	ldrb	r2, [r3, #0]
    ab88:	2a01      	cmp	r2, #1
    ab8a:	d90f      	bls.n	abac <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    ab8c:	785a      	ldrb	r2, [r3, #1]
    ab8e:	2a02      	cmp	r2, #2
    ab90:	d10e      	bne.n	abb0 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    ab92:	795a      	ldrb	r2, [r3, #5]
    ab94:	42aa      	cmp	r2, r5
    ab96:	d1ee      	bne.n	ab76 <usb_find_cfg_desc+0x26>
    ab98:	e000      	b.n	ab9c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    ab9a:	2300      	movs	r3, #0
}
    ab9c:	4618      	mov	r0, r3
    ab9e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    aba0:	2300      	movs	r3, #0
    aba2:	e7fb      	b.n	ab9c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    aba4:	2300      	movs	r3, #0
    aba6:	e7f9      	b.n	ab9c <usb_find_cfg_desc+0x4c>
	return NULL;
    aba8:	2300      	movs	r3, #0
    abaa:	e7f7      	b.n	ab9c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    abac:	2300      	movs	r3, #0
    abae:	e7f5      	b.n	ab9c <usb_find_cfg_desc+0x4c>
	return NULL;
    abb0:	2300      	movs	r3, #0
    abb2:	e7f3      	b.n	ab9c <usb_find_cfg_desc+0x4c>
    abb4:	0000aad1 	.word	0x0000aad1

0000abb8 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    abb8:	4288      	cmp	r0, r1
    abba:	d217      	bcs.n	abec <usb_find_str_desc+0x34>
{
    abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abc0:	460d      	mov	r5, r1
    abc2:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    abc4:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    abc6:	f04f 0803 	mov.w	r8, #3
    abca:	4f0c      	ldr	r7, [pc, #48]	; (abfc <usb_find_str_desc+0x44>)
    abcc:	4642      	mov	r2, r8
    abce:	4629      	mov	r1, r5
    abd0:	47b8      	blx	r7
		if (desc) {
    abd2:	4603      	mov	r3, r0
    abd4:	b170      	cbz	r0, abf4 <usb_find_str_desc+0x3c>
	return desc[0];
    abd6:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    abd8:	2801      	cmp	r0, #1
    abda:	d90a      	bls.n	abf2 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    abdc:	42a6      	cmp	r6, r4
    abde:	d009      	beq.n	abf4 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    abe0:	4418      	add	r0, r3
    abe2:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    abe4:	4285      	cmp	r5, r0
    abe6:	d8f1      	bhi.n	abcc <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    abe8:	2300      	movs	r3, #0
    abea:	e003      	b.n	abf4 <usb_find_str_desc+0x3c>
    abec:	2300      	movs	r3, #0
}
    abee:	4618      	mov	r0, r3
    abf0:	4770      	bx	lr
			_desc_len_check();
    abf2:	2300      	movs	r3, #0
}
    abf4:	4618      	mov	r0, r3
    abf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abfa:	bf00      	nop
    abfc:	0000aad1 	.word	0x0000aad1

0000ac00 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    ac00:	4b3a      	ldr	r3, [pc, #232]	; (acec <hiddf_demo_sof_event+0xec>)
    ac02:	791b      	ldrb	r3, [r3, #4]
    ac04:	2b0a      	cmp	r3, #10
    ac06:	d803      	bhi.n	ac10 <hiddf_demo_sof_event+0x10>
    ac08:	3301      	adds	r3, #1
    ac0a:	4a38      	ldr	r2, [pc, #224]	; (acec <hiddf_demo_sof_event+0xec>)
    ac0c:	7113      	strb	r3, [r2, #4]
    ac0e:	4770      	bx	lr
{
    ac10:	b570      	push	{r4, r5, r6, lr}
    ac12:	b084      	sub	sp, #16
		interval = 0;
    ac14:	4b35      	ldr	r3, [pc, #212]	; (acec <hiddf_demo_sof_event+0xec>)
    ac16:	2200      	movs	r2, #0
    ac18:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    ac1a:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    ac1c:	a801      	add	r0, sp, #4
    ac1e:	4b34      	ldr	r3, [pc, #208]	; (acf0 <hiddf_demo_sof_event+0xf0>)
    ac20:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ac22:	096b      	lsrs	r3, r5, #5
    ac24:	4933      	ldr	r1, [pc, #204]	; (acf4 <hiddf_demo_sof_event+0xf4>)
    ac26:	01db      	lsls	r3, r3, #7
    ac28:	18ca      	adds	r2, r1, r3
    ac2a:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ac2c:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ac2e:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ac30:	405c      	eors	r4, r3
    ac32:	400c      	ands	r4, r1
    ac34:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    ac36:	a801      	add	r0, sp, #4
    ac38:	4b2f      	ldr	r3, [pc, #188]	; (acf8 <hiddf_demo_sof_event+0xf8>)
    ac3a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ac3c:	f005 051f 	and.w	r5, r5, #31
    ac40:	2301      	movs	r3, #1
    ac42:	fa03 f505 	lsl.w	r5, r3, r5
    ac46:	4225      	tst	r5, r4
    ac48:	d040      	beq.n	accc <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    ac4a:	4b28      	ldr	r3, [pc, #160]	; (acec <hiddf_demo_sof_event+0xec>)
    ac4c:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    ac4e:	a802      	add	r0, sp, #8
    ac50:	4b27      	ldr	r3, [pc, #156]	; (acf0 <hiddf_demo_sof_event+0xf0>)
    ac52:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ac54:	096b      	lsrs	r3, r5, #5
    ac56:	4927      	ldr	r1, [pc, #156]	; (acf4 <hiddf_demo_sof_event+0xf4>)
    ac58:	01db      	lsls	r3, r3, #7
    ac5a:	18ca      	adds	r2, r1, r3
    ac5c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ac5e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ac60:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ac62:	405c      	eors	r4, r3
    ac64:	400c      	ands	r4, r1
    ac66:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    ac68:	a802      	add	r0, sp, #8
    ac6a:	4b23      	ldr	r3, [pc, #140]	; (acf8 <hiddf_demo_sof_event+0xf8>)
    ac6c:	4798      	blx	r3
    ac6e:	f005 051f 	and.w	r5, r5, #31
    ac72:	2301      	movs	r3, #1
    ac74:	fa03 f505 	lsl.w	r5, r3, r5
    ac78:	4225      	tst	r5, r4
    ac7a:	d02d      	beq.n	acd8 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    ac7c:	4d1b      	ldr	r5, [pc, #108]	; (acec <hiddf_demo_sof_event+0xec>)
    ac7e:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    ac80:	a803      	add	r0, sp, #12
    ac82:	4b1b      	ldr	r3, [pc, #108]	; (acf0 <hiddf_demo_sof_event+0xf0>)
    ac84:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ac86:	0973      	lsrs	r3, r6, #5
    ac88:	491a      	ldr	r1, [pc, #104]	; (acf4 <hiddf_demo_sof_event+0xf4>)
    ac8a:	01db      	lsls	r3, r3, #7
    ac8c:	18ca      	adds	r2, r1, r3
    ac8e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ac90:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ac92:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ac94:	405c      	eors	r4, r3
    ac96:	400c      	ands	r4, r1
    ac98:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    ac9a:	a803      	add	r0, sp, #12
    ac9c:	4b16      	ldr	r3, [pc, #88]	; (acf8 <hiddf_demo_sof_event+0xf8>)
    ac9e:	4798      	blx	r3
    aca0:	f006 061f 	and.w	r6, r6, #31
    aca4:	2301      	movs	r3, #1
    aca6:	40b3      	lsls	r3, r6
    aca8:	401c      	ands	r4, r3
    acaa:	bf0c      	ite	eq
    acac:	2301      	moveq	r3, #1
    acae:	2300      	movne	r3, #0
    acb0:	7d2a      	ldrb	r2, [r5, #20]
    acb2:	429a      	cmp	r2, r3
    acb4:	d008      	beq.n	acc8 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    acb6:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    acb8:	b19c      	cbz	r4, ace2 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    acba:	2200      	movs	r2, #0
    acbc:	4b0f      	ldr	r3, [pc, #60]	; (acfc <hiddf_demo_sof_event+0xfc>)
    acbe:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    acc0:	2101      	movs	r1, #1
    acc2:	480e      	ldr	r0, [pc, #56]	; (acfc <hiddf_demo_sof_event+0xfc>)
    acc4:	4b0e      	ldr	r3, [pc, #56]	; (ad00 <hiddf_demo_sof_event+0x100>)
    acc6:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    acc8:	b004      	add	sp, #16
    acca:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    accc:	4619      	mov	r1, r3
    acce:	f06f 0004 	mvn.w	r0, #4
    acd2:	4b0c      	ldr	r3, [pc, #48]	; (ad04 <hiddf_demo_sof_event+0x104>)
    acd4:	4798      	blx	r3
    acd6:	e7b8      	b.n	ac4a <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    acd8:	4619      	mov	r1, r3
    acda:	2005      	movs	r0, #5
    acdc:	4b09      	ldr	r3, [pc, #36]	; (ad04 <hiddf_demo_sof_event+0x104>)
    acde:	4798      	blx	r3
    ace0:	e7cc      	b.n	ac7c <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    ace2:	2201      	movs	r2, #1
    ace4:	4b05      	ldr	r3, [pc, #20]	; (acfc <hiddf_demo_sof_event+0xfc>)
    ace6:	709a      	strb	r2, [r3, #2]
    ace8:	e7ea      	b.n	acc0 <hiddf_demo_sof_event+0xc0>
    acea:	bf00      	nop
    acec:	20000e44 	.word	0x20000e44
    acf0:	00004355 	.word	0x00004355
    acf4:	41008000 	.word	0x41008000
    acf8:	00004363 	.word	0x00004363
    acfc:	200003b8 	.word	0x200003b8
    ad00:	00009e4d 	.word	0x00009e4d
    ad04:	0000a0e1 	.word	0x0000a0e1

0000ad08 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    ad08:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ad0a:	4805      	ldr	r0, [pc, #20]	; (ad20 <composite_device_init+0x18>)
    ad0c:	4b05      	ldr	r3, [pc, #20]	; (ad24 <composite_device_init+0x1c>)
    ad0e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    ad10:	4b05      	ldr	r3, [pc, #20]	; (ad28 <composite_device_init+0x20>)
    ad12:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    ad14:	4b05      	ldr	r3, [pc, #20]	; (ad2c <composite_device_init+0x24>)
    ad16:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    ad18:	4b05      	ldr	r3, [pc, #20]	; (ad30 <composite_device_init+0x28>)
    ad1a:	4798      	blx	r3
    ad1c:	bd08      	pop	{r3, pc}
    ad1e:	bf00      	nop
    ad20:	20000e5c 	.word	0x20000e5c
    ad24:	0000aa01 	.word	0x0000aa01
    ad28:	00009bc9 	.word	0x00009bc9
    ad2c:	0000a09d 	.word	0x0000a09d
    ad30:	00009e09 	.word	0x00009e09

0000ad34 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    ad34:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    ad36:	4803      	ldr	r0, [pc, #12]	; (ad44 <composite_device_start+0x10>)
    ad38:	4b03      	ldr	r3, [pc, #12]	; (ad48 <composite_device_start+0x14>)
    ad3a:	4798      	blx	r3
	usbdc_attach();
    ad3c:	4b03      	ldr	r3, [pc, #12]	; (ad4c <composite_device_start+0x18>)
    ad3e:	4798      	blx	r3
    ad40:	bd08      	pop	{r3, pc}
    ad42:	bf00      	nop
    ad44:	200003c4 	.word	0x200003c4
    ad48:	0000aa71 	.word	0x0000aa71
    ad4c:	0000aaa5 	.word	0x0000aaa5

0000ad50 <usb_init>:
		}
	}
}

void usb_init(void)
{
    ad50:	b508      	push	{r3, lr}

	composite_device_init();
    ad52:	4b01      	ldr	r3, [pc, #4]	; (ad58 <usb_init+0x8>)
    ad54:	4798      	blx	r3
    ad56:	bd08      	pop	{r3, pc}
    ad58:	0000ad09 	.word	0x0000ad09

0000ad5c <__aeabi_drsub>:
    ad5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ad60:	e002      	b.n	ad68 <__adddf3>
    ad62:	bf00      	nop

0000ad64 <__aeabi_dsub>:
    ad64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ad68 <__adddf3>:
    ad68:	b530      	push	{r4, r5, lr}
    ad6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ad6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ad72:	ea94 0f05 	teq	r4, r5
    ad76:	bf08      	it	eq
    ad78:	ea90 0f02 	teqeq	r0, r2
    ad7c:	bf1f      	itttt	ne
    ad7e:	ea54 0c00 	orrsne.w	ip, r4, r0
    ad82:	ea55 0c02 	orrsne.w	ip, r5, r2
    ad86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ad8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ad8e:	f000 80e2 	beq.w	af56 <__adddf3+0x1ee>
    ad92:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ad96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ad9a:	bfb8      	it	lt
    ad9c:	426d      	neglt	r5, r5
    ad9e:	dd0c      	ble.n	adba <__adddf3+0x52>
    ada0:	442c      	add	r4, r5
    ada2:	ea80 0202 	eor.w	r2, r0, r2
    ada6:	ea81 0303 	eor.w	r3, r1, r3
    adaa:	ea82 0000 	eor.w	r0, r2, r0
    adae:	ea83 0101 	eor.w	r1, r3, r1
    adb2:	ea80 0202 	eor.w	r2, r0, r2
    adb6:	ea81 0303 	eor.w	r3, r1, r3
    adba:	2d36      	cmp	r5, #54	; 0x36
    adbc:	bf88      	it	hi
    adbe:	bd30      	pophi	{r4, r5, pc}
    adc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    adc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    adc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    adcc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    add0:	d002      	beq.n	add8 <__adddf3+0x70>
    add2:	4240      	negs	r0, r0
    add4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    add8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    addc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ade0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ade4:	d002      	beq.n	adec <__adddf3+0x84>
    ade6:	4252      	negs	r2, r2
    ade8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    adec:	ea94 0f05 	teq	r4, r5
    adf0:	f000 80a7 	beq.w	af42 <__adddf3+0x1da>
    adf4:	f1a4 0401 	sub.w	r4, r4, #1
    adf8:	f1d5 0e20 	rsbs	lr, r5, #32
    adfc:	db0d      	blt.n	ae1a <__adddf3+0xb2>
    adfe:	fa02 fc0e 	lsl.w	ip, r2, lr
    ae02:	fa22 f205 	lsr.w	r2, r2, r5
    ae06:	1880      	adds	r0, r0, r2
    ae08:	f141 0100 	adc.w	r1, r1, #0
    ae0c:	fa03 f20e 	lsl.w	r2, r3, lr
    ae10:	1880      	adds	r0, r0, r2
    ae12:	fa43 f305 	asr.w	r3, r3, r5
    ae16:	4159      	adcs	r1, r3
    ae18:	e00e      	b.n	ae38 <__adddf3+0xd0>
    ae1a:	f1a5 0520 	sub.w	r5, r5, #32
    ae1e:	f10e 0e20 	add.w	lr, lr, #32
    ae22:	2a01      	cmp	r2, #1
    ae24:	fa03 fc0e 	lsl.w	ip, r3, lr
    ae28:	bf28      	it	cs
    ae2a:	f04c 0c02 	orrcs.w	ip, ip, #2
    ae2e:	fa43 f305 	asr.w	r3, r3, r5
    ae32:	18c0      	adds	r0, r0, r3
    ae34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ae38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ae3c:	d507      	bpl.n	ae4e <__adddf3+0xe6>
    ae3e:	f04f 0e00 	mov.w	lr, #0
    ae42:	f1dc 0c00 	rsbs	ip, ip, #0
    ae46:	eb7e 0000 	sbcs.w	r0, lr, r0
    ae4a:	eb6e 0101 	sbc.w	r1, lr, r1
    ae4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ae52:	d31b      	bcc.n	ae8c <__adddf3+0x124>
    ae54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ae58:	d30c      	bcc.n	ae74 <__adddf3+0x10c>
    ae5a:	0849      	lsrs	r1, r1, #1
    ae5c:	ea5f 0030 	movs.w	r0, r0, rrx
    ae60:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ae64:	f104 0401 	add.w	r4, r4, #1
    ae68:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ae6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ae70:	f080 809a 	bcs.w	afa8 <__adddf3+0x240>
    ae74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ae78:	bf08      	it	eq
    ae7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ae7e:	f150 0000 	adcs.w	r0, r0, #0
    ae82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ae86:	ea41 0105 	orr.w	r1, r1, r5
    ae8a:	bd30      	pop	{r4, r5, pc}
    ae8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ae90:	4140      	adcs	r0, r0
    ae92:	eb41 0101 	adc.w	r1, r1, r1
    ae96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ae9a:	f1a4 0401 	sub.w	r4, r4, #1
    ae9e:	d1e9      	bne.n	ae74 <__adddf3+0x10c>
    aea0:	f091 0f00 	teq	r1, #0
    aea4:	bf04      	itt	eq
    aea6:	4601      	moveq	r1, r0
    aea8:	2000      	moveq	r0, #0
    aeaa:	fab1 f381 	clz	r3, r1
    aeae:	bf08      	it	eq
    aeb0:	3320      	addeq	r3, #32
    aeb2:	f1a3 030b 	sub.w	r3, r3, #11
    aeb6:	f1b3 0220 	subs.w	r2, r3, #32
    aeba:	da0c      	bge.n	aed6 <__adddf3+0x16e>
    aebc:	320c      	adds	r2, #12
    aebe:	dd08      	ble.n	aed2 <__adddf3+0x16a>
    aec0:	f102 0c14 	add.w	ip, r2, #20
    aec4:	f1c2 020c 	rsb	r2, r2, #12
    aec8:	fa01 f00c 	lsl.w	r0, r1, ip
    aecc:	fa21 f102 	lsr.w	r1, r1, r2
    aed0:	e00c      	b.n	aeec <__adddf3+0x184>
    aed2:	f102 0214 	add.w	r2, r2, #20
    aed6:	bfd8      	it	le
    aed8:	f1c2 0c20 	rsble	ip, r2, #32
    aedc:	fa01 f102 	lsl.w	r1, r1, r2
    aee0:	fa20 fc0c 	lsr.w	ip, r0, ip
    aee4:	bfdc      	itt	le
    aee6:	ea41 010c 	orrle.w	r1, r1, ip
    aeea:	4090      	lslle	r0, r2
    aeec:	1ae4      	subs	r4, r4, r3
    aeee:	bfa2      	ittt	ge
    aef0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    aef4:	4329      	orrge	r1, r5
    aef6:	bd30      	popge	{r4, r5, pc}
    aef8:	ea6f 0404 	mvn.w	r4, r4
    aefc:	3c1f      	subs	r4, #31
    aefe:	da1c      	bge.n	af3a <__adddf3+0x1d2>
    af00:	340c      	adds	r4, #12
    af02:	dc0e      	bgt.n	af22 <__adddf3+0x1ba>
    af04:	f104 0414 	add.w	r4, r4, #20
    af08:	f1c4 0220 	rsb	r2, r4, #32
    af0c:	fa20 f004 	lsr.w	r0, r0, r4
    af10:	fa01 f302 	lsl.w	r3, r1, r2
    af14:	ea40 0003 	orr.w	r0, r0, r3
    af18:	fa21 f304 	lsr.w	r3, r1, r4
    af1c:	ea45 0103 	orr.w	r1, r5, r3
    af20:	bd30      	pop	{r4, r5, pc}
    af22:	f1c4 040c 	rsb	r4, r4, #12
    af26:	f1c4 0220 	rsb	r2, r4, #32
    af2a:	fa20 f002 	lsr.w	r0, r0, r2
    af2e:	fa01 f304 	lsl.w	r3, r1, r4
    af32:	ea40 0003 	orr.w	r0, r0, r3
    af36:	4629      	mov	r1, r5
    af38:	bd30      	pop	{r4, r5, pc}
    af3a:	fa21 f004 	lsr.w	r0, r1, r4
    af3e:	4629      	mov	r1, r5
    af40:	bd30      	pop	{r4, r5, pc}
    af42:	f094 0f00 	teq	r4, #0
    af46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    af4a:	bf06      	itte	eq
    af4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    af50:	3401      	addeq	r4, #1
    af52:	3d01      	subne	r5, #1
    af54:	e74e      	b.n	adf4 <__adddf3+0x8c>
    af56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    af5a:	bf18      	it	ne
    af5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    af60:	d029      	beq.n	afb6 <__adddf3+0x24e>
    af62:	ea94 0f05 	teq	r4, r5
    af66:	bf08      	it	eq
    af68:	ea90 0f02 	teqeq	r0, r2
    af6c:	d005      	beq.n	af7a <__adddf3+0x212>
    af6e:	ea54 0c00 	orrs.w	ip, r4, r0
    af72:	bf04      	itt	eq
    af74:	4619      	moveq	r1, r3
    af76:	4610      	moveq	r0, r2
    af78:	bd30      	pop	{r4, r5, pc}
    af7a:	ea91 0f03 	teq	r1, r3
    af7e:	bf1e      	ittt	ne
    af80:	2100      	movne	r1, #0
    af82:	2000      	movne	r0, #0
    af84:	bd30      	popne	{r4, r5, pc}
    af86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    af8a:	d105      	bne.n	af98 <__adddf3+0x230>
    af8c:	0040      	lsls	r0, r0, #1
    af8e:	4149      	adcs	r1, r1
    af90:	bf28      	it	cs
    af92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    af96:	bd30      	pop	{r4, r5, pc}
    af98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    af9c:	bf3c      	itt	cc
    af9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    afa2:	bd30      	popcc	{r4, r5, pc}
    afa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    afa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    afac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    afb0:	f04f 0000 	mov.w	r0, #0
    afb4:	bd30      	pop	{r4, r5, pc}
    afb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    afba:	bf1a      	itte	ne
    afbc:	4619      	movne	r1, r3
    afbe:	4610      	movne	r0, r2
    afc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    afc4:	bf1c      	itt	ne
    afc6:	460b      	movne	r3, r1
    afc8:	4602      	movne	r2, r0
    afca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    afce:	bf06      	itte	eq
    afd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    afd4:	ea91 0f03 	teqeq	r1, r3
    afd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    afdc:	bd30      	pop	{r4, r5, pc}
    afde:	bf00      	nop

0000afe0 <__aeabi_ui2d>:
    afe0:	f090 0f00 	teq	r0, #0
    afe4:	bf04      	itt	eq
    afe6:	2100      	moveq	r1, #0
    afe8:	4770      	bxeq	lr
    afea:	b530      	push	{r4, r5, lr}
    afec:	f44f 6480 	mov.w	r4, #1024	; 0x400
    aff0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    aff4:	f04f 0500 	mov.w	r5, #0
    aff8:	f04f 0100 	mov.w	r1, #0
    affc:	e750      	b.n	aea0 <__adddf3+0x138>
    affe:	bf00      	nop

0000b000 <__aeabi_i2d>:
    b000:	f090 0f00 	teq	r0, #0
    b004:	bf04      	itt	eq
    b006:	2100      	moveq	r1, #0
    b008:	4770      	bxeq	lr
    b00a:	b530      	push	{r4, r5, lr}
    b00c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b010:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b014:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b018:	bf48      	it	mi
    b01a:	4240      	negmi	r0, r0
    b01c:	f04f 0100 	mov.w	r1, #0
    b020:	e73e      	b.n	aea0 <__adddf3+0x138>
    b022:	bf00      	nop

0000b024 <__aeabi_f2d>:
    b024:	0042      	lsls	r2, r0, #1
    b026:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b02a:	ea4f 0131 	mov.w	r1, r1, rrx
    b02e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b032:	bf1f      	itttt	ne
    b034:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b03c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b040:	4770      	bxne	lr
    b042:	f092 0f00 	teq	r2, #0
    b046:	bf14      	ite	ne
    b048:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b04c:	4770      	bxeq	lr
    b04e:	b530      	push	{r4, r5, lr}
    b050:	f44f 7460 	mov.w	r4, #896	; 0x380
    b054:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b05c:	e720      	b.n	aea0 <__adddf3+0x138>
    b05e:	bf00      	nop

0000b060 <__aeabi_ul2d>:
    b060:	ea50 0201 	orrs.w	r2, r0, r1
    b064:	bf08      	it	eq
    b066:	4770      	bxeq	lr
    b068:	b530      	push	{r4, r5, lr}
    b06a:	f04f 0500 	mov.w	r5, #0
    b06e:	e00a      	b.n	b086 <__aeabi_l2d+0x16>

0000b070 <__aeabi_l2d>:
    b070:	ea50 0201 	orrs.w	r2, r0, r1
    b074:	bf08      	it	eq
    b076:	4770      	bxeq	lr
    b078:	b530      	push	{r4, r5, lr}
    b07a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b07e:	d502      	bpl.n	b086 <__aeabi_l2d+0x16>
    b080:	4240      	negs	r0, r0
    b082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b086:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b08a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b08e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b092:	f43f aedc 	beq.w	ae4e <__adddf3+0xe6>
    b096:	f04f 0203 	mov.w	r2, #3
    b09a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b09e:	bf18      	it	ne
    b0a0:	3203      	addne	r2, #3
    b0a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b0a6:	bf18      	it	ne
    b0a8:	3203      	addne	r2, #3
    b0aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b0ae:	f1c2 0320 	rsb	r3, r2, #32
    b0b2:	fa00 fc03 	lsl.w	ip, r0, r3
    b0b6:	fa20 f002 	lsr.w	r0, r0, r2
    b0ba:	fa01 fe03 	lsl.w	lr, r1, r3
    b0be:	ea40 000e 	orr.w	r0, r0, lr
    b0c2:	fa21 f102 	lsr.w	r1, r1, r2
    b0c6:	4414      	add	r4, r2
    b0c8:	e6c1      	b.n	ae4e <__adddf3+0xe6>
    b0ca:	bf00      	nop

0000b0cc <__aeabi_dmul>:
    b0cc:	b570      	push	{r4, r5, r6, lr}
    b0ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b0d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b0d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b0da:	bf1d      	ittte	ne
    b0dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b0e0:	ea94 0f0c 	teqne	r4, ip
    b0e4:	ea95 0f0c 	teqne	r5, ip
    b0e8:	f000 f8de 	bleq	b2a8 <__aeabi_dmul+0x1dc>
    b0ec:	442c      	add	r4, r5
    b0ee:	ea81 0603 	eor.w	r6, r1, r3
    b0f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b0f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b0fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b0fe:	bf18      	it	ne
    b100:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b104:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b10c:	d038      	beq.n	b180 <__aeabi_dmul+0xb4>
    b10e:	fba0 ce02 	umull	ip, lr, r0, r2
    b112:	f04f 0500 	mov.w	r5, #0
    b116:	fbe1 e502 	umlal	lr, r5, r1, r2
    b11a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b11e:	fbe0 e503 	umlal	lr, r5, r0, r3
    b122:	f04f 0600 	mov.w	r6, #0
    b126:	fbe1 5603 	umlal	r5, r6, r1, r3
    b12a:	f09c 0f00 	teq	ip, #0
    b12e:	bf18      	it	ne
    b130:	f04e 0e01 	orrne.w	lr, lr, #1
    b134:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b138:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b13c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b140:	d204      	bcs.n	b14c <__aeabi_dmul+0x80>
    b142:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b146:	416d      	adcs	r5, r5
    b148:	eb46 0606 	adc.w	r6, r6, r6
    b14c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b150:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b154:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b158:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b15c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b160:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b164:	bf88      	it	hi
    b166:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b16a:	d81e      	bhi.n	b1aa <__aeabi_dmul+0xde>
    b16c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b170:	bf08      	it	eq
    b172:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b176:	f150 0000 	adcs.w	r0, r0, #0
    b17a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b17e:	bd70      	pop	{r4, r5, r6, pc}
    b180:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b184:	ea46 0101 	orr.w	r1, r6, r1
    b188:	ea40 0002 	orr.w	r0, r0, r2
    b18c:	ea81 0103 	eor.w	r1, r1, r3
    b190:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b194:	bfc2      	ittt	gt
    b196:	ebd4 050c 	rsbsgt	r5, r4, ip
    b19a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b19e:	bd70      	popgt	{r4, r5, r6, pc}
    b1a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b1a4:	f04f 0e00 	mov.w	lr, #0
    b1a8:	3c01      	subs	r4, #1
    b1aa:	f300 80ab 	bgt.w	b304 <__aeabi_dmul+0x238>
    b1ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b1b2:	bfde      	ittt	le
    b1b4:	2000      	movle	r0, #0
    b1b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b1ba:	bd70      	pople	{r4, r5, r6, pc}
    b1bc:	f1c4 0400 	rsb	r4, r4, #0
    b1c0:	3c20      	subs	r4, #32
    b1c2:	da35      	bge.n	b230 <__aeabi_dmul+0x164>
    b1c4:	340c      	adds	r4, #12
    b1c6:	dc1b      	bgt.n	b200 <__aeabi_dmul+0x134>
    b1c8:	f104 0414 	add.w	r4, r4, #20
    b1cc:	f1c4 0520 	rsb	r5, r4, #32
    b1d0:	fa00 f305 	lsl.w	r3, r0, r5
    b1d4:	fa20 f004 	lsr.w	r0, r0, r4
    b1d8:	fa01 f205 	lsl.w	r2, r1, r5
    b1dc:	ea40 0002 	orr.w	r0, r0, r2
    b1e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b1e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b1e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b1ec:	fa21 f604 	lsr.w	r6, r1, r4
    b1f0:	eb42 0106 	adc.w	r1, r2, r6
    b1f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b1f8:	bf08      	it	eq
    b1fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b1fe:	bd70      	pop	{r4, r5, r6, pc}
    b200:	f1c4 040c 	rsb	r4, r4, #12
    b204:	f1c4 0520 	rsb	r5, r4, #32
    b208:	fa00 f304 	lsl.w	r3, r0, r4
    b20c:	fa20 f005 	lsr.w	r0, r0, r5
    b210:	fa01 f204 	lsl.w	r2, r1, r4
    b214:	ea40 0002 	orr.w	r0, r0, r2
    b218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b21c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b220:	f141 0100 	adc.w	r1, r1, #0
    b224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b228:	bf08      	it	eq
    b22a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b22e:	bd70      	pop	{r4, r5, r6, pc}
    b230:	f1c4 0520 	rsb	r5, r4, #32
    b234:	fa00 f205 	lsl.w	r2, r0, r5
    b238:	ea4e 0e02 	orr.w	lr, lr, r2
    b23c:	fa20 f304 	lsr.w	r3, r0, r4
    b240:	fa01 f205 	lsl.w	r2, r1, r5
    b244:	ea43 0302 	orr.w	r3, r3, r2
    b248:	fa21 f004 	lsr.w	r0, r1, r4
    b24c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b250:	fa21 f204 	lsr.w	r2, r1, r4
    b254:	ea20 0002 	bic.w	r0, r0, r2
    b258:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b25c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b260:	bf08      	it	eq
    b262:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b266:	bd70      	pop	{r4, r5, r6, pc}
    b268:	f094 0f00 	teq	r4, #0
    b26c:	d10f      	bne.n	b28e <__aeabi_dmul+0x1c2>
    b26e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b272:	0040      	lsls	r0, r0, #1
    b274:	eb41 0101 	adc.w	r1, r1, r1
    b278:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b27c:	bf08      	it	eq
    b27e:	3c01      	subeq	r4, #1
    b280:	d0f7      	beq.n	b272 <__aeabi_dmul+0x1a6>
    b282:	ea41 0106 	orr.w	r1, r1, r6
    b286:	f095 0f00 	teq	r5, #0
    b28a:	bf18      	it	ne
    b28c:	4770      	bxne	lr
    b28e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b292:	0052      	lsls	r2, r2, #1
    b294:	eb43 0303 	adc.w	r3, r3, r3
    b298:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b29c:	bf08      	it	eq
    b29e:	3d01      	subeq	r5, #1
    b2a0:	d0f7      	beq.n	b292 <__aeabi_dmul+0x1c6>
    b2a2:	ea43 0306 	orr.w	r3, r3, r6
    b2a6:	4770      	bx	lr
    b2a8:	ea94 0f0c 	teq	r4, ip
    b2ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b2b0:	bf18      	it	ne
    b2b2:	ea95 0f0c 	teqne	r5, ip
    b2b6:	d00c      	beq.n	b2d2 <__aeabi_dmul+0x206>
    b2b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b2bc:	bf18      	it	ne
    b2be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b2c2:	d1d1      	bne.n	b268 <__aeabi_dmul+0x19c>
    b2c4:	ea81 0103 	eor.w	r1, r1, r3
    b2c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b2cc:	f04f 0000 	mov.w	r0, #0
    b2d0:	bd70      	pop	{r4, r5, r6, pc}
    b2d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b2d6:	bf06      	itte	eq
    b2d8:	4610      	moveq	r0, r2
    b2da:	4619      	moveq	r1, r3
    b2dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b2e0:	d019      	beq.n	b316 <__aeabi_dmul+0x24a>
    b2e2:	ea94 0f0c 	teq	r4, ip
    b2e6:	d102      	bne.n	b2ee <__aeabi_dmul+0x222>
    b2e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b2ec:	d113      	bne.n	b316 <__aeabi_dmul+0x24a>
    b2ee:	ea95 0f0c 	teq	r5, ip
    b2f2:	d105      	bne.n	b300 <__aeabi_dmul+0x234>
    b2f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b2f8:	bf1c      	itt	ne
    b2fa:	4610      	movne	r0, r2
    b2fc:	4619      	movne	r1, r3
    b2fe:	d10a      	bne.n	b316 <__aeabi_dmul+0x24a>
    b300:	ea81 0103 	eor.w	r1, r1, r3
    b304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b308:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b30c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b310:	f04f 0000 	mov.w	r0, #0
    b314:	bd70      	pop	{r4, r5, r6, pc}
    b316:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b31a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b31e:	bd70      	pop	{r4, r5, r6, pc}

0000b320 <__aeabi_ddiv>:
    b320:	b570      	push	{r4, r5, r6, lr}
    b322:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b326:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b32a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b32e:	bf1d      	ittte	ne
    b330:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b334:	ea94 0f0c 	teqne	r4, ip
    b338:	ea95 0f0c 	teqne	r5, ip
    b33c:	f000 f8a7 	bleq	b48e <__aeabi_ddiv+0x16e>
    b340:	eba4 0405 	sub.w	r4, r4, r5
    b344:	ea81 0e03 	eor.w	lr, r1, r3
    b348:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b34c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b350:	f000 8088 	beq.w	b464 <__aeabi_ddiv+0x144>
    b354:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b358:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b35c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b360:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b364:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b368:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b36c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b370:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b374:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b378:	429d      	cmp	r5, r3
    b37a:	bf08      	it	eq
    b37c:	4296      	cmpeq	r6, r2
    b37e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b382:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b386:	d202      	bcs.n	b38e <__aeabi_ddiv+0x6e>
    b388:	085b      	lsrs	r3, r3, #1
    b38a:	ea4f 0232 	mov.w	r2, r2, rrx
    b38e:	1ab6      	subs	r6, r6, r2
    b390:	eb65 0503 	sbc.w	r5, r5, r3
    b394:	085b      	lsrs	r3, r3, #1
    b396:	ea4f 0232 	mov.w	r2, r2, rrx
    b39a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b39e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b3a2:	ebb6 0e02 	subs.w	lr, r6, r2
    b3a6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b3aa:	bf22      	ittt	cs
    b3ac:	1ab6      	subcs	r6, r6, r2
    b3ae:	4675      	movcs	r5, lr
    b3b0:	ea40 000c 	orrcs.w	r0, r0, ip
    b3b4:	085b      	lsrs	r3, r3, #1
    b3b6:	ea4f 0232 	mov.w	r2, r2, rrx
    b3ba:	ebb6 0e02 	subs.w	lr, r6, r2
    b3be:	eb75 0e03 	sbcs.w	lr, r5, r3
    b3c2:	bf22      	ittt	cs
    b3c4:	1ab6      	subcs	r6, r6, r2
    b3c6:	4675      	movcs	r5, lr
    b3c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b3cc:	085b      	lsrs	r3, r3, #1
    b3ce:	ea4f 0232 	mov.w	r2, r2, rrx
    b3d2:	ebb6 0e02 	subs.w	lr, r6, r2
    b3d6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b3da:	bf22      	ittt	cs
    b3dc:	1ab6      	subcs	r6, r6, r2
    b3de:	4675      	movcs	r5, lr
    b3e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b3e4:	085b      	lsrs	r3, r3, #1
    b3e6:	ea4f 0232 	mov.w	r2, r2, rrx
    b3ea:	ebb6 0e02 	subs.w	lr, r6, r2
    b3ee:	eb75 0e03 	sbcs.w	lr, r5, r3
    b3f2:	bf22      	ittt	cs
    b3f4:	1ab6      	subcs	r6, r6, r2
    b3f6:	4675      	movcs	r5, lr
    b3f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b3fc:	ea55 0e06 	orrs.w	lr, r5, r6
    b400:	d018      	beq.n	b434 <__aeabi_ddiv+0x114>
    b402:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b406:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b40a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b40e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b412:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b416:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b41a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b41e:	d1c0      	bne.n	b3a2 <__aeabi_ddiv+0x82>
    b420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b424:	d10b      	bne.n	b43e <__aeabi_ddiv+0x11e>
    b426:	ea41 0100 	orr.w	r1, r1, r0
    b42a:	f04f 0000 	mov.w	r0, #0
    b42e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b432:	e7b6      	b.n	b3a2 <__aeabi_ddiv+0x82>
    b434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b438:	bf04      	itt	eq
    b43a:	4301      	orreq	r1, r0
    b43c:	2000      	moveq	r0, #0
    b43e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b442:	bf88      	it	hi
    b444:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b448:	f63f aeaf 	bhi.w	b1aa <__aeabi_dmul+0xde>
    b44c:	ebb5 0c03 	subs.w	ip, r5, r3
    b450:	bf04      	itt	eq
    b452:	ebb6 0c02 	subseq.w	ip, r6, r2
    b456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b45a:	f150 0000 	adcs.w	r0, r0, #0
    b45e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b462:	bd70      	pop	{r4, r5, r6, pc}
    b464:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b468:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b46c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b470:	bfc2      	ittt	gt
    b472:	ebd4 050c 	rsbsgt	r5, r4, ip
    b476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b47a:	bd70      	popgt	{r4, r5, r6, pc}
    b47c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b480:	f04f 0e00 	mov.w	lr, #0
    b484:	3c01      	subs	r4, #1
    b486:	e690      	b.n	b1aa <__aeabi_dmul+0xde>
    b488:	ea45 0e06 	orr.w	lr, r5, r6
    b48c:	e68d      	b.n	b1aa <__aeabi_dmul+0xde>
    b48e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b492:	ea94 0f0c 	teq	r4, ip
    b496:	bf08      	it	eq
    b498:	ea95 0f0c 	teqeq	r5, ip
    b49c:	f43f af3b 	beq.w	b316 <__aeabi_dmul+0x24a>
    b4a0:	ea94 0f0c 	teq	r4, ip
    b4a4:	d10a      	bne.n	b4bc <__aeabi_ddiv+0x19c>
    b4a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b4aa:	f47f af34 	bne.w	b316 <__aeabi_dmul+0x24a>
    b4ae:	ea95 0f0c 	teq	r5, ip
    b4b2:	f47f af25 	bne.w	b300 <__aeabi_dmul+0x234>
    b4b6:	4610      	mov	r0, r2
    b4b8:	4619      	mov	r1, r3
    b4ba:	e72c      	b.n	b316 <__aeabi_dmul+0x24a>
    b4bc:	ea95 0f0c 	teq	r5, ip
    b4c0:	d106      	bne.n	b4d0 <__aeabi_ddiv+0x1b0>
    b4c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b4c6:	f43f aefd 	beq.w	b2c4 <__aeabi_dmul+0x1f8>
    b4ca:	4610      	mov	r0, r2
    b4cc:	4619      	mov	r1, r3
    b4ce:	e722      	b.n	b316 <__aeabi_dmul+0x24a>
    b4d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b4d4:	bf18      	it	ne
    b4d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b4da:	f47f aec5 	bne.w	b268 <__aeabi_dmul+0x19c>
    b4de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b4e2:	f47f af0d 	bne.w	b300 <__aeabi_dmul+0x234>
    b4e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b4ea:	f47f aeeb 	bne.w	b2c4 <__aeabi_dmul+0x1f8>
    b4ee:	e712      	b.n	b316 <__aeabi_dmul+0x24a>

0000b4f0 <__aeabi_d2uiz>:
    b4f0:	004a      	lsls	r2, r1, #1
    b4f2:	d211      	bcs.n	b518 <__aeabi_d2uiz+0x28>
    b4f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b4f8:	d211      	bcs.n	b51e <__aeabi_d2uiz+0x2e>
    b4fa:	d50d      	bpl.n	b518 <__aeabi_d2uiz+0x28>
    b4fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b500:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b504:	d40e      	bmi.n	b524 <__aeabi_d2uiz+0x34>
    b506:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b50a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b50e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b512:	fa23 f002 	lsr.w	r0, r3, r2
    b516:	4770      	bx	lr
    b518:	f04f 0000 	mov.w	r0, #0
    b51c:	4770      	bx	lr
    b51e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b522:	d102      	bne.n	b52a <__aeabi_d2uiz+0x3a>
    b524:	f04f 30ff 	mov.w	r0, #4294967295
    b528:	4770      	bx	lr
    b52a:	f04f 0000 	mov.w	r0, #0
    b52e:	4770      	bx	lr

0000b530 <__libc_init_array>:
    b530:	b570      	push	{r4, r5, r6, lr}
    b532:	4e0d      	ldr	r6, [pc, #52]	; (b568 <__libc_init_array+0x38>)
    b534:	4c0d      	ldr	r4, [pc, #52]	; (b56c <__libc_init_array+0x3c>)
    b536:	1ba4      	subs	r4, r4, r6
    b538:	10a4      	asrs	r4, r4, #2
    b53a:	2500      	movs	r5, #0
    b53c:	42a5      	cmp	r5, r4
    b53e:	d109      	bne.n	b554 <__libc_init_array+0x24>
    b540:	4e0b      	ldr	r6, [pc, #44]	; (b570 <__libc_init_array+0x40>)
    b542:	4c0c      	ldr	r4, [pc, #48]	; (b574 <__libc_init_array+0x44>)
    b544:	f001 f8ac 	bl	c6a0 <_init>
    b548:	1ba4      	subs	r4, r4, r6
    b54a:	10a4      	asrs	r4, r4, #2
    b54c:	2500      	movs	r5, #0
    b54e:	42a5      	cmp	r5, r4
    b550:	d105      	bne.n	b55e <__libc_init_array+0x2e>
    b552:	bd70      	pop	{r4, r5, r6, pc}
    b554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b558:	4798      	blx	r3
    b55a:	3501      	adds	r5, #1
    b55c:	e7ee      	b.n	b53c <__libc_init_array+0xc>
    b55e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b562:	4798      	blx	r3
    b564:	3501      	adds	r5, #1
    b566:	e7f2      	b.n	b54e <__libc_init_array+0x1e>
    b568:	0000c6ac 	.word	0x0000c6ac
    b56c:	0000c6ac 	.word	0x0000c6ac
    b570:	0000c6ac 	.word	0x0000c6ac
    b574:	0000c6b0 	.word	0x0000c6b0

0000b578 <malloc>:
    b578:	4b02      	ldr	r3, [pc, #8]	; (b584 <malloc+0xc>)
    b57a:	4601      	mov	r1, r0
    b57c:	6818      	ldr	r0, [r3, #0]
    b57e:	f000 b865 	b.w	b64c <_malloc_r>
    b582:	bf00      	nop
    b584:	20000558 	.word	0x20000558

0000b588 <memcpy>:
    b588:	b510      	push	{r4, lr}
    b58a:	1e43      	subs	r3, r0, #1
    b58c:	440a      	add	r2, r1
    b58e:	4291      	cmp	r1, r2
    b590:	d100      	bne.n	b594 <memcpy+0xc>
    b592:	bd10      	pop	{r4, pc}
    b594:	f811 4b01 	ldrb.w	r4, [r1], #1
    b598:	f803 4f01 	strb.w	r4, [r3, #1]!
    b59c:	e7f7      	b.n	b58e <memcpy+0x6>

0000b59e <memset>:
    b59e:	4402      	add	r2, r0
    b5a0:	4603      	mov	r3, r0
    b5a2:	4293      	cmp	r3, r2
    b5a4:	d100      	bne.n	b5a8 <memset+0xa>
    b5a6:	4770      	bx	lr
    b5a8:	f803 1b01 	strb.w	r1, [r3], #1
    b5ac:	e7f9      	b.n	b5a2 <memset+0x4>
	...

0000b5b0 <_free_r>:
    b5b0:	b538      	push	{r3, r4, r5, lr}
    b5b2:	4605      	mov	r5, r0
    b5b4:	2900      	cmp	r1, #0
    b5b6:	d045      	beq.n	b644 <_free_r+0x94>
    b5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b5bc:	1f0c      	subs	r4, r1, #4
    b5be:	2b00      	cmp	r3, #0
    b5c0:	bfb8      	it	lt
    b5c2:	18e4      	addlt	r4, r4, r3
    b5c4:	f000 f8dc 	bl	b780 <__malloc_lock>
    b5c8:	4a1f      	ldr	r2, [pc, #124]	; (b648 <_free_r+0x98>)
    b5ca:	6813      	ldr	r3, [r2, #0]
    b5cc:	4610      	mov	r0, r2
    b5ce:	b933      	cbnz	r3, b5de <_free_r+0x2e>
    b5d0:	6063      	str	r3, [r4, #4]
    b5d2:	6014      	str	r4, [r2, #0]
    b5d4:	4628      	mov	r0, r5
    b5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b5da:	f000 b8d2 	b.w	b782 <__malloc_unlock>
    b5de:	42a3      	cmp	r3, r4
    b5e0:	d90c      	bls.n	b5fc <_free_r+0x4c>
    b5e2:	6821      	ldr	r1, [r4, #0]
    b5e4:	1862      	adds	r2, r4, r1
    b5e6:	4293      	cmp	r3, r2
    b5e8:	bf04      	itt	eq
    b5ea:	681a      	ldreq	r2, [r3, #0]
    b5ec:	685b      	ldreq	r3, [r3, #4]
    b5ee:	6063      	str	r3, [r4, #4]
    b5f0:	bf04      	itt	eq
    b5f2:	1852      	addeq	r2, r2, r1
    b5f4:	6022      	streq	r2, [r4, #0]
    b5f6:	6004      	str	r4, [r0, #0]
    b5f8:	e7ec      	b.n	b5d4 <_free_r+0x24>
    b5fa:	4613      	mov	r3, r2
    b5fc:	685a      	ldr	r2, [r3, #4]
    b5fe:	b10a      	cbz	r2, b604 <_free_r+0x54>
    b600:	42a2      	cmp	r2, r4
    b602:	d9fa      	bls.n	b5fa <_free_r+0x4a>
    b604:	6819      	ldr	r1, [r3, #0]
    b606:	1858      	adds	r0, r3, r1
    b608:	42a0      	cmp	r0, r4
    b60a:	d10b      	bne.n	b624 <_free_r+0x74>
    b60c:	6820      	ldr	r0, [r4, #0]
    b60e:	4401      	add	r1, r0
    b610:	1858      	adds	r0, r3, r1
    b612:	4282      	cmp	r2, r0
    b614:	6019      	str	r1, [r3, #0]
    b616:	d1dd      	bne.n	b5d4 <_free_r+0x24>
    b618:	6810      	ldr	r0, [r2, #0]
    b61a:	6852      	ldr	r2, [r2, #4]
    b61c:	605a      	str	r2, [r3, #4]
    b61e:	4401      	add	r1, r0
    b620:	6019      	str	r1, [r3, #0]
    b622:	e7d7      	b.n	b5d4 <_free_r+0x24>
    b624:	d902      	bls.n	b62c <_free_r+0x7c>
    b626:	230c      	movs	r3, #12
    b628:	602b      	str	r3, [r5, #0]
    b62a:	e7d3      	b.n	b5d4 <_free_r+0x24>
    b62c:	6820      	ldr	r0, [r4, #0]
    b62e:	1821      	adds	r1, r4, r0
    b630:	428a      	cmp	r2, r1
    b632:	bf04      	itt	eq
    b634:	6811      	ldreq	r1, [r2, #0]
    b636:	6852      	ldreq	r2, [r2, #4]
    b638:	6062      	str	r2, [r4, #4]
    b63a:	bf04      	itt	eq
    b63c:	1809      	addeq	r1, r1, r0
    b63e:	6021      	streq	r1, [r4, #0]
    b640:	605c      	str	r4, [r3, #4]
    b642:	e7c7      	b.n	b5d4 <_free_r+0x24>
    b644:	bd38      	pop	{r3, r4, r5, pc}
    b646:	bf00      	nop
    b648:	20000e9c 	.word	0x20000e9c

0000b64c <_malloc_r>:
    b64c:	b570      	push	{r4, r5, r6, lr}
    b64e:	1ccd      	adds	r5, r1, #3
    b650:	f025 0503 	bic.w	r5, r5, #3
    b654:	3508      	adds	r5, #8
    b656:	2d0c      	cmp	r5, #12
    b658:	bf38      	it	cc
    b65a:	250c      	movcc	r5, #12
    b65c:	2d00      	cmp	r5, #0
    b65e:	4606      	mov	r6, r0
    b660:	db01      	blt.n	b666 <_malloc_r+0x1a>
    b662:	42a9      	cmp	r1, r5
    b664:	d903      	bls.n	b66e <_malloc_r+0x22>
    b666:	230c      	movs	r3, #12
    b668:	6033      	str	r3, [r6, #0]
    b66a:	2000      	movs	r0, #0
    b66c:	bd70      	pop	{r4, r5, r6, pc}
    b66e:	f000 f887 	bl	b780 <__malloc_lock>
    b672:	4a23      	ldr	r2, [pc, #140]	; (b700 <_malloc_r+0xb4>)
    b674:	6814      	ldr	r4, [r2, #0]
    b676:	4621      	mov	r1, r4
    b678:	b991      	cbnz	r1, b6a0 <_malloc_r+0x54>
    b67a:	4c22      	ldr	r4, [pc, #136]	; (b704 <_malloc_r+0xb8>)
    b67c:	6823      	ldr	r3, [r4, #0]
    b67e:	b91b      	cbnz	r3, b688 <_malloc_r+0x3c>
    b680:	4630      	mov	r0, r6
    b682:	f000 f841 	bl	b708 <_sbrk_r>
    b686:	6020      	str	r0, [r4, #0]
    b688:	4629      	mov	r1, r5
    b68a:	4630      	mov	r0, r6
    b68c:	f000 f83c 	bl	b708 <_sbrk_r>
    b690:	1c43      	adds	r3, r0, #1
    b692:	d126      	bne.n	b6e2 <_malloc_r+0x96>
    b694:	230c      	movs	r3, #12
    b696:	6033      	str	r3, [r6, #0]
    b698:	4630      	mov	r0, r6
    b69a:	f000 f872 	bl	b782 <__malloc_unlock>
    b69e:	e7e4      	b.n	b66a <_malloc_r+0x1e>
    b6a0:	680b      	ldr	r3, [r1, #0]
    b6a2:	1b5b      	subs	r3, r3, r5
    b6a4:	d41a      	bmi.n	b6dc <_malloc_r+0x90>
    b6a6:	2b0b      	cmp	r3, #11
    b6a8:	d90f      	bls.n	b6ca <_malloc_r+0x7e>
    b6aa:	600b      	str	r3, [r1, #0]
    b6ac:	50cd      	str	r5, [r1, r3]
    b6ae:	18cc      	adds	r4, r1, r3
    b6b0:	4630      	mov	r0, r6
    b6b2:	f000 f866 	bl	b782 <__malloc_unlock>
    b6b6:	f104 000b 	add.w	r0, r4, #11
    b6ba:	1d23      	adds	r3, r4, #4
    b6bc:	f020 0007 	bic.w	r0, r0, #7
    b6c0:	1ac3      	subs	r3, r0, r3
    b6c2:	d01b      	beq.n	b6fc <_malloc_r+0xb0>
    b6c4:	425a      	negs	r2, r3
    b6c6:	50e2      	str	r2, [r4, r3]
    b6c8:	bd70      	pop	{r4, r5, r6, pc}
    b6ca:	428c      	cmp	r4, r1
    b6cc:	bf0d      	iteet	eq
    b6ce:	6863      	ldreq	r3, [r4, #4]
    b6d0:	684b      	ldrne	r3, [r1, #4]
    b6d2:	6063      	strne	r3, [r4, #4]
    b6d4:	6013      	streq	r3, [r2, #0]
    b6d6:	bf18      	it	ne
    b6d8:	460c      	movne	r4, r1
    b6da:	e7e9      	b.n	b6b0 <_malloc_r+0x64>
    b6dc:	460c      	mov	r4, r1
    b6de:	6849      	ldr	r1, [r1, #4]
    b6e0:	e7ca      	b.n	b678 <_malloc_r+0x2c>
    b6e2:	1cc4      	adds	r4, r0, #3
    b6e4:	f024 0403 	bic.w	r4, r4, #3
    b6e8:	42a0      	cmp	r0, r4
    b6ea:	d005      	beq.n	b6f8 <_malloc_r+0xac>
    b6ec:	1a21      	subs	r1, r4, r0
    b6ee:	4630      	mov	r0, r6
    b6f0:	f000 f80a 	bl	b708 <_sbrk_r>
    b6f4:	3001      	adds	r0, #1
    b6f6:	d0cd      	beq.n	b694 <_malloc_r+0x48>
    b6f8:	6025      	str	r5, [r4, #0]
    b6fa:	e7d9      	b.n	b6b0 <_malloc_r+0x64>
    b6fc:	bd70      	pop	{r4, r5, r6, pc}
    b6fe:	bf00      	nop
    b700:	20000e9c 	.word	0x20000e9c
    b704:	20000ea0 	.word	0x20000ea0

0000b708 <_sbrk_r>:
    b708:	b538      	push	{r3, r4, r5, lr}
    b70a:	4c06      	ldr	r4, [pc, #24]	; (b724 <_sbrk_r+0x1c>)
    b70c:	2300      	movs	r3, #0
    b70e:	4605      	mov	r5, r0
    b710:	4608      	mov	r0, r1
    b712:	6023      	str	r3, [r4, #0]
    b714:	f7fa f866 	bl	57e4 <_sbrk>
    b718:	1c43      	adds	r3, r0, #1
    b71a:	d102      	bne.n	b722 <_sbrk_r+0x1a>
    b71c:	6823      	ldr	r3, [r4, #0]
    b71e:	b103      	cbz	r3, b722 <_sbrk_r+0x1a>
    b720:	602b      	str	r3, [r5, #0]
    b722:	bd38      	pop	{r3, r4, r5, pc}
    b724:	20003d0c 	.word	0x20003d0c

0000b728 <siprintf>:
    b728:	b40e      	push	{r1, r2, r3}
    b72a:	b500      	push	{lr}
    b72c:	b09c      	sub	sp, #112	; 0x70
    b72e:	f44f 7102 	mov.w	r1, #520	; 0x208
    b732:	ab1d      	add	r3, sp, #116	; 0x74
    b734:	f8ad 1014 	strh.w	r1, [sp, #20]
    b738:	9002      	str	r0, [sp, #8]
    b73a:	9006      	str	r0, [sp, #24]
    b73c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b740:	480a      	ldr	r0, [pc, #40]	; (b76c <siprintf+0x44>)
    b742:	9104      	str	r1, [sp, #16]
    b744:	9107      	str	r1, [sp, #28]
    b746:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b74a:	f853 2b04 	ldr.w	r2, [r3], #4
    b74e:	f8ad 1016 	strh.w	r1, [sp, #22]
    b752:	6800      	ldr	r0, [r0, #0]
    b754:	9301      	str	r3, [sp, #4]
    b756:	a902      	add	r1, sp, #8
    b758:	f000 f870 	bl	b83c <_svfiprintf_r>
    b75c:	9b02      	ldr	r3, [sp, #8]
    b75e:	2200      	movs	r2, #0
    b760:	701a      	strb	r2, [r3, #0]
    b762:	b01c      	add	sp, #112	; 0x70
    b764:	f85d eb04 	ldr.w	lr, [sp], #4
    b768:	b003      	add	sp, #12
    b76a:	4770      	bx	lr
    b76c:	20000558 	.word	0x20000558

0000b770 <strlen>:
    b770:	4603      	mov	r3, r0
    b772:	f813 2b01 	ldrb.w	r2, [r3], #1
    b776:	2a00      	cmp	r2, #0
    b778:	d1fb      	bne.n	b772 <strlen+0x2>
    b77a:	1a18      	subs	r0, r3, r0
    b77c:	3801      	subs	r0, #1
    b77e:	4770      	bx	lr

0000b780 <__malloc_lock>:
    b780:	4770      	bx	lr

0000b782 <__malloc_unlock>:
    b782:	4770      	bx	lr

0000b784 <__ssputs_r>:
    b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b788:	688e      	ldr	r6, [r1, #8]
    b78a:	429e      	cmp	r6, r3
    b78c:	4682      	mov	sl, r0
    b78e:	460c      	mov	r4, r1
    b790:	4691      	mov	r9, r2
    b792:	4698      	mov	r8, r3
    b794:	d835      	bhi.n	b802 <__ssputs_r+0x7e>
    b796:	898a      	ldrh	r2, [r1, #12]
    b798:	f412 6f90 	tst.w	r2, #1152	; 0x480
    b79c:	d031      	beq.n	b802 <__ssputs_r+0x7e>
    b79e:	6825      	ldr	r5, [r4, #0]
    b7a0:	6909      	ldr	r1, [r1, #16]
    b7a2:	1a6f      	subs	r7, r5, r1
    b7a4:	6965      	ldr	r5, [r4, #20]
    b7a6:	2302      	movs	r3, #2
    b7a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b7ac:	fb95 f5f3 	sdiv	r5, r5, r3
    b7b0:	f108 0301 	add.w	r3, r8, #1
    b7b4:	443b      	add	r3, r7
    b7b6:	429d      	cmp	r5, r3
    b7b8:	bf38      	it	cc
    b7ba:	461d      	movcc	r5, r3
    b7bc:	0553      	lsls	r3, r2, #21
    b7be:	d531      	bpl.n	b824 <__ssputs_r+0xa0>
    b7c0:	4629      	mov	r1, r5
    b7c2:	f7ff ff43 	bl	b64c <_malloc_r>
    b7c6:	4606      	mov	r6, r0
    b7c8:	b950      	cbnz	r0, b7e0 <__ssputs_r+0x5c>
    b7ca:	230c      	movs	r3, #12
    b7cc:	f8ca 3000 	str.w	r3, [sl]
    b7d0:	89a3      	ldrh	r3, [r4, #12]
    b7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7d6:	81a3      	strh	r3, [r4, #12]
    b7d8:	f04f 30ff 	mov.w	r0, #4294967295
    b7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7e0:	463a      	mov	r2, r7
    b7e2:	6921      	ldr	r1, [r4, #16]
    b7e4:	f7ff fed0 	bl	b588 <memcpy>
    b7e8:	89a3      	ldrh	r3, [r4, #12]
    b7ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    b7ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7f2:	81a3      	strh	r3, [r4, #12]
    b7f4:	6126      	str	r6, [r4, #16]
    b7f6:	6165      	str	r5, [r4, #20]
    b7f8:	443e      	add	r6, r7
    b7fa:	1bed      	subs	r5, r5, r7
    b7fc:	6026      	str	r6, [r4, #0]
    b7fe:	60a5      	str	r5, [r4, #8]
    b800:	4646      	mov	r6, r8
    b802:	4546      	cmp	r6, r8
    b804:	bf28      	it	cs
    b806:	4646      	movcs	r6, r8
    b808:	4632      	mov	r2, r6
    b80a:	4649      	mov	r1, r9
    b80c:	6820      	ldr	r0, [r4, #0]
    b80e:	f000 faef 	bl	bdf0 <memmove>
    b812:	68a3      	ldr	r3, [r4, #8]
    b814:	1b9b      	subs	r3, r3, r6
    b816:	60a3      	str	r3, [r4, #8]
    b818:	6823      	ldr	r3, [r4, #0]
    b81a:	441e      	add	r6, r3
    b81c:	6026      	str	r6, [r4, #0]
    b81e:	2000      	movs	r0, #0
    b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b824:	462a      	mov	r2, r5
    b826:	f000 fafd 	bl	be24 <_realloc_r>
    b82a:	4606      	mov	r6, r0
    b82c:	2800      	cmp	r0, #0
    b82e:	d1e1      	bne.n	b7f4 <__ssputs_r+0x70>
    b830:	6921      	ldr	r1, [r4, #16]
    b832:	4650      	mov	r0, sl
    b834:	f7ff febc 	bl	b5b0 <_free_r>
    b838:	e7c7      	b.n	b7ca <__ssputs_r+0x46>
	...

0000b83c <_svfiprintf_r>:
    b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b840:	b09d      	sub	sp, #116	; 0x74
    b842:	4680      	mov	r8, r0
    b844:	9303      	str	r3, [sp, #12]
    b846:	898b      	ldrh	r3, [r1, #12]
    b848:	061c      	lsls	r4, r3, #24
    b84a:	460d      	mov	r5, r1
    b84c:	4616      	mov	r6, r2
    b84e:	d50f      	bpl.n	b870 <_svfiprintf_r+0x34>
    b850:	690b      	ldr	r3, [r1, #16]
    b852:	b96b      	cbnz	r3, b870 <_svfiprintf_r+0x34>
    b854:	2140      	movs	r1, #64	; 0x40
    b856:	f7ff fef9 	bl	b64c <_malloc_r>
    b85a:	6028      	str	r0, [r5, #0]
    b85c:	6128      	str	r0, [r5, #16]
    b85e:	b928      	cbnz	r0, b86c <_svfiprintf_r+0x30>
    b860:	230c      	movs	r3, #12
    b862:	f8c8 3000 	str.w	r3, [r8]
    b866:	f04f 30ff 	mov.w	r0, #4294967295
    b86a:	e0c5      	b.n	b9f8 <_svfiprintf_r+0x1bc>
    b86c:	2340      	movs	r3, #64	; 0x40
    b86e:	616b      	str	r3, [r5, #20]
    b870:	2300      	movs	r3, #0
    b872:	9309      	str	r3, [sp, #36]	; 0x24
    b874:	2320      	movs	r3, #32
    b876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b87a:	2330      	movs	r3, #48	; 0x30
    b87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b880:	f04f 0b01 	mov.w	fp, #1
    b884:	4637      	mov	r7, r6
    b886:	463c      	mov	r4, r7
    b888:	f814 3b01 	ldrb.w	r3, [r4], #1
    b88c:	2b00      	cmp	r3, #0
    b88e:	d13c      	bne.n	b90a <_svfiprintf_r+0xce>
    b890:	ebb7 0a06 	subs.w	sl, r7, r6
    b894:	d00b      	beq.n	b8ae <_svfiprintf_r+0x72>
    b896:	4653      	mov	r3, sl
    b898:	4632      	mov	r2, r6
    b89a:	4629      	mov	r1, r5
    b89c:	4640      	mov	r0, r8
    b89e:	f7ff ff71 	bl	b784 <__ssputs_r>
    b8a2:	3001      	adds	r0, #1
    b8a4:	f000 80a3 	beq.w	b9ee <_svfiprintf_r+0x1b2>
    b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b8aa:	4453      	add	r3, sl
    b8ac:	9309      	str	r3, [sp, #36]	; 0x24
    b8ae:	783b      	ldrb	r3, [r7, #0]
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	f000 809c 	beq.w	b9ee <_svfiprintf_r+0x1b2>
    b8b6:	2300      	movs	r3, #0
    b8b8:	f04f 32ff 	mov.w	r2, #4294967295
    b8bc:	9304      	str	r3, [sp, #16]
    b8be:	9307      	str	r3, [sp, #28]
    b8c0:	9205      	str	r2, [sp, #20]
    b8c2:	9306      	str	r3, [sp, #24]
    b8c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b8c8:	931a      	str	r3, [sp, #104]	; 0x68
    b8ca:	2205      	movs	r2, #5
    b8cc:	7821      	ldrb	r1, [r4, #0]
    b8ce:	4850      	ldr	r0, [pc, #320]	; (ba10 <_svfiprintf_r+0x1d4>)
    b8d0:	f000 fa3e 	bl	bd50 <memchr>
    b8d4:	1c67      	adds	r7, r4, #1
    b8d6:	9b04      	ldr	r3, [sp, #16]
    b8d8:	b9d8      	cbnz	r0, b912 <_svfiprintf_r+0xd6>
    b8da:	06d9      	lsls	r1, r3, #27
    b8dc:	bf44      	itt	mi
    b8de:	2220      	movmi	r2, #32
    b8e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b8e4:	071a      	lsls	r2, r3, #28
    b8e6:	bf44      	itt	mi
    b8e8:	222b      	movmi	r2, #43	; 0x2b
    b8ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b8ee:	7822      	ldrb	r2, [r4, #0]
    b8f0:	2a2a      	cmp	r2, #42	; 0x2a
    b8f2:	d016      	beq.n	b922 <_svfiprintf_r+0xe6>
    b8f4:	9a07      	ldr	r2, [sp, #28]
    b8f6:	2100      	movs	r1, #0
    b8f8:	200a      	movs	r0, #10
    b8fa:	4627      	mov	r7, r4
    b8fc:	3401      	adds	r4, #1
    b8fe:	783b      	ldrb	r3, [r7, #0]
    b900:	3b30      	subs	r3, #48	; 0x30
    b902:	2b09      	cmp	r3, #9
    b904:	d951      	bls.n	b9aa <_svfiprintf_r+0x16e>
    b906:	b1c9      	cbz	r1, b93c <_svfiprintf_r+0x100>
    b908:	e011      	b.n	b92e <_svfiprintf_r+0xf2>
    b90a:	2b25      	cmp	r3, #37	; 0x25
    b90c:	d0c0      	beq.n	b890 <_svfiprintf_r+0x54>
    b90e:	4627      	mov	r7, r4
    b910:	e7b9      	b.n	b886 <_svfiprintf_r+0x4a>
    b912:	4a3f      	ldr	r2, [pc, #252]	; (ba10 <_svfiprintf_r+0x1d4>)
    b914:	1a80      	subs	r0, r0, r2
    b916:	fa0b f000 	lsl.w	r0, fp, r0
    b91a:	4318      	orrs	r0, r3
    b91c:	9004      	str	r0, [sp, #16]
    b91e:	463c      	mov	r4, r7
    b920:	e7d3      	b.n	b8ca <_svfiprintf_r+0x8e>
    b922:	9a03      	ldr	r2, [sp, #12]
    b924:	1d11      	adds	r1, r2, #4
    b926:	6812      	ldr	r2, [r2, #0]
    b928:	9103      	str	r1, [sp, #12]
    b92a:	2a00      	cmp	r2, #0
    b92c:	db01      	blt.n	b932 <_svfiprintf_r+0xf6>
    b92e:	9207      	str	r2, [sp, #28]
    b930:	e004      	b.n	b93c <_svfiprintf_r+0x100>
    b932:	4252      	negs	r2, r2
    b934:	f043 0302 	orr.w	r3, r3, #2
    b938:	9207      	str	r2, [sp, #28]
    b93a:	9304      	str	r3, [sp, #16]
    b93c:	783b      	ldrb	r3, [r7, #0]
    b93e:	2b2e      	cmp	r3, #46	; 0x2e
    b940:	d10e      	bne.n	b960 <_svfiprintf_r+0x124>
    b942:	787b      	ldrb	r3, [r7, #1]
    b944:	2b2a      	cmp	r3, #42	; 0x2a
    b946:	f107 0101 	add.w	r1, r7, #1
    b94a:	d132      	bne.n	b9b2 <_svfiprintf_r+0x176>
    b94c:	9b03      	ldr	r3, [sp, #12]
    b94e:	1d1a      	adds	r2, r3, #4
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	9203      	str	r2, [sp, #12]
    b954:	2b00      	cmp	r3, #0
    b956:	bfb8      	it	lt
    b958:	f04f 33ff 	movlt.w	r3, #4294967295
    b95c:	3702      	adds	r7, #2
    b95e:	9305      	str	r3, [sp, #20]
    b960:	4c2c      	ldr	r4, [pc, #176]	; (ba14 <_svfiprintf_r+0x1d8>)
    b962:	7839      	ldrb	r1, [r7, #0]
    b964:	2203      	movs	r2, #3
    b966:	4620      	mov	r0, r4
    b968:	f000 f9f2 	bl	bd50 <memchr>
    b96c:	b138      	cbz	r0, b97e <_svfiprintf_r+0x142>
    b96e:	2340      	movs	r3, #64	; 0x40
    b970:	1b00      	subs	r0, r0, r4
    b972:	fa03 f000 	lsl.w	r0, r3, r0
    b976:	9b04      	ldr	r3, [sp, #16]
    b978:	4303      	orrs	r3, r0
    b97a:	9304      	str	r3, [sp, #16]
    b97c:	3701      	adds	r7, #1
    b97e:	7839      	ldrb	r1, [r7, #0]
    b980:	4825      	ldr	r0, [pc, #148]	; (ba18 <_svfiprintf_r+0x1dc>)
    b982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b986:	2206      	movs	r2, #6
    b988:	1c7e      	adds	r6, r7, #1
    b98a:	f000 f9e1 	bl	bd50 <memchr>
    b98e:	2800      	cmp	r0, #0
    b990:	d035      	beq.n	b9fe <_svfiprintf_r+0x1c2>
    b992:	4b22      	ldr	r3, [pc, #136]	; (ba1c <_svfiprintf_r+0x1e0>)
    b994:	b9fb      	cbnz	r3, b9d6 <_svfiprintf_r+0x19a>
    b996:	9b03      	ldr	r3, [sp, #12]
    b998:	3307      	adds	r3, #7
    b99a:	f023 0307 	bic.w	r3, r3, #7
    b99e:	3308      	adds	r3, #8
    b9a0:	9303      	str	r3, [sp, #12]
    b9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9a4:	444b      	add	r3, r9
    b9a6:	9309      	str	r3, [sp, #36]	; 0x24
    b9a8:	e76c      	b.n	b884 <_svfiprintf_r+0x48>
    b9aa:	fb00 3202 	mla	r2, r0, r2, r3
    b9ae:	2101      	movs	r1, #1
    b9b0:	e7a3      	b.n	b8fa <_svfiprintf_r+0xbe>
    b9b2:	2300      	movs	r3, #0
    b9b4:	9305      	str	r3, [sp, #20]
    b9b6:	4618      	mov	r0, r3
    b9b8:	240a      	movs	r4, #10
    b9ba:	460f      	mov	r7, r1
    b9bc:	3101      	adds	r1, #1
    b9be:	783a      	ldrb	r2, [r7, #0]
    b9c0:	3a30      	subs	r2, #48	; 0x30
    b9c2:	2a09      	cmp	r2, #9
    b9c4:	d903      	bls.n	b9ce <_svfiprintf_r+0x192>
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	d0ca      	beq.n	b960 <_svfiprintf_r+0x124>
    b9ca:	9005      	str	r0, [sp, #20]
    b9cc:	e7c8      	b.n	b960 <_svfiprintf_r+0x124>
    b9ce:	fb04 2000 	mla	r0, r4, r0, r2
    b9d2:	2301      	movs	r3, #1
    b9d4:	e7f1      	b.n	b9ba <_svfiprintf_r+0x17e>
    b9d6:	ab03      	add	r3, sp, #12
    b9d8:	9300      	str	r3, [sp, #0]
    b9da:	462a      	mov	r2, r5
    b9dc:	4b10      	ldr	r3, [pc, #64]	; (ba20 <_svfiprintf_r+0x1e4>)
    b9de:	a904      	add	r1, sp, #16
    b9e0:	4640      	mov	r0, r8
    b9e2:	f3af 8000 	nop.w
    b9e6:	f1b0 3fff 	cmp.w	r0, #4294967295
    b9ea:	4681      	mov	r9, r0
    b9ec:	d1d9      	bne.n	b9a2 <_svfiprintf_r+0x166>
    b9ee:	89ab      	ldrh	r3, [r5, #12]
    b9f0:	065b      	lsls	r3, r3, #25
    b9f2:	f53f af38 	bmi.w	b866 <_svfiprintf_r+0x2a>
    b9f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b9f8:	b01d      	add	sp, #116	; 0x74
    b9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9fe:	ab03      	add	r3, sp, #12
    ba00:	9300      	str	r3, [sp, #0]
    ba02:	462a      	mov	r2, r5
    ba04:	4b06      	ldr	r3, [pc, #24]	; (ba20 <_svfiprintf_r+0x1e4>)
    ba06:	a904      	add	r1, sp, #16
    ba08:	4640      	mov	r0, r8
    ba0a:	f000 f881 	bl	bb10 <_printf_i>
    ba0e:	e7ea      	b.n	b9e6 <_svfiprintf_r+0x1aa>
    ba10:	0000c66c 	.word	0x0000c66c
    ba14:	0000c672 	.word	0x0000c672
    ba18:	0000c676 	.word	0x0000c676
    ba1c:	00000000 	.word	0x00000000
    ba20:	0000b785 	.word	0x0000b785

0000ba24 <_printf_common>:
    ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba28:	4691      	mov	r9, r2
    ba2a:	461f      	mov	r7, r3
    ba2c:	688a      	ldr	r2, [r1, #8]
    ba2e:	690b      	ldr	r3, [r1, #16]
    ba30:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ba34:	4293      	cmp	r3, r2
    ba36:	bfb8      	it	lt
    ba38:	4613      	movlt	r3, r2
    ba3a:	f8c9 3000 	str.w	r3, [r9]
    ba3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    ba42:	4606      	mov	r6, r0
    ba44:	460c      	mov	r4, r1
    ba46:	b112      	cbz	r2, ba4e <_printf_common+0x2a>
    ba48:	3301      	adds	r3, #1
    ba4a:	f8c9 3000 	str.w	r3, [r9]
    ba4e:	6823      	ldr	r3, [r4, #0]
    ba50:	0699      	lsls	r1, r3, #26
    ba52:	bf42      	ittt	mi
    ba54:	f8d9 3000 	ldrmi.w	r3, [r9]
    ba58:	3302      	addmi	r3, #2
    ba5a:	f8c9 3000 	strmi.w	r3, [r9]
    ba5e:	6825      	ldr	r5, [r4, #0]
    ba60:	f015 0506 	ands.w	r5, r5, #6
    ba64:	d107      	bne.n	ba76 <_printf_common+0x52>
    ba66:	f104 0a19 	add.w	sl, r4, #25
    ba6a:	68e3      	ldr	r3, [r4, #12]
    ba6c:	f8d9 2000 	ldr.w	r2, [r9]
    ba70:	1a9b      	subs	r3, r3, r2
    ba72:	429d      	cmp	r5, r3
    ba74:	db29      	blt.n	baca <_printf_common+0xa6>
    ba76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ba7a:	6822      	ldr	r2, [r4, #0]
    ba7c:	3300      	adds	r3, #0
    ba7e:	bf18      	it	ne
    ba80:	2301      	movne	r3, #1
    ba82:	0692      	lsls	r2, r2, #26
    ba84:	d42e      	bmi.n	bae4 <_printf_common+0xc0>
    ba86:	f104 0243 	add.w	r2, r4, #67	; 0x43
    ba8a:	4639      	mov	r1, r7
    ba8c:	4630      	mov	r0, r6
    ba8e:	47c0      	blx	r8
    ba90:	3001      	adds	r0, #1
    ba92:	d021      	beq.n	bad8 <_printf_common+0xb4>
    ba94:	6823      	ldr	r3, [r4, #0]
    ba96:	68e5      	ldr	r5, [r4, #12]
    ba98:	f8d9 2000 	ldr.w	r2, [r9]
    ba9c:	f003 0306 	and.w	r3, r3, #6
    baa0:	2b04      	cmp	r3, #4
    baa2:	bf08      	it	eq
    baa4:	1aad      	subeq	r5, r5, r2
    baa6:	68a3      	ldr	r3, [r4, #8]
    baa8:	6922      	ldr	r2, [r4, #16]
    baaa:	bf0c      	ite	eq
    baac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    bab0:	2500      	movne	r5, #0
    bab2:	4293      	cmp	r3, r2
    bab4:	bfc4      	itt	gt
    bab6:	1a9b      	subgt	r3, r3, r2
    bab8:	18ed      	addgt	r5, r5, r3
    baba:	f04f 0900 	mov.w	r9, #0
    babe:	341a      	adds	r4, #26
    bac0:	454d      	cmp	r5, r9
    bac2:	d11b      	bne.n	bafc <_printf_common+0xd8>
    bac4:	2000      	movs	r0, #0
    bac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baca:	2301      	movs	r3, #1
    bacc:	4652      	mov	r2, sl
    bace:	4639      	mov	r1, r7
    bad0:	4630      	mov	r0, r6
    bad2:	47c0      	blx	r8
    bad4:	3001      	adds	r0, #1
    bad6:	d103      	bne.n	bae0 <_printf_common+0xbc>
    bad8:	f04f 30ff 	mov.w	r0, #4294967295
    badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bae0:	3501      	adds	r5, #1
    bae2:	e7c2      	b.n	ba6a <_printf_common+0x46>
    bae4:	18e1      	adds	r1, r4, r3
    bae6:	1c5a      	adds	r2, r3, #1
    bae8:	2030      	movs	r0, #48	; 0x30
    baea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    baee:	4422      	add	r2, r4
    baf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    baf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    baf8:	3302      	adds	r3, #2
    bafa:	e7c4      	b.n	ba86 <_printf_common+0x62>
    bafc:	2301      	movs	r3, #1
    bafe:	4622      	mov	r2, r4
    bb00:	4639      	mov	r1, r7
    bb02:	4630      	mov	r0, r6
    bb04:	47c0      	blx	r8
    bb06:	3001      	adds	r0, #1
    bb08:	d0e6      	beq.n	bad8 <_printf_common+0xb4>
    bb0a:	f109 0901 	add.w	r9, r9, #1
    bb0e:	e7d7      	b.n	bac0 <_printf_common+0x9c>

0000bb10 <_printf_i>:
    bb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bb14:	4617      	mov	r7, r2
    bb16:	7e0a      	ldrb	r2, [r1, #24]
    bb18:	b085      	sub	sp, #20
    bb1a:	2a6e      	cmp	r2, #110	; 0x6e
    bb1c:	4698      	mov	r8, r3
    bb1e:	4606      	mov	r6, r0
    bb20:	460c      	mov	r4, r1
    bb22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb24:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    bb28:	f000 80bc 	beq.w	bca4 <_printf_i+0x194>
    bb2c:	d81a      	bhi.n	bb64 <_printf_i+0x54>
    bb2e:	2a63      	cmp	r2, #99	; 0x63
    bb30:	d02e      	beq.n	bb90 <_printf_i+0x80>
    bb32:	d80a      	bhi.n	bb4a <_printf_i+0x3a>
    bb34:	2a00      	cmp	r2, #0
    bb36:	f000 80c8 	beq.w	bcca <_printf_i+0x1ba>
    bb3a:	2a58      	cmp	r2, #88	; 0x58
    bb3c:	f000 808a 	beq.w	bc54 <_printf_i+0x144>
    bb40:	f104 0542 	add.w	r5, r4, #66	; 0x42
    bb44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    bb48:	e02a      	b.n	bba0 <_printf_i+0x90>
    bb4a:	2a64      	cmp	r2, #100	; 0x64
    bb4c:	d001      	beq.n	bb52 <_printf_i+0x42>
    bb4e:	2a69      	cmp	r2, #105	; 0x69
    bb50:	d1f6      	bne.n	bb40 <_printf_i+0x30>
    bb52:	6821      	ldr	r1, [r4, #0]
    bb54:	681a      	ldr	r2, [r3, #0]
    bb56:	f011 0f80 	tst.w	r1, #128	; 0x80
    bb5a:	d023      	beq.n	bba4 <_printf_i+0x94>
    bb5c:	1d11      	adds	r1, r2, #4
    bb5e:	6019      	str	r1, [r3, #0]
    bb60:	6813      	ldr	r3, [r2, #0]
    bb62:	e027      	b.n	bbb4 <_printf_i+0xa4>
    bb64:	2a73      	cmp	r2, #115	; 0x73
    bb66:	f000 80b4 	beq.w	bcd2 <_printf_i+0x1c2>
    bb6a:	d808      	bhi.n	bb7e <_printf_i+0x6e>
    bb6c:	2a6f      	cmp	r2, #111	; 0x6f
    bb6e:	d02a      	beq.n	bbc6 <_printf_i+0xb6>
    bb70:	2a70      	cmp	r2, #112	; 0x70
    bb72:	d1e5      	bne.n	bb40 <_printf_i+0x30>
    bb74:	680a      	ldr	r2, [r1, #0]
    bb76:	f042 0220 	orr.w	r2, r2, #32
    bb7a:	600a      	str	r2, [r1, #0]
    bb7c:	e003      	b.n	bb86 <_printf_i+0x76>
    bb7e:	2a75      	cmp	r2, #117	; 0x75
    bb80:	d021      	beq.n	bbc6 <_printf_i+0xb6>
    bb82:	2a78      	cmp	r2, #120	; 0x78
    bb84:	d1dc      	bne.n	bb40 <_printf_i+0x30>
    bb86:	2278      	movs	r2, #120	; 0x78
    bb88:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    bb8c:	496e      	ldr	r1, [pc, #440]	; (bd48 <_printf_i+0x238>)
    bb8e:	e064      	b.n	bc5a <_printf_i+0x14a>
    bb90:	681a      	ldr	r2, [r3, #0]
    bb92:	f101 0542 	add.w	r5, r1, #66	; 0x42
    bb96:	1d11      	adds	r1, r2, #4
    bb98:	6019      	str	r1, [r3, #0]
    bb9a:	6813      	ldr	r3, [r2, #0]
    bb9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    bba0:	2301      	movs	r3, #1
    bba2:	e0a3      	b.n	bcec <_printf_i+0x1dc>
    bba4:	f011 0f40 	tst.w	r1, #64	; 0x40
    bba8:	f102 0104 	add.w	r1, r2, #4
    bbac:	6019      	str	r1, [r3, #0]
    bbae:	d0d7      	beq.n	bb60 <_printf_i+0x50>
    bbb0:	f9b2 3000 	ldrsh.w	r3, [r2]
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	da03      	bge.n	bbc0 <_printf_i+0xb0>
    bbb8:	222d      	movs	r2, #45	; 0x2d
    bbba:	425b      	negs	r3, r3
    bbbc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    bbc0:	4962      	ldr	r1, [pc, #392]	; (bd4c <_printf_i+0x23c>)
    bbc2:	220a      	movs	r2, #10
    bbc4:	e017      	b.n	bbf6 <_printf_i+0xe6>
    bbc6:	6820      	ldr	r0, [r4, #0]
    bbc8:	6819      	ldr	r1, [r3, #0]
    bbca:	f010 0f80 	tst.w	r0, #128	; 0x80
    bbce:	d003      	beq.n	bbd8 <_printf_i+0xc8>
    bbd0:	1d08      	adds	r0, r1, #4
    bbd2:	6018      	str	r0, [r3, #0]
    bbd4:	680b      	ldr	r3, [r1, #0]
    bbd6:	e006      	b.n	bbe6 <_printf_i+0xd6>
    bbd8:	f010 0f40 	tst.w	r0, #64	; 0x40
    bbdc:	f101 0004 	add.w	r0, r1, #4
    bbe0:	6018      	str	r0, [r3, #0]
    bbe2:	d0f7      	beq.n	bbd4 <_printf_i+0xc4>
    bbe4:	880b      	ldrh	r3, [r1, #0]
    bbe6:	4959      	ldr	r1, [pc, #356]	; (bd4c <_printf_i+0x23c>)
    bbe8:	2a6f      	cmp	r2, #111	; 0x6f
    bbea:	bf14      	ite	ne
    bbec:	220a      	movne	r2, #10
    bbee:	2208      	moveq	r2, #8
    bbf0:	2000      	movs	r0, #0
    bbf2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    bbf6:	6865      	ldr	r5, [r4, #4]
    bbf8:	60a5      	str	r5, [r4, #8]
    bbfa:	2d00      	cmp	r5, #0
    bbfc:	f2c0 809c 	blt.w	bd38 <_printf_i+0x228>
    bc00:	6820      	ldr	r0, [r4, #0]
    bc02:	f020 0004 	bic.w	r0, r0, #4
    bc06:	6020      	str	r0, [r4, #0]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d13f      	bne.n	bc8c <_printf_i+0x17c>
    bc0c:	2d00      	cmp	r5, #0
    bc0e:	f040 8095 	bne.w	bd3c <_printf_i+0x22c>
    bc12:	4675      	mov	r5, lr
    bc14:	2a08      	cmp	r2, #8
    bc16:	d10b      	bne.n	bc30 <_printf_i+0x120>
    bc18:	6823      	ldr	r3, [r4, #0]
    bc1a:	07da      	lsls	r2, r3, #31
    bc1c:	d508      	bpl.n	bc30 <_printf_i+0x120>
    bc1e:	6923      	ldr	r3, [r4, #16]
    bc20:	6862      	ldr	r2, [r4, #4]
    bc22:	429a      	cmp	r2, r3
    bc24:	bfde      	ittt	le
    bc26:	2330      	movle	r3, #48	; 0x30
    bc28:	f805 3c01 	strble.w	r3, [r5, #-1]
    bc2c:	f105 35ff 	addle.w	r5, r5, #4294967295
    bc30:	ebae 0305 	sub.w	r3, lr, r5
    bc34:	6123      	str	r3, [r4, #16]
    bc36:	f8cd 8000 	str.w	r8, [sp]
    bc3a:	463b      	mov	r3, r7
    bc3c:	aa03      	add	r2, sp, #12
    bc3e:	4621      	mov	r1, r4
    bc40:	4630      	mov	r0, r6
    bc42:	f7ff feef 	bl	ba24 <_printf_common>
    bc46:	3001      	adds	r0, #1
    bc48:	d155      	bne.n	bcf6 <_printf_i+0x1e6>
    bc4a:	f04f 30ff 	mov.w	r0, #4294967295
    bc4e:	b005      	add	sp, #20
    bc50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bc54:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    bc58:	493c      	ldr	r1, [pc, #240]	; (bd4c <_printf_i+0x23c>)
    bc5a:	6822      	ldr	r2, [r4, #0]
    bc5c:	6818      	ldr	r0, [r3, #0]
    bc5e:	f012 0f80 	tst.w	r2, #128	; 0x80
    bc62:	f100 0504 	add.w	r5, r0, #4
    bc66:	601d      	str	r5, [r3, #0]
    bc68:	d001      	beq.n	bc6e <_printf_i+0x15e>
    bc6a:	6803      	ldr	r3, [r0, #0]
    bc6c:	e002      	b.n	bc74 <_printf_i+0x164>
    bc6e:	0655      	lsls	r5, r2, #25
    bc70:	d5fb      	bpl.n	bc6a <_printf_i+0x15a>
    bc72:	8803      	ldrh	r3, [r0, #0]
    bc74:	07d0      	lsls	r0, r2, #31
    bc76:	bf44      	itt	mi
    bc78:	f042 0220 	orrmi.w	r2, r2, #32
    bc7c:	6022      	strmi	r2, [r4, #0]
    bc7e:	b91b      	cbnz	r3, bc88 <_printf_i+0x178>
    bc80:	6822      	ldr	r2, [r4, #0]
    bc82:	f022 0220 	bic.w	r2, r2, #32
    bc86:	6022      	str	r2, [r4, #0]
    bc88:	2210      	movs	r2, #16
    bc8a:	e7b1      	b.n	bbf0 <_printf_i+0xe0>
    bc8c:	4675      	mov	r5, lr
    bc8e:	fbb3 f0f2 	udiv	r0, r3, r2
    bc92:	fb02 3310 	mls	r3, r2, r0, r3
    bc96:	5ccb      	ldrb	r3, [r1, r3]
    bc98:	f805 3d01 	strb.w	r3, [r5, #-1]!
    bc9c:	4603      	mov	r3, r0
    bc9e:	2800      	cmp	r0, #0
    bca0:	d1f5      	bne.n	bc8e <_printf_i+0x17e>
    bca2:	e7b7      	b.n	bc14 <_printf_i+0x104>
    bca4:	6808      	ldr	r0, [r1, #0]
    bca6:	681a      	ldr	r2, [r3, #0]
    bca8:	6949      	ldr	r1, [r1, #20]
    bcaa:	f010 0f80 	tst.w	r0, #128	; 0x80
    bcae:	d004      	beq.n	bcba <_printf_i+0x1aa>
    bcb0:	1d10      	adds	r0, r2, #4
    bcb2:	6018      	str	r0, [r3, #0]
    bcb4:	6813      	ldr	r3, [r2, #0]
    bcb6:	6019      	str	r1, [r3, #0]
    bcb8:	e007      	b.n	bcca <_printf_i+0x1ba>
    bcba:	f010 0f40 	tst.w	r0, #64	; 0x40
    bcbe:	f102 0004 	add.w	r0, r2, #4
    bcc2:	6018      	str	r0, [r3, #0]
    bcc4:	6813      	ldr	r3, [r2, #0]
    bcc6:	d0f6      	beq.n	bcb6 <_printf_i+0x1a6>
    bcc8:	8019      	strh	r1, [r3, #0]
    bcca:	2300      	movs	r3, #0
    bccc:	6123      	str	r3, [r4, #16]
    bcce:	4675      	mov	r5, lr
    bcd0:	e7b1      	b.n	bc36 <_printf_i+0x126>
    bcd2:	681a      	ldr	r2, [r3, #0]
    bcd4:	1d11      	adds	r1, r2, #4
    bcd6:	6019      	str	r1, [r3, #0]
    bcd8:	6815      	ldr	r5, [r2, #0]
    bcda:	6862      	ldr	r2, [r4, #4]
    bcdc:	2100      	movs	r1, #0
    bcde:	4628      	mov	r0, r5
    bce0:	f000 f836 	bl	bd50 <memchr>
    bce4:	b108      	cbz	r0, bcea <_printf_i+0x1da>
    bce6:	1b40      	subs	r0, r0, r5
    bce8:	6060      	str	r0, [r4, #4]
    bcea:	6863      	ldr	r3, [r4, #4]
    bcec:	6123      	str	r3, [r4, #16]
    bcee:	2300      	movs	r3, #0
    bcf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    bcf4:	e79f      	b.n	bc36 <_printf_i+0x126>
    bcf6:	6923      	ldr	r3, [r4, #16]
    bcf8:	462a      	mov	r2, r5
    bcfa:	4639      	mov	r1, r7
    bcfc:	4630      	mov	r0, r6
    bcfe:	47c0      	blx	r8
    bd00:	3001      	adds	r0, #1
    bd02:	d0a2      	beq.n	bc4a <_printf_i+0x13a>
    bd04:	6823      	ldr	r3, [r4, #0]
    bd06:	079b      	lsls	r3, r3, #30
    bd08:	d507      	bpl.n	bd1a <_printf_i+0x20a>
    bd0a:	2500      	movs	r5, #0
    bd0c:	f104 0919 	add.w	r9, r4, #25
    bd10:	68e3      	ldr	r3, [r4, #12]
    bd12:	9a03      	ldr	r2, [sp, #12]
    bd14:	1a9b      	subs	r3, r3, r2
    bd16:	429d      	cmp	r5, r3
    bd18:	db05      	blt.n	bd26 <_printf_i+0x216>
    bd1a:	68e0      	ldr	r0, [r4, #12]
    bd1c:	9b03      	ldr	r3, [sp, #12]
    bd1e:	4298      	cmp	r0, r3
    bd20:	bfb8      	it	lt
    bd22:	4618      	movlt	r0, r3
    bd24:	e793      	b.n	bc4e <_printf_i+0x13e>
    bd26:	2301      	movs	r3, #1
    bd28:	464a      	mov	r2, r9
    bd2a:	4639      	mov	r1, r7
    bd2c:	4630      	mov	r0, r6
    bd2e:	47c0      	blx	r8
    bd30:	3001      	adds	r0, #1
    bd32:	d08a      	beq.n	bc4a <_printf_i+0x13a>
    bd34:	3501      	adds	r5, #1
    bd36:	e7eb      	b.n	bd10 <_printf_i+0x200>
    bd38:	2b00      	cmp	r3, #0
    bd3a:	d1a7      	bne.n	bc8c <_printf_i+0x17c>
    bd3c:	780b      	ldrb	r3, [r1, #0]
    bd3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    bd42:	f104 0542 	add.w	r5, r4, #66	; 0x42
    bd46:	e765      	b.n	bc14 <_printf_i+0x104>
    bd48:	0000c68e 	.word	0x0000c68e
    bd4c:	0000c67d 	.word	0x0000c67d

0000bd50 <memchr>:
    bd50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bd54:	2a10      	cmp	r2, #16
    bd56:	db2b      	blt.n	bdb0 <memchr+0x60>
    bd58:	f010 0f07 	tst.w	r0, #7
    bd5c:	d008      	beq.n	bd70 <memchr+0x20>
    bd5e:	f810 3b01 	ldrb.w	r3, [r0], #1
    bd62:	3a01      	subs	r2, #1
    bd64:	428b      	cmp	r3, r1
    bd66:	d02d      	beq.n	bdc4 <memchr+0x74>
    bd68:	f010 0f07 	tst.w	r0, #7
    bd6c:	b342      	cbz	r2, bdc0 <memchr+0x70>
    bd6e:	d1f6      	bne.n	bd5e <memchr+0xe>
    bd70:	b4f0      	push	{r4, r5, r6, r7}
    bd72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bd76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    bd7a:	f022 0407 	bic.w	r4, r2, #7
    bd7e:	f07f 0700 	mvns.w	r7, #0
    bd82:	2300      	movs	r3, #0
    bd84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    bd88:	3c08      	subs	r4, #8
    bd8a:	ea85 0501 	eor.w	r5, r5, r1
    bd8e:	ea86 0601 	eor.w	r6, r6, r1
    bd92:	fa85 f547 	uadd8	r5, r5, r7
    bd96:	faa3 f587 	sel	r5, r3, r7
    bd9a:	fa86 f647 	uadd8	r6, r6, r7
    bd9e:	faa5 f687 	sel	r6, r5, r7
    bda2:	b98e      	cbnz	r6, bdc8 <memchr+0x78>
    bda4:	d1ee      	bne.n	bd84 <memchr+0x34>
    bda6:	bcf0      	pop	{r4, r5, r6, r7}
    bda8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bdac:	f002 0207 	and.w	r2, r2, #7
    bdb0:	b132      	cbz	r2, bdc0 <memchr+0x70>
    bdb2:	f810 3b01 	ldrb.w	r3, [r0], #1
    bdb6:	3a01      	subs	r2, #1
    bdb8:	ea83 0301 	eor.w	r3, r3, r1
    bdbc:	b113      	cbz	r3, bdc4 <memchr+0x74>
    bdbe:	d1f8      	bne.n	bdb2 <memchr+0x62>
    bdc0:	2000      	movs	r0, #0
    bdc2:	4770      	bx	lr
    bdc4:	3801      	subs	r0, #1
    bdc6:	4770      	bx	lr
    bdc8:	2d00      	cmp	r5, #0
    bdca:	bf06      	itte	eq
    bdcc:	4635      	moveq	r5, r6
    bdce:	3803      	subeq	r0, #3
    bdd0:	3807      	subne	r0, #7
    bdd2:	f015 0f01 	tst.w	r5, #1
    bdd6:	d107      	bne.n	bde8 <memchr+0x98>
    bdd8:	3001      	adds	r0, #1
    bdda:	f415 7f80 	tst.w	r5, #256	; 0x100
    bdde:	bf02      	ittt	eq
    bde0:	3001      	addeq	r0, #1
    bde2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bde6:	3001      	addeq	r0, #1
    bde8:	bcf0      	pop	{r4, r5, r6, r7}
    bdea:	3801      	subs	r0, #1
    bdec:	4770      	bx	lr
    bdee:	bf00      	nop

0000bdf0 <memmove>:
    bdf0:	4288      	cmp	r0, r1
    bdf2:	b510      	push	{r4, lr}
    bdf4:	eb01 0302 	add.w	r3, r1, r2
    bdf8:	d803      	bhi.n	be02 <memmove+0x12>
    bdfa:	1e42      	subs	r2, r0, #1
    bdfc:	4299      	cmp	r1, r3
    bdfe:	d10c      	bne.n	be1a <memmove+0x2a>
    be00:	bd10      	pop	{r4, pc}
    be02:	4298      	cmp	r0, r3
    be04:	d2f9      	bcs.n	bdfa <memmove+0xa>
    be06:	1881      	adds	r1, r0, r2
    be08:	1ad2      	subs	r2, r2, r3
    be0a:	42d3      	cmn	r3, r2
    be0c:	d100      	bne.n	be10 <memmove+0x20>
    be0e:	bd10      	pop	{r4, pc}
    be10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    be14:	f801 4d01 	strb.w	r4, [r1, #-1]!
    be18:	e7f7      	b.n	be0a <memmove+0x1a>
    be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
    be1e:	f802 4f01 	strb.w	r4, [r2, #1]!
    be22:	e7eb      	b.n	bdfc <memmove+0xc>

0000be24 <_realloc_r>:
    be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be26:	4607      	mov	r7, r0
    be28:	4614      	mov	r4, r2
    be2a:	460e      	mov	r6, r1
    be2c:	b921      	cbnz	r1, be38 <_realloc_r+0x14>
    be2e:	4611      	mov	r1, r2
    be30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    be34:	f7ff bc0a 	b.w	b64c <_malloc_r>
    be38:	b922      	cbnz	r2, be44 <_realloc_r+0x20>
    be3a:	f7ff fbb9 	bl	b5b0 <_free_r>
    be3e:	4625      	mov	r5, r4
    be40:	4628      	mov	r0, r5
    be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be44:	f000 f814 	bl	be70 <_malloc_usable_size_r>
    be48:	4284      	cmp	r4, r0
    be4a:	d90f      	bls.n	be6c <_realloc_r+0x48>
    be4c:	4621      	mov	r1, r4
    be4e:	4638      	mov	r0, r7
    be50:	f7ff fbfc 	bl	b64c <_malloc_r>
    be54:	4605      	mov	r5, r0
    be56:	2800      	cmp	r0, #0
    be58:	d0f2      	beq.n	be40 <_realloc_r+0x1c>
    be5a:	4631      	mov	r1, r6
    be5c:	4622      	mov	r2, r4
    be5e:	f7ff fb93 	bl	b588 <memcpy>
    be62:	4631      	mov	r1, r6
    be64:	4638      	mov	r0, r7
    be66:	f7ff fba3 	bl	b5b0 <_free_r>
    be6a:	e7e9      	b.n	be40 <_realloc_r+0x1c>
    be6c:	4635      	mov	r5, r6
    be6e:	e7e7      	b.n	be40 <_realloc_r+0x1c>

0000be70 <_malloc_usable_size_r>:
    be70:	f851 0c04 	ldr.w	r0, [r1, #-4]
    be74:	2800      	cmp	r0, #0
    be76:	f1a0 0004 	sub.w	r0, r0, #4
    be7a:	bfbc      	itt	lt
    be7c:	580b      	ldrlt	r3, [r1, r0]
    be7e:	18c0      	addlt	r0, r0, r3
    be80:	4770      	bx	lr
    be82:	0000      	movs	r0, r0
    be84:	682f2e2e 	.word	0x682f2e2e
    be88:	692f6c61 	.word	0x692f6c61
    be8c:	756c636e 	.word	0x756c636e
    be90:	682f6564 	.word	0x682f6564
    be94:	775f6c61 	.word	0x775f6c61
    be98:	682e7464 	.word	0x682e7464
    be9c:	00000000 	.word	0x00000000
    bea0:	4952475b 	.word	0x4952475b
    bea4:	25205d44 	.word	0x25205d44
    bea8:	25206433 	.word	0x25206433
    beac:	25206434 	.word	0x25206434
    beb0:	25206434 	.word	0x25206434
    beb4:	4d5b2064 	.word	0x4d5b2064
    beb8:	5d494449 	.word	0x5d494449
    bebc:	3a684320 	.word	0x3a684320
    bec0:	20642520 	.word	0x20642520
    bec4:	646d4320 	.word	0x646d4320
    bec8:	6425203a 	.word	0x6425203a
    becc:	61502020 	.word	0x61502020
    bed0:	316d6172 	.word	0x316d6172
    bed4:	6425203a 	.word	0x6425203a
    bed8:	61502020 	.word	0x61502020
    bedc:	326d6172 	.word	0x326d6172
    bee0:	6425203a 	.word	0x6425203a
    bee4:	0000000a 	.word	0x0000000a
    bee8:	4952475b 	.word	0x4952475b
    beec:	25205d44 	.word	0x25205d44
    bef0:	25206433 	.word	0x25206433
    bef4:	25206434 	.word	0x25206434
    bef8:	25206434 	.word	0x25206434
    befc:	4b5b2064 	.word	0x4b5b2064
    bf00:	4f425945 	.word	0x4f425945
    bf04:	5d445241 	.word	0x5d445241
    bf08:	79654b20 	.word	0x79654b20
    bf0c:	6425203a 	.word	0x6425203a
    bf10:	646f4d20 	.word	0x646f4d20
    bf14:	6425203a 	.word	0x6425203a
    bf18:	646d4320 	.word	0x646d4320
    bf1c:	6425203a 	.word	0x6425203a
    bf20:	4357480a 	.word	0x4357480a
    bf24:	203a4746 	.word	0x203a4746
    bf28:	78383025 	.word	0x78383025
    bf2c:	0000000a 	.word	0x0000000a
    bf30:	4b4e555b 	.word	0x4b4e555b
    bf34:	4e574f4e 	.word	0x4e574f4e
    bf38:	3e2d205d 	.word	0x3e2d205d
    bf3c:	6f725020 	.word	0x6f725020
    bf40:	6f636f74 	.word	0x6f636f74
    bf44:	25203a6c 	.word	0x25203a6c
    bf48:	00000a64 	.word	0x00000a64
    bf4c:	0f0e0d0c 	.word	0x0f0e0d0c
    bf50:	0b0a0908 	.word	0x0b0a0908
    bf54:	07060504 	.word	0x07060504
    bf58:	03020100 	.word	0x03020100
    bf5c:	30256325 	.word	0x30256325
    bf60:	30257832 	.word	0x30257832
    bf64:	30257832 	.word	0x30257832
    bf68:	30257832 	.word	0x30257832
    bf6c:	63257832 	.word	0x63257832
    bf70:	00000000 	.word	0x00000000
    bf74:	00003030 	.word	0x00003030
    bf78:	30256325 	.word	0x30256325
    bf7c:	30257832 	.word	0x30257832
    bf80:	30257832 	.word	0x30257832
    bf84:	30257832 	.word	0x30257832
    bf88:	30257832 	.word	0x30257832
    bf8c:	63257832 	.word	0x63257832
    bf90:	30256325 	.word	0x30256325
    bf94:	30257832 	.word	0x30257832
    bf98:	30257832 	.word	0x30257832
    bf9c:	30257832 	.word	0x30257832
    bfa0:	30257832 	.word	0x30257832
    bfa4:	63257832 	.word	0x63257832
    bfa8:	00000000 	.word	0x00000000
    bfac:	30256325 	.word	0x30256325
    bfb0:	30257832 	.word	0x30257832
    bfb4:	30257832 	.word	0x30257832
    bfb8:	30257832 	.word	0x30257832
    bfbc:	63257832 	.word	0x63257832
    bfc0:	00000025 	.word	0x00000025
    bfc4:	78383025 	.word	0x78383025
    bfc8:	00000000 	.word	0x00000000
    bfcc:	63256325 	.word	0x63256325
    bfd0:	78323025 	.word	0x78323025
    bfd4:	78323025 	.word	0x78323025
    bfd8:	78323025 	.word	0x78323025
    bfdc:	78323025 	.word	0x78323025
    bfe0:	78323025 	.word	0x78323025
    bfe4:	00006325 	.word	0x00006325
    bfe8:	78323025 	.word	0x78323025
    bfec:	00000000 	.word	0x00000000
    bff0:	000a3030 	.word	0x000a3030
    bff4:	682f2e2e 	.word	0x682f2e2e
    bff8:	732f6c61 	.word	0x732f6c61
    bffc:	682f6372 	.word	0x682f6372
    c000:	615f6c61 	.word	0x615f6c61
    c004:	615f6364 	.word	0x615f6364
    c008:	636e7973 	.word	0x636e7973
    c00c:	0000632e 	.word	0x0000632e
    c010:	682f2e2e 	.word	0x682f2e2e
    c014:	732f6c61 	.word	0x732f6c61
    c018:	682f6372 	.word	0x682f6372
    c01c:	635f6c61 	.word	0x635f6c61
    c020:	735f6372 	.word	0x735f6372
    c024:	2e636e79 	.word	0x2e636e79
    c028:	00000063 	.word	0x00000063
    c02c:	682f2e2e 	.word	0x682f2e2e
    c030:	732f6c61 	.word	0x732f6c61
    c034:	682f6372 	.word	0x682f6372
    c038:	665f6c61 	.word	0x665f6c61
    c03c:	6873616c 	.word	0x6873616c
    c040:	0000632e 	.word	0x0000632e
    c044:	682f2e2e 	.word	0x682f2e2e
    c048:	732f6c61 	.word	0x732f6c61
    c04c:	682f6372 	.word	0x682f6372
    c050:	695f6c61 	.word	0x695f6c61
    c054:	6d5f6332 	.word	0x6d5f6332
    c058:	7973615f 	.word	0x7973615f
    c05c:	632e636e 	.word	0x632e636e
    c060:	00000000 	.word	0x00000000
    c064:	682f2e2e 	.word	0x682f2e2e
    c068:	732f6c61 	.word	0x732f6c61
    c06c:	682f6372 	.word	0x682f6372
    c070:	695f6c61 	.word	0x695f6c61
    c074:	00632e6f 	.word	0x00632e6f
    c078:	682f2e2e 	.word	0x682f2e2e
    c07c:	732f6c61 	.word	0x732f6c61
    c080:	682f6372 	.word	0x682f6372
    c084:	735f6c61 	.word	0x735f6c61
    c088:	6d5f6970 	.word	0x6d5f6970
    c08c:	7973615f 	.word	0x7973615f
    c090:	632e636e 	.word	0x632e636e
    c094:	00000000 	.word	0x00000000
    c098:	682f2e2e 	.word	0x682f2e2e
    c09c:	732f6c61 	.word	0x732f6c61
    c0a0:	682f6372 	.word	0x682f6372
    c0a4:	735f6c61 	.word	0x735f6c61
    c0a8:	6d5f6970 	.word	0x6d5f6970
    c0ac:	616d645f 	.word	0x616d645f
    c0b0:	0000632e 	.word	0x0000632e
    c0b4:	682f2e2e 	.word	0x682f2e2e
    c0b8:	732f6c61 	.word	0x732f6c61
    c0bc:	682f6372 	.word	0x682f6372
    c0c0:	745f6c61 	.word	0x745f6c61
    c0c4:	72656d69 	.word	0x72656d69
    c0c8:	0000632e 	.word	0x0000632e
    c0cc:	682f2e2e 	.word	0x682f2e2e
    c0d0:	732f6c61 	.word	0x732f6c61
    c0d4:	682f6372 	.word	0x682f6372
    c0d8:	755f6c61 	.word	0x755f6c61
    c0dc:	74726173 	.word	0x74726173
    c0e0:	7973615f 	.word	0x7973615f
    c0e4:	632e636e 	.word	0x632e636e
    c0e8:	00000000 	.word	0x00000000
    c0ec:	682f2e2e 	.word	0x682f2e2e
    c0f0:	752f6c61 	.word	0x752f6c61
    c0f4:	736c6974 	.word	0x736c6974
    c0f8:	6372732f 	.word	0x6372732f
    c0fc:	6974752f 	.word	0x6974752f
    c100:	6c5f736c 	.word	0x6c5f736c
    c104:	2e747369 	.word	0x2e747369
    c108:	00000063 	.word	0x00000063
    c10c:	682f2e2e 	.word	0x682f2e2e
    c110:	752f6c61 	.word	0x752f6c61
    c114:	736c6974 	.word	0x736c6974
    c118:	6372732f 	.word	0x6372732f
    c11c:	6974752f 	.word	0x6974752f
    c120:	725f736c 	.word	0x725f736c
    c124:	62676e69 	.word	0x62676e69
    c128:	65666675 	.word	0x65666675
    c12c:	00632e72 	.word	0x00632e72

0000c130 <_adcs>:
    c130:	01000000 0003000c 00041807 00000000     ................
    c140:	0014080b 00010000 000c0100 18040003     ................
    c150:	00000004 080b0000 00000014 682f2e2e     ............../h
    c160:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    c170:	00000000                                ....

0000c174 <_cfgs>:
    c174:	00200600 08068000 00200400 08068000     .. ....... .....
    c184:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    c1a4:	00200b00 14000003 00200a00 08000002     .. ....... .....
    c1b4:	00201300 14000003 00000000 00000000     .. .............
	...

0000c274 <user_mux_confs>:
	...
    c2a0:	04030201 04030201 00000000 00000000     ................
	...

0000c2b8 <channel_confs>:
    c2b8:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000c2f8 <interrupt_cfg>:
    c2f8:	00000002 00000002 00000002 00000002     ................
	...
    c378:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    c388:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    c398:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    c3a8:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    c3b8:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    c3c8:	43000800 43000c00                       ...C...C

0000c3d0 <_usarts>:
    c3d0:	00000000 40100004 00030000 00700002     .......@......p.
    c3e0:	0000aaaa 00000000 00000001 40100004     ...............@
    c3f0:	00030000 00700002 0000aaaa 00000000     ......p.........
    c400:	00000002 40100004 00030000 00700002     .......@......p.
    c410:	0000f62b 00000000 00000004 40100004     +..............@
    c420:	00030000 00700002 0000aaaa 00000000     ......p.........
    c430:	00000006 40100004 00030000 00700002     .......@......p.
    c440:	0000aaaa 00000000                       ........

0000c448 <_i2cms>:
    c448:	00000005 00200014 00000100 0000e6e5     ...... .........
    c458:	00d70000 02dc6c00                       .....l..

0000c460 <sercomspi_regs>:
    c460:	3020000c 00020000 00000000 01ff0005     .. 0............
    c470:	20000c03 00000000 00000000 ff000600     ... ............
    c480:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    c490:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    c4a0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    c4b0:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000c4c0 <_tcs>:
    c4c0:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    c4d0:	00000000 006c0001 00000308 00000021     ......l.....!...
    c4e0:	00003a98 00000000 006d0002 00000308     .:........m.....
    c4f0:	00000021 00003a98 00000000 006e0003     !....:........n.
    c500:	00000308 00000021 00003a98 00000000     ....!....:......
    c510:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    c520:	0000632e                                .c..

0000c524 <_usb_ep_cfgs>:
    c524:	20000d3c 00000000 00000040 00000000     <.. ....@.......
	...
    c53c:	20000d34 00000000 00000008 20000cf4     4.. ........... 
    c54c:	20000cec 00080040 00000000 00000000     ... @...........
	...
    c564:	20000cac 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    c574:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....

0000c584 <keyboard_report_desc>:
    c584:	06090105 070501a1 e729e019 01250015     ..........)...%.
    c594:	08950175 01810281 65290019 65250015     u.........)e..%e
    c5a4:	06950875 08050081 05290119 01250015     u.........)...%.
    c5b4:	05950175 03950291 00c00191              u...........

0000c5c0 <mouse_report_desc>:
    c5c0:	02090105 010901a1 090500a1 03290119     ..............).
    c5d0:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    c5e0:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    c5f0:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    c600:	73752f65 2e636462 00000063              e/usbdc.c...

0000c60c <__sf_fake_stderr>:
	...

0000c62c <__sf_fake_stdin>:
	...

0000c64c <__sf_fake_stdout>:
	...
    c66c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c67c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c68c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c69c:	00006665                                ef..

0000c6a0 <_init>:
    c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6a2:	bf00      	nop
    c6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c6a6:	bc08      	pop	{r3}
    c6a8:	469e      	mov	lr, r3
    c6aa:	4770      	bx	lr

0000c6ac <__init_array_start>:
    c6ac:	00000289 	.word	0x00000289

0000c6b0 <_fini>:
    c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6b2:	bf00      	nop
    c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c6b6:	bc08      	pop	{r3}
    c6b8:	469e      	mov	lr, r3
    c6ba:	4770      	bx	lr

0000c6bc <__fini_array_start>:
    c6bc:	00000265 	.word	0x00000265
