
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004094  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000368  20000000  00004094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020368  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020368  2**0
                  CONTENTS
  4 .bss          00000c18  20000370  00004410  00020370  2**4
                  ALLOC
  5 .stack        00010000  20000f88  00005028  00020370  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY
  8 .debug_info   000351bb  00000000  00000000  000203ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a68  00000000  00000000  000555aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001533c  00000000  00000000  0005a012  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001230  00000000  00000000  0006f34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016f8  00000000  00000000  0007057e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003201e  00000000  00000000  00071c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b650  00000000  00000000  000a3c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105b34  00000000  00000000  000bf2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003448  00000000  00000000  001c4e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 0f 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 21 1c 00 00 35 1c 00 00     ........!...5...
      bc:	39 1a 00 00 45 1a 00 00 51 1a 00 00 5d 1a 00 00     9...E...Q...]...
      cc:	69 1a 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     i...............
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	e5 1e 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 d5 26 00 00 e9 26 00 00 fd 26 00 00     .....&...&...&..
     124:	11 27 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     .'..............
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 25 27 00 00 39 27 00 00 4d 27 00 00     ....%'..9'..M'..
     154:	61 27 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     a'..............
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 f9 16 00 00 0d 17 00 00 21 17 00 00     ............!...
     224:	35 17 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     5...............
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000370 	.word	0x20000370
     280:	00000000 	.word	0x00000000
     284:	00004094 	.word	0x00004094

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004094 	.word	0x00004094
     2c4:	20000374 	.word	0x20000374
     2c8:	00004094 	.word	0x00004094
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000785 	.word	0x00000785

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00004094 	.word	0x00004094
     35c:	20000368 	.word	0x20000368
     360:	20000f88 	.word	0x20000f88
     364:	20000370 	.word	0x20000370
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00003379 	.word	0x00003379
     374:	00003171 	.word	0x00003171

00000378 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     37c:	4a1b      	ldr	r2, [pc, #108]	; (3ec <ADC_0_init+0x74>)
     37e:	6a13      	ldr	r3, [r2, #32]
     380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     384:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2240      	movs	r2, #64	; 0x40
     388:	4b19      	ldr	r3, [pc, #100]	; (3f0 <ADC_0_init+0x78>)
     38a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     38e:	4e19      	ldr	r6, [pc, #100]	; (3f4 <ADC_0_init+0x7c>)
     390:	4d19      	ldr	r5, [pc, #100]	; (3f8 <ADC_0_init+0x80>)
     392:	2400      	movs	r4, #0
     394:	9402      	str	r4, [sp, #8]
     396:	4b19      	ldr	r3, [pc, #100]	; (3fc <ADC_0_init+0x84>)
     398:	9301      	str	r3, [sp, #4]
     39a:	2301      	movs	r3, #1
     39c:	9300      	str	r3, [sp, #0]
     39e:	4623      	mov	r3, r4
     3a0:	4632      	mov	r2, r6
     3a2:	4917      	ldr	r1, [pc, #92]	; (400 <ADC_0_init+0x88>)
     3a4:	4628      	mov	r0, r5
     3a6:	4f17      	ldr	r7, [pc, #92]	; (404 <ADC_0_init+0x8c>)
     3a8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3aa:	2310      	movs	r3, #16
     3ac:	1d32      	adds	r2, r6, #4
     3ae:	4621      	mov	r1, r4
     3b0:	4628      	mov	r0, r5
     3b2:	4c15      	ldr	r4, [pc, #84]	; (408 <ADC_0_init+0x90>)
     3b4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b6:	4b15      	ldr	r3, [pc, #84]	; (40c <ADC_0_init+0x94>)
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c0:	629a      	str	r2, [r3, #40]	; 0x28
     3c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3c6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3dc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3e8:	b005      	add	sp, #20
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00
     3f4:	2000038c 	.word	0x2000038c
     3f8:	20000a5c 	.word	0x20000a5c
     3fc:	20000ab4 	.word	0x20000ab4
     400:	43001c00 	.word	0x43001c00
     404:	00000901 	.word	0x00000901
     408:	000009a5 	.word	0x000009a5
     40c:	41008000 	.word	0x41008000

00000410 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     410:	b5f0      	push	{r4, r5, r6, r7, lr}
     412:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     414:	4a1e      	ldr	r2, [pc, #120]	; (490 <ADC_1_init+0x80>)
     416:	6a13      	ldr	r3, [r2, #32]
     418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     41c:	6213      	str	r3, [r2, #32]
     41e:	2240      	movs	r2, #64	; 0x40
     420:	4b1c      	ldr	r3, [pc, #112]	; (494 <ADC_1_init+0x84>)
     422:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     426:	4e1c      	ldr	r6, [pc, #112]	; (498 <ADC_1_init+0x88>)
     428:	4d1c      	ldr	r5, [pc, #112]	; (49c <ADC_1_init+0x8c>)
     42a:	2400      	movs	r4, #0
     42c:	9402      	str	r4, [sp, #8]
     42e:	4b1c      	ldr	r3, [pc, #112]	; (4a0 <ADC_1_init+0x90>)
     430:	9301      	str	r3, [sp, #4]
     432:	2301      	movs	r3, #1
     434:	9300      	str	r3, [sp, #0]
     436:	4623      	mov	r3, r4
     438:	f106 0214 	add.w	r2, r6, #20
     43c:	4919      	ldr	r1, [pc, #100]	; (4a4 <ADC_1_init+0x94>)
     43e:	4628      	mov	r0, r5
     440:	4f19      	ldr	r7, [pc, #100]	; (4a8 <ADC_1_init+0x98>)
     442:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     444:	2310      	movs	r3, #16
     446:	f106 0218 	add.w	r2, r6, #24
     44a:	4621      	mov	r1, r4
     44c:	4628      	mov	r0, r5
     44e:	4c17      	ldr	r4, [pc, #92]	; (4ac <ADC_1_init+0x9c>)
     450:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <ADC_1_init+0xa0>)
     454:	2204      	movs	r2, #4
     456:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     45a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     45e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     462:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     476:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     486:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     48a:	b005      	add	sp, #20
     48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48e:	bf00      	nop
     490:	40000800 	.word	0x40000800
     494:	40001c00 	.word	0x40001c00
     498:	2000038c 	.word	0x2000038c
     49c:	20000acc 	.word	0x20000acc
     4a0:	200009b4 	.word	0x200009b4
     4a4:	43002000 	.word	0x43002000
     4a8:	00000901 	.word	0x00000901
     4ac:	000009a5 	.word	0x000009a5
     4b0:	41008000 	.word	0x41008000

000004b4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4b4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4b6:	4a05      	ldr	r2, [pc, #20]	; (4cc <CRC_0_init+0x18>)
     4b8:	6993      	ldr	r3, [r2, #24]
     4ba:	f043 0302 	orr.w	r3, r3, #2
     4be:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c0:	4903      	ldr	r1, [pc, #12]	; (4d0 <CRC_0_init+0x1c>)
     4c2:	4804      	ldr	r0, [pc, #16]	; (4d4 <CRC_0_init+0x20>)
     4c4:	4b04      	ldr	r3, [pc, #16]	; (4d8 <CRC_0_init+0x24>)
     4c6:	4798      	blx	r3
     4c8:	bd08      	pop	{r3, pc}
     4ca:	bf00      	nop
     4cc:	40000800 	.word	0x40000800
     4d0:	41002000 	.word	0x41002000
     4d4:	200009b0 	.word	0x200009b0
     4d8:	00000c41 	.word	0x00000c41

000004dc <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     4dc:	4a02      	ldr	r2, [pc, #8]	; (4e8 <FLASH_0_CLOCK_init+0xc>)
     4de:	6913      	ldr	r3, [r2, #16]
     4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     4e4:	6113      	str	r3, [r2, #16]
     4e6:	4770      	bx	lr
     4e8:	40000800 	.word	0x40000800

000004ec <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <FLASH_0_init+0x10>)
     4f0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     4f2:	4903      	ldr	r1, [pc, #12]	; (500 <FLASH_0_init+0x14>)
     4f4:	4803      	ldr	r0, [pc, #12]	; (504 <FLASH_0_init+0x18>)
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <FLASH_0_init+0x1c>)
     4f8:	4798      	blx	r3
     4fa:	bd08      	pop	{r3, pc}
     4fc:	000004dd 	.word	0x000004dd
     500:	41004000 	.word	0x41004000
     504:	20000994 	.word	0x20000994
     508:	00000d25 	.word	0x00000d25

0000050c <GRID_AUX_CLOCK_init>:
     50c:	4b06      	ldr	r3, [pc, #24]	; (528 <GRID_AUX_CLOCK_init+0x1c>)
     50e:	2240      	movs	r2, #64	; 0x40
     510:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     514:	2243      	movs	r2, #67	; 0x43
     516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     51a:	4a04      	ldr	r2, [pc, #16]	; (52c <GRID_AUX_CLOCK_init+0x20>)
     51c:	6993      	ldr	r3, [r2, #24]
     51e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     522:	6193      	str	r3, [r2, #24]
     524:	4770      	bx	lr
     526:	bf00      	nop
     528:	40001c00 	.word	0x40001c00
     52c:	40000800 	.word	0x40000800

00000530 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     530:	4b10      	ldr	r3, [pc, #64]	; (574 <GRID_AUX_PORT_init+0x44>)
     532:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     536:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     546:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     54a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     552:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     566:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     56a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     572:	4770      	bx	lr
     574:	41008000 	.word	0x41008000

00000578 <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     578:	b510      	push	{r4, lr}
     57a:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <GRID_AUX_init+0x20>)
     57e:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     580:	2300      	movs	r3, #0
     582:	9300      	str	r3, [sp, #0]
     584:	2310      	movs	r3, #16
     586:	4a05      	ldr	r2, [pc, #20]	; (59c <GRID_AUX_init+0x24>)
     588:	4905      	ldr	r1, [pc, #20]	; (5a0 <GRID_AUX_init+0x28>)
     58a:	4806      	ldr	r0, [pc, #24]	; (5a4 <GRID_AUX_init+0x2c>)
     58c:	4c06      	ldr	r4, [pc, #24]	; (5a8 <GRID_AUX_init+0x30>)
     58e:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     590:	4b06      	ldr	r3, [pc, #24]	; (5ac <GRID_AUX_init+0x34>)
     592:	4798      	blx	r3
}
     594:	b002      	add	sp, #8
     596:	bd10      	pop	{r4, pc}
     598:	0000050d 	.word	0x0000050d
     59c:	200003b4 	.word	0x200003b4
     5a0:	41012000 	.word	0x41012000
     5a4:	20000a0c 	.word	0x20000a0c
     5a8:	00001189 	.word	0x00001189
     5ac:	00000531 	.word	0x00000531

000005b0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5b0:	4b16      	ldr	r3, [pc, #88]	; (60c <SYS_I2C_PORT_init+0x5c>)
     5b2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     5b6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5be:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ce:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5d2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5d6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5de:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     5e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5fe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     602:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     606:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     60a:	4770      	bx	lr
     60c:	41008000 	.word	0x41008000

00000610 <SYS_I2C_CLOCK_init>:
     610:	4b06      	ldr	r3, [pc, #24]	; (62c <SYS_I2C_CLOCK_init+0x1c>)
     612:	2240      	movs	r2, #64	; 0x40
     614:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     618:	2243      	movs	r2, #67	; 0x43
     61a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     61e:	4a04      	ldr	r2, [pc, #16]	; (630 <SYS_I2C_CLOCK_init+0x20>)
     620:	6a13      	ldr	r3, [r2, #32]
     622:	f043 0302 	orr.w	r3, r3, #2
     626:	6213      	str	r3, [r2, #32]
     628:	4770      	bx	lr
     62a:	bf00      	nop
     62c:	40001c00 	.word	0x40001c00
     630:	40000800 	.word	0x40000800

00000634 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     634:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     636:	4b04      	ldr	r3, [pc, #16]	; (648 <SYS_I2C_init+0x14>)
     638:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     63a:	4904      	ldr	r1, [pc, #16]	; (64c <SYS_I2C_init+0x18>)
     63c:	4804      	ldr	r0, [pc, #16]	; (650 <SYS_I2C_init+0x1c>)
     63e:	4b05      	ldr	r3, [pc, #20]	; (654 <SYS_I2C_init+0x20>)
     640:	4798      	blx	r3
	SYS_I2C_PORT_init();
     642:	4b05      	ldr	r3, [pc, #20]	; (658 <SYS_I2C_init+0x24>)
     644:	4798      	blx	r3
     646:	bd08      	pop	{r3, pc}
     648:	00000611 	.word	0x00000611
     64c:	43000400 	.word	0x43000400
     650:	200009cc 	.word	0x200009cc
     654:	00000e05 	.word	0x00000e05
     658:	000005b1 	.word	0x000005b1

0000065c <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     65c:	4b2d      	ldr	r3, [pc, #180]	; (714 <GRID_LED_PORT_init+0xb8>)
     65e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     662:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     66e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     672:	4a29      	ldr	r2, [pc, #164]	; (718 <GRID_LED_PORT_init+0xbc>)
     674:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     678:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     67c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     680:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     684:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     688:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     68c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     690:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     694:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     69c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     6a8:	4a1c      	ldr	r2, [pc, #112]	; (71c <GRID_LED_PORT_init+0xc0>)
     6aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ae:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ba:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6be:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6c6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ca:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d6:	4a12      	ldr	r2, [pc, #72]	; (720 <GRID_LED_PORT_init+0xc4>)
     6d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6dc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     6e0:	3204      	adds	r2, #4
     6e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e6:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
     6ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ee:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fe:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     702:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     706:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     70a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
     712:	4770      	bx	lr
     714:	41008000 	.word	0x41008000
     718:	c0000020 	.word	0xc0000020
     71c:	c0000010 	.word	0xc0000010
     720:	40020000 	.word	0x40020000

00000724 <GRID_LED_CLOCK_init>:
     724:	4b06      	ldr	r3, [pc, #24]	; (740 <GRID_LED_CLOCK_init+0x1c>)
     726:	2240      	movs	r2, #64	; 0x40
     728:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     72c:	2243      	movs	r2, #67	; 0x43
     72e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     732:	4a04      	ldr	r2, [pc, #16]	; (744 <GRID_LED_CLOCK_init+0x20>)
     734:	6a13      	ldr	r3, [r2, #32]
     736:	f043 0308 	orr.w	r3, r3, #8
     73a:	6213      	str	r3, [r2, #32]
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	40001c00 	.word	0x40001c00
     744:	40000800 	.word	0x40000800

00000748 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     748:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     74a:	4b04      	ldr	r3, [pc, #16]	; (75c <GRID_LED_init+0x14>)
     74c:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     74e:	4904      	ldr	r1, [pc, #16]	; (760 <GRID_LED_init+0x18>)
     750:	4804      	ldr	r0, [pc, #16]	; (764 <GRID_LED_init+0x1c>)
     752:	4b05      	ldr	r3, [pc, #20]	; (768 <GRID_LED_init+0x20>)
     754:	4798      	blx	r3
	GRID_LED_PORT_init();
     756:	4b05      	ldr	r3, [pc, #20]	; (76c <GRID_LED_init+0x24>)
     758:	4798      	blx	r3
     75a:	bd08      	pop	{r3, pc}
     75c:	00000725 	.word	0x00000725
     760:	43000c00 	.word	0x43000c00
     764:	20000a88 	.word	0x20000a88
     768:	00000f09 	.word	0x00000f09
     76c:	0000065d 	.word	0x0000065d

00000770 <delay_driver_init>:
}

void delay_driver_init(void)
{
     770:	b508      	push	{r3, lr}
	delay_init(SysTick);
     772:	4802      	ldr	r0, [pc, #8]	; (77c <delay_driver_init+0xc>)
     774:	4b02      	ldr	r3, [pc, #8]	; (780 <delay_driver_init+0x10>)
     776:	4798      	blx	r3
     778:	bd08      	pop	{r3, pc}
     77a:	bf00      	nop
     77c:	e000e010 	.word	0xe000e010
     780:	00000cdd 	.word	0x00000cdd

00000784 <system_init>:
}

void system_init(void)
{
     784:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     786:	4b35      	ldr	r3, [pc, #212]	; (85c <system_init+0xd8>)
     788:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     78a:	4b35      	ldr	r3, [pc, #212]	; (860 <system_init+0xdc>)
     78c:	2220      	movs	r2, #32
     78e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     790:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     792:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     796:	629a      	str	r2, [r3, #40]	; 0x28
     798:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     79c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     7ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     7ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7be:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c2:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ca:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     7d2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     7de:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7e2:	3108      	adds	r1, #8
     7e4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ec:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7f4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     7f8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7fc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     800:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     804:	4917      	ldr	r1, [pc, #92]	; (864 <system_init+0xe0>)
     806:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     812:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     81a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     81e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     822:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     826:	4a10      	ldr	r2, [pc, #64]	; (868 <system_init+0xe4>)
     828:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     82c:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     834:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     838:	4b0c      	ldr	r3, [pc, #48]	; (86c <system_init+0xe8>)
     83a:	4798      	blx	r3
	ADC_1_init();
     83c:	4b0c      	ldr	r3, [pc, #48]	; (870 <system_init+0xec>)
     83e:	4798      	blx	r3

	CRC_0_init();
     840:	4b0c      	ldr	r3, [pc, #48]	; (874 <system_init+0xf0>)
     842:	4798      	blx	r3

	FLASH_0_init();
     844:	4b0c      	ldr	r3, [pc, #48]	; (878 <system_init+0xf4>)
     846:	4798      	blx	r3

	GRID_AUX_init();
     848:	4b0c      	ldr	r3, [pc, #48]	; (87c <system_init+0xf8>)
     84a:	4798      	blx	r3

	SYS_I2C_init();
     84c:	4b0c      	ldr	r3, [pc, #48]	; (880 <system_init+0xfc>)
     84e:	4798      	blx	r3

	GRID_LED_init();
     850:	4b0c      	ldr	r3, [pc, #48]	; (884 <system_init+0x100>)
     852:	4798      	blx	r3

	delay_driver_init();
     854:	4b0c      	ldr	r3, [pc, #48]	; (888 <system_init+0x104>)
     856:	4798      	blx	r3
     858:	bd08      	pop	{r3, pc}
     85a:	bf00      	nop
     85c:	00001755 	.word	0x00001755
     860:	41008000 	.word	0x41008000
     864:	c0000010 	.word	0xc0000010
     868:	c0000020 	.word	0xc0000020
     86c:	00000379 	.word	0x00000379
     870:	00000411 	.word	0x00000411
     874:	000004b5 	.word	0x000004b5
     878:	000004ed 	.word	0x000004ed
     87c:	00000579 	.word	0x00000579
     880:	00000635 	.word	0x00000635
     884:	00000749 	.word	0x00000749
     888:	00000771 	.word	0x00000771

0000088c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     88c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     88e:	6983      	ldr	r3, [r0, #24]
     890:	b103      	cbz	r3, 894 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     892:	4798      	blx	r3
     894:	bd08      	pop	{r3, pc}

00000896 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     896:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     898:	69c3      	ldr	r3, [r0, #28]
     89a:	b103      	cbz	r3, 89e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     89c:	4798      	blx	r3
     89e:	bd08      	pop	{r3, pc}

000008a0 <adc_async_channel_conversion_done>:
{
     8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8a4:	4606      	mov	r6, r0
     8a6:	460f      	mov	r7, r1
     8a8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     8aa:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     8ac:	5c5c      	ldrb	r4, [r3, r1]
     8ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     8b2:	00e4      	lsls	r4, r4, #3
     8b4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     8b8:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     8bc:	f105 0a04 	add.w	sl, r5, #4
     8c0:	b2d1      	uxtb	r1, r2
     8c2:	4650      	mov	r0, sl
     8c4:	4b0c      	ldr	r3, [pc, #48]	; (8f8 <adc_async_channel_conversion_done+0x58>)
     8c6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     8c8:	4630      	mov	r0, r6
     8ca:	4b0c      	ldr	r3, [pc, #48]	; (8fc <adc_async_channel_conversion_done+0x5c>)
     8cc:	4798      	blx	r3
     8ce:	2801      	cmp	r0, #1
     8d0:	d907      	bls.n	8e2 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     8d2:	ea4f 2119 	mov.w	r1, r9, lsr #8
     8d6:	4650      	mov	r0, sl
     8d8:	4b07      	ldr	r3, [pc, #28]	; (8f8 <adc_async_channel_conversion_done+0x58>)
     8da:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     8dc:	8aab      	ldrh	r3, [r5, #20]
     8de:	3301      	adds	r3, #1
     8e0:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     8e2:	8aab      	ldrh	r3, [r5, #20]
     8e4:	3301      	adds	r3, #1
     8e6:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     8e8:	f858 3004 	ldr.w	r3, [r8, r4]
     8ec:	b113      	cbz	r3, 8f4 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     8ee:	4639      	mov	r1, r7
     8f0:	4630      	mov	r0, r6
     8f2:	4798      	blx	r3
     8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8f8:	00001309 	.word	0x00001309
     8fc:	0000168f 	.word	0x0000168f

00000900 <adc_async_init>:
{
     900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     904:	4689      	mov	r9, r1
     906:	4616      	mov	r6, r2
     908:	461c      	mov	r4, r3
     90a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     90e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     910:	4607      	mov	r7, r0
     912:	b140      	cbz	r0, 926 <adc_async_init+0x26>
     914:	b149      	cbz	r1, 92a <adc_async_init+0x2a>
     916:	b152      	cbz	r2, 92e <adc_async_init+0x2e>
     918:	f1b8 0f00 	cmp.w	r8, #0
     91c:	d009      	beq.n	932 <adc_async_init+0x32>
     91e:	1c28      	adds	r0, r5, #0
     920:	bf18      	it	ne
     922:	2001      	movne	r0, #1
     924:	e006      	b.n	934 <adc_async_init+0x34>
     926:	2000      	movs	r0, #0
     928:	e004      	b.n	934 <adc_async_init+0x34>
     92a:	2000      	movs	r0, #0
     92c:	e002      	b.n	934 <adc_async_init+0x34>
     92e:	2000      	movs	r0, #0
     930:	e000      	b.n	934 <adc_async_init+0x34>
     932:	2000      	movs	r0, #0
     934:	f8df b064 	ldr.w	fp, [pc, #100]	; 99c <adc_async_init+0x9c>
     938:	223f      	movs	r2, #63	; 0x3f
     93a:	4659      	mov	r1, fp
     93c:	f8df a060 	ldr.w	sl, [pc, #96]	; 9a0 <adc_async_init+0xa0>
     940:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     942:	1c60      	adds	r0, r4, #1
     944:	2240      	movs	r2, #64	; 0x40
     946:	4659      	mov	r1, fp
     948:	4580      	cmp	r8, r0
     94a:	bfcc      	ite	gt
     94c:	2000      	movgt	r0, #0
     94e:	2001      	movle	r0, #1
     950:	47d0      	blx	sl
	device = &descr->device;
     952:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     954:	21ff      	movs	r1, #255	; 0xff
     956:	b2da      	uxtb	r2, r3
     958:	54b1      	strb	r1, [r6, r2]
     95a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     95c:	b2da      	uxtb	r2, r3
     95e:	42a2      	cmp	r2, r4
     960:	d9f9      	bls.n	956 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     962:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     964:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     968:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     96c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     96e:	4649      	mov	r1, r9
     970:	4638      	mov	r0, r7
     972:	4b06      	ldr	r3, [pc, #24]	; (98c <adc_async_init+0x8c>)
     974:	4798      	blx	r3
	if (init_status) {
     976:	4603      	mov	r3, r0
     978:	b928      	cbnz	r0, 986 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     97a:	4a05      	ldr	r2, [pc, #20]	; (990 <adc_async_init+0x90>)
     97c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     97e:	4a05      	ldr	r2, [pc, #20]	; (994 <adc_async_init+0x94>)
     980:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     982:	4a05      	ldr	r2, [pc, #20]	; (998 <adc_async_init+0x98>)
     984:	607a      	str	r2, [r7, #4]
}
     986:	4618      	mov	r0, r3
     988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     98c:	0000155d 	.word	0x0000155d
     990:	000008a1 	.word	0x000008a1
     994:	0000088d 	.word	0x0000088d
     998:	00000897 	.word	0x00000897
     99c:	00003cb4 	.word	0x00003cb4
     9a0:	0000126d 	.word	0x0000126d

000009a4 <adc_async_register_channel_buffer>:
{
     9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9a8:	460e      	mov	r6, r1
     9aa:	4617      	mov	r7, r2
     9ac:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     9ae:	4605      	mov	r5, r0
     9b0:	2800      	cmp	r0, #0
     9b2:	d040      	beq.n	a36 <adc_async_register_channel_buffer+0x92>
     9b4:	2a00      	cmp	r2, #0
     9b6:	d040      	beq.n	a3a <adc_async_register_channel_buffer+0x96>
     9b8:	1c18      	adds	r0, r3, #0
     9ba:	bf18      	it	ne
     9bc:	2001      	movne	r0, #1
     9be:	f8df 9098 	ldr.w	r9, [pc, #152]	; a58 <adc_async_register_channel_buffer+0xb4>
     9c2:	2266      	movs	r2, #102	; 0x66
     9c4:	4649      	mov	r1, r9
     9c6:	4c22      	ldr	r4, [pc, #136]	; (a50 <adc_async_register_channel_buffer+0xac>)
     9c8:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     9ca:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     9ce:	2267      	movs	r2, #103	; 0x67
     9d0:	4649      	mov	r1, r9
     9d2:	42b0      	cmp	r0, r6
     9d4:	bf34      	ite	cc
     9d6:	2000      	movcc	r0, #0
     9d8:	2001      	movcs	r0, #1
     9da:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     9dc:	6a29      	ldr	r1, [r5, #32]
     9de:	5d8b      	ldrb	r3, [r1, r6]
     9e0:	2bff      	cmp	r3, #255	; 0xff
     9e2:	d12c      	bne.n	a3e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     9e4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     9e8:	2300      	movs	r3, #0
     9ea:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     9ec:	b2da      	uxtb	r2, r3
     9ee:	5c8a      	ldrb	r2, [r1, r2]
     9f0:	2aff      	cmp	r2, #255	; 0xff
			index++;
     9f2:	bf1c      	itt	ne
     9f4:	3401      	addne	r4, #1
     9f6:	b2e4      	uxtbne	r4, r4
     9f8:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     9fa:	b2da      	uxtb	r2, r3
     9fc:	4282      	cmp	r2, r0
     9fe:	d9f5      	bls.n	9ec <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     a00:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     a04:	42a3      	cmp	r3, r4
     a06:	d31d      	bcc.n	a44 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     a08:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     a0c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     a10:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     a12:	4448      	add	r0, r9
     a14:	4642      	mov	r2, r8
     a16:	4639      	mov	r1, r7
     a18:	3004      	adds	r0, #4
     a1a:	4b0e      	ldr	r3, [pc, #56]	; (a54 <adc_async_register_channel_buffer+0xb0>)
     a1c:	4798      	blx	r3
     a1e:	4602      	mov	r2, r0
     a20:	b998      	cbnz	r0, a4a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     a22:	6a2b      	ldr	r3, [r5, #32]
     a24:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     a26:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a28:	4499      	add	r9, r3
     a2a:	2300      	movs	r3, #0
     a2c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     a30:	4610      	mov	r0, r2
     a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     a36:	2000      	movs	r0, #0
     a38:	e7c1      	b.n	9be <adc_async_register_channel_buffer+0x1a>
     a3a:	2000      	movs	r0, #0
     a3c:	e7bf      	b.n	9be <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     a3e:	f06f 020c 	mvn.w	r2, #12
     a42:	e7f5      	b.n	a30 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     a44:	f06f 021b 	mvn.w	r2, #27
     a48:	e7f2      	b.n	a30 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     a4a:	f06f 020c 	mvn.w	r2, #12
     a4e:	e7ef      	b.n	a30 <adc_async_register_channel_buffer+0x8c>
     a50:	0000126d 	.word	0x0000126d
     a54:	00001275 	.word	0x00001275
     a58:	00003cb4 	.word	0x00003cb4

00000a5c <adc_async_enable_channel>:
{
     a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a5e:	460d      	mov	r5, r1
	ASSERT(descr);
     a60:	4f0b      	ldr	r7, [pc, #44]	; (a90 <adc_async_enable_channel+0x34>)
     a62:	4604      	mov	r4, r0
     a64:	2283      	movs	r2, #131	; 0x83
     a66:	4639      	mov	r1, r7
     a68:	3000      	adds	r0, #0
     a6a:	bf18      	it	ne
     a6c:	2001      	movne	r0, #1
     a6e:	4e09      	ldr	r6, [pc, #36]	; (a94 <adc_async_enable_channel+0x38>)
     a70:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     a72:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     a76:	2284      	movs	r2, #132	; 0x84
     a78:	4639      	mov	r1, r7
     a7a:	42a8      	cmp	r0, r5
     a7c:	bf34      	ite	cc
     a7e:	2000      	movcc	r0, #0
     a80:	2001      	movcs	r0, #1
     a82:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     a84:	4629      	mov	r1, r5
     a86:	4620      	mov	r0, r4
     a88:	4b03      	ldr	r3, [pc, #12]	; (a98 <adc_async_enable_channel+0x3c>)
     a8a:	4798      	blx	r3
}
     a8c:	2000      	movs	r0, #0
     a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a90:	00003cb4 	.word	0x00003cb4
     a94:	0000126d 	.word	0x0000126d
     a98:	00001679 	.word	0x00001679

00000a9c <adc_async_register_callback>:
{
     a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     aa0:	460e      	mov	r6, r1
     aa2:	4614      	mov	r4, r2
     aa4:	4699      	mov	r9, r3
	ASSERT(descr);
     aa6:	f8df 8070 	ldr.w	r8, [pc, #112]	; b18 <adc_async_register_callback+0x7c>
     aaa:	4605      	mov	r5, r0
     aac:	229c      	movs	r2, #156	; 0x9c
     aae:	4641      	mov	r1, r8
     ab0:	3000      	adds	r0, #0
     ab2:	bf18      	it	ne
     ab4:	2001      	movne	r0, #1
     ab6:	4f16      	ldr	r7, [pc, #88]	; (b10 <adc_async_register_callback+0x74>)
     ab8:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     aba:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     abe:	229d      	movs	r2, #157	; 0x9d
     ac0:	4641      	mov	r1, r8
     ac2:	42b0      	cmp	r0, r6
     ac4:	bf34      	ite	cc
     ac6:	2000      	movcc	r0, #0
     ac8:	2001      	movcs	r0, #1
     aca:	47b8      	blx	r7
	switch (type) {
     acc:	2c01      	cmp	r4, #1
     ace:	d019      	beq.n	b04 <adc_async_register_callback+0x68>
     ad0:	b12c      	cbz	r4, ade <adc_async_register_callback+0x42>
     ad2:	2c02      	cmp	r4, #2
     ad4:	d019      	beq.n	b0a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
     ad6:	f06f 000c 	mvn.w	r0, #12
}
     ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
     ade:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     ae0:	5d9b      	ldrb	r3, [r3, r6]
     ae2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ae8:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     aec:	f119 0300 	adds.w	r3, r9, #0
     af0:	bf18      	it	ne
     af2:	2301      	movne	r3, #1
     af4:	4622      	mov	r2, r4
     af6:	4631      	mov	r1, r6
     af8:	4628      	mov	r0, r5
     afa:	4c06      	ldr	r4, [pc, #24]	; (b14 <adc_async_register_callback+0x78>)
     afc:	47a0      	blx	r4
	return ERR_NONE;
     afe:	2000      	movs	r0, #0
     b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
     b04:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
     b08:	e7f0      	b.n	aec <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     b0a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
     b0e:	e7ed      	b.n	aec <adc_async_register_callback+0x50>
     b10:	0000126d 	.word	0x0000126d
     b14:	000016b7 	.word	0x000016b7
     b18:	00003cb4 	.word	0x00003cb4

00000b1c <adc_async_read_channel>:
{
     b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b20:	b083      	sub	sp, #12
     b22:	4688      	mov	r8, r1
     b24:	4691      	mov	r9, r2
     b26:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
     b28:	4604      	mov	r4, r0
     b2a:	2800      	cmp	r0, #0
     b2c:	d04f      	beq.n	bce <adc_async_read_channel+0xb2>
     b2e:	2a00      	cmp	r2, #0
     b30:	d04f      	beq.n	bd2 <adc_async_read_channel+0xb6>
     b32:	1c18      	adds	r0, r3, #0
     b34:	bf18      	it	ne
     b36:	2001      	movne	r0, #1
     b38:	4f29      	ldr	r7, [pc, #164]	; (be0 <adc_async_read_channel+0xc4>)
     b3a:	22bc      	movs	r2, #188	; 0xbc
     b3c:	4639      	mov	r1, r7
     b3e:	4e29      	ldr	r6, [pc, #164]	; (be4 <adc_async_read_channel+0xc8>)
     b40:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     b42:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     b46:	22bd      	movs	r2, #189	; 0xbd
     b48:	4639      	mov	r1, r7
     b4a:	4540      	cmp	r0, r8
     b4c:	bf34      	ite	cc
     b4e:	2000      	movcc	r0, #0
     b50:	2001      	movcs	r0, #1
     b52:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     b54:	4620      	mov	r0, r4
     b56:	4b24      	ldr	r3, [pc, #144]	; (be8 <adc_async_read_channel+0xcc>)
     b58:	4798      	blx	r3
	ASSERT(!(length % data_size));
     b5a:	fb95 f3f0 	sdiv	r3, r5, r0
     b5e:	fb03 5010 	mls	r0, r3, r0, r5
     b62:	22bf      	movs	r2, #191	; 0xbf
     b64:	4639      	mov	r1, r7
     b66:	fab0 f080 	clz	r0, r0
     b6a:	0940      	lsrs	r0, r0, #5
     b6c:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
     b6e:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     b70:	f813 b008 	ldrb.w	fp, [r3, r8]
     b74:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
     b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b7a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
     b7e:	a801      	add	r0, sp, #4
     b80:	4b1a      	ldr	r3, [pc, #104]	; (bec <adc_async_read_channel+0xd0>)
     b82:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     b84:	f10b 0a04 	add.w	sl, fp, #4
     b88:	4650      	mov	r0, sl
     b8a:	4b19      	ldr	r3, [pc, #100]	; (bf0 <adc_async_read_channel+0xd4>)
     b8c:	4798      	blx	r3
     b8e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b90:	a801      	add	r0, sp, #4
     b92:	4b18      	ldr	r3, [pc, #96]	; (bf4 <adc_async_read_channel+0xd8>)
     b94:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b96:	f1b8 0f00 	cmp.w	r8, #0
     b9a:	d01c      	beq.n	bd6 <adc_async_read_channel+0xba>
     b9c:	b1ed      	cbz	r5, bda <adc_async_read_channel+0xbe>
     b9e:	3d01      	subs	r5, #1
     ba0:	b2ad      	uxth	r5, r5
     ba2:	3502      	adds	r5, #2
     ba4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     ba6:	4f14      	ldr	r7, [pc, #80]	; (bf8 <adc_async_read_channel+0xdc>)
     ba8:	b2a6      	uxth	r6, r4
     baa:	1e61      	subs	r1, r4, #1
     bac:	4449      	add	r1, r9
     bae:	4650      	mov	r0, sl
     bb0:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
     bb2:	4544      	cmp	r4, r8
     bb4:	d002      	beq.n	bbc <adc_async_read_channel+0xa0>
     bb6:	3401      	adds	r4, #1
     bb8:	42ac      	cmp	r4, r5
     bba:	d1f5      	bne.n	ba8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     bbc:	f8bb 3014 	ldrh.w	r3, [fp, #20]
     bc0:	1b9b      	subs	r3, r3, r6
     bc2:	f8ab 3014 	strh.w	r3, [fp, #20]
}
     bc6:	4630      	mov	r0, r6
     bc8:	b003      	add	sp, #12
     bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
     bce:	2000      	movs	r0, #0
     bd0:	e7b2      	b.n	b38 <adc_async_read_channel+0x1c>
     bd2:	2000      	movs	r0, #0
     bd4:	e7b0      	b.n	b38 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
     bd6:	2600      	movs	r6, #0
     bd8:	e7f0      	b.n	bbc <adc_async_read_channel+0xa0>
     bda:	2600      	movs	r6, #0
     bdc:	e7ee      	b.n	bbc <adc_async_read_channel+0xa0>
     bde:	bf00      	nop
     be0:	00003cb4 	.word	0x00003cb4
     be4:	0000126d 	.word	0x0000126d
     be8:	0000168f 	.word	0x0000168f
     bec:	00000c25 	.word	0x00000c25
     bf0:	00001349 	.word	0x00001349
     bf4:	00000c33 	.word	0x00000c33
     bf8:	000012c5 	.word	0x000012c5

00000bfc <adc_async_start_conversion>:
{
     bfc:	b510      	push	{r4, lr}
	ASSERT(descr);
     bfe:	4604      	mov	r4, r0
     c00:	22d6      	movs	r2, #214	; 0xd6
     c02:	4905      	ldr	r1, [pc, #20]	; (c18 <adc_async_start_conversion+0x1c>)
     c04:	3000      	adds	r0, #0
     c06:	bf18      	it	ne
     c08:	2001      	movne	r0, #1
     c0a:	4b04      	ldr	r3, [pc, #16]	; (c1c <adc_async_start_conversion+0x20>)
     c0c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     c0e:	4620      	mov	r0, r4
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <adc_async_start_conversion+0x24>)
     c12:	4798      	blx	r3
}
     c14:	2000      	movs	r0, #0
     c16:	bd10      	pop	{r4, pc}
     c18:	00003cb4 	.word	0x00003cb4
     c1c:	0000126d 	.word	0x0000126d
     c20:	000016a1 	.word	0x000016a1

00000c24 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c24:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     c28:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c2a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c2c:	f3bf 8f5f 	dmb	sy
     c30:	4770      	bx	lr

00000c32 <atomic_leave_critical>:
     c32:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     c36:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c38:	f383 8810 	msr	PRIMASK, r3
     c3c:	4770      	bx	lr
	...

00000c40 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b158      	cbz	r0, c60 <crc_sync_init+0x20>
     c48:	1c08      	adds	r0, r1, #0
     c4a:	bf18      	it	ne
     c4c:	2001      	movne	r0, #1
     c4e:	222b      	movs	r2, #43	; 0x2b
     c50:	4904      	ldr	r1, [pc, #16]	; (c64 <crc_sync_init+0x24>)
     c52:	4b05      	ldr	r3, [pc, #20]	; (c68 <crc_sync_init+0x28>)
     c54:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
     c56:	4621      	mov	r1, r4
     c58:	4628      	mov	r0, r5
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <crc_sync_init+0x2c>)
     c5c:	4798      	blx	r3
}
     c5e:	bd38      	pop	{r3, r4, r5, pc}
     c60:	2000      	movs	r0, #0
     c62:	e7f4      	b.n	c4e <crc_sync_init+0xe>
     c64:	00003cd0 	.word	0x00003cd0
     c68:	0000126d 	.word	0x0000126d
     c6c:	00001a75 	.word	0x00001a75

00000c70 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
     c70:	b510      	push	{r4, lr}
	ASSERT(descr);
     c72:	4604      	mov	r4, r0
     c74:	223f      	movs	r2, #63	; 0x3f
     c76:	4905      	ldr	r1, [pc, #20]	; (c8c <crc_sync_enable+0x1c>)
     c78:	3000      	adds	r0, #0
     c7a:	bf18      	it	ne
     c7c:	2001      	movne	r0, #1
     c7e:	4b04      	ldr	r3, [pc, #16]	; (c90 <crc_sync_enable+0x20>)
     c80:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
     c82:	4620      	mov	r0, r4
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <crc_sync_enable+0x24>)
     c86:	4798      	blx	r3
}
     c88:	bd10      	pop	{r4, pc}
     c8a:	bf00      	nop
     c8c:	00003cd0 	.word	0x00003cd0
     c90:	0000126d 	.word	0x0000126d
     c94:	00001a7b 	.word	0x00001a7b

00000c98 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
     c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9a:	460c      	mov	r4, r1
     c9c:	4615      	mov	r5, r2
     c9e:	461e      	mov	r6, r3
	ASSERT(descr && data && len && pcrc);
     ca0:	4607      	mov	r7, r0
     ca2:	b128      	cbz	r0, cb0 <crc_sync_crc32+0x18>
     ca4:	b131      	cbz	r1, cb4 <crc_sync_crc32+0x1c>
     ca6:	b13a      	cbz	r2, cb8 <crc_sync_crc32+0x20>
     ca8:	1c18      	adds	r0, r3, #0
     caa:	bf18      	it	ne
     cac:	2001      	movne	r0, #1
     cae:	e004      	b.n	cba <crc_sync_crc32+0x22>
     cb0:	2000      	movs	r0, #0
     cb2:	e002      	b.n	cba <crc_sync_crc32+0x22>
     cb4:	2000      	movs	r0, #0
     cb6:	e000      	b.n	cba <crc_sync_crc32+0x22>
     cb8:	2000      	movs	r0, #0
     cba:	2253      	movs	r2, #83	; 0x53
     cbc:	4904      	ldr	r1, [pc, #16]	; (cd0 <crc_sync_crc32+0x38>)
     cbe:	4b05      	ldr	r3, [pc, #20]	; (cd4 <crc_sync_crc32+0x3c>)
     cc0:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
     cc2:	4633      	mov	r3, r6
     cc4:	462a      	mov	r2, r5
     cc6:	4621      	mov	r1, r4
     cc8:	4638      	mov	r0, r7
     cca:	4c03      	ldr	r4, [pc, #12]	; (cd8 <crc_sync_crc32+0x40>)
     ccc:	47a0      	blx	r4
}
     cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cd0:	00003cd0 	.word	0x00003cd0
     cd4:	0000126d 	.word	0x0000126d
     cd8:	00001a81 	.word	0x00001a81

00000cdc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     cdc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <delay_init+0xc>)
     ce0:	6018      	str	r0, [r3, #0]
     ce2:	4b02      	ldr	r3, [pc, #8]	; (cec <delay_init+0x10>)
     ce4:	4798      	blx	r3
     ce6:	bd08      	pop	{r3, pc}
     ce8:	200003c4 	.word	0x200003c4
     cec:	00002a7d 	.word	0x00002a7d

00000cf0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     cf0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     cf2:	4b04      	ldr	r3, [pc, #16]	; (d04 <delay_ms+0x14>)
     cf4:	681c      	ldr	r4, [r3, #0]
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <delay_ms+0x18>)
     cf8:	4798      	blx	r3
     cfa:	4601      	mov	r1, r0
     cfc:	4620      	mov	r0, r4
     cfe:	4b03      	ldr	r3, [pc, #12]	; (d0c <delay_ms+0x1c>)
     d00:	4798      	blx	r3
     d02:	bd10      	pop	{r4, pc}
     d04:	200003c4 	.word	0x200003c4
     d08:	00001749 	.word	0x00001749
     d0c:	00002a91 	.word	0x00002a91

00000d10 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     d10:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     d12:	6943      	ldr	r3, [r0, #20]
     d14:	b103      	cbz	r3, d18 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     d16:	4798      	blx	r3
     d18:	bd08      	pop	{r3, pc}

00000d1a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     d1a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     d1c:	6983      	ldr	r3, [r0, #24]
     d1e:	b103      	cbz	r3, d22 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     d20:	4798      	blx	r3
     d22:	bd08      	pop	{r3, pc}

00000d24 <flash_init>:
{
     d24:	b538      	push	{r3, r4, r5, lr}
     d26:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     d28:	4604      	mov	r4, r0
     d2a:	b190      	cbz	r0, d52 <flash_init+0x2e>
     d2c:	1c08      	adds	r0, r1, #0
     d2e:	bf18      	it	ne
     d30:	2001      	movne	r0, #1
     d32:	2238      	movs	r2, #56	; 0x38
     d34:	4908      	ldr	r1, [pc, #32]	; (d58 <flash_init+0x34>)
     d36:	4b09      	ldr	r3, [pc, #36]	; (d5c <flash_init+0x38>)
     d38:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     d3a:	4629      	mov	r1, r5
     d3c:	4620      	mov	r0, r4
     d3e:	4b08      	ldr	r3, [pc, #32]	; (d60 <flash_init+0x3c>)
     d40:	4798      	blx	r3
	if (rc) {
     d42:	4603      	mov	r3, r0
     d44:	b918      	cbnz	r0, d4e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     d46:	4a07      	ldr	r2, [pc, #28]	; (d64 <flash_init+0x40>)
     d48:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     d4a:	4a07      	ldr	r2, [pc, #28]	; (d68 <flash_init+0x44>)
     d4c:	6062      	str	r2, [r4, #4]
}
     d4e:	4618      	mov	r0, r3
     d50:	bd38      	pop	{r3, r4, r5, pc}
     d52:	2000      	movs	r0, #0
     d54:	e7ed      	b.n	d32 <flash_init+0xe>
     d56:	bf00      	nop
     d58:	00003cec 	.word	0x00003cec
     d5c:	0000126d 	.word	0x0000126d
     d60:	00001ba9 	.word	0x00001ba9
     d64:	00000d11 	.word	0x00000d11
     d68:	00000d1b 	.word	0x00000d1b

00000d6c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     d6c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     d6e:	8843      	ldrh	r3, [r0, #2]
     d70:	f413 7f80 	tst.w	r3, #256	; 0x100
     d74:	d102      	bne.n	d7c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     d76:	6b43      	ldr	r3, [r0, #52]	; 0x34
     d78:	b103      	cbz	r3, d7c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     d7a:	4798      	blx	r3
     d7c:	bd08      	pop	{r3, pc}

00000d7e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     d7e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     d80:	8843      	ldrh	r3, [r0, #2]
     d82:	f413 7f80 	tst.w	r3, #256	; 0x100
     d86:	d102      	bne.n	d8e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     d88:	6b83      	ldr	r3, [r0, #56]	; 0x38
     d8a:	b103      	cbz	r3, d8e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     d8c:	4798      	blx	r3
     d8e:	bd08      	pop	{r3, pc}

00000d90 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     d90:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     d92:	8843      	ldrh	r3, [r0, #2]
     d94:	f413 7f80 	tst.w	r3, #256	; 0x100
     d98:	d102      	bne.n	da0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     d9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
     d9c:	b103      	cbz	r3, da0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     d9e:	4798      	blx	r3
     da0:	bd08      	pop	{r3, pc}
	...

00000da4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     da4:	b510      	push	{r4, lr}
     da6:	b084      	sub	sp, #16
     da8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     daa:	8a83      	ldrh	r3, [r0, #20]
     dac:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     db0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     db6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     dba:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     dbc:	a901      	add	r1, sp, #4
     dbe:	3828      	subs	r0, #40	; 0x28
     dc0:	4b03      	ldr	r3, [pc, #12]	; (dd0 <i2c_m_async_write+0x2c>)
     dc2:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     dc4:	2800      	cmp	r0, #0
     dc6:	bf08      	it	eq
     dc8:	4620      	moveq	r0, r4
     dca:	b004      	add	sp, #16
     dcc:	bd10      	pop	{r4, pc}
     dce:	bf00      	nop
     dd0:	00002589 	.word	0x00002589

00000dd4 <i2c_m_async_read>:
{
     dd4:	b510      	push	{r4, lr}
     dd6:	b084      	sub	sp, #16
     dd8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     dda:	8a83      	ldrh	r3, [r0, #20]
     ddc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     de0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     de2:	f248 0301 	movw	r3, #32769	; 0x8001
     de6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     dea:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     dec:	a901      	add	r1, sp, #4
     dee:	3828      	subs	r0, #40	; 0x28
     df0:	4b03      	ldr	r3, [pc, #12]	; (e00 <i2c_m_async_read+0x2c>)
     df2:	4798      	blx	r3
}
     df4:	2800      	cmp	r0, #0
     df6:	bf08      	it	eq
     df8:	4620      	moveq	r0, r4
     dfa:	b004      	add	sp, #16
     dfc:	bd10      	pop	{r4, pc}
     dfe:	bf00      	nop
     e00:	00002589 	.word	0x00002589

00000e04 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     e08:	4604      	mov	r4, r0
     e0a:	2289      	movs	r2, #137	; 0x89
     e0c:	490f      	ldr	r1, [pc, #60]	; (e4c <i2c_m_async_init+0x48>)
     e0e:	3000      	adds	r0, #0
     e10:	bf18      	it	ne
     e12:	2001      	movne	r0, #1
     e14:	4b0e      	ldr	r3, [pc, #56]	; (e50 <i2c_m_async_init+0x4c>)
     e16:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     e18:	4629      	mov	r1, r5
     e1a:	4620      	mov	r0, r4
     e1c:	4b0d      	ldr	r3, [pc, #52]	; (e54 <i2c_m_async_init+0x50>)
     e1e:	4798      	blx	r3
	if (init_status) {
     e20:	4605      	mov	r5, r0
     e22:	b108      	cbz	r0, e28 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     e24:	4628      	mov	r0, r5
     e26:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     e28:	4b0b      	ldr	r3, [pc, #44]	; (e58 <i2c_m_async_init+0x54>)
     e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     e2c:	4b0b      	ldr	r3, [pc, #44]	; (e5c <i2c_m_async_init+0x58>)
     e2e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     e30:	4a0b      	ldr	r2, [pc, #44]	; (e60 <i2c_m_async_init+0x5c>)
     e32:	2101      	movs	r1, #1
     e34:	4620      	mov	r0, r4
     e36:	4e0b      	ldr	r6, [pc, #44]	; (e64 <i2c_m_async_init+0x60>)
     e38:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     e3a:	4a0b      	ldr	r2, [pc, #44]	; (e68 <i2c_m_async_init+0x64>)
     e3c:	2102      	movs	r1, #2
     e3e:	4620      	mov	r0, r4
     e40:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     e42:	4a0a      	ldr	r2, [pc, #40]	; (e6c <i2c_m_async_init+0x68>)
     e44:	2100      	movs	r1, #0
     e46:	4620      	mov	r0, r4
     e48:	47b0      	blx	r6
	return ERR_NONE;
     e4a:	e7eb      	b.n	e24 <i2c_m_async_init+0x20>
     e4c:	00003d04 	.word	0x00003d04
     e50:	0000126d 	.word	0x0000126d
     e54:	00002509 	.word	0x00002509
     e58:	00000dd5 	.word	0x00000dd5
     e5c:	00000da5 	.word	0x00000da5
     e60:	00000d6d 	.word	0x00000d6d
     e64:	000026b9 	.word	0x000026b9
     e68:	00000d7f 	.word	0x00000d7f
     e6c:	00000d91 	.word	0x00000d91

00000e70 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e70:	b570      	push	{r4, r5, r6, lr}
     e72:	460d      	mov	r5, r1
     e74:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     e76:	4604      	mov	r4, r0
     e78:	b160      	cbz	r0, e94 <io_write+0x24>
     e7a:	1c08      	adds	r0, r1, #0
     e7c:	bf18      	it	ne
     e7e:	2001      	movne	r0, #1
     e80:	2234      	movs	r2, #52	; 0x34
     e82:	4905      	ldr	r1, [pc, #20]	; (e98 <io_write+0x28>)
     e84:	4b05      	ldr	r3, [pc, #20]	; (e9c <io_write+0x2c>)
     e86:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     e88:	6823      	ldr	r3, [r4, #0]
     e8a:	4632      	mov	r2, r6
     e8c:	4629      	mov	r1, r5
     e8e:	4620      	mov	r0, r4
     e90:	4798      	blx	r3
}
     e92:	bd70      	pop	{r4, r5, r6, pc}
     e94:	2000      	movs	r0, #0
     e96:	e7f3      	b.n	e80 <io_write+0x10>
     e98:	00003d24 	.word	0x00003d24
     e9c:	0000126d 	.word	0x0000126d

00000ea0 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	460d      	mov	r5, r1
     ea4:	4616      	mov	r6, r2
	ASSERT(io);
     ea6:	4604      	mov	r4, r0
     ea8:	2298      	movs	r2, #152	; 0x98
     eaa:	4907      	ldr	r1, [pc, #28]	; (ec8 <_spi_m_dma_io_write+0x28>)
     eac:	3000      	adds	r0, #0
     eae:	bf18      	it	ne
     eb0:	2001      	movne	r0, #1
     eb2:	4b06      	ldr	r3, [pc, #24]	; (ecc <_spi_m_dma_io_write+0x2c>)
     eb4:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     eb6:	4633      	mov	r3, r6
     eb8:	2200      	movs	r2, #0
     eba:	4629      	mov	r1, r5
     ebc:	f1a4 001c 	sub.w	r0, r4, #28
     ec0:	4c03      	ldr	r4, [pc, #12]	; (ed0 <_spi_m_dma_io_write+0x30>)
     ec2:	47a0      	blx	r4
}
     ec4:	bd70      	pop	{r4, r5, r6, pc}
     ec6:	bf00      	nop
     ec8:	00003d38 	.word	0x00003d38
     ecc:	0000126d 	.word	0x0000126d
     ed0:	00002945 	.word	0x00002945

00000ed4 <_spi_m_dma_io_read>:
{
     ed4:	b570      	push	{r4, r5, r6, lr}
     ed6:	460d      	mov	r5, r1
     ed8:	4616      	mov	r6, r2
	ASSERT(io);
     eda:	4604      	mov	r4, r0
     edc:	2281      	movs	r2, #129	; 0x81
     ede:	4907      	ldr	r1, [pc, #28]	; (efc <_spi_m_dma_io_read+0x28>)
     ee0:	3000      	adds	r0, #0
     ee2:	bf18      	it	ne
     ee4:	2001      	movne	r0, #1
     ee6:	4b06      	ldr	r3, [pc, #24]	; (f00 <_spi_m_dma_io_read+0x2c>)
     ee8:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     eea:	4633      	mov	r3, r6
     eec:	462a      	mov	r2, r5
     eee:	2100      	movs	r1, #0
     ef0:	f1a4 001c 	sub.w	r0, r4, #28
     ef4:	4c03      	ldr	r4, [pc, #12]	; (f04 <_spi_m_dma_io_read+0x30>)
     ef6:	47a0      	blx	r4
}
     ef8:	bd70      	pop	{r4, r5, r6, pc}
     efa:	bf00      	nop
     efc:	00003d38 	.word	0x00003d38
     f00:	0000126d 	.word	0x0000126d
     f04:	00002945 	.word	0x00002945

00000f08 <spi_m_dma_init>:
{
     f08:	b538      	push	{r3, r4, r5, lr}
     f0a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     f0c:	4605      	mov	r5, r0
     f0e:	b1a0      	cbz	r0, f3a <spi_m_dma_init+0x32>
     f10:	1c08      	adds	r0, r1, #0
     f12:	bf18      	it	ne
     f14:	2001      	movne	r0, #1
     f16:	223b      	movs	r2, #59	; 0x3b
     f18:	4909      	ldr	r1, [pc, #36]	; (f40 <spi_m_dma_init+0x38>)
     f1a:	4b0a      	ldr	r3, [pc, #40]	; (f44 <spi_m_dma_init+0x3c>)
     f1c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     f1e:	4628      	mov	r0, r5
     f20:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     f24:	4621      	mov	r1, r4
     f26:	4b08      	ldr	r3, [pc, #32]	; (f48 <spi_m_dma_init+0x40>)
     f28:	4798      	blx	r3
	if (rc) {
     f2a:	4603      	mov	r3, r0
     f2c:	b918      	cbnz	r0, f36 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
     f2e:	4a07      	ldr	r2, [pc, #28]	; (f4c <spi_m_dma_init+0x44>)
     f30:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
     f32:	4a07      	ldr	r2, [pc, #28]	; (f50 <spi_m_dma_init+0x48>)
     f34:	622a      	str	r2, [r5, #32]
}
     f36:	4618      	mov	r0, r3
     f38:	bd38      	pop	{r3, r4, r5, pc}
     f3a:	2000      	movs	r0, #0
     f3c:	e7eb      	b.n	f16 <spi_m_dma_init+0xe>
     f3e:	bf00      	nop
     f40:	00003d38 	.word	0x00003d38
     f44:	0000126d 	.word	0x0000126d
     f48:	00002775 	.word	0x00002775
     f4c:	00000ed5 	.word	0x00000ed5
     f50:	00000ea1 	.word	0x00000ea1

00000f54 <spi_m_dma_enable>:
{
     f54:	b510      	push	{r4, lr}
	ASSERT(spi);
     f56:	4604      	mov	r4, r0
     f58:	2251      	movs	r2, #81	; 0x51
     f5a:	4905      	ldr	r1, [pc, #20]	; (f70 <spi_m_dma_enable+0x1c>)
     f5c:	3000      	adds	r0, #0
     f5e:	bf18      	it	ne
     f60:	2001      	movne	r0, #1
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <spi_m_dma_enable+0x20>)
     f64:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     f66:	1d20      	adds	r0, r4, #4
     f68:	4b03      	ldr	r3, [pc, #12]	; (f78 <spi_m_dma_enable+0x24>)
     f6a:	4798      	blx	r3
     f6c:	bd10      	pop	{r4, pc}
     f6e:	bf00      	nop
     f70:	00003d38 	.word	0x00003d38
     f74:	0000126d 	.word	0x0000126d
     f78:	000028b5 	.word	0x000028b5

00000f7c <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	460d      	mov	r5, r1
     f80:	4616      	mov	r6, r2
	ASSERT(spi);
     f82:	4604      	mov	r4, r0
     f84:	22a8      	movs	r2, #168	; 0xa8
     f86:	4906      	ldr	r1, [pc, #24]	; (fa0 <spi_m_dma_register_callback+0x24>)
     f88:	3000      	adds	r0, #0
     f8a:	bf18      	it	ne
     f8c:	2001      	movne	r0, #1
     f8e:	4b05      	ldr	r3, [pc, #20]	; (fa4 <spi_m_dma_register_callback+0x28>)
     f90:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	1d20      	adds	r0, r4, #4
     f98:	4b03      	ldr	r3, [pc, #12]	; (fa8 <spi_m_dma_register_callback+0x2c>)
     f9a:	4798      	blx	r3
     f9c:	bd70      	pop	{r4, r5, r6, pc}
     f9e:	bf00      	nop
     fa0:	00003d38 	.word	0x00003d38
     fa4:	0000126d 	.word	0x0000126d
     fa8:	000028e5 	.word	0x000028e5

00000fac <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(spi && io);
     fb0:	4604      	mov	r4, r0
     fb2:	b150      	cbz	r0, fca <spi_m_dma_get_io_descriptor+0x1e>
     fb4:	1c08      	adds	r0, r1, #0
     fb6:	bf18      	it	ne
     fb8:	2001      	movne	r0, #1
     fba:	22ae      	movs	r2, #174	; 0xae
     fbc:	4904      	ldr	r1, [pc, #16]	; (fd0 <spi_m_dma_get_io_descriptor+0x24>)
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <spi_m_dma_get_io_descriptor+0x28>)
     fc0:	4798      	blx	r3
	*io = &spi->io;
     fc2:	3420      	adds	r4, #32
     fc4:	602c      	str	r4, [r5, #0]

	return 0;
}
     fc6:	2000      	movs	r0, #0
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	2000      	movs	r0, #0
     fcc:	e7f5      	b.n	fba <spi_m_dma_get_io_descriptor+0xe>
     fce:	bf00      	nop
     fd0:	00003d38 	.word	0x00003d38
     fd4:	0000126d 	.word	0x0000126d

00000fd8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     fd8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     fda:	2300      	movs	r3, #0
     fdc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     fde:	69c3      	ldr	r3, [r0, #28]
     fe0:	b11b      	cbz	r3, fea <usart_transmission_complete+0x12>
     fe2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     fe6:	4610      	mov	r0, r2
     fe8:	4798      	blx	r3
     fea:	bd08      	pop	{r3, pc}

00000fec <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     fec:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     fee:	2300      	movs	r3, #0
     ff0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     ff2:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ff4:	b11b      	cbz	r3, ffe <usart_error+0x12>
     ff6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     ffa:	4610      	mov	r0, r2
     ffc:	4798      	blx	r3
     ffe:	bd08      	pop	{r3, pc}

00001000 <usart_fill_rx_buffer>:
{
    1000:	b538      	push	{r3, r4, r5, lr}
    1002:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1004:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1008:	302c      	adds	r0, #44	; 0x2c
    100a:	4b03      	ldr	r3, [pc, #12]	; (1018 <usart_fill_rx_buffer+0x18>)
    100c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    100e:	6a23      	ldr	r3, [r4, #32]
    1010:	b10b      	cbz	r3, 1016 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1012:	4628      	mov	r0, r5
    1014:	4798      	blx	r3
    1016:	bd38      	pop	{r3, r4, r5, pc}
    1018:	00001309 	.word	0x00001309

0000101c <usart_async_write>:
{
    101c:	b570      	push	{r4, r5, r6, lr}
    101e:	460e      	mov	r6, r1
    1020:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1022:	4604      	mov	r4, r0
    1024:	b1e0      	cbz	r0, 1060 <usart_async_write+0x44>
    1026:	b1e9      	cbz	r1, 1064 <usart_async_write+0x48>
    1028:	1c10      	adds	r0, r2, #0
    102a:	bf18      	it	ne
    102c:	2001      	movne	r0, #1
    102e:	f240 123b 	movw	r2, #315	; 0x13b
    1032:	490f      	ldr	r1, [pc, #60]	; (1070 <usart_async_write+0x54>)
    1034:	4b0f      	ldr	r3, [pc, #60]	; (1074 <usart_async_write+0x58>)
    1036:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1038:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    103c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1040:	429a      	cmp	r2, r3
    1042:	d111      	bne.n	1068 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1044:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1046:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    104a:	2300      	movs	r3, #0
    104c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1050:	2301      	movs	r3, #1
    1052:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1054:	f104 0008 	add.w	r0, r4, #8
    1058:	4b07      	ldr	r3, [pc, #28]	; (1078 <usart_async_write+0x5c>)
    105a:	4798      	blx	r3
	return (int32_t)length;
    105c:	4628      	mov	r0, r5
    105e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1060:	2000      	movs	r0, #0
    1062:	e7e4      	b.n	102e <usart_async_write+0x12>
    1064:	2000      	movs	r0, #0
    1066:	e7e2      	b.n	102e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1068:	f06f 001b 	mvn.w	r0, #27
}
    106c:	bd70      	pop	{r4, r5, r6, pc}
    106e:	bf00      	nop
    1070:	00003d54 	.word	0x00003d54
    1074:	0000126d 	.word	0x0000126d
    1078:	000024f7 	.word	0x000024f7

0000107c <usart_process_byte_sent>:
{
    107c:	b510      	push	{r4, lr}
    107e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1080:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1082:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1086:	429a      	cmp	r2, r3
    1088:	d009      	beq.n	109e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    108a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    108c:	1c59      	adds	r1, r3, #1
    108e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1090:	5cd1      	ldrb	r1, [r2, r3]
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <usart_process_byte_sent+0x28>)
    1094:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1096:	4620      	mov	r0, r4
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <usart_process_byte_sent+0x2c>)
    109a:	4798      	blx	r3
    109c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    109e:	4b03      	ldr	r3, [pc, #12]	; (10ac <usart_process_byte_sent+0x30>)
    10a0:	4798      	blx	r3
    10a2:	bd10      	pop	{r4, pc}
    10a4:	000024f1 	.word	0x000024f1
    10a8:	000024f7 	.word	0x000024f7
    10ac:	000024ff 	.word	0x000024ff

000010b0 <usart_async_read>:
{
    10b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10b4:	b082      	sub	sp, #8
    10b6:	460f      	mov	r7, r1
    10b8:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    10ba:	4606      	mov	r6, r0
    10bc:	b1a0      	cbz	r0, 10e8 <usart_async_read+0x38>
    10be:	b199      	cbz	r1, 10e8 <usart_async_read+0x38>
    10c0:	2a00      	cmp	r2, #0
    10c2:	d12d      	bne.n	1120 <usart_async_read+0x70>
    10c4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    10c8:	4929      	ldr	r1, [pc, #164]	; (1170 <usart_async_read+0xc0>)
    10ca:	2000      	movs	r0, #0
    10cc:	4b29      	ldr	r3, [pc, #164]	; (1174 <usart_async_read+0xc4>)
    10ce:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    10d0:	a801      	add	r0, sp, #4
    10d2:	4b29      	ldr	r3, [pc, #164]	; (1178 <usart_async_read+0xc8>)
    10d4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    10d6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    10da:	4b28      	ldr	r3, [pc, #160]	; (117c <usart_async_read+0xcc>)
    10dc:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    10de:	a801      	add	r0, sp, #4
    10e0:	4b27      	ldr	r3, [pc, #156]	; (1180 <usart_async_read+0xd0>)
    10e2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    10e4:	2500      	movs	r5, #0
	return (int32_t)was_read;
    10e6:	e03e      	b.n	1166 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    10e8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    10ec:	4920      	ldr	r1, [pc, #128]	; (1170 <usart_async_read+0xc0>)
    10ee:	2000      	movs	r0, #0
    10f0:	4b20      	ldr	r3, [pc, #128]	; (1174 <usart_async_read+0xc4>)
    10f2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    10f4:	a801      	add	r0, sp, #4
    10f6:	4b20      	ldr	r3, [pc, #128]	; (1178 <usart_async_read+0xc8>)
    10f8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    10fa:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    10fe:	4650      	mov	r0, sl
    1100:	4b1e      	ldr	r3, [pc, #120]	; (117c <usart_async_read+0xcc>)
    1102:	4798      	blx	r3
    1104:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1106:	a801      	add	r0, sp, #4
    1108:	4b1d      	ldr	r3, [pc, #116]	; (1180 <usart_async_read+0xd0>)
    110a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    110c:	f1b9 0f00 	cmp.w	r9, #0
    1110:	d004      	beq.n	111c <usart_async_read+0x6c>
    1112:	f1b8 0f00 	cmp.w	r8, #0
    1116:	d119      	bne.n	114c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1118:	2500      	movs	r5, #0
    111a:	e024      	b.n	1166 <usart_async_read+0xb6>
    111c:	2500      	movs	r5, #0
    111e:	e022      	b.n	1166 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1120:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1124:	4912      	ldr	r1, [pc, #72]	; (1170 <usart_async_read+0xc0>)
    1126:	2001      	movs	r0, #1
    1128:	4b12      	ldr	r3, [pc, #72]	; (1174 <usart_async_read+0xc4>)
    112a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    112c:	a801      	add	r0, sp, #4
    112e:	4b12      	ldr	r3, [pc, #72]	; (1178 <usart_async_read+0xc8>)
    1130:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1132:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1136:	4650      	mov	r0, sl
    1138:	4b10      	ldr	r3, [pc, #64]	; (117c <usart_async_read+0xcc>)
    113a:	4798      	blx	r3
    113c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    113e:	a801      	add	r0, sp, #4
    1140:	4b0f      	ldr	r3, [pc, #60]	; (1180 <usart_async_read+0xd0>)
    1142:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1144:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1146:	f1b9 0f00 	cmp.w	r9, #0
    114a:	d00c      	beq.n	1166 <usart_async_read+0xb6>
{
    114c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    114e:	4e0d      	ldr	r6, [pc, #52]	; (1184 <usart_async_read+0xd4>)
    1150:	1c60      	adds	r0, r4, #1
    1152:	b285      	uxth	r5, r0
    1154:	1939      	adds	r1, r7, r4
    1156:	4650      	mov	r0, sl
    1158:	47b0      	blx	r6
    115a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    115c:	454c      	cmp	r4, r9
    115e:	d202      	bcs.n	1166 <usart_async_read+0xb6>
    1160:	b2a3      	uxth	r3, r4
    1162:	4598      	cmp	r8, r3
    1164:	d8f4      	bhi.n	1150 <usart_async_read+0xa0>
}
    1166:	4628      	mov	r0, r5
    1168:	b002      	add	sp, #8
    116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    116e:	bf00      	nop
    1170:	00003d54 	.word	0x00003d54
    1174:	0000126d 	.word	0x0000126d
    1178:	00000c25 	.word	0x00000c25
    117c:	00001349 	.word	0x00001349
    1180:	00000c33 	.word	0x00000c33
    1184:	000012c5 	.word	0x000012c5

00001188 <usart_async_init>:
{
    1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    118a:	460d      	mov	r5, r1
    118c:	4616      	mov	r6, r2
    118e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1190:	4604      	mov	r4, r0
    1192:	b320      	cbz	r0, 11de <usart_async_init+0x56>
    1194:	b329      	cbz	r1, 11e2 <usart_async_init+0x5a>
    1196:	b332      	cbz	r2, 11e6 <usart_async_init+0x5e>
    1198:	1c18      	adds	r0, r3, #0
    119a:	bf18      	it	ne
    119c:	2001      	movne	r0, #1
    119e:	223a      	movs	r2, #58	; 0x3a
    11a0:	4913      	ldr	r1, [pc, #76]	; (11f0 <usart_async_init+0x68>)
    11a2:	4b14      	ldr	r3, [pc, #80]	; (11f4 <usart_async_init+0x6c>)
    11a4:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    11a6:	463a      	mov	r2, r7
    11a8:	4631      	mov	r1, r6
    11aa:	f104 0034 	add.w	r0, r4, #52	; 0x34
    11ae:	4b12      	ldr	r3, [pc, #72]	; (11f8 <usart_async_init+0x70>)
    11b0:	4798      	blx	r3
    11b2:	b9d0      	cbnz	r0, 11ea <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    11b4:	4629      	mov	r1, r5
    11b6:	f104 0008 	add.w	r0, r4, #8
    11ba:	4b10      	ldr	r3, [pc, #64]	; (11fc <usart_async_init+0x74>)
    11bc:	4798      	blx	r3
	if (init_status) {
    11be:	4603      	mov	r3, r0
    11c0:	b958      	cbnz	r0, 11da <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    11c2:	4a0f      	ldr	r2, [pc, #60]	; (1200 <usart_async_init+0x78>)
    11c4:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    11c6:	4a0f      	ldr	r2, [pc, #60]	; (1204 <usart_async_init+0x7c>)
    11c8:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    11ca:	4a0f      	ldr	r2, [pc, #60]	; (1208 <usart_async_init+0x80>)
    11cc:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    11ce:	4a0f      	ldr	r2, [pc, #60]	; (120c <usart_async_init+0x84>)
    11d0:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    11d2:	4a0f      	ldr	r2, [pc, #60]	; (1210 <usart_async_init+0x88>)
    11d4:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    11d6:	4a0f      	ldr	r2, [pc, #60]	; (1214 <usart_async_init+0x8c>)
    11d8:	6162      	str	r2, [r4, #20]
}
    11da:	4618      	mov	r0, r3
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    11de:	2000      	movs	r0, #0
    11e0:	e7dd      	b.n	119e <usart_async_init+0x16>
    11e2:	2000      	movs	r0, #0
    11e4:	e7db      	b.n	119e <usart_async_init+0x16>
    11e6:	2000      	movs	r0, #0
    11e8:	e7d9      	b.n	119e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    11ea:	f06f 030c 	mvn.w	r3, #12
    11ee:	e7f4      	b.n	11da <usart_async_init+0x52>
    11f0:	00003d54 	.word	0x00003d54
    11f4:	0000126d 	.word	0x0000126d
    11f8:	00001275 	.word	0x00001275
    11fc:	00002461 	.word	0x00002461
    1200:	000010b1 	.word	0x000010b1
    1204:	0000101d 	.word	0x0000101d
    1208:	0000107d 	.word	0x0000107d
    120c:	00001001 	.word	0x00001001
    1210:	00000fd9 	.word	0x00000fd9
    1214:	00000fed 	.word	0x00000fed

00001218 <usart_async_enable>:
{
    1218:	b510      	push	{r4, lr}
	ASSERT(descr);
    121a:	4604      	mov	r4, r0
    121c:	2261      	movs	r2, #97	; 0x61
    121e:	4906      	ldr	r1, [pc, #24]	; (1238 <usart_async_enable+0x20>)
    1220:	3000      	adds	r0, #0
    1222:	bf18      	it	ne
    1224:	2001      	movne	r0, #1
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <usart_async_enable+0x24>)
    1228:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    122a:	f104 0008 	add.w	r0, r4, #8
    122e:	4b04      	ldr	r3, [pc, #16]	; (1240 <usart_async_enable+0x28>)
    1230:	4798      	blx	r3
}
    1232:	2000      	movs	r0, #0
    1234:	bd10      	pop	{r4, pc}
    1236:	bf00      	nop
    1238:	00003d54 	.word	0x00003d54
    123c:	0000126d 	.word	0x0000126d
    1240:	000024dd 	.word	0x000024dd

00001244 <usart_async_get_io_descriptor>:
{
    1244:	b538      	push	{r3, r4, r5, lr}
    1246:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1248:	4605      	mov	r5, r0
    124a:	b148      	cbz	r0, 1260 <usart_async_get_io_descriptor+0x1c>
    124c:	1c08      	adds	r0, r1, #0
    124e:	bf18      	it	ne
    1250:	2001      	movne	r0, #1
    1252:	2277      	movs	r2, #119	; 0x77
    1254:	4903      	ldr	r1, [pc, #12]	; (1264 <usart_async_get_io_descriptor+0x20>)
    1256:	4b04      	ldr	r3, [pc, #16]	; (1268 <usart_async_get_io_descriptor+0x24>)
    1258:	4798      	blx	r3
	*io = &descr->io;
    125a:	6025      	str	r5, [r4, #0]
}
    125c:	2000      	movs	r0, #0
    125e:	bd38      	pop	{r3, r4, r5, pc}
    1260:	2000      	movs	r0, #0
    1262:	e7f6      	b.n	1252 <usart_async_get_io_descriptor+0xe>
    1264:	00003d54 	.word	0x00003d54
    1268:	0000126d 	.word	0x0000126d

0000126c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    126c:	b900      	cbnz	r0, 1270 <assert+0x4>
		__asm("BKPT #0");
    126e:	be00      	bkpt	0x0000
    1270:	4770      	bx	lr
	...

00001274 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	460e      	mov	r6, r1
    1278:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    127a:	4604      	mov	r4, r0
    127c:	b178      	cbz	r0, 129e <ringbuffer_init+0x2a>
    127e:	b181      	cbz	r1, 12a2 <ringbuffer_init+0x2e>
    1280:	b1a2      	cbz	r2, 12ac <ringbuffer_init+0x38>
    1282:	2001      	movs	r0, #1
    1284:	2228      	movs	r2, #40	; 0x28
    1286:	490d      	ldr	r1, [pc, #52]	; (12bc <ringbuffer_init+0x48>)
    1288:	4b0d      	ldr	r3, [pc, #52]	; (12c0 <ringbuffer_init+0x4c>)
    128a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    128c:	1e6b      	subs	r3, r5, #1
    128e:	421d      	tst	r5, r3
    1290:	d109      	bne.n	12a6 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1292:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1294:	2000      	movs	r0, #0
    1296:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1298:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    129a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    129c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    129e:	2000      	movs	r0, #0
    12a0:	e7f0      	b.n	1284 <ringbuffer_init+0x10>
    12a2:	2000      	movs	r0, #0
    12a4:	e7ee      	b.n	1284 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    12a6:	f06f 000c 	mvn.w	r0, #12
    12aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    12ac:	2228      	movs	r2, #40	; 0x28
    12ae:	4903      	ldr	r1, [pc, #12]	; (12bc <ringbuffer_init+0x48>)
    12b0:	2000      	movs	r0, #0
    12b2:	4b03      	ldr	r3, [pc, #12]	; (12c0 <ringbuffer_init+0x4c>)
    12b4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    12b6:	1e6b      	subs	r3, r5, #1
    12b8:	e7eb      	b.n	1292 <ringbuffer_init+0x1e>
    12ba:	bf00      	nop
    12bc:	00003d74 	.word	0x00003d74
    12c0:	0000126d 	.word	0x0000126d

000012c4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    12c4:	b538      	push	{r3, r4, r5, lr}
    12c6:	460d      	mov	r5, r1
	ASSERT(rb && data);
    12c8:	4604      	mov	r4, r0
    12ca:	b1a0      	cbz	r0, 12f6 <ringbuffer_get+0x32>
    12cc:	1c08      	adds	r0, r1, #0
    12ce:	bf18      	it	ne
    12d0:	2001      	movne	r0, #1
    12d2:	2240      	movs	r2, #64	; 0x40
    12d4:	490a      	ldr	r1, [pc, #40]	; (1300 <ringbuffer_get+0x3c>)
    12d6:	4b0b      	ldr	r3, [pc, #44]	; (1304 <ringbuffer_get+0x40>)
    12d8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    12da:	68a3      	ldr	r3, [r4, #8]
    12dc:	68e2      	ldr	r2, [r4, #12]
    12de:	429a      	cmp	r2, r3
    12e0:	d00b      	beq.n	12fa <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    12e2:	6862      	ldr	r2, [r4, #4]
    12e4:	4013      	ands	r3, r2
    12e6:	6822      	ldr	r2, [r4, #0]
    12e8:	5cd3      	ldrb	r3, [r2, r3]
    12ea:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    12ec:	68a3      	ldr	r3, [r4, #8]
    12ee:	3301      	adds	r3, #1
    12f0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    12f2:	2000      	movs	r0, #0
    12f4:	bd38      	pop	{r3, r4, r5, pc}
    12f6:	2000      	movs	r0, #0
    12f8:	e7eb      	b.n	12d2 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    12fa:	f06f 0009 	mvn.w	r0, #9
}
    12fe:	bd38      	pop	{r3, r4, r5, pc}
    1300:	00003d74 	.word	0x00003d74
    1304:	0000126d 	.word	0x0000126d

00001308 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1308:	b538      	push	{r3, r4, r5, lr}
    130a:	460d      	mov	r5, r1
	ASSERT(rb);
    130c:	4604      	mov	r4, r0
    130e:	2251      	movs	r2, #81	; 0x51
    1310:	490b      	ldr	r1, [pc, #44]	; (1340 <ringbuffer_put+0x38>)
    1312:	3000      	adds	r0, #0
    1314:	bf18      	it	ne
    1316:	2001      	movne	r0, #1
    1318:	4b0a      	ldr	r3, [pc, #40]	; (1344 <ringbuffer_put+0x3c>)
    131a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    131c:	68e3      	ldr	r3, [r4, #12]
    131e:	6862      	ldr	r2, [r4, #4]
    1320:	4013      	ands	r3, r2
    1322:	6822      	ldr	r2, [r4, #0]
    1324:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1326:	68e3      	ldr	r3, [r4, #12]
    1328:	6861      	ldr	r1, [r4, #4]
    132a:	68a2      	ldr	r2, [r4, #8]
    132c:	1a9a      	subs	r2, r3, r2
    132e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1330:	bf84      	itt	hi
    1332:	1a59      	subhi	r1, r3, r1
    1334:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1336:	3301      	adds	r3, #1
    1338:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    133a:	2000      	movs	r0, #0
    133c:	bd38      	pop	{r3, r4, r5, pc}
    133e:	bf00      	nop
    1340:	00003d74 	.word	0x00003d74
    1344:	0000126d 	.word	0x0000126d

00001348 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1348:	b510      	push	{r4, lr}
	ASSERT(rb);
    134a:	4604      	mov	r4, r0
    134c:	2267      	movs	r2, #103	; 0x67
    134e:	4905      	ldr	r1, [pc, #20]	; (1364 <ringbuffer_num+0x1c>)
    1350:	3000      	adds	r0, #0
    1352:	bf18      	it	ne
    1354:	2001      	movne	r0, #1
    1356:	4b04      	ldr	r3, [pc, #16]	; (1368 <ringbuffer_num+0x20>)
    1358:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    135a:	68e0      	ldr	r0, [r4, #12]
    135c:	68a3      	ldr	r3, [r4, #8]
}
    135e:	1ac0      	subs	r0, r0, r3
    1360:	bd10      	pop	{r4, pc}
    1362:	bf00      	nop
    1364:	00003d74 	.word	0x00003d74
    1368:	0000126d 	.word	0x0000126d

0000136c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    136c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    136e:	4a06      	ldr	r2, [pc, #24]	; (1388 <_sbrk+0x1c>)
    1370:	6812      	ldr	r2, [r2, #0]
    1372:	b122      	cbz	r2, 137e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1374:	4a04      	ldr	r2, [pc, #16]	; (1388 <_sbrk+0x1c>)
    1376:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1378:	4403      	add	r3, r0
    137a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    137c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    137e:	4903      	ldr	r1, [pc, #12]	; (138c <_sbrk+0x20>)
    1380:	4a01      	ldr	r2, [pc, #4]	; (1388 <_sbrk+0x1c>)
    1382:	6011      	str	r1, [r2, #0]
    1384:	e7f6      	b.n	1374 <_sbrk+0x8>
    1386:	bf00      	nop
    1388:	200003c8 	.word	0x200003c8
    138c:	20010f88 	.word	0x20010f88

00001390 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1390:	6940      	ldr	r0, [r0, #20]
    1392:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1396:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    139a:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    139c:	0040      	lsls	r0, r0, #1
    139e:	3076      	adds	r0, #118	; 0x76
}
    13a0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    13a4:	4770      	bx	lr
	...

000013a8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    13a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    13aa:	f013 0f01 	tst.w	r3, #1
    13ae:	d11b      	bne.n	13e8 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13b2:	f013 0f03 	tst.w	r3, #3
    13b6:	d1fb      	bne.n	13b0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    13b8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    13ba:	f013 0f02 	tst.w	r3, #2
    13be:	d00d      	beq.n	13dc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    13c0:	8803      	ldrh	r3, [r0, #0]
    13c2:	f023 0302 	bic.w	r3, r3, #2
    13c6:	041b      	lsls	r3, r3, #16
    13c8:	0c1b      	lsrs	r3, r3, #16
    13ca:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ce:	f013 0f03 	tst.w	r3, #3
    13d2:	d1fb      	bne.n	13cc <_adc_init+0x24>
    13d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13d6:	f013 0f02 	tst.w	r3, #2
    13da:	d1fb      	bne.n	13d4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    13dc:	2301      	movs	r3, #1
    13de:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13e2:	f013 0f03 	tst.w	r3, #3
    13e6:	d1fb      	bne.n	13e0 <_adc_init+0x38>
    13e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ea:	f013 0f01 	tst.w	r3, #1
    13ee:	d1fb      	bne.n	13e8 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    13f0:	2316      	movs	r3, #22
    13f2:	4a37      	ldr	r2, [pc, #220]	; (14d0 <_adc_init+0x128>)
    13f4:	fb03 2301 	mla	r3, r3, r1, r2
    13f8:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    13fa:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1402:	2b00      	cmp	r3, #0
    1404:	d1fa      	bne.n	13fc <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1406:	2316      	movs	r3, #22
    1408:	4a31      	ldr	r2, [pc, #196]	; (14d0 <_adc_init+0x128>)
    140a:	fb03 2301 	mla	r3, r3, r1, r2
    140e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1410:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1412:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1414:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1418:	2b00      	cmp	r3, #0
    141a:	d1fa      	bne.n	1412 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    141c:	2316      	movs	r3, #22
    141e:	4a2c      	ldr	r2, [pc, #176]	; (14d0 <_adc_init+0x128>)
    1420:	fb03 2301 	mla	r3, r3, r1, r2
    1424:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1426:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1428:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    142a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    142c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    142e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1432:	2b00      	cmp	r3, #0
    1434:	d1fa      	bne.n	142c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1436:	2316      	movs	r3, #22
    1438:	4a25      	ldr	r2, [pc, #148]	; (14d0 <_adc_init+0x128>)
    143a:	fb03 2301 	mla	r3, r3, r1, r2
    143e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1440:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1442:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1444:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1448:	2b00      	cmp	r3, #0
    144a:	d1fa      	bne.n	1442 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    144c:	2316      	movs	r3, #22
    144e:	4a20      	ldr	r2, [pc, #128]	; (14d0 <_adc_init+0x128>)
    1450:	fb03 2301 	mla	r3, r3, r1, r2
    1454:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1456:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1458:	6b03      	ldr	r3, [r0, #48]	; 0x30
    145a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    145e:	2b00      	cmp	r3, #0
    1460:	d1fa      	bne.n	1458 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1462:	2316      	movs	r3, #22
    1464:	4a1a      	ldr	r2, [pc, #104]	; (14d0 <_adc_init+0x128>)
    1466:	fb03 2301 	mla	r3, r3, r1, r2
    146a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    146c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    146e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1470:	f013 0f80 	tst.w	r3, #128	; 0x80
    1474:	d1fb      	bne.n	146e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1476:	2316      	movs	r3, #22
    1478:	4a15      	ldr	r2, [pc, #84]	; (14d0 <_adc_init+0x128>)
    147a:	fb03 2301 	mla	r3, r3, r1, r2
    147e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1480:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1482:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1484:	f413 7f80 	tst.w	r3, #256	; 0x100
    1488:	d1fb      	bne.n	1482 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    148a:	2316      	movs	r3, #22
    148c:	4a10      	ldr	r2, [pc, #64]	; (14d0 <_adc_init+0x128>)
    148e:	fb03 2301 	mla	r3, r3, r1, r2
    1492:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1494:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1496:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1498:	f413 7f00 	tst.w	r3, #512	; 0x200
    149c:	d1fb      	bne.n	1496 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    149e:	2316      	movs	r3, #22
    14a0:	4a0b      	ldr	r2, [pc, #44]	; (14d0 <_adc_init+0x128>)
    14a2:	fb03 2301 	mla	r3, r3, r1, r2
    14a6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    14a8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
    14b0:	d1fb      	bne.n	14aa <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    14b2:	2216      	movs	r2, #22
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <_adc_init+0x128>)
    14b6:	fb02 3101 	mla	r1, r2, r1, r3
    14ba:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    14bc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    14be:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    14c0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    14c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    14c4:	f013 0f03 	tst.w	r3, #3
    14c8:	d1fb      	bne.n	14c2 <_adc_init+0x11a>

	return ERR_NONE;
}
    14ca:	2000      	movs	r0, #0
    14cc:	4770      	bx	lr
    14ce:	bf00      	nop
    14d0:	00003d98 	.word	0x00003d98

000014d4 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    14d4:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    14d6:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    14d8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    14dc:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    14e0:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    14e2:	f013 0f01 	tst.w	r3, #1
    14e6:	d106      	bne.n	14f6 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    14e8:	f013 0f02 	tst.w	r3, #2
    14ec:	d10d      	bne.n	150a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    14ee:	f013 0f04 	tst.w	r3, #4
    14f2:	d111      	bne.n	1518 <_adc_interrupt_handler+0x44>
    14f4:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    14f6:	2301      	movs	r3, #1
    14f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    14fc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    1500:	6883      	ldr	r3, [r0, #8]
    1502:	b292      	uxth	r2, r2
    1504:	2100      	movs	r1, #0
    1506:	4798      	blx	r3
    1508:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    150a:	2302      	movs	r3, #2
    150c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    1510:	6843      	ldr	r3, [r0, #4]
    1512:	2100      	movs	r1, #0
    1514:	4798      	blx	r3
    1516:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1518:	2304      	movs	r3, #4
    151a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    151e:	6803      	ldr	r3, [r0, #0]
    1520:	2100      	movs	r1, #0
    1522:	4798      	blx	r3
	}
}
    1524:	e7e6      	b.n	14f4 <_adc_interrupt_handler+0x20>
	...

00001528 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1528:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    152c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1530:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1534:	b148      	cbz	r0, 154a <_adc_get_regs+0x22>
    1536:	2801      	cmp	r0, #1
    1538:	d009      	beq.n	154e <_adc_get_regs+0x26>
{
    153a:	b508      	push	{r3, lr}
	ASSERT(false);
    153c:	228c      	movs	r2, #140	; 0x8c
    153e:	4905      	ldr	r1, [pc, #20]	; (1554 <_adc_get_regs+0x2c>)
    1540:	2000      	movs	r0, #0
    1542:	4b05      	ldr	r3, [pc, #20]	; (1558 <_adc_get_regs+0x30>)
    1544:	4798      	blx	r3
	return 0;
    1546:	2000      	movs	r0, #0
    1548:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    154a:	2000      	movs	r0, #0
    154c:	4770      	bx	lr
    154e:	2001      	movs	r0, #1
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	00003dc4 	.word	0x00003dc4
    1558:	0000126d 	.word	0x0000126d

0000155c <_adc_async_init>:
{
    155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1560:	460c      	mov	r4, r1
	ASSERT(device);
    1562:	4605      	mov	r5, r0
    1564:	22e6      	movs	r2, #230	; 0xe6
    1566:	493b      	ldr	r1, [pc, #236]	; (1654 <_adc_async_init+0xf8>)
    1568:	3000      	adds	r0, #0
    156a:	bf18      	it	ne
    156c:	2001      	movne	r0, #1
    156e:	4b3a      	ldr	r3, [pc, #232]	; (1658 <_adc_async_init+0xfc>)
    1570:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1572:	4620      	mov	r0, r4
    1574:	4b39      	ldr	r3, [pc, #228]	; (165c <_adc_async_init+0x100>)
    1576:	4798      	blx	r3
    1578:	4601      	mov	r1, r0
    157a:	4620      	mov	r0, r4
    157c:	4b38      	ldr	r3, [pc, #224]	; (1660 <_adc_async_init+0x104>)
    157e:	4798      	blx	r3
	if (init_status) {
    1580:	4606      	mov	r6, r0
    1582:	b110      	cbz	r0, 158a <_adc_async_init+0x2e>
}
    1584:	4630      	mov	r0, r6
    1586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    158a:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    158c:	4b35      	ldr	r3, [pc, #212]	; (1664 <_adc_async_init+0x108>)
    158e:	429c      	cmp	r4, r3
    1590:	d05c      	beq.n	164c <_adc_async_init+0xf0>
	if (hw == ADC1) {
    1592:	4b35      	ldr	r3, [pc, #212]	; (1668 <_adc_async_init+0x10c>)
    1594:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    1596:	bf04      	itt	eq
    1598:	4b34      	ldreq	r3, [pc, #208]	; (166c <_adc_async_init+0x110>)
    159a:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    159c:	4628      	mov	r0, r5
    159e:	4f34      	ldr	r7, [pc, #208]	; (1670 <_adc_async_init+0x114>)
    15a0:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15a2:	0943      	lsrs	r3, r0, #5
    15a4:	f000 001f 	and.w	r0, r0, #31
    15a8:	2401      	movs	r4, #1
    15aa:	fa04 f000 	lsl.w	r0, r4, r0
    15ae:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1674 <_adc_async_init+0x118>
    15b2:	3320      	adds	r3, #32
    15b4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    15b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15bc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    15c0:	4628      	mov	r0, r5
    15c2:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15c4:	0943      	lsrs	r3, r0, #5
    15c6:	f000 001f 	and.w	r0, r0, #31
    15ca:	fa04 f000 	lsl.w	r0, r4, r0
    15ce:	3360      	adds	r3, #96	; 0x60
    15d0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    15d4:	4628      	mov	r0, r5
    15d6:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d8:	0943      	lsrs	r3, r0, #5
    15da:	f000 001f 	and.w	r0, r0, #31
    15de:	4084      	lsls	r4, r0
    15e0:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    15e4:	4628      	mov	r0, r5
    15e6:	47b8      	blx	r7
    15e8:	3001      	adds	r0, #1
    15ea:	b280      	uxth	r0, r0
    15ec:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    15ee:	2b00      	cmp	r3, #0
    15f0:	dbc8      	blt.n	1584 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15f2:	095b      	lsrs	r3, r3, #5
    15f4:	f000 001f 	and.w	r0, r0, #31
    15f8:	2201      	movs	r2, #1
    15fa:	fa02 f000 	lsl.w	r0, r2, r0
    15fe:	3320      	adds	r3, #32
    1600:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1604:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1608:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    160c:	4628      	mov	r0, r5
    160e:	47b8      	blx	r7
    1610:	3001      	adds	r0, #1
    1612:	b280      	uxth	r0, r0
    1614:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1616:	2b00      	cmp	r3, #0
    1618:	dbb4      	blt.n	1584 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    161a:	095b      	lsrs	r3, r3, #5
    161c:	f000 001f 	and.w	r0, r0, #31
    1620:	2201      	movs	r2, #1
    1622:	fa02 f000 	lsl.w	r0, r2, r0
    1626:	3360      	adds	r3, #96	; 0x60
    1628:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    162c:	4628      	mov	r0, r5
    162e:	47b8      	blx	r7
    1630:	3001      	adds	r0, #1
    1632:	b280      	uxth	r0, r0
    1634:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1636:	2b00      	cmp	r3, #0
    1638:	dba4      	blt.n	1584 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    163a:	095b      	lsrs	r3, r3, #5
    163c:	f000 001f 	and.w	r0, r0, #31
    1640:	2201      	movs	r2, #1
    1642:	fa02 f000 	lsl.w	r0, r2, r0
    1646:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    164a:	e79b      	b.n	1584 <_adc_async_init+0x28>
		_adc0_dev = dev;
    164c:	4b07      	ldr	r3, [pc, #28]	; (166c <_adc_async_init+0x110>)
    164e:	601d      	str	r5, [r3, #0]
    1650:	e7a4      	b.n	159c <_adc_async_init+0x40>
    1652:	bf00      	nop
    1654:	00003dc4 	.word	0x00003dc4
    1658:	0000126d 	.word	0x0000126d
    165c:	00001529 	.word	0x00001529
    1660:	000013a9 	.word	0x000013a9
    1664:	43001c00 	.word	0x43001c00
    1668:	43002000 	.word	0x43002000
    166c:	200003cc 	.word	0x200003cc
    1670:	00001391 	.word	0x00001391
    1674:	e000e100 	.word	0xe000e100

00001678 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1678:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    167a:	8813      	ldrh	r3, [r2, #0]
    167c:	b29b      	uxth	r3, r3
    167e:	f043 0302 	orr.w	r3, r3, #2
    1682:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1684:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1686:	f013 0f03 	tst.w	r3, #3
    168a:	d1fb      	bne.n	1684 <_adc_async_enable_channel+0xc>
}
    168c:	4770      	bx	lr

0000168e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    168e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1690:	88db      	ldrh	r3, [r3, #6]
    1692:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1696:	2b03      	cmp	r3, #3
}
    1698:	bf0c      	ite	eq
    169a:	2001      	moveq	r0, #1
    169c:	2002      	movne	r0, #2
    169e:	4770      	bx	lr

000016a0 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    16a0:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    16a2:	7d13      	ldrb	r3, [r2, #20]
    16a4:	f043 0302 	orr.w	r3, r3, #2
    16a8:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    16ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
    16b0:	2b00      	cmp	r3, #0
    16b2:	d1fa      	bne.n	16aa <_adc_async_convert+0xa>
}
    16b4:	4770      	bx	lr

000016b6 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    16b6:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    16b8:	2a01      	cmp	r2, #1
    16ba:	d007      	beq.n	16cc <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    16bc:	2a02      	cmp	r2, #2
    16be:	d00e      	beq.n	16de <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    16c0:	b91a      	cbnz	r2, 16ca <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    16c2:	b1ab      	cbz	r3, 16f0 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    16c4:	2301      	movs	r3, #1
    16c6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    16ca:	4770      	bx	lr
	if (value == 0x0) {
    16cc:	b91b      	cbnz	r3, 16d6 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    16ce:	2304      	movs	r3, #4
    16d0:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    16d4:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    16d6:	2304      	movs	r3, #4
    16d8:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    16dc:	4770      	bx	lr
	if (value == 0x0) {
    16de:	b91b      	cbnz	r3, 16e8 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    16e0:	2302      	movs	r3, #2
    16e2:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    16e6:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    16e8:	2302      	movs	r3, #2
    16ea:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    16ee:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    16f0:	2301      	movs	r3, #1
    16f2:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    16f6:	4770      	bx	lr

000016f8 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    16f8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    16fa:	4b02      	ldr	r3, [pc, #8]	; (1704 <ADC0_0_Handler+0xc>)
    16fc:	6818      	ldr	r0, [r3, #0]
    16fe:	4b02      	ldr	r3, [pc, #8]	; (1708 <ADC0_0_Handler+0x10>)
    1700:	4798      	blx	r3
    1702:	bd08      	pop	{r3, pc}
    1704:	200003cc 	.word	0x200003cc
    1708:	000014d5 	.word	0x000014d5

0000170c <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    170c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    170e:	4b02      	ldr	r3, [pc, #8]	; (1718 <ADC0_1_Handler+0xc>)
    1710:	6818      	ldr	r0, [r3, #0]
    1712:	4b02      	ldr	r3, [pc, #8]	; (171c <ADC0_1_Handler+0x10>)
    1714:	4798      	blx	r3
    1716:	bd08      	pop	{r3, pc}
    1718:	200003cc 	.word	0x200003cc
    171c:	000014d5 	.word	0x000014d5

00001720 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    1720:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1722:	4b02      	ldr	r3, [pc, #8]	; (172c <ADC1_0_Handler+0xc>)
    1724:	6858      	ldr	r0, [r3, #4]
    1726:	4b02      	ldr	r3, [pc, #8]	; (1730 <ADC1_0_Handler+0x10>)
    1728:	4798      	blx	r3
    172a:	bd08      	pop	{r3, pc}
    172c:	200003cc 	.word	0x200003cc
    1730:	000014d5 	.word	0x000014d5

00001734 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    1734:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1736:	4b02      	ldr	r3, [pc, #8]	; (1740 <ADC1_1_Handler+0xc>)
    1738:	6858      	ldr	r0, [r3, #4]
    173a:	4b02      	ldr	r3, [pc, #8]	; (1744 <ADC1_1_Handler+0x10>)
    173c:	4798      	blx	r3
    173e:	bd08      	pop	{r3, pc}
    1740:	200003cc 	.word	0x200003cc
    1744:	000014d5 	.word	0x000014d5

00001748 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1748:	f64b 3380 	movw	r3, #48000	; 0xbb80
    174c:	fb03 f000 	mul.w	r0, r3, r0
    1750:	4770      	bx	lr
	...

00001754 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1754:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1756:	4a0d      	ldr	r2, [pc, #52]	; (178c <_init_chip+0x38>)
    1758:	8813      	ldrh	r3, [r2, #0]
    175a:	b29b      	uxth	r3, r3
    175c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    175e:	4b0c      	ldr	r3, [pc, #48]	; (1790 <_init_chip+0x3c>)
    1760:	4798      	blx	r3
	_oscctrl_init_sources();
    1762:	4b0c      	ldr	r3, [pc, #48]	; (1794 <_init_chip+0x40>)
    1764:	4798      	blx	r3
	_mclk_init();
    1766:	4b0c      	ldr	r3, [pc, #48]	; (1798 <_init_chip+0x44>)
    1768:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    176a:	2008      	movs	r0, #8
    176c:	4c0b      	ldr	r4, [pc, #44]	; (179c <_init_chip+0x48>)
    176e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <_init_chip+0x4c>)
    1772:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1774:	f640 70f7 	movw	r0, #4087	; 0xff7
    1778:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    177a:	4a0a      	ldr	r2, [pc, #40]	; (17a4 <_init_chip+0x50>)
    177c:	6913      	ldr	r3, [r2, #16]
    177e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1782:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1784:	4b08      	ldr	r3, [pc, #32]	; (17a8 <_init_chip+0x54>)
    1786:	4798      	blx	r3
    1788:	bd10      	pop	{r4, pc}
    178a:	bf00      	nop
    178c:	41004000 	.word	0x41004000
    1790:	00001c49 	.word	0x00001c49
    1794:	00001c5d 	.word	0x00001c5d
    1798:	00001b71 	.word	0x00001b71
    179c:	00001b15 	.word	0x00001b15
    17a0:	00001c79 	.word	0x00001c79
    17a4:	40000800 	.word	0x40000800
    17a8:	00001821 	.word	0x00001821

000017ac <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    17ac:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17ae:	4a1a      	ldr	r2, [pc, #104]	; (1818 <_dmac_handler+0x6c>)
    17b0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    17b2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    17b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    17ba:	4818      	ldr	r0, [pc, #96]	; (181c <_dmac_handler+0x70>)
    17bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    17c0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    17c4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    17c8:	f012 0f01 	tst.w	r2, #1
    17cc:	d10a      	bne.n	17e4 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    17ce:	011a      	lsls	r2, r3, #4
    17d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17d4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17d8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    17dc:	f012 0f02 	tst.w	r2, #2
    17e0:	d10b      	bne.n	17fa <_dmac_handler+0x4e>
    17e2:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    17e4:	011a      	lsls	r2, r3, #4
    17e6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17ea:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17ee:	2101      	movs	r1, #1
    17f0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    17f4:	6843      	ldr	r3, [r0, #4]
    17f6:	4798      	blx	r3
    17f8:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    17fa:	011a      	lsls	r2, r3, #4
    17fc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1800:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1804:	2102      	movs	r1, #2
    1806:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    180a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    180e:	4a03      	ldr	r2, [pc, #12]	; (181c <_dmac_handler+0x70>)
    1810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1814:	4798      	blx	r3
	}
}
    1816:	e7e4      	b.n	17e2 <_dmac_handler+0x36>
    1818:	4100a000 	.word	0x4100a000
    181c:	200003d4 	.word	0x200003d4

00001820 <_dma_init>:
{
    1820:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1822:	4a31      	ldr	r2, [pc, #196]	; (18e8 <_dma_init+0xc8>)
    1824:	8813      	ldrh	r3, [r2, #0]
    1826:	f023 0302 	bic.w	r3, r3, #2
    182a:	041b      	lsls	r3, r3, #16
    182c:	0c1b      	lsrs	r3, r3, #16
    182e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1830:	8853      	ldrh	r3, [r2, #2]
    1832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1836:	041b      	lsls	r3, r3, #16
    1838:	0c1b      	lsrs	r3, r3, #16
    183a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    183c:	8813      	ldrh	r3, [r2, #0]
    183e:	b29b      	uxth	r3, r3
    1840:	f043 0301 	orr.w	r3, r3, #1
    1844:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1846:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1848:	f013 0f01 	tst.w	r3, #1
    184c:	d1fb      	bne.n	1846 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    184e:	4b26      	ldr	r3, [pc, #152]	; (18e8 <_dma_init+0xc8>)
    1850:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1854:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1856:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    185c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    185e:	2100      	movs	r1, #0
    1860:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1862:	4a22      	ldr	r2, [pc, #136]	; (18ec <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1864:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1866:	4a22      	ldr	r2, [pc, #136]	; (18f0 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1868:	639a      	str	r2, [r3, #56]	; 0x38
    186a:	4b22      	ldr	r3, [pc, #136]	; (18f4 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    186c:	4c1f      	ldr	r4, [pc, #124]	; (18ec <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    186e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1870:	681d      	ldr	r5, [r3, #0]
    1872:	0108      	lsls	r0, r1, #4
    1874:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    1878:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    187c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    187e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1880:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1884:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1886:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    188a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    188c:	1822      	adds	r2, r4, r0
    188e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1890:	60d6      	str	r6, [r2, #12]
    1892:	3101      	adds	r1, #1
    1894:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1896:	2920      	cmp	r1, #32
    1898:	d1ea      	bne.n	1870 <_dma_init+0x50>
    189a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189c:	2001      	movs	r0, #1
    189e:	4916      	ldr	r1, [pc, #88]	; (18f8 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    18a0:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    18a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18a6:	d00b      	beq.n	18c0 <_dma_init+0xa0>
    18a8:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    18aa:	2b24      	cmp	r3, #36	; 0x24
    18ac:	d1f8      	bne.n	18a0 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    18ae:	4a0e      	ldr	r2, [pc, #56]	; (18e8 <_dma_init+0xc8>)
    18b0:	8813      	ldrh	r3, [r2, #0]
    18b2:	b29b      	uxth	r3, r3
    18b4:	f043 0302 	orr.w	r3, r3, #2
    18b8:	8013      	strh	r3, [r2, #0]
}
    18ba:	2000      	movs	r0, #0
    18bc:	bc70      	pop	{r4, r5, r6}
    18be:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18c0:	095c      	lsrs	r4, r3, #5
    18c2:	f002 021f 	and.w	r2, r2, #31
    18c6:	fa00 f202 	lsl.w	r2, r0, r2
    18ca:	f104 0520 	add.w	r5, r4, #32
    18ce:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    18d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18d6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18da:	f104 0560 	add.w	r5, r4, #96	; 0x60
    18de:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18e2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    18e6:	e7df      	b.n	18a8 <_dma_init+0x88>
    18e8:	4100a000 	.word	0x4100a000
    18ec:	20000b00 	.word	0x20000b00
    18f0:	20000d00 	.word	0x20000d00
    18f4:	00003ddc 	.word	0x00003ddc
    18f8:	e000e100 	.word	0xe000e100

000018fc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    18fc:	b991      	cbnz	r1, 1924 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    18fe:	b942      	cbnz	r2, 1912 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    1900:	0100      	lsls	r0, r0, #4
    1902:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1906:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    190a:	2302      	movs	r3, #2
    190c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1910:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    1912:	0100      	lsls	r0, r0, #4
    1914:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1918:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    191c:	2302      	movs	r3, #2
    191e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1922:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1924:	2901      	cmp	r1, #1
    1926:	d000      	beq.n	192a <_dma_set_irq_state+0x2e>
    1928:	4770      	bx	lr
	if (value == 0x0) {
    192a:	b142      	cbz	r2, 193e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    192c:	0100      	lsls	r0, r0, #4
    192e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1932:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1936:	2301      	movs	r3, #1
    1938:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    193c:	e7f4      	b.n	1928 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    193e:	0100      	lsls	r0, r0, #4
    1940:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1944:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1948:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    194c:	4770      	bx	lr
	...

00001950 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <_dma_set_destination_address+0xc>)
    1952:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1956:	6081      	str	r1, [r0, #8]
}
    1958:	2000      	movs	r0, #0
    195a:	4770      	bx	lr
    195c:	20000b00 	.word	0x20000b00

00001960 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1960:	4b02      	ldr	r3, [pc, #8]	; (196c <_dma_set_source_address+0xc>)
    1962:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1966:	6041      	str	r1, [r0, #4]
}
    1968:	2000      	movs	r0, #0
    196a:	4770      	bx	lr
    196c:	20000b00 	.word	0x20000b00

00001970 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1970:	4a05      	ldr	r2, [pc, #20]	; (1988 <_dma_srcinc_enable+0x18>)
    1972:	0100      	lsls	r0, r0, #4
    1974:	5a13      	ldrh	r3, [r2, r0]
    1976:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    1978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    197c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    1980:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1982:	5211      	strh	r1, [r2, r0]
}
    1984:	2000      	movs	r0, #0
    1986:	4770      	bx	lr
    1988:	20000b00 	.word	0x20000b00

0000198c <_dma_set_data_amount>:
{
    198c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    198e:	4c14      	ldr	r4, [pc, #80]	; (19e0 <_dma_set_data_amount+0x54>)
    1990:	0102      	lsls	r2, r0, #4
    1992:	18a3      	adds	r3, r4, r2
    1994:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1996:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1998:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    199c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    199e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    19a2:	d006      	beq.n	19b2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    19a4:	fa01 f403 	lsl.w	r4, r1, r3
    19a8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    19aa:	4a0d      	ldr	r2, [pc, #52]	; (19e0 <_dma_set_data_amount+0x54>)
    19ac:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    19b0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    19b2:	4c0b      	ldr	r4, [pc, #44]	; (19e0 <_dma_set_data_amount+0x54>)
    19b4:	0102      	lsls	r2, r0, #4
    19b6:	18a5      	adds	r5, r4, r2
    19b8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    19ba:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    19bc:	f412 6f80 	tst.w	r2, #1024	; 0x400
    19c0:	d005      	beq.n	19ce <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    19c2:	fa01 f303 	lsl.w	r3, r1, r3
    19c6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    19c8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    19cc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    19ce:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    19d0:	4b03      	ldr	r3, [pc, #12]	; (19e0 <_dma_set_data_amount+0x54>)
    19d2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    19d6:	8041      	strh	r1, [r0, #2]
}
    19d8:	2000      	movs	r0, #0
    19da:	bc30      	pop	{r4, r5}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	20000b00 	.word	0x20000b00

000019e4 <_dma_enable_transaction>:
{
    19e4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    19e6:	4c0d      	ldr	r4, [pc, #52]	; (1a1c <_dma_enable_transaction+0x38>)
    19e8:	0103      	lsls	r3, r0, #4
    19ea:	5ae2      	ldrh	r2, [r4, r3]
    19ec:	b292      	uxth	r2, r2
    19ee:	f042 0201 	orr.w	r2, r2, #1
    19f2:	52e2      	strh	r2, [r4, r3]
    19f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    19f8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    19fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    19fe:	f042 0202 	orr.w	r2, r2, #2
    1a02:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    1a04:	b131      	cbz	r1, 1a14 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1a06:	4a06      	ldr	r2, [pc, #24]	; (1a20 <_dma_enable_transaction+0x3c>)
    1a08:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1a0a:	2301      	movs	r3, #1
    1a0c:	fa03 f000 	lsl.w	r0, r3, r0
    1a10:	4308      	orrs	r0, r1
    1a12:	6110      	str	r0, [r2, #16]
}
    1a14:	2000      	movs	r0, #0
    1a16:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a1a:	4770      	bx	lr
    1a1c:	20000b00 	.word	0x20000b00
    1a20:	4100a000 	.word	0x4100a000

00001a24 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1a24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1a28:	4b02      	ldr	r3, [pc, #8]	; (1a34 <_dma_get_channel_resource+0x10>)
    1a2a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1a2e:	6001      	str	r1, [r0, #0]
}
    1a30:	2000      	movs	r0, #0
    1a32:	4770      	bx	lr
    1a34:	200003d4 	.word	0x200003d4

00001a38 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1a38:	b508      	push	{r3, lr}
	_dmac_handler();
    1a3a:	4b01      	ldr	r3, [pc, #4]	; (1a40 <DMAC_0_Handler+0x8>)
    1a3c:	4798      	blx	r3
    1a3e:	bd08      	pop	{r3, pc}
    1a40:	000017ad 	.word	0x000017ad

00001a44 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1a44:	b508      	push	{r3, lr}
	_dmac_handler();
    1a46:	4b01      	ldr	r3, [pc, #4]	; (1a4c <DMAC_1_Handler+0x8>)
    1a48:	4798      	blx	r3
    1a4a:	bd08      	pop	{r3, pc}
    1a4c:	000017ad 	.word	0x000017ad

00001a50 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1a50:	b508      	push	{r3, lr}
	_dmac_handler();
    1a52:	4b01      	ldr	r3, [pc, #4]	; (1a58 <DMAC_2_Handler+0x8>)
    1a54:	4798      	blx	r3
    1a56:	bd08      	pop	{r3, pc}
    1a58:	000017ad 	.word	0x000017ad

00001a5c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1a5c:	b508      	push	{r3, lr}
	_dmac_handler();
    1a5e:	4b01      	ldr	r3, [pc, #4]	; (1a64 <DMAC_3_Handler+0x8>)
    1a60:	4798      	blx	r3
    1a62:	bd08      	pop	{r3, pc}
    1a64:	000017ad 	.word	0x000017ad

00001a68 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1a68:	b508      	push	{r3, lr}
	_dmac_handler();
    1a6a:	4b01      	ldr	r3, [pc, #4]	; (1a70 <DMAC_4_Handler+0x8>)
    1a6c:	4798      	blx	r3
    1a6e:	bd08      	pop	{r3, pc}
    1a70:	000017ad 	.word	0x000017ad

00001a74 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    1a74:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    1a76:	2000      	movs	r0, #0
    1a78:	4770      	bx	lr

00001a7a <_crc_sync_enable>:
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
	(void)device;

	return ERR_NONE;
}
    1a7a:	2000      	movs	r0, #0
    1a7c:	4770      	bx	lr
	...

00001a80 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	b083      	sub	sp, #12
	int32_t rc = ERR_NONE;
	if (((uint32_t)data) & 0x00000003) {
    1a84:	f011 0f03 	tst.w	r1, #3
    1a88:	d138      	bne.n	1afc <_crc_sync_crc32+0x7c>
    1a8a:	461d      	mov	r5, r3
    1a8c:	4617      	mov	r7, r2
    1a8e:	460e      	mov	r6, r1
    1a90:	4604      	mov	r4, r0
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
	}

	CRITICAL_SECTION_ENTER()
    1a92:	a801      	add	r0, sp, #4
    1a94:	4b1b      	ldr	r3, [pc, #108]	; (1b04 <_crc_sync_crc32+0x84>)
    1a96:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    1a98:	6820      	ldr	r0, [r4, #0]
    1a9a:	4b1b      	ldr	r3, [pc, #108]	; (1b08 <_crc_sync_crc32+0x88>)
    1a9c:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    1a9e:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    1aa0:	605e      	str	r6, [r3, #4]
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    1aa2:	6823      	ldr	r3, [r4, #0]

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    1aa4:	6899      	ldr	r1, [r3, #8]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    1aa6:	f001 0103 	and.w	r1, r1, #3
	tmp |= DSU_LENGTH_LENGTH(data);
    1aaa:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
	((Dsu *)hw)->LENGTH.reg = tmp;
    1aae:	6099      	str	r1, [r3, #8]
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    1ab0:	6823      	ldr	r3, [r4, #0]
    1ab2:	682a      	ldr	r2, [r5, #0]
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    1ab4:	60da      	str	r2, [r3, #12]
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    1ab6:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    1ab8:	2204      	movs	r2, #4
    1aba:	701a      	strb	r2, [r3, #0]

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    1abc:	6821      	ldr	r1, [r4, #0]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    1abe:	784a      	ldrb	r2, [r1, #1]
    1ac0:	f012 0f01 	tst.w	r2, #1
    1ac4:	d0fb      	beq.n	1abe <_crc_sync_crc32+0x3e>
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    1ac6:	784b      	ldrb	r3, [r1, #1]
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    1ac8:	f013 0f04 	tst.w	r3, #4
    1acc:	d012      	beq.n	1af4 <_crc_sync_crc32+0x74>
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    1ace:	2304      	movs	r3, #4
    1ad0:	704b      	strb	r3, [r1, #1]
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    1ad2:	6823      	ldr	r3, [r4, #0]
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    1ad4:	2201      	movs	r2, #1
    1ad6:	705a      	strb	r2, [r3, #1]
		rc = ERR_IO;
    1ad8:	f06f 0505 	mvn.w	r5, #5
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    1adc:	6823      	ldr	r3, [r4, #0]
    1ade:	2201      	movs	r2, #1
    1ae0:	705a      	strb	r2, [r3, #1]

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    1ae2:	6820      	ldr	r0, [r4, #0]
    1ae4:	4b09      	ldr	r3, [pc, #36]	; (1b0c <_crc_sync_crc32+0x8c>)
    1ae6:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    1ae8:	a801      	add	r0, sp, #4
    1aea:	4b09      	ldr	r3, [pc, #36]	; (1b10 <_crc_sync_crc32+0x90>)
    1aec:	4798      	blx	r3

	return rc;
}
    1aee:	4628      	mov	r0, r5
    1af0:	b003      	add	sp, #12
    1af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((Dsu *)hw)->DATA.reg;
    1af4:	68cb      	ldr	r3, [r1, #12]
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    1af6:	602b      	str	r3, [r5, #0]
	int32_t rc = ERR_NONE;
    1af8:	2500      	movs	r5, #0
    1afa:	e7ef      	b.n	1adc <_crc_sync_crc32+0x5c>
		return ERR_INVALID_ARG;
    1afc:	f06f 050c 	mvn.w	r5, #12
    1b00:	e7f5      	b.n	1aee <_crc_sync_crc32+0x6e>
    1b02:	bf00      	nop
    1b04:	00000c25 	.word	0x00000c25
    1b08:	00001e79 	.word	0x00001e79
    1b0c:	00001e0d 	.word	0x00001e0d
    1b10:	00000c33 	.word	0x00000c33

00001b14 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b14:	f010 0f01 	tst.w	r0, #1
    1b18:	d008      	beq.n	1b2c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b1a:	4a11      	ldr	r2, [pc, #68]	; (1b60 <_gclk_init_generators_by_fref+0x4c>)
    1b1c:	4b11      	ldr	r3, [pc, #68]	; (1b64 <_gclk_init_generators_by_fref+0x50>)
    1b1e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b20:	4619      	mov	r1, r3
    1b22:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b26:	684b      	ldr	r3, [r1, #4]
    1b28:	4213      	tst	r3, r2
    1b2a:	d1fc      	bne.n	1b26 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1b2c:	f010 0f04 	tst.w	r0, #4
    1b30:	d008      	beq.n	1b44 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b32:	4a0d      	ldr	r2, [pc, #52]	; (1b68 <_gclk_init_generators_by_fref+0x54>)
    1b34:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <_gclk_init_generators_by_fref+0x50>)
    1b36:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b38:	4619      	mov	r1, r3
    1b3a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b3e:	684b      	ldr	r3, [r1, #4]
    1b40:	4213      	tst	r3, r2
    1b42:	d1fc      	bne.n	1b3e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1b44:	f010 0f08 	tst.w	r0, #8
    1b48:	d008      	beq.n	1b5c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b4a:	4a08      	ldr	r2, [pc, #32]	; (1b6c <_gclk_init_generators_by_fref+0x58>)
    1b4c:	4b05      	ldr	r3, [pc, #20]	; (1b64 <_gclk_init_generators_by_fref+0x50>)
    1b4e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b50:	4619      	mov	r1, r3
    1b52:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b56:	684b      	ldr	r3, [r1, #4]
    1b58:	4213      	tst	r3, r2
    1b5a:	d1fc      	bne.n	1b56 <_gclk_init_generators_by_fref+0x42>
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop
    1b60:	00010106 	.word	0x00010106
    1b64:	40001c00 	.word	0x40001c00
    1b68:	00011901 	.word	0x00011901
    1b6c:	00010904 	.word	0x00010904

00001b70 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1b70:	2201      	movs	r2, #1
    1b72:	4b01      	ldr	r3, [pc, #4]	; (1b78 <_mclk_init+0x8>)
    1b74:	715a      	strb	r2, [r3, #5]
    1b76:	4770      	bx	lr
    1b78:	40000800 	.word	0x40000800

00001b7c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1b7c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1b7e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1b80:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1b82:	f012 0f01 	tst.w	r2, #1
    1b86:	d005      	beq.n	1b94 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1b88:	2201      	movs	r2, #1
    1b8a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1b8c:	6803      	ldr	r3, [r0, #0]
    1b8e:	b153      	cbz	r3, 1ba6 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1b90:	4798      	blx	r3
    1b92:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1b94:	8a1a      	ldrh	r2, [r3, #16]
    1b96:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1b98:	b12a      	cbz	r2, 1ba6 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1b9a:	f240 225e 	movw	r2, #606	; 0x25e
    1b9e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1ba0:	6843      	ldr	r3, [r0, #4]
    1ba2:	b103      	cbz	r3, 1ba6 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1ba4:	4798      	blx	r3
    1ba6:	bd08      	pop	{r3, pc}

00001ba8 <_flash_init>:
{
    1ba8:	b538      	push	{r3, r4, r5, lr}
    1baa:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1bac:	4605      	mov	r5, r0
    1bae:	b350      	cbz	r0, 1c06 <_flash_init+0x5e>
    1bb0:	4816      	ldr	r0, [pc, #88]	; (1c0c <_flash_init+0x64>)
    1bb2:	4281      	cmp	r1, r0
    1bb4:	bf14      	ite	ne
    1bb6:	2000      	movne	r0, #0
    1bb8:	2001      	moveq	r0, #1
    1bba:	224b      	movs	r2, #75	; 0x4b
    1bbc:	4914      	ldr	r1, [pc, #80]	; (1c10 <_flash_init+0x68>)
    1bbe:	4b15      	ldr	r3, [pc, #84]	; (1c14 <_flash_init+0x6c>)
    1bc0:	4798      	blx	r3
	device->hw = hw;
    1bc2:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1bc4:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1bc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1bca:	049b      	lsls	r3, r3, #18
    1bcc:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1bce:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1bd0:	4b11      	ldr	r3, [pc, #68]	; (1c18 <_flash_init+0x70>)
    1bd2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd4:	4b11      	ldr	r3, [pc, #68]	; (1c1c <_flash_init+0x74>)
    1bd6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1bda:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1bde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1be2:	f3bf 8f6f 	isb	sy
    1be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bf2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1bfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bfe:	6019      	str	r1, [r3, #0]
    1c00:	601a      	str	r2, [r3, #0]
}
    1c02:	2000      	movs	r0, #0
    1c04:	bd38      	pop	{r3, r4, r5, pc}
    1c06:	2000      	movs	r0, #0
    1c08:	e7d7      	b.n	1bba <_flash_init+0x12>
    1c0a:	bf00      	nop
    1c0c:	41004000 	.word	0x41004000
    1c10:	00003edc 	.word	0x00003edc
    1c14:	0000126d 	.word	0x0000126d
    1c18:	20000554 	.word	0x20000554
    1c1c:	e000e100 	.word	0xe000e100

00001c20 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1c20:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1c22:	4b02      	ldr	r3, [pc, #8]	; (1c2c <NVMCTRL_0_Handler+0xc>)
    1c24:	6818      	ldr	r0, [r3, #0]
    1c26:	4b02      	ldr	r3, [pc, #8]	; (1c30 <NVMCTRL_0_Handler+0x10>)
    1c28:	4798      	blx	r3
    1c2a:	bd08      	pop	{r3, pc}
    1c2c:	20000554 	.word	0x20000554
    1c30:	00001b7d 	.word	0x00001b7d

00001c34 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1c34:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1c36:	4b02      	ldr	r3, [pc, #8]	; (1c40 <NVMCTRL_1_Handler+0xc>)
    1c38:	6818      	ldr	r0, [r3, #0]
    1c3a:	4b02      	ldr	r3, [pc, #8]	; (1c44 <NVMCTRL_1_Handler+0x10>)
    1c3c:	4798      	blx	r3
    1c3e:	bd08      	pop	{r3, pc}
    1c40:	20000554 	.word	0x20000554
    1c44:	00001b7d 	.word	0x00001b7d

00001c48 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c48:	4b03      	ldr	r3, [pc, #12]	; (1c58 <_osc32kctrl_init_sources+0x10>)
    1c4a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c4c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c50:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c52:	2201      	movs	r2, #1
    1c54:	741a      	strb	r2, [r3, #16]
    1c56:	4770      	bx	lr
    1c58:	40001400 	.word	0x40001400

00001c5c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1c5c:	4a04      	ldr	r2, [pc, #16]	; (1c70 <_oscctrl_init_sources+0x14>)
    1c5e:	4b05      	ldr	r3, [pc, #20]	; (1c74 <_oscctrl_init_sources+0x18>)
    1c60:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1c62:	461a      	mov	r2, r3
    1c64:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1c66:	f013 0f02 	tst.w	r3, #2
    1c6a:	d0fb      	beq.n	1c64 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	03002606 	.word	0x03002606
    1c74:	40001000 	.word	0x40001000

00001c78 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c78:	4a36      	ldr	r2, [pc, #216]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1c7a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c7c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c80:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c84:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c86:	4611      	mov	r1, r2
    1c88:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c8c:	684b      	ldr	r3, [r1, #4]
    1c8e:	4213      	tst	r3, r2
    1c90:	d1fc      	bne.n	1c8c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c92:	4a30      	ldr	r2, [pc, #192]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1c94:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c96:	f013 0f04 	tst.w	r3, #4
    1c9a:	d1fb      	bne.n	1c94 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c9c:	4b2e      	ldr	r3, [pc, #184]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1c9e:	2200      	movs	r2, #0
    1ca0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1ca2:	4a2e      	ldr	r2, [pc, #184]	; (1d5c <_oscctrl_init_referenced_generators+0xe4>)
    1ca4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ca6:	461a      	mov	r2, r3
    1ca8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1cac:	f013 0f10 	tst.w	r3, #16
    1cb0:	d1fa      	bne.n	1ca8 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cb2:	2200      	movs	r2, #0
    1cb4:	4b28      	ldr	r3, [pc, #160]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cb6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cba:	461a      	mov	r2, r3
    1cbc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cc0:	f013 0f04 	tst.w	r3, #4
    1cc4:	d1fa      	bne.n	1cbc <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1cc6:	2202      	movs	r2, #2
    1cc8:	4b23      	ldr	r3, [pc, #140]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cca:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ccc:	461a      	mov	r2, r3
    1cce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1cd2:	f013 0f02 	tst.w	r3, #2
    1cd6:	d1fa      	bne.n	1cce <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1cd8:	4b1f      	ldr	r3, [pc, #124]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1cdc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cde:	461a      	mov	r2, r3
    1ce0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1ce4:	f013 0f08 	tst.w	r3, #8
    1ce8:	d1fa      	bne.n	1ce0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cea:	2280      	movs	r2, #128	; 0x80
    1cec:	4b1a      	ldr	r3, [pc, #104]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1cee:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cf2:	461a      	mov	r2, r3
    1cf4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cf8:	f013 0f04 	tst.w	r3, #4
    1cfc:	d1fa      	bne.n	1cf4 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1cfe:	4b16      	ldr	r3, [pc, #88]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d00:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d04:	f013 0f01 	tst.w	r3, #1
    1d08:	d01d      	beq.n	1d46 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d0a:	4a13      	ldr	r2, [pc, #76]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d0c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d0e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d12:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d16:	d1f9      	bne.n	1d0c <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d18:	4a0e      	ldr	r2, [pc, #56]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d1a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d1fc      	bne.n	1d1a <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d20:	4a0c      	ldr	r2, [pc, #48]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d22:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d24:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d28:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d2c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d2e:	4611      	mov	r1, r2
    1d30:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1d34:	684b      	ldr	r3, [r1, #4]
    1d36:	4213      	tst	r3, r2
    1d38:	d1fc      	bne.n	1d34 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d3a:	4a06      	ldr	r2, [pc, #24]	; (1d54 <_oscctrl_init_referenced_generators+0xdc>)
    1d3c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d3e:	f013 0f04 	tst.w	r3, #4
    1d42:	d1fb      	bne.n	1d3c <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1d44:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d46:	4a04      	ldr	r2, [pc, #16]	; (1d58 <_oscctrl_init_referenced_generators+0xe0>)
    1d48:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d4a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d4e:	d0fb      	beq.n	1d48 <_oscctrl_init_referenced_generators+0xd0>
    1d50:	e7e2      	b.n	1d18 <_oscctrl_init_referenced_generators+0xa0>
    1d52:	bf00      	nop
    1d54:	40001c00 	.word	0x40001c00
    1d58:	40001000 	.word	0x40001000
    1d5c:	04010000 	.word	0x04010000

00001d60 <_pac_get_peripheral_id>:

static uint32_t _pac_get_peripheral_id(const void *const module)
{
	uint32_t peripheral = 10;

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    1d60:	f000 4382 	and.w	r3, r0, #1090519040	; 0x41000000
		peripheral = 13;
    1d64:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    1d68:	bf14      	ite	ne
    1d6a:	220a      	movne	r2, #10
    1d6c:	220d      	moveq	r2, #13
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    1d6e:	4b04      	ldr	r3, [pc, #16]	; (1d80 <_pac_get_peripheral_id+0x20>)
    1d70:	4003      	ands	r3, r0
    1d72:	40d3      	lsrs	r3, r2
    1d74:	f3c0 6003 	ubfx	r0, r0, #24, #4

	return peripheral;
}
    1d78:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1d7c:	4770      	bx	lr
    1d7e:	bf00      	nop
    1d80:	000fff00 	.word	0x000fff00

00001d84 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    1d84:	b538      	push	{r3, r4, r5, lr}
    1d86:	4604      	mov	r4, r0
    1d88:	460d      	mov	r5, r1
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    1d8a:	226d      	movs	r2, #109	; 0x6d
    1d8c:	491c      	ldr	r1, [pc, #112]	; (1e00 <_periph_get_lock_state+0x7c>)
    1d8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    1d92:	bf94      	ite	ls
    1d94:	2000      	movls	r0, #0
    1d96:	2001      	movhi	r0, #1
    1d98:	4b1a      	ldr	r3, [pc, #104]	; (1e04 <_periph_get_lock_state+0x80>)
    1d9a:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    1d9c:	4620      	mov	r0, r4
    1d9e:	4b1a      	ldr	r3, [pc, #104]	; (1e08 <_periph_get_lock_state+0x84>)
    1da0:	4798      	blx	r3
    1da2:	f000 001f 	and.w	r0, r0, #31

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    1da6:	f1b4 4f82 	cmp.w	r4, #1090519040	; 0x41000000
    1daa:	d311      	bcc.n	1dd0 <_periph_get_lock_state+0x4c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    1dac:	f1b4 4f84 	cmp.w	r4, #1107296256	; 0x42000000
    1db0:	d31a      	bcc.n	1de8 <_periph_get_lock_state+0x64>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    1db2:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    1db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dba:	bf34      	ite	cc
    1dbc:	6bda      	ldrcc	r2, [r3, #60]	; 0x3c
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    1dbe:	6c1a      	ldrcs	r2, [r3, #64]	; 0x40
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    1dc0:	2301      	movs	r3, #1
    1dc2:	fa03 f000 	lsl.w	r0, r3, r0
    1dc6:	4210      	tst	r0, r2
    1dc8:	bf08      	it	eq
    1dca:	2300      	moveq	r3, #0
    1dcc:	702b      	strb	r3, [r5, #0]
    1dce:	e009      	b.n	1de4 <_periph_get_lock_state+0x60>
	tmp = ((Pac *)hw)->STATUSA.reg;
    1dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    1dd6:	2301      	movs	r3, #1
    1dd8:	fa03 f000 	lsl.w	r0, r3, r0
    1ddc:	4210      	tst	r0, r2
    1dde:	bf08      	it	eq
    1de0:	2300      	moveq	r3, #0
    1de2:	702b      	strb	r3, [r5, #0]
	}

	return ERR_NONE;
}
    1de4:	2000      	movs	r0, #0
    1de6:	bd38      	pop	{r3, r4, r5, pc}
	tmp = ((Pac *)hw)->STATUSB.reg;
    1de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    1dee:	2301      	movs	r3, #1
    1df0:	fa03 f000 	lsl.w	r0, r3, r0
    1df4:	4210      	tst	r0, r2
    1df6:	bf08      	it	eq
    1df8:	2300      	moveq	r3, #0
    1dfa:	702b      	strb	r3, [r5, #0]
    1dfc:	e7f2      	b.n	1de4 <_periph_get_lock_state+0x60>
    1dfe:	bf00      	nop
    1e00:	00003efc 	.word	0x00003efc
    1e04:	0000126d 	.word	0x0000126d
    1e08:	00001d61 	.word	0x00001d61

00001e0c <_periph_lock>:
{
    1e0c:	b570      	push	{r4, r5, r6, lr}
    1e0e:	b082      	sub	sp, #8
    1e10:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    1e12:	2239      	movs	r2, #57	; 0x39
    1e14:	4914      	ldr	r1, [pc, #80]	; (1e68 <_periph_lock+0x5c>)
    1e16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    1e1a:	bf94      	ite	ls
    1e1c:	2000      	movls	r0, #0
    1e1e:	2001      	movhi	r0, #1
    1e20:	4b12      	ldr	r3, [pc, #72]	; (1e6c <_periph_lock+0x60>)
    1e22:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    1e24:	4628      	mov	r0, r5
    1e26:	4b12      	ldr	r3, [pc, #72]	; (1e70 <_periph_lock+0x64>)
    1e28:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    1e2a:	b280      	uxth	r0, r0
    1e2c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    1e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e34:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    1e36:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    1e3a:	4e0e      	ldr	r6, [pc, #56]	; (1e74 <_periph_lock+0x68>)
    1e3c:	f10d 0107 	add.w	r1, sp, #7
    1e40:	4628      	mov	r0, r5
    1e42:	47b0      	blx	r6
	} while (!stat && timeout--);
    1e44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e48:	b933      	cbnz	r3, 1e58 <_periph_lock+0x4c>
    1e4a:	3c01      	subs	r4, #1
    1e4c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1e50:	d1f4      	bne.n	1e3c <_periph_lock+0x30>
		return ERR_TIMEOUT;
    1e52:	f06f 0007 	mvn.w	r0, #7
    1e56:	e004      	b.n	1e62 <_periph_lock+0x56>
	return ERR_NONE;
    1e58:	2c00      	cmp	r4, #0
    1e5a:	bfb4      	ite	lt
    1e5c:	f06f 0007 	mvnlt.w	r0, #7
    1e60:	2000      	movge	r0, #0
}
    1e62:	b002      	add	sp, #8
    1e64:	bd70      	pop	{r4, r5, r6, pc}
    1e66:	bf00      	nop
    1e68:	00003efc 	.word	0x00003efc
    1e6c:	0000126d 	.word	0x0000126d
    1e70:	00001d61 	.word	0x00001d61
    1e74:	00001d85 	.word	0x00001d85

00001e78 <_periph_unlock>:
{
    1e78:	b570      	push	{r4, r5, r6, lr}
    1e7a:	b082      	sub	sp, #8
    1e7c:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    1e7e:	2253      	movs	r2, #83	; 0x53
    1e80:	4914      	ldr	r1, [pc, #80]	; (1ed4 <_periph_unlock+0x5c>)
    1e82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    1e86:	bf94      	ite	ls
    1e88:	2000      	movls	r0, #0
    1e8a:	2001      	movhi	r0, #1
    1e8c:	4b12      	ldr	r3, [pc, #72]	; (1ed8 <_periph_unlock+0x60>)
    1e8e:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    1e90:	4628      	mov	r0, r5
    1e92:	4b12      	ldr	r3, [pc, #72]	; (1edc <_periph_unlock+0x64>)
    1e94:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    1e96:	b280      	uxth	r0, r0
    1e98:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    1e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ea0:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    1ea2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    1ea6:	4e0e      	ldr	r6, [pc, #56]	; (1ee0 <_periph_unlock+0x68>)
    1ea8:	f10d 0107 	add.w	r1, sp, #7
    1eac:	4628      	mov	r0, r5
    1eae:	47b0      	blx	r6
	} while (stat && timeout--);
    1eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1eb4:	b133      	cbz	r3, 1ec4 <_periph_unlock+0x4c>
    1eb6:	3c01      	subs	r4, #1
    1eb8:	f1b4 3fff 	cmp.w	r4, #4294967295
    1ebc:	d1f4      	bne.n	1ea8 <_periph_unlock+0x30>
		return ERR_TIMEOUT;
    1ebe:	f06f 0007 	mvn.w	r0, #7
    1ec2:	e004      	b.n	1ece <_periph_unlock+0x56>
	return ERR_NONE;
    1ec4:	2c00      	cmp	r4, #0
    1ec6:	bfb4      	ite	lt
    1ec8:	f06f 0007 	mvnlt.w	r0, #7
    1ecc:	2000      	movge	r0, #0
}
    1ece:	b002      	add	sp, #8
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	bf00      	nop
    1ed4:	00003efc 	.word	0x00003efc
    1ed8:	0000126d 	.word	0x0000126d
    1edc:	00001d61 	.word	0x00001d61
    1ee0:	00001d85 	.word	0x00001d85

00001ee4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1ee4:	b500      	push	{lr}
    1ee6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1ee8:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <RAMECC_Handler+0x3c>)
    1eea:	789b      	ldrb	r3, [r3, #2]
    1eec:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1eee:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1ef0:	9b01      	ldr	r3, [sp, #4]
    1ef2:	f013 0f02 	tst.w	r3, #2
    1ef6:	d006      	beq.n	1f06 <RAMECC_Handler+0x22>
    1ef8:	4b0a      	ldr	r3, [pc, #40]	; (1f24 <RAMECC_Handler+0x40>)
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	b11b      	cbz	r3, 1f06 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1efe:	4a08      	ldr	r2, [pc, #32]	; (1f20 <RAMECC_Handler+0x3c>)
    1f00:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1f02:	4798      	blx	r3
    1f04:	e009      	b.n	1f1a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1f06:	9b01      	ldr	r3, [sp, #4]
    1f08:	f013 0f01 	tst.w	r3, #1
    1f0c:	d005      	beq.n	1f1a <RAMECC_Handler+0x36>
    1f0e:	4b05      	ldr	r3, [pc, #20]	; (1f24 <RAMECC_Handler+0x40>)
    1f10:	685b      	ldr	r3, [r3, #4]
    1f12:	b113      	cbz	r3, 1f1a <RAMECC_Handler+0x36>
    1f14:	4a02      	ldr	r2, [pc, #8]	; (1f20 <RAMECC_Handler+0x3c>)
    1f16:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1f18:	4798      	blx	r3
	} else {
		return;
	}
}
    1f1a:	b003      	add	sp, #12
    1f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    1f20:	41020000 	.word	0x41020000
    1f24:	20000f00 	.word	0x20000f00

00001f28 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1f28:	b470      	push	{r4, r5, r6}
    1f2a:	b089      	sub	sp, #36	; 0x24
    1f2c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1f2e:	466c      	mov	r4, sp
    1f30:	4d0d      	ldr	r5, [pc, #52]	; (1f68 <_sercom_get_hardware_index+0x40>)
    1f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1f3e:	9b00      	ldr	r3, [sp, #0]
    1f40:	42b3      	cmp	r3, r6
    1f42:	d00d      	beq.n	1f60 <_sercom_get_hardware_index+0x38>
    1f44:	4631      	mov	r1, r6
    1f46:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f48:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1f4a:	f853 2b04 	ldr.w	r2, [r3], #4
    1f4e:	428a      	cmp	r2, r1
    1f50:	d007      	beq.n	1f62 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f52:	3001      	adds	r0, #1
    1f54:	2808      	cmp	r0, #8
    1f56:	d1f8      	bne.n	1f4a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1f58:	2000      	movs	r0, #0
}
    1f5a:	b009      	add	sp, #36	; 0x24
    1f5c:	bc70      	pop	{r4, r5, r6}
    1f5e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f60:	2000      	movs	r0, #0
			return i;
    1f62:	b2c0      	uxtb	r0, r0
    1f64:	e7f9      	b.n	1f5a <_sercom_get_hardware_index+0x32>
    1f66:	bf00      	nop
    1f68:	00003f14 	.word	0x00003f14

00001f6c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1f6c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1f6e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1f70:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1f72:	f013 0f01 	tst.w	r3, #1
    1f76:	d003      	beq.n	1f80 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1f78:	7da3      	ldrb	r3, [r4, #22]
    1f7a:	f013 0f01 	tst.w	r3, #1
    1f7e:	d112      	bne.n	1fa6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1f80:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1f82:	f013 0f02 	tst.w	r3, #2
    1f86:	d003      	beq.n	1f90 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1f88:	7da3      	ldrb	r3, [r4, #22]
    1f8a:	f013 0f02 	tst.w	r3, #2
    1f8e:	d10f      	bne.n	1fb0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1f90:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1f92:	f013 0f04 	tst.w	r3, #4
    1f96:	d015      	beq.n	1fc4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1f98:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1f9a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1f9e:	b163      	cbz	r3, 1fba <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1fa0:	23ff      	movs	r3, #255	; 0xff
    1fa2:	8363      	strh	r3, [r4, #26]
    1fa4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1fa6:	2301      	movs	r3, #1
    1fa8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1faa:	6803      	ldr	r3, [r0, #0]
    1fac:	4798      	blx	r3
    1fae:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1fb0:	2302      	movs	r3, #2
    1fb2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1fb4:	6883      	ldr	r3, [r0, #8]
    1fb6:	4798      	blx	r3
    1fb8:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1fba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1fbc:	6843      	ldr	r3, [r0, #4]
    1fbe:	b2c9      	uxtb	r1, r1
    1fc0:	4798      	blx	r3
    1fc2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1fc4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1fc6:	09db      	lsrs	r3, r3, #7
    1fc8:	d100      	bne.n	1fcc <_sercom_usart_interrupt_handler+0x60>
    1fca:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1fcc:	2380      	movs	r3, #128	; 0x80
    1fce:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1fd0:	68c3      	ldr	r3, [r0, #12]
    1fd2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1fd4:	8b63      	ldrh	r3, [r4, #26]
    1fd6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1fd8:	8363      	strh	r3, [r4, #26]
    1fda:	e7f6      	b.n	1fca <_sercom_usart_interrupt_handler+0x5e>

00001fdc <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM2) {
    1fdc:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <_sercom_init_irq_param+0x18>)
    1fde:	4298      	cmp	r0, r3
    1fe0:	d005      	beq.n	1fee <_sercom_init_irq_param+0x12>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <_sercom_init_irq_param+0x1c>)
    1fe4:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    1fe6:	bf04      	itt	eq
    1fe8:	4b04      	ldreq	r3, [pc, #16]	; (1ffc <_sercom_init_irq_param+0x20>)
    1fea:	6059      	streq	r1, [r3, #4]
    1fec:	4770      	bx	lr
		_sercom2_dev = (struct _usart_async_device *)dev;
    1fee:	4b03      	ldr	r3, [pc, #12]	; (1ffc <_sercom_init_irq_param+0x20>)
    1ff0:	6019      	str	r1, [r3, #0]
    1ff2:	4770      	bx	lr
    1ff4:	41012000 	.word	0x41012000
    1ff8:	43000400 	.word	0x43000400
    1ffc:	20000558 	.word	0x20000558

00002000 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2000:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2002:	4b03      	ldr	r3, [pc, #12]	; (2010 <_sercom_get_irq_num+0x10>)
    2004:	4798      	blx	r3
    2006:	0080      	lsls	r0, r0, #2
    2008:	302e      	adds	r0, #46	; 0x2e
}
    200a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    200e:	bd08      	pop	{r3, pc}
    2010:	00001f29 	.word	0x00001f29

00002014 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2014:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2016:	f013 0f01 	tst.w	r3, #1
    201a:	d109      	bne.n	2030 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    201c:	6803      	ldr	r3, [r0, #0]
    201e:	f043 0302 	orr.w	r3, r3, #2
    2022:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2024:	69c3      	ldr	r3, [r0, #28]
    2026:	f013 0f03 	tst.w	r3, #3
    202a:	d1fb      	bne.n	2024 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    202c:	2000      	movs	r0, #0
    202e:	4770      	bx	lr
		return ERR_BUSY;
    2030:	f06f 0003 	mvn.w	r0, #3
}
    2034:	4770      	bx	lr
	...

00002038 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    2038:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    203a:	4b03      	ldr	r3, [pc, #12]	; (2048 <_spi_get_rx_dma_channel+0x10>)
    203c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    203e:	2807      	cmp	r0, #7
    2040:	bf8c      	ite	hi
    2042:	2000      	movhi	r0, #0
    2044:	2001      	movls	r0, #1
    2046:	bd08      	pop	{r3, pc}
    2048:	00001f29 	.word	0x00001f29

0000204c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    204c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    204e:	6883      	ldr	r3, [r0, #8]
    2050:	689b      	ldr	r3, [r3, #8]
    2052:	b103      	cbz	r3, 2056 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    2054:	4798      	blx	r3
    2056:	bd08      	pop	{r3, pc}

00002058 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    2058:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    205a:	6883      	ldr	r3, [r0, #8]
    205c:	685b      	ldr	r3, [r3, #4]
    205e:	b103      	cbz	r3, 2062 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    2060:	4798      	blx	r3
    2062:	bd08      	pop	{r3, pc}

00002064 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    2064:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    2066:	6883      	ldr	r3, [r0, #8]
    2068:	68db      	ldr	r3, [r3, #12]
    206a:	b103      	cbz	r3, 206e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    206c:	4798      	blx	r3
    206e:	bd08      	pop	{r3, pc}

00002070 <_usart_init>:
{
    2070:	b510      	push	{r4, lr}
    2072:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2074:	4b21      	ldr	r3, [pc, #132]	; (20fc <_usart_init+0x8c>)
    2076:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2078:	2802      	cmp	r0, #2
    207a:	d005      	beq.n	2088 <_usart_init+0x18>
	ASSERT(false);
    207c:	f240 226e 	movw	r2, #622	; 0x26e
    2080:	491f      	ldr	r1, [pc, #124]	; (2100 <_usart_init+0x90>)
    2082:	2000      	movs	r0, #0
    2084:	4b1f      	ldr	r3, [pc, #124]	; (2104 <_usart_init+0x94>)
    2086:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2088:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    208a:	f013 0f01 	tst.w	r3, #1
    208e:	d119      	bne.n	20c4 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2090:	69e3      	ldr	r3, [r4, #28]
    2092:	f013 0f03 	tst.w	r3, #3
    2096:	d1fb      	bne.n	2090 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2098:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    209a:	f013 0f02 	tst.w	r3, #2
    209e:	d00b      	beq.n	20b8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20a0:	6823      	ldr	r3, [r4, #0]
    20a2:	f023 0302 	bic.w	r3, r3, #2
    20a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20a8:	69e3      	ldr	r3, [r4, #28]
    20aa:	f013 0f03 	tst.w	r3, #3
    20ae:	d1fb      	bne.n	20a8 <_usart_init+0x38>
    20b0:	69e3      	ldr	r3, [r4, #28]
    20b2:	f013 0f02 	tst.w	r3, #2
    20b6:	d1fb      	bne.n	20b0 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    20b8:	2305      	movs	r3, #5
    20ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20bc:	69e3      	ldr	r3, [r4, #28]
    20be:	f013 0f03 	tst.w	r3, #3
    20c2:	d1fb      	bne.n	20bc <_usart_init+0x4c>
    20c4:	69e3      	ldr	r3, [r4, #28]
    20c6:	f013 0f01 	tst.w	r3, #1
    20ca:	d1fb      	bne.n	20c4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    20cc:	4b0e      	ldr	r3, [pc, #56]	; (2108 <_usart_init+0x98>)
    20ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20d0:	69e3      	ldr	r3, [r4, #28]
    20d2:	f013 0f03 	tst.w	r3, #3
    20d6:	d1fb      	bne.n	20d0 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    20d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    20dc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20de:	69e3      	ldr	r3, [r4, #28]
    20e0:	f013 0f1f 	tst.w	r3, #31
    20e4:	d1fb      	bne.n	20de <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    20e6:	4b09      	ldr	r3, [pc, #36]	; (210c <_usart_init+0x9c>)
    20e8:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    20ea:	f24f 632b 	movw	r3, #63019	; 0xf62b
    20ee:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    20f0:	2000      	movs	r0, #0
    20f2:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    20f4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	00001f29 	.word	0x00001f29
    2100:	00003f60 	.word	0x00003f60
    2104:	0000126d 	.word	0x0000126d
    2108:	40100004 	.word	0x40100004
    210c:	00700002 	.word	0x00700002

00002110 <_get_i2cm_index>:
{
    2110:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2112:	4b07      	ldr	r3, [pc, #28]	; (2130 <_get_i2cm_index+0x20>)
    2114:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    2116:	2805      	cmp	r0, #5
    2118:	d008      	beq.n	212c <_get_i2cm_index+0x1c>
	ASSERT(false);
    211a:	f240 32d5 	movw	r2, #981	; 0x3d5
    211e:	4905      	ldr	r1, [pc, #20]	; (2134 <_get_i2cm_index+0x24>)
    2120:	2000      	movs	r0, #0
    2122:	4b05      	ldr	r3, [pc, #20]	; (2138 <_get_i2cm_index+0x28>)
    2124:	4798      	blx	r3
	return -1;
    2126:	f04f 30ff 	mov.w	r0, #4294967295
}
    212a:	bd08      	pop	{r3, pc}
			return i;
    212c:	2000      	movs	r0, #0
    212e:	bd08      	pop	{r3, pc}
    2130:	00001f29 	.word	0x00001f29
    2134:	00003f60 	.word	0x00003f60
    2138:	0000126d 	.word	0x0000126d

0000213c <_i2c_m_sync_init_impl>:
{
    213c:	b538      	push	{r3, r4, r5, lr}
    213e:	4605      	mov	r5, r0
    2140:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    2142:	4608      	mov	r0, r1
    2144:	4b32      	ldr	r3, [pc, #200]	; (2210 <_i2c_m_sync_init_impl+0xd4>)
    2146:	4798      	blx	r3
    2148:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    214a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    214c:	f013 0f01 	tst.w	r3, #1
    2150:	d122      	bne.n	2198 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2156:	4a2f      	ldr	r2, [pc, #188]	; (2214 <_i2c_m_sync_init_impl+0xd8>)
    2158:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    215e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2162:	69e3      	ldr	r3, [r4, #28]
    2164:	f013 0f03 	tst.w	r3, #3
    2168:	d1fb      	bne.n	2162 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    216a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    216c:	f013 0f02 	tst.w	r3, #2
    2170:	d00b      	beq.n	218a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2172:	6823      	ldr	r3, [r4, #0]
    2174:	f023 0302 	bic.w	r3, r3, #2
    2178:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    217a:	69e3      	ldr	r3, [r4, #28]
    217c:	f013 0f03 	tst.w	r3, #3
    2180:	d1fb      	bne.n	217a <_i2c_m_sync_init_impl+0x3e>
    2182:	69e3      	ldr	r3, [r4, #28]
    2184:	f013 0f02 	tst.w	r3, #2
    2188:	d1fb      	bne.n	2182 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    218a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    218e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2190:	69e3      	ldr	r3, [r4, #28]
    2192:	f013 0f03 	tst.w	r3, #3
    2196:	d1fb      	bne.n	2190 <_i2c_m_sync_init_impl+0x54>
    2198:	69e3      	ldr	r3, [r4, #28]
    219a:	f013 0f01 	tst.w	r3, #1
    219e:	d1fb      	bne.n	2198 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    21a0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    21a4:	4a1b      	ldr	r2, [pc, #108]	; (2214 <_i2c_m_sync_init_impl+0xd8>)
    21a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    21aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    21ac:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21ae:	69e3      	ldr	r3, [r4, #28]
    21b0:	f013 0f03 	tst.w	r3, #3
    21b4:	d1fb      	bne.n	21ae <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    21b6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    21ba:	4916      	ldr	r1, [pc, #88]	; (2214 <_i2c_m_sync_init_impl+0xd8>)
    21bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    21c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    21c2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21c4:	69e3      	ldr	r3, [r4, #28]
    21c6:	f013 0f17 	tst.w	r3, #23
    21ca:	d1fb      	bne.n	21c4 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    21cc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    21d0:	4910      	ldr	r1, [pc, #64]	; (2214 <_i2c_m_sync_init_impl+0xd8>)
    21d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    21d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    21d8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    21da:	f3c2 6301 	ubfx	r3, r2, #24, #2
    21de:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    21e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    21e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    21e6:	2b01      	cmp	r3, #1
    21e8:	bf94      	ite	ls
    21ea:	2300      	movls	r3, #0
    21ec:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    21ee:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    21f2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21f4:	69e3      	ldr	r3, [r4, #28]
    21f6:	f013 0f04 	tst.w	r3, #4
    21fa:	d1fb      	bne.n	21f4 <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    21fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <_i2c_m_sync_init_impl+0xd8>)
    2202:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2206:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    2208:	81eb      	strh	r3, [r5, #14]
}
    220a:	2000      	movs	r0, #0
    220c:	bd38      	pop	{r3, r4, r5, pc}
    220e:	bf00      	nop
    2210:	00002111 	.word	0x00002111
    2214:	00003f14 	.word	0x00003f14

00002218 <_sercom_i2c_m_irq_handler>:
{
    2218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    221c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    221e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2220:	7e26      	ldrb	r6, [r4, #24]
    2222:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    2224:	f8df 8234 	ldr.w	r8, [pc, #564]	; 245c <_sercom_i2c_m_irq_handler+0x244>
    2228:	f240 4247 	movw	r2, #1095	; 0x447
    222c:	4641      	mov	r1, r8
    222e:	3000      	adds	r0, #0
    2230:	bf18      	it	ne
    2232:	2001      	movne	r0, #1
    2234:	4f88      	ldr	r7, [pc, #544]	; (2458 <_sercom_i2c_m_irq_handler+0x240>)
    2236:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    2238:	6928      	ldr	r0, [r5, #16]
    223a:	f44f 6289 	mov.w	r2, #1096	; 0x448
    223e:	4641      	mov	r1, r8
    2240:	3000      	adds	r0, #0
    2242:	bf18      	it	ne
    2244:	2001      	movne	r0, #1
    2246:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    2248:	f016 0f80 	tst.w	r6, #128	; 0x80
    224c:	f040 80f4 	bne.w	2438 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2250:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2252:	69e3      	ldr	r3, [r4, #28]
    2254:	f013 0f04 	tst.w	r3, #4
    2258:	d1fb      	bne.n	2252 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    225a:	8b63      	ldrh	r3, [r4, #26]
    225c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    225e:	f016 0f01 	tst.w	r6, #1
    2262:	f000 8090 	beq.w	2386 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2266:	f013 0f02 	tst.w	r3, #2
    226a:	d022      	beq.n	22b2 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    226c:	2201      	movs	r2, #1
    226e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2270:	886a      	ldrh	r2, [r5, #2]
    2272:	b292      	uxth	r2, r2
    2274:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    2278:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    227a:	886a      	ldrh	r2, [r5, #2]
    227c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2280:	0412      	lsls	r2, r2, #16
    2282:	0c12      	lsrs	r2, r2, #16
    2284:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2286:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    228a:	2b00      	cmp	r3, #0
    228c:	bf14      	ite	ne
    228e:	f06f 0104 	mvnne.w	r1, #4
    2292:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2296:	886b      	ldrh	r3, [r5, #2]
    2298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    229c:	041b      	lsls	r3, r3, #16
    229e:	0c1b      	lsrs	r3, r3, #16
    22a0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    22a2:	696b      	ldr	r3, [r5, #20]
    22a4:	2b00      	cmp	r3, #0
    22a6:	f000 80c5 	beq.w	2434 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    22aa:	4628      	mov	r0, r5
    22ac:	4798      	blx	r3
    22ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    22b2:	f013 0f04 	tst.w	r3, #4
    22b6:	d124      	bne.n	2302 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    22b8:	886b      	ldrh	r3, [r5, #2]
    22ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
    22be:	d03e      	beq.n	233e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    22c0:	882b      	ldrh	r3, [r5, #0]
    22c2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    22c4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22c8:	69e3      	ldr	r3, [r4, #28]
    22ca:	f013 0f04 	tst.w	r3, #4
    22ce:	d1fb      	bne.n	22c8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    22d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    22d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    22d6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    22da:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    22dc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22de:	69e3      	ldr	r3, [r4, #28]
    22e0:	f013 0f04 	tst.w	r3, #4
    22e4:	d1fb      	bne.n	22de <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    22e6:	886b      	ldrh	r3, [r5, #2]
    22e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    22ec:	041b      	lsls	r3, r3, #16
    22ee:	0c1b      	lsrs	r3, r3, #16
    22f0:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    22f2:	69ab      	ldr	r3, [r5, #24]
    22f4:	2b00      	cmp	r3, #0
    22f6:	f000 8088 	beq.w	240a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    22fa:	4628      	mov	r0, r5
    22fc:	4798      	blx	r3
    22fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    2302:	686b      	ldr	r3, [r5, #4]
    2304:	2b00      	cmp	r3, #0
    2306:	dd04      	ble.n	2312 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    2308:	886b      	ldrh	r3, [r5, #2]
    230a:	b29b      	uxth	r3, r3
    230c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2310:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    2312:	886b      	ldrh	r3, [r5, #2]
    2314:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2318:	d108      	bne.n	232c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    231a:	886b      	ldrh	r3, [r5, #2]
    231c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2320:	041b      	lsls	r3, r3, #16
    2322:	0c1b      	lsrs	r3, r3, #16
    2324:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2326:	f06f 0101 	mvn.w	r1, #1
    232a:	e7b4      	b.n	2296 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    232c:	6863      	ldr	r3, [r4, #4]
    232e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2332:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2334:	69e3      	ldr	r3, [r4, #28]
    2336:	f013 0f04 	tst.w	r3, #4
    233a:	d1fb      	bne.n	2334 <_sercom_i2c_m_irq_handler+0x11c>
    233c:	e7ed      	b.n	231a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    233e:	686b      	ldr	r3, [r5, #4]
    2340:	b99b      	cbnz	r3, 236a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    2342:	886b      	ldrh	r3, [r5, #2]
    2344:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2348:	d106      	bne.n	2358 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    234a:	886b      	ldrh	r3, [r5, #2]
    234c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2350:	041b      	lsls	r3, r3, #16
    2352:	0c1b      	lsrs	r3, r3, #16
    2354:	806b      	strh	r3, [r5, #2]
    2356:	e7cc      	b.n	22f2 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2358:	6863      	ldr	r3, [r4, #4]
    235a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    235e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2360:	69e3      	ldr	r3, [r4, #28]
    2362:	f013 0f04 	tst.w	r3, #4
    2366:	d1fb      	bne.n	2360 <_sercom_i2c_m_irq_handler+0x148>
    2368:	e7ef      	b.n	234a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    236a:	68ab      	ldr	r3, [r5, #8]
    236c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    236e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2370:	69e3      	ldr	r3, [r4, #28]
    2372:	f013 0f04 	tst.w	r3, #4
    2376:	d1fb      	bne.n	2370 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    2378:	68ab      	ldr	r3, [r5, #8]
    237a:	3301      	adds	r3, #1
    237c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    237e:	686b      	ldr	r3, [r5, #4]
    2380:	3b01      	subs	r3, #1
    2382:	606b      	str	r3, [r5, #4]
    2384:	e7b5      	b.n	22f2 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    2386:	f016 0f02 	tst.w	r6, #2
    238a:	d041      	beq.n	2410 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    238c:	686a      	ldr	r2, [r5, #4]
    238e:	2a00      	cmp	r2, #0
    2390:	d036      	beq.n	2400 <_sercom_i2c_m_irq_handler+0x1e8>
    2392:	f013 0f04 	tst.w	r3, #4
    2396:	d133      	bne.n	2400 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2398:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    239c:	3a01      	subs	r2, #1
    239e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    23a0:	2a00      	cmp	r2, #0
    23a2:	d137      	bne.n	2414 <_sercom_i2c_m_irq_handler+0x1fc>
    23a4:	2900      	cmp	r1, #0
    23a6:	d039      	beq.n	241c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    23a8:	886b      	ldrh	r3, [r5, #2]
    23aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23ae:	d116      	bne.n	23de <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    23b0:	886b      	ldrh	r3, [r5, #2]
    23b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23b6:	041b      	lsls	r3, r3, #16
    23b8:	0c1b      	lsrs	r3, r3, #16
    23ba:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    23bc:	68aa      	ldr	r2, [r5, #8]
    23be:	1c53      	adds	r3, r2, #1
    23c0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23c2:	69e3      	ldr	r3, [r4, #28]
    23c4:	f013 0f04 	tst.w	r3, #4
    23c8:	d1fb      	bne.n	23c2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    23ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23cc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23ce:	2302      	movs	r3, #2
    23d0:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    23d2:	69eb      	ldr	r3, [r5, #28]
    23d4:	b1e3      	cbz	r3, 2410 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    23d6:	4628      	mov	r0, r5
    23d8:	4798      	blx	r3
    23da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    23de:	6863      	ldr	r3, [r4, #4]
    23e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23e4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23e6:	69e3      	ldr	r3, [r4, #28]
    23e8:	f013 0f17 	tst.w	r3, #23
    23ec:	d1fb      	bne.n	23e6 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23ee:	6863      	ldr	r3, [r4, #4]
    23f0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23f6:	69e3      	ldr	r3, [r4, #28]
    23f8:	f013 0f04 	tst.w	r3, #4
    23fc:	d1fb      	bne.n	23f6 <_sercom_i2c_m_irq_handler+0x1de>
    23fe:	e7d7      	b.n	23b0 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2400:	2302      	movs	r3, #2
    2402:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2404:	f06f 0101 	mvn.w	r1, #1
    2408:	e745      	b.n	2296 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    240a:	f016 0f02 	tst.w	r6, #2
    240e:	d1e0      	bne.n	23d2 <_sercom_i2c_m_irq_handler+0x1ba>
    2410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2414:	2a01      	cmp	r2, #1
    2416:	d1d1      	bne.n	23bc <_sercom_i2c_m_irq_handler+0x1a4>
    2418:	2900      	cmp	r1, #0
    241a:	d0cf      	beq.n	23bc <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    241c:	6863      	ldr	r3, [r4, #4]
    241e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2422:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2424:	69e3      	ldr	r3, [r4, #28]
    2426:	f013 0f17 	tst.w	r3, #23
    242a:	d1fb      	bne.n	2424 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    242c:	686b      	ldr	r3, [r5, #4]
    242e:	2b00      	cmp	r3, #0
    2430:	d0ba      	beq.n	23a8 <_sercom_i2c_m_irq_handler+0x190>
    2432:	e7c3      	b.n	23bc <_sercom_i2c_m_irq_handler+0x1a4>
    2434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2438:	886b      	ldrh	r3, [r5, #2]
    243a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    243e:	041b      	lsls	r3, r3, #16
    2440:	0c1b      	lsrs	r3, r3, #16
    2442:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2444:	696b      	ldr	r3, [r5, #20]
    2446:	2b00      	cmp	r3, #0
    2448:	d0e2      	beq.n	2410 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    244a:	f06f 0104 	mvn.w	r1, #4
    244e:	4628      	mov	r0, r5
    2450:	4798      	blx	r3
    2452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2456:	bf00      	nop
    2458:	0000126d 	.word	0x0000126d
    245c:	00003f60 	.word	0x00003f60

00002460 <_usart_async_init>:
{
    2460:	b570      	push	{r4, r5, r6, lr}
    2462:	460d      	mov	r5, r1
	ASSERT(device);
    2464:	4606      	mov	r6, r0
    2466:	22ce      	movs	r2, #206	; 0xce
    2468:	4917      	ldr	r1, [pc, #92]	; (24c8 <_usart_async_init+0x68>)
    246a:	3000      	adds	r0, #0
    246c:	bf18      	it	ne
    246e:	2001      	movne	r0, #1
    2470:	4b16      	ldr	r3, [pc, #88]	; (24cc <_usart_async_init+0x6c>)
    2472:	4798      	blx	r3
	init_status = _usart_init(hw);
    2474:	4628      	mov	r0, r5
    2476:	4b16      	ldr	r3, [pc, #88]	; (24d0 <_usart_async_init+0x70>)
    2478:	4798      	blx	r3
	if (init_status) {
    247a:	4604      	mov	r4, r0
    247c:	b108      	cbz	r0, 2482 <_usart_async_init+0x22>
}
    247e:	4620      	mov	r0, r4
    2480:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2482:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2484:	4631      	mov	r1, r6
    2486:	4628      	mov	r0, r5
    2488:	4b12      	ldr	r3, [pc, #72]	; (24d4 <_usart_async_init+0x74>)
    248a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    248c:	4628      	mov	r0, r5
    248e:	4b12      	ldr	r3, [pc, #72]	; (24d8 <_usart_async_init+0x78>)
    2490:	4798      	blx	r3
    2492:	1d01      	adds	r1, r0, #4
    2494:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2496:	2501      	movs	r5, #1
    2498:	f000 021f 	and.w	r2, r0, #31
    249c:	fa05 f202 	lsl.w	r2, r5, r2
    24a0:	0943      	lsrs	r3, r0, #5
    24a2:	009b      	lsls	r3, r3, #2
    24a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    24a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    24ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    24b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24b4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24bc:	601a      	str	r2, [r3, #0]
		irq++;
    24be:	3001      	adds	r0, #1
    24c0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    24c2:	4281      	cmp	r1, r0
    24c4:	d1e8      	bne.n	2498 <_usart_async_init+0x38>
    24c6:	e7da      	b.n	247e <_usart_async_init+0x1e>
    24c8:	00003f60 	.word	0x00003f60
    24cc:	0000126d 	.word	0x0000126d
    24d0:	00002071 	.word	0x00002071
    24d4:	00001fdd 	.word	0x00001fdd
    24d8:	00002001 	.word	0x00002001

000024dc <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    24dc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    24de:	6813      	ldr	r3, [r2, #0]
    24e0:	f043 0302 	orr.w	r3, r3, #2
    24e4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24e6:	69d3      	ldr	r3, [r2, #28]
    24e8:	f013 0f03 	tst.w	r3, #3
    24ec:	d1fb      	bne.n	24e6 <_usart_async_enable+0xa>
}
    24ee:	4770      	bx	lr

000024f0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    24f0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    24f2:	6299      	str	r1, [r3, #40]	; 0x28
    24f4:	4770      	bx	lr

000024f6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    24f6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    24f8:	2201      	movs	r2, #1
    24fa:	759a      	strb	r2, [r3, #22]
    24fc:	4770      	bx	lr

000024fe <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    24fe:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2500:	2202      	movs	r2, #2
    2502:	759a      	strb	r2, [r3, #22]
    2504:	4770      	bx	lr
	...

00002508 <_i2c_m_async_init>:
{
    2508:	b570      	push	{r4, r5, r6, lr}
    250a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    250c:	4606      	mov	r6, r0
    250e:	f240 42bc 	movw	r2, #1212	; 0x4bc
    2512:	4918      	ldr	r1, [pc, #96]	; (2574 <_i2c_m_async_init+0x6c>)
    2514:	3000      	adds	r0, #0
    2516:	bf18      	it	ne
    2518:	2001      	movne	r0, #1
    251a:	4b17      	ldr	r3, [pc, #92]	; (2578 <_i2c_m_async_init+0x70>)
    251c:	4798      	blx	r3
	i2c_dev->hw = hw;
    251e:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2520:	4629      	mov	r1, r5
    2522:	4630      	mov	r0, r6
    2524:	4b15      	ldr	r3, [pc, #84]	; (257c <_i2c_m_async_init+0x74>)
    2526:	4798      	blx	r3
	if (init_status) {
    2528:	4604      	mov	r4, r0
    252a:	b108      	cbz	r0, 2530 <_i2c_m_async_init+0x28>
}
    252c:	4620      	mov	r0, r4
    252e:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    2530:	4631      	mov	r1, r6
    2532:	4628      	mov	r0, r5
    2534:	4b12      	ldr	r3, [pc, #72]	; (2580 <_i2c_m_async_init+0x78>)
    2536:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2538:	4628      	mov	r0, r5
    253a:	4b12      	ldr	r3, [pc, #72]	; (2584 <_i2c_m_async_init+0x7c>)
    253c:	4798      	blx	r3
    253e:	1d01      	adds	r1, r0, #4
    2540:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2542:	2501      	movs	r5, #1
    2544:	f000 021f 	and.w	r2, r0, #31
    2548:	fa05 f202 	lsl.w	r2, r5, r2
    254c:	0943      	lsrs	r3, r0, #5
    254e:	009b      	lsls	r3, r3, #2
    2550:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2554:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    255c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2560:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2564:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2568:	601a      	str	r2, [r3, #0]
		irq++;
    256a:	3001      	adds	r0, #1
    256c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    256e:	4281      	cmp	r1, r0
    2570:	d1e8      	bne.n	2544 <_i2c_m_async_init+0x3c>
    2572:	e7db      	b.n	252c <_i2c_m_async_init+0x24>
    2574:	00003f60 	.word	0x00003f60
    2578:	0000126d 	.word	0x0000126d
    257c:	0000213d 	.word	0x0000213d
    2580:	00001fdd 	.word	0x00001fdd
    2584:	00002001 	.word	0x00002001

00002588 <_i2c_m_async_transfer>:
{
    2588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    258c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    258e:	4605      	mov	r5, r0
    2590:	f110 0800 	adds.w	r8, r0, #0
    2594:	bf18      	it	ne
    2596:	f04f 0801 	movne.w	r8, #1
    259a:	4f45      	ldr	r7, [pc, #276]	; (26b0 <_i2c_m_async_transfer+0x128>)
    259c:	f240 5212 	movw	r2, #1298	; 0x512
    25a0:	4639      	mov	r1, r7
    25a2:	4640      	mov	r0, r8
    25a4:	4e43      	ldr	r6, [pc, #268]	; (26b4 <_i2c_m_async_transfer+0x12c>)
    25a6:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    25a8:	6928      	ldr	r0, [r5, #16]
    25aa:	f240 5213 	movw	r2, #1299	; 0x513
    25ae:	4639      	mov	r1, r7
    25b0:	3000      	adds	r0, #0
    25b2:	bf18      	it	ne
    25b4:	2001      	movne	r0, #1
    25b6:	47b0      	blx	r6
	ASSERT(msg);
    25b8:	f240 5214 	movw	r2, #1300	; 0x514
    25bc:	4639      	mov	r1, r7
    25be:	1c20      	adds	r0, r4, #0
    25c0:	bf18      	it	ne
    25c2:	2001      	movne	r0, #1
    25c4:	47b0      	blx	r6
	if (msg->len == 0) {
    25c6:	6860      	ldr	r0, [r4, #4]
    25c8:	2800      	cmp	r0, #0
    25ca:	d06f      	beq.n	26ac <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    25cc:	886b      	ldrh	r3, [r5, #2]
    25ce:	f413 7f80 	tst.w	r3, #256	; 0x100
    25d2:	d169      	bne.n	26a8 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    25d4:	8863      	ldrh	r3, [r4, #2]
    25d6:	b29b      	uxth	r3, r3
    25d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25dc:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    25de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    25e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    25e6:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    25e8:	6853      	ldr	r3, [r2, #4]
    25ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25ee:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25f0:	69d3      	ldr	r3, [r2, #28]
    25f2:	f013 0f17 	tst.w	r3, #23
    25f6:	d1fb      	bne.n	25f0 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    25f8:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    25fa:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    25fc:	f240 42ea 	movw	r2, #1258	; 0x4ea
    2600:	492b      	ldr	r1, [pc, #172]	; (26b0 <_i2c_m_async_transfer+0x128>)
    2602:	4640      	mov	r0, r8
    2604:	4b2b      	ldr	r3, [pc, #172]	; (26b4 <_i2c_m_async_transfer+0x12c>)
    2606:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2608:	686b      	ldr	r3, [r5, #4]
    260a:	2b01      	cmp	r3, #1
    260c:	d02a      	beq.n	2664 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    260e:	6863      	ldr	r3, [r4, #4]
    2610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2614:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2616:	69e3      	ldr	r3, [r4, #28]
    2618:	f013 0f17 	tst.w	r3, #23
    261c:	d1fb      	bne.n	2616 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    261e:	882b      	ldrh	r3, [r5, #0]
    2620:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2624:	d02a      	beq.n	267c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    2626:	886a      	ldrh	r2, [r5, #2]
    2628:	f012 0f01 	tst.w	r2, #1
    262c:	d004      	beq.n	2638 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    262e:	886a      	ldrh	r2, [r5, #2]
    2630:	b292      	uxth	r2, r2
    2632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2636:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2638:	f240 72fe 	movw	r2, #2046	; 0x7fe
    263c:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2640:	69e3      	ldr	r3, [r4, #28]
    2642:	f013 0f04 	tst.w	r3, #4
    2646:	d1fb      	bne.n	2640 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2648:	6a63      	ldr	r3, [r4, #36]	; 0x24
    264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2652:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2654:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2656:	69e3      	ldr	r3, [r4, #28]
    2658:	f013 0f04 	tst.w	r3, #4
    265c:	d1fb      	bne.n	2656 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    265e:	2000      	movs	r0, #0
    2660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2664:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2668:	d0d1      	beq.n	260e <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    266a:	6863      	ldr	r3, [r4, #4]
    266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2670:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2672:	69e3      	ldr	r3, [r4, #28]
    2674:	f013 0f17 	tst.w	r3, #23
    2678:	d1fb      	bne.n	2672 <_i2c_m_async_transfer+0xea>
    267a:	e7d0      	b.n	261e <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    267c:	8869      	ldrh	r1, [r5, #2]
    267e:	005a      	lsls	r2, r3, #1
    2680:	b2d2      	uxtb	r2, r2
    2682:	f001 0301 	and.w	r3, r1, #1
    2686:	431a      	orrs	r2, r3
    2688:	69e3      	ldr	r3, [r4, #28]
    268a:	f013 0f04 	tst.w	r3, #4
    268e:	d1fb      	bne.n	2688 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2690:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2696:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2698:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    269a:	69e3      	ldr	r3, [r4, #28]
    269c:	f013 0f04 	tst.w	r3, #4
    26a0:	d1fb      	bne.n	269a <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    26a2:	2000      	movs	r0, #0
    26a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    26a8:	f06f 0003 	mvn.w	r0, #3
}
    26ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26b0:	00003f60 	.word	0x00003f60
    26b4:	0000126d 	.word	0x0000126d

000026b8 <_i2c_m_async_register_callback>:
	switch (type) {
    26b8:	2901      	cmp	r1, #1
    26ba:	d006      	beq.n	26ca <_i2c_m_async_register_callback+0x12>
    26bc:	b119      	cbz	r1, 26c6 <_i2c_m_async_register_callback+0xe>
    26be:	2902      	cmp	r1, #2
    26c0:	d005      	beq.n	26ce <_i2c_m_async_register_callback+0x16>
}
    26c2:	2000      	movs	r0, #0
    26c4:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    26c6:	6142      	str	r2, [r0, #20]
		break;
    26c8:	e7fb      	b.n	26c2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    26ca:	6182      	str	r2, [r0, #24]
		break;
    26cc:	e7f9      	b.n	26c2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    26ce:	61c2      	str	r2, [r0, #28]
		break;
    26d0:	e7f7      	b.n	26c2 <_i2c_m_async_register_callback+0xa>
	...

000026d4 <SERCOM2_0_Handler>:
{
    26d4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26d6:	4b02      	ldr	r3, [pc, #8]	; (26e0 <SERCOM2_0_Handler+0xc>)
    26d8:	6818      	ldr	r0, [r3, #0]
    26da:	4b02      	ldr	r3, [pc, #8]	; (26e4 <SERCOM2_0_Handler+0x10>)
    26dc:	4798      	blx	r3
    26de:	bd08      	pop	{r3, pc}
    26e0:	20000558 	.word	0x20000558
    26e4:	00001f6d 	.word	0x00001f6d

000026e8 <SERCOM2_1_Handler>:
{
    26e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26ea:	4b02      	ldr	r3, [pc, #8]	; (26f4 <SERCOM2_1_Handler+0xc>)
    26ec:	6818      	ldr	r0, [r3, #0]
    26ee:	4b02      	ldr	r3, [pc, #8]	; (26f8 <SERCOM2_1_Handler+0x10>)
    26f0:	4798      	blx	r3
    26f2:	bd08      	pop	{r3, pc}
    26f4:	20000558 	.word	0x20000558
    26f8:	00001f6d 	.word	0x00001f6d

000026fc <SERCOM2_2_Handler>:
{
    26fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26fe:	4b02      	ldr	r3, [pc, #8]	; (2708 <SERCOM2_2_Handler+0xc>)
    2700:	6818      	ldr	r0, [r3, #0]
    2702:	4b02      	ldr	r3, [pc, #8]	; (270c <SERCOM2_2_Handler+0x10>)
    2704:	4798      	blx	r3
    2706:	bd08      	pop	{r3, pc}
    2708:	20000558 	.word	0x20000558
    270c:	00001f6d 	.word	0x00001f6d

00002710 <SERCOM2_3_Handler>:
{
    2710:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <SERCOM2_3_Handler+0xc>)
    2714:	6818      	ldr	r0, [r3, #0]
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <SERCOM2_3_Handler+0x10>)
    2718:	4798      	blx	r3
    271a:	bd08      	pop	{r3, pc}
    271c:	20000558 	.word	0x20000558
    2720:	00001f6d 	.word	0x00001f6d

00002724 <SERCOM5_0_Handler>:
{
    2724:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <SERCOM5_0_Handler+0xc>)
    2728:	6858      	ldr	r0, [r3, #4]
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <SERCOM5_0_Handler+0x10>)
    272c:	4798      	blx	r3
    272e:	bd08      	pop	{r3, pc}
    2730:	20000558 	.word	0x20000558
    2734:	00002219 	.word	0x00002219

00002738 <SERCOM5_1_Handler>:
{
    2738:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    273a:	4b02      	ldr	r3, [pc, #8]	; (2744 <SERCOM5_1_Handler+0xc>)
    273c:	6858      	ldr	r0, [r3, #4]
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <SERCOM5_1_Handler+0x10>)
    2740:	4798      	blx	r3
    2742:	bd08      	pop	{r3, pc}
    2744:	20000558 	.word	0x20000558
    2748:	00002219 	.word	0x00002219

0000274c <SERCOM5_2_Handler>:
{
    274c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    274e:	4b02      	ldr	r3, [pc, #8]	; (2758 <SERCOM5_2_Handler+0xc>)
    2750:	6858      	ldr	r0, [r3, #4]
    2752:	4b02      	ldr	r3, [pc, #8]	; (275c <SERCOM5_2_Handler+0x10>)
    2754:	4798      	blx	r3
    2756:	bd08      	pop	{r3, pc}
    2758:	20000558 	.word	0x20000558
    275c:	00002219 	.word	0x00002219

00002760 <SERCOM5_3_Handler>:
{
    2760:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2762:	4b02      	ldr	r3, [pc, #8]	; (276c <SERCOM5_3_Handler+0xc>)
    2764:	6858      	ldr	r0, [r3, #4]
    2766:	4b02      	ldr	r3, [pc, #8]	; (2770 <SERCOM5_3_Handler+0x10>)
    2768:	4798      	blx	r3
    276a:	bd08      	pop	{r3, pc}
    276c:	20000558 	.word	0x20000558
    2770:	00002219 	.word	0x00002219

00002774 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    2774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2778:	4605      	mov	r5, r0
    277a:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    277c:	4608      	mov	r0, r1
    277e:	4b44      	ldr	r3, [pc, #272]	; (2890 <_spi_m_dma_init+0x11c>)
    2780:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2782:	2807      	cmp	r0, #7
    2784:	d00d      	beq.n	27a2 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2786:	2d00      	cmp	r5, #0
    2788:	d06e      	beq.n	2868 <_spi_m_dma_init+0xf4>
    278a:	f640 42f8 	movw	r2, #3320	; 0xcf8
    278e:	4941      	ldr	r1, [pc, #260]	; (2894 <_spi_m_dma_init+0x120>)
    2790:	1c20      	adds	r0, r4, #0
    2792:	bf18      	it	ne
    2794:	2001      	movne	r0, #1
    2796:	4b40      	ldr	r3, [pc, #256]	; (2898 <_spi_m_dma_init+0x124>)
    2798:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    279a:	f06f 000c 	mvn.w	r0, #12
    279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    27a2:	2d00      	cmp	r5, #0
    27a4:	d16a      	bne.n	287c <_spi_m_dma_init+0x108>
    27a6:	f640 42f8 	movw	r2, #3320	; 0xcf8
    27aa:	493a      	ldr	r1, [pc, #232]	; (2894 <_spi_m_dma_init+0x120>)
    27ac:	2000      	movs	r0, #0
    27ae:	4b3a      	ldr	r3, [pc, #232]	; (2898 <_spi_m_dma_init+0x124>)
    27b0:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    27b2:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    27b4:	f013 0f01 	tst.w	r3, #1
    27b8:	d119      	bne.n	27ee <_spi_m_dma_init+0x7a>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27ba:	69e3      	ldr	r3, [r4, #28]
    27bc:	f013 0f03 	tst.w	r3, #3
    27c0:	d1fb      	bne.n	27ba <_spi_m_dma_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    27c2:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    27c4:	f013 0f02 	tst.w	r3, #2
    27c8:	d00b      	beq.n	27e2 <_spi_m_dma_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    27ca:	6823      	ldr	r3, [r4, #0]
    27cc:	f023 0302 	bic.w	r3, r3, #2
    27d0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27d2:	69e3      	ldr	r3, [r4, #28]
    27d4:	f013 0f03 	tst.w	r3, #3
    27d8:	d1fb      	bne.n	27d2 <_spi_m_dma_init+0x5e>
    27da:	69e3      	ldr	r3, [r4, #28]
    27dc:	f013 0f02 	tst.w	r3, #2
    27e0:	d1fb      	bne.n	27da <_spi_m_dma_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    27e2:	230d      	movs	r3, #13
    27e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27e6:	69e3      	ldr	r3, [r4, #28]
    27e8:	f013 0f03 	tst.w	r3, #3
    27ec:	d1fb      	bne.n	27e6 <_spi_m_dma_init+0x72>
    27ee:	69e3      	ldr	r3, [r4, #28]
    27f0:	f013 0f01 	tst.w	r3, #1
    27f4:	d1fb      	bne.n	27ee <_spi_m_dma_init+0x7a>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    27f6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    27f8:	f640 1256 	movw	r2, #2390	; 0x956
    27fc:	4925      	ldr	r1, [pc, #148]	; (2894 <_spi_m_dma_init+0x120>)
    27fe:	1c20      	adds	r0, r4, #0
    2800:	bf18      	it	ne
    2802:	2001      	movne	r0, #1
    2804:	4b24      	ldr	r3, [pc, #144]	; (2898 <_spi_m_dma_init+0x124>)
    2806:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2808:	4b24      	ldr	r3, [pc, #144]	; (289c <_spi_m_dma_init+0x128>)
    280a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    280c:	69e3      	ldr	r3, [r4, #28]
    280e:	f013 0f03 	tst.w	r3, #3
    2812:	d1fb      	bne.n	280c <_spi_m_dma_init+0x98>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2818:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    281a:	69e3      	ldr	r3, [r4, #28]
    281c:	f013 0f17 	tst.w	r3, #23
    2820:	d1fb      	bne.n	281a <_spi_m_dma_init+0xa6>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2822:	2306      	movs	r3, #6
    2824:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2826:	2600      	movs	r6, #0
    2828:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    282c:	f105 0818 	add.w	r8, r5, #24
    2830:	4620      	mov	r0, r4
    2832:	4b1b      	ldr	r3, [pc, #108]	; (28a0 <_spi_m_dma_init+0x12c>)
    2834:	4798      	blx	r3
    2836:	4601      	mov	r1, r0
    2838:	4640      	mov	r0, r8
    283a:	4f1a      	ldr	r7, [pc, #104]	; (28a4 <_spi_m_dma_init+0x130>)
    283c:	47b8      	blx	r7
	dev->resource->back                 = dev;
    283e:	69ab      	ldr	r3, [r5, #24]
    2840:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    2842:	69ab      	ldr	r3, [r5, #24]
    2844:	4a18      	ldr	r2, [pc, #96]	; (28a8 <_spi_m_dma_init+0x134>)
    2846:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    2848:	69ab      	ldr	r3, [r5, #24]
    284a:	4c18      	ldr	r4, [pc, #96]	; (28ac <_spi_m_dma_init+0x138>)
    284c:	605c      	str	r4, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    284e:	4631      	mov	r1, r6
    2850:	4640      	mov	r0, r8
    2852:	47b8      	blx	r7
	dev->resource->back                 = dev;
    2854:	69ab      	ldr	r3, [r5, #24]
    2856:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    2858:	69ab      	ldr	r3, [r5, #24]
    285a:	4a15      	ldr	r2, [pc, #84]	; (28b0 <_spi_m_dma_init+0x13c>)
    285c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    285e:	69ab      	ldr	r3, [r5, #24]
    2860:	605c      	str	r4, [r3, #4]

	return ERR_NONE;
    2862:	4630      	mov	r0, r6
    2864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2868:	f640 42f8 	movw	r2, #3320	; 0xcf8
    286c:	4909      	ldr	r1, [pc, #36]	; (2894 <_spi_m_dma_init+0x120>)
    286e:	2000      	movs	r0, #0
    2870:	4b09      	ldr	r3, [pc, #36]	; (2898 <_spi_m_dma_init+0x124>)
    2872:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2874:	f06f 000c 	mvn.w	r0, #12
    2878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    287c:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2880:	4904      	ldr	r1, [pc, #16]	; (2894 <_spi_m_dma_init+0x120>)
    2882:	1c20      	adds	r0, r4, #0
    2884:	bf18      	it	ne
    2886:	2001      	movne	r0, #1
    2888:	4b03      	ldr	r3, [pc, #12]	; (2898 <_spi_m_dma_init+0x124>)
    288a:	4798      	blx	r3
    288c:	e791      	b.n	27b2 <_spi_m_dma_init+0x3e>
    288e:	bf00      	nop
    2890:	00001f29 	.word	0x00001f29
    2894:	00003f60 	.word	0x00003f60
    2898:	0000126d 	.word	0x0000126d
    289c:	0020000c 	.word	0x0020000c
    28a0:	00002039 	.word	0x00002039
    28a4:	00001a25 	.word	0x00001a25
    28a8:	0000204d 	.word	0x0000204d
    28ac:	00002065 	.word	0x00002065
    28b0:	00002059 	.word	0x00002059

000028b4 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    28b4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    28b6:	4604      	mov	r4, r0
    28b8:	b160      	cbz	r0, 28d4 <_spi_m_dma_enable+0x20>
    28ba:	6800      	ldr	r0, [r0, #0]
    28bc:	3000      	adds	r0, #0
    28be:	bf18      	it	ne
    28c0:	2001      	movne	r0, #1
    28c2:	f640 5221 	movw	r2, #3361	; 0xd21
    28c6:	4904      	ldr	r1, [pc, #16]	; (28d8 <_spi_m_dma_enable+0x24>)
    28c8:	4b04      	ldr	r3, [pc, #16]	; (28dc <_spi_m_dma_enable+0x28>)
    28ca:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    28cc:	6820      	ldr	r0, [r4, #0]
    28ce:	4b04      	ldr	r3, [pc, #16]	; (28e0 <_spi_m_dma_enable+0x2c>)
    28d0:	4798      	blx	r3
}
    28d2:	bd10      	pop	{r4, pc}
    28d4:	2000      	movs	r0, #0
    28d6:	e7f4      	b.n	28c2 <_spi_m_dma_enable+0xe>
    28d8:	00003f60 	.word	0x00003f60
    28dc:	0000126d 	.word	0x0000126d
    28e0:	00002015 	.word	0x00002015

000028e4 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    28e4:	b538      	push	{r3, r4, r5, lr}
    28e6:	4614      	mov	r4, r2
	switch (type) {
    28e8:	2901      	cmp	r1, #1
    28ea:	d00c      	beq.n	2906 <_spi_m_dma_register_callback+0x22>
    28ec:	b111      	cbz	r1, 28f4 <_spi_m_dma_register_callback+0x10>
    28ee:	2902      	cmp	r1, #2
    28f0:	d014      	beq.n	291c <_spi_m_dma_register_callback+0x38>
    28f2:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    28f4:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    28f6:	3200      	adds	r2, #0
    28f8:	bf18      	it	ne
    28fa:	2201      	movne	r2, #1
    28fc:	2100      	movs	r1, #0
    28fe:	4608      	mov	r0, r1
    2900:	4b0e      	ldr	r3, [pc, #56]	; (293c <_spi_m_dma_register_callback+0x58>)
    2902:	4798      	blx	r3
		break;
    2904:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    2906:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    2908:	6800      	ldr	r0, [r0, #0]
    290a:	4b0d      	ldr	r3, [pc, #52]	; (2940 <_spi_m_dma_register_callback+0x5c>)
    290c:	4798      	blx	r3
    290e:	1c22      	adds	r2, r4, #0
    2910:	bf18      	it	ne
    2912:	2201      	movne	r2, #1
    2914:	2100      	movs	r1, #0
    2916:	4b09      	ldr	r3, [pc, #36]	; (293c <_spi_m_dma_register_callback+0x58>)
    2918:	4798      	blx	r3
		break;
    291a:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    291c:	60c2      	str	r2, [r0, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    291e:	6800      	ldr	r0, [r0, #0]
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <_spi_m_dma_register_callback+0x5c>)
    2922:	4798      	blx	r3
    2924:	3400      	adds	r4, #0
    2926:	bf18      	it	ne
    2928:	2401      	movne	r4, #1
    292a:	4622      	mov	r2, r4
    292c:	2101      	movs	r1, #1
    292e:	4d03      	ldr	r5, [pc, #12]	; (293c <_spi_m_dma_register_callback+0x58>)
    2930:	47a8      	blx	r5
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    2932:	4622      	mov	r2, r4
    2934:	2101      	movs	r1, #1
    2936:	2000      	movs	r0, #0
    2938:	47a8      	blx	r5
    293a:	bd38      	pop	{r3, r4, r5, pc}
    293c:	000018fd 	.word	0x000018fd
    2940:	00002039 	.word	0x00002039

00002944 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    2944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2948:	4604      	mov	r4, r0
    294a:	4689      	mov	r9, r1
    294c:	4617      	mov	r7, r2
    294e:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    2950:	f8d0 a000 	ldr.w	sl, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2954:	4650      	mov	r0, sl
    2956:	4b3f      	ldr	r3, [pc, #252]	; (2a54 <_spi_m_dma_transfer+0x110>)
    2958:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    295a:	2807      	cmp	r0, #7
			return &sercomspi_regs[i];
    295c:	4e3e      	ldr	r6, [pc, #248]	; (2a58 <_spi_m_dma_transfer+0x114>)
    295e:	bf18      	it	ne
    2960:	2600      	movne	r6, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    2962:	4650      	mov	r0, sl
    2964:	4b3d      	ldr	r3, [pc, #244]	; (2a5c <_spi_m_dma_transfer+0x118>)
    2966:	4798      	blx	r3
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
    2968:	2f00      	cmp	r7, #0
    296a:	d046      	beq.n	29fa <_spi_m_dma_transfer+0xb6>
    296c:	4605      	mov	r5, r0
	ASSERT(dev && dev->prvt);
    296e:	2c00      	cmp	r4, #0
    2970:	d041      	beq.n	29f6 <_spi_m_dma_transfer+0xb2>
    2972:	f11a 0000 	adds.w	r0, sl, #0
    2976:	bf18      	it	ne
    2978:	2001      	movne	r0, #1
    297a:	f640 426b 	movw	r2, #3179	; 0xc6b
    297e:	4938      	ldr	r1, [pc, #224]	; (2a60 <_spi_m_dma_transfer+0x11c>)
    2980:	4b38      	ldr	r3, [pc, #224]	; (2a64 <_spi_m_dma_transfer+0x120>)
    2982:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    2984:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2986:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2988:	f013 0f04 	tst.w	r3, #4
    298c:	d107      	bne.n	299e <_spi_m_dma_transfer+0x5a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    298e:	6853      	ldr	r3, [r2, #4]
    2990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2994:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2996:	69d3      	ldr	r3, [r2, #28]
    2998:	f013 0f17 	tst.w	r3, #23
    299c:	d1fb      	bne.n	2996 <_spi_m_dma_transfer+0x52>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    299e:	6821      	ldr	r1, [r4, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    29a0:	3128      	adds	r1, #40	; 0x28
    29a2:	4628      	mov	r0, r5
    29a4:	4b30      	ldr	r3, [pc, #192]	; (2a68 <_spi_m_dma_transfer+0x124>)
    29a6:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    29a8:	4639      	mov	r1, r7
    29aa:	4628      	mov	r0, r5
    29ac:	4b2f      	ldr	r3, [pc, #188]	; (2a6c <_spi_m_dma_transfer+0x128>)
    29ae:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    29b0:	4641      	mov	r1, r8
    29b2:	4628      	mov	r0, r5
    29b4:	4b2e      	ldr	r3, [pc, #184]	; (2a70 <_spi_m_dma_transfer+0x12c>)
    29b6:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    29b8:	2100      	movs	r1, #0
    29ba:	4628      	mov	r0, r5
    29bc:	4b2d      	ldr	r3, [pc, #180]	; (2a74 <_spi_m_dma_transfer+0x130>)
    29be:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    29c0:	f1b9 0f00 	cmp.w	r9, #0
    29c4:	d033      	beq.n	2a2e <_spi_m_dma_transfer+0xea>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    29c6:	4649      	mov	r1, r9
    29c8:	2000      	movs	r0, #0
    29ca:	4b27      	ldr	r3, [pc, #156]	; (2a68 <_spi_m_dma_transfer+0x124>)
    29cc:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    29ce:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    29d0:	3128      	adds	r1, #40	; 0x28
    29d2:	2000      	movs	r0, #0
    29d4:	4b25      	ldr	r3, [pc, #148]	; (2a6c <_spi_m_dma_transfer+0x128>)
    29d6:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    29d8:	2101      	movs	r1, #1
    29da:	2000      	movs	r0, #0
    29dc:	4b26      	ldr	r3, [pc, #152]	; (2a78 <_spi_m_dma_transfer+0x134>)
    29de:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    29e0:	4641      	mov	r1, r8
    29e2:	2000      	movs	r0, #0
    29e4:	4b22      	ldr	r3, [pc, #136]	; (2a70 <_spi_m_dma_transfer+0x12c>)
    29e6:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    29e8:	2100      	movs	r1, #0
    29ea:	4608      	mov	r0, r1
    29ec:	4b21      	ldr	r3, [pc, #132]	; (2a74 <_spi_m_dma_transfer+0x130>)
    29ee:	4798      	blx	r3

	return ERR_NONE;
}
    29f0:	2000      	movs	r0, #0
    29f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(dev && dev->prvt);
    29f6:	2000      	movs	r0, #0
    29f8:	e7bf      	b.n	297a <_spi_m_dma_transfer+0x36>
	ASSERT(dev && dev->prvt);
    29fa:	b1b4      	cbz	r4, 2a2a <_spi_m_dma_transfer+0xe6>
    29fc:	f11a 0000 	adds.w	r0, sl, #0
    2a00:	bf18      	it	ne
    2a02:	2001      	movne	r0, #1
    2a04:	f640 4272 	movw	r2, #3186	; 0xc72
    2a08:	4915      	ldr	r1, [pc, #84]	; (2a60 <_spi_m_dma_transfer+0x11c>)
    2a0a:	4b16      	ldr	r3, [pc, #88]	; (2a64 <_spi_m_dma_transfer+0x120>)
    2a0c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    2a0e:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2a10:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2a12:	f013 0f04 	tst.w	r3, #4
    2a16:	d1d3      	bne.n	29c0 <_spi_m_dma_transfer+0x7c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    2a18:	6853      	ldr	r3, [r2, #4]
    2a1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2a1e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a20:	69d3      	ldr	r3, [r2, #28]
    2a22:	f013 0f17 	tst.w	r3, #23
    2a26:	d1fb      	bne.n	2a20 <_spi_m_dma_transfer+0xdc>
    2a28:	e7ca      	b.n	29c0 <_spi_m_dma_transfer+0x7c>
	ASSERT(dev && dev->prvt);
    2a2a:	2000      	movs	r0, #0
    2a2c:	e7ea      	b.n	2a04 <_spi_m_dma_transfer+0xc0>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    2a2e:	f106 010e 	add.w	r1, r6, #14
    2a32:	2000      	movs	r0, #0
    2a34:	4b0c      	ldr	r3, [pc, #48]	; (2a68 <_spi_m_dma_transfer+0x124>)
    2a36:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    2a38:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    2a3a:	3128      	adds	r1, #40	; 0x28
    2a3c:	2000      	movs	r0, #0
    2a3e:	4b0b      	ldr	r3, [pc, #44]	; (2a6c <_spi_m_dma_transfer+0x128>)
    2a40:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    2a42:	2100      	movs	r1, #0
    2a44:	4608      	mov	r0, r1
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <_spi_m_dma_transfer+0x134>)
    2a48:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    2a4a:	4641      	mov	r1, r8
    2a4c:	2000      	movs	r0, #0
    2a4e:	4b08      	ldr	r3, [pc, #32]	; (2a70 <_spi_m_dma_transfer+0x12c>)
    2a50:	4798      	blx	r3
    2a52:	e7c9      	b.n	29e8 <_spi_m_dma_transfer+0xa4>
    2a54:	00001f29 	.word	0x00001f29
    2a58:	00003f4c 	.word	0x00003f4c
    2a5c:	00002039 	.word	0x00002039
    2a60:	00003f60 	.word	0x00003f60
    2a64:	0000126d 	.word	0x0000126d
    2a68:	00001961 	.word	0x00001961
    2a6c:	00001951 	.word	0x00001951
    2a70:	0000198d 	.word	0x0000198d
    2a74:	000019e5 	.word	0x000019e5
    2a78:	00001971 	.word	0x00001971

00002a7c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2a7c:	4b03      	ldr	r3, [pc, #12]	; (2a8c <_delay_init+0x10>)
    2a7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2a82:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2a84:	2205      	movs	r2, #5
    2a86:	601a      	str	r2, [r3, #0]
    2a88:	4770      	bx	lr
    2a8a:	bf00      	nop
    2a8c:	e000e010 	.word	0xe000e010

00002a90 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2a90:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2a92:	b303      	cbz	r3, 2ad6 <_delay_cycles+0x46>
{
    2a94:	b430      	push	{r4, r5}
    2a96:	1e5d      	subs	r5, r3, #1
    2a98:	b2ed      	uxtb	r5, r5
	while (n--) {
    2a9a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2a9c:	4a12      	ldr	r2, [pc, #72]	; (2ae8 <_delay_cycles+0x58>)
    2a9e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2aa2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2aa4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2aa6:	6813      	ldr	r3, [r2, #0]
    2aa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2aac:	d0fb      	beq.n	2aa6 <_delay_cycles+0x16>
	while (n--) {
    2aae:	3801      	subs	r0, #1
    2ab0:	b2c0      	uxtb	r0, r0
    2ab2:	28ff      	cmp	r0, #255	; 0xff
    2ab4:	d1f5      	bne.n	2aa2 <_delay_cycles+0x12>
    2ab6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2aba:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2abe:	3101      	adds	r1, #1
    2ac0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2ac2:	4b09      	ldr	r3, [pc, #36]	; (2ae8 <_delay_cycles+0x58>)
    2ac4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ac6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ac8:	461a      	mov	r2, r3
    2aca:	6813      	ldr	r3, [r2, #0]
    2acc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ad0:	d0fb      	beq.n	2aca <_delay_cycles+0x3a>
		;
}
    2ad2:	bc30      	pop	{r4, r5}
    2ad4:	4770      	bx	lr
	SysTick->LOAD = buf;
    2ad6:	4b04      	ldr	r3, [pc, #16]	; (2ae8 <_delay_cycles+0x58>)
    2ad8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ada:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2adc:	461a      	mov	r2, r3
    2ade:	6813      	ldr	r3, [r2, #0]
    2ae0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ae4:	d0fb      	beq.n	2ade <_delay_cycles+0x4e>
    2ae6:	4770      	bx	lr
    2ae8:	e000e010 	.word	0xe000e010

00002aec <convert_cb_ADC_0>:
	volatile static uint8_t ADC_0_conversion_ready = 0;
	volatile static uint8_t ADC_1_conversion_ready = 0;

	static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
	{
		ADC_0_conversion_ready = 1;
    2aec:	2201      	movs	r2, #1
    2aee:	4b01      	ldr	r3, [pc, #4]	; (2af4 <convert_cb_ADC_0+0x8>)
    2af0:	701a      	strb	r2, [r3, #0]
    2af2:	4770      	bx	lr
    2af4:	20000560 	.word	0x20000560

00002af8 <tx_complete_cb_GRID_LED>:


	// DMA SPI CALLBACK
	static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
	{
		dma_spi_done = 1;
    2af8:	2201      	movs	r2, #1
    2afa:	4b01      	ldr	r3, [pc, #4]	; (2b00 <tx_complete_cb_GRID_LED+0x8>)
    2afc:	605a      	str	r2, [r3, #4]
    2afe:	4770      	bx	lr
    2b00:	20000560 	.word	0x20000560

00002b04 <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    2b04:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    2b06:	4d0d      	ldr	r5, [pc, #52]	; (2b3c <grid_led_set_color+0x38>)
    2b08:	692d      	ldr	r5, [r5, #16]
    2b0a:	4285      	cmp	r5, r0
    2b0c:	d802      	bhi.n	2b14 <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    2b0e:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    2b10:	bc30      	pop	{r4, r5}
    2b12:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    2b14:	4c09      	ldr	r4, [pc, #36]	; (2b3c <grid_led_set_color+0x38>)
    2b16:	6965      	ldr	r5, [r4, #20]
    2b18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2b1c:	0080      	lsls	r0, r0, #2
    2b1e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    2b22:	6992      	ldr	r2, [r2, #24]
    2b24:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    2b26:	4428      	add	r0, r5
    2b28:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    2b2c:	698a      	ldr	r2, [r1, #24]
    2b2e:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    2b30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2b34:	69a3      	ldr	r3, [r4, #24]
    2b36:	6083      	str	r3, [r0, #8]
		return 0;
    2b38:	2000      	movs	r0, #0
    2b3a:	e7e9      	b.n	2b10 <grid_led_set_color+0xc>
    2b3c:	20000560 	.word	0x20000560

00002b40 <grid_led_init>:

/** Initialize led buffer for a given number of LEDs */
uint8_t grid_led_init(uint8_t num){
    2b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b42:	4606      	mov	r6, r0
	
	led_number = num;	
    2b44:	4c46      	ldr	r4, [pc, #280]	; (2c60 <grid_led_init+0x120>)
    2b46:	6120      	str	r0, [r4, #16]
	
	// Allocating memory for the frame buffer
	led_frame_buffer_size = (24 + num*3*4);
    2b48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2b4c:	0080      	lsls	r0, r0, #2
    2b4e:	3018      	adds	r0, #24
    2b50:	60e0      	str	r0, [r4, #12]
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    2b52:	4f44      	ldr	r7, [pc, #272]	; (2c64 <grid_led_init+0x124>)
    2b54:	47b8      	blx	r7
    2b56:	4605      	mov	r5, r0
    2b58:	60a0      	str	r0, [r4, #8]
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[24];
    2b5a:	f100 0318 	add.w	r3, r0, #24
    2b5e:	f844 3f14 	str.w	r3, [r4, #20]!
	
	// Allocating memory for the smart buffer (2D array)
	#define led_smart_buffer_layer_number 2
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2b62:	201a      	movs	r0, #26
    2b64:	fb00 f006 	mul.w	r0, r0, r6
    2b68:	47b8      	blx	r7
    2b6a:	4b3f      	ldr	r3, [pc, #252]	; (2c68 <grid_led_init+0x128>)
    2b6c:	6018      	str	r0, [r3, #0]
    2b6e:	2200      	movs	r2, #0
    2b70:	b293      	uxth	r3, r2
	
	for(uint16_t i=0; i<256; i++){
		
		uint32_t temp = 0;
		
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2b72:	f003 0101 	and.w	r1, r3, #1
    2b76:	2900      	cmp	r1, #0
    2b78:	bf14      	ite	ne
    2b7a:	f04f 6160 	movne.w	r1, #234881024	; 0xe000000
    2b7e:	f04f 6100 	moveq.w	r1, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2b82:	f3c3 0040 	ubfx	r0, r3, #1, #1
    2b86:	2800      	cmp	r0, #0
    2b88:	bf14      	ite	ne
    2b8a:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    2b8e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    2b92:	4308      	orrs	r0, r1
		
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2b94:	f3c3 0180 	ubfx	r1, r3, #2, #1
    2b98:	2900      	cmp	r1, #0
    2b9a:	bf14      	ite	ne
    2b9c:	f44f 2160 	movne.w	r1, #917504	; 0xe0000
    2ba0:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    2ba4:	4301      	orrs	r1, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2ba6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    2baa:	2800      	cmp	r0, #0
    2bac:	bf14      	ite	ne
    2bae:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    2bb2:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    2bb6:	4301      	orrs	r1, r0
		
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2bb8:	f3c3 1000 	ubfx	r0, r3, #4, #1
    2bbc:	2800      	cmp	r0, #0
    2bbe:	bf14      	ite	ne
    2bc0:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    2bc4:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    2bc8:	4308      	orrs	r0, r1
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2bca:	f3c3 1140 	ubfx	r1, r3, #5, #1
    2bce:	2900      	cmp	r1, #0
    2bd0:	bf14      	ite	ne
    2bd2:	f44f 4160 	movne.w	r1, #57344	; 0xe000
    2bd6:	f44f 4100 	moveq.w	r1, #32768	; 0x8000
    2bda:	4308      	orrs	r0, r1
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2bdc:	f3c3 1180 	ubfx	r1, r3, #6, #1
    2be0:	2900      	cmp	r1, #0
    2be2:	bf14      	ite	ne
    2be4:	210e      	movne	r1, #14
    2be6:	2108      	moveq	r1, #8
    2be8:	4301      	orrs	r1, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2bea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2bee:	2b00      	cmp	r3, #0
    2bf0:	bf14      	ite	ne
    2bf2:	23e0      	movne	r3, #224	; 0xe0
    2bf4:	2380      	moveq	r3, #128	; 0x80
    2bf6:	430b      	orrs	r3, r1
		
		led_color_code[i] = temp;
    2bf8:	f844 3f04 	str.w	r3, [r4, #4]!
    2bfc:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2bfe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2c02:	d1b5      	bne.n	2b70 <grid_led_init+0x30>
    2c04:	1e6b      	subs	r3, r5, #1
    2c06:	3517      	adds	r5, #23

	// Fill the first 24 bytes with the rr_code (reset)
	// This memory is essentially wasted but allows the entire frame to be sent out using DMA

	for (uint8_t i = 0; i<24; i++){
		led_frame_buffer[i] = LED_CODE_R;
    2c08:	2200      	movs	r2, #0
    2c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<24; i++){
    2c0e:	42ab      	cmp	r3, r5
    2c10:	d1fb      	bne.n	2c0a <grid_led_init+0xca>
	}
	
	
	// Fill the rest of the buffer with rgb=(0,0,0);
	for (uint32_t i = 0; i<led_number; i++){
    2c12:	b31e      	cbz	r6, 2c5c <grid_led_init+0x11c>
    2c14:	2400      	movs	r4, #0
		grid_led_set_color(i, 0,0,0);
    2c16:	4627      	mov	r7, r4
    2c18:	4d14      	ldr	r5, [pc, #80]	; (2c6c <grid_led_init+0x12c>)
    2c1a:	463b      	mov	r3, r7
    2c1c:	463a      	mov	r2, r7
    2c1e:	4639      	mov	r1, r7
    2c20:	4620      	mov	r0, r4
    2c22:	47a8      	blx	r5
	for (uint32_t i = 0; i<led_number; i++){
    2c24:	3401      	adds	r4, #1
    2c26:	42a6      	cmp	r6, r4
    2c28:	d1f7      	bne.n	2c1a <grid_led_init+0xda>

	// READ DEFAULT SETTINGS FROM NVM 
	
	
	// OR FALLBACK TO DEFAULT IF NO CONFIG FOUND 
	for(uint8_t i = 0; i<led_number; i++){
    2c2a:	b1bc      	cbz	r4, 2c5c <grid_led_init+0x11c>
    2c2c:	2100      	movs	r1, #0



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_min.r = r;
    2c2e:	4d10      	ldr	r5, [pc, #64]	; (2c70 <grid_led_init+0x130>)
    2c30:	f04f 0e1a 	mov.w	lr, #26
    2c34:	460a      	mov	r2, r1

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_mid.r = r;
	l_buffer[num][layer].color_mid.g = g;
	l_buffer[num][layer].color_mid.b = b;	
    2c36:	2760      	movs	r7, #96	; 0x60

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_max.r = r;
	l_buffer[num][layer].color_max.g = g;
	l_buffer[num][layer].color_max.b = b;	
    2c38:	26e0      	movs	r6, #224	; 0xe0
	l_buffer[num][layer].color_min.r = r;
    2c3a:	fb0e f001 	mul.w	r0, lr, r1
    2c3e:	182b      	adds	r3, r5, r0
    2c40:	542a      	strb	r2, [r5, r0]
	l_buffer[num][layer].color_min.g = g;
    2c42:	705a      	strb	r2, [r3, #1]
	l_buffer[num][layer].color_min.b = b;	
    2c44:	709a      	strb	r2, [r3, #2]
	l_buffer[num][layer].color_mid.r = r;
    2c46:	70da      	strb	r2, [r3, #3]
	l_buffer[num][layer].color_mid.g = g;
    2c48:	711a      	strb	r2, [r3, #4]
	l_buffer[num][layer].color_mid.b = b;	
    2c4a:	715f      	strb	r7, [r3, #5]
	l_buffer[num][layer].color_max.r = r;
    2c4c:	719a      	strb	r2, [r3, #6]
	l_buffer[num][layer].color_max.g = g;
    2c4e:	71da      	strb	r2, [r3, #7]
	l_buffer[num][layer].color_max.b = b;	
    2c50:	721e      	strb	r6, [r3, #8]
	l_buffer[num][layer].pha = val;
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	l_buffer[num][layer].fre = val;
    2c52:	731a      	strb	r2, [r3, #12]
	for(uint8_t i = 0; i<led_number; i++){
    2c54:	3101      	adds	r1, #1
    2c56:	b2c9      	uxtb	r1, r1
    2c58:	428c      	cmp	r4, r1
    2c5a:	d8ee      	bhi.n	2c3a <grid_led_init+0xfa>
}
    2c5c:	2000      	movs	r0, #0
    2c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c60:	20000560 	.word	0x20000560
    2c64:	000033c1 	.word	0x000033c1
    2c68:	20000f10 	.word	0x20000f10
    2c6c:	00002b05 	.word	0x00002b05
    2c70:	20000f18 	.word	0x20000f18

00002c74 <grid_led_tick>:
	for (uint32_t j=0; j<led_number; j++){
    2c74:	4b09      	ldr	r3, [pc, #36]	; (2c9c <grid_led_tick+0x28>)
    2c76:	6918      	ldr	r0, [r3, #16]
    2c78:	b170      	cbz	r0, 2c98 <grid_led_tick+0x24>
    2c7a:	4b09      	ldr	r3, [pc, #36]	; (2ca0 <grid_led_tick+0x2c>)
    2c7c:	221a      	movs	r2, #26
    2c7e:	fb02 3000 	mla	r0, r2, r0, r3
			l_buffer[j][i].pha += l_buffer[j][i].fre; //PHASE + = FREQUENCY		
    2c82:	7ada      	ldrb	r2, [r3, #11]
    2c84:	7b19      	ldrb	r1, [r3, #12]
    2c86:	440a      	add	r2, r1
    2c88:	72da      	strb	r2, [r3, #11]
    2c8a:	7e1a      	ldrb	r2, [r3, #24]
    2c8c:	7e59      	ldrb	r1, [r3, #25]
    2c8e:	440a      	add	r2, r1
    2c90:	761a      	strb	r2, [r3, #24]
    2c92:	331a      	adds	r3, #26
	for (uint32_t j=0; j<led_number; j++){
    2c94:	4298      	cmp	r0, r3
    2c96:	d1f4      	bne.n	2c82 <grid_led_tick+0xe>
    2c98:	4770      	bx	lr
    2c9a:	bf00      	nop
    2c9c:	20000560 	.word	0x20000560
    2ca0:	20000f18 	.word	0x20000f18

00002ca4 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    2ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ca8:	4b23      	ldr	r3, [pc, #140]	; (2d38 <grid_led_render+0x94>)
    2caa:	241a      	movs	r4, #26
    2cac:	fb04 3400 	mla	r4, r4, r0, r3
    2cb0:	2700      	movs	r7, #0
	
	
	uint32_t mix_r = 0;
	uint32_t mix_g = 0;
	uint32_t mix_b = 0;
    2cb2:	463b      	mov	r3, r7
	uint32_t mix_g = 0;
    2cb4:	463a      	mov	r2, r7
	uint32_t mix_r = 0;
    2cb6:	4639      	mov	r1, r7
	for (uint8_t i = 0; i<2; i++){
				
		uint8_t min_r = l_buffer[num][i].color_min.r;
		uint8_t min_g = l_buffer[num][i].color_min.g;
		uint8_t min_b = l_buffer[num][i].color_min.b;
		uint8_t min_a = min_lookup[l_buffer[num][i].pha];
    2cb8:	f8df e088 	ldr.w	lr, [pc, #136]	; 2d44 <grid_led_render+0xa0>
    2cbc:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = l_buffer[num][i].color_max.r;
		uint8_t max_g = l_buffer[num][i].color_max.g;
		uint8_t max_b = l_buffer[num][i].color_max.b;
		uint8_t max_a = max_lookup[l_buffer[num][i].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2cbe:	f81e 8006 	ldrb.w	r8, [lr, r6]
		uint8_t mid_a = mid_lookup[l_buffer[num][i].pha];
    2cc2:	4476      	add	r6, lr
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2cc4:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2cc8:	f896 c200 	ldrb.w	ip, [r6, #512]	; 0x200
    2ccc:	7826      	ldrb	r6, [r4, #0]
    2cce:	f894 9003 	ldrb.w	r9, [r4, #3]
    2cd2:	fb05 f909 	mul.w	r9, r5, r9
    2cd6:	fb08 9906 	mla	r9, r8, r6, r9
    2cda:	79a6      	ldrb	r6, [r4, #6]
    2cdc:	fb0c 9606 	mla	r6, ip, r6, r9
    2ce0:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2ce2:	7866      	ldrb	r6, [r4, #1]
    2ce4:	f894 9004 	ldrb.w	r9, [r4, #4]
    2ce8:	fb05 f909 	mul.w	r9, r5, r9
    2cec:	fb08 9906 	mla	r9, r8, r6, r9
    2cf0:	79e6      	ldrb	r6, [r4, #7]
    2cf2:	fb0c 9606 	mla	r6, ip, r6, r9
    2cf6:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2cf8:	78a6      	ldrb	r6, [r4, #2]
    2cfa:	f894 9005 	ldrb.w	r9, [r4, #5]
    2cfe:	fb05 f509 	mul.w	r5, r5, r9
    2d02:	fb08 5606 	mla	r6, r8, r6, r5
    2d06:	7a25      	ldrb	r5, [r4, #8]
    2d08:	fb0c 6505 	mla	r5, ip, r5, r6
    2d0c:	442b      	add	r3, r5
    2d0e:	3701      	adds	r7, #1
    2d10:	340d      	adds	r4, #13
	for (uint8_t i = 0; i<2; i++){
    2d12:	2f02      	cmp	r7, #2
    2d14:	d1d2      	bne.n	2cbc <grid_led_render+0x18>
	}
	

	mix_r = (mix_r)/2/3/256;
	mix_g = (mix_g)/2/3/256;
	mix_b = (mix_b)/2/3/256;
    2d16:	4c09      	ldr	r4, [pc, #36]	; (2d3c <grid_led_render+0x98>)
    2d18:	fba4 5303 	umull	r5, r3, r4, r3
	mix_g = (mix_g)/2/3/256;
    2d1c:	fba4 5202 	umull	r5, r2, r4, r2
	mix_r = (mix_r)/2/3/256;
    2d20:	fba4 4101 	umull	r4, r1, r4, r1
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    2d24:	f3c3 2387 	ubfx	r3, r3, #10, #8
    2d28:	f3c2 2287 	ubfx	r2, r2, #10, #8
    2d2c:	f3c1 2187 	ubfx	r1, r1, #10, #8
    2d30:	4c03      	ldr	r4, [pc, #12]	; (2d40 <grid_led_render+0x9c>)
    2d32:	47a0      	blx	r4
    2d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d38:	20000f18 	.word	0x20000f18
    2d3c:	aaaaaaab 	.word	0xaaaaaaab
    2d40:	00002b05 	.word	0x00002b05
    2d44:	20000000 	.word	0x20000000

00002d48 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    2d48:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    2d4a:	4b05      	ldr	r3, [pc, #20]	; (2d60 <grid_led_render_all+0x18>)
    2d4c:	691d      	ldr	r5, [r3, #16]
    2d4e:	b135      	cbz	r5, 2d5e <grid_led_render_all+0x16>
    2d50:	2400      	movs	r4, #0
		
		grid_led_render(i);
    2d52:	4e04      	ldr	r6, [pc, #16]	; (2d64 <grid_led_render_all+0x1c>)
    2d54:	4620      	mov	r0, r4
    2d56:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    2d58:	3401      	adds	r4, #1
    2d5a:	42ac      	cmp	r4, r5
    2d5c:	d1fa      	bne.n	2d54 <grid_led_render_all+0xc>
    2d5e:	bd70      	pop	{r4, r5, r6, pc}
    2d60:	20000560 	.word	0x20000560
    2d64:	00002ca5 	.word	0x00002ca5

00002d68 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    2d68:	b538      	push	{r3, r4, r5, lr}
    2d6a:	4604      	mov	r4, r0
    2d6c:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    2d6e:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    2d70:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    2d72:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    2d74:	2300      	movs	r3, #0
    2d76:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    2d78:	0048      	lsls	r0, r1, #1
    2d7a:	4b09      	ldr	r3, [pc, #36]	; (2da0 <grid_ain_channel_init+0x38>)
    2d7c:	4798      	blx	r3
    2d7e:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    2d80:	b14d      	cbz	r5, 2d96 <grid_ain_channel_init+0x2e>
    2d82:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    2d84:	4619      	mov	r1, r3
    2d86:	6822      	ldr	r2, [r4, #0]
    2d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    2d8c:	3301      	adds	r3, #1
    2d8e:	b2db      	uxtb	r3, r3
    2d90:	7922      	ldrb	r2, [r4, #4]
    2d92:	429a      	cmp	r2, r3
    2d94:	d8f7      	bhi.n	2d86 <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    2d96:	2000      	movs	r0, #0
    2d98:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    2d9a:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    2d9c:	bd38      	pop	{r3, r4, r5, pc}
    2d9e:	bf00      	nop
    2da0:	000033c1 	.word	0x000033c1

00002da4 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    2da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2da8:	4605      	mov	r5, r0
    2daa:	460e      	mov	r6, r1
    2dac:	4691      	mov	r9, r2
    2dae:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    2db0:	4c0e      	ldr	r4, [pc, #56]	; (2dec <grid_ain_init+0x48>)
    2db2:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
	ain_channel_buffer_depth = depth;
    2db6:	f884 1419 	strb.w	r1, [r4, #1049]	; 0x419
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    2dba:	0100      	lsls	r0, r0, #4
    2dbc:	4b0c      	ldr	r3, [pc, #48]	; (2df0 <grid_ain_init+0x4c>)
    2dbe:	4798      	blx	r3
    2dc0:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    2dc4:	b175      	cbz	r5, 2de4 <grid_ain_init+0x40>
    2dc6:	4604      	mov	r4, r0
    2dc8:	3d01      	subs	r5, #1
    2dca:	b2ed      	uxtb	r5, r5
    2dcc:	3501      	adds	r5, #1
    2dce:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    2dd2:	4f08      	ldr	r7, [pc, #32]	; (2df4 <grid_ain_init+0x50>)
    2dd4:	4643      	mov	r3, r8
    2dd6:	464a      	mov	r2, r9
    2dd8:	4631      	mov	r1, r6
    2dda:	4620      	mov	r0, r4
    2ddc:	47b8      	blx	r7
    2dde:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    2de0:	42ac      	cmp	r4, r5
    2de2:	d1f7      	bne.n	2dd4 <grid_ain_init+0x30>
	}

	return 0;
}
    2de4:	2000      	movs	r0, #0
    2de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dea:	bf00      	nop
    2dec:	20000560 	.word	0x20000560
    2df0:	000033c1 	.word	0x000033c1
    2df4:	00002d69 	.word	0x00002d69

00002df8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    2df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    2dfc:	0100      	lsls	r0, r0, #4
    2dfe:	4b3c      	ldr	r3, [pc, #240]	; (2ef0 <grid_ain_add_sample+0xf8>)
    2e00:	f8d3 a41c 	ldr.w	sl, [r3, #1052]	; 0x41c
    2e04:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    2e08:	f89c 6004 	ldrb.w	r6, [ip, #4]
    2e0c:	2e00      	cmp	r6, #0
    2e0e:	d05b      	beq.n	2ec8 <grid_ain_add_sample+0xd0>
    2e10:	f85a 5000 	ldr.w	r5, [sl, r0]
    2e14:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    2e16:	2200      	movs	r2, #0
    2e18:	4690      	mov	r8, r2
    2e1a:	4691      	mov	r9, r2
    2e1c:	4696      	mov	lr, r2
    2e1e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2e22:	4614      	mov	r4, r2
    2e24:	fa5f fb82 	uxtb.w	fp, r2
    2e28:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    2e2c:	441c      	add	r4, r3
		
		if (current > maximum){
    2e2e:	4573      	cmp	r3, lr
    2e30:	bf84      	itt	hi
    2e32:	46d8      	movhi	r8, fp
			maximum = current;
    2e34:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    2e36:	42bb      	cmp	r3, r7
    2e38:	bf3c      	itt	cc
    2e3a:	46d9      	movcc	r9, fp
			minimum = current;
    2e3c:	461f      	movcc	r7, r3
    2e3e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    2e40:	b2d3      	uxtb	r3, r2
    2e42:	42b3      	cmp	r3, r6
    2e44:	d3ee      	bcc.n	2e24 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    2e46:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    2e4a:	b2b6      	uxth	r6, r6
    2e4c:	428e      	cmp	r6, r1
    2e4e:	d23f      	bcs.n	2ed0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    2e50:	f85a 3000 	ldr.w	r3, [sl, r0]
    2e54:	440c      	add	r4, r1
    2e56:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    2e5a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    2e5c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    2e60:	f89c 3004 	ldrb.w	r3, [ip, #4]
    2e64:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    2e68:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    2e6c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    2e70:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    2e72:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    2e76:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    2e78:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    2e7a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    2e7c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    2e80:	b29b      	uxth	r3, r3
    2e82:	408b      	lsls	r3, r1
    2e84:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    2e86:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    2e8a:	1b92      	subs	r2, r2, r6
    2e8c:	2a00      	cmp	r2, #0
    2e8e:	bfb8      	it	lt
    2e90:	4252      	neglt	r2, r2
    2e92:	2601      	movs	r6, #1
    2e94:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    2e98:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    2e9c:	42be      	cmp	r6, r7
    2e9e:	d020      	beq.n	2ee2 <grid_ain_add_sample+0xea>
    2ea0:	4282      	cmp	r2, r0
    2ea2:	dc08      	bgt.n	2eb6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    2ea4:	2201      	movs	r2, #1
    2ea6:	fa02 f505 	lsl.w	r5, r2, r5
    2eaa:	fa02 f101 	lsl.w	r1, r2, r1
    2eae:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    2eb0:	428f      	cmp	r7, r1
    2eb2:	d000      	beq.n	2eb6 <grid_ain_add_sample+0xbe>
    2eb4:	b9c7      	cbnz	r7, 2ee8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    2eb6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    2eba:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    2ebe:	2001      	movs	r0, #1
    2ec0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    2ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    2ec8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    2eca:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    2ecc:	2400      	movs	r4, #0
    2ece:	e7ba      	b.n	2e46 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    2ed0:	f85a 3000 	ldr.w	r3, [sl, r0]
    2ed4:	440c      	add	r4, r1
    2ed6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    2eda:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    2edc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    2ee0:	e7be      	b.n	2e60 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    2ee2:	2000      	movs	r0, #0
    2ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ee8:	2000      	movs	r0, #0
	}
	
}
    2eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2eee:	bf00      	nop
    2ef0:	20000560 	.word	0x20000560

00002ef4 <convert_cb_ADC_1>:
	{
    2ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ef8:	b082      	sub	sp, #8
		ADC_1_conversion_ready = 1;
    2efa:	2201      	movs	r2, #1
    2efc:	4b2b      	ldr	r3, [pc, #172]	; (2fac <convert_cb_ADC_1+0xb8>)
    2efe:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		while(ADC_0_conversion_ready==0){}
    2f02:	461a      	mov	r2, r3
    2f04:	7813      	ldrb	r3, [r2, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d0fc      	beq.n	2f04 <convert_cb_ADC_1+0x10>
		while(ADC_1_conversion_ready==0){}
    2f0a:	4a28      	ldr	r2, [pc, #160]	; (2fac <convert_cb_ADC_1+0xb8>)
    2f0c:	f892 3420 	ldrb.w	r3, [r2, #1056]	; 0x420
    2f10:	2b00      	cmp	r3, #0
    2f12:	d0fb      	beq.n	2f0c <convert_cb_ADC_1+0x18>
		uint16_t adcresult_0 = 0;
    2f14:	2400      	movs	r4, #0
    2f16:	aa02      	add	r2, sp, #8
    2f18:	f822 4d02 	strh.w	r4, [r2, #-2]!
		adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2f1c:	2302      	movs	r3, #2
    2f1e:	4621      	mov	r1, r4
    2f20:	4823      	ldr	r0, [pc, #140]	; (2fb0 <convert_cb_ADC_1+0xbc>)
    2f22:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2fc8 <convert_cb_ADC_1+0xd4>
    2f26:	47c0      	blx	r8
		grid_ain_add_sample(grid_module_mux_lookup[grid_module_mux+8], adcresult_0);
    2f28:	4f22      	ldr	r7, [pc, #136]	; (2fb4 <convert_cb_ADC_1+0xc0>)
    2f2a:	4d20      	ldr	r5, [pc, #128]	; (2fac <convert_cb_ADC_1+0xb8>)
    2f2c:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    2f30:	443b      	add	r3, r7
    2f32:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2f36:	7a18      	ldrb	r0, [r3, #8]
    2f38:	4e1f      	ldr	r6, [pc, #124]	; (2fb8 <convert_cb_ADC_1+0xc4>)
    2f3a:	47b0      	blx	r6
		uint16_t adcresult_1 = 0;
    2f3c:	aa02      	add	r2, sp, #8
    2f3e:	f822 4d04 	strh.w	r4, [r2, #-4]!
		adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2f42:	2302      	movs	r3, #2
    2f44:	4621      	mov	r1, r4
    2f46:	481d      	ldr	r0, [pc, #116]	; (2fbc <convert_cb_ADC_1+0xc8>)
    2f48:	47c0      	blx	r8
		grid_ain_add_sample(grid_module_mux_lookup[grid_module_mux+0], adcresult_1);
    2f4a:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    2f4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f52:	5cf8      	ldrb	r0, [r7, r3]
    2f54:	47b0      	blx	r6
		if (grid_module_mux == 0){
    2f56:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    2f5a:	b9eb      	cbnz	r3, 2f98 <convert_cb_ADC_1+0xa4>
			grid_module_mux = 1;
    2f5c:	2201      	movs	r2, #1
    2f5e:	f885 2421 	strb.w	r2, [r5, #1057]	; 0x421
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2f66:	4b16      	ldr	r3, [pc, #88]	; (2fc0 <convert_cb_ADC_1+0xcc>)
    2f68:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2f70:	4b13      	ldr	r3, [pc, #76]	; (2fc0 <convert_cb_ADC_1+0xcc>)
    2f72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    2f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2f7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ADC_0_conversion_ready = 0;	
    2f7e:	4b0b      	ldr	r3, [pc, #44]	; (2fac <convert_cb_ADC_1+0xb8>)
    2f80:	2200      	movs	r2, #0
    2f82:	701a      	strb	r2, [r3, #0]
		ADC_1_conversion_ready = 0;
    2f84:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		adc_async_start_conversion(&ADC_0);			
    2f88:	4809      	ldr	r0, [pc, #36]	; (2fb0 <convert_cb_ADC_1+0xbc>)
    2f8a:	4c0e      	ldr	r4, [pc, #56]	; (2fc4 <convert_cb_ADC_1+0xd0>)
    2f8c:	47a0      	blx	r4
		adc_async_start_conversion(&ADC_1);
    2f8e:	480b      	ldr	r0, [pc, #44]	; (2fbc <convert_cb_ADC_1+0xc8>)
    2f90:	47a0      	blx	r4
	}
    2f92:	b002      	add	sp, #8
    2f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_module_mux = 0;
    2f98:	2200      	movs	r2, #0
    2f9a:	4b04      	ldr	r3, [pc, #16]	; (2fac <convert_cb_ADC_1+0xb8>)
    2f9c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    2fa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2fa4:	4b06      	ldr	r3, [pc, #24]	; (2fc0 <convert_cb_ADC_1+0xcc>)
    2fa6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    2faa:	e7df      	b.n	2f6c <convert_cb_ADC_1+0x78>
    2fac:	20000560 	.word	0x20000560
    2fb0:	20000a5c 	.word	0x20000a5c
    2fb4:	00003f7c 	.word	0x00003f7c
    2fb8:	00002df9 	.word	0x00002df9
    2fbc:	20000acc 	.word	0x20000acc
    2fc0:	41008000 	.word	0x41008000
    2fc4:	00000bfd 	.word	0x00000bfd
    2fc8:	00000b1d 	.word	0x00000b1d

00002fcc <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    2fcc:	4b03      	ldr	r3, [pc, #12]	; (2fdc <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    2fce:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2fd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    2fd6:	7b00      	ldrb	r0, [r0, #12]
    2fd8:	4770      	bx	lr
    2fda:	bf00      	nop
    2fdc:	20000560 	.word	0x20000560

00002fe0 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    2fe0:	4b04      	ldr	r3, [pc, #16]	; (2ff4 <grid_ain_get_average+0x14>)
    2fe2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2fe6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    2fea:	2300      	movs	r3, #0
    2fec:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    2fee:	8900      	ldrh	r0, [r0, #8]
    2ff0:	4770      	bx	lr
    2ff2:	bf00      	nop
    2ff4:	20000560 	.word	0x20000560

00002ff8 <grid_tel_event_handler>:


// Register that the event happened and provide quick alert
uint8_t grid_tel_event_handler(struct TEL_event_counter* telemetry_event){
	
	if(telemetry_event == NULL) return 1;
    2ff8:	4603      	mov	r3, r0
    2ffa:	b190      	cbz	r0, 3022 <grid_tel_event_handler+0x2a>
	
	
	
	if(telemetry_event->absolute_counter<(uint32_t)(-1)){
    2ffc:	6802      	ldr	r2, [r0, #0]
    2ffe:	f1b2 3fff 	cmp.w	r2, #4294967295
		telemetry_event->absolute_counter++;
    3002:	bf1c      	itt	ne
    3004:	3201      	addne	r2, #1
    3006:	6002      	strne	r2, [r0, #0]
	}
	
	if(telemetry_event->frequency_counter<(uint32_t)(-1)){
    3008:	6842      	ldr	r2, [r0, #4]
    300a:	f1b2 3fff 	cmp.w	r2, #4294967295
		telemetry_event->frequency_counter++;
    300e:	bf1c      	itt	ne
    3010:	3201      	addne	r2, #1
    3012:	6042      	strne	r2, [r0, #4]
	}
	
	// Instant feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    3014:	6840      	ldr	r0, [r0, #4]
    3016:	68db      	ldr	r3, [r3, #12]
	if(telemetry_event == NULL) return 1;
    3018:	4298      	cmp	r0, r3
    301a:	bf94      	ite	ls
    301c:	2000      	movls	r0, #0
    301e:	2001      	movhi	r0, #1
    3020:	4770      	bx	lr
    3022:	2001      	movs	r0, #1
		return 1;
	}
	else{
		return 0;
	}
}  
    3024:	4770      	bx	lr
	...

00003028 <grid_tel_event_register>:


struct TEL_event_counter* grid_tel_event_register(uint32_t frequency_reference, uint32_t frequency_alert){
    3028:	b538      	push	{r3, r4, r5, lr}
    302a:	4604      	mov	r4, r0
    302c:	460d      	mov	r5, r1
	
	struct TEL_event_counter* new_item = (struct TEL_event_counter*) malloc(sizeof(struct TEL_event_counter));
    302e:	2018      	movs	r0, #24
    3030:	4b0c      	ldr	r3, [pc, #48]	; (3064 <grid_tel_event_register+0x3c>)
    3032:	4798      	blx	r3
	if(new_item != NULL){	// malloc successful
    3034:	4601      	mov	r1, r0
    3036:	b190      	cbz	r0, 305e <grid_tel_event_register+0x36>
		
		new_item->next = NULL;
    3038:	2300      	movs	r3, #0
    303a:	6143      	str	r3, [r0, #20]
		
		new_item->absolute_counter = 0;
    303c:	6003      	str	r3, [r0, #0]
		new_item->frequency = 0;
    303e:	6103      	str	r3, [r0, #16]
		new_item->frequency_alert = frequency_alert;
    3040:	60c5      	str	r5, [r0, #12]
		new_item->frequency_counter = 0;
    3042:	6043      	str	r3, [r0, #4]
		new_item->frequency_reference = frequency_reference;
    3044:	6084      	str	r4, [r0, #8]
		
		

		if(grid_tel_event_head == NULL){ //List is empty
    3046:	4b08      	ldr	r3, [pc, #32]	; (3068 <grid_tel_event_register+0x40>)
    3048:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
    304c:	b91a      	cbnz	r2, 3056 <grid_tel_event_register+0x2e>
			grid_tel_event_head = new_item;
    304e:	f8c3 0424 	str.w	r0, [r3, #1060]	; 0x424
    3052:	e004      	b.n	305e <grid_tel_event_register+0x36>
			
			struct TEL_event_counter* current = grid_tel_event_head;
			
			while (current->next != NULL)
			{
				current = current->next;
    3054:	461a      	mov	r2, r3
			while (current->next != NULL)
    3056:	6953      	ldr	r3, [r2, #20]
    3058:	2b00      	cmp	r3, #0
    305a:	d1fb      	bne.n	3054 <grid_tel_event_register+0x2c>
			}
			
			current -> next = new_item;
    305c:	6151      	str	r1, [r2, #20]

	}

	return new_item;

}
    305e:	4608      	mov	r0, r1
    3060:	bd38      	pop	{r3, r4, r5, pc}
    3062:	bf00      	nop
    3064:	000033c1 	.word	0x000033c1
    3068:	20000560 	.word	0x20000560

0000306c <grid_tel_calculate_event_frequency>:


uint8_t grid_tel_calculate_event_frequency(struct TEL_event_counter* telemetry_event){

	// Save valid frequency data
	telemetry_event->frequency = telemetry_event->frequency_counter;
    306c:	6843      	ldr	r3, [r0, #4]
    306e:	6103      	str	r3, [r0, #16]
	
	
	//Update the freq counter variable
	if(telemetry_event->frequency_counter >= telemetry_event->frequency_reference){
    3070:	6882      	ldr	r2, [r0, #8]
    3072:	4293      	cmp	r3, r2
		telemetry_event->frequency_counter -= telemetry_event->frequency_reference;
    3074:	bf2c      	ite	cs
    3076:	1a9b      	subcs	r3, r3, r2
	}else{
		telemetry_event->frequency_counter = 0;
    3078:	2300      	movcc	r3, #0
    307a:	6043      	str	r3, [r0, #4]
	}
	

	// Instant alert feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    307c:	6842      	ldr	r2, [r0, #4]
    307e:	68c0      	ldr	r0, [r0, #12]
		return 1;
	}
	else{
		return 0;
	}	
}
    3080:	4282      	cmp	r2, r0
    3082:	bf94      	ite	ls
    3084:	2000      	movls	r0, #0
    3086:	2001      	movhi	r0, #1
    3088:	4770      	bx	lr
	...

0000308c <grid_tel_frequency_tick>:


void grid_tel_frequency_tick(){
    308c:	b538      	push	{r3, r4, r5, lr}
	
	struct TEL_event_counter* current = grid_tel_event_head;
    308e:	4b05      	ldr	r3, [pc, #20]	; (30a4 <grid_tel_frequency_tick+0x18>)
    3090:	f8d3 4424 	ldr.w	r4, [r3, #1060]	; 0x424
	while(current != NULL){
    3094:	b12c      	cbz	r4, 30a2 <grid_tel_frequency_tick+0x16>
		grid_tel_calculate_event_frequency(current);
    3096:	4d04      	ldr	r5, [pc, #16]	; (30a8 <grid_tel_frequency_tick+0x1c>)
    3098:	4620      	mov	r0, r4
    309a:	47a8      	blx	r5
		current = current->next;
    309c:	6964      	ldr	r4, [r4, #20]
	while(current != NULL){
    309e:	2c00      	cmp	r4, #0
    30a0:	d1fa      	bne.n	3098 <grid_tel_frequency_tick+0xc>
    30a2:	bd38      	pop	{r3, r4, r5, pc}
    30a4:	20000560 	.word	0x20000560
    30a8:	0000306d 	.word	0x0000306d

000030ac <grid_module_init>:
	}


	/* ============================== GRID_MODULE_INIT() ================================ */

	void grid_module_init(void){
    30ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		
						
		// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
		grid_ain_init(grid_module_ain_buffer_size, 3, 14, 10);		
    30ae:	230a      	movs	r3, #10
    30b0:	220e      	movs	r2, #14
    30b2:	2103      	movs	r1, #3
    30b4:	2010      	movs	r0, #16
    30b6:	4c1b      	ldr	r4, [pc, #108]	; (3124 <grid_module_init+0x78>)
    30b8:	47a0      	blx	r4
		grid_led_init(grid_module_led_buffer_size);
    30ba:	2010      	movs	r0, #16
    30bc:	4b1a      	ldr	r3, [pc, #104]	; (3128 <grid_module_init+0x7c>)
    30be:	4798      	blx	r3

		spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    30c0:	4c1a      	ldr	r4, [pc, #104]	; (312c <grid_module_init+0x80>)
    30c2:	491b      	ldr	r1, [pc, #108]	; (3130 <grid_module_init+0x84>)
    30c4:	4620      	mov	r0, r4
    30c6:	4b1b      	ldr	r3, [pc, #108]	; (3134 <grid_module_init+0x88>)
    30c8:	4798      	blx	r3
		spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    30ca:	4a1b      	ldr	r2, [pc, #108]	; (3138 <grid_module_init+0x8c>)
    30cc:	2100      	movs	r1, #0
    30ce:	4620      	mov	r0, r4
    30d0:	4b1a      	ldr	r3, [pc, #104]	; (313c <grid_module_init+0x90>)
    30d2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    30d8:	4b19      	ldr	r3, [pc, #100]	; (3140 <grid_module_init+0x94>)
    30da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		//enable pwr!
		gpio_set_pin_level(UI_PWR_EN, true);

		// ADC SETUP	
	
		adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    30de:	4c19      	ldr	r4, [pc, #100]	; (3144 <grid_module_init+0x98>)
    30e0:	4b19      	ldr	r3, [pc, #100]	; (3148 <grid_module_init+0x9c>)
    30e2:	2200      	movs	r2, #0
    30e4:	4611      	mov	r1, r2
    30e6:	4620      	mov	r0, r4
    30e8:	4f18      	ldr	r7, [pc, #96]	; (314c <grid_module_init+0xa0>)
    30ea:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_0, 0);
    30ec:	2100      	movs	r1, #0
    30ee:	4620      	mov	r0, r4
    30f0:	4e17      	ldr	r6, [pc, #92]	; (3150 <grid_module_init+0xa4>)
    30f2:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_0);
    30f4:	4620      	mov	r0, r4
    30f6:	4d17      	ldr	r5, [pc, #92]	; (3154 <grid_module_init+0xa8>)
    30f8:	47a8      	blx	r5
				
		adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    30fa:	4c17      	ldr	r4, [pc, #92]	; (3158 <grid_module_init+0xac>)
    30fc:	4b17      	ldr	r3, [pc, #92]	; (315c <grid_module_init+0xb0>)
    30fe:	2200      	movs	r2, #0
    3100:	4611      	mov	r1, r2
    3102:	4620      	mov	r0, r4
    3104:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_1, 0);
    3106:	2100      	movs	r1, #0
    3108:	4620      	mov	r0, r4
    310a:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_1);
    310c:	4620      	mov	r0, r4
    310e:	47a8      	blx	r5
	
		//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
		/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
		usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
		usart_async_get_io_descriptor(&GRID_AUX, &io);
    3110:	4c13      	ldr	r4, [pc, #76]	; (3160 <grid_module_init+0xb4>)
    3112:	4914      	ldr	r1, [pc, #80]	; (3164 <grid_module_init+0xb8>)
    3114:	4620      	mov	r0, r4
    3116:	4b14      	ldr	r3, [pc, #80]	; (3168 <grid_module_init+0xbc>)
    3118:	4798      	blx	r3
		usart_async_enable(&GRID_AUX);
    311a:	4620      	mov	r0, r4
    311c:	4b13      	ldr	r3, [pc, #76]	; (316c <grid_module_init+0xc0>)
    311e:	4798      	blx	r3
    3120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3122:	bf00      	nop
    3124:	00002da5 	.word	0x00002da5
    3128:	00002b41 	.word	0x00002b41
    312c:	20000a88 	.word	0x20000a88
    3130:	20000f80 	.word	0x20000f80
    3134:	00000fad 	.word	0x00000fad
    3138:	00002af9 	.word	0x00002af9
    313c:	00000f7d 	.word	0x00000f7d
    3140:	41008000 	.word	0x41008000
    3144:	20000a5c 	.word	0x20000a5c
    3148:	00002aed 	.word	0x00002aed
    314c:	00000a9d 	.word	0x00000a9d
    3150:	00000a5d 	.word	0x00000a5d
    3154:	00000bfd 	.word	0x00000bfd
    3158:	20000acc 	.word	0x20000acc
    315c:	00002ef5 	.word	0x00002ef5
    3160:	20000a0c 	.word	0x20000a0c
    3164:	20000f14 	.word	0x20000f14
    3168:	00001245 	.word	0x00001245
    316c:	00001219 	.word	0x00001219

00003170 <main>:

#include "../../grid_modules/grid_module_p16.c" // Grid Telemetry


int main(void)
{
    3170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3174:	b09b      	sub	sp, #108	; 0x6c
	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
    3176:	4b66      	ldr	r3, [pc, #408]	; (3310 <main+0x1a0>)
    3178:	4798      	blx	r3
	
	grid_module_init();
    317a:	4b66      	ldr	r3, [pc, #408]	; (3314 <main+0x1a4>)
    317c:	4798      	blx	r3
												0x77777777,
												0x88888888,
												0x99999999};


		crc_sync_enable(&CRC_0);
    317e:	4e66      	ldr	r6, [pc, #408]	; (3318 <main+0x1a8>)
    3180:	4630      	mov	r0, r6
    3182:	4b66      	ldr	r3, [pc, #408]	; (331c <main+0x1ac>)
    3184:	4798      	blx	r3

		/* The initial value used for the CRC32 calculation usually be 0xFFFFFFFF,
		 * but can be, for example, the result of a previous CRC32 calculation if
		 * generating a common CRC32 of separate memory blocks.
		 */
		uint32_t crc = 0xFFFFFFFF;
    3186:	f04f 37ff 	mov.w	r7, #4294967295
    318a:	ab1a      	add	r3, sp, #104	; 0x68
    318c:	f843 7d04 	str.w	r7, [r3, #-4]!
		uint32_t crc2;
		uint32_t ind;

		
		crc_sync_crc32(&CRC_0, (uint32_t *)crc_datas, 10, &crc);
    3190:	4d63      	ldr	r5, [pc, #396]	; (3320 <main+0x1b0>)
    3192:	f105 0410 	add.w	r4, r5, #16
    3196:	220a      	movs	r2, #10
    3198:	4621      	mov	r1, r4
    319a:	4630      	mov	r0, r6
    319c:	4e61      	ldr	r6, [pc, #388]	; (3324 <main+0x1b4>)
    319e:	47b0      	blx	r6

		/* The read value must be complemented to match standard CRC32
		 * implementations or kept non-inverted if used as starting point for
		 * subsequent CRC32 calculations.
		 */
		crc ^= 0xFFFFFFFF;
    31a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    31a2:	43db      	mvns	r3, r3
    31a4:	9319      	str	r3, [sp, #100]	; 0x64

		/* Calculate the same data with subsequent CRC32 calculations, the result
		 * should be same as previous way.
		 */
		crc2 = 0xFFFFFFFF;
    31a6:	ae1a      	add	r6, sp, #104	; 0x68
    31a8:	f846 7d08 	str.w	r7, [r6, #-8]!
    31ac:	3538      	adds	r5, #56	; 0x38
		for (ind = 0; ind < 10; ind++) {
			crc_sync_crc32(&CRC_0, (uint32_t *)&crc_datas[ind], 1, &crc2);
    31ae:	f8df 8168 	ldr.w	r8, [pc, #360]	; 3318 <main+0x1a8>
    31b2:	4f5c      	ldr	r7, [pc, #368]	; (3324 <main+0x1b4>)
    31b4:	4633      	mov	r3, r6
    31b6:	2201      	movs	r2, #1
    31b8:	4621      	mov	r1, r4
    31ba:	4640      	mov	r0, r8
    31bc:	47b8      	blx	r7
    31be:	3404      	adds	r4, #4
		for (ind = 0; ind < 10; ind++) {
    31c0:	42ac      	cmp	r4, r5
    31c2:	d1f7      	bne.n	31b4 <main+0x44>
		}
		crc2 ^= 0xFFFFFFFF;
    31c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    31c6:	43d2      	mvns	r2, r2
    31c8:	9218      	str	r2, [sp, #96]	; 0x60

		/* The calculate result should be same. */
		while (crc != crc2);
    31ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    31cc:	429a      	cmp	r2, r3
    31ce:	d1fd      	bne.n	31cc <main+0x5c>


		char str[12];
		sprintf(str, "CRC:%x\n", crc);
    31d0:	4955      	ldr	r1, [pc, #340]	; (3328 <main+0x1b8>)
    31d2:	a815      	add	r0, sp, #84	; 0x54
    31d4:	4b55      	ldr	r3, [pc, #340]	; (332c <main+0x1bc>)
    31d6:	4798      	blx	r3

		//USART
		io_write(io, str, 12);
    31d8:	220c      	movs	r2, #12
    31da:	a915      	add	r1, sp, #84	; 0x54
    31dc:	4b54      	ldr	r3, [pc, #336]	; (3330 <main+0x1c0>)
    31de:	6818      	ldr	r0, [r3, #0]
    31e0:	4b54      	ldr	r3, [pc, #336]	; (3334 <main+0x1c4>)
    31e2:	4798      	blx	r3
	l_buffer[num][layer].color_min.r = r;
    31e4:	4b54      	ldr	r3, [pc, #336]	; (3338 <main+0x1c8>)
    31e6:	2200      	movs	r2, #0
    31e8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	l_buffer[num][layer].color_min.g = g;
    31ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	l_buffer[num][layer].color_min.b = b;	
    31f0:	2130      	movs	r1, #48	; 0x30
    31f2:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
	l_buffer[num][layer].color_mid.r = r;
    31f6:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
	l_buffer[num][layer].color_mid.g = g;
    31fa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	l_buffer[num][layer].color_mid.b = b;	
    31fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	l_buffer[num][layer].color_max.r = r;
    3202:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	l_buffer[num][layer].color_max.g = g;
    3206:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	l_buffer[num][layer].color_max.b = b;	
    320a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	l_buffer[num][layer].fre = val;
    320e:	2204      	movs	r2, #4
    3210:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
			



	// UI RX EVENT fref=5, alert=50;
	struct TEL_event_counter* console_tx = grid_tel_event_register(5, 50);
    3214:	2132      	movs	r1, #50	; 0x32
    3216:	2005      	movs	r0, #5
    3218:	4b48      	ldr	r3, [pc, #288]	; (333c <main+0x1cc>)
    321a:	4798      	blx	r3
	while(console_tx == NULL){/*TRAP*/}	
    321c:	9004      	str	r0, [sp, #16]
    321e:	b928      	cbnz	r0, 322c <main+0xbc>
    3220:	e7fe      	b.n	3220 <main+0xb0>


	while (1) {
		
		if (faketimer == 10){
			grid_tel_frequency_tick();
    3222:	4b47      	ldr	r3, [pc, #284]	; (3340 <main+0x1d0>)
    3224:	4798      	blx	r3
			faketimer = 0;
    3226:	f04f 0a00 	mov.w	sl, #0
    322a:	e064      	b.n	32f6 <main+0x186>
	while(console_tx == NULL){/*TRAP*/}	
    322c:	f04f 0a00 	mov.w	sl, #0
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    3230:	2320      	movs	r3, #32
    3232:	9305      	str	r3, [sp, #20]


			
		/* ========================= ANALOG READ ============================= */
		
		delay_ms(1);
    3234:	f8df 9138 	ldr.w	r9, [pc, #312]	; 3370 <main+0x200>
		
		// RENDER ALL OF THE LEDs
		grid_led_render_all();
			
		// SEND DATA TO LEDs 		
		dma_spi_done = 0;
    3238:	f8df b138 	ldr.w	fp, [pc, #312]	; 3374 <main+0x204>
    323c:	e05b      	b.n	32f6 <main+0x186>
    323e:	3401      	adds	r4, #1
    3240:	351a      	adds	r5, #26
		for (uint8_t i = 0; i<4; i++)
    3242:	2c04      	cmp	r4, #4
    3244:	d037      	beq.n	32b6 <main+0x146>
    3246:	b2e6      	uxtb	r6, r4
			if (grid_ain_get_changed(i)){
    3248:	4630      	mov	r0, r6
    324a:	47b8      	blx	r7
    324c:	2800      	cmp	r0, #0
    324e:	d0f6      	beq.n	323e <main+0xce>
				grid_tel_event_handler(console_tx);
    3250:	9804      	ldr	r0, [sp, #16]
    3252:	4b3c      	ldr	r3, [pc, #240]	; (3344 <main+0x1d4>)
    3254:	4798      	blx	r3
				uint16_t average = grid_ain_get_average(i);
    3256:	4630      	mov	r0, r6
    3258:	4b3b      	ldr	r3, [pc, #236]	; (3348 <main+0x1d8>)
    325a:	4798      	blx	r3
    325c:	4603      	mov	r3, r0
				sprintf(str, "ADC: %5d %5d %5d \n", i, average, average/128);
    325e:	f3c0 1acf 	ubfx	sl, r0, #7, #16
    3262:	f8cd a000 	str.w	sl, [sp]
    3266:	4622      	mov	r2, r4
    3268:	4938      	ldr	r1, [pc, #224]	; (334c <main+0x1dc>)
    326a:	a807      	add	r0, sp, #28
    326c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 332c <main+0x1bc>
    3270:	47c0      	blx	r8
				io_write(io, str, 24);
    3272:	2218      	movs	r2, #24
    3274:	a907      	add	r1, sp, #28
    3276:	4b2e      	ldr	r3, [pc, #184]	; (3330 <main+0x1c0>)
    3278:	6818      	ldr	r0, [r3, #0]
    327a:	4b2e      	ldr	r3, [pc, #184]	; (3334 <main+0x1c4>)
    327c:	4798      	blx	r3
				uint32_t crc = 0xFFFFFFFF;
    327e:	ab1a      	add	r3, sp, #104	; 0x68
    3280:	f04f 32ff 	mov.w	r2, #4294967295
    3284:	f843 2d50 	str.w	r2, [r3, #-80]!
 				crc_sync_crc32(&CRC_0, (uint32_t *)str, 5, &crc);
    3288:	2205      	movs	r2, #5
    328a:	a907      	add	r1, sp, #28
    328c:	4822      	ldr	r0, [pc, #136]	; (3318 <main+0x1a8>)
    328e:	4e25      	ldr	r6, [pc, #148]	; (3324 <main+0x1b4>)
    3290:	47b0      	blx	r6
 				crc ^= 0xFFFFFFFF;
    3292:	9b06      	ldr	r3, [sp, #24]
    3294:	43db      	mvns	r3, r3
    3296:	9306      	str	r3, [sp, #24]
				delay_ms(5);
    3298:	2005      	movs	r0, #5
    329a:	47c8      	blx	r9
				sprintf(str2, "CRC: %x \n", crc);
    329c:	9a06      	ldr	r2, [sp, #24]
    329e:	492c      	ldr	r1, [pc, #176]	; (3350 <main+0x1e0>)
    32a0:	a80e      	add	r0, sp, #56	; 0x38
    32a2:	47c0      	blx	r8
				io_write(io, str2, 20);
    32a4:	2214      	movs	r2, #20
    32a6:	a90e      	add	r1, sp, #56	; 0x38
    32a8:	4b21      	ldr	r3, [pc, #132]	; (3330 <main+0x1c0>)
    32aa:	6818      	ldr	r0, [r3, #0]
    32ac:	4b21      	ldr	r3, [pc, #132]	; (3334 <main+0x1c4>)
    32ae:	4798      	blx	r3
				grid_led_set_phase(i, 0, average/8/4/4);
    32b0:	f885 a00b 	strb.w	sl, [r5, #11]
    32b4:	e7c3      	b.n	323e <main+0xce>
    32b6:	f8dd a00c 	ldr.w	sl, [sp, #12]
    32ba:	4b26      	ldr	r3, [pc, #152]	; (3354 <main+0x1e4>)
    32bc:	2220      	movs	r2, #32
    32be:	61da      	str	r2, [r3, #28]
		delay_ms(1);
    32c0:	2001      	movs	r0, #1
    32c2:	47c8      	blx	r9
		grid_led_tick();
    32c4:	4b24      	ldr	r3, [pc, #144]	; (3358 <main+0x1e8>)
    32c6:	4798      	blx	r3
		grid_led_render_all();
    32c8:	4b24      	ldr	r3, [pc, #144]	; (335c <main+0x1ec>)
    32ca:	4798      	blx	r3
		dma_spi_done = 0;
    32cc:	2300      	movs	r3, #0
    32ce:	f8cb 3004 	str.w	r3, [fp, #4]
		spi_m_dma_enable(&GRID_LED);
    32d2:	4823      	ldr	r0, [pc, #140]	; (3360 <main+0x1f0>)
    32d4:	4b23      	ldr	r3, [pc, #140]	; (3364 <main+0x1f4>)
    32d6:	4798      	blx	r3
		
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    32d8:	f89b 200c 	ldrb.w	r2, [fp, #12]
    32dc:	f8db 1008 	ldr.w	r1, [fp, #8]
    32e0:	4b21      	ldr	r3, [pc, #132]	; (3368 <main+0x1f8>)
    32e2:	6818      	ldr	r0, [r3, #0]
    32e4:	4b13      	ldr	r3, [pc, #76]	; (3334 <main+0x1c4>)
    32e6:	4798      	blx	r3
		
 		while (dma_spi_done == 0)
    32e8:	f8db 3004 	ldr.w	r3, [fp, #4]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d0fb      	beq.n	32e8 <main+0x178>
		if (faketimer == 10){
    32f0:	f1ba 0f0a 	cmp.w	sl, #10
    32f4:	d095      	beq.n	3222 <main+0xb2>
		faketimer++;
    32f6:	f10a 0a01 	add.w	sl, sl, #1
    32fa:	4b16      	ldr	r3, [pc, #88]	; (3354 <main+0x1e4>)
    32fc:	9a05      	ldr	r2, [sp, #20]
    32fe:	61da      	str	r2, [r3, #28]
		delay_ms(1);
    3300:	2001      	movs	r0, #1
    3302:	47c8      	blx	r9
    3304:	4d0c      	ldr	r5, [pc, #48]	; (3338 <main+0x1c8>)
    3306:	2400      	movs	r4, #0
			if (grid_ain_get_changed(i)){
    3308:	4f18      	ldr	r7, [pc, #96]	; (336c <main+0x1fc>)
				uint16_t average = grid_ain_get_average(i);
    330a:	f8cd a00c 	str.w	sl, [sp, #12]
    330e:	e79a      	b.n	3246 <main+0xd6>
    3310:	000002d1 	.word	0x000002d1
    3314:	000030ad 	.word	0x000030ad
    3318:	200009b0 	.word	0x200009b0
    331c:	00000c71 	.word	0x00000c71
    3320:	00003f7c 	.word	0x00003f7c
    3324:	00000c99 	.word	0x00000c99
    3328:	00003fb8 	.word	0x00003fb8
    332c:	00003561 	.word	0x00003561
    3330:	20000f14 	.word	0x20000f14
    3334:	00000e71 	.word	0x00000e71
    3338:	20000f18 	.word	0x20000f18
    333c:	00003029 	.word	0x00003029
    3340:	0000308d 	.word	0x0000308d
    3344:	00002ff9 	.word	0x00002ff9
    3348:	00002fe1 	.word	0x00002fe1
    334c:	00003fc0 	.word	0x00003fc0
    3350:	00003fd4 	.word	0x00003fd4
    3354:	41008000 	.word	0x41008000
    3358:	00002c75 	.word	0x00002c75
    335c:	00002d49 	.word	0x00002d49
    3360:	20000a88 	.word	0x20000a88
    3364:	00000f55 	.word	0x00000f55
    3368:	20000f80 	.word	0x20000f80
    336c:	00002fcd 	.word	0x00002fcd
    3370:	00000cf1 	.word	0x00000cf1
    3374:	20000560 	.word	0x20000560

00003378 <__libc_init_array>:
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	4e0d      	ldr	r6, [pc, #52]	; (33b0 <__libc_init_array+0x38>)
    337c:	4c0d      	ldr	r4, [pc, #52]	; (33b4 <__libc_init_array+0x3c>)
    337e:	1ba4      	subs	r4, r4, r6
    3380:	10a4      	asrs	r4, r4, #2
    3382:	2500      	movs	r5, #0
    3384:	42a5      	cmp	r5, r4
    3386:	d109      	bne.n	339c <__libc_init_array+0x24>
    3388:	4e0b      	ldr	r6, [pc, #44]	; (33b8 <__libc_init_array+0x40>)
    338a:	4c0c      	ldr	r4, [pc, #48]	; (33bc <__libc_init_array+0x44>)
    338c:	f000 fe72 	bl	4074 <_init>
    3390:	1ba4      	subs	r4, r4, r6
    3392:	10a4      	asrs	r4, r4, #2
    3394:	2500      	movs	r5, #0
    3396:	42a5      	cmp	r5, r4
    3398:	d105      	bne.n	33a6 <__libc_init_array+0x2e>
    339a:	bd70      	pop	{r4, r5, r6, pc}
    339c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    33a0:	4798      	blx	r3
    33a2:	3501      	adds	r5, #1
    33a4:	e7ee      	b.n	3384 <__libc_init_array+0xc>
    33a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    33aa:	4798      	blx	r3
    33ac:	3501      	adds	r5, #1
    33ae:	e7f2      	b.n	3396 <__libc_init_array+0x1e>
    33b0:	00004080 	.word	0x00004080
    33b4:	00004080 	.word	0x00004080
    33b8:	00004080 	.word	0x00004080
    33bc:	00004084 	.word	0x00004084

000033c0 <malloc>:
    33c0:	4b02      	ldr	r3, [pc, #8]	; (33cc <malloc+0xc>)
    33c2:	4601      	mov	r1, r0
    33c4:	6818      	ldr	r0, [r3, #0]
    33c6:	f000 b85d 	b.w	3484 <_malloc_r>
    33ca:	bf00      	nop
    33cc:	20000304 	.word	0x20000304

000033d0 <memcpy>:
    33d0:	b510      	push	{r4, lr}
    33d2:	1e43      	subs	r3, r0, #1
    33d4:	440a      	add	r2, r1
    33d6:	4291      	cmp	r1, r2
    33d8:	d100      	bne.n	33dc <memcpy+0xc>
    33da:	bd10      	pop	{r4, pc}
    33dc:	f811 4b01 	ldrb.w	r4, [r1], #1
    33e0:	f803 4f01 	strb.w	r4, [r3, #1]!
    33e4:	e7f7      	b.n	33d6 <memcpy+0x6>
	...

000033e8 <_free_r>:
    33e8:	b538      	push	{r3, r4, r5, lr}
    33ea:	4605      	mov	r5, r0
    33ec:	2900      	cmp	r1, #0
    33ee:	d045      	beq.n	347c <_free_r+0x94>
    33f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    33f4:	1f0c      	subs	r4, r1, #4
    33f6:	2b00      	cmp	r3, #0
    33f8:	bfb8      	it	lt
    33fa:	18e4      	addlt	r4, r4, r3
    33fc:	f000 f8d4 	bl	35a8 <__malloc_lock>
    3400:	4a1f      	ldr	r2, [pc, #124]	; (3480 <_free_r+0x98>)
    3402:	6813      	ldr	r3, [r2, #0]
    3404:	4610      	mov	r0, r2
    3406:	b933      	cbnz	r3, 3416 <_free_r+0x2e>
    3408:	6063      	str	r3, [r4, #4]
    340a:	6014      	str	r4, [r2, #0]
    340c:	4628      	mov	r0, r5
    340e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3412:	f000 b8ca 	b.w	35aa <__malloc_unlock>
    3416:	42a3      	cmp	r3, r4
    3418:	d90c      	bls.n	3434 <_free_r+0x4c>
    341a:	6821      	ldr	r1, [r4, #0]
    341c:	1862      	adds	r2, r4, r1
    341e:	4293      	cmp	r3, r2
    3420:	bf04      	itt	eq
    3422:	681a      	ldreq	r2, [r3, #0]
    3424:	685b      	ldreq	r3, [r3, #4]
    3426:	6063      	str	r3, [r4, #4]
    3428:	bf04      	itt	eq
    342a:	1852      	addeq	r2, r2, r1
    342c:	6022      	streq	r2, [r4, #0]
    342e:	6004      	str	r4, [r0, #0]
    3430:	e7ec      	b.n	340c <_free_r+0x24>
    3432:	4613      	mov	r3, r2
    3434:	685a      	ldr	r2, [r3, #4]
    3436:	b10a      	cbz	r2, 343c <_free_r+0x54>
    3438:	42a2      	cmp	r2, r4
    343a:	d9fa      	bls.n	3432 <_free_r+0x4a>
    343c:	6819      	ldr	r1, [r3, #0]
    343e:	1858      	adds	r0, r3, r1
    3440:	42a0      	cmp	r0, r4
    3442:	d10b      	bne.n	345c <_free_r+0x74>
    3444:	6820      	ldr	r0, [r4, #0]
    3446:	4401      	add	r1, r0
    3448:	1858      	adds	r0, r3, r1
    344a:	4282      	cmp	r2, r0
    344c:	6019      	str	r1, [r3, #0]
    344e:	d1dd      	bne.n	340c <_free_r+0x24>
    3450:	6810      	ldr	r0, [r2, #0]
    3452:	6852      	ldr	r2, [r2, #4]
    3454:	605a      	str	r2, [r3, #4]
    3456:	4401      	add	r1, r0
    3458:	6019      	str	r1, [r3, #0]
    345a:	e7d7      	b.n	340c <_free_r+0x24>
    345c:	d902      	bls.n	3464 <_free_r+0x7c>
    345e:	230c      	movs	r3, #12
    3460:	602b      	str	r3, [r5, #0]
    3462:	e7d3      	b.n	340c <_free_r+0x24>
    3464:	6820      	ldr	r0, [r4, #0]
    3466:	1821      	adds	r1, r4, r0
    3468:	428a      	cmp	r2, r1
    346a:	bf04      	itt	eq
    346c:	6811      	ldreq	r1, [r2, #0]
    346e:	6852      	ldreq	r2, [r2, #4]
    3470:	6062      	str	r2, [r4, #4]
    3472:	bf04      	itt	eq
    3474:	1809      	addeq	r1, r1, r0
    3476:	6021      	streq	r1, [r4, #0]
    3478:	605c      	str	r4, [r3, #4]
    347a:	e7c7      	b.n	340c <_free_r+0x24>
    347c:	bd38      	pop	{r3, r4, r5, pc}
    347e:	bf00      	nop
    3480:	2000098c 	.word	0x2000098c

00003484 <_malloc_r>:
    3484:	b570      	push	{r4, r5, r6, lr}
    3486:	1ccd      	adds	r5, r1, #3
    3488:	f025 0503 	bic.w	r5, r5, #3
    348c:	3508      	adds	r5, #8
    348e:	2d0c      	cmp	r5, #12
    3490:	bf38      	it	cc
    3492:	250c      	movcc	r5, #12
    3494:	2d00      	cmp	r5, #0
    3496:	4606      	mov	r6, r0
    3498:	db01      	blt.n	349e <_malloc_r+0x1a>
    349a:	42a9      	cmp	r1, r5
    349c:	d903      	bls.n	34a6 <_malloc_r+0x22>
    349e:	230c      	movs	r3, #12
    34a0:	6033      	str	r3, [r6, #0]
    34a2:	2000      	movs	r0, #0
    34a4:	bd70      	pop	{r4, r5, r6, pc}
    34a6:	f000 f87f 	bl	35a8 <__malloc_lock>
    34aa:	4a23      	ldr	r2, [pc, #140]	; (3538 <_malloc_r+0xb4>)
    34ac:	6814      	ldr	r4, [r2, #0]
    34ae:	4621      	mov	r1, r4
    34b0:	b991      	cbnz	r1, 34d8 <_malloc_r+0x54>
    34b2:	4c22      	ldr	r4, [pc, #136]	; (353c <_malloc_r+0xb8>)
    34b4:	6823      	ldr	r3, [r4, #0]
    34b6:	b91b      	cbnz	r3, 34c0 <_malloc_r+0x3c>
    34b8:	4630      	mov	r0, r6
    34ba:	f000 f841 	bl	3540 <_sbrk_r>
    34be:	6020      	str	r0, [r4, #0]
    34c0:	4629      	mov	r1, r5
    34c2:	4630      	mov	r0, r6
    34c4:	f000 f83c 	bl	3540 <_sbrk_r>
    34c8:	1c43      	adds	r3, r0, #1
    34ca:	d126      	bne.n	351a <_malloc_r+0x96>
    34cc:	230c      	movs	r3, #12
    34ce:	6033      	str	r3, [r6, #0]
    34d0:	4630      	mov	r0, r6
    34d2:	f000 f86a 	bl	35aa <__malloc_unlock>
    34d6:	e7e4      	b.n	34a2 <_malloc_r+0x1e>
    34d8:	680b      	ldr	r3, [r1, #0]
    34da:	1b5b      	subs	r3, r3, r5
    34dc:	d41a      	bmi.n	3514 <_malloc_r+0x90>
    34de:	2b0b      	cmp	r3, #11
    34e0:	d90f      	bls.n	3502 <_malloc_r+0x7e>
    34e2:	600b      	str	r3, [r1, #0]
    34e4:	50cd      	str	r5, [r1, r3]
    34e6:	18cc      	adds	r4, r1, r3
    34e8:	4630      	mov	r0, r6
    34ea:	f000 f85e 	bl	35aa <__malloc_unlock>
    34ee:	f104 000b 	add.w	r0, r4, #11
    34f2:	1d23      	adds	r3, r4, #4
    34f4:	f020 0007 	bic.w	r0, r0, #7
    34f8:	1ac3      	subs	r3, r0, r3
    34fa:	d01b      	beq.n	3534 <_malloc_r+0xb0>
    34fc:	425a      	negs	r2, r3
    34fe:	50e2      	str	r2, [r4, r3]
    3500:	bd70      	pop	{r4, r5, r6, pc}
    3502:	428c      	cmp	r4, r1
    3504:	bf0d      	iteet	eq
    3506:	6863      	ldreq	r3, [r4, #4]
    3508:	684b      	ldrne	r3, [r1, #4]
    350a:	6063      	strne	r3, [r4, #4]
    350c:	6013      	streq	r3, [r2, #0]
    350e:	bf18      	it	ne
    3510:	460c      	movne	r4, r1
    3512:	e7e9      	b.n	34e8 <_malloc_r+0x64>
    3514:	460c      	mov	r4, r1
    3516:	6849      	ldr	r1, [r1, #4]
    3518:	e7ca      	b.n	34b0 <_malloc_r+0x2c>
    351a:	1cc4      	adds	r4, r0, #3
    351c:	f024 0403 	bic.w	r4, r4, #3
    3520:	42a0      	cmp	r0, r4
    3522:	d005      	beq.n	3530 <_malloc_r+0xac>
    3524:	1a21      	subs	r1, r4, r0
    3526:	4630      	mov	r0, r6
    3528:	f000 f80a 	bl	3540 <_sbrk_r>
    352c:	3001      	adds	r0, #1
    352e:	d0cd      	beq.n	34cc <_malloc_r+0x48>
    3530:	6025      	str	r5, [r4, #0]
    3532:	e7d9      	b.n	34e8 <_malloc_r+0x64>
    3534:	bd70      	pop	{r4, r5, r6, pc}
    3536:	bf00      	nop
    3538:	2000098c 	.word	0x2000098c
    353c:	20000990 	.word	0x20000990

00003540 <_sbrk_r>:
    3540:	b538      	push	{r3, r4, r5, lr}
    3542:	4c06      	ldr	r4, [pc, #24]	; (355c <_sbrk_r+0x1c>)
    3544:	2300      	movs	r3, #0
    3546:	4605      	mov	r5, r0
    3548:	4608      	mov	r0, r1
    354a:	6023      	str	r3, [r4, #0]
    354c:	f7fd ff0e 	bl	136c <_sbrk>
    3550:	1c43      	adds	r3, r0, #1
    3552:	d102      	bne.n	355a <_sbrk_r+0x1a>
    3554:	6823      	ldr	r3, [r4, #0]
    3556:	b103      	cbz	r3, 355a <_sbrk_r+0x1a>
    3558:	602b      	str	r3, [r5, #0]
    355a:	bd38      	pop	{r3, r4, r5, pc}
    355c:	20000f84 	.word	0x20000f84

00003560 <siprintf>:
    3560:	b40e      	push	{r1, r2, r3}
    3562:	b500      	push	{lr}
    3564:	b09c      	sub	sp, #112	; 0x70
    3566:	f44f 7102 	mov.w	r1, #520	; 0x208
    356a:	ab1d      	add	r3, sp, #116	; 0x74
    356c:	f8ad 1014 	strh.w	r1, [sp, #20]
    3570:	9002      	str	r0, [sp, #8]
    3572:	9006      	str	r0, [sp, #24]
    3574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3578:	480a      	ldr	r0, [pc, #40]	; (35a4 <siprintf+0x44>)
    357a:	9104      	str	r1, [sp, #16]
    357c:	9107      	str	r1, [sp, #28]
    357e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3582:	f853 2b04 	ldr.w	r2, [r3], #4
    3586:	f8ad 1016 	strh.w	r1, [sp, #22]
    358a:	6800      	ldr	r0, [r0, #0]
    358c:	9301      	str	r3, [sp, #4]
    358e:	a902      	add	r1, sp, #8
    3590:	f000 f868 	bl	3664 <_svfiprintf_r>
    3594:	9b02      	ldr	r3, [sp, #8]
    3596:	2200      	movs	r2, #0
    3598:	701a      	strb	r2, [r3, #0]
    359a:	b01c      	add	sp, #112	; 0x70
    359c:	f85d eb04 	ldr.w	lr, [sp], #4
    35a0:	b003      	add	sp, #12
    35a2:	4770      	bx	lr
    35a4:	20000304 	.word	0x20000304

000035a8 <__malloc_lock>:
    35a8:	4770      	bx	lr

000035aa <__malloc_unlock>:
    35aa:	4770      	bx	lr

000035ac <__ssputs_r>:
    35ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35b0:	688e      	ldr	r6, [r1, #8]
    35b2:	429e      	cmp	r6, r3
    35b4:	4682      	mov	sl, r0
    35b6:	460c      	mov	r4, r1
    35b8:	4691      	mov	r9, r2
    35ba:	4698      	mov	r8, r3
    35bc:	d835      	bhi.n	362a <__ssputs_r+0x7e>
    35be:	898a      	ldrh	r2, [r1, #12]
    35c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    35c4:	d031      	beq.n	362a <__ssputs_r+0x7e>
    35c6:	6825      	ldr	r5, [r4, #0]
    35c8:	6909      	ldr	r1, [r1, #16]
    35ca:	1a6f      	subs	r7, r5, r1
    35cc:	6965      	ldr	r5, [r4, #20]
    35ce:	2302      	movs	r3, #2
    35d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    35d4:	fb95 f5f3 	sdiv	r5, r5, r3
    35d8:	f108 0301 	add.w	r3, r8, #1
    35dc:	443b      	add	r3, r7
    35de:	429d      	cmp	r5, r3
    35e0:	bf38      	it	cc
    35e2:	461d      	movcc	r5, r3
    35e4:	0553      	lsls	r3, r2, #21
    35e6:	d531      	bpl.n	364c <__ssputs_r+0xa0>
    35e8:	4629      	mov	r1, r5
    35ea:	f7ff ff4b 	bl	3484 <_malloc_r>
    35ee:	4606      	mov	r6, r0
    35f0:	b950      	cbnz	r0, 3608 <__ssputs_r+0x5c>
    35f2:	230c      	movs	r3, #12
    35f4:	f8ca 3000 	str.w	r3, [sl]
    35f8:	89a3      	ldrh	r3, [r4, #12]
    35fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    35fe:	81a3      	strh	r3, [r4, #12]
    3600:	f04f 30ff 	mov.w	r0, #4294967295
    3604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3608:	463a      	mov	r2, r7
    360a:	6921      	ldr	r1, [r4, #16]
    360c:	f7ff fee0 	bl	33d0 <memcpy>
    3610:	89a3      	ldrh	r3, [r4, #12]
    3612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    3616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    361a:	81a3      	strh	r3, [r4, #12]
    361c:	6126      	str	r6, [r4, #16]
    361e:	6165      	str	r5, [r4, #20]
    3620:	443e      	add	r6, r7
    3622:	1bed      	subs	r5, r5, r7
    3624:	6026      	str	r6, [r4, #0]
    3626:	60a5      	str	r5, [r4, #8]
    3628:	4646      	mov	r6, r8
    362a:	4546      	cmp	r6, r8
    362c:	bf28      	it	cs
    362e:	4646      	movcs	r6, r8
    3630:	4632      	mov	r2, r6
    3632:	4649      	mov	r1, r9
    3634:	6820      	ldr	r0, [r4, #0]
    3636:	f000 faf3 	bl	3c20 <memmove>
    363a:	68a3      	ldr	r3, [r4, #8]
    363c:	1b9b      	subs	r3, r3, r6
    363e:	60a3      	str	r3, [r4, #8]
    3640:	6823      	ldr	r3, [r4, #0]
    3642:	441e      	add	r6, r3
    3644:	6026      	str	r6, [r4, #0]
    3646:	2000      	movs	r0, #0
    3648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    364c:	462a      	mov	r2, r5
    364e:	f000 fb01 	bl	3c54 <_realloc_r>
    3652:	4606      	mov	r6, r0
    3654:	2800      	cmp	r0, #0
    3656:	d1e1      	bne.n	361c <__ssputs_r+0x70>
    3658:	6921      	ldr	r1, [r4, #16]
    365a:	4650      	mov	r0, sl
    365c:	f7ff fec4 	bl	33e8 <_free_r>
    3660:	e7c7      	b.n	35f2 <__ssputs_r+0x46>
	...

00003664 <_svfiprintf_r>:
    3664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3668:	b09d      	sub	sp, #116	; 0x74
    366a:	4680      	mov	r8, r0
    366c:	9303      	str	r3, [sp, #12]
    366e:	898b      	ldrh	r3, [r1, #12]
    3670:	061c      	lsls	r4, r3, #24
    3672:	460d      	mov	r5, r1
    3674:	4616      	mov	r6, r2
    3676:	d50f      	bpl.n	3698 <_svfiprintf_r+0x34>
    3678:	690b      	ldr	r3, [r1, #16]
    367a:	b96b      	cbnz	r3, 3698 <_svfiprintf_r+0x34>
    367c:	2140      	movs	r1, #64	; 0x40
    367e:	f7ff ff01 	bl	3484 <_malloc_r>
    3682:	6028      	str	r0, [r5, #0]
    3684:	6128      	str	r0, [r5, #16]
    3686:	b928      	cbnz	r0, 3694 <_svfiprintf_r+0x30>
    3688:	230c      	movs	r3, #12
    368a:	f8c8 3000 	str.w	r3, [r8]
    368e:	f04f 30ff 	mov.w	r0, #4294967295
    3692:	e0c5      	b.n	3820 <_svfiprintf_r+0x1bc>
    3694:	2340      	movs	r3, #64	; 0x40
    3696:	616b      	str	r3, [r5, #20]
    3698:	2300      	movs	r3, #0
    369a:	9309      	str	r3, [sp, #36]	; 0x24
    369c:	2320      	movs	r3, #32
    369e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    36a2:	2330      	movs	r3, #48	; 0x30
    36a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    36a8:	f04f 0b01 	mov.w	fp, #1
    36ac:	4637      	mov	r7, r6
    36ae:	463c      	mov	r4, r7
    36b0:	f814 3b01 	ldrb.w	r3, [r4], #1
    36b4:	2b00      	cmp	r3, #0
    36b6:	d13c      	bne.n	3732 <_svfiprintf_r+0xce>
    36b8:	ebb7 0a06 	subs.w	sl, r7, r6
    36bc:	d00b      	beq.n	36d6 <_svfiprintf_r+0x72>
    36be:	4653      	mov	r3, sl
    36c0:	4632      	mov	r2, r6
    36c2:	4629      	mov	r1, r5
    36c4:	4640      	mov	r0, r8
    36c6:	f7ff ff71 	bl	35ac <__ssputs_r>
    36ca:	3001      	adds	r0, #1
    36cc:	f000 80a3 	beq.w	3816 <_svfiprintf_r+0x1b2>
    36d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36d2:	4453      	add	r3, sl
    36d4:	9309      	str	r3, [sp, #36]	; 0x24
    36d6:	783b      	ldrb	r3, [r7, #0]
    36d8:	2b00      	cmp	r3, #0
    36da:	f000 809c 	beq.w	3816 <_svfiprintf_r+0x1b2>
    36de:	2300      	movs	r3, #0
    36e0:	f04f 32ff 	mov.w	r2, #4294967295
    36e4:	9304      	str	r3, [sp, #16]
    36e6:	9307      	str	r3, [sp, #28]
    36e8:	9205      	str	r2, [sp, #20]
    36ea:	9306      	str	r3, [sp, #24]
    36ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    36f0:	931a      	str	r3, [sp, #104]	; 0x68
    36f2:	2205      	movs	r2, #5
    36f4:	7821      	ldrb	r1, [r4, #0]
    36f6:	4850      	ldr	r0, [pc, #320]	; (3838 <_svfiprintf_r+0x1d4>)
    36f8:	f000 fa42 	bl	3b80 <memchr>
    36fc:	1c67      	adds	r7, r4, #1
    36fe:	9b04      	ldr	r3, [sp, #16]
    3700:	b9d8      	cbnz	r0, 373a <_svfiprintf_r+0xd6>
    3702:	06d9      	lsls	r1, r3, #27
    3704:	bf44      	itt	mi
    3706:	2220      	movmi	r2, #32
    3708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    370c:	071a      	lsls	r2, r3, #28
    370e:	bf44      	itt	mi
    3710:	222b      	movmi	r2, #43	; 0x2b
    3712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3716:	7822      	ldrb	r2, [r4, #0]
    3718:	2a2a      	cmp	r2, #42	; 0x2a
    371a:	d016      	beq.n	374a <_svfiprintf_r+0xe6>
    371c:	9a07      	ldr	r2, [sp, #28]
    371e:	2100      	movs	r1, #0
    3720:	200a      	movs	r0, #10
    3722:	4627      	mov	r7, r4
    3724:	3401      	adds	r4, #1
    3726:	783b      	ldrb	r3, [r7, #0]
    3728:	3b30      	subs	r3, #48	; 0x30
    372a:	2b09      	cmp	r3, #9
    372c:	d951      	bls.n	37d2 <_svfiprintf_r+0x16e>
    372e:	b1c9      	cbz	r1, 3764 <_svfiprintf_r+0x100>
    3730:	e011      	b.n	3756 <_svfiprintf_r+0xf2>
    3732:	2b25      	cmp	r3, #37	; 0x25
    3734:	d0c0      	beq.n	36b8 <_svfiprintf_r+0x54>
    3736:	4627      	mov	r7, r4
    3738:	e7b9      	b.n	36ae <_svfiprintf_r+0x4a>
    373a:	4a3f      	ldr	r2, [pc, #252]	; (3838 <_svfiprintf_r+0x1d4>)
    373c:	1a80      	subs	r0, r0, r2
    373e:	fa0b f000 	lsl.w	r0, fp, r0
    3742:	4318      	orrs	r0, r3
    3744:	9004      	str	r0, [sp, #16]
    3746:	463c      	mov	r4, r7
    3748:	e7d3      	b.n	36f2 <_svfiprintf_r+0x8e>
    374a:	9a03      	ldr	r2, [sp, #12]
    374c:	1d11      	adds	r1, r2, #4
    374e:	6812      	ldr	r2, [r2, #0]
    3750:	9103      	str	r1, [sp, #12]
    3752:	2a00      	cmp	r2, #0
    3754:	db01      	blt.n	375a <_svfiprintf_r+0xf6>
    3756:	9207      	str	r2, [sp, #28]
    3758:	e004      	b.n	3764 <_svfiprintf_r+0x100>
    375a:	4252      	negs	r2, r2
    375c:	f043 0302 	orr.w	r3, r3, #2
    3760:	9207      	str	r2, [sp, #28]
    3762:	9304      	str	r3, [sp, #16]
    3764:	783b      	ldrb	r3, [r7, #0]
    3766:	2b2e      	cmp	r3, #46	; 0x2e
    3768:	d10e      	bne.n	3788 <_svfiprintf_r+0x124>
    376a:	787b      	ldrb	r3, [r7, #1]
    376c:	2b2a      	cmp	r3, #42	; 0x2a
    376e:	f107 0101 	add.w	r1, r7, #1
    3772:	d132      	bne.n	37da <_svfiprintf_r+0x176>
    3774:	9b03      	ldr	r3, [sp, #12]
    3776:	1d1a      	adds	r2, r3, #4
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	9203      	str	r2, [sp, #12]
    377c:	2b00      	cmp	r3, #0
    377e:	bfb8      	it	lt
    3780:	f04f 33ff 	movlt.w	r3, #4294967295
    3784:	3702      	adds	r7, #2
    3786:	9305      	str	r3, [sp, #20]
    3788:	4c2c      	ldr	r4, [pc, #176]	; (383c <_svfiprintf_r+0x1d8>)
    378a:	7839      	ldrb	r1, [r7, #0]
    378c:	2203      	movs	r2, #3
    378e:	4620      	mov	r0, r4
    3790:	f000 f9f6 	bl	3b80 <memchr>
    3794:	b138      	cbz	r0, 37a6 <_svfiprintf_r+0x142>
    3796:	2340      	movs	r3, #64	; 0x40
    3798:	1b00      	subs	r0, r0, r4
    379a:	fa03 f000 	lsl.w	r0, r3, r0
    379e:	9b04      	ldr	r3, [sp, #16]
    37a0:	4303      	orrs	r3, r0
    37a2:	9304      	str	r3, [sp, #16]
    37a4:	3701      	adds	r7, #1
    37a6:	7839      	ldrb	r1, [r7, #0]
    37a8:	4825      	ldr	r0, [pc, #148]	; (3840 <_svfiprintf_r+0x1dc>)
    37aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    37ae:	2206      	movs	r2, #6
    37b0:	1c7e      	adds	r6, r7, #1
    37b2:	f000 f9e5 	bl	3b80 <memchr>
    37b6:	2800      	cmp	r0, #0
    37b8:	d035      	beq.n	3826 <_svfiprintf_r+0x1c2>
    37ba:	4b22      	ldr	r3, [pc, #136]	; (3844 <_svfiprintf_r+0x1e0>)
    37bc:	b9fb      	cbnz	r3, 37fe <_svfiprintf_r+0x19a>
    37be:	9b03      	ldr	r3, [sp, #12]
    37c0:	3307      	adds	r3, #7
    37c2:	f023 0307 	bic.w	r3, r3, #7
    37c6:	3308      	adds	r3, #8
    37c8:	9303      	str	r3, [sp, #12]
    37ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37cc:	444b      	add	r3, r9
    37ce:	9309      	str	r3, [sp, #36]	; 0x24
    37d0:	e76c      	b.n	36ac <_svfiprintf_r+0x48>
    37d2:	fb00 3202 	mla	r2, r0, r2, r3
    37d6:	2101      	movs	r1, #1
    37d8:	e7a3      	b.n	3722 <_svfiprintf_r+0xbe>
    37da:	2300      	movs	r3, #0
    37dc:	9305      	str	r3, [sp, #20]
    37de:	4618      	mov	r0, r3
    37e0:	240a      	movs	r4, #10
    37e2:	460f      	mov	r7, r1
    37e4:	3101      	adds	r1, #1
    37e6:	783a      	ldrb	r2, [r7, #0]
    37e8:	3a30      	subs	r2, #48	; 0x30
    37ea:	2a09      	cmp	r2, #9
    37ec:	d903      	bls.n	37f6 <_svfiprintf_r+0x192>
    37ee:	2b00      	cmp	r3, #0
    37f0:	d0ca      	beq.n	3788 <_svfiprintf_r+0x124>
    37f2:	9005      	str	r0, [sp, #20]
    37f4:	e7c8      	b.n	3788 <_svfiprintf_r+0x124>
    37f6:	fb04 2000 	mla	r0, r4, r0, r2
    37fa:	2301      	movs	r3, #1
    37fc:	e7f1      	b.n	37e2 <_svfiprintf_r+0x17e>
    37fe:	ab03      	add	r3, sp, #12
    3800:	9300      	str	r3, [sp, #0]
    3802:	462a      	mov	r2, r5
    3804:	4b10      	ldr	r3, [pc, #64]	; (3848 <_svfiprintf_r+0x1e4>)
    3806:	a904      	add	r1, sp, #16
    3808:	4640      	mov	r0, r8
    380a:	f3af 8000 	nop.w
    380e:	f1b0 3fff 	cmp.w	r0, #4294967295
    3812:	4681      	mov	r9, r0
    3814:	d1d9      	bne.n	37ca <_svfiprintf_r+0x166>
    3816:	89ab      	ldrh	r3, [r5, #12]
    3818:	065b      	lsls	r3, r3, #25
    381a:	f53f af38 	bmi.w	368e <_svfiprintf_r+0x2a>
    381e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3820:	b01d      	add	sp, #116	; 0x74
    3822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3826:	ab03      	add	r3, sp, #12
    3828:	9300      	str	r3, [sp, #0]
    382a:	462a      	mov	r2, r5
    382c:	4b06      	ldr	r3, [pc, #24]	; (3848 <_svfiprintf_r+0x1e4>)
    382e:	a904      	add	r1, sp, #16
    3830:	4640      	mov	r0, r8
    3832:	f000 f881 	bl	3938 <_printf_i>
    3836:	e7ea      	b.n	380e <_svfiprintf_r+0x1aa>
    3838:	00004040 	.word	0x00004040
    383c:	00004046 	.word	0x00004046
    3840:	0000404a 	.word	0x0000404a
    3844:	00000000 	.word	0x00000000
    3848:	000035ad 	.word	0x000035ad

0000384c <_printf_common>:
    384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3850:	4691      	mov	r9, r2
    3852:	461f      	mov	r7, r3
    3854:	688a      	ldr	r2, [r1, #8]
    3856:	690b      	ldr	r3, [r1, #16]
    3858:	f8dd 8020 	ldr.w	r8, [sp, #32]
    385c:	4293      	cmp	r3, r2
    385e:	bfb8      	it	lt
    3860:	4613      	movlt	r3, r2
    3862:	f8c9 3000 	str.w	r3, [r9]
    3866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    386a:	4606      	mov	r6, r0
    386c:	460c      	mov	r4, r1
    386e:	b112      	cbz	r2, 3876 <_printf_common+0x2a>
    3870:	3301      	adds	r3, #1
    3872:	f8c9 3000 	str.w	r3, [r9]
    3876:	6823      	ldr	r3, [r4, #0]
    3878:	0699      	lsls	r1, r3, #26
    387a:	bf42      	ittt	mi
    387c:	f8d9 3000 	ldrmi.w	r3, [r9]
    3880:	3302      	addmi	r3, #2
    3882:	f8c9 3000 	strmi.w	r3, [r9]
    3886:	6825      	ldr	r5, [r4, #0]
    3888:	f015 0506 	ands.w	r5, r5, #6
    388c:	d107      	bne.n	389e <_printf_common+0x52>
    388e:	f104 0a19 	add.w	sl, r4, #25
    3892:	68e3      	ldr	r3, [r4, #12]
    3894:	f8d9 2000 	ldr.w	r2, [r9]
    3898:	1a9b      	subs	r3, r3, r2
    389a:	429d      	cmp	r5, r3
    389c:	db29      	blt.n	38f2 <_printf_common+0xa6>
    389e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    38a2:	6822      	ldr	r2, [r4, #0]
    38a4:	3300      	adds	r3, #0
    38a6:	bf18      	it	ne
    38a8:	2301      	movne	r3, #1
    38aa:	0692      	lsls	r2, r2, #26
    38ac:	d42e      	bmi.n	390c <_printf_common+0xc0>
    38ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
    38b2:	4639      	mov	r1, r7
    38b4:	4630      	mov	r0, r6
    38b6:	47c0      	blx	r8
    38b8:	3001      	adds	r0, #1
    38ba:	d021      	beq.n	3900 <_printf_common+0xb4>
    38bc:	6823      	ldr	r3, [r4, #0]
    38be:	68e5      	ldr	r5, [r4, #12]
    38c0:	f8d9 2000 	ldr.w	r2, [r9]
    38c4:	f003 0306 	and.w	r3, r3, #6
    38c8:	2b04      	cmp	r3, #4
    38ca:	bf08      	it	eq
    38cc:	1aad      	subeq	r5, r5, r2
    38ce:	68a3      	ldr	r3, [r4, #8]
    38d0:	6922      	ldr	r2, [r4, #16]
    38d2:	bf0c      	ite	eq
    38d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    38d8:	2500      	movne	r5, #0
    38da:	4293      	cmp	r3, r2
    38dc:	bfc4      	itt	gt
    38de:	1a9b      	subgt	r3, r3, r2
    38e0:	18ed      	addgt	r5, r5, r3
    38e2:	f04f 0900 	mov.w	r9, #0
    38e6:	341a      	adds	r4, #26
    38e8:	454d      	cmp	r5, r9
    38ea:	d11b      	bne.n	3924 <_printf_common+0xd8>
    38ec:	2000      	movs	r0, #0
    38ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38f2:	2301      	movs	r3, #1
    38f4:	4652      	mov	r2, sl
    38f6:	4639      	mov	r1, r7
    38f8:	4630      	mov	r0, r6
    38fa:	47c0      	blx	r8
    38fc:	3001      	adds	r0, #1
    38fe:	d103      	bne.n	3908 <_printf_common+0xbc>
    3900:	f04f 30ff 	mov.w	r0, #4294967295
    3904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3908:	3501      	adds	r5, #1
    390a:	e7c2      	b.n	3892 <_printf_common+0x46>
    390c:	18e1      	adds	r1, r4, r3
    390e:	1c5a      	adds	r2, r3, #1
    3910:	2030      	movs	r0, #48	; 0x30
    3912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3916:	4422      	add	r2, r4
    3918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    391c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3920:	3302      	adds	r3, #2
    3922:	e7c4      	b.n	38ae <_printf_common+0x62>
    3924:	2301      	movs	r3, #1
    3926:	4622      	mov	r2, r4
    3928:	4639      	mov	r1, r7
    392a:	4630      	mov	r0, r6
    392c:	47c0      	blx	r8
    392e:	3001      	adds	r0, #1
    3930:	d0e6      	beq.n	3900 <_printf_common+0xb4>
    3932:	f109 0901 	add.w	r9, r9, #1
    3936:	e7d7      	b.n	38e8 <_printf_common+0x9c>

00003938 <_printf_i>:
    3938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    393c:	4617      	mov	r7, r2
    393e:	7e0a      	ldrb	r2, [r1, #24]
    3940:	b085      	sub	sp, #20
    3942:	2a6e      	cmp	r2, #110	; 0x6e
    3944:	4698      	mov	r8, r3
    3946:	4606      	mov	r6, r0
    3948:	460c      	mov	r4, r1
    394a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    394c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3950:	f000 80bc 	beq.w	3acc <_printf_i+0x194>
    3954:	d81a      	bhi.n	398c <_printf_i+0x54>
    3956:	2a63      	cmp	r2, #99	; 0x63
    3958:	d02e      	beq.n	39b8 <_printf_i+0x80>
    395a:	d80a      	bhi.n	3972 <_printf_i+0x3a>
    395c:	2a00      	cmp	r2, #0
    395e:	f000 80c8 	beq.w	3af2 <_printf_i+0x1ba>
    3962:	2a58      	cmp	r2, #88	; 0x58
    3964:	f000 808a 	beq.w	3a7c <_printf_i+0x144>
    3968:	f104 0542 	add.w	r5, r4, #66	; 0x42
    396c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3970:	e02a      	b.n	39c8 <_printf_i+0x90>
    3972:	2a64      	cmp	r2, #100	; 0x64
    3974:	d001      	beq.n	397a <_printf_i+0x42>
    3976:	2a69      	cmp	r2, #105	; 0x69
    3978:	d1f6      	bne.n	3968 <_printf_i+0x30>
    397a:	6821      	ldr	r1, [r4, #0]
    397c:	681a      	ldr	r2, [r3, #0]
    397e:	f011 0f80 	tst.w	r1, #128	; 0x80
    3982:	d023      	beq.n	39cc <_printf_i+0x94>
    3984:	1d11      	adds	r1, r2, #4
    3986:	6019      	str	r1, [r3, #0]
    3988:	6813      	ldr	r3, [r2, #0]
    398a:	e027      	b.n	39dc <_printf_i+0xa4>
    398c:	2a73      	cmp	r2, #115	; 0x73
    398e:	f000 80b4 	beq.w	3afa <_printf_i+0x1c2>
    3992:	d808      	bhi.n	39a6 <_printf_i+0x6e>
    3994:	2a6f      	cmp	r2, #111	; 0x6f
    3996:	d02a      	beq.n	39ee <_printf_i+0xb6>
    3998:	2a70      	cmp	r2, #112	; 0x70
    399a:	d1e5      	bne.n	3968 <_printf_i+0x30>
    399c:	680a      	ldr	r2, [r1, #0]
    399e:	f042 0220 	orr.w	r2, r2, #32
    39a2:	600a      	str	r2, [r1, #0]
    39a4:	e003      	b.n	39ae <_printf_i+0x76>
    39a6:	2a75      	cmp	r2, #117	; 0x75
    39a8:	d021      	beq.n	39ee <_printf_i+0xb6>
    39aa:	2a78      	cmp	r2, #120	; 0x78
    39ac:	d1dc      	bne.n	3968 <_printf_i+0x30>
    39ae:	2278      	movs	r2, #120	; 0x78
    39b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    39b4:	496e      	ldr	r1, [pc, #440]	; (3b70 <_printf_i+0x238>)
    39b6:	e064      	b.n	3a82 <_printf_i+0x14a>
    39b8:	681a      	ldr	r2, [r3, #0]
    39ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
    39be:	1d11      	adds	r1, r2, #4
    39c0:	6019      	str	r1, [r3, #0]
    39c2:	6813      	ldr	r3, [r2, #0]
    39c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    39c8:	2301      	movs	r3, #1
    39ca:	e0a3      	b.n	3b14 <_printf_i+0x1dc>
    39cc:	f011 0f40 	tst.w	r1, #64	; 0x40
    39d0:	f102 0104 	add.w	r1, r2, #4
    39d4:	6019      	str	r1, [r3, #0]
    39d6:	d0d7      	beq.n	3988 <_printf_i+0x50>
    39d8:	f9b2 3000 	ldrsh.w	r3, [r2]
    39dc:	2b00      	cmp	r3, #0
    39de:	da03      	bge.n	39e8 <_printf_i+0xb0>
    39e0:	222d      	movs	r2, #45	; 0x2d
    39e2:	425b      	negs	r3, r3
    39e4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    39e8:	4962      	ldr	r1, [pc, #392]	; (3b74 <_printf_i+0x23c>)
    39ea:	220a      	movs	r2, #10
    39ec:	e017      	b.n	3a1e <_printf_i+0xe6>
    39ee:	6820      	ldr	r0, [r4, #0]
    39f0:	6819      	ldr	r1, [r3, #0]
    39f2:	f010 0f80 	tst.w	r0, #128	; 0x80
    39f6:	d003      	beq.n	3a00 <_printf_i+0xc8>
    39f8:	1d08      	adds	r0, r1, #4
    39fa:	6018      	str	r0, [r3, #0]
    39fc:	680b      	ldr	r3, [r1, #0]
    39fe:	e006      	b.n	3a0e <_printf_i+0xd6>
    3a00:	f010 0f40 	tst.w	r0, #64	; 0x40
    3a04:	f101 0004 	add.w	r0, r1, #4
    3a08:	6018      	str	r0, [r3, #0]
    3a0a:	d0f7      	beq.n	39fc <_printf_i+0xc4>
    3a0c:	880b      	ldrh	r3, [r1, #0]
    3a0e:	4959      	ldr	r1, [pc, #356]	; (3b74 <_printf_i+0x23c>)
    3a10:	2a6f      	cmp	r2, #111	; 0x6f
    3a12:	bf14      	ite	ne
    3a14:	220a      	movne	r2, #10
    3a16:	2208      	moveq	r2, #8
    3a18:	2000      	movs	r0, #0
    3a1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3a1e:	6865      	ldr	r5, [r4, #4]
    3a20:	60a5      	str	r5, [r4, #8]
    3a22:	2d00      	cmp	r5, #0
    3a24:	f2c0 809c 	blt.w	3b60 <_printf_i+0x228>
    3a28:	6820      	ldr	r0, [r4, #0]
    3a2a:	f020 0004 	bic.w	r0, r0, #4
    3a2e:	6020      	str	r0, [r4, #0]
    3a30:	2b00      	cmp	r3, #0
    3a32:	d13f      	bne.n	3ab4 <_printf_i+0x17c>
    3a34:	2d00      	cmp	r5, #0
    3a36:	f040 8095 	bne.w	3b64 <_printf_i+0x22c>
    3a3a:	4675      	mov	r5, lr
    3a3c:	2a08      	cmp	r2, #8
    3a3e:	d10b      	bne.n	3a58 <_printf_i+0x120>
    3a40:	6823      	ldr	r3, [r4, #0]
    3a42:	07da      	lsls	r2, r3, #31
    3a44:	d508      	bpl.n	3a58 <_printf_i+0x120>
    3a46:	6923      	ldr	r3, [r4, #16]
    3a48:	6862      	ldr	r2, [r4, #4]
    3a4a:	429a      	cmp	r2, r3
    3a4c:	bfde      	ittt	le
    3a4e:	2330      	movle	r3, #48	; 0x30
    3a50:	f805 3c01 	strble.w	r3, [r5, #-1]
    3a54:	f105 35ff 	addle.w	r5, r5, #4294967295
    3a58:	ebae 0305 	sub.w	r3, lr, r5
    3a5c:	6123      	str	r3, [r4, #16]
    3a5e:	f8cd 8000 	str.w	r8, [sp]
    3a62:	463b      	mov	r3, r7
    3a64:	aa03      	add	r2, sp, #12
    3a66:	4621      	mov	r1, r4
    3a68:	4630      	mov	r0, r6
    3a6a:	f7ff feef 	bl	384c <_printf_common>
    3a6e:	3001      	adds	r0, #1
    3a70:	d155      	bne.n	3b1e <_printf_i+0x1e6>
    3a72:	f04f 30ff 	mov.w	r0, #4294967295
    3a76:	b005      	add	sp, #20
    3a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3a80:	493c      	ldr	r1, [pc, #240]	; (3b74 <_printf_i+0x23c>)
    3a82:	6822      	ldr	r2, [r4, #0]
    3a84:	6818      	ldr	r0, [r3, #0]
    3a86:	f012 0f80 	tst.w	r2, #128	; 0x80
    3a8a:	f100 0504 	add.w	r5, r0, #4
    3a8e:	601d      	str	r5, [r3, #0]
    3a90:	d001      	beq.n	3a96 <_printf_i+0x15e>
    3a92:	6803      	ldr	r3, [r0, #0]
    3a94:	e002      	b.n	3a9c <_printf_i+0x164>
    3a96:	0655      	lsls	r5, r2, #25
    3a98:	d5fb      	bpl.n	3a92 <_printf_i+0x15a>
    3a9a:	8803      	ldrh	r3, [r0, #0]
    3a9c:	07d0      	lsls	r0, r2, #31
    3a9e:	bf44      	itt	mi
    3aa0:	f042 0220 	orrmi.w	r2, r2, #32
    3aa4:	6022      	strmi	r2, [r4, #0]
    3aa6:	b91b      	cbnz	r3, 3ab0 <_printf_i+0x178>
    3aa8:	6822      	ldr	r2, [r4, #0]
    3aaa:	f022 0220 	bic.w	r2, r2, #32
    3aae:	6022      	str	r2, [r4, #0]
    3ab0:	2210      	movs	r2, #16
    3ab2:	e7b1      	b.n	3a18 <_printf_i+0xe0>
    3ab4:	4675      	mov	r5, lr
    3ab6:	fbb3 f0f2 	udiv	r0, r3, r2
    3aba:	fb02 3310 	mls	r3, r2, r0, r3
    3abe:	5ccb      	ldrb	r3, [r1, r3]
    3ac0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3ac4:	4603      	mov	r3, r0
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d1f5      	bne.n	3ab6 <_printf_i+0x17e>
    3aca:	e7b7      	b.n	3a3c <_printf_i+0x104>
    3acc:	6808      	ldr	r0, [r1, #0]
    3ace:	681a      	ldr	r2, [r3, #0]
    3ad0:	6949      	ldr	r1, [r1, #20]
    3ad2:	f010 0f80 	tst.w	r0, #128	; 0x80
    3ad6:	d004      	beq.n	3ae2 <_printf_i+0x1aa>
    3ad8:	1d10      	adds	r0, r2, #4
    3ada:	6018      	str	r0, [r3, #0]
    3adc:	6813      	ldr	r3, [r2, #0]
    3ade:	6019      	str	r1, [r3, #0]
    3ae0:	e007      	b.n	3af2 <_printf_i+0x1ba>
    3ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
    3ae6:	f102 0004 	add.w	r0, r2, #4
    3aea:	6018      	str	r0, [r3, #0]
    3aec:	6813      	ldr	r3, [r2, #0]
    3aee:	d0f6      	beq.n	3ade <_printf_i+0x1a6>
    3af0:	8019      	strh	r1, [r3, #0]
    3af2:	2300      	movs	r3, #0
    3af4:	6123      	str	r3, [r4, #16]
    3af6:	4675      	mov	r5, lr
    3af8:	e7b1      	b.n	3a5e <_printf_i+0x126>
    3afa:	681a      	ldr	r2, [r3, #0]
    3afc:	1d11      	adds	r1, r2, #4
    3afe:	6019      	str	r1, [r3, #0]
    3b00:	6815      	ldr	r5, [r2, #0]
    3b02:	6862      	ldr	r2, [r4, #4]
    3b04:	2100      	movs	r1, #0
    3b06:	4628      	mov	r0, r5
    3b08:	f000 f83a 	bl	3b80 <memchr>
    3b0c:	b108      	cbz	r0, 3b12 <_printf_i+0x1da>
    3b0e:	1b40      	subs	r0, r0, r5
    3b10:	6060      	str	r0, [r4, #4]
    3b12:	6863      	ldr	r3, [r4, #4]
    3b14:	6123      	str	r3, [r4, #16]
    3b16:	2300      	movs	r3, #0
    3b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3b1c:	e79f      	b.n	3a5e <_printf_i+0x126>
    3b1e:	6923      	ldr	r3, [r4, #16]
    3b20:	462a      	mov	r2, r5
    3b22:	4639      	mov	r1, r7
    3b24:	4630      	mov	r0, r6
    3b26:	47c0      	blx	r8
    3b28:	3001      	adds	r0, #1
    3b2a:	d0a2      	beq.n	3a72 <_printf_i+0x13a>
    3b2c:	6823      	ldr	r3, [r4, #0]
    3b2e:	079b      	lsls	r3, r3, #30
    3b30:	d507      	bpl.n	3b42 <_printf_i+0x20a>
    3b32:	2500      	movs	r5, #0
    3b34:	f104 0919 	add.w	r9, r4, #25
    3b38:	68e3      	ldr	r3, [r4, #12]
    3b3a:	9a03      	ldr	r2, [sp, #12]
    3b3c:	1a9b      	subs	r3, r3, r2
    3b3e:	429d      	cmp	r5, r3
    3b40:	db05      	blt.n	3b4e <_printf_i+0x216>
    3b42:	68e0      	ldr	r0, [r4, #12]
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	4298      	cmp	r0, r3
    3b48:	bfb8      	it	lt
    3b4a:	4618      	movlt	r0, r3
    3b4c:	e793      	b.n	3a76 <_printf_i+0x13e>
    3b4e:	2301      	movs	r3, #1
    3b50:	464a      	mov	r2, r9
    3b52:	4639      	mov	r1, r7
    3b54:	4630      	mov	r0, r6
    3b56:	47c0      	blx	r8
    3b58:	3001      	adds	r0, #1
    3b5a:	d08a      	beq.n	3a72 <_printf_i+0x13a>
    3b5c:	3501      	adds	r5, #1
    3b5e:	e7eb      	b.n	3b38 <_printf_i+0x200>
    3b60:	2b00      	cmp	r3, #0
    3b62:	d1a7      	bne.n	3ab4 <_printf_i+0x17c>
    3b64:	780b      	ldrb	r3, [r1, #0]
    3b66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3b6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3b6e:	e765      	b.n	3a3c <_printf_i+0x104>
    3b70:	00004062 	.word	0x00004062
    3b74:	00004051 	.word	0x00004051
	...

00003b80 <memchr>:
    3b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3b84:	2a10      	cmp	r2, #16
    3b86:	db2b      	blt.n	3be0 <memchr+0x60>
    3b88:	f010 0f07 	tst.w	r0, #7
    3b8c:	d008      	beq.n	3ba0 <memchr+0x20>
    3b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3b92:	3a01      	subs	r2, #1
    3b94:	428b      	cmp	r3, r1
    3b96:	d02d      	beq.n	3bf4 <memchr+0x74>
    3b98:	f010 0f07 	tst.w	r0, #7
    3b9c:	b342      	cbz	r2, 3bf0 <memchr+0x70>
    3b9e:	d1f6      	bne.n	3b8e <memchr+0xe>
    3ba0:	b4f0      	push	{r4, r5, r6, r7}
    3ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3baa:	f022 0407 	bic.w	r4, r2, #7
    3bae:	f07f 0700 	mvns.w	r7, #0
    3bb2:	2300      	movs	r3, #0
    3bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3bb8:	3c08      	subs	r4, #8
    3bba:	ea85 0501 	eor.w	r5, r5, r1
    3bbe:	ea86 0601 	eor.w	r6, r6, r1
    3bc2:	fa85 f547 	uadd8	r5, r5, r7
    3bc6:	faa3 f587 	sel	r5, r3, r7
    3bca:	fa86 f647 	uadd8	r6, r6, r7
    3bce:	faa5 f687 	sel	r6, r5, r7
    3bd2:	b98e      	cbnz	r6, 3bf8 <memchr+0x78>
    3bd4:	d1ee      	bne.n	3bb4 <memchr+0x34>
    3bd6:	bcf0      	pop	{r4, r5, r6, r7}
    3bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3bdc:	f002 0207 	and.w	r2, r2, #7
    3be0:	b132      	cbz	r2, 3bf0 <memchr+0x70>
    3be2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3be6:	3a01      	subs	r2, #1
    3be8:	ea83 0301 	eor.w	r3, r3, r1
    3bec:	b113      	cbz	r3, 3bf4 <memchr+0x74>
    3bee:	d1f8      	bne.n	3be2 <memchr+0x62>
    3bf0:	2000      	movs	r0, #0
    3bf2:	4770      	bx	lr
    3bf4:	3801      	subs	r0, #1
    3bf6:	4770      	bx	lr
    3bf8:	2d00      	cmp	r5, #0
    3bfa:	bf06      	itte	eq
    3bfc:	4635      	moveq	r5, r6
    3bfe:	3803      	subeq	r0, #3
    3c00:	3807      	subne	r0, #7
    3c02:	f015 0f01 	tst.w	r5, #1
    3c06:	d107      	bne.n	3c18 <memchr+0x98>
    3c08:	3001      	adds	r0, #1
    3c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
    3c0e:	bf02      	ittt	eq
    3c10:	3001      	addeq	r0, #1
    3c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3c16:	3001      	addeq	r0, #1
    3c18:	bcf0      	pop	{r4, r5, r6, r7}
    3c1a:	3801      	subs	r0, #1
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop

00003c20 <memmove>:
    3c20:	4288      	cmp	r0, r1
    3c22:	b510      	push	{r4, lr}
    3c24:	eb01 0302 	add.w	r3, r1, r2
    3c28:	d803      	bhi.n	3c32 <memmove+0x12>
    3c2a:	1e42      	subs	r2, r0, #1
    3c2c:	4299      	cmp	r1, r3
    3c2e:	d10c      	bne.n	3c4a <memmove+0x2a>
    3c30:	bd10      	pop	{r4, pc}
    3c32:	4298      	cmp	r0, r3
    3c34:	d2f9      	bcs.n	3c2a <memmove+0xa>
    3c36:	1881      	adds	r1, r0, r2
    3c38:	1ad2      	subs	r2, r2, r3
    3c3a:	42d3      	cmn	r3, r2
    3c3c:	d100      	bne.n	3c40 <memmove+0x20>
    3c3e:	bd10      	pop	{r4, pc}
    3c40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3c44:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3c48:	e7f7      	b.n	3c3a <memmove+0x1a>
    3c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c4e:	f802 4f01 	strb.w	r4, [r2, #1]!
    3c52:	e7eb      	b.n	3c2c <memmove+0xc>

00003c54 <_realloc_r>:
    3c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c56:	4607      	mov	r7, r0
    3c58:	4614      	mov	r4, r2
    3c5a:	460e      	mov	r6, r1
    3c5c:	b921      	cbnz	r1, 3c68 <_realloc_r+0x14>
    3c5e:	4611      	mov	r1, r2
    3c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c64:	f7ff bc0e 	b.w	3484 <_malloc_r>
    3c68:	b922      	cbnz	r2, 3c74 <_realloc_r+0x20>
    3c6a:	f7ff fbbd 	bl	33e8 <_free_r>
    3c6e:	4625      	mov	r5, r4
    3c70:	4628      	mov	r0, r5
    3c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c74:	f000 f814 	bl	3ca0 <_malloc_usable_size_r>
    3c78:	4284      	cmp	r4, r0
    3c7a:	d90f      	bls.n	3c9c <_realloc_r+0x48>
    3c7c:	4621      	mov	r1, r4
    3c7e:	4638      	mov	r0, r7
    3c80:	f7ff fc00 	bl	3484 <_malloc_r>
    3c84:	4605      	mov	r5, r0
    3c86:	2800      	cmp	r0, #0
    3c88:	d0f2      	beq.n	3c70 <_realloc_r+0x1c>
    3c8a:	4631      	mov	r1, r6
    3c8c:	4622      	mov	r2, r4
    3c8e:	f7ff fb9f 	bl	33d0 <memcpy>
    3c92:	4631      	mov	r1, r6
    3c94:	4638      	mov	r0, r7
    3c96:	f7ff fba7 	bl	33e8 <_free_r>
    3c9a:	e7e9      	b.n	3c70 <_realloc_r+0x1c>
    3c9c:	4635      	mov	r5, r6
    3c9e:	e7e7      	b.n	3c70 <_realloc_r+0x1c>

00003ca0 <_malloc_usable_size_r>:
    3ca0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3ca4:	2800      	cmp	r0, #0
    3ca6:	f1a0 0004 	sub.w	r0, r0, #4
    3caa:	bfbc      	itt	lt
    3cac:	580b      	ldrlt	r3, [r1, r0]
    3cae:	18c0      	addlt	r0, r0, r3
    3cb0:	4770      	bx	lr
    3cb2:	0000      	movs	r0, r0
    3cb4:	682f2e2e 	.word	0x682f2e2e
    3cb8:	732f6c61 	.word	0x732f6c61
    3cbc:	682f6372 	.word	0x682f6372
    3cc0:	615f6c61 	.word	0x615f6c61
    3cc4:	615f6364 	.word	0x615f6364
    3cc8:	636e7973 	.word	0x636e7973
    3ccc:	0000632e 	.word	0x0000632e
    3cd0:	682f2e2e 	.word	0x682f2e2e
    3cd4:	732f6c61 	.word	0x732f6c61
    3cd8:	682f6372 	.word	0x682f6372
    3cdc:	635f6c61 	.word	0x635f6c61
    3ce0:	735f6372 	.word	0x735f6372
    3ce4:	2e636e79 	.word	0x2e636e79
    3ce8:	00000063 	.word	0x00000063
    3cec:	682f2e2e 	.word	0x682f2e2e
    3cf0:	732f6c61 	.word	0x732f6c61
    3cf4:	682f6372 	.word	0x682f6372
    3cf8:	665f6c61 	.word	0x665f6c61
    3cfc:	6873616c 	.word	0x6873616c
    3d00:	0000632e 	.word	0x0000632e
    3d04:	682f2e2e 	.word	0x682f2e2e
    3d08:	732f6c61 	.word	0x732f6c61
    3d0c:	682f6372 	.word	0x682f6372
    3d10:	695f6c61 	.word	0x695f6c61
    3d14:	6d5f6332 	.word	0x6d5f6332
    3d18:	7973615f 	.word	0x7973615f
    3d1c:	632e636e 	.word	0x632e636e
    3d20:	00000000 	.word	0x00000000
    3d24:	682f2e2e 	.word	0x682f2e2e
    3d28:	732f6c61 	.word	0x732f6c61
    3d2c:	682f6372 	.word	0x682f6372
    3d30:	695f6c61 	.word	0x695f6c61
    3d34:	00632e6f 	.word	0x00632e6f
    3d38:	682f2e2e 	.word	0x682f2e2e
    3d3c:	732f6c61 	.word	0x732f6c61
    3d40:	682f6372 	.word	0x682f6372
    3d44:	735f6c61 	.word	0x735f6c61
    3d48:	6d5f6970 	.word	0x6d5f6970
    3d4c:	616d645f 	.word	0x616d645f
    3d50:	0000632e 	.word	0x0000632e
    3d54:	682f2e2e 	.word	0x682f2e2e
    3d58:	732f6c61 	.word	0x732f6c61
    3d5c:	682f6372 	.word	0x682f6372
    3d60:	755f6c61 	.word	0x755f6c61
    3d64:	74726173 	.word	0x74726173
    3d68:	7973615f 	.word	0x7973615f
    3d6c:	632e636e 	.word	0x632e636e
    3d70:	00000000 	.word	0x00000000
    3d74:	682f2e2e 	.word	0x682f2e2e
    3d78:	752f6c61 	.word	0x752f6c61
    3d7c:	736c6974 	.word	0x736c6974
    3d80:	6372732f 	.word	0x6372732f
    3d84:	6974752f 	.word	0x6974752f
    3d88:	725f736c 	.word	0x725f736c
    3d8c:	62676e69 	.word	0x62676e69
    3d90:	65666675 	.word	0x65666675
    3d94:	00632e72 	.word	0x00632e72

00003d98 <_adcs>:
    3d98:	01000000 0003000c 00041807 00000000     ................
    3da8:	0014080b 00010000 000c0100 18040003     ................
    3db8:	00000004 080b0000 00000014 682f2e2e     ............../h
    3dc8:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    3dd8:	00000000                                ....

00003ddc <_cfgs>:
    3ddc:	00201300 14000000 00000000 00000000     .. .............
	...
    3edc:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3eec:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    3efc:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
    3f0c:	632e6361 00000000 40003000 40003400     ac.c.....0.@.4.@
    3f1c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    3f2c:	43000800 43000c00                       ...C...C

00003f34 <_i2cms>:
    3f34:	00000005 00200014 00000100 0000e6e5     ...... .........
    3f44:	00d70000 02dc6c00                       .....l..

00003f4c <sercomspi_regs>:
    3f4c:	0020000c 00000000 00000000 01ff0006     .. .............
    3f5c:	00000007 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    3f6c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00003f7c <grid_module_mux_lookup>:
    3f7c:	05040100 0d0c0908 07060302 0f0e0b0a     ................

00003f8c <crc_datas.68867>:
    3f8c:	00000000 11111111 22222222 33333333     ........""""3333
    3f9c:	44444444 55555555 66666666 77777777     DDDDUUUUffffwwww
    3fac:	88888888 99999999                       ........

00003fb4 <grid_module_din_buffer_size>:
	...

00003fb5 <grid_module_ain_buffer_size>:
    3fb5:	43001010                                         .

00003fb6 <grid_module_led_buffer_size>:
    3fb6:	52430010 78253a43 4441000a 25203a43     ..CRC:%x..ADC: %
    3fc6:	25206435 25206435 0a206435 52430000     5d %5d %5d ...CR
    3fd6:	25203a43 000a2078 00000000                       C: %x ....

00003fe0 <__sf_fake_stderr>:
	...

00004000 <__sf_fake_stdin>:
	...

00004020 <__sf_fake_stdout>:
	...
    4040:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4050:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4060:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4070:	00006665                                ef..

00004074 <_init>:
    4074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4076:	bf00      	nop
    4078:	bcf8      	pop	{r3, r4, r5, r6, r7}
    407a:	bc08      	pop	{r3}
    407c:	469e      	mov	lr, r3
    407e:	4770      	bx	lr

00004080 <__init_array_start>:
    4080:	00000289 	.word	0x00000289

00004084 <_fini>:
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4086:	bf00      	nop
    4088:	bcf8      	pop	{r3, r4, r5, r6, r7}
    408a:	bc08      	pop	{r3}
    408c:	469e      	mov	lr, r3
    408e:	4770      	bx	lr

00004090 <__fini_array_start>:
    4090:	00000265 	.word	0x00000265
