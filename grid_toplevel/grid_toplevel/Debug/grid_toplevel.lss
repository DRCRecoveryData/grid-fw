
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e434  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000e434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          0000368c  200005c0  0000ea00  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20003c4c  0001208c  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0009259b  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c120  00000000  00000000  000b2bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003074f  00000000  00000000  000becfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002320  00000000  00000000  000ef44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003260  00000000  00000000  000f176d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000485b7  00000000  00000000  000f49cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040291  00000000  00000000  0013cf84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011aa3f  00000000  00000000  0017d215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000068ac  00000000  00000000  00297c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
	grid_led_hardware_start_transfer(mod);
	
}


void grid_hardwaretest_port_test(uint32_t loop){
       0:	50 3c 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     P<. ............

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      6c:	19 6c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .l..............
	tmp &= ~PORT_PINCFG_PMUXEN;
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	tmp &= ~PORT_PINCFG_PMUXEN;
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      ac:	ed 02 00 00 ed 02 00 00 25 68 00 00 39 68 00 00     ........%h..9h..
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      bc:	5d 66 00 00 69 66 00 00 75 66 00 00 81 66 00 00     ]f..if..uf...f..
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      cc:	8d 66 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .f..............
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      f4:	4d 6a 00 00 35 77 00 00 49 77 00 00 5d 77 00 00     Mj..5w..Iw..]w..
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     104:	71 77 00 00 85 77 00 00 99 77 00 00 ad 77 00 00     qw...w...w...w..
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     114:	c1 77 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .w..............
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     124:	ed 02 00 00 d5 77 00 00 e9 77 00 00 fd 77 00 00     .....w...w...w..
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     134:	11 78 00 00 25 78 00 00 39 78 00 00 4d 78 00 00     .x..%x..9x..Mx..
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
     144:	61 78 00 00 75 78 00 00 89 78 00 00 9d 78 00 00     ax..ux...x...x..
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     154:	b1 78 00 00 c5 78 00 00 d9 78 00 00 ed 78 00 00     .x...x...x...x..
     164:	01 79 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .y..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 1d 98 00 00     ................
     184:	29 98 00 00 35 98 00 00 41 98 00 00 00 00 00 00     )...5...A.......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 25 85 00 00 39 85 00 00     ........%...9...
     1f4:	4d 85 00 00 61 85 00 00 ed 02 00 00 ed 02 00 00     M...a...........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     214:	ed 02 00 00 f1 62 00 00 05 63 00 00 19 63 00 00     .....b...c...c..
     224:	2d 63 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     -c..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	if (loop%1000 == 500){
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000e434 	.word	0x0000e434

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e434 	.word	0x0000e434
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000e434 	.word	0x0000e434
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000baa5 	.word	0x0000baa5
     2e8:	0000a69d 	.word	0x0000a69d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000e434 	.word	0x0000e434
     36c:	200005bc 	.word	0x200005bc
     370:	20003c4c 	.word	0x20003c4c
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000c285 	.word	0x0000c285
     384:	0000a1e1 	.word	0x0000a1e1

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001058 	.word	0x20001058
     40c:	20001154 	.word	0x20001154
     410:	43001c00 	.word	0x43001c00
     414:	00004695 	.word	0x00004695
     418:	00004739 	.word	0x00004739
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000122c 	.word	0x2000122c
     4b0:	20000ff4 	.word	0x20000ff4
     4b4:	43002000 	.word	0x43002000
     4b8:	00004695 	.word	0x00004695
     4bc:	00004739 	.word	0x00004739
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000ff0 	.word	0x20000ff0
     4e8:	000049d5 	.word	0x000049d5

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004a59 	.word	0x00004a59

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fd4 	.word	0x20000fd4
     54c:	00004a79 	.word	0x00004a79

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001298 	.word	0x20001298
     718:	00004c25 	.word	0x00004c25
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20001084 	.word	0x20001084
     7bc:	00005505 	.word	0x00005505
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010d8 	.word	0x200010d8
     860:	00005505 	.word	0x00005505
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	2000104c 	.word	0x2000104c
     8f8:	0000578d 	.word	0x0000578d
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f4c 	.word	0x20000f4c
     a04:	00004e15 	.word	0x00004e15
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	2000118c 	.word	0x2000118c
     aa8:	00005505 	.word	0x00005505
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	2000100c 	.word	0x2000100c
     b54:	00004b59 	.word	0x00004b59
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011dc 	.word	0x200011dc
     bf8:	00005505 	.word	0x00005505
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001128 	.word	0x20001128
     cfc:	00005079 	.word	0x00005079
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00004a05 	.word	0x00004a05

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00005a55 	.word	0x00005a55
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000d758 	.word	0x0000d758
     e14:	00005dad 	.word	0x00005dad
     e18:	200010d4 	.word	0x200010d4
     e1c:	40002000 	.word	0x40002000
     e20:	0000984d 	.word	0x0000984d

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00006371 	.word	0x00006371
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00006c11 	.word	0x00006c11
    1100:	40002400 	.word	0x40002400
    1104:	20000f94 	.word	0x20000f94
    1108:	00005221 	.word	0x00005221
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	0000851d 	.word	0x0000851d
    1134:	40003800 	.word	0x40003800
    1138:	20001278 	.word	0x20001278
    113c:	40003c00 	.word	0x40003c00
    1140:	2000116c 	.word	0x2000116c
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fb4 	.word	0x20000fb4
    114c:	4101c000 	.word	0x4101c000
    1150:	20001258 	.word	0x20001258
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000c2cd 	.word	0x0000c2cd

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000c2cd 	.word	0x0000c2cd
    11e0:	200017f0 	.word	0x200017f0
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017f0 	.word	0x200017f0

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017f0 	.word	0x200017f0

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017f0 	.word	0x200017f0

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000c2cd 	.word	0x0000c2cd

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 609c 	add.w	r0, r0, #1248	; 0x4e0
    1516:	4e34      	ldr	r6, [pc, #208]	; (15e8 <grid_port_init+0xe4>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f504 609f 	add.w	r0, r4, #1272	; 0x4f8
    1520:	47b0      	blx	r6
	
	por->ping_report = p_report;
    1522:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1524:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    1526:	2300      	movs	r3, #0
    1528:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    152a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152e:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    1530:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1534:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    1536:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    1538:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    153a:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    153c:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153e:	4619      	mov	r1, r3
    1540:	18e2      	adds	r2, r4, r3
    1542:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1546:	3301      	adds	r3, #1
    1548:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    154c:	d1f8      	bne.n	1540 <grid_port_init+0x3c>
    154e:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1550:	4619      	mov	r1, r3
    1552:	18e2      	adds	r2, r4, r3
    1554:	f882 1288 	strb.w	r1, [r2, #648]	; 0x288
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1558:	3301      	adds	r3, #1
    155a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155e:	d1f8      	bne.n	1552 <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    1560:	2300      	movs	r3, #0
    1562:	f884 3514 	strb.w	r3, [r4, #1300]	; 0x514
	
	por->partner_hwcfg = 0;
    1566:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	por->partner_status = 1;
    156a:	2301      	movs	r3, #1
    156c:	f884 3517 	strb.w	r3, [r4, #1303]	; 0x517
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1570:	429d      	cmp	r5, r3
    1572:	d004      	beq.n	157e <grid_port_init+0x7a>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1574:	2301      	movs	r3, #1
    1576:	f884 3517 	strb.w	r3, [r4, #1303]	; 0x517
    157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157e:	2300      	movs	r3, #0
    1580:	f884 3517 	strb.w	r3, [r4, #1303]	; 0x517
		por->partner_fi = 0;
    1584:	f884 3514 	strb.w	r3, [r4, #1300]	; 0x514
		if (por->direction == GRID_MSG_NORTH){
    1588:	7b63      	ldrb	r3, [r4, #13]
    158a:	b2db      	uxtb	r3, r3
    158c:	2b11      	cmp	r3, #17
    158e:	d013      	beq.n	15b8 <grid_port_init+0xb4>
		else if (por->direction == GRID_MSG_EAST){
    1590:	7b63      	ldrb	r3, [r4, #13]
    1592:	b2db      	uxtb	r3, r3
    1594:	2b12      	cmp	r3, #18
    1596:	d017      	beq.n	15c8 <grid_port_init+0xc4>
		else if (por->direction == GRID_MSG_SOUTH){
    1598:	7b63      	ldrb	r3, [r4, #13]
    159a:	b2db      	uxtb	r3, r3
    159c:	2b13      	cmp	r3, #19
    159e:	d01b      	beq.n	15d8 <grid_port_init+0xd4>
		else if (por->direction == GRID_MSG_WEST){
    15a0:	7b63      	ldrb	r3, [r4, #13]
    15a2:	b2db      	uxtb	r3, r3
    15a4:	2b14      	cmp	r3, #20
    15a6:	d1e8      	bne.n	157a <grid_port_init+0x76>
			por->dx = -1;
    15a8:	23ff      	movs	r3, #255	; 0xff
    15aa:	f884 3515 	strb.w	r3, [r4, #1301]	; 0x515
			por->dy = 0;
    15ae:	2300      	movs	r3, #0
    15b0:	f884 3516 	strb.w	r3, [r4, #1302]	; 0x516
    15b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b8:	2300      	movs	r3, #0
    15ba:	f884 3515 	strb.w	r3, [r4, #1301]	; 0x515
			por->dy = 1;
    15be:	2301      	movs	r3, #1
    15c0:	f884 3516 	strb.w	r3, [r4, #1302]	; 0x516
    15c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c8:	2301      	movs	r3, #1
    15ca:	f884 3515 	strb.w	r3, [r4, #1301]	; 0x515
			por->dy = 0;
    15ce:	2300      	movs	r3, #0
    15d0:	f884 3516 	strb.w	r3, [r4, #1302]	; 0x516
    15d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d8:	2300      	movs	r3, #0
    15da:	f884 3515 	strb.w	r3, [r4, #1301]	; 0x515
			por->dy = -1;
    15de:	23ff      	movs	r3, #255	; 0xff
    15e0:	f884 3516 	strb.w	r3, [r4, #1302]	; 0x516
    15e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e8:	00001321 	.word	0x00001321

000015ec <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15f0:	b084      	sub	sp, #16
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    15f2:	4f2f      	ldr	r7, [pc, #188]	; (16b0 <grid_port_init_all+0xc4>)
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	3310      	adds	r3, #16
    15f8:	9303      	str	r3, [sp, #12]
    15fa:	2500      	movs	r5, #0
    15fc:	9502      	str	r5, [sp, #8]
    15fe:	2311      	movs	r3, #17
    1600:	9301      	str	r3, [sp, #4]
    1602:	2401      	movs	r4, #1
    1604:	9400      	str	r4, [sp, #0]
    1606:	4b2b      	ldr	r3, [pc, #172]	; (16b4 <grid_port_init_all+0xc8>)
    1608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    160c:	4611      	mov	r1, r2
    160e:	482a      	ldr	r0, [pc, #168]	; (16b8 <grid_port_init_all+0xcc>)
    1610:	4e2a      	ldr	r6, [pc, #168]	; (16bc <grid_port_init_all+0xd0>)
    1612:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	3320      	adds	r3, #32
    1618:	9303      	str	r3, [sp, #12]
    161a:	9402      	str	r4, [sp, #8]
    161c:	2312      	movs	r3, #18
    161e:	9301      	str	r3, [sp, #4]
    1620:	9400      	str	r4, [sp, #0]
    1622:	4b27      	ldr	r3, [pc, #156]	; (16c0 <grid_port_init_all+0xd4>)
    1624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1628:	4611      	mov	r1, r2
    162a:	4826      	ldr	r0, [pc, #152]	; (16c4 <grid_port_init_all+0xd8>)
    162c:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	3330      	adds	r3, #48	; 0x30
    1632:	9303      	str	r3, [sp, #12]
    1634:	f04f 0802 	mov.w	r8, #2
    1638:	f8cd 8008 	str.w	r8, [sp, #8]
    163c:	2313      	movs	r3, #19
    163e:	9301      	str	r3, [sp, #4]
    1640:	9400      	str	r4, [sp, #0]
    1642:	4b21      	ldr	r3, [pc, #132]	; (16c8 <grid_port_init_all+0xdc>)
    1644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1648:	4611      	mov	r1, r2
    164a:	4820      	ldr	r0, [pc, #128]	; (16cc <grid_port_init_all+0xe0>)
    164c:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	3340      	adds	r3, #64	; 0x40
    1652:	9303      	str	r3, [sp, #12]
    1654:	2703      	movs	r7, #3
    1656:	9702      	str	r7, [sp, #8]
    1658:	2314      	movs	r3, #20
    165a:	9301      	str	r3, [sp, #4]
    165c:	9400      	str	r4, [sp, #0]
    165e:	4b1c      	ldr	r3, [pc, #112]	; (16d0 <grid_port_init_all+0xe4>)
    1660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1664:	4611      	mov	r1, r2
    1666:	481b      	ldr	r0, [pc, #108]	; (16d4 <grid_port_init_all+0xe8>)
    1668:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    166a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 16dc <grid_port_init_all+0xf0>
    166e:	9503      	str	r5, [sp, #12]
    1670:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1674:	f8cd a008 	str.w	sl, [sp, #8]
    1678:	9501      	str	r5, [sp, #4]
    167a:	9700      	str	r7, [sp, #0]
    167c:	462b      	mov	r3, r5
    167e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1682:	4611      	mov	r1, r2
    1684:	4648      	mov	r0, r9
    1686:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    1688:	4f13      	ldr	r7, [pc, #76]	; (16d8 <grid_port_init_all+0xec>)
    168a:	9503      	str	r5, [sp, #12]
    168c:	f8cd a008 	str.w	sl, [sp, #8]
    1690:	9501      	str	r5, [sp, #4]
    1692:	f8cd 8000 	str.w	r8, [sp]
    1696:	462b      	mov	r3, r5
    1698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    169c:	4611      	mov	r1, r2
    169e:	4638      	mov	r0, r7
    16a0:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    16a2:	f889 4517 	strb.w	r4, [r9, #1303]	; 0x517
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    16a6:	f887 4517 	strb.w	r4, [r7, #1303]	; 0x517
	
	
}
    16aa:	b004      	add	sp, #16
    16ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16b0:	20001d20 	.word	0x20001d20
    16b4:	200010d8 	.word	0x200010d8
    16b8:	200012ac 	.word	0x200012ac
    16bc:	00001505 	.word	0x00001505
    16c0:	20001084 	.word	0x20001084
    16c4:	20003140 	.word	0x20003140
    16c8:	200011dc 	.word	0x200011dc
    16cc:	2000270c 	.word	0x2000270c
    16d0:	2000118c 	.word	0x2000118c
    16d4:	200021e0 	.word	0x200021e0
    16d8:	20002c28 	.word	0x20002c28
    16dc:	20001808 	.word	0x20001808

000016e0 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    16e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	b093      	sub	sp, #76	; 0x4c
    16e6:	af02      	add	r7, sp, #8
    16e8:	4605      	mov	r5, r0
    16ea:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16ec:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
    16f0:	60bb      	str	r3, [r7, #8]
    16f2:	4618      	mov	r0, r3
    16f4:	4b5d      	ldr	r3, [pc, #372]	; (186c <grid_port_process_inbound+0x18c>)
    16f6:	4798      	blx	r3
	
	if (!packet_size){
    16f8:	b920      	cbnz	r0, 1704 <grid_port_process_inbound+0x24>
    16fa:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16fc:	3744      	adds	r7, #68	; 0x44
    16fe:	46bd      	mov	sp, r7
    1700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1704:	4680      	mov	r8, r0
	}else{
    1706:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    170a:	4b59      	ldr	r3, [pc, #356]	; (1870 <grid_port_process_inbound+0x190>)
    170c:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    170e:	4b59      	ldr	r3, [pc, #356]	; (1874 <grid_port_process_inbound+0x194>)
    1710:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    1712:	4b59      	ldr	r3, [pc, #356]	; (1878 <grid_port_process_inbound+0x198>)
    1714:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    1716:	4b59      	ldr	r3, [pc, #356]	; (187c <grid_port_process_inbound+0x19c>)
    1718:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    171a:	4b59      	ldr	r3, [pc, #356]	; (1880 <grid_port_process_inbound+0x1a0>)
    171c:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    171e:	4b59      	ldr	r3, [pc, #356]	; (1884 <grid_port_process_inbound+0x1a4>)
    1720:	627b      	str	r3, [r7, #36]	; 0x24
    1722:	f107 0310 	add.w	r3, r7, #16
    1726:	f107 0128 	add.w	r1, r7, #40	; 0x28
		uint8_t j=0;
    172a:	2400      	movs	r4, #0
    172c:	e001      	b.n	1732 <grid_port_process_inbound+0x52>
		for(uint8_t i=0; i<port_count; i++){
    172e:	428b      	cmp	r3, r1
    1730:	d00e      	beq.n	1750 <grid_port_process_inbound+0x70>
			if (port_array_default[i]->partner_status != 0){
    1732:	f853 2b04 	ldr.w	r2, [r3], #4
    1736:	f892 0517 	ldrb.w	r0, [r2, #1303]	; 0x517
    173a:	2800      	cmp	r0, #0
    173c:	d0f7      	beq.n	172e <grid_port_process_inbound+0x4e>
				port_array[j] = port_array_default[i];
    173e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1742:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1746:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    174a:	3401      	adds	r4, #1
    174c:	b2e4      	uxtb	r4, r4
    174e:	e7ee      	b.n	172e <grid_port_process_inbound+0x4e>
		for (uint8_t i=0; i<port_count; i++)
    1750:	2c00      	cmp	r4, #0
    1752:	d079      	beq.n	1848 <grid_port_process_inbound+0x168>
    1754:	f107 0928 	add.w	r9, r7, #40	; 0x28
    1758:	1e66      	subs	r6, r4, #1
    175a:	b2f6      	uxtb	r6, r6
    175c:	3601      	adds	r6, #1
    175e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1762:	f8df b140 	ldr.w	fp, [pc, #320]	; 18a4 <grid_port_process_inbound+0x1c4>
    1766:	f8c7 900c 	str.w	r9, [r7, #12]
    176a:	e007      	b.n	177c <grid_port_process_inbound+0x9c>
    176c:	f500 609c 	add.w	r0, r0, #1248	; 0x4e0
    1770:	47d8      	blx	fp
    1772:	4580      	cmp	r8, r0
    1774:	d80c      	bhi.n	1790 <grid_port_process_inbound+0xb0>
		for (uint8_t i=0; i<port_count; i++)
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	42b3      	cmp	r3, r6
    177a:	d016      	beq.n	17aa <grid_port_process_inbound+0xca>
			if (port_array[i] != por || loopback){
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	f853 0b04 	ldr.w	r0, [r3], #4
    1782:	60fb      	str	r3, [r7, #12]
    1784:	4285      	cmp	r5, r0
    1786:	d1f1      	bne.n	176c <grid_port_process_inbound+0x8c>
    1788:	f1ba 0f00 	cmp.w	sl, #0
    178c:	d0f3      	beq.n	1776 <grid_port_process_inbound+0x96>
    178e:	e7ed      	b.n	176c <grid_port_process_inbound+0x8c>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    1790:	23c8      	movs	r3, #200	; 0xc8
    1792:	9301      	str	r3, [sp, #4]
    1794:	2302      	movs	r3, #2
    1796:	9300      	str	r3, [sp, #0]
    1798:	2300      	movs	r3, #0
    179a:	2264      	movs	r2, #100	; 0x64
    179c:	4611      	mov	r1, r2
    179e:	483a      	ldr	r0, [pc, #232]	; (1888 <grid_port_process_inbound+0x1a8>)
    17a0:	4c3a      	ldr	r4, [pc, #232]	; (188c <grid_port_process_inbound+0x1ac>)
    17a2:	47a0      	blx	r4
    17a4:	f8d7 d004 	ldr.w	sp, [r7, #4]
    17a8:	e7a7      	b.n	16fa <grid_port_process_inbound+0x1a>
    17aa:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17ac:	68b8      	ldr	r0, [r7, #8]
    17ae:	4b38      	ldr	r3, [pc, #224]	; (1890 <grid_port_process_inbound+0x1b0>)
    17b0:	4798      	blx	r3
    17b2:	4580      	cmp	r8, r0
    17b4:	d000      	beq.n	17b8 <grid_port_process_inbound+0xd8>
    17b6:	e7fe      	b.n	17b6 <grid_port_process_inbound+0xd6>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17b8:	4e36      	ldr	r6, [pc, #216]	; (1894 <grid_port_process_inbound+0x1b4>)
    17ba:	e004      	b.n	17c6 <grid_port_process_inbound+0xe6>
			if (port_array[i] != por || loopback){
    17bc:	f1ba 0f00 	cmp.w	sl, #0
    17c0:	d105      	bne.n	17ce <grid_port_process_inbound+0xee>
		for (uint8_t i=0; i<port_count; i++)
    17c2:	45d9      	cmp	r9, fp
    17c4:	d045      	beq.n	1852 <grid_port_process_inbound+0x172>
			if (port_array[i] != por || loopback){
    17c6:	f859 0b04 	ldr.w	r0, [r9], #4
    17ca:	4285      	cmp	r5, r0
    17cc:	d0f6      	beq.n	17bc <grid_port_process_inbound+0xdc>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17ce:	4641      	mov	r1, r8
    17d0:	f500 609c 	add.w	r0, r0, #1248	; 0x4e0
    17d4:	47b0      	blx	r6
    17d6:	e7f4      	b.n	17c2 <grid_port_process_inbound+0xe2>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17d8:	6879      	ldr	r1, [r7, #4]
    17da:	f500 609c 	add.w	r0, r0, #1248	; 0x4e0
    17de:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	42b3      	cmp	r3, r6
    17e4:	d007      	beq.n	17f6 <grid_port_process_inbound+0x116>
				if (port_array[i] != por || loopback){
    17e6:	f856 0b04 	ldr.w	r0, [r6], #4
    17ea:	4285      	cmp	r5, r0
    17ec:	d1f4      	bne.n	17d8 <grid_port_process_inbound+0xf8>
    17ee:	f1ba 0f00 	cmp.w	sl, #0
    17f2:	d0f5      	beq.n	17e0 <grid_port_process_inbound+0x100>
    17f4:	e7f0      	b.n	17d8 <grid_port_process_inbound+0xf8>
    17f6:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    17fa:	fa1f f38b 	uxth.w	r3, fp
    17fe:	4543      	cmp	r3, r8
    1800:	d208      	bcs.n	1814 <grid_port_process_inbound+0x134>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1802:	68b8      	ldr	r0, [r7, #8]
    1804:	4b24      	ldr	r3, [pc, #144]	; (1898 <grid_port_process_inbound+0x1b8>)
    1806:	4798      	blx	r3
    1808:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    180a:	2c00      	cmp	r4, #0
    180c:	d0f3      	beq.n	17f6 <grid_port_process_inbound+0x116>
    180e:	f107 0628 	add.w	r6, r7, #40	; 0x28
    1812:	e7e8      	b.n	17e6 <grid_port_process_inbound+0x106>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    1814:	68b8      	ldr	r0, [r7, #8]
    1816:	4b21      	ldr	r3, [pc, #132]	; (189c <grid_port_process_inbound+0x1bc>)
    1818:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    181a:	2c00      	cmp	r4, #0
    181c:	f43f af6e 	beq.w	16fc <grid_port_process_inbound+0x1c>
    1820:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1824:	4e1e      	ldr	r6, [pc, #120]	; (18a0 <grid_port_process_inbound+0x1c0>)
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	4698      	mov	r8, r3
    182a:	e005      	b.n	1838 <grid_port_process_inbound+0x158>
			if (port_array[i] != por || loopback){
    182c:	f1ba 0f00 	cmp.w	sl, #0
    1830:	d106      	bne.n	1840 <grid_port_process_inbound+0x160>
		for (uint8_t i=0; i<port_count; i++)
    1832:	45a0      	cmp	r8, r4
    1834:	f43f af62 	beq.w	16fc <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    1838:	f854 0b04 	ldr.w	r0, [r4], #4
    183c:	4285      	cmp	r5, r0
    183e:	d0f5      	beq.n	182c <grid_port_process_inbound+0x14c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1840:	f500 609c 	add.w	r0, r0, #1248	; 0x4e0
    1844:	47b0      	blx	r6
    1846:	e7f4      	b.n	1832 <grid_port_process_inbound+0x152>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1848:	68b8      	ldr	r0, [r7, #8]
    184a:	4b11      	ldr	r3, [pc, #68]	; (1890 <grid_port_process_inbound+0x1b0>)
    184c:	4798      	blx	r3
    184e:	4540      	cmp	r0, r8
    1850:	d1b1      	bne.n	17b6 <grid_port_process_inbound+0xd6>
    1852:	1e63      	subs	r3, r4, #1
    1854:	b2db      	uxtb	r3, r3
    1856:	f107 0240 	add.w	r2, r7, #64	; 0x40
    185a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    185e:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    1860:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1864:	f8df 9040 	ldr.w	r9, [pc, #64]	; 18a8 <grid_port_process_inbound+0x1c8>
    1868:	60fb      	str	r3, [r7, #12]
    186a:	e7ca      	b.n	1802 <grid_port_process_inbound+0x122>
    186c:	000013d1 	.word	0x000013d1
    1870:	200012ac 	.word	0x200012ac
    1874:	20003140 	.word	0x20003140
    1878:	2000270c 	.word	0x2000270c
    187c:	200021e0 	.word	0x200021e0
    1880:	20001808 	.word	0x20001808
    1884:	20002c28 	.word	0x20002c28
    1888:	20001d30 	.word	0x20001d30
    188c:	000039cd 	.word	0x000039cd
    1890:	00001443 	.word	0x00001443
    1894:	00001375 	.word	0x00001375
    1898:	000014cd 	.word	0x000014cd
    189c:	000014f5 	.word	0x000014f5
    18a0:	000013c1 	.word	0x000013c1
    18a4:	00001361 	.word	0x00001361
    18a8:	000013a5 	.word	0x000013a5

000018ac <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    18ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18b0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    18b4:	af06      	add	r7, sp, #24
    18b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    18b8:	f500 669c 	add.w	r6, r0, #1248	; 0x4e0
    18bc:	4630      	mov	r0, r6
    18be:	4b8a      	ldr	r3, [pc, #552]	; (1ae8 <grid_port_process_outbound_usb+0x23c>)
    18c0:	4798      	blx	r3
	
	if (!length){		
    18c2:	2800      	cmp	r0, #0
    18c4:	f000 8227 	beq.w	1d16 <grid_port_process_outbound_usb+0x46a>
    18c8:	4604      	mov	r4, r0
    18ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18cc:	4613      	mov	r3, r2
    18ce:	332f      	adds	r3, #47	; 0x2f
    18d0:	f202 2187 	addw	r1, r2, #647	; 0x287


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    18d4:	2200      	movs	r2, #0
    18d6:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    18da:	428b      	cmp	r3, r1
    18dc:	d1fb      	bne.n	18d6 <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    18de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18e2:	2100      	movs	r1, #0
    18e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18e8:	4b80      	ldr	r3, [pc, #512]	; (1aec <grid_port_process_outbound_usb+0x240>)
    18ea:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    18ec:	4630      	mov	r0, r6
    18ee:	4b80      	ldr	r3, [pc, #512]	; (1af0 <grid_port_process_outbound_usb+0x244>)
    18f0:	4798      	blx	r3
    18f2:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    18f4:	f8df 9238 	ldr.w	r9, [pc, #568]	; 1b30 <grid_port_process_outbound_usb+0x284>
    18f8:	f107 0834 	add.w	r8, r7, #52	; 0x34
    18fc:	4630      	mov	r0, r6
    18fe:	47c8      	blx	r9
    1900:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1904:	3501      	adds	r5, #1
    1906:	b2ed      	uxtb	r5, r5
    1908:	b2ab      	uxth	r3, r5
    190a:	429c      	cmp	r4, r3
    190c:	d8f6      	bhi.n	18fc <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    190e:	4630      	mov	r0, r6
    1910:	4b78      	ldr	r3, [pc, #480]	; (1af4 <grid_port_process_outbound_usb+0x248>)
    1912:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    1914:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1918:	4b77      	ldr	r3, [pc, #476]	; (1af8 <grid_port_process_outbound_usb+0x24c>)
    191a:	4798      	blx	r3
    191c:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    191e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1922:	4b76      	ldr	r3, [pc, #472]	; (1afc <grid_port_process_outbound_usb+0x250>)
    1924:	4798      	blx	r3
    1926:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1928:	f107 0034 	add.w	r0, r7, #52	; 0x34
    192c:	4b74      	ldr	r3, [pc, #464]	; (1b00 <grid_port_process_outbound_usb+0x254>)
    192e:	4798      	blx	r3
    1930:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    1932:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1936:	4b73      	ldr	r3, [pc, #460]	; (1b04 <grid_port_process_outbound_usb+0x258>)
    1938:	4798      	blx	r3
    193a:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    193c:	2500      	movs	r5, #0
    193e:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1942:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1946:	fa4f f388 	sxtb.w	r3, r8
    194a:	627b      	str	r3, [r7, #36]	; 0x24
    194c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    1950:	005b      	lsls	r3, r3, #1
    1952:	1aea      	subs	r2, r5, r3
    1954:	f003 0307 	and.w	r3, r3, #7
    1958:	4619      	mov	r1, r3
    195a:	f002 0307 	and.w	r3, r2, #7
    195e:	460a      	mov	r2, r1
    1960:	bf58      	it	pl
    1962:	425a      	negpl	r2, r3
    1964:	60fa      	str	r2, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1966:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1968:	b273      	sxtb	r3, r6
    196a:	623b      	str	r3, [r7, #32]
    196c:	011b      	lsls	r3, r3, #4
    196e:	60bb      	str	r3, [r7, #8]
    1970:	1e63      	subs	r3, r4, #1
    1972:	b29b      	uxth	r3, r3
    1974:	f103 0901 	add.w	r9, r3, #1
    1978:	46ab      	mov	fp, r5
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
		
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    197a:	464b      	mov	r3, r9
    197c:	46d9      	mov	r9, fp
    197e:	469a      	mov	sl, r3
    1980:	e006      	b.n	1990 <grid_port_process_outbound_usb+0xe4>
				current_start = i;
    1982:	fa5f f58b 	uxtb.w	r5, fp
    1986:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    198a:	45d3      	cmp	fp, sl
    198c:	f000 81be 	beq.w	1d0c <grid_port_process_outbound_usb+0x460>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1990:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1994:	f81b 3003 	ldrb.w	r3, [fp, r3]
    1998:	2b02      	cmp	r3, #2
    199a:	d0f2      	beq.n	1982 <grid_port_process_outbound_usb+0xd6>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    199c:	2b03      	cmp	r3, #3
    199e:	d1f2      	bne.n	1986 <grid_port_process_outbound_usb+0xda>
    19a0:	2d00      	cmp	r5, #0
    19a2:	d0f0      	beq.n	1986 <grid_port_process_outbound_usb+0xda>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    19a4:	462c      	mov	r4, r5
    19a6:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19aa:	2102      	movs	r1, #2
    19ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
    19b0:	1958      	adds	r0, r3, r5
    19b2:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    19b6:	4b54      	ldr	r3, [pc, #336]	; (1b08 <grid_port_process_outbound_usb+0x25c>)
    19b8:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    19ba:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    19be:	d019      	beq.n	19f4 <grid_port_process_outbound_usb+0x148>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    19c0:	2e01      	cmp	r6, #1
    19c2:	f000 80b7 	beq.w	1b34 <grid_port_process_outbound_usb+0x288>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    19c6:	2e04      	cmp	r6, #4
    19c8:	f000 812d 	beq.w	1c26 <grid_port_process_outbound_usb+0x37a>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    19cc:	2e02      	cmp	r6, #2
    19ce:	f000 819b 	beq.w	1d08 <grid_port_process_outbound_usb+0x45c>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    19d2:	f109 0430 	add.w	r4, r9, #48	; 0x30
    19d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19d8:	441c      	add	r4, r3
    19da:	b2c2      	uxtb	r2, r0
    19dc:	494b      	ldr	r1, [pc, #300]	; (1b0c <grid_port_process_outbound_usb+0x260>)
    19de:	4620      	mov	r0, r4
    19e0:	4b4b      	ldr	r3, [pc, #300]	; (1b10 <grid_port_process_outbound_usb+0x264>)
    19e2:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    19e4:	4620      	mov	r0, r4
    19e6:	4b4b      	ldr	r3, [pc, #300]	; (1b14 <grid_port_process_outbound_usb+0x268>)
    19e8:	4798      	blx	r3
    19ea:	4481      	add	r9, r0
    19ec:	fa5f f989 	uxtb.w	r9, r9
				}
				
				current_start = 0;
    19f0:	2500      	movs	r5, #0
    19f2:	e7c8      	b.n	1986 <grid_port_process_outbound_usb+0xda>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    19f4:	1ce8      	adds	r0, r5, #3
    19f6:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19fa:	2102      	movs	r1, #2
    19fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a00:	4418      	add	r0, r3
    1a02:	4b41      	ldr	r3, [pc, #260]	; (1b08 <grid_port_process_outbound_usb+0x25c>)
    1a04:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a06:	1d68      	adds	r0, r5, #5
    1a08:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a0c:	2102      	movs	r1, #2
    1a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a12:	4418      	add	r0, r3
    1a14:	4b3c      	ldr	r3, [pc, #240]	; (1b08 <grid_port_process_outbound_usb+0x25c>)
    1a16:	4798      	blx	r3
    1a18:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a1c:	1de8      	adds	r0, r5, #7
    1a1e:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a22:	2102      	movs	r1, #2
    1a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a28:	4418      	add	r0, r3
    1a2a:	4b37      	ldr	r3, [pc, #220]	; (1b08 <grid_port_process_outbound_usb+0x25c>)
    1a2c:	4798      	blx	r3
    1a2e:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a30:	f105 0009 	add.w	r0, r5, #9
    1a34:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a38:	2102      	movs	r1, #2
    1a3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a3e:	4418      	add	r0, r3
    1a40:	4b31      	ldr	r3, [pc, #196]	; (1b08 <grid_port_process_outbound_usb+0x25c>)
    1a42:	4798      	blx	r3
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1a44:	4b34      	ldr	r3, [pc, #208]	; (1b18 <grid_port_process_outbound_usb+0x26c>)
    1a46:	7a59      	ldrb	r1, [r3, #9]
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1a4e:	424b      	negs	r3, r1
    1a50:	f001 020f 	and.w	r2, r1, #15
    1a54:	f003 030f 	and.w	r3, r3, #15
    1a58:	bf58      	it	pl
    1a5a:	425a      	negpl	r2, r3
    1a5c:	617a      	str	r2, [r7, #20]
    1a5e:	7d3b      	ldrb	r3, [r7, #20]
    1a60:	4619      	mov	r1, r3
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1a62:	b2e4      	uxtb	r4, r4
    1a64:	34e0      	adds	r4, #224	; 0xe0
    1a66:	68bb      	ldr	r3, [r7, #8]
    1a68:	441c      	add	r4, r3
    1a6a:	4b2c      	ldr	r3, [pc, #176]	; (1b1c <grid_port_process_outbound_usb+0x270>)
    1a6c:	fb83 3204 	smull	r3, r2, r3, r4
    1a70:	17e3      	asrs	r3, r4, #31
    1a72:	ebc3 1322 	rsb	r3, r3, r2, asr #4
    1a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a7a:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    1a7e:	b2e4      	uxtb	r4, r4
    1a80:	b2c3      	uxtb	r3, r0
					printf("{\"type\":\"MIDI\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, midi_channel,	midi_command, midi_param1, midi_param2);
    1a82:	62bb      	str	r3, [r7, #40]	; 0x28
    1a84:	9302      	str	r3, [sp, #8]
    1a86:	9401      	str	r4, [sp, #4]
    1a88:	f8cd 8000 	str.w	r8, [sp]
    1a8c:	6139      	str	r1, [r7, #16]
    1a8e:	460b      	mov	r3, r1
    1a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a92:	6a39      	ldr	r1, [r7, #32]
    1a94:	4822      	ldr	r0, [pc, #136]	; (1b20 <grid_port_process_outbound_usb+0x274>)
    1a96:	4d23      	ldr	r5, [pc, #140]	; (1b24 <grid_port_process_outbound_usb+0x278>)
    1a98:	47a8      	blx	r5
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1a9a:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1aa0:	4428      	add	r0, r5
    1aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1aa4:	9205      	str	r2, [sp, #20]
    1aa6:	9404      	str	r4, [sp, #16]
    1aa8:	f8cd 800c 	str.w	r8, [sp, #12]
    1aac:	6939      	ldr	r1, [r7, #16]
    1aae:	9102      	str	r1, [sp, #8]
    1ab0:	69b9      	ldr	r1, [r7, #24]
    1ab2:	9101      	str	r1, [sp, #4]
    1ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1ab6:	9100      	str	r1, [sp, #0]
    1ab8:	6a3b      	ldr	r3, [r7, #32]
    1aba:	69fa      	ldr	r2, [r7, #28]
    1abc:	491a      	ldr	r1, [pc, #104]	; (1b28 <grid_port_process_outbound_usb+0x27c>)
    1abe:	6138      	str	r0, [r7, #16]
    1ac0:	4d13      	ldr	r5, [pc, #76]	; (1b10 <grid_port_process_outbound_usb+0x264>)
    1ac2:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ac4:	6938      	ldr	r0, [r7, #16]
    1ac6:	4b13      	ldr	r3, [pc, #76]	; (1b14 <grid_port_process_outbound_usb+0x268>)
    1ac8:	4798      	blx	r3
    1aca:	4481      	add	r9, r0
    1acc:	fa5f f989 	uxtb.w	r9, r9
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1ad0:	6979      	ldr	r1, [r7, #20]
    1ad2:	ea48 0101 	orr.w	r1, r8, r1
    1ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ad8:	4622      	mov	r2, r4
    1ada:	b2c9      	uxtb	r1, r1
    1adc:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1ae0:	4c12      	ldr	r4, [pc, #72]	; (1b2c <grid_port_process_outbound_usb+0x280>)
    1ae2:	47a0      	blx	r4
				current_start = 0;
    1ae4:	4635      	mov	r5, r6
    1ae6:	e74e      	b.n	1986 <grid_port_process_outbound_usb+0xda>
    1ae8:	000013d1 	.word	0x000013d1
    1aec:	0000c2f3 	.word	0x0000c2f3
    1af0:	00001443 	.word	0x00001443
    1af4:	000014f5 	.word	0x000014f5
    1af8:	00003d31 	.word	0x00003d31
    1afc:	00003d51 	.word	0x00003d51
    1b00:	00003d71 	.word	0x00003d71
    1b04:	00003d91 	.word	0x00003d91
    1b08:	00003a21 	.word	0x00003a21
    1b0c:	0000d8a4 	.word	0x0000d8a4
    1b10:	0000c6e1 	.word	0x0000c6e1
    1b14:	0000c729 	.word	0x0000c729
    1b18:	20001d30 	.word	0x20001d30
    1b1c:	2aaaaaab 	.word	0x2aaaaaab
    1b20:	0000d774 	.word	0x0000d774
    1b24:	0000c45d 	.word	0x0000c45d
    1b28:	0000d7b4 	.word	0x0000d7b4
    1b2c:	0000b125 	.word	0x0000b125
    1b30:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1b34:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1b38:	fa5f f38b 	uxtb.w	r3, fp
    1b3c:	1b5b      	subs	r3, r3, r5
    1b3e:	1eda      	subs	r2, r3, #3
    1b40:	4b77      	ldr	r3, [pc, #476]	; (1d20 <grid_port_process_outbound_usb+0x474>)
    1b42:	fb83 1302 	smull	r1, r3, r3, r2
    1b46:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1b4a:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1b4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1b50:	3207      	adds	r2, #7
    1b52:	f022 0207 	bic.w	r2, r2, #7
    1b56:	ebad 0d02 	sub.w	sp, sp, r2
    1b5a:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d05e      	beq.n	1c1e <grid_port_process_outbound_usb+0x372>
    1b60:	3403      	adds	r4, #3
    1b62:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1b66:	440c      	add	r4, r1
    1b68:	4690      	mov	r8, r2
    1b6a:	3b01      	subs	r3, #1
    1b6c:	b2db      	uxtb	r3, r3
    1b6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b72:	3509      	adds	r5, #9
    1b74:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b78:	18cb      	adds	r3, r1, r3
    1b7a:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b7c:	f8c7 b004 	str.w	fp, [r7, #4]
    1b80:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b84:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b88:	2102      	movs	r1, #2
    1b8a:	4620      	mov	r0, r4
    1b8c:	4b65      	ldr	r3, [pc, #404]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1b8e:	4798      	blx	r3
    1b90:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b92:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b96:	2102      	movs	r1, #2
    1b98:	1860      	adds	r0, r4, r1
    1b9a:	4b62      	ldr	r3, [pc, #392]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1b9c:	4798      	blx	r3
    1b9e:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1ba0:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1ba4:	2102      	movs	r1, #2
    1ba6:	1d20      	adds	r0, r4, #4
    1ba8:	4b5e      	ldr	r3, [pc, #376]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1baa:	4798      	blx	r3
    1bac:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1bae:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    1bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bb4:	449a      	add	sl, r3
    1bb6:	4b5c      	ldr	r3, [pc, #368]	; (1d28 <grid_port_process_outbound_usb+0x47c>)
    1bb8:	4798      	blx	r3
    1bba:	9005      	str	r0, [sp, #20]
    1bbc:	b2eb      	uxtb	r3, r5
    1bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    1bc0:	9304      	str	r3, [sp, #16]
    1bc2:	b2f6      	uxtb	r6, r6
    1bc4:	9603      	str	r6, [sp, #12]
    1bc6:	fa5f f38b 	uxtb.w	r3, fp
    1bca:	9302      	str	r3, [sp, #8]
    1bcc:	69bb      	ldr	r3, [r7, #24]
    1bce:	9301      	str	r3, [sp, #4]
    1bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bd2:	9300      	str	r3, [sp, #0]
    1bd4:	6a3b      	ldr	r3, [r7, #32]
    1bd6:	69fa      	ldr	r2, [r7, #28]
    1bd8:	4954      	ldr	r1, [pc, #336]	; (1d2c <grid_port_process_outbound_usb+0x480>)
    1bda:	4650      	mov	r0, sl
    1bdc:	4d54      	ldr	r5, [pc, #336]	; (1d30 <grid_port_process_outbound_usb+0x484>)
    1bde:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1be0:	4650      	mov	r0, sl
    1be2:	4b54      	ldr	r3, [pc, #336]	; (1d34 <grid_port_process_outbound_usb+0x488>)
    1be4:	4798      	blx	r3
    1be6:	4481      	add	r9, r0
    1be8:	fa5f f989 	uxtb.w	r9, r9
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bec:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bf0:	2e82      	cmp	r6, #130	; 0x82
    1bf2:	bf14      	ite	ne
    1bf4:	2600      	movne	r6, #0
    1bf6:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1bf8:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bfe:	2b80      	cmp	r3, #128	; 0x80
    1c00:	bf14      	ite	ne
    1c02:	2500      	movne	r5, #0
    1c04:	2501      	moveq	r5, #1
    1c06:	f888 5002 	strb.w	r5, [r8, #2]
    1c0a:	3406      	adds	r4, #6
    1c0c:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1c10:	697b      	ldr	r3, [r7, #20]
    1c12:	429c      	cmp	r4, r3
    1c14:	d1b6      	bne.n	1b84 <grid_port_process_outbound_usb+0x2d8>
    1c16:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1c1a:	f8d7 a000 	ldr.w	sl, [r7]
    1c1e:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1c22:	2500      	movs	r5, #0
    1c24:	e6af      	b.n	1986 <grid_port_process_outbound_usb+0xda>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c26:	1ce8      	adds	r0, r5, #3
    1c28:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c2c:	2102      	movs	r1, #2
    1c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c32:	4418      	add	r0, r3
    1c34:	4b3b      	ldr	r3, [pc, #236]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1c36:	4798      	blx	r3
    1c38:	62b8      	str	r0, [r7, #40]	; 0x28
    1c3a:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c3c:	1d60      	adds	r0, r4, #5
    1c3e:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c42:	2102      	movs	r1, #2
    1c44:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c48:	4418      	add	r0, r3
    1c4a:	4b36      	ldr	r3, [pc, #216]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1c4c:	4798      	blx	r3
    1c4e:	4680      	mov	r8, r0
    1c50:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c52:	1de0      	adds	r0, r4, #7
    1c54:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c58:	2102      	movs	r1, #2
    1c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c5e:	4418      	add	r0, r3
    1c60:	4b30      	ldr	r3, [pc, #192]	; (1d24 <grid_port_process_outbound_usb+0x478>)
    1c62:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c64:	2d64      	cmp	r5, #100	; 0x64
    1c66:	d003      	beq.n	1c70 <grid_port_process_outbound_usb+0x3c4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c68:	2d66      	cmp	r5, #102	; 0x66
    1c6a:	d025      	beq.n	1cb8 <grid_port_process_outbound_usb+0x40c>
				current_start = 0;
    1c6c:	2500      	movs	r5, #0
    1c6e:	e68a      	b.n	1986 <grid_port_process_outbound_usb+0xda>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c70:	2e65      	cmp	r6, #101	; 0x65
    1c72:	d001      	beq.n	1c78 <grid_port_process_outbound_usb+0x3cc>
				current_start = 0;
    1c74:	2500      	movs	r5, #0
    1c76:	e686      	b.n	1986 <grid_port_process_outbound_usb+0xda>
    1c78:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1c7a:	4621      	mov	r1, r4
    1c7c:	482e      	ldr	r0, [pc, #184]	; (1d38 <grid_port_process_outbound_usb+0x48c>)
    1c7e:	4b2f      	ldr	r3, [pc, #188]	; (1d3c <grid_port_process_outbound_usb+0x490>)
    1c80:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c82:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c88:	441d      	add	r5, r3
    1c8a:	9404      	str	r4, [sp, #16]
    1c8c:	9603      	str	r6, [sp, #12]
    1c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1c92:	9302      	str	r3, [sp, #8]
    1c94:	69bb      	ldr	r3, [r7, #24]
    1c96:	9301      	str	r3, [sp, #4]
    1c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c9a:	9300      	str	r3, [sp, #0]
    1c9c:	6a3b      	ldr	r3, [r7, #32]
    1c9e:	69fa      	ldr	r2, [r7, #28]
    1ca0:	4927      	ldr	r1, [pc, #156]	; (1d40 <grid_port_process_outbound_usb+0x494>)
    1ca2:	4628      	mov	r0, r5
    1ca4:	4c22      	ldr	r4, [pc, #136]	; (1d30 <grid_port_process_outbound_usb+0x484>)
    1ca6:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ca8:	4628      	mov	r0, r5
    1caa:	4b22      	ldr	r3, [pc, #136]	; (1d34 <grid_port_process_outbound_usb+0x488>)
    1cac:	4798      	blx	r3
    1cae:	4481      	add	r9, r0
    1cb0:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1cb4:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1cb6:	e666      	b.n	1986 <grid_port_process_outbound_usb+0xda>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1cb8:	2e67      	cmp	r6, #103	; 0x67
    1cba:	d001      	beq.n	1cc0 <grid_port_process_outbound_usb+0x414>
				current_start = 0;
    1cbc:	2500      	movs	r5, #0
    1cbe:	e662      	b.n	1986 <grid_port_process_outbound_usb+0xda>
    1cc0:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1cc2:	462b      	mov	r3, r5
    1cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cc6:	6a39      	ldr	r1, [r7, #32]
    1cc8:	481e      	ldr	r0, [pc, #120]	; (1d44 <grid_port_process_outbound_usb+0x498>)
    1cca:	4c1f      	ldr	r4, [pc, #124]	; (1d48 <grid_port_process_outbound_usb+0x49c>)
    1ccc:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1cce:	f109 0630 	add.w	r6, r9, #48	; 0x30
    1cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1cd4:	4416      	add	r6, r2
    1cd6:	9504      	str	r5, [sp, #16]
    1cd8:	fa5f f388 	uxtb.w	r3, r8
    1cdc:	9303      	str	r3, [sp, #12]
    1cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1ce2:	9302      	str	r3, [sp, #8]
    1ce4:	69ba      	ldr	r2, [r7, #24]
    1ce6:	9201      	str	r2, [sp, #4]
    1ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cea:	9200      	str	r2, [sp, #0]
    1cec:	6a3b      	ldr	r3, [r7, #32]
    1cee:	69fa      	ldr	r2, [r7, #28]
    1cf0:	4913      	ldr	r1, [pc, #76]	; (1d40 <grid_port_process_outbound_usb+0x494>)
    1cf2:	4630      	mov	r0, r6
    1cf4:	4c0e      	ldr	r4, [pc, #56]	; (1d30 <grid_port_process_outbound_usb+0x484>)
    1cf6:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1cf8:	4630      	mov	r0, r6
    1cfa:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <grid_port_process_outbound_usb+0x488>)
    1cfc:	4798      	blx	r3
    1cfe:	4481      	add	r9, r0
    1d00:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1d04:	2500      	movs	r5, #0
    1d06:	e63e      	b.n	1986 <grid_port_process_outbound_usb+0xda>
    1d08:	2500      	movs	r5, #0
    1d0a:	e63c      	b.n	1986 <grid_port_process_outbound_usb+0xda>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1d0c:	4649      	mov	r1, r9
    1d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1d10:	3030      	adds	r0, #48	; 0x30
    1d12:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <grid_port_process_outbound_usb+0x4a0>)
    1d14:	4798      	blx	r3
				
		
	}
	
	
}
    1d16:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1d1a:	46bd      	mov	sp, r7
    1d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d20:	2aaaaaab 	.word	0x2aaaaaab
    1d24:	00003a21 	.word	0x00003a21
    1d28:	00003a99 	.word	0x00003a99
    1d2c:	0000d7fc 	.word	0x0000d7fc
    1d30:	0000c6e1 	.word	0x0000c6e1
    1d34:	0000c729 	.word	0x0000c729
    1d38:	20001d30 	.word	0x20001d30
    1d3c:	00003b89 	.word	0x00003b89
    1d40:	0000d844 	.word	0x0000d844
    1d44:	0000d870 	.word	0x0000d870
    1d48:	0000c45d 	.word	0x0000c45d
    1d4c:	0000a961 	.word	0x0000a961

00001d50 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d54:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1d58:	f500 669c 	add.w	r6, r0, #1248	; 0x4e0
    1d5c:	4630      	mov	r0, r6
    1d5e:	4b48      	ldr	r3, [pc, #288]	; (1e80 <grid_port_process_outbound_ui+0x130>)
    1d60:	4798      	blx	r3
	
	if (!length){
    1d62:	b918      	cbnz	r0, 1d6c <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1d64:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d6c:	4605      	mov	r5, r0
		uint8_t temp[500] = {0};
    1d6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1d72:	2100      	movs	r1, #0
    1d74:	a805      	add	r0, sp, #20
    1d76:	4b43      	ldr	r3, [pc, #268]	; (1e84 <grid_port_process_outbound_ui+0x134>)
    1d78:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    1d7a:	4630      	mov	r0, r6
    1d7c:	4b42      	ldr	r3, [pc, #264]	; (1e88 <grid_port_process_outbound_ui+0x138>)
    1d7e:	4798      	blx	r3
    1d80:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1d82:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1ea8 <grid_port_process_outbound_ui+0x158>
    1d86:	af05      	add	r7, sp, #20
    1d88:	4630      	mov	r0, r6
    1d8a:	47c0      	blx	r8
    1d8c:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1d8e:	3401      	adds	r4, #1
    1d90:	b2e4      	uxtb	r4, r4
    1d92:	b2a3      	uxth	r3, r4
    1d94:	429d      	cmp	r5, r3
    1d96:	d8f7      	bhi.n	1d88 <grid_port_process_outbound_ui+0x38>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1d98:	4630      	mov	r0, r6
    1d9a:	4b3c      	ldr	r3, [pc, #240]	; (1e8c <grid_port_process_outbound_ui+0x13c>)
    1d9c:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1d9e:	ac05      	add	r4, sp, #20
    1da0:	4620      	mov	r0, r4
    1da2:	4b3b      	ldr	r3, [pc, #236]	; (1e90 <grid_port_process_outbound_ui+0x140>)
    1da4:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1da6:	4620      	mov	r0, r4
    1da8:	4b3a      	ldr	r3, [pc, #232]	; (1e94 <grid_port_process_outbound_ui+0x144>)
    1daa:	4798      	blx	r3
    1dac:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1dae:	4620      	mov	r0, r4
    1db0:	4b39      	ldr	r3, [pc, #228]	; (1e98 <grid_port_process_outbound_ui+0x148>)
    1db2:	4798      	blx	r3
    1db4:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1db6:	4620      	mov	r0, r4
    1db8:	4b38      	ldr	r3, [pc, #224]	; (1e9c <grid_port_process_outbound_ui+0x14c>)
    1dba:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1dbc:	2000      	movs	r0, #0
    1dbe:	f88d 0013 	strb.w	r0, [sp, #19]
    1dc2:	4626      	mov	r6, r4
    1dc4:	3d01      	subs	r5, #1
    1dc6:	b2ad      	uxth	r5, r5
    1dc8:	3501      	adds	r5, #1
    1dca:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1dcc:	4f34      	ldr	r7, [pc, #208]	; (1ea0 <grid_port_process_outbound_ui+0x150>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1dce:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1eac <grid_port_process_outbound_ui+0x15c>
    1dd2:	e004      	b.n	1dde <grid_port_process_outbound_ui+0x8e>
    1dd4:	1ba0      	subs	r0, r4, r6
    1dd6:	b2c0      	uxtb	r0, r0
    1dd8:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    1dda:	42ac      	cmp	r4, r5
    1ddc:	d0c2      	beq.n	1d64 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1dde:	7823      	ldrb	r3, [r4, #0]
    1de0:	2b02      	cmp	r3, #2
    1de2:	d0f7      	beq.n	1dd4 <grid_port_process_outbound_ui+0x84>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1de4:	2b03      	cmp	r3, #3
    1de6:	d1f7      	bne.n	1dd8 <grid_port_process_outbound_ui+0x88>
    1de8:	2800      	cmp	r0, #0
    1dea:	d0f5      	beq.n	1dd8 <grid_port_process_outbound_ui+0x88>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1dec:	4680      	mov	r8, r0
    1dee:	ab82      	add	r3, sp, #520	; 0x208
    1df0:	4418      	add	r0, r3
    1df2:	f10d 0213 	add.w	r2, sp, #19
    1df6:	2102      	movs	r1, #2
    1df8:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1dfc:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1dfe:	b2c0      	uxtb	r0, r0
    1e00:	2803      	cmp	r0, #3
    1e02:	d001      	beq.n	1e08 <grid_port_process_outbound_ui+0xb8>
				current_start = 0;
    1e04:	2000      	movs	r0, #0
    1e06:	e7e7      	b.n	1dd8 <grid_port_process_outbound_ui+0x88>
					if (dx == 0 && dy == 0){
    1e08:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    1e0c:	d136      	bne.n	1e7c <grid_port_process_outbound_ui+0x12c>
    1e0e:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    1e12:	d001      	beq.n	1e18 <grid_port_process_outbound_ui+0xc8>
				current_start = 0;
    1e14:	2000      	movs	r0, #0
    1e16:	e7df      	b.n	1dd8 <grid_port_process_outbound_ui+0x88>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1e18:	f108 0003 	add.w	r0, r8, #3
    1e1c:	f10d 0213 	add.w	r2, sp, #19
    1e20:	2102      	movs	r1, #2
    1e22:	ab05      	add	r3, sp, #20
    1e24:	4418      	add	r0, r3
    1e26:	47b8      	blx	r7
    1e28:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1e2a:	f108 0005 	add.w	r0, r8, #5
    1e2e:	f10d 0213 	add.w	r2, sp, #19
    1e32:	2102      	movs	r1, #2
    1e34:	ab05      	add	r3, sp, #20
    1e36:	4418      	add	r0, r3
    1e38:	47b8      	blx	r7
    1e3a:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1e3c:	f108 0007 	add.w	r0, r8, #7
    1e40:	f10d 0213 	add.w	r2, sp, #19
    1e44:	2102      	movs	r1, #2
    1e46:	ab05      	add	r3, sp, #20
    1e48:	4418      	add	r0, r3
    1e4a:	47b8      	blx	r7
    1e4c:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1e4e:	f108 0009 	add.w	r0, r8, #9
    1e52:	f10d 0213 	add.w	r2, sp, #19
    1e56:	2102      	movs	r1, #2
    1e58:	ab05      	add	r3, sp, #20
    1e5a:	4418      	add	r0, r3
    1e5c:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1e5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1e62:	2a63      	cmp	r2, #99	; 0x63
    1e64:	d001      	beq.n	1e6a <grid_port_process_outbound_ui+0x11a>
				current_start = 0;
    1e66:	2000      	movs	r0, #0
    1e68:	e7b6      	b.n	1dd8 <grid_port_process_outbound_ui+0x88>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1e6a:	b2c3      	uxtb	r3, r0
    1e6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e70:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1e74:	480b      	ldr	r0, [pc, #44]	; (1ea4 <grid_port_process_outbound_ui+0x154>)
    1e76:	47d8      	blx	fp
				current_start = 0;
    1e78:	2000      	movs	r0, #0
    1e7a:	e7ad      	b.n	1dd8 <grid_port_process_outbound_ui+0x88>
    1e7c:	2000      	movs	r0, #0
    1e7e:	e7ab      	b.n	1dd8 <grid_port_process_outbound_ui+0x88>
    1e80:	000013d1 	.word	0x000013d1
    1e84:	0000c2f3 	.word	0x0000c2f3
    1e88:	00001443 	.word	0x00001443
    1e8c:	000014f5 	.word	0x000014f5
    1e90:	00003d31 	.word	0x00003d31
    1e94:	00003d51 	.word	0x00003d51
    1e98:	00003d71 	.word	0x00003d71
    1e9c:	00003d91 	.word	0x00003d91
    1ea0:	00003a21 	.word	0x00003a21
    1ea4:	200036c4 	.word	0x200036c4
    1ea8:	000014cd 	.word	0x000014cd
    1eac:	000020b9 	.word	0x000020b9

00001eb0 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1eb0:	8a03      	ldrh	r3, [r0, #16]
    1eb2:	b103      	cbz	r3, 1eb6 <grid_port_process_outbound_usart+0x6>
    1eb4:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eba:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1ebc:	f500 669c 	add.w	r6, r0, #1248	; 0x4e0
    1ec0:	4630      	mov	r0, r6
    1ec2:	4b11      	ldr	r3, [pc, #68]	; (1f08 <grid_port_process_outbound_usart+0x58>)
    1ec4:	4798      	blx	r3
    1ec6:	4604      	mov	r4, r0
    1ec8:	4607      	mov	r7, r0
		
		if (!packet_size){
    1eca:	b910      	cbnz	r0, 1ed2 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1ecc:	2000      	movs	r0, #0
    1ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1ed2:	4630      	mov	r0, r6
    1ed4:	4b0d      	ldr	r3, [pc, #52]	; (1f0c <grid_port_process_outbound_usart+0x5c>)
    1ed6:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1ed8:	822c      	strh	r4, [r5, #16]
    1eda:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1edc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f18 <grid_port_process_outbound_usart+0x68>
    1ee0:	4630      	mov	r0, r6
    1ee2:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1ee4:	192b      	adds	r3, r5, r4
    1ee6:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
			for (uint8_t i = 0; i<packet_size; i++){
    1eea:	3401      	adds	r4, #1
    1eec:	b2e4      	uxtb	r4, r4
    1eee:	42a7      	cmp	r7, r4
    1ef0:	d8f6      	bhi.n	1ee0 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1ef2:	4630      	mov	r0, r6
    1ef4:	4b06      	ldr	r3, [pc, #24]	; (1f10 <grid_port_process_outbound_usart+0x60>)
    1ef6:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1ef8:	8a2a      	ldrh	r2, [r5, #16]
    1efa:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1efe:	68a8      	ldr	r0, [r5, #8]
    1f00:	4b04      	ldr	r3, [pc, #16]	; (1f14 <grid_port_process_outbound_usart+0x64>)
    1f02:	4798      	blx	r3
			
		}
		
	}
	
}
    1f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f08:	000013d1 	.word	0x000013d1
    1f0c:	00001443 	.word	0x00001443
    1f10:	000014f5 	.word	0x000014f5
    1f14:	00004bc5 	.word	0x00004bc5
    1f18:	000014cd 	.word	0x000014cd

00001f1c <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1f1c:	2201      	movs	r2, #1
    1f1e:	4b01      	ldr	r3, [pc, #4]	; (1f24 <grid_led_hardware_transfer_complete_cb+0x8>)
    1f20:	701a      	strb	r2, [r3, #0]
    1f22:	4770      	bx	lr
    1f24:	200012a8 	.word	0x200012a8

00001f28 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1f28:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1f2a:	7844      	ldrb	r4, [r0, #1]
    1f2c:	428c      	cmp	r4, r1
    1f2e:	d802      	bhi.n	1f36 <grid_led_set_color+0xe>
		return -1;		
    1f30:	20ff      	movs	r0, #255	; 0xff
}
    1f32:	bc30      	pop	{r4, r5}
    1f34:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1f36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f3a:	0089      	lsls	r1, r1, #2
    1f3c:	4c09      	ldr	r4, [pc, #36]	; (1f64 <grid_led_set_color+0x3c>)
    1f3e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1f42:	68c3      	ldr	r3, [r0, #12]
    1f44:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1f46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1f4a:	68c3      	ldr	r3, [r0, #12]
    1f4c:	440b      	add	r3, r1
    1f4e:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1f50:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1f54:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1f58:	68c3      	ldr	r3, [r0, #12]
    1f5a:	4419      	add	r1, r3
    1f5c:	608a      	str	r2, [r1, #8]
		return 0;
    1f5e:	2000      	movs	r0, #0
    1f60:	e7e7      	b.n	1f32 <grid_led_set_color+0xa>
    1f62:	bf00      	nop
    1f64:	20001dd0 	.word	0x20001dd0

00001f68 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1f68:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1f6a:	4c06      	ldr	r4, [pc, #24]	; (1f84 <grid_led_hardware_init+0x1c>)
    1f6c:	f100 0114 	add.w	r1, r0, #20
    1f70:	4620      	mov	r0, r4
    1f72:	4b05      	ldr	r3, [pc, #20]	; (1f88 <grid_led_hardware_init+0x20>)
    1f74:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1f76:	4a05      	ldr	r2, [pc, #20]	; (1f8c <grid_led_hardware_init+0x24>)
    1f78:	2100      	movs	r1, #0
    1f7a:	4620      	mov	r0, r4
    1f7c:	4b04      	ldr	r3, [pc, #16]	; (1f90 <grid_led_hardware_init+0x28>)
    1f7e:	4798      	blx	r3
    1f80:	bd10      	pop	{r4, pc}
    1f82:	bf00      	nop
    1f84:	20001128 	.word	0x20001128
    1f88:	0000511d 	.word	0x0000511d
    1f8c:	00001f1d 	.word	0x00001f1d
    1f90:	000050ed 	.word	0x000050ed

00001f94 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1f94:	7840      	ldrb	r0, [r0, #1]
    1f96:	4770      	bx	lr

00001f98 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1f98:	7843      	ldrb	r3, [r0, #1]
    1f9a:	b1f3      	cbz	r3, 1fda <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1f9c:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1f9e:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1fa0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1fa4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1fa8:	6902      	ldr	r2, [r0, #16]
    1faa:	440a      	add	r2, r1
    1fac:	7ad1      	ldrb	r1, [r2, #11]
    1fae:	7b14      	ldrb	r4, [r2, #12]
    1fb0:	4421      	add	r1, r4
    1fb2:	72d1      	strb	r1, [r2, #11]
    1fb4:	7842      	ldrb	r2, [r0, #1]
    1fb6:	441a      	add	r2, r3
    1fb8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1fc0:	6901      	ldr	r1, [r0, #16]
    1fc2:	440a      	add	r2, r1
    1fc4:	7ad1      	ldrb	r1, [r2, #11]
    1fc6:	7b14      	ldrb	r4, [r2, #12]
    1fc8:	4421      	add	r1, r4
    1fca:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1fcc:	3301      	adds	r3, #1
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	7842      	ldrb	r2, [r0, #1]
    1fd2:	429a      	cmp	r2, r3
    1fd4:	d8e4      	bhi.n	1fa0 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1fda:	4770      	bx	lr

00001fdc <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1fdc:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1fde:	7844      	ldrb	r4, [r0, #1]
    1fe0:	fb02 1404 	mla	r4, r2, r4, r1
    1fe4:	6905      	ldr	r5, [r0, #16]
    1fe6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1fea:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1fee:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1ff0:	7843      	ldrb	r3, [r0, #1]
    1ff2:	fb02 1303 	mla	r3, r2, r3, r1
    1ff6:	6904      	ldr	r4, [r0, #16]
    1ff8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ffc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2000:	4423      	add	r3, r4
    2002:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2006:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    2008:	7843      	ldrb	r3, [r0, #1]
    200a:	fb02 1203 	mla	r2, r2, r3, r1
    200e:	6903      	ldr	r3, [r0, #16]
    2010:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2014:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2018:	441a      	add	r2, r3
    201a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    201e:	7093      	strb	r3, [r2, #2]
}
    2020:	bc70      	pop	{r4, r5, r6}
    2022:	4770      	bx	lr

00002024 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2024:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    2026:	7844      	ldrb	r4, [r0, #1]
    2028:	fb02 1404 	mla	r4, r2, r4, r1
    202c:	6905      	ldr	r5, [r0, #16]
    202e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2032:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2036:	442c      	add	r4, r5
    2038:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    203a:	7843      	ldrb	r3, [r0, #1]
    203c:	fb02 1303 	mla	r3, r2, r3, r1
    2040:	6904      	ldr	r4, [r0, #16]
    2042:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2046:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    204a:	4423      	add	r3, r4
    204c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2050:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    2052:	7843      	ldrb	r3, [r0, #1]
    2054:	fb02 1203 	mla	r2, r2, r3, r1
    2058:	6903      	ldr	r3, [r0, #16]
    205a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    205e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2062:	441a      	add	r2, r3
    2064:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2068:	7153      	strb	r3, [r2, #5]
}
    206a:	bc70      	pop	{r4, r5, r6}
    206c:	4770      	bx	lr

0000206e <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    206e:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2070:	7844      	ldrb	r4, [r0, #1]
    2072:	fb02 1404 	mla	r4, r2, r4, r1
    2076:	6905      	ldr	r5, [r0, #16]
    2078:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    207c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2080:	442c      	add	r4, r5
    2082:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    2084:	7843      	ldrb	r3, [r0, #1]
    2086:	fb02 1303 	mla	r3, r2, r3, r1
    208a:	6904      	ldr	r4, [r0, #16]
    208c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2090:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2094:	4423      	add	r3, r4
    2096:	f89d 400c 	ldrb.w	r4, [sp, #12]
    209a:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    209c:	7843      	ldrb	r3, [r0, #1]
    209e:	fb02 1203 	mla	r2, r2, r3, r1
    20a2:	6903      	ldr	r3, [r0, #16]
    20a4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    20a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    20ac:	441a      	add	r2, r3
    20ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
    20b2:	7213      	strb	r3, [r2, #8]
}
    20b4:	bc70      	pop	{r4, r5, r6}
    20b6:	4770      	bx	lr

000020b8 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    20b8:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    20ba:	7844      	ldrb	r4, [r0, #1]
    20bc:	fb02 1204 	mla	r2, r2, r4, r1
    20c0:	6901      	ldr	r1, [r0, #16]
    20c2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    20c6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    20ca:	440a      	add	r2, r1
    20cc:	72d3      	strb	r3, [r2, #11]
}
    20ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    20d2:	4770      	bx	lr

000020d4 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    20d4:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    20d6:	7844      	ldrb	r4, [r0, #1]
    20d8:	fb02 1204 	mla	r2, r2, r4, r1
    20dc:	6901      	ldr	r1, [r0, #16]
    20de:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    20e2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    20e6:	440a      	add	r2, r1
    20e8:	7313      	strb	r3, [r2, #12]
}
    20ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    20ee:	4770      	bx	lr

000020f0 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    20f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20f4:	b083      	sub	sp, #12
    20f6:	4604      	mov	r4, r0
	mod->led_number = length;
    20f8:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    20fa:	b2cd      	uxtb	r5, r1
    20fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2100:	0080      	lsls	r0, r0, #2
    2102:	3090      	adds	r0, #144	; 0x90
    2104:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    2106:	4f3e      	ldr	r7, [pc, #248]	; (2200 <grid_led_buffer_init+0x110>)
    2108:	47b8      	blx	r7
    210a:	4606      	mov	r6, r0
    210c:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    210e:	f100 0390 	add.w	r3, r0, #144	; 0x90
    2112:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2114:	201a      	movs	r0, #26
    2116:	fb00 f005 	mul.w	r0, r0, r5
    211a:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    211c:	2e00      	cmp	r6, #0
    211e:	d06e      	beq.n	21fe <grid_led_buffer_init+0x10e>
    2120:	2800      	cmp	r0, #0
    2122:	d06c      	beq.n	21fe <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2124:	6120      	str	r0, [r4, #16]
    2126:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    2128:	4619      	mov	r1, r3
    212a:	68a2      	ldr	r2, [r4, #8]
    212c:	54d1      	strb	r1, [r2, r3]
    212e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    2130:	2b90      	cmp	r3, #144	; 0x90
    2132:	d1fa      	bne.n	212a <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2134:	7863      	ldrb	r3, [r4, #1]
    2136:	2b00      	cmp	r3, #0
    2138:	d05e      	beq.n	21f8 <grid_led_buffer_init+0x108>
    213a:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    213c:	462e      	mov	r6, r5
    213e:	4f31      	ldr	r7, [pc, #196]	; (2204 <grid_led_buffer_init+0x114>)
    2140:	9600      	str	r6, [sp, #0]
    2142:	4633      	mov	r3, r6
    2144:	4632      	mov	r2, r6
    2146:	4629      	mov	r1, r5
    2148:	4620      	mov	r0, r4
    214a:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    214c:	3501      	adds	r5, #1
    214e:	7863      	ldrb	r3, [r4, #1]
    2150:	42ab      	cmp	r3, r5
    2152:	d8f5      	bhi.n	2140 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2154:	2b00      	cmp	r3, #0
    2156:	d04f      	beq.n	21f8 <grid_led_buffer_init+0x108>
    2158:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    215a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 220c <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    215e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2210 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    2162:	2500      	movs	r5, #0
    2164:	9501      	str	r5, [sp, #4]
    2166:	9500      	str	r5, [sp, #0]
    2168:	462b      	mov	r3, r5
    216a:	462a      	mov	r2, r5
    216c:	4631      	mov	r1, r6
    216e:	4620      	mov	r0, r4
    2170:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2172:	9501      	str	r5, [sp, #4]
    2174:	237f      	movs	r3, #127	; 0x7f
    2176:	9300      	str	r3, [sp, #0]
    2178:	462b      	mov	r3, r5
    217a:	462a      	mov	r2, r5
    217c:	4631      	mov	r1, r6
    217e:	4620      	mov	r0, r4
    2180:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    2182:	9501      	str	r5, [sp, #4]
    2184:	23ff      	movs	r3, #255	; 0xff
    2186:	9300      	str	r3, [sp, #0]
    2188:	462b      	mov	r3, r5
    218a:	462a      	mov	r2, r5
    218c:	4631      	mov	r1, r6
    218e:	4620      	mov	r0, r4
    2190:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2214 <grid_led_buffer_init+0x124>
    2194:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    2196:	462b      	mov	r3, r5
    2198:	462a      	mov	r2, r5
    219a:	4631      	mov	r1, r6
    219c:	4620      	mov	r0, r4
    219e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2218 <grid_led_buffer_init+0x128>
    21a2:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    21a4:	462b      	mov	r3, r5
    21a6:	462a      	mov	r2, r5
    21a8:	4631      	mov	r1, r6
    21aa:	4620      	mov	r0, r4
    21ac:	4f16      	ldr	r7, [pc, #88]	; (2208 <grid_led_buffer_init+0x118>)
    21ae:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    21b0:	9501      	str	r5, [sp, #4]
    21b2:	9500      	str	r5, [sp, #0]
    21b4:	462b      	mov	r3, r5
    21b6:	2201      	movs	r2, #1
    21b8:	4631      	mov	r1, r6
    21ba:	4620      	mov	r0, r4
    21bc:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    21be:	9501      	str	r5, [sp, #4]
    21c0:	9500      	str	r5, [sp, #0]
    21c2:	462b      	mov	r3, r5
    21c4:	2201      	movs	r2, #1
    21c6:	4631      	mov	r1, r6
    21c8:	4620      	mov	r0, r4
    21ca:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    21cc:	9501      	str	r5, [sp, #4]
    21ce:	9500      	str	r5, [sp, #0]
    21d0:	462b      	mov	r3, r5
    21d2:	2201      	movs	r2, #1
    21d4:	4631      	mov	r1, r6
    21d6:	4620      	mov	r0, r4
    21d8:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    21da:	462b      	mov	r3, r5
    21dc:	2201      	movs	r2, #1
    21de:	4631      	mov	r1, r6
    21e0:	4620      	mov	r0, r4
    21e2:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    21e4:	462b      	mov	r3, r5
    21e6:	2201      	movs	r2, #1
    21e8:	4631      	mov	r1, r6
    21ea:	4620      	mov	r0, r4
    21ec:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    21ee:	3601      	adds	r6, #1
    21f0:	b2f6      	uxtb	r6, r6
    21f2:	7863      	ldrb	r3, [r4, #1]
    21f4:	42b3      	cmp	r3, r6
    21f6:	d8b4      	bhi.n	2162 <grid_led_buffer_init+0x72>
}
    21f8:	b003      	add	sp, #12
    21fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fe:	e7fe      	b.n	21fe <grid_led_buffer_init+0x10e>
    2200:	0000c2cd 	.word	0x0000c2cd
    2204:	00001f29 	.word	0x00001f29
    2208:	000020b9 	.word	0x000020b9
    220c:	00001fdd 	.word	0x00001fdd
    2210:	00002025 	.word	0x00002025
    2214:	0000206f 	.word	0x0000206f
    2218:	000020d5 	.word	0x000020d5

0000221c <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2220:	b083      	sub	sp, #12
    2222:	f890 c001 	ldrb.w	ip, [r0, #1]
    2226:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    222a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    222e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2232:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    2236:	6904      	ldr	r4, [r0, #16]
    2238:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    223a:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    223c:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2240:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2242:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2244:	f8df 8084 	ldr.w	r8, [pc, #132]	; 22cc <grid_led_render+0xb0>
    2248:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    224a:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    224e:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2250:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2254:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2258:	f894 a000 	ldrb.w	sl, [r4]
    225c:	f894 b003 	ldrb.w	fp, [r4, #3]
    2260:	fb05 fb0b 	mul.w	fp, r5, fp
    2264:	fb09 bb0a 	mla	fp, r9, sl, fp
    2268:	f894 a006 	ldrb.w	sl, [r4, #6]
    226c:	fb06 ba0a 	mla	sl, r6, sl, fp
    2270:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2272:	f894 a001 	ldrb.w	sl, [r4, #1]
    2276:	f894 b004 	ldrb.w	fp, [r4, #4]
    227a:	fb05 fb0b 	mul.w	fp, r5, fp
    227e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2282:	f894 a007 	ldrb.w	sl, [r4, #7]
    2286:	fb06 ba0a 	mla	sl, r6, sl, fp
    228a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    228c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2290:	f894 b005 	ldrb.w	fp, [r4, #5]
    2294:	fb05 f50b 	mul.w	r5, r5, fp
    2298:	fb09 590a 	mla	r9, r9, sl, r5
    229c:	7a25      	ldrb	r5, [r4, #8]
    229e:	fb06 9505 	mla	r5, r6, r5, r9
    22a2:	44ae      	add	lr, r5
    22a4:	3f01      	subs	r7, #1
    22a6:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    22a8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    22ac:	d1cc      	bne.n	2248 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    22ae:	f3ce 2447 	ubfx	r4, lr, #9, #8
    22b2:	9400      	str	r4, [sp, #0]
    22b4:	f3c3 2347 	ubfx	r3, r3, #9, #8
    22b8:	f3c2 2247 	ubfx	r2, r2, #9, #8
    22bc:	4c02      	ldr	r4, [pc, #8]	; (22c8 <grid_led_render+0xac>)
    22be:	47a0      	blx	r4
	
}
    22c0:	b003      	add	sp, #12
    22c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c6:	bf00      	nop
    22c8:	00001f29 	.word	0x00001f29
    22cc:	20000000 	.word	0x20000000

000022d0 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    22d0:	7843      	ldrb	r3, [r0, #1]
    22d2:	b15b      	cbz	r3, 22ec <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    22d4:	b570      	push	{r4, r5, r6, lr}
    22d6:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    22d8:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    22da:	4e05      	ldr	r6, [pc, #20]	; (22f0 <grid_led_render_all+0x20>)
    22dc:	4621      	mov	r1, r4
    22de:	4628      	mov	r0, r5
    22e0:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    22e2:	3401      	adds	r4, #1
    22e4:	786b      	ldrb	r3, [r5, #1]
    22e6:	42a3      	cmp	r3, r4
    22e8:	d8f8      	bhi.n	22dc <grid_led_render_all+0xc>
    22ea:	bd70      	pop	{r4, r5, r6, pc}
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	0000221d 	.word	0x0000221d

000022f4 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    22f4:	b510      	push	{r4, lr}
    22f6:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    22f8:	2200      	movs	r2, #0
    22fa:	4b08      	ldr	r3, [pc, #32]	; (231c <grid_led_hardware_start_transfer_blocking+0x28>)
    22fc:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    22fe:	4808      	ldr	r0, [pc, #32]	; (2320 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2300:	4b08      	ldr	r3, [pc, #32]	; (2324 <grid_led_hardware_start_transfer_blocking+0x30>)
    2302:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2304:	88a2      	ldrh	r2, [r4, #4]
    2306:	68a1      	ldr	r1, [r4, #8]
    2308:	6960      	ldr	r0, [r4, #20]
    230a:	4b07      	ldr	r3, [pc, #28]	; (2328 <grid_led_hardware_start_transfer_blocking+0x34>)
    230c:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    230e:	4a03      	ldr	r2, [pc, #12]	; (231c <grid_led_hardware_start_transfer_blocking+0x28>)
    2310:	7813      	ldrb	r3, [r2, #0]
    2312:	b2db      	uxtb	r3, r3
    2314:	2b01      	cmp	r3, #1
    2316:	d1fb      	bne.n	2310 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    2318:	bd10      	pop	{r4, pc}
    231a:	bf00      	nop
    231c:	200012a8 	.word	0x200012a8
    2320:	20001128 	.word	0x20001128
    2324:	000050c5 	.word	0x000050c5
    2328:	00004bc5 	.word	0x00004bc5

0000232c <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2330:	b085      	sub	sp, #20
    2332:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    2334:	4b20      	ldr	r3, [pc, #128]	; (23b8 <grid_led_startup_animation+0x8c>)
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    233a:	2b20      	cmp	r3, #32
    233c:	d00a      	beq.n	2354 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    233e:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    2342:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2346:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    234a:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    234e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23c4 <grid_led_startup_animation+0x98>
    2352:	e01e      	b.n	2392 <grid_led_startup_animation+0x66>
		s= 2;
    2354:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    2358:	2300      	movs	r3, #0
    235a:	9303      	str	r3, [sp, #12]
    235c:	e7f3      	b.n	2346 <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    235e:	9500      	str	r5, [sp, #0]
    2360:	462b      	mov	r3, r5
    2362:	463a      	mov	r2, r7
    2364:	4621      	mov	r1, r4
    2366:	4630      	mov	r0, r6
    2368:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    236a:	3401      	adds	r4, #1
    236c:	b2e4      	uxtb	r4, r4
    236e:	7873      	ldrb	r3, [r6, #1]
    2370:	42a3      	cmp	r3, r4
    2372:	d8f4      	bhi.n	235e <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    2374:	4630      	mov	r0, r6
    2376:	4b11      	ldr	r3, [pc, #68]	; (23bc <grid_led_startup_animation+0x90>)
    2378:	4798      	blx	r3
		delay_ms(1);
    237a:	2001      	movs	r0, #1
    237c:	4b10      	ldr	r3, [pc, #64]	; (23c0 <grid_led_startup_animation+0x94>)
    237e:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    2380:	f109 0901 	add.w	r9, r9, #1
    2384:	fa5f f989 	uxtb.w	r9, r9
    2388:	f10a 3aff 	add.w	sl, sl, #4294967295
    238c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2390:	d00f      	beq.n	23b2 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    2392:	7873      	ldrb	r3, [r6, #1]
    2394:	2b00      	cmp	r3, #0
    2396:	d0ed      	beq.n	2374 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2398:	fb0b f709 	mul.w	r7, fp, r9
    239c:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    23a0:	9b03      	ldr	r3, [sp, #12]
    23a2:	fb09 f503 	mul.w	r5, r9, r3
    23a6:	fb0b f505 	mul.w	r5, fp, r5
    23aa:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    23ae:	2400      	movs	r4, #0
    23b0:	e7d5      	b.n	235e <grid_led_startup_animation+0x32>
}
    23b2:	b005      	add	sp, #20
    23b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b8:	40000c00 	.word	0x40000c00
    23bc:	000022f5 	.word	0x000022f5
    23c0:	00004a39 	.word	0x00004a39
    23c4:	00001f29 	.word	0x00001f29

000023c8 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	4604      	mov	r4, r0
    23cc:	4e2b      	ldr	r6, [pc, #172]	; (247c <grid_led_init+0xb4>)
    23ce:	2200      	movs	r2, #0
    23d0:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    23d2:	f003 0001 	and.w	r0, r3, #1
    23d6:	2800      	cmp	r0, #0
    23d8:	bf14      	ite	ne
    23da:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    23de:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    23e2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    23e6:	2d00      	cmp	r5, #0
    23e8:	bf14      	ite	ne
    23ea:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    23ee:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    23f2:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    23f4:	f3c3 0080 	ubfx	r0, r3, #2, #1
    23f8:	2800      	cmp	r0, #0
    23fa:	bf14      	ite	ne
    23fc:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2400:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2404:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2406:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    240a:	2d00      	cmp	r5, #0
    240c:	bf14      	ite	ne
    240e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2412:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    2416:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2418:	f3c3 1500 	ubfx	r5, r3, #4, #1
    241c:	2d00      	cmp	r5, #0
    241e:	bf14      	ite	ne
    2420:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2424:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2428:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    242a:	f3c3 1040 	ubfx	r0, r3, #5, #1
    242e:	2800      	cmp	r0, #0
    2430:	bf14      	ite	ne
    2432:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    2436:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    243a:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    243c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2440:	2800      	cmp	r0, #0
    2442:	bf14      	ite	ne
    2444:	200e      	movne	r0, #14
    2446:	2008      	moveq	r0, #8
    2448:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    244a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    244e:	2b00      	cmp	r3, #0
    2450:	bf14      	ite	ne
    2452:	23e0      	movne	r3, #224	; 0xe0
    2454:	2380      	moveq	r3, #128	; 0x80
    2456:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2458:	f846 3f04 	str.w	r3, [r6, #4]!
    245c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    245e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2462:	d1b5      	bne.n	23d0 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2464:	4620      	mov	r0, r4
    2466:	4b06      	ldr	r3, [pc, #24]	; (2480 <grid_led_init+0xb8>)
    2468:	4798      	blx	r3
	grid_led_hardware_init(mod);
    246a:	4620      	mov	r0, r4
    246c:	4b05      	ldr	r3, [pc, #20]	; (2484 <grid_led_init+0xbc>)
    246e:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2470:	4620      	mov	r0, r4
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <grid_led_init+0xc0>)
    2474:	4798      	blx	r3
}
    2476:	2000      	movs	r0, #0
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	bf00      	nop
    247c:	20001dcc 	.word	0x20001dcc
    2480:	000020f1 	.word	0x000020f1
    2484:	00001f69 	.word	0x00001f69
    2488:	0000232d 	.word	0x0000232d

0000248c <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    248c:	b510      	push	{r4, lr}
    248e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2490:	2200      	movs	r2, #0
    2492:	4b05      	ldr	r3, [pc, #20]	; (24a8 <grid_led_hardware_start_transfer+0x1c>)
    2494:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2496:	4805      	ldr	r0, [pc, #20]	; (24ac <grid_led_hardware_start_transfer+0x20>)
    2498:	4b05      	ldr	r3, [pc, #20]	; (24b0 <grid_led_hardware_start_transfer+0x24>)
    249a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    249c:	88a2      	ldrh	r2, [r4, #4]
    249e:	68a1      	ldr	r1, [r4, #8]
    24a0:	6960      	ldr	r0, [r4, #20]
    24a2:	4b04      	ldr	r3, [pc, #16]	; (24b4 <grid_led_hardware_start_transfer+0x28>)
    24a4:	4798      	blx	r3
    24a6:	bd10      	pop	{r4, pc}
    24a8:	200012a8 	.word	0x200012a8
    24ac:	20001128 	.word	0x20001128
    24b0:	000050c5 	.word	0x000050c5
    24b4:	00004bc5 	.word	0x00004bc5

000024b8 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    24b8:	4b01      	ldr	r3, [pc, #4]	; (24c0 <grid_led_hardware_is_transfer_completed+0x8>)
    24ba:	7818      	ldrb	r0, [r3, #0]
	
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	200012a8 	.word	0x200012a8

000024c4 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    24c4:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24ca:	4b13      	ldr	r3, [pc, #76]	; (2518 <grid_module_common_init+0x54>)
    24cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    24d0:	4b12      	ldr	r3, [pc, #72]	; (251c <grid_module_common_init+0x58>)
    24d2:	4798      	blx	r3
    24d4:	b178      	cbz	r0, 24f6 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    24d6:	4b11      	ldr	r3, [pc, #68]	; (251c <grid_module_common_init+0x58>)
    24d8:	4798      	blx	r3
    24da:	2880      	cmp	r0, #128	; 0x80
    24dc:	d00f      	beq.n	24fe <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    24de:	4b0f      	ldr	r3, [pc, #60]	; (251c <grid_module_common_init+0x58>)
    24e0:	4798      	blx	r3
    24e2:	2840      	cmp	r0, #64	; 0x40
    24e4:	d00f      	beq.n	2506 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    24e6:	4b0d      	ldr	r3, [pc, #52]	; (251c <grid_module_common_init+0x58>)
    24e8:	4798      	blx	r3
    24ea:	28c0      	cmp	r0, #192	; 0xc0
    24ec:	d00f      	beq.n	250e <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    24ee:	480c      	ldr	r0, [pc, #48]	; (2520 <grid_module_common_init+0x5c>)
    24f0:	4b0c      	ldr	r3, [pc, #48]	; (2524 <grid_module_common_init+0x60>)
    24f2:	4798      	blx	r3
    24f4:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    24f6:	480c      	ldr	r0, [pc, #48]	; (2528 <grid_module_common_init+0x64>)
    24f8:	4b0c      	ldr	r3, [pc, #48]	; (252c <grid_module_common_init+0x68>)
    24fa:	4798      	blx	r3
    24fc:	e7eb      	b.n	24d6 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    24fe:	480a      	ldr	r0, [pc, #40]	; (2528 <grid_module_common_init+0x64>)
    2500:	4b0b      	ldr	r3, [pc, #44]	; (2530 <grid_module_common_init+0x6c>)
    2502:	4798      	blx	r3
    2504:	e7eb      	b.n	24de <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    2506:	4808      	ldr	r0, [pc, #32]	; (2528 <grid_module_common_init+0x64>)
    2508:	4b0a      	ldr	r3, [pc, #40]	; (2534 <grid_module_common_init+0x70>)
    250a:	4798      	blx	r3
    250c:	e7eb      	b.n	24e6 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    250e:	4806      	ldr	r0, [pc, #24]	; (2528 <grid_module_common_init+0x64>)
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <grid_module_common_init+0x74>)
    2512:	4798      	blx	r3
    2514:	e7eb      	b.n	24ee <grid_module_common_init+0x2a>
    2516:	bf00      	nop
    2518:	41008000 	.word	0x41008000
    251c:	00003a99 	.word	0x00003a99
    2520:	20001d30 	.word	0x20001d30
    2524:	00003929 	.word	0x00003929
    2528:	20001d20 	.word	0x20001d20
    252c:	000034ed 	.word	0x000034ed
    2530:	00002789 	.word	0x00002789
    2534:	00003195 	.word	0x00003195
    2538:	00002cb9 	.word	0x00002cb9

0000253c <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    253c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    253e:	4803      	ldr	r0, [pc, #12]	; (254c <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2540:	4c03      	ldr	r4, [pc, #12]	; (2550 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    2542:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2544:	4803      	ldr	r0, [pc, #12]	; (2554 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2546:	47a0      	blx	r4
    2548:	bd10      	pop	{r4, pc}
    254a:	bf00      	nop
    254c:	20001058 	.word	0x20001058
    2550:	00004991 	.word	0x00004991
    2554:	2000122c 	.word	0x2000122c

00002558 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2558:	4b70      	ldr	r3, [pc, #448]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	2b00      	cmp	r3, #0
    255e:	f000 80d6 	beq.w	270e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1b6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    2562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2566:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2568:	2300      	movs	r3, #0
    256a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    256e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2572:	4b6a      	ldr	r3, [pc, #424]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2574:	785a      	ldrb	r2, [r3, #1]
    2576:	3208      	adds	r2, #8
    2578:	4969      	ldr	r1, [pc, #420]	; (2720 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c8>)
    257a:	5c8d      	ldrb	r5, [r1, r2]
    257c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    257e:	785a      	ldrb	r2, [r3, #1]
    2580:	b2d2      	uxtb	r2, r2
    2582:	5c8c      	ldrb	r4, [r1, r2]
    2584:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2586:	785a      	ldrb	r2, [r3, #1]
    2588:	3201      	adds	r2, #1
    258a:	b2d2      	uxtb	r2, r2
    258c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    258e:	785a      	ldrb	r2, [r3, #1]
    2590:	f002 0207 	and.w	r2, r2, #7
    2594:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2596:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2598:	f013 0f01 	tst.w	r3, #1
    259c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    25a0:	4b60      	ldr	r3, [pc, #384]	; (2724 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    25a2:	bf14      	ite	ne
    25a4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    25ac:	4b5b      	ldr	r3, [pc, #364]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    25ae:	785b      	ldrb	r3, [r3, #1]
    25b0:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    25b8:	4b5a      	ldr	r3, [pc, #360]	; (2724 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    25ba:	bf14      	ite	ne
    25bc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25c0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    25c4:	4b55      	ldr	r3, [pc, #340]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    25c6:	785b      	ldrb	r3, [r3, #1]
    25c8:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25d0:	4b54      	ldr	r3, [pc, #336]	; (2724 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    25d2:	bf14      	ite	ne
    25d4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25d8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    25dc:	2302      	movs	r3, #2
    25de:	f10d 0206 	add.w	r2, sp, #6
    25e2:	2100      	movs	r1, #0
    25e4:	4850      	ldr	r0, [pc, #320]	; (2728 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d0>)
    25e6:	4e51      	ldr	r6, [pc, #324]	; (272c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    25e8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    25ea:	2302      	movs	r3, #2
    25ec:	aa01      	add	r2, sp, #4
    25ee:	2100      	movs	r1, #0
    25f0:	484f      	ldr	r0, [pc, #316]	; (2730 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    25f2:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    25f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    25f8:	f242 7310 	movw	r3, #10000	; 0x2710
    25fc:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    25fe:	bf8c      	ite	hi
    2600:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2602:	237f      	movls	r3, #127	; 0x7f
    2604:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    2608:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    260c:	f242 7310 	movw	r3, #10000	; 0x2710
    2610:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    2612:	bf8c      	ite	hi
    2614:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    2616:	237f      	movls	r3, #127	; 0x7f
    2618:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0]){
    261c:	012e      	lsls	r6, r5, #4
    261e:	4b45      	ldr	r3, [pc, #276]	; (2734 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2620:	689b      	ldr	r3, [r3, #8]
    2622:	4433      	add	r3, r6
    2624:	68da      	ldr	r2, [r3, #12]
    2626:	7812      	ldrb	r2, [r2, #0]
    2628:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    262c:	4291      	cmp	r1, r2
    262e:	d02e      	beq.n	268e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x136>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2630:	2a00      	cmp	r2, #0
    2632:	bf0c      	ite	eq
    2634:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2638:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    263c:	6858      	ldr	r0, [r3, #4]
    263e:	bf0c      	ite	eq
    2640:	2290      	moveq	r2, #144	; 0x90
    2642:	2280      	movne	r2, #128	; 0x80
    2644:	2102      	movs	r1, #2
    2646:	3005      	adds	r0, #5
    2648:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 273c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>
    264c:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    264e:	4f39      	ldr	r7, [pc, #228]	; (2734 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2650:	68bb      	ldr	r3, [r7, #8]
    2652:	4433      	add	r3, r6
    2654:	6858      	ldr	r0, [r3, #4]
    2656:	462a      	mov	r2, r5
    2658:	2102      	movs	r1, #2
    265a:	3007      	adds	r0, #7
    265c:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    265e:	68bb      	ldr	r3, [r7, #8]
    2660:	4433      	add	r3, r6
    2662:	6858      	ldr	r0, [r3, #4]
    2664:	464a      	mov	r2, r9
    2666:	2102      	movs	r1, #2
    2668:	3009      	adds	r0, #9
    266a:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    266c:	68bb      	ldr	r3, [r7, #8]
    266e:	4433      	add	r3, r6
    2670:	6858      	ldr	r0, [r3, #4]
    2672:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2676:	2102      	movs	r1, #2
    2678:	3015      	adds	r0, #21
    267a:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    267c:	68bb      	ldr	r3, [r7, #8]
    267e:	441e      	add	r6, r3
    2680:	68f3      	ldr	r3, [r6, #12]
    2682:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    2686:	4629      	mov	r1, r5
    2688:	4638      	mov	r0, r7
    268a:	4b2b      	ldr	r3, [pc, #172]	; (2738 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    268c:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0]){
    268e:	0125      	lsls	r5, r4, #4
    2690:	4b28      	ldr	r3, [pc, #160]	; (2734 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2692:	689b      	ldr	r3, [r3, #8]
    2694:	442b      	add	r3, r5
    2696:	68da      	ldr	r2, [r3, #12]
    2698:	7812      	ldrb	r2, [r2, #0]
    269a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    269e:	4291      	cmp	r1, r2
    26a0:	d02d      	beq.n	26fe <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a6>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    26a2:	2a00      	cmp	r2, #0
    26a4:	bf0c      	ite	eq
    26a6:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    26aa:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    26ae:	6858      	ldr	r0, [r3, #4]
    26b0:	bf0c      	ite	eq
    26b2:	2290      	moveq	r2, #144	; 0x90
    26b4:	2280      	movne	r2, #128	; 0x80
    26b6:	2102      	movs	r1, #2
    26b8:	3005      	adds	r0, #5
    26ba:	4f20      	ldr	r7, [pc, #128]	; (273c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    26bc:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    26be:	4e1d      	ldr	r6, [pc, #116]	; (2734 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    26c0:	68b3      	ldr	r3, [r6, #8]
    26c2:	442b      	add	r3, r5
    26c4:	6858      	ldr	r0, [r3, #4]
    26c6:	4622      	mov	r2, r4
    26c8:	2102      	movs	r1, #2
    26ca:	3007      	adds	r0, #7
    26cc:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    26ce:	68b3      	ldr	r3, [r6, #8]
    26d0:	442b      	add	r3, r5
    26d2:	6858      	ldr	r0, [r3, #4]
    26d4:	4642      	mov	r2, r8
    26d6:	2102      	movs	r1, #2
    26d8:	3009      	adds	r0, #9
    26da:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    26dc:	68b3      	ldr	r3, [r6, #8]
    26de:	442b      	add	r3, r5
    26e0:	6858      	ldr	r0, [r3, #4]
    26e2:	ea4f 0248 	mov.w	r2, r8, lsl #1
    26e6:	2102      	movs	r1, #2
    26e8:	3015      	adds	r0, #21
    26ea:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    26ec:	68b3      	ldr	r3, [r6, #8]
    26ee:	441d      	add	r5, r3
    26f0:	68eb      	ldr	r3, [r5, #12]
    26f2:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    26f6:	4621      	mov	r1, r4
    26f8:	4630      	mov	r0, r6
    26fa:	4b0f      	ldr	r3, [pc, #60]	; (2738 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    26fc:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    26fe:	2200      	movs	r2, #0
    2700:	4b06      	ldr	r3, [pc, #24]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2702:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2704:	4b0e      	ldr	r3, [pc, #56]	; (2740 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    2706:	4798      	blx	r3
}
    2708:	b003      	add	sp, #12
    270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    270e:	4a03      	ldr	r2, [pc, #12]	; (271c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2710:	7813      	ldrb	r3, [r2, #0]
    2712:	3301      	adds	r3, #1
    2714:	b2db      	uxtb	r3, r3
    2716:	7013      	strb	r3, [r2, #0]
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	20000644 	.word	0x20000644
    2720:	20000300 	.word	0x20000300
    2724:	41008000 	.word	0x41008000
    2728:	20001058 	.word	0x20001058
    272c:	000048b1 	.word	0x000048b1
    2730:	2000122c 	.word	0x2000122c
    2734:	20001d20 	.word	0x20001d20
    2738:	00004157 	.word	0x00004157
    273c:	00003a61 	.word	0x00003a61
    2740:	0000253d 	.word	0x0000253d

00002744 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    2744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2746:	4f0b      	ldr	r7, [pc, #44]	; (2774 <grid_module_bu16_revb_hardware_init+0x30>)
    2748:	4c0b      	ldr	r4, [pc, #44]	; (2778 <grid_module_bu16_revb_hardware_init+0x34>)
    274a:	463b      	mov	r3, r7
    274c:	2200      	movs	r2, #0
    274e:	4611      	mov	r1, r2
    2750:	4620      	mov	r0, r4
    2752:	4e0a      	ldr	r6, [pc, #40]	; (277c <grid_module_bu16_revb_hardware_init+0x38>)
    2754:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2756:	4d0a      	ldr	r5, [pc, #40]	; (2780 <grid_module_bu16_revb_hardware_init+0x3c>)
    2758:	463b      	mov	r3, r7
    275a:	2200      	movs	r2, #0
    275c:	4611      	mov	r1, r2
    275e:	4628      	mov	r0, r5
    2760:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2762:	2100      	movs	r1, #0
    2764:	4620      	mov	r0, r4
    2766:	4c07      	ldr	r4, [pc, #28]	; (2784 <grid_module_bu16_revb_hardware_init+0x40>)
    2768:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    276a:	2100      	movs	r1, #0
    276c:	4628      	mov	r0, r5
    276e:	47a0      	blx	r4
    2770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2772:	bf00      	nop
    2774:	00002559 	.word	0x00002559
    2778:	20001058 	.word	0x20001058
    277c:	00004831 	.word	0x00004831
    2780:	2000122c 	.word	0x2000122c
    2784:	000047f1 	.word	0x000047f1

00002788 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    278c:	b09b      	sub	sp, #108	; 0x6c
    278e:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    2790:	2110      	movs	r1, #16
    2792:	4827      	ldr	r0, [pc, #156]	; (2830 <grid_module_bu16_revb_init+0xa8>)
    2794:	4b27      	ldr	r3, [pc, #156]	; (2834 <grid_module_bu16_revb_init+0xac>)
    2796:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    2798:	2110      	movs	r1, #16
    279a:	4648      	mov	r0, r9
    279c:	4b26      	ldr	r3, [pc, #152]	; (2838 <grid_module_bu16_revb_init+0xb0>)
    279e:	4798      	blx	r3
    27a0:	f10d 0837 	add.w	r8, sp, #55	; 0x37
    27a4:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    27a6:	462c      	mov	r4, r5
    27a8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2858 <grid_module_bu16_revb_init+0xd0>
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    27ac:	4f23      	ldr	r7, [pc, #140]	; (283c <grid_module_bu16_revb_init+0xb4>)
		uint8_t payload_template[30] = {0};
    27ae:	221e      	movs	r2, #30
    27b0:	4621      	mov	r1, r4
    27b2:	a812      	add	r0, sp, #72	; 0x48
    27b4:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    27b6:	ae0e      	add	r6, sp, #56	; 0x38
    27b8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    27bc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    27c0:	2303      	movs	r3, #3
    27c2:	930b      	str	r3, [sp, #44]	; 0x2c
    27c4:	940a      	str	r4, [sp, #40]	; 0x28
    27c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    27ca:	9209      	str	r2, [sp, #36]	; 0x24
    27cc:	2263      	movs	r2, #99	; 0x63
    27ce:	9208      	str	r2, [sp, #32]
    27d0:	9407      	str	r4, [sp, #28]
    27d2:	9306      	str	r3, [sp, #24]
    27d4:	2602      	movs	r6, #2
    27d6:	9605      	str	r6, [sp, #20]
    27d8:	9304      	str	r3, [sp, #16]
    27da:	9403      	str	r4, [sp, #12]
    27dc:	9502      	str	r5, [sp, #8]
    27de:	2390      	movs	r3, #144	; 0x90
    27e0:	9301      	str	r3, [sp, #4]
    27e2:	9400      	str	r4, [sp, #0]
    27e4:	4623      	mov	r3, r4
    27e6:	4632      	mov	r2, r6
    27e8:	4915      	ldr	r1, [pc, #84]	; (2840 <grid_module_bu16_revb_init+0xb8>)
    27ea:	a812      	add	r0, sp, #72	; 0x48
    27ec:	f8df b06c 	ldr.w	fp, [pc, #108]	; 285c <grid_module_bu16_revb_init+0xd4>
    27f0:	47d8      	blx	fp

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    27f2:	a812      	add	r0, sp, #72	; 0x48
    27f4:	4b13      	ldr	r3, [pc, #76]	; (2844 <grid_module_bu16_revb_init+0xbc>)
    27f6:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    27f8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    27fc:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2800:	9602      	str	r6, [sp, #8]
    2802:	ab0d      	add	r3, sp, #52	; 0x34
    2804:	9301      	str	r3, [sp, #4]
    2806:	b2c0      	uxtb	r0, r0
    2808:	9000      	str	r0, [sp, #0]
    280a:	ab12      	add	r3, sp, #72	; 0x48
    280c:	4632      	mov	r2, r6
    280e:	b2e9      	uxtb	r1, r5
    2810:	4648      	mov	r0, r9
    2812:	4e0d      	ldr	r6, [pc, #52]	; (2848 <grid_module_bu16_revb_init+0xc0>)
    2814:	47b0      	blx	r6
    2816:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    2818:	2d10      	cmp	r5, #16
    281a:	d1c8      	bne.n	27ae <grid_module_bu16_revb_init+0x26>
		

	}
	
	grid_report_sys_init(mod);
    281c:	4648      	mov	r0, r9
    281e:	4b0b      	ldr	r3, [pc, #44]	; (284c <grid_module_bu16_revb_init+0xc4>)
    2820:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    2822:	4b0b      	ldr	r3, [pc, #44]	; (2850 <grid_module_bu16_revb_init+0xc8>)
    2824:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2826:	4b0b      	ldr	r3, [pc, #44]	; (2854 <grid_module_bu16_revb_init+0xcc>)
    2828:	4798      	blx	r3

};
    282a:	b01b      	add	sp, #108	; 0x6c
    282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2830:	200036c4 	.word	0x200036c4
    2834:	000023c9 	.word	0x000023c9
    2838:	00003e41 	.word	0x00003e41
    283c:	0000d8c0 	.word	0x0000d8c0
    2840:	0000d8d0 	.word	0x0000d8d0
    2844:	0000c729 	.word	0x0000c729
    2848:	00003f05 	.word	0x00003f05
    284c:	00003f29 	.word	0x00003f29
    2850:	00002745 	.word	0x00002745
    2854:	0000253d 	.word	0x0000253d
    2858:	0000c2f3 	.word	0x0000c2f3
    285c:	0000c6e1 	.word	0x0000c6e1

00002860 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    2860:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2862:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2868:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    286a:	4c06      	ldr	r4, [pc, #24]	; (2884 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    286c:	4620      	mov	r0, r4
    286e:	4b06      	ldr	r3, [pc, #24]	; (2888 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2870:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2872:	2308      	movs	r3, #8
    2874:	4a05      	ldr	r2, [pc, #20]	; (288c <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    2876:	4906      	ldr	r1, [pc, #24]	; (2890 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2878:	4620      	mov	r0, r4
    287a:	4c06      	ldr	r4, [pc, #24]	; (2894 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    287c:	47a0      	blx	r4
    287e:	bd10      	pop	{r4, pc}
    2880:	41008000 	.word	0x41008000
    2884:	20000f4c 	.word	0x20000f4c
    2888:	00004e99 	.word	0x00004e99
    288c:	200017f8 	.word	0x200017f8
    2890:	20000310 	.word	0x20000310
    2894:	00004f39 	.word	0x00004f39

00002898 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    289c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    289e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28a2:	4bad      	ldr	r3, [pc, #692]	; (2b58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    28a4:	615a      	str	r2, [r3, #20]
    28a6:	2700      	movs	r7, #0
    28a8:	e07b      	b.n	29a2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    28aa:	49ac      	ldr	r1, [pc, #688]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28ac:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    28b0:	78c9      	ldrb	r1, [r1, #3]
    28b2:	42d1      	cmn	r1, r2
    28b4:	d405      	bmi.n	28c2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a>
						grid_ui_encoder_array[i].rotation_value += xi;
    28b6:	4aa9      	ldr	r2, [pc, #676]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28b8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    28bc:	440b      	add	r3, r1
    28be:	70d3      	strb	r3, [r2, #3]
    28c0:	e00a      	b.n	28d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    28c2:	4ba6      	ldr	r3, [pc, #664]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28c4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    28c8:	2200      	movs	r2, #0
    28ca:	70da      	strb	r2, [r3, #3]
    28cc:	e004      	b.n	28d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    28ce:	4ba3      	ldr	r3, [pc, #652]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    28d4:	227f      	movs	r2, #127	; 0x7f
    28d6:	70da      	strb	r2, [r3, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, i+16)){
    28d8:	f104 0810 	add.w	r8, r4, #16
    28dc:	fa5f f888 	uxtb.w	r8, r8
    28e0:	4641      	mov	r1, r8
    28e2:	489f      	ldr	r0, [pc, #636]	; (2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    28e4:	4b9f      	ldr	r3, [pc, #636]	; (2b64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    28e6:	4798      	blx	r3
    28e8:	2800      	cmp	r0, #0
    28ea:	f040 8107 	bne.w	2afc <grid_module_en16_reva_hardware_transfer_complete_cb+0x264>
					value = 64; //CENTER
					mod->report_ui_array[i+16].helper[0] = 0;
    28ee:	4b9c      	ldr	r3, [pc, #624]	; (2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    28f0:	689b      	ldr	r3, [r3, #8]
    28f2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    28f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    28fa:	2200      	movs	r2, #0
    28fc:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    28fe:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[i+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2900:	fb06 3505 	mla	r5, r6, r5, r3
    2904:	b2ed      	uxtb	r5, r5
				
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
				
				if (value != mod->report_ui_array[i+16].helper[0]){
    2906:	f104 0610 	add.w	r6, r4, #16
    290a:	0136      	lsls	r6, r6, #4
    290c:	4b94      	ldr	r3, [pc, #592]	; (2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    290e:	689b      	ldr	r3, [r3, #8]
    2910:	4433      	add	r3, r6
    2912:	68da      	ldr	r2, [r3, #12]
    2914:	7812      	ldrb	r2, [r2, #0]
    2916:	42aa      	cmp	r2, r5
    2918:	d03f      	beq.n	299a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
    291a:	4a90      	ldr	r2, [pc, #576]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    291c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2920:	f892 a003 	ldrb.w	sl, [r2, #3]
    2924:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    2928:	fa5f fa8a 	uxtb.w	sl, sl
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    292c:	6858      	ldr	r0, [r3, #4]
    292e:	22b0      	movs	r2, #176	; 0xb0
    2930:	2102      	movs	r1, #2
    2932:	3005      	adds	r0, #5
    2934:	f8df b264 	ldr.w	fp, [pc, #612]	; 2b9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2938:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    293a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    293e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2942:	4433      	add	r3, r6
    2944:	6858      	ldr	r0, [r3, #4]
    2946:	4622      	mov	r2, r4
    2948:	2102      	movs	r1, #2
    294a:	3007      	adds	r0, #7
    294c:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    294e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2952:	4433      	add	r3, r6
    2954:	6858      	ldr	r0, [r3, #4]
    2956:	462a      	mov	r2, r5
    2958:	2102      	movs	r1, #2
    295a:	3009      	adds	r0, #9
    295c:	47d8      	blx	fp
					
					mod->report_ui_array[i+16].helper[0] = value;
    295e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2962:	4433      	add	r3, r6
    2964:	68db      	ldr	r3, [r3, #12]
    2966:	701d      	strb	r5, [r3, #0]
					grid_report_ui_set_changed_flag(mod, i+16);
    2968:	4641      	mov	r1, r8
    296a:	4648      	mov	r0, r9
    296c:	4d7e      	ldr	r5, [pc, #504]	; (2b68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    296e:	47a8      	blx	r5
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, actuator); // LED
    2970:	f506 7680 	add.w	r6, r6, #256	; 0x100
    2974:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2978:	4433      	add	r3, r6
    297a:	6858      	ldr	r0, [r3, #4]
    297c:	4652      	mov	r2, sl
    297e:	2102      	movs	r1, #2
    2980:	3009      	adds	r0, #9
    2982:	47d8      	blx	fp
					mod->report_ui_array[i+16+16].helper[0] = actuator;
    2984:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2988:	441e      	add	r6, r3
    298a:	68f3      	ldr	r3, [r6, #12]
    298c:	f883 a000 	strb.w	sl, [r3]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2990:	f104 0120 	add.w	r1, r4, #32
    2994:	b2c9      	uxtb	r1, r1
    2996:	4648      	mov	r0, r9
    2998:	47a8      	blx	r5
    299a:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    299c:	2f10      	cmp	r7, #16
    299e:	f000 811e 	beq.w	2bde <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    29a2:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    29a4:	084b      	lsrs	r3, r1, #1
    29a6:	4a71      	ldr	r2, [pc, #452]	; (2b6c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    29a8:	5cd3      	ldrb	r3, [r2, r3]
    29aa:	f001 0201 	and.w	r2, r1, #1
    29ae:	0092      	lsls	r2, r2, #2
    29b0:	4113      	asrs	r3, r2
    29b2:	b2db      	uxtb	r3, r3
    29b4:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    29b8:	4a6d      	ldr	r2, [pc, #436]	; (2b70 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    29ba:	5dd2      	ldrb	r2, [r2, r7]
    29bc:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    29be:	4290      	cmp	r0, r2
    29c0:	d0eb      	beq.n	299a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    29c2:	4a6c      	ldr	r2, [pc, #432]	; (2b74 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    29c4:	5cbc      	ldrb	r4, [r7, r2]
			UI_SPI_DEBUG = j;
    29c6:	4a6c      	ldr	r2, [pc, #432]	; (2b78 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    29c8:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    29ca:	0882      	lsrs	r2, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    29cc:	f3c0 0840 	ubfx	r8, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    29d0:	f003 0501 	and.w	r5, r3, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    29d4:	4b61      	ldr	r3, [pc, #388]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29d6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29da:	785b      	ldrb	r3, [r3, #1]
    29dc:	4293      	cmp	r3, r2
    29de:	d035      	beq.n	2a4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x1b4>
				grid_ui_encoder_array[i].button_changed = 1;
    29e0:	4b5e      	ldr	r3, [pc, #376]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29e6:	2101      	movs	r1, #1
    29e8:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    29ea:	705a      	strb	r2, [r3, #1]
					velocity = 0;
    29ec:	2a00      	cmp	r2, #0
    29ee:	bf0c      	ite	eq
    29f0:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    29f4:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    29f8:	ea4f 1604 	mov.w	r6, r4, lsl #4
    29fc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    2a00:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a04:	4433      	add	r3, r6
    2a06:	6858      	ldr	r0, [r3, #4]
    2a08:	bf0c      	ite	eq
    2a0a:	2290      	moveq	r2, #144	; 0x90
    2a0c:	2280      	movne	r2, #128	; 0x80
    2a0e:	2102      	movs	r1, #2
    2a10:	3005      	adds	r0, #5
    2a12:	f8df b188 	ldr.w	fp, [pc, #392]	; 2b9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2a16:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    2a18:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a1c:	4433      	add	r3, r6
    2a1e:	6858      	ldr	r0, [r3, #4]
    2a20:	4622      	mov	r2, r4
    2a22:	2102      	movs	r1, #2
    2a24:	3007      	adds	r0, #7
    2a26:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    2a28:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a2c:	4433      	add	r3, r6
    2a2e:	6858      	ldr	r0, [r3, #4]
    2a30:	4652      	mov	r2, sl
    2a32:	2102      	movs	r1, #2
    2a34:	3009      	adds	r0, #9
    2a36:	47d8      	blx	fp
				mod->report_ui_array[i].helper[0] = velocity;
    2a38:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a3c:	441e      	add	r6, r3
    2a3e:	68f3      	ldr	r3, [r6, #12]
    2a40:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    2a44:	4621      	mov	r1, r4
    2a46:	4648      	mov	r0, r9
    2a48:	4b47      	ldr	r3, [pc, #284]	; (2b68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2a4a:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    2a4c:	4b43      	ldr	r3, [pc, #268]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a4e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
			if (a_now != a_prev){
    2a52:	7b5b      	ldrb	r3, [r3, #13]
    2a54:	4543      	cmp	r3, r8
    2a56:	f000 80ca 	beq.w	2bee <grid_module_en16_reva_hardware_transfer_complete_cb+0x356>
					delta = +1;
    2a5a:	45a8      	cmp	r8, r5
    2a5c:	bf14      	ite	ne
    2a5e:	f04f 36ff 	movne.w	r6, #4294967295
    2a62:	2601      	moveq	r6, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    2a64:	4b3d      	ldr	r3, [pc, #244]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a66:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    2a6a:	f882 800d 	strb.w	r8, [r2, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2a6e:	7395      	strb	r5, [r2, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i+1].last_real_time);
    2a70:	6991      	ldr	r1, [r2, #24]
    2a72:	4842      	ldr	r0, [pc, #264]	; (2b7c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2a74:	4b42      	ldr	r3, [pc, #264]	; (2b80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    2a76:	4798      	blx	r3
    2a78:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2a7a:	9b01      	ldr	r3, [sp, #4]
    2a7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2a80:	bf84      	itt	hi
    2a82:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2a86:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2a8c:	bf9c      	itt	ls
    2a8e:	2314      	movls	r3, #20
    2a90:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2a92:	9b01      	ldr	r3, [sp, #4]
    2a94:	9801      	ldr	r0, [sp, #4]
    2a96:	fb00 f003 	mul.w	r0, r0, r3
    2a9a:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2a9e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2aa2:	4b38      	ldr	r3, [pc, #224]	; (2b84 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    2aa4:	4798      	blx	r3
    2aa6:	a32a      	add	r3, pc, #168	; (adr r3, 2b50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2aac:	4d36      	ldr	r5, [pc, #216]	; (2b88 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2aae:	47a8      	blx	r5
    2ab0:	2200      	movs	r2, #0
    2ab2:	4b36      	ldr	r3, [pc, #216]	; (2b8c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    2ab4:	4d36      	ldr	r5, [pc, #216]	; (2b90 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    2ab6:	47a8      	blx	r5
    2ab8:	4b36      	ldr	r3, [pc, #216]	; (2b94 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2aba:	4798      	blx	r3
    2abc:	b2c5      	uxtb	r5, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2abe:	482f      	ldr	r0, [pc, #188]	; (2b7c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2ac0:	4b35      	ldr	r3, [pc, #212]	; (2b98 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    2ac2:	4798      	blx	r3
    2ac4:	4b25      	ldr	r3, [pc, #148]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2ac6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2aca:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2acc:	fb05 6306 	mla	r3, r5, r6, r6
    2ad0:	b29b      	uxth	r3, r3
    2ad2:	b21a      	sxth	r2, r3
				if (delta<0){
    2ad4:	2e00      	cmp	r6, #0
    2ad6:	f6ff aee8 	blt.w	28aa <grid_module_en16_reva_hardware_transfer_complete_cb+0x12>
				else if (delta>0){
    2ada:	2e00      	cmp	r6, #0
    2adc:	f77f aefc 	ble.w	28d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2ae0:	491e      	ldr	r1, [pc, #120]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2ae2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2ae6:	78c9      	ldrb	r1, [r1, #3]
    2ae8:	440a      	add	r2, r1
    2aea:	2a7f      	cmp	r2, #127	; 0x7f
    2aec:	f73f aeef 	bgt.w	28ce <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
						grid_ui_encoder_array[i].rotation_value += xi;
    2af0:	4a1a      	ldr	r2, [pc, #104]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2af2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2af6:	440b      	add	r3, r1
    2af8:	70d3      	strb	r3, [r2, #3]
    2afa:	e6ed      	b.n	28d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					value = mod->report_ui_array[i+16].helper[0];
    2afc:	4b18      	ldr	r3, [pc, #96]	; (2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2afe:	689b      	ldr	r3, [r3, #8]
    2b00:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b04:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	e6f9      	b.n	2900 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
					if (grid_ui_encoder_array[i].rotation_value > 64){

						grid_ui_encoder_array[i].rotation_value--;
    2b0c:	3b01      	subs	r3, #1
    2b0e:	b2db      	uxtb	r3, r3
    2b10:	4a12      	ldr	r2, [pc, #72]	; (2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2b12:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2b16:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2b18:	005b      	lsls	r3, r3, #1
    2b1a:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2b1c:	f104 0820 	add.w	r8, r4, #32
    2b20:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2b24:	4e0e      	ldr	r6, [pc, #56]	; (2b60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2b26:	68b3      	ldr	r3, [r6, #8]
    2b28:	444b      	add	r3, r9
    2b2a:	6858      	ldr	r0, [r3, #4]
    2b2c:	462a      	mov	r2, r5
    2b2e:	2102      	movs	r1, #2
    2b30:	3009      	adds	r0, #9
    2b32:	4b1a      	ldr	r3, [pc, #104]	; (2b9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2b34:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2b36:	68b3      	ldr	r3, [r6, #8]
    2b38:	444b      	add	r3, r9
    2b3a:	68db      	ldr	r3, [r3, #12]
    2b3c:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2b3e:	fa5f f188 	uxtb.w	r1, r8
    2b42:	4630      	mov	r0, r6
    2b44:	4b08      	ldr	r3, [pc, #32]	; (2b68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2b46:	4798      	blx	r3
    2b48:	e063      	b.n	2c12 <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
    2b4a:	bf00      	nop
    2b4c:	f3af 8000 	nop.w
    2b50:	00000000 	.word	0x00000000
    2b54:	40e38800 	.word	0x40e38800
    2b58:	41008000 	.word	0x41008000
    2b5c:	200036f4 	.word	0x200036f4
    2b60:	20001d20 	.word	0x20001d20
    2b64:	0000414b 	.word	0x0000414b
    2b68:	00004157 	.word	0x00004157
    2b6c:	200017f8 	.word	0x200017f8
    2b70:	200017e0 	.word	0x200017e0
    2b74:	20000320 	.word	0x20000320
    2b78:	200017c4 	.word	0x200017c4
    2b7c:	20001d30 	.word	0x20001d30
    2b80:	0000396d 	.word	0x0000396d
    2b84:	0000bd35 	.word	0x0000bd35
    2b88:	0000c075 	.word	0x0000c075
    2b8c:	3ff00000 	.word	0x3ff00000
    2b90:	0000babd 	.word	0x0000babd
    2b94:	0000c245 	.word	0x0000c245
    2b98:	00003969 	.word	0x00003969
    2b9c:	00003a61 	.word	0x00003a61

					}
					if (grid_ui_encoder_array[i].rotation_value < 64){

						grid_ui_encoder_array[i].rotation_value++;
    2ba0:	3301      	adds	r3, #1
    2ba2:	b2db      	uxtb	r3, r3
    2ba4:	4a22      	ldr	r2, [pc, #136]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2ba6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2baa:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2bac:	005b      	lsls	r3, r3, #1
    2bae:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2bb0:	f104 0820 	add.w	r8, r4, #32
    2bb4:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2bb8:	4e1e      	ldr	r6, [pc, #120]	; (2c34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>)
    2bba:	68b3      	ldr	r3, [r6, #8]
    2bbc:	444b      	add	r3, r9
    2bbe:	6858      	ldr	r0, [r3, #4]
    2bc0:	462a      	mov	r2, r5
    2bc2:	2102      	movs	r1, #2
    2bc4:	3009      	adds	r0, #9
    2bc6:	4b1c      	ldr	r3, [pc, #112]	; (2c38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a0>)
    2bc8:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2bca:	68b3      	ldr	r3, [r6, #8]
    2bcc:	444b      	add	r3, r9
    2bce:	68db      	ldr	r3, [r3, #12]
    2bd0:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2bd2:	fa5f f188 	uxtb.w	r1, r8
    2bd6:	4630      	mov	r0, r6
    2bd8:	4b18      	ldr	r3, [pc, #96]	; (2c3c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a4>)
    2bda:	4798      	blx	r3
    2bdc:	e01f      	b.n	2c1e <grid_module_en16_reva_hardware_transfer_complete_cb+0x386>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2bde:	2200      	movs	r2, #0
    2be0:	4b17      	ldr	r3, [pc, #92]	; (2c40 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a8>)
    2be2:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2be4:	4b17      	ldr	r3, [pc, #92]	; (2c44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ac>)
    2be6:	4798      	blx	r3
}
    2be8:	b003      	add	sp, #12
    2bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2bee:	4b10      	ldr	r3, [pc, #64]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2bf0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2bf4:	739d      	strb	r5, [r3, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
    2bf6:	6899      	ldr	r1, [r3, #8]
    2bf8:	4813      	ldr	r0, [pc, #76]	; (2c48 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2bfa:	4b14      	ldr	r3, [pc, #80]	; (2c4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>)
    2bfc:	4798      	blx	r3
    2bfe:	28c8      	cmp	r0, #200	; 0xc8
    2c00:	f67f aecb 	bls.w	299a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
					if (grid_ui_encoder_array[i].rotation_value > 64){
    2c04:	4b0a      	ldr	r3, [pc, #40]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c06:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c0a:	78db      	ldrb	r3, [r3, #3]
    2c0c:	2b40      	cmp	r3, #64	; 0x40
    2c0e:	f63f af7d 	bhi.w	2b0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x274>
					if (grid_ui_encoder_array[i].rotation_value < 64){
    2c12:	4b07      	ldr	r3, [pc, #28]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c14:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c18:	78db      	ldrb	r3, [r3, #3]
    2c1a:	2b3f      	cmp	r3, #63	; 0x3f
    2c1c:	d9c0      	bls.n	2ba0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2c1e:	480a      	ldr	r0, [pc, #40]	; (2c48 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2c20:	4b0b      	ldr	r3, [pc, #44]	; (2c50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b8>)
    2c22:	4798      	blx	r3
    2c24:	4902      	ldr	r1, [pc, #8]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c26:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    2c2a:	60a0      	str	r0, [r4, #8]
    2c2c:	e6b5      	b.n	299a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
    2c2e:	bf00      	nop
    2c30:	200036f4 	.word	0x200036f4
    2c34:	20001d20 	.word	0x20001d20
    2c38:	00003a61 	.word	0x00003a61
    2c3c:	00004157 	.word	0x00004157
    2c40:	200036f0 	.word	0x200036f0
    2c44:	00002861 	.word	0x00002861
    2c48:	20001d30 	.word	0x20001d30
    2c4c:	0000396d 	.word	0x0000396d
    2c50:	00003969 	.word	0x00003969

00002c54 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2c54:	b510      	push	{r4, lr}
    2c56:	4b0e      	ldr	r3, [pc, #56]	; (2c90 <grid_module_en16_reva_hardware_init+0x3c>)
    2c58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2c5c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c5e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c64:	629a      	str	r2, [r3, #40]	; 0x28
    2c66:	4a0b      	ldr	r2, [pc, #44]	; (2c94 <grid_module_en16_reva_hardware_init+0x40>)
    2c68:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2c6a:	4c0b      	ldr	r4, [pc, #44]	; (2c98 <grid_module_en16_reva_hardware_init+0x44>)
    2c6c:	2103      	movs	r1, #3
    2c6e:	4620      	mov	r0, r4
    2c70:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <grid_module_en16_reva_hardware_init+0x48>)
    2c72:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2c74:	490a      	ldr	r1, [pc, #40]	; (2ca0 <grid_module_en16_reva_hardware_init+0x4c>)
    2c76:	4620      	mov	r0, r4
    2c78:	4b0a      	ldr	r3, [pc, #40]	; (2ca4 <grid_module_en16_reva_hardware_init+0x50>)
    2c7a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2c7c:	490a      	ldr	r1, [pc, #40]	; (2ca8 <grid_module_en16_reva_hardware_init+0x54>)
    2c7e:	4620      	mov	r0, r4
    2c80:	4b0a      	ldr	r3, [pc, #40]	; (2cac <grid_module_en16_reva_hardware_init+0x58>)
    2c82:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2c84:	4a0a      	ldr	r2, [pc, #40]	; (2cb0 <grid_module_en16_reva_hardware_init+0x5c>)
    2c86:	2100      	movs	r1, #0
    2c88:	4620      	mov	r0, r4
    2c8a:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <grid_module_en16_reva_hardware_init+0x60>)
    2c8c:	4798      	blx	r3
    2c8e:	bd10      	pop	{r4, pc}
    2c90:	41008000 	.word	0x41008000
    2c94:	c0000020 	.word	0xc0000020
    2c98:	20000f4c 	.word	0x20000f4c
    2c9c:	00004efd 	.word	0x00004efd
    2ca0:	00061a80 	.word	0x00061a80
    2ca4:	00004ec1 	.word	0x00004ec1
    2ca8:	200017dc 	.word	0x200017dc
    2cac:	00004fe5 	.word	0x00004fe5
    2cb0:	00002899 	.word	0x00002899
    2cb4:	00004fa1 	.word	0x00004fa1

00002cb8 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2cbc:	b091      	sub	sp, #68	; 0x44
    2cbe:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2cc0:	2110      	movs	r1, #16
    2cc2:	4836      	ldr	r0, [pc, #216]	; (2d9c <grid_module_en16_reva_init+0xe4>)
    2cc4:	4b36      	ldr	r3, [pc, #216]	; (2da0 <grid_module_en16_reva_init+0xe8>)
    2cc6:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2cc8:	2130      	movs	r1, #48	; 0x30
    2cca:	4640      	mov	r0, r8
    2ccc:	4b35      	ldr	r3, [pc, #212]	; (2da4 <grid_module_en16_reva_init+0xec>)
    2cce:	4798      	blx	r3
    2cd0:	2500      	movs	r5, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2cd2:	462c      	mov	r4, r5
    2cd4:	4f34      	ldr	r7, [pc, #208]	; (2da8 <grid_module_en16_reva_init+0xf0>)
    2cd6:	e036      	b.n	2d46 <grid_module_en16_reva_init+0x8e>
		

		if (i<16){ // ROTATION
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2cd8:	2303      	movs	r3, #3
    2cda:	9304      	str	r3, [sp, #16]
    2cdc:	9403      	str	r4, [sp, #12]
    2cde:	9502      	str	r5, [sp, #8]
    2ce0:	2390      	movs	r3, #144	; 0x90
    2ce2:	9301      	str	r3, [sp, #4]
    2ce4:	9400      	str	r4, [sp, #0]
    2ce6:	4623      	mov	r3, r4
    2ce8:	2202      	movs	r2, #2
    2cea:	4930      	ldr	r1, [pc, #192]	; (2dac <grid_module_en16_reva_init+0xf4>)
    2cec:	a808      	add	r0, sp, #32
    2cee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2dc8 <grid_module_en16_reva_init+0x110>
    2cf2:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_BROADCAST;
    2cf4:	f04f 0902 	mov.w	r9, #2
    2cf8:	e010      	b.n	2d1c <grid_module_en16_reva_init+0x64>
		
		}
		else{ // LED
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2cfa:	2303      	movs	r3, #3
    2cfc:	9304      	str	r3, [sp, #16]
    2cfe:	9403      	str	r4, [sp, #12]
    2d00:	f1a5 0220 	sub.w	r2, r5, #32
    2d04:	9202      	str	r2, [sp, #8]
    2d06:	2263      	movs	r2, #99	; 0x63
    2d08:	9201      	str	r2, [sp, #4]
    2d0a:	9400      	str	r4, [sp, #0]
    2d0c:	2202      	movs	r2, #2
    2d0e:	4927      	ldr	r1, [pc, #156]	; (2dac <grid_module_en16_reva_init+0xf4>)
    2d10:	a808      	add	r0, sp, #32
    2d12:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2dc8 <grid_module_en16_reva_init+0x110>
    2d16:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_LOCAL;
    2d18:	f04f 0901 	mov.w	r9, #1
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2d1c:	a808      	add	r0, sp, #32
    2d1e:	4b24      	ldr	r3, [pc, #144]	; (2db0 <grid_module_en16_reva_init+0xf8>)
    2d20:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2d22:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2d26:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    2d2a:	2302      	movs	r3, #2
    2d2c:	9302      	str	r3, [sp, #8]
    2d2e:	ab07      	add	r3, sp, #28
    2d30:	9301      	str	r3, [sp, #4]
    2d32:	9000      	str	r0, [sp, #0]
    2d34:	ab08      	add	r3, sp, #32
    2d36:	464a      	mov	r2, r9
    2d38:	4631      	mov	r1, r6
    2d3a:	4640      	mov	r0, r8
    2d3c:	4e1d      	ldr	r6, [pc, #116]	; (2db4 <grid_module_en16_reva_init+0xfc>)
    2d3e:	47b0      	blx	r6
    2d40:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2d42:	2d30      	cmp	r5, #48	; 0x30
    2d44:	d019      	beq.n	2d7a <grid_module_en16_reva_init+0xc2>
    2d46:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    2d48:	221e      	movs	r2, #30
    2d4a:	4621      	mov	r1, r4
    2d4c:	a808      	add	r0, sp, #32
    2d4e:	47b8      	blx	r7
		if (i<16){ // ROTATION
    2d50:	2e0f      	cmp	r6, #15
    2d52:	d9c1      	bls.n	2cd8 <grid_module_en16_reva_init+0x20>
		else if (i<16+16){ // BUTTON
    2d54:	2e1f      	cmp	r6, #31
    2d56:	d8d0      	bhi.n	2cfa <grid_module_en16_reva_init+0x42>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d58:	2303      	movs	r3, #3
    2d5a:	9304      	str	r3, [sp, #16]
    2d5c:	9403      	str	r4, [sp, #12]
    2d5e:	9502      	str	r5, [sp, #8]
    2d60:	2390      	movs	r3, #144	; 0x90
    2d62:	9301      	str	r3, [sp, #4]
    2d64:	9400      	str	r4, [sp, #0]
    2d66:	4623      	mov	r3, r4
    2d68:	2202      	movs	r2, #2
    2d6a:	4910      	ldr	r1, [pc, #64]	; (2dac <grid_module_en16_reva_init+0xf4>)
    2d6c:	a808      	add	r0, sp, #32
    2d6e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2dc8 <grid_module_en16_reva_init+0x110>
    2d72:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_BROADCAST;
    2d74:	f04f 0902 	mov.w	r9, #2
    2d78:	e7d0      	b.n	2d1c <grid_module_en16_reva_init+0x64>
		
	}
	
	grid_report_sys_init(mod);
    2d7a:	4640      	mov	r0, r8
    2d7c:	4b0e      	ldr	r3, [pc, #56]	; (2db8 <grid_module_en16_reva_init+0x100>)
    2d7e:	4798      	blx	r3
    2d80:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2d82:	490e      	ldr	r1, [pc, #56]	; (2dbc <grid_module_en16_reva_init+0x104>)
    2d84:	011a      	lsls	r2, r3, #4
    2d86:	5453      	strb	r3, [r2, r1]
    2d88:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2d8a:	2b10      	cmp	r3, #16
    2d8c:	d1fa      	bne.n	2d84 <grid_module_en16_reva_init+0xcc>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2d8e:	4b0c      	ldr	r3, [pc, #48]	; (2dc0 <grid_module_en16_reva_init+0x108>)
    2d90:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2d92:	4b0c      	ldr	r3, [pc, #48]	; (2dc4 <grid_module_en16_reva_init+0x10c>)
    2d94:	4798      	blx	r3
	
}
    2d96:	b011      	add	sp, #68	; 0x44
    2d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d9c:	200036c4 	.word	0x200036c4
    2da0:	000023c9 	.word	0x000023c9
    2da4:	00003e41 	.word	0x00003e41
    2da8:	0000c2f3 	.word	0x0000c2f3
    2dac:	0000d8e8 	.word	0x0000d8e8
    2db0:	0000c729 	.word	0x0000c729
    2db4:	00003f05 	.word	0x00003f05
    2db8:	00003f29 	.word	0x00003f29
    2dbc:	200036f4 	.word	0x200036f4
    2dc0:	00002c55 	.word	0x00002c55
    2dc4:	00002861 	.word	0x00002861
    2dc8:	0000c6e1 	.word	0x0000c6e1

00002dcc <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2dcc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2dce:	4803      	ldr	r0, [pc, #12]	; (2ddc <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2dd0:	4c03      	ldr	r4, [pc, #12]	; (2de0 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2dd2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2dd4:	4803      	ldr	r0, [pc, #12]	; (2de4 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2dd6:	47a0      	blx	r4
    2dd8:	bd10      	pop	{r4, pc}
    2dda:	bf00      	nop
    2ddc:	20001058 	.word	0x20001058
    2de0:	00004991 	.word	0x00004991
    2de4:	2000122c 	.word	0x2000122c

00002de8 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2de8:	4bb1      	ldr	r3, [pc, #708]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2dea:	781b      	ldrb	r3, [r3, #0]
    2dec:	2b00      	cmp	r3, #0
    2dee:	f000 810a 	beq.w	3006 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2df6:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2df8:	2300      	movs	r3, #0
    2dfa:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2dfe:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2e02:	4bac      	ldr	r3, [pc, #688]	; (30b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2e04:	781a      	ldrb	r2, [r3, #0]
    2e06:	3208      	adds	r2, #8
    2e08:	49ab      	ldr	r1, [pc, #684]	; (30b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2e0a:	5c8e      	ldrb	r6, [r1, r2]
    2e0c:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2e0e:	781a      	ldrb	r2, [r3, #0]
    2e10:	b2d2      	uxtb	r2, r2
    2e12:	5c8d      	ldrb	r5, [r1, r2]
    2e14:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2e16:	781a      	ldrb	r2, [r3, #0]
    2e18:	3201      	adds	r2, #1
    2e1a:	b2d2      	uxtb	r2, r2
    2e1c:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2e1e:	781a      	ldrb	r2, [r3, #0]
    2e20:	f002 0207 	and.w	r2, r2, #7
    2e24:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2e26:	781b      	ldrb	r3, [r3, #0]
    2e28:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2e30:	4ba2      	ldr	r3, [pc, #648]	; (30bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2e32:	bf14      	ite	ne
    2e34:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e38:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2e3c:	4b9d      	ldr	r3, [pc, #628]	; (30b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e48:	4b9c      	ldr	r3, [pc, #624]	; (30bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2e4a:	bf14      	ite	ne
    2e4c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e50:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2e54:	4b97      	ldr	r3, [pc, #604]	; (30b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2e56:	781b      	ldrb	r3, [r3, #0]
    2e58:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2e60:	4b96      	ldr	r3, [pc, #600]	; (30bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2e62:	bf14      	ite	ne
    2e64:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e68:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2e6c:	2302      	movs	r3, #2
    2e6e:	f10d 0206 	add.w	r2, sp, #6
    2e72:	2100      	movs	r1, #0
    2e74:	4892      	ldr	r0, [pc, #584]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2e76:	4c93      	ldr	r4, [pc, #588]	; (30c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2e78:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2e7a:	2302      	movs	r3, #2
    2e7c:	aa01      	add	r2, sp, #4
    2e7e:	2100      	movs	r1, #0
    2e80:	4891      	ldr	r0, [pc, #580]	; (30c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2e82:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2e84:	f8df b260 	ldr.w	fp, [pc, #608]	; 30e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
    2e88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2e8c:	47d8      	blx	fp
    2e8e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 30ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    2e92:	a385      	add	r3, pc, #532	; (adr r3, 30a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e94:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e98:	47d0      	blx	sl
    2e9a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 30f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2e9e:	47c8      	blx	r9
    2ea0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2ea4:	42a0      	cmp	r0, r4
    2ea6:	bf28      	it	cs
    2ea8:	4620      	movcs	r0, r4
    2eaa:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2eac:	fa1f f880 	uxth.w	r8, r0
    2eb0:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2eb4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2eb8:	47d8      	blx	fp
    2eba:	a37b      	add	r3, pc, #492	; (adr r3, 30a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ec0:	47d0      	blx	sl
    2ec2:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2ec4:	42a0      	cmp	r0, r4
    2ec6:	bf28      	it	cs
    2ec8:	4620      	movcs	r0, r4
    2eca:	b280      	uxth	r0, r0
    2ecc:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2ed0:	f1a5 0308 	sub.w	r3, r5, #8
    2ed4:	b2db      	uxtb	r3, r3
    2ed6:	2b01      	cmp	r3, #1
    2ed8:	f240 808d 	bls.w	2ff6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2edc:	2e0d      	cmp	r6, #13
    2ede:	f240 8098 	bls.w	3012 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22a>
		
		if (adcresult_0>10000){
    2ee2:	f242 7310 	movw	r3, #10000	; 0x2710
    2ee6:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2ee8:	bf8c      	ite	hi
    2eea:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2eec:	237f      	movls	r3, #127	; 0x7f
    2eee:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2ef2:	f242 7310 	movw	r3, #10000	; 0x2710
    2ef6:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2ef8:	bf8c      	ite	hi
    2efa:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2efc:	237f      	movls	r3, #127	; 0x7f
    2efe:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0]){
    2f02:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2f06:	3c04      	subs	r4, #4
    2f08:	0124      	lsls	r4, r4, #4
    2f0a:	4b70      	ldr	r3, [pc, #448]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f0c:	689b      	ldr	r3, [r3, #8]
    2f0e:	4423      	add	r3, r4
    2f10:	68da      	ldr	r2, [r3, #12]
    2f12:	7812      	ldrb	r2, [r2, #0]
    2f14:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2f18:	4291      	cmp	r1, r2
    2f1a:	d02f      	beq.n	2f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x194>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f1c:	2a00      	cmp	r2, #0
    2f1e:	bf0c      	ite	eq
    2f20:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f24:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2f28:	6858      	ldr	r0, [r3, #4]
    2f2a:	bf0c      	ite	eq
    2f2c:	2290      	moveq	r2, #144	; 0x90
    2f2e:	2280      	movne	r2, #128	; 0x80
    2f30:	2102      	movs	r1, #2
    2f32:	3005      	adds	r0, #5
    2f34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2f38:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2f3a:	4f64      	ldr	r7, [pc, #400]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f3c:	68bb      	ldr	r3, [r7, #8]
    2f3e:	4423      	add	r3, r4
    2f40:	6858      	ldr	r0, [r3, #4]
    2f42:	4632      	mov	r2, r6
    2f44:	2102      	movs	r1, #2
    2f46:	3007      	adds	r0, #7
    2f48:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2f4a:	68bb      	ldr	r3, [r7, #8]
    2f4c:	4423      	add	r3, r4
    2f4e:	6858      	ldr	r0, [r3, #4]
    2f50:	464a      	mov	r2, r9
    2f52:	2102      	movs	r1, #2
    2f54:	3009      	adds	r0, #9
    2f56:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2f58:	68bb      	ldr	r3, [r7, #8]
    2f5a:	4423      	add	r3, r4
    2f5c:	6858      	ldr	r0, [r3, #4]
    2f5e:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2f62:	2102      	movs	r1, #2
    2f64:	3015      	adds	r0, #21
    2f66:	47c0      	blx	r8
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2f68:	68bb      	ldr	r3, [r7, #8]
    2f6a:	441c      	add	r4, r3
    2f6c:	68e3      	ldr	r3, [r4, #12]
    2f6e:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2f72:	1f31      	subs	r1, r6, #4
    2f74:	b2c9      	uxtb	r1, r1
    2f76:	4638      	mov	r0, r7
    2f78:	4b55      	ldr	r3, [pc, #340]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f7a:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0]){
    2f7c:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2f80:	3c04      	subs	r4, #4
    2f82:	0124      	lsls	r4, r4, #4
    2f84:	4b51      	ldr	r3, [pc, #324]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f86:	689b      	ldr	r3, [r3, #8]
    2f88:	4423      	add	r3, r4
    2f8a:	68da      	ldr	r2, [r3, #12]
    2f8c:	7812      	ldrb	r2, [r2, #0]
    2f8e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f92:	4291      	cmp	r1, r2
    2f94:	d02f      	beq.n	2ff6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f96:	2a00      	cmp	r2, #0
    2f98:	bf0c      	ite	eq
    2f9a:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f9e:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    2fa2:	6858      	ldr	r0, [r3, #4]
    2fa4:	bf0c      	ite	eq
    2fa6:	2290      	moveq	r2, #144	; 0x90
    2fa8:	2280      	movne	r2, #128	; 0x80
    2faa:	2102      	movs	r1, #2
    2fac:	3005      	adds	r0, #5
    2fae:	f8df 8134 	ldr.w	r8, [pc, #308]	; 30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2fb2:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_0);
    2fb4:	4f45      	ldr	r7, [pc, #276]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2fb6:	68bb      	ldr	r3, [r7, #8]
    2fb8:	4423      	add	r3, r4
    2fba:	6858      	ldr	r0, [r3, #4]
    2fbc:	4632      	mov	r2, r6
    2fbe:	2102      	movs	r1, #2
    2fc0:	3007      	adds	r0, #7
    2fc2:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    2fc4:	68bb      	ldr	r3, [r7, #8]
    2fc6:	4423      	add	r3, r4
    2fc8:	6858      	ldr	r0, [r3, #4]
    2fca:	464a      	mov	r2, r9
    2fcc:	2102      	movs	r1, #2
    2fce:	3009      	adds	r0, #9
    2fd0:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    2fd2:	68bb      	ldr	r3, [r7, #8]
    2fd4:	4423      	add	r3, r4
    2fd6:	6858      	ldr	r0, [r3, #4]
    2fd8:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2fdc:	2102      	movs	r1, #2
    2fde:	3015      	adds	r0, #21
    2fe0:	47c0      	blx	r8
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    2fe2:	68bb      	ldr	r3, [r7, #8]
    2fe4:	441c      	add	r4, r3
    2fe6:	68e3      	ldr	r3, [r4, #12]
    2fe8:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    2fec:	1f29      	subs	r1, r5, #4
    2fee:	b2c9      	uxtb	r1, r1
    2ff0:	4638      	mov	r0, r7
    2ff2:	4b37      	ldr	r3, [pc, #220]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2ff4:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2ff6:	2200      	movs	r2, #0
    2ff8:	4b2d      	ldr	r3, [pc, #180]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2ffa:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2ffc:	4b35      	ldr	r3, [pc, #212]	; (30d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2ffe:	4798      	blx	r3
}
    3000:	b003      	add	sp, #12
    3002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_pbf4_reva_hardware_transfer_complete++;
    3006:	4a2a      	ldr	r2, [pc, #168]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    3008:	7813      	ldrb	r3, [r2, #0]
    300a:	3301      	adds	r3, #1
    300c:	b2db      	uxtb	r3, r3
    300e:	7013      	strb	r3, [r2, #0]
    3010:	4770      	bx	lr
		if (adc_index_1 == 0 || adc_index_1 == 1){
    3012:	2d01      	cmp	r5, #1
    3014:	d936      	bls.n	3084 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    3016:	b2b9      	uxth	r1, r7
    3018:	4630      	mov	r0, r6
    301a:	4c2f      	ldr	r4, [pc, #188]	; (30d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    301c:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    301e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3022:	4628      	mov	r0, r5
    3024:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    3026:	4630      	mov	r0, r6
    3028:	4b2c      	ldr	r3, [pc, #176]	; (30dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    302a:	4798      	blx	r3
    302c:	2800      	cmp	r0, #0
    302e:	d161      	bne.n	30f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
		if (grid_ain_get_changed(adc_index_1)){
    3030:	4628      	mov	r0, r5
    3032:	4b2a      	ldr	r3, [pc, #168]	; (30dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    3034:	4798      	blx	r3
    3036:	2800      	cmp	r0, #0
    3038:	d0dd      	beq.n	2ff6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    303a:	2107      	movs	r1, #7
    303c:	4628      	mov	r0, r5
    303e:	4b28      	ldr	r3, [pc, #160]	; (30e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    3040:	4798      	blx	r3
    3042:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    3044:	ea4f 1805 	mov.w	r8, r5, lsl #4
    3048:	4c20      	ldr	r4, [pc, #128]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    304a:	68a3      	ldr	r3, [r4, #8]
    304c:	4443      	add	r3, r8
    304e:	6858      	ldr	r0, [r3, #4]
    3050:	462a      	mov	r2, r5
    3052:	2102      	movs	r1, #2
    3054:	3007      	adds	r0, #7
    3056:	4f23      	ldr	r7, [pc, #140]	; (30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    3058:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    305a:	68a3      	ldr	r3, [r4, #8]
    305c:	4443      	add	r3, r8
    305e:	6858      	ldr	r0, [r3, #4]
    3060:	b2f2      	uxtb	r2, r6
    3062:	2102      	movs	r1, #2
    3064:	3009      	adds	r0, #9
    3066:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    3068:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    306a:	68a3      	ldr	r3, [r4, #8]
    306c:	4443      	add	r3, r8
    306e:	6858      	ldr	r0, [r3, #4]
    3070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3074:	2102      	movs	r1, #2
    3076:	3015      	adds	r0, #21
    3078:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    307a:	4629      	mov	r1, r5
    307c:	4620      	mov	r0, r4
    307e:	4b14      	ldr	r3, [pc, #80]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    3080:	4798      	blx	r3
    3082:	e7b8      	b.n	2ff6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    3084:	b2b9      	uxth	r1, r7
    3086:	f64f 78ff 	movw	r8, #65535	; 0xffff
    308a:	eba8 0101 	sub.w	r1, r8, r1
    308e:	4630      	mov	r0, r6
    3090:	4c11      	ldr	r4, [pc, #68]	; (30d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    3092:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    3094:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3098:	eba8 0101 	sub.w	r1, r8, r1
    309c:	4628      	mov	r0, r5
    309e:	47a0      	blx	r4
    30a0:	e7c1      	b.n	3026 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x23e>
    30a2:	bf00      	nop
    30a4:	f3af 8000 	nop.w
    30a8:	47ae147b 	.word	0x47ae147b
    30ac:	3ff07ae1 	.word	0x3ff07ae1
    30b0:	200017f4 	.word	0x200017f4
    30b4:	20003659 	.word	0x20003659
    30b8:	20000334 	.word	0x20000334
    30bc:	41008000 	.word	0x41008000
    30c0:	20001058 	.word	0x20001058
    30c4:	000048b1 	.word	0x000048b1
    30c8:	2000122c 	.word	0x2000122c
    30cc:	20001d20 	.word	0x20001d20
    30d0:	00004157 	.word	0x00004157
    30d4:	00002dcd 	.word	0x00002dcd
    30d8:	000011e9 	.word	0x000011e9
    30dc:	000012e5 	.word	0x000012e5
    30e0:	000012f5 	.word	0x000012f5
    30e4:	00003a61 	.word	0x00003a61
    30e8:	0000bd55 	.word	0x0000bd55
    30ec:	0000be21 	.word	0x0000be21
    30f0:	0000c245 	.word	0x0000c245
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    30f4:	2107      	movs	r1, #7
    30f6:	4630      	mov	r0, r6
    30f8:	4b11      	ldr	r3, [pc, #68]	; (3140 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    30fa:	4798      	blx	r3
    30fc:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    30fe:	ea4f 1906 	mov.w	r9, r6, lsl #4
    3102:	4c10      	ldr	r4, [pc, #64]	; (3144 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    3104:	68a3      	ldr	r3, [r4, #8]
    3106:	444b      	add	r3, r9
    3108:	6858      	ldr	r0, [r3, #4]
    310a:	4632      	mov	r2, r6
    310c:	2102      	movs	r1, #2
    310e:	3007      	adds	r0, #7
    3110:	f8df 8038 	ldr.w	r8, [pc, #56]	; 314c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x364>
    3114:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    3116:	68a3      	ldr	r3, [r4, #8]
    3118:	444b      	add	r3, r9
    311a:	6858      	ldr	r0, [r3, #4]
    311c:	b2fa      	uxtb	r2, r7
    311e:	2102      	movs	r1, #2
    3120:	3009      	adds	r0, #9
    3122:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    3124:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    3126:	68a3      	ldr	r3, [r4, #8]
    3128:	444b      	add	r3, r9
    312a:	6858      	ldr	r0, [r3, #4]
    312c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3130:	2102      	movs	r1, #2
    3132:	3015      	adds	r0, #21
    3134:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    3136:	4631      	mov	r1, r6
    3138:	4620      	mov	r0, r4
    313a:	4b03      	ldr	r3, [pc, #12]	; (3148 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    313c:	4798      	blx	r3
    313e:	e777      	b.n	3030 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x248>
    3140:	000012f5 	.word	0x000012f5
    3144:	20001d20 	.word	0x20001d20
    3148:	00004157 	.word	0x00004157
    314c:	00003a61 	.word	0x00003a61

00003150 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    3150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3152:	4f0b      	ldr	r7, [pc, #44]	; (3180 <grid_module_pbf4_reva_hardware_init+0x30>)
    3154:	4c0b      	ldr	r4, [pc, #44]	; (3184 <grid_module_pbf4_reva_hardware_init+0x34>)
    3156:	463b      	mov	r3, r7
    3158:	2200      	movs	r2, #0
    315a:	4611      	mov	r1, r2
    315c:	4620      	mov	r0, r4
    315e:	4e0a      	ldr	r6, [pc, #40]	; (3188 <grid_module_pbf4_reva_hardware_init+0x38>)
    3160:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3162:	4d0a      	ldr	r5, [pc, #40]	; (318c <grid_module_pbf4_reva_hardware_init+0x3c>)
    3164:	463b      	mov	r3, r7
    3166:	2200      	movs	r2, #0
    3168:	4611      	mov	r1, r2
    316a:	4628      	mov	r0, r5
    316c:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    316e:	2100      	movs	r1, #0
    3170:	4620      	mov	r0, r4
    3172:	4c07      	ldr	r4, [pc, #28]	; (3190 <grid_module_pbf4_reva_hardware_init+0x40>)
    3174:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3176:	2100      	movs	r1, #0
    3178:	4628      	mov	r0, r5
    317a:	47a0      	blx	r4
    317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    317e:	bf00      	nop
    3180:	00002de9 	.word	0x00002de9
    3184:	20001058 	.word	0x20001058
    3188:	00004831 	.word	0x00004831
    318c:	2000122c 	.word	0x2000122c
    3190:	000047f1 	.word	0x000047f1

00003194 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3198:	b097      	sub	sp, #92	; 0x5c
    319a:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    319c:	2307      	movs	r3, #7
    319e:	220e      	movs	r2, #14
    31a0:	2105      	movs	r1, #5
    31a2:	2010      	movs	r0, #16
    31a4:	4c26      	ldr	r4, [pc, #152]	; (3240 <grid_module_pbf4_reva_init+0xac>)
    31a6:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    31a8:	210c      	movs	r1, #12
    31aa:	4826      	ldr	r0, [pc, #152]	; (3244 <grid_module_pbf4_reva_init+0xb0>)
    31ac:	4b26      	ldr	r3, [pc, #152]	; (3248 <grid_module_pbf4_reva_init+0xb4>)
    31ae:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    31b0:	210c      	movs	r1, #12
    31b2:	4640      	mov	r0, r8
    31b4:	4b25      	ldr	r3, [pc, #148]	; (324c <grid_module_pbf4_reva_init+0xb8>)
    31b6:	4798      	blx	r3
    31b8:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<12; i++){
		
		uint8_t payload_template[30] = {0};
    31ba:	462c      	mov	r4, r5
    31bc:	4f24      	ldr	r7, [pc, #144]	; (3250 <grid_module_pbf4_reva_init+0xbc>)
    31be:	b2ee      	uxtb	r6, r5
    31c0:	221e      	movs	r2, #30
    31c2:	4621      	mov	r1, r4
    31c4:	a80e      	add	r0, sp, #56	; 0x38
    31c6:	47b8      	blx	r7
		
		if (i<8){ // PORENTIOMETERS & FADERS
    31c8:	2e07      	cmp	r6, #7
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    31ca:	f04f 0303 	mov.w	r3, #3
    31ce:	930b      	str	r3, [sp, #44]	; 0x2c
    31d0:	940a      	str	r4, [sp, #40]	; 0x28
    31d2:	9509      	str	r5, [sp, #36]	; 0x24
    31d4:	f04f 0263 	mov.w	r2, #99	; 0x63
    31d8:	9208      	str	r2, [sp, #32]
    31da:	9407      	str	r4, [sp, #28]
    31dc:	9306      	str	r3, [sp, #24]
    31de:	f04f 0202 	mov.w	r2, #2
    31e2:	9205      	str	r2, [sp, #20]
    31e4:	9304      	str	r3, [sp, #16]
    31e6:	9403      	str	r4, [sp, #12]
    31e8:	9502      	str	r5, [sp, #8]
    31ea:	bf94      	ite	ls
    31ec:	23b0      	movls	r3, #176	; 0xb0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    31ee:	2390      	movhi	r3, #144	; 0x90
    31f0:	9301      	str	r3, [sp, #4]
    31f2:	9400      	str	r4, [sp, #0]
    31f4:	4623      	mov	r3, r4
    31f6:	4917      	ldr	r1, [pc, #92]	; (3254 <grid_module_pbf4_reva_init+0xc0>)
    31f8:	a80e      	add	r0, sp, #56	; 0x38
    31fa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 326c <grid_module_pbf4_reva_init+0xd8>
    31fe:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3200:	a80e      	add	r0, sp, #56	; 0x38
    3202:	4b15      	ldr	r3, [pc, #84]	; (3258 <grid_module_pbf4_reva_init+0xc4>)
    3204:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3206:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    320a:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    320e:	2202      	movs	r2, #2
    3210:	9202      	str	r2, [sp, #8]
    3212:	ab0d      	add	r3, sp, #52	; 0x34
    3214:	9301      	str	r3, [sp, #4]
    3216:	b2c0      	uxtb	r0, r0
    3218:	9000      	str	r0, [sp, #0]
    321a:	ab0e      	add	r3, sp, #56	; 0x38
    321c:	4631      	mov	r1, r6
    321e:	4640      	mov	r0, r8
    3220:	4e0e      	ldr	r6, [pc, #56]	; (325c <grid_module_pbf4_reva_init+0xc8>)
    3222:	47b0      	blx	r6
    3224:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    3226:	2d0c      	cmp	r5, #12
    3228:	d1c9      	bne.n	31be <grid_module_pbf4_reva_init+0x2a>
		
	}
	
	grid_report_sys_init(mod);
    322a:	4640      	mov	r0, r8
    322c:	4b0c      	ldr	r3, [pc, #48]	; (3260 <grid_module_pbf4_reva_init+0xcc>)
    322e:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    3230:	4b0c      	ldr	r3, [pc, #48]	; (3264 <grid_module_pbf4_reva_init+0xd0>)
    3232:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    3234:	4b0c      	ldr	r3, [pc, #48]	; (3268 <grid_module_pbf4_reva_init+0xd4>)
    3236:	4798      	blx	r3
	
    3238:	b017      	add	sp, #92	; 0x5c
    323a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    323e:	bf00      	nop
    3240:	0000119d 	.word	0x0000119d
    3244:	200036c4 	.word	0x200036c4
    3248:	000023c9 	.word	0x000023c9
    324c:	00003e41 	.word	0x00003e41
    3250:	0000c2f3 	.word	0x0000c2f3
    3254:	0000d8d0 	.word	0x0000d8d0
    3258:	0000c729 	.word	0x0000c729
    325c:	00003f05 	.word	0x00003f05
    3260:	00003f29 	.word	0x00003f29
    3264:	00003151 	.word	0x00003151
    3268:	00002dcd 	.word	0x00002dcd
    326c:	0000c6e1 	.word	0x0000c6e1

00003270 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3270:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3272:	4803      	ldr	r0, [pc, #12]	; (3280 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3274:	4c03      	ldr	r4, [pc, #12]	; (3284 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3276:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3278:	4803      	ldr	r0, [pc, #12]	; (3288 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    327a:	47a0      	blx	r4
    327c:	bd10      	pop	{r4, pc}
    327e:	bf00      	nop
    3280:	20001058 	.word	0x20001058
    3284:	00004991 	.word	0x00004991
    3288:	2000122c 	.word	0x2000122c
    328c:	00000000 	.word	0x00000000

00003290 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3290:	4b75      	ldr	r3, [pc, #468]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3292:	781b      	ldrb	r3, [r3, #0]
    3294:	2b00      	cmp	r3, #0
    3296:	f000 8085 	beq.w	33a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    329a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    329e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    32a0:	2300      	movs	r3, #0
    32a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    32a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    32aa:	4b6f      	ldr	r3, [pc, #444]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    32ac:	785a      	ldrb	r2, [r3, #1]
    32ae:	3208      	adds	r2, #8
    32b0:	496e      	ldr	r1, [pc, #440]	; (346c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    32b2:	5c8d      	ldrb	r5, [r1, r2]
    32b4:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    32b6:	785a      	ldrb	r2, [r3, #1]
    32b8:	b2d2      	uxtb	r2, r2
    32ba:	5c8c      	ldrb	r4, [r1, r2]
    32bc:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    32be:	785a      	ldrb	r2, [r3, #1]
    32c0:	3201      	adds	r2, #1
    32c2:	b2d2      	uxtb	r2, r2
    32c4:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    32c6:	785a      	ldrb	r2, [r3, #1]
    32c8:	f002 0207 	and.w	r2, r2, #7
    32cc:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    32ce:	785b      	ldrb	r3, [r3, #1]
    32d0:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    32d8:	4b65      	ldr	r3, [pc, #404]	; (3470 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    32da:	bf14      	ite	ne
    32dc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32e0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    32e4:	4b60      	ldr	r3, [pc, #384]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    32e6:	785b      	ldrb	r3, [r3, #1]
    32e8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    32f0:	4b5f      	ldr	r3, [pc, #380]	; (3470 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    32f2:	bf14      	ite	ne
    32f4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32f8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    32fc:	4b5a      	ldr	r3, [pc, #360]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    32fe:	785b      	ldrb	r3, [r3, #1]
    3300:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3304:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3308:	4b59      	ldr	r3, [pc, #356]	; (3470 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    330a:	bf14      	ite	ne
    330c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3310:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3314:	2302      	movs	r3, #2
    3316:	f10d 0206 	add.w	r2, sp, #6
    331a:	2100      	movs	r1, #0
    331c:	4855      	ldr	r0, [pc, #340]	; (3474 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    331e:	4e56      	ldr	r6, [pc, #344]	; (3478 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    3320:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3322:	2302      	movs	r3, #2
    3324:	aa01      	add	r2, sp, #4
    3326:	2100      	movs	r1, #0
    3328:	4854      	ldr	r0, [pc, #336]	; (347c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    332a:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    332c:	f8df a168 	ldr.w	sl, [pc, #360]	; 3498 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    3330:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3334:	47d0      	blx	sl
    3336:	f8df 9164 	ldr.w	r9, [pc, #356]	; 349c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    333a:	a349      	add	r3, pc, #292	; (adr r3, 3460 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    333c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3340:	47c8      	blx	r9
    3342:	f8df 815c 	ldr.w	r8, [pc, #348]	; 34a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    3346:	47c0      	blx	r8
    3348:	f64f 76ff 	movw	r6, #65535	; 0xffff
    334c:	42b0      	cmp	r0, r6
    334e:	bf28      	it	cs
    3350:	4630      	movcs	r0, r6
    3352:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3354:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3358:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    335c:	47d0      	blx	sl
    335e:	a340      	add	r3, pc, #256	; (adr r3, 3460 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    3360:	e9d3 2300 	ldrd	r2, r3, [r3]
    3364:	47c8      	blx	r9
    3366:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3368:	42b0      	cmp	r0, r6
    336a:	bf28      	it	cs
    336c:	4630      	movcs	r0, r6
    336e:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3372:	b2b9      	uxth	r1, r7
    3374:	4628      	mov	r0, r5
    3376:	4e42      	ldr	r6, [pc, #264]	; (3480 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3378:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    337a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    337e:	4620      	mov	r0, r4
    3380:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3382:	4628      	mov	r0, r5
    3384:	4b3f      	ldr	r3, [pc, #252]	; (3484 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3386:	4798      	blx	r3
    3388:	b990      	cbnz	r0, 33b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    338a:	4620      	mov	r0, r4
    338c:	4b3d      	ldr	r3, [pc, #244]	; (3484 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    338e:	4798      	blx	r3
    3390:	2800      	cmp	r0, #0
    3392:	d139      	bne.n	3408 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3394:	2200      	movs	r2, #0
    3396:	4b34      	ldr	r3, [pc, #208]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3398:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    339a:	4b3b      	ldr	r3, [pc, #236]	; (3488 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    339c:	4798      	blx	r3
}
    339e:	b002      	add	sp, #8
    33a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    33a4:	4a30      	ldr	r2, [pc, #192]	; (3468 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    33a6:	7813      	ldrb	r3, [r2, #0]
    33a8:	3301      	adds	r3, #1
    33aa:	b2db      	uxtb	r3, r3
    33ac:	7013      	strb	r3, [r2, #0]
    33ae:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    33b0:	2107      	movs	r1, #7
    33b2:	4628      	mov	r0, r5
    33b4:	4b35      	ldr	r3, [pc, #212]	; (348c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    33b6:	4798      	blx	r3
    33b8:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    33bc:	012f      	lsls	r7, r5, #4
    33be:	4e34      	ldr	r6, [pc, #208]	; (3490 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    33c0:	68b3      	ldr	r3, [r6, #8]
    33c2:	443b      	add	r3, r7
    33c4:	6858      	ldr	r0, [r3, #4]
    33c6:	462a      	mov	r2, r5
    33c8:	2102      	movs	r1, #2
    33ca:	3007      	adds	r0, #7
    33cc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 34a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    33d0:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    33d2:	68b3      	ldr	r3, [r6, #8]
    33d4:	443b      	add	r3, r7
    33d6:	6858      	ldr	r0, [r3, #4]
    33d8:	4642      	mov	r2, r8
    33da:	2102      	movs	r1, #2
    33dc:	3009      	adds	r0, #9
    33de:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    33e0:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    33e4:	68b3      	ldr	r3, [r6, #8]
    33e6:	443b      	add	r3, r7
    33e8:	6858      	ldr	r0, [r3, #4]
    33ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    33ee:	2102      	movs	r1, #2
    33f0:	3015      	adds	r0, #21
    33f2:	47c8      	blx	r9
		mod->report_ui_array[adc_index_0].helper[0] = value;
    33f4:	68b3      	ldr	r3, [r6, #8]
    33f6:	441f      	add	r7, r3
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    33fe:	4629      	mov	r1, r5
    3400:	4630      	mov	r0, r6
    3402:	4b24      	ldr	r3, [pc, #144]	; (3494 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3404:	4798      	blx	r3
    3406:	e7c0      	b.n	338a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3408:	2107      	movs	r1, #7
    340a:	4620      	mov	r0, r4
    340c:	4b1f      	ldr	r3, [pc, #124]	; (348c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    340e:	4798      	blx	r3
    3410:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    3412:	0126      	lsls	r6, r4, #4
    3414:	4d1e      	ldr	r5, [pc, #120]	; (3490 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3416:	68ab      	ldr	r3, [r5, #8]
    3418:	4433      	add	r3, r6
    341a:	6858      	ldr	r0, [r3, #4]
    341c:	4622      	mov	r2, r4
    341e:	2102      	movs	r1, #2
    3420:	3007      	adds	r0, #7
    3422:	f8df 8080 	ldr.w	r8, [pc, #128]	; 34a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3426:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    3428:	68ab      	ldr	r3, [r5, #8]
    342a:	4433      	add	r3, r6
    342c:	6858      	ldr	r0, [r3, #4]
    342e:	463a      	mov	r2, r7
    3430:	2102      	movs	r1, #2
    3432:	3009      	adds	r0, #9
    3434:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    3436:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    3438:	68ab      	ldr	r3, [r5, #8]
    343a:	4433      	add	r3, r6
    343c:	6858      	ldr	r0, [r3, #4]
    343e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3442:	2102      	movs	r1, #2
    3444:	3015      	adds	r0, #21
    3446:	47c0      	blx	r8
		mod->report_ui_array[adc_index_1].helper[0] = value;
    3448:	68ab      	ldr	r3, [r5, #8]
    344a:	441e      	add	r6, r3
    344c:	68f3      	ldr	r3, [r6, #12]
    344e:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    3450:	4621      	mov	r1, r4
    3452:	4628      	mov	r0, r5
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3456:	4798      	blx	r3
    3458:	e79c      	b.n	3394 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    345a:	bf00      	nop
    345c:	f3af 8000 	nop.w
    3460:	47ae147b 	.word	0x47ae147b
    3464:	3ff07ae1 	.word	0x3ff07ae1
    3468:	20000646 	.word	0x20000646
    346c:	20000344 	.word	0x20000344
    3470:	41008000 	.word	0x41008000
    3474:	20001058 	.word	0x20001058
    3478:	000048b1 	.word	0x000048b1
    347c:	2000122c 	.word	0x2000122c
    3480:	000011e9 	.word	0x000011e9
    3484:	000012e5 	.word	0x000012e5
    3488:	00003271 	.word	0x00003271
    348c:	000012f5 	.word	0x000012f5
    3490:	20001d20 	.word	0x20001d20
    3494:	00004157 	.word	0x00004157
    3498:	0000bd55 	.word	0x0000bd55
    349c:	0000be21 	.word	0x0000be21
    34a0:	0000c245 	.word	0x0000c245
    34a4:	00003a61 	.word	0x00003a61

000034a8 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    34a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    34aa:	4f0b      	ldr	r7, [pc, #44]	; (34d8 <grid_module_po16_revb_hardware_init+0x30>)
    34ac:	4c0b      	ldr	r4, [pc, #44]	; (34dc <grid_module_po16_revb_hardware_init+0x34>)
    34ae:	463b      	mov	r3, r7
    34b0:	2200      	movs	r2, #0
    34b2:	4611      	mov	r1, r2
    34b4:	4620      	mov	r0, r4
    34b6:	4e0a      	ldr	r6, [pc, #40]	; (34e0 <grid_module_po16_revb_hardware_init+0x38>)
    34b8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    34ba:	4d0a      	ldr	r5, [pc, #40]	; (34e4 <grid_module_po16_revb_hardware_init+0x3c>)
    34bc:	463b      	mov	r3, r7
    34be:	2200      	movs	r2, #0
    34c0:	4611      	mov	r1, r2
    34c2:	4628      	mov	r0, r5
    34c4:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    34c6:	2100      	movs	r1, #0
    34c8:	4620      	mov	r0, r4
    34ca:	4c07      	ldr	r4, [pc, #28]	; (34e8 <grid_module_po16_revb_hardware_init+0x40>)
    34cc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    34ce:	2100      	movs	r1, #0
    34d0:	4628      	mov	r0, r5
    34d2:	47a0      	blx	r4
    34d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34d6:	bf00      	nop
    34d8:	00003291 	.word	0x00003291
    34dc:	20001058 	.word	0x20001058
    34e0:	00004831 	.word	0x00004831
    34e4:	2000122c 	.word	0x2000122c
    34e8:	000047f1 	.word	0x000047f1

000034ec <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    34ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34f0:	b096      	sub	sp, #88	; 0x58
    34f2:	4681      	mov	r9, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    34f4:	2307      	movs	r3, #7
    34f6:	220e      	movs	r2, #14
    34f8:	2105      	movs	r1, #5
    34fa:	2010      	movs	r0, #16
    34fc:	4c24      	ldr	r4, [pc, #144]	; (3590 <grid_module_po16_revb_init+0xa4>)
    34fe:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    3500:	2110      	movs	r1, #16
    3502:	4824      	ldr	r0, [pc, #144]	; (3594 <grid_module_po16_revb_init+0xa8>)
    3504:	4b24      	ldr	r3, [pc, #144]	; (3598 <grid_module_po16_revb_init+0xac>)
    3506:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    3508:	2110      	movs	r1, #16
    350a:	4648      	mov	r0, r9
    350c:	4b23      	ldr	r3, [pc, #140]	; (359c <grid_module_po16_revb_init+0xb0>)
    350e:	4798      	blx	r3
    3510:	2500      	movs	r5, #0
	
	
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    3512:	462c      	mov	r4, r5
    3514:	4f22      	ldr	r7, [pc, #136]	; (35a0 <grid_module_po16_revb_init+0xb4>)
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3516:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 35b8 <grid_module_po16_revb_init+0xcc>
		uint8_t payload_template[30] = {0};
    351a:	221e      	movs	r2, #30
    351c:	4621      	mov	r1, r4
    351e:	a80e      	add	r0, sp, #56	; 0x38
    3520:	47b8      	blx	r7
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3522:	2303      	movs	r3, #3
    3524:	930b      	str	r3, [sp, #44]	; 0x2c
    3526:	940a      	str	r4, [sp, #40]	; 0x28
    3528:	9509      	str	r5, [sp, #36]	; 0x24
    352a:	2263      	movs	r2, #99	; 0x63
    352c:	9208      	str	r2, [sp, #32]
    352e:	9407      	str	r4, [sp, #28]
    3530:	9306      	str	r3, [sp, #24]
    3532:	2602      	movs	r6, #2
    3534:	9605      	str	r6, [sp, #20]
    3536:	9304      	str	r3, [sp, #16]
    3538:	9403      	str	r4, [sp, #12]
    353a:	9502      	str	r5, [sp, #8]
    353c:	23b0      	movs	r3, #176	; 0xb0
    353e:	9301      	str	r3, [sp, #4]
    3540:	9400      	str	r4, [sp, #0]
    3542:	4623      	mov	r3, r4
    3544:	4632      	mov	r2, r6
    3546:	4641      	mov	r1, r8
    3548:	a80e      	add	r0, sp, #56	; 0x38
    354a:	f8df a070 	ldr.w	sl, [pc, #112]	; 35bc <grid_module_po16_revb_init+0xd0>
    354e:	47d0      	blx	sl
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    3550:	a80e      	add	r0, sp, #56	; 0x38
    3552:	4b14      	ldr	r3, [pc, #80]	; (35a4 <grid_module_po16_revb_init+0xb8>)
    3554:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3556:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    355a:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    355e:	9602      	str	r6, [sp, #8]
    3560:	ab0d      	add	r3, sp, #52	; 0x34
    3562:	9301      	str	r3, [sp, #4]
    3564:	b2c0      	uxtb	r0, r0
    3566:	9000      	str	r0, [sp, #0]
    3568:	ab0e      	add	r3, sp, #56	; 0x38
    356a:	4632      	mov	r2, r6
    356c:	b2e9      	uxtb	r1, r5
    356e:	4648      	mov	r0, r9
    3570:	4e0d      	ldr	r6, [pc, #52]	; (35a8 <grid_module_po16_revb_init+0xbc>)
    3572:	47b0      	blx	r6
    3574:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    3576:	2d10      	cmp	r5, #16
    3578:	d1cf      	bne.n	351a <grid_module_po16_revb_init+0x2e>
		
	}
	
	grid_report_sys_init(mod);
    357a:	4648      	mov	r0, r9
    357c:	4b0b      	ldr	r3, [pc, #44]	; (35ac <grid_module_po16_revb_init+0xc0>)
    357e:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3580:	4b0b      	ldr	r3, [pc, #44]	; (35b0 <grid_module_po16_revb_init+0xc4>)
    3582:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3584:	4b0b      	ldr	r3, [pc, #44]	; (35b4 <grid_module_po16_revb_init+0xc8>)
    3586:	4798      	blx	r3
	
    3588:	b016      	add	sp, #88	; 0x58
    358a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    358e:	bf00      	nop
    3590:	0000119d 	.word	0x0000119d
    3594:	200036c4 	.word	0x200036c4
    3598:	000023c9 	.word	0x000023c9
    359c:	00003e41 	.word	0x00003e41
    35a0:	0000c2f3 	.word	0x0000c2f3
    35a4:	0000c729 	.word	0x0000c729
    35a8:	00003f05 	.word	0x00003f05
    35ac:	00003f29 	.word	0x00003f29
    35b0:	000034a9 	.word	0x000034a9
    35b4:	00003271 	.word	0x00003271
    35b8:	0000d8d0 	.word	0x0000d8d0
    35bc:	0000c6e1 	.word	0x0000c6e1

000035c0 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    35c0:	8a02      	ldrh	r2, [r0, #16]
    35c2:	b142      	cbz	r2, 35d6 <tx_cb_USART_GRID+0x16>
    35c4:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    35c8:	322f      	adds	r2, #47	; 0x2f
    35ca:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    35cc:	2100      	movs	r1, #0
    35ce:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    35d2:	4293      	cmp	r3, r2
    35d4:	d1fb      	bne.n	35ce <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    35d6:	2300      	movs	r3, #0
    35d8:	8203      	strh	r3, [r0, #16]
    35da:	4770      	bx	lr

000035dc <tx_cb_USART_GRID_W>:
{
    35dc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    35de:	4802      	ldr	r0, [pc, #8]	; (35e8 <tx_cb_USART_GRID_W+0xc>)
    35e0:	4b02      	ldr	r3, [pc, #8]	; (35ec <tx_cb_USART_GRID_W+0x10>)
    35e2:	4798      	blx	r3
    35e4:	bd08      	pop	{r3, pc}
    35e6:	bf00      	nop
    35e8:	200021e0 	.word	0x200021e0
    35ec:	000035c1 	.word	0x000035c1

000035f0 <tx_cb_USART_GRID_S>:
{
    35f0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    35f2:	4802      	ldr	r0, [pc, #8]	; (35fc <tx_cb_USART_GRID_S+0xc>)
    35f4:	4b02      	ldr	r3, [pc, #8]	; (3600 <tx_cb_USART_GRID_S+0x10>)
    35f6:	4798      	blx	r3
    35f8:	bd08      	pop	{r3, pc}
    35fa:	bf00      	nop
    35fc:	2000270c 	.word	0x2000270c
    3600:	000035c1 	.word	0x000035c1

00003604 <tx_cb_USART_GRID_E>:
{
    3604:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    3606:	4802      	ldr	r0, [pc, #8]	; (3610 <tx_cb_USART_GRID_E+0xc>)
    3608:	4b02      	ldr	r3, [pc, #8]	; (3614 <tx_cb_USART_GRID_E+0x10>)
    360a:	4798      	blx	r3
    360c:	bd08      	pop	{r3, pc}
    360e:	bf00      	nop
    3610:	20003140 	.word	0x20003140
    3614:	000035c1 	.word	0x000035c1

00003618 <tx_cb_USART_GRID_N>:
{
    3618:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    361a:	4802      	ldr	r0, [pc, #8]	; (3624 <tx_cb_USART_GRID_N+0xc>)
    361c:	4b02      	ldr	r3, [pc, #8]	; (3628 <tx_cb_USART_GRID_N+0x10>)
    361e:	4798      	blx	r3
    3620:	bd08      	pop	{r3, pc}
    3622:	bf00      	nop
    3624:	200012ac 	.word	0x200012ac
    3628:	000035c1 	.word	0x000035c1

0000362c <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    362c:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    362e:	2301      	movs	r3, #1
    3630:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    3632:	6880      	ldr	r0, [r0, #8]
    3634:	4b01      	ldr	r3, [pc, #4]	; (363c <err_cb_USART_GRID+0x10>)
    3636:	4798      	blx	r3
    3638:	bd08      	pop	{r3, pc}
    363a:	bf00      	nop
    363c:	000055c1 	.word	0x000055c1

00003640 <err_cb_USART_GRID_W>:
{
    3640:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    3642:	4802      	ldr	r0, [pc, #8]	; (364c <err_cb_USART_GRID_W+0xc>)
    3644:	4b02      	ldr	r3, [pc, #8]	; (3650 <err_cb_USART_GRID_W+0x10>)
    3646:	4798      	blx	r3
    3648:	bd08      	pop	{r3, pc}
    364a:	bf00      	nop
    364c:	200021e0 	.word	0x200021e0
    3650:	0000362d 	.word	0x0000362d

00003654 <err_cb_USART_GRID_S>:
{
    3654:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    3656:	4802      	ldr	r0, [pc, #8]	; (3660 <err_cb_USART_GRID_S+0xc>)
    3658:	4b02      	ldr	r3, [pc, #8]	; (3664 <err_cb_USART_GRID_S+0x10>)
    365a:	4798      	blx	r3
    365c:	bd08      	pop	{r3, pc}
    365e:	bf00      	nop
    3660:	2000270c 	.word	0x2000270c
    3664:	0000362d 	.word	0x0000362d

00003668 <err_cb_USART_GRID_E>:
{
    3668:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    366a:	4802      	ldr	r0, [pc, #8]	; (3674 <err_cb_USART_GRID_E+0xc>)
    366c:	4b02      	ldr	r3, [pc, #8]	; (3678 <err_cb_USART_GRID_E+0x10>)
    366e:	4798      	blx	r3
    3670:	bd08      	pop	{r3, pc}
    3672:	bf00      	nop
    3674:	20003140 	.word	0x20003140
    3678:	0000362d 	.word	0x0000362d

0000367c <err_cb_USART_GRID_N>:
{
    367c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    367e:	4802      	ldr	r0, [pc, #8]	; (3688 <err_cb_USART_GRID_N+0xc>)
    3680:	4b02      	ldr	r3, [pc, #8]	; (368c <err_cb_USART_GRID_N+0x10>)
    3682:	4798      	blx	r3
    3684:	bd08      	pop	{r3, pc}
    3686:	bf00      	nop
    3688:	200012ac 	.word	0x200012ac
    368c:	0000362d 	.word	0x0000362d

00003690 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3690:	b508      	push	{r3, lr}
    3692:	7b83      	ldrb	r3, [r0, #14]
    3694:	011b      	lsls	r3, r3, #4
    3696:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    369a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    369e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    36a0:	f022 0202 	bic.w	r2, r2, #2
    36a4:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    36a6:	2100      	movs	r1, #0
    36a8:	7b80      	ldrb	r0, [r0, #14]
    36aa:	4b01      	ldr	r3, [pc, #4]	; (36b0 <grid_sys_port_reset_dma+0x20>)
    36ac:	4798      	blx	r3
    36ae:	bd08      	pop	{r3, pc}
    36b0:	00006609 	.word	0x00006609

000036b4 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    36b4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <dma_transfer_complete_w_cb+0xc>)
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <dma_transfer_complete_w_cb+0x10>)
    36ba:	4798      	blx	r3
    36bc:	bd08      	pop	{r3, pc}
    36be:	bf00      	nop
    36c0:	200021e0 	.word	0x200021e0
    36c4:	00003691 	.word	0x00003691

000036c8 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    36c8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    36ca:	4802      	ldr	r0, [pc, #8]	; (36d4 <dma_transfer_complete_s_cb+0xc>)
    36cc:	4b02      	ldr	r3, [pc, #8]	; (36d8 <dma_transfer_complete_s_cb+0x10>)
    36ce:	4798      	blx	r3
    36d0:	bd08      	pop	{r3, pc}
    36d2:	bf00      	nop
    36d4:	2000270c 	.word	0x2000270c
    36d8:	00003691 	.word	0x00003691

000036dc <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    36dc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    36de:	4802      	ldr	r0, [pc, #8]	; (36e8 <dma_transfer_complete_e_cb+0xc>)
    36e0:	4b02      	ldr	r3, [pc, #8]	; (36ec <dma_transfer_complete_e_cb+0x10>)
    36e2:	4798      	blx	r3
    36e4:	bd08      	pop	{r3, pc}
    36e6:	bf00      	nop
    36e8:	20003140 	.word	0x20003140
    36ec:	00003691 	.word	0x00003691

000036f0 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    36f0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    36f2:	4802      	ldr	r0, [pc, #8]	; (36fc <dma_transfer_complete_n_cb+0xc>)
    36f4:	4b02      	ldr	r3, [pc, #8]	; (3700 <dma_transfer_complete_n_cb+0x10>)
    36f6:	4798      	blx	r3
    36f8:	bd08      	pop	{r3, pc}
    36fa:	bf00      	nop
    36fc:	200012ac 	.word	0x200012ac
    3700:	00003691 	.word	0x00003691

00003704 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    3704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3708:	4b3e      	ldr	r3, [pc, #248]	; (3804 <grid_sys_uart_init+0x100>)
    370a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    370e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3712:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    3716:	f042 0204 	orr.w	r2, r2, #4
    371a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    371e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3726:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    372a:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    372e:	f042 0204 	orr.w	r2, r2, #4
    3732:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3736:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    373a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    373e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3742:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    3746:	f042 0204 	orr.w	r2, r2, #4
    374a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    374e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3752:	f44f 7100 	mov.w	r1, #512	; 0x200
    3756:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    375a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    375e:	f042 0204 	orr.w	r2, r2, #4
    3762:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3766:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    376a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3850 <grid_sys_uart_init+0x14c>
    376e:	4a26      	ldr	r2, [pc, #152]	; (3808 <grid_sys_uart_init+0x104>)
    3770:	2101      	movs	r1, #1
    3772:	4640      	mov	r0, r8
    3774:	4c25      	ldr	r4, [pc, #148]	; (380c <grid_sys_uart_init+0x108>)
    3776:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3778:	4f25      	ldr	r7, [pc, #148]	; (3810 <grid_sys_uart_init+0x10c>)
    377a:	4a26      	ldr	r2, [pc, #152]	; (3814 <grid_sys_uart_init+0x110>)
    377c:	2101      	movs	r1, #1
    377e:	4638      	mov	r0, r7
    3780:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    3782:	4e25      	ldr	r6, [pc, #148]	; (3818 <grid_sys_uart_init+0x114>)
    3784:	4a25      	ldr	r2, [pc, #148]	; (381c <grid_sys_uart_init+0x118>)
    3786:	2101      	movs	r1, #1
    3788:	4630      	mov	r0, r6
    378a:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    378c:	4d24      	ldr	r5, [pc, #144]	; (3820 <grid_sys_uart_init+0x11c>)
    378e:	4a25      	ldr	r2, [pc, #148]	; (3824 <grid_sys_uart_init+0x120>)
    3790:	2101      	movs	r1, #1
    3792:	4628      	mov	r0, r5
    3794:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    3796:	2101      	movs	r1, #1
    3798:	4640      	mov	r0, r8
    379a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3854 <grid_sys_uart_init+0x150>
    379e:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    37a0:	2101      	movs	r1, #1
    37a2:	4638      	mov	r0, r7
    37a4:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    37a6:	2101      	movs	r1, #1
    37a8:	4630      	mov	r0, r6
    37aa:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    37ac:	2101      	movs	r1, #1
    37ae:	4628      	mov	r0, r5
    37b0:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    37b2:	4a1d      	ldr	r2, [pc, #116]	; (3828 <grid_sys_uart_init+0x124>)
    37b4:	2102      	movs	r1, #2
    37b6:	4640      	mov	r0, r8
    37b8:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    37ba:	4a1c      	ldr	r2, [pc, #112]	; (382c <grid_sys_uart_init+0x128>)
    37bc:	2102      	movs	r1, #2
    37be:	4638      	mov	r0, r7
    37c0:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    37c2:	4a1b      	ldr	r2, [pc, #108]	; (3830 <grid_sys_uart_init+0x12c>)
    37c4:	2102      	movs	r1, #2
    37c6:	4630      	mov	r0, r6
    37c8:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    37ca:	4a1a      	ldr	r2, [pc, #104]	; (3834 <grid_sys_uart_init+0x130>)
    37cc:	2102      	movs	r1, #2
    37ce:	4628      	mov	r0, r5
    37d0:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    37d2:	4919      	ldr	r1, [pc, #100]	; (3838 <grid_sys_uart_init+0x134>)
    37d4:	4640      	mov	r0, r8
    37d6:	4c19      	ldr	r4, [pc, #100]	; (383c <grid_sys_uart_init+0x138>)
    37d8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    37da:	4919      	ldr	r1, [pc, #100]	; (3840 <grid_sys_uart_init+0x13c>)
    37dc:	4638      	mov	r0, r7
    37de:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    37e0:	4918      	ldr	r1, [pc, #96]	; (3844 <grid_sys_uart_init+0x140>)
    37e2:	4630      	mov	r0, r6
    37e4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    37e6:	4918      	ldr	r1, [pc, #96]	; (3848 <grid_sys_uart_init+0x144>)
    37e8:	4628      	mov	r0, r5
    37ea:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    37ec:	4640      	mov	r0, r8
    37ee:	4c17      	ldr	r4, [pc, #92]	; (384c <grid_sys_uart_init+0x148>)
    37f0:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    37f2:	4638      	mov	r0, r7
    37f4:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    37f6:	4630      	mov	r0, r6
    37f8:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    37fa:	4628      	mov	r0, r5
    37fc:	47a0      	blx	r4
    37fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3802:	bf00      	nop
    3804:	41008000 	.word	0x41008000
    3808:	00003619 	.word	0x00003619
    380c:	00005615 	.word	0x00005615
    3810:	20001084 	.word	0x20001084
    3814:	00003605 	.word	0x00003605
    3818:	200011dc 	.word	0x200011dc
    381c:	000035f1 	.word	0x000035f1
    3820:	2000118c 	.word	0x2000118c
    3824:	000035dd 	.word	0x000035dd
    3828:	0000367d 	.word	0x0000367d
    382c:	00003669 	.word	0x00003669
    3830:	00003655 	.word	0x00003655
    3834:	00003641 	.word	0x00003641
    3838:	20001d2c 	.word	0x20001d2c
    383c:	000055ed 	.word	0x000055ed
    3840:	200026f8 	.word	0x200026f8
    3844:	20002c24 	.word	0x20002c24
    3848:	200036ec 	.word	0x200036ec
    384c:	00005595 	.word	0x00005595
    3850:	200010d8 	.word	0x200010d8
    3854:	00005689 	.word	0x00005689

00003858 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3858:	b5f0      	push	{r4, r5, r6, r7, lr}
    385a:	b083      	sub	sp, #12
    385c:	4605      	mov	r5, r0
    385e:	460f      	mov	r7, r1
    3860:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3862:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3864:	6883      	ldr	r3, [r0, #8]
    3866:	6a19      	ldr	r1, [r3, #32]
    3868:	3128      	adds	r1, #40	; 0x28
    386a:	4620      	mov	r0, r4
    386c:	4b0d      	ldr	r3, [pc, #52]	; (38a4 <grid_sys_dma_rx_init_one+0x4c>)
    386e:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3870:	f505 7122 	add.w	r1, r5, #648	; 0x288
    3874:	4620      	mov	r0, r4
    3876:	4b0c      	ldr	r3, [pc, #48]	; (38a8 <grid_sys_dma_rx_init_one+0x50>)
    3878:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    387a:	4639      	mov	r1, r7
    387c:	4620      	mov	r0, r4
    387e:	4b0b      	ldr	r3, [pc, #44]	; (38ac <grid_sys_dma_rx_init_one+0x54>)
    3880:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3882:	4621      	mov	r1, r4
    3884:	a801      	add	r0, sp, #4
    3886:	4b0a      	ldr	r3, [pc, #40]	; (38b0 <grid_sys_dma_rx_init_one+0x58>)
    3888:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    388a:	9b01      	ldr	r3, [sp, #4]
    388c:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    388e:	2201      	movs	r2, #1
    3890:	2100      	movs	r1, #0
    3892:	4620      	mov	r0, r4
    3894:	4b07      	ldr	r3, [pc, #28]	; (38b4 <grid_sys_dma_rx_init_one+0x5c>)
    3896:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3898:	2100      	movs	r1, #0
    389a:	4620      	mov	r0, r4
    389c:	4b06      	ldr	r3, [pc, #24]	; (38b8 <grid_sys_dma_rx_init_one+0x60>)
    389e:	4798      	blx	r3
	

}
    38a0:	b003      	add	sp, #12
    38a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a4:	00006585 	.word	0x00006585
    38a8:	00006575 	.word	0x00006575
    38ac:	000065b1 	.word	0x000065b1
    38b0:	00006649 	.word	0x00006649
    38b4:	00006521 	.word	0x00006521
    38b8:	00006609 	.word	0x00006609

000038bc <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    38bc:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    38be:	4a10      	ldr	r2, [pc, #64]	; (3900 <grid_sys_dma_rx_init+0x44>)
    38c0:	f44f 7116 	mov.w	r1, #600	; 0x258
    38c4:	480f      	ldr	r0, [pc, #60]	; (3904 <grid_sys_dma_rx_init+0x48>)
    38c6:	4c10      	ldr	r4, [pc, #64]	; (3908 <grid_sys_dma_rx_init+0x4c>)
    38c8:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    38ca:	4a10      	ldr	r2, [pc, #64]	; (390c <grid_sys_dma_rx_init+0x50>)
    38cc:	f44f 7116 	mov.w	r1, #600	; 0x258
    38d0:	480f      	ldr	r0, [pc, #60]	; (3910 <grid_sys_dma_rx_init+0x54>)
    38d2:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    38d4:	4a0f      	ldr	r2, [pc, #60]	; (3914 <grid_sys_dma_rx_init+0x58>)
    38d6:	f44f 7116 	mov.w	r1, #600	; 0x258
    38da:	480f      	ldr	r0, [pc, #60]	; (3918 <grid_sys_dma_rx_init+0x5c>)
    38dc:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    38de:	4a0f      	ldr	r2, [pc, #60]	; (391c <grid_sys_dma_rx_init+0x60>)
    38e0:	f44f 7116 	mov.w	r1, #600	; 0x258
    38e4:	480e      	ldr	r0, [pc, #56]	; (3920 <grid_sys_dma_rx_init+0x64>)
    38e6:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38e8:	4b0e      	ldr	r3, [pc, #56]	; (3924 <grid_sys_dma_rx_init+0x68>)
    38ea:	2200      	movs	r2, #0
    38ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    38f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    38f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    38f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    38fc:	bd10      	pop	{r4, pc}
    38fe:	bf00      	nop
    3900:	000036f1 	.word	0x000036f1
    3904:	200012ac 	.word	0x200012ac
    3908:	00003859 	.word	0x00003859
    390c:	000036dd 	.word	0x000036dd
    3910:	20003140 	.word	0x20003140
    3914:	000036c9 	.word	0x000036c9
    3918:	2000270c 	.word	0x2000270c
    391c:	000036b5 	.word	0x000036b5
    3920:	200021e0 	.word	0x200021e0
    3924:	e000e100 	.word	0xe000e100

00003928 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    3928:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    392a:	2200      	movs	r2, #0
    392c:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    392e:	23c8      	movs	r3, #200	; 0xc8
    3930:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    3932:	2164      	movs	r1, #100	; 0x64
    3934:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    3936:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    3938:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    393a:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    393c:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    393e:	2432      	movs	r4, #50	; 0x32
    3940:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    3942:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    3944:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    3946:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    3948:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    394a:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    394c:	4b03      	ldr	r3, [pc, #12]	; (395c <grid_sys_init+0x34>)
    394e:	4798      	blx	r3
	
	grid_sys_uart_init();
    3950:	4b03      	ldr	r3, [pc, #12]	; (3960 <grid_sys_init+0x38>)
    3952:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3954:	4b03      	ldr	r3, [pc, #12]	; (3964 <grid_sys_init+0x3c>)
    3956:	4798      	blx	r3
    3958:	bd10      	pop	{r4, pc}
    395a:	bf00      	nop
    395c:	000015ed 	.word	0x000015ed
    3960:	00003705 	.word	0x00003705
    3964:	000038bd 	.word	0x000038bd

00003968 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3968:	6980      	ldr	r0, [r0, #24]
    396a:	4770      	bx	lr

0000396c <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    396c:	6980      	ldr	r0, [r0, #24]
	
	

}
    396e:	1a40      	subs	r0, r0, r1
    3970:	4770      	bx	lr

00003972 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3972:	6983      	ldr	r3, [r0, #24]
    3974:	3301      	adds	r3, #1
    3976:	6183      	str	r3, [r0, #24]
    3978:	4770      	bx	lr

0000397a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    397a:	7a00      	ldrb	r0, [r0, #8]
    397c:	4770      	bx	lr

0000397e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    397e:	2300      	movs	r3, #0
    3980:	7203      	strb	r3, [r0, #8]
    3982:	4770      	bx	lr

00003984 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3984:	7983      	ldrb	r3, [r0, #6]
    3986:	b123      	cbz	r3, 3992 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3988:	2b01      	cmp	r3, #1
    398a:	d00f      	beq.n	39ac <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    398c:	2b02      	cmp	r3, #2
    398e:	d015      	beq.n	39bc <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3990:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3992:	8880      	ldrh	r0, [r0, #4]
    3994:	0840      	lsrs	r0, r0, #1
    3996:	387d      	subs	r0, #125	; 0x7d
    3998:	2800      	cmp	r0, #0
    399a:	bfb8      	it	lt
    399c:	4240      	neglt	r0, r0
    399e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    39a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    39a6:	f3c0 0047 	ubfx	r0, r0, #1, #8
    39aa:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    39ac:	8880      	ldrh	r0, [r0, #4]
    39ae:	4b06      	ldr	r3, [pc, #24]	; (39c8 <grid_sys_alert_get_color_intensity+0x44>)
    39b0:	fba3 3000 	umull	r3, r0, r3, r0
    39b4:	f340 1000 	sbfx	r0, r0, #4, #1
    39b8:	b2c0      	uxtb	r0, r0
    39ba:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    39bc:	8880      	ldrh	r0, [r0, #4]
    39be:	2864      	cmp	r0, #100	; 0x64
    39c0:	bf8c      	ite	hi
    39c2:	20ff      	movhi	r0, #255	; 0xff
    39c4:	2000      	movls	r0, #0
    39c6:	4770      	bx	lr
    39c8:	10624dd3 	.word	0x10624dd3

000039cc <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    39cc:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    39ce:	2401      	movs	r4, #1
    39d0:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    39d2:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    39d4:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    39d6:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    39d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    39dc:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    39de:	f89d 3004 	ldrb.w	r3, [sp, #4]
    39e2:	7183      	strb	r3, [r0, #6]
	
}
    39e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    39e8:	4770      	bx	lr

000039ea <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    39ea:	7840      	ldrb	r0, [r0, #1]
    39ec:	4770      	bx	lr

000039ee <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    39ee:	7880      	ldrb	r0, [r0, #2]
    39f0:	4770      	bx	lr

000039f2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    39f2:	78c0      	ldrb	r0, [r0, #3]
    39f4:	4770      	bx	lr

000039f6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    39f6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    39f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    39fc:	b2d8      	uxtb	r0, r3
    39fe:	2809      	cmp	r0, #9
    3a00:	d90d      	bls.n	3a1e <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3a02:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    3a06:	b2db      	uxtb	r3, r3
    3a08:	2b05      	cmp	r3, #5
    3a0a:	d903      	bls.n	3a14 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3a0c:	b131      	cbz	r1, 3a1c <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3a0e:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3a10:	2000      	movs	r0, #0
    3a12:	4770      	bx	lr
		result = ascii - 97 + 10;
    3a14:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    3a18:	b2c0      	uxtb	r0, r0
    3a1a:	4770      	bx	lr
	uint8_t result = 0;
    3a1c:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3a1e:	4770      	bx	lr

00003a20 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3a24:	b1c1      	cbz	r1, 3a58 <grid_sys_read_hex_string_value+0x38>
    3a26:	4690      	mov	r8, r2
    3a28:	1e45      	subs	r5, r0, #1
    3a2a:	1e4b      	subs	r3, r1, #1
    3a2c:	009c      	lsls	r4, r3, #2
    3a2e:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3a32:	3f02      	subs	r7, #2
    3a34:	b2db      	uxtb	r3, r3
    3a36:	1aff      	subs	r7, r7, r3
    3a38:	00bf      	lsls	r7, r7, #2
    3a3a:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3a3c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3a5c <grid_sys_read_hex_string_value+0x3c>
    3a40:	4641      	mov	r1, r8
    3a42:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3a46:	47c8      	blx	r9
    3a48:	40a0      	lsls	r0, r4
    3a4a:	4406      	add	r6, r0
    3a4c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3a4e:	42bc      	cmp	r4, r7
    3a50:	d1f6      	bne.n	3a40 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3a52:	4630      	mov	r0, r6
    3a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3a58:	2600      	movs	r6, #0
	return result;
    3a5a:	e7fa      	b.n	3a52 <grid_sys_read_hex_string_value+0x32>
    3a5c:	000039f7 	.word	0x000039f7

00003a60 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3a60:	b530      	push	{r4, r5, lr}
    3a62:	b085      	sub	sp, #20
    3a64:	4605      	mov	r5, r0
    3a66:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3a68:	4909      	ldr	r1, [pc, #36]	; (3a90 <grid_sys_write_hex_string_value+0x30>)
    3a6a:	a801      	add	r0, sp, #4
    3a6c:	4b09      	ldr	r3, [pc, #36]	; (3a94 <grid_sys_write_hex_string_value+0x34>)
    3a6e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3a70:	b164      	cbz	r4, 3a8c <grid_sys_write_hex_string_value+0x2c>
    3a72:	ab04      	add	r3, sp, #16
    3a74:	1b1a      	subs	r2, r3, r4
    3a76:	3a05      	subs	r2, #5
    3a78:	1e6b      	subs	r3, r5, #1
    3a7a:	1e60      	subs	r0, r4, #1
    3a7c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3a80:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3a84:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3a88:	4283      	cmp	r3, r0
    3a8a:	d1f9      	bne.n	3a80 <grid_sys_write_hex_string_value+0x20>
	}

}
    3a8c:	b005      	add	sp, #20
    3a8e:	bd30      	pop	{r4, r5, pc}
    3a90:	0000d904 	.word	0x0000d904
    3a94:	0000c6e1 	.word	0x0000c6e1

00003a98 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3a98:	4b34      	ldr	r3, [pc, #208]	; (3b6c <grid_sys_get_hwcfg+0xd4>)
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3aa0:	d002      	beq.n	3aa8 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3aa2:	4b32      	ldr	r3, [pc, #200]	; (3b6c <grid_sys_get_hwcfg+0xd4>)
    3aa4:	6818      	ldr	r0, [r3, #0]
    3aa6:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3aac:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3aae:	4b30      	ldr	r3, [pc, #192]	; (3b70 <grid_sys_get_hwcfg+0xd8>)
    3ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3ab8:	492e      	ldr	r1, [pc, #184]	; (3b74 <grid_sys_get_hwcfg+0xdc>)
    3aba:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3abe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3ac2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3ac6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3aca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3ace:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3ad2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3ad6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3ade:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3ae2:	4925      	ldr	r1, [pc, #148]	; (3b78 <grid_sys_get_hwcfg+0xe0>)
    3ae4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3ae8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3aec:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3af4:	2001      	movs	r0, #1
    3af6:	4b21      	ldr	r3, [pc, #132]	; (3b7c <grid_sys_get_hwcfg+0xe4>)
    3af8:	4798      	blx	r3
    3afa:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3afc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3afe:	4d1c      	ldr	r5, [pc, #112]	; (3b70 <grid_sys_get_hwcfg+0xd8>)
    3b00:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3b04:	4f1d      	ldr	r7, [pc, #116]	; (3b7c <grid_sys_get_hwcfg+0xe4>)
    3b06:	e00c      	b.n	3b22 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3b08:	2e07      	cmp	r6, #7
    3b0a:	d027      	beq.n	3b5c <grid_sys_get_hwcfg+0xc4>
    3b0c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3b10:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3b14:	2001      	movs	r0, #1
    3b16:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b18:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3b1c:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3b1e:	2e08      	cmp	r6, #8
    3b20:	d01c      	beq.n	3b5c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b22:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3b26:	2001      	movs	r0, #1
    3b28:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3b2a:	a801      	add	r0, sp, #4
    3b2c:	4b14      	ldr	r3, [pc, #80]	; (3b80 <grid_sys_get_hwcfg+0xe8>)
    3b2e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3b30:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b34:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3b38:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3b3c:	405c      	eors	r4, r3
    3b3e:	4014      	ands	r4, r2
    3b40:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3b42:	a801      	add	r0, sp, #4
    3b44:	4b0f      	ldr	r3, [pc, #60]	; (3b84 <grid_sys_get_hwcfg+0xec>)
    3b46:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3b48:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3b4c:	d0dc      	beq.n	3b08 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3b4e:	2301      	movs	r3, #1
    3b50:	40b3      	lsls	r3, r6
    3b52:	ea43 0808 	orr.w	r8, r3, r8
    3b56:	fa5f f888 	uxtb.w	r8, r8
    3b5a:	e7d5      	b.n	3b08 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3b5c:	4b03      	ldr	r3, [pc, #12]	; (3b6c <grid_sys_get_hwcfg+0xd4>)
    3b5e:	f8c3 8000 	str.w	r8, [r3]
}
    3b62:	4b02      	ldr	r3, [pc, #8]	; (3b6c <grid_sys_get_hwcfg+0xd4>)
    3b64:	6818      	ldr	r0, [r3, #0]
    3b66:	b003      	add	sp, #12
    3b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b6c:	20000354 	.word	0x20000354
    3b70:	41008000 	.word	0x41008000
    3b74:	40002000 	.word	0x40002000
    3b78:	40028000 	.word	0x40028000
    3b7c:	00004a39 	.word	0x00004a39
    3b80:	000049b9 	.word	0x000049b9
    3b84:	000049c7 	.word	0x000049c7

00003b88 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b8c:	b085      	sub	sp, #20
    3b8e:	4681      	mov	r9, r0
    3b90:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3b92:	4b4d      	ldr	r3, [pc, #308]	; (3cc8 <grid_sys_bank_select+0x140>)
    3b94:	4798      	blx	r3
    3b96:	4682      	mov	sl, r0
	if (banknumber == 255){
    3b98:	2cff      	cmp	r4, #255	; 0xff
    3b9a:	d006      	beq.n	3baa <grid_sys_bank_select+0x22>
		mod->bank_select = banknumber%4;
    3b9c:	f004 0403 	and.w	r4, r4, #3
    3ba0:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3ba4:	2500      	movs	r5, #0
    3ba6:	9503      	str	r5, [sp, #12]
    3ba8:	e058      	b.n	3c5c <grid_sys_bank_select+0xd4>
		mod->bank_select = 255;
    3baa:	23ff      	movs	r3, #255	; 0xff
    3bac:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3bb0:	2500      	movs	r5, #0
    3bb2:	f8df b124 	ldr.w	fp, [pc, #292]	; 3cd8 <grid_sys_bank_select+0x150>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3bb6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3cdc <grid_sys_bank_select+0x154>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3bba:	e01b      	b.n	3bf4 <grid_sys_bank_select+0x6c>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3bbc:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3bc0:	f8cd 9004 	str.w	r9, [sp, #4]
    3bc4:	2600      	movs	r6, #0
    3bc6:	9600      	str	r6, [sp, #0]
    3bc8:	4633      	mov	r3, r6
    3bca:	4632      	mov	r2, r6
    3bcc:	4621      	mov	r1, r4
    3bce:	4658      	mov	r0, fp
    3bd0:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 5, 5, 5);
    3bd2:	2305      	movs	r3, #5
    3bd4:	9301      	str	r3, [sp, #4]
    3bd6:	9300      	str	r3, [sp, #0]
    3bd8:	4632      	mov	r2, r6
    3bda:	4621      	mov	r1, r4
    3bdc:	4658      	mov	r0, fp
    3bde:	4f3b      	ldr	r7, [pc, #236]	; (3ccc <grid_sys_bank_select+0x144>)
    3be0:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3be2:	9601      	str	r6, [sp, #4]
    3be4:	9600      	str	r6, [sp, #0]
    3be6:	464b      	mov	r3, r9
    3be8:	4632      	mov	r2, r6
    3bea:	4621      	mov	r1, r4
    3bec:	4658      	mov	r0, fp
    3bee:	4c38      	ldr	r4, [pc, #224]	; (3cd0 <grid_sys_bank_select+0x148>)
    3bf0:	47a0      	blx	r4
    3bf2:	3501      	adds	r5, #1
    3bf4:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3bf6:	4658      	mov	r0, fp
    3bf8:	4b36      	ldr	r3, [pc, #216]	; (3cd4 <grid_sys_bank_select+0x14c>)
    3bfa:	4798      	blx	r3
    3bfc:	42a0      	cmp	r0, r4
    3bfe:	d95f      	bls.n	3cc0 <grid_sys_bank_select+0x138>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3c00:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3c04:	d0da      	beq.n	3bbc <grid_sys_bank_select+0x34>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3c06:	2306      	movs	r3, #6
    3c08:	9301      	str	r3, [sp, #4]
    3c0a:	9300      	str	r3, [sp, #0]
    3c0c:	2200      	movs	r2, #0
    3c0e:	4621      	mov	r1, r4
    3c10:	4658      	mov	r0, fp
    3c12:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3c14:	233f      	movs	r3, #63	; 0x3f
    3c16:	9301      	str	r3, [sp, #4]
    3c18:	9300      	str	r3, [sp, #0]
    3c1a:	2200      	movs	r2, #0
    3c1c:	4621      	mov	r1, r4
    3c1e:	4658      	mov	r0, fp
    3c20:	4e2a      	ldr	r6, [pc, #168]	; (3ccc <grid_sys_bank_select+0x144>)
    3c22:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3c24:	237f      	movs	r3, #127	; 0x7f
    3c26:	9301      	str	r3, [sp, #4]
    3c28:	9300      	str	r3, [sp, #0]
    3c2a:	2200      	movs	r2, #0
    3c2c:	4621      	mov	r1, r4
    3c2e:	4658      	mov	r0, fp
    3c30:	4c27      	ldr	r4, [pc, #156]	; (3cd0 <grid_sys_bank_select+0x148>)
    3c32:	47a0      	blx	r4
    3c34:	e7dd      	b.n	3bf2 <grid_sys_bank_select+0x6a>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3c36:	f899 2009 	ldrb.w	r2, [r9, #9]
    3c3a:	444a      	add	r2, r9
				grid_led_set_mid(&grid_led_state, i, 0, r/32, g/32, b/32);
    3c3c:	7a93      	ldrb	r3, [r2, #10]
    3c3e:	7c91      	ldrb	r1, [r2, #18]
    3c40:	0949      	lsrs	r1, r1, #5
    3c42:	9101      	str	r1, [sp, #4]
    3c44:	7b92      	ldrb	r2, [r2, #14]
    3c46:	0952      	lsrs	r2, r2, #5
    3c48:	9200      	str	r2, [sp, #0]
    3c4a:	095b      	lsrs	r3, r3, #5
    3c4c:	2200      	movs	r2, #0
    3c4e:	4621      	mov	r1, r4
    3c50:	4821      	ldr	r0, [pc, #132]	; (3cd8 <grid_sys_bank_select+0x150>)
    3c52:	4c1e      	ldr	r4, [pc, #120]	; (3ccc <grid_sys_bank_select+0x144>)
    3c54:	47a0      	blx	r4
    3c56:	9b03      	ldr	r3, [sp, #12]
    3c58:	3301      	adds	r3, #1
    3c5a:	9303      	str	r3, [sp, #12]
    3c5c:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c60:	481d      	ldr	r0, [pc, #116]	; (3cd8 <grid_sys_bank_select+0x150>)
    3c62:	4b1c      	ldr	r3, [pc, #112]	; (3cd4 <grid_sys_bank_select+0x14c>)
    3c64:	4798      	blx	r3
    3c66:	4284      	cmp	r4, r0
    3c68:	d22a      	bcs.n	3cc0 <grid_sys_bank_select+0x138>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3c6a:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3c6e:	d0e2      	beq.n	3c36 <grid_sys_bank_select+0xae>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3c70:	f899 3009 	ldrb.w	r3, [r9, #9]
    3c74:	444b      	add	r3, r9
    3c76:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3c78:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3c7a:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3c7e:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3c82:	9301      	str	r3, [sp, #4]
    3c84:	097b      	lsrs	r3, r7, #5
    3c86:	9300      	str	r3, [sp, #0]
    3c88:	0973      	lsrs	r3, r6, #5
    3c8a:	2200      	movs	r2, #0
    3c8c:	4621      	mov	r1, r4
    3c8e:	4812      	ldr	r0, [pc, #72]	; (3cd8 <grid_sys_bank_select+0x150>)
    3c90:	4d12      	ldr	r5, [pc, #72]	; (3cdc <grid_sys_bank_select+0x154>)
    3c92:	47a8      	blx	r5
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3c94:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3c98:	9301      	str	r3, [sp, #4]
    3c9a:	087b      	lsrs	r3, r7, #1
    3c9c:	9300      	str	r3, [sp, #0]
    3c9e:	0873      	lsrs	r3, r6, #1
    3ca0:	2200      	movs	r2, #0
    3ca2:	4621      	mov	r1, r4
    3ca4:	480c      	ldr	r0, [pc, #48]	; (3cd8 <grid_sys_bank_select+0x150>)
    3ca6:	f8df b024 	ldr.w	fp, [pc, #36]	; 3ccc <grid_sys_bank_select+0x144>
    3caa:	47d8      	blx	fp
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3cac:	f8cd 8004 	str.w	r8, [sp, #4]
    3cb0:	9700      	str	r7, [sp, #0]
    3cb2:	4633      	mov	r3, r6
    3cb4:	2200      	movs	r2, #0
    3cb6:	4621      	mov	r1, r4
    3cb8:	4807      	ldr	r0, [pc, #28]	; (3cd8 <grid_sys_bank_select+0x150>)
    3cba:	4c05      	ldr	r4, [pc, #20]	; (3cd0 <grid_sys_bank_select+0x148>)
    3cbc:	47a0      	blx	r4
    3cbe:	e7ca      	b.n	3c56 <grid_sys_bank_select+0xce>
}
    3cc0:	b005      	add	sp, #20
    3cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cc6:	bf00      	nop
    3cc8:	00003a99 	.word	0x00003a99
    3ccc:	00002025 	.word	0x00002025
    3cd0:	0000206f 	.word	0x0000206f
    3cd4:	00001f95 	.word	0x00001f95
    3cd8:	200036c4 	.word	0x200036c4
    3cdc:	00001fdd 	.word	0x00001fdd

00003ce0 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3ce0:	2903      	cmp	r1, #3
    3ce2:	d009      	beq.n	3cf8 <grid_msg_checksum_calculate+0x18>
    3ce4:	1e43      	subs	r3, r0, #1
    3ce6:	3904      	subs	r1, #4
    3ce8:	4401      	add	r1, r0
    3cea:	2000      	movs	r0, #0
		checksum ^= str[i];
    3cec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3cf0:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3cf2:	428b      	cmp	r3, r1
    3cf4:	d1fa      	bne.n	3cec <grid_msg_checksum_calculate+0xc>
    3cf6:	4770      	bx	lr
	uint8_t checksum = 0;
    3cf8:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3cfa:	4770      	bx	lr

00003cfc <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    3cfc:	b500      	push	{lr}
    3cfe:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    3d00:	1ecb      	subs	r3, r1, #3
    3d02:	f10d 0207 	add.w	r2, sp, #7
    3d06:	2102      	movs	r1, #2
    3d08:	4418      	add	r0, r3
    3d0a:	4b03      	ldr	r3, [pc, #12]	; (3d18 <grid_msg_checksum_read+0x1c>)
    3d0c:	4798      	blx	r3
}
    3d0e:	b2c0      	uxtb	r0, r0
    3d10:	b003      	add	sp, #12
    3d12:	f85d fb04 	ldr.w	pc, [sp], #4
    3d16:	bf00      	nop
    3d18:	00003a21 	.word	0x00003a21

00003d1c <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    3d1c:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3d1e:	1ecb      	subs	r3, r1, #3
    3d20:	2102      	movs	r1, #2
    3d22:	4418      	add	r0, r3
    3d24:	4b01      	ldr	r3, [pc, #4]	; (3d2c <grid_msg_checksum_write+0x10>)
    3d26:	4798      	blx	r3
    3d28:	bd08      	pop	{r3, pc}
    3d2a:	bf00      	nop
    3d2c:	00003a61 	.word	0x00003a61

00003d30 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3d30:	b500      	push	{lr}
    3d32:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3d34:	aa02      	add	r2, sp, #8
    3d36:	2300      	movs	r3, #0
    3d38:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3d3c:	2102      	movs	r1, #2
    3d3e:	3004      	adds	r0, #4
    3d40:	4b02      	ldr	r3, [pc, #8]	; (3d4c <grid_msg_get_id+0x1c>)
    3d42:	4798      	blx	r3
	
}
    3d44:	b2c0      	uxtb	r0, r0
    3d46:	b003      	add	sp, #12
    3d48:	f85d fb04 	ldr.w	pc, [sp], #4
    3d4c:	00003a21 	.word	0x00003a21

00003d50 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3d50:	b500      	push	{lr}
    3d52:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3d54:	aa02      	add	r2, sp, #8
    3d56:	2300      	movs	r3, #0
    3d58:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3d5c:	2102      	movs	r1, #2
    3d5e:	3006      	adds	r0, #6
    3d60:	4b02      	ldr	r3, [pc, #8]	; (3d6c <grid_msg_get_dx+0x1c>)
    3d62:	4798      	blx	r3
	
}
    3d64:	b2c0      	uxtb	r0, r0
    3d66:	b003      	add	sp, #12
    3d68:	f85d fb04 	ldr.w	pc, [sp], #4
    3d6c:	00003a21 	.word	0x00003a21

00003d70 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3d70:	b500      	push	{lr}
    3d72:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3d74:	aa02      	add	r2, sp, #8
    3d76:	2300      	movs	r3, #0
    3d78:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3d7c:	2102      	movs	r1, #2
    3d7e:	3008      	adds	r0, #8
    3d80:	4b02      	ldr	r3, [pc, #8]	; (3d8c <grid_msg_get_dy+0x1c>)
    3d82:	4798      	blx	r3

}
    3d84:	b2c0      	uxtb	r0, r0
    3d86:	b003      	add	sp, #12
    3d88:	f85d fb04 	ldr.w	pc, [sp], #4
    3d8c:	00003a21 	.word	0x00003a21

00003d90 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3d90:	b500      	push	{lr}
    3d92:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3d94:	aa02      	add	r2, sp, #8
    3d96:	2300      	movs	r3, #0
    3d98:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3d9c:	2102      	movs	r1, #2
    3d9e:	300a      	adds	r0, #10
    3da0:	4b02      	ldr	r3, [pc, #8]	; (3dac <grid_msg_get_age+0x1c>)
    3da2:	4798      	blx	r3
	
}
    3da4:	b2c0      	uxtb	r0, r0
    3da6:	b003      	add	sp, #12
    3da8:	f85d fb04 	ldr.w	pc, [sp], #4
    3dac:	00003a21 	.word	0x00003a21

00003db0 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3db0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3db2:	460a      	mov	r2, r1
    3db4:	2102      	movs	r1, #2
    3db6:	3004      	adds	r0, #4
    3db8:	4b01      	ldr	r3, [pc, #4]	; (3dc0 <grid_msg_set_id+0x10>)
    3dba:	4798      	blx	r3
    3dbc:	bd08      	pop	{r3, pc}
    3dbe:	bf00      	nop
    3dc0:	00003a61 	.word	0x00003a61

00003dc4 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3dc4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3dc6:	460a      	mov	r2, r1
    3dc8:	2102      	movs	r1, #2
    3dca:	3006      	adds	r0, #6
    3dcc:	4b01      	ldr	r3, [pc, #4]	; (3dd4 <grid_msg_set_dx+0x10>)
    3dce:	4798      	blx	r3
    3dd0:	bd08      	pop	{r3, pc}
    3dd2:	bf00      	nop
    3dd4:	00003a61 	.word	0x00003a61

00003dd8 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3dd8:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3dda:	460a      	mov	r2, r1
    3ddc:	2102      	movs	r1, #2
    3dde:	3008      	adds	r0, #8
    3de0:	4b01      	ldr	r3, [pc, #4]	; (3de8 <grid_msg_set_dy+0x10>)
    3de2:	4798      	blx	r3
    3de4:	bd08      	pop	{r3, pc}
    3de6:	bf00      	nop
    3de8:	00003a61 	.word	0x00003a61

00003dec <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3dec:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3dee:	460a      	mov	r2, r1
    3df0:	2102      	movs	r1, #2
    3df2:	300a      	adds	r0, #10
    3df4:	4b01      	ldr	r3, [pc, #4]	; (3dfc <grid_msg_set_age+0x10>)
    3df6:	4798      	blx	r3
    3df8:	bd08      	pop	{r3, pc}
    3dfa:	bf00      	nop
    3dfc:	00003a61 	.word	0x00003a61

00003e00 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3e00:	69c3      	ldr	r3, [r0, #28]
    3e02:	4299      	cmp	r1, r3
    3e04:	d00d      	beq.n	3e22 <grid_msg_find_recent+0x22>
    3e06:	2301      	movs	r3, #1
    3e08:	f003 021f 	and.w	r2, r3, #31
    3e0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3e10:	69d2      	ldr	r2, [r2, #28]
    3e12:	428a      	cmp	r2, r1
    3e14:	d007      	beq.n	3e26 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3e16:	3301      	adds	r3, #1
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	2b20      	cmp	r3, #32
    3e1c:	d1f4      	bne.n	3e08 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3e1e:	2000      	movs	r0, #0
    3e20:	4770      	bx	lr
			return 1;
    3e22:	2001      	movs	r0, #1
    3e24:	4770      	bx	lr
    3e26:	2001      	movs	r0, #1
}
    3e28:	4770      	bx	lr

00003e2a <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3e2a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3e2e:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3e30:	f003 031f 	and.w	r3, r3, #31
    3e34:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3e38:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3e3c:	61c1      	str	r1, [r0, #28]
    3e3e:	4770      	bx	lr

00003e40 <grid_ui_model_init>:
	
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3e40:	b510      	push	{r4, lr}
    3e42:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    3e44:	2307      	movs	r3, #7
    3e46:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3e48:	4419      	add	r1, r3
    3e4a:	b2c8      	uxtb	r0, r1
    3e4c:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3e4e:	0100      	lsls	r0, r0, #4
    3e50:	4b02      	ldr	r3, [pc, #8]	; (3e5c <grid_ui_model_init+0x1c>)
    3e52:	4798      	blx	r3
    3e54:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3e56:	3070      	adds	r0, #112	; 0x70
    3e58:	60a0      	str	r0, [r4, #8]
		
}
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	0000c2cd 	.word	0x0000c2cd

00003e60 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e64:	4605      	mov	r5, r0
    3e66:	4698      	mov	r8, r3
    3e68:	9808      	ldr	r0, [sp, #32]
    3e6a:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3e6c:	010c      	lsls	r4, r1, #4
    3e6e:	686b      	ldr	r3, [r5, #4]
    3e70:	2100      	movs	r1, #0
    3e72:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    3e74:	686b      	ldr	r3, [r5, #4]
    3e76:	4423      	add	r3, r4
    3e78:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    3e7a:	686b      	ldr	r3, [r5, #4]
    3e7c:	4423      	add	r3, r4
    3e7e:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    3e80:	686b      	ldr	r3, [r5, #4]
    3e82:	4423      	add	r3, r4
    3e84:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    3e88:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3e8a:	686b      	ldr	r3, [r5, #4]
    3e8c:	eb03 0904 	add.w	r9, r3, r4
    3e90:	4f1b      	ldr	r7, [pc, #108]	; (3f00 <grid_report_init+0xa0>)
    3e92:	47b8      	blx	r7
    3e94:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3e98:	686b      	ldr	r3, [r5, #4]
    3e9a:	eb03 0904 	add.w	r9, r3, r4
    3e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3ea0:	47b8      	blx	r7
    3ea2:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3ea6:	686a      	ldr	r2, [r5, #4]
    3ea8:	4422      	add	r2, r4
    3eaa:	6853      	ldr	r3, [r2, #4]
    3eac:	b30b      	cbz	r3, 3ef2 <grid_report_init+0x92>
    3eae:	68d3      	ldr	r3, [r2, #12]
    3eb0:	b313      	cbz	r3, 3ef8 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3eb2:	7893      	ldrb	r3, [r2, #2]
    3eb4:	b15b      	cbz	r3, 3ece <grid_report_init+0x6e>
    3eb6:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3eb8:	f818 1003 	ldrb.w	r1, [r8, r3]
    3ebc:	6852      	ldr	r2, [r2, #4]
    3ebe:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3ec0:	3301      	adds	r3, #1
    3ec2:	b2db      	uxtb	r3, r3
    3ec4:	686a      	ldr	r2, [r5, #4]
    3ec6:	4422      	add	r2, r4
    3ec8:	7891      	ldrb	r1, [r2, #2]
    3eca:	4299      	cmp	r1, r3
    3ecc:	d8f4      	bhi.n	3eb8 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3ece:	686a      	ldr	r2, [r5, #4]
    3ed0:	4422      	add	r2, r4
    3ed2:	7a10      	ldrb	r0, [r2, #8]
    3ed4:	b188      	cbz	r0, 3efa <grid_report_init+0x9a>
    3ed6:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3ed8:	5cf1      	ldrb	r1, [r6, r3]
    3eda:	68d2      	ldr	r2, [r2, #12]
    3edc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3ede:	3301      	adds	r3, #1
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	686a      	ldr	r2, [r5, #4]
    3ee4:	4422      	add	r2, r4
    3ee6:	7a11      	ldrb	r1, [r2, #8]
    3ee8:	4299      	cmp	r1, r3
    3eea:	d8f5      	bhi.n	3ed8 <grid_report_init+0x78>
	}
	
	return 0;
    3eec:	2000      	movs	r0, #0
    3eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3ef2:	20ff      	movs	r0, #255	; 0xff
    3ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ef8:	20ff      	movs	r0, #255	; 0xff
	
}
    3efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3efe:	bf00      	nop
    3f00:	0000c2cd 	.word	0x0000c2cd

00003f04 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3f04:	b510      	push	{r4, lr}
    3f06:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    3f08:	7844      	ldrb	r4, [r0, #1]
    3f0a:	4421      	add	r1, r4
    3f0c:	9c08      	ldr	r4, [sp, #32]
    3f0e:	9402      	str	r4, [sp, #8]
    3f10:	9c07      	ldr	r4, [sp, #28]
    3f12:	9401      	str	r4, [sp, #4]
    3f14:	9c06      	ldr	r4, [sp, #24]
    3f16:	9400      	str	r4, [sp, #0]
    3f18:	b2c9      	uxtb	r1, r1
    3f1a:	4c02      	ldr	r4, [pc, #8]	; (3f24 <grid_report_ui_init+0x20>)
    3f1c:	47a0      	blx	r4
}
    3f1e:	b004      	add	sp, #16
    3f20:	bd10      	pop	{r4, pc}
    3f22:	bf00      	nop
    3f24:	00003e61 	.word	0x00003e61

00003f28 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    3f28:	7843      	ldrb	r3, [r0, #1]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	f000 80e9 	beq.w	4102 <grid_report_sys_init+0x1da>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f34:	b091      	sub	sp, #68	; 0x44
    3f36:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3f38:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    3f3a:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    3f3c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 4128 <grid_report_sys_init+0x200>
    3f40:	e047      	b.n	3fd2 <grid_report_sys_init+0xaa>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    3f42:	2303      	movs	r3, #3
    3f44:	9303      	str	r3, [sp, #12]
    3f46:	9502      	str	r5, [sp, #8]
    3f48:	2365      	movs	r3, #101	; 0x65
    3f4a:	9301      	str	r3, [sp, #4]
    3f4c:	2364      	movs	r3, #100	; 0x64
    3f4e:	9300      	str	r3, [sp, #0]
    3f50:	2304      	movs	r3, #4
    3f52:	2202      	movs	r2, #2
    3f54:	496b      	ldr	r1, [pc, #428]	; (4104 <grid_report_sys_init+0x1dc>)
    3f56:	a808      	add	r0, sp, #32
    3f58:	4e6b      	ldr	r6, [pc, #428]	; (4108 <grid_report_sys_init+0x1e0>)
    3f5a:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3f5c:	2602      	movs	r6, #2
    3f5e:	e01d      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_CFG, GRID_MSG_COMMAND_SYS_CFG_REQUEST, GRID_MSG_END_OF_TEXT);
    3f60:	2603      	movs	r6, #3
    3f62:	9602      	str	r6, [sp, #8]
    3f64:	2369      	movs	r3, #105	; 0x69
    3f66:	9301      	str	r3, [sp, #4]
    3f68:	2368      	movs	r3, #104	; 0x68
    3f6a:	9300      	str	r3, [sp, #0]
    3f6c:	2304      	movs	r3, #4
    3f6e:	2202      	movs	r2, #2
    3f70:	4966      	ldr	r1, [pc, #408]	; (410c <grid_report_sys_init+0x1e4>)
    3f72:	a808      	add	r0, sp, #32
    3f74:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4108 <grid_report_sys_init+0x1e0>
    3f78:	47c8      	blx	r9
    3f7a:	e00f      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    3f7c:	4b64      	ldr	r3, [pc, #400]	; (4110 <grid_report_sys_init+0x1e8>)
    3f7e:	4798      	blx	r3
    3f80:	2303      	movs	r3, #3
    3f82:	9303      	str	r3, [sp, #12]
    3f84:	9002      	str	r0, [sp, #8]
    3f86:	2367      	movs	r3, #103	; 0x67
    3f88:	9301      	str	r3, [sp, #4]
    3f8a:	2366      	movs	r3, #102	; 0x66
    3f8c:	9300      	str	r3, [sp, #0]
    3f8e:	2304      	movs	r3, #4
    3f90:	2202      	movs	r2, #2
    3f92:	495c      	ldr	r1, [pc, #368]	; (4104 <grid_report_sys_init+0x1dc>)
    3f94:	a808      	add	r0, sp, #32
    3f96:	4e5c      	ldr	r6, [pc, #368]	; (4108 <grid_report_sys_init+0x1e0>)
    3f98:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3f9a:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    3f9c:	a808      	add	r0, sp, #32
    3f9e:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3fa0:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    3fa4:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3fa8:	2302      	movs	r3, #2
    3faa:	9302      	str	r3, [sp, #8]
    3fac:	ab07      	add	r3, sp, #28
    3fae:	9301      	str	r3, [sp, #4]
    3fb0:	b2c0      	uxtb	r0, r0
    3fb2:	9000      	str	r0, [sp, #0]
    3fb4:	ab08      	add	r3, sp, #32
    3fb6:	4632      	mov	r2, r6
    3fb8:	4621      	mov	r1, r4
    3fba:	4638      	mov	r0, r7
    3fbc:	4e55      	ldr	r6, [pc, #340]	; (4114 <grid_report_sys_init+0x1ec>)
    3fbe:	47b0      	blx	r6
		
		if (error != 0){
    3fc0:	2800      	cmp	r0, #0
    3fc2:	f040 809b 	bne.w	40fc <grid_report_sys_init+0x1d4>
	for(uint8_t i=0; i<mod->report_offset; i++){
    3fc6:	3401      	adds	r4, #1
    3fc8:	b2e4      	uxtb	r4, r4
    3fca:	787b      	ldrb	r3, [r7, #1]
    3fcc:	42a3      	cmp	r3, r4
    3fce:	f240 8095 	bls.w	40fc <grid_report_sys_init+0x1d4>
		uint8_t payload_template[30] = {0};
    3fd2:	221e      	movs	r2, #30
    3fd4:	4629      	mov	r1, r5
    3fd6:	a808      	add	r0, sp, #32
    3fd8:	4b4f      	ldr	r3, [pc, #316]	; (4118 <grid_report_sys_init+0x1f0>)
    3fda:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    3fdc:	2c05      	cmp	r4, #5
    3fde:	d0b0      	beq.n	3f42 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST
    3fe0:	2c06      	cmp	r4, #6
    3fe2:	d0bd      	beq.n	3f60 <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    3fe4:	2c00      	cmp	r4, #0
    3fe6:	d0c9      	beq.n	3f7c <grid_report_sys_init+0x54>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    3fe8:	2c01      	cmp	r4, #1
    3fea:	d007      	beq.n	3ffc <grid_report_sys_init+0xd4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    3fec:	2c02      	cmp	r4, #2
    3fee:	d025      	beq.n	403c <grid_report_sys_init+0x114>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    3ff0:	2c03      	cmp	r4, #3
    3ff2:	d043      	beq.n	407c <grid_report_sys_init+0x154>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    3ff4:	2c04      	cmp	r4, #4
    3ff6:	d061      	beq.n	40bc <grid_report_sys_init+0x194>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    3ff8:	462e      	mov	r6, r5
    3ffa:	e7cf      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    3ffc:	4b44      	ldr	r3, [pc, #272]	; (4110 <grid_report_sys_init+0x1e8>)
    3ffe:	4798      	blx	r3
    4000:	2604      	movs	r6, #4
    4002:	9605      	str	r6, [sp, #20]
    4004:	23ff      	movs	r3, #255	; 0xff
    4006:	9304      	str	r3, [sp, #16]
    4008:	9303      	str	r3, [sp, #12]
    400a:	9002      	str	r0, [sp, #8]
    400c:	2311      	movs	r3, #17
    400e:	9301      	str	r3, [sp, #4]
    4010:	2307      	movs	r3, #7
    4012:	9300      	str	r3, [sp, #0]
    4014:	230e      	movs	r3, #14
    4016:	2201      	movs	r2, #1
    4018:	4940      	ldr	r1, [pc, #256]	; (411c <grid_report_sys_init+0x1f4>)
    401a:	a808      	add	r0, sp, #32
    401c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4108 <grid_report_sys_init+0x1e0>
    4020:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4022:	a808      	add	r0, sp, #32
    4024:	47c0      	blx	r8
    4026:	4681      	mov	r9, r0
    4028:	4601      	mov	r1, r0
    402a:	a808      	add	r0, sp, #32
    402c:	4b3c      	ldr	r3, [pc, #240]	; (4120 <grid_report_sys_init+0x1f8>)
    402e:	4798      	blx	r3
    4030:	4602      	mov	r2, r0
    4032:	4649      	mov	r1, r9
    4034:	a808      	add	r0, sp, #32
    4036:	4b3b      	ldr	r3, [pc, #236]	; (4124 <grid_report_sys_init+0x1fc>)
    4038:	4798      	blx	r3
    403a:	e7af      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    403c:	4b34      	ldr	r3, [pc, #208]	; (4110 <grid_report_sys_init+0x1e8>)
    403e:	4798      	blx	r3
    4040:	2304      	movs	r3, #4
    4042:	9305      	str	r3, [sp, #20]
    4044:	23ff      	movs	r3, #255	; 0xff
    4046:	9304      	str	r3, [sp, #16]
    4048:	9303      	str	r3, [sp, #12]
    404a:	9002      	str	r0, [sp, #8]
    404c:	2312      	movs	r3, #18
    404e:	9301      	str	r3, [sp, #4]
    4050:	2307      	movs	r3, #7
    4052:	9300      	str	r3, [sp, #0]
    4054:	230e      	movs	r3, #14
    4056:	2201      	movs	r2, #1
    4058:	4930      	ldr	r1, [pc, #192]	; (411c <grid_report_sys_init+0x1f4>)
    405a:	a808      	add	r0, sp, #32
    405c:	4e2a      	ldr	r6, [pc, #168]	; (4108 <grid_report_sys_init+0x1e0>)
    405e:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4060:	a808      	add	r0, sp, #32
    4062:	47c0      	blx	r8
    4064:	4606      	mov	r6, r0
    4066:	4601      	mov	r1, r0
    4068:	a808      	add	r0, sp, #32
    406a:	4b2d      	ldr	r3, [pc, #180]	; (4120 <grid_report_sys_init+0x1f8>)
    406c:	4798      	blx	r3
    406e:	4602      	mov	r2, r0
    4070:	4631      	mov	r1, r6
    4072:	a808      	add	r0, sp, #32
    4074:	4b2b      	ldr	r3, [pc, #172]	; (4124 <grid_report_sys_init+0x1fc>)
    4076:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    4078:	2605      	movs	r6, #5
    407a:	e78f      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    407c:	4b24      	ldr	r3, [pc, #144]	; (4110 <grid_report_sys_init+0x1e8>)
    407e:	4798      	blx	r3
    4080:	2304      	movs	r3, #4
    4082:	9305      	str	r3, [sp, #20]
    4084:	23ff      	movs	r3, #255	; 0xff
    4086:	9304      	str	r3, [sp, #16]
    4088:	9303      	str	r3, [sp, #12]
    408a:	9002      	str	r0, [sp, #8]
    408c:	2313      	movs	r3, #19
    408e:	9301      	str	r3, [sp, #4]
    4090:	2307      	movs	r3, #7
    4092:	9300      	str	r3, [sp, #0]
    4094:	230e      	movs	r3, #14
    4096:	2201      	movs	r2, #1
    4098:	4920      	ldr	r1, [pc, #128]	; (411c <grid_report_sys_init+0x1f4>)
    409a:	a808      	add	r0, sp, #32
    409c:	4e1a      	ldr	r6, [pc, #104]	; (4108 <grid_report_sys_init+0x1e0>)
    409e:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    40a0:	a808      	add	r0, sp, #32
    40a2:	47c0      	blx	r8
    40a4:	4606      	mov	r6, r0
    40a6:	4601      	mov	r1, r0
    40a8:	a808      	add	r0, sp, #32
    40aa:	4b1d      	ldr	r3, [pc, #116]	; (4120 <grid_report_sys_init+0x1f8>)
    40ac:	4798      	blx	r3
    40ae:	4602      	mov	r2, r0
    40b0:	4631      	mov	r1, r6
    40b2:	a808      	add	r0, sp, #32
    40b4:	4b1b      	ldr	r3, [pc, #108]	; (4124 <grid_report_sys_init+0x1fc>)
    40b6:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    40b8:	2606      	movs	r6, #6
    40ba:	e76f      	b.n	3f9c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    40bc:	4b14      	ldr	r3, [pc, #80]	; (4110 <grid_report_sys_init+0x1e8>)
    40be:	4798      	blx	r3
    40c0:	2304      	movs	r3, #4
    40c2:	9305      	str	r3, [sp, #20]
    40c4:	23ff      	movs	r3, #255	; 0xff
    40c6:	9304      	str	r3, [sp, #16]
    40c8:	9303      	str	r3, [sp, #12]
    40ca:	9002      	str	r0, [sp, #8]
    40cc:	2314      	movs	r3, #20
    40ce:	9301      	str	r3, [sp, #4]
    40d0:	2607      	movs	r6, #7
    40d2:	9600      	str	r6, [sp, #0]
    40d4:	230e      	movs	r3, #14
    40d6:	2201      	movs	r2, #1
    40d8:	4910      	ldr	r1, [pc, #64]	; (411c <grid_report_sys_init+0x1f4>)
    40da:	a808      	add	r0, sp, #32
    40dc:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4108 <grid_report_sys_init+0x1e0>
    40e0:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    40e2:	a808      	add	r0, sp, #32
    40e4:	47c0      	blx	r8
    40e6:	4681      	mov	r9, r0
    40e8:	4601      	mov	r1, r0
    40ea:	a808      	add	r0, sp, #32
    40ec:	4b0c      	ldr	r3, [pc, #48]	; (4120 <grid_report_sys_init+0x1f8>)
    40ee:	4798      	blx	r3
    40f0:	4602      	mov	r2, r0
    40f2:	4649      	mov	r1, r9
    40f4:	a808      	add	r0, sp, #32
    40f6:	4b0b      	ldr	r3, [pc, #44]	; (4124 <grid_report_sys_init+0x1fc>)
    40f8:	4798      	blx	r3
    40fa:	e74f      	b.n	3f9c <grid_report_sys_init+0x74>
			}
			
		}
	
	}
}
    40fc:	b011      	add	sp, #68	; 0x44
    40fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4102:	4770      	bx	lr
    4104:	0000d9b8 	.word	0x0000d9b8
    4108:	0000c6e1 	.word	0x0000c6e1
    410c:	0000d9d0 	.word	0x0000d9d0
    4110:	00003a99 	.word	0x00003a99
    4114:	00003e61 	.word	0x00003e61
    4118:	0000c2f3 	.word	0x0000c2f3
    411c:	0000d9e4 	.word	0x0000d9e4
    4120:	00003ce1 	.word	0x00003ce1
    4124:	00003d1d 	.word	0x00003d1d
    4128:	0000c729 	.word	0x0000c729

0000412c <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    412c:	6843      	ldr	r3, [r0, #4]
    412e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    4132:	7888      	ldrb	r0, [r1, #2]
    4134:	b140      	cbz	r0, 4148 <grid_report_render+0x1c>
    4136:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    4138:	6848      	ldr	r0, [r1, #4]
    413a:	5cc0      	ldrb	r0, [r0, r3]
    413c:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    413e:	3301      	adds	r3, #1
    4140:	b2db      	uxtb	r3, r3
    4142:	7888      	ldrb	r0, [r1, #2]
    4144:	4298      	cmp	r0, r3
    4146:	d8f7      	bhi.n	4138 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    4148:	4770      	bx	lr

0000414a <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    414a:	7843      	ldrb	r3, [r0, #1]
    414c:	4419      	add	r1, r3
    414e:	6843      	ldr	r3, [r0, #4]
    4150:	0109      	lsls	r1, r1, #4
}
    4152:	5c58      	ldrb	r0, [r3, r1]
    4154:	4770      	bx	lr

00004156 <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    4156:	7843      	ldrb	r3, [r0, #1]
    4158:	4419      	add	r1, r3
    415a:	6843      	ldr	r3, [r0, #4]
    415c:	0109      	lsls	r1, r1, #4
    415e:	2201      	movs	r2, #1
    4160:	545a      	strb	r2, [r3, r1]
    4162:	4770      	bx	lr

00004164 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    4164:	6843      	ldr	r3, [r0, #4]
    4166:	0109      	lsls	r1, r1, #4
    4168:	2201      	movs	r2, #1
    416a:	545a      	strb	r2, [r3, r1]
    416c:	4770      	bx	lr

0000416e <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    416e:	6843      	ldr	r3, [r0, #4]
    4170:	0109      	lsls	r1, r1, #4
    4172:	2200      	movs	r2, #0
    4174:	545a      	strb	r2, [r3, r1]
    4176:	4770      	bx	lr

00004178 <grid_port_process_ui>:
	if (por->cooldown > 15){
    4178:	6803      	ldr	r3, [r0, #0]
    417a:	2b0f      	cmp	r3, #15
    417c:	d812      	bhi.n	41a4 <grid_port_process_ui+0x2c>
	else if (por->cooldown>0){
    417e:	b10b      	cbz	r3, 4184 <grid_port_process_ui+0xc>
		por->cooldown--;
    4180:	3b01      	subs	r3, #1
    4182:	6003      	str	r3, [r0, #0]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4184:	4b84      	ldr	r3, [pc, #528]	; (4398 <grid_port_process_ui+0x220>)
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	2b00      	cmp	r3, #0
    418a:	f000 821f 	beq.w	45cc <grid_port_process_ui+0x454>
void grid_port_process_ui(struct grid_port* por){
    418e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4192:	b0cd      	sub	sp, #308	; 0x134
	return mod->report_array[index].changed;
    4194:	4b80      	ldr	r3, [pc, #512]	; (4398 <grid_port_process_ui+0x220>)
    4196:	6859      	ldr	r1, [r3, #4]
    4198:	2300      	movs	r3, #0
    419a:	469e      	mov	lr, r3
    419c:	461c      	mov	r4, r3
    419e:	461e      	mov	r6, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    41a0:	4f7d      	ldr	r7, [pc, #500]	; (4398 <grid_port_process_ui+0x220>)
    41a2:	e014      	b.n	41ce <grid_port_process_ui+0x56>
		por->cooldown--;
    41a4:	3b01      	subs	r3, #1
    41a6:	6003      	str	r3, [r0, #0]
		return;
    41a8:	4770      	bx	lr
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    41aa:	f10e 0e01 	add.w	lr, lr, #1
    41ae:	fa5f fe8e 	uxtb.w	lr, lr
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    41b2:	2a05      	cmp	r2, #5
    41b4:	d120      	bne.n	41f8 <grid_port_process_ui+0x80>
    41b6:	3401      	adds	r4, #1
    41b8:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_LOCAL)?message_local_available++:1;
    41ba:	2a01      	cmp	r2, #1
    41bc:	bf04      	itt	eq
    41be:	3601      	addeq	r6, #1
    41c0:	b2f6      	uxtbeq	r6, r6
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    41c2:	3301      	adds	r3, #1
    41c4:	b2db      	uxtb	r3, r3
    41c6:	783a      	ldrb	r2, [r7, #0]
    41c8:	b2d2      	uxtb	r2, r2
    41ca:	429a      	cmp	r2, r3
    41cc:	d919      	bls.n	4202 <grid_port_process_ui+0x8a>
	return mod->report_array[index].changed;
    41ce:	011a      	lsls	r2, r3, #4
    41d0:	188d      	adds	r5, r1, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    41d2:	5c8a      	ldrb	r2, [r1, r2]
    41d4:	2a00      	cmp	r2, #0
    41d6:	d0f4      	beq.n	41c2 <grid_port_process_ui+0x4a>
	return mod->report_array[index].type;
    41d8:	786a      	ldrb	r2, [r5, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    41da:	2a02      	cmp	r2, #2
    41dc:	d0e5      	beq.n	41aa <grid_port_process_ui+0x32>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    41de:	2a03      	cmp	r2, #3
    41e0:	d008      	beq.n	41f4 <grid_port_process_ui+0x7c>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    41e2:	2a04      	cmp	r2, #4
    41e4:	d1e5      	bne.n	41b2 <grid_port_process_ui+0x3a>
    41e6:	3401      	adds	r4, #1
    41e8:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    41ea:	2a07      	cmp	r2, #7
    41ec:	d1e5      	bne.n	41ba <grid_port_process_ui+0x42>
    41ee:	3401      	adds	r4, #1
    41f0:	b2e4      	uxtb	r4, r4
    41f2:	e7e6      	b.n	41c2 <grid_port_process_ui+0x4a>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    41f4:	3401      	adds	r4, #1
    41f6:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    41f8:	2a06      	cmp	r2, #6
    41fa:	d1f6      	bne.n	41ea <grid_port_process_ui+0x72>
    41fc:	3401      	adds	r4, #1
    41fe:	b2e4      	uxtb	r4, r4
    4200:	e7df      	b.n	41c2 <grid_port_process_ui+0x4a>
    4202:	9006      	str	r0, [sp, #24]
	if (message_direct_available){
    4204:	2c00      	cmp	r4, #0
    4206:	d069      	beq.n	42dc <grid_port_process_ui+0x164>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4208:	4b63      	ldr	r3, [pc, #396]	; (4398 <grid_port_process_ui+0x220>)
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	2b00      	cmp	r3, #0
    420e:	d06b      	beq.n	42e8 <grid_port_process_ui+0x170>
    4210:	2600      	movs	r6, #0
	return mod->report_array[index].changed;
    4212:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4398 <grid_port_process_ui+0x220>
				uint8_t message[256] = {0};
    4216:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 43bc <grid_port_process_ui+0x244>
				CRITICAL_SECTION_ENTER()			
    421a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 43d0 <grid_port_process_ui+0x258>
    421e:	e00e      	b.n	423e <grid_port_process_ui+0xc6>
					target_buffer = &GRID_PORT_U.rx_buffer;
    4220:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 43cc <grid_port_process_ui+0x254>
				if (grid_buffer_write_init(target_buffer, length)){
    4224:	b2a9      	uxth	r1, r5
    4226:	4658      	mov	r0, fp
    4228:	4b5c      	ldr	r3, [pc, #368]	; (439c <grid_port_process_ui+0x224>)
    422a:	4798      	blx	r3
    422c:	2800      	cmp	r0, #0
    422e:	d13f      	bne.n	42b0 <grid_port_process_ui+0x138>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4230:	3601      	adds	r6, #1
    4232:	b2f6      	uxtb	r6, r6
    4234:	f898 3000 	ldrb.w	r3, [r8]
    4238:	b2db      	uxtb	r3, r3
    423a:	42b3      	cmp	r3, r6
    423c:	d954      	bls.n	42e8 <grid_port_process_ui+0x170>
	return mod->report_array[index].changed;
    423e:	0134      	lsls	r4, r6, #4
    4240:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4244:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    4246:	5d1b      	ldrb	r3, [r3, r4]
    4248:	2b00      	cmp	r3, #0
    424a:	d0f1      	beq.n	4230 <grid_port_process_ui+0xb8>
    424c:	7853      	ldrb	r3, [r2, #1]
    424e:	3b03      	subs	r3, #3
    4250:	b2db      	uxtb	r3, r3
    4252:	2b04      	cmp	r3, #4
    4254:	d8ec      	bhi.n	4230 <grid_port_process_ui+0xb8>
				uint8_t message[256] = {0};
    4256:	f44f 7280 	mov.w	r2, #256	; 0x100
    425a:	2100      	movs	r1, #0
    425c:	a80c      	add	r0, sp, #48	; 0x30
    425e:	47d0      	blx	sl
				CRITICAL_SECTION_ENTER()			
    4260:	a80a      	add	r0, sp, #40	; 0x28
    4262:	47c8      	blx	r9
				grid_report_render(mod, i, &message[length]);
    4264:	aa0c      	add	r2, sp, #48	; 0x30
    4266:	4631      	mov	r1, r6
    4268:	4640      	mov	r0, r8
    426a:	4b4d      	ldr	r3, [pc, #308]	; (43a0 <grid_port_process_ui+0x228>)
    426c:	4798      	blx	r3
				length += strlen(&message[length]);
    426e:	a80c      	add	r0, sp, #48	; 0x30
    4270:	4b4c      	ldr	r3, [pc, #304]	; (43a4 <grid_port_process_ui+0x22c>)
    4272:	4798      	blx	r3
    4274:	4605      	mov	r5, r0
				CRITICAL_SECTION_LEAVE()			
    4276:	a80a      	add	r0, sp, #40	; 0x28
    4278:	4b4b      	ldr	r3, [pc, #300]	; (43a8 <grid_port_process_ui+0x230>)
    427a:	4798      	blx	r3
	return mod->report_array[index].type;
    427c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4280:	441c      	add	r4, r3
    4282:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    4284:	2b03      	cmp	r3, #3
    4286:	d0cb      	beq.n	4220 <grid_port_process_ui+0xa8>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4288:	2b04      	cmp	r3, #4
    428a:	d008      	beq.n	429e <grid_port_process_ui+0x126>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    428c:	2b05      	cmp	r3, #5
    428e:	d009      	beq.n	42a4 <grid_port_process_ui+0x12c>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    4290:	2b06      	cmp	r3, #6
    4292:	d00a      	beq.n	42aa <grid_port_process_ui+0x132>
					target_buffer = &GRID_PORT_W.tx_buffer;
    4294:	4a45      	ldr	r2, [pc, #276]	; (43ac <grid_port_process_ui+0x234>)
    4296:	2b07      	cmp	r3, #7
    4298:	bf08      	it	eq
    429a:	4693      	moveq	fp, r2
    429c:	e7c2      	b.n	4224 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_N.tx_buffer;
    429e:	f8df b134 	ldr.w	fp, [pc, #308]	; 43d4 <grid_port_process_ui+0x25c>
    42a2:	e7bf      	b.n	4224 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_E.tx_buffer;
    42a4:	f8df b130 	ldr.w	fp, [pc, #304]	; 43d8 <grid_port_process_ui+0x260>
    42a8:	e7bc      	b.n	4224 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_S.tx_buffer;
    42aa:	f8df b130 	ldr.w	fp, [pc, #304]	; 43dc <grid_port_process_ui+0x264>
    42ae:	e7b9      	b.n	4224 <grid_port_process_ui+0xac>
					grid_report_sys_clear_changed_flag(mod, i);
    42b0:	4631      	mov	r1, r6
    42b2:	4640      	mov	r0, r8
    42b4:	4b3e      	ldr	r3, [pc, #248]	; (43b0 <grid_port_process_ui+0x238>)
    42b6:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    42b8:	b165      	cbz	r5, 42d4 <grid_port_process_ui+0x15c>
    42ba:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    42be:	ab4c      	add	r3, sp, #304	; 0x130
    42c0:	441d      	add	r5, r3
    42c2:	f2a5 1501 	subw	r5, r5, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    42c6:	4f3b      	ldr	r7, [pc, #236]	; (43b4 <grid_port_process_ui+0x23c>)
    42c8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    42cc:	4658      	mov	r0, fp
    42ce:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    42d0:	42ac      	cmp	r4, r5
    42d2:	d1f9      	bne.n	42c8 <grid_port_process_ui+0x150>
					grid_buffer_write_acknowledge(target_buffer);
    42d4:	4658      	mov	r0, fp
    42d6:	4b38      	ldr	r3, [pc, #224]	; (43b8 <grid_port_process_ui+0x240>)
    42d8:	4798      	blx	r3
    42da:	e7a9      	b.n	4230 <grid_port_process_ui+0xb8>
	if (message_broadcast_available){
    42dc:	f1be 0f00 	cmp.w	lr, #0
    42e0:	d105      	bne.n	42ee <grid_port_process_ui+0x176>
	if (message_local_available){
    42e2:	2e00      	cmp	r6, #0
    42e4:	f040 80d1 	bne.w	448a <grid_port_process_ui+0x312>
}
    42e8:	b04d      	add	sp, #308	; 0x134
    42ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[256] = {0};
    42ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    42f2:	2100      	movs	r1, #0
    42f4:	a80c      	add	r0, sp, #48	; 0x30
    42f6:	4b31      	ldr	r3, [pc, #196]	; (43bc <grid_port_process_ui+0x244>)
    42f8:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    42fa:	4b31      	ldr	r3, [pc, #196]	; (43c0 <grid_port_process_ui+0x248>)
    42fc:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4300:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    4302:	2117      	movs	r1, #23
    4304:	9105      	str	r1, [sp, #20]
    4306:	9304      	str	r3, [sp, #16]
    4308:	237f      	movs	r3, #127	; 0x7f
    430a:	9303      	str	r3, [sp, #12]
    430c:	9302      	str	r3, [sp, #8]
    430e:	9201      	str	r2, [sp, #4]
    4310:	2300      	movs	r3, #0
    4312:	9300      	str	r3, [sp, #0]
    4314:	230f      	movs	r3, #15
    4316:	2201      	movs	r2, #1
    4318:	492a      	ldr	r1, [pc, #168]	; (43c4 <grid_port_process_ui+0x24c>)
    431a:	a80c      	add	r0, sp, #48	; 0x30
    431c:	4d2a      	ldr	r5, [pc, #168]	; (43c8 <grid_port_process_ui+0x250>)
    431e:	47a8      	blx	r5
		length += strlen(&message[length]);
    4320:	a80c      	add	r0, sp, #48	; 0x30
    4322:	4b20      	ldr	r3, [pc, #128]	; (43a4 <grid_port_process_ui+0x22c>)
    4324:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4326:	4b1c      	ldr	r3, [pc, #112]	; (4398 <grid_port_process_ui+0x220>)
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d0d9      	beq.n	42e2 <grid_port_process_ui+0x16a>
    432e:	4625      	mov	r5, r4
    4330:	4627      	mov	r7, r4
    4332:	4680      	mov	r8, r0
			CRITICAL_SECTION_ENTER()
    4334:	f8df b098 	ldr.w	fp, [pc, #152]	; 43d0 <grid_port_process_ui+0x258>
	return mod->report_array[index].changed;
    4338:	f8df 905c 	ldr.w	r9, [pc, #92]	; 4398 <grid_port_process_ui+0x220>
			CRITICAL_SECTION_LEAVE()
    433c:	f8df a068 	ldr.w	sl, [pc, #104]	; 43a8 <grid_port_process_ui+0x230>
    4340:	e008      	b.n	4354 <grid_port_process_ui+0x1dc>
    4342:	a808      	add	r0, sp, #32
    4344:	47d0      	blx	sl
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4346:	3501      	adds	r5, #1
    4348:	b2ed      	uxtb	r5, r5
    434a:	f899 3000 	ldrb.w	r3, [r9]
    434e:	b2db      	uxtb	r3, r3
    4350:	42ab      	cmp	r3, r5
    4352:	d945      	bls.n	43e0 <grid_port_process_ui+0x268>
			if (length>200){
    4354:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
    4358:	d8f5      	bhi.n	4346 <grid_port_process_ui+0x1ce>
			CRITICAL_SECTION_ENTER()
    435a:	a808      	add	r0, sp, #32
    435c:	47d8      	blx	fp
	return mod->report_array[index].changed;
    435e:	012b      	lsls	r3, r5, #4
    4360:	f8d9 2004 	ldr.w	r2, [r9, #4]
    4364:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    4366:	5cd3      	ldrb	r3, [r2, r3]
    4368:	2b00      	cmp	r3, #0
    436a:	d0ea      	beq.n	4342 <grid_port_process_ui+0x1ca>
    436c:	784b      	ldrb	r3, [r1, #1]
    436e:	2b02      	cmp	r3, #2
    4370:	d1e7      	bne.n	4342 <grid_port_process_ui+0x1ca>
				packetvalid++;
    4372:	3701      	adds	r7, #1
    4374:	b2ff      	uxtb	r7, r7
				grid_report_render(mod, i, &message[length]);
    4376:	ab0c      	add	r3, sp, #48	; 0x30
    4378:	4443      	add	r3, r8
    437a:	9307      	str	r3, [sp, #28]
    437c:	461a      	mov	r2, r3
    437e:	4629      	mov	r1, r5
    4380:	4648      	mov	r0, r9
    4382:	4b07      	ldr	r3, [pc, #28]	; (43a0 <grid_port_process_ui+0x228>)
    4384:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    4386:	4629      	mov	r1, r5
    4388:	4648      	mov	r0, r9
    438a:	4b09      	ldr	r3, [pc, #36]	; (43b0 <grid_port_process_ui+0x238>)
    438c:	4798      	blx	r3
				length += strlen(&message[length]);
    438e:	9807      	ldr	r0, [sp, #28]
    4390:	4b04      	ldr	r3, [pc, #16]	; (43a4 <grid_port_process_ui+0x22c>)
    4392:	4798      	blx	r3
    4394:	4480      	add	r8, r0
    4396:	e7d4      	b.n	4342 <grid_port_process_ui+0x1ca>
    4398:	20001d20 	.word	0x20001d20
    439c:	00001375 	.word	0x00001375
    43a0:	0000412d 	.word	0x0000412d
    43a4:	0000c729 	.word	0x0000c729
    43a8:	000049c7 	.word	0x000049c7
    43ac:	200026c0 	.word	0x200026c0
    43b0:	0000416f 	.word	0x0000416f
    43b4:	000013a5 	.word	0x000013a5
    43b8:	000013c1 	.word	0x000013c1
    43bc:	0000c2f3 	.word	0x0000c2f3
    43c0:	20001d30 	.word	0x20001d30
    43c4:	0000da00 	.word	0x0000da00
    43c8:	0000c6e1 	.word	0x0000c6e1
    43cc:	20001d00 	.word	0x20001d00
    43d0:	000049b9 	.word	0x000049b9
    43d4:	2000178c 	.word	0x2000178c
    43d8:	20003620 	.word	0x20003620
    43dc:	20002bec 	.word	0x20002bec
		if (packetvalid){
    43e0:	2f00      	cmp	r7, #0
    43e2:	f43f af7e 	beq.w	42e2 <grid_port_process_ui+0x16a>
			por->cooldown += (10+por->cooldown);
    43e6:	9a06      	ldr	r2, [sp, #24]
    43e8:	6813      	ldr	r3, [r2, #0]
    43ea:	005b      	lsls	r3, r3, #1
    43ec:	330a      	adds	r3, #10
    43ee:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    43f0:	4a77      	ldr	r2, [pc, #476]	; (45d0 <grid_port_process_ui+0x458>)
    43f2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    43f6:	3301      	adds	r3, #1
    43f8:	b2db      	uxtb	r3, r3
    43fa:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    43fe:	ad0c      	add	r5, sp, #48	; 0x30
    4400:	eb05 0908 	add.w	r9, r5, r8
    4404:	2204      	movs	r2, #4
    4406:	4973      	ldr	r1, [pc, #460]	; (45d4 <grid_port_process_ui+0x45c>)
    4408:	4648      	mov	r0, r9
    440a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 4604 <grid_port_process_ui+0x48c>
    440e:	47d0      	blx	sl
			length += strlen(&message[length]);
    4410:	4648      	mov	r0, r9
    4412:	4f71      	ldr	r7, [pc, #452]	; (45d8 <grid_port_process_ui+0x460>)
    4414:	47b8      	blx	r7
    4416:	4480      	add	r8, r0
			sprintf(length_string, "%02x", length);
    4418:	4642      	mov	r2, r8
    441a:	4970      	ldr	r1, [pc, #448]	; (45dc <grid_port_process_ui+0x464>)
    441c:	a80a      	add	r0, sp, #40	; 0x28
    441e:	47d0      	blx	sl
			message[2] = length_string[0];
    4420:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4424:	70ab      	strb	r3, [r5, #2]
			message[3] = length_string[1];
    4426:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    442a:	70eb      	strb	r3, [r5, #3]
			sprintf(&message[length], "00\n");
    442c:	4b6c      	ldr	r3, [pc, #432]	; (45e0 <grid_port_process_ui+0x468>)
    442e:	6818      	ldr	r0, [r3, #0]
    4430:	f845 0008 	str.w	r0, [r5, r8]
			length += strlen(&message[length]);
    4434:	eb05 0008 	add.w	r0, r5, r8
    4438:	47b8      	blx	r7
    443a:	4480      	add	r8, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    443c:	4641      	mov	r1, r8
    443e:	4628      	mov	r0, r5
    4440:	4b68      	ldr	r3, [pc, #416]	; (45e4 <grid_port_process_ui+0x46c>)
    4442:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    4444:	4602      	mov	r2, r0
    4446:	4641      	mov	r1, r8
    4448:	4628      	mov	r0, r5
    444a:	4b67      	ldr	r3, [pc, #412]	; (45e8 <grid_port_process_ui+0x470>)
    444c:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    444e:	fa1f f188 	uxth.w	r1, r8
    4452:	4866      	ldr	r0, [pc, #408]	; (45ec <grid_port_process_ui+0x474>)
    4454:	4b66      	ldr	r3, [pc, #408]	; (45f0 <grid_port_process_ui+0x478>)
    4456:	4798      	blx	r3
    4458:	2800      	cmp	r0, #0
    445a:	f43f af42 	beq.w	42e2 <grid_port_process_ui+0x16a>
				for(uint32_t i = 0; i<length; i++){
    445e:	f1b8 0f00 	cmp.w	r8, #0
    4462:	d00e      	beq.n	4482 <grid_port_process_ui+0x30a>
    4464:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
    4468:	ab4c      	add	r3, sp, #304	; 0x130
    446a:	4498      	add	r8, r3
    446c:	f2a8 1801 	subw	r8, r8, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    4470:	f8df a178 	ldr.w	sl, [pc, #376]	; 45ec <grid_port_process_ui+0x474>
    4474:	4f5f      	ldr	r7, [pc, #380]	; (45f4 <grid_port_process_ui+0x47c>)
    4476:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    447a:	4650      	mov	r0, sl
    447c:	47b8      	blx	r7
				for(uint32_t i = 0; i<length; i++){
    447e:	4545      	cmp	r5, r8
    4480:	d1f9      	bne.n	4476 <grid_port_process_ui+0x2fe>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    4482:	485a      	ldr	r0, [pc, #360]	; (45ec <grid_port_process_ui+0x474>)
    4484:	4b5c      	ldr	r3, [pc, #368]	; (45f8 <grid_port_process_ui+0x480>)
    4486:	4798      	blx	r3
    4488:	e72b      	b.n	42e2 <grid_port_process_ui+0x16a>
		uint8_t message[256] = {0};
    448a:	f44f 7280 	mov.w	r2, #256	; 0x100
    448e:	2100      	movs	r1, #0
    4490:	a80c      	add	r0, sp, #48	; 0x30
    4492:	4b5a      	ldr	r3, [pc, #360]	; (45fc <grid_port_process_ui+0x484>)
    4494:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4496:	4b4e      	ldr	r3, [pc, #312]	; (45d0 <grid_port_process_ui+0x458>)
    4498:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    449c:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    449e:	2117      	movs	r1, #23
    44a0:	9105      	str	r1, [sp, #20]
    44a2:	9304      	str	r3, [sp, #16]
    44a4:	237f      	movs	r3, #127	; 0x7f
    44a6:	9303      	str	r3, [sp, #12]
    44a8:	9302      	str	r3, [sp, #8]
    44aa:	9201      	str	r2, [sp, #4]
    44ac:	2300      	movs	r3, #0
    44ae:	9300      	str	r3, [sp, #0]
    44b0:	230f      	movs	r3, #15
    44b2:	2201      	movs	r2, #1
    44b4:	4952      	ldr	r1, [pc, #328]	; (4600 <grid_port_process_ui+0x488>)
    44b6:	a80c      	add	r0, sp, #48	; 0x30
    44b8:	4d52      	ldr	r5, [pc, #328]	; (4604 <grid_port_process_ui+0x48c>)
    44ba:	47a8      	blx	r5
		length += strlen(&message[length]);
    44bc:	a80c      	add	r0, sp, #48	; 0x30
    44be:	4b46      	ldr	r3, [pc, #280]	; (45d8 <grid_port_process_ui+0x460>)
    44c0:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    44c2:	4b51      	ldr	r3, [pc, #324]	; (4608 <grid_port_process_ui+0x490>)
    44c4:	781b      	ldrb	r3, [r3, #0]
    44c6:	2b00      	cmp	r3, #0
    44c8:	f43f af0e 	beq.w	42e8 <grid_port_process_ui+0x170>
    44cc:	4625      	mov	r5, r4
    44ce:	4606      	mov	r6, r0
			CRITICAL_SECTION_ENTER()
    44d0:	f8df a144 	ldr.w	sl, [pc, #324]	; 4618 <grid_port_process_ui+0x4a0>
	return mod->report_array[index].changed;
    44d4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 4608 <grid_port_process_ui+0x490>
			CRITICAL_SECTION_LEAVE()
    44d8:	f8df 9140 	ldr.w	r9, [pc, #320]	; 461c <grid_port_process_ui+0x4a4>
    44dc:	e008      	b.n	44f0 <grid_port_process_ui+0x378>
    44de:	a809      	add	r0, sp, #36	; 0x24
    44e0:	47c8      	blx	r9
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    44e2:	3501      	adds	r5, #1
    44e4:	b2ed      	uxtb	r5, r5
    44e6:	f898 3000 	ldrb.w	r3, [r8]
    44ea:	b2db      	uxtb	r3, r3
    44ec:	42ab      	cmp	r3, r5
    44ee:	d91f      	bls.n	4530 <grid_port_process_ui+0x3b8>
			if (length>200){
    44f0:	2ec8      	cmp	r6, #200	; 0xc8
    44f2:	d8f6      	bhi.n	44e2 <grid_port_process_ui+0x36a>
			CRITICAL_SECTION_ENTER()
    44f4:	a809      	add	r0, sp, #36	; 0x24
    44f6:	47d0      	blx	sl
	return mod->report_array[index].changed;
    44f8:	012b      	lsls	r3, r5, #4
    44fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    44fe:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_LOCAL){
    4500:	5cd3      	ldrb	r3, [r2, r3]
    4502:	2b00      	cmp	r3, #0
    4504:	d0eb      	beq.n	44de <grid_port_process_ui+0x366>
    4506:	784b      	ldrb	r3, [r1, #1]
    4508:	2b01      	cmp	r3, #1
    450a:	d1e8      	bne.n	44de <grid_port_process_ui+0x366>
				packetvalid++;
    450c:	3401      	adds	r4, #1
    450e:	b2e4      	uxtb	r4, r4
				grid_report_render(mod, i, &message[length]);
    4510:	ab0c      	add	r3, sp, #48	; 0x30
    4512:	199f      	adds	r7, r3, r6
    4514:	463a      	mov	r2, r7
    4516:	4629      	mov	r1, r5
    4518:	4640      	mov	r0, r8
    451a:	4b3c      	ldr	r3, [pc, #240]	; (460c <grid_port_process_ui+0x494>)
    451c:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    451e:	4629      	mov	r1, r5
    4520:	4640      	mov	r0, r8
    4522:	4b3b      	ldr	r3, [pc, #236]	; (4610 <grid_port_process_ui+0x498>)
    4524:	4798      	blx	r3
				length += strlen(&message[length]);
    4526:	4638      	mov	r0, r7
    4528:	4b2b      	ldr	r3, [pc, #172]	; (45d8 <grid_port_process_ui+0x460>)
    452a:	4798      	blx	r3
    452c:	4406      	add	r6, r0
    452e:	e7d6      	b.n	44de <grid_port_process_ui+0x366>
		if (packetvalid){
    4530:	2c00      	cmp	r4, #0
    4532:	f43f aed9 	beq.w	42e8 <grid_port_process_ui+0x170>
			por->cooldown += (10+por->cooldown);
    4536:	9a06      	ldr	r2, [sp, #24]
    4538:	6813      	ldr	r3, [r2, #0]
    453a:	005b      	lsls	r3, r3, #1
    453c:	330a      	adds	r3, #10
    453e:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    4540:	4a23      	ldr	r2, [pc, #140]	; (45d0 <grid_port_process_ui+0x458>)
    4542:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    4546:	3301      	adds	r3, #1
    4548:	b2db      	uxtb	r3, r3
    454a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    454e:	ac0c      	add	r4, sp, #48	; 0x30
    4550:	19a5      	adds	r5, r4, r6
    4552:	2204      	movs	r2, #4
    4554:	491f      	ldr	r1, [pc, #124]	; (45d4 <grid_port_process_ui+0x45c>)
    4556:	4628      	mov	r0, r5
    4558:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4604 <grid_port_process_ui+0x48c>
    455c:	47c0      	blx	r8
			length += strlen(&message[length]);
    455e:	4628      	mov	r0, r5
    4560:	4f1d      	ldr	r7, [pc, #116]	; (45d8 <grid_port_process_ui+0x460>)
    4562:	47b8      	blx	r7
    4564:	1835      	adds	r5, r6, r0
			sprintf(length_string, "%02x", length);
    4566:	462a      	mov	r2, r5
    4568:	491c      	ldr	r1, [pc, #112]	; (45dc <grid_port_process_ui+0x464>)
    456a:	a80a      	add	r0, sp, #40	; 0x28
    456c:	47c0      	blx	r8
			message[2] = length_string[0];
    456e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4572:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4574:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    4578:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    457a:	4b19      	ldr	r3, [pc, #100]	; (45e0 <grid_port_process_ui+0x468>)
    457c:	6818      	ldr	r0, [r3, #0]
    457e:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4580:	1960      	adds	r0, r4, r5
    4582:	47b8      	blx	r7
    4584:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    4586:	4629      	mov	r1, r5
    4588:	4620      	mov	r0, r4
    458a:	4b16      	ldr	r3, [pc, #88]	; (45e4 <grid_port_process_ui+0x46c>)
    458c:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    458e:	4602      	mov	r2, r0
    4590:	4629      	mov	r1, r5
    4592:	4620      	mov	r0, r4
    4594:	4b14      	ldr	r3, [pc, #80]	; (45e8 <grid_port_process_ui+0x470>)
    4596:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, length)){
    4598:	b2a9      	uxth	r1, r5
    459a:	481e      	ldr	r0, [pc, #120]	; (4614 <grid_port_process_ui+0x49c>)
    459c:	4b14      	ldr	r3, [pc, #80]	; (45f0 <grid_port_process_ui+0x478>)
    459e:	4798      	blx	r3
    45a0:	2800      	cmp	r0, #0
    45a2:	f43f aea1 	beq.w	42e8 <grid_port_process_ui+0x170>
				for(uint32_t i = 0; i<length; i++){
    45a6:	b16d      	cbz	r5, 45c4 <grid_port_process_ui+0x44c>
    45a8:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    45ac:	ab4c      	add	r3, sp, #304	; 0x130
    45ae:	441d      	add	r5, r3
    45b0:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.tx_buffer, message[i]);
    45b4:	4f17      	ldr	r7, [pc, #92]	; (4614 <grid_port_process_ui+0x49c>)
    45b6:	4e0f      	ldr	r6, [pc, #60]	; (45f4 <grid_port_process_ui+0x47c>)
    45b8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    45bc:	4638      	mov	r0, r7
    45be:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    45c0:	42ac      	cmp	r4, r5
    45c2:	d1f9      	bne.n	45b8 <grid_port_process_ui+0x440>
				grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    45c4:	4813      	ldr	r0, [pc, #76]	; (4614 <grid_port_process_ui+0x49c>)
    45c6:	4b0c      	ldr	r3, [pc, #48]	; (45f8 <grid_port_process_ui+0x480>)
    45c8:	4798      	blx	r3
    45ca:	e68d      	b.n	42e8 <grid_port_process_ui+0x170>
    45cc:	4770      	bx	lr
    45ce:	bf00      	nop
    45d0:	20001d30 	.word	0x20001d30
    45d4:	0000da18 	.word	0x0000da18
    45d8:	0000c729 	.word	0x0000c729
    45dc:	0000da1c 	.word	0x0000da1c
    45e0:	0000da24 	.word	0x0000da24
    45e4:	00003ce1 	.word	0x00003ce1
    45e8:	00003d1d 	.word	0x00003d1d
    45ec:	20001d00 	.word	0x20001d00
    45f0:	00001375 	.word	0x00001375
    45f4:	000013a5 	.word	0x000013a5
    45f8:	000013c1 	.word	0x000013c1
    45fc:	0000c2f3 	.word	0x0000c2f3
    4600:	0000da00 	.word	0x0000da00
    4604:	0000c6e1 	.word	0x0000c6e1
    4608:	20001d20 	.word	0x20001d20
    460c:	0000412d 	.word	0x0000412d
    4610:	0000416f 	.word	0x0000416f
    4614:	20001ce8 	.word	0x20001ce8
    4618:	000049b9 	.word	0x000049b9
    461c:	000049c7 	.word	0x000049c7

00004620 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    4620:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    4622:	6983      	ldr	r3, [r0, #24]
    4624:	b103      	cbz	r3, 4628 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    4626:	4798      	blx	r3
    4628:	bd08      	pop	{r3, pc}

0000462a <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    462a:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    462c:	69c3      	ldr	r3, [r0, #28]
    462e:	b103      	cbz	r3, 4632 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4630:	4798      	blx	r3
    4632:	bd08      	pop	{r3, pc}

00004634 <adc_async_channel_conversion_done>:
{
    4634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4638:	4606      	mov	r6, r0
    463a:	460f      	mov	r7, r1
    463c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    463e:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4640:	5c5c      	ldrb	r4, [r3, r1]
    4642:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4646:	00e4      	lsls	r4, r4, #3
    4648:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    464c:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4650:	f105 0a04 	add.w	sl, r5, #4
    4654:	b2d1      	uxtb	r1, r2
    4656:	4650      	mov	r0, sl
    4658:	4b0c      	ldr	r3, [pc, #48]	; (468c <adc_async_channel_conversion_done+0x58>)
    465a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    465c:	4630      	mov	r0, r6
    465e:	4b0c      	ldr	r3, [pc, #48]	; (4690 <adc_async_channel_conversion_done+0x5c>)
    4660:	4798      	blx	r3
    4662:	2801      	cmp	r0, #1
    4664:	d907      	bls.n	4676 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4666:	ea4f 2119 	mov.w	r1, r9, lsr #8
    466a:	4650      	mov	r0, sl
    466c:	4b07      	ldr	r3, [pc, #28]	; (468c <adc_async_channel_conversion_done+0x58>)
    466e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4670:	8aab      	ldrh	r3, [r5, #20]
    4672:	3301      	adds	r3, #1
    4674:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4676:	8aab      	ldrh	r3, [r5, #20]
    4678:	3301      	adds	r3, #1
    467a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    467c:	f858 3004 	ldr.w	r3, [r8, r4]
    4680:	b113      	cbz	r3, 4688 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4682:	4639      	mov	r1, r7
    4684:	4630      	mov	r0, r6
    4686:	4798      	blx	r3
    4688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    468c:	00005ee9 	.word	0x00005ee9
    4690:	00006287 	.word	0x00006287

00004694 <adc_async_init>:
{
    4694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4698:	4689      	mov	r9, r1
    469a:	4616      	mov	r6, r2
    469c:	461c      	mov	r4, r3
    469e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    46a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    46a4:	4607      	mov	r7, r0
    46a6:	b140      	cbz	r0, 46ba <adc_async_init+0x26>
    46a8:	b149      	cbz	r1, 46be <adc_async_init+0x2a>
    46aa:	b152      	cbz	r2, 46c2 <adc_async_init+0x2e>
    46ac:	f1b8 0f00 	cmp.w	r8, #0
    46b0:	d009      	beq.n	46c6 <adc_async_init+0x32>
    46b2:	1c28      	adds	r0, r5, #0
    46b4:	bf18      	it	ne
    46b6:	2001      	movne	r0, #1
    46b8:	e006      	b.n	46c8 <adc_async_init+0x34>
    46ba:	2000      	movs	r0, #0
    46bc:	e004      	b.n	46c8 <adc_async_init+0x34>
    46be:	2000      	movs	r0, #0
    46c0:	e002      	b.n	46c8 <adc_async_init+0x34>
    46c2:	2000      	movs	r0, #0
    46c4:	e000      	b.n	46c8 <adc_async_init+0x34>
    46c6:	2000      	movs	r0, #0
    46c8:	f8df b064 	ldr.w	fp, [pc, #100]	; 4730 <adc_async_init+0x9c>
    46cc:	223f      	movs	r2, #63	; 0x3f
    46ce:	4659      	mov	r1, fp
    46d0:	f8df a060 	ldr.w	sl, [pc, #96]	; 4734 <adc_async_init+0xa0>
    46d4:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    46d6:	1c60      	adds	r0, r4, #1
    46d8:	2240      	movs	r2, #64	; 0x40
    46da:	4659      	mov	r1, fp
    46dc:	4580      	cmp	r8, r0
    46de:	bfcc      	ite	gt
    46e0:	2000      	movgt	r0, #0
    46e2:	2001      	movle	r0, #1
    46e4:	47d0      	blx	sl
	device = &descr->device;
    46e6:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    46e8:	21ff      	movs	r1, #255	; 0xff
    46ea:	b2da      	uxtb	r2, r3
    46ec:	54b1      	strb	r1, [r6, r2]
    46ee:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    46f0:	b2da      	uxtb	r2, r3
    46f2:	42a2      	cmp	r2, r4
    46f4:	d9f9      	bls.n	46ea <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    46f6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    46f8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    46fc:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    4700:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    4702:	4649      	mov	r1, r9
    4704:	4638      	mov	r0, r7
    4706:	4b06      	ldr	r3, [pc, #24]	; (4720 <adc_async_init+0x8c>)
    4708:	4798      	blx	r3
	if (init_status) {
    470a:	4603      	mov	r3, r0
    470c:	b928      	cbnz	r0, 471a <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    470e:	4a05      	ldr	r2, [pc, #20]	; (4724 <adc_async_init+0x90>)
    4710:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    4712:	4a05      	ldr	r2, [pc, #20]	; (4728 <adc_async_init+0x94>)
    4714:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    4716:	4a05      	ldr	r2, [pc, #20]	; (472c <adc_async_init+0x98>)
    4718:	607a      	str	r2, [r7, #4]
}
    471a:	4618      	mov	r0, r3
    471c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4720:	00006155 	.word	0x00006155
    4724:	00004635 	.word	0x00004635
    4728:	00004621 	.word	0x00004621
    472c:	0000462b 	.word	0x0000462b
    4730:	0000da28 	.word	0x0000da28
    4734:	00005dad 	.word	0x00005dad

00004738 <adc_async_register_channel_buffer>:
{
    4738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    473c:	460e      	mov	r6, r1
    473e:	4617      	mov	r7, r2
    4740:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4742:	4605      	mov	r5, r0
    4744:	2800      	cmp	r0, #0
    4746:	d040      	beq.n	47ca <adc_async_register_channel_buffer+0x92>
    4748:	2a00      	cmp	r2, #0
    474a:	d040      	beq.n	47ce <adc_async_register_channel_buffer+0x96>
    474c:	1c18      	adds	r0, r3, #0
    474e:	bf18      	it	ne
    4750:	2001      	movne	r0, #1
    4752:	f8df 9098 	ldr.w	r9, [pc, #152]	; 47ec <adc_async_register_channel_buffer+0xb4>
    4756:	2266      	movs	r2, #102	; 0x66
    4758:	4649      	mov	r1, r9
    475a:	4c22      	ldr	r4, [pc, #136]	; (47e4 <adc_async_register_channel_buffer+0xac>)
    475c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    475e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4762:	2267      	movs	r2, #103	; 0x67
    4764:	4649      	mov	r1, r9
    4766:	42b0      	cmp	r0, r6
    4768:	bf34      	ite	cc
    476a:	2000      	movcc	r0, #0
    476c:	2001      	movcs	r0, #1
    476e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4770:	6a29      	ldr	r1, [r5, #32]
    4772:	5d8b      	ldrb	r3, [r1, r6]
    4774:	2bff      	cmp	r3, #255	; 0xff
    4776:	d12c      	bne.n	47d2 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4778:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    477c:	2300      	movs	r3, #0
    477e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4780:	b2da      	uxtb	r2, r3
    4782:	5c8a      	ldrb	r2, [r1, r2]
    4784:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4786:	bf1c      	itt	ne
    4788:	3401      	addne	r4, #1
    478a:	b2e4      	uxtbne	r4, r4
    478c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    478e:	b2da      	uxtb	r2, r3
    4790:	4282      	cmp	r2, r0
    4792:	d9f5      	bls.n	4780 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4794:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4798:	42a3      	cmp	r3, r4
    479a:	d31d      	bcc.n	47d8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    479c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    47a0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    47a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    47a6:	4448      	add	r0, r9
    47a8:	4642      	mov	r2, r8
    47aa:	4639      	mov	r1, r7
    47ac:	3004      	adds	r0, #4
    47ae:	4b0e      	ldr	r3, [pc, #56]	; (47e8 <adc_async_register_channel_buffer+0xb0>)
    47b0:	4798      	blx	r3
    47b2:	4602      	mov	r2, r0
    47b4:	b998      	cbnz	r0, 47de <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    47b6:	6a2b      	ldr	r3, [r5, #32]
    47b8:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    47ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47bc:	4499      	add	r9, r3
    47be:	2300      	movs	r3, #0
    47c0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    47c4:	4610      	mov	r0, r2
    47c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    47ca:	2000      	movs	r0, #0
    47cc:	e7c1      	b.n	4752 <adc_async_register_channel_buffer+0x1a>
    47ce:	2000      	movs	r0, #0
    47d0:	e7bf      	b.n	4752 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    47d2:	f06f 020c 	mvn.w	r2, #12
    47d6:	e7f5      	b.n	47c4 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    47d8:	f06f 021b 	mvn.w	r2, #27
    47dc:	e7f2      	b.n	47c4 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    47de:	f06f 020c 	mvn.w	r2, #12
    47e2:	e7ef      	b.n	47c4 <adc_async_register_channel_buffer+0x8c>
    47e4:	00005dad 	.word	0x00005dad
    47e8:	00005e55 	.word	0x00005e55
    47ec:	0000da28 	.word	0x0000da28

000047f0 <adc_async_enable_channel>:
{
    47f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47f2:	460d      	mov	r5, r1
	ASSERT(descr);
    47f4:	4f0b      	ldr	r7, [pc, #44]	; (4824 <adc_async_enable_channel+0x34>)
    47f6:	4604      	mov	r4, r0
    47f8:	2283      	movs	r2, #131	; 0x83
    47fa:	4639      	mov	r1, r7
    47fc:	3000      	adds	r0, #0
    47fe:	bf18      	it	ne
    4800:	2001      	movne	r0, #1
    4802:	4e09      	ldr	r6, [pc, #36]	; (4828 <adc_async_enable_channel+0x38>)
    4804:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4806:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    480a:	2284      	movs	r2, #132	; 0x84
    480c:	4639      	mov	r1, r7
    480e:	42a8      	cmp	r0, r5
    4810:	bf34      	ite	cc
    4812:	2000      	movcc	r0, #0
    4814:	2001      	movcs	r0, #1
    4816:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    4818:	4629      	mov	r1, r5
    481a:	4620      	mov	r0, r4
    481c:	4b03      	ldr	r3, [pc, #12]	; (482c <adc_async_enable_channel+0x3c>)
    481e:	4798      	blx	r3
}
    4820:	2000      	movs	r0, #0
    4822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4824:	0000da28 	.word	0x0000da28
    4828:	00005dad 	.word	0x00005dad
    482c:	00006271 	.word	0x00006271

00004830 <adc_async_register_callback>:
{
    4830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4834:	460e      	mov	r6, r1
    4836:	4614      	mov	r4, r2
    4838:	4699      	mov	r9, r3
	ASSERT(descr);
    483a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 48ac <adc_async_register_callback+0x7c>
    483e:	4605      	mov	r5, r0
    4840:	229c      	movs	r2, #156	; 0x9c
    4842:	4641      	mov	r1, r8
    4844:	3000      	adds	r0, #0
    4846:	bf18      	it	ne
    4848:	2001      	movne	r0, #1
    484a:	4f16      	ldr	r7, [pc, #88]	; (48a4 <adc_async_register_callback+0x74>)
    484c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    484e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4852:	229d      	movs	r2, #157	; 0x9d
    4854:	4641      	mov	r1, r8
    4856:	42b0      	cmp	r0, r6
    4858:	bf34      	ite	cc
    485a:	2000      	movcc	r0, #0
    485c:	2001      	movcs	r0, #1
    485e:	47b8      	blx	r7
	switch (type) {
    4860:	2c01      	cmp	r4, #1
    4862:	d019      	beq.n	4898 <adc_async_register_callback+0x68>
    4864:	b12c      	cbz	r4, 4872 <adc_async_register_callback+0x42>
    4866:	2c02      	cmp	r4, #2
    4868:	d019      	beq.n	489e <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    486a:	f06f 000c 	mvn.w	r0, #12
}
    486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4872:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4874:	5d9b      	ldrb	r3, [r3, r6]
    4876:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    487c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4880:	f119 0300 	adds.w	r3, r9, #0
    4884:	bf18      	it	ne
    4886:	2301      	movne	r3, #1
    4888:	4622      	mov	r2, r4
    488a:	4631      	mov	r1, r6
    488c:	4628      	mov	r0, r5
    488e:	4c06      	ldr	r4, [pc, #24]	; (48a8 <adc_async_register_callback+0x78>)
    4890:	47a0      	blx	r4
	return ERR_NONE;
    4892:	2000      	movs	r0, #0
    4894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4898:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    489c:	e7f0      	b.n	4880 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    489e:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    48a2:	e7ed      	b.n	4880 <adc_async_register_callback+0x50>
    48a4:	00005dad 	.word	0x00005dad
    48a8:	000062af 	.word	0x000062af
    48ac:	0000da28 	.word	0x0000da28

000048b0 <adc_async_read_channel>:
{
    48b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48b4:	b083      	sub	sp, #12
    48b6:	4688      	mov	r8, r1
    48b8:	4691      	mov	r9, r2
    48ba:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    48bc:	4604      	mov	r4, r0
    48be:	2800      	cmp	r0, #0
    48c0:	d04f      	beq.n	4962 <adc_async_read_channel+0xb2>
    48c2:	2a00      	cmp	r2, #0
    48c4:	d04f      	beq.n	4966 <adc_async_read_channel+0xb6>
    48c6:	1c18      	adds	r0, r3, #0
    48c8:	bf18      	it	ne
    48ca:	2001      	movne	r0, #1
    48cc:	4f29      	ldr	r7, [pc, #164]	; (4974 <adc_async_read_channel+0xc4>)
    48ce:	22bc      	movs	r2, #188	; 0xbc
    48d0:	4639      	mov	r1, r7
    48d2:	4e29      	ldr	r6, [pc, #164]	; (4978 <adc_async_read_channel+0xc8>)
    48d4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    48d6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    48da:	22bd      	movs	r2, #189	; 0xbd
    48dc:	4639      	mov	r1, r7
    48de:	4540      	cmp	r0, r8
    48e0:	bf34      	ite	cc
    48e2:	2000      	movcc	r0, #0
    48e4:	2001      	movcs	r0, #1
    48e6:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    48e8:	4620      	mov	r0, r4
    48ea:	4b24      	ldr	r3, [pc, #144]	; (497c <adc_async_read_channel+0xcc>)
    48ec:	4798      	blx	r3
	ASSERT(!(length % data_size));
    48ee:	fb95 f3f0 	sdiv	r3, r5, r0
    48f2:	fb03 5010 	mls	r0, r3, r0, r5
    48f6:	22bf      	movs	r2, #191	; 0xbf
    48f8:	4639      	mov	r1, r7
    48fa:	fab0 f080 	clz	r0, r0
    48fe:	0940      	lsrs	r0, r0, #5
    4900:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    4902:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4904:	f813 b008 	ldrb.w	fp, [r3, r8]
    4908:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    490c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    490e:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4912:	a801      	add	r0, sp, #4
    4914:	4b1a      	ldr	r3, [pc, #104]	; (4980 <adc_async_read_channel+0xd0>)
    4916:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    4918:	f10b 0a04 	add.w	sl, fp, #4
    491c:	4650      	mov	r0, sl
    491e:	4b19      	ldr	r3, [pc, #100]	; (4984 <adc_async_read_channel+0xd4>)
    4920:	4798      	blx	r3
    4922:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4924:	a801      	add	r0, sp, #4
    4926:	4b18      	ldr	r3, [pc, #96]	; (4988 <adc_async_read_channel+0xd8>)
    4928:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    492a:	f1b8 0f00 	cmp.w	r8, #0
    492e:	d01c      	beq.n	496a <adc_async_read_channel+0xba>
    4930:	b1ed      	cbz	r5, 496e <adc_async_read_channel+0xbe>
    4932:	3d01      	subs	r5, #1
    4934:	b2ad      	uxth	r5, r5
    4936:	3502      	adds	r5, #2
    4938:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    493a:	4f14      	ldr	r7, [pc, #80]	; (498c <adc_async_read_channel+0xdc>)
    493c:	b2a6      	uxth	r6, r4
    493e:	1e61      	subs	r1, r4, #1
    4940:	4449      	add	r1, r9
    4942:	4650      	mov	r0, sl
    4944:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4946:	4544      	cmp	r4, r8
    4948:	d002      	beq.n	4950 <adc_async_read_channel+0xa0>
    494a:	3401      	adds	r4, #1
    494c:	42ac      	cmp	r4, r5
    494e:	d1f5      	bne.n	493c <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4950:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4954:	1b9b      	subs	r3, r3, r6
    4956:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    495a:	4630      	mov	r0, r6
    495c:	b003      	add	sp, #12
    495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4962:	2000      	movs	r0, #0
    4964:	e7b2      	b.n	48cc <adc_async_read_channel+0x1c>
    4966:	2000      	movs	r0, #0
    4968:	e7b0      	b.n	48cc <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    496a:	2600      	movs	r6, #0
    496c:	e7f0      	b.n	4950 <adc_async_read_channel+0xa0>
    496e:	2600      	movs	r6, #0
    4970:	e7ee      	b.n	4950 <adc_async_read_channel+0xa0>
    4972:	bf00      	nop
    4974:	0000da28 	.word	0x0000da28
    4978:	00005dad 	.word	0x00005dad
    497c:	00006287 	.word	0x00006287
    4980:	000049b9 	.word	0x000049b9
    4984:	00005f29 	.word	0x00005f29
    4988:	000049c7 	.word	0x000049c7
    498c:	00005ea5 	.word	0x00005ea5

00004990 <adc_async_start_conversion>:
{
    4990:	b510      	push	{r4, lr}
	ASSERT(descr);
    4992:	4604      	mov	r4, r0
    4994:	22d6      	movs	r2, #214	; 0xd6
    4996:	4905      	ldr	r1, [pc, #20]	; (49ac <adc_async_start_conversion+0x1c>)
    4998:	3000      	adds	r0, #0
    499a:	bf18      	it	ne
    499c:	2001      	movne	r0, #1
    499e:	4b04      	ldr	r3, [pc, #16]	; (49b0 <adc_async_start_conversion+0x20>)
    49a0:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    49a2:	4620      	mov	r0, r4
    49a4:	4b03      	ldr	r3, [pc, #12]	; (49b4 <adc_async_start_conversion+0x24>)
    49a6:	4798      	blx	r3
}
    49a8:	2000      	movs	r0, #0
    49aa:	bd10      	pop	{r4, pc}
    49ac:	0000da28 	.word	0x0000da28
    49b0:	00005dad 	.word	0x00005dad
    49b4:	00006299 	.word	0x00006299

000049b8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    49b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    49bc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    49be:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    49c0:	f3bf 8f5f 	dmb	sy
    49c4:	4770      	bx	lr

000049c6 <atomic_leave_critical>:
    49c6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    49ca:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    49cc:	f383 8810 	msr	PRIMASK, r3
    49d0:	4770      	bx	lr
	...

000049d4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    49d4:	b538      	push	{r3, r4, r5, lr}
    49d6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    49d8:	4605      	mov	r5, r0
    49da:	b158      	cbz	r0, 49f4 <crc_sync_init+0x20>
    49dc:	1c08      	adds	r0, r1, #0
    49de:	bf18      	it	ne
    49e0:	2001      	movne	r0, #1
    49e2:	222b      	movs	r2, #43	; 0x2b
    49e4:	4904      	ldr	r1, [pc, #16]	; (49f8 <crc_sync_init+0x24>)
    49e6:	4b05      	ldr	r3, [pc, #20]	; (49fc <crc_sync_init+0x28>)
    49e8:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    49ea:	4621      	mov	r1, r4
    49ec:	4628      	mov	r0, r5
    49ee:	4b04      	ldr	r3, [pc, #16]	; (4a00 <crc_sync_init+0x2c>)
    49f0:	4798      	blx	r3
}
    49f2:	bd38      	pop	{r3, r4, r5, pc}
    49f4:	2000      	movs	r0, #0
    49f6:	e7f4      	b.n	49e2 <crc_sync_init+0xe>
    49f8:	0000da44 	.word	0x0000da44
    49fc:	00005dad 	.word	0x00005dad
    4a00:	00006699 	.word	0x00006699

00004a04 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4a04:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    4a06:	4b02      	ldr	r3, [pc, #8]	; (4a10 <delay_init+0xc>)
    4a08:	6018      	str	r0, [r3, #0]
    4a0a:	4b02      	ldr	r3, [pc, #8]	; (4a14 <delay_init+0x10>)
    4a0c:	4798      	blx	r3
    4a0e:	bd08      	pop	{r3, pc}
    4a10:	20000648 	.word	0x20000648
    4a14:	00008099 	.word	0x00008099

00004a18 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4a18:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4a1a:	4b04      	ldr	r3, [pc, #16]	; (4a2c <delay_us+0x14>)
    4a1c:	681c      	ldr	r4, [r3, #0]
    4a1e:	4b04      	ldr	r3, [pc, #16]	; (4a30 <delay_us+0x18>)
    4a20:	4798      	blx	r3
    4a22:	4601      	mov	r1, r0
    4a24:	4620      	mov	r0, r4
    4a26:	4b03      	ldr	r3, [pc, #12]	; (4a34 <delay_us+0x1c>)
    4a28:	4798      	blx	r3
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	20000648 	.word	0x20000648
    4a30:	0000635d 	.word	0x0000635d
    4a34:	000080ad 	.word	0x000080ad

00004a38 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4a38:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4a3a:	4b04      	ldr	r3, [pc, #16]	; (4a4c <delay_ms+0x14>)
    4a3c:	681c      	ldr	r4, [r3, #0]
    4a3e:	4b04      	ldr	r3, [pc, #16]	; (4a50 <delay_ms+0x18>)
    4a40:	4798      	blx	r3
    4a42:	4601      	mov	r1, r0
    4a44:	4620      	mov	r0, r4
    4a46:	4b03      	ldr	r3, [pc, #12]	; (4a54 <delay_ms+0x1c>)
    4a48:	4798      	blx	r3
    4a4a:	bd10      	pop	{r4, pc}
    4a4c:	20000648 	.word	0x20000648
    4a50:	00006365 	.word	0x00006365
    4a54:	000080ad 	.word	0x000080ad

00004a58 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4a58:	b508      	push	{r3, lr}
	return _event_system_init();
    4a5a:	4b01      	ldr	r3, [pc, #4]	; (4a60 <event_system_init+0x8>)
    4a5c:	4798      	blx	r3
}
    4a5e:	bd08      	pop	{r3, pc}
    4a60:	000066a1 	.word	0x000066a1

00004a64 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4a64:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4a66:	6943      	ldr	r3, [r0, #20]
    4a68:	b103      	cbz	r3, 4a6c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4a6a:	4798      	blx	r3
    4a6c:	bd08      	pop	{r3, pc}

00004a6e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4a6e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4a70:	6983      	ldr	r3, [r0, #24]
    4a72:	b103      	cbz	r3, 4a76 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4a74:	4798      	blx	r3
    4a76:	bd08      	pop	{r3, pc}

00004a78 <flash_init>:
{
    4a78:	b538      	push	{r3, r4, r5, lr}
    4a7a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4a7c:	4604      	mov	r4, r0
    4a7e:	b190      	cbz	r0, 4aa6 <flash_init+0x2e>
    4a80:	1c08      	adds	r0, r1, #0
    4a82:	bf18      	it	ne
    4a84:	2001      	movne	r0, #1
    4a86:	2238      	movs	r2, #56	; 0x38
    4a88:	4908      	ldr	r1, [pc, #32]	; (4aac <flash_init+0x34>)
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <flash_init+0x38>)
    4a8c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4a8e:	4629      	mov	r1, r5
    4a90:	4620      	mov	r0, r4
    4a92:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <flash_init+0x3c>)
    4a94:	4798      	blx	r3
	if (rc) {
    4a96:	4603      	mov	r3, r0
    4a98:	b918      	cbnz	r0, 4aa2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4a9a:	4a07      	ldr	r2, [pc, #28]	; (4ab8 <flash_init+0x40>)
    4a9c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4a9e:	4a07      	ldr	r2, [pc, #28]	; (4abc <flash_init+0x44>)
    4aa0:	6062      	str	r2, [r4, #4]
}
    4aa2:	4618      	mov	r0, r3
    4aa4:	bd38      	pop	{r3, r4, r5, pc}
    4aa6:	2000      	movs	r0, #0
    4aa8:	e7ed      	b.n	4a86 <flash_init+0xe>
    4aaa:	bf00      	nop
    4aac:	0000da60 	.word	0x0000da60
    4ab0:	00005dad 	.word	0x00005dad
    4ab4:	000067ad 	.word	0x000067ad
    4ab8:	00004a65 	.word	0x00004a65
    4abc:	00004a6f 	.word	0x00004a6f

00004ac0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4ac0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4ac2:	8843      	ldrh	r3, [r0, #2]
    4ac4:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ac8:	d102      	bne.n	4ad0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4aca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4acc:	b103      	cbz	r3, 4ad0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    4ace:	4798      	blx	r3
    4ad0:	bd08      	pop	{r3, pc}

00004ad2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4ad2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4ad4:	8843      	ldrh	r3, [r0, #2]
    4ad6:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ada:	d102      	bne.n	4ae2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4adc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4ade:	b103      	cbz	r3, 4ae2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    4ae0:	4798      	blx	r3
    4ae2:	bd08      	pop	{r3, pc}

00004ae4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4ae4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4ae6:	8843      	ldrh	r3, [r0, #2]
    4ae8:	f413 7f80 	tst.w	r3, #256	; 0x100
    4aec:	d102      	bne.n	4af4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4aee:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4af0:	b103      	cbz	r3, 4af4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4af2:	4798      	blx	r3
    4af4:	bd08      	pop	{r3, pc}
	...

00004af8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4af8:	b510      	push	{r4, lr}
    4afa:	b084      	sub	sp, #16
    4afc:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4afe:	8a83      	ldrh	r3, [r0, #20]
    4b00:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4b04:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    4b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4b0a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4b0e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4b10:	a901      	add	r1, sp, #4
    4b12:	3828      	subs	r0, #40	; 0x28
    4b14:	4b03      	ldr	r3, [pc, #12]	; (4b24 <i2c_m_async_write+0x2c>)
    4b16:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4b18:	2800      	cmp	r0, #0
    4b1a:	bf08      	it	eq
    4b1c:	4620      	moveq	r0, r4
    4b1e:	b004      	add	sp, #16
    4b20:	bd10      	pop	{r4, pc}
    4b22:	bf00      	nop
    4b24:	000075e9 	.word	0x000075e9

00004b28 <i2c_m_async_read>:
{
    4b28:	b510      	push	{r4, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4b2e:	8a83      	ldrh	r3, [r0, #20]
    4b30:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4b34:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4b36:	f248 0301 	movw	r3, #32769	; 0x8001
    4b3a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4b3e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4b40:	a901      	add	r1, sp, #4
    4b42:	3828      	subs	r0, #40	; 0x28
    4b44:	4b03      	ldr	r3, [pc, #12]	; (4b54 <i2c_m_async_read+0x2c>)
    4b46:	4798      	blx	r3
}
    4b48:	2800      	cmp	r0, #0
    4b4a:	bf08      	it	eq
    4b4c:	4620      	moveq	r0, r4
    4b4e:	b004      	add	sp, #16
    4b50:	bd10      	pop	{r4, pc}
    4b52:	bf00      	nop
    4b54:	000075e9 	.word	0x000075e9

00004b58 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4b58:	b570      	push	{r4, r5, r6, lr}
    4b5a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4b5c:	4604      	mov	r4, r0
    4b5e:	2289      	movs	r2, #137	; 0x89
    4b60:	490f      	ldr	r1, [pc, #60]	; (4ba0 <i2c_m_async_init+0x48>)
    4b62:	3000      	adds	r0, #0
    4b64:	bf18      	it	ne
    4b66:	2001      	movne	r0, #1
    4b68:	4b0e      	ldr	r3, [pc, #56]	; (4ba4 <i2c_m_async_init+0x4c>)
    4b6a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4b6c:	4629      	mov	r1, r5
    4b6e:	4620      	mov	r0, r4
    4b70:	4b0d      	ldr	r3, [pc, #52]	; (4ba8 <i2c_m_async_init+0x50>)
    4b72:	4798      	blx	r3
	if (init_status) {
    4b74:	4605      	mov	r5, r0
    4b76:	b108      	cbz	r0, 4b7c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4b78:	4628      	mov	r0, r5
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4b7c:	4b0b      	ldr	r3, [pc, #44]	; (4bac <i2c_m_async_init+0x54>)
    4b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4b80:	4b0b      	ldr	r3, [pc, #44]	; (4bb0 <i2c_m_async_init+0x58>)
    4b82:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4b84:	4a0b      	ldr	r2, [pc, #44]	; (4bb4 <i2c_m_async_init+0x5c>)
    4b86:	2101      	movs	r1, #1
    4b88:	4620      	mov	r0, r4
    4b8a:	4e0b      	ldr	r6, [pc, #44]	; (4bb8 <i2c_m_async_init+0x60>)
    4b8c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4b8e:	4a0b      	ldr	r2, [pc, #44]	; (4bbc <i2c_m_async_init+0x64>)
    4b90:	2102      	movs	r1, #2
    4b92:	4620      	mov	r0, r4
    4b94:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <i2c_m_async_init+0x68>)
    4b98:	2100      	movs	r1, #0
    4b9a:	4620      	mov	r0, r4
    4b9c:	47b0      	blx	r6
	return ERR_NONE;
    4b9e:	e7eb      	b.n	4b78 <i2c_m_async_init+0x20>
    4ba0:	0000da78 	.word	0x0000da78
    4ba4:	00005dad 	.word	0x00005dad
    4ba8:	00007569 	.word	0x00007569
    4bac:	00004b29 	.word	0x00004b29
    4bb0:	00004af9 	.word	0x00004af9
    4bb4:	00004ac1 	.word	0x00004ac1
    4bb8:	00007719 	.word	0x00007719
    4bbc:	00004ad3 	.word	0x00004ad3
    4bc0:	00004ae5 	.word	0x00004ae5

00004bc4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4bc4:	b570      	push	{r4, r5, r6, lr}
    4bc6:	460d      	mov	r5, r1
    4bc8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4bca:	4604      	mov	r4, r0
    4bcc:	b160      	cbz	r0, 4be8 <io_write+0x24>
    4bce:	1c08      	adds	r0, r1, #0
    4bd0:	bf18      	it	ne
    4bd2:	2001      	movne	r0, #1
    4bd4:	2234      	movs	r2, #52	; 0x34
    4bd6:	4905      	ldr	r1, [pc, #20]	; (4bec <io_write+0x28>)
    4bd8:	4b05      	ldr	r3, [pc, #20]	; (4bf0 <io_write+0x2c>)
    4bda:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4bdc:	6823      	ldr	r3, [r4, #0]
    4bde:	4632      	mov	r2, r6
    4be0:	4629      	mov	r1, r5
    4be2:	4620      	mov	r0, r4
    4be4:	4798      	blx	r3
}
    4be6:	bd70      	pop	{r4, r5, r6, pc}
    4be8:	2000      	movs	r0, #0
    4bea:	e7f3      	b.n	4bd4 <io_write+0x10>
    4bec:	0000da98 	.word	0x0000da98
    4bf0:	00005dad 	.word	0x00005dad

00004bf4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4bf4:	b570      	push	{r4, r5, r6, lr}
    4bf6:	460d      	mov	r5, r1
    4bf8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4bfa:	4604      	mov	r4, r0
    4bfc:	b160      	cbz	r0, 4c18 <io_read+0x24>
    4bfe:	1c08      	adds	r0, r1, #0
    4c00:	bf18      	it	ne
    4c02:	2001      	movne	r0, #1
    4c04:	223d      	movs	r2, #61	; 0x3d
    4c06:	4905      	ldr	r1, [pc, #20]	; (4c1c <io_read+0x28>)
    4c08:	4b05      	ldr	r3, [pc, #20]	; (4c20 <io_read+0x2c>)
    4c0a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4c0c:	6863      	ldr	r3, [r4, #4]
    4c0e:	4632      	mov	r2, r6
    4c10:	4629      	mov	r1, r5
    4c12:	4620      	mov	r0, r4
    4c14:	4798      	blx	r3
}
    4c16:	bd70      	pop	{r4, r5, r6, pc}
    4c18:	2000      	movs	r0, #0
    4c1a:	e7f3      	b.n	4c04 <io_read+0x10>
    4c1c:	0000da98 	.word	0x0000da98
    4c20:	00005dad 	.word	0x00005dad

00004c24 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4c24:	b538      	push	{r3, r4, r5, lr}
    4c26:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    4c28:	4605      	mov	r5, r0
    4c2a:	b158      	cbz	r0, 4c44 <qspi_dma_init+0x20>
    4c2c:	1c08      	adds	r0, r1, #0
    4c2e:	bf18      	it	ne
    4c30:	2001      	movne	r0, #1
    4c32:	2231      	movs	r2, #49	; 0x31
    4c34:	4904      	ldr	r1, [pc, #16]	; (4c48 <qspi_dma_init+0x24>)
    4c36:	4b05      	ldr	r3, [pc, #20]	; (4c4c <qspi_dma_init+0x28>)
    4c38:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    4c3a:	4621      	mov	r1, r4
    4c3c:	4628      	mov	r0, r5
    4c3e:	4b04      	ldr	r3, [pc, #16]	; (4c50 <qspi_dma_init+0x2c>)
    4c40:	4798      	blx	r3
}
    4c42:	bd38      	pop	{r3, r4, r5, pc}
    4c44:	2000      	movs	r0, #0
    4c46:	e7f4      	b.n	4c32 <qspi_dma_init+0xe>
    4c48:	0000daac 	.word	0x0000daac
    4c4c:	00005dad 	.word	0x00005dad
    4c50:	000069cd 	.word	0x000069cd

00004c54 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c56:	460f      	mov	r7, r1
    4c58:	4616      	mov	r6, r2
	ASSERT(io);
    4c5a:	4604      	mov	r4, r0
    4c5c:	f240 1227 	movw	r2, #295	; 0x127
    4c60:	4909      	ldr	r1, [pc, #36]	; (4c88 <_spi_m_async_io_write+0x34>)
    4c62:	3000      	adds	r0, #0
    4c64:	bf18      	it	ne
    4c66:	2001      	movne	r0, #1
    4c68:	4b08      	ldr	r3, [pc, #32]	; (4c8c <_spi_m_async_io_write+0x38>)
    4c6a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4c6c:	2500      	movs	r5, #0
    4c6e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4c70:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4c72:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4c74:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4c76:	2310      	movs	r3, #16
    4c78:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    4c7a:	2101      	movs	r1, #1
    4c7c:	f1a4 0020 	sub.w	r0, r4, #32
    4c80:	4b03      	ldr	r3, [pc, #12]	; (4c90 <_spi_m_async_io_write+0x3c>)
    4c82:	4798      	blx	r3

	return ERR_NONE;
}
    4c84:	4628      	mov	r0, r5
    4c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c88:	0000dac8 	.word	0x0000dac8
    4c8c:	00005dad 	.word	0x00005dad
    4c90:	00007bad 	.word	0x00007bad

00004c94 <_spi_m_async_io_read>:
{
    4c94:	b570      	push	{r4, r5, r6, lr}
    4c96:	460d      	mov	r5, r1
    4c98:	4616      	mov	r6, r2
	ASSERT(io);
    4c9a:	4604      	mov	r4, r0
    4c9c:	f240 1205 	movw	r2, #261	; 0x105
    4ca0:	490c      	ldr	r1, [pc, #48]	; (4cd4 <_spi_m_async_io_read+0x40>)
    4ca2:	3000      	adds	r0, #0
    4ca4:	bf18      	it	ne
    4ca6:	2001      	movne	r0, #1
    4ca8:	4b0b      	ldr	r3, [pc, #44]	; (4cd8 <_spi_m_async_io_read+0x44>)
    4caa:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4cac:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    4cae:	2500      	movs	r5, #0
    4cb0:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4cb2:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4cb4:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4cb6:	2310      	movs	r3, #16
    4cb8:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4cba:	3c20      	subs	r4, #32
    4cbc:	2101      	movs	r1, #1
    4cbe:	4620      	mov	r0, r4
    4cc0:	4b06      	ldr	r3, [pc, #24]	; (4cdc <_spi_m_async_io_read+0x48>)
    4cc2:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4cc4:	f240 11ff 	movw	r1, #511	; 0x1ff
    4cc8:	4620      	mov	r0, r4
    4cca:	4b05      	ldr	r3, [pc, #20]	; (4ce0 <_spi_m_async_io_read+0x4c>)
    4ccc:	4798      	blx	r3
}
    4cce:	4628      	mov	r0, r5
    4cd0:	bd70      	pop	{r4, r5, r6, pc}
    4cd2:	bf00      	nop
    4cd4:	0000dac8 	.word	0x0000dac8
    4cd8:	00005dad 	.word	0x00005dad
    4cdc:	00007be1 	.word	0x00007be1
    4ce0:	00007c5d 	.word	0x00007c5d

00004ce4 <_spi_dev_error>:
{
    4ce4:	b570      	push	{r4, r5, r6, lr}
    4ce6:	4604      	mov	r4, r0
    4ce8:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4cea:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4cec:	2100      	movs	r1, #0
    4cee:	4b09      	ldr	r3, [pc, #36]	; (4d14 <_spi_dev_error+0x30>)
    4cf0:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4cf2:	2100      	movs	r1, #0
    4cf4:	4620      	mov	r0, r4
    4cf6:	4b08      	ldr	r3, [pc, #32]	; (4d18 <_spi_dev_error+0x34>)
    4cf8:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4cfa:	2100      	movs	r1, #0
    4cfc:	4620      	mov	r0, r4
    4cfe:	4b07      	ldr	r3, [pc, #28]	; (4d1c <_spi_dev_error+0x38>)
    4d00:	4798      	blx	r3
	spi->stat = 0;
    4d02:	2300      	movs	r3, #0
    4d04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4d0a:	b113      	cbz	r3, 4d12 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4d0c:	4631      	mov	r1, r6
    4d0e:	4628      	mov	r0, r5
    4d10:	4798      	blx	r3
    4d12:	bd70      	pop	{r4, r5, r6, pc}
    4d14:	00007bad 	.word	0x00007bad
    4d18:	00007be1 	.word	0x00007be1
    4d1c:	00007c21 	.word	0x00007c21

00004d20 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4d20:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4d22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4d24:	429a      	cmp	r2, r3
    4d26:	d200      	bcs.n	4d2a <_spi_dev_complete+0xa>
    4d28:	4770      	bx	lr
{
    4d2a:	b510      	push	{r4, lr}
    4d2c:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4d2e:	2100      	movs	r1, #0
    4d30:	4b04      	ldr	r3, [pc, #16]	; (4d44 <_spi_dev_complete+0x24>)
    4d32:	4798      	blx	r3
		spi->stat = 0;
    4d34:	2300      	movs	r3, #0
    4d36:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4d3c:	b10b      	cbz	r3, 4d42 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4d3e:	1f20      	subs	r0, r4, #4
    4d40:	4798      	blx	r3
    4d42:	bd10      	pop	{r4, pc}
    4d44:	00007c21 	.word	0x00007c21

00004d48 <_spi_dev_tx>:
{
    4d48:	b510      	push	{r4, lr}
    4d4a:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4d4c:	7903      	ldrb	r3, [r0, #4]
    4d4e:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4d50:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4d52:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4d54:	f103 0101 	add.w	r1, r3, #1
    4d58:	6401      	str	r1, [r0, #64]	; 0x40
    4d5a:	bf94      	ite	ls
    4d5c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4d5e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4d62:	4b08      	ldr	r3, [pc, #32]	; (4d84 <_spi_dev_tx+0x3c>)
    4d64:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4d66:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4d6a:	429a      	cmp	r2, r3
    4d6c:	d000      	beq.n	4d70 <_spi_dev_tx+0x28>
    4d6e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4d70:	2100      	movs	r1, #0
    4d72:	4620      	mov	r0, r4
    4d74:	4b04      	ldr	r3, [pc, #16]	; (4d88 <_spi_dev_tx+0x40>)
    4d76:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4d78:	2101      	movs	r1, #1
    4d7a:	4620      	mov	r0, r4
    4d7c:	4b03      	ldr	r3, [pc, #12]	; (4d8c <_spi_dev_tx+0x44>)
    4d7e:	4798      	blx	r3
}
    4d80:	e7f5      	b.n	4d6e <_spi_dev_tx+0x26>
    4d82:	bf00      	nop
    4d84:	00007c5d 	.word	0x00007c5d
    4d88:	00007bad 	.word	0x00007bad
    4d8c:	00007c21 	.word	0x00007c21

00004d90 <_spi_dev_rx>:
{
    4d90:	b570      	push	{r4, r5, r6, lr}
    4d92:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4d94:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4d96:	b305      	cbz	r5, 4dda <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4d98:	7903      	ldrb	r3, [r0, #4]
    4d9a:	2b01      	cmp	r3, #1
    4d9c:	d916      	bls.n	4dcc <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4d9e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4da0:	1c73      	adds	r3, r6, #1
    4da2:	6403      	str	r3, [r0, #64]	; 0x40
    4da4:	4b18      	ldr	r3, [pc, #96]	; (4e08 <_spi_dev_rx+0x78>)
    4da6:	4798      	blx	r3
    4da8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4dae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4db0:	4293      	cmp	r3, r2
    4db2:	d21d      	bcs.n	4df0 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4db4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4db6:	b1b2      	cbz	r2, 4de6 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4db8:	7921      	ldrb	r1, [r4, #4]
    4dba:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4dbc:	bf94      	ite	ls
    4dbe:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4dc0:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4dc4:	4620      	mov	r0, r4
    4dc6:	4b11      	ldr	r3, [pc, #68]	; (4e0c <_spi_dev_rx+0x7c>)
    4dc8:	4798      	blx	r3
    4dca:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4dcc:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4dce:	1c73      	adds	r3, r6, #1
    4dd0:	6403      	str	r3, [r0, #64]	; 0x40
    4dd2:	4b0d      	ldr	r3, [pc, #52]	; (4e08 <_spi_dev_rx+0x78>)
    4dd4:	4798      	blx	r3
    4dd6:	55a8      	strb	r0, [r5, r6]
    4dd8:	e7e8      	b.n	4dac <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4dda:	4b0b      	ldr	r3, [pc, #44]	; (4e08 <_spi_dev_rx+0x78>)
    4ddc:	4798      	blx	r3
		spi->xfercnt++;
    4dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4de0:	3301      	adds	r3, #1
    4de2:	6423      	str	r3, [r4, #64]	; 0x40
    4de4:	e7e2      	b.n	4dac <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4de6:	88e1      	ldrh	r1, [r4, #6]
    4de8:	4620      	mov	r0, r4
    4dea:	4b08      	ldr	r3, [pc, #32]	; (4e0c <_spi_dev_rx+0x7c>)
    4dec:	4798      	blx	r3
    4dee:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4df0:	2100      	movs	r1, #0
    4df2:	4620      	mov	r0, r4
    4df4:	4b06      	ldr	r3, [pc, #24]	; (4e10 <_spi_dev_rx+0x80>)
    4df6:	4798      	blx	r3
		spi->stat = 0;
    4df8:	2300      	movs	r3, #0
    4dfa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4e00:	b10b      	cbz	r3, 4e06 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4e02:	1f20      	subs	r0, r4, #4
    4e04:	4798      	blx	r3
    4e06:	bd70      	pop	{r4, r5, r6, pc}
    4e08:	00007c8d 	.word	0x00007c8d
    4e0c:	00007c5d 	.word	0x00007c5d
    4e10:	00007be1 	.word	0x00007be1

00004e14 <spi_m_async_init>:
{
    4e14:	b570      	push	{r4, r5, r6, lr}
    4e16:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4e18:	4606      	mov	r6, r0
    4e1a:	b330      	cbz	r0, 4e6a <spi_m_async_init+0x56>
    4e1c:	1c08      	adds	r0, r1, #0
    4e1e:	bf18      	it	ne
    4e20:	2001      	movne	r0, #1
    4e22:	22a5      	movs	r2, #165	; 0xa5
    4e24:	4912      	ldr	r1, [pc, #72]	; (4e70 <spi_m_async_init+0x5c>)
    4e26:	4b13      	ldr	r3, [pc, #76]	; (4e74 <spi_m_async_init+0x60>)
    4e28:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4e2a:	4634      	mov	r4, r6
    4e2c:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4e30:	4629      	mov	r1, r5
    4e32:	4620      	mov	r0, r4
    4e34:	4b10      	ldr	r3, [pc, #64]	; (4e78 <spi_m_async_init+0x64>)
    4e36:	4798      	blx	r3
	if (rc >= 0) {
    4e38:	2800      	cmp	r0, #0
    4e3a:	db15      	blt.n	4e68 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4e3c:	4a0f      	ldr	r2, [pc, #60]	; (4e7c <spi_m_async_init+0x68>)
    4e3e:	2100      	movs	r1, #0
    4e40:	4620      	mov	r0, r4
    4e42:	4d0f      	ldr	r5, [pc, #60]	; (4e80 <spi_m_async_init+0x6c>)
    4e44:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4e46:	4a0f      	ldr	r2, [pc, #60]	; (4e84 <spi_m_async_init+0x70>)
    4e48:	2101      	movs	r1, #1
    4e4a:	4620      	mov	r0, r4
    4e4c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4e4e:	4a0e      	ldr	r2, [pc, #56]	; (4e88 <spi_m_async_init+0x74>)
    4e50:	2102      	movs	r1, #2
    4e52:	4620      	mov	r0, r4
    4e54:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4e56:	4a0d      	ldr	r2, [pc, #52]	; (4e8c <spi_m_async_init+0x78>)
    4e58:	2103      	movs	r1, #3
    4e5a:	4620      	mov	r0, r4
    4e5c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4e5e:	4b0c      	ldr	r3, [pc, #48]	; (4e90 <spi_m_async_init+0x7c>)
    4e60:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4e62:	4b0c      	ldr	r3, [pc, #48]	; (4e94 <spi_m_async_init+0x80>)
    4e64:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4e66:	2000      	movs	r0, #0
}
    4e68:	bd70      	pop	{r4, r5, r6, pc}
    4e6a:	2000      	movs	r0, #0
    4e6c:	e7d9      	b.n	4e22 <spi_m_async_init+0xe>
    4e6e:	bf00      	nop
    4e70:	0000dac8 	.word	0x0000dac8
    4e74:	00005dad 	.word	0x00005dad
    4e78:	00007aa5 	.word	0x00007aa5
    4e7c:	00004d49 	.word	0x00004d49
    4e80:	00007cb9 	.word	0x00007cb9
    4e84:	00004d91 	.word	0x00004d91
    4e88:	00004d21 	.word	0x00004d21
    4e8c:	00004ce5 	.word	0x00004ce5
    4e90:	00004c95 	.word	0x00004c95
    4e94:	00004c55 	.word	0x00004c55

00004e98 <spi_m_async_enable>:
{
    4e98:	b510      	push	{r4, lr}
	ASSERT(spi);
    4e9a:	4604      	mov	r4, r0
    4e9c:	22c1      	movs	r2, #193	; 0xc1
    4e9e:	4905      	ldr	r1, [pc, #20]	; (4eb4 <spi_m_async_enable+0x1c>)
    4ea0:	3000      	adds	r0, #0
    4ea2:	bf18      	it	ne
    4ea4:	2001      	movne	r0, #1
    4ea6:	4b04      	ldr	r3, [pc, #16]	; (4eb8 <spi_m_async_enable+0x20>)
    4ea8:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4eaa:	1d20      	adds	r0, r4, #4
    4eac:	4b03      	ldr	r3, [pc, #12]	; (4ebc <spi_m_async_enable+0x24>)
    4eae:	4798      	blx	r3
    4eb0:	bd10      	pop	{r4, pc}
    4eb2:	bf00      	nop
    4eb4:	0000dac8 	.word	0x0000dac8
    4eb8:	00005dad 	.word	0x00005dad
    4ebc:	00007b0d 	.word	0x00007b0d

00004ec0 <spi_m_async_set_baudrate>:
{
    4ec0:	b538      	push	{r3, r4, r5, lr}
    4ec2:	460d      	mov	r5, r1
	ASSERT(spi);
    4ec4:	4604      	mov	r4, r0
    4ec6:	22cf      	movs	r2, #207	; 0xcf
    4ec8:	4909      	ldr	r1, [pc, #36]	; (4ef0 <spi_m_async_set_baudrate+0x30>)
    4eca:	3000      	adds	r0, #0
    4ecc:	bf18      	it	ne
    4ece:	2001      	movne	r0, #1
    4ed0:	4b08      	ldr	r3, [pc, #32]	; (4ef4 <spi_m_async_set_baudrate+0x34>)
    4ed2:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4ed4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4ed8:	f013 0f10 	tst.w	r3, #16
    4edc:	d104      	bne.n	4ee8 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4ede:	4629      	mov	r1, r5
    4ee0:	1d20      	adds	r0, r4, #4
    4ee2:	4b05      	ldr	r3, [pc, #20]	; (4ef8 <spi_m_async_set_baudrate+0x38>)
    4ee4:	4798      	blx	r3
    4ee6:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4ee8:	f06f 0003 	mvn.w	r0, #3
}
    4eec:	bd38      	pop	{r3, r4, r5, pc}
    4eee:	bf00      	nop
    4ef0:	0000dac8 	.word	0x0000dac8
    4ef4:	00005dad 	.word	0x00005dad
    4ef8:	00007b71 	.word	0x00007b71

00004efc <spi_m_async_set_mode>:
{
    4efc:	b538      	push	{r3, r4, r5, lr}
    4efe:	460d      	mov	r5, r1
	ASSERT(spi);
    4f00:	4604      	mov	r4, r0
    4f02:	22d9      	movs	r2, #217	; 0xd9
    4f04:	4909      	ldr	r1, [pc, #36]	; (4f2c <spi_m_async_set_mode+0x30>)
    4f06:	3000      	adds	r0, #0
    4f08:	bf18      	it	ne
    4f0a:	2001      	movne	r0, #1
    4f0c:	4b08      	ldr	r3, [pc, #32]	; (4f30 <spi_m_async_set_mode+0x34>)
    4f0e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4f10:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4f14:	f013 0f10 	tst.w	r3, #16
    4f18:	d104      	bne.n	4f24 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4f1a:	4629      	mov	r1, r5
    4f1c:	1d20      	adds	r0, r4, #4
    4f1e:	4b05      	ldr	r3, [pc, #20]	; (4f34 <spi_m_async_set_mode+0x38>)
    4f20:	4798      	blx	r3
    4f22:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4f24:	f06f 0003 	mvn.w	r0, #3
}
    4f28:	bd38      	pop	{r3, r4, r5, pc}
    4f2a:	bf00      	nop
    4f2c:	0000dac8 	.word	0x0000dac8
    4f30:	00005dad 	.word	0x00005dad
    4f34:	00007b3d 	.word	0x00007b3d

00004f38 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f3a:	460d      	mov	r5, r1
    4f3c:	4617      	mov	r7, r2
    4f3e:	461e      	mov	r6, r3
	ASSERT(spi);
    4f40:	4604      	mov	r4, r0
    4f42:	f44f 729c 	mov.w	r2, #312	; 0x138
    4f46:	4912      	ldr	r1, [pc, #72]	; (4f90 <spi_m_async_transfer+0x58>)
    4f48:	3000      	adds	r0, #0
    4f4a:	bf18      	it	ne
    4f4c:	2001      	movne	r0, #1
    4f4e:	4b11      	ldr	r3, [pc, #68]	; (4f94 <spi_m_async_transfer+0x5c>)
    4f50:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4f52:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4f54:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    4f56:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    4f58:	2300      	movs	r3, #0
    4f5a:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4f5c:	2310      	movs	r3, #16
    4f5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4f62:	1d26      	adds	r6, r4, #4
    4f64:	2101      	movs	r1, #1
    4f66:	4630      	mov	r0, r6
    4f68:	4b0b      	ldr	r3, [pc, #44]	; (4f98 <spi_m_async_transfer+0x60>)
    4f6a:	4798      	blx	r3
	if (txbuf) {
    4f6c:	b15d      	cbz	r5, 4f86 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4f6e:	7a23      	ldrb	r3, [r4, #8]
    4f70:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4f74:	bf94      	ite	ls
    4f76:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    4f78:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4f7c:	4630      	mov	r0, r6
    4f7e:	4b07      	ldr	r3, [pc, #28]	; (4f9c <spi_m_async_transfer+0x64>)
    4f80:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4f82:	2000      	movs	r0, #0
    4f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    4f86:	8961      	ldrh	r1, [r4, #10]
    4f88:	4630      	mov	r0, r6
    4f8a:	4b04      	ldr	r3, [pc, #16]	; (4f9c <spi_m_async_transfer+0x64>)
    4f8c:	4798      	blx	r3
    4f8e:	e7f8      	b.n	4f82 <spi_m_async_transfer+0x4a>
    4f90:	0000dac8 	.word	0x0000dac8
    4f94:	00005dad 	.word	0x00005dad
    4f98:	00007be1 	.word	0x00007be1
    4f9c:	00007c5d 	.word	0x00007c5d

00004fa0 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4fa0:	b570      	push	{r4, r5, r6, lr}
    4fa2:	460c      	mov	r4, r1
    4fa4:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4fa6:	4605      	mov	r5, r0
    4fa8:	b158      	cbz	r0, 4fc2 <spi_m_async_register_callback+0x22>
    4faa:	2901      	cmp	r1, #1
    4fac:	bf8c      	ite	hi
    4fae:	2000      	movhi	r0, #0
    4fb0:	2001      	movls	r0, #1
    4fb2:	f240 1263 	movw	r2, #355	; 0x163
    4fb6:	4908      	ldr	r1, [pc, #32]	; (4fd8 <spi_m_async_register_callback+0x38>)
    4fb8:	4b08      	ldr	r3, [pc, #32]	; (4fdc <spi_m_async_register_callback+0x3c>)
    4fba:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4fbc:	b91c      	cbnz	r4, 4fc6 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4fbe:	632e      	str	r6, [r5, #48]	; 0x30
    4fc0:	bd70      	pop	{r4, r5, r6, pc}
    4fc2:	2000      	movs	r0, #0
    4fc4:	e7f5      	b.n	4fb2 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4fc6:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4fc8:	1c32      	adds	r2, r6, #0
    4fca:	bf18      	it	ne
    4fcc:	2201      	movne	r2, #1
    4fce:	2103      	movs	r1, #3
    4fd0:	1d28      	adds	r0, r5, #4
    4fd2:	4b03      	ldr	r3, [pc, #12]	; (4fe0 <spi_m_async_register_callback+0x40>)
    4fd4:	4798      	blx	r3
    4fd6:	bd70      	pop	{r4, r5, r6, pc}
    4fd8:	0000dac8 	.word	0x0000dac8
    4fdc:	00005dad 	.word	0x00005dad
    4fe0:	00007ced 	.word	0x00007ced

00004fe4 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4fe4:	b538      	push	{r3, r4, r5, lr}
    4fe6:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4fe8:	4604      	mov	r4, r0
    4fea:	b158      	cbz	r0, 5004 <spi_m_async_get_io_descriptor+0x20>
    4fec:	1c08      	adds	r0, r1, #0
    4fee:	bf18      	it	ne
    4ff0:	2001      	movne	r0, #1
    4ff2:	f240 126f 	movw	r2, #367	; 0x16f
    4ff6:	4904      	ldr	r1, [pc, #16]	; (5008 <spi_m_async_get_io_descriptor+0x24>)
    4ff8:	4b04      	ldr	r3, [pc, #16]	; (500c <spi_m_async_get_io_descriptor+0x28>)
    4ffa:	4798      	blx	r3
	*io = &spi->io;
    4ffc:	3424      	adds	r4, #36	; 0x24
    4ffe:	602c      	str	r4, [r5, #0]
	return 0;
}
    5000:	2000      	movs	r0, #0
    5002:	bd38      	pop	{r3, r4, r5, pc}
    5004:	2000      	movs	r0, #0
    5006:	e7f4      	b.n	4ff2 <spi_m_async_get_io_descriptor+0xe>
    5008:	0000dac8 	.word	0x0000dac8
    500c:	00005dad 	.word	0x00005dad

00005010 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5010:	b570      	push	{r4, r5, r6, lr}
    5012:	460d      	mov	r5, r1
    5014:	4616      	mov	r6, r2
	ASSERT(io);
    5016:	4604      	mov	r4, r0
    5018:	2298      	movs	r2, #152	; 0x98
    501a:	4907      	ldr	r1, [pc, #28]	; (5038 <_spi_m_dma_io_write+0x28>)
    501c:	3000      	adds	r0, #0
    501e:	bf18      	it	ne
    5020:	2001      	movne	r0, #1
    5022:	4b06      	ldr	r3, [pc, #24]	; (503c <_spi_m_dma_io_write+0x2c>)
    5024:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    5026:	4633      	mov	r3, r6
    5028:	2200      	movs	r2, #0
    502a:	4629      	mov	r1, r5
    502c:	f1a4 001c 	sub.w	r0, r4, #28
    5030:	4c03      	ldr	r4, [pc, #12]	; (5040 <_spi_m_dma_io_write+0x30>)
    5032:	47a0      	blx	r4
}
    5034:	bd70      	pop	{r4, r5, r6, pc}
    5036:	bf00      	nop
    5038:	0000dae8 	.word	0x0000dae8
    503c:	00005dad 	.word	0x00005dad
    5040:	00007f41 	.word	0x00007f41

00005044 <_spi_m_dma_io_read>:
{
    5044:	b570      	push	{r4, r5, r6, lr}
    5046:	460d      	mov	r5, r1
    5048:	4616      	mov	r6, r2
	ASSERT(io);
    504a:	4604      	mov	r4, r0
    504c:	2281      	movs	r2, #129	; 0x81
    504e:	4907      	ldr	r1, [pc, #28]	; (506c <_spi_m_dma_io_read+0x28>)
    5050:	3000      	adds	r0, #0
    5052:	bf18      	it	ne
    5054:	2001      	movne	r0, #1
    5056:	4b06      	ldr	r3, [pc, #24]	; (5070 <_spi_m_dma_io_read+0x2c>)
    5058:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    505a:	4633      	mov	r3, r6
    505c:	462a      	mov	r2, r5
    505e:	2100      	movs	r1, #0
    5060:	f1a4 001c 	sub.w	r0, r4, #28
    5064:	4c03      	ldr	r4, [pc, #12]	; (5074 <_spi_m_dma_io_read+0x30>)
    5066:	47a0      	blx	r4
}
    5068:	bd70      	pop	{r4, r5, r6, pc}
    506a:	bf00      	nop
    506c:	0000dae8 	.word	0x0000dae8
    5070:	00005dad 	.word	0x00005dad
    5074:	00007f41 	.word	0x00007f41

00005078 <spi_m_dma_init>:
{
    5078:	b538      	push	{r3, r4, r5, lr}
    507a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    507c:	4605      	mov	r5, r0
    507e:	b1a0      	cbz	r0, 50aa <spi_m_dma_init+0x32>
    5080:	1c08      	adds	r0, r1, #0
    5082:	bf18      	it	ne
    5084:	2001      	movne	r0, #1
    5086:	223b      	movs	r2, #59	; 0x3b
    5088:	4909      	ldr	r1, [pc, #36]	; (50b0 <spi_m_dma_init+0x38>)
    508a:	4b0a      	ldr	r3, [pc, #40]	; (50b4 <spi_m_dma_init+0x3c>)
    508c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    508e:	4628      	mov	r0, r5
    5090:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5094:	4621      	mov	r1, r4
    5096:	4b08      	ldr	r3, [pc, #32]	; (50b8 <spi_m_dma_init+0x40>)
    5098:	4798      	blx	r3
	if (rc) {
    509a:	4603      	mov	r3, r0
    509c:	b918      	cbnz	r0, 50a6 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    509e:	4a07      	ldr	r2, [pc, #28]	; (50bc <spi_m_dma_init+0x44>)
    50a0:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    50a2:	4a07      	ldr	r2, [pc, #28]	; (50c0 <spi_m_dma_init+0x48>)
    50a4:	622a      	str	r2, [r5, #32]
}
    50a6:	4618      	mov	r0, r3
    50a8:	bd38      	pop	{r3, r4, r5, pc}
    50aa:	2000      	movs	r0, #0
    50ac:	e7eb      	b.n	5086 <spi_m_dma_init+0xe>
    50ae:	bf00      	nop
    50b0:	0000dae8 	.word	0x0000dae8
    50b4:	00005dad 	.word	0x00005dad
    50b8:	00007d25 	.word	0x00007d25
    50bc:	00005045 	.word	0x00005045
    50c0:	00005011 	.word	0x00005011

000050c4 <spi_m_dma_enable>:
{
    50c4:	b510      	push	{r4, lr}
	ASSERT(spi);
    50c6:	4604      	mov	r4, r0
    50c8:	2251      	movs	r2, #81	; 0x51
    50ca:	4905      	ldr	r1, [pc, #20]	; (50e0 <spi_m_dma_enable+0x1c>)
    50cc:	3000      	adds	r0, #0
    50ce:	bf18      	it	ne
    50d0:	2001      	movne	r0, #1
    50d2:	4b04      	ldr	r3, [pc, #16]	; (50e4 <spi_m_dma_enable+0x20>)
    50d4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    50d6:	1d20      	adds	r0, r4, #4
    50d8:	4b03      	ldr	r3, [pc, #12]	; (50e8 <spi_m_dma_enable+0x24>)
    50da:	4798      	blx	r3
    50dc:	bd10      	pop	{r4, pc}
    50de:	bf00      	nop
    50e0:	0000dae8 	.word	0x0000dae8
    50e4:	00005dad 	.word	0x00005dad
    50e8:	00007ea1 	.word	0x00007ea1

000050ec <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    50ec:	b570      	push	{r4, r5, r6, lr}
    50ee:	460d      	mov	r5, r1
    50f0:	4616      	mov	r6, r2
	ASSERT(spi);
    50f2:	4604      	mov	r4, r0
    50f4:	22a8      	movs	r2, #168	; 0xa8
    50f6:	4906      	ldr	r1, [pc, #24]	; (5110 <spi_m_dma_register_callback+0x24>)
    50f8:	3000      	adds	r0, #0
    50fa:	bf18      	it	ne
    50fc:	2001      	movne	r0, #1
    50fe:	4b05      	ldr	r3, [pc, #20]	; (5114 <spi_m_dma_register_callback+0x28>)
    5100:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    5102:	4632      	mov	r2, r6
    5104:	4629      	mov	r1, r5
    5106:	1d20      	adds	r0, r4, #4
    5108:	4b03      	ldr	r3, [pc, #12]	; (5118 <spi_m_dma_register_callback+0x2c>)
    510a:	4798      	blx	r3
    510c:	bd70      	pop	{r4, r5, r6, pc}
    510e:	bf00      	nop
    5110:	0000dae8 	.word	0x0000dae8
    5114:	00005dad 	.word	0x00005dad
    5118:	00007ed1 	.word	0x00007ed1

0000511c <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    511c:	b538      	push	{r3, r4, r5, lr}
    511e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    5120:	4604      	mov	r4, r0
    5122:	b150      	cbz	r0, 513a <spi_m_dma_get_io_descriptor+0x1e>
    5124:	1c08      	adds	r0, r1, #0
    5126:	bf18      	it	ne
    5128:	2001      	movne	r0, #1
    512a:	22ae      	movs	r2, #174	; 0xae
    512c:	4904      	ldr	r1, [pc, #16]	; (5140 <spi_m_dma_get_io_descriptor+0x24>)
    512e:	4b05      	ldr	r3, [pc, #20]	; (5144 <spi_m_dma_get_io_descriptor+0x28>)
    5130:	4798      	blx	r3
	*io = &spi->io;
    5132:	3420      	adds	r4, #32
    5134:	602c      	str	r4, [r5, #0]

	return 0;
}
    5136:	2000      	movs	r0, #0
    5138:	bd38      	pop	{r3, r4, r5, pc}
    513a:	2000      	movs	r0, #0
    513c:	e7f5      	b.n	512a <spi_m_dma_get_io_descriptor+0xe>
    513e:	bf00      	nop
    5140:	0000dae8 	.word	0x0000dae8
    5144:	00005dad 	.word	0x00005dad

00005148 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    514a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    514c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    514e:	b12f      	cbz	r7, 515c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    5150:	688d      	ldr	r5, [r1, #8]
    5152:	463c      	mov	r4, r7
    5154:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5156:	f1c2 0e01 	rsb	lr, r2, #1
    515a:	e00b      	b.n	5174 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    515c:	4b0e      	ldr	r3, [pc, #56]	; (5198 <timer_add_timer_task+0x50>)
    515e:	4798      	blx	r3
		return;
    5160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5162:	4473      	add	r3, lr
    5164:	68a0      	ldr	r0, [r4, #8]
    5166:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    5168:	42ab      	cmp	r3, r5
    516a:	d20a      	bcs.n	5182 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    516c:	6823      	ldr	r3, [r4, #0]
    516e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5170:	b153      	cbz	r3, 5188 <timer_add_timer_task+0x40>
    5172:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5174:	6863      	ldr	r3, [r4, #4]
    5176:	4293      	cmp	r3, r2
    5178:	d8f3      	bhi.n	5162 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    517a:	68a0      	ldr	r0, [r4, #8]
    517c:	4403      	add	r3, r0
    517e:	1a9b      	subs	r3, r3, r2
    5180:	e7f2      	b.n	5168 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    5182:	42a7      	cmp	r7, r4
    5184:	d004      	beq.n	5190 <timer_add_timer_task+0x48>
    5186:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    5188:	4620      	mov	r0, r4
    518a:	4b04      	ldr	r3, [pc, #16]	; (519c <timer_add_timer_task+0x54>)
    518c:	4798      	blx	r3
    518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    5190:	4660      	mov	r0, ip
    5192:	4b01      	ldr	r3, [pc, #4]	; (5198 <timer_add_timer_task+0x50>)
    5194:	4798      	blx	r3
    5196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5198:	00005dd5 	.word	0x00005dd5
    519c:	00005e01 	.word	0x00005e01

000051a0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    51a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    51a4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    51a6:	6907      	ldr	r7, [r0, #16]
    51a8:	3701      	adds	r7, #1
    51aa:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    51ac:	7e03      	ldrb	r3, [r0, #24]
    51ae:	f013 0f01 	tst.w	r3, #1
    51b2:	d113      	bne.n	51dc <timer_process_counted+0x3c>
    51b4:	7e03      	ldrb	r3, [r0, #24]
    51b6:	f013 0f02 	tst.w	r3, #2
    51ba:	d10f      	bne.n	51dc <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    51bc:	b354      	cbz	r4, 5214 <timer_process_counted+0x74>
    51be:	6863      	ldr	r3, [r4, #4]
    51c0:	1afb      	subs	r3, r7, r3
    51c2:	68a2      	ldr	r2, [r4, #8]
    51c4:	4293      	cmp	r3, r2
    51c6:	d307      	bcc.n	51d8 <timer_process_counted+0x38>
    51c8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    51ca:	f100 0814 	add.w	r8, r0, #20
    51ce:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5218 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    51d2:	f8df a048 	ldr.w	sl, [pc, #72]	; 521c <timer_process_counted+0x7c>
    51d6:	e012      	b.n	51fe <timer_process_counted+0x5e>
    51d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    51dc:	7e03      	ldrb	r3, [r0, #24]
    51de:	f043 0302 	orr.w	r3, r3, #2
    51e2:	7603      	strb	r3, [r0, #24]
		return;
    51e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51e8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    51ea:	68e3      	ldr	r3, [r4, #12]
    51ec:	4620      	mov	r0, r4
    51ee:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    51f0:	b185      	cbz	r5, 5214 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    51f2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    51f4:	686b      	ldr	r3, [r5, #4]
    51f6:	1afb      	subs	r3, r7, r3
    51f8:	68aa      	ldr	r2, [r5, #8]
    51fa:	4293      	cmp	r3, r2
    51fc:	d30a      	bcc.n	5214 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    51fe:	4640      	mov	r0, r8
    5200:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5202:	7c23      	ldrb	r3, [r4, #16]
    5204:	2b01      	cmp	r3, #1
    5206:	d1ef      	bne.n	51e8 <timer_process_counted+0x48>
			tmp->time_label = time;
    5208:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    520a:	463a      	mov	r2, r7
    520c:	4621      	mov	r1, r4
    520e:	4640      	mov	r0, r8
    5210:	47d0      	blx	sl
    5212:	e7e9      	b.n	51e8 <timer_process_counted+0x48>
    5214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5218:	00005e49 	.word	0x00005e49
    521c:	00005149 	.word	0x00005149

00005220 <timer_init>:
{
    5220:	b570      	push	{r4, r5, r6, lr}
    5222:	460e      	mov	r6, r1
    5224:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    5226:	4604      	mov	r4, r0
    5228:	b190      	cbz	r0, 5250 <timer_init+0x30>
    522a:	b199      	cbz	r1, 5254 <timer_init+0x34>
    522c:	1c10      	adds	r0, r2, #0
    522e:	bf18      	it	ne
    5230:	2001      	movne	r0, #1
    5232:	223b      	movs	r2, #59	; 0x3b
    5234:	4908      	ldr	r1, [pc, #32]	; (5258 <timer_init+0x38>)
    5236:	4b09      	ldr	r3, [pc, #36]	; (525c <timer_init+0x3c>)
    5238:	4798      	blx	r3
	descr->func = func;
    523a:	4620      	mov	r0, r4
    523c:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    5240:	682b      	ldr	r3, [r5, #0]
    5242:	4631      	mov	r1, r6
    5244:	4798      	blx	r3
	descr->time                           = 0;
    5246:	2000      	movs	r0, #0
    5248:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    524a:	4b05      	ldr	r3, [pc, #20]	; (5260 <timer_init+0x40>)
    524c:	6063      	str	r3, [r4, #4]
}
    524e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    5250:	2000      	movs	r0, #0
    5252:	e7ee      	b.n	5232 <timer_init+0x12>
    5254:	2000      	movs	r0, #0
    5256:	e7ec      	b.n	5232 <timer_init+0x12>
    5258:	0000db04 	.word	0x0000db04
    525c:	00005dad 	.word	0x00005dad
    5260:	000051a1 	.word	0x000051a1

00005264 <timer_start>:
{
    5264:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    5266:	4604      	mov	r4, r0
    5268:	b198      	cbz	r0, 5292 <timer_start+0x2e>
    526a:	6800      	ldr	r0, [r0, #0]
    526c:	3000      	adds	r0, #0
    526e:	bf18      	it	ne
    5270:	2001      	movne	r0, #1
    5272:	2254      	movs	r2, #84	; 0x54
    5274:	4909      	ldr	r1, [pc, #36]	; (529c <timer_start+0x38>)
    5276:	4b0a      	ldr	r3, [pc, #40]	; (52a0 <timer_start+0x3c>)
    5278:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    527a:	1d25      	adds	r5, r4, #4
    527c:	6823      	ldr	r3, [r4, #0]
    527e:	699b      	ldr	r3, [r3, #24]
    5280:	4628      	mov	r0, r5
    5282:	4798      	blx	r3
    5284:	b938      	cbnz	r0, 5296 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    5286:	6823      	ldr	r3, [r4, #0]
    5288:	689b      	ldr	r3, [r3, #8]
    528a:	4628      	mov	r0, r5
    528c:	4798      	blx	r3
	return ERR_NONE;
    528e:	2000      	movs	r0, #0
    5290:	bd38      	pop	{r3, r4, r5, pc}
    5292:	2000      	movs	r0, #0
    5294:	e7ed      	b.n	5272 <timer_start+0xe>
		return ERR_DENIED;
    5296:	f06f 0010 	mvn.w	r0, #16
}
    529a:	bd38      	pop	{r3, r4, r5, pc}
    529c:	0000db04 	.word	0x0000db04
    52a0:	00005dad 	.word	0x00005dad

000052a4 <timer_add_task>:
{
    52a4:	b570      	push	{r4, r5, r6, lr}
    52a6:	b082      	sub	sp, #8
    52a8:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    52aa:	4604      	mov	r4, r0
    52ac:	b328      	cbz	r0, 52fa <timer_add_task+0x56>
    52ae:	b331      	cbz	r1, 52fe <timer_add_task+0x5a>
    52b0:	6800      	ldr	r0, [r0, #0]
    52b2:	3000      	adds	r0, #0
    52b4:	bf18      	it	ne
    52b6:	2001      	movne	r0, #1
    52b8:	227b      	movs	r2, #123	; 0x7b
    52ba:	4920      	ldr	r1, [pc, #128]	; (533c <timer_add_task+0x98>)
    52bc:	4b20      	ldr	r3, [pc, #128]	; (5340 <timer_add_task+0x9c>)
    52be:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    52c0:	7f23      	ldrb	r3, [r4, #28]
    52c2:	f043 0301 	orr.w	r3, r3, #1
    52c6:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    52c8:	f104 0618 	add.w	r6, r4, #24
    52cc:	4629      	mov	r1, r5
    52ce:	4630      	mov	r0, r6
    52d0:	4b1c      	ldr	r3, [pc, #112]	; (5344 <timer_add_task+0xa0>)
    52d2:	4798      	blx	r3
    52d4:	b9a8      	cbnz	r0, 5302 <timer_add_task+0x5e>
	task->time_label = descr->time;
    52d6:	6963      	ldr	r3, [r4, #20]
    52d8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    52da:	6962      	ldr	r2, [r4, #20]
    52dc:	4629      	mov	r1, r5
    52de:	4630      	mov	r0, r6
    52e0:	4b19      	ldr	r3, [pc, #100]	; (5348 <timer_add_task+0xa4>)
    52e2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    52e4:	7f23      	ldrb	r3, [r4, #28]
    52e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    52ea:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    52ec:	7f23      	ldrb	r3, [r4, #28]
    52ee:	f013 0f02 	tst.w	r3, #2
    52f2:	d112      	bne.n	531a <timer_add_task+0x76>
	return ERR_NONE;
    52f4:	2000      	movs	r0, #0
}
    52f6:	b002      	add	sp, #8
    52f8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    52fa:	2000      	movs	r0, #0
    52fc:	e7dc      	b.n	52b8 <timer_add_task+0x14>
    52fe:	2000      	movs	r0, #0
    5300:	e7da      	b.n	52b8 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5302:	7f23      	ldrb	r3, [r4, #28]
    5304:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5308:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    530a:	2280      	movs	r2, #128	; 0x80
    530c:	490b      	ldr	r1, [pc, #44]	; (533c <timer_add_task+0x98>)
    530e:	2000      	movs	r0, #0
    5310:	4b0b      	ldr	r3, [pc, #44]	; (5340 <timer_add_task+0x9c>)
    5312:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5314:	f06f 0011 	mvn.w	r0, #17
    5318:	e7ed      	b.n	52f6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    531a:	a801      	add	r0, sp, #4
    531c:	4b0b      	ldr	r3, [pc, #44]	; (534c <timer_add_task+0xa8>)
    531e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5320:	7f23      	ldrb	r3, [r4, #28]
    5322:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5326:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    5328:	6823      	ldr	r3, [r4, #0]
    532a:	69db      	ldr	r3, [r3, #28]
    532c:	1d20      	adds	r0, r4, #4
    532e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5330:	a801      	add	r0, sp, #4
    5332:	4b07      	ldr	r3, [pc, #28]	; (5350 <timer_add_task+0xac>)
    5334:	4798      	blx	r3
	return ERR_NONE;
    5336:	2000      	movs	r0, #0
    5338:	e7dd      	b.n	52f6 <timer_add_task+0x52>
    533a:	bf00      	nop
    533c:	0000db04 	.word	0x0000db04
    5340:	00005dad 	.word	0x00005dad
    5344:	00005db3 	.word	0x00005db3
    5348:	00005149 	.word	0x00005149
    534c:	000049b9 	.word	0x000049b9
    5350:	000049c7 	.word	0x000049c7

00005354 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    5354:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5356:	2300      	movs	r3, #0
    5358:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    535a:	69c3      	ldr	r3, [r0, #28]
    535c:	b11b      	cbz	r3, 5366 <usart_transmission_complete+0x12>
    535e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    5362:	4610      	mov	r0, r2
    5364:	4798      	blx	r3
    5366:	bd08      	pop	{r3, pc}

00005368 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    5368:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    536a:	2300      	movs	r3, #0
    536c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    536e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5370:	b11b      	cbz	r3, 537a <usart_error+0x12>
    5372:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    5376:	4610      	mov	r0, r2
    5378:	4798      	blx	r3
    537a:	bd08      	pop	{r3, pc}

0000537c <usart_fill_rx_buffer>:
{
    537c:	b538      	push	{r3, r4, r5, lr}
    537e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    5380:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    5384:	302c      	adds	r0, #44	; 0x2c
    5386:	4b03      	ldr	r3, [pc, #12]	; (5394 <usart_fill_rx_buffer+0x18>)
    5388:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    538a:	6a23      	ldr	r3, [r4, #32]
    538c:	b10b      	cbz	r3, 5392 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    538e:	4628      	mov	r0, r5
    5390:	4798      	blx	r3
    5392:	bd38      	pop	{r3, r4, r5, pc}
    5394:	00005ee9 	.word	0x00005ee9

00005398 <usart_async_write>:
{
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	460e      	mov	r6, r1
    539c:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    539e:	4604      	mov	r4, r0
    53a0:	b1e0      	cbz	r0, 53dc <usart_async_write+0x44>
    53a2:	b1e9      	cbz	r1, 53e0 <usart_async_write+0x48>
    53a4:	1c10      	adds	r0, r2, #0
    53a6:	bf18      	it	ne
    53a8:	2001      	movne	r0, #1
    53aa:	f240 123b 	movw	r2, #315	; 0x13b
    53ae:	490f      	ldr	r1, [pc, #60]	; (53ec <usart_async_write+0x54>)
    53b0:	4b0f      	ldr	r3, [pc, #60]	; (53f0 <usart_async_write+0x58>)
    53b2:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    53b4:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    53b8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    53bc:	429a      	cmp	r2, r3
    53be:	d111      	bne.n	53e4 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    53c0:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    53c2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    53c6:	2300      	movs	r3, #0
    53c8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    53cc:	2301      	movs	r3, #1
    53ce:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    53d0:	f104 0008 	add.w	r0, r4, #8
    53d4:	4b07      	ldr	r3, [pc, #28]	; (53f4 <usart_async_write+0x5c>)
    53d6:	4798      	blx	r3
	return (int32_t)length;
    53d8:	4628      	mov	r0, r5
    53da:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    53dc:	2000      	movs	r0, #0
    53de:	e7e4      	b.n	53aa <usart_async_write+0x12>
    53e0:	2000      	movs	r0, #0
    53e2:	e7e2      	b.n	53aa <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    53e4:	f06f 001b 	mvn.w	r0, #27
}
    53e8:	bd70      	pop	{r4, r5, r6, pc}
    53ea:	bf00      	nop
    53ec:	0000db1c 	.word	0x0000db1c
    53f0:	00005dad 	.word	0x00005dad
    53f4:	000074eb 	.word	0x000074eb

000053f8 <usart_process_byte_sent>:
{
    53f8:	b510      	push	{r4, lr}
    53fa:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    53fc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    53fe:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    5402:	429a      	cmp	r2, r3
    5404:	d009      	beq.n	541a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    5406:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5408:	1c59      	adds	r1, r3, #1
    540a:	8781      	strh	r1, [r0, #60]	; 0x3c
    540c:	5cd1      	ldrb	r1, [r2, r3]
    540e:	4b04      	ldr	r3, [pc, #16]	; (5420 <usart_process_byte_sent+0x28>)
    5410:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    5412:	4620      	mov	r0, r4
    5414:	4b03      	ldr	r3, [pc, #12]	; (5424 <usart_process_byte_sent+0x2c>)
    5416:	4798      	blx	r3
    5418:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    541a:	4b03      	ldr	r3, [pc, #12]	; (5428 <usart_process_byte_sent+0x30>)
    541c:	4798      	blx	r3
    541e:	bd10      	pop	{r4, pc}
    5420:	000074bf 	.word	0x000074bf
    5424:	000074eb 	.word	0x000074eb
    5428:	000074f3 	.word	0x000074f3

0000542c <usart_async_read>:
{
    542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5430:	b082      	sub	sp, #8
    5432:	460f      	mov	r7, r1
    5434:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    5436:	4606      	mov	r6, r0
    5438:	b1a0      	cbz	r0, 5464 <usart_async_read+0x38>
    543a:	b199      	cbz	r1, 5464 <usart_async_read+0x38>
    543c:	2a00      	cmp	r2, #0
    543e:	d12d      	bne.n	549c <usart_async_read+0x70>
    5440:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5444:	4929      	ldr	r1, [pc, #164]	; (54ec <usart_async_read+0xc0>)
    5446:	2000      	movs	r0, #0
    5448:	4b29      	ldr	r3, [pc, #164]	; (54f0 <usart_async_read+0xc4>)
    544a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    544c:	a801      	add	r0, sp, #4
    544e:	4b29      	ldr	r3, [pc, #164]	; (54f4 <usart_async_read+0xc8>)
    5450:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5452:	f106 0034 	add.w	r0, r6, #52	; 0x34
    5456:	4b28      	ldr	r3, [pc, #160]	; (54f8 <usart_async_read+0xcc>)
    5458:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    545a:	a801      	add	r0, sp, #4
    545c:	4b27      	ldr	r3, [pc, #156]	; (54fc <usart_async_read+0xd0>)
    545e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5460:	2500      	movs	r5, #0
	return (int32_t)was_read;
    5462:	e03e      	b.n	54e2 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5464:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5468:	4920      	ldr	r1, [pc, #128]	; (54ec <usart_async_read+0xc0>)
    546a:	2000      	movs	r0, #0
    546c:	4b20      	ldr	r3, [pc, #128]	; (54f0 <usart_async_read+0xc4>)
    546e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5470:	a801      	add	r0, sp, #4
    5472:	4b20      	ldr	r3, [pc, #128]	; (54f4 <usart_async_read+0xc8>)
    5474:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5476:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    547a:	4650      	mov	r0, sl
    547c:	4b1e      	ldr	r3, [pc, #120]	; (54f8 <usart_async_read+0xcc>)
    547e:	4798      	blx	r3
    5480:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5482:	a801      	add	r0, sp, #4
    5484:	4b1d      	ldr	r3, [pc, #116]	; (54fc <usart_async_read+0xd0>)
    5486:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5488:	f1b9 0f00 	cmp.w	r9, #0
    548c:	d004      	beq.n	5498 <usart_async_read+0x6c>
    548e:	f1b8 0f00 	cmp.w	r8, #0
    5492:	d119      	bne.n	54c8 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5494:	2500      	movs	r5, #0
    5496:	e024      	b.n	54e2 <usart_async_read+0xb6>
    5498:	2500      	movs	r5, #0
    549a:	e022      	b.n	54e2 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    549c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    54a0:	4912      	ldr	r1, [pc, #72]	; (54ec <usart_async_read+0xc0>)
    54a2:	2001      	movs	r0, #1
    54a4:	4b12      	ldr	r3, [pc, #72]	; (54f0 <usart_async_read+0xc4>)
    54a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    54a8:	a801      	add	r0, sp, #4
    54aa:	4b12      	ldr	r3, [pc, #72]	; (54f4 <usart_async_read+0xc8>)
    54ac:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    54ae:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    54b2:	4650      	mov	r0, sl
    54b4:	4b10      	ldr	r3, [pc, #64]	; (54f8 <usart_async_read+0xcc>)
    54b6:	4798      	blx	r3
    54b8:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    54ba:	a801      	add	r0, sp, #4
    54bc:	4b0f      	ldr	r3, [pc, #60]	; (54fc <usart_async_read+0xd0>)
    54be:	4798      	blx	r3
	uint16_t                       was_read = 0;
    54c0:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    54c2:	f1b9 0f00 	cmp.w	r9, #0
    54c6:	d00c      	beq.n	54e2 <usart_async_read+0xb6>
{
    54c8:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    54ca:	4e0d      	ldr	r6, [pc, #52]	; (5500 <usart_async_read+0xd4>)
    54cc:	1c60      	adds	r0, r4, #1
    54ce:	b285      	uxth	r5, r0
    54d0:	1939      	adds	r1, r7, r4
    54d2:	4650      	mov	r0, sl
    54d4:	47b0      	blx	r6
    54d6:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    54d8:	454c      	cmp	r4, r9
    54da:	d202      	bcs.n	54e2 <usart_async_read+0xb6>
    54dc:	b2a3      	uxth	r3, r4
    54de:	4598      	cmp	r8, r3
    54e0:	d8f4      	bhi.n	54cc <usart_async_read+0xa0>
}
    54e2:	4628      	mov	r0, r5
    54e4:	b002      	add	sp, #8
    54e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54ea:	bf00      	nop
    54ec:	0000db1c 	.word	0x0000db1c
    54f0:	00005dad 	.word	0x00005dad
    54f4:	000049b9 	.word	0x000049b9
    54f8:	00005f29 	.word	0x00005f29
    54fc:	000049c7 	.word	0x000049c7
    5500:	00005ea5 	.word	0x00005ea5

00005504 <usart_async_init>:
{
    5504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5506:	460d      	mov	r5, r1
    5508:	4616      	mov	r6, r2
    550a:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    550c:	4604      	mov	r4, r0
    550e:	b320      	cbz	r0, 555a <usart_async_init+0x56>
    5510:	b329      	cbz	r1, 555e <usart_async_init+0x5a>
    5512:	b332      	cbz	r2, 5562 <usart_async_init+0x5e>
    5514:	1c18      	adds	r0, r3, #0
    5516:	bf18      	it	ne
    5518:	2001      	movne	r0, #1
    551a:	223a      	movs	r2, #58	; 0x3a
    551c:	4913      	ldr	r1, [pc, #76]	; (556c <usart_async_init+0x68>)
    551e:	4b14      	ldr	r3, [pc, #80]	; (5570 <usart_async_init+0x6c>)
    5520:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    5522:	463a      	mov	r2, r7
    5524:	4631      	mov	r1, r6
    5526:	f104 0034 	add.w	r0, r4, #52	; 0x34
    552a:	4b12      	ldr	r3, [pc, #72]	; (5574 <usart_async_init+0x70>)
    552c:	4798      	blx	r3
    552e:	b9d0      	cbnz	r0, 5566 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    5530:	4629      	mov	r1, r5
    5532:	f104 0008 	add.w	r0, r4, #8
    5536:	4b10      	ldr	r3, [pc, #64]	; (5578 <usart_async_init+0x74>)
    5538:	4798      	blx	r3
	if (init_status) {
    553a:	4603      	mov	r3, r0
    553c:	b958      	cbnz	r0, 5556 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    553e:	4a0f      	ldr	r2, [pc, #60]	; (557c <usart_async_init+0x78>)
    5540:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    5542:	4a0f      	ldr	r2, [pc, #60]	; (5580 <usart_async_init+0x7c>)
    5544:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    5546:	4a0f      	ldr	r2, [pc, #60]	; (5584 <usart_async_init+0x80>)
    5548:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    554a:	4a0f      	ldr	r2, [pc, #60]	; (5588 <usart_async_init+0x84>)
    554c:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    554e:	4a0f      	ldr	r2, [pc, #60]	; (558c <usart_async_init+0x88>)
    5550:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    5552:	4a0f      	ldr	r2, [pc, #60]	; (5590 <usart_async_init+0x8c>)
    5554:	6162      	str	r2, [r4, #20]
}
    5556:	4618      	mov	r0, r3
    5558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    555a:	2000      	movs	r0, #0
    555c:	e7dd      	b.n	551a <usart_async_init+0x16>
    555e:	2000      	movs	r0, #0
    5560:	e7db      	b.n	551a <usart_async_init+0x16>
    5562:	2000      	movs	r0, #0
    5564:	e7d9      	b.n	551a <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    5566:	f06f 030c 	mvn.w	r3, #12
    556a:	e7f4      	b.n	5556 <usart_async_init+0x52>
    556c:	0000db1c 	.word	0x0000db1c
    5570:	00005dad 	.word	0x00005dad
    5574:	00005e55 	.word	0x00005e55
    5578:	000073f1 	.word	0x000073f1
    557c:	0000542d 	.word	0x0000542d
    5580:	00005399 	.word	0x00005399
    5584:	000053f9 	.word	0x000053f9
    5588:	0000537d 	.word	0x0000537d
    558c:	00005355 	.word	0x00005355
    5590:	00005369 	.word	0x00005369

00005594 <usart_async_enable>:
{
    5594:	b510      	push	{r4, lr}
	ASSERT(descr);
    5596:	4604      	mov	r4, r0
    5598:	2261      	movs	r2, #97	; 0x61
    559a:	4906      	ldr	r1, [pc, #24]	; (55b4 <usart_async_enable+0x20>)
    559c:	3000      	adds	r0, #0
    559e:	bf18      	it	ne
    55a0:	2001      	movne	r0, #1
    55a2:	4b05      	ldr	r3, [pc, #20]	; (55b8 <usart_async_enable+0x24>)
    55a4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    55a6:	f104 0008 	add.w	r0, r4, #8
    55aa:	4b04      	ldr	r3, [pc, #16]	; (55bc <usart_async_enable+0x28>)
    55ac:	4798      	blx	r3
}
    55ae:	2000      	movs	r0, #0
    55b0:	bd10      	pop	{r4, pc}
    55b2:	bf00      	nop
    55b4:	0000db1c 	.word	0x0000db1c
    55b8:	00005dad 	.word	0x00005dad
    55bc:	00007481 	.word	0x00007481

000055c0 <usart_async_disable>:
{
    55c0:	b510      	push	{r4, lr}
	ASSERT(descr);
    55c2:	4604      	mov	r4, r0
    55c4:	226c      	movs	r2, #108	; 0x6c
    55c6:	4906      	ldr	r1, [pc, #24]	; (55e0 <usart_async_disable+0x20>)
    55c8:	3000      	adds	r0, #0
    55ca:	bf18      	it	ne
    55cc:	2001      	movne	r0, #1
    55ce:	4b05      	ldr	r3, [pc, #20]	; (55e4 <usart_async_disable+0x24>)
    55d0:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    55d2:	f104 0008 	add.w	r0, r4, #8
    55d6:	4b04      	ldr	r3, [pc, #16]	; (55e8 <usart_async_disable+0x28>)
    55d8:	4798      	blx	r3
}
    55da:	2000      	movs	r0, #0
    55dc:	bd10      	pop	{r4, pc}
    55de:	bf00      	nop
    55e0:	0000db1c 	.word	0x0000db1c
    55e4:	00005dad 	.word	0x00005dad
    55e8:	00007495 	.word	0x00007495

000055ec <usart_async_get_io_descriptor>:
{
    55ec:	b538      	push	{r3, r4, r5, lr}
    55ee:	460c      	mov	r4, r1
	ASSERT(descr && io);
    55f0:	4605      	mov	r5, r0
    55f2:	b148      	cbz	r0, 5608 <usart_async_get_io_descriptor+0x1c>
    55f4:	1c08      	adds	r0, r1, #0
    55f6:	bf18      	it	ne
    55f8:	2001      	movne	r0, #1
    55fa:	2277      	movs	r2, #119	; 0x77
    55fc:	4903      	ldr	r1, [pc, #12]	; (560c <usart_async_get_io_descriptor+0x20>)
    55fe:	4b04      	ldr	r3, [pc, #16]	; (5610 <usart_async_get_io_descriptor+0x24>)
    5600:	4798      	blx	r3
	*io = &descr->io;
    5602:	6025      	str	r5, [r4, #0]
}
    5604:	2000      	movs	r0, #0
    5606:	bd38      	pop	{r3, r4, r5, pc}
    5608:	2000      	movs	r0, #0
    560a:	e7f6      	b.n	55fa <usart_async_get_io_descriptor+0xe>
    560c:	0000db1c 	.word	0x0000db1c
    5610:	00005dad 	.word	0x00005dad

00005614 <usart_async_register_callback>:
{
    5614:	b570      	push	{r4, r5, r6, lr}
    5616:	460c      	mov	r4, r1
    5618:	4616      	mov	r6, r2
	ASSERT(descr);
    561a:	4605      	mov	r5, r0
    561c:	2283      	movs	r2, #131	; 0x83
    561e:	4917      	ldr	r1, [pc, #92]	; (567c <usart_async_register_callback+0x68>)
    5620:	3000      	adds	r0, #0
    5622:	bf18      	it	ne
    5624:	2001      	movne	r0, #1
    5626:	4b16      	ldr	r3, [pc, #88]	; (5680 <usart_async_register_callback+0x6c>)
    5628:	4798      	blx	r3
	switch (type) {
    562a:	2c01      	cmp	r4, #1
    562c:	d010      	beq.n	5650 <usart_async_register_callback+0x3c>
    562e:	b124      	cbz	r4, 563a <usart_async_register_callback+0x26>
    5630:	2c02      	cmp	r4, #2
    5632:	d018      	beq.n	5666 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    5634:	f06f 000c 	mvn.w	r0, #12
}
    5638:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    563a:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    563c:	1c32      	adds	r2, r6, #0
    563e:	bf18      	it	ne
    5640:	2201      	movne	r2, #1
    5642:	2101      	movs	r1, #1
    5644:	f105 0008 	add.w	r0, r5, #8
    5648:	4b0e      	ldr	r3, [pc, #56]	; (5684 <usart_async_register_callback+0x70>)
    564a:	4798      	blx	r3
	return ERR_NONE;
    564c:	2000      	movs	r0, #0
		break;
    564e:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    5650:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    5652:	1c32      	adds	r2, r6, #0
    5654:	bf18      	it	ne
    5656:	2201      	movne	r2, #1
    5658:	2102      	movs	r1, #2
    565a:	f105 0008 	add.w	r0, r5, #8
    565e:	4b09      	ldr	r3, [pc, #36]	; (5684 <usart_async_register_callback+0x70>)
    5660:	4798      	blx	r3
	return ERR_NONE;
    5662:	2000      	movs	r0, #0
		break;
    5664:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5666:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5668:	1c32      	adds	r2, r6, #0
    566a:	bf18      	it	ne
    566c:	2201      	movne	r2, #1
    566e:	2103      	movs	r1, #3
    5670:	f105 0008 	add.w	r0, r5, #8
    5674:	4b03      	ldr	r3, [pc, #12]	; (5684 <usart_async_register_callback+0x70>)
    5676:	4798      	blx	r3
	return ERR_NONE;
    5678:	2000      	movs	r0, #0
		break;
    567a:	bd70      	pop	{r4, r5, r6, pc}
    567c:	0000db1c 	.word	0x0000db1c
    5680:	00005dad 	.word	0x00005dad
    5684:	000074fd 	.word	0x000074fd

00005688 <usart_async_set_parity>:
{
    5688:	b538      	push	{r3, r4, r5, lr}
    568a:	460d      	mov	r5, r1
	ASSERT(descr);
    568c:	4604      	mov	r4, r0
    568e:	22cb      	movs	r2, #203	; 0xcb
    5690:	4906      	ldr	r1, [pc, #24]	; (56ac <usart_async_set_parity+0x24>)
    5692:	3000      	adds	r0, #0
    5694:	bf18      	it	ne
    5696:	2001      	movne	r0, #1
    5698:	4b05      	ldr	r3, [pc, #20]	; (56b0 <usart_async_set_parity+0x28>)
    569a:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    569c:	4629      	mov	r1, r5
    569e:	f104 0008 	add.w	r0, r4, #8
    56a2:	4b04      	ldr	r3, [pc, #16]	; (56b4 <usart_async_set_parity+0x2c>)
    56a4:	4798      	blx	r3
}
    56a6:	2000      	movs	r0, #0
    56a8:	bd38      	pop	{r3, r4, r5, pc}
    56aa:	bf00      	nop
    56ac:	0000db1c 	.word	0x0000db1c
    56b0:	00005dad 	.word	0x00005dad
    56b4:	000074a9 	.word	0x000074a9

000056b8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    56b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56bc:	460f      	mov	r7, r1
    56be:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    56c0:	4604      	mov	r4, r0
    56c2:	b328      	cbz	r0, 5710 <usart_sync_write+0x58>
    56c4:	b331      	cbz	r1, 5714 <usart_sync_write+0x5c>
    56c6:	1c10      	adds	r0, r2, #0
    56c8:	bf18      	it	ne
    56ca:	2001      	movne	r0, #1
    56cc:	22f1      	movs	r2, #241	; 0xf1
    56ce:	4912      	ldr	r1, [pc, #72]	; (5718 <usart_sync_write+0x60>)
    56d0:	4b12      	ldr	r3, [pc, #72]	; (571c <usart_sync_write+0x64>)
    56d2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    56d4:	3408      	adds	r4, #8
    56d6:	4d12      	ldr	r5, [pc, #72]	; (5720 <usart_sync_write+0x68>)
    56d8:	4620      	mov	r0, r4
    56da:	47a8      	blx	r5
    56dc:	2800      	cmp	r0, #0
    56de:	d0fb      	beq.n	56d8 <usart_sync_write+0x20>
    56e0:	3f01      	subs	r7, #1
    56e2:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    56e4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 5728 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    56e8:	4d0d      	ldr	r5, [pc, #52]	; (5720 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    56ea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    56ee:	4620      	mov	r0, r4
    56f0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    56f2:	4620      	mov	r0, r4
    56f4:	47a8      	blx	r5
    56f6:	2800      	cmp	r0, #0
    56f8:	d0fb      	beq.n	56f2 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    56fa:	3601      	adds	r6, #1
    56fc:	4546      	cmp	r6, r8
    56fe:	d3f4      	bcc.n	56ea <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    5700:	4d08      	ldr	r5, [pc, #32]	; (5724 <usart_sync_write+0x6c>)
    5702:	4620      	mov	r0, r4
    5704:	47a8      	blx	r5
    5706:	2800      	cmp	r0, #0
    5708:	d0fb      	beq.n	5702 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    570a:	4630      	mov	r0, r6
    570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5710:	2000      	movs	r0, #0
    5712:	e7db      	b.n	56cc <usart_sync_write+0x14>
    5714:	2000      	movs	r0, #0
    5716:	e7d9      	b.n	56cc <usart_sync_write+0x14>
    5718:	0000db3c 	.word	0x0000db3c
    571c:	00005dad 	.word	0x00005dad
    5720:	000074cd 	.word	0x000074cd
    5724:	000074d7 	.word	0x000074d7
    5728:	000074b9 	.word	0x000074b9

0000572c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5730:	460f      	mov	r7, r1
    5732:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5734:	4604      	mov	r4, r0
    5736:	b1e0      	cbz	r0, 5772 <usart_sync_read+0x46>
    5738:	b1e9      	cbz	r1, 5776 <usart_sync_read+0x4a>
    573a:	1c10      	adds	r0, r2, #0
    573c:	bf18      	it	ne
    573e:	2001      	movne	r0, #1
    5740:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5744:	490d      	ldr	r1, [pc, #52]	; (577c <usart_sync_read+0x50>)
    5746:	4b0e      	ldr	r3, [pc, #56]	; (5780 <usart_sync_read+0x54>)
    5748:	4798      	blx	r3
    574a:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    574c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    574e:	3408      	adds	r4, #8
    5750:	4d0c      	ldr	r5, [pc, #48]	; (5784 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    5752:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5788 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    5756:	4620      	mov	r0, r4
    5758:	47a8      	blx	r5
    575a:	2800      	cmp	r0, #0
    575c:	d0fb      	beq.n	5756 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    575e:	4620      	mov	r0, r4
    5760:	47c8      	blx	r9
    5762:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    5766:	3601      	adds	r6, #1
    5768:	4546      	cmp	r6, r8
    576a:	d3f4      	bcc.n	5756 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    576c:	4630      	mov	r0, r6
    576e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5772:	2000      	movs	r0, #0
    5774:	e7e4      	b.n	5740 <usart_sync_read+0x14>
    5776:	2000      	movs	r0, #0
    5778:	e7e2      	b.n	5740 <usart_sync_read+0x14>
    577a:	bf00      	nop
    577c:	0000db3c 	.word	0x0000db3c
    5780:	00005dad 	.word	0x00005dad
    5784:	000074e1 	.word	0x000074e1
    5788:	000074c5 	.word	0x000074c5

0000578c <usart_sync_init>:
{
    578c:	b538      	push	{r3, r4, r5, lr}
    578e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5790:	4604      	mov	r4, r0
    5792:	b198      	cbz	r0, 57bc <usart_sync_init+0x30>
    5794:	1c08      	adds	r0, r1, #0
    5796:	bf18      	it	ne
    5798:	2001      	movne	r0, #1
    579a:	2234      	movs	r2, #52	; 0x34
    579c:	4908      	ldr	r1, [pc, #32]	; (57c0 <usart_sync_init+0x34>)
    579e:	4b09      	ldr	r3, [pc, #36]	; (57c4 <usart_sync_init+0x38>)
    57a0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    57a2:	4629      	mov	r1, r5
    57a4:	f104 0008 	add.w	r0, r4, #8
    57a8:	4b07      	ldr	r3, [pc, #28]	; (57c8 <usart_sync_init+0x3c>)
    57aa:	4798      	blx	r3
	if (init_status) {
    57ac:	4603      	mov	r3, r0
    57ae:	b918      	cbnz	r0, 57b8 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    57b0:	4a06      	ldr	r2, [pc, #24]	; (57cc <usart_sync_init+0x40>)
    57b2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    57b4:	4a06      	ldr	r2, [pc, #24]	; (57d0 <usart_sync_init+0x44>)
    57b6:	6022      	str	r2, [r4, #0]
}
    57b8:	4618      	mov	r0, r3
    57ba:	bd38      	pop	{r3, r4, r5, pc}
    57bc:	2000      	movs	r0, #0
    57be:	e7ec      	b.n	579a <usart_sync_init+0xe>
    57c0:	0000db3c 	.word	0x0000db3c
    57c4:	00005dad 	.word	0x00005dad
    57c8:	000073c5 	.word	0x000073c5
    57cc:	0000572d 	.word	0x0000572d
    57d0:	000056b9 	.word	0x000056b9

000057d4 <usart_sync_enable>:
{
    57d4:	b510      	push	{r4, lr}
	ASSERT(descr);
    57d6:	4604      	mov	r4, r0
    57d8:	2253      	movs	r2, #83	; 0x53
    57da:	4906      	ldr	r1, [pc, #24]	; (57f4 <usart_sync_enable+0x20>)
    57dc:	3000      	adds	r0, #0
    57de:	bf18      	it	ne
    57e0:	2001      	movne	r0, #1
    57e2:	4b05      	ldr	r3, [pc, #20]	; (57f8 <usart_sync_enable+0x24>)
    57e4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    57e6:	f104 0008 	add.w	r0, r4, #8
    57ea:	4b04      	ldr	r3, [pc, #16]	; (57fc <usart_sync_enable+0x28>)
    57ec:	4798      	blx	r3
}
    57ee:	2000      	movs	r0, #0
    57f0:	bd10      	pop	{r4, pc}
    57f2:	bf00      	nop
    57f4:	0000db3c 	.word	0x0000db3c
    57f8:	00005dad 	.word	0x00005dad
    57fc:	0000746d 	.word	0x0000746d

00005800 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5800:	4b0f      	ldr	r3, [pc, #60]	; (5840 <_usb_d_find_ep+0x40>)
    5802:	7859      	ldrb	r1, [r3, #1]
    5804:	4288      	cmp	r0, r1
    5806:	d018      	beq.n	583a <_usb_d_find_ep+0x3a>
{
    5808:	b430      	push	{r4, r5}
    580a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    580c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    580e:	f000 050f 	and.w	r5, r0, #15
    5812:	e007      	b.n	5824 <_usb_d_find_ep+0x24>
    5814:	3301      	adds	r3, #1
    5816:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5818:	2b0d      	cmp	r3, #13
    581a:	d009      	beq.n	5830 <_usb_d_find_ep+0x30>
    581c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    581e:	7851      	ldrb	r1, [r2, #1]
    5820:	4281      	cmp	r1, r0
    5822:	d007      	beq.n	5834 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5824:	7814      	ldrb	r4, [r2, #0]
    5826:	2c00      	cmp	r4, #0
    5828:	d1f4      	bne.n	5814 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    582a:	428d      	cmp	r5, r1
    582c:	d1f2      	bne.n	5814 <_usb_d_find_ep+0x14>
    582e:	e001      	b.n	5834 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    5830:	f04f 33ff 	mov.w	r3, #4294967295
}
    5834:	4618      	mov	r0, r3
    5836:	bc30      	pop	{r4, r5}
    5838:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    583a:	2300      	movs	r3, #0
}
    583c:	4618      	mov	r0, r3
    583e:	4770      	bx	lr
    5840:	2000064c 	.word	0x2000064c

00005844 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    5844:	2000      	movs	r0, #0
    5846:	4770      	bx	lr

00005848 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5848:	b538      	push	{r3, r4, r5, lr}
    584a:	4604      	mov	r4, r0
    584c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    584e:	4b09      	ldr	r3, [pc, #36]	; (5874 <usb_d_cb_trans_more+0x2c>)
    5850:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5852:	4b09      	ldr	r3, [pc, #36]	; (5878 <usb_d_cb_trans_more+0x30>)
    5854:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5858:	789b      	ldrb	r3, [r3, #2]
    585a:	2b03      	cmp	r3, #3
    585c:	d001      	beq.n	5862 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    585e:	2000      	movs	r0, #0
}
    5860:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    5862:	4b05      	ldr	r3, [pc, #20]	; (5878 <usb_d_cb_trans_more+0x30>)
    5864:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5868:	6983      	ldr	r3, [r0, #24]
    586a:	4629      	mov	r1, r5
    586c:	4620      	mov	r0, r4
    586e:	4798      	blx	r3
    5870:	bd38      	pop	{r3, r4, r5, pc}
    5872:	bf00      	nop
    5874:	00005801 	.word	0x00005801
    5878:	2000064c 	.word	0x2000064c

0000587c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    587c:	b5f0      	push	{r4, r5, r6, r7, lr}
    587e:	b085      	sub	sp, #20
    5880:	4606      	mov	r6, r0
    5882:	460d      	mov	r5, r1
    5884:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5886:	4b4d      	ldr	r3, [pc, #308]	; (59bc <_usb_d_cb_trans_done+0x140>)
    5888:	4798      	blx	r3
    588a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    588c:	2d00      	cmp	r5, #0
    588e:	d15b      	bne.n	5948 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5890:	4a4b      	ldr	r2, [pc, #300]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    5892:	0143      	lsls	r3, r0, #5
    5894:	18d1      	adds	r1, r2, r3
    5896:	2000      	movs	r0, #0
    5898:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    589a:	5cd3      	ldrb	r3, [r2, r3]
    589c:	b173      	cbz	r3, 58bc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    589e:	4b48      	ldr	r3, [pc, #288]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    58a0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    58a4:	2201      	movs	r2, #1
    58a6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    58a8:	4845      	ldr	r0, [pc, #276]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    58aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    58ae:	69c3      	ldr	r3, [r0, #28]
    58b0:	463a      	mov	r2, r7
    58b2:	78c1      	ldrb	r1, [r0, #3]
    58b4:	4630      	mov	r0, r6
    58b6:	4798      	blx	r3
}
    58b8:	b005      	add	sp, #20
    58ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    58bc:	788b      	ldrb	r3, [r1, #2]
    58be:	2b03      	cmp	r3, #3
    58c0:	d00b      	beq.n	58da <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    58c2:	483f      	ldr	r0, [pc, #252]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    58c4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    58c8:	4614      	mov	r4, r2
    58ca:	69d3      	ldr	r3, [r2, #28]
    58cc:	320c      	adds	r2, #12
    58ce:	2100      	movs	r1, #0
    58d0:	7860      	ldrb	r0, [r4, #1]
    58d2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    58d4:	2302      	movs	r3, #2
    58d6:	70a3      	strb	r3, [r4, #2]
    58d8:	e7ee      	b.n	58b8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    58da:	460b      	mov	r3, r1
    58dc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    58e0:	460a      	mov	r2, r1
    58e2:	69ce      	ldr	r6, [r1, #28]
    58e4:	320c      	adds	r2, #12
    58e6:	2101      	movs	r1, #1
    58e8:	7858      	ldrb	r0, [r3, #1]
    58ea:	47b0      	blx	r6
		if (err) {
    58ec:	b1a0      	cbz	r0, 5918 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    58ee:	4b34      	ldr	r3, [pc, #208]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    58f0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    58f4:	2205      	movs	r2, #5
    58f6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    58f8:	2202      	movs	r2, #2
    58fa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    58fc:	2d00      	cmp	r5, #0
    58fe:	db09      	blt.n	5914 <_usb_d_cb_trans_done+0x98>
    5900:	482f      	ldr	r0, [pc, #188]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    5902:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5906:	7840      	ldrb	r0, [r0, #1]
    5908:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    590c:	2101      	movs	r1, #1
    590e:	4b2d      	ldr	r3, [pc, #180]	; (59c4 <_usb_d_cb_trans_done+0x148>)
    5910:	4798      	blx	r3
    5912:	e7d1      	b.n	58b8 <_usb_d_cb_trans_done+0x3c>
    5914:	7858      	ldrb	r0, [r3, #1]
    5916:	e7f9      	b.n	590c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5918:	4829      	ldr	r0, [pc, #164]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    591a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    591e:	2304      	movs	r3, #4
    5920:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5922:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    5924:	2200      	movs	r2, #0
    5926:	9201      	str	r2, [sp, #4]
    5928:	9202      	str	r2, [sp, #8]
    592a:	4295      	cmp	r5, r2
    592c:	bfac      	ite	ge
    592e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    5932:	f003 030f 	andlt.w	r3, r3, #15
    5936:	f88d 300c 	strb.w	r3, [sp, #12]
    593a:	2301      	movs	r3, #1
    593c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5940:	a801      	add	r0, sp, #4
    5942:	4b21      	ldr	r3, [pc, #132]	; (59c8 <_usb_d_cb_trans_done+0x14c>)
    5944:	4798      	blx	r3
    5946:	e7b7      	b.n	58b8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    5948:	2d01      	cmp	r5, #1
    594a:	d00a      	beq.n	5962 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    594c:	2d02      	cmp	r5, #2
    594e:	d01c      	beq.n	598a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    5950:	2d03      	cmp	r5, #3
    5952:	d02a      	beq.n	59aa <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5954:	4b1a      	ldr	r3, [pc, #104]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    5956:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    595a:	2206      	movs	r2, #6
    595c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    595e:	70da      	strb	r2, [r3, #3]
    5960:	e7a2      	b.n	58a8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5962:	4a17      	ldr	r2, [pc, #92]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    5964:	0143      	lsls	r3, r0, #5
    5966:	18d1      	adds	r1, r2, r3
    5968:	2002      	movs	r0, #2
    596a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    596c:	5cd3      	ldrb	r3, [r2, r3]
    596e:	b12b      	cbz	r3, 597c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5970:	4b13      	ldr	r3, [pc, #76]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    5972:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5976:	2205      	movs	r2, #5
    5978:	709a      	strb	r2, [r3, #2]
    597a:	e795      	b.n	58a8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    597c:	460b      	mov	r3, r1
    597e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5980:	2100      	movs	r1, #0
    5982:	4630      	mov	r0, r6
    5984:	4b0f      	ldr	r3, [pc, #60]	; (59c4 <_usb_d_cb_trans_done+0x148>)
    5986:	4798      	blx	r3
    5988:	e78e      	b.n	58a8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    598a:	4a0d      	ldr	r2, [pc, #52]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    598c:	0143      	lsls	r3, r0, #5
    598e:	18d1      	adds	r1, r2, r3
    5990:	2004      	movs	r0, #4
    5992:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5994:	5cd3      	ldrb	r3, [r2, r3]
    5996:	b12b      	cbz	r3, 59a4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5998:	4b09      	ldr	r3, [pc, #36]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    599a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    599e:	2201      	movs	r2, #1
    59a0:	709a      	strb	r2, [r3, #2]
    59a2:	e781      	b.n	58a8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    59a4:	2302      	movs	r3, #2
    59a6:	708b      	strb	r3, [r1, #2]
			return;
    59a8:	e786      	b.n	58b8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    59aa:	4b05      	ldr	r3, [pc, #20]	; (59c0 <_usb_d_cb_trans_done+0x144>)
    59ac:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    59b0:	2200      	movs	r2, #0
    59b2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    59b4:	2205      	movs	r2, #5
    59b6:	70da      	strb	r2, [r3, #3]
    59b8:	e776      	b.n	58a8 <_usb_d_cb_trans_done+0x2c>
    59ba:	bf00      	nop
    59bc:	00005801 	.word	0x00005801
    59c0:	2000064c 	.word	0x2000064c
    59c4:	00009439 	.word	0x00009439
    59c8:	000095e1 	.word	0x000095e1

000059cc <usb_d_cb_trans_setup>:
{
    59cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59d0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    59d2:	4b1c      	ldr	r3, [pc, #112]	; (5a44 <usb_d_cb_trans_setup+0x78>)
    59d4:	4798      	blx	r3
    59d6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    59d8:	4c1b      	ldr	r4, [pc, #108]	; (5a48 <usb_d_cb_trans_setup+0x7c>)
    59da:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    59de:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    59e0:	4621      	mov	r1, r4
    59e2:	4628      	mov	r0, r5
    59e4:	4b19      	ldr	r3, [pc, #100]	; (5a4c <usb_d_cb_trans_setup+0x80>)
    59e6:	4798      	blx	r3
	if (n != 8) {
    59e8:	b2c0      	uxtb	r0, r0
    59ea:	2808      	cmp	r0, #8
    59ec:	d009      	beq.n	5a02 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    59ee:	2101      	movs	r1, #1
    59f0:	4628      	mov	r0, r5
    59f2:	4c17      	ldr	r4, [pc, #92]	; (5a50 <usb_d_cb_trans_setup+0x84>)
    59f4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    59f6:	2101      	movs	r1, #1
    59f8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    59fc:	47a0      	blx	r4
		return;
    59fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5a02:	2100      	movs	r1, #0
    5a04:	4628      	mov	r0, r5
    5a06:	4f12      	ldr	r7, [pc, #72]	; (5a50 <usb_d_cb_trans_setup+0x84>)
    5a08:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5a0a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    5a0e:	2100      	movs	r1, #0
    5a10:	4640      	mov	r0, r8
    5a12:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5a14:	4b0c      	ldr	r3, [pc, #48]	; (5a48 <usb_d_cb_trans_setup+0x7c>)
    5a16:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5a1a:	2201      	movs	r2, #1
    5a1c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5a1e:	695b      	ldr	r3, [r3, #20]
    5a20:	4621      	mov	r1, r4
    5a22:	4628      	mov	r0, r5
    5a24:	4798      	blx	r3
    5a26:	b108      	cbz	r0, 5a2c <usb_d_cb_trans_setup+0x60>
    5a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5a2c:	4b06      	ldr	r3, [pc, #24]	; (5a48 <usb_d_cb_trans_setup+0x7c>)
    5a2e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5a32:	2305      	movs	r3, #5
    5a34:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a36:	2101      	movs	r1, #1
    5a38:	4628      	mov	r0, r5
    5a3a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5a3c:	2101      	movs	r1, #1
    5a3e:	4640      	mov	r0, r8
    5a40:	47b8      	blx	r7
    5a42:	e7f1      	b.n	5a28 <usb_d_cb_trans_setup+0x5c>
    5a44:	00005801 	.word	0x00005801
    5a48:	2000064c 	.word	0x2000064c
    5a4c:	00009581 	.word	0x00009581
    5a50:	00009439 	.word	0x00009439

00005a54 <usb_d_init>:

int32_t usb_d_init(void)
{
    5a54:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    5a56:	4b11      	ldr	r3, [pc, #68]	; (5a9c <usb_d_init+0x48>)
    5a58:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    5a5a:	2800      	cmp	r0, #0
    5a5c:	db1d      	blt.n	5a9a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5a5e:	4c10      	ldr	r4, [pc, #64]	; (5aa0 <usb_d_init+0x4c>)
    5a60:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5a64:	2100      	movs	r1, #0
    5a66:	4620      	mov	r0, r4
    5a68:	4b0e      	ldr	r3, [pc, #56]	; (5aa4 <usb_d_init+0x50>)
    5a6a:	4798      	blx	r3
    5a6c:	4623      	mov	r3, r4
    5a6e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5a72:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5a74:	4a0c      	ldr	r2, [pc, #48]	; (5aa8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5a76:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5a78:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5a7a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5a7c:	61da      	str	r2, [r3, #28]
    5a7e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5a80:	4283      	cmp	r3, r0
    5a82:	d1f8      	bne.n	5a76 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5a84:	4909      	ldr	r1, [pc, #36]	; (5aac <usb_d_init+0x58>)
    5a86:	2000      	movs	r0, #0
    5a88:	4c09      	ldr	r4, [pc, #36]	; (5ab0 <usb_d_init+0x5c>)
    5a8a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5a8c:	4909      	ldr	r1, [pc, #36]	; (5ab4 <usb_d_init+0x60>)
    5a8e:	2001      	movs	r0, #1
    5a90:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5a92:	4909      	ldr	r1, [pc, #36]	; (5ab8 <usb_d_init+0x64>)
    5a94:	2002      	movs	r0, #2
    5a96:	47a0      	blx	r4
	return ERR_NONE;
    5a98:	2000      	movs	r0, #0
}
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	00008e05 	.word	0x00008e05
    5aa0:	2000064c 	.word	0x2000064c
    5aa4:	0000c2f3 	.word	0x0000c2f3
    5aa8:	00005845 	.word	0x00005845
    5aac:	000059cd 	.word	0x000059cd
    5ab0:	000097e9 	.word	0x000097e9
    5ab4:	00005849 	.word	0x00005849
    5ab8:	0000587d 	.word	0x0000587d

00005abc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5abc:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5abe:	4b01      	ldr	r3, [pc, #4]	; (5ac4 <usb_d_register_callback+0x8>)
    5ac0:	4798      	blx	r3
    5ac2:	bd08      	pop	{r3, pc}
    5ac4:	000097c1 	.word	0x000097c1

00005ac8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5ac8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5aca:	4b01      	ldr	r3, [pc, #4]	; (5ad0 <usb_d_enable+0x8>)
    5acc:	4798      	blx	r3
}
    5ace:	bd08      	pop	{r3, pc}
    5ad0:	00008f0d 	.word	0x00008f0d

00005ad4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5ad4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5ad6:	4b01      	ldr	r3, [pc, #4]	; (5adc <usb_d_attach+0x8>)
    5ad8:	4798      	blx	r3
    5ada:	bd08      	pop	{r3, pc}
    5adc:	00008f79 	.word	0x00008f79

00005ae0 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5ae0:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    5ae2:	4b01      	ldr	r3, [pc, #4]	; (5ae8 <usb_d_get_frame_num+0x8>)
    5ae4:	4798      	blx	r3
}
    5ae6:	bd08      	pop	{r3, pc}
    5ae8:	00008f97 	.word	0x00008f97

00005aec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5aec:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5aee:	4b01      	ldr	r3, [pc, #4]	; (5af4 <usb_d_set_address+0x8>)
    5af0:	4798      	blx	r3
    5af2:	bd08      	pop	{r3, pc}
    5af4:	00008f8b 	.word	0x00008f8b

00005af8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5afa:	4606      	mov	r6, r0
    5afc:	460c      	mov	r4, r1
    5afe:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b00:	4b0f      	ldr	r3, [pc, #60]	; (5b40 <usb_d_ep_init+0x48>)
    5b02:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5b04:	2800      	cmp	r0, #0
    5b06:	da14      	bge.n	5b32 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5b08:	20ff      	movs	r0, #255	; 0xff
    5b0a:	4b0d      	ldr	r3, [pc, #52]	; (5b40 <usb_d_ep_init+0x48>)
    5b0c:	4798      	blx	r3
		if (ep_index < 0) {
    5b0e:	1e05      	subs	r5, r0, #0
    5b10:	db12      	blt.n	5b38 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5b12:	463a      	mov	r2, r7
    5b14:	4621      	mov	r1, r4
    5b16:	4630      	mov	r0, r6
    5b18:	4b0a      	ldr	r3, [pc, #40]	; (5b44 <usb_d_ep_init+0x4c>)
    5b1a:	4798      	blx	r3
	if (rc < 0) {
    5b1c:	2800      	cmp	r0, #0
    5b1e:	db0d      	blt.n	5b3c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    5b20:	4b09      	ldr	r3, [pc, #36]	; (5b48 <usb_d_ep_init+0x50>)
    5b22:	0168      	lsls	r0, r5, #5
    5b24:	181a      	adds	r2, r3, r0
    5b26:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5b28:	f004 0403 	and.w	r4, r4, #3
    5b2c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    5b2e:	2000      	movs	r0, #0
    5b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5b32:	f06f 0013 	mvn.w	r0, #19
    5b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    5b38:	f06f 0014 	mvn.w	r0, #20
}
    5b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b3e:	bf00      	nop
    5b40:	00005801 	.word	0x00005801
    5b44:	00008fa5 	.word	0x00008fa5
    5b48:	2000064c 	.word	0x2000064c

00005b4c <usb_d_ep0_init>:
{
    5b4c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5b4e:	4602      	mov	r2, r0
    5b50:	2100      	movs	r1, #0
    5b52:	4608      	mov	r0, r1
    5b54:	4b01      	ldr	r3, [pc, #4]	; (5b5c <usb_d_ep0_init+0x10>)
    5b56:	4798      	blx	r3
}
    5b58:	bd08      	pop	{r3, pc}
    5b5a:	bf00      	nop
    5b5c:	00005af9 	.word	0x00005af9

00005b60 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5b60:	b538      	push	{r3, r4, r5, lr}
    5b62:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b64:	4b06      	ldr	r3, [pc, #24]	; (5b80 <usb_d_ep_deinit+0x20>)
    5b66:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5b68:	1e04      	subs	r4, r0, #0
    5b6a:	db07      	blt.n	5b7c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5b6c:	4628      	mov	r0, r5
    5b6e:	4b05      	ldr	r3, [pc, #20]	; (5b84 <usb_d_ep_deinit+0x24>)
    5b70:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5b72:	4805      	ldr	r0, [pc, #20]	; (5b88 <usb_d_ep_deinit+0x28>)
    5b74:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5b78:	23ff      	movs	r3, #255	; 0xff
    5b7a:	7043      	strb	r3, [r0, #1]
    5b7c:	bd38      	pop	{r3, r4, r5, pc}
    5b7e:	bf00      	nop
    5b80:	00005801 	.word	0x00005801
    5b84:	000090bd 	.word	0x000090bd
    5b88:	2000064c 	.word	0x2000064c

00005b8c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5b8c:	b538      	push	{r3, r4, r5, lr}
    5b8e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b90:	4b0e      	ldr	r3, [pc, #56]	; (5bcc <usb_d_ep_enable+0x40>)
    5b92:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5b94:	1e04      	subs	r4, r0, #0
    5b96:	db16      	blt.n	5bc6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5b98:	0163      	lsls	r3, r4, #5
    5b9a:	4a0d      	ldr	r2, [pc, #52]	; (5bd0 <usb_d_ep_enable+0x44>)
    5b9c:	5cd3      	ldrb	r3, [r2, r3]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	bf0c      	ite	eq
    5ba2:	2202      	moveq	r2, #2
    5ba4:	2201      	movne	r2, #1
    5ba6:	4b0a      	ldr	r3, [pc, #40]	; (5bd0 <usb_d_ep_enable+0x44>)
    5ba8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5bac:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5bae:	4628      	mov	r0, r5
    5bb0:	4b08      	ldr	r3, [pc, #32]	; (5bd4 <usb_d_ep_enable+0x48>)
    5bb2:	4798      	blx	r3
	if (rc < 0) {
    5bb4:	2800      	cmp	r0, #0
    5bb6:	db00      	blt.n	5bba <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5bb8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5bba:	4b05      	ldr	r3, [pc, #20]	; (5bd0 <usb_d_ep_enable+0x44>)
    5bbc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5bc0:	2300      	movs	r3, #0
    5bc2:	70a3      	strb	r3, [r4, #2]
    5bc4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5bc6:	f06f 0011 	mvn.w	r0, #17
    5bca:	e7f5      	b.n	5bb8 <usb_d_ep_enable+0x2c>
    5bcc:	00005801 	.word	0x00005801
    5bd0:	2000064c 	.word	0x2000064c
    5bd4:	00009181 	.word	0x00009181

00005bd8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bdc:	b086      	sub	sp, #24
    5bde:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5be0:	7a07      	ldrb	r7, [r0, #8]
    5be2:	4638      	mov	r0, r7
    5be4:	4b3f      	ldr	r3, [pc, #252]	; (5ce4 <usb_d_ep_transfer+0x10c>)
    5be6:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5be8:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5bea:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5bee:	1e06      	subs	r6, r0, #0
    5bf0:	db72      	blt.n	5cd8 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5bf2:	a804      	add	r0, sp, #16
    5bf4:	4b3c      	ldr	r3, [pc, #240]	; (5ce8 <usb_d_ep_transfer+0x110>)
    5bf6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5bf8:	4b3c      	ldr	r3, [pc, #240]	; (5cec <usb_d_ep_transfer+0x114>)
    5bfa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5bfe:	789b      	ldrb	r3, [r3, #2]
    5c00:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5c04:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5c08:	b2db      	uxtb	r3, r3
    5c0a:	2b01      	cmp	r3, #1
    5c0c:	d011      	beq.n	5c32 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    5c0e:	a804      	add	r0, sp, #16
    5c10:	4b37      	ldr	r3, [pc, #220]	; (5cf0 <usb_d_ep_transfer+0x118>)
    5c12:	4798      	blx	r3
		switch (state) {
    5c14:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5c18:	b2db      	uxtb	r3, r3
    5c1a:	2b05      	cmp	r3, #5
    5c1c:	d05f      	beq.n	5cde <usb_d_ep_transfer+0x106>
    5c1e:	2b06      	cmp	r3, #6
    5c20:	d023      	beq.n	5c6a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    5c22:	2b00      	cmp	r3, #0
    5c24:	bf0c      	ite	eq
    5c26:	f06f 0012 	mvneq.w	r0, #18
    5c2a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    5c2c:	b006      	add	sp, #24
    5c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5c32:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5cec <usb_d_ep_transfer+0x114>
    5c36:	ea4f 1946 	mov.w	r9, r6, lsl #5
    5c3a:	eb0a 0309 	add.w	r3, sl, r9
    5c3e:	2203      	movs	r2, #3
    5c40:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5c42:	a804      	add	r0, sp, #16
    5c44:	4b2a      	ldr	r3, [pc, #168]	; (5cf0 <usb_d_ep_transfer+0x118>)
    5c46:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c48:	f81a 3009 	ldrb.w	r3, [sl, r9]
    5c4c:	b183      	cbz	r3, 5c70 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5c4e:	7a22      	ldrb	r2, [r4, #8]
    5c50:	3500      	adds	r5, #0
    5c52:	bf18      	it	ne
    5c54:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    5c56:	6823      	ldr	r3, [r4, #0]
    5c58:	9301      	str	r3, [sp, #4]
    5c5a:	f8cd 8008 	str.w	r8, [sp, #8]
    5c5e:	f017 0f80 	tst.w	r7, #128	; 0x80
    5c62:	d119      	bne.n	5c98 <usb_d_ep_transfer+0xc0>
    5c64:	f002 030f 	and.w	r3, r2, #15
    5c68:	e018      	b.n	5c9c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5c6a:	f06f 000f 	mvn.w	r0, #15
    5c6e:	e7dd      	b.n	5c2c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5c70:	4b1e      	ldr	r3, [pc, #120]	; (5cec <usb_d_ep_transfer+0x114>)
    5c72:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5c76:	7cda      	ldrb	r2, [r3, #19]
    5c78:	7c9d      	ldrb	r5, [r3, #18]
    5c7a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5c7e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5c80:	b9a5      	cbnz	r5, 5cac <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5c82:	4b1a      	ldr	r3, [pc, #104]	; (5cec <usb_d_ep_transfer+0x114>)
    5c84:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5c88:	2304      	movs	r3, #4
    5c8a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5c8c:	2300      	movs	r3, #0
			zlp                 = true;
    5c8e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5c90:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5c92:	6821      	ldr	r1, [r4, #0]
    5c94:	9101      	str	r1, [sp, #4]
    5c96:	9302      	str	r3, [sp, #8]
    5c98:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5c9c:	f88d 300c 	strb.w	r3, [sp, #12]
    5ca0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5ca4:	a801      	add	r0, sp, #4
    5ca6:	4b13      	ldr	r3, [pc, #76]	; (5cf4 <usb_d_ep_transfer+0x11c>)
    5ca8:	4798      	blx	r3
	return rc;
    5caa:	e7bf      	b.n	5c2c <usb_d_ep_transfer+0x54>
    5cac:	4643      	mov	r3, r8
    5cae:	45a8      	cmp	r8, r5
    5cb0:	bf28      	it	cs
    5cb2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5cb4:	4a0d      	ldr	r2, [pc, #52]	; (5cec <usb_d_ep_transfer+0x114>)
    5cb6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5cba:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5cbe:	2a00      	cmp	r2, #0
    5cc0:	db05      	blt.n	5cce <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5cc2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5cc4:	6821      	ldr	r1, [r4, #0]
    5cc6:	9101      	str	r1, [sp, #4]
    5cc8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5cca:	2500      	movs	r5, #0
    5ccc:	e7ca      	b.n	5c64 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5cce:	429d      	cmp	r5, r3
    5cd0:	bf94      	ite	ls
    5cd2:	2500      	movls	r5, #0
    5cd4:	2501      	movhi	r5, #1
    5cd6:	e7db      	b.n	5c90 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5cd8:	f06f 0011 	mvn.w	r0, #17
    5cdc:	e7a6      	b.n	5c2c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5cde:	2002      	movs	r0, #2
    5ce0:	e7a4      	b.n	5c2c <usb_d_ep_transfer+0x54>
    5ce2:	bf00      	nop
    5ce4:	00005801 	.word	0x00005801
    5ce8:	000049b9 	.word	0x000049b9
    5cec:	2000064c 	.word	0x2000064c
    5cf0:	000049c7 	.word	0x000049c7
    5cf4:	000095e1 	.word	0x000095e1

00005cf8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5cf8:	b538      	push	{r3, r4, r5, lr}
    5cfa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5cfc:	b141      	cbz	r1, 5d10 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5cfe:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5d00:	bf0c      	ite	eq
    5d02:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5d04:	2102      	movne	r1, #2
    5d06:	4b13      	ldr	r3, [pc, #76]	; (5d54 <usb_d_ep_halt+0x5c>)
    5d08:	4798      	blx	r3
    5d0a:	4603      	mov	r3, r0
	}
}
    5d0c:	4618      	mov	r0, r3
    5d0e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d10:	4b11      	ldr	r3, [pc, #68]	; (5d58 <usb_d_ep_halt+0x60>)
    5d12:	4798      	blx	r3
	if (ep_index < 0) {
    5d14:	1e05      	subs	r5, r0, #0
    5d16:	db19      	blt.n	5d4c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5d18:	2102      	movs	r1, #2
    5d1a:	4620      	mov	r0, r4
    5d1c:	4b0d      	ldr	r3, [pc, #52]	; (5d54 <usb_d_ep_halt+0x5c>)
    5d1e:	4798      	blx	r3
    5d20:	4603      	mov	r3, r0
    5d22:	2800      	cmp	r0, #0
    5d24:	d0f2      	beq.n	5d0c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5d26:	2100      	movs	r1, #0
    5d28:	4620      	mov	r0, r4
    5d2a:	4b0a      	ldr	r3, [pc, #40]	; (5d54 <usb_d_ep_halt+0x5c>)
    5d2c:	4798      	blx	r3
		if (rc < 0) {
    5d2e:	1e03      	subs	r3, r0, #0
    5d30:	dbec      	blt.n	5d0c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5d32:	4b0a      	ldr	r3, [pc, #40]	; (5d5c <usb_d_ep_halt+0x64>)
    5d34:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    5d38:	2201      	movs	r2, #1
    5d3a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5d3c:	2103      	movs	r1, #3
    5d3e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5d40:	69db      	ldr	r3, [r3, #28]
    5d42:	2200      	movs	r2, #0
    5d44:	4620      	mov	r0, r4
    5d46:	4798      	blx	r3
	return ERR_NONE;
    5d48:	2300      	movs	r3, #0
    5d4a:	e7df      	b.n	5d0c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    5d4c:	f06f 0311 	mvn.w	r3, #17
    5d50:	e7dc      	b.n	5d0c <usb_d_ep_halt+0x14>
    5d52:	bf00      	nop
    5d54:	00009439 	.word	0x00009439
    5d58:	00005801 	.word	0x00005801
    5d5c:	2000064c 	.word	0x2000064c

00005d60 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5d60:	b538      	push	{r3, r4, r5, lr}
    5d62:	460d      	mov	r5, r1
    5d64:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d66:	4b0e      	ldr	r3, [pc, #56]	; (5da0 <usb_d_ep_register_callback+0x40>)
    5d68:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5d6a:	4b0e      	ldr	r3, [pc, #56]	; (5da4 <usb_d_ep_register_callback+0x44>)
    5d6c:	2c00      	cmp	r4, #0
    5d6e:	bf08      	it	eq
    5d70:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5d72:	2800      	cmp	r0, #0
    5d74:	db13      	blt.n	5d9e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5d76:	2d01      	cmp	r5, #1
    5d78:	d008      	beq.n	5d8c <usb_d_ep_register_callback+0x2c>
    5d7a:	b115      	cbz	r5, 5d82 <usb_d_ep_register_callback+0x22>
    5d7c:	2d02      	cmp	r5, #2
    5d7e:	d00a      	beq.n	5d96 <usb_d_ep_register_callback+0x36>
    5d80:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5d82:	4b09      	ldr	r3, [pc, #36]	; (5da8 <usb_d_ep_register_callback+0x48>)
    5d84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5d88:	6144      	str	r4, [r0, #20]
		break;
    5d8a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5d8c:	4b06      	ldr	r3, [pc, #24]	; (5da8 <usb_d_ep_register_callback+0x48>)
    5d8e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5d92:	6184      	str	r4, [r0, #24]
		break;
    5d94:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5d96:	4b04      	ldr	r3, [pc, #16]	; (5da8 <usb_d_ep_register_callback+0x48>)
    5d98:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5d9c:	61c4      	str	r4, [r0, #28]
    5d9e:	bd38      	pop	{r3, r4, r5, pc}
    5da0:	00005801 	.word	0x00005801
    5da4:	00005845 	.word	0x00005845
    5da8:	2000064c 	.word	0x2000064c

00005dac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5dac:	b900      	cbnz	r0, 5db0 <assert+0x4>
		__asm("BKPT #0");
    5dae:	be00      	bkpt	0x0000
    5db0:	4770      	bx	lr

00005db2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5db2:	6803      	ldr	r3, [r0, #0]
    5db4:	b14b      	cbz	r3, 5dca <is_list_element+0x18>
		if (it == element) {
    5db6:	428b      	cmp	r3, r1
    5db8:	d009      	beq.n	5dce <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	b11b      	cbz	r3, 5dc6 <is_list_element+0x14>
		if (it == element) {
    5dbe:	4299      	cmp	r1, r3
    5dc0:	d1fb      	bne.n	5dba <is_list_element+0x8>
			return true;
    5dc2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5dc4:	4770      	bx	lr
	return false;
    5dc6:	2000      	movs	r0, #0
    5dc8:	4770      	bx	lr
    5dca:	2000      	movs	r0, #0
    5dcc:	4770      	bx	lr
			return true;
    5dce:	2001      	movs	r0, #1
    5dd0:	4770      	bx	lr
	...

00005dd4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5dd4:	b538      	push	{r3, r4, r5, lr}
    5dd6:	4604      	mov	r4, r0
    5dd8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5dda:	4b06      	ldr	r3, [pc, #24]	; (5df4 <list_insert_as_head+0x20>)
    5ddc:	4798      	blx	r3
    5dde:	f080 0001 	eor.w	r0, r0, #1
    5de2:	2239      	movs	r2, #57	; 0x39
    5de4:	4904      	ldr	r1, [pc, #16]	; (5df8 <list_insert_as_head+0x24>)
    5de6:	b2c0      	uxtb	r0, r0
    5de8:	4b04      	ldr	r3, [pc, #16]	; (5dfc <list_insert_as_head+0x28>)
    5dea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5dec:	6823      	ldr	r3, [r4, #0]
    5dee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5df0:	6025      	str	r5, [r4, #0]
    5df2:	bd38      	pop	{r3, r4, r5, pc}
    5df4:	00005db3 	.word	0x00005db3
    5df8:	0000db58 	.word	0x0000db58
    5dfc:	00005dad 	.word	0x00005dad

00005e00 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5e00:	6803      	ldr	r3, [r0, #0]
    5e02:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5e04:	6001      	str	r1, [r0, #0]
    5e06:	4770      	bx	lr

00005e08 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5e08:	b570      	push	{r4, r5, r6, lr}
    5e0a:	4605      	mov	r5, r0
    5e0c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5e0e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5e10:	4b0a      	ldr	r3, [pc, #40]	; (5e3c <list_insert_at_end+0x34>)
    5e12:	4798      	blx	r3
    5e14:	f080 0001 	eor.w	r0, r0, #1
    5e18:	224f      	movs	r2, #79	; 0x4f
    5e1a:	4909      	ldr	r1, [pc, #36]	; (5e40 <list_insert_at_end+0x38>)
    5e1c:	b2c0      	uxtb	r0, r0
    5e1e:	4b09      	ldr	r3, [pc, #36]	; (5e44 <list_insert_at_end+0x3c>)
    5e20:	4798      	blx	r3

	if (!list->head) {
    5e22:	682b      	ldr	r3, [r5, #0]
    5e24:	b91b      	cbnz	r3, 5e2e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    5e26:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    5e28:	6033      	str	r3, [r6, #0]
		return;
    5e2a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    5e2c:	461c      	mov	r4, r3
	while (it->next) {
    5e2e:	6823      	ldr	r3, [r4, #0]
    5e30:	2b00      	cmp	r3, #0
    5e32:	d1fb      	bne.n	5e2c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    5e34:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    5e36:	6033      	str	r3, [r6, #0]
    5e38:	bd70      	pop	{r4, r5, r6, pc}
    5e3a:	bf00      	nop
    5e3c:	00005db3 	.word	0x00005db3
    5e40:	0000db58 	.word	0x0000db58
    5e44:	00005dad 	.word	0x00005dad

00005e48 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    5e48:	6803      	ldr	r3, [r0, #0]
    5e4a:	b10b      	cbz	r3, 5e50 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    5e4c:	681a      	ldr	r2, [r3, #0]
    5e4e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    5e50:	4618      	mov	r0, r3
    5e52:	4770      	bx	lr

00005e54 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5e54:	b570      	push	{r4, r5, r6, lr}
    5e56:	460e      	mov	r6, r1
    5e58:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5e5a:	4604      	mov	r4, r0
    5e5c:	b178      	cbz	r0, 5e7e <ringbuffer_init+0x2a>
    5e5e:	b181      	cbz	r1, 5e82 <ringbuffer_init+0x2e>
    5e60:	b1a2      	cbz	r2, 5e8c <ringbuffer_init+0x38>
    5e62:	2001      	movs	r0, #1
    5e64:	2228      	movs	r2, #40	; 0x28
    5e66:	490d      	ldr	r1, [pc, #52]	; (5e9c <ringbuffer_init+0x48>)
    5e68:	4b0d      	ldr	r3, [pc, #52]	; (5ea0 <ringbuffer_init+0x4c>)
    5e6a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5e6c:	1e6b      	subs	r3, r5, #1
    5e6e:	421d      	tst	r5, r3
    5e70:	d109      	bne.n	5e86 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5e72:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5e74:	2000      	movs	r0, #0
    5e76:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5e78:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5e7a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5e7c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5e7e:	2000      	movs	r0, #0
    5e80:	e7f0      	b.n	5e64 <ringbuffer_init+0x10>
    5e82:	2000      	movs	r0, #0
    5e84:	e7ee      	b.n	5e64 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5e86:	f06f 000c 	mvn.w	r0, #12
    5e8a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5e8c:	2228      	movs	r2, #40	; 0x28
    5e8e:	4903      	ldr	r1, [pc, #12]	; (5e9c <ringbuffer_init+0x48>)
    5e90:	2000      	movs	r0, #0
    5e92:	4b03      	ldr	r3, [pc, #12]	; (5ea0 <ringbuffer_init+0x4c>)
    5e94:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5e96:	1e6b      	subs	r3, r5, #1
    5e98:	e7eb      	b.n	5e72 <ringbuffer_init+0x1e>
    5e9a:	bf00      	nop
    5e9c:	0000db78 	.word	0x0000db78
    5ea0:	00005dad 	.word	0x00005dad

00005ea4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5ea4:	b538      	push	{r3, r4, r5, lr}
    5ea6:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5ea8:	4604      	mov	r4, r0
    5eaa:	b1a0      	cbz	r0, 5ed6 <ringbuffer_get+0x32>
    5eac:	1c08      	adds	r0, r1, #0
    5eae:	bf18      	it	ne
    5eb0:	2001      	movne	r0, #1
    5eb2:	2240      	movs	r2, #64	; 0x40
    5eb4:	490a      	ldr	r1, [pc, #40]	; (5ee0 <ringbuffer_get+0x3c>)
    5eb6:	4b0b      	ldr	r3, [pc, #44]	; (5ee4 <ringbuffer_get+0x40>)
    5eb8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5eba:	68a3      	ldr	r3, [r4, #8]
    5ebc:	68e2      	ldr	r2, [r4, #12]
    5ebe:	429a      	cmp	r2, r3
    5ec0:	d00b      	beq.n	5eda <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5ec2:	6862      	ldr	r2, [r4, #4]
    5ec4:	4013      	ands	r3, r2
    5ec6:	6822      	ldr	r2, [r4, #0]
    5ec8:	5cd3      	ldrb	r3, [r2, r3]
    5eca:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5ecc:	68a3      	ldr	r3, [r4, #8]
    5ece:	3301      	adds	r3, #1
    5ed0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5ed2:	2000      	movs	r0, #0
    5ed4:	bd38      	pop	{r3, r4, r5, pc}
    5ed6:	2000      	movs	r0, #0
    5ed8:	e7eb      	b.n	5eb2 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5eda:	f06f 0009 	mvn.w	r0, #9
}
    5ede:	bd38      	pop	{r3, r4, r5, pc}
    5ee0:	0000db78 	.word	0x0000db78
    5ee4:	00005dad 	.word	0x00005dad

00005ee8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5ee8:	b538      	push	{r3, r4, r5, lr}
    5eea:	460d      	mov	r5, r1
	ASSERT(rb);
    5eec:	4604      	mov	r4, r0
    5eee:	2251      	movs	r2, #81	; 0x51
    5ef0:	490b      	ldr	r1, [pc, #44]	; (5f20 <ringbuffer_put+0x38>)
    5ef2:	3000      	adds	r0, #0
    5ef4:	bf18      	it	ne
    5ef6:	2001      	movne	r0, #1
    5ef8:	4b0a      	ldr	r3, [pc, #40]	; (5f24 <ringbuffer_put+0x3c>)
    5efa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5efc:	68e3      	ldr	r3, [r4, #12]
    5efe:	6862      	ldr	r2, [r4, #4]
    5f00:	4013      	ands	r3, r2
    5f02:	6822      	ldr	r2, [r4, #0]
    5f04:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5f06:	68e3      	ldr	r3, [r4, #12]
    5f08:	6861      	ldr	r1, [r4, #4]
    5f0a:	68a2      	ldr	r2, [r4, #8]
    5f0c:	1a9a      	subs	r2, r3, r2
    5f0e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5f10:	bf84      	itt	hi
    5f12:	1a59      	subhi	r1, r3, r1
    5f14:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5f16:	3301      	adds	r3, #1
    5f18:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5f1a:	2000      	movs	r0, #0
    5f1c:	bd38      	pop	{r3, r4, r5, pc}
    5f1e:	bf00      	nop
    5f20:	0000db78 	.word	0x0000db78
    5f24:	00005dad 	.word	0x00005dad

00005f28 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5f28:	b510      	push	{r4, lr}
	ASSERT(rb);
    5f2a:	4604      	mov	r4, r0
    5f2c:	2267      	movs	r2, #103	; 0x67
    5f2e:	4905      	ldr	r1, [pc, #20]	; (5f44 <ringbuffer_num+0x1c>)
    5f30:	3000      	adds	r0, #0
    5f32:	bf18      	it	ne
    5f34:	2001      	movne	r0, #1
    5f36:	4b04      	ldr	r3, [pc, #16]	; (5f48 <ringbuffer_num+0x20>)
    5f38:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5f3a:	68e0      	ldr	r0, [r4, #12]
    5f3c:	68a3      	ldr	r3, [r4, #8]
}
    5f3e:	1ac0      	subs	r0, r0, r3
    5f40:	bd10      	pop	{r4, pc}
    5f42:	bf00      	nop
    5f44:	0000db78 	.word	0x0000db78
    5f48:	00005dad 	.word	0x00005dad

00005f4c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5f4c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5f4e:	4a06      	ldr	r2, [pc, #24]	; (5f68 <_sbrk+0x1c>)
    5f50:	6812      	ldr	r2, [r2, #0]
    5f52:	b122      	cbz	r2, 5f5e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5f54:	4a04      	ldr	r2, [pc, #16]	; (5f68 <_sbrk+0x1c>)
    5f56:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5f58:	4403      	add	r3, r0
    5f5a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5f5c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5f5e:	4903      	ldr	r1, [pc, #12]	; (5f6c <_sbrk+0x20>)
    5f60:	4a01      	ldr	r2, [pc, #4]	; (5f68 <_sbrk+0x1c>)
    5f62:	6011      	str	r1, [r2, #0]
    5f64:	e7f6      	b.n	5f54 <_sbrk+0x8>
    5f66:	bf00      	nop
    5f68:	200007ec 	.word	0x200007ec
    5f6c:	20013c50 	.word	0x20013c50

00005f70 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5f70:	f04f 30ff 	mov.w	r0, #4294967295
    5f74:	4770      	bx	lr

00005f76 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    5f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5f7a:	604b      	str	r3, [r1, #4]

	return 0;
}
    5f7c:	2000      	movs	r0, #0
    5f7e:	4770      	bx	lr

00005f80 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5f80:	2001      	movs	r0, #1
    5f82:	4770      	bx	lr

00005f84 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    5f84:	2000      	movs	r0, #0
    5f86:	4770      	bx	lr

00005f88 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5f88:	6940      	ldr	r0, [r0, #20]
    5f8a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5f8e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5f92:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5f94:	0040      	lsls	r0, r0, #1
    5f96:	3076      	adds	r0, #118	; 0x76
}
    5f98:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5f9c:	4770      	bx	lr
	...

00005fa0 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5fa0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5fa2:	f013 0f01 	tst.w	r3, #1
    5fa6:	d11b      	bne.n	5fe0 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5fa8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5faa:	f013 0f03 	tst.w	r3, #3
    5fae:	d1fb      	bne.n	5fa8 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5fb0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5fb2:	f013 0f02 	tst.w	r3, #2
    5fb6:	d00d      	beq.n	5fd4 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5fb8:	8803      	ldrh	r3, [r0, #0]
    5fba:	f023 0302 	bic.w	r3, r3, #2
    5fbe:	041b      	lsls	r3, r3, #16
    5fc0:	0c1b      	lsrs	r3, r3, #16
    5fc2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5fc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5fc6:	f013 0f03 	tst.w	r3, #3
    5fca:	d1fb      	bne.n	5fc4 <_adc_init+0x24>
    5fcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5fce:	f013 0f02 	tst.w	r3, #2
    5fd2:	d1fb      	bne.n	5fcc <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5fd4:	2301      	movs	r3, #1
    5fd6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5fd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5fda:	f013 0f03 	tst.w	r3, #3
    5fde:	d1fb      	bne.n	5fd8 <_adc_init+0x38>
    5fe0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5fe2:	f013 0f01 	tst.w	r3, #1
    5fe6:	d1fb      	bne.n	5fe0 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5fe8:	2316      	movs	r3, #22
    5fea:	4a37      	ldr	r2, [pc, #220]	; (60c8 <_adc_init+0x128>)
    5fec:	fb03 2301 	mla	r3, r3, r1, r2
    5ff0:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5ff2:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5ff4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d1fa      	bne.n	5ff4 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5ffe:	2316      	movs	r3, #22
    6000:	4a31      	ldr	r2, [pc, #196]	; (60c8 <_adc_init+0x128>)
    6002:	fb03 2301 	mla	r3, r3, r1, r2
    6006:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    6008:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    600a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    600c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6010:	2b00      	cmp	r3, #0
    6012:	d1fa      	bne.n	600a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    6014:	2316      	movs	r3, #22
    6016:	4a2c      	ldr	r2, [pc, #176]	; (60c8 <_adc_init+0x128>)
    6018:	fb03 2301 	mla	r3, r3, r1, r2
    601c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    601e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    6020:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    6022:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6024:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6026:	f3c3 030b 	ubfx	r3, r3, #0, #12
    602a:	2b00      	cmp	r3, #0
    602c:	d1fa      	bne.n	6024 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    602e:	2316      	movs	r3, #22
    6030:	4a25      	ldr	r2, [pc, #148]	; (60c8 <_adc_init+0x128>)
    6032:	fb03 2301 	mla	r3, r3, r1, r2
    6036:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    6038:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    603a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    603c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6040:	2b00      	cmp	r3, #0
    6042:	d1fa      	bne.n	603a <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    6044:	2316      	movs	r3, #22
    6046:	4a20      	ldr	r2, [pc, #128]	; (60c8 <_adc_init+0x128>)
    6048:	fb03 2301 	mla	r3, r3, r1, r2
    604c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    604e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6050:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6052:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6056:	2b00      	cmp	r3, #0
    6058:	d1fa      	bne.n	6050 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    605a:	2316      	movs	r3, #22
    605c:	4a1a      	ldr	r2, [pc, #104]	; (60c8 <_adc_init+0x128>)
    605e:	fb03 2301 	mla	r3, r3, r1, r2
    6062:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    6064:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6066:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6068:	f013 0f80 	tst.w	r3, #128	; 0x80
    606c:	d1fb      	bne.n	6066 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    606e:	2316      	movs	r3, #22
    6070:	4a15      	ldr	r2, [pc, #84]	; (60c8 <_adc_init+0x128>)
    6072:	fb03 2301 	mla	r3, r3, r1, r2
    6076:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    6078:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    607a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    607c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6080:	d1fb      	bne.n	607a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    6082:	2316      	movs	r3, #22
    6084:	4a10      	ldr	r2, [pc, #64]	; (60c8 <_adc_init+0x128>)
    6086:	fb03 2301 	mla	r3, r3, r1, r2
    608a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    608c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    608e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6090:	f413 7f00 	tst.w	r3, #512	; 0x200
    6094:	d1fb      	bne.n	608e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    6096:	2316      	movs	r3, #22
    6098:	4a0b      	ldr	r2, [pc, #44]	; (60c8 <_adc_init+0x128>)
    609a:	fb03 2301 	mla	r3, r3, r1, r2
    609e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    60a0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    60a8:	d1fb      	bne.n	60a2 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    60aa:	2216      	movs	r2, #22
    60ac:	4b06      	ldr	r3, [pc, #24]	; (60c8 <_adc_init+0x128>)
    60ae:	fb02 3101 	mla	r1, r2, r1, r3
    60b2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    60b4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    60b6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    60b8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60bc:	f013 0f03 	tst.w	r3, #3
    60c0:	d1fb      	bne.n	60ba <_adc_init+0x11a>

	return ERR_NONE;
}
    60c2:	2000      	movs	r0, #0
    60c4:	4770      	bx	lr
    60c6:	bf00      	nop
    60c8:	0000db9c 	.word	0x0000db9c

000060cc <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    60cc:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    60ce:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    60d0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    60d4:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    60d8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    60da:	f013 0f01 	tst.w	r3, #1
    60de:	d106      	bne.n	60ee <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    60e0:	f013 0f02 	tst.w	r3, #2
    60e4:	d10d      	bne.n	6102 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    60e6:	f013 0f04 	tst.w	r3, #4
    60ea:	d111      	bne.n	6110 <_adc_interrupt_handler+0x44>
    60ec:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    60ee:	2301      	movs	r3, #1
    60f0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    60f4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    60f8:	6883      	ldr	r3, [r0, #8]
    60fa:	b292      	uxth	r2, r2
    60fc:	2100      	movs	r1, #0
    60fe:	4798      	blx	r3
    6100:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    6102:	2302      	movs	r3, #2
    6104:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    6108:	6843      	ldr	r3, [r0, #4]
    610a:	2100      	movs	r1, #0
    610c:	4798      	blx	r3
    610e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6110:	2304      	movs	r3, #4
    6112:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    6116:	6803      	ldr	r3, [r0, #0]
    6118:	2100      	movs	r1, #0
    611a:	4798      	blx	r3
	}
}
    611c:	e7e6      	b.n	60ec <_adc_interrupt_handler+0x20>
	...

00006120 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6120:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6124:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6128:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    612c:	b148      	cbz	r0, 6142 <_adc_get_regs+0x22>
    612e:	2801      	cmp	r0, #1
    6130:	d009      	beq.n	6146 <_adc_get_regs+0x26>
{
    6132:	b508      	push	{r3, lr}
	ASSERT(false);
    6134:	228c      	movs	r2, #140	; 0x8c
    6136:	4905      	ldr	r1, [pc, #20]	; (614c <_adc_get_regs+0x2c>)
    6138:	2000      	movs	r0, #0
    613a:	4b05      	ldr	r3, [pc, #20]	; (6150 <_adc_get_regs+0x30>)
    613c:	4798      	blx	r3
	return 0;
    613e:	2000      	movs	r0, #0
    6140:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    6142:	2000      	movs	r0, #0
    6144:	4770      	bx	lr
    6146:	2001      	movs	r0, #1
    6148:	4770      	bx	lr
    614a:	bf00      	nop
    614c:	0000dbc8 	.word	0x0000dbc8
    6150:	00005dad 	.word	0x00005dad

00006154 <_adc_async_init>:
{
    6154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6158:	460c      	mov	r4, r1
	ASSERT(device);
    615a:	4605      	mov	r5, r0
    615c:	22e6      	movs	r2, #230	; 0xe6
    615e:	493b      	ldr	r1, [pc, #236]	; (624c <_adc_async_init+0xf8>)
    6160:	3000      	adds	r0, #0
    6162:	bf18      	it	ne
    6164:	2001      	movne	r0, #1
    6166:	4b3a      	ldr	r3, [pc, #232]	; (6250 <_adc_async_init+0xfc>)
    6168:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    616a:	4620      	mov	r0, r4
    616c:	4b39      	ldr	r3, [pc, #228]	; (6254 <_adc_async_init+0x100>)
    616e:	4798      	blx	r3
    6170:	4601      	mov	r1, r0
    6172:	4620      	mov	r0, r4
    6174:	4b38      	ldr	r3, [pc, #224]	; (6258 <_adc_async_init+0x104>)
    6176:	4798      	blx	r3
	if (init_status) {
    6178:	4606      	mov	r6, r0
    617a:	b110      	cbz	r0, 6182 <_adc_async_init+0x2e>
}
    617c:	4630      	mov	r0, r6
    617e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6182:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6184:	4b35      	ldr	r3, [pc, #212]	; (625c <_adc_async_init+0x108>)
    6186:	429c      	cmp	r4, r3
    6188:	d05c      	beq.n	6244 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    618a:	4b35      	ldr	r3, [pc, #212]	; (6260 <_adc_async_init+0x10c>)
    618c:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    618e:	bf04      	itt	eq
    6190:	4b34      	ldreq	r3, [pc, #208]	; (6264 <_adc_async_init+0x110>)
    6192:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6194:	4628      	mov	r0, r5
    6196:	4f34      	ldr	r7, [pc, #208]	; (6268 <_adc_async_init+0x114>)
    6198:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    619a:	0943      	lsrs	r3, r0, #5
    619c:	f000 001f 	and.w	r0, r0, #31
    61a0:	2401      	movs	r4, #1
    61a2:	fa04 f000 	lsl.w	r0, r4, r0
    61a6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 626c <_adc_async_init+0x118>
    61aa:	3320      	adds	r3, #32
    61ac:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    61b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    61b4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    61b8:	4628      	mov	r0, r5
    61ba:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61bc:	0943      	lsrs	r3, r0, #5
    61be:	f000 001f 	and.w	r0, r0, #31
    61c2:	fa04 f000 	lsl.w	r0, r4, r0
    61c6:	3360      	adds	r3, #96	; 0x60
    61c8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    61cc:	4628      	mov	r0, r5
    61ce:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61d0:	0943      	lsrs	r3, r0, #5
    61d2:	f000 001f 	and.w	r0, r0, #31
    61d6:	4084      	lsls	r4, r0
    61d8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    61dc:	4628      	mov	r0, r5
    61de:	47b8      	blx	r7
    61e0:	3001      	adds	r0, #1
    61e2:	b280      	uxth	r0, r0
    61e4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    61e6:	2b00      	cmp	r3, #0
    61e8:	dbc8      	blt.n	617c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61ea:	095b      	lsrs	r3, r3, #5
    61ec:	f000 001f 	and.w	r0, r0, #31
    61f0:	2201      	movs	r2, #1
    61f2:	fa02 f000 	lsl.w	r0, r2, r0
    61f6:	3320      	adds	r3, #32
    61f8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    61fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6200:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    6204:	4628      	mov	r0, r5
    6206:	47b8      	blx	r7
    6208:	3001      	adds	r0, #1
    620a:	b280      	uxth	r0, r0
    620c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    620e:	2b00      	cmp	r3, #0
    6210:	dbb4      	blt.n	617c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6212:	095b      	lsrs	r3, r3, #5
    6214:	f000 001f 	and.w	r0, r0, #31
    6218:	2201      	movs	r2, #1
    621a:	fa02 f000 	lsl.w	r0, r2, r0
    621e:	3360      	adds	r3, #96	; 0x60
    6220:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    6224:	4628      	mov	r0, r5
    6226:	47b8      	blx	r7
    6228:	3001      	adds	r0, #1
    622a:	b280      	uxth	r0, r0
    622c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    622e:	2b00      	cmp	r3, #0
    6230:	dba4      	blt.n	617c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6232:	095b      	lsrs	r3, r3, #5
    6234:	f000 001f 	and.w	r0, r0, #31
    6238:	2201      	movs	r2, #1
    623a:	fa02 f000 	lsl.w	r0, r2, r0
    623e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    6242:	e79b      	b.n	617c <_adc_async_init+0x28>
		_adc0_dev = dev;
    6244:	4b07      	ldr	r3, [pc, #28]	; (6264 <_adc_async_init+0x110>)
    6246:	601d      	str	r5, [r3, #0]
    6248:	e7a4      	b.n	6194 <_adc_async_init+0x40>
    624a:	bf00      	nop
    624c:	0000dbc8 	.word	0x0000dbc8
    6250:	00005dad 	.word	0x00005dad
    6254:	00006121 	.word	0x00006121
    6258:	00005fa1 	.word	0x00005fa1
    625c:	43001c00 	.word	0x43001c00
    6260:	43002000 	.word	0x43002000
    6264:	200007f0 	.word	0x200007f0
    6268:	00005f89 	.word	0x00005f89
    626c:	e000e100 	.word	0xe000e100

00006270 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    6270:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6272:	8813      	ldrh	r3, [r2, #0]
    6274:	b29b      	uxth	r3, r3
    6276:	f043 0302 	orr.w	r3, r3, #2
    627a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    627c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    627e:	f013 0f03 	tst.w	r3, #3
    6282:	d1fb      	bne.n	627c <_adc_async_enable_channel+0xc>
}
    6284:	4770      	bx	lr

00006286 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6286:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6288:	88db      	ldrh	r3, [r3, #6]
    628a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    628e:	2b03      	cmp	r3, #3
}
    6290:	bf0c      	ite	eq
    6292:	2001      	moveq	r0, #1
    6294:	2002      	movne	r0, #2
    6296:	4770      	bx	lr

00006298 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    6298:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    629a:	7d13      	ldrb	r3, [r2, #20]
    629c:	f043 0302 	orr.w	r3, r3, #2
    62a0:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    62a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    62a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    62a8:	2b00      	cmp	r3, #0
    62aa:	d1fa      	bne.n	62a2 <_adc_async_convert+0xa>
}
    62ac:	4770      	bx	lr

000062ae <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    62ae:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    62b0:	2a01      	cmp	r2, #1
    62b2:	d007      	beq.n	62c4 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    62b4:	2a02      	cmp	r2, #2
    62b6:	d00e      	beq.n	62d6 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    62b8:	b91a      	cbnz	r2, 62c2 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    62ba:	b1ab      	cbz	r3, 62e8 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    62bc:	2301      	movs	r3, #1
    62be:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    62c2:	4770      	bx	lr
	if (value == 0x0) {
    62c4:	b91b      	cbnz	r3, 62ce <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    62c6:	2304      	movs	r3, #4
    62c8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    62cc:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    62ce:	2304      	movs	r3, #4
    62d0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    62d4:	4770      	bx	lr
	if (value == 0x0) {
    62d6:	b91b      	cbnz	r3, 62e0 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    62d8:	2302      	movs	r3, #2
    62da:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    62de:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    62e0:	2302      	movs	r3, #2
    62e2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    62e6:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    62e8:	2301      	movs	r3, #1
    62ea:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    62ee:	4770      	bx	lr

000062f0 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    62f0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    62f2:	4b02      	ldr	r3, [pc, #8]	; (62fc <ADC0_0_Handler+0xc>)
    62f4:	6818      	ldr	r0, [r3, #0]
    62f6:	4b02      	ldr	r3, [pc, #8]	; (6300 <ADC0_0_Handler+0x10>)
    62f8:	4798      	blx	r3
    62fa:	bd08      	pop	{r3, pc}
    62fc:	200007f0 	.word	0x200007f0
    6300:	000060cd 	.word	0x000060cd

00006304 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    6304:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6306:	4b02      	ldr	r3, [pc, #8]	; (6310 <ADC0_1_Handler+0xc>)
    6308:	6818      	ldr	r0, [r3, #0]
    630a:	4b02      	ldr	r3, [pc, #8]	; (6314 <ADC0_1_Handler+0x10>)
    630c:	4798      	blx	r3
    630e:	bd08      	pop	{r3, pc}
    6310:	200007f0 	.word	0x200007f0
    6314:	000060cd 	.word	0x000060cd

00006318 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    6318:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    631a:	4b02      	ldr	r3, [pc, #8]	; (6324 <ADC1_0_Handler+0xc>)
    631c:	6858      	ldr	r0, [r3, #4]
    631e:	4b02      	ldr	r3, [pc, #8]	; (6328 <ADC1_0_Handler+0x10>)
    6320:	4798      	blx	r3
    6322:	bd08      	pop	{r3, pc}
    6324:	200007f0 	.word	0x200007f0
    6328:	000060cd 	.word	0x000060cd

0000632c <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    632c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    632e:	4b02      	ldr	r3, [pc, #8]	; (6338 <ADC1_1_Handler+0xc>)
    6330:	6858      	ldr	r0, [r3, #4]
    6332:	4b02      	ldr	r3, [pc, #8]	; (633c <ADC1_1_Handler+0x10>)
    6334:	4798      	blx	r3
    6336:	bd08      	pop	{r3, pc}
    6338:	200007f0 	.word	0x200007f0
    633c:	000060cd 	.word	0x000060cd

00006340 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6340:	0943      	lsrs	r3, r0, #5
    6342:	f000 001f 	and.w	r0, r0, #31
    6346:	2201      	movs	r2, #1
    6348:	fa02 f000 	lsl.w	r0, r2, r0
    634c:	3340      	adds	r3, #64	; 0x40
    634e:	4a02      	ldr	r2, [pc, #8]	; (6358 <_irq_set+0x18>)
    6350:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6354:	4770      	bx	lr
    6356:	bf00      	nop
    6358:	e000e100 	.word	0xe000e100

0000635c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    635c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6360:	00c0      	lsls	r0, r0, #3
    6362:	4770      	bx	lr

00006364 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6364:	4b01      	ldr	r3, [pc, #4]	; (636c <_get_cycles_for_ms+0x8>)
    6366:	fb03 f000 	mul.w	r0, r3, r0
    636a:	4770      	bx	lr
    636c:	0001d4c0 	.word	0x0001d4c0

00006370 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6370:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6372:	4a0e      	ldr	r2, [pc, #56]	; (63ac <_init_chip+0x3c>)
    6374:	8813      	ldrh	r3, [r2, #0]
    6376:	b29b      	uxth	r3, r3
    6378:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    637c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    637e:	4b0c      	ldr	r3, [pc, #48]	; (63b0 <_init_chip+0x40>)
    6380:	4798      	blx	r3
	_oscctrl_init_sources();
    6382:	4b0c      	ldr	r3, [pc, #48]	; (63b4 <_init_chip+0x44>)
    6384:	4798      	blx	r3
	_mclk_init();
    6386:	4b0c      	ldr	r3, [pc, #48]	; (63b8 <_init_chip+0x48>)
    6388:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    638a:	2004      	movs	r0, #4
    638c:	4c0b      	ldr	r4, [pc, #44]	; (63bc <_init_chip+0x4c>)
    638e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6390:	4b0b      	ldr	r3, [pc, #44]	; (63c0 <_init_chip+0x50>)
    6392:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6394:	f640 70fb 	movw	r0, #4091	; 0xffb
    6398:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    639a:	4a0a      	ldr	r2, [pc, #40]	; (63c4 <_init_chip+0x54>)
    639c:	6913      	ldr	r3, [r2, #16]
    639e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    63a2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    63a4:	4b08      	ldr	r3, [pc, #32]	; (63c8 <_init_chip+0x58>)
    63a6:	4798      	blx	r3
    63a8:	bd10      	pop	{r4, pc}
    63aa:	bf00      	nop
    63ac:	41004000 	.word	0x41004000
    63b0:	0000684d 	.word	0x0000684d
    63b4:	00006861 	.word	0x00006861
    63b8:	00006775 	.word	0x00006775
    63bc:	000066fd 	.word	0x000066fd
    63c0:	00006865 	.word	0x00006865
    63c4:	40000800 	.word	0x40000800
    63c8:	00006441 	.word	0x00006441

000063cc <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    63cc:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    63ce:	4a1a      	ldr	r2, [pc, #104]	; (6438 <_dmac_handler+0x6c>)
    63d0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    63d2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    63d6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    63da:	4818      	ldr	r0, [pc, #96]	; (643c <_dmac_handler+0x70>)
    63dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    63e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    63e4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    63e8:	f012 0f01 	tst.w	r2, #1
    63ec:	d10a      	bne.n	6404 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    63ee:	011a      	lsls	r2, r3, #4
    63f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    63f4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    63f8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    63fc:	f012 0f02 	tst.w	r2, #2
    6400:	d10b      	bne.n	641a <_dmac_handler+0x4e>
    6402:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    6404:	011a      	lsls	r2, r3, #4
    6406:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    640a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    640e:	2101      	movs	r1, #1
    6410:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    6414:	6843      	ldr	r3, [r0, #4]
    6416:	4798      	blx	r3
    6418:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    641a:	011a      	lsls	r2, r3, #4
    641c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6420:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6424:	2102      	movs	r1, #2
    6426:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    642a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    642e:	4a03      	ldr	r2, [pc, #12]	; (643c <_dmac_handler+0x70>)
    6430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6434:	4798      	blx	r3
	}
}
    6436:	e7e4      	b.n	6402 <_dmac_handler+0x36>
    6438:	4100a000 	.word	0x4100a000
    643c:	200007f8 	.word	0x200007f8

00006440 <_dma_init>:
{
    6440:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6442:	4a32      	ldr	r2, [pc, #200]	; (650c <_dma_init+0xcc>)
    6444:	8813      	ldrh	r3, [r2, #0]
    6446:	f023 0302 	bic.w	r3, r3, #2
    644a:	041b      	lsls	r3, r3, #16
    644c:	0c1b      	lsrs	r3, r3, #16
    644e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    6450:	8853      	ldrh	r3, [r2, #2]
    6452:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6456:	041b      	lsls	r3, r3, #16
    6458:	0c1b      	lsrs	r3, r3, #16
    645a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    645c:	8813      	ldrh	r3, [r2, #0]
    645e:	b29b      	uxth	r3, r3
    6460:	f043 0301 	orr.w	r3, r3, #1
    6464:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6466:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6468:	f013 0f01 	tst.w	r3, #1
    646c:	d1fb      	bne.n	6466 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    646e:	4b27      	ldr	r3, [pc, #156]	; (650c <_dma_init+0xcc>)
    6470:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6474:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6476:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    647c:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    6480:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    6482:	2100      	movs	r1, #0
    6484:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6486:	4a22      	ldr	r2, [pc, #136]	; (6510 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6488:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    648a:	4a22      	ldr	r2, [pc, #136]	; (6514 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    648c:	639a      	str	r2, [r3, #56]	; 0x38
    648e:	4b22      	ldr	r3, [pc, #136]	; (6518 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6490:	4c1f      	ldr	r4, [pc, #124]	; (6510 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6492:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6494:	681d      	ldr	r5, [r3, #0]
    6496:	0108      	lsls	r0, r1, #4
    6498:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    649c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    64a0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    64a2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    64a4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    64a8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    64aa:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    64ae:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    64b0:	1822      	adds	r2, r4, r0
    64b2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    64b4:	60d6      	str	r6, [r2, #12]
    64b6:	3101      	adds	r1, #1
    64b8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    64ba:	2920      	cmp	r1, #32
    64bc:	d1ea      	bne.n	6494 <_dma_init+0x54>
    64be:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64c0:	2001      	movs	r0, #1
    64c2:	4916      	ldr	r1, [pc, #88]	; (651c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    64c4:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    64c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    64ca:	d00b      	beq.n	64e4 <_dma_init+0xa4>
    64cc:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    64ce:	2b24      	cmp	r3, #36	; 0x24
    64d0:	d1f8      	bne.n	64c4 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    64d2:	4a0e      	ldr	r2, [pc, #56]	; (650c <_dma_init+0xcc>)
    64d4:	8813      	ldrh	r3, [r2, #0]
    64d6:	b29b      	uxth	r3, r3
    64d8:	f043 0302 	orr.w	r3, r3, #2
    64dc:	8013      	strh	r3, [r2, #0]
}
    64de:	2000      	movs	r0, #0
    64e0:	bc70      	pop	{r4, r5, r6}
    64e2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64e4:	095c      	lsrs	r4, r3, #5
    64e6:	f002 021f 	and.w	r2, r2, #31
    64ea:	fa00 f202 	lsl.w	r2, r0, r2
    64ee:	f104 0520 	add.w	r5, r4, #32
    64f2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    64f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64fa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64fe:	f104 0560 	add.w	r5, r4, #96	; 0x60
    6502:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6506:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    650a:	e7df      	b.n	64cc <_dma_init+0x8c>
    650c:	4100a000 	.word	0x4100a000
    6510:	20003800 	.word	0x20003800
    6514:	20003a00 	.word	0x20003a00
    6518:	0000dbe0 	.word	0x0000dbe0
    651c:	e000e100 	.word	0xe000e100

00006520 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    6520:	b991      	cbnz	r1, 6548 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    6522:	b942      	cbnz	r2, 6536 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    6524:	0100      	lsls	r0, r0, #4
    6526:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    652a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    652e:	2302      	movs	r3, #2
    6530:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    6534:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    6536:	0100      	lsls	r0, r0, #4
    6538:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    653c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6540:	2302      	movs	r3, #2
    6542:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    6546:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    6548:	2901      	cmp	r1, #1
    654a:	d000      	beq.n	654e <_dma_set_irq_state+0x2e>
    654c:	4770      	bx	lr
	if (value == 0x0) {
    654e:	b142      	cbz	r2, 6562 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    6550:	0100      	lsls	r0, r0, #4
    6552:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6556:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    655a:	2301      	movs	r3, #1
    655c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    6560:	e7f4      	b.n	654c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    6562:	0100      	lsls	r0, r0, #4
    6564:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6568:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    656c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    6570:	4770      	bx	lr
	...

00006574 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6574:	4b02      	ldr	r3, [pc, #8]	; (6580 <_dma_set_destination_address+0xc>)
    6576:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    657a:	6081      	str	r1, [r0, #8]
}
    657c:	2000      	movs	r0, #0
    657e:	4770      	bx	lr
    6580:	20003800 	.word	0x20003800

00006584 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6584:	4b02      	ldr	r3, [pc, #8]	; (6590 <_dma_set_source_address+0xc>)
    6586:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    658a:	6041      	str	r1, [r0, #4]
}
    658c:	2000      	movs	r0, #0
    658e:	4770      	bx	lr
    6590:	20003800 	.word	0x20003800

00006594 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6594:	4a05      	ldr	r2, [pc, #20]	; (65ac <_dma_srcinc_enable+0x18>)
    6596:	0100      	lsls	r0, r0, #4
    6598:	5a13      	ldrh	r3, [r2, r0]
    659a:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    659c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    65a0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    65a4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    65a6:	5211      	strh	r1, [r2, r0]
}
    65a8:	2000      	movs	r0, #0
    65aa:	4770      	bx	lr
    65ac:	20003800 	.word	0x20003800

000065b0 <_dma_set_data_amount>:
{
    65b0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    65b2:	4c14      	ldr	r4, [pc, #80]	; (6604 <_dma_set_data_amount+0x54>)
    65b4:	0102      	lsls	r2, r0, #4
    65b6:	18a3      	adds	r3, r4, r2
    65b8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    65ba:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    65bc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    65c0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    65c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    65c6:	d006      	beq.n	65d6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    65c8:	fa01 f403 	lsl.w	r4, r1, r3
    65cc:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    65ce:	4a0d      	ldr	r2, [pc, #52]	; (6604 <_dma_set_data_amount+0x54>)
    65d0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    65d4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    65d6:	4c0b      	ldr	r4, [pc, #44]	; (6604 <_dma_set_data_amount+0x54>)
    65d8:	0102      	lsls	r2, r0, #4
    65da:	18a5      	adds	r5, r4, r2
    65dc:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    65de:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    65e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    65e4:	d005      	beq.n	65f2 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    65e6:	fa01 f303 	lsl.w	r3, r1, r3
    65ea:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    65ec:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    65f0:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    65f2:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    65f4:	4b03      	ldr	r3, [pc, #12]	; (6604 <_dma_set_data_amount+0x54>)
    65f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    65fa:	8041      	strh	r1, [r0, #2]
}
    65fc:	2000      	movs	r0, #0
    65fe:	bc30      	pop	{r4, r5}
    6600:	4770      	bx	lr
    6602:	bf00      	nop
    6604:	20003800 	.word	0x20003800

00006608 <_dma_enable_transaction>:
{
    6608:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    660a:	4c0d      	ldr	r4, [pc, #52]	; (6640 <_dma_enable_transaction+0x38>)
    660c:	0103      	lsls	r3, r0, #4
    660e:	5ae2      	ldrh	r2, [r4, r3]
    6610:	b292      	uxth	r2, r2
    6612:	f042 0201 	orr.w	r2, r2, #1
    6616:	52e2      	strh	r2, [r4, r3]
    6618:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    661c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    6620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6622:	f042 0202 	orr.w	r2, r2, #2
    6626:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    6628:	b131      	cbz	r1, 6638 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    662a:	4a06      	ldr	r2, [pc, #24]	; (6644 <_dma_enable_transaction+0x3c>)
    662c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    662e:	2301      	movs	r3, #1
    6630:	fa03 f000 	lsl.w	r0, r3, r0
    6634:	4308      	orrs	r0, r1
    6636:	6110      	str	r0, [r2, #16]
}
    6638:	2000      	movs	r0, #0
    663a:	f85d 4b04 	ldr.w	r4, [sp], #4
    663e:	4770      	bx	lr
    6640:	20003800 	.word	0x20003800
    6644:	4100a000 	.word	0x4100a000

00006648 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    6648:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    664c:	4b02      	ldr	r3, [pc, #8]	; (6658 <_dma_get_channel_resource+0x10>)
    664e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6652:	6001      	str	r1, [r0, #0]
}
    6654:	2000      	movs	r0, #0
    6656:	4770      	bx	lr
    6658:	200007f8 	.word	0x200007f8

0000665c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    665c:	b508      	push	{r3, lr}
	_dmac_handler();
    665e:	4b01      	ldr	r3, [pc, #4]	; (6664 <DMAC_0_Handler+0x8>)
    6660:	4798      	blx	r3
    6662:	bd08      	pop	{r3, pc}
    6664:	000063cd 	.word	0x000063cd

00006668 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6668:	b508      	push	{r3, lr}
	_dmac_handler();
    666a:	4b01      	ldr	r3, [pc, #4]	; (6670 <DMAC_1_Handler+0x8>)
    666c:	4798      	blx	r3
    666e:	bd08      	pop	{r3, pc}
    6670:	000063cd 	.word	0x000063cd

00006674 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6674:	b508      	push	{r3, lr}
	_dmac_handler();
    6676:	4b01      	ldr	r3, [pc, #4]	; (667c <DMAC_2_Handler+0x8>)
    6678:	4798      	blx	r3
    667a:	bd08      	pop	{r3, pc}
    667c:	000063cd 	.word	0x000063cd

00006680 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6680:	b508      	push	{r3, lr}
	_dmac_handler();
    6682:	4b01      	ldr	r3, [pc, #4]	; (6688 <DMAC_3_Handler+0x8>)
    6684:	4798      	blx	r3
    6686:	bd08      	pop	{r3, pc}
    6688:	000063cd 	.word	0x000063cd

0000668c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    668c:	b508      	push	{r3, lr}
	_dmac_handler();
    668e:	4b01      	ldr	r3, [pc, #4]	; (6694 <DMAC_4_Handler+0x8>)
    6690:	4798      	blx	r3
    6692:	bd08      	pop	{r3, pc}
    6694:	000063cd 	.word	0x000063cd

00006698 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6698:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    669a:	2000      	movs	r0, #0
    669c:	4770      	bx	lr
	...

000066a0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    66a0:	b430      	push	{r4, r5}
    66a2:	4814      	ldr	r0, [pc, #80]	; (66f4 <_event_system_init+0x54>)
    66a4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    66a8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    66aa:	4c13      	ldr	r4, [pc, #76]	; (66f8 <_event_system_init+0x58>)
    66ac:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    66ae:	f813 1b01 	ldrb.w	r1, [r3], #1
    66b2:	3248      	adds	r2, #72	; 0x48
    66b4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    66b8:	42ab      	cmp	r3, r5
    66ba:	d1f7      	bne.n	66ac <_event_system_init+0xc>
    66bc:	480d      	ldr	r0, [pc, #52]	; (66f4 <_event_system_init+0x54>)
    66be:	f100 0442 	add.w	r4, r0, #66	; 0x42
    66c2:	3080      	adds	r0, #128	; 0x80
    66c4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    66c6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    66ca:	00ca      	lsls	r2, r1, #3
    66cc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    66d0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    66d4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    66d6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    66da:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    66dc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    66e0:	43db      	mvns	r3, r3
    66e2:	b2db      	uxtb	r3, r3
    66e4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    66e8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    66ea:	2920      	cmp	r1, #32
    66ec:	d1eb      	bne.n	66c6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    66ee:	2000      	movs	r0, #0
    66f0:	bc30      	pop	{r4, r5}
    66f2:	4770      	bx	lr
    66f4:	0000dce0 	.word	0x0000dce0
    66f8:	4100e000 	.word	0x4100e000

000066fc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    66fc:	f010 0f01 	tst.w	r0, #1
    6700:	d008      	beq.n	6714 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6702:	4a17      	ldr	r2, [pc, #92]	; (6760 <_gclk_init_generators_by_fref+0x64>)
    6704:	4b17      	ldr	r3, [pc, #92]	; (6764 <_gclk_init_generators_by_fref+0x68>)
    6706:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6708:	4619      	mov	r1, r3
    670a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    670e:	684b      	ldr	r3, [r1, #4]
    6710:	4213      	tst	r3, r2
    6712:	d1fc      	bne.n	670e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6714:	f010 0f02 	tst.w	r0, #2
    6718:	d008      	beq.n	672c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    671a:	4a13      	ldr	r2, [pc, #76]	; (6768 <_gclk_init_generators_by_fref+0x6c>)
    671c:	4b11      	ldr	r3, [pc, #68]	; (6764 <_gclk_init_generators_by_fref+0x68>)
    671e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6720:	4619      	mov	r1, r3
    6722:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6726:	684b      	ldr	r3, [r1, #4]
    6728:	4213      	tst	r3, r2
    672a:	d1fc      	bne.n	6726 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    672c:	f010 0f04 	tst.w	r0, #4
    6730:	d008      	beq.n	6744 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6732:	4a0e      	ldr	r2, [pc, #56]	; (676c <_gclk_init_generators_by_fref+0x70>)
    6734:	4b0b      	ldr	r3, [pc, #44]	; (6764 <_gclk_init_generators_by_fref+0x68>)
    6736:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6738:	4619      	mov	r1, r3
    673a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    673e:	684b      	ldr	r3, [r1, #4]
    6740:	4213      	tst	r3, r2
    6742:	d1fc      	bne.n	673e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6744:	f010 0f08 	tst.w	r0, #8
    6748:	d008      	beq.n	675c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    674a:	4a09      	ldr	r2, [pc, #36]	; (6770 <_gclk_init_generators_by_fref+0x74>)
    674c:	4b05      	ldr	r3, [pc, #20]	; (6764 <_gclk_init_generators_by_fref+0x68>)
    674e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6750:	4619      	mov	r1, r3
    6752:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6756:	684b      	ldr	r3, [r1, #4]
    6758:	4213      	tst	r3, r2
    675a:	d1fc      	bne.n	6756 <_gclk_init_generators_by_fref+0x5a>
    675c:	4770      	bx	lr
    675e:	bf00      	nop
    6760:	00010108 	.word	0x00010108
    6764:	40001c00 	.word	0x40001c00
    6768:	00010106 	.word	0x00010106
    676c:	00100106 	.word	0x00100106
    6770:	00010104 	.word	0x00010104

00006774 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6774:	2201      	movs	r2, #1
    6776:	4b01      	ldr	r3, [pc, #4]	; (677c <_mclk_init+0x8>)
    6778:	715a      	strb	r2, [r3, #5]
    677a:	4770      	bx	lr
    677c:	40000800 	.word	0x40000800

00006780 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6780:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6782:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6784:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6786:	f012 0f01 	tst.w	r2, #1
    678a:	d005      	beq.n	6798 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    678c:	2201      	movs	r2, #1
    678e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6790:	6803      	ldr	r3, [r0, #0]
    6792:	b153      	cbz	r3, 67aa <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6794:	4798      	blx	r3
    6796:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6798:	8a1a      	ldrh	r2, [r3, #16]
    679a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    679c:	b12a      	cbz	r2, 67aa <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    679e:	f240 225e 	movw	r2, #606	; 0x25e
    67a2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    67a4:	6843      	ldr	r3, [r0, #4]
    67a6:	b103      	cbz	r3, 67aa <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    67a8:	4798      	blx	r3
    67aa:	bd08      	pop	{r3, pc}

000067ac <_flash_init>:
{
    67ac:	b538      	push	{r3, r4, r5, lr}
    67ae:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    67b0:	4605      	mov	r5, r0
    67b2:	b350      	cbz	r0, 680a <_flash_init+0x5e>
    67b4:	4816      	ldr	r0, [pc, #88]	; (6810 <_flash_init+0x64>)
    67b6:	4281      	cmp	r1, r0
    67b8:	bf14      	ite	ne
    67ba:	2000      	movne	r0, #0
    67bc:	2001      	moveq	r0, #1
    67be:	224b      	movs	r2, #75	; 0x4b
    67c0:	4914      	ldr	r1, [pc, #80]	; (6814 <_flash_init+0x68>)
    67c2:	4b15      	ldr	r3, [pc, #84]	; (6818 <_flash_init+0x6c>)
    67c4:	4798      	blx	r3
	device->hw = hw;
    67c6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    67c8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    67ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    67ce:	049b      	lsls	r3, r3, #18
    67d0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    67d2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    67d4:	4b11      	ldr	r3, [pc, #68]	; (681c <_flash_init+0x70>)
    67d6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67d8:	4b11      	ldr	r3, [pc, #68]	; (6820 <_flash_init+0x74>)
    67da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    67de:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    67e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67e6:	f3bf 8f6f 	isb	sy
    67ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    67ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    67f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67f6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67fa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    67fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6802:	6019      	str	r1, [r3, #0]
    6804:	601a      	str	r2, [r3, #0]
}
    6806:	2000      	movs	r0, #0
    6808:	bd38      	pop	{r3, r4, r5, pc}
    680a:	2000      	movs	r0, #0
    680c:	e7d7      	b.n	67be <_flash_init+0x12>
    680e:	bf00      	nop
    6810:	41004000 	.word	0x41004000
    6814:	0000dde4 	.word	0x0000dde4
    6818:	00005dad 	.word	0x00005dad
    681c:	20000978 	.word	0x20000978
    6820:	e000e100 	.word	0xe000e100

00006824 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    6824:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    6826:	4b02      	ldr	r3, [pc, #8]	; (6830 <NVMCTRL_0_Handler+0xc>)
    6828:	6818      	ldr	r0, [r3, #0]
    682a:	4b02      	ldr	r3, [pc, #8]	; (6834 <NVMCTRL_0_Handler+0x10>)
    682c:	4798      	blx	r3
    682e:	bd08      	pop	{r3, pc}
    6830:	20000978 	.word	0x20000978
    6834:	00006781 	.word	0x00006781

00006838 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    6838:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    683a:	4b02      	ldr	r3, [pc, #8]	; (6844 <NVMCTRL_1_Handler+0xc>)
    683c:	6818      	ldr	r0, [r3, #0]
    683e:	4b02      	ldr	r3, [pc, #8]	; (6848 <NVMCTRL_1_Handler+0x10>)
    6840:	4798      	blx	r3
    6842:	bd08      	pop	{r3, pc}
    6844:	20000978 	.word	0x20000978
    6848:	00006781 	.word	0x00006781

0000684c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    684c:	4b03      	ldr	r3, [pc, #12]	; (685c <_osc32kctrl_init_sources+0x10>)
    684e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6850:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6854:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6856:	2201      	movs	r2, #1
    6858:	741a      	strb	r2, [r3, #16]
    685a:	4770      	bx	lr
    685c:	40001400 	.word	0x40001400

00006860 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6860:	4770      	bx	lr
	...

00006864 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6864:	4a47      	ldr	r2, [pc, #284]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    6866:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6868:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    686c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6870:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6872:	4611      	mov	r1, r2
    6874:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6878:	684b      	ldr	r3, [r1, #4]
    687a:	4213      	tst	r3, r2
    687c:	d1fc      	bne.n	6878 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    687e:	4a41      	ldr	r2, [pc, #260]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    6880:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6882:	f013 0f04 	tst.w	r3, #4
    6886:	d1fb      	bne.n	6880 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6888:	4b3f      	ldr	r3, [pc, #252]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    688a:	2200      	movs	r2, #0
    688c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    688e:	4a3f      	ldr	r2, [pc, #252]	; (698c <_oscctrl_init_referenced_generators+0x128>)
    6890:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6892:	461a      	mov	r2, r3
    6894:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6898:	f013 0f10 	tst.w	r3, #16
    689c:	d1fa      	bne.n	6894 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    689e:	2200      	movs	r2, #0
    68a0:	4b39      	ldr	r3, [pc, #228]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    68a2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    68a6:	461a      	mov	r2, r3
    68a8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    68ac:	f013 0f04 	tst.w	r3, #4
    68b0:	d1fa      	bne.n	68a8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    68b2:	2202      	movs	r2, #2
    68b4:	4b34      	ldr	r3, [pc, #208]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    68b6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    68b8:	461a      	mov	r2, r3
    68ba:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    68be:	f013 0f02 	tst.w	r3, #2
    68c2:	d1fa      	bne.n	68ba <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    68c4:	4b30      	ldr	r3, [pc, #192]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    68c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    68c8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    68ca:	461a      	mov	r2, r3
    68cc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    68d0:	f013 0f08 	tst.w	r3, #8
    68d4:	d1fa      	bne.n	68cc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    68d6:	2288      	movs	r2, #136	; 0x88
    68d8:	4b2b      	ldr	r3, [pc, #172]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    68da:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    68de:	461a      	mov	r2, r3
    68e0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    68e4:	f013 0f04 	tst.w	r3, #4
    68e8:	d1fa      	bne.n	68e0 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    68ea:	2242      	movs	r2, #66	; 0x42
    68ec:	4b25      	ldr	r3, [pc, #148]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    68ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    68f2:	2227      	movs	r2, #39	; 0x27
    68f4:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    68f8:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    68fa:	461a      	mov	r2, r3
    68fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
    68fe:	f013 0f06 	tst.w	r3, #6
    6902:	d1fb      	bne.n	68fc <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6904:	4b20      	ldr	r3, [pc, #128]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    6906:	f44f 6200 	mov.w	r2, #2048	; 0x800
    690a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    690c:	2202      	movs	r2, #2
    690e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6912:	461a      	mov	r2, r3
    6914:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6916:	f013 0f02 	tst.w	r3, #2
    691a:	d1fb      	bne.n	6914 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    691c:	4b1a      	ldr	r3, [pc, #104]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    691e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6922:	f013 0f01 	tst.w	r3, #1
    6926:	d026      	beq.n	6976 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6928:	4a17      	ldr	r2, [pc, #92]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    692a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    692c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6930:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6934:	d1f9      	bne.n	692a <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6936:	4b14      	ldr	r3, [pc, #80]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    6938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    693a:	f012 0f01 	tst.w	r2, #1
    693e:	d103      	bne.n	6948 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6942:	f012 0f02 	tst.w	r2, #2
    6946:	d0f7      	beq.n	6938 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6948:	4a0e      	ldr	r2, [pc, #56]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    694a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    694c:	2b00      	cmp	r3, #0
    694e:	d1fc      	bne.n	694a <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6950:	4a0c      	ldr	r2, [pc, #48]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    6952:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6954:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6958:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    695c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    695e:	4611      	mov	r1, r2
    6960:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6964:	684b      	ldr	r3, [r1, #4]
    6966:	4213      	tst	r3, r2
    6968:	d1fc      	bne.n	6964 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    696a:	4a06      	ldr	r2, [pc, #24]	; (6984 <_oscctrl_init_referenced_generators+0x120>)
    696c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    696e:	f013 0f04 	tst.w	r3, #4
    6972:	d1fb      	bne.n	696c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6974:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6976:	4a04      	ldr	r2, [pc, #16]	; (6988 <_oscctrl_init_referenced_generators+0x124>)
    6978:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    697a:	f413 7f80 	tst.w	r3, #256	; 0x100
    697e:	d0fb      	beq.n	6978 <_oscctrl_init_referenced_generators+0x114>
    6980:	e7d9      	b.n	6936 <_oscctrl_init_referenced_generators+0xd2>
    6982:	bf00      	nop
    6984:	40001c00 	.word	0x40001c00
    6988:	40001000 	.word	0x40001000
    698c:	04010000 	.word	0x04010000

00006990 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6990:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6992:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6994:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6996:	4903      	ldr	r1, [pc, #12]	; (69a4 <_qspi_dma_rx_complete+0x14>)
    6998:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    699a:	685b      	ldr	r3, [r3, #4]
    699c:	b103      	cbz	r3, 69a0 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    699e:	4798      	blx	r3
    69a0:	bd08      	pop	{r3, pc}
    69a2:	bf00      	nop
    69a4:	01000002 	.word	0x01000002

000069a8 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    69a8:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    69aa:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    69ac:	681a      	ldr	r2, [r3, #0]
    69ae:	4903      	ldr	r1, [pc, #12]	; (69bc <_qspi_dma_tx_complete+0x14>)
    69b0:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    69b2:	685b      	ldr	r3, [r3, #4]
    69b4:	b103      	cbz	r3, 69b8 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    69b6:	4798      	blx	r3
    69b8:	bd08      	pop	{r3, pc}
    69ba:	bf00      	nop
    69bc:	01000002 	.word	0x01000002

000069c0 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    69c0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    69c2:	6883      	ldr	r3, [r0, #8]
    69c4:	689b      	ldr	r3, [r3, #8]
    69c6:	b103      	cbz	r3, 69ca <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    69c8:	4798      	blx	r3
    69ca:	bd08      	pop	{r3, pc}

000069cc <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    69cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ce:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    69d0:	4604      	mov	r4, r0
    69d2:	2800      	cmp	r0, #0
    69d4:	d027      	beq.n	6a26 <_qspi_dma_init+0x5a>
    69d6:	1c08      	adds	r0, r1, #0
    69d8:	bf18      	it	ne
    69da:	2001      	movne	r0, #1
    69dc:	22cb      	movs	r2, #203	; 0xcb
    69de:	4913      	ldr	r1, [pc, #76]	; (6a2c <_qspi_dma_init+0x60>)
    69e0:	4b13      	ldr	r3, [pc, #76]	; (6a30 <_qspi_dma_init+0x64>)
    69e2:	4798      	blx	r3
	dev->prvt = hw;
    69e4:	4626      	mov	r6, r4
    69e6:	f846 5b0c 	str.w	r5, [r6], #12
    69ea:	2301      	movs	r3, #1
    69ec:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    69ee:	4b11      	ldr	r3, [pc, #68]	; (6a34 <_qspi_dma_init+0x68>)
    69f0:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    69f2:	4b11      	ldr	r3, [pc, #68]	; (6a38 <_qspi_dma_init+0x6c>)
    69f4:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    69f6:	211f      	movs	r1, #31
    69f8:	4630      	mov	r0, r6
    69fa:	4f10      	ldr	r7, [pc, #64]	; (6a3c <_qspi_dma_init+0x70>)
    69fc:	47b8      	blx	r7
	dev->resource->back                 = dev;
    69fe:	68e3      	ldr	r3, [r4, #12]
    6a00:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    6a02:	68e3      	ldr	r3, [r4, #12]
    6a04:	4a0e      	ldr	r2, [pc, #56]	; (6a40 <_qspi_dma_init+0x74>)
    6a06:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6a08:	68e3      	ldr	r3, [r4, #12]
    6a0a:	4d0e      	ldr	r5, [pc, #56]	; (6a44 <_qspi_dma_init+0x78>)
    6a0c:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    6a0e:	211e      	movs	r1, #30
    6a10:	4630      	mov	r0, r6
    6a12:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6a14:	68e3      	ldr	r3, [r4, #12]
    6a16:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    6a18:	68e3      	ldr	r3, [r4, #12]
    6a1a:	4a0b      	ldr	r2, [pc, #44]	; (6a48 <_qspi_dma_init+0x7c>)
    6a1c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6a1e:	68e3      	ldr	r3, [r4, #12]
    6a20:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    6a22:	2000      	movs	r0, #0
    6a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a26:	2000      	movs	r0, #0
    6a28:	e7d8      	b.n	69dc <_qspi_dma_init+0x10>
    6a2a:	bf00      	nop
    6a2c:	0000de04 	.word	0x0000de04
    6a30:	00005dad 	.word	0x00005dad
    6a34:	06000011 	.word	0x06000011
    6a38:	00243b00 	.word	0x00243b00
    6a3c:	00006649 	.word	0x00006649
    6a40:	00006991 	.word	0x00006991
    6a44:	000069c1 	.word	0x000069c1
    6a48:	000069a9 	.word	0x000069a9

00006a4c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    6a4c:	b500      	push	{lr}
    6a4e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    6a50:	4b0d      	ldr	r3, [pc, #52]	; (6a88 <RAMECC_Handler+0x3c>)
    6a52:	789b      	ldrb	r3, [r3, #2]
    6a54:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    6a56:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6a58:	9b01      	ldr	r3, [sp, #4]
    6a5a:	f013 0f02 	tst.w	r3, #2
    6a5e:	d006      	beq.n	6a6e <RAMECC_Handler+0x22>
    6a60:	4b0a      	ldr	r3, [pc, #40]	; (6a8c <RAMECC_Handler+0x40>)
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	b11b      	cbz	r3, 6a6e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6a66:	4a08      	ldr	r2, [pc, #32]	; (6a88 <RAMECC_Handler+0x3c>)
    6a68:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6a6a:	4798      	blx	r3
    6a6c:	e009      	b.n	6a82 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6a6e:	9b01      	ldr	r3, [sp, #4]
    6a70:	f013 0f01 	tst.w	r3, #1
    6a74:	d005      	beq.n	6a82 <RAMECC_Handler+0x36>
    6a76:	4b05      	ldr	r3, [pc, #20]	; (6a8c <RAMECC_Handler+0x40>)
    6a78:	685b      	ldr	r3, [r3, #4]
    6a7a:	b113      	cbz	r3, 6a82 <RAMECC_Handler+0x36>
    6a7c:	4a02      	ldr	r2, [pc, #8]	; (6a88 <RAMECC_Handler+0x3c>)
    6a7e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6a80:	4798      	blx	r3
	} else {
		return;
	}
}
    6a82:	b003      	add	sp, #12
    6a84:	f85d fb04 	ldr.w	pc, [sp], #4
    6a88:	41020000 	.word	0x41020000
    6a8c:	20003c00 	.word	0x20003c00

00006a90 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6a90:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6a92:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6a94:	6913      	ldr	r3, [r2, #16]
    6a96:	f013 0f60 	tst.w	r3, #96	; 0x60
    6a9a:	d1fb      	bne.n	6a94 <_rtc_timer_set_period+0x4>
}
    6a9c:	4770      	bx	lr

00006a9e <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    6a9e:	68c2      	ldr	r2, [r0, #12]
    6aa0:	6913      	ldr	r3, [r2, #16]
    6aa2:	f013 0f60 	tst.w	r3, #96	; 0x60
    6aa6:	d1fb      	bne.n	6aa0 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6aa8:	6a10      	ldr	r0, [r2, #32]
}
    6aaa:	4770      	bx	lr

00006aac <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6aac:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6aae:	f248 0103 	movw	r1, #32771	; 0x8003
    6ab2:	6913      	ldr	r3, [r2, #16]
    6ab4:	420b      	tst	r3, r1
    6ab6:	d1fc      	bne.n	6ab2 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6ab8:	8810      	ldrh	r0, [r2, #0]
}
    6aba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6abe:	4770      	bx	lr

00006ac0 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    6ac0:	4770      	bx	lr
	...

00006ac4 <_rtc_timer_init>:
{
    6ac4:	b538      	push	{r3, r4, r5, lr}
    6ac6:	460c      	mov	r4, r1
	ASSERT(dev);
    6ac8:	4605      	mov	r5, r0
    6aca:	2230      	movs	r2, #48	; 0x30
    6acc:	4914      	ldr	r1, [pc, #80]	; (6b20 <_rtc_timer_init+0x5c>)
    6ace:	3000      	adds	r0, #0
    6ad0:	bf18      	it	ne
    6ad2:	2001      	movne	r0, #1
    6ad4:	4b13      	ldr	r3, [pc, #76]	; (6b24 <_rtc_timer_init+0x60>)
    6ad6:	4798      	blx	r3
	dev->hw = hw;
    6ad8:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6ada:	2301      	movs	r3, #1
    6adc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6ade:	f248 0203 	movw	r2, #32771	; 0x8003
    6ae2:	6923      	ldr	r3, [r4, #16]
    6ae4:	4213      	tst	r3, r2
    6ae6:	d1fc      	bne.n	6ae2 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6ae8:	68eb      	ldr	r3, [r5, #12]
    6aea:	691a      	ldr	r2, [r3, #16]
    6aec:	f012 0f01 	tst.w	r2, #1
    6af0:	d1fb      	bne.n	6aea <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6af2:	f248 0280 	movw	r2, #32896	; 0x8080
    6af6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6af8:	f248 0103 	movw	r1, #32771	; 0x8003
    6afc:	691a      	ldr	r2, [r3, #16]
    6afe:	420a      	tst	r2, r1
    6b00:	d1fc      	bne.n	6afc <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    6b02:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6b04:	2301      	movs	r3, #1
    6b06:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b08:	6913      	ldr	r3, [r2, #16]
    6b0a:	f013 0f60 	tst.w	r3, #96	; 0x60
    6b0e:	d1fb      	bne.n	6b08 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6b10:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    6b12:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b16:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    6b18:	4b03      	ldr	r3, [pc, #12]	; (6b28 <_rtc_timer_init+0x64>)
    6b1a:	601d      	str	r5, [r3, #0]
}
    6b1c:	2000      	movs	r0, #0
    6b1e:	bd38      	pop	{r3, r4, r5, pc}
    6b20:	0000de1c 	.word	0x0000de1c
    6b24:	00005dad 	.word	0x00005dad
    6b28:	2000097c 	.word	0x2000097c

00006b2c <_rtc_timer_deinit>:
{
    6b2c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6b2e:	4604      	mov	r4, r0
    6b30:	b1c8      	cbz	r0, 6b66 <_rtc_timer_deinit+0x3a>
    6b32:	68c0      	ldr	r0, [r0, #12]
    6b34:	3000      	adds	r0, #0
    6b36:	bf18      	it	ne
    6b38:	2001      	movne	r0, #1
    6b3a:	2252      	movs	r2, #82	; 0x52
    6b3c:	490b      	ldr	r1, [pc, #44]	; (6b6c <_rtc_timer_deinit+0x40>)
    6b3e:	4b0c      	ldr	r3, [pc, #48]	; (6b70 <_rtc_timer_deinit+0x44>)
    6b40:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b46:	4b0b      	ldr	r3, [pc, #44]	; (6b74 <_rtc_timer_deinit+0x48>)
    6b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6b4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b50:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    6b54:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6b56:	2301      	movs	r3, #1
    6b58:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b5a:	f248 0103 	movw	r1, #32771	; 0x8003
    6b5e:	6913      	ldr	r3, [r2, #16]
    6b60:	420b      	tst	r3, r1
    6b62:	d1fc      	bne.n	6b5e <_rtc_timer_deinit+0x32>
}
    6b64:	bd10      	pop	{r4, pc}
    6b66:	2000      	movs	r0, #0
    6b68:	e7e7      	b.n	6b3a <_rtc_timer_deinit+0xe>
    6b6a:	bf00      	nop
    6b6c:	0000de1c 	.word	0x0000de1c
    6b70:	00005dad 	.word	0x00005dad
    6b74:	e000e100 	.word	0xe000e100

00006b78 <_rtc_timer_start>:
{
    6b78:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6b7a:	4604      	mov	r4, r0
    6b7c:	b310      	cbz	r0, 6bc4 <_rtc_timer_start+0x4c>
    6b7e:	68c0      	ldr	r0, [r0, #12]
    6b80:	3000      	adds	r0, #0
    6b82:	bf18      	it	ne
    6b84:	2001      	movne	r0, #1
    6b86:	225e      	movs	r2, #94	; 0x5e
    6b88:	490f      	ldr	r1, [pc, #60]	; (6bc8 <_rtc_timer_start+0x50>)
    6b8a:	4b10      	ldr	r3, [pc, #64]	; (6bcc <_rtc_timer_start+0x54>)
    6b8c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b92:	4b0f      	ldr	r3, [pc, #60]	; (6bd0 <_rtc_timer_start+0x58>)
    6b94:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6b96:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6b98:	2300      	movs	r3, #0
    6b9a:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b9c:	6913      	ldr	r3, [r2, #16]
    6b9e:	f013 0f08 	tst.w	r3, #8
    6ba2:	d1fb      	bne.n	6b9c <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6ba4:	68e3      	ldr	r3, [r4, #12]
    6ba6:	691a      	ldr	r2, [r3, #16]
    6ba8:	f012 0f08 	tst.w	r2, #8
    6bac:	d1fb      	bne.n	6ba6 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6bae:	881a      	ldrh	r2, [r3, #0]
    6bb0:	b292      	uxth	r2, r2
    6bb2:	f042 0202 	orr.w	r2, r2, #2
    6bb6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6bb8:	f248 0103 	movw	r1, #32771	; 0x8003
    6bbc:	691a      	ldr	r2, [r3, #16]
    6bbe:	420a      	tst	r2, r1
    6bc0:	d1fc      	bne.n	6bbc <_rtc_timer_start+0x44>
}
    6bc2:	bd10      	pop	{r4, pc}
    6bc4:	2000      	movs	r0, #0
    6bc6:	e7de      	b.n	6b86 <_rtc_timer_start+0xe>
    6bc8:	0000de1c 	.word	0x0000de1c
    6bcc:	00005dad 	.word	0x00005dad
    6bd0:	e000e100 	.word	0xe000e100

00006bd4 <_rtc_timer_stop>:
{
    6bd4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6bd6:	4604      	mov	r4, r0
    6bd8:	b1a0      	cbz	r0, 6c04 <_rtc_timer_stop+0x30>
    6bda:	68c0      	ldr	r0, [r0, #12]
    6bdc:	3000      	adds	r0, #0
    6bde:	bf18      	it	ne
    6be0:	2001      	movne	r0, #1
    6be2:	226b      	movs	r2, #107	; 0x6b
    6be4:	4908      	ldr	r1, [pc, #32]	; (6c08 <_rtc_timer_stop+0x34>)
    6be6:	4b09      	ldr	r3, [pc, #36]	; (6c0c <_rtc_timer_stop+0x38>)
    6be8:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6bea:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6bec:	8813      	ldrh	r3, [r2, #0]
    6bee:	f023 0302 	bic.w	r3, r3, #2
    6bf2:	041b      	lsls	r3, r3, #16
    6bf4:	0c1b      	lsrs	r3, r3, #16
    6bf6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6bf8:	f248 0103 	movw	r1, #32771	; 0x8003
    6bfc:	6913      	ldr	r3, [r2, #16]
    6bfe:	420b      	tst	r3, r1
    6c00:	d1fc      	bne.n	6bfc <_rtc_timer_stop+0x28>
}
    6c02:	bd10      	pop	{r4, pc}
    6c04:	2000      	movs	r0, #0
    6c06:	e7ec      	b.n	6be2 <_rtc_timer_stop+0xe>
    6c08:	0000de1c 	.word	0x0000de1c
    6c0c:	00005dad 	.word	0x00005dad

00006c10 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6c10:	4800      	ldr	r0, [pc, #0]	; (6c14 <_rtc_get_timer+0x4>)
    6c12:	4770      	bx	lr
    6c14:	20000358 	.word	0x20000358

00006c18 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6c18:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    6c1a:	4b08      	ldr	r3, [pc, #32]	; (6c3c <RTC_Handler+0x24>)
    6c1c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6c1e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6c20:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6c22:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c26:	d007      	beq.n	6c38 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6c28:	6823      	ldr	r3, [r4, #0]
    6c2a:	b10b      	cbz	r3, 6c30 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    6c2c:	4620      	mov	r0, r4
    6c2e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6c30:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6c32:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c36:	819a      	strh	r2, [r3, #12]
    6c38:	bd10      	pop	{r4, pc}
    6c3a:	bf00      	nop
    6c3c:	2000097c 	.word	0x2000097c

00006c40 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6c40:	b470      	push	{r4, r5, r6}
    6c42:	b089      	sub	sp, #36	; 0x24
    6c44:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6c46:	466c      	mov	r4, sp
    6c48:	4d0d      	ldr	r5, [pc, #52]	; (6c80 <_sercom_get_hardware_index+0x40>)
    6c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6c4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6c56:	9b00      	ldr	r3, [sp, #0]
    6c58:	42b3      	cmp	r3, r6
    6c5a:	d00d      	beq.n	6c78 <_sercom_get_hardware_index+0x38>
    6c5c:	4631      	mov	r1, r6
    6c5e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c60:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6c62:	f853 2b04 	ldr.w	r2, [r3], #4
    6c66:	428a      	cmp	r2, r1
    6c68:	d007      	beq.n	6c7a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c6a:	3001      	adds	r0, #1
    6c6c:	2808      	cmp	r0, #8
    6c6e:	d1f8      	bne.n	6c62 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6c70:	2000      	movs	r0, #0
}
    6c72:	b009      	add	sp, #36	; 0x24
    6c74:	bc70      	pop	{r4, r5, r6}
    6c76:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c78:	2000      	movs	r0, #0
			return i;
    6c7a:	b2c0      	uxtb	r0, r0
    6c7c:	e7f9      	b.n	6c72 <_sercom_get_hardware_index+0x32>
    6c7e:	bf00      	nop
    6c80:	0000de34 	.word	0x0000de34

00006c84 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6c84:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6c86:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6c88:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6c8a:	f013 0f01 	tst.w	r3, #1
    6c8e:	d003      	beq.n	6c98 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6c90:	7da3      	ldrb	r3, [r4, #22]
    6c92:	f013 0f01 	tst.w	r3, #1
    6c96:	d112      	bne.n	6cbe <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6c98:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6c9a:	f013 0f02 	tst.w	r3, #2
    6c9e:	d003      	beq.n	6ca8 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6ca0:	7da3      	ldrb	r3, [r4, #22]
    6ca2:	f013 0f02 	tst.w	r3, #2
    6ca6:	d10f      	bne.n	6cc8 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6ca8:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6caa:	f013 0f04 	tst.w	r3, #4
    6cae:	d015      	beq.n	6cdc <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6cb0:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6cb2:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6cb6:	b163      	cbz	r3, 6cd2 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6cb8:	23ff      	movs	r3, #255	; 0xff
    6cba:	8363      	strh	r3, [r4, #26]
    6cbc:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6cbe:	2301      	movs	r3, #1
    6cc0:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6cc2:	6803      	ldr	r3, [r0, #0]
    6cc4:	4798      	blx	r3
    6cc6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6cc8:	2302      	movs	r3, #2
    6cca:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6ccc:	6883      	ldr	r3, [r0, #8]
    6cce:	4798      	blx	r3
    6cd0:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6cd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6cd4:	6843      	ldr	r3, [r0, #4]
    6cd6:	b2c9      	uxtb	r1, r1
    6cd8:	4798      	blx	r3
    6cda:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6cdc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6cde:	09db      	lsrs	r3, r3, #7
    6ce0:	d100      	bne.n	6ce4 <_sercom_usart_interrupt_handler+0x60>
    6ce2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6ce4:	2380      	movs	r3, #128	; 0x80
    6ce6:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6ce8:	68c3      	ldr	r3, [r0, #12]
    6cea:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6cec:	8b63      	ldrh	r3, [r4, #26]
    6cee:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6cf0:	8363      	strh	r3, [r4, #26]
    6cf2:	e7f6      	b.n	6ce2 <_sercom_usart_interrupt_handler+0x5e>

00006cf4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6cf4:	4b11      	ldr	r3, [pc, #68]	; (6d3c <_sercom_init_irq_param+0x48>)
    6cf6:	4298      	cmp	r0, r3
    6cf8:	d011      	beq.n	6d1e <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6cfa:	4b11      	ldr	r3, [pc, #68]	; (6d40 <_sercom_init_irq_param+0x4c>)
    6cfc:	4298      	cmp	r0, r3
    6cfe:	d011      	beq.n	6d24 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6d00:	4b10      	ldr	r3, [pc, #64]	; (6d44 <_sercom_init_irq_param+0x50>)
    6d02:	4298      	cmp	r0, r3
    6d04:	d011      	beq.n	6d2a <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6d06:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6d0a:	d011      	beq.n	6d30 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6d0c:	4b0e      	ldr	r3, [pc, #56]	; (6d48 <_sercom_init_irq_param+0x54>)
    6d0e:	4298      	cmp	r0, r3
    6d10:	d011      	beq.n	6d36 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6d12:	4b0e      	ldr	r3, [pc, #56]	; (6d4c <_sercom_init_irq_param+0x58>)
    6d14:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    6d16:	bf04      	itt	eq
    6d18:	4b0d      	ldreq	r3, [pc, #52]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d1a:	6159      	streq	r1, [r3, #20]
    6d1c:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6d1e:	4b0c      	ldr	r3, [pc, #48]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d20:	6019      	str	r1, [r3, #0]
    6d22:	e7f0      	b.n	6d06 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6d24:	4b0a      	ldr	r3, [pc, #40]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d26:	6059      	str	r1, [r3, #4]
    6d28:	e7f0      	b.n	6d0c <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    6d2a:	4b09      	ldr	r3, [pc, #36]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d2c:	6099      	str	r1, [r3, #8]
    6d2e:	e7f0      	b.n	6d12 <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6d30:	4b07      	ldr	r3, [pc, #28]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d32:	60d9      	str	r1, [r3, #12]
    6d34:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6d36:	4b06      	ldr	r3, [pc, #24]	; (6d50 <_sercom_init_irq_param+0x5c>)
    6d38:	6119      	str	r1, [r3, #16]
    6d3a:	4770      	bx	lr
    6d3c:	40003000 	.word	0x40003000
    6d40:	40003400 	.word	0x40003400
    6d44:	41014000 	.word	0x41014000
    6d48:	43000400 	.word	0x43000400
    6d4c:	43000800 	.word	0x43000800
    6d50:	20000980 	.word	0x20000980

00006d54 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6d54:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6d56:	4b03      	ldr	r3, [pc, #12]	; (6d64 <_sercom_get_irq_num+0x10>)
    6d58:	4798      	blx	r3
    6d5a:	0080      	lsls	r0, r0, #2
    6d5c:	302e      	adds	r0, #46	; 0x2e
}
    6d5e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6d62:	bd08      	pop	{r3, pc}
    6d64:	00006c41 	.word	0x00006c41

00006d68 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6d68:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6d6a:	f013 0f01 	tst.w	r3, #1
    6d6e:	d109      	bne.n	6d84 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6d70:	6803      	ldr	r3, [r0, #0]
    6d72:	f043 0302 	orr.w	r3, r3, #2
    6d76:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d78:	69c3      	ldr	r3, [r0, #28]
    6d7a:	f013 0f03 	tst.w	r3, #3
    6d7e:	d1fb      	bne.n	6d78 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6d80:	2000      	movs	r0, #0
    6d82:	4770      	bx	lr
		return ERR_BUSY;
    6d84:	f06f 0003 	mvn.w	r0, #3
}
    6d88:	4770      	bx	lr
	...

00006d8c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6d8c:	b538      	push	{r3, r4, r5, lr}
    6d8e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6d90:	4b0b      	ldr	r3, [pc, #44]	; (6dc0 <_spi_async_enable+0x34>)
    6d92:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6d94:	4620      	mov	r0, r4
    6d96:	4b0b      	ldr	r3, [pc, #44]	; (6dc4 <_spi_async_enable+0x38>)
    6d98:	4798      	blx	r3
    6d9a:	1d01      	adds	r1, r0, #4
    6d9c:	b2c9      	uxtb	r1, r1
    6d9e:	2501      	movs	r5, #1
    6da0:	4c09      	ldr	r4, [pc, #36]	; (6dc8 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6da2:	1c43      	adds	r3, r0, #1
    6da4:	b2db      	uxtb	r3, r3
    6da6:	0942      	lsrs	r2, r0, #5
    6da8:	f000 001f 	and.w	r0, r0, #31
    6dac:	fa05 f000 	lsl.w	r0, r5, r0
    6db0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6db4:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6db6:	4299      	cmp	r1, r3
    6db8:	d1f3      	bne.n	6da2 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6dba:	2000      	movs	r0, #0
    6dbc:	bd38      	pop	{r3, r4, r5, pc}
    6dbe:	bf00      	nop
    6dc0:	00006d69 	.word	0x00006d69
    6dc4:	00006d55 	.word	0x00006d55
    6dc8:	e000e100 	.word	0xe000e100

00006dcc <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6dcc:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6dce:	f013 0f03 	tst.w	r3, #3
    6dd2:	d111      	bne.n	6df8 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6dd4:	69c3      	ldr	r3, [r0, #28]
    6dd6:	f013 0f03 	tst.w	r3, #3
    6dda:	d1fb      	bne.n	6dd4 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6ddc:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6dde:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6de2:	0709      	lsls	r1, r1, #28
    6de4:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6de8:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6dea:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6dec:	69c3      	ldr	r3, [r0, #28]
    6dee:	f013 0f03 	tst.w	r3, #3
    6df2:	d1fb      	bne.n	6dec <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6df4:	2000      	movs	r0, #0
    6df6:	4770      	bx	lr
		return ERR_BUSY;
    6df8:	f06f 0003 	mvn.w	r0, #3
}
    6dfc:	4770      	bx	lr

00006dfe <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6dfe:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6e00:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6e02:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6e04:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6e06:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6e08:	f013 0f01 	tst.w	r3, #1
    6e0c:	d109      	bne.n	6e22 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6e0e:	f013 0f04 	tst.w	r3, #4
    6e12:	d109      	bne.n	6e28 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6e14:	f013 0f02 	tst.w	r3, #2
    6e18:	d109      	bne.n	6e2e <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6e1a:	f013 0f80 	tst.w	r3, #128	; 0x80
    6e1e:	d10b      	bne.n	6e38 <_spi_handler+0x3a>
    6e20:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6e22:	6883      	ldr	r3, [r0, #8]
    6e24:	4798      	blx	r3
    6e26:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6e28:	68c3      	ldr	r3, [r0, #12]
    6e2a:	4798      	blx	r3
    6e2c:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6e2e:	2302      	movs	r3, #2
    6e30:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6e32:	6903      	ldr	r3, [r0, #16]
    6e34:	4798      	blx	r3
    6e36:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6e38:	2304      	movs	r3, #4
    6e3a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6e3c:	2380      	movs	r3, #128	; 0x80
    6e3e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6e40:	6943      	ldr	r3, [r0, #20]
    6e42:	f06f 0112 	mvn.w	r1, #18
    6e46:	4798      	blx	r3
	}
}
    6e48:	e7ea      	b.n	6e20 <_spi_handler+0x22>
	...

00006e4c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6e4c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6e4e:	4b03      	ldr	r3, [pc, #12]	; (6e5c <_spi_get_tx_dma_channel+0x10>)
    6e50:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6e52:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6e54:	bf0c      	ite	eq
    6e56:	2008      	moveq	r0, #8
    6e58:	2000      	movne	r0, #0
    6e5a:	bd08      	pop	{r3, pc}
    6e5c:	00006c41 	.word	0x00006c41

00006e60 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6e60:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6e62:	4b03      	ldr	r3, [pc, #12]	; (6e70 <_spi_get_rx_dma_channel+0x10>)
    6e64:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6e66:	2807      	cmp	r0, #7
    6e68:	bf8c      	ite	hi
    6e6a:	2000      	movhi	r0, #0
    6e6c:	2001      	movls	r0, #1
    6e6e:	bd08      	pop	{r3, pc}
    6e70:	00006c41 	.word	0x00006c41

00006e74 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6e74:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6e76:	6883      	ldr	r3, [r0, #8]
    6e78:	689b      	ldr	r3, [r3, #8]
    6e7a:	b103      	cbz	r3, 6e7e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6e7c:	4798      	blx	r3
    6e7e:	bd08      	pop	{r3, pc}

00006e80 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6e80:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6e82:	6883      	ldr	r3, [r0, #8]
    6e84:	685b      	ldr	r3, [r3, #4]
    6e86:	b103      	cbz	r3, 6e8a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6e88:	4798      	blx	r3
    6e8a:	bd08      	pop	{r3, pc}

00006e8c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6e8c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6e8e:	6883      	ldr	r3, [r0, #8]
    6e90:	68db      	ldr	r3, [r3, #12]
    6e92:	b103      	cbz	r3, 6e96 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6e94:	4798      	blx	r3
    6e96:	bd08      	pop	{r3, pc}

00006e98 <_usart_init>:
{
    6e98:	b510      	push	{r4, lr}
    6e9a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6e9c:	4b48      	ldr	r3, [pc, #288]	; (6fc0 <_usart_init+0x128>)
    6e9e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6ea0:	2800      	cmp	r0, #0
    6ea2:	d06a      	beq.n	6f7a <_usart_init+0xe2>
    6ea4:	2801      	cmp	r0, #1
    6ea6:	d062      	beq.n	6f6e <_usart_init+0xd6>
    6ea8:	2802      	cmp	r0, #2
    6eaa:	d062      	beq.n	6f72 <_usart_init+0xda>
    6eac:	2804      	cmp	r0, #4
    6eae:	d062      	beq.n	6f76 <_usart_init+0xde>
    6eb0:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6eb2:	bf08      	it	eq
    6eb4:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6eb6:	d006      	beq.n	6ec6 <_usart_init+0x2e>
	ASSERT(false);
    6eb8:	f240 2276 	movw	r2, #630	; 0x276
    6ebc:	4941      	ldr	r1, [pc, #260]	; (6fc4 <_usart_init+0x12c>)
    6ebe:	2000      	movs	r0, #0
    6ec0:	4b41      	ldr	r3, [pc, #260]	; (6fc8 <_usart_init+0x130>)
    6ec2:	4798      	blx	r3
	return 0;
    6ec4:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6ec6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6ec8:	f013 0f01 	tst.w	r3, #1
    6ecc:	d122      	bne.n	6f14 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6ece:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6ed2:	4a3e      	ldr	r2, [pc, #248]	; (6fcc <_usart_init+0x134>)
    6ed4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6eda:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ede:	69e3      	ldr	r3, [r4, #28]
    6ee0:	f013 0f03 	tst.w	r3, #3
    6ee4:	d1fb      	bne.n	6ede <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6ee6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6ee8:	f013 0f02 	tst.w	r3, #2
    6eec:	d00b      	beq.n	6f06 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6eee:	6823      	ldr	r3, [r4, #0]
    6ef0:	f023 0302 	bic.w	r3, r3, #2
    6ef4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ef6:	69e3      	ldr	r3, [r4, #28]
    6ef8:	f013 0f03 	tst.w	r3, #3
    6efc:	d1fb      	bne.n	6ef6 <_usart_init+0x5e>
    6efe:	69e3      	ldr	r3, [r4, #28]
    6f00:	f013 0f02 	tst.w	r3, #2
    6f04:	d1fb      	bne.n	6efe <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6f06:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6f0a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f0c:	69e3      	ldr	r3, [r4, #28]
    6f0e:	f013 0f03 	tst.w	r3, #3
    6f12:	d1fb      	bne.n	6f0c <_usart_init+0x74>
    6f14:	69e3      	ldr	r3, [r4, #28]
    6f16:	f013 0f01 	tst.w	r3, #1
    6f1a:	d1fb      	bne.n	6f14 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6f1c:	460a      	mov	r2, r1
    6f1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6f22:	4b2a      	ldr	r3, [pc, #168]	; (6fcc <_usart_init+0x134>)
    6f24:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6f28:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6f2a:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f2c:	69e3      	ldr	r3, [r4, #28]
    6f2e:	f013 0f03 	tst.w	r3, #3
    6f32:	d1fb      	bne.n	6f2c <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6f34:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6f38:	4924      	ldr	r1, [pc, #144]	; (6fcc <_usart_init+0x134>)
    6f3a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6f40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f42:	69e3      	ldr	r3, [r4, #28]
    6f44:	f013 0f1f 	tst.w	r3, #31
    6f48:	d1fb      	bne.n	6f42 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6f4a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6f4e:	491f      	ldr	r1, [pc, #124]	; (6fcc <_usart_init+0x134>)
    6f50:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6f56:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6f58:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6f5c:	d10f      	bne.n	6f7e <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6f5e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6f62:	491a      	ldr	r1, [pc, #104]	; (6fcc <_usart_init+0x134>)
    6f64:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6f68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6f6a:	81a3      	strh	r3, [r4, #12]
    6f6c:	e016      	b.n	6f9c <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6f6e:	2101      	movs	r1, #1
    6f70:	e7a9      	b.n	6ec6 <_usart_init+0x2e>
    6f72:	2102      	movs	r1, #2
    6f74:	e7a7      	b.n	6ec6 <_usart_init+0x2e>
    6f76:	2103      	movs	r1, #3
    6f78:	e7a5      	b.n	6ec6 <_usart_init+0x2e>
    6f7a:	2100      	movs	r1, #0
    6f7c:	e7a3      	b.n	6ec6 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6f7e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6f82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6f86:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6f88:	89a1      	ldrh	r1, [r4, #12]
    6f8a:	f360 010c 	bfi	r1, r0, #0, #13
    6f8e:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6f90:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6f94:	89a3      	ldrh	r3, [r4, #12]
    6f96:	f361 334f 	bfi	r3, r1, #13, #3
    6f9a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6f9c:	4b0b      	ldr	r3, [pc, #44]	; (6fcc <_usart_init+0x134>)
    6f9e:	0051      	lsls	r1, r2, #1
    6fa0:	1888      	adds	r0, r1, r2
    6fa2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6fa6:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6faa:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6fac:	440a      	add	r2, r1
    6fae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6fb6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6fba:	2000      	movs	r0, #0
    6fbc:	bd10      	pop	{r4, pc}
    6fbe:	bf00      	nop
    6fc0:	00006c41 	.word	0x00006c41
    6fc4:	0000df08 	.word	0x0000df08
    6fc8:	00005dad 	.word	0x00005dad
    6fcc:	0000de34 	.word	0x0000de34

00006fd0 <_get_i2cm_index>:
{
    6fd0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6fd2:	4b07      	ldr	r3, [pc, #28]	; (6ff0 <_get_i2cm_index+0x20>)
    6fd4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    6fd6:	2805      	cmp	r0, #5
    6fd8:	d008      	beq.n	6fec <_get_i2cm_index+0x1c>
	ASSERT(false);
    6fda:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6fde:	4905      	ldr	r1, [pc, #20]	; (6ff4 <_get_i2cm_index+0x24>)
    6fe0:	2000      	movs	r0, #0
    6fe2:	4b05      	ldr	r3, [pc, #20]	; (6ff8 <_get_i2cm_index+0x28>)
    6fe4:	4798      	blx	r3
	return -1;
    6fe6:	f04f 30ff 	mov.w	r0, #4294967295
}
    6fea:	bd08      	pop	{r3, pc}
			return i;
    6fec:	2000      	movs	r0, #0
    6fee:	bd08      	pop	{r3, pc}
    6ff0:	00006c41 	.word	0x00006c41
    6ff4:	0000df08 	.word	0x0000df08
    6ff8:	00005dad 	.word	0x00005dad

00006ffc <_i2c_m_sync_init_impl>:
{
    6ffc:	b538      	push	{r3, r4, r5, lr}
    6ffe:	4605      	mov	r5, r0
    7000:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    7002:	4608      	mov	r0, r1
    7004:	4b34      	ldr	r3, [pc, #208]	; (70d8 <_i2c_m_sync_init_impl+0xdc>)
    7006:	4798      	blx	r3
    7008:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    700a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    700c:	f013 0f01 	tst.w	r3, #1
    7010:	d123      	bne.n	705a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7012:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7016:	4a31      	ldr	r2, [pc, #196]	; (70dc <_i2c_m_sync_init_impl+0xe0>)
    7018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    701c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    7020:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7024:	69e3      	ldr	r3, [r4, #28]
    7026:	f013 0f03 	tst.w	r3, #3
    702a:	d1fb      	bne.n	7024 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    702c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    702e:	f013 0f02 	tst.w	r3, #2
    7032:	d00b      	beq.n	704c <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7034:	6823      	ldr	r3, [r4, #0]
    7036:	f023 0302 	bic.w	r3, r3, #2
    703a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    703c:	69e3      	ldr	r3, [r4, #28]
    703e:	f013 0f03 	tst.w	r3, #3
    7042:	d1fb      	bne.n	703c <_i2c_m_sync_init_impl+0x40>
    7044:	69e3      	ldr	r3, [r4, #28]
    7046:	f013 0f02 	tst.w	r3, #2
    704a:	d1fb      	bne.n	7044 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    704c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7050:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7052:	69e3      	ldr	r3, [r4, #28]
    7054:	f013 0f03 	tst.w	r3, #3
    7058:	d1fb      	bne.n	7052 <_i2c_m_sync_init_impl+0x56>
    705a:	69e3      	ldr	r3, [r4, #28]
    705c:	f013 0f01 	tst.w	r3, #1
    7060:	d1fb      	bne.n	705a <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7062:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7066:	4a1d      	ldr	r2, [pc, #116]	; (70dc <_i2c_m_sync_init_impl+0xe0>)
    7068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    706c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7070:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7072:	69e3      	ldr	r3, [r4, #28]
    7074:	f013 0f03 	tst.w	r3, #3
    7078:	d1fb      	bne.n	7072 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    707a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    707e:	4917      	ldr	r1, [pc, #92]	; (70dc <_i2c_m_sync_init_impl+0xe0>)
    7080:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7088:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    708a:	69e3      	ldr	r3, [r4, #28]
    708c:	f013 0f04 	tst.w	r3, #4
    7090:	d1fb      	bne.n	708a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7092:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7096:	4911      	ldr	r1, [pc, #68]	; (70dc <_i2c_m_sync_init_impl+0xe0>)
    7098:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    709c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    70a0:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    70a2:	f3c2 6301 	ubfx	r3, r2, #24, #2
    70a6:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    70a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    70aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    70ae:	2b01      	cmp	r3, #1
    70b0:	bf94      	ite	ls
    70b2:	2300      	movls	r3, #0
    70b4:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    70b6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    70ba:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    70bc:	69e3      	ldr	r3, [r4, #28]
    70be:	f013 0f04 	tst.w	r3, #4
    70c2:	d1fb      	bne.n	70bc <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    70c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    70c8:	4b04      	ldr	r3, [pc, #16]	; (70dc <_i2c_m_sync_init_impl+0xe0>)
    70ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    70ce:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    70d2:	81eb      	strh	r3, [r5, #14]
}
    70d4:	2000      	movs	r0, #0
    70d6:	bd38      	pop	{r3, r4, r5, pc}
    70d8:	00006fd1 	.word	0x00006fd1
    70dc:	0000de34 	.word	0x0000de34

000070e0 <_sercom_i2c_m_irq_handler>:
{
    70e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e4:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    70e6:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    70e8:	7e26      	ldrb	r6, [r4, #24]
    70ea:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    70ec:	f8df 8234 	ldr.w	r8, [pc, #564]	; 7324 <_sercom_i2c_m_irq_handler+0x244>
    70f0:	f240 425f 	movw	r2, #1119	; 0x45f
    70f4:	4641      	mov	r1, r8
    70f6:	3000      	adds	r0, #0
    70f8:	bf18      	it	ne
    70fa:	2001      	movne	r0, #1
    70fc:	4f88      	ldr	r7, [pc, #544]	; (7320 <_sercom_i2c_m_irq_handler+0x240>)
    70fe:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    7100:	6928      	ldr	r0, [r5, #16]
    7102:	f44f 628c 	mov.w	r2, #1120	; 0x460
    7106:	4641      	mov	r1, r8
    7108:	3000      	adds	r0, #0
    710a:	bf18      	it	ne
    710c:	2001      	movne	r0, #1
    710e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    7110:	f016 0f80 	tst.w	r6, #128	; 0x80
    7114:	f040 80f4 	bne.w	7300 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7118:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    711a:	69e3      	ldr	r3, [r4, #28]
    711c:	f013 0f04 	tst.w	r3, #4
    7120:	d1fb      	bne.n	711a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7122:	8b63      	ldrh	r3, [r4, #26]
    7124:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    7126:	f016 0f01 	tst.w	r6, #1
    712a:	f000 8090 	beq.w	724e <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    712e:	f013 0f02 	tst.w	r3, #2
    7132:	d022      	beq.n	717a <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7134:	2201      	movs	r2, #1
    7136:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    7138:	886a      	ldrh	r2, [r5, #2]
    713a:	b292      	uxth	r2, r2
    713c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    7140:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    7142:	886a      	ldrh	r2, [r5, #2]
    7144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7148:	0412      	lsls	r2, r2, #16
    714a:	0c12      	lsrs	r2, r2, #16
    714c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    714e:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    7152:	2b00      	cmp	r3, #0
    7154:	bf14      	ite	ne
    7156:	f06f 0104 	mvnne.w	r1, #4
    715a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    715e:	886b      	ldrh	r3, [r5, #2]
    7160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7164:	041b      	lsls	r3, r3, #16
    7166:	0c1b      	lsrs	r3, r3, #16
    7168:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    716a:	696b      	ldr	r3, [r5, #20]
    716c:	2b00      	cmp	r3, #0
    716e:	f000 80c5 	beq.w	72fc <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    7172:	4628      	mov	r0, r5
    7174:	4798      	blx	r3
    7176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    717a:	f013 0f04 	tst.w	r3, #4
    717e:	d124      	bne.n	71ca <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    7180:	886b      	ldrh	r3, [r5, #2]
    7182:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7186:	d03e      	beq.n	7206 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7188:	882b      	ldrh	r3, [r5, #0]
    718a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    718c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7190:	69e3      	ldr	r3, [r4, #28]
    7192:	f013 0f04 	tst.w	r3, #4
    7196:	d1fb      	bne.n	7190 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7198:	6a63      	ldr	r3, [r4, #36]	; 0x24
    719a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    719e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    71a2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    71a4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71a6:	69e3      	ldr	r3, [r4, #28]
    71a8:	f013 0f04 	tst.w	r3, #4
    71ac:	d1fb      	bne.n	71a6 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    71ae:	886b      	ldrh	r3, [r5, #2]
    71b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    71b4:	041b      	lsls	r3, r3, #16
    71b6:	0c1b      	lsrs	r3, r3, #16
    71b8:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    71ba:	69ab      	ldr	r3, [r5, #24]
    71bc:	2b00      	cmp	r3, #0
    71be:	f000 8088 	beq.w	72d2 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    71c2:	4628      	mov	r0, r5
    71c4:	4798      	blx	r3
    71c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    71ca:	686b      	ldr	r3, [r5, #4]
    71cc:	2b00      	cmp	r3, #0
    71ce:	dd04      	ble.n	71da <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    71d0:	886b      	ldrh	r3, [r5, #2]
    71d2:	b29b      	uxth	r3, r3
    71d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    71d8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    71da:	886b      	ldrh	r3, [r5, #2]
    71dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    71e0:	d108      	bne.n	71f4 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    71e2:	886b      	ldrh	r3, [r5, #2]
    71e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    71e8:	041b      	lsls	r3, r3, #16
    71ea:	0c1b      	lsrs	r3, r3, #16
    71ec:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    71ee:	f06f 0101 	mvn.w	r1, #1
    71f2:	e7b4      	b.n	715e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    71f4:	6863      	ldr	r3, [r4, #4]
    71f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    71fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71fc:	69e3      	ldr	r3, [r4, #28]
    71fe:	f013 0f04 	tst.w	r3, #4
    7202:	d1fb      	bne.n	71fc <_sercom_i2c_m_irq_handler+0x11c>
    7204:	e7ed      	b.n	71e2 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    7206:	686b      	ldr	r3, [r5, #4]
    7208:	b99b      	cbnz	r3, 7232 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    720a:	886b      	ldrh	r3, [r5, #2]
    720c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7210:	d106      	bne.n	7220 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    7212:	886b      	ldrh	r3, [r5, #2]
    7214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7218:	041b      	lsls	r3, r3, #16
    721a:	0c1b      	lsrs	r3, r3, #16
    721c:	806b      	strh	r3, [r5, #2]
    721e:	e7cc      	b.n	71ba <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7220:	6863      	ldr	r3, [r4, #4]
    7222:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    7226:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7228:	69e3      	ldr	r3, [r4, #28]
    722a:	f013 0f04 	tst.w	r3, #4
    722e:	d1fb      	bne.n	7228 <_sercom_i2c_m_irq_handler+0x148>
    7230:	e7ef      	b.n	7212 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7232:	68ab      	ldr	r3, [r5, #8]
    7234:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7236:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7238:	69e3      	ldr	r3, [r4, #28]
    723a:	f013 0f04 	tst.w	r3, #4
    723e:	d1fb      	bne.n	7238 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    7240:	68ab      	ldr	r3, [r5, #8]
    7242:	3301      	adds	r3, #1
    7244:	60ab      	str	r3, [r5, #8]
				msg->len--;
    7246:	686b      	ldr	r3, [r5, #4]
    7248:	3b01      	subs	r3, #1
    724a:	606b      	str	r3, [r5, #4]
    724c:	e7b5      	b.n	71ba <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    724e:	f016 0f02 	tst.w	r6, #2
    7252:	d041      	beq.n	72d8 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7254:	686a      	ldr	r2, [r5, #4]
    7256:	2a00      	cmp	r2, #0
    7258:	d036      	beq.n	72c8 <_sercom_i2c_m_irq_handler+0x1e8>
    725a:	f013 0f04 	tst.w	r3, #4
    725e:	d133      	bne.n	72c8 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7260:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    7264:	3a01      	subs	r2, #1
    7266:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7268:	2a00      	cmp	r2, #0
    726a:	d137      	bne.n	72dc <_sercom_i2c_m_irq_handler+0x1fc>
    726c:	2900      	cmp	r1, #0
    726e:	d039      	beq.n	72e4 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    7270:	886b      	ldrh	r3, [r5, #2]
    7272:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7276:	d116      	bne.n	72a6 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    7278:	886b      	ldrh	r3, [r5, #2]
    727a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    727e:	041b      	lsls	r3, r3, #16
    7280:	0c1b      	lsrs	r3, r3, #16
    7282:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7284:	68aa      	ldr	r2, [r5, #8]
    7286:	1c53      	adds	r3, r2, #1
    7288:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    728a:	69e3      	ldr	r3, [r4, #28]
    728c:	f013 0f04 	tst.w	r3, #4
    7290:	d1fb      	bne.n	728a <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7294:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7296:	2302      	movs	r3, #2
    7298:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    729a:	69eb      	ldr	r3, [r5, #28]
    729c:	b1e3      	cbz	r3, 72d8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    729e:	4628      	mov	r0, r5
    72a0:	4798      	blx	r3
    72a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    72a6:	6863      	ldr	r3, [r4, #4]
    72a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    72ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72ae:	69e3      	ldr	r3, [r4, #28]
    72b0:	f013 0f04 	tst.w	r3, #4
    72b4:	d1fb      	bne.n	72ae <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    72b6:	6863      	ldr	r3, [r4, #4]
    72b8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    72bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72be:	69e3      	ldr	r3, [r4, #28]
    72c0:	f013 0f04 	tst.w	r3, #4
    72c4:	d1fb      	bne.n	72be <_sercom_i2c_m_irq_handler+0x1de>
    72c6:	e7d7      	b.n	7278 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    72c8:	2302      	movs	r3, #2
    72ca:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    72cc:	f06f 0101 	mvn.w	r1, #1
    72d0:	e745      	b.n	715e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    72d2:	f016 0f02 	tst.w	r6, #2
    72d6:	d1e0      	bne.n	729a <_sercom_i2c_m_irq_handler+0x1ba>
    72d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    72dc:	2a01      	cmp	r2, #1
    72de:	d1d1      	bne.n	7284 <_sercom_i2c_m_irq_handler+0x1a4>
    72e0:	2900      	cmp	r1, #0
    72e2:	d0cf      	beq.n	7284 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    72e4:	6863      	ldr	r3, [r4, #4]
    72e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    72ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72ec:	69e3      	ldr	r3, [r4, #28]
    72ee:	f013 0f04 	tst.w	r3, #4
    72f2:	d1fb      	bne.n	72ec <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    72f4:	686b      	ldr	r3, [r5, #4]
    72f6:	2b00      	cmp	r3, #0
    72f8:	d0ba      	beq.n	7270 <_sercom_i2c_m_irq_handler+0x190>
    72fa:	e7c3      	b.n	7284 <_sercom_i2c_m_irq_handler+0x1a4>
    72fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7300:	886b      	ldrh	r3, [r5, #2]
    7302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7306:	041b      	lsls	r3, r3, #16
    7308:	0c1b      	lsrs	r3, r3, #16
    730a:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    730c:	696b      	ldr	r3, [r5, #20]
    730e:	2b00      	cmp	r3, #0
    7310:	d0e2      	beq.n	72d8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    7312:	f06f 0104 	mvn.w	r1, #4
    7316:	4628      	mov	r0, r5
    7318:	4798      	blx	r3
    731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    731e:	bf00      	nop
    7320:	00005dad 	.word	0x00005dad
    7324:	0000df08 	.word	0x0000df08

00007328 <_usart_set_parity>:
{
    7328:	b570      	push	{r4, r5, r6, lr}
    732a:	b082      	sub	sp, #8
    732c:	4604      	mov	r4, r0
    732e:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7330:	69e3      	ldr	r3, [r4, #28]
    7332:	f013 0f03 	tst.w	r3, #3
    7336:	d1fb      	bne.n	7330 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7338:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    733a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    733e:	6823      	ldr	r3, [r4, #0]
    7340:	f023 0302 	bic.w	r3, r3, #2
    7344:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7346:	69e3      	ldr	r3, [r4, #28]
    7348:	f013 0f03 	tst.w	r3, #3
    734c:	d1fb      	bne.n	7346 <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    734e:	a801      	add	r0, sp, #4
    7350:	4b1a      	ldr	r3, [pc, #104]	; (73bc <_usart_set_parity+0x94>)
    7352:	4798      	blx	r3
    7354:	69e3      	ldr	r3, [r4, #28]
    7356:	f013 0f02 	tst.w	r3, #2
    735a:	d1fb      	bne.n	7354 <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    735c:	2e02      	cmp	r6, #2
    735e:	d023      	beq.n	73a8 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    7360:	6823      	ldr	r3, [r4, #0]
    7362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7366:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7368:	69e3      	ldr	r3, [r4, #28]
    736a:	f013 0f1f 	tst.w	r3, #31
    736e:	d1fb      	bne.n	7368 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    7370:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    7372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    7376:	3600      	adds	r6, #0
    7378:	bf18      	it	ne
    737a:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    737c:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    7380:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7382:	69e3      	ldr	r3, [r4, #28]
    7384:	f013 0f1f 	tst.w	r3, #31
    7388:	d1fb      	bne.n	7382 <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    738a:	a801      	add	r0, sp, #4
    738c:	4b0c      	ldr	r3, [pc, #48]	; (73c0 <_usart_set_parity+0x98>)
    738e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7390:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    7392:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    7396:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    739a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    739c:	69e3      	ldr	r3, [r4, #28]
    739e:	f013 0f03 	tst.w	r3, #3
    73a2:	d1fb      	bne.n	739c <_usart_set_parity+0x74>
}
    73a4:	b002      	add	sp, #8
    73a6:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    73a8:	6823      	ldr	r3, [r4, #0]
    73aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    73ae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    73b0:	69e3      	ldr	r3, [r4, #28]
    73b2:	f013 0f1f 	tst.w	r3, #31
    73b6:	d1fb      	bne.n	73b0 <_usart_set_parity+0x88>
    73b8:	e7da      	b.n	7370 <_usart_set_parity+0x48>
    73ba:	bf00      	nop
    73bc:	000049b9 	.word	0x000049b9
    73c0:	000049c7 	.word	0x000049c7

000073c4 <_usart_sync_init>:
{
    73c4:	b538      	push	{r3, r4, r5, lr}
    73c6:	460c      	mov	r4, r1
	ASSERT(device);
    73c8:	4605      	mov	r5, r0
    73ca:	22c8      	movs	r2, #200	; 0xc8
    73cc:	4905      	ldr	r1, [pc, #20]	; (73e4 <_usart_sync_init+0x20>)
    73ce:	3000      	adds	r0, #0
    73d0:	bf18      	it	ne
    73d2:	2001      	movne	r0, #1
    73d4:	4b04      	ldr	r3, [pc, #16]	; (73e8 <_usart_sync_init+0x24>)
    73d6:	4798      	blx	r3
	device->hw = hw;
    73d8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    73da:	4620      	mov	r0, r4
    73dc:	4b03      	ldr	r3, [pc, #12]	; (73ec <_usart_sync_init+0x28>)
    73de:	4798      	blx	r3
}
    73e0:	bd38      	pop	{r3, r4, r5, pc}
    73e2:	bf00      	nop
    73e4:	0000df08 	.word	0x0000df08
    73e8:	00005dad 	.word	0x00005dad
    73ec:	00006e99 	.word	0x00006e99

000073f0 <_usart_async_init>:
{
    73f0:	b570      	push	{r4, r5, r6, lr}
    73f2:	460d      	mov	r5, r1
	ASSERT(device);
    73f4:	4606      	mov	r6, r0
    73f6:	22d6      	movs	r2, #214	; 0xd6
    73f8:	4917      	ldr	r1, [pc, #92]	; (7458 <_usart_async_init+0x68>)
    73fa:	3000      	adds	r0, #0
    73fc:	bf18      	it	ne
    73fe:	2001      	movne	r0, #1
    7400:	4b16      	ldr	r3, [pc, #88]	; (745c <_usart_async_init+0x6c>)
    7402:	4798      	blx	r3
	init_status = _usart_init(hw);
    7404:	4628      	mov	r0, r5
    7406:	4b16      	ldr	r3, [pc, #88]	; (7460 <_usart_async_init+0x70>)
    7408:	4798      	blx	r3
	if (init_status) {
    740a:	4604      	mov	r4, r0
    740c:	b108      	cbz	r0, 7412 <_usart_async_init+0x22>
}
    740e:	4620      	mov	r0, r4
    7410:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    7412:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7414:	4631      	mov	r1, r6
    7416:	4628      	mov	r0, r5
    7418:	4b12      	ldr	r3, [pc, #72]	; (7464 <_usart_async_init+0x74>)
    741a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    741c:	4628      	mov	r0, r5
    741e:	4b12      	ldr	r3, [pc, #72]	; (7468 <_usart_async_init+0x78>)
    7420:	4798      	blx	r3
    7422:	1d01      	adds	r1, r0, #4
    7424:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7426:	2501      	movs	r5, #1
    7428:	f000 021f 	and.w	r2, r0, #31
    742c:	fa05 f202 	lsl.w	r2, r5, r2
    7430:	0943      	lsrs	r3, r0, #5
    7432:	009b      	lsls	r3, r3, #2
    7434:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7438:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    743c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7444:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7448:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    744c:	601a      	str	r2, [r3, #0]
		irq++;
    744e:	3001      	adds	r0, #1
    7450:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7452:	4281      	cmp	r1, r0
    7454:	d1e8      	bne.n	7428 <_usart_async_init+0x38>
    7456:	e7da      	b.n	740e <_usart_async_init+0x1e>
    7458:	0000df08 	.word	0x0000df08
    745c:	00005dad 	.word	0x00005dad
    7460:	00006e99 	.word	0x00006e99
    7464:	00006cf5 	.word	0x00006cf5
    7468:	00006d55 	.word	0x00006d55

0000746c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    746c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    746e:	6813      	ldr	r3, [r2, #0]
    7470:	f043 0302 	orr.w	r3, r3, #2
    7474:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7476:	69d3      	ldr	r3, [r2, #28]
    7478:	f013 0f03 	tst.w	r3, #3
    747c:	d1fb      	bne.n	7476 <_usart_sync_enable+0xa>
}
    747e:	4770      	bx	lr

00007480 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7480:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7482:	6813      	ldr	r3, [r2, #0]
    7484:	f043 0302 	orr.w	r3, r3, #2
    7488:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    748a:	69d3      	ldr	r3, [r2, #28]
    748c:	f013 0f03 	tst.w	r3, #3
    7490:	d1fb      	bne.n	748a <_usart_async_enable+0xa>
}
    7492:	4770      	bx	lr

00007494 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    7494:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7496:	6813      	ldr	r3, [r2, #0]
    7498:	f023 0302 	bic.w	r3, r3, #2
    749c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    749e:	69d3      	ldr	r3, [r2, #28]
    74a0:	f013 0f03 	tst.w	r3, #3
    74a4:	d1fb      	bne.n	749e <_usart_async_disable+0xa>
}
    74a6:	4770      	bx	lr

000074a8 <_usart_async_set_parity>:
{
    74a8:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    74aa:	6980      	ldr	r0, [r0, #24]
    74ac:	4b01      	ldr	r3, [pc, #4]	; (74b4 <_usart_async_set_parity+0xc>)
    74ae:	4798      	blx	r3
    74b0:	bd08      	pop	{r3, pc}
    74b2:	bf00      	nop
    74b4:	00007329 	.word	0x00007329

000074b8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    74b8:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    74ba:	6299      	str	r1, [r3, #40]	; 0x28
    74bc:	4770      	bx	lr

000074be <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    74be:	6983      	ldr	r3, [r0, #24]
    74c0:	6299      	str	r1, [r3, #40]	; 0x28
    74c2:	4770      	bx	lr

000074c4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    74c4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    74c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    74c8:	b2c0      	uxtb	r0, r0
    74ca:	4770      	bx	lr

000074cc <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    74cc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    74ce:	7e18      	ldrb	r0, [r3, #24]
}
    74d0:	f000 0001 	and.w	r0, r0, #1
    74d4:	4770      	bx	lr

000074d6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    74d6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    74d8:	7e18      	ldrb	r0, [r3, #24]
}
    74da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    74de:	4770      	bx	lr

000074e0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    74e0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    74e2:	7e18      	ldrb	r0, [r3, #24]
}
    74e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    74e8:	4770      	bx	lr

000074ea <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    74ea:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    74ec:	2201      	movs	r2, #1
    74ee:	759a      	strb	r2, [r3, #22]
    74f0:	4770      	bx	lr

000074f2 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    74f2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    74f4:	2202      	movs	r2, #2
    74f6:	759a      	strb	r2, [r3, #22]
    74f8:	4770      	bx	lr
	...

000074fc <_usart_async_set_irq_state>:
{
    74fc:	b570      	push	{r4, r5, r6, lr}
    74fe:	460c      	mov	r4, r1
    7500:	4616      	mov	r6, r2
	ASSERT(device);
    7502:	4605      	mov	r5, r0
    7504:	f240 2236 	movw	r2, #566	; 0x236
    7508:	4915      	ldr	r1, [pc, #84]	; (7560 <_usart_async_set_irq_state+0x64>)
    750a:	3000      	adds	r0, #0
    750c:	bf18      	it	ne
    750e:	2001      	movne	r0, #1
    7510:	4b14      	ldr	r3, [pc, #80]	; (7564 <_usart_async_set_irq_state+0x68>)
    7512:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    7514:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    7518:	d10d      	bne.n	7536 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    751a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    751c:	b92e      	cbnz	r6, 752a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    751e:	2201      	movs	r2, #1
    7520:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    7522:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7524:	2202      	movs	r2, #2
    7526:	751a      	strb	r2, [r3, #20]
    7528:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    752a:	2201      	movs	r2, #1
    752c:	759a      	strb	r2, [r3, #22]
    752e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7530:	2202      	movs	r2, #2
    7532:	759a      	strb	r2, [r3, #22]
    7534:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    7536:	2c01      	cmp	r4, #1
    7538:	d002      	beq.n	7540 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    753a:	2c03      	cmp	r4, #3
    753c:	d008      	beq.n	7550 <_usart_async_set_irq_state+0x54>
    753e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    7540:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7542:	b916      	cbnz	r6, 754a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    7544:	2204      	movs	r2, #4
    7546:	751a      	strb	r2, [r3, #20]
    7548:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    754a:	2204      	movs	r2, #4
    754c:	759a      	strb	r2, [r3, #22]
    754e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    7550:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7552:	b116      	cbz	r6, 755a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7554:	2280      	movs	r2, #128	; 0x80
    7556:	759a      	strb	r2, [r3, #22]
}
    7558:	e7f1      	b.n	753e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    755a:	2280      	movs	r2, #128	; 0x80
    755c:	751a      	strb	r2, [r3, #20]
    755e:	bd70      	pop	{r4, r5, r6, pc}
    7560:	0000df08 	.word	0x0000df08
    7564:	00005dad 	.word	0x00005dad

00007568 <_i2c_m_async_init>:
{
    7568:	b570      	push	{r4, r5, r6, lr}
    756a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    756c:	4606      	mov	r6, r0
    756e:	f240 42d2 	movw	r2, #1234	; 0x4d2
    7572:	4918      	ldr	r1, [pc, #96]	; (75d4 <_i2c_m_async_init+0x6c>)
    7574:	3000      	adds	r0, #0
    7576:	bf18      	it	ne
    7578:	2001      	movne	r0, #1
    757a:	4b17      	ldr	r3, [pc, #92]	; (75d8 <_i2c_m_async_init+0x70>)
    757c:	4798      	blx	r3
	i2c_dev->hw = hw;
    757e:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7580:	4629      	mov	r1, r5
    7582:	4630      	mov	r0, r6
    7584:	4b15      	ldr	r3, [pc, #84]	; (75dc <_i2c_m_async_init+0x74>)
    7586:	4798      	blx	r3
	if (init_status) {
    7588:	4604      	mov	r4, r0
    758a:	b108      	cbz	r0, 7590 <_i2c_m_async_init+0x28>
}
    758c:	4620      	mov	r0, r4
    758e:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7590:	4631      	mov	r1, r6
    7592:	4628      	mov	r0, r5
    7594:	4b12      	ldr	r3, [pc, #72]	; (75e0 <_i2c_m_async_init+0x78>)
    7596:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7598:	4628      	mov	r0, r5
    759a:	4b12      	ldr	r3, [pc, #72]	; (75e4 <_i2c_m_async_init+0x7c>)
    759c:	4798      	blx	r3
    759e:	1d01      	adds	r1, r0, #4
    75a0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75a2:	2501      	movs	r5, #1
    75a4:	f000 021f 	and.w	r2, r0, #31
    75a8:	fa05 f202 	lsl.w	r2, r5, r2
    75ac:	0943      	lsrs	r3, r0, #5
    75ae:	009b      	lsls	r3, r3, #2
    75b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    75b4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    75b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    75bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75c0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75c8:	601a      	str	r2, [r3, #0]
		irq++;
    75ca:	3001      	adds	r0, #1
    75cc:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    75ce:	4281      	cmp	r1, r0
    75d0:	d1e8      	bne.n	75a4 <_i2c_m_async_init+0x3c>
    75d2:	e7db      	b.n	758c <_i2c_m_async_init+0x24>
    75d4:	0000df08 	.word	0x0000df08
    75d8:	00005dad 	.word	0x00005dad
    75dc:	00006ffd 	.word	0x00006ffd
    75e0:	00006cf5 	.word	0x00006cf5
    75e4:	00006d55 	.word	0x00006d55

000075e8 <_i2c_m_async_transfer>:
{
    75e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75ec:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    75ee:	4605      	mov	r5, r0
    75f0:	f110 0800 	adds.w	r8, r0, #0
    75f4:	bf18      	it	ne
    75f6:	f04f 0801 	movne.w	r8, #1
    75fa:	4f45      	ldr	r7, [pc, #276]	; (7710 <_i2c_m_async_transfer+0x128>)
    75fc:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    7600:	4639      	mov	r1, r7
    7602:	4640      	mov	r0, r8
    7604:	4e43      	ldr	r6, [pc, #268]	; (7714 <_i2c_m_async_transfer+0x12c>)
    7606:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    7608:	6928      	ldr	r0, [r5, #16]
    760a:	f240 5229 	movw	r2, #1321	; 0x529
    760e:	4639      	mov	r1, r7
    7610:	3000      	adds	r0, #0
    7612:	bf18      	it	ne
    7614:	2001      	movne	r0, #1
    7616:	47b0      	blx	r6
	ASSERT(msg);
    7618:	f240 522a 	movw	r2, #1322	; 0x52a
    761c:	4639      	mov	r1, r7
    761e:	1c20      	adds	r0, r4, #0
    7620:	bf18      	it	ne
    7622:	2001      	movne	r0, #1
    7624:	47b0      	blx	r6
	if (msg->len == 0) {
    7626:	6860      	ldr	r0, [r4, #4]
    7628:	2800      	cmp	r0, #0
    762a:	d06f      	beq.n	770c <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    762c:	886b      	ldrh	r3, [r5, #2]
    762e:	f413 7f80 	tst.w	r3, #256	; 0x100
    7632:	d169      	bne.n	7708 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    7634:	8863      	ldrh	r3, [r4, #2]
    7636:	b29b      	uxth	r3, r3
    7638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    763c:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    763e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    7642:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7646:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7648:	6853      	ldr	r3, [r2, #4]
    764a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    764e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7650:	69d3      	ldr	r3, [r2, #28]
    7652:	f013 0f04 	tst.w	r3, #4
    7656:	d1fb      	bne.n	7650 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7658:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    765a:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    765c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    7660:	492b      	ldr	r1, [pc, #172]	; (7710 <_i2c_m_async_transfer+0x128>)
    7662:	4640      	mov	r0, r8
    7664:	4b2b      	ldr	r3, [pc, #172]	; (7714 <_i2c_m_async_transfer+0x12c>)
    7666:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7668:	686b      	ldr	r3, [r5, #4]
    766a:	2b01      	cmp	r3, #1
    766c:	d02a      	beq.n	76c4 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    766e:	6863      	ldr	r3, [r4, #4]
    7670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7674:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7676:	69e3      	ldr	r3, [r4, #28]
    7678:	f013 0f04 	tst.w	r3, #4
    767c:	d1fb      	bne.n	7676 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    767e:	882b      	ldrh	r3, [r5, #0]
    7680:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7684:	d02a      	beq.n	76dc <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7686:	886a      	ldrh	r2, [r5, #2]
    7688:	f012 0f01 	tst.w	r2, #1
    768c:	d004      	beq.n	7698 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    768e:	886a      	ldrh	r2, [r5, #2]
    7690:	b292      	uxth	r2, r2
    7692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7696:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7698:	f240 72fe 	movw	r2, #2046	; 0x7fe
    769c:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    76a0:	69e3      	ldr	r3, [r4, #28]
    76a2:	f013 0f04 	tst.w	r3, #4
    76a6:	d1fb      	bne.n	76a0 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    76a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    76aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    76ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    76b2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    76b4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76b6:	69e3      	ldr	r3, [r4, #28]
    76b8:	f013 0f04 	tst.w	r3, #4
    76bc:	d1fb      	bne.n	76b6 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    76be:	2000      	movs	r0, #0
    76c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    76c4:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    76c8:	d0d1      	beq.n	766e <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    76ca:	6863      	ldr	r3, [r4, #4]
    76cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    76d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76d2:	69e3      	ldr	r3, [r4, #28]
    76d4:	f013 0f04 	tst.w	r3, #4
    76d8:	d1fb      	bne.n	76d2 <_i2c_m_async_transfer+0xea>
    76da:	e7d0      	b.n	767e <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    76dc:	8869      	ldrh	r1, [r5, #2]
    76de:	005a      	lsls	r2, r3, #1
    76e0:	b2d2      	uxtb	r2, r2
    76e2:	f001 0301 	and.w	r3, r1, #1
    76e6:	431a      	orrs	r2, r3
    76e8:	69e3      	ldr	r3, [r4, #28]
    76ea:	f013 0f04 	tst.w	r3, #4
    76ee:	d1fb      	bne.n	76e8 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    76f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    76f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    76f6:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    76f8:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76fa:	69e3      	ldr	r3, [r4, #28]
    76fc:	f013 0f04 	tst.w	r3, #4
    7700:	d1fb      	bne.n	76fa <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    7702:	2000      	movs	r0, #0
    7704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    7708:	f06f 0003 	mvn.w	r0, #3
}
    770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7710:	0000df08 	.word	0x0000df08
    7714:	00005dad 	.word	0x00005dad

00007718 <_i2c_m_async_register_callback>:
	switch (type) {
    7718:	2901      	cmp	r1, #1
    771a:	d006      	beq.n	772a <_i2c_m_async_register_callback+0x12>
    771c:	b119      	cbz	r1, 7726 <_i2c_m_async_register_callback+0xe>
    771e:	2902      	cmp	r1, #2
    7720:	d005      	beq.n	772e <_i2c_m_async_register_callback+0x16>
}
    7722:	2000      	movs	r0, #0
    7724:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7726:	6142      	str	r2, [r0, #20]
		break;
    7728:	e7fb      	b.n	7722 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    772a:	6182      	str	r2, [r0, #24]
		break;
    772c:	e7f9      	b.n	7722 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    772e:	61c2      	str	r2, [r0, #28]
		break;
    7730:	e7f7      	b.n	7722 <_i2c_m_async_register_callback+0xa>
	...

00007734 <SERCOM0_0_Handler>:
{
    7734:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7736:	4b02      	ldr	r3, [pc, #8]	; (7740 <SERCOM0_0_Handler+0xc>)
    7738:	6818      	ldr	r0, [r3, #0]
    773a:	4b02      	ldr	r3, [pc, #8]	; (7744 <SERCOM0_0_Handler+0x10>)
    773c:	4798      	blx	r3
    773e:	bd08      	pop	{r3, pc}
    7740:	20000980 	.word	0x20000980
    7744:	00006c85 	.word	0x00006c85

00007748 <SERCOM0_1_Handler>:
{
    7748:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    774a:	4b02      	ldr	r3, [pc, #8]	; (7754 <SERCOM0_1_Handler+0xc>)
    774c:	6818      	ldr	r0, [r3, #0]
    774e:	4b02      	ldr	r3, [pc, #8]	; (7758 <SERCOM0_1_Handler+0x10>)
    7750:	4798      	blx	r3
    7752:	bd08      	pop	{r3, pc}
    7754:	20000980 	.word	0x20000980
    7758:	00006c85 	.word	0x00006c85

0000775c <SERCOM0_2_Handler>:
{
    775c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    775e:	4b02      	ldr	r3, [pc, #8]	; (7768 <SERCOM0_2_Handler+0xc>)
    7760:	6818      	ldr	r0, [r3, #0]
    7762:	4b02      	ldr	r3, [pc, #8]	; (776c <SERCOM0_2_Handler+0x10>)
    7764:	4798      	blx	r3
    7766:	bd08      	pop	{r3, pc}
    7768:	20000980 	.word	0x20000980
    776c:	00006c85 	.word	0x00006c85

00007770 <SERCOM0_3_Handler>:
{
    7770:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7772:	4b02      	ldr	r3, [pc, #8]	; (777c <SERCOM0_3_Handler+0xc>)
    7774:	6818      	ldr	r0, [r3, #0]
    7776:	4b02      	ldr	r3, [pc, #8]	; (7780 <SERCOM0_3_Handler+0x10>)
    7778:	4798      	blx	r3
    777a:	bd08      	pop	{r3, pc}
    777c:	20000980 	.word	0x20000980
    7780:	00006c85 	.word	0x00006c85

00007784 <SERCOM1_0_Handler>:
{
    7784:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7786:	4b02      	ldr	r3, [pc, #8]	; (7790 <SERCOM1_0_Handler+0xc>)
    7788:	6858      	ldr	r0, [r3, #4]
    778a:	4b02      	ldr	r3, [pc, #8]	; (7794 <SERCOM1_0_Handler+0x10>)
    778c:	4798      	blx	r3
    778e:	bd08      	pop	{r3, pc}
    7790:	20000980 	.word	0x20000980
    7794:	00006c85 	.word	0x00006c85

00007798 <SERCOM1_1_Handler>:
{
    7798:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    779a:	4b02      	ldr	r3, [pc, #8]	; (77a4 <SERCOM1_1_Handler+0xc>)
    779c:	6858      	ldr	r0, [r3, #4]
    779e:	4b02      	ldr	r3, [pc, #8]	; (77a8 <SERCOM1_1_Handler+0x10>)
    77a0:	4798      	blx	r3
    77a2:	bd08      	pop	{r3, pc}
    77a4:	20000980 	.word	0x20000980
    77a8:	00006c85 	.word	0x00006c85

000077ac <SERCOM1_2_Handler>:
{
    77ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    77ae:	4b02      	ldr	r3, [pc, #8]	; (77b8 <SERCOM1_2_Handler+0xc>)
    77b0:	6858      	ldr	r0, [r3, #4]
    77b2:	4b02      	ldr	r3, [pc, #8]	; (77bc <SERCOM1_2_Handler+0x10>)
    77b4:	4798      	blx	r3
    77b6:	bd08      	pop	{r3, pc}
    77b8:	20000980 	.word	0x20000980
    77bc:	00006c85 	.word	0x00006c85

000077c0 <SERCOM1_3_Handler>:
{
    77c0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    77c2:	4b02      	ldr	r3, [pc, #8]	; (77cc <SERCOM1_3_Handler+0xc>)
    77c4:	6858      	ldr	r0, [r3, #4]
    77c6:	4b02      	ldr	r3, [pc, #8]	; (77d0 <SERCOM1_3_Handler+0x10>)
    77c8:	4798      	blx	r3
    77ca:	bd08      	pop	{r3, pc}
    77cc:	20000980 	.word	0x20000980
    77d0:	00006c85 	.word	0x00006c85

000077d4 <SERCOM3_0_Handler>:
{
    77d4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    77d6:	4b02      	ldr	r3, [pc, #8]	; (77e0 <SERCOM3_0_Handler+0xc>)
    77d8:	6898      	ldr	r0, [r3, #8]
    77da:	4b02      	ldr	r3, [pc, #8]	; (77e4 <SERCOM3_0_Handler+0x10>)
    77dc:	4798      	blx	r3
    77de:	bd08      	pop	{r3, pc}
    77e0:	20000980 	.word	0x20000980
    77e4:	00006dff 	.word	0x00006dff

000077e8 <SERCOM3_1_Handler>:
{
    77e8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    77ea:	4b02      	ldr	r3, [pc, #8]	; (77f4 <SERCOM3_1_Handler+0xc>)
    77ec:	6898      	ldr	r0, [r3, #8]
    77ee:	4b02      	ldr	r3, [pc, #8]	; (77f8 <SERCOM3_1_Handler+0x10>)
    77f0:	4798      	blx	r3
    77f2:	bd08      	pop	{r3, pc}
    77f4:	20000980 	.word	0x20000980
    77f8:	00006dff 	.word	0x00006dff

000077fc <SERCOM3_2_Handler>:
{
    77fc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    77fe:	4b02      	ldr	r3, [pc, #8]	; (7808 <SERCOM3_2_Handler+0xc>)
    7800:	6898      	ldr	r0, [r3, #8]
    7802:	4b02      	ldr	r3, [pc, #8]	; (780c <SERCOM3_2_Handler+0x10>)
    7804:	4798      	blx	r3
    7806:	bd08      	pop	{r3, pc}
    7808:	20000980 	.word	0x20000980
    780c:	00006dff 	.word	0x00006dff

00007810 <SERCOM3_3_Handler>:
{
    7810:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7812:	4b02      	ldr	r3, [pc, #8]	; (781c <SERCOM3_3_Handler+0xc>)
    7814:	6898      	ldr	r0, [r3, #8]
    7816:	4b02      	ldr	r3, [pc, #8]	; (7820 <SERCOM3_3_Handler+0x10>)
    7818:	4798      	blx	r3
    781a:	bd08      	pop	{r3, pc}
    781c:	20000980 	.word	0x20000980
    7820:	00006dff 	.word	0x00006dff

00007824 <SERCOM4_0_Handler>:
{
    7824:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7826:	4b02      	ldr	r3, [pc, #8]	; (7830 <SERCOM4_0_Handler+0xc>)
    7828:	68d8      	ldr	r0, [r3, #12]
    782a:	4b02      	ldr	r3, [pc, #8]	; (7834 <SERCOM4_0_Handler+0x10>)
    782c:	4798      	blx	r3
    782e:	bd08      	pop	{r3, pc}
    7830:	20000980 	.word	0x20000980
    7834:	00006c85 	.word	0x00006c85

00007838 <SERCOM4_1_Handler>:
{
    7838:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    783a:	4b02      	ldr	r3, [pc, #8]	; (7844 <SERCOM4_1_Handler+0xc>)
    783c:	68d8      	ldr	r0, [r3, #12]
    783e:	4b02      	ldr	r3, [pc, #8]	; (7848 <SERCOM4_1_Handler+0x10>)
    7840:	4798      	blx	r3
    7842:	bd08      	pop	{r3, pc}
    7844:	20000980 	.word	0x20000980
    7848:	00006c85 	.word	0x00006c85

0000784c <SERCOM4_2_Handler>:
{
    784c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    784e:	4b02      	ldr	r3, [pc, #8]	; (7858 <SERCOM4_2_Handler+0xc>)
    7850:	68d8      	ldr	r0, [r3, #12]
    7852:	4b02      	ldr	r3, [pc, #8]	; (785c <SERCOM4_2_Handler+0x10>)
    7854:	4798      	blx	r3
    7856:	bd08      	pop	{r3, pc}
    7858:	20000980 	.word	0x20000980
    785c:	00006c85 	.word	0x00006c85

00007860 <SERCOM4_3_Handler>:
{
    7860:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7862:	4b02      	ldr	r3, [pc, #8]	; (786c <SERCOM4_3_Handler+0xc>)
    7864:	68d8      	ldr	r0, [r3, #12]
    7866:	4b02      	ldr	r3, [pc, #8]	; (7870 <SERCOM4_3_Handler+0x10>)
    7868:	4798      	blx	r3
    786a:	bd08      	pop	{r3, pc}
    786c:	20000980 	.word	0x20000980
    7870:	00006c85 	.word	0x00006c85

00007874 <SERCOM5_0_Handler>:
{
    7874:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7876:	4b02      	ldr	r3, [pc, #8]	; (7880 <SERCOM5_0_Handler+0xc>)
    7878:	6918      	ldr	r0, [r3, #16]
    787a:	4b02      	ldr	r3, [pc, #8]	; (7884 <SERCOM5_0_Handler+0x10>)
    787c:	4798      	blx	r3
    787e:	bd08      	pop	{r3, pc}
    7880:	20000980 	.word	0x20000980
    7884:	000070e1 	.word	0x000070e1

00007888 <SERCOM5_1_Handler>:
{
    7888:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    788a:	4b02      	ldr	r3, [pc, #8]	; (7894 <SERCOM5_1_Handler+0xc>)
    788c:	6918      	ldr	r0, [r3, #16]
    788e:	4b02      	ldr	r3, [pc, #8]	; (7898 <SERCOM5_1_Handler+0x10>)
    7890:	4798      	blx	r3
    7892:	bd08      	pop	{r3, pc}
    7894:	20000980 	.word	0x20000980
    7898:	000070e1 	.word	0x000070e1

0000789c <SERCOM5_2_Handler>:
{
    789c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    789e:	4b02      	ldr	r3, [pc, #8]	; (78a8 <SERCOM5_2_Handler+0xc>)
    78a0:	6918      	ldr	r0, [r3, #16]
    78a2:	4b02      	ldr	r3, [pc, #8]	; (78ac <SERCOM5_2_Handler+0x10>)
    78a4:	4798      	blx	r3
    78a6:	bd08      	pop	{r3, pc}
    78a8:	20000980 	.word	0x20000980
    78ac:	000070e1 	.word	0x000070e1

000078b0 <SERCOM5_3_Handler>:
{
    78b0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    78b2:	4b02      	ldr	r3, [pc, #8]	; (78bc <SERCOM5_3_Handler+0xc>)
    78b4:	6918      	ldr	r0, [r3, #16]
    78b6:	4b02      	ldr	r3, [pc, #8]	; (78c0 <SERCOM5_3_Handler+0x10>)
    78b8:	4798      	blx	r3
    78ba:	bd08      	pop	{r3, pc}
    78bc:	20000980 	.word	0x20000980
    78c0:	000070e1 	.word	0x000070e1

000078c4 <SERCOM6_0_Handler>:
{
    78c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    78c6:	4b02      	ldr	r3, [pc, #8]	; (78d0 <SERCOM6_0_Handler+0xc>)
    78c8:	6958      	ldr	r0, [r3, #20]
    78ca:	4b02      	ldr	r3, [pc, #8]	; (78d4 <SERCOM6_0_Handler+0x10>)
    78cc:	4798      	blx	r3
    78ce:	bd08      	pop	{r3, pc}
    78d0:	20000980 	.word	0x20000980
    78d4:	00006c85 	.word	0x00006c85

000078d8 <SERCOM6_1_Handler>:
{
    78d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    78da:	4b02      	ldr	r3, [pc, #8]	; (78e4 <SERCOM6_1_Handler+0xc>)
    78dc:	6958      	ldr	r0, [r3, #20]
    78de:	4b02      	ldr	r3, [pc, #8]	; (78e8 <SERCOM6_1_Handler+0x10>)
    78e0:	4798      	blx	r3
    78e2:	bd08      	pop	{r3, pc}
    78e4:	20000980 	.word	0x20000980
    78e8:	00006c85 	.word	0x00006c85

000078ec <SERCOM6_2_Handler>:
{
    78ec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    78ee:	4b02      	ldr	r3, [pc, #8]	; (78f8 <SERCOM6_2_Handler+0xc>)
    78f0:	6958      	ldr	r0, [r3, #20]
    78f2:	4b02      	ldr	r3, [pc, #8]	; (78fc <SERCOM6_2_Handler+0x10>)
    78f4:	4798      	blx	r3
    78f6:	bd08      	pop	{r3, pc}
    78f8:	20000980 	.word	0x20000980
    78fc:	00006c85 	.word	0x00006c85

00007900 <SERCOM6_3_Handler>:
{
    7900:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7902:	4b02      	ldr	r3, [pc, #8]	; (790c <SERCOM6_3_Handler+0xc>)
    7904:	6958      	ldr	r0, [r3, #20]
    7906:	4b02      	ldr	r3, [pc, #8]	; (7910 <SERCOM6_3_Handler+0x10>)
    7908:	4798      	blx	r3
    790a:	bd08      	pop	{r3, pc}
    790c:	20000980 	.word	0x20000980
    7910:	00006c85 	.word	0x00006c85

00007914 <_spi_m_sync_init>:
{
    7914:	b570      	push	{r4, r5, r6, lr}
    7916:	4606      	mov	r6, r0
    7918:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    791a:	4608      	mov	r0, r1
    791c:	4b5d      	ldr	r3, [pc, #372]	; (7a94 <_spi_m_sync_init+0x180>)
    791e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7920:	2803      	cmp	r0, #3
    7922:	d00c      	beq.n	793e <_spi_m_sync_init+0x2a>
    7924:	2807      	cmp	r0, #7
    7926:	bf08      	it	eq
    7928:	2301      	moveq	r3, #1
    792a:	d009      	beq.n	7940 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    792c:	2e00      	cmp	r6, #0
    792e:	f000 809f 	beq.w	7a70 <_spi_m_sync_init+0x15c>
    7932:	2c00      	cmp	r4, #0
    7934:	f040 80a5 	bne.w	7a82 <_spi_m_sync_init+0x16e>
	return NULL;
    7938:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    793a:	2000      	movs	r0, #0
    793c:	e009      	b.n	7952 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    793e:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7940:	4d55      	ldr	r5, [pc, #340]	; (7a98 <_spi_m_sync_init+0x184>)
    7942:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7946:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7948:	2e00      	cmp	r6, #0
    794a:	d0f6      	beq.n	793a <_spi_m_sync_init+0x26>
    794c:	2001      	movs	r0, #1
    794e:	2c00      	cmp	r4, #0
    7950:	d0f3      	beq.n	793a <_spi_m_sync_init+0x26>
    7952:	f640 226e 	movw	r2, #2670	; 0xa6e
    7956:	4951      	ldr	r1, [pc, #324]	; (7a9c <_spi_m_sync_init+0x188>)
    7958:	4b51      	ldr	r3, [pc, #324]	; (7aa0 <_spi_m_sync_init+0x18c>)
    795a:	4798      	blx	r3
	if (regs == NULL) {
    795c:	2d00      	cmp	r5, #0
    795e:	f000 8084 	beq.w	7a6a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7962:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7964:	f013 0f01 	tst.w	r3, #1
    7968:	d11d      	bne.n	79a6 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    796a:	682b      	ldr	r3, [r5, #0]
    796c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7970:	69e3      	ldr	r3, [r4, #28]
    7972:	f013 0f03 	tst.w	r3, #3
    7976:	d1fb      	bne.n	7970 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7978:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    797a:	f013 0f02 	tst.w	r3, #2
    797e:	d00b      	beq.n	7998 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7980:	6823      	ldr	r3, [r4, #0]
    7982:	f023 0302 	bic.w	r3, r3, #2
    7986:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7988:	69e3      	ldr	r3, [r4, #28]
    798a:	f013 0f03 	tst.w	r3, #3
    798e:	d1fb      	bne.n	7988 <_spi_m_sync_init+0x74>
    7990:	69e3      	ldr	r3, [r4, #28]
    7992:	f013 0f02 	tst.w	r3, #2
    7996:	d1fb      	bne.n	7990 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7998:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    799c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    799e:	69e3      	ldr	r3, [r4, #28]
    79a0:	f013 0f03 	tst.w	r3, #3
    79a4:	d1fb      	bne.n	799e <_spi_m_sync_init+0x8a>
    79a6:	69e3      	ldr	r3, [r4, #28]
    79a8:	f013 0f01 	tst.w	r3, #1
    79ac:	d1fb      	bne.n	79a6 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    79ae:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    79b0:	682b      	ldr	r3, [r5, #0]
    79b2:	f003 031c 	and.w	r3, r3, #28
    79b6:	2b08      	cmp	r3, #8
    79b8:	d02e      	beq.n	7a18 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    79ba:	f44f 6217 	mov.w	r2, #2416	; 0x970
    79be:	4937      	ldr	r1, [pc, #220]	; (7a9c <_spi_m_sync_init+0x188>)
    79c0:	1c20      	adds	r0, r4, #0
    79c2:	bf18      	it	ne
    79c4:	2001      	movne	r0, #1
    79c6:	4b36      	ldr	r3, [pc, #216]	; (7aa0 <_spi_m_sync_init+0x18c>)
    79c8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    79ca:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    79cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    79d0:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    79d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    79d6:	69e3      	ldr	r3, [r4, #28]
    79d8:	f013 0f03 	tst.w	r3, #3
    79dc:	d1fb      	bne.n	79d6 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    79de:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    79e0:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    79e4:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    79e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    79ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    79ee:	69e3      	ldr	r3, [r4, #28]
    79f0:	f013 0f17 	tst.w	r3, #23
    79f4:	d1fb      	bne.n	79ee <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    79f6:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    79f8:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    79fa:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    79fc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7a00:	686b      	ldr	r3, [r5, #4]
    7a02:	f003 0307 	and.w	r3, r3, #7
    7a06:	2b00      	cmp	r3, #0
    7a08:	bf0c      	ite	eq
    7a0a:	2301      	moveq	r3, #1
    7a0c:	2302      	movne	r3, #2
    7a0e:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    7a10:	89eb      	ldrh	r3, [r5, #14]
    7a12:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7a14:	2000      	movs	r0, #0
    7a16:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7a18:	f640 1284 	movw	r2, #2436	; 0x984
    7a1c:	491f      	ldr	r1, [pc, #124]	; (7a9c <_spi_m_sync_init+0x188>)
    7a1e:	1c20      	adds	r0, r4, #0
    7a20:	bf18      	it	ne
    7a22:	2001      	movne	r0, #1
    7a24:	4b1e      	ldr	r3, [pc, #120]	; (7aa0 <_spi_m_sync_init+0x18c>)
    7a26:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7a28:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7a2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7a2e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7a32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a34:	69e3      	ldr	r3, [r4, #28]
    7a36:	f013 0f03 	tst.w	r3, #3
    7a3a:	d1fb      	bne.n	7a34 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7a3c:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7a3e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7a42:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7a4a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7a4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a50:	69e3      	ldr	r3, [r4, #28]
    7a52:	f013 0f17 	tst.w	r3, #23
    7a56:	d1fb      	bne.n	7a50 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7a58:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7a5a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7a5c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7a5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a62:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7a64:	2b00      	cmp	r3, #0
    7a66:	d1fc      	bne.n	7a62 <_spi_m_sync_init+0x14e>
    7a68:	e7ca      	b.n	7a00 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7a6a:	f06f 000c 	mvn.w	r0, #12
    7a6e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7a70:	f640 226e 	movw	r2, #2670	; 0xa6e
    7a74:	4909      	ldr	r1, [pc, #36]	; (7a9c <_spi_m_sync_init+0x188>)
    7a76:	2000      	movs	r0, #0
    7a78:	4b09      	ldr	r3, [pc, #36]	; (7aa0 <_spi_m_sync_init+0x18c>)
    7a7a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7a7c:	f06f 000c 	mvn.w	r0, #12
    7a80:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7a82:	f640 226e 	movw	r2, #2670	; 0xa6e
    7a86:	4905      	ldr	r1, [pc, #20]	; (7a9c <_spi_m_sync_init+0x188>)
    7a88:	2001      	movs	r0, #1
    7a8a:	4b05      	ldr	r3, [pc, #20]	; (7aa0 <_spi_m_sync_init+0x18c>)
    7a8c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7a8e:	f06f 000c 	mvn.w	r0, #12
    7a92:	bd70      	pop	{r4, r5, r6, pc}
    7a94:	00006c41 	.word	0x00006c41
    7a98:	0000dee4 	.word	0x0000dee4
    7a9c:	0000df08 	.word	0x0000df08
    7aa0:	00005dad 	.word	0x00005dad

00007aa4 <_spi_m_async_init>:
{
    7aa4:	b538      	push	{r3, r4, r5, lr}
    7aa6:	4604      	mov	r4, r0
    7aa8:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7aaa:	4b15      	ldr	r3, [pc, #84]	; (7b00 <_spi_m_async_init+0x5c>)
    7aac:	4798      	blx	r3
	if (rc < 0) {
    7aae:	2800      	cmp	r0, #0
    7ab0:	db24      	blt.n	7afc <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7ab2:	4621      	mov	r1, r4
    7ab4:	4628      	mov	r0, r5
    7ab6:	4b13      	ldr	r3, [pc, #76]	; (7b04 <_spi_m_async_init+0x60>)
    7ab8:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7aba:	2300      	movs	r3, #0
    7abc:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7abe:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7ac0:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7ac2:	4628      	mov	r0, r5
    7ac4:	4b10      	ldr	r3, [pc, #64]	; (7b08 <_spi_m_async_init+0x64>)
    7ac6:	4798      	blx	r3
    7ac8:	1d01      	adds	r1, r0, #4
    7aca:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7acc:	2401      	movs	r4, #1
    7ace:	f000 021f 	and.w	r2, r0, #31
    7ad2:	fa04 f202 	lsl.w	r2, r4, r2
    7ad6:	0943      	lsrs	r3, r0, #5
    7ad8:	009b      	lsls	r3, r3, #2
    7ada:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7ade:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7aea:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    7af2:	3001      	adds	r0, #1
    7af4:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7af6:	4281      	cmp	r1, r0
    7af8:	d1e9      	bne.n	7ace <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7afa:	2000      	movs	r0, #0
}
    7afc:	bd38      	pop	{r3, r4, r5, pc}
    7afe:	bf00      	nop
    7b00:	00007915 	.word	0x00007915
    7b04:	00006cf5 	.word	0x00006cf5
    7b08:	00006d55 	.word	0x00006d55

00007b0c <_spi_m_async_enable>:
{
    7b0c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7b0e:	4604      	mov	r4, r0
    7b10:	b160      	cbz	r0, 7b2c <_spi_m_async_enable+0x20>
    7b12:	6800      	ldr	r0, [r0, #0]
    7b14:	3000      	adds	r0, #0
    7b16:	bf18      	it	ne
    7b18:	2001      	movne	r0, #1
    7b1a:	f640 22db 	movw	r2, #2779	; 0xadb
    7b1e:	4904      	ldr	r1, [pc, #16]	; (7b30 <_spi_m_async_enable+0x24>)
    7b20:	4b04      	ldr	r3, [pc, #16]	; (7b34 <_spi_m_async_enable+0x28>)
    7b22:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    7b24:	6820      	ldr	r0, [r4, #0]
    7b26:	4b04      	ldr	r3, [pc, #16]	; (7b38 <_spi_m_async_enable+0x2c>)
    7b28:	4798      	blx	r3
}
    7b2a:	bd10      	pop	{r4, pc}
    7b2c:	2000      	movs	r0, #0
    7b2e:	e7f4      	b.n	7b1a <_spi_m_async_enable+0xe>
    7b30:	0000df08 	.word	0x0000df08
    7b34:	00005dad 	.word	0x00005dad
    7b38:	00006d8d 	.word	0x00006d8d

00007b3c <_spi_m_async_set_mode>:
{
    7b3c:	b538      	push	{r3, r4, r5, lr}
    7b3e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7b40:	4604      	mov	r4, r0
    7b42:	b168      	cbz	r0, 7b60 <_spi_m_async_set_mode+0x24>
    7b44:	6800      	ldr	r0, [r0, #0]
    7b46:	3000      	adds	r0, #0
    7b48:	bf18      	it	ne
    7b4a:	2001      	movne	r0, #1
    7b4c:	f640 320c 	movw	r2, #2828	; 0xb0c
    7b50:	4904      	ldr	r1, [pc, #16]	; (7b64 <_spi_m_async_set_mode+0x28>)
    7b52:	4b05      	ldr	r3, [pc, #20]	; (7b68 <_spi_m_async_set_mode+0x2c>)
    7b54:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7b56:	4629      	mov	r1, r5
    7b58:	6820      	ldr	r0, [r4, #0]
    7b5a:	4b04      	ldr	r3, [pc, #16]	; (7b6c <_spi_m_async_set_mode+0x30>)
    7b5c:	4798      	blx	r3
}
    7b5e:	bd38      	pop	{r3, r4, r5, pc}
    7b60:	2000      	movs	r0, #0
    7b62:	e7f3      	b.n	7b4c <_spi_m_async_set_mode+0x10>
    7b64:	0000df08 	.word	0x0000df08
    7b68:	00005dad 	.word	0x00005dad
    7b6c:	00006dcd 	.word	0x00006dcd

00007b70 <_spi_m_async_set_baudrate>:
{
    7b70:	b538      	push	{r3, r4, r5, lr}
    7b72:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7b74:	4605      	mov	r5, r0
    7b76:	b198      	cbz	r0, 7ba0 <_spi_m_async_set_baudrate+0x30>
    7b78:	6800      	ldr	r0, [r0, #0]
    7b7a:	3000      	adds	r0, #0
    7b7c:	bf18      	it	ne
    7b7e:	2001      	movne	r0, #1
    7b80:	f640 323b 	movw	r2, #2875	; 0xb3b
    7b84:	4907      	ldr	r1, [pc, #28]	; (7ba4 <_spi_m_async_set_baudrate+0x34>)
    7b86:	4b08      	ldr	r3, [pc, #32]	; (7ba8 <_spi_m_async_set_baudrate+0x38>)
    7b88:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7b8a:	682b      	ldr	r3, [r5, #0]
    7b8c:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7b8e:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    7b92:	bf03      	ittte	eq
    7b94:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7b96:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7b98:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7b9a:	f06f 0003 	mvnne.w	r0, #3
}
    7b9e:	bd38      	pop	{r3, r4, r5, pc}
    7ba0:	2000      	movs	r0, #0
    7ba2:	e7ed      	b.n	7b80 <_spi_m_async_set_baudrate+0x10>
    7ba4:	0000df08 	.word	0x0000df08
    7ba8:	00005dad 	.word	0x00005dad

00007bac <_spi_m_async_enable_tx>:
{
    7bac:	b538      	push	{r3, r4, r5, lr}
    7bae:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    7bb0:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    7bb2:	b160      	cbz	r0, 7bce <_spi_m_async_enable_tx+0x22>
    7bb4:	1c20      	adds	r0, r4, #0
    7bb6:	bf18      	it	ne
    7bb8:	2001      	movne	r0, #1
    7bba:	f640 32fe 	movw	r2, #3070	; 0xbfe
    7bbe:	4906      	ldr	r1, [pc, #24]	; (7bd8 <_spi_m_async_enable_tx+0x2c>)
    7bc0:	4b06      	ldr	r3, [pc, #24]	; (7bdc <_spi_m_async_enable_tx+0x30>)
    7bc2:	4798      	blx	r3
	if (state) {
    7bc4:	b92d      	cbnz	r5, 7bd2 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7bc6:	2301      	movs	r3, #1
    7bc8:	7523      	strb	r3, [r4, #20]
}
    7bca:	2000      	movs	r0, #0
    7bcc:	bd38      	pop	{r3, r4, r5, pc}
    7bce:	2000      	movs	r0, #0
    7bd0:	e7f3      	b.n	7bba <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7bd2:	2301      	movs	r3, #1
    7bd4:	75a3      	strb	r3, [r4, #22]
    7bd6:	e7f8      	b.n	7bca <_spi_m_async_enable_tx+0x1e>
    7bd8:	0000df08 	.word	0x0000df08
    7bdc:	00005dad 	.word	0x00005dad

00007be0 <_spi_m_async_enable_rx>:
{
    7be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7be2:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7be4:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    7be6:	4e0c      	ldr	r6, [pc, #48]	; (7c18 <_spi_m_async_enable_rx+0x38>)
    7be8:	f640 4212 	movw	r2, #3090	; 0xc12
    7bec:	4631      	mov	r1, r6
    7bee:	3000      	adds	r0, #0
    7bf0:	bf18      	it	ne
    7bf2:	2001      	movne	r0, #1
    7bf4:	4d09      	ldr	r5, [pc, #36]	; (7c1c <_spi_m_async_enable_rx+0x3c>)
    7bf6:	47a8      	blx	r5
	ASSERT(hw);
    7bf8:	f640 4213 	movw	r2, #3091	; 0xc13
    7bfc:	4631      	mov	r1, r6
    7bfe:	1c20      	adds	r0, r4, #0
    7c00:	bf18      	it	ne
    7c02:	2001      	movne	r0, #1
    7c04:	47a8      	blx	r5
	if (state) {
    7c06:	b91f      	cbnz	r7, 7c10 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7c08:	2304      	movs	r3, #4
    7c0a:	7523      	strb	r3, [r4, #20]
}
    7c0c:	2000      	movs	r0, #0
    7c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7c10:	2304      	movs	r3, #4
    7c12:	75a3      	strb	r3, [r4, #22]
    7c14:	e7fa      	b.n	7c0c <_spi_m_async_enable_rx+0x2c>
    7c16:	bf00      	nop
    7c18:	0000df08 	.word	0x0000df08
    7c1c:	00005dad 	.word	0x00005dad

00007c20 <_spi_m_async_enable_tx_complete>:
{
    7c20:	b538      	push	{r3, r4, r5, lr}
    7c22:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7c24:	4604      	mov	r4, r0
    7c26:	b170      	cbz	r0, 7c46 <_spi_m_async_enable_tx_complete+0x26>
    7c28:	6800      	ldr	r0, [r0, #0]
    7c2a:	3000      	adds	r0, #0
    7c2c:	bf18      	it	ne
    7c2e:	2001      	movne	r0, #1
    7c30:	f640 4225 	movw	r2, #3109	; 0xc25
    7c34:	4907      	ldr	r1, [pc, #28]	; (7c54 <_spi_m_async_enable_tx_complete+0x34>)
    7c36:	4b08      	ldr	r3, [pc, #32]	; (7c58 <_spi_m_async_enable_tx_complete+0x38>)
    7c38:	4798      	blx	r3
	if (state) {
    7c3a:	b935      	cbnz	r5, 7c4a <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7c3c:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7c3e:	2202      	movs	r2, #2
    7c40:	751a      	strb	r2, [r3, #20]
}
    7c42:	2000      	movs	r0, #0
    7c44:	bd38      	pop	{r3, r4, r5, pc}
    7c46:	2000      	movs	r0, #0
    7c48:	e7f2      	b.n	7c30 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7c4a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7c4c:	2202      	movs	r2, #2
    7c4e:	759a      	strb	r2, [r3, #22]
    7c50:	e7f7      	b.n	7c42 <_spi_m_async_enable_tx_complete+0x22>
    7c52:	bf00      	nop
    7c54:	0000df08 	.word	0x0000df08
    7c58:	00005dad 	.word	0x00005dad

00007c5c <_spi_m_async_write_one>:
{
    7c5c:	b538      	push	{r3, r4, r5, lr}
    7c5e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7c60:	4604      	mov	r4, r0
    7c62:	b160      	cbz	r0, 7c7e <_spi_m_async_write_one+0x22>
    7c64:	6800      	ldr	r0, [r0, #0]
    7c66:	3000      	adds	r0, #0
    7c68:	bf18      	it	ne
    7c6a:	2001      	movne	r0, #1
    7c6c:	f640 4237 	movw	r2, #3127	; 0xc37
    7c70:	4904      	ldr	r1, [pc, #16]	; (7c84 <_spi_m_async_write_one+0x28>)
    7c72:	4b05      	ldr	r3, [pc, #20]	; (7c88 <_spi_m_async_write_one+0x2c>)
    7c74:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7c76:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7c78:	629d      	str	r5, [r3, #40]	; 0x28
}
    7c7a:	2000      	movs	r0, #0
    7c7c:	bd38      	pop	{r3, r4, r5, pc}
    7c7e:	2000      	movs	r0, #0
    7c80:	e7f4      	b.n	7c6c <_spi_m_async_write_one+0x10>
    7c82:	bf00      	nop
    7c84:	0000df08 	.word	0x0000df08
    7c88:	00005dad 	.word	0x00005dad

00007c8c <_spi_m_async_read_one>:
{
    7c8c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7c8e:	4604      	mov	r4, r0
    7c90:	b160      	cbz	r0, 7cac <_spi_m_async_read_one+0x20>
    7c92:	6800      	ldr	r0, [r0, #0]
    7c94:	3000      	adds	r0, #0
    7c96:	bf18      	it	ne
    7c98:	2001      	movne	r0, #1
    7c9a:	f640 4252 	movw	r2, #3154	; 0xc52
    7c9e:	4904      	ldr	r1, [pc, #16]	; (7cb0 <_spi_m_async_read_one+0x24>)
    7ca0:	4b04      	ldr	r3, [pc, #16]	; (7cb4 <_spi_m_async_read_one+0x28>)
    7ca2:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7ca4:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7ca6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7ca8:	b280      	uxth	r0, r0
    7caa:	bd10      	pop	{r4, pc}
    7cac:	2000      	movs	r0, #0
    7cae:	e7f4      	b.n	7c9a <_spi_m_async_read_one+0xe>
    7cb0:	0000df08 	.word	0x0000df08
    7cb4:	00005dad 	.word	0x00005dad

00007cb8 <_spi_m_async_register_callback>:
{
    7cb8:	b570      	push	{r4, r5, r6, lr}
    7cba:	460d      	mov	r5, r1
    7cbc:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7cbe:	4604      	mov	r4, r0
    7cc0:	b168      	cbz	r0, 7cde <_spi_m_async_register_callback+0x26>
    7cc2:	2903      	cmp	r1, #3
    7cc4:	bf8c      	ite	hi
    7cc6:	2000      	movhi	r0, #0
    7cc8:	2001      	movls	r0, #1
    7cca:	f640 426b 	movw	r2, #3179	; 0xc6b
    7cce:	4905      	ldr	r1, [pc, #20]	; (7ce4 <_spi_m_async_register_callback+0x2c>)
    7cd0:	4b05      	ldr	r3, [pc, #20]	; (7ce8 <_spi_m_async_register_callback+0x30>)
    7cd2:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7cd4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7cd8:	60a6      	str	r6, [r4, #8]
}
    7cda:	2000      	movs	r0, #0
    7cdc:	bd70      	pop	{r4, r5, r6, pc}
    7cde:	2000      	movs	r0, #0
    7ce0:	e7f3      	b.n	7cca <_spi_m_async_register_callback+0x12>
    7ce2:	bf00      	nop
    7ce4:	0000df08 	.word	0x0000df08
    7ce8:	00005dad 	.word	0x00005dad

00007cec <_spi_m_async_set_irq_state>:
{
    7cec:	b570      	push	{r4, r5, r6, lr}
    7cee:	460c      	mov	r4, r1
    7cf0:	4615      	mov	r5, r2
	ASSERT(device);
    7cf2:	4606      	mov	r6, r0
    7cf4:	f640 42ac 	movw	r2, #3244	; 0xcac
    7cf8:	4908      	ldr	r1, [pc, #32]	; (7d1c <_spi_m_async_set_irq_state+0x30>)
    7cfa:	3000      	adds	r0, #0
    7cfc:	bf18      	it	ne
    7cfe:	2001      	movne	r0, #1
    7d00:	4b07      	ldr	r3, [pc, #28]	; (7d20 <_spi_m_async_set_irq_state+0x34>)
    7d02:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7d04:	2c03      	cmp	r4, #3
    7d06:	d000      	beq.n	7d0a <_spi_m_async_set_irq_state+0x1e>
    7d08:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7d0a:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7d0c:	b115      	cbz	r5, 7d14 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    7d0e:	2280      	movs	r2, #128	; 0x80
    7d10:	759a      	strb	r2, [r3, #22]
}
    7d12:	e7f9      	b.n	7d08 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7d14:	2280      	movs	r2, #128	; 0x80
    7d16:	751a      	strb	r2, [r3, #20]
    7d18:	bd70      	pop	{r4, r5, r6, pc}
    7d1a:	bf00      	nop
    7d1c:	0000df08 	.word	0x0000df08
    7d20:	00005dad 	.word	0x00005dad

00007d24 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d28:	4605      	mov	r5, r0
    7d2a:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7d2c:	4608      	mov	r0, r1
    7d2e:	4b52      	ldr	r3, [pc, #328]	; (7e78 <_spi_m_dma_init+0x154>)
    7d30:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7d32:	2803      	cmp	r0, #3
    7d34:	d00c      	beq.n	7d50 <_spi_m_dma_init+0x2c>
    7d36:	2807      	cmp	r0, #7
    7d38:	bf08      	it	eq
    7d3a:	2301      	moveq	r3, #1
    7d3c:	d009      	beq.n	7d52 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7d3e:	2d00      	cmp	r5, #0
    7d40:	f000 8086 	beq.w	7e50 <_spi_m_dma_init+0x12c>
    7d44:	2c00      	cmp	r4, #0
    7d46:	f040 808d 	bne.w	7e64 <_spi_m_dma_init+0x140>
	return NULL;
    7d4a:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7d4c:	2000      	movs	r0, #0
    7d4e:	e009      	b.n	7d64 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7d50:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7d52:	4e4a      	ldr	r6, [pc, #296]	; (7e7c <_spi_m_dma_init+0x158>)
    7d54:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7d58:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7d5a:	2d00      	cmp	r5, #0
    7d5c:	d0f6      	beq.n	7d4c <_spi_m_dma_init+0x28>
    7d5e:	2001      	movs	r0, #1
    7d60:	2c00      	cmp	r4, #0
    7d62:	d0f3      	beq.n	7d4c <_spi_m_dma_init+0x28>
    7d64:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7d68:	4945      	ldr	r1, [pc, #276]	; (7e80 <_spi_m_dma_init+0x15c>)
    7d6a:	4b46      	ldr	r3, [pc, #280]	; (7e84 <_spi_m_dma_init+0x160>)
    7d6c:	4798      	blx	r3

	if (regs == NULL) {
    7d6e:	2e00      	cmp	r6, #0
    7d70:	d06a      	beq.n	7e48 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7d72:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7d74:	f013 0f01 	tst.w	r3, #1
    7d78:	d11d      	bne.n	7db6 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7d7a:	6833      	ldr	r3, [r6, #0]
    7d7c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7d80:	69e3      	ldr	r3, [r4, #28]
    7d82:	f013 0f03 	tst.w	r3, #3
    7d86:	d1fb      	bne.n	7d80 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7d88:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7d8a:	f013 0f02 	tst.w	r3, #2
    7d8e:	d00b      	beq.n	7da8 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7d90:	6823      	ldr	r3, [r4, #0]
    7d92:	f023 0302 	bic.w	r3, r3, #2
    7d96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7d98:	69e3      	ldr	r3, [r4, #28]
    7d9a:	f013 0f03 	tst.w	r3, #3
    7d9e:	d1fb      	bne.n	7d98 <_spi_m_dma_init+0x74>
    7da0:	69e3      	ldr	r3, [r4, #28]
    7da2:	f013 0f02 	tst.w	r3, #2
    7da6:	d1fb      	bne.n	7da0 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7da8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7dac:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7dae:	69e3      	ldr	r3, [r4, #28]
    7db0:	f013 0f03 	tst.w	r3, #3
    7db4:	d1fb      	bne.n	7dae <_spi_m_dma_init+0x8a>
    7db6:	69e3      	ldr	r3, [r4, #28]
    7db8:	f013 0f01 	tst.w	r3, #1
    7dbc:	d1fb      	bne.n	7db6 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7dbe:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7dc0:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7dc4:	492e      	ldr	r1, [pc, #184]	; (7e80 <_spi_m_dma_init+0x15c>)
    7dc6:	1c20      	adds	r0, r4, #0
    7dc8:	bf18      	it	ne
    7dca:	2001      	movne	r0, #1
    7dcc:	4b2d      	ldr	r3, [pc, #180]	; (7e84 <_spi_m_dma_init+0x160>)
    7dce:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7dd0:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    7dd2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7dd6:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7dda:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7ddc:	69e3      	ldr	r3, [r4, #28]
    7dde:	f013 0f03 	tst.w	r3, #3
    7de2:	d1fb      	bne.n	7ddc <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7de4:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7de6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7dea:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7df2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7df4:	69e3      	ldr	r3, [r4, #28]
    7df6:	f013 0f17 	tst.w	r3, #23
    7dfa:	d1fb      	bne.n	7df4 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7dfc:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7dfe:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7e00:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7e02:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7e06:	f105 0818 	add.w	r8, r5, #24
    7e0a:	4620      	mov	r0, r4
    7e0c:	4b1e      	ldr	r3, [pc, #120]	; (7e88 <_spi_m_dma_init+0x164>)
    7e0e:	4798      	blx	r3
    7e10:	4601      	mov	r1, r0
    7e12:	4640      	mov	r0, r8
    7e14:	4f1d      	ldr	r7, [pc, #116]	; (7e8c <_spi_m_dma_init+0x168>)
    7e16:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7e18:	69ab      	ldr	r3, [r5, #24]
    7e1a:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7e1c:	69ab      	ldr	r3, [r5, #24]
    7e1e:	4a1c      	ldr	r2, [pc, #112]	; (7e90 <_spi_m_dma_init+0x16c>)
    7e20:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7e22:	69ab      	ldr	r3, [r5, #24]
    7e24:	4e1b      	ldr	r6, [pc, #108]	; (7e94 <_spi_m_dma_init+0x170>)
    7e26:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7e28:	4620      	mov	r0, r4
    7e2a:	4b1b      	ldr	r3, [pc, #108]	; (7e98 <_spi_m_dma_init+0x174>)
    7e2c:	4798      	blx	r3
    7e2e:	4601      	mov	r1, r0
    7e30:	4640      	mov	r0, r8
    7e32:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7e34:	69ab      	ldr	r3, [r5, #24]
    7e36:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7e38:	69ab      	ldr	r3, [r5, #24]
    7e3a:	4a18      	ldr	r2, [pc, #96]	; (7e9c <_spi_m_dma_init+0x178>)
    7e3c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7e3e:	69ab      	ldr	r3, [r5, #24]
    7e40:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    7e42:	2000      	movs	r0, #0
    7e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7e48:	f06f 000c 	mvn.w	r0, #12
    7e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7e50:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7e54:	490a      	ldr	r1, [pc, #40]	; (7e80 <_spi_m_dma_init+0x15c>)
    7e56:	2000      	movs	r0, #0
    7e58:	4b0a      	ldr	r3, [pc, #40]	; (7e84 <_spi_m_dma_init+0x160>)
    7e5a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7e5c:	f06f 000c 	mvn.w	r0, #12
    7e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7e64:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7e68:	4905      	ldr	r1, [pc, #20]	; (7e80 <_spi_m_dma_init+0x15c>)
    7e6a:	2001      	movs	r0, #1
    7e6c:	4b05      	ldr	r3, [pc, #20]	; (7e84 <_spi_m_dma_init+0x160>)
    7e6e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7e70:	f06f 000c 	mvn.w	r0, #12
    7e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e78:	00006c41 	.word	0x00006c41
    7e7c:	0000dee4 	.word	0x0000dee4
    7e80:	0000df08 	.word	0x0000df08
    7e84:	00005dad 	.word	0x00005dad
    7e88:	00006e61 	.word	0x00006e61
    7e8c:	00006649 	.word	0x00006649
    7e90:	00006e75 	.word	0x00006e75
    7e94:	00006e8d 	.word	0x00006e8d
    7e98:	00006e4d 	.word	0x00006e4d
    7e9c:	00006e81 	.word	0x00006e81

00007ea0 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7ea0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7ea2:	4604      	mov	r4, r0
    7ea4:	b160      	cbz	r0, 7ec0 <_spi_m_dma_enable+0x20>
    7ea6:	6800      	ldr	r0, [r0, #0]
    7ea8:	3000      	adds	r0, #0
    7eaa:	bf18      	it	ne
    7eac:	2001      	movne	r0, #1
    7eae:	f640 52c9 	movw	r2, #3529	; 0xdc9
    7eb2:	4904      	ldr	r1, [pc, #16]	; (7ec4 <_spi_m_dma_enable+0x24>)
    7eb4:	4b04      	ldr	r3, [pc, #16]	; (7ec8 <_spi_m_dma_enable+0x28>)
    7eb6:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7eb8:	6820      	ldr	r0, [r4, #0]
    7eba:	4b04      	ldr	r3, [pc, #16]	; (7ecc <_spi_m_dma_enable+0x2c>)
    7ebc:	4798      	blx	r3
}
    7ebe:	bd10      	pop	{r4, pc}
    7ec0:	2000      	movs	r0, #0
    7ec2:	e7f4      	b.n	7eae <_spi_m_dma_enable+0xe>
    7ec4:	0000df08 	.word	0x0000df08
    7ec8:	00005dad 	.word	0x00005dad
    7ecc:	00006d69 	.word	0x00006d69

00007ed0 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7ed0:	b570      	push	{r4, r5, r6, lr}
    7ed2:	4605      	mov	r5, r0
    7ed4:	4614      	mov	r4, r2
	switch (type) {
    7ed6:	2901      	cmp	r1, #1
    7ed8:	d00e      	beq.n	7ef8 <_spi_m_dma_register_callback+0x28>
    7eda:	b111      	cbz	r1, 7ee2 <_spi_m_dma_register_callback+0x12>
    7edc:	2902      	cmp	r1, #2
    7ede:	d016      	beq.n	7f0e <_spi_m_dma_register_callback+0x3e>
    7ee0:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    7ee2:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7ee4:	6800      	ldr	r0, [r0, #0]
    7ee6:	4b13      	ldr	r3, [pc, #76]	; (7f34 <_spi_m_dma_register_callback+0x64>)
    7ee8:	4798      	blx	r3
    7eea:	1c22      	adds	r2, r4, #0
    7eec:	bf18      	it	ne
    7eee:	2201      	movne	r2, #1
    7ef0:	2100      	movs	r1, #0
    7ef2:	4b11      	ldr	r3, [pc, #68]	; (7f38 <_spi_m_dma_register_callback+0x68>)
    7ef4:	4798      	blx	r3
		break;
    7ef6:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7ef8:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7efa:	6800      	ldr	r0, [r0, #0]
    7efc:	4b0f      	ldr	r3, [pc, #60]	; (7f3c <_spi_m_dma_register_callback+0x6c>)
    7efe:	4798      	blx	r3
    7f00:	1c22      	adds	r2, r4, #0
    7f02:	bf18      	it	ne
    7f04:	2201      	movne	r2, #1
    7f06:	2100      	movs	r1, #0
    7f08:	4b0b      	ldr	r3, [pc, #44]	; (7f38 <_spi_m_dma_register_callback+0x68>)
    7f0a:	4798      	blx	r3
		break;
    7f0c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    7f0e:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7f10:	6800      	ldr	r0, [r0, #0]
    7f12:	4b0a      	ldr	r3, [pc, #40]	; (7f3c <_spi_m_dma_register_callback+0x6c>)
    7f14:	4798      	blx	r3
    7f16:	3400      	adds	r4, #0
    7f18:	bf18      	it	ne
    7f1a:	2401      	movne	r4, #1
    7f1c:	4622      	mov	r2, r4
    7f1e:	2101      	movs	r1, #1
    7f20:	4e05      	ldr	r6, [pc, #20]	; (7f38 <_spi_m_dma_register_callback+0x68>)
    7f22:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7f24:	6828      	ldr	r0, [r5, #0]
    7f26:	4b03      	ldr	r3, [pc, #12]	; (7f34 <_spi_m_dma_register_callback+0x64>)
    7f28:	4798      	blx	r3
    7f2a:	4622      	mov	r2, r4
    7f2c:	2101      	movs	r1, #1
    7f2e:	47b0      	blx	r6
    7f30:	bd70      	pop	{r4, r5, r6, pc}
    7f32:	bf00      	nop
    7f34:	00006e4d 	.word	0x00006e4d
    7f38:	00006521 	.word	0x00006521
    7f3c:	00006e61 	.word	0x00006e61

00007f40 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f44:	4605      	mov	r5, r0
    7f46:	4689      	mov	r9, r1
    7f48:	4617      	mov	r7, r2
    7f4a:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7f4c:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7f50:	4658      	mov	r0, fp
    7f52:	4b46      	ldr	r3, [pc, #280]	; (806c <_spi_m_dma_transfer+0x12c>)
    7f54:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7f56:	2803      	cmp	r0, #3
    7f58:	d053      	beq.n	8002 <_spi_m_dma_transfer+0xc2>
    7f5a:	2807      	cmp	r0, #7
    7f5c:	bf08      	it	eq
    7f5e:	2201      	moveq	r2, #1
    7f60:	d050      	beq.n	8004 <_spi_m_dma_transfer+0xc4>
	return NULL;
    7f62:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7f66:	4658      	mov	r0, fp
    7f68:	4b41      	ldr	r3, [pc, #260]	; (8070 <_spi_m_dma_transfer+0x130>)
    7f6a:	4798      	blx	r3
    7f6c:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7f6e:	4658      	mov	r0, fp
    7f70:	4b40      	ldr	r3, [pc, #256]	; (8074 <_spi_m_dma_transfer+0x134>)
    7f72:	4798      	blx	r3
    7f74:	4604      	mov	r4, r0

	if (rxbuf) {
    7f76:	2f00      	cmp	r7, #0
    7f78:	d04b      	beq.n	8012 <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7f7a:	2d00      	cmp	r5, #0
    7f7c:	d047      	beq.n	800e <_spi_m_dma_transfer+0xce>
    7f7e:	f11b 0000 	adds.w	r0, fp, #0
    7f82:	bf18      	it	ne
    7f84:	2001      	movne	r0, #1
    7f86:	f640 5213 	movw	r2, #3347	; 0xd13
    7f8a:	493b      	ldr	r1, [pc, #236]	; (8078 <_spi_m_dma_transfer+0x138>)
    7f8c:	4b3b      	ldr	r3, [pc, #236]	; (807c <_spi_m_dma_transfer+0x13c>)
    7f8e:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7f90:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7f92:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7f94:	f013 0f04 	tst.w	r3, #4
    7f98:	d107      	bne.n	7faa <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7f9a:	6853      	ldr	r3, [r2, #4]
    7f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7fa0:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7fa2:	69d3      	ldr	r3, [r2, #28]
    7fa4:	f013 0f17 	tst.w	r3, #23
    7fa8:	d1fb      	bne.n	7fa2 <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7faa:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7fac:	3128      	adds	r1, #40	; 0x28
    7fae:	4630      	mov	r0, r6
    7fb0:	4b33      	ldr	r3, [pc, #204]	; (8080 <_spi_m_dma_transfer+0x140>)
    7fb2:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    7fb4:	4639      	mov	r1, r7
    7fb6:	4630      	mov	r0, r6
    7fb8:	4b32      	ldr	r3, [pc, #200]	; (8084 <_spi_m_dma_transfer+0x144>)
    7fba:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7fbc:	4641      	mov	r1, r8
    7fbe:	4630      	mov	r0, r6
    7fc0:	4b31      	ldr	r3, [pc, #196]	; (8088 <_spi_m_dma_transfer+0x148>)
    7fc2:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7fc4:	2100      	movs	r1, #0
    7fc6:	4630      	mov	r0, r6
    7fc8:	4b30      	ldr	r3, [pc, #192]	; (808c <_spi_m_dma_transfer+0x14c>)
    7fca:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7fcc:	f1b9 0f00 	cmp.w	r9, #0
    7fd0:	d039      	beq.n	8046 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    7fd2:	4649      	mov	r1, r9
    7fd4:	4620      	mov	r0, r4
    7fd6:	4b2a      	ldr	r3, [pc, #168]	; (8080 <_spi_m_dma_transfer+0x140>)
    7fd8:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7fda:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7fdc:	3128      	adds	r1, #40	; 0x28
    7fde:	4620      	mov	r0, r4
    7fe0:	4b28      	ldr	r3, [pc, #160]	; (8084 <_spi_m_dma_transfer+0x144>)
    7fe2:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7fe4:	2101      	movs	r1, #1
    7fe6:	4620      	mov	r0, r4
    7fe8:	4b29      	ldr	r3, [pc, #164]	; (8090 <_spi_m_dma_transfer+0x150>)
    7fea:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7fec:	4641      	mov	r1, r8
    7fee:	4620      	mov	r0, r4
    7ff0:	4b25      	ldr	r3, [pc, #148]	; (8088 <_spi_m_dma_transfer+0x148>)
    7ff2:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7ff4:	2100      	movs	r1, #0
    7ff6:	4620      	mov	r0, r4
    7ff8:	4b24      	ldr	r3, [pc, #144]	; (808c <_spi_m_dma_transfer+0x14c>)
    7ffa:	4798      	blx	r3

	return ERR_NONE;
}
    7ffc:	2000      	movs	r0, #0
    7ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    8002:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    8004:	4b23      	ldr	r3, [pc, #140]	; (8094 <_spi_m_dma_transfer+0x154>)
    8006:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    800a:	4492      	add	sl, r2
    800c:	e7ab      	b.n	7f66 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    800e:	2000      	movs	r0, #0
    8010:	e7b9      	b.n	7f86 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    8012:	b1b5      	cbz	r5, 8042 <_spi_m_dma_transfer+0x102>
    8014:	f11b 0000 	adds.w	r0, fp, #0
    8018:	bf18      	it	ne
    801a:	2001      	movne	r0, #1
    801c:	f640 521a 	movw	r2, #3354	; 0xd1a
    8020:	4915      	ldr	r1, [pc, #84]	; (8078 <_spi_m_dma_transfer+0x138>)
    8022:	4b16      	ldr	r3, [pc, #88]	; (807c <_spi_m_dma_transfer+0x13c>)
    8024:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    8026:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8028:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    802a:	f013 0f04 	tst.w	r3, #4
    802e:	d1cd      	bne.n	7fcc <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    8030:	6853      	ldr	r3, [r2, #4]
    8032:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8036:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8038:	69d3      	ldr	r3, [r2, #28]
    803a:	f013 0f17 	tst.w	r3, #23
    803e:	d1fb      	bne.n	8038 <_spi_m_dma_transfer+0xf8>
    8040:	e7c4      	b.n	7fcc <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    8042:	2000      	movs	r0, #0
    8044:	e7ea      	b.n	801c <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    8046:	f10a 010e 	add.w	r1, sl, #14
    804a:	4620      	mov	r0, r4
    804c:	4b0c      	ldr	r3, [pc, #48]	; (8080 <_spi_m_dma_transfer+0x140>)
    804e:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8050:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8052:	3128      	adds	r1, #40	; 0x28
    8054:	4620      	mov	r0, r4
    8056:	4b0b      	ldr	r3, [pc, #44]	; (8084 <_spi_m_dma_transfer+0x144>)
    8058:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    805a:	2100      	movs	r1, #0
    805c:	4620      	mov	r0, r4
    805e:	4b0c      	ldr	r3, [pc, #48]	; (8090 <_spi_m_dma_transfer+0x150>)
    8060:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8062:	4641      	mov	r1, r8
    8064:	4620      	mov	r0, r4
    8066:	4b08      	ldr	r3, [pc, #32]	; (8088 <_spi_m_dma_transfer+0x148>)
    8068:	4798      	blx	r3
    806a:	e7c3      	b.n	7ff4 <_spi_m_dma_transfer+0xb4>
    806c:	00006c41 	.word	0x00006c41
    8070:	00006e61 	.word	0x00006e61
    8074:	00006e4d 	.word	0x00006e4d
    8078:	0000df08 	.word	0x0000df08
    807c:	00005dad 	.word	0x00005dad
    8080:	00006585 	.word	0x00006585
    8084:	00006575 	.word	0x00006575
    8088:	000065b1 	.word	0x000065b1
    808c:	00006609 	.word	0x00006609
    8090:	00006595 	.word	0x00006595
    8094:	0000dee4 	.word	0x0000dee4

00008098 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8098:	4b03      	ldr	r3, [pc, #12]	; (80a8 <_delay_init+0x10>)
    809a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    809e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    80a0:	2205      	movs	r2, #5
    80a2:	601a      	str	r2, [r3, #0]
    80a4:	4770      	bx	lr
    80a6:	bf00      	nop
    80a8:	e000e010 	.word	0xe000e010

000080ac <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    80ac:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    80ae:	b303      	cbz	r3, 80f2 <_delay_cycles+0x46>
{
    80b0:	b430      	push	{r4, r5}
    80b2:	1e5d      	subs	r5, r3, #1
    80b4:	b2ed      	uxtb	r5, r5
	while (n--) {
    80b6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    80b8:	4a12      	ldr	r2, [pc, #72]	; (8104 <_delay_cycles+0x58>)
    80ba:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    80be:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    80c0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    80c2:	6813      	ldr	r3, [r2, #0]
    80c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    80c8:	d0fb      	beq.n	80c2 <_delay_cycles+0x16>
	while (n--) {
    80ca:	3801      	subs	r0, #1
    80cc:	b2c0      	uxtb	r0, r0
    80ce:	28ff      	cmp	r0, #255	; 0xff
    80d0:	d1f5      	bne.n	80be <_delay_cycles+0x12>
    80d2:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    80d6:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    80da:	3101      	adds	r1, #1
    80dc:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    80de:	4b09      	ldr	r3, [pc, #36]	; (8104 <_delay_cycles+0x58>)
    80e0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    80e2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    80e4:	461a      	mov	r2, r3
    80e6:	6813      	ldr	r3, [r2, #0]
    80e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    80ec:	d0fb      	beq.n	80e6 <_delay_cycles+0x3a>
		;
}
    80ee:	bc30      	pop	{r4, r5}
    80f0:	4770      	bx	lr
	SysTick->LOAD = buf;
    80f2:	4b04      	ldr	r3, [pc, #16]	; (8104 <_delay_cycles+0x58>)
    80f4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    80f6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    80f8:	461a      	mov	r2, r3
    80fa:	6813      	ldr	r3, [r2, #0]
    80fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8100:	d0fb      	beq.n	80fa <_delay_cycles+0x4e>
    8102:	4770      	bx	lr
    8104:	e000e010 	.word	0xe000e010

00008108 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8108:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    810a:	6813      	ldr	r3, [r2, #0]
    810c:	f043 0302 	orr.w	r3, r3, #2
    8110:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8112:	6913      	ldr	r3, [r2, #16]
    8114:	f013 0f03 	tst.w	r3, #3
    8118:	d1fb      	bne.n	8112 <_tc_timer_start+0xa>
}
    811a:	4770      	bx	lr

0000811c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    811c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    811e:	6813      	ldr	r3, [r2, #0]
    8120:	f023 0302 	bic.w	r3, r3, #2
    8124:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8126:	6913      	ldr	r3, [r2, #16]
    8128:	f013 0f03 	tst.w	r3, #3
    812c:	d1fb      	bne.n	8126 <_tc_timer_stop+0xa>
}
    812e:	4770      	bx	lr

00008130 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    8130:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8132:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8134:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8138:	2a02      	cmp	r2, #2
    813a:	d00a      	beq.n	8152 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    813c:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    813e:	f012 0f0c 	tst.w	r2, #12
    8142:	d10c      	bne.n	815e <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8144:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8146:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8148:	691a      	ldr	r2, [r3, #16]
    814a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    814e:	d1fb      	bne.n	8148 <_tc_timer_set_period+0x18>
    8150:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8152:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8154:	691a      	ldr	r2, [r3, #16]
    8156:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    815a:	d1fb      	bne.n	8154 <_tc_timer_set_period+0x24>
    815c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    815e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8160:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8164:	2a01      	cmp	r2, #1
    8166:	d000      	beq.n	816a <_tc_timer_set_period+0x3a>
    8168:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    816a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    816c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    816e:	691a      	ldr	r2, [r3, #16]
    8170:	f012 0f20 	tst.w	r2, #32
    8174:	d1fb      	bne.n	816e <_tc_timer_set_period+0x3e>
    8176:	e7f7      	b.n	8168 <_tc_timer_set_period+0x38>

00008178 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    8178:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    817a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    817c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8180:	2a02      	cmp	r2, #2
    8182:	d00a      	beq.n	819a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8184:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8186:	f012 0f0c 	tst.w	r2, #12
    818a:	d10c      	bne.n	81a6 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    818c:	691a      	ldr	r2, [r3, #16]
    818e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8192:	d1fb      	bne.n	818c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8194:	8b98      	ldrh	r0, [r3, #28]
    8196:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8198:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    819a:	691a      	ldr	r2, [r3, #16]
    819c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    81a0:	d1fb      	bne.n	819a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    81a2:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    81a4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    81a6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    81a8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81ac:	2a01      	cmp	r2, #1
    81ae:	d001      	beq.n	81b4 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    81b0:	2000      	movs	r0, #0
}
    81b2:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81b4:	691a      	ldr	r2, [r3, #16]
    81b6:	f012 0f20 	tst.w	r2, #32
    81ba:	d1fb      	bne.n	81b4 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    81bc:	7ed8      	ldrb	r0, [r3, #27]
    81be:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    81c0:	4770      	bx	lr

000081c2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    81c2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81c4:	6913      	ldr	r3, [r2, #16]
    81c6:	f013 0f03 	tst.w	r3, #3
    81ca:	d1fb      	bne.n	81c4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    81cc:	6810      	ldr	r0, [r2, #0]
}
    81ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
    81d2:	4770      	bx	lr

000081d4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    81d4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    81d6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    81d8:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    81da:	f012 0f01 	tst.w	r2, #1
    81de:	d100      	bne.n	81e2 <tc_interrupt_handler+0xe>
    81e0:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    81e2:	2201      	movs	r2, #1
    81e4:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    81e6:	6803      	ldr	r3, [r0, #0]
    81e8:	4798      	blx	r3
	}
}
    81ea:	e7f9      	b.n	81e0 <tc_interrupt_handler+0xc>

000081ec <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    81ec:	b570      	push	{r4, r5, r6, lr}
    81ee:	b088      	sub	sp, #32
    81f0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    81f2:	466c      	mov	r4, sp
    81f4:	4d19      	ldr	r5, [pc, #100]	; (825c <get_tc_index+0x70>)
    81f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    81fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8202:	9b00      	ldr	r3, [sp, #0]
    8204:	42b3      	cmp	r3, r6
    8206:	d00c      	beq.n	8222 <get_tc_index+0x36>
    8208:	4630      	mov	r0, r6
    820a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    820c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    820e:	f852 1b04 	ldr.w	r1, [r2], #4
    8212:	4281      	cmp	r1, r0
    8214:	d006      	beq.n	8224 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8216:	3301      	adds	r3, #1
    8218:	2b08      	cmp	r3, #8
    821a:	d1f8      	bne.n	820e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    821c:	2000      	movs	r0, #0
			return i;
    821e:	b240      	sxtb	r0, r0
    8220:	e013      	b.n	824a <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8222:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    8224:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8228:	d015      	beq.n	8256 <get_tc_index+0x6a>
    822a:	2b01      	cmp	r3, #1
    822c:	d00f      	beq.n	824e <get_tc_index+0x62>
    822e:	2b02      	cmp	r3, #2
    8230:	d00f      	beq.n	8252 <get_tc_index+0x66>
    8232:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8234:	bf08      	it	eq
    8236:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    8238:	d0f1      	beq.n	821e <get_tc_index+0x32>
	ASSERT(false);
    823a:	f240 1267 	movw	r2, #359	; 0x167
    823e:	4908      	ldr	r1, [pc, #32]	; (8260 <get_tc_index+0x74>)
    8240:	2000      	movs	r0, #0
    8242:	4b08      	ldr	r3, [pc, #32]	; (8264 <get_tc_index+0x78>)
    8244:	4798      	blx	r3
	return -1;
    8246:	f04f 30ff 	mov.w	r0, #4294967295
}
    824a:	b008      	add	sp, #32
    824c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    824e:	2001      	movs	r0, #1
    8250:	e7e5      	b.n	821e <get_tc_index+0x32>
    8252:	2002      	movs	r0, #2
    8254:	e7e3      	b.n	821e <get_tc_index+0x32>
    8256:	2000      	movs	r0, #0
    8258:	e7e1      	b.n	821e <get_tc_index+0x32>
    825a:	bf00      	nop
    825c:	0000df24 	.word	0x0000df24
    8260:	0000df94 	.word	0x0000df94
    8264:	00005dad 	.word	0x00005dad

00008268 <_tc_timer_init>:
{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	4606      	mov	r6, r0
    826c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    826e:	4608      	mov	r0, r1
    8270:	4b71      	ldr	r3, [pc, #452]	; (8438 <_tc_timer_init+0x1d0>)
    8272:	4798      	blx	r3
    8274:	4605      	mov	r5, r0
	device->hw = hw;
    8276:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8278:	22a0      	movs	r2, #160	; 0xa0
    827a:	4970      	ldr	r1, [pc, #448]	; (843c <_tc_timer_init+0x1d4>)
    827c:	2001      	movs	r0, #1
    827e:	4b70      	ldr	r3, [pc, #448]	; (8440 <_tc_timer_init+0x1d8>)
    8280:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8282:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8284:	f013 0f01 	tst.w	r3, #1
    8288:	d119      	bne.n	82be <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    828a:	6923      	ldr	r3, [r4, #16]
    828c:	f013 0f03 	tst.w	r3, #3
    8290:	d1fb      	bne.n	828a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8292:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8294:	f013 0f02 	tst.w	r3, #2
    8298:	d00b      	beq.n	82b2 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    829a:	6823      	ldr	r3, [r4, #0]
    829c:	f023 0302 	bic.w	r3, r3, #2
    82a0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    82a2:	6923      	ldr	r3, [r4, #16]
    82a4:	f013 0f03 	tst.w	r3, #3
    82a8:	d1fb      	bne.n	82a2 <_tc_timer_init+0x3a>
    82aa:	6923      	ldr	r3, [r4, #16]
    82ac:	f013 0f02 	tst.w	r3, #2
    82b0:	d1fb      	bne.n	82aa <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    82b2:	2301      	movs	r3, #1
    82b4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    82b6:	6923      	ldr	r3, [r4, #16]
    82b8:	f013 0f03 	tst.w	r3, #3
    82bc:	d1fb      	bne.n	82b6 <_tc_timer_init+0x4e>
    82be:	6923      	ldr	r3, [r4, #16]
    82c0:	f013 0f01 	tst.w	r3, #1
    82c4:	d1fb      	bne.n	82be <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    82c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    82ca:	4a5e      	ldr	r2, [pc, #376]	; (8444 <_tc_timer_init+0x1dc>)
    82cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    82d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    82d2:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    82d4:	6923      	ldr	r3, [r4, #16]
    82d6:	f013 0f03 	tst.w	r3, #3
    82da:	d1fb      	bne.n	82d4 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    82dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    82e0:	4958      	ldr	r1, [pc, #352]	; (8444 <_tc_timer_init+0x1dc>)
    82e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    82e6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    82ea:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    82ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    82ee:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    82f0:	2301      	movs	r3, #1
    82f2:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    82f4:	f002 020c 	and.w	r2, r2, #12
    82f8:	2a08      	cmp	r2, #8
    82fa:	d056      	beq.n	83aa <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    82fc:	2a00      	cmp	r2, #0
    82fe:	d16b      	bne.n	83d8 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8300:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8304:	4a4f      	ldr	r2, [pc, #316]	; (8444 <_tc_timer_init+0x1dc>)
    8306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    830a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    830c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    830e:	6923      	ldr	r3, [r4, #16]
    8310:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8314:	d1fb      	bne.n	830e <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8316:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    831a:	4a4a      	ldr	r2, [pc, #296]	; (8444 <_tc_timer_init+0x1dc>)
    831c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8320:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8322:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8324:	6923      	ldr	r3, [r4, #16]
    8326:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    832a:	d1fb      	bne.n	8324 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    832c:	2301      	movs	r3, #1
    832e:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    8330:	4b45      	ldr	r3, [pc, #276]	; (8448 <_tc_timer_init+0x1e0>)
    8332:	429c      	cmp	r4, r3
    8334:	d077      	beq.n	8426 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    8336:	4b45      	ldr	r3, [pc, #276]	; (844c <_tc_timer_init+0x1e4>)
    8338:	429c      	cmp	r4, r3
    833a:	d077      	beq.n	842c <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    833c:	4b44      	ldr	r3, [pc, #272]	; (8450 <_tc_timer_init+0x1e8>)
    833e:	429c      	cmp	r4, r3
    8340:	d077      	beq.n	8432 <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    8342:	4b44      	ldr	r3, [pc, #272]	; (8454 <_tc_timer_init+0x1ec>)
    8344:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    8346:	bf04      	itt	eq
    8348:	4b43      	ldreq	r3, [pc, #268]	; (8458 <_tc_timer_init+0x1f0>)
    834a:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    834c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8350:	4a3c      	ldr	r2, [pc, #240]	; (8444 <_tc_timer_init+0x1dc>)
    8352:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8356:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    835a:	2b00      	cmp	r3, #0
    835c:	db23      	blt.n	83a6 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    835e:	095a      	lsrs	r2, r3, #5
    8360:	f003 031f 	and.w	r3, r3, #31
    8364:	2101      	movs	r1, #1
    8366:	fa01 f303 	lsl.w	r3, r1, r3
    836a:	3220      	adds	r2, #32
    836c:	493b      	ldr	r1, [pc, #236]	; (845c <_tc_timer_init+0x1f4>)
    836e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8376:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    837a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    837e:	4b31      	ldr	r3, [pc, #196]	; (8444 <_tc_timer_init+0x1dc>)
    8380:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8384:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8388:	2b00      	cmp	r3, #0
    838a:	db0c      	blt.n	83a6 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    838c:	0959      	lsrs	r1, r3, #5
    838e:	f003 031f 	and.w	r3, r3, #31
    8392:	2201      	movs	r2, #1
    8394:	fa02 f303 	lsl.w	r3, r2, r3
    8398:	4a30      	ldr	r2, [pc, #192]	; (845c <_tc_timer_init+0x1f4>)
    839a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    839e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    83a6:	2000      	movs	r0, #0
    83a8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    83aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83ae:	4a25      	ldr	r2, [pc, #148]	; (8444 <_tc_timer_init+0x1dc>)
    83b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    83b6:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83b8:	6923      	ldr	r3, [r4, #16]
    83ba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    83be:	d1fb      	bne.n	83b8 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    83c0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83c4:	4a1f      	ldr	r2, [pc, #124]	; (8444 <_tc_timer_init+0x1dc>)
    83c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    83cc:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83ce:	6923      	ldr	r3, [r4, #16]
    83d0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    83d4:	d1fb      	bne.n	83ce <_tc_timer_init+0x166>
    83d6:	e7a9      	b.n	832c <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    83d8:	2a04      	cmp	r2, #4
    83da:	d1a7      	bne.n	832c <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    83dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83e0:	4a18      	ldr	r2, [pc, #96]	; (8444 <_tc_timer_init+0x1dc>)
    83e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    83ea:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83ec:	6923      	ldr	r3, [r4, #16]
    83ee:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    83f2:	d1fb      	bne.n	83ec <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    83f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83f8:	4a12      	ldr	r2, [pc, #72]	; (8444 <_tc_timer_init+0x1dc>)
    83fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8402:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8404:	6923      	ldr	r3, [r4, #16]
    8406:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    840a:	d1fb      	bne.n	8404 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    840c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8410:	4a0c      	ldr	r2, [pc, #48]	; (8444 <_tc_timer_init+0x1dc>)
    8412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8416:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    841a:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    841c:	6923      	ldr	r3, [r4, #16]
    841e:	f013 0f20 	tst.w	r3, #32
    8422:	d1fb      	bne.n	841c <_tc_timer_init+0x1b4>
    8424:	e782      	b.n	832c <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    8426:	4b0c      	ldr	r3, [pc, #48]	; (8458 <_tc_timer_init+0x1f0>)
    8428:	601e      	str	r6, [r3, #0]
    842a:	e78a      	b.n	8342 <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    842c:	4b0a      	ldr	r3, [pc, #40]	; (8458 <_tc_timer_init+0x1f0>)
    842e:	605e      	str	r6, [r3, #4]
    8430:	e78c      	b.n	834c <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    8432:	4b09      	ldr	r3, [pc, #36]	; (8458 <_tc_timer_init+0x1f0>)
    8434:	609e      	str	r6, [r3, #8]
    8436:	e789      	b.n	834c <_tc_timer_init+0xe4>
    8438:	000081ed 	.word	0x000081ed
    843c:	0000df94 	.word	0x0000df94
    8440:	00005dad 	.word	0x00005dad
    8444:	0000df24 	.word	0x0000df24
    8448:	40003800 	.word	0x40003800
    844c:	40003c00 	.word	0x40003c00
    8450:	4101a000 	.word	0x4101a000
    8454:	4101c000 	.word	0x4101c000
    8458:	20000998 	.word	0x20000998
    845c:	e000e100 	.word	0xe000e100

00008460 <_tc_timer_deinit>:
{
    8460:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    8462:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8464:	4620      	mov	r0, r4
    8466:	4b18      	ldr	r3, [pc, #96]	; (84c8 <_tc_timer_deinit+0x68>)
    8468:	4798      	blx	r3
    846a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    846c:	22cd      	movs	r2, #205	; 0xcd
    846e:	4917      	ldr	r1, [pc, #92]	; (84cc <_tc_timer_deinit+0x6c>)
    8470:	2001      	movs	r0, #1
    8472:	4b17      	ldr	r3, [pc, #92]	; (84d0 <_tc_timer_deinit+0x70>)
    8474:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8476:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    847a:	4b16      	ldr	r3, [pc, #88]	; (84d4 <_tc_timer_deinit+0x74>)
    847c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8480:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8484:	2b00      	cmp	r3, #0
    8486:	db0d      	blt.n	84a4 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8488:	095a      	lsrs	r2, r3, #5
    848a:	f003 031f 	and.w	r3, r3, #31
    848e:	2101      	movs	r1, #1
    8490:	fa01 f303 	lsl.w	r3, r1, r3
    8494:	3220      	adds	r2, #32
    8496:	4910      	ldr	r1, [pc, #64]	; (84d8 <_tc_timer_deinit+0x78>)
    8498:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    849c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    84a0:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    84a4:	6823      	ldr	r3, [r4, #0]
    84a6:	f023 0302 	bic.w	r3, r3, #2
    84aa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84ac:	6923      	ldr	r3, [r4, #16]
    84ae:	f013 0f03 	tst.w	r3, #3
    84b2:	d1fb      	bne.n	84ac <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    84b4:	6823      	ldr	r3, [r4, #0]
    84b6:	f043 0301 	orr.w	r3, r3, #1
    84ba:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84bc:	6923      	ldr	r3, [r4, #16]
    84be:	f013 0f01 	tst.w	r3, #1
    84c2:	d1fb      	bne.n	84bc <_tc_timer_deinit+0x5c>
}
    84c4:	bd38      	pop	{r3, r4, r5, pc}
    84c6:	bf00      	nop
    84c8:	000081ed 	.word	0x000081ed
    84cc:	0000df94 	.word	0x0000df94
    84d0:	00005dad 	.word	0x00005dad
    84d4:	0000df24 	.word	0x0000df24
    84d8:	e000e100 	.word	0xe000e100

000084dc <_tc_timer_set_irq>:
{
    84dc:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    84de:	68c0      	ldr	r0, [r0, #12]
    84e0:	4b09      	ldr	r3, [pc, #36]	; (8508 <_tc_timer_set_irq+0x2c>)
    84e2:	4798      	blx	r3
    84e4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    84e6:	f44f 7291 	mov.w	r2, #290	; 0x122
    84ea:	4908      	ldr	r1, [pc, #32]	; (850c <_tc_timer_set_irq+0x30>)
    84ec:	2001      	movs	r0, #1
    84ee:	4b08      	ldr	r3, [pc, #32]	; (8510 <_tc_timer_set_irq+0x34>)
    84f0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    84f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    84f6:	4b07      	ldr	r3, [pc, #28]	; (8514 <_tc_timer_set_irq+0x38>)
    84f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    84fc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    8500:	4b05      	ldr	r3, [pc, #20]	; (8518 <_tc_timer_set_irq+0x3c>)
    8502:	4798      	blx	r3
    8504:	bd10      	pop	{r4, pc}
    8506:	bf00      	nop
    8508:	000081ed 	.word	0x000081ed
    850c:	0000df94 	.word	0x0000df94
    8510:	00005dad 	.word	0x00005dad
    8514:	0000df24 	.word	0x0000df24
    8518:	00006341 	.word	0x00006341

0000851c <_tc_get_timer>:
}
    851c:	4800      	ldr	r0, [pc, #0]	; (8520 <_tc_get_timer+0x4>)
    851e:	4770      	bx	lr
    8520:	20000378 	.word	0x20000378

00008524 <TC0_Handler>:
{
    8524:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8526:	4b02      	ldr	r3, [pc, #8]	; (8530 <TC0_Handler+0xc>)
    8528:	6818      	ldr	r0, [r3, #0]
    852a:	4b02      	ldr	r3, [pc, #8]	; (8534 <TC0_Handler+0x10>)
    852c:	4798      	blx	r3
    852e:	bd08      	pop	{r3, pc}
    8530:	20000998 	.word	0x20000998
    8534:	000081d5 	.word	0x000081d5

00008538 <TC1_Handler>:
{
    8538:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    853a:	4b02      	ldr	r3, [pc, #8]	; (8544 <TC1_Handler+0xc>)
    853c:	6858      	ldr	r0, [r3, #4]
    853e:	4b02      	ldr	r3, [pc, #8]	; (8548 <TC1_Handler+0x10>)
    8540:	4798      	blx	r3
    8542:	bd08      	pop	{r3, pc}
    8544:	20000998 	.word	0x20000998
    8548:	000081d5 	.word	0x000081d5

0000854c <TC2_Handler>:
{
    854c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    854e:	4b02      	ldr	r3, [pc, #8]	; (8558 <TC2_Handler+0xc>)
    8550:	6898      	ldr	r0, [r3, #8]
    8552:	4b02      	ldr	r3, [pc, #8]	; (855c <TC2_Handler+0x10>)
    8554:	4798      	blx	r3
    8556:	bd08      	pop	{r3, pc}
    8558:	20000998 	.word	0x20000998
    855c:	000081d5 	.word	0x000081d5

00008560 <TC3_Handler>:
{
    8560:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    8562:	4b02      	ldr	r3, [pc, #8]	; (856c <TC3_Handler+0xc>)
    8564:	68d8      	ldr	r0, [r3, #12]
    8566:	4b02      	ldr	r3, [pc, #8]	; (8570 <TC3_Handler+0x10>)
    8568:	4798      	blx	r3
    856a:	bd08      	pop	{r3, pc}
    856c:	20000998 	.word	0x20000998
    8570:	000081d5 	.word	0x000081d5

00008574 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8574:	2000      	movs	r0, #0
    8576:	4770      	bx	lr

00008578 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8578:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    857a:	7c83      	ldrb	r3, [r0, #18]
    857c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8580:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    8582:	f002 0107 	and.w	r1, r2, #7
    8586:	2901      	cmp	r1, #1
    8588:	d00b      	beq.n	85a2 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    858a:	015a      	lsls	r2, r3, #5
    858c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8590:	2110      	movs	r1, #16
    8592:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8596:	015b      	lsls	r3, r3, #5
    8598:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    859c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    85a0:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    85a2:	f012 0f40 	tst.w	r2, #64	; 0x40
    85a6:	d00c      	beq.n	85c2 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    85a8:	7cc2      	ldrb	r2, [r0, #19]
    85aa:	f36f 1286 	bfc	r2, #6, #1
    85ae:	74c2      	strb	r2, [r0, #19]
    85b0:	015a      	lsls	r2, r3, #5
    85b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    85b6:	2180      	movs	r1, #128	; 0x80
    85b8:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    85bc:	2140      	movs	r1, #64	; 0x40
    85be:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    85c2:	7cc2      	ldrb	r2, [r0, #19]
    85c4:	f36f 02c3 	bfc	r2, #3, #1
    85c8:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    85ca:	490a      	ldr	r1, [pc, #40]	; (85f4 <_usb_d_dev_handle_setup+0x7c>)
    85cc:	015a      	lsls	r2, r3, #5
    85ce:	188c      	adds	r4, r1, r2
    85d0:	2500      	movs	r5, #0
    85d2:	72a5      	strb	r5, [r4, #10]
    85d4:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    85d6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    85da:	246f      	movs	r4, #111	; 0x6f
    85dc:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    85e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    85e4:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    85e8:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    85ec:	7c80      	ldrb	r0, [r0, #18]
    85ee:	4798      	blx	r3
    85f0:	bd38      	pop	{r3, r4, r5, pc}
    85f2:	bf00      	nop
    85f4:	200009a8 	.word	0x200009a8

000085f8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    85f8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    85fa:	2320      	movs	r3, #32
    85fc:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8600:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8602:	7c83      	ldrb	r3, [r0, #18]
    8604:	f003 030f 	and.w	r3, r3, #15
    8608:	015b      	lsls	r3, r3, #5
    860a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    860e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8612:	4b04      	ldr	r3, [pc, #16]	; (8624 <_usb_d_dev_handle_stall+0x2c>)
    8614:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8618:	6882      	ldr	r2, [r0, #8]
    861a:	2101      	movs	r1, #1
    861c:	7c80      	ldrb	r0, [r0, #18]
    861e:	4798      	blx	r3
    8620:	bd08      	pop	{r3, pc}
    8622:	bf00      	nop
    8624:	200009a8 	.word	0x200009a8

00008628 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8628:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    862a:	7c84      	ldrb	r4, [r0, #18]
    862c:	2cff      	cmp	r4, #255	; 0xff
    862e:	d003      	beq.n	8638 <_usb_d_dev_trans_done+0x10>
    8630:	7cc3      	ldrb	r3, [r0, #19]
    8632:	f013 0f40 	tst.w	r3, #64	; 0x40
    8636:	d100      	bne.n	863a <_usb_d_dev_trans_done+0x12>
    8638:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    863a:	7cc2      	ldrb	r2, [r0, #19]
    863c:	f36f 1286 	bfc	r2, #6, #1
    8640:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    8642:	4a03      	ldr	r2, [pc, #12]	; (8650 <_usb_d_dev_trans_done+0x28>)
    8644:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8648:	6882      	ldr	r2, [r0, #8]
    864a:	4620      	mov	r0, r4
    864c:	47a8      	blx	r5
    864e:	e7f3      	b.n	8638 <_usb_d_dev_trans_done+0x10>
    8650:	200009a8 	.word	0x200009a8

00008654 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8654:	b530      	push	{r4, r5, lr}
    8656:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8658:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    865a:	2425      	movs	r4, #37	; 0x25
    865c:	f88d 4004 	strb.w	r4, [sp, #4]
    8660:	244a      	movs	r4, #74	; 0x4a
    8662:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8666:	2bff      	cmp	r3, #255	; 0xff
    8668:	d01e      	beq.n	86a8 <_usb_d_dev_trans_stop+0x54>
    866a:	7cc4      	ldrb	r4, [r0, #19]
    866c:	f014 0f40 	tst.w	r4, #64	; 0x40
    8670:	d01a      	beq.n	86a8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8672:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8676:	b1c9      	cbz	r1, 86ac <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8678:	0163      	lsls	r3, r4, #5
    867a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    867e:	2580      	movs	r5, #128	; 0x80
    8680:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8684:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8686:	a902      	add	r1, sp, #8
    8688:	440b      	add	r3, r1
    868a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    868e:	0163      	lsls	r3, r4, #5
    8690:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8694:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8698:	0163      	lsls	r3, r4, #5
    869a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    869e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    86a2:	4611      	mov	r1, r2
    86a4:	4b05      	ldr	r3, [pc, #20]	; (86bc <_usb_d_dev_trans_stop+0x68>)
    86a6:	4798      	blx	r3
}
    86a8:	b003      	add	sp, #12
    86aa:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    86ac:	0163      	lsls	r3, r4, #5
    86ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    86b2:	2540      	movs	r5, #64	; 0x40
    86b4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    86b8:	e7e4      	b.n	8684 <_usb_d_dev_trans_stop+0x30>
    86ba:	bf00      	nop
    86bc:	00008629 	.word	0x00008629

000086c0 <_usb_d_dev_handle_trfail>:
{
    86c0:	b530      	push	{r4, r5, lr}
    86c2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    86c4:	7c83      	ldrb	r3, [r0, #18]
    86c6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    86ca:	2204      	movs	r2, #4
    86cc:	f88d 2004 	strb.w	r2, [sp, #4]
    86d0:	2208      	movs	r2, #8
    86d2:	f88d 2005 	strb.w	r2, [sp, #5]
    86d6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    86d8:	460c      	mov	r4, r1
    86da:	b391      	cbz	r1, 8742 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86dc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    86e0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    86e4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    86e8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    86ec:	4a32      	ldr	r2, [pc, #200]	; (87b8 <_usb_d_dev_handle_trfail+0xf8>)
    86ee:	440a      	add	r2, r1
    86f0:	7a91      	ldrb	r1, [r2, #10]
    86f2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    86f4:	2d02      	cmp	r5, #2
    86f6:	d02c      	beq.n	8752 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    86f8:	f011 0f02 	tst.w	r1, #2
    86fc:	d045      	beq.n	878a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    86fe:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8700:	7a91      	ldrb	r1, [r2, #10]
    8702:	f36f 0141 	bfc	r1, #1, #1
    8706:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8708:	aa02      	add	r2, sp, #8
    870a:	4422      	add	r2, r4
    870c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8710:	015a      	lsls	r2, r3, #5
    8712:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8716:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    871a:	015b      	lsls	r3, r3, #5
    871c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8720:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8724:	f005 0307 	and.w	r3, r5, #7
    8728:	2b01      	cmp	r3, #1
    872a:	d143      	bne.n	87b4 <_usb_d_dev_handle_trfail+0xf4>
    872c:	7cc3      	ldrb	r3, [r0, #19]
    872e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8732:	d03f      	beq.n	87b4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8734:	09d9      	lsrs	r1, r3, #7
    8736:	428c      	cmp	r4, r1
    8738:	d03c      	beq.n	87b4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    873a:	2200      	movs	r2, #0
    873c:	4b1f      	ldr	r3, [pc, #124]	; (87bc <_usb_d_dev_handle_trfail+0xfc>)
    873e:	4798      	blx	r3
    8740:	e038      	b.n	87b4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8742:	0159      	lsls	r1, r3, #5
    8744:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8748:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    874c:	f005 0507 	and.w	r5, r5, #7
    8750:	e7ca      	b.n	86e8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8752:	f011 0f01 	tst.w	r1, #1
    8756:	d0cf      	beq.n	86f8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8758:	7a91      	ldrb	r1, [r2, #10]
    875a:	f36f 0100 	bfc	r1, #0, #1
    875e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8760:	aa02      	add	r2, sp, #8
    8762:	4422      	add	r2, r4
    8764:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8768:	015a      	lsls	r2, r3, #5
    876a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    876e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8772:	015b      	lsls	r3, r3, #5
    8774:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8778:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    877c:	2204      	movs	r2, #4
    877e:	1c21      	adds	r1, r4, #0
    8780:	bf18      	it	ne
    8782:	2101      	movne	r1, #1
    8784:	4b0d      	ldr	r3, [pc, #52]	; (87bc <_usb_d_dev_handle_trfail+0xfc>)
    8786:	4798      	blx	r3
    8788:	e014      	b.n	87b4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    878a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    878e:	4a0a      	ldr	r2, [pc, #40]	; (87b8 <_usb_d_dev_handle_trfail+0xf8>)
    8790:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8794:	2100      	movs	r1, #0
    8796:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8798:	aa02      	add	r2, sp, #8
    879a:	4414      	add	r4, r2
    879c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87a0:	015a      	lsls	r2, r3, #5
    87a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87a6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87aa:	015b      	lsls	r3, r3, #5
    87ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87b0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    87b4:	b003      	add	sp, #12
    87b6:	bd30      	pop	{r4, r5, pc}
    87b8:	200009a8 	.word	0x200009a8
    87bc:	00008655 	.word	0x00008655

000087c0 <_usb_d_dev_reset_epts>:
{
    87c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87c4:	4d0c      	ldr	r5, [pc, #48]	; (87f8 <_usb_d_dev_reset_epts+0x38>)
    87c6:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    87ca:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    87ce:	f04f 0803 	mov.w	r8, #3
    87d2:	4f0a      	ldr	r7, [pc, #40]	; (87fc <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    87d4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    87d6:	4641      	mov	r1, r8
    87d8:	4620      	mov	r0, r4
    87da:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    87dc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    87de:	2300      	movs	r3, #0
    87e0:	74e3      	strb	r3, [r4, #19]
    87e2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    87e4:	42ac      	cmp	r4, r5
    87e6:	d1f6      	bne.n	87d6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    87e8:	22c0      	movs	r2, #192	; 0xc0
    87ea:	4619      	mov	r1, r3
    87ec:	4802      	ldr	r0, [pc, #8]	; (87f8 <_usb_d_dev_reset_epts+0x38>)
    87ee:	4b04      	ldr	r3, [pc, #16]	; (8800 <_usb_d_dev_reset_epts+0x40>)
    87f0:	4798      	blx	r3
    87f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87f6:	bf00      	nop
    87f8:	200009a8 	.word	0x200009a8
    87fc:	00008629 	.word	0x00008629
    8800:	0000c2f3 	.word	0x0000c2f3

00008804 <_usb_d_dev_in_next>:
{
    8804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8808:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    880a:	7c84      	ldrb	r4, [r0, #18]
    880c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8810:	4688      	mov	r8, r1
    8812:	2900      	cmp	r1, #0
    8814:	f000 80a0 	beq.w	8958 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8818:	4b58      	ldr	r3, [pc, #352]	; (897c <_usb_d_dev_in_next+0x178>)
    881a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    881e:	6958      	ldr	r0, [r3, #20]
    8820:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8824:	8a2b      	ldrh	r3, [r5, #16]
    8826:	f240 32ff 	movw	r2, #1023	; 0x3ff
    882a:	4293      	cmp	r3, r2
    882c:	f000 808e 	beq.w	894c <_usb_d_dev_in_next+0x148>
    8830:	3b01      	subs	r3, #1
    8832:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8834:	7cef      	ldrb	r7, [r5, #19]
    8836:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    883a:	f1b8 0f00 	cmp.w	r8, #0
    883e:	d005      	beq.n	884c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8840:	0162      	lsls	r2, r4, #5
    8842:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8846:	2302      	movs	r3, #2
    8848:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    884c:	68a9      	ldr	r1, [r5, #8]
    884e:	eb0e 0301 	add.w	r3, lr, r1
    8852:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8854:	686e      	ldr	r6, [r5, #4]
    8856:	42b3      	cmp	r3, r6
    8858:	d23f      	bcs.n	88da <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    885a:	1af6      	subs	r6, r6, r3
    885c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    885e:	7cea      	ldrb	r2, [r5, #19]
    8860:	f012 0f20 	tst.w	r2, #32
    8864:	d02d      	beq.n	88c2 <_usb_d_dev_in_next+0xbe>
    8866:	8a2a      	ldrh	r2, [r5, #16]
    8868:	4296      	cmp	r6, r2
    886a:	bf28      	it	cs
    886c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    886e:	6829      	ldr	r1, [r5, #0]
    8870:	4632      	mov	r2, r6
    8872:	4419      	add	r1, r3
    8874:	68e8      	ldr	r0, [r5, #12]
    8876:	4b42      	ldr	r3, [pc, #264]	; (8980 <_usb_d_dev_in_next+0x17c>)
    8878:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    887a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    887c:	4b3f      	ldr	r3, [pc, #252]	; (897c <_usb_d_dev_in_next+0x178>)
    887e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8882:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8884:	4b3d      	ldr	r3, [pc, #244]	; (897c <_usb_d_dev_in_next+0x178>)
    8886:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    888a:	695a      	ldr	r2, [r3, #20]
    888c:	f366 020d 	bfi	r2, r6, #0, #14
    8890:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8892:	695a      	ldr	r2, [r3, #20]
    8894:	f36f 329b 	bfc	r2, #14, #14
    8898:	615a      	str	r2, [r3, #20]
	if (!isr) {
    889a:	f1b8 0f00 	cmp.w	r8, #0
    889e:	d108      	bne.n	88b2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    88a0:	2f01      	cmp	r7, #1
    88a2:	bf0c      	ite	eq
    88a4:	224e      	moveq	r2, #78	; 0x4e
    88a6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    88a8:	0163      	lsls	r3, r4, #5
    88aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88ae:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    88b2:	0164      	lsls	r4, r4, #5
    88b4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    88b8:	2380      	movs	r3, #128	; 0x80
    88ba:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    88be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88c2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    88c6:	bf28      	it	cs
    88c8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    88cc:	6829      	ldr	r1, [r5, #0]
    88ce:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    88d0:	4a2a      	ldr	r2, [pc, #168]	; (897c <_usb_d_dev_in_next+0x178>)
    88d2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    88d6:	6113      	str	r3, [r2, #16]
    88d8:	e7d4      	b.n	8884 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    88da:	7ceb      	ldrb	r3, [r5, #19]
    88dc:	f013 0f10 	tst.w	r3, #16
    88e0:	d00f      	beq.n	8902 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    88e2:	7ceb      	ldrb	r3, [r5, #19]
    88e4:	f36f 1304 	bfc	r3, #4, #1
    88e8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    88ea:	4b24      	ldr	r3, [pc, #144]	; (897c <_usb_d_dev_in_next+0x178>)
    88ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    88f0:	695a      	ldr	r2, [r3, #20]
    88f2:	f36f 020d 	bfc	r2, #0, #14
    88f6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    88f8:	695a      	ldr	r2, [r3, #20]
    88fa:	f36f 329b 	bfc	r2, #14, #14
    88fe:	615a      	str	r2, [r3, #20]
    8900:	e7cb      	b.n	889a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8902:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8904:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8908:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    890c:	bf0c      	ite	eq
    890e:	234b      	moveq	r3, #75	; 0x4b
    8910:	234a      	movne	r3, #74	; 0x4a
    8912:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8916:	8a2a      	ldrh	r2, [r5, #16]
    8918:	ea00 030e 	and.w	r3, r0, lr
    891c:	429a      	cmp	r2, r3
    891e:	d005      	beq.n	892c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8920:	2100      	movs	r1, #0
    8922:	4628      	mov	r0, r5
    8924:	4b17      	ldr	r3, [pc, #92]	; (8984 <_usb_d_dev_in_next+0x180>)
    8926:	4798      	blx	r3
	return;
    8928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    892c:	7ceb      	ldrb	r3, [r5, #19]
    892e:	f36f 1386 	bfc	r3, #6, #1
    8932:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8934:	4b11      	ldr	r3, [pc, #68]	; (897c <_usb_d_dev_in_next+0x178>)
    8936:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    893a:	68a9      	ldr	r1, [r5, #8]
    893c:	7ca8      	ldrb	r0, [r5, #18]
    893e:	4798      	blx	r3
    8940:	b9d0      	cbnz	r0, 8978 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8942:	7ceb      	ldrb	r3, [r5, #19]
    8944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8948:	74eb      	strb	r3, [r5, #19]
    894a:	e7e9      	b.n	8920 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    894c:	7cef      	ldrb	r7, [r5, #19]
    894e:	f007 0707 	and.w	r7, r7, #7
    8952:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8956:	e773      	b.n	8840 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8958:	8a03      	ldrh	r3, [r0, #16]
    895a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    895e:	4293      	cmp	r3, r2
    8960:	d107      	bne.n	8972 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8962:	7cef      	ldrb	r7, [r5, #19]
    8964:	f007 0707 	and.w	r7, r7, #7
    8968:	f04f 0e00 	mov.w	lr, #0
    896c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8970:	e76c      	b.n	884c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8972:	f04f 0e00 	mov.w	lr, #0
    8976:	e75b      	b.n	8830 <_usb_d_dev_in_next+0x2c>
    8978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    897c:	200009a8 	.word	0x200009a8
    8980:	0000c2dd 	.word	0x0000c2dd
    8984:	00008629 	.word	0x00008629

00008988 <_usb_d_dev_out_next>:
{
    8988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    898c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    898e:	7c85      	ldrb	r5, [r0, #18]
    8990:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8994:	4689      	mov	r9, r1
    8996:	2900      	cmp	r1, #0
    8998:	d056      	beq.n	8a48 <_usb_d_dev_out_next+0xc0>
    899a:	4b74      	ldr	r3, [pc, #464]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    899c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    89a0:	685a      	ldr	r2, [r3, #4]
    89a2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    89a6:	685f      	ldr	r7, [r3, #4]
    89a8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    89ac:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    89ae:	8a06      	ldrh	r6, [r0, #16]
    89b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    89b4:	429e      	cmp	r6, r3
    89b6:	f000 80ba 	beq.w	8b2e <_usb_d_dev_out_next+0x1a6>
    89ba:	3e01      	subs	r6, #1
    89bc:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    89be:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    89c2:	f894 8013 	ldrb.w	r8, [r4, #19]
    89c6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    89ca:	f1b9 0f00 	cmp.w	r9, #0
    89ce:	d005      	beq.n	89dc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    89d0:	016b      	lsls	r3, r5, #5
    89d2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    89d6:	2201      	movs	r2, #1
    89d8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    89dc:	7ce3      	ldrb	r3, [r4, #19]
    89de:	f013 0f20 	tst.w	r3, #32
    89e2:	d00d      	beq.n	8a00 <_usb_d_dev_out_next+0x78>
    89e4:	6862      	ldr	r2, [r4, #4]
    89e6:	2a00      	cmp	r2, #0
    89e8:	d037      	beq.n	8a5a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    89ea:	68a0      	ldr	r0, [r4, #8]
    89ec:	1a12      	subs	r2, r2, r0
    89ee:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    89f0:	6823      	ldr	r3, [r4, #0]
    89f2:	42ba      	cmp	r2, r7
    89f4:	bf28      	it	cs
    89f6:	463a      	movcs	r2, r7
    89f8:	68e1      	ldr	r1, [r4, #12]
    89fa:	4418      	add	r0, r3
    89fc:	4b5c      	ldr	r3, [pc, #368]	; (8b70 <_usb_d_dev_out_next+0x1e8>)
    89fe:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8a00:	6863      	ldr	r3, [r4, #4]
    8a02:	b353      	cbz	r3, 8a5a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8a04:	f1b9 0f00 	cmp.w	r9, #0
    8a08:	d040      	beq.n	8a8c <_usb_d_dev_out_next+0x104>
    8a0a:	8a22      	ldrh	r2, [r4, #16]
    8a0c:	42ba      	cmp	r2, r7
    8a0e:	d93d      	bls.n	8a8c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8a10:	7ce3      	ldrb	r3, [r4, #19]
    8a12:	f36f 1304 	bfc	r3, #4, #1
    8a16:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8a18:	68a3      	ldr	r3, [r4, #8]
    8a1a:	445b      	add	r3, fp
    8a1c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8a1e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8a22:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8a26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8a2a:	bf0c      	ite	eq
    8a2c:	222d      	moveq	r2, #45	; 0x2d
    8a2e:	2225      	movne	r2, #37	; 0x25
    8a30:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8a34:	b915      	cbnz	r5, 8a3c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8a36:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8a38:	4b4c      	ldr	r3, [pc, #304]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8a3a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8a3c:	2100      	movs	r1, #0
    8a3e:	4620      	mov	r0, r4
    8a40:	4b4c      	ldr	r3, [pc, #304]	; (8b74 <_usb_d_dev_out_next+0x1ec>)
    8a42:	4798      	blx	r3
	return;
    8a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8a48:	8a06      	ldrh	r6, [r0, #16]
    8a4a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8a4e:	429e      	cmp	r6, r3
    8a50:	d07b      	beq.n	8b4a <_usb_d_dev_out_next+0x1c2>
    8a52:	f04f 0b00 	mov.w	fp, #0
    8a56:	46da      	mov	sl, fp
    8a58:	e7af      	b.n	89ba <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8a5a:	7ce3      	ldrb	r3, [r4, #19]
    8a5c:	f013 0f10 	tst.w	r3, #16
    8a60:	d06c      	beq.n	8b3c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8a62:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8a64:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8a68:	f043 0320 	orr.w	r3, r3, #32
    8a6c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8a6e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8a70:	493e      	ldr	r1, [pc, #248]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8a72:	016a      	lsls	r2, r5, #5
    8a74:	188b      	adds	r3, r1, r2
    8a76:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8a78:	8a21      	ldrh	r1, [r4, #16]
    8a7a:	685a      	ldr	r2, [r3, #4]
    8a7c:	f361 329b 	bfi	r2, r1, #14, #14
    8a80:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8a82:	685a      	ldr	r2, [r3, #4]
    8a84:	f36f 020d 	bfc	r2, #0, #14
    8a88:	605a      	str	r2, [r3, #4]
    8a8a:	e01d      	b.n	8ac8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8a8c:	68a2      	ldr	r2, [r4, #8]
    8a8e:	4452      	add	r2, sl
    8a90:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8a92:	4293      	cmp	r3, r2
    8a94:	d9c3      	bls.n	8a1e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8a96:	1a9b      	subs	r3, r3, r2
    8a98:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8a9a:	7ce1      	ldrb	r1, [r4, #19]
    8a9c:	f011 0f20 	tst.w	r1, #32
    8aa0:	d026      	beq.n	8af0 <_usb_d_dev_out_next+0x168>
    8aa2:	8a22      	ldrh	r2, [r4, #16]
    8aa4:	4293      	cmp	r3, r2
    8aa6:	bf28      	it	cs
    8aa8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8aaa:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8aac:	016a      	lsls	r2, r5, #5
    8aae:	492f      	ldr	r1, [pc, #188]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8ab0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8ab2:	4a2e      	ldr	r2, [pc, #184]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8ab4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8ab8:	6851      	ldr	r1, [r2, #4]
    8aba:	f363 319b 	bfi	r1, r3, #14, #14
    8abe:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ac0:	6853      	ldr	r3, [r2, #4]
    8ac2:	f36f 030d 	bfc	r3, #0, #14
    8ac6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8ac8:	f1b9 0f00 	cmp.w	r9, #0
    8acc:	d108      	bne.n	8ae0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8ace:	f1b8 0f01 	cmp.w	r8, #1
    8ad2:	d025      	beq.n	8b20 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8ad4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8ad6:	016b      	lsls	r3, r5, #5
    8ad8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8adc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8ae0:	016d      	lsls	r5, r5, #5
    8ae2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8ae6:	2340      	movs	r3, #64	; 0x40
    8ae8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    8af0:	8a21      	ldrh	r1, [r4, #16]
    8af2:	428b      	cmp	r3, r1
    8af4:	d90a      	bls.n	8b0c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8afa:	d80e      	bhi.n	8b1a <_usb_d_dev_out_next+0x192>
    8afc:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8b00:	6821      	ldr	r1, [r4, #0]
    8b02:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8b04:	0169      	lsls	r1, r5, #5
    8b06:	4819      	ldr	r0, [pc, #100]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8b08:	5042      	str	r2, [r0, r1]
    8b0a:	e7d2      	b.n	8ab2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8b0c:	428b      	cmp	r3, r1
    8b0e:	d2f7      	bcs.n	8b00 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    8b10:	7ce1      	ldrb	r1, [r4, #19]
    8b12:	f041 0120 	orr.w	r1, r1, #32
    8b16:	74e1      	strb	r1, [r4, #19]
    8b18:	e7f2      	b.n	8b00 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8b1e:	e7ef      	b.n	8b00 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    8b20:	4b12      	ldr	r3, [pc, #72]	; (8b6c <_usb_d_dev_out_next+0x1e4>)
    8b22:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8b26:	2200      	movs	r2, #0
    8b28:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8b2a:	222d      	movs	r2, #45	; 0x2d
    8b2c:	e7d3      	b.n	8ad6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8b2e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b32:	f890 8013 	ldrb.w	r8, [r0, #19]
    8b36:	f008 0807 	and.w	r8, r8, #7
    8b3a:	e749      	b.n	89d0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8b3c:	f1b9 0f00 	cmp.w	r9, #0
    8b40:	d10b      	bne.n	8b5a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    8b42:	68a3      	ldr	r3, [r4, #8]
    8b44:	4453      	add	r3, sl
    8b46:	60a3      	str	r3, [r4, #8]
    8b48:	e769      	b.n	8a1e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b4a:	f890 8013 	ldrb.w	r8, [r0, #19]
    8b4e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8b52:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b54:	46bb      	mov	fp, r7
    8b56:	46ba      	mov	sl, r7
    8b58:	e740      	b.n	89dc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8b5a:	8a23      	ldrh	r3, [r4, #16]
    8b5c:	42bb      	cmp	r3, r7
    8b5e:	f63f af57 	bhi.w	8a10 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8b62:	68a3      	ldr	r3, [r4, #8]
    8b64:	4453      	add	r3, sl
    8b66:	60a3      	str	r3, [r4, #8]
    8b68:	e759      	b.n	8a1e <_usb_d_dev_out_next+0x96>
    8b6a:	bf00      	nop
    8b6c:	200009a8 	.word	0x200009a8
    8b70:	0000c2dd 	.word	0x0000c2dd
    8b74:	00008629 	.word	0x00008629

00008b78 <_usb_d_dev_handler>:
{
    8b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8b7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b80:	8c1e      	ldrh	r6, [r3, #32]
    8b82:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8b84:	b146      	cbz	r6, 8b98 <_usb_d_dev_handler+0x20>
    8b86:	4d96      	ldr	r5, [pc, #600]	; (8de0 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8b88:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8b8a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8b8e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8dfc <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8b92:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8e00 <_usb_d_dev_handler+0x288>
    8b96:	e0de      	b.n	8d56 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8b98:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8b9a:	8b1b      	ldrh	r3, [r3, #24]
    8b9c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8b9e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8ba0:	f013 0f04 	tst.w	r3, #4
    8ba4:	d11e      	bne.n	8be4 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8ba6:	f413 7f00 	tst.w	r3, #512	; 0x200
    8baa:	d125      	bne.n	8bf8 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8bac:	f013 0f80 	tst.w	r3, #128	; 0x80
    8bb0:	d14f      	bne.n	8c52 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8bb2:	f013 0f70 	tst.w	r3, #112	; 0x70
    8bb6:	d158      	bne.n	8c6a <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8bb8:	f013 0f08 	tst.w	r3, #8
    8bbc:	d178      	bne.n	8cb0 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8bbe:	f013 0f01 	tst.w	r3, #1
    8bc2:	d0e0      	beq.n	8b86 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8bc4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bc8:	f240 2201 	movw	r2, #513	; 0x201
    8bcc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8bce:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8bd0:	2270      	movs	r2, #112	; 0x70
    8bd2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8bd4:	4b83      	ldr	r3, [pc, #524]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8bd6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8bda:	2100      	movs	r1, #0
    8bdc:	2004      	movs	r0, #4
    8bde:	4798      	blx	r3
    8be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8be4:	2204      	movs	r2, #4
    8be6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bea:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8bec:	4b7d      	ldr	r3, [pc, #500]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8bee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8bf2:	4798      	blx	r3
    8bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bf8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bfc:	f240 2201 	movw	r2, #513	; 0x201
    8c00:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8c02:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8c04:	2270      	movs	r2, #112	; 0x70
    8c06:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8c08:	4b76      	ldr	r3, [pc, #472]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8c0a:	891b      	ldrh	r3, [r3, #8]
    8c0c:	f003 030f 	and.w	r3, r3, #15
    8c10:	2b03      	cmp	r3, #3
    8c12:	d014      	beq.n	8c3e <_usb_d_dev_handler+0xc6>
    8c14:	2301      	movs	r3, #1
    8c16:	4873      	ldr	r0, [pc, #460]	; (8de4 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8c18:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8c1a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    8c1e:	8912      	ldrh	r2, [r2, #8]
    8c20:	f002 020f 	and.w	r2, r2, #15
    8c24:	2a03      	cmp	r2, #3
    8c26:	d00b      	beq.n	8c40 <_usb_d_dev_handler+0xc8>
    8c28:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8c2a:	2b05      	cmp	r3, #5
    8c2c:	d1f4      	bne.n	8c18 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8c2e:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8c30:	4b6c      	ldr	r3, [pc, #432]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8c32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8c36:	2003      	movs	r0, #3
    8c38:	4798      	blx	r3
    8c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8c3e:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8c40:	4b68      	ldr	r3, [pc, #416]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8c42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8c46:	8919      	ldrh	r1, [r3, #8]
    8c48:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8c4c:	2200      	movs	r2, #0
    8c4e:	811a      	strh	r2, [r3, #8]
    8c50:	e7ee      	b.n	8c30 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8c52:	2280      	movs	r2, #128	; 0x80
    8c54:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c58:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8c5a:	4b62      	ldr	r3, [pc, #392]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8c5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8c60:	2100      	movs	r1, #0
    8c62:	2005      	movs	r0, #5
    8c64:	4798      	blx	r3
    8c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8c6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c6e:	2270      	movs	r2, #112	; 0x70
    8c70:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8c72:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8c74:	f240 2201 	movw	r2, #513	; 0x201
    8c78:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8c7a:	4b5b      	ldr	r3, [pc, #364]	; (8de8 <_usb_d_dev_handler+0x270>)
    8c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8c80:	f013 0f01 	tst.w	r3, #1
    8c84:	d00e      	beq.n	8ca4 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8c86:	4a58      	ldr	r2, [pc, #352]	; (8de8 <_usb_d_dev_handler+0x270>)
    8c88:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8c8a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8c8e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8c92:	d1f9      	bne.n	8c88 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8c94:	4b53      	ldr	r3, [pc, #332]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8c9a:	2100      	movs	r1, #0
    8c9c:	2002      	movs	r0, #2
    8c9e:	4798      	blx	r3
    8ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8ca4:	4a50      	ldr	r2, [pc, #320]	; (8de8 <_usb_d_dev_handler+0x270>)
    8ca6:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8ca8:	f413 7f80 	tst.w	r3, #256	; 0x100
    8cac:	d0fb      	beq.n	8ca6 <_usb_d_dev_handler+0x12e>
    8cae:	e7f1      	b.n	8c94 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8cb0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8cb4:	2400      	movs	r4, #0
    8cb6:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8cba:	2208      	movs	r2, #8
    8cbc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8cbe:	2270      	movs	r2, #112	; 0x70
    8cc0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8cc2:	f240 2201 	movw	r2, #513	; 0x201
    8cc6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8cc8:	4b48      	ldr	r3, [pc, #288]	; (8dec <_usb_d_dev_handler+0x274>)
    8cca:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8ccc:	4b45      	ldr	r3, [pc, #276]	; (8de4 <_usb_d_dev_handler+0x26c>)
    8cce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8cd2:	4621      	mov	r1, r4
    8cd4:	2001      	movs	r0, #1
    8cd6:	4798      	blx	r3
    8cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8cdc:	f011 0f10 	tst.w	r1, #16
    8ce0:	d109      	bne.n	8cf6 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8ce2:	f011 0f40 	tst.w	r1, #64	; 0x40
    8ce6:	d108      	bne.n	8cfa <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8ce8:	f011 0f20 	tst.w	r1, #32
    8cec:	d02f      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8cee:	2100      	movs	r1, #0
    8cf0:	4b3f      	ldr	r3, [pc, #252]	; (8df0 <_usb_d_dev_handler+0x278>)
    8cf2:	4798      	blx	r3
    8cf4:	e02b      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8cf6:	47c8      	blx	r9
    8cf8:	e029      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8cfa:	2101      	movs	r1, #1
    8cfc:	4b3c      	ldr	r3, [pc, #240]	; (8df0 <_usb_d_dev_handler+0x278>)
    8cfe:	4798      	blx	r3
    8d00:	e025      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8d02:	f011 0f40 	tst.w	r1, #64	; 0x40
    8d06:	d111      	bne.n	8d2c <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8d08:	f011 0f08 	tst.w	r1, #8
    8d0c:	d112      	bne.n	8d34 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8d0e:	f011 0f02 	tst.w	r1, #2
    8d12:	d112      	bne.n	8d3a <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8d14:	f003 0307 	and.w	r3, r3, #7
    8d18:	2b01      	cmp	r3, #1
    8d1a:	d118      	bne.n	8d4e <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8d1c:	f011 0f04 	tst.w	r1, #4
    8d20:	d10f      	bne.n	8d42 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8d22:	f011 0f10 	tst.w	r1, #16
    8d26:	d012      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8d28:	47c8      	blx	r9
    8d2a:	e010      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8d2c:	2101      	movs	r1, #1
    8d2e:	4b30      	ldr	r3, [pc, #192]	; (8df0 <_usb_d_dev_handler+0x278>)
    8d30:	4798      	blx	r3
    8d32:	e00c      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8d34:	2101      	movs	r1, #1
    8d36:	47c0      	blx	r8
    8d38:	e009      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8d3a:	2101      	movs	r1, #1
    8d3c:	4b2d      	ldr	r3, [pc, #180]	; (8df4 <_usb_d_dev_handler+0x27c>)
    8d3e:	4798      	blx	r3
    8d40:	e005      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8d42:	2100      	movs	r1, #0
    8d44:	47c0      	blx	r8
    8d46:	e002      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8d48:	2100      	movs	r1, #0
    8d4a:	4b29      	ldr	r3, [pc, #164]	; (8df0 <_usb_d_dev_handler+0x278>)
    8d4c:	4798      	blx	r3
    8d4e:	3401      	adds	r4, #1
    8d50:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8d52:	2c1b      	cmp	r4, #27
    8d54:	d042      	beq.n	8ddc <_usb_d_dev_handler+0x264>
    8d56:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8d58:	7cab      	ldrb	r3, [r5, #18]
    8d5a:	2bff      	cmp	r3, #255	; 0xff
    8d5c:	d0f7      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8d5e:	f003 030f 	and.w	r3, r3, #15
    8d62:	2101      	movs	r1, #1
    8d64:	4099      	lsls	r1, r3
    8d66:	4231      	tst	r1, r6
    8d68:	d0f1      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8d6a:	0159      	lsls	r1, r3, #5
    8d6c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8d70:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8d74:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8d76:	015b      	lsls	r3, r3, #5
    8d78:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8d7c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8d80:	4019      	ands	r1, r3
    8d82:	d0e4      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8d84:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8d88:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8d8c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8d90:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8d94:	2a01      	cmp	r2, #1
    8d96:	d0a1      	beq.n	8cdc <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8d98:	f013 0f80 	tst.w	r3, #128	; 0x80
    8d9c:	d1b1      	bne.n	8d02 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8d9e:	f011 0f20 	tst.w	r1, #32
    8da2:	d1d1      	bne.n	8d48 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8da4:	f011 0f04 	tst.w	r1, #4
    8da8:	d10e      	bne.n	8dc8 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8daa:	f011 0f01 	tst.w	r1, #1
    8dae:	d10e      	bne.n	8dce <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8db0:	f003 0307 	and.w	r3, r3, #7
    8db4:	2b01      	cmp	r3, #1
    8db6:	d1ca      	bne.n	8d4e <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8db8:	f011 0f08 	tst.w	r1, #8
    8dbc:	d10b      	bne.n	8dd6 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8dbe:	f011 0f10 	tst.w	r1, #16
    8dc2:	d0c4      	beq.n	8d4e <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8dc4:	47c8      	blx	r9
    8dc6:	e7c2      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8dc8:	2100      	movs	r1, #0
    8dca:	47c0      	blx	r8
    8dcc:	e7bf      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8dce:	2101      	movs	r1, #1
    8dd0:	4b09      	ldr	r3, [pc, #36]	; (8df8 <_usb_d_dev_handler+0x280>)
    8dd2:	4798      	blx	r3
    8dd4:	e7bb      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8dd6:	2101      	movs	r1, #1
    8dd8:	47c0      	blx	r8
    8dda:	e7b8      	b.n	8d4e <_usb_d_dev_handler+0x1d6>
    8ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8de0:	20000a7c 	.word	0x20000a7c
    8de4:	200009a8 	.word	0x200009a8
    8de8:	40001000 	.word	0x40001000
    8dec:	000087c1 	.word	0x000087c1
    8df0:	000085f9 	.word	0x000085f9
    8df4:	00008805 	.word	0x00008805
    8df8:	00008989 	.word	0x00008989
    8dfc:	00008579 	.word	0x00008579
    8e00:	000086c1 	.word	0x000086c1

00008e04 <_usb_d_dev_init>:
{
    8e04:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8e06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e0a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8e0c:	f013 0f01 	tst.w	r3, #1
    8e10:	d124      	bne.n	8e5c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8e12:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8e16:	7893      	ldrb	r3, [r2, #2]
    8e18:	f013 0f03 	tst.w	r3, #3
    8e1c:	d1fb      	bne.n	8e16 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8e1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e22:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8e24:	f013 0f02 	tst.w	r3, #2
    8e28:	d00f      	beq.n	8e4a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8e2a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8e2e:	7813      	ldrb	r3, [r2, #0]
    8e30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8e34:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8e36:	7893      	ldrb	r3, [r2, #2]
    8e38:	f013 0f03 	tst.w	r3, #3
    8e3c:	d1fb      	bne.n	8e36 <_usb_d_dev_init+0x32>
    8e3e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8e42:	7893      	ldrb	r3, [r2, #2]
    8e44:	f013 0f02 	tst.w	r3, #2
    8e48:	d1fb      	bne.n	8e42 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8e4a:	2201      	movs	r2, #1
    8e4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e50:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8e52:	461a      	mov	r2, r3
    8e54:	7893      	ldrb	r3, [r2, #2]
    8e56:	f013 0f03 	tst.w	r3, #3
    8e5a:	d1fb      	bne.n	8e54 <_usb_d_dev_init+0x50>
    8e5c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8e60:	7893      	ldrb	r3, [r2, #2]
    8e62:	f013 0f01 	tst.w	r3, #1
    8e66:	d1fb      	bne.n	8e60 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8e68:	4b24      	ldr	r3, [pc, #144]	; (8efc <_usb_d_dev_init+0xf8>)
    8e6a:	4a25      	ldr	r2, [pc, #148]	; (8f00 <_usb_d_dev_init+0xfc>)
    8e6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8e70:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8e74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8e78:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8e7c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8e80:	4b20      	ldr	r3, [pc, #128]	; (8f04 <_usb_d_dev_init+0x100>)
    8e82:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8e84:	4b20      	ldr	r3, [pc, #128]	; (8f08 <_usb_d_dev_init+0x104>)
    8e86:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8e88:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8e8c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8e90:	f011 011f 	ands.w	r1, r1, #31
    8e94:	d02b      	beq.n	8eee <_usb_d_dev_init+0xea>
		pad_transn = 9;
    8e96:	291f      	cmp	r1, #31
    8e98:	bf08      	it	eq
    8e9a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8e9c:	b34b      	cbz	r3, 8ef2 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8e9e:	2b1f      	cmp	r3, #31
    8ea0:	bf08      	it	eq
    8ea2:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8ea4:	b33a      	cbz	r2, 8ef6 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    8ea6:	2a07      	cmp	r2, #7
    8ea8:	bf08      	it	eq
    8eaa:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8eac:	f003 031f 	and.w	r3, r3, #31
    8eb0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    8eb4:	0312      	lsls	r2, r2, #12
    8eb6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8eba:	4313      	orrs	r3, r2
    8ebc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ec0:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8ec2:	78d3      	ldrb	r3, [r2, #3]
    8ec4:	f043 0303 	orr.w	r3, r3, #3
    8ec8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8eca:	78d3      	ldrb	r3, [r2, #3]
    8ecc:	f043 030c 	orr.w	r3, r3, #12
    8ed0:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8ed2:	2304      	movs	r3, #4
    8ed4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ed6:	7893      	ldrb	r3, [r2, #2]
    8ed8:	f013 0f03 	tst.w	r3, #3
    8edc:	d1fb      	bne.n	8ed6 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8ede:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ee2:	4a06      	ldr	r2, [pc, #24]	; (8efc <_usb_d_dev_init+0xf8>)
    8ee4:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8ee6:	2201      	movs	r2, #1
    8ee8:	811a      	strh	r2, [r3, #8]
}
    8eea:	2000      	movs	r0, #0
    8eec:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    8eee:	2109      	movs	r1, #9
    8ef0:	e7d4      	b.n	8e9c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    8ef2:	2319      	movs	r3, #25
    8ef4:	e7d6      	b.n	8ea4 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8ef6:	2206      	movs	r2, #6
    8ef8:	e7d8      	b.n	8eac <_usb_d_dev_init+0xa8>
    8efa:	bf00      	nop
    8efc:	200009a8 	.word	0x200009a8
    8f00:	00008575 	.word	0x00008575
    8f04:	000087c1 	.word	0x000087c1
    8f08:	00800084 	.word	0x00800084

00008f0c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8f0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f10:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    8f12:	f013 0f03 	tst.w	r3, #3
    8f16:	d129      	bne.n	8f6c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f18:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8f1c:	7893      	ldrb	r3, [r2, #2]
    8f1e:	f013 0f03 	tst.w	r3, #3
    8f22:	d1fb      	bne.n	8f1c <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8f24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8f2c:	f013 0f02 	tst.w	r3, #2
    8f30:	d108      	bne.n	8f44 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    8f32:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8f36:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8f3a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f3c:	7893      	ldrb	r3, [r2, #2]
    8f3e:	f013 0f03 	tst.w	r3, #3
    8f42:	d1fb      	bne.n	8f3c <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f44:	4b0b      	ldr	r3, [pc, #44]	; (8f74 <_usb_d_dev_enable+0x68>)
    8f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8f4a:	609a      	str	r2, [r3, #8]
    8f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8f50:	609a      	str	r2, [r3, #8]
    8f52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8f56:	609a      	str	r2, [r3, #8]
    8f58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8f5c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8f5e:	f240 228d 	movw	r2, #653	; 0x28d
    8f62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f66:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8f68:	2000      	movs	r0, #0
    8f6a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8f6c:	f06f 0010 	mvn.w	r0, #16
}
    8f70:	4770      	bx	lr
    8f72:	bf00      	nop
    8f74:	e000e100 	.word	0xe000e100

00008f78 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8f78:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8f7c:	8913      	ldrh	r3, [r2, #8]
    8f7e:	f023 0301 	bic.w	r3, r3, #1
    8f82:	041b      	lsls	r3, r3, #16
    8f84:	0c1b      	lsrs	r3, r3, #16
    8f86:	8113      	strh	r3, [r2, #8]
    8f88:	4770      	bx	lr

00008f8a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8f8a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8f8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f92:	7298      	strb	r0, [r3, #10]
    8f94:	4770      	bx	lr

00008f96 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    8f96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f9a:	8a18      	ldrh	r0, [r3, #16]
}
    8f9c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    8fa0:	4770      	bx	lr
	...

00008fa4 <_usb_d_dev_ep_init>:
{
    8fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fa6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8faa:	f010 050f 	ands.w	r5, r0, #15
    8fae:	d04d      	beq.n	904c <_usb_d_dev_ep_init+0xa8>
    8fb0:	f1be 0f00 	cmp.w	lr, #0
    8fb4:	bfb4      	ite	lt
    8fb6:	1d6c      	addlt	r4, r5, #5
    8fb8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8fba:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8fbe:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8fc0:	2d05      	cmp	r5, #5
    8fc2:	d947      	bls.n	9054 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8fc4:	f06f 0011 	mvn.w	r0, #17
    8fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8fca:	f1be 0f00 	cmp.w	lr, #0
    8fce:	db1b      	blt.n	9008 <_usb_d_dev_ep_init+0x64>
    8fd0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8fd4:	4e37      	ldr	r6, [pc, #220]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    8fd6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8fda:	2d00      	cmp	r5, #0
    8fdc:	d15e      	bne.n	909c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8fe2:	4d34      	ldr	r5, [pc, #208]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    8fe4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8fe8:	4d33      	ldr	r5, [pc, #204]	; (90b8 <_usb_d_dev_ep_init+0x114>)
    8fea:	00a6      	lsls	r6, r4, #2
    8fec:	1933      	adds	r3, r6, r4
    8fee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8ff2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8ff6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    8ffa:	3101      	adds	r1, #1
    8ffc:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    9000:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    9004:	2000      	movs	r0, #0
    9006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9008:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    900c:	4e29      	ldr	r6, [pc, #164]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    900e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9012:	686d      	ldr	r5, [r5, #4]
    9014:	b935      	cbnz	r5, 9024 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    901a:	4d26      	ldr	r5, [pc, #152]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    901c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9020:	685f      	ldr	r7, [r3, #4]
    9022:	e7e1      	b.n	8fe8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9024:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9028:	4e22      	ldr	r6, [pc, #136]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    902a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    902e:	896d      	ldrh	r5, [r5, #10]
    9030:	4295      	cmp	r5, r2
    9032:	daf0      	bge.n	9016 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    9034:	f06f 0012 	mvn.w	r0, #18
    9038:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    903a:	f06f 0013 	mvn.w	r0, #19
    903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    9040:	f06f 0013 	mvn.w	r0, #19
    9044:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    9046:	f06f 0012 	mvn.w	r0, #18
    904a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    904c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    9050:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9052:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    9054:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9058:	4f17      	ldr	r7, [pc, #92]	; (90b8 <_usb_d_dev_ep_init+0x114>)
    905a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    905e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    9062:	2eff      	cmp	r6, #255	; 0xff
    9064:	d1e9      	bne.n	903a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9066:	2900      	cmp	r1, #0
    9068:	d1af      	bne.n	8fca <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    906a:	b125      	cbz	r5, 9076 <_usb_d_dev_ep_init+0xd2>
    906c:	f1be 0f00 	cmp.w	lr, #0
    9070:	bfa4      	itt	ge
    9072:	3505      	addge	r5, #5
    9074:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    9076:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    907a:	4e0f      	ldr	r6, [pc, #60]	; (90b8 <_usb_d_dev_ep_init+0x114>)
    907c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9080:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9084:	2dff      	cmp	r5, #255	; 0xff
    9086:	d1db      	bne.n	9040 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9088:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    908c:	4e09      	ldr	r6, [pc, #36]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    908e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    9092:	2d00      	cmp	r5, #0
    9094:	d0d7      	beq.n	9046 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9096:	f1be 0f00 	cmp.w	lr, #0
    909a:	dbb5      	blt.n	9008 <_usb_d_dev_ep_init+0x64>
    909c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    90a0:	4e04      	ldr	r6, [pc, #16]	; (90b4 <_usb_d_dev_ep_init+0x110>)
    90a2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    90a6:	892d      	ldrh	r5, [r5, #8]
    90a8:	4295      	cmp	r5, r2
    90aa:	da98      	bge.n	8fde <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    90ac:	f06f 0012 	mvn.w	r0, #18
    90b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90b2:	bf00      	nop
    90b4:	0000dfa8 	.word	0x0000dfa8
    90b8:	200009a8 	.word	0x200009a8

000090bc <_usb_d_dev_ep_deinit>:
{
    90bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90be:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    90c0:	f010 060f 	ands.w	r6, r0, #15
    90c4:	d00e      	beq.n	90e4 <_usb_d_dev_ep_deinit+0x28>
    90c6:	2f00      	cmp	r7, #0
    90c8:	bfb4      	ite	lt
    90ca:	1d73      	addlt	r3, r6, #5
    90cc:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    90ce:	2e05      	cmp	r6, #5
    90d0:	d900      	bls.n	90d4 <_usb_d_dev_ep_deinit+0x18>
    90d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    90d4:	461d      	mov	r5, r3
    90d6:	3301      	adds	r3, #1
    90d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    90dc:	4a24      	ldr	r2, [pc, #144]	; (9170 <_usb_d_dev_ep_deinit+0xb4>)
    90de:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    90e2:	e002      	b.n	90ea <_usb_d_dev_ep_deinit+0x2e>
    90e4:	f8df e094 	ldr.w	lr, [pc, #148]	; 917c <_usb_d_dev_ep_deinit+0xc0>
    90e8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    90ea:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    90ee:	4a21      	ldr	r2, [pc, #132]	; (9174 <_usb_d_dev_ep_deinit+0xb8>)
    90f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    90f4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    90f8:	2aff      	cmp	r2, #255	; 0xff
    90fa:	d0ea      	beq.n	90d2 <_usb_d_dev_ep_deinit+0x16>
    90fc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    90fe:	2203      	movs	r2, #3
    9100:	0ff9      	lsrs	r1, r7, #31
    9102:	4670      	mov	r0, lr
    9104:	4b1c      	ldr	r3, [pc, #112]	; (9178 <_usb_d_dev_ep_deinit+0xbc>)
    9106:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9108:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    910c:	4a19      	ldr	r2, [pc, #100]	; (9174 <_usb_d_dev_ep_deinit+0xb8>)
    910e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9112:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9116:	f003 0307 	and.w	r3, r3, #7
    911a:	2b01      	cmp	r3, #1
    911c:	d016      	beq.n	914c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    911e:	2f00      	cmp	r7, #0
    9120:	db1b      	blt.n	915a <_usb_d_dev_ep_deinit+0x9e>
    9122:	0160      	lsls	r0, r4, #5
    9124:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9128:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    912c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    9130:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    9134:	4b0f      	ldr	r3, [pc, #60]	; (9174 <_usb_d_dev_ep_deinit+0xb8>)
    9136:	00aa      	lsls	r2, r5, #2
    9138:	1951      	adds	r1, r2, r5
    913a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    913e:	2000      	movs	r0, #0
    9140:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    9144:	22ff      	movs	r2, #255	; 0xff
    9146:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    914a:	e7c2      	b.n	90d2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    914c:	0160      	lsls	r0, r4, #5
    914e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9152:	2300      	movs	r3, #0
    9154:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    9158:	e7ec      	b.n	9134 <_usb_d_dev_ep_deinit+0x78>
    915a:	0176      	lsls	r6, r6, #5
    915c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9160:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    9164:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    9168:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    916c:	e7e2      	b.n	9134 <_usb_d_dev_ep_deinit+0x78>
    916e:	bf00      	nop
    9170:	20000a68 	.word	0x20000a68
    9174:	200009a8 	.word	0x200009a8
    9178:	00008655 	.word	0x00008655
    917c:	20000a7c 	.word	0x20000a7c

00009180 <_usb_d_dev_ep_enable>:
{
    9180:	b4f0      	push	{r4, r5, r6, r7}
    9182:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9184:	f010 000f 	ands.w	r0, r0, #15
    9188:	f000 80a7 	beq.w	92da <_usb_d_dev_ep_enable+0x15a>
    918c:	2e00      	cmp	r6, #0
    918e:	bfb4      	ite	lt
    9190:	1d43      	addlt	r3, r0, #5
    9192:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9194:	4605      	mov	r5, r0
    9196:	0142      	lsls	r2, r0, #5
    9198:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    919c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    91a0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    91a2:	2805      	cmp	r0, #5
    91a4:	f240 80a0 	bls.w	92e8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    91a8:	f06f 0011 	mvn.w	r0, #17
    91ac:	e07d      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    91ae:	f014 0f77 	tst.w	r4, #119	; 0x77
    91b2:	f040 8089 	bne.w	92c8 <_usb_d_dev_ep_enable+0x148>
    91b6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    91ba:	2111      	movs	r1, #17
    91bc:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    91c0:	4c9b      	ldr	r4, [pc, #620]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    91c2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    91c6:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    91ca:	4c9a      	ldr	r4, [pc, #616]	; (9434 <_usb_d_dev_ep_enable+0x2b4>)
    91cc:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    91d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    91d4:	f200 80cd 	bhi.w	9372 <_usb_d_dev_ep_enable+0x1f2>
    91d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    91dc:	f200 8112 	bhi.w	9404 <_usb_d_dev_ep_enable+0x284>
    91e0:	2980      	cmp	r1, #128	; 0x80
    91e2:	f200 8101 	bhi.w	93e8 <_usb_d_dev_ep_enable+0x268>
    91e6:	2940      	cmp	r1, #64	; 0x40
    91e8:	f200 8113 	bhi.w	9412 <_usb_d_dev_ep_enable+0x292>
    91ec:	2920      	cmp	r1, #32
    91ee:	f200 8102 	bhi.w	93f6 <_usb_d_dev_ep_enable+0x276>
    91f2:	2910      	cmp	r1, #16
    91f4:	f200 8114 	bhi.w	9420 <_usb_d_dev_ep_enable+0x2a0>
    91f8:	2908      	cmp	r1, #8
    91fa:	bf94      	ite	ls
    91fc:	2600      	movls	r6, #0
    91fe:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9200:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9204:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9206:	f3c1 010d 	ubfx	r1, r1, #0, #14
    920a:	e0b8      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    920c:	f014 0f70 	tst.w	r4, #112	; 0x70
    9210:	d15d      	bne.n	92ce <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9212:	4e87      	ldr	r6, [pc, #540]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    9214:	009f      	lsls	r7, r3, #2
    9216:	18f9      	adds	r1, r7, r3
    9218:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    921c:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    9220:	0109      	lsls	r1, r1, #4
    9222:	f001 0170 	and.w	r1, r1, #112	; 0x70
    9226:	430c      	orrs	r4, r1
    9228:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    922c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9230:	443b      	add	r3, r7
    9232:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9236:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    923a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    923e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9242:	d80f      	bhi.n	9264 <_usb_d_dev_ep_enable+0xe4>
    9244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9248:	d819      	bhi.n	927e <_usb_d_dev_ep_enable+0xfe>
    924a:	2b80      	cmp	r3, #128	; 0x80
    924c:	d819      	bhi.n	9282 <_usb_d_dev_ep_enable+0x102>
    924e:	2b40      	cmp	r3, #64	; 0x40
    9250:	d819      	bhi.n	9286 <_usb_d_dev_ep_enable+0x106>
    9252:	2b20      	cmp	r3, #32
    9254:	d819      	bhi.n	928a <_usb_d_dev_ep_enable+0x10a>
    9256:	2b10      	cmp	r3, #16
    9258:	d819      	bhi.n	928e <_usb_d_dev_ep_enable+0x10e>
    925a:	2b08      	cmp	r3, #8
    925c:	bf94      	ite	ls
    925e:	2300      	movls	r3, #0
    9260:	2301      	movhi	r3, #1
    9262:	e000      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    9264:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9266:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    926a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    926c:	2380      	movs	r3, #128	; 0x80
    926e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9272:	4b6f      	ldr	r3, [pc, #444]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    9274:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9278:	2000      	movs	r0, #0
    927a:	76a8      	strb	r0, [r5, #26]
    927c:	e015      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    927e:	2306      	movs	r3, #6
    9280:	e7f1      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    9282:	2305      	movs	r3, #5
    9284:	e7ef      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    9286:	2304      	movs	r3, #4
    9288:	e7ed      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    928a:	2303      	movs	r3, #3
    928c:	e7eb      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    928e:	2302      	movs	r3, #2
    9290:	e7e9      	b.n	9266 <_usb_d_dev_ep_enable+0xe6>
    9292:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9294:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9298:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    929a:	2340      	movs	r3, #64	; 0x40
    929c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    92a0:	4b63      	ldr	r3, [pc, #396]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    92a2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    92a6:	2000      	movs	r0, #0
    92a8:	72a8      	strb	r0, [r5, #10]
}
    92aa:	bcf0      	pop	{r4, r5, r6, r7}
    92ac:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    92ae:	2106      	movs	r1, #6
    92b0:	e7f0      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
    92b2:	2105      	movs	r1, #5
    92b4:	e7ee      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
    92b6:	2104      	movs	r1, #4
    92b8:	e7ec      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
    92ba:	2103      	movs	r1, #3
    92bc:	e7ea      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
    92be:	2102      	movs	r1, #2
    92c0:	e7e8      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    92c2:	f06f 0011 	mvn.w	r0, #17
    92c6:	e7f0      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    92c8:	f06f 0013 	mvn.w	r0, #19
    92cc:	e7ed      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    92ce:	f06f 0013 	mvn.w	r0, #19
    92d2:	e7ea      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    92d4:	f06f 0013 	mvn.w	r0, #19
    92d8:	e7e7      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    92da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    92de:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    92e2:	b2e4      	uxtb	r4, r4
    92e4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    92e6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    92e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    92ec:	4950      	ldr	r1, [pc, #320]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    92ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    92f2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    92f6:	2aff      	cmp	r2, #255	; 0xff
    92f8:	d0e3      	beq.n	92c2 <_usb_d_dev_ep_enable+0x142>
    92fa:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    92fc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    92fe:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    9302:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    9306:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    930a:	f001 0107 	and.w	r1, r1, #7
    930e:	2901      	cmp	r1, #1
    9310:	f43f af4d 	beq.w	91ae <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    9314:	2e00      	cmp	r6, #0
    9316:	f6ff af79 	blt.w	920c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    931a:	f014 0f07 	tst.w	r4, #7
    931e:	d1d9      	bne.n	92d4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9320:	4e43      	ldr	r6, [pc, #268]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    9322:	009f      	lsls	r7, r3, #2
    9324:	18f9      	adds	r1, r7, r3
    9326:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    932a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    932e:	f001 0107 	and.w	r1, r1, #7
    9332:	430c      	orrs	r4, r1
    9334:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9338:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    933c:	443b      	add	r3, r7
    933e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9342:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    9346:	4b3b      	ldr	r3, [pc, #236]	; (9434 <_usb_d_dev_ep_enable+0x2b4>)
    9348:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    934c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9350:	d89f      	bhi.n	9292 <_usb_d_dev_ep_enable+0x112>
    9352:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9356:	d8aa      	bhi.n	92ae <_usb_d_dev_ep_enable+0x12e>
    9358:	2980      	cmp	r1, #128	; 0x80
    935a:	d8aa      	bhi.n	92b2 <_usb_d_dev_ep_enable+0x132>
    935c:	2940      	cmp	r1, #64	; 0x40
    935e:	d8aa      	bhi.n	92b6 <_usb_d_dev_ep_enable+0x136>
    9360:	2920      	cmp	r1, #32
    9362:	d8aa      	bhi.n	92ba <_usb_d_dev_ep_enable+0x13a>
    9364:	2910      	cmp	r1, #16
    9366:	d8aa      	bhi.n	92be <_usb_d_dev_ep_enable+0x13e>
    9368:	2908      	cmp	r1, #8
    936a:	bf94      	ite	ls
    936c:	2100      	movls	r1, #0
    936e:	2101      	movhi	r1, #1
    9370:	e790      	b.n	9294 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9372:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9376:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9378:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    937c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    937e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    9382:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9384:	2640      	movs	r6, #64	; 0x40
    9386:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    938a:	2180      	movs	r1, #128	; 0x80
    938c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9390:	4f27      	ldr	r7, [pc, #156]	; (9430 <_usb_d_dev_ep_enable+0x2b0>)
    9392:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9396:	2000      	movs	r0, #0
    9398:	72a8      	strb	r0, [r5, #10]
    939a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    939c:	009c      	lsls	r4, r3, #2
    939e:	18e1      	adds	r1, r4, r3
    93a0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    93a4:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    93a8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    93ac:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    93b0:	0152      	lsls	r2, r2, #5
    93b2:	18b9      	adds	r1, r7, r2
    93b4:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    93b6:	4423      	add	r3, r4
    93b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    93bc:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    93c0:	684b      	ldr	r3, [r1, #4]
    93c2:	f364 339b 	bfi	r3, r4, #14, #14
    93c6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    93c8:	684b      	ldr	r3, [r1, #4]
    93ca:	f360 030d 	bfi	r3, r0, #0, #14
    93ce:	604b      	str	r3, [r1, #4]
    93d0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    93d4:	21b0      	movs	r1, #176	; 0xb0
    93d6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    93da:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    93de:	461a      	mov	r2, r3
    93e0:	2310      	movs	r3, #16
    93e2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    93e6:	e760      	b.n	92aa <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93e8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93ec:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93ee:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93f2:	2605      	movs	r6, #5
    93f4:	e7c3      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93f6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93fa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93fc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9400:	2603      	movs	r6, #3
    9402:	e7bc      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9404:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9408:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    940a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    940e:	2606      	movs	r6, #6
    9410:	e7b5      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9412:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9416:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9418:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    941c:	2604      	movs	r6, #4
    941e:	e7ae      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9420:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9424:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9426:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    942a:	2602      	movs	r6, #2
    942c:	e7a7      	b.n	937e <_usb_d_dev_ep_enable+0x1fe>
    942e:	bf00      	nop
    9430:	200009a8 	.word	0x200009a8
    9434:	0fffc000 	.word	0x0fffc000

00009438 <_usb_d_dev_ep_stall>:
{
    9438:	b470      	push	{r4, r5, r6}
    943a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    943c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    943e:	f010 000f 	ands.w	r0, r0, #15
    9442:	d008      	beq.n	9456 <_usb_d_dev_ep_stall+0x1e>
    9444:	2b00      	cmp	r3, #0
    9446:	bfb4      	ite	lt
    9448:	1d43      	addlt	r3, r0, #5
    944a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    944c:	2805      	cmp	r0, #5
    944e:	d903      	bls.n	9458 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    9450:	f06f 0011 	mvn.w	r0, #17
    9454:	e018      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9456:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9458:	2901      	cmp	r1, #1
    945a:	d017      	beq.n	948c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    945c:	2900      	cmp	r1, #0
    945e:	d03a      	beq.n	94d6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9460:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9464:	4a45      	ldr	r2, [pc, #276]	; (957c <_usb_d_dev_ep_stall+0x144>)
    9466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    946a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    946e:	f003 030f 	and.w	r3, r3, #15
    9472:	015b      	lsls	r3, r3, #5
    9474:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9478:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    947c:	2310      	movs	r3, #16
    947e:	40a3      	lsls	r3, r4
    9480:	421a      	tst	r2, r3
    9482:	bf14      	ite	ne
    9484:	2001      	movne	r0, #1
    9486:	2000      	moveq	r0, #0
}
    9488:	bc70      	pop	{r4, r5, r6}
    948a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    948c:	2510      	movs	r5, #16
    948e:	40a5      	lsls	r5, r4
    9490:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9492:	493a      	ldr	r1, [pc, #232]	; (957c <_usb_d_dev_ep_stall+0x144>)
    9494:	009e      	lsls	r6, r3, #2
    9496:	18f2      	adds	r2, r6, r3
    9498:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    949c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    94a0:	f002 020f 	and.w	r2, r2, #15
    94a4:	0150      	lsls	r0, r2, #5
    94a6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    94aa:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    94ae:	2020      	movs	r0, #32
    94b0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    94b4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    94b6:	0152      	lsls	r2, r2, #5
    94b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    94bc:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    94c0:	4433      	add	r3, r6
    94c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    94c6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    94ca:	f042 0208 	orr.w	r2, r2, #8
    94ce:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    94d2:	2000      	movs	r0, #0
    94d4:	e7d8      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    94d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    94da:	4928      	ldr	r1, [pc, #160]	; (957c <_usb_d_dev_ep_stall+0x144>)
    94dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    94e0:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    94e4:	f002 020f 	and.w	r2, r2, #15
    94e8:	0151      	lsls	r1, r2, #5
    94ea:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    94ee:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    94f2:	2010      	movs	r0, #16
    94f4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    94f6:	4205      	tst	r5, r0
    94f8:	d03c      	beq.n	9574 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    94fa:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    94fc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9500:	2020      	movs	r0, #32
    9502:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9504:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9506:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    950a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    950e:	4202      	tst	r2, r0
    9510:	d007      	beq.n	9522 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9512:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9516:	2201      	movs	r2, #1
    9518:	fa02 f404 	lsl.w	r4, r2, r4
    951c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    951e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9522:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9526:	4815      	ldr	r0, [pc, #84]	; (957c <_usb_d_dev_ep_stall+0x144>)
    9528:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    952c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    9530:	f002 0207 	and.w	r2, r2, #7
    9534:	2a01      	cmp	r2, #1
    9536:	d00c      	beq.n	9552 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9538:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    953c:	4a0f      	ldr	r2, [pc, #60]	; (957c <_usb_d_dev_ep_stall+0x144>)
    953e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9542:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9546:	f36f 02c3 	bfc	r2, #3, #1
    954a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    954e:	2000      	movs	r0, #0
    9550:	e79a      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9552:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9556:	f012 0f30 	tst.w	r2, #48	; 0x30
    955a:	d10d      	bne.n	9578 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    955c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9560:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9564:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9568:	f36f 02c3 	bfc	r2, #3, #1
    956c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9570:	2000      	movs	r0, #0
    9572:	e789      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
    9574:	2000      	movs	r0, #0
    9576:	e787      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
    9578:	2000      	movs	r0, #0
    957a:	e785      	b.n	9488 <_usb_d_dev_ep_stall+0x50>
    957c:	200009a8 	.word	0x200009a8

00009580 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9580:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9582:	f000 040f 	and.w	r4, r0, #15
    9586:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9588:	4a14      	ldr	r2, [pc, #80]	; (95dc <_usb_d_dev_ep_read_req+0x5c>)
    958a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    958c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    958e:	6840      	ldr	r0, [r0, #4]
    9590:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9594:	2c05      	cmp	r4, #5
    9596:	d817      	bhi.n	95c8 <_usb_d_dev_ep_read_req+0x48>
    9598:	b1c9      	cbz	r1, 95ce <_usb_d_dev_ep_read_req+0x4e>
    959a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    959e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    95a2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    95a4:	2a11      	cmp	r2, #17
    95a6:	d115      	bne.n	95d4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    95a8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    95ac:	f012 0f10 	tst.w	r2, #16
    95b0:	d102      	bne.n	95b8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    95b2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    95b4:	bc30      	pop	{r4, r5}
    95b6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    95b8:	682c      	ldr	r4, [r5, #0]
    95ba:	686a      	ldr	r2, [r5, #4]
    95bc:	600c      	str	r4, [r1, #0]
    95be:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    95c0:	2210      	movs	r2, #16
    95c2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    95c6:	e7f5      	b.n	95b4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    95c8:	f06f 0011 	mvn.w	r0, #17
    95cc:	e7f2      	b.n	95b4 <_usb_d_dev_ep_read_req+0x34>
    95ce:	f06f 0011 	mvn.w	r0, #17
    95d2:	e7ef      	b.n	95b4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    95d4:	f06f 0012 	mvn.w	r0, #18
    95d8:	e7ec      	b.n	95b4 <_usb_d_dev_ep_read_req+0x34>
    95da:	bf00      	nop
    95dc:	200009a8 	.word	0x200009a8

000095e0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    95e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    95e6:	7a03      	ldrb	r3, [r0, #8]
    95e8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    95ea:	f013 030f 	ands.w	r3, r3, #15
    95ee:	f000 80c2 	beq.w	9776 <_usb_d_dev_ep_trans+0x196>
    95f2:	2e00      	cmp	r6, #0
    95f4:	bfb4      	ite	lt
    95f6:	1d5a      	addlt	r2, r3, #5
    95f8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    95fa:	4614      	mov	r4, r2
    95fc:	4969      	ldr	r1, [pc, #420]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    95fe:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    9602:	1c55      	adds	r5, r2, #1
    9604:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9608:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    960c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9610:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9614:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9618:	f240 31ff 	movw	r1, #1023	; 0x3ff
    961c:	428a      	cmp	r2, r1
    961e:	d025      	beq.n	966c <_usb_d_dev_ep_trans+0x8c>
    9620:	1e55      	subs	r5, r2, #1
    9622:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9624:	6841      	ldr	r1, [r0, #4]
    9626:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9628:	2b05      	cmp	r3, #5
    962a:	f200 8092 	bhi.w	9752 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    962e:	6803      	ldr	r3, [r0, #0]
    9630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9634:	d31c      	bcc.n	9670 <_usb_d_dev_ep_trans+0x90>
    9636:	eb03 0c01 	add.w	ip, r3, r1
    963a:	f8df e180 	ldr.w	lr, [pc, #384]	; 97bc <_usb_d_dev_ep_trans+0x1dc>
    963e:	45f4      	cmp	ip, lr
    9640:	d816      	bhi.n	9670 <_usb_d_dev_ep_trans+0x90>
    9642:	f013 0f03 	tst.w	r3, #3
    9646:	d113      	bne.n	9670 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9648:	2e00      	cmp	r6, #0
    964a:	db2a      	blt.n	96a2 <_usb_d_dev_ep_trans+0xc2>
    964c:	428a      	cmp	r2, r1
    964e:	f200 809c 	bhi.w	978a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9652:	b34d      	cbz	r5, 96a8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9654:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9658:	4a52      	ldr	r2, [pc, #328]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    965a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    965e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9662:	2b00      	cmp	r3, #0
    9664:	d07b      	beq.n	975e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9666:	f04f 0800 	mov.w	r8, #0
    966a:	e00c      	b.n	9686 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    966c:	4615      	mov	r5, r2
    966e:	e7d9      	b.n	9624 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9670:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9674:	4a4b      	ldr	r2, [pc, #300]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    9676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    967a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    967e:	2b00      	cmp	r3, #0
    9680:	d06a      	beq.n	9758 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9682:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9686:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    968a:	4a46      	ldr	r2, [pc, #280]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    968c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9690:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9694:	f013 0f08 	tst.w	r3, #8
    9698:	d009      	beq.n	96ae <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    969a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    969c:	b003      	add	sp, #12
    969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    96a2:	f04f 0800 	mov.w	r8, #0
    96a6:	e7ee      	b.n	9686 <_usb_d_dev_ep_trans+0xa6>
    96a8:	f04f 0800 	mov.w	r8, #0
    96ac:	e7eb      	b.n	9686 <_usb_d_dev_ep_trans+0xa6>
    96ae:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    96b0:	a801      	add	r0, sp, #4
    96b2:	4b3d      	ldr	r3, [pc, #244]	; (97a8 <_usb_d_dev_ep_trans+0x1c8>)
    96b4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    96b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    96ba:	4a3a      	ldr	r2, [pc, #232]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    96bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    96c0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    96c4:	f013 0f40 	tst.w	r3, #64	; 0x40
    96c8:	d13c      	bne.n	9744 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    96ca:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    96ce:	4b35      	ldr	r3, [pc, #212]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    96d0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    96d4:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    96d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    96dc:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    96e0:	a801      	add	r0, sp, #4
    96e2:	4b32      	ldr	r3, [pc, #200]	; (97ac <_usb_d_dev_ep_trans+0x1cc>)
    96e4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    96e6:	f8da 3000 	ldr.w	r3, [sl]
    96ea:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    96ee:	f8da 3004 	ldr.w	r3, [sl, #4]
    96f2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    96f6:	2300      	movs	r3, #0
    96f8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    96fc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    96fe:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9702:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    9706:	f368 1345 	bfi	r3, r8, #5, #1
    970a:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    970e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    9712:	b1e3      	cbz	r3, 974e <_usb_d_dev_ep_trans+0x16e>
    9714:	fab5 f585 	clz	r5, r5
    9718:	096d      	lsrs	r5, r5, #5
    971a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    971e:	4b21      	ldr	r3, [pc, #132]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    9720:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9724:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9728:	f365 1304 	bfi	r3, r5, #4, #1
    972c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9730:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    9732:	f04f 0100 	mov.w	r1, #0
    9736:	4638      	mov	r0, r7
    9738:	bfb4      	ite	lt
    973a:	4b1d      	ldrlt	r3, [pc, #116]	; (97b0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    973c:	4b1d      	ldrge	r3, [pc, #116]	; (97b4 <_usb_d_dev_ep_trans+0x1d4>)
    973e:	4798      	blx	r3
	return ERR_NONE;
    9740:	2000      	movs	r0, #0
    9742:	e7ab      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9744:	a801      	add	r0, sp, #4
    9746:	4b19      	ldr	r3, [pc, #100]	; (97ac <_usb_d_dev_ep_trans+0x1cc>)
    9748:	4798      	blx	r3
		return USB_BUSY;
    974a:	2001      	movs	r0, #1
    974c:	e7a6      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
    974e:	2500      	movs	r5, #0
    9750:	e7e3      	b.n	971a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9752:	f06f 0011 	mvn.w	r0, #17
    9756:	e7a1      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9758:	f06f 0012 	mvn.w	r0, #18
    975c:	e79e      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    975e:	f06f 0011 	mvn.w	r0, #17
    9762:	e79b      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9764:	f06f 0012 	mvn.w	r0, #18
    9768:	e798      	b.n	969c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    976a:	6841      	ldr	r1, [r0, #4]
    976c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9770:	4f11      	ldr	r7, [pc, #68]	; (97b8 <_usb_d_dev_ep_trans+0x1d8>)
    9772:	2400      	movs	r4, #0
    9774:	e75b      	b.n	962e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9776:	4a0b      	ldr	r2, [pc, #44]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    9778:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    977c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9780:	428a      	cmp	r2, r1
    9782:	d0f2      	beq.n	976a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9784:	4f0c      	ldr	r7, [pc, #48]	; (97b8 <_usb_d_dev_ep_trans+0x1d8>)
    9786:	2400      	movs	r4, #0
    9788:	e74a      	b.n	9620 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    978a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    978e:	4a05      	ldr	r2, [pc, #20]	; (97a4 <_usb_d_dev_ep_trans+0x1c4>)
    9790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9798:	2b00      	cmp	r3, #0
    979a:	d0e3      	beq.n	9764 <_usb_d_dev_ep_trans+0x184>
    979c:	f04f 0801 	mov.w	r8, #1
    97a0:	e771      	b.n	9686 <_usb_d_dev_ep_trans+0xa6>
    97a2:	bf00      	nop
    97a4:	200009a8 	.word	0x200009a8
    97a8:	000049b9 	.word	0x000049b9
    97ac:	000049c7 	.word	0x000049c7
    97b0:	00008805 	.word	0x00008805
    97b4:	00008989 	.word	0x00008989
    97b8:	20000a7c 	.word	0x20000a7c
    97bc:	20041fff 	.word	0x20041fff

000097c0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    97c0:	4b07      	ldr	r3, [pc, #28]	; (97e0 <_usb_d_dev_register_callback+0x20>)
    97c2:	2900      	cmp	r1, #0
    97c4:	bf08      	it	eq
    97c6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    97c8:	2801      	cmp	r0, #1
    97ca:	d004      	beq.n	97d6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    97cc:	b910      	cbnz	r0, 97d4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    97ce:	4b05      	ldr	r3, [pc, #20]	; (97e4 <_usb_d_dev_register_callback+0x24>)
    97d0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    97d4:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    97d6:	4b03      	ldr	r3, [pc, #12]	; (97e4 <_usb_d_dev_register_callback+0x24>)
    97d8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    97dc:	4770      	bx	lr
    97de:	bf00      	nop
    97e0:	00008575 	.word	0x00008575
    97e4:	200009a8 	.word	0x200009a8

000097e8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    97e8:	4b0a      	ldr	r3, [pc, #40]	; (9814 <_usb_d_dev_register_ep_callback+0x2c>)
    97ea:	2900      	cmp	r1, #0
    97ec:	bf08      	it	eq
    97ee:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    97f0:	4603      	mov	r3, r0
    97f2:	b138      	cbz	r0, 9804 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    97f4:	2801      	cmp	r0, #1
    97f6:	d009      	beq.n	980c <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    97f8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    97fa:	bf04      	itt	eq
    97fc:	4b06      	ldreq	r3, [pc, #24]	; (9818 <_usb_d_dev_register_ep_callback+0x30>)
    97fe:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    9802:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9804:	4b04      	ldr	r3, [pc, #16]	; (9818 <_usb_d_dev_register_ep_callback+0x30>)
    9806:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    980a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    980c:	4b02      	ldr	r3, [pc, #8]	; (9818 <_usb_d_dev_register_ep_callback+0x30>)
    980e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    9812:	4770      	bx	lr
    9814:	00008575 	.word	0x00008575
    9818:	200009a8 	.word	0x200009a8

0000981c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    981c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    981e:	4b01      	ldr	r3, [pc, #4]	; (9824 <USB_0_Handler+0x8>)
    9820:	4798      	blx	r3
    9822:	bd08      	pop	{r3, pc}
    9824:	00008b79 	.word	0x00008b79

00009828 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9828:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    982a:	4b01      	ldr	r3, [pc, #4]	; (9830 <USB_1_Handler+0x8>)
    982c:	4798      	blx	r3
    982e:	bd08      	pop	{r3, pc}
    9830:	00008b79 	.word	0x00008b79

00009834 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9834:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9836:	4b01      	ldr	r3, [pc, #4]	; (983c <USB_2_Handler+0x8>)
    9838:	4798      	blx	r3
    983a:	bd08      	pop	{r3, pc}
    983c:	00008b79 	.word	0x00008b79

00009840 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9840:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9842:	4b01      	ldr	r3, [pc, #4]	; (9848 <USB_3_Handler+0x8>)
    9844:	4798      	blx	r3
    9846:	bd08      	pop	{r3, pc}
    9848:	00008b79 	.word	0x00008b79

0000984c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    984c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    984e:	4604      	mov	r4, r0
    9850:	b340      	cbz	r0, 98a4 <_wdt_init+0x58>
    9852:	6800      	ldr	r0, [r0, #0]
    9854:	3000      	adds	r0, #0
    9856:	bf18      	it	ne
    9858:	2001      	movne	r0, #1
    985a:	2250      	movs	r2, #80	; 0x50
    985c:	4915      	ldr	r1, [pc, #84]	; (98b4 <_wdt_init+0x68>)
    985e:	4b16      	ldr	r3, [pc, #88]	; (98b8 <_wdt_init+0x6c>)
    9860:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9862:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9864:	689a      	ldr	r2, [r3, #8]
    9866:	f012 0f0e 	tst.w	r2, #14
    986a:	d1fb      	bne.n	9864 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    986c:	781a      	ldrb	r2, [r3, #0]
    986e:	09d2      	lsrs	r2, r2, #7
    9870:	d11a      	bne.n	98a8 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9872:	689a      	ldr	r2, [r3, #8]
    9874:	f012 0f0e 	tst.w	r2, #14
    9878:	d1fb      	bne.n	9872 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    987a:	781a      	ldrb	r2, [r3, #0]
    987c:	f012 0f02 	tst.w	r2, #2
    9880:	d115      	bne.n	98ae <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9882:	781a      	ldrb	r2, [r3, #0]
    9884:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9888:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    988a:	689a      	ldr	r2, [r3, #8]
    988c:	f012 0f0e 	tst.w	r2, #14
    9890:	d1fb      	bne.n	988a <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9892:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9894:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    989a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    989e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    98a0:	2000      	movs	r0, #0
    98a2:	bd10      	pop	{r4, pc}
    98a4:	2000      	movs	r0, #0
    98a6:	e7d8      	b.n	985a <_wdt_init+0xe>
		return ERR_DENIED;
    98a8:	f06f 0010 	mvn.w	r0, #16
    98ac:	bd10      	pop	{r4, pc}
    98ae:	f06f 0010 	mvn.w	r0, #16
}
    98b2:	bd10      	pop	{r4, pc}
    98b4:	0000dff0 	.word	0x0000dff0
    98b8:	00005dad 	.word	0x00005dad

000098bc <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    98bc:	2201      	movs	r2, #1
    98be:	4b01      	ldr	r3, [pc, #4]	; (98c4 <RTC_Scheduler_report_cb+0x8>)
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	4770      	bx	lr
    98c4:	20000d68 	.word	0x20000d68

000098c8 <RTC_Scheduler_heartbeat_cb>:
{
    98c8:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    98ca:	2100      	movs	r1, #0
    98cc:	4801      	ldr	r0, [pc, #4]	; (98d4 <RTC_Scheduler_heartbeat_cb+0xc>)
    98ce:	4b02      	ldr	r3, [pc, #8]	; (98d8 <RTC_Scheduler_heartbeat_cb+0x10>)
    98d0:	4798      	blx	r3
    98d2:	bd08      	pop	{r3, pc}
    98d4:	20001d20 	.word	0x20001d20
    98d8:	00004165 	.word	0x00004165

000098dc <RTC_Scheduler_ping_cb>:
{
    98dc:	b508      	push	{r3, lr}
	pingflag++;
    98de:	4a11      	ldr	r2, [pc, #68]	; (9924 <RTC_Scheduler_ping_cb+0x48>)
    98e0:	7853      	ldrb	r3, [r2, #1]
    98e2:	3301      	adds	r3, #1
    98e4:	b2db      	uxtb	r3, r3
    98e6:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    98e8:	7853      	ldrb	r3, [r2, #1]
    98ea:	f003 0303 	and.w	r3, r3, #3
    98ee:	2b03      	cmp	r3, #3
    98f0:	d816      	bhi.n	9920 <RTC_Scheduler_ping_cb+0x44>
    98f2:	e8df f003 	tbb	[pc, r3]
    98f6:	0702      	.short	0x0702
    98f8:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    98fa:	2101      	movs	r1, #1
    98fc:	480a      	ldr	r0, [pc, #40]	; (9928 <RTC_Scheduler_ping_cb+0x4c>)
    98fe:	4b0b      	ldr	r3, [pc, #44]	; (992c <RTC_Scheduler_ping_cb+0x50>)
    9900:	4798      	blx	r3
			break;
    9902:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    9904:	2102      	movs	r1, #2
    9906:	4808      	ldr	r0, [pc, #32]	; (9928 <RTC_Scheduler_ping_cb+0x4c>)
    9908:	4b08      	ldr	r3, [pc, #32]	; (992c <RTC_Scheduler_ping_cb+0x50>)
    990a:	4798      	blx	r3
			break;
    990c:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    990e:	2103      	movs	r1, #3
    9910:	4805      	ldr	r0, [pc, #20]	; (9928 <RTC_Scheduler_ping_cb+0x4c>)
    9912:	4b06      	ldr	r3, [pc, #24]	; (992c <RTC_Scheduler_ping_cb+0x50>)
    9914:	4798      	blx	r3
			break;
    9916:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    9918:	2104      	movs	r1, #4
    991a:	4803      	ldr	r0, [pc, #12]	; (9928 <RTC_Scheduler_ping_cb+0x4c>)
    991c:	4b03      	ldr	r3, [pc, #12]	; (992c <RTC_Scheduler_ping_cb+0x50>)
    991e:	4798      	blx	r3
    9920:	bd08      	pop	{r3, pc}
    9922:	bf00      	nop
    9924:	20000d68 	.word	0x20000d68
    9928:	20001d20 	.word	0x20001d20
    992c:	00004165 	.word	0x00004165

00009930 <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    9930:	7843      	ldrb	r3, [r0, #1]
    9932:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    9936:	6843      	ldr	r3, [r0, #4]
    9938:	3301      	adds	r3, #1
    993a:	6043      	str	r3, [r0, #4]
    993c:	4770      	bx	lr
	...

00009940 <RTC_Scheduler_realtime_cb>:
{
    9940:	b510      	push	{r4, lr}
    9942:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    9944:	481b      	ldr	r0, [pc, #108]	; (99b4 <RTC_Scheduler_realtime_cb+0x74>)
    9946:	4b1c      	ldr	r3, [pc, #112]	; (99b8 <RTC_Scheduler_realtime_cb+0x78>)
    9948:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    994a:	481c      	ldr	r0, [pc, #112]	; (99bc <RTC_Scheduler_realtime_cb+0x7c>)
    994c:	4b1c      	ldr	r3, [pc, #112]	; (99c0 <RTC_Scheduler_realtime_cb+0x80>)
    994e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    9950:	a801      	add	r0, sp, #4
    9952:	4b1c      	ldr	r3, [pc, #112]	; (99c4 <RTC_Scheduler_realtime_cb+0x84>)
    9954:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9956:	4b1c      	ldr	r3, [pc, #112]	; (99c8 <RTC_Scheduler_realtime_cb+0x88>)
    9958:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    995c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9960:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9964:	4054      	eors	r4, r2
    9966:	400c      	ands	r4, r1
    9968:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    996a:	a801      	add	r0, sp, #4
    996c:	4b17      	ldr	r3, [pc, #92]	; (99cc <RTC_Scheduler_realtime_cb+0x8c>)
    996e:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    9970:	4b17      	ldr	r3, [pc, #92]	; (99d0 <RTC_Scheduler_realtime_cb+0x90>)
    9972:	685b      	ldr	r3, [r3, #4]
    9974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9976:	781a      	ldrb	r2, [r3, #0]
    9978:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    997c:	4294      	cmp	r4, r2
    997e:	d002      	beq.n	9986 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    9980:	b91a      	cbnz	r2, 998a <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    9982:	2201      	movs	r2, #1
    9984:	701a      	strb	r2, [r3, #0]
}
    9986:	b002      	add	sp, #8
    9988:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    998a:	2200      	movs	r2, #0
    998c:	701a      	strb	r2, [r3, #0]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    998e:	4b09      	ldr	r3, [pc, #36]	; (99b4 <RTC_Scheduler_realtime_cb+0x74>)
    9990:	7a5a      	ldrb	r2, [r3, #9]
    9992:	3201      	adds	r2, #1
    9994:	f002 0201 	and.w	r2, r2, #1
    9998:	4c0d      	ldr	r4, [pc, #52]	; (99d0 <RTC_Scheduler_realtime_cb+0x90>)
    999a:	6863      	ldr	r3, [r4, #4]
    999c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    999e:	bf48      	it	mi
    99a0:	4252      	negmi	r2, r2
    99a2:	2102      	movs	r1, #2
    99a4:	3007      	adds	r0, #7
    99a6:	4b0b      	ldr	r3, [pc, #44]	; (99d4 <RTC_Scheduler_realtime_cb+0x94>)
    99a8:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    99aa:	2105      	movs	r1, #5
    99ac:	4620      	mov	r0, r4
    99ae:	4b0a      	ldr	r3, [pc, #40]	; (99d8 <RTC_Scheduler_realtime_cb+0x98>)
    99b0:	4798      	blx	r3
}
    99b2:	e7e8      	b.n	9986 <RTC_Scheduler_realtime_cb+0x46>
    99b4:	20001d30 	.word	0x20001d30
    99b8:	00003973 	.word	0x00003973
    99bc:	20003c18 	.word	0x20003c18
    99c0:	00009931 	.word	0x00009931
    99c4:	000049b9 	.word	0x000049b9
    99c8:	41008000 	.word	0x41008000
    99cc:	000049c7 	.word	0x000049c7
    99d0:	20001d20 	.word	0x20001d20
    99d4:	00003a61 	.word	0x00003a61
    99d8:	00004165 	.word	0x00004165

000099dc <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    99dc:	1d03      	adds	r3, r0, #4
    99de:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    99e0:	2200      	movs	r2, #0
    99e2:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    99e6:	4283      	cmp	r3, r0
    99e8:	d1fb      	bne.n	99e2 <grid_task_timer_reset+0x6>
}
    99ea:	4770      	bx	lr

000099ec <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    99ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99ee:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    99f0:	6880      	ldr	r0, [r0, #8]
    99f2:	4b18      	ldr	r3, [pc, #96]	; (9a54 <grid_port_reset_receiver+0x68>)
    99f4:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    99f6:	2500      	movs	r5, #0
    99f8:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    99fa:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    99fc:	f884 5517 	strb.w	r5, [r4, #1303]	; 0x517
	struct grid_ui_report* stored_report = por->ping_report;
    9a00:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    9a02:	6870      	ldr	r0, [r6, #4]
    9a04:	22ff      	movs	r2, #255	; 0xff
    9a06:	2102      	movs	r1, #2
    9a08:	3008      	adds	r0, #8
    9a0a:	4f13      	ldr	r7, [pc, #76]	; (9a58 <grid_port_reset_receiver+0x6c>)
    9a0c:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    9a0e:	6870      	ldr	r0, [r6, #4]
    9a10:	22ff      	movs	r2, #255	; 0xff
    9a12:	2102      	movs	r1, #2
    9a14:	3006      	adds	r0, #6
    9a16:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9a18:	6877      	ldr	r7, [r6, #4]
    9a1a:	78b6      	ldrb	r6, [r6, #2]
    9a1c:	4631      	mov	r1, r6
    9a1e:	4638      	mov	r0, r7
    9a20:	4b0e      	ldr	r3, [pc, #56]	; (9a5c <grid_port_reset_receiver+0x70>)
    9a22:	4798      	blx	r3
    9a24:	4602      	mov	r2, r0
    9a26:	4631      	mov	r1, r6
    9a28:	4638      	mov	r0, r7
    9a2a:	4b0d      	ldr	r3, [pc, #52]	; (9a60 <grid_port_reset_receiver+0x74>)
    9a2c:	4798      	blx	r3
	por->rx_double_buffer_timeout = 0;
    9a2e:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    9a30:	4620      	mov	r0, r4
    9a32:	4b0c      	ldr	r3, [pc, #48]	; (9a64 <grid_port_reset_receiver+0x78>)
    9a34:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    9a36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9a38:	f44f 7316 	mov.w	r3, #600	; 0x258
    9a3c:	3b01      	subs	r3, #1
    9a3e:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    9a40:	2b00      	cmp	r3, #0
    9a42:	d1fb      	bne.n	9a3c <grid_port_reset_receiver+0x50>
    9a44:	18a3      	adds	r3, r4, r2
    9a46:	2200      	movs	r2, #0
    9a48:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
	usart_async_enable(por->usart);
    9a4c:	68a0      	ldr	r0, [r4, #8]
    9a4e:	4b06      	ldr	r3, [pc, #24]	; (9a68 <grid_port_reset_receiver+0x7c>)
    9a50:	4798      	blx	r3
    9a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a54:	000055c1 	.word	0x000055c1
    9a58:	00003a61 	.word	0x00003a61
    9a5c:	00003ce1 	.word	0x00003ce1
    9a60:	00003d1d 	.word	0x00003d1d
    9a64:	00003691 	.word	0x00003691
    9a68:	00005595 	.word	0x00005595

00009a6c <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9a6e:	2b00      	cmp	r3, #0
    9a70:	f040 80a0 	bne.w	9bb4 <grid_port_receive_task+0x148>
void grid_port_receive_task(struct grid_port* por){
    9a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a78:	b082      	sub	sp, #8
    9a7a:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    9a7c:	6a03      	ldr	r3, [r0, #32]
    9a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9a82:	d926      	bls.n	9ad2 <grid_port_receive_task+0x66>
		if (por->partner_status == 1){
    9a84:	f890 3517 	ldrb.w	r3, [r0, #1303]	; 0x517
    9a88:	2b01      	cmp	r3, #1
    9a8a:	d011      	beq.n	9ab0 <grid_port_receive_task+0x44>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    9a8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    9a8e:	b90b      	cbnz	r3, 9a94 <grid_port_receive_task+0x28>
    9a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9a92:	b303      	cbz	r3, 9ad6 <grid_port_receive_task+0x6a>
				grid_port_reset_receiver(por);
    9a94:	4620      	mov	r0, r4
    9a96:	4b48      	ldr	r3, [pc, #288]	; (9bb8 <grid_port_receive_task+0x14c>)
    9a98:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9a9a:	23c8      	movs	r3, #200	; 0xc8
    9a9c:	9301      	str	r3, [sp, #4]
    9a9e:	2302      	movs	r3, #2
    9aa0:	9300      	str	r3, [sp, #0]
    9aa2:	23ff      	movs	r3, #255	; 0xff
    9aa4:	461a      	mov	r2, r3
    9aa6:	4619      	mov	r1, r3
    9aa8:	4844      	ldr	r0, [pc, #272]	; (9bbc <grid_port_receive_task+0x150>)
    9aaa:	4d45      	ldr	r5, [pc, #276]	; (9bc0 <grid_port_receive_task+0x154>)
    9aac:	47a8      	blx	r5
    9aae:	e012      	b.n	9ad6 <grid_port_receive_task+0x6a>
			printf("{\"type\":\"ERROR\", \"data\": [\"Timeout: Disconnect\"]}\r\n");
    9ab0:	4844      	ldr	r0, [pc, #272]	; (9bc4 <grid_port_receive_task+0x158>)
    9ab2:	4b45      	ldr	r3, [pc, #276]	; (9bc8 <grid_port_receive_task+0x15c>)
    9ab4:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9ab6:	4620      	mov	r0, r4
    9ab8:	4b3f      	ldr	r3, [pc, #252]	; (9bb8 <grid_port_receive_task+0x14c>)
    9aba:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9abc:	23c8      	movs	r3, #200	; 0xc8
    9abe:	9301      	str	r3, [sp, #4]
    9ac0:	2302      	movs	r3, #2
    9ac2:	9300      	str	r3, [sp, #0]
    9ac4:	23ff      	movs	r3, #255	; 0xff
    9ac6:	461a      	mov	r2, r3
    9ac8:	4619      	mov	r1, r3
    9aca:	483c      	ldr	r0, [pc, #240]	; (9bbc <grid_port_receive_task+0x150>)
    9acc:	4d3c      	ldr	r5, [pc, #240]	; (9bc0 <grid_port_receive_task+0x154>)
    9ace:	47a8      	blx	r5
    9ad0:	e001      	b.n	9ad6 <grid_port_receive_task+0x6a>
		por->rx_double_buffer_timeout++;
    9ad2:	3301      	adds	r3, #1
    9ad4:	6203      	str	r3, [r0, #32]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9ad8:	18e2      	adds	r2, r4, r3
    9ada:	f892 2288 	ldrb.w	r2, [r2, #648]	; 0x288
    9ade:	2a0a      	cmp	r2, #10
    9ae0:	d00f      	beq.n	9b02 <grid_port_receive_task+0x96>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9ae2:	b192      	cbz	r2, 9b0a <grid_port_receive_task+0x9e>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9ae6:	1e51      	subs	r1, r2, #1
    9ae8:	428b      	cmp	r3, r1
    9aea:	d011      	beq.n	9b10 <grid_port_receive_task+0xa4>
    9aec:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9af0:	f240 2e57 	movw	lr, #599	; 0x257
			por->rx_double_buffer_timeout = 0;
    9af4:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9af6:	4f35      	ldr	r7, [pc, #212]	; (9bcc <grid_port_receive_task+0x160>)
    9af8:	f44f 7616 	mov.w	r6, #600	; 0x258
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9afc:	f240 2c56 	movw	ip, #598	; 0x256
    9b00:	e02b      	b.n	9b5a <grid_port_receive_task+0xee>
			por->rx_double_buffer_status = 1;
    9b02:	2301      	movs	r3, #1
    9b04:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    9b06:	2300      	movs	r3, #0
    9b08:	6223      	str	r3, [r4, #32]
}
    9b0a:	b002      	add	sp, #8
    9b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9b14:	4b2e      	ldr	r3, [pc, #184]	; (9bd0 <grid_port_receive_task+0x164>)
    9b16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP1\"]}\r\n");
    9b1a:	482e      	ldr	r0, [pc, #184]	; (9bd4 <grid_port_receive_task+0x168>)
    9b1c:	4b2a      	ldr	r3, [pc, #168]	; (9bc8 <grid_port_receive_task+0x15c>)
    9b1e:	4798      	blx	r3
    9b20:	e7fe      	b.n	9b20 <grid_port_receive_task+0xb4>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9b22:	b36a      	cbz	r2, 9b80 <grid_port_receive_task+0x114>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9b24:	f202 2257 	addw	r2, r2, #599	; 0x257
    9b28:	fba7 1302 	umull	r1, r3, r7, r2
    9b2c:	099b      	lsrs	r3, r3, #6
    9b2e:	fb06 2213 	mls	r2, r6, r3, r2
    9b32:	18a3      	adds	r3, r4, r2
    9b34:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
    9b38:	bb5b      	cbnz	r3, 9b92 <grid_port_receive_task+0x126>
			por->rx_double_buffer_timeout = 0;
    9b3a:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    9b3c:	62a5      	str	r5, [r4, #40]	; 0x28
	for(uint32_t i = 0; i<490; i++){
    9b3e:	3801      	subs	r0, #1
    9b40:	d0e3      	beq.n	9b0a <grid_port_receive_task+0x9e>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9b44:	18e2      	adds	r2, r4, r3
    9b46:	f892 2288 	ldrb.w	r2, [r2, #648]	; 0x288
    9b4a:	2a0a      	cmp	r2, #10
    9b4c:	d0d9      	beq.n	9b02 <grid_port_receive_task+0x96>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9b4e:	2a00      	cmp	r2, #0
    9b50:	d0db      	beq.n	9b0a <grid_port_receive_task+0x9e>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9b52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9b54:	1e51      	subs	r1, r2, #1
    9b56:	428b      	cmp	r3, r1
    9b58:	d0da      	beq.n	9b10 <grid_port_receive_task+0xa4>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9b5a:	4573      	cmp	r3, lr
    9b5c:	d0e1      	beq.n	9b22 <grid_port_receive_task+0xb6>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9b5e:	f202 2257 	addw	r2, r2, #599	; 0x257
    9b62:	fba7 8102 	umull	r8, r1, r7, r2
    9b66:	0989      	lsrs	r1, r1, #6
    9b68:	fb06 2211 	mls	r2, r6, r1, r2
    9b6c:	4422      	add	r2, r4
    9b6e:	f892 2288 	ldrb.w	r2, [r2, #648]	; 0x288
    9b72:	b972      	cbnz	r2, 9b92 <grid_port_receive_task+0x126>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9b74:	4563      	cmp	r3, ip
    9b76:	d8e0      	bhi.n	9b3a <grid_port_receive_task+0xce>
			por->rx_double_buffer_timeout = 0;
    9b78:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;			
    9b7a:	3301      	adds	r3, #1
    9b7c:	62a3      	str	r3, [r4, #40]	; 0x28
    9b7e:	e7de      	b.n	9b3e <grid_port_receive_task+0xd2>
    9b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9b84:	4b12      	ldr	r3, [pc, #72]	; (9bd0 <grid_port_receive_task+0x164>)
    9b86:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP2\"]}\r\n");
    9b8a:	4813      	ldr	r0, [pc, #76]	; (9bd8 <grid_port_receive_task+0x16c>)
    9b8c:	4b0e      	ldr	r3, [pc, #56]	; (9bc8 <grid_port_receive_task+0x15c>)
    9b8e:	4798      	blx	r3
    9b90:	e7fe      	b.n	9b90 <grid_port_receive_task+0x124>
			printf("{\"type\":\"ERROR\", \"data\": [\"Buffer Overrun\"]}\r\n");
    9b92:	4812      	ldr	r0, [pc, #72]	; (9bdc <grid_port_receive_task+0x170>)
    9b94:	4b0c      	ldr	r3, [pc, #48]	; (9bc8 <grid_port_receive_task+0x15c>)
    9b96:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9b98:	4620      	mov	r0, r4
    9b9a:	4b07      	ldr	r3, [pc, #28]	; (9bb8 <grid_port_receive_task+0x14c>)
    9b9c:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9b9e:	23c8      	movs	r3, #200	; 0xc8
    9ba0:	9301      	str	r3, [sp, #4]
    9ba2:	2302      	movs	r3, #2
    9ba4:	9300      	str	r3, [sp, #0]
    9ba6:	23ff      	movs	r3, #255	; 0xff
    9ba8:	461a      	mov	r2, r3
    9baa:	4619      	mov	r1, r3
    9bac:	4803      	ldr	r0, [pc, #12]	; (9bbc <grid_port_receive_task+0x150>)
    9bae:	4c04      	ldr	r4, [pc, #16]	; (9bc0 <grid_port_receive_task+0x154>)
    9bb0:	47a0      	blx	r4
			break;
    9bb2:	e7aa      	b.n	9b0a <grid_port_receive_task+0x9e>
    9bb4:	4770      	bx	lr
    9bb6:	bf00      	nop
    9bb8:	000099ed 	.word	0x000099ed
    9bbc:	20001d30 	.word	0x20001d30
    9bc0:	000039cd 	.word	0x000039cd
    9bc4:	0000e008 	.word	0x0000e008
    9bc8:	0000c545 	.word	0x0000c545
    9bcc:	1b4e81b5 	.word	0x1b4e81b5
    9bd0:	41008000 	.word	0x41008000
    9bd4:	0000e03c 	.word	0x0000e03c
    9bd8:	0000e060 	.word	0x0000e060
    9bdc:	0000e084 	.word	0x0000e084

00009be0 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    9be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9be4:	b087      	sub	sp, #28
    9be6:	af02      	add	r7, sp, #8
    9be8:	4604      	mov	r4, r0
    9bea:	4615      	mov	r5, r2
	uint8_t buffer[length];			
    9bec:	1dd3      	adds	r3, r2, #7
    9bee:	f023 0307 	bic.w	r3, r3, #7
    9bf2:	ebad 0d03 	sub.w	sp, sp, r3
    9bf6:	a802      	add	r0, sp, #8
	for (uint32_t i = 0; i<length; i++){
    9bf8:	2a00      	cmp	r2, #0
    9bfa:	f000 823b 	beq.w	a074 <grid_port_receive_decode+0x494>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9bfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9c00:	eb00 0905 	add.w	r9, r0, r5
    9c04:	4601      	mov	r1, r0
    9c06:	eba2 0800 	sub.w	r8, r2, r0
    9c0a:	f8df c324 	ldr.w	ip, [pc, #804]	; 9f30 <grid_port_receive_decode+0x350>
    9c0e:	f44f 7e16 	mov.w	lr, #600	; 0x258
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9c12:	2600      	movs	r6, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9c14:	eb08 0a01 	add.w	sl, r8, r1
    9c18:	fbac b30a 	umull	fp, r3, ip, sl
    9c1c:	099b      	lsrs	r3, r3, #6
    9c1e:	fb0e a313 	mls	r3, lr, r3, sl
    9c22:	4423      	add	r3, r4
    9c24:	f893 a288 	ldrb.w	sl, [r3, #648]	; 0x288
    9c28:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9c2c:	f883 6288 	strb.w	r6, [r3, #648]	; 0x288
	for (uint32_t i = 0; i<length; i++){
    9c30:	4549      	cmp	r1, r9
    9c32:	d1ef      	bne.n	9c14 <grid_port_receive_decode+0x34>
	message = &buffer[0];
    9c34:	4606      	mov	r6, r0
    9c36:	eb05 0802 	add.w	r8, r5, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    9c3a:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 9f30 <grid_port_receive_decode+0x350>
    9c3e:	f44f 7e16 	mov.w	lr, #600	; 0x258
    9c42:	2100      	movs	r1, #0
    9c44:	fbac 9302 	umull	r9, r3, ip, r2
    9c48:	099b      	lsrs	r3, r3, #6
    9c4a:	fb0e 2313 	mls	r3, lr, r3, r2
    9c4e:	4423      	add	r3, r4
    9c50:	f883 1288 	strb.w	r1, [r3, #648]	; 0x288
    9c54:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    9c56:	4542      	cmp	r2, r8
    9c58:	d1f4      	bne.n	9c44 <grid_port_receive_decode+0x64>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    9c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9c5c:	442a      	add	r2, r5
    9c5e:	4bb4      	ldr	r3, [pc, #720]	; (9f30 <grid_port_receive_decode+0x350>)
    9c60:	fba3 1302 	umull	r1, r3, r3, r2
    9c64:	099b      	lsrs	r3, r3, #6
    9c66:	f44f 7116 	mov.w	r1, #600	; 0x258
    9c6a:	fb01 2313 	mls	r3, r1, r3, r2
    9c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9c70:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    9c72:	2300      	movs	r3, #0
    9c74:	6263      	str	r3, [r4, #36]	; 0x24
 	for (uint32_t i = 1; i<length; i++){
    9c76:	2d01      	cmp	r5, #1
    9c78:	f240 820b 	bls.w	a092 <grid_port_receive_decode+0x4b2>
    9c7c:	4681      	mov	r9, r0
    9c7e:	f04f 0801 	mov.w	r8, #1
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    9c82:	f8df b308 	ldr.w	fp, [pc, #776]	; 9f8c <grid_port_receive_decode+0x3ac>
    9c86:	f8df a308 	ldr.w	sl, [pc, #776]	; 9f90 <grid_port_receive_decode+0x3b0>
    9c8a:	e004      	b.n	9c96 <grid_port_receive_decode+0xb6>
 	for (uint32_t i = 1; i<length; i++){
    9c8c:	f108 0801 	add.w	r8, r8, #1
    9c90:	4545      	cmp	r5, r8
    9c92:	f240 81fe 	bls.w	a092 <grid_port_receive_decode+0x4b2>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    9c96:	f819 3f01 	ldrb.w	r3, [r9, #1]!
    9c9a:	2b01      	cmp	r3, #1
    9c9c:	d1f6      	bne.n	9c8c <grid_port_receive_decode+0xac>
 			length -= i;
    9c9e:	eba5 0508 	sub.w	r5, r5, r8
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    9ca2:	4658      	mov	r0, fp
    9ca4:	47d0      	blx	sl
 			message = &buffer[i];
    9ca6:	464e      	mov	r6, r9
    9ca8:	e7f0      	b.n	9c8c <grid_port_receive_decode+0xac>
	if (message[0] == 1 && message [length-1] == 10){
    9caa:	1973      	adds	r3, r6, r5
    9cac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9cb0:	2b0a      	cmp	r3, #10
    9cb2:	f040 81f2 	bne.w	a09a <grid_port_receive_decode+0x4ba>
		checksum_received = grid_msg_checksum_read(message, length);
    9cb6:	4629      	mov	r1, r5
    9cb8:	4630      	mov	r0, r6
    9cba:	4b9e      	ldr	r3, [pc, #632]	; (9f34 <grid_port_receive_decode+0x354>)
    9cbc:	4798      	blx	r3
    9cbe:	4680      	mov	r8, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    9cc0:	4629      	mov	r1, r5
    9cc2:	4630      	mov	r0, r6
    9cc4:	4b9c      	ldr	r3, [pc, #624]	; (9f38 <grid_port_receive_decode+0x358>)
    9cc6:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9cc8:	4580      	cmp	r8, r0
    9cca:	f040 81c5 	bne.w	a058 <grid_port_receive_decode+0x478>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9cce:	7873      	ldrb	r3, [r6, #1]
    9cd0:	2b0f      	cmp	r3, #15
    9cd2:	f000 8087 	beq.w	9de4 <grid_port_receive_decode+0x204>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    9cd6:	2b0e      	cmp	r3, #14
    9cd8:	f040 81b0 	bne.w	a03c <grid_port_receive_decode+0x45c>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    9cdc:	78b3      	ldrb	r3, [r6, #2]
    9cde:	2b07      	cmp	r3, #7
    9ce0:	f040 81e8 	bne.w	a0b4 <grid_port_receive_decode+0x4d4>
					struct grid_ui_report* stored_report = por->ping_report;
    9ce4:	f8d4 8004 	ldr.w	r8, [r4, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    9ce8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9cec:	2200      	movs	r2, #0
    9cee:	2102      	movs	r1, #2
    9cf0:	3006      	adds	r0, #6
    9cf2:	f8df a250 	ldr.w	sl, [pc, #592]	; 9f44 <grid_port_receive_decode+0x364>
    9cf6:	47d0      	blx	sl
    9cf8:	fa5f f980 	uxtb.w	r9, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    9cfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d00:	2200      	movs	r2, #0
    9d02:	2102      	movs	r1, #2
    9d04:	3008      	adds	r0, #8
    9d06:	47d0      	blx	sl
    9d08:	fa5f fb80 	uxtb.w	fp, r0
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    9d0c:	2200      	movs	r2, #0
    9d0e:	2102      	movs	r1, #2
    9d10:	f106 0008 	add.w	r0, r6, #8
    9d14:	47d0      	blx	sl
    9d16:	b2c3      	uxtb	r3, r0
    9d18:	60fb      	str	r3, [r7, #12]
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    9d1a:	2200      	movs	r2, #0
    9d1c:	2102      	movs	r1, #2
    9d1e:	1db0      	adds	r0, r6, #6
    9d20:	47d0      	blx	sl
    9d22:	60b8      	str	r0, [r7, #8]
    9d24:	fa5f fa80 	uxtb.w	sl, r0
					if (por->partner_status == 0){
    9d28:	f894 3517 	ldrb.w	r3, [r4, #1303]	; 0x517
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	f040 8133 	bne.w	9f98 <grid_port_receive_decode+0x3b8>
						if (local_stored == 255){ // I have no clue				
    9d32:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    9d36:	f000 80de 	beq.w	9ef6 <grid_port_receive_decode+0x316>
						if (remote_received != remote_stored){
    9d3a:	45d3      	cmp	fp, sl
    9d3c:	d013      	beq.n	9d66 <grid_port_receive_decode+0x186>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    9d3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d42:	7a3a      	ldrb	r2, [r7, #8]
    9d44:	2102      	movs	r1, #2
    9d46:	3008      	adds	r0, #8
    9d48:	4b7c      	ldr	r3, [pc, #496]	; (9f3c <grid_port_receive_decode+0x35c>)
    9d4a:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9d4c:	f8d8 a004 	ldr.w	sl, [r8, #4]
    9d50:	f898 8002 	ldrb.w	r8, [r8, #2]
    9d54:	4641      	mov	r1, r8
    9d56:	4650      	mov	r0, sl
    9d58:	4b77      	ldr	r3, [pc, #476]	; (9f38 <grid_port_receive_decode+0x358>)
    9d5a:	4798      	blx	r3
    9d5c:	4602      	mov	r2, r0
    9d5e:	4641      	mov	r1, r8
    9d60:	4650      	mov	r0, sl
    9d62:	4b77      	ldr	r3, [pc, #476]	; (9f40 <grid_port_receive_decode+0x360>)
    9d64:	4798      	blx	r3
						if (local_stored != local_received){
    9d66:	68fb      	ldr	r3, [r7, #12]
    9d68:	4599      	cmp	r9, r3
    9d6a:	f040 81a3 	bne.w	a0b4 <grid_port_receive_decode+0x4d4>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    9d6e:	78f3      	ldrb	r3, [r6, #3]
    9d70:	7b62      	ldrb	r2, [r4, #13]
    9d72:	1a9b      	subs	r3, r3, r2
    9d74:	3306      	adds	r3, #6
    9d76:	425a      	negs	r2, r3
    9d78:	f003 0303 	and.w	r3, r3, #3
    9d7c:	f002 0203 	and.w	r2, r2, #3
    9d80:	bf58      	it	pl
    9d82:	4253      	negpl	r3, r2
    9d84:	f884 3514 	strb.w	r3, [r4, #1300]	; 0x514
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    9d88:	f1a5 000a 	sub.w	r0, r5, #10
    9d8c:	2200      	movs	r2, #0
    9d8e:	2102      	movs	r1, #2
    9d90:	4430      	add	r0, r6
    9d92:	4b6c      	ldr	r3, [pc, #432]	; (9f44 <grid_port_receive_decode+0x364>)
    9d94:	4798      	blx	r3
    9d96:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
							por->partner_status = 1;
    9d9a:	2301      	movs	r3, #1
    9d9c:	f884 3517 	strb.w	r3, [r4, #1303]	; 0x517
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9da0:	4c69      	ldr	r4, [pc, #420]	; (9f48 <grid_port_receive_decode+0x368>)
    9da2:	4620      	mov	r0, r4
    9da4:	4b69      	ldr	r3, [pc, #420]	; (9f4c <grid_port_receive_decode+0x36c>)
    9da6:	4798      	blx	r3
    9da8:	b2c0      	uxtb	r0, r0
    9daa:	7020      	strb	r0, [r4, #0]
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    9dac:	23c8      	movs	r3, #200	; 0xc8
    9dae:	9301      	str	r3, [sp, #4]
    9db0:	2302      	movs	r3, #2
    9db2:	9300      	str	r3, [sp, #0]
    9db4:	2300      	movs	r3, #0
    9db6:	22ff      	movs	r2, #255	; 0xff
    9db8:	4619      	mov	r1, r3
    9dba:	4620      	mov	r0, r4
    9dbc:	4d64      	ldr	r5, [pc, #400]	; (9f50 <grid_port_receive_decode+0x370>)
    9dbe:	47a8      	blx	r5
							if (grid_sys_state.bank_select!=255){
    9dc0:	7a63      	ldrb	r3, [r4, #9]
    9dc2:	b2db      	uxtb	r3, r3
    9dc4:	2bff      	cmp	r3, #255	; 0xff
    9dc6:	f000 8175 	beq.w	a0b4 <grid_port_receive_decode+0x4d4>
								grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9dca:	7a62      	ldrb	r2, [r4, #9]
    9dcc:	4c61      	ldr	r4, [pc, #388]	; (9f54 <grid_port_receive_decode+0x374>)
    9dce:	6863      	ldr	r3, [r4, #4]
    9dd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9dd2:	2102      	movs	r1, #2
    9dd4:	3007      	adds	r0, #7
    9dd6:	4b59      	ldr	r3, [pc, #356]	; (9f3c <grid_port_receive_decode+0x35c>)
    9dd8:	4798      	blx	r3
								grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9dda:	2105      	movs	r1, #5
    9ddc:	4620      	mov	r0, r4
    9dde:	4b5e      	ldr	r3, [pc, #376]	; (9f58 <grid_port_receive_decode+0x378>)
    9de0:	4798      	blx	r3
    9de2:	e167      	b.n	a0b4 <grid_port_receive_decode+0x4d4>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9de4:	4630      	mov	r0, r6
    9de6:	4b5d      	ldr	r3, [pc, #372]	; (9f5c <grid_port_receive_decode+0x37c>)
    9de8:	4798      	blx	r3
    9dea:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    9dec:	4630      	mov	r0, r6
    9dee:	4b5c      	ldr	r3, [pc, #368]	; (9f60 <grid_port_receive_decode+0x380>)
    9df0:	4798      	blx	r3
    9df2:	4682      	mov	sl, r0
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9df4:	4630      	mov	r0, r6
    9df6:	4b5b      	ldr	r3, [pc, #364]	; (9f64 <grid_port_receive_decode+0x384>)
    9df8:	4798      	blx	r3
    9dfa:	4681      	mov	r9, r0
    9dfc:	f1a0 087f 	sub.w	r8, r0, #127	; 0x7f
    9e00:	fa4f f888 	sxtb.w	r8, r8
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    9e04:	4630      	mov	r0, r6
    9e06:	4b58      	ldr	r3, [pc, #352]	; (9f68 <grid_port_receive_decode+0x388>)
    9e08:	4798      	blx	r3
    9e0a:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9e0e:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9e10:	f894 2514 	ldrb.w	r2, [r4, #1300]	; 0x514
    9e14:	b132      	cbz	r2, 9e24 <grid_port_receive_decode+0x244>
				else if(por->partner_fi == 1){ // 90 deg
    9e16:	2a01      	cmp	r2, #1
    9e18:	d158      	bne.n	9ecc <grid_port_receive_decode+0x2ec>
					rotated_dx  -= received_dy;
    9e1a:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9e1e:	4643      	mov	r3, r8
					rotated_dx  -= received_dy;
    9e20:	fa4f f880 	sxtb.w	r8, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    9e24:	f894 9515 	ldrb.w	r9, [r4, #1301]	; 0x515
    9e28:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    9e2c:	44c8      	add	r8, r9
    9e2e:	fa5f f988 	uxtb.w	r9, r8
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    9e32:	f894 8516 	ldrb.w	r8, [r4, #1302]	; 0x516
    9e36:	f108 087f 	add.w	r8, r8, #127	; 0x7f
    9e3a:	4498      	add	r8, r3
    9e3c:	fa5f f888 	uxtb.w	r8, r8
				grid_msg_set_id(message, updated_id);
    9e40:	4659      	mov	r1, fp
    9e42:	4630      	mov	r0, r6
    9e44:	4b49      	ldr	r3, [pc, #292]	; (9f6c <grid_port_receive_decode+0x38c>)
    9e46:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    9e48:	4649      	mov	r1, r9
    9e4a:	4630      	mov	r0, r6
    9e4c:	4b48      	ldr	r3, [pc, #288]	; (9f70 <grid_port_receive_decode+0x390>)
    9e4e:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    9e50:	4641      	mov	r1, r8
    9e52:	4630      	mov	r0, r6
    9e54:	4b47      	ldr	r3, [pc, #284]	; (9f74 <grid_port_receive_decode+0x394>)
    9e56:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    9e58:	4651      	mov	r1, sl
    9e5a:	4630      	mov	r0, r6
    9e5c:	4b46      	ldr	r3, [pc, #280]	; (9f78 <grid_port_receive_decode+0x398>)
    9e5e:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    9e60:	eb09 290b 	add.w	r9, r9, fp, lsl #8
    9e64:	eb08 2809 	add.w	r8, r8, r9, lsl #8
    9e68:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    9e6c:	4641      	mov	r1, r8
    9e6e:	4836      	ldr	r0, [pc, #216]	; (9f48 <grid_port_receive_decode+0x368>)
    9e70:	4b42      	ldr	r3, [pc, #264]	; (9f7c <grid_port_receive_decode+0x39c>)
    9e72:	4798      	blx	r3
    9e74:	2800      	cmp	r0, #0
    9e76:	f040 811d 	bne.w	a0b4 <grid_port_receive_decode+0x4d4>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    9e7a:	4629      	mov	r1, r5
    9e7c:	4630      	mov	r0, r6
    9e7e:	4b2e      	ldr	r3, [pc, #184]	; (9f38 <grid_port_receive_decode+0x358>)
    9e80:	4798      	blx	r3
    9e82:	4602      	mov	r2, r0
    9e84:	4629      	mov	r1, r5
    9e86:	4630      	mov	r0, r6
    9e88:	4b2d      	ldr	r3, [pc, #180]	; (9f40 <grid_port_receive_decode+0x360>)
    9e8a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    9e8c:	f504 649f 	add.w	r4, r4, #1272	; 0x4f8
    9e90:	b2a9      	uxth	r1, r5
    9e92:	4620      	mov	r0, r4
    9e94:	4b3a      	ldr	r3, [pc, #232]	; (9f80 <grid_port_receive_decode+0x3a0>)
    9e96:	4798      	blx	r3
    9e98:	2800      	cmp	r0, #0
    9e9a:	f000 810b 	beq.w	a0b4 <grid_port_receive_decode+0x4d4>
						for (uint8_t i=0; i<length; i++){
    9e9e:	b16d      	cbz	r5, 9ebc <grid_port_receive_decode+0x2dc>
    9ea0:	2300      	movs	r3, #0
    9ea2:	4699      	mov	r9, r3
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9ea4:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 9f94 <grid_port_receive_decode+0x3b4>
    9ea8:	5cf1      	ldrb	r1, [r6, r3]
    9eaa:	4620      	mov	r0, r4
    9eac:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    9eae:	f109 0901 	add.w	r9, r9, #1
    9eb2:	fa5f f989 	uxtb.w	r9, r9
    9eb6:	464b      	mov	r3, r9
    9eb8:	45a9      	cmp	r9, r5
    9eba:	d3f5      	bcc.n	9ea8 <grid_port_receive_decode+0x2c8>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    9ebc:	4620      	mov	r0, r4
    9ebe:	4b31      	ldr	r3, [pc, #196]	; (9f84 <grid_port_receive_decode+0x3a4>)
    9ec0:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    9ec2:	4641      	mov	r1, r8
    9ec4:	4820      	ldr	r0, [pc, #128]	; (9f48 <grid_port_receive_decode+0x368>)
    9ec6:	4b30      	ldr	r3, [pc, #192]	; (9f88 <grid_port_receive_decode+0x3a8>)
    9ec8:	4798      	blx	r3
    9eca:	e0f3      	b.n	a0b4 <grid_port_receive_decode+0x4d4>
				else if(por->partner_fi == 2){ // 180 deg
    9ecc:	2a02      	cmp	r2, #2
    9ece:	d107      	bne.n	9ee0 <grid_port_receive_decode+0x300>
					rotated_dx  -= received_dx;
    9ed0:	f1c9 087f 	rsb	r8, r9, #127	; 0x7f
    9ed4:	fa4f f888 	sxtb.w	r8, r8
					rotated_dy  -= received_dy;
    9ed8:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
    9edc:	b243      	sxtb	r3, r0
    9ede:	e7a1      	b.n	9e24 <grid_port_receive_decode+0x244>
				else if(por->partner_fi == 3){ // 270 deg
    9ee0:	2a03      	cmp	r2, #3
    9ee2:	d002      	beq.n	9eea <grid_port_receive_decode+0x30a>
				int8_t rotated_dy = 0;
    9ee4:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9ee6:	4698      	mov	r8, r3
    9ee8:	e79c      	b.n	9e24 <grid_port_receive_decode+0x244>
					rotated_dy  -= received_dx;
    9eea:	f1c9 097f 	rsb	r9, r9, #127	; 0x7f
					rotated_dx  += received_dy;
    9eee:	4698      	mov	r8, r3
					rotated_dy  -= received_dx;
    9ef0:	fa4f f389 	sxtb.w	r3, r9
    9ef4:	e796      	b.n	9e24 <grid_port_receive_decode+0x244>
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    9ef6:	4814      	ldr	r0, [pc, #80]	; (9f48 <grid_port_receive_decode+0x368>)
    9ef8:	4b14      	ldr	r3, [pc, #80]	; (9f4c <grid_port_receive_decode+0x36c>)
    9efa:	4798      	blx	r3
    9efc:	f000 097f 	and.w	r9, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    9f00:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9f04:	464a      	mov	r2, r9
    9f06:	2102      	movs	r1, #2
    9f08:	3006      	adds	r0, #6
    9f0a:	4b0c      	ldr	r3, [pc, #48]	; (9f3c <grid_port_receive_decode+0x35c>)
    9f0c:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9f0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9f12:	f898 2002 	ldrb.w	r2, [r8, #2]
    9f16:	603a      	str	r2, [r7, #0]
    9f18:	4611      	mov	r1, r2
    9f1a:	607b      	str	r3, [r7, #4]
    9f1c:	4618      	mov	r0, r3
    9f1e:	4b06      	ldr	r3, [pc, #24]	; (9f38 <grid_port_receive_decode+0x358>)
    9f20:	4798      	blx	r3
    9f22:	4602      	mov	r2, r0
    9f24:	6839      	ldr	r1, [r7, #0]
    9f26:	6878      	ldr	r0, [r7, #4]
    9f28:	4b05      	ldr	r3, [pc, #20]	; (9f40 <grid_port_receive_decode+0x360>)
    9f2a:	4798      	blx	r3
    9f2c:	e705      	b.n	9d3a <grid_port_receive_decode+0x15a>
    9f2e:	bf00      	nop
    9f30:	1b4e81b5 	.word	0x1b4e81b5
    9f34:	00003cfd 	.word	0x00003cfd
    9f38:	00003ce1 	.word	0x00003ce1
    9f3c:	00003a61 	.word	0x00003a61
    9f40:	00003d1d 	.word	0x00003d1d
    9f44:	00003a21 	.word	0x00003a21
    9f48:	20001d30 	.word	0x20001d30
    9f4c:	00003969 	.word	0x00003969
    9f50:	000039cd 	.word	0x000039cd
    9f54:	20001d20 	.word	0x20001d20
    9f58:	00004165 	.word	0x00004165
    9f5c:	00003d31 	.word	0x00003d31
    9f60:	00003d91 	.word	0x00003d91
    9f64:	00003d51 	.word	0x00003d51
    9f68:	00003d71 	.word	0x00003d71
    9f6c:	00003db1 	.word	0x00003db1
    9f70:	00003dc5 	.word	0x00003dc5
    9f74:	00003dd9 	.word	0x00003dd9
    9f78:	00003ded 	.word	0x00003ded
    9f7c:	00003e01 	.word	0x00003e01
    9f80:	00001375 	.word	0x00001375
    9f84:	000013c1 	.word	0x000013c1
    9f88:	00003e2b 	.word	0x00003e2b
    9f8c:	0000e0b4 	.word	0x0000e0b4
    9f90:	0000c545 	.word	0x0000c545
    9f94:	000013a5 	.word	0x000013a5
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    9f98:	78f3      	ldrb	r3, [r6, #3]
    9f9a:	7b62      	ldrb	r2, [r4, #13]
    9f9c:	1a9b      	subs	r3, r3, r2
    9f9e:	3306      	adds	r3, #6
    9fa0:	425a      	negs	r2, r3
    9fa2:	f003 0303 	and.w	r3, r3, #3
    9fa6:	f002 0203 	and.w	r2, r2, #3
    9faa:	bf58      	it	pl
    9fac:	4253      	negpl	r3, r2
    9fae:	f894 2514 	ldrb.w	r2, [r4, #1300]	; 0x514
    9fb2:	68f9      	ldr	r1, [r7, #12]
    9fb4:	4589      	cmp	r9, r1
    9fb6:	bf08      	it	eq
    9fb8:	45d3      	cmpeq	fp, sl
    9fba:	bf0c      	ite	eq
    9fbc:	f04f 0901 	moveq.w	r9, #1
    9fc0:	f04f 0900 	movne.w	r9, #0
    9fc4:	4293      	cmp	r3, r2
    9fc6:	bf14      	ite	ne
    9fc8:	f04f 0900 	movne.w	r9, #0
    9fcc:	f009 0901 	andeq.w	r9, r9, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    9fd0:	f8d4 a510 	ldr.w	sl, [r4, #1296]	; 0x510
    9fd4:	f1a5 000a 	sub.w	r0, r5, #10
    9fd8:	2200      	movs	r2, #0
    9fda:	2102      	movs	r1, #2
    9fdc:	4430      	add	r0, r6
    9fde:	4b37      	ldr	r3, [pc, #220]	; (a0bc <grid_port_receive_decode+0x4dc>)
    9fe0:	4798      	blx	r3
						if (validator == 1){
    9fe2:	4550      	cmp	r0, sl
    9fe4:	d102      	bne.n	9fec <grid_port_receive_decode+0x40c>
    9fe6:	f1b9 0f00 	cmp.w	r9, #0
    9fea:	d163      	bne.n	a0b4 <grid_port_receive_decode+0x4d4>
							por->partner_status = 0;
    9fec:	2300      	movs	r3, #0
    9fee:	f884 3517 	strb.w	r3, [r4, #1303]	; 0x517
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    9ff2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9ff6:	22ff      	movs	r2, #255	; 0xff
    9ff8:	2102      	movs	r1, #2
    9ffa:	3008      	adds	r0, #8
    9ffc:	4c30      	ldr	r4, [pc, #192]	; (a0c0 <grid_port_receive_decode+0x4e0>)
    9ffe:	47a0      	blx	r4
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    a000:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a004:	22ff      	movs	r2, #255	; 0xff
    a006:	2102      	movs	r1, #2
    a008:	3006      	adds	r0, #6
    a00a:	47a0      	blx	r4
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));														
    a00c:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a010:	f898 5002 	ldrb.w	r5, [r8, #2]
    a014:	4629      	mov	r1, r5
    a016:	4620      	mov	r0, r4
    a018:	4b2a      	ldr	r3, [pc, #168]	; (a0c4 <grid_port_receive_decode+0x4e4>)
    a01a:	4798      	blx	r3
    a01c:	4602      	mov	r2, r0
    a01e:	4629      	mov	r1, r5
    a020:	4620      	mov	r0, r4
    a022:	4b29      	ldr	r3, [pc, #164]	; (a0c8 <grid_port_receive_decode+0x4e8>)
    a024:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    a026:	23c8      	movs	r3, #200	; 0xc8
    a028:	9301      	str	r3, [sp, #4]
    a02a:	2302      	movs	r3, #2
    a02c:	9300      	str	r3, [sp, #0]
    a02e:	23ff      	movs	r3, #255	; 0xff
    a030:	461a      	mov	r2, r3
    a032:	4619      	mov	r1, r3
    a034:	4825      	ldr	r0, [pc, #148]	; (a0cc <grid_port_receive_decode+0x4ec>)
    a036:	4c26      	ldr	r4, [pc, #152]	; (a0d0 <grid_port_receive_decode+0x4f0>)
    a038:	47a0      	blx	r4
    a03a:	e03b      	b.n	a0b4 <grid_port_receive_decode+0x4d4>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    a03c:	23c8      	movs	r3, #200	; 0xc8
    a03e:	9301      	str	r3, [sp, #4]
    a040:	2302      	movs	r3, #2
    a042:	9300      	str	r3, [sp, #0]
    a044:	2300      	movs	r3, #0
    a046:	461a      	mov	r2, r3
    a048:	21ff      	movs	r1, #255	; 0xff
    a04a:	4820      	ldr	r0, [pc, #128]	; (a0cc <grid_port_receive_decode+0x4ec>)
    a04c:	4c20      	ldr	r4, [pc, #128]	; (a0d0 <grid_port_receive_decode+0x4f0>)
    a04e:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    a050:	4820      	ldr	r0, [pc, #128]	; (a0d4 <grid_port_receive_decode+0x4f4>)
    a052:	4b21      	ldr	r3, [pc, #132]	; (a0d8 <grid_port_receive_decode+0x4f8>)
    a054:	4798      	blx	r3
    a056:	e02d      	b.n	a0b4 <grid_port_receive_decode+0x4d4>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    a058:	4820      	ldr	r0, [pc, #128]	; (a0dc <grid_port_receive_decode+0x4fc>)
    a05a:	4b1f      	ldr	r3, [pc, #124]	; (a0d8 <grid_port_receive_decode+0x4f8>)
    a05c:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    a05e:	23c8      	movs	r3, #200	; 0xc8
    a060:	9301      	str	r3, [sp, #4]
    a062:	2301      	movs	r3, #1
    a064:	9300      	str	r3, [sp, #0]
    a066:	23ff      	movs	r3, #255	; 0xff
    a068:	2200      	movs	r2, #0
    a06a:	2114      	movs	r1, #20
    a06c:	4817      	ldr	r0, [pc, #92]	; (a0cc <grid_port_receive_decode+0x4ec>)
    a06e:	4c18      	ldr	r4, [pc, #96]	; (a0d0 <grid_port_receive_decode+0x4f0>)
    a070:	47a0      	blx	r4
    a072:	e01f      	b.n	a0b4 <grid_port_receive_decode+0x4d4>
	message = &buffer[0];
    a074:	4606      	mov	r6, r0
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    a076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    a078:	442a      	add	r2, r5
    a07a:	4b19      	ldr	r3, [pc, #100]	; (a0e0 <grid_port_receive_decode+0x500>)
    a07c:	fba3 1302 	umull	r1, r3, r3, r2
    a080:	099b      	lsrs	r3, r3, #6
    a082:	f44f 7116 	mov.w	r1, #600	; 0x258
    a086:	fb01 2313 	mls	r3, r1, r3, r2
    a08a:	62e3      	str	r3, [r4, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    a08c:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    a08e:	2300      	movs	r3, #0
    a090:	6263      	str	r3, [r4, #36]	; 0x24
	if (message[0] == 1 && message [length-1] == 10){
    a092:	7833      	ldrb	r3, [r6, #0]
    a094:	2b01      	cmp	r3, #1
    a096:	f43f ae08 	beq.w	9caa <grid_port_receive_decode+0xca>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    a09a:	23c8      	movs	r3, #200	; 0xc8
    a09c:	9301      	str	r3, [sp, #4]
    a09e:	2302      	movs	r3, #2
    a0a0:	9300      	str	r3, [sp, #0]
    a0a2:	2314      	movs	r3, #20
    a0a4:	2200      	movs	r2, #0
    a0a6:	4611      	mov	r1, r2
    a0a8:	4808      	ldr	r0, [pc, #32]	; (a0cc <grid_port_receive_decode+0x4ec>)
    a0aa:	4c09      	ldr	r4, [pc, #36]	; (a0d0 <grid_port_receive_decode+0x4f0>)
    a0ac:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    a0ae:	480d      	ldr	r0, [pc, #52]	; (a0e4 <grid_port_receive_decode+0x504>)
    a0b0:	4b09      	ldr	r3, [pc, #36]	; (a0d8 <grid_port_receive_decode+0x4f8>)
    a0b2:	4798      	blx	r3
}
    a0b4:	3714      	adds	r7, #20
    a0b6:	46bd      	mov	sp, r7
    a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0bc:	00003a21 	.word	0x00003a21
    a0c0:	00003a61 	.word	0x00003a61
    a0c4:	00003ce1 	.word	0x00003ce1
    a0c8:	00003d1d 	.word	0x00003d1d
    a0cc:	20001d30 	.word	0x20001d30
    a0d0:	000039cd 	.word	0x000039cd
    a0d4:	0000e0ec 	.word	0x0000e0ec
    a0d8:	0000c545 	.word	0x0000c545
    a0dc:	0000e124 	.word	0x0000e124
    a0e0:	1b4e81b5 	.word	0x1b4e81b5
    a0e4:	0000e158 	.word	0x0000e158

0000a0e8 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    a0e8:	b530      	push	{r4, r5, lr}
    a0ea:	b083      	sub	sp, #12
    a0ec:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    a0ee:	7f03      	ldrb	r3, [r0, #28]
    a0f0:	2b01      	cmp	r3, #1
    a0f2:	d013      	beq.n	a11c <grid_port_receive_complete_task+0x34>
	grid_port_receive_task(por);	
    a0f4:	4620      	mov	r0, r4
    a0f6:	4b12      	ldr	r3, [pc, #72]	; (a140 <grid_port_receive_complete_task+0x58>)
    a0f8:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    a0fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a0fc:	b163      	cbz	r3, a118 <grid_port_receive_complete_task+0x30>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    a0fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a102:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a104:	bf34      	ite	cc
    a106:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a108:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    a10c:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    a10e:	4620      	mov	r0, r4
    a110:	4b0c      	ldr	r3, [pc, #48]	; (a144 <grid_port_receive_complete_task+0x5c>)
    a112:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    a114:	2300      	movs	r3, #0
    a116:	6263      	str	r3, [r4, #36]	; 0x24
}
    a118:	b003      	add	sp, #12
    a11a:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    a11c:	2300      	movs	r3, #0
    a11e:	7703      	strb	r3, [r0, #28]
		grid_port_reset_receiver(por);			
    a120:	4b09      	ldr	r3, [pc, #36]	; (a148 <grid_port_receive_complete_task+0x60>)
    a122:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a124:	23c8      	movs	r3, #200	; 0xc8
    a126:	9301      	str	r3, [sp, #4]
    a128:	2302      	movs	r3, #2
    a12a:	9300      	str	r3, [sp, #0]
    a12c:	23ff      	movs	r3, #255	; 0xff
    a12e:	461a      	mov	r2, r3
    a130:	4619      	mov	r1, r3
    a132:	4806      	ldr	r0, [pc, #24]	; (a14c <grid_port_receive_complete_task+0x64>)
    a134:	4d06      	ldr	r5, [pc, #24]	; (a150 <grid_port_receive_complete_task+0x68>)
    a136:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    a138:	4806      	ldr	r0, [pc, #24]	; (a154 <grid_port_receive_complete_task+0x6c>)
    a13a:	4b07      	ldr	r3, [pc, #28]	; (a158 <grid_port_receive_complete_task+0x70>)
    a13c:	4798      	blx	r3
    a13e:	e7d9      	b.n	a0f4 <grid_port_receive_complete_task+0xc>
    a140:	00009a6d 	.word	0x00009a6d
    a144:	00009be1 	.word	0x00009be1
    a148:	000099ed 	.word	0x000099ed
    a14c:	20001d30 	.word	0x20001d30
    a150:	000039cd 	.word	0x000039cd
    a154:	0000e184 	.word	0x0000e184
    a158:	0000c545 	.word	0x0000c545

0000a15c <init_timer>:


#define RTC1SEC 16384

void init_timer(void)
{
    a15c:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    a15e:	4c18      	ldr	r4, [pc, #96]	; (a1c0 <init_timer+0x64>)
    a160:	f240 3333 	movw	r3, #819	; 0x333
    a164:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    a166:	4b17      	ldr	r3, [pc, #92]	; (a1c4 <init_timer+0x68>)
    a168:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    a16a:	2301      	movs	r3, #1
    a16c:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    a16e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a172:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    a174:	4a14      	ldr	r2, [pc, #80]	; (a1c8 <init_timer+0x6c>)
    a176:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    a178:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    a17c:	f240 6266 	movw	r2, #1638	; 0x666
    a180:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    a182:	4a12      	ldr	r2, [pc, #72]	; (a1cc <init_timer+0x70>)
    a184:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    a186:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    a18a:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    a18c:	4a10      	ldr	r2, [pc, #64]	; (a1d0 <init_timer+0x74>)
    a18e:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    a190:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    a194:	4d0f      	ldr	r5, [pc, #60]	; (a1d4 <init_timer+0x78>)
    a196:	1d21      	adds	r1, r4, #4
    a198:	4628      	mov	r0, r5
    a19a:	4e0f      	ldr	r6, [pc, #60]	; (a1d8 <init_timer+0x7c>)
    a19c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    a19e:	f104 0118 	add.w	r1, r4, #24
    a1a2:	4628      	mov	r0, r5
    a1a4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    a1a6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a1aa:	4628      	mov	r0, r5
    a1ac:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    a1ae:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a1b2:	4628      	mov	r0, r5
    a1b4:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    a1b6:	4628      	mov	r0, r5
    a1b8:	4b08      	ldr	r3, [pc, #32]	; (a1dc <init_timer+0x80>)
    a1ba:	4798      	blx	r3
    a1bc:	bd70      	pop	{r4, r5, r6, pc}
    a1be:	bf00      	nop
    a1c0:	20000d68 	.word	0x20000d68
    a1c4:	000098dd 	.word	0x000098dd
    a1c8:	000098c9 	.word	0x000098c9
    a1cc:	000098bd 	.word	0x000098bd
    a1d0:	00009941 	.word	0x00009941
    a1d4:	20000f94 	.word	0x20000f94
    a1d8:	000052a5 	.word	0x000052a5
    a1dc:	00005265 	.word	0x00005265

0000a1e0 <main>:




int main(void)
{
    a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1e4:	b093      	sub	sp, #76	; 0x4c



	atmel_start_init();	
    a1e6:	4b98      	ldr	r3, [pc, #608]	; (a448 <main+0x268>)
    a1e8:	4798      	blx	r3

	
	printf("Initialization\r\n");
    a1ea:	4898      	ldr	r0, [pc, #608]	; (a44c <main+0x26c>)
    a1ec:	4b98      	ldr	r3, [pc, #608]	; (a450 <main+0x270>)
    a1ee:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    a1f0:	4b98      	ldr	r3, [pc, #608]	; (a454 <main+0x274>)
    a1f2:	4798      	blx	r3


	composite_device_start();
    a1f4:	4b98      	ldr	r3, [pc, #608]	; (a458 <main+0x278>)
    a1f6:	4798      	blx	r3

	grid_module_common_init();
    a1f8:	4b98      	ldr	r3, [pc, #608]	; (a45c <main+0x27c>)
    a1fa:	4798      	blx	r3


	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    a1fc:	4b98      	ldr	r3, [pc, #608]	; (a460 <main+0x280>)
    a1fe:	4798      	blx	r3
    a200:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a202:	2600      	movs	r6, #0
    a204:	f8df 9300 	ldr.w	r9, [pc, #768]	; a508 <main+0x328>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    a208:	f8df 82f8 	ldr.w	r8, [pc, #760]	; a504 <main+0x324>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a20c:	e003      	b.n	a216 <main+0x36>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    a20e:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    a212:	d01b      	beq.n	a24c <main+0x6c>
    a214:	3601      	adds	r6, #1
    a216:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a218:	4892      	ldr	r0, [pc, #584]	; (a464 <main+0x284>)
    a21a:	47c8      	blx	r9
    a21c:	42a8      	cmp	r0, r5
    a21e:	d8f6      	bhi.n	a20e <main+0x2e>
	}
		
		
		

	grid_sys_bank_select(&grid_sys_state, 255);
    a220:	21ff      	movs	r1, #255	; 0xff
    a222:	4891      	ldr	r0, [pc, #580]	; (a468 <main+0x288>)
    a224:	4b91      	ldr	r3, [pc, #580]	; (a46c <main+0x28c>)
    a226:	4798      	blx	r3
	
	init_timer();
    a228:	4b91      	ldr	r3, [pc, #580]	; (a470 <main+0x290>)
    a22a:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	printf("Entering Main Loop\r\n");
    a22c:	4891      	ldr	r0, [pc, #580]	; (a474 <main+0x294>)
    a22e:	4b88      	ldr	r3, [pc, #544]	; (a450 <main+0x270>)
    a230:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    a232:	2300      	movs	r3, #0
    a234:	9308      	str	r3, [sp, #32]
	uint32_t loopcounter = 0;
    a236:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    a238:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a50c <main+0x32c>
    a23c:	f04f 0301 	mov.w	r3, #1
    a240:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			if (usb_d_get_frame_num() == 0){
				
			}
			else{
				printf("USB Connected\r\n");
				grid_sys_bank_select(&grid_sys_state, 0);
    a244:	f04f 0b00 	mov.w	fp, #0
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a248:	4c86      	ldr	r4, [pc, #536]	; (a464 <main+0x284>)
    a24a:	e090      	b.n	a36e <main+0x18e>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    a24c:	27ff      	movs	r7, #255	; 0xff
    a24e:	9701      	str	r7, [sp, #4]
    a250:	2400      	movs	r4, #0
    a252:	9400      	str	r4, [sp, #0]
    a254:	4623      	mov	r3, r4
    a256:	4622      	mov	r2, r4
    a258:	4629      	mov	r1, r5
    a25a:	4882      	ldr	r0, [pc, #520]	; (a464 <main+0x284>)
    a25c:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 5, 5, 5);
    a25e:	2305      	movs	r3, #5
    a260:	9301      	str	r3, [sp, #4]
    a262:	9300      	str	r3, [sp, #0]
    a264:	4622      	mov	r2, r4
    a266:	4629      	mov	r1, r5
    a268:	487e      	ldr	r0, [pc, #504]	; (a464 <main+0x284>)
    a26a:	f8df b2a4 	ldr.w	fp, [pc, #676]	; a510 <main+0x330>
    a26e:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    a270:	9401      	str	r4, [sp, #4]
    a272:	9400      	str	r4, [sp, #0]
    a274:	463b      	mov	r3, r7
    a276:	4622      	mov	r2, r4
    a278:	4629      	mov	r1, r5
    a27a:	487a      	ldr	r0, [pc, #488]	; (a464 <main+0x284>)
    a27c:	4c7e      	ldr	r4, [pc, #504]	; (a478 <main+0x298>)
    a27e:	47a0      	blx	r4
    a280:	e7c8      	b.n	a214 <main+0x34>
			if (usb_d_get_frame_num() == 0){
    a282:	4b7e      	ldr	r3, [pc, #504]	; (a47c <main+0x29c>)
    a284:	4798      	blx	r3
    a286:	2800      	cmp	r0, #0
    a288:	d078      	beq.n	a37c <main+0x19c>
				printf("USB Connected\r\n");
    a28a:	487d      	ldr	r0, [pc, #500]	; (a480 <main+0x2a0>)
    a28c:	4b70      	ldr	r3, [pc, #448]	; (a450 <main+0x270>)
    a28e:	4798      	blx	r3
				grid_sys_bank_select(&grid_sys_state, 0);
    a290:	4659      	mov	r1, fp
    a292:	4875      	ldr	r0, [pc, #468]	; (a468 <main+0x288>)
    a294:	4b75      	ldr	r3, [pc, #468]	; (a46c <main+0x28c>)
    a296:	4798      	blx	r3
				usb_init_variable = 1;
    a298:	2301      	movs	r3, #1
    a29a:	9308      	str	r3, [sp, #32]
    a29c:	e06e      	b.n	a37c <main+0x19c>
			printf("]}\r\n");
    a29e:	4879      	ldr	r0, [pc, #484]	; (a484 <main+0x2a4>)
    a2a0:	4b6b      	ldr	r3, [pc, #428]	; (a450 <main+0x270>)
    a2a2:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\"]}\r\n", loopcounter);
    a2a4:	9902      	ldr	r1, [sp, #8]
    a2a6:	4878      	ldr	r0, [pc, #480]	; (a488 <main+0x2a8>)
    a2a8:	4b78      	ldr	r3, [pc, #480]	; (a48c <main+0x2ac>)
    a2aa:	4798      	blx	r3
			loopcounter = 0;
    a2ac:	2300      	movs	r3, #0
    a2ae:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    a2b0:	2302      	movs	r3, #2
    a2b2:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    a2b6:	f8df 925c 	ldr.w	r9, [pc, #604]	; a514 <main+0x334>
    a2ba:	4648      	mov	r0, r9
    a2bc:	4d74      	ldr	r5, [pc, #464]	; (a490 <main+0x2b0>)
    a2be:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    a2c0:	4874      	ldr	r0, [pc, #464]	; (a494 <main+0x2b4>)
    a2c2:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    a2c4:	f8df 8250 	ldr.w	r8, [pc, #592]	; a518 <main+0x338>
    a2c8:	4640      	mov	r0, r8
    a2ca:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    a2cc:	4f72      	ldr	r7, [pc, #456]	; (a498 <main+0x2b8>)
    a2ce:	4638      	mov	r0, r7
    a2d0:	47a8      	blx	r5
	mod->current_task = next_task;
    a2d2:	2303      	movs	r3, #3
    a2d4:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    a2d8:	4e70      	ldr	r6, [pc, #448]	; (a49c <main+0x2bc>)
    a2da:	4630      	mov	r0, r6
    a2dc:	4b70      	ldr	r3, [pc, #448]	; (a4a0 <main+0x2c0>)
    a2de:	4798      	blx	r3
	mod->current_task = next_task;
    a2e0:	2304      	movs	r3, #4
    a2e2:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    a2e6:	2101      	movs	r1, #1
    a2e8:	4630      	mov	r0, r6
    a2ea:	4d6e      	ldr	r5, [pc, #440]	; (a4a4 <main+0x2c4>)
    a2ec:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    a2ee:	4659      	mov	r1, fp
    a2f0:	4648      	mov	r0, r9
    a2f2:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    a2f4:	4659      	mov	r1, fp
    a2f6:	4867      	ldr	r0, [pc, #412]	; (a494 <main+0x2b4>)
    a2f8:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    a2fa:	4659      	mov	r1, fp
    a2fc:	4640      	mov	r0, r8
    a2fe:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    a300:	4659      	mov	r1, fp
    a302:	4638      	mov	r0, r7
    a304:	47a8      	blx	r5
	mod->current_task = next_task;
    a306:	2305      	movs	r3, #5
    a308:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    a30c:	4648      	mov	r0, r9
    a30e:	4d66      	ldr	r5, [pc, #408]	; (a4a8 <main+0x2c8>)
    a310:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    a312:	4860      	ldr	r0, [pc, #384]	; (a494 <main+0x2b4>)
    a314:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    a316:	4640      	mov	r0, r8
    a318:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    a31a:	4638      	mov	r0, r7
    a31c:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    a31e:	4863      	ldr	r0, [pc, #396]	; (a4ac <main+0x2cc>)
    a320:	4b63      	ldr	r3, [pc, #396]	; (a4b0 <main+0x2d0>)
    a322:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    a324:	4630      	mov	r0, r6
    a326:	4b63      	ldr	r3, [pc, #396]	; (a4b4 <main+0x2d4>)
    a328:	4798      	blx	r3
	mod->current_task = next_task;
    a32a:	2307      	movs	r3, #7
    a32c:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    a330:	4b4d      	ldr	r3, [pc, #308]	; (a468 <main+0x288>)
    a332:	889b      	ldrh	r3, [r3, #4]
    a334:	b29b      	uxth	r3, r3
    a336:	2b00      	cmp	r3, #0
    a338:	d156      	bne.n	a3e8 <main+0x208>
	mod->current_task = next_task;
    a33a:	2306      	movs	r3, #6
    a33c:	f88a 3001 	strb.w	r3, [sl, #1]
			
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
	
		grid_led_tick(&grid_led_state);
    a340:	4620      	mov	r0, r4
    a342:	4b5d      	ldr	r3, [pc, #372]	; (a4b8 <main+0x2d8>)
    a344:	4798      	blx	r3
	

		
		if (loopcounter%1 == 0){
			
			grid_led_render_all(&grid_led_state);	
    a346:	4620      	mov	r0, r4
    a348:	4b5c      	ldr	r3, [pc, #368]	; (a4bc <main+0x2dc>)
    a34a:	4798      	blx	r3
			
						
	 		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    a34c:	4d5c      	ldr	r5, [pc, #368]	; (a4c0 <main+0x2e0>)
    a34e:	4620      	mov	r0, r4
    a350:	47a8      	blx	r5
    a352:	2801      	cmp	r0, #1
    a354:	d1fb      	bne.n	a34e <main+0x16e>
	
	 		}
			grid_led_hardware_start_transfer(&grid_led_state);
    a356:	4620      	mov	r0, r4
    a358:	4b5a      	ldr	r3, [pc, #360]	; (a4c4 <main+0x2e4>)
    a35a:	4798      	blx	r3
	mod->current_task = next_task;
    a35c:	f88a b001 	strb.w	fp, [sl, #1]
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);


		// IDLETASK
		
		if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    a360:	9903      	ldr	r1, [sp, #12]
    a362:	4841      	ldr	r0, [pc, #260]	; (a468 <main+0x288>)
    a364:	4b58      	ldr	r3, [pc, #352]	; (a4c8 <main+0x2e8>)
    a366:	4798      	blx	r3
    a368:	280f      	cmp	r0, #15
    a36a:	f240 8121 	bls.w	a5b0 <main+0x3d0>
	mod->current_task = next_task;
    a36e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a372:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    a376:	9b08      	ldr	r3, [sp, #32]
    a378:	2b00      	cmp	r3, #0
    a37a:	d082      	beq.n	a282 <main+0xa2>
		loopcounter++;
    a37c:	9b02      	ldr	r3, [sp, #8]
    a37e:	3301      	adds	r3, #1
    a380:	9302      	str	r3, [sp, #8]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    a382:	4839      	ldr	r0, [pc, #228]	; (a468 <main+0x288>)
    a384:	4b51      	ldr	r3, [pc, #324]	; (a4cc <main+0x2ec>)
    a386:	4798      	blx	r3
    a388:	9003      	str	r0, [sp, #12]
		if (scheduler_report_flag){
    a38a:	4b51      	ldr	r3, [pc, #324]	; (a4d0 <main+0x2f0>)
    a38c:	781b      	ldrb	r3, [r3, #0]
    a38e:	2b00      	cmp	r3, #0
    a390:	d08e      	beq.n	a2b0 <main+0xd0>
			scheduler_report_flag=0;
    a392:	4b4f      	ldr	r3, [pc, #316]	; (a4d0 <main+0x2f0>)
    a394:	f883 b000 	strb.w	fp, [r3]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    a398:	2220      	movs	r2, #32
    a39a:	4659      	mov	r1, fp
    a39c:	a80a      	add	r0, sp, #40	; 0x28
    a39e:	4b4d      	ldr	r3, [pc, #308]	; (a4d4 <main+0x2f4>)
    a3a0:	4798      	blx	r3
    a3a2:	4b4d      	ldr	r3, [pc, #308]	; (a4d8 <main+0x2f8>)
    a3a4:	aa09      	add	r2, sp, #36	; 0x24
    a3a6:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    a3aa:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    a3ae:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    a3b2:	4298      	cmp	r0, r3
    a3b4:	d1f9      	bne.n	a3aa <main+0x1ca>
			grid_task_timer_reset(&grid_task_state);
    a3b6:	4650      	mov	r0, sl
    a3b8:	4b48      	ldr	r3, [pc, #288]	; (a4dc <main+0x2fc>)
    a3ba:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    a3bc:	4848      	ldr	r0, [pc, #288]	; (a4e0 <main+0x300>)
    a3be:	4d33      	ldr	r5, [pc, #204]	; (a48c <main+0x2ac>)
    a3c0:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    a3c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3c4:	4847      	ldr	r0, [pc, #284]	; (a4e4 <main+0x304>)
    a3c6:	47a8      	blx	r5
    a3c8:	ad0b      	add	r5, sp, #44	; 0x2c
    a3ca:	f10d 0948 	add.w	r9, sp, #72	; 0x48
					printf(", ");
    a3ce:	f8df 814c 	ldr.w	r8, [pc, #332]	; a51c <main+0x33c>
    a3d2:	4e2e      	ldr	r6, [pc, #184]	; (a48c <main+0x2ac>)
				printf("\"%d\"", task_val[i]);
    a3d4:	4f43      	ldr	r7, [pc, #268]	; (a4e4 <main+0x304>)
					printf(", ");
    a3d6:	4640      	mov	r0, r8
    a3d8:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    a3da:	f855 1b04 	ldr.w	r1, [r5], #4
    a3de:	4638      	mov	r0, r7
    a3e0:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    a3e2:	454d      	cmp	r5, r9
    a3e4:	d1f7      	bne.n	a3d6 <main+0x1f6>
    a3e6:	e75a      	b.n	a29e <main+0xbe>
			grid_sys_state.alert_state--;
    a3e8:	4b1f      	ldr	r3, [pc, #124]	; (a468 <main+0x288>)
    a3ea:	889b      	ldrh	r3, [r3, #4]
    a3ec:	3b01      	subs	r3, #1
    a3ee:	b29b      	uxth	r3, r3
    a3f0:	4a1d      	ldr	r2, [pc, #116]	; (a468 <main+0x288>)
    a3f2:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    a3f4:	4610      	mov	r0, r2
    a3f6:	4b3c      	ldr	r3, [pc, #240]	; (a4e8 <main+0x308>)
    a3f8:	4798      	blx	r3
    a3fa:	b998      	cbnz	r0, a424 <main+0x244>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    a3fc:	481a      	ldr	r0, [pc, #104]	; (a468 <main+0x288>)
    a3fe:	4b3b      	ldr	r3, [pc, #236]	; (a4ec <main+0x30c>)
    a400:	4798      	blx	r3
    a402:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a404:	7863      	ldrb	r3, [r4, #1]
    a406:	2b00      	cmp	r3, #0
    a408:	d097      	beq.n	a33a <main+0x15a>
    a40a:	465d      	mov	r5, fp
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    a40c:	4f38      	ldr	r7, [pc, #224]	; (a4f0 <main+0x310>)
    a40e:	4633      	mov	r3, r6
    a410:	2201      	movs	r2, #1
    a412:	4629      	mov	r1, r5
    a414:	4620      	mov	r0, r4
    a416:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a418:	3501      	adds	r5, #1
    a41a:	b2ed      	uxtb	r5, r5
    a41c:	7863      	ldrb	r3, [r4, #1]
    a41e:	42ab      	cmp	r3, r5
    a420:	d8f5      	bhi.n	a40e <main+0x22e>
    a422:	e78a      	b.n	a33a <main+0x15a>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    a424:	4810      	ldr	r0, [pc, #64]	; (a468 <main+0x288>)
    a426:	4b33      	ldr	r3, [pc, #204]	; (a4f4 <main+0x314>)
    a428:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    a42a:	480f      	ldr	r0, [pc, #60]	; (a468 <main+0x288>)
    a42c:	4b32      	ldr	r3, [pc, #200]	; (a4f8 <main+0x318>)
    a42e:	4798      	blx	r3
    a430:	9004      	str	r0, [sp, #16]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    a432:	480d      	ldr	r0, [pc, #52]	; (a468 <main+0x288>)
    a434:	4b31      	ldr	r3, [pc, #196]	; (a4fc <main+0x31c>)
    a436:	4798      	blx	r3
    a438:	9005      	str	r0, [sp, #20]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    a43a:	480b      	ldr	r0, [pc, #44]	; (a468 <main+0x288>)
    a43c:	4b30      	ldr	r3, [pc, #192]	; (a500 <main+0x320>)
    a43e:	4798      	blx	r3
    a440:	9006      	str	r0, [sp, #24]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a442:	f04f 0900 	mov.w	r9, #0
    a446:	e0a1      	b.n	a58c <main+0x3ac>
    a448:	000002d1 	.word	0x000002d1
    a44c:	0000e274 	.word	0x0000e274
    a450:	0000c545 	.word	0x0000c545
    a454:	0000b0e1 	.word	0x0000b0e1
    a458:	0000ba89 	.word	0x0000ba89
    a45c:	000024c5 	.word	0x000024c5
    a460:	00003a99 	.word	0x00003a99
    a464:	200036c4 	.word	0x200036c4
    a468:	20001d30 	.word	0x20001d30
    a46c:	00003b89 	.word	0x00003b89
    a470:	0000a15d 	.word	0x0000a15d
    a474:	0000e284 	.word	0x0000e284
    a478:	0000206f 	.word	0x0000206f
    a47c:	00005ae1 	.word	0x00005ae1
    a480:	0000e298 	.word	0x0000e298
    a484:	0000e05c 	.word	0x0000e05c
    a488:	0000e2d0 	.word	0x0000e2d0
    a48c:	0000c45d 	.word	0x0000c45d
    a490:	0000a0e9 	.word	0x0000a0e9
    a494:	20003140 	.word	0x20003140
    a498:	200021e0 	.word	0x200021e0
    a49c:	20001808 	.word	0x20001808
    a4a0:	00004179 	.word	0x00004179
    a4a4:	000016e1 	.word	0x000016e1
    a4a8:	00001eb1 	.word	0x00001eb1
    a4ac:	20002c28 	.word	0x20002c28
    a4b0:	000018ad 	.word	0x000018ad
    a4b4:	00001d51 	.word	0x00001d51
    a4b8:	00001f99 	.word	0x00001f99
    a4bc:	000022d1 	.word	0x000022d1
    a4c0:	000024b9 	.word	0x000024b9
    a4c4:	0000248d 	.word	0x0000248d
    a4c8:	0000396d 	.word	0x0000396d
    a4cc:	00003969 	.word	0x00003969
    a4d0:	20000d68 	.word	0x20000d68
    a4d4:	0000c2f3 	.word	0x0000c2f3
    a4d8:	20003c1c 	.word	0x20003c1c
    a4dc:	000099dd 	.word	0x000099dd
    a4e0:	0000e2a8 	.word	0x0000e2a8
    a4e4:	0000e2c4 	.word	0x0000e2c4
    a4e8:	0000397b 	.word	0x0000397b
    a4ec:	00003985 	.word	0x00003985
    a4f0:	000020b9 	.word	0x000020b9
    a4f4:	0000397f 	.word	0x0000397f
    a4f8:	000039eb 	.word	0x000039eb
    a4fc:	000039ef 	.word	0x000039ef
    a500:	000039f3 	.word	0x000039f3
    a504:	00001fdd 	.word	0x00001fdd
    a508:	00001f95 	.word	0x00001f95
    a50c:	20003c18 	.word	0x20003c18
    a510:	00002025 	.word	0x00002025
    a514:	200012ac 	.word	0x200012ac
    a518:	2000270c 	.word	0x2000270c
    a51c:	0000e2cc 	.word	0x0000e2cc
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    a520:	f8cd b004 	str.w	fp, [sp, #4]
    a524:	f8cd b000 	str.w	fp, [sp]
    a528:	465b      	mov	r3, fp
    a52a:	2201      	movs	r2, #1
    a52c:	4629      	mov	r1, r5
    a52e:	4620      	mov	r0, r4
    a530:	4e21      	ldr	r6, [pc, #132]	; (a5b8 <main+0x3d8>)
    a532:	47b0      	blx	r6
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    a534:	f8df 80a8 	ldr.w	r8, [pc, #168]	; a5e0 <main+0x400>
    a538:	9804      	ldr	r0, [sp, #16]
    a53a:	47c0      	blx	r8
    a53c:	4f1f      	ldr	r7, [pc, #124]	; (a5bc <main+0x3dc>)
    a53e:	2200      	movs	r2, #0
    a540:	4b1f      	ldr	r3, [pc, #124]	; (a5c0 <main+0x3e0>)
    a542:	47b8      	blx	r7
    a544:	4e1f      	ldr	r6, [pc, #124]	; (a5c4 <main+0x3e4>)
    a546:	47b0      	blx	r6
    a548:	b2c2      	uxtb	r2, r0
    a54a:	9207      	str	r2, [sp, #28]
    a54c:	9806      	ldr	r0, [sp, #24]
    a54e:	47c0      	blx	r8
    a550:	2200      	movs	r2, #0
    a552:	4b1b      	ldr	r3, [pc, #108]	; (a5c0 <main+0x3e0>)
    a554:	47b8      	blx	r7
    a556:	47b0      	blx	r6
    a558:	b2c0      	uxtb	r0, r0
    a55a:	9001      	str	r0, [sp, #4]
    a55c:	9805      	ldr	r0, [sp, #20]
    a55e:	47c0      	blx	r8
    a560:	2200      	movs	r2, #0
    a562:	4b17      	ldr	r3, [pc, #92]	; (a5c0 <main+0x3e0>)
    a564:	47b8      	blx	r7
    a566:	47b0      	blx	r6
    a568:	b2c0      	uxtb	r0, r0
    a56a:	9000      	str	r0, [sp, #0]
    a56c:	9b07      	ldr	r3, [sp, #28]
    a56e:	2201      	movs	r2, #1
    a570:	4629      	mov	r1, r5
    a572:	4620      	mov	r0, r4
    a574:	4e14      	ldr	r6, [pc, #80]	; (a5c8 <main+0x3e8>)
    a576:	47b0      	blx	r6
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    a578:	9a06      	ldr	r2, [sp, #24]
    a57a:	9201      	str	r2, [sp, #4]
    a57c:	9a05      	ldr	r2, [sp, #20]
    a57e:	9200      	str	r2, [sp, #0]
    a580:	9b04      	ldr	r3, [sp, #16]
    a582:	2201      	movs	r2, #1
    a584:	4629      	mov	r1, r5
    a586:	4620      	mov	r0, r4
    a588:	4d10      	ldr	r5, [pc, #64]	; (a5cc <main+0x3ec>)
    a58a:	47a8      	blx	r5
    a58c:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a590:	4620      	mov	r0, r4
    a592:	4b0f      	ldr	r3, [pc, #60]	; (a5d0 <main+0x3f0>)
    a594:	4798      	blx	r3
    a596:	f109 0901 	add.w	r9, r9, #1
    a59a:	42a8      	cmp	r0, r5
    a59c:	d8c0      	bhi.n	a520 <main+0x340>
    a59e:	e72d      	b.n	a3fc <main+0x21c>
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){			
				delay_us(1);			
    a5a0:	2001      	movs	r0, #1
    a5a2:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){			
    a5a4:	4639      	mov	r1, r7
    a5a6:	480b      	ldr	r0, [pc, #44]	; (a5d4 <main+0x3f4>)
    a5a8:	47a8      	blx	r5
    a5aa:	280f      	cmp	r0, #15
    a5ac:	d9f8      	bls.n	a5a0 <main+0x3c0>
    a5ae:	e6de      	b.n	a36e <main+0x18e>
    a5b0:	4d09      	ldr	r5, [pc, #36]	; (a5d8 <main+0x3f8>)
				delay_us(1);			
    a5b2:	4e0a      	ldr	r6, [pc, #40]	; (a5dc <main+0x3fc>)
    a5b4:	9f03      	ldr	r7, [sp, #12]
    a5b6:	e7f5      	b.n	a5a4 <main+0x3c4>
    a5b8:	00001fdd 	.word	0x00001fdd
    a5bc:	0000be21 	.word	0x0000be21
    a5c0:	3fe00000 	.word	0x3fe00000
    a5c4:	0000c245 	.word	0x0000c245
    a5c8:	00002025 	.word	0x00002025
    a5cc:	0000206f 	.word	0x0000206f
    a5d0:	00001f95 	.word	0x00001f95
    a5d4:	20001d30 	.word	0x20001d30
    a5d8:	0000396d 	.word	0x0000396d
    a5dc:	00004a19 	.word	0x00004a19
    a5e0:	0000bd55 	.word	0x0000bd55

0000a5e4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a5e4:	b940      	cbnz	r0, a5f8 <_read+0x14>
{
    a5e6:	b508      	push	{r3, lr}
    a5e8:	460b      	mov	r3, r1
    a5ea:	4611      	mov	r1, r2
    a5ec:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a5ee:	4b04      	ldr	r3, [pc, #16]	; (a600 <_read+0x1c>)
    a5f0:	4798      	blx	r3
    a5f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a5f6:	bd08      	pop	{r3, pc}
		return -1;
    a5f8:	f04f 30ff 	mov.w	r0, #4294967295
    a5fc:	4770      	bx	lr
    a5fe:	bf00      	nop
    a600:	0000a655 	.word	0x0000a655

0000a604 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a604:	3801      	subs	r0, #1
    a606:	2802      	cmp	r0, #2
    a608:	d808      	bhi.n	a61c <_write+0x18>
{
    a60a:	b508      	push	{r3, lr}
    a60c:	460b      	mov	r3, r1
    a60e:	4611      	mov	r1, r2
    a610:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a612:	4b04      	ldr	r3, [pc, #16]	; (a624 <_write+0x20>)
    a614:	4798      	blx	r3
    a616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a61a:	bd08      	pop	{r3, pc}
		return -1;
    a61c:	f04f 30ff 	mov.w	r0, #4294967295
    a620:	4770      	bx	lr
    a622:	bf00      	nop
    a624:	0000a679 	.word	0x0000a679

0000a628 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a628:	b570      	push	{r4, r5, r6, lr}
    a62a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a62c:	4d06      	ldr	r5, [pc, #24]	; (a648 <stdio_io_init+0x20>)
    a62e:	682b      	ldr	r3, [r5, #0]
    a630:	2100      	movs	r1, #0
    a632:	6898      	ldr	r0, [r3, #8]
    a634:	4c05      	ldr	r4, [pc, #20]	; (a64c <stdio_io_init+0x24>)
    a636:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a638:	682b      	ldr	r3, [r5, #0]
    a63a:	2100      	movs	r1, #0
    a63c:	6858      	ldr	r0, [r3, #4]
    a63e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a640:	4b03      	ldr	r3, [pc, #12]	; (a650 <stdio_io_init+0x28>)
    a642:	601e      	str	r6, [r3, #0]
    a644:	bd70      	pop	{r4, r5, r6, pc}
    a646:	bf00      	nop
    a648:	20000558 	.word	0x20000558
    a64c:	0000c575 	.word	0x0000c575
    a650:	20000e50 	.word	0x20000e50

0000a654 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a654:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a656:	4b06      	ldr	r3, [pc, #24]	; (a670 <stdio_io_read+0x1c>)
    a658:	681b      	ldr	r3, [r3, #0]
    a65a:	b133      	cbz	r3, a66a <stdio_io_read+0x16>
    a65c:	460a      	mov	r2, r1
    a65e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a660:	b292      	uxth	r2, r2
    a662:	4618      	mov	r0, r3
    a664:	4b03      	ldr	r3, [pc, #12]	; (a674 <stdio_io_read+0x20>)
    a666:	4798      	blx	r3
    a668:	bd08      	pop	{r3, pc}
		return 0;
    a66a:	2000      	movs	r0, #0
}
    a66c:	bd08      	pop	{r3, pc}
    a66e:	bf00      	nop
    a670:	20000e50 	.word	0x20000e50
    a674:	00004bf5 	.word	0x00004bf5

0000a678 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a678:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a67a:	4b06      	ldr	r3, [pc, #24]	; (a694 <stdio_io_write+0x1c>)
    a67c:	681b      	ldr	r3, [r3, #0]
    a67e:	b133      	cbz	r3, a68e <stdio_io_write+0x16>
    a680:	460a      	mov	r2, r1
    a682:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a684:	b292      	uxth	r2, r2
    a686:	4618      	mov	r0, r3
    a688:	4b03      	ldr	r3, [pc, #12]	; (a698 <stdio_io_write+0x20>)
    a68a:	4798      	blx	r3
    a68c:	bd08      	pop	{r3, pc}
		return 0;
    a68e:	2000      	movs	r0, #0
}
    a690:	bd08      	pop	{r3, pc}
    a692:	bf00      	nop
    a694:	20000e50 	.word	0x20000e50
    a698:	00004bc5 	.word	0x00004bc5

0000a69c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a69c:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    a69e:	4c04      	ldr	r4, [pc, #16]	; (a6b0 <stdio_redirect_init+0x14>)
    a6a0:	4620      	mov	r0, r4
    a6a2:	4b04      	ldr	r3, [pc, #16]	; (a6b4 <stdio_redirect_init+0x18>)
    a6a4:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    a6a6:	4620      	mov	r0, r4
    a6a8:	4b03      	ldr	r3, [pc, #12]	; (a6b8 <stdio_redirect_init+0x1c>)
    a6aa:	4798      	blx	r3
    a6ac:	bd10      	pop	{r4, pc}
    a6ae:	bf00      	nop
    a6b0:	2000104c 	.word	0x2000104c
    a6b4:	000057d5 	.word	0x000057d5
    a6b8:	0000a629 	.word	0x0000a629

0000a6bc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6be:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a6c0:	780b      	ldrb	r3, [r1, #0]
    a6c2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    a6c6:	2c01      	cmp	r4, #1
    a6c8:	d15e      	bne.n	a788 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a6ca:	888c      	ldrh	r4, [r1, #4]
    a6cc:	4d35      	ldr	r5, [pc, #212]	; (a7a4 <cdcdf_acm_req+0xe8>)
    a6ce:	782d      	ldrb	r5, [r5, #0]
    a6d0:	42a5      	cmp	r5, r4
    a6d2:	d003      	beq.n	a6dc <cdcdf_acm_req+0x20>
    a6d4:	4d33      	ldr	r5, [pc, #204]	; (a7a4 <cdcdf_acm_req+0xe8>)
    a6d6:	786d      	ldrb	r5, [r5, #1]
    a6d8:	42a5      	cmp	r5, r4
    a6da:	d158      	bne.n	a78e <cdcdf_acm_req+0xd2>
    a6dc:	4616      	mov	r6, r2
    a6de:	460c      	mov	r4, r1
    a6e0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a6e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    a6e6:	d10c      	bne.n	a702 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    a6e8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a6ea:	4b2f      	ldr	r3, [pc, #188]	; (a7a8 <cdcdf_acm_req+0xec>)
    a6ec:	4798      	blx	r3
    a6ee:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a6f0:	7863      	ldrb	r3, [r4, #1]
    a6f2:	2b20      	cmp	r3, #32
    a6f4:	d013      	beq.n	a71e <cdcdf_acm_req+0x62>
    a6f6:	2b22      	cmp	r3, #34	; 0x22
    a6f8:	d032      	beq.n	a760 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    a6fa:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a6fe:	b003      	add	sp, #12
    a700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    a702:	2a01      	cmp	r2, #1
    a704:	d046      	beq.n	a794 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    a706:	784b      	ldrb	r3, [r1, #1]
    a708:	2b21      	cmp	r3, #33	; 0x21
    a70a:	d145      	bne.n	a798 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a70c:	88cb      	ldrh	r3, [r1, #6]
    a70e:	2b07      	cmp	r3, #7
    a710:	d145      	bne.n	a79e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a712:	2300      	movs	r3, #0
    a714:	2207      	movs	r2, #7
    a716:	4925      	ldr	r1, [pc, #148]	; (a7ac <cdcdf_acm_req+0xf0>)
    a718:	4c25      	ldr	r4, [pc, #148]	; (a7b0 <cdcdf_acm_req+0xf4>)
    a71a:	47a0      	blx	r4
    a71c:	e7ef      	b.n	a6fe <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a71e:	2f07      	cmp	r7, #7
    a720:	d12b      	bne.n	a77a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    a722:	b1be      	cbz	r6, a754 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a724:	6800      	ldr	r0, [r0, #0]
    a726:	9000      	str	r0, [sp, #0]
    a728:	888a      	ldrh	r2, [r1, #4]
    a72a:	798b      	ldrb	r3, [r1, #6]
    a72c:	f8ad 2004 	strh.w	r2, [sp, #4]
    a730:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a734:	4b1b      	ldr	r3, [pc, #108]	; (a7a4 <cdcdf_acm_req+0xe8>)
    a736:	691b      	ldr	r3, [r3, #16]
    a738:	b113      	cbz	r3, a740 <cdcdf_acm_req+0x84>
    a73a:	4668      	mov	r0, sp
    a73c:	4798      	blx	r3
    a73e:	b1f8      	cbz	r0, a780 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    a740:	4b18      	ldr	r3, [pc, #96]	; (a7a4 <cdcdf_acm_req+0xe8>)
    a742:	aa02      	add	r2, sp, #8
    a744:	e912 0003 	ldmdb	r2, {r0, r1}
    a748:	6098      	str	r0, [r3, #8]
    a74a:	8199      	strh	r1, [r3, #12]
    a74c:	0c09      	lsrs	r1, r1, #16
    a74e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    a750:	2000      	movs	r0, #0
    a752:	e7d4      	b.n	a6fe <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a754:	2300      	movs	r3, #0
    a756:	2207      	movs	r2, #7
    a758:	4628      	mov	r0, r5
    a75a:	4c15      	ldr	r4, [pc, #84]	; (a7b0 <cdcdf_acm_req+0xf4>)
    a75c:	47a0      	blx	r4
    a75e:	e7ce      	b.n	a6fe <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    a760:	2300      	movs	r3, #0
    a762:	461a      	mov	r2, r3
    a764:	4619      	mov	r1, r3
    a766:	4618      	mov	r0, r3
    a768:	4d11      	ldr	r5, [pc, #68]	; (a7b0 <cdcdf_acm_req+0xf4>)
    a76a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    a76c:	4b0d      	ldr	r3, [pc, #52]	; (a7a4 <cdcdf_acm_req+0xe8>)
    a76e:	695b      	ldr	r3, [r3, #20]
    a770:	b143      	cbz	r3, a784 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    a772:	8860      	ldrh	r0, [r4, #2]
    a774:	4798      	blx	r3
		return ERR_NONE;
    a776:	2000      	movs	r0, #0
    a778:	e7c1      	b.n	a6fe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a77a:	f04f 30ff 	mov.w	r0, #4294967295
    a77e:	e7be      	b.n	a6fe <cdcdf_acm_req+0x42>
			return ERR_NONE;
    a780:	2000      	movs	r0, #0
    a782:	e7bc      	b.n	a6fe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a784:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    a786:	e7ba      	b.n	a6fe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a788:	f06f 0009 	mvn.w	r0, #9
    a78c:	e7b7      	b.n	a6fe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a78e:	f06f 0009 	mvn.w	r0, #9
    a792:	e7b4      	b.n	a6fe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a794:	2000      	movs	r0, #0
    a796:	e7b2      	b.n	a6fe <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    a798:	f06f 000c 	mvn.w	r0, #12
    a79c:	e7af      	b.n	a6fe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a79e:	f04f 30ff 	mov.w	r0, #4294967295
    a7a2:	e7ac      	b.n	a6fe <cdcdf_acm_req+0x42>
    a7a4:	20000e54 	.word	0x20000e54
    a7a8:	0000b805 	.word	0x0000b805
    a7ac:	20000e5c 	.word	0x20000e5c
    a7b0:	0000b2e1 	.word	0x0000b2e1

0000a7b4 <cdcdf_acm_ctrl>:
{
    a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7b8:	b083      	sub	sp, #12
    a7ba:	4616      	mov	r6, r2
	switch (ctrl) {
    a7bc:	2901      	cmp	r1, #1
    a7be:	d066      	beq.n	a88e <cdcdf_acm_ctrl+0xda>
    a7c0:	b141      	cbz	r1, a7d4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    a7c2:	2902      	cmp	r1, #2
    a7c4:	bf0c      	ite	eq
    a7c6:	f06f 001a 	mvneq.w	r0, #26
    a7ca:	f06f 000c 	mvnne.w	r0, #12
}
    a7ce:	b003      	add	sp, #12
    a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a7d4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    a7d8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a7da:	2800      	cmp	r0, #0
    a7dc:	f000 8085 	beq.w	a8ea <cdcdf_acm_ctrl+0x136>
    a7e0:	f10a 3bff 	add.w	fp, sl, #4294967295
    a7e4:	f10a 0301 	add.w	r3, sl, #1
    a7e8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a7ea:	4f46      	ldr	r7, [pc, #280]	; (a904 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    a7ec:	f8df 9124 	ldr.w	r9, [pc, #292]	; a914 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a7f0:	f8df 8124 	ldr.w	r8, [pc, #292]	; a918 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    a7f4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a7f6:	7943      	ldrb	r3, [r0, #5]
    a7f8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a7fc:	2b02      	cmp	r3, #2
    a7fe:	d002      	beq.n	a806 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    a800:	f06f 0009 	mvn.w	r0, #9
    a804:	e7e3      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
    a806:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a80a:	f89b 3000 	ldrb.w	r3, [fp]
    a80e:	429a      	cmp	r2, r3
    a810:	d06e      	beq.n	a8f0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a812:	2bff      	cmp	r3, #255	; 0xff
    a814:	d16f      	bne.n	a8f6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a816:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a81a:	2205      	movs	r2, #5
    a81c:	6871      	ldr	r1, [r6, #4]
    a81e:	4b3a      	ldr	r3, [pc, #232]	; (a908 <cdcdf_acm_ctrl+0x154>)
    a820:	4798      	blx	r3
		while (NULL != ep) {
    a822:	4604      	mov	r4, r0
    a824:	b1f8      	cbz	r0, a866 <cdcdf_acm_ctrl+0xb2>
    a826:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    a82a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    a82c:	7963      	ldrb	r3, [r4, #5]
    a82e:	7922      	ldrb	r2, [r4, #4]
    a830:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a834:	b292      	uxth	r2, r2
    a836:	78e1      	ldrb	r1, [r4, #3]
    a838:	4628      	mov	r0, r5
    a83a:	47b8      	blx	r7
    a83c:	2800      	cmp	r0, #0
    a83e:	d15d      	bne.n	a8fc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a840:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a844:	bf14      	ite	ne
    a846:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a84a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a84e:	4628      	mov	r0, r5
    a850:	47c8      	blx	r9
			desc->sod = ep;
    a852:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a854:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a856:	6871      	ldr	r1, [r6, #4]
    a858:	4420      	add	r0, r4
    a85a:	47c0      	blx	r8
		while (NULL != ep) {
    a85c:	4604      	mov	r4, r0
    a85e:	2800      	cmp	r0, #0
    a860:	d1e3      	bne.n	a82a <cdcdf_acm_ctrl+0x76>
    a862:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a866:	6833      	ldr	r3, [r6, #0]
    a868:	7818      	ldrb	r0, [r3, #0]
    a86a:	2204      	movs	r2, #4
    a86c:	6871      	ldr	r1, [r6, #4]
    a86e:	4418      	add	r0, r3
    a870:	4b25      	ldr	r3, [pc, #148]	; (a908 <cdcdf_acm_ctrl+0x154>)
    a872:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a874:	9b00      	ldr	r3, [sp, #0]
    a876:	459b      	cmp	fp, r3
    a878:	d004      	beq.n	a884 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a87a:	2800      	cmp	r0, #0
    a87c:	d1ba      	bne.n	a7f4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a87e:	f06f 0009 	mvn.w	r0, #9
    a882:	e7a4      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a884:	2201      	movs	r2, #1
    a886:	4b21      	ldr	r3, [pc, #132]	; (a90c <cdcdf_acm_ctrl+0x158>)
    a888:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a88a:	2000      	movs	r0, #0
    a88c:	e79f      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a88e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a890:	b142      	cbz	r2, a8a4 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a892:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a894:	795b      	ldrb	r3, [r3, #5]
    a896:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a89a:	2b02      	cmp	r3, #2
    a89c:	d002      	beq.n	a8a4 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    a89e:	f06f 0009 	mvn.w	r0, #9
    a8a2:	e794      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    a8a4:	7823      	ldrb	r3, [r4, #0]
    a8a6:	2bff      	cmp	r3, #255	; 0xff
    a8a8:	d008      	beq.n	a8bc <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    a8aa:	23ff      	movs	r3, #255	; 0xff
    a8ac:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a8ae:	78a0      	ldrb	r0, [r4, #2]
    a8b0:	4298      	cmp	r0, r3
    a8b2:	d003      	beq.n	a8bc <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a8b4:	4b16      	ldr	r3, [pc, #88]	; (a910 <cdcdf_acm_ctrl+0x15c>)
    a8b6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a8b8:	23ff      	movs	r3, #255	; 0xff
    a8ba:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a8bc:	7863      	ldrb	r3, [r4, #1]
    a8be:	2bff      	cmp	r3, #255	; 0xff
    a8c0:	d008      	beq.n	a8d4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    a8c2:	23ff      	movs	r3, #255	; 0xff
    a8c4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a8c6:	78e0      	ldrb	r0, [r4, #3]
    a8c8:	4298      	cmp	r0, r3
    a8ca:	d003      	beq.n	a8d4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a8cc:	4b10      	ldr	r3, [pc, #64]	; (a910 <cdcdf_acm_ctrl+0x15c>)
    a8ce:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a8d0:	23ff      	movs	r3, #255	; 0xff
    a8d2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a8d4:	7920      	ldrb	r0, [r4, #4]
    a8d6:	28ff      	cmp	r0, #255	; 0xff
    a8d8:	d003      	beq.n	a8e2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    a8da:	4b0d      	ldr	r3, [pc, #52]	; (a910 <cdcdf_acm_ctrl+0x15c>)
    a8dc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a8de:	23ff      	movs	r3, #255	; 0xff
    a8e0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a8e2:	2000      	movs	r0, #0
    a8e4:	4b09      	ldr	r3, [pc, #36]	; (a90c <cdcdf_acm_ctrl+0x158>)
    a8e6:	7158      	strb	r0, [r3, #5]
    a8e8:	e771      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    a8ea:	f06f 0009 	mvn.w	r0, #9
    a8ee:	e76e      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    a8f0:	f06f 0011 	mvn.w	r0, #17
    a8f4:	e76b      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    a8f6:	f06f 001b 	mvn.w	r0, #27
    a8fa:	e768      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    a8fc:	f06f 0013 	mvn.w	r0, #19
    a900:	e765      	b.n	a7ce <cdcdf_acm_ctrl+0x1a>
    a902:	bf00      	nop
    a904:	00005af9 	.word	0x00005af9
    a908:	0000b825 	.word	0x0000b825
    a90c:	20000e54 	.word	0x20000e54
    a910:	00005b61 	.word	0x00005b61
    a914:	00005b8d 	.word	0x00005b8d
    a918:	0000b85f 	.word	0x0000b85f

0000a91c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a91c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a91e:	4b0a      	ldr	r3, [pc, #40]	; (a948 <cdcdf_acm_init+0x2c>)
    a920:	4798      	blx	r3
    a922:	2801      	cmp	r0, #1
    a924:	d80c      	bhi.n	a940 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a926:	4809      	ldr	r0, [pc, #36]	; (a94c <cdcdf_acm_init+0x30>)
    a928:	4b09      	ldr	r3, [pc, #36]	; (a950 <cdcdf_acm_init+0x34>)
    a92a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a92c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a92e:	3018      	adds	r0, #24
    a930:	4b08      	ldr	r3, [pc, #32]	; (a954 <cdcdf_acm_init+0x38>)
    a932:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a934:	4908      	ldr	r1, [pc, #32]	; (a958 <cdcdf_acm_init+0x3c>)
    a936:	2001      	movs	r0, #1
    a938:	4b08      	ldr	r3, [pc, #32]	; (a95c <cdcdf_acm_init+0x40>)
    a93a:	4798      	blx	r3
	return ERR_NONE;
    a93c:	2000      	movs	r0, #0
    a93e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a940:	f06f 0010 	mvn.w	r0, #16
}
    a944:	bd08      	pop	{r3, pc}
    a946:	bf00      	nop
    a948:	0000b811 	.word	0x0000b811
    a94c:	20000e54 	.word	0x20000e54
    a950:	0000a7b5 	.word	0x0000a7b5
    a954:	0000b7b1 	.word	0x0000b7b1
    a958:	20000398 	.word	0x20000398
    a95c:	0000b71d 	.word	0x0000b71d

0000a960 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a960:	4b07      	ldr	r3, [pc, #28]	; (a980 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a962:	795b      	ldrb	r3, [r3, #5]
    a964:	b143      	cbz	r3, a978 <cdcdf_acm_write+0x18>
{
    a966:	b510      	push	{r4, lr}
    a968:	460a      	mov	r2, r1
    a96a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a96c:	2301      	movs	r3, #1
    a96e:	4804      	ldr	r0, [pc, #16]	; (a980 <cdcdf_acm_write+0x20>)
    a970:	78c0      	ldrb	r0, [r0, #3]
    a972:	4c04      	ldr	r4, [pc, #16]	; (a984 <cdcdf_acm_write+0x24>)
    a974:	47a0      	blx	r4
    a976:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    a978:	f06f 0010 	mvn.w	r0, #16
    a97c:	4770      	bx	lr
    a97e:	bf00      	nop
    a980:	20000e54 	.word	0x20000e54
    a984:	0000b2e1 	.word	0x0000b2e1

0000a988 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a988:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a98a:	780b      	ldrb	r3, [r1, #0]
    a98c:	2b81      	cmp	r3, #129	; 0x81
    a98e:	d010      	beq.n	a9b2 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a990:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a994:	2b01      	cmp	r3, #1
    a996:	d13f      	bne.n	aa18 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a998:	888a      	ldrh	r2, [r1, #4]
    a99a:	4b22      	ldr	r3, [pc, #136]	; (aa24 <hid_keyboard_req+0x9c>)
    a99c:	7b1b      	ldrb	r3, [r3, #12]
    a99e:	429a      	cmp	r2, r3
    a9a0:	d13d      	bne.n	aa1e <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a9a2:	784b      	ldrb	r3, [r1, #1]
    a9a4:	2b03      	cmp	r3, #3
    a9a6:	d028      	beq.n	a9fa <hid_keyboard_req+0x72>
    a9a8:	2b0b      	cmp	r3, #11
    a9aa:	d02c      	beq.n	aa06 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a9ac:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a9b0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a9b2:	784b      	ldrb	r3, [r1, #1]
    a9b4:	2b06      	cmp	r3, #6
    a9b6:	d002      	beq.n	a9be <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a9b8:	f06f 0009 	mvn.w	r0, #9
    a9bc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a9be:	888a      	ldrh	r2, [r1, #4]
    a9c0:	4b18      	ldr	r3, [pc, #96]	; (aa24 <hid_keyboard_req+0x9c>)
    a9c2:	7b1b      	ldrb	r3, [r3, #12]
    a9c4:	429a      	cmp	r2, r3
    a9c6:	d002      	beq.n	a9ce <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a9c8:	f06f 0009 	mvn.w	r0, #9
    a9cc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a9ce:	884b      	ldrh	r3, [r1, #2]
    a9d0:	0a1b      	lsrs	r3, r3, #8
    a9d2:	2b21      	cmp	r3, #33	; 0x21
    a9d4:	d004      	beq.n	a9e0 <hid_keyboard_req+0x58>
    a9d6:	2b22      	cmp	r3, #34	; 0x22
    a9d8:	d009      	beq.n	a9ee <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a9da:	f06f 000c 	mvn.w	r0, #12
    a9de:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a9e0:	4b10      	ldr	r3, [pc, #64]	; (aa24 <hid_keyboard_req+0x9c>)
    a9e2:	6819      	ldr	r1, [r3, #0]
    a9e4:	2300      	movs	r3, #0
    a9e6:	780a      	ldrb	r2, [r1, #0]
    a9e8:	4c0f      	ldr	r4, [pc, #60]	; (aa28 <hid_keyboard_req+0xa0>)
    a9ea:	47a0      	blx	r4
    a9ec:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a9ee:	2300      	movs	r3, #0
    a9f0:	223b      	movs	r2, #59	; 0x3b
    a9f2:	490e      	ldr	r1, [pc, #56]	; (aa2c <hid_keyboard_req+0xa4>)
    a9f4:	4c0c      	ldr	r4, [pc, #48]	; (aa28 <hid_keyboard_req+0xa0>)
    a9f6:	47a0      	blx	r4
    a9f8:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a9fa:	2300      	movs	r3, #0
    a9fc:	2201      	movs	r2, #1
    a9fe:	490c      	ldr	r1, [pc, #48]	; (aa30 <hid_keyboard_req+0xa8>)
    aa00:	4c09      	ldr	r4, [pc, #36]	; (aa28 <hid_keyboard_req+0xa0>)
    aa02:	47a0      	blx	r4
    aa04:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    aa06:	884a      	ldrh	r2, [r1, #2]
    aa08:	4b06      	ldr	r3, [pc, #24]	; (aa24 <hid_keyboard_req+0x9c>)
    aa0a:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    aa0c:	2300      	movs	r3, #0
    aa0e:	461a      	mov	r2, r3
    aa10:	4619      	mov	r1, r3
    aa12:	4c05      	ldr	r4, [pc, #20]	; (aa28 <hid_keyboard_req+0xa0>)
    aa14:	47a0      	blx	r4
    aa16:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    aa18:	f06f 0009 	mvn.w	r0, #9
    aa1c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    aa1e:	f06f 0009 	mvn.w	r0, #9
    aa22:	bd10      	pop	{r4, pc}
    aa24:	20000e78 	.word	0x20000e78
    aa28:	0000b2e1 	.word	0x0000b2e1
    aa2c:	0000e2f4 	.word	0x0000e2f4
    aa30:	20000e87 	.word	0x20000e87

0000aa34 <hid_keyboard_ctrl>:
{
    aa34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa38:	4614      	mov	r4, r2
	switch (ctrl) {
    aa3a:	2901      	cmp	r1, #1
    aa3c:	d050      	beq.n	aae0 <hid_keyboard_ctrl+0xac>
    aa3e:	b141      	cbz	r1, aa52 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    aa40:	2902      	cmp	r1, #2
    aa42:	bf0c      	ite	eq
    aa44:	f06f 051a 	mvneq.w	r5, #26
    aa48:	f06f 050c 	mvnne.w	r5, #12
}
    aa4c:	4628      	mov	r0, r5
    aa4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    aa52:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    aa56:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    aa58:	2b00      	cmp	r3, #0
    aa5a:	d05e      	beq.n	ab1a <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    aa5c:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    aa5e:	795b      	ldrb	r3, [r3, #5]
    aa60:	2b03      	cmp	r3, #3
    aa62:	d15d      	bne.n	ab20 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    aa64:	f898 300c 	ldrb.w	r3, [r8, #12]
    aa68:	429a      	cmp	r2, r3
    aa6a:	d05c      	beq.n	ab26 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    aa6c:	2bff      	cmp	r3, #255	; 0xff
    aa6e:	d15d      	bne.n	ab2c <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    aa70:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    aa74:	6823      	ldr	r3, [r4, #0]
    aa76:	7818      	ldrb	r0, [r3, #0]
    aa78:	2221      	movs	r2, #33	; 0x21
    aa7a:	6861      	ldr	r1, [r4, #4]
    aa7c:	4418      	add	r0, r3
    aa7e:	4b31      	ldr	r3, [pc, #196]	; (ab44 <hid_keyboard_ctrl+0x110>)
    aa80:	4798      	blx	r3
    aa82:	4b31      	ldr	r3, [pc, #196]	; (ab48 <hid_keyboard_ctrl+0x114>)
    aa84:	6018      	str	r0, [r3, #0]
    aa86:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aa88:	f8df 90c4 	ldr.w	r9, [pc, #196]	; ab50 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aa8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; ab54 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    aa90:	f8df b0c4 	ldr.w	fp, [pc, #196]	; ab58 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aa94:	6823      	ldr	r3, [r4, #0]
    aa96:	7818      	ldrb	r0, [r3, #0]
    aa98:	6861      	ldr	r1, [r4, #4]
    aa9a:	4418      	add	r0, r3
    aa9c:	47c8      	blx	r9
		desc->sod = ep;
    aa9e:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    aaa0:	2800      	cmp	r0, #0
    aaa2:	d046      	beq.n	ab32 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    aaa4:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    aaa6:	7943      	ldrb	r3, [r0, #5]
    aaa8:	7902      	ldrb	r2, [r0, #4]
    aaaa:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aaae:	b292      	uxth	r2, r2
    aab0:	78c1      	ldrb	r1, [r0, #3]
    aab2:	4638      	mov	r0, r7
    aab4:	47d0      	blx	sl
    aab6:	4605      	mov	r5, r0
    aab8:	2800      	cmp	r0, #0
    aaba:	d13d      	bne.n	ab38 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    aabc:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    aac0:	bf14      	ite	ne
    aac2:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    aac6:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    aaca:	4638      	mov	r0, r7
    aacc:	47d8      	blx	fp
    aace:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    aad0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    aad4:	d1de      	bne.n	aa94 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    aad6:	4b1c      	ldr	r3, [pc, #112]	; (ab48 <hid_keyboard_ctrl+0x114>)
    aad8:	2201      	movs	r2, #1
    aada:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    aadc:	741a      	strb	r2, [r3, #16]
    aade:	e7b5      	b.n	aa4c <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    aae0:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    aae2:	b11a      	cbz	r2, aaec <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    aae4:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    aae6:	795b      	ldrb	r3, [r3, #5]
    aae8:	2b03      	cmp	r3, #3
    aaea:	d128      	bne.n	ab3e <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    aaec:	7b2b      	ldrb	r3, [r5, #12]
    aaee:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    aaf0:	bf1c      	itt	ne
    aaf2:	23ff      	movne	r3, #255	; 0xff
    aaf4:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    aaf6:	7b68      	ldrb	r0, [r5, #13]
    aaf8:	28ff      	cmp	r0, #255	; 0xff
    aafa:	d003      	beq.n	ab04 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    aafc:	4b13      	ldr	r3, [pc, #76]	; (ab4c <hid_keyboard_ctrl+0x118>)
    aafe:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ab00:	23ff      	movs	r3, #255	; 0xff
    ab02:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    ab04:	7ba8      	ldrb	r0, [r5, #14]
    ab06:	28ff      	cmp	r0, #255	; 0xff
    ab08:	d003      	beq.n	ab12 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    ab0a:	4b10      	ldr	r3, [pc, #64]	; (ab4c <hid_keyboard_ctrl+0x118>)
    ab0c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ab0e:	23ff      	movs	r3, #255	; 0xff
    ab10:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    ab12:	2500      	movs	r5, #0
    ab14:	4b0c      	ldr	r3, [pc, #48]	; (ab48 <hid_keyboard_ctrl+0x114>)
    ab16:	741d      	strb	r5, [r3, #16]
    ab18:	e798      	b.n	aa4c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ab1a:	f06f 0509 	mvn.w	r5, #9
    ab1e:	e795      	b.n	aa4c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ab20:	f06f 0509 	mvn.w	r5, #9
    ab24:	e792      	b.n	aa4c <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    ab26:	f06f 0511 	mvn.w	r5, #17
    ab2a:	e78f      	b.n	aa4c <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    ab2c:	f06f 051b 	mvn.w	r5, #27
    ab30:	e78c      	b.n	aa4c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    ab32:	f06f 0509 	mvn.w	r5, #9
    ab36:	e789      	b.n	aa4c <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    ab38:	f06f 0513 	mvn.w	r5, #19
    ab3c:	e786      	b.n	aa4c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    ab3e:	f06f 0509 	mvn.w	r5, #9
    ab42:	e783      	b.n	aa4c <hid_keyboard_ctrl+0x18>
    ab44:	0000b825 	.word	0x0000b825
    ab48:	20000e78 	.word	0x20000e78
    ab4c:	00005b61 	.word	0x00005b61
    ab50:	0000b85f 	.word	0x0000b85f
    ab54:	00005af9 	.word	0x00005af9
    ab58:	00005b8d 	.word	0x00005b8d

0000ab5c <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    ab5c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    ab5e:	4b0a      	ldr	r3, [pc, #40]	; (ab88 <hiddf_keyboard_init+0x2c>)
    ab60:	4798      	blx	r3
    ab62:	2801      	cmp	r0, #1
    ab64:	d80c      	bhi.n	ab80 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    ab66:	4809      	ldr	r0, [pc, #36]	; (ab8c <hiddf_keyboard_init+0x30>)
    ab68:	4b09      	ldr	r3, [pc, #36]	; (ab90 <hiddf_keyboard_init+0x34>)
    ab6a:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    ab6c:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    ab6e:	3014      	adds	r0, #20
    ab70:	4b08      	ldr	r3, [pc, #32]	; (ab94 <hiddf_keyboard_init+0x38>)
    ab72:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    ab74:	4908      	ldr	r1, [pc, #32]	; (ab98 <hiddf_keyboard_init+0x3c>)
    ab76:	2001      	movs	r0, #1
    ab78:	4b08      	ldr	r3, [pc, #32]	; (ab9c <hiddf_keyboard_init+0x40>)
    ab7a:	4798      	blx	r3
	return ERR_NONE;
    ab7c:	2000      	movs	r0, #0
    ab7e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ab80:	f06f 0010 	mvn.w	r0, #16
}
    ab84:	bd08      	pop	{r3, pc}
    ab86:	bf00      	nop
    ab88:	0000b811 	.word	0x0000b811
    ab8c:	20000e78 	.word	0x20000e78
    ab90:	0000aa35 	.word	0x0000aa35
    ab94:	0000b7b1 	.word	0x0000b7b1
    ab98:	200003a0 	.word	0x200003a0
    ab9c:	0000b71d 	.word	0x0000b71d

0000aba0 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    aba0:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    aba2:	4b26      	ldr	r3, [pc, #152]	; (ac3c <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    aba4:	7c1b      	ldrb	r3, [r3, #16]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d045      	beq.n	ac36 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    abaa:	4a24      	ldr	r2, [pc, #144]	; (ac3c <hiddf_keyboard_keys_state_change+0x9c>)
    abac:	2300      	movs	r3, #0
    abae:	6053      	str	r3, [r2, #4]
    abb0:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    abb2:	b329      	cbz	r1, ac00 <hiddf_keyboard_keys_state_change+0x60>
    abb4:	4603      	mov	r3, r0
    abb6:	1e4d      	subs	r5, r1, #1
    abb8:	b2ed      	uxtb	r5, r5
    abba:	3501      	adds	r5, #1
    abbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    abc0:	4405      	add	r5, r0
    abc2:	2200      	movs	r2, #0
    abc4:	e002      	b.n	abcc <hiddf_keyboard_keys_state_change+0x2c>
    abc6:	3303      	adds	r3, #3
    abc8:	42ab      	cmp	r3, r5
    abca:	d005      	beq.n	abd8 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    abcc:	785c      	ldrb	r4, [r3, #1]
    abce:	2c00      	cmp	r4, #0
    abd0:	d0f9      	beq.n	abc6 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    abd2:	3201      	adds	r2, #1
    abd4:	b2d2      	uxtb	r2, r2
    abd6:	e7f6      	b.n	abc6 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    abd8:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    abda:	b2d2      	uxtb	r2, r2
    abdc:	2a06      	cmp	r2, #6
    abde:	d809      	bhi.n	abf4 <hiddf_keyboard_keys_state_change+0x54>
    abe0:	4603      	mov	r3, r0
    abe2:	1e4a      	subs	r2, r1, #1
    abe4:	b2d2      	uxtb	r2, r2
    abe6:	3201      	adds	r2, #1
    abe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    abec:	4410      	add	r0, r2
    abee:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    abf0:	4d12      	ldr	r5, [pc, #72]	; (ac3c <hiddf_keyboard_keys_state_change+0x9c>)
    abf2:	e015      	b.n	ac20 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    abf4:	4b11      	ldr	r3, [pc, #68]	; (ac3c <hiddf_keyboard_keys_state_change+0x9c>)
    abf6:	f04f 32ff 	mov.w	r2, #4294967295
    abfa:	f8c3 2006 	str.w	r2, [r3, #6]
    abfe:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    ac00:	480e      	ldr	r0, [pc, #56]	; (ac3c <hiddf_keyboard_keys_state_change+0x9c>)
    ac02:	2300      	movs	r3, #0
    ac04:	2208      	movs	r2, #8
    ac06:	1d01      	adds	r1, r0, #4
    ac08:	7b40      	ldrb	r0, [r0, #13]
    ac0a:	4c0d      	ldr	r4, [pc, #52]	; (ac40 <hiddf_keyboard_keys_state_change+0xa0>)
    ac0c:	47a0      	blx	r4
    ac0e:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ac10:	1c62      	adds	r2, r4, #1
    ac12:	7819      	ldrb	r1, [r3, #0]
    ac14:	442c      	add	r4, r5
    ac16:	7121      	strb	r1, [r4, #4]
    ac18:	b2d4      	uxtb	r4, r2
    ac1a:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    ac1c:	4283      	cmp	r3, r0
    ac1e:	d0ef      	beq.n	ac00 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    ac20:	789a      	ldrb	r2, [r3, #2]
    ac22:	2a01      	cmp	r2, #1
    ac24:	d1f9      	bne.n	ac1a <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    ac26:	785a      	ldrb	r2, [r3, #1]
    ac28:	2a00      	cmp	r2, #0
    ac2a:	d0f1      	beq.n	ac10 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    ac2c:	792a      	ldrb	r2, [r5, #4]
    ac2e:	7819      	ldrb	r1, [r3, #0]
    ac30:	430a      	orrs	r2, r1
    ac32:	712a      	strb	r2, [r5, #4]
    ac34:	e7f1      	b.n	ac1a <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    ac36:	f06f 0010 	mvn.w	r0, #16
}
    ac3a:	bd38      	pop	{r3, r4, r5, pc}
    ac3c:	20000e78 	.word	0x20000e78
    ac40:	0000b2e1 	.word	0x0000b2e1

0000ac44 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ac44:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ac46:	780b      	ldrb	r3, [r1, #0]
    ac48:	2b81      	cmp	r3, #129	; 0x81
    ac4a:	d010      	beq.n	ac6e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ac4c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ac50:	2b01      	cmp	r3, #1
    ac52:	d13f      	bne.n	acd4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    ac54:	888a      	ldrh	r2, [r1, #4]
    ac56:	4b22      	ldr	r3, [pc, #136]	; (ace0 <hid_mouse_req+0x9c>)
    ac58:	7a1b      	ldrb	r3, [r3, #8]
    ac5a:	429a      	cmp	r2, r3
    ac5c:	d13d      	bne.n	acda <hid_mouse_req+0x96>
			switch (req->bRequest) {
    ac5e:	784b      	ldrb	r3, [r1, #1]
    ac60:	2b03      	cmp	r3, #3
    ac62:	d028      	beq.n	acb6 <hid_mouse_req+0x72>
    ac64:	2b0b      	cmp	r3, #11
    ac66:	d02c      	beq.n	acc2 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    ac68:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ac6c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ac6e:	784b      	ldrb	r3, [r1, #1]
    ac70:	2b06      	cmp	r3, #6
    ac72:	d002      	beq.n	ac7a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    ac74:	f06f 0009 	mvn.w	r0, #9
    ac78:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ac7a:	888a      	ldrh	r2, [r1, #4]
    ac7c:	4b18      	ldr	r3, [pc, #96]	; (ace0 <hid_mouse_req+0x9c>)
    ac7e:	7a1b      	ldrb	r3, [r3, #8]
    ac80:	429a      	cmp	r2, r3
    ac82:	d002      	beq.n	ac8a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    ac84:	f06f 0009 	mvn.w	r0, #9
    ac88:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    ac8a:	884b      	ldrh	r3, [r1, #2]
    ac8c:	0a1b      	lsrs	r3, r3, #8
    ac8e:	2b21      	cmp	r3, #33	; 0x21
    ac90:	d004      	beq.n	ac9c <hid_mouse_req+0x58>
    ac92:	2b22      	cmp	r3, #34	; 0x22
    ac94:	d009      	beq.n	acaa <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    ac96:	f06f 000c 	mvn.w	r0, #12
    ac9a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    ac9c:	4b10      	ldr	r3, [pc, #64]	; (ace0 <hid_mouse_req+0x9c>)
    ac9e:	6819      	ldr	r1, [r3, #0]
    aca0:	2300      	movs	r3, #0
    aca2:	780a      	ldrb	r2, [r1, #0]
    aca4:	4c0f      	ldr	r4, [pc, #60]	; (ace4 <hid_mouse_req+0xa0>)
    aca6:	47a0      	blx	r4
    aca8:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    acaa:	2300      	movs	r3, #0
    acac:	2234      	movs	r2, #52	; 0x34
    acae:	490e      	ldr	r1, [pc, #56]	; (ace8 <hid_mouse_req+0xa4>)
    acb0:	4c0c      	ldr	r4, [pc, #48]	; (ace4 <hid_mouse_req+0xa0>)
    acb2:	47a0      	blx	r4
    acb4:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    acb6:	2300      	movs	r3, #0
    acb8:	2201      	movs	r2, #1
    acba:	490c      	ldr	r1, [pc, #48]	; (acec <hid_mouse_req+0xa8>)
    acbc:	4c09      	ldr	r4, [pc, #36]	; (ace4 <hid_mouse_req+0xa0>)
    acbe:	47a0      	blx	r4
    acc0:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    acc2:	884a      	ldrh	r2, [r1, #2]
    acc4:	4b06      	ldr	r3, [pc, #24]	; (ace0 <hid_mouse_req+0x9c>)
    acc6:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    acc8:	2300      	movs	r3, #0
    acca:	461a      	mov	r2, r3
    accc:	4619      	mov	r1, r3
    acce:	4c05      	ldr	r4, [pc, #20]	; (ace4 <hid_mouse_req+0xa0>)
    acd0:	47a0      	blx	r4
    acd2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    acd4:	f06f 0009 	mvn.w	r0, #9
    acd8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    acda:	f06f 0009 	mvn.w	r0, #9
    acde:	bd10      	pop	{r4, pc}
    ace0:	20000e98 	.word	0x20000e98
    ace4:	0000b2e1 	.word	0x0000b2e1
    ace8:	0000e330 	.word	0x0000e330
    acec:	20000ea2 	.word	0x20000ea2

0000acf0 <hid_mouse_ctrl>:
{
    acf0:	b570      	push	{r4, r5, r6, lr}
    acf2:	4614      	mov	r4, r2
	switch (ctrl) {
    acf4:	2901      	cmp	r1, #1
    acf6:	d040      	beq.n	ad7a <hid_mouse_ctrl+0x8a>
    acf8:	b139      	cbz	r1, ad0a <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    acfa:	2902      	cmp	r1, #2
    acfc:	bf0c      	ite	eq
    acfe:	f06f 041a 	mvneq.w	r4, #26
    ad02:	f06f 040c 	mvnne.w	r4, #12
}
    ad06:	4620      	mov	r0, r4
    ad08:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    ad0a:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    ad0c:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d049      	beq.n	ada6 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    ad12:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    ad14:	795b      	ldrb	r3, [r3, #5]
    ad16:	2b03      	cmp	r3, #3
    ad18:	d148      	bne.n	adac <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    ad1a:	7a2b      	ldrb	r3, [r5, #8]
    ad1c:	429a      	cmp	r2, r3
    ad1e:	d048      	beq.n	adb2 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    ad20:	2bff      	cmp	r3, #255	; 0xff
    ad22:	d149      	bne.n	adb8 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    ad24:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    ad26:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    ad28:	7818      	ldrb	r0, [r3, #0]
    ad2a:	2221      	movs	r2, #33	; 0x21
    ad2c:	6861      	ldr	r1, [r4, #4]
    ad2e:	4418      	add	r0, r3
    ad30:	4b29      	ldr	r3, [pc, #164]	; (add8 <hid_mouse_ctrl+0xe8>)
    ad32:	4798      	blx	r3
    ad34:	4b29      	ldr	r3, [pc, #164]	; (addc <hid_mouse_ctrl+0xec>)
    ad36:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ad38:	6823      	ldr	r3, [r4, #0]
    ad3a:	7818      	ldrb	r0, [r3, #0]
    ad3c:	6861      	ldr	r1, [r4, #4]
    ad3e:	4418      	add	r0, r3
    ad40:	4b27      	ldr	r3, [pc, #156]	; (ade0 <hid_mouse_ctrl+0xf0>)
    ad42:	4798      	blx	r3
	desc->sod = ep;
    ad44:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    ad46:	2800      	cmp	r0, #0
    ad48:	d039      	beq.n	adbe <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    ad4a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    ad4c:	7943      	ldrb	r3, [r0, #5]
    ad4e:	7902      	ldrb	r2, [r0, #4]
    ad50:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ad54:	b292      	uxth	r2, r2
    ad56:	78c1      	ldrb	r1, [r0, #3]
    ad58:	4630      	mov	r0, r6
    ad5a:	4b22      	ldr	r3, [pc, #136]	; (ade4 <hid_mouse_ctrl+0xf4>)
    ad5c:	4798      	blx	r3
    ad5e:	4604      	mov	r4, r0
    ad60:	bb80      	cbnz	r0, adc4 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ad62:	f016 0f80 	tst.w	r6, #128	; 0x80
    ad66:	d030      	beq.n	adca <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    ad68:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    ad6a:	4630      	mov	r0, r6
    ad6c:	4b1e      	ldr	r3, [pc, #120]	; (ade8 <hid_mouse_ctrl+0xf8>)
    ad6e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    ad70:	4b1a      	ldr	r3, [pc, #104]	; (addc <hid_mouse_ctrl+0xec>)
    ad72:	2201      	movs	r2, #1
    ad74:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    ad76:	72da      	strb	r2, [r3, #11]
    ad78:	e7c5      	b.n	ad06 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    ad7a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    ad7c:	b11a      	cbz	r2, ad86 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ad7e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    ad80:	795b      	ldrb	r3, [r3, #5]
    ad82:	2b03      	cmp	r3, #3
    ad84:	d124      	bne.n	add0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    ad86:	7a2b      	ldrb	r3, [r5, #8]
    ad88:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    ad8a:	bf1c      	itt	ne
    ad8c:	23ff      	movne	r3, #255	; 0xff
    ad8e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    ad90:	7a68      	ldrb	r0, [r5, #9]
    ad92:	28ff      	cmp	r0, #255	; 0xff
    ad94:	d003      	beq.n	ad9e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    ad96:	4b15      	ldr	r3, [pc, #84]	; (adec <hid_mouse_ctrl+0xfc>)
    ad98:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ad9a:	23ff      	movs	r3, #255	; 0xff
    ad9c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    ad9e:	2400      	movs	r4, #0
    ada0:	4b0e      	ldr	r3, [pc, #56]	; (addc <hid_mouse_ctrl+0xec>)
    ada2:	72dc      	strb	r4, [r3, #11]
    ada4:	e7af      	b.n	ad06 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    ada6:	f06f 0409 	mvn.w	r4, #9
    adaa:	e7ac      	b.n	ad06 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    adac:	f06f 0409 	mvn.w	r4, #9
    adb0:	e7a9      	b.n	ad06 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    adb2:	f06f 0411 	mvn.w	r4, #17
    adb6:	e7a6      	b.n	ad06 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    adb8:	f06f 041b 	mvn.w	r4, #27
    adbc:	e7a3      	b.n	ad06 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    adbe:	f06f 0409 	mvn.w	r4, #9
    adc2:	e7a0      	b.n	ad06 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    adc4:	f06f 0413 	mvn.w	r4, #19
    adc8:	e79d      	b.n	ad06 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    adca:	f04f 34ff 	mov.w	r4, #4294967295
    adce:	e79a      	b.n	ad06 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    add0:	f06f 0409 	mvn.w	r4, #9
    add4:	e797      	b.n	ad06 <hid_mouse_ctrl+0x16>
    add6:	bf00      	nop
    add8:	0000b825 	.word	0x0000b825
    addc:	20000e98 	.word	0x20000e98
    ade0:	0000b85f 	.word	0x0000b85f
    ade4:	00005af9 	.word	0x00005af9
    ade8:	00005b8d 	.word	0x00005b8d
    adec:	00005b61 	.word	0x00005b61

0000adf0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    adf0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    adf2:	4b0a      	ldr	r3, [pc, #40]	; (ae1c <hiddf_mouse_init+0x2c>)
    adf4:	4798      	blx	r3
    adf6:	2801      	cmp	r0, #1
    adf8:	d80c      	bhi.n	ae14 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    adfa:	4809      	ldr	r0, [pc, #36]	; (ae20 <hiddf_mouse_init+0x30>)
    adfc:	4b09      	ldr	r3, [pc, #36]	; (ae24 <hiddf_mouse_init+0x34>)
    adfe:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    ae00:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    ae02:	300c      	adds	r0, #12
    ae04:	4b08      	ldr	r3, [pc, #32]	; (ae28 <hiddf_mouse_init+0x38>)
    ae06:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    ae08:	4908      	ldr	r1, [pc, #32]	; (ae2c <hiddf_mouse_init+0x3c>)
    ae0a:	2001      	movs	r0, #1
    ae0c:	4b08      	ldr	r3, [pc, #32]	; (ae30 <hiddf_mouse_init+0x40>)
    ae0e:	4798      	blx	r3
	return ERR_NONE;
    ae10:	2000      	movs	r0, #0
    ae12:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ae14:	f06f 0010 	mvn.w	r0, #16
}
    ae18:	bd08      	pop	{r3, pc}
    ae1a:	bf00      	nop
    ae1c:	0000b811 	.word	0x0000b811
    ae20:	20000e98 	.word	0x20000e98
    ae24:	0000acf1 	.word	0x0000acf1
    ae28:	0000b7b1 	.word	0x0000b7b1
    ae2c:	200003a8 	.word	0x200003a8
    ae30:	0000b71d 	.word	0x0000b71d

0000ae34 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    ae34:	2200      	movs	r2, #0
    ae36:	4b0d      	ldr	r3, [pc, #52]	; (ae6c <hiddf_mouse_move+0x38>)
    ae38:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    ae3a:	2901      	cmp	r1, #1
    ae3c:	d00e      	beq.n	ae5c <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    ae3e:	2902      	cmp	r1, #2
    ae40:	d00e      	beq.n	ae60 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    ae42:	2903      	cmp	r1, #3
    ae44:	d10f      	bne.n	ae66 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    ae46:	4b09      	ldr	r3, [pc, #36]	; (ae6c <hiddf_mouse_move+0x38>)
    ae48:	71d8      	strb	r0, [r3, #7]
{
    ae4a:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    ae4c:	4807      	ldr	r0, [pc, #28]	; (ae6c <hiddf_mouse_move+0x38>)
    ae4e:	2300      	movs	r3, #0
    ae50:	2204      	movs	r2, #4
    ae52:	1881      	adds	r1, r0, r2
    ae54:	7a40      	ldrb	r0, [r0, #9]
    ae56:	4c06      	ldr	r4, [pc, #24]	; (ae70 <hiddf_mouse_move+0x3c>)
    ae58:	47a0      	blx	r4
    ae5a:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    ae5c:	7158      	strb	r0, [r3, #5]
    ae5e:	e7f4      	b.n	ae4a <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    ae60:	4b02      	ldr	r3, [pc, #8]	; (ae6c <hiddf_mouse_move+0x38>)
    ae62:	7198      	strb	r0, [r3, #6]
    ae64:	e7f1      	b.n	ae4a <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    ae66:	f06f 000c 	mvn.w	r0, #12
    ae6a:	4770      	bx	lr
    ae6c:	20000e98 	.word	0x20000e98
    ae70:	0000b2e1 	.word	0x0000b2e1

0000ae74 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    ae74:	4770      	bx	lr

0000ae76 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ae76:	e7fe      	b.n	ae76 <midi_cb_ep_bulk_out>

0000ae78 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ae78:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    ae7a:	780b      	ldrb	r3, [r1, #0]
    ae7c:	2b81      	cmp	r3, #129	; 0x81
    ae7e:	d014      	beq.n	aeaa <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ae80:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ae84:	2b01      	cmp	r3, #1
    ae86:	d132      	bne.n	aeee <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    ae88:	888b      	ldrh	r3, [r1, #4]
    ae8a:	4a1c      	ldr	r2, [pc, #112]	; (aefc <audio_midi_req+0x84>)
    ae8c:	7912      	ldrb	r2, [r2, #4]
    ae8e:	429a      	cmp	r2, r3
    ae90:	d003      	beq.n	ae9a <audio_midi_req+0x22>
    ae92:	4a1a      	ldr	r2, [pc, #104]	; (aefc <audio_midi_req+0x84>)
    ae94:	7952      	ldrb	r2, [r2, #5]
    ae96:	429a      	cmp	r2, r3
    ae98:	d12c      	bne.n	aef4 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    ae9a:	784b      	ldrb	r3, [r1, #1]
    ae9c:	2b03      	cmp	r3, #3
    ae9e:	d017      	beq.n	aed0 <audio_midi_req+0x58>
    aea0:	2b0b      	cmp	r3, #11
    aea2:	d01b      	beq.n	aedc <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    aea4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    aea8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    aeaa:	888b      	ldrh	r3, [r1, #4]
    aeac:	4a13      	ldr	r2, [pc, #76]	; (aefc <audio_midi_req+0x84>)
    aeae:	7912      	ldrb	r2, [r2, #4]
    aeb0:	429a      	cmp	r2, r3
    aeb2:	d006      	beq.n	aec2 <audio_midi_req+0x4a>
    aeb4:	4a11      	ldr	r2, [pc, #68]	; (aefc <audio_midi_req+0x84>)
    aeb6:	7952      	ldrb	r2, [r2, #5]
    aeb8:	429a      	cmp	r2, r3
    aeba:	d002      	beq.n	aec2 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    aebc:	f06f 0009 	mvn.w	r0, #9
    aec0:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    aec2:	4b0e      	ldr	r3, [pc, #56]	; (aefc <audio_midi_req+0x84>)
    aec4:	6819      	ldr	r1, [r3, #0]
    aec6:	2300      	movs	r3, #0
    aec8:	780a      	ldrb	r2, [r1, #0]
    aeca:	4c0d      	ldr	r4, [pc, #52]	; (af00 <audio_midi_req+0x88>)
    aecc:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    aece:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    aed0:	2300      	movs	r3, #0
    aed2:	2201      	movs	r2, #1
    aed4:	490b      	ldr	r1, [pc, #44]	; (af04 <audio_midi_req+0x8c>)
    aed6:	4c0a      	ldr	r4, [pc, #40]	; (af00 <audio_midi_req+0x88>)
    aed8:	47a0      	blx	r4
    aeda:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    aedc:	884a      	ldrh	r2, [r1, #2]
    aede:	4b07      	ldr	r3, [pc, #28]	; (aefc <audio_midi_req+0x84>)
    aee0:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    aee2:	2300      	movs	r3, #0
    aee4:	461a      	mov	r2, r3
    aee6:	4619      	mov	r1, r3
    aee8:	4c05      	ldr	r4, [pc, #20]	; (af00 <audio_midi_req+0x88>)
    aeea:	47a0      	blx	r4
    aeec:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    aeee:	f06f 0009 	mvn.w	r0, #9
    aef2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    aef4:	f06f 0009 	mvn.w	r0, #9
    aef8:	bd10      	pop	{r4, pc}
    aefa:	bf00      	nop
    aefc:	20000eb0 	.word	0x20000eb0
    af00:	0000b2e1 	.word	0x0000b2e1
    af04:	20000eb8 	.word	0x20000eb8

0000af08 <audio_midi_ctrl>:
{
    af08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    af0c:	b083      	sub	sp, #12
    af0e:	4615      	mov	r5, r2
	switch (ctrl) {
    af10:	2901      	cmp	r1, #1
    af12:	f000 8092 	beq.w	b03a <audio_midi_ctrl+0x132>
    af16:	b141      	cbz	r1, af2a <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    af18:	2902      	cmp	r1, #2
    af1a:	bf0c      	ite	eq
    af1c:	f06f 001a 	mvneq.w	r0, #26
    af20:	f06f 000c 	mvnne.w	r0, #12
}
    af24:	b003      	add	sp, #12
    af26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    af2a:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    af2e:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    af30:	2800      	cmp	r0, #0
    af32:	f000 80a9 	beq.w	b088 <audio_midi_ctrl+0x180>
    af36:	f109 0604 	add.w	r6, r9, #4
    af3a:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    af3c:	f04f 0804 	mov.w	r8, #4
    af40:	4f5d      	ldr	r7, [pc, #372]	; (b0b8 <audio_midi_ctrl+0x1b0>)
    af42:	e019      	b.n	af78 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    af44:	f816 3b01 	ldrb.w	r3, [r6], #1
    af48:	429a      	cmp	r2, r3
    af4a:	f000 80a3 	beq.w	b094 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    af4e:	2bff      	cmp	r3, #255	; 0xff
    af50:	f040 80a3 	bne.w	b09a <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    af54:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    af58:	2c01      	cmp	r4, #1
    af5a:	d016      	beq.n	af8a <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    af5c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    af5e:	7818      	ldrb	r0, [r3, #0]
    af60:	4642      	mov	r2, r8
    af62:	6869      	ldr	r1, [r5, #4]
    af64:	4418      	add	r0, r3
    af66:	47b8      	blx	r7
    af68:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    af6a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    af6e:	f000 809e 	beq.w	b0ae <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    af72:	2800      	cmp	r0, #0
    af74:	f000 808b 	beq.w	b08e <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    af78:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    af7a:	7943      	ldrb	r3, [r0, #5]
    af7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    af80:	2b01      	cmp	r3, #1
    af82:	d0df      	beq.n	af44 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    af84:	f06f 0009 	mvn.w	r0, #9
    af88:	e7cc      	b.n	af24 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    af8a:	2205      	movs	r2, #5
    af8c:	6869      	ldr	r1, [r5, #4]
    af8e:	4b4a      	ldr	r3, [pc, #296]	; (b0b8 <audio_midi_ctrl+0x1b0>)
    af90:	4798      	blx	r3
    af92:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    af94:	4e49      	ldr	r6, [pc, #292]	; (b0bc <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    af96:	f8df 8144 	ldr.w	r8, [pc, #324]	; b0dc <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    af9a:	4f49      	ldr	r7, [pc, #292]	; (b0c0 <audio_midi_ctrl+0x1b8>)
    af9c:	e01a      	b.n	afd4 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    af9e:	4a47      	ldr	r2, [pc, #284]	; (b0bc <audio_midi_ctrl+0x1b4>)
    afa0:	7953      	ldrb	r3, [r2, #5]
    afa2:	425b      	negs	r3, r3
    afa4:	b2db      	uxtb	r3, r3
    afa6:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    afa8:	f06f 0013 	mvn.w	r0, #19
    afac:	e7ba      	b.n	af24 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    afae:	f89d 0002 	ldrb.w	r0, [sp, #2]
    afb2:	b2c0      	uxtb	r0, r0
    afb4:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    afb8:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    afba:	4a42      	ldr	r2, [pc, #264]	; (b0c4 <audio_midi_ctrl+0x1bc>)
    afbc:	2102      	movs	r1, #2
    afbe:	f899 0006 	ldrb.w	r0, [r9, #6]
    afc2:	4b41      	ldr	r3, [pc, #260]	; (b0c8 <audio_midi_ctrl+0x1c0>)
    afc4:	4798      	blx	r3
				desc->sod = ep;
    afc6:	602c      	str	r4, [r5, #0]
    afc8:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    afca:	6869      	ldr	r1, [r5, #4]
    afcc:	4420      	add	r0, r4
    afce:	4b3f      	ldr	r3, [pc, #252]	; (b0cc <audio_midi_ctrl+0x1c4>)
    afd0:	4798      	blx	r3
    afd2:	4604      	mov	r4, r0
			while (NULL != ep) {
    afd4:	2c00      	cmp	r4, #0
    afd6:	d063      	beq.n	b0a0 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    afd8:	78a3      	ldrb	r3, [r4, #2]
    afda:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    afde:	78e3      	ldrb	r3, [r4, #3]
    afe0:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    afe4:	7962      	ldrb	r2, [r4, #5]
    afe6:	7923      	ldrb	r3, [r4, #4]
    afe8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    afec:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    afee:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    aff2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    aff6:	b2db      	uxtb	r3, r3
    aff8:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    affa:	2301      	movs	r3, #1
    affc:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    affe:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b002:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b006:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b00a:	b292      	uxth	r2, r2
    b00c:	47c0      	blx	r8
    b00e:	b2c0      	uxtb	r0, r0
    b010:	7170      	strb	r0, [r6, #5]
    b012:	2800      	cmp	r0, #0
    b014:	d1c3      	bne.n	af9e <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b016:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b01a:	f013 0f80 	tst.w	r3, #128	; 0x80
    b01e:	d1c6      	bne.n	afae <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    b020:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b024:	b2c0      	uxtb	r0, r0
    b026:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    b02a:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    b02c:	4a28      	ldr	r2, [pc, #160]	; (b0d0 <audio_midi_ctrl+0x1c8>)
    b02e:	2102      	movs	r1, #2
    b030:	f899 0007 	ldrb.w	r0, [r9, #7]
    b034:	4b24      	ldr	r3, [pc, #144]	; (b0c8 <audio_midi_ctrl+0x1c0>)
    b036:	4798      	blx	r3
    b038:	e7c5      	b.n	afc6 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b03a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b03c:	b142      	cbz	r2, b050 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b03e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    b040:	795b      	ldrb	r3, [r3, #5]
    b042:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b046:	2b01      	cmp	r3, #1
    b048:	d002      	beq.n	b050 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    b04a:	f06f 0009 	mvn.w	r0, #9
    b04e:	e769      	b.n	af24 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    b050:	7923      	ldrb	r3, [r4, #4]
    b052:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    b054:	bf1c      	itt	ne
    b056:	23ff      	movne	r3, #255	; 0xff
    b058:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    b05a:	7963      	ldrb	r3, [r4, #5]
    b05c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    b05e:	bf1c      	itt	ne
    b060:	23ff      	movne	r3, #255	; 0xff
    b062:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    b064:	79a0      	ldrb	r0, [r4, #6]
    b066:	28ff      	cmp	r0, #255	; 0xff
    b068:	d003      	beq.n	b072 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    b06a:	4b1a      	ldr	r3, [pc, #104]	; (b0d4 <audio_midi_ctrl+0x1cc>)
    b06c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b06e:	23ff      	movs	r3, #255	; 0xff
    b070:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    b072:	79e0      	ldrb	r0, [r4, #7]
    b074:	28ff      	cmp	r0, #255	; 0xff
    b076:	d003      	beq.n	b080 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    b078:	4b16      	ldr	r3, [pc, #88]	; (b0d4 <audio_midi_ctrl+0x1cc>)
    b07a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b07c:	23ff      	movs	r3, #255	; 0xff
    b07e:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    b080:	2000      	movs	r0, #0
    b082:	4b15      	ldr	r3, [pc, #84]	; (b0d8 <audio_midi_ctrl+0x1d0>)
    b084:	7358      	strb	r0, [r3, #13]
    b086:	e74d      	b.n	af24 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    b088:	f06f 0009 	mvn.w	r0, #9
    b08c:	e74a      	b.n	af24 <audio_midi_ctrl+0x1c>
    b08e:	f06f 0009 	mvn.w	r0, #9
    b092:	e747      	b.n	af24 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    b094:	f06f 0011 	mvn.w	r0, #17
    b098:	e744      	b.n	af24 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    b09a:	f06f 001b 	mvn.w	r0, #27
    b09e:	e741      	b.n	af24 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b0a0:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b0a2:	7818      	ldrb	r0, [r3, #0]
    b0a4:	2204      	movs	r2, #4
    b0a6:	6869      	ldr	r1, [r5, #4]
    b0a8:	4418      	add	r0, r3
    b0aa:	4b03      	ldr	r3, [pc, #12]	; (b0b8 <audio_midi_ctrl+0x1b0>)
    b0ac:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    b0ae:	2201      	movs	r2, #1
    b0b0:	4b09      	ldr	r3, [pc, #36]	; (b0d8 <audio_midi_ctrl+0x1d0>)
    b0b2:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b0b4:	2000      	movs	r0, #0
    b0b6:	e735      	b.n	af24 <audio_midi_ctrl+0x1c>
    b0b8:	0000b825 	.word	0x0000b825
    b0bc:	20003c3c 	.word	0x20003c3c
    b0c0:	00005b8d 	.word	0x00005b8d
    b0c4:	0000ae75 	.word	0x0000ae75
    b0c8:	00005d61 	.word	0x00005d61
    b0cc:	0000b85f 	.word	0x0000b85f
    b0d0:	0000ae77 	.word	0x0000ae77
    b0d4:	00005b61 	.word	0x00005b61
    b0d8:	20000eb0 	.word	0x20000eb0
    b0dc:	00005af9 	.word	0x00005af9

0000b0e0 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    b0e0:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    b0e2:	4b0a      	ldr	r3, [pc, #40]	; (b10c <audiodf_midi_init+0x2c>)
    b0e4:	4798      	blx	r3
    b0e6:	2801      	cmp	r0, #1
    b0e8:	d80c      	bhi.n	b104 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    b0ea:	4809      	ldr	r0, [pc, #36]	; (b110 <audiodf_midi_init+0x30>)
    b0ec:	4b09      	ldr	r3, [pc, #36]	; (b114 <audiodf_midi_init+0x34>)
    b0ee:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    b0f0:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    b0f2:	3010      	adds	r0, #16
    b0f4:	4b08      	ldr	r3, [pc, #32]	; (b118 <audiodf_midi_init+0x38>)
    b0f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    b0f8:	4908      	ldr	r1, [pc, #32]	; (b11c <audiodf_midi_init+0x3c>)
    b0fa:	2001      	movs	r0, #1
    b0fc:	4b08      	ldr	r3, [pc, #32]	; (b120 <audiodf_midi_init+0x40>)
    b0fe:	4798      	blx	r3
	return ERR_NONE;
    b100:	2000      	movs	r0, #0
    b102:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b104:	f06f 0010 	mvn.w	r0, #16
}
    b108:	bd08      	pop	{r3, pc}
    b10a:	bf00      	nop
    b10c:	0000b811 	.word	0x0000b811
    b110:	20000eb0 	.word	0x20000eb0
    b114:	0000af09 	.word	0x0000af09
    b118:	0000b7b1 	.word	0x0000b7b1
    b11c:	200003b0 	.word	0x200003b0
    b120:	0000b71d 	.word	0x0000b71d

0000b124 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    b124:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    b126:	4c06      	ldr	r4, [pc, #24]	; (b140 <audiodf_midi_xfer_packet+0x1c>)
    b128:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    b12a:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    b12c:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    b12e:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    b130:	2300      	movs	r3, #0
    b132:	2204      	movs	r2, #4
    b134:	f104 0109 	add.w	r1, r4, #9
    b138:	79a0      	ldrb	r0, [r4, #6]
    b13a:	4c02      	ldr	r4, [pc, #8]	; (b144 <audiodf_midi_xfer_packet+0x20>)
    b13c:	47a0      	blx	r4
	
	
}
    b13e:	bd10      	pop	{r4, pc}
    b140:	20000eb0 	.word	0x20000eb0
    b144:	0000b2e1 	.word	0x0000b2e1

0000b148 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    b148:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b14a:	4b07      	ldr	r3, [pc, #28]	; (b168 <usbdc_unconfig+0x20>)
    b14c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    b14e:	b14c      	cbz	r4, b164 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b150:	2600      	movs	r6, #0
    b152:	2501      	movs	r5, #1
    b154:	6863      	ldr	r3, [r4, #4]
    b156:	4632      	mov	r2, r6
    b158:	4629      	mov	r1, r5
    b15a:	4620      	mov	r0, r4
    b15c:	4798      	blx	r3
		func = func->next;
    b15e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b160:	2c00      	cmp	r4, #0
    b162:	d1f7      	bne.n	b154 <usbdc_unconfig+0xc>
    b164:	bd70      	pop	{r4, r5, r6, pc}
    b166:	bf00      	nop
    b168:	20000ecc 	.word	0x20000ecc

0000b16c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    b16c:	b570      	push	{r4, r5, r6, lr}
    b16e:	4606      	mov	r6, r0
    b170:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b172:	4b07      	ldr	r3, [pc, #28]	; (b190 <usbdc_change_notify+0x24>)
    b174:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    b176:	b91c      	cbnz	r4, b180 <usbdc_change_notify+0x14>
    b178:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    b17a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b17c:	2c00      	cmp	r4, #0
    b17e:	d0fb      	beq.n	b178 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    b180:	6863      	ldr	r3, [r4, #4]
    b182:	2b00      	cmp	r3, #0
    b184:	d0f9      	beq.n	b17a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    b186:	4629      	mov	r1, r5
    b188:	4630      	mov	r0, r6
    b18a:	4798      	blx	r3
    b18c:	e7f5      	b.n	b17a <usbdc_change_notify+0xe>
    b18e:	bf00      	nop
    b190:	20000ecc 	.word	0x20000ecc

0000b194 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b196:	4607      	mov	r7, r0
    b198:	460e      	mov	r6, r1
    b19a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b19c:	4b0c      	ldr	r3, [pc, #48]	; (b1d0 <usbdc_request_handler+0x3c>)
    b19e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    b1a0:	b91c      	cbnz	r4, b1aa <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    b1a2:	2000      	movs	r0, #0
    b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    b1a6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b1a8:	b16c      	cbz	r4, b1c6 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    b1aa:	6863      	ldr	r3, [r4, #4]
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d0fa      	beq.n	b1a6 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    b1b0:	462a      	mov	r2, r5
    b1b2:	4631      	mov	r1, r6
    b1b4:	4638      	mov	r0, r7
    b1b6:	4798      	blx	r3
			if (0 == rc) {
    b1b8:	b138      	cbz	r0, b1ca <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    b1ba:	f110 0f0a 	cmn.w	r0, #10
    b1be:	d0f2      	beq.n	b1a6 <usbdc_request_handler+0x12>
				return -1;
    b1c0:	f04f 30ff 	mov.w	r0, #4294967295
}
    b1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    b1c6:	2000      	movs	r0, #0
    b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    b1ca:	2001      	movs	r0, #1
    b1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1ce:	bf00      	nop
    b1d0:	20000ecc 	.word	0x20000ecc

0000b1d4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b1d4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b1d6:	4b06      	ldr	r3, [pc, #24]	; (b1f0 <usbd_sof_cb+0x1c>)
    b1d8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    b1da:	b91c      	cbnz	r4, b1e4 <usbd_sof_cb+0x10>
    b1dc:	bd10      	pop	{r4, pc}
		sof = sof->next;
    b1de:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    b1e0:	2c00      	cmp	r4, #0
    b1e2:	d0fb      	beq.n	b1dc <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    b1e4:	6863      	ldr	r3, [r4, #4]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d0f9      	beq.n	b1de <usbd_sof_cb+0xa>
			sof->cb();
    b1ea:	4798      	blx	r3
    b1ec:	e7f7      	b.n	b1de <usbd_sof_cb+0xa>
    b1ee:	bf00      	nop
    b1f0:	20000ecc 	.word	0x20000ecc

0000b1f4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b1f4:	b510      	push	{r4, lr}
    b1f6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    b1f8:	b119      	cbz	r1, b202 <usbdc_cb_ctl_done+0xe>
    b1fa:	2901      	cmp	r1, #1
    b1fc:	d026      	beq.n	b24c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    b1fe:	2000      	movs	r0, #0
    b200:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b202:	7813      	ldrb	r3, [r2, #0]
    b204:	2b00      	cmp	r3, #0
    b206:	d1fa      	bne.n	b1fe <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    b208:	7853      	ldrb	r3, [r2, #1]
    b20a:	2b05      	cmp	r3, #5
    b20c:	d00f      	beq.n	b22e <usbdc_cb_ctl_done+0x3a>
    b20e:	2b09      	cmp	r3, #9
    b210:	d1f5      	bne.n	b1fe <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    b212:	8852      	ldrh	r2, [r2, #2]
    b214:	4b10      	ldr	r3, [pc, #64]	; (b258 <usbdc_cb_ctl_done+0x64>)
    b216:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b218:	8863      	ldrh	r3, [r4, #2]
    b21a:	2b00      	cmp	r3, #0
    b21c:	bf14      	ite	ne
    b21e:	2104      	movne	r1, #4
    b220:	2103      	moveq	r1, #3
    b222:	4b0d      	ldr	r3, [pc, #52]	; (b258 <usbdc_cb_ctl_done+0x64>)
    b224:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b226:	2001      	movs	r0, #1
    b228:	4b0c      	ldr	r3, [pc, #48]	; (b25c <usbdc_cb_ctl_done+0x68>)
    b22a:	4798      	blx	r3
    b22c:	e7e7      	b.n	b1fe <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    b22e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    b230:	b2c0      	uxtb	r0, r0
    b232:	4b0b      	ldr	r3, [pc, #44]	; (b260 <usbdc_cb_ctl_done+0x6c>)
    b234:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b236:	8863      	ldrh	r3, [r4, #2]
    b238:	2b00      	cmp	r3, #0
    b23a:	bf14      	ite	ne
    b23c:	2103      	movne	r1, #3
    b23e:	2102      	moveq	r1, #2
    b240:	4b05      	ldr	r3, [pc, #20]	; (b258 <usbdc_cb_ctl_done+0x64>)
    b242:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b244:	2001      	movs	r0, #1
    b246:	4b05      	ldr	r3, [pc, #20]	; (b25c <usbdc_cb_ctl_done+0x68>)
    b248:	4798      	blx	r3
    b24a:	e7d8      	b.n	b1fe <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    b24c:	2201      	movs	r2, #1
    b24e:	4621      	mov	r1, r4
    b250:	2000      	movs	r0, #0
    b252:	4b04      	ldr	r3, [pc, #16]	; (b264 <usbdc_cb_ctl_done+0x70>)
    b254:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    b256:	e7d2      	b.n	b1fe <usbdc_cb_ctl_done+0xa>
    b258:	20000ecc 	.word	0x20000ecc
    b25c:	0000b16d 	.word	0x0000b16d
    b260:	00005aed 	.word	0x00005aed
    b264:	0000b195 	.word	0x0000b195

0000b268 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    b268:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    b26a:	4b0d      	ldr	r3, [pc, #52]	; (b2a0 <usbdc_reset+0x38>)
    b26c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    b26e:	4d0d      	ldr	r5, [pc, #52]	; (b2a4 <usbdc_reset+0x3c>)
    b270:	2602      	movs	r6, #2
    b272:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    b274:	2400      	movs	r4, #0
    b276:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    b278:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    b27a:	4620      	mov	r0, r4
    b27c:	4b0a      	ldr	r3, [pc, #40]	; (b2a8 <usbdc_reset+0x40>)
    b27e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    b280:	7f28      	ldrb	r0, [r5, #28]
    b282:	4b0a      	ldr	r3, [pc, #40]	; (b2ac <usbdc_reset+0x44>)
    b284:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b286:	4a0a      	ldr	r2, [pc, #40]	; (b2b0 <usbdc_reset+0x48>)
    b288:	4621      	mov	r1, r4
    b28a:	4620      	mov	r0, r4
    b28c:	4d09      	ldr	r5, [pc, #36]	; (b2b4 <usbdc_reset+0x4c>)
    b28e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b290:	4a09      	ldr	r2, [pc, #36]	; (b2b8 <usbdc_reset+0x50>)
    b292:	4631      	mov	r1, r6
    b294:	4620      	mov	r0, r4
    b296:	47a8      	blx	r5
	usb_d_ep_enable(0);
    b298:	4620      	mov	r0, r4
    b29a:	4b08      	ldr	r3, [pc, #32]	; (b2bc <usbdc_reset+0x54>)
    b29c:	4798      	blx	r3
    b29e:	bd70      	pop	{r4, r5, r6, pc}
    b2a0:	0000b149 	.word	0x0000b149
    b2a4:	20000ecc 	.word	0x20000ecc
    b2a8:	00005b61 	.word	0x00005b61
    b2ac:	00005b4d 	.word	0x00005b4d
    b2b0:	0000b301 	.word	0x0000b301
    b2b4:	00005d61 	.word	0x00005d61
    b2b8:	0000b1f5 	.word	0x0000b1f5
    b2bc:	00005b8d 	.word	0x00005b8d

0000b2c0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    b2c0:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    b2c2:	b110      	cbz	r0, b2ca <usbd_event_cb+0xa>
    b2c4:	2801      	cmp	r0, #1
    b2c6:	d004      	beq.n	b2d2 <usbd_event_cb+0x12>
    b2c8:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    b2ca:	2000      	movs	r0, #0
    b2cc:	4b02      	ldr	r3, [pc, #8]	; (b2d8 <usbd_event_cb+0x18>)
    b2ce:	4798      	blx	r3
		break;
    b2d0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    b2d2:	4b02      	ldr	r3, [pc, #8]	; (b2dc <usbd_event_cb+0x1c>)
    b2d4:	4798      	blx	r3
    b2d6:	bd08      	pop	{r3, pc}
    b2d8:	0000b16d 	.word	0x0000b16d
    b2dc:	0000b269 	.word	0x0000b269

0000b2e0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    b2e0:	b500      	push	{lr}
    b2e2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b2e4:	9101      	str	r1, [sp, #4]
    b2e6:	9202      	str	r2, [sp, #8]
    b2e8:	f88d 000c 	strb.w	r0, [sp, #12]
    b2ec:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    b2f0:	a801      	add	r0, sp, #4
    b2f2:	4b02      	ldr	r3, [pc, #8]	; (b2fc <usbdc_xfer+0x1c>)
    b2f4:	4798      	blx	r3
}
    b2f6:	b005      	add	sp, #20
    b2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    b2fc:	00005bd9 	.word	0x00005bd9

0000b300 <usbdc_cb_ctl_req>:
{
    b300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b304:	b083      	sub	sp, #12
    b306:	4605      	mov	r5, r0
    b308:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    b30a:	2200      	movs	r2, #0
    b30c:	4b9b      	ldr	r3, [pc, #620]	; (b57c <usbdc_cb_ctl_req+0x27c>)
    b30e:	4798      	blx	r3
    b310:	f1b0 3fff 	cmp.w	r0, #4294967295
    b314:	d00b      	beq.n	b32e <usbdc_cb_ctl_req+0x2e>
    b316:	2801      	cmp	r0, #1
    b318:	f000 81e3 	beq.w	b6e2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b31c:	7823      	ldrb	r3, [r4, #0]
    b31e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    b322:	d008      	beq.n	b336 <usbdc_cb_ctl_req+0x36>
    b324:	2a80      	cmp	r2, #128	; 0x80
    b326:	f000 80f4 	beq.w	b512 <usbdc_cb_ctl_req+0x212>
		return false;
    b32a:	2000      	movs	r0, #0
    b32c:	e000      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b32e:	2000      	movs	r0, #0
}
    b330:	b003      	add	sp, #12
    b332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    b336:	7862      	ldrb	r2, [r4, #1]
    b338:	3a01      	subs	r2, #1
    b33a:	2a0a      	cmp	r2, #10
    b33c:	f200 81d3 	bhi.w	b6e6 <usbdc_cb_ctl_req+0x3e6>
    b340:	e8df f012 	tbh	[pc, r2, lsl #1]
    b344:	01d10060 	.word	0x01d10060
    b348:	01d10076 	.word	0x01d10076
    b34c:	01d1000b 	.word	0x01d1000b
    b350:	01d101d1 	.word	0x01d101d1
    b354:	01d10015 	.word	0x01d10015
    b358:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b35a:	2301      	movs	r3, #1
    b35c:	2200      	movs	r2, #0
    b35e:	4611      	mov	r1, r2
    b360:	4628      	mov	r0, r5
    b362:	4c87      	ldr	r4, [pc, #540]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b364:	47a0      	blx	r4
    b366:	fab0 f080 	clz	r0, r0
    b36a:	0940      	lsrs	r0, r0, #5
    b36c:	e7e0      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    b36e:	8862      	ldrh	r2, [r4, #2]
    b370:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b372:	b1ca      	cbz	r2, b3a8 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b374:	4b83      	ldr	r3, [pc, #524]	; (b584 <usbdc_cb_ctl_req+0x284>)
    b376:	681b      	ldr	r3, [r3, #0]
    b378:	6859      	ldr	r1, [r3, #4]
    b37a:	6818      	ldr	r0, [r3, #0]
    b37c:	4b82      	ldr	r3, [pc, #520]	; (b588 <usbdc_cb_ctl_req+0x288>)
    b37e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b380:	2800      	cmp	r0, #0
    b382:	f000 81be 	beq.w	b702 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    b386:	78c2      	ldrb	r2, [r0, #3]
    b388:	7881      	ldrb	r1, [r0, #2]
    b38a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    b38e:	fa10 f181 	uxtah	r1, r0, r1
    b392:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b394:	2204      	movs	r2, #4
    b396:	4b7d      	ldr	r3, [pc, #500]	; (b58c <usbdc_cb_ctl_req+0x28c>)
    b398:	4798      	blx	r3
    b39a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b39c:	b130      	cbz	r0, b3ac <usbdc_cb_ctl_req+0xac>
    b39e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b3a0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b584 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b3a4:	4f79      	ldr	r7, [pc, #484]	; (b58c <usbdc_cb_ctl_req+0x28c>)
    b3a6:	e018      	b.n	b3da <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    b3a8:	4b79      	ldr	r3, [pc, #484]	; (b590 <usbdc_cb_ctl_req+0x290>)
    b3aa:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b3ac:	2301      	movs	r3, #1
    b3ae:	2200      	movs	r2, #0
    b3b0:	4611      	mov	r1, r2
    b3b2:	4628      	mov	r0, r5
    b3b4:	4c72      	ldr	r4, [pc, #456]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b3b6:	47a0      	blx	r4
    b3b8:	fab0 f080 	clz	r0, r0
    b3bc:	0940      	lsrs	r0, r0, #5
    b3be:	e7b7      	b.n	b330 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    b3c0:	464c      	mov	r4, r9
    b3c2:	e000      	b.n	b3c6 <usbdc_cb_ctl_req+0xc6>
    b3c4:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    b3c6:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b3c8:	7803      	ldrb	r3, [r0, #0]
    b3ca:	4418      	add	r0, r3
    b3cc:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b3ce:	2204      	movs	r2, #4
    b3d0:	9901      	ldr	r1, [sp, #4]
    b3d2:	47b8      	blx	r7
    b3d4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b3d6:	2800      	cmp	r0, #0
    b3d8:	d0e8      	beq.n	b3ac <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b3da:	f890 9002 	ldrb.w	r9, [r0, #2]
    b3de:	45a1      	cmp	r9, r4
    b3e0:	d0f1      	beq.n	b3c6 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b3e2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    b3e6:	2c00      	cmp	r4, #0
    b3e8:	d0ea      	beq.n	b3c0 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b3ea:	2600      	movs	r6, #0
    b3ec:	6863      	ldr	r3, [r4, #4]
    b3ee:	466a      	mov	r2, sp
    b3f0:	4631      	mov	r1, r6
    b3f2:	4620      	mov	r0, r4
    b3f4:	4798      	blx	r3
    b3f6:	2800      	cmp	r0, #0
    b3f8:	d0e4      	beq.n	b3c4 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    b3fa:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b3fc:	2c00      	cmp	r4, #0
    b3fe:	d1f5      	bne.n	b3ec <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    b400:	464c      	mov	r4, r9
    b402:	e7e0      	b.n	b3c6 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b404:	f003 031f 	and.w	r3, r3, #31
    b408:	2b02      	cmp	r3, #2
    b40a:	f040 816e 	bne.w	b6ea <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    b40e:	88e3      	ldrh	r3, [r4, #6]
    b410:	b10b      	cbz	r3, b416 <usbdc_cb_ctl_req+0x116>
			return false;
    b412:	2000      	movs	r0, #0
    b414:	e78c      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b416:	88a0      	ldrh	r0, [r4, #4]
    b418:	2100      	movs	r1, #0
    b41a:	b2c0      	uxtb	r0, r0
    b41c:	4b5d      	ldr	r3, [pc, #372]	; (b594 <usbdc_cb_ctl_req+0x294>)
    b41e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b420:	2301      	movs	r3, #1
    b422:	2200      	movs	r2, #0
    b424:	4611      	mov	r1, r2
    b426:	4628      	mov	r0, r5
    b428:	4c55      	ldr	r4, [pc, #340]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b42a:	47a0      	blx	r4
		return true;
    b42c:	2001      	movs	r0, #1
    b42e:	e77f      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b430:	f003 031f 	and.w	r3, r3, #31
    b434:	2b02      	cmp	r3, #2
    b436:	f040 815a 	bne.w	b6ee <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    b43a:	88e3      	ldrh	r3, [r4, #6]
    b43c:	b10b      	cbz	r3, b442 <usbdc_cb_ctl_req+0x142>
			return false;
    b43e:	2000      	movs	r0, #0
    b440:	e776      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    b442:	88a0      	ldrh	r0, [r4, #4]
    b444:	2101      	movs	r1, #1
    b446:	b2c0      	uxtb	r0, r0
    b448:	4b52      	ldr	r3, [pc, #328]	; (b594 <usbdc_cb_ctl_req+0x294>)
    b44a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b44c:	2301      	movs	r3, #1
    b44e:	2200      	movs	r2, #0
    b450:	4611      	mov	r1, r2
    b452:	4628      	mov	r0, r5
    b454:	4c4a      	ldr	r4, [pc, #296]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b456:	47a0      	blx	r4
		return true;
    b458:	2001      	movs	r0, #1
    b45a:	e769      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    b45c:	8866      	ldrh	r6, [r4, #2]
    b45e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b460:	4a48      	ldr	r2, [pc, #288]	; (b584 <usbdc_cb_ctl_req+0x284>)
    b462:	6813      	ldr	r3, [r2, #0]
    b464:	7ed2      	ldrb	r2, [r2, #27]
    b466:	6859      	ldr	r1, [r3, #4]
    b468:	6818      	ldr	r0, [r3, #0]
    b46a:	4b47      	ldr	r3, [pc, #284]	; (b588 <usbdc_cb_ctl_req+0x288>)
    b46c:	4798      	blx	r3
	if (NULL == ifc) {
    b46e:	2800      	cmp	r0, #0
    b470:	d045      	beq.n	b4fe <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    b472:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    b474:	78c2      	ldrb	r2, [r0, #3]
    b476:	7881      	ldrb	r1, [r0, #2]
    b478:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b47c:	fa10 f181 	uxtah	r1, r0, r1
    b480:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b482:	2204      	movs	r2, #4
    b484:	4b41      	ldr	r3, [pc, #260]	; (b58c <usbdc_cb_ctl_req+0x28c>)
    b486:	4798      	blx	r3
    b488:	4603      	mov	r3, r0
    b48a:	2800      	cmp	r0, #0
    b48c:	d039      	beq.n	b502 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b48e:	2704      	movs	r7, #4
    b490:	4d3e      	ldr	r5, [pc, #248]	; (b58c <usbdc_cb_ctl_req+0x28c>)
    b492:	e008      	b.n	b4a6 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    b494:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b496:	7803      	ldrb	r3, [r0, #0]
    b498:	4418      	add	r0, r3
    b49a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b49c:	463a      	mov	r2, r7
    b49e:	9901      	ldr	r1, [sp, #4]
    b4a0:	47a8      	blx	r5
		if (NULL == ifc) {
    b4a2:	4603      	mov	r3, r0
    b4a4:	b378      	cbz	r0, b506 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b4a6:	789a      	ldrb	r2, [r3, #2]
    b4a8:	42a2      	cmp	r2, r4
    b4aa:	d1f3      	bne.n	b494 <usbdc_cb_ctl_req+0x194>
    b4ac:	78da      	ldrb	r2, [r3, #3]
    b4ae:	42b2      	cmp	r2, r6
    b4b0:	d1f0      	bne.n	b494 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    b4b2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    b4b4:	4b33      	ldr	r3, [pc, #204]	; (b584 <usbdc_cb_ctl_req+0x284>)
    b4b6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    b4b8:	b33d      	cbz	r5, b50a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    b4ba:	2701      	movs	r7, #1
    b4bc:	686b      	ldr	r3, [r5, #4]
    b4be:	466a      	mov	r2, sp
    b4c0:	4639      	mov	r1, r7
    b4c2:	4628      	mov	r0, r5
    b4c4:	4798      	blx	r3
    b4c6:	b120      	cbz	r0, b4d2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    b4c8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b4ca:	2d00      	cmp	r5, #0
    b4cc:	d1f6      	bne.n	b4bc <usbdc_cb_ctl_req+0x1bc>
	return false;
    b4ce:	2000      	movs	r0, #0
    b4d0:	e72e      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    b4d2:	686b      	ldr	r3, [r5, #4]
    b4d4:	466a      	mov	r2, sp
    b4d6:	2100      	movs	r1, #0
    b4d8:	4628      	mov	r0, r5
    b4da:	4798      	blx	r3
    b4dc:	b9b8      	cbnz	r0, b50e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    b4de:	b136      	cbz	r6, b4ee <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    b4e0:	4a28      	ldr	r2, [pc, #160]	; (b584 <usbdc_cb_ctl_req+0x284>)
    b4e2:	2301      	movs	r3, #1
    b4e4:	fa03 f404 	lsl.w	r4, r3, r4
    b4e8:	7f53      	ldrb	r3, [r2, #29]
    b4ea:	4323      	orrs	r3, r4
    b4ec:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    b4ee:	2300      	movs	r3, #0
    b4f0:	461a      	mov	r2, r3
    b4f2:	4619      	mov	r1, r3
    b4f4:	4618      	mov	r0, r3
    b4f6:	4c22      	ldr	r4, [pc, #136]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b4f8:	47a0      	blx	r4
			return true;
    b4fa:	2001      	movs	r0, #1
    b4fc:	e718      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b4fe:	2000      	movs	r0, #0
    b500:	e716      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b502:	2000      	movs	r0, #0
    b504:	e714      	b.n	b330 <usbdc_cb_ctl_req+0x30>
			return false;
    b506:	2000      	movs	r0, #0
    b508:	e712      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	return false;
    b50a:	2000      	movs	r0, #0
    b50c:	e710      	b.n	b330 <usbdc_cb_ctl_req+0x30>
			return false;
    b50e:	2000      	movs	r0, #0
    b510:	e70e      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    b512:	7862      	ldrb	r2, [r4, #1]
    b514:	2a0a      	cmp	r2, #10
    b516:	f200 80ec 	bhi.w	b6f2 <usbdc_cb_ctl_req+0x3f2>
    b51a:	e8df f012 	tbh	[pc, r2, lsl #1]
    b51e:	008e      	.short	0x008e
    b520:	00ea00ea 	.word	0x00ea00ea
    b524:	00ea00ea 	.word	0x00ea00ea
    b528:	000b00ea 	.word	0x000b00ea
    b52c:	008200ea 	.word	0x008200ea
    b530:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b534:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    b536:	0a13      	lsrs	r3, r2, #8
    b538:	2b02      	cmp	r3, #2
    b53a:	d02d      	beq.n	b598 <usbdc_cb_ctl_req+0x298>
    b53c:	2b03      	cmp	r3, #3
    b53e:	d050      	beq.n	b5e2 <usbdc_cb_ctl_req+0x2e2>
    b540:	2b01      	cmp	r3, #1
    b542:	d001      	beq.n	b548 <usbdc_cb_ctl_req+0x248>
	return false;
    b544:	2000      	movs	r0, #0
    b546:	e6f3      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    b548:	88e2      	ldrh	r2, [r4, #6]
    b54a:	2a12      	cmp	r2, #18
    b54c:	bf28      	it	cs
    b54e:	2212      	movcs	r2, #18
    b550:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b552:	4b0c      	ldr	r3, [pc, #48]	; (b584 <usbdc_cb_ctl_req+0x284>)
    b554:	681b      	ldr	r3, [r3, #0]
    b556:	2201      	movs	r2, #1
    b558:	6859      	ldr	r1, [r3, #4]
    b55a:	6818      	ldr	r0, [r3, #0]
    b55c:	4b0b      	ldr	r3, [pc, #44]	; (b58c <usbdc_cb_ctl_req+0x28c>)
    b55e:	4798      	blx	r3
	if (!dev_desc) {
    b560:	4601      	mov	r1, r0
    b562:	2800      	cmp	r0, #0
    b564:	f000 80c7 	beq.w	b6f6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b568:	2300      	movs	r3, #0
    b56a:	4622      	mov	r2, r4
    b56c:	4628      	mov	r0, r5
    b56e:	4c04      	ldr	r4, [pc, #16]	; (b580 <usbdc_cb_ctl_req+0x280>)
    b570:	47a0      	blx	r4
    b572:	fab0 f080 	clz	r0, r0
    b576:	0940      	lsrs	r0, r0, #5
    b578:	e6da      	b.n	b330 <usbdc_cb_ctl_req+0x30>
    b57a:	bf00      	nop
    b57c:	0000b195 	.word	0x0000b195
    b580:	0000b2e1 	.word	0x0000b2e1
    b584:	20000ecc 	.word	0x20000ecc
    b588:	0000b8a5 	.word	0x0000b8a5
    b58c:	0000b825 	.word	0x0000b825
    b590:	0000b149 	.word	0x0000b149
    b594:	00005cf9 	.word	0x00005cf9
	uint16_t length   = req->wLength;
    b598:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b59a:	4b5b      	ldr	r3, [pc, #364]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b59c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b59e:	681b      	ldr	r3, [r3, #0]
    b5a0:	3201      	adds	r2, #1
    b5a2:	b2d2      	uxtb	r2, r2
    b5a4:	6859      	ldr	r1, [r3, #4]
    b5a6:	6818      	ldr	r0, [r3, #0]
    b5a8:	4b58      	ldr	r3, [pc, #352]	; (b70c <usbdc_cb_ctl_req+0x40c>)
    b5aa:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b5ac:	4601      	mov	r1, r0
    b5ae:	2800      	cmp	r0, #0
    b5b0:	f000 80a3 	beq.w	b6fa <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    b5b4:	78c3      	ldrb	r3, [r0, #3]
    b5b6:	7882      	ldrb	r2, [r0, #2]
    b5b8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    b5bc:	b292      	uxth	r2, r2
	if (length <= total_len) {
    b5be:	4294      	cmp	r4, r2
    b5c0:	d90d      	bls.n	b5de <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b5c2:	3e01      	subs	r6, #1
    b5c4:	4226      	tst	r6, r4
    b5c6:	bf0c      	ite	eq
    b5c8:	2301      	moveq	r3, #1
    b5ca:	2300      	movne	r3, #0
		length = total_len;
    b5cc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b5ce:	4622      	mov	r2, r4
    b5d0:	4628      	mov	r0, r5
    b5d2:	4c4f      	ldr	r4, [pc, #316]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b5d4:	47a0      	blx	r4
    b5d6:	fab0 f080 	clz	r0, r0
    b5da:	0940      	lsrs	r0, r0, #5
    b5dc:	e6a8      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b5de:	2300      	movs	r3, #0
    b5e0:	e7f5      	b.n	b5ce <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    b5e2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b5e4:	4b48      	ldr	r3, [pc, #288]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b5e6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b5e8:	681b      	ldr	r3, [r3, #0]
    b5ea:	b2d2      	uxtb	r2, r2
    b5ec:	6859      	ldr	r1, [r3, #4]
    b5ee:	6818      	ldr	r0, [r3, #0]
    b5f0:	4b48      	ldr	r3, [pc, #288]	; (b714 <usbdc_cb_ctl_req+0x414>)
    b5f2:	4798      	blx	r3
	if (NULL == str_desc) {
    b5f4:	4601      	mov	r1, r0
    b5f6:	2800      	cmp	r0, #0
    b5f8:	f000 8081 	beq.w	b6fe <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    b5fc:	7802      	ldrb	r2, [r0, #0]
    b5fe:	4294      	cmp	r4, r2
    b600:	d90d      	bls.n	b61e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b602:	3e01      	subs	r6, #1
    b604:	4226      	tst	r6, r4
    b606:	bf0c      	ite	eq
    b608:	2301      	moveq	r3, #1
    b60a:	2300      	movne	r3, #0
		length = str_desc[0];
    b60c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b60e:	4622      	mov	r2, r4
    b610:	4628      	mov	r0, r5
    b612:	4c3f      	ldr	r4, [pc, #252]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b614:	47a0      	blx	r4
    b616:	fab0 f080 	clz	r0, r0
    b61a:	0940      	lsrs	r0, r0, #5
    b61c:	e688      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b61e:	2300      	movs	r3, #0
    b620:	e7f5      	b.n	b60e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b622:	4939      	ldr	r1, [pc, #228]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b624:	694b      	ldr	r3, [r1, #20]
    b626:	7eca      	ldrb	r2, [r1, #27]
    b628:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b62a:	2300      	movs	r3, #0
    b62c:	2201      	movs	r2, #1
    b62e:	6949      	ldr	r1, [r1, #20]
    b630:	4628      	mov	r0, r5
    b632:	4c37      	ldr	r4, [pc, #220]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b634:	47a0      	blx	r4
		return true;
    b636:	2001      	movs	r0, #1
    b638:	e67a      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b63a:	f003 031f 	and.w	r3, r3, #31
    b63e:	2b01      	cmp	r3, #1
    b640:	d903      	bls.n	b64a <usbdc_cb_ctl_req+0x34a>
    b642:	2b02      	cmp	r3, #2
    b644:	d010      	beq.n	b668 <usbdc_cb_ctl_req+0x368>
		return false;
    b646:	2000      	movs	r0, #0
    b648:	e672      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		st = 0;
    b64a:	2300      	movs	r3, #0
    b64c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b64e:	492e      	ldr	r1, [pc, #184]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b650:	694b      	ldr	r3, [r1, #20]
    b652:	f8bd 2000 	ldrh.w	r2, [sp]
    b656:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b658:	2300      	movs	r3, #0
    b65a:	2202      	movs	r2, #2
    b65c:	6949      	ldr	r1, [r1, #20]
    b65e:	4628      	mov	r0, r5
    b660:	4c2b      	ldr	r4, [pc, #172]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b662:	47a0      	blx	r4
	return true;
    b664:	2001      	movs	r0, #1
    b666:	e663      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b668:	88a0      	ldrh	r0, [r4, #4]
    b66a:	2102      	movs	r1, #2
    b66c:	b2c0      	uxtb	r0, r0
    b66e:	4b2a      	ldr	r3, [pc, #168]	; (b718 <usbdc_cb_ctl_req+0x418>)
    b670:	4798      	blx	r3
		if (st < 0) {
    b672:	2800      	cmp	r0, #0
    b674:	db03      	blt.n	b67e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    b676:	f000 0001 	and.w	r0, r0, #1
    b67a:	9000      	str	r0, [sp, #0]
    b67c:	e7e7      	b.n	b64e <usbdc_cb_ctl_req+0x34e>
			return false;
    b67e:	2000      	movs	r0, #0
    b680:	e656      	b.n	b330 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b682:	4b21      	ldr	r3, [pc, #132]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b684:	7f5b      	ldrb	r3, [r3, #29]
    b686:	88a2      	ldrh	r2, [r4, #4]
    b688:	4113      	asrs	r3, r2
    b68a:	f013 0f01 	tst.w	r3, #1
    b68e:	d012      	beq.n	b6b6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b690:	4b1d      	ldr	r3, [pc, #116]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b692:	691d      	ldr	r5, [r3, #16]
	return false;
    b694:	2000      	movs	r0, #0
	while (NULL != func) {
    b696:	2d00      	cmp	r5, #0
    b698:	f43f ae4a 	beq.w	b330 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b69c:	2602      	movs	r6, #2
    b69e:	686b      	ldr	r3, [r5, #4]
    b6a0:	4622      	mov	r2, r4
    b6a2:	4631      	mov	r1, r6
    b6a4:	4628      	mov	r0, r5
    b6a6:	4798      	blx	r3
    b6a8:	2800      	cmp	r0, #0
    b6aa:	da0f      	bge.n	b6cc <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    b6ac:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b6ae:	2d00      	cmp	r5, #0
    b6b0:	d1f5      	bne.n	b69e <usbdc_cb_ctl_req+0x39e>
	return false;
    b6b2:	2000      	movs	r0, #0
    b6b4:	e63c      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    b6b6:	4914      	ldr	r1, [pc, #80]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b6b8:	694b      	ldr	r3, [r1, #20]
    b6ba:	2000      	movs	r0, #0
    b6bc:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b6be:	4603      	mov	r3, r0
    b6c0:	2201      	movs	r2, #1
    b6c2:	6949      	ldr	r1, [r1, #20]
    b6c4:	4c12      	ldr	r4, [pc, #72]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b6c6:	47a0      	blx	r4
		return true;
    b6c8:	2001      	movs	r0, #1
    b6ca:	e631      	b.n	b330 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b6cc:	490e      	ldr	r1, [pc, #56]	; (b708 <usbdc_cb_ctl_req+0x408>)
    b6ce:	694b      	ldr	r3, [r1, #20]
    b6d0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b6d2:	2300      	movs	r3, #0
    b6d4:	2201      	movs	r2, #1
    b6d6:	6949      	ldr	r1, [r1, #20]
    b6d8:	4618      	mov	r0, r3
    b6da:	4c0d      	ldr	r4, [pc, #52]	; (b710 <usbdc_cb_ctl_req+0x410>)
    b6dc:	47a0      	blx	r4
			return true;
    b6de:	2001      	movs	r0, #1
    b6e0:	e626      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return true;
    b6e2:	2001      	movs	r0, #1
    b6e4:	e624      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6e6:	2000      	movs	r0, #0
    b6e8:	e622      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6ea:	2000      	movs	r0, #0
    b6ec:	e620      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6ee:	2000      	movs	r0, #0
    b6f0:	e61e      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6f2:	2000      	movs	r0, #0
    b6f4:	e61c      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6f6:	2000      	movs	r0, #0
    b6f8:	e61a      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6fa:	2000      	movs	r0, #0
    b6fc:	e618      	b.n	b330 <usbdc_cb_ctl_req+0x30>
		return false;
    b6fe:	2000      	movs	r0, #0
    b700:	e616      	b.n	b330 <usbdc_cb_ctl_req+0x30>
			return false;
    b702:	2000      	movs	r0, #0
    b704:	e614      	b.n	b330 <usbdc_cb_ctl_req+0x30>
    b706:	bf00      	nop
    b708:	20000ecc 	.word	0x20000ecc
    b70c:	0000b8a5 	.word	0x0000b8a5
    b710:	0000b2e1 	.word	0x0000b2e1
    b714:	0000b90d 	.word	0x0000b90d
    b718:	00005cf9 	.word	0x00005cf9

0000b71c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b71c:	b508      	push	{r3, lr}
	switch (type) {
    b71e:	2801      	cmp	r0, #1
    b720:	d007      	beq.n	b732 <usbdc_register_handler+0x16>
    b722:	b110      	cbz	r0, b72a <usbdc_register_handler+0xe>
    b724:	2802      	cmp	r0, #2
    b726:	d008      	beq.n	b73a <usbdc_register_handler+0x1e>
    b728:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b72a:	4806      	ldr	r0, [pc, #24]	; (b744 <usbdc_register_handler+0x28>)
    b72c:	4b06      	ldr	r3, [pc, #24]	; (b748 <usbdc_register_handler+0x2c>)
    b72e:	4798      	blx	r3
		break;
    b730:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b732:	4806      	ldr	r0, [pc, #24]	; (b74c <usbdc_register_handler+0x30>)
    b734:	4b04      	ldr	r3, [pc, #16]	; (b748 <usbdc_register_handler+0x2c>)
    b736:	4798      	blx	r3
		break;
    b738:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b73a:	4805      	ldr	r0, [pc, #20]	; (b750 <usbdc_register_handler+0x34>)
    b73c:	4b02      	ldr	r3, [pc, #8]	; (b748 <usbdc_register_handler+0x2c>)
    b73e:	4798      	blx	r3
    b740:	bd08      	pop	{r3, pc}
    b742:	bf00      	nop
    b744:	20000ed0 	.word	0x20000ed0
    b748:	00005e09 	.word	0x00005e09
    b74c:	20000ed4 	.word	0x20000ed4
    b750:	20000ed8 	.word	0x20000ed8

0000b754 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b754:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b756:	4605      	mov	r5, r0
    b758:	f240 3255 	movw	r2, #853	; 0x355
    b75c:	490c      	ldr	r1, [pc, #48]	; (b790 <usbdc_init+0x3c>)
    b75e:	3000      	adds	r0, #0
    b760:	bf18      	it	ne
    b762:	2001      	movne	r0, #1
    b764:	4b0b      	ldr	r3, [pc, #44]	; (b794 <usbdc_init+0x40>)
    b766:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b768:	4b0b      	ldr	r3, [pc, #44]	; (b798 <usbdc_init+0x44>)
    b76a:	4798      	blx	r3
	if (rc < 0) {
    b76c:	2800      	cmp	r0, #0
    b76e:	db0e      	blt.n	b78e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b770:	4c0a      	ldr	r4, [pc, #40]	; (b79c <usbdc_init+0x48>)
    b772:	2220      	movs	r2, #32
    b774:	2100      	movs	r1, #0
    b776:	4620      	mov	r0, r4
    b778:	4b09      	ldr	r3, [pc, #36]	; (b7a0 <usbdc_init+0x4c>)
    b77a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b77c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b77e:	4909      	ldr	r1, [pc, #36]	; (b7a4 <usbdc_init+0x50>)
    b780:	2000      	movs	r0, #0
    b782:	4c09      	ldr	r4, [pc, #36]	; (b7a8 <usbdc_init+0x54>)
    b784:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b786:	4909      	ldr	r1, [pc, #36]	; (b7ac <usbdc_init+0x58>)
    b788:	2001      	movs	r0, #1
    b78a:	47a0      	blx	r4

	return 0;
    b78c:	2000      	movs	r0, #0
}
    b78e:	bd38      	pop	{r3, r4, r5, pc}
    b790:	0000e364 	.word	0x0000e364
    b794:	00005dad 	.word	0x00005dad
    b798:	00005a55 	.word	0x00005a55
    b79c:	20000ecc 	.word	0x20000ecc
    b7a0:	0000c2f3 	.word	0x0000c2f3
    b7a4:	0000b1d5 	.word	0x0000b1d5
    b7a8:	00005abd 	.word	0x00005abd
    b7ac:	0000b2c1 	.word	0x0000b2c1

0000b7b0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    b7b0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    b7b2:	4601      	mov	r1, r0
    b7b4:	4801      	ldr	r0, [pc, #4]	; (b7bc <usbdc_register_function+0xc>)
    b7b6:	4b02      	ldr	r3, [pc, #8]	; (b7c0 <usbdc_register_function+0x10>)
    b7b8:	4798      	blx	r3
    b7ba:	bd08      	pop	{r3, pc}
    b7bc:	20000edc 	.word	0x20000edc
    b7c0:	00005e09 	.word	0x00005e09

0000b7c4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b7c4:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    b7c6:	4b0a      	ldr	r3, [pc, #40]	; (b7f0 <usbdc_start+0x2c>)
    b7c8:	7e9b      	ldrb	r3, [r3, #26]
    b7ca:	b95b      	cbnz	r3, b7e4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    b7cc:	b168      	cbz	r0, b7ea <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    b7ce:	4b08      	ldr	r3, [pc, #32]	; (b7f0 <usbdc_start+0x2c>)
    b7d0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b7d2:	6802      	ldr	r2, [r0, #0]
    b7d4:	79d2      	ldrb	r2, [r2, #7]
    b7d6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b7d8:	2201      	movs	r2, #1
    b7da:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b7dc:	4b05      	ldr	r3, [pc, #20]	; (b7f4 <usbdc_start+0x30>)
    b7de:	4798      	blx	r3
	return ERR_NONE;
    b7e0:	2000      	movs	r0, #0
    b7e2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    b7e4:	f06f 0003 	mvn.w	r0, #3
    b7e8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    b7ea:	f06f 0008 	mvn.w	r0, #8
}
    b7ee:	bd08      	pop	{r3, pc}
    b7f0:	20000ecc 	.word	0x20000ecc
    b7f4:	00005ac9 	.word	0x00005ac9

0000b7f8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    b7f8:	b508      	push	{r3, lr}
	usb_d_attach();
    b7fa:	4b01      	ldr	r3, [pc, #4]	; (b800 <usbdc_attach+0x8>)
    b7fc:	4798      	blx	r3
    b7fe:	bd08      	pop	{r3, pc}
    b800:	00005ad5 	.word	0x00005ad5

0000b804 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    b804:	4b01      	ldr	r3, [pc, #4]	; (b80c <usbdc_get_ctrl_buffer+0x8>)
    b806:	6958      	ldr	r0, [r3, #20]
    b808:	4770      	bx	lr
    b80a:	bf00      	nop
    b80c:	20000ecc 	.word	0x20000ecc

0000b810 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b810:	4b03      	ldr	r3, [pc, #12]	; (b820 <usbdc_get_state+0x10>)
    b812:	7e98      	ldrb	r0, [r3, #26]
    b814:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    b818:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    b81a:	bf18      	it	ne
    b81c:	2010      	movne	r0, #16
    b81e:	4770      	bx	lr
    b820:	20000ecc 	.word	0x20000ecc

0000b824 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b824:	4288      	cmp	r0, r1
    b826:	d214      	bcs.n	b852 <usb_find_desc+0x2e>
	return desc[0];
    b828:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b82a:	2b01      	cmp	r3, #1
    b82c:	d913      	bls.n	b856 <usb_find_desc+0x32>
{
    b82e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b830:	7844      	ldrb	r4, [r0, #1]
    b832:	4294      	cmp	r4, r2
    b834:	d00a      	beq.n	b84c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b836:	4418      	add	r0, r3
	while (desc < eof) {
    b838:	4281      	cmp	r1, r0
    b83a:	d906      	bls.n	b84a <usb_find_desc+0x26>
	return desc[0];
    b83c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b83e:	2b01      	cmp	r3, #1
    b840:	d90b      	bls.n	b85a <usb_find_desc+0x36>
	return desc[1];
    b842:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b844:	4294      	cmp	r4, r2
    b846:	d1f6      	bne.n	b836 <usb_find_desc+0x12>
    b848:	e000      	b.n	b84c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b84a:	2000      	movs	r0, #0
}
    b84c:	f85d 4b04 	ldr.w	r4, [sp], #4
    b850:	4770      	bx	lr
	return NULL;
    b852:	2000      	movs	r0, #0
    b854:	4770      	bx	lr
		_desc_len_check();
    b856:	2000      	movs	r0, #0
    b858:	4770      	bx	lr
    b85a:	2000      	movs	r0, #0
    b85c:	e7f6      	b.n	b84c <usb_find_desc+0x28>

0000b85e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b85e:	4288      	cmp	r0, r1
    b860:	d216      	bcs.n	b890 <usb_find_ep_desc+0x32>
	return desc[0];
    b862:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b864:	2b01      	cmp	r3, #1
    b866:	d915      	bls.n	b894 <usb_find_ep_desc+0x36>
	return desc[1];
    b868:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b86a:	2a04      	cmp	r2, #4
    b86c:	d014      	beq.n	b898 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b86e:	2a05      	cmp	r2, #5
    b870:	d00b      	beq.n	b88a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    b872:	4418      	add	r0, r3
	while (desc < eof) {
    b874:	4281      	cmp	r1, r0
    b876:	d909      	bls.n	b88c <usb_find_ep_desc+0x2e>
	return desc[0];
    b878:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b87a:	2b01      	cmp	r3, #1
    b87c:	d90e      	bls.n	b89c <usb_find_ep_desc+0x3e>
	return desc[1];
    b87e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b880:	2a04      	cmp	r2, #4
    b882:	d00d      	beq.n	b8a0 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b884:	2a05      	cmp	r2, #5
    b886:	d1f4      	bne.n	b872 <usb_find_ep_desc+0x14>
    b888:	e00b      	b.n	b8a2 <usb_find_ep_desc+0x44>
    b88a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b88c:	2000      	movs	r0, #0
    b88e:	4770      	bx	lr
    b890:	2000      	movs	r0, #0
    b892:	4770      	bx	lr
		_desc_len_check();
    b894:	2000      	movs	r0, #0
    b896:	4770      	bx	lr
	return NULL;
    b898:	2000      	movs	r0, #0
    b89a:	4770      	bx	lr
		_desc_len_check();
    b89c:	2000      	movs	r0, #0
    b89e:	4770      	bx	lr
	return NULL;
    b8a0:	2000      	movs	r0, #0
}
    b8a2:	4770      	bx	lr

0000b8a4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b8a4:	b538      	push	{r3, r4, r5, lr}
    b8a6:	460c      	mov	r4, r1
    b8a8:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b8aa:	2202      	movs	r2, #2
    b8ac:	4b16      	ldr	r3, [pc, #88]	; (b908 <usb_find_cfg_desc+0x64>)
    b8ae:	4798      	blx	r3
	if (!desc) {
    b8b0:	4603      	mov	r3, r0
    b8b2:	b1e8      	cbz	r0, b8f0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    b8b4:	4284      	cmp	r4, r0
    b8b6:	d91d      	bls.n	b8f4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    b8b8:	7802      	ldrb	r2, [r0, #0]
    b8ba:	2a01      	cmp	r2, #1
    b8bc:	d91c      	bls.n	b8f8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    b8be:	7842      	ldrb	r2, [r0, #1]
    b8c0:	2a02      	cmp	r2, #2
    b8c2:	d11b      	bne.n	b8fc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    b8c4:	7942      	ldrb	r2, [r0, #5]
    b8c6:	42aa      	cmp	r2, r5
    b8c8:	d012      	beq.n	b8f0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    b8ca:	78d9      	ldrb	r1, [r3, #3]
    b8cc:	789a      	ldrb	r2, [r3, #2]
    b8ce:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b8d2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    b8d6:	429c      	cmp	r4, r3
    b8d8:	d909      	bls.n	b8ee <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    b8da:	781a      	ldrb	r2, [r3, #0]
    b8dc:	2a01      	cmp	r2, #1
    b8de:	d90f      	bls.n	b900 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    b8e0:	785a      	ldrb	r2, [r3, #1]
    b8e2:	2a02      	cmp	r2, #2
    b8e4:	d10e      	bne.n	b904 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    b8e6:	795a      	ldrb	r2, [r3, #5]
    b8e8:	42aa      	cmp	r2, r5
    b8ea:	d1ee      	bne.n	b8ca <usb_find_cfg_desc+0x26>
    b8ec:	e000      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    b8ee:	2300      	movs	r3, #0
}
    b8f0:	4618      	mov	r0, r3
    b8f2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    b8f4:	2300      	movs	r3, #0
    b8f6:	e7fb      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b8f8:	2300      	movs	r3, #0
    b8fa:	e7f9      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
	return NULL;
    b8fc:	2300      	movs	r3, #0
    b8fe:	e7f7      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b900:	2300      	movs	r3, #0
    b902:	e7f5      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
	return NULL;
    b904:	2300      	movs	r3, #0
    b906:	e7f3      	b.n	b8f0 <usb_find_cfg_desc+0x4c>
    b908:	0000b825 	.word	0x0000b825

0000b90c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b90c:	4288      	cmp	r0, r1
    b90e:	d217      	bcs.n	b940 <usb_find_str_desc+0x34>
{
    b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b914:	460d      	mov	r5, r1
    b916:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b918:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b91a:	f04f 0803 	mov.w	r8, #3
    b91e:	4f0c      	ldr	r7, [pc, #48]	; (b950 <usb_find_str_desc+0x44>)
    b920:	4642      	mov	r2, r8
    b922:	4629      	mov	r1, r5
    b924:	47b8      	blx	r7
		if (desc) {
    b926:	4603      	mov	r3, r0
    b928:	b170      	cbz	r0, b948 <usb_find_str_desc+0x3c>
	return desc[0];
    b92a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    b92c:	2801      	cmp	r0, #1
    b92e:	d90a      	bls.n	b946 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    b930:	42a6      	cmp	r6, r4
    b932:	d009      	beq.n	b948 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    b934:	4418      	add	r0, r3
    b936:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    b938:	4285      	cmp	r5, r0
    b93a:	d8f1      	bhi.n	b920 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b93c:	2300      	movs	r3, #0
    b93e:	e003      	b.n	b948 <usb_find_str_desc+0x3c>
    b940:	2300      	movs	r3, #0
}
    b942:	4618      	mov	r0, r3
    b944:	4770      	bx	lr
			_desc_len_check();
    b946:	2300      	movs	r3, #0
}
    b948:	4618      	mov	r0, r3
    b94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b94e:	bf00      	nop
    b950:	0000b825 	.word	0x0000b825

0000b954 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b954:	4b3a      	ldr	r3, [pc, #232]	; (ba40 <hiddf_demo_sof_event+0xec>)
    b956:	791b      	ldrb	r3, [r3, #4]
    b958:	2b0a      	cmp	r3, #10
    b95a:	d803      	bhi.n	b964 <hiddf_demo_sof_event+0x10>
    b95c:	3301      	adds	r3, #1
    b95e:	4a38      	ldr	r2, [pc, #224]	; (ba40 <hiddf_demo_sof_event+0xec>)
    b960:	7113      	strb	r3, [r2, #4]
    b962:	4770      	bx	lr
{
    b964:	b570      	push	{r4, r5, r6, lr}
    b966:	b084      	sub	sp, #16
		interval = 0;
    b968:	4b35      	ldr	r3, [pc, #212]	; (ba40 <hiddf_demo_sof_event+0xec>)
    b96a:	2200      	movs	r2, #0
    b96c:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    b96e:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    b970:	a801      	add	r0, sp, #4
    b972:	4b34      	ldr	r3, [pc, #208]	; (ba44 <hiddf_demo_sof_event+0xf0>)
    b974:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b976:	096b      	lsrs	r3, r5, #5
    b978:	4933      	ldr	r1, [pc, #204]	; (ba48 <hiddf_demo_sof_event+0xf4>)
    b97a:	01db      	lsls	r3, r3, #7
    b97c:	18ca      	adds	r2, r1, r3
    b97e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b980:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b982:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b984:	405c      	eors	r4, r3
    b986:	400c      	ands	r4, r1
    b988:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b98a:	a801      	add	r0, sp, #4
    b98c:	4b2f      	ldr	r3, [pc, #188]	; (ba4c <hiddf_demo_sof_event+0xf8>)
    b98e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b990:	f005 051f 	and.w	r5, r5, #31
    b994:	2301      	movs	r3, #1
    b996:	fa03 f505 	lsl.w	r5, r3, r5
    b99a:	4225      	tst	r5, r4
    b99c:	d040      	beq.n	ba20 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    b99e:	4b28      	ldr	r3, [pc, #160]	; (ba40 <hiddf_demo_sof_event+0xec>)
    b9a0:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    b9a2:	a802      	add	r0, sp, #8
    b9a4:	4b27      	ldr	r3, [pc, #156]	; (ba44 <hiddf_demo_sof_event+0xf0>)
    b9a6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b9a8:	096b      	lsrs	r3, r5, #5
    b9aa:	4927      	ldr	r1, [pc, #156]	; (ba48 <hiddf_demo_sof_event+0xf4>)
    b9ac:	01db      	lsls	r3, r3, #7
    b9ae:	18ca      	adds	r2, r1, r3
    b9b0:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b9b2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b9b4:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b9b6:	405c      	eors	r4, r3
    b9b8:	400c      	ands	r4, r1
    b9ba:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b9bc:	a802      	add	r0, sp, #8
    b9be:	4b23      	ldr	r3, [pc, #140]	; (ba4c <hiddf_demo_sof_event+0xf8>)
    b9c0:	4798      	blx	r3
    b9c2:	f005 051f 	and.w	r5, r5, #31
    b9c6:	2301      	movs	r3, #1
    b9c8:	fa03 f505 	lsl.w	r5, r3, r5
    b9cc:	4225      	tst	r5, r4
    b9ce:	d02d      	beq.n	ba2c <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b9d0:	4d1b      	ldr	r5, [pc, #108]	; (ba40 <hiddf_demo_sof_event+0xec>)
    b9d2:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    b9d4:	a803      	add	r0, sp, #12
    b9d6:	4b1b      	ldr	r3, [pc, #108]	; (ba44 <hiddf_demo_sof_event+0xf0>)
    b9d8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b9da:	0973      	lsrs	r3, r6, #5
    b9dc:	491a      	ldr	r1, [pc, #104]	; (ba48 <hiddf_demo_sof_event+0xf4>)
    b9de:	01db      	lsls	r3, r3, #7
    b9e0:	18ca      	adds	r2, r1, r3
    b9e2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b9e4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b9e6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b9e8:	405c      	eors	r4, r3
    b9ea:	400c      	ands	r4, r1
    b9ec:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b9ee:	a803      	add	r0, sp, #12
    b9f0:	4b16      	ldr	r3, [pc, #88]	; (ba4c <hiddf_demo_sof_event+0xf8>)
    b9f2:	4798      	blx	r3
    b9f4:	f006 061f 	and.w	r6, r6, #31
    b9f8:	2301      	movs	r3, #1
    b9fa:	40b3      	lsls	r3, r6
    b9fc:	401c      	ands	r4, r3
    b9fe:	bf0c      	ite	eq
    ba00:	2301      	moveq	r3, #1
    ba02:	2300      	movne	r3, #0
    ba04:	7d2a      	ldrb	r2, [r5, #20]
    ba06:	429a      	cmp	r2, r3
    ba08:	d008      	beq.n	ba1c <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    ba0a:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    ba0c:	b19c      	cbz	r4, ba36 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    ba0e:	2200      	movs	r2, #0
    ba10:	4b0f      	ldr	r3, [pc, #60]	; (ba50 <hiddf_demo_sof_event+0xfc>)
    ba12:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    ba14:	2101      	movs	r1, #1
    ba16:	480e      	ldr	r0, [pc, #56]	; (ba50 <hiddf_demo_sof_event+0xfc>)
    ba18:	4b0e      	ldr	r3, [pc, #56]	; (ba54 <hiddf_demo_sof_event+0x100>)
    ba1a:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    ba1c:	b004      	add	sp, #16
    ba1e:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    ba20:	4619      	mov	r1, r3
    ba22:	f06f 0004 	mvn.w	r0, #4
    ba26:	4b0c      	ldr	r3, [pc, #48]	; (ba58 <hiddf_demo_sof_event+0x104>)
    ba28:	4798      	blx	r3
    ba2a:	e7b8      	b.n	b99e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    ba2c:	4619      	mov	r1, r3
    ba2e:	2005      	movs	r0, #5
    ba30:	4b09      	ldr	r3, [pc, #36]	; (ba58 <hiddf_demo_sof_event+0x104>)
    ba32:	4798      	blx	r3
    ba34:	e7cc      	b.n	b9d0 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    ba36:	2201      	movs	r2, #1
    ba38:	4b05      	ldr	r3, [pc, #20]	; (ba50 <hiddf_demo_sof_event+0xfc>)
    ba3a:	709a      	strb	r2, [r3, #2]
    ba3c:	e7ea      	b.n	ba14 <hiddf_demo_sof_event+0xc0>
    ba3e:	bf00      	nop
    ba40:	20000eec 	.word	0x20000eec
    ba44:	000049b9 	.word	0x000049b9
    ba48:	41008000 	.word	0x41008000
    ba4c:	000049c7 	.word	0x000049c7
    ba50:	200003b8 	.word	0x200003b8
    ba54:	0000aba1 	.word	0x0000aba1
    ba58:	0000ae35 	.word	0x0000ae35

0000ba5c <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    ba5c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ba5e:	4805      	ldr	r0, [pc, #20]	; (ba74 <composite_device_init+0x18>)
    ba60:	4b05      	ldr	r3, [pc, #20]	; (ba78 <composite_device_init+0x1c>)
    ba62:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    ba64:	4b05      	ldr	r3, [pc, #20]	; (ba7c <composite_device_init+0x20>)
    ba66:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    ba68:	4b05      	ldr	r3, [pc, #20]	; (ba80 <composite_device_init+0x24>)
    ba6a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    ba6c:	4b05      	ldr	r3, [pc, #20]	; (ba84 <composite_device_init+0x28>)
    ba6e:	4798      	blx	r3
    ba70:	bd08      	pop	{r3, pc}
    ba72:	bf00      	nop
    ba74:	20000f04 	.word	0x20000f04
    ba78:	0000b755 	.word	0x0000b755
    ba7c:	0000a91d 	.word	0x0000a91d
    ba80:	0000adf1 	.word	0x0000adf1
    ba84:	0000ab5d 	.word	0x0000ab5d

0000ba88 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    ba88:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    ba8a:	4803      	ldr	r0, [pc, #12]	; (ba98 <composite_device_start+0x10>)
    ba8c:	4b03      	ldr	r3, [pc, #12]	; (ba9c <composite_device_start+0x14>)
    ba8e:	4798      	blx	r3
	usbdc_attach();
    ba90:	4b03      	ldr	r3, [pc, #12]	; (baa0 <composite_device_start+0x18>)
    ba92:	4798      	blx	r3
    ba94:	bd08      	pop	{r3, pc}
    ba96:	bf00      	nop
    ba98:	200003c4 	.word	0x200003c4
    ba9c:	0000b7c5 	.word	0x0000b7c5
    baa0:	0000b7f9 	.word	0x0000b7f9

0000baa4 <usb_init>:
		}
	}
}

void usb_init(void)
{
    baa4:	b508      	push	{r3, lr}

	composite_device_init();
    baa6:	4b01      	ldr	r3, [pc, #4]	; (baac <usb_init+0x8>)
    baa8:	4798      	blx	r3
    baaa:	bd08      	pop	{r3, pc}
    baac:	0000ba5d 	.word	0x0000ba5d

0000bab0 <__aeabi_drsub>:
    bab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bab4:	e002      	b.n	babc <__adddf3>
    bab6:	bf00      	nop

0000bab8 <__aeabi_dsub>:
    bab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000babc <__adddf3>:
    babc:	b530      	push	{r4, r5, lr}
    babe:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bac6:	ea94 0f05 	teq	r4, r5
    baca:	bf08      	it	eq
    bacc:	ea90 0f02 	teqeq	r0, r2
    bad0:	bf1f      	itttt	ne
    bad2:	ea54 0c00 	orrsne.w	ip, r4, r0
    bad6:	ea55 0c02 	orrsne.w	ip, r5, r2
    bada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bae2:	f000 80e2 	beq.w	bcaa <__adddf3+0x1ee>
    bae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    baea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    baee:	bfb8      	it	lt
    baf0:	426d      	neglt	r5, r5
    baf2:	dd0c      	ble.n	bb0e <__adddf3+0x52>
    baf4:	442c      	add	r4, r5
    baf6:	ea80 0202 	eor.w	r2, r0, r2
    bafa:	ea81 0303 	eor.w	r3, r1, r3
    bafe:	ea82 0000 	eor.w	r0, r2, r0
    bb02:	ea83 0101 	eor.w	r1, r3, r1
    bb06:	ea80 0202 	eor.w	r2, r0, r2
    bb0a:	ea81 0303 	eor.w	r3, r1, r3
    bb0e:	2d36      	cmp	r5, #54	; 0x36
    bb10:	bf88      	it	hi
    bb12:	bd30      	pophi	{r4, r5, pc}
    bb14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bb18:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bb1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bb20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bb24:	d002      	beq.n	bb2c <__adddf3+0x70>
    bb26:	4240      	negs	r0, r0
    bb28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bb2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bb30:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bb34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bb38:	d002      	beq.n	bb40 <__adddf3+0x84>
    bb3a:	4252      	negs	r2, r2
    bb3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bb40:	ea94 0f05 	teq	r4, r5
    bb44:	f000 80a7 	beq.w	bc96 <__adddf3+0x1da>
    bb48:	f1a4 0401 	sub.w	r4, r4, #1
    bb4c:	f1d5 0e20 	rsbs	lr, r5, #32
    bb50:	db0d      	blt.n	bb6e <__adddf3+0xb2>
    bb52:	fa02 fc0e 	lsl.w	ip, r2, lr
    bb56:	fa22 f205 	lsr.w	r2, r2, r5
    bb5a:	1880      	adds	r0, r0, r2
    bb5c:	f141 0100 	adc.w	r1, r1, #0
    bb60:	fa03 f20e 	lsl.w	r2, r3, lr
    bb64:	1880      	adds	r0, r0, r2
    bb66:	fa43 f305 	asr.w	r3, r3, r5
    bb6a:	4159      	adcs	r1, r3
    bb6c:	e00e      	b.n	bb8c <__adddf3+0xd0>
    bb6e:	f1a5 0520 	sub.w	r5, r5, #32
    bb72:	f10e 0e20 	add.w	lr, lr, #32
    bb76:	2a01      	cmp	r2, #1
    bb78:	fa03 fc0e 	lsl.w	ip, r3, lr
    bb7c:	bf28      	it	cs
    bb7e:	f04c 0c02 	orrcs.w	ip, ip, #2
    bb82:	fa43 f305 	asr.w	r3, r3, r5
    bb86:	18c0      	adds	r0, r0, r3
    bb88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bb8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bb90:	d507      	bpl.n	bba2 <__adddf3+0xe6>
    bb92:	f04f 0e00 	mov.w	lr, #0
    bb96:	f1dc 0c00 	rsbs	ip, ip, #0
    bb9a:	eb7e 0000 	sbcs.w	r0, lr, r0
    bb9e:	eb6e 0101 	sbc.w	r1, lr, r1
    bba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bba6:	d31b      	bcc.n	bbe0 <__adddf3+0x124>
    bba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bbac:	d30c      	bcc.n	bbc8 <__adddf3+0x10c>
    bbae:	0849      	lsrs	r1, r1, #1
    bbb0:	ea5f 0030 	movs.w	r0, r0, rrx
    bbb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bbb8:	f104 0401 	add.w	r4, r4, #1
    bbbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bbc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bbc4:	f080 809a 	bcs.w	bcfc <__adddf3+0x240>
    bbc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bbcc:	bf08      	it	eq
    bbce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bbd2:	f150 0000 	adcs.w	r0, r0, #0
    bbd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bbda:	ea41 0105 	orr.w	r1, r1, r5
    bbde:	bd30      	pop	{r4, r5, pc}
    bbe0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bbe4:	4140      	adcs	r0, r0
    bbe6:	eb41 0101 	adc.w	r1, r1, r1
    bbea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bbee:	f1a4 0401 	sub.w	r4, r4, #1
    bbf2:	d1e9      	bne.n	bbc8 <__adddf3+0x10c>
    bbf4:	f091 0f00 	teq	r1, #0
    bbf8:	bf04      	itt	eq
    bbfa:	4601      	moveq	r1, r0
    bbfc:	2000      	moveq	r0, #0
    bbfe:	fab1 f381 	clz	r3, r1
    bc02:	bf08      	it	eq
    bc04:	3320      	addeq	r3, #32
    bc06:	f1a3 030b 	sub.w	r3, r3, #11
    bc0a:	f1b3 0220 	subs.w	r2, r3, #32
    bc0e:	da0c      	bge.n	bc2a <__adddf3+0x16e>
    bc10:	320c      	adds	r2, #12
    bc12:	dd08      	ble.n	bc26 <__adddf3+0x16a>
    bc14:	f102 0c14 	add.w	ip, r2, #20
    bc18:	f1c2 020c 	rsb	r2, r2, #12
    bc1c:	fa01 f00c 	lsl.w	r0, r1, ip
    bc20:	fa21 f102 	lsr.w	r1, r1, r2
    bc24:	e00c      	b.n	bc40 <__adddf3+0x184>
    bc26:	f102 0214 	add.w	r2, r2, #20
    bc2a:	bfd8      	it	le
    bc2c:	f1c2 0c20 	rsble	ip, r2, #32
    bc30:	fa01 f102 	lsl.w	r1, r1, r2
    bc34:	fa20 fc0c 	lsr.w	ip, r0, ip
    bc38:	bfdc      	itt	le
    bc3a:	ea41 010c 	orrle.w	r1, r1, ip
    bc3e:	4090      	lslle	r0, r2
    bc40:	1ae4      	subs	r4, r4, r3
    bc42:	bfa2      	ittt	ge
    bc44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    bc48:	4329      	orrge	r1, r5
    bc4a:	bd30      	popge	{r4, r5, pc}
    bc4c:	ea6f 0404 	mvn.w	r4, r4
    bc50:	3c1f      	subs	r4, #31
    bc52:	da1c      	bge.n	bc8e <__adddf3+0x1d2>
    bc54:	340c      	adds	r4, #12
    bc56:	dc0e      	bgt.n	bc76 <__adddf3+0x1ba>
    bc58:	f104 0414 	add.w	r4, r4, #20
    bc5c:	f1c4 0220 	rsb	r2, r4, #32
    bc60:	fa20 f004 	lsr.w	r0, r0, r4
    bc64:	fa01 f302 	lsl.w	r3, r1, r2
    bc68:	ea40 0003 	orr.w	r0, r0, r3
    bc6c:	fa21 f304 	lsr.w	r3, r1, r4
    bc70:	ea45 0103 	orr.w	r1, r5, r3
    bc74:	bd30      	pop	{r4, r5, pc}
    bc76:	f1c4 040c 	rsb	r4, r4, #12
    bc7a:	f1c4 0220 	rsb	r2, r4, #32
    bc7e:	fa20 f002 	lsr.w	r0, r0, r2
    bc82:	fa01 f304 	lsl.w	r3, r1, r4
    bc86:	ea40 0003 	orr.w	r0, r0, r3
    bc8a:	4629      	mov	r1, r5
    bc8c:	bd30      	pop	{r4, r5, pc}
    bc8e:	fa21 f004 	lsr.w	r0, r1, r4
    bc92:	4629      	mov	r1, r5
    bc94:	bd30      	pop	{r4, r5, pc}
    bc96:	f094 0f00 	teq	r4, #0
    bc9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    bc9e:	bf06      	itte	eq
    bca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    bca4:	3401      	addeq	r4, #1
    bca6:	3d01      	subne	r5, #1
    bca8:	e74e      	b.n	bb48 <__adddf3+0x8c>
    bcaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bcae:	bf18      	it	ne
    bcb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bcb4:	d029      	beq.n	bd0a <__adddf3+0x24e>
    bcb6:	ea94 0f05 	teq	r4, r5
    bcba:	bf08      	it	eq
    bcbc:	ea90 0f02 	teqeq	r0, r2
    bcc0:	d005      	beq.n	bcce <__adddf3+0x212>
    bcc2:	ea54 0c00 	orrs.w	ip, r4, r0
    bcc6:	bf04      	itt	eq
    bcc8:	4619      	moveq	r1, r3
    bcca:	4610      	moveq	r0, r2
    bccc:	bd30      	pop	{r4, r5, pc}
    bcce:	ea91 0f03 	teq	r1, r3
    bcd2:	bf1e      	ittt	ne
    bcd4:	2100      	movne	r1, #0
    bcd6:	2000      	movne	r0, #0
    bcd8:	bd30      	popne	{r4, r5, pc}
    bcda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    bcde:	d105      	bne.n	bcec <__adddf3+0x230>
    bce0:	0040      	lsls	r0, r0, #1
    bce2:	4149      	adcs	r1, r1
    bce4:	bf28      	it	cs
    bce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bcea:	bd30      	pop	{r4, r5, pc}
    bcec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    bcf0:	bf3c      	itt	cc
    bcf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    bcf6:	bd30      	popcc	{r4, r5, pc}
    bcf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bcfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bd00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bd04:	f04f 0000 	mov.w	r0, #0
    bd08:	bd30      	pop	{r4, r5, pc}
    bd0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bd0e:	bf1a      	itte	ne
    bd10:	4619      	movne	r1, r3
    bd12:	4610      	movne	r0, r2
    bd14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bd18:	bf1c      	itt	ne
    bd1a:	460b      	movne	r3, r1
    bd1c:	4602      	movne	r2, r0
    bd1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bd22:	bf06      	itte	eq
    bd24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bd28:	ea91 0f03 	teqeq	r1, r3
    bd2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bd30:	bd30      	pop	{r4, r5, pc}
    bd32:	bf00      	nop

0000bd34 <__aeabi_ui2d>:
    bd34:	f090 0f00 	teq	r0, #0
    bd38:	bf04      	itt	eq
    bd3a:	2100      	moveq	r1, #0
    bd3c:	4770      	bxeq	lr
    bd3e:	b530      	push	{r4, r5, lr}
    bd40:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bd44:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bd48:	f04f 0500 	mov.w	r5, #0
    bd4c:	f04f 0100 	mov.w	r1, #0
    bd50:	e750      	b.n	bbf4 <__adddf3+0x138>
    bd52:	bf00      	nop

0000bd54 <__aeabi_i2d>:
    bd54:	f090 0f00 	teq	r0, #0
    bd58:	bf04      	itt	eq
    bd5a:	2100      	moveq	r1, #0
    bd5c:	4770      	bxeq	lr
    bd5e:	b530      	push	{r4, r5, lr}
    bd60:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bd64:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bd68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bd6c:	bf48      	it	mi
    bd6e:	4240      	negmi	r0, r0
    bd70:	f04f 0100 	mov.w	r1, #0
    bd74:	e73e      	b.n	bbf4 <__adddf3+0x138>
    bd76:	bf00      	nop

0000bd78 <__aeabi_f2d>:
    bd78:	0042      	lsls	r2, r0, #1
    bd7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bd7e:	ea4f 0131 	mov.w	r1, r1, rrx
    bd82:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bd86:	bf1f      	itttt	ne
    bd88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bd8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bd90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bd94:	4770      	bxne	lr
    bd96:	f092 0f00 	teq	r2, #0
    bd9a:	bf14      	ite	ne
    bd9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bda0:	4770      	bxeq	lr
    bda2:	b530      	push	{r4, r5, lr}
    bda4:	f44f 7460 	mov.w	r4, #896	; 0x380
    bda8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bdac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bdb0:	e720      	b.n	bbf4 <__adddf3+0x138>
    bdb2:	bf00      	nop

0000bdb4 <__aeabi_ul2d>:
    bdb4:	ea50 0201 	orrs.w	r2, r0, r1
    bdb8:	bf08      	it	eq
    bdba:	4770      	bxeq	lr
    bdbc:	b530      	push	{r4, r5, lr}
    bdbe:	f04f 0500 	mov.w	r5, #0
    bdc2:	e00a      	b.n	bdda <__aeabi_l2d+0x16>

0000bdc4 <__aeabi_l2d>:
    bdc4:	ea50 0201 	orrs.w	r2, r0, r1
    bdc8:	bf08      	it	eq
    bdca:	4770      	bxeq	lr
    bdcc:	b530      	push	{r4, r5, lr}
    bdce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    bdd2:	d502      	bpl.n	bdda <__aeabi_l2d+0x16>
    bdd4:	4240      	negs	r0, r0
    bdd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bdda:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bdde:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bde2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    bde6:	f43f aedc 	beq.w	bba2 <__adddf3+0xe6>
    bdea:	f04f 0203 	mov.w	r2, #3
    bdee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bdf2:	bf18      	it	ne
    bdf4:	3203      	addne	r2, #3
    bdf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bdfa:	bf18      	it	ne
    bdfc:	3203      	addne	r2, #3
    bdfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    be02:	f1c2 0320 	rsb	r3, r2, #32
    be06:	fa00 fc03 	lsl.w	ip, r0, r3
    be0a:	fa20 f002 	lsr.w	r0, r0, r2
    be0e:	fa01 fe03 	lsl.w	lr, r1, r3
    be12:	ea40 000e 	orr.w	r0, r0, lr
    be16:	fa21 f102 	lsr.w	r1, r1, r2
    be1a:	4414      	add	r4, r2
    be1c:	e6c1      	b.n	bba2 <__adddf3+0xe6>
    be1e:	bf00      	nop

0000be20 <__aeabi_dmul>:
    be20:	b570      	push	{r4, r5, r6, lr}
    be22:	f04f 0cff 	mov.w	ip, #255	; 0xff
    be26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    be2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    be2e:	bf1d      	ittte	ne
    be30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    be34:	ea94 0f0c 	teqne	r4, ip
    be38:	ea95 0f0c 	teqne	r5, ip
    be3c:	f000 f8de 	bleq	bffc <__aeabi_dmul+0x1dc>
    be40:	442c      	add	r4, r5
    be42:	ea81 0603 	eor.w	r6, r1, r3
    be46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    be4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    be4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    be52:	bf18      	it	ne
    be54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    be58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    be5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    be60:	d038      	beq.n	bed4 <__aeabi_dmul+0xb4>
    be62:	fba0 ce02 	umull	ip, lr, r0, r2
    be66:	f04f 0500 	mov.w	r5, #0
    be6a:	fbe1 e502 	umlal	lr, r5, r1, r2
    be6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    be72:	fbe0 e503 	umlal	lr, r5, r0, r3
    be76:	f04f 0600 	mov.w	r6, #0
    be7a:	fbe1 5603 	umlal	r5, r6, r1, r3
    be7e:	f09c 0f00 	teq	ip, #0
    be82:	bf18      	it	ne
    be84:	f04e 0e01 	orrne.w	lr, lr, #1
    be88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    be8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    be90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    be94:	d204      	bcs.n	bea0 <__aeabi_dmul+0x80>
    be96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    be9a:	416d      	adcs	r5, r5
    be9c:	eb46 0606 	adc.w	r6, r6, r6
    bea0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    bea4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    bea8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    beac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    beb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    beb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    beb8:	bf88      	it	hi
    beba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bebe:	d81e      	bhi.n	befe <__aeabi_dmul+0xde>
    bec0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    bec4:	bf08      	it	eq
    bec6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    beca:	f150 0000 	adcs.w	r0, r0, #0
    bece:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bed2:	bd70      	pop	{r4, r5, r6, pc}
    bed4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    bed8:	ea46 0101 	orr.w	r1, r6, r1
    bedc:	ea40 0002 	orr.w	r0, r0, r2
    bee0:	ea81 0103 	eor.w	r1, r1, r3
    bee4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    bee8:	bfc2      	ittt	gt
    beea:	ebd4 050c 	rsbsgt	r5, r4, ip
    beee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bef2:	bd70      	popgt	{r4, r5, r6, pc}
    bef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bef8:	f04f 0e00 	mov.w	lr, #0
    befc:	3c01      	subs	r4, #1
    befe:	f300 80ab 	bgt.w	c058 <__aeabi_dmul+0x238>
    bf02:	f114 0f36 	cmn.w	r4, #54	; 0x36
    bf06:	bfde      	ittt	le
    bf08:	2000      	movle	r0, #0
    bf0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    bf0e:	bd70      	pople	{r4, r5, r6, pc}
    bf10:	f1c4 0400 	rsb	r4, r4, #0
    bf14:	3c20      	subs	r4, #32
    bf16:	da35      	bge.n	bf84 <__aeabi_dmul+0x164>
    bf18:	340c      	adds	r4, #12
    bf1a:	dc1b      	bgt.n	bf54 <__aeabi_dmul+0x134>
    bf1c:	f104 0414 	add.w	r4, r4, #20
    bf20:	f1c4 0520 	rsb	r5, r4, #32
    bf24:	fa00 f305 	lsl.w	r3, r0, r5
    bf28:	fa20 f004 	lsr.w	r0, r0, r4
    bf2c:	fa01 f205 	lsl.w	r2, r1, r5
    bf30:	ea40 0002 	orr.w	r0, r0, r2
    bf34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    bf38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bf3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bf40:	fa21 f604 	lsr.w	r6, r1, r4
    bf44:	eb42 0106 	adc.w	r1, r2, r6
    bf48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bf4c:	bf08      	it	eq
    bf4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bf52:	bd70      	pop	{r4, r5, r6, pc}
    bf54:	f1c4 040c 	rsb	r4, r4, #12
    bf58:	f1c4 0520 	rsb	r5, r4, #32
    bf5c:	fa00 f304 	lsl.w	r3, r0, r4
    bf60:	fa20 f005 	lsr.w	r0, r0, r5
    bf64:	fa01 f204 	lsl.w	r2, r1, r4
    bf68:	ea40 0002 	orr.w	r0, r0, r2
    bf6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bf70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bf74:	f141 0100 	adc.w	r1, r1, #0
    bf78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bf7c:	bf08      	it	eq
    bf7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bf82:	bd70      	pop	{r4, r5, r6, pc}
    bf84:	f1c4 0520 	rsb	r5, r4, #32
    bf88:	fa00 f205 	lsl.w	r2, r0, r5
    bf8c:	ea4e 0e02 	orr.w	lr, lr, r2
    bf90:	fa20 f304 	lsr.w	r3, r0, r4
    bf94:	fa01 f205 	lsl.w	r2, r1, r5
    bf98:	ea43 0302 	orr.w	r3, r3, r2
    bf9c:	fa21 f004 	lsr.w	r0, r1, r4
    bfa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bfa4:	fa21 f204 	lsr.w	r2, r1, r4
    bfa8:	ea20 0002 	bic.w	r0, r0, r2
    bfac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    bfb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bfb4:	bf08      	it	eq
    bfb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bfba:	bd70      	pop	{r4, r5, r6, pc}
    bfbc:	f094 0f00 	teq	r4, #0
    bfc0:	d10f      	bne.n	bfe2 <__aeabi_dmul+0x1c2>
    bfc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    bfc6:	0040      	lsls	r0, r0, #1
    bfc8:	eb41 0101 	adc.w	r1, r1, r1
    bfcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bfd0:	bf08      	it	eq
    bfd2:	3c01      	subeq	r4, #1
    bfd4:	d0f7      	beq.n	bfc6 <__aeabi_dmul+0x1a6>
    bfd6:	ea41 0106 	orr.w	r1, r1, r6
    bfda:	f095 0f00 	teq	r5, #0
    bfde:	bf18      	it	ne
    bfe0:	4770      	bxne	lr
    bfe2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    bfe6:	0052      	lsls	r2, r2, #1
    bfe8:	eb43 0303 	adc.w	r3, r3, r3
    bfec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bff0:	bf08      	it	eq
    bff2:	3d01      	subeq	r5, #1
    bff4:	d0f7      	beq.n	bfe6 <__aeabi_dmul+0x1c6>
    bff6:	ea43 0306 	orr.w	r3, r3, r6
    bffa:	4770      	bx	lr
    bffc:	ea94 0f0c 	teq	r4, ip
    c000:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c004:	bf18      	it	ne
    c006:	ea95 0f0c 	teqne	r5, ip
    c00a:	d00c      	beq.n	c026 <__aeabi_dmul+0x206>
    c00c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c010:	bf18      	it	ne
    c012:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c016:	d1d1      	bne.n	bfbc <__aeabi_dmul+0x19c>
    c018:	ea81 0103 	eor.w	r1, r1, r3
    c01c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c020:	f04f 0000 	mov.w	r0, #0
    c024:	bd70      	pop	{r4, r5, r6, pc}
    c026:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c02a:	bf06      	itte	eq
    c02c:	4610      	moveq	r0, r2
    c02e:	4619      	moveq	r1, r3
    c030:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c034:	d019      	beq.n	c06a <__aeabi_dmul+0x24a>
    c036:	ea94 0f0c 	teq	r4, ip
    c03a:	d102      	bne.n	c042 <__aeabi_dmul+0x222>
    c03c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c040:	d113      	bne.n	c06a <__aeabi_dmul+0x24a>
    c042:	ea95 0f0c 	teq	r5, ip
    c046:	d105      	bne.n	c054 <__aeabi_dmul+0x234>
    c048:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c04c:	bf1c      	itt	ne
    c04e:	4610      	movne	r0, r2
    c050:	4619      	movne	r1, r3
    c052:	d10a      	bne.n	c06a <__aeabi_dmul+0x24a>
    c054:	ea81 0103 	eor.w	r1, r1, r3
    c058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c05c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c060:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c064:	f04f 0000 	mov.w	r0, #0
    c068:	bd70      	pop	{r4, r5, r6, pc}
    c06a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c06e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c072:	bd70      	pop	{r4, r5, r6, pc}

0000c074 <__aeabi_ddiv>:
    c074:	b570      	push	{r4, r5, r6, lr}
    c076:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c07a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c07e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c082:	bf1d      	ittte	ne
    c084:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c088:	ea94 0f0c 	teqne	r4, ip
    c08c:	ea95 0f0c 	teqne	r5, ip
    c090:	f000 f8a7 	bleq	c1e2 <__aeabi_ddiv+0x16e>
    c094:	eba4 0405 	sub.w	r4, r4, r5
    c098:	ea81 0e03 	eor.w	lr, r1, r3
    c09c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c0a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c0a4:	f000 8088 	beq.w	c1b8 <__aeabi_ddiv+0x144>
    c0a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c0ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c0b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c0b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c0b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c0bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c0c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c0c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c0c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c0cc:	429d      	cmp	r5, r3
    c0ce:	bf08      	it	eq
    c0d0:	4296      	cmpeq	r6, r2
    c0d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c0d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c0da:	d202      	bcs.n	c0e2 <__aeabi_ddiv+0x6e>
    c0dc:	085b      	lsrs	r3, r3, #1
    c0de:	ea4f 0232 	mov.w	r2, r2, rrx
    c0e2:	1ab6      	subs	r6, r6, r2
    c0e4:	eb65 0503 	sbc.w	r5, r5, r3
    c0e8:	085b      	lsrs	r3, r3, #1
    c0ea:	ea4f 0232 	mov.w	r2, r2, rrx
    c0ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c0f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c0f6:	ebb6 0e02 	subs.w	lr, r6, r2
    c0fa:	eb75 0e03 	sbcs.w	lr, r5, r3
    c0fe:	bf22      	ittt	cs
    c100:	1ab6      	subcs	r6, r6, r2
    c102:	4675      	movcs	r5, lr
    c104:	ea40 000c 	orrcs.w	r0, r0, ip
    c108:	085b      	lsrs	r3, r3, #1
    c10a:	ea4f 0232 	mov.w	r2, r2, rrx
    c10e:	ebb6 0e02 	subs.w	lr, r6, r2
    c112:	eb75 0e03 	sbcs.w	lr, r5, r3
    c116:	bf22      	ittt	cs
    c118:	1ab6      	subcs	r6, r6, r2
    c11a:	4675      	movcs	r5, lr
    c11c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c120:	085b      	lsrs	r3, r3, #1
    c122:	ea4f 0232 	mov.w	r2, r2, rrx
    c126:	ebb6 0e02 	subs.w	lr, r6, r2
    c12a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c12e:	bf22      	ittt	cs
    c130:	1ab6      	subcs	r6, r6, r2
    c132:	4675      	movcs	r5, lr
    c134:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c138:	085b      	lsrs	r3, r3, #1
    c13a:	ea4f 0232 	mov.w	r2, r2, rrx
    c13e:	ebb6 0e02 	subs.w	lr, r6, r2
    c142:	eb75 0e03 	sbcs.w	lr, r5, r3
    c146:	bf22      	ittt	cs
    c148:	1ab6      	subcs	r6, r6, r2
    c14a:	4675      	movcs	r5, lr
    c14c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c150:	ea55 0e06 	orrs.w	lr, r5, r6
    c154:	d018      	beq.n	c188 <__aeabi_ddiv+0x114>
    c156:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c15a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c15e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c162:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c166:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c16a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c16e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c172:	d1c0      	bne.n	c0f6 <__aeabi_ddiv+0x82>
    c174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c178:	d10b      	bne.n	c192 <__aeabi_ddiv+0x11e>
    c17a:	ea41 0100 	orr.w	r1, r1, r0
    c17e:	f04f 0000 	mov.w	r0, #0
    c182:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c186:	e7b6      	b.n	c0f6 <__aeabi_ddiv+0x82>
    c188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c18c:	bf04      	itt	eq
    c18e:	4301      	orreq	r1, r0
    c190:	2000      	moveq	r0, #0
    c192:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c196:	bf88      	it	hi
    c198:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c19c:	f63f aeaf 	bhi.w	befe <__aeabi_dmul+0xde>
    c1a0:	ebb5 0c03 	subs.w	ip, r5, r3
    c1a4:	bf04      	itt	eq
    c1a6:	ebb6 0c02 	subseq.w	ip, r6, r2
    c1aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c1ae:	f150 0000 	adcs.w	r0, r0, #0
    c1b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c1b6:	bd70      	pop	{r4, r5, r6, pc}
    c1b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c1bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c1c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c1c4:	bfc2      	ittt	gt
    c1c6:	ebd4 050c 	rsbsgt	r5, r4, ip
    c1ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c1ce:	bd70      	popgt	{r4, r5, r6, pc}
    c1d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c1d4:	f04f 0e00 	mov.w	lr, #0
    c1d8:	3c01      	subs	r4, #1
    c1da:	e690      	b.n	befe <__aeabi_dmul+0xde>
    c1dc:	ea45 0e06 	orr.w	lr, r5, r6
    c1e0:	e68d      	b.n	befe <__aeabi_dmul+0xde>
    c1e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c1e6:	ea94 0f0c 	teq	r4, ip
    c1ea:	bf08      	it	eq
    c1ec:	ea95 0f0c 	teqeq	r5, ip
    c1f0:	f43f af3b 	beq.w	c06a <__aeabi_dmul+0x24a>
    c1f4:	ea94 0f0c 	teq	r4, ip
    c1f8:	d10a      	bne.n	c210 <__aeabi_ddiv+0x19c>
    c1fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c1fe:	f47f af34 	bne.w	c06a <__aeabi_dmul+0x24a>
    c202:	ea95 0f0c 	teq	r5, ip
    c206:	f47f af25 	bne.w	c054 <__aeabi_dmul+0x234>
    c20a:	4610      	mov	r0, r2
    c20c:	4619      	mov	r1, r3
    c20e:	e72c      	b.n	c06a <__aeabi_dmul+0x24a>
    c210:	ea95 0f0c 	teq	r5, ip
    c214:	d106      	bne.n	c224 <__aeabi_ddiv+0x1b0>
    c216:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c21a:	f43f aefd 	beq.w	c018 <__aeabi_dmul+0x1f8>
    c21e:	4610      	mov	r0, r2
    c220:	4619      	mov	r1, r3
    c222:	e722      	b.n	c06a <__aeabi_dmul+0x24a>
    c224:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c228:	bf18      	it	ne
    c22a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c22e:	f47f aec5 	bne.w	bfbc <__aeabi_dmul+0x19c>
    c232:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c236:	f47f af0d 	bne.w	c054 <__aeabi_dmul+0x234>
    c23a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c23e:	f47f aeeb 	bne.w	c018 <__aeabi_dmul+0x1f8>
    c242:	e712      	b.n	c06a <__aeabi_dmul+0x24a>

0000c244 <__aeabi_d2uiz>:
    c244:	004a      	lsls	r2, r1, #1
    c246:	d211      	bcs.n	c26c <__aeabi_d2uiz+0x28>
    c248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c24c:	d211      	bcs.n	c272 <__aeabi_d2uiz+0x2e>
    c24e:	d50d      	bpl.n	c26c <__aeabi_d2uiz+0x28>
    c250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c258:	d40e      	bmi.n	c278 <__aeabi_d2uiz+0x34>
    c25a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c266:	fa23 f002 	lsr.w	r0, r3, r2
    c26a:	4770      	bx	lr
    c26c:	f04f 0000 	mov.w	r0, #0
    c270:	4770      	bx	lr
    c272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c276:	d102      	bne.n	c27e <__aeabi_d2uiz+0x3a>
    c278:	f04f 30ff 	mov.w	r0, #4294967295
    c27c:	4770      	bx	lr
    c27e:	f04f 0000 	mov.w	r0, #0
    c282:	4770      	bx	lr

0000c284 <__libc_init_array>:
    c284:	b570      	push	{r4, r5, r6, lr}
    c286:	4e0d      	ldr	r6, [pc, #52]	; (c2bc <__libc_init_array+0x38>)
    c288:	4c0d      	ldr	r4, [pc, #52]	; (c2c0 <__libc_init_array+0x3c>)
    c28a:	1ba4      	subs	r4, r4, r6
    c28c:	10a4      	asrs	r4, r4, #2
    c28e:	2500      	movs	r5, #0
    c290:	42a5      	cmp	r5, r4
    c292:	d109      	bne.n	c2a8 <__libc_init_array+0x24>
    c294:	4e0b      	ldr	r6, [pc, #44]	; (c2c4 <__libc_init_array+0x40>)
    c296:	4c0c      	ldr	r4, [pc, #48]	; (c2c8 <__libc_init_array+0x44>)
    c298:	f002 f8bc 	bl	e414 <_init>
    c29c:	1ba4      	subs	r4, r4, r6
    c29e:	10a4      	asrs	r4, r4, #2
    c2a0:	2500      	movs	r5, #0
    c2a2:	42a5      	cmp	r5, r4
    c2a4:	d105      	bne.n	c2b2 <__libc_init_array+0x2e>
    c2a6:	bd70      	pop	{r4, r5, r6, pc}
    c2a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c2ac:	4798      	blx	r3
    c2ae:	3501      	adds	r5, #1
    c2b0:	e7ee      	b.n	c290 <__libc_init_array+0xc>
    c2b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c2b6:	4798      	blx	r3
    c2b8:	3501      	adds	r5, #1
    c2ba:	e7f2      	b.n	c2a2 <__libc_init_array+0x1e>
    c2bc:	0000e420 	.word	0x0000e420
    c2c0:	0000e420 	.word	0x0000e420
    c2c4:	0000e420 	.word	0x0000e420
    c2c8:	0000e424 	.word	0x0000e424

0000c2cc <malloc>:
    c2cc:	4b02      	ldr	r3, [pc, #8]	; (c2d8 <malloc+0xc>)
    c2ce:	4601      	mov	r1, r0
    c2d0:	6818      	ldr	r0, [r3, #0]
    c2d2:	f000 b865 	b.w	c3a0 <_malloc_r>
    c2d6:	bf00      	nop
    c2d8:	20000558 	.word	0x20000558

0000c2dc <memcpy>:
    c2dc:	b510      	push	{r4, lr}
    c2de:	1e43      	subs	r3, r0, #1
    c2e0:	440a      	add	r2, r1
    c2e2:	4291      	cmp	r1, r2
    c2e4:	d100      	bne.n	c2e8 <memcpy+0xc>
    c2e6:	bd10      	pop	{r4, pc}
    c2e8:	f811 4b01 	ldrb.w	r4, [r1], #1
    c2ec:	f803 4f01 	strb.w	r4, [r3, #1]!
    c2f0:	e7f7      	b.n	c2e2 <memcpy+0x6>

0000c2f2 <memset>:
    c2f2:	4402      	add	r2, r0
    c2f4:	4603      	mov	r3, r0
    c2f6:	4293      	cmp	r3, r2
    c2f8:	d100      	bne.n	c2fc <memset+0xa>
    c2fa:	4770      	bx	lr
    c2fc:	f803 1b01 	strb.w	r1, [r3], #1
    c300:	e7f9      	b.n	c2f6 <memset+0x4>
	...

0000c304 <_free_r>:
    c304:	b538      	push	{r3, r4, r5, lr}
    c306:	4605      	mov	r5, r0
    c308:	2900      	cmp	r1, #0
    c30a:	d045      	beq.n	c398 <_free_r+0x94>
    c30c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c310:	1f0c      	subs	r4, r1, #4
    c312:	2b00      	cmp	r3, #0
    c314:	bfb8      	it	lt
    c316:	18e4      	addlt	r4, r4, r3
    c318:	f000 fcae 	bl	cc78 <__malloc_lock>
    c31c:	4a1f      	ldr	r2, [pc, #124]	; (c39c <_free_r+0x98>)
    c31e:	6813      	ldr	r3, [r2, #0]
    c320:	4610      	mov	r0, r2
    c322:	b933      	cbnz	r3, c332 <_free_r+0x2e>
    c324:	6063      	str	r3, [r4, #4]
    c326:	6014      	str	r4, [r2, #0]
    c328:	4628      	mov	r0, r5
    c32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c32e:	f000 bca4 	b.w	cc7a <__malloc_unlock>
    c332:	42a3      	cmp	r3, r4
    c334:	d90c      	bls.n	c350 <_free_r+0x4c>
    c336:	6821      	ldr	r1, [r4, #0]
    c338:	1862      	adds	r2, r4, r1
    c33a:	4293      	cmp	r3, r2
    c33c:	bf04      	itt	eq
    c33e:	681a      	ldreq	r2, [r3, #0]
    c340:	685b      	ldreq	r3, [r3, #4]
    c342:	6063      	str	r3, [r4, #4]
    c344:	bf04      	itt	eq
    c346:	1852      	addeq	r2, r2, r1
    c348:	6022      	streq	r2, [r4, #0]
    c34a:	6004      	str	r4, [r0, #0]
    c34c:	e7ec      	b.n	c328 <_free_r+0x24>
    c34e:	4613      	mov	r3, r2
    c350:	685a      	ldr	r2, [r3, #4]
    c352:	b10a      	cbz	r2, c358 <_free_r+0x54>
    c354:	42a2      	cmp	r2, r4
    c356:	d9fa      	bls.n	c34e <_free_r+0x4a>
    c358:	6819      	ldr	r1, [r3, #0]
    c35a:	1858      	adds	r0, r3, r1
    c35c:	42a0      	cmp	r0, r4
    c35e:	d10b      	bne.n	c378 <_free_r+0x74>
    c360:	6820      	ldr	r0, [r4, #0]
    c362:	4401      	add	r1, r0
    c364:	1858      	adds	r0, r3, r1
    c366:	4282      	cmp	r2, r0
    c368:	6019      	str	r1, [r3, #0]
    c36a:	d1dd      	bne.n	c328 <_free_r+0x24>
    c36c:	6810      	ldr	r0, [r2, #0]
    c36e:	6852      	ldr	r2, [r2, #4]
    c370:	605a      	str	r2, [r3, #4]
    c372:	4401      	add	r1, r0
    c374:	6019      	str	r1, [r3, #0]
    c376:	e7d7      	b.n	c328 <_free_r+0x24>
    c378:	d902      	bls.n	c380 <_free_r+0x7c>
    c37a:	230c      	movs	r3, #12
    c37c:	602b      	str	r3, [r5, #0]
    c37e:	e7d3      	b.n	c328 <_free_r+0x24>
    c380:	6820      	ldr	r0, [r4, #0]
    c382:	1821      	adds	r1, r4, r0
    c384:	428a      	cmp	r2, r1
    c386:	bf04      	itt	eq
    c388:	6811      	ldreq	r1, [r2, #0]
    c38a:	6852      	ldreq	r2, [r2, #4]
    c38c:	6062      	str	r2, [r4, #4]
    c38e:	bf04      	itt	eq
    c390:	1809      	addeq	r1, r1, r0
    c392:	6021      	streq	r1, [r4, #0]
    c394:	605c      	str	r4, [r3, #4]
    c396:	e7c7      	b.n	c328 <_free_r+0x24>
    c398:	bd38      	pop	{r3, r4, r5, pc}
    c39a:	bf00      	nop
    c39c:	20000f44 	.word	0x20000f44

0000c3a0 <_malloc_r>:
    c3a0:	b570      	push	{r4, r5, r6, lr}
    c3a2:	1ccd      	adds	r5, r1, #3
    c3a4:	f025 0503 	bic.w	r5, r5, #3
    c3a8:	3508      	adds	r5, #8
    c3aa:	2d0c      	cmp	r5, #12
    c3ac:	bf38      	it	cc
    c3ae:	250c      	movcc	r5, #12
    c3b0:	2d00      	cmp	r5, #0
    c3b2:	4606      	mov	r6, r0
    c3b4:	db01      	blt.n	c3ba <_malloc_r+0x1a>
    c3b6:	42a9      	cmp	r1, r5
    c3b8:	d903      	bls.n	c3c2 <_malloc_r+0x22>
    c3ba:	230c      	movs	r3, #12
    c3bc:	6033      	str	r3, [r6, #0]
    c3be:	2000      	movs	r0, #0
    c3c0:	bd70      	pop	{r4, r5, r6, pc}
    c3c2:	f000 fc59 	bl	cc78 <__malloc_lock>
    c3c6:	4a23      	ldr	r2, [pc, #140]	; (c454 <_malloc_r+0xb4>)
    c3c8:	6814      	ldr	r4, [r2, #0]
    c3ca:	4621      	mov	r1, r4
    c3cc:	b991      	cbnz	r1, c3f4 <_malloc_r+0x54>
    c3ce:	4c22      	ldr	r4, [pc, #136]	; (c458 <_malloc_r+0xb8>)
    c3d0:	6823      	ldr	r3, [r4, #0]
    c3d2:	b91b      	cbnz	r3, c3dc <_malloc_r+0x3c>
    c3d4:	4630      	mov	r0, r6
    c3d6:	f000 f8bd 	bl	c554 <_sbrk_r>
    c3da:	6020      	str	r0, [r4, #0]
    c3dc:	4629      	mov	r1, r5
    c3de:	4630      	mov	r0, r6
    c3e0:	f000 f8b8 	bl	c554 <_sbrk_r>
    c3e4:	1c43      	adds	r3, r0, #1
    c3e6:	d126      	bne.n	c436 <_malloc_r+0x96>
    c3e8:	230c      	movs	r3, #12
    c3ea:	6033      	str	r3, [r6, #0]
    c3ec:	4630      	mov	r0, r6
    c3ee:	f000 fc44 	bl	cc7a <__malloc_unlock>
    c3f2:	e7e4      	b.n	c3be <_malloc_r+0x1e>
    c3f4:	680b      	ldr	r3, [r1, #0]
    c3f6:	1b5b      	subs	r3, r3, r5
    c3f8:	d41a      	bmi.n	c430 <_malloc_r+0x90>
    c3fa:	2b0b      	cmp	r3, #11
    c3fc:	d90f      	bls.n	c41e <_malloc_r+0x7e>
    c3fe:	600b      	str	r3, [r1, #0]
    c400:	50cd      	str	r5, [r1, r3]
    c402:	18cc      	adds	r4, r1, r3
    c404:	4630      	mov	r0, r6
    c406:	f000 fc38 	bl	cc7a <__malloc_unlock>
    c40a:	f104 000b 	add.w	r0, r4, #11
    c40e:	1d23      	adds	r3, r4, #4
    c410:	f020 0007 	bic.w	r0, r0, #7
    c414:	1ac3      	subs	r3, r0, r3
    c416:	d01b      	beq.n	c450 <_malloc_r+0xb0>
    c418:	425a      	negs	r2, r3
    c41a:	50e2      	str	r2, [r4, r3]
    c41c:	bd70      	pop	{r4, r5, r6, pc}
    c41e:	428c      	cmp	r4, r1
    c420:	bf0d      	iteet	eq
    c422:	6863      	ldreq	r3, [r4, #4]
    c424:	684b      	ldrne	r3, [r1, #4]
    c426:	6063      	strne	r3, [r4, #4]
    c428:	6013      	streq	r3, [r2, #0]
    c42a:	bf18      	it	ne
    c42c:	460c      	movne	r4, r1
    c42e:	e7e9      	b.n	c404 <_malloc_r+0x64>
    c430:	460c      	mov	r4, r1
    c432:	6849      	ldr	r1, [r1, #4]
    c434:	e7ca      	b.n	c3cc <_malloc_r+0x2c>
    c436:	1cc4      	adds	r4, r0, #3
    c438:	f024 0403 	bic.w	r4, r4, #3
    c43c:	42a0      	cmp	r0, r4
    c43e:	d005      	beq.n	c44c <_malloc_r+0xac>
    c440:	1a21      	subs	r1, r4, r0
    c442:	4630      	mov	r0, r6
    c444:	f000 f886 	bl	c554 <_sbrk_r>
    c448:	3001      	adds	r0, #1
    c44a:	d0cd      	beq.n	c3e8 <_malloc_r+0x48>
    c44c:	6025      	str	r5, [r4, #0]
    c44e:	e7d9      	b.n	c404 <_malloc_r+0x64>
    c450:	bd70      	pop	{r4, r5, r6, pc}
    c452:	bf00      	nop
    c454:	20000f44 	.word	0x20000f44
    c458:	20000f48 	.word	0x20000f48

0000c45c <iprintf>:
    c45c:	b40f      	push	{r0, r1, r2, r3}
    c45e:	4b0a      	ldr	r3, [pc, #40]	; (c488 <iprintf+0x2c>)
    c460:	b513      	push	{r0, r1, r4, lr}
    c462:	681c      	ldr	r4, [r3, #0]
    c464:	b124      	cbz	r4, c470 <iprintf+0x14>
    c466:	69a3      	ldr	r3, [r4, #24]
    c468:	b913      	cbnz	r3, c470 <iprintf+0x14>
    c46a:	4620      	mov	r0, r4
    c46c:	f000 fb16 	bl	ca9c <__sinit>
    c470:	ab05      	add	r3, sp, #20
    c472:	9a04      	ldr	r2, [sp, #16]
    c474:	68a1      	ldr	r1, [r4, #8]
    c476:	9301      	str	r3, [sp, #4]
    c478:	4620      	mov	r0, r4
    c47a:	f000 fd77 	bl	cf6c <_vfiprintf_r>
    c47e:	b002      	add	sp, #8
    c480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c484:	b004      	add	sp, #16
    c486:	4770      	bx	lr
    c488:	20000558 	.word	0x20000558

0000c48c <_puts_r>:
    c48c:	b570      	push	{r4, r5, r6, lr}
    c48e:	460e      	mov	r6, r1
    c490:	4605      	mov	r5, r0
    c492:	b118      	cbz	r0, c49c <_puts_r+0x10>
    c494:	6983      	ldr	r3, [r0, #24]
    c496:	b90b      	cbnz	r3, c49c <_puts_r+0x10>
    c498:	f000 fb00 	bl	ca9c <__sinit>
    c49c:	69ab      	ldr	r3, [r5, #24]
    c49e:	68ac      	ldr	r4, [r5, #8]
    c4a0:	b913      	cbnz	r3, c4a8 <_puts_r+0x1c>
    c4a2:	4628      	mov	r0, r5
    c4a4:	f000 fafa 	bl	ca9c <__sinit>
    c4a8:	4b23      	ldr	r3, [pc, #140]	; (c538 <_puts_r+0xac>)
    c4aa:	429c      	cmp	r4, r3
    c4ac:	d117      	bne.n	c4de <_puts_r+0x52>
    c4ae:	686c      	ldr	r4, [r5, #4]
    c4b0:	89a3      	ldrh	r3, [r4, #12]
    c4b2:	071b      	lsls	r3, r3, #28
    c4b4:	d51d      	bpl.n	c4f2 <_puts_r+0x66>
    c4b6:	6923      	ldr	r3, [r4, #16]
    c4b8:	b1db      	cbz	r3, c4f2 <_puts_r+0x66>
    c4ba:	3e01      	subs	r6, #1
    c4bc:	68a3      	ldr	r3, [r4, #8]
    c4be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    c4c2:	3b01      	subs	r3, #1
    c4c4:	60a3      	str	r3, [r4, #8]
    c4c6:	b9e9      	cbnz	r1, c504 <_puts_r+0x78>
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	da2e      	bge.n	c52a <_puts_r+0x9e>
    c4cc:	4622      	mov	r2, r4
    c4ce:	210a      	movs	r1, #10
    c4d0:	4628      	mov	r0, r5
    c4d2:	f000 f931 	bl	c738 <__swbuf_r>
    c4d6:	3001      	adds	r0, #1
    c4d8:	d011      	beq.n	c4fe <_puts_r+0x72>
    c4da:	200a      	movs	r0, #10
    c4dc:	bd70      	pop	{r4, r5, r6, pc}
    c4de:	4b17      	ldr	r3, [pc, #92]	; (c53c <_puts_r+0xb0>)
    c4e0:	429c      	cmp	r4, r3
    c4e2:	d101      	bne.n	c4e8 <_puts_r+0x5c>
    c4e4:	68ac      	ldr	r4, [r5, #8]
    c4e6:	e7e3      	b.n	c4b0 <_puts_r+0x24>
    c4e8:	4b15      	ldr	r3, [pc, #84]	; (c540 <_puts_r+0xb4>)
    c4ea:	429c      	cmp	r4, r3
    c4ec:	bf08      	it	eq
    c4ee:	68ec      	ldreq	r4, [r5, #12]
    c4f0:	e7de      	b.n	c4b0 <_puts_r+0x24>
    c4f2:	4621      	mov	r1, r4
    c4f4:	4628      	mov	r0, r5
    c4f6:	f000 f971 	bl	c7dc <__swsetup_r>
    c4fa:	2800      	cmp	r0, #0
    c4fc:	d0dd      	beq.n	c4ba <_puts_r+0x2e>
    c4fe:	f04f 30ff 	mov.w	r0, #4294967295
    c502:	bd70      	pop	{r4, r5, r6, pc}
    c504:	2b00      	cmp	r3, #0
    c506:	da04      	bge.n	c512 <_puts_r+0x86>
    c508:	69a2      	ldr	r2, [r4, #24]
    c50a:	4293      	cmp	r3, r2
    c50c:	db06      	blt.n	c51c <_puts_r+0x90>
    c50e:	290a      	cmp	r1, #10
    c510:	d004      	beq.n	c51c <_puts_r+0x90>
    c512:	6823      	ldr	r3, [r4, #0]
    c514:	1c5a      	adds	r2, r3, #1
    c516:	6022      	str	r2, [r4, #0]
    c518:	7019      	strb	r1, [r3, #0]
    c51a:	e7cf      	b.n	c4bc <_puts_r+0x30>
    c51c:	4622      	mov	r2, r4
    c51e:	4628      	mov	r0, r5
    c520:	f000 f90a 	bl	c738 <__swbuf_r>
    c524:	3001      	adds	r0, #1
    c526:	d1c9      	bne.n	c4bc <_puts_r+0x30>
    c528:	e7e9      	b.n	c4fe <_puts_r+0x72>
    c52a:	6823      	ldr	r3, [r4, #0]
    c52c:	200a      	movs	r0, #10
    c52e:	1c5a      	adds	r2, r3, #1
    c530:	6022      	str	r2, [r4, #0]
    c532:	7018      	strb	r0, [r3, #0]
    c534:	bd70      	pop	{r4, r5, r6, pc}
    c536:	bf00      	nop
    c538:	0000e3a0 	.word	0x0000e3a0
    c53c:	0000e3c0 	.word	0x0000e3c0
    c540:	0000e380 	.word	0x0000e380

0000c544 <puts>:
    c544:	4b02      	ldr	r3, [pc, #8]	; (c550 <puts+0xc>)
    c546:	4601      	mov	r1, r0
    c548:	6818      	ldr	r0, [r3, #0]
    c54a:	f7ff bf9f 	b.w	c48c <_puts_r>
    c54e:	bf00      	nop
    c550:	20000558 	.word	0x20000558

0000c554 <_sbrk_r>:
    c554:	b538      	push	{r3, r4, r5, lr}
    c556:	4c06      	ldr	r4, [pc, #24]	; (c570 <_sbrk_r+0x1c>)
    c558:	2300      	movs	r3, #0
    c55a:	4605      	mov	r5, r0
    c55c:	4608      	mov	r0, r1
    c55e:	6023      	str	r3, [r4, #0]
    c560:	f7f9 fcf4 	bl	5f4c <_sbrk>
    c564:	1c43      	adds	r3, r0, #1
    c566:	d102      	bne.n	c56e <_sbrk_r+0x1a>
    c568:	6823      	ldr	r3, [r4, #0]
    c56a:	b103      	cbz	r3, c56e <_sbrk_r+0x1a>
    c56c:	602b      	str	r3, [r5, #0]
    c56e:	bd38      	pop	{r3, r4, r5, pc}
    c570:	20003c48 	.word	0x20003c48

0000c574 <setbuf>:
    c574:	2900      	cmp	r1, #0
    c576:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c57a:	bf0c      	ite	eq
    c57c:	2202      	moveq	r2, #2
    c57e:	2200      	movne	r2, #0
    c580:	f000 b800 	b.w	c584 <setvbuf>

0000c584 <setvbuf>:
    c584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c588:	461d      	mov	r5, r3
    c58a:	4b51      	ldr	r3, [pc, #324]	; (c6d0 <setvbuf+0x14c>)
    c58c:	681e      	ldr	r6, [r3, #0]
    c58e:	4604      	mov	r4, r0
    c590:	460f      	mov	r7, r1
    c592:	4690      	mov	r8, r2
    c594:	b126      	cbz	r6, c5a0 <setvbuf+0x1c>
    c596:	69b3      	ldr	r3, [r6, #24]
    c598:	b913      	cbnz	r3, c5a0 <setvbuf+0x1c>
    c59a:	4630      	mov	r0, r6
    c59c:	f000 fa7e 	bl	ca9c <__sinit>
    c5a0:	4b4c      	ldr	r3, [pc, #304]	; (c6d4 <setvbuf+0x150>)
    c5a2:	429c      	cmp	r4, r3
    c5a4:	d152      	bne.n	c64c <setvbuf+0xc8>
    c5a6:	6874      	ldr	r4, [r6, #4]
    c5a8:	f1b8 0f02 	cmp.w	r8, #2
    c5ac:	d006      	beq.n	c5bc <setvbuf+0x38>
    c5ae:	f1b8 0f01 	cmp.w	r8, #1
    c5b2:	f200 8089 	bhi.w	c6c8 <setvbuf+0x144>
    c5b6:	2d00      	cmp	r5, #0
    c5b8:	f2c0 8086 	blt.w	c6c8 <setvbuf+0x144>
    c5bc:	4621      	mov	r1, r4
    c5be:	4630      	mov	r0, r6
    c5c0:	f000 fa02 	bl	c9c8 <_fflush_r>
    c5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c5c6:	b141      	cbz	r1, c5da <setvbuf+0x56>
    c5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c5cc:	4299      	cmp	r1, r3
    c5ce:	d002      	beq.n	c5d6 <setvbuf+0x52>
    c5d0:	4630      	mov	r0, r6
    c5d2:	f7ff fe97 	bl	c304 <_free_r>
    c5d6:	2300      	movs	r3, #0
    c5d8:	6363      	str	r3, [r4, #52]	; 0x34
    c5da:	2300      	movs	r3, #0
    c5dc:	61a3      	str	r3, [r4, #24]
    c5de:	6063      	str	r3, [r4, #4]
    c5e0:	89a3      	ldrh	r3, [r4, #12]
    c5e2:	061b      	lsls	r3, r3, #24
    c5e4:	d503      	bpl.n	c5ee <setvbuf+0x6a>
    c5e6:	6921      	ldr	r1, [r4, #16]
    c5e8:	4630      	mov	r0, r6
    c5ea:	f7ff fe8b 	bl	c304 <_free_r>
    c5ee:	89a3      	ldrh	r3, [r4, #12]
    c5f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c5f4:	f023 0303 	bic.w	r3, r3, #3
    c5f8:	f1b8 0f02 	cmp.w	r8, #2
    c5fc:	81a3      	strh	r3, [r4, #12]
    c5fe:	d05d      	beq.n	c6bc <setvbuf+0x138>
    c600:	ab01      	add	r3, sp, #4
    c602:	466a      	mov	r2, sp
    c604:	4621      	mov	r1, r4
    c606:	4630      	mov	r0, r6
    c608:	f000 fad2 	bl	cbb0 <__swhatbuf_r>
    c60c:	89a3      	ldrh	r3, [r4, #12]
    c60e:	4318      	orrs	r0, r3
    c610:	81a0      	strh	r0, [r4, #12]
    c612:	bb2d      	cbnz	r5, c660 <setvbuf+0xdc>
    c614:	9d00      	ldr	r5, [sp, #0]
    c616:	4628      	mov	r0, r5
    c618:	f7ff fe58 	bl	c2cc <malloc>
    c61c:	4607      	mov	r7, r0
    c61e:	2800      	cmp	r0, #0
    c620:	d14e      	bne.n	c6c0 <setvbuf+0x13c>
    c622:	f8dd 9000 	ldr.w	r9, [sp]
    c626:	45a9      	cmp	r9, r5
    c628:	d13c      	bne.n	c6a4 <setvbuf+0x120>
    c62a:	f04f 30ff 	mov.w	r0, #4294967295
    c62e:	89a3      	ldrh	r3, [r4, #12]
    c630:	f043 0302 	orr.w	r3, r3, #2
    c634:	81a3      	strh	r3, [r4, #12]
    c636:	2300      	movs	r3, #0
    c638:	60a3      	str	r3, [r4, #8]
    c63a:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c63e:	6023      	str	r3, [r4, #0]
    c640:	6123      	str	r3, [r4, #16]
    c642:	2301      	movs	r3, #1
    c644:	6163      	str	r3, [r4, #20]
    c646:	b003      	add	sp, #12
    c648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c64c:	4b22      	ldr	r3, [pc, #136]	; (c6d8 <setvbuf+0x154>)
    c64e:	429c      	cmp	r4, r3
    c650:	d101      	bne.n	c656 <setvbuf+0xd2>
    c652:	68b4      	ldr	r4, [r6, #8]
    c654:	e7a8      	b.n	c5a8 <setvbuf+0x24>
    c656:	4b21      	ldr	r3, [pc, #132]	; (c6dc <setvbuf+0x158>)
    c658:	429c      	cmp	r4, r3
    c65a:	bf08      	it	eq
    c65c:	68f4      	ldreq	r4, [r6, #12]
    c65e:	e7a3      	b.n	c5a8 <setvbuf+0x24>
    c660:	2f00      	cmp	r7, #0
    c662:	d0d8      	beq.n	c616 <setvbuf+0x92>
    c664:	69b3      	ldr	r3, [r6, #24]
    c666:	b913      	cbnz	r3, c66e <setvbuf+0xea>
    c668:	4630      	mov	r0, r6
    c66a:	f000 fa17 	bl	ca9c <__sinit>
    c66e:	f1b8 0f01 	cmp.w	r8, #1
    c672:	bf08      	it	eq
    c674:	89a3      	ldrheq	r3, [r4, #12]
    c676:	6027      	str	r7, [r4, #0]
    c678:	bf04      	itt	eq
    c67a:	f043 0301 	orreq.w	r3, r3, #1
    c67e:	81a3      	strheq	r3, [r4, #12]
    c680:	89a3      	ldrh	r3, [r4, #12]
    c682:	6127      	str	r7, [r4, #16]
    c684:	f013 0008 	ands.w	r0, r3, #8
    c688:	6165      	str	r5, [r4, #20]
    c68a:	d01b      	beq.n	c6c4 <setvbuf+0x140>
    c68c:	f013 0001 	ands.w	r0, r3, #1
    c690:	bf18      	it	ne
    c692:	426d      	negne	r5, r5
    c694:	f04f 0300 	mov.w	r3, #0
    c698:	bf1d      	ittte	ne
    c69a:	60a3      	strne	r3, [r4, #8]
    c69c:	61a5      	strne	r5, [r4, #24]
    c69e:	4618      	movne	r0, r3
    c6a0:	60a5      	streq	r5, [r4, #8]
    c6a2:	e7d0      	b.n	c646 <setvbuf+0xc2>
    c6a4:	4648      	mov	r0, r9
    c6a6:	f7ff fe11 	bl	c2cc <malloc>
    c6aa:	4607      	mov	r7, r0
    c6ac:	2800      	cmp	r0, #0
    c6ae:	d0bc      	beq.n	c62a <setvbuf+0xa6>
    c6b0:	89a3      	ldrh	r3, [r4, #12]
    c6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c6b6:	81a3      	strh	r3, [r4, #12]
    c6b8:	464d      	mov	r5, r9
    c6ba:	e7d3      	b.n	c664 <setvbuf+0xe0>
    c6bc:	2000      	movs	r0, #0
    c6be:	e7b6      	b.n	c62e <setvbuf+0xaa>
    c6c0:	46a9      	mov	r9, r5
    c6c2:	e7f5      	b.n	c6b0 <setvbuf+0x12c>
    c6c4:	60a0      	str	r0, [r4, #8]
    c6c6:	e7be      	b.n	c646 <setvbuf+0xc2>
    c6c8:	f04f 30ff 	mov.w	r0, #4294967295
    c6cc:	e7bb      	b.n	c646 <setvbuf+0xc2>
    c6ce:	bf00      	nop
    c6d0:	20000558 	.word	0x20000558
    c6d4:	0000e3a0 	.word	0x0000e3a0
    c6d8:	0000e3c0 	.word	0x0000e3c0
    c6dc:	0000e380 	.word	0x0000e380

0000c6e0 <siprintf>:
    c6e0:	b40e      	push	{r1, r2, r3}
    c6e2:	b500      	push	{lr}
    c6e4:	b09c      	sub	sp, #112	; 0x70
    c6e6:	f44f 7102 	mov.w	r1, #520	; 0x208
    c6ea:	ab1d      	add	r3, sp, #116	; 0x74
    c6ec:	f8ad 1014 	strh.w	r1, [sp, #20]
    c6f0:	9002      	str	r0, [sp, #8]
    c6f2:	9006      	str	r0, [sp, #24]
    c6f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c6f8:	480a      	ldr	r0, [pc, #40]	; (c724 <siprintf+0x44>)
    c6fa:	9104      	str	r1, [sp, #16]
    c6fc:	9107      	str	r1, [sp, #28]
    c6fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c702:	f853 2b04 	ldr.w	r2, [r3], #4
    c706:	f8ad 1016 	strh.w	r1, [sp, #22]
    c70a:	6800      	ldr	r0, [r0, #0]
    c70c:	9301      	str	r3, [sp, #4]
    c70e:	a902      	add	r1, sp, #8
    c710:	f000 fb10 	bl	cd34 <_svfiprintf_r>
    c714:	9b02      	ldr	r3, [sp, #8]
    c716:	2200      	movs	r2, #0
    c718:	701a      	strb	r2, [r3, #0]
    c71a:	b01c      	add	sp, #112	; 0x70
    c71c:	f85d eb04 	ldr.w	lr, [sp], #4
    c720:	b003      	add	sp, #12
    c722:	4770      	bx	lr
    c724:	20000558 	.word	0x20000558

0000c728 <strlen>:
    c728:	4603      	mov	r3, r0
    c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
    c72e:	2a00      	cmp	r2, #0
    c730:	d1fb      	bne.n	c72a <strlen+0x2>
    c732:	1a18      	subs	r0, r3, r0
    c734:	3801      	subs	r0, #1
    c736:	4770      	bx	lr

0000c738 <__swbuf_r>:
    c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c73a:	460e      	mov	r6, r1
    c73c:	4614      	mov	r4, r2
    c73e:	4605      	mov	r5, r0
    c740:	b118      	cbz	r0, c74a <__swbuf_r+0x12>
    c742:	6983      	ldr	r3, [r0, #24]
    c744:	b90b      	cbnz	r3, c74a <__swbuf_r+0x12>
    c746:	f000 f9a9 	bl	ca9c <__sinit>
    c74a:	4b21      	ldr	r3, [pc, #132]	; (c7d0 <__swbuf_r+0x98>)
    c74c:	429c      	cmp	r4, r3
    c74e:	d12a      	bne.n	c7a6 <__swbuf_r+0x6e>
    c750:	686c      	ldr	r4, [r5, #4]
    c752:	69a3      	ldr	r3, [r4, #24]
    c754:	60a3      	str	r3, [r4, #8]
    c756:	89a3      	ldrh	r3, [r4, #12]
    c758:	071a      	lsls	r2, r3, #28
    c75a:	d52e      	bpl.n	c7ba <__swbuf_r+0x82>
    c75c:	6923      	ldr	r3, [r4, #16]
    c75e:	b363      	cbz	r3, c7ba <__swbuf_r+0x82>
    c760:	6923      	ldr	r3, [r4, #16]
    c762:	6820      	ldr	r0, [r4, #0]
    c764:	1ac0      	subs	r0, r0, r3
    c766:	6963      	ldr	r3, [r4, #20]
    c768:	b2f6      	uxtb	r6, r6
    c76a:	4298      	cmp	r0, r3
    c76c:	4637      	mov	r7, r6
    c76e:	db04      	blt.n	c77a <__swbuf_r+0x42>
    c770:	4621      	mov	r1, r4
    c772:	4628      	mov	r0, r5
    c774:	f000 f928 	bl	c9c8 <_fflush_r>
    c778:	bb28      	cbnz	r0, c7c6 <__swbuf_r+0x8e>
    c77a:	68a3      	ldr	r3, [r4, #8]
    c77c:	3b01      	subs	r3, #1
    c77e:	60a3      	str	r3, [r4, #8]
    c780:	6823      	ldr	r3, [r4, #0]
    c782:	1c5a      	adds	r2, r3, #1
    c784:	6022      	str	r2, [r4, #0]
    c786:	701e      	strb	r6, [r3, #0]
    c788:	6963      	ldr	r3, [r4, #20]
    c78a:	3001      	adds	r0, #1
    c78c:	4298      	cmp	r0, r3
    c78e:	d004      	beq.n	c79a <__swbuf_r+0x62>
    c790:	89a3      	ldrh	r3, [r4, #12]
    c792:	07db      	lsls	r3, r3, #31
    c794:	d519      	bpl.n	c7ca <__swbuf_r+0x92>
    c796:	2e0a      	cmp	r6, #10
    c798:	d117      	bne.n	c7ca <__swbuf_r+0x92>
    c79a:	4621      	mov	r1, r4
    c79c:	4628      	mov	r0, r5
    c79e:	f000 f913 	bl	c9c8 <_fflush_r>
    c7a2:	b190      	cbz	r0, c7ca <__swbuf_r+0x92>
    c7a4:	e00f      	b.n	c7c6 <__swbuf_r+0x8e>
    c7a6:	4b0b      	ldr	r3, [pc, #44]	; (c7d4 <__swbuf_r+0x9c>)
    c7a8:	429c      	cmp	r4, r3
    c7aa:	d101      	bne.n	c7b0 <__swbuf_r+0x78>
    c7ac:	68ac      	ldr	r4, [r5, #8]
    c7ae:	e7d0      	b.n	c752 <__swbuf_r+0x1a>
    c7b0:	4b09      	ldr	r3, [pc, #36]	; (c7d8 <__swbuf_r+0xa0>)
    c7b2:	429c      	cmp	r4, r3
    c7b4:	bf08      	it	eq
    c7b6:	68ec      	ldreq	r4, [r5, #12]
    c7b8:	e7cb      	b.n	c752 <__swbuf_r+0x1a>
    c7ba:	4621      	mov	r1, r4
    c7bc:	4628      	mov	r0, r5
    c7be:	f000 f80d 	bl	c7dc <__swsetup_r>
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d0cc      	beq.n	c760 <__swbuf_r+0x28>
    c7c6:	f04f 37ff 	mov.w	r7, #4294967295
    c7ca:	4638      	mov	r0, r7
    c7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7ce:	bf00      	nop
    c7d0:	0000e3a0 	.word	0x0000e3a0
    c7d4:	0000e3c0 	.word	0x0000e3c0
    c7d8:	0000e380 	.word	0x0000e380

0000c7dc <__swsetup_r>:
    c7dc:	4b32      	ldr	r3, [pc, #200]	; (c8a8 <__swsetup_r+0xcc>)
    c7de:	b570      	push	{r4, r5, r6, lr}
    c7e0:	681d      	ldr	r5, [r3, #0]
    c7e2:	4606      	mov	r6, r0
    c7e4:	460c      	mov	r4, r1
    c7e6:	b125      	cbz	r5, c7f2 <__swsetup_r+0x16>
    c7e8:	69ab      	ldr	r3, [r5, #24]
    c7ea:	b913      	cbnz	r3, c7f2 <__swsetup_r+0x16>
    c7ec:	4628      	mov	r0, r5
    c7ee:	f000 f955 	bl	ca9c <__sinit>
    c7f2:	4b2e      	ldr	r3, [pc, #184]	; (c8ac <__swsetup_r+0xd0>)
    c7f4:	429c      	cmp	r4, r3
    c7f6:	d10f      	bne.n	c818 <__swsetup_r+0x3c>
    c7f8:	686c      	ldr	r4, [r5, #4]
    c7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c7fe:	b29a      	uxth	r2, r3
    c800:	0715      	lsls	r5, r2, #28
    c802:	d42c      	bmi.n	c85e <__swsetup_r+0x82>
    c804:	06d0      	lsls	r0, r2, #27
    c806:	d411      	bmi.n	c82c <__swsetup_r+0x50>
    c808:	2209      	movs	r2, #9
    c80a:	6032      	str	r2, [r6, #0]
    c80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c810:	81a3      	strh	r3, [r4, #12]
    c812:	f04f 30ff 	mov.w	r0, #4294967295
    c816:	bd70      	pop	{r4, r5, r6, pc}
    c818:	4b25      	ldr	r3, [pc, #148]	; (c8b0 <__swsetup_r+0xd4>)
    c81a:	429c      	cmp	r4, r3
    c81c:	d101      	bne.n	c822 <__swsetup_r+0x46>
    c81e:	68ac      	ldr	r4, [r5, #8]
    c820:	e7eb      	b.n	c7fa <__swsetup_r+0x1e>
    c822:	4b24      	ldr	r3, [pc, #144]	; (c8b4 <__swsetup_r+0xd8>)
    c824:	429c      	cmp	r4, r3
    c826:	bf08      	it	eq
    c828:	68ec      	ldreq	r4, [r5, #12]
    c82a:	e7e6      	b.n	c7fa <__swsetup_r+0x1e>
    c82c:	0751      	lsls	r1, r2, #29
    c82e:	d512      	bpl.n	c856 <__swsetup_r+0x7a>
    c830:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c832:	b141      	cbz	r1, c846 <__swsetup_r+0x6a>
    c834:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c838:	4299      	cmp	r1, r3
    c83a:	d002      	beq.n	c842 <__swsetup_r+0x66>
    c83c:	4630      	mov	r0, r6
    c83e:	f7ff fd61 	bl	c304 <_free_r>
    c842:	2300      	movs	r3, #0
    c844:	6363      	str	r3, [r4, #52]	; 0x34
    c846:	89a3      	ldrh	r3, [r4, #12]
    c848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c84c:	81a3      	strh	r3, [r4, #12]
    c84e:	2300      	movs	r3, #0
    c850:	6063      	str	r3, [r4, #4]
    c852:	6923      	ldr	r3, [r4, #16]
    c854:	6023      	str	r3, [r4, #0]
    c856:	89a3      	ldrh	r3, [r4, #12]
    c858:	f043 0308 	orr.w	r3, r3, #8
    c85c:	81a3      	strh	r3, [r4, #12]
    c85e:	6923      	ldr	r3, [r4, #16]
    c860:	b94b      	cbnz	r3, c876 <__swsetup_r+0x9a>
    c862:	89a3      	ldrh	r3, [r4, #12]
    c864:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c86c:	d003      	beq.n	c876 <__swsetup_r+0x9a>
    c86e:	4621      	mov	r1, r4
    c870:	4630      	mov	r0, r6
    c872:	f000 f9c1 	bl	cbf8 <__smakebuf_r>
    c876:	89a2      	ldrh	r2, [r4, #12]
    c878:	f012 0301 	ands.w	r3, r2, #1
    c87c:	d00c      	beq.n	c898 <__swsetup_r+0xbc>
    c87e:	2300      	movs	r3, #0
    c880:	60a3      	str	r3, [r4, #8]
    c882:	6963      	ldr	r3, [r4, #20]
    c884:	425b      	negs	r3, r3
    c886:	61a3      	str	r3, [r4, #24]
    c888:	6923      	ldr	r3, [r4, #16]
    c88a:	b953      	cbnz	r3, c8a2 <__swsetup_r+0xc6>
    c88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c890:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    c894:	d1ba      	bne.n	c80c <__swsetup_r+0x30>
    c896:	bd70      	pop	{r4, r5, r6, pc}
    c898:	0792      	lsls	r2, r2, #30
    c89a:	bf58      	it	pl
    c89c:	6963      	ldrpl	r3, [r4, #20]
    c89e:	60a3      	str	r3, [r4, #8]
    c8a0:	e7f2      	b.n	c888 <__swsetup_r+0xac>
    c8a2:	2000      	movs	r0, #0
    c8a4:	e7f7      	b.n	c896 <__swsetup_r+0xba>
    c8a6:	bf00      	nop
    c8a8:	20000558 	.word	0x20000558
    c8ac:	0000e3a0 	.word	0x0000e3a0
    c8b0:	0000e3c0 	.word	0x0000e3c0
    c8b4:	0000e380 	.word	0x0000e380

0000c8b8 <__sflush_r>:
    c8b8:	898a      	ldrh	r2, [r1, #12]
    c8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8be:	4605      	mov	r5, r0
    c8c0:	0710      	lsls	r0, r2, #28
    c8c2:	460c      	mov	r4, r1
    c8c4:	d45a      	bmi.n	c97c <__sflush_r+0xc4>
    c8c6:	684b      	ldr	r3, [r1, #4]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	dc05      	bgt.n	c8d8 <__sflush_r+0x20>
    c8cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	dc02      	bgt.n	c8d8 <__sflush_r+0x20>
    c8d2:	2000      	movs	r0, #0
    c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c8da:	2e00      	cmp	r6, #0
    c8dc:	d0f9      	beq.n	c8d2 <__sflush_r+0x1a>
    c8de:	2300      	movs	r3, #0
    c8e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c8e4:	682f      	ldr	r7, [r5, #0]
    c8e6:	602b      	str	r3, [r5, #0]
    c8e8:	d033      	beq.n	c952 <__sflush_r+0x9a>
    c8ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c8ec:	89a3      	ldrh	r3, [r4, #12]
    c8ee:	075a      	lsls	r2, r3, #29
    c8f0:	d505      	bpl.n	c8fe <__sflush_r+0x46>
    c8f2:	6863      	ldr	r3, [r4, #4]
    c8f4:	1ac0      	subs	r0, r0, r3
    c8f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c8f8:	b10b      	cbz	r3, c8fe <__sflush_r+0x46>
    c8fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c8fc:	1ac0      	subs	r0, r0, r3
    c8fe:	2300      	movs	r3, #0
    c900:	4602      	mov	r2, r0
    c902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c904:	6a21      	ldr	r1, [r4, #32]
    c906:	4628      	mov	r0, r5
    c908:	47b0      	blx	r6
    c90a:	1c43      	adds	r3, r0, #1
    c90c:	89a3      	ldrh	r3, [r4, #12]
    c90e:	d106      	bne.n	c91e <__sflush_r+0x66>
    c910:	6829      	ldr	r1, [r5, #0]
    c912:	291d      	cmp	r1, #29
    c914:	d84b      	bhi.n	c9ae <__sflush_r+0xf6>
    c916:	4a2b      	ldr	r2, [pc, #172]	; (c9c4 <__sflush_r+0x10c>)
    c918:	40ca      	lsrs	r2, r1
    c91a:	07d6      	lsls	r6, r2, #31
    c91c:	d547      	bpl.n	c9ae <__sflush_r+0xf6>
    c91e:	2200      	movs	r2, #0
    c920:	6062      	str	r2, [r4, #4]
    c922:	04d9      	lsls	r1, r3, #19
    c924:	6922      	ldr	r2, [r4, #16]
    c926:	6022      	str	r2, [r4, #0]
    c928:	d504      	bpl.n	c934 <__sflush_r+0x7c>
    c92a:	1c42      	adds	r2, r0, #1
    c92c:	d101      	bne.n	c932 <__sflush_r+0x7a>
    c92e:	682b      	ldr	r3, [r5, #0]
    c930:	b903      	cbnz	r3, c934 <__sflush_r+0x7c>
    c932:	6560      	str	r0, [r4, #84]	; 0x54
    c934:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c936:	602f      	str	r7, [r5, #0]
    c938:	2900      	cmp	r1, #0
    c93a:	d0ca      	beq.n	c8d2 <__sflush_r+0x1a>
    c93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c940:	4299      	cmp	r1, r3
    c942:	d002      	beq.n	c94a <__sflush_r+0x92>
    c944:	4628      	mov	r0, r5
    c946:	f7ff fcdd 	bl	c304 <_free_r>
    c94a:	2000      	movs	r0, #0
    c94c:	6360      	str	r0, [r4, #52]	; 0x34
    c94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c952:	6a21      	ldr	r1, [r4, #32]
    c954:	2301      	movs	r3, #1
    c956:	4628      	mov	r0, r5
    c958:	47b0      	blx	r6
    c95a:	1c41      	adds	r1, r0, #1
    c95c:	d1c6      	bne.n	c8ec <__sflush_r+0x34>
    c95e:	682b      	ldr	r3, [r5, #0]
    c960:	2b00      	cmp	r3, #0
    c962:	d0c3      	beq.n	c8ec <__sflush_r+0x34>
    c964:	2b1d      	cmp	r3, #29
    c966:	d001      	beq.n	c96c <__sflush_r+0xb4>
    c968:	2b16      	cmp	r3, #22
    c96a:	d101      	bne.n	c970 <__sflush_r+0xb8>
    c96c:	602f      	str	r7, [r5, #0]
    c96e:	e7b0      	b.n	c8d2 <__sflush_r+0x1a>
    c970:	89a3      	ldrh	r3, [r4, #12]
    c972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c976:	81a3      	strh	r3, [r4, #12]
    c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c97c:	690f      	ldr	r7, [r1, #16]
    c97e:	2f00      	cmp	r7, #0
    c980:	d0a7      	beq.n	c8d2 <__sflush_r+0x1a>
    c982:	0793      	lsls	r3, r2, #30
    c984:	680e      	ldr	r6, [r1, #0]
    c986:	bf08      	it	eq
    c988:	694b      	ldreq	r3, [r1, #20]
    c98a:	600f      	str	r7, [r1, #0]
    c98c:	bf18      	it	ne
    c98e:	2300      	movne	r3, #0
    c990:	eba6 0807 	sub.w	r8, r6, r7
    c994:	608b      	str	r3, [r1, #8]
    c996:	f1b8 0f00 	cmp.w	r8, #0
    c99a:	dd9a      	ble.n	c8d2 <__sflush_r+0x1a>
    c99c:	4643      	mov	r3, r8
    c99e:	463a      	mov	r2, r7
    c9a0:	6a21      	ldr	r1, [r4, #32]
    c9a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c9a4:	4628      	mov	r0, r5
    c9a6:	47b0      	blx	r6
    c9a8:	2800      	cmp	r0, #0
    c9aa:	dc07      	bgt.n	c9bc <__sflush_r+0x104>
    c9ac:	89a3      	ldrh	r3, [r4, #12]
    c9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9b2:	81a3      	strh	r3, [r4, #12]
    c9b4:	f04f 30ff 	mov.w	r0, #4294967295
    c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9bc:	4407      	add	r7, r0
    c9be:	eba8 0800 	sub.w	r8, r8, r0
    c9c2:	e7e8      	b.n	c996 <__sflush_r+0xde>
    c9c4:	20400001 	.word	0x20400001

0000c9c8 <_fflush_r>:
    c9c8:	b538      	push	{r3, r4, r5, lr}
    c9ca:	690b      	ldr	r3, [r1, #16]
    c9cc:	4605      	mov	r5, r0
    c9ce:	460c      	mov	r4, r1
    c9d0:	b1db      	cbz	r3, ca0a <_fflush_r+0x42>
    c9d2:	b118      	cbz	r0, c9dc <_fflush_r+0x14>
    c9d4:	6983      	ldr	r3, [r0, #24]
    c9d6:	b90b      	cbnz	r3, c9dc <_fflush_r+0x14>
    c9d8:	f000 f860 	bl	ca9c <__sinit>
    c9dc:	4b0c      	ldr	r3, [pc, #48]	; (ca10 <_fflush_r+0x48>)
    c9de:	429c      	cmp	r4, r3
    c9e0:	d109      	bne.n	c9f6 <_fflush_r+0x2e>
    c9e2:	686c      	ldr	r4, [r5, #4]
    c9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c9e8:	b17b      	cbz	r3, ca0a <_fflush_r+0x42>
    c9ea:	4621      	mov	r1, r4
    c9ec:	4628      	mov	r0, r5
    c9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c9f2:	f7ff bf61 	b.w	c8b8 <__sflush_r>
    c9f6:	4b07      	ldr	r3, [pc, #28]	; (ca14 <_fflush_r+0x4c>)
    c9f8:	429c      	cmp	r4, r3
    c9fa:	d101      	bne.n	ca00 <_fflush_r+0x38>
    c9fc:	68ac      	ldr	r4, [r5, #8]
    c9fe:	e7f1      	b.n	c9e4 <_fflush_r+0x1c>
    ca00:	4b05      	ldr	r3, [pc, #20]	; (ca18 <_fflush_r+0x50>)
    ca02:	429c      	cmp	r4, r3
    ca04:	bf08      	it	eq
    ca06:	68ec      	ldreq	r4, [r5, #12]
    ca08:	e7ec      	b.n	c9e4 <_fflush_r+0x1c>
    ca0a:	2000      	movs	r0, #0
    ca0c:	bd38      	pop	{r3, r4, r5, pc}
    ca0e:	bf00      	nop
    ca10:	0000e3a0 	.word	0x0000e3a0
    ca14:	0000e3c0 	.word	0x0000e3c0
    ca18:	0000e380 	.word	0x0000e380

0000ca1c <_cleanup_r>:
    ca1c:	4901      	ldr	r1, [pc, #4]	; (ca24 <_cleanup_r+0x8>)
    ca1e:	f000 b8a9 	b.w	cb74 <_fwalk_reent>
    ca22:	bf00      	nop
    ca24:	0000c9c9 	.word	0x0000c9c9

0000ca28 <std.isra.0>:
    ca28:	2300      	movs	r3, #0
    ca2a:	b510      	push	{r4, lr}
    ca2c:	4604      	mov	r4, r0
    ca2e:	6003      	str	r3, [r0, #0]
    ca30:	6043      	str	r3, [r0, #4]
    ca32:	6083      	str	r3, [r0, #8]
    ca34:	8181      	strh	r1, [r0, #12]
    ca36:	6643      	str	r3, [r0, #100]	; 0x64
    ca38:	81c2      	strh	r2, [r0, #14]
    ca3a:	6103      	str	r3, [r0, #16]
    ca3c:	6143      	str	r3, [r0, #20]
    ca3e:	6183      	str	r3, [r0, #24]
    ca40:	4619      	mov	r1, r3
    ca42:	2208      	movs	r2, #8
    ca44:	305c      	adds	r0, #92	; 0x5c
    ca46:	f7ff fc54 	bl	c2f2 <memset>
    ca4a:	4b05      	ldr	r3, [pc, #20]	; (ca60 <std.isra.0+0x38>)
    ca4c:	6263      	str	r3, [r4, #36]	; 0x24
    ca4e:	4b05      	ldr	r3, [pc, #20]	; (ca64 <std.isra.0+0x3c>)
    ca50:	62a3      	str	r3, [r4, #40]	; 0x28
    ca52:	4b05      	ldr	r3, [pc, #20]	; (ca68 <std.isra.0+0x40>)
    ca54:	62e3      	str	r3, [r4, #44]	; 0x2c
    ca56:	4b05      	ldr	r3, [pc, #20]	; (ca6c <std.isra.0+0x44>)
    ca58:	6224      	str	r4, [r4, #32]
    ca5a:	6323      	str	r3, [r4, #48]	; 0x30
    ca5c:	bd10      	pop	{r4, pc}
    ca5e:	bf00      	nop
    ca60:	0000d4c5 	.word	0x0000d4c5
    ca64:	0000d4e7 	.word	0x0000d4e7
    ca68:	0000d51f 	.word	0x0000d51f
    ca6c:	0000d543 	.word	0x0000d543

0000ca70 <__sfmoreglue>:
    ca70:	b570      	push	{r4, r5, r6, lr}
    ca72:	1e4a      	subs	r2, r1, #1
    ca74:	2568      	movs	r5, #104	; 0x68
    ca76:	4355      	muls	r5, r2
    ca78:	460e      	mov	r6, r1
    ca7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    ca7e:	f7ff fc8f 	bl	c3a0 <_malloc_r>
    ca82:	4604      	mov	r4, r0
    ca84:	b140      	cbz	r0, ca98 <__sfmoreglue+0x28>
    ca86:	2100      	movs	r1, #0
    ca88:	e880 0042 	stmia.w	r0, {r1, r6}
    ca8c:	300c      	adds	r0, #12
    ca8e:	60a0      	str	r0, [r4, #8]
    ca90:	f105 0268 	add.w	r2, r5, #104	; 0x68
    ca94:	f7ff fc2d 	bl	c2f2 <memset>
    ca98:	4620      	mov	r0, r4
    ca9a:	bd70      	pop	{r4, r5, r6, pc}

0000ca9c <__sinit>:
    ca9c:	6983      	ldr	r3, [r0, #24]
    ca9e:	b510      	push	{r4, lr}
    caa0:	4604      	mov	r4, r0
    caa2:	bb33      	cbnz	r3, caf2 <__sinit+0x56>
    caa4:	6483      	str	r3, [r0, #72]	; 0x48
    caa6:	64c3      	str	r3, [r0, #76]	; 0x4c
    caa8:	6503      	str	r3, [r0, #80]	; 0x50
    caaa:	4b12      	ldr	r3, [pc, #72]	; (caf4 <__sinit+0x58>)
    caac:	4a12      	ldr	r2, [pc, #72]	; (caf8 <__sinit+0x5c>)
    caae:	681b      	ldr	r3, [r3, #0]
    cab0:	6282      	str	r2, [r0, #40]	; 0x28
    cab2:	4298      	cmp	r0, r3
    cab4:	bf04      	itt	eq
    cab6:	2301      	moveq	r3, #1
    cab8:	6183      	streq	r3, [r0, #24]
    caba:	f000 f81f 	bl	cafc <__sfp>
    cabe:	6060      	str	r0, [r4, #4]
    cac0:	4620      	mov	r0, r4
    cac2:	f000 f81b 	bl	cafc <__sfp>
    cac6:	60a0      	str	r0, [r4, #8]
    cac8:	4620      	mov	r0, r4
    caca:	f000 f817 	bl	cafc <__sfp>
    cace:	2200      	movs	r2, #0
    cad0:	60e0      	str	r0, [r4, #12]
    cad2:	2104      	movs	r1, #4
    cad4:	6860      	ldr	r0, [r4, #4]
    cad6:	f7ff ffa7 	bl	ca28 <std.isra.0>
    cada:	2201      	movs	r2, #1
    cadc:	2109      	movs	r1, #9
    cade:	68a0      	ldr	r0, [r4, #8]
    cae0:	f7ff ffa2 	bl	ca28 <std.isra.0>
    cae4:	2202      	movs	r2, #2
    cae6:	2112      	movs	r1, #18
    cae8:	68e0      	ldr	r0, [r4, #12]
    caea:	f7ff ff9d 	bl	ca28 <std.isra.0>
    caee:	2301      	movs	r3, #1
    caf0:	61a3      	str	r3, [r4, #24]
    caf2:	bd10      	pop	{r4, pc}
    caf4:	0000e37c 	.word	0x0000e37c
    caf8:	0000ca1d 	.word	0x0000ca1d

0000cafc <__sfp>:
    cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cafe:	4b1c      	ldr	r3, [pc, #112]	; (cb70 <__sfp+0x74>)
    cb00:	681e      	ldr	r6, [r3, #0]
    cb02:	69b3      	ldr	r3, [r6, #24]
    cb04:	4607      	mov	r7, r0
    cb06:	b913      	cbnz	r3, cb0e <__sfp+0x12>
    cb08:	4630      	mov	r0, r6
    cb0a:	f7ff ffc7 	bl	ca9c <__sinit>
    cb0e:	3648      	adds	r6, #72	; 0x48
    cb10:	68b4      	ldr	r4, [r6, #8]
    cb12:	6873      	ldr	r3, [r6, #4]
    cb14:	3b01      	subs	r3, #1
    cb16:	d503      	bpl.n	cb20 <__sfp+0x24>
    cb18:	6833      	ldr	r3, [r6, #0]
    cb1a:	b133      	cbz	r3, cb2a <__sfp+0x2e>
    cb1c:	6836      	ldr	r6, [r6, #0]
    cb1e:	e7f7      	b.n	cb10 <__sfp+0x14>
    cb20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    cb24:	b16d      	cbz	r5, cb42 <__sfp+0x46>
    cb26:	3468      	adds	r4, #104	; 0x68
    cb28:	e7f4      	b.n	cb14 <__sfp+0x18>
    cb2a:	2104      	movs	r1, #4
    cb2c:	4638      	mov	r0, r7
    cb2e:	f7ff ff9f 	bl	ca70 <__sfmoreglue>
    cb32:	6030      	str	r0, [r6, #0]
    cb34:	2800      	cmp	r0, #0
    cb36:	d1f1      	bne.n	cb1c <__sfp+0x20>
    cb38:	230c      	movs	r3, #12
    cb3a:	603b      	str	r3, [r7, #0]
    cb3c:	4604      	mov	r4, r0
    cb3e:	4620      	mov	r0, r4
    cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb46:	81e3      	strh	r3, [r4, #14]
    cb48:	2301      	movs	r3, #1
    cb4a:	81a3      	strh	r3, [r4, #12]
    cb4c:	6665      	str	r5, [r4, #100]	; 0x64
    cb4e:	6025      	str	r5, [r4, #0]
    cb50:	60a5      	str	r5, [r4, #8]
    cb52:	6065      	str	r5, [r4, #4]
    cb54:	6125      	str	r5, [r4, #16]
    cb56:	6165      	str	r5, [r4, #20]
    cb58:	61a5      	str	r5, [r4, #24]
    cb5a:	2208      	movs	r2, #8
    cb5c:	4629      	mov	r1, r5
    cb5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cb62:	f7ff fbc6 	bl	c2f2 <memset>
    cb66:	6365      	str	r5, [r4, #52]	; 0x34
    cb68:	63a5      	str	r5, [r4, #56]	; 0x38
    cb6a:	64a5      	str	r5, [r4, #72]	; 0x48
    cb6c:	64e5      	str	r5, [r4, #76]	; 0x4c
    cb6e:	e7e6      	b.n	cb3e <__sfp+0x42>
    cb70:	0000e37c 	.word	0x0000e37c

0000cb74 <_fwalk_reent>:
    cb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb78:	4680      	mov	r8, r0
    cb7a:	4689      	mov	r9, r1
    cb7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    cb80:	2600      	movs	r6, #0
    cb82:	b914      	cbnz	r4, cb8a <_fwalk_reent+0x16>
    cb84:	4630      	mov	r0, r6
    cb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb8a:	68a5      	ldr	r5, [r4, #8]
    cb8c:	6867      	ldr	r7, [r4, #4]
    cb8e:	3f01      	subs	r7, #1
    cb90:	d501      	bpl.n	cb96 <_fwalk_reent+0x22>
    cb92:	6824      	ldr	r4, [r4, #0]
    cb94:	e7f5      	b.n	cb82 <_fwalk_reent+0xe>
    cb96:	89ab      	ldrh	r3, [r5, #12]
    cb98:	2b01      	cmp	r3, #1
    cb9a:	d907      	bls.n	cbac <_fwalk_reent+0x38>
    cb9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    cba0:	3301      	adds	r3, #1
    cba2:	d003      	beq.n	cbac <_fwalk_reent+0x38>
    cba4:	4629      	mov	r1, r5
    cba6:	4640      	mov	r0, r8
    cba8:	47c8      	blx	r9
    cbaa:	4306      	orrs	r6, r0
    cbac:	3568      	adds	r5, #104	; 0x68
    cbae:	e7ee      	b.n	cb8e <_fwalk_reent+0x1a>

0000cbb0 <__swhatbuf_r>:
    cbb0:	b570      	push	{r4, r5, r6, lr}
    cbb2:	460e      	mov	r6, r1
    cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cbb8:	2900      	cmp	r1, #0
    cbba:	b090      	sub	sp, #64	; 0x40
    cbbc:	4614      	mov	r4, r2
    cbbe:	461d      	mov	r5, r3
    cbc0:	da07      	bge.n	cbd2 <__swhatbuf_r+0x22>
    cbc2:	2300      	movs	r3, #0
    cbc4:	602b      	str	r3, [r5, #0]
    cbc6:	89b3      	ldrh	r3, [r6, #12]
    cbc8:	061a      	lsls	r2, r3, #24
    cbca:	d410      	bmi.n	cbee <__swhatbuf_r+0x3e>
    cbcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cbd0:	e00e      	b.n	cbf0 <__swhatbuf_r+0x40>
    cbd2:	aa01      	add	r2, sp, #4
    cbd4:	f000 fcdc 	bl	d590 <_fstat_r>
    cbd8:	2800      	cmp	r0, #0
    cbda:	dbf2      	blt.n	cbc2 <__swhatbuf_r+0x12>
    cbdc:	9a02      	ldr	r2, [sp, #8]
    cbde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    cbe2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    cbe6:	425a      	negs	r2, r3
    cbe8:	415a      	adcs	r2, r3
    cbea:	602a      	str	r2, [r5, #0]
    cbec:	e7ee      	b.n	cbcc <__swhatbuf_r+0x1c>
    cbee:	2340      	movs	r3, #64	; 0x40
    cbf0:	2000      	movs	r0, #0
    cbf2:	6023      	str	r3, [r4, #0]
    cbf4:	b010      	add	sp, #64	; 0x40
    cbf6:	bd70      	pop	{r4, r5, r6, pc}

0000cbf8 <__smakebuf_r>:
    cbf8:	898b      	ldrh	r3, [r1, #12]
    cbfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cbfc:	079d      	lsls	r5, r3, #30
    cbfe:	4606      	mov	r6, r0
    cc00:	460c      	mov	r4, r1
    cc02:	d507      	bpl.n	cc14 <__smakebuf_r+0x1c>
    cc04:	f104 0347 	add.w	r3, r4, #71	; 0x47
    cc08:	6023      	str	r3, [r4, #0]
    cc0a:	6123      	str	r3, [r4, #16]
    cc0c:	2301      	movs	r3, #1
    cc0e:	6163      	str	r3, [r4, #20]
    cc10:	b002      	add	sp, #8
    cc12:	bd70      	pop	{r4, r5, r6, pc}
    cc14:	ab01      	add	r3, sp, #4
    cc16:	466a      	mov	r2, sp
    cc18:	f7ff ffca 	bl	cbb0 <__swhatbuf_r>
    cc1c:	9900      	ldr	r1, [sp, #0]
    cc1e:	4605      	mov	r5, r0
    cc20:	4630      	mov	r0, r6
    cc22:	f7ff fbbd 	bl	c3a0 <_malloc_r>
    cc26:	b948      	cbnz	r0, cc3c <__smakebuf_r+0x44>
    cc28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cc2c:	059a      	lsls	r2, r3, #22
    cc2e:	d4ef      	bmi.n	cc10 <__smakebuf_r+0x18>
    cc30:	f023 0303 	bic.w	r3, r3, #3
    cc34:	f043 0302 	orr.w	r3, r3, #2
    cc38:	81a3      	strh	r3, [r4, #12]
    cc3a:	e7e3      	b.n	cc04 <__smakebuf_r+0xc>
    cc3c:	4b0d      	ldr	r3, [pc, #52]	; (cc74 <__smakebuf_r+0x7c>)
    cc3e:	62b3      	str	r3, [r6, #40]	; 0x28
    cc40:	89a3      	ldrh	r3, [r4, #12]
    cc42:	6020      	str	r0, [r4, #0]
    cc44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cc48:	81a3      	strh	r3, [r4, #12]
    cc4a:	9b00      	ldr	r3, [sp, #0]
    cc4c:	6163      	str	r3, [r4, #20]
    cc4e:	9b01      	ldr	r3, [sp, #4]
    cc50:	6120      	str	r0, [r4, #16]
    cc52:	b15b      	cbz	r3, cc6c <__smakebuf_r+0x74>
    cc54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cc58:	4630      	mov	r0, r6
    cc5a:	f000 fcab 	bl	d5b4 <_isatty_r>
    cc5e:	b128      	cbz	r0, cc6c <__smakebuf_r+0x74>
    cc60:	89a3      	ldrh	r3, [r4, #12]
    cc62:	f023 0303 	bic.w	r3, r3, #3
    cc66:	f043 0301 	orr.w	r3, r3, #1
    cc6a:	81a3      	strh	r3, [r4, #12]
    cc6c:	89a3      	ldrh	r3, [r4, #12]
    cc6e:	431d      	orrs	r5, r3
    cc70:	81a5      	strh	r5, [r4, #12]
    cc72:	e7cd      	b.n	cc10 <__smakebuf_r+0x18>
    cc74:	0000ca1d 	.word	0x0000ca1d

0000cc78 <__malloc_lock>:
    cc78:	4770      	bx	lr

0000cc7a <__malloc_unlock>:
    cc7a:	4770      	bx	lr

0000cc7c <__ssputs_r>:
    cc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc80:	688e      	ldr	r6, [r1, #8]
    cc82:	429e      	cmp	r6, r3
    cc84:	4682      	mov	sl, r0
    cc86:	460c      	mov	r4, r1
    cc88:	4691      	mov	r9, r2
    cc8a:	4698      	mov	r8, r3
    cc8c:	d835      	bhi.n	ccfa <__ssputs_r+0x7e>
    cc8e:	898a      	ldrh	r2, [r1, #12]
    cc90:	f412 6f90 	tst.w	r2, #1152	; 0x480
    cc94:	d031      	beq.n	ccfa <__ssputs_r+0x7e>
    cc96:	6825      	ldr	r5, [r4, #0]
    cc98:	6909      	ldr	r1, [r1, #16]
    cc9a:	1a6f      	subs	r7, r5, r1
    cc9c:	6965      	ldr	r5, [r4, #20]
    cc9e:	2302      	movs	r3, #2
    cca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    cca4:	fb95 f5f3 	sdiv	r5, r5, r3
    cca8:	f108 0301 	add.w	r3, r8, #1
    ccac:	443b      	add	r3, r7
    ccae:	429d      	cmp	r5, r3
    ccb0:	bf38      	it	cc
    ccb2:	461d      	movcc	r5, r3
    ccb4:	0553      	lsls	r3, r2, #21
    ccb6:	d531      	bpl.n	cd1c <__ssputs_r+0xa0>
    ccb8:	4629      	mov	r1, r5
    ccba:	f7ff fb71 	bl	c3a0 <_malloc_r>
    ccbe:	4606      	mov	r6, r0
    ccc0:	b950      	cbnz	r0, ccd8 <__ssputs_r+0x5c>
    ccc2:	230c      	movs	r3, #12
    ccc4:	f8ca 3000 	str.w	r3, [sl]
    ccc8:	89a3      	ldrh	r3, [r4, #12]
    ccca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ccce:	81a3      	strh	r3, [r4, #12]
    ccd0:	f04f 30ff 	mov.w	r0, #4294967295
    ccd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccd8:	463a      	mov	r2, r7
    ccda:	6921      	ldr	r1, [r4, #16]
    ccdc:	f7ff fafe 	bl	c2dc <memcpy>
    cce0:	89a3      	ldrh	r3, [r4, #12]
    cce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    cce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ccea:	81a3      	strh	r3, [r4, #12]
    ccec:	6126      	str	r6, [r4, #16]
    ccee:	6165      	str	r5, [r4, #20]
    ccf0:	443e      	add	r6, r7
    ccf2:	1bed      	subs	r5, r5, r7
    ccf4:	6026      	str	r6, [r4, #0]
    ccf6:	60a5      	str	r5, [r4, #8]
    ccf8:	4646      	mov	r6, r8
    ccfa:	4546      	cmp	r6, r8
    ccfc:	bf28      	it	cs
    ccfe:	4646      	movcs	r6, r8
    cd00:	4632      	mov	r2, r6
    cd02:	4649      	mov	r1, r9
    cd04:	6820      	ldr	r0, [r4, #0]
    cd06:	f000 fccb 	bl	d6a0 <memmove>
    cd0a:	68a3      	ldr	r3, [r4, #8]
    cd0c:	1b9b      	subs	r3, r3, r6
    cd0e:	60a3      	str	r3, [r4, #8]
    cd10:	6823      	ldr	r3, [r4, #0]
    cd12:	441e      	add	r6, r3
    cd14:	6026      	str	r6, [r4, #0]
    cd16:	2000      	movs	r0, #0
    cd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd1c:	462a      	mov	r2, r5
    cd1e:	f000 fcd9 	bl	d6d4 <_realloc_r>
    cd22:	4606      	mov	r6, r0
    cd24:	2800      	cmp	r0, #0
    cd26:	d1e1      	bne.n	ccec <__ssputs_r+0x70>
    cd28:	6921      	ldr	r1, [r4, #16]
    cd2a:	4650      	mov	r0, sl
    cd2c:	f7ff faea 	bl	c304 <_free_r>
    cd30:	e7c7      	b.n	ccc2 <__ssputs_r+0x46>
	...

0000cd34 <_svfiprintf_r>:
    cd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd38:	b09d      	sub	sp, #116	; 0x74
    cd3a:	4680      	mov	r8, r0
    cd3c:	9303      	str	r3, [sp, #12]
    cd3e:	898b      	ldrh	r3, [r1, #12]
    cd40:	061c      	lsls	r4, r3, #24
    cd42:	460d      	mov	r5, r1
    cd44:	4616      	mov	r6, r2
    cd46:	d50f      	bpl.n	cd68 <_svfiprintf_r+0x34>
    cd48:	690b      	ldr	r3, [r1, #16]
    cd4a:	b96b      	cbnz	r3, cd68 <_svfiprintf_r+0x34>
    cd4c:	2140      	movs	r1, #64	; 0x40
    cd4e:	f7ff fb27 	bl	c3a0 <_malloc_r>
    cd52:	6028      	str	r0, [r5, #0]
    cd54:	6128      	str	r0, [r5, #16]
    cd56:	b928      	cbnz	r0, cd64 <_svfiprintf_r+0x30>
    cd58:	230c      	movs	r3, #12
    cd5a:	f8c8 3000 	str.w	r3, [r8]
    cd5e:	f04f 30ff 	mov.w	r0, #4294967295
    cd62:	e0c5      	b.n	cef0 <_svfiprintf_r+0x1bc>
    cd64:	2340      	movs	r3, #64	; 0x40
    cd66:	616b      	str	r3, [r5, #20]
    cd68:	2300      	movs	r3, #0
    cd6a:	9309      	str	r3, [sp, #36]	; 0x24
    cd6c:	2320      	movs	r3, #32
    cd6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cd72:	2330      	movs	r3, #48	; 0x30
    cd74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cd78:	f04f 0b01 	mov.w	fp, #1
    cd7c:	4637      	mov	r7, r6
    cd7e:	463c      	mov	r4, r7
    cd80:	f814 3b01 	ldrb.w	r3, [r4], #1
    cd84:	2b00      	cmp	r3, #0
    cd86:	d13c      	bne.n	ce02 <_svfiprintf_r+0xce>
    cd88:	ebb7 0a06 	subs.w	sl, r7, r6
    cd8c:	d00b      	beq.n	cda6 <_svfiprintf_r+0x72>
    cd8e:	4653      	mov	r3, sl
    cd90:	4632      	mov	r2, r6
    cd92:	4629      	mov	r1, r5
    cd94:	4640      	mov	r0, r8
    cd96:	f7ff ff71 	bl	cc7c <__ssputs_r>
    cd9a:	3001      	adds	r0, #1
    cd9c:	f000 80a3 	beq.w	cee6 <_svfiprintf_r+0x1b2>
    cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cda2:	4453      	add	r3, sl
    cda4:	9309      	str	r3, [sp, #36]	; 0x24
    cda6:	783b      	ldrb	r3, [r7, #0]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	f000 809c 	beq.w	cee6 <_svfiprintf_r+0x1b2>
    cdae:	2300      	movs	r3, #0
    cdb0:	f04f 32ff 	mov.w	r2, #4294967295
    cdb4:	9304      	str	r3, [sp, #16]
    cdb6:	9307      	str	r3, [sp, #28]
    cdb8:	9205      	str	r2, [sp, #20]
    cdba:	9306      	str	r3, [sp, #24]
    cdbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cdc0:	931a      	str	r3, [sp, #104]	; 0x68
    cdc2:	2205      	movs	r2, #5
    cdc4:	7821      	ldrb	r1, [r4, #0]
    cdc6:	4850      	ldr	r0, [pc, #320]	; (cf08 <_svfiprintf_r+0x1d4>)
    cdc8:	f000 fc1a 	bl	d600 <memchr>
    cdcc:	1c67      	adds	r7, r4, #1
    cdce:	9b04      	ldr	r3, [sp, #16]
    cdd0:	b9d8      	cbnz	r0, ce0a <_svfiprintf_r+0xd6>
    cdd2:	06d9      	lsls	r1, r3, #27
    cdd4:	bf44      	itt	mi
    cdd6:	2220      	movmi	r2, #32
    cdd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cddc:	071a      	lsls	r2, r3, #28
    cdde:	bf44      	itt	mi
    cde0:	222b      	movmi	r2, #43	; 0x2b
    cde2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cde6:	7822      	ldrb	r2, [r4, #0]
    cde8:	2a2a      	cmp	r2, #42	; 0x2a
    cdea:	d016      	beq.n	ce1a <_svfiprintf_r+0xe6>
    cdec:	9a07      	ldr	r2, [sp, #28]
    cdee:	2100      	movs	r1, #0
    cdf0:	200a      	movs	r0, #10
    cdf2:	4627      	mov	r7, r4
    cdf4:	3401      	adds	r4, #1
    cdf6:	783b      	ldrb	r3, [r7, #0]
    cdf8:	3b30      	subs	r3, #48	; 0x30
    cdfa:	2b09      	cmp	r3, #9
    cdfc:	d951      	bls.n	cea2 <_svfiprintf_r+0x16e>
    cdfe:	b1c9      	cbz	r1, ce34 <_svfiprintf_r+0x100>
    ce00:	e011      	b.n	ce26 <_svfiprintf_r+0xf2>
    ce02:	2b25      	cmp	r3, #37	; 0x25
    ce04:	d0c0      	beq.n	cd88 <_svfiprintf_r+0x54>
    ce06:	4627      	mov	r7, r4
    ce08:	e7b9      	b.n	cd7e <_svfiprintf_r+0x4a>
    ce0a:	4a3f      	ldr	r2, [pc, #252]	; (cf08 <_svfiprintf_r+0x1d4>)
    ce0c:	1a80      	subs	r0, r0, r2
    ce0e:	fa0b f000 	lsl.w	r0, fp, r0
    ce12:	4318      	orrs	r0, r3
    ce14:	9004      	str	r0, [sp, #16]
    ce16:	463c      	mov	r4, r7
    ce18:	e7d3      	b.n	cdc2 <_svfiprintf_r+0x8e>
    ce1a:	9a03      	ldr	r2, [sp, #12]
    ce1c:	1d11      	adds	r1, r2, #4
    ce1e:	6812      	ldr	r2, [r2, #0]
    ce20:	9103      	str	r1, [sp, #12]
    ce22:	2a00      	cmp	r2, #0
    ce24:	db01      	blt.n	ce2a <_svfiprintf_r+0xf6>
    ce26:	9207      	str	r2, [sp, #28]
    ce28:	e004      	b.n	ce34 <_svfiprintf_r+0x100>
    ce2a:	4252      	negs	r2, r2
    ce2c:	f043 0302 	orr.w	r3, r3, #2
    ce30:	9207      	str	r2, [sp, #28]
    ce32:	9304      	str	r3, [sp, #16]
    ce34:	783b      	ldrb	r3, [r7, #0]
    ce36:	2b2e      	cmp	r3, #46	; 0x2e
    ce38:	d10e      	bne.n	ce58 <_svfiprintf_r+0x124>
    ce3a:	787b      	ldrb	r3, [r7, #1]
    ce3c:	2b2a      	cmp	r3, #42	; 0x2a
    ce3e:	f107 0101 	add.w	r1, r7, #1
    ce42:	d132      	bne.n	ceaa <_svfiprintf_r+0x176>
    ce44:	9b03      	ldr	r3, [sp, #12]
    ce46:	1d1a      	adds	r2, r3, #4
    ce48:	681b      	ldr	r3, [r3, #0]
    ce4a:	9203      	str	r2, [sp, #12]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	bfb8      	it	lt
    ce50:	f04f 33ff 	movlt.w	r3, #4294967295
    ce54:	3702      	adds	r7, #2
    ce56:	9305      	str	r3, [sp, #20]
    ce58:	4c2c      	ldr	r4, [pc, #176]	; (cf0c <_svfiprintf_r+0x1d8>)
    ce5a:	7839      	ldrb	r1, [r7, #0]
    ce5c:	2203      	movs	r2, #3
    ce5e:	4620      	mov	r0, r4
    ce60:	f000 fbce 	bl	d600 <memchr>
    ce64:	b138      	cbz	r0, ce76 <_svfiprintf_r+0x142>
    ce66:	2340      	movs	r3, #64	; 0x40
    ce68:	1b00      	subs	r0, r0, r4
    ce6a:	fa03 f000 	lsl.w	r0, r3, r0
    ce6e:	9b04      	ldr	r3, [sp, #16]
    ce70:	4303      	orrs	r3, r0
    ce72:	9304      	str	r3, [sp, #16]
    ce74:	3701      	adds	r7, #1
    ce76:	7839      	ldrb	r1, [r7, #0]
    ce78:	4825      	ldr	r0, [pc, #148]	; (cf10 <_svfiprintf_r+0x1dc>)
    ce7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    ce7e:	2206      	movs	r2, #6
    ce80:	1c7e      	adds	r6, r7, #1
    ce82:	f000 fbbd 	bl	d600 <memchr>
    ce86:	2800      	cmp	r0, #0
    ce88:	d035      	beq.n	cef6 <_svfiprintf_r+0x1c2>
    ce8a:	4b22      	ldr	r3, [pc, #136]	; (cf14 <_svfiprintf_r+0x1e0>)
    ce8c:	b9fb      	cbnz	r3, cece <_svfiprintf_r+0x19a>
    ce8e:	9b03      	ldr	r3, [sp, #12]
    ce90:	3307      	adds	r3, #7
    ce92:	f023 0307 	bic.w	r3, r3, #7
    ce96:	3308      	adds	r3, #8
    ce98:	9303      	str	r3, [sp, #12]
    ce9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce9c:	444b      	add	r3, r9
    ce9e:	9309      	str	r3, [sp, #36]	; 0x24
    cea0:	e76c      	b.n	cd7c <_svfiprintf_r+0x48>
    cea2:	fb00 3202 	mla	r2, r0, r2, r3
    cea6:	2101      	movs	r1, #1
    cea8:	e7a3      	b.n	cdf2 <_svfiprintf_r+0xbe>
    ceaa:	2300      	movs	r3, #0
    ceac:	9305      	str	r3, [sp, #20]
    ceae:	4618      	mov	r0, r3
    ceb0:	240a      	movs	r4, #10
    ceb2:	460f      	mov	r7, r1
    ceb4:	3101      	adds	r1, #1
    ceb6:	783a      	ldrb	r2, [r7, #0]
    ceb8:	3a30      	subs	r2, #48	; 0x30
    ceba:	2a09      	cmp	r2, #9
    cebc:	d903      	bls.n	cec6 <_svfiprintf_r+0x192>
    cebe:	2b00      	cmp	r3, #0
    cec0:	d0ca      	beq.n	ce58 <_svfiprintf_r+0x124>
    cec2:	9005      	str	r0, [sp, #20]
    cec4:	e7c8      	b.n	ce58 <_svfiprintf_r+0x124>
    cec6:	fb04 2000 	mla	r0, r4, r0, r2
    ceca:	2301      	movs	r3, #1
    cecc:	e7f1      	b.n	ceb2 <_svfiprintf_r+0x17e>
    cece:	ab03      	add	r3, sp, #12
    ced0:	9300      	str	r3, [sp, #0]
    ced2:	462a      	mov	r2, r5
    ced4:	4b10      	ldr	r3, [pc, #64]	; (cf18 <_svfiprintf_r+0x1e4>)
    ced6:	a904      	add	r1, sp, #16
    ced8:	4640      	mov	r0, r8
    ceda:	f3af 8000 	nop.w
    cede:	f1b0 3fff 	cmp.w	r0, #4294967295
    cee2:	4681      	mov	r9, r0
    cee4:	d1d9      	bne.n	ce9a <_svfiprintf_r+0x166>
    cee6:	89ab      	ldrh	r3, [r5, #12]
    cee8:	065b      	lsls	r3, r3, #25
    ceea:	f53f af38 	bmi.w	cd5e <_svfiprintf_r+0x2a>
    ceee:	9809      	ldr	r0, [sp, #36]	; 0x24
    cef0:	b01d      	add	sp, #116	; 0x74
    cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cef6:	ab03      	add	r3, sp, #12
    cef8:	9300      	str	r3, [sp, #0]
    cefa:	462a      	mov	r2, r5
    cefc:	4b06      	ldr	r3, [pc, #24]	; (cf18 <_svfiprintf_r+0x1e4>)
    cefe:	a904      	add	r1, sp, #16
    cf00:	4640      	mov	r0, r8
    cf02:	f000 f9bf 	bl	d284 <_printf_i>
    cf06:	e7ea      	b.n	cede <_svfiprintf_r+0x1aa>
    cf08:	0000e3e0 	.word	0x0000e3e0
    cf0c:	0000e3e6 	.word	0x0000e3e6
    cf10:	0000e3ea 	.word	0x0000e3ea
    cf14:	00000000 	.word	0x00000000
    cf18:	0000cc7d 	.word	0x0000cc7d

0000cf1c <__sfputc_r>:
    cf1c:	6893      	ldr	r3, [r2, #8]
    cf1e:	3b01      	subs	r3, #1
    cf20:	2b00      	cmp	r3, #0
    cf22:	b410      	push	{r4}
    cf24:	6093      	str	r3, [r2, #8]
    cf26:	da08      	bge.n	cf3a <__sfputc_r+0x1e>
    cf28:	6994      	ldr	r4, [r2, #24]
    cf2a:	42a3      	cmp	r3, r4
    cf2c:	db02      	blt.n	cf34 <__sfputc_r+0x18>
    cf2e:	b2cb      	uxtb	r3, r1
    cf30:	2b0a      	cmp	r3, #10
    cf32:	d102      	bne.n	cf3a <__sfputc_r+0x1e>
    cf34:	bc10      	pop	{r4}
    cf36:	f7ff bbff 	b.w	c738 <__swbuf_r>
    cf3a:	6813      	ldr	r3, [r2, #0]
    cf3c:	1c58      	adds	r0, r3, #1
    cf3e:	6010      	str	r0, [r2, #0]
    cf40:	7019      	strb	r1, [r3, #0]
    cf42:	b2c8      	uxtb	r0, r1
    cf44:	bc10      	pop	{r4}
    cf46:	4770      	bx	lr

0000cf48 <__sfputs_r>:
    cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf4a:	4606      	mov	r6, r0
    cf4c:	460f      	mov	r7, r1
    cf4e:	4614      	mov	r4, r2
    cf50:	18d5      	adds	r5, r2, r3
    cf52:	42ac      	cmp	r4, r5
    cf54:	d101      	bne.n	cf5a <__sfputs_r+0x12>
    cf56:	2000      	movs	r0, #0
    cf58:	e007      	b.n	cf6a <__sfputs_r+0x22>
    cf5a:	463a      	mov	r2, r7
    cf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
    cf60:	4630      	mov	r0, r6
    cf62:	f7ff ffdb 	bl	cf1c <__sfputc_r>
    cf66:	1c43      	adds	r3, r0, #1
    cf68:	d1f3      	bne.n	cf52 <__sfputs_r+0xa>
    cf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cf6c <_vfiprintf_r>:
    cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf70:	b09d      	sub	sp, #116	; 0x74
    cf72:	460c      	mov	r4, r1
    cf74:	4617      	mov	r7, r2
    cf76:	9303      	str	r3, [sp, #12]
    cf78:	4606      	mov	r6, r0
    cf7a:	b118      	cbz	r0, cf84 <_vfiprintf_r+0x18>
    cf7c:	6983      	ldr	r3, [r0, #24]
    cf7e:	b90b      	cbnz	r3, cf84 <_vfiprintf_r+0x18>
    cf80:	f7ff fd8c 	bl	ca9c <__sinit>
    cf84:	4b7c      	ldr	r3, [pc, #496]	; (d178 <_vfiprintf_r+0x20c>)
    cf86:	429c      	cmp	r4, r3
    cf88:	d157      	bne.n	d03a <_vfiprintf_r+0xce>
    cf8a:	6874      	ldr	r4, [r6, #4]
    cf8c:	89a3      	ldrh	r3, [r4, #12]
    cf8e:	0718      	lsls	r0, r3, #28
    cf90:	d55d      	bpl.n	d04e <_vfiprintf_r+0xe2>
    cf92:	6923      	ldr	r3, [r4, #16]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d05a      	beq.n	d04e <_vfiprintf_r+0xe2>
    cf98:	2300      	movs	r3, #0
    cf9a:	9309      	str	r3, [sp, #36]	; 0x24
    cf9c:	2320      	movs	r3, #32
    cf9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cfa2:	2330      	movs	r3, #48	; 0x30
    cfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cfa8:	f04f 0b01 	mov.w	fp, #1
    cfac:	46b8      	mov	r8, r7
    cfae:	4645      	mov	r5, r8
    cfb0:	f815 3b01 	ldrb.w	r3, [r5], #1
    cfb4:	2b00      	cmp	r3, #0
    cfb6:	d155      	bne.n	d064 <_vfiprintf_r+0xf8>
    cfb8:	ebb8 0a07 	subs.w	sl, r8, r7
    cfbc:	d00b      	beq.n	cfd6 <_vfiprintf_r+0x6a>
    cfbe:	4653      	mov	r3, sl
    cfc0:	463a      	mov	r2, r7
    cfc2:	4621      	mov	r1, r4
    cfc4:	4630      	mov	r0, r6
    cfc6:	f7ff ffbf 	bl	cf48 <__sfputs_r>
    cfca:	3001      	adds	r0, #1
    cfcc:	f000 80c4 	beq.w	d158 <_vfiprintf_r+0x1ec>
    cfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfd2:	4453      	add	r3, sl
    cfd4:	9309      	str	r3, [sp, #36]	; 0x24
    cfd6:	f898 3000 	ldrb.w	r3, [r8]
    cfda:	2b00      	cmp	r3, #0
    cfdc:	f000 80bc 	beq.w	d158 <_vfiprintf_r+0x1ec>
    cfe0:	2300      	movs	r3, #0
    cfe2:	f04f 32ff 	mov.w	r2, #4294967295
    cfe6:	9304      	str	r3, [sp, #16]
    cfe8:	9307      	str	r3, [sp, #28]
    cfea:	9205      	str	r2, [sp, #20]
    cfec:	9306      	str	r3, [sp, #24]
    cfee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cff2:	931a      	str	r3, [sp, #104]	; 0x68
    cff4:	2205      	movs	r2, #5
    cff6:	7829      	ldrb	r1, [r5, #0]
    cff8:	4860      	ldr	r0, [pc, #384]	; (d17c <_vfiprintf_r+0x210>)
    cffa:	f000 fb01 	bl	d600 <memchr>
    cffe:	f105 0801 	add.w	r8, r5, #1
    d002:	9b04      	ldr	r3, [sp, #16]
    d004:	2800      	cmp	r0, #0
    d006:	d131      	bne.n	d06c <_vfiprintf_r+0x100>
    d008:	06d9      	lsls	r1, r3, #27
    d00a:	bf44      	itt	mi
    d00c:	2220      	movmi	r2, #32
    d00e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d012:	071a      	lsls	r2, r3, #28
    d014:	bf44      	itt	mi
    d016:	222b      	movmi	r2, #43	; 0x2b
    d018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d01c:	782a      	ldrb	r2, [r5, #0]
    d01e:	2a2a      	cmp	r2, #42	; 0x2a
    d020:	d02c      	beq.n	d07c <_vfiprintf_r+0x110>
    d022:	9a07      	ldr	r2, [sp, #28]
    d024:	2100      	movs	r1, #0
    d026:	200a      	movs	r0, #10
    d028:	46a8      	mov	r8, r5
    d02a:	3501      	adds	r5, #1
    d02c:	f898 3000 	ldrb.w	r3, [r8]
    d030:	3b30      	subs	r3, #48	; 0x30
    d032:	2b09      	cmp	r3, #9
    d034:	d96d      	bls.n	d112 <_vfiprintf_r+0x1a6>
    d036:	b371      	cbz	r1, d096 <_vfiprintf_r+0x12a>
    d038:	e026      	b.n	d088 <_vfiprintf_r+0x11c>
    d03a:	4b51      	ldr	r3, [pc, #324]	; (d180 <_vfiprintf_r+0x214>)
    d03c:	429c      	cmp	r4, r3
    d03e:	d101      	bne.n	d044 <_vfiprintf_r+0xd8>
    d040:	68b4      	ldr	r4, [r6, #8]
    d042:	e7a3      	b.n	cf8c <_vfiprintf_r+0x20>
    d044:	4b4f      	ldr	r3, [pc, #316]	; (d184 <_vfiprintf_r+0x218>)
    d046:	429c      	cmp	r4, r3
    d048:	bf08      	it	eq
    d04a:	68f4      	ldreq	r4, [r6, #12]
    d04c:	e79e      	b.n	cf8c <_vfiprintf_r+0x20>
    d04e:	4621      	mov	r1, r4
    d050:	4630      	mov	r0, r6
    d052:	f7ff fbc3 	bl	c7dc <__swsetup_r>
    d056:	2800      	cmp	r0, #0
    d058:	d09e      	beq.n	cf98 <_vfiprintf_r+0x2c>
    d05a:	f04f 30ff 	mov.w	r0, #4294967295
    d05e:	b01d      	add	sp, #116	; 0x74
    d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d064:	2b25      	cmp	r3, #37	; 0x25
    d066:	d0a7      	beq.n	cfb8 <_vfiprintf_r+0x4c>
    d068:	46a8      	mov	r8, r5
    d06a:	e7a0      	b.n	cfae <_vfiprintf_r+0x42>
    d06c:	4a43      	ldr	r2, [pc, #268]	; (d17c <_vfiprintf_r+0x210>)
    d06e:	1a80      	subs	r0, r0, r2
    d070:	fa0b f000 	lsl.w	r0, fp, r0
    d074:	4318      	orrs	r0, r3
    d076:	9004      	str	r0, [sp, #16]
    d078:	4645      	mov	r5, r8
    d07a:	e7bb      	b.n	cff4 <_vfiprintf_r+0x88>
    d07c:	9a03      	ldr	r2, [sp, #12]
    d07e:	1d11      	adds	r1, r2, #4
    d080:	6812      	ldr	r2, [r2, #0]
    d082:	9103      	str	r1, [sp, #12]
    d084:	2a00      	cmp	r2, #0
    d086:	db01      	blt.n	d08c <_vfiprintf_r+0x120>
    d088:	9207      	str	r2, [sp, #28]
    d08a:	e004      	b.n	d096 <_vfiprintf_r+0x12a>
    d08c:	4252      	negs	r2, r2
    d08e:	f043 0302 	orr.w	r3, r3, #2
    d092:	9207      	str	r2, [sp, #28]
    d094:	9304      	str	r3, [sp, #16]
    d096:	f898 3000 	ldrb.w	r3, [r8]
    d09a:	2b2e      	cmp	r3, #46	; 0x2e
    d09c:	d110      	bne.n	d0c0 <_vfiprintf_r+0x154>
    d09e:	f898 3001 	ldrb.w	r3, [r8, #1]
    d0a2:	2b2a      	cmp	r3, #42	; 0x2a
    d0a4:	f108 0101 	add.w	r1, r8, #1
    d0a8:	d137      	bne.n	d11a <_vfiprintf_r+0x1ae>
    d0aa:	9b03      	ldr	r3, [sp, #12]
    d0ac:	1d1a      	adds	r2, r3, #4
    d0ae:	681b      	ldr	r3, [r3, #0]
    d0b0:	9203      	str	r2, [sp, #12]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	bfb8      	it	lt
    d0b6:	f04f 33ff 	movlt.w	r3, #4294967295
    d0ba:	f108 0802 	add.w	r8, r8, #2
    d0be:	9305      	str	r3, [sp, #20]
    d0c0:	4d31      	ldr	r5, [pc, #196]	; (d188 <_vfiprintf_r+0x21c>)
    d0c2:	f898 1000 	ldrb.w	r1, [r8]
    d0c6:	2203      	movs	r2, #3
    d0c8:	4628      	mov	r0, r5
    d0ca:	f000 fa99 	bl	d600 <memchr>
    d0ce:	b140      	cbz	r0, d0e2 <_vfiprintf_r+0x176>
    d0d0:	2340      	movs	r3, #64	; 0x40
    d0d2:	1b40      	subs	r0, r0, r5
    d0d4:	fa03 f000 	lsl.w	r0, r3, r0
    d0d8:	9b04      	ldr	r3, [sp, #16]
    d0da:	4303      	orrs	r3, r0
    d0dc:	9304      	str	r3, [sp, #16]
    d0de:	f108 0801 	add.w	r8, r8, #1
    d0e2:	f898 1000 	ldrb.w	r1, [r8]
    d0e6:	4829      	ldr	r0, [pc, #164]	; (d18c <_vfiprintf_r+0x220>)
    d0e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d0ec:	2206      	movs	r2, #6
    d0ee:	f108 0701 	add.w	r7, r8, #1
    d0f2:	f000 fa85 	bl	d600 <memchr>
    d0f6:	2800      	cmp	r0, #0
    d0f8:	d034      	beq.n	d164 <_vfiprintf_r+0x1f8>
    d0fa:	4b25      	ldr	r3, [pc, #148]	; (d190 <_vfiprintf_r+0x224>)
    d0fc:	bb03      	cbnz	r3, d140 <_vfiprintf_r+0x1d4>
    d0fe:	9b03      	ldr	r3, [sp, #12]
    d100:	3307      	adds	r3, #7
    d102:	f023 0307 	bic.w	r3, r3, #7
    d106:	3308      	adds	r3, #8
    d108:	9303      	str	r3, [sp, #12]
    d10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d10c:	444b      	add	r3, r9
    d10e:	9309      	str	r3, [sp, #36]	; 0x24
    d110:	e74c      	b.n	cfac <_vfiprintf_r+0x40>
    d112:	fb00 3202 	mla	r2, r0, r2, r3
    d116:	2101      	movs	r1, #1
    d118:	e786      	b.n	d028 <_vfiprintf_r+0xbc>
    d11a:	2300      	movs	r3, #0
    d11c:	9305      	str	r3, [sp, #20]
    d11e:	4618      	mov	r0, r3
    d120:	250a      	movs	r5, #10
    d122:	4688      	mov	r8, r1
    d124:	3101      	adds	r1, #1
    d126:	f898 2000 	ldrb.w	r2, [r8]
    d12a:	3a30      	subs	r2, #48	; 0x30
    d12c:	2a09      	cmp	r2, #9
    d12e:	d903      	bls.n	d138 <_vfiprintf_r+0x1cc>
    d130:	2b00      	cmp	r3, #0
    d132:	d0c5      	beq.n	d0c0 <_vfiprintf_r+0x154>
    d134:	9005      	str	r0, [sp, #20]
    d136:	e7c3      	b.n	d0c0 <_vfiprintf_r+0x154>
    d138:	fb05 2000 	mla	r0, r5, r0, r2
    d13c:	2301      	movs	r3, #1
    d13e:	e7f0      	b.n	d122 <_vfiprintf_r+0x1b6>
    d140:	ab03      	add	r3, sp, #12
    d142:	9300      	str	r3, [sp, #0]
    d144:	4622      	mov	r2, r4
    d146:	4b13      	ldr	r3, [pc, #76]	; (d194 <_vfiprintf_r+0x228>)
    d148:	a904      	add	r1, sp, #16
    d14a:	4630      	mov	r0, r6
    d14c:	f3af 8000 	nop.w
    d150:	f1b0 3fff 	cmp.w	r0, #4294967295
    d154:	4681      	mov	r9, r0
    d156:	d1d8      	bne.n	d10a <_vfiprintf_r+0x19e>
    d158:	89a3      	ldrh	r3, [r4, #12]
    d15a:	065b      	lsls	r3, r3, #25
    d15c:	f53f af7d 	bmi.w	d05a <_vfiprintf_r+0xee>
    d160:	9809      	ldr	r0, [sp, #36]	; 0x24
    d162:	e77c      	b.n	d05e <_vfiprintf_r+0xf2>
    d164:	ab03      	add	r3, sp, #12
    d166:	9300      	str	r3, [sp, #0]
    d168:	4622      	mov	r2, r4
    d16a:	4b0a      	ldr	r3, [pc, #40]	; (d194 <_vfiprintf_r+0x228>)
    d16c:	a904      	add	r1, sp, #16
    d16e:	4630      	mov	r0, r6
    d170:	f000 f888 	bl	d284 <_printf_i>
    d174:	e7ec      	b.n	d150 <_vfiprintf_r+0x1e4>
    d176:	bf00      	nop
    d178:	0000e3a0 	.word	0x0000e3a0
    d17c:	0000e3e0 	.word	0x0000e3e0
    d180:	0000e3c0 	.word	0x0000e3c0
    d184:	0000e380 	.word	0x0000e380
    d188:	0000e3e6 	.word	0x0000e3e6
    d18c:	0000e3ea 	.word	0x0000e3ea
    d190:	00000000 	.word	0x00000000
    d194:	0000cf49 	.word	0x0000cf49

0000d198 <_printf_common>:
    d198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d19c:	4691      	mov	r9, r2
    d19e:	461f      	mov	r7, r3
    d1a0:	688a      	ldr	r2, [r1, #8]
    d1a2:	690b      	ldr	r3, [r1, #16]
    d1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d1a8:	4293      	cmp	r3, r2
    d1aa:	bfb8      	it	lt
    d1ac:	4613      	movlt	r3, r2
    d1ae:	f8c9 3000 	str.w	r3, [r9]
    d1b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d1b6:	4606      	mov	r6, r0
    d1b8:	460c      	mov	r4, r1
    d1ba:	b112      	cbz	r2, d1c2 <_printf_common+0x2a>
    d1bc:	3301      	adds	r3, #1
    d1be:	f8c9 3000 	str.w	r3, [r9]
    d1c2:	6823      	ldr	r3, [r4, #0]
    d1c4:	0699      	lsls	r1, r3, #26
    d1c6:	bf42      	ittt	mi
    d1c8:	f8d9 3000 	ldrmi.w	r3, [r9]
    d1cc:	3302      	addmi	r3, #2
    d1ce:	f8c9 3000 	strmi.w	r3, [r9]
    d1d2:	6825      	ldr	r5, [r4, #0]
    d1d4:	f015 0506 	ands.w	r5, r5, #6
    d1d8:	d107      	bne.n	d1ea <_printf_common+0x52>
    d1da:	f104 0a19 	add.w	sl, r4, #25
    d1de:	68e3      	ldr	r3, [r4, #12]
    d1e0:	f8d9 2000 	ldr.w	r2, [r9]
    d1e4:	1a9b      	subs	r3, r3, r2
    d1e6:	429d      	cmp	r5, r3
    d1e8:	db29      	blt.n	d23e <_printf_common+0xa6>
    d1ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d1ee:	6822      	ldr	r2, [r4, #0]
    d1f0:	3300      	adds	r3, #0
    d1f2:	bf18      	it	ne
    d1f4:	2301      	movne	r3, #1
    d1f6:	0692      	lsls	r2, r2, #26
    d1f8:	d42e      	bmi.n	d258 <_printf_common+0xc0>
    d1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d1fe:	4639      	mov	r1, r7
    d200:	4630      	mov	r0, r6
    d202:	47c0      	blx	r8
    d204:	3001      	adds	r0, #1
    d206:	d021      	beq.n	d24c <_printf_common+0xb4>
    d208:	6823      	ldr	r3, [r4, #0]
    d20a:	68e5      	ldr	r5, [r4, #12]
    d20c:	f8d9 2000 	ldr.w	r2, [r9]
    d210:	f003 0306 	and.w	r3, r3, #6
    d214:	2b04      	cmp	r3, #4
    d216:	bf08      	it	eq
    d218:	1aad      	subeq	r5, r5, r2
    d21a:	68a3      	ldr	r3, [r4, #8]
    d21c:	6922      	ldr	r2, [r4, #16]
    d21e:	bf0c      	ite	eq
    d220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    d224:	2500      	movne	r5, #0
    d226:	4293      	cmp	r3, r2
    d228:	bfc4      	itt	gt
    d22a:	1a9b      	subgt	r3, r3, r2
    d22c:	18ed      	addgt	r5, r5, r3
    d22e:	f04f 0900 	mov.w	r9, #0
    d232:	341a      	adds	r4, #26
    d234:	454d      	cmp	r5, r9
    d236:	d11b      	bne.n	d270 <_printf_common+0xd8>
    d238:	2000      	movs	r0, #0
    d23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d23e:	2301      	movs	r3, #1
    d240:	4652      	mov	r2, sl
    d242:	4639      	mov	r1, r7
    d244:	4630      	mov	r0, r6
    d246:	47c0      	blx	r8
    d248:	3001      	adds	r0, #1
    d24a:	d103      	bne.n	d254 <_printf_common+0xbc>
    d24c:	f04f 30ff 	mov.w	r0, #4294967295
    d250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d254:	3501      	adds	r5, #1
    d256:	e7c2      	b.n	d1de <_printf_common+0x46>
    d258:	18e1      	adds	r1, r4, r3
    d25a:	1c5a      	adds	r2, r3, #1
    d25c:	2030      	movs	r0, #48	; 0x30
    d25e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d262:	4422      	add	r2, r4
    d264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    d268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    d26c:	3302      	adds	r3, #2
    d26e:	e7c4      	b.n	d1fa <_printf_common+0x62>
    d270:	2301      	movs	r3, #1
    d272:	4622      	mov	r2, r4
    d274:	4639      	mov	r1, r7
    d276:	4630      	mov	r0, r6
    d278:	47c0      	blx	r8
    d27a:	3001      	adds	r0, #1
    d27c:	d0e6      	beq.n	d24c <_printf_common+0xb4>
    d27e:	f109 0901 	add.w	r9, r9, #1
    d282:	e7d7      	b.n	d234 <_printf_common+0x9c>

0000d284 <_printf_i>:
    d284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d288:	4617      	mov	r7, r2
    d28a:	7e0a      	ldrb	r2, [r1, #24]
    d28c:	b085      	sub	sp, #20
    d28e:	2a6e      	cmp	r2, #110	; 0x6e
    d290:	4698      	mov	r8, r3
    d292:	4606      	mov	r6, r0
    d294:	460c      	mov	r4, r1
    d296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d298:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    d29c:	f000 80bc 	beq.w	d418 <_printf_i+0x194>
    d2a0:	d81a      	bhi.n	d2d8 <_printf_i+0x54>
    d2a2:	2a63      	cmp	r2, #99	; 0x63
    d2a4:	d02e      	beq.n	d304 <_printf_i+0x80>
    d2a6:	d80a      	bhi.n	d2be <_printf_i+0x3a>
    d2a8:	2a00      	cmp	r2, #0
    d2aa:	f000 80c8 	beq.w	d43e <_printf_i+0x1ba>
    d2ae:	2a58      	cmp	r2, #88	; 0x58
    d2b0:	f000 808a 	beq.w	d3c8 <_printf_i+0x144>
    d2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d2b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    d2bc:	e02a      	b.n	d314 <_printf_i+0x90>
    d2be:	2a64      	cmp	r2, #100	; 0x64
    d2c0:	d001      	beq.n	d2c6 <_printf_i+0x42>
    d2c2:	2a69      	cmp	r2, #105	; 0x69
    d2c4:	d1f6      	bne.n	d2b4 <_printf_i+0x30>
    d2c6:	6821      	ldr	r1, [r4, #0]
    d2c8:	681a      	ldr	r2, [r3, #0]
    d2ca:	f011 0f80 	tst.w	r1, #128	; 0x80
    d2ce:	d023      	beq.n	d318 <_printf_i+0x94>
    d2d0:	1d11      	adds	r1, r2, #4
    d2d2:	6019      	str	r1, [r3, #0]
    d2d4:	6813      	ldr	r3, [r2, #0]
    d2d6:	e027      	b.n	d328 <_printf_i+0xa4>
    d2d8:	2a73      	cmp	r2, #115	; 0x73
    d2da:	f000 80b4 	beq.w	d446 <_printf_i+0x1c2>
    d2de:	d808      	bhi.n	d2f2 <_printf_i+0x6e>
    d2e0:	2a6f      	cmp	r2, #111	; 0x6f
    d2e2:	d02a      	beq.n	d33a <_printf_i+0xb6>
    d2e4:	2a70      	cmp	r2, #112	; 0x70
    d2e6:	d1e5      	bne.n	d2b4 <_printf_i+0x30>
    d2e8:	680a      	ldr	r2, [r1, #0]
    d2ea:	f042 0220 	orr.w	r2, r2, #32
    d2ee:	600a      	str	r2, [r1, #0]
    d2f0:	e003      	b.n	d2fa <_printf_i+0x76>
    d2f2:	2a75      	cmp	r2, #117	; 0x75
    d2f4:	d021      	beq.n	d33a <_printf_i+0xb6>
    d2f6:	2a78      	cmp	r2, #120	; 0x78
    d2f8:	d1dc      	bne.n	d2b4 <_printf_i+0x30>
    d2fa:	2278      	movs	r2, #120	; 0x78
    d2fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d300:	496e      	ldr	r1, [pc, #440]	; (d4bc <_printf_i+0x238>)
    d302:	e064      	b.n	d3ce <_printf_i+0x14a>
    d304:	681a      	ldr	r2, [r3, #0]
    d306:	f101 0542 	add.w	r5, r1, #66	; 0x42
    d30a:	1d11      	adds	r1, r2, #4
    d30c:	6019      	str	r1, [r3, #0]
    d30e:	6813      	ldr	r3, [r2, #0]
    d310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d314:	2301      	movs	r3, #1
    d316:	e0a3      	b.n	d460 <_printf_i+0x1dc>
    d318:	f011 0f40 	tst.w	r1, #64	; 0x40
    d31c:	f102 0104 	add.w	r1, r2, #4
    d320:	6019      	str	r1, [r3, #0]
    d322:	d0d7      	beq.n	d2d4 <_printf_i+0x50>
    d324:	f9b2 3000 	ldrsh.w	r3, [r2]
    d328:	2b00      	cmp	r3, #0
    d32a:	da03      	bge.n	d334 <_printf_i+0xb0>
    d32c:	222d      	movs	r2, #45	; 0x2d
    d32e:	425b      	negs	r3, r3
    d330:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    d334:	4962      	ldr	r1, [pc, #392]	; (d4c0 <_printf_i+0x23c>)
    d336:	220a      	movs	r2, #10
    d338:	e017      	b.n	d36a <_printf_i+0xe6>
    d33a:	6820      	ldr	r0, [r4, #0]
    d33c:	6819      	ldr	r1, [r3, #0]
    d33e:	f010 0f80 	tst.w	r0, #128	; 0x80
    d342:	d003      	beq.n	d34c <_printf_i+0xc8>
    d344:	1d08      	adds	r0, r1, #4
    d346:	6018      	str	r0, [r3, #0]
    d348:	680b      	ldr	r3, [r1, #0]
    d34a:	e006      	b.n	d35a <_printf_i+0xd6>
    d34c:	f010 0f40 	tst.w	r0, #64	; 0x40
    d350:	f101 0004 	add.w	r0, r1, #4
    d354:	6018      	str	r0, [r3, #0]
    d356:	d0f7      	beq.n	d348 <_printf_i+0xc4>
    d358:	880b      	ldrh	r3, [r1, #0]
    d35a:	4959      	ldr	r1, [pc, #356]	; (d4c0 <_printf_i+0x23c>)
    d35c:	2a6f      	cmp	r2, #111	; 0x6f
    d35e:	bf14      	ite	ne
    d360:	220a      	movne	r2, #10
    d362:	2208      	moveq	r2, #8
    d364:	2000      	movs	r0, #0
    d366:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d36a:	6865      	ldr	r5, [r4, #4]
    d36c:	60a5      	str	r5, [r4, #8]
    d36e:	2d00      	cmp	r5, #0
    d370:	f2c0 809c 	blt.w	d4ac <_printf_i+0x228>
    d374:	6820      	ldr	r0, [r4, #0]
    d376:	f020 0004 	bic.w	r0, r0, #4
    d37a:	6020      	str	r0, [r4, #0]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d13f      	bne.n	d400 <_printf_i+0x17c>
    d380:	2d00      	cmp	r5, #0
    d382:	f040 8095 	bne.w	d4b0 <_printf_i+0x22c>
    d386:	4675      	mov	r5, lr
    d388:	2a08      	cmp	r2, #8
    d38a:	d10b      	bne.n	d3a4 <_printf_i+0x120>
    d38c:	6823      	ldr	r3, [r4, #0]
    d38e:	07da      	lsls	r2, r3, #31
    d390:	d508      	bpl.n	d3a4 <_printf_i+0x120>
    d392:	6923      	ldr	r3, [r4, #16]
    d394:	6862      	ldr	r2, [r4, #4]
    d396:	429a      	cmp	r2, r3
    d398:	bfde      	ittt	le
    d39a:	2330      	movle	r3, #48	; 0x30
    d39c:	f805 3c01 	strble.w	r3, [r5, #-1]
    d3a0:	f105 35ff 	addle.w	r5, r5, #4294967295
    d3a4:	ebae 0305 	sub.w	r3, lr, r5
    d3a8:	6123      	str	r3, [r4, #16]
    d3aa:	f8cd 8000 	str.w	r8, [sp]
    d3ae:	463b      	mov	r3, r7
    d3b0:	aa03      	add	r2, sp, #12
    d3b2:	4621      	mov	r1, r4
    d3b4:	4630      	mov	r0, r6
    d3b6:	f7ff feef 	bl	d198 <_printf_common>
    d3ba:	3001      	adds	r0, #1
    d3bc:	d155      	bne.n	d46a <_printf_i+0x1e6>
    d3be:	f04f 30ff 	mov.w	r0, #4294967295
    d3c2:	b005      	add	sp, #20
    d3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d3c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d3cc:	493c      	ldr	r1, [pc, #240]	; (d4c0 <_printf_i+0x23c>)
    d3ce:	6822      	ldr	r2, [r4, #0]
    d3d0:	6818      	ldr	r0, [r3, #0]
    d3d2:	f012 0f80 	tst.w	r2, #128	; 0x80
    d3d6:	f100 0504 	add.w	r5, r0, #4
    d3da:	601d      	str	r5, [r3, #0]
    d3dc:	d001      	beq.n	d3e2 <_printf_i+0x15e>
    d3de:	6803      	ldr	r3, [r0, #0]
    d3e0:	e002      	b.n	d3e8 <_printf_i+0x164>
    d3e2:	0655      	lsls	r5, r2, #25
    d3e4:	d5fb      	bpl.n	d3de <_printf_i+0x15a>
    d3e6:	8803      	ldrh	r3, [r0, #0]
    d3e8:	07d0      	lsls	r0, r2, #31
    d3ea:	bf44      	itt	mi
    d3ec:	f042 0220 	orrmi.w	r2, r2, #32
    d3f0:	6022      	strmi	r2, [r4, #0]
    d3f2:	b91b      	cbnz	r3, d3fc <_printf_i+0x178>
    d3f4:	6822      	ldr	r2, [r4, #0]
    d3f6:	f022 0220 	bic.w	r2, r2, #32
    d3fa:	6022      	str	r2, [r4, #0]
    d3fc:	2210      	movs	r2, #16
    d3fe:	e7b1      	b.n	d364 <_printf_i+0xe0>
    d400:	4675      	mov	r5, lr
    d402:	fbb3 f0f2 	udiv	r0, r3, r2
    d406:	fb02 3310 	mls	r3, r2, r0, r3
    d40a:	5ccb      	ldrb	r3, [r1, r3]
    d40c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d410:	4603      	mov	r3, r0
    d412:	2800      	cmp	r0, #0
    d414:	d1f5      	bne.n	d402 <_printf_i+0x17e>
    d416:	e7b7      	b.n	d388 <_printf_i+0x104>
    d418:	6808      	ldr	r0, [r1, #0]
    d41a:	681a      	ldr	r2, [r3, #0]
    d41c:	6949      	ldr	r1, [r1, #20]
    d41e:	f010 0f80 	tst.w	r0, #128	; 0x80
    d422:	d004      	beq.n	d42e <_printf_i+0x1aa>
    d424:	1d10      	adds	r0, r2, #4
    d426:	6018      	str	r0, [r3, #0]
    d428:	6813      	ldr	r3, [r2, #0]
    d42a:	6019      	str	r1, [r3, #0]
    d42c:	e007      	b.n	d43e <_printf_i+0x1ba>
    d42e:	f010 0f40 	tst.w	r0, #64	; 0x40
    d432:	f102 0004 	add.w	r0, r2, #4
    d436:	6018      	str	r0, [r3, #0]
    d438:	6813      	ldr	r3, [r2, #0]
    d43a:	d0f6      	beq.n	d42a <_printf_i+0x1a6>
    d43c:	8019      	strh	r1, [r3, #0]
    d43e:	2300      	movs	r3, #0
    d440:	6123      	str	r3, [r4, #16]
    d442:	4675      	mov	r5, lr
    d444:	e7b1      	b.n	d3aa <_printf_i+0x126>
    d446:	681a      	ldr	r2, [r3, #0]
    d448:	1d11      	adds	r1, r2, #4
    d44a:	6019      	str	r1, [r3, #0]
    d44c:	6815      	ldr	r5, [r2, #0]
    d44e:	6862      	ldr	r2, [r4, #4]
    d450:	2100      	movs	r1, #0
    d452:	4628      	mov	r0, r5
    d454:	f000 f8d4 	bl	d600 <memchr>
    d458:	b108      	cbz	r0, d45e <_printf_i+0x1da>
    d45a:	1b40      	subs	r0, r0, r5
    d45c:	6060      	str	r0, [r4, #4]
    d45e:	6863      	ldr	r3, [r4, #4]
    d460:	6123      	str	r3, [r4, #16]
    d462:	2300      	movs	r3, #0
    d464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d468:	e79f      	b.n	d3aa <_printf_i+0x126>
    d46a:	6923      	ldr	r3, [r4, #16]
    d46c:	462a      	mov	r2, r5
    d46e:	4639      	mov	r1, r7
    d470:	4630      	mov	r0, r6
    d472:	47c0      	blx	r8
    d474:	3001      	adds	r0, #1
    d476:	d0a2      	beq.n	d3be <_printf_i+0x13a>
    d478:	6823      	ldr	r3, [r4, #0]
    d47a:	079b      	lsls	r3, r3, #30
    d47c:	d507      	bpl.n	d48e <_printf_i+0x20a>
    d47e:	2500      	movs	r5, #0
    d480:	f104 0919 	add.w	r9, r4, #25
    d484:	68e3      	ldr	r3, [r4, #12]
    d486:	9a03      	ldr	r2, [sp, #12]
    d488:	1a9b      	subs	r3, r3, r2
    d48a:	429d      	cmp	r5, r3
    d48c:	db05      	blt.n	d49a <_printf_i+0x216>
    d48e:	68e0      	ldr	r0, [r4, #12]
    d490:	9b03      	ldr	r3, [sp, #12]
    d492:	4298      	cmp	r0, r3
    d494:	bfb8      	it	lt
    d496:	4618      	movlt	r0, r3
    d498:	e793      	b.n	d3c2 <_printf_i+0x13e>
    d49a:	2301      	movs	r3, #1
    d49c:	464a      	mov	r2, r9
    d49e:	4639      	mov	r1, r7
    d4a0:	4630      	mov	r0, r6
    d4a2:	47c0      	blx	r8
    d4a4:	3001      	adds	r0, #1
    d4a6:	d08a      	beq.n	d3be <_printf_i+0x13a>
    d4a8:	3501      	adds	r5, #1
    d4aa:	e7eb      	b.n	d484 <_printf_i+0x200>
    d4ac:	2b00      	cmp	r3, #0
    d4ae:	d1a7      	bne.n	d400 <_printf_i+0x17c>
    d4b0:	780b      	ldrb	r3, [r1, #0]
    d4b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d4b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d4ba:	e765      	b.n	d388 <_printf_i+0x104>
    d4bc:	0000e402 	.word	0x0000e402
    d4c0:	0000e3f1 	.word	0x0000e3f1

0000d4c4 <__sread>:
    d4c4:	b510      	push	{r4, lr}
    d4c6:	460c      	mov	r4, r1
    d4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d4cc:	f000 f928 	bl	d720 <_read_r>
    d4d0:	2800      	cmp	r0, #0
    d4d2:	bfab      	itete	ge
    d4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d4d6:	89a3      	ldrhlt	r3, [r4, #12]
    d4d8:	181b      	addge	r3, r3, r0
    d4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d4de:	bfac      	ite	ge
    d4e0:	6563      	strge	r3, [r4, #84]	; 0x54
    d4e2:	81a3      	strhlt	r3, [r4, #12]
    d4e4:	bd10      	pop	{r4, pc}

0000d4e6 <__swrite>:
    d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4ea:	461f      	mov	r7, r3
    d4ec:	898b      	ldrh	r3, [r1, #12]
    d4ee:	05db      	lsls	r3, r3, #23
    d4f0:	4605      	mov	r5, r0
    d4f2:	460c      	mov	r4, r1
    d4f4:	4616      	mov	r6, r2
    d4f6:	d505      	bpl.n	d504 <__swrite+0x1e>
    d4f8:	2302      	movs	r3, #2
    d4fa:	2200      	movs	r2, #0
    d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d500:	f000 f868 	bl	d5d4 <_lseek_r>
    d504:	89a3      	ldrh	r3, [r4, #12]
    d506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d50e:	81a3      	strh	r3, [r4, #12]
    d510:	4632      	mov	r2, r6
    d512:	463b      	mov	r3, r7
    d514:	4628      	mov	r0, r5
    d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d51a:	f000 b817 	b.w	d54c <_write_r>

0000d51e <__sseek>:
    d51e:	b510      	push	{r4, lr}
    d520:	460c      	mov	r4, r1
    d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d526:	f000 f855 	bl	d5d4 <_lseek_r>
    d52a:	1c43      	adds	r3, r0, #1
    d52c:	89a3      	ldrh	r3, [r4, #12]
    d52e:	bf15      	itete	ne
    d530:	6560      	strne	r0, [r4, #84]	; 0x54
    d532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d53a:	81a3      	strheq	r3, [r4, #12]
    d53c:	bf18      	it	ne
    d53e:	81a3      	strhne	r3, [r4, #12]
    d540:	bd10      	pop	{r4, pc}

0000d542 <__sclose>:
    d542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d546:	f000 b813 	b.w	d570 <_close_r>
	...

0000d54c <_write_r>:
    d54c:	b538      	push	{r3, r4, r5, lr}
    d54e:	4c07      	ldr	r4, [pc, #28]	; (d56c <_write_r+0x20>)
    d550:	4605      	mov	r5, r0
    d552:	4608      	mov	r0, r1
    d554:	4611      	mov	r1, r2
    d556:	2200      	movs	r2, #0
    d558:	6022      	str	r2, [r4, #0]
    d55a:	461a      	mov	r2, r3
    d55c:	f7fd f852 	bl	a604 <_write>
    d560:	1c43      	adds	r3, r0, #1
    d562:	d102      	bne.n	d56a <_write_r+0x1e>
    d564:	6823      	ldr	r3, [r4, #0]
    d566:	b103      	cbz	r3, d56a <_write_r+0x1e>
    d568:	602b      	str	r3, [r5, #0]
    d56a:	bd38      	pop	{r3, r4, r5, pc}
    d56c:	20003c48 	.word	0x20003c48

0000d570 <_close_r>:
    d570:	b538      	push	{r3, r4, r5, lr}
    d572:	4c06      	ldr	r4, [pc, #24]	; (d58c <_close_r+0x1c>)
    d574:	2300      	movs	r3, #0
    d576:	4605      	mov	r5, r0
    d578:	4608      	mov	r0, r1
    d57a:	6023      	str	r3, [r4, #0]
    d57c:	f7f8 fcf8 	bl	5f70 <_close>
    d580:	1c43      	adds	r3, r0, #1
    d582:	d102      	bne.n	d58a <_close_r+0x1a>
    d584:	6823      	ldr	r3, [r4, #0]
    d586:	b103      	cbz	r3, d58a <_close_r+0x1a>
    d588:	602b      	str	r3, [r5, #0]
    d58a:	bd38      	pop	{r3, r4, r5, pc}
    d58c:	20003c48 	.word	0x20003c48

0000d590 <_fstat_r>:
    d590:	b538      	push	{r3, r4, r5, lr}
    d592:	4c07      	ldr	r4, [pc, #28]	; (d5b0 <_fstat_r+0x20>)
    d594:	2300      	movs	r3, #0
    d596:	4605      	mov	r5, r0
    d598:	4608      	mov	r0, r1
    d59a:	4611      	mov	r1, r2
    d59c:	6023      	str	r3, [r4, #0]
    d59e:	f7f8 fcea 	bl	5f76 <_fstat>
    d5a2:	1c43      	adds	r3, r0, #1
    d5a4:	d102      	bne.n	d5ac <_fstat_r+0x1c>
    d5a6:	6823      	ldr	r3, [r4, #0]
    d5a8:	b103      	cbz	r3, d5ac <_fstat_r+0x1c>
    d5aa:	602b      	str	r3, [r5, #0]
    d5ac:	bd38      	pop	{r3, r4, r5, pc}
    d5ae:	bf00      	nop
    d5b0:	20003c48 	.word	0x20003c48

0000d5b4 <_isatty_r>:
    d5b4:	b538      	push	{r3, r4, r5, lr}
    d5b6:	4c06      	ldr	r4, [pc, #24]	; (d5d0 <_isatty_r+0x1c>)
    d5b8:	2300      	movs	r3, #0
    d5ba:	4605      	mov	r5, r0
    d5bc:	4608      	mov	r0, r1
    d5be:	6023      	str	r3, [r4, #0]
    d5c0:	f7f8 fcde 	bl	5f80 <_isatty>
    d5c4:	1c43      	adds	r3, r0, #1
    d5c6:	d102      	bne.n	d5ce <_isatty_r+0x1a>
    d5c8:	6823      	ldr	r3, [r4, #0]
    d5ca:	b103      	cbz	r3, d5ce <_isatty_r+0x1a>
    d5cc:	602b      	str	r3, [r5, #0]
    d5ce:	bd38      	pop	{r3, r4, r5, pc}
    d5d0:	20003c48 	.word	0x20003c48

0000d5d4 <_lseek_r>:
    d5d4:	b538      	push	{r3, r4, r5, lr}
    d5d6:	4c07      	ldr	r4, [pc, #28]	; (d5f4 <_lseek_r+0x20>)
    d5d8:	4605      	mov	r5, r0
    d5da:	4608      	mov	r0, r1
    d5dc:	4611      	mov	r1, r2
    d5de:	2200      	movs	r2, #0
    d5e0:	6022      	str	r2, [r4, #0]
    d5e2:	461a      	mov	r2, r3
    d5e4:	f7f8 fcce 	bl	5f84 <_lseek>
    d5e8:	1c43      	adds	r3, r0, #1
    d5ea:	d102      	bne.n	d5f2 <_lseek_r+0x1e>
    d5ec:	6823      	ldr	r3, [r4, #0]
    d5ee:	b103      	cbz	r3, d5f2 <_lseek_r+0x1e>
    d5f0:	602b      	str	r3, [r5, #0]
    d5f2:	bd38      	pop	{r3, r4, r5, pc}
    d5f4:	20003c48 	.word	0x20003c48
	...

0000d600 <memchr>:
    d600:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d604:	2a10      	cmp	r2, #16
    d606:	db2b      	blt.n	d660 <memchr+0x60>
    d608:	f010 0f07 	tst.w	r0, #7
    d60c:	d008      	beq.n	d620 <memchr+0x20>
    d60e:	f810 3b01 	ldrb.w	r3, [r0], #1
    d612:	3a01      	subs	r2, #1
    d614:	428b      	cmp	r3, r1
    d616:	d02d      	beq.n	d674 <memchr+0x74>
    d618:	f010 0f07 	tst.w	r0, #7
    d61c:	b342      	cbz	r2, d670 <memchr+0x70>
    d61e:	d1f6      	bne.n	d60e <memchr+0xe>
    d620:	b4f0      	push	{r4, r5, r6, r7}
    d622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d62a:	f022 0407 	bic.w	r4, r2, #7
    d62e:	f07f 0700 	mvns.w	r7, #0
    d632:	2300      	movs	r3, #0
    d634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d638:	3c08      	subs	r4, #8
    d63a:	ea85 0501 	eor.w	r5, r5, r1
    d63e:	ea86 0601 	eor.w	r6, r6, r1
    d642:	fa85 f547 	uadd8	r5, r5, r7
    d646:	faa3 f587 	sel	r5, r3, r7
    d64a:	fa86 f647 	uadd8	r6, r6, r7
    d64e:	faa5 f687 	sel	r6, r5, r7
    d652:	b98e      	cbnz	r6, d678 <memchr+0x78>
    d654:	d1ee      	bne.n	d634 <memchr+0x34>
    d656:	bcf0      	pop	{r4, r5, r6, r7}
    d658:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d65c:	f002 0207 	and.w	r2, r2, #7
    d660:	b132      	cbz	r2, d670 <memchr+0x70>
    d662:	f810 3b01 	ldrb.w	r3, [r0], #1
    d666:	3a01      	subs	r2, #1
    d668:	ea83 0301 	eor.w	r3, r3, r1
    d66c:	b113      	cbz	r3, d674 <memchr+0x74>
    d66e:	d1f8      	bne.n	d662 <memchr+0x62>
    d670:	2000      	movs	r0, #0
    d672:	4770      	bx	lr
    d674:	3801      	subs	r0, #1
    d676:	4770      	bx	lr
    d678:	2d00      	cmp	r5, #0
    d67a:	bf06      	itte	eq
    d67c:	4635      	moveq	r5, r6
    d67e:	3803      	subeq	r0, #3
    d680:	3807      	subne	r0, #7
    d682:	f015 0f01 	tst.w	r5, #1
    d686:	d107      	bne.n	d698 <memchr+0x98>
    d688:	3001      	adds	r0, #1
    d68a:	f415 7f80 	tst.w	r5, #256	; 0x100
    d68e:	bf02      	ittt	eq
    d690:	3001      	addeq	r0, #1
    d692:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d696:	3001      	addeq	r0, #1
    d698:	bcf0      	pop	{r4, r5, r6, r7}
    d69a:	3801      	subs	r0, #1
    d69c:	4770      	bx	lr
    d69e:	bf00      	nop

0000d6a0 <memmove>:
    d6a0:	4288      	cmp	r0, r1
    d6a2:	b510      	push	{r4, lr}
    d6a4:	eb01 0302 	add.w	r3, r1, r2
    d6a8:	d803      	bhi.n	d6b2 <memmove+0x12>
    d6aa:	1e42      	subs	r2, r0, #1
    d6ac:	4299      	cmp	r1, r3
    d6ae:	d10c      	bne.n	d6ca <memmove+0x2a>
    d6b0:	bd10      	pop	{r4, pc}
    d6b2:	4298      	cmp	r0, r3
    d6b4:	d2f9      	bcs.n	d6aa <memmove+0xa>
    d6b6:	1881      	adds	r1, r0, r2
    d6b8:	1ad2      	subs	r2, r2, r3
    d6ba:	42d3      	cmn	r3, r2
    d6bc:	d100      	bne.n	d6c0 <memmove+0x20>
    d6be:	bd10      	pop	{r4, pc}
    d6c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d6c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d6c8:	e7f7      	b.n	d6ba <memmove+0x1a>
    d6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    d6ce:	f802 4f01 	strb.w	r4, [r2, #1]!
    d6d2:	e7eb      	b.n	d6ac <memmove+0xc>

0000d6d4 <_realloc_r>:
    d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6d6:	4607      	mov	r7, r0
    d6d8:	4614      	mov	r4, r2
    d6da:	460e      	mov	r6, r1
    d6dc:	b921      	cbnz	r1, d6e8 <_realloc_r+0x14>
    d6de:	4611      	mov	r1, r2
    d6e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d6e4:	f7fe be5c 	b.w	c3a0 <_malloc_r>
    d6e8:	b922      	cbnz	r2, d6f4 <_realloc_r+0x20>
    d6ea:	f7fe fe0b 	bl	c304 <_free_r>
    d6ee:	4625      	mov	r5, r4
    d6f0:	4628      	mov	r0, r5
    d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6f4:	f000 f826 	bl	d744 <_malloc_usable_size_r>
    d6f8:	4284      	cmp	r4, r0
    d6fa:	d90f      	bls.n	d71c <_realloc_r+0x48>
    d6fc:	4621      	mov	r1, r4
    d6fe:	4638      	mov	r0, r7
    d700:	f7fe fe4e 	bl	c3a0 <_malloc_r>
    d704:	4605      	mov	r5, r0
    d706:	2800      	cmp	r0, #0
    d708:	d0f2      	beq.n	d6f0 <_realloc_r+0x1c>
    d70a:	4631      	mov	r1, r6
    d70c:	4622      	mov	r2, r4
    d70e:	f7fe fde5 	bl	c2dc <memcpy>
    d712:	4631      	mov	r1, r6
    d714:	4638      	mov	r0, r7
    d716:	f7fe fdf5 	bl	c304 <_free_r>
    d71a:	e7e9      	b.n	d6f0 <_realloc_r+0x1c>
    d71c:	4635      	mov	r5, r6
    d71e:	e7e7      	b.n	d6f0 <_realloc_r+0x1c>

0000d720 <_read_r>:
    d720:	b538      	push	{r3, r4, r5, lr}
    d722:	4c07      	ldr	r4, [pc, #28]	; (d740 <_read_r+0x20>)
    d724:	4605      	mov	r5, r0
    d726:	4608      	mov	r0, r1
    d728:	4611      	mov	r1, r2
    d72a:	2200      	movs	r2, #0
    d72c:	6022      	str	r2, [r4, #0]
    d72e:	461a      	mov	r2, r3
    d730:	f7fc ff58 	bl	a5e4 <_read>
    d734:	1c43      	adds	r3, r0, #1
    d736:	d102      	bne.n	d73e <_read_r+0x1e>
    d738:	6823      	ldr	r3, [r4, #0]
    d73a:	b103      	cbz	r3, d73e <_read_r+0x1e>
    d73c:	602b      	str	r3, [r5, #0]
    d73e:	bd38      	pop	{r3, r4, r5, pc}
    d740:	20003c48 	.word	0x20003c48

0000d744 <_malloc_usable_size_r>:
    d744:	f851 0c04 	ldr.w	r0, [r1, #-4]
    d748:	2800      	cmp	r0, #0
    d74a:	f1a0 0004 	sub.w	r0, r0, #4
    d74e:	bfbc      	itt	lt
    d750:	580b      	ldrlt	r3, [r1, r0]
    d752:	18c0      	addlt	r0, r0, r3
    d754:	4770      	bx	lr
    d756:	0000      	movs	r0, r0
    d758:	682f2e2e 	.word	0x682f2e2e
    d75c:	692f6c61 	.word	0x692f6c61
    d760:	756c636e 	.word	0x756c636e
    d764:	682f6564 	.word	0x682f6564
    d768:	775f6c61 	.word	0x775f6c61
    d76c:	682e7464 	.word	0x682e7464
    d770:	00000000 	.word	0x00000000
    d774:	7974227b 	.word	0x7974227b
    d778:	3a226570 	.word	0x3a226570
    d77c:	44494d22 	.word	0x44494d22
    d780:	202c2249 	.word	0x202c2249
    d784:	74616422 	.word	0x74616422
    d788:	203a2261 	.word	0x203a2261
    d78c:	6425225b 	.word	0x6425225b
    d790:	22202c22 	.word	0x22202c22
    d794:	2c226425 	.word	0x2c226425
    d798:	64252220 	.word	0x64252220
    d79c:	22202c22 	.word	0x22202c22
    d7a0:	2c226425 	.word	0x2c226425
    d7a4:	64252220 	.word	0x64252220
    d7a8:	22202c22 	.word	0x22202c22
    d7ac:	5d226425 	.word	0x5d226425
    d7b0:	000a0d7d 	.word	0x000a0d7d
    d7b4:	4952475b 	.word	0x4952475b
    d7b8:	25205d44 	.word	0x25205d44
    d7bc:	25206433 	.word	0x25206433
    d7c0:	25206434 	.word	0x25206434
    d7c4:	25206434 	.word	0x25206434
    d7c8:	4d5b2064 	.word	0x4d5b2064
    d7cc:	5d494449 	.word	0x5d494449
    d7d0:	3a684320 	.word	0x3a684320
    d7d4:	20642520 	.word	0x20642520
    d7d8:	646d4320 	.word	0x646d4320
    d7dc:	6425203a 	.word	0x6425203a
    d7e0:	61502020 	.word	0x61502020
    d7e4:	316d6172 	.word	0x316d6172
    d7e8:	6425203a 	.word	0x6425203a
    d7ec:	61502020 	.word	0x61502020
    d7f0:	326d6172 	.word	0x326d6172
    d7f4:	6425203a 	.word	0x6425203a
    d7f8:	0000000a 	.word	0x0000000a
    d7fc:	4952475b 	.word	0x4952475b
    d800:	25205d44 	.word	0x25205d44
    d804:	25206433 	.word	0x25206433
    d808:	25206434 	.word	0x25206434
    d80c:	25206434 	.word	0x25206434
    d810:	4b5b2064 	.word	0x4b5b2064
    d814:	4f425945 	.word	0x4f425945
    d818:	5d445241 	.word	0x5d445241
    d81c:	79654b20 	.word	0x79654b20
    d820:	6425203a 	.word	0x6425203a
    d824:	646f4d20 	.word	0x646f4d20
    d828:	6425203a 	.word	0x6425203a
    d82c:	646d4320 	.word	0x646d4320
    d830:	6425203a 	.word	0x6425203a
    d834:	4357480a 	.word	0x4357480a
    d838:	203a4746 	.word	0x203a4746
    d83c:	78383025 	.word	0x78383025
    d840:	0000000a 	.word	0x0000000a
    d844:	4952475b 	.word	0x4952475b
    d848:	25205d44 	.word	0x25205d44
    d84c:	25206433 	.word	0x25206433
    d850:	25206434 	.word	0x25206434
    d854:	25206434 	.word	0x25206434
    d858:	535b2064 	.word	0x535b2064
    d85c:	205d5359 	.word	0x205d5359
    d860:	20643325 	.word	0x20643325
    d864:	20643325 	.word	0x20643325
    d868:	0a643325 	.word	0x0a643325
    d86c:	00000000 	.word	0x00000000
    d870:	7974227b 	.word	0x7974227b
    d874:	3a226570 	.word	0x3a226570
    d878:	41454822 	.word	0x41454822
    d87c:	45425452 	.word	0x45425452
    d880:	2c225441 	.word	0x2c225441
    d884:	61642220 	.word	0x61642220
    d888:	3a226174 	.word	0x3a226174
    d88c:	25225b20 	.word	0x25225b20
    d890:	202c2264 	.word	0x202c2264
    d894:	22642522 	.word	0x22642522
    d898:	2522202c 	.word	0x2522202c
    d89c:	7d5d2264 	.word	0x7d5d2264
    d8a0:	00000a0d 	.word	0x00000a0d
    d8a4:	4b4e555b 	.word	0x4b4e555b
    d8a8:	4e574f4e 	.word	0x4e574f4e
    d8ac:	3e2d205d 	.word	0x3e2d205d
    d8b0:	6f725020 	.word	0x6f725020
    d8b4:	6f636f74 	.word	0x6f636f74
    d8b8:	25203a6c 	.word	0x25203a6c
    d8bc:	00000a64 	.word	0x00000a64
    d8c0:	0f0e0d0c 	.word	0x0f0e0d0c
    d8c4:	0b0a0908 	.word	0x0b0a0908
    d8c8:	07060504 	.word	0x07060504
    d8cc:	03020100 	.word	0x03020100
    d8d0:	30256325 	.word	0x30256325
    d8d4:	30257832 	.word	0x30257832
    d8d8:	30257832 	.word	0x30257832
    d8dc:	30257832 	.word	0x30257832
    d8e0:	30257832 	.word	0x30257832
    d8e4:	63257832 	.word	0x63257832
    d8e8:	30256325 	.word	0x30256325
    d8ec:	30257832 	.word	0x30257832
    d8f0:	30257832 	.word	0x30257832
    d8f4:	30257832 	.word	0x30257832
    d8f8:	30257832 	.word	0x30257832
    d8fc:	63257832 	.word	0x63257832
    d900:	00000000 	.word	0x00000000
    d904:	78383025 	.word	0x78383025
    d908:	00000000 	.word	0x00000000
    d90c:	64697267 	.word	0x64697267
    d910:	7379735f 	.word	0x7379735f
    d914:	68633a3a 	.word	0x68633a3a
    d918:	736b6365 	.word	0x736b6365
    d91c:	00006d75 	.word	0x00006d75
    d920:	63656843 	.word	0x63656843
    d924:	6d75736b 	.word	0x6d75736b
    d928:	61655220 	.word	0x61655220
    d92c:	61432f64 	.word	0x61432f64
    d930:	6c75636c 	.word	0x6c75636c
    d934:	00657461 	.word	0x00657461
    d938:	6b636170 	.word	0x6b636170
    d93c:	257b7465 	.word	0x257b7465
    d940:	25202c64 	.word	0x25202c64
    d944:	25202c64 	.word	0x25202c64
    d948:	25202c64 	.word	0x25202c64
    d94c:	25202c64 	.word	0x25202c64
    d950:	25202c64 	.word	0x25202c64
    d954:	25202c64 	.word	0x25202c64
    d958:	25202c64 	.word	0x25202c64
    d95c:	52207d64 	.word	0x52207d64
    d960:	3a646165 	.word	0x3a646165
    d964:	2c642520 	.word	0x2c642520
    d968:	6c614320 	.word	0x6c614320
    d96c:	616c7563 	.word	0x616c7563
    d970:	203a6574 	.word	0x203a6574
    d974:	00006425 	.word	0x00006425
    d978:	63656843 	.word	0x63656843
    d97c:	6d75736b 	.word	0x6d75736b
    d980:	69725720 	.word	0x69725720
    d984:	432f6574 	.word	0x432f6574
    d988:	75636c61 	.word	0x75636c61
    d98c:	6574616c 	.word	0x6574616c
    d990:	00000000 	.word	0x00000000
    d994:	63656843 	.word	0x63656843
    d998:	6d75736b 	.word	0x6d75736b
    d99c:	65764f20 	.word	0x65764f20
    d9a0:	69727772 	.word	0x69727772
    d9a4:	00006574 	.word	0x00006574
    d9a8:	61726150 	.word	0x61726150
    d9ac:	72706170 	.word	0x72706170
    d9b0:	73616b69 	.word	0x73616b69
    d9b4:	00000000 	.word	0x00000000
    d9b8:	30256325 	.word	0x30256325
    d9bc:	30257832 	.word	0x30257832
    d9c0:	30257832 	.word	0x30257832
    d9c4:	30257832 	.word	0x30257832
    d9c8:	63257832 	.word	0x63257832
    d9cc:	00000000 	.word	0x00000000
    d9d0:	30256325 	.word	0x30256325
    d9d4:	30257832 	.word	0x30257832
    d9d8:	30257832 	.word	0x30257832
    d9dc:	63257832 	.word	0x63257832
    d9e0:	00000000 	.word	0x00000000
    d9e4:	63256325 	.word	0x63256325
    d9e8:	63256325 	.word	0x63256325
    d9ec:	78323025 	.word	0x78323025
    d9f0:	78323025 	.word	0x78323025
    d9f4:	78323025 	.word	0x78323025
    d9f8:	30306325 	.word	0x30306325
    d9fc:	0000000a 	.word	0x0000000a
    da00:	63256325 	.word	0x63256325
    da04:	78323025 	.word	0x78323025
    da08:	78323025 	.word	0x78323025
    da0c:	78323025 	.word	0x78323025
    da10:	78323025 	.word	0x78323025
    da14:	78323025 	.word	0x78323025
    da18:	00006325 	.word	0x00006325
    da1c:	78323025 	.word	0x78323025
    da20:	00000000 	.word	0x00000000
    da24:	000a3030 	.word	0x000a3030
    da28:	682f2e2e 	.word	0x682f2e2e
    da2c:	732f6c61 	.word	0x732f6c61
    da30:	682f6372 	.word	0x682f6372
    da34:	615f6c61 	.word	0x615f6c61
    da38:	615f6364 	.word	0x615f6364
    da3c:	636e7973 	.word	0x636e7973
    da40:	0000632e 	.word	0x0000632e
    da44:	682f2e2e 	.word	0x682f2e2e
    da48:	732f6c61 	.word	0x732f6c61
    da4c:	682f6372 	.word	0x682f6372
    da50:	635f6c61 	.word	0x635f6c61
    da54:	735f6372 	.word	0x735f6372
    da58:	2e636e79 	.word	0x2e636e79
    da5c:	00000063 	.word	0x00000063
    da60:	682f2e2e 	.word	0x682f2e2e
    da64:	732f6c61 	.word	0x732f6c61
    da68:	682f6372 	.word	0x682f6372
    da6c:	665f6c61 	.word	0x665f6c61
    da70:	6873616c 	.word	0x6873616c
    da74:	0000632e 	.word	0x0000632e
    da78:	682f2e2e 	.word	0x682f2e2e
    da7c:	732f6c61 	.word	0x732f6c61
    da80:	682f6372 	.word	0x682f6372
    da84:	695f6c61 	.word	0x695f6c61
    da88:	6d5f6332 	.word	0x6d5f6332
    da8c:	7973615f 	.word	0x7973615f
    da90:	632e636e 	.word	0x632e636e
    da94:	00000000 	.word	0x00000000
    da98:	682f2e2e 	.word	0x682f2e2e
    da9c:	732f6c61 	.word	0x732f6c61
    daa0:	682f6372 	.word	0x682f6372
    daa4:	695f6c61 	.word	0x695f6c61
    daa8:	00632e6f 	.word	0x00632e6f
    daac:	682f2e2e 	.word	0x682f2e2e
    dab0:	732f6c61 	.word	0x732f6c61
    dab4:	682f6372 	.word	0x682f6372
    dab8:	715f6c61 	.word	0x715f6c61
    dabc:	5f697073 	.word	0x5f697073
    dac0:	2e616d64 	.word	0x2e616d64
    dac4:	00000063 	.word	0x00000063
    dac8:	682f2e2e 	.word	0x682f2e2e
    dacc:	732f6c61 	.word	0x732f6c61
    dad0:	682f6372 	.word	0x682f6372
    dad4:	735f6c61 	.word	0x735f6c61
    dad8:	6d5f6970 	.word	0x6d5f6970
    dadc:	7973615f 	.word	0x7973615f
    dae0:	632e636e 	.word	0x632e636e
    dae4:	00000000 	.word	0x00000000
    dae8:	682f2e2e 	.word	0x682f2e2e
    daec:	732f6c61 	.word	0x732f6c61
    daf0:	682f6372 	.word	0x682f6372
    daf4:	735f6c61 	.word	0x735f6c61
    daf8:	6d5f6970 	.word	0x6d5f6970
    dafc:	616d645f 	.word	0x616d645f
    db00:	0000632e 	.word	0x0000632e
    db04:	682f2e2e 	.word	0x682f2e2e
    db08:	732f6c61 	.word	0x732f6c61
    db0c:	682f6372 	.word	0x682f6372
    db10:	745f6c61 	.word	0x745f6c61
    db14:	72656d69 	.word	0x72656d69
    db18:	0000632e 	.word	0x0000632e
    db1c:	682f2e2e 	.word	0x682f2e2e
    db20:	732f6c61 	.word	0x732f6c61
    db24:	682f6372 	.word	0x682f6372
    db28:	755f6c61 	.word	0x755f6c61
    db2c:	74726173 	.word	0x74726173
    db30:	7973615f 	.word	0x7973615f
    db34:	632e636e 	.word	0x632e636e
    db38:	00000000 	.word	0x00000000
    db3c:	682f2e2e 	.word	0x682f2e2e
    db40:	732f6c61 	.word	0x732f6c61
    db44:	682f6372 	.word	0x682f6372
    db48:	755f6c61 	.word	0x755f6c61
    db4c:	74726173 	.word	0x74726173
    db50:	6e79735f 	.word	0x6e79735f
    db54:	00632e63 	.word	0x00632e63
    db58:	682f2e2e 	.word	0x682f2e2e
    db5c:	752f6c61 	.word	0x752f6c61
    db60:	736c6974 	.word	0x736c6974
    db64:	6372732f 	.word	0x6372732f
    db68:	6974752f 	.word	0x6974752f
    db6c:	6c5f736c 	.word	0x6c5f736c
    db70:	2e747369 	.word	0x2e747369
    db74:	00000063 	.word	0x00000063
    db78:	682f2e2e 	.word	0x682f2e2e
    db7c:	752f6c61 	.word	0x752f6c61
    db80:	736c6974 	.word	0x736c6974
    db84:	6372732f 	.word	0x6372732f
    db88:	6974752f 	.word	0x6974752f
    db8c:	725f736c 	.word	0x725f736c
    db90:	62676e69 	.word	0x62676e69
    db94:	65666675 	.word	0x65666675
    db98:	00632e72 	.word	0x00632e72

0000db9c <_adcs>:
    db9c:	01000000 0003000c 00041807 00000000     ................
    dbac:	0014080b 00010000 000c0100 18040003     ................
    dbbc:	00000004 080b0000 00000014 682f2e2e     ............../h
    dbcc:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    dbdc:	00000000                                ....

0000dbe0 <_cfgs>:
    dbe0:	00200600 08068000 00200400 08068000     .. ....... .....
    dbf0:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    dc10:	00200b00 14000003 00200a00 08000002     .. ....... .....
    dc20:	00201300 14000003 00000000 00000000     .. .............
	...
    dcd0:	00005400 1c000000 00005300 0c000000     .T.......S......

0000dce0 <user_mux_confs>:
	...
    dd0c:	04030201 04030201 00000000 00000000     ................
	...

0000dd24 <channel_confs>:
    dd24:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000dd64 <interrupt_cfg>:
    dd64:	00000002 00000002 00000002 00000002     ................
	...
    dde4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    ddf4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    de04:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    de14:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    de24:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    de34:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    de44:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000de54 <_usarts>:
    de54:	00000000 40100004 00030000 00700002     .......@......p.
    de64:	0000aaaa 00000000 00000001 40100004     ...............@
    de74:	00030000 00700002 0000aaaa 00000000     ......p.........
    de84:	00000002 40100004 00030000 00700002     .......@......p.
    de94:	00005555 00000000 00000004 40100004     UU.............@
    dea4:	00030000 00700002 0000aaaa 00000000     ......p.........
    deb4:	00000006 40100004 00030000 00700002     .......@......p.
    dec4:	0000aaaa 00000000                       ........

0000decc <_i2cms>:
    decc:	00000005 00200014 00000100 0000e6e5     ...... .........
    dedc:	00d70000 02dc6c00                       .....l..

0000dee4 <sercomspi_regs>:
    dee4:	3020000c 00020000 00000000 01ff0005     .. 0............
    def4:	20000c03 00000000 00000000 ff000600     ... ............
    df04:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    df14:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    df24:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    df34:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000df44 <_tcs>:
    df44:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    df54:	00000000 006c0001 00000308 00000021     ......l.....!...
    df64:	00003a98 00000000 006d0002 00000308     .:........m.....
    df74:	00000021 00003a98 00000000 006e0003     !....:........n.
    df84:	00000308 00000021 00003a98 00000000     ....!....:......
    df94:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    dfa4:	0000632e                                .c..

0000dfa8 <_usb_ep_cfgs>:
    dfa8:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    dfc0:	20000d20 00000000 00000008 20000ce0      .. ........... 
    dfd0:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    dfe8:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    dff8:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    e008:	7974227b 3a226570 52524522 2c22524f     {"type":"ERROR",
    e018:	61642220 3a226174 54225b20 6f656d69      "data": ["Timeo
    e028:	203a7475 63736944 656e6e6f 5d227463     ut: Disconnect"]
    e038:	00000d7d 7974227b 3a226570 41525422     }...{"type":"TRA
    e048:	202c2250 74616422 203a2261 5254225b     P", "data": ["TR
    e058:	22315041 000d7d5d 7974227b 3a226570     AP1"]}..{"type":
    e068:	41525422 202c2250 74616422 203a2261     "TRAP", "data": 
    e078:	5254225b 22325041 000d7d5d 7974227b     ["TRAP2"]}..{"ty
    e088:	3a226570 52524522 2c22524f 61642220     pe":"ERROR", "da
    e098:	3a226174 42225b20 65666675 764f2072     ta": ["Buffer Ov
    e0a8:	75727265 7d5d226e 0000000d 7974227b     errun"]}....{"ty
    e0b8:	3a226570 41572220 4e494e52 202c2247     pe": "WARNING", 
    e0c8:	74616422 203a2261 7246225b 20656d61     "data": ["Frame 
    e0d8:	72617453 664f2074 74657366 0d7d5d22     Start Offset"]}.
    e0e8:	00000000 7974227b 3a226570 41572220     ....{"type": "WA
    e0f8:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    e108:	6e55225b 776f6e6b 73654d20 65676173     ["Unknow Message
    e118:	70795420 7d5d2265 0000000d 7974227b      Type"]}....{"ty
    e128:	3a226570 41572220 4e494e52 202c2247     pe": "WARNING", 
    e138:	74616422 203a2261 6e49225b 696c6176     "data": ["Invali
    e148:	68432064 736b6365 5d226d75 00000d7d     d Checksum"]}...
    e158:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
    e168:	6422202c 22617461 225b203a 6d617246     , "data": ["Fram
    e178:	72452065 22726f72 000d7d5d 7974227b     e Error"]}..{"ty
    e188:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    e198:	22617461 225b203a 69726150 45207974     ata": ["Parity E
    e1a8:	726f7272 0d7d5d22 00000000 49505351     rror"]}.....QSPI
    e1b8:	6f725020 6d617267 61745320 64657472      Program Started
    e1c8:	00000d0a 73616c46 72652068 20657361     ....Flash erase 
    e1d8:	63637573 66737365 0d0a6c75 00000000     successful......
    e1e8:	73616c46 72772068 20657469 63637573     Flash write succ
    e1f8:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    e208:	65722068 73206461 65636375 75667373     h read successfu
    e218:	000d0a6c 73616c46 61642068 76206174     l...Flash data v
    e228:	66697265 74616369 206e6f69 6c696166     erification fail
    e238:	0a2e6465 0000000d 74697257 202d2065     ed......Write - 
    e248:	64616552 20736920 63637573 66737365     Read is successf
    e258:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
    e268:	6d656d20 2e79726f 00000d0a 74696e49      memory.....Init
    e278:	696c6169 6974617a 000d6e6f 65746e45     ialization..Ente
    e288:	676e6972 69614d20 6f4c206e 000d706f     ring Main Loop..
    e298:	20425355 6e6e6f43 65746365 00000d64     USB Connected...
    e2a8:	7974227b 3a226570 53415422 202c224b     {"type":"TASK", 
    e2b8:	74616422 203a2261 0000005b 22642522     "data": [..."%d"
    e2c8:	00000000 0000202c 7974227b 3a226570     ...., ..{"type":
    e2d8:	4f4f4c22 202c2250 74616422 203a2261     "LOOP", "data": 
    e2e8:	6425225b 0d7d5d22 0000000a              ["%d"]}.....

0000e2f4 <keyboard_report_desc>:
    e2f4:	06090105 070501a1 e729e019 01250015     ..........)...%.
    e304:	08950175 01810281 65290019 65250015     u.........)e..%e
    e314:	06950875 08050081 05290119 01250015     u.........)...%.
    e324:	05950175 03950291 00c00191              u...........

0000e330 <mouse_report_desc>:
    e330:	02090105 010901a1 090500a1 03290119     ..............).
    e340:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    e350:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    e360:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    e370:	73752f65 2e636462 00000063              e/usbdc.c...

0000e37c <_global_impure_ptr>:
    e37c:	2000055c                                \.. 

0000e380 <__sf_fake_stderr>:
	...

0000e3a0 <__sf_fake_stdin>:
	...

0000e3c0 <__sf_fake_stdout>:
	...
    e3e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    e3f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    e400:	31300046 35343332 39383736 64636261     F.0123456789abcd
    e410:	00006665                                ef..

0000e414 <_init>:
    e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e416:	bf00      	nop
    e418:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e41a:	bc08      	pop	{r3}
    e41c:	469e      	mov	lr, r3
    e41e:	4770      	bx	lr

0000e420 <__init_array_start>:
    e420:	00000289 	.word	0x00000289

0000e424 <_fini>:
    e424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e426:	bf00      	nop
    e428:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e42a:	bc08      	pop	{r3}
    e42c:	469e      	mov	lr, r3
    e42e:	4770      	bx	lr

0000e430 <__fini_array_start>:
    e430:	00000265 	.word	0x00000265
