
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b358  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000057c  20000000  0000b358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002057c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002057c  2**0
                  CONTENTS
  4 .bss          000026a4  20000580  0000b8e0  00020580  2**4
                  ALLOC
  5 .stack        00010004  20002c24  0000df84  00020580  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002057c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205aa  2**0
                  CONTENTS, READONLY
  8 .debug_info   00073457  00000000  00000000  00020603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009d09  00000000  00000000  00093a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000286db  00000000  00000000  0009d763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ed0  00000000  00000000  000c5e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002c68  00000000  00000000  000c7d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040c77  00000000  00000000  000ca976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032916  00000000  00000000  0010b5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001186d1  00000000  00000000  0013df03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005834  00000000  00000000  002565d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 2c 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     (,. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	b1 52 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .R..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 79 4f 00 00 8d 4f 00 00     ........yO...O..
      bc:	b1 4d 00 00 bd 4d 00 00 c9 4d 00 00 d5 4d 00 00     .M...M...M...M..
      cc:	e1 4d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .M..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	e5 50 00 00 b1 5c 00 00 c5 5c 00 00 d9 5c 00 00     .P...\...\...\..
     104:	ed 5c 00 00 01 5d 00 00 15 5d 00 00 29 5d 00 00     .\...]...]..)]..
     114:	3d 5d 00 00 51 5d 00 00 65 5d 00 00 79 5d 00 00     =]..Q]..e]..y]..
     124:	8d 5d 00 00 a1 5d 00 00 b5 5d 00 00 c9 5d 00 00     .]...]...]...]..
     134:	dd 5d 00 00 f1 5d 00 00 05 5e 00 00 19 5e 00 00     .]...]...^...^..
     144:	2d 5e 00 00 41 5e 00 00 55 5e 00 00 69 5e 00 00     -^..A^..U^..i^..
     154:	7d 5e 00 00 91 5e 00 00 a5 5e 00 00 b9 5e 00 00     }^...^...^...^..
     164:	cd 5e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .^..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 a1 7d 00 00     .............}..
     184:	ad 7d 00 00 b9 7d 00 00 c5 7d 00 00 00 00 00 00     .}...}...}......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 b5 6a 00 00 c9 6a 00 00     .........j...j..
     1f4:	dd 6a 00 00 f1 6a 00 00 e5 02 00 00 e5 02 00 00     .j...j..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 45 4a 00 00 59 4a 00 00 6d 4a 00 00     ....EJ..YJ..mJ..
     224:	81 4a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .J..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000580 	.word	0x20000580
     280:	00000000 	.word	0x00000000
     284:	0000b358 	.word	0x0000b358

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000b358 	.word	0x0000b358
     2c4:	20000584 	.word	0x20000584
     2c8:	0000b358 	.word	0x0000b358
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	00009a11 	.word	0x00009a11

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000b358 	.word	0x0000b358
     364:	2000057c 	.word	0x2000057c
     368:	20002c24 	.word	0x20002c24
     36c:	20000580 	.word	0x20000580
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000a1f1 	.word	0x0000a1f1
     37c:	000083d1 	.word	0x000083d1

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000059c 	.word	0x2000059c
     400:	20001404 	.word	0x20001404
     404:	200014fc 	.word	0x200014fc
     408:	43001c00 	.word	0x43001c00
     40c:	0000304d 	.word	0x0000304d
     410:	000030f1 	.word	0x000030f1
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	2000059c 	.word	0x2000059c
     4a4:	200015d4 	.word	0x200015d4
     4a8:	2000135c 	.word	0x2000135c
     4ac:	43002000 	.word	0x43002000
     4b0:	0000304d 	.word	0x0000304d
     4b4:	000030f1 	.word	0x000030f1
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20001358 	.word	0x20001358
     4e0:	0000338d 	.word	0x0000338d

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00003411 	.word	0x00003411

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	2000133c 	.word	0x2000133c
     544:	00003431 	.word	0x00003431

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	200005c4 	.word	0x200005c4
     5dc:	40003000 	.word	0x40003000
     5e0:	20001430 	.word	0x20001430
     5e4:	00003e21 	.word	0x00003e21
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	200005d4 	.word	0x200005d4
     680:	40003400 	.word	0x40003400
     684:	20001480 	.word	0x20001480
     688:	00003e21 	.word	0x00003e21
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	200005e4 	.word	0x200005e4
     724:	41012000 	.word	0x41012000
     728:	200013b4 	.word	0x200013b4
     72c:	00003e21 	.word	0x00003e21
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	200012b4 	.word	0x200012b4
     838:	0000376d 	.word	0x0000376d
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	200005f4 	.word	0x200005f4
     8d8:	20001534 	.word	0x20001534
     8dc:	00003e21 	.word	0x00003e21
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20001374 	.word	0x20001374
     988:	00003511 	.word	0x00003511
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000604 	.word	0x20000604
     a24:	43000800 	.word	0x43000800
     a28:	20001584 	.word	0x20001584
     a2c:	00003e21 	.word	0x00003e21
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200014d0 	.word	0x200014d0
     b30:	00003995 	.word	0x00003995
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	000033bd 	.word	0x000033bd

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	000041cd 	.word	0x000041cd
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4ba1      	ldr	r3, [pc, #644]	; (ea0 <system_init+0x28c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4ba1      	ldr	r3, [pc, #644]	; (ea4 <system_init+0x290>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	4e99      	ldr	r6, [pc, #612]	; (ea8 <system_init+0x294>)
     c44:	629e      	str	r6, [r3, #40]	; 0x28
     c46:	4999      	ldr	r1, [pc, #612]	; (eac <system_init+0x298>)
     c48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c62:	2180      	movs	r1, #128	; 0x80
     c64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c74:	4d8e      	ldr	r5, [pc, #568]	; (eb0 <system_init+0x29c>)
     c76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ca2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     caa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cbe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     cc6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     cca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cce:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     cde:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	4c74      	ldr	r4, [pc, #464]	; (eb4 <system_init+0x2a0>)
     ce4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ce8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     cf0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     cf4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d04:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0c:	f8df e22c 	ldr.w	lr, [pc, #556]	; f3c <system_init+0x328>
     d10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d20:	f045 0504 	orr.w	r5, r5, #4
     d24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     d60:	4a55      	ldr	r2, [pc, #340]	; (eb8 <system_init+0x2a4>)
     d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	494a      	ldr	r1, [pc, #296]	; (ebc <system_init+0x2a8>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4942      	ldr	r1, [pc, #264]	; (ec0 <system_init+0x2ac>)
     db6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd2:	4a3c      	ldr	r2, [pc, #240]	; (ec4 <system_init+0x2b0>)
     dd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     de4:	4b38      	ldr	r3, [pc, #224]	; (ec8 <system_init+0x2b4>)
     de6:	4798      	blx	r3
	ADC_1_init();
     de8:	4b38      	ldr	r3, [pc, #224]	; (ecc <system_init+0x2b8>)
     dea:	4798      	blx	r3

	CRC_0_init();
     dec:	4b38      	ldr	r3, [pc, #224]	; (ed0 <system_init+0x2bc>)
     dee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     df0:	4b38      	ldr	r3, [pc, #224]	; (ed4 <system_init+0x2c0>)
     df2:	4798      	blx	r3

	FLASH_0_init();
     df4:	4b38      	ldr	r3, [pc, #224]	; (ed8 <system_init+0x2c4>)
     df6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     df8:	4c38      	ldr	r4, [pc, #224]	; (edc <system_init+0x2c8>)
     dfa:	6963      	ldr	r3, [r4, #20]
     dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e00:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e02:	4b37      	ldr	r3, [pc, #220]	; (ee0 <system_init+0x2cc>)
     e04:	4798      	blx	r3
     e06:	4602      	mov	r2, r0
     e08:	4936      	ldr	r1, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0a:	4837      	ldr	r0, [pc, #220]	; (ee8 <system_init+0x2d4>)
     e0c:	4d37      	ldr	r5, [pc, #220]	; (eec <system_init+0x2d8>)
     e0e:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e10:	4b37      	ldr	r3, [pc, #220]	; (ef0 <system_init+0x2dc>)
     e12:	4798      	blx	r3
	USART_NORTH_init();
     e14:	4b37      	ldr	r3, [pc, #220]	; (ef4 <system_init+0x2e0>)
     e16:	4798      	blx	r3
	GRID_AUX_init();
     e18:	4b37      	ldr	r3, [pc, #220]	; (ef8 <system_init+0x2e4>)
     e1a:	4798      	blx	r3

	UI_SPI_init();
     e1c:	4b37      	ldr	r3, [pc, #220]	; (efc <system_init+0x2e8>)
     e1e:	4798      	blx	r3
	USART_WEST_init();
     e20:	4b37      	ldr	r3, [pc, #220]	; (f00 <system_init+0x2ec>)
     e22:	4798      	blx	r3

	SYS_I2C_init();
     e24:	4b37      	ldr	r3, [pc, #220]	; (f04 <system_init+0x2f0>)
     e26:	4798      	blx	r3
	USART_SOUTH_init();
     e28:	4b37      	ldr	r3, [pc, #220]	; (f08 <system_init+0x2f4>)
     e2a:	4798      	blx	r3

	GRID_LED_init();
     e2c:	4b37      	ldr	r3, [pc, #220]	; (f0c <system_init+0x2f8>)
     e2e:	4798      	blx	r3

	delay_driver_init();
     e30:	4b37      	ldr	r3, [pc, #220]	; (f10 <system_init+0x2fc>)
     e32:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e40:	f04f 0840 	mov.w	r8, #64	; 0x40
     e44:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e48:	4e32      	ldr	r6, [pc, #200]	; (f14 <system_init+0x300>)
     e4a:	47b0      	blx	r6
     e4c:	4602      	mov	r2, r0
     e4e:	4932      	ldr	r1, [pc, #200]	; (f18 <system_init+0x304>)
     e50:	4832      	ldr	r0, [pc, #200]	; (f1c <system_init+0x308>)
     e52:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e54:	6963      	ldr	r3, [r4, #20]
     e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e5a:	6163      	str	r3, [r4, #20]
     e5c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e60:	47b0      	blx	r6
     e62:	4602      	mov	r2, r0
     e64:	492e      	ldr	r1, [pc, #184]	; (f20 <system_init+0x30c>)
     e66:	482f      	ldr	r0, [pc, #188]	; (f24 <system_init+0x310>)
     e68:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e6a:	69a3      	ldr	r3, [r4, #24]
     e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e70:	61a3      	str	r3, [r4, #24]
     e72:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e76:	47b0      	blx	r6
     e78:	4602      	mov	r2, r0
     e7a:	492b      	ldr	r1, [pc, #172]	; (f28 <system_init+0x314>)
     e7c:	482b      	ldr	r0, [pc, #172]	; (f2c <system_init+0x318>)
     e7e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e80:	69a3      	ldr	r3, [r4, #24]
     e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e86:	61a3      	str	r3, [r4, #24]
     e88:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e8c:	47b0      	blx	r6
     e8e:	4602      	mov	r2, r0
     e90:	4927      	ldr	r1, [pc, #156]	; (f30 <system_init+0x31c>)
     e92:	4828      	ldr	r0, [pc, #160]	; (f34 <system_init+0x320>)
     e94:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e96:	4b28      	ldr	r3, [pc, #160]	; (f38 <system_init+0x324>)
     e98:	4798      	blx	r3
     e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e9e:	bf00      	nop
     ea0:	00004ac5 	.word	0x00004ac5
     ea4:	41008000 	.word	0x41008000
     ea8:	40020000 	.word	0x40020000
     eac:	c0020020 	.word	0xc0020020
     eb0:	c0020000 	.word	0xc0020000
     eb4:	40028000 	.word	0x40028000
     eb8:	c0020004 	.word	0xc0020004
     ebc:	c0000008 	.word	0xc0000008
     ec0:	c0000010 	.word	0xc0000010
     ec4:	c0000020 	.word	0xc0000020
     ec8:	00000381 	.word	0x00000381
     ecc:	00000419 	.word	0x00000419
     ed0:	000004bd 	.word	0x000004bd
     ed4:	000004e5 	.word	0x000004e5
     ed8:	00000529 	.word	0x00000529
     edc:	40000800 	.word	0x40000800
     ee0:	000052a9 	.word	0x000052a9
     ee4:	40002400 	.word	0x40002400
     ee8:	200012fc 	.word	0x200012fc
     eec:	00003b3d 	.word	0x00003b3d
     ef0:	000005b5 	.word	0x000005b5
     ef4:	00000659 	.word	0x00000659
     ef8:	000006fd 	.word	0x000006fd
     efc:	00000819 	.word	0x00000819
     f00:	000008ad 	.word	0x000008ad
     f04:	00000969 	.word	0x00000969
     f08:	000009fd 	.word	0x000009fd
     f0c:	00000b11 	.word	0x00000b11
     f10:	00000b39 	.word	0x00000b39
     f14:	00006aad 	.word	0x00006aad
     f18:	40003800 	.word	0x40003800
     f1c:	20001620 	.word	0x20001620
     f20:	40003c00 	.word	0x40003c00
     f24:	20001514 	.word	0x20001514
     f28:	4101a000 	.word	0x4101a000
     f2c:	2000131c 	.word	0x2000131c
     f30:	4101c000 	.word	0x4101c000
     f34:	20001600 	.word	0x20001600
     f38:	00000bf9 	.word	0x00000bf9
     f3c:	40020800 	.word	0x40020800

00000f40 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
     f40:	b538      	push	{r3, r4, r5, lr}
     f42:	4604      	mov	r4, r0
     f44:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
     f46:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
     f48:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
     f4a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
     f4c:	2300      	movs	r3, #0
     f4e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
     f50:	0048      	lsls	r0, r1, #1
     f52:	4b09      	ldr	r3, [pc, #36]	; (f78 <grid_ain_channel_init+0x38>)
     f54:	4798      	blx	r3
     f56:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     f58:	b14d      	cbz	r5, f6e <grid_ain_channel_init+0x2e>
     f5a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
     f5c:	4619      	mov	r1, r3
     f5e:	6822      	ldr	r2, [r4, #0]
     f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     f64:	3301      	adds	r3, #1
     f66:	b2db      	uxtb	r3, r3
     f68:	7922      	ldrb	r2, [r4, #4]
     f6a:	429a      	cmp	r2, r3
     f6c:	d8f7      	bhi.n	f5e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
     f6e:	2000      	movs	r0, #0
     f70:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
     f72:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
     f74:	bd38      	pop	{r3, r4, r5, pc}
     f76:	bf00      	nop
     f78:	0000a239 	.word	0x0000a239

00000f7c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
     f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f80:	4605      	mov	r5, r0
     f82:	460e      	mov	r6, r1
     f84:	4691      	mov	r9, r2
     f86:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
     f88:	4c0c      	ldr	r4, [pc, #48]	; (fbc <grid_ain_init+0x40>)
     f8a:	7020      	strb	r0, [r4, #0]
	ain_channel_buffer_depth = depth;
     f8c:	7061      	strb	r1, [r4, #1]
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
     f8e:	0100      	lsls	r0, r0, #4
     f90:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <grid_ain_init+0x44>)
     f92:	4798      	blx	r3
     f94:	6060      	str	r0, [r4, #4]

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
     f96:	b175      	cbz	r5, fb6 <grid_ain_init+0x3a>
     f98:	4604      	mov	r4, r0
     f9a:	3d01      	subs	r5, #1
     f9c:	b2ed      	uxtb	r5, r5
     f9e:	3501      	adds	r5, #1
     fa0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
     fa4:	4f07      	ldr	r7, [pc, #28]	; (fc4 <grid_ain_init+0x48>)
     fa6:	4643      	mov	r3, r8
     fa8:	464a      	mov	r2, r9
     faa:	4631      	mov	r1, r6
     fac:	4620      	mov	r0, r4
     fae:	47b8      	blx	r7
     fb0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
     fb2:	42ac      	cmp	r4, r5
     fb4:	d1f7      	bne.n	fa6 <grid_ain_init+0x2a>
	}

	return 0;
}
     fb6:	2000      	movs	r0, #0
     fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fbc:	20000614 	.word	0x20000614
     fc0:	0000a239 	.word	0x0000a239
     fc4:	00000f41 	.word	0x00000f41

00000fc8 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
     fc8:	b538      	push	{r3, r4, r5, lr}
     fca:	4604      	mov	r4, r0
     fcc:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
     fce:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
     fd0:	2300      	movs	r3, #0
     fd2:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
     fd4:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
     fd6:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
     fd8:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
     fda:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
     fdc:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
     fde:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
     fe0:	4608      	mov	r0, r1
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <grid_buffer_init+0x3c>)
     fe4:	4798      	blx	r3
     fe6:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
     fe8:	b900      	cbnz	r0, fec <grid_buffer_init+0x24>
     fea:	e7fe      	b.n	fea <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
     fec:	b145      	cbz	r5, 1000 <grid_buffer_init+0x38>
     fee:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
     ff0:	4619      	mov	r1, r3
     ff2:	6862      	ldr	r2, [r4, #4]
     ff4:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
     ff6:	3301      	adds	r3, #1
     ff8:	b29b      	uxth	r3, r3
     ffa:	8822      	ldrh	r2, [r4, #0]
     ffc:	429a      	cmp	r2, r3
     ffe:	d8f8      	bhi.n	ff2 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1000:	2001      	movs	r0, #1
    1002:	bd38      	pop	{r3, r4, r5, pc}
    1004:	0000a239 	.word	0x0000a239

00001008 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1008:	8903      	ldrh	r3, [r0, #8]
    100a:	8a02      	ldrh	r2, [r0, #16]
    100c:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    100e:	bf8f      	iteee	hi
    1010:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1012:	8800      	ldrhls	r0, [r0, #0]
    1014:	18c0      	addls	r0, r0, r3
    1016:	1a80      	subls	r0, r0, r2
    1018:	b280      	uxth	r0, r0

	return space;

	
	
}
    101a:	4770      	bx	lr

0000101c <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    101c:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    101e:	8903      	ldrh	r3, [r0, #8]
    1020:	8a02      	ldrh	r2, [r0, #16]
    1022:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1024:	bf9c      	itt	ls
    1026:	8804      	ldrhls	r4, [r0, #0]
    1028:	191b      	addls	r3, r3, r4
    102a:	1a9b      	subs	r3, r3, r2
    102c:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    102e:	428b      	cmp	r3, r1
    1030:	d90a      	bls.n	1048 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    1032:	440a      	add	r2, r1
    1034:	8804      	ldrh	r4, [r0, #0]
    1036:	fb92 f3f4 	sdiv	r3, r2, r4
    103a:	fb04 2213 	mls	r2, r4, r3, r2
    103e:	8242      	strh	r2, [r0, #18]
		
		return length;
    1040:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    1042:	f85d 4b04 	ldr.w	r4, [sp], #4
    1046:	4770      	bx	lr
		return 0; // failed
    1048:	2000      	movs	r0, #0
    104a:	e7fa      	b.n	1042 <grid_buffer_write_init+0x26>

0000104c <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    104c:	8a83      	ldrh	r3, [r0, #20]
    104e:	6842      	ldr	r2, [r0, #4]
    1050:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    1052:	8a83      	ldrh	r3, [r0, #20]
    1054:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    1056:	b29b      	uxth	r3, r3
    1058:	8801      	ldrh	r1, [r0, #0]
    105a:	fbb3 f2f1 	udiv	r2, r3, r1
    105e:	fb01 3312 	mls	r3, r1, r2, r3
    1062:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    1064:	2001      	movs	r0, #1
    1066:	4770      	bx	lr

00001068 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    1068:	8a83      	ldrh	r3, [r0, #20]
    106a:	8a42      	ldrh	r2, [r0, #18]
    106c:	429a      	cmp	r2, r3
    106e:	d000      	beq.n	1072 <grid_buffer_write_acknowledge+0xa>
    1070:	e7fe      	b.n	1070 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    1072:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    1074:	2001      	movs	r0, #1
    1076:	4770      	bx	lr

00001078 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1078:	8983      	ldrh	r3, [r0, #12]
    107a:	8942      	ldrh	r2, [r0, #10]
    107c:	429a      	cmp	r2, r3
    107e:	d000      	beq.n	1082 <grid_buffer_read_size+0xa>
    1080:	e7fe      	b.n	1080 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1082:	8902      	ldrh	r2, [r0, #8]
    1084:	429a      	cmp	r2, r3
    1086:	d000      	beq.n	108a <grid_buffer_read_size+0x12>
    1088:	e7fe      	b.n	1088 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    108a:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    108c:	8a05      	ldrh	r5, [r0, #16]
    108e:	42ab      	cmp	r3, r5
    1090:	d025      	beq.n	10de <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1092:	8804      	ldrh	r4, [r0, #0]
    1094:	b1fc      	cbz	r4, 10d6 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1096:	4626      	mov	r6, r4
    1098:	fb93 f2f4 	sdiv	r2, r3, r4
    109c:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    10a0:	b291      	uxth	r1, r2
    10a2:	428d      	cmp	r5, r1
    10a4:	d01d      	beq.n	10e2 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    10a6:	6840      	ldr	r0, [r0, #4]
    10a8:	5c42      	ldrb	r2, [r0, r1]
    10aa:	2a0a      	cmp	r2, #10
    10ac:	d114      	bne.n	10d8 <grid_buffer_read_size+0x60>
    10ae:	2300      	movs	r3, #0
						
			return i+1; // packet length
    10b0:	3301      	adds	r3, #1
    10b2:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    10b4:	bcf0      	pop	{r4, r5, r6, r7}
    10b6:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    10b8:	fb92 f1f6 	sdiv	r1, r2, r6
    10bc:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    10c0:	b28f      	uxth	r7, r1
    10c2:	42bd      	cmp	r5, r7
    10c4:	d00f      	beq.n	10e6 <grid_buffer_read_size+0x6e>
    10c6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    10c8:	5dc1      	ldrb	r1, [r0, r7]
    10ca:	290a      	cmp	r1, #10
    10cc:	d0f0      	beq.n	10b0 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    10ce:	3301      	adds	r3, #1
    10d0:	b29b      	uxth	r3, r3
    10d2:	42a3      	cmp	r3, r4
    10d4:	d1f0      	bne.n	10b8 <grid_buffer_read_size+0x40>
    10d6:	e7fe      	b.n	10d6 <grid_buffer_read_size+0x5e>
    10d8:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    10da:	2300      	movs	r3, #0
    10dc:	e7f7      	b.n	10ce <grid_buffer_read_size+0x56>
		return 0;
    10de:	2000      	movs	r0, #0
    10e0:	e7e8      	b.n	10b4 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    10e2:	2000      	movs	r0, #0
    10e4:	e7e6      	b.n	10b4 <grid_buffer_read_size+0x3c>
    10e6:	2000      	movs	r0, #0
    10e8:	e7e4      	b.n	10b4 <grid_buffer_read_size+0x3c>

000010ea <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    10ea:	8982      	ldrh	r2, [r0, #12]
    10ec:	8943      	ldrh	r3, [r0, #10]
    10ee:	4293      	cmp	r3, r2
    10f0:	d000      	beq.n	10f4 <grid_buffer_read_init+0xa>
    10f2:	e7fe      	b.n	10f2 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    10f4:	8903      	ldrh	r3, [r0, #8]
    10f6:	4293      	cmp	r3, r2
    10f8:	d000      	beq.n	10fc <grid_buffer_read_init+0x12>
    10fa:	e7fe      	b.n	10fa <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    10fe:	8a05      	ldrh	r5, [r0, #16]
    1100:	42aa      	cmp	r2, r5
    1102:	d031      	beq.n	1168 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1104:	8804      	ldrh	r4, [r0, #0]
    1106:	b35c      	cbz	r4, 1160 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1108:	4626      	mov	r6, r4
    110a:	fb92 f3f4 	sdiv	r3, r2, r4
    110e:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1112:	b299      	uxth	r1, r3
    1114:	428d      	cmp	r5, r1
    1116:	d029      	beq.n	116c <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1118:	6847      	ldr	r7, [r0, #4]
    111a:	460b      	mov	r3, r1
    111c:	5c79      	ldrb	r1, [r7, r1]
    111e:	290a      	cmp	r1, #10
    1120:	d11f      	bne.n	1162 <grid_buffer_read_init+0x78>
    1122:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    1124:	3301      	adds	r3, #1
    1126:	fb93 f2f4 	sdiv	r2, r3, r4
    112a:	fb04 3312 	mls	r3, r4, r2, r3
    112e:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1130:	1c4b      	adds	r3, r1, #1
    1132:	b29b      	uxth	r3, r3
    1134:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1136:	4618      	mov	r0, r3
    1138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    113a:	fb92 f3f6 	sdiv	r3, r2, r6
    113e:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    1142:	fa1f fe83 	uxth.w	lr, r3
    1146:	4575      	cmp	r5, lr
    1148:	d012      	beq.n	1170 <grid_buffer_read_init+0x86>
    114a:	4673      	mov	r3, lr
    114c:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    114e:	f817 e00e 	ldrb.w	lr, [r7, lr]
    1152:	f1be 0f0a 	cmp.w	lr, #10
    1156:	d0e5      	beq.n	1124 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1158:	3101      	adds	r1, #1
    115a:	b289      	uxth	r1, r1
    115c:	42a1      	cmp	r1, r4
    115e:	d1ec      	bne.n	113a <grid_buffer_read_init+0x50>
    1160:	e7fe      	b.n	1160 <grid_buffer_read_init+0x76>
    1162:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1164:	2100      	movs	r1, #0
    1166:	e7f7      	b.n	1158 <grid_buffer_read_init+0x6e>
		return 0;
    1168:	2300      	movs	r3, #0
    116a:	e7e4      	b.n	1136 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    116c:	2300      	movs	r3, #0
    116e:	e7e2      	b.n	1136 <grid_buffer_read_init+0x4c>
    1170:	2300      	movs	r3, #0
    1172:	e7e0      	b.n	1136 <grid_buffer_read_init+0x4c>

00001174 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    1174:	8983      	ldrh	r3, [r0, #12]
    1176:	8941      	ldrh	r1, [r0, #10]
    1178:	4299      	cmp	r1, r3
    117a:	d00e      	beq.n	119a <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    117c:	b410      	push	{r4}
    117e:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1180:	6841      	ldr	r1, [r0, #4]
    1182:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1184:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    1186:	b29b      	uxth	r3, r3
    1188:	8814      	ldrh	r4, [r2, #0]
    118a:	fbb3 f1f4 	udiv	r1, r3, r4
    118e:	fb04 3311 	mls	r3, r4, r1, r3
    1192:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1194:	f85d 4b04 	ldr.w	r4, [sp], #4
    1198:	4770      	bx	lr
    119a:	e7fe      	b.n	119a <grid_buffer_read_character+0x26>

0000119c <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    119c:	8983      	ldrh	r3, [r0, #12]
    119e:	8942      	ldrh	r2, [r0, #10]
    11a0:	429a      	cmp	r2, r3
    11a2:	d000      	beq.n	11a6 <grid_buffer_read_acknowledge+0xa>
    11a4:	e7fe      	b.n	11a4 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    11a6:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    11a8:	2001      	movs	r0, #1
    11aa:	4770      	bx	lr

000011ac <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    11ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11b0:	4604      	mov	r4, r0
    11b2:	4691      	mov	r9, r2
    11b4:	4698      	mov	r8, r3
    11b6:	f89d 6020 	ldrb.w	r6, [sp, #32]
    11ba:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    11be:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    11c2:	4f23      	ldr	r7, [pc, #140]	; (1250 <grid_port_init+0xa4>)
    11c4:	47b8      	blx	r7
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    11c6:	4649      	mov	r1, r9
    11c8:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    11cc:	47b8      	blx	r7
	
	por->dma_channel = dma;
    11ce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    11d2:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    11d4:	7165      	strb	r5, [r4, #5]
	
	por->usart	= usart;
    11d6:	f8c4 8000 	str.w	r8, [r4]
	por->type		= type;
    11da:	7126      	strb	r6, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    11dc:	2300      	movs	r3, #0
    11de:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    11e0:	82e3      	strh	r3, [r4, #22]
	
	
	por->partner_fi = 0;
    11e2:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
	
	por->partner_hwcfg = 0;
    11e6:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	por->partner_status = 1;
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    11ea:	2e01      	cmp	r6, #1
    11ec:	d004      	beq.n	11f8 <grid_port_init+0x4c>
	por->partner_status = 1;
    11ee:	2301      	movs	r3, #1
    11f0:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
    11f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		por->partner_status = 0;
    11f8:	2300      	movs	r3, #0
    11fa:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
		por->partner_fi = 0;
		
		
		if (por->direction == GRID_MSG_NORTH){
    11fe:	2d11      	cmp	r5, #17
    1200:	d007      	beq.n	1212 <grid_port_init+0x66>
			por->dx = 0;
			por->dy = 1;
		}
		else if (por->direction == GRID_MSG_EAST){
    1202:	2d12      	cmp	r5, #18
    1204:	d00c      	beq.n	1220 <grid_port_init+0x74>
			por->dx = 1;
			por->dy = 0;
		}
		else if (por->direction == GRID_MSG_SOUTH){
    1206:	2d13      	cmp	r5, #19
    1208:	d012      	beq.n	1230 <grid_port_init+0x84>
			por->dx = 0;
			por->dy = -1;
		}
		else if (por->direction == GRID_MSG_WEST){
    120a:	2d14      	cmp	r5, #20
    120c:	d018      	beq.n	1240 <grid_port_init+0x94>
    120e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    1212:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 1;
    1216:	2301      	movs	r3, #1
    1218:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    121c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 1;
    1220:	2301      	movs	r3, #1
    1222:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1226:	2300      	movs	r3, #0
    1228:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    1230:	2300      	movs	r3, #0
    1232:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = -1;
    1236:	23ff      	movs	r3, #255	; 0xff
    1238:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    123c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = -1;
    1240:	23ff      	movs	r3, #255	; 0xff
    1242:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1246:	2300      	movs	r3, #0
    1248:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    124c:	e7df      	b.n	120e <grid_port_init+0x62>
    124e:	bf00      	nop
    1250:	00000fc9 	.word	0x00000fc9

00001254 <grid_port_init_all>:

void grid_port_init_all(){
    1254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1258:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    125a:	2600      	movs	r6, #0
    125c:	9602      	str	r6, [sp, #8]
    125e:	2311      	movs	r3, #17
    1260:	9301      	str	r3, [sp, #4]
    1262:	2401      	movs	r4, #1
    1264:	9400      	str	r4, [sp, #0]
    1266:	4b25      	ldr	r3, [pc, #148]	; (12fc <grid_port_init_all+0xa8>)
    1268:	f44f 7248 	mov.w	r2, #800	; 0x320
    126c:	4611      	mov	r1, r2
    126e:	4824      	ldr	r0, [pc, #144]	; (1300 <grid_port_init_all+0xac>)
    1270:	4d24      	ldr	r5, [pc, #144]	; (1304 <grid_port_init_all+0xb0>)
    1272:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1274:	9402      	str	r4, [sp, #8]
    1276:	2312      	movs	r3, #18
    1278:	9301      	str	r3, [sp, #4]
    127a:	9400      	str	r4, [sp, #0]
    127c:	4b22      	ldr	r3, [pc, #136]	; (1308 <grid_port_init_all+0xb4>)
    127e:	f44f 7248 	mov.w	r2, #800	; 0x320
    1282:	4611      	mov	r1, r2
    1284:	4821      	ldr	r0, [pc, #132]	; (130c <grid_port_init_all+0xb8>)
    1286:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    1288:	f04f 0902 	mov.w	r9, #2
    128c:	f8cd 9008 	str.w	r9, [sp, #8]
    1290:	2313      	movs	r3, #19
    1292:	9301      	str	r3, [sp, #4]
    1294:	9400      	str	r4, [sp, #0]
    1296:	4b1e      	ldr	r3, [pc, #120]	; (1310 <grid_port_init_all+0xbc>)
    1298:	f44f 7248 	mov.w	r2, #800	; 0x320
    129c:	4611      	mov	r1, r2
    129e:	481d      	ldr	r0, [pc, #116]	; (1314 <grid_port_init_all+0xc0>)
    12a0:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    12a2:	2703      	movs	r7, #3
    12a4:	9702      	str	r7, [sp, #8]
    12a6:	2314      	movs	r3, #20
    12a8:	9301      	str	r3, [sp, #4]
    12aa:	9400      	str	r4, [sp, #0]
    12ac:	4b1a      	ldr	r3, [pc, #104]	; (1318 <grid_port_init_all+0xc4>)
    12ae:	f44f 7248 	mov.w	r2, #800	; 0x320
    12b2:	4611      	mov	r1, r2
    12b4:	4819      	ldr	r0, [pc, #100]	; (131c <grid_port_init_all+0xc8>)
    12b6:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    12b8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1324 <grid_port_init_all+0xd0>
    12bc:	f04f 0aff 	mov.w	sl, #255	; 0xff
    12c0:	f8cd a008 	str.w	sl, [sp, #8]
    12c4:	9601      	str	r6, [sp, #4]
    12c6:	9700      	str	r7, [sp, #0]
    12c8:	4633      	mov	r3, r6
    12ca:	f44f 7248 	mov.w	r2, #800	; 0x320
    12ce:	4611      	mov	r1, r2
    12d0:	4640      	mov	r0, r8
    12d2:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    12d4:	4f12      	ldr	r7, [pc, #72]	; (1320 <grid_port_init_all+0xcc>)
    12d6:	f8cd a008 	str.w	sl, [sp, #8]
    12da:	9601      	str	r6, [sp, #4]
    12dc:	f8cd 9000 	str.w	r9, [sp]
    12e0:	4633      	mov	r3, r6
    12e2:	f44f 7248 	mov.w	r2, #800	; 0x320
    12e6:	4611      	mov	r1, r2
    12e8:	4638      	mov	r0, r7
    12ea:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    12ec:	f888 41e3 	strb.w	r4, [r8, #483]	; 0x1e3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    12f0:	f887 41e3 	strb.w	r4, [r7, #483]	; 0x1e3
	
	
}
    12f4:	b004      	add	sp, #16
    12f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12fa:	bf00      	nop
    12fc:	20001480 	.word	0x20001480
    1300:	20001640 	.word	0x20001640
    1304:	000011ad 	.word	0x000011ad
    1308:	20001430 	.word	0x20001430
    130c:	200021d8 	.word	0x200021d8
    1310:	20001584 	.word	0x20001584
    1314:	20001e0c 	.word	0x20001e0c
    1318:	20001534 	.word	0x20001534
    131c:	20001c24 	.word	0x20001c24
    1320:	20001ff4 	.word	0x20001ff4
    1324:	20001824 	.word	0x20001824

00001328 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    1328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    132c:	b08f      	sub	sp, #60	; 0x3c
    132e:	af00      	add	r7, sp, #0
    1330:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    1332:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
    1336:	4648      	mov	r0, r9
    1338:	4b4f      	ldr	r3, [pc, #316]	; (1478 <grid_port_process_inbound+0x150>)
    133a:	4798      	blx	r3
	
	if (!packet_size){
    133c:	b920      	cbnz	r0, 1348 <grid_port_process_inbound+0x20>
    133e:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1340:	373c      	adds	r7, #60	; 0x3c
    1342:	46bd      	mov	sp, r7
    1344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1348:	4680      	mov	r8, r0
	}else{
    134a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    134e:	4b4b      	ldr	r3, [pc, #300]	; (147c <grid_port_process_inbound+0x154>)
    1350:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    1352:	4b4b      	ldr	r3, [pc, #300]	; (1480 <grid_port_process_inbound+0x158>)
    1354:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    1356:	4b4b      	ldr	r3, [pc, #300]	; (1484 <grid_port_process_inbound+0x15c>)
    1358:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    135a:	4b4b      	ldr	r3, [pc, #300]	; (1488 <grid_port_process_inbound+0x160>)
    135c:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    135e:	4b4b      	ldr	r3, [pc, #300]	; (148c <grid_port_process_inbound+0x164>)
    1360:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    1362:	4b4b      	ldr	r3, [pc, #300]	; (1490 <grid_port_process_inbound+0x168>)
    1364:	61fb      	str	r3, [r7, #28]
    1366:	f107 0308 	add.w	r3, r7, #8
    136a:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    136e:	2600      	movs	r6, #0
    1370:	e001      	b.n	1376 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1372:	428b      	cmp	r3, r1
    1374:	d00e      	beq.n	1394 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    1376:	f853 2b04 	ldr.w	r2, [r3], #4
    137a:	f892 01e3 	ldrb.w	r0, [r2, #483]	; 0x1e3
    137e:	2800      	cmp	r0, #0
    1380:	d0f7      	beq.n	1372 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1382:	f107 0038 	add.w	r0, r7, #56	; 0x38
    1386:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    138a:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    138e:	3601      	adds	r6, #1
    1390:	b2f6      	uxtb	r6, r6
    1392:	e7ee      	b.n	1372 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1394:	2e00      	cmp	r6, #0
    1396:	d05d      	beq.n	1454 <grid_port_process_inbound+0x12c>
    1398:	f107 0a20 	add.w	sl, r7, #32
    139c:	1e74      	subs	r4, r6, #1
    139e:	b2e4      	uxtb	r4, r4
    13a0:	3401      	adds	r4, #1
    13a2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    13a6:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    13a8:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 14a8 <grid_port_process_inbound+0x180>
    13ac:	e001      	b.n	13b2 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    13ae:	42a5      	cmp	r5, r4
    13b0:	d00c      	beq.n	13cc <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    13b2:	f855 0b04 	ldr.w	r0, [r5], #4
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	4283      	cmp	r3, r0
    13ba:	d0f8      	beq.n	13ae <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    13bc:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    13c0:	47d8      	blx	fp
    13c2:	4580      	cmp	r8, r0
    13c4:	d9f3      	bls.n	13ae <grid_port_process_inbound+0x86>
    13c6:	f8d7 d000 	ldr.w	sp, [r7]
    13ca:	e7b8      	b.n	133e <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    13cc:	4648      	mov	r0, r9
    13ce:	4b31      	ldr	r3, [pc, #196]	; (1494 <grid_port_process_inbound+0x16c>)
    13d0:	4798      	blx	r3
    13d2:	4580      	cmp	r8, r0
    13d4:	d000      	beq.n	13d8 <grid_port_process_inbound+0xb0>
    13d6:	e7fe      	b.n	13d6 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    13d8:	4c2f      	ldr	r4, [pc, #188]	; (1498 <grid_port_process_inbound+0x170>)
    13da:	e001      	b.n	13e0 <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    13dc:	45aa      	cmp	sl, r5
    13de:	d03e      	beq.n	145e <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    13e0:	f85a 0b04 	ldr.w	r0, [sl], #4
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	4283      	cmp	r3, r0
    13e8:	d0f8      	beq.n	13dc <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    13ea:	4641      	mov	r1, r8
    13ec:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    13f0:	47a0      	blx	r4
    13f2:	e7f3      	b.n	13dc <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    13f4:	42a5      	cmp	r5, r4
    13f6:	d009      	beq.n	140c <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    13f8:	f854 0b04 	ldr.w	r0, [r4], #4
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	4283      	cmp	r3, r0
    1400:	d0f8      	beq.n	13f4 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1402:	6839      	ldr	r1, [r7, #0]
    1404:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1408:	47d8      	blx	fp
    140a:	e7f3      	b.n	13f4 <grid_port_process_inbound+0xcc>
    140c:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    1410:	fa1f f38a 	uxth.w	r3, sl
    1414:	4543      	cmp	r3, r8
    1416:	d208      	bcs.n	142a <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1418:	4648      	mov	r0, r9
    141a:	4b20      	ldr	r3, [pc, #128]	; (149c <grid_port_process_inbound+0x174>)
    141c:	4798      	blx	r3
    141e:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    1420:	2e00      	cmp	r6, #0
    1422:	d0f3      	beq.n	140c <grid_port_process_inbound+0xe4>
    1424:	f107 0420 	add.w	r4, r7, #32
    1428:	e7e6      	b.n	13f8 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    142a:	4648      	mov	r0, r9
    142c:	4b1c      	ldr	r3, [pc, #112]	; (14a0 <grid_port_process_inbound+0x178>)
    142e:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1430:	2e00      	cmp	r6, #0
    1432:	d085      	beq.n	1340 <grid_port_process_inbound+0x18>
    1434:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1438:	4e1a      	ldr	r6, [pc, #104]	; (14a4 <grid_port_process_inbound+0x17c>)
    143a:	e002      	b.n	1442 <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    143c:	42a5      	cmp	r5, r4
    143e:	f43f af7f 	beq.w	1340 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    1442:	f854 0b04 	ldr.w	r0, [r4], #4
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	4283      	cmp	r3, r0
    144a:	d0f7      	beq.n	143c <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    144c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1450:	47b0      	blx	r6
    1452:	e7f3      	b.n	143c <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1454:	4648      	mov	r0, r9
    1456:	4b0f      	ldr	r3, [pc, #60]	; (1494 <grid_port_process_inbound+0x16c>)
    1458:	4798      	blx	r3
    145a:	4540      	cmp	r0, r8
    145c:	d1bb      	bne.n	13d6 <grid_port_process_inbound+0xae>
    145e:	1e75      	subs	r5, r6, #1
    1460:	b2ed      	uxtb	r5, r5
    1462:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1466:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    146a:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    146c:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1470:	f8df b038 	ldr.w	fp, [pc, #56]	; 14ac <grid_port_process_inbound+0x184>
    1474:	e7d0      	b.n	1418 <grid_port_process_inbound+0xf0>
    1476:	bf00      	nop
    1478:	00001079 	.word	0x00001079
    147c:	20001640 	.word	0x20001640
    1480:	200021d8 	.word	0x200021d8
    1484:	20001e0c 	.word	0x20001e0c
    1488:	20001c24 	.word	0x20001c24
    148c:	20001824 	.word	0x20001824
    1490:	20001ff4 	.word	0x20001ff4
    1494:	000010eb 	.word	0x000010eb
    1498:	0000101d 	.word	0x0000101d
    149c:	00001175 	.word	0x00001175
    14a0:	0000119d 	.word	0x0000119d
    14a4:	00001069 	.word	0x00001069
    14a8:	00001009 	.word	0x00001009
    14ac:	0000104d 	.word	0x0000104d

000014b0 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    14b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b4:	b09b      	sub	sp, #108	; 0x6c
    14b6:	af06      	add	r7, sp, #24
    14b8:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    14ba:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    14be:	4630      	mov	r0, r6
    14c0:	4b8b      	ldr	r3, [pc, #556]	; (16f0 <grid_port_process_outbound_usb+0x240>)
    14c2:	4798      	blx	r3
	
	if (!length){		
    14c4:	b918      	cbnz	r0, 14ce <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    14c6:	3754      	adds	r7, #84	; 0x54
    14c8:	46bd      	mov	sp, r7
    14ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ce:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    14d0:	4630      	mov	r0, r6
    14d2:	4b88      	ldr	r3, [pc, #544]	; (16f4 <grid_port_process_outbound_usb+0x244>)
    14d4:	4798      	blx	r3
    14d6:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    14d8:	f8df 9254 	ldr.w	r9, [pc, #596]	; 1730 <grid_port_process_outbound_usb+0x280>
    14dc:	f8df 821c 	ldr.w	r8, [pc, #540]	; 16fc <grid_port_process_outbound_usb+0x24c>
    14e0:	4630      	mov	r0, r6
    14e2:	47c8      	blx	r9
    14e4:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    14e8:	3501      	adds	r5, #1
    14ea:	b2ed      	uxtb	r5, r5
    14ec:	b2ab      	uxth	r3, r5
    14ee:	429c      	cmp	r4, r3
    14f0:	d8f6      	bhi.n	14e0 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    14f2:	4630      	mov	r0, r6
    14f4:	4b80      	ldr	r3, [pc, #512]	; (16f8 <grid_port_process_outbound_usb+0x248>)
    14f6:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    14f8:	4d80      	ldr	r5, [pc, #512]	; (16fc <grid_port_process_outbound_usb+0x24c>)
    14fa:	4628      	mov	r0, r5
    14fc:	4b80      	ldr	r3, [pc, #512]	; (1700 <grid_port_process_outbound_usb+0x250>)
    14fe:	4798      	blx	r3
    1500:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1502:	4628      	mov	r0, r5
    1504:	4b7f      	ldr	r3, [pc, #508]	; (1704 <grid_port_process_outbound_usb+0x254>)
    1506:	4798      	blx	r3
    1508:	387f      	subs	r0, #127	; 0x7f
    150a:	b243      	sxtb	r3, r0
    150c:	461e      	mov	r6, r3
    150e:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1510:	4628      	mov	r0, r5
    1512:	4b7d      	ldr	r3, [pc, #500]	; (1708 <grid_port_process_outbound_usb+0x258>)
    1514:	4798      	blx	r3
    1516:	387f      	subs	r0, #127	; 0x7f
    1518:	b243      	sxtb	r3, r0
    151a:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    151c:	4628      	mov	r0, r5
    151e:	4b7b      	ldr	r3, [pc, #492]	; (170c <grid_port_process_outbound_usb+0x25c>)
    1520:	4798      	blx	r3
    1522:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    1524:	2500      	movs	r5, #0
    1526:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy)%16;
    152a:	69bb      	ldr	r3, [r7, #24]
    152c:	633b      	str	r3, [r7, #48]	; 0x30
    152e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
    1532:	1aea      	subs	r2, r5, r3
    1534:	f003 030f 	and.w	r3, r3, #15
    1538:	f002 020f 	and.w	r2, r2, #15
    153c:	bf58      	it	pl
    153e:	4253      	negpl	r3, r2
    1540:	b2db      	uxtb	r3, r3
    1542:	461a      	mov	r2, r3
    1544:	623b      	str	r3, [r7, #32]
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1546:	62fe      	str	r6, [r7, #44]	; 0x2c
    1548:	0133      	lsls	r3, r6, #4
    154a:	61fb      	str	r3, [r7, #28]
    154c:	627a      	str	r2, [r7, #36]	; 0x24
    154e:	1e63      	subs	r3, r4, #1
    1550:	b29b      	uxth	r3, r3
    1552:	f103 0a01 	add.w	sl, r3, #1
    1556:	46ab      	mov	fp, r5
    1558:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    155a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 16fc <grid_port_process_outbound_usb+0x24c>
    155e:	e006      	b.n	156e <grid_port_process_outbound_usb+0xbe>
				current_start = i;
    1560:	fa5f f58b 	uxtb.w	r5, fp
    1564:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1568:	45d3      	cmp	fp, sl
    156a:	f000 817b 	beq.w	1864 <grid_port_process_outbound_usb+0x3b4>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    156e:	f819 300b 	ldrb.w	r3, [r9, fp]
    1572:	b2db      	uxtb	r3, r3
    1574:	2b02      	cmp	r3, #2
    1576:	d0f3      	beq.n	1560 <grid_port_process_outbound_usb+0xb0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1578:	f819 300b 	ldrb.w	r3, [r9, fp]
    157c:	b2db      	uxtb	r3, r3
    157e:	2b03      	cmp	r3, #3
    1580:	d1f0      	bne.n	1564 <grid_port_process_outbound_usb+0xb4>
    1582:	2d00      	cmp	r5, #0
    1584:	d0ee      	beq.n	1564 <grid_port_process_outbound_usb+0xb4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1586:	462c      	mov	r4, r5
    1588:	1c68      	adds	r0, r5, #1
    158a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    158e:	2102      	movs	r1, #2
    1590:	4448      	add	r0, r9
    1592:	4b5f      	ldr	r3, [pc, #380]	; (1710 <grid_port_process_outbound_usb+0x260>)
    1594:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1596:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    159a:	d01b      	beq.n	15d4 <grid_port_process_outbound_usb+0x124>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    159c:	2e03      	cmp	r6, #3
    159e:	d071      	beq.n	1684 <grid_port_process_outbound_usb+0x1d4>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    15a0:	2e01      	cmp	r6, #1
    15a2:	f000 80c7 	beq.w	1734 <grid_port_process_outbound_usb+0x284>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    15a6:	2e02      	cmp	r6, #2
    15a8:	f000 815a 	beq.w	1860 <grid_port_process_outbound_usb+0x3b0>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    15ac:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    15ae:	f105 041c 	add.w	r4, r5, #28
    15b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15b4:	441c      	add	r4, r3
    15b6:	b2c2      	uxtb	r2, r0
    15b8:	4956      	ldr	r1, [pc, #344]	; (1714 <grid_port_process_outbound_usb+0x264>)
    15ba:	4620      	mov	r0, r4
    15bc:	4b56      	ldr	r3, [pc, #344]	; (1718 <grid_port_process_outbound_usb+0x268>)
    15be:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    15c0:	4620      	mov	r0, r4
    15c2:	4b56      	ldr	r3, [pc, #344]	; (171c <grid_port_process_outbound_usb+0x26c>)
    15c4:	4798      	blx	r3
    15c6:	eb05 0800 	add.w	r8, r5, r0
    15ca:	fa5f f388 	uxtb.w	r3, r8
    15ce:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    15d0:	2500      	movs	r5, #0
    15d2:	e7c7      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    15d4:	1ce8      	adds	r0, r5, #3
    15d6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    15da:	2102      	movs	r1, #2
    15dc:	4448      	add	r0, r9
    15de:	4b4c      	ldr	r3, [pc, #304]	; (1710 <grid_port_process_outbound_usb+0x260>)
    15e0:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    15e2:	1d68      	adds	r0, r5, #5
    15e4:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    15e8:	2102      	movs	r1, #2
    15ea:	4448      	add	r0, r9
    15ec:	4b48      	ldr	r3, [pc, #288]	; (1710 <grid_port_process_outbound_usb+0x260>)
    15ee:	4798      	blx	r3
    15f0:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    15f4:	1de8      	adds	r0, r5, #7
    15f6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    15fa:	2102      	movs	r1, #2
    15fc:	4448      	add	r0, r9
    15fe:	4b44      	ldr	r3, [pc, #272]	; (1710 <grid_port_process_outbound_usb+0x260>)
    1600:	4798      	blx	r3
    1602:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1604:	f105 0009 	add.w	r0, r5, #9
    1608:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    160c:	2102      	movs	r1, #2
    160e:	4448      	add	r0, r9
    1610:	4b3f      	ldr	r3, [pc, #252]	; (1710 <grid_port_process_outbound_usb+0x260>)
    1612:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1616:	331c      	adds	r3, #28
    1618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    161a:	441a      	add	r2, r3
    161c:	4615      	mov	r5, r2
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    161e:	b2e4      	uxtb	r4, r4
    1620:	3440      	adds	r4, #64	; 0x40
    1622:	69f9      	ldr	r1, [r7, #28]
    1624:	440c      	add	r4, r1
    1626:	4263      	negs	r3, r4
    1628:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    162c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1630:	bf58      	it	pl
    1632:	425c      	negpl	r4, r3
    1634:	b2e4      	uxtb	r4, r4
    1636:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1638:	63fb      	str	r3, [r7, #60]	; 0x3c
    163a:	9305      	str	r3, [sp, #20]
    163c:	9404      	str	r4, [sp, #16]
    163e:	f8cd 800c 	str.w	r8, [sp, #12]
    1642:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1644:	9102      	str	r1, [sp, #8]
    1646:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    164a:	9301      	str	r3, [sp, #4]
    164c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    164e:	9100      	str	r1, [sp, #0]
    1650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1652:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    1656:	4932      	ldr	r1, [pc, #200]	; (1720 <grid_port_process_outbound_usb+0x270>)
    1658:	62bd      	str	r5, [r7, #40]	; 0x28
    165a:	4628      	mov	r0, r5
    165c:	4d2e      	ldr	r5, [pc, #184]	; (1718 <grid_port_process_outbound_usb+0x268>)
    165e:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1662:	4b2e      	ldr	r3, [pc, #184]	; (171c <grid_port_process_outbound_usb+0x26c>)
    1664:	4798      	blx	r3
    1666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1668:	4418      	add	r0, r3
    166a:	b2c3      	uxtb	r3, r0
    166c:	647b      	str	r3, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    166e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1670:	4622      	mov	r2, r4
    1672:	6a39      	ldr	r1, [r7, #32]
    1674:	ea48 0101 	orr.w	r1, r8, r1
    1678:	ea4f 1018 	mov.w	r0, r8, lsr #4
    167c:	4c29      	ldr	r4, [pc, #164]	; (1724 <grid_port_process_outbound_usb+0x274>)
    167e:	47a0      	blx	r4
				current_start = 0;
    1680:	4635      	mov	r5, r6
    1682:	e76f      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
					if (dx == 0 && dy == 0){
    1684:	697b      	ldr	r3, [r7, #20]
    1686:	2b00      	cmp	r3, #0
    1688:	f040 80e8 	bne.w	185c <grid_port_process_outbound_usb+0x3ac>
    168c:	69bb      	ldr	r3, [r7, #24]
    168e:	b10b      	cbz	r3, 1694 <grid_port_process_outbound_usb+0x1e4>
				current_start = 0;
    1690:	2500      	movs	r5, #0
    1692:	e767      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1694:	1ce8      	adds	r0, r5, #3
    1696:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    169a:	2102      	movs	r1, #2
    169c:	4448      	add	r0, r9
    169e:	4b1c      	ldr	r3, [pc, #112]	; (1710 <grid_port_process_outbound_usb+0x260>)
    16a0:	4798      	blx	r3
    16a2:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    16a4:	1d68      	adds	r0, r5, #5
    16a6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    16aa:	2102      	movs	r1, #2
    16ac:	4448      	add	r0, r9
    16ae:	4b18      	ldr	r3, [pc, #96]	; (1710 <grid_port_process_outbound_usb+0x260>)
    16b0:	4798      	blx	r3
    16b2:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    16b4:	1de0      	adds	r0, r4, #7
    16b6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    16ba:	2102      	movs	r1, #2
    16bc:	4448      	add	r0, r9
    16be:	4b14      	ldr	r3, [pc, #80]	; (1710 <grid_port_process_outbound_usb+0x260>)
    16c0:	4798      	blx	r3
    16c2:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    16c4:	f104 0009 	add.w	r0, r4, #9
    16c8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    16cc:	2102      	movs	r1, #2
    16ce:	4448      	add	r0, r9
    16d0:	4b0f      	ldr	r3, [pc, #60]	; (1710 <grid_port_process_outbound_usb+0x260>)
    16d2:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    16d4:	b2ed      	uxtb	r5, r5
    16d6:	2d63      	cmp	r5, #99	; 0x63
    16d8:	d001      	beq.n	16de <grid_port_process_outbound_usb+0x22e>
				current_start = 0;
    16da:	2500      	movs	r5, #0
    16dc:	e742      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    16de:	b2c3      	uxtb	r3, r0
    16e0:	b2f2      	uxtb	r2, r6
    16e2:	fa5f f188 	uxtb.w	r1, r8
    16e6:	4810      	ldr	r0, [pc, #64]	; (1728 <grid_port_process_outbound_usb+0x278>)
    16e8:	4c10      	ldr	r4, [pc, #64]	; (172c <grid_port_process_outbound_usb+0x27c>)
    16ea:	47a0      	blx	r4
				current_start = 0;
    16ec:	2500      	movs	r5, #0
    16ee:	e739      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
    16f0:	00001079 	.word	0x00001079
    16f4:	000010eb 	.word	0x000010eb
    16f8:	0000119d 	.word	0x0000119d
    16fc:	200023d8 	.word	0x200023d8
    1700:	00002bf1 	.word	0x00002bf1
    1704:	00002c11 	.word	0x00002c11
    1708:	00002c31 	.word	0x00002c31
    170c:	00002c51 	.word	0x00002c51
    1710:	00002a3d 	.word	0x00002a3d
    1714:	0000abd4 	.word	0x0000abd4
    1718:	0000a3e9 	.word	0x0000a3e9
    171c:	0000a431 	.word	0x0000a431
    1720:	0000ab44 	.word	0x0000ab44
    1724:	00009091 	.word	0x00009091
    1728:	200023bc 	.word	0x200023bc
    172c:	00001b01 	.word	0x00001b01
    1730:	00001175 	.word	0x00001175
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1734:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1738:	fa5f f38b 	uxtb.w	r3, fp
    173c:	1b5b      	subs	r3, r3, r5
    173e:	3b03      	subs	r3, #3
    1740:	4a4b      	ldr	r2, [pc, #300]	; (1870 <grid_port_process_outbound_usb+0x3c0>)
    1742:	fb82 1203 	smull	r1, r2, r2, r3
    1746:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    174a:	b2db      	uxtb	r3, r3
    174c:	4619      	mov	r1, r3
    174e:	60fb      	str	r3, [r7, #12]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1754:	3307      	adds	r3, #7
    1756:	f023 0307 	bic.w	r3, r3, #7
    175a:	ebad 0d03 	sub.w	sp, sp, r3
    175e:	ab06      	add	r3, sp, #24
    1760:	461e      	mov	r6, r3
    1762:	60bb      	str	r3, [r7, #8]
					for(uint8_t j=0; j<key_array_length; j++){
    1764:	2900      	cmp	r1, #0
    1766:	d066      	beq.n	1836 <grid_port_process_outbound_usb+0x386>
    1768:	3403      	adds	r4, #3
    176a:	eb04 0809 	add.w	r8, r4, r9
    176e:	1e4b      	subs	r3, r1, #1
    1770:	b2db      	uxtb	r3, r3
    1772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1776:	3509      	adds	r5, #9
    1778:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    177c:	444b      	add	r3, r9
    177e:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1780:	63fe      	str	r6, [r7, #60]	; 0x3c
    1782:	f8c7 b004 	str.w	fp, [r7, #4]
    1786:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    178a:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    178e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1792:	2102      	movs	r1, #2
    1794:	4640      	mov	r0, r8
    1796:	4b37      	ldr	r3, [pc, #220]	; (1874 <grid_port_process_outbound_usb+0x3c4>)
    1798:	4798      	blx	r3
    179a:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    179c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17a0:	2102      	movs	r1, #2
    17a2:	eb08 0001 	add.w	r0, r8, r1
    17a6:	4b33      	ldr	r3, [pc, #204]	; (1874 <grid_port_process_outbound_usb+0x3c4>)
    17a8:	4798      	blx	r3
    17aa:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    17ac:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17b0:	2102      	movs	r1, #2
    17b2:	f108 0004 	add.w	r0, r8, #4
    17b6:	4b2f      	ldr	r3, [pc, #188]	; (1874 <grid_port_process_outbound_usb+0x3c4>)
    17b8:	4798      	blx	r3
    17ba:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    17bc:	f10b 0a1c 	add.w	sl, fp, #28
    17c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17c2:	449a      	add	sl, r3
    17c4:	4b2c      	ldr	r3, [pc, #176]	; (1878 <grid_port_process_outbound_usb+0x3c8>)
    17c6:	4798      	blx	r3
    17c8:	9005      	str	r0, [sp, #20]
    17ca:	b2e4      	uxtb	r4, r4
    17cc:	9404      	str	r4, [sp, #16]
    17ce:	b2ed      	uxtb	r5, r5
    17d0:	9503      	str	r5, [sp, #12]
    17d2:	647e      	str	r6, [r7, #68]	; 0x44
    17d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    17d8:	9302      	str	r3, [sp, #8]
    17da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    17de:	9301      	str	r3, [sp, #4]
    17e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17e2:	9300      	str	r3, [sp, #0]
    17e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    17ea:	4924      	ldr	r1, [pc, #144]	; (187c <grid_port_process_outbound_usb+0x3cc>)
    17ec:	4650      	mov	r0, sl
    17ee:	4e24      	ldr	r6, [pc, #144]	; (1880 <grid_port_process_outbound_usb+0x3d0>)
    17f0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    17f2:	4650      	mov	r0, sl
    17f4:	4b23      	ldr	r3, [pc, #140]	; (1884 <grid_port_process_outbound_usb+0x3d4>)
    17f6:	4798      	blx	r3
    17f8:	4483      	add	fp, r0
    17fa:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    17fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1804:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1806:	2d82      	cmp	r5, #130	; 0x82
    1808:	bf14      	ite	ne
    180a:	2500      	movne	r5, #0
    180c:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    180e:	460b      	mov	r3, r1
    1810:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1812:	2c80      	cmp	r4, #128	; 0x80
    1814:	bf14      	ite	ne
    1816:	2400      	movne	r4, #0
    1818:	2401      	moveq	r4, #1
    181a:	708c      	strb	r4, [r1, #2]
    181c:	f108 0806 	add.w	r8, r8, #6
    1820:	3303      	adds	r3, #3
    1822:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1826:	4598      	cmp	r8, r3
    1828:	d1b1      	bne.n	178e <grid_port_process_outbound_usb+0x2de>
    182a:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    182e:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1832:	f8d7 a000 	ldr.w	sl, [r7]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1836:	f8d7 800c 	ldr.w	r8, [r7, #12]
    183a:	4641      	mov	r1, r8
    183c:	68be      	ldr	r6, [r7, #8]
    183e:	4630      	mov	r0, r6
    1840:	4d11      	ldr	r5, [pc, #68]	; (1888 <grid_port_process_outbound_usb+0x3d8>)
    1842:	47a8      	blx	r5
    1844:	b2c0      	uxtb	r0, r0
    1846:	4c11      	ldr	r4, [pc, #68]	; (188c <grid_port_process_outbound_usb+0x3dc>)
    1848:	7060      	strb	r0, [r4, #1]
					usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    184a:	4641      	mov	r1, r8
    184c:	4630      	mov	r0, r6
    184e:	47a8      	blx	r5
    1850:	b2c0      	uxtb	r0, r0
    1852:	70a0      	strb	r0, [r4, #2]
    1854:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1858:	2500      	movs	r5, #0
    185a:	e683      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
    185c:	2500      	movs	r5, #0
    185e:	e681      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
    1860:	2500      	movs	r5, #0
    1862:	e67f      	b.n	1564 <grid_port_process_outbound_usb+0xb4>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1864:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1866:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1868:	301c      	adds	r0, #28
    186a:	4b09      	ldr	r3, [pc, #36]	; (1890 <grid_port_process_outbound_usb+0x3e0>)
    186c:	4798      	blx	r3
}
    186e:	e62a      	b.n	14c6 <grid_port_process_outbound_usb+0x16>
    1870:	2aaaaaab 	.word	0x2aaaaaab
    1874:	00002a3d 	.word	0x00002a3d
    1878:	00002ab5 	.word	0x00002ab5
    187c:	0000ab8c 	.word	0x0000ab8c
    1880:	0000a3e9 	.word	0x0000a3e9
    1884:	0000a431 	.word	0x0000a431
    1888:	00008b0d 	.word	0x00008b0d
    188c:	200025cc 	.word	0x200025cc
    1890:	000088cd 	.word	0x000088cd

00001894 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1894:	b5f0      	push	{r4, r5, r6, r7, lr}
    1896:	b083      	sub	sp, #12
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1898:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    189c:	4628      	mov	r0, r5
    189e:	4b10      	ldr	r3, [pc, #64]	; (18e0 <grid_port_process_outbound_ui+0x4c>)
    18a0:	4798      	blx	r3
	
	if (!packet_size){
    18a2:	b908      	cbnz	r0, 18a8 <grid_port_process_outbound_ui+0x14>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    18a4:	b003      	add	sp, #12
    18a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18a8:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    18aa:	4628      	mov	r0, r5
    18ac:	4b0d      	ldr	r3, [pc, #52]	; (18e4 <grid_port_process_outbound_ui+0x50>)
    18ae:	4798      	blx	r3
    18b0:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    18b2:	4f0d      	ldr	r7, [pc, #52]	; (18e8 <grid_port_process_outbound_ui+0x54>)
    18b4:	4628      	mov	r0, r5
    18b6:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    18b8:	3401      	adds	r4, #1
    18ba:	b2e4      	uxtb	r4, r4
    18bc:	b2a3      	uxth	r3, r4
    18be:	429e      	cmp	r6, r3
    18c0:	d8f8      	bhi.n	18b4 <grid_port_process_outbound_ui+0x20>
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    18c2:	23c8      	movs	r3, #200	; 0xc8
    18c4:	9301      	str	r3, [sp, #4]
    18c6:	2302      	movs	r3, #2
    18c8:	9300      	str	r3, [sp, #0]
    18ca:	23ff      	movs	r3, #255	; 0xff
    18cc:	461a      	mov	r2, r3
    18ce:	4619      	mov	r1, r3
    18d0:	4806      	ldr	r0, [pc, #24]	; (18ec <grid_port_process_outbound_ui+0x58>)
    18d2:	4c07      	ldr	r4, [pc, #28]	; (18f0 <grid_port_process_outbound_ui+0x5c>)
    18d4:	47a0      	blx	r4
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18d6:	4628      	mov	r0, r5
    18d8:	4b06      	ldr	r3, [pc, #24]	; (18f4 <grid_port_process_outbound_ui+0x60>)
    18da:	4798      	blx	r3
}
    18dc:	e7e2      	b.n	18a4 <grid_port_process_outbound_ui+0x10>
    18de:	bf00      	nop
    18e0:	00001079 	.word	0x00001079
    18e4:	000010eb 	.word	0x000010eb
    18e8:	00001175 	.word	0x00001175
    18ec:	20001a14 	.word	0x20001a14
    18f0:	000029e9 	.word	0x000029e9
    18f4:	0000119d 	.word	0x0000119d

000018f8 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    18f8:	8903      	ldrh	r3, [r0, #8]
    18fa:	b103      	cbz	r3, 18fe <grid_port_process_outbound_usart+0x6>
    18fc:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    18fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1902:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1904:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    1908:	4630      	mov	r0, r6
    190a:	4b10      	ldr	r3, [pc, #64]	; (194c <grid_port_process_outbound_usart+0x54>)
    190c:	4798      	blx	r3
		
		if (!packet_size){
    190e:	4607      	mov	r7, r0
    1910:	b908      	cbnz	r0, 1916 <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    1912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    1916:	4630      	mov	r0, r6
    1918:	4b0d      	ldr	r3, [pc, #52]	; (1950 <grid_port_process_outbound_usart+0x58>)
    191a:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    191c:	812f      	strh	r7, [r5, #8]
    191e:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1920:	f8df 8038 	ldr.w	r8, [pc, #56]	; 195c <grid_port_process_outbound_usart+0x64>
    1924:	4630      	mov	r0, r6
    1926:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1928:	192b      	adds	r3, r5, r4
    192a:	7718      	strb	r0, [r3, #28]
			for (uint8_t i = 0; i<packet_size; i++){
    192c:	3401      	adds	r4, #1
    192e:	b2e4      	uxtb	r4, r4
    1930:	b2a3      	uxth	r3, r4
    1932:	429f      	cmp	r7, r3
    1934:	d8f6      	bhi.n	1924 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1936:	4630      	mov	r0, r6
    1938:	4b06      	ldr	r3, [pc, #24]	; (1954 <grid_port_process_outbound_usart+0x5c>)
    193a:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    193c:	892a      	ldrh	r2, [r5, #8]
    193e:	f105 011c 	add.w	r1, r5, #28
    1942:	6828      	ldr	r0, [r5, #0]
    1944:	4b04      	ldr	r3, [pc, #16]	; (1958 <grid_port_process_outbound_usart+0x60>)
    1946:	4798      	blx	r3
}
    1948:	e7e3      	b.n	1912 <grid_port_process_outbound_usart+0x1a>
    194a:	bf00      	nop
    194c:	00001079 	.word	0x00001079
    1950:	000010eb 	.word	0x000010eb
    1954:	0000119d 	.word	0x0000119d
    1958:	0000357d 	.word	0x0000357d
    195c:	00001175 	.word	0x00001175

00001960 <grid_led_hardware_transfer_complete_cb>:
volatile static uint8_t grid_led_hardware_transfer_done = 0;

void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1960:	2201      	movs	r2, #1
    1962:	4b01      	ldr	r3, [pc, #4]	; (1968 <grid_led_hardware_transfer_complete_cb+0x8>)
    1964:	701a      	strb	r2, [r3, #0]
    1966:	4770      	bx	lr
    1968:	20000620 	.word	0x20000620

0000196c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    196c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    196e:	7844      	ldrb	r4, [r0, #1]
    1970:	428c      	cmp	r4, r1
    1972:	d802      	bhi.n	197a <grid_led_set_color+0xe>
		return -1;		
    1974:	20ff      	movs	r0, #255	; 0xff
}
    1976:	bc30      	pop	{r4, r5}
    1978:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    197a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    197e:	0089      	lsls	r1, r1, #2
    1980:	68c5      	ldr	r5, [r0, #12]
    1982:	4c0a      	ldr	r4, [pc, #40]	; (19ac <grid_led_set_color+0x40>)
    1984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1988:	685b      	ldr	r3, [r3, #4]
    198a:	506b      	str	r3, [r5, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    198c:	68c3      	ldr	r3, [r0, #12]
    198e:	440b      	add	r3, r1
    1990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1994:	6852      	ldr	r2, [r2, #4]
    1996:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1998:	68c3      	ldr	r3, [r0, #12]
    199a:	4419      	add	r1, r3
    199c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    19a0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    19a4:	6863      	ldr	r3, [r4, #4]
    19a6:	608b      	str	r3, [r1, #8]
		return 0;
    19a8:	2000      	movs	r0, #0
    19aa:	e7e4      	b.n	1976 <grid_led_set_color+0xa>
    19ac:	20000620 	.word	0x20000620

000019b0 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    19b0:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    19b2:	4c06      	ldr	r4, [pc, #24]	; (19cc <grid_led_hardware_init+0x1c>)
    19b4:	f100 0114 	add.w	r1, r0, #20
    19b8:	4620      	mov	r0, r4
    19ba:	4b05      	ldr	r3, [pc, #20]	; (19d0 <grid_led_hardware_init+0x20>)
    19bc:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    19be:	4a05      	ldr	r2, [pc, #20]	; (19d4 <grid_led_hardware_init+0x24>)
    19c0:	2100      	movs	r1, #0
    19c2:	4620      	mov	r0, r4
    19c4:	4b04      	ldr	r3, [pc, #16]	; (19d8 <grid_led_hardware_init+0x28>)
    19c6:	4798      	blx	r3
    19c8:	bd10      	pop	{r4, pc}
    19ca:	bf00      	nop
    19cc:	200014d0 	.word	0x200014d0
    19d0:	00003a39 	.word	0x00003a39
    19d4:	00001961 	.word	0x00001961
    19d8:	00003a09 	.word	0x00003a09

000019dc <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    19dc:	7840      	ldrb	r0, [r0, #1]
    19de:	4770      	bx	lr

000019e0 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    19e0:	7843      	ldrb	r3, [r0, #1]
    19e2:	b1f3      	cbz	r3, 1a22 <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    19e4:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    19e6:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    19e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    19ec:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    19f0:	6902      	ldr	r2, [r0, #16]
    19f2:	440a      	add	r2, r1
    19f4:	7ad1      	ldrb	r1, [r2, #11]
    19f6:	7b14      	ldrb	r4, [r2, #12]
    19f8:	4421      	add	r1, r4
    19fa:	72d1      	strb	r1, [r2, #11]
    19fc:	7842      	ldrb	r2, [r0, #1]
    19fe:	441a      	add	r2, r3
    1a00:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1a04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1a08:	6901      	ldr	r1, [r0, #16]
    1a0a:	440a      	add	r2, r1
    1a0c:	7ad1      	ldrb	r1, [r2, #11]
    1a0e:	7b14      	ldrb	r4, [r2, #12]
    1a10:	4421      	add	r1, r4
    1a12:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1a14:	3301      	adds	r3, #1
    1a16:	b2db      	uxtb	r3, r3
    1a18:	7842      	ldrb	r2, [r0, #1]
    1a1a:	429a      	cmp	r2, r3
    1a1c:	d8e4      	bhi.n	19e8 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a22:	4770      	bx	lr

00001a24 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1a24:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1a26:	7844      	ldrb	r4, [r0, #1]
    1a28:	fb02 1404 	mla	r4, r2, r4, r1
    1a2c:	6905      	ldr	r5, [r0, #16]
    1a2e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1a32:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1a36:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1a38:	7843      	ldrb	r3, [r0, #1]
    1a3a:	fb02 1303 	mla	r3, r2, r3, r1
    1a3e:	6904      	ldr	r4, [r0, #16]
    1a40:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1a44:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1a48:	4423      	add	r3, r4
    1a4a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1a4e:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1a50:	7843      	ldrb	r3, [r0, #1]
    1a52:	fb02 1203 	mla	r2, r2, r3, r1
    1a56:	6903      	ldr	r3, [r0, #16]
    1a58:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1a5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1a60:	441a      	add	r2, r3
    1a62:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1a66:	7093      	strb	r3, [r2, #2]
}
    1a68:	bc70      	pop	{r4, r5, r6}
    1a6a:	4770      	bx	lr

00001a6c <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1a6c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1a6e:	7844      	ldrb	r4, [r0, #1]
    1a70:	fb02 1404 	mla	r4, r2, r4, r1
    1a74:	6905      	ldr	r5, [r0, #16]
    1a76:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1a7a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1a7e:	442c      	add	r4, r5
    1a80:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1a82:	7843      	ldrb	r3, [r0, #1]
    1a84:	fb02 1303 	mla	r3, r2, r3, r1
    1a88:	6904      	ldr	r4, [r0, #16]
    1a8a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1a8e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1a92:	4423      	add	r3, r4
    1a94:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1a98:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1a9a:	7843      	ldrb	r3, [r0, #1]
    1a9c:	fb02 1203 	mla	r2, r2, r3, r1
    1aa0:	6903      	ldr	r3, [r0, #16]
    1aa2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1aa6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1aaa:	441a      	add	r2, r3
    1aac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ab0:	7153      	strb	r3, [r2, #5]
}
    1ab2:	bc70      	pop	{r4, r5, r6}
    1ab4:	4770      	bx	lr

00001ab6 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1ab6:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1ab8:	7844      	ldrb	r4, [r0, #1]
    1aba:	fb02 1404 	mla	r4, r2, r4, r1
    1abe:	6905      	ldr	r5, [r0, #16]
    1ac0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1ac4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1ac8:	442c      	add	r4, r5
    1aca:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1acc:	7843      	ldrb	r3, [r0, #1]
    1ace:	fb02 1303 	mla	r3, r2, r3, r1
    1ad2:	6904      	ldr	r4, [r0, #16]
    1ad4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ad8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1adc:	4423      	add	r3, r4
    1ade:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1ae2:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1ae4:	7843      	ldrb	r3, [r0, #1]
    1ae6:	fb02 1203 	mla	r2, r2, r3, r1
    1aea:	6903      	ldr	r3, [r0, #16]
    1aec:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1af0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1af4:	441a      	add	r2, r3
    1af6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1afa:	7213      	strb	r3, [r2, #8]
}
    1afc:	bc70      	pop	{r4, r5, r6}
    1afe:	4770      	bx	lr

00001b00 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1b00:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1b02:	7844      	ldrb	r4, [r0, #1]
    1b04:	fb02 1204 	mla	r2, r2, r4, r1
    1b08:	6901      	ldr	r1, [r0, #16]
    1b0a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1b0e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1b12:	440a      	add	r2, r1
    1b14:	72d3      	strb	r3, [r2, #11]
}
    1b16:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b1a:	4770      	bx	lr

00001b1c <grid_led_set_frequency>:

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1b1c:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1b1e:	7844      	ldrb	r4, [r0, #1]
    1b20:	fb02 1204 	mla	r2, r2, r4, r1
    1b24:	6901      	ldr	r1, [r0, #16]
    1b26:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1b2a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1b2e:	440a      	add	r2, r1
    1b30:	7313      	strb	r3, [r2, #12]
}
    1b32:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b36:	4770      	bx	lr

00001b38 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b3c:	b083      	sub	sp, #12
    1b3e:	4605      	mov	r5, r0
	mod->led_number = length;
    1b40:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1b42:	b2cc      	uxtb	r4, r1
    1b44:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    1b48:	0080      	lsls	r0, r0, #2
    1b4a:	3090      	adds	r0, #144	; 0x90
    1b4c:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1b4e:	4e3b      	ldr	r6, [pc, #236]	; (1c3c <grid_led_buffer_init+0x104>)
    1b50:	47b0      	blx	r6
    1b52:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1b54:	3090      	adds	r0, #144	; 0x90
    1b56:	60e8      	str	r0, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1b58:	201a      	movs	r0, #26
    1b5a:	fb00 f004 	mul.w	r0, r0, r4
    1b5e:	47b0      	blx	r6
    1b60:	6128      	str	r0, [r5, #16]
    1b62:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1b64:	4619      	mov	r1, r3
    1b66:	68aa      	ldr	r2, [r5, #8]
    1b68:	54d1      	strb	r1, [r2, r3]
    1b6a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1b6c:	2b90      	cmp	r3, #144	; 0x90
    1b6e:	d1fa      	bne.n	1b66 <grid_led_buffer_init+0x2e>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1b70:	786b      	ldrb	r3, [r5, #1]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d05e      	beq.n	1c34 <grid_led_buffer_init+0xfc>
    1b76:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    1b78:	4626      	mov	r6, r4
    1b7a:	4f31      	ldr	r7, [pc, #196]	; (1c40 <grid_led_buffer_init+0x108>)
    1b7c:	9600      	str	r6, [sp, #0]
    1b7e:	4633      	mov	r3, r6
    1b80:	4632      	mov	r2, r6
    1b82:	4621      	mov	r1, r4
    1b84:	4628      	mov	r0, r5
    1b86:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1b88:	3401      	adds	r4, #1
    1b8a:	786b      	ldrb	r3, [r5, #1]
    1b8c:	42a3      	cmp	r3, r4
    1b8e:	d8f5      	bhi.n	1b7c <grid_led_buffer_init+0x44>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1b90:	2b00      	cmp	r3, #0
    1b92:	d04f      	beq.n	1c34 <grid_led_buffer_init+0xfc>
    1b94:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1b96:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1c48 <grid_led_buffer_init+0x110>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1b9a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1c4c <grid_led_buffer_init+0x114>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1b9e:	2400      	movs	r4, #0
    1ba0:	9401      	str	r4, [sp, #4]
    1ba2:	9400      	str	r4, [sp, #0]
    1ba4:	4623      	mov	r3, r4
    1ba6:	4622      	mov	r2, r4
    1ba8:	4631      	mov	r1, r6
    1baa:	4628      	mov	r0, r5
    1bac:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1bae:	9401      	str	r4, [sp, #4]
    1bb0:	237f      	movs	r3, #127	; 0x7f
    1bb2:	9300      	str	r3, [sp, #0]
    1bb4:	4623      	mov	r3, r4
    1bb6:	4622      	mov	r2, r4
    1bb8:	4631      	mov	r1, r6
    1bba:	4628      	mov	r0, r5
    1bbc:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1bbe:	9401      	str	r4, [sp, #4]
    1bc0:	23ff      	movs	r3, #255	; 0xff
    1bc2:	9300      	str	r3, [sp, #0]
    1bc4:	4623      	mov	r3, r4
    1bc6:	4622      	mov	r2, r4
    1bc8:	4631      	mov	r1, r6
    1bca:	4628      	mov	r0, r5
    1bcc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1c50 <grid_led_buffer_init+0x118>
    1bd0:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1bd2:	4623      	mov	r3, r4
    1bd4:	4622      	mov	r2, r4
    1bd6:	4631      	mov	r1, r6
    1bd8:	4628      	mov	r0, r5
    1bda:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1c54 <grid_led_buffer_init+0x11c>
    1bde:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1be0:	4623      	mov	r3, r4
    1be2:	4622      	mov	r2, r4
    1be4:	4631      	mov	r1, r6
    1be6:	4628      	mov	r0, r5
    1be8:	4f16      	ldr	r7, [pc, #88]	; (1c44 <grid_led_buffer_init+0x10c>)
    1bea:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    1bec:	9401      	str	r4, [sp, #4]
    1bee:	9400      	str	r4, [sp, #0]
    1bf0:	4623      	mov	r3, r4
    1bf2:	2201      	movs	r2, #1
    1bf4:	4631      	mov	r1, r6
    1bf6:	4628      	mov	r0, r5
    1bf8:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    1bfa:	9401      	str	r4, [sp, #4]
    1bfc:	9400      	str	r4, [sp, #0]
    1bfe:	4623      	mov	r3, r4
    1c00:	2201      	movs	r2, #1
    1c02:	4631      	mov	r1, r6
    1c04:	4628      	mov	r0, r5
    1c06:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1c08:	9401      	str	r4, [sp, #4]
    1c0a:	9400      	str	r4, [sp, #0]
    1c0c:	4623      	mov	r3, r4
    1c0e:	2201      	movs	r2, #1
    1c10:	4631      	mov	r1, r6
    1c12:	4628      	mov	r0, r5
    1c14:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    1c16:	4623      	mov	r3, r4
    1c18:	2201      	movs	r2, #1
    1c1a:	4631      	mov	r1, r6
    1c1c:	4628      	mov	r0, r5
    1c1e:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    1c20:	4623      	mov	r3, r4
    1c22:	2201      	movs	r2, #1
    1c24:	4631      	mov	r1, r6
    1c26:	4628      	mov	r0, r5
    1c28:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    1c2a:	3601      	adds	r6, #1
    1c2c:	b2f6      	uxtb	r6, r6
    1c2e:	786b      	ldrb	r3, [r5, #1]
    1c30:	42b3      	cmp	r3, r6
    1c32:	d8b4      	bhi.n	1b9e <grid_led_buffer_init+0x66>
}
    1c34:	b003      	add	sp, #12
    1c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c3a:	bf00      	nop
    1c3c:	0000a239 	.word	0x0000a239
    1c40:	0000196d 	.word	0x0000196d
    1c44:	00001b01 	.word	0x00001b01
    1c48:	00001a25 	.word	0x00001a25
    1c4c:	00001a6d 	.word	0x00001a6d
    1c50:	00001ab7 	.word	0x00001ab7
    1c54:	00001b1d 	.word	0x00001b1d

00001c58 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    1c58:	b570      	push	{r4, r5, r6, lr}
    1c5a:	4604      	mov	r4, r0
    1c5c:	4e29      	ldr	r6, [pc, #164]	; (1d04 <grid_led_init+0xac>)
    1c5e:	2200      	movs	r2, #0
    1c60:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    1c62:	f003 0001 	and.w	r0, r3, #1
    1c66:	2800      	cmp	r0, #0
    1c68:	bf14      	ite	ne
    1c6a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    1c6e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    1c72:	f3c3 0540 	ubfx	r5, r3, #1, #1
    1c76:	2d00      	cmp	r5, #0
    1c78:	bf14      	ite	ne
    1c7a:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    1c7e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    1c82:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    1c84:	f3c3 0080 	ubfx	r0, r3, #2, #1
    1c88:	2800      	cmp	r0, #0
    1c8a:	bf14      	ite	ne
    1c8c:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    1c90:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    1c94:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    1c96:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    1c9a:	2d00      	cmp	r5, #0
    1c9c:	bf14      	ite	ne
    1c9e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    1ca2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    1ca6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    1ca8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    1cac:	2d00      	cmp	r5, #0
    1cae:	bf14      	ite	ne
    1cb0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    1cb4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    1cb8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    1cba:	f3c3 1040 	ubfx	r0, r3, #5, #1
    1cbe:	2800      	cmp	r0, #0
    1cc0:	bf14      	ite	ne
    1cc2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    1cc6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    1cca:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    1ccc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    1cd0:	2800      	cmp	r0, #0
    1cd2:	bf14      	ite	ne
    1cd4:	200e      	movne	r0, #14
    1cd6:	2008      	moveq	r0, #8
    1cd8:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    1cda:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    1cde:	2b00      	cmp	r3, #0
    1ce0:	bf14      	ite	ne
    1ce2:	23e0      	movne	r3, #224	; 0xe0
    1ce4:	2380      	moveq	r3, #128	; 0x80
    1ce6:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    1ce8:	f846 3f04 	str.w	r3, [r6, #4]!
    1cec:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    1cee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1cf2:	d1b5      	bne.n	1c60 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    1cf4:	4620      	mov	r0, r4
    1cf6:	4b04      	ldr	r3, [pc, #16]	; (1d08 <grid_led_init+0xb0>)
    1cf8:	4798      	blx	r3
	grid_led_hardware_init(mod);
    1cfa:	4620      	mov	r0, r4
    1cfc:	4b03      	ldr	r3, [pc, #12]	; (1d0c <grid_led_init+0xb4>)
    1cfe:	4798      	blx	r3
}
    1d00:	2000      	movs	r0, #0
    1d02:	bd70      	pop	{r4, r5, r6, pc}
    1d04:	20000620 	.word	0x20000620
    1d08:	00001b39 	.word	0x00001b39
    1d0c:	000019b1 	.word	0x000019b1

00001d10 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    1d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d14:	b083      	sub	sp, #12
    1d16:	f890 c001 	ldrb.w	ip, [r0, #1]
    1d1a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    1d1e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    1d22:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1d26:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    1d2a:	6904      	ldr	r4, [r0, #16]
    1d2c:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    1d2e:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    1d30:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    1d34:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    1d36:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1d38:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1dc0 <grid_led_render+0xb0>
    1d3c:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1d3e:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1d42:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1d44:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    1d48:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    1d4c:	f894 a000 	ldrb.w	sl, [r4]
    1d50:	f894 b003 	ldrb.w	fp, [r4, #3]
    1d54:	fb05 fb0b 	mul.w	fp, r5, fp
    1d58:	fb09 bb0a 	mla	fp, r9, sl, fp
    1d5c:	f894 a006 	ldrb.w	sl, [r4, #6]
    1d60:	fb06 ba0a 	mla	sl, r6, sl, fp
    1d64:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    1d66:	f894 a001 	ldrb.w	sl, [r4, #1]
    1d6a:	f894 b004 	ldrb.w	fp, [r4, #4]
    1d6e:	fb05 fb0b 	mul.w	fp, r5, fp
    1d72:	fb09 bb0a 	mla	fp, r9, sl, fp
    1d76:	f894 a007 	ldrb.w	sl, [r4, #7]
    1d7a:	fb06 ba0a 	mla	sl, r6, sl, fp
    1d7e:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    1d80:	f894 a002 	ldrb.w	sl, [r4, #2]
    1d84:	f894 b005 	ldrb.w	fp, [r4, #5]
    1d88:	fb05 f50b 	mul.w	r5, r5, fp
    1d8c:	fb09 590a 	mla	r9, r9, sl, r5
    1d90:	7a25      	ldrb	r5, [r4, #8]
    1d92:	fb06 9505 	mla	r5, r6, r5, r9
    1d96:	44ae      	add	lr, r5
    1d98:	3f01      	subs	r7, #1
    1d9a:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    1d9c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    1da0:	d1cc      	bne.n	1d3c <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    1da2:	f3ce 2447 	ubfx	r4, lr, #9, #8
    1da6:	9400      	str	r4, [sp, #0]
    1da8:	f3c3 2347 	ubfx	r3, r3, #9, #8
    1dac:	f3c2 2247 	ubfx	r2, r2, #9, #8
    1db0:	4c02      	ldr	r4, [pc, #8]	; (1dbc <grid_led_render+0xac>)
    1db2:	47a0      	blx	r4
	
}
    1db4:	b003      	add	sp, #12
    1db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dba:	bf00      	nop
    1dbc:	0000196d 	.word	0x0000196d
    1dc0:	20000000 	.word	0x20000000

00001dc4 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    1dc4:	7843      	ldrb	r3, [r0, #1]
    1dc6:	b15b      	cbz	r3, 1de0 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    1dc8:	b570      	push	{r4, r5, r6, lr}
    1dca:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    1dcc:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    1dce:	4e05      	ldr	r6, [pc, #20]	; (1de4 <grid_led_render_all+0x20>)
    1dd0:	4621      	mov	r1, r4
    1dd2:	4628      	mov	r0, r5
    1dd4:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    1dd6:	3401      	adds	r4, #1
    1dd8:	786b      	ldrb	r3, [r5, #1]
    1dda:	42a3      	cmp	r3, r4
    1ddc:	d8f8      	bhi.n	1dd0 <grid_led_render_all+0xc>
    1dde:	bd70      	pop	{r4, r5, r6, pc}
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop
    1de4:	00001d11 	.word	0x00001d11

00001de8 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    1de8:	b510      	push	{r4, lr}
    1dea:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1dec:	2200      	movs	r2, #0
    1dee:	4b08      	ldr	r3, [pc, #32]	; (1e10 <grid_led_hardware_start_transfer_blocking+0x28>)
    1df0:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    1df2:	4808      	ldr	r0, [pc, #32]	; (1e14 <grid_led_hardware_start_transfer_blocking+0x2c>)
    1df4:	4b08      	ldr	r3, [pc, #32]	; (1e18 <grid_led_hardware_start_transfer_blocking+0x30>)
    1df6:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1df8:	88a2      	ldrh	r2, [r4, #4]
    1dfa:	68a1      	ldr	r1, [r4, #8]
    1dfc:	6960      	ldr	r0, [r4, #20]
    1dfe:	4b07      	ldr	r3, [pc, #28]	; (1e1c <grid_led_hardware_start_transfer_blocking+0x34>)
    1e00:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    1e02:	4a03      	ldr	r2, [pc, #12]	; (1e10 <grid_led_hardware_start_transfer_blocking+0x28>)
    1e04:	7813      	ldrb	r3, [r2, #0]
    1e06:	b2db      	uxtb	r3, r3
    1e08:	2b01      	cmp	r3, #1
    1e0a:	d1fb      	bne.n	1e04 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
    1e0c:	bd10      	pop	{r4, pc}
    1e0e:	bf00      	nop
    1e10:	20000620 	.word	0x20000620
    1e14:	200014d0 	.word	0x200014d0
    1e18:	000039e1 	.word	0x000039e1
    1e1c:	0000357d 	.word	0x0000357d

00001e20 <grid_sync_set_mode>:
enum grid_sync_mode { GRID_SYNC_INITIAL, GRID_SYNC_MASTER, GRID_SYNC_SLAVE};
	
	
void grid_sync_set_mode(enum grid_sync_selector sync_select, enum grid_sync_mode sync_mode){
	
	grid_sync_mode_register[sync_select - 1]  = sync_mode;
    1e20:	4b28      	ldr	r3, [pc, #160]	; (1ec4 <grid_sync_set_mode+0xa4>)
    1e22:	4403      	add	r3, r0
    1e24:	f803 1c01 	strb.w	r1, [r3, #-1]
	
	if (sync_select == GRID_SYNC_1){		
    1e28:	2801      	cmp	r0, #1
    1e2a:	d002      	beq.n	1e32 <grid_sync_set_mode+0x12>
			gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_IN);
			gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		}
		
	}
	else if (sync_select == GRID_SYNC_2){	
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d023      	beq.n	1e78 <grid_sync_set_mode+0x58>
    1e30:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    1e32:	2901      	cmp	r1, #1
    1e34:	d011      	beq.n	1e5a <grid_sync_set_mode+0x3a>
		else if (sync_mode == GRID_SYNC_SLAVE){
    1e36:	2902      	cmp	r1, #2
    1e38:	d1fa      	bne.n	1e30 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e3a:	4b23      	ldr	r3, [pc, #140]	; (1ec8 <grid_sync_set_mode+0xa8>)
    1e3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e44:	4921      	ldr	r1, [pc, #132]	; (1ecc <grid_sync_set_mode+0xac>)
    1e46:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1e4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    1e4e:	3104      	adds	r1, #4
    1e50:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1e58:	4770      	bx	lr
    1e5a:	4b1b      	ldr	r3, [pc, #108]	; (1ec8 <grid_sync_set_mode+0xa8>)
    1e5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e6c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1e70:	4a17      	ldr	r2, [pc, #92]	; (1ed0 <grid_sync_set_mode+0xb0>)
    1e72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1e76:	4770      	bx	lr
			
		if (sync_mode == GRID_SYNC_MASTER){
    1e78:	2901      	cmp	r1, #1
    1e7a:	d013      	beq.n	1ea4 <grid_sync_set_mode+0x84>
			
			gpio_set_pin_level(PIN_GRID_SYNC_2, true);
			gpio_set_pin_direction(PIN_GRID_SYNC_2, GPIO_DIRECTION_OUT);
		}
		else if (sync_mode == GRID_SYNC_SLAVE){
    1e7c:	2902      	cmp	r1, #2
    1e7e:	d1d7      	bne.n	1e30 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e80:	4b11      	ldr	r3, [pc, #68]	; (1ec8 <grid_sync_set_mode+0xa8>)
    1e82:	2280      	movs	r2, #128	; 0x80
    1e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1e8c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    1e90:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1e94:	4a0f      	ldr	r2, [pc, #60]	; (1ed4 <grid_sync_set_mode+0xb4>)
    1e96:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1e9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		}
		
	}
	
}
    1ea2:	e7c5      	b.n	1e30 <grid_sync_set_mode+0x10>
    1ea4:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <grid_sync_set_mode+0xa8>)
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1eb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1eb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1eb8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1ebc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1ec0:	4770      	bx	lr
    1ec2:	bf00      	nop
    1ec4:	20000a28 	.word	0x20000a28
    1ec8:	41008000 	.word	0x41008000
    1ecc:	40020000 	.word	0x40020000
    1ed0:	c0000004 	.word	0xc0000004
    1ed4:	c0020000 	.word	0xc0020000

00001ed8 <grid_sync_get_mode>:

enum grid_sync_mode grid_sync_get_mode(enum grid_sync_selector sync_select){
	
	if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_MASTER){
    1ed8:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <grid_sync_get_mode+0x1c>)
    1eda:	4418      	add	r0, r3
    1edc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1ee0:	2b01      	cmp	r3, #1
    1ee2:	d004      	beq.n	1eee <grid_sync_get_mode+0x16>
	}
	else if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_SLAVE){
		return GRID_SYNC_SLAVE;
	}
	else{
		return GRID_SYNC_INITIAL;	
    1ee4:	2b02      	cmp	r3, #2
    1ee6:	bf0c      	ite	eq
    1ee8:	2002      	moveq	r0, #2
    1eea:	2000      	movne	r0, #0
    1eec:	4770      	bx	lr
		return GRID_SYNC_MASTER;
    1eee:	2001      	movs	r0, #1
	}	
}
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	20000a28 	.word	0x20000a28

00001ef8 <grid_sync_set_level>:

void grid_sync_set_level(enum grid_sync_selector sync_select, uint8_t sync_level){
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	
	if (sync_select == GRID_SYNC_1){
    1efc:	2801      	cmp	r0, #1
    1efe:	d002      	beq.n	1f06 <grid_sync_set_level+0xe>
			
			gpio_set_pin_level(PIN_GRID_SYNC_1, sync_level);
		}
		
	}
	else if (sync_select == GRID_SYNC_2){
    1f00:	2802      	cmp	r0, #2
    1f02:	d011      	beq.n	1f28 <grid_sync_set_level+0x30>
    1f04:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    1f06:	4b10      	ldr	r3, [pc, #64]	; (1f48 <grid_sync_set_level+0x50>)
    1f08:	4798      	blx	r3
    1f0a:	2801      	cmp	r0, #1
    1f0c:	d1fa      	bne.n	1f04 <grid_sync_set_level+0xc>
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    1f0e:	b12c      	cbz	r4, 1f1c <grid_sync_set_level+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f10:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1f14:	4b0d      	ldr	r3, [pc, #52]	; (1f4c <grid_sync_set_level+0x54>)
    1f16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1f1a:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1f20:	4b0a      	ldr	r3, [pc, #40]	; (1f4c <grid_sync_set_level+0x54>)
    1f22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1f26:	bd10      	pop	{r4, pc}
		
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    1f28:	4b07      	ldr	r3, [pc, #28]	; (1f48 <grid_sync_set_level+0x50>)
    1f2a:	4798      	blx	r3
    1f2c:	2801      	cmp	r0, #1
    1f2e:	d1e9      	bne.n	1f04 <grid_sync_set_level+0xc>
    1f30:	b924      	cbnz	r4, 1f3c <grid_sync_set_level+0x44>
    1f32:	2280      	movs	r2, #128	; 0x80
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <grid_sync_set_level+0x54>)
    1f36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			gpio_set_pin_level(PIN_GRID_SYNC_2, sync_level);
		}
		
	}
		
}
    1f3a:	e7e3      	b.n	1f04 <grid_sync_set_level+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f3c:	2280      	movs	r2, #128	; 0x80
    1f3e:	4b03      	ldr	r3, [pc, #12]	; (1f4c <grid_sync_set_level+0x54>)
    1f40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1f44:	bd10      	pop	{r4, pc}
    1f46:	bf00      	nop
    1f48:	00001ed9 	.word	0x00001ed9
    1f4c:	41008000 	.word	0x41008000

00001f50 <grid_module_init_animation>:





void grid_module_init_animation(struct grid_led_model* mod){
    1f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f54:	b083      	sub	sp, #12
    1f56:	4607      	mov	r7, r0
	
	
	for (uint8_t i = 0; i<255; i++){
    1f58:	2500      	movs	r5, #0
		uint8_t color_b   = i;
			
			
		for (uint8_t i=0; i<mod->led_number; i++){
			//grid_led_set_color(i, 0, 255, 0);
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    1f5a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1fa8 <grid_module_init_animation+0x58>
    1f5e:	4e10      	ldr	r6, [pc, #64]	; (1fa0 <grid_module_init_animation+0x50>)
				
		}
			
			
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    1f60:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1fac <grid_module_init_animation+0x5c>
    1f64:	e013      	b.n	1f8e <grid_module_init_animation+0x3e>
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    1f66:	9500      	str	r5, [sp, #0]
    1f68:	462b      	mov	r3, r5
    1f6a:	462a      	mov	r2, r5
    1f6c:	4621      	mov	r1, r4
    1f6e:	4640      	mov	r0, r8
    1f70:	47b0      	blx	r6
		for (uint8_t i=0; i<mod->led_number; i++){
    1f72:	3401      	adds	r4, #1
    1f74:	b2e4      	uxtb	r4, r4
    1f76:	787b      	ldrb	r3, [r7, #1]
    1f78:	42a3      	cmp	r3, r4
    1f7a:	d8f4      	bhi.n	1f66 <grid_module_init_animation+0x16>
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    1f7c:	4640      	mov	r0, r8
    1f7e:	47c8      	blx	r9
			
		delay_ms(1);
    1f80:	2001      	movs	r0, #1
    1f82:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <grid_module_init_animation+0x54>)
    1f84:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    1f86:	3501      	adds	r5, #1
    1f88:	b2ed      	uxtb	r5, r5
    1f8a:	2dff      	cmp	r5, #255	; 0xff
    1f8c:	d004      	beq.n	1f98 <grid_module_init_animation+0x48>
		for (uint8_t i=0; i<mod->led_number; i++){
    1f8e:	787b      	ldrb	r3, [r7, #1]
    1f90:	2400      	movs	r4, #0
    1f92:	2b00      	cmp	r3, #0
    1f94:	d1e7      	bne.n	1f66 <grid_module_init_animation+0x16>
    1f96:	e7f1      	b.n	1f7c <grid_module_init_animation+0x2c>
			
	}
	
}
    1f98:	b003      	add	sp, #12
    1f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f9e:	bf00      	nop
    1fa0:	0000196d 	.word	0x0000196d
    1fa4:	000033f1 	.word	0x000033f1
    1fa8:	200023bc 	.word	0x200023bc
    1fac:	00001de9 	.word	0x00001de9

00001fb0 <grid_ui_encoder_hardware_init>:
		
	grid_ui_encoder_hardware_start_transfer();
}

void grid_ui_encoder_hardware_init(void)
{
    1fb0:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1fb2:	4b0c      	ldr	r3, [pc, #48]	; (1fe4 <grid_ui_encoder_hardware_init+0x34>)
    1fb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1fb8:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1fba:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1fc0:	629a      	str	r2, [r3, #40]	; 0x28
    1fc2:	4a09      	ldr	r2, [pc, #36]	; (1fe8 <grid_ui_encoder_hardware_init+0x38>)
    1fc4:	629a      	str	r2, [r3, #40]	; 0x28
		
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_OUT);
		
		
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    1fc6:	4c09      	ldr	r4, [pc, #36]	; (1fec <grid_ui_encoder_hardware_init+0x3c>)
    1fc8:	2103      	movs	r1, #3
    1fca:	4620      	mov	r0, r4
    1fcc:	4b08      	ldr	r3, [pc, #32]	; (1ff0 <grid_ui_encoder_hardware_init+0x40>)
    1fce:	4798      	blx	r3
		
	spi_m_async_get_io_descriptor(&UI_SPI, &io);
    1fd0:	4908      	ldr	r1, [pc, #32]	; (1ff4 <grid_ui_encoder_hardware_init+0x44>)
    1fd2:	4620      	mov	r0, r4
    1fd4:	4b08      	ldr	r3, [pc, #32]	; (1ff8 <grid_ui_encoder_hardware_init+0x48>)
    1fd6:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_ui_encoder_hardware_transfer_complete_cb);
    1fd8:	4a08      	ldr	r2, [pc, #32]	; (1ffc <grid_ui_encoder_hardware_init+0x4c>)
    1fda:	2100      	movs	r1, #0
    1fdc:	4620      	mov	r0, r4
    1fde:	4b08      	ldr	r3, [pc, #32]	; (2000 <grid_ui_encoder_hardware_init+0x50>)
    1fe0:	4798      	blx	r3
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	41008000 	.word	0x41008000
    1fe8:	c0000020 	.word	0xc0000020
    1fec:	200012b4 	.word	0x200012b4
    1ff0:	00003819 	.word	0x00003819
    1ff4:	20002778 	.word	0x20002778
    1ff8:	00003901 	.word	0x00003901
    1ffc:	0000203d 	.word	0x0000203d
    2000:	000038bd 	.word	0x000038bd

00002004 <grid_ui_encoder_hardware_start_transfer>:

}

void grid_ui_encoder_hardware_start_transfer(void)
{
    2004:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2006:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    200a:	4b06      	ldr	r3, [pc, #24]	; (2024 <grid_ui_encoder_hardware_start_transfer+0x20>)
    200c:	619a      	str	r2, [r3, #24]
		

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);
		
	spi_m_async_enable(&UI_SPI);
    200e:	4c06      	ldr	r4, [pc, #24]	; (2028 <grid_ui_encoder_hardware_start_transfer+0x24>)
    2010:	4620      	mov	r0, r4
    2012:	4b06      	ldr	r3, [pc, #24]	; (202c <grid_ui_encoder_hardware_start_transfer+0x28>)
    2014:	4798      	blx	r3
		
	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2016:	2308      	movs	r3, #8
    2018:	4a05      	ldr	r2, [pc, #20]	; (2030 <grid_ui_encoder_hardware_start_transfer+0x2c>)
    201a:	4906      	ldr	r1, [pc, #24]	; (2034 <grid_ui_encoder_hardware_start_transfer+0x30>)
    201c:	4620      	mov	r0, r4
    201e:	4c06      	ldr	r4, [pc, #24]	; (2038 <grid_ui_encoder_hardware_start_transfer+0x34>)
    2020:	47a0      	blx	r4
    2022:	bd10      	pop	{r4, pc}
    2024:	41008000 	.word	0x41008000
    2028:	200012b4 	.word	0x200012b4
    202c:	000037f1 	.word	0x000037f1
    2030:	20000a3c 	.word	0x20000a3c
    2034:	20000300 	.word	0x20000300
    2038:	00003855 	.word	0x00003855

0000203c <grid_ui_encoder_hardware_transfer_complete_cb>:
{
    203c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
    2040:	2101      	movs	r1, #1
    2042:	4608      	mov	r0, r1
    2044:	4c5c      	ldr	r4, [pc, #368]	; (21b8 <grid_ui_encoder_hardware_transfer_complete_cb+0x17c>)
    2046:	47a0      	blx	r4
	grid_sync_set_level(GRID_SYNC_1, 1);
    2048:	2101      	movs	r1, #1
    204a:	4608      	mov	r0, r1
    204c:	4b5b      	ldr	r3, [pc, #364]	; (21bc <grid_ui_encoder_hardware_transfer_complete_cb+0x180>)
    204e:	4798      	blx	r3
	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
    2050:	2101      	movs	r1, #1
    2052:	4608      	mov	r0, r1
    2054:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2056:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    205a:	4b59      	ldr	r3, [pc, #356]	; (21c0 <grid_ui_encoder_hardware_transfer_complete_cb+0x184>)
    205c:	615a      	str	r2, [r3, #20]
    205e:	2100      	movs	r1, #0
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    2060:	4d58      	ldr	r5, [pc, #352]	; (21c4 <grid_ui_encoder_hardware_transfer_complete_cb+0x188>)
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    2062:	4c59      	ldr	r4, [pc, #356]	; (21c8 <grid_ui_encoder_hardware_transfer_complete_cb+0x18c>)
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2064:	4f59      	ldr	r7, [pc, #356]	; (21cc <grid_ui_encoder_hardware_transfer_complete_cb+0x190>)
    2066:	485a      	ldr	r0, [pc, #360]	; (21d0 <grid_ui_encoder_hardware_transfer_complete_cb+0x194>)
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    2068:	2601      	movs	r6, #1
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    206a:	468e      	mov	lr, r1
    206c:	e05d      	b.n	212a <grid_ui_encoder_hardware_transfer_complete_cb+0xee>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_a;
    206e:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
    2072:	f1bc 0f00 	cmp.w	ip, #0
    2076:	bf0c      	ite	eq
    2078:	f04f 0901 	moveq.w	r9, #1
    207c:	f04f 0900 	movne.w	r9, #0
    2080:	f888 9005 	strb.w	r9, [r8, #5]
				if (phase_a && phase_b){
    2084:	f000 808d 	beq.w	21a2 <grid_ui_encoder_hardware_transfer_complete_cb+0x166>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    2088:	f898 c003 	ldrb.w	ip, [r8, #3]
    208c:	f10c 3cff 	add.w	ip, ip, #4294967295
    2090:	fa5f f989 	uxtb.w	r9, r9
    2094:	eb0c 0c49 	add.w	ip, ip, r9, lsl #1
    2098:	f888 c003 	strb.w	ip, [r8, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    209c:	f888 6004 	strb.w	r6, [r8, #4]
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    20a0:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    20a4:	f89c c007 	ldrb.w	ip, [ip, #7]
    20a8:	459c      	cmp	ip, r3
    20aa:	d03b      	beq.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    20ac:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    20b0:	f88c 3007 	strb.w	r3, [ip, #7]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_b;
    20b4:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    20b8:	f88c 3005 	strb.w	r3, [ip, #5]
				if (phase_a && phase_b){
    20bc:	b393      	cbz	r3, 2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    20be:	f89c 3003 	ldrb.w	r3, [ip, #3]
    20c2:	3301      	adds	r3, #1
    20c4:	f88c 3003 	strb.w	r3, [ip, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    20c8:	f88c 6004 	strb.w	r6, [ip, #4]
    20cc:	e02a      	b.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    20ce:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
    20d2:	f898 8007 	ldrb.w	r8, [r8, #7]
    20d6:	4598      	cmp	r8, r3
    20d8:	d024      	beq.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    20da:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
    20de:	f888 3007 	strb.w	r3, [r8, #7]
				if (phase_a == 0){
    20e2:	f1bc 0f00 	cmp.w	ip, #0
    20e6:	d1e5      	bne.n	20b4 <grid_ui_encoder_hardware_transfer_complete_cb+0x78>
    20e8:	e017      	b.n	211a <grid_ui_encoder_hardware_transfer_complete_cb+0xde>
	UI_SPI_DONE = 1;
    20ea:	4a36      	ldr	r2, [pc, #216]	; (21c4 <grid_ui_encoder_hardware_transfer_complete_cb+0x188>)
    20ec:	2301      	movs	r3, #1
    20ee:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    20f2:	f102 0313 	add.w	r3, r2, #19
    20f6:	321b      	adds	r2, #27
		UI_SPI_RX_BUFFER[i] = 0;
    20f8:	2100      	movs	r1, #0
    20fa:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (uint8_t i=0; i<8; i++){
    20fe:	4293      	cmp	r3, r2
    2100:	d1fb      	bne.n	20fa <grid_ui_encoder_hardware_transfer_complete_cb+0xbe>
	grid_sync_set_level(GRID_SYNC_1, 0);
    2102:	2100      	movs	r1, #0
    2104:	2001      	movs	r0, #1
    2106:	4b2d      	ldr	r3, [pc, #180]	; (21bc <grid_ui_encoder_hardware_transfer_complete_cb+0x180>)
    2108:	4798      	blx	r3
	grid_ui_encoder_hardware_start_transfer();
    210a:	4b32      	ldr	r3, [pc, #200]	; (21d4 <grid_ui_encoder_hardware_transfer_complete_cb+0x198>)
    210c:	4798      	blx	r3
}
    210e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    2112:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    2116:	f88c e007 	strb.w	lr, [ip, #7]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_b;
    211a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    211e:	f083 0301 	eor.w	r3, r3, #1
    2122:	7153      	strb	r3, [r2, #5]
    2124:	3101      	adds	r1, #1
	for (uint8_t i=0; i<16; i++){
    2126:	2910      	cmp	r1, #16
    2128:	d0df      	beq.n	20ea <grid_ui_encoder_hardware_transfer_complete_cb+0xae>
    212a:	b2ca      	uxtb	r2, r1
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    212c:	eb05 0352 	add.w	r3, r5, r2, lsr #1
    2130:	7d1b      	ldrb	r3, [r3, #20]
    2132:	f002 0201 	and.w	r2, r2, #1
    2136:	0092      	lsls	r2, r2, #2
    2138:	4113      	asrs	r3, r2
    213a:	b2db      	uxtb	r3, r3
    213c:	f003 0c0f 	and.w	ip, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    2140:	5c62      	ldrb	r2, [r4, r1]
    2142:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    2144:	4594      	cmp	ip, r2
    2146:	d0ed      	beq.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
			uint8_t button_value = new_value>>2;
    2148:	ea4f 089c 	mov.w	r8, ip, lsr #2
			uint8_t phase_a = (new_value>>1)&1;
    214c:	f3cc 0c40 	ubfx	ip, ip, #1, #1
			uint8_t phase_b = (new_value)&1;
    2150:	f003 0301 	and.w	r3, r3, #1
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2154:	5dca      	ldrb	r2, [r1, r7]
    2156:	eb00 09c2 	add.w	r9, r0, r2, lsl #3
    215a:	f899 9001 	ldrb.w	r9, [r9, #1]
    215e:	45c1      	cmp	r9, r8
    2160:	d005      	beq.n	216e <grid_ui_encoder_hardware_transfer_complete_cb+0x132>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    2162:	eb00 09c2 	add.w	r9, r0, r2, lsl #3
    2166:	f889 6002 	strb.w	r6, [r9, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    216a:	f889 8001 	strb.w	r8, [r9, #1]
			if (phase_a != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous){
    216e:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
    2172:	f898 8006 	ldrb.w	r8, [r8, #6]
    2176:	45e0      	cmp	r8, ip
    2178:	d0a9      	beq.n	20ce <grid_ui_encoder_hardware_transfer_complete_cb+0x92>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = phase_a;
    217a:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
    217e:	f888 c006 	strb.w	ip, [r8, #6]
				if (phase_b == 0){
    2182:	2b00      	cmp	r3, #0
    2184:	f47f af73 	bne.w	206e <grid_ui_encoder_hardware_transfer_complete_cb+0x32>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_a;
    2188:	f888 c005 	strb.w	ip, [r8, #5]
				if (phase_a && phase_b){
    218c:	f1bc 0f00 	cmp.w	ip, #0
    2190:	d186      	bne.n	20a0 <grid_ui_encoder_hardware_transfer_complete_cb+0x64>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    2192:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    2196:	f89c c007 	ldrb.w	ip, [ip, #7]
    219a:	f1bc 0f00 	cmp.w	ip, #0
    219e:	d1b8      	bne.n	2112 <grid_ui_encoder_hardware_transfer_complete_cb+0xd6>
    21a0:	e7c0      	b.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
    21a2:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    21a6:	f89c c007 	ldrb.w	ip, [ip, #7]
    21aa:	459c      	cmp	ip, r3
    21ac:	d0ba      	beq.n	2124 <grid_ui_encoder_hardware_transfer_complete_cb+0xe8>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    21ae:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    21b2:	f88c 3007 	strb.w	r3, [ip, #7]
    21b6:	e7b0      	b.n	211a <grid_ui_encoder_hardware_transfer_complete_cb+0xde>
    21b8:	00001e21 	.word	0x00001e21
    21bc:	00001ef9 	.word	0x00001ef9
    21c0:	41008000 	.word	0x41008000
    21c4:	20000a28 	.word	0x20000a28
    21c8:	20002768 	.word	0x20002768
    21cc:	0000abf0 	.word	0x0000abf0
    21d0:	2000277c 	.word	0x2000277c
    21d4:	00002005 	.word	0x00002005

000021d8 <grid_module_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_init(void){
    21d8:	b510      	push	{r4, lr}
				
	grid_port_init_all();		
    21da:	4b3a      	ldr	r3, [pc, #232]	; (22c4 <grid_module_init+0xec>)
    21dc:	4798      	blx	r3
	grid_sys_uart_init();	
    21de:	4b3a      	ldr	r3, [pc, #232]	; (22c8 <grid_module_init+0xf0>)
    21e0:	4798      	blx	r3
	grid_rx_dma_init();	
    21e2:	4b3a      	ldr	r3, [pc, #232]	; (22cc <grid_module_init+0xf4>)
    21e4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    21ea:	4b39      	ldr	r3, [pc, #228]	; (22d0 <grid_module_init+0xf8>)
    21ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);


	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    21f0:	4b38      	ldr	r3, [pc, #224]	; (22d4 <grid_module_init+0xfc>)
    21f2:	4798      	blx	r3
    21f4:	b1a0      	cbz	r0, 2220 <grid_module_init+0x48>
		
		//grid_module_b16_revb_init(&grid_ui_state);	
		
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    21f6:	4b37      	ldr	r3, [pc, #220]	; (22d4 <grid_module_init+0xfc>)
    21f8:	4798      	blx	r3
    21fa:	2880      	cmp	r0, #128	; 0x80
    21fc:	d01f      	beq.n	223e <grid_module_init+0x66>
		
		grid_module_bu16_revb_init(&grid_ui_state);	
		
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    21fe:	4b35      	ldr	r3, [pc, #212]	; (22d4 <grid_module_init+0xfc>)
    2200:	4798      	blx	r3
    2202:	2840      	cmp	r0, #64	; 0x40
    2204:	d01f      	beq.n	2246 <grid_module_init+0x6e>
// 		grid_ui_potentiometer_hardware_init();
// 		grid_ui_potentiometer_hardware_start_transfer();
// 					
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    2206:	4b33      	ldr	r3, [pc, #204]	; (22d4 <grid_module_init+0xfc>)
    2208:	4798      	blx	r3
    220a:	28c0      	cmp	r0, #192	; 0xc0
    220c:	d04e      	beq.n	22ac <grid_module_init+0xd4>
	
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    220e:	4c32      	ldr	r4, [pc, #200]	; (22d8 <grid_module_init+0x100>)
    2210:	4932      	ldr	r1, [pc, #200]	; (22dc <grid_module_init+0x104>)
    2212:	4620      	mov	r0, r4
    2214:	4b32      	ldr	r3, [pc, #200]	; (22e0 <grid_module_init+0x108>)
    2216:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    2218:	4620      	mov	r0, r4
    221a:	4b32      	ldr	r3, [pc, #200]	; (22e4 <grid_module_init+0x10c>)
    221c:	4798      	blx	r3
    221e:	bd10      	pop	{r4, pc}
		grid_ain_init(16, 5, 14, 7);
    2220:	2307      	movs	r3, #7
    2222:	220e      	movs	r2, #14
    2224:	2105      	movs	r1, #5
    2226:	2010      	movs	r0, #16
    2228:	4c2f      	ldr	r4, [pc, #188]	; (22e8 <grid_module_init+0x110>)
    222a:	47a0      	blx	r4
		grid_led_init(&grid_led_state, 16);			
    222c:	4c2f      	ldr	r4, [pc, #188]	; (22ec <grid_module_init+0x114>)
    222e:	2110      	movs	r1, #16
    2230:	4620      	mov	r0, r4
    2232:	4b2f      	ldr	r3, [pc, #188]	; (22f0 <grid_module_init+0x118>)
    2234:	4798      	blx	r3
		grid_module_init_animation(&grid_led_state);	
    2236:	4620      	mov	r0, r4
    2238:	4b2e      	ldr	r3, [pc, #184]	; (22f4 <grid_module_init+0x11c>)
    223a:	4798      	blx	r3
    223c:	e7db      	b.n	21f6 <grid_module_init+0x1e>
		grid_module_bu16_revb_init(&grid_ui_state);	
    223e:	482e      	ldr	r0, [pc, #184]	; (22f8 <grid_module_init+0x120>)
    2240:	4b2e      	ldr	r3, [pc, #184]	; (22fc <grid_module_init+0x124>)
    2242:	4798      	blx	r3
    2244:	e7db      	b.n	21fe <grid_module_init+0x26>
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    2246:	4b2e      	ldr	r3, [pc, #184]	; (2300 <grid_module_init+0x128>)
    2248:	791a      	ldrb	r2, [r3, #4]
    224a:	f042 0201 	orr.w	r2, r2, #1
    224e:	711a      	strb	r2, [r3, #4]
    2250:	795a      	ldrb	r2, [r3, #5]
    2252:	f042 0201 	orr.w	r2, r2, #1
    2256:	715a      	strb	r2, [r3, #5]
    2258:	799a      	ldrb	r2, [r3, #6]
    225a:	f042 0201 	orr.w	r2, r2, #1
    225e:	719a      	strb	r2, [r3, #6]
    2260:	79da      	ldrb	r2, [r3, #7]
    2262:	f042 0201 	orr.w	r2, r2, #1
    2266:	71da      	strb	r2, [r3, #7]
    2268:	f993 0011 	ldrsb.w	r0, [r3, #17]
    226c:	f993 1012 	ldrsb.w	r1, [r3, #18]
    2270:	f993 2013 	ldrsb.w	r2, [r3, #19]
    2274:	7c1c      	ldrb	r4, [r3, #16]
    2276:	f044 0403 	orr.w	r4, r4, #3
    227a:	741c      	strb	r4, [r3, #16]
    227c:	f040 0003 	orr.w	r0, r0, #3
    2280:	7458      	strb	r0, [r3, #17]
    2282:	f041 0103 	orr.w	r1, r1, #3
    2286:	7499      	strb	r1, [r3, #18]
    2288:	f042 0203 	orr.w	r2, r2, #3
    228c:	74da      	strb	r2, [r3, #19]
		grid_ain_init(16, 5, 14, 7);
    228e:	2307      	movs	r3, #7
    2290:	220e      	movs	r2, #14
    2292:	2105      	movs	r1, #5
    2294:	2010      	movs	r0, #16
    2296:	4c14      	ldr	r4, [pc, #80]	; (22e8 <grid_module_init+0x110>)
    2298:	47a0      	blx	r4
		grid_led_init(&grid_led_state, 16);		
    229a:	4c14      	ldr	r4, [pc, #80]	; (22ec <grid_module_init+0x114>)
    229c:	2110      	movs	r1, #16
    229e:	4620      	mov	r0, r4
    22a0:	4b13      	ldr	r3, [pc, #76]	; (22f0 <grid_module_init+0x118>)
    22a2:	4798      	blx	r3
		grid_module_init_animation(&grid_led_state);
    22a4:	4620      	mov	r0, r4
    22a6:	4b13      	ldr	r3, [pc, #76]	; (22f4 <grid_module_init+0x11c>)
    22a8:	4798      	blx	r3
    22aa:	e7ac      	b.n	2206 <grid_module_init+0x2e>
		grid_led_init(&grid_led_state, 16);
    22ac:	4c0f      	ldr	r4, [pc, #60]	; (22ec <grid_module_init+0x114>)
    22ae:	2110      	movs	r1, #16
    22b0:	4620      	mov	r0, r4
    22b2:	4b0f      	ldr	r3, [pc, #60]	; (22f0 <grid_module_init+0x118>)
    22b4:	4798      	blx	r3
		grid_module_init_animation(&grid_led_state);
    22b6:	4620      	mov	r0, r4
    22b8:	4b0e      	ldr	r3, [pc, #56]	; (22f4 <grid_module_init+0x11c>)
    22ba:	4798      	blx	r3
		grid_ui_encoder_hardware_init();
    22bc:	4b11      	ldr	r3, [pc, #68]	; (2304 <grid_module_init+0x12c>)
    22be:	4798      	blx	r3
    22c0:	e7a5      	b.n	220e <grid_module_init+0x36>
    22c2:	bf00      	nop
    22c4:	00001255 	.word	0x00001255
    22c8:	000027e1 	.word	0x000027e1
    22cc:	00002949 	.word	0x00002949
    22d0:	41008000 	.word	0x41008000
    22d4:	00002ab5 	.word	0x00002ab5
    22d8:	200013b4 	.word	0x200013b4
    22dc:	20002778 	.word	0x20002778
    22e0:	00003edd 	.word	0x00003edd
    22e4:	00003eb1 	.word	0x00003eb1
    22e8:	00000f7d 	.word	0x00000f7d
    22ec:	200023bc 	.word	0x200023bc
    22f0:	00001c59 	.word	0x00001c59
    22f4:	00001f51 	.word	0x00001f51
    22f8:	20001a08 	.word	0x20001a08
    22fc:	00002569 	.word	0x00002569
    2300:	20000a28 	.word	0x20000a28
    2304:	00001fb1 	.word	0x00001fb1

00002308 <grid_module_hardware_transfer_complete_cb>:
	
}

static void grid_module_hardware_transfer_complete_cb(void){
	
	if (grid_ui_button_hardware_transfer_complete == 0){
    2308:	4b8b      	ldr	r3, [pc, #556]	; (2538 <grid_module_hardware_transfer_complete_cb+0x230>)
    230a:	781b      	ldrb	r3, [r3, #0]
    230c:	b92b      	cbnz	r3, 231a <grid_module_hardware_transfer_complete_cb+0x12>
		grid_ui_button_hardware_transfer_complete++;
    230e:	4a8a      	ldr	r2, [pc, #552]	; (2538 <grid_module_hardware_transfer_complete_cb+0x230>)
    2310:	7813      	ldrb	r3, [r2, #0]
    2312:	3301      	adds	r3, #1
    2314:	b2db      	uxtb	r3, r3
    2316:	7013      	strb	r3, [r2, #0]
    2318:	4770      	bx	lr
static void grid_module_hardware_transfer_complete_cb(void){
    231a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    231e:	b087      	sub	sp, #28
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    2320:	a801      	add	r0, sp, #4
    2322:	4c86      	ldr	r4, [pc, #536]	; (253c <grid_module_hardware_transfer_complete_cb+0x234>)
    2324:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2326:	a804      	add	r0, sp, #16
    2328:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    232a:	4b85      	ldr	r3, [pc, #532]	; (2540 <grid_module_hardware_transfer_complete_cb+0x238>)
    232c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2330:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2334:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2338:	4054      	eors	r4, r2
    233a:	400c      	ands	r4, r1
    233c:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    233e:	a804      	add	r0, sp, #16
    2340:	4b80      	ldr	r3, [pc, #512]	; (2544 <grid_module_hardware_transfer_complete_cb+0x23c>)
    2342:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2344:	4b80      	ldr	r3, [pc, #512]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    2346:	685b      	ldr	r3, [r3, #4]
    2348:	68db      	ldr	r3, [r3, #12]
    234a:	781a      	ldrb	r2, [r3, #0]
    234c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2350:	4294      	cmp	r4, r2
    2352:	d010      	beq.n	2376 <grid_module_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2354:	2a00      	cmp	r2, #0
    2356:	f040 80ea 	bne.w	252e <grid_module_hardware_transfer_complete_cb+0x226>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    235a:	2201      	movs	r2, #1
    235c:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    235e:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2360:	4c79      	ldr	r4, [pc, #484]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    2362:	6863      	ldr	r3, [r4, #4]
    2364:	6858      	ldr	r0, [r3, #4]
    2366:	2102      	movs	r1, #2
    2368:	3003      	adds	r0, #3
    236a:	4b78      	ldr	r3, [pc, #480]	; (254c <grid_module_hardware_transfer_complete_cb+0x244>)
    236c:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    236e:	2100      	movs	r1, #0
    2370:	4620      	mov	r0, r4
    2372:	4b77      	ldr	r3, [pc, #476]	; (2550 <grid_module_hardware_transfer_complete_cb+0x248>)
    2374:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    2376:	a801      	add	r0, sp, #4
    2378:	4b72      	ldr	r3, [pc, #456]	; (2544 <grid_module_hardware_transfer_complete_cb+0x23c>)
    237a:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    237c:	2300      	movs	r3, #0
    237e:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    2382:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    2386:	496c      	ldr	r1, [pc, #432]	; (2538 <grid_module_hardware_transfer_complete_cb+0x230>)
    2388:	784b      	ldrb	r3, [r1, #1]
    238a:	4a72      	ldr	r2, [pc, #456]	; (2554 <grid_module_hardware_transfer_complete_cb+0x24c>)
    238c:	18d0      	adds	r0, r2, r3
    238e:	7a06      	ldrb	r6, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    2390:	5cd5      	ldrb	r5, [r2, r3]
	
	/* Update the multiplexer */
	
	grid_module_mux++;
    2392:	3301      	adds	r3, #1
    2394:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    2396:	f003 0207 	and.w	r2, r3, #7
    239a:	704a      	strb	r2, [r1, #1]
	if (level) {
    239c:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    23a4:	4b66      	ldr	r3, [pc, #408]	; (2540 <grid_module_hardware_transfer_complete_cb+0x238>)
    23a6:	bf14      	ite	ne
    23a8:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23ac:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    23b0:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23b4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    23b8:	4b61      	ldr	r3, [pc, #388]	; (2540 <grid_module_hardware_transfer_complete_cb+0x238>)
    23ba:	bf14      	ite	ne
    23bc:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23c0:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    23c4:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    23ca:	4b5d      	ldr	r3, [pc, #372]	; (2540 <grid_module_hardware_transfer_complete_cb+0x238>)
    23cc:	bf14      	ite	ne
    23ce:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23d2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_mux/2%2);
	gpio_set_pin_level(MUX_C, grid_module_mux/4%2);
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    23d6:	2302      	movs	r3, #2
    23d8:	f10d 0216 	add.w	r2, sp, #22
    23dc:	2100      	movs	r1, #0
    23de:	485e      	ldr	r0, [pc, #376]	; (2558 <grid_module_hardware_transfer_complete_cb+0x250>)
    23e0:	4c5e      	ldr	r4, [pc, #376]	; (255c <grid_module_hardware_transfer_complete_cb+0x254>)
    23e2:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    23e4:	2302      	movs	r3, #2
    23e6:	aa05      	add	r2, sp, #20
    23e8:	2100      	movs	r1, #0
    23ea:	485d      	ldr	r0, [pc, #372]	; (2560 <grid_module_hardware_transfer_complete_cb+0x258>)
    23ec:	47a0      	blx	r4
	

	
	if (adcresult_0>10000){
    23ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    23f2:	f242 7310 	movw	r3, #10000	; 0x2710
    23f6:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    23f8:	bf8c      	ite	hi
    23fa:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    23fc:	237f      	movls	r3, #127	; 0x7f
    23fe:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	
	if (adcresult_1>10000){
    2402:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    2406:	f242 7310 	movw	r3, #10000	; 0x2710
    240a:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    240c:	bf8c      	ite	hi
    240e:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    2410:	237f      	movls	r3, #127	; 0x7f
    2412:	f8ad 3014 	strh.w	r3, [sp, #20]
	}
	
	CRITICAL_SECTION_ENTER()
    2416:	a802      	add	r0, sp, #8
    2418:	4b48      	ldr	r3, [pc, #288]	; (253c <grid_module_hardware_transfer_complete_cb+0x234>)
    241a:	4798      	blx	r3

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    241c:	1c74      	adds	r4, r6, #1
    241e:	0124      	lsls	r4, r4, #4
    2420:	4b49      	ldr	r3, [pc, #292]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    2422:	685b      	ldr	r3, [r3, #4]
    2424:	4423      	add	r3, r4
    2426:	68da      	ldr	r2, [r3, #12]
    2428:	7812      	ldrb	r2, [r2, #0]
    242a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    242e:	4291      	cmp	r1, r2
    2430:	d02f      	beq.n	2492 <grid_module_hardware_transfer_complete_cb+0x18a>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2432:	2a00      	cmp	r2, #0
    2434:	bf0c      	ite	eq
    2436:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    243a:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    243e:	6858      	ldr	r0, [r3, #4]
    2440:	bf0c      	ite	eq
    2442:	2290      	moveq	r2, #144	; 0x90
    2444:	2280      	movne	r2, #128	; 0x80
    2446:	2102      	movs	r1, #2
    2448:	3005      	adds	r0, #5
    244a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 254c <grid_module_hardware_transfer_complete_cb+0x244>
    244e:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2450:	4f3d      	ldr	r7, [pc, #244]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	4423      	add	r3, r4
    2456:	6858      	ldr	r0, [r3, #4]
    2458:	4632      	mov	r2, r6
    245a:	2102      	movs	r1, #2
    245c:	3007      	adds	r0, #7
    245e:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	4423      	add	r3, r4
    2464:	6858      	ldr	r0, [r3, #4]
    2466:	464a      	mov	r2, r9
    2468:	2102      	movs	r1, #2
    246a:	3009      	adds	r0, #9
    246c:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	4423      	add	r3, r4
    2472:	6858      	ldr	r0, [r3, #4]
    2474:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2478:	2102      	movs	r1, #2
    247a:	3015      	adds	r0, #21
    247c:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	441c      	add	r4, r3
    2482:	68e3      	ldr	r3, [r4, #12]
    2484:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2488:	1c71      	adds	r1, r6, #1
    248a:	b2c9      	uxtb	r1, r1
    248c:	4638      	mov	r0, r7
    248e:	4b30      	ldr	r3, [pc, #192]	; (2550 <grid_module_hardware_transfer_complete_cb+0x248>)
    2490:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    2492:	a802      	add	r0, sp, #8
    2494:	4b2b      	ldr	r3, [pc, #172]	; (2544 <grid_module_hardware_transfer_complete_cb+0x23c>)
    2496:	4798      	blx	r3
	
	
	CRITICAL_SECTION_ENTER()
    2498:	a803      	add	r0, sp, #12
    249a:	4b28      	ldr	r3, [pc, #160]	; (253c <grid_module_hardware_transfer_complete_cb+0x234>)
    249c:	4798      	blx	r3

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    249e:	1c6c      	adds	r4, r5, #1
    24a0:	0124      	lsls	r4, r4, #4
    24a2:	4b29      	ldr	r3, [pc, #164]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    24a4:	685b      	ldr	r3, [r3, #4]
    24a6:	4423      	add	r3, r4
    24a8:	68da      	ldr	r2, [r3, #12]
    24aa:	7812      	ldrb	r2, [r2, #0]
    24ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    24b0:	4291      	cmp	r1, r2
    24b2:	d02e      	beq.n	2512 <grid_module_hardware_transfer_complete_cb+0x20a>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    24b4:	2a00      	cmp	r2, #0
    24b6:	bf0c      	ite	eq
    24b8:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    24bc:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    24c0:	6858      	ldr	r0, [r3, #4]
    24c2:	bf0c      	ite	eq
    24c4:	2290      	moveq	r2, #144	; 0x90
    24c6:	2280      	movne	r2, #128	; 0x80
    24c8:	2102      	movs	r1, #2
    24ca:	3005      	adds	r0, #5
    24cc:	4f1f      	ldr	r7, [pc, #124]	; (254c <grid_module_hardware_transfer_complete_cb+0x244>)
    24ce:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    24d0:	4e1d      	ldr	r6, [pc, #116]	; (2548 <grid_module_hardware_transfer_complete_cb+0x240>)
    24d2:	6873      	ldr	r3, [r6, #4]
    24d4:	4423      	add	r3, r4
    24d6:	6858      	ldr	r0, [r3, #4]
    24d8:	462a      	mov	r2, r5
    24da:	2102      	movs	r1, #2
    24dc:	3007      	adds	r0, #7
    24de:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    24e0:	6873      	ldr	r3, [r6, #4]
    24e2:	4423      	add	r3, r4
    24e4:	6858      	ldr	r0, [r3, #4]
    24e6:	4642      	mov	r2, r8
    24e8:	2102      	movs	r1, #2
    24ea:	3009      	adds	r0, #9
    24ec:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    24ee:	6873      	ldr	r3, [r6, #4]
    24f0:	4423      	add	r3, r4
    24f2:	6858      	ldr	r0, [r3, #4]
    24f4:	ea4f 0248 	mov.w	r2, r8, lsl #1
    24f8:	2102      	movs	r1, #2
    24fa:	3015      	adds	r0, #21
    24fc:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    24fe:	6873      	ldr	r3, [r6, #4]
    2500:	441c      	add	r4, r3
    2502:	68e3      	ldr	r3, [r4, #12]
    2504:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2508:	1c69      	adds	r1, r5, #1
    250a:	b2c9      	uxtb	r1, r1
    250c:	4630      	mov	r0, r6
    250e:	4b10      	ldr	r3, [pc, #64]	; (2550 <grid_module_hardware_transfer_complete_cb+0x248>)
    2510:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    2512:	a803      	add	r0, sp, #12
    2514:	4b0b      	ldr	r3, [pc, #44]	; (2544 <grid_module_hardware_transfer_complete_cb+0x23c>)
    2516:	4798      	blx	r3
	
	
	grid_ui_button_hardware_transfer_complete = 0;
    2518:	2200      	movs	r2, #0
    251a:	4b07      	ldr	r3, [pc, #28]	; (2538 <grid_module_hardware_transfer_complete_cb+0x230>)
    251c:	701a      	strb	r2, [r3, #0]
	adc_async_start_conversion(&ADC_0);
    251e:	480e      	ldr	r0, [pc, #56]	; (2558 <grid_module_hardware_transfer_complete_cb+0x250>)
    2520:	4c10      	ldr	r4, [pc, #64]	; (2564 <grid_module_hardware_transfer_complete_cb+0x25c>)
    2522:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2524:	480e      	ldr	r0, [pc, #56]	; (2560 <grid_module_hardware_transfer_complete_cb+0x258>)
    2526:	47a0      	blx	r4
	grid_module_hardware_start_transfer();
}
    2528:	b007      	add	sp, #28
    252a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 0;
    252e:	2200      	movs	r2, #0
    2530:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2532:	2281      	movs	r2, #129	; 0x81
    2534:	e714      	b.n	2360 <grid_module_hardware_transfer_complete_cb+0x58>
    2536:	bf00      	nop
    2538:	20000a4c 	.word	0x20000a4c
    253c:	00003371 	.word	0x00003371
    2540:	41008000 	.word	0x41008000
    2544:	0000337f 	.word	0x0000337f
    2548:	20001a08 	.word	0x20001a08
    254c:	00002a7d 	.word	0x00002a7d
    2550:	00002e5b 	.word	0x00002e5b
    2554:	0000ac00 	.word	0x0000ac00
    2558:	20001404 	.word	0x20001404
    255c:	00003269 	.word	0x00003269
    2560:	200015d4 	.word	0x200015d4
    2564:	00003349 	.word	0x00003349

00002568 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    256c:	b09b      	sub	sp, #108	; 0x6c
    256e:	4682      	mov	sl, r0
	
	mod->report_length = 17;
    2570:	2311      	movs	r3, #17
    2572:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    2574:	f44f 7088 	mov.w	r0, #272	; 0x110
    2578:	4b43      	ldr	r3, [pc, #268]	; (2688 <grid_module_bu16_revb_init+0x120>)
    257a:	4798      	blx	r3
    257c:	f8ca 0004 	str.w	r0, [sl, #4]
    2580:	2501      	movs	r5, #1
    2582:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2584:	f8df b13c 	ldr.w	fp, [pc, #316]	; 26c4 <grid_module_bu16_revb_init+0x15c>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    2588:	4f40      	ldr	r7, [pc, #256]	; (268c <grid_module_bu16_revb_init+0x124>)
    258a:	e026      	b.n	25da <grid_module_bu16_revb_init+0x72>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    258c:	2303      	movs	r3, #3
    258e:	9303      	str	r3, [sp, #12]
    2590:	2339      	movs	r3, #57	; 0x39
    2592:	9302      	str	r3, [sp, #8]
    2594:	2383      	movs	r3, #131	; 0x83
    2596:	9301      	str	r3, [sp, #4]
    2598:	2380      	movs	r3, #128	; 0x80
    259a:	9300      	str	r3, [sp, #0]
    259c:	2301      	movs	r3, #1
    259e:	2202      	movs	r2, #2
    25a0:	493b      	ldr	r1, [pc, #236]	; (2690 <grid_module_bu16_revb_init+0x128>)
    25a2:	a812      	add	r0, sp, #72	; 0x48
    25a4:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    25a6:	a812      	add	r0, sp, #72	; 0x48
    25a8:	47b8      	blx	r7
    25aa:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    25ac:	ae0d      	add	r6, sp, #52	; 0x34
    25ae:	4b39      	ldr	r3, [pc, #228]	; (2694 <grid_module_bu16_revb_init+0x12c>)
    25b0:	681b      	ldr	r3, [r3, #0]
    25b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    25b6:	0c1b      	lsrs	r3, r3, #16
    25b8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    25bc:	4630      	mov	r0, r6
    25be:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    25c0:	b2c0      	uxtb	r0, r0
    25c2:	9001      	str	r0, [sp, #4]
    25c4:	9600      	str	r6, [sp, #0]
    25c6:	fa5f f388 	uxtb.w	r3, r8
    25ca:	aa12      	add	r2, sp, #72	; 0x48
    25cc:	2100      	movs	r1, #0
    25ce:	4650      	mov	r0, sl
    25d0:	4e31      	ldr	r6, [pc, #196]	; (2698 <grid_module_bu16_revb_init+0x130>)
    25d2:	47b0      	blx	r6
    25d4:	3401      	adds	r4, #1
    25d6:	3501      	adds	r5, #1
    25d8:	b2ed      	uxtb	r5, r5
		if (i == 0){
    25da:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    25de:	d0d5      	beq.n	258c <grid_module_bu16_revb_init+0x24>
    25e0:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    25e2:	2103      	movs	r1, #3
    25e4:	910b      	str	r1, [sp, #44]	; 0x2c
    25e6:	2300      	movs	r3, #0
    25e8:	930a      	str	r3, [sp, #40]	; 0x28
    25ea:	9009      	str	r0, [sp, #36]	; 0x24
    25ec:	2263      	movs	r2, #99	; 0x63
    25ee:	9208      	str	r2, [sp, #32]
    25f0:	9307      	str	r3, [sp, #28]
    25f2:	9106      	str	r1, [sp, #24]
    25f4:	2202      	movs	r2, #2
    25f6:	9205      	str	r2, [sp, #20]
    25f8:	9104      	str	r1, [sp, #16]
    25fa:	9303      	str	r3, [sp, #12]
    25fc:	9002      	str	r0, [sp, #8]
    25fe:	2190      	movs	r1, #144	; 0x90
    2600:	9101      	str	r1, [sp, #4]
    2602:	9300      	str	r3, [sp, #0]
    2604:	4925      	ldr	r1, [pc, #148]	; (269c <grid_module_bu16_revb_init+0x134>)
    2606:	a812      	add	r0, sp, #72	; 0x48
    2608:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    260a:	a812      	add	r0, sp, #72	; 0x48
    260c:	47b8      	blx	r7
    260e:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    2610:	ae0d      	add	r6, sp, #52	; 0x34
    2612:	4b20      	ldr	r3, [pc, #128]	; (2694 <grid_module_bu16_revb_init+0x12c>)
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    261a:	0c1b      	lsrs	r3, r3, #16
    261c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		uint8_t helper_length = strlen(helper_template);
    2620:	4630      	mov	r0, r6
    2622:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2624:	b2c0      	uxtb	r0, r0
    2626:	9001      	str	r0, [sp, #4]
    2628:	9600      	str	r6, [sp, #0]
    262a:	fa5f f389 	uxtb.w	r3, r9
    262e:	aa12      	add	r2, sp, #72	; 0x48
    2630:	4641      	mov	r1, r8
    2632:	4650      	mov	r0, sl
    2634:	4e18      	ldr	r6, [pc, #96]	; (2698 <grid_module_bu16_revb_init+0x130>)
    2636:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    2638:	2d10      	cmp	r5, #16
    263a:	d9cb      	bls.n	25d4 <grid_module_bu16_revb_init+0x6c>
		
	}

	grid_led_init(&grid_led_state, 16);
    263c:	4c18      	ldr	r4, [pc, #96]	; (26a0 <grid_module_bu16_revb_init+0x138>)
    263e:	2110      	movs	r1, #16
    2640:	4620      	mov	r0, r4
    2642:	4b18      	ldr	r3, [pc, #96]	; (26a4 <grid_module_bu16_revb_init+0x13c>)
    2644:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    2646:	4620      	mov	r0, r4
    2648:	4b17      	ldr	r3, [pc, #92]	; (26a8 <grid_module_bu16_revb_init+0x140>)
    264a:	4798      	blx	r3
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    264c:	4f17      	ldr	r7, [pc, #92]	; (26ac <grid_module_bu16_revb_init+0x144>)
    264e:	4d18      	ldr	r5, [pc, #96]	; (26b0 <grid_module_bu16_revb_init+0x148>)
    2650:	463b      	mov	r3, r7
    2652:	2200      	movs	r2, #0
    2654:	4611      	mov	r1, r2
    2656:	4628      	mov	r0, r5
    2658:	4e16      	ldr	r6, [pc, #88]	; (26b4 <grid_module_bu16_revb_init+0x14c>)
    265a:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    265c:	4c16      	ldr	r4, [pc, #88]	; (26b8 <grid_module_bu16_revb_init+0x150>)
    265e:	463b      	mov	r3, r7
    2660:	2200      	movs	r2, #0
    2662:	4611      	mov	r1, r2
    2664:	4620      	mov	r0, r4
    2666:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_0, 0);
    2668:	2100      	movs	r1, #0
    266a:	4628      	mov	r0, r5
    266c:	4e13      	ldr	r6, [pc, #76]	; (26bc <grid_module_bu16_revb_init+0x154>)
    266e:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    2670:	2100      	movs	r1, #0
    2672:	4620      	mov	r0, r4
    2674:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    2676:	4628      	mov	r0, r5
    2678:	4d11      	ldr	r5, [pc, #68]	; (26c0 <grid_module_bu16_revb_init+0x158>)
    267a:	47a8      	blx	r5
	adc_async_start_conversion(&ADC_1);
    267c:	4620      	mov	r0, r4
    267e:	47a8      	blx	r5
	
	grid_module_hardware_init();
	grid_module_hardware_start_transfer();
	
}
    2680:	b01b      	add	sp, #108	; 0x6c
    2682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2686:	bf00      	nop
    2688:	0000a239 	.word	0x0000a239
    268c:	0000a431 	.word	0x0000a431
    2690:	0000ac10 	.word	0x0000ac10
    2694:	0000ac28 	.word	0x0000ac28
    2698:	00002d9d 	.word	0x00002d9d
    269c:	0000ac2c 	.word	0x0000ac2c
    26a0:	200023bc 	.word	0x200023bc
    26a4:	00001c59 	.word	0x00001c59
    26a8:	00001f51 	.word	0x00001f51
    26ac:	00002309 	.word	0x00002309
    26b0:	20001404 	.word	0x20001404
    26b4:	000031e9 	.word	0x000031e9
    26b8:	200015d4 	.word	0x200015d4
    26bc:	000031a9 	.word	0x000031a9
    26c0:	00003349 	.word	0x00003349
    26c4:	0000a3e9 	.word	0x0000a3e9

000026c8 <tx_cb_USART_GRID>:

void tx_cb_USART_GRID(struct grid_port* const por){
	

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    26c8:	7f43      	ldrb	r3, [r0, #29]
    26ca:	2b0f      	cmp	r3, #15
    26cc:	d00d      	beq.n	26ea <tx_cb_USART_GRID+0x22>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    26ce:	2b0e      	cmp	r3, #14
    26d0:	d017      	beq.n	2702 <tx_cb_USART_GRID+0x3a>
    26d2:	f100 031b 	add.w	r3, r0, #27
    26d6:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    26da:	2200      	movs	r2, #0
    26dc:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    26e0:	428b      	cmp	r3, r1
    26e2:	d1fb      	bne.n	26dc <tx_cb_USART_GRID+0x14>
		}
		
		por->tx_double_buffer_status = 0;
    26e4:	2300      	movs	r3, #0
    26e6:	8103      	strh	r3, [r0, #8]
    26e8:	4770      	bx	lr
    26ea:	f100 031b 	add.w	r3, r0, #27
    26ee:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    26f2:	2200      	movs	r2, #0
    26f4:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    26f8:	428b      	cmp	r3, r1
    26fa:	d1fb      	bne.n	26f4 <tx_cb_USART_GRID+0x2c>
		por->tx_double_buffer_status = 0;
    26fc:	2300      	movs	r3, #0
    26fe:	8103      	strh	r3, [r0, #8]
    2700:	4770      	bx	lr
    2702:	f100 031b 	add.w	r3, r0, #27
    2706:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    270a:	2200      	movs	r2, #0
    270c:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    2710:	428b      	cmp	r3, r1
    2712:	d1fb      	bne.n	270c <tx_cb_USART_GRID+0x44>
		por->tx_double_buffer_status = 0;
    2714:	2300      	movs	r3, #0
    2716:	8103      	strh	r3, [r0, #8]
    2718:	4770      	bx	lr
	...

0000271c <tx_cb_USART_GRID_W>:
{
    271c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    271e:	4802      	ldr	r0, [pc, #8]	; (2728 <tx_cb_USART_GRID_W+0xc>)
    2720:	4b02      	ldr	r3, [pc, #8]	; (272c <tx_cb_USART_GRID_W+0x10>)
    2722:	4798      	blx	r3
    2724:	bd08      	pop	{r3, pc}
    2726:	bf00      	nop
    2728:	20001c24 	.word	0x20001c24
    272c:	000026c9 	.word	0x000026c9

00002730 <tx_cb_USART_GRID_S>:
{
    2730:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    2732:	4802      	ldr	r0, [pc, #8]	; (273c <tx_cb_USART_GRID_S+0xc>)
    2734:	4b02      	ldr	r3, [pc, #8]	; (2740 <tx_cb_USART_GRID_S+0x10>)
    2736:	4798      	blx	r3
    2738:	bd08      	pop	{r3, pc}
    273a:	bf00      	nop
    273c:	20001e0c 	.word	0x20001e0c
    2740:	000026c9 	.word	0x000026c9

00002744 <tx_cb_USART_GRID_E>:
{
    2744:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    2746:	4802      	ldr	r0, [pc, #8]	; (2750 <tx_cb_USART_GRID_E+0xc>)
    2748:	4b02      	ldr	r3, [pc, #8]	; (2754 <tx_cb_USART_GRID_E+0x10>)
    274a:	4798      	blx	r3
    274c:	bd08      	pop	{r3, pc}
    274e:	bf00      	nop
    2750:	200021d8 	.word	0x200021d8
    2754:	000026c9 	.word	0x000026c9

00002758 <tx_cb_USART_GRID_N>:
{
    2758:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    275a:	4802      	ldr	r0, [pc, #8]	; (2764 <tx_cb_USART_GRID_N+0xc>)
    275c:	4b02      	ldr	r3, [pc, #8]	; (2768 <tx_cb_USART_GRID_N+0x10>)
    275e:	4798      	blx	r3
    2760:	bd08      	pop	{r3, pc}
    2762:	bf00      	nop
    2764:	20001640 	.word	0x20001640
    2768:	000026c9 	.word	0x000026c9

0000276c <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    276c:	b508      	push	{r3, lr}
    276e:	7983      	ldrb	r3, [r0, #6]
    2770:	011b      	lsls	r3, r3, #4
    2772:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2776:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    277a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    277c:	f022 0202 	bic.w	r2, r2, #2
    2780:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    2782:	2100      	movs	r1, #0
    2784:	7980      	ldrb	r0, [r0, #6]
    2786:	4b01      	ldr	r3, [pc, #4]	; (278c <grid_sys_port_reset_dma+0x20>)
    2788:	4798      	blx	r3
    278a:	bd08      	pop	{r3, pc}
    278c:	00004d5d 	.word	0x00004d5d

00002790 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    2790:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    2792:	4802      	ldr	r0, [pc, #8]	; (279c <dma_transfer_complete_w_cb+0xc>)
    2794:	4b02      	ldr	r3, [pc, #8]	; (27a0 <dma_transfer_complete_w_cb+0x10>)
    2796:	4798      	blx	r3
    2798:	bd08      	pop	{r3, pc}
    279a:	bf00      	nop
    279c:	20001c24 	.word	0x20001c24
    27a0:	0000276d 	.word	0x0000276d

000027a4 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    27a4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    27a6:	4802      	ldr	r0, [pc, #8]	; (27b0 <dma_transfer_complete_s_cb+0xc>)
    27a8:	4b02      	ldr	r3, [pc, #8]	; (27b4 <dma_transfer_complete_s_cb+0x10>)
    27aa:	4798      	blx	r3
    27ac:	bd08      	pop	{r3, pc}
    27ae:	bf00      	nop
    27b0:	20001e0c 	.word	0x20001e0c
    27b4:	0000276d 	.word	0x0000276d

000027b8 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    27b8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    27ba:	4802      	ldr	r0, [pc, #8]	; (27c4 <dma_transfer_complete_e_cb+0xc>)
    27bc:	4b02      	ldr	r3, [pc, #8]	; (27c8 <dma_transfer_complete_e_cb+0x10>)
    27be:	4798      	blx	r3
    27c0:	bd08      	pop	{r3, pc}
    27c2:	bf00      	nop
    27c4:	200021d8 	.word	0x200021d8
    27c8:	0000276d 	.word	0x0000276d

000027cc <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    27cc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    27ce:	4802      	ldr	r0, [pc, #8]	; (27d8 <dma_transfer_complete_n_cb+0xc>)
    27d0:	4b02      	ldr	r3, [pc, #8]	; (27dc <dma_transfer_complete_n_cb+0x10>)
    27d2:	4798      	blx	r3
    27d4:	bd08      	pop	{r3, pc}
    27d6:	bf00      	nop
    27d8:	20001640 	.word	0x20001640
    27dc:	0000276d 	.word	0x0000276d

000027e0 <grid_sys_uart_init>:
}

void grid_sys_uart_init(){
    27e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    27e4:	4b2f      	ldr	r3, [pc, #188]	; (28a4 <grid_sys_uart_init+0xc4>)
    27e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    27ea:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    27ee:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    27f2:	f042 0204 	orr.w	r2, r2, #4
    27f6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27fa:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    27fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2802:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2806:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    280a:	f042 0204 	orr.w	r2, r2, #4
    280e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2812:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    281a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    281e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    2822:	f042 0204 	orr.w	r2, r2, #4
    2826:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    282a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    282e:	f44f 7100 	mov.w	r1, #512	; 0x200
    2832:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2836:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    283a:	f042 0204 	orr.w	r2, r2, #4
    283e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2842:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    2846:	f8df 8098 	ldr.w	r8, [pc, #152]	; 28e0 <grid_sys_uart_init+0x100>
    284a:	4a17      	ldr	r2, [pc, #92]	; (28a8 <grid_sys_uart_init+0xc8>)
    284c:	2101      	movs	r1, #1
    284e:	4640      	mov	r0, r8
    2850:	4c16      	ldr	r4, [pc, #88]	; (28ac <grid_sys_uart_init+0xcc>)
    2852:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    2854:	4f16      	ldr	r7, [pc, #88]	; (28b0 <grid_sys_uart_init+0xd0>)
    2856:	4a17      	ldr	r2, [pc, #92]	; (28b4 <grid_sys_uart_init+0xd4>)
    2858:	2101      	movs	r1, #1
    285a:	4638      	mov	r0, r7
    285c:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    285e:	4e16      	ldr	r6, [pc, #88]	; (28b8 <grid_sys_uart_init+0xd8>)
    2860:	4a16      	ldr	r2, [pc, #88]	; (28bc <grid_sys_uart_init+0xdc>)
    2862:	2101      	movs	r1, #1
    2864:	4630      	mov	r0, r6
    2866:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    2868:	4d15      	ldr	r5, [pc, #84]	; (28c0 <grid_sys_uart_init+0xe0>)
    286a:	4a16      	ldr	r2, [pc, #88]	; (28c4 <grid_sys_uart_init+0xe4>)
    286c:	2101      	movs	r1, #1
    286e:	4628      	mov	r0, r5
    2870:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    2872:	4915      	ldr	r1, [pc, #84]	; (28c8 <grid_sys_uart_init+0xe8>)
    2874:	4640      	mov	r0, r8
    2876:	4c15      	ldr	r4, [pc, #84]	; (28cc <grid_sys_uart_init+0xec>)
    2878:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    287a:	4915      	ldr	r1, [pc, #84]	; (28d0 <grid_sys_uart_init+0xf0>)
    287c:	4638      	mov	r0, r7
    287e:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    2880:	4914      	ldr	r1, [pc, #80]	; (28d4 <grid_sys_uart_init+0xf4>)
    2882:	4630      	mov	r0, r6
    2884:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    2886:	4914      	ldr	r1, [pc, #80]	; (28d8 <grid_sys_uart_init+0xf8>)
    2888:	4628      	mov	r0, r5
    288a:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    288c:	4640      	mov	r0, r8
    288e:	4c13      	ldr	r4, [pc, #76]	; (28dc <grid_sys_uart_init+0xfc>)
    2890:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    2892:	4638      	mov	r0, r7
    2894:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    2896:	4630      	mov	r0, r6
    2898:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    289a:	4628      	mov	r0, r5
    289c:	47a0      	blx	r4
    289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28a2:	bf00      	nop
    28a4:	41008000 	.word	0x41008000
    28a8:	00002759 	.word	0x00002759
    28ac:	00003f05 	.word	0x00003f05
    28b0:	20001430 	.word	0x20001430
    28b4:	00002745 	.word	0x00002745
    28b8:	20001584 	.word	0x20001584
    28bc:	00002731 	.word	0x00002731
    28c0:	20001534 	.word	0x20001534
    28c4:	0000271d 	.word	0x0000271d
    28c8:	20001a10 	.word	0x20001a10
    28cc:	00003edd 	.word	0x00003edd
    28d0:	20001e08 	.word	0x20001e08
    28d4:	20001ff0 	.word	0x20001ff0
    28d8:	200023d4 	.word	0x200023d4
    28dc:	00003eb1 	.word	0x00003eb1
    28e0:	20001480 	.word	0x20001480

000028e4 <grid_rx_dma_init_one>:



}

void grid_rx_dma_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    28e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28e6:	b083      	sub	sp, #12
    28e8:	460f      	mov	r7, r1
    28ea:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    28ec:	7984      	ldrb	r4, [r0, #6]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    28ee:	4605      	mov	r5, r0
    28f0:	f855 3be4 	ldr.w	r3, [r5], #228
    28f4:	6a19      	ldr	r1, [r3, #32]
    28f6:	3128      	adds	r1, #40	; 0x28
    28f8:	4620      	mov	r0, r4
    28fa:	4b0d      	ldr	r3, [pc, #52]	; (2930 <grid_rx_dma_init_one+0x4c>)
    28fc:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    28fe:	4629      	mov	r1, r5
    2900:	4620      	mov	r0, r4
    2902:	4b0c      	ldr	r3, [pc, #48]	; (2934 <grid_rx_dma_init_one+0x50>)
    2904:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    2906:	4639      	mov	r1, r7
    2908:	4620      	mov	r0, r4
    290a:	4b0b      	ldr	r3, [pc, #44]	; (2938 <grid_rx_dma_init_one+0x54>)
    290c:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    290e:	4621      	mov	r1, r4
    2910:	a801      	add	r0, sp, #4
    2912:	4b0a      	ldr	r3, [pc, #40]	; (293c <grid_rx_dma_init_one+0x58>)
    2914:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    2916:	9b01      	ldr	r3, [sp, #4]
    2918:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    291a:	2201      	movs	r2, #1
    291c:	2100      	movs	r1, #0
    291e:	4620      	mov	r0, r4
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <grid_rx_dma_init_one+0x5c>)
    2922:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    2924:	2100      	movs	r1, #0
    2926:	4620      	mov	r0, r4
    2928:	4b06      	ldr	r3, [pc, #24]	; (2944 <grid_rx_dma_init_one+0x60>)
    292a:	4798      	blx	r3
	
}
    292c:	b003      	add	sp, #12
    292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2930:	00004cd9 	.word	0x00004cd9
    2934:	00004cc9 	.word	0x00004cc9
    2938:	00004d05 	.word	0x00004d05
    293c:	00004d9d 	.word	0x00004d9d
    2940:	00004c75 	.word	0x00004c75
    2944:	00004d5d 	.word	0x00004d5d

00002948 <grid_rx_dma_init>:

void grid_rx_dma_init(){
    2948:	b510      	push	{r4, lr}
	
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    294a:	4a09      	ldr	r2, [pc, #36]	; (2970 <grid_rx_dma_init+0x28>)
    294c:	21c8      	movs	r1, #200	; 0xc8
    294e:	4809      	ldr	r0, [pc, #36]	; (2974 <grid_rx_dma_init+0x2c>)
    2950:	4c09      	ldr	r4, [pc, #36]	; (2978 <grid_rx_dma_init+0x30>)
    2952:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    2954:	4a09      	ldr	r2, [pc, #36]	; (297c <grid_rx_dma_init+0x34>)
    2956:	21c8      	movs	r1, #200	; 0xc8
    2958:	4809      	ldr	r0, [pc, #36]	; (2980 <grid_rx_dma_init+0x38>)
    295a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    295c:	4a09      	ldr	r2, [pc, #36]	; (2984 <grid_rx_dma_init+0x3c>)
    295e:	21c8      	movs	r1, #200	; 0xc8
    2960:	4809      	ldr	r0, [pc, #36]	; (2988 <grid_rx_dma_init+0x40>)
    2962:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    2964:	4a09      	ldr	r2, [pc, #36]	; (298c <grid_rx_dma_init+0x44>)
    2966:	21c8      	movs	r1, #200	; 0xc8
    2968:	4809      	ldr	r0, [pc, #36]	; (2990 <grid_rx_dma_init+0x48>)
    296a:	47a0      	blx	r4
    296c:	bd10      	pop	{r4, pc}
    296e:	bf00      	nop
    2970:	000027cd 	.word	0x000027cd
    2974:	20001640 	.word	0x20001640
    2978:	000028e5 	.word	0x000028e5
    297c:	000027b9 	.word	0x000027b9
    2980:	200021d8 	.word	0x200021d8
    2984:	000027a5 	.word	0x000027a5
    2988:	20001e0c 	.word	0x20001e0c
    298c:	00002791 	.word	0x00002791
    2990:	20001c24 	.word	0x20001c24

00002994 <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    2994:	7a00      	ldrb	r0, [r0, #8]
    2996:	4770      	bx	lr

00002998 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    2998:	2300      	movs	r3, #0
    299a:	7203      	strb	r3, [r0, #8]
    299c:	4770      	bx	lr
	...

000029a0 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    29a0:	7983      	ldrb	r3, [r0, #6]
    29a2:	b123      	cbz	r3, 29ae <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    29a4:	2b01      	cmp	r3, #1
    29a6:	d00f      	beq.n	29c8 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    29a8:	2b02      	cmp	r3, #2
    29aa:	d015      	beq.n	29d8 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    29ac:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    29ae:	8880      	ldrh	r0, [r0, #4]
    29b0:	0840      	lsrs	r0, r0, #1
    29b2:	387d      	subs	r0, #125	; 0x7d
    29b4:	2800      	cmp	r0, #0
    29b6:	bfb8      	it	lt
    29b8:	4240      	neglt	r0, r0
    29ba:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    29be:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    29c2:	f3c0 0047 	ubfx	r0, r0, #1, #8
    29c6:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    29c8:	8880      	ldrh	r0, [r0, #4]
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <grid_sys_alert_get_color_intensity+0x44>)
    29cc:	fba3 3000 	umull	r3, r0, r3, r0
    29d0:	f340 1000 	sbfx	r0, r0, #4, #1
    29d4:	b2c0      	uxtb	r0, r0
    29d6:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    29d8:	8880      	ldrh	r0, [r0, #4]
    29da:	2864      	cmp	r0, #100	; 0x64
    29dc:	bf8c      	ite	hi
    29de:	20ff      	movhi	r0, #255	; 0xff
    29e0:	2000      	movls	r0, #0
    29e2:	4770      	bx	lr
    29e4:	10624dd3 	.word	0x10624dd3

000029e8 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint8_t duration){
    29e8:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    29ea:	2401      	movs	r4, #1
    29ec:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    29ee:	7001      	strb	r1, [r0, #0]
	mod->alert_color_green = green;
    29f0:	7042      	strb	r2, [r0, #1]
	mod->alert_color_blue = blue;
    29f2:	7083      	strb	r3, [r0, #2]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    29f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    29f8:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    29fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    29fe:	7183      	strb	r3, [r0, #6]
	
}
    2a00:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a04:	4770      	bx	lr

00002a06 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    2a06:	7800      	ldrb	r0, [r0, #0]
    2a08:	4770      	bx	lr

00002a0a <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    2a0a:	7840      	ldrb	r0, [r0, #1]
    2a0c:	4770      	bx	lr

00002a0e <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    2a0e:	7880      	ldrb	r0, [r0, #2]
    2a10:	4770      	bx	lr

00002a12 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    2a12:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    2a14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2a18:	b2d8      	uxtb	r0, r3
    2a1a:	2809      	cmp	r0, #9
    2a1c:	d90d      	bls.n	2a3a <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    2a1e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    2a22:	b2db      	uxtb	r3, r3
    2a24:	2b05      	cmp	r3, #5
    2a26:	d903      	bls.n	2a30 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    2a28:	b131      	cbz	r1, 2a38 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    2a2a:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    2a2c:	2000      	movs	r0, #0
    2a2e:	4770      	bx	lr
		result = ascii - 97 + 10;
    2a30:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    2a34:	b2c0      	uxtb	r0, r0
    2a36:	4770      	bx	lr
	uint8_t result = 0;
    2a38:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    2a3a:	4770      	bx	lr

00002a3c <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    2a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    2a40:	b1c1      	cbz	r1, 2a74 <grid_sys_read_hex_string_value+0x38>
    2a42:	4690      	mov	r8, r2
    2a44:	1e45      	subs	r5, r0, #1
    2a46:	1e4b      	subs	r3, r1, #1
    2a48:	009c      	lsls	r4, r3, #2
    2a4a:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    2a4e:	3f02      	subs	r7, #2
    2a50:	b2db      	uxtb	r3, r3
    2a52:	1aff      	subs	r7, r7, r3
    2a54:	00bf      	lsls	r7, r7, #2
    2a56:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    2a58:	f8df 901c 	ldr.w	r9, [pc, #28]	; 2a78 <grid_sys_read_hex_string_value+0x3c>
    2a5c:	4641      	mov	r1, r8
    2a5e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    2a62:	47c8      	blx	r9
    2a64:	40a0      	lsls	r0, r4
    2a66:	4406      	add	r6, r0
    2a68:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    2a6a:	42bc      	cmp	r4, r7
    2a6c:	d1f6      	bne.n	2a5c <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    2a6e:	4630      	mov	r0, r6
    2a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    2a74:	2600      	movs	r6, #0
	return result;
    2a76:	e7fa      	b.n	2a6e <grid_sys_read_hex_string_value+0x32>
    2a78:	00002a13 	.word	0x00002a13

00002a7c <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    2a7c:	b530      	push	{r4, r5, lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	4605      	mov	r5, r0
    2a82:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    2a84:	4909      	ldr	r1, [pc, #36]	; (2aac <grid_sys_write_hex_string_value+0x30>)
    2a86:	a801      	add	r0, sp, #4
    2a88:	4b09      	ldr	r3, [pc, #36]	; (2ab0 <grid_sys_write_hex_string_value+0x34>)
    2a8a:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    2a8c:	b164      	cbz	r4, 2aa8 <grid_sys_write_hex_string_value+0x2c>
    2a8e:	ab04      	add	r3, sp, #16
    2a90:	1b1a      	subs	r2, r3, r4
    2a92:	3a05      	subs	r2, #5
    2a94:	1e6b      	subs	r3, r5, #1
    2a96:	1e60      	subs	r0, r4, #1
    2a98:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    2a9c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    2aa0:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    2aa4:	4283      	cmp	r3, r0
    2aa6:	d1f9      	bne.n	2a9c <grid_sys_write_hex_string_value+0x20>
	}

}
    2aa8:	b005      	add	sp, #20
    2aaa:	bd30      	pop	{r4, r5, pc}
    2aac:	0000ac60 	.word	0x0000ac60
    2ab0:	0000a3e9 	.word	0x0000a3e9

00002ab4 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    2ab4:	4b34      	ldr	r3, [pc, #208]	; (2b88 <grid_sys_get_hwcfg+0xd4>)
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2abc:	d002      	beq.n	2ac4 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    2abe:	4b32      	ldr	r3, [pc, #200]	; (2b88 <grid_sys_get_hwcfg+0xd4>)
    2ac0:	6818      	ldr	r0, [r3, #0]
    2ac2:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    2ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ac8:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2aca:	4b30      	ldr	r3, [pc, #192]	; (2b8c <grid_sys_get_hwcfg+0xd8>)
    2acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    2ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ad4:	492e      	ldr	r1, [pc, #184]	; (2b90 <grid_sys_get_hwcfg+0xdc>)
    2ad6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2ada:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2ade:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ae2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2ae6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2aea:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2aee:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2af2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2afa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2afe:	4925      	ldr	r1, [pc, #148]	; (2b94 <grid_sys_get_hwcfg+0xe0>)
    2b00:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2b04:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    2b08:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    2b10:	2001      	movs	r0, #1
    2b12:	4b21      	ldr	r3, [pc, #132]	; (2b98 <grid_sys_get_hwcfg+0xe4>)
    2b14:	4798      	blx	r3
    2b16:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    2b18:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b1a:	4d1c      	ldr	r5, [pc, #112]	; (2b8c <grid_sys_get_hwcfg+0xd8>)
    2b1c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    2b20:	4f1d      	ldr	r7, [pc, #116]	; (2b98 <grid_sys_get_hwcfg+0xe4>)
    2b22:	e00c      	b.n	2b3e <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    2b24:	2e07      	cmp	r6, #7
    2b26:	d027      	beq.n	2b78 <grid_sys_get_hwcfg+0xc4>
    2b28:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    2b2c:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    2b30:	2001      	movs	r0, #1
    2b32:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b34:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    2b38:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    2b3a:	2e08      	cmp	r6, #8
    2b3c:	d01c      	beq.n	2b78 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b3e:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    2b42:	2001      	movs	r0, #1
    2b44:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    2b46:	a801      	add	r0, sp, #4
    2b48:	4b14      	ldr	r3, [pc, #80]	; (2b9c <grid_sys_get_hwcfg+0xe8>)
    2b4a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b4c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b50:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b54:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2b58:	405c      	eors	r4, r3
    2b5a:	4014      	ands	r4, r2
    2b5c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    2b5e:	a801      	add	r0, sp, #4
    2b60:	4b0f      	ldr	r3, [pc, #60]	; (2ba0 <grid_sys_get_hwcfg+0xec>)
    2b62:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    2b64:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    2b68:	d0dc      	beq.n	2b24 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    2b6a:	2301      	movs	r3, #1
    2b6c:	40b3      	lsls	r3, r6
    2b6e:	ea43 0808 	orr.w	r8, r3, r8
    2b72:	fa5f f888 	uxtb.w	r8, r8
    2b76:	e7d5      	b.n	2b24 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    2b78:	4b03      	ldr	r3, [pc, #12]	; (2b88 <grid_sys_get_hwcfg+0xd4>)
    2b7a:	f8c3 8000 	str.w	r8, [r3]
}
    2b7e:	4b02      	ldr	r3, [pc, #8]	; (2b88 <grid_sys_get_hwcfg+0xd4>)
    2b80:	6818      	ldr	r0, [r3, #0]
    2b82:	b003      	add	sp, #12
    2b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b88:	20000314 	.word	0x20000314
    2b8c:	41008000 	.word	0x41008000
    2b90:	40002000 	.word	0x40002000
    2b94:	40028000 	.word	0x40028000
    2b98:	000033f1 	.word	0x000033f1
    2b9c:	00003371 	.word	0x00003371
    2ba0:	0000337f 	.word	0x0000337f

00002ba4 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    2ba4:	2903      	cmp	r1, #3
    2ba6:	d009      	beq.n	2bbc <grid_msg_get_checksum+0x18>
    2ba8:	1e43      	subs	r3, r0, #1
    2baa:	3904      	subs	r1, #4
    2bac:	4401      	add	r1, r0
    2bae:	2000      	movs	r0, #0
		checksum ^= str[i];
    2bb0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2bb4:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    2bb6:	428b      	cmp	r3, r1
    2bb8:	d1fa      	bne.n	2bb0 <grid_msg_get_checksum+0xc>
    2bba:	4770      	bx	lr
	uint8_t checksum = 0;
    2bbc:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    2bbe:	4770      	bx	lr

00002bc0 <grid_msg_set_checksum>:

uint8_t grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    2bc0:	b530      	push	{r4, r5, lr}
    2bc2:	b083      	sub	sp, #12
    2bc4:	4604      	mov	r4, r0
    2bc6:	460d      	mov	r5, r1
	
	uint8_t checksum_string[4];

	sprintf(checksum_string, "%02x", checksum);
    2bc8:	4907      	ldr	r1, [pc, #28]	; (2be8 <grid_msg_set_checksum+0x28>)
    2bca:	a801      	add	r0, sp, #4
    2bcc:	4b07      	ldr	r3, [pc, #28]	; (2bec <grid_msg_set_checksum+0x2c>)
    2bce:	4798      	blx	r3

	message[length-3] = checksum_string[0];
    2bd0:	1961      	adds	r1, r4, r5
    2bd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2bd6:	f801 3c03 	strb.w	r3, [r1, #-3]
	message[length-2] = checksum_string[1];
    2bda:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2bde:	f801 3c02 	strb.w	r3, [r1, #-2]
	
}
    2be2:	b003      	add	sp, #12
    2be4:	bd30      	pop	{r4, r5, pc}
    2be6:	bf00      	nop
    2be8:	0000ac68 	.word	0x0000ac68
    2bec:	0000a3e9 	.word	0x0000a3e9

00002bf0 <grid_msg_get_id>:


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    2bf0:	b500      	push	{lr}
    2bf2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    2bf4:	aa02      	add	r2, sp, #8
    2bf6:	2300      	movs	r3, #0
    2bf8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    2bfc:	2102      	movs	r1, #2
    2bfe:	3004      	adds	r0, #4
    2c00:	4b02      	ldr	r3, [pc, #8]	; (2c0c <grid_msg_get_id+0x1c>)
    2c02:	4798      	blx	r3
	
}
    2c04:	b2c0      	uxtb	r0, r0
    2c06:	b003      	add	sp, #12
    2c08:	f85d fb04 	ldr.w	pc, [sp], #4
    2c0c:	00002a3d 	.word	0x00002a3d

00002c10 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    2c10:	b500      	push	{lr}
    2c12:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    2c14:	aa02      	add	r2, sp, #8
    2c16:	2300      	movs	r3, #0
    2c18:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    2c1c:	2102      	movs	r1, #2
    2c1e:	3006      	adds	r0, #6
    2c20:	4b02      	ldr	r3, [pc, #8]	; (2c2c <grid_msg_get_dx+0x1c>)
    2c22:	4798      	blx	r3
	
}
    2c24:	b2c0      	uxtb	r0, r0
    2c26:	b003      	add	sp, #12
    2c28:	f85d fb04 	ldr.w	pc, [sp], #4
    2c2c:	00002a3d 	.word	0x00002a3d

00002c30 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    2c30:	b500      	push	{lr}
    2c32:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    2c34:	aa02      	add	r2, sp, #8
    2c36:	2300      	movs	r3, #0
    2c38:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    2c3c:	2102      	movs	r1, #2
    2c3e:	3008      	adds	r0, #8
    2c40:	4b02      	ldr	r3, [pc, #8]	; (2c4c <grid_msg_get_dy+0x1c>)
    2c42:	4798      	blx	r3

}
    2c44:	b2c0      	uxtb	r0, r0
    2c46:	b003      	add	sp, #12
    2c48:	f85d fb04 	ldr.w	pc, [sp], #4
    2c4c:	00002a3d 	.word	0x00002a3d

00002c50 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    2c50:	b500      	push	{lr}
    2c52:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    2c54:	aa02      	add	r2, sp, #8
    2c56:	2300      	movs	r3, #0
    2c58:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    2c5c:	2102      	movs	r1, #2
    2c5e:	300a      	adds	r0, #10
    2c60:	4b02      	ldr	r3, [pc, #8]	; (2c6c <grid_msg_get_age+0x1c>)
    2c62:	4798      	blx	r3
	
}
    2c64:	b2c0      	uxtb	r0, r0
    2c66:	b003      	add	sp, #12
    2c68:	f85d fb04 	ldr.w	pc, [sp], #4
    2c6c:	00002a3d 	.word	0x00002a3d

00002c70 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    2c70:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    2c72:	460a      	mov	r2, r1
    2c74:	2102      	movs	r1, #2
    2c76:	3004      	adds	r0, #4
    2c78:	4b01      	ldr	r3, [pc, #4]	; (2c80 <grid_msg_set_id+0x10>)
    2c7a:	4798      	blx	r3
    2c7c:	bd08      	pop	{r3, pc}
    2c7e:	bf00      	nop
    2c80:	00002a7d 	.word	0x00002a7d

00002c84 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    2c84:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    2c86:	460a      	mov	r2, r1
    2c88:	2102      	movs	r1, #2
    2c8a:	3006      	adds	r0, #6
    2c8c:	4b01      	ldr	r3, [pc, #4]	; (2c94 <grid_msg_set_dx+0x10>)
    2c8e:	4798      	blx	r3
    2c90:	bd08      	pop	{r3, pc}
    2c92:	bf00      	nop
    2c94:	00002a7d 	.word	0x00002a7d

00002c98 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    2c98:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    2c9a:	460a      	mov	r2, r1
    2c9c:	2102      	movs	r1, #2
    2c9e:	3008      	adds	r0, #8
    2ca0:	4b01      	ldr	r3, [pc, #4]	; (2ca8 <grid_msg_set_dy+0x10>)
    2ca2:	4798      	blx	r3
    2ca4:	bd08      	pop	{r3, pc}
    2ca6:	bf00      	nop
    2ca8:	00002a7d 	.word	0x00002a7d

00002cac <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    2cac:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    2cae:	460a      	mov	r2, r1
    2cb0:	2102      	movs	r1, #2
    2cb2:	300a      	adds	r0, #10
    2cb4:	4b01      	ldr	r3, [pc, #4]	; (2cbc <grid_msg_set_age+0x10>)
    2cb6:	4798      	blx	r3
    2cb8:	bd08      	pop	{r3, pc}
    2cba:	bf00      	nop
    2cbc:	00002a7d 	.word	0x00002a7d

00002cc0 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    2cc0:	68c3      	ldr	r3, [r0, #12]
    2cc2:	4299      	cmp	r1, r3
    2cc4:	d00e      	beq.n	2ce4 <grid_msg_find_recent+0x24>
    2cc6:	2301      	movs	r3, #1
    2cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    2ccc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2cd0:	68d2      	ldr	r2, [r2, #12]
    2cd2:	428a      	cmp	r2, r1
    2cd4:	d008      	beq.n	2ce8 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    2cd6:	3301      	adds	r3, #1
    2cd8:	b2db      	uxtb	r3, r3
    2cda:	f013 0f80 	tst.w	r3, #128	; 0x80
    2cde:	d0f3      	beq.n	2cc8 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    2ce0:	2000      	movs	r0, #0
    2ce2:	4770      	bx	lr
			return 1;
    2ce4:	2001      	movs	r0, #1
    2ce6:	4770      	bx	lr
    2ce8:	2001      	movs	r0, #1
}
    2cea:	4770      	bx	lr

00002cec <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    2cec:	f890 320c 	ldrb.w	r3, [r0, #524]	; 0x20c
    2cf0:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    2cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2cf6:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    2cfa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2cfe:	60c1      	str	r1, [r0, #12]
    2d00:	4770      	bx	lr
	...

00002d04 <grid_sys_ping>:
}




void grid_sys_ping(struct grid_port* por){
    2d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d06:	b08b      	sub	sp, #44	; 0x2c
    2d08:	4606      	mov	r6, r0
		
	char message[20];
	uint8_t length = 0;
	
	// Create the packet
	sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    2d0a:	7944      	ldrb	r4, [r0, #5]
    2d0c:	4b1a      	ldr	r3, [pc, #104]	; (2d78 <grid_sys_ping+0x74>)
    2d0e:	4798      	blx	r3
    2d10:	2304      	movs	r3, #4
    2d12:	9303      	str	r3, [sp, #12]
    2d14:	9002      	str	r0, [sp, #8]
    2d16:	9401      	str	r4, [sp, #4]
    2d18:	2307      	movs	r3, #7
    2d1a:	9300      	str	r3, [sp, #0]
    2d1c:	230e      	movs	r3, #14
    2d1e:	2201      	movs	r2, #1
    2d20:	4916      	ldr	r1, [pc, #88]	; (2d7c <grid_sys_ping+0x78>)
    2d22:	a805      	add	r0, sp, #20
    2d24:	4c16      	ldr	r4, [pc, #88]	; (2d80 <grid_sys_ping+0x7c>)
    2d26:	47a0      	blx	r4
	
	// Calculate packet length
	length = strlen(message);
    2d28:	a805      	add	r0, sp, #20
    2d2a:	4b16      	ldr	r3, [pc, #88]	; (2d84 <grid_sys_ping+0x80>)
    2d2c:	4798      	blx	r3
    2d2e:	b2c5      	uxtb	r5, r0

	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    2d30:	4629      	mov	r1, r5
    2d32:	a805      	add	r0, sp, #20
    2d34:	4b14      	ldr	r3, [pc, #80]	; (2d88 <grid_sys_ping+0x84>)
    2d36:	4798      	blx	r3
    2d38:	4602      	mov	r2, r0
    2d3a:	4629      	mov	r1, r5
    2d3c:	a805      	add	r0, sp, #20
    2d3e:	4b13      	ldr	r3, [pc, #76]	; (2d8c <grid_sys_ping+0x88>)
    2d40:	4798      	blx	r3
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    2d42:	f506 76d6 	add.w	r6, r6, #428	; 0x1ac
    2d46:	b2ad      	uxth	r5, r5
    2d48:	4629      	mov	r1, r5
    2d4a:	4630      	mov	r0, r6
    2d4c:	4b10      	ldr	r3, [pc, #64]	; (2d90 <grid_sys_ping+0x8c>)
    2d4e:	4798      	blx	r3
    2d50:	b180      	cbz	r0, 2d74 <grid_sys_ping+0x70>
		
		for(uint16_t i = 0; i<length; i++){
    2d52:	b165      	cbz	r5, 2d6e <grid_sys_ping+0x6a>
    2d54:	f10d 0413 	add.w	r4, sp, #19
    2d58:	3d01      	subs	r5, #1
    2d5a:	ab05      	add	r3, sp, #20
    2d5c:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    2d60:	4f0c      	ldr	r7, [pc, #48]	; (2d94 <grid_sys_ping+0x90>)
    2d62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    2d66:	4630      	mov	r0, r6
    2d68:	47b8      	blx	r7
		for(uint16_t i = 0; i<length; i++){
    2d6a:	42ac      	cmp	r4, r5
    2d6c:	d1f9      	bne.n	2d62 <grid_sys_ping+0x5e>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    2d6e:	4630      	mov	r0, r6
    2d70:	4b09      	ldr	r3, [pc, #36]	; (2d98 <grid_sys_ping+0x94>)
    2d72:	4798      	blx	r3
	}
				
	
}
    2d74:	b00b      	add	sp, #44	; 0x2c
    2d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d78:	00002ab5 	.word	0x00002ab5
    2d7c:	0000ac70 	.word	0x0000ac70
    2d80:	0000a3e9 	.word	0x0000a3e9
    2d84:	0000a431 	.word	0x0000a431
    2d88:	00002ba5 	.word	0x00002ba5
    2d8c:	00002bc1 	.word	0x00002bc1
    2d90:	0000101d 	.word	0x0000101d
    2d94:	0000104d 	.word	0x0000104d
    2d98:	00001069 	.word	0x00001069

00002d9c <grid_ui_report_init>:
	}
	
	
}

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint8_t p_len, uint8_t* h, uint8_t h_len){
    2d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2da0:	4605      	mov	r5, r0
    2da2:	4617      	mov	r7, r2
    2da4:	9e08      	ldr	r6, [sp, #32]
	
	mod->report_array[index].changed = 0;
    2da6:	010c      	lsls	r4, r1, #4
    2da8:	6842      	ldr	r2, [r0, #4]
    2daa:	2100      	movs	r1, #0
    2dac:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    2dae:	6842      	ldr	r2, [r0, #4]
    2db0:	4422      	add	r2, r4
    2db2:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    2db4:	6843      	ldr	r3, [r0, #4]
    2db6:	4423      	add	r3, r4
    2db8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    2dbc:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(mod->report_array[index].payload_length*sizeof(uint8_t));
    2dbe:	6843      	ldr	r3, [r0, #4]
    2dc0:	eb03 0804 	add.w	r8, r3, r4
    2dc4:	f898 0001 	ldrb.w	r0, [r8, #1]
    2dc8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2e38 <grid_ui_report_init+0x9c>
    2dcc:	47c8      	blx	r9
    2dce:	f8c8 0004 	str.w	r0, [r8, #4]
	mod->report_array[index].helper = malloc(mod->report_array[index].helper_length*sizeof(uint8_t));
    2dd2:	686b      	ldr	r3, [r5, #4]
    2dd4:	eb03 0804 	add.w	r8, r3, r4
    2dd8:	f898 0008 	ldrb.w	r0, [r8, #8]
    2ddc:	47c8      	blx	r9
    2dde:	f8c8 000c 	str.w	r0, [r8, #12]
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    2de2:	686a      	ldr	r2, [r5, #4]
    2de4:	4422      	add	r2, r4
    2de6:	6853      	ldr	r3, [r2, #4]
    2de8:	b303      	cbz	r3, 2e2c <grid_ui_report_init+0x90>
    2dea:	68d3      	ldr	r3, [r2, #12]
    2dec:	b30b      	cbz	r3, 2e32 <grid_ui_report_init+0x96>
		return -1; // MALLOC FAILED
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    2dee:	7853      	ldrb	r3, [r2, #1]
    2df0:	b153      	cbz	r3, 2e08 <grid_ui_report_init+0x6c>
    2df2:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    2df4:	5cf9      	ldrb	r1, [r7, r3]
    2df6:	6852      	ldr	r2, [r2, #4]
    2df8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    2dfa:	3301      	adds	r3, #1
    2dfc:	b2db      	uxtb	r3, r3
    2dfe:	686a      	ldr	r2, [r5, #4]
    2e00:	4422      	add	r2, r4
    2e02:	7851      	ldrb	r1, [r2, #1]
    2e04:	4299      	cmp	r1, r3
    2e06:	d8f5      	bhi.n	2df4 <grid_ui_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    2e08:	686a      	ldr	r2, [r5, #4]
    2e0a:	4422      	add	r2, r4
    2e0c:	7a10      	ldrb	r0, [r2, #8]
    2e0e:	b188      	cbz	r0, 2e34 <grid_ui_report_init+0x98>
    2e10:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    2e12:	5cf1      	ldrb	r1, [r6, r3]
    2e14:	68d2      	ldr	r2, [r2, #12]
    2e16:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    2e18:	3301      	adds	r3, #1
    2e1a:	b2db      	uxtb	r3, r3
    2e1c:	686a      	ldr	r2, [r5, #4]
    2e1e:	4422      	add	r2, r4
    2e20:	7a11      	ldrb	r1, [r2, #8]
    2e22:	4299      	cmp	r1, r3
    2e24:	d8f5      	bhi.n	2e12 <grid_ui_report_init+0x76>
	}
	
	return 0;
    2e26:	2000      	movs	r0, #0
    2e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1; // MALLOC FAILED
    2e2c:	20ff      	movs	r0, #255	; 0xff
    2e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e32:	20ff      	movs	r0, #255	; 0xff
	
}
    2e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e38:	0000a239 	.word	0x0000a239

00002e3c <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    2e3c:	6843      	ldr	r3, [r0, #4]
    2e3e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    2e42:	7848      	ldrb	r0, [r1, #1]
    2e44:	b140      	cbz	r0, 2e58 <grid_ui_report_render+0x1c>
    2e46:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    2e48:	6848      	ldr	r0, [r1, #4]
    2e4a:	5cc0      	ldrb	r0, [r0, r3]
    2e4c:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    2e4e:	3301      	adds	r3, #1
    2e50:	b2db      	uxtb	r3, r3
    2e52:	7848      	ldrb	r0, [r1, #1]
    2e54:	4298      	cmp	r0, r3
    2e56:	d8f7      	bhi.n	2e48 <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    2e58:	4770      	bx	lr

00002e5a <grid_ui_report_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    2e5a:	6843      	ldr	r3, [r0, #4]
    2e5c:	0109      	lsls	r1, r1, #4
    2e5e:	2201      	movs	r2, #1
    2e60:	545a      	strb	r2, [r3, r1]
    2e62:	4770      	bx	lr

00002e64 <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    2e64:	6843      	ldr	r3, [r0, #4]
    2e66:	0109      	lsls	r1, r1, #4
    2e68:	2200      	movs	r2, #0
    2e6a:	545a      	strb	r2, [r3, r1]
    2e6c:	4770      	bx	lr
	...

00002e70 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    2e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e74:	b0ca      	sub	sp, #296	; 0x128
	sprintf(&message[length],
    2e76:	2317      	movs	r3, #23
    2e78:	9305      	str	r3, [sp, #20]
    2e7a:	2300      	movs	r3, #0
    2e7c:	9304      	str	r3, [sp, #16]
    2e7e:	227f      	movs	r2, #127	; 0x7f
    2e80:	9203      	str	r2, [sp, #12]
    2e82:	9202      	str	r2, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    2e84:	4a42      	ldr	r2, [pc, #264]	; (2f90 <grid_port_process_ui+0x120>)
	sprintf(&message[length],
    2e86:	f892 220d 	ldrb.w	r2, [r2, #525]	; 0x20d
    2e8a:	9201      	str	r2, [sp, #4]
    2e8c:	9300      	str	r3, [sp, #0]
    2e8e:	230f      	movs	r3, #15
    2e90:	2201      	movs	r2, #1
    2e92:	4940      	ldr	r1, [pc, #256]	; (2f94 <grid_port_process_ui+0x124>)
    2e94:	a80a      	add	r0, sp, #40	; 0x28
    2e96:	4c40      	ldr	r4, [pc, #256]	; (2f98 <grid_port_process_ui+0x128>)
    2e98:	47a0      	blx	r4
	length += strlen(&message[length]);
    2e9a:	a80a      	add	r0, sp, #40	; 0x28
    2e9c:	4b3f      	ldr	r3, [pc, #252]	; (2f9c <grid_port_process_ui+0x12c>)
    2e9e:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    2ea0:	4b3f      	ldr	r3, [pc, #252]	; (2fa0 <grid_port_process_ui+0x130>)
    2ea2:	781b      	ldrb	r3, [r3, #0]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d02d      	beq.n	2f04 <grid_port_process_ui+0x94>
    2ea8:	4605      	mov	r5, r0
    2eaa:	2400      	movs	r4, #0
    2eac:	4627      	mov	r7, r4
		CRITICAL_SECTION_ENTER()
    2eae:	f8df 9120 	ldr.w	r9, [pc, #288]	; 2fd0 <grid_port_process_ui+0x160>
	return mod->report_array[index].changed;
    2eb2:	4e3b      	ldr	r6, [pc, #236]	; (2fa0 <grid_port_process_ui+0x130>)
		CRITICAL_SECTION_LEAVE()
    2eb4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 2fd4 <grid_port_process_ui+0x164>
    2eb8:	e007      	b.n	2eca <grid_port_process_ui+0x5a>
    2eba:	a807      	add	r0, sp, #28
    2ebc:	47c0      	blx	r8
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    2ebe:	3401      	adds	r4, #1
    2ec0:	b2e4      	uxtb	r4, r4
    2ec2:	7833      	ldrb	r3, [r6, #0]
    2ec4:	b2db      	uxtb	r3, r3
    2ec6:	42a3      	cmp	r3, r4
    2ec8:	d91b      	bls.n	2f02 <grid_port_process_ui+0x92>
		if (length>200){
    2eca:	2dc8      	cmp	r5, #200	; 0xc8
    2ecc:	d8f7      	bhi.n	2ebe <grid_port_process_ui+0x4e>
		CRITICAL_SECTION_ENTER()
    2ece:	a807      	add	r0, sp, #28
    2ed0:	47c8      	blx	r9
	return mod->report_array[index].changed;
    2ed2:	6872      	ldr	r2, [r6, #4]
    2ed4:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    2ed6:	5cd3      	ldrb	r3, [r2, r3]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d0ee      	beq.n	2eba <grid_port_process_ui+0x4a>
			packetvalid++;
    2edc:	3701      	adds	r7, #1
    2ede:	b2ff      	uxtb	r7, r7
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    2ee0:	ab0a      	add	r3, sp, #40	; 0x28
    2ee2:	eb03 0a05 	add.w	sl, r3, r5
    2ee6:	4652      	mov	r2, sl
    2ee8:	4621      	mov	r1, r4
    2eea:	4630      	mov	r0, r6
    2eec:	4b2d      	ldr	r3, [pc, #180]	; (2fa4 <grid_port_process_ui+0x134>)
    2eee:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    2ef0:	4621      	mov	r1, r4
    2ef2:	4630      	mov	r0, r6
    2ef4:	4b2c      	ldr	r3, [pc, #176]	; (2fa8 <grid_port_process_ui+0x138>)
    2ef6:	4798      	blx	r3
			length += strlen(&message[length]);
    2ef8:	4650      	mov	r0, sl
    2efa:	4b28      	ldr	r3, [pc, #160]	; (2f9c <grid_port_process_ui+0x12c>)
    2efc:	4798      	blx	r3
    2efe:	4405      	add	r5, r0
    2f00:	e7db      	b.n	2eba <grid_port_process_ui+0x4a>
	if (packetvalid){
    2f02:	b917      	cbnz	r7, 2f0a <grid_port_process_ui+0x9a>
}
    2f04:	b04a      	add	sp, #296	; 0x128
    2f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_sys_state.next_broadcast_message_id++;
    2f0a:	4a21      	ldr	r2, [pc, #132]	; (2f90 <grid_port_process_ui+0x120>)
    2f0c:	f892 320d 	ldrb.w	r3, [r2, #525]	; 0x20d
    2f10:	3301      	adds	r3, #1
    2f12:	f882 320d 	strb.w	r3, [r2, #525]	; 0x20d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    2f16:	ac0a      	add	r4, sp, #40	; 0x28
    2f18:	1966      	adds	r6, r4, r5
    2f1a:	2204      	movs	r2, #4
    2f1c:	4923      	ldr	r1, [pc, #140]	; (2fac <grid_port_process_ui+0x13c>)
    2f1e:	4630      	mov	r0, r6
    2f20:	4f1d      	ldr	r7, [pc, #116]	; (2f98 <grid_port_process_ui+0x128>)
    2f22:	47b8      	blx	r7
		length += strlen(&message[length]);
    2f24:	4630      	mov	r0, r6
    2f26:	4e1d      	ldr	r6, [pc, #116]	; (2f9c <grid_port_process_ui+0x12c>)
    2f28:	47b0      	blx	r6
    2f2a:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    2f2c:	462a      	mov	r2, r5
    2f2e:	4920      	ldr	r1, [pc, #128]	; (2fb0 <grid_port_process_ui+0x140>)
    2f30:	a808      	add	r0, sp, #32
    2f32:	47b8      	blx	r7
		message[2] = length_string[0];
    2f34:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f38:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    2f3a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2f3e:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    2f40:	4b1c      	ldr	r3, [pc, #112]	; (2fb4 <grid_port_process_ui+0x144>)
    2f42:	6818      	ldr	r0, [r3, #0]
    2f44:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    2f46:	1960      	adds	r0, r4, r5
    2f48:	47b0      	blx	r6
    2f4a:	4405      	add	r5, r0
		grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    2f4c:	4629      	mov	r1, r5
    2f4e:	4620      	mov	r0, r4
    2f50:	4b19      	ldr	r3, [pc, #100]	; (2fb8 <grid_port_process_ui+0x148>)
    2f52:	4798      	blx	r3
    2f54:	4602      	mov	r2, r0
    2f56:	4629      	mov	r1, r5
    2f58:	4620      	mov	r0, r4
    2f5a:	4b18      	ldr	r3, [pc, #96]	; (2fbc <grid_port_process_ui+0x14c>)
    2f5c:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    2f5e:	b2a9      	uxth	r1, r5
    2f60:	4817      	ldr	r0, [pc, #92]	; (2fc0 <grid_port_process_ui+0x150>)
    2f62:	4b18      	ldr	r3, [pc, #96]	; (2fc4 <grid_port_process_ui+0x154>)
    2f64:	4798      	blx	r3
    2f66:	2800      	cmp	r0, #0
    2f68:	d0cc      	beq.n	2f04 <grid_port_process_ui+0x94>
			for(uint16_t i = 0; i<length; i++){
    2f6a:	b165      	cbz	r5, 2f86 <grid_port_process_ui+0x116>
    2f6c:	2400      	movs	r4, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    2f6e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    2f72:	4f13      	ldr	r7, [pc, #76]	; (2fc0 <grid_port_process_ui+0x150>)
    2f74:	4e14      	ldr	r6, [pc, #80]	; (2fc8 <grid_port_process_ui+0x158>)
    2f76:	f818 1004 	ldrb.w	r1, [r8, r4]
    2f7a:	4638      	mov	r0, r7
    2f7c:	47b0      	blx	r6
			for(uint16_t i = 0; i<length; i++){
    2f7e:	3401      	adds	r4, #1
    2f80:	b2a4      	uxth	r4, r4
    2f82:	42a5      	cmp	r5, r4
    2f84:	d8f7      	bhi.n	2f76 <grid_port_process_ui+0x106>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    2f86:	480e      	ldr	r0, [pc, #56]	; (2fc0 <grid_port_process_ui+0x150>)
    2f88:	4b10      	ldr	r3, [pc, #64]	; (2fcc <grid_port_process_ui+0x15c>)
    2f8a:	4798      	blx	r3
}
    2f8c:	e7ba      	b.n	2f04 <grid_port_process_ui+0x94>
    2f8e:	bf00      	nop
    2f90:	20001a14 	.word	0x20001a14
    2f94:	0000ac84 	.word	0x0000ac84
    2f98:	0000a3e9 	.word	0x0000a3e9
    2f9c:	0000a431 	.word	0x0000a431
    2fa0:	20001a08 	.word	0x20001a08
    2fa4:	00002e3d 	.word	0x00002e3d
    2fa8:	00002e65 	.word	0x00002e65
    2fac:	0000ac9c 	.word	0x0000ac9c
    2fb0:	0000ac68 	.word	0x0000ac68
    2fb4:	0000aca0 	.word	0x0000aca0
    2fb8:	00002ba5 	.word	0x00002ba5
    2fbc:	00002bc1 	.word	0x00002bc1
    2fc0:	200019e8 	.word	0x200019e8
    2fc4:	0000101d 	.word	0x0000101d
    2fc8:	0000104d 	.word	0x0000104d
    2fcc:	00001069 	.word	0x00001069
    2fd0:	00003371 	.word	0x00003371
    2fd4:	0000337f 	.word	0x0000337f

00002fd8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    2fd8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    2fda:	6983      	ldr	r3, [r0, #24]
    2fdc:	b103      	cbz	r3, 2fe0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    2fde:	4798      	blx	r3
    2fe0:	bd08      	pop	{r3, pc}

00002fe2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    2fe2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    2fe4:	69c3      	ldr	r3, [r0, #28]
    2fe6:	b103      	cbz	r3, 2fea <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    2fe8:	4798      	blx	r3
    2fea:	bd08      	pop	{r3, pc}

00002fec <adc_async_channel_conversion_done>:
{
    2fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ff0:	4606      	mov	r6, r0
    2ff2:	460f      	mov	r7, r1
    2ff4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    2ff6:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    2ff8:	5c5c      	ldrb	r4, [r3, r1]
    2ffa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2ffe:	00e4      	lsls	r4, r4, #3
    3000:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    3004:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    3008:	f105 0a04 	add.w	sl, r5, #4
    300c:	b2d1      	uxtb	r1, r2
    300e:	4650      	mov	r0, sl
    3010:	4b0c      	ldr	r3, [pc, #48]	; (3044 <adc_async_channel_conversion_done+0x58>)
    3012:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    3014:	4630      	mov	r0, r6
    3016:	4b0c      	ldr	r3, [pc, #48]	; (3048 <adc_async_channel_conversion_done+0x5c>)
    3018:	4798      	blx	r3
    301a:	2801      	cmp	r0, #1
    301c:	d907      	bls.n	302e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    301e:	ea4f 2119 	mov.w	r1, r9, lsr #8
    3022:	4650      	mov	r0, sl
    3024:	4b07      	ldr	r3, [pc, #28]	; (3044 <adc_async_channel_conversion_done+0x58>)
    3026:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    3028:	8aab      	ldrh	r3, [r5, #20]
    302a:	3301      	adds	r3, #1
    302c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    302e:	8aab      	ldrh	r3, [r5, #20]
    3030:	3301      	adds	r3, #1
    3032:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    3034:	f858 3004 	ldr.w	r3, [r8, r4]
    3038:	b113      	cbz	r3, 3040 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    303a:	4639      	mov	r1, r7
    303c:	4630      	mov	r0, r6
    303e:	4798      	blx	r3
    3040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3044:	00004655 	.word	0x00004655
    3048:	000049db 	.word	0x000049db

0000304c <adc_async_init>:
{
    304c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3050:	4689      	mov	r9, r1
    3052:	4616      	mov	r6, r2
    3054:	461c      	mov	r4, r3
    3056:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    305a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    305c:	4607      	mov	r7, r0
    305e:	b140      	cbz	r0, 3072 <adc_async_init+0x26>
    3060:	b149      	cbz	r1, 3076 <adc_async_init+0x2a>
    3062:	b152      	cbz	r2, 307a <adc_async_init+0x2e>
    3064:	f1b8 0f00 	cmp.w	r8, #0
    3068:	d009      	beq.n	307e <adc_async_init+0x32>
    306a:	1c28      	adds	r0, r5, #0
    306c:	bf18      	it	ne
    306e:	2001      	movne	r0, #1
    3070:	e006      	b.n	3080 <adc_async_init+0x34>
    3072:	2000      	movs	r0, #0
    3074:	e004      	b.n	3080 <adc_async_init+0x34>
    3076:	2000      	movs	r0, #0
    3078:	e002      	b.n	3080 <adc_async_init+0x34>
    307a:	2000      	movs	r0, #0
    307c:	e000      	b.n	3080 <adc_async_init+0x34>
    307e:	2000      	movs	r0, #0
    3080:	f8df b064 	ldr.w	fp, [pc, #100]	; 30e8 <adc_async_init+0x9c>
    3084:	223f      	movs	r2, #63	; 0x3f
    3086:	4659      	mov	r1, fp
    3088:	f8df a060 	ldr.w	sl, [pc, #96]	; 30ec <adc_async_init+0xa0>
    308c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    308e:	1c60      	adds	r0, r4, #1
    3090:	2240      	movs	r2, #64	; 0x40
    3092:	4659      	mov	r1, fp
    3094:	4580      	cmp	r8, r0
    3096:	bfcc      	ite	gt
    3098:	2000      	movgt	r0, #0
    309a:	2001      	movle	r0, #1
    309c:	47d0      	blx	sl
	device = &descr->device;
    309e:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    30a0:	21ff      	movs	r1, #255	; 0xff
    30a2:	b2da      	uxtb	r2, r3
    30a4:	54b1      	strb	r1, [r6, r2]
    30a6:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    30a8:	b2da      	uxtb	r2, r3
    30aa:	42a2      	cmp	r2, r4
    30ac:	d9f9      	bls.n	30a2 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    30ae:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    30b0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    30b4:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    30b8:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    30ba:	4649      	mov	r1, r9
    30bc:	4638      	mov	r0, r7
    30be:	4b06      	ldr	r3, [pc, #24]	; (30d8 <adc_async_init+0x8c>)
    30c0:	4798      	blx	r3
	if (init_status) {
    30c2:	4603      	mov	r3, r0
    30c4:	b928      	cbnz	r0, 30d2 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    30c6:	4a05      	ldr	r2, [pc, #20]	; (30dc <adc_async_init+0x90>)
    30c8:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    30ca:	4a05      	ldr	r2, [pc, #20]	; (30e0 <adc_async_init+0x94>)
    30cc:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    30ce:	4a05      	ldr	r2, [pc, #20]	; (30e4 <adc_async_init+0x98>)
    30d0:	607a      	str	r2, [r7, #4]
}
    30d2:	4618      	mov	r0, r3
    30d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d8:	000048a9 	.word	0x000048a9
    30dc:	00002fed 	.word	0x00002fed
    30e0:	00002fd9 	.word	0x00002fd9
    30e4:	00002fe3 	.word	0x00002fe3
    30e8:	0000aca4 	.word	0x0000aca4
    30ec:	00004519 	.word	0x00004519

000030f0 <adc_async_register_channel_buffer>:
{
    30f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30f4:	460e      	mov	r6, r1
    30f6:	4617      	mov	r7, r2
    30f8:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    30fa:	4605      	mov	r5, r0
    30fc:	2800      	cmp	r0, #0
    30fe:	d040      	beq.n	3182 <adc_async_register_channel_buffer+0x92>
    3100:	2a00      	cmp	r2, #0
    3102:	d040      	beq.n	3186 <adc_async_register_channel_buffer+0x96>
    3104:	1c18      	adds	r0, r3, #0
    3106:	bf18      	it	ne
    3108:	2001      	movne	r0, #1
    310a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 31a4 <adc_async_register_channel_buffer+0xb4>
    310e:	2266      	movs	r2, #102	; 0x66
    3110:	4649      	mov	r1, r9
    3112:	4c22      	ldr	r4, [pc, #136]	; (319c <adc_async_register_channel_buffer+0xac>)
    3114:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    3116:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    311a:	2267      	movs	r2, #103	; 0x67
    311c:	4649      	mov	r1, r9
    311e:	42b0      	cmp	r0, r6
    3120:	bf34      	ite	cc
    3122:	2000      	movcc	r0, #0
    3124:	2001      	movcs	r0, #1
    3126:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    3128:	6a29      	ldr	r1, [r5, #32]
    312a:	5d8b      	ldrb	r3, [r1, r6]
    312c:	2bff      	cmp	r3, #255	; 0xff
    312e:	d12c      	bne.n	318a <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    3130:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3134:	2300      	movs	r3, #0
    3136:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    3138:	b2da      	uxtb	r2, r3
    313a:	5c8a      	ldrb	r2, [r1, r2]
    313c:	2aff      	cmp	r2, #255	; 0xff
			index++;
    313e:	bf1c      	itt	ne
    3140:	3401      	addne	r4, #1
    3142:	b2e4      	uxtbne	r4, r4
    3144:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    3146:	b2da      	uxtb	r2, r3
    3148:	4282      	cmp	r2, r0
    314a:	d9f5      	bls.n	3138 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    314c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    3150:	42a3      	cmp	r3, r4
    3152:	d31d      	bcc.n	3190 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    3154:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    3158:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    315c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    315e:	4448      	add	r0, r9
    3160:	4642      	mov	r2, r8
    3162:	4639      	mov	r1, r7
    3164:	3004      	adds	r0, #4
    3166:	4b0e      	ldr	r3, [pc, #56]	; (31a0 <adc_async_register_channel_buffer+0xb0>)
    3168:	4798      	blx	r3
    316a:	4602      	mov	r2, r0
    316c:	b998      	cbnz	r0, 3196 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    316e:	6a2b      	ldr	r3, [r5, #32]
    3170:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    3172:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3174:	4499      	add	r9, r3
    3176:	2300      	movs	r3, #0
    3178:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    317c:	4610      	mov	r0, r2
    317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3182:	2000      	movs	r0, #0
    3184:	e7c1      	b.n	310a <adc_async_register_channel_buffer+0x1a>
    3186:	2000      	movs	r0, #0
    3188:	e7bf      	b.n	310a <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    318a:	f06f 020c 	mvn.w	r2, #12
    318e:	e7f5      	b.n	317c <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    3190:	f06f 021b 	mvn.w	r2, #27
    3194:	e7f2      	b.n	317c <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    3196:	f06f 020c 	mvn.w	r2, #12
    319a:	e7ef      	b.n	317c <adc_async_register_channel_buffer+0x8c>
    319c:	00004519 	.word	0x00004519
    31a0:	000045c1 	.word	0x000045c1
    31a4:	0000aca4 	.word	0x0000aca4

000031a8 <adc_async_enable_channel>:
{
    31a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31aa:	460d      	mov	r5, r1
	ASSERT(descr);
    31ac:	4f0b      	ldr	r7, [pc, #44]	; (31dc <adc_async_enable_channel+0x34>)
    31ae:	4604      	mov	r4, r0
    31b0:	2283      	movs	r2, #131	; 0x83
    31b2:	4639      	mov	r1, r7
    31b4:	3000      	adds	r0, #0
    31b6:	bf18      	it	ne
    31b8:	2001      	movne	r0, #1
    31ba:	4e09      	ldr	r6, [pc, #36]	; (31e0 <adc_async_enable_channel+0x38>)
    31bc:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    31be:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    31c2:	2284      	movs	r2, #132	; 0x84
    31c4:	4639      	mov	r1, r7
    31c6:	42a8      	cmp	r0, r5
    31c8:	bf34      	ite	cc
    31ca:	2000      	movcc	r0, #0
    31cc:	2001      	movcs	r0, #1
    31ce:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    31d0:	4629      	mov	r1, r5
    31d2:	4620      	mov	r0, r4
    31d4:	4b03      	ldr	r3, [pc, #12]	; (31e4 <adc_async_enable_channel+0x3c>)
    31d6:	4798      	blx	r3
}
    31d8:	2000      	movs	r0, #0
    31da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31dc:	0000aca4 	.word	0x0000aca4
    31e0:	00004519 	.word	0x00004519
    31e4:	000049c5 	.word	0x000049c5

000031e8 <adc_async_register_callback>:
{
    31e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    31ec:	460e      	mov	r6, r1
    31ee:	4614      	mov	r4, r2
    31f0:	4699      	mov	r9, r3
	ASSERT(descr);
    31f2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3264 <adc_async_register_callback+0x7c>
    31f6:	4605      	mov	r5, r0
    31f8:	229c      	movs	r2, #156	; 0x9c
    31fa:	4641      	mov	r1, r8
    31fc:	3000      	adds	r0, #0
    31fe:	bf18      	it	ne
    3200:	2001      	movne	r0, #1
    3202:	4f16      	ldr	r7, [pc, #88]	; (325c <adc_async_register_callback+0x74>)
    3204:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    3206:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    320a:	229d      	movs	r2, #157	; 0x9d
    320c:	4641      	mov	r1, r8
    320e:	42b0      	cmp	r0, r6
    3210:	bf34      	ite	cc
    3212:	2000      	movcc	r0, #0
    3214:	2001      	movcs	r0, #1
    3216:	47b8      	blx	r7
	switch (type) {
    3218:	2c01      	cmp	r4, #1
    321a:	d019      	beq.n	3250 <adc_async_register_callback+0x68>
    321c:	b12c      	cbz	r4, 322a <adc_async_register_callback+0x42>
    321e:	2c02      	cmp	r4, #2
    3220:	d019      	beq.n	3256 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    3222:	f06f 000c 	mvn.w	r0, #12
}
    3226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    322a:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    322c:	5d9b      	ldrb	r3, [r3, r6]
    322e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3234:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    3238:	f119 0300 	adds.w	r3, r9, #0
    323c:	bf18      	it	ne
    323e:	2301      	movne	r3, #1
    3240:	4622      	mov	r2, r4
    3242:	4631      	mov	r1, r6
    3244:	4628      	mov	r0, r5
    3246:	4c06      	ldr	r4, [pc, #24]	; (3260 <adc_async_register_callback+0x78>)
    3248:	47a0      	blx	r4
	return ERR_NONE;
    324a:	2000      	movs	r0, #0
    324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    3250:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    3254:	e7f0      	b.n	3238 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    3256:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    325a:	e7ed      	b.n	3238 <adc_async_register_callback+0x50>
    325c:	00004519 	.word	0x00004519
    3260:	00004a03 	.word	0x00004a03
    3264:	0000aca4 	.word	0x0000aca4

00003268 <adc_async_read_channel>:
{
    3268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    326c:	b083      	sub	sp, #12
    326e:	4688      	mov	r8, r1
    3270:	4691      	mov	r9, r2
    3272:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    3274:	4604      	mov	r4, r0
    3276:	2800      	cmp	r0, #0
    3278:	d04f      	beq.n	331a <adc_async_read_channel+0xb2>
    327a:	2a00      	cmp	r2, #0
    327c:	d04f      	beq.n	331e <adc_async_read_channel+0xb6>
    327e:	1c18      	adds	r0, r3, #0
    3280:	bf18      	it	ne
    3282:	2001      	movne	r0, #1
    3284:	4f29      	ldr	r7, [pc, #164]	; (332c <adc_async_read_channel+0xc4>)
    3286:	22bc      	movs	r2, #188	; 0xbc
    3288:	4639      	mov	r1, r7
    328a:	4e29      	ldr	r6, [pc, #164]	; (3330 <adc_async_read_channel+0xc8>)
    328c:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    328e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3292:	22bd      	movs	r2, #189	; 0xbd
    3294:	4639      	mov	r1, r7
    3296:	4540      	cmp	r0, r8
    3298:	bf34      	ite	cc
    329a:	2000      	movcc	r0, #0
    329c:	2001      	movcs	r0, #1
    329e:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    32a0:	4620      	mov	r0, r4
    32a2:	4b24      	ldr	r3, [pc, #144]	; (3334 <adc_async_read_channel+0xcc>)
    32a4:	4798      	blx	r3
	ASSERT(!(length % data_size));
    32a6:	fb95 f3f0 	sdiv	r3, r5, r0
    32aa:	fb03 5010 	mls	r0, r3, r0, r5
    32ae:	22bf      	movs	r2, #191	; 0xbf
    32b0:	4639      	mov	r1, r7
    32b2:	fab0 f080 	clz	r0, r0
    32b6:	0940      	lsrs	r0, r0, #5
    32b8:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    32ba:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    32bc:	f813 b008 	ldrb.w	fp, [r3, r8]
    32c0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    32c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    32c6:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    32ca:	a801      	add	r0, sp, #4
    32cc:	4b1a      	ldr	r3, [pc, #104]	; (3338 <adc_async_read_channel+0xd0>)
    32ce:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    32d0:	f10b 0a04 	add.w	sl, fp, #4
    32d4:	4650      	mov	r0, sl
    32d6:	4b19      	ldr	r3, [pc, #100]	; (333c <adc_async_read_channel+0xd4>)
    32d8:	4798      	blx	r3
    32da:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    32dc:	a801      	add	r0, sp, #4
    32de:	4b18      	ldr	r3, [pc, #96]	; (3340 <adc_async_read_channel+0xd8>)
    32e0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    32e2:	f1b8 0f00 	cmp.w	r8, #0
    32e6:	d01c      	beq.n	3322 <adc_async_read_channel+0xba>
    32e8:	b1ed      	cbz	r5, 3326 <adc_async_read_channel+0xbe>
    32ea:	3d01      	subs	r5, #1
    32ec:	b2ad      	uxth	r5, r5
    32ee:	3502      	adds	r5, #2
    32f0:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    32f2:	4f14      	ldr	r7, [pc, #80]	; (3344 <adc_async_read_channel+0xdc>)
    32f4:	b2a6      	uxth	r6, r4
    32f6:	1e61      	subs	r1, r4, #1
    32f8:	4449      	add	r1, r9
    32fa:	4650      	mov	r0, sl
    32fc:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    32fe:	4544      	cmp	r4, r8
    3300:	d002      	beq.n	3308 <adc_async_read_channel+0xa0>
    3302:	3401      	adds	r4, #1
    3304:	42ac      	cmp	r4, r5
    3306:	d1f5      	bne.n	32f4 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    3308:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    330c:	1b9b      	subs	r3, r3, r6
    330e:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    3312:	4630      	mov	r0, r6
    3314:	b003      	add	sp, #12
    3316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    331a:	2000      	movs	r0, #0
    331c:	e7b2      	b.n	3284 <adc_async_read_channel+0x1c>
    331e:	2000      	movs	r0, #0
    3320:	e7b0      	b.n	3284 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    3322:	2600      	movs	r6, #0
    3324:	e7f0      	b.n	3308 <adc_async_read_channel+0xa0>
    3326:	2600      	movs	r6, #0
    3328:	e7ee      	b.n	3308 <adc_async_read_channel+0xa0>
    332a:	bf00      	nop
    332c:	0000aca4 	.word	0x0000aca4
    3330:	00004519 	.word	0x00004519
    3334:	000049db 	.word	0x000049db
    3338:	00003371 	.word	0x00003371
    333c:	00004695 	.word	0x00004695
    3340:	0000337f 	.word	0x0000337f
    3344:	00004611 	.word	0x00004611

00003348 <adc_async_start_conversion>:
{
    3348:	b510      	push	{r4, lr}
	ASSERT(descr);
    334a:	4604      	mov	r4, r0
    334c:	22d6      	movs	r2, #214	; 0xd6
    334e:	4905      	ldr	r1, [pc, #20]	; (3364 <adc_async_start_conversion+0x1c>)
    3350:	3000      	adds	r0, #0
    3352:	bf18      	it	ne
    3354:	2001      	movne	r0, #1
    3356:	4b04      	ldr	r3, [pc, #16]	; (3368 <adc_async_start_conversion+0x20>)
    3358:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    335a:	4620      	mov	r0, r4
    335c:	4b03      	ldr	r3, [pc, #12]	; (336c <adc_async_start_conversion+0x24>)
    335e:	4798      	blx	r3
}
    3360:	2000      	movs	r0, #0
    3362:	bd10      	pop	{r4, pc}
    3364:	0000aca4 	.word	0x0000aca4
    3368:	00004519 	.word	0x00004519
    336c:	000049ed 	.word	0x000049ed

00003370 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3370:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3374:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3376:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3378:	f3bf 8f5f 	dmb	sy
    337c:	4770      	bx	lr

0000337e <atomic_leave_critical>:
    337e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3382:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3384:	f383 8810 	msr	PRIMASK, r3
    3388:	4770      	bx	lr
	...

0000338c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    338c:	b538      	push	{r3, r4, r5, lr}
    338e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    3390:	4605      	mov	r5, r0
    3392:	b158      	cbz	r0, 33ac <crc_sync_init+0x20>
    3394:	1c08      	adds	r0, r1, #0
    3396:	bf18      	it	ne
    3398:	2001      	movne	r0, #1
    339a:	222b      	movs	r2, #43	; 0x2b
    339c:	4904      	ldr	r1, [pc, #16]	; (33b0 <crc_sync_init+0x24>)
    339e:	4b05      	ldr	r3, [pc, #20]	; (33b4 <crc_sync_init+0x28>)
    33a0:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    33a2:	4621      	mov	r1, r4
    33a4:	4628      	mov	r0, r5
    33a6:	4b04      	ldr	r3, [pc, #16]	; (33b8 <crc_sync_init+0x2c>)
    33a8:	4798      	blx	r3
}
    33aa:	bd38      	pop	{r3, r4, r5, pc}
    33ac:	2000      	movs	r0, #0
    33ae:	e7f4      	b.n	339a <crc_sync_init+0xe>
    33b0:	0000acc0 	.word	0x0000acc0
    33b4:	00004519 	.word	0x00004519
    33b8:	00004ded 	.word	0x00004ded

000033bc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    33bc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    33be:	4b02      	ldr	r3, [pc, #8]	; (33c8 <delay_init+0xc>)
    33c0:	6018      	str	r0, [r3, #0]
    33c2:	4b02      	ldr	r3, [pc, #8]	; (33cc <delay_init+0x10>)
    33c4:	4798      	blx	r3
    33c6:	bd08      	pop	{r3, pc}
    33c8:	20000a50 	.word	0x20000a50
    33cc:	00006629 	.word	0x00006629

000033d0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    33d0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    33d2:	4b04      	ldr	r3, [pc, #16]	; (33e4 <delay_us+0x14>)
    33d4:	681c      	ldr	r4, [r3, #0]
    33d6:	4b04      	ldr	r3, [pc, #16]	; (33e8 <delay_us+0x18>)
    33d8:	4798      	blx	r3
    33da:	4601      	mov	r1, r0
    33dc:	4620      	mov	r0, r4
    33de:	4b03      	ldr	r3, [pc, #12]	; (33ec <delay_us+0x1c>)
    33e0:	4798      	blx	r3
    33e2:	bd10      	pop	{r4, pc}
    33e4:	20000a50 	.word	0x20000a50
    33e8:	00004ab1 	.word	0x00004ab1
    33ec:	0000663d 	.word	0x0000663d

000033f0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    33f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    33f2:	4b04      	ldr	r3, [pc, #16]	; (3404 <delay_ms+0x14>)
    33f4:	681c      	ldr	r4, [r3, #0]
    33f6:	4b04      	ldr	r3, [pc, #16]	; (3408 <delay_ms+0x18>)
    33f8:	4798      	blx	r3
    33fa:	4601      	mov	r1, r0
    33fc:	4620      	mov	r0, r4
    33fe:	4b03      	ldr	r3, [pc, #12]	; (340c <delay_ms+0x1c>)
    3400:	4798      	blx	r3
    3402:	bd10      	pop	{r4, pc}
    3404:	20000a50 	.word	0x20000a50
    3408:	00004ab9 	.word	0x00004ab9
    340c:	0000663d 	.word	0x0000663d

00003410 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3410:	b508      	push	{r3, lr}
	return _event_system_init();
    3412:	4b01      	ldr	r3, [pc, #4]	; (3418 <event_system_init+0x8>)
    3414:	4798      	blx	r3
}
    3416:	bd08      	pop	{r3, pc}
    3418:	00004df5 	.word	0x00004df5

0000341c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    341c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    341e:	6943      	ldr	r3, [r0, #20]
    3420:	b103      	cbz	r3, 3424 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    3422:	4798      	blx	r3
    3424:	bd08      	pop	{r3, pc}

00003426 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    3426:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    3428:	6983      	ldr	r3, [r0, #24]
    342a:	b103      	cbz	r3, 342e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    342c:	4798      	blx	r3
    342e:	bd08      	pop	{r3, pc}

00003430 <flash_init>:
{
    3430:	b538      	push	{r3, r4, r5, lr}
    3432:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    3434:	4604      	mov	r4, r0
    3436:	b190      	cbz	r0, 345e <flash_init+0x2e>
    3438:	1c08      	adds	r0, r1, #0
    343a:	bf18      	it	ne
    343c:	2001      	movne	r0, #1
    343e:	2238      	movs	r2, #56	; 0x38
    3440:	4908      	ldr	r1, [pc, #32]	; (3464 <flash_init+0x34>)
    3442:	4b09      	ldr	r3, [pc, #36]	; (3468 <flash_init+0x38>)
    3444:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    3446:	4629      	mov	r1, r5
    3448:	4620      	mov	r0, r4
    344a:	4b08      	ldr	r3, [pc, #32]	; (346c <flash_init+0x3c>)
    344c:	4798      	blx	r3
	if (rc) {
    344e:	4603      	mov	r3, r0
    3450:	b918      	cbnz	r0, 345a <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    3452:	4a07      	ldr	r2, [pc, #28]	; (3470 <flash_init+0x40>)
    3454:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    3456:	4a07      	ldr	r2, [pc, #28]	; (3474 <flash_init+0x44>)
    3458:	6062      	str	r2, [r4, #4]
}
    345a:	4618      	mov	r0, r3
    345c:	bd38      	pop	{r3, r4, r5, pc}
    345e:	2000      	movs	r0, #0
    3460:	e7ed      	b.n	343e <flash_init+0xe>
    3462:	bf00      	nop
    3464:	0000acdc 	.word	0x0000acdc
    3468:	00004519 	.word	0x00004519
    346c:	00004f01 	.word	0x00004f01
    3470:	0000341d 	.word	0x0000341d
    3474:	00003427 	.word	0x00003427

00003478 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    3478:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    347a:	8843      	ldrh	r3, [r0, #2]
    347c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3480:	d102      	bne.n	3488 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    3482:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3484:	b103      	cbz	r3, 3488 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    3486:	4798      	blx	r3
    3488:	bd08      	pop	{r3, pc}

0000348a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    348a:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    348c:	8843      	ldrh	r3, [r0, #2]
    348e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3492:	d102      	bne.n	349a <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    3494:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3496:	b103      	cbz	r3, 349a <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    3498:	4798      	blx	r3
    349a:	bd08      	pop	{r3, pc}

0000349c <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    349c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    349e:	8843      	ldrh	r3, [r0, #2]
    34a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    34a4:	d102      	bne.n	34ac <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    34a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    34a8:	b103      	cbz	r3, 34ac <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    34aa:	4798      	blx	r3
    34ac:	bd08      	pop	{r3, pc}
	...

000034b0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    34b0:	b510      	push	{r4, lr}
    34b2:	b084      	sub	sp, #16
    34b4:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    34b6:	8a83      	ldrh	r3, [r0, #20]
    34b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    34bc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    34be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    34c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    34c6:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    34c8:	a901      	add	r1, sp, #4
    34ca:	3828      	subs	r0, #40	; 0x28
    34cc:	4b03      	ldr	r3, [pc, #12]	; (34dc <i2c_m_async_write+0x2c>)
    34ce:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    34d0:	2800      	cmp	r0, #0
    34d2:	bf08      	it	eq
    34d4:	4620      	moveq	r0, r4
    34d6:	b004      	add	sp, #16
    34d8:	bd10      	pop	{r4, pc}
    34da:	bf00      	nop
    34dc:	00005b65 	.word	0x00005b65

000034e0 <i2c_m_async_read>:
{
    34e0:	b510      	push	{r4, lr}
    34e2:	b084      	sub	sp, #16
    34e4:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    34e6:	8a83      	ldrh	r3, [r0, #20]
    34e8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    34ec:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    34ee:	f248 0301 	movw	r3, #32769	; 0x8001
    34f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    34f6:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    34f8:	a901      	add	r1, sp, #4
    34fa:	3828      	subs	r0, #40	; 0x28
    34fc:	4b03      	ldr	r3, [pc, #12]	; (350c <i2c_m_async_read+0x2c>)
    34fe:	4798      	blx	r3
}
    3500:	2800      	cmp	r0, #0
    3502:	bf08      	it	eq
    3504:	4620      	moveq	r0, r4
    3506:	b004      	add	sp, #16
    3508:	bd10      	pop	{r4, pc}
    350a:	bf00      	nop
    350c:	00005b65 	.word	0x00005b65

00003510 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    3510:	b570      	push	{r4, r5, r6, lr}
    3512:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    3514:	4604      	mov	r4, r0
    3516:	2289      	movs	r2, #137	; 0x89
    3518:	490f      	ldr	r1, [pc, #60]	; (3558 <i2c_m_async_init+0x48>)
    351a:	3000      	adds	r0, #0
    351c:	bf18      	it	ne
    351e:	2001      	movne	r0, #1
    3520:	4b0e      	ldr	r3, [pc, #56]	; (355c <i2c_m_async_init+0x4c>)
    3522:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    3524:	4629      	mov	r1, r5
    3526:	4620      	mov	r0, r4
    3528:	4b0d      	ldr	r3, [pc, #52]	; (3560 <i2c_m_async_init+0x50>)
    352a:	4798      	blx	r3
	if (init_status) {
    352c:	4605      	mov	r5, r0
    352e:	b108      	cbz	r0, 3534 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    3530:	4628      	mov	r0, r5
    3532:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    3534:	4b0b      	ldr	r3, [pc, #44]	; (3564 <i2c_m_async_init+0x54>)
    3536:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    3538:	4b0b      	ldr	r3, [pc, #44]	; (3568 <i2c_m_async_init+0x58>)
    353a:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    353c:	4a0b      	ldr	r2, [pc, #44]	; (356c <i2c_m_async_init+0x5c>)
    353e:	2101      	movs	r1, #1
    3540:	4620      	mov	r0, r4
    3542:	4e0b      	ldr	r6, [pc, #44]	; (3570 <i2c_m_async_init+0x60>)
    3544:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    3546:	4a0b      	ldr	r2, [pc, #44]	; (3574 <i2c_m_async_init+0x64>)
    3548:	2102      	movs	r1, #2
    354a:	4620      	mov	r0, r4
    354c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    354e:	4a0a      	ldr	r2, [pc, #40]	; (3578 <i2c_m_async_init+0x68>)
    3550:	2100      	movs	r1, #0
    3552:	4620      	mov	r0, r4
    3554:	47b0      	blx	r6
	return ERR_NONE;
    3556:	e7eb      	b.n	3530 <i2c_m_async_init+0x20>
    3558:	0000acf4 	.word	0x0000acf4
    355c:	00004519 	.word	0x00004519
    3560:	00005ae5 	.word	0x00005ae5
    3564:	000034e1 	.word	0x000034e1
    3568:	000034b1 	.word	0x000034b1
    356c:	00003479 	.word	0x00003479
    3570:	00005c95 	.word	0x00005c95
    3574:	0000348b 	.word	0x0000348b
    3578:	0000349d 	.word	0x0000349d

0000357c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    357c:	b570      	push	{r4, r5, r6, lr}
    357e:	460d      	mov	r5, r1
    3580:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    3582:	4604      	mov	r4, r0
    3584:	b160      	cbz	r0, 35a0 <io_write+0x24>
    3586:	1c08      	adds	r0, r1, #0
    3588:	bf18      	it	ne
    358a:	2001      	movne	r0, #1
    358c:	2234      	movs	r2, #52	; 0x34
    358e:	4905      	ldr	r1, [pc, #20]	; (35a4 <io_write+0x28>)
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <io_write+0x2c>)
    3592:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    3594:	6823      	ldr	r3, [r4, #0]
    3596:	4632      	mov	r2, r6
    3598:	4629      	mov	r1, r5
    359a:	4620      	mov	r0, r4
    359c:	4798      	blx	r3
}
    359e:	bd70      	pop	{r4, r5, r6, pc}
    35a0:	2000      	movs	r0, #0
    35a2:	e7f3      	b.n	358c <io_write+0x10>
    35a4:	0000ad14 	.word	0x0000ad14
    35a8:	00004519 	.word	0x00004519

000035ac <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    35ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ae:	460f      	mov	r7, r1
    35b0:	4616      	mov	r6, r2
	ASSERT(io);
    35b2:	4604      	mov	r4, r0
    35b4:	f240 1227 	movw	r2, #295	; 0x127
    35b8:	4909      	ldr	r1, [pc, #36]	; (35e0 <_spi_m_async_io_write+0x34>)
    35ba:	3000      	adds	r0, #0
    35bc:	bf18      	it	ne
    35be:	2001      	movne	r0, #1
    35c0:	4b08      	ldr	r3, [pc, #32]	; (35e4 <_spi_m_async_io_write+0x38>)
    35c2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    35c4:	2500      	movs	r5, #0
    35c6:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    35c8:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    35ca:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    35cc:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    35ce:	2310      	movs	r3, #16
    35d0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    35d2:	2101      	movs	r1, #1
    35d4:	f1a4 0020 	sub.w	r0, r4, #32
    35d8:	4b03      	ldr	r3, [pc, #12]	; (35e8 <_spi_m_async_io_write+0x3c>)
    35da:	4798      	blx	r3

	return ERR_NONE;
}
    35dc:	4628      	mov	r0, r5
    35de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35e0:	0000ad28 	.word	0x0000ad28
    35e4:	00004519 	.word	0x00004519
    35e8:	0000613d 	.word	0x0000613d

000035ec <_spi_m_async_io_read>:
{
    35ec:	b570      	push	{r4, r5, r6, lr}
    35ee:	460d      	mov	r5, r1
    35f0:	4616      	mov	r6, r2
	ASSERT(io);
    35f2:	4604      	mov	r4, r0
    35f4:	f240 1205 	movw	r2, #261	; 0x105
    35f8:	490c      	ldr	r1, [pc, #48]	; (362c <_spi_m_async_io_read+0x40>)
    35fa:	3000      	adds	r0, #0
    35fc:	bf18      	it	ne
    35fe:	2001      	movne	r0, #1
    3600:	4b0b      	ldr	r3, [pc, #44]	; (3630 <_spi_m_async_io_read+0x44>)
    3602:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    3604:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    3606:	2500      	movs	r5, #0
    3608:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    360a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    360c:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    360e:	2310      	movs	r3, #16
    3610:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    3612:	3c20      	subs	r4, #32
    3614:	2101      	movs	r1, #1
    3616:	4620      	mov	r0, r4
    3618:	4b06      	ldr	r3, [pc, #24]	; (3634 <_spi_m_async_io_read+0x48>)
    361a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    361c:	f240 11ff 	movw	r1, #511	; 0x1ff
    3620:	4620      	mov	r0, r4
    3622:	4b05      	ldr	r3, [pc, #20]	; (3638 <_spi_m_async_io_read+0x4c>)
    3624:	4798      	blx	r3
}
    3626:	4628      	mov	r0, r5
    3628:	bd70      	pop	{r4, r5, r6, pc}
    362a:	bf00      	nop
    362c:	0000ad28 	.word	0x0000ad28
    3630:	00004519 	.word	0x00004519
    3634:	00006171 	.word	0x00006171
    3638:	000061ed 	.word	0x000061ed

0000363c <_spi_dev_error>:
{
    363c:	b570      	push	{r4, r5, r6, lr}
    363e:	4604      	mov	r4, r0
    3640:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    3642:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    3644:	2100      	movs	r1, #0
    3646:	4b09      	ldr	r3, [pc, #36]	; (366c <_spi_dev_error+0x30>)
    3648:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    364a:	2100      	movs	r1, #0
    364c:	4620      	mov	r0, r4
    364e:	4b08      	ldr	r3, [pc, #32]	; (3670 <_spi_dev_error+0x34>)
    3650:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    3652:	2100      	movs	r1, #0
    3654:	4620      	mov	r0, r4
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <_spi_dev_error+0x38>)
    3658:	4798      	blx	r3
	spi->stat = 0;
    365a:	2300      	movs	r3, #0
    365c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    3660:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3662:	b113      	cbz	r3, 366a <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    3664:	4631      	mov	r1, r6
    3666:	4628      	mov	r0, r5
    3668:	4798      	blx	r3
    366a:	bd70      	pop	{r4, r5, r6, pc}
    366c:	0000613d 	.word	0x0000613d
    3670:	00006171 	.word	0x00006171
    3674:	000061b1 	.word	0x000061b1

00003678 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    3678:	6c02      	ldr	r2, [r0, #64]	; 0x40
    367a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    367c:	429a      	cmp	r2, r3
    367e:	d200      	bcs.n	3682 <_spi_dev_complete+0xa>
    3680:	4770      	bx	lr
{
    3682:	b510      	push	{r4, lr}
    3684:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    3686:	2100      	movs	r1, #0
    3688:	4b04      	ldr	r3, [pc, #16]	; (369c <_spi_dev_complete+0x24>)
    368a:	4798      	blx	r3
		spi->stat = 0;
    368c:	2300      	movs	r3, #0
    368e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    3692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3694:	b10b      	cbz	r3, 369a <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    3696:	1f20      	subs	r0, r4, #4
    3698:	4798      	blx	r3
    369a:	bd10      	pop	{r4, pc}
    369c:	000061b1 	.word	0x000061b1

000036a0 <_spi_dev_tx>:
{
    36a0:	b510      	push	{r4, lr}
    36a2:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    36a4:	7903      	ldrb	r3, [r0, #4]
    36a6:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    36a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    36aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
    36ac:	f103 0101 	add.w	r1, r3, #1
    36b0:	6401      	str	r1, [r0, #64]	; 0x40
    36b2:	bf94      	ite	ls
    36b4:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    36b6:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    36ba:	4b08      	ldr	r3, [pc, #32]	; (36dc <_spi_dev_tx+0x3c>)
    36bc:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    36be:	6c22      	ldr	r2, [r4, #64]	; 0x40
    36c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    36c2:	429a      	cmp	r2, r3
    36c4:	d000      	beq.n	36c8 <_spi_dev_tx+0x28>
    36c6:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    36c8:	2100      	movs	r1, #0
    36ca:	4620      	mov	r0, r4
    36cc:	4b04      	ldr	r3, [pc, #16]	; (36e0 <_spi_dev_tx+0x40>)
    36ce:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    36d0:	2101      	movs	r1, #1
    36d2:	4620      	mov	r0, r4
    36d4:	4b03      	ldr	r3, [pc, #12]	; (36e4 <_spi_dev_tx+0x44>)
    36d6:	4798      	blx	r3
}
    36d8:	e7f5      	b.n	36c6 <_spi_dev_tx+0x26>
    36da:	bf00      	nop
    36dc:	000061ed 	.word	0x000061ed
    36e0:	0000613d 	.word	0x0000613d
    36e4:	000061b1 	.word	0x000061b1

000036e8 <_spi_dev_rx>:
{
    36e8:	b570      	push	{r4, r5, r6, lr}
    36ea:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    36ec:	6b85      	ldr	r5, [r0, #56]	; 0x38
    36ee:	b305      	cbz	r5, 3732 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    36f0:	7903      	ldrb	r3, [r0, #4]
    36f2:	2b01      	cmp	r3, #1
    36f4:	d916      	bls.n	3724 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    36f6:	6c06      	ldr	r6, [r0, #64]	; 0x40
    36f8:	1c73      	adds	r3, r6, #1
    36fa:	6403      	str	r3, [r0, #64]	; 0x40
    36fc:	4b18      	ldr	r3, [pc, #96]	; (3760 <_spi_dev_rx+0x78>)
    36fe:	4798      	blx	r3
    3700:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    3704:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3706:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3708:	4293      	cmp	r3, r2
    370a:	d21d      	bcs.n	3748 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    370c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    370e:	b1b2      	cbz	r2, 373e <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    3710:	7921      	ldrb	r1, [r4, #4]
    3712:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    3714:	bf94      	ite	ls
    3716:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    3718:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    371c:	4620      	mov	r0, r4
    371e:	4b11      	ldr	r3, [pc, #68]	; (3764 <_spi_dev_rx+0x7c>)
    3720:	4798      	blx	r3
    3722:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    3724:	6c06      	ldr	r6, [r0, #64]	; 0x40
    3726:	1c73      	adds	r3, r6, #1
    3728:	6403      	str	r3, [r0, #64]	; 0x40
    372a:	4b0d      	ldr	r3, [pc, #52]	; (3760 <_spi_dev_rx+0x78>)
    372c:	4798      	blx	r3
    372e:	55a8      	strb	r0, [r5, r6]
    3730:	e7e8      	b.n	3704 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    3732:	4b0b      	ldr	r3, [pc, #44]	; (3760 <_spi_dev_rx+0x78>)
    3734:	4798      	blx	r3
		spi->xfercnt++;
    3736:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3738:	3301      	adds	r3, #1
    373a:	6423      	str	r3, [r4, #64]	; 0x40
    373c:	e7e2      	b.n	3704 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    373e:	88e1      	ldrh	r1, [r4, #6]
    3740:	4620      	mov	r0, r4
    3742:	4b08      	ldr	r3, [pc, #32]	; (3764 <_spi_dev_rx+0x7c>)
    3744:	4798      	blx	r3
    3746:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    3748:	2100      	movs	r1, #0
    374a:	4620      	mov	r0, r4
    374c:	4b06      	ldr	r3, [pc, #24]	; (3768 <_spi_dev_rx+0x80>)
    374e:	4798      	blx	r3
		spi->stat = 0;
    3750:	2300      	movs	r3, #0
    3752:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    3756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3758:	b10b      	cbz	r3, 375e <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    375a:	1f20      	subs	r0, r4, #4
    375c:	4798      	blx	r3
    375e:	bd70      	pop	{r4, r5, r6, pc}
    3760:	0000621d 	.word	0x0000621d
    3764:	000061ed 	.word	0x000061ed
    3768:	00006171 	.word	0x00006171

0000376c <spi_m_async_init>:
{
    376c:	b570      	push	{r4, r5, r6, lr}
    376e:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    3770:	4606      	mov	r6, r0
    3772:	b330      	cbz	r0, 37c2 <spi_m_async_init+0x56>
    3774:	1c08      	adds	r0, r1, #0
    3776:	bf18      	it	ne
    3778:	2001      	movne	r0, #1
    377a:	22a5      	movs	r2, #165	; 0xa5
    377c:	4912      	ldr	r1, [pc, #72]	; (37c8 <spi_m_async_init+0x5c>)
    377e:	4b13      	ldr	r3, [pc, #76]	; (37cc <spi_m_async_init+0x60>)
    3780:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3782:	4634      	mov	r4, r6
    3784:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    3788:	4629      	mov	r1, r5
    378a:	4620      	mov	r0, r4
    378c:	4b10      	ldr	r3, [pc, #64]	; (37d0 <spi_m_async_init+0x64>)
    378e:	4798      	blx	r3
	if (rc >= 0) {
    3790:	2800      	cmp	r0, #0
    3792:	db15      	blt.n	37c0 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    3794:	4a0f      	ldr	r2, [pc, #60]	; (37d4 <spi_m_async_init+0x68>)
    3796:	2100      	movs	r1, #0
    3798:	4620      	mov	r0, r4
    379a:	4d0f      	ldr	r5, [pc, #60]	; (37d8 <spi_m_async_init+0x6c>)
    379c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    379e:	4a0f      	ldr	r2, [pc, #60]	; (37dc <spi_m_async_init+0x70>)
    37a0:	2101      	movs	r1, #1
    37a2:	4620      	mov	r0, r4
    37a4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    37a6:	4a0e      	ldr	r2, [pc, #56]	; (37e0 <spi_m_async_init+0x74>)
    37a8:	2102      	movs	r1, #2
    37aa:	4620      	mov	r0, r4
    37ac:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    37ae:	4a0d      	ldr	r2, [pc, #52]	; (37e4 <spi_m_async_init+0x78>)
    37b0:	2103      	movs	r1, #3
    37b2:	4620      	mov	r0, r4
    37b4:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    37b6:	4b0c      	ldr	r3, [pc, #48]	; (37e8 <spi_m_async_init+0x7c>)
    37b8:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    37ba:	4b0c      	ldr	r3, [pc, #48]	; (37ec <spi_m_async_init+0x80>)
    37bc:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    37be:	2000      	movs	r0, #0
}
    37c0:	bd70      	pop	{r4, r5, r6, pc}
    37c2:	2000      	movs	r0, #0
    37c4:	e7d9      	b.n	377a <spi_m_async_init+0xe>
    37c6:	bf00      	nop
    37c8:	0000ad28 	.word	0x0000ad28
    37cc:	00004519 	.word	0x00004519
    37d0:	00006071 	.word	0x00006071
    37d4:	000036a1 	.word	0x000036a1
    37d8:	00006249 	.word	0x00006249
    37dc:	000036e9 	.word	0x000036e9
    37e0:	00003679 	.word	0x00003679
    37e4:	0000363d 	.word	0x0000363d
    37e8:	000035ed 	.word	0x000035ed
    37ec:	000035ad 	.word	0x000035ad

000037f0 <spi_m_async_enable>:
{
    37f0:	b510      	push	{r4, lr}
	ASSERT(spi);
    37f2:	4604      	mov	r4, r0
    37f4:	22c1      	movs	r2, #193	; 0xc1
    37f6:	4905      	ldr	r1, [pc, #20]	; (380c <spi_m_async_enable+0x1c>)
    37f8:	3000      	adds	r0, #0
    37fa:	bf18      	it	ne
    37fc:	2001      	movne	r0, #1
    37fe:	4b04      	ldr	r3, [pc, #16]	; (3810 <spi_m_async_enable+0x20>)
    3800:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    3802:	1d20      	adds	r0, r4, #4
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <spi_m_async_enable+0x24>)
    3806:	4798      	blx	r3
    3808:	bd10      	pop	{r4, pc}
    380a:	bf00      	nop
    380c:	0000ad28 	.word	0x0000ad28
    3810:	00004519 	.word	0x00004519
    3814:	000060d9 	.word	0x000060d9

00003818 <spi_m_async_set_mode>:
{
    3818:	b538      	push	{r3, r4, r5, lr}
    381a:	460d      	mov	r5, r1
	ASSERT(spi);
    381c:	4604      	mov	r4, r0
    381e:	22d9      	movs	r2, #217	; 0xd9
    3820:	4909      	ldr	r1, [pc, #36]	; (3848 <spi_m_async_set_mode+0x30>)
    3822:	3000      	adds	r0, #0
    3824:	bf18      	it	ne
    3826:	2001      	movne	r0, #1
    3828:	4b08      	ldr	r3, [pc, #32]	; (384c <spi_m_async_set_mode+0x34>)
    382a:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    382c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    3830:	f013 0f10 	tst.w	r3, #16
    3834:	d104      	bne.n	3840 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    3836:	4629      	mov	r1, r5
    3838:	1d20      	adds	r0, r4, #4
    383a:	4b05      	ldr	r3, [pc, #20]	; (3850 <spi_m_async_set_mode+0x38>)
    383c:	4798      	blx	r3
    383e:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    3840:	f06f 0003 	mvn.w	r0, #3
}
    3844:	bd38      	pop	{r3, r4, r5, pc}
    3846:	bf00      	nop
    3848:	0000ad28 	.word	0x0000ad28
    384c:	00004519 	.word	0x00004519
    3850:	00006109 	.word	0x00006109

00003854 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    3854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3856:	460d      	mov	r5, r1
    3858:	4617      	mov	r7, r2
    385a:	461e      	mov	r6, r3
	ASSERT(spi);
    385c:	4604      	mov	r4, r0
    385e:	f44f 729c 	mov.w	r2, #312	; 0x138
    3862:	4912      	ldr	r1, [pc, #72]	; (38ac <spi_m_async_transfer+0x58>)
    3864:	3000      	adds	r0, #0
    3866:	bf18      	it	ne
    3868:	2001      	movne	r0, #1
    386a:	4b11      	ldr	r3, [pc, #68]	; (38b0 <spi_m_async_transfer+0x5c>)
    386c:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    386e:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    3870:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    3872:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    3874:	2300      	movs	r3, #0
    3876:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    3878:	2310      	movs	r3, #16
    387a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    387e:	1d26      	adds	r6, r4, #4
    3880:	2101      	movs	r1, #1
    3882:	4630      	mov	r0, r6
    3884:	4b0b      	ldr	r3, [pc, #44]	; (38b4 <spi_m_async_transfer+0x60>)
    3886:	4798      	blx	r3
	if (txbuf) {
    3888:	b15d      	cbz	r5, 38a2 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    388a:	7a23      	ldrb	r3, [r4, #8]
    388c:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    388e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3890:	bf94      	ite	ls
    3892:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    3894:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    3898:	4630      	mov	r0, r6
    389a:	4b07      	ldr	r3, [pc, #28]	; (38b8 <spi_m_async_transfer+0x64>)
    389c:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    389e:	2000      	movs	r0, #0
    38a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    38a2:	8961      	ldrh	r1, [r4, #10]
    38a4:	4630      	mov	r0, r6
    38a6:	4b04      	ldr	r3, [pc, #16]	; (38b8 <spi_m_async_transfer+0x64>)
    38a8:	4798      	blx	r3
    38aa:	e7f8      	b.n	389e <spi_m_async_transfer+0x4a>
    38ac:	0000ad28 	.word	0x0000ad28
    38b0:	00004519 	.word	0x00004519
    38b4:	00006171 	.word	0x00006171
    38b8:	000061ed 	.word	0x000061ed

000038bc <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    38bc:	b570      	push	{r4, r5, r6, lr}
    38be:	460c      	mov	r4, r1
    38c0:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    38c2:	4605      	mov	r5, r0
    38c4:	b158      	cbz	r0, 38de <spi_m_async_register_callback+0x22>
    38c6:	2901      	cmp	r1, #1
    38c8:	bf8c      	ite	hi
    38ca:	2000      	movhi	r0, #0
    38cc:	2001      	movls	r0, #1
    38ce:	f240 1263 	movw	r2, #355	; 0x163
    38d2:	4908      	ldr	r1, [pc, #32]	; (38f4 <spi_m_async_register_callback+0x38>)
    38d4:	4b08      	ldr	r3, [pc, #32]	; (38f8 <spi_m_async_register_callback+0x3c>)
    38d6:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    38d8:	b91c      	cbnz	r4, 38e2 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    38da:	632e      	str	r6, [r5, #48]	; 0x30
    38dc:	bd70      	pop	{r4, r5, r6, pc}
    38de:	2000      	movs	r0, #0
    38e0:	e7f5      	b.n	38ce <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    38e2:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    38e4:	1c32      	adds	r2, r6, #0
    38e6:	bf18      	it	ne
    38e8:	2201      	movne	r2, #1
    38ea:	2103      	movs	r1, #3
    38ec:	1d28      	adds	r0, r5, #4
    38ee:	4b03      	ldr	r3, [pc, #12]	; (38fc <spi_m_async_register_callback+0x40>)
    38f0:	4798      	blx	r3
    38f2:	bd70      	pop	{r4, r5, r6, pc}
    38f4:	0000ad28 	.word	0x0000ad28
    38f8:	00004519 	.word	0x00004519
    38fc:	0000627d 	.word	0x0000627d

00003900 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    3900:	b538      	push	{r3, r4, r5, lr}
    3902:	460d      	mov	r5, r1
	ASSERT(spi && io);
    3904:	4604      	mov	r4, r0
    3906:	b158      	cbz	r0, 3920 <spi_m_async_get_io_descriptor+0x20>
    3908:	1c08      	adds	r0, r1, #0
    390a:	bf18      	it	ne
    390c:	2001      	movne	r0, #1
    390e:	f240 126f 	movw	r2, #367	; 0x16f
    3912:	4904      	ldr	r1, [pc, #16]	; (3924 <spi_m_async_get_io_descriptor+0x24>)
    3914:	4b04      	ldr	r3, [pc, #16]	; (3928 <spi_m_async_get_io_descriptor+0x28>)
    3916:	4798      	blx	r3
	*io = &spi->io;
    3918:	3424      	adds	r4, #36	; 0x24
    391a:	602c      	str	r4, [r5, #0]
	return 0;
}
    391c:	2000      	movs	r0, #0
    391e:	bd38      	pop	{r3, r4, r5, pc}
    3920:	2000      	movs	r0, #0
    3922:	e7f4      	b.n	390e <spi_m_async_get_io_descriptor+0xe>
    3924:	0000ad28 	.word	0x0000ad28
    3928:	00004519 	.word	0x00004519

0000392c <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    392c:	b570      	push	{r4, r5, r6, lr}
    392e:	460d      	mov	r5, r1
    3930:	4616      	mov	r6, r2
	ASSERT(io);
    3932:	4604      	mov	r4, r0
    3934:	2298      	movs	r2, #152	; 0x98
    3936:	4907      	ldr	r1, [pc, #28]	; (3954 <_spi_m_dma_io_write+0x28>)
    3938:	3000      	adds	r0, #0
    393a:	bf18      	it	ne
    393c:	2001      	movne	r0, #1
    393e:	4b06      	ldr	r3, [pc, #24]	; (3958 <_spi_m_dma_io_write+0x2c>)
    3940:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    3942:	4633      	mov	r3, r6
    3944:	2200      	movs	r2, #0
    3946:	4629      	mov	r1, r5
    3948:	f1a4 001c 	sub.w	r0, r4, #28
    394c:	4c03      	ldr	r4, [pc, #12]	; (395c <_spi_m_dma_io_write+0x30>)
    394e:	47a0      	blx	r4
}
    3950:	bd70      	pop	{r4, r5, r6, pc}
    3952:	bf00      	nop
    3954:	0000ad48 	.word	0x0000ad48
    3958:	00004519 	.word	0x00004519
    395c:	000064d1 	.word	0x000064d1

00003960 <_spi_m_dma_io_read>:
{
    3960:	b570      	push	{r4, r5, r6, lr}
    3962:	460d      	mov	r5, r1
    3964:	4616      	mov	r6, r2
	ASSERT(io);
    3966:	4604      	mov	r4, r0
    3968:	2281      	movs	r2, #129	; 0x81
    396a:	4907      	ldr	r1, [pc, #28]	; (3988 <_spi_m_dma_io_read+0x28>)
    396c:	3000      	adds	r0, #0
    396e:	bf18      	it	ne
    3970:	2001      	movne	r0, #1
    3972:	4b06      	ldr	r3, [pc, #24]	; (398c <_spi_m_dma_io_read+0x2c>)
    3974:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    3976:	4633      	mov	r3, r6
    3978:	462a      	mov	r2, r5
    397a:	2100      	movs	r1, #0
    397c:	f1a4 001c 	sub.w	r0, r4, #28
    3980:	4c03      	ldr	r4, [pc, #12]	; (3990 <_spi_m_dma_io_read+0x30>)
    3982:	47a0      	blx	r4
}
    3984:	bd70      	pop	{r4, r5, r6, pc}
    3986:	bf00      	nop
    3988:	0000ad48 	.word	0x0000ad48
    398c:	00004519 	.word	0x00004519
    3990:	000064d1 	.word	0x000064d1

00003994 <spi_m_dma_init>:
{
    3994:	b538      	push	{r3, r4, r5, lr}
    3996:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    3998:	4605      	mov	r5, r0
    399a:	b1a0      	cbz	r0, 39c6 <spi_m_dma_init+0x32>
    399c:	1c08      	adds	r0, r1, #0
    399e:	bf18      	it	ne
    39a0:	2001      	movne	r0, #1
    39a2:	223b      	movs	r2, #59	; 0x3b
    39a4:	4909      	ldr	r1, [pc, #36]	; (39cc <spi_m_dma_init+0x38>)
    39a6:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <spi_m_dma_init+0x3c>)
    39a8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    39aa:	4628      	mov	r0, r5
    39ac:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    39b0:	4621      	mov	r1, r4
    39b2:	4b08      	ldr	r3, [pc, #32]	; (39d4 <spi_m_dma_init+0x40>)
    39b4:	4798      	blx	r3
	if (rc) {
    39b6:	4603      	mov	r3, r0
    39b8:	b918      	cbnz	r0, 39c2 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    39ba:	4a07      	ldr	r2, [pc, #28]	; (39d8 <spi_m_dma_init+0x44>)
    39bc:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    39be:	4a07      	ldr	r2, [pc, #28]	; (39dc <spi_m_dma_init+0x48>)
    39c0:	622a      	str	r2, [r5, #32]
}
    39c2:	4618      	mov	r0, r3
    39c4:	bd38      	pop	{r3, r4, r5, pc}
    39c6:	2000      	movs	r0, #0
    39c8:	e7eb      	b.n	39a2 <spi_m_dma_init+0xe>
    39ca:	bf00      	nop
    39cc:	0000ad48 	.word	0x0000ad48
    39d0:	00004519 	.word	0x00004519
    39d4:	000062b5 	.word	0x000062b5
    39d8:	00003961 	.word	0x00003961
    39dc:	0000392d 	.word	0x0000392d

000039e0 <spi_m_dma_enable>:
{
    39e0:	b510      	push	{r4, lr}
	ASSERT(spi);
    39e2:	4604      	mov	r4, r0
    39e4:	2251      	movs	r2, #81	; 0x51
    39e6:	4905      	ldr	r1, [pc, #20]	; (39fc <spi_m_dma_enable+0x1c>)
    39e8:	3000      	adds	r0, #0
    39ea:	bf18      	it	ne
    39ec:	2001      	movne	r0, #1
    39ee:	4b04      	ldr	r3, [pc, #16]	; (3a00 <spi_m_dma_enable+0x20>)
    39f0:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    39f2:	1d20      	adds	r0, r4, #4
    39f4:	4b03      	ldr	r3, [pc, #12]	; (3a04 <spi_m_dma_enable+0x24>)
    39f6:	4798      	blx	r3
    39f8:	bd10      	pop	{r4, pc}
    39fa:	bf00      	nop
    39fc:	0000ad48 	.word	0x0000ad48
    3a00:	00004519 	.word	0x00004519
    3a04:	00006431 	.word	0x00006431

00003a08 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    3a08:	b570      	push	{r4, r5, r6, lr}
    3a0a:	460d      	mov	r5, r1
    3a0c:	4616      	mov	r6, r2
	ASSERT(spi);
    3a0e:	4604      	mov	r4, r0
    3a10:	22a8      	movs	r2, #168	; 0xa8
    3a12:	4906      	ldr	r1, [pc, #24]	; (3a2c <spi_m_dma_register_callback+0x24>)
    3a14:	3000      	adds	r0, #0
    3a16:	bf18      	it	ne
    3a18:	2001      	movne	r0, #1
    3a1a:	4b05      	ldr	r3, [pc, #20]	; (3a30 <spi_m_dma_register_callback+0x28>)
    3a1c:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    3a1e:	4632      	mov	r2, r6
    3a20:	4629      	mov	r1, r5
    3a22:	1d20      	adds	r0, r4, #4
    3a24:	4b03      	ldr	r3, [pc, #12]	; (3a34 <spi_m_dma_register_callback+0x2c>)
    3a26:	4798      	blx	r3
    3a28:	bd70      	pop	{r4, r5, r6, pc}
    3a2a:	bf00      	nop
    3a2c:	0000ad48 	.word	0x0000ad48
    3a30:	00004519 	.word	0x00004519
    3a34:	00006461 	.word	0x00006461

00003a38 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    3a38:	b538      	push	{r3, r4, r5, lr}
    3a3a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    3a3c:	4604      	mov	r4, r0
    3a3e:	b150      	cbz	r0, 3a56 <spi_m_dma_get_io_descriptor+0x1e>
    3a40:	1c08      	adds	r0, r1, #0
    3a42:	bf18      	it	ne
    3a44:	2001      	movne	r0, #1
    3a46:	22ae      	movs	r2, #174	; 0xae
    3a48:	4904      	ldr	r1, [pc, #16]	; (3a5c <spi_m_dma_get_io_descriptor+0x24>)
    3a4a:	4b05      	ldr	r3, [pc, #20]	; (3a60 <spi_m_dma_get_io_descriptor+0x28>)
    3a4c:	4798      	blx	r3
	*io = &spi->io;
    3a4e:	3420      	adds	r4, #32
    3a50:	602c      	str	r4, [r5, #0]

	return 0;
}
    3a52:	2000      	movs	r0, #0
    3a54:	bd38      	pop	{r3, r4, r5, pc}
    3a56:	2000      	movs	r0, #0
    3a58:	e7f5      	b.n	3a46 <spi_m_dma_get_io_descriptor+0xe>
    3a5a:	bf00      	nop
    3a5c:	0000ad48 	.word	0x0000ad48
    3a60:	00004519 	.word	0x00004519

00003a64 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a66:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    3a68:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    3a6a:	b12f      	cbz	r7, 3a78 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    3a6c:	688d      	ldr	r5, [r1, #8]
    3a6e:	463c      	mov	r4, r7
    3a70:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3a72:	f1c2 0e01 	rsb	lr, r2, #1
    3a76:	e00b      	b.n	3a90 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    3a78:	4b0e      	ldr	r3, [pc, #56]	; (3ab4 <timer_add_timer_task+0x50>)
    3a7a:	4798      	blx	r3
		return;
    3a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3a7e:	4473      	add	r3, lr
    3a80:	68a0      	ldr	r0, [r4, #8]
    3a82:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    3a84:	42ab      	cmp	r3, r5
    3a86:	d20a      	bcs.n	3a9e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    3a88:	6823      	ldr	r3, [r4, #0]
    3a8a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3a8c:	b153      	cbz	r3, 3aa4 <timer_add_timer_task+0x40>
    3a8e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    3a90:	6863      	ldr	r3, [r4, #4]
    3a92:	4293      	cmp	r3, r2
    3a94:	d8f3      	bhi.n	3a7e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    3a96:	68a0      	ldr	r0, [r4, #8]
    3a98:	4403      	add	r3, r0
    3a9a:	1a9b      	subs	r3, r3, r2
    3a9c:	e7f2      	b.n	3a84 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    3a9e:	42a7      	cmp	r7, r4
    3aa0:	d004      	beq.n	3aac <timer_add_timer_task+0x48>
    3aa2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    3aa4:	4620      	mov	r0, r4
    3aa6:	4b04      	ldr	r3, [pc, #16]	; (3ab8 <timer_add_timer_task+0x54>)
    3aa8:	4798      	blx	r3
    3aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    3aac:	4660      	mov	r0, ip
    3aae:	4b01      	ldr	r3, [pc, #4]	; (3ab4 <timer_add_timer_task+0x50>)
    3ab0:	4798      	blx	r3
    3ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ab4:	00004541 	.word	0x00004541
    3ab8:	0000456d 	.word	0x0000456d

00003abc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    3ac0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    3ac2:	6907      	ldr	r7, [r0, #16]
    3ac4:	3701      	adds	r7, #1
    3ac6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3ac8:	7e03      	ldrb	r3, [r0, #24]
    3aca:	f013 0f01 	tst.w	r3, #1
    3ace:	d113      	bne.n	3af8 <timer_process_counted+0x3c>
    3ad0:	7e03      	ldrb	r3, [r0, #24]
    3ad2:	f013 0f02 	tst.w	r3, #2
    3ad6:	d10f      	bne.n	3af8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    3ad8:	b354      	cbz	r4, 3b30 <timer_process_counted+0x74>
    3ada:	6863      	ldr	r3, [r4, #4]
    3adc:	1afb      	subs	r3, r7, r3
    3ade:	68a2      	ldr	r2, [r4, #8]
    3ae0:	4293      	cmp	r3, r2
    3ae2:	d307      	bcc.n	3af4 <timer_process_counted+0x38>
    3ae4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    3ae6:	f100 0814 	add.w	r8, r0, #20
    3aea:	f8df 9048 	ldr.w	r9, [pc, #72]	; 3b34 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    3aee:	f8df a048 	ldr.w	sl, [pc, #72]	; 3b38 <timer_process_counted+0x7c>
    3af2:	e012      	b.n	3b1a <timer_process_counted+0x5e>
    3af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3af8:	7e03      	ldrb	r3, [r0, #24]
    3afa:	f043 0302 	orr.w	r3, r3, #2
    3afe:	7603      	strb	r3, [r0, #24]
		return;
    3b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b04:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    3b06:	68e3      	ldr	r3, [r4, #12]
    3b08:	4620      	mov	r0, r4
    3b0a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3b0c:	b185      	cbz	r5, 3b30 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3b0e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    3b10:	686b      	ldr	r3, [r5, #4]
    3b12:	1afb      	subs	r3, r7, r3
    3b14:	68aa      	ldr	r2, [r5, #8]
    3b16:	4293      	cmp	r3, r2
    3b18:	d30a      	bcc.n	3b30 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    3b1a:	4640      	mov	r0, r8
    3b1c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3b1e:	7c23      	ldrb	r3, [r4, #16]
    3b20:	2b01      	cmp	r3, #1
    3b22:	d1ef      	bne.n	3b04 <timer_process_counted+0x48>
			tmp->time_label = time;
    3b24:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3b26:	463a      	mov	r2, r7
    3b28:	4621      	mov	r1, r4
    3b2a:	4640      	mov	r0, r8
    3b2c:	47d0      	blx	sl
    3b2e:	e7e9      	b.n	3b04 <timer_process_counted+0x48>
    3b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b34:	000045b5 	.word	0x000045b5
    3b38:	00003a65 	.word	0x00003a65

00003b3c <timer_init>:
{
    3b3c:	b570      	push	{r4, r5, r6, lr}
    3b3e:	460e      	mov	r6, r1
    3b40:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    3b42:	4604      	mov	r4, r0
    3b44:	b190      	cbz	r0, 3b6c <timer_init+0x30>
    3b46:	b199      	cbz	r1, 3b70 <timer_init+0x34>
    3b48:	1c10      	adds	r0, r2, #0
    3b4a:	bf18      	it	ne
    3b4c:	2001      	movne	r0, #1
    3b4e:	223b      	movs	r2, #59	; 0x3b
    3b50:	4908      	ldr	r1, [pc, #32]	; (3b74 <timer_init+0x38>)
    3b52:	4b09      	ldr	r3, [pc, #36]	; (3b78 <timer_init+0x3c>)
    3b54:	4798      	blx	r3
	descr->func = func;
    3b56:	4620      	mov	r0, r4
    3b58:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    3b5c:	682b      	ldr	r3, [r5, #0]
    3b5e:	4631      	mov	r1, r6
    3b60:	4798      	blx	r3
	descr->time                           = 0;
    3b62:	2000      	movs	r0, #0
    3b64:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3b66:	4b05      	ldr	r3, [pc, #20]	; (3b7c <timer_init+0x40>)
    3b68:	6063      	str	r3, [r4, #4]
}
    3b6a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    3b6c:	2000      	movs	r0, #0
    3b6e:	e7ee      	b.n	3b4e <timer_init+0x12>
    3b70:	2000      	movs	r0, #0
    3b72:	e7ec      	b.n	3b4e <timer_init+0x12>
    3b74:	0000ad64 	.word	0x0000ad64
    3b78:	00004519 	.word	0x00004519
    3b7c:	00003abd 	.word	0x00003abd

00003b80 <timer_start>:
{
    3b80:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    3b82:	4604      	mov	r4, r0
    3b84:	b198      	cbz	r0, 3bae <timer_start+0x2e>
    3b86:	6800      	ldr	r0, [r0, #0]
    3b88:	3000      	adds	r0, #0
    3b8a:	bf18      	it	ne
    3b8c:	2001      	movne	r0, #1
    3b8e:	2254      	movs	r2, #84	; 0x54
    3b90:	4909      	ldr	r1, [pc, #36]	; (3bb8 <timer_start+0x38>)
    3b92:	4b0a      	ldr	r3, [pc, #40]	; (3bbc <timer_start+0x3c>)
    3b94:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3b96:	1d25      	adds	r5, r4, #4
    3b98:	6823      	ldr	r3, [r4, #0]
    3b9a:	699b      	ldr	r3, [r3, #24]
    3b9c:	4628      	mov	r0, r5
    3b9e:	4798      	blx	r3
    3ba0:	b938      	cbnz	r0, 3bb2 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    3ba2:	6823      	ldr	r3, [r4, #0]
    3ba4:	689b      	ldr	r3, [r3, #8]
    3ba6:	4628      	mov	r0, r5
    3ba8:	4798      	blx	r3
	return ERR_NONE;
    3baa:	2000      	movs	r0, #0
    3bac:	bd38      	pop	{r3, r4, r5, pc}
    3bae:	2000      	movs	r0, #0
    3bb0:	e7ed      	b.n	3b8e <timer_start+0xe>
		return ERR_DENIED;
    3bb2:	f06f 0010 	mvn.w	r0, #16
}
    3bb6:	bd38      	pop	{r3, r4, r5, pc}
    3bb8:	0000ad64 	.word	0x0000ad64
    3bbc:	00004519 	.word	0x00004519

00003bc0 <timer_add_task>:
{
    3bc0:	b570      	push	{r4, r5, r6, lr}
    3bc2:	b082      	sub	sp, #8
    3bc4:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    3bc6:	4604      	mov	r4, r0
    3bc8:	b328      	cbz	r0, 3c16 <timer_add_task+0x56>
    3bca:	b331      	cbz	r1, 3c1a <timer_add_task+0x5a>
    3bcc:	6800      	ldr	r0, [r0, #0]
    3bce:	3000      	adds	r0, #0
    3bd0:	bf18      	it	ne
    3bd2:	2001      	movne	r0, #1
    3bd4:	227b      	movs	r2, #123	; 0x7b
    3bd6:	4920      	ldr	r1, [pc, #128]	; (3c58 <timer_add_task+0x98>)
    3bd8:	4b20      	ldr	r3, [pc, #128]	; (3c5c <timer_add_task+0x9c>)
    3bda:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3bdc:	7f23      	ldrb	r3, [r4, #28]
    3bde:	f043 0301 	orr.w	r3, r3, #1
    3be2:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    3be4:	f104 0618 	add.w	r6, r4, #24
    3be8:	4629      	mov	r1, r5
    3bea:	4630      	mov	r0, r6
    3bec:	4b1c      	ldr	r3, [pc, #112]	; (3c60 <timer_add_task+0xa0>)
    3bee:	4798      	blx	r3
    3bf0:	b9a8      	cbnz	r0, 3c1e <timer_add_task+0x5e>
	task->time_label = descr->time;
    3bf2:	6963      	ldr	r3, [r4, #20]
    3bf4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3bf6:	6962      	ldr	r2, [r4, #20]
    3bf8:	4629      	mov	r1, r5
    3bfa:	4630      	mov	r0, r6
    3bfc:	4b19      	ldr	r3, [pc, #100]	; (3c64 <timer_add_task+0xa4>)
    3bfe:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3c00:	7f23      	ldrb	r3, [r4, #28]
    3c02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3c06:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3c08:	7f23      	ldrb	r3, [r4, #28]
    3c0a:	f013 0f02 	tst.w	r3, #2
    3c0e:	d112      	bne.n	3c36 <timer_add_task+0x76>
	return ERR_NONE;
    3c10:	2000      	movs	r0, #0
}
    3c12:	b002      	add	sp, #8
    3c14:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    3c16:	2000      	movs	r0, #0
    3c18:	e7dc      	b.n	3bd4 <timer_add_task+0x14>
    3c1a:	2000      	movs	r0, #0
    3c1c:	e7da      	b.n	3bd4 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3c1e:	7f23      	ldrb	r3, [r4, #28]
    3c20:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3c24:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    3c26:	2280      	movs	r2, #128	; 0x80
    3c28:	490b      	ldr	r1, [pc, #44]	; (3c58 <timer_add_task+0x98>)
    3c2a:	2000      	movs	r0, #0
    3c2c:	4b0b      	ldr	r3, [pc, #44]	; (3c5c <timer_add_task+0x9c>)
    3c2e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3c30:	f06f 0011 	mvn.w	r0, #17
    3c34:	e7ed      	b.n	3c12 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    3c36:	a801      	add	r0, sp, #4
    3c38:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <timer_add_task+0xa8>)
    3c3a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3c3c:	7f23      	ldrb	r3, [r4, #28]
    3c3e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3c42:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    3c44:	6823      	ldr	r3, [r4, #0]
    3c46:	69db      	ldr	r3, [r3, #28]
    3c48:	1d20      	adds	r0, r4, #4
    3c4a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3c4c:	a801      	add	r0, sp, #4
    3c4e:	4b07      	ldr	r3, [pc, #28]	; (3c6c <timer_add_task+0xac>)
    3c50:	4798      	blx	r3
	return ERR_NONE;
    3c52:	2000      	movs	r0, #0
    3c54:	e7dd      	b.n	3c12 <timer_add_task+0x52>
    3c56:	bf00      	nop
    3c58:	0000ad64 	.word	0x0000ad64
    3c5c:	00004519 	.word	0x00004519
    3c60:	0000451f 	.word	0x0000451f
    3c64:	00003a65 	.word	0x00003a65
    3c68:	00003371 	.word	0x00003371
    3c6c:	0000337f 	.word	0x0000337f

00003c70 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    3c70:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    3c72:	2300      	movs	r3, #0
    3c74:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    3c76:	69c3      	ldr	r3, [r0, #28]
    3c78:	b11b      	cbz	r3, 3c82 <usart_transmission_complete+0x12>
    3c7a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    3c7e:	4610      	mov	r0, r2
    3c80:	4798      	blx	r3
    3c82:	bd08      	pop	{r3, pc}

00003c84 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    3c84:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    3c86:	2300      	movs	r3, #0
    3c88:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    3c8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3c8c:	b11b      	cbz	r3, 3c96 <usart_error+0x12>
    3c8e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    3c92:	4610      	mov	r0, r2
    3c94:	4798      	blx	r3
    3c96:	bd08      	pop	{r3, pc}

00003c98 <usart_fill_rx_buffer>:
{
    3c98:	b538      	push	{r3, r4, r5, lr}
    3c9a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    3c9c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    3ca0:	302c      	adds	r0, #44	; 0x2c
    3ca2:	4b03      	ldr	r3, [pc, #12]	; (3cb0 <usart_fill_rx_buffer+0x18>)
    3ca4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    3ca6:	6a23      	ldr	r3, [r4, #32]
    3ca8:	b10b      	cbz	r3, 3cae <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    3caa:	4628      	mov	r0, r5
    3cac:	4798      	blx	r3
    3cae:	bd38      	pop	{r3, r4, r5, pc}
    3cb0:	00004655 	.word	0x00004655

00003cb4 <usart_async_write>:
{
    3cb4:	b570      	push	{r4, r5, r6, lr}
    3cb6:	460e      	mov	r6, r1
    3cb8:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    3cba:	4604      	mov	r4, r0
    3cbc:	b1e0      	cbz	r0, 3cf8 <usart_async_write+0x44>
    3cbe:	b1e9      	cbz	r1, 3cfc <usart_async_write+0x48>
    3cc0:	1c10      	adds	r0, r2, #0
    3cc2:	bf18      	it	ne
    3cc4:	2001      	movne	r0, #1
    3cc6:	f240 123b 	movw	r2, #315	; 0x13b
    3cca:	490f      	ldr	r1, [pc, #60]	; (3d08 <usart_async_write+0x54>)
    3ccc:	4b0f      	ldr	r3, [pc, #60]	; (3d0c <usart_async_write+0x58>)
    3cce:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    3cd0:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    3cd4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    3cd8:	429a      	cmp	r2, r3
    3cda:	d111      	bne.n	3d00 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    3cdc:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    3cde:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    3ce2:	2300      	movs	r3, #0
    3ce4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    3ce8:	2301      	movs	r3, #1
    3cea:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    3cec:	f104 0008 	add.w	r0, r4, #8
    3cf0:	4b07      	ldr	r3, [pc, #28]	; (3d10 <usart_async_write+0x5c>)
    3cf2:	4798      	blx	r3
	return (int32_t)length;
    3cf4:	4628      	mov	r0, r5
    3cf6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    3cf8:	2000      	movs	r0, #0
    3cfa:	e7e4      	b.n	3cc6 <usart_async_write+0x12>
    3cfc:	2000      	movs	r0, #0
    3cfe:	e7e2      	b.n	3cc6 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    3d00:	f06f 001b 	mvn.w	r0, #27
}
    3d04:	bd70      	pop	{r4, r5, r6, pc}
    3d06:	bf00      	nop
    3d08:	0000ad7c 	.word	0x0000ad7c
    3d0c:	00004519 	.word	0x00004519
    3d10:	00005a67 	.word	0x00005a67

00003d14 <usart_process_byte_sent>:
{
    3d14:	b510      	push	{r4, lr}
    3d16:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    3d18:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    3d1a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    3d1e:	429a      	cmp	r2, r3
    3d20:	d009      	beq.n	3d36 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    3d22:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3d24:	1c59      	adds	r1, r3, #1
    3d26:	8781      	strh	r1, [r0, #60]	; 0x3c
    3d28:	5cd1      	ldrb	r1, [r2, r3]
    3d2a:	4b04      	ldr	r3, [pc, #16]	; (3d3c <usart_process_byte_sent+0x28>)
    3d2c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    3d2e:	4620      	mov	r0, r4
    3d30:	4b03      	ldr	r3, [pc, #12]	; (3d40 <usart_process_byte_sent+0x2c>)
    3d32:	4798      	blx	r3
    3d34:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    3d36:	4b03      	ldr	r3, [pc, #12]	; (3d44 <usart_process_byte_sent+0x30>)
    3d38:	4798      	blx	r3
    3d3a:	bd10      	pop	{r4, pc}
    3d3c:	00005a61 	.word	0x00005a61
    3d40:	00005a67 	.word	0x00005a67
    3d44:	00005a6f 	.word	0x00005a6f

00003d48 <usart_async_read>:
{
    3d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d4c:	b082      	sub	sp, #8
    3d4e:	460f      	mov	r7, r1
    3d50:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    3d52:	4606      	mov	r6, r0
    3d54:	b1a0      	cbz	r0, 3d80 <usart_async_read+0x38>
    3d56:	b199      	cbz	r1, 3d80 <usart_async_read+0x38>
    3d58:	2a00      	cmp	r2, #0
    3d5a:	d12d      	bne.n	3db8 <usart_async_read+0x70>
    3d5c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    3d60:	4929      	ldr	r1, [pc, #164]	; (3e08 <usart_async_read+0xc0>)
    3d62:	2000      	movs	r0, #0
    3d64:	4b29      	ldr	r3, [pc, #164]	; (3e0c <usart_async_read+0xc4>)
    3d66:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    3d68:	a801      	add	r0, sp, #4
    3d6a:	4b29      	ldr	r3, [pc, #164]	; (3e10 <usart_async_read+0xc8>)
    3d6c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    3d6e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    3d72:	4b28      	ldr	r3, [pc, #160]	; (3e14 <usart_async_read+0xcc>)
    3d74:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    3d76:	a801      	add	r0, sp, #4
    3d78:	4b27      	ldr	r3, [pc, #156]	; (3e18 <usart_async_read+0xd0>)
    3d7a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    3d7c:	2500      	movs	r5, #0
	return (int32_t)was_read;
    3d7e:	e03e      	b.n	3dfe <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    3d80:	f44f 72ac 	mov.w	r2, #344	; 0x158
    3d84:	4920      	ldr	r1, [pc, #128]	; (3e08 <usart_async_read+0xc0>)
    3d86:	2000      	movs	r0, #0
    3d88:	4b20      	ldr	r3, [pc, #128]	; (3e0c <usart_async_read+0xc4>)
    3d8a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    3d8c:	a801      	add	r0, sp, #4
    3d8e:	4b20      	ldr	r3, [pc, #128]	; (3e10 <usart_async_read+0xc8>)
    3d90:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    3d92:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    3d96:	4650      	mov	r0, sl
    3d98:	4b1e      	ldr	r3, [pc, #120]	; (3e14 <usart_async_read+0xcc>)
    3d9a:	4798      	blx	r3
    3d9c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    3d9e:	a801      	add	r0, sp, #4
    3da0:	4b1d      	ldr	r3, [pc, #116]	; (3e18 <usart_async_read+0xd0>)
    3da2:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    3da4:	f1b9 0f00 	cmp.w	r9, #0
    3da8:	d004      	beq.n	3db4 <usart_async_read+0x6c>
    3daa:	f1b8 0f00 	cmp.w	r8, #0
    3dae:	d119      	bne.n	3de4 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    3db0:	2500      	movs	r5, #0
    3db2:	e024      	b.n	3dfe <usart_async_read+0xb6>
    3db4:	2500      	movs	r5, #0
    3db6:	e022      	b.n	3dfe <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    3db8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    3dbc:	4912      	ldr	r1, [pc, #72]	; (3e08 <usart_async_read+0xc0>)
    3dbe:	2001      	movs	r0, #1
    3dc0:	4b12      	ldr	r3, [pc, #72]	; (3e0c <usart_async_read+0xc4>)
    3dc2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    3dc4:	a801      	add	r0, sp, #4
    3dc6:	4b12      	ldr	r3, [pc, #72]	; (3e10 <usart_async_read+0xc8>)
    3dc8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    3dca:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    3dce:	4650      	mov	r0, sl
    3dd0:	4b10      	ldr	r3, [pc, #64]	; (3e14 <usart_async_read+0xcc>)
    3dd2:	4798      	blx	r3
    3dd4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    3dd6:	a801      	add	r0, sp, #4
    3dd8:	4b0f      	ldr	r3, [pc, #60]	; (3e18 <usart_async_read+0xd0>)
    3dda:	4798      	blx	r3
	uint16_t                       was_read = 0;
    3ddc:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    3dde:	f1b9 0f00 	cmp.w	r9, #0
    3de2:	d00c      	beq.n	3dfe <usart_async_read+0xb6>
{
    3de4:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    3de6:	4e0d      	ldr	r6, [pc, #52]	; (3e1c <usart_async_read+0xd4>)
    3de8:	1c60      	adds	r0, r4, #1
    3dea:	b285      	uxth	r5, r0
    3dec:	1939      	adds	r1, r7, r4
    3dee:	4650      	mov	r0, sl
    3df0:	47b0      	blx	r6
    3df2:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    3df4:	454c      	cmp	r4, r9
    3df6:	d202      	bcs.n	3dfe <usart_async_read+0xb6>
    3df8:	b2a3      	uxth	r3, r4
    3dfa:	4598      	cmp	r8, r3
    3dfc:	d8f4      	bhi.n	3de8 <usart_async_read+0xa0>
}
    3dfe:	4628      	mov	r0, r5
    3e00:	b002      	add	sp, #8
    3e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e06:	bf00      	nop
    3e08:	0000ad7c 	.word	0x0000ad7c
    3e0c:	00004519 	.word	0x00004519
    3e10:	00003371 	.word	0x00003371
    3e14:	00004695 	.word	0x00004695
    3e18:	0000337f 	.word	0x0000337f
    3e1c:	00004611 	.word	0x00004611

00003e20 <usart_async_init>:
{
    3e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e22:	460d      	mov	r5, r1
    3e24:	4616      	mov	r6, r2
    3e26:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    3e28:	4604      	mov	r4, r0
    3e2a:	b320      	cbz	r0, 3e76 <usart_async_init+0x56>
    3e2c:	b329      	cbz	r1, 3e7a <usart_async_init+0x5a>
    3e2e:	b332      	cbz	r2, 3e7e <usart_async_init+0x5e>
    3e30:	1c18      	adds	r0, r3, #0
    3e32:	bf18      	it	ne
    3e34:	2001      	movne	r0, #1
    3e36:	223a      	movs	r2, #58	; 0x3a
    3e38:	4913      	ldr	r1, [pc, #76]	; (3e88 <usart_async_init+0x68>)
    3e3a:	4b14      	ldr	r3, [pc, #80]	; (3e8c <usart_async_init+0x6c>)
    3e3c:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    3e3e:	463a      	mov	r2, r7
    3e40:	4631      	mov	r1, r6
    3e42:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3e46:	4b12      	ldr	r3, [pc, #72]	; (3e90 <usart_async_init+0x70>)
    3e48:	4798      	blx	r3
    3e4a:	b9d0      	cbnz	r0, 3e82 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    3e4c:	4629      	mov	r1, r5
    3e4e:	f104 0008 	add.w	r0, r4, #8
    3e52:	4b10      	ldr	r3, [pc, #64]	; (3e94 <usart_async_init+0x74>)
    3e54:	4798      	blx	r3
	if (init_status) {
    3e56:	4603      	mov	r3, r0
    3e58:	b958      	cbnz	r0, 3e72 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    3e5a:	4a0f      	ldr	r2, [pc, #60]	; (3e98 <usart_async_init+0x78>)
    3e5c:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    3e5e:	4a0f      	ldr	r2, [pc, #60]	; (3e9c <usart_async_init+0x7c>)
    3e60:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    3e62:	4a0f      	ldr	r2, [pc, #60]	; (3ea0 <usart_async_init+0x80>)
    3e64:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    3e66:	4a0f      	ldr	r2, [pc, #60]	; (3ea4 <usart_async_init+0x84>)
    3e68:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    3e6a:	4a0f      	ldr	r2, [pc, #60]	; (3ea8 <usart_async_init+0x88>)
    3e6c:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    3e6e:	4a0f      	ldr	r2, [pc, #60]	; (3eac <usart_async_init+0x8c>)
    3e70:	6162      	str	r2, [r4, #20]
}
    3e72:	4618      	mov	r0, r3
    3e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    3e76:	2000      	movs	r0, #0
    3e78:	e7dd      	b.n	3e36 <usart_async_init+0x16>
    3e7a:	2000      	movs	r0, #0
    3e7c:	e7db      	b.n	3e36 <usart_async_init+0x16>
    3e7e:	2000      	movs	r0, #0
    3e80:	e7d9      	b.n	3e36 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    3e82:	f06f 030c 	mvn.w	r3, #12
    3e86:	e7f4      	b.n	3e72 <usart_async_init+0x52>
    3e88:	0000ad7c 	.word	0x0000ad7c
    3e8c:	00004519 	.word	0x00004519
    3e90:	000045c1 	.word	0x000045c1
    3e94:	000059d1 	.word	0x000059d1
    3e98:	00003d49 	.word	0x00003d49
    3e9c:	00003cb5 	.word	0x00003cb5
    3ea0:	00003d15 	.word	0x00003d15
    3ea4:	00003c99 	.word	0x00003c99
    3ea8:	00003c71 	.word	0x00003c71
    3eac:	00003c85 	.word	0x00003c85

00003eb0 <usart_async_enable>:
{
    3eb0:	b510      	push	{r4, lr}
	ASSERT(descr);
    3eb2:	4604      	mov	r4, r0
    3eb4:	2261      	movs	r2, #97	; 0x61
    3eb6:	4906      	ldr	r1, [pc, #24]	; (3ed0 <usart_async_enable+0x20>)
    3eb8:	3000      	adds	r0, #0
    3eba:	bf18      	it	ne
    3ebc:	2001      	movne	r0, #1
    3ebe:	4b05      	ldr	r3, [pc, #20]	; (3ed4 <usart_async_enable+0x24>)
    3ec0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    3ec2:	f104 0008 	add.w	r0, r4, #8
    3ec6:	4b04      	ldr	r3, [pc, #16]	; (3ed8 <usart_async_enable+0x28>)
    3ec8:	4798      	blx	r3
}
    3eca:	2000      	movs	r0, #0
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	bf00      	nop
    3ed0:	0000ad7c 	.word	0x0000ad7c
    3ed4:	00004519 	.word	0x00004519
    3ed8:	00005a4d 	.word	0x00005a4d

00003edc <usart_async_get_io_descriptor>:
{
    3edc:	b538      	push	{r3, r4, r5, lr}
    3ede:	460c      	mov	r4, r1
	ASSERT(descr && io);
    3ee0:	4605      	mov	r5, r0
    3ee2:	b148      	cbz	r0, 3ef8 <usart_async_get_io_descriptor+0x1c>
    3ee4:	1c08      	adds	r0, r1, #0
    3ee6:	bf18      	it	ne
    3ee8:	2001      	movne	r0, #1
    3eea:	2277      	movs	r2, #119	; 0x77
    3eec:	4903      	ldr	r1, [pc, #12]	; (3efc <usart_async_get_io_descriptor+0x20>)
    3eee:	4b04      	ldr	r3, [pc, #16]	; (3f00 <usart_async_get_io_descriptor+0x24>)
    3ef0:	4798      	blx	r3
	*io = &descr->io;
    3ef2:	6025      	str	r5, [r4, #0]
}
    3ef4:	2000      	movs	r0, #0
    3ef6:	bd38      	pop	{r3, r4, r5, pc}
    3ef8:	2000      	movs	r0, #0
    3efa:	e7f6      	b.n	3eea <usart_async_get_io_descriptor+0xe>
    3efc:	0000ad7c 	.word	0x0000ad7c
    3f00:	00004519 	.word	0x00004519

00003f04 <usart_async_register_callback>:
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	460c      	mov	r4, r1
    3f08:	4616      	mov	r6, r2
	ASSERT(descr);
    3f0a:	4605      	mov	r5, r0
    3f0c:	2283      	movs	r2, #131	; 0x83
    3f0e:	4917      	ldr	r1, [pc, #92]	; (3f6c <usart_async_register_callback+0x68>)
    3f10:	3000      	adds	r0, #0
    3f12:	bf18      	it	ne
    3f14:	2001      	movne	r0, #1
    3f16:	4b16      	ldr	r3, [pc, #88]	; (3f70 <usart_async_register_callback+0x6c>)
    3f18:	4798      	blx	r3
	switch (type) {
    3f1a:	2c01      	cmp	r4, #1
    3f1c:	d010      	beq.n	3f40 <usart_async_register_callback+0x3c>
    3f1e:	b124      	cbz	r4, 3f2a <usart_async_register_callback+0x26>
    3f20:	2c02      	cmp	r4, #2
    3f22:	d018      	beq.n	3f56 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    3f24:	f06f 000c 	mvn.w	r0, #12
}
    3f28:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    3f2a:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    3f2c:	1c32      	adds	r2, r6, #0
    3f2e:	bf18      	it	ne
    3f30:	2201      	movne	r2, #1
    3f32:	2101      	movs	r1, #1
    3f34:	f105 0008 	add.w	r0, r5, #8
    3f38:	4b0e      	ldr	r3, [pc, #56]	; (3f74 <usart_async_register_callback+0x70>)
    3f3a:	4798      	blx	r3
	return ERR_NONE;
    3f3c:	2000      	movs	r0, #0
		break;
    3f3e:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    3f40:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    3f42:	1c32      	adds	r2, r6, #0
    3f44:	bf18      	it	ne
    3f46:	2201      	movne	r2, #1
    3f48:	2102      	movs	r1, #2
    3f4a:	f105 0008 	add.w	r0, r5, #8
    3f4e:	4b09      	ldr	r3, [pc, #36]	; (3f74 <usart_async_register_callback+0x70>)
    3f50:	4798      	blx	r3
	return ERR_NONE;
    3f52:	2000      	movs	r0, #0
		break;
    3f54:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    3f56:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    3f58:	1c32      	adds	r2, r6, #0
    3f5a:	bf18      	it	ne
    3f5c:	2201      	movne	r2, #1
    3f5e:	2103      	movs	r1, #3
    3f60:	f105 0008 	add.w	r0, r5, #8
    3f64:	4b03      	ldr	r3, [pc, #12]	; (3f74 <usart_async_register_callback+0x70>)
    3f66:	4798      	blx	r3
	return ERR_NONE;
    3f68:	2000      	movs	r0, #0
		break;
    3f6a:	bd70      	pop	{r4, r5, r6, pc}
    3f6c:	0000ad7c 	.word	0x0000ad7c
    3f70:	00004519 	.word	0x00004519
    3f74:	00005a79 	.word	0x00005a79

00003f78 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3f78:	4b0f      	ldr	r3, [pc, #60]	; (3fb8 <_usb_d_find_ep+0x40>)
    3f7a:	7859      	ldrb	r1, [r3, #1]
    3f7c:	4288      	cmp	r0, r1
    3f7e:	d018      	beq.n	3fb2 <_usb_d_find_ep+0x3a>
{
    3f80:	b430      	push	{r4, r5}
    3f82:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3f84:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3f86:	f000 050f 	and.w	r5, r0, #15
    3f8a:	e007      	b.n	3f9c <_usb_d_find_ep+0x24>
    3f8c:	3301      	adds	r3, #1
    3f8e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3f90:	2b0d      	cmp	r3, #13
    3f92:	d009      	beq.n	3fa8 <_usb_d_find_ep+0x30>
    3f94:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3f96:	7851      	ldrb	r1, [r2, #1]
    3f98:	4281      	cmp	r1, r0
    3f9a:	d007      	beq.n	3fac <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3f9c:	7814      	ldrb	r4, [r2, #0]
    3f9e:	2c00      	cmp	r4, #0
    3fa0:	d1f4      	bne.n	3f8c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3fa2:	428d      	cmp	r5, r1
    3fa4:	d1f2      	bne.n	3f8c <_usb_d_find_ep+0x14>
    3fa6:	e001      	b.n	3fac <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    3fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
    3fac:	4618      	mov	r0, r3
    3fae:	bc30      	pop	{r4, r5}
    3fb0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3fb2:	2300      	movs	r3, #0
}
    3fb4:	4618      	mov	r0, r3
    3fb6:	4770      	bx	lr
    3fb8:	20000a54 	.word	0x20000a54

00003fbc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    3fbc:	2000      	movs	r0, #0
    3fbe:	4770      	bx	lr

00003fc0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3fc0:	b538      	push	{r3, r4, r5, lr}
    3fc2:	4604      	mov	r4, r0
    3fc4:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    3fc6:	4b09      	ldr	r3, [pc, #36]	; (3fec <usb_d_cb_trans_more+0x2c>)
    3fc8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3fca:	4b09      	ldr	r3, [pc, #36]	; (3ff0 <usb_d_cb_trans_more+0x30>)
    3fcc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    3fd0:	789b      	ldrb	r3, [r3, #2]
    3fd2:	2b03      	cmp	r3, #3
    3fd4:	d001      	beq.n	3fda <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    3fd6:	2000      	movs	r0, #0
}
    3fd8:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    3fda:	4b05      	ldr	r3, [pc, #20]	; (3ff0 <usb_d_cb_trans_more+0x30>)
    3fdc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    3fe0:	6983      	ldr	r3, [r0, #24]
    3fe2:	4629      	mov	r1, r5
    3fe4:	4620      	mov	r0, r4
    3fe6:	4798      	blx	r3
    3fe8:	bd38      	pop	{r3, r4, r5, pc}
    3fea:	bf00      	nop
    3fec:	00003f79 	.word	0x00003f79
    3ff0:	20000a54 	.word	0x20000a54

00003ff4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff6:	b085      	sub	sp, #20
    3ff8:	4606      	mov	r6, r0
    3ffa:	460d      	mov	r5, r1
    3ffc:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ffe:	4b4d      	ldr	r3, [pc, #308]	; (4134 <_usb_d_cb_trans_done+0x140>)
    4000:	4798      	blx	r3
    4002:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    4004:	2d00      	cmp	r5, #0
    4006:	d15b      	bne.n	40c0 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4008:	4a4b      	ldr	r2, [pc, #300]	; (4138 <_usb_d_cb_trans_done+0x144>)
    400a:	0143      	lsls	r3, r0, #5
    400c:	18d1      	adds	r1, r2, r3
    400e:	2000      	movs	r0, #0
    4010:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4012:	5cd3      	ldrb	r3, [r2, r3]
    4014:	b173      	cbz	r3, 4034 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4016:	4b48      	ldr	r3, [pc, #288]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4018:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    401c:	2201      	movs	r2, #1
    401e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4020:	4845      	ldr	r0, [pc, #276]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4022:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4026:	69c3      	ldr	r3, [r0, #28]
    4028:	463a      	mov	r2, r7
    402a:	78c1      	ldrb	r1, [r0, #3]
    402c:	4630      	mov	r0, r6
    402e:	4798      	blx	r3
}
    4030:	b005      	add	sp, #20
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    4034:	788b      	ldrb	r3, [r1, #2]
    4036:	2b03      	cmp	r3, #3
    4038:	d00b      	beq.n	4052 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    403a:	483f      	ldr	r0, [pc, #252]	; (4138 <_usb_d_cb_trans_done+0x144>)
    403c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    4040:	4614      	mov	r4, r2
    4042:	69d3      	ldr	r3, [r2, #28]
    4044:	320c      	adds	r2, #12
    4046:	2100      	movs	r1, #0
    4048:	7860      	ldrb	r0, [r4, #1]
    404a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    404c:	2302      	movs	r3, #2
    404e:	70a3      	strb	r3, [r4, #2]
    4050:	e7ee      	b.n	4030 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4052:	460b      	mov	r3, r1
    4054:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4058:	460a      	mov	r2, r1
    405a:	69ce      	ldr	r6, [r1, #28]
    405c:	320c      	adds	r2, #12
    405e:	2101      	movs	r1, #1
    4060:	7858      	ldrb	r0, [r3, #1]
    4062:	47b0      	blx	r6
		if (err) {
    4064:	b1a0      	cbz	r0, 4090 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4066:	4b34      	ldr	r3, [pc, #208]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4068:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    406c:	2205      	movs	r2, #5
    406e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4070:	2202      	movs	r2, #2
    4072:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4074:	2d00      	cmp	r5, #0
    4076:	db09      	blt.n	408c <_usb_d_cb_trans_done+0x98>
    4078:	482f      	ldr	r0, [pc, #188]	; (4138 <_usb_d_cb_trans_done+0x144>)
    407a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    407e:	7840      	ldrb	r0, [r0, #1]
    4080:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    4084:	2101      	movs	r1, #1
    4086:	4b2d      	ldr	r3, [pc, #180]	; (413c <_usb_d_cb_trans_done+0x148>)
    4088:	4798      	blx	r3
    408a:	e7d1      	b.n	4030 <_usb_d_cb_trans_done+0x3c>
    408c:	7858      	ldrb	r0, [r3, #1]
    408e:	e7f9      	b.n	4084 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4090:	4829      	ldr	r0, [pc, #164]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4092:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4096:	2304      	movs	r3, #4
    4098:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    409a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    409c:	2200      	movs	r2, #0
    409e:	9201      	str	r2, [sp, #4]
    40a0:	9202      	str	r2, [sp, #8]
    40a2:	4295      	cmp	r5, r2
    40a4:	bfac      	ite	ge
    40a6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    40aa:	f003 030f 	andlt.w	r3, r3, #15
    40ae:	f88d 300c 	strb.w	r3, [sp, #12]
    40b2:	2301      	movs	r3, #1
    40b4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    40b8:	a801      	add	r0, sp, #4
    40ba:	4b21      	ldr	r3, [pc, #132]	; (4140 <_usb_d_cb_trans_done+0x14c>)
    40bc:	4798      	blx	r3
    40be:	e7b7      	b.n	4030 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    40c0:	2d01      	cmp	r5, #1
    40c2:	d00a      	beq.n	40da <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    40c4:	2d02      	cmp	r5, #2
    40c6:	d01c      	beq.n	4102 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    40c8:	2d03      	cmp	r5, #3
    40ca:	d02a      	beq.n	4122 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    40cc:	4b1a      	ldr	r3, [pc, #104]	; (4138 <_usb_d_cb_trans_done+0x144>)
    40ce:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    40d2:	2206      	movs	r2, #6
    40d4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    40d6:	70da      	strb	r2, [r3, #3]
    40d8:	e7a2      	b.n	4020 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    40da:	4a17      	ldr	r2, [pc, #92]	; (4138 <_usb_d_cb_trans_done+0x144>)
    40dc:	0143      	lsls	r3, r0, #5
    40de:	18d1      	adds	r1, r2, r3
    40e0:	2002      	movs	r0, #2
    40e2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    40e4:	5cd3      	ldrb	r3, [r2, r3]
    40e6:	b12b      	cbz	r3, 40f4 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    40e8:	4b13      	ldr	r3, [pc, #76]	; (4138 <_usb_d_cb_trans_done+0x144>)
    40ea:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    40ee:	2205      	movs	r2, #5
    40f0:	709a      	strb	r2, [r3, #2]
    40f2:	e795      	b.n	4020 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    40f4:	460b      	mov	r3, r1
    40f6:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    40f8:	2100      	movs	r1, #0
    40fa:	4630      	mov	r0, r6
    40fc:	4b0f      	ldr	r3, [pc, #60]	; (413c <_usb_d_cb_trans_done+0x148>)
    40fe:	4798      	blx	r3
    4100:	e78e      	b.n	4020 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4102:	4a0d      	ldr	r2, [pc, #52]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4104:	0143      	lsls	r3, r0, #5
    4106:	18d1      	adds	r1, r2, r3
    4108:	2004      	movs	r0, #4
    410a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    410c:	5cd3      	ldrb	r3, [r2, r3]
    410e:	b12b      	cbz	r3, 411c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4110:	4b09      	ldr	r3, [pc, #36]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4112:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4116:	2201      	movs	r2, #1
    4118:	709a      	strb	r2, [r3, #2]
    411a:	e781      	b.n	4020 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    411c:	2302      	movs	r3, #2
    411e:	708b      	strb	r3, [r1, #2]
			return;
    4120:	e786      	b.n	4030 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4122:	4b05      	ldr	r3, [pc, #20]	; (4138 <_usb_d_cb_trans_done+0x144>)
    4124:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4128:	2200      	movs	r2, #0
    412a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    412c:	2205      	movs	r2, #5
    412e:	70da      	strb	r2, [r3, #3]
    4130:	e776      	b.n	4020 <_usb_d_cb_trans_done+0x2c>
    4132:	bf00      	nop
    4134:	00003f79 	.word	0x00003f79
    4138:	20000a54 	.word	0x20000a54
    413c:	000079bd 	.word	0x000079bd
    4140:	00007b65 	.word	0x00007b65

00004144 <usb_d_cb_trans_setup>:
{
    4144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4148:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    414a:	4b1c      	ldr	r3, [pc, #112]	; (41bc <usb_d_cb_trans_setup+0x78>)
    414c:	4798      	blx	r3
    414e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    4150:	4c1b      	ldr	r4, [pc, #108]	; (41c0 <usb_d_cb_trans_setup+0x7c>)
    4152:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    4156:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4158:	4621      	mov	r1, r4
    415a:	4628      	mov	r0, r5
    415c:	4b19      	ldr	r3, [pc, #100]	; (41c4 <usb_d_cb_trans_setup+0x80>)
    415e:	4798      	blx	r3
	if (n != 8) {
    4160:	b2c0      	uxtb	r0, r0
    4162:	2808      	cmp	r0, #8
    4164:	d009      	beq.n	417a <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4166:	2101      	movs	r1, #1
    4168:	4628      	mov	r0, r5
    416a:	4c17      	ldr	r4, [pc, #92]	; (41c8 <usb_d_cb_trans_setup+0x84>)
    416c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    416e:	2101      	movs	r1, #1
    4170:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    4174:	47a0      	blx	r4
		return;
    4176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    417a:	2100      	movs	r1, #0
    417c:	4628      	mov	r0, r5
    417e:	4f12      	ldr	r7, [pc, #72]	; (41c8 <usb_d_cb_trans_setup+0x84>)
    4180:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4182:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    4186:	2100      	movs	r1, #0
    4188:	4640      	mov	r0, r8
    418a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    418c:	4b0c      	ldr	r3, [pc, #48]	; (41c0 <usb_d_cb_trans_setup+0x7c>)
    418e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    4192:	2201      	movs	r2, #1
    4194:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4196:	695b      	ldr	r3, [r3, #20]
    4198:	4621      	mov	r1, r4
    419a:	4628      	mov	r0, r5
    419c:	4798      	blx	r3
    419e:	b108      	cbz	r0, 41a4 <usb_d_cb_trans_setup+0x60>
    41a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    41a4:	4b06      	ldr	r3, [pc, #24]	; (41c0 <usb_d_cb_trans_setup+0x7c>)
    41a6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    41aa:	2305      	movs	r3, #5
    41ac:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    41ae:	2101      	movs	r1, #1
    41b0:	4628      	mov	r0, r5
    41b2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    41b4:	2101      	movs	r1, #1
    41b6:	4640      	mov	r0, r8
    41b8:	47b8      	blx	r7
    41ba:	e7f1      	b.n	41a0 <usb_d_cb_trans_setup+0x5c>
    41bc:	00003f79 	.word	0x00003f79
    41c0:	20000a54 	.word	0x20000a54
    41c4:	00007b05 	.word	0x00007b05
    41c8:	000079bd 	.word	0x000079bd

000041cc <usb_d_init>:

int32_t usb_d_init(void)
{
    41cc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    41ce:	4b11      	ldr	r3, [pc, #68]	; (4214 <usb_d_init+0x48>)
    41d0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    41d2:	2800      	cmp	r0, #0
    41d4:	db1d      	blt.n	4212 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    41d6:	4c10      	ldr	r4, [pc, #64]	; (4218 <usb_d_init+0x4c>)
    41d8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    41dc:	2100      	movs	r1, #0
    41de:	4620      	mov	r0, r4
    41e0:	4b0e      	ldr	r3, [pc, #56]	; (421c <usb_d_init+0x50>)
    41e2:	4798      	blx	r3
    41e4:	4623      	mov	r3, r4
    41e6:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    41ea:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    41ec:	4a0c      	ldr	r2, [pc, #48]	; (4220 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    41ee:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    41f0:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    41f2:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    41f4:	61da      	str	r2, [r3, #28]
    41f6:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    41f8:	4283      	cmp	r3, r0
    41fa:	d1f8      	bne.n	41ee <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    41fc:	4909      	ldr	r1, [pc, #36]	; (4224 <usb_d_init+0x58>)
    41fe:	2000      	movs	r0, #0
    4200:	4c09      	ldr	r4, [pc, #36]	; (4228 <usb_d_init+0x5c>)
    4202:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4204:	4909      	ldr	r1, [pc, #36]	; (422c <usb_d_init+0x60>)
    4206:	2001      	movs	r0, #1
    4208:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    420a:	4909      	ldr	r1, [pc, #36]	; (4230 <usb_d_init+0x64>)
    420c:	2002      	movs	r0, #2
    420e:	47a0      	blx	r4
	return ERR_NONE;
    4210:	2000      	movs	r0, #0
}
    4212:	bd10      	pop	{r4, pc}
    4214:	00007395 	.word	0x00007395
    4218:	20000a54 	.word	0x20000a54
    421c:	0000a25f 	.word	0x0000a25f
    4220:	00003fbd 	.word	0x00003fbd
    4224:	00004145 	.word	0x00004145
    4228:	00007d6d 	.word	0x00007d6d
    422c:	00003fc1 	.word	0x00003fc1
    4230:	00003ff5 	.word	0x00003ff5

00004234 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4234:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4236:	4b01      	ldr	r3, [pc, #4]	; (423c <usb_d_register_callback+0x8>)
    4238:	4798      	blx	r3
    423a:	bd08      	pop	{r3, pc}
    423c:	00007d45 	.word	0x00007d45

00004240 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    4240:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    4242:	4b01      	ldr	r3, [pc, #4]	; (4248 <usb_d_enable+0x8>)
    4244:	4798      	blx	r3
}
    4246:	bd08      	pop	{r3, pc}
    4248:	0000749d 	.word	0x0000749d

0000424c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    424c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    424e:	4b01      	ldr	r3, [pc, #4]	; (4254 <usb_d_attach+0x8>)
    4250:	4798      	blx	r3
    4252:	bd08      	pop	{r3, pc}
    4254:	00007509 	.word	0x00007509

00004258 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4258:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    425a:	4b01      	ldr	r3, [pc, #4]	; (4260 <usb_d_set_address+0x8>)
    425c:	4798      	blx	r3
    425e:	bd08      	pop	{r3, pc}
    4260:	0000751b 	.word	0x0000751b

00004264 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4266:	4606      	mov	r6, r0
    4268:	460c      	mov	r4, r1
    426a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    426c:	4b0f      	ldr	r3, [pc, #60]	; (42ac <usb_d_ep_init+0x48>)
    426e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    4270:	2800      	cmp	r0, #0
    4272:	da14      	bge.n	429e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4274:	20ff      	movs	r0, #255	; 0xff
    4276:	4b0d      	ldr	r3, [pc, #52]	; (42ac <usb_d_ep_init+0x48>)
    4278:	4798      	blx	r3
		if (ep_index < 0) {
    427a:	1e05      	subs	r5, r0, #0
    427c:	db12      	blt.n	42a4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    427e:	463a      	mov	r2, r7
    4280:	4621      	mov	r1, r4
    4282:	4630      	mov	r0, r6
    4284:	4b0a      	ldr	r3, [pc, #40]	; (42b0 <usb_d_ep_init+0x4c>)
    4286:	4798      	blx	r3
	if (rc < 0) {
    4288:	2800      	cmp	r0, #0
    428a:	db0d      	blt.n	42a8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    428c:	4b09      	ldr	r3, [pc, #36]	; (42b4 <usb_d_ep_init+0x50>)
    428e:	0168      	lsls	r0, r5, #5
    4290:	181a      	adds	r2, r3, r0
    4292:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4294:	f004 0403 	and.w	r4, r4, #3
    4298:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    429a:	2000      	movs	r0, #0
    429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    429e:	f06f 0013 	mvn.w	r0, #19
    42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    42a4:	f06f 0014 	mvn.w	r0, #20
}
    42a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42aa:	bf00      	nop
    42ac:	00003f79 	.word	0x00003f79
    42b0:	00007529 	.word	0x00007529
    42b4:	20000a54 	.word	0x20000a54

000042b8 <usb_d_ep0_init>:
{
    42b8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    42ba:	4602      	mov	r2, r0
    42bc:	2100      	movs	r1, #0
    42be:	4608      	mov	r0, r1
    42c0:	4b01      	ldr	r3, [pc, #4]	; (42c8 <usb_d_ep0_init+0x10>)
    42c2:	4798      	blx	r3
}
    42c4:	bd08      	pop	{r3, pc}
    42c6:	bf00      	nop
    42c8:	00004265 	.word	0x00004265

000042cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    42cc:	b538      	push	{r3, r4, r5, lr}
    42ce:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    42d0:	4b06      	ldr	r3, [pc, #24]	; (42ec <usb_d_ep_deinit+0x20>)
    42d2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    42d4:	1e04      	subs	r4, r0, #0
    42d6:	db07      	blt.n	42e8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    42d8:	4628      	mov	r0, r5
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <usb_d_ep_deinit+0x24>)
    42dc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    42de:	4805      	ldr	r0, [pc, #20]	; (42f4 <usb_d_ep_deinit+0x28>)
    42e0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    42e4:	23ff      	movs	r3, #255	; 0xff
    42e6:	7043      	strb	r3, [r0, #1]
    42e8:	bd38      	pop	{r3, r4, r5, pc}
    42ea:	bf00      	nop
    42ec:	00003f79 	.word	0x00003f79
    42f0:	00007641 	.word	0x00007641
    42f4:	20000a54 	.word	0x20000a54

000042f8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    42f8:	b538      	push	{r3, r4, r5, lr}
    42fa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    42fc:	4b0e      	ldr	r3, [pc, #56]	; (4338 <usb_d_ep_enable+0x40>)
    42fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    4300:	1e04      	subs	r4, r0, #0
    4302:	db16      	blt.n	4332 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    4304:	0163      	lsls	r3, r4, #5
    4306:	4a0d      	ldr	r2, [pc, #52]	; (433c <usb_d_ep_enable+0x44>)
    4308:	5cd3      	ldrb	r3, [r2, r3]
    430a:	2b00      	cmp	r3, #0
    430c:	bf0c      	ite	eq
    430e:	2202      	moveq	r2, #2
    4310:	2201      	movne	r2, #1
    4312:	4b0a      	ldr	r3, [pc, #40]	; (433c <usb_d_ep_enable+0x44>)
    4314:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4318:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    431a:	4628      	mov	r0, r5
    431c:	4b08      	ldr	r3, [pc, #32]	; (4340 <usb_d_ep_enable+0x48>)
    431e:	4798      	blx	r3
	if (rc < 0) {
    4320:	2800      	cmp	r0, #0
    4322:	db00      	blt.n	4326 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    4324:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    4326:	4b05      	ldr	r3, [pc, #20]	; (433c <usb_d_ep_enable+0x44>)
    4328:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    432c:	2300      	movs	r3, #0
    432e:	70a3      	strb	r3, [r4, #2]
    4330:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    4332:	f06f 0011 	mvn.w	r0, #17
    4336:	e7f5      	b.n	4324 <usb_d_ep_enable+0x2c>
    4338:	00003f79 	.word	0x00003f79
    433c:	20000a54 	.word	0x20000a54
    4340:	00007705 	.word	0x00007705

00004344 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4348:	b086      	sub	sp, #24
    434a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    434c:	7a07      	ldrb	r7, [r0, #8]
    434e:	4638      	mov	r0, r7
    4350:	4b3f      	ldr	r3, [pc, #252]	; (4450 <usb_d_ep_transfer+0x10c>)
    4352:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    4354:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    4356:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    435a:	1e06      	subs	r6, r0, #0
    435c:	db72      	blt.n	4444 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    435e:	a804      	add	r0, sp, #16
    4360:	4b3c      	ldr	r3, [pc, #240]	; (4454 <usb_d_ep_transfer+0x110>)
    4362:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4364:	4b3c      	ldr	r3, [pc, #240]	; (4458 <usb_d_ep_transfer+0x114>)
    4366:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    436a:	789b      	ldrb	r3, [r3, #2]
    436c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    4370:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4374:	b2db      	uxtb	r3, r3
    4376:	2b01      	cmp	r3, #1
    4378:	d011      	beq.n	439e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    437a:	a804      	add	r0, sp, #16
    437c:	4b37      	ldr	r3, [pc, #220]	; (445c <usb_d_ep_transfer+0x118>)
    437e:	4798      	blx	r3
		switch (state) {
    4380:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4384:	b2db      	uxtb	r3, r3
    4386:	2b05      	cmp	r3, #5
    4388:	d05f      	beq.n	444a <usb_d_ep_transfer+0x106>
    438a:	2b06      	cmp	r3, #6
    438c:	d023      	beq.n	43d6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    438e:	2b00      	cmp	r3, #0
    4390:	bf0c      	ite	eq
    4392:	f06f 0012 	mvneq.w	r0, #18
    4396:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    4398:	b006      	add	sp, #24
    439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    439e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 4458 <usb_d_ep_transfer+0x114>
    43a2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    43a6:	eb0a 0309 	add.w	r3, sl, r9
    43aa:	2203      	movs	r2, #3
    43ac:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    43ae:	a804      	add	r0, sp, #16
    43b0:	4b2a      	ldr	r3, [pc, #168]	; (445c <usb_d_ep_transfer+0x118>)
    43b2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    43b4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    43b8:	b183      	cbz	r3, 43dc <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    43ba:	7a22      	ldrb	r2, [r4, #8]
    43bc:	3500      	adds	r5, #0
    43be:	bf18      	it	ne
    43c0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    43c2:	6823      	ldr	r3, [r4, #0]
    43c4:	9301      	str	r3, [sp, #4]
    43c6:	f8cd 8008 	str.w	r8, [sp, #8]
    43ca:	f017 0f80 	tst.w	r7, #128	; 0x80
    43ce:	d119      	bne.n	4404 <usb_d_ep_transfer+0xc0>
    43d0:	f002 030f 	and.w	r3, r2, #15
    43d4:	e018      	b.n	4408 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    43d6:	f06f 000f 	mvn.w	r0, #15
    43da:	e7dd      	b.n	4398 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    43dc:	4b1e      	ldr	r3, [pc, #120]	; (4458 <usb_d_ep_transfer+0x114>)
    43de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    43e2:	7cda      	ldrb	r2, [r3, #19]
    43e4:	7c9d      	ldrb	r5, [r3, #18]
    43e6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    43ea:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    43ec:	b9a5      	cbnz	r5, 4418 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    43ee:	4b1a      	ldr	r3, [pc, #104]	; (4458 <usb_d_ep_transfer+0x114>)
    43f0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    43f4:	2304      	movs	r3, #4
    43f6:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    43f8:	2300      	movs	r3, #0
			zlp                 = true;
    43fa:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    43fc:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    43fe:	6821      	ldr	r1, [r4, #0]
    4400:	9101      	str	r1, [sp, #4]
    4402:	9302      	str	r3, [sp, #8]
    4404:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    4408:	f88d 300c 	strb.w	r3, [sp, #12]
    440c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    4410:	a801      	add	r0, sp, #4
    4412:	4b13      	ldr	r3, [pc, #76]	; (4460 <usb_d_ep_transfer+0x11c>)
    4414:	4798      	blx	r3
	return rc;
    4416:	e7bf      	b.n	4398 <usb_d_ep_transfer+0x54>
    4418:	4643      	mov	r3, r8
    441a:	45a8      	cmp	r8, r5
    441c:	bf28      	it	cs
    441e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4420:	4a0d      	ldr	r2, [pc, #52]	; (4458 <usb_d_ep_transfer+0x114>)
    4422:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    4426:	f996 200c 	ldrsb.w	r2, [r6, #12]
    442a:	2a00      	cmp	r2, #0
    442c:	db05      	blt.n	443a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    442e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    4430:	6821      	ldr	r1, [r4, #0]
    4432:	9101      	str	r1, [sp, #4]
    4434:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4436:	2500      	movs	r5, #0
    4438:	e7ca      	b.n	43d0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    443a:	429d      	cmp	r5, r3
    443c:	bf94      	ite	ls
    443e:	2500      	movls	r5, #0
    4440:	2501      	movhi	r5, #1
    4442:	e7db      	b.n	43fc <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    4444:	f06f 0011 	mvn.w	r0, #17
    4448:	e7a6      	b.n	4398 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    444a:	2002      	movs	r0, #2
    444c:	e7a4      	b.n	4398 <usb_d_ep_transfer+0x54>
    444e:	bf00      	nop
    4450:	00003f79 	.word	0x00003f79
    4454:	00003371 	.word	0x00003371
    4458:	20000a54 	.word	0x20000a54
    445c:	0000337f 	.word	0x0000337f
    4460:	00007b65 	.word	0x00007b65

00004464 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4464:	b538      	push	{r3, r4, r5, lr}
    4466:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    4468:	b141      	cbz	r1, 447c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    446a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    446c:	bf0c      	ite	eq
    446e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4470:	2102      	movne	r1, #2
    4472:	4b13      	ldr	r3, [pc, #76]	; (44c0 <usb_d_ep_halt+0x5c>)
    4474:	4798      	blx	r3
    4476:	4603      	mov	r3, r0
	}
}
    4478:	4618      	mov	r0, r3
    447a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    447c:	4b11      	ldr	r3, [pc, #68]	; (44c4 <usb_d_ep_halt+0x60>)
    447e:	4798      	blx	r3
	if (ep_index < 0) {
    4480:	1e05      	subs	r5, r0, #0
    4482:	db19      	blt.n	44b8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4484:	2102      	movs	r1, #2
    4486:	4620      	mov	r0, r4
    4488:	4b0d      	ldr	r3, [pc, #52]	; (44c0 <usb_d_ep_halt+0x5c>)
    448a:	4798      	blx	r3
    448c:	4603      	mov	r3, r0
    448e:	2800      	cmp	r0, #0
    4490:	d0f2      	beq.n	4478 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4492:	2100      	movs	r1, #0
    4494:	4620      	mov	r0, r4
    4496:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <usb_d_ep_halt+0x5c>)
    4498:	4798      	blx	r3
		if (rc < 0) {
    449a:	1e03      	subs	r3, r0, #0
    449c:	dbec      	blt.n	4478 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    449e:	4b0a      	ldr	r3, [pc, #40]	; (44c8 <usb_d_ep_halt+0x64>)
    44a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    44a4:	2201      	movs	r2, #1
    44a6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    44a8:	2103      	movs	r1, #3
    44aa:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    44ac:	69db      	ldr	r3, [r3, #28]
    44ae:	2200      	movs	r2, #0
    44b0:	4620      	mov	r0, r4
    44b2:	4798      	blx	r3
	return ERR_NONE;
    44b4:	2300      	movs	r3, #0
    44b6:	e7df      	b.n	4478 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    44b8:	f06f 0311 	mvn.w	r3, #17
    44bc:	e7dc      	b.n	4478 <usb_d_ep_halt+0x14>
    44be:	bf00      	nop
    44c0:	000079bd 	.word	0x000079bd
    44c4:	00003f79 	.word	0x00003f79
    44c8:	20000a54 	.word	0x20000a54

000044cc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    44cc:	b538      	push	{r3, r4, r5, lr}
    44ce:	460d      	mov	r5, r1
    44d0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    44d2:	4b0e      	ldr	r3, [pc, #56]	; (450c <usb_d_ep_register_callback+0x40>)
    44d4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    44d6:	4b0e      	ldr	r3, [pc, #56]	; (4510 <usb_d_ep_register_callback+0x44>)
    44d8:	2c00      	cmp	r4, #0
    44da:	bf08      	it	eq
    44dc:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    44de:	2800      	cmp	r0, #0
    44e0:	db13      	blt.n	450a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    44e2:	2d01      	cmp	r5, #1
    44e4:	d008      	beq.n	44f8 <usb_d_ep_register_callback+0x2c>
    44e6:	b115      	cbz	r5, 44ee <usb_d_ep_register_callback+0x22>
    44e8:	2d02      	cmp	r5, #2
    44ea:	d00a      	beq.n	4502 <usb_d_ep_register_callback+0x36>
    44ec:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <usb_d_ep_register_callback+0x48>)
    44f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    44f4:	6144      	str	r4, [r0, #20]
		break;
    44f6:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    44f8:	4b06      	ldr	r3, [pc, #24]	; (4514 <usb_d_ep_register_callback+0x48>)
    44fa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    44fe:	6184      	str	r4, [r0, #24]
		break;
    4500:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4502:	4b04      	ldr	r3, [pc, #16]	; (4514 <usb_d_ep_register_callback+0x48>)
    4504:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    4508:	61c4      	str	r4, [r0, #28]
    450a:	bd38      	pop	{r3, r4, r5, pc}
    450c:	00003f79 	.word	0x00003f79
    4510:	00003fbd 	.word	0x00003fbd
    4514:	20000a54 	.word	0x20000a54

00004518 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    4518:	b900      	cbnz	r0, 451c <assert+0x4>
		__asm("BKPT #0");
    451a:	be00      	bkpt	0x0000
    451c:	4770      	bx	lr

0000451e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    451e:	6803      	ldr	r3, [r0, #0]
    4520:	b14b      	cbz	r3, 4536 <is_list_element+0x18>
		if (it == element) {
    4522:	428b      	cmp	r3, r1
    4524:	d009      	beq.n	453a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	b11b      	cbz	r3, 4532 <is_list_element+0x14>
		if (it == element) {
    452a:	4299      	cmp	r1, r3
    452c:	d1fb      	bne.n	4526 <is_list_element+0x8>
			return true;
    452e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    4530:	4770      	bx	lr
	return false;
    4532:	2000      	movs	r0, #0
    4534:	4770      	bx	lr
    4536:	2000      	movs	r0, #0
    4538:	4770      	bx	lr
			return true;
    453a:	2001      	movs	r0, #1
    453c:	4770      	bx	lr
	...

00004540 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4540:	b538      	push	{r3, r4, r5, lr}
    4542:	4604      	mov	r4, r0
    4544:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    4546:	4b06      	ldr	r3, [pc, #24]	; (4560 <list_insert_as_head+0x20>)
    4548:	4798      	blx	r3
    454a:	f080 0001 	eor.w	r0, r0, #1
    454e:	2239      	movs	r2, #57	; 0x39
    4550:	4904      	ldr	r1, [pc, #16]	; (4564 <list_insert_as_head+0x24>)
    4552:	b2c0      	uxtb	r0, r0
    4554:	4b04      	ldr	r3, [pc, #16]	; (4568 <list_insert_as_head+0x28>)
    4556:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4558:	6823      	ldr	r3, [r4, #0]
    455a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    455c:	6025      	str	r5, [r4, #0]
    455e:	bd38      	pop	{r3, r4, r5, pc}
    4560:	0000451f 	.word	0x0000451f
    4564:	0000ad9c 	.word	0x0000ad9c
    4568:	00004519 	.word	0x00004519

0000456c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    456c:	6803      	ldr	r3, [r0, #0]
    456e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4570:	6001      	str	r1, [r0, #0]
    4572:	4770      	bx	lr

00004574 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4574:	b570      	push	{r4, r5, r6, lr}
    4576:	4605      	mov	r5, r0
    4578:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    457a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    457c:	4b0a      	ldr	r3, [pc, #40]	; (45a8 <list_insert_at_end+0x34>)
    457e:	4798      	blx	r3
    4580:	f080 0001 	eor.w	r0, r0, #1
    4584:	224f      	movs	r2, #79	; 0x4f
    4586:	4909      	ldr	r1, [pc, #36]	; (45ac <list_insert_at_end+0x38>)
    4588:	b2c0      	uxtb	r0, r0
    458a:	4b09      	ldr	r3, [pc, #36]	; (45b0 <list_insert_at_end+0x3c>)
    458c:	4798      	blx	r3

	if (!list->head) {
    458e:	682b      	ldr	r3, [r5, #0]
    4590:	b91b      	cbnz	r3, 459a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    4592:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    4594:	6033      	str	r3, [r6, #0]
		return;
    4596:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    4598:	461c      	mov	r4, r3
	while (it->next) {
    459a:	6823      	ldr	r3, [r4, #0]
    459c:	2b00      	cmp	r3, #0
    459e:	d1fb      	bne.n	4598 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    45a0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    45a2:	6033      	str	r3, [r6, #0]
    45a4:	bd70      	pop	{r4, r5, r6, pc}
    45a6:	bf00      	nop
    45a8:	0000451f 	.word	0x0000451f
    45ac:	0000ad9c 	.word	0x0000ad9c
    45b0:	00004519 	.word	0x00004519

000045b4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    45b4:	6803      	ldr	r3, [r0, #0]
    45b6:	b10b      	cbz	r3, 45bc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    45b8:	681a      	ldr	r2, [r3, #0]
    45ba:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    45bc:	4618      	mov	r0, r3
    45be:	4770      	bx	lr

000045c0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    45c0:	b570      	push	{r4, r5, r6, lr}
    45c2:	460e      	mov	r6, r1
    45c4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    45c6:	4604      	mov	r4, r0
    45c8:	b178      	cbz	r0, 45ea <ringbuffer_init+0x2a>
    45ca:	b181      	cbz	r1, 45ee <ringbuffer_init+0x2e>
    45cc:	b1a2      	cbz	r2, 45f8 <ringbuffer_init+0x38>
    45ce:	2001      	movs	r0, #1
    45d0:	2228      	movs	r2, #40	; 0x28
    45d2:	490d      	ldr	r1, [pc, #52]	; (4608 <ringbuffer_init+0x48>)
    45d4:	4b0d      	ldr	r3, [pc, #52]	; (460c <ringbuffer_init+0x4c>)
    45d6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    45d8:	1e6b      	subs	r3, r5, #1
    45da:	421d      	tst	r5, r3
    45dc:	d109      	bne.n	45f2 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    45de:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    45e0:	2000      	movs	r0, #0
    45e2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    45e4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    45e6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    45e8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    45ea:	2000      	movs	r0, #0
    45ec:	e7f0      	b.n	45d0 <ringbuffer_init+0x10>
    45ee:	2000      	movs	r0, #0
    45f0:	e7ee      	b.n	45d0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    45f2:	f06f 000c 	mvn.w	r0, #12
    45f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    45f8:	2228      	movs	r2, #40	; 0x28
    45fa:	4903      	ldr	r1, [pc, #12]	; (4608 <ringbuffer_init+0x48>)
    45fc:	2000      	movs	r0, #0
    45fe:	4b03      	ldr	r3, [pc, #12]	; (460c <ringbuffer_init+0x4c>)
    4600:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    4602:	1e6b      	subs	r3, r5, #1
    4604:	e7eb      	b.n	45de <ringbuffer_init+0x1e>
    4606:	bf00      	nop
    4608:	0000adbc 	.word	0x0000adbc
    460c:	00004519 	.word	0x00004519

00004610 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    4610:	b538      	push	{r3, r4, r5, lr}
    4612:	460d      	mov	r5, r1
	ASSERT(rb && data);
    4614:	4604      	mov	r4, r0
    4616:	b1a0      	cbz	r0, 4642 <ringbuffer_get+0x32>
    4618:	1c08      	adds	r0, r1, #0
    461a:	bf18      	it	ne
    461c:	2001      	movne	r0, #1
    461e:	2240      	movs	r2, #64	; 0x40
    4620:	490a      	ldr	r1, [pc, #40]	; (464c <ringbuffer_get+0x3c>)
    4622:	4b0b      	ldr	r3, [pc, #44]	; (4650 <ringbuffer_get+0x40>)
    4624:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    4626:	68a3      	ldr	r3, [r4, #8]
    4628:	68e2      	ldr	r2, [r4, #12]
    462a:	429a      	cmp	r2, r3
    462c:	d00b      	beq.n	4646 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    462e:	6862      	ldr	r2, [r4, #4]
    4630:	4013      	ands	r3, r2
    4632:	6822      	ldr	r2, [r4, #0]
    4634:	5cd3      	ldrb	r3, [r2, r3]
    4636:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    4638:	68a3      	ldr	r3, [r4, #8]
    463a:	3301      	adds	r3, #1
    463c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    463e:	2000      	movs	r0, #0
    4640:	bd38      	pop	{r3, r4, r5, pc}
    4642:	2000      	movs	r0, #0
    4644:	e7eb      	b.n	461e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    4646:	f06f 0009 	mvn.w	r0, #9
}
    464a:	bd38      	pop	{r3, r4, r5, pc}
    464c:	0000adbc 	.word	0x0000adbc
    4650:	00004519 	.word	0x00004519

00004654 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    4654:	b538      	push	{r3, r4, r5, lr}
    4656:	460d      	mov	r5, r1
	ASSERT(rb);
    4658:	4604      	mov	r4, r0
    465a:	2251      	movs	r2, #81	; 0x51
    465c:	490b      	ldr	r1, [pc, #44]	; (468c <ringbuffer_put+0x38>)
    465e:	3000      	adds	r0, #0
    4660:	bf18      	it	ne
    4662:	2001      	movne	r0, #1
    4664:	4b0a      	ldr	r3, [pc, #40]	; (4690 <ringbuffer_put+0x3c>)
    4666:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    4668:	68e3      	ldr	r3, [r4, #12]
    466a:	6862      	ldr	r2, [r4, #4]
    466c:	4013      	ands	r3, r2
    466e:	6822      	ldr	r2, [r4, #0]
    4670:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    4672:	68e3      	ldr	r3, [r4, #12]
    4674:	6861      	ldr	r1, [r4, #4]
    4676:	68a2      	ldr	r2, [r4, #8]
    4678:	1a9a      	subs	r2, r3, r2
    467a:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    467c:	bf84      	itt	hi
    467e:	1a59      	subhi	r1, r3, r1
    4680:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    4682:	3301      	adds	r3, #1
    4684:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    4686:	2000      	movs	r0, #0
    4688:	bd38      	pop	{r3, r4, r5, pc}
    468a:	bf00      	nop
    468c:	0000adbc 	.word	0x0000adbc
    4690:	00004519 	.word	0x00004519

00004694 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    4694:	b510      	push	{r4, lr}
	ASSERT(rb);
    4696:	4604      	mov	r4, r0
    4698:	2267      	movs	r2, #103	; 0x67
    469a:	4905      	ldr	r1, [pc, #20]	; (46b0 <ringbuffer_num+0x1c>)
    469c:	3000      	adds	r0, #0
    469e:	bf18      	it	ne
    46a0:	2001      	movne	r0, #1
    46a2:	4b04      	ldr	r3, [pc, #16]	; (46b4 <ringbuffer_num+0x20>)
    46a4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    46a6:	68e0      	ldr	r0, [r4, #12]
    46a8:	68a3      	ldr	r3, [r4, #8]
}
    46aa:	1ac0      	subs	r0, r0, r3
    46ac:	bd10      	pop	{r4, pc}
    46ae:	bf00      	nop
    46b0:	0000adbc 	.word	0x0000adbc
    46b4:	00004519 	.word	0x00004519

000046b8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    46b8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    46ba:	4a06      	ldr	r2, [pc, #24]	; (46d4 <_sbrk+0x1c>)
    46bc:	6812      	ldr	r2, [r2, #0]
    46be:	b122      	cbz	r2, 46ca <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    46c0:	4a04      	ldr	r2, [pc, #16]	; (46d4 <_sbrk+0x1c>)
    46c2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    46c4:	4403      	add	r3, r0
    46c6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    46c8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    46ca:	4903      	ldr	r1, [pc, #12]	; (46d8 <_sbrk+0x20>)
    46cc:	4a01      	ldr	r2, [pc, #4]	; (46d4 <_sbrk+0x1c>)
    46ce:	6011      	str	r1, [r2, #0]
    46d0:	e7f6      	b.n	46c0 <_sbrk+0x8>
    46d2:	bf00      	nop
    46d4:	20000bf4 	.word	0x20000bf4
    46d8:	20012c28 	.word	0x20012c28

000046dc <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    46dc:	6940      	ldr	r0, [r0, #20]
    46de:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    46e2:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    46e6:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    46e8:	0040      	lsls	r0, r0, #1
    46ea:	3076      	adds	r0, #118	; 0x76
}
    46ec:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    46f0:	4770      	bx	lr
	...

000046f4 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    46f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    46f6:	f013 0f01 	tst.w	r3, #1
    46fa:	d11b      	bne.n	4734 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    46fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    46fe:	f013 0f03 	tst.w	r3, #3
    4702:	d1fb      	bne.n	46fc <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    4704:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    4706:	f013 0f02 	tst.w	r3, #2
    470a:	d00d      	beq.n	4728 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    470c:	8803      	ldrh	r3, [r0, #0]
    470e:	f023 0302 	bic.w	r3, r3, #2
    4712:	041b      	lsls	r3, r3, #16
    4714:	0c1b      	lsrs	r3, r3, #16
    4716:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    4718:	6b03      	ldr	r3, [r0, #48]	; 0x30
    471a:	f013 0f03 	tst.w	r3, #3
    471e:	d1fb      	bne.n	4718 <_adc_init+0x24>
    4720:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4722:	f013 0f02 	tst.w	r3, #2
    4726:	d1fb      	bne.n	4720 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    4728:	2301      	movs	r3, #1
    472a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    472c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    472e:	f013 0f03 	tst.w	r3, #3
    4732:	d1fb      	bne.n	472c <_adc_init+0x38>
    4734:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4736:	f013 0f01 	tst.w	r3, #1
    473a:	d1fb      	bne.n	4734 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    473c:	2316      	movs	r3, #22
    473e:	4a37      	ldr	r2, [pc, #220]	; (481c <_adc_init+0x128>)
    4740:	fb03 2301 	mla	r3, r3, r1, r2
    4744:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    4746:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    4748:	6b03      	ldr	r3, [r0, #48]	; 0x30
    474a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    474e:	2b00      	cmp	r3, #0
    4750:	d1fa      	bne.n	4748 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    4752:	2316      	movs	r3, #22
    4754:	4a31      	ldr	r2, [pc, #196]	; (481c <_adc_init+0x128>)
    4756:	fb03 2301 	mla	r3, r3, r1, r2
    475a:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    475c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    475e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4760:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4764:	2b00      	cmp	r3, #0
    4766:	d1fa      	bne.n	475e <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    4768:	2316      	movs	r3, #22
    476a:	4a2c      	ldr	r2, [pc, #176]	; (481c <_adc_init+0x128>)
    476c:	fb03 2301 	mla	r3, r3, r1, r2
    4770:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    4772:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    4774:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    4776:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    4778:	6b03      	ldr	r3, [r0, #48]	; 0x30
    477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    477e:	2b00      	cmp	r3, #0
    4780:	d1fa      	bne.n	4778 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    4782:	2316      	movs	r3, #22
    4784:	4a25      	ldr	r2, [pc, #148]	; (481c <_adc_init+0x128>)
    4786:	fb03 2301 	mla	r3, r3, r1, r2
    478a:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    478c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    478e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4790:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4794:	2b00      	cmp	r3, #0
    4796:	d1fa      	bne.n	478e <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    4798:	2316      	movs	r3, #22
    479a:	4a20      	ldr	r2, [pc, #128]	; (481c <_adc_init+0x128>)
    479c:	fb03 2301 	mla	r3, r3, r1, r2
    47a0:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    47a2:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    47a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    47aa:	2b00      	cmp	r3, #0
    47ac:	d1fa      	bne.n	47a4 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    47ae:	2316      	movs	r3, #22
    47b0:	4a1a      	ldr	r2, [pc, #104]	; (481c <_adc_init+0x128>)
    47b2:	fb03 2301 	mla	r3, r3, r1, r2
    47b6:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    47b8:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    47ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    47c0:	d1fb      	bne.n	47ba <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    47c2:	2316      	movs	r3, #22
    47c4:	4a15      	ldr	r2, [pc, #84]	; (481c <_adc_init+0x128>)
    47c6:	fb03 2301 	mla	r3, r3, r1, r2
    47ca:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    47cc:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    47ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    47d4:	d1fb      	bne.n	47ce <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    47d6:	2316      	movs	r3, #22
    47d8:	4a10      	ldr	r2, [pc, #64]	; (481c <_adc_init+0x128>)
    47da:	fb03 2301 	mla	r3, r3, r1, r2
    47de:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    47e0:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    47e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47e4:	f413 7f00 	tst.w	r3, #512	; 0x200
    47e8:	d1fb      	bne.n	47e2 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    47ea:	2316      	movs	r3, #22
    47ec:	4a0b      	ldr	r2, [pc, #44]	; (481c <_adc_init+0x128>)
    47ee:	fb03 2301 	mla	r3, r3, r1, r2
    47f2:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    47f4:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    47f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    47fc:	d1fb      	bne.n	47f6 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    47fe:	2216      	movs	r2, #22
    4800:	4b06      	ldr	r3, [pc, #24]	; (481c <_adc_init+0x128>)
    4802:	fb02 3101 	mla	r1, r2, r1, r3
    4806:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    4808:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    480a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    480c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    480e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4810:	f013 0f03 	tst.w	r3, #3
    4814:	d1fb      	bne.n	480e <_adc_init+0x11a>

	return ERR_NONE;
}
    4816:	2000      	movs	r0, #0
    4818:	4770      	bx	lr
    481a:	bf00      	nop
    481c:	0000ade0 	.word	0x0000ade0

00004820 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    4820:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    4822:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    4824:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    4828:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    482c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    482e:	f013 0f01 	tst.w	r3, #1
    4832:	d106      	bne.n	4842 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    4834:	f013 0f02 	tst.w	r3, #2
    4838:	d10d      	bne.n	4856 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    483a:	f013 0f04 	tst.w	r3, #4
    483e:	d111      	bne.n	4864 <_adc_interrupt_handler+0x44>
    4840:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    4842:	2301      	movs	r3, #1
    4844:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    4848:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    484c:	6883      	ldr	r3, [r0, #8]
    484e:	b292      	uxth	r2, r2
    4850:	2100      	movs	r1, #0
    4852:	4798      	blx	r3
    4854:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    4856:	2302      	movs	r3, #2
    4858:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    485c:	6843      	ldr	r3, [r0, #4]
    485e:	2100      	movs	r1, #0
    4860:	4798      	blx	r3
    4862:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4864:	2304      	movs	r3, #4
    4866:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    486a:	6803      	ldr	r3, [r0, #0]
    486c:	2100      	movs	r1, #0
    486e:	4798      	blx	r3
	}
}
    4870:	e7e6      	b.n	4840 <_adc_interrupt_handler+0x20>
	...

00004874 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    4874:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    4878:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    487c:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    4880:	b148      	cbz	r0, 4896 <_adc_get_regs+0x22>
    4882:	2801      	cmp	r0, #1
    4884:	d009      	beq.n	489a <_adc_get_regs+0x26>
{
    4886:	b508      	push	{r3, lr}
	ASSERT(false);
    4888:	228c      	movs	r2, #140	; 0x8c
    488a:	4905      	ldr	r1, [pc, #20]	; (48a0 <_adc_get_regs+0x2c>)
    488c:	2000      	movs	r0, #0
    488e:	4b05      	ldr	r3, [pc, #20]	; (48a4 <_adc_get_regs+0x30>)
    4890:	4798      	blx	r3
	return 0;
    4892:	2000      	movs	r0, #0
    4894:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    4896:	2000      	movs	r0, #0
    4898:	4770      	bx	lr
    489a:	2001      	movs	r0, #1
    489c:	4770      	bx	lr
    489e:	bf00      	nop
    48a0:	0000ae0c 	.word	0x0000ae0c
    48a4:	00004519 	.word	0x00004519

000048a8 <_adc_async_init>:
{
    48a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48ac:	460c      	mov	r4, r1
	ASSERT(device);
    48ae:	4605      	mov	r5, r0
    48b0:	22e6      	movs	r2, #230	; 0xe6
    48b2:	493b      	ldr	r1, [pc, #236]	; (49a0 <_adc_async_init+0xf8>)
    48b4:	3000      	adds	r0, #0
    48b6:	bf18      	it	ne
    48b8:	2001      	movne	r0, #1
    48ba:	4b3a      	ldr	r3, [pc, #232]	; (49a4 <_adc_async_init+0xfc>)
    48bc:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    48be:	4620      	mov	r0, r4
    48c0:	4b39      	ldr	r3, [pc, #228]	; (49a8 <_adc_async_init+0x100>)
    48c2:	4798      	blx	r3
    48c4:	4601      	mov	r1, r0
    48c6:	4620      	mov	r0, r4
    48c8:	4b38      	ldr	r3, [pc, #224]	; (49ac <_adc_async_init+0x104>)
    48ca:	4798      	blx	r3
	if (init_status) {
    48cc:	4606      	mov	r6, r0
    48ce:	b110      	cbz	r0, 48d6 <_adc_async_init+0x2e>
}
    48d0:	4630      	mov	r0, r6
    48d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    48d6:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    48d8:	4b35      	ldr	r3, [pc, #212]	; (49b0 <_adc_async_init+0x108>)
    48da:	429c      	cmp	r4, r3
    48dc:	d05c      	beq.n	4998 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    48de:	4b35      	ldr	r3, [pc, #212]	; (49b4 <_adc_async_init+0x10c>)
    48e0:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    48e2:	bf04      	itt	eq
    48e4:	4b34      	ldreq	r3, [pc, #208]	; (49b8 <_adc_async_init+0x110>)
    48e6:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    48e8:	4628      	mov	r0, r5
    48ea:	4f34      	ldr	r7, [pc, #208]	; (49bc <_adc_async_init+0x114>)
    48ec:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ee:	0943      	lsrs	r3, r0, #5
    48f0:	f000 001f 	and.w	r0, r0, #31
    48f4:	2401      	movs	r4, #1
    48f6:	fa04 f000 	lsl.w	r0, r4, r0
    48fa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 49c0 <_adc_async_init+0x118>
    48fe:	3320      	adds	r3, #32
    4900:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4908:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    490c:	4628      	mov	r0, r5
    490e:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4910:	0943      	lsrs	r3, r0, #5
    4912:	f000 001f 	and.w	r0, r0, #31
    4916:	fa04 f000 	lsl.w	r0, r4, r0
    491a:	3360      	adds	r3, #96	; 0x60
    491c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    4920:	4628      	mov	r0, r5
    4922:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4924:	0943      	lsrs	r3, r0, #5
    4926:	f000 001f 	and.w	r0, r0, #31
    492a:	4084      	lsls	r4, r0
    492c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    4930:	4628      	mov	r0, r5
    4932:	47b8      	blx	r7
    4934:	3001      	adds	r0, #1
    4936:	b280      	uxth	r0, r0
    4938:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    493a:	2b00      	cmp	r3, #0
    493c:	dbc8      	blt.n	48d0 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    493e:	095b      	lsrs	r3, r3, #5
    4940:	f000 001f 	and.w	r0, r0, #31
    4944:	2201      	movs	r2, #1
    4946:	fa02 f000 	lsl.w	r0, r2, r0
    494a:	3320      	adds	r3, #32
    494c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4954:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    4958:	4628      	mov	r0, r5
    495a:	47b8      	blx	r7
    495c:	3001      	adds	r0, #1
    495e:	b280      	uxth	r0, r0
    4960:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4962:	2b00      	cmp	r3, #0
    4964:	dbb4      	blt.n	48d0 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4966:	095b      	lsrs	r3, r3, #5
    4968:	f000 001f 	and.w	r0, r0, #31
    496c:	2201      	movs	r2, #1
    496e:	fa02 f000 	lsl.w	r0, r2, r0
    4972:	3360      	adds	r3, #96	; 0x60
    4974:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    4978:	4628      	mov	r0, r5
    497a:	47b8      	blx	r7
    497c:	3001      	adds	r0, #1
    497e:	b280      	uxth	r0, r0
    4980:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4982:	2b00      	cmp	r3, #0
    4984:	dba4      	blt.n	48d0 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4986:	095b      	lsrs	r3, r3, #5
    4988:	f000 001f 	and.w	r0, r0, #31
    498c:	2201      	movs	r2, #1
    498e:	fa02 f000 	lsl.w	r0, r2, r0
    4992:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    4996:	e79b      	b.n	48d0 <_adc_async_init+0x28>
		_adc0_dev = dev;
    4998:	4b07      	ldr	r3, [pc, #28]	; (49b8 <_adc_async_init+0x110>)
    499a:	601d      	str	r5, [r3, #0]
    499c:	e7a4      	b.n	48e8 <_adc_async_init+0x40>
    499e:	bf00      	nop
    49a0:	0000ae0c 	.word	0x0000ae0c
    49a4:	00004519 	.word	0x00004519
    49a8:	00004875 	.word	0x00004875
    49ac:	000046f5 	.word	0x000046f5
    49b0:	43001c00 	.word	0x43001c00
    49b4:	43002000 	.word	0x43002000
    49b8:	20000bf8 	.word	0x20000bf8
    49bc:	000046dd 	.word	0x000046dd
    49c0:	e000e100 	.word	0xe000e100

000049c4 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    49c4:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    49c6:	8813      	ldrh	r3, [r2, #0]
    49c8:	b29b      	uxth	r3, r3
    49ca:	f043 0302 	orr.w	r3, r3, #2
    49ce:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    49d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    49d2:	f013 0f03 	tst.w	r3, #3
    49d6:	d1fb      	bne.n	49d0 <_adc_async_enable_channel+0xc>
}
    49d8:	4770      	bx	lr

000049da <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    49da:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    49dc:	88db      	ldrh	r3, [r3, #6]
    49de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    49e2:	2b03      	cmp	r3, #3
}
    49e4:	bf0c      	ite	eq
    49e6:	2001      	moveq	r0, #1
    49e8:	2002      	movne	r0, #2
    49ea:	4770      	bx	lr

000049ec <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    49ec:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    49ee:	7d13      	ldrb	r3, [r2, #20]
    49f0:	f043 0302 	orr.w	r3, r3, #2
    49f4:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    49f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    49f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    49fc:	2b00      	cmp	r3, #0
    49fe:	d1fa      	bne.n	49f6 <_adc_async_convert+0xa>
}
    4a00:	4770      	bx	lr

00004a02 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    4a02:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    4a04:	2a01      	cmp	r2, #1
    4a06:	d007      	beq.n	4a18 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    4a08:	2a02      	cmp	r2, #2
    4a0a:	d00e      	beq.n	4a2a <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    4a0c:	b91a      	cbnz	r2, 4a16 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    4a0e:	b1ab      	cbz	r3, 4a3c <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    4a10:	2301      	movs	r3, #1
    4a12:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    4a16:	4770      	bx	lr
	if (value == 0x0) {
    4a18:	b91b      	cbnz	r3, 4a22 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    4a1a:	2304      	movs	r3, #4
    4a1c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    4a20:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    4a22:	2304      	movs	r3, #4
    4a24:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    4a28:	4770      	bx	lr
	if (value == 0x0) {
    4a2a:	b91b      	cbnz	r3, 4a34 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    4a2c:	2302      	movs	r3, #2
    4a2e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    4a32:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    4a34:	2302      	movs	r3, #2
    4a36:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    4a3a:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    4a3c:	2301      	movs	r3, #1
    4a3e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    4a42:	4770      	bx	lr

00004a44 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    4a44:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    4a46:	4b02      	ldr	r3, [pc, #8]	; (4a50 <ADC0_0_Handler+0xc>)
    4a48:	6818      	ldr	r0, [r3, #0]
    4a4a:	4b02      	ldr	r3, [pc, #8]	; (4a54 <ADC0_0_Handler+0x10>)
    4a4c:	4798      	blx	r3
    4a4e:	bd08      	pop	{r3, pc}
    4a50:	20000bf8 	.word	0x20000bf8
    4a54:	00004821 	.word	0x00004821

00004a58 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    4a58:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    4a5a:	4b02      	ldr	r3, [pc, #8]	; (4a64 <ADC0_1_Handler+0xc>)
    4a5c:	6818      	ldr	r0, [r3, #0]
    4a5e:	4b02      	ldr	r3, [pc, #8]	; (4a68 <ADC0_1_Handler+0x10>)
    4a60:	4798      	blx	r3
    4a62:	bd08      	pop	{r3, pc}
    4a64:	20000bf8 	.word	0x20000bf8
    4a68:	00004821 	.word	0x00004821

00004a6c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    4a6c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    4a6e:	4b02      	ldr	r3, [pc, #8]	; (4a78 <ADC1_0_Handler+0xc>)
    4a70:	6858      	ldr	r0, [r3, #4]
    4a72:	4b02      	ldr	r3, [pc, #8]	; (4a7c <ADC1_0_Handler+0x10>)
    4a74:	4798      	blx	r3
    4a76:	bd08      	pop	{r3, pc}
    4a78:	20000bf8 	.word	0x20000bf8
    4a7c:	00004821 	.word	0x00004821

00004a80 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    4a80:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    4a82:	4b02      	ldr	r3, [pc, #8]	; (4a8c <ADC1_1_Handler+0xc>)
    4a84:	6858      	ldr	r0, [r3, #4]
    4a86:	4b02      	ldr	r3, [pc, #8]	; (4a90 <ADC1_1_Handler+0x10>)
    4a88:	4798      	blx	r3
    4a8a:	bd08      	pop	{r3, pc}
    4a8c:	20000bf8 	.word	0x20000bf8
    4a90:	00004821 	.word	0x00004821

00004a94 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a94:	0943      	lsrs	r3, r0, #5
    4a96:	f000 001f 	and.w	r0, r0, #31
    4a9a:	2201      	movs	r2, #1
    4a9c:	fa02 f000 	lsl.w	r0, r2, r0
    4aa0:	3340      	adds	r3, #64	; 0x40
    4aa2:	4a02      	ldr	r2, [pc, #8]	; (4aac <_irq_set+0x18>)
    4aa4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    4aa8:	4770      	bx	lr
    4aaa:	bf00      	nop
    4aac:	e000e100 	.word	0xe000e100

00004ab0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    4ab0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    4ab4:	00c0      	lsls	r0, r0, #3
    4ab6:	4770      	bx	lr

00004ab8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    4ab8:	4b01      	ldr	r3, [pc, #4]	; (4ac0 <_get_cycles_for_ms+0x8>)
    4aba:	fb03 f000 	mul.w	r0, r3, r0
    4abe:	4770      	bx	lr
    4ac0:	0001d4c0 	.word	0x0001d4c0

00004ac4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4ac4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4ac6:	4a0e      	ldr	r2, [pc, #56]	; (4b00 <_init_chip+0x3c>)
    4ac8:	8813      	ldrh	r3, [r2, #0]
    4aca:	b29b      	uxth	r3, r3
    4acc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    4ad0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    4ad2:	4b0c      	ldr	r3, [pc, #48]	; (4b04 <_init_chip+0x40>)
    4ad4:	4798      	blx	r3
	_oscctrl_init_sources();
    4ad6:	4b0c      	ldr	r3, [pc, #48]	; (4b08 <_init_chip+0x44>)
    4ad8:	4798      	blx	r3
	_mclk_init();
    4ada:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <_init_chip+0x48>)
    4adc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4ade:	2004      	movs	r0, #4
    4ae0:	4c0b      	ldr	r4, [pc, #44]	; (4b10 <_init_chip+0x4c>)
    4ae2:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    4ae4:	4b0b      	ldr	r3, [pc, #44]	; (4b14 <_init_chip+0x50>)
    4ae6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4ae8:	f640 70fb 	movw	r0, #4091	; 0xffb
    4aec:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    4aee:	4a0a      	ldr	r2, [pc, #40]	; (4b18 <_init_chip+0x54>)
    4af0:	6913      	ldr	r3, [r2, #16]
    4af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4af6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    4af8:	4b08      	ldr	r3, [pc, #32]	; (4b1c <_init_chip+0x58>)
    4afa:	4798      	blx	r3
    4afc:	bd10      	pop	{r4, pc}
    4afe:	bf00      	nop
    4b00:	41004000 	.word	0x41004000
    4b04:	00004fa1 	.word	0x00004fa1
    4b08:	00004fb5 	.word	0x00004fb5
    4b0c:	00004ec9 	.word	0x00004ec9
    4b10:	00004e51 	.word	0x00004e51
    4b14:	00004fb9 	.word	0x00004fb9
    4b18:	40000800 	.word	0x40000800
    4b1c:	00004b95 	.word	0x00004b95

00004b20 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    4b20:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    4b22:	4a1a      	ldr	r2, [pc, #104]	; (4b8c <_dmac_handler+0x6c>)
    4b24:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    4b26:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    4b2a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4b2e:	4818      	ldr	r0, [pc, #96]	; (4b90 <_dmac_handler+0x70>)
    4b30:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    4b34:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4b38:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    4b3c:	f012 0f01 	tst.w	r2, #1
    4b40:	d10a      	bne.n	4b58 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    4b42:	011a      	lsls	r2, r3, #4
    4b44:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4b48:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4b4c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    4b50:	f012 0f02 	tst.w	r2, #2
    4b54:	d10b      	bne.n	4b6e <_dmac_handler+0x4e>
    4b56:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    4b58:	011a      	lsls	r2, r3, #4
    4b5a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4b5e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4b62:	2101      	movs	r1, #1
    4b64:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    4b68:	6843      	ldr	r3, [r0, #4]
    4b6a:	4798      	blx	r3
    4b6c:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    4b6e:	011a      	lsls	r2, r3, #4
    4b70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4b74:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4b78:	2102      	movs	r1, #2
    4b7a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    4b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4b82:	4a03      	ldr	r2, [pc, #12]	; (4b90 <_dmac_handler+0x70>)
    4b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b88:	4798      	blx	r3
	}
}
    4b8a:	e7e4      	b.n	4b56 <_dmac_handler+0x36>
    4b8c:	4100a000 	.word	0x4100a000
    4b90:	20000c00 	.word	0x20000c00

00004b94 <_dma_init>:
{
    4b94:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    4b96:	4a32      	ldr	r2, [pc, #200]	; (4c60 <_dma_init+0xcc>)
    4b98:	8813      	ldrh	r3, [r2, #0]
    4b9a:	f023 0302 	bic.w	r3, r3, #2
    4b9e:	041b      	lsls	r3, r3, #16
    4ba0:	0c1b      	lsrs	r3, r3, #16
    4ba2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    4ba4:	8853      	ldrh	r3, [r2, #2]
    4ba6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    4baa:	041b      	lsls	r3, r3, #16
    4bac:	0c1b      	lsrs	r3, r3, #16
    4bae:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    4bb0:	8813      	ldrh	r3, [r2, #0]
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	f043 0301 	orr.w	r3, r3, #1
    4bb8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    4bba:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    4bbc:	f013 0f01 	tst.w	r3, #1
    4bc0:	d1fb      	bne.n	4bba <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    4bc2:	4b27      	ldr	r3, [pc, #156]	; (4c60 <_dma_init+0xcc>)
    4bc4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    4bc8:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    4bca:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    4bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    4bd0:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    4bd4:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    4bd6:	2100      	movs	r1, #0
    4bd8:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    4bda:	4a22      	ldr	r2, [pc, #136]	; (4c64 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    4bdc:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    4bde:	4a22      	ldr	r2, [pc, #136]	; (4c68 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    4be0:	639a      	str	r2, [r3, #56]	; 0x38
    4be2:	4b22      	ldr	r3, [pc, #136]	; (4c6c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    4be4:	4c1f      	ldr	r4, [pc, #124]	; (4c64 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    4be6:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    4be8:	681d      	ldr	r5, [r3, #0]
    4bea:	0108      	lsls	r0, r1, #4
    4bec:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    4bf0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    4bf4:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    4bf6:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    4bf8:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    4bfc:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    4bfe:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    4c02:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    4c04:	1822      	adds	r2, r4, r0
    4c06:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    4c08:	60d6      	str	r6, [r2, #12]
    4c0a:	3101      	adds	r1, #1
    4c0c:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    4c0e:	2920      	cmp	r1, #32
    4c10:	d1ea      	bne.n	4be8 <_dma_init+0x54>
    4c12:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c14:	2001      	movs	r0, #1
    4c16:	4916      	ldr	r1, [pc, #88]	; (4c70 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    4c18:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    4c1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4c1e:	d00b      	beq.n	4c38 <_dma_init+0xa4>
    4c20:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    4c22:	2b24      	cmp	r3, #36	; 0x24
    4c24:	d1f8      	bne.n	4c18 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    4c26:	4a0e      	ldr	r2, [pc, #56]	; (4c60 <_dma_init+0xcc>)
    4c28:	8813      	ldrh	r3, [r2, #0]
    4c2a:	b29b      	uxth	r3, r3
    4c2c:	f043 0302 	orr.w	r3, r3, #2
    4c30:	8013      	strh	r3, [r2, #0]
}
    4c32:	2000      	movs	r0, #0
    4c34:	bc70      	pop	{r4, r5, r6}
    4c36:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c38:	095c      	lsrs	r4, r3, #5
    4c3a:	f002 021f 	and.w	r2, r2, #31
    4c3e:	fa00 f202 	lsl.w	r2, r0, r2
    4c42:	f104 0520 	add.w	r5, r4, #32
    4c46:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c4e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c52:	f104 0560 	add.w	r5, r4, #96	; 0x60
    4c56:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c5a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    4c5e:	e7df      	b.n	4c20 <_dma_init+0x8c>
    4c60:	4100a000 	.word	0x4100a000
    4c64:	20002800 	.word	0x20002800
    4c68:	20002a00 	.word	0x20002a00
    4c6c:	0000ae24 	.word	0x0000ae24
    4c70:	e000e100 	.word	0xe000e100

00004c74 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    4c74:	b991      	cbnz	r1, 4c9c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    4c76:	b942      	cbnz	r2, 4c8a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    4c78:	0100      	lsls	r0, r0, #4
    4c7a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4c7e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    4c82:	2302      	movs	r3, #2
    4c84:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    4c88:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    4c8a:	0100      	lsls	r0, r0, #4
    4c8c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4c90:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    4c94:	2302      	movs	r3, #2
    4c96:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    4c9a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    4c9c:	2901      	cmp	r1, #1
    4c9e:	d000      	beq.n	4ca2 <_dma_set_irq_state+0x2e>
    4ca0:	4770      	bx	lr
	if (value == 0x0) {
    4ca2:	b142      	cbz	r2, 4cb6 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    4ca4:	0100      	lsls	r0, r0, #4
    4ca6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4caa:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    4cae:	2301      	movs	r3, #1
    4cb0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    4cb4:	e7f4      	b.n	4ca0 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    4cb6:	0100      	lsls	r0, r0, #4
    4cb8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4cbc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    4cc0:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    4cc4:	4770      	bx	lr
	...

00004cc8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    4cc8:	4b02      	ldr	r3, [pc, #8]	; (4cd4 <_dma_set_destination_address+0xc>)
    4cca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4cce:	6081      	str	r1, [r0, #8]
}
    4cd0:	2000      	movs	r0, #0
    4cd2:	4770      	bx	lr
    4cd4:	20002800 	.word	0x20002800

00004cd8 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    4cd8:	4b02      	ldr	r3, [pc, #8]	; (4ce4 <_dma_set_source_address+0xc>)
    4cda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4cde:	6041      	str	r1, [r0, #4]
}
    4ce0:	2000      	movs	r0, #0
    4ce2:	4770      	bx	lr
    4ce4:	20002800 	.word	0x20002800

00004ce8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    4ce8:	4a05      	ldr	r2, [pc, #20]	; (4d00 <_dma_srcinc_enable+0x18>)
    4cea:	0100      	lsls	r0, r0, #4
    4cec:	5a13      	ldrh	r3, [r2, r0]
    4cee:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    4cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    4cf4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    4cf8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    4cfa:	5211      	strh	r1, [r2, r0]
}
    4cfc:	2000      	movs	r0, #0
    4cfe:	4770      	bx	lr
    4d00:	20002800 	.word	0x20002800

00004d04 <_dma_set_data_amount>:
{
    4d04:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    4d06:	4c14      	ldr	r4, [pc, #80]	; (4d58 <_dma_set_data_amount+0x54>)
    4d08:	0102      	lsls	r2, r0, #4
    4d0a:	18a3      	adds	r3, r4, r2
    4d0c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    4d0e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    4d10:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    4d14:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    4d16:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4d1a:	d006      	beq.n	4d2a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    4d1c:	fa01 f403 	lsl.w	r4, r1, r3
    4d20:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    4d22:	4a0d      	ldr	r2, [pc, #52]	; (4d58 <_dma_set_data_amount+0x54>)
    4d24:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    4d28:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    4d2a:	4c0b      	ldr	r4, [pc, #44]	; (4d58 <_dma_set_data_amount+0x54>)
    4d2c:	0102      	lsls	r2, r0, #4
    4d2e:	18a5      	adds	r5, r4, r2
    4d30:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    4d32:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    4d34:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4d38:	d005      	beq.n	4d46 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    4d3a:	fa01 f303 	lsl.w	r3, r1, r3
    4d3e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    4d40:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    4d44:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    4d46:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    4d48:	4b03      	ldr	r3, [pc, #12]	; (4d58 <_dma_set_data_amount+0x54>)
    4d4a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4d4e:	8041      	strh	r1, [r0, #2]
}
    4d50:	2000      	movs	r0, #0
    4d52:	bc30      	pop	{r4, r5}
    4d54:	4770      	bx	lr
    4d56:	bf00      	nop
    4d58:	20002800 	.word	0x20002800

00004d5c <_dma_enable_transaction>:
{
    4d5c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    4d5e:	4c0d      	ldr	r4, [pc, #52]	; (4d94 <_dma_enable_transaction+0x38>)
    4d60:	0103      	lsls	r3, r0, #4
    4d62:	5ae2      	ldrh	r2, [r4, r3]
    4d64:	b292      	uxth	r2, r2
    4d66:	f042 0201 	orr.w	r2, r2, #1
    4d6a:	52e2      	strh	r2, [r4, r3]
    4d6c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d70:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4d76:	f042 0202 	orr.w	r2, r2, #2
    4d7a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    4d7c:	b131      	cbz	r1, 4d8c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    4d7e:	4a06      	ldr	r2, [pc, #24]	; (4d98 <_dma_enable_transaction+0x3c>)
    4d80:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    4d82:	2301      	movs	r3, #1
    4d84:	fa03 f000 	lsl.w	r0, r3, r0
    4d88:	4308      	orrs	r0, r1
    4d8a:	6110      	str	r0, [r2, #16]
}
    4d8c:	2000      	movs	r0, #0
    4d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4d92:	4770      	bx	lr
    4d94:	20002800 	.word	0x20002800
    4d98:	4100a000 	.word	0x4100a000

00004d9c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    4d9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4da0:	4b02      	ldr	r3, [pc, #8]	; (4dac <_dma_get_channel_resource+0x10>)
    4da2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4da6:	6001      	str	r1, [r0, #0]
}
    4da8:	2000      	movs	r0, #0
    4daa:	4770      	bx	lr
    4dac:	20000c00 	.word	0x20000c00

00004db0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    4db0:	b508      	push	{r3, lr}
	_dmac_handler();
    4db2:	4b01      	ldr	r3, [pc, #4]	; (4db8 <DMAC_0_Handler+0x8>)
    4db4:	4798      	blx	r3
    4db6:	bd08      	pop	{r3, pc}
    4db8:	00004b21 	.word	0x00004b21

00004dbc <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    4dbc:	b508      	push	{r3, lr}
	_dmac_handler();
    4dbe:	4b01      	ldr	r3, [pc, #4]	; (4dc4 <DMAC_1_Handler+0x8>)
    4dc0:	4798      	blx	r3
    4dc2:	bd08      	pop	{r3, pc}
    4dc4:	00004b21 	.word	0x00004b21

00004dc8 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    4dc8:	b508      	push	{r3, lr}
	_dmac_handler();
    4dca:	4b01      	ldr	r3, [pc, #4]	; (4dd0 <DMAC_2_Handler+0x8>)
    4dcc:	4798      	blx	r3
    4dce:	bd08      	pop	{r3, pc}
    4dd0:	00004b21 	.word	0x00004b21

00004dd4 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    4dd4:	b508      	push	{r3, lr}
	_dmac_handler();
    4dd6:	4b01      	ldr	r3, [pc, #4]	; (4ddc <DMAC_3_Handler+0x8>)
    4dd8:	4798      	blx	r3
    4dda:	bd08      	pop	{r3, pc}
    4ddc:	00004b21 	.word	0x00004b21

00004de0 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    4de0:	b508      	push	{r3, lr}
	_dmac_handler();
    4de2:	4b01      	ldr	r3, [pc, #4]	; (4de8 <DMAC_4_Handler+0x8>)
    4de4:	4798      	blx	r3
    4de6:	bd08      	pop	{r3, pc}
    4de8:	00004b21 	.word	0x00004b21

00004dec <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    4dec:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    4dee:	2000      	movs	r0, #0
    4df0:	4770      	bx	lr
	...

00004df4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4df4:	b430      	push	{r4, r5}
    4df6:	4814      	ldr	r0, [pc, #80]	; (4e48 <_event_system_init+0x54>)
    4df8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    4dfc:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4dfe:	4c13      	ldr	r4, [pc, #76]	; (4e4c <_event_system_init+0x58>)
    4e00:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4e02:	f813 1b01 	ldrb.w	r1, [r3], #1
    4e06:	3248      	adds	r2, #72	; 0x48
    4e08:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    4e0c:	42ab      	cmp	r3, r5
    4e0e:	d1f7      	bne.n	4e00 <_event_system_init+0xc>
    4e10:	480d      	ldr	r0, [pc, #52]	; (4e48 <_event_system_init+0x54>)
    4e12:	f100 0442 	add.w	r4, r0, #66	; 0x42
    4e16:	3080      	adds	r0, #128	; 0x80
    4e18:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4e1a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4e1e:	00ca      	lsls	r2, r1, #3
    4e20:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4e24:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4e28:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4e2a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    4e2e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4e30:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4e34:	43db      	mvns	r3, r3
    4e36:	b2db      	uxtb	r3, r3
    4e38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4e3c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4e3e:	2920      	cmp	r1, #32
    4e40:	d1eb      	bne.n	4e1a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    4e42:	2000      	movs	r0, #0
    4e44:	bc30      	pop	{r4, r5}
    4e46:	4770      	bx	lr
    4e48:	0000af24 	.word	0x0000af24
    4e4c:	4100e000 	.word	0x4100e000

00004e50 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4e50:	f010 0f01 	tst.w	r0, #1
    4e54:	d008      	beq.n	4e68 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e56:	4a17      	ldr	r2, [pc, #92]	; (4eb4 <_gclk_init_generators_by_fref+0x64>)
    4e58:	4b17      	ldr	r3, [pc, #92]	; (4eb8 <_gclk_init_generators_by_fref+0x68>)
    4e5a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e5c:	4619      	mov	r1, r3
    4e5e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    4e62:	684b      	ldr	r3, [r1, #4]
    4e64:	4213      	tst	r3, r2
    4e66:	d1fc      	bne.n	4e62 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4e68:	f010 0f02 	tst.w	r0, #2
    4e6c:	d008      	beq.n	4e80 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e6e:	4a13      	ldr	r2, [pc, #76]	; (4ebc <_gclk_init_generators_by_fref+0x6c>)
    4e70:	4b11      	ldr	r3, [pc, #68]	; (4eb8 <_gclk_init_generators_by_fref+0x68>)
    4e72:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e74:	4619      	mov	r1, r3
    4e76:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    4e7a:	684b      	ldr	r3, [r1, #4]
    4e7c:	4213      	tst	r3, r2
    4e7e:	d1fc      	bne.n	4e7a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4e80:	f010 0f04 	tst.w	r0, #4
    4e84:	d008      	beq.n	4e98 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e86:	4a0e      	ldr	r2, [pc, #56]	; (4ec0 <_gclk_init_generators_by_fref+0x70>)
    4e88:	4b0b      	ldr	r3, [pc, #44]	; (4eb8 <_gclk_init_generators_by_fref+0x68>)
    4e8a:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e8c:	4619      	mov	r1, r3
    4e8e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    4e92:	684b      	ldr	r3, [r1, #4]
    4e94:	4213      	tst	r3, r2
    4e96:	d1fc      	bne.n	4e92 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4e98:	f010 0f08 	tst.w	r0, #8
    4e9c:	d008      	beq.n	4eb0 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e9e:	4a09      	ldr	r2, [pc, #36]	; (4ec4 <_gclk_init_generators_by_fref+0x74>)
    4ea0:	4b05      	ldr	r3, [pc, #20]	; (4eb8 <_gclk_init_generators_by_fref+0x68>)
    4ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4ea4:	4619      	mov	r1, r3
    4ea6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    4eaa:	684b      	ldr	r3, [r1, #4]
    4eac:	4213      	tst	r3, r2
    4eae:	d1fc      	bne.n	4eaa <_gclk_init_generators_by_fref+0x5a>
    4eb0:	4770      	bx	lr
    4eb2:	bf00      	nop
    4eb4:	00010108 	.word	0x00010108
    4eb8:	40001c00 	.word	0x40001c00
    4ebc:	00010106 	.word	0x00010106
    4ec0:	00100106 	.word	0x00100106
    4ec4:	00010104 	.word	0x00010104

00004ec8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    4ec8:	2201      	movs	r2, #1
    4eca:	4b01      	ldr	r3, [pc, #4]	; (4ed0 <_mclk_init+0x8>)
    4ecc:	715a      	strb	r2, [r3, #5]
    4ece:	4770      	bx	lr
    4ed0:	40000800 	.word	0x40000800

00004ed4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    4ed4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4ed6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    4ed8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    4eda:	f012 0f01 	tst.w	r2, #1
    4ede:	d005      	beq.n	4eec <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    4ee0:	2201      	movs	r2, #1
    4ee2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    4ee4:	6803      	ldr	r3, [r0, #0]
    4ee6:	b153      	cbz	r3, 4efe <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    4ee8:	4798      	blx	r3
    4eea:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    4eec:	8a1a      	ldrh	r2, [r3, #16]
    4eee:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    4ef0:	b12a      	cbz	r2, 4efe <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    4ef2:	f240 225e 	movw	r2, #606	; 0x25e
    4ef6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    4ef8:	6843      	ldr	r3, [r0, #4]
    4efa:	b103      	cbz	r3, 4efe <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    4efc:	4798      	blx	r3
    4efe:	bd08      	pop	{r3, pc}

00004f00 <_flash_init>:
{
    4f00:	b538      	push	{r3, r4, r5, lr}
    4f02:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    4f04:	4605      	mov	r5, r0
    4f06:	b350      	cbz	r0, 4f5e <_flash_init+0x5e>
    4f08:	4816      	ldr	r0, [pc, #88]	; (4f64 <_flash_init+0x64>)
    4f0a:	4281      	cmp	r1, r0
    4f0c:	bf14      	ite	ne
    4f0e:	2000      	movne	r0, #0
    4f10:	2001      	moveq	r0, #1
    4f12:	224b      	movs	r2, #75	; 0x4b
    4f14:	4914      	ldr	r1, [pc, #80]	; (4f68 <_flash_init+0x68>)
    4f16:	4b15      	ldr	r3, [pc, #84]	; (4f6c <_flash_init+0x6c>)
    4f18:	4798      	blx	r3
	device->hw = hw;
    4f1a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    4f1c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    4f1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    4f22:	049b      	lsls	r3, r3, #18
    4f24:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    4f26:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    4f28:	4b11      	ldr	r3, [pc, #68]	; (4f70 <_flash_init+0x70>)
    4f2a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f2c:	4b11      	ldr	r3, [pc, #68]	; (4f74 <_flash_init+0x74>)
    4f2e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4f32:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4f36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f3a:	f3bf 8f6f 	isb	sy
    4f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4f46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f4a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f4e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    4f52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f56:	6019      	str	r1, [r3, #0]
    4f58:	601a      	str	r2, [r3, #0]
}
    4f5a:	2000      	movs	r0, #0
    4f5c:	bd38      	pop	{r3, r4, r5, pc}
    4f5e:	2000      	movs	r0, #0
    4f60:	e7d7      	b.n	4f12 <_flash_init+0x12>
    4f62:	bf00      	nop
    4f64:	41004000 	.word	0x41004000
    4f68:	0000b028 	.word	0x0000b028
    4f6c:	00004519 	.word	0x00004519
    4f70:	20000d80 	.word	0x20000d80
    4f74:	e000e100 	.word	0xe000e100

00004f78 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    4f78:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    4f7a:	4b02      	ldr	r3, [pc, #8]	; (4f84 <NVMCTRL_0_Handler+0xc>)
    4f7c:	6818      	ldr	r0, [r3, #0]
    4f7e:	4b02      	ldr	r3, [pc, #8]	; (4f88 <NVMCTRL_0_Handler+0x10>)
    4f80:	4798      	blx	r3
    4f82:	bd08      	pop	{r3, pc}
    4f84:	20000d80 	.word	0x20000d80
    4f88:	00004ed5 	.word	0x00004ed5

00004f8c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    4f8c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    4f8e:	4b02      	ldr	r3, [pc, #8]	; (4f98 <NVMCTRL_1_Handler+0xc>)
    4f90:	6818      	ldr	r0, [r3, #0]
    4f92:	4b02      	ldr	r3, [pc, #8]	; (4f9c <NVMCTRL_1_Handler+0x10>)
    4f94:	4798      	blx	r3
    4f96:	bd08      	pop	{r3, pc}
    4f98:	20000d80 	.word	0x20000d80
    4f9c:	00004ed5 	.word	0x00004ed5

00004fa0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4fa0:	4b03      	ldr	r3, [pc, #12]	; (4fb0 <_osc32kctrl_init_sources+0x10>)
    4fa2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4fa4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4fa8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4faa:	2201      	movs	r2, #1
    4fac:	741a      	strb	r2, [r3, #16]
    4fae:	4770      	bx	lr
    4fb0:	40001400 	.word	0x40001400

00004fb4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4fb4:	4770      	bx	lr
	...

00004fb8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4fb8:	4a47      	ldr	r2, [pc, #284]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    4fba:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4fbc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4fc0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4fc4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4fc6:	4611      	mov	r1, r2
    4fc8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    4fcc:	684b      	ldr	r3, [r1, #4]
    4fce:	4213      	tst	r3, r2
    4fd0:	d1fc      	bne.n	4fcc <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4fd2:	4a41      	ldr	r2, [pc, #260]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    4fd4:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4fd6:	f013 0f04 	tst.w	r3, #4
    4fda:	d1fb      	bne.n	4fd4 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4fdc:	4b3f      	ldr	r3, [pc, #252]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    4fde:	2200      	movs	r2, #0
    4fe0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4fe2:	4a3f      	ldr	r2, [pc, #252]	; (50e0 <_oscctrl_init_referenced_generators+0x128>)
    4fe4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4fe6:	461a      	mov	r2, r3
    4fe8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4fec:	f013 0f10 	tst.w	r3, #16
    4ff0:	d1fa      	bne.n	4fe8 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4ff2:	2200      	movs	r2, #0
    4ff4:	4b39      	ldr	r3, [pc, #228]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    4ff6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4ffa:	461a      	mov	r2, r3
    4ffc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5000:	f013 0f04 	tst.w	r3, #4
    5004:	d1fa      	bne.n	4ffc <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5006:	2202      	movs	r2, #2
    5008:	4b34      	ldr	r3, [pc, #208]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    500a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    500c:	461a      	mov	r2, r3
    500e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5012:	f013 0f02 	tst.w	r3, #2
    5016:	d1fa      	bne.n	500e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5018:	4b30      	ldr	r3, [pc, #192]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    501a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    501c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    501e:	461a      	mov	r2, r3
    5020:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5024:	f013 0f08 	tst.w	r3, #8
    5028:	d1fa      	bne.n	5020 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    502a:	2288      	movs	r2, #136	; 0x88
    502c:	4b2b      	ldr	r3, [pc, #172]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    502e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5032:	461a      	mov	r2, r3
    5034:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5038:	f013 0f04 	tst.w	r3, #4
    503c:	d1fa      	bne.n	5034 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    503e:	2242      	movs	r2, #66	; 0x42
    5040:	4b25      	ldr	r3, [pc, #148]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    5042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5046:	2227      	movs	r2, #39	; 0x27
    5048:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    504c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    504e:	461a      	mov	r2, r3
    5050:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5052:	f013 0f06 	tst.w	r3, #6
    5056:	d1fb      	bne.n	5050 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5058:	4b20      	ldr	r3, [pc, #128]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    505a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    505e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5060:	2202      	movs	r2, #2
    5062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5066:	461a      	mov	r2, r3
    5068:	6d13      	ldr	r3, [r2, #80]	; 0x50
    506a:	f013 0f02 	tst.w	r3, #2
    506e:	d1fb      	bne.n	5068 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5070:	4b1a      	ldr	r3, [pc, #104]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    5072:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5076:	f013 0f01 	tst.w	r3, #1
    507a:	d026      	beq.n	50ca <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    507c:	4a17      	ldr	r2, [pc, #92]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    507e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5080:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5084:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5088:	d1f9      	bne.n	507e <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    508a:	4b14      	ldr	r3, [pc, #80]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    508c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    508e:	f012 0f01 	tst.w	r2, #1
    5092:	d103      	bne.n	509c <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5096:	f012 0f02 	tst.w	r2, #2
    509a:	d0f7      	beq.n	508c <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    509c:	4a0e      	ldr	r2, [pc, #56]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    509e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    50a0:	2b00      	cmp	r3, #0
    50a2:	d1fc      	bne.n	509e <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    50a4:	4a0c      	ldr	r2, [pc, #48]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    50a6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    50a8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    50ac:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    50b0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    50b2:	4611      	mov	r1, r2
    50b4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    50b8:	684b      	ldr	r3, [r1, #4]
    50ba:	4213      	tst	r3, r2
    50bc:	d1fc      	bne.n	50b8 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    50be:	4a06      	ldr	r2, [pc, #24]	; (50d8 <_oscctrl_init_referenced_generators+0x120>)
    50c0:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    50c2:	f013 0f04 	tst.w	r3, #4
    50c6:	d1fb      	bne.n	50c0 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    50c8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    50ca:	4a04      	ldr	r2, [pc, #16]	; (50dc <_oscctrl_init_referenced_generators+0x124>)
    50cc:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    50ce:	f413 7f80 	tst.w	r3, #256	; 0x100
    50d2:	d0fb      	beq.n	50cc <_oscctrl_init_referenced_generators+0x114>
    50d4:	e7d9      	b.n	508a <_oscctrl_init_referenced_generators+0xd2>
    50d6:	bf00      	nop
    50d8:	40001c00 	.word	0x40001c00
    50dc:	40001000 	.word	0x40001000
    50e0:	04010000 	.word	0x04010000

000050e4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    50e4:	b500      	push	{lr}
    50e6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    50e8:	4b0d      	ldr	r3, [pc, #52]	; (5120 <RAMECC_Handler+0x3c>)
    50ea:	789b      	ldrb	r3, [r3, #2]
    50ec:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    50ee:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    50f0:	9b01      	ldr	r3, [sp, #4]
    50f2:	f013 0f02 	tst.w	r3, #2
    50f6:	d006      	beq.n	5106 <RAMECC_Handler+0x22>
    50f8:	4b0a      	ldr	r3, [pc, #40]	; (5124 <RAMECC_Handler+0x40>)
    50fa:	681b      	ldr	r3, [r3, #0]
    50fc:	b11b      	cbz	r3, 5106 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    50fe:	4a08      	ldr	r2, [pc, #32]	; (5120 <RAMECC_Handler+0x3c>)
    5100:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5102:	4798      	blx	r3
    5104:	e009      	b.n	511a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    5106:	9b01      	ldr	r3, [sp, #4]
    5108:	f013 0f01 	tst.w	r3, #1
    510c:	d005      	beq.n	511a <RAMECC_Handler+0x36>
    510e:	4b05      	ldr	r3, [pc, #20]	; (5124 <RAMECC_Handler+0x40>)
    5110:	685b      	ldr	r3, [r3, #4]
    5112:	b113      	cbz	r3, 511a <RAMECC_Handler+0x36>
    5114:	4a02      	ldr	r2, [pc, #8]	; (5120 <RAMECC_Handler+0x3c>)
    5116:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5118:	4798      	blx	r3
	} else {
		return;
	}
}
    511a:	b003      	add	sp, #12
    511c:	f85d fb04 	ldr.w	pc, [sp], #4
    5120:	41020000 	.word	0x41020000
    5124:	20002c00 	.word	0x20002c00

00005128 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    5128:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    512a:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    512c:	6913      	ldr	r3, [r2, #16]
    512e:	f013 0f60 	tst.w	r3, #96	; 0x60
    5132:	d1fb      	bne.n	512c <_rtc_timer_set_period+0x4>
}
    5134:	4770      	bx	lr

00005136 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    5136:	68c2      	ldr	r2, [r0, #12]
    5138:	6913      	ldr	r3, [r2, #16]
    513a:	f013 0f60 	tst.w	r3, #96	; 0x60
    513e:	d1fb      	bne.n	5138 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    5140:	6a10      	ldr	r0, [r2, #32]
}
    5142:	4770      	bx	lr

00005144 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    5144:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5146:	f248 0103 	movw	r1, #32771	; 0x8003
    514a:	6913      	ldr	r3, [r2, #16]
    514c:	420b      	tst	r3, r1
    514e:	d1fc      	bne.n	514a <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5150:	8810      	ldrh	r0, [r2, #0]
}
    5152:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5156:	4770      	bx	lr

00005158 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    5158:	4770      	bx	lr
	...

0000515c <_rtc_timer_init>:
{
    515c:	b538      	push	{r3, r4, r5, lr}
    515e:	460c      	mov	r4, r1
	ASSERT(dev);
    5160:	4605      	mov	r5, r0
    5162:	2230      	movs	r2, #48	; 0x30
    5164:	4914      	ldr	r1, [pc, #80]	; (51b8 <_rtc_timer_init+0x5c>)
    5166:	3000      	adds	r0, #0
    5168:	bf18      	it	ne
    516a:	2001      	movne	r0, #1
    516c:	4b13      	ldr	r3, [pc, #76]	; (51bc <_rtc_timer_init+0x60>)
    516e:	4798      	blx	r3
	dev->hw = hw;
    5170:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5172:	2301      	movs	r3, #1
    5174:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5176:	f248 0203 	movw	r2, #32771	; 0x8003
    517a:	6923      	ldr	r3, [r4, #16]
    517c:	4213      	tst	r3, r2
    517e:	d1fc      	bne.n	517a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5180:	68eb      	ldr	r3, [r5, #12]
    5182:	691a      	ldr	r2, [r3, #16]
    5184:	f012 0f01 	tst.w	r2, #1
    5188:	d1fb      	bne.n	5182 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    518a:	f248 0280 	movw	r2, #32896	; 0x8080
    518e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5190:	f248 0103 	movw	r1, #32771	; 0x8003
    5194:	691a      	ldr	r2, [r3, #16]
    5196:	420a      	tst	r2, r1
    5198:	d1fc      	bne.n	5194 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    519a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    519c:	2301      	movs	r3, #1
    519e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    51a0:	6913      	ldr	r3, [r2, #16]
    51a2:	f013 0f60 	tst.w	r3, #96	; 0x60
    51a6:	d1fb      	bne.n	51a0 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    51a8:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    51aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    51ae:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    51b0:	4b03      	ldr	r3, [pc, #12]	; (51c0 <_rtc_timer_init+0x64>)
    51b2:	601d      	str	r5, [r3, #0]
}
    51b4:	2000      	movs	r0, #0
    51b6:	bd38      	pop	{r3, r4, r5, pc}
    51b8:	0000b048 	.word	0x0000b048
    51bc:	00004519 	.word	0x00004519
    51c0:	20000d84 	.word	0x20000d84

000051c4 <_rtc_timer_deinit>:
{
    51c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    51c6:	4604      	mov	r4, r0
    51c8:	b1c8      	cbz	r0, 51fe <_rtc_timer_deinit+0x3a>
    51ca:	68c0      	ldr	r0, [r0, #12]
    51cc:	3000      	adds	r0, #0
    51ce:	bf18      	it	ne
    51d0:	2001      	movne	r0, #1
    51d2:	2252      	movs	r2, #82	; 0x52
    51d4:	490b      	ldr	r1, [pc, #44]	; (5204 <_rtc_timer_deinit+0x40>)
    51d6:	4b0c      	ldr	r3, [pc, #48]	; (5208 <_rtc_timer_deinit+0x44>)
    51d8:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    51de:	4b0b      	ldr	r3, [pc, #44]	; (520c <_rtc_timer_deinit+0x48>)
    51e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    51e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51e8:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    51ec:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    51ee:	2301      	movs	r3, #1
    51f0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    51f2:	f248 0103 	movw	r1, #32771	; 0x8003
    51f6:	6913      	ldr	r3, [r2, #16]
    51f8:	420b      	tst	r3, r1
    51fa:	d1fc      	bne.n	51f6 <_rtc_timer_deinit+0x32>
}
    51fc:	bd10      	pop	{r4, pc}
    51fe:	2000      	movs	r0, #0
    5200:	e7e7      	b.n	51d2 <_rtc_timer_deinit+0xe>
    5202:	bf00      	nop
    5204:	0000b048 	.word	0x0000b048
    5208:	00004519 	.word	0x00004519
    520c:	e000e100 	.word	0xe000e100

00005210 <_rtc_timer_start>:
{
    5210:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5212:	4604      	mov	r4, r0
    5214:	b310      	cbz	r0, 525c <_rtc_timer_start+0x4c>
    5216:	68c0      	ldr	r0, [r0, #12]
    5218:	3000      	adds	r0, #0
    521a:	bf18      	it	ne
    521c:	2001      	movne	r0, #1
    521e:	225e      	movs	r2, #94	; 0x5e
    5220:	490f      	ldr	r1, [pc, #60]	; (5260 <_rtc_timer_start+0x50>)
    5222:	4b10      	ldr	r3, [pc, #64]	; (5264 <_rtc_timer_start+0x54>)
    5224:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5226:	f44f 6200 	mov.w	r2, #2048	; 0x800
    522a:	4b0f      	ldr	r3, [pc, #60]	; (5268 <_rtc_timer_start+0x58>)
    522c:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    522e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    5230:	2300      	movs	r3, #0
    5232:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5234:	6913      	ldr	r3, [r2, #16]
    5236:	f013 0f08 	tst.w	r3, #8
    523a:	d1fb      	bne.n	5234 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    523c:	68e3      	ldr	r3, [r4, #12]
    523e:	691a      	ldr	r2, [r3, #16]
    5240:	f012 0f08 	tst.w	r2, #8
    5244:	d1fb      	bne.n	523e <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5246:	881a      	ldrh	r2, [r3, #0]
    5248:	b292      	uxth	r2, r2
    524a:	f042 0202 	orr.w	r2, r2, #2
    524e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5250:	f248 0103 	movw	r1, #32771	; 0x8003
    5254:	691a      	ldr	r2, [r3, #16]
    5256:	420a      	tst	r2, r1
    5258:	d1fc      	bne.n	5254 <_rtc_timer_start+0x44>
}
    525a:	bd10      	pop	{r4, pc}
    525c:	2000      	movs	r0, #0
    525e:	e7de      	b.n	521e <_rtc_timer_start+0xe>
    5260:	0000b048 	.word	0x0000b048
    5264:	00004519 	.word	0x00004519
    5268:	e000e100 	.word	0xe000e100

0000526c <_rtc_timer_stop>:
{
    526c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    526e:	4604      	mov	r4, r0
    5270:	b1a0      	cbz	r0, 529c <_rtc_timer_stop+0x30>
    5272:	68c0      	ldr	r0, [r0, #12]
    5274:	3000      	adds	r0, #0
    5276:	bf18      	it	ne
    5278:	2001      	movne	r0, #1
    527a:	226b      	movs	r2, #107	; 0x6b
    527c:	4908      	ldr	r1, [pc, #32]	; (52a0 <_rtc_timer_stop+0x34>)
    527e:	4b09      	ldr	r3, [pc, #36]	; (52a4 <_rtc_timer_stop+0x38>)
    5280:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5282:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5284:	8813      	ldrh	r3, [r2, #0]
    5286:	f023 0302 	bic.w	r3, r3, #2
    528a:	041b      	lsls	r3, r3, #16
    528c:	0c1b      	lsrs	r3, r3, #16
    528e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5290:	f248 0103 	movw	r1, #32771	; 0x8003
    5294:	6913      	ldr	r3, [r2, #16]
    5296:	420b      	tst	r3, r1
    5298:	d1fc      	bne.n	5294 <_rtc_timer_stop+0x28>
}
    529a:	bd10      	pop	{r4, pc}
    529c:	2000      	movs	r0, #0
    529e:	e7ec      	b.n	527a <_rtc_timer_stop+0xe>
    52a0:	0000b048 	.word	0x0000b048
    52a4:	00004519 	.word	0x00004519

000052a8 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    52a8:	4800      	ldr	r0, [pc, #0]	; (52ac <_rtc_get_timer+0x4>)
    52aa:	4770      	bx	lr
    52ac:	20000318 	.word	0x20000318

000052b0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    52b0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    52b2:	4b08      	ldr	r3, [pc, #32]	; (52d4 <RTC_Handler+0x24>)
    52b4:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    52b6:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    52b8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    52ba:	f413 7f80 	tst.w	r3, #256	; 0x100
    52be:	d007      	beq.n	52d0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	b10b      	cbz	r3, 52c8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    52c4:	4620      	mov	r0, r4
    52c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    52c8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    52ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    52ce:	819a      	strh	r2, [r3, #12]
    52d0:	bd10      	pop	{r4, pc}
    52d2:	bf00      	nop
    52d4:	20000d84 	.word	0x20000d84

000052d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    52d8:	b470      	push	{r4, r5, r6}
    52da:	b089      	sub	sp, #36	; 0x24
    52dc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    52de:	466c      	mov	r4, sp
    52e0:	4d0d      	ldr	r5, [pc, #52]	; (5318 <_sercom_get_hardware_index+0x40>)
    52e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    52e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    52e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    52ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    52ee:	9b00      	ldr	r3, [sp, #0]
    52f0:	42b3      	cmp	r3, r6
    52f2:	d00d      	beq.n	5310 <_sercom_get_hardware_index+0x38>
    52f4:	4631      	mov	r1, r6
    52f6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    52f8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    52fa:	f853 2b04 	ldr.w	r2, [r3], #4
    52fe:	428a      	cmp	r2, r1
    5300:	d007      	beq.n	5312 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5302:	3001      	adds	r0, #1
    5304:	2808      	cmp	r0, #8
    5306:	d1f8      	bne.n	52fa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    5308:	2000      	movs	r0, #0
}
    530a:	b009      	add	sp, #36	; 0x24
    530c:	bc70      	pop	{r4, r5, r6}
    530e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5310:	2000      	movs	r0, #0
			return i;
    5312:	b2c0      	uxtb	r0, r0
    5314:	e7f9      	b.n	530a <_sercom_get_hardware_index+0x32>
    5316:	bf00      	nop
    5318:	0000b060 	.word	0x0000b060

0000531c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    531c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    531e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    5320:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    5322:	f013 0f01 	tst.w	r3, #1
    5326:	d003      	beq.n	5330 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    5328:	7da3      	ldrb	r3, [r4, #22]
    532a:	f013 0f01 	tst.w	r3, #1
    532e:	d112      	bne.n	5356 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    5330:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    5332:	f013 0f02 	tst.w	r3, #2
    5336:	d003      	beq.n	5340 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    5338:	7da3      	ldrb	r3, [r4, #22]
    533a:	f013 0f02 	tst.w	r3, #2
    533e:	d10f      	bne.n	5360 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    5340:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    5342:	f013 0f04 	tst.w	r3, #4
    5346:	d015      	beq.n	5374 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    5348:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    534a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    534e:	b163      	cbz	r3, 536a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    5350:	23ff      	movs	r3, #255	; 0xff
    5352:	8363      	strh	r3, [r4, #26]
    5354:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    5356:	2301      	movs	r3, #1
    5358:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    535a:	6803      	ldr	r3, [r0, #0]
    535c:	4798      	blx	r3
    535e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    5360:	2302      	movs	r3, #2
    5362:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    5364:	6883      	ldr	r3, [r0, #8]
    5366:	4798      	blx	r3
    5368:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    536a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    536c:	6843      	ldr	r3, [r0, #4]
    536e:	b2c9      	uxtb	r1, r1
    5370:	4798      	blx	r3
    5372:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    5374:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    5376:	09db      	lsrs	r3, r3, #7
    5378:	d100      	bne.n	537c <_sercom_usart_interrupt_handler+0x60>
    537a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    537c:	2380      	movs	r3, #128	; 0x80
    537e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    5380:	68c3      	ldr	r3, [r0, #12]
    5382:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    5384:	8b63      	ldrh	r3, [r4, #26]
    5386:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    5388:	8363      	strh	r3, [r4, #26]
    538a:	e7f6      	b.n	537a <_sercom_usart_interrupt_handler+0x5e>

0000538c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    538c:	4b14      	ldr	r3, [pc, #80]	; (53e0 <_sercom_init_irq_param+0x54>)
    538e:	4298      	cmp	r0, r3
    5390:	d014      	beq.n	53bc <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    5392:	4b14      	ldr	r3, [pc, #80]	; (53e4 <_sercom_init_irq_param+0x58>)
    5394:	4298      	cmp	r0, r3
    5396:	d014      	beq.n	53c2 <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    5398:	4b13      	ldr	r3, [pc, #76]	; (53e8 <_sercom_init_irq_param+0x5c>)
    539a:	4298      	cmp	r0, r3
    539c:	d014      	beq.n	53c8 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    539e:	4b13      	ldr	r3, [pc, #76]	; (53ec <_sercom_init_irq_param+0x60>)
    53a0:	4298      	cmp	r0, r3
    53a2:	d014      	beq.n	53ce <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    53a4:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    53a8:	d014      	beq.n	53d4 <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    53aa:	4b11      	ldr	r3, [pc, #68]	; (53f0 <_sercom_init_irq_param+0x64>)
    53ac:	4298      	cmp	r0, r3
    53ae:	d014      	beq.n	53da <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    53b0:	4b10      	ldr	r3, [pc, #64]	; (53f4 <_sercom_init_irq_param+0x68>)
    53b2:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    53b4:	bf04      	itt	eq
    53b6:	4b10      	ldreq	r3, [pc, #64]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53b8:	6199      	streq	r1, [r3, #24]
    53ba:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    53bc:	4b0e      	ldr	r3, [pc, #56]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53be:	6019      	str	r1, [r3, #0]
    53c0:	e7ed      	b.n	539e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    53c2:	4b0d      	ldr	r3, [pc, #52]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53c4:	6059      	str	r1, [r3, #4]
    53c6:	e7ed      	b.n	53a4 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    53c8:	4b0b      	ldr	r3, [pc, #44]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53ca:	6099      	str	r1, [r3, #8]
    53cc:	e7ed      	b.n	53aa <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    53ce:	4b0a      	ldr	r3, [pc, #40]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53d0:	60d9      	str	r1, [r3, #12]
    53d2:	e7ed      	b.n	53b0 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    53d4:	4b08      	ldr	r3, [pc, #32]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53d6:	6119      	str	r1, [r3, #16]
    53d8:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    53da:	4b07      	ldr	r3, [pc, #28]	; (53f8 <_sercom_init_irq_param+0x6c>)
    53dc:	6159      	str	r1, [r3, #20]
    53de:	4770      	bx	lr
    53e0:	40003000 	.word	0x40003000
    53e4:	40003400 	.word	0x40003400
    53e8:	41012000 	.word	0x41012000
    53ec:	41014000 	.word	0x41014000
    53f0:	43000400 	.word	0x43000400
    53f4:	43000800 	.word	0x43000800
    53f8:	20000d88 	.word	0x20000d88

000053fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    53fc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    53fe:	4b03      	ldr	r3, [pc, #12]	; (540c <_sercom_get_irq_num+0x10>)
    5400:	4798      	blx	r3
    5402:	0080      	lsls	r0, r0, #2
    5404:	302e      	adds	r0, #46	; 0x2e
}
    5406:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    540a:	bd08      	pop	{r3, pc}
    540c:	000052d9 	.word	0x000052d9

00005410 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5410:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    5412:	f013 0f01 	tst.w	r3, #1
    5416:	d109      	bne.n	542c <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5418:	6803      	ldr	r3, [r0, #0]
    541a:	f043 0302 	orr.w	r3, r3, #2
    541e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5420:	69c3      	ldr	r3, [r0, #28]
    5422:	f013 0f03 	tst.w	r3, #3
    5426:	d1fb      	bne.n	5420 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    5428:	2000      	movs	r0, #0
    542a:	4770      	bx	lr
		return ERR_BUSY;
    542c:	f06f 0003 	mvn.w	r0, #3
}
    5430:	4770      	bx	lr
	...

00005434 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    5434:	b538      	push	{r3, r4, r5, lr}
    5436:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    5438:	4b0b      	ldr	r3, [pc, #44]	; (5468 <_spi_async_enable+0x34>)
    543a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    543c:	4620      	mov	r0, r4
    543e:	4b0b      	ldr	r3, [pc, #44]	; (546c <_spi_async_enable+0x38>)
    5440:	4798      	blx	r3
    5442:	1d01      	adds	r1, r0, #4
    5444:	b2c9      	uxtb	r1, r1
    5446:	2501      	movs	r5, #1
    5448:	4c09      	ldr	r4, [pc, #36]	; (5470 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    544a:	1c43      	adds	r3, r0, #1
    544c:	b2db      	uxtb	r3, r3
    544e:	0942      	lsrs	r2, r0, #5
    5450:	f000 001f 	and.w	r0, r0, #31
    5454:	fa05 f000 	lsl.w	r0, r5, r0
    5458:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    545c:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    545e:	4299      	cmp	r1, r3
    5460:	d1f3      	bne.n	544a <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    5462:	2000      	movs	r0, #0
    5464:	bd38      	pop	{r3, r4, r5, pc}
    5466:	bf00      	nop
    5468:	00005411 	.word	0x00005411
    546c:	000053fd 	.word	0x000053fd
    5470:	e000e100 	.word	0xe000e100

00005474 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5474:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    5476:	f013 0f03 	tst.w	r3, #3
    547a:	d111      	bne.n	54a0 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    547c:	69c3      	ldr	r3, [r0, #28]
    547e:	f013 0f03 	tst.w	r3, #3
    5482:	d1fb      	bne.n	547c <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    5484:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    5486:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    548a:	0709      	lsls	r1, r1, #28
    548c:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    5490:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5492:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5494:	69c3      	ldr	r3, [r0, #28]
    5496:	f013 0f03 	tst.w	r3, #3
    549a:	d1fb      	bne.n	5494 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    549c:	2000      	movs	r0, #0
    549e:	4770      	bx	lr
		return ERR_BUSY;
    54a0:	f06f 0003 	mvn.w	r0, #3
}
    54a4:	4770      	bx	lr

000054a6 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    54a6:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    54a8:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    54aa:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    54ac:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    54ae:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    54b0:	f013 0f01 	tst.w	r3, #1
    54b4:	d109      	bne.n	54ca <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    54b6:	f013 0f04 	tst.w	r3, #4
    54ba:	d109      	bne.n	54d0 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    54bc:	f013 0f02 	tst.w	r3, #2
    54c0:	d109      	bne.n	54d6 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    54c2:	f013 0f80 	tst.w	r3, #128	; 0x80
    54c6:	d10b      	bne.n	54e0 <_spi_handler+0x3a>
    54c8:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    54ca:	6883      	ldr	r3, [r0, #8]
    54cc:	4798      	blx	r3
    54ce:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    54d0:	68c3      	ldr	r3, [r0, #12]
    54d2:	4798      	blx	r3
    54d4:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    54d6:	2302      	movs	r3, #2
    54d8:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    54da:	6903      	ldr	r3, [r0, #16]
    54dc:	4798      	blx	r3
    54de:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    54e0:	2304      	movs	r3, #4
    54e2:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    54e4:	2380      	movs	r3, #128	; 0x80
    54e6:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    54e8:	6943      	ldr	r3, [r0, #20]
    54ea:	f06f 0112 	mvn.w	r1, #18
    54ee:	4798      	blx	r3
	}
}
    54f0:	e7ea      	b.n	54c8 <_spi_handler+0x22>
	...

000054f4 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    54f4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    54f6:	4b03      	ldr	r3, [pc, #12]	; (5504 <_spi_get_tx_dma_channel+0x10>)
    54f8:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    54fa:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    54fc:	bf0c      	ite	eq
    54fe:	2008      	moveq	r0, #8
    5500:	2000      	movne	r0, #0
    5502:	bd08      	pop	{r3, pc}
    5504:	000052d9 	.word	0x000052d9

00005508 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    5508:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    550a:	4b03      	ldr	r3, [pc, #12]	; (5518 <_spi_get_rx_dma_channel+0x10>)
    550c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    550e:	2807      	cmp	r0, #7
    5510:	bf8c      	ite	hi
    5512:	2000      	movhi	r0, #0
    5514:	2001      	movls	r0, #1
    5516:	bd08      	pop	{r3, pc}
    5518:	000052d9 	.word	0x000052d9

0000551c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    551c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    551e:	6883      	ldr	r3, [r0, #8]
    5520:	689b      	ldr	r3, [r3, #8]
    5522:	b103      	cbz	r3, 5526 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    5524:	4798      	blx	r3
    5526:	bd08      	pop	{r3, pc}

00005528 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    5528:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    552a:	6883      	ldr	r3, [r0, #8]
    552c:	685b      	ldr	r3, [r3, #4]
    552e:	b103      	cbz	r3, 5532 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    5530:	4798      	blx	r3
    5532:	bd08      	pop	{r3, pc}

00005534 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    5534:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    5536:	6883      	ldr	r3, [r0, #8]
    5538:	68db      	ldr	r3, [r3, #12]
    553a:	b103      	cbz	r3, 553e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    553c:	4798      	blx	r3
    553e:	bd08      	pop	{r3, pc}

00005540 <_usart_init>:
{
    5540:	b510      	push	{r4, lr}
    5542:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5544:	4b48      	ldr	r3, [pc, #288]	; (5668 <_usart_init+0x128>)
    5546:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    5548:	2800      	cmp	r0, #0
    554a:	d06a      	beq.n	5622 <_usart_init+0xe2>
    554c:	2801      	cmp	r0, #1
    554e:	d062      	beq.n	5616 <_usart_init+0xd6>
    5550:	2802      	cmp	r0, #2
    5552:	d062      	beq.n	561a <_usart_init+0xda>
    5554:	2804      	cmp	r0, #4
    5556:	d062      	beq.n	561e <_usart_init+0xde>
    5558:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    555a:	bf08      	it	eq
    555c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    555e:	d006      	beq.n	556e <_usart_init+0x2e>
	ASSERT(false);
    5560:	f44f 721e 	mov.w	r2, #632	; 0x278
    5564:	4941      	ldr	r1, [pc, #260]	; (566c <_usart_init+0x12c>)
    5566:	2000      	movs	r0, #0
    5568:	4b41      	ldr	r3, [pc, #260]	; (5670 <_usart_init+0x130>)
    556a:	4798      	blx	r3
	return 0;
    556c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    556e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    5570:	f013 0f01 	tst.w	r3, #1
    5574:	d122      	bne.n	55bc <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    5576:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    557a:	4a3e      	ldr	r2, [pc, #248]	; (5674 <_usart_init+0x134>)
    557c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5582:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    5586:	69e3      	ldr	r3, [r4, #28]
    5588:	f013 0f03 	tst.w	r3, #3
    558c:	d1fb      	bne.n	5586 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    558e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    5590:	f013 0f02 	tst.w	r3, #2
    5594:	d00b      	beq.n	55ae <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    5596:	6823      	ldr	r3, [r4, #0]
    5598:	f023 0302 	bic.w	r3, r3, #2
    559c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    559e:	69e3      	ldr	r3, [r4, #28]
    55a0:	f013 0f03 	tst.w	r3, #3
    55a4:	d1fb      	bne.n	559e <_usart_init+0x5e>
    55a6:	69e3      	ldr	r3, [r4, #28]
    55a8:	f013 0f02 	tst.w	r3, #2
    55ac:	d1fb      	bne.n	55a6 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    55ae:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    55b2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    55b4:	69e3      	ldr	r3, [r4, #28]
    55b6:	f013 0f03 	tst.w	r3, #3
    55ba:	d1fb      	bne.n	55b4 <_usart_init+0x74>
    55bc:	69e3      	ldr	r3, [r4, #28]
    55be:	f013 0f01 	tst.w	r3, #1
    55c2:	d1fb      	bne.n	55bc <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    55c4:	460a      	mov	r2, r1
    55c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55ca:	4b2a      	ldr	r3, [pc, #168]	; (5674 <_usart_init+0x134>)
    55cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    55d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    55d2:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    55d4:	69e3      	ldr	r3, [r4, #28]
    55d6:	f013 0f03 	tst.w	r3, #3
    55da:	d1fb      	bne.n	55d4 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    55dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    55e0:	4924      	ldr	r1, [pc, #144]	; (5674 <_usart_init+0x134>)
    55e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    55e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    55e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    55ea:	69e3      	ldr	r3, [r4, #28]
    55ec:	f013 0f1f 	tst.w	r3, #31
    55f0:	d1fb      	bne.n	55ea <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    55f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    55f6:	491f      	ldr	r1, [pc, #124]	; (5674 <_usart_init+0x134>)
    55f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    55fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    55fe:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    5600:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    5604:	d10f      	bne.n	5626 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    5606:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    560a:	491a      	ldr	r1, [pc, #104]	; (5674 <_usart_init+0x134>)
    560c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    5610:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    5612:	81a3      	strh	r3, [r4, #12]
    5614:	e016      	b.n	5644 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    5616:	2101      	movs	r1, #1
    5618:	e7a9      	b.n	556e <_usart_init+0x2e>
    561a:	2102      	movs	r1, #2
    561c:	e7a7      	b.n	556e <_usart_init+0x2e>
    561e:	2103      	movs	r1, #3
    5620:	e7a5      	b.n	556e <_usart_init+0x2e>
    5622:	2100      	movs	r1, #0
    5624:	e7a3      	b.n	556e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    5626:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    562a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    562e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    5630:	89a1      	ldrh	r1, [r4, #12]
    5632:	f360 010c 	bfi	r1, r0, #0, #13
    5636:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    5638:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    563c:	89a3      	ldrh	r3, [r4, #12]
    563e:	f361 334f 	bfi	r3, r1, #13, #3
    5642:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    5644:	4b0b      	ldr	r3, [pc, #44]	; (5674 <_usart_init+0x134>)
    5646:	0051      	lsls	r1, r2, #1
    5648:	1888      	adds	r0, r1, r2
    564a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    564e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    5652:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    5654:	440a      	add	r2, r1
    5656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    565a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    565e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    5662:	2000      	movs	r0, #0
    5664:	bd10      	pop	{r4, pc}
    5666:	bf00      	nop
    5668:	000052d9 	.word	0x000052d9
    566c:	0000b134 	.word	0x0000b134
    5670:	00004519 	.word	0x00004519
    5674:	0000b060 	.word	0x0000b060

00005678 <_get_i2cm_index>:
{
    5678:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    567a:	4b07      	ldr	r3, [pc, #28]	; (5698 <_get_i2cm_index+0x20>)
    567c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    567e:	2805      	cmp	r0, #5
    5680:	d008      	beq.n	5694 <_get_i2cm_index+0x1c>
	ASSERT(false);
    5682:	f240 32f3 	movw	r2, #1011	; 0x3f3
    5686:	4905      	ldr	r1, [pc, #20]	; (569c <_get_i2cm_index+0x24>)
    5688:	2000      	movs	r0, #0
    568a:	4b05      	ldr	r3, [pc, #20]	; (56a0 <_get_i2cm_index+0x28>)
    568c:	4798      	blx	r3
	return -1;
    568e:	f04f 30ff 	mov.w	r0, #4294967295
}
    5692:	bd08      	pop	{r3, pc}
			return i;
    5694:	2000      	movs	r0, #0
    5696:	bd08      	pop	{r3, pc}
    5698:	000052d9 	.word	0x000052d9
    569c:	0000b134 	.word	0x0000b134
    56a0:	00004519 	.word	0x00004519

000056a4 <_i2c_m_sync_init_impl>:
{
    56a4:	b538      	push	{r3, r4, r5, lr}
    56a6:	4605      	mov	r5, r0
    56a8:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    56aa:	4608      	mov	r0, r1
    56ac:	4b34      	ldr	r3, [pc, #208]	; (5780 <_i2c_m_sync_init_impl+0xdc>)
    56ae:	4798      	blx	r3
    56b0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    56b2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    56b4:	f013 0f01 	tst.w	r3, #1
    56b8:	d123      	bne.n	5702 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    56ba:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    56be:	4a31      	ldr	r2, [pc, #196]	; (5784 <_i2c_m_sync_init_impl+0xe0>)
    56c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    56c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    56c8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    56cc:	69e3      	ldr	r3, [r4, #28]
    56ce:	f013 0f03 	tst.w	r3, #3
    56d2:	d1fb      	bne.n	56cc <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    56d4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    56d6:	f013 0f02 	tst.w	r3, #2
    56da:	d00b      	beq.n	56f4 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    56dc:	6823      	ldr	r3, [r4, #0]
    56de:	f023 0302 	bic.w	r3, r3, #2
    56e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    56e4:	69e3      	ldr	r3, [r4, #28]
    56e6:	f013 0f03 	tst.w	r3, #3
    56ea:	d1fb      	bne.n	56e4 <_i2c_m_sync_init_impl+0x40>
    56ec:	69e3      	ldr	r3, [r4, #28]
    56ee:	f013 0f02 	tst.w	r3, #2
    56f2:	d1fb      	bne.n	56ec <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    56f4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    56f8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    56fa:	69e3      	ldr	r3, [r4, #28]
    56fc:	f013 0f03 	tst.w	r3, #3
    5700:	d1fb      	bne.n	56fa <_i2c_m_sync_init_impl+0x56>
    5702:	69e3      	ldr	r3, [r4, #28]
    5704:	f013 0f01 	tst.w	r3, #1
    5708:	d1fb      	bne.n	5702 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    570a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    570e:	4a1d      	ldr	r2, [pc, #116]	; (5784 <_i2c_m_sync_init_impl+0xe0>)
    5710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5714:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5718:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    571a:	69e3      	ldr	r3, [r4, #28]
    571c:	f013 0f03 	tst.w	r3, #3
    5720:	d1fb      	bne.n	571a <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    5722:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5726:	4917      	ldr	r1, [pc, #92]	; (5784 <_i2c_m_sync_init_impl+0xe0>)
    5728:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    572c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5730:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5732:	69e3      	ldr	r3, [r4, #28]
    5734:	f013 0f04 	tst.w	r3, #4
    5738:	d1fb      	bne.n	5732 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    573a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    573e:	4911      	ldr	r1, [pc, #68]	; (5784 <_i2c_m_sync_init_impl+0xe0>)
    5740:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    5744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5748:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    574a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    574e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5750:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    5756:	2b01      	cmp	r3, #1
    5758:	bf94      	ite	ls
    575a:	2300      	movls	r3, #0
    575c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    575e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5762:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5764:	69e3      	ldr	r3, [r4, #28]
    5766:	f013 0f04 	tst.w	r3, #4
    576a:	d1fb      	bne.n	5764 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    576c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5770:	4b04      	ldr	r3, [pc, #16]	; (5784 <_i2c_m_sync_init_impl+0xe0>)
    5772:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5776:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    577a:	81eb      	strh	r3, [r5, #14]
}
    577c:	2000      	movs	r0, #0
    577e:	bd38      	pop	{r3, r4, r5, pc}
    5780:	00005679 	.word	0x00005679
    5784:	0000b060 	.word	0x0000b060

00005788 <_sercom_i2c_m_irq_handler>:
{
    5788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    578c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    578e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5790:	7e26      	ldrb	r6, [r4, #24]
    5792:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    5794:	f8df 8234 	ldr.w	r8, [pc, #564]	; 59cc <_sercom_i2c_m_irq_handler+0x244>
    5798:	f240 4265 	movw	r2, #1125	; 0x465
    579c:	4641      	mov	r1, r8
    579e:	3000      	adds	r0, #0
    57a0:	bf18      	it	ne
    57a2:	2001      	movne	r0, #1
    57a4:	4f88      	ldr	r7, [pc, #544]	; (59c8 <_sercom_i2c_m_irq_handler+0x240>)
    57a6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    57a8:	6928      	ldr	r0, [r5, #16]
    57aa:	f240 4266 	movw	r2, #1126	; 0x466
    57ae:	4641      	mov	r1, r8
    57b0:	3000      	adds	r0, #0
    57b2:	bf18      	it	ne
    57b4:	2001      	movne	r0, #1
    57b6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    57b8:	f016 0f80 	tst.w	r6, #128	; 0x80
    57bc:	f040 80f4 	bne.w	59a8 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    57c0:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    57c2:	69e3      	ldr	r3, [r4, #28]
    57c4:	f013 0f04 	tst.w	r3, #4
    57c8:	d1fb      	bne.n	57c2 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    57ca:	8b63      	ldrh	r3, [r4, #26]
    57cc:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    57ce:	f016 0f01 	tst.w	r6, #1
    57d2:	f000 8090 	beq.w	58f6 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    57d6:	f013 0f02 	tst.w	r3, #2
    57da:	d022      	beq.n	5822 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    57dc:	2201      	movs	r2, #1
    57de:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    57e0:	886a      	ldrh	r2, [r5, #2]
    57e2:	b292      	uxth	r2, r2
    57e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    57e8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    57ea:	886a      	ldrh	r2, [r5, #2]
    57ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    57f0:	0412      	lsls	r2, r2, #16
    57f2:	0c12      	lsrs	r2, r2, #16
    57f4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    57f6:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    57fa:	2b00      	cmp	r3, #0
    57fc:	bf14      	ite	ne
    57fe:	f06f 0104 	mvnne.w	r1, #4
    5802:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5806:	886b      	ldrh	r3, [r5, #2]
    5808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    580c:	041b      	lsls	r3, r3, #16
    580e:	0c1b      	lsrs	r3, r3, #16
    5810:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    5812:	696b      	ldr	r3, [r5, #20]
    5814:	2b00      	cmp	r3, #0
    5816:	f000 80c5 	beq.w	59a4 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    581a:	4628      	mov	r0, r5
    581c:	4798      	blx	r3
    581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5822:	f013 0f04 	tst.w	r3, #4
    5826:	d124      	bne.n	5872 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    5828:	886b      	ldrh	r3, [r5, #2]
    582a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    582e:	d03e      	beq.n	58ae <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5830:	882b      	ldrh	r3, [r5, #0]
    5832:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5834:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5838:	69e3      	ldr	r3, [r4, #28]
    583a:	f013 0f04 	tst.w	r3, #4
    583e:	d1fb      	bne.n	5838 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5840:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    5846:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    584a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    584c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    584e:	69e3      	ldr	r3, [r4, #28]
    5850:	f013 0f04 	tst.w	r3, #4
    5854:	d1fb      	bne.n	584e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    5856:	886b      	ldrh	r3, [r5, #2]
    5858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    585c:	041b      	lsls	r3, r3, #16
    585e:	0c1b      	lsrs	r3, r3, #16
    5860:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    5862:	69ab      	ldr	r3, [r5, #24]
    5864:	2b00      	cmp	r3, #0
    5866:	f000 8088 	beq.w	597a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    586a:	4628      	mov	r0, r5
    586c:	4798      	blx	r3
    586e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    5872:	686b      	ldr	r3, [r5, #4]
    5874:	2b00      	cmp	r3, #0
    5876:	dd04      	ble.n	5882 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    5878:	886b      	ldrh	r3, [r5, #2]
    587a:	b29b      	uxth	r3, r3
    587c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5880:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    5882:	886b      	ldrh	r3, [r5, #2]
    5884:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5888:	d108      	bne.n	589c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    588a:	886b      	ldrh	r3, [r5, #2]
    588c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5890:	041b      	lsls	r3, r3, #16
    5892:	0c1b      	lsrs	r3, r3, #16
    5894:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    5896:	f06f 0101 	mvn.w	r1, #1
    589a:	e7b4      	b.n	5806 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    589c:	6863      	ldr	r3, [r4, #4]
    589e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    58a2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    58a4:	69e3      	ldr	r3, [r4, #28]
    58a6:	f013 0f04 	tst.w	r3, #4
    58aa:	d1fb      	bne.n	58a4 <_sercom_i2c_m_irq_handler+0x11c>
    58ac:	e7ed      	b.n	588a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    58ae:	686b      	ldr	r3, [r5, #4]
    58b0:	b99b      	cbnz	r3, 58da <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    58b2:	886b      	ldrh	r3, [r5, #2]
    58b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    58b8:	d106      	bne.n	58c8 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    58ba:	886b      	ldrh	r3, [r5, #2]
    58bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    58c0:	041b      	lsls	r3, r3, #16
    58c2:	0c1b      	lsrs	r3, r3, #16
    58c4:	806b      	strh	r3, [r5, #2]
    58c6:	e7cc      	b.n	5862 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    58c8:	6863      	ldr	r3, [r4, #4]
    58ca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    58ce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    58d0:	69e3      	ldr	r3, [r4, #28]
    58d2:	f013 0f04 	tst.w	r3, #4
    58d6:	d1fb      	bne.n	58d0 <_sercom_i2c_m_irq_handler+0x148>
    58d8:	e7ef      	b.n	58ba <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    58da:	68ab      	ldr	r3, [r5, #8]
    58dc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    58de:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    58e0:	69e3      	ldr	r3, [r4, #28]
    58e2:	f013 0f04 	tst.w	r3, #4
    58e6:	d1fb      	bne.n	58e0 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    58e8:	68ab      	ldr	r3, [r5, #8]
    58ea:	3301      	adds	r3, #1
    58ec:	60ab      	str	r3, [r5, #8]
				msg->len--;
    58ee:	686b      	ldr	r3, [r5, #4]
    58f0:	3b01      	subs	r3, #1
    58f2:	606b      	str	r3, [r5, #4]
    58f4:	e7b5      	b.n	5862 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    58f6:	f016 0f02 	tst.w	r6, #2
    58fa:	d041      	beq.n	5980 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    58fc:	686a      	ldr	r2, [r5, #4]
    58fe:	2a00      	cmp	r2, #0
    5900:	d036      	beq.n	5970 <_sercom_i2c_m_irq_handler+0x1e8>
    5902:	f013 0f04 	tst.w	r3, #4
    5906:	d133      	bne.n	5970 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5908:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    590c:	3a01      	subs	r2, #1
    590e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5910:	2a00      	cmp	r2, #0
    5912:	d137      	bne.n	5984 <_sercom_i2c_m_irq_handler+0x1fc>
    5914:	2900      	cmp	r1, #0
    5916:	d039      	beq.n	598c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    5918:	886b      	ldrh	r3, [r5, #2]
    591a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    591e:	d116      	bne.n	594e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    5920:	886b      	ldrh	r3, [r5, #2]
    5922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5926:	041b      	lsls	r3, r3, #16
    5928:	0c1b      	lsrs	r3, r3, #16
    592a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    592c:	68aa      	ldr	r2, [r5, #8]
    592e:	1c53      	adds	r3, r2, #1
    5930:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5932:	69e3      	ldr	r3, [r4, #28]
    5934:	f013 0f04 	tst.w	r3, #4
    5938:	d1fb      	bne.n	5932 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    593a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    593c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    593e:	2302      	movs	r3, #2
    5940:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    5942:	69eb      	ldr	r3, [r5, #28]
    5944:	b1e3      	cbz	r3, 5980 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    5946:	4628      	mov	r0, r5
    5948:	4798      	blx	r3
    594a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    594e:	6863      	ldr	r3, [r4, #4]
    5950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5954:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5956:	69e3      	ldr	r3, [r4, #28]
    5958:	f013 0f04 	tst.w	r3, #4
    595c:	d1fb      	bne.n	5956 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    595e:	6863      	ldr	r3, [r4, #4]
    5960:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    5964:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5966:	69e3      	ldr	r3, [r4, #28]
    5968:	f013 0f04 	tst.w	r3, #4
    596c:	d1fb      	bne.n	5966 <_sercom_i2c_m_irq_handler+0x1de>
    596e:	e7d7      	b.n	5920 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5970:	2302      	movs	r3, #2
    5972:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    5974:	f06f 0101 	mvn.w	r1, #1
    5978:	e745      	b.n	5806 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    597a:	f016 0f02 	tst.w	r6, #2
    597e:	d1e0      	bne.n	5942 <_sercom_i2c_m_irq_handler+0x1ba>
    5980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5984:	2a01      	cmp	r2, #1
    5986:	d1d1      	bne.n	592c <_sercom_i2c_m_irq_handler+0x1a4>
    5988:	2900      	cmp	r1, #0
    598a:	d0cf      	beq.n	592c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    598c:	6863      	ldr	r3, [r4, #4]
    598e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    5992:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5994:	69e3      	ldr	r3, [r4, #28]
    5996:	f013 0f04 	tst.w	r3, #4
    599a:	d1fb      	bne.n	5994 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    599c:	686b      	ldr	r3, [r5, #4]
    599e:	2b00      	cmp	r3, #0
    59a0:	d0ba      	beq.n	5918 <_sercom_i2c_m_irq_handler+0x190>
    59a2:	e7c3      	b.n	592c <_sercom_i2c_m_irq_handler+0x1a4>
    59a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    59a8:	886b      	ldrh	r3, [r5, #2]
    59aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    59ae:	041b      	lsls	r3, r3, #16
    59b0:	0c1b      	lsrs	r3, r3, #16
    59b2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    59b4:	696b      	ldr	r3, [r5, #20]
    59b6:	2b00      	cmp	r3, #0
    59b8:	d0e2      	beq.n	5980 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    59ba:	f06f 0104 	mvn.w	r1, #4
    59be:	4628      	mov	r0, r5
    59c0:	4798      	blx	r3
    59c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59c6:	bf00      	nop
    59c8:	00004519 	.word	0x00004519
    59cc:	0000b134 	.word	0x0000b134

000059d0 <_usart_async_init>:
{
    59d0:	b570      	push	{r4, r5, r6, lr}
    59d2:	460d      	mov	r5, r1
	ASSERT(device);
    59d4:	4606      	mov	r6, r0
    59d6:	22d8      	movs	r2, #216	; 0xd8
    59d8:	4917      	ldr	r1, [pc, #92]	; (5a38 <_usart_async_init+0x68>)
    59da:	3000      	adds	r0, #0
    59dc:	bf18      	it	ne
    59de:	2001      	movne	r0, #1
    59e0:	4b16      	ldr	r3, [pc, #88]	; (5a3c <_usart_async_init+0x6c>)
    59e2:	4798      	blx	r3
	init_status = _usart_init(hw);
    59e4:	4628      	mov	r0, r5
    59e6:	4b16      	ldr	r3, [pc, #88]	; (5a40 <_usart_async_init+0x70>)
    59e8:	4798      	blx	r3
	if (init_status) {
    59ea:	4604      	mov	r4, r0
    59ec:	b108      	cbz	r0, 59f2 <_usart_async_init+0x22>
}
    59ee:	4620      	mov	r0, r4
    59f0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    59f2:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    59f4:	4631      	mov	r1, r6
    59f6:	4628      	mov	r0, r5
    59f8:	4b12      	ldr	r3, [pc, #72]	; (5a44 <_usart_async_init+0x74>)
    59fa:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    59fc:	4628      	mov	r0, r5
    59fe:	4b12      	ldr	r3, [pc, #72]	; (5a48 <_usart_async_init+0x78>)
    5a00:	4798      	blx	r3
    5a02:	1d01      	adds	r1, r0, #4
    5a04:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a06:	2501      	movs	r5, #1
    5a08:	f000 021f 	and.w	r2, r0, #31
    5a0c:	fa05 f202 	lsl.w	r2, r5, r2
    5a10:	0943      	lsrs	r3, r0, #5
    5a12:	009b      	lsls	r3, r3, #2
    5a14:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5a18:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a24:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a2c:	601a      	str	r2, [r3, #0]
		irq++;
    5a2e:	3001      	adds	r0, #1
    5a30:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    5a32:	4281      	cmp	r1, r0
    5a34:	d1e8      	bne.n	5a08 <_usart_async_init+0x38>
    5a36:	e7da      	b.n	59ee <_usart_async_init+0x1e>
    5a38:	0000b134 	.word	0x0000b134
    5a3c:	00004519 	.word	0x00004519
    5a40:	00005541 	.word	0x00005541
    5a44:	0000538d 	.word	0x0000538d
    5a48:	000053fd 	.word	0x000053fd

00005a4c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    5a4c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5a4e:	6813      	ldr	r3, [r2, #0]
    5a50:	f043 0302 	orr.w	r3, r3, #2
    5a54:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    5a56:	69d3      	ldr	r3, [r2, #28]
    5a58:	f013 0f03 	tst.w	r3, #3
    5a5c:	d1fb      	bne.n	5a56 <_usart_async_enable+0xa>
}
    5a5e:	4770      	bx	lr

00005a60 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    5a60:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    5a62:	6299      	str	r1, [r3, #40]	; 0x28
    5a64:	4770      	bx	lr

00005a66 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    5a66:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    5a68:	2201      	movs	r2, #1
    5a6a:	759a      	strb	r2, [r3, #22]
    5a6c:	4770      	bx	lr

00005a6e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    5a6e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    5a70:	2202      	movs	r2, #2
    5a72:	759a      	strb	r2, [r3, #22]
    5a74:	4770      	bx	lr
	...

00005a78 <_usart_async_set_irq_state>:
{
    5a78:	b570      	push	{r4, r5, r6, lr}
    5a7a:	460c      	mov	r4, r1
    5a7c:	4616      	mov	r6, r2
	ASSERT(device);
    5a7e:	4605      	mov	r5, r0
    5a80:	f44f 720e 	mov.w	r2, #568	; 0x238
    5a84:	4915      	ldr	r1, [pc, #84]	; (5adc <_usart_async_set_irq_state+0x64>)
    5a86:	3000      	adds	r0, #0
    5a88:	bf18      	it	ne
    5a8a:	2001      	movne	r0, #1
    5a8c:	4b14      	ldr	r3, [pc, #80]	; (5ae0 <_usart_async_set_irq_state+0x68>)
    5a8e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    5a90:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    5a94:	d10d      	bne.n	5ab2 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    5a96:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    5a98:	b92e      	cbnz	r6, 5aa6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    5a9a:	2201      	movs	r2, #1
    5a9c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    5a9e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    5aa0:	2202      	movs	r2, #2
    5aa2:	751a      	strb	r2, [r3, #20]
    5aa4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    5aa6:	2201      	movs	r2, #1
    5aa8:	759a      	strb	r2, [r3, #22]
    5aaa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    5aac:	2202      	movs	r2, #2
    5aae:	759a      	strb	r2, [r3, #22]
    5ab0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    5ab2:	2c01      	cmp	r4, #1
    5ab4:	d002      	beq.n	5abc <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    5ab6:	2c03      	cmp	r4, #3
    5ab8:	d008      	beq.n	5acc <_usart_async_set_irq_state+0x54>
    5aba:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    5abc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    5abe:	b916      	cbnz	r6, 5ac6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    5ac0:	2204      	movs	r2, #4
    5ac2:	751a      	strb	r2, [r3, #20]
    5ac4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    5ac6:	2204      	movs	r2, #4
    5ac8:	759a      	strb	r2, [r3, #22]
    5aca:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    5acc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    5ace:	b116      	cbz	r6, 5ad6 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    5ad0:	2280      	movs	r2, #128	; 0x80
    5ad2:	759a      	strb	r2, [r3, #22]
}
    5ad4:	e7f1      	b.n	5aba <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    5ad6:	2280      	movs	r2, #128	; 0x80
    5ad8:	751a      	strb	r2, [r3, #20]
    5ada:	bd70      	pop	{r4, r5, r6, pc}
    5adc:	0000b134 	.word	0x0000b134
    5ae0:	00004519 	.word	0x00004519

00005ae4 <_i2c_m_async_init>:
{
    5ae4:	b570      	push	{r4, r5, r6, lr}
    5ae6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    5ae8:	4606      	mov	r6, r0
    5aea:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    5aee:	4918      	ldr	r1, [pc, #96]	; (5b50 <_i2c_m_async_init+0x6c>)
    5af0:	3000      	adds	r0, #0
    5af2:	bf18      	it	ne
    5af4:	2001      	movne	r0, #1
    5af6:	4b17      	ldr	r3, [pc, #92]	; (5b54 <_i2c_m_async_init+0x70>)
    5af8:	4798      	blx	r3
	i2c_dev->hw = hw;
    5afa:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5afc:	4629      	mov	r1, r5
    5afe:	4630      	mov	r0, r6
    5b00:	4b15      	ldr	r3, [pc, #84]	; (5b58 <_i2c_m_async_init+0x74>)
    5b02:	4798      	blx	r3
	if (init_status) {
    5b04:	4604      	mov	r4, r0
    5b06:	b108      	cbz	r0, 5b0c <_i2c_m_async_init+0x28>
}
    5b08:	4620      	mov	r0, r4
    5b0a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    5b0c:	4631      	mov	r1, r6
    5b0e:	4628      	mov	r0, r5
    5b10:	4b12      	ldr	r3, [pc, #72]	; (5b5c <_i2c_m_async_init+0x78>)
    5b12:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    5b14:	4628      	mov	r0, r5
    5b16:	4b12      	ldr	r3, [pc, #72]	; (5b60 <_i2c_m_async_init+0x7c>)
    5b18:	4798      	blx	r3
    5b1a:	1d01      	adds	r1, r0, #4
    5b1c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b1e:	2501      	movs	r5, #1
    5b20:	f000 021f 	and.w	r2, r0, #31
    5b24:	fa05 f202 	lsl.w	r2, r5, r2
    5b28:	0943      	lsrs	r3, r0, #5
    5b2a:	009b      	lsls	r3, r3, #2
    5b2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5b30:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b44:	601a      	str	r2, [r3, #0]
		irq++;
    5b46:	3001      	adds	r0, #1
    5b48:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    5b4a:	4281      	cmp	r1, r0
    5b4c:	d1e8      	bne.n	5b20 <_i2c_m_async_init+0x3c>
    5b4e:	e7db      	b.n	5b08 <_i2c_m_async_init+0x24>
    5b50:	0000b134 	.word	0x0000b134
    5b54:	00004519 	.word	0x00004519
    5b58:	000056a5 	.word	0x000056a5
    5b5c:	0000538d 	.word	0x0000538d
    5b60:	000053fd 	.word	0x000053fd

00005b64 <_i2c_m_async_transfer>:
{
    5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b68:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    5b6a:	4605      	mov	r5, r0
    5b6c:	f110 0800 	adds.w	r8, r0, #0
    5b70:	bf18      	it	ne
    5b72:	f04f 0801 	movne.w	r8, #1
    5b76:	4f45      	ldr	r7, [pc, #276]	; (5c8c <_i2c_m_async_transfer+0x128>)
    5b78:	f240 522e 	movw	r2, #1326	; 0x52e
    5b7c:	4639      	mov	r1, r7
    5b7e:	4640      	mov	r0, r8
    5b80:	4e43      	ldr	r6, [pc, #268]	; (5c90 <_i2c_m_async_transfer+0x12c>)
    5b82:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    5b84:	6928      	ldr	r0, [r5, #16]
    5b86:	f240 522f 	movw	r2, #1327	; 0x52f
    5b8a:	4639      	mov	r1, r7
    5b8c:	3000      	adds	r0, #0
    5b8e:	bf18      	it	ne
    5b90:	2001      	movne	r0, #1
    5b92:	47b0      	blx	r6
	ASSERT(msg);
    5b94:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    5b98:	4639      	mov	r1, r7
    5b9a:	1c20      	adds	r0, r4, #0
    5b9c:	bf18      	it	ne
    5b9e:	2001      	movne	r0, #1
    5ba0:	47b0      	blx	r6
	if (msg->len == 0) {
    5ba2:	6860      	ldr	r0, [r4, #4]
    5ba4:	2800      	cmp	r0, #0
    5ba6:	d06f      	beq.n	5c88 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    5ba8:	886b      	ldrh	r3, [r5, #2]
    5baa:	f413 7f80 	tst.w	r3, #256	; 0x100
    5bae:	d169      	bne.n	5c84 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    5bb0:	8863      	ldrh	r3, [r4, #2]
    5bb2:	b29b      	uxth	r3, r3
    5bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bb8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    5bba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    5bbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    5bc2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5bc4:	6853      	ldr	r3, [r2, #4]
    5bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bca:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5bcc:	69d3      	ldr	r3, [r2, #28]
    5bce:	f013 0f04 	tst.w	r3, #4
    5bd2:	d1fb      	bne.n	5bcc <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    5bd4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5bd6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    5bd8:	f240 5206 	movw	r2, #1286	; 0x506
    5bdc:	492b      	ldr	r1, [pc, #172]	; (5c8c <_i2c_m_async_transfer+0x128>)
    5bde:	4640      	mov	r0, r8
    5be0:	4b2b      	ldr	r3, [pc, #172]	; (5c90 <_i2c_m_async_transfer+0x12c>)
    5be2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    5be4:	686b      	ldr	r3, [r5, #4]
    5be6:	2b01      	cmp	r3, #1
    5be8:	d02a      	beq.n	5c40 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5bea:	6863      	ldr	r3, [r4, #4]
    5bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    5bf0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5bf2:	69e3      	ldr	r3, [r4, #28]
    5bf4:	f013 0f04 	tst.w	r3, #4
    5bf8:	d1fb      	bne.n	5bf2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    5bfa:	882b      	ldrh	r3, [r5, #0]
    5bfc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5c00:	d02a      	beq.n	5c58 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    5c02:	886a      	ldrh	r2, [r5, #2]
    5c04:	f012 0f01 	tst.w	r2, #1
    5c08:	d004      	beq.n	5c14 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    5c0a:	886a      	ldrh	r2, [r5, #2]
    5c0c:	b292      	uxth	r2, r2
    5c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    5c12:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5c14:	f240 72fe 	movw	r2, #2046	; 0x7fe
    5c18:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    5c1c:	69e3      	ldr	r3, [r4, #28]
    5c1e:	f013 0f04 	tst.w	r3, #4
    5c22:	d1fb      	bne.n	5c1c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    5c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5c2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5c30:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c32:	69e3      	ldr	r3, [r4, #28]
    5c34:	f013 0f04 	tst.w	r3, #4
    5c38:	d1fb      	bne.n	5c32 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    5c3a:	2000      	movs	r0, #0
    5c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    5c40:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    5c44:	d0d1      	beq.n	5bea <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5c46:	6863      	ldr	r3, [r4, #4]
    5c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    5c4c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c4e:	69e3      	ldr	r3, [r4, #28]
    5c50:	f013 0f04 	tst.w	r3, #4
    5c54:	d1fb      	bne.n	5c4e <_i2c_m_async_transfer+0xea>
    5c56:	e7d0      	b.n	5bfa <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    5c58:	8869      	ldrh	r1, [r5, #2]
    5c5a:	005a      	lsls	r2, r3, #1
    5c5c:	b2d2      	uxtb	r2, r2
    5c5e:	f001 0301 	and.w	r3, r1, #1
    5c62:	431a      	orrs	r2, r3
    5c64:	69e3      	ldr	r3, [r4, #28]
    5c66:	f013 0f04 	tst.w	r3, #4
    5c6a:	d1fb      	bne.n	5c64 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    5c72:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5c74:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c76:	69e3      	ldr	r3, [r4, #28]
    5c78:	f013 0f04 	tst.w	r3, #4
    5c7c:	d1fb      	bne.n	5c76 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    5c7e:	2000      	movs	r0, #0
    5c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    5c84:	f06f 0003 	mvn.w	r0, #3
}
    5c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c8c:	0000b134 	.word	0x0000b134
    5c90:	00004519 	.word	0x00004519

00005c94 <_i2c_m_async_register_callback>:
	switch (type) {
    5c94:	2901      	cmp	r1, #1
    5c96:	d006      	beq.n	5ca6 <_i2c_m_async_register_callback+0x12>
    5c98:	b119      	cbz	r1, 5ca2 <_i2c_m_async_register_callback+0xe>
    5c9a:	2902      	cmp	r1, #2
    5c9c:	d005      	beq.n	5caa <_i2c_m_async_register_callback+0x16>
}
    5c9e:	2000      	movs	r0, #0
    5ca0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    5ca2:	6142      	str	r2, [r0, #20]
		break;
    5ca4:	e7fb      	b.n	5c9e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    5ca6:	6182      	str	r2, [r0, #24]
		break;
    5ca8:	e7f9      	b.n	5c9e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    5caa:	61c2      	str	r2, [r0, #28]
		break;
    5cac:	e7f7      	b.n	5c9e <_i2c_m_async_register_callback+0xa>
	...

00005cb0 <SERCOM0_0_Handler>:
{
    5cb0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    5cb2:	4b02      	ldr	r3, [pc, #8]	; (5cbc <SERCOM0_0_Handler+0xc>)
    5cb4:	6818      	ldr	r0, [r3, #0]
    5cb6:	4b02      	ldr	r3, [pc, #8]	; (5cc0 <SERCOM0_0_Handler+0x10>)
    5cb8:	4798      	blx	r3
    5cba:	bd08      	pop	{r3, pc}
    5cbc:	20000d88 	.word	0x20000d88
    5cc0:	0000531d 	.word	0x0000531d

00005cc4 <SERCOM0_1_Handler>:
{
    5cc4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    5cc6:	4b02      	ldr	r3, [pc, #8]	; (5cd0 <SERCOM0_1_Handler+0xc>)
    5cc8:	6818      	ldr	r0, [r3, #0]
    5cca:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <SERCOM0_1_Handler+0x10>)
    5ccc:	4798      	blx	r3
    5cce:	bd08      	pop	{r3, pc}
    5cd0:	20000d88 	.word	0x20000d88
    5cd4:	0000531d 	.word	0x0000531d

00005cd8 <SERCOM0_2_Handler>:
{
    5cd8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    5cda:	4b02      	ldr	r3, [pc, #8]	; (5ce4 <SERCOM0_2_Handler+0xc>)
    5cdc:	6818      	ldr	r0, [r3, #0]
    5cde:	4b02      	ldr	r3, [pc, #8]	; (5ce8 <SERCOM0_2_Handler+0x10>)
    5ce0:	4798      	blx	r3
    5ce2:	bd08      	pop	{r3, pc}
    5ce4:	20000d88 	.word	0x20000d88
    5ce8:	0000531d 	.word	0x0000531d

00005cec <SERCOM0_3_Handler>:
{
    5cec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    5cee:	4b02      	ldr	r3, [pc, #8]	; (5cf8 <SERCOM0_3_Handler+0xc>)
    5cf0:	6818      	ldr	r0, [r3, #0]
    5cf2:	4b02      	ldr	r3, [pc, #8]	; (5cfc <SERCOM0_3_Handler+0x10>)
    5cf4:	4798      	blx	r3
    5cf6:	bd08      	pop	{r3, pc}
    5cf8:	20000d88 	.word	0x20000d88
    5cfc:	0000531d 	.word	0x0000531d

00005d00 <SERCOM1_0_Handler>:
{
    5d00:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    5d02:	4b02      	ldr	r3, [pc, #8]	; (5d0c <SERCOM1_0_Handler+0xc>)
    5d04:	6858      	ldr	r0, [r3, #4]
    5d06:	4b02      	ldr	r3, [pc, #8]	; (5d10 <SERCOM1_0_Handler+0x10>)
    5d08:	4798      	blx	r3
    5d0a:	bd08      	pop	{r3, pc}
    5d0c:	20000d88 	.word	0x20000d88
    5d10:	0000531d 	.word	0x0000531d

00005d14 <SERCOM1_1_Handler>:
{
    5d14:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    5d16:	4b02      	ldr	r3, [pc, #8]	; (5d20 <SERCOM1_1_Handler+0xc>)
    5d18:	6858      	ldr	r0, [r3, #4]
    5d1a:	4b02      	ldr	r3, [pc, #8]	; (5d24 <SERCOM1_1_Handler+0x10>)
    5d1c:	4798      	blx	r3
    5d1e:	bd08      	pop	{r3, pc}
    5d20:	20000d88 	.word	0x20000d88
    5d24:	0000531d 	.word	0x0000531d

00005d28 <SERCOM1_2_Handler>:
{
    5d28:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    5d2a:	4b02      	ldr	r3, [pc, #8]	; (5d34 <SERCOM1_2_Handler+0xc>)
    5d2c:	6858      	ldr	r0, [r3, #4]
    5d2e:	4b02      	ldr	r3, [pc, #8]	; (5d38 <SERCOM1_2_Handler+0x10>)
    5d30:	4798      	blx	r3
    5d32:	bd08      	pop	{r3, pc}
    5d34:	20000d88 	.word	0x20000d88
    5d38:	0000531d 	.word	0x0000531d

00005d3c <SERCOM1_3_Handler>:
{
    5d3c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    5d3e:	4b02      	ldr	r3, [pc, #8]	; (5d48 <SERCOM1_3_Handler+0xc>)
    5d40:	6858      	ldr	r0, [r3, #4]
    5d42:	4b02      	ldr	r3, [pc, #8]	; (5d4c <SERCOM1_3_Handler+0x10>)
    5d44:	4798      	blx	r3
    5d46:	bd08      	pop	{r3, pc}
    5d48:	20000d88 	.word	0x20000d88
    5d4c:	0000531d 	.word	0x0000531d

00005d50 <SERCOM2_0_Handler>:
{
    5d50:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    5d52:	4b02      	ldr	r3, [pc, #8]	; (5d5c <SERCOM2_0_Handler+0xc>)
    5d54:	6898      	ldr	r0, [r3, #8]
    5d56:	4b02      	ldr	r3, [pc, #8]	; (5d60 <SERCOM2_0_Handler+0x10>)
    5d58:	4798      	blx	r3
    5d5a:	bd08      	pop	{r3, pc}
    5d5c:	20000d88 	.word	0x20000d88
    5d60:	0000531d 	.word	0x0000531d

00005d64 <SERCOM2_1_Handler>:
{
    5d64:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    5d66:	4b02      	ldr	r3, [pc, #8]	; (5d70 <SERCOM2_1_Handler+0xc>)
    5d68:	6898      	ldr	r0, [r3, #8]
    5d6a:	4b02      	ldr	r3, [pc, #8]	; (5d74 <SERCOM2_1_Handler+0x10>)
    5d6c:	4798      	blx	r3
    5d6e:	bd08      	pop	{r3, pc}
    5d70:	20000d88 	.word	0x20000d88
    5d74:	0000531d 	.word	0x0000531d

00005d78 <SERCOM2_2_Handler>:
{
    5d78:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    5d7a:	4b02      	ldr	r3, [pc, #8]	; (5d84 <SERCOM2_2_Handler+0xc>)
    5d7c:	6898      	ldr	r0, [r3, #8]
    5d7e:	4b02      	ldr	r3, [pc, #8]	; (5d88 <SERCOM2_2_Handler+0x10>)
    5d80:	4798      	blx	r3
    5d82:	bd08      	pop	{r3, pc}
    5d84:	20000d88 	.word	0x20000d88
    5d88:	0000531d 	.word	0x0000531d

00005d8c <SERCOM2_3_Handler>:
{
    5d8c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    5d8e:	4b02      	ldr	r3, [pc, #8]	; (5d98 <SERCOM2_3_Handler+0xc>)
    5d90:	6898      	ldr	r0, [r3, #8]
    5d92:	4b02      	ldr	r3, [pc, #8]	; (5d9c <SERCOM2_3_Handler+0x10>)
    5d94:	4798      	blx	r3
    5d96:	bd08      	pop	{r3, pc}
    5d98:	20000d88 	.word	0x20000d88
    5d9c:	0000531d 	.word	0x0000531d

00005da0 <SERCOM3_0_Handler>:
{
    5da0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    5da2:	4b02      	ldr	r3, [pc, #8]	; (5dac <SERCOM3_0_Handler+0xc>)
    5da4:	68d8      	ldr	r0, [r3, #12]
    5da6:	4b02      	ldr	r3, [pc, #8]	; (5db0 <SERCOM3_0_Handler+0x10>)
    5da8:	4798      	blx	r3
    5daa:	bd08      	pop	{r3, pc}
    5dac:	20000d88 	.word	0x20000d88
    5db0:	000054a7 	.word	0x000054a7

00005db4 <SERCOM3_1_Handler>:
{
    5db4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    5db6:	4b02      	ldr	r3, [pc, #8]	; (5dc0 <SERCOM3_1_Handler+0xc>)
    5db8:	68d8      	ldr	r0, [r3, #12]
    5dba:	4b02      	ldr	r3, [pc, #8]	; (5dc4 <SERCOM3_1_Handler+0x10>)
    5dbc:	4798      	blx	r3
    5dbe:	bd08      	pop	{r3, pc}
    5dc0:	20000d88 	.word	0x20000d88
    5dc4:	000054a7 	.word	0x000054a7

00005dc8 <SERCOM3_2_Handler>:
{
    5dc8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    5dca:	4b02      	ldr	r3, [pc, #8]	; (5dd4 <SERCOM3_2_Handler+0xc>)
    5dcc:	68d8      	ldr	r0, [r3, #12]
    5dce:	4b02      	ldr	r3, [pc, #8]	; (5dd8 <SERCOM3_2_Handler+0x10>)
    5dd0:	4798      	blx	r3
    5dd2:	bd08      	pop	{r3, pc}
    5dd4:	20000d88 	.word	0x20000d88
    5dd8:	000054a7 	.word	0x000054a7

00005ddc <SERCOM3_3_Handler>:
{
    5ddc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    5dde:	4b02      	ldr	r3, [pc, #8]	; (5de8 <SERCOM3_3_Handler+0xc>)
    5de0:	68d8      	ldr	r0, [r3, #12]
    5de2:	4b02      	ldr	r3, [pc, #8]	; (5dec <SERCOM3_3_Handler+0x10>)
    5de4:	4798      	blx	r3
    5de6:	bd08      	pop	{r3, pc}
    5de8:	20000d88 	.word	0x20000d88
    5dec:	000054a7 	.word	0x000054a7

00005df0 <SERCOM4_0_Handler>:
{
    5df0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    5df2:	4b02      	ldr	r3, [pc, #8]	; (5dfc <SERCOM4_0_Handler+0xc>)
    5df4:	6918      	ldr	r0, [r3, #16]
    5df6:	4b02      	ldr	r3, [pc, #8]	; (5e00 <SERCOM4_0_Handler+0x10>)
    5df8:	4798      	blx	r3
    5dfa:	bd08      	pop	{r3, pc}
    5dfc:	20000d88 	.word	0x20000d88
    5e00:	0000531d 	.word	0x0000531d

00005e04 <SERCOM4_1_Handler>:
{
    5e04:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    5e06:	4b02      	ldr	r3, [pc, #8]	; (5e10 <SERCOM4_1_Handler+0xc>)
    5e08:	6918      	ldr	r0, [r3, #16]
    5e0a:	4b02      	ldr	r3, [pc, #8]	; (5e14 <SERCOM4_1_Handler+0x10>)
    5e0c:	4798      	blx	r3
    5e0e:	bd08      	pop	{r3, pc}
    5e10:	20000d88 	.word	0x20000d88
    5e14:	0000531d 	.word	0x0000531d

00005e18 <SERCOM4_2_Handler>:
{
    5e18:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    5e1a:	4b02      	ldr	r3, [pc, #8]	; (5e24 <SERCOM4_2_Handler+0xc>)
    5e1c:	6918      	ldr	r0, [r3, #16]
    5e1e:	4b02      	ldr	r3, [pc, #8]	; (5e28 <SERCOM4_2_Handler+0x10>)
    5e20:	4798      	blx	r3
    5e22:	bd08      	pop	{r3, pc}
    5e24:	20000d88 	.word	0x20000d88
    5e28:	0000531d 	.word	0x0000531d

00005e2c <SERCOM4_3_Handler>:
{
    5e2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    5e2e:	4b02      	ldr	r3, [pc, #8]	; (5e38 <SERCOM4_3_Handler+0xc>)
    5e30:	6918      	ldr	r0, [r3, #16]
    5e32:	4b02      	ldr	r3, [pc, #8]	; (5e3c <SERCOM4_3_Handler+0x10>)
    5e34:	4798      	blx	r3
    5e36:	bd08      	pop	{r3, pc}
    5e38:	20000d88 	.word	0x20000d88
    5e3c:	0000531d 	.word	0x0000531d

00005e40 <SERCOM5_0_Handler>:
{
    5e40:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    5e42:	4b02      	ldr	r3, [pc, #8]	; (5e4c <SERCOM5_0_Handler+0xc>)
    5e44:	6958      	ldr	r0, [r3, #20]
    5e46:	4b02      	ldr	r3, [pc, #8]	; (5e50 <SERCOM5_0_Handler+0x10>)
    5e48:	4798      	blx	r3
    5e4a:	bd08      	pop	{r3, pc}
    5e4c:	20000d88 	.word	0x20000d88
    5e50:	00005789 	.word	0x00005789

00005e54 <SERCOM5_1_Handler>:
{
    5e54:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    5e56:	4b02      	ldr	r3, [pc, #8]	; (5e60 <SERCOM5_1_Handler+0xc>)
    5e58:	6958      	ldr	r0, [r3, #20]
    5e5a:	4b02      	ldr	r3, [pc, #8]	; (5e64 <SERCOM5_1_Handler+0x10>)
    5e5c:	4798      	blx	r3
    5e5e:	bd08      	pop	{r3, pc}
    5e60:	20000d88 	.word	0x20000d88
    5e64:	00005789 	.word	0x00005789

00005e68 <SERCOM5_2_Handler>:
{
    5e68:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    5e6a:	4b02      	ldr	r3, [pc, #8]	; (5e74 <SERCOM5_2_Handler+0xc>)
    5e6c:	6958      	ldr	r0, [r3, #20]
    5e6e:	4b02      	ldr	r3, [pc, #8]	; (5e78 <SERCOM5_2_Handler+0x10>)
    5e70:	4798      	blx	r3
    5e72:	bd08      	pop	{r3, pc}
    5e74:	20000d88 	.word	0x20000d88
    5e78:	00005789 	.word	0x00005789

00005e7c <SERCOM5_3_Handler>:
{
    5e7c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    5e7e:	4b02      	ldr	r3, [pc, #8]	; (5e88 <SERCOM5_3_Handler+0xc>)
    5e80:	6958      	ldr	r0, [r3, #20]
    5e82:	4b02      	ldr	r3, [pc, #8]	; (5e8c <SERCOM5_3_Handler+0x10>)
    5e84:	4798      	blx	r3
    5e86:	bd08      	pop	{r3, pc}
    5e88:	20000d88 	.word	0x20000d88
    5e8c:	00005789 	.word	0x00005789

00005e90 <SERCOM6_0_Handler>:
{
    5e90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    5e92:	4b02      	ldr	r3, [pc, #8]	; (5e9c <SERCOM6_0_Handler+0xc>)
    5e94:	6998      	ldr	r0, [r3, #24]
    5e96:	4b02      	ldr	r3, [pc, #8]	; (5ea0 <SERCOM6_0_Handler+0x10>)
    5e98:	4798      	blx	r3
    5e9a:	bd08      	pop	{r3, pc}
    5e9c:	20000d88 	.word	0x20000d88
    5ea0:	0000531d 	.word	0x0000531d

00005ea4 <SERCOM6_1_Handler>:
{
    5ea4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    5ea6:	4b02      	ldr	r3, [pc, #8]	; (5eb0 <SERCOM6_1_Handler+0xc>)
    5ea8:	6998      	ldr	r0, [r3, #24]
    5eaa:	4b02      	ldr	r3, [pc, #8]	; (5eb4 <SERCOM6_1_Handler+0x10>)
    5eac:	4798      	blx	r3
    5eae:	bd08      	pop	{r3, pc}
    5eb0:	20000d88 	.word	0x20000d88
    5eb4:	0000531d 	.word	0x0000531d

00005eb8 <SERCOM6_2_Handler>:
{
    5eb8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    5eba:	4b02      	ldr	r3, [pc, #8]	; (5ec4 <SERCOM6_2_Handler+0xc>)
    5ebc:	6998      	ldr	r0, [r3, #24]
    5ebe:	4b02      	ldr	r3, [pc, #8]	; (5ec8 <SERCOM6_2_Handler+0x10>)
    5ec0:	4798      	blx	r3
    5ec2:	bd08      	pop	{r3, pc}
    5ec4:	20000d88 	.word	0x20000d88
    5ec8:	0000531d 	.word	0x0000531d

00005ecc <SERCOM6_3_Handler>:
{
    5ecc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    5ece:	4b02      	ldr	r3, [pc, #8]	; (5ed8 <SERCOM6_3_Handler+0xc>)
    5ed0:	6998      	ldr	r0, [r3, #24]
    5ed2:	4b02      	ldr	r3, [pc, #8]	; (5edc <SERCOM6_3_Handler+0x10>)
    5ed4:	4798      	blx	r3
    5ed6:	bd08      	pop	{r3, pc}
    5ed8:	20000d88 	.word	0x20000d88
    5edc:	0000531d 	.word	0x0000531d

00005ee0 <_spi_m_sync_init>:
{
    5ee0:	b570      	push	{r4, r5, r6, lr}
    5ee2:	4606      	mov	r6, r0
    5ee4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    5ee6:	4608      	mov	r0, r1
    5ee8:	4b5d      	ldr	r3, [pc, #372]	; (6060 <_spi_m_sync_init+0x180>)
    5eea:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    5eec:	2803      	cmp	r0, #3
    5eee:	d00c      	beq.n	5f0a <_spi_m_sync_init+0x2a>
    5ef0:	2807      	cmp	r0, #7
    5ef2:	bf08      	it	eq
    5ef4:	2301      	moveq	r3, #1
    5ef6:	d009      	beq.n	5f0c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    5ef8:	2e00      	cmp	r6, #0
    5efa:	f000 809f 	beq.w	603c <_spi_m_sync_init+0x15c>
    5efe:	2c00      	cmp	r4, #0
    5f00:	f040 80a5 	bne.w	604e <_spi_m_sync_init+0x16e>
	return NULL;
    5f04:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    5f06:	2000      	movs	r0, #0
    5f08:	e009      	b.n	5f1e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    5f0a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    5f0c:	4d55      	ldr	r5, [pc, #340]	; (6064 <_spi_m_sync_init+0x184>)
    5f0e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    5f12:	441d      	add	r5, r3
	ASSERT(dev && hw);
    5f14:	2e00      	cmp	r6, #0
    5f16:	d0f6      	beq.n	5f06 <_spi_m_sync_init+0x26>
    5f18:	2001      	movs	r0, #1
    5f1a:	2c00      	cmp	r4, #0
    5f1c:	d0f3      	beq.n	5f06 <_spi_m_sync_init+0x26>
    5f1e:	f640 2291 	movw	r2, #2705	; 0xa91
    5f22:	4951      	ldr	r1, [pc, #324]	; (6068 <_spi_m_sync_init+0x188>)
    5f24:	4b51      	ldr	r3, [pc, #324]	; (606c <_spi_m_sync_init+0x18c>)
    5f26:	4798      	blx	r3
	if (regs == NULL) {
    5f28:	2d00      	cmp	r5, #0
    5f2a:	f000 8084 	beq.w	6036 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5f2e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    5f30:	f013 0f01 	tst.w	r3, #1
    5f34:	d11d      	bne.n	5f72 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    5f36:	682b      	ldr	r3, [r5, #0]
    5f38:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5f3c:	69e3      	ldr	r3, [r4, #28]
    5f3e:	f013 0f03 	tst.w	r3, #3
    5f42:	d1fb      	bne.n	5f3c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5f44:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    5f46:	f013 0f02 	tst.w	r3, #2
    5f4a:	d00b      	beq.n	5f64 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5f4c:	6823      	ldr	r3, [r4, #0]
    5f4e:	f023 0302 	bic.w	r3, r3, #2
    5f52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5f54:	69e3      	ldr	r3, [r4, #28]
    5f56:	f013 0f03 	tst.w	r3, #3
    5f5a:	d1fb      	bne.n	5f54 <_spi_m_sync_init+0x74>
    5f5c:	69e3      	ldr	r3, [r4, #28]
    5f5e:	f013 0f02 	tst.w	r3, #2
    5f62:	d1fb      	bne.n	5f5c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    5f64:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5f68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5f6a:	69e3      	ldr	r3, [r4, #28]
    5f6c:	f013 0f03 	tst.w	r3, #3
    5f70:	d1fb      	bne.n	5f6a <_spi_m_sync_init+0x8a>
    5f72:	69e3      	ldr	r3, [r4, #28]
    5f74:	f013 0f01 	tst.w	r3, #1
    5f78:	d1fb      	bne.n	5f72 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    5f7a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    5f7c:	682b      	ldr	r3, [r5, #0]
    5f7e:	f003 031c 	and.w	r3, r3, #28
    5f82:	2b08      	cmp	r3, #8
    5f84:	d02e      	beq.n	5fe4 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    5f86:	f640 1276 	movw	r2, #2422	; 0x976
    5f8a:	4937      	ldr	r1, [pc, #220]	; (6068 <_spi_m_sync_init+0x188>)
    5f8c:	1c20      	adds	r0, r4, #0
    5f8e:	bf18      	it	ne
    5f90:	2001      	movne	r0, #1
    5f92:	4b36      	ldr	r3, [pc, #216]	; (606c <_spi_m_sync_init+0x18c>)
    5f94:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    5f96:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    5f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    5f9c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5fa0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5fa2:	69e3      	ldr	r3, [r4, #28]
    5fa4:	f013 0f03 	tst.w	r3, #3
    5fa8:	d1fb      	bne.n	5fa2 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    5faa:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    5fac:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    5fb0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    5fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5fb8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5fba:	69e3      	ldr	r3, [r4, #28]
    5fbc:	f013 0f17 	tst.w	r3, #23
    5fc0:	d1fb      	bne.n	5fba <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    5fc2:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5fc4:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    5fc6:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5fc8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    5fcc:	686b      	ldr	r3, [r5, #4]
    5fce:	f003 0307 	and.w	r3, r3, #7
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	bf0c      	ite	eq
    5fd6:	2301      	moveq	r3, #1
    5fd8:	2302      	movne	r3, #2
    5fda:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    5fdc:	89eb      	ldrh	r3, [r5, #14]
    5fde:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    5fe0:	2000      	movs	r0, #0
    5fe2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    5fe4:	f640 128a 	movw	r2, #2442	; 0x98a
    5fe8:	491f      	ldr	r1, [pc, #124]	; (6068 <_spi_m_sync_init+0x188>)
    5fea:	1c20      	adds	r0, r4, #0
    5fec:	bf18      	it	ne
    5fee:	2001      	movne	r0, #1
    5ff0:	4b1e      	ldr	r3, [pc, #120]	; (606c <_spi_m_sync_init+0x18c>)
    5ff2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    5ff4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    5ff6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    5ffa:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5ffe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6000:	69e3      	ldr	r3, [r4, #28]
    6002:	f013 0f03 	tst.w	r3, #3
    6006:	d1fb      	bne.n	6000 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6008:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    600a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    600e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6016:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    601a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    601c:	69e3      	ldr	r3, [r4, #28]
    601e:	f013 0f17 	tst.w	r3, #23
    6022:	d1fb      	bne.n	601c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6024:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6026:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6028:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    602a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    602e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6030:	2b00      	cmp	r3, #0
    6032:	d1fc      	bne.n	602e <_spi_m_sync_init+0x14e>
    6034:	e7ca      	b.n	5fcc <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    6036:	f06f 000c 	mvn.w	r0, #12
    603a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    603c:	f640 2291 	movw	r2, #2705	; 0xa91
    6040:	4909      	ldr	r1, [pc, #36]	; (6068 <_spi_m_sync_init+0x188>)
    6042:	2000      	movs	r0, #0
    6044:	4b09      	ldr	r3, [pc, #36]	; (606c <_spi_m_sync_init+0x18c>)
    6046:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6048:	f06f 000c 	mvn.w	r0, #12
    604c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    604e:	f640 2291 	movw	r2, #2705	; 0xa91
    6052:	4905      	ldr	r1, [pc, #20]	; (6068 <_spi_m_sync_init+0x188>)
    6054:	2001      	movs	r0, #1
    6056:	4b05      	ldr	r3, [pc, #20]	; (606c <_spi_m_sync_init+0x18c>)
    6058:	4798      	blx	r3
		return ERR_INVALID_ARG;
    605a:	f06f 000c 	mvn.w	r0, #12
    605e:	bd70      	pop	{r4, r5, r6, pc}
    6060:	000052d9 	.word	0x000052d9
    6064:	0000b110 	.word	0x0000b110
    6068:	0000b134 	.word	0x0000b134
    606c:	00004519 	.word	0x00004519

00006070 <_spi_m_async_init>:
{
    6070:	b538      	push	{r3, r4, r5, lr}
    6072:	4604      	mov	r4, r0
    6074:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6076:	4b15      	ldr	r3, [pc, #84]	; (60cc <_spi_m_async_init+0x5c>)
    6078:	4798      	blx	r3
	if (rc < 0) {
    607a:	2800      	cmp	r0, #0
    607c:	db24      	blt.n	60c8 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    607e:	4621      	mov	r1, r4
    6080:	4628      	mov	r0, r5
    6082:	4b13      	ldr	r3, [pc, #76]	; (60d0 <_spi_m_async_init+0x60>)
    6084:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    6086:	2300      	movs	r3, #0
    6088:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    608a:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    608c:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    608e:	4628      	mov	r0, r5
    6090:	4b10      	ldr	r3, [pc, #64]	; (60d4 <_spi_m_async_init+0x64>)
    6092:	4798      	blx	r3
    6094:	1d01      	adds	r1, r0, #4
    6096:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6098:	2401      	movs	r4, #1
    609a:	f000 021f 	and.w	r2, r0, #31
    609e:	fa04 f202 	lsl.w	r2, r4, r2
    60a2:	0943      	lsrs	r3, r0, #5
    60a4:	009b      	lsls	r3, r3, #2
    60a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    60aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    60ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    60b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    60b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    60be:	3001      	adds	r0, #1
    60c0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    60c2:	4281      	cmp	r1, r0
    60c4:	d1e9      	bne.n	609a <_spi_m_async_init+0x2a>
	return ERR_NONE;
    60c6:	2000      	movs	r0, #0
}
    60c8:	bd38      	pop	{r3, r4, r5, pc}
    60ca:	bf00      	nop
    60cc:	00005ee1 	.word	0x00005ee1
    60d0:	0000538d 	.word	0x0000538d
    60d4:	000053fd 	.word	0x000053fd

000060d8 <_spi_m_async_enable>:
{
    60d8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    60da:	4604      	mov	r4, r0
    60dc:	b160      	cbz	r0, 60f8 <_spi_m_async_enable+0x20>
    60de:	6800      	ldr	r0, [r0, #0]
    60e0:	3000      	adds	r0, #0
    60e2:	bf18      	it	ne
    60e4:	2001      	movne	r0, #1
    60e6:	f640 22fe 	movw	r2, #2814	; 0xafe
    60ea:	4904      	ldr	r1, [pc, #16]	; (60fc <_spi_m_async_enable+0x24>)
    60ec:	4b04      	ldr	r3, [pc, #16]	; (6100 <_spi_m_async_enable+0x28>)
    60ee:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    60f0:	6820      	ldr	r0, [r4, #0]
    60f2:	4b04      	ldr	r3, [pc, #16]	; (6104 <_spi_m_async_enable+0x2c>)
    60f4:	4798      	blx	r3
}
    60f6:	bd10      	pop	{r4, pc}
    60f8:	2000      	movs	r0, #0
    60fa:	e7f4      	b.n	60e6 <_spi_m_async_enable+0xe>
    60fc:	0000b134 	.word	0x0000b134
    6100:	00004519 	.word	0x00004519
    6104:	00005435 	.word	0x00005435

00006108 <_spi_m_async_set_mode>:
{
    6108:	b538      	push	{r3, r4, r5, lr}
    610a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    610c:	4604      	mov	r4, r0
    610e:	b168      	cbz	r0, 612c <_spi_m_async_set_mode+0x24>
    6110:	6800      	ldr	r0, [r0, #0]
    6112:	3000      	adds	r0, #0
    6114:	bf18      	it	ne
    6116:	2001      	movne	r0, #1
    6118:	f640 322f 	movw	r2, #2863	; 0xb2f
    611c:	4904      	ldr	r1, [pc, #16]	; (6130 <_spi_m_async_set_mode+0x28>)
    611e:	4b05      	ldr	r3, [pc, #20]	; (6134 <_spi_m_async_set_mode+0x2c>)
    6120:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    6122:	4629      	mov	r1, r5
    6124:	6820      	ldr	r0, [r4, #0]
    6126:	4b04      	ldr	r3, [pc, #16]	; (6138 <_spi_m_async_set_mode+0x30>)
    6128:	4798      	blx	r3
}
    612a:	bd38      	pop	{r3, r4, r5, pc}
    612c:	2000      	movs	r0, #0
    612e:	e7f3      	b.n	6118 <_spi_m_async_set_mode+0x10>
    6130:	0000b134 	.word	0x0000b134
    6134:	00004519 	.word	0x00004519
    6138:	00005475 	.word	0x00005475

0000613c <_spi_m_async_enable_tx>:
{
    613c:	b538      	push	{r3, r4, r5, lr}
    613e:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    6140:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    6142:	b160      	cbz	r0, 615e <_spi_m_async_enable_tx+0x22>
    6144:	1c20      	adds	r0, r4, #0
    6146:	bf18      	it	ne
    6148:	2001      	movne	r0, #1
    614a:	f640 4221 	movw	r2, #3105	; 0xc21
    614e:	4906      	ldr	r1, [pc, #24]	; (6168 <_spi_m_async_enable_tx+0x2c>)
    6150:	4b06      	ldr	r3, [pc, #24]	; (616c <_spi_m_async_enable_tx+0x30>)
    6152:	4798      	blx	r3
	if (state) {
    6154:	b92d      	cbnz	r5, 6162 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    6156:	2301      	movs	r3, #1
    6158:	7523      	strb	r3, [r4, #20]
}
    615a:	2000      	movs	r0, #0
    615c:	bd38      	pop	{r3, r4, r5, pc}
    615e:	2000      	movs	r0, #0
    6160:	e7f3      	b.n	614a <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    6162:	2301      	movs	r3, #1
    6164:	75a3      	strb	r3, [r4, #22]
    6166:	e7f8      	b.n	615a <_spi_m_async_enable_tx+0x1e>
    6168:	0000b134 	.word	0x0000b134
    616c:	00004519 	.word	0x00004519

00006170 <_spi_m_async_enable_rx>:
{
    6170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6172:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    6174:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    6176:	4e0c      	ldr	r6, [pc, #48]	; (61a8 <_spi_m_async_enable_rx+0x38>)
    6178:	f640 4235 	movw	r2, #3125	; 0xc35
    617c:	4631      	mov	r1, r6
    617e:	3000      	adds	r0, #0
    6180:	bf18      	it	ne
    6182:	2001      	movne	r0, #1
    6184:	4d09      	ldr	r5, [pc, #36]	; (61ac <_spi_m_async_enable_rx+0x3c>)
    6186:	47a8      	blx	r5
	ASSERT(hw);
    6188:	f640 4236 	movw	r2, #3126	; 0xc36
    618c:	4631      	mov	r1, r6
    618e:	1c20      	adds	r0, r4, #0
    6190:	bf18      	it	ne
    6192:	2001      	movne	r0, #1
    6194:	47a8      	blx	r5
	if (state) {
    6196:	b91f      	cbnz	r7, 61a0 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    6198:	2304      	movs	r3, #4
    619a:	7523      	strb	r3, [r4, #20]
}
    619c:	2000      	movs	r0, #0
    619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    61a0:	2304      	movs	r3, #4
    61a2:	75a3      	strb	r3, [r4, #22]
    61a4:	e7fa      	b.n	619c <_spi_m_async_enable_rx+0x2c>
    61a6:	bf00      	nop
    61a8:	0000b134 	.word	0x0000b134
    61ac:	00004519 	.word	0x00004519

000061b0 <_spi_m_async_enable_tx_complete>:
{
    61b0:	b538      	push	{r3, r4, r5, lr}
    61b2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    61b4:	4604      	mov	r4, r0
    61b6:	b170      	cbz	r0, 61d6 <_spi_m_async_enable_tx_complete+0x26>
    61b8:	6800      	ldr	r0, [r0, #0]
    61ba:	3000      	adds	r0, #0
    61bc:	bf18      	it	ne
    61be:	2001      	movne	r0, #1
    61c0:	f640 4248 	movw	r2, #3144	; 0xc48
    61c4:	4907      	ldr	r1, [pc, #28]	; (61e4 <_spi_m_async_enable_tx_complete+0x34>)
    61c6:	4b08      	ldr	r3, [pc, #32]	; (61e8 <_spi_m_async_enable_tx_complete+0x38>)
    61c8:	4798      	blx	r3
	if (state) {
    61ca:	b935      	cbnz	r5, 61da <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    61cc:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    61ce:	2202      	movs	r2, #2
    61d0:	751a      	strb	r2, [r3, #20]
}
    61d2:	2000      	movs	r0, #0
    61d4:	bd38      	pop	{r3, r4, r5, pc}
    61d6:	2000      	movs	r0, #0
    61d8:	e7f2      	b.n	61c0 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    61da:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    61dc:	2202      	movs	r2, #2
    61de:	759a      	strb	r2, [r3, #22]
    61e0:	e7f7      	b.n	61d2 <_spi_m_async_enable_tx_complete+0x22>
    61e2:	bf00      	nop
    61e4:	0000b134 	.word	0x0000b134
    61e8:	00004519 	.word	0x00004519

000061ec <_spi_m_async_write_one>:
{
    61ec:	b538      	push	{r3, r4, r5, lr}
    61ee:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    61f0:	4604      	mov	r4, r0
    61f2:	b160      	cbz	r0, 620e <_spi_m_async_write_one+0x22>
    61f4:	6800      	ldr	r0, [r0, #0]
    61f6:	3000      	adds	r0, #0
    61f8:	bf18      	it	ne
    61fa:	2001      	movne	r0, #1
    61fc:	f640 425a 	movw	r2, #3162	; 0xc5a
    6200:	4904      	ldr	r1, [pc, #16]	; (6214 <_spi_m_async_write_one+0x28>)
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <_spi_m_async_write_one+0x2c>)
    6204:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6206:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    6208:	629d      	str	r5, [r3, #40]	; 0x28
}
    620a:	2000      	movs	r0, #0
    620c:	bd38      	pop	{r3, r4, r5, pc}
    620e:	2000      	movs	r0, #0
    6210:	e7f4      	b.n	61fc <_spi_m_async_write_one+0x10>
    6212:	bf00      	nop
    6214:	0000b134 	.word	0x0000b134
    6218:	00004519 	.word	0x00004519

0000621c <_spi_m_async_read_one>:
{
    621c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    621e:	4604      	mov	r4, r0
    6220:	b160      	cbz	r0, 623c <_spi_m_async_read_one+0x20>
    6222:	6800      	ldr	r0, [r0, #0]
    6224:	3000      	adds	r0, #0
    6226:	bf18      	it	ne
    6228:	2001      	movne	r0, #1
    622a:	f640 4275 	movw	r2, #3189	; 0xc75
    622e:	4904      	ldr	r1, [pc, #16]	; (6240 <_spi_m_async_read_one+0x24>)
    6230:	4b04      	ldr	r3, [pc, #16]	; (6244 <_spi_m_async_read_one+0x28>)
    6232:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6234:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6236:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6238:	b280      	uxth	r0, r0
    623a:	bd10      	pop	{r4, pc}
    623c:	2000      	movs	r0, #0
    623e:	e7f4      	b.n	622a <_spi_m_async_read_one+0xe>
    6240:	0000b134 	.word	0x0000b134
    6244:	00004519 	.word	0x00004519

00006248 <_spi_m_async_register_callback>:
{
    6248:	b570      	push	{r4, r5, r6, lr}
    624a:	460d      	mov	r5, r1
    624c:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    624e:	4604      	mov	r4, r0
    6250:	b168      	cbz	r0, 626e <_spi_m_async_register_callback+0x26>
    6252:	2903      	cmp	r1, #3
    6254:	bf8c      	ite	hi
    6256:	2000      	movhi	r0, #0
    6258:	2001      	movls	r0, #1
    625a:	f640 428e 	movw	r2, #3214	; 0xc8e
    625e:	4905      	ldr	r1, [pc, #20]	; (6274 <_spi_m_async_register_callback+0x2c>)
    6260:	4b05      	ldr	r3, [pc, #20]	; (6278 <_spi_m_async_register_callback+0x30>)
    6262:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    6264:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6268:	60a6      	str	r6, [r4, #8]
}
    626a:	2000      	movs	r0, #0
    626c:	bd70      	pop	{r4, r5, r6, pc}
    626e:	2000      	movs	r0, #0
    6270:	e7f3      	b.n	625a <_spi_m_async_register_callback+0x12>
    6272:	bf00      	nop
    6274:	0000b134 	.word	0x0000b134
    6278:	00004519 	.word	0x00004519

0000627c <_spi_m_async_set_irq_state>:
{
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	460c      	mov	r4, r1
    6280:	4615      	mov	r5, r2
	ASSERT(device);
    6282:	4606      	mov	r6, r0
    6284:	f640 42cf 	movw	r2, #3279	; 0xccf
    6288:	4908      	ldr	r1, [pc, #32]	; (62ac <_spi_m_async_set_irq_state+0x30>)
    628a:	3000      	adds	r0, #0
    628c:	bf18      	it	ne
    628e:	2001      	movne	r0, #1
    6290:	4b07      	ldr	r3, [pc, #28]	; (62b0 <_spi_m_async_set_irq_state+0x34>)
    6292:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    6294:	2c03      	cmp	r4, #3
    6296:	d000      	beq.n	629a <_spi_m_async_set_irq_state+0x1e>
    6298:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    629a:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    629c:	b115      	cbz	r5, 62a4 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    629e:	2280      	movs	r2, #128	; 0x80
    62a0:	759a      	strb	r2, [r3, #22]
}
    62a2:	e7f9      	b.n	6298 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    62a4:	2280      	movs	r2, #128	; 0x80
    62a6:	751a      	strb	r2, [r3, #20]
    62a8:	bd70      	pop	{r4, r5, r6, pc}
    62aa:	bf00      	nop
    62ac:	0000b134 	.word	0x0000b134
    62b0:	00004519 	.word	0x00004519

000062b4 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    62b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62b8:	4605      	mov	r5, r0
    62ba:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    62bc:	4608      	mov	r0, r1
    62be:	4b52      	ldr	r3, [pc, #328]	; (6408 <_spi_m_dma_init+0x154>)
    62c0:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    62c2:	2803      	cmp	r0, #3
    62c4:	d00c      	beq.n	62e0 <_spi_m_dma_init+0x2c>
    62c6:	2807      	cmp	r0, #7
    62c8:	bf08      	it	eq
    62ca:	2301      	moveq	r3, #1
    62cc:	d009      	beq.n	62e2 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    62ce:	2d00      	cmp	r5, #0
    62d0:	f000 8086 	beq.w	63e0 <_spi_m_dma_init+0x12c>
    62d4:	2c00      	cmp	r4, #0
    62d6:	f040 808d 	bne.w	63f4 <_spi_m_dma_init+0x140>
	return NULL;
    62da:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    62dc:	2000      	movs	r0, #0
    62de:	e009      	b.n	62f4 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    62e0:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    62e2:	4e4a      	ldr	r6, [pc, #296]	; (640c <_spi_m_dma_init+0x158>)
    62e4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    62e8:	441e      	add	r6, r3
	ASSERT(dev && hw);
    62ea:	2d00      	cmp	r5, #0
    62ec:	d0f6      	beq.n	62dc <_spi_m_dma_init+0x28>
    62ee:	2001      	movs	r0, #1
    62f0:	2c00      	cmp	r4, #0
    62f2:	d0f3      	beq.n	62dc <_spi_m_dma_init+0x28>
    62f4:	f640 52c3 	movw	r2, #3523	; 0xdc3
    62f8:	4945      	ldr	r1, [pc, #276]	; (6410 <_spi_m_dma_init+0x15c>)
    62fa:	4b46      	ldr	r3, [pc, #280]	; (6414 <_spi_m_dma_init+0x160>)
    62fc:	4798      	blx	r3

	if (regs == NULL) {
    62fe:	2e00      	cmp	r6, #0
    6300:	d06a      	beq.n	63d8 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6302:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6304:	f013 0f01 	tst.w	r3, #1
    6308:	d11d      	bne.n	6346 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    630a:	6833      	ldr	r3, [r6, #0]
    630c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6310:	69e3      	ldr	r3, [r4, #28]
    6312:	f013 0f03 	tst.w	r3, #3
    6316:	d1fb      	bne.n	6310 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6318:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    631a:	f013 0f02 	tst.w	r3, #2
    631e:	d00b      	beq.n	6338 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6320:	6823      	ldr	r3, [r4, #0]
    6322:	f023 0302 	bic.w	r3, r3, #2
    6326:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6328:	69e3      	ldr	r3, [r4, #28]
    632a:	f013 0f03 	tst.w	r3, #3
    632e:	d1fb      	bne.n	6328 <_spi_m_dma_init+0x74>
    6330:	69e3      	ldr	r3, [r4, #28]
    6332:	f013 0f02 	tst.w	r3, #2
    6336:	d1fb      	bne.n	6330 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6338:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    633c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    633e:	69e3      	ldr	r3, [r4, #28]
    6340:	f013 0f03 	tst.w	r3, #3
    6344:	d1fb      	bne.n	633e <_spi_m_dma_init+0x8a>
    6346:	69e3      	ldr	r3, [r4, #28]
    6348:	f013 0f01 	tst.w	r3, #1
    634c:	d1fb      	bne.n	6346 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    634e:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    6350:	f640 1276 	movw	r2, #2422	; 0x976
    6354:	492e      	ldr	r1, [pc, #184]	; (6410 <_spi_m_dma_init+0x15c>)
    6356:	1c20      	adds	r0, r4, #0
    6358:	bf18      	it	ne
    635a:	2001      	movne	r0, #1
    635c:	4b2d      	ldr	r3, [pc, #180]	; (6414 <_spi_m_dma_init+0x160>)
    635e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6360:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    6362:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6366:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    636a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    636c:	69e3      	ldr	r3, [r4, #28]
    636e:	f013 0f03 	tst.w	r3, #3
    6372:	d1fb      	bne.n	636c <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    6374:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    6376:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    637a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    637e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6382:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6384:	69e3      	ldr	r3, [r4, #28]
    6386:	f013 0f17 	tst.w	r3, #23
    638a:	d1fb      	bne.n	6384 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    638c:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    638e:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6390:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6392:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    6396:	f105 0818 	add.w	r8, r5, #24
    639a:	4620      	mov	r0, r4
    639c:	4b1e      	ldr	r3, [pc, #120]	; (6418 <_spi_m_dma_init+0x164>)
    639e:	4798      	blx	r3
    63a0:	4601      	mov	r1, r0
    63a2:	4640      	mov	r0, r8
    63a4:	4f1d      	ldr	r7, [pc, #116]	; (641c <_spi_m_dma_init+0x168>)
    63a6:	47b8      	blx	r7
	dev->resource->back                 = dev;
    63a8:	69ab      	ldr	r3, [r5, #24]
    63aa:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    63ac:	69ab      	ldr	r3, [r5, #24]
    63ae:	4a1c      	ldr	r2, [pc, #112]	; (6420 <_spi_m_dma_init+0x16c>)
    63b0:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    63b2:	69ab      	ldr	r3, [r5, #24]
    63b4:	4e1b      	ldr	r6, [pc, #108]	; (6424 <_spi_m_dma_init+0x170>)
    63b6:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    63b8:	4620      	mov	r0, r4
    63ba:	4b1b      	ldr	r3, [pc, #108]	; (6428 <_spi_m_dma_init+0x174>)
    63bc:	4798      	blx	r3
    63be:	4601      	mov	r1, r0
    63c0:	4640      	mov	r0, r8
    63c2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    63c4:	69ab      	ldr	r3, [r5, #24]
    63c6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    63c8:	69ab      	ldr	r3, [r5, #24]
    63ca:	4a18      	ldr	r2, [pc, #96]	; (642c <_spi_m_dma_init+0x178>)
    63cc:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    63ce:	69ab      	ldr	r3, [r5, #24]
    63d0:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    63d2:	2000      	movs	r0, #0
    63d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    63d8:	f06f 000c 	mvn.w	r0, #12
    63dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    63e0:	f640 52c3 	movw	r2, #3523	; 0xdc3
    63e4:	490a      	ldr	r1, [pc, #40]	; (6410 <_spi_m_dma_init+0x15c>)
    63e6:	2000      	movs	r0, #0
    63e8:	4b0a      	ldr	r3, [pc, #40]	; (6414 <_spi_m_dma_init+0x160>)
    63ea:	4798      	blx	r3
		return ERR_INVALID_ARG;
    63ec:	f06f 000c 	mvn.w	r0, #12
    63f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    63f4:	f640 52c3 	movw	r2, #3523	; 0xdc3
    63f8:	4905      	ldr	r1, [pc, #20]	; (6410 <_spi_m_dma_init+0x15c>)
    63fa:	2001      	movs	r0, #1
    63fc:	4b05      	ldr	r3, [pc, #20]	; (6414 <_spi_m_dma_init+0x160>)
    63fe:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6400:	f06f 000c 	mvn.w	r0, #12
    6404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6408:	000052d9 	.word	0x000052d9
    640c:	0000b110 	.word	0x0000b110
    6410:	0000b134 	.word	0x0000b134
    6414:	00004519 	.word	0x00004519
    6418:	00005509 	.word	0x00005509
    641c:	00004d9d 	.word	0x00004d9d
    6420:	0000551d 	.word	0x0000551d
    6424:	00005535 	.word	0x00005535
    6428:	000054f5 	.word	0x000054f5
    642c:	00005529 	.word	0x00005529

00006430 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    6430:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6432:	4604      	mov	r4, r0
    6434:	b160      	cbz	r0, 6450 <_spi_m_dma_enable+0x20>
    6436:	6800      	ldr	r0, [r0, #0]
    6438:	3000      	adds	r0, #0
    643a:	bf18      	it	ne
    643c:	2001      	movne	r0, #1
    643e:	f640 52ec 	movw	r2, #3564	; 0xdec
    6442:	4904      	ldr	r1, [pc, #16]	; (6454 <_spi_m_dma_enable+0x24>)
    6444:	4b04      	ldr	r3, [pc, #16]	; (6458 <_spi_m_dma_enable+0x28>)
    6446:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    6448:	6820      	ldr	r0, [r4, #0]
    644a:	4b04      	ldr	r3, [pc, #16]	; (645c <_spi_m_dma_enable+0x2c>)
    644c:	4798      	blx	r3
}
    644e:	bd10      	pop	{r4, pc}
    6450:	2000      	movs	r0, #0
    6452:	e7f4      	b.n	643e <_spi_m_dma_enable+0xe>
    6454:	0000b134 	.word	0x0000b134
    6458:	00004519 	.word	0x00004519
    645c:	00005411 	.word	0x00005411

00006460 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    6460:	b570      	push	{r4, r5, r6, lr}
    6462:	4605      	mov	r5, r0
    6464:	4614      	mov	r4, r2
	switch (type) {
    6466:	2901      	cmp	r1, #1
    6468:	d00e      	beq.n	6488 <_spi_m_dma_register_callback+0x28>
    646a:	b111      	cbz	r1, 6472 <_spi_m_dma_register_callback+0x12>
    646c:	2902      	cmp	r1, #2
    646e:	d016      	beq.n	649e <_spi_m_dma_register_callback+0x3e>
    6470:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    6472:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    6474:	6800      	ldr	r0, [r0, #0]
    6476:	4b13      	ldr	r3, [pc, #76]	; (64c4 <_spi_m_dma_register_callback+0x64>)
    6478:	4798      	blx	r3
    647a:	1c22      	adds	r2, r4, #0
    647c:	bf18      	it	ne
    647e:	2201      	movne	r2, #1
    6480:	2100      	movs	r1, #0
    6482:	4b11      	ldr	r3, [pc, #68]	; (64c8 <_spi_m_dma_register_callback+0x68>)
    6484:	4798      	blx	r3
		break;
    6486:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    6488:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    648a:	6800      	ldr	r0, [r0, #0]
    648c:	4b0f      	ldr	r3, [pc, #60]	; (64cc <_spi_m_dma_register_callback+0x6c>)
    648e:	4798      	blx	r3
    6490:	1c22      	adds	r2, r4, #0
    6492:	bf18      	it	ne
    6494:	2201      	movne	r2, #1
    6496:	2100      	movs	r1, #0
    6498:	4b0b      	ldr	r3, [pc, #44]	; (64c8 <_spi_m_dma_register_callback+0x68>)
    649a:	4798      	blx	r3
		break;
    649c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    649e:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    64a0:	6800      	ldr	r0, [r0, #0]
    64a2:	4b0a      	ldr	r3, [pc, #40]	; (64cc <_spi_m_dma_register_callback+0x6c>)
    64a4:	4798      	blx	r3
    64a6:	3400      	adds	r4, #0
    64a8:	bf18      	it	ne
    64aa:	2401      	movne	r4, #1
    64ac:	4622      	mov	r2, r4
    64ae:	2101      	movs	r1, #1
    64b0:	4e05      	ldr	r6, [pc, #20]	; (64c8 <_spi_m_dma_register_callback+0x68>)
    64b2:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    64b4:	6828      	ldr	r0, [r5, #0]
    64b6:	4b03      	ldr	r3, [pc, #12]	; (64c4 <_spi_m_dma_register_callback+0x64>)
    64b8:	4798      	blx	r3
    64ba:	4622      	mov	r2, r4
    64bc:	2101      	movs	r1, #1
    64be:	47b0      	blx	r6
    64c0:	bd70      	pop	{r4, r5, r6, pc}
    64c2:	bf00      	nop
    64c4:	000054f5 	.word	0x000054f5
    64c8:	00004c75 	.word	0x00004c75
    64cc:	00005509 	.word	0x00005509

000064d0 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    64d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64d4:	4605      	mov	r5, r0
    64d6:	4689      	mov	r9, r1
    64d8:	4617      	mov	r7, r2
    64da:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    64dc:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    64e0:	4658      	mov	r0, fp
    64e2:	4b46      	ldr	r3, [pc, #280]	; (65fc <_spi_m_dma_transfer+0x12c>)
    64e4:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    64e6:	2803      	cmp	r0, #3
    64e8:	d053      	beq.n	6592 <_spi_m_dma_transfer+0xc2>
    64ea:	2807      	cmp	r0, #7
    64ec:	bf08      	it	eq
    64ee:	2201      	moveq	r2, #1
    64f0:	d050      	beq.n	6594 <_spi_m_dma_transfer+0xc4>
	return NULL;
    64f2:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    64f6:	4658      	mov	r0, fp
    64f8:	4b41      	ldr	r3, [pc, #260]	; (6600 <_spi_m_dma_transfer+0x130>)
    64fa:	4798      	blx	r3
    64fc:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    64fe:	4658      	mov	r0, fp
    6500:	4b40      	ldr	r3, [pc, #256]	; (6604 <_spi_m_dma_transfer+0x134>)
    6502:	4798      	blx	r3
    6504:	4604      	mov	r4, r0

	if (rxbuf) {
    6506:	2f00      	cmp	r7, #0
    6508:	d04b      	beq.n	65a2 <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    650a:	2d00      	cmp	r5, #0
    650c:	d047      	beq.n	659e <_spi_m_dma_transfer+0xce>
    650e:	f11b 0000 	adds.w	r0, fp, #0
    6512:	bf18      	it	ne
    6514:	2001      	movne	r0, #1
    6516:	f640 5236 	movw	r2, #3382	; 0xd36
    651a:	493b      	ldr	r1, [pc, #236]	; (6608 <_spi_m_dma_transfer+0x138>)
    651c:	4b3b      	ldr	r3, [pc, #236]	; (660c <_spi_m_dma_transfer+0x13c>)
    651e:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    6520:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6522:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    6524:	f013 0f04 	tst.w	r3, #4
    6528:	d107      	bne.n	653a <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    652a:	6853      	ldr	r3, [r2, #4]
    652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6530:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6532:	69d3      	ldr	r3, [r2, #28]
    6534:	f013 0f17 	tst.w	r3, #23
    6538:	d1fb      	bne.n	6532 <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    653a:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    653c:	3128      	adds	r1, #40	; 0x28
    653e:	4630      	mov	r0, r6
    6540:	4b33      	ldr	r3, [pc, #204]	; (6610 <_spi_m_dma_transfer+0x140>)
    6542:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    6544:	4639      	mov	r1, r7
    6546:	4630      	mov	r0, r6
    6548:	4b32      	ldr	r3, [pc, #200]	; (6614 <_spi_m_dma_transfer+0x144>)
    654a:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    654c:	4641      	mov	r1, r8
    654e:	4630      	mov	r0, r6
    6550:	4b31      	ldr	r3, [pc, #196]	; (6618 <_spi_m_dma_transfer+0x148>)
    6552:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    6554:	2100      	movs	r1, #0
    6556:	4630      	mov	r0, r6
    6558:	4b30      	ldr	r3, [pc, #192]	; (661c <_spi_m_dma_transfer+0x14c>)
    655a:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    655c:	f1b9 0f00 	cmp.w	r9, #0
    6560:	d039      	beq.n	65d6 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    6562:	4649      	mov	r1, r9
    6564:	4620      	mov	r0, r4
    6566:	4b2a      	ldr	r3, [pc, #168]	; (6610 <_spi_m_dma_transfer+0x140>)
    6568:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    656a:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    656c:	3128      	adds	r1, #40	; 0x28
    656e:	4620      	mov	r0, r4
    6570:	4b28      	ldr	r3, [pc, #160]	; (6614 <_spi_m_dma_transfer+0x144>)
    6572:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    6574:	2101      	movs	r1, #1
    6576:	4620      	mov	r0, r4
    6578:	4b29      	ldr	r3, [pc, #164]	; (6620 <_spi_m_dma_transfer+0x150>)
    657a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    657c:	4641      	mov	r1, r8
    657e:	4620      	mov	r0, r4
    6580:	4b25      	ldr	r3, [pc, #148]	; (6618 <_spi_m_dma_transfer+0x148>)
    6582:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    6584:	2100      	movs	r1, #0
    6586:	4620      	mov	r0, r4
    6588:	4b24      	ldr	r3, [pc, #144]	; (661c <_spi_m_dma_transfer+0x14c>)
    658a:	4798      	blx	r3

	return ERR_NONE;
}
    658c:	2000      	movs	r0, #0
    658e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    6592:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    6594:	4b23      	ldr	r3, [pc, #140]	; (6624 <_spi_m_dma_transfer+0x154>)
    6596:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    659a:	4492      	add	sl, r2
    659c:	e7ab      	b.n	64f6 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    659e:	2000      	movs	r0, #0
    65a0:	e7b9      	b.n	6516 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    65a2:	b1b5      	cbz	r5, 65d2 <_spi_m_dma_transfer+0x102>
    65a4:	f11b 0000 	adds.w	r0, fp, #0
    65a8:	bf18      	it	ne
    65aa:	2001      	movne	r0, #1
    65ac:	f640 523d 	movw	r2, #3389	; 0xd3d
    65b0:	4915      	ldr	r1, [pc, #84]	; (6608 <_spi_m_dma_transfer+0x138>)
    65b2:	4b16      	ldr	r3, [pc, #88]	; (660c <_spi_m_dma_transfer+0x13c>)
    65b4:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    65b6:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    65b8:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    65ba:	f013 0f04 	tst.w	r3, #4
    65be:	d1cd      	bne.n	655c <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    65c0:	6853      	ldr	r3, [r2, #4]
    65c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    65c6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    65c8:	69d3      	ldr	r3, [r2, #28]
    65ca:	f013 0f17 	tst.w	r3, #23
    65ce:	d1fb      	bne.n	65c8 <_spi_m_dma_transfer+0xf8>
    65d0:	e7c4      	b.n	655c <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    65d2:	2000      	movs	r0, #0
    65d4:	e7ea      	b.n	65ac <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    65d6:	f10a 010e 	add.w	r1, sl, #14
    65da:	4620      	mov	r0, r4
    65dc:	4b0c      	ldr	r3, [pc, #48]	; (6610 <_spi_m_dma_transfer+0x140>)
    65de:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    65e0:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    65e2:	3128      	adds	r1, #40	; 0x28
    65e4:	4620      	mov	r0, r4
    65e6:	4b0b      	ldr	r3, [pc, #44]	; (6614 <_spi_m_dma_transfer+0x144>)
    65e8:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    65ea:	2100      	movs	r1, #0
    65ec:	4620      	mov	r0, r4
    65ee:	4b0c      	ldr	r3, [pc, #48]	; (6620 <_spi_m_dma_transfer+0x150>)
    65f0:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    65f2:	4641      	mov	r1, r8
    65f4:	4620      	mov	r0, r4
    65f6:	4b08      	ldr	r3, [pc, #32]	; (6618 <_spi_m_dma_transfer+0x148>)
    65f8:	4798      	blx	r3
    65fa:	e7c3      	b.n	6584 <_spi_m_dma_transfer+0xb4>
    65fc:	000052d9 	.word	0x000052d9
    6600:	00005509 	.word	0x00005509
    6604:	000054f5 	.word	0x000054f5
    6608:	0000b134 	.word	0x0000b134
    660c:	00004519 	.word	0x00004519
    6610:	00004cd9 	.word	0x00004cd9
    6614:	00004cc9 	.word	0x00004cc9
    6618:	00004d05 	.word	0x00004d05
    661c:	00004d5d 	.word	0x00004d5d
    6620:	00004ce9 	.word	0x00004ce9
    6624:	0000b110 	.word	0x0000b110

00006628 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    6628:	4b03      	ldr	r3, [pc, #12]	; (6638 <_delay_init+0x10>)
    662a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    662e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    6630:	2205      	movs	r2, #5
    6632:	601a      	str	r2, [r3, #0]
    6634:	4770      	bx	lr
    6636:	bf00      	nop
    6638:	e000e010 	.word	0xe000e010

0000663c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    663c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    663e:	b303      	cbz	r3, 6682 <_delay_cycles+0x46>
{
    6640:	b430      	push	{r4, r5}
    6642:	1e5d      	subs	r5, r3, #1
    6644:	b2ed      	uxtb	r5, r5
	while (n--) {
    6646:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    6648:	4a12      	ldr	r2, [pc, #72]	; (6694 <_delay_cycles+0x58>)
    664a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    664e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    6650:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    6652:	6813      	ldr	r3, [r2, #0]
    6654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6658:	d0fb      	beq.n	6652 <_delay_cycles+0x16>
	while (n--) {
    665a:	3801      	subs	r0, #1
    665c:	b2c0      	uxtb	r0, r0
    665e:	28ff      	cmp	r0, #255	; 0xff
    6660:	d1f5      	bne.n	664e <_delay_cycles+0x12>
    6662:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    6666:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    666a:	3101      	adds	r1, #1
    666c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    666e:	4b09      	ldr	r3, [pc, #36]	; (6694 <_delay_cycles+0x58>)
    6670:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    6672:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    6674:	461a      	mov	r2, r3
    6676:	6813      	ldr	r3, [r2, #0]
    6678:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    667c:	d0fb      	beq.n	6676 <_delay_cycles+0x3a>
		;
}
    667e:	bc30      	pop	{r4, r5}
    6680:	4770      	bx	lr
	SysTick->LOAD = buf;
    6682:	4b04      	ldr	r3, [pc, #16]	; (6694 <_delay_cycles+0x58>)
    6684:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    6686:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    6688:	461a      	mov	r2, r3
    668a:	6813      	ldr	r3, [r2, #0]
    668c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6690:	d0fb      	beq.n	668a <_delay_cycles+0x4e>
    6692:	4770      	bx	lr
    6694:	e000e010 	.word	0xe000e010

00006698 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    6698:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    669a:	6813      	ldr	r3, [r2, #0]
    669c:	f043 0302 	orr.w	r3, r3, #2
    66a0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66a2:	6913      	ldr	r3, [r2, #16]
    66a4:	f013 0f03 	tst.w	r3, #3
    66a8:	d1fb      	bne.n	66a2 <_tc_timer_start+0xa>
}
    66aa:	4770      	bx	lr

000066ac <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    66ac:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    66ae:	6813      	ldr	r3, [r2, #0]
    66b0:	f023 0302 	bic.w	r3, r3, #2
    66b4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66b6:	6913      	ldr	r3, [r2, #16]
    66b8:	f013 0f03 	tst.w	r3, #3
    66bc:	d1fb      	bne.n	66b6 <_tc_timer_stop+0xa>
}
    66be:	4770      	bx	lr

000066c0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    66c0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    66c2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    66c4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    66c8:	2a02      	cmp	r2, #2
    66ca:	d00a      	beq.n	66e2 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    66cc:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    66ce:	f012 0f0c 	tst.w	r2, #12
    66d2:	d10c      	bne.n	66ee <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    66d4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    66d6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66d8:	691a      	ldr	r2, [r3, #16]
    66da:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    66de:	d1fb      	bne.n	66d8 <_tc_timer_set_period+0x18>
    66e0:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    66e2:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66e4:	691a      	ldr	r2, [r3, #16]
    66e6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    66ea:	d1fb      	bne.n	66e4 <_tc_timer_set_period+0x24>
    66ec:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    66ee:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    66f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    66f4:	2a01      	cmp	r2, #1
    66f6:	d000      	beq.n	66fa <_tc_timer_set_period+0x3a>
    66f8:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    66fa:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    66fc:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    66fe:	691a      	ldr	r2, [r3, #16]
    6700:	f012 0f20 	tst.w	r2, #32
    6704:	d1fb      	bne.n	66fe <_tc_timer_set_period+0x3e>
    6706:	e7f7      	b.n	66f8 <_tc_timer_set_period+0x38>

00006708 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    6708:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    670a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    670c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    6710:	2a02      	cmp	r2, #2
    6712:	d00a      	beq.n	672a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6714:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    6716:	f012 0f0c 	tst.w	r2, #12
    671a:	d10c      	bne.n	6736 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    671c:	691a      	ldr	r2, [r3, #16]
    671e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    6722:	d1fb      	bne.n	671c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    6724:	8b98      	ldrh	r0, [r3, #28]
    6726:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    6728:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    672a:	691a      	ldr	r2, [r3, #16]
    672c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    6730:	d1fb      	bne.n	672a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    6732:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    6734:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6736:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    6738:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    673c:	2a01      	cmp	r2, #1
    673e:	d001      	beq.n	6744 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    6740:	2000      	movs	r0, #0
}
    6742:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6744:	691a      	ldr	r2, [r3, #16]
    6746:	f012 0f20 	tst.w	r2, #32
    674a:	d1fb      	bne.n	6744 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    674c:	7ed8      	ldrb	r0, [r3, #27]
    674e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    6750:	4770      	bx	lr

00006752 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    6752:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6754:	6913      	ldr	r3, [r2, #16]
    6756:	f013 0f03 	tst.w	r3, #3
    675a:	d1fb      	bne.n	6754 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    675c:	6810      	ldr	r0, [r2, #0]
}
    675e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6762:	4770      	bx	lr

00006764 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    6764:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6766:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6768:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    676a:	f012 0f01 	tst.w	r2, #1
    676e:	d100      	bne.n	6772 <tc_interrupt_handler+0xe>
    6770:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6772:	2201      	movs	r2, #1
    6774:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    6776:	6803      	ldr	r3, [r0, #0]
    6778:	4798      	blx	r3
	}
}
    677a:	e7f9      	b.n	6770 <tc_interrupt_handler+0xc>

0000677c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    677c:	b570      	push	{r4, r5, r6, lr}
    677e:	b088      	sub	sp, #32
    6780:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6782:	466c      	mov	r4, sp
    6784:	4d19      	ldr	r5, [pc, #100]	; (67ec <get_tc_index+0x70>)
    6786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    678a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    678e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    6792:	9b00      	ldr	r3, [sp, #0]
    6794:	42b3      	cmp	r3, r6
    6796:	d00c      	beq.n	67b2 <get_tc_index+0x36>
    6798:	4630      	mov	r0, r6
    679a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    679c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    679e:	f852 1b04 	ldr.w	r1, [r2], #4
    67a2:	4281      	cmp	r1, r0
    67a4:	d006      	beq.n	67b4 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    67a6:	3301      	adds	r3, #1
    67a8:	2b08      	cmp	r3, #8
    67aa:	d1f8      	bne.n	679e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    67ac:	2000      	movs	r0, #0
			return i;
    67ae:	b240      	sxtb	r0, r0
    67b0:	e013      	b.n	67da <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    67b2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    67b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    67b8:	d015      	beq.n	67e6 <get_tc_index+0x6a>
    67ba:	2b01      	cmp	r3, #1
    67bc:	d00f      	beq.n	67de <get_tc_index+0x62>
    67be:	2b02      	cmp	r3, #2
    67c0:	d00f      	beq.n	67e2 <get_tc_index+0x66>
    67c2:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    67c4:	bf08      	it	eq
    67c6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    67c8:	d0f1      	beq.n	67ae <get_tc_index+0x32>
	ASSERT(false);
    67ca:	f240 1267 	movw	r2, #359	; 0x167
    67ce:	4908      	ldr	r1, [pc, #32]	; (67f0 <get_tc_index+0x74>)
    67d0:	2000      	movs	r0, #0
    67d2:	4b08      	ldr	r3, [pc, #32]	; (67f4 <get_tc_index+0x78>)
    67d4:	4798      	blx	r3
	return -1;
    67d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    67da:	b008      	add	sp, #32
    67dc:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    67de:	2001      	movs	r0, #1
    67e0:	e7e5      	b.n	67ae <get_tc_index+0x32>
    67e2:	2002      	movs	r0, #2
    67e4:	e7e3      	b.n	67ae <get_tc_index+0x32>
    67e6:	2000      	movs	r0, #0
    67e8:	e7e1      	b.n	67ae <get_tc_index+0x32>
    67ea:	bf00      	nop
    67ec:	0000b150 	.word	0x0000b150
    67f0:	0000b1c0 	.word	0x0000b1c0
    67f4:	00004519 	.word	0x00004519

000067f8 <_tc_timer_init>:
{
    67f8:	b570      	push	{r4, r5, r6, lr}
    67fa:	4606      	mov	r6, r0
    67fc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    67fe:	4608      	mov	r0, r1
    6800:	4b71      	ldr	r3, [pc, #452]	; (69c8 <_tc_timer_init+0x1d0>)
    6802:	4798      	blx	r3
    6804:	4605      	mov	r5, r0
	device->hw = hw;
    6806:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    6808:	22a0      	movs	r2, #160	; 0xa0
    680a:	4970      	ldr	r1, [pc, #448]	; (69cc <_tc_timer_init+0x1d4>)
    680c:	2001      	movs	r0, #1
    680e:	4b70      	ldr	r3, [pc, #448]	; (69d0 <_tc_timer_init+0x1d8>)
    6810:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6812:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    6814:	f013 0f01 	tst.w	r3, #1
    6818:	d119      	bne.n	684e <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    681a:	6923      	ldr	r3, [r4, #16]
    681c:	f013 0f03 	tst.w	r3, #3
    6820:	d1fb      	bne.n	681a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6822:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    6824:	f013 0f02 	tst.w	r3, #2
    6828:	d00b      	beq.n	6842 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    682a:	6823      	ldr	r3, [r4, #0]
    682c:	f023 0302 	bic.w	r3, r3, #2
    6830:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6832:	6923      	ldr	r3, [r4, #16]
    6834:	f013 0f03 	tst.w	r3, #3
    6838:	d1fb      	bne.n	6832 <_tc_timer_init+0x3a>
    683a:	6923      	ldr	r3, [r4, #16]
    683c:	f013 0f02 	tst.w	r3, #2
    6840:	d1fb      	bne.n	683a <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6842:	2301      	movs	r3, #1
    6844:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6846:	6923      	ldr	r3, [r4, #16]
    6848:	f013 0f03 	tst.w	r3, #3
    684c:	d1fb      	bne.n	6846 <_tc_timer_init+0x4e>
    684e:	6923      	ldr	r3, [r4, #16]
    6850:	f013 0f01 	tst.w	r3, #1
    6854:	d1fb      	bne.n	684e <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    6856:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    685a:	4a5e      	ldr	r2, [pc, #376]	; (69d4 <_tc_timer_init+0x1dc>)
    685c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6862:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6864:	6923      	ldr	r3, [r4, #16]
    6866:	f013 0f03 	tst.w	r3, #3
    686a:	d1fb      	bne.n	6864 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    686c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6870:	4958      	ldr	r1, [pc, #352]	; (69d4 <_tc_timer_init+0x1dc>)
    6872:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6876:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    687a:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    687e:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6880:	2301      	movs	r3, #1
    6882:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    6884:	f002 020c 	and.w	r2, r2, #12
    6888:	2a08      	cmp	r2, #8
    688a:	d056      	beq.n	693a <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    688c:	2a00      	cmp	r2, #0
    688e:	d16b      	bne.n	6968 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    6890:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6894:	4a4f      	ldr	r2, [pc, #316]	; (69d4 <_tc_timer_init+0x1dc>)
    6896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    689a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    689c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    689e:	6923      	ldr	r3, [r4, #16]
    68a0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    68a4:	d1fb      	bne.n	689e <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    68a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    68aa:	4a4a      	ldr	r2, [pc, #296]	; (69d4 <_tc_timer_init+0x1dc>)
    68ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    68b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    68b2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    68b4:	6923      	ldr	r3, [r4, #16]
    68b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    68ba:	d1fb      	bne.n	68b4 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    68bc:	2301      	movs	r3, #1
    68be:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    68c0:	4b45      	ldr	r3, [pc, #276]	; (69d8 <_tc_timer_init+0x1e0>)
    68c2:	429c      	cmp	r4, r3
    68c4:	d077      	beq.n	69b6 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    68c6:	4b45      	ldr	r3, [pc, #276]	; (69dc <_tc_timer_init+0x1e4>)
    68c8:	429c      	cmp	r4, r3
    68ca:	d077      	beq.n	69bc <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    68cc:	4b44      	ldr	r3, [pc, #272]	; (69e0 <_tc_timer_init+0x1e8>)
    68ce:	429c      	cmp	r4, r3
    68d0:	d077      	beq.n	69c2 <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    68d2:	4b44      	ldr	r3, [pc, #272]	; (69e4 <_tc_timer_init+0x1ec>)
    68d4:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    68d6:	bf04      	itt	eq
    68d8:	4b43      	ldreq	r3, [pc, #268]	; (69e8 <_tc_timer_init+0x1f0>)
    68da:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    68dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    68e0:	4a3c      	ldr	r2, [pc, #240]	; (69d4 <_tc_timer_init+0x1dc>)
    68e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    68e6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    68ea:	2b00      	cmp	r3, #0
    68ec:	db23      	blt.n	6936 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68ee:	095a      	lsrs	r2, r3, #5
    68f0:	f003 031f 	and.w	r3, r3, #31
    68f4:	2101      	movs	r1, #1
    68f6:	fa01 f303 	lsl.w	r3, r1, r3
    68fa:	3220      	adds	r2, #32
    68fc:	493b      	ldr	r1, [pc, #236]	; (69ec <_tc_timer_init+0x1f4>)
    68fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6906:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    690a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    690e:	4b31      	ldr	r3, [pc, #196]	; (69d4 <_tc_timer_init+0x1dc>)
    6910:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6914:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    6918:	2b00      	cmp	r3, #0
    691a:	db0c      	blt.n	6936 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    691c:	0959      	lsrs	r1, r3, #5
    691e:	f003 031f 	and.w	r3, r3, #31
    6922:	2201      	movs	r2, #1
    6924:	fa02 f303 	lsl.w	r3, r2, r3
    6928:	4a30      	ldr	r2, [pc, #192]	; (69ec <_tc_timer_init+0x1f4>)
    692a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    692e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6932:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    6936:	2000      	movs	r0, #0
    6938:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    693a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    693e:	4a25      	ldr	r2, [pc, #148]	; (69d4 <_tc_timer_init+0x1dc>)
    6940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    6946:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6948:	6923      	ldr	r3, [r4, #16]
    694a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    694e:	d1fb      	bne.n	6948 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    6950:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6954:	4a1f      	ldr	r2, [pc, #124]	; (69d4 <_tc_timer_init+0x1dc>)
    6956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    695c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    695e:	6923      	ldr	r3, [r4, #16]
    6960:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6964:	d1fb      	bne.n	695e <_tc_timer_init+0x166>
    6966:	e7a9      	b.n	68bc <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    6968:	2a04      	cmp	r2, #4
    696a:	d1a7      	bne.n	68bc <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    696c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6970:	4a18      	ldr	r2, [pc, #96]	; (69d4 <_tc_timer_init+0x1dc>)
    6972:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    697a:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    697c:	6923      	ldr	r3, [r4, #16]
    697e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6982:	d1fb      	bne.n	697c <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    6984:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6988:	4a12      	ldr	r2, [pc, #72]	; (69d4 <_tc_timer_init+0x1dc>)
    698a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    698e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    6992:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6994:	6923      	ldr	r3, [r4, #16]
    6996:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    699a:	d1fb      	bne.n	6994 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    699c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    69a0:	4a0c      	ldr	r2, [pc, #48]	; (69d4 <_tc_timer_init+0x1dc>)
    69a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    69a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    69aa:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    69ac:	6923      	ldr	r3, [r4, #16]
    69ae:	f013 0f20 	tst.w	r3, #32
    69b2:	d1fb      	bne.n	69ac <_tc_timer_init+0x1b4>
    69b4:	e782      	b.n	68bc <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    69b6:	4b0c      	ldr	r3, [pc, #48]	; (69e8 <_tc_timer_init+0x1f0>)
    69b8:	601e      	str	r6, [r3, #0]
    69ba:	e78a      	b.n	68d2 <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    69bc:	4b0a      	ldr	r3, [pc, #40]	; (69e8 <_tc_timer_init+0x1f0>)
    69be:	605e      	str	r6, [r3, #4]
    69c0:	e78c      	b.n	68dc <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    69c2:	4b09      	ldr	r3, [pc, #36]	; (69e8 <_tc_timer_init+0x1f0>)
    69c4:	609e      	str	r6, [r3, #8]
    69c6:	e789      	b.n	68dc <_tc_timer_init+0xe4>
    69c8:	0000677d 	.word	0x0000677d
    69cc:	0000b1c0 	.word	0x0000b1c0
    69d0:	00004519 	.word	0x00004519
    69d4:	0000b150 	.word	0x0000b150
    69d8:	40003800 	.word	0x40003800
    69dc:	40003c00 	.word	0x40003c00
    69e0:	4101a000 	.word	0x4101a000
    69e4:	4101c000 	.word	0x4101c000
    69e8:	20000da4 	.word	0x20000da4
    69ec:	e000e100 	.word	0xe000e100

000069f0 <_tc_timer_deinit>:
{
    69f0:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    69f2:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    69f4:	4620      	mov	r0, r4
    69f6:	4b18      	ldr	r3, [pc, #96]	; (6a58 <_tc_timer_deinit+0x68>)
    69f8:	4798      	blx	r3
    69fa:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    69fc:	22cd      	movs	r2, #205	; 0xcd
    69fe:	4917      	ldr	r1, [pc, #92]	; (6a5c <_tc_timer_deinit+0x6c>)
    6a00:	2001      	movs	r0, #1
    6a02:	4b17      	ldr	r3, [pc, #92]	; (6a60 <_tc_timer_deinit+0x70>)
    6a04:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    6a06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    6a0a:	4b16      	ldr	r3, [pc, #88]	; (6a64 <_tc_timer_deinit+0x74>)
    6a0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6a10:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    6a14:	2b00      	cmp	r3, #0
    6a16:	db0d      	blt.n	6a34 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a18:	095a      	lsrs	r2, r3, #5
    6a1a:	f003 031f 	and.w	r3, r3, #31
    6a1e:	2101      	movs	r1, #1
    6a20:	fa01 f303 	lsl.w	r3, r1, r3
    6a24:	3220      	adds	r2, #32
    6a26:	4910      	ldr	r1, [pc, #64]	; (6a68 <_tc_timer_deinit+0x78>)
    6a28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6a2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a30:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6a34:	6823      	ldr	r3, [r4, #0]
    6a36:	f023 0302 	bic.w	r3, r3, #2
    6a3a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6a3c:	6923      	ldr	r3, [r4, #16]
    6a3e:	f013 0f03 	tst.w	r3, #3
    6a42:	d1fb      	bne.n	6a3c <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    6a44:	6823      	ldr	r3, [r4, #0]
    6a46:	f043 0301 	orr.w	r3, r3, #1
    6a4a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6a4c:	6923      	ldr	r3, [r4, #16]
    6a4e:	f013 0f01 	tst.w	r3, #1
    6a52:	d1fb      	bne.n	6a4c <_tc_timer_deinit+0x5c>
}
    6a54:	bd38      	pop	{r3, r4, r5, pc}
    6a56:	bf00      	nop
    6a58:	0000677d 	.word	0x0000677d
    6a5c:	0000b1c0 	.word	0x0000b1c0
    6a60:	00004519 	.word	0x00004519
    6a64:	0000b150 	.word	0x0000b150
    6a68:	e000e100 	.word	0xe000e100

00006a6c <_tc_timer_set_irq>:
{
    6a6c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    6a6e:	68c0      	ldr	r0, [r0, #12]
    6a70:	4b09      	ldr	r3, [pc, #36]	; (6a98 <_tc_timer_set_irq+0x2c>)
    6a72:	4798      	blx	r3
    6a74:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    6a76:	f44f 7291 	mov.w	r2, #290	; 0x122
    6a7a:	4908      	ldr	r1, [pc, #32]	; (6a9c <_tc_timer_set_irq+0x30>)
    6a7c:	2001      	movs	r0, #1
    6a7e:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <_tc_timer_set_irq+0x34>)
    6a80:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    6a82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    6a86:	4b07      	ldr	r3, [pc, #28]	; (6aa4 <_tc_timer_set_irq+0x38>)
    6a88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    6a8c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    6a90:	4b05      	ldr	r3, [pc, #20]	; (6aa8 <_tc_timer_set_irq+0x3c>)
    6a92:	4798      	blx	r3
    6a94:	bd10      	pop	{r4, pc}
    6a96:	bf00      	nop
    6a98:	0000677d 	.word	0x0000677d
    6a9c:	0000b1c0 	.word	0x0000b1c0
    6aa0:	00004519 	.word	0x00004519
    6aa4:	0000b150 	.word	0x0000b150
    6aa8:	00004a95 	.word	0x00004a95

00006aac <_tc_get_timer>:
}
    6aac:	4800      	ldr	r0, [pc, #0]	; (6ab0 <_tc_get_timer+0x4>)
    6aae:	4770      	bx	lr
    6ab0:	20000338 	.word	0x20000338

00006ab4 <TC0_Handler>:
{
    6ab4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    6ab6:	4b02      	ldr	r3, [pc, #8]	; (6ac0 <TC0_Handler+0xc>)
    6ab8:	6818      	ldr	r0, [r3, #0]
    6aba:	4b02      	ldr	r3, [pc, #8]	; (6ac4 <TC0_Handler+0x10>)
    6abc:	4798      	blx	r3
    6abe:	bd08      	pop	{r3, pc}
    6ac0:	20000da4 	.word	0x20000da4
    6ac4:	00006765 	.word	0x00006765

00006ac8 <TC1_Handler>:
{
    6ac8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    6aca:	4b02      	ldr	r3, [pc, #8]	; (6ad4 <TC1_Handler+0xc>)
    6acc:	6858      	ldr	r0, [r3, #4]
    6ace:	4b02      	ldr	r3, [pc, #8]	; (6ad8 <TC1_Handler+0x10>)
    6ad0:	4798      	blx	r3
    6ad2:	bd08      	pop	{r3, pc}
    6ad4:	20000da4 	.word	0x20000da4
    6ad8:	00006765 	.word	0x00006765

00006adc <TC2_Handler>:
{
    6adc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    6ade:	4b02      	ldr	r3, [pc, #8]	; (6ae8 <TC2_Handler+0xc>)
    6ae0:	6898      	ldr	r0, [r3, #8]
    6ae2:	4b02      	ldr	r3, [pc, #8]	; (6aec <TC2_Handler+0x10>)
    6ae4:	4798      	blx	r3
    6ae6:	bd08      	pop	{r3, pc}
    6ae8:	20000da4 	.word	0x20000da4
    6aec:	00006765 	.word	0x00006765

00006af0 <TC3_Handler>:
{
    6af0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    6af2:	4b02      	ldr	r3, [pc, #8]	; (6afc <TC3_Handler+0xc>)
    6af4:	68d8      	ldr	r0, [r3, #12]
    6af6:	4b02      	ldr	r3, [pc, #8]	; (6b00 <TC3_Handler+0x10>)
    6af8:	4798      	blx	r3
    6afa:	bd08      	pop	{r3, pc}
    6afc:	20000da4 	.word	0x20000da4
    6b00:	00006765 	.word	0x00006765

00006b04 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    6b04:	2000      	movs	r0, #0
    6b06:	4770      	bx	lr

00006b08 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    6b08:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    6b0a:	7c83      	ldrb	r3, [r0, #18]
    6b0c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    6b10:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    6b12:	f002 0107 	and.w	r1, r2, #7
    6b16:	2901      	cmp	r1, #1
    6b18:	d00b      	beq.n	6b32 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6b1a:	015a      	lsls	r2, r3, #5
    6b1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6b20:	2110      	movs	r1, #16
    6b22:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    6b26:	015b      	lsls	r3, r3, #5
    6b28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6b2c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    6b30:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    6b32:	f012 0f40 	tst.w	r2, #64	; 0x40
    6b36:	d00c      	beq.n	6b52 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    6b38:	7cc2      	ldrb	r2, [r0, #19]
    6b3a:	f36f 1286 	bfc	r2, #6, #1
    6b3e:	74c2      	strb	r2, [r0, #19]
    6b40:	015a      	lsls	r2, r3, #5
    6b42:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    6b46:	2180      	movs	r1, #128	; 0x80
    6b48:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    6b4c:	2140      	movs	r1, #64	; 0x40
    6b4e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    6b52:	7cc2      	ldrb	r2, [r0, #19]
    6b54:	f36f 02c3 	bfc	r2, #3, #1
    6b58:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    6b5a:	490a      	ldr	r1, [pc, #40]	; (6b84 <_usb_d_dev_handle_setup+0x7c>)
    6b5c:	015a      	lsls	r2, r3, #5
    6b5e:	188c      	adds	r4, r1, r2
    6b60:	2500      	movs	r5, #0
    6b62:	72a5      	strb	r5, [r4, #10]
    6b64:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6b66:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    6b6a:	246f      	movs	r4, #111	; 0x6f
    6b6c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6b70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6b74:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    6b78:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    6b7c:	7c80      	ldrb	r0, [r0, #18]
    6b7e:	4798      	blx	r3
    6b80:	bd38      	pop	{r3, r4, r5, pc}
    6b82:	bf00      	nop
    6b84:	20000db4 	.word	0x20000db4

00006b88 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    6b88:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    6b8a:	2320      	movs	r3, #32
    6b8c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    6b90:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6b92:	7c83      	ldrb	r3, [r0, #18]
    6b94:	f003 030f 	and.w	r3, r3, #15
    6b98:	015b      	lsls	r3, r3, #5
    6b9a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6b9e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    6ba2:	4b04      	ldr	r3, [pc, #16]	; (6bb4 <_usb_d_dev_handle_stall+0x2c>)
    6ba4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    6ba8:	6882      	ldr	r2, [r0, #8]
    6baa:	2101      	movs	r1, #1
    6bac:	7c80      	ldrb	r0, [r0, #18]
    6bae:	4798      	blx	r3
    6bb0:	bd08      	pop	{r3, pc}
    6bb2:	bf00      	nop
    6bb4:	20000db4 	.word	0x20000db4

00006bb8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    6bb8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6bba:	7c84      	ldrb	r4, [r0, #18]
    6bbc:	2cff      	cmp	r4, #255	; 0xff
    6bbe:	d003      	beq.n	6bc8 <_usb_d_dev_trans_done+0x10>
    6bc0:	7cc3      	ldrb	r3, [r0, #19]
    6bc2:	f013 0f40 	tst.w	r3, #64	; 0x40
    6bc6:	d100      	bne.n	6bca <_usb_d_dev_trans_done+0x12>
    6bc8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    6bca:	7cc2      	ldrb	r2, [r0, #19]
    6bcc:	f36f 1286 	bfc	r2, #6, #1
    6bd0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    6bd2:	4a03      	ldr	r2, [pc, #12]	; (6be0 <_usb_d_dev_trans_done+0x28>)
    6bd4:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    6bd8:	6882      	ldr	r2, [r0, #8]
    6bda:	4620      	mov	r0, r4
    6bdc:	47a8      	blx	r5
    6bde:	e7f3      	b.n	6bc8 <_usb_d_dev_trans_done+0x10>
    6be0:	20000db4 	.word	0x20000db4

00006be4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    6be4:	b530      	push	{r4, r5, lr}
    6be6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6be8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    6bea:	2425      	movs	r4, #37	; 0x25
    6bec:	f88d 4004 	strb.w	r4, [sp, #4]
    6bf0:	244a      	movs	r4, #74	; 0x4a
    6bf2:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6bf6:	2bff      	cmp	r3, #255	; 0xff
    6bf8:	d01e      	beq.n	6c38 <_usb_d_dev_trans_stop+0x54>
    6bfa:	7cc4      	ldrb	r4, [r0, #19]
    6bfc:	f014 0f40 	tst.w	r4, #64	; 0x40
    6c00:	d01a      	beq.n	6c38 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c02:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    6c06:	b1c9      	cbz	r1, 6c3c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    6c08:	0163      	lsls	r3, r4, #5
    6c0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6c0e:	2580      	movs	r5, #128	; 0x80
    6c10:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    6c14:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    6c16:	a902      	add	r1, sp, #8
    6c18:	440b      	add	r3, r1
    6c1a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6c1e:	0163      	lsls	r3, r4, #5
    6c20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6c24:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6c28:	0163      	lsls	r3, r4, #5
    6c2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6c2e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    6c32:	4611      	mov	r1, r2
    6c34:	4b05      	ldr	r3, [pc, #20]	; (6c4c <_usb_d_dev_trans_stop+0x68>)
    6c36:	4798      	blx	r3
}
    6c38:	b003      	add	sp, #12
    6c3a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    6c3c:	0163      	lsls	r3, r4, #5
    6c3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6c42:	2540      	movs	r5, #64	; 0x40
    6c44:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    6c48:	e7e4      	b.n	6c14 <_usb_d_dev_trans_stop+0x30>
    6c4a:	bf00      	nop
    6c4c:	00006bb9 	.word	0x00006bb9

00006c50 <_usb_d_dev_handle_trfail>:
{
    6c50:	b530      	push	{r4, r5, lr}
    6c52:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    6c54:	7c83      	ldrb	r3, [r0, #18]
    6c56:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    6c5a:	2204      	movs	r2, #4
    6c5c:	f88d 2004 	strb.w	r2, [sp, #4]
    6c60:	2208      	movs	r2, #8
    6c62:	f88d 2005 	strb.w	r2, [sp, #5]
    6c66:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    6c68:	460c      	mov	r4, r1
    6c6a:	b391      	cbz	r1, 6cd2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6c6c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    6c70:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    6c74:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    6c78:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6c7c:	4a32      	ldr	r2, [pc, #200]	; (6d48 <_usb_d_dev_handle_trfail+0xf8>)
    6c7e:	440a      	add	r2, r1
    6c80:	7a91      	ldrb	r1, [r2, #10]
    6c82:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    6c84:	2d02      	cmp	r5, #2
    6c86:	d02c      	beq.n	6ce2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    6c88:	f011 0f02 	tst.w	r1, #2
    6c8c:	d045      	beq.n	6d1a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    6c8e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    6c90:	7a91      	ldrb	r1, [r2, #10]
    6c92:	f36f 0141 	bfc	r1, #1, #1
    6c96:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    6c98:	aa02      	add	r2, sp, #8
    6c9a:	4422      	add	r2, r4
    6c9c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6ca0:	015a      	lsls	r2, r3, #5
    6ca2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6ca6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6caa:	015b      	lsls	r3, r3, #5
    6cac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6cb0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    6cb4:	f005 0307 	and.w	r3, r5, #7
    6cb8:	2b01      	cmp	r3, #1
    6cba:	d143      	bne.n	6d44 <_usb_d_dev_handle_trfail+0xf4>
    6cbc:	7cc3      	ldrb	r3, [r0, #19]
    6cbe:	f013 0f40 	tst.w	r3, #64	; 0x40
    6cc2:	d03f      	beq.n	6d44 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    6cc4:	09d9      	lsrs	r1, r3, #7
    6cc6:	428c      	cmp	r4, r1
    6cc8:	d03c      	beq.n	6d44 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    6cca:	2200      	movs	r2, #0
    6ccc:	4b1f      	ldr	r3, [pc, #124]	; (6d4c <_usb_d_dev_handle_trfail+0xfc>)
    6cce:	4798      	blx	r3
    6cd0:	e038      	b.n	6d44 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6cd2:	0159      	lsls	r1, r3, #5
    6cd4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    6cd8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    6cdc:	f005 0507 	and.w	r5, r5, #7
    6ce0:	e7ca      	b.n	6c78 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    6ce2:	f011 0f01 	tst.w	r1, #1
    6ce6:	d0cf      	beq.n	6c88 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    6ce8:	7a91      	ldrb	r1, [r2, #10]
    6cea:	f36f 0100 	bfc	r1, #0, #1
    6cee:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    6cf0:	aa02      	add	r2, sp, #8
    6cf2:	4422      	add	r2, r4
    6cf4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6cf8:	015a      	lsls	r2, r3, #5
    6cfa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6cfe:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6d02:	015b      	lsls	r3, r3, #5
    6d04:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6d08:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    6d0c:	2204      	movs	r2, #4
    6d0e:	1c21      	adds	r1, r4, #0
    6d10:	bf18      	it	ne
    6d12:	2101      	movne	r1, #1
    6d14:	4b0d      	ldr	r3, [pc, #52]	; (6d4c <_usb_d_dev_handle_trfail+0xfc>)
    6d16:	4798      	blx	r3
    6d18:	e014      	b.n	6d44 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    6d1a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    6d1e:	4a0a      	ldr	r2, [pc, #40]	; (6d48 <_usb_d_dev_handle_trfail+0xf8>)
    6d20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    6d24:	2100      	movs	r1, #0
    6d26:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    6d28:	aa02      	add	r2, sp, #8
    6d2a:	4414      	add	r4, r2
    6d2c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6d30:	015a      	lsls	r2, r3, #5
    6d32:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6d36:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6d3a:	015b      	lsls	r3, r3, #5
    6d3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6d40:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    6d44:	b003      	add	sp, #12
    6d46:	bd30      	pop	{r4, r5, pc}
    6d48:	20000db4 	.word	0x20000db4
    6d4c:	00006be5 	.word	0x00006be5

00006d50 <_usb_d_dev_reset_epts>:
{
    6d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d54:	4d0c      	ldr	r5, [pc, #48]	; (6d88 <_usb_d_dev_reset_epts+0x38>)
    6d56:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    6d5a:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    6d5e:	f04f 0803 	mov.w	r8, #3
    6d62:	4f0a      	ldr	r7, [pc, #40]	; (6d8c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    6d64:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    6d66:	4641      	mov	r1, r8
    6d68:	4620      	mov	r0, r4
    6d6a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    6d6c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    6d6e:	2300      	movs	r3, #0
    6d70:	74e3      	strb	r3, [r4, #19]
    6d72:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    6d74:	42ac      	cmp	r4, r5
    6d76:	d1f6      	bne.n	6d66 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    6d78:	22c0      	movs	r2, #192	; 0xc0
    6d7a:	4619      	mov	r1, r3
    6d7c:	4802      	ldr	r0, [pc, #8]	; (6d88 <_usb_d_dev_reset_epts+0x38>)
    6d7e:	4b04      	ldr	r3, [pc, #16]	; (6d90 <_usb_d_dev_reset_epts+0x40>)
    6d80:	4798      	blx	r3
    6d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d86:	bf00      	nop
    6d88:	20000db4 	.word	0x20000db4
    6d8c:	00006bb9 	.word	0x00006bb9
    6d90:	0000a25f 	.word	0x0000a25f

00006d94 <_usb_d_dev_in_next>:
{
    6d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d98:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    6d9a:	7c84      	ldrb	r4, [r0, #18]
    6d9c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    6da0:	4688      	mov	r8, r1
    6da2:	2900      	cmp	r1, #0
    6da4:	f000 80a0 	beq.w	6ee8 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    6da8:	4b58      	ldr	r3, [pc, #352]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6daa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    6dae:	6958      	ldr	r0, [r3, #20]
    6db0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    6db4:	8a2b      	ldrh	r3, [r5, #16]
    6db6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    6dba:	4293      	cmp	r3, r2
    6dbc:	f000 808e 	beq.w	6edc <_usb_d_dev_in_next+0x148>
    6dc0:	3b01      	subs	r3, #1
    6dc2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    6dc4:	7cef      	ldrb	r7, [r5, #19]
    6dc6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    6dca:	f1b8 0f00 	cmp.w	r8, #0
    6dce:	d005      	beq.n	6ddc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6dd0:	0162      	lsls	r2, r4, #5
    6dd2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6dd6:	2302      	movs	r3, #2
    6dd8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    6ddc:	68a9      	ldr	r1, [r5, #8]
    6dde:	eb0e 0301 	add.w	r3, lr, r1
    6de2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    6de4:	686e      	ldr	r6, [r5, #4]
    6de6:	42b3      	cmp	r3, r6
    6de8:	d23f      	bcs.n	6e6a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    6dea:	1af6      	subs	r6, r6, r3
    6dec:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    6dee:	7cea      	ldrb	r2, [r5, #19]
    6df0:	f012 0f20 	tst.w	r2, #32
    6df4:	d02d      	beq.n	6e52 <_usb_d_dev_in_next+0xbe>
    6df6:	8a2a      	ldrh	r2, [r5, #16]
    6df8:	4296      	cmp	r6, r2
    6dfa:	bf28      	it	cs
    6dfc:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    6dfe:	6829      	ldr	r1, [r5, #0]
    6e00:	4632      	mov	r2, r6
    6e02:	4419      	add	r1, r3
    6e04:	68e8      	ldr	r0, [r5, #12]
    6e06:	4b42      	ldr	r3, [pc, #264]	; (6f10 <_usb_d_dev_in_next+0x17c>)
    6e08:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    6e0a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    6e0c:	4b3f      	ldr	r3, [pc, #252]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6e0e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6e12:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    6e14:	4b3d      	ldr	r3, [pc, #244]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6e16:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6e1a:	695a      	ldr	r2, [r3, #20]
    6e1c:	f366 020d 	bfi	r2, r6, #0, #14
    6e20:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    6e22:	695a      	ldr	r2, [r3, #20]
    6e24:	f36f 329b 	bfc	r2, #14, #14
    6e28:	615a      	str	r2, [r3, #20]
	if (!isr) {
    6e2a:	f1b8 0f00 	cmp.w	r8, #0
    6e2e:	d108      	bne.n	6e42 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    6e30:	2f01      	cmp	r7, #1
    6e32:	bf0c      	ite	eq
    6e34:	224e      	moveq	r2, #78	; 0x4e
    6e36:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    6e38:	0163      	lsls	r3, r4, #5
    6e3a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6e3e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    6e42:	0164      	lsls	r4, r4, #5
    6e44:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    6e48:	2380      	movs	r3, #128	; 0x80
    6e4a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    6e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e52:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    6e56:	bf28      	it	cs
    6e58:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    6e5c:	6829      	ldr	r1, [r5, #0]
    6e5e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    6e60:	4a2a      	ldr	r2, [pc, #168]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6e62:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    6e66:	6113      	str	r3, [r2, #16]
    6e68:	e7d4      	b.n	6e14 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    6e6a:	7ceb      	ldrb	r3, [r5, #19]
    6e6c:	f013 0f10 	tst.w	r3, #16
    6e70:	d00f      	beq.n	6e92 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    6e72:	7ceb      	ldrb	r3, [r5, #19]
    6e74:	f36f 1304 	bfc	r3, #4, #1
    6e78:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    6e7a:	4b24      	ldr	r3, [pc, #144]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6e7c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6e80:	695a      	ldr	r2, [r3, #20]
    6e82:	f36f 020d 	bfc	r2, #0, #14
    6e86:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    6e88:	695a      	ldr	r2, [r3, #20]
    6e8a:	f36f 329b 	bfc	r2, #14, #14
    6e8e:	615a      	str	r2, [r3, #20]
    6e90:	e7cb      	b.n	6e2a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    6e92:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6e94:	ea4f 1444 	mov.w	r4, r4, lsl #5
    6e98:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    6e9c:	bf0c      	ite	eq
    6e9e:	234b      	moveq	r3, #75	; 0x4b
    6ea0:	234a      	movne	r3, #74	; 0x4a
    6ea2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    6ea6:	8a2a      	ldrh	r2, [r5, #16]
    6ea8:	ea00 030e 	and.w	r3, r0, lr
    6eac:	429a      	cmp	r2, r3
    6eae:	d005      	beq.n	6ebc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    6eb0:	2100      	movs	r1, #0
    6eb2:	4628      	mov	r0, r5
    6eb4:	4b17      	ldr	r3, [pc, #92]	; (6f14 <_usb_d_dev_in_next+0x180>)
    6eb6:	4798      	blx	r3
	return;
    6eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    6ebc:	7ceb      	ldrb	r3, [r5, #19]
    6ebe:	f36f 1386 	bfc	r3, #6, #1
    6ec2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    6ec4:	4b11      	ldr	r3, [pc, #68]	; (6f0c <_usb_d_dev_in_next+0x178>)
    6ec6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    6eca:	68a9      	ldr	r1, [r5, #8]
    6ecc:	7ca8      	ldrb	r0, [r5, #18]
    6ece:	4798      	blx	r3
    6ed0:	b9d0      	cbnz	r0, 6f08 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    6ed2:	7ceb      	ldrb	r3, [r5, #19]
    6ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6ed8:	74eb      	strb	r3, [r5, #19]
    6eda:	e7e9      	b.n	6eb0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    6edc:	7cef      	ldrb	r7, [r5, #19]
    6ede:	f007 0707 	and.w	r7, r7, #7
    6ee2:	f240 30ff 	movw	r0, #1023	; 0x3ff
    6ee6:	e773      	b.n	6dd0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    6ee8:	8a03      	ldrh	r3, [r0, #16]
    6eea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    6eee:	4293      	cmp	r3, r2
    6ef0:	d107      	bne.n	6f02 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    6ef2:	7cef      	ldrb	r7, [r5, #19]
    6ef4:	f007 0707 	and.w	r7, r7, #7
    6ef8:	f04f 0e00 	mov.w	lr, #0
    6efc:	f240 30ff 	movw	r0, #1023	; 0x3ff
    6f00:	e76c      	b.n	6ddc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    6f02:	f04f 0e00 	mov.w	lr, #0
    6f06:	e75b      	b.n	6dc0 <_usb_d_dev_in_next+0x2c>
    6f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f0c:	20000db4 	.word	0x20000db4
    6f10:	0000a249 	.word	0x0000a249
    6f14:	00006bb9 	.word	0x00006bb9

00006f18 <_usb_d_dev_out_next>:
{
    6f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f1c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    6f1e:	7c85      	ldrb	r5, [r0, #18]
    6f20:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    6f24:	4689      	mov	r9, r1
    6f26:	2900      	cmp	r1, #0
    6f28:	d056      	beq.n	6fd8 <_usb_d_dev_out_next+0xc0>
    6f2a:	4b74      	ldr	r3, [pc, #464]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    6f2c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    6f30:	685a      	ldr	r2, [r3, #4]
    6f32:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    6f36:	685f      	ldr	r7, [r3, #4]
    6f38:	f3c7 070d 	ubfx	r7, r7, #0, #14
    6f3c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    6f3e:	8a06      	ldrh	r6, [r0, #16]
    6f40:	f240 33ff 	movw	r3, #1023	; 0x3ff
    6f44:	429e      	cmp	r6, r3
    6f46:	f000 80ba 	beq.w	70be <_usb_d_dev_out_next+0x1a6>
    6f4a:	3e01      	subs	r6, #1
    6f4c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    6f4e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    6f52:	f894 8013 	ldrb.w	r8, [r4, #19]
    6f56:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    6f5a:	f1b9 0f00 	cmp.w	r9, #0
    6f5e:	d005      	beq.n	6f6c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6f60:	016b      	lsls	r3, r5, #5
    6f62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6f66:	2201      	movs	r2, #1
    6f68:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    6f6c:	7ce3      	ldrb	r3, [r4, #19]
    6f6e:	f013 0f20 	tst.w	r3, #32
    6f72:	d00d      	beq.n	6f90 <_usb_d_dev_out_next+0x78>
    6f74:	6862      	ldr	r2, [r4, #4]
    6f76:	2a00      	cmp	r2, #0
    6f78:	d037      	beq.n	6fea <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    6f7a:	68a0      	ldr	r0, [r4, #8]
    6f7c:	1a12      	subs	r2, r2, r0
    6f7e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    6f80:	6823      	ldr	r3, [r4, #0]
    6f82:	42ba      	cmp	r2, r7
    6f84:	bf28      	it	cs
    6f86:	463a      	movcs	r2, r7
    6f88:	68e1      	ldr	r1, [r4, #12]
    6f8a:	4418      	add	r0, r3
    6f8c:	4b5c      	ldr	r3, [pc, #368]	; (7100 <_usb_d_dev_out_next+0x1e8>)
    6f8e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    6f90:	6863      	ldr	r3, [r4, #4]
    6f92:	b353      	cbz	r3, 6fea <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    6f94:	f1b9 0f00 	cmp.w	r9, #0
    6f98:	d040      	beq.n	701c <_usb_d_dev_out_next+0x104>
    6f9a:	8a22      	ldrh	r2, [r4, #16]
    6f9c:	42ba      	cmp	r2, r7
    6f9e:	d93d      	bls.n	701c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    6fa0:	7ce3      	ldrb	r3, [r4, #19]
    6fa2:	f36f 1304 	bfc	r3, #4, #1
    6fa6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    6fa8:	68a3      	ldr	r3, [r4, #8]
    6faa:	445b      	add	r3, fp
    6fac:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    6fae:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6fb2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    6fb6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6fba:	bf0c      	ite	eq
    6fbc:	222d      	moveq	r2, #45	; 0x2d
    6fbe:	2225      	movne	r2, #37	; 0x25
    6fc0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    6fc4:	b915      	cbnz	r5, 6fcc <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    6fc6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    6fc8:	4b4c      	ldr	r3, [pc, #304]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    6fca:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    6fcc:	2100      	movs	r1, #0
    6fce:	4620      	mov	r0, r4
    6fd0:	4b4c      	ldr	r3, [pc, #304]	; (7104 <_usb_d_dev_out_next+0x1ec>)
    6fd2:	4798      	blx	r3
	return;
    6fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    6fd8:	8a06      	ldrh	r6, [r0, #16]
    6fda:	f240 33ff 	movw	r3, #1023	; 0x3ff
    6fde:	429e      	cmp	r6, r3
    6fe0:	d07b      	beq.n	70da <_usb_d_dev_out_next+0x1c2>
    6fe2:	f04f 0b00 	mov.w	fp, #0
    6fe6:	46da      	mov	sl, fp
    6fe8:	e7af      	b.n	6f4a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    6fea:	7ce3      	ldrb	r3, [r4, #19]
    6fec:	f013 0f10 	tst.w	r3, #16
    6ff0:	d06c      	beq.n	70cc <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    6ff2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    6ff4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    6ff8:	f043 0320 	orr.w	r3, r3, #32
    6ffc:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    6ffe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7000:	493e      	ldr	r1, [pc, #248]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    7002:	016a      	lsls	r2, r5, #5
    7004:	188b      	adds	r3, r1, r2
    7006:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7008:	8a21      	ldrh	r1, [r4, #16]
    700a:	685a      	ldr	r2, [r3, #4]
    700c:	f361 329b 	bfi	r2, r1, #14, #14
    7010:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7012:	685a      	ldr	r2, [r3, #4]
    7014:	f36f 020d 	bfc	r2, #0, #14
    7018:	605a      	str	r2, [r3, #4]
    701a:	e01d      	b.n	7058 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    701c:	68a2      	ldr	r2, [r4, #8]
    701e:	4452      	add	r2, sl
    7020:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    7022:	4293      	cmp	r3, r2
    7024:	d9c3      	bls.n	6fae <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    7026:	1a9b      	subs	r3, r3, r2
    7028:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    702a:	7ce1      	ldrb	r1, [r4, #19]
    702c:	f011 0f20 	tst.w	r1, #32
    7030:	d026      	beq.n	7080 <_usb_d_dev_out_next+0x168>
    7032:	8a22      	ldrh	r2, [r4, #16]
    7034:	4293      	cmp	r3, r2
    7036:	bf28      	it	cs
    7038:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    703a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    703c:	016a      	lsls	r2, r5, #5
    703e:	492f      	ldr	r1, [pc, #188]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    7040:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7042:	4a2e      	ldr	r2, [pc, #184]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    7044:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    7048:	6851      	ldr	r1, [r2, #4]
    704a:	f363 319b 	bfi	r1, r3, #14, #14
    704e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7050:	6853      	ldr	r3, [r2, #4]
    7052:	f36f 030d 	bfc	r3, #0, #14
    7056:	6053      	str	r3, [r2, #4]
	if (!isr) {
    7058:	f1b9 0f00 	cmp.w	r9, #0
    705c:	d108      	bne.n	7070 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    705e:	f1b8 0f01 	cmp.w	r8, #1
    7062:	d025      	beq.n	70b0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    7064:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7066:	016b      	lsls	r3, r5, #5
    7068:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    706c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7070:	016d      	lsls	r5, r5, #5
    7072:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    7076:	2340      	movs	r3, #64	; 0x40
    7078:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    707c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    7080:	8a21      	ldrh	r1, [r4, #16]
    7082:	428b      	cmp	r3, r1
    7084:	d90a      	bls.n	709c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    708a:	d80e      	bhi.n	70aa <_usb_d_dev_out_next+0x192>
    708c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7090:	6821      	ldr	r1, [r4, #0]
    7092:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    7094:	0169      	lsls	r1, r5, #5
    7096:	4819      	ldr	r0, [pc, #100]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    7098:	5042      	str	r2, [r0, r1]
    709a:	e7d2      	b.n	7042 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    709c:	428b      	cmp	r3, r1
    709e:	d2f7      	bcs.n	7090 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    70a0:	7ce1      	ldrb	r1, [r4, #19]
    70a2:	f041 0120 	orr.w	r1, r1, #32
    70a6:	74e1      	strb	r1, [r4, #19]
    70a8:	e7f2      	b.n	7090 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    70aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    70ae:	e7ef      	b.n	7090 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    70b0:	4b12      	ldr	r3, [pc, #72]	; (70fc <_usb_d_dev_out_next+0x1e4>)
    70b2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    70b6:	2200      	movs	r2, #0
    70b8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    70ba:	222d      	movs	r2, #45	; 0x2d
    70bc:	e7d3      	b.n	7066 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    70be:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    70c2:	f890 8013 	ldrb.w	r8, [r0, #19]
    70c6:	f008 0807 	and.w	r8, r8, #7
    70ca:	e749      	b.n	6f60 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    70cc:	f1b9 0f00 	cmp.w	r9, #0
    70d0:	d10b      	bne.n	70ea <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    70d2:	68a3      	ldr	r3, [r4, #8]
    70d4:	4453      	add	r3, sl
    70d6:	60a3      	str	r3, [r4, #8]
    70d8:	e769      	b.n	6fae <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    70da:	f890 8013 	ldrb.w	r8, [r0, #19]
    70de:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    70e2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    70e4:	46bb      	mov	fp, r7
    70e6:	46ba      	mov	sl, r7
    70e8:	e740      	b.n	6f6c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    70ea:	8a23      	ldrh	r3, [r4, #16]
    70ec:	42bb      	cmp	r3, r7
    70ee:	f63f af57 	bhi.w	6fa0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    70f2:	68a3      	ldr	r3, [r4, #8]
    70f4:	4453      	add	r3, sl
    70f6:	60a3      	str	r3, [r4, #8]
    70f8:	e759      	b.n	6fae <_usb_d_dev_out_next+0x96>
    70fa:	bf00      	nop
    70fc:	20000db4 	.word	0x20000db4
    7100:	0000a249 	.word	0x0000a249
    7104:	00006bb9 	.word	0x00006bb9

00007108 <_usb_d_dev_handler>:
{
    7108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    710c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7110:	8c1e      	ldrh	r6, [r3, #32]
    7112:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    7114:	b146      	cbz	r6, 7128 <_usb_d_dev_handler+0x20>
    7116:	4d96      	ldr	r5, [pc, #600]	; (7370 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    7118:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    711a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    711e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 738c <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    7122:	f8df 826c 	ldr.w	r8, [pc, #620]	; 7390 <_usb_d_dev_handler+0x288>
    7126:	e0de      	b.n	72e6 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7128:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    712a:	8b1b      	ldrh	r3, [r3, #24]
    712c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    712e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    7130:	f013 0f04 	tst.w	r3, #4
    7134:	d11e      	bne.n	7174 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    7136:	f413 7f00 	tst.w	r3, #512	; 0x200
    713a:	d125      	bne.n	7188 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    713c:	f013 0f80 	tst.w	r3, #128	; 0x80
    7140:	d14f      	bne.n	71e2 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    7142:	f013 0f70 	tst.w	r3, #112	; 0x70
    7146:	d158      	bne.n	71fa <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    7148:	f013 0f08 	tst.w	r3, #8
    714c:	d178      	bne.n	7240 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    714e:	f013 0f01 	tst.w	r3, #1
    7152:	d0e0      	beq.n	7116 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7154:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7158:	f240 2201 	movw	r2, #513	; 0x201
    715c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    715e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7160:	2270      	movs	r2, #112	; 0x70
    7162:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    7164:	4b83      	ldr	r3, [pc, #524]	; (7374 <_usb_d_dev_handler+0x26c>)
    7166:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    716a:	2100      	movs	r1, #0
    716c:	2004      	movs	r0, #4
    716e:	4798      	blx	r3
    7170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7174:	2204      	movs	r2, #4
    7176:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    717a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    717c:	4b7d      	ldr	r3, [pc, #500]	; (7374 <_usb_d_dev_handler+0x26c>)
    717e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7182:	4798      	blx	r3
    7184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7188:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    718c:	f240 2201 	movw	r2, #513	; 0x201
    7190:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7192:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7194:	2270      	movs	r2, #112	; 0x70
    7196:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7198:	4b76      	ldr	r3, [pc, #472]	; (7374 <_usb_d_dev_handler+0x26c>)
    719a:	891b      	ldrh	r3, [r3, #8]
    719c:	f003 030f 	and.w	r3, r3, #15
    71a0:	2b03      	cmp	r3, #3
    71a2:	d014      	beq.n	71ce <_usb_d_dev_handler+0xc6>
    71a4:	2301      	movs	r3, #1
    71a6:	4873      	ldr	r0, [pc, #460]	; (7374 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    71a8:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    71aa:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    71ae:	8912      	ldrh	r2, [r2, #8]
    71b0:	f002 020f 	and.w	r2, r2, #15
    71b4:	2a03      	cmp	r2, #3
    71b6:	d00b      	beq.n	71d0 <_usb_d_dev_handler+0xc8>
    71b8:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    71ba:	2b05      	cmp	r3, #5
    71bc:	d1f4      	bne.n	71a8 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    71be:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    71c0:	4b6c      	ldr	r3, [pc, #432]	; (7374 <_usb_d_dev_handler+0x26c>)
    71c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    71c6:	2003      	movs	r0, #3
    71c8:	4798      	blx	r3
    71ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    71ce:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    71d0:	4b68      	ldr	r3, [pc, #416]	; (7374 <_usb_d_dev_handler+0x26c>)
    71d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    71d6:	8919      	ldrh	r1, [r3, #8]
    71d8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    71dc:	2200      	movs	r2, #0
    71de:	811a      	strh	r2, [r3, #8]
    71e0:	e7ee      	b.n	71c0 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    71e2:	2280      	movs	r2, #128	; 0x80
    71e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    71e8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    71ea:	4b62      	ldr	r3, [pc, #392]	; (7374 <_usb_d_dev_handler+0x26c>)
    71ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    71f0:	2100      	movs	r1, #0
    71f2:	2005      	movs	r0, #5
    71f4:	4798      	blx	r3
    71f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    71fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    71fe:	2270      	movs	r2, #112	; 0x70
    7200:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7202:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7204:	f240 2201 	movw	r2, #513	; 0x201
    7208:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    720a:	4b5b      	ldr	r3, [pc, #364]	; (7378 <_usb_d_dev_handler+0x270>)
    720c:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7210:	f013 0f01 	tst.w	r3, #1
    7214:	d00e      	beq.n	7234 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7216:	4a58      	ldr	r2, [pc, #352]	; (7378 <_usb_d_dev_handler+0x270>)
    7218:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    721a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    721e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7222:	d1f9      	bne.n	7218 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    7224:	4b53      	ldr	r3, [pc, #332]	; (7374 <_usb_d_dev_handler+0x26c>)
    7226:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    722a:	2100      	movs	r1, #0
    722c:	2002      	movs	r0, #2
    722e:	4798      	blx	r3
    7230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7234:	4a50      	ldr	r2, [pc, #320]	; (7378 <_usb_d_dev_handler+0x270>)
    7236:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7238:	f413 7f80 	tst.w	r3, #256	; 0x100
    723c:	d0fb      	beq.n	7236 <_usb_d_dev_handler+0x12e>
    723e:	e7f1      	b.n	7224 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7240:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7244:	2400      	movs	r4, #0
    7246:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    724a:	2208      	movs	r2, #8
    724c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    724e:	2270      	movs	r2, #112	; 0x70
    7250:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7252:	f240 2201 	movw	r2, #513	; 0x201
    7256:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    7258:	4b48      	ldr	r3, [pc, #288]	; (737c <_usb_d_dev_handler+0x274>)
    725a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    725c:	4b45      	ldr	r3, [pc, #276]	; (7374 <_usb_d_dev_handler+0x26c>)
    725e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7262:	4621      	mov	r1, r4
    7264:	2001      	movs	r0, #1
    7266:	4798      	blx	r3
    7268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    726c:	f011 0f10 	tst.w	r1, #16
    7270:	d109      	bne.n	7286 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7272:	f011 0f40 	tst.w	r1, #64	; 0x40
    7276:	d108      	bne.n	728a <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7278:	f011 0f20 	tst.w	r1, #32
    727c:	d02f      	beq.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    727e:	2100      	movs	r1, #0
    7280:	4b3f      	ldr	r3, [pc, #252]	; (7380 <_usb_d_dev_handler+0x278>)
    7282:	4798      	blx	r3
    7284:	e02b      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    7286:	47c8      	blx	r9
    7288:	e029      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    728a:	2101      	movs	r1, #1
    728c:	4b3c      	ldr	r3, [pc, #240]	; (7380 <_usb_d_dev_handler+0x278>)
    728e:	4798      	blx	r3
    7290:	e025      	b.n	72de <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7292:	f011 0f40 	tst.w	r1, #64	; 0x40
    7296:	d111      	bne.n	72bc <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7298:	f011 0f08 	tst.w	r1, #8
    729c:	d112      	bne.n	72c4 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    729e:	f011 0f02 	tst.w	r1, #2
    72a2:	d112      	bne.n	72ca <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    72a4:	f003 0307 	and.w	r3, r3, #7
    72a8:	2b01      	cmp	r3, #1
    72aa:	d118      	bne.n	72de <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    72ac:	f011 0f04 	tst.w	r1, #4
    72b0:	d10f      	bne.n	72d2 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    72b2:	f011 0f10 	tst.w	r1, #16
    72b6:	d012      	beq.n	72de <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    72b8:	47c8      	blx	r9
    72ba:	e010      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    72bc:	2101      	movs	r1, #1
    72be:	4b30      	ldr	r3, [pc, #192]	; (7380 <_usb_d_dev_handler+0x278>)
    72c0:	4798      	blx	r3
    72c2:	e00c      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    72c4:	2101      	movs	r1, #1
    72c6:	47c0      	blx	r8
    72c8:	e009      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    72ca:	2101      	movs	r1, #1
    72cc:	4b2d      	ldr	r3, [pc, #180]	; (7384 <_usb_d_dev_handler+0x27c>)
    72ce:	4798      	blx	r3
    72d0:	e005      	b.n	72de <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    72d2:	2100      	movs	r1, #0
    72d4:	47c0      	blx	r8
    72d6:	e002      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    72d8:	2100      	movs	r1, #0
    72da:	4b29      	ldr	r3, [pc, #164]	; (7380 <_usb_d_dev_handler+0x278>)
    72dc:	4798      	blx	r3
    72de:	3401      	adds	r4, #1
    72e0:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    72e2:	2c1b      	cmp	r4, #27
    72e4:	d042      	beq.n	736c <_usb_d_dev_handler+0x264>
    72e6:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    72e8:	7cab      	ldrb	r3, [r5, #18]
    72ea:	2bff      	cmp	r3, #255	; 0xff
    72ec:	d0f7      	beq.n	72de <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    72ee:	f003 030f 	and.w	r3, r3, #15
    72f2:	2101      	movs	r1, #1
    72f4:	4099      	lsls	r1, r3
    72f6:	4231      	tst	r1, r6
    72f8:	d0f1      	beq.n	72de <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    72fa:	0159      	lsls	r1, r3, #5
    72fc:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7300:	f501 7180 	add.w	r1, r1, #256	; 0x100
    7304:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    7306:	015b      	lsls	r3, r3, #5
    7308:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    730c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    7310:	4019      	ands	r1, r3
    7312:	d0e4      	beq.n	72de <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    7314:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    7318:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    731c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    7320:	f003 0247 	and.w	r2, r3, #71	; 0x47
    7324:	2a01      	cmp	r2, #1
    7326:	d0a1      	beq.n	726c <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    7328:	f013 0f80 	tst.w	r3, #128	; 0x80
    732c:	d1b1      	bne.n	7292 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    732e:	f011 0f20 	tst.w	r1, #32
    7332:	d1d1      	bne.n	72d8 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    7334:	f011 0f04 	tst.w	r1, #4
    7338:	d10e      	bne.n	7358 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    733a:	f011 0f01 	tst.w	r1, #1
    733e:	d10e      	bne.n	735e <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    7340:	f003 0307 	and.w	r3, r3, #7
    7344:	2b01      	cmp	r3, #1
    7346:	d1ca      	bne.n	72de <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7348:	f011 0f08 	tst.w	r1, #8
    734c:	d10b      	bne.n	7366 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    734e:	f011 0f10 	tst.w	r1, #16
    7352:	d0c4      	beq.n	72de <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    7354:	47c8      	blx	r9
    7356:	e7c2      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    7358:	2100      	movs	r1, #0
    735a:	47c0      	blx	r8
    735c:	e7bf      	b.n	72de <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    735e:	2101      	movs	r1, #1
    7360:	4b09      	ldr	r3, [pc, #36]	; (7388 <_usb_d_dev_handler+0x280>)
    7362:	4798      	blx	r3
    7364:	e7bb      	b.n	72de <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    7366:	2101      	movs	r1, #1
    7368:	47c0      	blx	r8
    736a:	e7b8      	b.n	72de <_usb_d_dev_handler+0x1d6>
    736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7370:	20000e88 	.word	0x20000e88
    7374:	20000db4 	.word	0x20000db4
    7378:	40001000 	.word	0x40001000
    737c:	00006d51 	.word	0x00006d51
    7380:	00006b89 	.word	0x00006b89
    7384:	00006d95 	.word	0x00006d95
    7388:	00006f19 	.word	0x00006f19
    738c:	00006b09 	.word	0x00006b09
    7390:	00006c51 	.word	0x00006c51

00007394 <_usb_d_dev_init>:
{
    7394:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7396:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    739a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    739c:	f013 0f01 	tst.w	r3, #1
    73a0:	d124      	bne.n	73ec <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    73a2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    73a6:	7893      	ldrb	r3, [r2, #2]
    73a8:	f013 0f03 	tst.w	r3, #3
    73ac:	d1fb      	bne.n	73a6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    73ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    73b2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    73b4:	f013 0f02 	tst.w	r3, #2
    73b8:	d00f      	beq.n	73da <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    73ba:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    73be:	7813      	ldrb	r3, [r2, #0]
    73c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    73c4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    73c6:	7893      	ldrb	r3, [r2, #2]
    73c8:	f013 0f03 	tst.w	r3, #3
    73cc:	d1fb      	bne.n	73c6 <_usb_d_dev_init+0x32>
    73ce:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    73d2:	7893      	ldrb	r3, [r2, #2]
    73d4:	f013 0f02 	tst.w	r3, #2
    73d8:	d1fb      	bne.n	73d2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    73da:	2201      	movs	r2, #1
    73dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    73e0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    73e2:	461a      	mov	r2, r3
    73e4:	7893      	ldrb	r3, [r2, #2]
    73e6:	f013 0f03 	tst.w	r3, #3
    73ea:	d1fb      	bne.n	73e4 <_usb_d_dev_init+0x50>
    73ec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    73f0:	7893      	ldrb	r3, [r2, #2]
    73f2:	f013 0f01 	tst.w	r3, #1
    73f6:	d1fb      	bne.n	73f0 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    73f8:	4b24      	ldr	r3, [pc, #144]	; (748c <_usb_d_dev_init+0xf8>)
    73fa:	4a25      	ldr	r2, [pc, #148]	; (7490 <_usb_d_dev_init+0xfc>)
    73fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    7400:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    7404:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    7408:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    740c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    7410:	4b20      	ldr	r3, [pc, #128]	; (7494 <_usb_d_dev_init+0x100>)
    7412:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7414:	4b20      	ldr	r3, [pc, #128]	; (7498 <_usb_d_dev_init+0x104>)
    7416:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    7418:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    741c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7420:	f011 011f 	ands.w	r1, r1, #31
    7424:	d02b      	beq.n	747e <_usb_d_dev_init+0xea>
		pad_transn = 9;
    7426:	291f      	cmp	r1, #31
    7428:	bf08      	it	eq
    742a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    742c:	b34b      	cbz	r3, 7482 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    742e:	2b1f      	cmp	r3, #31
    7430:	bf08      	it	eq
    7432:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    7434:	b33a      	cbz	r2, 7486 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    7436:	2a07      	cmp	r2, #7
    7438:	bf08      	it	eq
    743a:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    743c:	f003 031f 	and.w	r3, r3, #31
    7440:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    7444:	0312      	lsls	r2, r2, #12
    7446:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    744a:	4313      	orrs	r3, r2
    744c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    7450:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7452:	78d3      	ldrb	r3, [r2, #3]
    7454:	f043 0303 	orr.w	r3, r3, #3
    7458:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    745a:	78d3      	ldrb	r3, [r2, #3]
    745c:	f043 030c 	orr.w	r3, r3, #12
    7460:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7462:	2304      	movs	r3, #4
    7464:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7466:	7893      	ldrb	r3, [r2, #2]
    7468:	f013 0f03 	tst.w	r3, #3
    746c:	d1fb      	bne.n	7466 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    746e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7472:	4a06      	ldr	r2, [pc, #24]	; (748c <_usb_d_dev_init+0xf8>)
    7474:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7476:	2201      	movs	r2, #1
    7478:	811a      	strh	r2, [r3, #8]
}
    747a:	2000      	movs	r0, #0
    747c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    747e:	2109      	movs	r1, #9
    7480:	e7d4      	b.n	742c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    7482:	2319      	movs	r3, #25
    7484:	e7d6      	b.n	7434 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    7486:	2206      	movs	r2, #6
    7488:	e7d8      	b.n	743c <_usb_d_dev_init+0xa8>
    748a:	bf00      	nop
    748c:	20000db4 	.word	0x20000db4
    7490:	00006b05 	.word	0x00006b05
    7494:	00006d51 	.word	0x00006d51
    7498:	00800084 	.word	0x00800084

0000749c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    749c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    74a0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    74a2:	f013 0f03 	tst.w	r3, #3
    74a6:	d129      	bne.n	74fc <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    74a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    74ac:	7893      	ldrb	r3, [r2, #2]
    74ae:	f013 0f03 	tst.w	r3, #3
    74b2:	d1fb      	bne.n	74ac <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    74b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    74bc:	f013 0f02 	tst.w	r3, #2
    74c0:	d108      	bne.n	74d4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    74c2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    74c6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    74ca:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    74cc:	7893      	ldrb	r3, [r2, #2]
    74ce:	f013 0f03 	tst.w	r3, #3
    74d2:	d1fb      	bne.n	74cc <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74d4:	4b0b      	ldr	r3, [pc, #44]	; (7504 <_usb_d_dev_enable+0x68>)
    74d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    74da:	609a      	str	r2, [r3, #8]
    74dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    74e0:	609a      	str	r2, [r3, #8]
    74e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    74e6:	609a      	str	r2, [r3, #8]
    74e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    74ec:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    74ee:	f240 228d 	movw	r2, #653	; 0x28d
    74f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    74f6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    74f8:	2000      	movs	r0, #0
    74fa:	4770      	bx	lr
		return -USB_ERR_DENIED;
    74fc:	f06f 0010 	mvn.w	r0, #16
}
    7500:	4770      	bx	lr
    7502:	bf00      	nop
    7504:	e000e100 	.word	0xe000e100

00007508 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7508:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    750c:	8913      	ldrh	r3, [r2, #8]
    750e:	f023 0301 	bic.w	r3, r3, #1
    7512:	041b      	lsls	r3, r3, #16
    7514:	0c1b      	lsrs	r3, r3, #16
    7516:	8113      	strh	r3, [r2, #8]
    7518:	4770      	bx	lr

0000751a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    751a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    751e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7522:	7298      	strb	r0, [r3, #10]
    7524:	4770      	bx	lr
	...

00007528 <_usb_d_dev_ep_init>:
{
    7528:	b5f0      	push	{r4, r5, r6, r7, lr}
    752a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    752e:	f010 050f 	ands.w	r5, r0, #15
    7532:	d04d      	beq.n	75d0 <_usb_d_dev_ep_init+0xa8>
    7534:	f1be 0f00 	cmp.w	lr, #0
    7538:	bfb4      	ite	lt
    753a:	1d6c      	addlt	r4, r5, #5
    753c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    753e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    7542:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    7544:	2d05      	cmp	r5, #5
    7546:	d947      	bls.n	75d8 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    7548:	f06f 0011 	mvn.w	r0, #17
    754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    754e:	f1be 0f00 	cmp.w	lr, #0
    7552:	db1b      	blt.n	758c <_usb_d_dev_ep_init+0x64>
    7554:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    7558:	4e37      	ldr	r6, [pc, #220]	; (7638 <_usb_d_dev_ep_init+0x110>)
    755a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    755e:	2d00      	cmp	r5, #0
    7560:	d15e      	bne.n	7620 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    7562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7566:	4d34      	ldr	r5, [pc, #208]	; (7638 <_usb_d_dev_ep_init+0x110>)
    7568:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    756c:	4d33      	ldr	r5, [pc, #204]	; (763c <_usb_d_dev_ep_init+0x114>)
    756e:	00a6      	lsls	r6, r4, #2
    7570:	1933      	adds	r3, r6, r4
    7572:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    7576:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    757a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    757e:	3101      	adds	r1, #1
    7580:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    7584:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    7588:	2000      	movs	r0, #0
    758a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    758c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    7590:	4e29      	ldr	r6, [pc, #164]	; (7638 <_usb_d_dev_ep_init+0x110>)
    7592:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    7596:	686d      	ldr	r5, [r5, #4]
    7598:	b935      	cbnz	r5, 75a8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    759a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    759e:	4d26      	ldr	r5, [pc, #152]	; (7638 <_usb_d_dev_ep_init+0x110>)
    75a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    75a4:	685f      	ldr	r7, [r3, #4]
    75a6:	e7e1      	b.n	756c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    75a8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    75ac:	4e22      	ldr	r6, [pc, #136]	; (7638 <_usb_d_dev_ep_init+0x110>)
    75ae:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    75b2:	896d      	ldrh	r5, [r5, #10]
    75b4:	4295      	cmp	r5, r2
    75b6:	daf0      	bge.n	759a <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    75b8:	f06f 0012 	mvn.w	r0, #18
    75bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    75be:	f06f 0013 	mvn.w	r0, #19
    75c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    75c4:	f06f 0013 	mvn.w	r0, #19
    75c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    75ca:	f06f 0012 	mvn.w	r0, #18
    75ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    75d0:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    75d4:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    75d6:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    75d8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    75dc:	4f17      	ldr	r7, [pc, #92]	; (763c <_usb_d_dev_ep_init+0x114>)
    75de:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    75e2:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    75e6:	2eff      	cmp	r6, #255	; 0xff
    75e8:	d1e9      	bne.n	75be <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    75ea:	2900      	cmp	r1, #0
    75ec:	d1af      	bne.n	754e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    75ee:	b125      	cbz	r5, 75fa <_usb_d_dev_ep_init+0xd2>
    75f0:	f1be 0f00 	cmp.w	lr, #0
    75f4:	bfa4      	itt	ge
    75f6:	3505      	addge	r5, #5
    75f8:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    75fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    75fe:	4e0f      	ldr	r6, [pc, #60]	; (763c <_usb_d_dev_ep_init+0x114>)
    7600:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    7604:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    7608:	2dff      	cmp	r5, #255	; 0xff
    760a:	d1db      	bne.n	75c4 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    760c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    7610:	4e09      	ldr	r6, [pc, #36]	; (7638 <_usb_d_dev_ep_init+0x110>)
    7612:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    7616:	2d00      	cmp	r5, #0
    7618:	d0d7      	beq.n	75ca <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    761a:	f1be 0f00 	cmp.w	lr, #0
    761e:	dbb5      	blt.n	758c <_usb_d_dev_ep_init+0x64>
    7620:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    7624:	4e04      	ldr	r6, [pc, #16]	; (7638 <_usb_d_dev_ep_init+0x110>)
    7626:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    762a:	892d      	ldrh	r5, [r5, #8]
    762c:	4295      	cmp	r5, r2
    762e:	da98      	bge.n	7562 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    7630:	f06f 0012 	mvn.w	r0, #18
    7634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7636:	bf00      	nop
    7638:	0000b1d4 	.word	0x0000b1d4
    763c:	20000db4 	.word	0x20000db4

00007640 <_usb_d_dev_ep_deinit>:
{
    7640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7642:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    7644:	f010 060f 	ands.w	r6, r0, #15
    7648:	d00e      	beq.n	7668 <_usb_d_dev_ep_deinit+0x28>
    764a:	2f00      	cmp	r7, #0
    764c:	bfb4      	ite	lt
    764e:	1d73      	addlt	r3, r6, #5
    7650:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    7652:	2e05      	cmp	r6, #5
    7654:	d900      	bls.n	7658 <_usb_d_dev_ep_deinit+0x18>
    7656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    7658:	461d      	mov	r5, r3
    765a:	3301      	adds	r3, #1
    765c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7660:	4a24      	ldr	r2, [pc, #144]	; (76f4 <_usb_d_dev_ep_deinit+0xb4>)
    7662:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    7666:	e002      	b.n	766e <_usb_d_dev_ep_deinit+0x2e>
    7668:	f8df e094 	ldr.w	lr, [pc, #148]	; 7700 <_usb_d_dev_ep_deinit+0xc0>
    766c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    766e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7672:	4a21      	ldr	r2, [pc, #132]	; (76f8 <_usb_d_dev_ep_deinit+0xb8>)
    7674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7678:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    767c:	2aff      	cmp	r2, #255	; 0xff
    767e:	d0ea      	beq.n	7656 <_usb_d_dev_ep_deinit+0x16>
    7680:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    7682:	2203      	movs	r2, #3
    7684:	0ff9      	lsrs	r1, r7, #31
    7686:	4670      	mov	r0, lr
    7688:	4b1c      	ldr	r3, [pc, #112]	; (76fc <_usb_d_dev_ep_deinit+0xbc>)
    768a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    768c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7690:	4a19      	ldr	r2, [pc, #100]	; (76f8 <_usb_d_dev_ep_deinit+0xb8>)
    7692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7696:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    769a:	f003 0307 	and.w	r3, r3, #7
    769e:	2b01      	cmp	r3, #1
    76a0:	d016      	beq.n	76d0 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    76a2:	2f00      	cmp	r7, #0
    76a4:	db1b      	blt.n	76de <_usb_d_dev_ep_deinit+0x9e>
    76a6:	0160      	lsls	r0, r4, #5
    76a8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    76ac:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    76b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    76b4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    76b8:	4b0f      	ldr	r3, [pc, #60]	; (76f8 <_usb_d_dev_ep_deinit+0xb8>)
    76ba:	00aa      	lsls	r2, r5, #2
    76bc:	1951      	adds	r1, r2, r5
    76be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    76c2:	2000      	movs	r0, #0
    76c4:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    76c8:	22ff      	movs	r2, #255	; 0xff
    76ca:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    76ce:	e7c2      	b.n	7656 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    76d0:	0160      	lsls	r0, r4, #5
    76d2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    76d6:	2300      	movs	r3, #0
    76d8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    76dc:	e7ec      	b.n	76b8 <_usb_d_dev_ep_deinit+0x78>
    76de:	0176      	lsls	r6, r6, #5
    76e0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    76e4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    76e8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    76ec:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    76f0:	e7e2      	b.n	76b8 <_usb_d_dev_ep_deinit+0x78>
    76f2:	bf00      	nop
    76f4:	20000e74 	.word	0x20000e74
    76f8:	20000db4 	.word	0x20000db4
    76fc:	00006be5 	.word	0x00006be5
    7700:	20000e88 	.word	0x20000e88

00007704 <_usb_d_dev_ep_enable>:
{
    7704:	b4f0      	push	{r4, r5, r6, r7}
    7706:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    7708:	f010 000f 	ands.w	r0, r0, #15
    770c:	f000 80a7 	beq.w	785e <_usb_d_dev_ep_enable+0x15a>
    7710:	2e00      	cmp	r6, #0
    7712:	bfb4      	ite	lt
    7714:	1d43      	addlt	r3, r0, #5
    7716:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7718:	4605      	mov	r5, r0
    771a:	0142      	lsls	r2, r0, #5
    771c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7720:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    7724:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    7726:	2805      	cmp	r0, #5
    7728:	f240 80a0 	bls.w	786c <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    772c:	f06f 0011 	mvn.w	r0, #17
    7730:	e07d      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    7732:	f014 0f77 	tst.w	r4, #119	; 0x77
    7736:	f040 8089 	bne.w	784c <_usb_d_dev_ep_enable+0x148>
    773a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    773e:	2111      	movs	r1, #17
    7740:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    7744:	4c9b      	ldr	r4, [pc, #620]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    7746:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    774a:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    774e:	4c9a      	ldr	r4, [pc, #616]	; (79b8 <_usb_d_dev_ep_enable+0x2b4>)
    7750:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7754:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7758:	f200 80cd 	bhi.w	78f6 <_usb_d_dev_ep_enable+0x1f2>
    775c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    7760:	f200 8112 	bhi.w	7988 <_usb_d_dev_ep_enable+0x284>
    7764:	2980      	cmp	r1, #128	; 0x80
    7766:	f200 8101 	bhi.w	796c <_usb_d_dev_ep_enable+0x268>
    776a:	2940      	cmp	r1, #64	; 0x40
    776c:	f200 8113 	bhi.w	7996 <_usb_d_dev_ep_enable+0x292>
    7770:	2920      	cmp	r1, #32
    7772:	f200 8102 	bhi.w	797a <_usb_d_dev_ep_enable+0x276>
    7776:	2910      	cmp	r1, #16
    7778:	f200 8114 	bhi.w	79a4 <_usb_d_dev_ep_enable+0x2a0>
    777c:	2908      	cmp	r1, #8
    777e:	bf94      	ite	ls
    7780:	2600      	movls	r6, #0
    7782:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7784:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    7788:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    778a:	f3c1 010d 	ubfx	r1, r1, #0, #14
    778e:	e0b8      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    7790:	f014 0f70 	tst.w	r4, #112	; 0x70
    7794:	d15d      	bne.n	7852 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    7796:	4e87      	ldr	r6, [pc, #540]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    7798:	009f      	lsls	r7, r3, #2
    779a:	18f9      	adds	r1, r7, r3
    779c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    77a0:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    77a4:	0109      	lsls	r1, r1, #4
    77a6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    77aa:	430c      	orrs	r4, r1
    77ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    77b0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    77b4:	443b      	add	r3, r7
    77b6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    77ba:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    77be:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    77c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    77c6:	d80f      	bhi.n	77e8 <_usb_d_dev_ep_enable+0xe4>
    77c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    77cc:	d819      	bhi.n	7802 <_usb_d_dev_ep_enable+0xfe>
    77ce:	2b80      	cmp	r3, #128	; 0x80
    77d0:	d819      	bhi.n	7806 <_usb_d_dev_ep_enable+0x102>
    77d2:	2b40      	cmp	r3, #64	; 0x40
    77d4:	d819      	bhi.n	780a <_usb_d_dev_ep_enable+0x106>
    77d6:	2b20      	cmp	r3, #32
    77d8:	d819      	bhi.n	780e <_usb_d_dev_ep_enable+0x10a>
    77da:	2b10      	cmp	r3, #16
    77dc:	d819      	bhi.n	7812 <_usb_d_dev_ep_enable+0x10e>
    77de:	2b08      	cmp	r3, #8
    77e0:	bf94      	ite	ls
    77e2:	2300      	movls	r3, #0
    77e4:	2301      	movhi	r3, #1
    77e6:	e000      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    77e8:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    77ea:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    77ee:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    77f0:	2380      	movs	r3, #128	; 0x80
    77f2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    77f6:	4b6f      	ldr	r3, [pc, #444]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    77f8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    77fc:	2000      	movs	r0, #0
    77fe:	76a8      	strb	r0, [r5, #26]
    7800:	e015      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7802:	2306      	movs	r3, #6
    7804:	e7f1      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    7806:	2305      	movs	r3, #5
    7808:	e7ef      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    780a:	2304      	movs	r3, #4
    780c:	e7ed      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    780e:	2303      	movs	r3, #3
    7810:	e7eb      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    7812:	2302      	movs	r3, #2
    7814:	e7e9      	b.n	77ea <_usb_d_dev_ep_enable+0xe6>
    7816:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7818:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    781c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    781e:	2340      	movs	r3, #64	; 0x40
    7820:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    7824:	4b63      	ldr	r3, [pc, #396]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    7826:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    782a:	2000      	movs	r0, #0
    782c:	72a8      	strb	r0, [r5, #10]
}
    782e:	bcf0      	pop	{r4, r5, r6, r7}
    7830:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7832:	2106      	movs	r1, #6
    7834:	e7f0      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
    7836:	2105      	movs	r1, #5
    7838:	e7ee      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
    783a:	2104      	movs	r1, #4
    783c:	e7ec      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
    783e:	2103      	movs	r1, #3
    7840:	e7ea      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
    7842:	2102      	movs	r1, #2
    7844:	e7e8      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    7846:	f06f 0011 	mvn.w	r0, #17
    784a:	e7f0      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    784c:	f06f 0013 	mvn.w	r0, #19
    7850:	e7ed      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    7852:	f06f 0013 	mvn.w	r0, #19
    7856:	e7ea      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    7858:	f06f 0013 	mvn.w	r0, #19
    785c:	e7e7      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    785e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7862:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    7866:	b2e4      	uxtb	r4, r4
    7868:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    786a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    786c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    7870:	4950      	ldr	r1, [pc, #320]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    7872:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7876:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    787a:	2aff      	cmp	r2, #255	; 0xff
    787c:	d0e3      	beq.n	7846 <_usb_d_dev_ep_enable+0x142>
    787e:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    7880:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    7882:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    7886:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    788a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    788e:	f001 0107 	and.w	r1, r1, #7
    7892:	2901      	cmp	r1, #1
    7894:	f43f af4d 	beq.w	7732 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    7898:	2e00      	cmp	r6, #0
    789a:	f6ff af79 	blt.w	7790 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    789e:	f014 0f07 	tst.w	r4, #7
    78a2:	d1d9      	bne.n	7858 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    78a4:	4e43      	ldr	r6, [pc, #268]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    78a6:	009f      	lsls	r7, r3, #2
    78a8:	18f9      	adds	r1, r7, r3
    78aa:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    78ae:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    78b2:	f001 0107 	and.w	r1, r1, #7
    78b6:	430c      	orrs	r4, r1
    78b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    78bc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    78c0:	443b      	add	r3, r7
    78c2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    78c6:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    78ca:	4b3b      	ldr	r3, [pc, #236]	; (79b8 <_usb_d_dev_ep_enable+0x2b4>)
    78cc:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    78d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    78d4:	d89f      	bhi.n	7816 <_usb_d_dev_ep_enable+0x112>
    78d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    78da:	d8aa      	bhi.n	7832 <_usb_d_dev_ep_enable+0x12e>
    78dc:	2980      	cmp	r1, #128	; 0x80
    78de:	d8aa      	bhi.n	7836 <_usb_d_dev_ep_enable+0x132>
    78e0:	2940      	cmp	r1, #64	; 0x40
    78e2:	d8aa      	bhi.n	783a <_usb_d_dev_ep_enable+0x136>
    78e4:	2920      	cmp	r1, #32
    78e6:	d8aa      	bhi.n	783e <_usb_d_dev_ep_enable+0x13a>
    78e8:	2910      	cmp	r1, #16
    78ea:	d8aa      	bhi.n	7842 <_usb_d_dev_ep_enable+0x13e>
    78ec:	2908      	cmp	r1, #8
    78ee:	bf94      	ite	ls
    78f0:	2100      	movls	r1, #0
    78f2:	2101      	movhi	r1, #1
    78f4:	e790      	b.n	7818 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    78f6:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    78fa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    78fc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7900:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7902:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    7906:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7908:	2640      	movs	r6, #64	; 0x40
    790a:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    790e:	2180      	movs	r1, #128	; 0x80
    7910:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    7914:	4f27      	ldr	r7, [pc, #156]	; (79b4 <_usb_d_dev_ep_enable+0x2b0>)
    7916:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    791a:	2000      	movs	r0, #0
    791c:	72a8      	strb	r0, [r5, #10]
    791e:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7920:	009c      	lsls	r4, r3, #2
    7922:	18e1      	adds	r1, r4, r3
    7924:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    7928:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    792c:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7930:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    7934:	0152      	lsls	r2, r2, #5
    7936:	18b9      	adds	r1, r7, r2
    7938:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    793a:	4423      	add	r3, r4
    793c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7940:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    7944:	684b      	ldr	r3, [r1, #4]
    7946:	f364 339b 	bfi	r3, r4, #14, #14
    794a:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    794c:	684b      	ldr	r3, [r1, #4]
    794e:	f360 030d 	bfi	r3, r0, #0, #14
    7952:	604b      	str	r3, [r1, #4]
    7954:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    7958:	21b0      	movs	r1, #176	; 0xb0
    795a:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    795e:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7962:	461a      	mov	r2, r3
    7964:	2310      	movs	r3, #16
    7966:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    796a:	e760      	b.n	782e <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    796c:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    7970:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7972:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7976:	2605      	movs	r6, #5
    7978:	e7c3      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    797a:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    797e:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7980:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7984:	2603      	movs	r6, #3
    7986:	e7bc      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7988:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    798c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    798e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    7992:	2606      	movs	r6, #6
    7994:	e7b5      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    7996:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    799a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    799c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    79a0:	2604      	movs	r6, #4
    79a2:	e7ae      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    79a4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    79a8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    79aa:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    79ae:	2602      	movs	r6, #2
    79b0:	e7a7      	b.n	7902 <_usb_d_dev_ep_enable+0x1fe>
    79b2:	bf00      	nop
    79b4:	20000db4 	.word	0x20000db4
    79b8:	0fffc000 	.word	0x0fffc000

000079bc <_usb_d_dev_ep_stall>:
{
    79bc:	b470      	push	{r4, r5, r6}
    79be:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    79c0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    79c2:	f010 000f 	ands.w	r0, r0, #15
    79c6:	d008      	beq.n	79da <_usb_d_dev_ep_stall+0x1e>
    79c8:	2b00      	cmp	r3, #0
    79ca:	bfb4      	ite	lt
    79cc:	1d43      	addlt	r3, r0, #5
    79ce:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    79d0:	2805      	cmp	r0, #5
    79d2:	d903      	bls.n	79dc <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    79d4:	f06f 0011 	mvn.w	r0, #17
    79d8:	e018      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    79da:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    79dc:	2901      	cmp	r1, #1
    79de:	d017      	beq.n	7a10 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    79e0:	2900      	cmp	r1, #0
    79e2:	d03a      	beq.n	7a5a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    79e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    79e8:	4a45      	ldr	r2, [pc, #276]	; (7b00 <_usb_d_dev_ep_stall+0x144>)
    79ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    79ee:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    79f2:	f003 030f 	and.w	r3, r3, #15
    79f6:	015b      	lsls	r3, r3, #5
    79f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    79fc:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7a00:	2310      	movs	r3, #16
    7a02:	40a3      	lsls	r3, r4
    7a04:	421a      	tst	r2, r3
    7a06:	bf14      	ite	ne
    7a08:	2001      	movne	r0, #1
    7a0a:	2000      	moveq	r0, #0
}
    7a0c:	bc70      	pop	{r4, r5, r6}
    7a0e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7a10:	2510      	movs	r5, #16
    7a12:	40a5      	lsls	r5, r4
    7a14:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7a16:	493a      	ldr	r1, [pc, #232]	; (7b00 <_usb_d_dev_ep_stall+0x144>)
    7a18:	009e      	lsls	r6, r3, #2
    7a1a:	18f2      	adds	r2, r6, r3
    7a1c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7a20:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7a24:	f002 020f 	and.w	r2, r2, #15
    7a28:	0150      	lsls	r0, r2, #5
    7a2a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7a2e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    7a32:	2020      	movs	r0, #32
    7a34:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    7a38:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7a3a:	0152      	lsls	r2, r2, #5
    7a3c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a40:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    7a44:	4433      	add	r3, r6
    7a46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7a4a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    7a4e:	f042 0208 	orr.w	r2, r2, #8
    7a52:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    7a56:	2000      	movs	r0, #0
    7a58:	e7d8      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    7a5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    7a5e:	4928      	ldr	r1, [pc, #160]	; (7b00 <_usb_d_dev_ep_stall+0x144>)
    7a60:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7a64:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    7a68:	f002 020f 	and.w	r2, r2, #15
    7a6c:	0151      	lsls	r1, r2, #5
    7a6e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7a72:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7a76:	2010      	movs	r0, #16
    7a78:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    7a7a:	4205      	tst	r5, r0
    7a7c:	d03c      	beq.n	7af8 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7a7e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7a80:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    7a84:	2020      	movs	r0, #32
    7a86:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    7a88:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a8a:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7a8e:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    7a92:	4202      	tst	r2, r0
    7a94:	d007      	beq.n	7aa6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a96:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    7a9a:	2201      	movs	r2, #1
    7a9c:	fa02 f404 	lsl.w	r4, r2, r4
    7aa0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7aa2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    7aa6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    7aaa:	4815      	ldr	r0, [pc, #84]	; (7b00 <_usb_d_dev_ep_stall+0x144>)
    7aac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7ab0:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    7ab4:	f002 0207 	and.w	r2, r2, #7
    7ab8:	2a01      	cmp	r2, #1
    7aba:	d00c      	beq.n	7ad6 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    7abc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7ac0:	4a0f      	ldr	r2, [pc, #60]	; (7b00 <_usb_d_dev_ep_stall+0x144>)
    7ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ac6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    7aca:	f36f 02c3 	bfc	r2, #3, #1
    7ace:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    7ad2:	2000      	movs	r0, #0
    7ad4:	e79a      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7ad6:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    7ada:	f012 0f30 	tst.w	r2, #48	; 0x30
    7ade:	d10d      	bne.n	7afc <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    7ae0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    7ae4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7ae8:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    7aec:	f36f 02c3 	bfc	r2, #3, #1
    7af0:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    7af4:	2000      	movs	r0, #0
    7af6:	e789      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
    7af8:	2000      	movs	r0, #0
    7afa:	e787      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
    7afc:	2000      	movs	r0, #0
    7afe:	e785      	b.n	7a0c <_usb_d_dev_ep_stall+0x50>
    7b00:	20000db4 	.word	0x20000db4

00007b04 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    7b04:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    7b06:	f000 040f 	and.w	r4, r0, #15
    7b0a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    7b0c:	4a14      	ldr	r2, [pc, #80]	; (7b60 <_usb_d_dev_ep_read_req+0x5c>)
    7b0e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    7b10:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    7b12:	6840      	ldr	r0, [r0, #4]
    7b14:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    7b18:	2c05      	cmp	r4, #5
    7b1a:	d817      	bhi.n	7b4c <_usb_d_dev_ep_read_req+0x48>
    7b1c:	b1c9      	cbz	r1, 7b52 <_usb_d_dev_ep_read_req+0x4e>
    7b1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7b22:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    7b26:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    7b28:	2a11      	cmp	r2, #17
    7b2a:	d115      	bne.n	7b58 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7b2c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    7b30:	f012 0f10 	tst.w	r2, #16
    7b34:	d102      	bne.n	7b3c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    7b36:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    7b38:	bc30      	pop	{r4, r5}
    7b3a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    7b3c:	682c      	ldr	r4, [r5, #0]
    7b3e:	686a      	ldr	r2, [r5, #4]
    7b40:	600c      	str	r4, [r1, #0]
    7b42:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7b44:	2210      	movs	r2, #16
    7b46:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    7b4a:	e7f5      	b.n	7b38 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    7b4c:	f06f 0011 	mvn.w	r0, #17
    7b50:	e7f2      	b.n	7b38 <_usb_d_dev_ep_read_req+0x34>
    7b52:	f06f 0011 	mvn.w	r0, #17
    7b56:	e7ef      	b.n	7b38 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    7b58:	f06f 0012 	mvn.w	r0, #18
    7b5c:	e7ec      	b.n	7b38 <_usb_d_dev_ep_read_req+0x34>
    7b5e:	bf00      	nop
    7b60:	20000db4 	.word	0x20000db4

00007b64 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    7b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b68:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    7b6a:	7a03      	ldrb	r3, [r0, #8]
    7b6c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    7b6e:	f013 030f 	ands.w	r3, r3, #15
    7b72:	f000 80c2 	beq.w	7cfa <_usb_d_dev_ep_trans+0x196>
    7b76:	2e00      	cmp	r6, #0
    7b78:	bfb4      	ite	lt
    7b7a:	1d5a      	addlt	r2, r3, #5
    7b7c:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    7b7e:	4614      	mov	r4, r2
    7b80:	4969      	ldr	r1, [pc, #420]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7b82:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    7b86:	1c55      	adds	r5, r2, #1
    7b88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7b8c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7b90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    7b94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7b98:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    7b9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    7ba0:	428a      	cmp	r2, r1
    7ba2:	d025      	beq.n	7bf0 <_usb_d_dev_ep_trans+0x8c>
    7ba4:	1e55      	subs	r5, r2, #1
    7ba6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    7ba8:	6841      	ldr	r1, [r0, #4]
    7baa:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    7bac:	2b05      	cmp	r3, #5
    7bae:	f200 8092 	bhi.w	7cd6 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    7bb2:	6803      	ldr	r3, [r0, #0]
    7bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7bb8:	d31c      	bcc.n	7bf4 <_usb_d_dev_ep_trans+0x90>
    7bba:	eb03 0c01 	add.w	ip, r3, r1
    7bbe:	f8df e180 	ldr.w	lr, [pc, #384]	; 7d40 <_usb_d_dev_ep_trans+0x1dc>
    7bc2:	45f4      	cmp	ip, lr
    7bc4:	d816      	bhi.n	7bf4 <_usb_d_dev_ep_trans+0x90>
    7bc6:	f013 0f03 	tst.w	r3, #3
    7bca:	d113      	bne.n	7bf4 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    7bcc:	2e00      	cmp	r6, #0
    7bce:	db2a      	blt.n	7c26 <_usb_d_dev_ep_trans+0xc2>
    7bd0:	428a      	cmp	r2, r1
    7bd2:	f200 809c 	bhi.w	7d0e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    7bd6:	b34d      	cbz	r5, 7c2c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    7bd8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7bdc:	4a52      	ldr	r2, [pc, #328]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    7be6:	2b00      	cmp	r3, #0
    7be8:	d07b      	beq.n	7ce2 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    7bea:	f04f 0800 	mov.w	r8, #0
    7bee:	e00c      	b.n	7c0a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7bf0:	4615      	mov	r5, r2
    7bf2:	e7d9      	b.n	7ba8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    7bf4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7bf8:	4a4b      	ldr	r2, [pc, #300]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    7c02:	2b00      	cmp	r3, #0
    7c04:	d06a      	beq.n	7cdc <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    7c06:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    7c0a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7c0e:	4a46      	ldr	r2, [pc, #280]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7c10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7c14:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    7c18:	f013 0f08 	tst.w	r3, #8
    7c1c:	d009      	beq.n	7c32 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    7c1e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    7c20:	b003      	add	sp, #12
    7c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    7c26:	f04f 0800 	mov.w	r8, #0
    7c2a:	e7ee      	b.n	7c0a <_usb_d_dev_ep_trans+0xa6>
    7c2c:	f04f 0800 	mov.w	r8, #0
    7c30:	e7eb      	b.n	7c0a <_usb_d_dev_ep_trans+0xa6>
    7c32:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    7c34:	a801      	add	r0, sp, #4
    7c36:	4b3d      	ldr	r3, [pc, #244]	; (7d2c <_usb_d_dev_ep_trans+0x1c8>)
    7c38:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    7c3a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7c3e:	4a3a      	ldr	r2, [pc, #232]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7c44:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    7c48:	f013 0f40 	tst.w	r3, #64	; 0x40
    7c4c:	d13c      	bne.n	7cc8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    7c4e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    7c52:	4b35      	ldr	r3, [pc, #212]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7c54:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    7c58:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    7c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c60:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    7c64:	a801      	add	r0, sp, #4
    7c66:	4b32      	ldr	r3, [pc, #200]	; (7d30 <_usb_d_dev_ep_trans+0x1cc>)
    7c68:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    7c6a:	f8da 3000 	ldr.w	r3, [sl]
    7c6e:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    7c72:	f8da 3004 	ldr.w	r3, [sl, #4]
    7c76:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    7c7a:	2300      	movs	r3, #0
    7c7c:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    7c80:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    7c82:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    7c86:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    7c8a:	f368 1345 	bfi	r3, r8, #5, #1
    7c8e:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    7c92:	f89a 3009 	ldrb.w	r3, [sl, #9]
    7c96:	b1e3      	cbz	r3, 7cd2 <_usb_d_dev_ep_trans+0x16e>
    7c98:	fab5 f585 	clz	r5, r5
    7c9c:	096d      	lsrs	r5, r5, #5
    7c9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7ca2:	4b21      	ldr	r3, [pc, #132]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7ca4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7ca8:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    7cac:	f365 1304 	bfi	r3, r5, #4, #1
    7cb0:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    7cb4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    7cb6:	f04f 0100 	mov.w	r1, #0
    7cba:	4638      	mov	r0, r7
    7cbc:	bfb4      	ite	lt
    7cbe:	4b1d      	ldrlt	r3, [pc, #116]	; (7d34 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    7cc0:	4b1d      	ldrge	r3, [pc, #116]	; (7d38 <_usb_d_dev_ep_trans+0x1d4>)
    7cc2:	4798      	blx	r3
	return ERR_NONE;
    7cc4:	2000      	movs	r0, #0
    7cc6:	e7ab      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    7cc8:	a801      	add	r0, sp, #4
    7cca:	4b19      	ldr	r3, [pc, #100]	; (7d30 <_usb_d_dev_ep_trans+0x1cc>)
    7ccc:	4798      	blx	r3
		return USB_BUSY;
    7cce:	2001      	movs	r0, #1
    7cd0:	e7a6      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
    7cd2:	2500      	movs	r5, #0
    7cd4:	e7e3      	b.n	7c9e <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    7cd6:	f06f 0011 	mvn.w	r0, #17
    7cda:	e7a1      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    7cdc:	f06f 0012 	mvn.w	r0, #18
    7ce0:	e79e      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    7ce2:	f06f 0011 	mvn.w	r0, #17
    7ce6:	e79b      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    7ce8:	f06f 0012 	mvn.w	r0, #18
    7cec:	e798      	b.n	7c20 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    7cee:	6841      	ldr	r1, [r0, #4]
    7cf0:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    7cf4:	4f11      	ldr	r7, [pc, #68]	; (7d3c <_usb_d_dev_ep_trans+0x1d8>)
    7cf6:	2400      	movs	r4, #0
    7cf8:	e75b      	b.n	7bb2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7cfa:	4a0b      	ldr	r2, [pc, #44]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7cfc:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    7d00:	f240 31ff 	movw	r1, #1023	; 0x3ff
    7d04:	428a      	cmp	r2, r1
    7d06:	d0f2      	beq.n	7cee <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    7d08:	4f0c      	ldr	r7, [pc, #48]	; (7d3c <_usb_d_dev_ep_trans+0x1d8>)
    7d0a:	2400      	movs	r4, #0
    7d0c:	e74a      	b.n	7ba4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    7d0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7d12:	4a05      	ldr	r2, [pc, #20]	; (7d28 <_usb_d_dev_ep_trans+0x1c4>)
    7d14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d0e3      	beq.n	7ce8 <_usb_d_dev_ep_trans+0x184>
    7d20:	f04f 0801 	mov.w	r8, #1
    7d24:	e771      	b.n	7c0a <_usb_d_dev_ep_trans+0xa6>
    7d26:	bf00      	nop
    7d28:	20000db4 	.word	0x20000db4
    7d2c:	00003371 	.word	0x00003371
    7d30:	0000337f 	.word	0x0000337f
    7d34:	00006d95 	.word	0x00006d95
    7d38:	00006f19 	.word	0x00006f19
    7d3c:	20000e88 	.word	0x20000e88
    7d40:	20041fff 	.word	0x20041fff

00007d44 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    7d44:	4b07      	ldr	r3, [pc, #28]	; (7d64 <_usb_d_dev_register_callback+0x20>)
    7d46:	2900      	cmp	r1, #0
    7d48:	bf08      	it	eq
    7d4a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    7d4c:	2801      	cmp	r0, #1
    7d4e:	d004      	beq.n	7d5a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    7d50:	b910      	cbnz	r0, 7d58 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    7d52:	4b05      	ldr	r3, [pc, #20]	; (7d68 <_usb_d_dev_register_callback+0x24>)
    7d54:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    7d58:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    7d5a:	4b03      	ldr	r3, [pc, #12]	; (7d68 <_usb_d_dev_register_callback+0x24>)
    7d5c:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    7d60:	4770      	bx	lr
    7d62:	bf00      	nop
    7d64:	00006b05 	.word	0x00006b05
    7d68:	20000db4 	.word	0x20000db4

00007d6c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    7d6c:	4b0a      	ldr	r3, [pc, #40]	; (7d98 <_usb_d_dev_register_ep_callback+0x2c>)
    7d6e:	2900      	cmp	r1, #0
    7d70:	bf08      	it	eq
    7d72:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    7d74:	4603      	mov	r3, r0
    7d76:	b138      	cbz	r0, 7d88 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    7d78:	2801      	cmp	r0, #1
    7d7a:	d009      	beq.n	7d90 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    7d7c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    7d7e:	bf04      	itt	eq
    7d80:	4b06      	ldreq	r3, [pc, #24]	; (7d9c <_usb_d_dev_register_ep_callback+0x30>)
    7d82:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    7d86:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    7d88:	4b04      	ldr	r3, [pc, #16]	; (7d9c <_usb_d_dev_register_ep_callback+0x30>)
    7d8a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    7d8e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    7d90:	4b02      	ldr	r3, [pc, #8]	; (7d9c <_usb_d_dev_register_ep_callback+0x30>)
    7d92:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    7d96:	4770      	bx	lr
    7d98:	00006b05 	.word	0x00006b05
    7d9c:	20000db4 	.word	0x20000db4

00007da0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    7da0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    7da2:	4b01      	ldr	r3, [pc, #4]	; (7da8 <USB_0_Handler+0x8>)
    7da4:	4798      	blx	r3
    7da6:	bd08      	pop	{r3, pc}
    7da8:	00007109 	.word	0x00007109

00007dac <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    7dac:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    7dae:	4b01      	ldr	r3, [pc, #4]	; (7db4 <USB_1_Handler+0x8>)
    7db0:	4798      	blx	r3
    7db2:	bd08      	pop	{r3, pc}
    7db4:	00007109 	.word	0x00007109

00007db8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    7db8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    7dba:	4b01      	ldr	r3, [pc, #4]	; (7dc0 <USB_2_Handler+0x8>)
    7dbc:	4798      	blx	r3
    7dbe:	bd08      	pop	{r3, pc}
    7dc0:	00007109 	.word	0x00007109

00007dc4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    7dc4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    7dc6:	4b01      	ldr	r3, [pc, #4]	; (7dcc <USB_3_Handler+0x8>)
    7dc8:	4798      	blx	r3
    7dca:	bd08      	pop	{r3, pc}
    7dcc:	00007109 	.word	0x00007109

00007dd0 <RTC_Scheduler_realtime_cb>:
}

static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{

	realtime++;
    7dd0:	4a02      	ldr	r2, [pc, #8]	; (7ddc <RTC_Scheduler_realtime_cb+0xc>)
    7dd2:	6813      	ldr	r3, [r2, #0]
    7dd4:	3301      	adds	r3, #1
    7dd6:	6013      	str	r3, [r2, #0]
    7dd8:	4770      	bx	lr
    7dda:	bf00      	nop
    7ddc:	20001174 	.word	0x20001174

00007de0 <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    7de0:	2201      	movs	r2, #1
    7de2:	4b01      	ldr	r3, [pc, #4]	; (7de8 <RTC_Scheduler_ping_cb+0x8>)
    7de4:	711a      	strb	r2, [r3, #4]
    7de6:	4770      	bx	lr
    7de8:	20001174 	.word	0x20001174

00007dec <grid_port_receive_task>:
	if	(por->rx_double_buffer_status == 1){
    7dec:	8ac3      	ldrh	r3, [r0, #22]
    7dee:	2b01      	cmp	r3, #1
    7df0:	d048      	beq.n	7e84 <grid_port_receive_task+0x98>
void grid_port_receive_task(struct grid_port* por){
    7df2:	b530      	push	{r4, r5, lr}
    7df4:	b083      	sub	sp, #12
    7df6:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    7df8:	8a83      	ldrh	r3, [r0, #20]
    7dfa:	f644 6220 	movw	r2, #20000	; 0x4e20
    7dfe:	4293      	cmp	r3, r2
    7e00:	d91c      	bls.n	7e3c <grid_port_receive_task+0x50>
		if (por->partner_status == 1){
    7e02:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    7e06:	2b01      	cmp	r3, #1
    7e08:	d005      	beq.n	7e16 <grid_port_receive_task+0x2a>
			por->rx_double_buffer_seek_start_index = 0;
    7e0a:	2300      	movs	r3, #0
    7e0c:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    7e0e:	8343      	strh	r3, [r0, #26]
			grid_sys_port_reset_dma(por);
    7e10:	4b1d      	ldr	r3, [pc, #116]	; (7e88 <grid_port_receive_task+0x9c>)
    7e12:	4798      	blx	r3
    7e14:	e014      	b.n	7e40 <grid_port_receive_task+0x54>
			por->rx_double_buffer_seek_start_index = 0;
    7e16:	2300      	movs	r3, #0
    7e18:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    7e1a:	8343      	strh	r3, [r0, #26]
			por->partner_status = 0;
    7e1c:	f880 31e3 	strb.w	r3, [r0, #483]	; 0x1e3
			por->rx_double_buffer_timeout =0;
    7e20:	8283      	strh	r3, [r0, #20]
			grid_sys_port_reset_dma(por);
    7e22:	4b19      	ldr	r3, [pc, #100]	; (7e88 <grid_port_receive_task+0x9c>)
    7e24:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    7e26:	23c8      	movs	r3, #200	; 0xc8
    7e28:	9301      	str	r3, [sp, #4]
    7e2a:	2302      	movs	r3, #2
    7e2c:	9300      	str	r3, [sp, #0]
    7e2e:	23ff      	movs	r3, #255	; 0xff
    7e30:	461a      	mov	r2, r3
    7e32:	4619      	mov	r1, r3
    7e34:	4815      	ldr	r0, [pc, #84]	; (7e8c <grid_port_receive_task+0xa0>)
    7e36:	4d16      	ldr	r5, [pc, #88]	; (7e90 <grid_port_receive_task+0xa4>)
    7e38:	47a8      	blx	r5
    7e3a:	e001      	b.n	7e40 <grid_port_receive_task+0x54>
		por->rx_double_buffer_timeout++;
    7e3c:	3301      	adds	r3, #1
    7e3e:	8283      	strh	r3, [r0, #20]
void grid_port_receive_task(struct grid_port* por){
    7e40:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    7e42:	4d14      	ldr	r5, [pc, #80]	; (7e94 <grid_port_receive_task+0xa8>)
    7e44:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    7e46:	8b23      	ldrh	r3, [r4, #24]
    7e48:	18e2      	adds	r2, r4, r3
    7e4a:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
    7e4e:	2a0a      	cmp	r2, #10
    7e50:	d012      	beq.n	7e78 <grid_port_receive_task+0x8c>
    7e52:	b1aa      	cbz	r2, 7e80 <grid_port_receive_task+0x94>
			por->rx_double_buffer_seek_start_index++;			
    7e54:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    7e56:	b29b      	uxth	r3, r3
    7e58:	fba5 e203 	umull	lr, r2, r5, r3
    7e5c:	0992      	lsrs	r2, r2, #6
    7e5e:	fb00 3312 	mls	r3, r0, r2, r3
    7e62:	8323      	strh	r3, [r4, #24]
    7e64:	3901      	subs	r1, #1
    7e66:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    7e68:	2900      	cmp	r1, #0
    7e6a:	d1ec      	bne.n	7e46 <grid_port_receive_task+0x5a>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    7e6c:	b29b      	uxth	r3, r3
    7e6e:	4423      	add	r3, r4
    7e70:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    7e74:	2b0a      	cmp	r3, #10
    7e76:	d103      	bne.n	7e80 <grid_port_receive_task+0x94>
		por->rx_double_buffer_timeout = 0;
    7e78:	2300      	movs	r3, #0
    7e7a:	82a3      	strh	r3, [r4, #20]
		por->rx_double_buffer_status = 1;
    7e7c:	2301      	movs	r3, #1
    7e7e:	82e3      	strh	r3, [r4, #22]
}
    7e80:	b003      	add	sp, #12
    7e82:	bd30      	pop	{r4, r5, pc}
    7e84:	4770      	bx	lr
    7e86:	bf00      	nop
    7e88:	0000276d 	.word	0x0000276d
    7e8c:	20001a14 	.word	0x20001a14
    7e90:	000029e9 	.word	0x000029e9
    7e94:	51eb851f 	.word	0x51eb851f

00007e98 <RTC_Scheduler_rx_task_cb>:
{
    7e98:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    7e9a:	4805      	ldr	r0, [pc, #20]	; (7eb0 <RTC_Scheduler_rx_task_cb+0x18>)
    7e9c:	4c05      	ldr	r4, [pc, #20]	; (7eb4 <RTC_Scheduler_rx_task_cb+0x1c>)
    7e9e:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    7ea0:	4805      	ldr	r0, [pc, #20]	; (7eb8 <RTC_Scheduler_rx_task_cb+0x20>)
    7ea2:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    7ea4:	4805      	ldr	r0, [pc, #20]	; (7ebc <RTC_Scheduler_rx_task_cb+0x24>)
    7ea6:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    7ea8:	4805      	ldr	r0, [pc, #20]	; (7ec0 <RTC_Scheduler_rx_task_cb+0x28>)
    7eaa:	47a0      	blx	r4
    7eac:	bd10      	pop	{r4, pc}
    7eae:	bf00      	nop
    7eb0:	20001640 	.word	0x20001640
    7eb4:	00007ded 	.word	0x00007ded
    7eb8:	200021d8 	.word	0x200021d8
    7ebc:	20001e0c 	.word	0x20001e0c
    7ec0:	20001c24 	.word	0x20001c24

00007ec4 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint8_t startcommand, uint8_t length){
    7ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ec8:	b08f      	sub	sp, #60	; 0x3c
    7eca:	af02      	add	r7, sp, #8
    7ecc:	4605      	mov	r5, r0
    7ece:	4616      	mov	r6, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    7ed0:	2301      	movs	r3, #1
    7ed2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	response[1] = GRID_MSG_DIRECT;
    7ed6:	230e      	movs	r3, #14
    7ed8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	response[2] = GRID_MSG_NACKNOWLEDGE;
    7edc:	2315      	movs	r3, #21
    7ede:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    7ee2:	2304      	movs	r3, #4
    7ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	response[4] = '0'; //checksum
    7ee8:	2330      	movs	r3, #48	; 0x30
    7eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	response[5] = '0'; //checksum
    7eee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	response[6] = '\n';
    7ef2:	230a      	movs	r3, #10
    7ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	response[7] = 0;
    7ef8:	2300      	movs	r3, #0
    7efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	response[8] = 0;
    7efe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	response[9] = 0;
    7f02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t error_flag = 0;
    7f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t message[length];
    7f0a:	1dd3      	adds	r3, r2, #7
    7f0c:	f023 0307 	bic.w	r3, r3, #7
    7f10:	ebad 0d03 	sub.w	sp, sp, r3
    7f14:	f10d 0808 	add.w	r8, sp, #8
	for (uint8_t i = 0; i<length; i++){
    7f18:	2a00      	cmp	r2, #0
    7f1a:	f000 81e8 	beq.w	82ee <grid_port_receive_decode+0x42a>
    7f1e:	4643      	mov	r3, r8
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    7f20:	8b42      	ldrh	r2, [r0, #26]
    7f22:	f108 39ff 	add.w	r9, r8, #4294967295
    7f26:	1e71      	subs	r1, r6, #1
    7f28:	fa58 f181 	uxtab	r1, r8, r1
    7f2c:	464c      	mov	r4, r9
    7f2e:	3201      	adds	r2, #1
    7f30:	1ad2      	subs	r2, r2, r3
    7f32:	f8df e318 	ldr.w	lr, [pc, #792]	; 824c <grid_port_receive_decode+0x388>
    7f36:	20c8      	movs	r0, #200	; 0xc8
    7f38:	eb02 0c04 	add.w	ip, r2, r4
    7f3c:	fb8e 3a0c 	smull	r3, sl, lr, ip
    7f40:	ea4f 73ec 	mov.w	r3, ip, asr #31
    7f44:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    7f48:	fb00 c313 	mls	r3, r0, r3, ip
    7f4c:	442b      	add	r3, r5
    7f4e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    7f52:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint8_t i = 0; i<length; i++){
    7f56:	428c      	cmp	r4, r1
    7f58:	d1ee      	bne.n	7f38 <grid_port_receive_decode+0x74>
	if (length>5){
    7f5a:	2e05      	cmp	r6, #5
    7f5c:	d82f      	bhi.n	7fbe <grid_port_receive_decode+0xfa>
	if (message[1] == GRID_MSG_BROADCAST){				
    7f5e:	f898 3001 	ldrb.w	r3, [r8, #1]
    7f62:	2b0f      	cmp	r3, #15
    7f64:	f000 81c8 	beq.w	82f8 <grid_port_receive_decode+0x434>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    7f68:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    7f6c:	2200      	movs	r2, #0
    7f6e:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 824c <grid_port_receive_decode+0x388>
    7f72:	24c8      	movs	r4, #200	; 0xc8
    7f74:	4610      	mov	r0, r2
    7f76:	eb0c 0102 	add.w	r1, ip, r2
    7f7a:	fb8e 3801 	smull	r3, r8, lr, r1
    7f7e:	17cb      	asrs	r3, r1, #31
    7f80:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    7f84:	fb04 1313 	mls	r3, r4, r3, r1
    7f88:	442b      	add	r3, r5
    7f8a:	f883 00e4 	strb.w	r0, [r3, #228]	; 0xe4
    7f8e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    7f90:	b2d3      	uxtb	r3, r2
    7f92:	429e      	cmp	r6, r3
    7f94:	d8ef      	bhi.n	7f76 <grid_port_receive_decode+0xb2>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    7f96:	8b6b      	ldrh	r3, [r5, #26]
    7f98:	4433      	add	r3, r6
    7f9a:	4aac      	ldr	r2, [pc, #688]	; (824c <grid_port_receive_decode+0x388>)
    7f9c:	fb82 1203 	smull	r1, r2, r2, r3
    7fa0:	17de      	asrs	r6, r3, #31
    7fa2:	ebc6 16a2 	rsb	r6, r6, r2, asr #6
    7fa6:	22c8      	movs	r2, #200	; 0xc8
    7fa8:	fb02 3616 	mls	r6, r2, r6, r3
    7fac:	b2b6      	uxth	r6, r6
    7fae:	836e      	strh	r6, [r5, #26]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    7fb0:	832e      	strh	r6, [r5, #24]
	por->rx_double_buffer_status = 0;
    7fb2:	2300      	movs	r3, #0
    7fb4:	82eb      	strh	r3, [r5, #22]
}
    7fb6:	3734      	adds	r7, #52	; 0x34
    7fb8:	46bd      	mov	sp, r7
    7fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    7fbe:	1ef0      	subs	r0, r6, #3
    7fc0:	f107 0223 	add.w	r2, r7, #35	; 0x23
    7fc4:	2102      	movs	r1, #2
    7fc6:	4440      	add	r0, r8
    7fc8:	4ba1      	ldr	r3, [pc, #644]	; (8250 <grid_port_receive_decode+0x38c>)
    7fca:	4798      	blx	r3
    7fcc:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    7fce:	4631      	mov	r1, r6
    7fd0:	4640      	mov	r0, r8
    7fd2:	4ba0      	ldr	r3, [pc, #640]	; (8254 <grid_port_receive_decode+0x390>)
    7fd4:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    7fd6:	fa5f fa8a 	uxtb.w	sl, sl
    7fda:	b2c0      	uxtb	r0, r0
    7fdc:	4582      	cmp	sl, r0
    7fde:	d00b      	beq.n	7ff8 <grid_port_receive_decode+0x134>
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 1, 2000); // RED BLINKY
    7fe0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    7fe4:	9301      	str	r3, [sp, #4]
    7fe6:	2301      	movs	r3, #1
    7fe8:	9300      	str	r3, [sp, #0]
    7fea:	23ff      	movs	r3, #255	; 0xff
    7fec:	2200      	movs	r2, #0
    7fee:	4619      	mov	r1, r3
    7ff0:	4899      	ldr	r0, [pc, #612]	; (8258 <grid_port_receive_decode+0x394>)
    7ff2:	4c9a      	ldr	r4, [pc, #616]	; (825c <grid_port_receive_decode+0x398>)
    7ff4:	47a0      	blx	r4
    7ff6:	e7b2      	b.n	7f5e <grid_port_receive_decode+0x9a>
		if (checksum_calculated == checksum_received && error_flag == 0){
    7ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d1ef      	bne.n	7fe0 <grid_port_receive_decode+0x11c>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    8000:	f898 3001 	ldrb.w	r3, [r8, #1]
    8004:	2b0f      	cmp	r3, #15
    8006:	d00d      	beq.n	8024 <grid_port_receive_decode+0x160>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    8008:	2b0e      	cmp	r3, #14
    800a:	f000 80ab 	beq.w	8164 <grid_port_receive_decode+0x2a0>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    800e:	23c8      	movs	r3, #200	; 0xc8
    8010:	9301      	str	r3, [sp, #4]
    8012:	2302      	movs	r3, #2
    8014:	9300      	str	r3, [sp, #0]
    8016:	2300      	movs	r3, #0
    8018:	461a      	mov	r2, r3
    801a:	21ff      	movs	r1, #255	; 0xff
    801c:	488e      	ldr	r0, [pc, #568]	; (8258 <grid_port_receive_decode+0x394>)
    801e:	4c8f      	ldr	r4, [pc, #572]	; (825c <grid_port_receive_decode+0x398>)
    8020:	47a0      	blx	r4
    8022:	e79c      	b.n	7f5e <grid_port_receive_decode+0x9a>
				uint8_t received_id  = grid_msg_get_id(message);;			
    8024:	4640      	mov	r0, r8
    8026:	4b8e      	ldr	r3, [pc, #568]	; (8260 <grid_port_receive_decode+0x39c>)
    8028:	4798      	blx	r3
    802a:	60b8      	str	r0, [r7, #8]
				uint8_t received_age = grid_msg_get_age(message);
    802c:	4640      	mov	r0, r8
    802e:	4b8d      	ldr	r3, [pc, #564]	; (8264 <grid_port_receive_decode+0x3a0>)
    8030:	4798      	blx	r3
    8032:	b2c3      	uxtb	r3, r0
    8034:	607b      	str	r3, [r7, #4]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    8036:	4640      	mov	r0, r8
    8038:	4b8b      	ldr	r3, [pc, #556]	; (8268 <grid_port_receive_decode+0x3a4>)
    803a:	4798      	blx	r3
    803c:	fa5f fb80 	uxtb.w	fp, r0
    8040:	f1ab 0a7f 	sub.w	sl, fp, #127	; 0x7f
    8044:	fa4f fa8a 	sxtb.w	sl, sl
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    8048:	4640      	mov	r0, r8
    804a:	4b88      	ldr	r3, [pc, #544]	; (826c <grid_port_receive_decode+0x3a8>)
    804c:	4798      	blx	r3
    804e:	b2c0      	uxtb	r0, r0
    8050:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    8054:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    8056:	f895 21e0 	ldrb.w	r2, [r5, #480]	; 0x1e0
    805a:	b182      	cbz	r2, 807e <grid_port_receive_decode+0x1ba>
				else if(por->partner_fi == 1){ // 90 deg
    805c:	2a01      	cmp	r2, #1
    805e:	d009      	beq.n	8074 <grid_port_receive_decode+0x1b0>
				else if(por->partner_fi == 2){ // 180 deg
    8060:	2a02      	cmp	r2, #2
    8062:	d066      	beq.n	8132 <grid_port_receive_decode+0x26e>
				else if(por->partner_fi == 3){ // 270 deg
    8064:	2a03      	cmp	r2, #3
    8066:	d16c      	bne.n	8142 <grid_port_receive_decode+0x27e>
					rotated_dy  -= received_dx;
    8068:	f1cb 0b7f 	rsb	fp, fp, #127	; 0x7f
					rotated_dx  += received_dy;
    806c:	469a      	mov	sl, r3
					rotated_dy  -= received_dx;
    806e:	fa4f f38b 	sxtb.w	r3, fp
    8072:	e004      	b.n	807e <grid_port_receive_decode+0x1ba>
					rotated_dx  -= received_dy;
    8074:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    8078:	4653      	mov	r3, sl
					rotated_dx  -= received_dy;
    807a:	fa4f fa80 	sxtb.w	sl, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    807e:	f895 b1e1 	ldrb.w	fp, [r5, #481]	; 0x1e1
    8082:	f10b 0b7f 	add.w	fp, fp, #127	; 0x7f
    8086:	44da      	add	sl, fp
    8088:	fa5f fb8a 	uxtb.w	fp, sl
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    808c:	f895 21e2 	ldrb.w	r2, [r5, #482]	; 0x1e2
    8090:	327f      	adds	r2, #127	; 0x7f
    8092:	4413      	add	r3, r2
    8094:	b2db      	uxtb	r3, r3
    8096:	60fb      	str	r3, [r7, #12]
    8098:	f897 a008 	ldrb.w	sl, [r7, #8]
				grid_msg_set_id(message, updated_id);
    809c:	4651      	mov	r1, sl
    809e:	4640      	mov	r0, r8
    80a0:	4b73      	ldr	r3, [pc, #460]	; (8270 <grid_port_receive_decode+0x3ac>)
    80a2:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    80a4:	4659      	mov	r1, fp
    80a6:	4640      	mov	r0, r8
    80a8:	4b72      	ldr	r3, [pc, #456]	; (8274 <grid_port_receive_decode+0x3b0>)
    80aa:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    80ac:	68f9      	ldr	r1, [r7, #12]
    80ae:	4640      	mov	r0, r8
    80b0:	4b71      	ldr	r3, [pc, #452]	; (8278 <grid_port_receive_decode+0x3b4>)
    80b2:	4798      	blx	r3
				uint8_t updated_age = received_age + 1;
    80b4:	687b      	ldr	r3, [r7, #4]
    80b6:	3301      	adds	r3, #1
				grid_msg_set_age(message, updated_age);		
    80b8:	b2da      	uxtb	r2, r3
    80ba:	60ba      	str	r2, [r7, #8]
    80bc:	4611      	mov	r1, r2
    80be:	4640      	mov	r0, r8
    80c0:	4b6e      	ldr	r3, [pc, #440]	; (827c <grid_port_receive_decode+0x3b8>)
    80c2:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    80c4:	eb0b 230a 	add.w	r3, fp, sl, lsl #8
    80c8:	68f9      	ldr	r1, [r7, #12]
    80ca:	eb01 2303 	add.w	r3, r1, r3, lsl #8
    80ce:	68ba      	ldr	r2, [r7, #8]
    80d0:	eb02 2303 	add.w	r3, r2, r3, lsl #8
    80d4:	60fb      	str	r3, [r7, #12]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    80d6:	4619      	mov	r1, r3
    80d8:	485f      	ldr	r0, [pc, #380]	; (8258 <grid_port_receive_decode+0x394>)
    80da:	4b69      	ldr	r3, [pc, #420]	; (8280 <grid_port_receive_decode+0x3bc>)
    80dc:	4798      	blx	r3
    80de:	2800      	cmp	r0, #0
    80e0:	d132      	bne.n	8148 <grid_port_receive_decode+0x284>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    80e2:	4631      	mov	r1, r6
    80e4:	4640      	mov	r0, r8
    80e6:	4b5b      	ldr	r3, [pc, #364]	; (8254 <grid_port_receive_decode+0x390>)
    80e8:	4798      	blx	r3
    80ea:	4602      	mov	r2, r0
    80ec:	4631      	mov	r1, r6
    80ee:	4640      	mov	r0, r8
    80f0:	4b64      	ldr	r3, [pc, #400]	; (8284 <grid_port_receive_decode+0x3c0>)
    80f2:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    80f4:	f505 7ae2 	add.w	sl, r5, #452	; 0x1c4
    80f8:	4631      	mov	r1, r6
    80fa:	4650      	mov	r0, sl
    80fc:	4b62      	ldr	r3, [pc, #392]	; (8288 <grid_port_receive_decode+0x3c4>)
    80fe:	4798      	blx	r3
    8100:	2800      	cmp	r0, #0
    8102:	f43f af2c 	beq.w	7f5e <grid_port_receive_decode+0x9a>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    8106:	f8df b190 	ldr.w	fp, [pc, #400]	; 8298 <grid_port_receive_decode+0x3d4>
    810a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    810e:	4650      	mov	r0, sl
    8110:	47d8      	blx	fp
						for (uint8_t i=0; i<length; i++){
    8112:	45a1      	cmp	r9, r4
    8114:	d1f9      	bne.n	810a <grid_port_receive_decode+0x246>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    8116:	4650      	mov	r0, sl
    8118:	4b5c      	ldr	r3, [pc, #368]	; (828c <grid_port_receive_decode+0x3c8>)
    811a:	4798      	blx	r3
						grid_port_process_inbound(por);
    811c:	4628      	mov	r0, r5
    811e:	4b5c      	ldr	r3, [pc, #368]	; (8290 <grid_port_receive_decode+0x3cc>)
    8120:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    8122:	68f9      	ldr	r1, [r7, #12]
    8124:	484c      	ldr	r0, [pc, #304]	; (8258 <grid_port_receive_decode+0x394>)
    8126:	4b5b      	ldr	r3, [pc, #364]	; (8294 <grid_port_receive_decode+0x3d0>)
    8128:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    812a:	2306      	movs	r3, #6
    812c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    8130:	e715      	b.n	7f5e <grid_port_receive_decode+0x9a>
					rotated_dx  -= received_dx;
    8132:	f1cb 0a7f 	rsb	sl, fp, #127	; 0x7f
    8136:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    813a:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    813e:	b25b      	sxtb	r3, r3
    8140:	e79d      	b.n	807e <grid_port_receive_decode+0x1ba>
				int8_t rotated_dy = 0;
    8142:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    8144:	469a      	mov	sl, r3
    8146:	e79a      	b.n	807e <grid_port_receive_decode+0x1ba>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    8148:	2306      	movs	r3, #6
    814a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    814e:	23c8      	movs	r3, #200	; 0xc8
    8150:	9301      	str	r3, [sp, #4]
    8152:	2302      	movs	r3, #2
    8154:	9300      	str	r3, [sp, #0]
    8156:	2332      	movs	r3, #50	; 0x32
    8158:	461a      	mov	r2, r3
    815a:	4619      	mov	r1, r3
    815c:	483e      	ldr	r0, [pc, #248]	; (8258 <grid_port_receive_decode+0x394>)
    815e:	4c3f      	ldr	r4, [pc, #252]	; (825c <grid_port_receive_decode+0x398>)
    8160:	47a0      	blx	r4
    8162:	e6fc      	b.n	7f5e <grid_port_receive_decode+0x9a>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    8164:	f898 3002 	ldrb.w	r3, [r8, #2]
    8168:	2b06      	cmp	r3, #6
    816a:	d02a      	beq.n	81c2 <grid_port_receive_decode+0x2fe>
				else if (message[2] == GRID_MSG_BELL){
    816c:	2b07      	cmp	r3, #7
    816e:	f47f aefb 	bne.w	7f68 <grid_port_receive_decode+0xa4>
					if (por->partner_status == 0){
    8172:	f895 31e3 	ldrb.w	r3, [r5, #483]	; 0x1e3
    8176:	bb7b      	cbnz	r3, 81d8 <grid_port_receive_decode+0x314>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    8178:	f898 3003 	ldrb.w	r3, [r8, #3]
    817c:	796a      	ldrb	r2, [r5, #5]
    817e:	1a9b      	subs	r3, r3, r2
    8180:	3306      	adds	r3, #6
    8182:	425a      	negs	r2, r3
    8184:	f003 0303 	and.w	r3, r3, #3
    8188:	f002 0203 	and.w	r2, r2, #3
    818c:	bf58      	it	pl
    818e:	4253      	negpl	r3, r2
    8190:	f885 31e0 	strb.w	r3, [r5, #480]	; 0x1e0
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8194:	f1a6 000c 	sub.w	r0, r6, #12
    8198:	2200      	movs	r2, #0
    819a:	2108      	movs	r1, #8
    819c:	4440      	add	r0, r8
    819e:	4b2c      	ldr	r3, [pc, #176]	; (8250 <grid_port_receive_decode+0x38c>)
    81a0:	4798      	blx	r3
    81a2:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
						por->partner_status = 1;
    81a6:	2301      	movs	r3, #1
    81a8:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    81ac:	23c8      	movs	r3, #200	; 0xc8
    81ae:	9301      	str	r3, [sp, #4]
    81b0:	2302      	movs	r3, #2
    81b2:	9300      	str	r3, [sp, #0]
    81b4:	2300      	movs	r3, #0
    81b6:	22ff      	movs	r2, #255	; 0xff
    81b8:	4619      	mov	r1, r3
    81ba:	4827      	ldr	r0, [pc, #156]	; (8258 <grid_port_receive_decode+0x394>)
    81bc:	4c27      	ldr	r4, [pc, #156]	; (825c <grid_port_receive_decode+0x398>)
    81be:	47a0      	blx	r4
    81c0:	e6cd      	b.n	7f5e <grid_port_receive_decode+0x9a>
					grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 2, 200); // PURPLE
    81c2:	23c8      	movs	r3, #200	; 0xc8
    81c4:	9301      	str	r3, [sp, #4]
    81c6:	2302      	movs	r3, #2
    81c8:	9300      	str	r3, [sp, #0]
    81ca:	23ff      	movs	r3, #255	; 0xff
    81cc:	2200      	movs	r2, #0
    81ce:	4619      	mov	r1, r3
    81d0:	4821      	ldr	r0, [pc, #132]	; (8258 <grid_port_receive_decode+0x394>)
    81d2:	4c22      	ldr	r4, [pc, #136]	; (825c <grid_port_receive_decode+0x398>)
    81d4:	47a0      	blx	r4
    81d6:	e6c2      	b.n	7f5e <grid_port_receive_decode+0x9a>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    81d8:	f898 3003 	ldrb.w	r3, [r8, #3]
    81dc:	796a      	ldrb	r2, [r5, #5]
    81de:	1a9b      	subs	r3, r3, r2
    81e0:	3306      	adds	r3, #6
    81e2:	425a      	negs	r2, r3
    81e4:	f003 0303 	and.w	r3, r3, #3
    81e8:	f002 0203 	and.w	r2, r2, #3
    81ec:	bf58      	it	pl
    81ee:	4253      	negpl	r3, r2
    81f0:	f895 41e0 	ldrb.w	r4, [r5, #480]	; 0x1e0
    81f4:	42a3      	cmp	r3, r4
    81f6:	bf14      	ite	ne
    81f8:	2400      	movne	r4, #0
    81fa:	2401      	moveq	r4, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    81fc:	f1a6 000c 	sub.w	r0, r6, #12
    8200:	2200      	movs	r2, #0
    8202:	2108      	movs	r1, #8
    8204:	4440      	add	r0, r8
    8206:	4b12      	ldr	r3, [pc, #72]	; (8250 <grid_port_receive_decode+0x38c>)
    8208:	4798      	blx	r3
    820a:	6178      	str	r0, [r7, #20]
						volatile uint32_t debug2 = por->partner_hwcfg;
    820c:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
    8210:	61bb      	str	r3, [r7, #24]
						validator &= (por->partner_hwcfg == debug);									
    8212:	697a      	ldr	r2, [r7, #20]
						if (validator == 0){
    8214:	4293      	cmp	r3, r2
    8216:	d100      	bne.n	821a <grid_port_receive_decode+0x356>
    8218:	b96c      	cbnz	r4, 8236 <grid_port_receive_decode+0x372>
							por->partner_status = 0;	
    821a:	2300      	movs	r3, #0
    821c:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    8220:	23c8      	movs	r3, #200	; 0xc8
    8222:	9301      	str	r3, [sp, #4]
    8224:	2302      	movs	r3, #2
    8226:	9300      	str	r3, [sp, #0]
    8228:	23ff      	movs	r3, #255	; 0xff
    822a:	461a      	mov	r2, r3
    822c:	4619      	mov	r1, r3
    822e:	480a      	ldr	r0, [pc, #40]	; (8258 <grid_port_receive_decode+0x394>)
    8230:	4c0a      	ldr	r4, [pc, #40]	; (825c <grid_port_receive_decode+0x398>)
    8232:	47a0      	blx	r4
    8234:	e693      	b.n	7f5e <grid_port_receive_decode+0x9a>
							grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 10, 2, 200); // BLUE
    8236:	23c8      	movs	r3, #200	; 0xc8
    8238:	9301      	str	r3, [sp, #4]
    823a:	2302      	movs	r3, #2
    823c:	9300      	str	r3, [sp, #0]
    823e:	230a      	movs	r3, #10
    8240:	2200      	movs	r2, #0
    8242:	4611      	mov	r1, r2
    8244:	4804      	ldr	r0, [pc, #16]	; (8258 <grid_port_receive_decode+0x394>)
    8246:	4c05      	ldr	r4, [pc, #20]	; (825c <grid_port_receive_decode+0x398>)
    8248:	47a0      	blx	r4
    824a:	e688      	b.n	7f5e <grid_port_receive_decode+0x9a>
    824c:	51eb851f 	.word	0x51eb851f
    8250:	00002a3d 	.word	0x00002a3d
    8254:	00002ba5 	.word	0x00002ba5
    8258:	20001a14 	.word	0x20001a14
    825c:	000029e9 	.word	0x000029e9
    8260:	00002bf1 	.word	0x00002bf1
    8264:	00002c51 	.word	0x00002c51
    8268:	00002c11 	.word	0x00002c11
    826c:	00002c31 	.word	0x00002c31
    8270:	00002c71 	.word	0x00002c71
    8274:	00002c85 	.word	0x00002c85
    8278:	00002c99 	.word	0x00002c99
    827c:	00002cad 	.word	0x00002cad
    8280:	00002cc1 	.word	0x00002cc1
    8284:	00002bc1 	.word	0x00002bc1
    8288:	0000101d 	.word	0x0000101d
    828c:	00001069 	.word	0x00001069
    8290:	00001329 	.word	0x00001329
    8294:	00002ced 	.word	0x00002ced
    8298:	0000104d 	.word	0x0000104d
			sprintf(checksum, "%02x", grid_msg_get_checksum(response, response_length));
    829c:	4641      	mov	r1, r8
    829e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    82a2:	4b1e      	ldr	r3, [pc, #120]	; (831c <grid_port_receive_decode+0x458>)
    82a4:	4798      	blx	r3
    82a6:	4602      	mov	r2, r0
    82a8:	491d      	ldr	r1, [pc, #116]	; (8320 <grid_port_receive_decode+0x45c>)
    82aa:	f107 001c 	add.w	r0, r7, #28
    82ae:	4b1d      	ldr	r3, [pc, #116]	; (8324 <grid_port_receive_decode+0x460>)
    82b0:	4798      	blx	r3
			response[4] = checksum[0];
    82b2:	7f3b      	ldrb	r3, [r7, #28]
    82b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			response[5] = checksum[1];
    82b8:	7f7b      	ldrb	r3, [r7, #29]
    82ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			for (uint8_t i=0; i<response_length; i++)
    82be:	f1b8 0f00 	cmp.w	r8, #0
    82c2:	d010      	beq.n	82e6 <grid_port_receive_decode+0x422>
    82c4:	f107 0424 	add.w	r4, r7, #36	; 0x24
    82c8:	f108 38ff 	add.w	r8, r8, #4294967295
    82cc:	fa5f f888 	uxtb.w	r8, r8
    82d0:	f108 0801 	add.w	r8, r8, #1
    82d4:	44a0      	add	r8, r4
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    82d6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8334 <grid_port_receive_decode+0x470>
    82da:	f814 1b01 	ldrb.w	r1, [r4], #1
    82de:	4648      	mov	r0, r9
    82e0:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    82e2:	45a0      	cmp	r8, r4
    82e4:	d1f9      	bne.n	82da <grid_port_receive_decode+0x416>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    82e6:	4648      	mov	r0, r9
    82e8:	4b0f      	ldr	r3, [pc, #60]	; (8328 <grid_port_receive_decode+0x464>)
    82ea:	4798      	blx	r3
    82ec:	e012      	b.n	8314 <grid_port_receive_decode+0x450>
	if (message[1] == GRID_MSG_BROADCAST){				
    82ee:	f898 3001 	ldrb.w	r3, [r8, #1]
    82f2:	2b0f      	cmp	r3, #15
    82f4:	f47f ae4f 	bne.w	7f96 <grid_port_receive_decode+0xd2>
		uint8_t response_length = strlen(response);
    82f8:	f107 0024 	add.w	r0, r7, #36	; 0x24
    82fc:	4b0b      	ldr	r3, [pc, #44]	; (832c <grid_port_receive_decode+0x468>)
    82fe:	4798      	blx	r3
    8300:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    8304:	f505 79d6 	add.w	r9, r5, #428	; 0x1ac
    8308:	4641      	mov	r1, r8
    830a:	4648      	mov	r0, r9
    830c:	4b08      	ldr	r3, [pc, #32]	; (8330 <grid_port_receive_decode+0x46c>)
    830e:	4798      	blx	r3
    8310:	2800      	cmp	r0, #0
    8312:	d1c3      	bne.n	829c <grid_port_receive_decode+0x3d8>
	for (uint8_t i = 0; i<length; i++){
    8314:	2e00      	cmp	r6, #0
    8316:	f43f ae3e 	beq.w	7f96 <grid_port_receive_decode+0xd2>
    831a:	e625      	b.n	7f68 <grid_port_receive_decode+0xa4>
    831c:	00002ba5 	.word	0x00002ba5
    8320:	0000ac68 	.word	0x0000ac68
    8324:	0000a3e9 	.word	0x0000a3e9
    8328:	00001069 	.word	0x00001069
    832c:	0000a431 	.word	0x0000a431
    8330:	0000101d 	.word	0x0000101d
    8334:	0000104d 	.word	0x0000104d

00008338 <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    8338:	8ac3      	ldrh	r3, [r0, #22]
    833a:	2b01      	cmp	r3, #1
    833c:	d000      	beq.n	8340 <grid_port_receive_complete_task+0x8>
    833e:	4770      	bx	lr
void grid_port_receive_complete_task(struct grid_port* por){
    8340:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    8342:	8b41      	ldrh	r1, [r0, #26]
    8344:	8b03      	ldrh	r3, [r0, #24]
    8346:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    8348:	bf34      	ite	cc
    834a:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    834c:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    8350:	1a52      	subs	r2, r2, r1
    8352:	b2d2      	uxtb	r2, r2
    8354:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    8356:	b2c9      	uxtb	r1, r1
    8358:	4b02      	ldr	r3, [pc, #8]	; (8364 <grid_port_receive_complete_task+0x2c>)
    835a:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    835c:	2300      	movs	r3, #0
    835e:	82e3      	strh	r3, [r4, #22]
    8360:	bd10      	pop	{r4, pc}
    8362:	bf00      	nop
    8364:	00007ec5 	.word	0x00007ec5

00008368 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    8368:	b570      	push	{r4, r5, r6, lr}
	
		
	RTC_Scheduler_ping.interval = 16380/5; //1sec
    836a:	4c12      	ldr	r4, [pc, #72]	; (83b4 <init_timer+0x4c>)
    836c:	f640 43cc 	movw	r3, #3276	; 0xccc
    8370:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    8372:	4b11      	ldr	r3, [pc, #68]	; (83b8 <init_timer+0x50>)
    8374:	6163      	str	r3, [r4, #20]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    8376:	2301      	movs	r3, #1
    8378:	7623      	strb	r3, [r4, #24]
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    837a:	6263      	str	r3, [r4, #36]	; 0x24
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    837c:	4a0f      	ldr	r2, [pc, #60]	; (83bc <init_timer+0x54>)
    837e:	62a2      	str	r2, [r4, #40]	; 0x28
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    8380:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	
	RTC_Scheduler_realtime.interval = 1; // 1us
    8384:	63a3      	str	r3, [r4, #56]	; 0x38
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    8386:	4a0e      	ldr	r2, [pc, #56]	; (83c0 <init_timer+0x58>)
    8388:	63e2      	str	r2, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    838a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    838e:	4d0d      	ldr	r5, [pc, #52]	; (83c4 <init_timer+0x5c>)
    8390:	f104 011c 	add.w	r1, r4, #28
    8394:	4628      	mov	r0, r5
    8396:	4e0c      	ldr	r6, [pc, #48]	; (83c8 <init_timer+0x60>)
    8398:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    839a:	f104 0108 	add.w	r1, r4, #8
    839e:	4628      	mov	r0, r5
    83a0:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    83a2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    83a6:	4628      	mov	r0, r5
    83a8:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    83aa:	4628      	mov	r0, r5
    83ac:	4b07      	ldr	r3, [pc, #28]	; (83cc <init_timer+0x64>)
    83ae:	4798      	blx	r3
    83b0:	bd70      	pop	{r4, r5, r6, pc}
    83b2:	bf00      	nop
    83b4:	20001174 	.word	0x20001174
    83b8:	00007de1 	.word	0x00007de1
    83bc:	00007e99 	.word	0x00007e99
    83c0:	00007dd1 	.word	0x00007dd1
    83c4:	200012fc 	.word	0x200012fc
    83c8:	00003bc1 	.word	0x00003bc1
    83cc:	00003b81 	.word	0x00003b81

000083d0 <main>:


volatile uint8_t reset_cause;

int main(void)
{
    83d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83d4:	b08b      	sub	sp, #44	; 0x2c
	
	reset_cause = *((uint8_t*)0);
    83d6:	2300      	movs	r3, #0
    83d8:	781a      	ldrb	r2, [r3, #0]
    83da:	4b6a      	ldr	r3, [pc, #424]	; (8584 <main+0x1b4>)
    83dc:	701a      	strb	r2, [r3, #0]
	
	
	#include "usb/class/midi/device/audiodf_midi.h"

	
	atmel_start_init();	
    83de:	4b6a      	ldr	r3, [pc, #424]	; (8588 <main+0x1b8>)
    83e0:	4798      	blx	r3
	
	//TIMER_0_example2();

	audiodf_midi_init();
    83e2:	4b6a      	ldr	r3, [pc, #424]	; (858c <main+0x1bc>)
    83e4:	4798      	blx	r3


	composite_device_start();
    83e6:	4b6a      	ldr	r3, [pc, #424]	; (8590 <main+0x1c0>)
    83e8:	4798      	blx	r3
	
	grid_module_init();
    83ea:	4b6a      	ldr	r3, [pc, #424]	; (8594 <main+0x1c4>)
    83ec:	4798      	blx	r3
	



	
	init_timer();	
    83ee:	4b6a      	ldr	r3, [pc, #424]	; (8598 <main+0x1c8>)
    83f0:	4798      	blx	r3
	
	uint32_t loopstart = 0;
		
	while (1) {
					
		loopstart = realtime;
    83f2:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8620 <main+0x250>
    83f6:	e070      	b.n	84da <main+0x10a>
		
		/* ========================= PING ============================= */
						
		if (pingflag){
			
			grid_sys_ping(&GRID_PORT_N);
    83f8:	4868      	ldr	r0, [pc, #416]	; (859c <main+0x1cc>)
    83fa:	4c69      	ldr	r4, [pc, #420]	; (85a0 <main+0x1d0>)
    83fc:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_E);
    83fe:	4869      	ldr	r0, [pc, #420]	; (85a4 <main+0x1d4>)
    8400:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_S);
    8402:	4869      	ldr	r0, [pc, #420]	; (85a8 <main+0x1d8>)
    8404:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_W);
    8406:	4869      	ldr	r0, [pc, #420]	; (85ac <main+0x1dc>)
    8408:	47a0      	blx	r4
			
			pingflag = 0;
    840a:	2300      	movs	r3, #0
    840c:	f88b 3004 	strb.w	r3, [fp, #4]
    8410:	e06a      	b.n	84e8 <main+0x118>
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
				
					grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    8412:	2300      	movs	r3, #0
    8414:	9301      	str	r3, [sp, #4]
    8416:	9300      	str	r3, [sp, #0]
    8418:	2201      	movs	r2, #1
    841a:	4621      	mov	r1, r4
    841c:	4864      	ldr	r0, [pc, #400]	; (85b0 <main+0x1e0>)
    841e:	4d65      	ldr	r5, [pc, #404]	; (85b4 <main+0x1e4>)
    8420:	47a8      	blx	r5
					grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    8422:	4f65      	ldr	r7, [pc, #404]	; (85b8 <main+0x1e8>)
    8424:	f89d 000c 	ldrb.w	r0, [sp, #12]
    8428:	47b8      	blx	r7
    842a:	4e64      	ldr	r6, [pc, #400]	; (85bc <main+0x1ec>)
    842c:	2200      	movs	r2, #0
    842e:	4b64      	ldr	r3, [pc, #400]	; (85c0 <main+0x1f0>)
    8430:	47b0      	blx	r6
    8432:	4d64      	ldr	r5, [pc, #400]	; (85c4 <main+0x1f4>)
    8434:	47a8      	blx	r5
    8436:	fa5f f980 	uxtb.w	r9, r0
    843a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    843e:	47b8      	blx	r7
    8440:	2200      	movs	r2, #0
    8442:	4b5f      	ldr	r3, [pc, #380]	; (85c0 <main+0x1f0>)
    8444:	47b0      	blx	r6
    8446:	47a8      	blx	r5
    8448:	b2c0      	uxtb	r0, r0
    844a:	9001      	str	r0, [sp, #4]
    844c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    8450:	47b8      	blx	r7
    8452:	2200      	movs	r2, #0
    8454:	4b5a      	ldr	r3, [pc, #360]	; (85c0 <main+0x1f0>)
    8456:	47b0      	blx	r6
    8458:	47a8      	blx	r5
    845a:	b2c0      	uxtb	r0, r0
    845c:	9000      	str	r0, [sp, #0]
    845e:	464b      	mov	r3, r9
    8460:	2201      	movs	r2, #1
    8462:	4621      	mov	r1, r4
    8464:	4852      	ldr	r0, [pc, #328]	; (85b0 <main+0x1e0>)
    8466:	4d58      	ldr	r5, [pc, #352]	; (85c8 <main+0x1f8>)
    8468:	47a8      	blx	r5
					grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    846a:	9b08      	ldr	r3, [sp, #32]
    846c:	9301      	str	r3, [sp, #4]
    846e:	9b06      	ldr	r3, [sp, #24]
    8470:	9300      	str	r3, [sp, #0]
    8472:	9b04      	ldr	r3, [sp, #16]
    8474:	2201      	movs	r2, #1
    8476:	4621      	mov	r1, r4
    8478:	484d      	ldr	r0, [pc, #308]	; (85b0 <main+0x1e0>)
    847a:	4c54      	ldr	r4, [pc, #336]	; (85cc <main+0x1fc>)
    847c:	47a0      	blx	r4
    847e:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    8482:	484b      	ldr	r0, [pc, #300]	; (85b0 <main+0x1e0>)
    8484:	47d0      	blx	sl
    8486:	f108 0801 	add.w	r8, r8, #1
    848a:	42a0      	cmp	r0, r4
    848c:	d8c1      	bhi.n	8412 <main+0x42>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    848e:	4850      	ldr	r0, [pc, #320]	; (85d0 <main+0x200>)
    8490:	4b50      	ldr	r3, [pc, #320]	; (85d4 <main+0x204>)
    8492:	4798      	blx	r3
    8494:	b2c7      	uxtb	r7, r0
    8496:	2400      	movs	r4, #0
	
			for (uint8_t i=0; i<16; i++){	
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    8498:	2601      	movs	r6, #1
    849a:	4d4f      	ldr	r5, [pc, #316]	; (85d8 <main+0x208>)
    849c:	463b      	mov	r3, r7
    849e:	4632      	mov	r2, r6
    84a0:	b2e1      	uxtb	r1, r4
    84a2:	4843      	ldr	r0, [pc, #268]	; (85b0 <main+0x1e0>)
    84a4:	47a8      	blx	r5
    84a6:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){	
    84a8:	2c10      	cmp	r4, #16
    84aa:	d1f7      	bne.n	849c <main+0xcc>
			
			
		}
		
				
		grid_led_tick(&grid_led_state);
    84ac:	4840      	ldr	r0, [pc, #256]	; (85b0 <main+0x1e0>)
    84ae:	4b4b      	ldr	r3, [pc, #300]	; (85dc <main+0x20c>)
    84b0:	4798      	blx	r3
		grid_led_render_all(&grid_led_state);
    84b2:	483f      	ldr	r0, [pc, #252]	; (85b0 <main+0x1e0>)
    84b4:	4b4a      	ldr	r3, [pc, #296]	; (85e0 <main+0x210>)
    84b6:	4798      	blx	r3
				
				
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    84b8:	483d      	ldr	r0, [pc, #244]	; (85b0 <main+0x1e0>)
    84ba:	4b4a      	ldr	r3, [pc, #296]	; (85e4 <main+0x214>)
    84bc:	4798      	blx	r3
			
		
		
		
		// IDLETASK
		while(loopstart + RTC1SEC/1000 > realtime){
    84be:	9c09      	ldr	r4, [sp, #36]	; 0x24
    84c0:	3410      	adds	r4, #16
    84c2:	f8db 3000 	ldr.w	r3, [fp]
    84c6:	429c      	cmp	r4, r3
    84c8:	d907      	bls.n	84da <main+0x10a>
			delay_us(10);
    84ca:	260a      	movs	r6, #10
    84cc:	4d46      	ldr	r5, [pc, #280]	; (85e8 <main+0x218>)
    84ce:	4630      	mov	r0, r6
    84d0:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    84d2:	f8db 3000 	ldr.w	r3, [fp]
    84d6:	42a3      	cmp	r3, r4
    84d8:	d3f9      	bcc.n	84ce <main+0xfe>
		loopstart = realtime;
    84da:	f8db 3000 	ldr.w	r3, [fp]
    84de:	9309      	str	r3, [sp, #36]	; 0x24
		if (pingflag){
    84e0:	f89b 3004 	ldrb.w	r3, [fp, #4]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d187      	bne.n	83f8 <main+0x28>
		grid_port_receive_complete_task(&GRID_PORT_N);
    84e8:	482c      	ldr	r0, [pc, #176]	; (859c <main+0x1cc>)
    84ea:	4c40      	ldr	r4, [pc, #256]	; (85ec <main+0x21c>)
    84ec:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    84ee:	482d      	ldr	r0, [pc, #180]	; (85a4 <main+0x1d4>)
    84f0:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    84f2:	482d      	ldr	r0, [pc, #180]	; (85a8 <main+0x1d8>)
    84f4:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    84f6:	482d      	ldr	r0, [pc, #180]	; (85ac <main+0x1dc>)
    84f8:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);		
    84fa:	4d3d      	ldr	r5, [pc, #244]	; (85f0 <main+0x220>)
    84fc:	4628      	mov	r0, r5
    84fe:	4b3d      	ldr	r3, [pc, #244]	; (85f4 <main+0x224>)
    8500:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    8502:	4628      	mov	r0, r5
    8504:	4c3c      	ldr	r4, [pc, #240]	; (85f8 <main+0x228>)
    8506:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    8508:	4824      	ldr	r0, [pc, #144]	; (859c <main+0x1cc>)
    850a:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    850c:	4825      	ldr	r0, [pc, #148]	; (85a4 <main+0x1d4>)
    850e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    8510:	4825      	ldr	r0, [pc, #148]	; (85a8 <main+0x1d8>)
    8512:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);	
    8514:	4825      	ldr	r0, [pc, #148]	; (85ac <main+0x1dc>)
    8516:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    8518:	4820      	ldr	r0, [pc, #128]	; (859c <main+0x1cc>)
    851a:	4c38      	ldr	r4, [pc, #224]	; (85fc <main+0x22c>)
    851c:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    851e:	4821      	ldr	r0, [pc, #132]	; (85a4 <main+0x1d4>)
    8520:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    8522:	4821      	ldr	r0, [pc, #132]	; (85a8 <main+0x1d8>)
    8524:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    8526:	4821      	ldr	r0, [pc, #132]	; (85ac <main+0x1dc>)
    8528:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    852a:	4835      	ldr	r0, [pc, #212]	; (8600 <main+0x230>)
    852c:	4b35      	ldr	r3, [pc, #212]	; (8604 <main+0x234>)
    852e:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    8530:	4628      	mov	r0, r5
    8532:	4b35      	ldr	r3, [pc, #212]	; (8608 <main+0x238>)
    8534:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    8536:	4b26      	ldr	r3, [pc, #152]	; (85d0 <main+0x200>)
    8538:	889b      	ldrh	r3, [r3, #4]
    853a:	2b00      	cmp	r3, #0
    853c:	d0b6      	beq.n	84ac <main+0xdc>
			grid_sys_state.alert_state--;
    853e:	4824      	ldr	r0, [pc, #144]	; (85d0 <main+0x200>)
    8540:	3b01      	subs	r3, #1
    8542:	8083      	strh	r3, [r0, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    8544:	4b31      	ldr	r3, [pc, #196]	; (860c <main+0x23c>)
    8546:	4798      	blx	r3
    8548:	2800      	cmp	r0, #0
    854a:	d0a0      	beq.n	848e <main+0xbe>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    854c:	4c20      	ldr	r4, [pc, #128]	; (85d0 <main+0x200>)
    854e:	4620      	mov	r0, r4
    8550:	4b2f      	ldr	r3, [pc, #188]	; (8610 <main+0x240>)
    8552:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    8554:	4620      	mov	r0, r4
    8556:	4b2f      	ldr	r3, [pc, #188]	; (8614 <main+0x244>)
    8558:	4798      	blx	r3
    855a:	9003      	str	r0, [sp, #12]
    855c:	b2c3      	uxtb	r3, r0
    855e:	9304      	str	r3, [sp, #16]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    8560:	4620      	mov	r0, r4
    8562:	4b2d      	ldr	r3, [pc, #180]	; (8618 <main+0x248>)
    8564:	4798      	blx	r3
    8566:	9005      	str	r0, [sp, #20]
    8568:	b2c3      	uxtb	r3, r0
    856a:	9306      	str	r3, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    856c:	4620      	mov	r0, r4
    856e:	4b2b      	ldr	r3, [pc, #172]	; (861c <main+0x24c>)
    8570:	4798      	blx	r3
    8572:	9007      	str	r0, [sp, #28]
    8574:	b2c3      	uxtb	r3, r0
    8576:	9308      	str	r3, [sp, #32]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    8578:	f04f 0800 	mov.w	r8, #0
    857c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8624 <main+0x254>
    8580:	e77d      	b.n	847e <main+0xae>
    8582:	bf00      	nop
    8584:	20002c10 	.word	0x20002c10
    8588:	000002d1 	.word	0x000002d1
    858c:	0000904d 	.word	0x0000904d
    8590:	000099f5 	.word	0x000099f5
    8594:	000021d9 	.word	0x000021d9
    8598:	00008369 	.word	0x00008369
    859c:	20001640 	.word	0x20001640
    85a0:	00002d05 	.word	0x00002d05
    85a4:	200021d8 	.word	0x200021d8
    85a8:	20001e0c 	.word	0x20001e0c
    85ac:	20001c24 	.word	0x20001c24
    85b0:	200023bc 	.word	0x200023bc
    85b4:	00001a25 	.word	0x00001a25
    85b8:	00009cc1 	.word	0x00009cc1
    85bc:	00009d8d 	.word	0x00009d8d
    85c0:	3fe00000 	.word	0x3fe00000
    85c4:	0000a1b1 	.word	0x0000a1b1
    85c8:	00001a6d 	.word	0x00001a6d
    85cc:	00001ab7 	.word	0x00001ab7
    85d0:	20001a14 	.word	0x20001a14
    85d4:	000029a1 	.word	0x000029a1
    85d8:	00001b01 	.word	0x00001b01
    85dc:	000019e1 	.word	0x000019e1
    85e0:	00001dc5 	.word	0x00001dc5
    85e4:	00001de9 	.word	0x00001de9
    85e8:	000033d1 	.word	0x000033d1
    85ec:	00008339 	.word	0x00008339
    85f0:	20001824 	.word	0x20001824
    85f4:	00002e71 	.word	0x00002e71
    85f8:	00001329 	.word	0x00001329
    85fc:	000018f9 	.word	0x000018f9
    8600:	20001ff4 	.word	0x20001ff4
    8604:	000014b1 	.word	0x000014b1
    8608:	00001895 	.word	0x00001895
    860c:	00002995 	.word	0x00002995
    8610:	00002999 	.word	0x00002999
    8614:	00002a07 	.word	0x00002a07
    8618:	00002a0b 	.word	0x00002a0b
    861c:	00002a0f 	.word	0x00002a0f
    8620:	20001174 	.word	0x20001174
    8624:	000019dd 	.word	0x000019dd

00008628 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8628:	b5f0      	push	{r4, r5, r6, r7, lr}
    862a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    862c:	780b      	ldrb	r3, [r1, #0]
    862e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    8632:	2c01      	cmp	r4, #1
    8634:	d15e      	bne.n	86f4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    8636:	888c      	ldrh	r4, [r1, #4]
    8638:	4d35      	ldr	r5, [pc, #212]	; (8710 <cdcdf_acm_req+0xe8>)
    863a:	782d      	ldrb	r5, [r5, #0]
    863c:	42a5      	cmp	r5, r4
    863e:	d003      	beq.n	8648 <cdcdf_acm_req+0x20>
    8640:	4d33      	ldr	r5, [pc, #204]	; (8710 <cdcdf_acm_req+0xe8>)
    8642:	786d      	ldrb	r5, [r5, #1]
    8644:	42a5      	cmp	r5, r4
    8646:	d158      	bne.n	86fa <cdcdf_acm_req+0xd2>
    8648:	4616      	mov	r6, r2
    864a:	460c      	mov	r4, r1
    864c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    864e:	f013 0f80 	tst.w	r3, #128	; 0x80
    8652:	d10c      	bne.n	866e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    8654:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    8656:	4b2f      	ldr	r3, [pc, #188]	; (8714 <cdcdf_acm_req+0xec>)
    8658:	4798      	blx	r3
    865a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    865c:	7863      	ldrb	r3, [r4, #1]
    865e:	2b20      	cmp	r3, #32
    8660:	d013      	beq.n	868a <cdcdf_acm_req+0x62>
    8662:	2b22      	cmp	r3, #34	; 0x22
    8664:	d032      	beq.n	86cc <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    8666:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    866a:	b003      	add	sp, #12
    866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    866e:	2a01      	cmp	r2, #1
    8670:	d046      	beq.n	8700 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    8672:	784b      	ldrb	r3, [r1, #1]
    8674:	2b21      	cmp	r3, #33	; 0x21
    8676:	d145      	bne.n	8704 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    8678:	88cb      	ldrh	r3, [r1, #6]
    867a:	2b07      	cmp	r3, #7
    867c:	d145      	bne.n	870a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    867e:	2300      	movs	r3, #0
    8680:	2207      	movs	r2, #7
    8682:	4925      	ldr	r1, [pc, #148]	; (8718 <cdcdf_acm_req+0xf0>)
    8684:	4c25      	ldr	r4, [pc, #148]	; (871c <cdcdf_acm_req+0xf4>)
    8686:	47a0      	blx	r4
    8688:	e7ef      	b.n	866a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    868a:	2f07      	cmp	r7, #7
    868c:	d12b      	bne.n	86e6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    868e:	b1be      	cbz	r6, 86c0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    8690:	6800      	ldr	r0, [r0, #0]
    8692:	9000      	str	r0, [sp, #0]
    8694:	888a      	ldrh	r2, [r1, #4]
    8696:	798b      	ldrb	r3, [r1, #6]
    8698:	f8ad 2004 	strh.w	r2, [sp, #4]
    869c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    86a0:	4b1b      	ldr	r3, [pc, #108]	; (8710 <cdcdf_acm_req+0xe8>)
    86a2:	691b      	ldr	r3, [r3, #16]
    86a4:	b113      	cbz	r3, 86ac <cdcdf_acm_req+0x84>
    86a6:	4668      	mov	r0, sp
    86a8:	4798      	blx	r3
    86aa:	b1f8      	cbz	r0, 86ec <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    86ac:	4b18      	ldr	r3, [pc, #96]	; (8710 <cdcdf_acm_req+0xe8>)
    86ae:	aa02      	add	r2, sp, #8
    86b0:	e912 0003 	ldmdb	r2, {r0, r1}
    86b4:	6098      	str	r0, [r3, #8]
    86b6:	8199      	strh	r1, [r3, #12]
    86b8:	0c09      	lsrs	r1, r1, #16
    86ba:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    86bc:	2000      	movs	r0, #0
    86be:	e7d4      	b.n	866a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    86c0:	2300      	movs	r3, #0
    86c2:	2207      	movs	r2, #7
    86c4:	4628      	mov	r0, r5
    86c6:	4c15      	ldr	r4, [pc, #84]	; (871c <cdcdf_acm_req+0xf4>)
    86c8:	47a0      	blx	r4
    86ca:	e7ce      	b.n	866a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    86cc:	2300      	movs	r3, #0
    86ce:	461a      	mov	r2, r3
    86d0:	4619      	mov	r1, r3
    86d2:	4618      	mov	r0, r3
    86d4:	4d11      	ldr	r5, [pc, #68]	; (871c <cdcdf_acm_req+0xf4>)
    86d6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    86d8:	4b0d      	ldr	r3, [pc, #52]	; (8710 <cdcdf_acm_req+0xe8>)
    86da:	695b      	ldr	r3, [r3, #20]
    86dc:	b143      	cbz	r3, 86f0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    86de:	8860      	ldrh	r0, [r4, #2]
    86e0:	4798      	blx	r3
		return ERR_NONE;
    86e2:	2000      	movs	r0, #0
    86e4:	e7c1      	b.n	866a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    86e6:	f04f 30ff 	mov.w	r0, #4294967295
    86ea:	e7be      	b.n	866a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    86ec:	2000      	movs	r0, #0
    86ee:	e7bc      	b.n	866a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    86f0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    86f2:	e7ba      	b.n	866a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    86f4:	f06f 0009 	mvn.w	r0, #9
    86f8:	e7b7      	b.n	866a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    86fa:	f06f 0009 	mvn.w	r0, #9
    86fe:	e7b4      	b.n	866a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    8700:	2000      	movs	r0, #0
    8702:	e7b2      	b.n	866a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    8704:	f06f 000c 	mvn.w	r0, #12
    8708:	e7af      	b.n	866a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    870a:	f04f 30ff 	mov.w	r0, #4294967295
    870e:	e7ac      	b.n	866a <cdcdf_acm_req+0x42>
    8710:	200011bc 	.word	0x200011bc
    8714:	00009771 	.word	0x00009771
    8718:	200011c4 	.word	0x200011c4
    871c:	0000924d 	.word	0x0000924d

00008720 <cdcdf_acm_ctrl>:
{
    8720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8724:	b083      	sub	sp, #12
    8726:	4616      	mov	r6, r2
	switch (ctrl) {
    8728:	2901      	cmp	r1, #1
    872a:	d066      	beq.n	87fa <cdcdf_acm_ctrl+0xda>
    872c:	b141      	cbz	r1, 8740 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    872e:	2902      	cmp	r1, #2
    8730:	bf0c      	ite	eq
    8732:	f06f 001a 	mvneq.w	r0, #26
    8736:	f06f 000c 	mvnne.w	r0, #12
}
    873a:	b003      	add	sp, #12
    873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    8740:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    8744:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    8746:	2800      	cmp	r0, #0
    8748:	f000 8085 	beq.w	8856 <cdcdf_acm_ctrl+0x136>
    874c:	f10a 3bff 	add.w	fp, sl, #4294967295
    8750:	f10a 0301 	add.w	r3, sl, #1
    8754:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8756:	4f46      	ldr	r7, [pc, #280]	; (8870 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    8758:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8880 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    875c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8884 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    8760:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    8762:	7943      	ldrb	r3, [r0, #5]
    8764:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    8768:	2b02      	cmp	r3, #2
    876a:	d002      	beq.n	8772 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    876c:	f06f 0009 	mvn.w	r0, #9
    8770:	e7e3      	b.n	873a <cdcdf_acm_ctrl+0x1a>
    8772:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    8776:	f89b 3000 	ldrb.w	r3, [fp]
    877a:	429a      	cmp	r2, r3
    877c:	d06e      	beq.n	885c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    877e:	2bff      	cmp	r3, #255	; 0xff
    8780:	d16f      	bne.n	8862 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    8782:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    8786:	2205      	movs	r2, #5
    8788:	6871      	ldr	r1, [r6, #4]
    878a:	4b3a      	ldr	r3, [pc, #232]	; (8874 <cdcdf_acm_ctrl+0x154>)
    878c:	4798      	blx	r3
		while (NULL != ep) {
    878e:	4604      	mov	r4, r0
    8790:	b1f8      	cbz	r0, 87d2 <cdcdf_acm_ctrl+0xb2>
    8792:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    8796:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    8798:	7963      	ldrb	r3, [r4, #5]
    879a:	7922      	ldrb	r2, [r4, #4]
    879c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    87a0:	b292      	uxth	r2, r2
    87a2:	78e1      	ldrb	r1, [r4, #3]
    87a4:	4628      	mov	r0, r5
    87a6:	47b8      	blx	r7
    87a8:	2800      	cmp	r0, #0
    87aa:	d15d      	bne.n	8868 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    87ac:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    87b0:	bf14      	ite	ne
    87b2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    87b6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    87ba:	4628      	mov	r0, r5
    87bc:	47c8      	blx	r9
			desc->sod = ep;
    87be:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    87c0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    87c2:	6871      	ldr	r1, [r6, #4]
    87c4:	4420      	add	r0, r4
    87c6:	47c0      	blx	r8
		while (NULL != ep) {
    87c8:	4604      	mov	r4, r0
    87ca:	2800      	cmp	r0, #0
    87cc:	d1e3      	bne.n	8796 <cdcdf_acm_ctrl+0x76>
    87ce:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    87d2:	6833      	ldr	r3, [r6, #0]
    87d4:	7818      	ldrb	r0, [r3, #0]
    87d6:	2204      	movs	r2, #4
    87d8:	6871      	ldr	r1, [r6, #4]
    87da:	4418      	add	r0, r3
    87dc:	4b25      	ldr	r3, [pc, #148]	; (8874 <cdcdf_acm_ctrl+0x154>)
    87de:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    87e0:	9b00      	ldr	r3, [sp, #0]
    87e2:	459b      	cmp	fp, r3
    87e4:	d004      	beq.n	87f0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    87e6:	2800      	cmp	r0, #0
    87e8:	d1ba      	bne.n	8760 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    87ea:	f06f 0009 	mvn.w	r0, #9
    87ee:	e7a4      	b.n	873a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    87f0:	2201      	movs	r2, #1
    87f2:	4b21      	ldr	r3, [pc, #132]	; (8878 <cdcdf_acm_ctrl+0x158>)
    87f4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    87f6:	2000      	movs	r0, #0
    87f8:	e79f      	b.n	873a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    87fa:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    87fc:	b142      	cbz	r2, 8810 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    87fe:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    8800:	795b      	ldrb	r3, [r3, #5]
    8802:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    8806:	2b02      	cmp	r3, #2
    8808:	d002      	beq.n	8810 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    880a:	f06f 0009 	mvn.w	r0, #9
    880e:	e794      	b.n	873a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    8810:	7823      	ldrb	r3, [r4, #0]
    8812:	2bff      	cmp	r3, #255	; 0xff
    8814:	d008      	beq.n	8828 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    8816:	23ff      	movs	r3, #255	; 0xff
    8818:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    881a:	78a0      	ldrb	r0, [r4, #2]
    881c:	4298      	cmp	r0, r3
    881e:	d003      	beq.n	8828 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    8820:	4b16      	ldr	r3, [pc, #88]	; (887c <cdcdf_acm_ctrl+0x15c>)
    8822:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    8824:	23ff      	movs	r3, #255	; 0xff
    8826:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    8828:	7863      	ldrb	r3, [r4, #1]
    882a:	2bff      	cmp	r3, #255	; 0xff
    882c:	d008      	beq.n	8840 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    882e:	23ff      	movs	r3, #255	; 0xff
    8830:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    8832:	78e0      	ldrb	r0, [r4, #3]
    8834:	4298      	cmp	r0, r3
    8836:	d003      	beq.n	8840 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    8838:	4b10      	ldr	r3, [pc, #64]	; (887c <cdcdf_acm_ctrl+0x15c>)
    883a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    883c:	23ff      	movs	r3, #255	; 0xff
    883e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    8840:	7920      	ldrb	r0, [r4, #4]
    8842:	28ff      	cmp	r0, #255	; 0xff
    8844:	d003      	beq.n	884e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    8846:	4b0d      	ldr	r3, [pc, #52]	; (887c <cdcdf_acm_ctrl+0x15c>)
    8848:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    884a:	23ff      	movs	r3, #255	; 0xff
    884c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    884e:	2000      	movs	r0, #0
    8850:	4b09      	ldr	r3, [pc, #36]	; (8878 <cdcdf_acm_ctrl+0x158>)
    8852:	7158      	strb	r0, [r3, #5]
    8854:	e771      	b.n	873a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    8856:	f06f 0009 	mvn.w	r0, #9
    885a:	e76e      	b.n	873a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    885c:	f06f 0011 	mvn.w	r0, #17
    8860:	e76b      	b.n	873a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    8862:	f06f 001b 	mvn.w	r0, #27
    8866:	e768      	b.n	873a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    8868:	f06f 0013 	mvn.w	r0, #19
    886c:	e765      	b.n	873a <cdcdf_acm_ctrl+0x1a>
    886e:	bf00      	nop
    8870:	00004265 	.word	0x00004265
    8874:	00009791 	.word	0x00009791
    8878:	200011bc 	.word	0x200011bc
    887c:	000042cd 	.word	0x000042cd
    8880:	000042f9 	.word	0x000042f9
    8884:	000097cb 	.word	0x000097cb

00008888 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    8888:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    888a:	4b0a      	ldr	r3, [pc, #40]	; (88b4 <cdcdf_acm_init+0x2c>)
    888c:	4798      	blx	r3
    888e:	2801      	cmp	r0, #1
    8890:	d80c      	bhi.n	88ac <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    8892:	4809      	ldr	r0, [pc, #36]	; (88b8 <cdcdf_acm_init+0x30>)
    8894:	4b09      	ldr	r3, [pc, #36]	; (88bc <cdcdf_acm_init+0x34>)
    8896:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    8898:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    889a:	3018      	adds	r0, #24
    889c:	4b08      	ldr	r3, [pc, #32]	; (88c0 <cdcdf_acm_init+0x38>)
    889e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    88a0:	4908      	ldr	r1, [pc, #32]	; (88c4 <cdcdf_acm_init+0x3c>)
    88a2:	2001      	movs	r0, #1
    88a4:	4b08      	ldr	r3, [pc, #32]	; (88c8 <cdcdf_acm_init+0x40>)
    88a6:	4798      	blx	r3
	return ERR_NONE;
    88a8:	2000      	movs	r0, #0
    88aa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    88ac:	f06f 0010 	mvn.w	r0, #16
}
    88b0:	bd08      	pop	{r3, pc}
    88b2:	bf00      	nop
    88b4:	0000977d 	.word	0x0000977d
    88b8:	200011bc 	.word	0x200011bc
    88bc:	00008721 	.word	0x00008721
    88c0:	0000971d 	.word	0x0000971d
    88c4:	20000358 	.word	0x20000358
    88c8:	00009689 	.word	0x00009689

000088cc <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    88cc:	4b07      	ldr	r3, [pc, #28]	; (88ec <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    88ce:	795b      	ldrb	r3, [r3, #5]
    88d0:	b143      	cbz	r3, 88e4 <cdcdf_acm_write+0x18>
{
    88d2:	b510      	push	{r4, lr}
    88d4:	460a      	mov	r2, r1
    88d6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    88d8:	2301      	movs	r3, #1
    88da:	4804      	ldr	r0, [pc, #16]	; (88ec <cdcdf_acm_write+0x20>)
    88dc:	78c0      	ldrb	r0, [r0, #3]
    88de:	4c04      	ldr	r4, [pc, #16]	; (88f0 <cdcdf_acm_write+0x24>)
    88e0:	47a0      	blx	r4
    88e2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    88e4:	f06f 0010 	mvn.w	r0, #16
    88e8:	4770      	bx	lr
    88ea:	bf00      	nop
    88ec:	200011bc 	.word	0x200011bc
    88f0:	0000924d 	.word	0x0000924d

000088f4 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    88f4:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    88f6:	780b      	ldrb	r3, [r1, #0]
    88f8:	2b81      	cmp	r3, #129	; 0x81
    88fa:	d010      	beq.n	891e <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    88fc:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8900:	2b01      	cmp	r3, #1
    8902:	d13f      	bne.n	8984 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    8904:	888a      	ldrh	r2, [r1, #4]
    8906:	4b22      	ldr	r3, [pc, #136]	; (8990 <hid_keyboard_req+0x9c>)
    8908:	7b1b      	ldrb	r3, [r3, #12]
    890a:	429a      	cmp	r2, r3
    890c:	d13d      	bne.n	898a <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    890e:	784b      	ldrb	r3, [r1, #1]
    8910:	2b03      	cmp	r3, #3
    8912:	d028      	beq.n	8966 <hid_keyboard_req+0x72>
    8914:	2b0b      	cmp	r3, #11
    8916:	d02c      	beq.n	8972 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    8918:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    891c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    891e:	784b      	ldrb	r3, [r1, #1]
    8920:	2b06      	cmp	r3, #6
    8922:	d002      	beq.n	892a <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    8924:	f06f 0009 	mvn.w	r0, #9
    8928:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    892a:	888a      	ldrh	r2, [r1, #4]
    892c:	4b18      	ldr	r3, [pc, #96]	; (8990 <hid_keyboard_req+0x9c>)
    892e:	7b1b      	ldrb	r3, [r3, #12]
    8930:	429a      	cmp	r2, r3
    8932:	d002      	beq.n	893a <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    8934:	f06f 0009 	mvn.w	r0, #9
    8938:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    893a:	884b      	ldrh	r3, [r1, #2]
    893c:	0a1b      	lsrs	r3, r3, #8
    893e:	2b21      	cmp	r3, #33	; 0x21
    8940:	d004      	beq.n	894c <hid_keyboard_req+0x58>
    8942:	2b22      	cmp	r3, #34	; 0x22
    8944:	d009      	beq.n	895a <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    8946:	f06f 000c 	mvn.w	r0, #12
    894a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    894c:	4b10      	ldr	r3, [pc, #64]	; (8990 <hid_keyboard_req+0x9c>)
    894e:	6819      	ldr	r1, [r3, #0]
    8950:	2300      	movs	r3, #0
    8952:	780a      	ldrb	r2, [r1, #0]
    8954:	4c0f      	ldr	r4, [pc, #60]	; (8994 <hid_keyboard_req+0xa0>)
    8956:	47a0      	blx	r4
    8958:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    895a:	2300      	movs	r3, #0
    895c:	223b      	movs	r2, #59	; 0x3b
    895e:	490e      	ldr	r1, [pc, #56]	; (8998 <hid_keyboard_req+0xa4>)
    8960:	4c0c      	ldr	r4, [pc, #48]	; (8994 <hid_keyboard_req+0xa0>)
    8962:	47a0      	blx	r4
    8964:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    8966:	2300      	movs	r3, #0
    8968:	2201      	movs	r2, #1
    896a:	490c      	ldr	r1, [pc, #48]	; (899c <hid_keyboard_req+0xa8>)
    896c:	4c09      	ldr	r4, [pc, #36]	; (8994 <hid_keyboard_req+0xa0>)
    896e:	47a0      	blx	r4
    8970:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    8972:	884a      	ldrh	r2, [r1, #2]
    8974:	4b06      	ldr	r3, [pc, #24]	; (8990 <hid_keyboard_req+0x9c>)
    8976:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    8978:	2300      	movs	r3, #0
    897a:	461a      	mov	r2, r3
    897c:	4619      	mov	r1, r3
    897e:	4c05      	ldr	r4, [pc, #20]	; (8994 <hid_keyboard_req+0xa0>)
    8980:	47a0      	blx	r4
    8982:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8984:	f06f 0009 	mvn.w	r0, #9
    8988:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    898a:	f06f 0009 	mvn.w	r0, #9
    898e:	bd10      	pop	{r4, pc}
    8990:	200011e0 	.word	0x200011e0
    8994:	0000924d 	.word	0x0000924d
    8998:	0000b21c 	.word	0x0000b21c
    899c:	200011ef 	.word	0x200011ef

000089a0 <hid_keyboard_ctrl>:
{
    89a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89a4:	4614      	mov	r4, r2
	switch (ctrl) {
    89a6:	2901      	cmp	r1, #1
    89a8:	d050      	beq.n	8a4c <hid_keyboard_ctrl+0xac>
    89aa:	b141      	cbz	r1, 89be <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    89ac:	2902      	cmp	r1, #2
    89ae:	bf0c      	ite	eq
    89b0:	f06f 051a 	mvneq.w	r5, #26
    89b4:	f06f 050c 	mvnne.w	r5, #12
}
    89b8:	4628      	mov	r0, r5
    89ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    89be:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    89c2:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    89c4:	2b00      	cmp	r3, #0
    89c6:	d05e      	beq.n	8a86 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    89c8:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    89ca:	795b      	ldrb	r3, [r3, #5]
    89cc:	2b03      	cmp	r3, #3
    89ce:	d15d      	bne.n	8a8c <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    89d0:	f898 300c 	ldrb.w	r3, [r8, #12]
    89d4:	429a      	cmp	r2, r3
    89d6:	d05c      	beq.n	8a92 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    89d8:	2bff      	cmp	r3, #255	; 0xff
    89da:	d15d      	bne.n	8a98 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    89dc:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    89e0:	6823      	ldr	r3, [r4, #0]
    89e2:	7818      	ldrb	r0, [r3, #0]
    89e4:	2221      	movs	r2, #33	; 0x21
    89e6:	6861      	ldr	r1, [r4, #4]
    89e8:	4418      	add	r0, r3
    89ea:	4b31      	ldr	r3, [pc, #196]	; (8ab0 <hid_keyboard_ctrl+0x110>)
    89ec:	4798      	blx	r3
    89ee:	4b31      	ldr	r3, [pc, #196]	; (8ab4 <hid_keyboard_ctrl+0x114>)
    89f0:	6018      	str	r0, [r3, #0]
    89f2:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    89f4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8abc <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    89f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8ac0 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    89fc:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8ac4 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8a00:	6823      	ldr	r3, [r4, #0]
    8a02:	7818      	ldrb	r0, [r3, #0]
    8a04:	6861      	ldr	r1, [r4, #4]
    8a06:	4418      	add	r0, r3
    8a08:	47c8      	blx	r9
		desc->sod = ep;
    8a0a:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    8a0c:	2800      	cmp	r0, #0
    8a0e:	d046      	beq.n	8a9e <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    8a10:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    8a12:	7943      	ldrb	r3, [r0, #5]
    8a14:	7902      	ldrb	r2, [r0, #4]
    8a16:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8a1a:	b292      	uxth	r2, r2
    8a1c:	78c1      	ldrb	r1, [r0, #3]
    8a1e:	4638      	mov	r0, r7
    8a20:	47d0      	blx	sl
    8a22:	4605      	mov	r5, r0
    8a24:	2800      	cmp	r0, #0
    8a26:	d13d      	bne.n	8aa4 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8a28:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    8a2c:	bf14      	ite	ne
    8a2e:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    8a32:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    8a36:	4638      	mov	r0, r7
    8a38:	47d8      	blx	fp
    8a3a:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    8a3c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    8a40:	d1de      	bne.n	8a00 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    8a42:	4b1c      	ldr	r3, [pc, #112]	; (8ab4 <hid_keyboard_ctrl+0x114>)
    8a44:	2201      	movs	r2, #1
    8a46:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    8a48:	741a      	strb	r2, [r3, #16]
    8a4a:	e7b5      	b.n	89b8 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    8a4c:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    8a4e:	b11a      	cbz	r2, 8a58 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8a50:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8a52:	795b      	ldrb	r3, [r3, #5]
    8a54:	2b03      	cmp	r3, #3
    8a56:	d128      	bne.n	8aaa <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    8a58:	7b2b      	ldrb	r3, [r5, #12]
    8a5a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    8a5c:	bf1c      	itt	ne
    8a5e:	23ff      	movne	r3, #255	; 0xff
    8a60:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    8a62:	7b68      	ldrb	r0, [r5, #13]
    8a64:	28ff      	cmp	r0, #255	; 0xff
    8a66:	d003      	beq.n	8a70 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    8a68:	4b13      	ldr	r3, [pc, #76]	; (8ab8 <hid_keyboard_ctrl+0x118>)
    8a6a:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8a6c:	23ff      	movs	r3, #255	; 0xff
    8a6e:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    8a70:	7ba8      	ldrb	r0, [r5, #14]
    8a72:	28ff      	cmp	r0, #255	; 0xff
    8a74:	d003      	beq.n	8a7e <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    8a76:	4b10      	ldr	r3, [pc, #64]	; (8ab8 <hid_keyboard_ctrl+0x118>)
    8a78:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    8a7a:	23ff      	movs	r3, #255	; 0xff
    8a7c:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    8a7e:	2500      	movs	r5, #0
    8a80:	4b0c      	ldr	r3, [pc, #48]	; (8ab4 <hid_keyboard_ctrl+0x114>)
    8a82:	741d      	strb	r5, [r3, #16]
    8a84:	e798      	b.n	89b8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    8a86:	f06f 0509 	mvn.w	r5, #9
    8a8a:	e795      	b.n	89b8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    8a8c:	f06f 0509 	mvn.w	r5, #9
    8a90:	e792      	b.n	89b8 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    8a92:	f06f 0511 	mvn.w	r5, #17
    8a96:	e78f      	b.n	89b8 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    8a98:	f06f 051b 	mvn.w	r5, #27
    8a9c:	e78c      	b.n	89b8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    8a9e:	f06f 0509 	mvn.w	r5, #9
    8aa2:	e789      	b.n	89b8 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    8aa4:	f06f 0513 	mvn.w	r5, #19
    8aa8:	e786      	b.n	89b8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    8aaa:	f06f 0509 	mvn.w	r5, #9
    8aae:	e783      	b.n	89b8 <hid_keyboard_ctrl+0x18>
    8ab0:	00009791 	.word	0x00009791
    8ab4:	200011e0 	.word	0x200011e0
    8ab8:	000042cd 	.word	0x000042cd
    8abc:	000097cb 	.word	0x000097cb
    8ac0:	00004265 	.word	0x00004265
    8ac4:	000042f9 	.word	0x000042f9

00008ac8 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    8ac8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    8aca:	4b0a      	ldr	r3, [pc, #40]	; (8af4 <hiddf_keyboard_init+0x2c>)
    8acc:	4798      	blx	r3
    8ace:	2801      	cmp	r0, #1
    8ad0:	d80c      	bhi.n	8aec <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    8ad2:	4809      	ldr	r0, [pc, #36]	; (8af8 <hiddf_keyboard_init+0x30>)
    8ad4:	4b09      	ldr	r3, [pc, #36]	; (8afc <hiddf_keyboard_init+0x34>)
    8ad6:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    8ad8:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    8ada:	3014      	adds	r0, #20
    8adc:	4b08      	ldr	r3, [pc, #32]	; (8b00 <hiddf_keyboard_init+0x38>)
    8ade:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    8ae0:	4908      	ldr	r1, [pc, #32]	; (8b04 <hiddf_keyboard_init+0x3c>)
    8ae2:	2001      	movs	r0, #1
    8ae4:	4b08      	ldr	r3, [pc, #32]	; (8b08 <hiddf_keyboard_init+0x40>)
    8ae6:	4798      	blx	r3
	return ERR_NONE;
    8ae8:	2000      	movs	r0, #0
    8aea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8aec:	f06f 0010 	mvn.w	r0, #16
}
    8af0:	bd08      	pop	{r3, pc}
    8af2:	bf00      	nop
    8af4:	0000977d 	.word	0x0000977d
    8af8:	200011e0 	.word	0x200011e0
    8afc:	000089a1 	.word	0x000089a1
    8b00:	0000971d 	.word	0x0000971d
    8b04:	20000360 	.word	0x20000360
    8b08:	00009689 	.word	0x00009689

00008b0c <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    8b0c:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    8b0e:	4b26      	ldr	r3, [pc, #152]	; (8ba8 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    8b10:	7c1b      	ldrb	r3, [r3, #16]
    8b12:	2b00      	cmp	r3, #0
    8b14:	d045      	beq.n	8ba2 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    8b16:	4a24      	ldr	r2, [pc, #144]	; (8ba8 <hiddf_keyboard_keys_state_change+0x9c>)
    8b18:	2300      	movs	r3, #0
    8b1a:	6053      	str	r3, [r2, #4]
    8b1c:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    8b1e:	b329      	cbz	r1, 8b6c <hiddf_keyboard_keys_state_change+0x60>
    8b20:	4603      	mov	r3, r0
    8b22:	1e4d      	subs	r5, r1, #1
    8b24:	b2ed      	uxtb	r5, r5
    8b26:	3501      	adds	r5, #1
    8b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8b2c:	4405      	add	r5, r0
    8b2e:	2200      	movs	r2, #0
    8b30:	e002      	b.n	8b38 <hiddf_keyboard_keys_state_change+0x2c>
    8b32:	3303      	adds	r3, #3
    8b34:	42ab      	cmp	r3, r5
    8b36:	d005      	beq.n	8b44 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    8b38:	785c      	ldrb	r4, [r3, #1]
    8b3a:	2c00      	cmp	r4, #0
    8b3c:	d0f9      	beq.n	8b32 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    8b3e:	3201      	adds	r2, #1
    8b40:	b2d2      	uxtb	r2, r2
    8b42:	e7f6      	b.n	8b32 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    8b44:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    8b46:	b2d2      	uxtb	r2, r2
    8b48:	2a06      	cmp	r2, #6
    8b4a:	d809      	bhi.n	8b60 <hiddf_keyboard_keys_state_change+0x54>
    8b4c:	4603      	mov	r3, r0
    8b4e:	1e4a      	subs	r2, r1, #1
    8b50:	b2d2      	uxtb	r2, r2
    8b52:	3201      	adds	r2, #1
    8b54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8b58:	4410      	add	r0, r2
    8b5a:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    8b5c:	4d12      	ldr	r5, [pc, #72]	; (8ba8 <hiddf_keyboard_keys_state_change+0x9c>)
    8b5e:	e015      	b.n	8b8c <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    8b60:	4b11      	ldr	r3, [pc, #68]	; (8ba8 <hiddf_keyboard_keys_state_change+0x9c>)
    8b62:	f04f 32ff 	mov.w	r2, #4294967295
    8b66:	f8c3 2006 	str.w	r2, [r3, #6]
    8b6a:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    8b6c:	480e      	ldr	r0, [pc, #56]	; (8ba8 <hiddf_keyboard_keys_state_change+0x9c>)
    8b6e:	2300      	movs	r3, #0
    8b70:	2208      	movs	r2, #8
    8b72:	1d01      	adds	r1, r0, #4
    8b74:	7b40      	ldrb	r0, [r0, #13]
    8b76:	4c0d      	ldr	r4, [pc, #52]	; (8bac <hiddf_keyboard_keys_state_change+0xa0>)
    8b78:	47a0      	blx	r4
    8b7a:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    8b7c:	1c62      	adds	r2, r4, #1
    8b7e:	7819      	ldrb	r1, [r3, #0]
    8b80:	442c      	add	r4, r5
    8b82:	7121      	strb	r1, [r4, #4]
    8b84:	b2d4      	uxtb	r4, r2
    8b86:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    8b88:	4283      	cmp	r3, r0
    8b8a:	d0ef      	beq.n	8b6c <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    8b8c:	789a      	ldrb	r2, [r3, #2]
    8b8e:	2a01      	cmp	r2, #1
    8b90:	d1f9      	bne.n	8b86 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    8b92:	785a      	ldrb	r2, [r3, #1]
    8b94:	2a00      	cmp	r2, #0
    8b96:	d0f1      	beq.n	8b7c <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    8b98:	792a      	ldrb	r2, [r5, #4]
    8b9a:	7819      	ldrb	r1, [r3, #0]
    8b9c:	430a      	orrs	r2, r1
    8b9e:	712a      	strb	r2, [r5, #4]
    8ba0:	e7f1      	b.n	8b86 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    8ba2:	f06f 0010 	mvn.w	r0, #16
}
    8ba6:	bd38      	pop	{r3, r4, r5, pc}
    8ba8:	200011e0 	.word	0x200011e0
    8bac:	0000924d 	.word	0x0000924d

00008bb0 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8bb0:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8bb2:	780b      	ldrb	r3, [r1, #0]
    8bb4:	2b81      	cmp	r3, #129	; 0x81
    8bb6:	d010      	beq.n	8bda <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8bb8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8bbc:	2b01      	cmp	r3, #1
    8bbe:	d13f      	bne.n	8c40 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    8bc0:	888a      	ldrh	r2, [r1, #4]
    8bc2:	4b22      	ldr	r3, [pc, #136]	; (8c4c <hid_mouse_req+0x9c>)
    8bc4:	7a1b      	ldrb	r3, [r3, #8]
    8bc6:	429a      	cmp	r2, r3
    8bc8:	d13d      	bne.n	8c46 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    8bca:	784b      	ldrb	r3, [r1, #1]
    8bcc:	2b03      	cmp	r3, #3
    8bce:	d028      	beq.n	8c22 <hid_mouse_req+0x72>
    8bd0:	2b0b      	cmp	r3, #11
    8bd2:	d02c      	beq.n	8c2e <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    8bd4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8bd8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8bda:	784b      	ldrb	r3, [r1, #1]
    8bdc:	2b06      	cmp	r3, #6
    8bde:	d002      	beq.n	8be6 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    8be0:	f06f 0009 	mvn.w	r0, #9
    8be4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8be6:	888a      	ldrh	r2, [r1, #4]
    8be8:	4b18      	ldr	r3, [pc, #96]	; (8c4c <hid_mouse_req+0x9c>)
    8bea:	7a1b      	ldrb	r3, [r3, #8]
    8bec:	429a      	cmp	r2, r3
    8bee:	d002      	beq.n	8bf6 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    8bf0:	f06f 0009 	mvn.w	r0, #9
    8bf4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    8bf6:	884b      	ldrh	r3, [r1, #2]
    8bf8:	0a1b      	lsrs	r3, r3, #8
    8bfa:	2b21      	cmp	r3, #33	; 0x21
    8bfc:	d004      	beq.n	8c08 <hid_mouse_req+0x58>
    8bfe:	2b22      	cmp	r3, #34	; 0x22
    8c00:	d009      	beq.n	8c16 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    8c02:	f06f 000c 	mvn.w	r0, #12
    8c06:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    8c08:	4b10      	ldr	r3, [pc, #64]	; (8c4c <hid_mouse_req+0x9c>)
    8c0a:	6819      	ldr	r1, [r3, #0]
    8c0c:	2300      	movs	r3, #0
    8c0e:	780a      	ldrb	r2, [r1, #0]
    8c10:	4c0f      	ldr	r4, [pc, #60]	; (8c50 <hid_mouse_req+0xa0>)
    8c12:	47a0      	blx	r4
    8c14:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    8c16:	2300      	movs	r3, #0
    8c18:	2234      	movs	r2, #52	; 0x34
    8c1a:	490e      	ldr	r1, [pc, #56]	; (8c54 <hid_mouse_req+0xa4>)
    8c1c:	4c0c      	ldr	r4, [pc, #48]	; (8c50 <hid_mouse_req+0xa0>)
    8c1e:	47a0      	blx	r4
    8c20:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    8c22:	2300      	movs	r3, #0
    8c24:	2201      	movs	r2, #1
    8c26:	490c      	ldr	r1, [pc, #48]	; (8c58 <hid_mouse_req+0xa8>)
    8c28:	4c09      	ldr	r4, [pc, #36]	; (8c50 <hid_mouse_req+0xa0>)
    8c2a:	47a0      	blx	r4
    8c2c:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    8c2e:	884a      	ldrh	r2, [r1, #2]
    8c30:	4b06      	ldr	r3, [pc, #24]	; (8c4c <hid_mouse_req+0x9c>)
    8c32:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    8c34:	2300      	movs	r3, #0
    8c36:	461a      	mov	r2, r3
    8c38:	4619      	mov	r1, r3
    8c3a:	4c05      	ldr	r4, [pc, #20]	; (8c50 <hid_mouse_req+0xa0>)
    8c3c:	47a0      	blx	r4
    8c3e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8c40:	f06f 0009 	mvn.w	r0, #9
    8c44:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8c46:	f06f 0009 	mvn.w	r0, #9
    8c4a:	bd10      	pop	{r4, pc}
    8c4c:	20001200 	.word	0x20001200
    8c50:	0000924d 	.word	0x0000924d
    8c54:	0000b258 	.word	0x0000b258
    8c58:	2000120a 	.word	0x2000120a

00008c5c <hid_mouse_ctrl>:
{
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4614      	mov	r4, r2
	switch (ctrl) {
    8c60:	2901      	cmp	r1, #1
    8c62:	d040      	beq.n	8ce6 <hid_mouse_ctrl+0x8a>
    8c64:	b139      	cbz	r1, 8c76 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    8c66:	2902      	cmp	r1, #2
    8c68:	bf0c      	ite	eq
    8c6a:	f06f 041a 	mvneq.w	r4, #26
    8c6e:	f06f 040c 	mvnne.w	r4, #12
}
    8c72:	4620      	mov	r0, r4
    8c74:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    8c76:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    8c78:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	d049      	beq.n	8d12 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    8c7e:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    8c80:	795b      	ldrb	r3, [r3, #5]
    8c82:	2b03      	cmp	r3, #3
    8c84:	d148      	bne.n	8d18 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    8c86:	7a2b      	ldrb	r3, [r5, #8]
    8c88:	429a      	cmp	r2, r3
    8c8a:	d048      	beq.n	8d1e <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    8c8c:	2bff      	cmp	r3, #255	; 0xff
    8c8e:	d149      	bne.n	8d24 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    8c90:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    8c92:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    8c94:	7818      	ldrb	r0, [r3, #0]
    8c96:	2221      	movs	r2, #33	; 0x21
    8c98:	6861      	ldr	r1, [r4, #4]
    8c9a:	4418      	add	r0, r3
    8c9c:	4b29      	ldr	r3, [pc, #164]	; (8d44 <hid_mouse_ctrl+0xe8>)
    8c9e:	4798      	blx	r3
    8ca0:	4b29      	ldr	r3, [pc, #164]	; (8d48 <hid_mouse_ctrl+0xec>)
    8ca2:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8ca4:	6823      	ldr	r3, [r4, #0]
    8ca6:	7818      	ldrb	r0, [r3, #0]
    8ca8:	6861      	ldr	r1, [r4, #4]
    8caa:	4418      	add	r0, r3
    8cac:	4b27      	ldr	r3, [pc, #156]	; (8d4c <hid_mouse_ctrl+0xf0>)
    8cae:	4798      	blx	r3
	desc->sod = ep;
    8cb0:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d039      	beq.n	8d2a <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    8cb6:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    8cb8:	7943      	ldrb	r3, [r0, #5]
    8cba:	7902      	ldrb	r2, [r0, #4]
    8cbc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8cc0:	b292      	uxth	r2, r2
    8cc2:	78c1      	ldrb	r1, [r0, #3]
    8cc4:	4630      	mov	r0, r6
    8cc6:	4b22      	ldr	r3, [pc, #136]	; (8d50 <hid_mouse_ctrl+0xf4>)
    8cc8:	4798      	blx	r3
    8cca:	4604      	mov	r4, r0
    8ccc:	bb80      	cbnz	r0, 8d30 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8cce:	f016 0f80 	tst.w	r6, #128	; 0x80
    8cd2:	d030      	beq.n	8d36 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    8cd4:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    8cd6:	4630      	mov	r0, r6
    8cd8:	4b1e      	ldr	r3, [pc, #120]	; (8d54 <hid_mouse_ctrl+0xf8>)
    8cda:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    8cdc:	4b1a      	ldr	r3, [pc, #104]	; (8d48 <hid_mouse_ctrl+0xec>)
    8cde:	2201      	movs	r2, #1
    8ce0:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    8ce2:	72da      	strb	r2, [r3, #11]
    8ce4:	e7c5      	b.n	8c72 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    8ce6:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    8ce8:	b11a      	cbz	r2, 8cf2 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8cea:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8cec:	795b      	ldrb	r3, [r3, #5]
    8cee:	2b03      	cmp	r3, #3
    8cf0:	d124      	bne.n	8d3c <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    8cf2:	7a2b      	ldrb	r3, [r5, #8]
    8cf4:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    8cf6:	bf1c      	itt	ne
    8cf8:	23ff      	movne	r3, #255	; 0xff
    8cfa:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    8cfc:	7a68      	ldrb	r0, [r5, #9]
    8cfe:	28ff      	cmp	r0, #255	; 0xff
    8d00:	d003      	beq.n	8d0a <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    8d02:	4b15      	ldr	r3, [pc, #84]	; (8d58 <hid_mouse_ctrl+0xfc>)
    8d04:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8d06:	23ff      	movs	r3, #255	; 0xff
    8d08:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    8d0a:	2400      	movs	r4, #0
    8d0c:	4b0e      	ldr	r3, [pc, #56]	; (8d48 <hid_mouse_ctrl+0xec>)
    8d0e:	72dc      	strb	r4, [r3, #11]
    8d10:	e7af      	b.n	8c72 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d12:	f06f 0409 	mvn.w	r4, #9
    8d16:	e7ac      	b.n	8c72 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d18:	f06f 0409 	mvn.w	r4, #9
    8d1c:	e7a9      	b.n	8c72 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    8d1e:	f06f 0411 	mvn.w	r4, #17
    8d22:	e7a6      	b.n	8c72 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    8d24:	f06f 041b 	mvn.w	r4, #27
    8d28:	e7a3      	b.n	8c72 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d2a:	f06f 0409 	mvn.w	r4, #9
    8d2e:	e7a0      	b.n	8c72 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    8d30:	f06f 0413 	mvn.w	r4, #19
    8d34:	e79d      	b.n	8c72 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    8d36:	f04f 34ff 	mov.w	r4, #4294967295
    8d3a:	e79a      	b.n	8c72 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    8d3c:	f06f 0409 	mvn.w	r4, #9
    8d40:	e797      	b.n	8c72 <hid_mouse_ctrl+0x16>
    8d42:	bf00      	nop
    8d44:	00009791 	.word	0x00009791
    8d48:	20001200 	.word	0x20001200
    8d4c:	000097cb 	.word	0x000097cb
    8d50:	00004265 	.word	0x00004265
    8d54:	000042f9 	.word	0x000042f9
    8d58:	000042cd 	.word	0x000042cd

00008d5c <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    8d5c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    8d5e:	4b0a      	ldr	r3, [pc, #40]	; (8d88 <hiddf_mouse_init+0x2c>)
    8d60:	4798      	blx	r3
    8d62:	2801      	cmp	r0, #1
    8d64:	d80c      	bhi.n	8d80 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    8d66:	4809      	ldr	r0, [pc, #36]	; (8d8c <hiddf_mouse_init+0x30>)
    8d68:	4b09      	ldr	r3, [pc, #36]	; (8d90 <hiddf_mouse_init+0x34>)
    8d6a:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    8d6c:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    8d6e:	300c      	adds	r0, #12
    8d70:	4b08      	ldr	r3, [pc, #32]	; (8d94 <hiddf_mouse_init+0x38>)
    8d72:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    8d74:	4908      	ldr	r1, [pc, #32]	; (8d98 <hiddf_mouse_init+0x3c>)
    8d76:	2001      	movs	r0, #1
    8d78:	4b08      	ldr	r3, [pc, #32]	; (8d9c <hiddf_mouse_init+0x40>)
    8d7a:	4798      	blx	r3
	return ERR_NONE;
    8d7c:	2000      	movs	r0, #0
    8d7e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8d80:	f06f 0010 	mvn.w	r0, #16
}
    8d84:	bd08      	pop	{r3, pc}
    8d86:	bf00      	nop
    8d88:	0000977d 	.word	0x0000977d
    8d8c:	20001200 	.word	0x20001200
    8d90:	00008c5d 	.word	0x00008c5d
    8d94:	0000971d 	.word	0x0000971d
    8d98:	20000368 	.word	0x20000368
    8d9c:	00009689 	.word	0x00009689

00008da0 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    8da0:	2200      	movs	r2, #0
    8da2:	4b0d      	ldr	r3, [pc, #52]	; (8dd8 <hiddf_mouse_move+0x38>)
    8da4:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    8da6:	2901      	cmp	r1, #1
    8da8:	d00e      	beq.n	8dc8 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    8daa:	2902      	cmp	r1, #2
    8dac:	d00e      	beq.n	8dcc <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    8dae:	2903      	cmp	r1, #3
    8db0:	d10f      	bne.n	8dd2 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    8db2:	4b09      	ldr	r3, [pc, #36]	; (8dd8 <hiddf_mouse_move+0x38>)
    8db4:	71d8      	strb	r0, [r3, #7]
{
    8db6:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    8db8:	4807      	ldr	r0, [pc, #28]	; (8dd8 <hiddf_mouse_move+0x38>)
    8dba:	2300      	movs	r3, #0
    8dbc:	2204      	movs	r2, #4
    8dbe:	1881      	adds	r1, r0, r2
    8dc0:	7a40      	ldrb	r0, [r0, #9]
    8dc2:	4c06      	ldr	r4, [pc, #24]	; (8ddc <hiddf_mouse_move+0x3c>)
    8dc4:	47a0      	blx	r4
    8dc6:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    8dc8:	7158      	strb	r0, [r3, #5]
    8dca:	e7f4      	b.n	8db6 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    8dcc:	4b02      	ldr	r3, [pc, #8]	; (8dd8 <hiddf_mouse_move+0x38>)
    8dce:	7198      	strb	r0, [r3, #6]
    8dd0:	e7f1      	b.n	8db6 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    8dd2:	f06f 000c 	mvn.w	r0, #12
    8dd6:	4770      	bx	lr
    8dd8:	20001200 	.word	0x20001200
    8ddc:	0000924d 	.word	0x0000924d

00008de0 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    8de0:	4770      	bx	lr

00008de2 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    8de2:	e7fe      	b.n	8de2 <midi_cb_ep_bulk_out>

00008de4 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8de4:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8de6:	780b      	ldrb	r3, [r1, #0]
    8de8:	2b81      	cmp	r3, #129	; 0x81
    8dea:	d014      	beq.n	8e16 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8dec:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8df0:	2b01      	cmp	r3, #1
    8df2:	d132      	bne.n	8e5a <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    8df4:	888b      	ldrh	r3, [r1, #4]
    8df6:	4a1c      	ldr	r2, [pc, #112]	; (8e68 <audio_midi_req+0x84>)
    8df8:	7912      	ldrb	r2, [r2, #4]
    8dfa:	429a      	cmp	r2, r3
    8dfc:	d003      	beq.n	8e06 <audio_midi_req+0x22>
    8dfe:	4a1a      	ldr	r2, [pc, #104]	; (8e68 <audio_midi_req+0x84>)
    8e00:	7952      	ldrb	r2, [r2, #5]
    8e02:	429a      	cmp	r2, r3
    8e04:	d12c      	bne.n	8e60 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    8e06:	784b      	ldrb	r3, [r1, #1]
    8e08:	2b03      	cmp	r3, #3
    8e0a:	d017      	beq.n	8e3c <audio_midi_req+0x58>
    8e0c:	2b0b      	cmp	r3, #11
    8e0e:	d01b      	beq.n	8e48 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    8e10:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8e14:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8e16:	888b      	ldrh	r3, [r1, #4]
    8e18:	4a13      	ldr	r2, [pc, #76]	; (8e68 <audio_midi_req+0x84>)
    8e1a:	7912      	ldrb	r2, [r2, #4]
    8e1c:	429a      	cmp	r2, r3
    8e1e:	d006      	beq.n	8e2e <audio_midi_req+0x4a>
    8e20:	4a11      	ldr	r2, [pc, #68]	; (8e68 <audio_midi_req+0x84>)
    8e22:	7952      	ldrb	r2, [r2, #5]
    8e24:	429a      	cmp	r2, r3
    8e26:	d002      	beq.n	8e2e <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8e28:	f06f 0009 	mvn.w	r0, #9
    8e2c:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    8e2e:	4b0e      	ldr	r3, [pc, #56]	; (8e68 <audio_midi_req+0x84>)
    8e30:	6819      	ldr	r1, [r3, #0]
    8e32:	2300      	movs	r3, #0
    8e34:	780a      	ldrb	r2, [r1, #0]
    8e36:	4c0d      	ldr	r4, [pc, #52]	; (8e6c <audio_midi_req+0x88>)
    8e38:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    8e3a:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    8e3c:	2300      	movs	r3, #0
    8e3e:	2201      	movs	r2, #1
    8e40:	490b      	ldr	r1, [pc, #44]	; (8e70 <audio_midi_req+0x8c>)
    8e42:	4c0a      	ldr	r4, [pc, #40]	; (8e6c <audio_midi_req+0x88>)
    8e44:	47a0      	blx	r4
    8e46:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    8e48:	884a      	ldrh	r2, [r1, #2]
    8e4a:	4b07      	ldr	r3, [pc, #28]	; (8e68 <audio_midi_req+0x84>)
    8e4c:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    8e4e:	2300      	movs	r3, #0
    8e50:	461a      	mov	r2, r3
    8e52:	4619      	mov	r1, r3
    8e54:	4c05      	ldr	r4, [pc, #20]	; (8e6c <audio_midi_req+0x88>)
    8e56:	47a0      	blx	r4
    8e58:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8e5a:	f06f 0009 	mvn.w	r0, #9
    8e5e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8e60:	f06f 0009 	mvn.w	r0, #9
    8e64:	bd10      	pop	{r4, pc}
    8e66:	bf00      	nop
    8e68:	20001218 	.word	0x20001218
    8e6c:	0000924d 	.word	0x0000924d
    8e70:	20001220 	.word	0x20001220

00008e74 <audio_midi_ctrl>:
{
    8e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8e78:	b083      	sub	sp, #12
    8e7a:	4615      	mov	r5, r2
	switch (ctrl) {
    8e7c:	2901      	cmp	r1, #1
    8e7e:	f000 8092 	beq.w	8fa6 <audio_midi_ctrl+0x132>
    8e82:	b141      	cbz	r1, 8e96 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    8e84:	2902      	cmp	r1, #2
    8e86:	bf0c      	ite	eq
    8e88:	f06f 001a 	mvneq.w	r0, #26
    8e8c:	f06f 000c 	mvnne.w	r0, #12
}
    8e90:	b003      	add	sp, #12
    8e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    8e96:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    8e9a:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    8e9c:	2800      	cmp	r0, #0
    8e9e:	f000 80a9 	beq.w	8ff4 <audio_midi_ctrl+0x180>
    8ea2:	f109 0604 	add.w	r6, r9, #4
    8ea6:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    8ea8:	f04f 0804 	mov.w	r8, #4
    8eac:	4f5d      	ldr	r7, [pc, #372]	; (9024 <audio_midi_ctrl+0x1b0>)
    8eae:	e019      	b.n	8ee4 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    8eb0:	f816 3b01 	ldrb.w	r3, [r6], #1
    8eb4:	429a      	cmp	r2, r3
    8eb6:	f000 80a3 	beq.w	9000 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    8eba:	2bff      	cmp	r3, #255	; 0xff
    8ebc:	f040 80a3 	bne.w	9006 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    8ec0:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    8ec4:	2c01      	cmp	r4, #1
    8ec6:	d016      	beq.n	8ef6 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    8ec8:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    8eca:	7818      	ldrb	r0, [r3, #0]
    8ecc:	4642      	mov	r2, r8
    8ece:	6869      	ldr	r1, [r5, #4]
    8ed0:	4418      	add	r0, r3
    8ed2:	47b8      	blx	r7
    8ed4:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    8ed6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8eda:	f000 809e 	beq.w	901a <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    8ede:	2800      	cmp	r0, #0
    8ee0:	f000 808b 	beq.w	8ffa <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    8ee4:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    8ee6:	7943      	ldrb	r3, [r0, #5]
    8ee8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8eec:	2b01      	cmp	r3, #1
    8eee:	d0df      	beq.n	8eb0 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    8ef0:	f06f 0009 	mvn.w	r0, #9
    8ef4:	e7cc      	b.n	8e90 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    8ef6:	2205      	movs	r2, #5
    8ef8:	6869      	ldr	r1, [r5, #4]
    8efa:	4b4a      	ldr	r3, [pc, #296]	; (9024 <audio_midi_ctrl+0x1b0>)
    8efc:	4798      	blx	r3
    8efe:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    8f00:	4e49      	ldr	r6, [pc, #292]	; (9028 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8f02:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9048 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    8f06:	4f49      	ldr	r7, [pc, #292]	; (902c <audio_midi_ctrl+0x1b8>)
    8f08:	e01a      	b.n	8f40 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    8f0a:	4a47      	ldr	r2, [pc, #284]	; (9028 <audio_midi_ctrl+0x1b4>)
    8f0c:	7953      	ldrb	r3, [r2, #5]
    8f0e:	425b      	negs	r3, r3
    8f10:	b2db      	uxtb	r3, r3
    8f12:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    8f14:	f06f 0013 	mvn.w	r0, #19
    8f18:	e7ba      	b.n	8e90 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    8f1a:	f89d 0002 	ldrb.w	r0, [sp, #2]
    8f1e:	b2c0      	uxtb	r0, r0
    8f20:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    8f24:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    8f26:	4a42      	ldr	r2, [pc, #264]	; (9030 <audio_midi_ctrl+0x1bc>)
    8f28:	2102      	movs	r1, #2
    8f2a:	f899 0006 	ldrb.w	r0, [r9, #6]
    8f2e:	4b41      	ldr	r3, [pc, #260]	; (9034 <audio_midi_ctrl+0x1c0>)
    8f30:	4798      	blx	r3
				desc->sod = ep;
    8f32:	602c      	str	r4, [r5, #0]
    8f34:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8f36:	6869      	ldr	r1, [r5, #4]
    8f38:	4420      	add	r0, r4
    8f3a:	4b3f      	ldr	r3, [pc, #252]	; (9038 <audio_midi_ctrl+0x1c4>)
    8f3c:	4798      	blx	r3
    8f3e:	4604      	mov	r4, r0
			while (NULL != ep) {
    8f40:	2c00      	cmp	r4, #0
    8f42:	d063      	beq.n	900c <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    8f44:	78a3      	ldrb	r3, [r4, #2]
    8f46:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    8f4a:	78e3      	ldrb	r3, [r4, #3]
    8f4c:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    8f50:	7962      	ldrb	r2, [r4, #5]
    8f52:	7923      	ldrb	r3, [r4, #4]
    8f54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    8f58:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    8f5a:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    8f5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8f62:	b2db      	uxtb	r3, r3
    8f64:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    8f66:	2301      	movs	r3, #1
    8f68:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8f6a:	f89d 0002 	ldrb.w	r0, [sp, #2]
    8f6e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    8f72:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f76:	b292      	uxth	r2, r2
    8f78:	47c0      	blx	r8
    8f7a:	b2c0      	uxtb	r0, r0
    8f7c:	7170      	strb	r0, [r6, #5]
    8f7e:	2800      	cmp	r0, #0
    8f80:	d1c3      	bne.n	8f0a <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8f82:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8f86:	f013 0f80 	tst.w	r3, #128	; 0x80
    8f8a:	d1c6      	bne.n	8f1a <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    8f8c:	f89d 0002 	ldrb.w	r0, [sp, #2]
    8f90:	b2c0      	uxtb	r0, r0
    8f92:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    8f96:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    8f98:	4a28      	ldr	r2, [pc, #160]	; (903c <audio_midi_ctrl+0x1c8>)
    8f9a:	2102      	movs	r1, #2
    8f9c:	f899 0007 	ldrb.w	r0, [r9, #7]
    8fa0:	4b24      	ldr	r3, [pc, #144]	; (9034 <audio_midi_ctrl+0x1c0>)
    8fa2:	4798      	blx	r3
    8fa4:	e7c5      	b.n	8f32 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    8fa6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    8fa8:	b142      	cbz	r2, 8fbc <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8faa:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    8fac:	795b      	ldrb	r3, [r3, #5]
    8fae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8fb2:	2b01      	cmp	r3, #1
    8fb4:	d002      	beq.n	8fbc <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    8fb6:	f06f 0009 	mvn.w	r0, #9
    8fba:	e769      	b.n	8e90 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    8fbc:	7923      	ldrb	r3, [r4, #4]
    8fbe:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    8fc0:	bf1c      	itt	ne
    8fc2:	23ff      	movne	r3, #255	; 0xff
    8fc4:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    8fc6:	7963      	ldrb	r3, [r4, #5]
    8fc8:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    8fca:	bf1c      	itt	ne
    8fcc:	23ff      	movne	r3, #255	; 0xff
    8fce:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    8fd0:	79a0      	ldrb	r0, [r4, #6]
    8fd2:	28ff      	cmp	r0, #255	; 0xff
    8fd4:	d003      	beq.n	8fde <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    8fd6:	4b1a      	ldr	r3, [pc, #104]	; (9040 <audio_midi_ctrl+0x1cc>)
    8fd8:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8fda:	23ff      	movs	r3, #255	; 0xff
    8fdc:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    8fde:	79e0      	ldrb	r0, [r4, #7]
    8fe0:	28ff      	cmp	r0, #255	; 0xff
    8fe2:	d003      	beq.n	8fec <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    8fe4:	4b16      	ldr	r3, [pc, #88]	; (9040 <audio_midi_ctrl+0x1cc>)
    8fe6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    8fe8:	23ff      	movs	r3, #255	; 0xff
    8fea:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    8fec:	2000      	movs	r0, #0
    8fee:	4b15      	ldr	r3, [pc, #84]	; (9044 <audio_midi_ctrl+0x1d0>)
    8ff0:	7358      	strb	r0, [r3, #13]
    8ff2:	e74d      	b.n	8e90 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    8ff4:	f06f 0009 	mvn.w	r0, #9
    8ff8:	e74a      	b.n	8e90 <audio_midi_ctrl+0x1c>
    8ffa:	f06f 0009 	mvn.w	r0, #9
    8ffe:	e747      	b.n	8e90 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    9000:	f06f 0011 	mvn.w	r0, #17
    9004:	e744      	b.n	8e90 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    9006:	f06f 001b 	mvn.w	r0, #27
    900a:	e741      	b.n	8e90 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    900c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    900e:	7818      	ldrb	r0, [r3, #0]
    9010:	2204      	movs	r2, #4
    9012:	6869      	ldr	r1, [r5, #4]
    9014:	4418      	add	r0, r3
    9016:	4b03      	ldr	r3, [pc, #12]	; (9024 <audio_midi_ctrl+0x1b0>)
    9018:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    901a:	2201      	movs	r2, #1
    901c:	4b09      	ldr	r3, [pc, #36]	; (9044 <audio_midi_ctrl+0x1d0>)
    901e:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    9020:	2000      	movs	r0, #0
    9022:	e735      	b.n	8e90 <audio_midi_ctrl+0x1c>
    9024:	00009791 	.word	0x00009791
    9028:	20002c14 	.word	0x20002c14
    902c:	000042f9 	.word	0x000042f9
    9030:	00008de1 	.word	0x00008de1
    9034:	000044cd 	.word	0x000044cd
    9038:	000097cb 	.word	0x000097cb
    903c:	00008de3 	.word	0x00008de3
    9040:	000042cd 	.word	0x000042cd
    9044:	20001218 	.word	0x20001218
    9048:	00004265 	.word	0x00004265

0000904c <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    904c:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    904e:	4b0a      	ldr	r3, [pc, #40]	; (9078 <audiodf_midi_init+0x2c>)
    9050:	4798      	blx	r3
    9052:	2801      	cmp	r0, #1
    9054:	d80c      	bhi.n	9070 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    9056:	4809      	ldr	r0, [pc, #36]	; (907c <audiodf_midi_init+0x30>)
    9058:	4b09      	ldr	r3, [pc, #36]	; (9080 <audiodf_midi_init+0x34>)
    905a:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    905c:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    905e:	3010      	adds	r0, #16
    9060:	4b08      	ldr	r3, [pc, #32]	; (9084 <audiodf_midi_init+0x38>)
    9062:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    9064:	4908      	ldr	r1, [pc, #32]	; (9088 <audiodf_midi_init+0x3c>)
    9066:	2001      	movs	r0, #1
    9068:	4b08      	ldr	r3, [pc, #32]	; (908c <audiodf_midi_init+0x40>)
    906a:	4798      	blx	r3
	return ERR_NONE;
    906c:	2000      	movs	r0, #0
    906e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9070:	f06f 0010 	mvn.w	r0, #16
}
    9074:	bd08      	pop	{r3, pc}
    9076:	bf00      	nop
    9078:	0000977d 	.word	0x0000977d
    907c:	20001218 	.word	0x20001218
    9080:	00008e75 	.word	0x00008e75
    9084:	0000971d 	.word	0x0000971d
    9088:	20000370 	.word	0x20000370
    908c:	00009689 	.word	0x00009689

00009090 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    9090:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    9092:	4c06      	ldr	r4, [pc, #24]	; (90ac <audiodf_midi_xfer_packet+0x1c>)
    9094:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    9096:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    9098:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    909a:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    909c:	2300      	movs	r3, #0
    909e:	2204      	movs	r2, #4
    90a0:	f104 0109 	add.w	r1, r4, #9
    90a4:	79a0      	ldrb	r0, [r4, #6]
    90a6:	4c02      	ldr	r4, [pc, #8]	; (90b0 <audiodf_midi_xfer_packet+0x20>)
    90a8:	47a0      	blx	r4
	
	
}
    90aa:	bd10      	pop	{r4, pc}
    90ac:	20001218 	.word	0x20001218
    90b0:	0000924d 	.word	0x0000924d

000090b4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    90b4:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    90b6:	4b07      	ldr	r3, [pc, #28]	; (90d4 <usbdc_unconfig+0x20>)
    90b8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    90ba:	b14c      	cbz	r4, 90d0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    90bc:	2600      	movs	r6, #0
    90be:	2501      	movs	r5, #1
    90c0:	6863      	ldr	r3, [r4, #4]
    90c2:	4632      	mov	r2, r6
    90c4:	4629      	mov	r1, r5
    90c6:	4620      	mov	r0, r4
    90c8:	4798      	blx	r3
		func = func->next;
    90ca:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    90cc:	2c00      	cmp	r4, #0
    90ce:	d1f7      	bne.n	90c0 <usbdc_unconfig+0xc>
    90d0:	bd70      	pop	{r4, r5, r6, pc}
    90d2:	bf00      	nop
    90d4:	20001234 	.word	0x20001234

000090d8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    90d8:	b570      	push	{r4, r5, r6, lr}
    90da:	4606      	mov	r6, r0
    90dc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    90de:	4b07      	ldr	r3, [pc, #28]	; (90fc <usbdc_change_notify+0x24>)
    90e0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    90e2:	b91c      	cbnz	r4, 90ec <usbdc_change_notify+0x14>
    90e4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    90e6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    90e8:	2c00      	cmp	r4, #0
    90ea:	d0fb      	beq.n	90e4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    90ec:	6863      	ldr	r3, [r4, #4]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d0f9      	beq.n	90e6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    90f2:	4629      	mov	r1, r5
    90f4:	4630      	mov	r0, r6
    90f6:	4798      	blx	r3
    90f8:	e7f5      	b.n	90e6 <usbdc_change_notify+0xe>
    90fa:	bf00      	nop
    90fc:	20001234 	.word	0x20001234

00009100 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9102:	4607      	mov	r7, r0
    9104:	460e      	mov	r6, r1
    9106:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    9108:	4b0c      	ldr	r3, [pc, #48]	; (913c <usbdc_request_handler+0x3c>)
    910a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    910c:	b91c      	cbnz	r4, 9116 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    910e:	2000      	movs	r0, #0
    9110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    9112:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    9114:	b16c      	cbz	r4, 9132 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    9116:	6863      	ldr	r3, [r4, #4]
    9118:	2b00      	cmp	r3, #0
    911a:	d0fa      	beq.n	9112 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    911c:	462a      	mov	r2, r5
    911e:	4631      	mov	r1, r6
    9120:	4638      	mov	r0, r7
    9122:	4798      	blx	r3
			if (0 == rc) {
    9124:	b138      	cbz	r0, 9136 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    9126:	f110 0f0a 	cmn.w	r0, #10
    912a:	d0f2      	beq.n	9112 <usbdc_request_handler+0x12>
				return -1;
    912c:	f04f 30ff 	mov.w	r0, #4294967295
}
    9130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    9132:	2000      	movs	r0, #0
    9134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    9136:	2001      	movs	r0, #1
    9138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    913a:	bf00      	nop
    913c:	20001234 	.word	0x20001234

00009140 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    9140:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    9142:	4b06      	ldr	r3, [pc, #24]	; (915c <usbd_sof_cb+0x1c>)
    9144:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    9146:	b91c      	cbnz	r4, 9150 <usbd_sof_cb+0x10>
    9148:	bd10      	pop	{r4, pc}
		sof = sof->next;
    914a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    914c:	2c00      	cmp	r4, #0
    914e:	d0fb      	beq.n	9148 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    9150:	6863      	ldr	r3, [r4, #4]
    9152:	2b00      	cmp	r3, #0
    9154:	d0f9      	beq.n	914a <usbd_sof_cb+0xa>
			sof->cb();
    9156:	4798      	blx	r3
    9158:	e7f7      	b.n	914a <usbd_sof_cb+0xa>
    915a:	bf00      	nop
    915c:	20001234 	.word	0x20001234

00009160 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    9160:	b510      	push	{r4, lr}
    9162:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    9164:	b119      	cbz	r1, 916e <usbdc_cb_ctl_done+0xe>
    9166:	2901      	cmp	r1, #1
    9168:	d026      	beq.n	91b8 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    916a:	2000      	movs	r0, #0
    916c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    916e:	7813      	ldrb	r3, [r2, #0]
    9170:	2b00      	cmp	r3, #0
    9172:	d1fa      	bne.n	916a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    9174:	7853      	ldrb	r3, [r2, #1]
    9176:	2b05      	cmp	r3, #5
    9178:	d00f      	beq.n	919a <usbdc_cb_ctl_done+0x3a>
    917a:	2b09      	cmp	r3, #9
    917c:	d1f5      	bne.n	916a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    917e:	8852      	ldrh	r2, [r2, #2]
    9180:	4b10      	ldr	r3, [pc, #64]	; (91c4 <usbdc_cb_ctl_done+0x64>)
    9182:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    9184:	8863      	ldrh	r3, [r4, #2]
    9186:	2b00      	cmp	r3, #0
    9188:	bf14      	ite	ne
    918a:	2104      	movne	r1, #4
    918c:	2103      	moveq	r1, #3
    918e:	4b0d      	ldr	r3, [pc, #52]	; (91c4 <usbdc_cb_ctl_done+0x64>)
    9190:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    9192:	2001      	movs	r0, #1
    9194:	4b0c      	ldr	r3, [pc, #48]	; (91c8 <usbdc_cb_ctl_done+0x68>)
    9196:	4798      	blx	r3
    9198:	e7e7      	b.n	916a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    919a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    919c:	b2c0      	uxtb	r0, r0
    919e:	4b0b      	ldr	r3, [pc, #44]	; (91cc <usbdc_cb_ctl_done+0x6c>)
    91a0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    91a2:	8863      	ldrh	r3, [r4, #2]
    91a4:	2b00      	cmp	r3, #0
    91a6:	bf14      	ite	ne
    91a8:	2103      	movne	r1, #3
    91aa:	2102      	moveq	r1, #2
    91ac:	4b05      	ldr	r3, [pc, #20]	; (91c4 <usbdc_cb_ctl_done+0x64>)
    91ae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    91b0:	2001      	movs	r0, #1
    91b2:	4b05      	ldr	r3, [pc, #20]	; (91c8 <usbdc_cb_ctl_done+0x68>)
    91b4:	4798      	blx	r3
    91b6:	e7d8      	b.n	916a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    91b8:	2201      	movs	r2, #1
    91ba:	4621      	mov	r1, r4
    91bc:	2000      	movs	r0, #0
    91be:	4b04      	ldr	r3, [pc, #16]	; (91d0 <usbdc_cb_ctl_done+0x70>)
    91c0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    91c2:	e7d2      	b.n	916a <usbdc_cb_ctl_done+0xa>
    91c4:	20001234 	.word	0x20001234
    91c8:	000090d9 	.word	0x000090d9
    91cc:	00004259 	.word	0x00004259
    91d0:	00009101 	.word	0x00009101

000091d4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    91d4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    91d6:	4b0d      	ldr	r3, [pc, #52]	; (920c <usbdc_reset+0x38>)
    91d8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    91da:	4d0d      	ldr	r5, [pc, #52]	; (9210 <usbdc_reset+0x3c>)
    91dc:	2602      	movs	r6, #2
    91de:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    91e0:	2400      	movs	r4, #0
    91e2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    91e4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    91e6:	4620      	mov	r0, r4
    91e8:	4b0a      	ldr	r3, [pc, #40]	; (9214 <usbdc_reset+0x40>)
    91ea:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    91ec:	7f28      	ldrb	r0, [r5, #28]
    91ee:	4b0a      	ldr	r3, [pc, #40]	; (9218 <usbdc_reset+0x44>)
    91f0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    91f2:	4a0a      	ldr	r2, [pc, #40]	; (921c <usbdc_reset+0x48>)
    91f4:	4621      	mov	r1, r4
    91f6:	4620      	mov	r0, r4
    91f8:	4d09      	ldr	r5, [pc, #36]	; (9220 <usbdc_reset+0x4c>)
    91fa:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    91fc:	4a09      	ldr	r2, [pc, #36]	; (9224 <usbdc_reset+0x50>)
    91fe:	4631      	mov	r1, r6
    9200:	4620      	mov	r0, r4
    9202:	47a8      	blx	r5
	usb_d_ep_enable(0);
    9204:	4620      	mov	r0, r4
    9206:	4b08      	ldr	r3, [pc, #32]	; (9228 <usbdc_reset+0x54>)
    9208:	4798      	blx	r3
    920a:	bd70      	pop	{r4, r5, r6, pc}
    920c:	000090b5 	.word	0x000090b5
    9210:	20001234 	.word	0x20001234
    9214:	000042cd 	.word	0x000042cd
    9218:	000042b9 	.word	0x000042b9
    921c:	0000926d 	.word	0x0000926d
    9220:	000044cd 	.word	0x000044cd
    9224:	00009161 	.word	0x00009161
    9228:	000042f9 	.word	0x000042f9

0000922c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    922c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    922e:	b110      	cbz	r0, 9236 <usbd_event_cb+0xa>
    9230:	2801      	cmp	r0, #1
    9232:	d004      	beq.n	923e <usbd_event_cb+0x12>
    9234:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    9236:	2000      	movs	r0, #0
    9238:	4b02      	ldr	r3, [pc, #8]	; (9244 <usbd_event_cb+0x18>)
    923a:	4798      	blx	r3
		break;
    923c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    923e:	4b02      	ldr	r3, [pc, #8]	; (9248 <usbd_event_cb+0x1c>)
    9240:	4798      	blx	r3
    9242:	bd08      	pop	{r3, pc}
    9244:	000090d9 	.word	0x000090d9
    9248:	000091d5 	.word	0x000091d5

0000924c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    924c:	b500      	push	{lr}
    924e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    9250:	9101      	str	r1, [sp, #4]
    9252:	9202      	str	r2, [sp, #8]
    9254:	f88d 000c 	strb.w	r0, [sp, #12]
    9258:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    925c:	a801      	add	r0, sp, #4
    925e:	4b02      	ldr	r3, [pc, #8]	; (9268 <usbdc_xfer+0x1c>)
    9260:	4798      	blx	r3
}
    9262:	b005      	add	sp, #20
    9264:	f85d fb04 	ldr.w	pc, [sp], #4
    9268:	00004345 	.word	0x00004345

0000926c <usbdc_cb_ctl_req>:
{
    926c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9270:	b083      	sub	sp, #12
    9272:	4605      	mov	r5, r0
    9274:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    9276:	2200      	movs	r2, #0
    9278:	4b9b      	ldr	r3, [pc, #620]	; (94e8 <usbdc_cb_ctl_req+0x27c>)
    927a:	4798      	blx	r3
    927c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9280:	d00b      	beq.n	929a <usbdc_cb_ctl_req+0x2e>
    9282:	2801      	cmp	r0, #1
    9284:	f000 81e3 	beq.w	964e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    9288:	7823      	ldrb	r3, [r4, #0]
    928a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    928e:	d008      	beq.n	92a2 <usbdc_cb_ctl_req+0x36>
    9290:	2a80      	cmp	r2, #128	; 0x80
    9292:	f000 80f4 	beq.w	947e <usbdc_cb_ctl_req+0x212>
		return false;
    9296:	2000      	movs	r0, #0
    9298:	e000      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    929a:	2000      	movs	r0, #0
}
    929c:	b003      	add	sp, #12
    929e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    92a2:	7862      	ldrb	r2, [r4, #1]
    92a4:	3a01      	subs	r2, #1
    92a6:	2a0a      	cmp	r2, #10
    92a8:	f200 81d3 	bhi.w	9652 <usbdc_cb_ctl_req+0x3e6>
    92ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    92b0:	01d10060 	.word	0x01d10060
    92b4:	01d10076 	.word	0x01d10076
    92b8:	01d1000b 	.word	0x01d1000b
    92bc:	01d101d1 	.word	0x01d101d1
    92c0:	01d10015 	.word	0x01d10015
    92c4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    92c6:	2301      	movs	r3, #1
    92c8:	2200      	movs	r2, #0
    92ca:	4611      	mov	r1, r2
    92cc:	4628      	mov	r0, r5
    92ce:	4c87      	ldr	r4, [pc, #540]	; (94ec <usbdc_cb_ctl_req+0x280>)
    92d0:	47a0      	blx	r4
    92d2:	fab0 f080 	clz	r0, r0
    92d6:	0940      	lsrs	r0, r0, #5
    92d8:	e7e0      	b.n	929c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    92da:	8862      	ldrh	r2, [r4, #2]
    92dc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    92de:	b1ca      	cbz	r2, 9314 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    92e0:	4b83      	ldr	r3, [pc, #524]	; (94f0 <usbdc_cb_ctl_req+0x284>)
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	6859      	ldr	r1, [r3, #4]
    92e6:	6818      	ldr	r0, [r3, #0]
    92e8:	4b82      	ldr	r3, [pc, #520]	; (94f4 <usbdc_cb_ctl_req+0x288>)
    92ea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    92ec:	2800      	cmp	r0, #0
    92ee:	f000 81be 	beq.w	966e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    92f2:	78c2      	ldrb	r2, [r0, #3]
    92f4:	7881      	ldrb	r1, [r0, #2]
    92f6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    92fa:	fa10 f181 	uxtah	r1, r0, r1
    92fe:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    9300:	2204      	movs	r2, #4
    9302:	4b7d      	ldr	r3, [pc, #500]	; (94f8 <usbdc_cb_ctl_req+0x28c>)
    9304:	4798      	blx	r3
    9306:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    9308:	b130      	cbz	r0, 9318 <usbdc_cb_ctl_req+0xac>
    930a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    930c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 94f0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    9310:	4f79      	ldr	r7, [pc, #484]	; (94f8 <usbdc_cb_ctl_req+0x28c>)
    9312:	e018      	b.n	9346 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    9314:	4b79      	ldr	r3, [pc, #484]	; (94fc <usbdc_cb_ctl_req+0x290>)
    9316:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    9318:	2301      	movs	r3, #1
    931a:	2200      	movs	r2, #0
    931c:	4611      	mov	r1, r2
    931e:	4628      	mov	r0, r5
    9320:	4c72      	ldr	r4, [pc, #456]	; (94ec <usbdc_cb_ctl_req+0x280>)
    9322:	47a0      	blx	r4
    9324:	fab0 f080 	clz	r0, r0
    9328:	0940      	lsrs	r0, r0, #5
    932a:	e7b7      	b.n	929c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    932c:	464c      	mov	r4, r9
    932e:	e000      	b.n	9332 <usbdc_cb_ctl_req+0xc6>
    9330:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    9332:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    9334:	7803      	ldrb	r3, [r0, #0]
    9336:	4418      	add	r0, r3
    9338:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    933a:	2204      	movs	r2, #4
    933c:	9901      	ldr	r1, [sp, #4]
    933e:	47b8      	blx	r7
    9340:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    9342:	2800      	cmp	r0, #0
    9344:	d0e8      	beq.n	9318 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    9346:	f890 9002 	ldrb.w	r9, [r0, #2]
    934a:	45a1      	cmp	r9, r4
    934c:	d0f1      	beq.n	9332 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    934e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    9352:	2c00      	cmp	r4, #0
    9354:	d0ea      	beq.n	932c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    9356:	2600      	movs	r6, #0
    9358:	6863      	ldr	r3, [r4, #4]
    935a:	466a      	mov	r2, sp
    935c:	4631      	mov	r1, r6
    935e:	4620      	mov	r0, r4
    9360:	4798      	blx	r3
    9362:	2800      	cmp	r0, #0
    9364:	d0e4      	beq.n	9330 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    9366:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    9368:	2c00      	cmp	r4, #0
    936a:	d1f5      	bne.n	9358 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    936c:	464c      	mov	r4, r9
    936e:	e7e0      	b.n	9332 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    9370:	f003 031f 	and.w	r3, r3, #31
    9374:	2b02      	cmp	r3, #2
    9376:	f040 816e 	bne.w	9656 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    937a:	88e3      	ldrh	r3, [r4, #6]
    937c:	b10b      	cbz	r3, 9382 <usbdc_cb_ctl_req+0x116>
			return false;
    937e:	2000      	movs	r0, #0
    9380:	e78c      	b.n	929c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    9382:	88a0      	ldrh	r0, [r4, #4]
    9384:	2100      	movs	r1, #0
    9386:	b2c0      	uxtb	r0, r0
    9388:	4b5d      	ldr	r3, [pc, #372]	; (9500 <usbdc_cb_ctl_req+0x294>)
    938a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    938c:	2301      	movs	r3, #1
    938e:	2200      	movs	r2, #0
    9390:	4611      	mov	r1, r2
    9392:	4628      	mov	r0, r5
    9394:	4c55      	ldr	r4, [pc, #340]	; (94ec <usbdc_cb_ctl_req+0x280>)
    9396:	47a0      	blx	r4
		return true;
    9398:	2001      	movs	r0, #1
    939a:	e77f      	b.n	929c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    939c:	f003 031f 	and.w	r3, r3, #31
    93a0:	2b02      	cmp	r3, #2
    93a2:	f040 815a 	bne.w	965a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    93a6:	88e3      	ldrh	r3, [r4, #6]
    93a8:	b10b      	cbz	r3, 93ae <usbdc_cb_ctl_req+0x142>
			return false;
    93aa:	2000      	movs	r0, #0
    93ac:	e776      	b.n	929c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    93ae:	88a0      	ldrh	r0, [r4, #4]
    93b0:	2101      	movs	r1, #1
    93b2:	b2c0      	uxtb	r0, r0
    93b4:	4b52      	ldr	r3, [pc, #328]	; (9500 <usbdc_cb_ctl_req+0x294>)
    93b6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    93b8:	2301      	movs	r3, #1
    93ba:	2200      	movs	r2, #0
    93bc:	4611      	mov	r1, r2
    93be:	4628      	mov	r0, r5
    93c0:	4c4a      	ldr	r4, [pc, #296]	; (94ec <usbdc_cb_ctl_req+0x280>)
    93c2:	47a0      	blx	r4
		return true;
    93c4:	2001      	movs	r0, #1
    93c6:	e769      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    93c8:	8866      	ldrh	r6, [r4, #2]
    93ca:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    93cc:	4a48      	ldr	r2, [pc, #288]	; (94f0 <usbdc_cb_ctl_req+0x284>)
    93ce:	6813      	ldr	r3, [r2, #0]
    93d0:	7ed2      	ldrb	r2, [r2, #27]
    93d2:	6859      	ldr	r1, [r3, #4]
    93d4:	6818      	ldr	r0, [r3, #0]
    93d6:	4b47      	ldr	r3, [pc, #284]	; (94f4 <usbdc_cb_ctl_req+0x288>)
    93d8:	4798      	blx	r3
	if (NULL == ifc) {
    93da:	2800      	cmp	r0, #0
    93dc:	d045      	beq.n	946a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    93de:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    93e0:	78c2      	ldrb	r2, [r0, #3]
    93e2:	7881      	ldrb	r1, [r0, #2]
    93e4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    93e8:	fa10 f181 	uxtah	r1, r0, r1
    93ec:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    93ee:	2204      	movs	r2, #4
    93f0:	4b41      	ldr	r3, [pc, #260]	; (94f8 <usbdc_cb_ctl_req+0x28c>)
    93f2:	4798      	blx	r3
    93f4:	4603      	mov	r3, r0
    93f6:	2800      	cmp	r0, #0
    93f8:	d039      	beq.n	946e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    93fa:	2704      	movs	r7, #4
    93fc:	4d3e      	ldr	r5, [pc, #248]	; (94f8 <usbdc_cb_ctl_req+0x28c>)
    93fe:	e008      	b.n	9412 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    9400:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    9402:	7803      	ldrb	r3, [r0, #0]
    9404:	4418      	add	r0, r3
    9406:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    9408:	463a      	mov	r2, r7
    940a:	9901      	ldr	r1, [sp, #4]
    940c:	47a8      	blx	r5
		if (NULL == ifc) {
    940e:	4603      	mov	r3, r0
    9410:	b378      	cbz	r0, 9472 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    9412:	789a      	ldrb	r2, [r3, #2]
    9414:	42a2      	cmp	r2, r4
    9416:	d1f3      	bne.n	9400 <usbdc_cb_ctl_req+0x194>
    9418:	78da      	ldrb	r2, [r3, #3]
    941a:	42b2      	cmp	r2, r6
    941c:	d1f0      	bne.n	9400 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    941e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    9420:	4b33      	ldr	r3, [pc, #204]	; (94f0 <usbdc_cb_ctl_req+0x284>)
    9422:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    9424:	b33d      	cbz	r5, 9476 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    9426:	2701      	movs	r7, #1
    9428:	686b      	ldr	r3, [r5, #4]
    942a:	466a      	mov	r2, sp
    942c:	4639      	mov	r1, r7
    942e:	4628      	mov	r0, r5
    9430:	4798      	blx	r3
    9432:	b120      	cbz	r0, 943e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    9434:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    9436:	2d00      	cmp	r5, #0
    9438:	d1f6      	bne.n	9428 <usbdc_cb_ctl_req+0x1bc>
	return false;
    943a:	2000      	movs	r0, #0
    943c:	e72e      	b.n	929c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    943e:	686b      	ldr	r3, [r5, #4]
    9440:	466a      	mov	r2, sp
    9442:	2100      	movs	r1, #0
    9444:	4628      	mov	r0, r5
    9446:	4798      	blx	r3
    9448:	b9b8      	cbnz	r0, 947a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    944a:	b136      	cbz	r6, 945a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    944c:	4a28      	ldr	r2, [pc, #160]	; (94f0 <usbdc_cb_ctl_req+0x284>)
    944e:	2301      	movs	r3, #1
    9450:	fa03 f404 	lsl.w	r4, r3, r4
    9454:	7f53      	ldrb	r3, [r2, #29]
    9456:	4323      	orrs	r3, r4
    9458:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    945a:	2300      	movs	r3, #0
    945c:	461a      	mov	r2, r3
    945e:	4619      	mov	r1, r3
    9460:	4618      	mov	r0, r3
    9462:	4c22      	ldr	r4, [pc, #136]	; (94ec <usbdc_cb_ctl_req+0x280>)
    9464:	47a0      	blx	r4
			return true;
    9466:	2001      	movs	r0, #1
    9468:	e718      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    946a:	2000      	movs	r0, #0
    946c:	e716      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    946e:	2000      	movs	r0, #0
    9470:	e714      	b.n	929c <usbdc_cb_ctl_req+0x30>
			return false;
    9472:	2000      	movs	r0, #0
    9474:	e712      	b.n	929c <usbdc_cb_ctl_req+0x30>
	return false;
    9476:	2000      	movs	r0, #0
    9478:	e710      	b.n	929c <usbdc_cb_ctl_req+0x30>
			return false;
    947a:	2000      	movs	r0, #0
    947c:	e70e      	b.n	929c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    947e:	7862      	ldrb	r2, [r4, #1]
    9480:	2a0a      	cmp	r2, #10
    9482:	f200 80ec 	bhi.w	965e <usbdc_cb_ctl_req+0x3f2>
    9486:	e8df f012 	tbh	[pc, r2, lsl #1]
    948a:	008e      	.short	0x008e
    948c:	00ea00ea 	.word	0x00ea00ea
    9490:	00ea00ea 	.word	0x00ea00ea
    9494:	000b00ea 	.word	0x000b00ea
    9498:	008200ea 	.word	0x008200ea
    949c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    94a0:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    94a2:	0a13      	lsrs	r3, r2, #8
    94a4:	2b02      	cmp	r3, #2
    94a6:	d02d      	beq.n	9504 <usbdc_cb_ctl_req+0x298>
    94a8:	2b03      	cmp	r3, #3
    94aa:	d050      	beq.n	954e <usbdc_cb_ctl_req+0x2e2>
    94ac:	2b01      	cmp	r3, #1
    94ae:	d001      	beq.n	94b4 <usbdc_cb_ctl_req+0x248>
	return false;
    94b0:	2000      	movs	r0, #0
    94b2:	e6f3      	b.n	929c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    94b4:	88e2      	ldrh	r2, [r4, #6]
    94b6:	2a12      	cmp	r2, #18
    94b8:	bf28      	it	cs
    94ba:	2212      	movcs	r2, #18
    94bc:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    94be:	4b0c      	ldr	r3, [pc, #48]	; (94f0 <usbdc_cb_ctl_req+0x284>)
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	2201      	movs	r2, #1
    94c4:	6859      	ldr	r1, [r3, #4]
    94c6:	6818      	ldr	r0, [r3, #0]
    94c8:	4b0b      	ldr	r3, [pc, #44]	; (94f8 <usbdc_cb_ctl_req+0x28c>)
    94ca:	4798      	blx	r3
	if (!dev_desc) {
    94cc:	4601      	mov	r1, r0
    94ce:	2800      	cmp	r0, #0
    94d0:	f000 80c7 	beq.w	9662 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    94d4:	2300      	movs	r3, #0
    94d6:	4622      	mov	r2, r4
    94d8:	4628      	mov	r0, r5
    94da:	4c04      	ldr	r4, [pc, #16]	; (94ec <usbdc_cb_ctl_req+0x280>)
    94dc:	47a0      	blx	r4
    94de:	fab0 f080 	clz	r0, r0
    94e2:	0940      	lsrs	r0, r0, #5
    94e4:	e6da      	b.n	929c <usbdc_cb_ctl_req+0x30>
    94e6:	bf00      	nop
    94e8:	00009101 	.word	0x00009101
    94ec:	0000924d 	.word	0x0000924d
    94f0:	20001234 	.word	0x20001234
    94f4:	00009811 	.word	0x00009811
    94f8:	00009791 	.word	0x00009791
    94fc:	000090b5 	.word	0x000090b5
    9500:	00004465 	.word	0x00004465
	uint16_t length   = req->wLength;
    9504:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    9506:	4b5b      	ldr	r3, [pc, #364]	; (9674 <usbdc_cb_ctl_req+0x408>)
    9508:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    950a:	681b      	ldr	r3, [r3, #0]
    950c:	3201      	adds	r2, #1
    950e:	b2d2      	uxtb	r2, r2
    9510:	6859      	ldr	r1, [r3, #4]
    9512:	6818      	ldr	r0, [r3, #0]
    9514:	4b58      	ldr	r3, [pc, #352]	; (9678 <usbdc_cb_ctl_req+0x40c>)
    9516:	4798      	blx	r3
	if (NULL == cfg_desc) {
    9518:	4601      	mov	r1, r0
    951a:	2800      	cmp	r0, #0
    951c:	f000 80a3 	beq.w	9666 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    9520:	78c3      	ldrb	r3, [r0, #3]
    9522:	7882      	ldrb	r2, [r0, #2]
    9524:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    9528:	b292      	uxth	r2, r2
	if (length <= total_len) {
    952a:	4294      	cmp	r4, r2
    952c:	d90d      	bls.n	954a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    952e:	3e01      	subs	r6, #1
    9530:	4226      	tst	r6, r4
    9532:	bf0c      	ite	eq
    9534:	2301      	moveq	r3, #1
    9536:	2300      	movne	r3, #0
		length = total_len;
    9538:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    953a:	4622      	mov	r2, r4
    953c:	4628      	mov	r0, r5
    953e:	4c4f      	ldr	r4, [pc, #316]	; (967c <usbdc_cb_ctl_req+0x410>)
    9540:	47a0      	blx	r4
    9542:	fab0 f080 	clz	r0, r0
    9546:	0940      	lsrs	r0, r0, #5
    9548:	e6a8      	b.n	929c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    954a:	2300      	movs	r3, #0
    954c:	e7f5      	b.n	953a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    954e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    9550:	4b48      	ldr	r3, [pc, #288]	; (9674 <usbdc_cb_ctl_req+0x408>)
    9552:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    9554:	681b      	ldr	r3, [r3, #0]
    9556:	b2d2      	uxtb	r2, r2
    9558:	6859      	ldr	r1, [r3, #4]
    955a:	6818      	ldr	r0, [r3, #0]
    955c:	4b48      	ldr	r3, [pc, #288]	; (9680 <usbdc_cb_ctl_req+0x414>)
    955e:	4798      	blx	r3
	if (NULL == str_desc) {
    9560:	4601      	mov	r1, r0
    9562:	2800      	cmp	r0, #0
    9564:	f000 8081 	beq.w	966a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    9568:	7802      	ldrb	r2, [r0, #0]
    956a:	4294      	cmp	r4, r2
    956c:	d90d      	bls.n	958a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    956e:	3e01      	subs	r6, #1
    9570:	4226      	tst	r6, r4
    9572:	bf0c      	ite	eq
    9574:	2301      	moveq	r3, #1
    9576:	2300      	movne	r3, #0
		length = str_desc[0];
    9578:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    957a:	4622      	mov	r2, r4
    957c:	4628      	mov	r0, r5
    957e:	4c3f      	ldr	r4, [pc, #252]	; (967c <usbdc_cb_ctl_req+0x410>)
    9580:	47a0      	blx	r4
    9582:	fab0 f080 	clz	r0, r0
    9586:	0940      	lsrs	r0, r0, #5
    9588:	e688      	b.n	929c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    958a:	2300      	movs	r3, #0
    958c:	e7f5      	b.n	957a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    958e:	4939      	ldr	r1, [pc, #228]	; (9674 <usbdc_cb_ctl_req+0x408>)
    9590:	694b      	ldr	r3, [r1, #20]
    9592:	7eca      	ldrb	r2, [r1, #27]
    9594:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    9596:	2300      	movs	r3, #0
    9598:	2201      	movs	r2, #1
    959a:	6949      	ldr	r1, [r1, #20]
    959c:	4628      	mov	r0, r5
    959e:	4c37      	ldr	r4, [pc, #220]	; (967c <usbdc_cb_ctl_req+0x410>)
    95a0:	47a0      	blx	r4
		return true;
    95a2:	2001      	movs	r0, #1
    95a4:	e67a      	b.n	929c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    95a6:	f003 031f 	and.w	r3, r3, #31
    95aa:	2b01      	cmp	r3, #1
    95ac:	d903      	bls.n	95b6 <usbdc_cb_ctl_req+0x34a>
    95ae:	2b02      	cmp	r3, #2
    95b0:	d010      	beq.n	95d4 <usbdc_cb_ctl_req+0x368>
		return false;
    95b2:	2000      	movs	r0, #0
    95b4:	e672      	b.n	929c <usbdc_cb_ctl_req+0x30>
		st = 0;
    95b6:	2300      	movs	r3, #0
    95b8:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    95ba:	492e      	ldr	r1, [pc, #184]	; (9674 <usbdc_cb_ctl_req+0x408>)
    95bc:	694b      	ldr	r3, [r1, #20]
    95be:	f8bd 2000 	ldrh.w	r2, [sp]
    95c2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    95c4:	2300      	movs	r3, #0
    95c6:	2202      	movs	r2, #2
    95c8:	6949      	ldr	r1, [r1, #20]
    95ca:	4628      	mov	r0, r5
    95cc:	4c2b      	ldr	r4, [pc, #172]	; (967c <usbdc_cb_ctl_req+0x410>)
    95ce:	47a0      	blx	r4
	return true;
    95d0:	2001      	movs	r0, #1
    95d2:	e663      	b.n	929c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    95d4:	88a0      	ldrh	r0, [r4, #4]
    95d6:	2102      	movs	r1, #2
    95d8:	b2c0      	uxtb	r0, r0
    95da:	4b2a      	ldr	r3, [pc, #168]	; (9684 <usbdc_cb_ctl_req+0x418>)
    95dc:	4798      	blx	r3
		if (st < 0) {
    95de:	2800      	cmp	r0, #0
    95e0:	db03      	blt.n	95ea <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    95e2:	f000 0001 	and.w	r0, r0, #1
    95e6:	9000      	str	r0, [sp, #0]
    95e8:	e7e7      	b.n	95ba <usbdc_cb_ctl_req+0x34e>
			return false;
    95ea:	2000      	movs	r0, #0
    95ec:	e656      	b.n	929c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    95ee:	4b21      	ldr	r3, [pc, #132]	; (9674 <usbdc_cb_ctl_req+0x408>)
    95f0:	7f5b      	ldrb	r3, [r3, #29]
    95f2:	88a2      	ldrh	r2, [r4, #4]
    95f4:	4113      	asrs	r3, r2
    95f6:	f013 0f01 	tst.w	r3, #1
    95fa:	d012      	beq.n	9622 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    95fc:	4b1d      	ldr	r3, [pc, #116]	; (9674 <usbdc_cb_ctl_req+0x408>)
    95fe:	691d      	ldr	r5, [r3, #16]
	return false;
    9600:	2000      	movs	r0, #0
	while (NULL != func) {
    9602:	2d00      	cmp	r5, #0
    9604:	f43f ae4a 	beq.w	929c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    9608:	2602      	movs	r6, #2
    960a:	686b      	ldr	r3, [r5, #4]
    960c:	4622      	mov	r2, r4
    960e:	4631      	mov	r1, r6
    9610:	4628      	mov	r0, r5
    9612:	4798      	blx	r3
    9614:	2800      	cmp	r0, #0
    9616:	da0f      	bge.n	9638 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    9618:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    961a:	2d00      	cmp	r5, #0
    961c:	d1f5      	bne.n	960a <usbdc_cb_ctl_req+0x39e>
	return false;
    961e:	2000      	movs	r0, #0
    9620:	e63c      	b.n	929c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    9622:	4914      	ldr	r1, [pc, #80]	; (9674 <usbdc_cb_ctl_req+0x408>)
    9624:	694b      	ldr	r3, [r1, #20]
    9626:	2000      	movs	r0, #0
    9628:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    962a:	4603      	mov	r3, r0
    962c:	2201      	movs	r2, #1
    962e:	6949      	ldr	r1, [r1, #20]
    9630:	4c12      	ldr	r4, [pc, #72]	; (967c <usbdc_cb_ctl_req+0x410>)
    9632:	47a0      	blx	r4
		return true;
    9634:	2001      	movs	r0, #1
    9636:	e631      	b.n	929c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    9638:	490e      	ldr	r1, [pc, #56]	; (9674 <usbdc_cb_ctl_req+0x408>)
    963a:	694b      	ldr	r3, [r1, #20]
    963c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    963e:	2300      	movs	r3, #0
    9640:	2201      	movs	r2, #1
    9642:	6949      	ldr	r1, [r1, #20]
    9644:	4618      	mov	r0, r3
    9646:	4c0d      	ldr	r4, [pc, #52]	; (967c <usbdc_cb_ctl_req+0x410>)
    9648:	47a0      	blx	r4
			return true;
    964a:	2001      	movs	r0, #1
    964c:	e626      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return true;
    964e:	2001      	movs	r0, #1
    9650:	e624      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    9652:	2000      	movs	r0, #0
    9654:	e622      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    9656:	2000      	movs	r0, #0
    9658:	e620      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    965a:	2000      	movs	r0, #0
    965c:	e61e      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    965e:	2000      	movs	r0, #0
    9660:	e61c      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    9662:	2000      	movs	r0, #0
    9664:	e61a      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    9666:	2000      	movs	r0, #0
    9668:	e618      	b.n	929c <usbdc_cb_ctl_req+0x30>
		return false;
    966a:	2000      	movs	r0, #0
    966c:	e616      	b.n	929c <usbdc_cb_ctl_req+0x30>
			return false;
    966e:	2000      	movs	r0, #0
    9670:	e614      	b.n	929c <usbdc_cb_ctl_req+0x30>
    9672:	bf00      	nop
    9674:	20001234 	.word	0x20001234
    9678:	00009811 	.word	0x00009811
    967c:	0000924d 	.word	0x0000924d
    9680:	00009879 	.word	0x00009879
    9684:	00004465 	.word	0x00004465

00009688 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    9688:	b508      	push	{r3, lr}
	switch (type) {
    968a:	2801      	cmp	r0, #1
    968c:	d007      	beq.n	969e <usbdc_register_handler+0x16>
    968e:	b110      	cbz	r0, 9696 <usbdc_register_handler+0xe>
    9690:	2802      	cmp	r0, #2
    9692:	d008      	beq.n	96a6 <usbdc_register_handler+0x1e>
    9694:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    9696:	4806      	ldr	r0, [pc, #24]	; (96b0 <usbdc_register_handler+0x28>)
    9698:	4b06      	ldr	r3, [pc, #24]	; (96b4 <usbdc_register_handler+0x2c>)
    969a:	4798      	blx	r3
		break;
    969c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    969e:	4806      	ldr	r0, [pc, #24]	; (96b8 <usbdc_register_handler+0x30>)
    96a0:	4b04      	ldr	r3, [pc, #16]	; (96b4 <usbdc_register_handler+0x2c>)
    96a2:	4798      	blx	r3
		break;
    96a4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    96a6:	4805      	ldr	r0, [pc, #20]	; (96bc <usbdc_register_handler+0x34>)
    96a8:	4b02      	ldr	r3, [pc, #8]	; (96b4 <usbdc_register_handler+0x2c>)
    96aa:	4798      	blx	r3
    96ac:	bd08      	pop	{r3, pc}
    96ae:	bf00      	nop
    96b0:	20001238 	.word	0x20001238
    96b4:	00004575 	.word	0x00004575
    96b8:	2000123c 	.word	0x2000123c
    96bc:	20001240 	.word	0x20001240

000096c0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    96c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    96c2:	4605      	mov	r5, r0
    96c4:	f240 3255 	movw	r2, #853	; 0x355
    96c8:	490c      	ldr	r1, [pc, #48]	; (96fc <usbdc_init+0x3c>)
    96ca:	3000      	adds	r0, #0
    96cc:	bf18      	it	ne
    96ce:	2001      	movne	r0, #1
    96d0:	4b0b      	ldr	r3, [pc, #44]	; (9700 <usbdc_init+0x40>)
    96d2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    96d4:	4b0b      	ldr	r3, [pc, #44]	; (9704 <usbdc_init+0x44>)
    96d6:	4798      	blx	r3
	if (rc < 0) {
    96d8:	2800      	cmp	r0, #0
    96da:	db0e      	blt.n	96fa <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    96dc:	4c0a      	ldr	r4, [pc, #40]	; (9708 <usbdc_init+0x48>)
    96de:	2220      	movs	r2, #32
    96e0:	2100      	movs	r1, #0
    96e2:	4620      	mov	r0, r4
    96e4:	4b09      	ldr	r3, [pc, #36]	; (970c <usbdc_init+0x4c>)
    96e6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    96e8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    96ea:	4909      	ldr	r1, [pc, #36]	; (9710 <usbdc_init+0x50>)
    96ec:	2000      	movs	r0, #0
    96ee:	4c09      	ldr	r4, [pc, #36]	; (9714 <usbdc_init+0x54>)
    96f0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    96f2:	4909      	ldr	r1, [pc, #36]	; (9718 <usbdc_init+0x58>)
    96f4:	2001      	movs	r0, #1
    96f6:	47a0      	blx	r4

	return 0;
    96f8:	2000      	movs	r0, #0
}
    96fa:	bd38      	pop	{r3, r4, r5, pc}
    96fc:	0000b28c 	.word	0x0000b28c
    9700:	00004519 	.word	0x00004519
    9704:	000041cd 	.word	0x000041cd
    9708:	20001234 	.word	0x20001234
    970c:	0000a25f 	.word	0x0000a25f
    9710:	00009141 	.word	0x00009141
    9714:	00004235 	.word	0x00004235
    9718:	0000922d 	.word	0x0000922d

0000971c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    971c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    971e:	4601      	mov	r1, r0
    9720:	4801      	ldr	r0, [pc, #4]	; (9728 <usbdc_register_function+0xc>)
    9722:	4b02      	ldr	r3, [pc, #8]	; (972c <usbdc_register_function+0x10>)
    9724:	4798      	blx	r3
    9726:	bd08      	pop	{r3, pc}
    9728:	20001244 	.word	0x20001244
    972c:	00004575 	.word	0x00004575

00009730 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    9730:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    9732:	4b0a      	ldr	r3, [pc, #40]	; (975c <usbdc_start+0x2c>)
    9734:	7e9b      	ldrb	r3, [r3, #26]
    9736:	b95b      	cbnz	r3, 9750 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    9738:	b168      	cbz	r0, 9756 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    973a:	4b08      	ldr	r3, [pc, #32]	; (975c <usbdc_start+0x2c>)
    973c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    973e:	6802      	ldr	r2, [r0, #0]
    9740:	79d2      	ldrb	r2, [r2, #7]
    9742:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    9744:	2201      	movs	r2, #1
    9746:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    9748:	4b05      	ldr	r3, [pc, #20]	; (9760 <usbdc_start+0x30>)
    974a:	4798      	blx	r3
	return ERR_NONE;
    974c:	2000      	movs	r0, #0
    974e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    9750:	f06f 0003 	mvn.w	r0, #3
    9754:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    9756:	f06f 0008 	mvn.w	r0, #8
}
    975a:	bd08      	pop	{r3, pc}
    975c:	20001234 	.word	0x20001234
    9760:	00004241 	.word	0x00004241

00009764 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    9764:	b508      	push	{r3, lr}
	usb_d_attach();
    9766:	4b01      	ldr	r3, [pc, #4]	; (976c <usbdc_attach+0x8>)
    9768:	4798      	blx	r3
    976a:	bd08      	pop	{r3, pc}
    976c:	0000424d 	.word	0x0000424d

00009770 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    9770:	4b01      	ldr	r3, [pc, #4]	; (9778 <usbdc_get_ctrl_buffer+0x8>)
    9772:	6958      	ldr	r0, [r3, #20]
    9774:	4770      	bx	lr
    9776:	bf00      	nop
    9778:	20001234 	.word	0x20001234

0000977c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    977c:	4b03      	ldr	r3, [pc, #12]	; (978c <usbdc_get_state+0x10>)
    977e:	7e98      	ldrb	r0, [r3, #26]
    9780:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    9784:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    9786:	bf18      	it	ne
    9788:	2010      	movne	r0, #16
    978a:	4770      	bx	lr
    978c:	20001234 	.word	0x20001234

00009790 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    9790:	4288      	cmp	r0, r1
    9792:	d214      	bcs.n	97be <usb_find_desc+0x2e>
	return desc[0];
    9794:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    9796:	2b01      	cmp	r3, #1
    9798:	d913      	bls.n	97c2 <usb_find_desc+0x32>
{
    979a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    979c:	7844      	ldrb	r4, [r0, #1]
    979e:	4294      	cmp	r4, r2
    97a0:	d00a      	beq.n	97b8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    97a2:	4418      	add	r0, r3
	while (desc < eof) {
    97a4:	4281      	cmp	r1, r0
    97a6:	d906      	bls.n	97b6 <usb_find_desc+0x26>
	return desc[0];
    97a8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97aa:	2b01      	cmp	r3, #1
    97ac:	d90b      	bls.n	97c6 <usb_find_desc+0x36>
	return desc[1];
    97ae:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    97b0:	4294      	cmp	r4, r2
    97b2:	d1f6      	bne.n	97a2 <usb_find_desc+0x12>
    97b4:	e000      	b.n	97b8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    97b6:	2000      	movs	r0, #0
}
    97b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    97bc:	4770      	bx	lr
	return NULL;
    97be:	2000      	movs	r0, #0
    97c0:	4770      	bx	lr
		_desc_len_check();
    97c2:	2000      	movs	r0, #0
    97c4:	4770      	bx	lr
    97c6:	2000      	movs	r0, #0
    97c8:	e7f6      	b.n	97b8 <usb_find_desc+0x28>

000097ca <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    97ca:	4288      	cmp	r0, r1
    97cc:	d216      	bcs.n	97fc <usb_find_ep_desc+0x32>
	return desc[0];
    97ce:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97d0:	2b01      	cmp	r3, #1
    97d2:	d915      	bls.n	9800 <usb_find_ep_desc+0x36>
	return desc[1];
    97d4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    97d6:	2a04      	cmp	r2, #4
    97d8:	d014      	beq.n	9804 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    97da:	2a05      	cmp	r2, #5
    97dc:	d00b      	beq.n	97f6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    97de:	4418      	add	r0, r3
	while (desc < eof) {
    97e0:	4281      	cmp	r1, r0
    97e2:	d909      	bls.n	97f8 <usb_find_ep_desc+0x2e>
	return desc[0];
    97e4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97e6:	2b01      	cmp	r3, #1
    97e8:	d90e      	bls.n	9808 <usb_find_ep_desc+0x3e>
	return desc[1];
    97ea:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    97ec:	2a04      	cmp	r2, #4
    97ee:	d00d      	beq.n	980c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    97f0:	2a05      	cmp	r2, #5
    97f2:	d1f4      	bne.n	97de <usb_find_ep_desc+0x14>
    97f4:	e00b      	b.n	980e <usb_find_ep_desc+0x44>
    97f6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    97f8:	2000      	movs	r0, #0
    97fa:	4770      	bx	lr
    97fc:	2000      	movs	r0, #0
    97fe:	4770      	bx	lr
		_desc_len_check();
    9800:	2000      	movs	r0, #0
    9802:	4770      	bx	lr
	return NULL;
    9804:	2000      	movs	r0, #0
    9806:	4770      	bx	lr
		_desc_len_check();
    9808:	2000      	movs	r0, #0
    980a:	4770      	bx	lr
	return NULL;
    980c:	2000      	movs	r0, #0
}
    980e:	4770      	bx	lr

00009810 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    9810:	b538      	push	{r3, r4, r5, lr}
    9812:	460c      	mov	r4, r1
    9814:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    9816:	2202      	movs	r2, #2
    9818:	4b16      	ldr	r3, [pc, #88]	; (9874 <usb_find_cfg_desc+0x64>)
    981a:	4798      	blx	r3
	if (!desc) {
    981c:	4603      	mov	r3, r0
    981e:	b1e8      	cbz	r0, 985c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    9820:	4284      	cmp	r4, r0
    9822:	d91d      	bls.n	9860 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    9824:	7802      	ldrb	r2, [r0, #0]
    9826:	2a01      	cmp	r2, #1
    9828:	d91c      	bls.n	9864 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    982a:	7842      	ldrb	r2, [r0, #1]
    982c:	2a02      	cmp	r2, #2
    982e:	d11b      	bne.n	9868 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    9830:	7942      	ldrb	r2, [r0, #5]
    9832:	42aa      	cmp	r2, r5
    9834:	d012      	beq.n	985c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    9836:	78d9      	ldrb	r1, [r3, #3]
    9838:	789a      	ldrb	r2, [r3, #2]
    983a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    983e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    9842:	429c      	cmp	r4, r3
    9844:	d909      	bls.n	985a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    9846:	781a      	ldrb	r2, [r3, #0]
    9848:	2a01      	cmp	r2, #1
    984a:	d90f      	bls.n	986c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    984c:	785a      	ldrb	r2, [r3, #1]
    984e:	2a02      	cmp	r2, #2
    9850:	d10e      	bne.n	9870 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    9852:	795a      	ldrb	r2, [r3, #5]
    9854:	42aa      	cmp	r2, r5
    9856:	d1ee      	bne.n	9836 <usb_find_cfg_desc+0x26>
    9858:	e000      	b.n	985c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    985a:	2300      	movs	r3, #0
}
    985c:	4618      	mov	r0, r3
    985e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    9860:	2300      	movs	r3, #0
    9862:	e7fb      	b.n	985c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    9864:	2300      	movs	r3, #0
    9866:	e7f9      	b.n	985c <usb_find_cfg_desc+0x4c>
	return NULL;
    9868:	2300      	movs	r3, #0
    986a:	e7f7      	b.n	985c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    986c:	2300      	movs	r3, #0
    986e:	e7f5      	b.n	985c <usb_find_cfg_desc+0x4c>
	return NULL;
    9870:	2300      	movs	r3, #0
    9872:	e7f3      	b.n	985c <usb_find_cfg_desc+0x4c>
    9874:	00009791 	.word	0x00009791

00009878 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    9878:	4288      	cmp	r0, r1
    987a:	d217      	bcs.n	98ac <usb_find_str_desc+0x34>
{
    987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9880:	460d      	mov	r5, r1
    9882:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    9884:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    9886:	f04f 0803 	mov.w	r8, #3
    988a:	4f0c      	ldr	r7, [pc, #48]	; (98bc <usb_find_str_desc+0x44>)
    988c:	4642      	mov	r2, r8
    988e:	4629      	mov	r1, r5
    9890:	47b8      	blx	r7
		if (desc) {
    9892:	4603      	mov	r3, r0
    9894:	b170      	cbz	r0, 98b4 <usb_find_str_desc+0x3c>
	return desc[0];
    9896:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    9898:	2801      	cmp	r0, #1
    989a:	d90a      	bls.n	98b2 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    989c:	42a6      	cmp	r6, r4
    989e:	d009      	beq.n	98b4 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    98a0:	4418      	add	r0, r3
    98a2:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    98a4:	4285      	cmp	r5, r0
    98a6:	d8f1      	bhi.n	988c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    98a8:	2300      	movs	r3, #0
    98aa:	e003      	b.n	98b4 <usb_find_str_desc+0x3c>
    98ac:	2300      	movs	r3, #0
}
    98ae:	4618      	mov	r0, r3
    98b0:	4770      	bx	lr
			_desc_len_check();
    98b2:	2300      	movs	r3, #0
}
    98b4:	4618      	mov	r0, r3
    98b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ba:	bf00      	nop
    98bc:	00009791 	.word	0x00009791

000098c0 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    98c0:	4b3a      	ldr	r3, [pc, #232]	; (99ac <hiddf_demo_sof_event+0xec>)
    98c2:	791b      	ldrb	r3, [r3, #4]
    98c4:	2b0a      	cmp	r3, #10
    98c6:	d803      	bhi.n	98d0 <hiddf_demo_sof_event+0x10>
    98c8:	3301      	adds	r3, #1
    98ca:	4a38      	ldr	r2, [pc, #224]	; (99ac <hiddf_demo_sof_event+0xec>)
    98cc:	7113      	strb	r3, [r2, #4]
    98ce:	4770      	bx	lr
{
    98d0:	b570      	push	{r4, r5, r6, lr}
    98d2:	b084      	sub	sp, #16
		interval = 0;
    98d4:	4b35      	ldr	r3, [pc, #212]	; (99ac <hiddf_demo_sof_event+0xec>)
    98d6:	2200      	movs	r2, #0
    98d8:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    98da:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    98dc:	a801      	add	r0, sp, #4
    98de:	4b34      	ldr	r3, [pc, #208]	; (99b0 <hiddf_demo_sof_event+0xf0>)
    98e0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    98e2:	096b      	lsrs	r3, r5, #5
    98e4:	4933      	ldr	r1, [pc, #204]	; (99b4 <hiddf_demo_sof_event+0xf4>)
    98e6:	01db      	lsls	r3, r3, #7
    98e8:	18ca      	adds	r2, r1, r3
    98ea:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    98ec:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    98ee:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    98f0:	405c      	eors	r4, r3
    98f2:	400c      	ands	r4, r1
    98f4:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    98f6:	a801      	add	r0, sp, #4
    98f8:	4b2f      	ldr	r3, [pc, #188]	; (99b8 <hiddf_demo_sof_event+0xf8>)
    98fa:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    98fc:	f005 051f 	and.w	r5, r5, #31
    9900:	2301      	movs	r3, #1
    9902:	fa03 f505 	lsl.w	r5, r3, r5
    9906:	4225      	tst	r5, r4
    9908:	d040      	beq.n	998c <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    990a:	4b28      	ldr	r3, [pc, #160]	; (99ac <hiddf_demo_sof_event+0xec>)
    990c:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    990e:	a802      	add	r0, sp, #8
    9910:	4b27      	ldr	r3, [pc, #156]	; (99b0 <hiddf_demo_sof_event+0xf0>)
    9912:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9914:	096b      	lsrs	r3, r5, #5
    9916:	4927      	ldr	r1, [pc, #156]	; (99b4 <hiddf_demo_sof_event+0xf4>)
    9918:	01db      	lsls	r3, r3, #7
    991a:	18ca      	adds	r2, r1, r3
    991c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    991e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9920:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9922:	405c      	eors	r4, r3
    9924:	400c      	ands	r4, r1
    9926:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    9928:	a802      	add	r0, sp, #8
    992a:	4b23      	ldr	r3, [pc, #140]	; (99b8 <hiddf_demo_sof_event+0xf8>)
    992c:	4798      	blx	r3
    992e:	f005 051f 	and.w	r5, r5, #31
    9932:	2301      	movs	r3, #1
    9934:	fa03 f505 	lsl.w	r5, r3, r5
    9938:	4225      	tst	r5, r4
    993a:	d02d      	beq.n	9998 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    993c:	4d1b      	ldr	r5, [pc, #108]	; (99ac <hiddf_demo_sof_event+0xec>)
    993e:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    9940:	a803      	add	r0, sp, #12
    9942:	4b1b      	ldr	r3, [pc, #108]	; (99b0 <hiddf_demo_sof_event+0xf0>)
    9944:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9946:	0973      	lsrs	r3, r6, #5
    9948:	491a      	ldr	r1, [pc, #104]	; (99b4 <hiddf_demo_sof_event+0xf4>)
    994a:	01db      	lsls	r3, r3, #7
    994c:	18ca      	adds	r2, r1, r3
    994e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9950:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9952:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9954:	405c      	eors	r4, r3
    9956:	400c      	ands	r4, r1
    9958:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    995a:	a803      	add	r0, sp, #12
    995c:	4b16      	ldr	r3, [pc, #88]	; (99b8 <hiddf_demo_sof_event+0xf8>)
    995e:	4798      	blx	r3
    9960:	f006 061f 	and.w	r6, r6, #31
    9964:	2301      	movs	r3, #1
    9966:	40b3      	lsls	r3, r6
    9968:	401c      	ands	r4, r3
    996a:	bf0c      	ite	eq
    996c:	2301      	moveq	r3, #1
    996e:	2300      	movne	r3, #0
    9970:	7d2a      	ldrb	r2, [r5, #20]
    9972:	429a      	cmp	r2, r3
    9974:	d008      	beq.n	9988 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    9976:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    9978:	b19c      	cbz	r4, 99a2 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    997a:	2200      	movs	r2, #0
    997c:	4b0f      	ldr	r3, [pc, #60]	; (99bc <hiddf_demo_sof_event+0xfc>)
    997e:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    9980:	2101      	movs	r1, #1
    9982:	480e      	ldr	r0, [pc, #56]	; (99bc <hiddf_demo_sof_event+0xfc>)
    9984:	4b0e      	ldr	r3, [pc, #56]	; (99c0 <hiddf_demo_sof_event+0x100>)
    9986:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    9988:	b004      	add	sp, #16
    998a:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    998c:	4619      	mov	r1, r3
    998e:	f06f 0004 	mvn.w	r0, #4
    9992:	4b0c      	ldr	r3, [pc, #48]	; (99c4 <hiddf_demo_sof_event+0x104>)
    9994:	4798      	blx	r3
    9996:	e7b8      	b.n	990a <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    9998:	4619      	mov	r1, r3
    999a:	2005      	movs	r0, #5
    999c:	4b09      	ldr	r3, [pc, #36]	; (99c4 <hiddf_demo_sof_event+0x104>)
    999e:	4798      	blx	r3
    99a0:	e7cc      	b.n	993c <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    99a2:	2201      	movs	r2, #1
    99a4:	4b05      	ldr	r3, [pc, #20]	; (99bc <hiddf_demo_sof_event+0xfc>)
    99a6:	709a      	strb	r2, [r3, #2]
    99a8:	e7ea      	b.n	9980 <hiddf_demo_sof_event+0xc0>
    99aa:	bf00      	nop
    99ac:	20001254 	.word	0x20001254
    99b0:	00003371 	.word	0x00003371
    99b4:	41008000 	.word	0x41008000
    99b8:	0000337f 	.word	0x0000337f
    99bc:	20000378 	.word	0x20000378
    99c0:	00008b0d 	.word	0x00008b0d
    99c4:	00008da1 	.word	0x00008da1

000099c8 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    99c8:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    99ca:	4805      	ldr	r0, [pc, #20]	; (99e0 <composite_device_init+0x18>)
    99cc:	4b05      	ldr	r3, [pc, #20]	; (99e4 <composite_device_init+0x1c>)
    99ce:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    99d0:	4b05      	ldr	r3, [pc, #20]	; (99e8 <composite_device_init+0x20>)
    99d2:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    99d4:	4b05      	ldr	r3, [pc, #20]	; (99ec <composite_device_init+0x24>)
    99d6:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    99d8:	4b05      	ldr	r3, [pc, #20]	; (99f0 <composite_device_init+0x28>)
    99da:	4798      	blx	r3
    99dc:	bd08      	pop	{r3, pc}
    99de:	bf00      	nop
    99e0:	2000126c 	.word	0x2000126c
    99e4:	000096c1 	.word	0x000096c1
    99e8:	00008889 	.word	0x00008889
    99ec:	00008d5d 	.word	0x00008d5d
    99f0:	00008ac9 	.word	0x00008ac9

000099f4 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    99f4:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    99f6:	4803      	ldr	r0, [pc, #12]	; (9a04 <composite_device_start+0x10>)
    99f8:	4b03      	ldr	r3, [pc, #12]	; (9a08 <composite_device_start+0x14>)
    99fa:	4798      	blx	r3
	usbdc_attach();
    99fc:	4b03      	ldr	r3, [pc, #12]	; (9a0c <composite_device_start+0x18>)
    99fe:	4798      	blx	r3
    9a00:	bd08      	pop	{r3, pc}
    9a02:	bf00      	nop
    9a04:	20000384 	.word	0x20000384
    9a08:	00009731 	.word	0x00009731
    9a0c:	00009765 	.word	0x00009765

00009a10 <usb_init>:
		}
	}
}

void usb_init(void)
{
    9a10:	b508      	push	{r3, lr}

	composite_device_init();
    9a12:	4b01      	ldr	r3, [pc, #4]	; (9a18 <usb_init+0x8>)
    9a14:	4798      	blx	r3
    9a16:	bd08      	pop	{r3, pc}
    9a18:	000099c9 	.word	0x000099c9

00009a1c <__aeabi_drsub>:
    9a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    9a20:	e002      	b.n	9a28 <__adddf3>
    9a22:	bf00      	nop

00009a24 <__aeabi_dsub>:
    9a24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00009a28 <__adddf3>:
    9a28:	b530      	push	{r4, r5, lr}
    9a2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    9a2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    9a32:	ea94 0f05 	teq	r4, r5
    9a36:	bf08      	it	eq
    9a38:	ea90 0f02 	teqeq	r0, r2
    9a3c:	bf1f      	itttt	ne
    9a3e:	ea54 0c00 	orrsne.w	ip, r4, r0
    9a42:	ea55 0c02 	orrsne.w	ip, r5, r2
    9a46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    9a4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9a4e:	f000 80e2 	beq.w	9c16 <__adddf3+0x1ee>
    9a52:	ea4f 5454 	mov.w	r4, r4, lsr #21
    9a56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    9a5a:	bfb8      	it	lt
    9a5c:	426d      	neglt	r5, r5
    9a5e:	dd0c      	ble.n	9a7a <__adddf3+0x52>
    9a60:	442c      	add	r4, r5
    9a62:	ea80 0202 	eor.w	r2, r0, r2
    9a66:	ea81 0303 	eor.w	r3, r1, r3
    9a6a:	ea82 0000 	eor.w	r0, r2, r0
    9a6e:	ea83 0101 	eor.w	r1, r3, r1
    9a72:	ea80 0202 	eor.w	r2, r0, r2
    9a76:	ea81 0303 	eor.w	r3, r1, r3
    9a7a:	2d36      	cmp	r5, #54	; 0x36
    9a7c:	bf88      	it	hi
    9a7e:	bd30      	pophi	{r4, r5, pc}
    9a80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9a88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    9a8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    9a90:	d002      	beq.n	9a98 <__adddf3+0x70>
    9a92:	4240      	negs	r0, r0
    9a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9a98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    9a9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9aa0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    9aa4:	d002      	beq.n	9aac <__adddf3+0x84>
    9aa6:	4252      	negs	r2, r2
    9aa8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9aac:	ea94 0f05 	teq	r4, r5
    9ab0:	f000 80a7 	beq.w	9c02 <__adddf3+0x1da>
    9ab4:	f1a4 0401 	sub.w	r4, r4, #1
    9ab8:	f1d5 0e20 	rsbs	lr, r5, #32
    9abc:	db0d      	blt.n	9ada <__adddf3+0xb2>
    9abe:	fa02 fc0e 	lsl.w	ip, r2, lr
    9ac2:	fa22 f205 	lsr.w	r2, r2, r5
    9ac6:	1880      	adds	r0, r0, r2
    9ac8:	f141 0100 	adc.w	r1, r1, #0
    9acc:	fa03 f20e 	lsl.w	r2, r3, lr
    9ad0:	1880      	adds	r0, r0, r2
    9ad2:	fa43 f305 	asr.w	r3, r3, r5
    9ad6:	4159      	adcs	r1, r3
    9ad8:	e00e      	b.n	9af8 <__adddf3+0xd0>
    9ada:	f1a5 0520 	sub.w	r5, r5, #32
    9ade:	f10e 0e20 	add.w	lr, lr, #32
    9ae2:	2a01      	cmp	r2, #1
    9ae4:	fa03 fc0e 	lsl.w	ip, r3, lr
    9ae8:	bf28      	it	cs
    9aea:	f04c 0c02 	orrcs.w	ip, ip, #2
    9aee:	fa43 f305 	asr.w	r3, r3, r5
    9af2:	18c0      	adds	r0, r0, r3
    9af4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9afc:	d507      	bpl.n	9b0e <__adddf3+0xe6>
    9afe:	f04f 0e00 	mov.w	lr, #0
    9b02:	f1dc 0c00 	rsbs	ip, ip, #0
    9b06:	eb7e 0000 	sbcs.w	r0, lr, r0
    9b0a:	eb6e 0101 	sbc.w	r1, lr, r1
    9b0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9b12:	d31b      	bcc.n	9b4c <__adddf3+0x124>
    9b14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    9b18:	d30c      	bcc.n	9b34 <__adddf3+0x10c>
    9b1a:	0849      	lsrs	r1, r1, #1
    9b1c:	ea5f 0030 	movs.w	r0, r0, rrx
    9b20:	ea4f 0c3c 	mov.w	ip, ip, rrx
    9b24:	f104 0401 	add.w	r4, r4, #1
    9b28:	ea4f 5244 	mov.w	r2, r4, lsl #21
    9b2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    9b30:	f080 809a 	bcs.w	9c68 <__adddf3+0x240>
    9b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9b38:	bf08      	it	eq
    9b3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    9b3e:	f150 0000 	adcs.w	r0, r0, #0
    9b42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9b46:	ea41 0105 	orr.w	r1, r1, r5
    9b4a:	bd30      	pop	{r4, r5, pc}
    9b4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    9b50:	4140      	adcs	r0, r0
    9b52:	eb41 0101 	adc.w	r1, r1, r1
    9b56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9b5a:	f1a4 0401 	sub.w	r4, r4, #1
    9b5e:	d1e9      	bne.n	9b34 <__adddf3+0x10c>
    9b60:	f091 0f00 	teq	r1, #0
    9b64:	bf04      	itt	eq
    9b66:	4601      	moveq	r1, r0
    9b68:	2000      	moveq	r0, #0
    9b6a:	fab1 f381 	clz	r3, r1
    9b6e:	bf08      	it	eq
    9b70:	3320      	addeq	r3, #32
    9b72:	f1a3 030b 	sub.w	r3, r3, #11
    9b76:	f1b3 0220 	subs.w	r2, r3, #32
    9b7a:	da0c      	bge.n	9b96 <__adddf3+0x16e>
    9b7c:	320c      	adds	r2, #12
    9b7e:	dd08      	ble.n	9b92 <__adddf3+0x16a>
    9b80:	f102 0c14 	add.w	ip, r2, #20
    9b84:	f1c2 020c 	rsb	r2, r2, #12
    9b88:	fa01 f00c 	lsl.w	r0, r1, ip
    9b8c:	fa21 f102 	lsr.w	r1, r1, r2
    9b90:	e00c      	b.n	9bac <__adddf3+0x184>
    9b92:	f102 0214 	add.w	r2, r2, #20
    9b96:	bfd8      	it	le
    9b98:	f1c2 0c20 	rsble	ip, r2, #32
    9b9c:	fa01 f102 	lsl.w	r1, r1, r2
    9ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
    9ba4:	bfdc      	itt	le
    9ba6:	ea41 010c 	orrle.w	r1, r1, ip
    9baa:	4090      	lslle	r0, r2
    9bac:	1ae4      	subs	r4, r4, r3
    9bae:	bfa2      	ittt	ge
    9bb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    9bb4:	4329      	orrge	r1, r5
    9bb6:	bd30      	popge	{r4, r5, pc}
    9bb8:	ea6f 0404 	mvn.w	r4, r4
    9bbc:	3c1f      	subs	r4, #31
    9bbe:	da1c      	bge.n	9bfa <__adddf3+0x1d2>
    9bc0:	340c      	adds	r4, #12
    9bc2:	dc0e      	bgt.n	9be2 <__adddf3+0x1ba>
    9bc4:	f104 0414 	add.w	r4, r4, #20
    9bc8:	f1c4 0220 	rsb	r2, r4, #32
    9bcc:	fa20 f004 	lsr.w	r0, r0, r4
    9bd0:	fa01 f302 	lsl.w	r3, r1, r2
    9bd4:	ea40 0003 	orr.w	r0, r0, r3
    9bd8:	fa21 f304 	lsr.w	r3, r1, r4
    9bdc:	ea45 0103 	orr.w	r1, r5, r3
    9be0:	bd30      	pop	{r4, r5, pc}
    9be2:	f1c4 040c 	rsb	r4, r4, #12
    9be6:	f1c4 0220 	rsb	r2, r4, #32
    9bea:	fa20 f002 	lsr.w	r0, r0, r2
    9bee:	fa01 f304 	lsl.w	r3, r1, r4
    9bf2:	ea40 0003 	orr.w	r0, r0, r3
    9bf6:	4629      	mov	r1, r5
    9bf8:	bd30      	pop	{r4, r5, pc}
    9bfa:	fa21 f004 	lsr.w	r0, r1, r4
    9bfe:	4629      	mov	r1, r5
    9c00:	bd30      	pop	{r4, r5, pc}
    9c02:	f094 0f00 	teq	r4, #0
    9c06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    9c0a:	bf06      	itte	eq
    9c0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    9c10:	3401      	addeq	r4, #1
    9c12:	3d01      	subne	r5, #1
    9c14:	e74e      	b.n	9ab4 <__adddf3+0x8c>
    9c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9c1a:	bf18      	it	ne
    9c1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9c20:	d029      	beq.n	9c76 <__adddf3+0x24e>
    9c22:	ea94 0f05 	teq	r4, r5
    9c26:	bf08      	it	eq
    9c28:	ea90 0f02 	teqeq	r0, r2
    9c2c:	d005      	beq.n	9c3a <__adddf3+0x212>
    9c2e:	ea54 0c00 	orrs.w	ip, r4, r0
    9c32:	bf04      	itt	eq
    9c34:	4619      	moveq	r1, r3
    9c36:	4610      	moveq	r0, r2
    9c38:	bd30      	pop	{r4, r5, pc}
    9c3a:	ea91 0f03 	teq	r1, r3
    9c3e:	bf1e      	ittt	ne
    9c40:	2100      	movne	r1, #0
    9c42:	2000      	movne	r0, #0
    9c44:	bd30      	popne	{r4, r5, pc}
    9c46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    9c4a:	d105      	bne.n	9c58 <__adddf3+0x230>
    9c4c:	0040      	lsls	r0, r0, #1
    9c4e:	4149      	adcs	r1, r1
    9c50:	bf28      	it	cs
    9c52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9c56:	bd30      	pop	{r4, r5, pc}
    9c58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    9c5c:	bf3c      	itt	cc
    9c5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    9c62:	bd30      	popcc	{r4, r5, pc}
    9c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9c68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    9c6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9c70:	f04f 0000 	mov.w	r0, #0
    9c74:	bd30      	pop	{r4, r5, pc}
    9c76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9c7a:	bf1a      	itte	ne
    9c7c:	4619      	movne	r1, r3
    9c7e:	4610      	movne	r0, r2
    9c80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    9c84:	bf1c      	itt	ne
    9c86:	460b      	movne	r3, r1
    9c88:	4602      	movne	r2, r0
    9c8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9c8e:	bf06      	itte	eq
    9c90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    9c94:	ea91 0f03 	teqeq	r1, r3
    9c98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    9c9c:	bd30      	pop	{r4, r5, pc}
    9c9e:	bf00      	nop

00009ca0 <__aeabi_ui2d>:
    9ca0:	f090 0f00 	teq	r0, #0
    9ca4:	bf04      	itt	eq
    9ca6:	2100      	moveq	r1, #0
    9ca8:	4770      	bxeq	lr
    9caa:	b530      	push	{r4, r5, lr}
    9cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9cb4:	f04f 0500 	mov.w	r5, #0
    9cb8:	f04f 0100 	mov.w	r1, #0
    9cbc:	e750      	b.n	9b60 <__adddf3+0x138>
    9cbe:	bf00      	nop

00009cc0 <__aeabi_i2d>:
    9cc0:	f090 0f00 	teq	r0, #0
    9cc4:	bf04      	itt	eq
    9cc6:	2100      	moveq	r1, #0
    9cc8:	4770      	bxeq	lr
    9cca:	b530      	push	{r4, r5, lr}
    9ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9cd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9cd8:	bf48      	it	mi
    9cda:	4240      	negmi	r0, r0
    9cdc:	f04f 0100 	mov.w	r1, #0
    9ce0:	e73e      	b.n	9b60 <__adddf3+0x138>
    9ce2:	bf00      	nop

00009ce4 <__aeabi_f2d>:
    9ce4:	0042      	lsls	r2, r0, #1
    9ce6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    9cea:	ea4f 0131 	mov.w	r1, r1, rrx
    9cee:	ea4f 7002 	mov.w	r0, r2, lsl #28
    9cf2:	bf1f      	itttt	ne
    9cf4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9cf8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9cfc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    9d00:	4770      	bxne	lr
    9d02:	f092 0f00 	teq	r2, #0
    9d06:	bf14      	ite	ne
    9d08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9d0c:	4770      	bxeq	lr
    9d0e:	b530      	push	{r4, r5, lr}
    9d10:	f44f 7460 	mov.w	r4, #896	; 0x380
    9d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9d1c:	e720      	b.n	9b60 <__adddf3+0x138>
    9d1e:	bf00      	nop

00009d20 <__aeabi_ul2d>:
    9d20:	ea50 0201 	orrs.w	r2, r0, r1
    9d24:	bf08      	it	eq
    9d26:	4770      	bxeq	lr
    9d28:	b530      	push	{r4, r5, lr}
    9d2a:	f04f 0500 	mov.w	r5, #0
    9d2e:	e00a      	b.n	9d46 <__aeabi_l2d+0x16>

00009d30 <__aeabi_l2d>:
    9d30:	ea50 0201 	orrs.w	r2, r0, r1
    9d34:	bf08      	it	eq
    9d36:	4770      	bxeq	lr
    9d38:	b530      	push	{r4, r5, lr}
    9d3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    9d3e:	d502      	bpl.n	9d46 <__aeabi_l2d+0x16>
    9d40:	4240      	negs	r0, r0
    9d42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9d46:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9d4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9d4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    9d52:	f43f aedc 	beq.w	9b0e <__adddf3+0xe6>
    9d56:	f04f 0203 	mov.w	r2, #3
    9d5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9d5e:	bf18      	it	ne
    9d60:	3203      	addne	r2, #3
    9d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9d66:	bf18      	it	ne
    9d68:	3203      	addne	r2, #3
    9d6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    9d6e:	f1c2 0320 	rsb	r3, r2, #32
    9d72:	fa00 fc03 	lsl.w	ip, r0, r3
    9d76:	fa20 f002 	lsr.w	r0, r0, r2
    9d7a:	fa01 fe03 	lsl.w	lr, r1, r3
    9d7e:	ea40 000e 	orr.w	r0, r0, lr
    9d82:	fa21 f102 	lsr.w	r1, r1, r2
    9d86:	4414      	add	r4, r2
    9d88:	e6c1      	b.n	9b0e <__adddf3+0xe6>
    9d8a:	bf00      	nop

00009d8c <__aeabi_dmul>:
    9d8c:	b570      	push	{r4, r5, r6, lr}
    9d8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9d92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9d96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    9d9a:	bf1d      	ittte	ne
    9d9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9da0:	ea94 0f0c 	teqne	r4, ip
    9da4:	ea95 0f0c 	teqne	r5, ip
    9da8:	f000 f8de 	bleq	9f68 <__aeabi_dmul+0x1dc>
    9dac:	442c      	add	r4, r5
    9dae:	ea81 0603 	eor.w	r6, r1, r3
    9db2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    9db6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    9dba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    9dbe:	bf18      	it	ne
    9dc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    9dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9dcc:	d038      	beq.n	9e40 <__aeabi_dmul+0xb4>
    9dce:	fba0 ce02 	umull	ip, lr, r0, r2
    9dd2:	f04f 0500 	mov.w	r5, #0
    9dd6:	fbe1 e502 	umlal	lr, r5, r1, r2
    9dda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    9dde:	fbe0 e503 	umlal	lr, r5, r0, r3
    9de2:	f04f 0600 	mov.w	r6, #0
    9de6:	fbe1 5603 	umlal	r5, r6, r1, r3
    9dea:	f09c 0f00 	teq	ip, #0
    9dee:	bf18      	it	ne
    9df0:	f04e 0e01 	orrne.w	lr, lr, #1
    9df4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    9df8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9dfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    9e00:	d204      	bcs.n	9e0c <__aeabi_dmul+0x80>
    9e02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    9e06:	416d      	adcs	r5, r5
    9e08:	eb46 0606 	adc.w	r6, r6, r6
    9e0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    9e10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    9e14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    9e18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    9e1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    9e20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9e24:	bf88      	it	hi
    9e26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9e2a:	d81e      	bhi.n	9e6a <__aeabi_dmul+0xde>
    9e2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    9e30:	bf08      	it	eq
    9e32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    9e36:	f150 0000 	adcs.w	r0, r0, #0
    9e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9e3e:	bd70      	pop	{r4, r5, r6, pc}
    9e40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9e44:	ea46 0101 	orr.w	r1, r6, r1
    9e48:	ea40 0002 	orr.w	r0, r0, r2
    9e4c:	ea81 0103 	eor.w	r1, r1, r3
    9e50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    9e54:	bfc2      	ittt	gt
    9e56:	ebd4 050c 	rsbsgt	r5, r4, ip
    9e5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    9e5e:	bd70      	popgt	{r4, r5, r6, pc}
    9e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9e64:	f04f 0e00 	mov.w	lr, #0
    9e68:	3c01      	subs	r4, #1
    9e6a:	f300 80ab 	bgt.w	9fc4 <__aeabi_dmul+0x238>
    9e6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    9e72:	bfde      	ittt	le
    9e74:	2000      	movle	r0, #0
    9e76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    9e7a:	bd70      	pople	{r4, r5, r6, pc}
    9e7c:	f1c4 0400 	rsb	r4, r4, #0
    9e80:	3c20      	subs	r4, #32
    9e82:	da35      	bge.n	9ef0 <__aeabi_dmul+0x164>
    9e84:	340c      	adds	r4, #12
    9e86:	dc1b      	bgt.n	9ec0 <__aeabi_dmul+0x134>
    9e88:	f104 0414 	add.w	r4, r4, #20
    9e8c:	f1c4 0520 	rsb	r5, r4, #32
    9e90:	fa00 f305 	lsl.w	r3, r0, r5
    9e94:	fa20 f004 	lsr.w	r0, r0, r4
    9e98:	fa01 f205 	lsl.w	r2, r1, r5
    9e9c:	ea40 0002 	orr.w	r0, r0, r2
    9ea0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    9ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9ea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9eac:	fa21 f604 	lsr.w	r6, r1, r4
    9eb0:	eb42 0106 	adc.w	r1, r2, r6
    9eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9eb8:	bf08      	it	eq
    9eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9ebe:	bd70      	pop	{r4, r5, r6, pc}
    9ec0:	f1c4 040c 	rsb	r4, r4, #12
    9ec4:	f1c4 0520 	rsb	r5, r4, #32
    9ec8:	fa00 f304 	lsl.w	r3, r0, r4
    9ecc:	fa20 f005 	lsr.w	r0, r0, r5
    9ed0:	fa01 f204 	lsl.w	r2, r1, r4
    9ed4:	ea40 0002 	orr.w	r0, r0, r2
    9ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9ee0:	f141 0100 	adc.w	r1, r1, #0
    9ee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9ee8:	bf08      	it	eq
    9eea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9eee:	bd70      	pop	{r4, r5, r6, pc}
    9ef0:	f1c4 0520 	rsb	r5, r4, #32
    9ef4:	fa00 f205 	lsl.w	r2, r0, r5
    9ef8:	ea4e 0e02 	orr.w	lr, lr, r2
    9efc:	fa20 f304 	lsr.w	r3, r0, r4
    9f00:	fa01 f205 	lsl.w	r2, r1, r5
    9f04:	ea43 0302 	orr.w	r3, r3, r2
    9f08:	fa21 f004 	lsr.w	r0, r1, r4
    9f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9f10:	fa21 f204 	lsr.w	r2, r1, r4
    9f14:	ea20 0002 	bic.w	r0, r0, r2
    9f18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    9f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9f20:	bf08      	it	eq
    9f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9f26:	bd70      	pop	{r4, r5, r6, pc}
    9f28:	f094 0f00 	teq	r4, #0
    9f2c:	d10f      	bne.n	9f4e <__aeabi_dmul+0x1c2>
    9f2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    9f32:	0040      	lsls	r0, r0, #1
    9f34:	eb41 0101 	adc.w	r1, r1, r1
    9f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9f3c:	bf08      	it	eq
    9f3e:	3c01      	subeq	r4, #1
    9f40:	d0f7      	beq.n	9f32 <__aeabi_dmul+0x1a6>
    9f42:	ea41 0106 	orr.w	r1, r1, r6
    9f46:	f095 0f00 	teq	r5, #0
    9f4a:	bf18      	it	ne
    9f4c:	4770      	bxne	lr
    9f4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    9f52:	0052      	lsls	r2, r2, #1
    9f54:	eb43 0303 	adc.w	r3, r3, r3
    9f58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    9f5c:	bf08      	it	eq
    9f5e:	3d01      	subeq	r5, #1
    9f60:	d0f7      	beq.n	9f52 <__aeabi_dmul+0x1c6>
    9f62:	ea43 0306 	orr.w	r3, r3, r6
    9f66:	4770      	bx	lr
    9f68:	ea94 0f0c 	teq	r4, ip
    9f6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    9f70:	bf18      	it	ne
    9f72:	ea95 0f0c 	teqne	r5, ip
    9f76:	d00c      	beq.n	9f92 <__aeabi_dmul+0x206>
    9f78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9f7c:	bf18      	it	ne
    9f7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9f82:	d1d1      	bne.n	9f28 <__aeabi_dmul+0x19c>
    9f84:	ea81 0103 	eor.w	r1, r1, r3
    9f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9f8c:	f04f 0000 	mov.w	r0, #0
    9f90:	bd70      	pop	{r4, r5, r6, pc}
    9f92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9f96:	bf06      	itte	eq
    9f98:	4610      	moveq	r0, r2
    9f9a:	4619      	moveq	r1, r3
    9f9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9fa0:	d019      	beq.n	9fd6 <__aeabi_dmul+0x24a>
    9fa2:	ea94 0f0c 	teq	r4, ip
    9fa6:	d102      	bne.n	9fae <__aeabi_dmul+0x222>
    9fa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    9fac:	d113      	bne.n	9fd6 <__aeabi_dmul+0x24a>
    9fae:	ea95 0f0c 	teq	r5, ip
    9fb2:	d105      	bne.n	9fc0 <__aeabi_dmul+0x234>
    9fb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    9fb8:	bf1c      	itt	ne
    9fba:	4610      	movne	r0, r2
    9fbc:	4619      	movne	r1, r3
    9fbe:	d10a      	bne.n	9fd6 <__aeabi_dmul+0x24a>
    9fc0:	ea81 0103 	eor.w	r1, r1, r3
    9fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9fc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9fd0:	f04f 0000 	mov.w	r0, #0
    9fd4:	bd70      	pop	{r4, r5, r6, pc}
    9fd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9fda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    9fde:	bd70      	pop	{r4, r5, r6, pc}

00009fe0 <__aeabi_ddiv>:
    9fe0:	b570      	push	{r4, r5, r6, lr}
    9fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    9fee:	bf1d      	ittte	ne
    9ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9ff4:	ea94 0f0c 	teqne	r4, ip
    9ff8:	ea95 0f0c 	teqne	r5, ip
    9ffc:	f000 f8a7 	bleq	a14e <__aeabi_ddiv+0x16e>
    a000:	eba4 0405 	sub.w	r4, r4, r5
    a004:	ea81 0e03 	eor.w	lr, r1, r3
    a008:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a00c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a010:	f000 8088 	beq.w	a124 <__aeabi_ddiv+0x144>
    a014:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a018:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a01c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    a020:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a024:	ea4f 2202 	mov.w	r2, r2, lsl #8
    a028:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    a02c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    a030:	ea4f 2600 	mov.w	r6, r0, lsl #8
    a034:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    a038:	429d      	cmp	r5, r3
    a03a:	bf08      	it	eq
    a03c:	4296      	cmpeq	r6, r2
    a03e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    a042:	f504 7440 	add.w	r4, r4, #768	; 0x300
    a046:	d202      	bcs.n	a04e <__aeabi_ddiv+0x6e>
    a048:	085b      	lsrs	r3, r3, #1
    a04a:	ea4f 0232 	mov.w	r2, r2, rrx
    a04e:	1ab6      	subs	r6, r6, r2
    a050:	eb65 0503 	sbc.w	r5, r5, r3
    a054:	085b      	lsrs	r3, r3, #1
    a056:	ea4f 0232 	mov.w	r2, r2, rrx
    a05a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a05e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    a062:	ebb6 0e02 	subs.w	lr, r6, r2
    a066:	eb75 0e03 	sbcs.w	lr, r5, r3
    a06a:	bf22      	ittt	cs
    a06c:	1ab6      	subcs	r6, r6, r2
    a06e:	4675      	movcs	r5, lr
    a070:	ea40 000c 	orrcs.w	r0, r0, ip
    a074:	085b      	lsrs	r3, r3, #1
    a076:	ea4f 0232 	mov.w	r2, r2, rrx
    a07a:	ebb6 0e02 	subs.w	lr, r6, r2
    a07e:	eb75 0e03 	sbcs.w	lr, r5, r3
    a082:	bf22      	ittt	cs
    a084:	1ab6      	subcs	r6, r6, r2
    a086:	4675      	movcs	r5, lr
    a088:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    a08c:	085b      	lsrs	r3, r3, #1
    a08e:	ea4f 0232 	mov.w	r2, r2, rrx
    a092:	ebb6 0e02 	subs.w	lr, r6, r2
    a096:	eb75 0e03 	sbcs.w	lr, r5, r3
    a09a:	bf22      	ittt	cs
    a09c:	1ab6      	subcs	r6, r6, r2
    a09e:	4675      	movcs	r5, lr
    a0a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    a0a4:	085b      	lsrs	r3, r3, #1
    a0a6:	ea4f 0232 	mov.w	r2, r2, rrx
    a0aa:	ebb6 0e02 	subs.w	lr, r6, r2
    a0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    a0b2:	bf22      	ittt	cs
    a0b4:	1ab6      	subcs	r6, r6, r2
    a0b6:	4675      	movcs	r5, lr
    a0b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    a0bc:	ea55 0e06 	orrs.w	lr, r5, r6
    a0c0:	d018      	beq.n	a0f4 <__aeabi_ddiv+0x114>
    a0c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    a0c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    a0ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
    a0ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    a0d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    a0d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    a0da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    a0de:	d1c0      	bne.n	a062 <__aeabi_ddiv+0x82>
    a0e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a0e4:	d10b      	bne.n	a0fe <__aeabi_ddiv+0x11e>
    a0e6:	ea41 0100 	orr.w	r1, r1, r0
    a0ea:	f04f 0000 	mov.w	r0, #0
    a0ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    a0f2:	e7b6      	b.n	a062 <__aeabi_ddiv+0x82>
    a0f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a0f8:	bf04      	itt	eq
    a0fa:	4301      	orreq	r1, r0
    a0fc:	2000      	moveq	r0, #0
    a0fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a102:	bf88      	it	hi
    a104:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a108:	f63f aeaf 	bhi.w	9e6a <__aeabi_dmul+0xde>
    a10c:	ebb5 0c03 	subs.w	ip, r5, r3
    a110:	bf04      	itt	eq
    a112:	ebb6 0c02 	subseq.w	ip, r6, r2
    a116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a11a:	f150 0000 	adcs.w	r0, r0, #0
    a11e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a122:	bd70      	pop	{r4, r5, r6, pc}
    a124:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    a128:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    a12c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    a130:	bfc2      	ittt	gt
    a132:	ebd4 050c 	rsbsgt	r5, r4, ip
    a136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a13a:	bd70      	popgt	{r4, r5, r6, pc}
    a13c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a140:	f04f 0e00 	mov.w	lr, #0
    a144:	3c01      	subs	r4, #1
    a146:	e690      	b.n	9e6a <__aeabi_dmul+0xde>
    a148:	ea45 0e06 	orr.w	lr, r5, r6
    a14c:	e68d      	b.n	9e6a <__aeabi_dmul+0xde>
    a14e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a152:	ea94 0f0c 	teq	r4, ip
    a156:	bf08      	it	eq
    a158:	ea95 0f0c 	teqeq	r5, ip
    a15c:	f43f af3b 	beq.w	9fd6 <__aeabi_dmul+0x24a>
    a160:	ea94 0f0c 	teq	r4, ip
    a164:	d10a      	bne.n	a17c <__aeabi_ddiv+0x19c>
    a166:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a16a:	f47f af34 	bne.w	9fd6 <__aeabi_dmul+0x24a>
    a16e:	ea95 0f0c 	teq	r5, ip
    a172:	f47f af25 	bne.w	9fc0 <__aeabi_dmul+0x234>
    a176:	4610      	mov	r0, r2
    a178:	4619      	mov	r1, r3
    a17a:	e72c      	b.n	9fd6 <__aeabi_dmul+0x24a>
    a17c:	ea95 0f0c 	teq	r5, ip
    a180:	d106      	bne.n	a190 <__aeabi_ddiv+0x1b0>
    a182:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a186:	f43f aefd 	beq.w	9f84 <__aeabi_dmul+0x1f8>
    a18a:	4610      	mov	r0, r2
    a18c:	4619      	mov	r1, r3
    a18e:	e722      	b.n	9fd6 <__aeabi_dmul+0x24a>
    a190:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a194:	bf18      	it	ne
    a196:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a19a:	f47f aec5 	bne.w	9f28 <__aeabi_dmul+0x19c>
    a19e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    a1a2:	f47f af0d 	bne.w	9fc0 <__aeabi_dmul+0x234>
    a1a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    a1aa:	f47f aeeb 	bne.w	9f84 <__aeabi_dmul+0x1f8>
    a1ae:	e712      	b.n	9fd6 <__aeabi_dmul+0x24a>

0000a1b0 <__aeabi_d2uiz>:
    a1b0:	004a      	lsls	r2, r1, #1
    a1b2:	d211      	bcs.n	a1d8 <__aeabi_d2uiz+0x28>
    a1b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    a1b8:	d211      	bcs.n	a1de <__aeabi_d2uiz+0x2e>
    a1ba:	d50d      	bpl.n	a1d8 <__aeabi_d2uiz+0x28>
    a1bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    a1c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    a1c4:	d40e      	bmi.n	a1e4 <__aeabi_d2uiz+0x34>
    a1c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a1ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a1ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    a1d2:	fa23 f002 	lsr.w	r0, r3, r2
    a1d6:	4770      	bx	lr
    a1d8:	f04f 0000 	mov.w	r0, #0
    a1dc:	4770      	bx	lr
    a1de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    a1e2:	d102      	bne.n	a1ea <__aeabi_d2uiz+0x3a>
    a1e4:	f04f 30ff 	mov.w	r0, #4294967295
    a1e8:	4770      	bx	lr
    a1ea:	f04f 0000 	mov.w	r0, #0
    a1ee:	4770      	bx	lr

0000a1f0 <__libc_init_array>:
    a1f0:	b570      	push	{r4, r5, r6, lr}
    a1f2:	4e0d      	ldr	r6, [pc, #52]	; (a228 <__libc_init_array+0x38>)
    a1f4:	4c0d      	ldr	r4, [pc, #52]	; (a22c <__libc_init_array+0x3c>)
    a1f6:	1ba4      	subs	r4, r4, r6
    a1f8:	10a4      	asrs	r4, r4, #2
    a1fa:	2500      	movs	r5, #0
    a1fc:	42a5      	cmp	r5, r4
    a1fe:	d109      	bne.n	a214 <__libc_init_array+0x24>
    a200:	4e0b      	ldr	r6, [pc, #44]	; (a230 <__libc_init_array+0x40>)
    a202:	4c0c      	ldr	r4, [pc, #48]	; (a234 <__libc_init_array+0x44>)
    a204:	f001 f898 	bl	b338 <_init>
    a208:	1ba4      	subs	r4, r4, r6
    a20a:	10a4      	asrs	r4, r4, #2
    a20c:	2500      	movs	r5, #0
    a20e:	42a5      	cmp	r5, r4
    a210:	d105      	bne.n	a21e <__libc_init_array+0x2e>
    a212:	bd70      	pop	{r4, r5, r6, pc}
    a214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a218:	4798      	blx	r3
    a21a:	3501      	adds	r5, #1
    a21c:	e7ee      	b.n	a1fc <__libc_init_array+0xc>
    a21e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a222:	4798      	blx	r3
    a224:	3501      	adds	r5, #1
    a226:	e7f2      	b.n	a20e <__libc_init_array+0x1e>
    a228:	0000b344 	.word	0x0000b344
    a22c:	0000b344 	.word	0x0000b344
    a230:	0000b344 	.word	0x0000b344
    a234:	0000b348 	.word	0x0000b348

0000a238 <malloc>:
    a238:	4b02      	ldr	r3, [pc, #8]	; (a244 <malloc+0xc>)
    a23a:	4601      	mov	r1, r0
    a23c:	6818      	ldr	r0, [r3, #0]
    a23e:	f000 b865 	b.w	a30c <_malloc_r>
    a242:	bf00      	nop
    a244:	20000518 	.word	0x20000518

0000a248 <memcpy>:
    a248:	b510      	push	{r4, lr}
    a24a:	1e43      	subs	r3, r0, #1
    a24c:	440a      	add	r2, r1
    a24e:	4291      	cmp	r1, r2
    a250:	d100      	bne.n	a254 <memcpy+0xc>
    a252:	bd10      	pop	{r4, pc}
    a254:	f811 4b01 	ldrb.w	r4, [r1], #1
    a258:	f803 4f01 	strb.w	r4, [r3, #1]!
    a25c:	e7f7      	b.n	a24e <memcpy+0x6>

0000a25e <memset>:
    a25e:	4402      	add	r2, r0
    a260:	4603      	mov	r3, r0
    a262:	4293      	cmp	r3, r2
    a264:	d100      	bne.n	a268 <memset+0xa>
    a266:	4770      	bx	lr
    a268:	f803 1b01 	strb.w	r1, [r3], #1
    a26c:	e7f9      	b.n	a262 <memset+0x4>
	...

0000a270 <_free_r>:
    a270:	b538      	push	{r3, r4, r5, lr}
    a272:	4605      	mov	r5, r0
    a274:	2900      	cmp	r1, #0
    a276:	d045      	beq.n	a304 <_free_r+0x94>
    a278:	f851 3c04 	ldr.w	r3, [r1, #-4]
    a27c:	1f0c      	subs	r4, r1, #4
    a27e:	2b00      	cmp	r3, #0
    a280:	bfb8      	it	lt
    a282:	18e4      	addlt	r4, r4, r3
    a284:	f000 f8dc 	bl	a440 <__malloc_lock>
    a288:	4a1f      	ldr	r2, [pc, #124]	; (a308 <_free_r+0x98>)
    a28a:	6813      	ldr	r3, [r2, #0]
    a28c:	4610      	mov	r0, r2
    a28e:	b933      	cbnz	r3, a29e <_free_r+0x2e>
    a290:	6063      	str	r3, [r4, #4]
    a292:	6014      	str	r4, [r2, #0]
    a294:	4628      	mov	r0, r5
    a296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a29a:	f000 b8d2 	b.w	a442 <__malloc_unlock>
    a29e:	42a3      	cmp	r3, r4
    a2a0:	d90c      	bls.n	a2bc <_free_r+0x4c>
    a2a2:	6821      	ldr	r1, [r4, #0]
    a2a4:	1862      	adds	r2, r4, r1
    a2a6:	4293      	cmp	r3, r2
    a2a8:	bf04      	itt	eq
    a2aa:	681a      	ldreq	r2, [r3, #0]
    a2ac:	685b      	ldreq	r3, [r3, #4]
    a2ae:	6063      	str	r3, [r4, #4]
    a2b0:	bf04      	itt	eq
    a2b2:	1852      	addeq	r2, r2, r1
    a2b4:	6022      	streq	r2, [r4, #0]
    a2b6:	6004      	str	r4, [r0, #0]
    a2b8:	e7ec      	b.n	a294 <_free_r+0x24>
    a2ba:	4613      	mov	r3, r2
    a2bc:	685a      	ldr	r2, [r3, #4]
    a2be:	b10a      	cbz	r2, a2c4 <_free_r+0x54>
    a2c0:	42a2      	cmp	r2, r4
    a2c2:	d9fa      	bls.n	a2ba <_free_r+0x4a>
    a2c4:	6819      	ldr	r1, [r3, #0]
    a2c6:	1858      	adds	r0, r3, r1
    a2c8:	42a0      	cmp	r0, r4
    a2ca:	d10b      	bne.n	a2e4 <_free_r+0x74>
    a2cc:	6820      	ldr	r0, [r4, #0]
    a2ce:	4401      	add	r1, r0
    a2d0:	1858      	adds	r0, r3, r1
    a2d2:	4282      	cmp	r2, r0
    a2d4:	6019      	str	r1, [r3, #0]
    a2d6:	d1dd      	bne.n	a294 <_free_r+0x24>
    a2d8:	6810      	ldr	r0, [r2, #0]
    a2da:	6852      	ldr	r2, [r2, #4]
    a2dc:	605a      	str	r2, [r3, #4]
    a2de:	4401      	add	r1, r0
    a2e0:	6019      	str	r1, [r3, #0]
    a2e2:	e7d7      	b.n	a294 <_free_r+0x24>
    a2e4:	d902      	bls.n	a2ec <_free_r+0x7c>
    a2e6:	230c      	movs	r3, #12
    a2e8:	602b      	str	r3, [r5, #0]
    a2ea:	e7d3      	b.n	a294 <_free_r+0x24>
    a2ec:	6820      	ldr	r0, [r4, #0]
    a2ee:	1821      	adds	r1, r4, r0
    a2f0:	428a      	cmp	r2, r1
    a2f2:	bf04      	itt	eq
    a2f4:	6811      	ldreq	r1, [r2, #0]
    a2f6:	6852      	ldreq	r2, [r2, #4]
    a2f8:	6062      	str	r2, [r4, #4]
    a2fa:	bf04      	itt	eq
    a2fc:	1809      	addeq	r1, r1, r0
    a2fe:	6021      	streq	r1, [r4, #0]
    a300:	605c      	str	r4, [r3, #4]
    a302:	e7c7      	b.n	a294 <_free_r+0x24>
    a304:	bd38      	pop	{r3, r4, r5, pc}
    a306:	bf00      	nop
    a308:	200012ac 	.word	0x200012ac

0000a30c <_malloc_r>:
    a30c:	b570      	push	{r4, r5, r6, lr}
    a30e:	1ccd      	adds	r5, r1, #3
    a310:	f025 0503 	bic.w	r5, r5, #3
    a314:	3508      	adds	r5, #8
    a316:	2d0c      	cmp	r5, #12
    a318:	bf38      	it	cc
    a31a:	250c      	movcc	r5, #12
    a31c:	2d00      	cmp	r5, #0
    a31e:	4606      	mov	r6, r0
    a320:	db01      	blt.n	a326 <_malloc_r+0x1a>
    a322:	42a9      	cmp	r1, r5
    a324:	d903      	bls.n	a32e <_malloc_r+0x22>
    a326:	230c      	movs	r3, #12
    a328:	6033      	str	r3, [r6, #0]
    a32a:	2000      	movs	r0, #0
    a32c:	bd70      	pop	{r4, r5, r6, pc}
    a32e:	f000 f887 	bl	a440 <__malloc_lock>
    a332:	4a23      	ldr	r2, [pc, #140]	; (a3c0 <_malloc_r+0xb4>)
    a334:	6814      	ldr	r4, [r2, #0]
    a336:	4621      	mov	r1, r4
    a338:	b991      	cbnz	r1, a360 <_malloc_r+0x54>
    a33a:	4c22      	ldr	r4, [pc, #136]	; (a3c4 <_malloc_r+0xb8>)
    a33c:	6823      	ldr	r3, [r4, #0]
    a33e:	b91b      	cbnz	r3, a348 <_malloc_r+0x3c>
    a340:	4630      	mov	r0, r6
    a342:	f000 f841 	bl	a3c8 <_sbrk_r>
    a346:	6020      	str	r0, [r4, #0]
    a348:	4629      	mov	r1, r5
    a34a:	4630      	mov	r0, r6
    a34c:	f000 f83c 	bl	a3c8 <_sbrk_r>
    a350:	1c43      	adds	r3, r0, #1
    a352:	d126      	bne.n	a3a2 <_malloc_r+0x96>
    a354:	230c      	movs	r3, #12
    a356:	6033      	str	r3, [r6, #0]
    a358:	4630      	mov	r0, r6
    a35a:	f000 f872 	bl	a442 <__malloc_unlock>
    a35e:	e7e4      	b.n	a32a <_malloc_r+0x1e>
    a360:	680b      	ldr	r3, [r1, #0]
    a362:	1b5b      	subs	r3, r3, r5
    a364:	d41a      	bmi.n	a39c <_malloc_r+0x90>
    a366:	2b0b      	cmp	r3, #11
    a368:	d90f      	bls.n	a38a <_malloc_r+0x7e>
    a36a:	600b      	str	r3, [r1, #0]
    a36c:	50cd      	str	r5, [r1, r3]
    a36e:	18cc      	adds	r4, r1, r3
    a370:	4630      	mov	r0, r6
    a372:	f000 f866 	bl	a442 <__malloc_unlock>
    a376:	f104 000b 	add.w	r0, r4, #11
    a37a:	1d23      	adds	r3, r4, #4
    a37c:	f020 0007 	bic.w	r0, r0, #7
    a380:	1ac3      	subs	r3, r0, r3
    a382:	d01b      	beq.n	a3bc <_malloc_r+0xb0>
    a384:	425a      	negs	r2, r3
    a386:	50e2      	str	r2, [r4, r3]
    a388:	bd70      	pop	{r4, r5, r6, pc}
    a38a:	428c      	cmp	r4, r1
    a38c:	bf0d      	iteet	eq
    a38e:	6863      	ldreq	r3, [r4, #4]
    a390:	684b      	ldrne	r3, [r1, #4]
    a392:	6063      	strne	r3, [r4, #4]
    a394:	6013      	streq	r3, [r2, #0]
    a396:	bf18      	it	ne
    a398:	460c      	movne	r4, r1
    a39a:	e7e9      	b.n	a370 <_malloc_r+0x64>
    a39c:	460c      	mov	r4, r1
    a39e:	6849      	ldr	r1, [r1, #4]
    a3a0:	e7ca      	b.n	a338 <_malloc_r+0x2c>
    a3a2:	1cc4      	adds	r4, r0, #3
    a3a4:	f024 0403 	bic.w	r4, r4, #3
    a3a8:	42a0      	cmp	r0, r4
    a3aa:	d005      	beq.n	a3b8 <_malloc_r+0xac>
    a3ac:	1a21      	subs	r1, r4, r0
    a3ae:	4630      	mov	r0, r6
    a3b0:	f000 f80a 	bl	a3c8 <_sbrk_r>
    a3b4:	3001      	adds	r0, #1
    a3b6:	d0cd      	beq.n	a354 <_malloc_r+0x48>
    a3b8:	6025      	str	r5, [r4, #0]
    a3ba:	e7d9      	b.n	a370 <_malloc_r+0x64>
    a3bc:	bd70      	pop	{r4, r5, r6, pc}
    a3be:	bf00      	nop
    a3c0:	200012ac 	.word	0x200012ac
    a3c4:	200012b0 	.word	0x200012b0

0000a3c8 <_sbrk_r>:
    a3c8:	b538      	push	{r3, r4, r5, lr}
    a3ca:	4c06      	ldr	r4, [pc, #24]	; (a3e4 <_sbrk_r+0x1c>)
    a3cc:	2300      	movs	r3, #0
    a3ce:	4605      	mov	r5, r0
    a3d0:	4608      	mov	r0, r1
    a3d2:	6023      	str	r3, [r4, #0]
    a3d4:	f7fa f970 	bl	46b8 <_sbrk>
    a3d8:	1c43      	adds	r3, r0, #1
    a3da:	d102      	bne.n	a3e2 <_sbrk_r+0x1a>
    a3dc:	6823      	ldr	r3, [r4, #0]
    a3de:	b103      	cbz	r3, a3e2 <_sbrk_r+0x1a>
    a3e0:	602b      	str	r3, [r5, #0]
    a3e2:	bd38      	pop	{r3, r4, r5, pc}
    a3e4:	20002c20 	.word	0x20002c20

0000a3e8 <siprintf>:
    a3e8:	b40e      	push	{r1, r2, r3}
    a3ea:	b500      	push	{lr}
    a3ec:	b09c      	sub	sp, #112	; 0x70
    a3ee:	f44f 7102 	mov.w	r1, #520	; 0x208
    a3f2:	ab1d      	add	r3, sp, #116	; 0x74
    a3f4:	f8ad 1014 	strh.w	r1, [sp, #20]
    a3f8:	9002      	str	r0, [sp, #8]
    a3fa:	9006      	str	r0, [sp, #24]
    a3fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a400:	480a      	ldr	r0, [pc, #40]	; (a42c <siprintf+0x44>)
    a402:	9104      	str	r1, [sp, #16]
    a404:	9107      	str	r1, [sp, #28]
    a406:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a40a:	f853 2b04 	ldr.w	r2, [r3], #4
    a40e:	f8ad 1016 	strh.w	r1, [sp, #22]
    a412:	6800      	ldr	r0, [r0, #0]
    a414:	9301      	str	r3, [sp, #4]
    a416:	a902      	add	r1, sp, #8
    a418:	f000 f870 	bl	a4fc <_svfiprintf_r>
    a41c:	9b02      	ldr	r3, [sp, #8]
    a41e:	2200      	movs	r2, #0
    a420:	701a      	strb	r2, [r3, #0]
    a422:	b01c      	add	sp, #112	; 0x70
    a424:	f85d eb04 	ldr.w	lr, [sp], #4
    a428:	b003      	add	sp, #12
    a42a:	4770      	bx	lr
    a42c:	20000518 	.word	0x20000518

0000a430 <strlen>:
    a430:	4603      	mov	r3, r0
    a432:	f813 2b01 	ldrb.w	r2, [r3], #1
    a436:	2a00      	cmp	r2, #0
    a438:	d1fb      	bne.n	a432 <strlen+0x2>
    a43a:	1a18      	subs	r0, r3, r0
    a43c:	3801      	subs	r0, #1
    a43e:	4770      	bx	lr

0000a440 <__malloc_lock>:
    a440:	4770      	bx	lr

0000a442 <__malloc_unlock>:
    a442:	4770      	bx	lr

0000a444 <__ssputs_r>:
    a444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a448:	688e      	ldr	r6, [r1, #8]
    a44a:	429e      	cmp	r6, r3
    a44c:	4682      	mov	sl, r0
    a44e:	460c      	mov	r4, r1
    a450:	4691      	mov	r9, r2
    a452:	4698      	mov	r8, r3
    a454:	d835      	bhi.n	a4c2 <__ssputs_r+0x7e>
    a456:	898a      	ldrh	r2, [r1, #12]
    a458:	f412 6f90 	tst.w	r2, #1152	; 0x480
    a45c:	d031      	beq.n	a4c2 <__ssputs_r+0x7e>
    a45e:	6825      	ldr	r5, [r4, #0]
    a460:	6909      	ldr	r1, [r1, #16]
    a462:	1a6f      	subs	r7, r5, r1
    a464:	6965      	ldr	r5, [r4, #20]
    a466:	2302      	movs	r3, #2
    a468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a46c:	fb95 f5f3 	sdiv	r5, r5, r3
    a470:	f108 0301 	add.w	r3, r8, #1
    a474:	443b      	add	r3, r7
    a476:	429d      	cmp	r5, r3
    a478:	bf38      	it	cc
    a47a:	461d      	movcc	r5, r3
    a47c:	0553      	lsls	r3, r2, #21
    a47e:	d531      	bpl.n	a4e4 <__ssputs_r+0xa0>
    a480:	4629      	mov	r1, r5
    a482:	f7ff ff43 	bl	a30c <_malloc_r>
    a486:	4606      	mov	r6, r0
    a488:	b950      	cbnz	r0, a4a0 <__ssputs_r+0x5c>
    a48a:	230c      	movs	r3, #12
    a48c:	f8ca 3000 	str.w	r3, [sl]
    a490:	89a3      	ldrh	r3, [r4, #12]
    a492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a496:	81a3      	strh	r3, [r4, #12]
    a498:	f04f 30ff 	mov.w	r0, #4294967295
    a49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4a0:	463a      	mov	r2, r7
    a4a2:	6921      	ldr	r1, [r4, #16]
    a4a4:	f7ff fed0 	bl	a248 <memcpy>
    a4a8:	89a3      	ldrh	r3, [r4, #12]
    a4aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    a4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a4b2:	81a3      	strh	r3, [r4, #12]
    a4b4:	6126      	str	r6, [r4, #16]
    a4b6:	6165      	str	r5, [r4, #20]
    a4b8:	443e      	add	r6, r7
    a4ba:	1bed      	subs	r5, r5, r7
    a4bc:	6026      	str	r6, [r4, #0]
    a4be:	60a5      	str	r5, [r4, #8]
    a4c0:	4646      	mov	r6, r8
    a4c2:	4546      	cmp	r6, r8
    a4c4:	bf28      	it	cs
    a4c6:	4646      	movcs	r6, r8
    a4c8:	4632      	mov	r2, r6
    a4ca:	4649      	mov	r1, r9
    a4cc:	6820      	ldr	r0, [r4, #0]
    a4ce:	f000 faef 	bl	aab0 <memmove>
    a4d2:	68a3      	ldr	r3, [r4, #8]
    a4d4:	1b9b      	subs	r3, r3, r6
    a4d6:	60a3      	str	r3, [r4, #8]
    a4d8:	6823      	ldr	r3, [r4, #0]
    a4da:	441e      	add	r6, r3
    a4dc:	6026      	str	r6, [r4, #0]
    a4de:	2000      	movs	r0, #0
    a4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4e4:	462a      	mov	r2, r5
    a4e6:	f000 fafd 	bl	aae4 <_realloc_r>
    a4ea:	4606      	mov	r6, r0
    a4ec:	2800      	cmp	r0, #0
    a4ee:	d1e1      	bne.n	a4b4 <__ssputs_r+0x70>
    a4f0:	6921      	ldr	r1, [r4, #16]
    a4f2:	4650      	mov	r0, sl
    a4f4:	f7ff febc 	bl	a270 <_free_r>
    a4f8:	e7c7      	b.n	a48a <__ssputs_r+0x46>
	...

0000a4fc <_svfiprintf_r>:
    a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a500:	b09d      	sub	sp, #116	; 0x74
    a502:	4680      	mov	r8, r0
    a504:	9303      	str	r3, [sp, #12]
    a506:	898b      	ldrh	r3, [r1, #12]
    a508:	061c      	lsls	r4, r3, #24
    a50a:	460d      	mov	r5, r1
    a50c:	4616      	mov	r6, r2
    a50e:	d50f      	bpl.n	a530 <_svfiprintf_r+0x34>
    a510:	690b      	ldr	r3, [r1, #16]
    a512:	b96b      	cbnz	r3, a530 <_svfiprintf_r+0x34>
    a514:	2140      	movs	r1, #64	; 0x40
    a516:	f7ff fef9 	bl	a30c <_malloc_r>
    a51a:	6028      	str	r0, [r5, #0]
    a51c:	6128      	str	r0, [r5, #16]
    a51e:	b928      	cbnz	r0, a52c <_svfiprintf_r+0x30>
    a520:	230c      	movs	r3, #12
    a522:	f8c8 3000 	str.w	r3, [r8]
    a526:	f04f 30ff 	mov.w	r0, #4294967295
    a52a:	e0c5      	b.n	a6b8 <_svfiprintf_r+0x1bc>
    a52c:	2340      	movs	r3, #64	; 0x40
    a52e:	616b      	str	r3, [r5, #20]
    a530:	2300      	movs	r3, #0
    a532:	9309      	str	r3, [sp, #36]	; 0x24
    a534:	2320      	movs	r3, #32
    a536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a53a:	2330      	movs	r3, #48	; 0x30
    a53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a540:	f04f 0b01 	mov.w	fp, #1
    a544:	4637      	mov	r7, r6
    a546:	463c      	mov	r4, r7
    a548:	f814 3b01 	ldrb.w	r3, [r4], #1
    a54c:	2b00      	cmp	r3, #0
    a54e:	d13c      	bne.n	a5ca <_svfiprintf_r+0xce>
    a550:	ebb7 0a06 	subs.w	sl, r7, r6
    a554:	d00b      	beq.n	a56e <_svfiprintf_r+0x72>
    a556:	4653      	mov	r3, sl
    a558:	4632      	mov	r2, r6
    a55a:	4629      	mov	r1, r5
    a55c:	4640      	mov	r0, r8
    a55e:	f7ff ff71 	bl	a444 <__ssputs_r>
    a562:	3001      	adds	r0, #1
    a564:	f000 80a3 	beq.w	a6ae <_svfiprintf_r+0x1b2>
    a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a56a:	4453      	add	r3, sl
    a56c:	9309      	str	r3, [sp, #36]	; 0x24
    a56e:	783b      	ldrb	r3, [r7, #0]
    a570:	2b00      	cmp	r3, #0
    a572:	f000 809c 	beq.w	a6ae <_svfiprintf_r+0x1b2>
    a576:	2300      	movs	r3, #0
    a578:	f04f 32ff 	mov.w	r2, #4294967295
    a57c:	9304      	str	r3, [sp, #16]
    a57e:	9307      	str	r3, [sp, #28]
    a580:	9205      	str	r2, [sp, #20]
    a582:	9306      	str	r3, [sp, #24]
    a584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a588:	931a      	str	r3, [sp, #104]	; 0x68
    a58a:	2205      	movs	r2, #5
    a58c:	7821      	ldrb	r1, [r4, #0]
    a58e:	4850      	ldr	r0, [pc, #320]	; (a6d0 <_svfiprintf_r+0x1d4>)
    a590:	f000 fa3e 	bl	aa10 <memchr>
    a594:	1c67      	adds	r7, r4, #1
    a596:	9b04      	ldr	r3, [sp, #16]
    a598:	b9d8      	cbnz	r0, a5d2 <_svfiprintf_r+0xd6>
    a59a:	06d9      	lsls	r1, r3, #27
    a59c:	bf44      	itt	mi
    a59e:	2220      	movmi	r2, #32
    a5a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a5a4:	071a      	lsls	r2, r3, #28
    a5a6:	bf44      	itt	mi
    a5a8:	222b      	movmi	r2, #43	; 0x2b
    a5aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a5ae:	7822      	ldrb	r2, [r4, #0]
    a5b0:	2a2a      	cmp	r2, #42	; 0x2a
    a5b2:	d016      	beq.n	a5e2 <_svfiprintf_r+0xe6>
    a5b4:	9a07      	ldr	r2, [sp, #28]
    a5b6:	2100      	movs	r1, #0
    a5b8:	200a      	movs	r0, #10
    a5ba:	4627      	mov	r7, r4
    a5bc:	3401      	adds	r4, #1
    a5be:	783b      	ldrb	r3, [r7, #0]
    a5c0:	3b30      	subs	r3, #48	; 0x30
    a5c2:	2b09      	cmp	r3, #9
    a5c4:	d951      	bls.n	a66a <_svfiprintf_r+0x16e>
    a5c6:	b1c9      	cbz	r1, a5fc <_svfiprintf_r+0x100>
    a5c8:	e011      	b.n	a5ee <_svfiprintf_r+0xf2>
    a5ca:	2b25      	cmp	r3, #37	; 0x25
    a5cc:	d0c0      	beq.n	a550 <_svfiprintf_r+0x54>
    a5ce:	4627      	mov	r7, r4
    a5d0:	e7b9      	b.n	a546 <_svfiprintf_r+0x4a>
    a5d2:	4a3f      	ldr	r2, [pc, #252]	; (a6d0 <_svfiprintf_r+0x1d4>)
    a5d4:	1a80      	subs	r0, r0, r2
    a5d6:	fa0b f000 	lsl.w	r0, fp, r0
    a5da:	4318      	orrs	r0, r3
    a5dc:	9004      	str	r0, [sp, #16]
    a5de:	463c      	mov	r4, r7
    a5e0:	e7d3      	b.n	a58a <_svfiprintf_r+0x8e>
    a5e2:	9a03      	ldr	r2, [sp, #12]
    a5e4:	1d11      	adds	r1, r2, #4
    a5e6:	6812      	ldr	r2, [r2, #0]
    a5e8:	9103      	str	r1, [sp, #12]
    a5ea:	2a00      	cmp	r2, #0
    a5ec:	db01      	blt.n	a5f2 <_svfiprintf_r+0xf6>
    a5ee:	9207      	str	r2, [sp, #28]
    a5f0:	e004      	b.n	a5fc <_svfiprintf_r+0x100>
    a5f2:	4252      	negs	r2, r2
    a5f4:	f043 0302 	orr.w	r3, r3, #2
    a5f8:	9207      	str	r2, [sp, #28]
    a5fa:	9304      	str	r3, [sp, #16]
    a5fc:	783b      	ldrb	r3, [r7, #0]
    a5fe:	2b2e      	cmp	r3, #46	; 0x2e
    a600:	d10e      	bne.n	a620 <_svfiprintf_r+0x124>
    a602:	787b      	ldrb	r3, [r7, #1]
    a604:	2b2a      	cmp	r3, #42	; 0x2a
    a606:	f107 0101 	add.w	r1, r7, #1
    a60a:	d132      	bne.n	a672 <_svfiprintf_r+0x176>
    a60c:	9b03      	ldr	r3, [sp, #12]
    a60e:	1d1a      	adds	r2, r3, #4
    a610:	681b      	ldr	r3, [r3, #0]
    a612:	9203      	str	r2, [sp, #12]
    a614:	2b00      	cmp	r3, #0
    a616:	bfb8      	it	lt
    a618:	f04f 33ff 	movlt.w	r3, #4294967295
    a61c:	3702      	adds	r7, #2
    a61e:	9305      	str	r3, [sp, #20]
    a620:	4c2c      	ldr	r4, [pc, #176]	; (a6d4 <_svfiprintf_r+0x1d8>)
    a622:	7839      	ldrb	r1, [r7, #0]
    a624:	2203      	movs	r2, #3
    a626:	4620      	mov	r0, r4
    a628:	f000 f9f2 	bl	aa10 <memchr>
    a62c:	b138      	cbz	r0, a63e <_svfiprintf_r+0x142>
    a62e:	2340      	movs	r3, #64	; 0x40
    a630:	1b00      	subs	r0, r0, r4
    a632:	fa03 f000 	lsl.w	r0, r3, r0
    a636:	9b04      	ldr	r3, [sp, #16]
    a638:	4303      	orrs	r3, r0
    a63a:	9304      	str	r3, [sp, #16]
    a63c:	3701      	adds	r7, #1
    a63e:	7839      	ldrb	r1, [r7, #0]
    a640:	4825      	ldr	r0, [pc, #148]	; (a6d8 <_svfiprintf_r+0x1dc>)
    a642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a646:	2206      	movs	r2, #6
    a648:	1c7e      	adds	r6, r7, #1
    a64a:	f000 f9e1 	bl	aa10 <memchr>
    a64e:	2800      	cmp	r0, #0
    a650:	d035      	beq.n	a6be <_svfiprintf_r+0x1c2>
    a652:	4b22      	ldr	r3, [pc, #136]	; (a6dc <_svfiprintf_r+0x1e0>)
    a654:	b9fb      	cbnz	r3, a696 <_svfiprintf_r+0x19a>
    a656:	9b03      	ldr	r3, [sp, #12]
    a658:	3307      	adds	r3, #7
    a65a:	f023 0307 	bic.w	r3, r3, #7
    a65e:	3308      	adds	r3, #8
    a660:	9303      	str	r3, [sp, #12]
    a662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a664:	444b      	add	r3, r9
    a666:	9309      	str	r3, [sp, #36]	; 0x24
    a668:	e76c      	b.n	a544 <_svfiprintf_r+0x48>
    a66a:	fb00 3202 	mla	r2, r0, r2, r3
    a66e:	2101      	movs	r1, #1
    a670:	e7a3      	b.n	a5ba <_svfiprintf_r+0xbe>
    a672:	2300      	movs	r3, #0
    a674:	9305      	str	r3, [sp, #20]
    a676:	4618      	mov	r0, r3
    a678:	240a      	movs	r4, #10
    a67a:	460f      	mov	r7, r1
    a67c:	3101      	adds	r1, #1
    a67e:	783a      	ldrb	r2, [r7, #0]
    a680:	3a30      	subs	r2, #48	; 0x30
    a682:	2a09      	cmp	r2, #9
    a684:	d903      	bls.n	a68e <_svfiprintf_r+0x192>
    a686:	2b00      	cmp	r3, #0
    a688:	d0ca      	beq.n	a620 <_svfiprintf_r+0x124>
    a68a:	9005      	str	r0, [sp, #20]
    a68c:	e7c8      	b.n	a620 <_svfiprintf_r+0x124>
    a68e:	fb04 2000 	mla	r0, r4, r0, r2
    a692:	2301      	movs	r3, #1
    a694:	e7f1      	b.n	a67a <_svfiprintf_r+0x17e>
    a696:	ab03      	add	r3, sp, #12
    a698:	9300      	str	r3, [sp, #0]
    a69a:	462a      	mov	r2, r5
    a69c:	4b10      	ldr	r3, [pc, #64]	; (a6e0 <_svfiprintf_r+0x1e4>)
    a69e:	a904      	add	r1, sp, #16
    a6a0:	4640      	mov	r0, r8
    a6a2:	f3af 8000 	nop.w
    a6a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    a6aa:	4681      	mov	r9, r0
    a6ac:	d1d9      	bne.n	a662 <_svfiprintf_r+0x166>
    a6ae:	89ab      	ldrh	r3, [r5, #12]
    a6b0:	065b      	lsls	r3, r3, #25
    a6b2:	f53f af38 	bmi.w	a526 <_svfiprintf_r+0x2a>
    a6b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    a6b8:	b01d      	add	sp, #116	; 0x74
    a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6be:	ab03      	add	r3, sp, #12
    a6c0:	9300      	str	r3, [sp, #0]
    a6c2:	462a      	mov	r2, r5
    a6c4:	4b06      	ldr	r3, [pc, #24]	; (a6e0 <_svfiprintf_r+0x1e4>)
    a6c6:	a904      	add	r1, sp, #16
    a6c8:	4640      	mov	r0, r8
    a6ca:	f000 f881 	bl	a7d0 <_printf_i>
    a6ce:	e7ea      	b.n	a6a6 <_svfiprintf_r+0x1aa>
    a6d0:	0000b304 	.word	0x0000b304
    a6d4:	0000b30a 	.word	0x0000b30a
    a6d8:	0000b30e 	.word	0x0000b30e
    a6dc:	00000000 	.word	0x00000000
    a6e0:	0000a445 	.word	0x0000a445

0000a6e4 <_printf_common>:
    a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6e8:	4691      	mov	r9, r2
    a6ea:	461f      	mov	r7, r3
    a6ec:	688a      	ldr	r2, [r1, #8]
    a6ee:	690b      	ldr	r3, [r1, #16]
    a6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a6f4:	4293      	cmp	r3, r2
    a6f6:	bfb8      	it	lt
    a6f8:	4613      	movlt	r3, r2
    a6fa:	f8c9 3000 	str.w	r3, [r9]
    a6fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    a702:	4606      	mov	r6, r0
    a704:	460c      	mov	r4, r1
    a706:	b112      	cbz	r2, a70e <_printf_common+0x2a>
    a708:	3301      	adds	r3, #1
    a70a:	f8c9 3000 	str.w	r3, [r9]
    a70e:	6823      	ldr	r3, [r4, #0]
    a710:	0699      	lsls	r1, r3, #26
    a712:	bf42      	ittt	mi
    a714:	f8d9 3000 	ldrmi.w	r3, [r9]
    a718:	3302      	addmi	r3, #2
    a71a:	f8c9 3000 	strmi.w	r3, [r9]
    a71e:	6825      	ldr	r5, [r4, #0]
    a720:	f015 0506 	ands.w	r5, r5, #6
    a724:	d107      	bne.n	a736 <_printf_common+0x52>
    a726:	f104 0a19 	add.w	sl, r4, #25
    a72a:	68e3      	ldr	r3, [r4, #12]
    a72c:	f8d9 2000 	ldr.w	r2, [r9]
    a730:	1a9b      	subs	r3, r3, r2
    a732:	429d      	cmp	r5, r3
    a734:	db29      	blt.n	a78a <_printf_common+0xa6>
    a736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    a73a:	6822      	ldr	r2, [r4, #0]
    a73c:	3300      	adds	r3, #0
    a73e:	bf18      	it	ne
    a740:	2301      	movne	r3, #1
    a742:	0692      	lsls	r2, r2, #26
    a744:	d42e      	bmi.n	a7a4 <_printf_common+0xc0>
    a746:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a74a:	4639      	mov	r1, r7
    a74c:	4630      	mov	r0, r6
    a74e:	47c0      	blx	r8
    a750:	3001      	adds	r0, #1
    a752:	d021      	beq.n	a798 <_printf_common+0xb4>
    a754:	6823      	ldr	r3, [r4, #0]
    a756:	68e5      	ldr	r5, [r4, #12]
    a758:	f8d9 2000 	ldr.w	r2, [r9]
    a75c:	f003 0306 	and.w	r3, r3, #6
    a760:	2b04      	cmp	r3, #4
    a762:	bf08      	it	eq
    a764:	1aad      	subeq	r5, r5, r2
    a766:	68a3      	ldr	r3, [r4, #8]
    a768:	6922      	ldr	r2, [r4, #16]
    a76a:	bf0c      	ite	eq
    a76c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    a770:	2500      	movne	r5, #0
    a772:	4293      	cmp	r3, r2
    a774:	bfc4      	itt	gt
    a776:	1a9b      	subgt	r3, r3, r2
    a778:	18ed      	addgt	r5, r5, r3
    a77a:	f04f 0900 	mov.w	r9, #0
    a77e:	341a      	adds	r4, #26
    a780:	454d      	cmp	r5, r9
    a782:	d11b      	bne.n	a7bc <_printf_common+0xd8>
    a784:	2000      	movs	r0, #0
    a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a78a:	2301      	movs	r3, #1
    a78c:	4652      	mov	r2, sl
    a78e:	4639      	mov	r1, r7
    a790:	4630      	mov	r0, r6
    a792:	47c0      	blx	r8
    a794:	3001      	adds	r0, #1
    a796:	d103      	bne.n	a7a0 <_printf_common+0xbc>
    a798:	f04f 30ff 	mov.w	r0, #4294967295
    a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7a0:	3501      	adds	r5, #1
    a7a2:	e7c2      	b.n	a72a <_printf_common+0x46>
    a7a4:	18e1      	adds	r1, r4, r3
    a7a6:	1c5a      	adds	r2, r3, #1
    a7a8:	2030      	movs	r0, #48	; 0x30
    a7aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    a7ae:	4422      	add	r2, r4
    a7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    a7b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    a7b8:	3302      	adds	r3, #2
    a7ba:	e7c4      	b.n	a746 <_printf_common+0x62>
    a7bc:	2301      	movs	r3, #1
    a7be:	4622      	mov	r2, r4
    a7c0:	4639      	mov	r1, r7
    a7c2:	4630      	mov	r0, r6
    a7c4:	47c0      	blx	r8
    a7c6:	3001      	adds	r0, #1
    a7c8:	d0e6      	beq.n	a798 <_printf_common+0xb4>
    a7ca:	f109 0901 	add.w	r9, r9, #1
    a7ce:	e7d7      	b.n	a780 <_printf_common+0x9c>

0000a7d0 <_printf_i>:
    a7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a7d4:	4617      	mov	r7, r2
    a7d6:	7e0a      	ldrb	r2, [r1, #24]
    a7d8:	b085      	sub	sp, #20
    a7da:	2a6e      	cmp	r2, #110	; 0x6e
    a7dc:	4698      	mov	r8, r3
    a7de:	4606      	mov	r6, r0
    a7e0:	460c      	mov	r4, r1
    a7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    a7e8:	f000 80bc 	beq.w	a964 <_printf_i+0x194>
    a7ec:	d81a      	bhi.n	a824 <_printf_i+0x54>
    a7ee:	2a63      	cmp	r2, #99	; 0x63
    a7f0:	d02e      	beq.n	a850 <_printf_i+0x80>
    a7f2:	d80a      	bhi.n	a80a <_printf_i+0x3a>
    a7f4:	2a00      	cmp	r2, #0
    a7f6:	f000 80c8 	beq.w	a98a <_printf_i+0x1ba>
    a7fa:	2a58      	cmp	r2, #88	; 0x58
    a7fc:	f000 808a 	beq.w	a914 <_printf_i+0x144>
    a800:	f104 0542 	add.w	r5, r4, #66	; 0x42
    a804:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    a808:	e02a      	b.n	a860 <_printf_i+0x90>
    a80a:	2a64      	cmp	r2, #100	; 0x64
    a80c:	d001      	beq.n	a812 <_printf_i+0x42>
    a80e:	2a69      	cmp	r2, #105	; 0x69
    a810:	d1f6      	bne.n	a800 <_printf_i+0x30>
    a812:	6821      	ldr	r1, [r4, #0]
    a814:	681a      	ldr	r2, [r3, #0]
    a816:	f011 0f80 	tst.w	r1, #128	; 0x80
    a81a:	d023      	beq.n	a864 <_printf_i+0x94>
    a81c:	1d11      	adds	r1, r2, #4
    a81e:	6019      	str	r1, [r3, #0]
    a820:	6813      	ldr	r3, [r2, #0]
    a822:	e027      	b.n	a874 <_printf_i+0xa4>
    a824:	2a73      	cmp	r2, #115	; 0x73
    a826:	f000 80b4 	beq.w	a992 <_printf_i+0x1c2>
    a82a:	d808      	bhi.n	a83e <_printf_i+0x6e>
    a82c:	2a6f      	cmp	r2, #111	; 0x6f
    a82e:	d02a      	beq.n	a886 <_printf_i+0xb6>
    a830:	2a70      	cmp	r2, #112	; 0x70
    a832:	d1e5      	bne.n	a800 <_printf_i+0x30>
    a834:	680a      	ldr	r2, [r1, #0]
    a836:	f042 0220 	orr.w	r2, r2, #32
    a83a:	600a      	str	r2, [r1, #0]
    a83c:	e003      	b.n	a846 <_printf_i+0x76>
    a83e:	2a75      	cmp	r2, #117	; 0x75
    a840:	d021      	beq.n	a886 <_printf_i+0xb6>
    a842:	2a78      	cmp	r2, #120	; 0x78
    a844:	d1dc      	bne.n	a800 <_printf_i+0x30>
    a846:	2278      	movs	r2, #120	; 0x78
    a848:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    a84c:	496e      	ldr	r1, [pc, #440]	; (aa08 <_printf_i+0x238>)
    a84e:	e064      	b.n	a91a <_printf_i+0x14a>
    a850:	681a      	ldr	r2, [r3, #0]
    a852:	f101 0542 	add.w	r5, r1, #66	; 0x42
    a856:	1d11      	adds	r1, r2, #4
    a858:	6019      	str	r1, [r3, #0]
    a85a:	6813      	ldr	r3, [r2, #0]
    a85c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    a860:	2301      	movs	r3, #1
    a862:	e0a3      	b.n	a9ac <_printf_i+0x1dc>
    a864:	f011 0f40 	tst.w	r1, #64	; 0x40
    a868:	f102 0104 	add.w	r1, r2, #4
    a86c:	6019      	str	r1, [r3, #0]
    a86e:	d0d7      	beq.n	a820 <_printf_i+0x50>
    a870:	f9b2 3000 	ldrsh.w	r3, [r2]
    a874:	2b00      	cmp	r3, #0
    a876:	da03      	bge.n	a880 <_printf_i+0xb0>
    a878:	222d      	movs	r2, #45	; 0x2d
    a87a:	425b      	negs	r3, r3
    a87c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    a880:	4962      	ldr	r1, [pc, #392]	; (aa0c <_printf_i+0x23c>)
    a882:	220a      	movs	r2, #10
    a884:	e017      	b.n	a8b6 <_printf_i+0xe6>
    a886:	6820      	ldr	r0, [r4, #0]
    a888:	6819      	ldr	r1, [r3, #0]
    a88a:	f010 0f80 	tst.w	r0, #128	; 0x80
    a88e:	d003      	beq.n	a898 <_printf_i+0xc8>
    a890:	1d08      	adds	r0, r1, #4
    a892:	6018      	str	r0, [r3, #0]
    a894:	680b      	ldr	r3, [r1, #0]
    a896:	e006      	b.n	a8a6 <_printf_i+0xd6>
    a898:	f010 0f40 	tst.w	r0, #64	; 0x40
    a89c:	f101 0004 	add.w	r0, r1, #4
    a8a0:	6018      	str	r0, [r3, #0]
    a8a2:	d0f7      	beq.n	a894 <_printf_i+0xc4>
    a8a4:	880b      	ldrh	r3, [r1, #0]
    a8a6:	4959      	ldr	r1, [pc, #356]	; (aa0c <_printf_i+0x23c>)
    a8a8:	2a6f      	cmp	r2, #111	; 0x6f
    a8aa:	bf14      	ite	ne
    a8ac:	220a      	movne	r2, #10
    a8ae:	2208      	moveq	r2, #8
    a8b0:	2000      	movs	r0, #0
    a8b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a8b6:	6865      	ldr	r5, [r4, #4]
    a8b8:	60a5      	str	r5, [r4, #8]
    a8ba:	2d00      	cmp	r5, #0
    a8bc:	f2c0 809c 	blt.w	a9f8 <_printf_i+0x228>
    a8c0:	6820      	ldr	r0, [r4, #0]
    a8c2:	f020 0004 	bic.w	r0, r0, #4
    a8c6:	6020      	str	r0, [r4, #0]
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d13f      	bne.n	a94c <_printf_i+0x17c>
    a8cc:	2d00      	cmp	r5, #0
    a8ce:	f040 8095 	bne.w	a9fc <_printf_i+0x22c>
    a8d2:	4675      	mov	r5, lr
    a8d4:	2a08      	cmp	r2, #8
    a8d6:	d10b      	bne.n	a8f0 <_printf_i+0x120>
    a8d8:	6823      	ldr	r3, [r4, #0]
    a8da:	07da      	lsls	r2, r3, #31
    a8dc:	d508      	bpl.n	a8f0 <_printf_i+0x120>
    a8de:	6923      	ldr	r3, [r4, #16]
    a8e0:	6862      	ldr	r2, [r4, #4]
    a8e2:	429a      	cmp	r2, r3
    a8e4:	bfde      	ittt	le
    a8e6:	2330      	movle	r3, #48	; 0x30
    a8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
    a8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
    a8f0:	ebae 0305 	sub.w	r3, lr, r5
    a8f4:	6123      	str	r3, [r4, #16]
    a8f6:	f8cd 8000 	str.w	r8, [sp]
    a8fa:	463b      	mov	r3, r7
    a8fc:	aa03      	add	r2, sp, #12
    a8fe:	4621      	mov	r1, r4
    a900:	4630      	mov	r0, r6
    a902:	f7ff feef 	bl	a6e4 <_printf_common>
    a906:	3001      	adds	r0, #1
    a908:	d155      	bne.n	a9b6 <_printf_i+0x1e6>
    a90a:	f04f 30ff 	mov.w	r0, #4294967295
    a90e:	b005      	add	sp, #20
    a910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a914:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    a918:	493c      	ldr	r1, [pc, #240]	; (aa0c <_printf_i+0x23c>)
    a91a:	6822      	ldr	r2, [r4, #0]
    a91c:	6818      	ldr	r0, [r3, #0]
    a91e:	f012 0f80 	tst.w	r2, #128	; 0x80
    a922:	f100 0504 	add.w	r5, r0, #4
    a926:	601d      	str	r5, [r3, #0]
    a928:	d001      	beq.n	a92e <_printf_i+0x15e>
    a92a:	6803      	ldr	r3, [r0, #0]
    a92c:	e002      	b.n	a934 <_printf_i+0x164>
    a92e:	0655      	lsls	r5, r2, #25
    a930:	d5fb      	bpl.n	a92a <_printf_i+0x15a>
    a932:	8803      	ldrh	r3, [r0, #0]
    a934:	07d0      	lsls	r0, r2, #31
    a936:	bf44      	itt	mi
    a938:	f042 0220 	orrmi.w	r2, r2, #32
    a93c:	6022      	strmi	r2, [r4, #0]
    a93e:	b91b      	cbnz	r3, a948 <_printf_i+0x178>
    a940:	6822      	ldr	r2, [r4, #0]
    a942:	f022 0220 	bic.w	r2, r2, #32
    a946:	6022      	str	r2, [r4, #0]
    a948:	2210      	movs	r2, #16
    a94a:	e7b1      	b.n	a8b0 <_printf_i+0xe0>
    a94c:	4675      	mov	r5, lr
    a94e:	fbb3 f0f2 	udiv	r0, r3, r2
    a952:	fb02 3310 	mls	r3, r2, r0, r3
    a956:	5ccb      	ldrb	r3, [r1, r3]
    a958:	f805 3d01 	strb.w	r3, [r5, #-1]!
    a95c:	4603      	mov	r3, r0
    a95e:	2800      	cmp	r0, #0
    a960:	d1f5      	bne.n	a94e <_printf_i+0x17e>
    a962:	e7b7      	b.n	a8d4 <_printf_i+0x104>
    a964:	6808      	ldr	r0, [r1, #0]
    a966:	681a      	ldr	r2, [r3, #0]
    a968:	6949      	ldr	r1, [r1, #20]
    a96a:	f010 0f80 	tst.w	r0, #128	; 0x80
    a96e:	d004      	beq.n	a97a <_printf_i+0x1aa>
    a970:	1d10      	adds	r0, r2, #4
    a972:	6018      	str	r0, [r3, #0]
    a974:	6813      	ldr	r3, [r2, #0]
    a976:	6019      	str	r1, [r3, #0]
    a978:	e007      	b.n	a98a <_printf_i+0x1ba>
    a97a:	f010 0f40 	tst.w	r0, #64	; 0x40
    a97e:	f102 0004 	add.w	r0, r2, #4
    a982:	6018      	str	r0, [r3, #0]
    a984:	6813      	ldr	r3, [r2, #0]
    a986:	d0f6      	beq.n	a976 <_printf_i+0x1a6>
    a988:	8019      	strh	r1, [r3, #0]
    a98a:	2300      	movs	r3, #0
    a98c:	6123      	str	r3, [r4, #16]
    a98e:	4675      	mov	r5, lr
    a990:	e7b1      	b.n	a8f6 <_printf_i+0x126>
    a992:	681a      	ldr	r2, [r3, #0]
    a994:	1d11      	adds	r1, r2, #4
    a996:	6019      	str	r1, [r3, #0]
    a998:	6815      	ldr	r5, [r2, #0]
    a99a:	6862      	ldr	r2, [r4, #4]
    a99c:	2100      	movs	r1, #0
    a99e:	4628      	mov	r0, r5
    a9a0:	f000 f836 	bl	aa10 <memchr>
    a9a4:	b108      	cbz	r0, a9aa <_printf_i+0x1da>
    a9a6:	1b40      	subs	r0, r0, r5
    a9a8:	6060      	str	r0, [r4, #4]
    a9aa:	6863      	ldr	r3, [r4, #4]
    a9ac:	6123      	str	r3, [r4, #16]
    a9ae:	2300      	movs	r3, #0
    a9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    a9b4:	e79f      	b.n	a8f6 <_printf_i+0x126>
    a9b6:	6923      	ldr	r3, [r4, #16]
    a9b8:	462a      	mov	r2, r5
    a9ba:	4639      	mov	r1, r7
    a9bc:	4630      	mov	r0, r6
    a9be:	47c0      	blx	r8
    a9c0:	3001      	adds	r0, #1
    a9c2:	d0a2      	beq.n	a90a <_printf_i+0x13a>
    a9c4:	6823      	ldr	r3, [r4, #0]
    a9c6:	079b      	lsls	r3, r3, #30
    a9c8:	d507      	bpl.n	a9da <_printf_i+0x20a>
    a9ca:	2500      	movs	r5, #0
    a9cc:	f104 0919 	add.w	r9, r4, #25
    a9d0:	68e3      	ldr	r3, [r4, #12]
    a9d2:	9a03      	ldr	r2, [sp, #12]
    a9d4:	1a9b      	subs	r3, r3, r2
    a9d6:	429d      	cmp	r5, r3
    a9d8:	db05      	blt.n	a9e6 <_printf_i+0x216>
    a9da:	68e0      	ldr	r0, [r4, #12]
    a9dc:	9b03      	ldr	r3, [sp, #12]
    a9de:	4298      	cmp	r0, r3
    a9e0:	bfb8      	it	lt
    a9e2:	4618      	movlt	r0, r3
    a9e4:	e793      	b.n	a90e <_printf_i+0x13e>
    a9e6:	2301      	movs	r3, #1
    a9e8:	464a      	mov	r2, r9
    a9ea:	4639      	mov	r1, r7
    a9ec:	4630      	mov	r0, r6
    a9ee:	47c0      	blx	r8
    a9f0:	3001      	adds	r0, #1
    a9f2:	d08a      	beq.n	a90a <_printf_i+0x13a>
    a9f4:	3501      	adds	r5, #1
    a9f6:	e7eb      	b.n	a9d0 <_printf_i+0x200>
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d1a7      	bne.n	a94c <_printf_i+0x17c>
    a9fc:	780b      	ldrb	r3, [r1, #0]
    a9fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    aa02:	f104 0542 	add.w	r5, r4, #66	; 0x42
    aa06:	e765      	b.n	a8d4 <_printf_i+0x104>
    aa08:	0000b326 	.word	0x0000b326
    aa0c:	0000b315 	.word	0x0000b315

0000aa10 <memchr>:
    aa10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aa14:	2a10      	cmp	r2, #16
    aa16:	db2b      	blt.n	aa70 <memchr+0x60>
    aa18:	f010 0f07 	tst.w	r0, #7
    aa1c:	d008      	beq.n	aa30 <memchr+0x20>
    aa1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    aa22:	3a01      	subs	r2, #1
    aa24:	428b      	cmp	r3, r1
    aa26:	d02d      	beq.n	aa84 <memchr+0x74>
    aa28:	f010 0f07 	tst.w	r0, #7
    aa2c:	b342      	cbz	r2, aa80 <memchr+0x70>
    aa2e:	d1f6      	bne.n	aa1e <memchr+0xe>
    aa30:	b4f0      	push	{r4, r5, r6, r7}
    aa32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    aa36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    aa3a:	f022 0407 	bic.w	r4, r2, #7
    aa3e:	f07f 0700 	mvns.w	r7, #0
    aa42:	2300      	movs	r3, #0
    aa44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    aa48:	3c08      	subs	r4, #8
    aa4a:	ea85 0501 	eor.w	r5, r5, r1
    aa4e:	ea86 0601 	eor.w	r6, r6, r1
    aa52:	fa85 f547 	uadd8	r5, r5, r7
    aa56:	faa3 f587 	sel	r5, r3, r7
    aa5a:	fa86 f647 	uadd8	r6, r6, r7
    aa5e:	faa5 f687 	sel	r6, r5, r7
    aa62:	b98e      	cbnz	r6, aa88 <memchr+0x78>
    aa64:	d1ee      	bne.n	aa44 <memchr+0x34>
    aa66:	bcf0      	pop	{r4, r5, r6, r7}
    aa68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aa6c:	f002 0207 	and.w	r2, r2, #7
    aa70:	b132      	cbz	r2, aa80 <memchr+0x70>
    aa72:	f810 3b01 	ldrb.w	r3, [r0], #1
    aa76:	3a01      	subs	r2, #1
    aa78:	ea83 0301 	eor.w	r3, r3, r1
    aa7c:	b113      	cbz	r3, aa84 <memchr+0x74>
    aa7e:	d1f8      	bne.n	aa72 <memchr+0x62>
    aa80:	2000      	movs	r0, #0
    aa82:	4770      	bx	lr
    aa84:	3801      	subs	r0, #1
    aa86:	4770      	bx	lr
    aa88:	2d00      	cmp	r5, #0
    aa8a:	bf06      	itte	eq
    aa8c:	4635      	moveq	r5, r6
    aa8e:	3803      	subeq	r0, #3
    aa90:	3807      	subne	r0, #7
    aa92:	f015 0f01 	tst.w	r5, #1
    aa96:	d107      	bne.n	aaa8 <memchr+0x98>
    aa98:	3001      	adds	r0, #1
    aa9a:	f415 7f80 	tst.w	r5, #256	; 0x100
    aa9e:	bf02      	ittt	eq
    aaa0:	3001      	addeq	r0, #1
    aaa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    aaa6:	3001      	addeq	r0, #1
    aaa8:	bcf0      	pop	{r4, r5, r6, r7}
    aaaa:	3801      	subs	r0, #1
    aaac:	4770      	bx	lr
    aaae:	bf00      	nop

0000aab0 <memmove>:
    aab0:	4288      	cmp	r0, r1
    aab2:	b510      	push	{r4, lr}
    aab4:	eb01 0302 	add.w	r3, r1, r2
    aab8:	d803      	bhi.n	aac2 <memmove+0x12>
    aaba:	1e42      	subs	r2, r0, #1
    aabc:	4299      	cmp	r1, r3
    aabe:	d10c      	bne.n	aada <memmove+0x2a>
    aac0:	bd10      	pop	{r4, pc}
    aac2:	4298      	cmp	r0, r3
    aac4:	d2f9      	bcs.n	aaba <memmove+0xa>
    aac6:	1881      	adds	r1, r0, r2
    aac8:	1ad2      	subs	r2, r2, r3
    aaca:	42d3      	cmn	r3, r2
    aacc:	d100      	bne.n	aad0 <memmove+0x20>
    aace:	bd10      	pop	{r4, pc}
    aad0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    aad4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    aad8:	e7f7      	b.n	aaca <memmove+0x1a>
    aada:	f811 4b01 	ldrb.w	r4, [r1], #1
    aade:	f802 4f01 	strb.w	r4, [r2, #1]!
    aae2:	e7eb      	b.n	aabc <memmove+0xc>

0000aae4 <_realloc_r>:
    aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aae6:	4607      	mov	r7, r0
    aae8:	4614      	mov	r4, r2
    aaea:	460e      	mov	r6, r1
    aaec:	b921      	cbnz	r1, aaf8 <_realloc_r+0x14>
    aaee:	4611      	mov	r1, r2
    aaf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    aaf4:	f7ff bc0a 	b.w	a30c <_malloc_r>
    aaf8:	b922      	cbnz	r2, ab04 <_realloc_r+0x20>
    aafa:	f7ff fbb9 	bl	a270 <_free_r>
    aafe:	4625      	mov	r5, r4
    ab00:	4628      	mov	r0, r5
    ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab04:	f000 f814 	bl	ab30 <_malloc_usable_size_r>
    ab08:	4284      	cmp	r4, r0
    ab0a:	d90f      	bls.n	ab2c <_realloc_r+0x48>
    ab0c:	4621      	mov	r1, r4
    ab0e:	4638      	mov	r0, r7
    ab10:	f7ff fbfc 	bl	a30c <_malloc_r>
    ab14:	4605      	mov	r5, r0
    ab16:	2800      	cmp	r0, #0
    ab18:	d0f2      	beq.n	ab00 <_realloc_r+0x1c>
    ab1a:	4631      	mov	r1, r6
    ab1c:	4622      	mov	r2, r4
    ab1e:	f7ff fb93 	bl	a248 <memcpy>
    ab22:	4631      	mov	r1, r6
    ab24:	4638      	mov	r0, r7
    ab26:	f7ff fba3 	bl	a270 <_free_r>
    ab2a:	e7e9      	b.n	ab00 <_realloc_r+0x1c>
    ab2c:	4635      	mov	r5, r6
    ab2e:	e7e7      	b.n	ab00 <_realloc_r+0x1c>

0000ab30 <_malloc_usable_size_r>:
    ab30:	f851 0c04 	ldr.w	r0, [r1, #-4]
    ab34:	2800      	cmp	r0, #0
    ab36:	f1a0 0004 	sub.w	r0, r0, #4
    ab3a:	bfbc      	itt	lt
    ab3c:	580b      	ldrlt	r3, [r1, r0]
    ab3e:	18c0      	addlt	r0, r0, r3
    ab40:	4770      	bx	lr
    ab42:	0000      	movs	r0, r0
    ab44:	4952475b 	.word	0x4952475b
    ab48:	25205d44 	.word	0x25205d44
    ab4c:	25206433 	.word	0x25206433
    ab50:	25206434 	.word	0x25206434
    ab54:	25206434 	.word	0x25206434
    ab58:	4d5b2064 	.word	0x4d5b2064
    ab5c:	5d494449 	.word	0x5d494449
    ab60:	3a684320 	.word	0x3a684320
    ab64:	20642520 	.word	0x20642520
    ab68:	646d4320 	.word	0x646d4320
    ab6c:	6425203a 	.word	0x6425203a
    ab70:	61502020 	.word	0x61502020
    ab74:	316d6172 	.word	0x316d6172
    ab78:	6425203a 	.word	0x6425203a
    ab7c:	61502020 	.word	0x61502020
    ab80:	326d6172 	.word	0x326d6172
    ab84:	6425203a 	.word	0x6425203a
    ab88:	0000000a 	.word	0x0000000a
    ab8c:	4952475b 	.word	0x4952475b
    ab90:	25205d44 	.word	0x25205d44
    ab94:	25206433 	.word	0x25206433
    ab98:	25206434 	.word	0x25206434
    ab9c:	25206434 	.word	0x25206434
    aba0:	4b5b2064 	.word	0x4b5b2064
    aba4:	4f425945 	.word	0x4f425945
    aba8:	5d445241 	.word	0x5d445241
    abac:	79654b20 	.word	0x79654b20
    abb0:	6425203a 	.word	0x6425203a
    abb4:	646f4d20 	.word	0x646f4d20
    abb8:	6425203a 	.word	0x6425203a
    abbc:	646d4320 	.word	0x646d4320
    abc0:	6425203a 	.word	0x6425203a
    abc4:	4357480a 	.word	0x4357480a
    abc8:	203a4746 	.word	0x203a4746
    abcc:	78383025 	.word	0x78383025
    abd0:	0000000a 	.word	0x0000000a
    abd4:	4b4e555b 	.word	0x4b4e555b
    abd8:	4e574f4e 	.word	0x4e574f4e
    abdc:	3e2d205d 	.word	0x3e2d205d
    abe0:	6f725020 	.word	0x6f725020
    abe4:	6f636f74 	.word	0x6f636f74
    abe8:	25203a6c 	.word	0x25203a6c
    abec:	00000a64 	.word	0x00000a64

0000abf0 <UI_ENCODER_LOOKUP>:
    abf0:	0b0a0f0e 03020706 09080d0c 01000504     ................

0000ac00 <grid_module_mux_lookup>:
    ac00:	05040100 0d0c0908 07060302 0f0e0b0a     ................
    ac10:	30256325 30257832 30257832 30257832     %c%02x%02x%02x%0
    ac20:	63257832 00000025 00003030 30256325     2x%c%...00..%c%0
    ac30:	30257832 30257832 30257832 30257832     2x%02x%02x%02x%0
    ac40:	63257832 30256325 30257832 30257832     2x%c%c%02x%02x%0
    ac50:	30257832 30257832 63257832 00000000     2x%02x%02x%c....
    ac60:	78383025 00000000 78323025 00000000     %08x....%02x....
    ac70:	63256325 63256325 78383025 30306325     %c%c%c%c%08x%c00
    ac80:	0000000a 63256325 78323025 78323025     ....%c%c%02x%02x
    ac90:	78323025 78323025 78323025 00006325     %02x%02x%02x%c..
    aca0:	000a3030 682f2e2e 732f6c61 682f6372     00..../hal/src/h
    acb0:	615f6c61 615f6364 636e7973 0000632e     al_adc_async.c..
    acc0:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
    acd0:	735f6372 2e636e79 00000063 682f2e2e     rc_sync.c...../h
    ace0:	732f6c61 682f6372 665f6c61 6873616c     al/src/hal_flash
    acf0:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    ad00:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
    ad10:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    ad20:	695f6c61 00632e6f 682f2e2e 732f6c61     al_io.c.../hal/s
    ad30:	682f6372 735f6c61 6d5f6970 7973615f     rc/hal_spi_m_asy
    ad40:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    ad50:	682f6372 735f6c61 6d5f6970 616d645f     rc/hal_spi_m_dma
    ad60:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    ad70:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
    ad80:	732f6c61 682f6372 755f6c61 74726173     al/src/hal_usart
    ad90:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
    ada0:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    adb0:	6c5f736c 2e747369 00000063 682f2e2e     ls_list.c...../h
    adc0:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    add0:	725f736c 62676e69 65666675 00632e72     ls_ringbuffer.c.

0000ade0 <_adcs>:
    ade0:	01000000 0003000c 00041807 00000000     ................
    adf0:	0014080b 00010000 000c0100 18040003     ................
    ae00:	00000004 080b0000 00000014 682f2e2e     ............../h
    ae10:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    ae20:	00000000                                ....

0000ae24 <_cfgs>:
    ae24:	00200600 08068000 00200400 08068000     .. ....... .....
    ae34:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    ae54:	00200b00 14000003 00200a00 08000002     .. ....... .....
    ae64:	00201300 14000003 00000000 00000000     .. .............
	...

0000af24 <user_mux_confs>:
	...
    af50:	04030201 04030201 00000000 00000000     ................
	...

0000af68 <channel_confs>:
    af68:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000afa8 <interrupt_cfg>:
    afa8:	00000002 00000002 00000002 00000002     ................
	...
    b028:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    b038:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    b048:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    b058:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    b068:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    b078:	43000800 43000c00                       ...C...C

0000b080 <_usarts>:
    b080:	00000000 40100004 00030000 00700002     .......@......p.
    b090:	0000aaaa 00000000 00000001 40100004     ...............@
    b0a0:	00030000 00700002 0000aaaa 00000000     ......p.........
    b0b0:	00000002 40100004 00030000 00700002     .......@......p.
    b0c0:	0000f62b 00000000 00000004 40100004     +..............@
    b0d0:	00030000 00700002 0000aaaa 00000000     ......p.........
    b0e0:	00000006 40100004 00030000 00700002     .......@......p.
    b0f0:	0000aaaa 00000000                       ........

0000b0f8 <_i2cms>:
    b0f8:	00000005 00200014 00000100 0000e6e5     ...... .........
    b108:	00d70000 02dc6c00                       .....l..

0000b110 <sercomspi_regs>:
    b110:	3020000c 00020000 00000000 01ff0005     .. 0............
    b120:	20000c03 00000000 00000000 ff000600     ... ............
    b130:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    b140:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    b150:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    b160:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000b170 <_tcs>:
    b170:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    b180:	00000000 006c0001 00000308 00000021     ......l.....!...
    b190:	00003a98 00000000 006d0002 00000308     .:........m.....
    b1a0:	00000021 00003a98 00000000 006e0003     !....:........n.
    b1b0:	00000308 00000021 00003a98 00000000     ....!....:......
    b1c0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    b1d0:	0000632e                                .c..

0000b1d4 <_usb_ep_cfgs>:
    b1d4:	20001134 00000000 00000040 00000000     4.. ....@.......
	...
    b1ec:	2000112c 00000000 00000008 200010ec     ,.. ........... 
    b1fc:	200010e4 00080040 00000000 00000000     ... @...........
	...
    b214:	200010a4 00400000                       ... ..@.

0000b21c <keyboard_report_desc>:
    b21c:	06090105 070501a1 e729e019 01250015     ..........)...%.
    b22c:	08950175 01810281 65290019 65250015     u.........)e..%e
    b23c:	06950875 08050081 05290119 01250015     u.........)...%.
    b24c:	05950175 03950291 00c00191              u...........

0000b258 <mouse_report_desc>:
    b258:	02090105 010901a1 090500a1 03290119     ..............).
    b268:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    b278:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    b288:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    b298:	73752f65 2e636462 00000063              e/usbdc.c...

0000b2a4 <__sf_fake_stderr>:
	...

0000b2c4 <__sf_fake_stdin>:
	...

0000b2e4 <__sf_fake_stdout>:
	...
    b304:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    b314:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    b324:	31300046 35343332 39383736 64636261     F.0123456789abcd
    b334:	00006665                                ef..

0000b338 <_init>:
    b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b33a:	bf00      	nop
    b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b33e:	bc08      	pop	{r3}
    b340:	469e      	mov	lr, r3
    b342:	4770      	bx	lr

0000b344 <__init_array_start>:
    b344:	00000289 	.word	0x00000289

0000b348 <_fini>:
    b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b34a:	bf00      	nop
    b34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b34e:	bc08      	pop	{r3}
    b350:	469e      	mov	lr, r3
    b352:	4770      	bx	lr

0000b354 <__fini_array_start>:
    b354:	00000265 	.word	0x00000265
