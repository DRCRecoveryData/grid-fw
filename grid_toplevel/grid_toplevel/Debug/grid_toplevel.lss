
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d38c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000d38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000037a0  200005c0  0000d950  000205c0  2**4
                  ALLOC
  5 .stack        00010000  20003d60  000110f0  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008caed  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bb67  00000000  00000000  000ad130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f728  00000000  00000000  000b8c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002278  00000000  00000000  000e83bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003088  00000000  00000000  000ea637  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000478ec  00000000  00000000  000ed6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ea04  00000000  00000000  00134fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a25c  00000000  00000000  001739af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006590  00000000  00000000  0028dc0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 3d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     `=. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	b1 65 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .e..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 bd 61 00 00 d1 61 00 00     .........a...a..
      bc:	f5 5f 00 00 01 60 00 00 0d 60 00 00 19 60 00 00     ._...`...`...`..
      cc:	25 60 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     %`..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	e5 63 00 00 0d 70 00 00 21 70 00 00 35 70 00 00     .c...p..!p..5p..
     104:	49 70 00 00 5d 70 00 00 71 70 00 00 85 70 00 00     Ip..]p..qp...p..
     114:	99 70 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .p..............
     124:	ed 02 00 00 ad 70 00 00 c1 70 00 00 d5 70 00 00     .....p...p...p..
     134:	e9 70 00 00 fd 70 00 00 11 71 00 00 25 71 00 00     .p...p...q..%q..
     144:	39 71 00 00 4d 71 00 00 61 71 00 00 75 71 00 00     9q..Mq..aq..uq..
     154:	89 71 00 00 9d 71 00 00 b1 71 00 00 c5 71 00 00     .q...q...q...q..
     164:	d9 71 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .q..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 f5 90 00 00     ................
     184:	01 91 00 00 0d 91 00 00 19 91 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 fd 7d 00 00 11 7e 00 00     .........}...~..
     1f4:	25 7e 00 00 39 7e 00 00 ed 02 00 00 ed 02 00 00     %~..9~..........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 89 5c 00 00 9d 5c 00 00 b1 5c 00 00     .....\...\...\..
     224:	c5 5c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .\..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000d38c 	.word	0x0000d38c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d38c 	.word	0x0000d38c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000d38c 	.word	0x0000d38c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000b015 	.word	0x0000b015
     2e8:	00009c0d 	.word	0x00009c0d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000d38c 	.word	0x0000d38c
     36c:	200005bc 	.word	0x200005bc
     370:	20003d60 	.word	0x20003d60
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000b7f5 	.word	0x0000b7f5
     384:	000097e1 	.word	0x000097e1

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001030 	.word	0x20001030
     40c:	2000112c 	.word	0x2000112c
     410:	43001c00 	.word	0x43001c00
     414:	00004089 	.word	0x00004089
     418:	0000412d 	.word	0x0000412d
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	20001204 	.word	0x20001204
     4b0:	20000fcc 	.word	0x20000fcc
     4b4:	43002000 	.word	0x43002000
     4b8:	00004089 	.word	0x00004089
     4bc:	0000412d 	.word	0x0000412d
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000fc8 	.word	0x20000fc8
     4e8:	000043c9 	.word	0x000043c9

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	0000444d 	.word	0x0000444d

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fac 	.word	0x20000fac
     54c:	0000446d 	.word	0x0000446d

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001270 	.word	0x20001270
     718:	00004619 	.word	0x00004619
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	2000105c 	.word	0x2000105c
     7bc:	00004ef9 	.word	0x00004ef9
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010b0 	.word	0x200010b0
     860:	00004ef9 	.word	0x00004ef9
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20001024 	.word	0x20001024
     8f8:	00005125 	.word	0x00005125
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f24 	.word	0x20000f24
     a04:	00004809 	.word	0x00004809
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	20001164 	.word	0x20001164
     aa8:	00004ef9 	.word	0x00004ef9
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000fe4 	.word	0x20000fe4
     b54:	0000454d 	.word	0x0000454d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011b4 	.word	0x200011b4
     bf8:	00004ef9 	.word	0x00004ef9
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001100 	.word	0x20001100
     cfc:	00004a6d 	.word	0x00004a6d
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	000043f9 	.word	0x000043f9

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	000053ed 	.word	0x000053ed
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000ca18 	.word	0x0000ca18
     e14:	00005745 	.word	0x00005745
     e18:	200010ac 	.word	0x200010ac
     e1c:	40002000 	.word	0x40002000
     e20:	00009125 	.word	0x00009125

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00005d09 	.word	0x00005d09
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	000065a9 	.word	0x000065a9
    1100:	40002400 	.word	0x40002400
    1104:	20000f6c 	.word	0x20000f6c
    1108:	00004c15 	.word	0x00004c15
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00007df5 	.word	0x00007df5
    1134:	40003800 	.word	0x40003800
    1138:	20001250 	.word	0x20001250
    113c:	40003c00 	.word	0x40003c00
    1140:	20001144 	.word	0x20001144
    1144:	4101a000 	.word	0x4101a000
    1148:	20000f8c 	.word	0x20000f8c
    114c:	4101c000 	.word	0x4101c000
    1150:	20001230 	.word	0x20001230
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000b83d 	.word	0x0000b83d

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000b83d 	.word	0x0000b83d
    11e0:	200017bc 	.word	0x200017bc
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017bc 	.word	0x200017bc

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017bc 	.word	0x200017bc

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017bc 	.word	0x200017bc

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000b83d 	.word	0x0000b83d

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1516:	4e33      	ldr	r6, [pc, #204]	; (15e4 <grid_port_init+0xe0>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    1520:	47b0      	blx	r6
	
	por->cooldown = 0;
    1522:	2300      	movs	r3, #0
    1524:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1526:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152a:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    152c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1530:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1532:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1534:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1536:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1538:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153a:	4619      	mov	r1, r3
    153c:	18e2      	adds	r2, r4, r3
    153e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1542:	3301      	adds	r3, #1
    1544:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1548:	d1f8      	bne.n	153c <grid_port_init+0x38>
    154a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    154c:	4619      	mov	r1, r3
    154e:	18e2      	adds	r2, r4, r3
    1550:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1554:	3301      	adds	r3, #1
    1556:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155a:	d1f8      	bne.n	154e <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    155c:	2300      	movs	r3, #0
    155e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    1562:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1566:	2301      	movs	r3, #1
    1568:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    156c:	429d      	cmp	r5, r3
    156e:	d004      	beq.n	157a <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1570:	2301      	movs	r3, #1
    1572:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    1576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157a:	2300      	movs	r3, #0
    157c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    1580:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    1584:	7a63      	ldrb	r3, [r4, #9]
    1586:	b2db      	uxtb	r3, r3
    1588:	2b11      	cmp	r3, #17
    158a:	d013      	beq.n	15b4 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    158c:	7a63      	ldrb	r3, [r4, #9]
    158e:	b2db      	uxtb	r3, r3
    1590:	2b12      	cmp	r3, #18
    1592:	d017      	beq.n	15c4 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    1594:	7a63      	ldrb	r3, [r4, #9]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b13      	cmp	r3, #19
    159a:	d01b      	beq.n	15d4 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b14      	cmp	r3, #20
    15a2:	d1e8      	bne.n	1576 <grid_port_init+0x72>
			por->dx = -1;
    15a4:	23ff      	movs	r3, #255	; 0xff
    15a6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b4:	2300      	movs	r3, #0
    15b6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    15ba:	2301      	movs	r3, #1
    15bc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c4:	2301      	movs	r3, #1
    15c6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d4:	2300      	movs	r3, #0
    15d6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e4:	00001321 	.word	0x00001321

000015e8 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ec:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    15ee:	2600      	movs	r6, #0
    15f0:	9602      	str	r6, [sp, #8]
    15f2:	2311      	movs	r3, #17
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	2401      	movs	r4, #1
    15f8:	9400      	str	r4, [sp, #0]
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <grid_port_init_all+0xa8>)
    15fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1600:	4611      	mov	r1, r2
    1602:	4824      	ldr	r0, [pc, #144]	; (1694 <grid_port_init_all+0xac>)
    1604:	4d24      	ldr	r5, [pc, #144]	; (1698 <grid_port_init_all+0xb0>)
    1606:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1608:	9402      	str	r4, [sp, #8]
    160a:	2312      	movs	r3, #18
    160c:	9301      	str	r3, [sp, #4]
    160e:	9400      	str	r4, [sp, #0]
    1610:	4b22      	ldr	r3, [pc, #136]	; (169c <grid_port_init_all+0xb4>)
    1612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1616:	4611      	mov	r1, r2
    1618:	4821      	ldr	r0, [pc, #132]	; (16a0 <grid_port_init_all+0xb8>)
    161a:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    161c:	f04f 0902 	mov.w	r9, #2
    1620:	f8cd 9008 	str.w	r9, [sp, #8]
    1624:	2313      	movs	r3, #19
    1626:	9301      	str	r3, [sp, #4]
    1628:	9400      	str	r4, [sp, #0]
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <grid_port_init_all+0xbc>)
    162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1630:	4611      	mov	r1, r2
    1632:	481d      	ldr	r0, [pc, #116]	; (16a8 <grid_port_init_all+0xc0>)
    1634:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1636:	2703      	movs	r7, #3
    1638:	9702      	str	r7, [sp, #8]
    163a:	2314      	movs	r3, #20
    163c:	9301      	str	r3, [sp, #4]
    163e:	9400      	str	r4, [sp, #0]
    1640:	4b1a      	ldr	r3, [pc, #104]	; (16ac <grid_port_init_all+0xc4>)
    1642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1646:	4611      	mov	r1, r2
    1648:	4819      	ldr	r0, [pc, #100]	; (16b0 <grid_port_init_all+0xc8>)
    164a:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    164c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 16b8 <grid_port_init_all+0xd0>
    1650:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1654:	f8cd a008 	str.w	sl, [sp, #8]
    1658:	9601      	str	r6, [sp, #4]
    165a:	9700      	str	r7, [sp, #0]
    165c:	4633      	mov	r3, r6
    165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1662:	4611      	mov	r1, r2
    1664:	4640      	mov	r0, r8
    1666:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1668:	4f12      	ldr	r7, [pc, #72]	; (16b4 <grid_port_init_all+0xcc>)
    166a:	f8cd a008 	str.w	sl, [sp, #8]
    166e:	9601      	str	r6, [sp, #4]
    1670:	f8cd 9000 	str.w	r9, [sp]
    1674:	4633      	mov	r3, r6
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	4611      	mov	r1, r2
    167c:	4638      	mov	r0, r7
    167e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1680:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1684:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    1688:	b004      	add	sp, #16
    168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    168e:	bf00      	nop
    1690:	200010b0 	.word	0x200010b0
    1694:	20001284 	.word	0x20001284
    1698:	00001505 	.word	0x00001505
    169c:	2000105c 	.word	0x2000105c
    16a0:	200030ec 	.word	0x200030ec
    16a4:	200011b4 	.word	0x200011b4
    16a8:	200026c8 	.word	0x200026c8
    16ac:	20001164 	.word	0x20001164
    16b0:	200021a4 	.word	0x200021a4
    16b4:	20002bdc 	.word	0x20002bdc
    16b8:	200017d4 	.word	0x200017d4

000016bc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b091      	sub	sp, #68	; 0x44
    16c2:	af02      	add	r7, sp, #8
    16c4:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16c6:	f500 699e 	add.w	r9, r0, #1264	; 0x4f0
    16ca:	4648      	mov	r0, r9
    16cc:	4b54      	ldr	r3, [pc, #336]	; (1820 <grid_port_process_inbound+0x164>)
    16ce:	4798      	blx	r3
	
	if (!packet_size){
    16d0:	b920      	cbnz	r0, 16dc <grid_port_process_inbound+0x20>
    16d2:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16d4:	373c      	adds	r7, #60	; 0x3c
    16d6:	46bd      	mov	sp, r7
    16d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16dc:	4680      	mov	r8, r0
	}else{
    16de:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    16e2:	4b50      	ldr	r3, [pc, #320]	; (1824 <grid_port_process_inbound+0x168>)
    16e4:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    16e6:	4b50      	ldr	r3, [pc, #320]	; (1828 <grid_port_process_inbound+0x16c>)
    16e8:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    16ea:	4b50      	ldr	r3, [pc, #320]	; (182c <grid_port_process_inbound+0x170>)
    16ec:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    16ee:	4b50      	ldr	r3, [pc, #320]	; (1830 <grid_port_process_inbound+0x174>)
    16f0:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    16f2:	4b50      	ldr	r3, [pc, #320]	; (1834 <grid_port_process_inbound+0x178>)
    16f4:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    16f6:	4b50      	ldr	r3, [pc, #320]	; (1838 <grid_port_process_inbound+0x17c>)
    16f8:	61fb      	str	r3, [r7, #28]
    16fa:	f107 0308 	add.w	r3, r7, #8
    16fe:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    1702:	2600      	movs	r6, #0
    1704:	e001      	b.n	170a <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1706:	428b      	cmp	r3, r1
    1708:	d00e      	beq.n	1728 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    170a:	f853 2b04 	ldr.w	r2, [r3], #4
    170e:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    1712:	2800      	cmp	r0, #0
    1714:	d0f7      	beq.n	1706 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1716:	f107 0038 	add.w	r0, r7, #56	; 0x38
    171a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    171e:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1722:	3601      	adds	r6, #1
    1724:	b2f6      	uxtb	r6, r6
    1726:	e7ee      	b.n	1706 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1728:	2e00      	cmp	r6, #0
    172a:	d068      	beq.n	17fe <grid_port_process_inbound+0x142>
    172c:	f107 0a20 	add.w	sl, r7, #32
    1730:	1e74      	subs	r4, r6, #1
    1732:	b2e4      	uxtb	r4, r4
    1734:	3401      	adds	r4, #1
    1736:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    173a:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    173c:	f8df b118 	ldr.w	fp, [pc, #280]	; 1858 <grid_port_process_inbound+0x19c>
    1740:	e001      	b.n	1746 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    1742:	42a5      	cmp	r5, r4
    1744:	d016      	beq.n	1774 <grid_port_process_inbound+0xb8>
			if (port_array[i] != por){
    1746:	f855 0b04 	ldr.w	r0, [r5], #4
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	4283      	cmp	r3, r0
    174e:	d0f8      	beq.n	1742 <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1750:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1754:	47d8      	blx	fp
    1756:	4580      	cmp	r8, r0
    1758:	d9f3      	bls.n	1742 <grid_port_process_inbound+0x86>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    175a:	23c8      	movs	r3, #200	; 0xc8
    175c:	9301      	str	r3, [sp, #4]
    175e:	2302      	movs	r3, #2
    1760:	9300      	str	r3, [sp, #0]
    1762:	2300      	movs	r3, #0
    1764:	2264      	movs	r2, #100	; 0x64
    1766:	4611      	mov	r1, r2
    1768:	4834      	ldr	r0, [pc, #208]	; (183c <grid_port_process_inbound+0x180>)
    176a:	4c35      	ldr	r4, [pc, #212]	; (1840 <grid_port_process_inbound+0x184>)
    176c:	47a0      	blx	r4
    176e:	f8d7 d000 	ldr.w	sp, [r7]
    1772:	e7ae      	b.n	16d2 <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1774:	4648      	mov	r0, r9
    1776:	4b33      	ldr	r3, [pc, #204]	; (1844 <grid_port_process_inbound+0x188>)
    1778:	4798      	blx	r3
    177a:	4580      	cmp	r8, r0
    177c:	d000      	beq.n	1780 <grid_port_process_inbound+0xc4>
    177e:	e7fe      	b.n	177e <grid_port_process_inbound+0xc2>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1780:	4c31      	ldr	r4, [pc, #196]	; (1848 <grid_port_process_inbound+0x18c>)
    1782:	e001      	b.n	1788 <grid_port_process_inbound+0xcc>
		for (uint8_t i=0; i<port_count; i++)
    1784:	45aa      	cmp	sl, r5
    1786:	d03f      	beq.n	1808 <grid_port_process_inbound+0x14c>
			if (port_array[i] != por){
    1788:	f85a 0b04 	ldr.w	r0, [sl], #4
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4283      	cmp	r3, r0
    1790:	d0f8      	beq.n	1784 <grid_port_process_inbound+0xc8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1792:	4641      	mov	r1, r8
    1794:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1798:	47a0      	blx	r4
    179a:	e7f3      	b.n	1784 <grid_port_process_inbound+0xc8>
			for (uint8_t i=0; i<port_count; i++){
    179c:	42a5      	cmp	r5, r4
    179e:	d009      	beq.n	17b4 <grid_port_process_inbound+0xf8>
				if (port_array[i] != por){
    17a0:	f854 0b04 	ldr.w	r0, [r4], #4
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	4283      	cmp	r3, r0
    17a8:	d0f8      	beq.n	179c <grid_port_process_inbound+0xe0>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17aa:	6839      	ldr	r1, [r7, #0]
    17ac:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17b0:	47d8      	blx	fp
    17b2:	e7f3      	b.n	179c <grid_port_process_inbound+0xe0>
    17b4:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    17b8:	fa1f f38a 	uxth.w	r3, sl
    17bc:	4543      	cmp	r3, r8
    17be:	d208      	bcs.n	17d2 <grid_port_process_inbound+0x116>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    17c0:	4648      	mov	r0, r9
    17c2:	4b22      	ldr	r3, [pc, #136]	; (184c <grid_port_process_inbound+0x190>)
    17c4:	4798      	blx	r3
    17c6:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    17c8:	2e00      	cmp	r6, #0
    17ca:	d0f3      	beq.n	17b4 <grid_port_process_inbound+0xf8>
    17cc:	f107 0420 	add.w	r4, r7, #32
    17d0:	e7e6      	b.n	17a0 <grid_port_process_inbound+0xe4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    17d2:	4648      	mov	r0, r9
    17d4:	4b1e      	ldr	r3, [pc, #120]	; (1850 <grid_port_process_inbound+0x194>)
    17d6:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    17d8:	2e00      	cmp	r6, #0
    17da:	f43f af7b 	beq.w	16d4 <grid_port_process_inbound+0x18>
    17de:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17e2:	4e1c      	ldr	r6, [pc, #112]	; (1854 <grid_port_process_inbound+0x198>)
    17e4:	e002      	b.n	17ec <grid_port_process_inbound+0x130>
		for (uint8_t i=0; i<port_count; i++)
    17e6:	42a5      	cmp	r5, r4
    17e8:	f43f af74 	beq.w	16d4 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    17ec:	f854 0b04 	ldr.w	r0, [r4], #4
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	4283      	cmp	r3, r0
    17f4:	d0f7      	beq.n	17e6 <grid_port_process_inbound+0x12a>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17f6:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17fa:	47b0      	blx	r6
    17fc:	e7f3      	b.n	17e6 <grid_port_process_inbound+0x12a>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17fe:	4648      	mov	r0, r9
    1800:	4b10      	ldr	r3, [pc, #64]	; (1844 <grid_port_process_inbound+0x188>)
    1802:	4798      	blx	r3
    1804:	4540      	cmp	r0, r8
    1806:	d1ba      	bne.n	177e <grid_port_process_inbound+0xc2>
    1808:	1e75      	subs	r5, r6, #1
    180a:	b2ed      	uxtb	r5, r5
    180c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1810:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1814:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1816:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    181a:	f8df b040 	ldr.w	fp, [pc, #64]	; 185c <grid_port_process_inbound+0x1a0>
    181e:	e7cf      	b.n	17c0 <grid_port_process_inbound+0x104>
    1820:	000013d1 	.word	0x000013d1
    1824:	20001284 	.word	0x20001284
    1828:	200030ec 	.word	0x200030ec
    182c:	200026c8 	.word	0x200026c8
    1830:	200021a4 	.word	0x200021a4
    1834:	200017d4 	.word	0x200017d4
    1838:	20002bdc 	.word	0x20002bdc
    183c:	20001cf4 	.word	0x20001cf4
    1840:	0000379d 	.word	0x0000379d
    1844:	00001443 	.word	0x00001443
    1848:	00001375 	.word	0x00001375
    184c:	000014cd 	.word	0x000014cd
    1850:	000014f5 	.word	0x000014f5
    1854:	000013c1 	.word	0x000013c1
    1858:	00001361 	.word	0x00001361
    185c:	000013a5 	.word	0x000013a5

00001860 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1864:	b09b      	sub	sp, #108	; 0x6c
    1866:	af06      	add	r7, sp, #24
    1868:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    186a:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    186e:	4630      	mov	r0, r6
    1870:	4b8f      	ldr	r3, [pc, #572]	; (1ab0 <grid_port_process_outbound_usb+0x250>)
    1872:	4798      	blx	r3
	
	if (!length){		
    1874:	b918      	cbnz	r0, 187e <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    1876:	3754      	adds	r7, #84	; 0x54
    1878:	46bd      	mov	sp, r7
    187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    187e:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    1880:	4630      	mov	r0, r6
    1882:	4b8c      	ldr	r3, [pc, #560]	; (1ab4 <grid_port_process_outbound_usb+0x254>)
    1884:	4798      	blx	r3
    1886:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1888:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1af4 <grid_port_process_outbound_usb+0x294>
    188c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1abc <grid_port_process_outbound_usb+0x25c>
    1890:	4630      	mov	r0, r6
    1892:	47c8      	blx	r9
    1894:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1898:	3501      	adds	r5, #1
    189a:	b2ed      	uxtb	r5, r5
    189c:	b2ab      	uxth	r3, r5
    189e:	429c      	cmp	r4, r3
    18a0:	d8f6      	bhi.n	1890 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18a2:	4630      	mov	r0, r6
    18a4:	4b84      	ldr	r3, [pc, #528]	; (1ab8 <grid_port_process_outbound_usb+0x258>)
    18a6:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    18a8:	4d84      	ldr	r5, [pc, #528]	; (1abc <grid_port_process_outbound_usb+0x25c>)
    18aa:	4628      	mov	r0, r5
    18ac:	4b84      	ldr	r3, [pc, #528]	; (1ac0 <grid_port_process_outbound_usb+0x260>)
    18ae:	4798      	blx	r3
    18b0:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    18b2:	4628      	mov	r0, r5
    18b4:	4b83      	ldr	r3, [pc, #524]	; (1ac4 <grid_port_process_outbound_usb+0x264>)
    18b6:	4798      	blx	r3
    18b8:	387f      	subs	r0, #127	; 0x7f
    18ba:	b243      	sxtb	r3, r0
    18bc:	461e      	mov	r6, r3
    18be:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    18c0:	4628      	mov	r0, r5
    18c2:	4b81      	ldr	r3, [pc, #516]	; (1ac8 <grid_port_process_outbound_usb+0x268>)
    18c4:	4798      	blx	r3
    18c6:	387f      	subs	r0, #127	; 0x7f
    18c8:	b243      	sxtb	r3, r0
    18ca:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    18cc:	4628      	mov	r0, r5
    18ce:	4b7f      	ldr	r3, [pc, #508]	; (1acc <grid_port_process_outbound_usb+0x26c>)
    18d0:	4798      	blx	r3
    18d2:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    18d4:	2500      	movs	r5, #0
    18d6:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    18da:	69bb      	ldr	r3, [r7, #24]
    18dc:	633b      	str	r3, [r7, #48]	; 0x30
    18de:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    18e2:	009b      	lsls	r3, r3, #2
    18e4:	623b      	str	r3, [r7, #32]
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    18e6:	62fe      	str	r6, [r7, #44]	; 0x2c
    18e8:	0173      	lsls	r3, r6, #5
    18ea:	61fb      	str	r3, [r7, #28]
    18ec:	1e63      	subs	r3, r4, #1
    18ee:	b29b      	uxth	r3, r3
    18f0:	f103 0a01 	add.w	sl, r3, #1
    18f4:	46ab      	mov	fp, r5
    18f6:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    18f8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1abc <grid_port_process_outbound_usb+0x25c>
    18fc:	e006      	b.n	190c <grid_port_process_outbound_usb+0xac>
				current_start = i;
    18fe:	fa5f f58b 	uxtb.w	r5, fp
    1902:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1906:	45d3      	cmp	fp, sl
    1908:	f000 81cb 	beq.w	1ca2 <grid_port_process_outbound_usb+0x442>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    190c:	f819 300b 	ldrb.w	r3, [r9, fp]
    1910:	b2db      	uxtb	r3, r3
    1912:	2b02      	cmp	r3, #2
    1914:	d0f3      	beq.n	18fe <grid_port_process_outbound_usb+0x9e>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1916:	f819 300b 	ldrb.w	r3, [r9, fp]
    191a:	b2db      	uxtb	r3, r3
    191c:	2b03      	cmp	r3, #3
    191e:	d1f0      	bne.n	1902 <grid_port_process_outbound_usb+0xa2>
    1920:	2d00      	cmp	r5, #0
    1922:	d0ee      	beq.n	1902 <grid_port_process_outbound_usb+0xa2>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1924:	462c      	mov	r4, r5
    1926:	1c68      	adds	r0, r5, #1
    1928:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    192c:	2102      	movs	r1, #2
    192e:	4448      	add	r0, r9
    1930:	4b67      	ldr	r3, [pc, #412]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1932:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1934:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1938:	d01f      	beq.n	197a <grid_port_process_outbound_usb+0x11a>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    193a:	2e03      	cmp	r6, #3
    193c:	f000 8082 	beq.w	1a44 <grid_port_process_outbound_usb+0x1e4>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1940:	2e01      	cmp	r6, #1
    1942:	f000 80d9 	beq.w	1af8 <grid_port_process_outbound_usb+0x298>
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1946:	2e04      	cmp	r6, #4
    1948:	f000 8160 	beq.w	1c0c <grid_port_process_outbound_usb+0x3ac>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    194c:	2e02      	cmp	r6, #2
    194e:	f000 81a6 	beq.w	1c9e <grid_port_process_outbound_usb+0x43e>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1952:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1954:	f105 0428 	add.w	r4, r5, #40	; 0x28
    1958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    195a:	441c      	add	r4, r3
    195c:	b2c2      	uxtb	r2, r0
    195e:	495d      	ldr	r1, [pc, #372]	; (1ad4 <grid_port_process_outbound_usb+0x274>)
    1960:	4620      	mov	r0, r4
    1962:	4b5d      	ldr	r3, [pc, #372]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1964:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1966:	4620      	mov	r0, r4
    1968:	4b5c      	ldr	r3, [pc, #368]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    196a:	4798      	blx	r3
    196c:	eb05 0800 	add.w	r8, r5, r0
    1970:	fa5f f388 	uxtb.w	r3, r8
    1974:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1976:	2500      	movs	r5, #0
    1978:	e7c3      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    197a:	1ce8      	adds	r0, r5, #3
    197c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1980:	2102      	movs	r1, #2
    1982:	4448      	add	r0, r9
    1984:	4b52      	ldr	r3, [pc, #328]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1986:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1988:	1d68      	adds	r0, r5, #5
    198a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    198e:	2102      	movs	r1, #2
    1990:	4448      	add	r0, r9
    1992:	4b4f      	ldr	r3, [pc, #316]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1994:	4798      	blx	r3
    1996:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    199a:	1de8      	adds	r0, r5, #7
    199c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19a0:	2102      	movs	r1, #2
    19a2:	4448      	add	r0, r9
    19a4:	4b4a      	ldr	r3, [pc, #296]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19a6:	4798      	blx	r3
    19a8:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    19aa:	f105 0009 	add.w	r0, r5, #9
    19ae:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19b2:	2102      	movs	r1, #2
    19b4:	4448      	add	r0, r9
    19b6:	4b46      	ldr	r3, [pc, #280]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19b8:	4798      	blx	r3
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    19ba:	4b49      	ldr	r3, [pc, #292]	; (1ae0 <grid_port_process_outbound_usb+0x280>)
    19bc:	7a59      	ldrb	r1, [r3, #9]
    19be:	6a3b      	ldr	r3, [r7, #32]
    19c0:	4419      	add	r1, r3
    19c2:	424b      	negs	r3, r1
    19c4:	f001 020f 	and.w	r2, r1, #15
    19c8:	f003 030f 	and.w	r3, r3, #15
    19cc:	bf58      	it	pl
    19ce:	425a      	negpl	r2, r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    19d2:	3328      	adds	r3, #40	; 0x28
    19d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
    19d6:	4419      	add	r1, r3
    19d8:	460d      	mov	r5, r1
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    19da:	b2e4      	uxtb	r4, r4
    19dc:	f504 7480 	add.w	r4, r4, #256	; 0x100
    19e0:	69fb      	ldr	r3, [r7, #28]
    19e2:	441c      	add	r4, r3
    19e4:	4263      	negs	r3, r4
    19e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    19ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    19ee:	bf58      	it	pl
    19f0:	425c      	negpl	r4, r3
    19f2:	b2e4      	uxtb	r4, r4
    19f4:	b2c1      	uxtb	r1, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19f6:	62b9      	str	r1, [r7, #40]	; 0x28
    19f8:	9105      	str	r1, [sp, #20]
    19fa:	9404      	str	r4, [sp, #16]
    19fc:	f8cd 800c 	str.w	r8, [sp, #12]
    1a00:	63fa      	str	r2, [r7, #60]	; 0x3c
    1a02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    1a06:	9302      	str	r3, [sp, #8]
    1a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1a0a:	9001      	str	r0, [sp, #4]
    1a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a0e:	9000      	str	r0, [sp, #0]
    1a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a14:	4933      	ldr	r1, [pc, #204]	; (1ae4 <grid_port_process_outbound_usb+0x284>)
    1a16:	627d      	str	r5, [r7, #36]	; 0x24
    1a18:	4628      	mov	r0, r5
    1a1a:	4d2f      	ldr	r5, [pc, #188]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1a1c:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1a20:	4b2e      	ldr	r3, [pc, #184]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    1a22:	4798      	blx	r3
    1a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1a26:	4410      	add	r0, r2
    1a28:	b2c2      	uxtb	r2, r0
    1a2a:	647a      	str	r2, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a2e:	ea48 0102 	orr.w	r1, r8, r2
    1a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a34:	4622      	mov	r2, r4
    1a36:	b2c9      	uxtb	r1, r1
    1a38:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1a3c:	4c2a      	ldr	r4, [pc, #168]	; (1ae8 <grid_port_process_outbound_usb+0x288>)
    1a3e:	47a0      	blx	r4
				current_start = 0;
    1a40:	4635      	mov	r5, r6
    1a42:	e75e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (dx == 0 && dy == 0){
    1a44:	697b      	ldr	r3, [r7, #20]
    1a46:	2b00      	cmp	r3, #0
    1a48:	f040 8127 	bne.w	1c9a <grid_port_process_outbound_usb+0x43a>
    1a4c:	69bb      	ldr	r3, [r7, #24]
    1a4e:	b10b      	cbz	r3, 1a54 <grid_port_process_outbound_usb+0x1f4>
				current_start = 0;
    1a50:	2500      	movs	r5, #0
    1a52:	e756      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a54:	1ce8      	adds	r0, r5, #3
    1a56:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a5a:	2102      	movs	r1, #2
    1a5c:	4448      	add	r0, r9
    1a5e:	4b1c      	ldr	r3, [pc, #112]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a60:	4798      	blx	r3
    1a62:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a64:	1d68      	adds	r0, r5, #5
    1a66:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a6a:	2102      	movs	r1, #2
    1a6c:	4448      	add	r0, r9
    1a6e:	4b18      	ldr	r3, [pc, #96]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a70:	4798      	blx	r3
    1a72:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a74:	1de0      	adds	r0, r4, #7
    1a76:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a7a:	2102      	movs	r1, #2
    1a7c:	4448      	add	r0, r9
    1a7e:	4b14      	ldr	r3, [pc, #80]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a80:	4798      	blx	r3
    1a82:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a84:	f104 0009 	add.w	r0, r4, #9
    1a88:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a8c:	2102      	movs	r1, #2
    1a8e:	4448      	add	r0, r9
    1a90:	4b0f      	ldr	r3, [pc, #60]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a92:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1a94:	b2ed      	uxtb	r5, r5
    1a96:	2d63      	cmp	r5, #99	; 0x63
    1a98:	d001      	beq.n	1a9e <grid_port_process_outbound_usb+0x23e>
				current_start = 0;
    1a9a:	2500      	movs	r5, #0
    1a9c:	e731      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1a9e:	b2c3      	uxtb	r3, r0
    1aa0:	b2f2      	uxtb	r2, r6
    1aa2:	fa5f f188 	uxtb.w	r1, r8
    1aa6:	4811      	ldr	r0, [pc, #68]	; (1aec <grid_port_process_outbound_usb+0x28c>)
    1aa8:	4c11      	ldr	r4, [pc, #68]	; (1af0 <grid_port_process_outbound_usb+0x290>)
    1aaa:	47a0      	blx	r4
				current_start = 0;
    1aac:	2500      	movs	r5, #0
    1aae:	e728      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1ab0:	000013d1 	.word	0x000013d1
    1ab4:	00001443 	.word	0x00001443
    1ab8:	000014f5 	.word	0x000014f5
    1abc:	20003630 	.word	0x20003630
    1ac0:	00003af9 	.word	0x00003af9
    1ac4:	00003b19 	.word	0x00003b19
    1ac8:	00003b39 	.word	0x00003b39
    1acc:	00003b59 	.word	0x00003b59
    1ad0:	000037f1 	.word	0x000037f1
    1ad4:	0000caf0 	.word	0x0000caf0
    1ad8:	0000bc21 	.word	0x0000bc21
    1adc:	0000bc69 	.word	0x0000bc69
    1ae0:	20001cf4 	.word	0x20001cf4
    1ae4:	0000ca34 	.word	0x0000ca34
    1ae8:	0000a695 	.word	0x0000a695
    1aec:	20003600 	.word	0x20003600
    1af0:	00001f2d 	.word	0x00001f2d
    1af4:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1af8:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1afc:	fa5f f38b 	uxtb.w	r3, fp
    1b00:	1b5b      	subs	r3, r3, r5
    1b02:	3b03      	subs	r3, #3
    1b04:	4a6a      	ldr	r2, [pc, #424]	; (1cb0 <grid_port_process_outbound_usb+0x450>)
    1b06:	fb82 1203 	smull	r1, r2, r2, r3
    1b0a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	4619      	mov	r1, r3
    1b12:	613b      	str	r3, [r7, #16]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1b14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b18:	3307      	adds	r3, #7
    1b1a:	f023 0307 	bic.w	r3, r3, #7
    1b1e:	ebad 0d03 	sub.w	sp, sp, r3
    1b22:	ab06      	add	r3, sp, #24
    1b24:	461e      	mov	r6, r3
    1b26:	60fb      	str	r3, [r7, #12]
					for(uint8_t j=0; j<key_array_length; j++){
    1b28:	2900      	cmp	r1, #0
    1b2a:	d064      	beq.n	1bf6 <grid_port_process_outbound_usb+0x396>
    1b2c:	3403      	adds	r4, #3
    1b2e:	eb04 0809 	add.w	r8, r4, r9
    1b32:	1e4b      	subs	r3, r1, #1
    1b34:	b2db      	uxtb	r3, r3
    1b36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b3a:	3509      	adds	r5, #9
    1b3c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b40:	444b      	add	r3, r9
    1b42:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b44:	63fe      	str	r6, [r7, #60]	; 0x3c
    1b46:	f8c7 b008 	str.w	fp, [r7, #8]
    1b4a:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    1b4e:	f8c7 a004 	str.w	sl, [r7, #4]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b52:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b56:	2102      	movs	r1, #2
    1b58:	4640      	mov	r0, r8
    1b5a:	4b56      	ldr	r3, [pc, #344]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1b5c:	4798      	blx	r3
    1b5e:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b60:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b64:	2102      	movs	r1, #2
    1b66:	eb08 0001 	add.w	r0, r8, r1
    1b6a:	4b52      	ldr	r3, [pc, #328]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1b6c:	4798      	blx	r3
    1b6e:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b70:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b74:	2102      	movs	r1, #2
    1b76:	f108 0004 	add.w	r0, r8, #4
    1b7a:	4b4e      	ldr	r3, [pc, #312]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1b7c:	4798      	blx	r3
    1b7e:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b80:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
    1b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1b86:	449a      	add	sl, r3
    1b88:	4b4b      	ldr	r3, [pc, #300]	; (1cb8 <grid_port_process_outbound_usb+0x458>)
    1b8a:	4798      	blx	r3
    1b8c:	9005      	str	r0, [sp, #20]
    1b8e:	b2e4      	uxtb	r4, r4
    1b90:	9404      	str	r4, [sp, #16]
    1b92:	b2ed      	uxtb	r5, r5
    1b94:	9503      	str	r5, [sp, #12]
    1b96:	647e      	str	r6, [r7, #68]	; 0x44
    1b98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1b9c:	9302      	str	r3, [sp, #8]
    1b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba0:	9301      	str	r3, [sp, #4]
    1ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ba4:	9300      	str	r3, [sp, #0]
    1ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1baa:	4944      	ldr	r1, [pc, #272]	; (1cbc <grid_port_process_outbound_usb+0x45c>)
    1bac:	4650      	mov	r0, sl
    1bae:	4e44      	ldr	r6, [pc, #272]	; (1cc0 <grid_port_process_outbound_usb+0x460>)
    1bb0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1bb2:	4650      	mov	r0, sl
    1bb4:	4b43      	ldr	r3, [pc, #268]	; (1cc4 <grid_port_process_outbound_usb+0x464>)
    1bb6:	4798      	blx	r3
    1bb8:	4483      	add	fp, r0
    1bba:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1bc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1bc4:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bc6:	2d82      	cmp	r5, #130	; 0x82
    1bc8:	bf14      	ite	ne
    1bca:	2500      	movne	r5, #0
    1bcc:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    1bce:	460b      	mov	r3, r1
    1bd0:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bd2:	2c80      	cmp	r4, #128	; 0x80
    1bd4:	bf14      	ite	ne
    1bd6:	2400      	movne	r4, #0
    1bd8:	2401      	moveq	r4, #1
    1bda:	708c      	strb	r4, [r1, #2]
    1bdc:	f108 0806 	add.w	r8, r8, #6
    1be0:	3303      	adds	r3, #3
    1be2:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1be6:	4598      	cmp	r8, r3
    1be8:	d1b3      	bne.n	1b52 <grid_port_process_outbound_usb+0x2f2>
    1bea:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1bee:	f8d7 b008 	ldr.w	fp, [r7, #8]
    1bf2:	f8d7 a004 	ldr.w	sl, [r7, #4]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1bf6:	6939      	ldr	r1, [r7, #16]
    1bf8:	68f8      	ldr	r0, [r7, #12]
    1bfa:	4b33      	ldr	r3, [pc, #204]	; (1cc8 <grid_port_process_outbound_usb+0x468>)
    1bfc:	4798      	blx	r3
    1bfe:	b2c0      	uxtb	r0, r0
    1c00:	4b32      	ldr	r3, [pc, #200]	; (1ccc <grid_port_process_outbound_usb+0x46c>)
    1c02:	7058      	strb	r0, [r3, #1]
    1c04:	f8d7 d024 	ldr.w	sp, [r7, #36]	; 0x24
				current_start = 0;
    1c08:	2500      	movs	r5, #0
    1c0a:	e67a      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t sys_bank		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c0c:	1ce8      	adds	r0, r5, #3
    1c0e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c12:	2102      	movs	r1, #2
    1c14:	4448      	add	r0, r9
    1c16:	4b27      	ldr	r3, [pc, #156]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1c18:	4798      	blx	r3
    1c1a:	4605      	mov	r5, r0
					uint8_t sys_bank_select = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c1c:	1d60      	adds	r0, r4, #5
    1c1e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c22:	2102      	movs	r1, #2
    1c24:	4448      	add	r0, r9
    1c26:	4b23      	ldr	r3, [pc, #140]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1c28:	4798      	blx	r3
    1c2a:	4680      	mov	r8, r0
					uint8_t sys_bank_value  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c2c:	1de0      	adds	r0, r4, #7
    1c2e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c32:	2102      	movs	r1, #2
    1c34:	4448      	add	r0, r9
    1c36:	4b1f      	ldr	r3, [pc, #124]	; (1cb4 <grid_port_process_outbound_usb+0x454>)
    1c38:	4798      	blx	r3
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c3a:	b2eb      	uxtb	r3, r5
    1c3c:	2b64      	cmp	r3, #100	; 0x64
    1c3e:	d001      	beq.n	1c44 <grid_port_process_outbound_usb+0x3e4>
				current_start = 0;
    1c40:	2500      	movs	r5, #0
    1c42:	e65e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c44:	fa5f f388 	uxtb.w	r3, r8
    1c48:	2b65      	cmp	r3, #101	; 0x65
    1c4a:	d001      	beq.n	1c50 <grid_port_process_outbound_usb+0x3f0>
				current_start = 0;
    1c4c:	2500      	movs	r5, #0
    1c4e:	e658      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c50:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_bank_value);		
    1c52:	4621      	mov	r1, r4
    1c54:	481e      	ldr	r0, [pc, #120]	; (1cd0 <grid_port_process_outbound_usb+0x470>)
    1c56:	4b1f      	ldr	r3, [pc, #124]	; (1cd4 <grid_port_process_outbound_usb+0x474>)
    1c58:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c5c:	f103 0628 	add.w	r6, r3, #40	; 0x28
    1c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1c62:	4416      	add	r6, r2
    1c64:	9404      	str	r4, [sp, #16]
    1c66:	fa5f f388 	uxtb.w	r3, r8
    1c6a:	9303      	str	r3, [sp, #12]
    1c6c:	b2ed      	uxtb	r5, r5
    1c6e:	9502      	str	r5, [sp, #8]
    1c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c72:	9201      	str	r2, [sp, #4]
    1c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1c76:	9200      	str	r2, [sp, #0]
    1c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c7c:	4916      	ldr	r1, [pc, #88]	; (1cd8 <grid_port_process_outbound_usb+0x478>)
    1c7e:	4630      	mov	r0, r6
    1c80:	4c0f      	ldr	r4, [pc, #60]	; (1cc0 <grid_port_process_outbound_usb+0x460>)
    1c82:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1c84:	4630      	mov	r0, r6
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <grid_port_process_outbound_usb+0x464>)
    1c88:	4798      	blx	r3
    1c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c8c:	eb03 0800 	add.w	r8, r3, r0
    1c90:	fa5f f388 	uxtb.w	r3, r8
    1c94:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1c96:	2500      	movs	r5, #0
    1c98:	e633      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c9a:	2500      	movs	r5, #0
    1c9c:	e631      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c9e:	2500      	movs	r5, #0
    1ca0:	e62f      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1ca4:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1ca6:	3028      	adds	r0, #40	; 0x28
    1ca8:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <grid_port_process_outbound_usb+0x47c>)
    1caa:	4798      	blx	r3
}
    1cac:	e5e3      	b.n	1876 <grid_port_process_outbound_usb+0x16>
    1cae:	bf00      	nop
    1cb0:	2aaaaaab 	.word	0x2aaaaaab
    1cb4:	000037f1 	.word	0x000037f1
    1cb8:	00003869 	.word	0x00003869
    1cbc:	0000ca7c 	.word	0x0000ca7c
    1cc0:	0000bc21 	.word	0x0000bc21
    1cc4:	0000bc69 	.word	0x0000bc69
    1cc8:	0000a111 	.word	0x0000a111
    1ccc:	20003824 	.word	0x20003824
    1cd0:	20001cf4 	.word	0x20001cf4
    1cd4:	00003959 	.word	0x00003959
    1cd8:	0000cac4 	.word	0x0000cac4
    1cdc:	00009ed1 	.word	0x00009ed1

00001ce0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1ce2:	f500 659b 	add.w	r5, r0, #1240	; 0x4d8
    1ce6:	4628      	mov	r0, r5
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <grid_port_process_outbound_ui+0x34>)
    1cea:	4798      	blx	r3
	
	if (!packet_size){
    1cec:	b900      	cbnz	r0, 1cf0 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cf0:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1cf2:	4628      	mov	r0, r5
    1cf4:	4b08      	ldr	r3, [pc, #32]	; (1d18 <grid_port_process_outbound_ui+0x38>)
    1cf6:	4798      	blx	r3
    1cf8:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1cfa:	4f08      	ldr	r7, [pc, #32]	; (1d1c <grid_port_process_outbound_ui+0x3c>)
    1cfc:	4628      	mov	r0, r5
    1cfe:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1d00:	3401      	adds	r4, #1
    1d02:	b2e4      	uxtb	r4, r4
    1d04:	b2a3      	uxth	r3, r4
    1d06:	429e      	cmp	r6, r3
    1d08:	d8f8      	bhi.n	1cfc <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1d0a:	4628      	mov	r0, r5
    1d0c:	4b04      	ldr	r3, [pc, #16]	; (1d20 <grid_port_process_outbound_ui+0x40>)
    1d0e:	4798      	blx	r3
}
    1d10:	e7ed      	b.n	1cee <grid_port_process_outbound_ui+0xe>
    1d12:	bf00      	nop
    1d14:	000013d1 	.word	0x000013d1
    1d18:	00001443 	.word	0x00001443
    1d1c:	000014cd 	.word	0x000014cd
    1d20:	000014f5 	.word	0x000014f5

00001d24 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1d24:	8983      	ldrh	r3, [r0, #12]
    1d26:	b103      	cbz	r3, 1d2a <grid_port_process_outbound_usart+0x6>
    1d28:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d2e:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1d30:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1d34:	4630      	mov	r0, r6
    1d36:	4b11      	ldr	r3, [pc, #68]	; (1d7c <grid_port_process_outbound_usart+0x58>)
    1d38:	4798      	blx	r3
    1d3a:	4604      	mov	r4, r0
    1d3c:	4607      	mov	r7, r0
		
		if (!packet_size){
    1d3e:	b910      	cbnz	r0, 1d46 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1d40:	2000      	movs	r0, #0
    1d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1d46:	4630      	mov	r0, r6
    1d48:	4b0d      	ldr	r3, [pc, #52]	; (1d80 <grid_port_process_outbound_usart+0x5c>)
    1d4a:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1d4c:	81ac      	strh	r4, [r5, #12]
    1d4e:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1d50:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1d8c <grid_port_process_outbound_usart+0x68>
    1d54:	4630      	mov	r0, r6
    1d56:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1d58:	192b      	adds	r3, r5, r4
    1d5a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1d5e:	3401      	adds	r4, #1
    1d60:	b2e4      	uxtb	r4, r4
    1d62:	42a7      	cmp	r7, r4
    1d64:	d8f6      	bhi.n	1d54 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1d66:	4630      	mov	r0, r6
    1d68:	4b06      	ldr	r3, [pc, #24]	; (1d84 <grid_port_process_outbound_usart+0x60>)
    1d6a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1d6c:	89aa      	ldrh	r2, [r5, #12]
    1d6e:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1d72:	6868      	ldr	r0, [r5, #4]
    1d74:	4b04      	ldr	r3, [pc, #16]	; (1d88 <grid_port_process_outbound_usart+0x64>)
    1d76:	4798      	blx	r3
			
		}
		
	}
	
}
    1d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d7c:	000013d1 	.word	0x000013d1
    1d80:	00001443 	.word	0x00001443
    1d84:	000014f5 	.word	0x000014f5
    1d88:	000045b9 	.word	0x000045b9
    1d8c:	000014cd 	.word	0x000014cd

00001d90 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1d90:	2201      	movs	r2, #1
    1d92:	4b01      	ldr	r3, [pc, #4]	; (1d98 <grid_led_hardware_transfer_complete_cb+0x8>)
    1d94:	701a      	strb	r2, [r3, #0]
    1d96:	4770      	bx	lr
    1d98:	20001280 	.word	0x20001280

00001d9c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1d9c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1d9e:	7844      	ldrb	r4, [r0, #1]
    1da0:	428c      	cmp	r4, r1
    1da2:	d802      	bhi.n	1daa <grid_led_set_color+0xe>
		return -1;		
    1da4:	20ff      	movs	r0, #255	; 0xff
}
    1da6:	bc30      	pop	{r4, r5}
    1da8:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1daa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1dae:	0089      	lsls	r1, r1, #2
    1db0:	4c09      	ldr	r4, [pc, #36]	; (1dd8 <grid_led_set_color+0x3c>)
    1db2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1db6:	68c3      	ldr	r3, [r0, #12]
    1db8:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1dbe:	68c3      	ldr	r3, [r0, #12]
    1dc0:	440b      	add	r3, r1
    1dc2:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1dc4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1dc8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1dcc:	68c3      	ldr	r3, [r0, #12]
    1dce:	4419      	add	r1, r3
    1dd0:	608a      	str	r2, [r1, #8]
		return 0;
    1dd2:	2000      	movs	r0, #0
    1dd4:	e7e7      	b.n	1da6 <grid_led_set_color+0xa>
    1dd6:	bf00      	nop
    1dd8:	20001d94 	.word	0x20001d94

00001ddc <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1ddc:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1dde:	4c06      	ldr	r4, [pc, #24]	; (1df8 <grid_led_hardware_init+0x1c>)
    1de0:	f100 0114 	add.w	r1, r0, #20
    1de4:	4620      	mov	r0, r4
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <grid_led_hardware_init+0x20>)
    1de8:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1dea:	4a05      	ldr	r2, [pc, #20]	; (1e00 <grid_led_hardware_init+0x24>)
    1dec:	2100      	movs	r1, #0
    1dee:	4620      	mov	r0, r4
    1df0:	4b04      	ldr	r3, [pc, #16]	; (1e04 <grid_led_hardware_init+0x28>)
    1df2:	4798      	blx	r3
    1df4:	bd10      	pop	{r4, pc}
    1df6:	bf00      	nop
    1df8:	20001100 	.word	0x20001100
    1dfc:	00004b11 	.word	0x00004b11
    1e00:	00001d91 	.word	0x00001d91
    1e04:	00004ae1 	.word	0x00004ae1

00001e08 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1e08:	7840      	ldrb	r0, [r0, #1]
    1e0a:	4770      	bx	lr

00001e0c <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1e0c:	7843      	ldrb	r3, [r0, #1]
    1e0e:	b1f3      	cbz	r3, 1e4e <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1e10:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1e12:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1e14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1e18:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1e1c:	6902      	ldr	r2, [r0, #16]
    1e1e:	440a      	add	r2, r1
    1e20:	7ad1      	ldrb	r1, [r2, #11]
    1e22:	7b14      	ldrb	r4, [r2, #12]
    1e24:	4421      	add	r1, r4
    1e26:	72d1      	strb	r1, [r2, #11]
    1e28:	7842      	ldrb	r2, [r0, #1]
    1e2a:	441a      	add	r2, r3
    1e2c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1e30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e34:	6901      	ldr	r1, [r0, #16]
    1e36:	440a      	add	r2, r1
    1e38:	7ad1      	ldrb	r1, [r2, #11]
    1e3a:	7b14      	ldrb	r4, [r2, #12]
    1e3c:	4421      	add	r1, r4
    1e3e:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1e40:	3301      	adds	r3, #1
    1e42:	b2db      	uxtb	r3, r3
    1e44:	7842      	ldrb	r2, [r0, #1]
    1e46:	429a      	cmp	r2, r3
    1e48:	d8e4      	bhi.n	1e14 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e4e:	4770      	bx	lr

00001e50 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e50:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1e52:	7844      	ldrb	r4, [r0, #1]
    1e54:	fb02 1404 	mla	r4, r2, r4, r1
    1e58:	6905      	ldr	r5, [r0, #16]
    1e5a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1e5e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1e62:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1e64:	7843      	ldrb	r3, [r0, #1]
    1e66:	fb02 1303 	mla	r3, r2, r3, r1
    1e6a:	6904      	ldr	r4, [r0, #16]
    1e6c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e70:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1e74:	4423      	add	r3, r4
    1e76:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1e7a:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1e7c:	7843      	ldrb	r3, [r0, #1]
    1e7e:	fb02 1203 	mla	r2, r2, r3, r1
    1e82:	6903      	ldr	r3, [r0, #16]
    1e84:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1e88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e8c:	441a      	add	r2, r3
    1e8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1e92:	7093      	strb	r3, [r2, #2]
}
    1e94:	bc70      	pop	{r4, r5, r6}
    1e96:	4770      	bx	lr

00001e98 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e98:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1e9a:	7844      	ldrb	r4, [r0, #1]
    1e9c:	fb02 1404 	mla	r4, r2, r4, r1
    1ea0:	6905      	ldr	r5, [r0, #16]
    1ea2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1ea6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1eaa:	442c      	add	r4, r5
    1eac:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1eae:	7843      	ldrb	r3, [r0, #1]
    1eb0:	fb02 1303 	mla	r3, r2, r3, r1
    1eb4:	6904      	ldr	r4, [r0, #16]
    1eb6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1eba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1ebe:	4423      	add	r3, r4
    1ec0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1ec4:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1ec6:	7843      	ldrb	r3, [r0, #1]
    1ec8:	fb02 1203 	mla	r2, r2, r3, r1
    1ecc:	6903      	ldr	r3, [r0, #16]
    1ece:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1ed2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1ed6:	441a      	add	r2, r3
    1ed8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1edc:	7153      	strb	r3, [r2, #5]
}
    1ede:	bc70      	pop	{r4, r5, r6}
    1ee0:	4770      	bx	lr

00001ee2 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1ee2:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1ee4:	7844      	ldrb	r4, [r0, #1]
    1ee6:	fb02 1404 	mla	r4, r2, r4, r1
    1eea:	6905      	ldr	r5, [r0, #16]
    1eec:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1ef0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1ef4:	442c      	add	r4, r5
    1ef6:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1ef8:	7843      	ldrb	r3, [r0, #1]
    1efa:	fb02 1303 	mla	r3, r2, r3, r1
    1efe:	6904      	ldr	r4, [r0, #16]
    1f00:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1f04:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1f08:	4423      	add	r3, r4
    1f0a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1f0e:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1f10:	7843      	ldrb	r3, [r0, #1]
    1f12:	fb02 1203 	mla	r2, r2, r3, r1
    1f16:	6903      	ldr	r3, [r0, #16]
    1f18:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1f1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f20:	441a      	add	r2, r3
    1f22:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1f26:	7213      	strb	r3, [r2, #8]
}
    1f28:	bc70      	pop	{r4, r5, r6}
    1f2a:	4770      	bx	lr

00001f2c <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1f2c:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1f2e:	7844      	ldrb	r4, [r0, #1]
    1f30:	fb02 1204 	mla	r2, r2, r4, r1
    1f34:	6901      	ldr	r1, [r0, #16]
    1f36:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1f3a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1f3e:	440a      	add	r2, r1
    1f40:	72d3      	strb	r3, [r2, #11]
}
    1f42:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f46:	4770      	bx	lr

00001f48 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1f48:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1f4a:	7844      	ldrb	r4, [r0, #1]
    1f4c:	fb02 1204 	mla	r2, r2, r4, r1
    1f50:	6901      	ldr	r1, [r0, #16]
    1f52:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1f56:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1f5a:	440a      	add	r2, r1
    1f5c:	7313      	strb	r3, [r2, #12]
}
    1f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f62:	4770      	bx	lr

00001f64 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f68:	b083      	sub	sp, #12
    1f6a:	4604      	mov	r4, r0
	mod->led_number = length;
    1f6c:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1f6e:	b2cd      	uxtb	r5, r1
    1f70:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1f74:	0080      	lsls	r0, r0, #2
    1f76:	3090      	adds	r0, #144	; 0x90
    1f78:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1f7a:	4f3e      	ldr	r7, [pc, #248]	; (2074 <grid_led_buffer_init+0x110>)
    1f7c:	47b8      	blx	r7
    1f7e:	4606      	mov	r6, r0
    1f80:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1f82:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1f86:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1f88:	201a      	movs	r0, #26
    1f8a:	fb00 f005 	mul.w	r0, r0, r5
    1f8e:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1f90:	2e00      	cmp	r6, #0
    1f92:	d06e      	beq.n	2072 <grid_led_buffer_init+0x10e>
    1f94:	2800      	cmp	r0, #0
    1f96:	d06c      	beq.n	2072 <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1f98:	6120      	str	r0, [r4, #16]
    1f9a:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1f9c:	4619      	mov	r1, r3
    1f9e:	68a2      	ldr	r2, [r4, #8]
    1fa0:	54d1      	strb	r1, [r2, r3]
    1fa2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1fa4:	2b90      	cmp	r3, #144	; 0x90
    1fa6:	d1fa      	bne.n	1f9e <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1fa8:	7863      	ldrb	r3, [r4, #1]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d05e      	beq.n	206c <grid_led_buffer_init+0x108>
    1fae:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1fb0:	462e      	mov	r6, r5
    1fb2:	4f31      	ldr	r7, [pc, #196]	; (2078 <grid_led_buffer_init+0x114>)
    1fb4:	9600      	str	r6, [sp, #0]
    1fb6:	4633      	mov	r3, r6
    1fb8:	4632      	mov	r2, r6
    1fba:	4629      	mov	r1, r5
    1fbc:	4620      	mov	r0, r4
    1fbe:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1fc0:	3501      	adds	r5, #1
    1fc2:	7863      	ldrb	r3, [r4, #1]
    1fc4:	42ab      	cmp	r3, r5
    1fc6:	d8f5      	bhi.n	1fb4 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d04f      	beq.n	206c <grid_led_buffer_init+0x108>
    1fcc:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1fce:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2080 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1fd2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2084 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1fd6:	2500      	movs	r5, #0
    1fd8:	9501      	str	r5, [sp, #4]
    1fda:	9500      	str	r5, [sp, #0]
    1fdc:	462b      	mov	r3, r5
    1fde:	462a      	mov	r2, r5
    1fe0:	4631      	mov	r1, r6
    1fe2:	4620      	mov	r0, r4
    1fe4:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1fe6:	9501      	str	r5, [sp, #4]
    1fe8:	237f      	movs	r3, #127	; 0x7f
    1fea:	9300      	str	r3, [sp, #0]
    1fec:	462b      	mov	r3, r5
    1fee:	462a      	mov	r2, r5
    1ff0:	4631      	mov	r1, r6
    1ff2:	4620      	mov	r0, r4
    1ff4:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1ff6:	9501      	str	r5, [sp, #4]
    1ff8:	23ff      	movs	r3, #255	; 0xff
    1ffa:	9300      	str	r3, [sp, #0]
    1ffc:	462b      	mov	r3, r5
    1ffe:	462a      	mov	r2, r5
    2000:	4631      	mov	r1, r6
    2002:	4620      	mov	r0, r4
    2004:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2088 <grid_led_buffer_init+0x124>
    2008:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    200a:	462b      	mov	r3, r5
    200c:	462a      	mov	r2, r5
    200e:	4631      	mov	r1, r6
    2010:	4620      	mov	r0, r4
    2012:	f8df 8078 	ldr.w	r8, [pc, #120]	; 208c <grid_led_buffer_init+0x128>
    2016:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    2018:	462b      	mov	r3, r5
    201a:	462a      	mov	r2, r5
    201c:	4631      	mov	r1, r6
    201e:	4620      	mov	r0, r4
    2020:	4f16      	ldr	r7, [pc, #88]	; (207c <grid_led_buffer_init+0x118>)
    2022:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    2024:	9501      	str	r5, [sp, #4]
    2026:	9500      	str	r5, [sp, #0]
    2028:	462b      	mov	r3, r5
    202a:	2201      	movs	r2, #1
    202c:	4631      	mov	r1, r6
    202e:	4620      	mov	r0, r4
    2030:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    2032:	9501      	str	r5, [sp, #4]
    2034:	9500      	str	r5, [sp, #0]
    2036:	462b      	mov	r3, r5
    2038:	2201      	movs	r2, #1
    203a:	4631      	mov	r1, r6
    203c:	4620      	mov	r0, r4
    203e:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    2040:	9501      	str	r5, [sp, #4]
    2042:	9500      	str	r5, [sp, #0]
    2044:	462b      	mov	r3, r5
    2046:	2201      	movs	r2, #1
    2048:	4631      	mov	r1, r6
    204a:	4620      	mov	r0, r4
    204c:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    204e:	462b      	mov	r3, r5
    2050:	2201      	movs	r2, #1
    2052:	4631      	mov	r1, r6
    2054:	4620      	mov	r0, r4
    2056:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2058:	462b      	mov	r3, r5
    205a:	2201      	movs	r2, #1
    205c:	4631      	mov	r1, r6
    205e:	4620      	mov	r0, r4
    2060:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    2062:	3601      	adds	r6, #1
    2064:	b2f6      	uxtb	r6, r6
    2066:	7863      	ldrb	r3, [r4, #1]
    2068:	42b3      	cmp	r3, r6
    206a:	d8b4      	bhi.n	1fd6 <grid_led_buffer_init+0x72>
}
    206c:	b003      	add	sp, #12
    206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2072:	e7fe      	b.n	2072 <grid_led_buffer_init+0x10e>
    2074:	0000b83d 	.word	0x0000b83d
    2078:	00001d9d 	.word	0x00001d9d
    207c:	00001f2d 	.word	0x00001f2d
    2080:	00001e51 	.word	0x00001e51
    2084:	00001e99 	.word	0x00001e99
    2088:	00001ee3 	.word	0x00001ee3
    208c:	00001f49 	.word	0x00001f49

00002090 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    2090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2094:	b083      	sub	sp, #12
    2096:	f890 c001 	ldrb.w	ip, [r0, #1]
    209a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    209e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    20a2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    20a6:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    20aa:	6904      	ldr	r4, [r0, #16]
    20ac:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    20ae:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    20b0:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    20b4:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    20b6:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    20b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2140 <grid_led_render+0xb0>
    20bc:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    20be:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    20c2:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    20c4:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    20c8:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    20cc:	f894 a000 	ldrb.w	sl, [r4]
    20d0:	f894 b003 	ldrb.w	fp, [r4, #3]
    20d4:	fb05 fb0b 	mul.w	fp, r5, fp
    20d8:	fb09 bb0a 	mla	fp, r9, sl, fp
    20dc:	f894 a006 	ldrb.w	sl, [r4, #6]
    20e0:	fb06 ba0a 	mla	sl, r6, sl, fp
    20e4:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    20e6:	f894 a001 	ldrb.w	sl, [r4, #1]
    20ea:	f894 b004 	ldrb.w	fp, [r4, #4]
    20ee:	fb05 fb0b 	mul.w	fp, r5, fp
    20f2:	fb09 bb0a 	mla	fp, r9, sl, fp
    20f6:	f894 a007 	ldrb.w	sl, [r4, #7]
    20fa:	fb06 ba0a 	mla	sl, r6, sl, fp
    20fe:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2100:	f894 a002 	ldrb.w	sl, [r4, #2]
    2104:	f894 b005 	ldrb.w	fp, [r4, #5]
    2108:	fb05 f50b 	mul.w	r5, r5, fp
    210c:	fb09 590a 	mla	r9, r9, sl, r5
    2110:	7a25      	ldrb	r5, [r4, #8]
    2112:	fb06 9505 	mla	r5, r6, r5, r9
    2116:	44ae      	add	lr, r5
    2118:	3f01      	subs	r7, #1
    211a:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    211c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2120:	d1cc      	bne.n	20bc <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    2122:	f3ce 2447 	ubfx	r4, lr, #9, #8
    2126:	9400      	str	r4, [sp, #0]
    2128:	f3c3 2347 	ubfx	r3, r3, #9, #8
    212c:	f3c2 2247 	ubfx	r2, r2, #9, #8
    2130:	4c02      	ldr	r4, [pc, #8]	; (213c <grid_led_render+0xac>)
    2132:	47a0      	blx	r4
	
}
    2134:	b003      	add	sp, #12
    2136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    213a:	bf00      	nop
    213c:	00001d9d 	.word	0x00001d9d
    2140:	20000000 	.word	0x20000000

00002144 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2144:	7843      	ldrb	r3, [r0, #1]
    2146:	b15b      	cbz	r3, 2160 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2148:	b570      	push	{r4, r5, r6, lr}
    214a:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    214c:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    214e:	4e05      	ldr	r6, [pc, #20]	; (2164 <grid_led_render_all+0x20>)
    2150:	4621      	mov	r1, r4
    2152:	4628      	mov	r0, r5
    2154:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2156:	3401      	adds	r4, #1
    2158:	786b      	ldrb	r3, [r5, #1]
    215a:	42a3      	cmp	r3, r4
    215c:	d8f8      	bhi.n	2150 <grid_led_render_all+0xc>
    215e:	bd70      	pop	{r4, r5, r6, pc}
    2160:	4770      	bx	lr
    2162:	bf00      	nop
    2164:	00002091 	.word	0x00002091

00002168 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    2168:	b510      	push	{r4, lr}
    216a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    216c:	2200      	movs	r2, #0
    216e:	4b08      	ldr	r3, [pc, #32]	; (2190 <grid_led_hardware_start_transfer_blocking+0x28>)
    2170:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2172:	4808      	ldr	r0, [pc, #32]	; (2194 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2174:	4b08      	ldr	r3, [pc, #32]	; (2198 <grid_led_hardware_start_transfer_blocking+0x30>)
    2176:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2178:	88a2      	ldrh	r2, [r4, #4]
    217a:	68a1      	ldr	r1, [r4, #8]
    217c:	6960      	ldr	r0, [r4, #20]
    217e:	4b07      	ldr	r3, [pc, #28]	; (219c <grid_led_hardware_start_transfer_blocking+0x34>)
    2180:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    2182:	4a03      	ldr	r2, [pc, #12]	; (2190 <grid_led_hardware_start_transfer_blocking+0x28>)
    2184:	7813      	ldrb	r3, [r2, #0]
    2186:	b2db      	uxtb	r3, r3
    2188:	2b01      	cmp	r3, #1
    218a:	d1fb      	bne.n	2184 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    218c:	bd10      	pop	{r4, pc}
    218e:	bf00      	nop
    2190:	20001280 	.word	0x20001280
    2194:	20001100 	.word	0x20001100
    2198:	00004ab9 	.word	0x00004ab9
    219c:	000045b9 	.word	0x000045b9

000021a0 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    21a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21a4:	b085      	sub	sp, #20
    21a6:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    21a8:	4b20      	ldr	r3, [pc, #128]	; (222c <grid_led_startup_animation+0x8c>)
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    21ae:	2b20      	cmp	r3, #32
    21b0:	d00a      	beq.n	21c8 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    21b2:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    21b6:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    21ba:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    21be:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    21c2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2238 <grid_led_startup_animation+0x98>
    21c6:	e01e      	b.n	2206 <grid_led_startup_animation+0x66>
		s= 2;
    21c8:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    21cc:	2300      	movs	r3, #0
    21ce:	9303      	str	r3, [sp, #12]
    21d0:	e7f3      	b.n	21ba <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    21d2:	9500      	str	r5, [sp, #0]
    21d4:	462b      	mov	r3, r5
    21d6:	463a      	mov	r2, r7
    21d8:	4621      	mov	r1, r4
    21da:	4630      	mov	r0, r6
    21dc:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    21de:	3401      	adds	r4, #1
    21e0:	b2e4      	uxtb	r4, r4
    21e2:	7873      	ldrb	r3, [r6, #1]
    21e4:	42a3      	cmp	r3, r4
    21e6:	d8f4      	bhi.n	21d2 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    21e8:	4630      	mov	r0, r6
    21ea:	4b11      	ldr	r3, [pc, #68]	; (2230 <grid_led_startup_animation+0x90>)
    21ec:	4798      	blx	r3
		delay_ms(1);
    21ee:	2001      	movs	r0, #1
    21f0:	4b10      	ldr	r3, [pc, #64]	; (2234 <grid_led_startup_animation+0x94>)
    21f2:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    21f4:	f109 0901 	add.w	r9, r9, #1
    21f8:	fa5f f989 	uxtb.w	r9, r9
    21fc:	f10a 3aff 	add.w	sl, sl, #4294967295
    2200:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2204:	d00f      	beq.n	2226 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    2206:	7873      	ldrb	r3, [r6, #1]
    2208:	2b00      	cmp	r3, #0
    220a:	d0ed      	beq.n	21e8 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    220c:	fb0b f709 	mul.w	r7, fp, r9
    2210:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    2214:	9b03      	ldr	r3, [sp, #12]
    2216:	fb09 f503 	mul.w	r5, r9, r3
    221a:	fb0b f505 	mul.w	r5, fp, r5
    221e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    2222:	2400      	movs	r4, #0
    2224:	e7d5      	b.n	21d2 <grid_led_startup_animation+0x32>
}
    2226:	b005      	add	sp, #20
    2228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    222c:	40000c00 	.word	0x40000c00
    2230:	00002169 	.word	0x00002169
    2234:	0000442d 	.word	0x0000442d
    2238:	00001d9d 	.word	0x00001d9d

0000223c <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    223c:	b570      	push	{r4, r5, r6, lr}
    223e:	4604      	mov	r4, r0
    2240:	4e2b      	ldr	r6, [pc, #172]	; (22f0 <grid_led_init+0xb4>)
    2242:	2200      	movs	r2, #0
    2244:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2246:	f003 0001 	and.w	r0, r3, #1
    224a:	2800      	cmp	r0, #0
    224c:	bf14      	ite	ne
    224e:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    2252:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2256:	f3c3 0540 	ubfx	r5, r3, #1, #1
    225a:	2d00      	cmp	r5, #0
    225c:	bf14      	ite	ne
    225e:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    2262:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2266:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2268:	f3c3 0080 	ubfx	r0, r3, #2, #1
    226c:	2800      	cmp	r0, #0
    226e:	bf14      	ite	ne
    2270:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2274:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2278:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    227a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    227e:	2d00      	cmp	r5, #0
    2280:	bf14      	ite	ne
    2282:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2286:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    228a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    228c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2290:	2d00      	cmp	r5, #0
    2292:	bf14      	ite	ne
    2294:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2298:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    229c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    229e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    22a2:	2800      	cmp	r0, #0
    22a4:	bf14      	ite	ne
    22a6:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    22aa:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    22ae:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    22b0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    22b4:	2800      	cmp	r0, #0
    22b6:	bf14      	ite	ne
    22b8:	200e      	movne	r0, #14
    22ba:	2008      	moveq	r0, #8
    22bc:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    22be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    22c2:	2b00      	cmp	r3, #0
    22c4:	bf14      	ite	ne
    22c6:	23e0      	movne	r3, #224	; 0xe0
    22c8:	2380      	moveq	r3, #128	; 0x80
    22ca:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    22cc:	f846 3f04 	str.w	r3, [r6, #4]!
    22d0:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    22d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    22d6:	d1b5      	bne.n	2244 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    22d8:	4620      	mov	r0, r4
    22da:	4b06      	ldr	r3, [pc, #24]	; (22f4 <grid_led_init+0xb8>)
    22dc:	4798      	blx	r3
	grid_led_hardware_init(mod);
    22de:	4620      	mov	r0, r4
    22e0:	4b05      	ldr	r3, [pc, #20]	; (22f8 <grid_led_init+0xbc>)
    22e2:	4798      	blx	r3
	grid_led_startup_animation(mod);
    22e4:	4620      	mov	r0, r4
    22e6:	4b05      	ldr	r3, [pc, #20]	; (22fc <grid_led_init+0xc0>)
    22e8:	4798      	blx	r3
}
    22ea:	2000      	movs	r0, #0
    22ec:	bd70      	pop	{r4, r5, r6, pc}
    22ee:	bf00      	nop
    22f0:	20001d90 	.word	0x20001d90
    22f4:	00001f65 	.word	0x00001f65
    22f8:	00001ddd 	.word	0x00001ddd
    22fc:	000021a1 	.word	0x000021a1

00002300 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    2300:	b510      	push	{r4, lr}
    2302:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2304:	2200      	movs	r2, #0
    2306:	4b05      	ldr	r3, [pc, #20]	; (231c <grid_led_hardware_start_transfer+0x1c>)
    2308:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    230a:	4805      	ldr	r0, [pc, #20]	; (2320 <grid_led_hardware_start_transfer+0x20>)
    230c:	4b05      	ldr	r3, [pc, #20]	; (2324 <grid_led_hardware_start_transfer+0x24>)
    230e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2310:	88a2      	ldrh	r2, [r4, #4]
    2312:	68a1      	ldr	r1, [r4, #8]
    2314:	6960      	ldr	r0, [r4, #20]
    2316:	4b04      	ldr	r3, [pc, #16]	; (2328 <grid_led_hardware_start_transfer+0x28>)
    2318:	4798      	blx	r3
    231a:	bd10      	pop	{r4, pc}
    231c:	20001280 	.word	0x20001280
    2320:	20001100 	.word	0x20001100
    2324:	00004ab9 	.word	0x00004ab9
    2328:	000045b9 	.word	0x000045b9

0000232c <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    232c:	4b01      	ldr	r3, [pc, #4]	; (2334 <grid_led_hardware_is_transfer_completed+0x8>)
    232e:	7818      	ldrb	r0, [r3, #0]
	
    2330:	4770      	bx	lr
    2332:	bf00      	nop
    2334:	20001280 	.word	0x20001280

00002338 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2338:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    233a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    233e:	4b13      	ldr	r3, [pc, #76]	; (238c <grid_module_common_init+0x54>)
    2340:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2344:	4b12      	ldr	r3, [pc, #72]	; (2390 <grid_module_common_init+0x58>)
    2346:	4798      	blx	r3
    2348:	b178      	cbz	r0, 236a <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    234a:	4b11      	ldr	r3, [pc, #68]	; (2390 <grid_module_common_init+0x58>)
    234c:	4798      	blx	r3
    234e:	2880      	cmp	r0, #128	; 0x80
    2350:	d00f      	beq.n	2372 <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    2352:	4b0f      	ldr	r3, [pc, #60]	; (2390 <grid_module_common_init+0x58>)
    2354:	4798      	blx	r3
    2356:	2840      	cmp	r0, #64	; 0x40
    2358:	d00f      	beq.n	237a <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    235a:	4b0d      	ldr	r3, [pc, #52]	; (2390 <grid_module_common_init+0x58>)
    235c:	4798      	blx	r3
    235e:	28c0      	cmp	r0, #192	; 0xc0
    2360:	d00f      	beq.n	2382 <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    2362:	480c      	ldr	r0, [pc, #48]	; (2394 <grid_module_common_init+0x5c>)
    2364:	4b0c      	ldr	r3, [pc, #48]	; (2398 <grid_module_common_init+0x60>)
    2366:	4798      	blx	r3
    2368:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    236a:	480c      	ldr	r0, [pc, #48]	; (239c <grid_module_common_init+0x64>)
    236c:	4b0c      	ldr	r3, [pc, #48]	; (23a0 <grid_module_common_init+0x68>)
    236e:	4798      	blx	r3
    2370:	e7eb      	b.n	234a <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    2372:	480a      	ldr	r0, [pc, #40]	; (239c <grid_module_common_init+0x64>)
    2374:	4b0b      	ldr	r3, [pc, #44]	; (23a4 <grid_module_common_init+0x6c>)
    2376:	4798      	blx	r3
    2378:	e7eb      	b.n	2352 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    237a:	4808      	ldr	r0, [pc, #32]	; (239c <grid_module_common_init+0x64>)
    237c:	4b0a      	ldr	r3, [pc, #40]	; (23a8 <grid_module_common_init+0x70>)
    237e:	4798      	blx	r3
    2380:	e7eb      	b.n	235a <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    2382:	4806      	ldr	r0, [pc, #24]	; (239c <grid_module_common_init+0x64>)
    2384:	4b09      	ldr	r3, [pc, #36]	; (23ac <grid_module_common_init+0x74>)
    2386:	4798      	blx	r3
    2388:	e7eb      	b.n	2362 <grid_module_common_init+0x2a>
    238a:	bf00      	nop
    238c:	41008000 	.word	0x41008000
    2390:	00003869 	.word	0x00003869
    2394:	20001cf4 	.word	0x20001cf4
    2398:	000036f1 	.word	0x000036f1
    239c:	20001ce4 	.word	0x20001ce4
    23a0:	0000337d 	.word	0x0000337d
    23a4:	000025fd 	.word	0x000025fd
    23a8:	00003035 	.word	0x00003035
    23ac:	00002b71 	.word	0x00002b71

000023b0 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    23b0:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    23b2:	4803      	ldr	r0, [pc, #12]	; (23c0 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    23b4:	4c03      	ldr	r4, [pc, #12]	; (23c4 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    23b6:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    23b8:	4803      	ldr	r0, [pc, #12]	; (23c8 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    23ba:	47a0      	blx	r4
    23bc:	bd10      	pop	{r4, pc}
    23be:	bf00      	nop
    23c0:	20001030 	.word	0x20001030
    23c4:	00004385 	.word	0x00004385
    23c8:	20001204 	.word	0x20001204

000023cc <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    23cc:	4b70      	ldr	r3, [pc, #448]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    23ce:	781b      	ldrb	r3, [r3, #0]
    23d0:	2b00      	cmp	r3, #0
    23d2:	f000 80d6 	beq.w	2582 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1b6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    23d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23da:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    23dc:	2300      	movs	r3, #0
    23de:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    23e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    23e6:	4b6a      	ldr	r3, [pc, #424]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    23e8:	785a      	ldrb	r2, [r3, #1]
    23ea:	3208      	adds	r2, #8
    23ec:	4969      	ldr	r1, [pc, #420]	; (2594 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c8>)
    23ee:	5c8d      	ldrb	r5, [r1, r2]
    23f0:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    23f2:	785a      	ldrb	r2, [r3, #1]
    23f4:	b2d2      	uxtb	r2, r2
    23f6:	5c8c      	ldrb	r4, [r1, r2]
    23f8:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    23fa:	785a      	ldrb	r2, [r3, #1]
    23fc:	3201      	adds	r2, #1
    23fe:	b2d2      	uxtb	r2, r2
    2400:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2402:	785a      	ldrb	r2, [r3, #1]
    2404:	f002 0207 	and.w	r2, r2, #7
    2408:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    240a:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    240c:	f013 0f01 	tst.w	r3, #1
    2410:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2414:	4b60      	ldr	r3, [pc, #384]	; (2598 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2416:	bf14      	ite	ne
    2418:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    241c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    2420:	4b5b      	ldr	r3, [pc, #364]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2422:	785b      	ldrb	r3, [r3, #1]
    2424:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    242c:	4b5a      	ldr	r3, [pc, #360]	; (2598 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    242e:	bf14      	ite	ne
    2430:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2434:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2438:	4b55      	ldr	r3, [pc, #340]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    243a:	785b      	ldrb	r3, [r3, #1]
    243c:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2440:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2444:	4b54      	ldr	r3, [pc, #336]	; (2598 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2446:	bf14      	ite	ne
    2448:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    244c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2450:	2302      	movs	r3, #2
    2452:	f10d 0206 	add.w	r2, sp, #6
    2456:	2100      	movs	r1, #0
    2458:	4850      	ldr	r0, [pc, #320]	; (259c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d0>)
    245a:	4e51      	ldr	r6, [pc, #324]	; (25a0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    245c:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    245e:	2302      	movs	r3, #2
    2460:	aa01      	add	r2, sp, #4
    2462:	2100      	movs	r1, #0
    2464:	484f      	ldr	r0, [pc, #316]	; (25a4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    2466:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    2468:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    246c:	f242 7310 	movw	r3, #10000	; 0x2710
    2470:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    2472:	bf8c      	ite	hi
    2474:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2476:	237f      	movls	r3, #127	; 0x7f
    2478:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    247c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2480:	f242 7310 	movw	r3, #10000	; 0x2710
    2484:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    2486:	bf8c      	ite	hi
    2488:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    248a:	237f      	movls	r3, #127	; 0x7f
    248c:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0]){
    2490:	012e      	lsls	r6, r5, #4
    2492:	4b45      	ldr	r3, [pc, #276]	; (25a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2494:	689b      	ldr	r3, [r3, #8]
    2496:	4433      	add	r3, r6
    2498:	68da      	ldr	r2, [r3, #12]
    249a:	7812      	ldrb	r2, [r2, #0]
    249c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    24a0:	4291      	cmp	r1, r2
    24a2:	d02e      	beq.n	2502 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x136>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    24a4:	2a00      	cmp	r2, #0
    24a6:	bf0c      	ite	eq
    24a8:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    24ac:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    24b0:	6858      	ldr	r0, [r3, #4]
    24b2:	bf0c      	ite	eq
    24b4:	2290      	moveq	r2, #144	; 0x90
    24b6:	2280      	movne	r2, #128	; 0x80
    24b8:	2102      	movs	r1, #2
    24ba:	3005      	adds	r0, #5
    24bc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 25b0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>
    24c0:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    24c2:	4f39      	ldr	r7, [pc, #228]	; (25a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    24c4:	68bb      	ldr	r3, [r7, #8]
    24c6:	4433      	add	r3, r6
    24c8:	6858      	ldr	r0, [r3, #4]
    24ca:	462a      	mov	r2, r5
    24cc:	2102      	movs	r1, #2
    24ce:	3007      	adds	r0, #7
    24d0:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    24d2:	68bb      	ldr	r3, [r7, #8]
    24d4:	4433      	add	r3, r6
    24d6:	6858      	ldr	r0, [r3, #4]
    24d8:	464a      	mov	r2, r9
    24da:	2102      	movs	r1, #2
    24dc:	3009      	adds	r0, #9
    24de:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    24e0:	68bb      	ldr	r3, [r7, #8]
    24e2:	4433      	add	r3, r6
    24e4:	6858      	ldr	r0, [r3, #4]
    24e6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    24ea:	2102      	movs	r1, #2
    24ec:	3015      	adds	r0, #21
    24ee:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    24f0:	68bb      	ldr	r3, [r7, #8]
    24f2:	441e      	add	r6, r3
    24f4:	68f3      	ldr	r3, [r6, #12]
    24f6:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    24fa:	4629      	mov	r1, r5
    24fc:	4638      	mov	r0, r7
    24fe:	4b2b      	ldr	r3, [pc, #172]	; (25ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    2500:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0]){
    2502:	0125      	lsls	r5, r4, #4
    2504:	4b28      	ldr	r3, [pc, #160]	; (25a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2506:	689b      	ldr	r3, [r3, #8]
    2508:	442b      	add	r3, r5
    250a:	68da      	ldr	r2, [r3, #12]
    250c:	7812      	ldrb	r2, [r2, #0]
    250e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2512:	4291      	cmp	r1, r2
    2514:	d02d      	beq.n	2572 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a6>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2516:	2a00      	cmp	r2, #0
    2518:	bf0c      	ite	eq
    251a:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    251e:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    2522:	6858      	ldr	r0, [r3, #4]
    2524:	bf0c      	ite	eq
    2526:	2290      	moveq	r2, #144	; 0x90
    2528:	2280      	movne	r2, #128	; 0x80
    252a:	2102      	movs	r1, #2
    252c:	3005      	adds	r0, #5
    252e:	4f20      	ldr	r7, [pc, #128]	; (25b0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    2530:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2532:	4e1d      	ldr	r6, [pc, #116]	; (25a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2534:	68b3      	ldr	r3, [r6, #8]
    2536:	442b      	add	r3, r5
    2538:	6858      	ldr	r0, [r3, #4]
    253a:	4622      	mov	r2, r4
    253c:	2102      	movs	r1, #2
    253e:	3007      	adds	r0, #7
    2540:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    2542:	68b3      	ldr	r3, [r6, #8]
    2544:	442b      	add	r3, r5
    2546:	6858      	ldr	r0, [r3, #4]
    2548:	4642      	mov	r2, r8
    254a:	2102      	movs	r1, #2
    254c:	3009      	adds	r0, #9
    254e:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2550:	68b3      	ldr	r3, [r6, #8]
    2552:	442b      	add	r3, r5
    2554:	6858      	ldr	r0, [r3, #4]
    2556:	ea4f 0248 	mov.w	r2, r8, lsl #1
    255a:	2102      	movs	r1, #2
    255c:	3015      	adds	r0, #21
    255e:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    2560:	68b3      	ldr	r3, [r6, #8]
    2562:	441d      	add	r5, r3
    2564:	68eb      	ldr	r3, [r5, #12]
    2566:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    256a:	4621      	mov	r1, r4
    256c:	4630      	mov	r0, r6
    256e:	4b0f      	ldr	r3, [pc, #60]	; (25ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    2570:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2572:	2200      	movs	r2, #0
    2574:	4b06      	ldr	r3, [pc, #24]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2576:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2578:	4b0e      	ldr	r3, [pc, #56]	; (25b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    257a:	4798      	blx	r3
}
    257c:	b003      	add	sp, #12
    257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    2582:	4a03      	ldr	r2, [pc, #12]	; (2590 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2584:	7813      	ldrb	r3, [r2, #0]
    2586:	3301      	adds	r3, #1
    2588:	b2db      	uxtb	r3, r3
    258a:	7013      	strb	r3, [r2, #0]
    258c:	4770      	bx	lr
    258e:	bf00      	nop
    2590:	20000644 	.word	0x20000644
    2594:	20000300 	.word	0x20000300
    2598:	41008000 	.word	0x41008000
    259c:	20001030 	.word	0x20001030
    25a0:	000042a5 	.word	0x000042a5
    25a4:	20001204 	.word	0x20001204
    25a8:	20001ce4 	.word	0x20001ce4
    25ac:	00003e63 	.word	0x00003e63
    25b0:	00003831 	.word	0x00003831
    25b4:	000023b1 	.word	0x000023b1

000025b8 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    25b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    25ba:	4f0b      	ldr	r7, [pc, #44]	; (25e8 <grid_module_bu16_revb_hardware_init+0x30>)
    25bc:	4c0b      	ldr	r4, [pc, #44]	; (25ec <grid_module_bu16_revb_hardware_init+0x34>)
    25be:	463b      	mov	r3, r7
    25c0:	2200      	movs	r2, #0
    25c2:	4611      	mov	r1, r2
    25c4:	4620      	mov	r0, r4
    25c6:	4e0a      	ldr	r6, [pc, #40]	; (25f0 <grid_module_bu16_revb_hardware_init+0x38>)
    25c8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    25ca:	4d0a      	ldr	r5, [pc, #40]	; (25f4 <grid_module_bu16_revb_hardware_init+0x3c>)
    25cc:	463b      	mov	r3, r7
    25ce:	2200      	movs	r2, #0
    25d0:	4611      	mov	r1, r2
    25d2:	4628      	mov	r0, r5
    25d4:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    25d6:	2100      	movs	r1, #0
    25d8:	4620      	mov	r0, r4
    25da:	4c07      	ldr	r4, [pc, #28]	; (25f8 <grid_module_bu16_revb_hardware_init+0x40>)
    25dc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    25de:	2100      	movs	r1, #0
    25e0:	4628      	mov	r0, r5
    25e2:	47a0      	blx	r4
    25e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25e6:	bf00      	nop
    25e8:	000023cd 	.word	0x000023cd
    25ec:	20001030 	.word	0x20001030
    25f0:	00004225 	.word	0x00004225
    25f4:	20001204 	.word	0x20001204
    25f8:	000041e5 	.word	0x000041e5

000025fc <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    25fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2600:	b09b      	sub	sp, #108	; 0x6c
    2602:	4680      	mov	r8, r0

	grid_led_init(&grid_led_state, 16);
    2604:	2110      	movs	r1, #16
    2606:	4826      	ldr	r0, [pc, #152]	; (26a0 <grid_module_bu16_revb_init+0xa4>)
    2608:	4b26      	ldr	r3, [pc, #152]	; (26a4 <grid_module_bu16_revb_init+0xa8>)
    260a:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    260c:	2110      	movs	r1, #16
    260e:	4640      	mov	r0, r8
    2610:	4b25      	ldr	r3, [pc, #148]	; (26a8 <grid_module_bu16_revb_init+0xac>)
    2612:	4798      	blx	r3
    2614:	f10d 0737 	add.w	r7, sp, #55	; 0x37
    2618:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30];
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    261a:	4e24      	ldr	r6, [pc, #144]	; (26ac <grid_module_bu16_revb_init+0xb0>)
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    261c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 26c4 <grid_module_bu16_revb_init+0xc8>
    2620:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 26c8 <grid_module_bu16_revb_init+0xcc>
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2624:	ac0e      	add	r4, sp, #56	; 0x38
    2626:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    262a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    262e:	2303      	movs	r3, #3
    2630:	930b      	str	r3, [sp, #44]	; 0x2c
    2632:	2400      	movs	r4, #0
    2634:	940a      	str	r4, [sp, #40]	; 0x28
    2636:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    263a:	9209      	str	r2, [sp, #36]	; 0x24
    263c:	2263      	movs	r2, #99	; 0x63
    263e:	9208      	str	r2, [sp, #32]
    2640:	9407      	str	r4, [sp, #28]
    2642:	9306      	str	r3, [sp, #24]
    2644:	f04f 0b02 	mov.w	fp, #2
    2648:	f8cd b014 	str.w	fp, [sp, #20]
    264c:	9304      	str	r3, [sp, #16]
    264e:	9403      	str	r4, [sp, #12]
    2650:	9502      	str	r5, [sp, #8]
    2652:	2390      	movs	r3, #144	; 0x90
    2654:	9301      	str	r3, [sp, #4]
    2656:	9400      	str	r4, [sp, #0]
    2658:	4623      	mov	r3, r4
    265a:	465a      	mov	r2, fp
    265c:	4651      	mov	r1, sl
    265e:	a812      	add	r0, sp, #72	; 0x48
    2660:	47c8      	blx	r9

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    2662:	a812      	add	r0, sp, #72	; 0x48
    2664:	4b12      	ldr	r3, [pc, #72]	; (26b0 <grid_module_bu16_revb_init+0xb4>)
    2666:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2668:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    266c:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2670:	f8cd b004 	str.w	fp, [sp, #4]
    2674:	ab0d      	add	r3, sp, #52	; 0x34
    2676:	9300      	str	r3, [sp, #0]
    2678:	b2c3      	uxtb	r3, r0
    267a:	aa12      	add	r2, sp, #72	; 0x48
    267c:	b2e9      	uxtb	r1, r5
    267e:	4640      	mov	r0, r8
    2680:	4c0c      	ldr	r4, [pc, #48]	; (26b4 <grid_module_bu16_revb_init+0xb8>)
    2682:	47a0      	blx	r4
    2684:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    2686:	2d10      	cmp	r5, #16
    2688:	d1cc      	bne.n	2624 <grid_module_bu16_revb_init+0x28>
		

	}
	
	grid_report_sys_init(mod);
    268a:	4640      	mov	r0, r8
    268c:	4b0a      	ldr	r3, [pc, #40]	; (26b8 <grid_module_bu16_revb_init+0xbc>)
    268e:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    2690:	4b0a      	ldr	r3, [pc, #40]	; (26bc <grid_module_bu16_revb_init+0xc0>)
    2692:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2694:	4b0a      	ldr	r3, [pc, #40]	; (26c0 <grid_module_bu16_revb_init+0xc4>)
    2696:	4798      	blx	r3

};
    2698:	b01b      	add	sp, #108	; 0x6c
    269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    269e:	bf00      	nop
    26a0:	20003600 	.word	0x20003600
    26a4:	0000223d 	.word	0x0000223d
    26a8:	00003cc5 	.word	0x00003cc5
    26ac:	0000cb0c 	.word	0x0000cb0c
    26b0:	0000bc69 	.word	0x0000bc69
    26b4:	00003d81 	.word	0x00003d81
    26b8:	00003da1 	.word	0x00003da1
    26bc:	000025b9 	.word	0x000025b9
    26c0:	000023b1 	.word	0x000023b1
    26c4:	0000cb1c 	.word	0x0000cb1c
    26c8:	0000bc21 	.word	0x0000bc21

000026cc <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    26cc:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    26d2:	4b06      	ldr	r3, [pc, #24]	; (26ec <grid_module_en16_reva_hardware_start_transfer+0x20>)
    26d4:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    26d6:	4c06      	ldr	r4, [pc, #24]	; (26f0 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    26d8:	4620      	mov	r0, r4
    26da:	4b06      	ldr	r3, [pc, #24]	; (26f4 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    26dc:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    26de:	2308      	movs	r3, #8
    26e0:	4a05      	ldr	r2, [pc, #20]	; (26f8 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    26e2:	4906      	ldr	r1, [pc, #24]	; (26fc <grid_module_en16_reva_hardware_start_transfer+0x30>)
    26e4:	4620      	mov	r0, r4
    26e6:	4c06      	ldr	r4, [pc, #24]	; (2700 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    26e8:	47a0      	blx	r4
    26ea:	bd10      	pop	{r4, pc}
    26ec:	41008000 	.word	0x41008000
    26f0:	20000f24 	.word	0x20000f24
    26f4:	0000488d 	.word	0x0000488d
    26f8:	200017c4 	.word	0x200017c4
    26fc:	20000310 	.word	0x20000310
    2700:	0000492d 	.word	0x0000492d
    2704:	00000000 	.word	0x00000000

00002708 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    270c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    270e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2712:	4bad      	ldr	r3, [pc, #692]	; (29c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    2714:	615a      	str	r2, [r3, #20]
    2716:	4ead      	ldr	r6, [pc, #692]	; (29cc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2718:	f04f 0800 	mov.w	r8, #0
    271c:	e087      	b.n	282e <grid_module_en16_reva_hardware_transfer_complete_cb+0x126>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi >= 0){
    271e:	7838      	ldrb	r0, [r7, #0]
    2720:	49ab      	ldr	r1, [pc, #684]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2722:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2726:	78c9      	ldrb	r1, [r1, #3]
    2728:	42d1      	cmn	r1, r2
    272a:	d405      	bmi.n	2738 <grid_module_en16_reva_hardware_transfer_complete_cb+0x30>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    272c:	4aa8      	ldr	r2, [pc, #672]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    272e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    2732:	440b      	add	r3, r1
    2734:	70c3      	strb	r3, [r0, #3]
    2736:	e00a      	b.n	274e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 0;
    2738:	4ba5      	ldr	r3, [pc, #660]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    273a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    273e:	2300      	movs	r3, #0
    2740:	70c3      	strb	r3, [r0, #3]
    2742:	e004      	b.n	274e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
				else if (delta>0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 127;
    2744:	4ba2      	ldr	r3, [pc, #648]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2746:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    274a:	237f      	movs	r3, #127	; 0x7f
    274c:	70c3      	strb	r3, [r0, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, UI_ENCODER_LOOKUP[i]+16)){
    274e:	7839      	ldrb	r1, [r7, #0]
    2750:	3110      	adds	r1, #16
    2752:	b2c9      	uxtb	r1, r1
    2754:	489f      	ldr	r0, [pc, #636]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2756:	4ba0      	ldr	r3, [pc, #640]	; (29d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2758:	4798      	blx	r3
    275a:	2800      	cmp	r0, #0
    275c:	f040 8126 	bne.w	29ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a4>
					value = 64; //CENTER
					mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].helper[0] = 0;
    2760:	783a      	ldrb	r2, [r7, #0]
    2762:	4b9c      	ldr	r3, [pc, #624]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2764:	689b      	ldr	r3, [r3, #8]
    2766:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    276a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    276e:	2200      	movs	r2, #0
    2770:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    2772:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2774:	fb09 3404 	mla	r4, r9, r4, r3
    2778:	b2e4      	uxtb	r4, r4
				
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    277a:	783a      	ldrb	r2, [r7, #0]
				
				if (value != mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].helper[0]){
    277c:	f102 0110 	add.w	r1, r2, #16
    2780:	4b94      	ldr	r3, [pc, #592]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2782:	689b      	ldr	r3, [r3, #8]
    2784:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2788:	68d9      	ldr	r1, [r3, #12]
    278a:	7809      	ldrb	r1, [r1, #0]
    278c:	42a1      	cmp	r1, r4
    278e:	d047      	beq.n	2820 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2790:	498f      	ldr	r1, [pc, #572]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2792:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    2796:	f892 9003 	ldrb.w	r9, [r2, #3]
    279a:	ea4f 0949 	mov.w	r9, r9, lsl #1
    279e:	fa5f f989 	uxtb.w	r9, r9
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].payload[5], 2, command);
    27a2:	6858      	ldr	r0, [r3, #4]
    27a4:	22b0      	movs	r2, #176	; 0xb0
    27a6:	2102      	movs	r1, #2
    27a8:	3005      	adds	r0, #5
    27aa:	f8df a260 	ldr.w	sl, [pc, #608]	; 2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    27ae:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    27b0:	783a      	ldrb	r2, [r7, #0]
    27b2:	4d88      	ldr	r5, [pc, #544]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    27b4:	68ab      	ldr	r3, [r5, #8]
    27b6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27ba:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    27be:	2102      	movs	r1, #2
    27c0:	3007      	adds	r0, #7
    27c2:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].payload[9], 2, value);
    27c4:	783a      	ldrb	r2, [r7, #0]
    27c6:	68ab      	ldr	r3, [r5, #8]
    27c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27cc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    27d0:	4622      	mov	r2, r4
    27d2:	2102      	movs	r1, #2
    27d4:	3009      	adds	r0, #9
    27d6:	47d0      	blx	sl
					
					mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].helper[0] = value;
    27d8:	783a      	ldrb	r2, [r7, #0]
    27da:	68ab      	ldr	r3, [r5, #8]
    27dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    27e4:	701c      	strb	r4, [r3, #0]
					grid_report_ui_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+16);
    27e6:	7839      	ldrb	r1, [r7, #0]
    27e8:	3110      	adds	r1, #16
    27ea:	b2c9      	uxtb	r1, r1
    27ec:	4628      	mov	r0, r5
    27ee:	4c7b      	ldr	r4, [pc, #492]	; (29dc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    27f0:	47a0      	blx	r4
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].payload[9], 2, actuator); // LED
    27f2:	783a      	ldrb	r2, [r7, #0]
    27f4:	68ab      	ldr	r3, [r5, #8]
    27f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27fa:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
    27fe:	464a      	mov	r2, r9
    2800:	2102      	movs	r1, #2
    2802:	3009      	adds	r0, #9
    2804:	47d0      	blx	sl
					mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].helper[0] = actuator;
    2806:	783a      	ldrb	r2, [r7, #0]
    2808:	68ab      	ldr	r3, [r5, #8]
    280a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    280e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    2812:	f883 9000 	strb.w	r9, [r3]
					grid_report_ui_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+16+16);
    2816:	7839      	ldrb	r1, [r7, #0]
    2818:	3120      	adds	r1, #32
    281a:	b2c9      	uxtb	r1, r1
    281c:	4628      	mov	r0, r5
    281e:	47a0      	blx	r4
    2820:	f108 0801 	add.w	r8, r8, #1
    2824:	3601      	adds	r6, #1
	for (uint8_t i=0; i<16; i++){
    2826:	f1b8 0f10 	cmp.w	r8, #16
    282a:	f000 8133 	beq.w	2a94 <grid_module_en16_reva_hardware_transfer_complete_cb+0x38c>
    282e:	fa5f f188 	uxtb.w	r1, r8
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    2832:	084b      	lsrs	r3, r1, #1
    2834:	4a6a      	ldr	r2, [pc, #424]	; (29e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    2836:	5cd3      	ldrb	r3, [r2, r3]
    2838:	f001 0201 	and.w	r2, r1, #1
    283c:	0092      	lsls	r2, r2, #2
    283e:	4113      	asrs	r3, r2
    2840:	b2db      	uxtb	r3, r3
    2842:	f003 050f 	and.w	r5, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    2846:	4a67      	ldr	r2, [pc, #412]	; (29e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    2848:	f812 2008 	ldrb.w	r2, [r2, r8]
    284c:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    284e:	4295      	cmp	r5, r2
    2850:	d0e6      	beq.n	2820 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
			UI_SPI_DEBUG = i;
    2852:	4a65      	ldr	r2, [pc, #404]	; (29e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2854:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    2856:	08a9      	lsrs	r1, r5, #2
			uint8_t phase_a = (new_value>>1)&1;
    2858:	f3c5 0540 	ubfx	r5, r5, #1, #1
			uint8_t phase_b = (new_value)&1;
    285c:	f003 0401 	and.w	r4, r3, #1
    2860:	4637      	mov	r7, r6
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2862:	7833      	ldrb	r3, [r6, #0]
    2864:	4a5a      	ldr	r2, [pc, #360]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2866:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    286a:	7852      	ldrb	r2, [r2, #1]
    286c:	428a      	cmp	r2, r1
    286e:	d040      	beq.n	28f2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ea>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    2870:	4a57      	ldr	r2, [pc, #348]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2872:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2876:	2001      	movs	r0, #1
    2878:	7090      	strb	r0, [r2, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    287a:	7051      	strb	r1, [r2, #1]
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    287c:	4403      	add	r3, r0
    287e:	011b      	lsls	r3, r3, #4
    2880:	4a54      	ldr	r2, [pc, #336]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2882:	6852      	ldr	r2, [r2, #4]
    2884:	441a      	add	r2, r3
    2886:	68d2      	ldr	r2, [r2, #12]
    2888:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    288a:	2a00      	cmp	r2, #0
    288c:	bf0c      	ite	eq
    288e:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2892:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]].payload[5], 2, command);
    2896:	f8df 913c 	ldr.w	r9, [pc, #316]	; 29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>
    289a:	f8d9 2008 	ldr.w	r2, [r9, #8]
    289e:	4413      	add	r3, r2
    28a0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    28a4:	bf0c      	ite	eq
    28a6:	2290      	moveq	r2, #144	; 0x90
    28a8:	2280      	movne	r2, #128	; 0x80
    28aa:	2102      	movs	r1, #2
    28ac:	3005      	adds	r0, #5
    28ae:	f8df b15c 	ldr.w	fp, [pc, #348]	; 2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    28b2:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    28b4:	7832      	ldrb	r2, [r6, #0]
    28b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    28be:	6858      	ldr	r0, [r3, #4]
    28c0:	2102      	movs	r1, #2
    28c2:	3007      	adds	r0, #7
    28c4:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]].payload[9], 2, velocity);
    28c6:	7832      	ldrb	r2, [r6, #0]
    28c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    28d0:	6858      	ldr	r0, [r3, #4]
    28d2:	4652      	mov	r2, sl
    28d4:	2102      	movs	r1, #2
    28d6:	3009      	adds	r0, #9
    28d8:	47d8      	blx	fp
				mod->report_ui_array[UI_ENCODER_LOOKUP[i]].helper[0] = velocity;
    28da:	7832      	ldrb	r2, [r6, #0]
    28dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    28e4:	68db      	ldr	r3, [r3, #12]
    28e6:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]);
    28ea:	7831      	ldrb	r1, [r6, #0]
    28ec:	4648      	mov	r0, r9
    28ee:	4b3b      	ldr	r3, [pc, #236]	; (29dc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    28f0:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous;
    28f2:	783a      	ldrb	r2, [r7, #0]
    28f4:	4b36      	ldr	r3, [pc, #216]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    28f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (a_now != a_prev){
    28fa:	7b5b      	ldrb	r3, [r3, #13]
    28fc:	42ab      	cmp	r3, r5
    28fe:	f000 80d1 	beq.w	2aa4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>
					delta = +1;
    2902:	42a5      	cmp	r5, r4
    2904:	bf14      	ite	ne
    2906:	f04f 39ff 	movne.w	r9, #4294967295
    290a:	f04f 0901 	moveq.w	r9, #1
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = a_now;
    290e:	4b30      	ldr	r3, [pc, #192]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2910:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    2914:	734d      	strb	r5, [r1, #13]
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    2916:	738c      	strb	r4, [r1, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]+1].last_real_time);
    2918:	6989      	ldr	r1, [r1, #24]
    291a:	4834      	ldr	r0, [pc, #208]	; (29ec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    291c:	4b34      	ldr	r3, [pc, #208]	; (29f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    291e:	4798      	blx	r3
    2920:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2922:	9b01      	ldr	r3, [sp, #4]
    2924:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2928:	bf84      	itt	hi
    292a:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    292e:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2930:	9b01      	ldr	r3, [sp, #4]
    2932:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2934:	bf9c      	itt	ls
    2936:	2314      	movls	r3, #20
    2938:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    293a:	9b01      	ldr	r3, [sp, #4]
    293c:	9801      	ldr	r0, [sp, #4]
    293e:	fb00 f003 	mul.w	r0, r0, r3
    2942:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2946:	f500 7080 	add.w	r0, r0, #256	; 0x100
    294a:	4b2a      	ldr	r3, [pc, #168]	; (29f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    294c:	4798      	blx	r3
    294e:	a31c      	add	r3, pc, #112	; (adr r3, 29c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2950:	e9d3 2300 	ldrd	r2, r3, [r3]
    2954:	4c28      	ldr	r4, [pc, #160]	; (29f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2956:	47a0      	blx	r4
    2958:	2200      	movs	r2, #0
    295a:	4b28      	ldr	r3, [pc, #160]	; (29fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    295c:	4c28      	ldr	r4, [pc, #160]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    295e:	47a0      	blx	r4
    2960:	4b28      	ldr	r3, [pc, #160]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2962:	4798      	blx	r3
    2964:	b2c4      	uxtb	r4, r0
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2966:	783d      	ldrb	r5, [r7, #0]
    2968:	4820      	ldr	r0, [pc, #128]	; (29ec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    296a:	4b27      	ldr	r3, [pc, #156]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    296c:	4798      	blx	r3
    296e:	4b18      	ldr	r3, [pc, #96]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2970:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2974:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2976:	fb04 9309 	mla	r3, r4, r9, r9
    297a:	b29b      	uxth	r3, r3
    297c:	b21a      	sxth	r2, r3
				if (delta<0){
    297e:	f1b9 0f00 	cmp.w	r9, #0
    2982:	f6ff aecc 	blt.w	271e <grid_module_en16_reva_hardware_transfer_complete_cb+0x16>
				else if (delta>0){
    2986:	f1b9 0f00 	cmp.w	r9, #0
    298a:	f77f aee0 	ble.w	274e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
    298e:	7838      	ldrb	r0, [r7, #0]
    2990:	490f      	ldr	r1, [pc, #60]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2992:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2996:	78c9      	ldrb	r1, [r1, #3]
    2998:	440a      	add	r2, r1
    299a:	2a7f      	cmp	r2, #127	; 0x7f
    299c:	f73f aed2 	bgt.w	2744 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    29a0:	4a0b      	ldr	r2, [pc, #44]	; (29d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    29a2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    29a6:	440b      	add	r3, r1
    29a8:	70c3      	strb	r3, [r0, #3]
    29aa:	e6d0      	b.n	274e <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					value = mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16].helper[0];
    29ac:	783a      	ldrb	r2, [r7, #0]
    29ae:	4b09      	ldr	r3, [pc, #36]	; (29d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    29b0:	689b      	ldr	r3, [r3, #8]
    29b2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    29b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	e6da      	b.n	2774 <grid_module_en16_reva_hardware_transfer_complete_cb+0x6c>
    29be:	bf00      	nop
    29c0:	00000000 	.word	0x00000000
    29c4:	40e38800 	.word	0x40e38800
    29c8:	41008000 	.word	0x41008000
    29cc:	20000320 	.word	0x20000320
    29d0:	20003830 	.word	0x20003830
    29d4:	20001ce4 	.word	0x20001ce4
    29d8:	00003e57 	.word	0x00003e57
    29dc:	00003e63 	.word	0x00003e63
    29e0:	200017c4 	.word	0x200017c4
    29e4:	200017ac 	.word	0x200017ac
    29e8:	20001794 	.word	0x20001794
    29ec:	20001cf4 	.word	0x20001cf4
    29f0:	00003735 	.word	0x00003735
    29f4:	0000b2a5 	.word	0x0000b2a5
    29f8:	0000b5e5 	.word	0x0000b5e5
    29fc:	3ff00000 	.word	0x3ff00000
    2a00:	0000b02d 	.word	0x0000b02d
    2a04:	0000b7b5 	.word	0x0000b7b5
    2a08:	00003731 	.word	0x00003731
    2a0c:	00003831 	.word	0x00003831
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value--;
    2a10:	3b01      	subs	r3, #1
    2a12:	b2db      	uxtb	r3, r3
    2a14:	4934      	ldr	r1, [pc, #208]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2a16:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    2a1a:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2a1c:	005b      	lsls	r3, r3, #1
    2a1e:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].payload[9], 2, v); // LED
    2a20:	4d32      	ldr	r5, [pc, #200]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    2a22:	68ab      	ldr	r3, [r5, #8]
    2a24:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2a28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    2a2c:	4622      	mov	r2, r4
    2a2e:	2102      	movs	r1, #2
    2a30:	3009      	adds	r0, #9
    2a32:	4b2f      	ldr	r3, [pc, #188]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e8>)
    2a34:	4798      	blx	r3
						mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].helper[0] = v;
    2a36:	783a      	ldrb	r2, [r7, #0]
    2a38:	68ab      	ldr	r3, [r5, #8]
    2a3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2a3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    2a42:	701c      	strb	r4, [r3, #0]
						grid_report_ui_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+16+16);
    2a44:	7839      	ldrb	r1, [r7, #0]
    2a46:	3120      	adds	r1, #32
    2a48:	b2c9      	uxtb	r1, r1
    2a4a:	4628      	mov	r0, r5
    2a4c:	4b29      	ldr	r3, [pc, #164]	; (2af4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    2a4e:	4798      	blx	r3
    2a50:	e03a      	b.n	2ac8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>

					}
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value++;
    2a52:	3301      	adds	r3, #1
    2a54:	b2db      	uxtb	r3, r3
    2a56:	4924      	ldr	r1, [pc, #144]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2a58:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    2a5c:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2a5e:	005b      	lsls	r3, r3, #1
    2a60:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].payload[9], 2, v); // LED
    2a62:	4d22      	ldr	r5, [pc, #136]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    2a64:	68ab      	ldr	r3, [r5, #8]
    2a66:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2a6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    2a6e:	4622      	mov	r2, r4
    2a70:	2102      	movs	r1, #2
    2a72:	3009      	adds	r0, #9
    2a74:	4b1e      	ldr	r3, [pc, #120]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e8>)
    2a76:	4798      	blx	r3
						mod->report_ui_array[UI_ENCODER_LOOKUP[i]+16+16].helper[0] = v;
    2a78:	783a      	ldrb	r2, [r7, #0]
    2a7a:	68ab      	ldr	r3, [r5, #8]
    2a7c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2a80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    2a84:	701c      	strb	r4, [r3, #0]
						grid_report_ui_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+16+16);
    2a86:	7839      	ldrb	r1, [r7, #0]
    2a88:	3120      	adds	r1, #32
    2a8a:	b2c9      	uxtb	r1, r1
    2a8c:	4628      	mov	r0, r5
    2a8e:	4b19      	ldr	r3, [pc, #100]	; (2af4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    2a90:	4798      	blx	r3
    2a92:	e020      	b.n	2ad6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ce>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2a94:	2200      	movs	r2, #0
    2a96:	4b18      	ldr	r3, [pc, #96]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
    2a98:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2a9a:	4b18      	ldr	r3, [pc, #96]	; (2afc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
    2a9c:	4798      	blx	r3
}
    2a9e:	b003      	add	sp, #12
    2aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    2aa4:	4b10      	ldr	r3, [pc, #64]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2aa6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2aaa:	7394      	strb	r4, [r2, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
    2aac:	6891      	ldr	r1, [r2, #8]
    2aae:	4814      	ldr	r0, [pc, #80]	; (2b00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>)
    2ab0:	4b14      	ldr	r3, [pc, #80]	; (2b04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3fc>)
    2ab2:	4798      	blx	r3
    2ab4:	28c8      	cmp	r0, #200	; 0xc8
    2ab6:	f67f aeb3 	bls.w	2820 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){
    2aba:	783a      	ldrb	r2, [r7, #0]
    2abc:	4b0a      	ldr	r3, [pc, #40]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2abe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2ac2:	78db      	ldrb	r3, [r3, #3]
    2ac4:	2b40      	cmp	r3, #64	; 0x40
    2ac6:	d8a3      	bhi.n	2a10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){
    2ac8:	783a      	ldrb	r2, [r7, #0]
    2aca:	4b07      	ldr	r3, [pc, #28]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2acc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2ad0:	78db      	ldrb	r3, [r3, #3]
    2ad2:	2b3f      	cmp	r3, #63	; 0x3f
    2ad4:	d9bd      	bls.n	2a52 <grid_module_en16_reva_hardware_transfer_complete_cb+0x34a>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2ad6:	783c      	ldrb	r4, [r7, #0]
    2ad8:	4809      	ldr	r0, [pc, #36]	; (2b00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>)
    2ada:	4b0b      	ldr	r3, [pc, #44]	; (2b08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x400>)
    2adc:	4798      	blx	r3
    2ade:	4b02      	ldr	r3, [pc, #8]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2ae0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2ae4:	6098      	str	r0, [r3, #8]
    2ae6:	e69b      	b.n	2820 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
    2ae8:	20003830 	.word	0x20003830
    2aec:	20001ce4 	.word	0x20001ce4
    2af0:	00003831 	.word	0x00003831
    2af4:	00003e63 	.word	0x00003e63
    2af8:	2000362c 	.word	0x2000362c
    2afc:	000026cd 	.word	0x000026cd
    2b00:	20001cf4 	.word	0x20001cf4
    2b04:	00003735 	.word	0x00003735
    2b08:	00003731 	.word	0x00003731

00002b0c <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2b0c:	b510      	push	{r4, lr}
    2b0e:	4b0e      	ldr	r3, [pc, #56]	; (2b48 <grid_module_en16_reva_hardware_init+0x3c>)
    2b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b14:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b16:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b1c:	629a      	str	r2, [r3, #40]	; 0x28
    2b1e:	4a0b      	ldr	r2, [pc, #44]	; (2b4c <grid_module_en16_reva_hardware_init+0x40>)
    2b20:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2b22:	4c0b      	ldr	r4, [pc, #44]	; (2b50 <grid_module_en16_reva_hardware_init+0x44>)
    2b24:	2103      	movs	r1, #3
    2b26:	4620      	mov	r0, r4
    2b28:	4b0a      	ldr	r3, [pc, #40]	; (2b54 <grid_module_en16_reva_hardware_init+0x48>)
    2b2a:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2b2c:	490a      	ldr	r1, [pc, #40]	; (2b58 <grid_module_en16_reva_hardware_init+0x4c>)
    2b2e:	4620      	mov	r0, r4
    2b30:	4b0a      	ldr	r3, [pc, #40]	; (2b5c <grid_module_en16_reva_hardware_init+0x50>)
    2b32:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2b34:	490a      	ldr	r1, [pc, #40]	; (2b60 <grid_module_en16_reva_hardware_init+0x54>)
    2b36:	4620      	mov	r0, r4
    2b38:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <grid_module_en16_reva_hardware_init+0x58>)
    2b3a:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2b3c:	4a0a      	ldr	r2, [pc, #40]	; (2b68 <grid_module_en16_reva_hardware_init+0x5c>)
    2b3e:	2100      	movs	r1, #0
    2b40:	4620      	mov	r0, r4
    2b42:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <grid_module_en16_reva_hardware_init+0x60>)
    2b44:	4798      	blx	r3
    2b46:	bd10      	pop	{r4, pc}
    2b48:	41008000 	.word	0x41008000
    2b4c:	c0000020 	.word	0xc0000020
    2b50:	20000f24 	.word	0x20000f24
    2b54:	000048f1 	.word	0x000048f1
    2b58:	00061a80 	.word	0x00061a80
    2b5c:	000048b5 	.word	0x000048b5
    2b60:	200017a8 	.word	0x200017a8
    2b64:	000049d9 	.word	0x000049d9
    2b68:	00002709 	.word	0x00002709
    2b6c:	00004995 	.word	0x00004995

00002b70 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b74:	b091      	sub	sp, #68	; 0x44
    2b76:	4681      	mov	r9, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2b78:	2110      	movs	r1, #16
    2b7a:	4830      	ldr	r0, [pc, #192]	; (2c3c <grid_module_en16_reva_init+0xcc>)
    2b7c:	4b30      	ldr	r3, [pc, #192]	; (2c40 <grid_module_en16_reva_init+0xd0>)
    2b7e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2b80:	2130      	movs	r1, #48	; 0x30
    2b82:	4648      	mov	r0, r9
    2b84:	4b2f      	ldr	r3, [pc, #188]	; (2c44 <grid_module_en16_reva_init+0xd4>)
    2b86:	4798      	blx	r3
    2b88:	2400      	movs	r4, #0
			);
		
		}
		else{ // LED
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b8a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2c64 <grid_module_en16_reva_init+0xf4>
    2b8e:	4625      	mov	r5, r4
    2b90:	e02f      	b.n	2bf2 <grid_module_en16_reva_init+0x82>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b92:	2303      	movs	r3, #3
    2b94:	9304      	str	r3, [sp, #16]
    2b96:	9503      	str	r5, [sp, #12]
    2b98:	9402      	str	r4, [sp, #8]
    2b9a:	2390      	movs	r3, #144	; 0x90
    2b9c:	9301      	str	r3, [sp, #4]
    2b9e:	9500      	str	r5, [sp, #0]
    2ba0:	462b      	mov	r3, r5
    2ba2:	2202      	movs	r2, #2
    2ba4:	4641      	mov	r1, r8
    2ba6:	a808      	add	r0, sp, #32
    2ba8:	4f27      	ldr	r7, [pc, #156]	; (2c48 <grid_module_en16_reva_init+0xd8>)
    2baa:	47b8      	blx	r7
    2bac:	e00d      	b.n	2bca <grid_module_en16_reva_init+0x5a>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2bae:	2303      	movs	r3, #3
    2bb0:	9304      	str	r3, [sp, #16]
    2bb2:	9503      	str	r5, [sp, #12]
    2bb4:	f1a4 0220 	sub.w	r2, r4, #32
    2bb8:	9202      	str	r2, [sp, #8]
    2bba:	2263      	movs	r2, #99	; 0x63
    2bbc:	9201      	str	r2, [sp, #4]
    2bbe:	9500      	str	r5, [sp, #0]
    2bc0:	2202      	movs	r2, #2
    2bc2:	4641      	mov	r1, r8
    2bc4:	a808      	add	r0, sp, #32
    2bc6:	4f20      	ldr	r7, [pc, #128]	; (2c48 <grid_module_en16_reva_init+0xd8>)
    2bc8:	47b8      	blx	r7
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2bca:	a808      	add	r0, sp, #32
    2bcc:	4b1f      	ldr	r3, [pc, #124]	; (2c4c <grid_module_en16_reva_init+0xdc>)
    2bce:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2bd0:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    2bd4:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2bd8:	2302      	movs	r3, #2
    2bda:	9301      	str	r3, [sp, #4]
    2bdc:	ab07      	add	r3, sp, #28
    2bde:	9300      	str	r3, [sp, #0]
    2be0:	4603      	mov	r3, r0
    2be2:	aa08      	add	r2, sp, #32
    2be4:	4631      	mov	r1, r6
    2be6:	4648      	mov	r0, r9
    2be8:	4e19      	ldr	r6, [pc, #100]	; (2c50 <grid_module_en16_reva_init+0xe0>)
    2bea:	47b0      	blx	r6
    2bec:	3401      	adds	r4, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2bee:	2c30      	cmp	r4, #48	; 0x30
    2bf0:	d012      	beq.n	2c18 <grid_module_en16_reva_init+0xa8>
    2bf2:	b2e6      	uxtb	r6, r4
		if (i<16){ // ROTATION
    2bf4:	2e0f      	cmp	r6, #15
    2bf6:	d9cc      	bls.n	2b92 <grid_module_en16_reva_init+0x22>
		else if (i<16+16){ // BUTTON
    2bf8:	2e1f      	cmp	r6, #31
    2bfa:	d8d8      	bhi.n	2bae <grid_module_en16_reva_init+0x3e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2bfc:	2303      	movs	r3, #3
    2bfe:	9304      	str	r3, [sp, #16]
    2c00:	9503      	str	r5, [sp, #12]
    2c02:	9402      	str	r4, [sp, #8]
    2c04:	2390      	movs	r3, #144	; 0x90
    2c06:	9301      	str	r3, [sp, #4]
    2c08:	9500      	str	r5, [sp, #0]
    2c0a:	462b      	mov	r3, r5
    2c0c:	2202      	movs	r2, #2
    2c0e:	4641      	mov	r1, r8
    2c10:	a808      	add	r0, sp, #32
    2c12:	4f0d      	ldr	r7, [pc, #52]	; (2c48 <grid_module_en16_reva_init+0xd8>)
    2c14:	47b8      	blx	r7
    2c16:	e7d8      	b.n	2bca <grid_module_en16_reva_init+0x5a>
		
	}
	
	grid_report_sys_init(mod);
    2c18:	4648      	mov	r0, r9
    2c1a:	4b0e      	ldr	r3, [pc, #56]	; (2c54 <grid_module_en16_reva_init+0xe4>)
    2c1c:	4798      	blx	r3
    2c1e:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2c20:	490d      	ldr	r1, [pc, #52]	; (2c58 <grid_module_en16_reva_init+0xe8>)
    2c22:	011a      	lsls	r2, r3, #4
    2c24:	5453      	strb	r3, [r2, r1]
    2c26:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2c28:	2b10      	cmp	r3, #16
    2c2a:	d1fa      	bne.n	2c22 <grid_module_en16_reva_init+0xb2>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2c2c:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <grid_module_en16_reva_init+0xec>)
    2c2e:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2c30:	4b0b      	ldr	r3, [pc, #44]	; (2c60 <grid_module_en16_reva_init+0xf0>)
    2c32:	4798      	blx	r3
	
}
    2c34:	b011      	add	sp, #68	; 0x44
    2c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2c3a:	bf00      	nop
    2c3c:	20003600 	.word	0x20003600
    2c40:	0000223d 	.word	0x0000223d
    2c44:	00003cc5 	.word	0x00003cc5
    2c48:	0000bc21 	.word	0x0000bc21
    2c4c:	0000bc69 	.word	0x0000bc69
    2c50:	00003d81 	.word	0x00003d81
    2c54:	00003da1 	.word	0x00003da1
    2c58:	20003830 	.word	0x20003830
    2c5c:	00002b0d 	.word	0x00002b0d
    2c60:	000026cd 	.word	0x000026cd
    2c64:	0000cb34 	.word	0x0000cb34

00002c68 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2c68:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2c6a:	4803      	ldr	r0, [pc, #12]	; (2c78 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2c6c:	4c03      	ldr	r4, [pc, #12]	; (2c7c <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2c6e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2c70:	4803      	ldr	r0, [pc, #12]	; (2c80 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2c72:	47a0      	blx	r4
    2c74:	bd10      	pop	{r4, pc}
    2c76:	bf00      	nop
    2c78:	20001030 	.word	0x20001030
    2c7c:	00004385 	.word	0x00004385
    2c80:	20001204 	.word	0x20001204
    2c84:	00000000 	.word	0x00000000

00002c88 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2c88:	4bb1      	ldr	r3, [pc, #708]	; (2f50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2c8a:	781b      	ldrb	r3, [r3, #0]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	f000 810a 	beq.w	2ea6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c96:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2c98:	2300      	movs	r3, #0
    2c9a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2c9e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2ca2:	4bac      	ldr	r3, [pc, #688]	; (2f54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2ca4:	781a      	ldrb	r2, [r3, #0]
    2ca6:	3208      	adds	r2, #8
    2ca8:	49ab      	ldr	r1, [pc, #684]	; (2f58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2caa:	5c8e      	ldrb	r6, [r1, r2]
    2cac:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2cae:	781a      	ldrb	r2, [r3, #0]
    2cb0:	b2d2      	uxtb	r2, r2
    2cb2:	5c8d      	ldrb	r5, [r1, r2]
    2cb4:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2cb6:	781a      	ldrb	r2, [r3, #0]
    2cb8:	3201      	adds	r2, #1
    2cba:	b2d2      	uxtb	r2, r2
    2cbc:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2cbe:	781a      	ldrb	r2, [r3, #0]
    2cc0:	f002 0207 	and.w	r2, r2, #7
    2cc4:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2cc6:	781b      	ldrb	r3, [r3, #0]
    2cc8:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2cd0:	4ba2      	ldr	r3, [pc, #648]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2cd2:	bf14      	ite	ne
    2cd4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cd8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2cdc:	4b9d      	ldr	r3, [pc, #628]	; (2f54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2cde:	781b      	ldrb	r3, [r3, #0]
    2ce0:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2ce8:	4b9c      	ldr	r3, [pc, #624]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2cea:	bf14      	ite	ne
    2cec:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cf0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2cf4:	4b97      	ldr	r3, [pc, #604]	; (2f54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2cf6:	781b      	ldrb	r3, [r3, #0]
    2cf8:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2d00:	4b96      	ldr	r3, [pc, #600]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2d02:	bf14      	ite	ne
    2d04:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d08:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2d0c:	2302      	movs	r3, #2
    2d0e:	f10d 0206 	add.w	r2, sp, #6
    2d12:	2100      	movs	r1, #0
    2d14:	4892      	ldr	r0, [pc, #584]	; (2f60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2d16:	4c93      	ldr	r4, [pc, #588]	; (2f64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2d18:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2d1a:	2302      	movs	r3, #2
    2d1c:	aa01      	add	r2, sp, #4
    2d1e:	2100      	movs	r1, #0
    2d20:	4891      	ldr	r0, [pc, #580]	; (2f68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2d22:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2d24:	f8df b260 	ldr.w	fp, [pc, #608]	; 2f88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
    2d28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2d2c:	47d8      	blx	fp
    2d2e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 2f8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    2d32:	a385      	add	r3, pc, #532	; (adr r3, 2f48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2d34:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d38:	47d0      	blx	sl
    2d3a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 2f90 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2d3e:	47c8      	blx	r9
    2d40:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2d44:	42a0      	cmp	r0, r4
    2d46:	bf28      	it	cs
    2d48:	4620      	movcs	r0, r4
    2d4a:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2d4c:	fa1f f880 	uxth.w	r8, r0
    2d50:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2d54:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2d58:	47d8      	blx	fp
    2d5a:	a37b      	add	r3, pc, #492	; (adr r3, 2f48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d60:	47d0      	blx	sl
    2d62:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2d64:	42a0      	cmp	r0, r4
    2d66:	bf28      	it	cs
    2d68:	4620      	movcs	r0, r4
    2d6a:	b280      	uxth	r0, r0
    2d6c:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2d70:	f1a5 0308 	sub.w	r3, r5, #8
    2d74:	b2db      	uxtb	r3, r3
    2d76:	2b01      	cmp	r3, #1
    2d78:	f240 808d 	bls.w	2e96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2d7c:	2e0d      	cmp	r6, #13
    2d7e:	f240 8098 	bls.w	2eb2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22a>
		
		if (adcresult_0>10000){
    2d82:	f242 7310 	movw	r3, #10000	; 0x2710
    2d86:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2d88:	bf8c      	ite	hi
    2d8a:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2d8c:	237f      	movls	r3, #127	; 0x7f
    2d8e:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2d92:	f242 7310 	movw	r3, #10000	; 0x2710
    2d96:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2d98:	bf8c      	ite	hi
    2d9a:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2d9c:	237f      	movls	r3, #127	; 0x7f
    2d9e:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0]){
    2da2:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2da6:	3c04      	subs	r4, #4
    2da8:	0124      	lsls	r4, r4, #4
    2daa:	4b70      	ldr	r3, [pc, #448]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2dac:	689b      	ldr	r3, [r3, #8]
    2dae:	4423      	add	r3, r4
    2db0:	68da      	ldr	r2, [r3, #12]
    2db2:	7812      	ldrb	r2, [r2, #0]
    2db4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2db8:	4291      	cmp	r1, r2
    2dba:	d02f      	beq.n	2e1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x194>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2dbc:	2a00      	cmp	r2, #0
    2dbe:	bf0c      	ite	eq
    2dc0:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2dc4:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2dc8:	6858      	ldr	r0, [r3, #4]
    2dca:	bf0c      	ite	eq
    2dcc:	2290      	moveq	r2, #144	; 0x90
    2dce:	2280      	movne	r2, #128	; 0x80
    2dd0:	2102      	movs	r1, #2
    2dd2:	3005      	adds	r0, #5
    2dd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2f84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2dd8:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2dda:	4f64      	ldr	r7, [pc, #400]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2ddc:	68bb      	ldr	r3, [r7, #8]
    2dde:	4423      	add	r3, r4
    2de0:	6858      	ldr	r0, [r3, #4]
    2de2:	4632      	mov	r2, r6
    2de4:	2102      	movs	r1, #2
    2de6:	3007      	adds	r0, #7
    2de8:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2dea:	68bb      	ldr	r3, [r7, #8]
    2dec:	4423      	add	r3, r4
    2dee:	6858      	ldr	r0, [r3, #4]
    2df0:	464a      	mov	r2, r9
    2df2:	2102      	movs	r1, #2
    2df4:	3009      	adds	r0, #9
    2df6:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2df8:	68bb      	ldr	r3, [r7, #8]
    2dfa:	4423      	add	r3, r4
    2dfc:	6858      	ldr	r0, [r3, #4]
    2dfe:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2e02:	2102      	movs	r1, #2
    2e04:	3015      	adds	r0, #21
    2e06:	47c0      	blx	r8
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2e08:	68bb      	ldr	r3, [r7, #8]
    2e0a:	441c      	add	r4, r3
    2e0c:	68e3      	ldr	r3, [r4, #12]
    2e0e:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2e12:	1f31      	subs	r1, r6, #4
    2e14:	b2c9      	uxtb	r1, r1
    2e16:	4638      	mov	r0, r7
    2e18:	4b55      	ldr	r3, [pc, #340]	; (2f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2e1a:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0]){
    2e1c:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2e20:	3c04      	subs	r4, #4
    2e22:	0124      	lsls	r4, r4, #4
    2e24:	4b51      	ldr	r3, [pc, #324]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e26:	689b      	ldr	r3, [r3, #8]
    2e28:	4423      	add	r3, r4
    2e2a:	68da      	ldr	r2, [r3, #12]
    2e2c:	7812      	ldrb	r2, [r2, #0]
    2e2e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2e32:	4291      	cmp	r1, r2
    2e34:	d02f      	beq.n	2e96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2e36:	2a00      	cmp	r2, #0
    2e38:	bf0c      	ite	eq
    2e3a:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2e3e:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    2e42:	6858      	ldr	r0, [r3, #4]
    2e44:	bf0c      	ite	eq
    2e46:	2290      	moveq	r2, #144	; 0x90
    2e48:	2280      	movne	r2, #128	; 0x80
    2e4a:	2102      	movs	r1, #2
    2e4c:	3005      	adds	r0, #5
    2e4e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 2f84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2e52:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_0);
    2e54:	4f45      	ldr	r7, [pc, #276]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e56:	68bb      	ldr	r3, [r7, #8]
    2e58:	4423      	add	r3, r4
    2e5a:	6858      	ldr	r0, [r3, #4]
    2e5c:	4632      	mov	r2, r6
    2e5e:	2102      	movs	r1, #2
    2e60:	3007      	adds	r0, #7
    2e62:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    2e64:	68bb      	ldr	r3, [r7, #8]
    2e66:	4423      	add	r3, r4
    2e68:	6858      	ldr	r0, [r3, #4]
    2e6a:	464a      	mov	r2, r9
    2e6c:	2102      	movs	r1, #2
    2e6e:	3009      	adds	r0, #9
    2e70:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    2e72:	68bb      	ldr	r3, [r7, #8]
    2e74:	4423      	add	r3, r4
    2e76:	6858      	ldr	r0, [r3, #4]
    2e78:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2e7c:	2102      	movs	r1, #2
    2e7e:	3015      	adds	r0, #21
    2e80:	47c0      	blx	r8
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    2e82:	68bb      	ldr	r3, [r7, #8]
    2e84:	441c      	add	r4, r3
    2e86:	68e3      	ldr	r3, [r4, #12]
    2e88:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    2e8c:	1f29      	subs	r1, r5, #4
    2e8e:	b2c9      	uxtb	r1, r1
    2e90:	4638      	mov	r0, r7
    2e92:	4b37      	ldr	r3, [pc, #220]	; (2f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2e94:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2e96:	2200      	movs	r2, #0
    2e98:	4b2d      	ldr	r3, [pc, #180]	; (2f50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2e9a:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2e9c:	4b35      	ldr	r3, [pc, #212]	; (2f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2e9e:	4798      	blx	r3
}
    2ea0:	b003      	add	sp, #12
    2ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2ea6:	4a2a      	ldr	r2, [pc, #168]	; (2f50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2ea8:	7813      	ldrb	r3, [r2, #0]
    2eaa:	3301      	adds	r3, #1
    2eac:	b2db      	uxtb	r3, r3
    2eae:	7013      	strb	r3, [r2, #0]
    2eb0:	4770      	bx	lr
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2eb2:	2d01      	cmp	r5, #1
    2eb4:	d936      	bls.n	2f24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2eb6:	b2b9      	uxth	r1, r7
    2eb8:	4630      	mov	r0, r6
    2eba:	4c2f      	ldr	r4, [pc, #188]	; (2f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2ebc:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2ebe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2ec2:	4628      	mov	r0, r5
    2ec4:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2ec6:	4630      	mov	r0, r6
    2ec8:	4b2c      	ldr	r3, [pc, #176]	; (2f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2eca:	4798      	blx	r3
    2ecc:	2800      	cmp	r0, #0
    2ece:	d161      	bne.n	2f94 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
		if (grid_ain_get_changed(adc_index_1)){
    2ed0:	4628      	mov	r0, r5
    2ed2:	4b2a      	ldr	r3, [pc, #168]	; (2f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2ed4:	4798      	blx	r3
    2ed6:	2800      	cmp	r0, #0
    2ed8:	d0dd      	beq.n	2e96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2eda:	2107      	movs	r1, #7
    2edc:	4628      	mov	r0, r5
    2ede:	4b28      	ldr	r3, [pc, #160]	; (2f80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    2ee0:	4798      	blx	r3
    2ee2:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2ee4:	ea4f 1805 	mov.w	r8, r5, lsl #4
    2ee8:	4c20      	ldr	r4, [pc, #128]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2eea:	68a3      	ldr	r3, [r4, #8]
    2eec:	4443      	add	r3, r8
    2eee:	6858      	ldr	r0, [r3, #4]
    2ef0:	462a      	mov	r2, r5
    2ef2:	2102      	movs	r1, #2
    2ef4:	3007      	adds	r0, #7
    2ef6:	4f23      	ldr	r7, [pc, #140]	; (2f84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    2ef8:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    2efa:	68a3      	ldr	r3, [r4, #8]
    2efc:	4443      	add	r3, r8
    2efe:	6858      	ldr	r0, [r3, #4]
    2f00:	b2f2      	uxtb	r2, r6
    2f02:	2102      	movs	r1, #2
    2f04:	3009      	adds	r0, #9
    2f06:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    2f08:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2f0a:	68a3      	ldr	r3, [r4, #8]
    2f0c:	4443      	add	r3, r8
    2f0e:	6858      	ldr	r0, [r3, #4]
    2f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2f14:	2102      	movs	r1, #2
    2f16:	3015      	adds	r0, #21
    2f18:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    2f1a:	4629      	mov	r1, r5
    2f1c:	4620      	mov	r0, r4
    2f1e:	4b14      	ldr	r3, [pc, #80]	; (2f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f20:	4798      	blx	r3
    2f22:	e7b8      	b.n	2e96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2f24:	b2b9      	uxth	r1, r7
    2f26:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2f2a:	eba8 0101 	sub.w	r1, r8, r1
    2f2e:	4630      	mov	r0, r6
    2f30:	4c11      	ldr	r4, [pc, #68]	; (2f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2f32:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2f34:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f38:	eba8 0101 	sub.w	r1, r8, r1
    2f3c:	4628      	mov	r0, r5
    2f3e:	47a0      	blx	r4
    2f40:	e7c1      	b.n	2ec6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x23e>
    2f42:	bf00      	nop
    2f44:	f3af 8000 	nop.w
    2f48:	47ae147b 	.word	0x47ae147b
    2f4c:	3ff07ae1 	.word	0x3ff07ae1
    2f50:	200017c0 	.word	0x200017c0
    2f54:	200035fc 	.word	0x200035fc
    2f58:	20000334 	.word	0x20000334
    2f5c:	41008000 	.word	0x41008000
    2f60:	20001030 	.word	0x20001030
    2f64:	000042a5 	.word	0x000042a5
    2f68:	20001204 	.word	0x20001204
    2f6c:	20001ce4 	.word	0x20001ce4
    2f70:	00003e63 	.word	0x00003e63
    2f74:	00002c69 	.word	0x00002c69
    2f78:	000011e9 	.word	0x000011e9
    2f7c:	000012e5 	.word	0x000012e5
    2f80:	000012f5 	.word	0x000012f5
    2f84:	00003831 	.word	0x00003831
    2f88:	0000b2c5 	.word	0x0000b2c5
    2f8c:	0000b391 	.word	0x0000b391
    2f90:	0000b7b5 	.word	0x0000b7b5
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2f94:	2107      	movs	r1, #7
    2f96:	4630      	mov	r0, r6
    2f98:	4b11      	ldr	r3, [pc, #68]	; (2fe0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    2f9a:	4798      	blx	r3
    2f9c:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    2f9e:	ea4f 1906 	mov.w	r9, r6, lsl #4
    2fa2:	4c10      	ldr	r4, [pc, #64]	; (2fe4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    2fa4:	68a3      	ldr	r3, [r4, #8]
    2fa6:	444b      	add	r3, r9
    2fa8:	6858      	ldr	r0, [r3, #4]
    2faa:	4632      	mov	r2, r6
    2fac:	2102      	movs	r1, #2
    2fae:	3007      	adds	r0, #7
    2fb0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2fec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x364>
    2fb4:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    2fb6:	68a3      	ldr	r3, [r4, #8]
    2fb8:	444b      	add	r3, r9
    2fba:	6858      	ldr	r0, [r3, #4]
    2fbc:	b2fa      	uxtb	r2, r7
    2fbe:	2102      	movs	r1, #2
    2fc0:	3009      	adds	r0, #9
    2fc2:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    2fc4:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    2fc6:	68a3      	ldr	r3, [r4, #8]
    2fc8:	444b      	add	r3, r9
    2fca:	6858      	ldr	r0, [r3, #4]
    2fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2fd0:	2102      	movs	r1, #2
    2fd2:	3015      	adds	r0, #21
    2fd4:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    2fd6:	4631      	mov	r1, r6
    2fd8:	4620      	mov	r0, r4
    2fda:	4b03      	ldr	r3, [pc, #12]	; (2fe8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    2fdc:	4798      	blx	r3
    2fde:	e777      	b.n	2ed0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x248>
    2fe0:	000012f5 	.word	0x000012f5
    2fe4:	20001ce4 	.word	0x20001ce4
    2fe8:	00003e63 	.word	0x00003e63
    2fec:	00003831 	.word	0x00003831

00002ff0 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    2ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2ff2:	4f0b      	ldr	r7, [pc, #44]	; (3020 <grid_module_pbf4_reva_hardware_init+0x30>)
    2ff4:	4c0b      	ldr	r4, [pc, #44]	; (3024 <grid_module_pbf4_reva_hardware_init+0x34>)
    2ff6:	463b      	mov	r3, r7
    2ff8:	2200      	movs	r2, #0
    2ffa:	4611      	mov	r1, r2
    2ffc:	4620      	mov	r0, r4
    2ffe:	4e0a      	ldr	r6, [pc, #40]	; (3028 <grid_module_pbf4_reva_hardware_init+0x38>)
    3000:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3002:	4d0a      	ldr	r5, [pc, #40]	; (302c <grid_module_pbf4_reva_hardware_init+0x3c>)
    3004:	463b      	mov	r3, r7
    3006:	2200      	movs	r2, #0
    3008:	4611      	mov	r1, r2
    300a:	4628      	mov	r0, r5
    300c:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    300e:	2100      	movs	r1, #0
    3010:	4620      	mov	r0, r4
    3012:	4c07      	ldr	r4, [pc, #28]	; (3030 <grid_module_pbf4_reva_hardware_init+0x40>)
    3014:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3016:	2100      	movs	r1, #0
    3018:	4628      	mov	r0, r5
    301a:	47a0      	blx	r4
    301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    301e:	bf00      	nop
    3020:	00002c89 	.word	0x00002c89
    3024:	20001030 	.word	0x20001030
    3028:	00004225 	.word	0x00004225
    302c:	20001204 	.word	0x20001204
    3030:	000041e5 	.word	0x000041e5

00003034 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3038:	b097      	sub	sp, #92	; 0x5c
    303a:	4681      	mov	r9, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    303c:	2307      	movs	r3, #7
    303e:	220e      	movs	r2, #14
    3040:	2105      	movs	r1, #5
    3042:	2010      	movs	r0, #16
    3044:	4c23      	ldr	r4, [pc, #140]	; (30d4 <grid_module_pbf4_reva_init+0xa0>)
    3046:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3048:	210c      	movs	r1, #12
    304a:	4823      	ldr	r0, [pc, #140]	; (30d8 <grid_module_pbf4_reva_init+0xa4>)
    304c:	4b23      	ldr	r3, [pc, #140]	; (30dc <grid_module_pbf4_reva_init+0xa8>)
    304e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    3050:	210c      	movs	r1, #12
    3052:	4648      	mov	r0, r9
    3054:	4b22      	ldr	r3, [pc, #136]	; (30e0 <grid_module_pbf4_reva_init+0xac>)
    3056:	4798      	blx	r3
    3058:	2500      	movs	r5, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    305a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 30fc <grid_module_pbf4_reva_init+0xc8>
    305e:	462c      	mov	r4, r5
    3060:	b2ee      	uxtb	r6, r5
		if (i<8){ // PORENTIOMETERS & FADERS
    3062:	2e07      	cmp	r6, #7
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3064:	f04f 0303 	mov.w	r3, #3
    3068:	930b      	str	r3, [sp, #44]	; 0x2c
    306a:	940a      	str	r4, [sp, #40]	; 0x28
    306c:	9509      	str	r5, [sp, #36]	; 0x24
    306e:	f04f 0263 	mov.w	r2, #99	; 0x63
    3072:	9208      	str	r2, [sp, #32]
    3074:	9407      	str	r4, [sp, #28]
    3076:	9306      	str	r3, [sp, #24]
    3078:	f04f 0202 	mov.w	r2, #2
    307c:	9205      	str	r2, [sp, #20]
    307e:	9304      	str	r3, [sp, #16]
    3080:	9403      	str	r4, [sp, #12]
    3082:	9502      	str	r5, [sp, #8]
    3084:	bf94      	ite	ls
    3086:	23b0      	movls	r3, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3088:	2390      	movhi	r3, #144	; 0x90
    308a:	9301      	str	r3, [sp, #4]
    308c:	9400      	str	r4, [sp, #0]
    308e:	4623      	mov	r3, r4
    3090:	4641      	mov	r1, r8
    3092:	a80e      	add	r0, sp, #56	; 0x38
    3094:	4f13      	ldr	r7, [pc, #76]	; (30e4 <grid_module_pbf4_reva_init+0xb0>)
    3096:	47b8      	blx	r7
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3098:	a80e      	add	r0, sp, #56	; 0x38
    309a:	4b13      	ldr	r3, [pc, #76]	; (30e8 <grid_module_pbf4_reva_init+0xb4>)
    309c:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    309e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    30a2:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
			
		grid_report_ui_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    30a6:	2302      	movs	r3, #2
    30a8:	9301      	str	r3, [sp, #4]
    30aa:	ab0d      	add	r3, sp, #52	; 0x34
    30ac:	9300      	str	r3, [sp, #0]
    30ae:	b2c3      	uxtb	r3, r0
    30b0:	aa0e      	add	r2, sp, #56	; 0x38
    30b2:	4631      	mov	r1, r6
    30b4:	4648      	mov	r0, r9
    30b6:	4e0d      	ldr	r6, [pc, #52]	; (30ec <grid_module_pbf4_reva_init+0xb8>)
    30b8:	47b0      	blx	r6
    30ba:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    30bc:	2d0c      	cmp	r5, #12
    30be:	d1cf      	bne.n	3060 <grid_module_pbf4_reva_init+0x2c>
		
	}
	
	grid_report_sys_init(mod);
    30c0:	4648      	mov	r0, r9
    30c2:	4b0b      	ldr	r3, [pc, #44]	; (30f0 <grid_module_pbf4_reva_init+0xbc>)
    30c4:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    30c6:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <grid_module_pbf4_reva_init+0xc0>)
    30c8:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    30ca:	4b0b      	ldr	r3, [pc, #44]	; (30f8 <grid_module_pbf4_reva_init+0xc4>)
    30cc:	4798      	blx	r3
	
    30ce:	b017      	add	sp, #92	; 0x5c
    30d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30d4:	0000119d 	.word	0x0000119d
    30d8:	20003600 	.word	0x20003600
    30dc:	0000223d 	.word	0x0000223d
    30e0:	00003cc5 	.word	0x00003cc5
    30e4:	0000bc21 	.word	0x0000bc21
    30e8:	0000bc69 	.word	0x0000bc69
    30ec:	00003d81 	.word	0x00003d81
    30f0:	00003da1 	.word	0x00003da1
    30f4:	00002ff1 	.word	0x00002ff1
    30f8:	00002c69 	.word	0x00002c69
    30fc:	0000cb1c 	.word	0x0000cb1c

00003100 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3100:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3102:	4803      	ldr	r0, [pc, #12]	; (3110 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3104:	4c03      	ldr	r4, [pc, #12]	; (3114 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3106:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3108:	4803      	ldr	r0, [pc, #12]	; (3118 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    310a:	47a0      	blx	r4
    310c:	bd10      	pop	{r4, pc}
    310e:	bf00      	nop
    3110:	20001030 	.word	0x20001030
    3114:	00004385 	.word	0x00004385
    3118:	20001204 	.word	0x20001204
    311c:	00000000 	.word	0x00000000

00003120 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3120:	4b75      	ldr	r3, [pc, #468]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	2b00      	cmp	r3, #0
    3126:	f000 8085 	beq.w	3234 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    312a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    312e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3130:	2300      	movs	r3, #0
    3132:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3136:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    313a:	4b6f      	ldr	r3, [pc, #444]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    313c:	785a      	ldrb	r2, [r3, #1]
    313e:	3208      	adds	r2, #8
    3140:	496e      	ldr	r1, [pc, #440]	; (32fc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    3142:	5c8d      	ldrb	r5, [r1, r2]
    3144:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3146:	785a      	ldrb	r2, [r3, #1]
    3148:	b2d2      	uxtb	r2, r2
    314a:	5c8c      	ldrb	r4, [r1, r2]
    314c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    314e:	785a      	ldrb	r2, [r3, #1]
    3150:	3201      	adds	r2, #1
    3152:	b2d2      	uxtb	r2, r2
    3154:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3156:	785a      	ldrb	r2, [r3, #1]
    3158:	f002 0207 	and.w	r2, r2, #7
    315c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    315e:	785b      	ldrb	r3, [r3, #1]
    3160:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3164:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3168:	4b65      	ldr	r3, [pc, #404]	; (3300 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    316a:	bf14      	ite	ne
    316c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3170:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    3174:	4b60      	ldr	r3, [pc, #384]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3176:	785b      	ldrb	r3, [r3, #1]
    3178:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    317c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3180:	4b5f      	ldr	r3, [pc, #380]	; (3300 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3182:	bf14      	ite	ne
    3184:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3188:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    318c:	4b5a      	ldr	r3, [pc, #360]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    318e:	785b      	ldrb	r3, [r3, #1]
    3190:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3198:	4b59      	ldr	r3, [pc, #356]	; (3300 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    319a:	bf14      	ite	ne
    319c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    31a0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    31a4:	2302      	movs	r3, #2
    31a6:	f10d 0206 	add.w	r2, sp, #6
    31aa:	2100      	movs	r1, #0
    31ac:	4855      	ldr	r0, [pc, #340]	; (3304 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    31ae:	4e56      	ldr	r6, [pc, #344]	; (3308 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    31b0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    31b2:	2302      	movs	r3, #2
    31b4:	aa01      	add	r2, sp, #4
    31b6:	2100      	movs	r1, #0
    31b8:	4854      	ldr	r0, [pc, #336]	; (330c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    31ba:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    31bc:	f8df a168 	ldr.w	sl, [pc, #360]	; 3328 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    31c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    31c4:	47d0      	blx	sl
    31c6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 332c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    31ca:	a349      	add	r3, pc, #292	; (adr r3, 32f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    31cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    31d0:	47c8      	blx	r9
    31d2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3330 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    31d6:	47c0      	blx	r8
    31d8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    31dc:	42b0      	cmp	r0, r6
    31de:	bf28      	it	cs
    31e0:	4630      	movcs	r0, r6
    31e2:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    31e4:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    31e8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    31ec:	47d0      	blx	sl
    31ee:	a340      	add	r3, pc, #256	; (adr r3, 32f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    31f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    31f4:	47c8      	blx	r9
    31f6:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    31f8:	42b0      	cmp	r0, r6
    31fa:	bf28      	it	cs
    31fc:	4630      	movcs	r0, r6
    31fe:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3202:	b2b9      	uxth	r1, r7
    3204:	4628      	mov	r0, r5
    3206:	4e42      	ldr	r6, [pc, #264]	; (3310 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3208:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    320a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    320e:	4620      	mov	r0, r4
    3210:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3212:	4628      	mov	r0, r5
    3214:	4b3f      	ldr	r3, [pc, #252]	; (3314 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3216:	4798      	blx	r3
    3218:	b990      	cbnz	r0, 3240 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    321a:	4620      	mov	r0, r4
    321c:	4b3d      	ldr	r3, [pc, #244]	; (3314 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    321e:	4798      	blx	r3
    3220:	2800      	cmp	r0, #0
    3222:	d139      	bne.n	3298 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3224:	2200      	movs	r2, #0
    3226:	4b34      	ldr	r3, [pc, #208]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3228:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    322a:	4b3b      	ldr	r3, [pc, #236]	; (3318 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    322c:	4798      	blx	r3
}
    322e:	b002      	add	sp, #8
    3230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    3234:	4a30      	ldr	r2, [pc, #192]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3236:	7813      	ldrb	r3, [r2, #0]
    3238:	3301      	adds	r3, #1
    323a:	b2db      	uxtb	r3, r3
    323c:	7013      	strb	r3, [r2, #0]
    323e:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3240:	2107      	movs	r1, #7
    3242:	4628      	mov	r0, r5
    3244:	4b35      	ldr	r3, [pc, #212]	; (331c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    3246:	4798      	blx	r3
    3248:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    324c:	012f      	lsls	r7, r5, #4
    324e:	4e34      	ldr	r6, [pc, #208]	; (3320 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3250:	68b3      	ldr	r3, [r6, #8]
    3252:	443b      	add	r3, r7
    3254:	6858      	ldr	r0, [r3, #4]
    3256:	462a      	mov	r2, r5
    3258:	2102      	movs	r1, #2
    325a:	3007      	adds	r0, #7
    325c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3334 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3260:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    3262:	68b3      	ldr	r3, [r6, #8]
    3264:	443b      	add	r3, r7
    3266:	6858      	ldr	r0, [r3, #4]
    3268:	4642      	mov	r2, r8
    326a:	2102      	movs	r1, #2
    326c:	3009      	adds	r0, #9
    326e:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    3270:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    3274:	68b3      	ldr	r3, [r6, #8]
    3276:	443b      	add	r3, r7
    3278:	6858      	ldr	r0, [r3, #4]
    327a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    327e:	2102      	movs	r1, #2
    3280:	3015      	adds	r0, #21
    3282:	47c8      	blx	r9
		mod->report_array[adc_index_0].helper[0] = value;
    3284:	6873      	ldr	r3, [r6, #4]
    3286:	441f      	add	r7, r3
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    328e:	4629      	mov	r1, r5
    3290:	4630      	mov	r0, r6
    3292:	4b24      	ldr	r3, [pc, #144]	; (3324 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3294:	4798      	blx	r3
    3296:	e7c0      	b.n	321a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3298:	2107      	movs	r1, #7
    329a:	4620      	mov	r0, r4
    329c:	4b1f      	ldr	r3, [pc, #124]	; (331c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    329e:	4798      	blx	r3
    32a0:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    32a2:	0126      	lsls	r6, r4, #4
    32a4:	4d1e      	ldr	r5, [pc, #120]	; (3320 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    32a6:	68ab      	ldr	r3, [r5, #8]
    32a8:	4433      	add	r3, r6
    32aa:	6858      	ldr	r0, [r3, #4]
    32ac:	4622      	mov	r2, r4
    32ae:	2102      	movs	r1, #2
    32b0:	3007      	adds	r0, #7
    32b2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3334 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    32b6:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    32b8:	68ab      	ldr	r3, [r5, #8]
    32ba:	4433      	add	r3, r6
    32bc:	6858      	ldr	r0, [r3, #4]
    32be:	463a      	mov	r2, r7
    32c0:	2102      	movs	r1, #2
    32c2:	3009      	adds	r0, #9
    32c4:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    32c6:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    32c8:	68ab      	ldr	r3, [r5, #8]
    32ca:	4433      	add	r3, r6
    32cc:	6858      	ldr	r0, [r3, #4]
    32ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    32d2:	2102      	movs	r1, #2
    32d4:	3015      	adds	r0, #21
    32d6:	47c0      	blx	r8
		mod->report_array[adc_index_1].helper[0] = value;
    32d8:	686b      	ldr	r3, [r5, #4]
    32da:	441e      	add	r6, r3
    32dc:	68f3      	ldr	r3, [r6, #12]
    32de:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    32e0:	4621      	mov	r1, r4
    32e2:	4628      	mov	r0, r5
    32e4:	4b0f      	ldr	r3, [pc, #60]	; (3324 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    32e6:	4798      	blx	r3
    32e8:	e79c      	b.n	3224 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    32ea:	bf00      	nop
    32ec:	f3af 8000 	nop.w
    32f0:	47ae147b 	.word	0x47ae147b
    32f4:	3ff07ae1 	.word	0x3ff07ae1
    32f8:	20000646 	.word	0x20000646
    32fc:	20000344 	.word	0x20000344
    3300:	41008000 	.word	0x41008000
    3304:	20001030 	.word	0x20001030
    3308:	000042a5 	.word	0x000042a5
    330c:	20001204 	.word	0x20001204
    3310:	000011e9 	.word	0x000011e9
    3314:	000012e5 	.word	0x000012e5
    3318:	00003101 	.word	0x00003101
    331c:	000012f5 	.word	0x000012f5
    3320:	20001ce4 	.word	0x20001ce4
    3324:	00003e63 	.word	0x00003e63
    3328:	0000b2c5 	.word	0x0000b2c5
    332c:	0000b391 	.word	0x0000b391
    3330:	0000b7b5 	.word	0x0000b7b5
    3334:	00003831 	.word	0x00003831

00003338 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    333a:	4f0b      	ldr	r7, [pc, #44]	; (3368 <grid_module_po16_revb_hardware_init+0x30>)
    333c:	4c0b      	ldr	r4, [pc, #44]	; (336c <grid_module_po16_revb_hardware_init+0x34>)
    333e:	463b      	mov	r3, r7
    3340:	2200      	movs	r2, #0
    3342:	4611      	mov	r1, r2
    3344:	4620      	mov	r0, r4
    3346:	4e0a      	ldr	r6, [pc, #40]	; (3370 <grid_module_po16_revb_hardware_init+0x38>)
    3348:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    334a:	4d0a      	ldr	r5, [pc, #40]	; (3374 <grid_module_po16_revb_hardware_init+0x3c>)
    334c:	463b      	mov	r3, r7
    334e:	2200      	movs	r2, #0
    3350:	4611      	mov	r1, r2
    3352:	4628      	mov	r0, r5
    3354:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3356:	2100      	movs	r1, #0
    3358:	4620      	mov	r0, r4
    335a:	4c07      	ldr	r4, [pc, #28]	; (3378 <grid_module_po16_revb_hardware_init+0x40>)
    335c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    335e:	2100      	movs	r1, #0
    3360:	4628      	mov	r0, r5
    3362:	47a0      	blx	r4
    3364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3366:	bf00      	nop
    3368:	00003121 	.word	0x00003121
    336c:	20001030 	.word	0x20001030
    3370:	00004225 	.word	0x00004225
    3374:	20001204 	.word	0x20001204
    3378:	000041e5 	.word	0x000041e5

0000337c <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3380:	b096      	sub	sp, #88	; 0x58
    3382:	4680      	mov	r8, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3384:	2307      	movs	r3, #7
    3386:	220e      	movs	r2, #14
    3388:	2105      	movs	r1, #5
    338a:	2010      	movs	r0, #16
    338c:	4c20      	ldr	r4, [pc, #128]	; (3410 <grid_module_po16_revb_init+0x94>)
    338e:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    3390:	2110      	movs	r1, #16
    3392:	4820      	ldr	r0, [pc, #128]	; (3414 <grid_module_po16_revb_init+0x98>)
    3394:	4b20      	ldr	r3, [pc, #128]	; (3418 <grid_module_po16_revb_init+0x9c>)
    3396:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    3398:	2110      	movs	r1, #16
    339a:	4640      	mov	r0, r8
    339c:	4b1f      	ldr	r3, [pc, #124]	; (341c <grid_module_po16_revb_init+0xa0>)
    339e:	4798      	blx	r3
    33a0:	2500      	movs	r5, #0
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30];
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    33a2:	f8df a090 	ldr.w	sl, [pc, #144]	; 3434 <grid_module_po16_revb_init+0xb8>
    33a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3438 <grid_module_po16_revb_init+0xbc>
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    33aa:	4f1d      	ldr	r7, [pc, #116]	; (3420 <grid_module_po16_revb_init+0xa4>)
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    33ac:	2303      	movs	r3, #3
    33ae:	930b      	str	r3, [sp, #44]	; 0x2c
    33b0:	2400      	movs	r4, #0
    33b2:	940a      	str	r4, [sp, #40]	; 0x28
    33b4:	9509      	str	r5, [sp, #36]	; 0x24
    33b6:	2263      	movs	r2, #99	; 0x63
    33b8:	9208      	str	r2, [sp, #32]
    33ba:	9407      	str	r4, [sp, #28]
    33bc:	9306      	str	r3, [sp, #24]
    33be:	2602      	movs	r6, #2
    33c0:	9605      	str	r6, [sp, #20]
    33c2:	9304      	str	r3, [sp, #16]
    33c4:	9403      	str	r4, [sp, #12]
    33c6:	9502      	str	r5, [sp, #8]
    33c8:	23b0      	movs	r3, #176	; 0xb0
    33ca:	9301      	str	r3, [sp, #4]
    33cc:	9400      	str	r4, [sp, #0]
    33ce:	4623      	mov	r3, r4
    33d0:	4632      	mov	r2, r6
    33d2:	4651      	mov	r1, sl
    33d4:	a80e      	add	r0, sp, #56	; 0x38
    33d6:	47c8      	blx	r9
		uint8_t payload_length = strlen(payload_template);
    33d8:	a80e      	add	r0, sp, #56	; 0x38
    33da:	47b8      	blx	r7

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    33dc:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    33e0:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    33e4:	9601      	str	r6, [sp, #4]
    33e6:	ab0d      	add	r3, sp, #52	; 0x34
    33e8:	9300      	str	r3, [sp, #0]
    33ea:	b2c3      	uxtb	r3, r0
    33ec:	aa0e      	add	r2, sp, #56	; 0x38
    33ee:	b2e9      	uxtb	r1, r5
    33f0:	4640      	mov	r0, r8
    33f2:	4c0c      	ldr	r4, [pc, #48]	; (3424 <grid_module_po16_revb_init+0xa8>)
    33f4:	47a0      	blx	r4
    33f6:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    33f8:	2d10      	cmp	r5, #16
    33fa:	d1d7      	bne.n	33ac <grid_module_po16_revb_init+0x30>
		
	}
	
	grid_report_sys_init(mod);
    33fc:	4640      	mov	r0, r8
    33fe:	4b0a      	ldr	r3, [pc, #40]	; (3428 <grid_module_po16_revb_init+0xac>)
    3400:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3402:	4b0a      	ldr	r3, [pc, #40]	; (342c <grid_module_po16_revb_init+0xb0>)
    3404:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3406:	4b0a      	ldr	r3, [pc, #40]	; (3430 <grid_module_po16_revb_init+0xb4>)
    3408:	4798      	blx	r3
	
    340a:	b016      	add	sp, #88	; 0x58
    340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3410:	0000119d 	.word	0x0000119d
    3414:	20003600 	.word	0x20003600
    3418:	0000223d 	.word	0x0000223d
    341c:	00003cc5 	.word	0x00003cc5
    3420:	0000bc69 	.word	0x0000bc69
    3424:	00003d81 	.word	0x00003d81
    3428:	00003da1 	.word	0x00003da1
    342c:	00003339 	.word	0x00003339
    3430:	00003101 	.word	0x00003101
    3434:	0000cb1c 	.word	0x0000cb1c
    3438:	0000bc21 	.word	0x0000bc21

0000343c <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    343c:	8982      	ldrh	r2, [r0, #12]
    343e:	b142      	cbz	r2, 3452 <tx_cb_USART_GRID+0x16>
    3440:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3444:	3227      	adds	r2, #39	; 0x27
    3446:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3448:	2100      	movs	r1, #0
    344a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    344e:	4293      	cmp	r3, r2
    3450:	d1fb      	bne.n	344a <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3452:	2300      	movs	r3, #0
    3454:	8183      	strh	r3, [r0, #12]
    3456:	4770      	bx	lr

00003458 <tx_cb_USART_GRID_W>:
{
    3458:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    345a:	4802      	ldr	r0, [pc, #8]	; (3464 <tx_cb_USART_GRID_W+0xc>)
    345c:	4b02      	ldr	r3, [pc, #8]	; (3468 <tx_cb_USART_GRID_W+0x10>)
    345e:	4798      	blx	r3
    3460:	bd08      	pop	{r3, pc}
    3462:	bf00      	nop
    3464:	200021a4 	.word	0x200021a4
    3468:	0000343d 	.word	0x0000343d

0000346c <tx_cb_USART_GRID_S>:
{
    346c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    346e:	4802      	ldr	r0, [pc, #8]	; (3478 <tx_cb_USART_GRID_S+0xc>)
    3470:	4b02      	ldr	r3, [pc, #8]	; (347c <tx_cb_USART_GRID_S+0x10>)
    3472:	4798      	blx	r3
    3474:	bd08      	pop	{r3, pc}
    3476:	bf00      	nop
    3478:	200026c8 	.word	0x200026c8
    347c:	0000343d 	.word	0x0000343d

00003480 <tx_cb_USART_GRID_E>:
{
    3480:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    3482:	4802      	ldr	r0, [pc, #8]	; (348c <tx_cb_USART_GRID_E+0xc>)
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <tx_cb_USART_GRID_E+0x10>)
    3486:	4798      	blx	r3
    3488:	bd08      	pop	{r3, pc}
    348a:	bf00      	nop
    348c:	200030ec 	.word	0x200030ec
    3490:	0000343d 	.word	0x0000343d

00003494 <tx_cb_USART_GRID_N>:
{
    3494:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3496:	4802      	ldr	r0, [pc, #8]	; (34a0 <tx_cb_USART_GRID_N+0xc>)
    3498:	4b02      	ldr	r3, [pc, #8]	; (34a4 <tx_cb_USART_GRID_N+0x10>)
    349a:	4798      	blx	r3
    349c:	bd08      	pop	{r3, pc}
    349e:	bf00      	nop
    34a0:	20001284 	.word	0x20001284
    34a4:	0000343d 	.word	0x0000343d

000034a8 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    34a8:	b508      	push	{r3, lr}
    34aa:	7a83      	ldrb	r3, [r0, #10]
    34ac:	011b      	lsls	r3, r3, #4
    34ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34b2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    34b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    34b8:	f022 0202 	bic.w	r2, r2, #2
    34bc:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    34be:	2100      	movs	r1, #0
    34c0:	7a80      	ldrb	r0, [r0, #10]
    34c2:	4b01      	ldr	r3, [pc, #4]	; (34c8 <grid_sys_port_reset_dma+0x20>)
    34c4:	4798      	blx	r3
    34c6:	bd08      	pop	{r3, pc}
    34c8:	00005fa1 	.word	0x00005fa1

000034cc <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    34cc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34ce:	4802      	ldr	r0, [pc, #8]	; (34d8 <dma_transfer_complete_w_cb+0xc>)
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <dma_transfer_complete_w_cb+0x10>)
    34d2:	4798      	blx	r3
    34d4:	bd08      	pop	{r3, pc}
    34d6:	bf00      	nop
    34d8:	200021a4 	.word	0x200021a4
    34dc:	000034a9 	.word	0x000034a9

000034e0 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    34e0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34e2:	4802      	ldr	r0, [pc, #8]	; (34ec <dma_transfer_complete_s_cb+0xc>)
    34e4:	4b02      	ldr	r3, [pc, #8]	; (34f0 <dma_transfer_complete_s_cb+0x10>)
    34e6:	4798      	blx	r3
    34e8:	bd08      	pop	{r3, pc}
    34ea:	bf00      	nop
    34ec:	200026c8 	.word	0x200026c8
    34f0:	000034a9 	.word	0x000034a9

000034f4 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    34f4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34f6:	4802      	ldr	r0, [pc, #8]	; (3500 <dma_transfer_complete_e_cb+0xc>)
    34f8:	4b02      	ldr	r3, [pc, #8]	; (3504 <dma_transfer_complete_e_cb+0x10>)
    34fa:	4798      	blx	r3
    34fc:	bd08      	pop	{r3, pc}
    34fe:	bf00      	nop
    3500:	200030ec 	.word	0x200030ec
    3504:	000034a9 	.word	0x000034a9

00003508 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3508:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    350a:	4802      	ldr	r0, [pc, #8]	; (3514 <dma_transfer_complete_n_cb+0xc>)
    350c:	4b02      	ldr	r3, [pc, #8]	; (3518 <dma_transfer_complete_n_cb+0x10>)
    350e:	4798      	blx	r3
    3510:	bd08      	pop	{r3, pc}
    3512:	bf00      	nop
    3514:	20001284 	.word	0x20001284
    3518:	000034a9 	.word	0x000034a9

0000351c <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3520:	4b2f      	ldr	r3, [pc, #188]	; (35e0 <grid_sys_uart_init+0xc4>)
    3522:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3526:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    352a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    352e:	f042 0204 	orr.w	r2, r2, #4
    3532:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3536:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    353a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    353e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3542:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3546:	f042 0204 	orr.w	r2, r2, #4
    354a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    354e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3556:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    355a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    355e:	f042 0204 	orr.w	r2, r2, #4
    3562:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3566:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    356a:	f44f 7100 	mov.w	r1, #512	; 0x200
    356e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3572:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3576:	f042 0204 	orr.w	r2, r2, #4
    357a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    357e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3582:	f8df 8098 	ldr.w	r8, [pc, #152]	; 361c <grid_sys_uart_init+0x100>
    3586:	4a17      	ldr	r2, [pc, #92]	; (35e4 <grid_sys_uart_init+0xc8>)
    3588:	2101      	movs	r1, #1
    358a:	4640      	mov	r0, r8
    358c:	4c16      	ldr	r4, [pc, #88]	; (35e8 <grid_sys_uart_init+0xcc>)
    358e:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3590:	4f16      	ldr	r7, [pc, #88]	; (35ec <grid_sys_uart_init+0xd0>)
    3592:	4a17      	ldr	r2, [pc, #92]	; (35f0 <grid_sys_uart_init+0xd4>)
    3594:	2101      	movs	r1, #1
    3596:	4638      	mov	r0, r7
    3598:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    359a:	4e16      	ldr	r6, [pc, #88]	; (35f4 <grid_sys_uart_init+0xd8>)
    359c:	4a16      	ldr	r2, [pc, #88]	; (35f8 <grid_sys_uart_init+0xdc>)
    359e:	2101      	movs	r1, #1
    35a0:	4630      	mov	r0, r6
    35a2:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    35a4:	4d15      	ldr	r5, [pc, #84]	; (35fc <grid_sys_uart_init+0xe0>)
    35a6:	4a16      	ldr	r2, [pc, #88]	; (3600 <grid_sys_uart_init+0xe4>)
    35a8:	2101      	movs	r1, #1
    35aa:	4628      	mov	r0, r5
    35ac:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    35ae:	4915      	ldr	r1, [pc, #84]	; (3604 <grid_sys_uart_init+0xe8>)
    35b0:	4640      	mov	r0, r8
    35b2:	4c15      	ldr	r4, [pc, #84]	; (3608 <grid_sys_uart_init+0xec>)
    35b4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    35b6:	4915      	ldr	r1, [pc, #84]	; (360c <grid_sys_uart_init+0xf0>)
    35b8:	4638      	mov	r0, r7
    35ba:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    35bc:	4914      	ldr	r1, [pc, #80]	; (3610 <grid_sys_uart_init+0xf4>)
    35be:	4630      	mov	r0, r6
    35c0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    35c2:	4914      	ldr	r1, [pc, #80]	; (3614 <grid_sys_uart_init+0xf8>)
    35c4:	4628      	mov	r0, r5
    35c6:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    35c8:	4640      	mov	r0, r8
    35ca:	4c13      	ldr	r4, [pc, #76]	; (3618 <grid_sys_uart_init+0xfc>)
    35cc:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    35ce:	4638      	mov	r0, r7
    35d0:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    35d2:	4630      	mov	r0, r6
    35d4:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    35d6:	4628      	mov	r0, r5
    35d8:	47a0      	blx	r4
    35da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35de:	bf00      	nop
    35e0:	41008000 	.word	0x41008000
    35e4:	00003495 	.word	0x00003495
    35e8:	00004fdd 	.word	0x00004fdd
    35ec:	2000105c 	.word	0x2000105c
    35f0:	00003481 	.word	0x00003481
    35f4:	200011b4 	.word	0x200011b4
    35f8:	0000346d 	.word	0x0000346d
    35fc:	20001164 	.word	0x20001164
    3600:	00003459 	.word	0x00003459
    3604:	20001cf0 	.word	0x20001cf0
    3608:	00004fb5 	.word	0x00004fb5
    360c:	200026b4 	.word	0x200026b4
    3610:	20002bd8 	.word	0x20002bd8
    3614:	20003628 	.word	0x20003628
    3618:	00004f89 	.word	0x00004f89
    361c:	200010b0 	.word	0x200010b0

00003620 <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3620:	b5f0      	push	{r4, r5, r6, r7, lr}
    3622:	b083      	sub	sp, #12
    3624:	4605      	mov	r5, r0
    3626:	460f      	mov	r7, r1
    3628:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    362a:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    362c:	6843      	ldr	r3, [r0, #4]
    362e:	6a19      	ldr	r1, [r3, #32]
    3630:	3128      	adds	r1, #40	; 0x28
    3632:	4620      	mov	r0, r4
    3634:	4b0d      	ldr	r3, [pc, #52]	; (366c <grid_sys_dma_rx_init_one+0x4c>)
    3636:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3638:	f505 7120 	add.w	r1, r5, #640	; 0x280
    363c:	4620      	mov	r0, r4
    363e:	4b0c      	ldr	r3, [pc, #48]	; (3670 <grid_sys_dma_rx_init_one+0x50>)
    3640:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3642:	4639      	mov	r1, r7
    3644:	4620      	mov	r0, r4
    3646:	4b0b      	ldr	r3, [pc, #44]	; (3674 <grid_sys_dma_rx_init_one+0x54>)
    3648:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    364a:	4621      	mov	r1, r4
    364c:	a801      	add	r0, sp, #4
    364e:	4b0a      	ldr	r3, [pc, #40]	; (3678 <grid_sys_dma_rx_init_one+0x58>)
    3650:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3652:	9b01      	ldr	r3, [sp, #4]
    3654:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3656:	2201      	movs	r2, #1
    3658:	2100      	movs	r1, #0
    365a:	4620      	mov	r0, r4
    365c:	4b07      	ldr	r3, [pc, #28]	; (367c <grid_sys_dma_rx_init_one+0x5c>)
    365e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3660:	2100      	movs	r1, #0
    3662:	4620      	mov	r0, r4
    3664:	4b06      	ldr	r3, [pc, #24]	; (3680 <grid_sys_dma_rx_init_one+0x60>)
    3666:	4798      	blx	r3
	

}
    3668:	b003      	add	sp, #12
    366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    366c:	00005f1d 	.word	0x00005f1d
    3670:	00005f0d 	.word	0x00005f0d
    3674:	00005f49 	.word	0x00005f49
    3678:	00005fe1 	.word	0x00005fe1
    367c:	00005eb9 	.word	0x00005eb9
    3680:	00005fa1 	.word	0x00005fa1

00003684 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3684:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3686:	4a10      	ldr	r2, [pc, #64]	; (36c8 <grid_sys_dma_rx_init+0x44>)
    3688:	f44f 7116 	mov.w	r1, #600	; 0x258
    368c:	480f      	ldr	r0, [pc, #60]	; (36cc <grid_sys_dma_rx_init+0x48>)
    368e:	4c10      	ldr	r4, [pc, #64]	; (36d0 <grid_sys_dma_rx_init+0x4c>)
    3690:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3692:	4a10      	ldr	r2, [pc, #64]	; (36d4 <grid_sys_dma_rx_init+0x50>)
    3694:	f44f 7116 	mov.w	r1, #600	; 0x258
    3698:	480f      	ldr	r0, [pc, #60]	; (36d8 <grid_sys_dma_rx_init+0x54>)
    369a:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    369c:	4a0f      	ldr	r2, [pc, #60]	; (36dc <grid_sys_dma_rx_init+0x58>)
    369e:	f44f 7116 	mov.w	r1, #600	; 0x258
    36a2:	480f      	ldr	r0, [pc, #60]	; (36e0 <grid_sys_dma_rx_init+0x5c>)
    36a4:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    36a6:	4a0f      	ldr	r2, [pc, #60]	; (36e4 <grid_sys_dma_rx_init+0x60>)
    36a8:	f44f 7116 	mov.w	r1, #600	; 0x258
    36ac:	480e      	ldr	r0, [pc, #56]	; (36e8 <grid_sys_dma_rx_init+0x64>)
    36ae:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36b0:	4b0e      	ldr	r3, [pc, #56]	; (36ec <grid_sys_dma_rx_init+0x68>)
    36b2:	2200      	movs	r2, #0
    36b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    36b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    36bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    36c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    36c4:	bd10      	pop	{r4, pc}
    36c6:	bf00      	nop
    36c8:	00003509 	.word	0x00003509
    36cc:	20001284 	.word	0x20001284
    36d0:	00003621 	.word	0x00003621
    36d4:	000034f5 	.word	0x000034f5
    36d8:	200030ec 	.word	0x200030ec
    36dc:	000034e1 	.word	0x000034e1
    36e0:	200026c8 	.word	0x200026c8
    36e4:	000034cd 	.word	0x000034cd
    36e8:	200021a4 	.word	0x200021a4
    36ec:	e000e100 	.word	0xe000e100

000036f0 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    36f0:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    36f2:	2200      	movs	r2, #0
    36f4:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    36f6:	23c8      	movs	r3, #200	; 0xc8
    36f8:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    36fa:	2164      	movs	r1, #100	; 0x64
    36fc:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    36fe:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    3700:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    3702:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    3704:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    3706:	2432      	movs	r4, #50	; 0x32
    3708:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    370a:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    370c:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    370e:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    3710:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    3712:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    3714:	4b03      	ldr	r3, [pc, #12]	; (3724 <grid_sys_init+0x34>)
    3716:	4798      	blx	r3
	
	grid_sys_uart_init();
    3718:	4b03      	ldr	r3, [pc, #12]	; (3728 <grid_sys_init+0x38>)
    371a:	4798      	blx	r3
	grid_sys_dma_rx_init();
    371c:	4b03      	ldr	r3, [pc, #12]	; (372c <grid_sys_init+0x3c>)
    371e:	4798      	blx	r3
    3720:	bd10      	pop	{r4, pc}
    3722:	bf00      	nop
    3724:	000015e9 	.word	0x000015e9
    3728:	0000351d 	.word	0x0000351d
    372c:	00003685 	.word	0x00003685

00003730 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3730:	6980      	ldr	r0, [r0, #24]
    3732:	4770      	bx	lr

00003734 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t told){
	
	if (mod->realtime>told){
    3734:	6980      	ldr	r0, [r0, #24]
    3736:	4288      	cmp	r0, r1
		return mod->realtime-told;
    3738:	bf8e      	itee	hi
    373a:	1a40      	subhi	r0, r0, r1
	}
	else{
		return (1<<32)-1 - told + mod->realtime;
    373c:	43c9      	mvnls	r1, r1
    373e:	1840      	addls	r0, r0, r1
	}
	

}
    3740:	4770      	bx	lr

00003742 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3742:	6983      	ldr	r3, [r0, #24]
    3744:	3301      	adds	r3, #1
    3746:	6183      	str	r3, [r0, #24]
    3748:	4770      	bx	lr

0000374a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    374a:	7a00      	ldrb	r0, [r0, #8]
    374c:	4770      	bx	lr

0000374e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    374e:	2300      	movs	r3, #0
    3750:	7203      	strb	r3, [r0, #8]
    3752:	4770      	bx	lr

00003754 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3754:	7983      	ldrb	r3, [r0, #6]
    3756:	b123      	cbz	r3, 3762 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3758:	2b01      	cmp	r3, #1
    375a:	d00f      	beq.n	377c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    375c:	2b02      	cmp	r3, #2
    375e:	d015      	beq.n	378c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3760:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3762:	8880      	ldrh	r0, [r0, #4]
    3764:	0840      	lsrs	r0, r0, #1
    3766:	387d      	subs	r0, #125	; 0x7d
    3768:	2800      	cmp	r0, #0
    376a:	bfb8      	it	lt
    376c:	4240      	neglt	r0, r0
    376e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3772:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3776:	f3c0 0047 	ubfx	r0, r0, #1, #8
    377a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    377c:	8880      	ldrh	r0, [r0, #4]
    377e:	4b06      	ldr	r3, [pc, #24]	; (3798 <grid_sys_alert_get_color_intensity+0x44>)
    3780:	fba3 3000 	umull	r3, r0, r3, r0
    3784:	f340 1000 	sbfx	r0, r0, #4, #1
    3788:	b2c0      	uxtb	r0, r0
    378a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    378c:	8880      	ldrh	r0, [r0, #4]
    378e:	2864      	cmp	r0, #100	; 0x64
    3790:	bf8c      	ite	hi
    3792:	20ff      	movhi	r0, #255	; 0xff
    3794:	2000      	movls	r0, #0
    3796:	4770      	bx	lr
    3798:	10624dd3 	.word	0x10624dd3

0000379c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    379c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    379e:	2401      	movs	r4, #1
    37a0:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    37a2:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    37a4:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    37a6:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    37a8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    37ac:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    37ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
    37b2:	7183      	strb	r3, [r0, #6]
	
}
    37b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    37b8:	4770      	bx	lr

000037ba <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    37ba:	7840      	ldrb	r0, [r0, #1]
    37bc:	4770      	bx	lr

000037be <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    37be:	7880      	ldrb	r0, [r0, #2]
    37c0:	4770      	bx	lr

000037c2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    37c2:	78c0      	ldrb	r0, [r0, #3]
    37c4:	4770      	bx	lr

000037c6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    37c6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    37c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    37cc:	b2d8      	uxtb	r0, r3
    37ce:	2809      	cmp	r0, #9
    37d0:	d90d      	bls.n	37ee <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    37d2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    37d6:	b2db      	uxtb	r3, r3
    37d8:	2b05      	cmp	r3, #5
    37da:	d903      	bls.n	37e4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    37dc:	b131      	cbz	r1, 37ec <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    37de:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    37e0:	2000      	movs	r0, #0
    37e2:	4770      	bx	lr
		result = ascii - 97 + 10;
    37e4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    37e8:	b2c0      	uxtb	r0, r0
    37ea:	4770      	bx	lr
	uint8_t result = 0;
    37ec:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    37ee:	4770      	bx	lr

000037f0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    37f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    37f4:	b1c1      	cbz	r1, 3828 <grid_sys_read_hex_string_value+0x38>
    37f6:	4690      	mov	r8, r2
    37f8:	1e45      	subs	r5, r0, #1
    37fa:	1e4b      	subs	r3, r1, #1
    37fc:	009c      	lsls	r4, r3, #2
    37fe:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3802:	3f02      	subs	r7, #2
    3804:	b2db      	uxtb	r3, r3
    3806:	1aff      	subs	r7, r7, r3
    3808:	00bf      	lsls	r7, r7, #2
    380a:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    380c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 382c <grid_sys_read_hex_string_value+0x3c>
    3810:	4641      	mov	r1, r8
    3812:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3816:	47c8      	blx	r9
    3818:	40a0      	lsls	r0, r4
    381a:	4406      	add	r6, r0
    381c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    381e:	42bc      	cmp	r4, r7
    3820:	d1f6      	bne.n	3810 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3822:	4630      	mov	r0, r6
    3824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3828:	2600      	movs	r6, #0
	return result;
    382a:	e7fa      	b.n	3822 <grid_sys_read_hex_string_value+0x32>
    382c:	000037c7 	.word	0x000037c7

00003830 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3830:	b530      	push	{r4, r5, lr}
    3832:	b085      	sub	sp, #20
    3834:	4605      	mov	r5, r0
    3836:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3838:	4909      	ldr	r1, [pc, #36]	; (3860 <grid_sys_write_hex_string_value+0x30>)
    383a:	a801      	add	r0, sp, #4
    383c:	4b09      	ldr	r3, [pc, #36]	; (3864 <grid_sys_write_hex_string_value+0x34>)
    383e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3840:	b164      	cbz	r4, 385c <grid_sys_write_hex_string_value+0x2c>
    3842:	ab04      	add	r3, sp, #16
    3844:	1b1a      	subs	r2, r3, r4
    3846:	3a05      	subs	r2, #5
    3848:	1e6b      	subs	r3, r5, #1
    384a:	1e60      	subs	r0, r4, #1
    384c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3850:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3854:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3858:	4283      	cmp	r3, r0
    385a:	d1f9      	bne.n	3850 <grid_sys_write_hex_string_value+0x20>
	}

}
    385c:	b005      	add	sp, #20
    385e:	bd30      	pop	{r4, r5, pc}
    3860:	0000cb50 	.word	0x0000cb50
    3864:	0000bc21 	.word	0x0000bc21

00003868 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3868:	4b34      	ldr	r3, [pc, #208]	; (393c <grid_sys_get_hwcfg+0xd4>)
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3870:	d002      	beq.n	3878 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3872:	4b32      	ldr	r3, [pc, #200]	; (393c <grid_sys_get_hwcfg+0xd4>)
    3874:	6818      	ldr	r0, [r3, #0]
    3876:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    387c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    387e:	4b30      	ldr	r3, [pc, #192]	; (3940 <grid_sys_get_hwcfg+0xd8>)
    3880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3888:	492e      	ldr	r1, [pc, #184]	; (3944 <grid_sys_get_hwcfg+0xdc>)
    388a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    388e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3892:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    389a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    389e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    38a2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    38a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    38aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    38ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    38b2:	4925      	ldr	r1, [pc, #148]	; (3948 <grid_sys_get_hwcfg+0xe0>)
    38b4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    38b8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    38bc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    38c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    38c4:	2001      	movs	r0, #1
    38c6:	4b21      	ldr	r3, [pc, #132]	; (394c <grid_sys_get_hwcfg+0xe4>)
    38c8:	4798      	blx	r3
    38ca:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    38cc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    38ce:	4d1c      	ldr	r5, [pc, #112]	; (3940 <grid_sys_get_hwcfg+0xd8>)
    38d0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    38d4:	4f1d      	ldr	r7, [pc, #116]	; (394c <grid_sys_get_hwcfg+0xe4>)
    38d6:	e00c      	b.n	38f2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    38d8:	2e07      	cmp	r6, #7
    38da:	d027      	beq.n	392c <grid_sys_get_hwcfg+0xc4>
    38dc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    38e0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    38e4:	2001      	movs	r0, #1
    38e6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    38e8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    38ec:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    38ee:	2e08      	cmp	r6, #8
    38f0:	d01c      	beq.n	392c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    38f2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    38f6:	2001      	movs	r0, #1
    38f8:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    38fa:	a801      	add	r0, sp, #4
    38fc:	4b14      	ldr	r3, [pc, #80]	; (3950 <grid_sys_get_hwcfg+0xe8>)
    38fe:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3900:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3904:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3908:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    390c:	405c      	eors	r4, r3
    390e:	4014      	ands	r4, r2
    3910:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3912:	a801      	add	r0, sp, #4
    3914:	4b0f      	ldr	r3, [pc, #60]	; (3954 <grid_sys_get_hwcfg+0xec>)
    3916:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3918:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    391c:	d0dc      	beq.n	38d8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    391e:	2301      	movs	r3, #1
    3920:	40b3      	lsls	r3, r6
    3922:	ea43 0808 	orr.w	r8, r3, r8
    3926:	fa5f f888 	uxtb.w	r8, r8
    392a:	e7d5      	b.n	38d8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    392c:	4b03      	ldr	r3, [pc, #12]	; (393c <grid_sys_get_hwcfg+0xd4>)
    392e:	f8c3 8000 	str.w	r8, [r3]
}
    3932:	4b02      	ldr	r3, [pc, #8]	; (393c <grid_sys_get_hwcfg+0xd4>)
    3934:	6818      	ldr	r0, [r3, #0]
    3936:	b003      	add	sp, #12
    3938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    393c:	20000354 	.word	0x20000354
    3940:	41008000 	.word	0x41008000
    3944:	40002000 	.word	0x40002000
    3948:	40028000 	.word	0x40028000
    394c:	0000442d 	.word	0x0000442d
    3950:	000043ad 	.word	0x000043ad
    3954:	000043bb 	.word	0x000043bb

00003958 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    395c:	b085      	sub	sp, #20
    395e:	4681      	mov	r9, r0
    3960:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3962:	4b53      	ldr	r3, [pc, #332]	; (3ab0 <grid_sys_bank_select+0x158>)
    3964:	4798      	blx	r3
    3966:	4682      	mov	sl, r0
	if (banknumber == 255){
    3968:	2cff      	cmp	r4, #255	; 0xff
    396a:	d008      	beq.n	397e <grid_sys_bank_select+0x26>
		mod->bank_select = banknumber%4;
    396c:	f004 0403 	and.w	r4, r4, #3
    3970:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3974:	2500      	movs	r5, #0
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3976:	f8df b14c 	ldr.w	fp, [pc, #332]	; 3ac4 <grid_sys_bank_select+0x16c>
    397a:	9503      	str	r5, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    397c:	e064      	b.n	3a48 <grid_sys_bank_select+0xf0>
		mod->bank_select = 255;
    397e:	23ff      	movs	r3, #255	; 0xff
    3980:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3984:	2500      	movs	r5, #0
    3986:	f8df b138 	ldr.w	fp, [pc, #312]	; 3ac0 <grid_sys_bank_select+0x168>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    398a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3ac4 <grid_sys_bank_select+0x16c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    398e:	e01c      	b.n	39ca <grid_sys_bank_select+0x72>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3990:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3994:	f8cd 9004 	str.w	r9, [sp, #4]
    3998:	2600      	movs	r6, #0
    399a:	9600      	str	r6, [sp, #0]
    399c:	4633      	mov	r3, r6
    399e:	4632      	mov	r2, r6
    39a0:	4621      	mov	r1, r4
    39a2:	4658      	mov	r0, fp
    39a4:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    39a6:	9601      	str	r6, [sp, #4]
    39a8:	2305      	movs	r3, #5
    39aa:	9300      	str	r3, [sp, #0]
    39ac:	4633      	mov	r3, r6
    39ae:	4632      	mov	r2, r6
    39b0:	4621      	mov	r1, r4
    39b2:	4658      	mov	r0, fp
    39b4:	4f3f      	ldr	r7, [pc, #252]	; (3ab4 <grid_sys_bank_select+0x15c>)
    39b6:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    39b8:	9601      	str	r6, [sp, #4]
    39ba:	9600      	str	r6, [sp, #0]
    39bc:	464b      	mov	r3, r9
    39be:	4632      	mov	r2, r6
    39c0:	4621      	mov	r1, r4
    39c2:	4658      	mov	r0, fp
    39c4:	4c3c      	ldr	r4, [pc, #240]	; (3ab8 <grid_sys_bank_select+0x160>)
    39c6:	47a0      	blx	r4
    39c8:	3501      	adds	r5, #1
    39ca:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    39cc:	4658      	mov	r0, fp
    39ce:	4b3b      	ldr	r3, [pc, #236]	; (3abc <grid_sys_bank_select+0x164>)
    39d0:	4798      	blx	r3
    39d2:	42a0      	cmp	r0, r4
    39d4:	d968      	bls.n	3aa8 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    39d6:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    39da:	d0d9      	beq.n	3990 <grid_sys_bank_select+0x38>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    39dc:	2306      	movs	r3, #6
    39de:	9301      	str	r3, [sp, #4]
    39e0:	9300      	str	r3, [sp, #0]
    39e2:	2200      	movs	r2, #0
    39e4:	4621      	mov	r1, r4
    39e6:	4658      	mov	r0, fp
    39e8:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    39ea:	233f      	movs	r3, #63	; 0x3f
    39ec:	9301      	str	r3, [sp, #4]
    39ee:	9300      	str	r3, [sp, #0]
    39f0:	2200      	movs	r2, #0
    39f2:	4621      	mov	r1, r4
    39f4:	4658      	mov	r0, fp
    39f6:	4e2f      	ldr	r6, [pc, #188]	; (3ab4 <grid_sys_bank_select+0x15c>)
    39f8:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    39fa:	237f      	movs	r3, #127	; 0x7f
    39fc:	9301      	str	r3, [sp, #4]
    39fe:	9300      	str	r3, [sp, #0]
    3a00:	2200      	movs	r2, #0
    3a02:	4621      	mov	r1, r4
    3a04:	4658      	mov	r0, fp
    3a06:	4c2c      	ldr	r4, [pc, #176]	; (3ab8 <grid_sys_bank_select+0x160>)
    3a08:	47a0      	blx	r4
    3a0a:	e7dd      	b.n	39c8 <grid_sys_bank_select+0x70>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3a0c:	27ff      	movs	r7, #255	; 0xff
    3a0e:	9701      	str	r7, [sp, #4]
    3a10:	2600      	movs	r6, #0
    3a12:	9600      	str	r6, [sp, #0]
    3a14:	4633      	mov	r3, r6
    3a16:	4632      	mov	r2, r6
    3a18:	4621      	mov	r1, r4
    3a1a:	4829      	ldr	r0, [pc, #164]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a1c:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3a1e:	9601      	str	r6, [sp, #4]
    3a20:	2305      	movs	r3, #5
    3a22:	9300      	str	r3, [sp, #0]
    3a24:	4633      	mov	r3, r6
    3a26:	4632      	mov	r2, r6
    3a28:	4621      	mov	r1, r4
    3a2a:	4825      	ldr	r0, [pc, #148]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a2c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3ab4 <grid_sys_bank_select+0x15c>
    3a30:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3a32:	9601      	str	r6, [sp, #4]
    3a34:	9600      	str	r6, [sp, #0]
    3a36:	463b      	mov	r3, r7
    3a38:	4632      	mov	r2, r6
    3a3a:	4621      	mov	r1, r4
    3a3c:	4820      	ldr	r0, [pc, #128]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a3e:	4c1e      	ldr	r4, [pc, #120]	; (3ab8 <grid_sys_bank_select+0x160>)
    3a40:	47a0      	blx	r4
    3a42:	9b03      	ldr	r3, [sp, #12]
    3a44:	3301      	adds	r3, #1
    3a46:	9303      	str	r3, [sp, #12]
    3a48:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a4c:	481c      	ldr	r0, [pc, #112]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a4e:	4b1b      	ldr	r3, [pc, #108]	; (3abc <grid_sys_bank_select+0x164>)
    3a50:	4798      	blx	r3
    3a52:	4284      	cmp	r4, r0
    3a54:	d228      	bcs.n	3aa8 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3a56:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3a5a:	d0d7      	beq.n	3a0c <grid_sys_bank_select+0xb4>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3a5c:	f899 3009 	ldrb.w	r3, [r9, #9]
    3a60:	444b      	add	r3, r9
    3a62:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3a64:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3a66:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3a6a:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3a6e:	9301      	str	r3, [sp, #4]
    3a70:	097b      	lsrs	r3, r7, #5
    3a72:	9300      	str	r3, [sp, #0]
    3a74:	0973      	lsrs	r3, r6, #5
    3a76:	2200      	movs	r2, #0
    3a78:	4621      	mov	r1, r4
    3a7a:	4811      	ldr	r0, [pc, #68]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a7c:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3a7e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3a82:	9301      	str	r3, [sp, #4]
    3a84:	087b      	lsrs	r3, r7, #1
    3a86:	9300      	str	r3, [sp, #0]
    3a88:	0873      	lsrs	r3, r6, #1
    3a8a:	2200      	movs	r2, #0
    3a8c:	4621      	mov	r1, r4
    3a8e:	480c      	ldr	r0, [pc, #48]	; (3ac0 <grid_sys_bank_select+0x168>)
    3a90:	4d08      	ldr	r5, [pc, #32]	; (3ab4 <grid_sys_bank_select+0x15c>)
    3a92:	47a8      	blx	r5
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3a94:	f8cd 8004 	str.w	r8, [sp, #4]
    3a98:	9700      	str	r7, [sp, #0]
    3a9a:	4633      	mov	r3, r6
    3a9c:	2200      	movs	r2, #0
    3a9e:	4621      	mov	r1, r4
    3aa0:	4807      	ldr	r0, [pc, #28]	; (3ac0 <grid_sys_bank_select+0x168>)
    3aa2:	4c05      	ldr	r4, [pc, #20]	; (3ab8 <grid_sys_bank_select+0x160>)
    3aa4:	47a0      	blx	r4
    3aa6:	e7cc      	b.n	3a42 <grid_sys_bank_select+0xea>
}
    3aa8:	b005      	add	sp, #20
    3aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3aae:	bf00      	nop
    3ab0:	00003869 	.word	0x00003869
    3ab4:	00001e99 	.word	0x00001e99
    3ab8:	00001ee3 	.word	0x00001ee3
    3abc:	00001e09 	.word	0x00001e09
    3ac0:	20003600 	.word	0x20003600
    3ac4:	00001e51 	.word	0x00001e51

00003ac8 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3ac8:	2903      	cmp	r1, #3
    3aca:	d009      	beq.n	3ae0 <grid_msg_get_checksum+0x18>
    3acc:	1e43      	subs	r3, r0, #1
    3ace:	3904      	subs	r1, #4
    3ad0:	4401      	add	r1, r0
    3ad2:	2000      	movs	r0, #0
		checksum ^= str[i];
    3ad4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3ad8:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3ada:	428b      	cmp	r3, r1
    3adc:	d1fa      	bne.n	3ad4 <grid_msg_get_checksum+0xc>
    3ade:	4770      	bx	lr
	uint8_t checksum = 0;
    3ae0:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3ae2:	4770      	bx	lr

00003ae4 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3ae4:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3ae6:	1ecb      	subs	r3, r1, #3
    3ae8:	2102      	movs	r1, #2
    3aea:	4418      	add	r0, r3
    3aec:	4b01      	ldr	r3, [pc, #4]	; (3af4 <grid_msg_set_checksum+0x10>)
    3aee:	4798      	blx	r3
    3af0:	bd08      	pop	{r3, pc}
    3af2:	bf00      	nop
    3af4:	00003831 	.word	0x00003831

00003af8 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3af8:	b500      	push	{lr}
    3afa:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3afc:	aa02      	add	r2, sp, #8
    3afe:	2300      	movs	r3, #0
    3b00:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3b04:	2102      	movs	r1, #2
    3b06:	3004      	adds	r0, #4
    3b08:	4b02      	ldr	r3, [pc, #8]	; (3b14 <grid_msg_get_id+0x1c>)
    3b0a:	4798      	blx	r3
	
}
    3b0c:	b2c0      	uxtb	r0, r0
    3b0e:	b003      	add	sp, #12
    3b10:	f85d fb04 	ldr.w	pc, [sp], #4
    3b14:	000037f1 	.word	0x000037f1

00003b18 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3b18:	b500      	push	{lr}
    3b1a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b1c:	aa02      	add	r2, sp, #8
    3b1e:	2300      	movs	r3, #0
    3b20:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3b24:	2102      	movs	r1, #2
    3b26:	3006      	adds	r0, #6
    3b28:	4b02      	ldr	r3, [pc, #8]	; (3b34 <grid_msg_get_dx+0x1c>)
    3b2a:	4798      	blx	r3
	
}
    3b2c:	b2c0      	uxtb	r0, r0
    3b2e:	b003      	add	sp, #12
    3b30:	f85d fb04 	ldr.w	pc, [sp], #4
    3b34:	000037f1 	.word	0x000037f1

00003b38 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3b38:	b500      	push	{lr}
    3b3a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b3c:	aa02      	add	r2, sp, #8
    3b3e:	2300      	movs	r3, #0
    3b40:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3b44:	2102      	movs	r1, #2
    3b46:	3008      	adds	r0, #8
    3b48:	4b02      	ldr	r3, [pc, #8]	; (3b54 <grid_msg_get_dy+0x1c>)
    3b4a:	4798      	blx	r3

}
    3b4c:	b2c0      	uxtb	r0, r0
    3b4e:	b003      	add	sp, #12
    3b50:	f85d fb04 	ldr.w	pc, [sp], #4
    3b54:	000037f1 	.word	0x000037f1

00003b58 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3b58:	b500      	push	{lr}
    3b5a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b5c:	aa02      	add	r2, sp, #8
    3b5e:	2300      	movs	r3, #0
    3b60:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3b64:	2102      	movs	r1, #2
    3b66:	300a      	adds	r0, #10
    3b68:	4b02      	ldr	r3, [pc, #8]	; (3b74 <grid_msg_get_age+0x1c>)
    3b6a:	4798      	blx	r3
	
}
    3b6c:	b2c0      	uxtb	r0, r0
    3b6e:	b003      	add	sp, #12
    3b70:	f85d fb04 	ldr.w	pc, [sp], #4
    3b74:	000037f1 	.word	0x000037f1

00003b78 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3b78:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3b7a:	460a      	mov	r2, r1
    3b7c:	2102      	movs	r1, #2
    3b7e:	3004      	adds	r0, #4
    3b80:	4b01      	ldr	r3, [pc, #4]	; (3b88 <grid_msg_set_id+0x10>)
    3b82:	4798      	blx	r3
    3b84:	bd08      	pop	{r3, pc}
    3b86:	bf00      	nop
    3b88:	00003831 	.word	0x00003831

00003b8c <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3b8c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3b8e:	460a      	mov	r2, r1
    3b90:	2102      	movs	r1, #2
    3b92:	3006      	adds	r0, #6
    3b94:	4b01      	ldr	r3, [pc, #4]	; (3b9c <grid_msg_set_dx+0x10>)
    3b96:	4798      	blx	r3
    3b98:	bd08      	pop	{r3, pc}
    3b9a:	bf00      	nop
    3b9c:	00003831 	.word	0x00003831

00003ba0 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3ba0:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3ba2:	460a      	mov	r2, r1
    3ba4:	2102      	movs	r1, #2
    3ba6:	3008      	adds	r0, #8
    3ba8:	4b01      	ldr	r3, [pc, #4]	; (3bb0 <grid_msg_set_dy+0x10>)
    3baa:	4798      	blx	r3
    3bac:	bd08      	pop	{r3, pc}
    3bae:	bf00      	nop
    3bb0:	00003831 	.word	0x00003831

00003bb4 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3bb4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3bb6:	460a      	mov	r2, r1
    3bb8:	2102      	movs	r1, #2
    3bba:	300a      	adds	r0, #10
    3bbc:	4b01      	ldr	r3, [pc, #4]	; (3bc4 <grid_msg_set_age+0x10>)
    3bbe:	4798      	blx	r3
    3bc0:	bd08      	pop	{r3, pc}
    3bc2:	bf00      	nop
    3bc4:	00003831 	.word	0x00003831

00003bc8 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3bc8:	69c3      	ldr	r3, [r0, #28]
    3bca:	4299      	cmp	r1, r3
    3bcc:	d00d      	beq.n	3bea <grid_msg_find_recent+0x22>
    3bce:	2301      	movs	r3, #1
    3bd0:	f003 021f 	and.w	r2, r3, #31
    3bd4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3bd8:	69d2      	ldr	r2, [r2, #28]
    3bda:	428a      	cmp	r2, r1
    3bdc:	d007      	beq.n	3bee <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3bde:	3301      	adds	r3, #1
    3be0:	b2db      	uxtb	r3, r3
    3be2:	2b20      	cmp	r3, #32
    3be4:	d1f4      	bne.n	3bd0 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3be6:	2000      	movs	r0, #0
    3be8:	4770      	bx	lr
			return 1;
    3bea:	2001      	movs	r0, #1
    3bec:	4770      	bx	lr
    3bee:	2001      	movs	r0, #1
}
    3bf0:	4770      	bx	lr

00003bf2 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3bf2:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3bf6:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3bf8:	f003 031f 	and.w	r3, r3, #31
    3bfc:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3c00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3c04:	61c1      	str	r1, [r0, #28]
    3c06:	4770      	bx	lr

00003c08 <grid_sys_ping>:
	
}


void grid_sys_ping(struct grid_port* por){
    3c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0a:	b085      	sub	sp, #20
    3c0c:	4605      	mov	r5, r0
		
		
	uint8_t length = 16;
	uint32_t hwcfg = grid_sys_get_hwcfg();
    3c0e:	4b27      	ldr	r3, [pc, #156]	; (3cac <grid_sys_ping+0xa4>)
    3c10:	4798      	blx	r3
	char message[16] = {GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction, '0','0','0','0','0','0','0','0',GRID_MSG_END_OF_TRANSMISSION,'0','0','\n'};
    3c12:	2301      	movs	r3, #1
    3c14:	f88d 3000 	strb.w	r3, [sp]
    3c18:	230e      	movs	r3, #14
    3c1a:	f88d 3001 	strb.w	r3, [sp, #1]
    3c1e:	2307      	movs	r3, #7
    3c20:	f88d 3002 	strb.w	r3, [sp, #2]
    3c24:	7a6b      	ldrb	r3, [r5, #9]
    3c26:	f88d 3003 	strb.w	r3, [sp, #3]
    3c2a:	2330      	movs	r3, #48	; 0x30
    3c2c:	f88d 3004 	strb.w	r3, [sp, #4]
    3c30:	f88d 3005 	strb.w	r3, [sp, #5]
    3c34:	f88d 3006 	strb.w	r3, [sp, #6]
    3c38:	f88d 3007 	strb.w	r3, [sp, #7]
    3c3c:	f88d 3008 	strb.w	r3, [sp, #8]
    3c40:	f88d 3009 	strb.w	r3, [sp, #9]
    3c44:	f88d 300a 	strb.w	r3, [sp, #10]
    3c48:	f88d 300b 	strb.w	r3, [sp, #11]
    3c4c:	2204      	movs	r2, #4
    3c4e:	f88d 200c 	strb.w	r2, [sp, #12]
    3c52:	f88d 300d 	strb.w	r3, [sp, #13]
    3c56:	f88d 300e 	strb.w	r3, [sp, #14]
    3c5a:	230a      	movs	r3, #10
    3c5c:	f88d 300f 	strb.w	r3, [sp, #15]
	// Create the packet
	//sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,hwcfg, GRID_MSG_END_OF_TRANSMISSION);
	//length = strlen(message);
	

	grid_sys_write_hex_string_value(&message[4], 8, hwcfg);
    3c60:	4602      	mov	r2, r0
    3c62:	2108      	movs	r1, #8
    3c64:	a801      	add	r0, sp, #4
    3c66:	4c12      	ldr	r4, [pc, #72]	; (3cb0 <grid_sys_ping+0xa8>)
    3c68:	47a0      	blx	r4
	

	
 	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3c6a:	2110      	movs	r1, #16
    3c6c:	4668      	mov	r0, sp
    3c6e:	4b11      	ldr	r3, [pc, #68]	; (3cb4 <grid_sys_ping+0xac>)
    3c70:	4798      	blx	r3
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3c72:	4602      	mov	r2, r0
    3c74:	2102      	movs	r1, #2
    3c76:	f10d 000d 	add.w	r0, sp, #13
    3c7a:	47a0      	blx	r4
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3c7c:	f505 659b 	add.w	r5, r5, #1240	; 0x4d8
    3c80:	2110      	movs	r1, #16
    3c82:	4628      	mov	r0, r5
    3c84:	4b0c      	ldr	r3, [pc, #48]	; (3cb8 <grid_sys_ping+0xb0>)
    3c86:	4798      	blx	r3
    3c88:	b168      	cbz	r0, 3ca6 <grid_sys_ping+0x9e>
    3c8a:	f10d 34ff 	add.w	r4, sp, #4294967295
    3c8e:	f10d 070f 	add.w	r7, sp, #15
		
		for(uint16_t i = 0; i<length; i++){
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3c92:	4e0a      	ldr	r6, [pc, #40]	; (3cbc <grid_sys_ping+0xb4>)
    3c94:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3c98:	4628      	mov	r0, r5
    3c9a:	47b0      	blx	r6
		for(uint16_t i = 0; i<length; i++){
    3c9c:	42bc      	cmp	r4, r7
    3c9e:	d1f9      	bne.n	3c94 <grid_sys_ping+0x8c>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3ca0:	4628      	mov	r0, r5
    3ca2:	4b07      	ldr	r3, [pc, #28]	; (3cc0 <grid_sys_ping+0xb8>)
    3ca4:	4798      	blx	r3
	}
				
}
    3ca6:	b005      	add	sp, #20
    3ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3caa:	bf00      	nop
    3cac:	00003869 	.word	0x00003869
    3cb0:	00003831 	.word	0x00003831
    3cb4:	00003ac9 	.word	0x00003ac9
    3cb8:	00001375 	.word	0x00001375
    3cbc:	000013a5 	.word	0x000013a5
    3cc0:	000013c1 	.word	0x000013c1

00003cc4 <grid_ui_model_init>:
	}
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3cc4:	b510      	push	{r4, lr}
    3cc6:	4604      	mov	r4, r0
	
	
	mod->report_offset = 2; // System Reserved Report Elements
    3cc8:	2302      	movs	r3, #2
    3cca:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3ccc:	4419      	add	r1, r3
    3cce:	b2c8      	uxtb	r0, r1
    3cd0:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3cd2:	0100      	lsls	r0, r0, #4
    3cd4:	4b02      	ldr	r3, [pc, #8]	; (3ce0 <grid_ui_model_init+0x1c>)
    3cd6:	4798      	blx	r3
    3cd8:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3cda:	3020      	adds	r0, #32
    3cdc:	60a0      	str	r0, [r4, #8]
		
}
    3cde:	bd10      	pop	{r4, pc}
    3ce0:	0000b83d 	.word	0x0000b83d

00003ce4 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ce8:	4605      	mov	r5, r0
    3cea:	4690      	mov	r8, r2
    3cec:	9e08      	ldr	r6, [sp, #32]

	mod->report_array[index].changed = 0;
    3cee:	010c      	lsls	r4, r1, #4
    3cf0:	6842      	ldr	r2, [r0, #4]
    3cf2:	2100      	movs	r1, #0
    3cf4:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3cf6:	6842      	ldr	r2, [r0, #4]
    3cf8:	4422      	add	r2, r4
    3cfa:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3cfc:	6842      	ldr	r2, [r0, #4]
    3cfe:	4422      	add	r2, r4
    3d00:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    3d04:	7211      	strb	r1, [r2, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3d06:	6842      	ldr	r2, [r0, #4]
    3d08:	eb02 0904 	add.w	r9, r2, r4
    3d0c:	4618      	mov	r0, r3
    3d0e:	4f1b      	ldr	r7, [pc, #108]	; (3d7c <grid_report_init+0x98>)
    3d10:	47b8      	blx	r7
    3d12:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3d16:	686b      	ldr	r3, [r5, #4]
    3d18:	eb03 0904 	add.w	r9, r3, r4
    3d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d1e:	47b8      	blx	r7
    3d20:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3d24:	686a      	ldr	r2, [r5, #4]
    3d26:	4422      	add	r2, r4
    3d28:	6853      	ldr	r3, [r2, #4]
    3d2a:	b30b      	cbz	r3, 3d70 <grid_report_init+0x8c>
    3d2c:	68d3      	ldr	r3, [r2, #12]
    3d2e:	b313      	cbz	r3, 3d76 <grid_report_init+0x92>
		return -1;
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3d30:	7853      	ldrb	r3, [r2, #1]
    3d32:	b15b      	cbz	r3, 3d4c <grid_report_init+0x68>
    3d34:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3d36:	f818 1003 	ldrb.w	r1, [r8, r3]
    3d3a:	6852      	ldr	r2, [r2, #4]
    3d3c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3d3e:	3301      	adds	r3, #1
    3d40:	b2db      	uxtb	r3, r3
    3d42:	686a      	ldr	r2, [r5, #4]
    3d44:	4422      	add	r2, r4
    3d46:	7851      	ldrb	r1, [r2, #1]
    3d48:	4299      	cmp	r1, r3
    3d4a:	d8f4      	bhi.n	3d36 <grid_report_init+0x52>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3d4c:	686a      	ldr	r2, [r5, #4]
    3d4e:	4422      	add	r2, r4
    3d50:	7a10      	ldrb	r0, [r2, #8]
    3d52:	b188      	cbz	r0, 3d78 <grid_report_init+0x94>
    3d54:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3d56:	5cf1      	ldrb	r1, [r6, r3]
    3d58:	68d2      	ldr	r2, [r2, #12]
    3d5a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3d5c:	3301      	adds	r3, #1
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	686a      	ldr	r2, [r5, #4]
    3d62:	4422      	add	r2, r4
    3d64:	7a11      	ldrb	r1, [r2, #8]
    3d66:	4299      	cmp	r1, r3
    3d68:	d8f5      	bhi.n	3d56 <grid_report_init+0x72>
	}
	
	return 0;
    3d6a:	2000      	movs	r0, #0
    3d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3d70:	20ff      	movs	r0, #255	; 0xff
    3d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d76:	20ff      	movs	r0, #255	; 0xff
	
}
    3d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d7c:	0000b83d 	.word	0x0000b83d

00003d80 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3d80:	b510      	push	{r4, lr}
    3d82:	b082      	sub	sp, #8
	
	grid_report_init(mod, index+mod->report_offset, p, p_len, h, h_len);
    3d84:	7844      	ldrb	r4, [r0, #1]
    3d86:	4421      	add	r1, r4
    3d88:	9c05      	ldr	r4, [sp, #20]
    3d8a:	9401      	str	r4, [sp, #4]
    3d8c:	9c04      	ldr	r4, [sp, #16]
    3d8e:	9400      	str	r4, [sp, #0]
    3d90:	b2c9      	uxtb	r1, r1
    3d92:	4c02      	ldr	r4, [pc, #8]	; (3d9c <grid_report_ui_init+0x1c>)
    3d94:	47a0      	blx	r4
}
    3d96:	b002      	add	sp, #8
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	bf00      	nop
    3d9c:	00003ce5 	.word	0x00003ce5

00003da0 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
	
	for(uint8_t i=0; i<mod->report_offset; i++){
    3da0:	7843      	ldrb	r3, [r0, #1]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d03f      	beq.n	3e26 <grid_report_sys_init+0x86>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3daa:	b08e      	sub	sp, #56	; 0x38
    3dac:	4606      	mov	r6, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3dae:	2400      	movs	r4, #0
			);

		}
		else{ // HEARTBEAT 	
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3db0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3e34 <grid_report_sys_init+0x94>
    3db4:	4625      	mov	r5, r4
    3db6:	e023      	b.n	3e00 <grid_report_sys_init+0x60>
    3db8:	2303      	movs	r3, #3
    3dba:	9303      	str	r3, [sp, #12]
    3dbc:	9502      	str	r5, [sp, #8]
    3dbe:	2367      	movs	r3, #103	; 0x67
    3dc0:	9301      	str	r3, [sp, #4]
    3dc2:	2366      	movs	r3, #102	; 0x66
    3dc4:	9300      	str	r3, [sp, #0]
    3dc6:	2304      	movs	r3, #4
    3dc8:	2202      	movs	r2, #2
    3dca:	4641      	mov	r1, r8
    3dcc:	a806      	add	r0, sp, #24
    3dce:	4f16      	ldr	r7, [pc, #88]	; (3e28 <grid_report_sys_init+0x88>)
    3dd0:	47b8      	blx	r7
			);
			
		}
		
				
		uint8_t payload_length = strlen(payload_template);
    3dd2:	a806      	add	r0, sp, #24
    3dd4:	4b15      	ldr	r3, [pc, #84]	; (3e2c <grid_report_sys_init+0x8c>)
    3dd6:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3dd8:	f88d 5014 	strb.w	r5, [sp, #20]
		helper_template[1] = 0;
    3ddc:	f88d 5015 	strb.w	r5, [sp, #21]
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    3de0:	2302      	movs	r3, #2
    3de2:	9301      	str	r3, [sp, #4]
    3de4:	ab05      	add	r3, sp, #20
    3de6:	9300      	str	r3, [sp, #0]
    3de8:	b2c3      	uxtb	r3, r0
    3dea:	aa06      	add	r2, sp, #24
    3dec:	4621      	mov	r1, r4
    3dee:	4630      	mov	r0, r6
    3df0:	4f0f      	ldr	r7, [pc, #60]	; (3e30 <grid_report_sys_init+0x90>)
    3df2:	47b8      	blx	r7
		
		if (error != 0){
    3df4:	b9a0      	cbnz	r0, 3e20 <grid_report_sys_init+0x80>
	for(uint8_t i=0; i<mod->report_offset; i++){
    3df6:	3401      	adds	r4, #1
    3df8:	b2e4      	uxtb	r4, r4
    3dfa:	7873      	ldrb	r3, [r6, #1]
    3dfc:	42a3      	cmp	r3, r4
    3dfe:	d90f      	bls.n	3e20 <grid_report_sys_init+0x80>
		if (i == 0){ // MAPMODE
    3e00:	2c00      	cmp	r4, #0
    3e02:	d1d9      	bne.n	3db8 <grid_report_sys_init+0x18>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3e04:	2303      	movs	r3, #3
    3e06:	9303      	str	r3, [sp, #12]
    3e08:	9502      	str	r5, [sp, #8]
    3e0a:	2365      	movs	r3, #101	; 0x65
    3e0c:	9301      	str	r3, [sp, #4]
    3e0e:	2364      	movs	r3, #100	; 0x64
    3e10:	9300      	str	r3, [sp, #0]
    3e12:	2304      	movs	r3, #4
    3e14:	2202      	movs	r2, #2
    3e16:	4641      	mov	r1, r8
    3e18:	a806      	add	r0, sp, #24
    3e1a:	4f03      	ldr	r7, [pc, #12]	; (3e28 <grid_report_sys_init+0x88>)
    3e1c:	47b8      	blx	r7
    3e1e:	e7d8      	b.n	3dd2 <grid_report_sys_init+0x32>
			}
			
		}
	
	}
}
    3e20:	b00e      	add	sp, #56	; 0x38
    3e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e26:	4770      	bx	lr
    3e28:	0000bc21 	.word	0x0000bc21
    3e2c:	0000bc69 	.word	0x0000bc69
    3e30:	00003ce5 	.word	0x00003ce5
    3e34:	0000cb58 	.word	0x0000cb58

00003e38 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3e38:	6843      	ldr	r3, [r0, #4]
    3e3a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3e3e:	7848      	ldrb	r0, [r1, #1]
    3e40:	b140      	cbz	r0, 3e54 <grid_report_render+0x1c>
    3e42:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3e44:	6848      	ldr	r0, [r1, #4]
    3e46:	5cc0      	ldrb	r0, [r0, r3]
    3e48:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3e4a:	3301      	adds	r3, #1
    3e4c:	b2db      	uxtb	r3, r3
    3e4e:	7848      	ldrb	r0, [r1, #1]
    3e50:	4298      	cmp	r0, r3
    3e52:	d8f7      	bhi.n	3e44 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3e54:	4770      	bx	lr

00003e56 <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    3e56:	7843      	ldrb	r3, [r0, #1]
    3e58:	4419      	add	r1, r3
    3e5a:	6843      	ldr	r3, [r0, #4]
    3e5c:	0109      	lsls	r1, r1, #4
}
    3e5e:	5c58      	ldrb	r0, [r3, r1]
    3e60:	4770      	bx	lr

00003e62 <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    3e62:	7843      	ldrb	r3, [r0, #1]
    3e64:	4419      	add	r1, r3
    3e66:	6843      	ldr	r3, [r0, #4]
    3e68:	0109      	lsls	r1, r1, #4
    3e6a:	2201      	movs	r2, #1
    3e6c:	545a      	strb	r2, [r3, r1]
    3e6e:	4770      	bx	lr

00003e70 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3e70:	6843      	ldr	r3, [r0, #4]
    3e72:	0109      	lsls	r1, r1, #4
    3e74:	2201      	movs	r2, #1
    3e76:	545a      	strb	r2, [r3, r1]
    3e78:	4770      	bx	lr

00003e7a <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3e7a:	6843      	ldr	r3, [r0, #4]
    3e7c:	0109      	lsls	r1, r1, #4
    3e7e:	2200      	movs	r2, #0
    3e80:	545a      	strb	r2, [r3, r1]
    3e82:	4770      	bx	lr

00003e84 <grid_port_process_ui>:
	if (por->cooldown > 15){
    3e84:	6803      	ldr	r3, [r0, #0]
    3e86:	2b0f      	cmp	r3, #15
    3e88:	d829      	bhi.n	3ede <grid_port_process_ui+0x5a>
void grid_port_process_ui(struct grid_port* por){
    3e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e8e:	b0cb      	sub	sp, #300	; 0x12c
	else if (por->cooldown>0){
    3e90:	b10b      	cbz	r3, 3e96 <grid_port_process_ui+0x12>
		por->cooldown--;
    3e92:	3b01      	subs	r3, #1
    3e94:	6003      	str	r3, [r0, #0]
    3e96:	4607      	mov	r7, r0
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    3e98:	4b4c      	ldr	r3, [pc, #304]	; (3fcc <grid_port_process_ui+0x148>)
    3e9a:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
	uint8_t age = grid_sys_state.age;
    3e9e:	781b      	ldrb	r3, [r3, #0]
	sprintf(&message[length],
    3ea0:	2117      	movs	r1, #23
    3ea2:	9105      	str	r1, [sp, #20]
    3ea4:	9304      	str	r3, [sp, #16]
    3ea6:	237f      	movs	r3, #127	; 0x7f
    3ea8:	9303      	str	r3, [sp, #12]
    3eaa:	9302      	str	r3, [sp, #8]
    3eac:	9201      	str	r2, [sp, #4]
    3eae:	2300      	movs	r3, #0
    3eb0:	9300      	str	r3, [sp, #0]
    3eb2:	230f      	movs	r3, #15
    3eb4:	2201      	movs	r2, #1
    3eb6:	4946      	ldr	r1, [pc, #280]	; (3fd0 <grid_port_process_ui+0x14c>)
    3eb8:	a80a      	add	r0, sp, #40	; 0x28
    3eba:	4c46      	ldr	r4, [pc, #280]	; (3fd4 <grid_port_process_ui+0x150>)
    3ebc:	47a0      	blx	r4
	length += strlen(&message[length]);
    3ebe:	a80a      	add	r0, sp, #40	; 0x28
    3ec0:	4b45      	ldr	r3, [pc, #276]	; (3fd8 <grid_port_process_ui+0x154>)
    3ec2:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3ec4:	4b45      	ldr	r3, [pc, #276]	; (3fdc <grid_port_process_ui+0x158>)
    3ec6:	781b      	ldrb	r3, [r3, #0]
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d034      	beq.n	3f36 <grid_port_process_ui+0xb2>
    3ecc:	4605      	mov	r5, r0
    3ece:	2400      	movs	r4, #0
    3ed0:	46a0      	mov	r8, r4
		CRITICAL_SECTION_ENTER()
    3ed2:	f8df a138 	ldr.w	sl, [pc, #312]	; 400c <grid_port_process_ui+0x188>
	return mod->report_array[index].changed;
    3ed6:	4e41      	ldr	r6, [pc, #260]	; (3fdc <grid_port_process_ui+0x158>)
		CRITICAL_SECTION_LEAVE()
    3ed8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4010 <grid_port_process_ui+0x18c>
    3edc:	e00a      	b.n	3ef4 <grid_port_process_ui+0x70>
		por->cooldown--;
    3ede:	3b01      	subs	r3, #1
    3ee0:	6003      	str	r3, [r0, #0]
    3ee2:	4770      	bx	lr
		CRITICAL_SECTION_LEAVE()
    3ee4:	a807      	add	r0, sp, #28
    3ee6:	47c8      	blx	r9
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3ee8:	3401      	adds	r4, #1
    3eea:	b2e4      	uxtb	r4, r4
    3eec:	7833      	ldrb	r3, [r6, #0]
    3eee:	b2db      	uxtb	r3, r3
    3ef0:	42a3      	cmp	r3, r4
    3ef2:	d91d      	bls.n	3f30 <grid_port_process_ui+0xac>
		if (length>200){
    3ef4:	2dc8      	cmp	r5, #200	; 0xc8
    3ef6:	d8f7      	bhi.n	3ee8 <grid_port_process_ui+0x64>
		CRITICAL_SECTION_ENTER()
    3ef8:	a807      	add	r0, sp, #28
    3efa:	47d0      	blx	sl
	return mod->report_array[index].changed;
    3efc:	6872      	ldr	r2, [r6, #4]
    3efe:	0123      	lsls	r3, r4, #4
		if (grid_report_sys_get_changed_flag(&grid_ui_state, i)){
    3f00:	5cd3      	ldrb	r3, [r2, r3]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d0ee      	beq.n	3ee4 <grid_port_process_ui+0x60>
			packetvalid++;
    3f06:	f108 0801 	add.w	r8, r8, #1
    3f0a:	fa5f f888 	uxtb.w	r8, r8
			grid_report_render(&grid_ui_state, i, &message[length]);
    3f0e:	ab0a      	add	r3, sp, #40	; 0x28
    3f10:	eb03 0b05 	add.w	fp, r3, r5
    3f14:	465a      	mov	r2, fp
    3f16:	4621      	mov	r1, r4
    3f18:	4630      	mov	r0, r6
    3f1a:	4b31      	ldr	r3, [pc, #196]	; (3fe0 <grid_port_process_ui+0x15c>)
    3f1c:	4798      	blx	r3
			grid_report_sys_clear_changed_flag(&grid_ui_state, i);
    3f1e:	4621      	mov	r1, r4
    3f20:	4630      	mov	r0, r6
    3f22:	4b30      	ldr	r3, [pc, #192]	; (3fe4 <grid_port_process_ui+0x160>)
    3f24:	4798      	blx	r3
			length += strlen(&message[length]);
    3f26:	4658      	mov	r0, fp
    3f28:	4b2b      	ldr	r3, [pc, #172]	; (3fd8 <grid_port_process_ui+0x154>)
    3f2a:	4798      	blx	r3
    3f2c:	4405      	add	r5, r0
    3f2e:	e7d9      	b.n	3ee4 <grid_port_process_ui+0x60>
	if (packetvalid){
    3f30:	f1b8 0f00 	cmp.w	r8, #0
    3f34:	d102      	bne.n	3f3c <grid_port_process_ui+0xb8>
}
    3f36:	b04b      	add	sp, #300	; 0x12c
    3f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		por->cooldown += (10+por->cooldown);
    3f3c:	683b      	ldr	r3, [r7, #0]
    3f3e:	005b      	lsls	r3, r3, #1
    3f40:	330a      	adds	r3, #10
    3f42:	603b      	str	r3, [r7, #0]
		grid_sys_state.next_broadcast_message_id++;
    3f44:	4a21      	ldr	r2, [pc, #132]	; (3fcc <grid_port_process_ui+0x148>)
    3f46:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    3f4a:	3301      	adds	r3, #1
    3f4c:	b2db      	uxtb	r3, r3
    3f4e:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    3f52:	ac0a      	add	r4, sp, #40	; 0x28
    3f54:	1966      	adds	r6, r4, r5
    3f56:	2204      	movs	r2, #4
    3f58:	4923      	ldr	r1, [pc, #140]	; (3fe8 <grid_port_process_ui+0x164>)
    3f5a:	4630      	mov	r0, r6
    3f5c:	4f1d      	ldr	r7, [pc, #116]	; (3fd4 <grid_port_process_ui+0x150>)
    3f5e:	47b8      	blx	r7
		length += strlen(&message[length]);
    3f60:	4630      	mov	r0, r6
    3f62:	4e1d      	ldr	r6, [pc, #116]	; (3fd8 <grid_port_process_ui+0x154>)
    3f64:	47b0      	blx	r6
    3f66:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    3f68:	462a      	mov	r2, r5
    3f6a:	4920      	ldr	r1, [pc, #128]	; (3fec <grid_port_process_ui+0x168>)
    3f6c:	a808      	add	r0, sp, #32
    3f6e:	47b8      	blx	r7
		message[2] = length_string[0];
    3f70:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3f74:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    3f76:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3f7a:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    3f7c:	4b1c      	ldr	r3, [pc, #112]	; (3ff0 <grid_port_process_ui+0x16c>)
    3f7e:	6818      	ldr	r0, [r3, #0]
    3f80:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    3f82:	1960      	adds	r0, r4, r5
    3f84:	47b0      	blx	r6
    3f86:	4405      	add	r5, r0
		uint8_t checksum = grid_msg_get_checksum(message, length);
    3f88:	4629      	mov	r1, r5
    3f8a:	4620      	mov	r0, r4
    3f8c:	4b19      	ldr	r3, [pc, #100]	; (3ff4 <grid_port_process_ui+0x170>)
    3f8e:	4798      	blx	r3
		grid_msg_set_checksum(message, length, checksum);
    3f90:	b2c2      	uxtb	r2, r0
    3f92:	4629      	mov	r1, r5
    3f94:	4620      	mov	r0, r4
    3f96:	4b18      	ldr	r3, [pc, #96]	; (3ff8 <grid_port_process_ui+0x174>)
    3f98:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    3f9a:	b2a9      	uxth	r1, r5
    3f9c:	4817      	ldr	r0, [pc, #92]	; (3ffc <grid_port_process_ui+0x178>)
    3f9e:	4b18      	ldr	r3, [pc, #96]	; (4000 <grid_port_process_ui+0x17c>)
    3fa0:	4798      	blx	r3
    3fa2:	2800      	cmp	r0, #0
    3fa4:	d0c7      	beq.n	3f36 <grid_port_process_ui+0xb2>
			for(uint32_t i = 0; i<length; i++){
    3fa6:	b16d      	cbz	r5, 3fc4 <grid_port_process_ui+0x140>
    3fa8:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    3fac:	ab4a      	add	r3, sp, #296	; 0x128
    3fae:	441d      	add	r5, r3
    3fb0:	f2a5 1501 	subw	r5, r5, #257	; 0x101
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    3fb4:	4f11      	ldr	r7, [pc, #68]	; (3ffc <grid_port_process_ui+0x178>)
    3fb6:	4e13      	ldr	r6, [pc, #76]	; (4004 <grid_port_process_ui+0x180>)
    3fb8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3fbc:	4638      	mov	r0, r7
    3fbe:	47b0      	blx	r6
			for(uint32_t i = 0; i<length; i++){
    3fc0:	42a5      	cmp	r5, r4
    3fc2:	d1f9      	bne.n	3fb8 <grid_port_process_ui+0x134>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    3fc4:	480d      	ldr	r0, [pc, #52]	; (3ffc <grid_port_process_ui+0x178>)
    3fc6:	4b10      	ldr	r3, [pc, #64]	; (4008 <grid_port_process_ui+0x184>)
    3fc8:	4798      	blx	r3
    3fca:	e7b4      	b.n	3f36 <grid_port_process_ui+0xb2>
    3fcc:	20001cf4 	.word	0x20001cf4
    3fd0:	0000cb70 	.word	0x0000cb70
    3fd4:	0000bc21 	.word	0x0000bc21
    3fd8:	0000bc69 	.word	0x0000bc69
    3fdc:	20001ce4 	.word	0x20001ce4
    3fe0:	00003e39 	.word	0x00003e39
    3fe4:	00003e7b 	.word	0x00003e7b
    3fe8:	0000cb88 	.word	0x0000cb88
    3fec:	0000cb8c 	.word	0x0000cb8c
    3ff0:	0000cb94 	.word	0x0000cb94
    3ff4:	00003ac9 	.word	0x00003ac9
    3ff8:	00003ae5 	.word	0x00003ae5
    3ffc:	20001cc4 	.word	0x20001cc4
    4000:	00001375 	.word	0x00001375
    4004:	000013a5 	.word	0x000013a5
    4008:	000013c1 	.word	0x000013c1
    400c:	000043ad 	.word	0x000043ad
    4010:	000043bb 	.word	0x000043bb

00004014 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    4014:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    4016:	6983      	ldr	r3, [r0, #24]
    4018:	b103      	cbz	r3, 401c <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    401a:	4798      	blx	r3
    401c:	bd08      	pop	{r3, pc}

0000401e <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    401e:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    4020:	69c3      	ldr	r3, [r0, #28]
    4022:	b103      	cbz	r3, 4026 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4024:	4798      	blx	r3
    4026:	bd08      	pop	{r3, pc}

00004028 <adc_async_channel_conversion_done>:
{
    4028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    402c:	4606      	mov	r6, r0
    402e:	460f      	mov	r7, r1
    4030:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    4032:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4034:	5c5c      	ldrb	r4, [r3, r1]
    4036:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    403a:	00e4      	lsls	r4, r4, #3
    403c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    4040:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4044:	f105 0a04 	add.w	sl, r5, #4
    4048:	b2d1      	uxtb	r1, r2
    404a:	4650      	mov	r0, sl
    404c:	4b0c      	ldr	r3, [pc, #48]	; (4080 <adc_async_channel_conversion_done+0x58>)
    404e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    4050:	4630      	mov	r0, r6
    4052:	4b0c      	ldr	r3, [pc, #48]	; (4084 <adc_async_channel_conversion_done+0x5c>)
    4054:	4798      	blx	r3
    4056:	2801      	cmp	r0, #1
    4058:	d907      	bls.n	406a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    405a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    405e:	4650      	mov	r0, sl
    4060:	4b07      	ldr	r3, [pc, #28]	; (4080 <adc_async_channel_conversion_done+0x58>)
    4062:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4064:	8aab      	ldrh	r3, [r5, #20]
    4066:	3301      	adds	r3, #1
    4068:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    406a:	8aab      	ldrh	r3, [r5, #20]
    406c:	3301      	adds	r3, #1
    406e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4070:	f858 3004 	ldr.w	r3, [r8, r4]
    4074:	b113      	cbz	r3, 407c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4076:	4639      	mov	r1, r7
    4078:	4630      	mov	r0, r6
    407a:	4798      	blx	r3
    407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4080:	00005881 	.word	0x00005881
    4084:	00005c1f 	.word	0x00005c1f

00004088 <adc_async_init>:
{
    4088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    408c:	4689      	mov	r9, r1
    408e:	4616      	mov	r6, r2
    4090:	461c      	mov	r4, r3
    4092:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    4096:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4098:	4607      	mov	r7, r0
    409a:	b140      	cbz	r0, 40ae <adc_async_init+0x26>
    409c:	b149      	cbz	r1, 40b2 <adc_async_init+0x2a>
    409e:	b152      	cbz	r2, 40b6 <adc_async_init+0x2e>
    40a0:	f1b8 0f00 	cmp.w	r8, #0
    40a4:	d009      	beq.n	40ba <adc_async_init+0x32>
    40a6:	1c28      	adds	r0, r5, #0
    40a8:	bf18      	it	ne
    40aa:	2001      	movne	r0, #1
    40ac:	e006      	b.n	40bc <adc_async_init+0x34>
    40ae:	2000      	movs	r0, #0
    40b0:	e004      	b.n	40bc <adc_async_init+0x34>
    40b2:	2000      	movs	r0, #0
    40b4:	e002      	b.n	40bc <adc_async_init+0x34>
    40b6:	2000      	movs	r0, #0
    40b8:	e000      	b.n	40bc <adc_async_init+0x34>
    40ba:	2000      	movs	r0, #0
    40bc:	f8df b064 	ldr.w	fp, [pc, #100]	; 4124 <adc_async_init+0x9c>
    40c0:	223f      	movs	r2, #63	; 0x3f
    40c2:	4659      	mov	r1, fp
    40c4:	f8df a060 	ldr.w	sl, [pc, #96]	; 4128 <adc_async_init+0xa0>
    40c8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    40ca:	1c60      	adds	r0, r4, #1
    40cc:	2240      	movs	r2, #64	; 0x40
    40ce:	4659      	mov	r1, fp
    40d0:	4580      	cmp	r8, r0
    40d2:	bfcc      	ite	gt
    40d4:	2000      	movgt	r0, #0
    40d6:	2001      	movle	r0, #1
    40d8:	47d0      	blx	sl
	device = &descr->device;
    40da:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    40dc:	21ff      	movs	r1, #255	; 0xff
    40de:	b2da      	uxtb	r2, r3
    40e0:	54b1      	strb	r1, [r6, r2]
    40e2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    40e4:	b2da      	uxtb	r2, r3
    40e6:	42a2      	cmp	r2, r4
    40e8:	d9f9      	bls.n	40de <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    40ea:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    40ec:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    40f0:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    40f4:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    40f6:	4649      	mov	r1, r9
    40f8:	4638      	mov	r0, r7
    40fa:	4b06      	ldr	r3, [pc, #24]	; (4114 <adc_async_init+0x8c>)
    40fc:	4798      	blx	r3
	if (init_status) {
    40fe:	4603      	mov	r3, r0
    4100:	b928      	cbnz	r0, 410e <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    4102:	4a05      	ldr	r2, [pc, #20]	; (4118 <adc_async_init+0x90>)
    4104:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    4106:	4a05      	ldr	r2, [pc, #20]	; (411c <adc_async_init+0x94>)
    4108:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    410a:	4a05      	ldr	r2, [pc, #20]	; (4120 <adc_async_init+0x98>)
    410c:	607a      	str	r2, [r7, #4]
}
    410e:	4618      	mov	r0, r3
    4110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4114:	00005aed 	.word	0x00005aed
    4118:	00004029 	.word	0x00004029
    411c:	00004015 	.word	0x00004015
    4120:	0000401f 	.word	0x0000401f
    4124:	0000cb98 	.word	0x0000cb98
    4128:	00005745 	.word	0x00005745

0000412c <adc_async_register_channel_buffer>:
{
    412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4130:	460e      	mov	r6, r1
    4132:	4617      	mov	r7, r2
    4134:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4136:	4605      	mov	r5, r0
    4138:	2800      	cmp	r0, #0
    413a:	d040      	beq.n	41be <adc_async_register_channel_buffer+0x92>
    413c:	2a00      	cmp	r2, #0
    413e:	d040      	beq.n	41c2 <adc_async_register_channel_buffer+0x96>
    4140:	1c18      	adds	r0, r3, #0
    4142:	bf18      	it	ne
    4144:	2001      	movne	r0, #1
    4146:	f8df 9098 	ldr.w	r9, [pc, #152]	; 41e0 <adc_async_register_channel_buffer+0xb4>
    414a:	2266      	movs	r2, #102	; 0x66
    414c:	4649      	mov	r1, r9
    414e:	4c22      	ldr	r4, [pc, #136]	; (41d8 <adc_async_register_channel_buffer+0xac>)
    4150:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    4152:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4156:	2267      	movs	r2, #103	; 0x67
    4158:	4649      	mov	r1, r9
    415a:	42b0      	cmp	r0, r6
    415c:	bf34      	ite	cc
    415e:	2000      	movcc	r0, #0
    4160:	2001      	movcs	r0, #1
    4162:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4164:	6a29      	ldr	r1, [r5, #32]
    4166:	5d8b      	ldrb	r3, [r1, r6]
    4168:	2bff      	cmp	r3, #255	; 0xff
    416a:	d12c      	bne.n	41c6 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    416c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4170:	2300      	movs	r3, #0
    4172:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4174:	b2da      	uxtb	r2, r3
    4176:	5c8a      	ldrb	r2, [r1, r2]
    4178:	2aff      	cmp	r2, #255	; 0xff
			index++;
    417a:	bf1c      	itt	ne
    417c:	3401      	addne	r4, #1
    417e:	b2e4      	uxtbne	r4, r4
    4180:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    4182:	b2da      	uxtb	r2, r3
    4184:	4282      	cmp	r2, r0
    4186:	d9f5      	bls.n	4174 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4188:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    418c:	42a3      	cmp	r3, r4
    418e:	d31d      	bcc.n	41cc <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4190:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    4194:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4198:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    419a:	4448      	add	r0, r9
    419c:	4642      	mov	r2, r8
    419e:	4639      	mov	r1, r7
    41a0:	3004      	adds	r0, #4
    41a2:	4b0e      	ldr	r3, [pc, #56]	; (41dc <adc_async_register_channel_buffer+0xb0>)
    41a4:	4798      	blx	r3
    41a6:	4602      	mov	r2, r0
    41a8:	b998      	cbnz	r0, 41d2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    41aa:	6a2b      	ldr	r3, [r5, #32]
    41ac:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    41ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    41b0:	4499      	add	r9, r3
    41b2:	2300      	movs	r3, #0
    41b4:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    41b8:	4610      	mov	r0, r2
    41ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    41be:	2000      	movs	r0, #0
    41c0:	e7c1      	b.n	4146 <adc_async_register_channel_buffer+0x1a>
    41c2:	2000      	movs	r0, #0
    41c4:	e7bf      	b.n	4146 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    41c6:	f06f 020c 	mvn.w	r2, #12
    41ca:	e7f5      	b.n	41b8 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    41cc:	f06f 021b 	mvn.w	r2, #27
    41d0:	e7f2      	b.n	41b8 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    41d2:	f06f 020c 	mvn.w	r2, #12
    41d6:	e7ef      	b.n	41b8 <adc_async_register_channel_buffer+0x8c>
    41d8:	00005745 	.word	0x00005745
    41dc:	000057ed 	.word	0x000057ed
    41e0:	0000cb98 	.word	0x0000cb98

000041e4 <adc_async_enable_channel>:
{
    41e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41e6:	460d      	mov	r5, r1
	ASSERT(descr);
    41e8:	4f0b      	ldr	r7, [pc, #44]	; (4218 <adc_async_enable_channel+0x34>)
    41ea:	4604      	mov	r4, r0
    41ec:	2283      	movs	r2, #131	; 0x83
    41ee:	4639      	mov	r1, r7
    41f0:	3000      	adds	r0, #0
    41f2:	bf18      	it	ne
    41f4:	2001      	movne	r0, #1
    41f6:	4e09      	ldr	r6, [pc, #36]	; (421c <adc_async_enable_channel+0x38>)
    41f8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    41fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    41fe:	2284      	movs	r2, #132	; 0x84
    4200:	4639      	mov	r1, r7
    4202:	42a8      	cmp	r0, r5
    4204:	bf34      	ite	cc
    4206:	2000      	movcc	r0, #0
    4208:	2001      	movcs	r0, #1
    420a:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    420c:	4629      	mov	r1, r5
    420e:	4620      	mov	r0, r4
    4210:	4b03      	ldr	r3, [pc, #12]	; (4220 <adc_async_enable_channel+0x3c>)
    4212:	4798      	blx	r3
}
    4214:	2000      	movs	r0, #0
    4216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4218:	0000cb98 	.word	0x0000cb98
    421c:	00005745 	.word	0x00005745
    4220:	00005c09 	.word	0x00005c09

00004224 <adc_async_register_callback>:
{
    4224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4228:	460e      	mov	r6, r1
    422a:	4614      	mov	r4, r2
    422c:	4699      	mov	r9, r3
	ASSERT(descr);
    422e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 42a0 <adc_async_register_callback+0x7c>
    4232:	4605      	mov	r5, r0
    4234:	229c      	movs	r2, #156	; 0x9c
    4236:	4641      	mov	r1, r8
    4238:	3000      	adds	r0, #0
    423a:	bf18      	it	ne
    423c:	2001      	movne	r0, #1
    423e:	4f16      	ldr	r7, [pc, #88]	; (4298 <adc_async_register_callback+0x74>)
    4240:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    4242:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4246:	229d      	movs	r2, #157	; 0x9d
    4248:	4641      	mov	r1, r8
    424a:	42b0      	cmp	r0, r6
    424c:	bf34      	ite	cc
    424e:	2000      	movcc	r0, #0
    4250:	2001      	movcs	r0, #1
    4252:	47b8      	blx	r7
	switch (type) {
    4254:	2c01      	cmp	r4, #1
    4256:	d019      	beq.n	428c <adc_async_register_callback+0x68>
    4258:	b12c      	cbz	r4, 4266 <adc_async_register_callback+0x42>
    425a:	2c02      	cmp	r4, #2
    425c:	d019      	beq.n	4292 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    425e:	f06f 000c 	mvn.w	r0, #12
}
    4262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4266:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4268:	5d9b      	ldrb	r3, [r3, r6]
    426a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    426c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4270:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4274:	f119 0300 	adds.w	r3, r9, #0
    4278:	bf18      	it	ne
    427a:	2301      	movne	r3, #1
    427c:	4622      	mov	r2, r4
    427e:	4631      	mov	r1, r6
    4280:	4628      	mov	r0, r5
    4282:	4c06      	ldr	r4, [pc, #24]	; (429c <adc_async_register_callback+0x78>)
    4284:	47a0      	blx	r4
	return ERR_NONE;
    4286:	2000      	movs	r0, #0
    4288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    428c:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4290:	e7f0      	b.n	4274 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    4292:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    4296:	e7ed      	b.n	4274 <adc_async_register_callback+0x50>
    4298:	00005745 	.word	0x00005745
    429c:	00005c47 	.word	0x00005c47
    42a0:	0000cb98 	.word	0x0000cb98

000042a4 <adc_async_read_channel>:
{
    42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42a8:	b083      	sub	sp, #12
    42aa:	4688      	mov	r8, r1
    42ac:	4691      	mov	r9, r2
    42ae:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    42b0:	4604      	mov	r4, r0
    42b2:	2800      	cmp	r0, #0
    42b4:	d04f      	beq.n	4356 <adc_async_read_channel+0xb2>
    42b6:	2a00      	cmp	r2, #0
    42b8:	d04f      	beq.n	435a <adc_async_read_channel+0xb6>
    42ba:	1c18      	adds	r0, r3, #0
    42bc:	bf18      	it	ne
    42be:	2001      	movne	r0, #1
    42c0:	4f29      	ldr	r7, [pc, #164]	; (4368 <adc_async_read_channel+0xc4>)
    42c2:	22bc      	movs	r2, #188	; 0xbc
    42c4:	4639      	mov	r1, r7
    42c6:	4e29      	ldr	r6, [pc, #164]	; (436c <adc_async_read_channel+0xc8>)
    42c8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    42ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    42ce:	22bd      	movs	r2, #189	; 0xbd
    42d0:	4639      	mov	r1, r7
    42d2:	4540      	cmp	r0, r8
    42d4:	bf34      	ite	cc
    42d6:	2000      	movcc	r0, #0
    42d8:	2001      	movcs	r0, #1
    42da:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    42dc:	4620      	mov	r0, r4
    42de:	4b24      	ldr	r3, [pc, #144]	; (4370 <adc_async_read_channel+0xcc>)
    42e0:	4798      	blx	r3
	ASSERT(!(length % data_size));
    42e2:	fb95 f3f0 	sdiv	r3, r5, r0
    42e6:	fb03 5010 	mls	r0, r3, r0, r5
    42ea:	22bf      	movs	r2, #191	; 0xbf
    42ec:	4639      	mov	r1, r7
    42ee:	fab0 f080 	clz	r0, r0
    42f2:	0940      	lsrs	r0, r0, #5
    42f4:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    42f6:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    42f8:	f813 b008 	ldrb.w	fp, [r3, r8]
    42fc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4302:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4306:	a801      	add	r0, sp, #4
    4308:	4b1a      	ldr	r3, [pc, #104]	; (4374 <adc_async_read_channel+0xd0>)
    430a:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    430c:	f10b 0a04 	add.w	sl, fp, #4
    4310:	4650      	mov	r0, sl
    4312:	4b19      	ldr	r3, [pc, #100]	; (4378 <adc_async_read_channel+0xd4>)
    4314:	4798      	blx	r3
    4316:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4318:	a801      	add	r0, sp, #4
    431a:	4b18      	ldr	r3, [pc, #96]	; (437c <adc_async_read_channel+0xd8>)
    431c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    431e:	f1b8 0f00 	cmp.w	r8, #0
    4322:	d01c      	beq.n	435e <adc_async_read_channel+0xba>
    4324:	b1ed      	cbz	r5, 4362 <adc_async_read_channel+0xbe>
    4326:	3d01      	subs	r5, #1
    4328:	b2ad      	uxth	r5, r5
    432a:	3502      	adds	r5, #2
    432c:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    432e:	4f14      	ldr	r7, [pc, #80]	; (4380 <adc_async_read_channel+0xdc>)
    4330:	b2a6      	uxth	r6, r4
    4332:	1e61      	subs	r1, r4, #1
    4334:	4449      	add	r1, r9
    4336:	4650      	mov	r0, sl
    4338:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    433a:	4544      	cmp	r4, r8
    433c:	d002      	beq.n	4344 <adc_async_read_channel+0xa0>
    433e:	3401      	adds	r4, #1
    4340:	42ac      	cmp	r4, r5
    4342:	d1f5      	bne.n	4330 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4344:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4348:	1b9b      	subs	r3, r3, r6
    434a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    434e:	4630      	mov	r0, r6
    4350:	b003      	add	sp, #12
    4352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4356:	2000      	movs	r0, #0
    4358:	e7b2      	b.n	42c0 <adc_async_read_channel+0x1c>
    435a:	2000      	movs	r0, #0
    435c:	e7b0      	b.n	42c0 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    435e:	2600      	movs	r6, #0
    4360:	e7f0      	b.n	4344 <adc_async_read_channel+0xa0>
    4362:	2600      	movs	r6, #0
    4364:	e7ee      	b.n	4344 <adc_async_read_channel+0xa0>
    4366:	bf00      	nop
    4368:	0000cb98 	.word	0x0000cb98
    436c:	00005745 	.word	0x00005745
    4370:	00005c1f 	.word	0x00005c1f
    4374:	000043ad 	.word	0x000043ad
    4378:	000058c1 	.word	0x000058c1
    437c:	000043bb 	.word	0x000043bb
    4380:	0000583d 	.word	0x0000583d

00004384 <adc_async_start_conversion>:
{
    4384:	b510      	push	{r4, lr}
	ASSERT(descr);
    4386:	4604      	mov	r4, r0
    4388:	22d6      	movs	r2, #214	; 0xd6
    438a:	4905      	ldr	r1, [pc, #20]	; (43a0 <adc_async_start_conversion+0x1c>)
    438c:	3000      	adds	r0, #0
    438e:	bf18      	it	ne
    4390:	2001      	movne	r0, #1
    4392:	4b04      	ldr	r3, [pc, #16]	; (43a4 <adc_async_start_conversion+0x20>)
    4394:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4396:	4620      	mov	r0, r4
    4398:	4b03      	ldr	r3, [pc, #12]	; (43a8 <adc_async_start_conversion+0x24>)
    439a:	4798      	blx	r3
}
    439c:	2000      	movs	r0, #0
    439e:	bd10      	pop	{r4, pc}
    43a0:	0000cb98 	.word	0x0000cb98
    43a4:	00005745 	.word	0x00005745
    43a8:	00005c31 	.word	0x00005c31

000043ac <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    43ac:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    43b0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    43b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    43b4:	f3bf 8f5f 	dmb	sy
    43b8:	4770      	bx	lr

000043ba <atomic_leave_critical>:
    43ba:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    43be:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    43c0:	f383 8810 	msr	PRIMASK, r3
    43c4:	4770      	bx	lr
	...

000043c8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    43c8:	b538      	push	{r3, r4, r5, lr}
    43ca:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    43cc:	4605      	mov	r5, r0
    43ce:	b158      	cbz	r0, 43e8 <crc_sync_init+0x20>
    43d0:	1c08      	adds	r0, r1, #0
    43d2:	bf18      	it	ne
    43d4:	2001      	movne	r0, #1
    43d6:	222b      	movs	r2, #43	; 0x2b
    43d8:	4904      	ldr	r1, [pc, #16]	; (43ec <crc_sync_init+0x24>)
    43da:	4b05      	ldr	r3, [pc, #20]	; (43f0 <crc_sync_init+0x28>)
    43dc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    43de:	4621      	mov	r1, r4
    43e0:	4628      	mov	r0, r5
    43e2:	4b04      	ldr	r3, [pc, #16]	; (43f4 <crc_sync_init+0x2c>)
    43e4:	4798      	blx	r3
}
    43e6:	bd38      	pop	{r3, r4, r5, pc}
    43e8:	2000      	movs	r0, #0
    43ea:	e7f4      	b.n	43d6 <crc_sync_init+0xe>
    43ec:	0000cbb4 	.word	0x0000cbb4
    43f0:	00005745 	.word	0x00005745
    43f4:	00006031 	.word	0x00006031

000043f8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    43f8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    43fa:	4b02      	ldr	r3, [pc, #8]	; (4404 <delay_init+0xc>)
    43fc:	6018      	str	r0, [r3, #0]
    43fe:	4b02      	ldr	r3, [pc, #8]	; (4408 <delay_init+0x10>)
    4400:	4798      	blx	r3
    4402:	bd08      	pop	{r3, pc}
    4404:	20000648 	.word	0x20000648
    4408:	00007971 	.word	0x00007971

0000440c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    440c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    440e:	4b04      	ldr	r3, [pc, #16]	; (4420 <delay_us+0x14>)
    4410:	681c      	ldr	r4, [r3, #0]
    4412:	4b04      	ldr	r3, [pc, #16]	; (4424 <delay_us+0x18>)
    4414:	4798      	blx	r3
    4416:	4601      	mov	r1, r0
    4418:	4620      	mov	r0, r4
    441a:	4b03      	ldr	r3, [pc, #12]	; (4428 <delay_us+0x1c>)
    441c:	4798      	blx	r3
    441e:	bd10      	pop	{r4, pc}
    4420:	20000648 	.word	0x20000648
    4424:	00005cf5 	.word	0x00005cf5
    4428:	00007985 	.word	0x00007985

0000442c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    442c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    442e:	4b04      	ldr	r3, [pc, #16]	; (4440 <delay_ms+0x14>)
    4430:	681c      	ldr	r4, [r3, #0]
    4432:	4b04      	ldr	r3, [pc, #16]	; (4444 <delay_ms+0x18>)
    4434:	4798      	blx	r3
    4436:	4601      	mov	r1, r0
    4438:	4620      	mov	r0, r4
    443a:	4b03      	ldr	r3, [pc, #12]	; (4448 <delay_ms+0x1c>)
    443c:	4798      	blx	r3
    443e:	bd10      	pop	{r4, pc}
    4440:	20000648 	.word	0x20000648
    4444:	00005cfd 	.word	0x00005cfd
    4448:	00007985 	.word	0x00007985

0000444c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    444c:	b508      	push	{r3, lr}
	return _event_system_init();
    444e:	4b01      	ldr	r3, [pc, #4]	; (4454 <event_system_init+0x8>)
    4450:	4798      	blx	r3
}
    4452:	bd08      	pop	{r3, pc}
    4454:	00006039 	.word	0x00006039

00004458 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4458:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    445a:	6943      	ldr	r3, [r0, #20]
    445c:	b103      	cbz	r3, 4460 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    445e:	4798      	blx	r3
    4460:	bd08      	pop	{r3, pc}

00004462 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4462:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4464:	6983      	ldr	r3, [r0, #24]
    4466:	b103      	cbz	r3, 446a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4468:	4798      	blx	r3
    446a:	bd08      	pop	{r3, pc}

0000446c <flash_init>:
{
    446c:	b538      	push	{r3, r4, r5, lr}
    446e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4470:	4604      	mov	r4, r0
    4472:	b190      	cbz	r0, 449a <flash_init+0x2e>
    4474:	1c08      	adds	r0, r1, #0
    4476:	bf18      	it	ne
    4478:	2001      	movne	r0, #1
    447a:	2238      	movs	r2, #56	; 0x38
    447c:	4908      	ldr	r1, [pc, #32]	; (44a0 <flash_init+0x34>)
    447e:	4b09      	ldr	r3, [pc, #36]	; (44a4 <flash_init+0x38>)
    4480:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4482:	4629      	mov	r1, r5
    4484:	4620      	mov	r0, r4
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <flash_init+0x3c>)
    4488:	4798      	blx	r3
	if (rc) {
    448a:	4603      	mov	r3, r0
    448c:	b918      	cbnz	r0, 4496 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    448e:	4a07      	ldr	r2, [pc, #28]	; (44ac <flash_init+0x40>)
    4490:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4492:	4a07      	ldr	r2, [pc, #28]	; (44b0 <flash_init+0x44>)
    4494:	6062      	str	r2, [r4, #4]
}
    4496:	4618      	mov	r0, r3
    4498:	bd38      	pop	{r3, r4, r5, pc}
    449a:	2000      	movs	r0, #0
    449c:	e7ed      	b.n	447a <flash_init+0xe>
    449e:	bf00      	nop
    44a0:	0000cbd0 	.word	0x0000cbd0
    44a4:	00005745 	.word	0x00005745
    44a8:	00006145 	.word	0x00006145
    44ac:	00004459 	.word	0x00004459
    44b0:	00004463 	.word	0x00004463

000044b4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    44b4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    44b6:	8843      	ldrh	r3, [r0, #2]
    44b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    44bc:	d102      	bne.n	44c4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    44be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    44c0:	b103      	cbz	r3, 44c4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    44c2:	4798      	blx	r3
    44c4:	bd08      	pop	{r3, pc}

000044c6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    44c6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    44c8:	8843      	ldrh	r3, [r0, #2]
    44ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    44ce:	d102      	bne.n	44d6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    44d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    44d2:	b103      	cbz	r3, 44d6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    44d4:	4798      	blx	r3
    44d6:	bd08      	pop	{r3, pc}

000044d8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    44d8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    44da:	8843      	ldrh	r3, [r0, #2]
    44dc:	f413 7f80 	tst.w	r3, #256	; 0x100
    44e0:	d102      	bne.n	44e8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    44e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    44e4:	b103      	cbz	r3, 44e8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    44e6:	4798      	blx	r3
    44e8:	bd08      	pop	{r3, pc}
	...

000044ec <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    44ec:	b510      	push	{r4, lr}
    44ee:	b084      	sub	sp, #16
    44f0:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    44f2:	8a83      	ldrh	r3, [r0, #20]
    44f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    44f8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    44fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    44fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4502:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4504:	a901      	add	r1, sp, #4
    4506:	3828      	subs	r0, #40	; 0x28
    4508:	4b03      	ldr	r3, [pc, #12]	; (4518 <i2c_m_async_write+0x2c>)
    450a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    450c:	2800      	cmp	r0, #0
    450e:	bf08      	it	eq
    4510:	4620      	moveq	r0, r4
    4512:	b004      	add	sp, #16
    4514:	bd10      	pop	{r4, pc}
    4516:	bf00      	nop
    4518:	00006ec1 	.word	0x00006ec1

0000451c <i2c_m_async_read>:
{
    451c:	b510      	push	{r4, lr}
    451e:	b084      	sub	sp, #16
    4520:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4522:	8a83      	ldrh	r3, [r0, #20]
    4524:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4528:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    452a:	f248 0301 	movw	r3, #32769	; 0x8001
    452e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4532:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4534:	a901      	add	r1, sp, #4
    4536:	3828      	subs	r0, #40	; 0x28
    4538:	4b03      	ldr	r3, [pc, #12]	; (4548 <i2c_m_async_read+0x2c>)
    453a:	4798      	blx	r3
}
    453c:	2800      	cmp	r0, #0
    453e:	bf08      	it	eq
    4540:	4620      	moveq	r0, r4
    4542:	b004      	add	sp, #16
    4544:	bd10      	pop	{r4, pc}
    4546:	bf00      	nop
    4548:	00006ec1 	.word	0x00006ec1

0000454c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4550:	4604      	mov	r4, r0
    4552:	2289      	movs	r2, #137	; 0x89
    4554:	490f      	ldr	r1, [pc, #60]	; (4594 <i2c_m_async_init+0x48>)
    4556:	3000      	adds	r0, #0
    4558:	bf18      	it	ne
    455a:	2001      	movne	r0, #1
    455c:	4b0e      	ldr	r3, [pc, #56]	; (4598 <i2c_m_async_init+0x4c>)
    455e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4560:	4629      	mov	r1, r5
    4562:	4620      	mov	r0, r4
    4564:	4b0d      	ldr	r3, [pc, #52]	; (459c <i2c_m_async_init+0x50>)
    4566:	4798      	blx	r3
	if (init_status) {
    4568:	4605      	mov	r5, r0
    456a:	b108      	cbz	r0, 4570 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    456c:	4628      	mov	r0, r5
    456e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4570:	4b0b      	ldr	r3, [pc, #44]	; (45a0 <i2c_m_async_init+0x54>)
    4572:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4574:	4b0b      	ldr	r3, [pc, #44]	; (45a4 <i2c_m_async_init+0x58>)
    4576:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4578:	4a0b      	ldr	r2, [pc, #44]	; (45a8 <i2c_m_async_init+0x5c>)
    457a:	2101      	movs	r1, #1
    457c:	4620      	mov	r0, r4
    457e:	4e0b      	ldr	r6, [pc, #44]	; (45ac <i2c_m_async_init+0x60>)
    4580:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4582:	4a0b      	ldr	r2, [pc, #44]	; (45b0 <i2c_m_async_init+0x64>)
    4584:	2102      	movs	r1, #2
    4586:	4620      	mov	r0, r4
    4588:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    458a:	4a0a      	ldr	r2, [pc, #40]	; (45b4 <i2c_m_async_init+0x68>)
    458c:	2100      	movs	r1, #0
    458e:	4620      	mov	r0, r4
    4590:	47b0      	blx	r6
	return ERR_NONE;
    4592:	e7eb      	b.n	456c <i2c_m_async_init+0x20>
    4594:	0000cbe8 	.word	0x0000cbe8
    4598:	00005745 	.word	0x00005745
    459c:	00006e41 	.word	0x00006e41
    45a0:	0000451d 	.word	0x0000451d
    45a4:	000044ed 	.word	0x000044ed
    45a8:	000044b5 	.word	0x000044b5
    45ac:	00006ff1 	.word	0x00006ff1
    45b0:	000044c7 	.word	0x000044c7
    45b4:	000044d9 	.word	0x000044d9

000045b8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    45b8:	b570      	push	{r4, r5, r6, lr}
    45ba:	460d      	mov	r5, r1
    45bc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    45be:	4604      	mov	r4, r0
    45c0:	b160      	cbz	r0, 45dc <io_write+0x24>
    45c2:	1c08      	adds	r0, r1, #0
    45c4:	bf18      	it	ne
    45c6:	2001      	movne	r0, #1
    45c8:	2234      	movs	r2, #52	; 0x34
    45ca:	4905      	ldr	r1, [pc, #20]	; (45e0 <io_write+0x28>)
    45cc:	4b05      	ldr	r3, [pc, #20]	; (45e4 <io_write+0x2c>)
    45ce:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    45d0:	6823      	ldr	r3, [r4, #0]
    45d2:	4632      	mov	r2, r6
    45d4:	4629      	mov	r1, r5
    45d6:	4620      	mov	r0, r4
    45d8:	4798      	blx	r3
}
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	2000      	movs	r0, #0
    45de:	e7f3      	b.n	45c8 <io_write+0x10>
    45e0:	0000cc08 	.word	0x0000cc08
    45e4:	00005745 	.word	0x00005745

000045e8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    45e8:	b570      	push	{r4, r5, r6, lr}
    45ea:	460d      	mov	r5, r1
    45ec:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    45ee:	4604      	mov	r4, r0
    45f0:	b160      	cbz	r0, 460c <io_read+0x24>
    45f2:	1c08      	adds	r0, r1, #0
    45f4:	bf18      	it	ne
    45f6:	2001      	movne	r0, #1
    45f8:	223d      	movs	r2, #61	; 0x3d
    45fa:	4905      	ldr	r1, [pc, #20]	; (4610 <io_read+0x28>)
    45fc:	4b05      	ldr	r3, [pc, #20]	; (4614 <io_read+0x2c>)
    45fe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4600:	6863      	ldr	r3, [r4, #4]
    4602:	4632      	mov	r2, r6
    4604:	4629      	mov	r1, r5
    4606:	4620      	mov	r0, r4
    4608:	4798      	blx	r3
}
    460a:	bd70      	pop	{r4, r5, r6, pc}
    460c:	2000      	movs	r0, #0
    460e:	e7f3      	b.n	45f8 <io_read+0x10>
    4610:	0000cc08 	.word	0x0000cc08
    4614:	00005745 	.word	0x00005745

00004618 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4618:	b538      	push	{r3, r4, r5, lr}
    461a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    461c:	4605      	mov	r5, r0
    461e:	b158      	cbz	r0, 4638 <qspi_dma_init+0x20>
    4620:	1c08      	adds	r0, r1, #0
    4622:	bf18      	it	ne
    4624:	2001      	movne	r0, #1
    4626:	2231      	movs	r2, #49	; 0x31
    4628:	4904      	ldr	r1, [pc, #16]	; (463c <qspi_dma_init+0x24>)
    462a:	4b05      	ldr	r3, [pc, #20]	; (4640 <qspi_dma_init+0x28>)
    462c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    462e:	4621      	mov	r1, r4
    4630:	4628      	mov	r0, r5
    4632:	4b04      	ldr	r3, [pc, #16]	; (4644 <qspi_dma_init+0x2c>)
    4634:	4798      	blx	r3
}
    4636:	bd38      	pop	{r3, r4, r5, pc}
    4638:	2000      	movs	r0, #0
    463a:	e7f4      	b.n	4626 <qspi_dma_init+0xe>
    463c:	0000cc1c 	.word	0x0000cc1c
    4640:	00005745 	.word	0x00005745
    4644:	00006365 	.word	0x00006365

00004648 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464a:	460f      	mov	r7, r1
    464c:	4616      	mov	r6, r2
	ASSERT(io);
    464e:	4604      	mov	r4, r0
    4650:	f240 1227 	movw	r2, #295	; 0x127
    4654:	4909      	ldr	r1, [pc, #36]	; (467c <_spi_m_async_io_write+0x34>)
    4656:	3000      	adds	r0, #0
    4658:	bf18      	it	ne
    465a:	2001      	movne	r0, #1
    465c:	4b08      	ldr	r3, [pc, #32]	; (4680 <_spi_m_async_io_write+0x38>)
    465e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4660:	2500      	movs	r5, #0
    4662:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4664:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4666:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4668:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    466a:	2310      	movs	r3, #16
    466c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    466e:	2101      	movs	r1, #1
    4670:	f1a4 0020 	sub.w	r0, r4, #32
    4674:	4b03      	ldr	r3, [pc, #12]	; (4684 <_spi_m_async_io_write+0x3c>)
    4676:	4798      	blx	r3

	return ERR_NONE;
}
    4678:	4628      	mov	r0, r5
    467a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    467c:	0000cc38 	.word	0x0000cc38
    4680:	00005745 	.word	0x00005745
    4684:	00007485 	.word	0x00007485

00004688 <_spi_m_async_io_read>:
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	460d      	mov	r5, r1
    468c:	4616      	mov	r6, r2
	ASSERT(io);
    468e:	4604      	mov	r4, r0
    4690:	f240 1205 	movw	r2, #261	; 0x105
    4694:	490c      	ldr	r1, [pc, #48]	; (46c8 <_spi_m_async_io_read+0x40>)
    4696:	3000      	adds	r0, #0
    4698:	bf18      	it	ne
    469a:	2001      	movne	r0, #1
    469c:	4b0b      	ldr	r3, [pc, #44]	; (46cc <_spi_m_async_io_read+0x44>)
    469e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    46a0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    46a2:	2500      	movs	r5, #0
    46a4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    46a6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    46a8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    46aa:	2310      	movs	r3, #16
    46ac:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    46ae:	3c20      	subs	r4, #32
    46b0:	2101      	movs	r1, #1
    46b2:	4620      	mov	r0, r4
    46b4:	4b06      	ldr	r3, [pc, #24]	; (46d0 <_spi_m_async_io_read+0x48>)
    46b6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    46b8:	f240 11ff 	movw	r1, #511	; 0x1ff
    46bc:	4620      	mov	r0, r4
    46be:	4b05      	ldr	r3, [pc, #20]	; (46d4 <_spi_m_async_io_read+0x4c>)
    46c0:	4798      	blx	r3
}
    46c2:	4628      	mov	r0, r5
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	bf00      	nop
    46c8:	0000cc38 	.word	0x0000cc38
    46cc:	00005745 	.word	0x00005745
    46d0:	000074b9 	.word	0x000074b9
    46d4:	00007535 	.word	0x00007535

000046d8 <_spi_dev_error>:
{
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	4604      	mov	r4, r0
    46dc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    46de:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    46e0:	2100      	movs	r1, #0
    46e2:	4b09      	ldr	r3, [pc, #36]	; (4708 <_spi_dev_error+0x30>)
    46e4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    46e6:	2100      	movs	r1, #0
    46e8:	4620      	mov	r0, r4
    46ea:	4b08      	ldr	r3, [pc, #32]	; (470c <_spi_dev_error+0x34>)
    46ec:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    46ee:	2100      	movs	r1, #0
    46f0:	4620      	mov	r0, r4
    46f2:	4b07      	ldr	r3, [pc, #28]	; (4710 <_spi_dev_error+0x38>)
    46f4:	4798      	blx	r3
	spi->stat = 0;
    46f6:	2300      	movs	r3, #0
    46f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    46fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    46fe:	b113      	cbz	r3, 4706 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4700:	4631      	mov	r1, r6
    4702:	4628      	mov	r0, r5
    4704:	4798      	blx	r3
    4706:	bd70      	pop	{r4, r5, r6, pc}
    4708:	00007485 	.word	0x00007485
    470c:	000074b9 	.word	0x000074b9
    4710:	000074f9 	.word	0x000074f9

00004714 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4714:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4716:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4718:	429a      	cmp	r2, r3
    471a:	d200      	bcs.n	471e <_spi_dev_complete+0xa>
    471c:	4770      	bx	lr
{
    471e:	b510      	push	{r4, lr}
    4720:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4722:	2100      	movs	r1, #0
    4724:	4b04      	ldr	r3, [pc, #16]	; (4738 <_spi_dev_complete+0x24>)
    4726:	4798      	blx	r3
		spi->stat = 0;
    4728:	2300      	movs	r3, #0
    472a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    472e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4730:	b10b      	cbz	r3, 4736 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4732:	1f20      	subs	r0, r4, #4
    4734:	4798      	blx	r3
    4736:	bd10      	pop	{r4, pc}
    4738:	000074f9 	.word	0x000074f9

0000473c <_spi_dev_tx>:
{
    473c:	b510      	push	{r4, lr}
    473e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4740:	7903      	ldrb	r3, [r0, #4]
    4742:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4744:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4746:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4748:	f103 0101 	add.w	r1, r3, #1
    474c:	6401      	str	r1, [r0, #64]	; 0x40
    474e:	bf94      	ite	ls
    4750:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4752:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4756:	4b08      	ldr	r3, [pc, #32]	; (4778 <_spi_dev_tx+0x3c>)
    4758:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    475a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    475c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    475e:	429a      	cmp	r2, r3
    4760:	d000      	beq.n	4764 <_spi_dev_tx+0x28>
    4762:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4764:	2100      	movs	r1, #0
    4766:	4620      	mov	r0, r4
    4768:	4b04      	ldr	r3, [pc, #16]	; (477c <_spi_dev_tx+0x40>)
    476a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    476c:	2101      	movs	r1, #1
    476e:	4620      	mov	r0, r4
    4770:	4b03      	ldr	r3, [pc, #12]	; (4780 <_spi_dev_tx+0x44>)
    4772:	4798      	blx	r3
}
    4774:	e7f5      	b.n	4762 <_spi_dev_tx+0x26>
    4776:	bf00      	nop
    4778:	00007535 	.word	0x00007535
    477c:	00007485 	.word	0x00007485
    4780:	000074f9 	.word	0x000074f9

00004784 <_spi_dev_rx>:
{
    4784:	b570      	push	{r4, r5, r6, lr}
    4786:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4788:	6b85      	ldr	r5, [r0, #56]	; 0x38
    478a:	b305      	cbz	r5, 47ce <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    478c:	7903      	ldrb	r3, [r0, #4]
    478e:	2b01      	cmp	r3, #1
    4790:	d916      	bls.n	47c0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4792:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4794:	1c73      	adds	r3, r6, #1
    4796:	6403      	str	r3, [r0, #64]	; 0x40
    4798:	4b18      	ldr	r3, [pc, #96]	; (47fc <_spi_dev_rx+0x78>)
    479a:	4798      	blx	r3
    479c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    47a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    47a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    47a4:	4293      	cmp	r3, r2
    47a6:	d21d      	bcs.n	47e4 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    47a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    47aa:	b1b2      	cbz	r2, 47da <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    47ac:	7921      	ldrb	r1, [r4, #4]
    47ae:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    47b0:	bf94      	ite	ls
    47b2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    47b4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    47b8:	4620      	mov	r0, r4
    47ba:	4b11      	ldr	r3, [pc, #68]	; (4800 <_spi_dev_rx+0x7c>)
    47bc:	4798      	blx	r3
    47be:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    47c0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    47c2:	1c73      	adds	r3, r6, #1
    47c4:	6403      	str	r3, [r0, #64]	; 0x40
    47c6:	4b0d      	ldr	r3, [pc, #52]	; (47fc <_spi_dev_rx+0x78>)
    47c8:	4798      	blx	r3
    47ca:	55a8      	strb	r0, [r5, r6]
    47cc:	e7e8      	b.n	47a0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    47ce:	4b0b      	ldr	r3, [pc, #44]	; (47fc <_spi_dev_rx+0x78>)
    47d0:	4798      	blx	r3
		spi->xfercnt++;
    47d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    47d4:	3301      	adds	r3, #1
    47d6:	6423      	str	r3, [r4, #64]	; 0x40
    47d8:	e7e2      	b.n	47a0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    47da:	88e1      	ldrh	r1, [r4, #6]
    47dc:	4620      	mov	r0, r4
    47de:	4b08      	ldr	r3, [pc, #32]	; (4800 <_spi_dev_rx+0x7c>)
    47e0:	4798      	blx	r3
    47e2:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    47e4:	2100      	movs	r1, #0
    47e6:	4620      	mov	r0, r4
    47e8:	4b06      	ldr	r3, [pc, #24]	; (4804 <_spi_dev_rx+0x80>)
    47ea:	4798      	blx	r3
		spi->stat = 0;
    47ec:	2300      	movs	r3, #0
    47ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    47f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    47f4:	b10b      	cbz	r3, 47fa <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    47f6:	1f20      	subs	r0, r4, #4
    47f8:	4798      	blx	r3
    47fa:	bd70      	pop	{r4, r5, r6, pc}
    47fc:	00007565 	.word	0x00007565
    4800:	00007535 	.word	0x00007535
    4804:	000074b9 	.word	0x000074b9

00004808 <spi_m_async_init>:
{
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    480c:	4606      	mov	r6, r0
    480e:	b330      	cbz	r0, 485e <spi_m_async_init+0x56>
    4810:	1c08      	adds	r0, r1, #0
    4812:	bf18      	it	ne
    4814:	2001      	movne	r0, #1
    4816:	22a5      	movs	r2, #165	; 0xa5
    4818:	4912      	ldr	r1, [pc, #72]	; (4864 <spi_m_async_init+0x5c>)
    481a:	4b13      	ldr	r3, [pc, #76]	; (4868 <spi_m_async_init+0x60>)
    481c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    481e:	4634      	mov	r4, r6
    4820:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4824:	4629      	mov	r1, r5
    4826:	4620      	mov	r0, r4
    4828:	4b10      	ldr	r3, [pc, #64]	; (486c <spi_m_async_init+0x64>)
    482a:	4798      	blx	r3
	if (rc >= 0) {
    482c:	2800      	cmp	r0, #0
    482e:	db15      	blt.n	485c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4830:	4a0f      	ldr	r2, [pc, #60]	; (4870 <spi_m_async_init+0x68>)
    4832:	2100      	movs	r1, #0
    4834:	4620      	mov	r0, r4
    4836:	4d0f      	ldr	r5, [pc, #60]	; (4874 <spi_m_async_init+0x6c>)
    4838:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    483a:	4a0f      	ldr	r2, [pc, #60]	; (4878 <spi_m_async_init+0x70>)
    483c:	2101      	movs	r1, #1
    483e:	4620      	mov	r0, r4
    4840:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4842:	4a0e      	ldr	r2, [pc, #56]	; (487c <spi_m_async_init+0x74>)
    4844:	2102      	movs	r1, #2
    4846:	4620      	mov	r0, r4
    4848:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    484a:	4a0d      	ldr	r2, [pc, #52]	; (4880 <spi_m_async_init+0x78>)
    484c:	2103      	movs	r1, #3
    484e:	4620      	mov	r0, r4
    4850:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4852:	4b0c      	ldr	r3, [pc, #48]	; (4884 <spi_m_async_init+0x7c>)
    4854:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4856:	4b0c      	ldr	r3, [pc, #48]	; (4888 <spi_m_async_init+0x80>)
    4858:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    485a:	2000      	movs	r0, #0
}
    485c:	bd70      	pop	{r4, r5, r6, pc}
    485e:	2000      	movs	r0, #0
    4860:	e7d9      	b.n	4816 <spi_m_async_init+0xe>
    4862:	bf00      	nop
    4864:	0000cc38 	.word	0x0000cc38
    4868:	00005745 	.word	0x00005745
    486c:	0000737d 	.word	0x0000737d
    4870:	0000473d 	.word	0x0000473d
    4874:	00007591 	.word	0x00007591
    4878:	00004785 	.word	0x00004785
    487c:	00004715 	.word	0x00004715
    4880:	000046d9 	.word	0x000046d9
    4884:	00004689 	.word	0x00004689
    4888:	00004649 	.word	0x00004649

0000488c <spi_m_async_enable>:
{
    488c:	b510      	push	{r4, lr}
	ASSERT(spi);
    488e:	4604      	mov	r4, r0
    4890:	22c1      	movs	r2, #193	; 0xc1
    4892:	4905      	ldr	r1, [pc, #20]	; (48a8 <spi_m_async_enable+0x1c>)
    4894:	3000      	adds	r0, #0
    4896:	bf18      	it	ne
    4898:	2001      	movne	r0, #1
    489a:	4b04      	ldr	r3, [pc, #16]	; (48ac <spi_m_async_enable+0x20>)
    489c:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    489e:	1d20      	adds	r0, r4, #4
    48a0:	4b03      	ldr	r3, [pc, #12]	; (48b0 <spi_m_async_enable+0x24>)
    48a2:	4798      	blx	r3
    48a4:	bd10      	pop	{r4, pc}
    48a6:	bf00      	nop
    48a8:	0000cc38 	.word	0x0000cc38
    48ac:	00005745 	.word	0x00005745
    48b0:	000073e5 	.word	0x000073e5

000048b4 <spi_m_async_set_baudrate>:
{
    48b4:	b538      	push	{r3, r4, r5, lr}
    48b6:	460d      	mov	r5, r1
	ASSERT(spi);
    48b8:	4604      	mov	r4, r0
    48ba:	22cf      	movs	r2, #207	; 0xcf
    48bc:	4909      	ldr	r1, [pc, #36]	; (48e4 <spi_m_async_set_baudrate+0x30>)
    48be:	3000      	adds	r0, #0
    48c0:	bf18      	it	ne
    48c2:	2001      	movne	r0, #1
    48c4:	4b08      	ldr	r3, [pc, #32]	; (48e8 <spi_m_async_set_baudrate+0x34>)
    48c6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    48c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    48cc:	f013 0f10 	tst.w	r3, #16
    48d0:	d104      	bne.n	48dc <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    48d2:	4629      	mov	r1, r5
    48d4:	1d20      	adds	r0, r4, #4
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <spi_m_async_set_baudrate+0x38>)
    48d8:	4798      	blx	r3
    48da:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    48dc:	f06f 0003 	mvn.w	r0, #3
}
    48e0:	bd38      	pop	{r3, r4, r5, pc}
    48e2:	bf00      	nop
    48e4:	0000cc38 	.word	0x0000cc38
    48e8:	00005745 	.word	0x00005745
    48ec:	00007449 	.word	0x00007449

000048f0 <spi_m_async_set_mode>:
{
    48f0:	b538      	push	{r3, r4, r5, lr}
    48f2:	460d      	mov	r5, r1
	ASSERT(spi);
    48f4:	4604      	mov	r4, r0
    48f6:	22d9      	movs	r2, #217	; 0xd9
    48f8:	4909      	ldr	r1, [pc, #36]	; (4920 <spi_m_async_set_mode+0x30>)
    48fa:	3000      	adds	r0, #0
    48fc:	bf18      	it	ne
    48fe:	2001      	movne	r0, #1
    4900:	4b08      	ldr	r3, [pc, #32]	; (4924 <spi_m_async_set_mode+0x34>)
    4902:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4904:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4908:	f013 0f10 	tst.w	r3, #16
    490c:	d104      	bne.n	4918 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    490e:	4629      	mov	r1, r5
    4910:	1d20      	adds	r0, r4, #4
    4912:	4b05      	ldr	r3, [pc, #20]	; (4928 <spi_m_async_set_mode+0x38>)
    4914:	4798      	blx	r3
    4916:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4918:	f06f 0003 	mvn.w	r0, #3
}
    491c:	bd38      	pop	{r3, r4, r5, pc}
    491e:	bf00      	nop
    4920:	0000cc38 	.word	0x0000cc38
    4924:	00005745 	.word	0x00005745
    4928:	00007415 	.word	0x00007415

0000492c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    492e:	460d      	mov	r5, r1
    4930:	4617      	mov	r7, r2
    4932:	461e      	mov	r6, r3
	ASSERT(spi);
    4934:	4604      	mov	r4, r0
    4936:	f44f 729c 	mov.w	r2, #312	; 0x138
    493a:	4912      	ldr	r1, [pc, #72]	; (4984 <spi_m_async_transfer+0x58>)
    493c:	3000      	adds	r0, #0
    493e:	bf18      	it	ne
    4940:	2001      	movne	r0, #1
    4942:	4b11      	ldr	r3, [pc, #68]	; (4988 <spi_m_async_transfer+0x5c>)
    4944:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4946:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4948:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    494a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    494c:	2300      	movs	r3, #0
    494e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4950:	2310      	movs	r3, #16
    4952:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4956:	1d26      	adds	r6, r4, #4
    4958:	2101      	movs	r1, #1
    495a:	4630      	mov	r0, r6
    495c:	4b0b      	ldr	r3, [pc, #44]	; (498c <spi_m_async_transfer+0x60>)
    495e:	4798      	blx	r3
	if (txbuf) {
    4960:	b15d      	cbz	r5, 497a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4962:	7a23      	ldrb	r3, [r4, #8]
    4964:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4966:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4968:	bf94      	ite	ls
    496a:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    496c:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4970:	4630      	mov	r0, r6
    4972:	4b07      	ldr	r3, [pc, #28]	; (4990 <spi_m_async_transfer+0x64>)
    4974:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4976:	2000      	movs	r0, #0
    4978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    497a:	8961      	ldrh	r1, [r4, #10]
    497c:	4630      	mov	r0, r6
    497e:	4b04      	ldr	r3, [pc, #16]	; (4990 <spi_m_async_transfer+0x64>)
    4980:	4798      	blx	r3
    4982:	e7f8      	b.n	4976 <spi_m_async_transfer+0x4a>
    4984:	0000cc38 	.word	0x0000cc38
    4988:	00005745 	.word	0x00005745
    498c:	000074b9 	.word	0x000074b9
    4990:	00007535 	.word	0x00007535

00004994 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	460c      	mov	r4, r1
    4998:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    499a:	4605      	mov	r5, r0
    499c:	b158      	cbz	r0, 49b6 <spi_m_async_register_callback+0x22>
    499e:	2901      	cmp	r1, #1
    49a0:	bf8c      	ite	hi
    49a2:	2000      	movhi	r0, #0
    49a4:	2001      	movls	r0, #1
    49a6:	f240 1263 	movw	r2, #355	; 0x163
    49aa:	4908      	ldr	r1, [pc, #32]	; (49cc <spi_m_async_register_callback+0x38>)
    49ac:	4b08      	ldr	r3, [pc, #32]	; (49d0 <spi_m_async_register_callback+0x3c>)
    49ae:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    49b0:	b91c      	cbnz	r4, 49ba <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    49b2:	632e      	str	r6, [r5, #48]	; 0x30
    49b4:	bd70      	pop	{r4, r5, r6, pc}
    49b6:	2000      	movs	r0, #0
    49b8:	e7f5      	b.n	49a6 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    49ba:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    49bc:	1c32      	adds	r2, r6, #0
    49be:	bf18      	it	ne
    49c0:	2201      	movne	r2, #1
    49c2:	2103      	movs	r1, #3
    49c4:	1d28      	adds	r0, r5, #4
    49c6:	4b03      	ldr	r3, [pc, #12]	; (49d4 <spi_m_async_register_callback+0x40>)
    49c8:	4798      	blx	r3
    49ca:	bd70      	pop	{r4, r5, r6, pc}
    49cc:	0000cc38 	.word	0x0000cc38
    49d0:	00005745 	.word	0x00005745
    49d4:	000075c5 	.word	0x000075c5

000049d8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    49d8:	b538      	push	{r3, r4, r5, lr}
    49da:	460d      	mov	r5, r1
	ASSERT(spi && io);
    49dc:	4604      	mov	r4, r0
    49de:	b158      	cbz	r0, 49f8 <spi_m_async_get_io_descriptor+0x20>
    49e0:	1c08      	adds	r0, r1, #0
    49e2:	bf18      	it	ne
    49e4:	2001      	movne	r0, #1
    49e6:	f240 126f 	movw	r2, #367	; 0x16f
    49ea:	4904      	ldr	r1, [pc, #16]	; (49fc <spi_m_async_get_io_descriptor+0x24>)
    49ec:	4b04      	ldr	r3, [pc, #16]	; (4a00 <spi_m_async_get_io_descriptor+0x28>)
    49ee:	4798      	blx	r3
	*io = &spi->io;
    49f0:	3424      	adds	r4, #36	; 0x24
    49f2:	602c      	str	r4, [r5, #0]
	return 0;
}
    49f4:	2000      	movs	r0, #0
    49f6:	bd38      	pop	{r3, r4, r5, pc}
    49f8:	2000      	movs	r0, #0
    49fa:	e7f4      	b.n	49e6 <spi_m_async_get_io_descriptor+0xe>
    49fc:	0000cc38 	.word	0x0000cc38
    4a00:	00005745 	.word	0x00005745

00004a04 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4a04:	b570      	push	{r4, r5, r6, lr}
    4a06:	460d      	mov	r5, r1
    4a08:	4616      	mov	r6, r2
	ASSERT(io);
    4a0a:	4604      	mov	r4, r0
    4a0c:	2298      	movs	r2, #152	; 0x98
    4a0e:	4907      	ldr	r1, [pc, #28]	; (4a2c <_spi_m_dma_io_write+0x28>)
    4a10:	3000      	adds	r0, #0
    4a12:	bf18      	it	ne
    4a14:	2001      	movne	r0, #1
    4a16:	4b06      	ldr	r3, [pc, #24]	; (4a30 <_spi_m_dma_io_write+0x2c>)
    4a18:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4a1a:	4633      	mov	r3, r6
    4a1c:	2200      	movs	r2, #0
    4a1e:	4629      	mov	r1, r5
    4a20:	f1a4 001c 	sub.w	r0, r4, #28
    4a24:	4c03      	ldr	r4, [pc, #12]	; (4a34 <_spi_m_dma_io_write+0x30>)
    4a26:	47a0      	blx	r4
}
    4a28:	bd70      	pop	{r4, r5, r6, pc}
    4a2a:	bf00      	nop
    4a2c:	0000cc58 	.word	0x0000cc58
    4a30:	00005745 	.word	0x00005745
    4a34:	00007819 	.word	0x00007819

00004a38 <_spi_m_dma_io_read>:
{
    4a38:	b570      	push	{r4, r5, r6, lr}
    4a3a:	460d      	mov	r5, r1
    4a3c:	4616      	mov	r6, r2
	ASSERT(io);
    4a3e:	4604      	mov	r4, r0
    4a40:	2281      	movs	r2, #129	; 0x81
    4a42:	4907      	ldr	r1, [pc, #28]	; (4a60 <_spi_m_dma_io_read+0x28>)
    4a44:	3000      	adds	r0, #0
    4a46:	bf18      	it	ne
    4a48:	2001      	movne	r0, #1
    4a4a:	4b06      	ldr	r3, [pc, #24]	; (4a64 <_spi_m_dma_io_read+0x2c>)
    4a4c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4a4e:	4633      	mov	r3, r6
    4a50:	462a      	mov	r2, r5
    4a52:	2100      	movs	r1, #0
    4a54:	f1a4 001c 	sub.w	r0, r4, #28
    4a58:	4c03      	ldr	r4, [pc, #12]	; (4a68 <_spi_m_dma_io_read+0x30>)
    4a5a:	47a0      	blx	r4
}
    4a5c:	bd70      	pop	{r4, r5, r6, pc}
    4a5e:	bf00      	nop
    4a60:	0000cc58 	.word	0x0000cc58
    4a64:	00005745 	.word	0x00005745
    4a68:	00007819 	.word	0x00007819

00004a6c <spi_m_dma_init>:
{
    4a6c:	b538      	push	{r3, r4, r5, lr}
    4a6e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4a70:	4605      	mov	r5, r0
    4a72:	b1a0      	cbz	r0, 4a9e <spi_m_dma_init+0x32>
    4a74:	1c08      	adds	r0, r1, #0
    4a76:	bf18      	it	ne
    4a78:	2001      	movne	r0, #1
    4a7a:	223b      	movs	r2, #59	; 0x3b
    4a7c:	4909      	ldr	r1, [pc, #36]	; (4aa4 <spi_m_dma_init+0x38>)
    4a7e:	4b0a      	ldr	r3, [pc, #40]	; (4aa8 <spi_m_dma_init+0x3c>)
    4a80:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4a82:	4628      	mov	r0, r5
    4a84:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4a88:	4621      	mov	r1, r4
    4a8a:	4b08      	ldr	r3, [pc, #32]	; (4aac <spi_m_dma_init+0x40>)
    4a8c:	4798      	blx	r3
	if (rc) {
    4a8e:	4603      	mov	r3, r0
    4a90:	b918      	cbnz	r0, 4a9a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4a92:	4a07      	ldr	r2, [pc, #28]	; (4ab0 <spi_m_dma_init+0x44>)
    4a94:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4a96:	4a07      	ldr	r2, [pc, #28]	; (4ab4 <spi_m_dma_init+0x48>)
    4a98:	622a      	str	r2, [r5, #32]
}
    4a9a:	4618      	mov	r0, r3
    4a9c:	bd38      	pop	{r3, r4, r5, pc}
    4a9e:	2000      	movs	r0, #0
    4aa0:	e7eb      	b.n	4a7a <spi_m_dma_init+0xe>
    4aa2:	bf00      	nop
    4aa4:	0000cc58 	.word	0x0000cc58
    4aa8:	00005745 	.word	0x00005745
    4aac:	000075fd 	.word	0x000075fd
    4ab0:	00004a39 	.word	0x00004a39
    4ab4:	00004a05 	.word	0x00004a05

00004ab8 <spi_m_dma_enable>:
{
    4ab8:	b510      	push	{r4, lr}
	ASSERT(spi);
    4aba:	4604      	mov	r4, r0
    4abc:	2251      	movs	r2, #81	; 0x51
    4abe:	4905      	ldr	r1, [pc, #20]	; (4ad4 <spi_m_dma_enable+0x1c>)
    4ac0:	3000      	adds	r0, #0
    4ac2:	bf18      	it	ne
    4ac4:	2001      	movne	r0, #1
    4ac6:	4b04      	ldr	r3, [pc, #16]	; (4ad8 <spi_m_dma_enable+0x20>)
    4ac8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4aca:	1d20      	adds	r0, r4, #4
    4acc:	4b03      	ldr	r3, [pc, #12]	; (4adc <spi_m_dma_enable+0x24>)
    4ace:	4798      	blx	r3
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	bf00      	nop
    4ad4:	0000cc58 	.word	0x0000cc58
    4ad8:	00005745 	.word	0x00005745
    4adc:	00007779 	.word	0x00007779

00004ae0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4ae0:	b570      	push	{r4, r5, r6, lr}
    4ae2:	460d      	mov	r5, r1
    4ae4:	4616      	mov	r6, r2
	ASSERT(spi);
    4ae6:	4604      	mov	r4, r0
    4ae8:	22a8      	movs	r2, #168	; 0xa8
    4aea:	4906      	ldr	r1, [pc, #24]	; (4b04 <spi_m_dma_register_callback+0x24>)
    4aec:	3000      	adds	r0, #0
    4aee:	bf18      	it	ne
    4af0:	2001      	movne	r0, #1
    4af2:	4b05      	ldr	r3, [pc, #20]	; (4b08 <spi_m_dma_register_callback+0x28>)
    4af4:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4af6:	4632      	mov	r2, r6
    4af8:	4629      	mov	r1, r5
    4afa:	1d20      	adds	r0, r4, #4
    4afc:	4b03      	ldr	r3, [pc, #12]	; (4b0c <spi_m_dma_register_callback+0x2c>)
    4afe:	4798      	blx	r3
    4b00:	bd70      	pop	{r4, r5, r6, pc}
    4b02:	bf00      	nop
    4b04:	0000cc58 	.word	0x0000cc58
    4b08:	00005745 	.word	0x00005745
    4b0c:	000077a9 	.word	0x000077a9

00004b10 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4b10:	b538      	push	{r3, r4, r5, lr}
    4b12:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4b14:	4604      	mov	r4, r0
    4b16:	b150      	cbz	r0, 4b2e <spi_m_dma_get_io_descriptor+0x1e>
    4b18:	1c08      	adds	r0, r1, #0
    4b1a:	bf18      	it	ne
    4b1c:	2001      	movne	r0, #1
    4b1e:	22ae      	movs	r2, #174	; 0xae
    4b20:	4904      	ldr	r1, [pc, #16]	; (4b34 <spi_m_dma_get_io_descriptor+0x24>)
    4b22:	4b05      	ldr	r3, [pc, #20]	; (4b38 <spi_m_dma_get_io_descriptor+0x28>)
    4b24:	4798      	blx	r3
	*io = &spi->io;
    4b26:	3420      	adds	r4, #32
    4b28:	602c      	str	r4, [r5, #0]

	return 0;
}
    4b2a:	2000      	movs	r0, #0
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
    4b2e:	2000      	movs	r0, #0
    4b30:	e7f5      	b.n	4b1e <spi_m_dma_get_io_descriptor+0xe>
    4b32:	bf00      	nop
    4b34:	0000cc58 	.word	0x0000cc58
    4b38:	00005745 	.word	0x00005745

00004b3c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b3e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4b40:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4b42:	b12f      	cbz	r7, 4b50 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4b44:	688d      	ldr	r5, [r1, #8]
    4b46:	463c      	mov	r4, r7
    4b48:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4b4a:	f1c2 0e01 	rsb	lr, r2, #1
    4b4e:	e00b      	b.n	4b68 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4b50:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <timer_add_timer_task+0x50>)
    4b52:	4798      	blx	r3
		return;
    4b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4b56:	4473      	add	r3, lr
    4b58:	68a0      	ldr	r0, [r4, #8]
    4b5a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4b5c:	42ab      	cmp	r3, r5
    4b5e:	d20a      	bcs.n	4b76 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4b60:	6823      	ldr	r3, [r4, #0]
    4b62:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4b64:	b153      	cbz	r3, 4b7c <timer_add_timer_task+0x40>
    4b66:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4b68:	6863      	ldr	r3, [r4, #4]
    4b6a:	4293      	cmp	r3, r2
    4b6c:	d8f3      	bhi.n	4b56 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4b6e:	68a0      	ldr	r0, [r4, #8]
    4b70:	4403      	add	r3, r0
    4b72:	1a9b      	subs	r3, r3, r2
    4b74:	e7f2      	b.n	4b5c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4b76:	42a7      	cmp	r7, r4
    4b78:	d004      	beq.n	4b84 <timer_add_timer_task+0x48>
    4b7a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4b7c:	4620      	mov	r0, r4
    4b7e:	4b04      	ldr	r3, [pc, #16]	; (4b90 <timer_add_timer_task+0x54>)
    4b80:	4798      	blx	r3
    4b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4b84:	4660      	mov	r0, ip
    4b86:	4b01      	ldr	r3, [pc, #4]	; (4b8c <timer_add_timer_task+0x50>)
    4b88:	4798      	blx	r3
    4b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b8c:	0000576d 	.word	0x0000576d
    4b90:	00005799 	.word	0x00005799

00004b94 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4b98:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4b9a:	6907      	ldr	r7, [r0, #16]
    4b9c:	3701      	adds	r7, #1
    4b9e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4ba0:	7e03      	ldrb	r3, [r0, #24]
    4ba2:	f013 0f01 	tst.w	r3, #1
    4ba6:	d113      	bne.n	4bd0 <timer_process_counted+0x3c>
    4ba8:	7e03      	ldrb	r3, [r0, #24]
    4baa:	f013 0f02 	tst.w	r3, #2
    4bae:	d10f      	bne.n	4bd0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4bb0:	b354      	cbz	r4, 4c08 <timer_process_counted+0x74>
    4bb2:	6863      	ldr	r3, [r4, #4]
    4bb4:	1afb      	subs	r3, r7, r3
    4bb6:	68a2      	ldr	r2, [r4, #8]
    4bb8:	4293      	cmp	r3, r2
    4bba:	d307      	bcc.n	4bcc <timer_process_counted+0x38>
    4bbc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4bbe:	f100 0814 	add.w	r8, r0, #20
    4bc2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4c0c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4bc6:	f8df a048 	ldr.w	sl, [pc, #72]	; 4c10 <timer_process_counted+0x7c>
    4bca:	e012      	b.n	4bf2 <timer_process_counted+0x5e>
    4bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4bd0:	7e03      	ldrb	r3, [r0, #24]
    4bd2:	f043 0302 	orr.w	r3, r3, #2
    4bd6:	7603      	strb	r3, [r0, #24]
		return;
    4bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bdc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4bde:	68e3      	ldr	r3, [r4, #12]
    4be0:	4620      	mov	r0, r4
    4be2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4be4:	b185      	cbz	r5, 4c08 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4be6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4be8:	686b      	ldr	r3, [r5, #4]
    4bea:	1afb      	subs	r3, r7, r3
    4bec:	68aa      	ldr	r2, [r5, #8]
    4bee:	4293      	cmp	r3, r2
    4bf0:	d30a      	bcc.n	4c08 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4bf2:	4640      	mov	r0, r8
    4bf4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4bf6:	7c23      	ldrb	r3, [r4, #16]
    4bf8:	2b01      	cmp	r3, #1
    4bfa:	d1ef      	bne.n	4bdc <timer_process_counted+0x48>
			tmp->time_label = time;
    4bfc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4bfe:	463a      	mov	r2, r7
    4c00:	4621      	mov	r1, r4
    4c02:	4640      	mov	r0, r8
    4c04:	47d0      	blx	sl
    4c06:	e7e9      	b.n	4bdc <timer_process_counted+0x48>
    4c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c0c:	000057e1 	.word	0x000057e1
    4c10:	00004b3d 	.word	0x00004b3d

00004c14 <timer_init>:
{
    4c14:	b570      	push	{r4, r5, r6, lr}
    4c16:	460e      	mov	r6, r1
    4c18:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4c1a:	4604      	mov	r4, r0
    4c1c:	b190      	cbz	r0, 4c44 <timer_init+0x30>
    4c1e:	b199      	cbz	r1, 4c48 <timer_init+0x34>
    4c20:	1c10      	adds	r0, r2, #0
    4c22:	bf18      	it	ne
    4c24:	2001      	movne	r0, #1
    4c26:	223b      	movs	r2, #59	; 0x3b
    4c28:	4908      	ldr	r1, [pc, #32]	; (4c4c <timer_init+0x38>)
    4c2a:	4b09      	ldr	r3, [pc, #36]	; (4c50 <timer_init+0x3c>)
    4c2c:	4798      	blx	r3
	descr->func = func;
    4c2e:	4620      	mov	r0, r4
    4c30:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4c34:	682b      	ldr	r3, [r5, #0]
    4c36:	4631      	mov	r1, r6
    4c38:	4798      	blx	r3
	descr->time                           = 0;
    4c3a:	2000      	movs	r0, #0
    4c3c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4c3e:	4b05      	ldr	r3, [pc, #20]	; (4c54 <timer_init+0x40>)
    4c40:	6063      	str	r3, [r4, #4]
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4c44:	2000      	movs	r0, #0
    4c46:	e7ee      	b.n	4c26 <timer_init+0x12>
    4c48:	2000      	movs	r0, #0
    4c4a:	e7ec      	b.n	4c26 <timer_init+0x12>
    4c4c:	0000cc74 	.word	0x0000cc74
    4c50:	00005745 	.word	0x00005745
    4c54:	00004b95 	.word	0x00004b95

00004c58 <timer_start>:
{
    4c58:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    4c5a:	4604      	mov	r4, r0
    4c5c:	b198      	cbz	r0, 4c86 <timer_start+0x2e>
    4c5e:	6800      	ldr	r0, [r0, #0]
    4c60:	3000      	adds	r0, #0
    4c62:	bf18      	it	ne
    4c64:	2001      	movne	r0, #1
    4c66:	2254      	movs	r2, #84	; 0x54
    4c68:	4909      	ldr	r1, [pc, #36]	; (4c90 <timer_start+0x38>)
    4c6a:	4b0a      	ldr	r3, [pc, #40]	; (4c94 <timer_start+0x3c>)
    4c6c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4c6e:	1d25      	adds	r5, r4, #4
    4c70:	6823      	ldr	r3, [r4, #0]
    4c72:	699b      	ldr	r3, [r3, #24]
    4c74:	4628      	mov	r0, r5
    4c76:	4798      	blx	r3
    4c78:	b938      	cbnz	r0, 4c8a <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    4c7a:	6823      	ldr	r3, [r4, #0]
    4c7c:	689b      	ldr	r3, [r3, #8]
    4c7e:	4628      	mov	r0, r5
    4c80:	4798      	blx	r3
	return ERR_NONE;
    4c82:	2000      	movs	r0, #0
    4c84:	bd38      	pop	{r3, r4, r5, pc}
    4c86:	2000      	movs	r0, #0
    4c88:	e7ed      	b.n	4c66 <timer_start+0xe>
		return ERR_DENIED;
    4c8a:	f06f 0010 	mvn.w	r0, #16
}
    4c8e:	bd38      	pop	{r3, r4, r5, pc}
    4c90:	0000cc74 	.word	0x0000cc74
    4c94:	00005745 	.word	0x00005745

00004c98 <timer_add_task>:
{
    4c98:	b570      	push	{r4, r5, r6, lr}
    4c9a:	b082      	sub	sp, #8
    4c9c:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4c9e:	4604      	mov	r4, r0
    4ca0:	b328      	cbz	r0, 4cee <timer_add_task+0x56>
    4ca2:	b331      	cbz	r1, 4cf2 <timer_add_task+0x5a>
    4ca4:	6800      	ldr	r0, [r0, #0]
    4ca6:	3000      	adds	r0, #0
    4ca8:	bf18      	it	ne
    4caa:	2001      	movne	r0, #1
    4cac:	227b      	movs	r2, #123	; 0x7b
    4cae:	4920      	ldr	r1, [pc, #128]	; (4d30 <timer_add_task+0x98>)
    4cb0:	4b20      	ldr	r3, [pc, #128]	; (4d34 <timer_add_task+0x9c>)
    4cb2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4cb4:	7f23      	ldrb	r3, [r4, #28]
    4cb6:	f043 0301 	orr.w	r3, r3, #1
    4cba:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4cbc:	f104 0618 	add.w	r6, r4, #24
    4cc0:	4629      	mov	r1, r5
    4cc2:	4630      	mov	r0, r6
    4cc4:	4b1c      	ldr	r3, [pc, #112]	; (4d38 <timer_add_task+0xa0>)
    4cc6:	4798      	blx	r3
    4cc8:	b9a8      	cbnz	r0, 4cf6 <timer_add_task+0x5e>
	task->time_label = descr->time;
    4cca:	6963      	ldr	r3, [r4, #20]
    4ccc:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4cce:	6962      	ldr	r2, [r4, #20]
    4cd0:	4629      	mov	r1, r5
    4cd2:	4630      	mov	r0, r6
    4cd4:	4b19      	ldr	r3, [pc, #100]	; (4d3c <timer_add_task+0xa4>)
    4cd6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4cd8:	7f23      	ldrb	r3, [r4, #28]
    4cda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4cde:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4ce0:	7f23      	ldrb	r3, [r4, #28]
    4ce2:	f013 0f02 	tst.w	r3, #2
    4ce6:	d112      	bne.n	4d0e <timer_add_task+0x76>
	return ERR_NONE;
    4ce8:	2000      	movs	r0, #0
}
    4cea:	b002      	add	sp, #8
    4cec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4cee:	2000      	movs	r0, #0
    4cf0:	e7dc      	b.n	4cac <timer_add_task+0x14>
    4cf2:	2000      	movs	r0, #0
    4cf4:	e7da      	b.n	4cac <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4cf6:	7f23      	ldrb	r3, [r4, #28]
    4cf8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4cfc:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4cfe:	2280      	movs	r2, #128	; 0x80
    4d00:	490b      	ldr	r1, [pc, #44]	; (4d30 <timer_add_task+0x98>)
    4d02:	2000      	movs	r0, #0
    4d04:	4b0b      	ldr	r3, [pc, #44]	; (4d34 <timer_add_task+0x9c>)
    4d06:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4d08:	f06f 0011 	mvn.w	r0, #17
    4d0c:	e7ed      	b.n	4cea <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    4d0e:	a801      	add	r0, sp, #4
    4d10:	4b0b      	ldr	r3, [pc, #44]	; (4d40 <timer_add_task+0xa8>)
    4d12:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4d14:	7f23      	ldrb	r3, [r4, #28]
    4d16:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d1a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    4d1c:	6823      	ldr	r3, [r4, #0]
    4d1e:	69db      	ldr	r3, [r3, #28]
    4d20:	1d20      	adds	r0, r4, #4
    4d22:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4d24:	a801      	add	r0, sp, #4
    4d26:	4b07      	ldr	r3, [pc, #28]	; (4d44 <timer_add_task+0xac>)
    4d28:	4798      	blx	r3
	return ERR_NONE;
    4d2a:	2000      	movs	r0, #0
    4d2c:	e7dd      	b.n	4cea <timer_add_task+0x52>
    4d2e:	bf00      	nop
    4d30:	0000cc74 	.word	0x0000cc74
    4d34:	00005745 	.word	0x00005745
    4d38:	0000574b 	.word	0x0000574b
    4d3c:	00004b3d 	.word	0x00004b3d
    4d40:	000043ad 	.word	0x000043ad
    4d44:	000043bb 	.word	0x000043bb

00004d48 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    4d48:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4d4a:	2300      	movs	r3, #0
    4d4c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    4d4e:	69c3      	ldr	r3, [r0, #28]
    4d50:	b11b      	cbz	r3, 4d5a <usart_transmission_complete+0x12>
    4d52:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    4d56:	4610      	mov	r0, r2
    4d58:	4798      	blx	r3
    4d5a:	bd08      	pop	{r3, pc}

00004d5c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    4d5c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4d5e:	2300      	movs	r3, #0
    4d60:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    4d62:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4d64:	b11b      	cbz	r3, 4d6e <usart_error+0x12>
    4d66:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    4d6a:	4610      	mov	r0, r2
    4d6c:	4798      	blx	r3
    4d6e:	bd08      	pop	{r3, pc}

00004d70 <usart_fill_rx_buffer>:
{
    4d70:	b538      	push	{r3, r4, r5, lr}
    4d72:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    4d74:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    4d78:	302c      	adds	r0, #44	; 0x2c
    4d7a:	4b03      	ldr	r3, [pc, #12]	; (4d88 <usart_fill_rx_buffer+0x18>)
    4d7c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    4d7e:	6a23      	ldr	r3, [r4, #32]
    4d80:	b10b      	cbz	r3, 4d86 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    4d82:	4628      	mov	r0, r5
    4d84:	4798      	blx	r3
    4d86:	bd38      	pop	{r3, r4, r5, pc}
    4d88:	00005881 	.word	0x00005881

00004d8c <usart_async_write>:
{
    4d8c:	b570      	push	{r4, r5, r6, lr}
    4d8e:	460e      	mov	r6, r1
    4d90:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    4d92:	4604      	mov	r4, r0
    4d94:	b1e0      	cbz	r0, 4dd0 <usart_async_write+0x44>
    4d96:	b1e9      	cbz	r1, 4dd4 <usart_async_write+0x48>
    4d98:	1c10      	adds	r0, r2, #0
    4d9a:	bf18      	it	ne
    4d9c:	2001      	movne	r0, #1
    4d9e:	f240 123b 	movw	r2, #315	; 0x13b
    4da2:	490f      	ldr	r1, [pc, #60]	; (4de0 <usart_async_write+0x54>)
    4da4:	4b0f      	ldr	r3, [pc, #60]	; (4de4 <usart_async_write+0x58>)
    4da6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4da8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4dac:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4db0:	429a      	cmp	r2, r3
    4db2:	d111      	bne.n	4dd8 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4db4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4db6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4dba:	2300      	movs	r3, #0
    4dbc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4dc0:	2301      	movs	r3, #1
    4dc2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4dc4:	f104 0008 	add.w	r0, r4, #8
    4dc8:	4b07      	ldr	r3, [pc, #28]	; (4de8 <usart_async_write+0x5c>)
    4dca:	4798      	blx	r3
	return (int32_t)length;
    4dcc:	4628      	mov	r0, r5
    4dce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4dd0:	2000      	movs	r0, #0
    4dd2:	e7e4      	b.n	4d9e <usart_async_write+0x12>
    4dd4:	2000      	movs	r0, #0
    4dd6:	e7e2      	b.n	4d9e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4dd8:	f06f 001b 	mvn.w	r0, #27
}
    4ddc:	bd70      	pop	{r4, r5, r6, pc}
    4dde:	bf00      	nop
    4de0:	0000cc8c 	.word	0x0000cc8c
    4de4:	00005745 	.word	0x00005745
    4de8:	00006dc3 	.word	0x00006dc3

00004dec <usart_process_byte_sent>:
{
    4dec:	b510      	push	{r4, lr}
    4dee:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4df0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4df2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4df6:	429a      	cmp	r2, r3
    4df8:	d009      	beq.n	4e0e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4dfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4dfc:	1c59      	adds	r1, r3, #1
    4dfe:	8781      	strh	r1, [r0, #60]	; 0x3c
    4e00:	5cd1      	ldrb	r1, [r2, r3]
    4e02:	4b04      	ldr	r3, [pc, #16]	; (4e14 <usart_process_byte_sent+0x28>)
    4e04:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4e06:	4620      	mov	r0, r4
    4e08:	4b03      	ldr	r3, [pc, #12]	; (4e18 <usart_process_byte_sent+0x2c>)
    4e0a:	4798      	blx	r3
    4e0c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4e0e:	4b03      	ldr	r3, [pc, #12]	; (4e1c <usart_process_byte_sent+0x30>)
    4e10:	4798      	blx	r3
    4e12:	bd10      	pop	{r4, pc}
    4e14:	00006d97 	.word	0x00006d97
    4e18:	00006dc3 	.word	0x00006dc3
    4e1c:	00006dcb 	.word	0x00006dcb

00004e20 <usart_async_read>:
{
    4e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e24:	b082      	sub	sp, #8
    4e26:	460f      	mov	r7, r1
    4e28:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    4e2a:	4606      	mov	r6, r0
    4e2c:	b1a0      	cbz	r0, 4e58 <usart_async_read+0x38>
    4e2e:	b199      	cbz	r1, 4e58 <usart_async_read+0x38>
    4e30:	2a00      	cmp	r2, #0
    4e32:	d12d      	bne.n	4e90 <usart_async_read+0x70>
    4e34:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4e38:	4929      	ldr	r1, [pc, #164]	; (4ee0 <usart_async_read+0xc0>)
    4e3a:	2000      	movs	r0, #0
    4e3c:	4b29      	ldr	r3, [pc, #164]	; (4ee4 <usart_async_read+0xc4>)
    4e3e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4e40:	a801      	add	r0, sp, #4
    4e42:	4b29      	ldr	r3, [pc, #164]	; (4ee8 <usart_async_read+0xc8>)
    4e44:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4e46:	f106 0034 	add.w	r0, r6, #52	; 0x34
    4e4a:	4b28      	ldr	r3, [pc, #160]	; (4eec <usart_async_read+0xcc>)
    4e4c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    4e4e:	a801      	add	r0, sp, #4
    4e50:	4b27      	ldr	r3, [pc, #156]	; (4ef0 <usart_async_read+0xd0>)
    4e52:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4e54:	2500      	movs	r5, #0
	return (int32_t)was_read;
    4e56:	e03e      	b.n	4ed6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4e58:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4e5c:	4920      	ldr	r1, [pc, #128]	; (4ee0 <usart_async_read+0xc0>)
    4e5e:	2000      	movs	r0, #0
    4e60:	4b20      	ldr	r3, [pc, #128]	; (4ee4 <usart_async_read+0xc4>)
    4e62:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4e64:	a801      	add	r0, sp, #4
    4e66:	4b20      	ldr	r3, [pc, #128]	; (4ee8 <usart_async_read+0xc8>)
    4e68:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4e6a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4e6e:	4650      	mov	r0, sl
    4e70:	4b1e      	ldr	r3, [pc, #120]	; (4eec <usart_async_read+0xcc>)
    4e72:	4798      	blx	r3
    4e74:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4e76:	a801      	add	r0, sp, #4
    4e78:	4b1d      	ldr	r3, [pc, #116]	; (4ef0 <usart_async_read+0xd0>)
    4e7a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4e7c:	f1b9 0f00 	cmp.w	r9, #0
    4e80:	d004      	beq.n	4e8c <usart_async_read+0x6c>
    4e82:	f1b8 0f00 	cmp.w	r8, #0
    4e86:	d119      	bne.n	4ebc <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    4e88:	2500      	movs	r5, #0
    4e8a:	e024      	b.n	4ed6 <usart_async_read+0xb6>
    4e8c:	2500      	movs	r5, #0
    4e8e:	e022      	b.n	4ed6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4e90:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4e94:	4912      	ldr	r1, [pc, #72]	; (4ee0 <usart_async_read+0xc0>)
    4e96:	2001      	movs	r0, #1
    4e98:	4b12      	ldr	r3, [pc, #72]	; (4ee4 <usart_async_read+0xc4>)
    4e9a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4e9c:	a801      	add	r0, sp, #4
    4e9e:	4b12      	ldr	r3, [pc, #72]	; (4ee8 <usart_async_read+0xc8>)
    4ea0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4ea2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4ea6:	4650      	mov	r0, sl
    4ea8:	4b10      	ldr	r3, [pc, #64]	; (4eec <usart_async_read+0xcc>)
    4eaa:	4798      	blx	r3
    4eac:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4eae:	a801      	add	r0, sp, #4
    4eb0:	4b0f      	ldr	r3, [pc, #60]	; (4ef0 <usart_async_read+0xd0>)
    4eb2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4eb4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    4eb6:	f1b9 0f00 	cmp.w	r9, #0
    4eba:	d00c      	beq.n	4ed6 <usart_async_read+0xb6>
{
    4ebc:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    4ebe:	4e0d      	ldr	r6, [pc, #52]	; (4ef4 <usart_async_read+0xd4>)
    4ec0:	1c60      	adds	r0, r4, #1
    4ec2:	b285      	uxth	r5, r0
    4ec4:	1939      	adds	r1, r7, r4
    4ec6:	4650      	mov	r0, sl
    4ec8:	47b0      	blx	r6
    4eca:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    4ecc:	454c      	cmp	r4, r9
    4ece:	d202      	bcs.n	4ed6 <usart_async_read+0xb6>
    4ed0:	b2a3      	uxth	r3, r4
    4ed2:	4598      	cmp	r8, r3
    4ed4:	d8f4      	bhi.n	4ec0 <usart_async_read+0xa0>
}
    4ed6:	4628      	mov	r0, r5
    4ed8:	b002      	add	sp, #8
    4eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ede:	bf00      	nop
    4ee0:	0000cc8c 	.word	0x0000cc8c
    4ee4:	00005745 	.word	0x00005745
    4ee8:	000043ad 	.word	0x000043ad
    4eec:	000058c1 	.word	0x000058c1
    4ef0:	000043bb 	.word	0x000043bb
    4ef4:	0000583d 	.word	0x0000583d

00004ef8 <usart_async_init>:
{
    4ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efa:	460d      	mov	r5, r1
    4efc:	4616      	mov	r6, r2
    4efe:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4f00:	4604      	mov	r4, r0
    4f02:	b320      	cbz	r0, 4f4e <usart_async_init+0x56>
    4f04:	b329      	cbz	r1, 4f52 <usart_async_init+0x5a>
    4f06:	b332      	cbz	r2, 4f56 <usart_async_init+0x5e>
    4f08:	1c18      	adds	r0, r3, #0
    4f0a:	bf18      	it	ne
    4f0c:	2001      	movne	r0, #1
    4f0e:	223a      	movs	r2, #58	; 0x3a
    4f10:	4913      	ldr	r1, [pc, #76]	; (4f60 <usart_async_init+0x68>)
    4f12:	4b14      	ldr	r3, [pc, #80]	; (4f64 <usart_async_init+0x6c>)
    4f14:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    4f16:	463a      	mov	r2, r7
    4f18:	4631      	mov	r1, r6
    4f1a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4f1e:	4b12      	ldr	r3, [pc, #72]	; (4f68 <usart_async_init+0x70>)
    4f20:	4798      	blx	r3
    4f22:	b9d0      	cbnz	r0, 4f5a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    4f24:	4629      	mov	r1, r5
    4f26:	f104 0008 	add.w	r0, r4, #8
    4f2a:	4b10      	ldr	r3, [pc, #64]	; (4f6c <usart_async_init+0x74>)
    4f2c:	4798      	blx	r3
	if (init_status) {
    4f2e:	4603      	mov	r3, r0
    4f30:	b958      	cbnz	r0, 4f4a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    4f32:	4a0f      	ldr	r2, [pc, #60]	; (4f70 <usart_async_init+0x78>)
    4f34:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    4f36:	4a0f      	ldr	r2, [pc, #60]	; (4f74 <usart_async_init+0x7c>)
    4f38:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    4f3a:	4a0f      	ldr	r2, [pc, #60]	; (4f78 <usart_async_init+0x80>)
    4f3c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    4f3e:	4a0f      	ldr	r2, [pc, #60]	; (4f7c <usart_async_init+0x84>)
    4f40:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    4f42:	4a0f      	ldr	r2, [pc, #60]	; (4f80 <usart_async_init+0x88>)
    4f44:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    4f46:	4a0f      	ldr	r2, [pc, #60]	; (4f84 <usart_async_init+0x8c>)
    4f48:	6162      	str	r2, [r4, #20]
}
    4f4a:	4618      	mov	r0, r3
    4f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4f4e:	2000      	movs	r0, #0
    4f50:	e7dd      	b.n	4f0e <usart_async_init+0x16>
    4f52:	2000      	movs	r0, #0
    4f54:	e7db      	b.n	4f0e <usart_async_init+0x16>
    4f56:	2000      	movs	r0, #0
    4f58:	e7d9      	b.n	4f0e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    4f5a:	f06f 030c 	mvn.w	r3, #12
    4f5e:	e7f4      	b.n	4f4a <usart_async_init+0x52>
    4f60:	0000cc8c 	.word	0x0000cc8c
    4f64:	00005745 	.word	0x00005745
    4f68:	000057ed 	.word	0x000057ed
    4f6c:	00006ced 	.word	0x00006ced
    4f70:	00004e21 	.word	0x00004e21
    4f74:	00004d8d 	.word	0x00004d8d
    4f78:	00004ded 	.word	0x00004ded
    4f7c:	00004d71 	.word	0x00004d71
    4f80:	00004d49 	.word	0x00004d49
    4f84:	00004d5d 	.word	0x00004d5d

00004f88 <usart_async_enable>:
{
    4f88:	b510      	push	{r4, lr}
	ASSERT(descr);
    4f8a:	4604      	mov	r4, r0
    4f8c:	2261      	movs	r2, #97	; 0x61
    4f8e:	4906      	ldr	r1, [pc, #24]	; (4fa8 <usart_async_enable+0x20>)
    4f90:	3000      	adds	r0, #0
    4f92:	bf18      	it	ne
    4f94:	2001      	movne	r0, #1
    4f96:	4b05      	ldr	r3, [pc, #20]	; (4fac <usart_async_enable+0x24>)
    4f98:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    4f9a:	f104 0008 	add.w	r0, r4, #8
    4f9e:	4b04      	ldr	r3, [pc, #16]	; (4fb0 <usart_async_enable+0x28>)
    4fa0:	4798      	blx	r3
}
    4fa2:	2000      	movs	r0, #0
    4fa4:	bd10      	pop	{r4, pc}
    4fa6:	bf00      	nop
    4fa8:	0000cc8c 	.word	0x0000cc8c
    4fac:	00005745 	.word	0x00005745
    4fb0:	00006d7d 	.word	0x00006d7d

00004fb4 <usart_async_get_io_descriptor>:
{
    4fb4:	b538      	push	{r3, r4, r5, lr}
    4fb6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    4fb8:	4605      	mov	r5, r0
    4fba:	b148      	cbz	r0, 4fd0 <usart_async_get_io_descriptor+0x1c>
    4fbc:	1c08      	adds	r0, r1, #0
    4fbe:	bf18      	it	ne
    4fc0:	2001      	movne	r0, #1
    4fc2:	2277      	movs	r2, #119	; 0x77
    4fc4:	4903      	ldr	r1, [pc, #12]	; (4fd4 <usart_async_get_io_descriptor+0x20>)
    4fc6:	4b04      	ldr	r3, [pc, #16]	; (4fd8 <usart_async_get_io_descriptor+0x24>)
    4fc8:	4798      	blx	r3
	*io = &descr->io;
    4fca:	6025      	str	r5, [r4, #0]
}
    4fcc:	2000      	movs	r0, #0
    4fce:	bd38      	pop	{r3, r4, r5, pc}
    4fd0:	2000      	movs	r0, #0
    4fd2:	e7f6      	b.n	4fc2 <usart_async_get_io_descriptor+0xe>
    4fd4:	0000cc8c 	.word	0x0000cc8c
    4fd8:	00005745 	.word	0x00005745

00004fdc <usart_async_register_callback>:
{
    4fdc:	b570      	push	{r4, r5, r6, lr}
    4fde:	460c      	mov	r4, r1
    4fe0:	4616      	mov	r6, r2
	ASSERT(descr);
    4fe2:	4605      	mov	r5, r0
    4fe4:	2283      	movs	r2, #131	; 0x83
    4fe6:	4917      	ldr	r1, [pc, #92]	; (5044 <usart_async_register_callback+0x68>)
    4fe8:	3000      	adds	r0, #0
    4fea:	bf18      	it	ne
    4fec:	2001      	movne	r0, #1
    4fee:	4b16      	ldr	r3, [pc, #88]	; (5048 <usart_async_register_callback+0x6c>)
    4ff0:	4798      	blx	r3
	switch (type) {
    4ff2:	2c01      	cmp	r4, #1
    4ff4:	d010      	beq.n	5018 <usart_async_register_callback+0x3c>
    4ff6:	b124      	cbz	r4, 5002 <usart_async_register_callback+0x26>
    4ff8:	2c02      	cmp	r4, #2
    4ffa:	d018      	beq.n	502e <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    4ffc:	f06f 000c 	mvn.w	r0, #12
}
    5000:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    5002:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    5004:	1c32      	adds	r2, r6, #0
    5006:	bf18      	it	ne
    5008:	2201      	movne	r2, #1
    500a:	2101      	movs	r1, #1
    500c:	f105 0008 	add.w	r0, r5, #8
    5010:	4b0e      	ldr	r3, [pc, #56]	; (504c <usart_async_register_callback+0x70>)
    5012:	4798      	blx	r3
	return ERR_NONE;
    5014:	2000      	movs	r0, #0
		break;
    5016:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    5018:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    501a:	1c32      	adds	r2, r6, #0
    501c:	bf18      	it	ne
    501e:	2201      	movne	r2, #1
    5020:	2102      	movs	r1, #2
    5022:	f105 0008 	add.w	r0, r5, #8
    5026:	4b09      	ldr	r3, [pc, #36]	; (504c <usart_async_register_callback+0x70>)
    5028:	4798      	blx	r3
	return ERR_NONE;
    502a:	2000      	movs	r0, #0
		break;
    502c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    502e:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5030:	1c32      	adds	r2, r6, #0
    5032:	bf18      	it	ne
    5034:	2201      	movne	r2, #1
    5036:	2103      	movs	r1, #3
    5038:	f105 0008 	add.w	r0, r5, #8
    503c:	4b03      	ldr	r3, [pc, #12]	; (504c <usart_async_register_callback+0x70>)
    503e:	4798      	blx	r3
	return ERR_NONE;
    5040:	2000      	movs	r0, #0
		break;
    5042:	bd70      	pop	{r4, r5, r6, pc}
    5044:	0000cc8c 	.word	0x0000cc8c
    5048:	00005745 	.word	0x00005745
    504c:	00006dd5 	.word	0x00006dd5

00005050 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5054:	460f      	mov	r7, r1
    5056:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5058:	4604      	mov	r4, r0
    505a:	b328      	cbz	r0, 50a8 <usart_sync_write+0x58>
    505c:	b331      	cbz	r1, 50ac <usart_sync_write+0x5c>
    505e:	1c10      	adds	r0, r2, #0
    5060:	bf18      	it	ne
    5062:	2001      	movne	r0, #1
    5064:	22f1      	movs	r2, #241	; 0xf1
    5066:	4912      	ldr	r1, [pc, #72]	; (50b0 <usart_sync_write+0x60>)
    5068:	4b12      	ldr	r3, [pc, #72]	; (50b4 <usart_sync_write+0x64>)
    506a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    506c:	3408      	adds	r4, #8
    506e:	4d12      	ldr	r5, [pc, #72]	; (50b8 <usart_sync_write+0x68>)
    5070:	4620      	mov	r0, r4
    5072:	47a8      	blx	r5
    5074:	2800      	cmp	r0, #0
    5076:	d0fb      	beq.n	5070 <usart_sync_write+0x20>
    5078:	3f01      	subs	r7, #1
    507a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    507c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 50c0 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5080:	4d0d      	ldr	r5, [pc, #52]	; (50b8 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5082:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5086:	4620      	mov	r0, r4
    5088:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    508a:	4620      	mov	r0, r4
    508c:	47a8      	blx	r5
    508e:	2800      	cmp	r0, #0
    5090:	d0fb      	beq.n	508a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    5092:	3601      	adds	r6, #1
    5094:	4546      	cmp	r6, r8
    5096:	d3f4      	bcc.n	5082 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    5098:	4d08      	ldr	r5, [pc, #32]	; (50bc <usart_sync_write+0x6c>)
    509a:	4620      	mov	r0, r4
    509c:	47a8      	blx	r5
    509e:	2800      	cmp	r0, #0
    50a0:	d0fb      	beq.n	509a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    50a2:	4630      	mov	r0, r6
    50a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    50a8:	2000      	movs	r0, #0
    50aa:	e7db      	b.n	5064 <usart_sync_write+0x14>
    50ac:	2000      	movs	r0, #0
    50ae:	e7d9      	b.n	5064 <usart_sync_write+0x14>
    50b0:	0000ccac 	.word	0x0000ccac
    50b4:	00005745 	.word	0x00005745
    50b8:	00006da5 	.word	0x00006da5
    50bc:	00006daf 	.word	0x00006daf
    50c0:	00006d91 	.word	0x00006d91

000050c4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    50c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50c8:	460f      	mov	r7, r1
    50ca:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    50cc:	4604      	mov	r4, r0
    50ce:	b1e0      	cbz	r0, 510a <usart_sync_read+0x46>
    50d0:	b1e9      	cbz	r1, 510e <usart_sync_read+0x4a>
    50d2:	1c10      	adds	r0, r2, #0
    50d4:	bf18      	it	ne
    50d6:	2001      	movne	r0, #1
    50d8:	f44f 7286 	mov.w	r2, #268	; 0x10c
    50dc:	490d      	ldr	r1, [pc, #52]	; (5114 <usart_sync_read+0x50>)
    50de:	4b0e      	ldr	r3, [pc, #56]	; (5118 <usart_sync_read+0x54>)
    50e0:	4798      	blx	r3
    50e2:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    50e4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    50e6:	3408      	adds	r4, #8
    50e8:	4d0c      	ldr	r5, [pc, #48]	; (511c <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    50ea:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5120 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    50ee:	4620      	mov	r0, r4
    50f0:	47a8      	blx	r5
    50f2:	2800      	cmp	r0, #0
    50f4:	d0fb      	beq.n	50ee <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    50f6:	4620      	mov	r0, r4
    50f8:	47c8      	blx	r9
    50fa:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    50fe:	3601      	adds	r6, #1
    5100:	4546      	cmp	r6, r8
    5102:	d3f4      	bcc.n	50ee <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    5104:	4630      	mov	r0, r6
    5106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    510a:	2000      	movs	r0, #0
    510c:	e7e4      	b.n	50d8 <usart_sync_read+0x14>
    510e:	2000      	movs	r0, #0
    5110:	e7e2      	b.n	50d8 <usart_sync_read+0x14>
    5112:	bf00      	nop
    5114:	0000ccac 	.word	0x0000ccac
    5118:	00005745 	.word	0x00005745
    511c:	00006db9 	.word	0x00006db9
    5120:	00006d9d 	.word	0x00006d9d

00005124 <usart_sync_init>:
{
    5124:	b538      	push	{r3, r4, r5, lr}
    5126:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5128:	4604      	mov	r4, r0
    512a:	b198      	cbz	r0, 5154 <usart_sync_init+0x30>
    512c:	1c08      	adds	r0, r1, #0
    512e:	bf18      	it	ne
    5130:	2001      	movne	r0, #1
    5132:	2234      	movs	r2, #52	; 0x34
    5134:	4908      	ldr	r1, [pc, #32]	; (5158 <usart_sync_init+0x34>)
    5136:	4b09      	ldr	r3, [pc, #36]	; (515c <usart_sync_init+0x38>)
    5138:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    513a:	4629      	mov	r1, r5
    513c:	f104 0008 	add.w	r0, r4, #8
    5140:	4b07      	ldr	r3, [pc, #28]	; (5160 <usart_sync_init+0x3c>)
    5142:	4798      	blx	r3
	if (init_status) {
    5144:	4603      	mov	r3, r0
    5146:	b918      	cbnz	r0, 5150 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    5148:	4a06      	ldr	r2, [pc, #24]	; (5164 <usart_sync_init+0x40>)
    514a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    514c:	4a06      	ldr	r2, [pc, #24]	; (5168 <usart_sync_init+0x44>)
    514e:	6022      	str	r2, [r4, #0]
}
    5150:	4618      	mov	r0, r3
    5152:	bd38      	pop	{r3, r4, r5, pc}
    5154:	2000      	movs	r0, #0
    5156:	e7ec      	b.n	5132 <usart_sync_init+0xe>
    5158:	0000ccac 	.word	0x0000ccac
    515c:	00005745 	.word	0x00005745
    5160:	00006cc1 	.word	0x00006cc1
    5164:	000050c5 	.word	0x000050c5
    5168:	00005051 	.word	0x00005051

0000516c <usart_sync_enable>:
{
    516c:	b510      	push	{r4, lr}
	ASSERT(descr);
    516e:	4604      	mov	r4, r0
    5170:	2253      	movs	r2, #83	; 0x53
    5172:	4906      	ldr	r1, [pc, #24]	; (518c <usart_sync_enable+0x20>)
    5174:	3000      	adds	r0, #0
    5176:	bf18      	it	ne
    5178:	2001      	movne	r0, #1
    517a:	4b05      	ldr	r3, [pc, #20]	; (5190 <usart_sync_enable+0x24>)
    517c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    517e:	f104 0008 	add.w	r0, r4, #8
    5182:	4b04      	ldr	r3, [pc, #16]	; (5194 <usart_sync_enable+0x28>)
    5184:	4798      	blx	r3
}
    5186:	2000      	movs	r0, #0
    5188:	bd10      	pop	{r4, pc}
    518a:	bf00      	nop
    518c:	0000ccac 	.word	0x0000ccac
    5190:	00005745 	.word	0x00005745
    5194:	00006d69 	.word	0x00006d69

00005198 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5198:	4b0f      	ldr	r3, [pc, #60]	; (51d8 <_usb_d_find_ep+0x40>)
    519a:	7859      	ldrb	r1, [r3, #1]
    519c:	4288      	cmp	r0, r1
    519e:	d018      	beq.n	51d2 <_usb_d_find_ep+0x3a>
{
    51a0:	b430      	push	{r4, r5}
    51a2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    51a4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    51a6:	f000 050f 	and.w	r5, r0, #15
    51aa:	e007      	b.n	51bc <_usb_d_find_ep+0x24>
    51ac:	3301      	adds	r3, #1
    51ae:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    51b0:	2b0d      	cmp	r3, #13
    51b2:	d009      	beq.n	51c8 <_usb_d_find_ep+0x30>
    51b4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    51b6:	7851      	ldrb	r1, [r2, #1]
    51b8:	4281      	cmp	r1, r0
    51ba:	d007      	beq.n	51cc <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    51bc:	7814      	ldrb	r4, [r2, #0]
    51be:	2c00      	cmp	r4, #0
    51c0:	d1f4      	bne.n	51ac <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    51c2:	428d      	cmp	r5, r1
    51c4:	d1f2      	bne.n	51ac <_usb_d_find_ep+0x14>
    51c6:	e001      	b.n	51cc <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    51c8:	f04f 33ff 	mov.w	r3, #4294967295
}
    51cc:	4618      	mov	r0, r3
    51ce:	bc30      	pop	{r4, r5}
    51d0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    51d2:	2300      	movs	r3, #0
}
    51d4:	4618      	mov	r0, r3
    51d6:	4770      	bx	lr
    51d8:	2000064c 	.word	0x2000064c

000051dc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    51dc:	2000      	movs	r0, #0
    51de:	4770      	bx	lr

000051e0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    51e0:	b538      	push	{r3, r4, r5, lr}
    51e2:	4604      	mov	r4, r0
    51e4:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    51e6:	4b09      	ldr	r3, [pc, #36]	; (520c <usb_d_cb_trans_more+0x2c>)
    51e8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    51ea:	4b09      	ldr	r3, [pc, #36]	; (5210 <usb_d_cb_trans_more+0x30>)
    51ec:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    51f0:	789b      	ldrb	r3, [r3, #2]
    51f2:	2b03      	cmp	r3, #3
    51f4:	d001      	beq.n	51fa <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    51f6:	2000      	movs	r0, #0
}
    51f8:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    51fa:	4b05      	ldr	r3, [pc, #20]	; (5210 <usb_d_cb_trans_more+0x30>)
    51fc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5200:	6983      	ldr	r3, [r0, #24]
    5202:	4629      	mov	r1, r5
    5204:	4620      	mov	r0, r4
    5206:	4798      	blx	r3
    5208:	bd38      	pop	{r3, r4, r5, pc}
    520a:	bf00      	nop
    520c:	00005199 	.word	0x00005199
    5210:	2000064c 	.word	0x2000064c

00005214 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5214:	b5f0      	push	{r4, r5, r6, r7, lr}
    5216:	b085      	sub	sp, #20
    5218:	4606      	mov	r6, r0
    521a:	460d      	mov	r5, r1
    521c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    521e:	4b4d      	ldr	r3, [pc, #308]	; (5354 <_usb_d_cb_trans_done+0x140>)
    5220:	4798      	blx	r3
    5222:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5224:	2d00      	cmp	r5, #0
    5226:	d15b      	bne.n	52e0 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5228:	4a4b      	ldr	r2, [pc, #300]	; (5358 <_usb_d_cb_trans_done+0x144>)
    522a:	0143      	lsls	r3, r0, #5
    522c:	18d1      	adds	r1, r2, r3
    522e:	2000      	movs	r0, #0
    5230:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5232:	5cd3      	ldrb	r3, [r2, r3]
    5234:	b173      	cbz	r3, 5254 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5236:	4b48      	ldr	r3, [pc, #288]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5238:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    523c:	2201      	movs	r2, #1
    523e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5240:	4845      	ldr	r0, [pc, #276]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5242:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5246:	69c3      	ldr	r3, [r0, #28]
    5248:	463a      	mov	r2, r7
    524a:	78c1      	ldrb	r1, [r0, #3]
    524c:	4630      	mov	r0, r6
    524e:	4798      	blx	r3
}
    5250:	b005      	add	sp, #20
    5252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5254:	788b      	ldrb	r3, [r1, #2]
    5256:	2b03      	cmp	r3, #3
    5258:	d00b      	beq.n	5272 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    525a:	483f      	ldr	r0, [pc, #252]	; (5358 <_usb_d_cb_trans_done+0x144>)
    525c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5260:	4614      	mov	r4, r2
    5262:	69d3      	ldr	r3, [r2, #28]
    5264:	320c      	adds	r2, #12
    5266:	2100      	movs	r1, #0
    5268:	7860      	ldrb	r0, [r4, #1]
    526a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    526c:	2302      	movs	r3, #2
    526e:	70a3      	strb	r3, [r4, #2]
    5270:	e7ee      	b.n	5250 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5272:	460b      	mov	r3, r1
    5274:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5278:	460a      	mov	r2, r1
    527a:	69ce      	ldr	r6, [r1, #28]
    527c:	320c      	adds	r2, #12
    527e:	2101      	movs	r1, #1
    5280:	7858      	ldrb	r0, [r3, #1]
    5282:	47b0      	blx	r6
		if (err) {
    5284:	b1a0      	cbz	r0, 52b0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5286:	4b34      	ldr	r3, [pc, #208]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5288:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    528c:	2205      	movs	r2, #5
    528e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5290:	2202      	movs	r2, #2
    5292:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5294:	2d00      	cmp	r5, #0
    5296:	db09      	blt.n	52ac <_usb_d_cb_trans_done+0x98>
    5298:	482f      	ldr	r0, [pc, #188]	; (5358 <_usb_d_cb_trans_done+0x144>)
    529a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    529e:	7840      	ldrb	r0, [r0, #1]
    52a0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    52a4:	2101      	movs	r1, #1
    52a6:	4b2d      	ldr	r3, [pc, #180]	; (535c <_usb_d_cb_trans_done+0x148>)
    52a8:	4798      	blx	r3
    52aa:	e7d1      	b.n	5250 <_usb_d_cb_trans_done+0x3c>
    52ac:	7858      	ldrb	r0, [r3, #1]
    52ae:	e7f9      	b.n	52a4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    52b0:	4829      	ldr	r0, [pc, #164]	; (5358 <_usb_d_cb_trans_done+0x144>)
    52b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    52b6:	2304      	movs	r3, #4
    52b8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    52ba:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    52bc:	2200      	movs	r2, #0
    52be:	9201      	str	r2, [sp, #4]
    52c0:	9202      	str	r2, [sp, #8]
    52c2:	4295      	cmp	r5, r2
    52c4:	bfac      	ite	ge
    52c6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    52ca:	f003 030f 	andlt.w	r3, r3, #15
    52ce:	f88d 300c 	strb.w	r3, [sp, #12]
    52d2:	2301      	movs	r3, #1
    52d4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    52d8:	a801      	add	r0, sp, #4
    52da:	4b21      	ldr	r3, [pc, #132]	; (5360 <_usb_d_cb_trans_done+0x14c>)
    52dc:	4798      	blx	r3
    52de:	e7b7      	b.n	5250 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    52e0:	2d01      	cmp	r5, #1
    52e2:	d00a      	beq.n	52fa <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    52e4:	2d02      	cmp	r5, #2
    52e6:	d01c      	beq.n	5322 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    52e8:	2d03      	cmp	r5, #3
    52ea:	d02a      	beq.n	5342 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    52ec:	4b1a      	ldr	r3, [pc, #104]	; (5358 <_usb_d_cb_trans_done+0x144>)
    52ee:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    52f2:	2206      	movs	r2, #6
    52f4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    52f6:	70da      	strb	r2, [r3, #3]
    52f8:	e7a2      	b.n	5240 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    52fa:	4a17      	ldr	r2, [pc, #92]	; (5358 <_usb_d_cb_trans_done+0x144>)
    52fc:	0143      	lsls	r3, r0, #5
    52fe:	18d1      	adds	r1, r2, r3
    5300:	2002      	movs	r0, #2
    5302:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5304:	5cd3      	ldrb	r3, [r2, r3]
    5306:	b12b      	cbz	r3, 5314 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5308:	4b13      	ldr	r3, [pc, #76]	; (5358 <_usb_d_cb_trans_done+0x144>)
    530a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    530e:	2205      	movs	r2, #5
    5310:	709a      	strb	r2, [r3, #2]
    5312:	e795      	b.n	5240 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5314:	460b      	mov	r3, r1
    5316:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5318:	2100      	movs	r1, #0
    531a:	4630      	mov	r0, r6
    531c:	4b0f      	ldr	r3, [pc, #60]	; (535c <_usb_d_cb_trans_done+0x148>)
    531e:	4798      	blx	r3
    5320:	e78e      	b.n	5240 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5322:	4a0d      	ldr	r2, [pc, #52]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5324:	0143      	lsls	r3, r0, #5
    5326:	18d1      	adds	r1, r2, r3
    5328:	2004      	movs	r0, #4
    532a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    532c:	5cd3      	ldrb	r3, [r2, r3]
    532e:	b12b      	cbz	r3, 533c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5330:	4b09      	ldr	r3, [pc, #36]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5332:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5336:	2201      	movs	r2, #1
    5338:	709a      	strb	r2, [r3, #2]
    533a:	e781      	b.n	5240 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    533c:	2302      	movs	r3, #2
    533e:	708b      	strb	r3, [r1, #2]
			return;
    5340:	e786      	b.n	5250 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5342:	4b05      	ldr	r3, [pc, #20]	; (5358 <_usb_d_cb_trans_done+0x144>)
    5344:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5348:	2200      	movs	r2, #0
    534a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    534c:	2205      	movs	r2, #5
    534e:	70da      	strb	r2, [r3, #3]
    5350:	e776      	b.n	5240 <_usb_d_cb_trans_done+0x2c>
    5352:	bf00      	nop
    5354:	00005199 	.word	0x00005199
    5358:	2000064c 	.word	0x2000064c
    535c:	00008d11 	.word	0x00008d11
    5360:	00008eb9 	.word	0x00008eb9

00005364 <usb_d_cb_trans_setup>:
{
    5364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5368:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    536a:	4b1c      	ldr	r3, [pc, #112]	; (53dc <usb_d_cb_trans_setup+0x78>)
    536c:	4798      	blx	r3
    536e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5370:	4c1b      	ldr	r4, [pc, #108]	; (53e0 <usb_d_cb_trans_setup+0x7c>)
    5372:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5376:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5378:	4621      	mov	r1, r4
    537a:	4628      	mov	r0, r5
    537c:	4b19      	ldr	r3, [pc, #100]	; (53e4 <usb_d_cb_trans_setup+0x80>)
    537e:	4798      	blx	r3
	if (n != 8) {
    5380:	b2c0      	uxtb	r0, r0
    5382:	2808      	cmp	r0, #8
    5384:	d009      	beq.n	539a <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5386:	2101      	movs	r1, #1
    5388:	4628      	mov	r0, r5
    538a:	4c17      	ldr	r4, [pc, #92]	; (53e8 <usb_d_cb_trans_setup+0x84>)
    538c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    538e:	2101      	movs	r1, #1
    5390:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5394:	47a0      	blx	r4
		return;
    5396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    539a:	2100      	movs	r1, #0
    539c:	4628      	mov	r0, r5
    539e:	4f12      	ldr	r7, [pc, #72]	; (53e8 <usb_d_cb_trans_setup+0x84>)
    53a0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    53a2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    53a6:	2100      	movs	r1, #0
    53a8:	4640      	mov	r0, r8
    53aa:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    53ac:	4b0c      	ldr	r3, [pc, #48]	; (53e0 <usb_d_cb_trans_setup+0x7c>)
    53ae:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    53b2:	2201      	movs	r2, #1
    53b4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    53b6:	695b      	ldr	r3, [r3, #20]
    53b8:	4621      	mov	r1, r4
    53ba:	4628      	mov	r0, r5
    53bc:	4798      	blx	r3
    53be:	b108      	cbz	r0, 53c4 <usb_d_cb_trans_setup+0x60>
    53c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    53c4:	4b06      	ldr	r3, [pc, #24]	; (53e0 <usb_d_cb_trans_setup+0x7c>)
    53c6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    53ca:	2305      	movs	r3, #5
    53cc:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    53ce:	2101      	movs	r1, #1
    53d0:	4628      	mov	r0, r5
    53d2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    53d4:	2101      	movs	r1, #1
    53d6:	4640      	mov	r0, r8
    53d8:	47b8      	blx	r7
    53da:	e7f1      	b.n	53c0 <usb_d_cb_trans_setup+0x5c>
    53dc:	00005199 	.word	0x00005199
    53e0:	2000064c 	.word	0x2000064c
    53e4:	00008e59 	.word	0x00008e59
    53e8:	00008d11 	.word	0x00008d11

000053ec <usb_d_init>:

int32_t usb_d_init(void)
{
    53ec:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    53ee:	4b11      	ldr	r3, [pc, #68]	; (5434 <usb_d_init+0x48>)
    53f0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    53f2:	2800      	cmp	r0, #0
    53f4:	db1d      	blt.n	5432 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    53f6:	4c10      	ldr	r4, [pc, #64]	; (5438 <usb_d_init+0x4c>)
    53f8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    53fc:	2100      	movs	r1, #0
    53fe:	4620      	mov	r0, r4
    5400:	4b0e      	ldr	r3, [pc, #56]	; (543c <usb_d_init+0x50>)
    5402:	4798      	blx	r3
    5404:	4623      	mov	r3, r4
    5406:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    540a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    540c:	4a0c      	ldr	r2, [pc, #48]	; (5440 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    540e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5410:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5412:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5414:	61da      	str	r2, [r3, #28]
    5416:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5418:	4283      	cmp	r3, r0
    541a:	d1f8      	bne.n	540e <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    541c:	4909      	ldr	r1, [pc, #36]	; (5444 <usb_d_init+0x58>)
    541e:	2000      	movs	r0, #0
    5420:	4c09      	ldr	r4, [pc, #36]	; (5448 <usb_d_init+0x5c>)
    5422:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5424:	4909      	ldr	r1, [pc, #36]	; (544c <usb_d_init+0x60>)
    5426:	2001      	movs	r0, #1
    5428:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    542a:	4909      	ldr	r1, [pc, #36]	; (5450 <usb_d_init+0x64>)
    542c:	2002      	movs	r0, #2
    542e:	47a0      	blx	r4
	return ERR_NONE;
    5430:	2000      	movs	r0, #0
}
    5432:	bd10      	pop	{r4, pc}
    5434:	000086dd 	.word	0x000086dd
    5438:	2000064c 	.word	0x2000064c
    543c:	0000b863 	.word	0x0000b863
    5440:	000051dd 	.word	0x000051dd
    5444:	00005365 	.word	0x00005365
    5448:	000090c1 	.word	0x000090c1
    544c:	000051e1 	.word	0x000051e1
    5450:	00005215 	.word	0x00005215

00005454 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5454:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5456:	4b01      	ldr	r3, [pc, #4]	; (545c <usb_d_register_callback+0x8>)
    5458:	4798      	blx	r3
    545a:	bd08      	pop	{r3, pc}
    545c:	00009099 	.word	0x00009099

00005460 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5460:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5462:	4b01      	ldr	r3, [pc, #4]	; (5468 <usb_d_enable+0x8>)
    5464:	4798      	blx	r3
}
    5466:	bd08      	pop	{r3, pc}
    5468:	000087e5 	.word	0x000087e5

0000546c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    546c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    546e:	4b01      	ldr	r3, [pc, #4]	; (5474 <usb_d_attach+0x8>)
    5470:	4798      	blx	r3
    5472:	bd08      	pop	{r3, pc}
    5474:	00008851 	.word	0x00008851

00005478 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5478:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    547a:	4b01      	ldr	r3, [pc, #4]	; (5480 <usb_d_get_frame_num+0x8>)
    547c:	4798      	blx	r3
}
    547e:	bd08      	pop	{r3, pc}
    5480:	0000886f 	.word	0x0000886f

00005484 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5484:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5486:	4b01      	ldr	r3, [pc, #4]	; (548c <usb_d_set_address+0x8>)
    5488:	4798      	blx	r3
    548a:	bd08      	pop	{r3, pc}
    548c:	00008863 	.word	0x00008863

00005490 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5492:	4606      	mov	r6, r0
    5494:	460c      	mov	r4, r1
    5496:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5498:	4b0f      	ldr	r3, [pc, #60]	; (54d8 <usb_d_ep_init+0x48>)
    549a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    549c:	2800      	cmp	r0, #0
    549e:	da14      	bge.n	54ca <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    54a0:	20ff      	movs	r0, #255	; 0xff
    54a2:	4b0d      	ldr	r3, [pc, #52]	; (54d8 <usb_d_ep_init+0x48>)
    54a4:	4798      	blx	r3
		if (ep_index < 0) {
    54a6:	1e05      	subs	r5, r0, #0
    54a8:	db12      	blt.n	54d0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    54aa:	463a      	mov	r2, r7
    54ac:	4621      	mov	r1, r4
    54ae:	4630      	mov	r0, r6
    54b0:	4b0a      	ldr	r3, [pc, #40]	; (54dc <usb_d_ep_init+0x4c>)
    54b2:	4798      	blx	r3
	if (rc < 0) {
    54b4:	2800      	cmp	r0, #0
    54b6:	db0d      	blt.n	54d4 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    54b8:	4b09      	ldr	r3, [pc, #36]	; (54e0 <usb_d_ep_init+0x50>)
    54ba:	0168      	lsls	r0, r5, #5
    54bc:	181a      	adds	r2, r3, r0
    54be:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    54c0:	f004 0403 	and.w	r4, r4, #3
    54c4:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    54c6:	2000      	movs	r0, #0
    54c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    54ca:	f06f 0013 	mvn.w	r0, #19
    54ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    54d0:	f06f 0014 	mvn.w	r0, #20
}
    54d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54d6:	bf00      	nop
    54d8:	00005199 	.word	0x00005199
    54dc:	0000887d 	.word	0x0000887d
    54e0:	2000064c 	.word	0x2000064c

000054e4 <usb_d_ep0_init>:
{
    54e4:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    54e6:	4602      	mov	r2, r0
    54e8:	2100      	movs	r1, #0
    54ea:	4608      	mov	r0, r1
    54ec:	4b01      	ldr	r3, [pc, #4]	; (54f4 <usb_d_ep0_init+0x10>)
    54ee:	4798      	blx	r3
}
    54f0:	bd08      	pop	{r3, pc}
    54f2:	bf00      	nop
    54f4:	00005491 	.word	0x00005491

000054f8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    54f8:	b538      	push	{r3, r4, r5, lr}
    54fa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    54fc:	4b06      	ldr	r3, [pc, #24]	; (5518 <usb_d_ep_deinit+0x20>)
    54fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5500:	1e04      	subs	r4, r0, #0
    5502:	db07      	blt.n	5514 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5504:	4628      	mov	r0, r5
    5506:	4b05      	ldr	r3, [pc, #20]	; (551c <usb_d_ep_deinit+0x24>)
    5508:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    550a:	4805      	ldr	r0, [pc, #20]	; (5520 <usb_d_ep_deinit+0x28>)
    550c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5510:	23ff      	movs	r3, #255	; 0xff
    5512:	7043      	strb	r3, [r0, #1]
    5514:	bd38      	pop	{r3, r4, r5, pc}
    5516:	bf00      	nop
    5518:	00005199 	.word	0x00005199
    551c:	00008995 	.word	0x00008995
    5520:	2000064c 	.word	0x2000064c

00005524 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5524:	b538      	push	{r3, r4, r5, lr}
    5526:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5528:	4b0e      	ldr	r3, [pc, #56]	; (5564 <usb_d_ep_enable+0x40>)
    552a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    552c:	1e04      	subs	r4, r0, #0
    552e:	db16      	blt.n	555e <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5530:	0163      	lsls	r3, r4, #5
    5532:	4a0d      	ldr	r2, [pc, #52]	; (5568 <usb_d_ep_enable+0x44>)
    5534:	5cd3      	ldrb	r3, [r2, r3]
    5536:	2b00      	cmp	r3, #0
    5538:	bf0c      	ite	eq
    553a:	2202      	moveq	r2, #2
    553c:	2201      	movne	r2, #1
    553e:	4b0a      	ldr	r3, [pc, #40]	; (5568 <usb_d_ep_enable+0x44>)
    5540:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5544:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5546:	4628      	mov	r0, r5
    5548:	4b08      	ldr	r3, [pc, #32]	; (556c <usb_d_ep_enable+0x48>)
    554a:	4798      	blx	r3
	if (rc < 0) {
    554c:	2800      	cmp	r0, #0
    554e:	db00      	blt.n	5552 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5550:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5552:	4b05      	ldr	r3, [pc, #20]	; (5568 <usb_d_ep_enable+0x44>)
    5554:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5558:	2300      	movs	r3, #0
    555a:	70a3      	strb	r3, [r4, #2]
    555c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    555e:	f06f 0011 	mvn.w	r0, #17
    5562:	e7f5      	b.n	5550 <usb_d_ep_enable+0x2c>
    5564:	00005199 	.word	0x00005199
    5568:	2000064c 	.word	0x2000064c
    556c:	00008a59 	.word	0x00008a59

00005570 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5574:	b086      	sub	sp, #24
    5576:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5578:	7a07      	ldrb	r7, [r0, #8]
    557a:	4638      	mov	r0, r7
    557c:	4b3f      	ldr	r3, [pc, #252]	; (567c <usb_d_ep_transfer+0x10c>)
    557e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5580:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5582:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5586:	1e06      	subs	r6, r0, #0
    5588:	db72      	blt.n	5670 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    558a:	a804      	add	r0, sp, #16
    558c:	4b3c      	ldr	r3, [pc, #240]	; (5680 <usb_d_ep_transfer+0x110>)
    558e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5590:	4b3c      	ldr	r3, [pc, #240]	; (5684 <usb_d_ep_transfer+0x114>)
    5592:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5596:	789b      	ldrb	r3, [r3, #2]
    5598:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    559c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    55a0:	b2db      	uxtb	r3, r3
    55a2:	2b01      	cmp	r3, #1
    55a4:	d011      	beq.n	55ca <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    55a6:	a804      	add	r0, sp, #16
    55a8:	4b37      	ldr	r3, [pc, #220]	; (5688 <usb_d_ep_transfer+0x118>)
    55aa:	4798      	blx	r3
		switch (state) {
    55ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    55b0:	b2db      	uxtb	r3, r3
    55b2:	2b05      	cmp	r3, #5
    55b4:	d05f      	beq.n	5676 <usb_d_ep_transfer+0x106>
    55b6:	2b06      	cmp	r3, #6
    55b8:	d023      	beq.n	5602 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    55ba:	2b00      	cmp	r3, #0
    55bc:	bf0c      	ite	eq
    55be:	f06f 0012 	mvneq.w	r0, #18
    55c2:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    55c4:	b006      	add	sp, #24
    55c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    55ca:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5684 <usb_d_ep_transfer+0x114>
    55ce:	ea4f 1946 	mov.w	r9, r6, lsl #5
    55d2:	eb0a 0309 	add.w	r3, sl, r9
    55d6:	2203      	movs	r2, #3
    55d8:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    55da:	a804      	add	r0, sp, #16
    55dc:	4b2a      	ldr	r3, [pc, #168]	; (5688 <usb_d_ep_transfer+0x118>)
    55de:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    55e0:	f81a 3009 	ldrb.w	r3, [sl, r9]
    55e4:	b183      	cbz	r3, 5608 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    55e6:	7a22      	ldrb	r2, [r4, #8]
    55e8:	3500      	adds	r5, #0
    55ea:	bf18      	it	ne
    55ec:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    55ee:	6823      	ldr	r3, [r4, #0]
    55f0:	9301      	str	r3, [sp, #4]
    55f2:	f8cd 8008 	str.w	r8, [sp, #8]
    55f6:	f017 0f80 	tst.w	r7, #128	; 0x80
    55fa:	d119      	bne.n	5630 <usb_d_ep_transfer+0xc0>
    55fc:	f002 030f 	and.w	r3, r2, #15
    5600:	e018      	b.n	5634 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5602:	f06f 000f 	mvn.w	r0, #15
    5606:	e7dd      	b.n	55c4 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5608:	4b1e      	ldr	r3, [pc, #120]	; (5684 <usb_d_ep_transfer+0x114>)
    560a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    560e:	7cda      	ldrb	r2, [r3, #19]
    5610:	7c9d      	ldrb	r5, [r3, #18]
    5612:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5616:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5618:	b9a5      	cbnz	r5, 5644 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    561a:	4b1a      	ldr	r3, [pc, #104]	; (5684 <usb_d_ep_transfer+0x114>)
    561c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5620:	2304      	movs	r3, #4
    5622:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5624:	2300      	movs	r3, #0
			zlp                 = true;
    5626:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5628:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    562a:	6821      	ldr	r1, [r4, #0]
    562c:	9101      	str	r1, [sp, #4]
    562e:	9302      	str	r3, [sp, #8]
    5630:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5634:	f88d 300c 	strb.w	r3, [sp, #12]
    5638:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    563c:	a801      	add	r0, sp, #4
    563e:	4b13      	ldr	r3, [pc, #76]	; (568c <usb_d_ep_transfer+0x11c>)
    5640:	4798      	blx	r3
	return rc;
    5642:	e7bf      	b.n	55c4 <usb_d_ep_transfer+0x54>
    5644:	4643      	mov	r3, r8
    5646:	45a8      	cmp	r8, r5
    5648:	bf28      	it	cs
    564a:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    564c:	4a0d      	ldr	r2, [pc, #52]	; (5684 <usb_d_ep_transfer+0x114>)
    564e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5652:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5656:	2a00      	cmp	r2, #0
    5658:	db05      	blt.n	5666 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    565a:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    565c:	6821      	ldr	r1, [r4, #0]
    565e:	9101      	str	r1, [sp, #4]
    5660:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5662:	2500      	movs	r5, #0
    5664:	e7ca      	b.n	55fc <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5666:	429d      	cmp	r5, r3
    5668:	bf94      	ite	ls
    566a:	2500      	movls	r5, #0
    566c:	2501      	movhi	r5, #1
    566e:	e7db      	b.n	5628 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5670:	f06f 0011 	mvn.w	r0, #17
    5674:	e7a6      	b.n	55c4 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5676:	2002      	movs	r0, #2
    5678:	e7a4      	b.n	55c4 <usb_d_ep_transfer+0x54>
    567a:	bf00      	nop
    567c:	00005199 	.word	0x00005199
    5680:	000043ad 	.word	0x000043ad
    5684:	2000064c 	.word	0x2000064c
    5688:	000043bb 	.word	0x000043bb
    568c:	00008eb9 	.word	0x00008eb9

00005690 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5690:	b538      	push	{r3, r4, r5, lr}
    5692:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5694:	b141      	cbz	r1, 56a8 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5696:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5698:	bf0c      	ite	eq
    569a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    569c:	2102      	movne	r1, #2
    569e:	4b13      	ldr	r3, [pc, #76]	; (56ec <usb_d_ep_halt+0x5c>)
    56a0:	4798      	blx	r3
    56a2:	4603      	mov	r3, r0
	}
}
    56a4:	4618      	mov	r0, r3
    56a6:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    56a8:	4b11      	ldr	r3, [pc, #68]	; (56f0 <usb_d_ep_halt+0x60>)
    56aa:	4798      	blx	r3
	if (ep_index < 0) {
    56ac:	1e05      	subs	r5, r0, #0
    56ae:	db19      	blt.n	56e4 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    56b0:	2102      	movs	r1, #2
    56b2:	4620      	mov	r0, r4
    56b4:	4b0d      	ldr	r3, [pc, #52]	; (56ec <usb_d_ep_halt+0x5c>)
    56b6:	4798      	blx	r3
    56b8:	4603      	mov	r3, r0
    56ba:	2800      	cmp	r0, #0
    56bc:	d0f2      	beq.n	56a4 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    56be:	2100      	movs	r1, #0
    56c0:	4620      	mov	r0, r4
    56c2:	4b0a      	ldr	r3, [pc, #40]	; (56ec <usb_d_ep_halt+0x5c>)
    56c4:	4798      	blx	r3
		if (rc < 0) {
    56c6:	1e03      	subs	r3, r0, #0
    56c8:	dbec      	blt.n	56a4 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    56ca:	4b0a      	ldr	r3, [pc, #40]	; (56f4 <usb_d_ep_halt+0x64>)
    56cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    56d0:	2201      	movs	r2, #1
    56d2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    56d4:	2103      	movs	r1, #3
    56d6:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    56d8:	69db      	ldr	r3, [r3, #28]
    56da:	2200      	movs	r2, #0
    56dc:	4620      	mov	r0, r4
    56de:	4798      	blx	r3
	return ERR_NONE;
    56e0:	2300      	movs	r3, #0
    56e2:	e7df      	b.n	56a4 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    56e4:	f06f 0311 	mvn.w	r3, #17
    56e8:	e7dc      	b.n	56a4 <usb_d_ep_halt+0x14>
    56ea:	bf00      	nop
    56ec:	00008d11 	.word	0x00008d11
    56f0:	00005199 	.word	0x00005199
    56f4:	2000064c 	.word	0x2000064c

000056f8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    56f8:	b538      	push	{r3, r4, r5, lr}
    56fa:	460d      	mov	r5, r1
    56fc:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    56fe:	4b0e      	ldr	r3, [pc, #56]	; (5738 <usb_d_ep_register_callback+0x40>)
    5700:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5702:	4b0e      	ldr	r3, [pc, #56]	; (573c <usb_d_ep_register_callback+0x44>)
    5704:	2c00      	cmp	r4, #0
    5706:	bf08      	it	eq
    5708:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    570a:	2800      	cmp	r0, #0
    570c:	db13      	blt.n	5736 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    570e:	2d01      	cmp	r5, #1
    5710:	d008      	beq.n	5724 <usb_d_ep_register_callback+0x2c>
    5712:	b115      	cbz	r5, 571a <usb_d_ep_register_callback+0x22>
    5714:	2d02      	cmp	r5, #2
    5716:	d00a      	beq.n	572e <usb_d_ep_register_callback+0x36>
    5718:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    571a:	4b09      	ldr	r3, [pc, #36]	; (5740 <usb_d_ep_register_callback+0x48>)
    571c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5720:	6144      	str	r4, [r0, #20]
		break;
    5722:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5724:	4b06      	ldr	r3, [pc, #24]	; (5740 <usb_d_ep_register_callback+0x48>)
    5726:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    572a:	6184      	str	r4, [r0, #24]
		break;
    572c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    572e:	4b04      	ldr	r3, [pc, #16]	; (5740 <usb_d_ep_register_callback+0x48>)
    5730:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5734:	61c4      	str	r4, [r0, #28]
    5736:	bd38      	pop	{r3, r4, r5, pc}
    5738:	00005199 	.word	0x00005199
    573c:	000051dd 	.word	0x000051dd
    5740:	2000064c 	.word	0x2000064c

00005744 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5744:	b900      	cbnz	r0, 5748 <assert+0x4>
		__asm("BKPT #0");
    5746:	be00      	bkpt	0x0000
    5748:	4770      	bx	lr

0000574a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    574a:	6803      	ldr	r3, [r0, #0]
    574c:	b14b      	cbz	r3, 5762 <is_list_element+0x18>
		if (it == element) {
    574e:	428b      	cmp	r3, r1
    5750:	d009      	beq.n	5766 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	b11b      	cbz	r3, 575e <is_list_element+0x14>
		if (it == element) {
    5756:	4299      	cmp	r1, r3
    5758:	d1fb      	bne.n	5752 <is_list_element+0x8>
			return true;
    575a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    575c:	4770      	bx	lr
	return false;
    575e:	2000      	movs	r0, #0
    5760:	4770      	bx	lr
    5762:	2000      	movs	r0, #0
    5764:	4770      	bx	lr
			return true;
    5766:	2001      	movs	r0, #1
    5768:	4770      	bx	lr
	...

0000576c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    576c:	b538      	push	{r3, r4, r5, lr}
    576e:	4604      	mov	r4, r0
    5770:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5772:	4b06      	ldr	r3, [pc, #24]	; (578c <list_insert_as_head+0x20>)
    5774:	4798      	blx	r3
    5776:	f080 0001 	eor.w	r0, r0, #1
    577a:	2239      	movs	r2, #57	; 0x39
    577c:	4904      	ldr	r1, [pc, #16]	; (5790 <list_insert_as_head+0x24>)
    577e:	b2c0      	uxtb	r0, r0
    5780:	4b04      	ldr	r3, [pc, #16]	; (5794 <list_insert_as_head+0x28>)
    5782:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5784:	6823      	ldr	r3, [r4, #0]
    5786:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5788:	6025      	str	r5, [r4, #0]
    578a:	bd38      	pop	{r3, r4, r5, pc}
    578c:	0000574b 	.word	0x0000574b
    5790:	0000ccc8 	.word	0x0000ccc8
    5794:	00005745 	.word	0x00005745

00005798 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5798:	6803      	ldr	r3, [r0, #0]
    579a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    579c:	6001      	str	r1, [r0, #0]
    579e:	4770      	bx	lr

000057a0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	4605      	mov	r5, r0
    57a4:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    57a6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <list_insert_at_end+0x34>)
    57aa:	4798      	blx	r3
    57ac:	f080 0001 	eor.w	r0, r0, #1
    57b0:	224f      	movs	r2, #79	; 0x4f
    57b2:	4909      	ldr	r1, [pc, #36]	; (57d8 <list_insert_at_end+0x38>)
    57b4:	b2c0      	uxtb	r0, r0
    57b6:	4b09      	ldr	r3, [pc, #36]	; (57dc <list_insert_at_end+0x3c>)
    57b8:	4798      	blx	r3

	if (!list->head) {
    57ba:	682b      	ldr	r3, [r5, #0]
    57bc:	b91b      	cbnz	r3, 57c6 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    57be:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    57c0:	6033      	str	r3, [r6, #0]
		return;
    57c2:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    57c4:	461c      	mov	r4, r3
	while (it->next) {
    57c6:	6823      	ldr	r3, [r4, #0]
    57c8:	2b00      	cmp	r3, #0
    57ca:	d1fb      	bne.n	57c4 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    57cc:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    57ce:	6033      	str	r3, [r6, #0]
    57d0:	bd70      	pop	{r4, r5, r6, pc}
    57d2:	bf00      	nop
    57d4:	0000574b 	.word	0x0000574b
    57d8:	0000ccc8 	.word	0x0000ccc8
    57dc:	00005745 	.word	0x00005745

000057e0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    57e0:	6803      	ldr	r3, [r0, #0]
    57e2:	b10b      	cbz	r3, 57e8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    57e4:	681a      	ldr	r2, [r3, #0]
    57e6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    57e8:	4618      	mov	r0, r3
    57ea:	4770      	bx	lr

000057ec <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	460e      	mov	r6, r1
    57f0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    57f2:	4604      	mov	r4, r0
    57f4:	b178      	cbz	r0, 5816 <ringbuffer_init+0x2a>
    57f6:	b181      	cbz	r1, 581a <ringbuffer_init+0x2e>
    57f8:	b1a2      	cbz	r2, 5824 <ringbuffer_init+0x38>
    57fa:	2001      	movs	r0, #1
    57fc:	2228      	movs	r2, #40	; 0x28
    57fe:	490d      	ldr	r1, [pc, #52]	; (5834 <ringbuffer_init+0x48>)
    5800:	4b0d      	ldr	r3, [pc, #52]	; (5838 <ringbuffer_init+0x4c>)
    5802:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5804:	1e6b      	subs	r3, r5, #1
    5806:	421d      	tst	r5, r3
    5808:	d109      	bne.n	581e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    580a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    580c:	2000      	movs	r0, #0
    580e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5810:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5812:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5814:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5816:	2000      	movs	r0, #0
    5818:	e7f0      	b.n	57fc <ringbuffer_init+0x10>
    581a:	2000      	movs	r0, #0
    581c:	e7ee      	b.n	57fc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    581e:	f06f 000c 	mvn.w	r0, #12
    5822:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5824:	2228      	movs	r2, #40	; 0x28
    5826:	4903      	ldr	r1, [pc, #12]	; (5834 <ringbuffer_init+0x48>)
    5828:	2000      	movs	r0, #0
    582a:	4b03      	ldr	r3, [pc, #12]	; (5838 <ringbuffer_init+0x4c>)
    582c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    582e:	1e6b      	subs	r3, r5, #1
    5830:	e7eb      	b.n	580a <ringbuffer_init+0x1e>
    5832:	bf00      	nop
    5834:	0000cce8 	.word	0x0000cce8
    5838:	00005745 	.word	0x00005745

0000583c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    583c:	b538      	push	{r3, r4, r5, lr}
    583e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5840:	4604      	mov	r4, r0
    5842:	b1a0      	cbz	r0, 586e <ringbuffer_get+0x32>
    5844:	1c08      	adds	r0, r1, #0
    5846:	bf18      	it	ne
    5848:	2001      	movne	r0, #1
    584a:	2240      	movs	r2, #64	; 0x40
    584c:	490a      	ldr	r1, [pc, #40]	; (5878 <ringbuffer_get+0x3c>)
    584e:	4b0b      	ldr	r3, [pc, #44]	; (587c <ringbuffer_get+0x40>)
    5850:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5852:	68a3      	ldr	r3, [r4, #8]
    5854:	68e2      	ldr	r2, [r4, #12]
    5856:	429a      	cmp	r2, r3
    5858:	d00b      	beq.n	5872 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    585a:	6862      	ldr	r2, [r4, #4]
    585c:	4013      	ands	r3, r2
    585e:	6822      	ldr	r2, [r4, #0]
    5860:	5cd3      	ldrb	r3, [r2, r3]
    5862:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5864:	68a3      	ldr	r3, [r4, #8]
    5866:	3301      	adds	r3, #1
    5868:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    586a:	2000      	movs	r0, #0
    586c:	bd38      	pop	{r3, r4, r5, pc}
    586e:	2000      	movs	r0, #0
    5870:	e7eb      	b.n	584a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5872:	f06f 0009 	mvn.w	r0, #9
}
    5876:	bd38      	pop	{r3, r4, r5, pc}
    5878:	0000cce8 	.word	0x0000cce8
    587c:	00005745 	.word	0x00005745

00005880 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5880:	b538      	push	{r3, r4, r5, lr}
    5882:	460d      	mov	r5, r1
	ASSERT(rb);
    5884:	4604      	mov	r4, r0
    5886:	2251      	movs	r2, #81	; 0x51
    5888:	490b      	ldr	r1, [pc, #44]	; (58b8 <ringbuffer_put+0x38>)
    588a:	3000      	adds	r0, #0
    588c:	bf18      	it	ne
    588e:	2001      	movne	r0, #1
    5890:	4b0a      	ldr	r3, [pc, #40]	; (58bc <ringbuffer_put+0x3c>)
    5892:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5894:	68e3      	ldr	r3, [r4, #12]
    5896:	6862      	ldr	r2, [r4, #4]
    5898:	4013      	ands	r3, r2
    589a:	6822      	ldr	r2, [r4, #0]
    589c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    589e:	68e3      	ldr	r3, [r4, #12]
    58a0:	6861      	ldr	r1, [r4, #4]
    58a2:	68a2      	ldr	r2, [r4, #8]
    58a4:	1a9a      	subs	r2, r3, r2
    58a6:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    58a8:	bf84      	itt	hi
    58aa:	1a59      	subhi	r1, r3, r1
    58ac:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    58ae:	3301      	adds	r3, #1
    58b0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    58b2:	2000      	movs	r0, #0
    58b4:	bd38      	pop	{r3, r4, r5, pc}
    58b6:	bf00      	nop
    58b8:	0000cce8 	.word	0x0000cce8
    58bc:	00005745 	.word	0x00005745

000058c0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    58c0:	b510      	push	{r4, lr}
	ASSERT(rb);
    58c2:	4604      	mov	r4, r0
    58c4:	2267      	movs	r2, #103	; 0x67
    58c6:	4905      	ldr	r1, [pc, #20]	; (58dc <ringbuffer_num+0x1c>)
    58c8:	3000      	adds	r0, #0
    58ca:	bf18      	it	ne
    58cc:	2001      	movne	r0, #1
    58ce:	4b04      	ldr	r3, [pc, #16]	; (58e0 <ringbuffer_num+0x20>)
    58d0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    58d2:	68e0      	ldr	r0, [r4, #12]
    58d4:	68a3      	ldr	r3, [r4, #8]
}
    58d6:	1ac0      	subs	r0, r0, r3
    58d8:	bd10      	pop	{r4, pc}
    58da:	bf00      	nop
    58dc:	0000cce8 	.word	0x0000cce8
    58e0:	00005745 	.word	0x00005745

000058e4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    58e4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    58e6:	4a06      	ldr	r2, [pc, #24]	; (5900 <_sbrk+0x1c>)
    58e8:	6812      	ldr	r2, [r2, #0]
    58ea:	b122      	cbz	r2, 58f6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    58ec:	4a04      	ldr	r2, [pc, #16]	; (5900 <_sbrk+0x1c>)
    58ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    58f0:	4403      	add	r3, r0
    58f2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    58f4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    58f6:	4903      	ldr	r1, [pc, #12]	; (5904 <_sbrk+0x20>)
    58f8:	4a01      	ldr	r2, [pc, #4]	; (5900 <_sbrk+0x1c>)
    58fa:	6011      	str	r1, [r2, #0]
    58fc:	e7f6      	b.n	58ec <_sbrk+0x8>
    58fe:	bf00      	nop
    5900:	200007ec 	.word	0x200007ec
    5904:	20013d60 	.word	0x20013d60

00005908 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5908:	f04f 30ff 	mov.w	r0, #4294967295
    590c:	4770      	bx	lr

0000590e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    590e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5912:	604b      	str	r3, [r1, #4]

	return 0;
}
    5914:	2000      	movs	r0, #0
    5916:	4770      	bx	lr

00005918 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5918:	2001      	movs	r0, #1
    591a:	4770      	bx	lr

0000591c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    591c:	2000      	movs	r0, #0
    591e:	4770      	bx	lr

00005920 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5920:	6940      	ldr	r0, [r0, #20]
    5922:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5926:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    592a:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    592c:	0040      	lsls	r0, r0, #1
    592e:	3076      	adds	r0, #118	; 0x76
}
    5930:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5934:	4770      	bx	lr
	...

00005938 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5938:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    593a:	f013 0f01 	tst.w	r3, #1
    593e:	d11b      	bne.n	5978 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5940:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5942:	f013 0f03 	tst.w	r3, #3
    5946:	d1fb      	bne.n	5940 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5948:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    594a:	f013 0f02 	tst.w	r3, #2
    594e:	d00d      	beq.n	596c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5950:	8803      	ldrh	r3, [r0, #0]
    5952:	f023 0302 	bic.w	r3, r3, #2
    5956:	041b      	lsls	r3, r3, #16
    5958:	0c1b      	lsrs	r3, r3, #16
    595a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    595c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    595e:	f013 0f03 	tst.w	r3, #3
    5962:	d1fb      	bne.n	595c <_adc_init+0x24>
    5964:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5966:	f013 0f02 	tst.w	r3, #2
    596a:	d1fb      	bne.n	5964 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    596c:	2301      	movs	r3, #1
    596e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5970:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5972:	f013 0f03 	tst.w	r3, #3
    5976:	d1fb      	bne.n	5970 <_adc_init+0x38>
    5978:	6b03      	ldr	r3, [r0, #48]	; 0x30
    597a:	f013 0f01 	tst.w	r3, #1
    597e:	d1fb      	bne.n	5978 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5980:	2316      	movs	r3, #22
    5982:	4a37      	ldr	r2, [pc, #220]	; (5a60 <_adc_init+0x128>)
    5984:	fb03 2301 	mla	r3, r3, r1, r2
    5988:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    598a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    598c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5992:	2b00      	cmp	r3, #0
    5994:	d1fa      	bne.n	598c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5996:	2316      	movs	r3, #22
    5998:	4a31      	ldr	r2, [pc, #196]	; (5a60 <_adc_init+0x128>)
    599a:	fb03 2301 	mla	r3, r3, r1, r2
    599e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    59a0:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    59a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    59a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    59a8:	2b00      	cmp	r3, #0
    59aa:	d1fa      	bne.n	59a2 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    59ac:	2316      	movs	r3, #22
    59ae:	4a2c      	ldr	r2, [pc, #176]	; (5a60 <_adc_init+0x128>)
    59b0:	fb03 2301 	mla	r3, r3, r1, r2
    59b4:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    59b6:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    59b8:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    59ba:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    59bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    59be:	f3c3 030b 	ubfx	r3, r3, #0, #12
    59c2:	2b00      	cmp	r3, #0
    59c4:	d1fa      	bne.n	59bc <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    59c6:	2316      	movs	r3, #22
    59c8:	4a25      	ldr	r2, [pc, #148]	; (5a60 <_adc_init+0x128>)
    59ca:	fb03 2301 	mla	r3, r3, r1, r2
    59ce:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    59d0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    59d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    59d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    59d8:	2b00      	cmp	r3, #0
    59da:	d1fa      	bne.n	59d2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    59dc:	2316      	movs	r3, #22
    59de:	4a20      	ldr	r2, [pc, #128]	; (5a60 <_adc_init+0x128>)
    59e0:	fb03 2301 	mla	r3, r3, r1, r2
    59e4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    59e6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    59e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    59ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    59ee:	2b00      	cmp	r3, #0
    59f0:	d1fa      	bne.n	59e8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    59f2:	2316      	movs	r3, #22
    59f4:	4a1a      	ldr	r2, [pc, #104]	; (5a60 <_adc_init+0x128>)
    59f6:	fb03 2301 	mla	r3, r3, r1, r2
    59fa:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    59fc:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    59fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5a00:	f013 0f80 	tst.w	r3, #128	; 0x80
    5a04:	d1fb      	bne.n	59fe <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5a06:	2316      	movs	r3, #22
    5a08:	4a15      	ldr	r2, [pc, #84]	; (5a60 <_adc_init+0x128>)
    5a0a:	fb03 2301 	mla	r3, r3, r1, r2
    5a0e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5a10:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5a12:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5a14:	f413 7f80 	tst.w	r3, #256	; 0x100
    5a18:	d1fb      	bne.n	5a12 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5a1a:	2316      	movs	r3, #22
    5a1c:	4a10      	ldr	r2, [pc, #64]	; (5a60 <_adc_init+0x128>)
    5a1e:	fb03 2301 	mla	r3, r3, r1, r2
    5a22:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5a24:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5a26:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5a28:	f413 7f00 	tst.w	r3, #512	; 0x200
    5a2c:	d1fb      	bne.n	5a26 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5a2e:	2316      	movs	r3, #22
    5a30:	4a0b      	ldr	r2, [pc, #44]	; (5a60 <_adc_init+0x128>)
    5a32:	fb03 2301 	mla	r3, r3, r1, r2
    5a36:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5a38:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5a3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5a3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5a40:	d1fb      	bne.n	5a3a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5a42:	2216      	movs	r2, #22
    5a44:	4b06      	ldr	r3, [pc, #24]	; (5a60 <_adc_init+0x128>)
    5a46:	fb02 3101 	mla	r1, r2, r1, r3
    5a4a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5a4c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5a4e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5a50:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5a52:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5a54:	f013 0f03 	tst.w	r3, #3
    5a58:	d1fb      	bne.n	5a52 <_adc_init+0x11a>

	return ERR_NONE;
}
    5a5a:	2000      	movs	r0, #0
    5a5c:	4770      	bx	lr
    5a5e:	bf00      	nop
    5a60:	0000cd0c 	.word	0x0000cd0c

00005a64 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5a64:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5a66:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5a68:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5a6c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5a70:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5a72:	f013 0f01 	tst.w	r3, #1
    5a76:	d106      	bne.n	5a86 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5a78:	f013 0f02 	tst.w	r3, #2
    5a7c:	d10d      	bne.n	5a9a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5a7e:	f013 0f04 	tst.w	r3, #4
    5a82:	d111      	bne.n	5aa8 <_adc_interrupt_handler+0x44>
    5a84:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5a86:	2301      	movs	r3, #1
    5a88:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5a8c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5a90:	6883      	ldr	r3, [r0, #8]
    5a92:	b292      	uxth	r2, r2
    5a94:	2100      	movs	r1, #0
    5a96:	4798      	blx	r3
    5a98:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5a9a:	2302      	movs	r3, #2
    5a9c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5aa0:	6843      	ldr	r3, [r0, #4]
    5aa2:	2100      	movs	r1, #0
    5aa4:	4798      	blx	r3
    5aa6:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5aa8:	2304      	movs	r3, #4
    5aaa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5aae:	6803      	ldr	r3, [r0, #0]
    5ab0:	2100      	movs	r1, #0
    5ab2:	4798      	blx	r3
	}
}
    5ab4:	e7e6      	b.n	5a84 <_adc_interrupt_handler+0x20>
	...

00005ab8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5ab8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5abc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5ac0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    5ac4:	b148      	cbz	r0, 5ada <_adc_get_regs+0x22>
    5ac6:	2801      	cmp	r0, #1
    5ac8:	d009      	beq.n	5ade <_adc_get_regs+0x26>
{
    5aca:	b508      	push	{r3, lr}
	ASSERT(false);
    5acc:	228c      	movs	r2, #140	; 0x8c
    5ace:	4905      	ldr	r1, [pc, #20]	; (5ae4 <_adc_get_regs+0x2c>)
    5ad0:	2000      	movs	r0, #0
    5ad2:	4b05      	ldr	r3, [pc, #20]	; (5ae8 <_adc_get_regs+0x30>)
    5ad4:	4798      	blx	r3
	return 0;
    5ad6:	2000      	movs	r0, #0
    5ad8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    5ada:	2000      	movs	r0, #0
    5adc:	4770      	bx	lr
    5ade:	2001      	movs	r0, #1
    5ae0:	4770      	bx	lr
    5ae2:	bf00      	nop
    5ae4:	0000cd38 	.word	0x0000cd38
    5ae8:	00005745 	.word	0x00005745

00005aec <_adc_async_init>:
{
    5aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5af0:	460c      	mov	r4, r1
	ASSERT(device);
    5af2:	4605      	mov	r5, r0
    5af4:	22e6      	movs	r2, #230	; 0xe6
    5af6:	493b      	ldr	r1, [pc, #236]	; (5be4 <_adc_async_init+0xf8>)
    5af8:	3000      	adds	r0, #0
    5afa:	bf18      	it	ne
    5afc:	2001      	movne	r0, #1
    5afe:	4b3a      	ldr	r3, [pc, #232]	; (5be8 <_adc_async_init+0xfc>)
    5b00:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5b02:	4620      	mov	r0, r4
    5b04:	4b39      	ldr	r3, [pc, #228]	; (5bec <_adc_async_init+0x100>)
    5b06:	4798      	blx	r3
    5b08:	4601      	mov	r1, r0
    5b0a:	4620      	mov	r0, r4
    5b0c:	4b38      	ldr	r3, [pc, #224]	; (5bf0 <_adc_async_init+0x104>)
    5b0e:	4798      	blx	r3
	if (init_status) {
    5b10:	4606      	mov	r6, r0
    5b12:	b110      	cbz	r0, 5b1a <_adc_async_init+0x2e>
}
    5b14:	4630      	mov	r0, r6
    5b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5b1a:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5b1c:	4b35      	ldr	r3, [pc, #212]	; (5bf4 <_adc_async_init+0x108>)
    5b1e:	429c      	cmp	r4, r3
    5b20:	d05c      	beq.n	5bdc <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5b22:	4b35      	ldr	r3, [pc, #212]	; (5bf8 <_adc_async_init+0x10c>)
    5b24:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5b26:	bf04      	itt	eq
    5b28:	4b34      	ldreq	r3, [pc, #208]	; (5bfc <_adc_async_init+0x110>)
    5b2a:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5b2c:	4628      	mov	r0, r5
    5b2e:	4f34      	ldr	r7, [pc, #208]	; (5c00 <_adc_async_init+0x114>)
    5b30:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b32:	0943      	lsrs	r3, r0, #5
    5b34:	f000 001f 	and.w	r0, r0, #31
    5b38:	2401      	movs	r4, #1
    5b3a:	fa04 f000 	lsl.w	r0, r4, r0
    5b3e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5c04 <_adc_async_init+0x118>
    5b42:	3320      	adds	r3, #32
    5b44:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b4c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5b50:	4628      	mov	r0, r5
    5b52:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b54:	0943      	lsrs	r3, r0, #5
    5b56:	f000 001f 	and.w	r0, r0, #31
    5b5a:	fa04 f000 	lsl.w	r0, r4, r0
    5b5e:	3360      	adds	r3, #96	; 0x60
    5b60:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5b64:	4628      	mov	r0, r5
    5b66:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b68:	0943      	lsrs	r3, r0, #5
    5b6a:	f000 001f 	and.w	r0, r0, #31
    5b6e:	4084      	lsls	r4, r0
    5b70:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5b74:	4628      	mov	r0, r5
    5b76:	47b8      	blx	r7
    5b78:	3001      	adds	r0, #1
    5b7a:	b280      	uxth	r0, r0
    5b7c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5b7e:	2b00      	cmp	r3, #0
    5b80:	dbc8      	blt.n	5b14 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b82:	095b      	lsrs	r3, r3, #5
    5b84:	f000 001f 	and.w	r0, r0, #31
    5b88:	2201      	movs	r2, #1
    5b8a:	fa02 f000 	lsl.w	r0, r2, r0
    5b8e:	3320      	adds	r3, #32
    5b90:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b98:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5b9c:	4628      	mov	r0, r5
    5b9e:	47b8      	blx	r7
    5ba0:	3001      	adds	r0, #1
    5ba2:	b280      	uxth	r0, r0
    5ba4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	dbb4      	blt.n	5b14 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5baa:	095b      	lsrs	r3, r3, #5
    5bac:	f000 001f 	and.w	r0, r0, #31
    5bb0:	2201      	movs	r2, #1
    5bb2:	fa02 f000 	lsl.w	r0, r2, r0
    5bb6:	3360      	adds	r3, #96	; 0x60
    5bb8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5bbc:	4628      	mov	r0, r5
    5bbe:	47b8      	blx	r7
    5bc0:	3001      	adds	r0, #1
    5bc2:	b280      	uxth	r0, r0
    5bc4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	dba4      	blt.n	5b14 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5bca:	095b      	lsrs	r3, r3, #5
    5bcc:	f000 001f 	and.w	r0, r0, #31
    5bd0:	2201      	movs	r2, #1
    5bd2:	fa02 f000 	lsl.w	r0, r2, r0
    5bd6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5bda:	e79b      	b.n	5b14 <_adc_async_init+0x28>
		_adc0_dev = dev;
    5bdc:	4b07      	ldr	r3, [pc, #28]	; (5bfc <_adc_async_init+0x110>)
    5bde:	601d      	str	r5, [r3, #0]
    5be0:	e7a4      	b.n	5b2c <_adc_async_init+0x40>
    5be2:	bf00      	nop
    5be4:	0000cd38 	.word	0x0000cd38
    5be8:	00005745 	.word	0x00005745
    5bec:	00005ab9 	.word	0x00005ab9
    5bf0:	00005939 	.word	0x00005939
    5bf4:	43001c00 	.word	0x43001c00
    5bf8:	43002000 	.word	0x43002000
    5bfc:	200007f0 	.word	0x200007f0
    5c00:	00005921 	.word	0x00005921
    5c04:	e000e100 	.word	0xe000e100

00005c08 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5c08:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5c0a:	8813      	ldrh	r3, [r2, #0]
    5c0c:	b29b      	uxth	r3, r3
    5c0e:	f043 0302 	orr.w	r3, r3, #2
    5c12:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c14:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5c16:	f013 0f03 	tst.w	r3, #3
    5c1a:	d1fb      	bne.n	5c14 <_adc_async_enable_channel+0xc>
}
    5c1c:	4770      	bx	lr

00005c1e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5c1e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5c20:	88db      	ldrh	r3, [r3, #6]
    5c22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5c26:	2b03      	cmp	r3, #3
}
    5c28:	bf0c      	ite	eq
    5c2a:	2001      	moveq	r0, #1
    5c2c:	2002      	movne	r0, #2
    5c2e:	4770      	bx	lr

00005c30 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5c30:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5c32:	7d13      	ldrb	r3, [r2, #20]
    5c34:	f043 0302 	orr.w	r3, r3, #2
    5c38:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5c40:	2b00      	cmp	r3, #0
    5c42:	d1fa      	bne.n	5c3a <_adc_async_convert+0xa>
}
    5c44:	4770      	bx	lr

00005c46 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5c46:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5c48:	2a01      	cmp	r2, #1
    5c4a:	d007      	beq.n	5c5c <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5c4c:	2a02      	cmp	r2, #2
    5c4e:	d00e      	beq.n	5c6e <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5c50:	b91a      	cbnz	r2, 5c5a <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5c52:	b1ab      	cbz	r3, 5c80 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5c54:	2301      	movs	r3, #1
    5c56:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5c5a:	4770      	bx	lr
	if (value == 0x0) {
    5c5c:	b91b      	cbnz	r3, 5c66 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5c5e:	2304      	movs	r3, #4
    5c60:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5c64:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5c66:	2304      	movs	r3, #4
    5c68:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5c6c:	4770      	bx	lr
	if (value == 0x0) {
    5c6e:	b91b      	cbnz	r3, 5c78 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5c70:	2302      	movs	r3, #2
    5c72:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5c76:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5c78:	2302      	movs	r3, #2
    5c7a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5c7e:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5c80:	2301      	movs	r3, #1
    5c82:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5c86:	4770      	bx	lr

00005c88 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5c88:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5c8a:	4b02      	ldr	r3, [pc, #8]	; (5c94 <ADC0_0_Handler+0xc>)
    5c8c:	6818      	ldr	r0, [r3, #0]
    5c8e:	4b02      	ldr	r3, [pc, #8]	; (5c98 <ADC0_0_Handler+0x10>)
    5c90:	4798      	blx	r3
    5c92:	bd08      	pop	{r3, pc}
    5c94:	200007f0 	.word	0x200007f0
    5c98:	00005a65 	.word	0x00005a65

00005c9c <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5c9c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5c9e:	4b02      	ldr	r3, [pc, #8]	; (5ca8 <ADC0_1_Handler+0xc>)
    5ca0:	6818      	ldr	r0, [r3, #0]
    5ca2:	4b02      	ldr	r3, [pc, #8]	; (5cac <ADC0_1_Handler+0x10>)
    5ca4:	4798      	blx	r3
    5ca6:	bd08      	pop	{r3, pc}
    5ca8:	200007f0 	.word	0x200007f0
    5cac:	00005a65 	.word	0x00005a65

00005cb0 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5cb0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5cb2:	4b02      	ldr	r3, [pc, #8]	; (5cbc <ADC1_0_Handler+0xc>)
    5cb4:	6858      	ldr	r0, [r3, #4]
    5cb6:	4b02      	ldr	r3, [pc, #8]	; (5cc0 <ADC1_0_Handler+0x10>)
    5cb8:	4798      	blx	r3
    5cba:	bd08      	pop	{r3, pc}
    5cbc:	200007f0 	.word	0x200007f0
    5cc0:	00005a65 	.word	0x00005a65

00005cc4 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    5cc4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5cc6:	4b02      	ldr	r3, [pc, #8]	; (5cd0 <ADC1_1_Handler+0xc>)
    5cc8:	6858      	ldr	r0, [r3, #4]
    5cca:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <ADC1_1_Handler+0x10>)
    5ccc:	4798      	blx	r3
    5cce:	bd08      	pop	{r3, pc}
    5cd0:	200007f0 	.word	0x200007f0
    5cd4:	00005a65 	.word	0x00005a65

00005cd8 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cd8:	0943      	lsrs	r3, r0, #5
    5cda:	f000 001f 	and.w	r0, r0, #31
    5cde:	2201      	movs	r2, #1
    5ce0:	fa02 f000 	lsl.w	r0, r2, r0
    5ce4:	3340      	adds	r3, #64	; 0x40
    5ce6:	4a02      	ldr	r2, [pc, #8]	; (5cf0 <_irq_set+0x18>)
    5ce8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5cec:	4770      	bx	lr
    5cee:	bf00      	nop
    5cf0:	e000e100 	.word	0xe000e100

00005cf4 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5cf4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5cf8:	00c0      	lsls	r0, r0, #3
    5cfa:	4770      	bx	lr

00005cfc <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5cfc:	4b01      	ldr	r3, [pc, #4]	; (5d04 <_get_cycles_for_ms+0x8>)
    5cfe:	fb03 f000 	mul.w	r0, r3, r0
    5d02:	4770      	bx	lr
    5d04:	0001d4c0 	.word	0x0001d4c0

00005d08 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5d08:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5d0a:	4a0e      	ldr	r2, [pc, #56]	; (5d44 <_init_chip+0x3c>)
    5d0c:	8813      	ldrh	r3, [r2, #0]
    5d0e:	b29b      	uxth	r3, r3
    5d10:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5d14:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    5d16:	4b0c      	ldr	r3, [pc, #48]	; (5d48 <_init_chip+0x40>)
    5d18:	4798      	blx	r3
	_oscctrl_init_sources();
    5d1a:	4b0c      	ldr	r3, [pc, #48]	; (5d4c <_init_chip+0x44>)
    5d1c:	4798      	blx	r3
	_mclk_init();
    5d1e:	4b0c      	ldr	r3, [pc, #48]	; (5d50 <_init_chip+0x48>)
    5d20:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5d22:	2004      	movs	r0, #4
    5d24:	4c0b      	ldr	r4, [pc, #44]	; (5d54 <_init_chip+0x4c>)
    5d26:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    5d28:	4b0b      	ldr	r3, [pc, #44]	; (5d58 <_init_chip+0x50>)
    5d2a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5d2c:	f640 70fb 	movw	r0, #4091	; 0xffb
    5d30:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5d32:	4a0a      	ldr	r2, [pc, #40]	; (5d5c <_init_chip+0x54>)
    5d34:	6913      	ldr	r3, [r2, #16]
    5d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d3a:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5d3c:	4b08      	ldr	r3, [pc, #32]	; (5d60 <_init_chip+0x58>)
    5d3e:	4798      	blx	r3
    5d40:	bd10      	pop	{r4, pc}
    5d42:	bf00      	nop
    5d44:	41004000 	.word	0x41004000
    5d48:	000061e5 	.word	0x000061e5
    5d4c:	000061f9 	.word	0x000061f9
    5d50:	0000610d 	.word	0x0000610d
    5d54:	00006095 	.word	0x00006095
    5d58:	000061fd 	.word	0x000061fd
    5d5c:	40000800 	.word	0x40000800
    5d60:	00005dd9 	.word	0x00005dd9

00005d64 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5d64:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    5d66:	4a1a      	ldr	r2, [pc, #104]	; (5dd0 <_dmac_handler+0x6c>)
    5d68:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    5d6a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5d6e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5d72:	4818      	ldr	r0, [pc, #96]	; (5dd4 <_dmac_handler+0x70>)
    5d74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    5d78:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5d7c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5d80:	f012 0f01 	tst.w	r2, #1
    5d84:	d10a      	bne.n	5d9c <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    5d86:	011a      	lsls	r2, r3, #4
    5d88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5d8c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5d90:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5d94:	f012 0f02 	tst.w	r2, #2
    5d98:	d10b      	bne.n	5db2 <_dmac_handler+0x4e>
    5d9a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5d9c:	011a      	lsls	r2, r3, #4
    5d9e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5da2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5da6:	2101      	movs	r1, #1
    5da8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    5dac:	6843      	ldr	r3, [r0, #4]
    5dae:	4798      	blx	r3
    5db0:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    5db2:	011a      	lsls	r2, r3, #4
    5db4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5db8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5dbc:	2102      	movs	r1, #2
    5dbe:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    5dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5dc6:	4a03      	ldr	r2, [pc, #12]	; (5dd4 <_dmac_handler+0x70>)
    5dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dcc:	4798      	blx	r3
	}
}
    5dce:	e7e4      	b.n	5d9a <_dmac_handler+0x36>
    5dd0:	4100a000 	.word	0x4100a000
    5dd4:	200007f8 	.word	0x200007f8

00005dd8 <_dma_init>:
{
    5dd8:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    5dda:	4a32      	ldr	r2, [pc, #200]	; (5ea4 <_dma_init+0xcc>)
    5ddc:	8813      	ldrh	r3, [r2, #0]
    5dde:	f023 0302 	bic.w	r3, r3, #2
    5de2:	041b      	lsls	r3, r3, #16
    5de4:	0c1b      	lsrs	r3, r3, #16
    5de6:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    5de8:	8853      	ldrh	r3, [r2, #2]
    5dea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    5dee:	041b      	lsls	r3, r3, #16
    5df0:	0c1b      	lsrs	r3, r3, #16
    5df2:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    5df4:	8813      	ldrh	r3, [r2, #0]
    5df6:	b29b      	uxth	r3, r3
    5df8:	f043 0301 	orr.w	r3, r3, #1
    5dfc:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    5dfe:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    5e00:	f013 0f01 	tst.w	r3, #1
    5e04:	d1fb      	bne.n	5dfe <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    5e06:	4b27      	ldr	r3, [pc, #156]	; (5ea4 <_dma_init+0xcc>)
    5e08:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    5e0c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    5e0e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    5e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    5e14:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    5e18:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    5e1a:	2100      	movs	r1, #0
    5e1c:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    5e1e:	4a22      	ldr	r2, [pc, #136]	; (5ea8 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    5e20:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    5e22:	4a22      	ldr	r2, [pc, #136]	; (5eac <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    5e24:	639a      	str	r2, [r3, #56]	; 0x38
    5e26:	4b22      	ldr	r3, [pc, #136]	; (5eb0 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5e28:	4c1f      	ldr	r4, [pc, #124]	; (5ea8 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5e2a:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    5e2c:	681d      	ldr	r5, [r3, #0]
    5e2e:	0108      	lsls	r0, r1, #4
    5e30:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5e34:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    5e38:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    5e3a:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    5e3c:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    5e40:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    5e42:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    5e46:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5e48:	1822      	adds	r2, r4, r0
    5e4a:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5e4c:	60d6      	str	r6, [r2, #12]
    5e4e:	3101      	adds	r1, #1
    5e50:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    5e52:	2920      	cmp	r1, #32
    5e54:	d1ea      	bne.n	5e2c <_dma_init+0x54>
    5e56:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e58:	2001      	movs	r0, #1
    5e5a:	4916      	ldr	r1, [pc, #88]	; (5eb4 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    5e5c:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    5e5e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5e62:	d00b      	beq.n	5e7c <_dma_init+0xa4>
    5e64:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    5e66:	2b24      	cmp	r3, #36	; 0x24
    5e68:	d1f8      	bne.n	5e5c <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    5e6a:	4a0e      	ldr	r2, [pc, #56]	; (5ea4 <_dma_init+0xcc>)
    5e6c:	8813      	ldrh	r3, [r2, #0]
    5e6e:	b29b      	uxth	r3, r3
    5e70:	f043 0302 	orr.w	r3, r3, #2
    5e74:	8013      	strh	r3, [r2, #0]
}
    5e76:	2000      	movs	r0, #0
    5e78:	bc70      	pop	{r4, r5, r6}
    5e7a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e7c:	095c      	lsrs	r4, r3, #5
    5e7e:	f002 021f 	and.w	r2, r2, #31
    5e82:	fa00 f202 	lsl.w	r2, r0, r2
    5e86:	f104 0520 	add.w	r5, r4, #32
    5e8a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5e8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e92:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e96:	f104 0560 	add.w	r5, r4, #96	; 0x60
    5e9a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e9e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    5ea2:	e7df      	b.n	5e64 <_dma_init+0x8c>
    5ea4:	4100a000 	.word	0x4100a000
    5ea8:	20003940 	.word	0x20003940
    5eac:	20003b40 	.word	0x20003b40
    5eb0:	0000cd50 	.word	0x0000cd50
    5eb4:	e000e100 	.word	0xe000e100

00005eb8 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    5eb8:	b991      	cbnz	r1, 5ee0 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    5eba:	b942      	cbnz	r2, 5ece <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    5ebc:	0100      	lsls	r0, r0, #4
    5ebe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5ec2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5ec6:	2302      	movs	r3, #2
    5ec8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    5ecc:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    5ece:	0100      	lsls	r0, r0, #4
    5ed0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5ed4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5ed8:	2302      	movs	r3, #2
    5eda:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    5ede:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    5ee0:	2901      	cmp	r1, #1
    5ee2:	d000      	beq.n	5ee6 <_dma_set_irq_state+0x2e>
    5ee4:	4770      	bx	lr
	if (value == 0x0) {
    5ee6:	b142      	cbz	r2, 5efa <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    5ee8:	0100      	lsls	r0, r0, #4
    5eea:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5eee:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5ef2:	2301      	movs	r3, #1
    5ef4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    5ef8:	e7f4      	b.n	5ee4 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    5efa:	0100      	lsls	r0, r0, #4
    5efc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5f00:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5f04:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    5f08:	4770      	bx	lr
	...

00005f0c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5f0c:	4b02      	ldr	r3, [pc, #8]	; (5f18 <_dma_set_destination_address+0xc>)
    5f0e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5f12:	6081      	str	r1, [r0, #8]
}
    5f14:	2000      	movs	r0, #0
    5f16:	4770      	bx	lr
    5f18:	20003940 	.word	0x20003940

00005f1c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5f1c:	4b02      	ldr	r3, [pc, #8]	; (5f28 <_dma_set_source_address+0xc>)
    5f1e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5f22:	6041      	str	r1, [r0, #4]
}
    5f24:	2000      	movs	r0, #0
    5f26:	4770      	bx	lr
    5f28:	20003940 	.word	0x20003940

00005f2c <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5f2c:	4a05      	ldr	r2, [pc, #20]	; (5f44 <_dma_srcinc_enable+0x18>)
    5f2e:	0100      	lsls	r0, r0, #4
    5f30:	5a13      	ldrh	r3, [r2, r0]
    5f32:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    5f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    5f38:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    5f3c:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    5f3e:	5211      	strh	r1, [r2, r0]
}
    5f40:	2000      	movs	r0, #0
    5f42:	4770      	bx	lr
    5f44:	20003940 	.word	0x20003940

00005f48 <_dma_set_data_amount>:
{
    5f48:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    5f4a:	4c14      	ldr	r4, [pc, #80]	; (5f9c <_dma_set_data_amount+0x54>)
    5f4c:	0102      	lsls	r2, r0, #4
    5f4e:	18a3      	adds	r3, r4, r2
    5f50:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5f52:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    5f54:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5f58:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    5f5a:	f412 6f00 	tst.w	r2, #2048	; 0x800
    5f5e:	d006      	beq.n	5f6e <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5f60:	fa01 f403 	lsl.w	r4, r1, r3
    5f64:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5f66:	4a0d      	ldr	r2, [pc, #52]	; (5f9c <_dma_set_data_amount+0x54>)
    5f68:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    5f6c:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    5f6e:	4c0b      	ldr	r4, [pc, #44]	; (5f9c <_dma_set_data_amount+0x54>)
    5f70:	0102      	lsls	r2, r0, #4
    5f72:	18a5      	adds	r5, r4, r2
    5f74:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5f76:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    5f78:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5f7c:	d005      	beq.n	5f8a <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5f7e:	fa01 f303 	lsl.w	r3, r1, r3
    5f82:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5f84:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    5f88:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    5f8a:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    5f8c:	4b03      	ldr	r3, [pc, #12]	; (5f9c <_dma_set_data_amount+0x54>)
    5f8e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5f92:	8041      	strh	r1, [r0, #2]
}
    5f94:	2000      	movs	r0, #0
    5f96:	bc30      	pop	{r4, r5}
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	20003940 	.word	0x20003940

00005fa0 <_dma_enable_transaction>:
{
    5fa0:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    5fa2:	4c0d      	ldr	r4, [pc, #52]	; (5fd8 <_dma_enable_transaction+0x38>)
    5fa4:	0103      	lsls	r3, r0, #4
    5fa6:	5ae2      	ldrh	r2, [r4, r3]
    5fa8:	b292      	uxth	r2, r2
    5faa:	f042 0201 	orr.w	r2, r2, #1
    5fae:	52e2      	strh	r2, [r4, r3]
    5fb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5fb4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    5fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5fba:	f042 0202 	orr.w	r2, r2, #2
    5fbe:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    5fc0:	b131      	cbz	r1, 5fd0 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    5fc2:	4a06      	ldr	r2, [pc, #24]	; (5fdc <_dma_enable_transaction+0x3c>)
    5fc4:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    5fc6:	2301      	movs	r3, #1
    5fc8:	fa03 f000 	lsl.w	r0, r3, r0
    5fcc:	4308      	orrs	r0, r1
    5fce:	6110      	str	r0, [r2, #16]
}
    5fd0:	2000      	movs	r0, #0
    5fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5fd6:	4770      	bx	lr
    5fd8:	20003940 	.word	0x20003940
    5fdc:	4100a000 	.word	0x4100a000

00005fe0 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    5fe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5fe4:	4b02      	ldr	r3, [pc, #8]	; (5ff0 <_dma_get_channel_resource+0x10>)
    5fe6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5fea:	6001      	str	r1, [r0, #0]
}
    5fec:	2000      	movs	r0, #0
    5fee:	4770      	bx	lr
    5ff0:	200007f8 	.word	0x200007f8

00005ff4 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    5ff4:	b508      	push	{r3, lr}
	_dmac_handler();
    5ff6:	4b01      	ldr	r3, [pc, #4]	; (5ffc <DMAC_0_Handler+0x8>)
    5ff8:	4798      	blx	r3
    5ffa:	bd08      	pop	{r3, pc}
    5ffc:	00005d65 	.word	0x00005d65

00006000 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6000:	b508      	push	{r3, lr}
	_dmac_handler();
    6002:	4b01      	ldr	r3, [pc, #4]	; (6008 <DMAC_1_Handler+0x8>)
    6004:	4798      	blx	r3
    6006:	bd08      	pop	{r3, pc}
    6008:	00005d65 	.word	0x00005d65

0000600c <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    600c:	b508      	push	{r3, lr}
	_dmac_handler();
    600e:	4b01      	ldr	r3, [pc, #4]	; (6014 <DMAC_2_Handler+0x8>)
    6010:	4798      	blx	r3
    6012:	bd08      	pop	{r3, pc}
    6014:	00005d65 	.word	0x00005d65

00006018 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6018:	b508      	push	{r3, lr}
	_dmac_handler();
    601a:	4b01      	ldr	r3, [pc, #4]	; (6020 <DMAC_3_Handler+0x8>)
    601c:	4798      	blx	r3
    601e:	bd08      	pop	{r3, pc}
    6020:	00005d65 	.word	0x00005d65

00006024 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6024:	b508      	push	{r3, lr}
	_dmac_handler();
    6026:	4b01      	ldr	r3, [pc, #4]	; (602c <DMAC_4_Handler+0x8>)
    6028:	4798      	blx	r3
    602a:	bd08      	pop	{r3, pc}
    602c:	00005d65 	.word	0x00005d65

00006030 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6030:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6032:	2000      	movs	r0, #0
    6034:	4770      	bx	lr
	...

00006038 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6038:	b430      	push	{r4, r5}
    603a:	4814      	ldr	r0, [pc, #80]	; (608c <_event_system_init+0x54>)
    603c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6040:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6042:	4c13      	ldr	r4, [pc, #76]	; (6090 <_event_system_init+0x58>)
    6044:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6046:	f813 1b01 	ldrb.w	r1, [r3], #1
    604a:	3248      	adds	r2, #72	; 0x48
    604c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6050:	42ab      	cmp	r3, r5
    6052:	d1f7      	bne.n	6044 <_event_system_init+0xc>
    6054:	480d      	ldr	r0, [pc, #52]	; (608c <_event_system_init+0x54>)
    6056:	f100 0442 	add.w	r4, r0, #66	; 0x42
    605a:	3080      	adds	r0, #128	; 0x80
    605c:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    605e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6062:	00ca      	lsls	r2, r1, #3
    6064:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6068:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    606c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    606e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6072:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6074:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6078:	43db      	mvns	r3, r3
    607a:	b2db      	uxtb	r3, r3
    607c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6080:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6082:	2920      	cmp	r1, #32
    6084:	d1eb      	bne.n	605e <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    6086:	2000      	movs	r0, #0
    6088:	bc30      	pop	{r4, r5}
    608a:	4770      	bx	lr
    608c:	0000ce50 	.word	0x0000ce50
    6090:	4100e000 	.word	0x4100e000

00006094 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6094:	f010 0f01 	tst.w	r0, #1
    6098:	d008      	beq.n	60ac <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    609a:	4a17      	ldr	r2, [pc, #92]	; (60f8 <_gclk_init_generators_by_fref+0x64>)
    609c:	4b17      	ldr	r3, [pc, #92]	; (60fc <_gclk_init_generators_by_fref+0x68>)
    609e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    60a0:	4619      	mov	r1, r3
    60a2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    60a6:	684b      	ldr	r3, [r1, #4]
    60a8:	4213      	tst	r3, r2
    60aa:	d1fc      	bne.n	60a6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    60ac:	f010 0f02 	tst.w	r0, #2
    60b0:	d008      	beq.n	60c4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    60b2:	4a13      	ldr	r2, [pc, #76]	; (6100 <_gclk_init_generators_by_fref+0x6c>)
    60b4:	4b11      	ldr	r3, [pc, #68]	; (60fc <_gclk_init_generators_by_fref+0x68>)
    60b6:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    60b8:	4619      	mov	r1, r3
    60ba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    60be:	684b      	ldr	r3, [r1, #4]
    60c0:	4213      	tst	r3, r2
    60c2:	d1fc      	bne.n	60be <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    60c4:	f010 0f04 	tst.w	r0, #4
    60c8:	d008      	beq.n	60dc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    60ca:	4a0e      	ldr	r2, [pc, #56]	; (6104 <_gclk_init_generators_by_fref+0x70>)
    60cc:	4b0b      	ldr	r3, [pc, #44]	; (60fc <_gclk_init_generators_by_fref+0x68>)
    60ce:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    60d0:	4619      	mov	r1, r3
    60d2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    60d6:	684b      	ldr	r3, [r1, #4]
    60d8:	4213      	tst	r3, r2
    60da:	d1fc      	bne.n	60d6 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    60dc:	f010 0f08 	tst.w	r0, #8
    60e0:	d008      	beq.n	60f4 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    60e2:	4a09      	ldr	r2, [pc, #36]	; (6108 <_gclk_init_generators_by_fref+0x74>)
    60e4:	4b05      	ldr	r3, [pc, #20]	; (60fc <_gclk_init_generators_by_fref+0x68>)
    60e6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    60e8:	4619      	mov	r1, r3
    60ea:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    60ee:	684b      	ldr	r3, [r1, #4]
    60f0:	4213      	tst	r3, r2
    60f2:	d1fc      	bne.n	60ee <_gclk_init_generators_by_fref+0x5a>
    60f4:	4770      	bx	lr
    60f6:	bf00      	nop
    60f8:	00010108 	.word	0x00010108
    60fc:	40001c00 	.word	0x40001c00
    6100:	00010106 	.word	0x00010106
    6104:	00100106 	.word	0x00100106
    6108:	00010104 	.word	0x00010104

0000610c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    610c:	2201      	movs	r2, #1
    610e:	4b01      	ldr	r3, [pc, #4]	; (6114 <_mclk_init+0x8>)
    6110:	715a      	strb	r2, [r3, #5]
    6112:	4770      	bx	lr
    6114:	40000800 	.word	0x40000800

00006118 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6118:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    611a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    611c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    611e:	f012 0f01 	tst.w	r2, #1
    6122:	d005      	beq.n	6130 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6124:	2201      	movs	r2, #1
    6126:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6128:	6803      	ldr	r3, [r0, #0]
    612a:	b153      	cbz	r3, 6142 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    612c:	4798      	blx	r3
    612e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6130:	8a1a      	ldrh	r2, [r3, #16]
    6132:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6134:	b12a      	cbz	r2, 6142 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    6136:	f240 225e 	movw	r2, #606	; 0x25e
    613a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    613c:	6843      	ldr	r3, [r0, #4]
    613e:	b103      	cbz	r3, 6142 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6140:	4798      	blx	r3
    6142:	bd08      	pop	{r3, pc}

00006144 <_flash_init>:
{
    6144:	b538      	push	{r3, r4, r5, lr}
    6146:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    6148:	4605      	mov	r5, r0
    614a:	b350      	cbz	r0, 61a2 <_flash_init+0x5e>
    614c:	4816      	ldr	r0, [pc, #88]	; (61a8 <_flash_init+0x64>)
    614e:	4281      	cmp	r1, r0
    6150:	bf14      	ite	ne
    6152:	2000      	movne	r0, #0
    6154:	2001      	moveq	r0, #1
    6156:	224b      	movs	r2, #75	; 0x4b
    6158:	4914      	ldr	r1, [pc, #80]	; (61ac <_flash_init+0x68>)
    615a:	4b15      	ldr	r3, [pc, #84]	; (61b0 <_flash_init+0x6c>)
    615c:	4798      	blx	r3
	device->hw = hw;
    615e:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6160:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    6162:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    6166:	049b      	lsls	r3, r3, #18
    6168:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    616a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    616c:	4b11      	ldr	r3, [pc, #68]	; (61b4 <_flash_init+0x70>)
    616e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6170:	4b11      	ldr	r3, [pc, #68]	; (61b8 <_flash_init+0x74>)
    6172:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    6176:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    617a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    617e:	f3bf 8f6f 	isb	sy
    6182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    618a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    618e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6192:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6196:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    619a:	6019      	str	r1, [r3, #0]
    619c:	601a      	str	r2, [r3, #0]
}
    619e:	2000      	movs	r0, #0
    61a0:	bd38      	pop	{r3, r4, r5, pc}
    61a2:	2000      	movs	r0, #0
    61a4:	e7d7      	b.n	6156 <_flash_init+0x12>
    61a6:	bf00      	nop
    61a8:	41004000 	.word	0x41004000
    61ac:	0000cf54 	.word	0x0000cf54
    61b0:	00005745 	.word	0x00005745
    61b4:	20000978 	.word	0x20000978
    61b8:	e000e100 	.word	0xe000e100

000061bc <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    61bc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    61be:	4b02      	ldr	r3, [pc, #8]	; (61c8 <NVMCTRL_0_Handler+0xc>)
    61c0:	6818      	ldr	r0, [r3, #0]
    61c2:	4b02      	ldr	r3, [pc, #8]	; (61cc <NVMCTRL_0_Handler+0x10>)
    61c4:	4798      	blx	r3
    61c6:	bd08      	pop	{r3, pc}
    61c8:	20000978 	.word	0x20000978
    61cc:	00006119 	.word	0x00006119

000061d0 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    61d0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    61d2:	4b02      	ldr	r3, [pc, #8]	; (61dc <NVMCTRL_1_Handler+0xc>)
    61d4:	6818      	ldr	r0, [r3, #0]
    61d6:	4b02      	ldr	r3, [pc, #8]	; (61e0 <NVMCTRL_1_Handler+0x10>)
    61d8:	4798      	blx	r3
    61da:	bd08      	pop	{r3, pc}
    61dc:	20000978 	.word	0x20000978
    61e0:	00006119 	.word	0x00006119

000061e4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    61e4:	4b03      	ldr	r3, [pc, #12]	; (61f4 <_osc32kctrl_init_sources+0x10>)
    61e6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    61e8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    61ec:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    61ee:	2201      	movs	r2, #1
    61f0:	741a      	strb	r2, [r3, #16]
    61f2:	4770      	bx	lr
    61f4:	40001400 	.word	0x40001400

000061f8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    61f8:	4770      	bx	lr
	...

000061fc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    61fc:	4a47      	ldr	r2, [pc, #284]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    61fe:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6200:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6204:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6208:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    620a:	4611      	mov	r1, r2
    620c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6210:	684b      	ldr	r3, [r1, #4]
    6212:	4213      	tst	r3, r2
    6214:	d1fc      	bne.n	6210 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6216:	4a41      	ldr	r2, [pc, #260]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    6218:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    621a:	f013 0f04 	tst.w	r3, #4
    621e:	d1fb      	bne.n	6218 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6220:	4b3f      	ldr	r3, [pc, #252]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    6222:	2200      	movs	r2, #0
    6224:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6226:	4a3f      	ldr	r2, [pc, #252]	; (6324 <_oscctrl_init_referenced_generators+0x128>)
    6228:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    622a:	461a      	mov	r2, r3
    622c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6230:	f013 0f10 	tst.w	r3, #16
    6234:	d1fa      	bne.n	622c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6236:	2200      	movs	r2, #0
    6238:	4b39      	ldr	r3, [pc, #228]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    623a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    623e:	461a      	mov	r2, r3
    6240:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6244:	f013 0f04 	tst.w	r3, #4
    6248:	d1fa      	bne.n	6240 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    624a:	2202      	movs	r2, #2
    624c:	4b34      	ldr	r3, [pc, #208]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    624e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6250:	461a      	mov	r2, r3
    6252:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6256:	f013 0f02 	tst.w	r3, #2
    625a:	d1fa      	bne.n	6252 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    625c:	4b30      	ldr	r3, [pc, #192]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    625e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6260:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6262:	461a      	mov	r2, r3
    6264:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6268:	f013 0f08 	tst.w	r3, #8
    626c:	d1fa      	bne.n	6264 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    626e:	2288      	movs	r2, #136	; 0x88
    6270:	4b2b      	ldr	r3, [pc, #172]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    6272:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6276:	461a      	mov	r2, r3
    6278:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    627c:	f013 0f04 	tst.w	r3, #4
    6280:	d1fa      	bne.n	6278 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6282:	2242      	movs	r2, #66	; 0x42
    6284:	4b25      	ldr	r3, [pc, #148]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    6286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    628a:	2227      	movs	r2, #39	; 0x27
    628c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    6290:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6292:	461a      	mov	r2, r3
    6294:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6296:	f013 0f06 	tst.w	r3, #6
    629a:	d1fb      	bne.n	6294 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    629c:	4b20      	ldr	r3, [pc, #128]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    629e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    62a2:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    62a4:	2202      	movs	r2, #2
    62a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    62aa:	461a      	mov	r2, r3
    62ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
    62ae:	f013 0f02 	tst.w	r3, #2
    62b2:	d1fb      	bne.n	62ac <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    62b4:	4b1a      	ldr	r3, [pc, #104]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    62b6:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    62ba:	f013 0f01 	tst.w	r3, #1
    62be:	d026      	beq.n	630e <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    62c0:	4a17      	ldr	r2, [pc, #92]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    62c2:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    62c4:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    62c8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    62cc:	d1f9      	bne.n	62c2 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    62ce:	4b14      	ldr	r3, [pc, #80]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    62d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    62d2:	f012 0f01 	tst.w	r2, #1
    62d6:	d103      	bne.n	62e0 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    62d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    62da:	f012 0f02 	tst.w	r2, #2
    62de:	d0f7      	beq.n	62d0 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    62e0:	4a0e      	ldr	r2, [pc, #56]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    62e2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    62e4:	2b00      	cmp	r3, #0
    62e6:	d1fc      	bne.n	62e2 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    62e8:	4a0c      	ldr	r2, [pc, #48]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    62ea:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    62ec:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    62f0:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    62f4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62f6:	4611      	mov	r1, r2
    62f8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62fc:	684b      	ldr	r3, [r1, #4]
    62fe:	4213      	tst	r3, r2
    6300:	d1fc      	bne.n	62fc <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6302:	4a06      	ldr	r2, [pc, #24]	; (631c <_oscctrl_init_referenced_generators+0x120>)
    6304:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6306:	f013 0f04 	tst.w	r3, #4
    630a:	d1fb      	bne.n	6304 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    630c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    630e:	4a04      	ldr	r2, [pc, #16]	; (6320 <_oscctrl_init_referenced_generators+0x124>)
    6310:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6312:	f413 7f80 	tst.w	r3, #256	; 0x100
    6316:	d0fb      	beq.n	6310 <_oscctrl_init_referenced_generators+0x114>
    6318:	e7d9      	b.n	62ce <_oscctrl_init_referenced_generators+0xd2>
    631a:	bf00      	nop
    631c:	40001c00 	.word	0x40001c00
    6320:	40001000 	.word	0x40001000
    6324:	04010000 	.word	0x04010000

00006328 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6328:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    632a:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    632c:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    632e:	4903      	ldr	r1, [pc, #12]	; (633c <_qspi_dma_rx_complete+0x14>)
    6330:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6332:	685b      	ldr	r3, [r3, #4]
    6334:	b103      	cbz	r3, 6338 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    6336:	4798      	blx	r3
    6338:	bd08      	pop	{r3, pc}
    633a:	bf00      	nop
    633c:	01000002 	.word	0x01000002

00006340 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6340:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6342:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6344:	681a      	ldr	r2, [r3, #0]
    6346:	4903      	ldr	r1, [pc, #12]	; (6354 <_qspi_dma_tx_complete+0x14>)
    6348:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    634a:	685b      	ldr	r3, [r3, #4]
    634c:	b103      	cbz	r3, 6350 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    634e:	4798      	blx	r3
    6350:	bd08      	pop	{r3, pc}
    6352:	bf00      	nop
    6354:	01000002 	.word	0x01000002

00006358 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    6358:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    635a:	6883      	ldr	r3, [r0, #8]
    635c:	689b      	ldr	r3, [r3, #8]
    635e:	b103      	cbz	r3, 6362 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6360:	4798      	blx	r3
    6362:	bd08      	pop	{r3, pc}

00006364 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6366:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    6368:	4604      	mov	r4, r0
    636a:	2800      	cmp	r0, #0
    636c:	d027      	beq.n	63be <_qspi_dma_init+0x5a>
    636e:	1c08      	adds	r0, r1, #0
    6370:	bf18      	it	ne
    6372:	2001      	movne	r0, #1
    6374:	22cb      	movs	r2, #203	; 0xcb
    6376:	4913      	ldr	r1, [pc, #76]	; (63c4 <_qspi_dma_init+0x60>)
    6378:	4b13      	ldr	r3, [pc, #76]	; (63c8 <_qspi_dma_init+0x64>)
    637a:	4798      	blx	r3
	dev->prvt = hw;
    637c:	4626      	mov	r6, r4
    637e:	f846 5b0c 	str.w	r5, [r6], #12
    6382:	2301      	movs	r3, #1
    6384:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6386:	4b11      	ldr	r3, [pc, #68]	; (63cc <_qspi_dma_init+0x68>)
    6388:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    638a:	4b11      	ldr	r3, [pc, #68]	; (63d0 <_qspi_dma_init+0x6c>)
    638c:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    638e:	211f      	movs	r1, #31
    6390:	4630      	mov	r0, r6
    6392:	4f10      	ldr	r7, [pc, #64]	; (63d4 <_qspi_dma_init+0x70>)
    6394:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6396:	68e3      	ldr	r3, [r4, #12]
    6398:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    639a:	68e3      	ldr	r3, [r4, #12]
    639c:	4a0e      	ldr	r2, [pc, #56]	; (63d8 <_qspi_dma_init+0x74>)
    639e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    63a0:	68e3      	ldr	r3, [r4, #12]
    63a2:	4d0e      	ldr	r5, [pc, #56]	; (63dc <_qspi_dma_init+0x78>)
    63a4:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    63a6:	211e      	movs	r1, #30
    63a8:	4630      	mov	r0, r6
    63aa:	47b8      	blx	r7
	dev->resource->back                 = dev;
    63ac:	68e3      	ldr	r3, [r4, #12]
    63ae:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    63b0:	68e3      	ldr	r3, [r4, #12]
    63b2:	4a0b      	ldr	r2, [pc, #44]	; (63e0 <_qspi_dma_init+0x7c>)
    63b4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    63b6:	68e3      	ldr	r3, [r4, #12]
    63b8:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    63ba:	2000      	movs	r0, #0
    63bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63be:	2000      	movs	r0, #0
    63c0:	e7d8      	b.n	6374 <_qspi_dma_init+0x10>
    63c2:	bf00      	nop
    63c4:	0000cf74 	.word	0x0000cf74
    63c8:	00005745 	.word	0x00005745
    63cc:	06000011 	.word	0x06000011
    63d0:	00243b00 	.word	0x00243b00
    63d4:	00005fe1 	.word	0x00005fe1
    63d8:	00006329 	.word	0x00006329
    63dc:	00006359 	.word	0x00006359
    63e0:	00006341 	.word	0x00006341

000063e4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    63e4:	b500      	push	{lr}
    63e6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    63e8:	4b0d      	ldr	r3, [pc, #52]	; (6420 <RAMECC_Handler+0x3c>)
    63ea:	789b      	ldrb	r3, [r3, #2]
    63ec:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    63ee:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	f013 0f02 	tst.w	r3, #2
    63f6:	d006      	beq.n	6406 <RAMECC_Handler+0x22>
    63f8:	4b0a      	ldr	r3, [pc, #40]	; (6424 <RAMECC_Handler+0x40>)
    63fa:	681b      	ldr	r3, [r3, #0]
    63fc:	b11b      	cbz	r3, 6406 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    63fe:	4a08      	ldr	r2, [pc, #32]	; (6420 <RAMECC_Handler+0x3c>)
    6400:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6402:	4798      	blx	r3
    6404:	e009      	b.n	641a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	f013 0f01 	tst.w	r3, #1
    640c:	d005      	beq.n	641a <RAMECC_Handler+0x36>
    640e:	4b05      	ldr	r3, [pc, #20]	; (6424 <RAMECC_Handler+0x40>)
    6410:	685b      	ldr	r3, [r3, #4]
    6412:	b113      	cbz	r3, 641a <RAMECC_Handler+0x36>
    6414:	4a02      	ldr	r2, [pc, #8]	; (6420 <RAMECC_Handler+0x3c>)
    6416:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6418:	4798      	blx	r3
	} else {
		return;
	}
}
    641a:	b003      	add	sp, #12
    641c:	f85d fb04 	ldr.w	pc, [sp], #4
    6420:	41020000 	.word	0x41020000
    6424:	20003d40 	.word	0x20003d40

00006428 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6428:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    642a:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    642c:	6913      	ldr	r3, [r2, #16]
    642e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6432:	d1fb      	bne.n	642c <_rtc_timer_set_period+0x4>
}
    6434:	4770      	bx	lr

00006436 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    6436:	68c2      	ldr	r2, [r0, #12]
    6438:	6913      	ldr	r3, [r2, #16]
    643a:	f013 0f60 	tst.w	r3, #96	; 0x60
    643e:	d1fb      	bne.n	6438 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6440:	6a10      	ldr	r0, [r2, #32]
}
    6442:	4770      	bx	lr

00006444 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6444:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6446:	f248 0103 	movw	r1, #32771	; 0x8003
    644a:	6913      	ldr	r3, [r2, #16]
    644c:	420b      	tst	r3, r1
    644e:	d1fc      	bne.n	644a <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6450:	8810      	ldrh	r0, [r2, #0]
}
    6452:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6456:	4770      	bx	lr

00006458 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    6458:	4770      	bx	lr
	...

0000645c <_rtc_timer_init>:
{
    645c:	b538      	push	{r3, r4, r5, lr}
    645e:	460c      	mov	r4, r1
	ASSERT(dev);
    6460:	4605      	mov	r5, r0
    6462:	2230      	movs	r2, #48	; 0x30
    6464:	4914      	ldr	r1, [pc, #80]	; (64b8 <_rtc_timer_init+0x5c>)
    6466:	3000      	adds	r0, #0
    6468:	bf18      	it	ne
    646a:	2001      	movne	r0, #1
    646c:	4b13      	ldr	r3, [pc, #76]	; (64bc <_rtc_timer_init+0x60>)
    646e:	4798      	blx	r3
	dev->hw = hw;
    6470:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6472:	2301      	movs	r3, #1
    6474:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6476:	f248 0203 	movw	r2, #32771	; 0x8003
    647a:	6923      	ldr	r3, [r4, #16]
    647c:	4213      	tst	r3, r2
    647e:	d1fc      	bne.n	647a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6480:	68eb      	ldr	r3, [r5, #12]
    6482:	691a      	ldr	r2, [r3, #16]
    6484:	f012 0f01 	tst.w	r2, #1
    6488:	d1fb      	bne.n	6482 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    648a:	f248 0280 	movw	r2, #32896	; 0x8080
    648e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6490:	f248 0103 	movw	r1, #32771	; 0x8003
    6494:	691a      	ldr	r2, [r3, #16]
    6496:	420a      	tst	r2, r1
    6498:	d1fc      	bne.n	6494 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    649a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    649c:	2301      	movs	r3, #1
    649e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    64a0:	6913      	ldr	r3, [r2, #16]
    64a2:	f013 0f60 	tst.w	r3, #96	; 0x60
    64a6:	d1fb      	bne.n	64a0 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    64a8:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    64aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    64ae:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    64b0:	4b03      	ldr	r3, [pc, #12]	; (64c0 <_rtc_timer_init+0x64>)
    64b2:	601d      	str	r5, [r3, #0]
}
    64b4:	2000      	movs	r0, #0
    64b6:	bd38      	pop	{r3, r4, r5, pc}
    64b8:	0000cf8c 	.word	0x0000cf8c
    64bc:	00005745 	.word	0x00005745
    64c0:	2000097c 	.word	0x2000097c

000064c4 <_rtc_timer_deinit>:
{
    64c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    64c6:	4604      	mov	r4, r0
    64c8:	b1c8      	cbz	r0, 64fe <_rtc_timer_deinit+0x3a>
    64ca:	68c0      	ldr	r0, [r0, #12]
    64cc:	3000      	adds	r0, #0
    64ce:	bf18      	it	ne
    64d0:	2001      	movne	r0, #1
    64d2:	2252      	movs	r2, #82	; 0x52
    64d4:	490b      	ldr	r1, [pc, #44]	; (6504 <_rtc_timer_deinit+0x40>)
    64d6:	4b0c      	ldr	r3, [pc, #48]	; (6508 <_rtc_timer_deinit+0x44>)
    64d8:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    64de:	4b0b      	ldr	r3, [pc, #44]	; (650c <_rtc_timer_deinit+0x48>)
    64e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    64e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64e8:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    64ec:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    64ee:	2301      	movs	r3, #1
    64f0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    64f2:	f248 0103 	movw	r1, #32771	; 0x8003
    64f6:	6913      	ldr	r3, [r2, #16]
    64f8:	420b      	tst	r3, r1
    64fa:	d1fc      	bne.n	64f6 <_rtc_timer_deinit+0x32>
}
    64fc:	bd10      	pop	{r4, pc}
    64fe:	2000      	movs	r0, #0
    6500:	e7e7      	b.n	64d2 <_rtc_timer_deinit+0xe>
    6502:	bf00      	nop
    6504:	0000cf8c 	.word	0x0000cf8c
    6508:	00005745 	.word	0x00005745
    650c:	e000e100 	.word	0xe000e100

00006510 <_rtc_timer_start>:
{
    6510:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6512:	4604      	mov	r4, r0
    6514:	b310      	cbz	r0, 655c <_rtc_timer_start+0x4c>
    6516:	68c0      	ldr	r0, [r0, #12]
    6518:	3000      	adds	r0, #0
    651a:	bf18      	it	ne
    651c:	2001      	movne	r0, #1
    651e:	225e      	movs	r2, #94	; 0x5e
    6520:	490f      	ldr	r1, [pc, #60]	; (6560 <_rtc_timer_start+0x50>)
    6522:	4b10      	ldr	r3, [pc, #64]	; (6564 <_rtc_timer_start+0x54>)
    6524:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6526:	f44f 6200 	mov.w	r2, #2048	; 0x800
    652a:	4b0f      	ldr	r3, [pc, #60]	; (6568 <_rtc_timer_start+0x58>)
    652c:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    652e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6530:	2300      	movs	r3, #0
    6532:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6534:	6913      	ldr	r3, [r2, #16]
    6536:	f013 0f08 	tst.w	r3, #8
    653a:	d1fb      	bne.n	6534 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    653c:	68e3      	ldr	r3, [r4, #12]
    653e:	691a      	ldr	r2, [r3, #16]
    6540:	f012 0f08 	tst.w	r2, #8
    6544:	d1fb      	bne.n	653e <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6546:	881a      	ldrh	r2, [r3, #0]
    6548:	b292      	uxth	r2, r2
    654a:	f042 0202 	orr.w	r2, r2, #2
    654e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6550:	f248 0103 	movw	r1, #32771	; 0x8003
    6554:	691a      	ldr	r2, [r3, #16]
    6556:	420a      	tst	r2, r1
    6558:	d1fc      	bne.n	6554 <_rtc_timer_start+0x44>
}
    655a:	bd10      	pop	{r4, pc}
    655c:	2000      	movs	r0, #0
    655e:	e7de      	b.n	651e <_rtc_timer_start+0xe>
    6560:	0000cf8c 	.word	0x0000cf8c
    6564:	00005745 	.word	0x00005745
    6568:	e000e100 	.word	0xe000e100

0000656c <_rtc_timer_stop>:
{
    656c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    656e:	4604      	mov	r4, r0
    6570:	b1a0      	cbz	r0, 659c <_rtc_timer_stop+0x30>
    6572:	68c0      	ldr	r0, [r0, #12]
    6574:	3000      	adds	r0, #0
    6576:	bf18      	it	ne
    6578:	2001      	movne	r0, #1
    657a:	226b      	movs	r2, #107	; 0x6b
    657c:	4908      	ldr	r1, [pc, #32]	; (65a0 <_rtc_timer_stop+0x34>)
    657e:	4b09      	ldr	r3, [pc, #36]	; (65a4 <_rtc_timer_stop+0x38>)
    6580:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6582:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6584:	8813      	ldrh	r3, [r2, #0]
    6586:	f023 0302 	bic.w	r3, r3, #2
    658a:	041b      	lsls	r3, r3, #16
    658c:	0c1b      	lsrs	r3, r3, #16
    658e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6590:	f248 0103 	movw	r1, #32771	; 0x8003
    6594:	6913      	ldr	r3, [r2, #16]
    6596:	420b      	tst	r3, r1
    6598:	d1fc      	bne.n	6594 <_rtc_timer_stop+0x28>
}
    659a:	bd10      	pop	{r4, pc}
    659c:	2000      	movs	r0, #0
    659e:	e7ec      	b.n	657a <_rtc_timer_stop+0xe>
    65a0:	0000cf8c 	.word	0x0000cf8c
    65a4:	00005745 	.word	0x00005745

000065a8 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    65a8:	4800      	ldr	r0, [pc, #0]	; (65ac <_rtc_get_timer+0x4>)
    65aa:	4770      	bx	lr
    65ac:	20000358 	.word	0x20000358

000065b0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    65b0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    65b2:	4b08      	ldr	r3, [pc, #32]	; (65d4 <RTC_Handler+0x24>)
    65b4:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    65b6:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    65b8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    65ba:	f413 7f80 	tst.w	r3, #256	; 0x100
    65be:	d007      	beq.n	65d0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    65c0:	6823      	ldr	r3, [r4, #0]
    65c2:	b10b      	cbz	r3, 65c8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    65c4:	4620      	mov	r0, r4
    65c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    65c8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    65ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    65ce:	819a      	strh	r2, [r3, #12]
    65d0:	bd10      	pop	{r4, pc}
    65d2:	bf00      	nop
    65d4:	2000097c 	.word	0x2000097c

000065d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    65d8:	b470      	push	{r4, r5, r6}
    65da:	b089      	sub	sp, #36	; 0x24
    65dc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    65de:	466c      	mov	r4, sp
    65e0:	4d0d      	ldr	r5, [pc, #52]	; (6618 <_sercom_get_hardware_index+0x40>)
    65e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    65e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    65e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    65ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    65ee:	9b00      	ldr	r3, [sp, #0]
    65f0:	42b3      	cmp	r3, r6
    65f2:	d00d      	beq.n	6610 <_sercom_get_hardware_index+0x38>
    65f4:	4631      	mov	r1, r6
    65f6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    65f8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    65fa:	f853 2b04 	ldr.w	r2, [r3], #4
    65fe:	428a      	cmp	r2, r1
    6600:	d007      	beq.n	6612 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6602:	3001      	adds	r0, #1
    6604:	2808      	cmp	r0, #8
    6606:	d1f8      	bne.n	65fa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6608:	2000      	movs	r0, #0
}
    660a:	b009      	add	sp, #36	; 0x24
    660c:	bc70      	pop	{r4, r5, r6}
    660e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6610:	2000      	movs	r0, #0
			return i;
    6612:	b2c0      	uxtb	r0, r0
    6614:	e7f9      	b.n	660a <_sercom_get_hardware_index+0x32>
    6616:	bf00      	nop
    6618:	0000cfa4 	.word	0x0000cfa4

0000661c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    661c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    661e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6620:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6622:	f013 0f01 	tst.w	r3, #1
    6626:	d003      	beq.n	6630 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6628:	7da3      	ldrb	r3, [r4, #22]
    662a:	f013 0f01 	tst.w	r3, #1
    662e:	d112      	bne.n	6656 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6630:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6632:	f013 0f02 	tst.w	r3, #2
    6636:	d003      	beq.n	6640 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6638:	7da3      	ldrb	r3, [r4, #22]
    663a:	f013 0f02 	tst.w	r3, #2
    663e:	d10f      	bne.n	6660 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6640:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6642:	f013 0f04 	tst.w	r3, #4
    6646:	d015      	beq.n	6674 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6648:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    664a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    664e:	b163      	cbz	r3, 666a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6650:	23ff      	movs	r3, #255	; 0xff
    6652:	8363      	strh	r3, [r4, #26]
    6654:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6656:	2301      	movs	r3, #1
    6658:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    665a:	6803      	ldr	r3, [r0, #0]
    665c:	4798      	blx	r3
    665e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6660:	2302      	movs	r3, #2
    6662:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6664:	6883      	ldr	r3, [r0, #8]
    6666:	4798      	blx	r3
    6668:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    666a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    666c:	6843      	ldr	r3, [r0, #4]
    666e:	b2c9      	uxtb	r1, r1
    6670:	4798      	blx	r3
    6672:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6674:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6676:	09db      	lsrs	r3, r3, #7
    6678:	d100      	bne.n	667c <_sercom_usart_interrupt_handler+0x60>
    667a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    667c:	2380      	movs	r3, #128	; 0x80
    667e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6680:	68c3      	ldr	r3, [r0, #12]
    6682:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6684:	8b63      	ldrh	r3, [r4, #26]
    6686:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6688:	8363      	strh	r3, [r4, #26]
    668a:	e7f6      	b.n	667a <_sercom_usart_interrupt_handler+0x5e>

0000668c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    668c:	4b11      	ldr	r3, [pc, #68]	; (66d4 <_sercom_init_irq_param+0x48>)
    668e:	4298      	cmp	r0, r3
    6690:	d011      	beq.n	66b6 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6692:	4b11      	ldr	r3, [pc, #68]	; (66d8 <_sercom_init_irq_param+0x4c>)
    6694:	4298      	cmp	r0, r3
    6696:	d011      	beq.n	66bc <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6698:	4b10      	ldr	r3, [pc, #64]	; (66dc <_sercom_init_irq_param+0x50>)
    669a:	4298      	cmp	r0, r3
    669c:	d011      	beq.n	66c2 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    669e:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    66a2:	d011      	beq.n	66c8 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    66a4:	4b0e      	ldr	r3, [pc, #56]	; (66e0 <_sercom_init_irq_param+0x54>)
    66a6:	4298      	cmp	r0, r3
    66a8:	d011      	beq.n	66ce <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    66aa:	4b0e      	ldr	r3, [pc, #56]	; (66e4 <_sercom_init_irq_param+0x58>)
    66ac:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    66ae:	bf04      	itt	eq
    66b0:	4b0d      	ldreq	r3, [pc, #52]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66b2:	6159      	streq	r1, [r3, #20]
    66b4:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    66b6:	4b0c      	ldr	r3, [pc, #48]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66b8:	6019      	str	r1, [r3, #0]
    66ba:	e7f0      	b.n	669e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    66bc:	4b0a      	ldr	r3, [pc, #40]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66be:	6059      	str	r1, [r3, #4]
    66c0:	e7f0      	b.n	66a4 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    66c2:	4b09      	ldr	r3, [pc, #36]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66c4:	6099      	str	r1, [r3, #8]
    66c6:	e7f0      	b.n	66aa <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    66c8:	4b07      	ldr	r3, [pc, #28]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66ca:	60d9      	str	r1, [r3, #12]
    66cc:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    66ce:	4b06      	ldr	r3, [pc, #24]	; (66e8 <_sercom_init_irq_param+0x5c>)
    66d0:	6119      	str	r1, [r3, #16]
    66d2:	4770      	bx	lr
    66d4:	40003000 	.word	0x40003000
    66d8:	40003400 	.word	0x40003400
    66dc:	41014000 	.word	0x41014000
    66e0:	43000400 	.word	0x43000400
    66e4:	43000800 	.word	0x43000800
    66e8:	20000980 	.word	0x20000980

000066ec <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    66ec:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    66ee:	4b03      	ldr	r3, [pc, #12]	; (66fc <_sercom_get_irq_num+0x10>)
    66f0:	4798      	blx	r3
    66f2:	0080      	lsls	r0, r0, #2
    66f4:	302e      	adds	r0, #46	; 0x2e
}
    66f6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    66fa:	bd08      	pop	{r3, pc}
    66fc:	000065d9 	.word	0x000065d9

00006700 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6700:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6702:	f013 0f01 	tst.w	r3, #1
    6706:	d109      	bne.n	671c <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6708:	6803      	ldr	r3, [r0, #0]
    670a:	f043 0302 	orr.w	r3, r3, #2
    670e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6710:	69c3      	ldr	r3, [r0, #28]
    6712:	f013 0f03 	tst.w	r3, #3
    6716:	d1fb      	bne.n	6710 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6718:	2000      	movs	r0, #0
    671a:	4770      	bx	lr
		return ERR_BUSY;
    671c:	f06f 0003 	mvn.w	r0, #3
}
    6720:	4770      	bx	lr
	...

00006724 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6724:	b538      	push	{r3, r4, r5, lr}
    6726:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6728:	4b0b      	ldr	r3, [pc, #44]	; (6758 <_spi_async_enable+0x34>)
    672a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    672c:	4620      	mov	r0, r4
    672e:	4b0b      	ldr	r3, [pc, #44]	; (675c <_spi_async_enable+0x38>)
    6730:	4798      	blx	r3
    6732:	1d01      	adds	r1, r0, #4
    6734:	b2c9      	uxtb	r1, r1
    6736:	2501      	movs	r5, #1
    6738:	4c09      	ldr	r4, [pc, #36]	; (6760 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    673a:	1c43      	adds	r3, r0, #1
    673c:	b2db      	uxtb	r3, r3
    673e:	0942      	lsrs	r2, r0, #5
    6740:	f000 001f 	and.w	r0, r0, #31
    6744:	fa05 f000 	lsl.w	r0, r5, r0
    6748:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    674c:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    674e:	4299      	cmp	r1, r3
    6750:	d1f3      	bne.n	673a <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6752:	2000      	movs	r0, #0
    6754:	bd38      	pop	{r3, r4, r5, pc}
    6756:	bf00      	nop
    6758:	00006701 	.word	0x00006701
    675c:	000066ed 	.word	0x000066ed
    6760:	e000e100 	.word	0xe000e100

00006764 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6764:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6766:	f013 0f03 	tst.w	r3, #3
    676a:	d111      	bne.n	6790 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    676c:	69c3      	ldr	r3, [r0, #28]
    676e:	f013 0f03 	tst.w	r3, #3
    6772:	d1fb      	bne.n	676c <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6774:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6776:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    677a:	0709      	lsls	r1, r1, #28
    677c:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6780:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6782:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6784:	69c3      	ldr	r3, [r0, #28]
    6786:	f013 0f03 	tst.w	r3, #3
    678a:	d1fb      	bne.n	6784 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    678c:	2000      	movs	r0, #0
    678e:	4770      	bx	lr
		return ERR_BUSY;
    6790:	f06f 0003 	mvn.w	r0, #3
}
    6794:	4770      	bx	lr

00006796 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6796:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6798:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    679a:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    679c:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    679e:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    67a0:	f013 0f01 	tst.w	r3, #1
    67a4:	d109      	bne.n	67ba <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    67a6:	f013 0f04 	tst.w	r3, #4
    67aa:	d109      	bne.n	67c0 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    67ac:	f013 0f02 	tst.w	r3, #2
    67b0:	d109      	bne.n	67c6 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    67b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    67b6:	d10b      	bne.n	67d0 <_spi_handler+0x3a>
    67b8:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    67ba:	6883      	ldr	r3, [r0, #8]
    67bc:	4798      	blx	r3
    67be:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    67c0:	68c3      	ldr	r3, [r0, #12]
    67c2:	4798      	blx	r3
    67c4:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    67c6:	2302      	movs	r3, #2
    67c8:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    67ca:	6903      	ldr	r3, [r0, #16]
    67cc:	4798      	blx	r3
    67ce:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    67d0:	2304      	movs	r3, #4
    67d2:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    67d4:	2380      	movs	r3, #128	; 0x80
    67d6:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    67d8:	6943      	ldr	r3, [r0, #20]
    67da:	f06f 0112 	mvn.w	r1, #18
    67de:	4798      	blx	r3
	}
}
    67e0:	e7ea      	b.n	67b8 <_spi_handler+0x22>
	...

000067e4 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    67e4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    67e6:	4b03      	ldr	r3, [pc, #12]	; (67f4 <_spi_get_tx_dma_channel+0x10>)
    67e8:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    67ea:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    67ec:	bf0c      	ite	eq
    67ee:	2008      	moveq	r0, #8
    67f0:	2000      	movne	r0, #0
    67f2:	bd08      	pop	{r3, pc}
    67f4:	000065d9 	.word	0x000065d9

000067f8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    67f8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    67fa:	4b03      	ldr	r3, [pc, #12]	; (6808 <_spi_get_rx_dma_channel+0x10>)
    67fc:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    67fe:	2807      	cmp	r0, #7
    6800:	bf8c      	ite	hi
    6802:	2000      	movhi	r0, #0
    6804:	2001      	movls	r0, #1
    6806:	bd08      	pop	{r3, pc}
    6808:	000065d9 	.word	0x000065d9

0000680c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    680c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    680e:	6883      	ldr	r3, [r0, #8]
    6810:	689b      	ldr	r3, [r3, #8]
    6812:	b103      	cbz	r3, 6816 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6814:	4798      	blx	r3
    6816:	bd08      	pop	{r3, pc}

00006818 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6818:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    681a:	6883      	ldr	r3, [r0, #8]
    681c:	685b      	ldr	r3, [r3, #4]
    681e:	b103      	cbz	r3, 6822 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6820:	4798      	blx	r3
    6822:	bd08      	pop	{r3, pc}

00006824 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6824:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6826:	6883      	ldr	r3, [r0, #8]
    6828:	68db      	ldr	r3, [r3, #12]
    682a:	b103      	cbz	r3, 682e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    682c:	4798      	blx	r3
    682e:	bd08      	pop	{r3, pc}

00006830 <_usart_init>:
{
    6830:	b510      	push	{r4, lr}
    6832:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6834:	4b48      	ldr	r3, [pc, #288]	; (6958 <_usart_init+0x128>)
    6836:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6838:	2800      	cmp	r0, #0
    683a:	d06a      	beq.n	6912 <_usart_init+0xe2>
    683c:	2801      	cmp	r0, #1
    683e:	d062      	beq.n	6906 <_usart_init+0xd6>
    6840:	2802      	cmp	r0, #2
    6842:	d062      	beq.n	690a <_usart_init+0xda>
    6844:	2804      	cmp	r0, #4
    6846:	d062      	beq.n	690e <_usart_init+0xde>
    6848:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    684a:	bf08      	it	eq
    684c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    684e:	d006      	beq.n	685e <_usart_init+0x2e>
	ASSERT(false);
    6850:	f240 2276 	movw	r2, #630	; 0x276
    6854:	4941      	ldr	r1, [pc, #260]	; (695c <_usart_init+0x12c>)
    6856:	2000      	movs	r0, #0
    6858:	4b41      	ldr	r3, [pc, #260]	; (6960 <_usart_init+0x130>)
    685a:	4798      	blx	r3
	return 0;
    685c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    685e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6860:	f013 0f01 	tst.w	r3, #1
    6864:	d122      	bne.n	68ac <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6866:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    686a:	4a3e      	ldr	r2, [pc, #248]	; (6964 <_usart_init+0x134>)
    686c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6872:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6876:	69e3      	ldr	r3, [r4, #28]
    6878:	f013 0f03 	tst.w	r3, #3
    687c:	d1fb      	bne.n	6876 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    687e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6880:	f013 0f02 	tst.w	r3, #2
    6884:	d00b      	beq.n	689e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6886:	6823      	ldr	r3, [r4, #0]
    6888:	f023 0302 	bic.w	r3, r3, #2
    688c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    688e:	69e3      	ldr	r3, [r4, #28]
    6890:	f013 0f03 	tst.w	r3, #3
    6894:	d1fb      	bne.n	688e <_usart_init+0x5e>
    6896:	69e3      	ldr	r3, [r4, #28]
    6898:	f013 0f02 	tst.w	r3, #2
    689c:	d1fb      	bne.n	6896 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    689e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    68a2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    68a4:	69e3      	ldr	r3, [r4, #28]
    68a6:	f013 0f03 	tst.w	r3, #3
    68aa:	d1fb      	bne.n	68a4 <_usart_init+0x74>
    68ac:	69e3      	ldr	r3, [r4, #28]
    68ae:	f013 0f01 	tst.w	r3, #1
    68b2:	d1fb      	bne.n	68ac <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    68b4:	460a      	mov	r2, r1
    68b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    68ba:	4b2a      	ldr	r3, [pc, #168]	; (6964 <_usart_init+0x134>)
    68bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    68c0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    68c2:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    68c4:	69e3      	ldr	r3, [r4, #28]
    68c6:	f013 0f03 	tst.w	r3, #3
    68ca:	d1fb      	bne.n	68c4 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    68cc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    68d0:	4924      	ldr	r1, [pc, #144]	; (6964 <_usart_init+0x134>)
    68d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    68d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    68d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    68da:	69e3      	ldr	r3, [r4, #28]
    68dc:	f013 0f1f 	tst.w	r3, #31
    68e0:	d1fb      	bne.n	68da <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    68e2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    68e6:	491f      	ldr	r1, [pc, #124]	; (6964 <_usart_init+0x134>)
    68e8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    68ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    68ee:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    68f0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    68f4:	d10f      	bne.n	6916 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    68f6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    68fa:	491a      	ldr	r1, [pc, #104]	; (6964 <_usart_init+0x134>)
    68fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6900:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6902:	81a3      	strh	r3, [r4, #12]
    6904:	e016      	b.n	6934 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6906:	2101      	movs	r1, #1
    6908:	e7a9      	b.n	685e <_usart_init+0x2e>
    690a:	2102      	movs	r1, #2
    690c:	e7a7      	b.n	685e <_usart_init+0x2e>
    690e:	2103      	movs	r1, #3
    6910:	e7a5      	b.n	685e <_usart_init+0x2e>
    6912:	2100      	movs	r1, #0
    6914:	e7a3      	b.n	685e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6916:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    691a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    691e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6920:	89a1      	ldrh	r1, [r4, #12]
    6922:	f360 010c 	bfi	r1, r0, #0, #13
    6926:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6928:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    692c:	89a3      	ldrh	r3, [r4, #12]
    692e:	f361 334f 	bfi	r3, r1, #13, #3
    6932:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6934:	4b0b      	ldr	r3, [pc, #44]	; (6964 <_usart_init+0x134>)
    6936:	0051      	lsls	r1, r2, #1
    6938:	1888      	adds	r0, r1, r2
    693a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    693e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6942:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6944:	440a      	add	r2, r1
    6946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    694a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    694e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6952:	2000      	movs	r0, #0
    6954:	bd10      	pop	{r4, pc}
    6956:	bf00      	nop
    6958:	000065d9 	.word	0x000065d9
    695c:	0000d078 	.word	0x0000d078
    6960:	00005745 	.word	0x00005745
    6964:	0000cfa4 	.word	0x0000cfa4

00006968 <_get_i2cm_index>:
{
    6968:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    696a:	4b07      	ldr	r3, [pc, #28]	; (6988 <_get_i2cm_index+0x20>)
    696c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    696e:	2805      	cmp	r0, #5
    6970:	d008      	beq.n	6984 <_get_i2cm_index+0x1c>
	ASSERT(false);
    6972:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6976:	4905      	ldr	r1, [pc, #20]	; (698c <_get_i2cm_index+0x24>)
    6978:	2000      	movs	r0, #0
    697a:	4b05      	ldr	r3, [pc, #20]	; (6990 <_get_i2cm_index+0x28>)
    697c:	4798      	blx	r3
	return -1;
    697e:	f04f 30ff 	mov.w	r0, #4294967295
}
    6982:	bd08      	pop	{r3, pc}
			return i;
    6984:	2000      	movs	r0, #0
    6986:	bd08      	pop	{r3, pc}
    6988:	000065d9 	.word	0x000065d9
    698c:	0000d078 	.word	0x0000d078
    6990:	00005745 	.word	0x00005745

00006994 <_i2c_m_sync_init_impl>:
{
    6994:	b538      	push	{r3, r4, r5, lr}
    6996:	4605      	mov	r5, r0
    6998:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    699a:	4608      	mov	r0, r1
    699c:	4b34      	ldr	r3, [pc, #208]	; (6a70 <_i2c_m_sync_init_impl+0xdc>)
    699e:	4798      	blx	r3
    69a0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    69a2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    69a4:	f013 0f01 	tst.w	r3, #1
    69a8:	d123      	bne.n	69f2 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    69aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    69ae:	4a31      	ldr	r2, [pc, #196]	; (6a74 <_i2c_m_sync_init_impl+0xe0>)
    69b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    69b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    69b8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69bc:	69e3      	ldr	r3, [r4, #28]
    69be:	f013 0f03 	tst.w	r3, #3
    69c2:	d1fb      	bne.n	69bc <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    69c4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    69c6:	f013 0f02 	tst.w	r3, #2
    69ca:	d00b      	beq.n	69e4 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    69cc:	6823      	ldr	r3, [r4, #0]
    69ce:	f023 0302 	bic.w	r3, r3, #2
    69d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69d4:	69e3      	ldr	r3, [r4, #28]
    69d6:	f013 0f03 	tst.w	r3, #3
    69da:	d1fb      	bne.n	69d4 <_i2c_m_sync_init_impl+0x40>
    69dc:	69e3      	ldr	r3, [r4, #28]
    69de:	f013 0f02 	tst.w	r3, #2
    69e2:	d1fb      	bne.n	69dc <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    69e4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    69e8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69ea:	69e3      	ldr	r3, [r4, #28]
    69ec:	f013 0f03 	tst.w	r3, #3
    69f0:	d1fb      	bne.n	69ea <_i2c_m_sync_init_impl+0x56>
    69f2:	69e3      	ldr	r3, [r4, #28]
    69f4:	f013 0f01 	tst.w	r3, #1
    69f8:	d1fb      	bne.n	69f2 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    69fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    69fe:	4a1d      	ldr	r2, [pc, #116]	; (6a74 <_i2c_m_sync_init_impl+0xe0>)
    6a00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6a04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6a08:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a0a:	69e3      	ldr	r3, [r4, #28]
    6a0c:	f013 0f03 	tst.w	r3, #3
    6a10:	d1fb      	bne.n	6a0a <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6a12:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6a16:	4917      	ldr	r1, [pc, #92]	; (6a74 <_i2c_m_sync_init_impl+0xe0>)
    6a18:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6a20:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a22:	69e3      	ldr	r3, [r4, #28]
    6a24:	f013 0f04 	tst.w	r3, #4
    6a28:	d1fb      	bne.n	6a22 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6a2a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6a2e:	4911      	ldr	r1, [pc, #68]	; (6a74 <_i2c_m_sync_init_impl+0xe0>)
    6a30:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6a38:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6a3a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6a3e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6a40:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6a42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6a46:	2b01      	cmp	r3, #1
    6a48:	bf94      	ite	ls
    6a4a:	2300      	movls	r3, #0
    6a4c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6a4e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6a52:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6a54:	69e3      	ldr	r3, [r4, #28]
    6a56:	f013 0f04 	tst.w	r3, #4
    6a5a:	d1fb      	bne.n	6a54 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6a5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6a60:	4b04      	ldr	r3, [pc, #16]	; (6a74 <_i2c_m_sync_init_impl+0xe0>)
    6a62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6a66:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    6a6a:	81eb      	strh	r3, [r5, #14]
}
    6a6c:	2000      	movs	r0, #0
    6a6e:	bd38      	pop	{r3, r4, r5, pc}
    6a70:	00006969 	.word	0x00006969
    6a74:	0000cfa4 	.word	0x0000cfa4

00006a78 <_sercom_i2c_m_irq_handler>:
{
    6a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a7c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    6a7e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6a80:	7e26      	ldrb	r6, [r4, #24]
    6a82:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6a84:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6cbc <_sercom_i2c_m_irq_handler+0x244>
    6a88:	f240 425f 	movw	r2, #1119	; 0x45f
    6a8c:	4641      	mov	r1, r8
    6a8e:	3000      	adds	r0, #0
    6a90:	bf18      	it	ne
    6a92:	2001      	movne	r0, #1
    6a94:	4f88      	ldr	r7, [pc, #544]	; (6cb8 <_sercom_i2c_m_irq_handler+0x240>)
    6a96:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6a98:	6928      	ldr	r0, [r5, #16]
    6a9a:	f44f 628c 	mov.w	r2, #1120	; 0x460
    6a9e:	4641      	mov	r1, r8
    6aa0:	3000      	adds	r0, #0
    6aa2:	bf18      	it	ne
    6aa4:	2001      	movne	r0, #1
    6aa6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6aa8:	f016 0f80 	tst.w	r6, #128	; 0x80
    6aac:	f040 80f4 	bne.w	6c98 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6ab0:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6ab2:	69e3      	ldr	r3, [r4, #28]
    6ab4:	f013 0f04 	tst.w	r3, #4
    6ab8:	d1fb      	bne.n	6ab2 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6aba:	8b63      	ldrh	r3, [r4, #26]
    6abc:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6abe:	f016 0f01 	tst.w	r6, #1
    6ac2:	f000 8090 	beq.w	6be6 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6ac6:	f013 0f02 	tst.w	r3, #2
    6aca:	d022      	beq.n	6b12 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6acc:	2201      	movs	r2, #1
    6ace:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6ad0:	886a      	ldrh	r2, [r5, #2]
    6ad2:	b292      	uxth	r2, r2
    6ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6ad8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6ada:	886a      	ldrh	r2, [r5, #2]
    6adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6ae0:	0412      	lsls	r2, r2, #16
    6ae2:	0c12      	lsrs	r2, r2, #16
    6ae4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6ae6:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6aea:	2b00      	cmp	r3, #0
    6aec:	bf14      	ite	ne
    6aee:	f06f 0104 	mvnne.w	r1, #4
    6af2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6af6:	886b      	ldrh	r3, [r5, #2]
    6af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6afc:	041b      	lsls	r3, r3, #16
    6afe:	0c1b      	lsrs	r3, r3, #16
    6b00:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6b02:	696b      	ldr	r3, [r5, #20]
    6b04:	2b00      	cmp	r3, #0
    6b06:	f000 80c5 	beq.w	6c94 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6b0a:	4628      	mov	r0, r5
    6b0c:	4798      	blx	r3
    6b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6b12:	f013 0f04 	tst.w	r3, #4
    6b16:	d124      	bne.n	6b62 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6b18:	886b      	ldrh	r3, [r5, #2]
    6b1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6b1e:	d03e      	beq.n	6b9e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6b20:	882b      	ldrh	r3, [r5, #0]
    6b22:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6b24:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6b28:	69e3      	ldr	r3, [r4, #28]
    6b2a:	f013 0f04 	tst.w	r3, #4
    6b2e:	d1fb      	bne.n	6b28 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6b36:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6b3a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6b3c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6b3e:	69e3      	ldr	r3, [r4, #28]
    6b40:	f013 0f04 	tst.w	r3, #4
    6b44:	d1fb      	bne.n	6b3e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6b46:	886b      	ldrh	r3, [r5, #2]
    6b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6b4c:	041b      	lsls	r3, r3, #16
    6b4e:	0c1b      	lsrs	r3, r3, #16
    6b50:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6b52:	69ab      	ldr	r3, [r5, #24]
    6b54:	2b00      	cmp	r3, #0
    6b56:	f000 8088 	beq.w	6c6a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6b5a:	4628      	mov	r0, r5
    6b5c:	4798      	blx	r3
    6b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    6b62:	686b      	ldr	r3, [r5, #4]
    6b64:	2b00      	cmp	r3, #0
    6b66:	dd04      	ble.n	6b72 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    6b68:	886b      	ldrh	r3, [r5, #2]
    6b6a:	b29b      	uxth	r3, r3
    6b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6b70:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    6b72:	886b      	ldrh	r3, [r5, #2]
    6b74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6b78:	d108      	bne.n	6b8c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    6b7a:	886b      	ldrh	r3, [r5, #2]
    6b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b80:	041b      	lsls	r3, r3, #16
    6b82:	0c1b      	lsrs	r3, r3, #16
    6b84:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6b86:	f06f 0101 	mvn.w	r1, #1
    6b8a:	e7b4      	b.n	6af6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6b8c:	6863      	ldr	r3, [r4, #4]
    6b8e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6b92:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6b94:	69e3      	ldr	r3, [r4, #28]
    6b96:	f013 0f04 	tst.w	r3, #4
    6b9a:	d1fb      	bne.n	6b94 <_sercom_i2c_m_irq_handler+0x11c>
    6b9c:	e7ed      	b.n	6b7a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6b9e:	686b      	ldr	r3, [r5, #4]
    6ba0:	b99b      	cbnz	r3, 6bca <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6ba2:	886b      	ldrh	r3, [r5, #2]
    6ba4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6ba8:	d106      	bne.n	6bb8 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6baa:	886b      	ldrh	r3, [r5, #2]
    6bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6bb0:	041b      	lsls	r3, r3, #16
    6bb2:	0c1b      	lsrs	r3, r3, #16
    6bb4:	806b      	strh	r3, [r5, #2]
    6bb6:	e7cc      	b.n	6b52 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6bb8:	6863      	ldr	r3, [r4, #4]
    6bba:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6bbe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bc0:	69e3      	ldr	r3, [r4, #28]
    6bc2:	f013 0f04 	tst.w	r3, #4
    6bc6:	d1fb      	bne.n	6bc0 <_sercom_i2c_m_irq_handler+0x148>
    6bc8:	e7ef      	b.n	6baa <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6bca:	68ab      	ldr	r3, [r5, #8]
    6bcc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6bce:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bd0:	69e3      	ldr	r3, [r4, #28]
    6bd2:	f013 0f04 	tst.w	r3, #4
    6bd6:	d1fb      	bne.n	6bd0 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6bd8:	68ab      	ldr	r3, [r5, #8]
    6bda:	3301      	adds	r3, #1
    6bdc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6bde:	686b      	ldr	r3, [r5, #4]
    6be0:	3b01      	subs	r3, #1
    6be2:	606b      	str	r3, [r5, #4]
    6be4:	e7b5      	b.n	6b52 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6be6:	f016 0f02 	tst.w	r6, #2
    6bea:	d041      	beq.n	6c70 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6bec:	686a      	ldr	r2, [r5, #4]
    6bee:	2a00      	cmp	r2, #0
    6bf0:	d036      	beq.n	6c60 <_sercom_i2c_m_irq_handler+0x1e8>
    6bf2:	f013 0f04 	tst.w	r3, #4
    6bf6:	d133      	bne.n	6c60 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6bf8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6bfc:	3a01      	subs	r2, #1
    6bfe:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6c00:	2a00      	cmp	r2, #0
    6c02:	d137      	bne.n	6c74 <_sercom_i2c_m_irq_handler+0x1fc>
    6c04:	2900      	cmp	r1, #0
    6c06:	d039      	beq.n	6c7c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6c08:	886b      	ldrh	r3, [r5, #2]
    6c0a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6c0e:	d116      	bne.n	6c3e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6c10:	886b      	ldrh	r3, [r5, #2]
    6c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c16:	041b      	lsls	r3, r3, #16
    6c18:	0c1b      	lsrs	r3, r3, #16
    6c1a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6c1c:	68aa      	ldr	r2, [r5, #8]
    6c1e:	1c53      	adds	r3, r2, #1
    6c20:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c22:	69e3      	ldr	r3, [r4, #28]
    6c24:	f013 0f04 	tst.w	r3, #4
    6c28:	d1fb      	bne.n	6c22 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6c2c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6c2e:	2302      	movs	r3, #2
    6c30:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6c32:	69eb      	ldr	r3, [r5, #28]
    6c34:	b1e3      	cbz	r3, 6c70 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6c36:	4628      	mov	r0, r5
    6c38:	4798      	blx	r3
    6c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6c3e:	6863      	ldr	r3, [r4, #4]
    6c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c44:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c46:	69e3      	ldr	r3, [r4, #28]
    6c48:	f013 0f04 	tst.w	r3, #4
    6c4c:	d1fb      	bne.n	6c46 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6c4e:	6863      	ldr	r3, [r4, #4]
    6c50:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6c54:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c56:	69e3      	ldr	r3, [r4, #28]
    6c58:	f013 0f04 	tst.w	r3, #4
    6c5c:	d1fb      	bne.n	6c56 <_sercom_i2c_m_irq_handler+0x1de>
    6c5e:	e7d7      	b.n	6c10 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6c60:	2302      	movs	r3, #2
    6c62:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    6c64:	f06f 0101 	mvn.w	r1, #1
    6c68:	e745      	b.n	6af6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6c6a:	f016 0f02 	tst.w	r6, #2
    6c6e:	d1e0      	bne.n	6c32 <_sercom_i2c_m_irq_handler+0x1ba>
    6c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6c74:	2a01      	cmp	r2, #1
    6c76:	d1d1      	bne.n	6c1c <_sercom_i2c_m_irq_handler+0x1a4>
    6c78:	2900      	cmp	r1, #0
    6c7a:	d0cf      	beq.n	6c1c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6c7c:	6863      	ldr	r3, [r4, #4]
    6c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6c82:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c84:	69e3      	ldr	r3, [r4, #28]
    6c86:	f013 0f04 	tst.w	r3, #4
    6c8a:	d1fb      	bne.n	6c84 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    6c8c:	686b      	ldr	r3, [r5, #4]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d0ba      	beq.n	6c08 <_sercom_i2c_m_irq_handler+0x190>
    6c92:	e7c3      	b.n	6c1c <_sercom_i2c_m_irq_handler+0x1a4>
    6c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6c98:	886b      	ldrh	r3, [r5, #2]
    6c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c9e:	041b      	lsls	r3, r3, #16
    6ca0:	0c1b      	lsrs	r3, r3, #16
    6ca2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6ca4:	696b      	ldr	r3, [r5, #20]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d0e2      	beq.n	6c70 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6caa:	f06f 0104 	mvn.w	r1, #4
    6cae:	4628      	mov	r0, r5
    6cb0:	4798      	blx	r3
    6cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cb6:	bf00      	nop
    6cb8:	00005745 	.word	0x00005745
    6cbc:	0000d078 	.word	0x0000d078

00006cc0 <_usart_sync_init>:
{
    6cc0:	b538      	push	{r3, r4, r5, lr}
    6cc2:	460c      	mov	r4, r1
	ASSERT(device);
    6cc4:	4605      	mov	r5, r0
    6cc6:	22c8      	movs	r2, #200	; 0xc8
    6cc8:	4905      	ldr	r1, [pc, #20]	; (6ce0 <_usart_sync_init+0x20>)
    6cca:	3000      	adds	r0, #0
    6ccc:	bf18      	it	ne
    6cce:	2001      	movne	r0, #1
    6cd0:	4b04      	ldr	r3, [pc, #16]	; (6ce4 <_usart_sync_init+0x24>)
    6cd2:	4798      	blx	r3
	device->hw = hw;
    6cd4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    6cd6:	4620      	mov	r0, r4
    6cd8:	4b03      	ldr	r3, [pc, #12]	; (6ce8 <_usart_sync_init+0x28>)
    6cda:	4798      	blx	r3
}
    6cdc:	bd38      	pop	{r3, r4, r5, pc}
    6cde:	bf00      	nop
    6ce0:	0000d078 	.word	0x0000d078
    6ce4:	00005745 	.word	0x00005745
    6ce8:	00006831 	.word	0x00006831

00006cec <_usart_async_init>:
{
    6cec:	b570      	push	{r4, r5, r6, lr}
    6cee:	460d      	mov	r5, r1
	ASSERT(device);
    6cf0:	4606      	mov	r6, r0
    6cf2:	22d6      	movs	r2, #214	; 0xd6
    6cf4:	4917      	ldr	r1, [pc, #92]	; (6d54 <_usart_async_init+0x68>)
    6cf6:	3000      	adds	r0, #0
    6cf8:	bf18      	it	ne
    6cfa:	2001      	movne	r0, #1
    6cfc:	4b16      	ldr	r3, [pc, #88]	; (6d58 <_usart_async_init+0x6c>)
    6cfe:	4798      	blx	r3
	init_status = _usart_init(hw);
    6d00:	4628      	mov	r0, r5
    6d02:	4b16      	ldr	r3, [pc, #88]	; (6d5c <_usart_async_init+0x70>)
    6d04:	4798      	blx	r3
	if (init_status) {
    6d06:	4604      	mov	r4, r0
    6d08:	b108      	cbz	r0, 6d0e <_usart_async_init+0x22>
}
    6d0a:	4620      	mov	r0, r4
    6d0c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    6d0e:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    6d10:	4631      	mov	r1, r6
    6d12:	4628      	mov	r0, r5
    6d14:	4b12      	ldr	r3, [pc, #72]	; (6d60 <_usart_async_init+0x74>)
    6d16:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6d18:	4628      	mov	r0, r5
    6d1a:	4b12      	ldr	r3, [pc, #72]	; (6d64 <_usart_async_init+0x78>)
    6d1c:	4798      	blx	r3
    6d1e:	1d01      	adds	r1, r0, #4
    6d20:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d22:	2501      	movs	r5, #1
    6d24:	f000 021f 	and.w	r2, r0, #31
    6d28:	fa05 f202 	lsl.w	r2, r5, r2
    6d2c:	0943      	lsrs	r3, r0, #5
    6d2e:	009b      	lsls	r3, r3, #2
    6d30:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6d34:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d40:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d48:	601a      	str	r2, [r3, #0]
		irq++;
    6d4a:	3001      	adds	r0, #1
    6d4c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6d4e:	4281      	cmp	r1, r0
    6d50:	d1e8      	bne.n	6d24 <_usart_async_init+0x38>
    6d52:	e7da      	b.n	6d0a <_usart_async_init+0x1e>
    6d54:	0000d078 	.word	0x0000d078
    6d58:	00005745 	.word	0x00005745
    6d5c:	00006831 	.word	0x00006831
    6d60:	0000668d 	.word	0x0000668d
    6d64:	000066ed 	.word	0x000066ed

00006d68 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6d68:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6d6a:	6813      	ldr	r3, [r2, #0]
    6d6c:	f043 0302 	orr.w	r3, r3, #2
    6d70:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6d72:	69d3      	ldr	r3, [r2, #28]
    6d74:	f013 0f03 	tst.w	r3, #3
    6d78:	d1fb      	bne.n	6d72 <_usart_sync_enable+0xa>
}
    6d7a:	4770      	bx	lr

00006d7c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6d7c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6d7e:	6813      	ldr	r3, [r2, #0]
    6d80:	f043 0302 	orr.w	r3, r3, #2
    6d84:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6d86:	69d3      	ldr	r3, [r2, #28]
    6d88:	f013 0f03 	tst.w	r3, #3
    6d8c:	d1fb      	bne.n	6d86 <_usart_async_enable+0xa>
}
    6d8e:	4770      	bx	lr

00006d90 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6d90:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    6d92:	6299      	str	r1, [r3, #40]	; 0x28
    6d94:	4770      	bx	lr

00006d96 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6d96:	6983      	ldr	r3, [r0, #24]
    6d98:	6299      	str	r1, [r3, #40]	; 0x28
    6d9a:	4770      	bx	lr

00006d9c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    6d9c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    6d9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6da0:	b2c0      	uxtb	r0, r0
    6da2:	4770      	bx	lr

00006da4 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    6da4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6da6:	7e18      	ldrb	r0, [r3, #24]
}
    6da8:	f000 0001 	and.w	r0, r0, #1
    6dac:	4770      	bx	lr

00006dae <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    6dae:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6db0:	7e18      	ldrb	r0, [r3, #24]
}
    6db2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6db6:	4770      	bx	lr

00006db8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    6db8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6dba:	7e18      	ldrb	r0, [r3, #24]
}
    6dbc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6dc0:	4770      	bx	lr

00006dc2 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    6dc2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6dc4:	2201      	movs	r2, #1
    6dc6:	759a      	strb	r2, [r3, #22]
    6dc8:	4770      	bx	lr

00006dca <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    6dca:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6dcc:	2202      	movs	r2, #2
    6dce:	759a      	strb	r2, [r3, #22]
    6dd0:	4770      	bx	lr
	...

00006dd4 <_usart_async_set_irq_state>:
{
    6dd4:	b570      	push	{r4, r5, r6, lr}
    6dd6:	460c      	mov	r4, r1
    6dd8:	4616      	mov	r6, r2
	ASSERT(device);
    6dda:	4605      	mov	r5, r0
    6ddc:	f240 2236 	movw	r2, #566	; 0x236
    6de0:	4915      	ldr	r1, [pc, #84]	; (6e38 <_usart_async_set_irq_state+0x64>)
    6de2:	3000      	adds	r0, #0
    6de4:	bf18      	it	ne
    6de6:	2001      	movne	r0, #1
    6de8:	4b14      	ldr	r3, [pc, #80]	; (6e3c <_usart_async_set_irq_state+0x68>)
    6dea:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    6dec:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    6df0:	d10d      	bne.n	6e0e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    6df2:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6df4:	b92e      	cbnz	r6, 6e02 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6df6:	2201      	movs	r2, #1
    6df8:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    6dfa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6dfc:	2202      	movs	r2, #2
    6dfe:	751a      	strb	r2, [r3, #20]
    6e00:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6e02:	2201      	movs	r2, #1
    6e04:	759a      	strb	r2, [r3, #22]
    6e06:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6e08:	2202      	movs	r2, #2
    6e0a:	759a      	strb	r2, [r3, #22]
    6e0c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    6e0e:	2c01      	cmp	r4, #1
    6e10:	d002      	beq.n	6e18 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    6e12:	2c03      	cmp	r4, #3
    6e14:	d008      	beq.n	6e28 <_usart_async_set_irq_state+0x54>
    6e16:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    6e18:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6e1a:	b916      	cbnz	r6, 6e22 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    6e1c:	2204      	movs	r2, #4
    6e1e:	751a      	strb	r2, [r3, #20]
    6e20:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    6e22:	2204      	movs	r2, #4
    6e24:	759a      	strb	r2, [r3, #22]
    6e26:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    6e28:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6e2a:	b116      	cbz	r6, 6e32 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    6e2c:	2280      	movs	r2, #128	; 0x80
    6e2e:	759a      	strb	r2, [r3, #22]
}
    6e30:	e7f1      	b.n	6e16 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    6e32:	2280      	movs	r2, #128	; 0x80
    6e34:	751a      	strb	r2, [r3, #20]
    6e36:	bd70      	pop	{r4, r5, r6, pc}
    6e38:	0000d078 	.word	0x0000d078
    6e3c:	00005745 	.word	0x00005745

00006e40 <_i2c_m_async_init>:
{
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    6e44:	4606      	mov	r6, r0
    6e46:	f240 42d2 	movw	r2, #1234	; 0x4d2
    6e4a:	4918      	ldr	r1, [pc, #96]	; (6eac <_i2c_m_async_init+0x6c>)
    6e4c:	3000      	adds	r0, #0
    6e4e:	bf18      	it	ne
    6e50:	2001      	movne	r0, #1
    6e52:	4b17      	ldr	r3, [pc, #92]	; (6eb0 <_i2c_m_async_init+0x70>)
    6e54:	4798      	blx	r3
	i2c_dev->hw = hw;
    6e56:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6e58:	4629      	mov	r1, r5
    6e5a:	4630      	mov	r0, r6
    6e5c:	4b15      	ldr	r3, [pc, #84]	; (6eb4 <_i2c_m_async_init+0x74>)
    6e5e:	4798      	blx	r3
	if (init_status) {
    6e60:	4604      	mov	r4, r0
    6e62:	b108      	cbz	r0, 6e68 <_i2c_m_async_init+0x28>
}
    6e64:	4620      	mov	r0, r4
    6e66:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6e68:	4631      	mov	r1, r6
    6e6a:	4628      	mov	r0, r5
    6e6c:	4b12      	ldr	r3, [pc, #72]	; (6eb8 <_i2c_m_async_init+0x78>)
    6e6e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6e70:	4628      	mov	r0, r5
    6e72:	4b12      	ldr	r3, [pc, #72]	; (6ebc <_i2c_m_async_init+0x7c>)
    6e74:	4798      	blx	r3
    6e76:	1d01      	adds	r1, r0, #4
    6e78:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e7a:	2501      	movs	r5, #1
    6e7c:	f000 021f 	and.w	r2, r0, #31
    6e80:	fa05 f202 	lsl.w	r2, r5, r2
    6e84:	0943      	lsrs	r3, r0, #5
    6e86:	009b      	lsls	r3, r3, #2
    6e88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6e8c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e98:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ea0:	601a      	str	r2, [r3, #0]
		irq++;
    6ea2:	3001      	adds	r0, #1
    6ea4:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6ea6:	4281      	cmp	r1, r0
    6ea8:	d1e8      	bne.n	6e7c <_i2c_m_async_init+0x3c>
    6eaa:	e7db      	b.n	6e64 <_i2c_m_async_init+0x24>
    6eac:	0000d078 	.word	0x0000d078
    6eb0:	00005745 	.word	0x00005745
    6eb4:	00006995 	.word	0x00006995
    6eb8:	0000668d 	.word	0x0000668d
    6ebc:	000066ed 	.word	0x000066ed

00006ec0 <_i2c_m_async_transfer>:
{
    6ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ec4:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    6ec6:	4605      	mov	r5, r0
    6ec8:	f110 0800 	adds.w	r8, r0, #0
    6ecc:	bf18      	it	ne
    6ece:	f04f 0801 	movne.w	r8, #1
    6ed2:	4f45      	ldr	r7, [pc, #276]	; (6fe8 <_i2c_m_async_transfer+0x128>)
    6ed4:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    6ed8:	4639      	mov	r1, r7
    6eda:	4640      	mov	r0, r8
    6edc:	4e43      	ldr	r6, [pc, #268]	; (6fec <_i2c_m_async_transfer+0x12c>)
    6ede:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    6ee0:	6928      	ldr	r0, [r5, #16]
    6ee2:	f240 5229 	movw	r2, #1321	; 0x529
    6ee6:	4639      	mov	r1, r7
    6ee8:	3000      	adds	r0, #0
    6eea:	bf18      	it	ne
    6eec:	2001      	movne	r0, #1
    6eee:	47b0      	blx	r6
	ASSERT(msg);
    6ef0:	f240 522a 	movw	r2, #1322	; 0x52a
    6ef4:	4639      	mov	r1, r7
    6ef6:	1c20      	adds	r0, r4, #0
    6ef8:	bf18      	it	ne
    6efa:	2001      	movne	r0, #1
    6efc:	47b0      	blx	r6
	if (msg->len == 0) {
    6efe:	6860      	ldr	r0, [r4, #4]
    6f00:	2800      	cmp	r0, #0
    6f02:	d06f      	beq.n	6fe4 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6f04:	886b      	ldrh	r3, [r5, #2]
    6f06:	f413 7f80 	tst.w	r3, #256	; 0x100
    6f0a:	d169      	bne.n	6fe0 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    6f0c:	8863      	ldrh	r3, [r4, #2]
    6f0e:	b29b      	uxth	r3, r3
    6f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6f14:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    6f16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6f1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6f1e:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6f20:	6853      	ldr	r3, [r2, #4]
    6f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6f26:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f28:	69d3      	ldr	r3, [r2, #28]
    6f2a:	f013 0f04 	tst.w	r3, #4
    6f2e:	d1fb      	bne.n	6f28 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    6f30:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6f32:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    6f34:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    6f38:	492b      	ldr	r1, [pc, #172]	; (6fe8 <_i2c_m_async_transfer+0x128>)
    6f3a:	4640      	mov	r0, r8
    6f3c:	4b2b      	ldr	r3, [pc, #172]	; (6fec <_i2c_m_async_transfer+0x12c>)
    6f3e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    6f40:	686b      	ldr	r3, [r5, #4]
    6f42:	2b01      	cmp	r3, #1
    6f44:	d02a      	beq.n	6f9c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6f46:	6863      	ldr	r3, [r4, #4]
    6f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6f4c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f4e:	69e3      	ldr	r3, [r4, #28]
    6f50:	f013 0f04 	tst.w	r3, #4
    6f54:	d1fb      	bne.n	6f4e <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    6f56:	882b      	ldrh	r3, [r5, #0]
    6f58:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6f5c:	d02a      	beq.n	6fb4 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    6f5e:	886a      	ldrh	r2, [r5, #2]
    6f60:	f012 0f01 	tst.w	r2, #1
    6f64:	d004      	beq.n	6f70 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    6f66:	886a      	ldrh	r2, [r5, #2]
    6f68:	b292      	uxth	r2, r2
    6f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6f6e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6f70:	f240 72fe 	movw	r2, #2046	; 0x7fe
    6f74:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    6f78:	69e3      	ldr	r3, [r4, #28]
    6f7a:	f013 0f04 	tst.w	r3, #4
    6f7e:	d1fb      	bne.n	6f78 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6f8a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6f8c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f8e:	69e3      	ldr	r3, [r4, #28]
    6f90:	f013 0f04 	tst.w	r3, #4
    6f94:	d1fb      	bne.n	6f8e <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    6f96:	2000      	movs	r0, #0
    6f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    6f9c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    6fa0:	d0d1      	beq.n	6f46 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6fa2:	6863      	ldr	r3, [r4, #4]
    6fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6fa8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6faa:	69e3      	ldr	r3, [r4, #28]
    6fac:	f013 0f04 	tst.w	r3, #4
    6fb0:	d1fb      	bne.n	6faa <_i2c_m_async_transfer+0xea>
    6fb2:	e7d0      	b.n	6f56 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6fb4:	8869      	ldrh	r1, [r5, #2]
    6fb6:	005a      	lsls	r2, r3, #1
    6fb8:	b2d2      	uxtb	r2, r2
    6fba:	f001 0301 	and.w	r3, r1, #1
    6fbe:	431a      	orrs	r2, r3
    6fc0:	69e3      	ldr	r3, [r4, #28]
    6fc2:	f013 0f04 	tst.w	r3, #4
    6fc6:	d1fb      	bne.n	6fc0 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6fce:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6fd0:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6fd2:	69e3      	ldr	r3, [r4, #28]
    6fd4:	f013 0f04 	tst.w	r3, #4
    6fd8:	d1fb      	bne.n	6fd2 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    6fda:	2000      	movs	r0, #0
    6fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    6fe0:	f06f 0003 	mvn.w	r0, #3
}
    6fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fe8:	0000d078 	.word	0x0000d078
    6fec:	00005745 	.word	0x00005745

00006ff0 <_i2c_m_async_register_callback>:
	switch (type) {
    6ff0:	2901      	cmp	r1, #1
    6ff2:	d006      	beq.n	7002 <_i2c_m_async_register_callback+0x12>
    6ff4:	b119      	cbz	r1, 6ffe <_i2c_m_async_register_callback+0xe>
    6ff6:	2902      	cmp	r1, #2
    6ff8:	d005      	beq.n	7006 <_i2c_m_async_register_callback+0x16>
}
    6ffa:	2000      	movs	r0, #0
    6ffc:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6ffe:	6142      	str	r2, [r0, #20]
		break;
    7000:	e7fb      	b.n	6ffa <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7002:	6182      	str	r2, [r0, #24]
		break;
    7004:	e7f9      	b.n	6ffa <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7006:	61c2      	str	r2, [r0, #28]
		break;
    7008:	e7f7      	b.n	6ffa <_i2c_m_async_register_callback+0xa>
	...

0000700c <SERCOM0_0_Handler>:
{
    700c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    700e:	4b02      	ldr	r3, [pc, #8]	; (7018 <SERCOM0_0_Handler+0xc>)
    7010:	6818      	ldr	r0, [r3, #0]
    7012:	4b02      	ldr	r3, [pc, #8]	; (701c <SERCOM0_0_Handler+0x10>)
    7014:	4798      	blx	r3
    7016:	bd08      	pop	{r3, pc}
    7018:	20000980 	.word	0x20000980
    701c:	0000661d 	.word	0x0000661d

00007020 <SERCOM0_1_Handler>:
{
    7020:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7022:	4b02      	ldr	r3, [pc, #8]	; (702c <SERCOM0_1_Handler+0xc>)
    7024:	6818      	ldr	r0, [r3, #0]
    7026:	4b02      	ldr	r3, [pc, #8]	; (7030 <SERCOM0_1_Handler+0x10>)
    7028:	4798      	blx	r3
    702a:	bd08      	pop	{r3, pc}
    702c:	20000980 	.word	0x20000980
    7030:	0000661d 	.word	0x0000661d

00007034 <SERCOM0_2_Handler>:
{
    7034:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7036:	4b02      	ldr	r3, [pc, #8]	; (7040 <SERCOM0_2_Handler+0xc>)
    7038:	6818      	ldr	r0, [r3, #0]
    703a:	4b02      	ldr	r3, [pc, #8]	; (7044 <SERCOM0_2_Handler+0x10>)
    703c:	4798      	blx	r3
    703e:	bd08      	pop	{r3, pc}
    7040:	20000980 	.word	0x20000980
    7044:	0000661d 	.word	0x0000661d

00007048 <SERCOM0_3_Handler>:
{
    7048:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    704a:	4b02      	ldr	r3, [pc, #8]	; (7054 <SERCOM0_3_Handler+0xc>)
    704c:	6818      	ldr	r0, [r3, #0]
    704e:	4b02      	ldr	r3, [pc, #8]	; (7058 <SERCOM0_3_Handler+0x10>)
    7050:	4798      	blx	r3
    7052:	bd08      	pop	{r3, pc}
    7054:	20000980 	.word	0x20000980
    7058:	0000661d 	.word	0x0000661d

0000705c <SERCOM1_0_Handler>:
{
    705c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    705e:	4b02      	ldr	r3, [pc, #8]	; (7068 <SERCOM1_0_Handler+0xc>)
    7060:	6858      	ldr	r0, [r3, #4]
    7062:	4b02      	ldr	r3, [pc, #8]	; (706c <SERCOM1_0_Handler+0x10>)
    7064:	4798      	blx	r3
    7066:	bd08      	pop	{r3, pc}
    7068:	20000980 	.word	0x20000980
    706c:	0000661d 	.word	0x0000661d

00007070 <SERCOM1_1_Handler>:
{
    7070:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7072:	4b02      	ldr	r3, [pc, #8]	; (707c <SERCOM1_1_Handler+0xc>)
    7074:	6858      	ldr	r0, [r3, #4]
    7076:	4b02      	ldr	r3, [pc, #8]	; (7080 <SERCOM1_1_Handler+0x10>)
    7078:	4798      	blx	r3
    707a:	bd08      	pop	{r3, pc}
    707c:	20000980 	.word	0x20000980
    7080:	0000661d 	.word	0x0000661d

00007084 <SERCOM1_2_Handler>:
{
    7084:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7086:	4b02      	ldr	r3, [pc, #8]	; (7090 <SERCOM1_2_Handler+0xc>)
    7088:	6858      	ldr	r0, [r3, #4]
    708a:	4b02      	ldr	r3, [pc, #8]	; (7094 <SERCOM1_2_Handler+0x10>)
    708c:	4798      	blx	r3
    708e:	bd08      	pop	{r3, pc}
    7090:	20000980 	.word	0x20000980
    7094:	0000661d 	.word	0x0000661d

00007098 <SERCOM1_3_Handler>:
{
    7098:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    709a:	4b02      	ldr	r3, [pc, #8]	; (70a4 <SERCOM1_3_Handler+0xc>)
    709c:	6858      	ldr	r0, [r3, #4]
    709e:	4b02      	ldr	r3, [pc, #8]	; (70a8 <SERCOM1_3_Handler+0x10>)
    70a0:	4798      	blx	r3
    70a2:	bd08      	pop	{r3, pc}
    70a4:	20000980 	.word	0x20000980
    70a8:	0000661d 	.word	0x0000661d

000070ac <SERCOM3_0_Handler>:
{
    70ac:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    70ae:	4b02      	ldr	r3, [pc, #8]	; (70b8 <SERCOM3_0_Handler+0xc>)
    70b0:	6898      	ldr	r0, [r3, #8]
    70b2:	4b02      	ldr	r3, [pc, #8]	; (70bc <SERCOM3_0_Handler+0x10>)
    70b4:	4798      	blx	r3
    70b6:	bd08      	pop	{r3, pc}
    70b8:	20000980 	.word	0x20000980
    70bc:	00006797 	.word	0x00006797

000070c0 <SERCOM3_1_Handler>:
{
    70c0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    70c2:	4b02      	ldr	r3, [pc, #8]	; (70cc <SERCOM3_1_Handler+0xc>)
    70c4:	6898      	ldr	r0, [r3, #8]
    70c6:	4b02      	ldr	r3, [pc, #8]	; (70d0 <SERCOM3_1_Handler+0x10>)
    70c8:	4798      	blx	r3
    70ca:	bd08      	pop	{r3, pc}
    70cc:	20000980 	.word	0x20000980
    70d0:	00006797 	.word	0x00006797

000070d4 <SERCOM3_2_Handler>:
{
    70d4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    70d6:	4b02      	ldr	r3, [pc, #8]	; (70e0 <SERCOM3_2_Handler+0xc>)
    70d8:	6898      	ldr	r0, [r3, #8]
    70da:	4b02      	ldr	r3, [pc, #8]	; (70e4 <SERCOM3_2_Handler+0x10>)
    70dc:	4798      	blx	r3
    70de:	bd08      	pop	{r3, pc}
    70e0:	20000980 	.word	0x20000980
    70e4:	00006797 	.word	0x00006797

000070e8 <SERCOM3_3_Handler>:
{
    70e8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    70ea:	4b02      	ldr	r3, [pc, #8]	; (70f4 <SERCOM3_3_Handler+0xc>)
    70ec:	6898      	ldr	r0, [r3, #8]
    70ee:	4b02      	ldr	r3, [pc, #8]	; (70f8 <SERCOM3_3_Handler+0x10>)
    70f0:	4798      	blx	r3
    70f2:	bd08      	pop	{r3, pc}
    70f4:	20000980 	.word	0x20000980
    70f8:	00006797 	.word	0x00006797

000070fc <SERCOM4_0_Handler>:
{
    70fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    70fe:	4b02      	ldr	r3, [pc, #8]	; (7108 <SERCOM4_0_Handler+0xc>)
    7100:	68d8      	ldr	r0, [r3, #12]
    7102:	4b02      	ldr	r3, [pc, #8]	; (710c <SERCOM4_0_Handler+0x10>)
    7104:	4798      	blx	r3
    7106:	bd08      	pop	{r3, pc}
    7108:	20000980 	.word	0x20000980
    710c:	0000661d 	.word	0x0000661d

00007110 <SERCOM4_1_Handler>:
{
    7110:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7112:	4b02      	ldr	r3, [pc, #8]	; (711c <SERCOM4_1_Handler+0xc>)
    7114:	68d8      	ldr	r0, [r3, #12]
    7116:	4b02      	ldr	r3, [pc, #8]	; (7120 <SERCOM4_1_Handler+0x10>)
    7118:	4798      	blx	r3
    711a:	bd08      	pop	{r3, pc}
    711c:	20000980 	.word	0x20000980
    7120:	0000661d 	.word	0x0000661d

00007124 <SERCOM4_2_Handler>:
{
    7124:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7126:	4b02      	ldr	r3, [pc, #8]	; (7130 <SERCOM4_2_Handler+0xc>)
    7128:	68d8      	ldr	r0, [r3, #12]
    712a:	4b02      	ldr	r3, [pc, #8]	; (7134 <SERCOM4_2_Handler+0x10>)
    712c:	4798      	blx	r3
    712e:	bd08      	pop	{r3, pc}
    7130:	20000980 	.word	0x20000980
    7134:	0000661d 	.word	0x0000661d

00007138 <SERCOM4_3_Handler>:
{
    7138:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    713a:	4b02      	ldr	r3, [pc, #8]	; (7144 <SERCOM4_3_Handler+0xc>)
    713c:	68d8      	ldr	r0, [r3, #12]
    713e:	4b02      	ldr	r3, [pc, #8]	; (7148 <SERCOM4_3_Handler+0x10>)
    7140:	4798      	blx	r3
    7142:	bd08      	pop	{r3, pc}
    7144:	20000980 	.word	0x20000980
    7148:	0000661d 	.word	0x0000661d

0000714c <SERCOM5_0_Handler>:
{
    714c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    714e:	4b02      	ldr	r3, [pc, #8]	; (7158 <SERCOM5_0_Handler+0xc>)
    7150:	6918      	ldr	r0, [r3, #16]
    7152:	4b02      	ldr	r3, [pc, #8]	; (715c <SERCOM5_0_Handler+0x10>)
    7154:	4798      	blx	r3
    7156:	bd08      	pop	{r3, pc}
    7158:	20000980 	.word	0x20000980
    715c:	00006a79 	.word	0x00006a79

00007160 <SERCOM5_1_Handler>:
{
    7160:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7162:	4b02      	ldr	r3, [pc, #8]	; (716c <SERCOM5_1_Handler+0xc>)
    7164:	6918      	ldr	r0, [r3, #16]
    7166:	4b02      	ldr	r3, [pc, #8]	; (7170 <SERCOM5_1_Handler+0x10>)
    7168:	4798      	blx	r3
    716a:	bd08      	pop	{r3, pc}
    716c:	20000980 	.word	0x20000980
    7170:	00006a79 	.word	0x00006a79

00007174 <SERCOM5_2_Handler>:
{
    7174:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7176:	4b02      	ldr	r3, [pc, #8]	; (7180 <SERCOM5_2_Handler+0xc>)
    7178:	6918      	ldr	r0, [r3, #16]
    717a:	4b02      	ldr	r3, [pc, #8]	; (7184 <SERCOM5_2_Handler+0x10>)
    717c:	4798      	blx	r3
    717e:	bd08      	pop	{r3, pc}
    7180:	20000980 	.word	0x20000980
    7184:	00006a79 	.word	0x00006a79

00007188 <SERCOM5_3_Handler>:
{
    7188:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    718a:	4b02      	ldr	r3, [pc, #8]	; (7194 <SERCOM5_3_Handler+0xc>)
    718c:	6918      	ldr	r0, [r3, #16]
    718e:	4b02      	ldr	r3, [pc, #8]	; (7198 <SERCOM5_3_Handler+0x10>)
    7190:	4798      	blx	r3
    7192:	bd08      	pop	{r3, pc}
    7194:	20000980 	.word	0x20000980
    7198:	00006a79 	.word	0x00006a79

0000719c <SERCOM6_0_Handler>:
{
    719c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    719e:	4b02      	ldr	r3, [pc, #8]	; (71a8 <SERCOM6_0_Handler+0xc>)
    71a0:	6958      	ldr	r0, [r3, #20]
    71a2:	4b02      	ldr	r3, [pc, #8]	; (71ac <SERCOM6_0_Handler+0x10>)
    71a4:	4798      	blx	r3
    71a6:	bd08      	pop	{r3, pc}
    71a8:	20000980 	.word	0x20000980
    71ac:	0000661d 	.word	0x0000661d

000071b0 <SERCOM6_1_Handler>:
{
    71b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    71b2:	4b02      	ldr	r3, [pc, #8]	; (71bc <SERCOM6_1_Handler+0xc>)
    71b4:	6958      	ldr	r0, [r3, #20]
    71b6:	4b02      	ldr	r3, [pc, #8]	; (71c0 <SERCOM6_1_Handler+0x10>)
    71b8:	4798      	blx	r3
    71ba:	bd08      	pop	{r3, pc}
    71bc:	20000980 	.word	0x20000980
    71c0:	0000661d 	.word	0x0000661d

000071c4 <SERCOM6_2_Handler>:
{
    71c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    71c6:	4b02      	ldr	r3, [pc, #8]	; (71d0 <SERCOM6_2_Handler+0xc>)
    71c8:	6958      	ldr	r0, [r3, #20]
    71ca:	4b02      	ldr	r3, [pc, #8]	; (71d4 <SERCOM6_2_Handler+0x10>)
    71cc:	4798      	blx	r3
    71ce:	bd08      	pop	{r3, pc}
    71d0:	20000980 	.word	0x20000980
    71d4:	0000661d 	.word	0x0000661d

000071d8 <SERCOM6_3_Handler>:
{
    71d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    71da:	4b02      	ldr	r3, [pc, #8]	; (71e4 <SERCOM6_3_Handler+0xc>)
    71dc:	6958      	ldr	r0, [r3, #20]
    71de:	4b02      	ldr	r3, [pc, #8]	; (71e8 <SERCOM6_3_Handler+0x10>)
    71e0:	4798      	blx	r3
    71e2:	bd08      	pop	{r3, pc}
    71e4:	20000980 	.word	0x20000980
    71e8:	0000661d 	.word	0x0000661d

000071ec <_spi_m_sync_init>:
{
    71ec:	b570      	push	{r4, r5, r6, lr}
    71ee:	4606      	mov	r6, r0
    71f0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    71f2:	4608      	mov	r0, r1
    71f4:	4b5d      	ldr	r3, [pc, #372]	; (736c <_spi_m_sync_init+0x180>)
    71f6:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    71f8:	2803      	cmp	r0, #3
    71fa:	d00c      	beq.n	7216 <_spi_m_sync_init+0x2a>
    71fc:	2807      	cmp	r0, #7
    71fe:	bf08      	it	eq
    7200:	2301      	moveq	r3, #1
    7202:	d009      	beq.n	7218 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    7204:	2e00      	cmp	r6, #0
    7206:	f000 809f 	beq.w	7348 <_spi_m_sync_init+0x15c>
    720a:	2c00      	cmp	r4, #0
    720c:	f040 80a5 	bne.w	735a <_spi_m_sync_init+0x16e>
	return NULL;
    7210:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7212:	2000      	movs	r0, #0
    7214:	e009      	b.n	722a <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    7216:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7218:	4d55      	ldr	r5, [pc, #340]	; (7370 <_spi_m_sync_init+0x184>)
    721a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    721e:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7220:	2e00      	cmp	r6, #0
    7222:	d0f6      	beq.n	7212 <_spi_m_sync_init+0x26>
    7224:	2001      	movs	r0, #1
    7226:	2c00      	cmp	r4, #0
    7228:	d0f3      	beq.n	7212 <_spi_m_sync_init+0x26>
    722a:	f640 226e 	movw	r2, #2670	; 0xa6e
    722e:	4951      	ldr	r1, [pc, #324]	; (7374 <_spi_m_sync_init+0x188>)
    7230:	4b51      	ldr	r3, [pc, #324]	; (7378 <_spi_m_sync_init+0x18c>)
    7232:	4798      	blx	r3
	if (regs == NULL) {
    7234:	2d00      	cmp	r5, #0
    7236:	f000 8084 	beq.w	7342 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    723a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    723c:	f013 0f01 	tst.w	r3, #1
    7240:	d11d      	bne.n	727e <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7242:	682b      	ldr	r3, [r5, #0]
    7244:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7248:	69e3      	ldr	r3, [r4, #28]
    724a:	f013 0f03 	tst.w	r3, #3
    724e:	d1fb      	bne.n	7248 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7250:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7252:	f013 0f02 	tst.w	r3, #2
    7256:	d00b      	beq.n	7270 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7258:	6823      	ldr	r3, [r4, #0]
    725a:	f023 0302 	bic.w	r3, r3, #2
    725e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7260:	69e3      	ldr	r3, [r4, #28]
    7262:	f013 0f03 	tst.w	r3, #3
    7266:	d1fb      	bne.n	7260 <_spi_m_sync_init+0x74>
    7268:	69e3      	ldr	r3, [r4, #28]
    726a:	f013 0f02 	tst.w	r3, #2
    726e:	d1fb      	bne.n	7268 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7270:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7274:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7276:	69e3      	ldr	r3, [r4, #28]
    7278:	f013 0f03 	tst.w	r3, #3
    727c:	d1fb      	bne.n	7276 <_spi_m_sync_init+0x8a>
    727e:	69e3      	ldr	r3, [r4, #28]
    7280:	f013 0f01 	tst.w	r3, #1
    7284:	d1fb      	bne.n	727e <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    7286:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7288:	682b      	ldr	r3, [r5, #0]
    728a:	f003 031c 	and.w	r3, r3, #28
    728e:	2b08      	cmp	r3, #8
    7290:	d02e      	beq.n	72f0 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7292:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7296:	4937      	ldr	r1, [pc, #220]	; (7374 <_spi_m_sync_init+0x188>)
    7298:	1c20      	adds	r0, r4, #0
    729a:	bf18      	it	ne
    729c:	2001      	movne	r0, #1
    729e:	4b36      	ldr	r3, [pc, #216]	; (7378 <_spi_m_sync_init+0x18c>)
    72a0:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    72a2:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    72a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    72a8:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    72ac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    72ae:	69e3      	ldr	r3, [r4, #28]
    72b0:	f013 0f03 	tst.w	r3, #3
    72b4:	d1fb      	bne.n	72ae <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    72b6:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    72b8:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    72bc:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    72c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    72c4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    72c6:	69e3      	ldr	r3, [r4, #28]
    72c8:	f013 0f17 	tst.w	r3, #23
    72cc:	d1fb      	bne.n	72c6 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    72ce:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    72d0:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    72d2:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    72d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    72d8:	686b      	ldr	r3, [r5, #4]
    72da:	f003 0307 	and.w	r3, r3, #7
    72de:	2b00      	cmp	r3, #0
    72e0:	bf0c      	ite	eq
    72e2:	2301      	moveq	r3, #1
    72e4:	2302      	movne	r3, #2
    72e6:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    72e8:	89eb      	ldrh	r3, [r5, #14]
    72ea:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    72ec:	2000      	movs	r0, #0
    72ee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    72f0:	f640 1284 	movw	r2, #2436	; 0x984
    72f4:	491f      	ldr	r1, [pc, #124]	; (7374 <_spi_m_sync_init+0x188>)
    72f6:	1c20      	adds	r0, r4, #0
    72f8:	bf18      	it	ne
    72fa:	2001      	movne	r0, #1
    72fc:	4b1e      	ldr	r3, [pc, #120]	; (7378 <_spi_m_sync_init+0x18c>)
    72fe:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7300:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7302:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7306:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    730a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    730c:	69e3      	ldr	r3, [r4, #28]
    730e:	f013 0f03 	tst.w	r3, #3
    7312:	d1fb      	bne.n	730c <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7314:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7316:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    731a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    731e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7322:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7326:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7328:	69e3      	ldr	r3, [r4, #28]
    732a:	f013 0f17 	tst.w	r3, #23
    732e:	d1fb      	bne.n	7328 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7330:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7332:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7334:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7336:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    733a:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    733c:	2b00      	cmp	r3, #0
    733e:	d1fc      	bne.n	733a <_spi_m_sync_init+0x14e>
    7340:	e7ca      	b.n	72d8 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7342:	f06f 000c 	mvn.w	r0, #12
    7346:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7348:	f640 226e 	movw	r2, #2670	; 0xa6e
    734c:	4909      	ldr	r1, [pc, #36]	; (7374 <_spi_m_sync_init+0x188>)
    734e:	2000      	movs	r0, #0
    7350:	4b09      	ldr	r3, [pc, #36]	; (7378 <_spi_m_sync_init+0x18c>)
    7352:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7354:	f06f 000c 	mvn.w	r0, #12
    7358:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    735a:	f640 226e 	movw	r2, #2670	; 0xa6e
    735e:	4905      	ldr	r1, [pc, #20]	; (7374 <_spi_m_sync_init+0x188>)
    7360:	2001      	movs	r0, #1
    7362:	4b05      	ldr	r3, [pc, #20]	; (7378 <_spi_m_sync_init+0x18c>)
    7364:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7366:	f06f 000c 	mvn.w	r0, #12
    736a:	bd70      	pop	{r4, r5, r6, pc}
    736c:	000065d9 	.word	0x000065d9
    7370:	0000d054 	.word	0x0000d054
    7374:	0000d078 	.word	0x0000d078
    7378:	00005745 	.word	0x00005745

0000737c <_spi_m_async_init>:
{
    737c:	b538      	push	{r3, r4, r5, lr}
    737e:	4604      	mov	r4, r0
    7380:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7382:	4b15      	ldr	r3, [pc, #84]	; (73d8 <_spi_m_async_init+0x5c>)
    7384:	4798      	blx	r3
	if (rc < 0) {
    7386:	2800      	cmp	r0, #0
    7388:	db24      	blt.n	73d4 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    738a:	4621      	mov	r1, r4
    738c:	4628      	mov	r0, r5
    738e:	4b13      	ldr	r3, [pc, #76]	; (73dc <_spi_m_async_init+0x60>)
    7390:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7392:	2300      	movs	r3, #0
    7394:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7396:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7398:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    739a:	4628      	mov	r0, r5
    739c:	4b10      	ldr	r3, [pc, #64]	; (73e0 <_spi_m_async_init+0x64>)
    739e:	4798      	blx	r3
    73a0:	1d01      	adds	r1, r0, #4
    73a2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73a4:	2401      	movs	r4, #1
    73a6:	f000 021f 	and.w	r2, r0, #31
    73aa:	fa04 f202 	lsl.w	r2, r4, r2
    73ae:	0943      	lsrs	r3, r0, #5
    73b0:	009b      	lsls	r3, r3, #2
    73b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    73b6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    73ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    73be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    73c2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    73ca:	3001      	adds	r0, #1
    73cc:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    73ce:	4281      	cmp	r1, r0
    73d0:	d1e9      	bne.n	73a6 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    73d2:	2000      	movs	r0, #0
}
    73d4:	bd38      	pop	{r3, r4, r5, pc}
    73d6:	bf00      	nop
    73d8:	000071ed 	.word	0x000071ed
    73dc:	0000668d 	.word	0x0000668d
    73e0:	000066ed 	.word	0x000066ed

000073e4 <_spi_m_async_enable>:
{
    73e4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    73e6:	4604      	mov	r4, r0
    73e8:	b160      	cbz	r0, 7404 <_spi_m_async_enable+0x20>
    73ea:	6800      	ldr	r0, [r0, #0]
    73ec:	3000      	adds	r0, #0
    73ee:	bf18      	it	ne
    73f0:	2001      	movne	r0, #1
    73f2:	f640 22db 	movw	r2, #2779	; 0xadb
    73f6:	4904      	ldr	r1, [pc, #16]	; (7408 <_spi_m_async_enable+0x24>)
    73f8:	4b04      	ldr	r3, [pc, #16]	; (740c <_spi_m_async_enable+0x28>)
    73fa:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    73fc:	6820      	ldr	r0, [r4, #0]
    73fe:	4b04      	ldr	r3, [pc, #16]	; (7410 <_spi_m_async_enable+0x2c>)
    7400:	4798      	blx	r3
}
    7402:	bd10      	pop	{r4, pc}
    7404:	2000      	movs	r0, #0
    7406:	e7f4      	b.n	73f2 <_spi_m_async_enable+0xe>
    7408:	0000d078 	.word	0x0000d078
    740c:	00005745 	.word	0x00005745
    7410:	00006725 	.word	0x00006725

00007414 <_spi_m_async_set_mode>:
{
    7414:	b538      	push	{r3, r4, r5, lr}
    7416:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7418:	4604      	mov	r4, r0
    741a:	b168      	cbz	r0, 7438 <_spi_m_async_set_mode+0x24>
    741c:	6800      	ldr	r0, [r0, #0]
    741e:	3000      	adds	r0, #0
    7420:	bf18      	it	ne
    7422:	2001      	movne	r0, #1
    7424:	f640 320c 	movw	r2, #2828	; 0xb0c
    7428:	4904      	ldr	r1, [pc, #16]	; (743c <_spi_m_async_set_mode+0x28>)
    742a:	4b05      	ldr	r3, [pc, #20]	; (7440 <_spi_m_async_set_mode+0x2c>)
    742c:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    742e:	4629      	mov	r1, r5
    7430:	6820      	ldr	r0, [r4, #0]
    7432:	4b04      	ldr	r3, [pc, #16]	; (7444 <_spi_m_async_set_mode+0x30>)
    7434:	4798      	blx	r3
}
    7436:	bd38      	pop	{r3, r4, r5, pc}
    7438:	2000      	movs	r0, #0
    743a:	e7f3      	b.n	7424 <_spi_m_async_set_mode+0x10>
    743c:	0000d078 	.word	0x0000d078
    7440:	00005745 	.word	0x00005745
    7444:	00006765 	.word	0x00006765

00007448 <_spi_m_async_set_baudrate>:
{
    7448:	b538      	push	{r3, r4, r5, lr}
    744a:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    744c:	4605      	mov	r5, r0
    744e:	b198      	cbz	r0, 7478 <_spi_m_async_set_baudrate+0x30>
    7450:	6800      	ldr	r0, [r0, #0]
    7452:	3000      	adds	r0, #0
    7454:	bf18      	it	ne
    7456:	2001      	movne	r0, #1
    7458:	f640 323b 	movw	r2, #2875	; 0xb3b
    745c:	4907      	ldr	r1, [pc, #28]	; (747c <_spi_m_async_set_baudrate+0x34>)
    745e:	4b08      	ldr	r3, [pc, #32]	; (7480 <_spi_m_async_set_baudrate+0x38>)
    7460:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7462:	682b      	ldr	r3, [r5, #0]
    7464:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7466:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    746a:	bf03      	ittte	eq
    746c:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    746e:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7470:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7472:	f06f 0003 	mvnne.w	r0, #3
}
    7476:	bd38      	pop	{r3, r4, r5, pc}
    7478:	2000      	movs	r0, #0
    747a:	e7ed      	b.n	7458 <_spi_m_async_set_baudrate+0x10>
    747c:	0000d078 	.word	0x0000d078
    7480:	00005745 	.word	0x00005745

00007484 <_spi_m_async_enable_tx>:
{
    7484:	b538      	push	{r3, r4, r5, lr}
    7486:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    7488:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    748a:	b160      	cbz	r0, 74a6 <_spi_m_async_enable_tx+0x22>
    748c:	1c20      	adds	r0, r4, #0
    748e:	bf18      	it	ne
    7490:	2001      	movne	r0, #1
    7492:	f640 32fe 	movw	r2, #3070	; 0xbfe
    7496:	4906      	ldr	r1, [pc, #24]	; (74b0 <_spi_m_async_enable_tx+0x2c>)
    7498:	4b06      	ldr	r3, [pc, #24]	; (74b4 <_spi_m_async_enable_tx+0x30>)
    749a:	4798      	blx	r3
	if (state) {
    749c:	b92d      	cbnz	r5, 74aa <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    749e:	2301      	movs	r3, #1
    74a0:	7523      	strb	r3, [r4, #20]
}
    74a2:	2000      	movs	r0, #0
    74a4:	bd38      	pop	{r3, r4, r5, pc}
    74a6:	2000      	movs	r0, #0
    74a8:	e7f3      	b.n	7492 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    74aa:	2301      	movs	r3, #1
    74ac:	75a3      	strb	r3, [r4, #22]
    74ae:	e7f8      	b.n	74a2 <_spi_m_async_enable_tx+0x1e>
    74b0:	0000d078 	.word	0x0000d078
    74b4:	00005745 	.word	0x00005745

000074b8 <_spi_m_async_enable_rx>:
{
    74b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ba:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    74bc:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    74be:	4e0c      	ldr	r6, [pc, #48]	; (74f0 <_spi_m_async_enable_rx+0x38>)
    74c0:	f640 4212 	movw	r2, #3090	; 0xc12
    74c4:	4631      	mov	r1, r6
    74c6:	3000      	adds	r0, #0
    74c8:	bf18      	it	ne
    74ca:	2001      	movne	r0, #1
    74cc:	4d09      	ldr	r5, [pc, #36]	; (74f4 <_spi_m_async_enable_rx+0x3c>)
    74ce:	47a8      	blx	r5
	ASSERT(hw);
    74d0:	f640 4213 	movw	r2, #3091	; 0xc13
    74d4:	4631      	mov	r1, r6
    74d6:	1c20      	adds	r0, r4, #0
    74d8:	bf18      	it	ne
    74da:	2001      	movne	r0, #1
    74dc:	47a8      	blx	r5
	if (state) {
    74de:	b91f      	cbnz	r7, 74e8 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    74e0:	2304      	movs	r3, #4
    74e2:	7523      	strb	r3, [r4, #20]
}
    74e4:	2000      	movs	r0, #0
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    74e8:	2304      	movs	r3, #4
    74ea:	75a3      	strb	r3, [r4, #22]
    74ec:	e7fa      	b.n	74e4 <_spi_m_async_enable_rx+0x2c>
    74ee:	bf00      	nop
    74f0:	0000d078 	.word	0x0000d078
    74f4:	00005745 	.word	0x00005745

000074f8 <_spi_m_async_enable_tx_complete>:
{
    74f8:	b538      	push	{r3, r4, r5, lr}
    74fa:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    74fc:	4604      	mov	r4, r0
    74fe:	b170      	cbz	r0, 751e <_spi_m_async_enable_tx_complete+0x26>
    7500:	6800      	ldr	r0, [r0, #0]
    7502:	3000      	adds	r0, #0
    7504:	bf18      	it	ne
    7506:	2001      	movne	r0, #1
    7508:	f640 4225 	movw	r2, #3109	; 0xc25
    750c:	4907      	ldr	r1, [pc, #28]	; (752c <_spi_m_async_enable_tx_complete+0x34>)
    750e:	4b08      	ldr	r3, [pc, #32]	; (7530 <_spi_m_async_enable_tx_complete+0x38>)
    7510:	4798      	blx	r3
	if (state) {
    7512:	b935      	cbnz	r5, 7522 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7514:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7516:	2202      	movs	r2, #2
    7518:	751a      	strb	r2, [r3, #20]
}
    751a:	2000      	movs	r0, #0
    751c:	bd38      	pop	{r3, r4, r5, pc}
    751e:	2000      	movs	r0, #0
    7520:	e7f2      	b.n	7508 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7522:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7524:	2202      	movs	r2, #2
    7526:	759a      	strb	r2, [r3, #22]
    7528:	e7f7      	b.n	751a <_spi_m_async_enable_tx_complete+0x22>
    752a:	bf00      	nop
    752c:	0000d078 	.word	0x0000d078
    7530:	00005745 	.word	0x00005745

00007534 <_spi_m_async_write_one>:
{
    7534:	b538      	push	{r3, r4, r5, lr}
    7536:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7538:	4604      	mov	r4, r0
    753a:	b160      	cbz	r0, 7556 <_spi_m_async_write_one+0x22>
    753c:	6800      	ldr	r0, [r0, #0]
    753e:	3000      	adds	r0, #0
    7540:	bf18      	it	ne
    7542:	2001      	movne	r0, #1
    7544:	f640 4237 	movw	r2, #3127	; 0xc37
    7548:	4904      	ldr	r1, [pc, #16]	; (755c <_spi_m_async_write_one+0x28>)
    754a:	4b05      	ldr	r3, [pc, #20]	; (7560 <_spi_m_async_write_one+0x2c>)
    754c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    754e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7550:	629d      	str	r5, [r3, #40]	; 0x28
}
    7552:	2000      	movs	r0, #0
    7554:	bd38      	pop	{r3, r4, r5, pc}
    7556:	2000      	movs	r0, #0
    7558:	e7f4      	b.n	7544 <_spi_m_async_write_one+0x10>
    755a:	bf00      	nop
    755c:	0000d078 	.word	0x0000d078
    7560:	00005745 	.word	0x00005745

00007564 <_spi_m_async_read_one>:
{
    7564:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7566:	4604      	mov	r4, r0
    7568:	b160      	cbz	r0, 7584 <_spi_m_async_read_one+0x20>
    756a:	6800      	ldr	r0, [r0, #0]
    756c:	3000      	adds	r0, #0
    756e:	bf18      	it	ne
    7570:	2001      	movne	r0, #1
    7572:	f640 4252 	movw	r2, #3154	; 0xc52
    7576:	4904      	ldr	r1, [pc, #16]	; (7588 <_spi_m_async_read_one+0x24>)
    7578:	4b04      	ldr	r3, [pc, #16]	; (758c <_spi_m_async_read_one+0x28>)
    757a:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    757c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    757e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7580:	b280      	uxth	r0, r0
    7582:	bd10      	pop	{r4, pc}
    7584:	2000      	movs	r0, #0
    7586:	e7f4      	b.n	7572 <_spi_m_async_read_one+0xe>
    7588:	0000d078 	.word	0x0000d078
    758c:	00005745 	.word	0x00005745

00007590 <_spi_m_async_register_callback>:
{
    7590:	b570      	push	{r4, r5, r6, lr}
    7592:	460d      	mov	r5, r1
    7594:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7596:	4604      	mov	r4, r0
    7598:	b168      	cbz	r0, 75b6 <_spi_m_async_register_callback+0x26>
    759a:	2903      	cmp	r1, #3
    759c:	bf8c      	ite	hi
    759e:	2000      	movhi	r0, #0
    75a0:	2001      	movls	r0, #1
    75a2:	f640 426b 	movw	r2, #3179	; 0xc6b
    75a6:	4905      	ldr	r1, [pc, #20]	; (75bc <_spi_m_async_register_callback+0x2c>)
    75a8:	4b05      	ldr	r3, [pc, #20]	; (75c0 <_spi_m_async_register_callback+0x30>)
    75aa:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    75ac:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    75b0:	60a6      	str	r6, [r4, #8]
}
    75b2:	2000      	movs	r0, #0
    75b4:	bd70      	pop	{r4, r5, r6, pc}
    75b6:	2000      	movs	r0, #0
    75b8:	e7f3      	b.n	75a2 <_spi_m_async_register_callback+0x12>
    75ba:	bf00      	nop
    75bc:	0000d078 	.word	0x0000d078
    75c0:	00005745 	.word	0x00005745

000075c4 <_spi_m_async_set_irq_state>:
{
    75c4:	b570      	push	{r4, r5, r6, lr}
    75c6:	460c      	mov	r4, r1
    75c8:	4615      	mov	r5, r2
	ASSERT(device);
    75ca:	4606      	mov	r6, r0
    75cc:	f640 42ac 	movw	r2, #3244	; 0xcac
    75d0:	4908      	ldr	r1, [pc, #32]	; (75f4 <_spi_m_async_set_irq_state+0x30>)
    75d2:	3000      	adds	r0, #0
    75d4:	bf18      	it	ne
    75d6:	2001      	movne	r0, #1
    75d8:	4b07      	ldr	r3, [pc, #28]	; (75f8 <_spi_m_async_set_irq_state+0x34>)
    75da:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    75dc:	2c03      	cmp	r4, #3
    75de:	d000      	beq.n	75e2 <_spi_m_async_set_irq_state+0x1e>
    75e0:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    75e2:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    75e4:	b115      	cbz	r5, 75ec <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    75e6:	2280      	movs	r2, #128	; 0x80
    75e8:	759a      	strb	r2, [r3, #22]
}
    75ea:	e7f9      	b.n	75e0 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    75ec:	2280      	movs	r2, #128	; 0x80
    75ee:	751a      	strb	r2, [r3, #20]
    75f0:	bd70      	pop	{r4, r5, r6, pc}
    75f2:	bf00      	nop
    75f4:	0000d078 	.word	0x0000d078
    75f8:	00005745 	.word	0x00005745

000075fc <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    75fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7600:	4605      	mov	r5, r0
    7602:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7604:	4608      	mov	r0, r1
    7606:	4b52      	ldr	r3, [pc, #328]	; (7750 <_spi_m_dma_init+0x154>)
    7608:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    760a:	2803      	cmp	r0, #3
    760c:	d00c      	beq.n	7628 <_spi_m_dma_init+0x2c>
    760e:	2807      	cmp	r0, #7
    7610:	bf08      	it	eq
    7612:	2301      	moveq	r3, #1
    7614:	d009      	beq.n	762a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7616:	2d00      	cmp	r5, #0
    7618:	f000 8086 	beq.w	7728 <_spi_m_dma_init+0x12c>
    761c:	2c00      	cmp	r4, #0
    761e:	f040 808d 	bne.w	773c <_spi_m_dma_init+0x140>
	return NULL;
    7622:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7624:	2000      	movs	r0, #0
    7626:	e009      	b.n	763c <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7628:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    762a:	4e4a      	ldr	r6, [pc, #296]	; (7754 <_spi_m_dma_init+0x158>)
    762c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7630:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7632:	2d00      	cmp	r5, #0
    7634:	d0f6      	beq.n	7624 <_spi_m_dma_init+0x28>
    7636:	2001      	movs	r0, #1
    7638:	2c00      	cmp	r4, #0
    763a:	d0f3      	beq.n	7624 <_spi_m_dma_init+0x28>
    763c:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7640:	4945      	ldr	r1, [pc, #276]	; (7758 <_spi_m_dma_init+0x15c>)
    7642:	4b46      	ldr	r3, [pc, #280]	; (775c <_spi_m_dma_init+0x160>)
    7644:	4798      	blx	r3

	if (regs == NULL) {
    7646:	2e00      	cmp	r6, #0
    7648:	d06a      	beq.n	7720 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    764a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    764c:	f013 0f01 	tst.w	r3, #1
    7650:	d11d      	bne.n	768e <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7652:	6833      	ldr	r3, [r6, #0]
    7654:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7658:	69e3      	ldr	r3, [r4, #28]
    765a:	f013 0f03 	tst.w	r3, #3
    765e:	d1fb      	bne.n	7658 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7660:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7662:	f013 0f02 	tst.w	r3, #2
    7666:	d00b      	beq.n	7680 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7668:	6823      	ldr	r3, [r4, #0]
    766a:	f023 0302 	bic.w	r3, r3, #2
    766e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7670:	69e3      	ldr	r3, [r4, #28]
    7672:	f013 0f03 	tst.w	r3, #3
    7676:	d1fb      	bne.n	7670 <_spi_m_dma_init+0x74>
    7678:	69e3      	ldr	r3, [r4, #28]
    767a:	f013 0f02 	tst.w	r3, #2
    767e:	d1fb      	bne.n	7678 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7680:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7684:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7686:	69e3      	ldr	r3, [r4, #28]
    7688:	f013 0f03 	tst.w	r3, #3
    768c:	d1fb      	bne.n	7686 <_spi_m_dma_init+0x8a>
    768e:	69e3      	ldr	r3, [r4, #28]
    7690:	f013 0f01 	tst.w	r3, #1
    7694:	d1fb      	bne.n	768e <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7696:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7698:	f44f 6217 	mov.w	r2, #2416	; 0x970
    769c:	492e      	ldr	r1, [pc, #184]	; (7758 <_spi_m_dma_init+0x15c>)
    769e:	1c20      	adds	r0, r4, #0
    76a0:	bf18      	it	ne
    76a2:	2001      	movne	r0, #1
    76a4:	4b2d      	ldr	r3, [pc, #180]	; (775c <_spi_m_dma_init+0x160>)
    76a6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    76a8:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    76aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    76ae:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    76b2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    76b4:	69e3      	ldr	r3, [r4, #28]
    76b6:	f013 0f03 	tst.w	r3, #3
    76ba:	d1fb      	bne.n	76b4 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    76bc:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    76be:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    76c2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    76c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    76ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    76cc:	69e3      	ldr	r3, [r4, #28]
    76ce:	f013 0f17 	tst.w	r3, #23
    76d2:	d1fb      	bne.n	76cc <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    76d4:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    76d6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    76d8:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    76da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    76de:	f105 0818 	add.w	r8, r5, #24
    76e2:	4620      	mov	r0, r4
    76e4:	4b1e      	ldr	r3, [pc, #120]	; (7760 <_spi_m_dma_init+0x164>)
    76e6:	4798      	blx	r3
    76e8:	4601      	mov	r1, r0
    76ea:	4640      	mov	r0, r8
    76ec:	4f1d      	ldr	r7, [pc, #116]	; (7764 <_spi_m_dma_init+0x168>)
    76ee:	47b8      	blx	r7
	dev->resource->back                 = dev;
    76f0:	69ab      	ldr	r3, [r5, #24]
    76f2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    76f4:	69ab      	ldr	r3, [r5, #24]
    76f6:	4a1c      	ldr	r2, [pc, #112]	; (7768 <_spi_m_dma_init+0x16c>)
    76f8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    76fa:	69ab      	ldr	r3, [r5, #24]
    76fc:	4e1b      	ldr	r6, [pc, #108]	; (776c <_spi_m_dma_init+0x170>)
    76fe:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7700:	4620      	mov	r0, r4
    7702:	4b1b      	ldr	r3, [pc, #108]	; (7770 <_spi_m_dma_init+0x174>)
    7704:	4798      	blx	r3
    7706:	4601      	mov	r1, r0
    7708:	4640      	mov	r0, r8
    770a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    770c:	69ab      	ldr	r3, [r5, #24]
    770e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7710:	69ab      	ldr	r3, [r5, #24]
    7712:	4a18      	ldr	r2, [pc, #96]	; (7774 <_spi_m_dma_init+0x178>)
    7714:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7716:	69ab      	ldr	r3, [r5, #24]
    7718:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    771a:	2000      	movs	r0, #0
    771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7720:	f06f 000c 	mvn.w	r0, #12
    7724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7728:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    772c:	490a      	ldr	r1, [pc, #40]	; (7758 <_spi_m_dma_init+0x15c>)
    772e:	2000      	movs	r0, #0
    7730:	4b0a      	ldr	r3, [pc, #40]	; (775c <_spi_m_dma_init+0x160>)
    7732:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7734:	f06f 000c 	mvn.w	r0, #12
    7738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    773c:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7740:	4905      	ldr	r1, [pc, #20]	; (7758 <_spi_m_dma_init+0x15c>)
    7742:	2001      	movs	r0, #1
    7744:	4b05      	ldr	r3, [pc, #20]	; (775c <_spi_m_dma_init+0x160>)
    7746:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7748:	f06f 000c 	mvn.w	r0, #12
    774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7750:	000065d9 	.word	0x000065d9
    7754:	0000d054 	.word	0x0000d054
    7758:	0000d078 	.word	0x0000d078
    775c:	00005745 	.word	0x00005745
    7760:	000067f9 	.word	0x000067f9
    7764:	00005fe1 	.word	0x00005fe1
    7768:	0000680d 	.word	0x0000680d
    776c:	00006825 	.word	0x00006825
    7770:	000067e5 	.word	0x000067e5
    7774:	00006819 	.word	0x00006819

00007778 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7778:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    777a:	4604      	mov	r4, r0
    777c:	b160      	cbz	r0, 7798 <_spi_m_dma_enable+0x20>
    777e:	6800      	ldr	r0, [r0, #0]
    7780:	3000      	adds	r0, #0
    7782:	bf18      	it	ne
    7784:	2001      	movne	r0, #1
    7786:	f640 52c9 	movw	r2, #3529	; 0xdc9
    778a:	4904      	ldr	r1, [pc, #16]	; (779c <_spi_m_dma_enable+0x24>)
    778c:	4b04      	ldr	r3, [pc, #16]	; (77a0 <_spi_m_dma_enable+0x28>)
    778e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7790:	6820      	ldr	r0, [r4, #0]
    7792:	4b04      	ldr	r3, [pc, #16]	; (77a4 <_spi_m_dma_enable+0x2c>)
    7794:	4798      	blx	r3
}
    7796:	bd10      	pop	{r4, pc}
    7798:	2000      	movs	r0, #0
    779a:	e7f4      	b.n	7786 <_spi_m_dma_enable+0xe>
    779c:	0000d078 	.word	0x0000d078
    77a0:	00005745 	.word	0x00005745
    77a4:	00006701 	.word	0x00006701

000077a8 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    77a8:	b570      	push	{r4, r5, r6, lr}
    77aa:	4605      	mov	r5, r0
    77ac:	4614      	mov	r4, r2
	switch (type) {
    77ae:	2901      	cmp	r1, #1
    77b0:	d00e      	beq.n	77d0 <_spi_m_dma_register_callback+0x28>
    77b2:	b111      	cbz	r1, 77ba <_spi_m_dma_register_callback+0x12>
    77b4:	2902      	cmp	r1, #2
    77b6:	d016      	beq.n	77e6 <_spi_m_dma_register_callback+0x3e>
    77b8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    77ba:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    77bc:	6800      	ldr	r0, [r0, #0]
    77be:	4b13      	ldr	r3, [pc, #76]	; (780c <_spi_m_dma_register_callback+0x64>)
    77c0:	4798      	blx	r3
    77c2:	1c22      	adds	r2, r4, #0
    77c4:	bf18      	it	ne
    77c6:	2201      	movne	r2, #1
    77c8:	2100      	movs	r1, #0
    77ca:	4b11      	ldr	r3, [pc, #68]	; (7810 <_spi_m_dma_register_callback+0x68>)
    77cc:	4798      	blx	r3
		break;
    77ce:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    77d0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    77d2:	6800      	ldr	r0, [r0, #0]
    77d4:	4b0f      	ldr	r3, [pc, #60]	; (7814 <_spi_m_dma_register_callback+0x6c>)
    77d6:	4798      	blx	r3
    77d8:	1c22      	adds	r2, r4, #0
    77da:	bf18      	it	ne
    77dc:	2201      	movne	r2, #1
    77de:	2100      	movs	r1, #0
    77e0:	4b0b      	ldr	r3, [pc, #44]	; (7810 <_spi_m_dma_register_callback+0x68>)
    77e2:	4798      	blx	r3
		break;
    77e4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    77e6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    77e8:	6800      	ldr	r0, [r0, #0]
    77ea:	4b0a      	ldr	r3, [pc, #40]	; (7814 <_spi_m_dma_register_callback+0x6c>)
    77ec:	4798      	blx	r3
    77ee:	3400      	adds	r4, #0
    77f0:	bf18      	it	ne
    77f2:	2401      	movne	r4, #1
    77f4:	4622      	mov	r2, r4
    77f6:	2101      	movs	r1, #1
    77f8:	4e05      	ldr	r6, [pc, #20]	; (7810 <_spi_m_dma_register_callback+0x68>)
    77fa:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    77fc:	6828      	ldr	r0, [r5, #0]
    77fe:	4b03      	ldr	r3, [pc, #12]	; (780c <_spi_m_dma_register_callback+0x64>)
    7800:	4798      	blx	r3
    7802:	4622      	mov	r2, r4
    7804:	2101      	movs	r1, #1
    7806:	47b0      	blx	r6
    7808:	bd70      	pop	{r4, r5, r6, pc}
    780a:	bf00      	nop
    780c:	000067e5 	.word	0x000067e5
    7810:	00005eb9 	.word	0x00005eb9
    7814:	000067f9 	.word	0x000067f9

00007818 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    781c:	4605      	mov	r5, r0
    781e:	4689      	mov	r9, r1
    7820:	4617      	mov	r7, r2
    7822:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7824:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7828:	4658      	mov	r0, fp
    782a:	4b46      	ldr	r3, [pc, #280]	; (7944 <_spi_m_dma_transfer+0x12c>)
    782c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    782e:	2803      	cmp	r0, #3
    7830:	d053      	beq.n	78da <_spi_m_dma_transfer+0xc2>
    7832:	2807      	cmp	r0, #7
    7834:	bf08      	it	eq
    7836:	2201      	moveq	r2, #1
    7838:	d050      	beq.n	78dc <_spi_m_dma_transfer+0xc4>
	return NULL;
    783a:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    783e:	4658      	mov	r0, fp
    7840:	4b41      	ldr	r3, [pc, #260]	; (7948 <_spi_m_dma_transfer+0x130>)
    7842:	4798      	blx	r3
    7844:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7846:	4658      	mov	r0, fp
    7848:	4b40      	ldr	r3, [pc, #256]	; (794c <_spi_m_dma_transfer+0x134>)
    784a:	4798      	blx	r3
    784c:	4604      	mov	r4, r0

	if (rxbuf) {
    784e:	2f00      	cmp	r7, #0
    7850:	d04b      	beq.n	78ea <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7852:	2d00      	cmp	r5, #0
    7854:	d047      	beq.n	78e6 <_spi_m_dma_transfer+0xce>
    7856:	f11b 0000 	adds.w	r0, fp, #0
    785a:	bf18      	it	ne
    785c:	2001      	movne	r0, #1
    785e:	f640 5213 	movw	r2, #3347	; 0xd13
    7862:	493b      	ldr	r1, [pc, #236]	; (7950 <_spi_m_dma_transfer+0x138>)
    7864:	4b3b      	ldr	r3, [pc, #236]	; (7954 <_spi_m_dma_transfer+0x13c>)
    7866:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7868:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    786a:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    786c:	f013 0f04 	tst.w	r3, #4
    7870:	d107      	bne.n	7882 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7872:	6853      	ldr	r3, [r2, #4]
    7874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7878:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    787a:	69d3      	ldr	r3, [r2, #28]
    787c:	f013 0f17 	tst.w	r3, #23
    7880:	d1fb      	bne.n	787a <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7882:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7884:	3128      	adds	r1, #40	; 0x28
    7886:	4630      	mov	r0, r6
    7888:	4b33      	ldr	r3, [pc, #204]	; (7958 <_spi_m_dma_transfer+0x140>)
    788a:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    788c:	4639      	mov	r1, r7
    788e:	4630      	mov	r0, r6
    7890:	4b32      	ldr	r3, [pc, #200]	; (795c <_spi_m_dma_transfer+0x144>)
    7892:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7894:	4641      	mov	r1, r8
    7896:	4630      	mov	r0, r6
    7898:	4b31      	ldr	r3, [pc, #196]	; (7960 <_spi_m_dma_transfer+0x148>)
    789a:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    789c:	2100      	movs	r1, #0
    789e:	4630      	mov	r0, r6
    78a0:	4b30      	ldr	r3, [pc, #192]	; (7964 <_spi_m_dma_transfer+0x14c>)
    78a2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    78a4:	f1b9 0f00 	cmp.w	r9, #0
    78a8:	d039      	beq.n	791e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    78aa:	4649      	mov	r1, r9
    78ac:	4620      	mov	r0, r4
    78ae:	4b2a      	ldr	r3, [pc, #168]	; (7958 <_spi_m_dma_transfer+0x140>)
    78b0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    78b2:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    78b4:	3128      	adds	r1, #40	; 0x28
    78b6:	4620      	mov	r0, r4
    78b8:	4b28      	ldr	r3, [pc, #160]	; (795c <_spi_m_dma_transfer+0x144>)
    78ba:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    78bc:	2101      	movs	r1, #1
    78be:	4620      	mov	r0, r4
    78c0:	4b29      	ldr	r3, [pc, #164]	; (7968 <_spi_m_dma_transfer+0x150>)
    78c2:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    78c4:	4641      	mov	r1, r8
    78c6:	4620      	mov	r0, r4
    78c8:	4b25      	ldr	r3, [pc, #148]	; (7960 <_spi_m_dma_transfer+0x148>)
    78ca:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    78cc:	2100      	movs	r1, #0
    78ce:	4620      	mov	r0, r4
    78d0:	4b24      	ldr	r3, [pc, #144]	; (7964 <_spi_m_dma_transfer+0x14c>)
    78d2:	4798      	blx	r3

	return ERR_NONE;
}
    78d4:	2000      	movs	r0, #0
    78d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    78da:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    78dc:	4b23      	ldr	r3, [pc, #140]	; (796c <_spi_m_dma_transfer+0x154>)
    78de:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    78e2:	4492      	add	sl, r2
    78e4:	e7ab      	b.n	783e <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    78e6:	2000      	movs	r0, #0
    78e8:	e7b9      	b.n	785e <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    78ea:	b1b5      	cbz	r5, 791a <_spi_m_dma_transfer+0x102>
    78ec:	f11b 0000 	adds.w	r0, fp, #0
    78f0:	bf18      	it	ne
    78f2:	2001      	movne	r0, #1
    78f4:	f640 521a 	movw	r2, #3354	; 0xd1a
    78f8:	4915      	ldr	r1, [pc, #84]	; (7950 <_spi_m_dma_transfer+0x138>)
    78fa:	4b16      	ldr	r3, [pc, #88]	; (7954 <_spi_m_dma_transfer+0x13c>)
    78fc:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    78fe:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7900:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7902:	f013 0f04 	tst.w	r3, #4
    7906:	d1cd      	bne.n	78a4 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7908:	6853      	ldr	r3, [r2, #4]
    790a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    790e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7910:	69d3      	ldr	r3, [r2, #28]
    7912:	f013 0f17 	tst.w	r3, #23
    7916:	d1fb      	bne.n	7910 <_spi_m_dma_transfer+0xf8>
    7918:	e7c4      	b.n	78a4 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    791a:	2000      	movs	r0, #0
    791c:	e7ea      	b.n	78f4 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    791e:	f10a 010e 	add.w	r1, sl, #14
    7922:	4620      	mov	r0, r4
    7924:	4b0c      	ldr	r3, [pc, #48]	; (7958 <_spi_m_dma_transfer+0x140>)
    7926:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7928:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    792a:	3128      	adds	r1, #40	; 0x28
    792c:	4620      	mov	r0, r4
    792e:	4b0b      	ldr	r3, [pc, #44]	; (795c <_spi_m_dma_transfer+0x144>)
    7930:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7932:	2100      	movs	r1, #0
    7934:	4620      	mov	r0, r4
    7936:	4b0c      	ldr	r3, [pc, #48]	; (7968 <_spi_m_dma_transfer+0x150>)
    7938:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    793a:	4641      	mov	r1, r8
    793c:	4620      	mov	r0, r4
    793e:	4b08      	ldr	r3, [pc, #32]	; (7960 <_spi_m_dma_transfer+0x148>)
    7940:	4798      	blx	r3
    7942:	e7c3      	b.n	78cc <_spi_m_dma_transfer+0xb4>
    7944:	000065d9 	.word	0x000065d9
    7948:	000067f9 	.word	0x000067f9
    794c:	000067e5 	.word	0x000067e5
    7950:	0000d078 	.word	0x0000d078
    7954:	00005745 	.word	0x00005745
    7958:	00005f1d 	.word	0x00005f1d
    795c:	00005f0d 	.word	0x00005f0d
    7960:	00005f49 	.word	0x00005f49
    7964:	00005fa1 	.word	0x00005fa1
    7968:	00005f2d 	.word	0x00005f2d
    796c:	0000d054 	.word	0x0000d054

00007970 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7970:	4b03      	ldr	r3, [pc, #12]	; (7980 <_delay_init+0x10>)
    7972:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7976:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7978:	2205      	movs	r2, #5
    797a:	601a      	str	r2, [r3, #0]
    797c:	4770      	bx	lr
    797e:	bf00      	nop
    7980:	e000e010 	.word	0xe000e010

00007984 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7984:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7986:	b303      	cbz	r3, 79ca <_delay_cycles+0x46>
{
    7988:	b430      	push	{r4, r5}
    798a:	1e5d      	subs	r5, r3, #1
    798c:	b2ed      	uxtb	r5, r5
	while (n--) {
    798e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7990:	4a12      	ldr	r2, [pc, #72]	; (79dc <_delay_cycles+0x58>)
    7992:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7996:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7998:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    799a:	6813      	ldr	r3, [r2, #0]
    799c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    79a0:	d0fb      	beq.n	799a <_delay_cycles+0x16>
	while (n--) {
    79a2:	3801      	subs	r0, #1
    79a4:	b2c0      	uxtb	r0, r0
    79a6:	28ff      	cmp	r0, #255	; 0xff
    79a8:	d1f5      	bne.n	7996 <_delay_cycles+0x12>
    79aa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    79ae:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    79b2:	3101      	adds	r1, #1
    79b4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    79b6:	4b09      	ldr	r3, [pc, #36]	; (79dc <_delay_cycles+0x58>)
    79b8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    79ba:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    79bc:	461a      	mov	r2, r3
    79be:	6813      	ldr	r3, [r2, #0]
    79c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    79c4:	d0fb      	beq.n	79be <_delay_cycles+0x3a>
		;
}
    79c6:	bc30      	pop	{r4, r5}
    79c8:	4770      	bx	lr
	SysTick->LOAD = buf;
    79ca:	4b04      	ldr	r3, [pc, #16]	; (79dc <_delay_cycles+0x58>)
    79cc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    79ce:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    79d0:	461a      	mov	r2, r3
    79d2:	6813      	ldr	r3, [r2, #0]
    79d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    79d8:	d0fb      	beq.n	79d2 <_delay_cycles+0x4e>
    79da:	4770      	bx	lr
    79dc:	e000e010 	.word	0xe000e010

000079e0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    79e0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    79e2:	6813      	ldr	r3, [r2, #0]
    79e4:	f043 0302 	orr.w	r3, r3, #2
    79e8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    79ea:	6913      	ldr	r3, [r2, #16]
    79ec:	f013 0f03 	tst.w	r3, #3
    79f0:	d1fb      	bne.n	79ea <_tc_timer_start+0xa>
}
    79f2:	4770      	bx	lr

000079f4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    79f4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    79f6:	6813      	ldr	r3, [r2, #0]
    79f8:	f023 0302 	bic.w	r3, r3, #2
    79fc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    79fe:	6913      	ldr	r3, [r2, #16]
    7a00:	f013 0f03 	tst.w	r3, #3
    7a04:	d1fb      	bne.n	79fe <_tc_timer_stop+0xa>
}
    7a06:	4770      	bx	lr

00007a08 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7a08:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a0a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7a0c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a10:	2a02      	cmp	r2, #2
    7a12:	d00a      	beq.n	7a2a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a14:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a16:	f012 0f0c 	tst.w	r2, #12
    7a1a:	d10c      	bne.n	7a36 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7a1c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7a1e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a20:	691a      	ldr	r2, [r3, #16]
    7a22:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7a26:	d1fb      	bne.n	7a20 <_tc_timer_set_period+0x18>
    7a28:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7a2a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a2c:	691a      	ldr	r2, [r3, #16]
    7a2e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7a32:	d1fb      	bne.n	7a2c <_tc_timer_set_period+0x24>
    7a34:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a36:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7a38:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a3c:	2a01      	cmp	r2, #1
    7a3e:	d000      	beq.n	7a42 <_tc_timer_set_period+0x3a>
    7a40:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7a42:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7a44:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a46:	691a      	ldr	r2, [r3, #16]
    7a48:	f012 0f20 	tst.w	r2, #32
    7a4c:	d1fb      	bne.n	7a46 <_tc_timer_set_period+0x3e>
    7a4e:	e7f7      	b.n	7a40 <_tc_timer_set_period+0x38>

00007a50 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7a50:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a52:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7a54:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a58:	2a02      	cmp	r2, #2
    7a5a:	d00a      	beq.n	7a72 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a5c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a5e:	f012 0f0c 	tst.w	r2, #12
    7a62:	d10c      	bne.n	7a7e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a64:	691a      	ldr	r2, [r3, #16]
    7a66:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7a6a:	d1fb      	bne.n	7a64 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7a6c:	8b98      	ldrh	r0, [r3, #28]
    7a6e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7a70:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a72:	691a      	ldr	r2, [r3, #16]
    7a74:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7a78:	d1fb      	bne.n	7a72 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7a7a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    7a7c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a7e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7a80:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a84:	2a01      	cmp	r2, #1
    7a86:	d001      	beq.n	7a8c <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7a88:	2000      	movs	r0, #0
}
    7a8a:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a8c:	691a      	ldr	r2, [r3, #16]
    7a8e:	f012 0f20 	tst.w	r2, #32
    7a92:	d1fb      	bne.n	7a8c <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7a94:	7ed8      	ldrb	r0, [r3, #27]
    7a96:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7a98:	4770      	bx	lr

00007a9a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7a9a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7a9c:	6913      	ldr	r3, [r2, #16]
    7a9e:	f013 0f03 	tst.w	r3, #3
    7aa2:	d1fb      	bne.n	7a9c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7aa4:	6810      	ldr	r0, [r2, #0]
}
    7aa6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7aaa:	4770      	bx	lr

00007aac <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7aac:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7aae:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7ab0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7ab2:	f012 0f01 	tst.w	r2, #1
    7ab6:	d100      	bne.n	7aba <tc_interrupt_handler+0xe>
    7ab8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7aba:	2201      	movs	r2, #1
    7abc:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7abe:	6803      	ldr	r3, [r0, #0]
    7ac0:	4798      	blx	r3
	}
}
    7ac2:	e7f9      	b.n	7ab8 <tc_interrupt_handler+0xc>

00007ac4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7ac4:	b570      	push	{r4, r5, r6, lr}
    7ac6:	b088      	sub	sp, #32
    7ac8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7aca:	466c      	mov	r4, sp
    7acc:	4d19      	ldr	r5, [pc, #100]	; (7b34 <get_tc_index+0x70>)
    7ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7ad2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7ada:	9b00      	ldr	r3, [sp, #0]
    7adc:	42b3      	cmp	r3, r6
    7ade:	d00c      	beq.n	7afa <get_tc_index+0x36>
    7ae0:	4630      	mov	r0, r6
    7ae2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7ae4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7ae6:	f852 1b04 	ldr.w	r1, [r2], #4
    7aea:	4281      	cmp	r1, r0
    7aec:	d006      	beq.n	7afc <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7aee:	3301      	adds	r3, #1
    7af0:	2b08      	cmp	r3, #8
    7af2:	d1f8      	bne.n	7ae6 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7af4:	2000      	movs	r0, #0
			return i;
    7af6:	b240      	sxtb	r0, r0
    7af8:	e013      	b.n	7b22 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7afa:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7afc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7b00:	d015      	beq.n	7b2e <get_tc_index+0x6a>
    7b02:	2b01      	cmp	r3, #1
    7b04:	d00f      	beq.n	7b26 <get_tc_index+0x62>
    7b06:	2b02      	cmp	r3, #2
    7b08:	d00f      	beq.n	7b2a <get_tc_index+0x66>
    7b0a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7b0c:	bf08      	it	eq
    7b0e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7b10:	d0f1      	beq.n	7af6 <get_tc_index+0x32>
	ASSERT(false);
    7b12:	f240 1267 	movw	r2, #359	; 0x167
    7b16:	4908      	ldr	r1, [pc, #32]	; (7b38 <get_tc_index+0x74>)
    7b18:	2000      	movs	r0, #0
    7b1a:	4b08      	ldr	r3, [pc, #32]	; (7b3c <get_tc_index+0x78>)
    7b1c:	4798      	blx	r3
	return -1;
    7b1e:	f04f 30ff 	mov.w	r0, #4294967295
}
    7b22:	b008      	add	sp, #32
    7b24:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7b26:	2001      	movs	r0, #1
    7b28:	e7e5      	b.n	7af6 <get_tc_index+0x32>
    7b2a:	2002      	movs	r0, #2
    7b2c:	e7e3      	b.n	7af6 <get_tc_index+0x32>
    7b2e:	2000      	movs	r0, #0
    7b30:	e7e1      	b.n	7af6 <get_tc_index+0x32>
    7b32:	bf00      	nop
    7b34:	0000d094 	.word	0x0000d094
    7b38:	0000d104 	.word	0x0000d104
    7b3c:	00005745 	.word	0x00005745

00007b40 <_tc_timer_init>:
{
    7b40:	b570      	push	{r4, r5, r6, lr}
    7b42:	4606      	mov	r6, r0
    7b44:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7b46:	4608      	mov	r0, r1
    7b48:	4b71      	ldr	r3, [pc, #452]	; (7d10 <_tc_timer_init+0x1d0>)
    7b4a:	4798      	blx	r3
    7b4c:	4605      	mov	r5, r0
	device->hw = hw;
    7b4e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7b50:	22a0      	movs	r2, #160	; 0xa0
    7b52:	4970      	ldr	r1, [pc, #448]	; (7d14 <_tc_timer_init+0x1d4>)
    7b54:	2001      	movs	r0, #1
    7b56:	4b70      	ldr	r3, [pc, #448]	; (7d18 <_tc_timer_init+0x1d8>)
    7b58:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7b5a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7b5c:	f013 0f01 	tst.w	r3, #1
    7b60:	d119      	bne.n	7b96 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b62:	6923      	ldr	r3, [r4, #16]
    7b64:	f013 0f03 	tst.w	r3, #3
    7b68:	d1fb      	bne.n	7b62 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7b6a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7b6c:	f013 0f02 	tst.w	r3, #2
    7b70:	d00b      	beq.n	7b8a <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7b72:	6823      	ldr	r3, [r4, #0]
    7b74:	f023 0302 	bic.w	r3, r3, #2
    7b78:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b7a:	6923      	ldr	r3, [r4, #16]
    7b7c:	f013 0f03 	tst.w	r3, #3
    7b80:	d1fb      	bne.n	7b7a <_tc_timer_init+0x3a>
    7b82:	6923      	ldr	r3, [r4, #16]
    7b84:	f013 0f02 	tst.w	r3, #2
    7b88:	d1fb      	bne.n	7b82 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7b8a:	2301      	movs	r3, #1
    7b8c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7b8e:	6923      	ldr	r3, [r4, #16]
    7b90:	f013 0f03 	tst.w	r3, #3
    7b94:	d1fb      	bne.n	7b8e <_tc_timer_init+0x4e>
    7b96:	6923      	ldr	r3, [r4, #16]
    7b98:	f013 0f01 	tst.w	r3, #1
    7b9c:	d1fb      	bne.n	7b96 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7b9e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ba2:	4a5e      	ldr	r2, [pc, #376]	; (7d1c <_tc_timer_init+0x1dc>)
    7ba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7baa:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bac:	6923      	ldr	r3, [r4, #16]
    7bae:	f013 0f03 	tst.w	r3, #3
    7bb2:	d1fb      	bne.n	7bac <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7bb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7bb8:	4958      	ldr	r1, [pc, #352]	; (7d1c <_tc_timer_init+0x1dc>)
    7bba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7bbe:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7bc2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7bc6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7bc8:	2301      	movs	r3, #1
    7bca:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7bcc:	f002 020c 	and.w	r2, r2, #12
    7bd0:	2a08      	cmp	r2, #8
    7bd2:	d056      	beq.n	7c82 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7bd4:	2a00      	cmp	r2, #0
    7bd6:	d16b      	bne.n	7cb0 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7bd8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7bdc:	4a4f      	ldr	r2, [pc, #316]	; (7d1c <_tc_timer_init+0x1dc>)
    7bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7be4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7be6:	6923      	ldr	r3, [r4, #16]
    7be8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7bec:	d1fb      	bne.n	7be6 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7bee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7bf2:	4a4a      	ldr	r2, [pc, #296]	; (7d1c <_tc_timer_init+0x1dc>)
    7bf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7bf8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7bfa:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bfc:	6923      	ldr	r3, [r4, #16]
    7bfe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7c02:	d1fb      	bne.n	7bfc <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7c04:	2301      	movs	r3, #1
    7c06:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7c08:	4b45      	ldr	r3, [pc, #276]	; (7d20 <_tc_timer_init+0x1e0>)
    7c0a:	429c      	cmp	r4, r3
    7c0c:	d077      	beq.n	7cfe <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7c0e:	4b45      	ldr	r3, [pc, #276]	; (7d24 <_tc_timer_init+0x1e4>)
    7c10:	429c      	cmp	r4, r3
    7c12:	d077      	beq.n	7d04 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7c14:	4b44      	ldr	r3, [pc, #272]	; (7d28 <_tc_timer_init+0x1e8>)
    7c16:	429c      	cmp	r4, r3
    7c18:	d077      	beq.n	7d0a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    7c1a:	4b44      	ldr	r3, [pc, #272]	; (7d2c <_tc_timer_init+0x1ec>)
    7c1c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7c1e:	bf04      	itt	eq
    7c20:	4b43      	ldreq	r3, [pc, #268]	; (7d30 <_tc_timer_init+0x1f0>)
    7c22:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7c24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7c28:	4a3c      	ldr	r2, [pc, #240]	; (7d1c <_tc_timer_init+0x1dc>)
    7c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7c2e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7c32:	2b00      	cmp	r3, #0
    7c34:	db23      	blt.n	7c7e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c36:	095a      	lsrs	r2, r3, #5
    7c38:	f003 031f 	and.w	r3, r3, #31
    7c3c:	2101      	movs	r1, #1
    7c3e:	fa01 f303 	lsl.w	r3, r1, r3
    7c42:	3220      	adds	r2, #32
    7c44:	493b      	ldr	r1, [pc, #236]	; (7d34 <_tc_timer_init+0x1f4>)
    7c46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c4e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7c52:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7c56:	4b31      	ldr	r3, [pc, #196]	; (7d1c <_tc_timer_init+0x1dc>)
    7c58:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7c5c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7c60:	2b00      	cmp	r3, #0
    7c62:	db0c      	blt.n	7c7e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c64:	0959      	lsrs	r1, r3, #5
    7c66:	f003 031f 	and.w	r3, r3, #31
    7c6a:	2201      	movs	r2, #1
    7c6c:	fa02 f303 	lsl.w	r3, r2, r3
    7c70:	4a30      	ldr	r2, [pc, #192]	; (7d34 <_tc_timer_init+0x1f4>)
    7c72:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7c76:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    7c7e:	2000      	movs	r0, #0
    7c80:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7c82:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7c86:	4a25      	ldr	r2, [pc, #148]	; (7d1c <_tc_timer_init+0x1dc>)
    7c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7c8e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c90:	6923      	ldr	r3, [r4, #16]
    7c92:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7c96:	d1fb      	bne.n	7c90 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7c98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7c9c:	4a1f      	ldr	r2, [pc, #124]	; (7d1c <_tc_timer_init+0x1dc>)
    7c9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7ca4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ca6:	6923      	ldr	r3, [r4, #16]
    7ca8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7cac:	d1fb      	bne.n	7ca6 <_tc_timer_init+0x166>
    7cae:	e7a9      	b.n	7c04 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7cb0:	2a04      	cmp	r2, #4
    7cb2:	d1a7      	bne.n	7c04 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7cb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7cb8:	4a18      	ldr	r2, [pc, #96]	; (7d1c <_tc_timer_init+0x1dc>)
    7cba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7cc2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cc4:	6923      	ldr	r3, [r4, #16]
    7cc6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7cca:	d1fb      	bne.n	7cc4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ccc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7cd0:	4a12      	ldr	r2, [pc, #72]	; (7d1c <_tc_timer_init+0x1dc>)
    7cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7cda:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cdc:	6923      	ldr	r3, [r4, #16]
    7cde:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ce2:	d1fb      	bne.n	7cdc <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ce4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ce8:	4a0c      	ldr	r2, [pc, #48]	; (7d1c <_tc_timer_init+0x1dc>)
    7cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7cee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7cf2:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cf4:	6923      	ldr	r3, [r4, #16]
    7cf6:	f013 0f20 	tst.w	r3, #32
    7cfa:	d1fb      	bne.n	7cf4 <_tc_timer_init+0x1b4>
    7cfc:	e782      	b.n	7c04 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7cfe:	4b0c      	ldr	r3, [pc, #48]	; (7d30 <_tc_timer_init+0x1f0>)
    7d00:	601e      	str	r6, [r3, #0]
    7d02:	e78a      	b.n	7c1a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7d04:	4b0a      	ldr	r3, [pc, #40]	; (7d30 <_tc_timer_init+0x1f0>)
    7d06:	605e      	str	r6, [r3, #4]
    7d08:	e78c      	b.n	7c24 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    7d0a:	4b09      	ldr	r3, [pc, #36]	; (7d30 <_tc_timer_init+0x1f0>)
    7d0c:	609e      	str	r6, [r3, #8]
    7d0e:	e789      	b.n	7c24 <_tc_timer_init+0xe4>
    7d10:	00007ac5 	.word	0x00007ac5
    7d14:	0000d104 	.word	0x0000d104
    7d18:	00005745 	.word	0x00005745
    7d1c:	0000d094 	.word	0x0000d094
    7d20:	40003800 	.word	0x40003800
    7d24:	40003c00 	.word	0x40003c00
    7d28:	4101a000 	.word	0x4101a000
    7d2c:	4101c000 	.word	0x4101c000
    7d30:	20000998 	.word	0x20000998
    7d34:	e000e100 	.word	0xe000e100

00007d38 <_tc_timer_deinit>:
{
    7d38:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    7d3a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    7d3c:	4620      	mov	r0, r4
    7d3e:	4b18      	ldr	r3, [pc, #96]	; (7da0 <_tc_timer_deinit+0x68>)
    7d40:	4798      	blx	r3
    7d42:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7d44:	22cd      	movs	r2, #205	; 0xcd
    7d46:	4917      	ldr	r1, [pc, #92]	; (7da4 <_tc_timer_deinit+0x6c>)
    7d48:	2001      	movs	r0, #1
    7d4a:	4b17      	ldr	r3, [pc, #92]	; (7da8 <_tc_timer_deinit+0x70>)
    7d4c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7d4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7d52:	4b16      	ldr	r3, [pc, #88]	; (7dac <_tc_timer_deinit+0x74>)
    7d54:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7d58:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	db0d      	blt.n	7d7c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d60:	095a      	lsrs	r2, r3, #5
    7d62:	f003 031f 	and.w	r3, r3, #31
    7d66:	2101      	movs	r1, #1
    7d68:	fa01 f303 	lsl.w	r3, r1, r3
    7d6c:	3220      	adds	r2, #32
    7d6e:	4910      	ldr	r1, [pc, #64]	; (7db0 <_tc_timer_deinit+0x78>)
    7d70:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d78:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7d7c:	6823      	ldr	r3, [r4, #0]
    7d7e:	f023 0302 	bic.w	r3, r3, #2
    7d82:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d84:	6923      	ldr	r3, [r4, #16]
    7d86:	f013 0f03 	tst.w	r3, #3
    7d8a:	d1fb      	bne.n	7d84 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7d8c:	6823      	ldr	r3, [r4, #0]
    7d8e:	f043 0301 	orr.w	r3, r3, #1
    7d92:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d94:	6923      	ldr	r3, [r4, #16]
    7d96:	f013 0f01 	tst.w	r3, #1
    7d9a:	d1fb      	bne.n	7d94 <_tc_timer_deinit+0x5c>
}
    7d9c:	bd38      	pop	{r3, r4, r5, pc}
    7d9e:	bf00      	nop
    7da0:	00007ac5 	.word	0x00007ac5
    7da4:	0000d104 	.word	0x0000d104
    7da8:	00005745 	.word	0x00005745
    7dac:	0000d094 	.word	0x0000d094
    7db0:	e000e100 	.word	0xe000e100

00007db4 <_tc_timer_set_irq>:
{
    7db4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    7db6:	68c0      	ldr	r0, [r0, #12]
    7db8:	4b09      	ldr	r3, [pc, #36]	; (7de0 <_tc_timer_set_irq+0x2c>)
    7dba:	4798      	blx	r3
    7dbc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7dbe:	f44f 7291 	mov.w	r2, #290	; 0x122
    7dc2:	4908      	ldr	r1, [pc, #32]	; (7de4 <_tc_timer_set_irq+0x30>)
    7dc4:	2001      	movs	r0, #1
    7dc6:	4b08      	ldr	r3, [pc, #32]	; (7de8 <_tc_timer_set_irq+0x34>)
    7dc8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    7dca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7dce:	4b07      	ldr	r3, [pc, #28]	; (7dec <_tc_timer_set_irq+0x38>)
    7dd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7dd4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    7dd8:	4b05      	ldr	r3, [pc, #20]	; (7df0 <_tc_timer_set_irq+0x3c>)
    7dda:	4798      	blx	r3
    7ddc:	bd10      	pop	{r4, pc}
    7dde:	bf00      	nop
    7de0:	00007ac5 	.word	0x00007ac5
    7de4:	0000d104 	.word	0x0000d104
    7de8:	00005745 	.word	0x00005745
    7dec:	0000d094 	.word	0x0000d094
    7df0:	00005cd9 	.word	0x00005cd9

00007df4 <_tc_get_timer>:
}
    7df4:	4800      	ldr	r0, [pc, #0]	; (7df8 <_tc_get_timer+0x4>)
    7df6:	4770      	bx	lr
    7df8:	20000378 	.word	0x20000378

00007dfc <TC0_Handler>:
{
    7dfc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    7dfe:	4b02      	ldr	r3, [pc, #8]	; (7e08 <TC0_Handler+0xc>)
    7e00:	6818      	ldr	r0, [r3, #0]
    7e02:	4b02      	ldr	r3, [pc, #8]	; (7e0c <TC0_Handler+0x10>)
    7e04:	4798      	blx	r3
    7e06:	bd08      	pop	{r3, pc}
    7e08:	20000998 	.word	0x20000998
    7e0c:	00007aad 	.word	0x00007aad

00007e10 <TC1_Handler>:
{
    7e10:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    7e12:	4b02      	ldr	r3, [pc, #8]	; (7e1c <TC1_Handler+0xc>)
    7e14:	6858      	ldr	r0, [r3, #4]
    7e16:	4b02      	ldr	r3, [pc, #8]	; (7e20 <TC1_Handler+0x10>)
    7e18:	4798      	blx	r3
    7e1a:	bd08      	pop	{r3, pc}
    7e1c:	20000998 	.word	0x20000998
    7e20:	00007aad 	.word	0x00007aad

00007e24 <TC2_Handler>:
{
    7e24:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    7e26:	4b02      	ldr	r3, [pc, #8]	; (7e30 <TC2_Handler+0xc>)
    7e28:	6898      	ldr	r0, [r3, #8]
    7e2a:	4b02      	ldr	r3, [pc, #8]	; (7e34 <TC2_Handler+0x10>)
    7e2c:	4798      	blx	r3
    7e2e:	bd08      	pop	{r3, pc}
    7e30:	20000998 	.word	0x20000998
    7e34:	00007aad 	.word	0x00007aad

00007e38 <TC3_Handler>:
{
    7e38:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    7e3a:	4b02      	ldr	r3, [pc, #8]	; (7e44 <TC3_Handler+0xc>)
    7e3c:	68d8      	ldr	r0, [r3, #12]
    7e3e:	4b02      	ldr	r3, [pc, #8]	; (7e48 <TC3_Handler+0x10>)
    7e40:	4798      	blx	r3
    7e42:	bd08      	pop	{r3, pc}
    7e44:	20000998 	.word	0x20000998
    7e48:	00007aad 	.word	0x00007aad

00007e4c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    7e4c:	2000      	movs	r0, #0
    7e4e:	4770      	bx	lr

00007e50 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7e50:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7e52:	7c83      	ldrb	r3, [r0, #18]
    7e54:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e58:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    7e5a:	f002 0107 	and.w	r1, r2, #7
    7e5e:	2901      	cmp	r1, #1
    7e60:	d00b      	beq.n	7e7a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7e62:	015a      	lsls	r2, r3, #5
    7e64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7e68:	2110      	movs	r1, #16
    7e6a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7e6e:	015b      	lsls	r3, r3, #5
    7e70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7e74:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    7e78:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    7e7a:	f012 0f40 	tst.w	r2, #64	; 0x40
    7e7e:	d00c      	beq.n	7e9a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    7e80:	7cc2      	ldrb	r2, [r0, #19]
    7e82:	f36f 1286 	bfc	r2, #6, #1
    7e86:	74c2      	strb	r2, [r0, #19]
    7e88:	015a      	lsls	r2, r3, #5
    7e8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7e8e:	2180      	movs	r1, #128	; 0x80
    7e90:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7e94:	2140      	movs	r1, #64	; 0x40
    7e96:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    7e9a:	7cc2      	ldrb	r2, [r0, #19]
    7e9c:	f36f 02c3 	bfc	r2, #3, #1
    7ea0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    7ea2:	490a      	ldr	r1, [pc, #40]	; (7ecc <_usb_d_dev_handle_setup+0x7c>)
    7ea4:	015a      	lsls	r2, r3, #5
    7ea6:	188c      	adds	r4, r1, r2
    7ea8:	2500      	movs	r5, #0
    7eaa:	72a5      	strb	r5, [r4, #10]
    7eac:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7eae:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    7eb2:	246f      	movs	r4, #111	; 0x6f
    7eb4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7eb8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7ebc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    7ec0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    7ec4:	7c80      	ldrb	r0, [r0, #18]
    7ec6:	4798      	blx	r3
    7ec8:	bd38      	pop	{r3, r4, r5, pc}
    7eca:	bf00      	nop
    7ecc:	200009a8 	.word	0x200009a8

00007ed0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7ed0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    7ed2:	2320      	movs	r3, #32
    7ed4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    7ed8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7eda:	7c83      	ldrb	r3, [r0, #18]
    7edc:	f003 030f 	and.w	r3, r3, #15
    7ee0:	015b      	lsls	r3, r3, #5
    7ee2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7ee6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    7eea:	4b04      	ldr	r3, [pc, #16]	; (7efc <_usb_d_dev_handle_stall+0x2c>)
    7eec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    7ef0:	6882      	ldr	r2, [r0, #8]
    7ef2:	2101      	movs	r1, #1
    7ef4:	7c80      	ldrb	r0, [r0, #18]
    7ef6:	4798      	blx	r3
    7ef8:	bd08      	pop	{r3, pc}
    7efa:	bf00      	nop
    7efc:	200009a8 	.word	0x200009a8

00007f00 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    7f00:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7f02:	7c84      	ldrb	r4, [r0, #18]
    7f04:	2cff      	cmp	r4, #255	; 0xff
    7f06:	d003      	beq.n	7f10 <_usb_d_dev_trans_done+0x10>
    7f08:	7cc3      	ldrb	r3, [r0, #19]
    7f0a:	f013 0f40 	tst.w	r3, #64	; 0x40
    7f0e:	d100      	bne.n	7f12 <_usb_d_dev_trans_done+0x12>
    7f10:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    7f12:	7cc2      	ldrb	r2, [r0, #19]
    7f14:	f36f 1286 	bfc	r2, #6, #1
    7f18:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    7f1a:	4a03      	ldr	r2, [pc, #12]	; (7f28 <_usb_d_dev_trans_done+0x28>)
    7f1c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    7f20:	6882      	ldr	r2, [r0, #8]
    7f22:	4620      	mov	r0, r4
    7f24:	47a8      	blx	r5
    7f26:	e7f3      	b.n	7f10 <_usb_d_dev_trans_done+0x10>
    7f28:	200009a8 	.word	0x200009a8

00007f2c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    7f2c:	b530      	push	{r4, r5, lr}
    7f2e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7f30:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    7f32:	2425      	movs	r4, #37	; 0x25
    7f34:	f88d 4004 	strb.w	r4, [sp, #4]
    7f38:	244a      	movs	r4, #74	; 0x4a
    7f3a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7f3e:	2bff      	cmp	r3, #255	; 0xff
    7f40:	d01e      	beq.n	7f80 <_usb_d_dev_trans_stop+0x54>
    7f42:	7cc4      	ldrb	r4, [r0, #19]
    7f44:	f014 0f40 	tst.w	r4, #64	; 0x40
    7f48:	d01a      	beq.n	7f80 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7f4a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    7f4e:	b1c9      	cbz	r1, 7f84 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7f50:	0163      	lsls	r3, r4, #5
    7f52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7f56:	2580      	movs	r5, #128	; 0x80
    7f58:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    7f5c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    7f5e:	a902      	add	r1, sp, #8
    7f60:	440b      	add	r3, r1
    7f62:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7f66:	0163      	lsls	r3, r4, #5
    7f68:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7f6c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7f70:	0163      	lsls	r3, r4, #5
    7f72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7f76:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    7f7a:	4611      	mov	r1, r2
    7f7c:	4b05      	ldr	r3, [pc, #20]	; (7f94 <_usb_d_dev_trans_stop+0x68>)
    7f7e:	4798      	blx	r3
}
    7f80:	b003      	add	sp, #12
    7f82:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7f84:	0163      	lsls	r3, r4, #5
    7f86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7f8a:	2540      	movs	r5, #64	; 0x40
    7f8c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    7f90:	e7e4      	b.n	7f5c <_usb_d_dev_trans_stop+0x30>
    7f92:	bf00      	nop
    7f94:	00007f01 	.word	0x00007f01

00007f98 <_usb_d_dev_handle_trfail>:
{
    7f98:	b530      	push	{r4, r5, lr}
    7f9a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    7f9c:	7c83      	ldrb	r3, [r0, #18]
    7f9e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    7fa2:	2204      	movs	r2, #4
    7fa4:	f88d 2004 	strb.w	r2, [sp, #4]
    7fa8:	2208      	movs	r2, #8
    7faa:	f88d 2005 	strb.w	r2, [sp, #5]
    7fae:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    7fb0:	460c      	mov	r4, r1
    7fb2:	b391      	cbz	r1, 801a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7fb4:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    7fb8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7fbc:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    7fc0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7fc4:	4a32      	ldr	r2, [pc, #200]	; (8090 <_usb_d_dev_handle_trfail+0xf8>)
    7fc6:	440a      	add	r2, r1
    7fc8:	7a91      	ldrb	r1, [r2, #10]
    7fca:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7fcc:	2d02      	cmp	r5, #2
    7fce:	d02c      	beq.n	802a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    7fd0:	f011 0f02 	tst.w	r1, #2
    7fd4:	d045      	beq.n	8062 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7fd6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    7fd8:	7a91      	ldrb	r1, [r2, #10]
    7fda:	f36f 0141 	bfc	r1, #1, #1
    7fde:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7fe0:	aa02      	add	r2, sp, #8
    7fe2:	4422      	add	r2, r4
    7fe4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7fe8:	015a      	lsls	r2, r3, #5
    7fea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7fee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7ff2:	015b      	lsls	r3, r3, #5
    7ff4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7ff8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    7ffc:	f005 0307 	and.w	r3, r5, #7
    8000:	2b01      	cmp	r3, #1
    8002:	d143      	bne.n	808c <_usb_d_dev_handle_trfail+0xf4>
    8004:	7cc3      	ldrb	r3, [r0, #19]
    8006:	f013 0f40 	tst.w	r3, #64	; 0x40
    800a:	d03f      	beq.n	808c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    800c:	09d9      	lsrs	r1, r3, #7
    800e:	428c      	cmp	r4, r1
    8010:	d03c      	beq.n	808c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8012:	2200      	movs	r2, #0
    8014:	4b1f      	ldr	r3, [pc, #124]	; (8094 <_usb_d_dev_handle_trfail+0xfc>)
    8016:	4798      	blx	r3
    8018:	e038      	b.n	808c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    801a:	0159      	lsls	r1, r3, #5
    801c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8020:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8024:	f005 0507 	and.w	r5, r5, #7
    8028:	e7ca      	b.n	7fc0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    802a:	f011 0f01 	tst.w	r1, #1
    802e:	d0cf      	beq.n	7fd0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8030:	7a91      	ldrb	r1, [r2, #10]
    8032:	f36f 0100 	bfc	r1, #0, #1
    8036:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8038:	aa02      	add	r2, sp, #8
    803a:	4422      	add	r2, r4
    803c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8040:	015a      	lsls	r2, r3, #5
    8042:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8046:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    804a:	015b      	lsls	r3, r3, #5
    804c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8050:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8054:	2204      	movs	r2, #4
    8056:	1c21      	adds	r1, r4, #0
    8058:	bf18      	it	ne
    805a:	2101      	movne	r1, #1
    805c:	4b0d      	ldr	r3, [pc, #52]	; (8094 <_usb_d_dev_handle_trfail+0xfc>)
    805e:	4798      	blx	r3
    8060:	e014      	b.n	808c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8062:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    8066:	4a0a      	ldr	r2, [pc, #40]	; (8090 <_usb_d_dev_handle_trfail+0xf8>)
    8068:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    806c:	2100      	movs	r1, #0
    806e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8070:	aa02      	add	r2, sp, #8
    8072:	4414      	add	r4, r2
    8074:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8078:	015a      	lsls	r2, r3, #5
    807a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    807e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8082:	015b      	lsls	r3, r3, #5
    8084:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8088:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    808c:	b003      	add	sp, #12
    808e:	bd30      	pop	{r4, r5, pc}
    8090:	200009a8 	.word	0x200009a8
    8094:	00007f2d 	.word	0x00007f2d

00008098 <_usb_d_dev_reset_epts>:
{
    8098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    809c:	4d0c      	ldr	r5, [pc, #48]	; (80d0 <_usb_d_dev_reset_epts+0x38>)
    809e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    80a2:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    80a6:	f04f 0803 	mov.w	r8, #3
    80aa:	4f0a      	ldr	r7, [pc, #40]	; (80d4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    80ac:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    80ae:	4641      	mov	r1, r8
    80b0:	4620      	mov	r0, r4
    80b2:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    80b4:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    80b6:	2300      	movs	r3, #0
    80b8:	74e3      	strb	r3, [r4, #19]
    80ba:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    80bc:	42ac      	cmp	r4, r5
    80be:	d1f6      	bne.n	80ae <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    80c0:	22c0      	movs	r2, #192	; 0xc0
    80c2:	4619      	mov	r1, r3
    80c4:	4802      	ldr	r0, [pc, #8]	; (80d0 <_usb_d_dev_reset_epts+0x38>)
    80c6:	4b04      	ldr	r3, [pc, #16]	; (80d8 <_usb_d_dev_reset_epts+0x40>)
    80c8:	4798      	blx	r3
    80ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ce:	bf00      	nop
    80d0:	200009a8 	.word	0x200009a8
    80d4:	00007f01 	.word	0x00007f01
    80d8:	0000b863 	.word	0x0000b863

000080dc <_usb_d_dev_in_next>:
{
    80dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    80e2:	7c84      	ldrb	r4, [r0, #18]
    80e4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    80e8:	4688      	mov	r8, r1
    80ea:	2900      	cmp	r1, #0
    80ec:	f000 80a0 	beq.w	8230 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    80f0:	4b58      	ldr	r3, [pc, #352]	; (8254 <_usb_d_dev_in_next+0x178>)
    80f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    80f6:	6958      	ldr	r0, [r3, #20]
    80f8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    80fc:	8a2b      	ldrh	r3, [r5, #16]
    80fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8102:	4293      	cmp	r3, r2
    8104:	f000 808e 	beq.w	8224 <_usb_d_dev_in_next+0x148>
    8108:	3b01      	subs	r3, #1
    810a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    810c:	7cef      	ldrb	r7, [r5, #19]
    810e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8112:	f1b8 0f00 	cmp.w	r8, #0
    8116:	d005      	beq.n	8124 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8118:	0162      	lsls	r2, r4, #5
    811a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    811e:	2302      	movs	r3, #2
    8120:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8124:	68a9      	ldr	r1, [r5, #8]
    8126:	eb0e 0301 	add.w	r3, lr, r1
    812a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    812c:	686e      	ldr	r6, [r5, #4]
    812e:	42b3      	cmp	r3, r6
    8130:	d23f      	bcs.n	81b2 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8132:	1af6      	subs	r6, r6, r3
    8134:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8136:	7cea      	ldrb	r2, [r5, #19]
    8138:	f012 0f20 	tst.w	r2, #32
    813c:	d02d      	beq.n	819a <_usb_d_dev_in_next+0xbe>
    813e:	8a2a      	ldrh	r2, [r5, #16]
    8140:	4296      	cmp	r6, r2
    8142:	bf28      	it	cs
    8144:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8146:	6829      	ldr	r1, [r5, #0]
    8148:	4632      	mov	r2, r6
    814a:	4419      	add	r1, r3
    814c:	68e8      	ldr	r0, [r5, #12]
    814e:	4b42      	ldr	r3, [pc, #264]	; (8258 <_usb_d_dev_in_next+0x17c>)
    8150:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8152:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8154:	4b3f      	ldr	r3, [pc, #252]	; (8254 <_usb_d_dev_in_next+0x178>)
    8156:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    815a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    815c:	4b3d      	ldr	r3, [pc, #244]	; (8254 <_usb_d_dev_in_next+0x178>)
    815e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8162:	695a      	ldr	r2, [r3, #20]
    8164:	f366 020d 	bfi	r2, r6, #0, #14
    8168:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    816a:	695a      	ldr	r2, [r3, #20]
    816c:	f36f 329b 	bfc	r2, #14, #14
    8170:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8172:	f1b8 0f00 	cmp.w	r8, #0
    8176:	d108      	bne.n	818a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8178:	2f01      	cmp	r7, #1
    817a:	bf0c      	ite	eq
    817c:	224e      	moveq	r2, #78	; 0x4e
    817e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8180:	0163      	lsls	r3, r4, #5
    8182:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8186:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    818a:	0164      	lsls	r4, r4, #5
    818c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8190:	2380      	movs	r3, #128	; 0x80
    8192:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    819a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    819e:	bf28      	it	cs
    81a0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    81a4:	6829      	ldr	r1, [r5, #0]
    81a6:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    81a8:	4a2a      	ldr	r2, [pc, #168]	; (8254 <_usb_d_dev_in_next+0x178>)
    81aa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    81ae:	6113      	str	r3, [r2, #16]
    81b0:	e7d4      	b.n	815c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    81b2:	7ceb      	ldrb	r3, [r5, #19]
    81b4:	f013 0f10 	tst.w	r3, #16
    81b8:	d00f      	beq.n	81da <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    81ba:	7ceb      	ldrb	r3, [r5, #19]
    81bc:	f36f 1304 	bfc	r3, #4, #1
    81c0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    81c2:	4b24      	ldr	r3, [pc, #144]	; (8254 <_usb_d_dev_in_next+0x178>)
    81c4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    81c8:	695a      	ldr	r2, [r3, #20]
    81ca:	f36f 020d 	bfc	r2, #0, #14
    81ce:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    81d0:	695a      	ldr	r2, [r3, #20]
    81d2:	f36f 329b 	bfc	r2, #14, #14
    81d6:	615a      	str	r2, [r3, #20]
    81d8:	e7cb      	b.n	8172 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    81da:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    81dc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    81e0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    81e4:	bf0c      	ite	eq
    81e6:	234b      	moveq	r3, #75	; 0x4b
    81e8:	234a      	movne	r3, #74	; 0x4a
    81ea:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    81ee:	8a2a      	ldrh	r2, [r5, #16]
    81f0:	ea00 030e 	and.w	r3, r0, lr
    81f4:	429a      	cmp	r2, r3
    81f6:	d005      	beq.n	8204 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    81f8:	2100      	movs	r1, #0
    81fa:	4628      	mov	r0, r5
    81fc:	4b17      	ldr	r3, [pc, #92]	; (825c <_usb_d_dev_in_next+0x180>)
    81fe:	4798      	blx	r3
	return;
    8200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8204:	7ceb      	ldrb	r3, [r5, #19]
    8206:	f36f 1386 	bfc	r3, #6, #1
    820a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    820c:	4b11      	ldr	r3, [pc, #68]	; (8254 <_usb_d_dev_in_next+0x178>)
    820e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8212:	68a9      	ldr	r1, [r5, #8]
    8214:	7ca8      	ldrb	r0, [r5, #18]
    8216:	4798      	blx	r3
    8218:	b9d0      	cbnz	r0, 8250 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    821a:	7ceb      	ldrb	r3, [r5, #19]
    821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8220:	74eb      	strb	r3, [r5, #19]
    8222:	e7e9      	b.n	81f8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8224:	7cef      	ldrb	r7, [r5, #19]
    8226:	f007 0707 	and.w	r7, r7, #7
    822a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    822e:	e773      	b.n	8118 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8230:	8a03      	ldrh	r3, [r0, #16]
    8232:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8236:	4293      	cmp	r3, r2
    8238:	d107      	bne.n	824a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    823a:	7cef      	ldrb	r7, [r5, #19]
    823c:	f007 0707 	and.w	r7, r7, #7
    8240:	f04f 0e00 	mov.w	lr, #0
    8244:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8248:	e76c      	b.n	8124 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    824a:	f04f 0e00 	mov.w	lr, #0
    824e:	e75b      	b.n	8108 <_usb_d_dev_in_next+0x2c>
    8250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8254:	200009a8 	.word	0x200009a8
    8258:	0000b84d 	.word	0x0000b84d
    825c:	00007f01 	.word	0x00007f01

00008260 <_usb_d_dev_out_next>:
{
    8260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8264:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8266:	7c85      	ldrb	r5, [r0, #18]
    8268:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    826c:	4689      	mov	r9, r1
    826e:	2900      	cmp	r1, #0
    8270:	d056      	beq.n	8320 <_usb_d_dev_out_next+0xc0>
    8272:	4b74      	ldr	r3, [pc, #464]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    8274:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8278:	685a      	ldr	r2, [r3, #4]
    827a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    827e:	685f      	ldr	r7, [r3, #4]
    8280:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8284:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8286:	8a06      	ldrh	r6, [r0, #16]
    8288:	f240 33ff 	movw	r3, #1023	; 0x3ff
    828c:	429e      	cmp	r6, r3
    828e:	f000 80ba 	beq.w	8406 <_usb_d_dev_out_next+0x1a6>
    8292:	3e01      	subs	r6, #1
    8294:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8296:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    829a:	f894 8013 	ldrb.w	r8, [r4, #19]
    829e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    82a2:	f1b9 0f00 	cmp.w	r9, #0
    82a6:	d005      	beq.n	82b4 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    82a8:	016b      	lsls	r3, r5, #5
    82aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    82ae:	2201      	movs	r2, #1
    82b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    82b4:	7ce3      	ldrb	r3, [r4, #19]
    82b6:	f013 0f20 	tst.w	r3, #32
    82ba:	d00d      	beq.n	82d8 <_usb_d_dev_out_next+0x78>
    82bc:	6862      	ldr	r2, [r4, #4]
    82be:	2a00      	cmp	r2, #0
    82c0:	d037      	beq.n	8332 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    82c2:	68a0      	ldr	r0, [r4, #8]
    82c4:	1a12      	subs	r2, r2, r0
    82c6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    82c8:	6823      	ldr	r3, [r4, #0]
    82ca:	42ba      	cmp	r2, r7
    82cc:	bf28      	it	cs
    82ce:	463a      	movcs	r2, r7
    82d0:	68e1      	ldr	r1, [r4, #12]
    82d2:	4418      	add	r0, r3
    82d4:	4b5c      	ldr	r3, [pc, #368]	; (8448 <_usb_d_dev_out_next+0x1e8>)
    82d6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    82d8:	6863      	ldr	r3, [r4, #4]
    82da:	b353      	cbz	r3, 8332 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    82dc:	f1b9 0f00 	cmp.w	r9, #0
    82e0:	d040      	beq.n	8364 <_usb_d_dev_out_next+0x104>
    82e2:	8a22      	ldrh	r2, [r4, #16]
    82e4:	42ba      	cmp	r2, r7
    82e6:	d93d      	bls.n	8364 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    82e8:	7ce3      	ldrb	r3, [r4, #19]
    82ea:	f36f 1304 	bfc	r3, #4, #1
    82ee:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    82f0:	68a3      	ldr	r3, [r4, #8]
    82f2:	445b      	add	r3, fp
    82f4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    82f6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    82fa:	ea4f 1345 	mov.w	r3, r5, lsl #5
    82fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8302:	bf0c      	ite	eq
    8304:	222d      	moveq	r2, #45	; 0x2d
    8306:	2225      	movne	r2, #37	; 0x25
    8308:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    830c:	b915      	cbnz	r5, 8314 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    830e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8310:	4b4c      	ldr	r3, [pc, #304]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    8312:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8314:	2100      	movs	r1, #0
    8316:	4620      	mov	r0, r4
    8318:	4b4c      	ldr	r3, [pc, #304]	; (844c <_usb_d_dev_out_next+0x1ec>)
    831a:	4798      	blx	r3
	return;
    831c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8320:	8a06      	ldrh	r6, [r0, #16]
    8322:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8326:	429e      	cmp	r6, r3
    8328:	d07b      	beq.n	8422 <_usb_d_dev_out_next+0x1c2>
    832a:	f04f 0b00 	mov.w	fp, #0
    832e:	46da      	mov	sl, fp
    8330:	e7af      	b.n	8292 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8332:	7ce3      	ldrb	r3, [r4, #19]
    8334:	f013 0f10 	tst.w	r3, #16
    8338:	d06c      	beq.n	8414 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    833a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    833c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8340:	f043 0320 	orr.w	r3, r3, #32
    8344:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8346:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8348:	493e      	ldr	r1, [pc, #248]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    834a:	016a      	lsls	r2, r5, #5
    834c:	188b      	adds	r3, r1, r2
    834e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8350:	8a21      	ldrh	r1, [r4, #16]
    8352:	685a      	ldr	r2, [r3, #4]
    8354:	f361 329b 	bfi	r2, r1, #14, #14
    8358:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    835a:	685a      	ldr	r2, [r3, #4]
    835c:	f36f 020d 	bfc	r2, #0, #14
    8360:	605a      	str	r2, [r3, #4]
    8362:	e01d      	b.n	83a0 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8364:	68a2      	ldr	r2, [r4, #8]
    8366:	4452      	add	r2, sl
    8368:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    836a:	4293      	cmp	r3, r2
    836c:	d9c3      	bls.n	82f6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    836e:	1a9b      	subs	r3, r3, r2
    8370:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8372:	7ce1      	ldrb	r1, [r4, #19]
    8374:	f011 0f20 	tst.w	r1, #32
    8378:	d026      	beq.n	83c8 <_usb_d_dev_out_next+0x168>
    837a:	8a22      	ldrh	r2, [r4, #16]
    837c:	4293      	cmp	r3, r2
    837e:	bf28      	it	cs
    8380:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8382:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8384:	016a      	lsls	r2, r5, #5
    8386:	492f      	ldr	r1, [pc, #188]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    8388:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    838a:	4a2e      	ldr	r2, [pc, #184]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    838c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8390:	6851      	ldr	r1, [r2, #4]
    8392:	f363 319b 	bfi	r1, r3, #14, #14
    8396:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8398:	6853      	ldr	r3, [r2, #4]
    839a:	f36f 030d 	bfc	r3, #0, #14
    839e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    83a0:	f1b9 0f00 	cmp.w	r9, #0
    83a4:	d108      	bne.n	83b8 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    83a6:	f1b8 0f01 	cmp.w	r8, #1
    83aa:	d025      	beq.n	83f8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    83ac:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    83ae:	016b      	lsls	r3, r5, #5
    83b0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    83b4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    83b8:	016d      	lsls	r5, r5, #5
    83ba:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    83be:	2340      	movs	r3, #64	; 0x40
    83c0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    83c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    83c8:	8a21      	ldrh	r1, [r4, #16]
    83ca:	428b      	cmp	r3, r1
    83cc:	d90a      	bls.n	83e4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    83ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    83d2:	d80e      	bhi.n	83f2 <_usb_d_dev_out_next+0x192>
    83d4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    83d8:	6821      	ldr	r1, [r4, #0]
    83da:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    83dc:	0169      	lsls	r1, r5, #5
    83de:	4819      	ldr	r0, [pc, #100]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    83e0:	5042      	str	r2, [r0, r1]
    83e2:	e7d2      	b.n	838a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    83e4:	428b      	cmp	r3, r1
    83e6:	d2f7      	bcs.n	83d8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    83e8:	7ce1      	ldrb	r1, [r4, #19]
    83ea:	f041 0120 	orr.w	r1, r1, #32
    83ee:	74e1      	strb	r1, [r4, #19]
    83f0:	e7f2      	b.n	83d8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    83f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    83f6:	e7ef      	b.n	83d8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    83f8:	4b12      	ldr	r3, [pc, #72]	; (8444 <_usb_d_dev_out_next+0x1e4>)
    83fa:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    83fe:	2200      	movs	r2, #0
    8400:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8402:	222d      	movs	r2, #45	; 0x2d
    8404:	e7d3      	b.n	83ae <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8406:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    840a:	f890 8013 	ldrb.w	r8, [r0, #19]
    840e:	f008 0807 	and.w	r8, r8, #7
    8412:	e749      	b.n	82a8 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8414:	f1b9 0f00 	cmp.w	r9, #0
    8418:	d10b      	bne.n	8432 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    841a:	68a3      	ldr	r3, [r4, #8]
    841c:	4453      	add	r3, sl
    841e:	60a3      	str	r3, [r4, #8]
    8420:	e769      	b.n	82f6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8422:	f890 8013 	ldrb.w	r8, [r0, #19]
    8426:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    842a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    842c:	46bb      	mov	fp, r7
    842e:	46ba      	mov	sl, r7
    8430:	e740      	b.n	82b4 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8432:	8a23      	ldrh	r3, [r4, #16]
    8434:	42bb      	cmp	r3, r7
    8436:	f63f af57 	bhi.w	82e8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    843a:	68a3      	ldr	r3, [r4, #8]
    843c:	4453      	add	r3, sl
    843e:	60a3      	str	r3, [r4, #8]
    8440:	e759      	b.n	82f6 <_usb_d_dev_out_next+0x96>
    8442:	bf00      	nop
    8444:	200009a8 	.word	0x200009a8
    8448:	0000b84d 	.word	0x0000b84d
    844c:	00007f01 	.word	0x00007f01

00008450 <_usb_d_dev_handler>:
{
    8450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8454:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8458:	8c1e      	ldrh	r6, [r3, #32]
    845a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    845c:	b146      	cbz	r6, 8470 <_usb_d_dev_handler+0x20>
    845e:	4d96      	ldr	r5, [pc, #600]	; (86b8 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8460:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8462:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8466:	f8df 926c 	ldr.w	r9, [pc, #620]	; 86d4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    846a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 86d8 <_usb_d_dev_handler+0x288>
    846e:	e0de      	b.n	862e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8470:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8472:	8b1b      	ldrh	r3, [r3, #24]
    8474:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8476:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8478:	f013 0f04 	tst.w	r3, #4
    847c:	d11e      	bne.n	84bc <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    847e:	f413 7f00 	tst.w	r3, #512	; 0x200
    8482:	d125      	bne.n	84d0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8484:	f013 0f80 	tst.w	r3, #128	; 0x80
    8488:	d14f      	bne.n	852a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    848a:	f013 0f70 	tst.w	r3, #112	; 0x70
    848e:	d158      	bne.n	8542 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8490:	f013 0f08 	tst.w	r3, #8
    8494:	d178      	bne.n	8588 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8496:	f013 0f01 	tst.w	r3, #1
    849a:	d0e0      	beq.n	845e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    849c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    84a0:	f240 2201 	movw	r2, #513	; 0x201
    84a4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    84a6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    84a8:	2270      	movs	r2, #112	; 0x70
    84aa:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    84ac:	4b83      	ldr	r3, [pc, #524]	; (86bc <_usb_d_dev_handler+0x26c>)
    84ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    84b2:	2100      	movs	r1, #0
    84b4:	2004      	movs	r0, #4
    84b6:	4798      	blx	r3
    84b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    84bc:	2204      	movs	r2, #4
    84be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    84c2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    84c4:	4b7d      	ldr	r3, [pc, #500]	; (86bc <_usb_d_dev_handler+0x26c>)
    84c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    84ca:	4798      	blx	r3
    84cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    84d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    84d4:	f240 2201 	movw	r2, #513	; 0x201
    84d8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    84da:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    84dc:	2270      	movs	r2, #112	; 0x70
    84de:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    84e0:	4b76      	ldr	r3, [pc, #472]	; (86bc <_usb_d_dev_handler+0x26c>)
    84e2:	891b      	ldrh	r3, [r3, #8]
    84e4:	f003 030f 	and.w	r3, r3, #15
    84e8:	2b03      	cmp	r3, #3
    84ea:	d014      	beq.n	8516 <_usb_d_dev_handler+0xc6>
    84ec:	2301      	movs	r3, #1
    84ee:	4873      	ldr	r0, [pc, #460]	; (86bc <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    84f0:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    84f2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    84f6:	8912      	ldrh	r2, [r2, #8]
    84f8:	f002 020f 	and.w	r2, r2, #15
    84fc:	2a03      	cmp	r2, #3
    84fe:	d00b      	beq.n	8518 <_usb_d_dev_handler+0xc8>
    8500:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8502:	2b05      	cmp	r3, #5
    8504:	d1f4      	bne.n	84f0 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8506:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8508:	4b6c      	ldr	r3, [pc, #432]	; (86bc <_usb_d_dev_handler+0x26c>)
    850a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    850e:	2003      	movs	r0, #3
    8510:	4798      	blx	r3
    8512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8516:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8518:	4b68      	ldr	r3, [pc, #416]	; (86bc <_usb_d_dev_handler+0x26c>)
    851a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    851e:	8919      	ldrh	r1, [r3, #8]
    8520:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8524:	2200      	movs	r2, #0
    8526:	811a      	strh	r2, [r3, #8]
    8528:	e7ee      	b.n	8508 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    852a:	2280      	movs	r2, #128	; 0x80
    852c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8530:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8532:	4b62      	ldr	r3, [pc, #392]	; (86bc <_usb_d_dev_handler+0x26c>)
    8534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8538:	2100      	movs	r1, #0
    853a:	2005      	movs	r0, #5
    853c:	4798      	blx	r3
    853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8542:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8546:	2270      	movs	r2, #112	; 0x70
    8548:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    854a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    854c:	f240 2201 	movw	r2, #513	; 0x201
    8550:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8552:	4b5b      	ldr	r3, [pc, #364]	; (86c0 <_usb_d_dev_handler+0x270>)
    8554:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8558:	f013 0f01 	tst.w	r3, #1
    855c:	d00e      	beq.n	857c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    855e:	4a58      	ldr	r2, [pc, #352]	; (86c0 <_usb_d_dev_handler+0x270>)
    8560:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8562:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8566:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    856a:	d1f9      	bne.n	8560 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    856c:	4b53      	ldr	r3, [pc, #332]	; (86bc <_usb_d_dev_handler+0x26c>)
    856e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8572:	2100      	movs	r1, #0
    8574:	2002      	movs	r0, #2
    8576:	4798      	blx	r3
    8578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    857c:	4a50      	ldr	r2, [pc, #320]	; (86c0 <_usb_d_dev_handler+0x270>)
    857e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8580:	f413 7f80 	tst.w	r3, #256	; 0x100
    8584:	d0fb      	beq.n	857e <_usb_d_dev_handler+0x12e>
    8586:	e7f1      	b.n	856c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8588:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    858c:	2400      	movs	r4, #0
    858e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8592:	2208      	movs	r2, #8
    8594:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8596:	2270      	movs	r2, #112	; 0x70
    8598:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    859a:	f240 2201 	movw	r2, #513	; 0x201
    859e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    85a0:	4b48      	ldr	r3, [pc, #288]	; (86c4 <_usb_d_dev_handler+0x274>)
    85a2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    85a4:	4b45      	ldr	r3, [pc, #276]	; (86bc <_usb_d_dev_handler+0x26c>)
    85a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    85aa:	4621      	mov	r1, r4
    85ac:	2001      	movs	r0, #1
    85ae:	4798      	blx	r3
    85b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    85b4:	f011 0f10 	tst.w	r1, #16
    85b8:	d109      	bne.n	85ce <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    85ba:	f011 0f40 	tst.w	r1, #64	; 0x40
    85be:	d108      	bne.n	85d2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    85c0:	f011 0f20 	tst.w	r1, #32
    85c4:	d02f      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    85c6:	2100      	movs	r1, #0
    85c8:	4b3f      	ldr	r3, [pc, #252]	; (86c8 <_usb_d_dev_handler+0x278>)
    85ca:	4798      	blx	r3
    85cc:	e02b      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    85ce:	47c8      	blx	r9
    85d0:	e029      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    85d2:	2101      	movs	r1, #1
    85d4:	4b3c      	ldr	r3, [pc, #240]	; (86c8 <_usb_d_dev_handler+0x278>)
    85d6:	4798      	blx	r3
    85d8:	e025      	b.n	8626 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    85da:	f011 0f40 	tst.w	r1, #64	; 0x40
    85de:	d111      	bne.n	8604 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    85e0:	f011 0f08 	tst.w	r1, #8
    85e4:	d112      	bne.n	860c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    85e6:	f011 0f02 	tst.w	r1, #2
    85ea:	d112      	bne.n	8612 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    85ec:	f003 0307 	and.w	r3, r3, #7
    85f0:	2b01      	cmp	r3, #1
    85f2:	d118      	bne.n	8626 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    85f4:	f011 0f04 	tst.w	r1, #4
    85f8:	d10f      	bne.n	861a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    85fa:	f011 0f10 	tst.w	r1, #16
    85fe:	d012      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8600:	47c8      	blx	r9
    8602:	e010      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8604:	2101      	movs	r1, #1
    8606:	4b30      	ldr	r3, [pc, #192]	; (86c8 <_usb_d_dev_handler+0x278>)
    8608:	4798      	blx	r3
    860a:	e00c      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    860c:	2101      	movs	r1, #1
    860e:	47c0      	blx	r8
    8610:	e009      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8612:	2101      	movs	r1, #1
    8614:	4b2d      	ldr	r3, [pc, #180]	; (86cc <_usb_d_dev_handler+0x27c>)
    8616:	4798      	blx	r3
    8618:	e005      	b.n	8626 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    861a:	2100      	movs	r1, #0
    861c:	47c0      	blx	r8
    861e:	e002      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8620:	2100      	movs	r1, #0
    8622:	4b29      	ldr	r3, [pc, #164]	; (86c8 <_usb_d_dev_handler+0x278>)
    8624:	4798      	blx	r3
    8626:	3401      	adds	r4, #1
    8628:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    862a:	2c1b      	cmp	r4, #27
    862c:	d042      	beq.n	86b4 <_usb_d_dev_handler+0x264>
    862e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8630:	7cab      	ldrb	r3, [r5, #18]
    8632:	2bff      	cmp	r3, #255	; 0xff
    8634:	d0f7      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8636:	f003 030f 	and.w	r3, r3, #15
    863a:	2101      	movs	r1, #1
    863c:	4099      	lsls	r1, r3
    863e:	4231      	tst	r1, r6
    8640:	d0f1      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8642:	0159      	lsls	r1, r3, #5
    8644:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8648:	f501 7180 	add.w	r1, r1, #256	; 0x100
    864c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    864e:	015b      	lsls	r3, r3, #5
    8650:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8654:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8658:	4019      	ands	r1, r3
    865a:	d0e4      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    865c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8660:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8664:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8668:	f003 0247 	and.w	r2, r3, #71	; 0x47
    866c:	2a01      	cmp	r2, #1
    866e:	d0a1      	beq.n	85b4 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8670:	f013 0f80 	tst.w	r3, #128	; 0x80
    8674:	d1b1      	bne.n	85da <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8676:	f011 0f20 	tst.w	r1, #32
    867a:	d1d1      	bne.n	8620 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    867c:	f011 0f04 	tst.w	r1, #4
    8680:	d10e      	bne.n	86a0 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8682:	f011 0f01 	tst.w	r1, #1
    8686:	d10e      	bne.n	86a6 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8688:	f003 0307 	and.w	r3, r3, #7
    868c:	2b01      	cmp	r3, #1
    868e:	d1ca      	bne.n	8626 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8690:	f011 0f08 	tst.w	r1, #8
    8694:	d10b      	bne.n	86ae <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8696:	f011 0f10 	tst.w	r1, #16
    869a:	d0c4      	beq.n	8626 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    869c:	47c8      	blx	r9
    869e:	e7c2      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    86a0:	2100      	movs	r1, #0
    86a2:	47c0      	blx	r8
    86a4:	e7bf      	b.n	8626 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    86a6:	2101      	movs	r1, #1
    86a8:	4b09      	ldr	r3, [pc, #36]	; (86d0 <_usb_d_dev_handler+0x280>)
    86aa:	4798      	blx	r3
    86ac:	e7bb      	b.n	8626 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    86ae:	2101      	movs	r1, #1
    86b0:	47c0      	blx	r8
    86b2:	e7b8      	b.n	8626 <_usb_d_dev_handler+0x1d6>
    86b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86b8:	20000a7c 	.word	0x20000a7c
    86bc:	200009a8 	.word	0x200009a8
    86c0:	40001000 	.word	0x40001000
    86c4:	00008099 	.word	0x00008099
    86c8:	00007ed1 	.word	0x00007ed1
    86cc:	000080dd 	.word	0x000080dd
    86d0:	00008261 	.word	0x00008261
    86d4:	00007e51 	.word	0x00007e51
    86d8:	00007f99 	.word	0x00007f99

000086dc <_usb_d_dev_init>:
{
    86dc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    86de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86e2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    86e4:	f013 0f01 	tst.w	r3, #1
    86e8:	d124      	bne.n	8734 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    86ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    86ee:	7893      	ldrb	r3, [r2, #2]
    86f0:	f013 0f03 	tst.w	r3, #3
    86f4:	d1fb      	bne.n	86ee <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    86f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86fa:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    86fc:	f013 0f02 	tst.w	r3, #2
    8700:	d00f      	beq.n	8722 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8702:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8706:	7813      	ldrb	r3, [r2, #0]
    8708:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    870c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    870e:	7893      	ldrb	r3, [r2, #2]
    8710:	f013 0f03 	tst.w	r3, #3
    8714:	d1fb      	bne.n	870e <_usb_d_dev_init+0x32>
    8716:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    871a:	7893      	ldrb	r3, [r2, #2]
    871c:	f013 0f02 	tst.w	r3, #2
    8720:	d1fb      	bne.n	871a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8722:	2201      	movs	r2, #1
    8724:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8728:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    872a:	461a      	mov	r2, r3
    872c:	7893      	ldrb	r3, [r2, #2]
    872e:	f013 0f03 	tst.w	r3, #3
    8732:	d1fb      	bne.n	872c <_usb_d_dev_init+0x50>
    8734:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8738:	7893      	ldrb	r3, [r2, #2]
    873a:	f013 0f01 	tst.w	r3, #1
    873e:	d1fb      	bne.n	8738 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8740:	4b24      	ldr	r3, [pc, #144]	; (87d4 <_usb_d_dev_init+0xf8>)
    8742:	4a25      	ldr	r2, [pc, #148]	; (87d8 <_usb_d_dev_init+0xfc>)
    8744:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8748:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    874c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8750:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8754:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8758:	4b20      	ldr	r3, [pc, #128]	; (87dc <_usb_d_dev_init+0x100>)
    875a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    875c:	4b20      	ldr	r3, [pc, #128]	; (87e0 <_usb_d_dev_init+0x104>)
    875e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8760:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8764:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8768:	f011 011f 	ands.w	r1, r1, #31
    876c:	d02b      	beq.n	87c6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    876e:	291f      	cmp	r1, #31
    8770:	bf08      	it	eq
    8772:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8774:	b34b      	cbz	r3, 87ca <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8776:	2b1f      	cmp	r3, #31
    8778:	bf08      	it	eq
    877a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    877c:	b33a      	cbz	r2, 87ce <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    877e:	2a07      	cmp	r2, #7
    8780:	bf08      	it	eq
    8782:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8784:	f003 031f 	and.w	r3, r3, #31
    8788:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    878c:	0312      	lsls	r2, r2, #12
    878e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8792:	4313      	orrs	r3, r2
    8794:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8798:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    879a:	78d3      	ldrb	r3, [r2, #3]
    879c:	f043 0303 	orr.w	r3, r3, #3
    87a0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    87a2:	78d3      	ldrb	r3, [r2, #3]
    87a4:	f043 030c 	orr.w	r3, r3, #12
    87a8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    87aa:	2304      	movs	r3, #4
    87ac:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    87ae:	7893      	ldrb	r3, [r2, #2]
    87b0:	f013 0f03 	tst.w	r3, #3
    87b4:	d1fb      	bne.n	87ae <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    87b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    87ba:	4a06      	ldr	r2, [pc, #24]	; (87d4 <_usb_d_dev_init+0xf8>)
    87bc:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    87be:	2201      	movs	r2, #1
    87c0:	811a      	strh	r2, [r3, #8]
}
    87c2:	2000      	movs	r0, #0
    87c4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    87c6:	2109      	movs	r1, #9
    87c8:	e7d4      	b.n	8774 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    87ca:	2319      	movs	r3, #25
    87cc:	e7d6      	b.n	877c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    87ce:	2206      	movs	r2, #6
    87d0:	e7d8      	b.n	8784 <_usb_d_dev_init+0xa8>
    87d2:	bf00      	nop
    87d4:	200009a8 	.word	0x200009a8
    87d8:	00007e4d 	.word	0x00007e4d
    87dc:	00008099 	.word	0x00008099
    87e0:	00800084 	.word	0x00800084

000087e4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    87e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    87e8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    87ea:	f013 0f03 	tst.w	r3, #3
    87ee:	d129      	bne.n	8844 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    87f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    87f4:	7893      	ldrb	r3, [r2, #2]
    87f6:	f013 0f03 	tst.w	r3, #3
    87fa:	d1fb      	bne.n	87f4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    87fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8804:	f013 0f02 	tst.w	r3, #2
    8808:	d108      	bne.n	881c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    880a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    880e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8812:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8814:	7893      	ldrb	r3, [r2, #2]
    8816:	f013 0f03 	tst.w	r3, #3
    881a:	d1fb      	bne.n	8814 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    881c:	4b0b      	ldr	r3, [pc, #44]	; (884c <_usb_d_dev_enable+0x68>)
    881e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8822:	609a      	str	r2, [r3, #8]
    8824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8828:	609a      	str	r2, [r3, #8]
    882a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    882e:	609a      	str	r2, [r3, #8]
    8830:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8834:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8836:	f240 228d 	movw	r2, #653	; 0x28d
    883a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    883e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8840:	2000      	movs	r0, #0
    8842:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8844:	f06f 0010 	mvn.w	r0, #16
}
    8848:	4770      	bx	lr
    884a:	bf00      	nop
    884c:	e000e100 	.word	0xe000e100

00008850 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8850:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8854:	8913      	ldrh	r3, [r2, #8]
    8856:	f023 0301 	bic.w	r3, r3, #1
    885a:	041b      	lsls	r3, r3, #16
    885c:	0c1b      	lsrs	r3, r3, #16
    885e:	8113      	strh	r3, [r2, #8]
    8860:	4770      	bx	lr

00008862 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8862:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8866:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    886a:	7298      	strb	r0, [r3, #10]
    886c:	4770      	bx	lr

0000886e <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    886e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8872:	8a18      	ldrh	r0, [r3, #16]
}
    8874:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    8878:	4770      	bx	lr
	...

0000887c <_usb_d_dev_ep_init>:
{
    887c:	b5f0      	push	{r4, r5, r6, r7, lr}
    887e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8882:	f010 050f 	ands.w	r5, r0, #15
    8886:	d04d      	beq.n	8924 <_usb_d_dev_ep_init+0xa8>
    8888:	f1be 0f00 	cmp.w	lr, #0
    888c:	bfb4      	ite	lt
    888e:	1d6c      	addlt	r4, r5, #5
    8890:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8892:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8896:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8898:	2d05      	cmp	r5, #5
    889a:	d947      	bls.n	892c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    889c:	f06f 0011 	mvn.w	r0, #17
    88a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    88a2:	f1be 0f00 	cmp.w	lr, #0
    88a6:	db1b      	blt.n	88e0 <_usb_d_dev_ep_init+0x64>
    88a8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    88ac:	4e37      	ldr	r6, [pc, #220]	; (898c <_usb_d_dev_ep_init+0x110>)
    88ae:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    88b2:	2d00      	cmp	r5, #0
    88b4:	d15e      	bne.n	8974 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    88b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    88ba:	4d34      	ldr	r5, [pc, #208]	; (898c <_usb_d_dev_ep_init+0x110>)
    88bc:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    88c0:	4d33      	ldr	r5, [pc, #204]	; (8990 <_usb_d_dev_ep_init+0x114>)
    88c2:	00a6      	lsls	r6, r4, #2
    88c4:	1933      	adds	r3, r6, r4
    88c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    88ca:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    88ce:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    88d2:	3101      	adds	r1, #1
    88d4:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    88d8:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    88dc:	2000      	movs	r0, #0
    88de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    88e0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    88e4:	4e29      	ldr	r6, [pc, #164]	; (898c <_usb_d_dev_ep_init+0x110>)
    88e6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    88ea:	686d      	ldr	r5, [r5, #4]
    88ec:	b935      	cbnz	r5, 88fc <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    88ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    88f2:	4d26      	ldr	r5, [pc, #152]	; (898c <_usb_d_dev_ep_init+0x110>)
    88f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    88f8:	685f      	ldr	r7, [r3, #4]
    88fa:	e7e1      	b.n	88c0 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    88fc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8900:	4e22      	ldr	r6, [pc, #136]	; (898c <_usb_d_dev_ep_init+0x110>)
    8902:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8906:	896d      	ldrh	r5, [r5, #10]
    8908:	4295      	cmp	r5, r2
    890a:	daf0      	bge.n	88ee <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    890c:	f06f 0012 	mvn.w	r0, #18
    8910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8912:	f06f 0013 	mvn.w	r0, #19
    8916:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8918:	f06f 0013 	mvn.w	r0, #19
    891c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    891e:	f06f 0012 	mvn.w	r0, #18
    8922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8924:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8928:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    892a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    892c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8930:	4f17      	ldr	r7, [pc, #92]	; (8990 <_usb_d_dev_ep_init+0x114>)
    8932:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    8936:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    893a:	2eff      	cmp	r6, #255	; 0xff
    893c:	d1e9      	bne.n	8912 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    893e:	2900      	cmp	r1, #0
    8940:	d1af      	bne.n	88a2 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8942:	b125      	cbz	r5, 894e <_usb_d_dev_ep_init+0xd2>
    8944:	f1be 0f00 	cmp.w	lr, #0
    8948:	bfa4      	itt	ge
    894a:	3505      	addge	r5, #5
    894c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    894e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8952:	4e0f      	ldr	r6, [pc, #60]	; (8990 <_usb_d_dev_ep_init+0x114>)
    8954:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8958:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    895c:	2dff      	cmp	r5, #255	; 0xff
    895e:	d1db      	bne.n	8918 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8960:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8964:	4e09      	ldr	r6, [pc, #36]	; (898c <_usb_d_dev_ep_init+0x110>)
    8966:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    896a:	2d00      	cmp	r5, #0
    896c:	d0d7      	beq.n	891e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    896e:	f1be 0f00 	cmp.w	lr, #0
    8972:	dbb5      	blt.n	88e0 <_usb_d_dev_ep_init+0x64>
    8974:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8978:	4e04      	ldr	r6, [pc, #16]	; (898c <_usb_d_dev_ep_init+0x110>)
    897a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    897e:	892d      	ldrh	r5, [r5, #8]
    8980:	4295      	cmp	r5, r2
    8982:	da98      	bge.n	88b6 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8984:	f06f 0012 	mvn.w	r0, #18
    8988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    898a:	bf00      	nop
    898c:	0000d118 	.word	0x0000d118
    8990:	200009a8 	.word	0x200009a8

00008994 <_usb_d_dev_ep_deinit>:
{
    8994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8996:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8998:	f010 060f 	ands.w	r6, r0, #15
    899c:	d00e      	beq.n	89bc <_usb_d_dev_ep_deinit+0x28>
    899e:	2f00      	cmp	r7, #0
    89a0:	bfb4      	ite	lt
    89a2:	1d73      	addlt	r3, r6, #5
    89a4:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    89a6:	2e05      	cmp	r6, #5
    89a8:	d900      	bls.n	89ac <_usb_d_dev_ep_deinit+0x18>
    89aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    89ac:	461d      	mov	r5, r3
    89ae:	3301      	adds	r3, #1
    89b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    89b4:	4a24      	ldr	r2, [pc, #144]	; (8a48 <_usb_d_dev_ep_deinit+0xb4>)
    89b6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    89ba:	e002      	b.n	89c2 <_usb_d_dev_ep_deinit+0x2e>
    89bc:	f8df e094 	ldr.w	lr, [pc, #148]	; 8a54 <_usb_d_dev_ep_deinit+0xc0>
    89c0:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    89c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    89c6:	4a21      	ldr	r2, [pc, #132]	; (8a4c <_usb_d_dev_ep_deinit+0xb8>)
    89c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89cc:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    89d0:	2aff      	cmp	r2, #255	; 0xff
    89d2:	d0ea      	beq.n	89aa <_usb_d_dev_ep_deinit+0x16>
    89d4:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    89d6:	2203      	movs	r2, #3
    89d8:	0ff9      	lsrs	r1, r7, #31
    89da:	4670      	mov	r0, lr
    89dc:	4b1c      	ldr	r3, [pc, #112]	; (8a50 <_usb_d_dev_ep_deinit+0xbc>)
    89de:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    89e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    89e4:	4a19      	ldr	r2, [pc, #100]	; (8a4c <_usb_d_dev_ep_deinit+0xb8>)
    89e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89ea:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    89ee:	f003 0307 	and.w	r3, r3, #7
    89f2:	2b01      	cmp	r3, #1
    89f4:	d016      	beq.n	8a24 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    89f6:	2f00      	cmp	r7, #0
    89f8:	db1b      	blt.n	8a32 <_usb_d_dev_ep_deinit+0x9e>
    89fa:	0160      	lsls	r0, r4, #5
    89fc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8a00:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8a04:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8a08:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8a0c:	4b0f      	ldr	r3, [pc, #60]	; (8a4c <_usb_d_dev_ep_deinit+0xb8>)
    8a0e:	00aa      	lsls	r2, r5, #2
    8a10:	1951      	adds	r1, r2, r5
    8a12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8a16:	2000      	movs	r0, #0
    8a18:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8a1c:	22ff      	movs	r2, #255	; 0xff
    8a1e:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8a22:	e7c2      	b.n	89aa <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8a24:	0160      	lsls	r0, r4, #5
    8a26:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8a2a:	2300      	movs	r3, #0
    8a2c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8a30:	e7ec      	b.n	8a0c <_usb_d_dev_ep_deinit+0x78>
    8a32:	0176      	lsls	r6, r6, #5
    8a34:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8a38:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8a3c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8a40:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8a44:	e7e2      	b.n	8a0c <_usb_d_dev_ep_deinit+0x78>
    8a46:	bf00      	nop
    8a48:	20000a68 	.word	0x20000a68
    8a4c:	200009a8 	.word	0x200009a8
    8a50:	00007f2d 	.word	0x00007f2d
    8a54:	20000a7c 	.word	0x20000a7c

00008a58 <_usb_d_dev_ep_enable>:
{
    8a58:	b4f0      	push	{r4, r5, r6, r7}
    8a5a:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8a5c:	f010 000f 	ands.w	r0, r0, #15
    8a60:	f000 80a7 	beq.w	8bb2 <_usb_d_dev_ep_enable+0x15a>
    8a64:	2e00      	cmp	r6, #0
    8a66:	bfb4      	ite	lt
    8a68:	1d43      	addlt	r3, r0, #5
    8a6a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a6c:	4605      	mov	r5, r0
    8a6e:	0142      	lsls	r2, r0, #5
    8a70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8a74:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    8a78:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8a7a:	2805      	cmp	r0, #5
    8a7c:	f240 80a0 	bls.w	8bc0 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8a80:	f06f 0011 	mvn.w	r0, #17
    8a84:	e07d      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8a86:	f014 0f77 	tst.w	r4, #119	; 0x77
    8a8a:	f040 8089 	bne.w	8ba0 <_usb_d_dev_ep_enable+0x148>
    8a8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a92:	2111      	movs	r1, #17
    8a94:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8a98:	4c9b      	ldr	r4, [pc, #620]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8a9a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8a9e:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8aa2:	4c9a      	ldr	r4, [pc, #616]	; (8d0c <_usb_d_dev_ep_enable+0x2b4>)
    8aa4:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8aa8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8aac:	f200 80cd 	bhi.w	8c4a <_usb_d_dev_ep_enable+0x1f2>
    8ab0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8ab4:	f200 8112 	bhi.w	8cdc <_usb_d_dev_ep_enable+0x284>
    8ab8:	2980      	cmp	r1, #128	; 0x80
    8aba:	f200 8101 	bhi.w	8cc0 <_usb_d_dev_ep_enable+0x268>
    8abe:	2940      	cmp	r1, #64	; 0x40
    8ac0:	f200 8113 	bhi.w	8cea <_usb_d_dev_ep_enable+0x292>
    8ac4:	2920      	cmp	r1, #32
    8ac6:	f200 8102 	bhi.w	8cce <_usb_d_dev_ep_enable+0x276>
    8aca:	2910      	cmp	r1, #16
    8acc:	f200 8114 	bhi.w	8cf8 <_usb_d_dev_ep_enable+0x2a0>
    8ad0:	2908      	cmp	r1, #8
    8ad2:	bf94      	ite	ls
    8ad4:	2600      	movls	r6, #0
    8ad6:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ad8:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8adc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ade:	f3c1 010d 	ubfx	r1, r1, #0, #14
    8ae2:	e0b8      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8ae4:	f014 0f70 	tst.w	r4, #112	; 0x70
    8ae8:	d15d      	bne.n	8ba6 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8aea:	4e87      	ldr	r6, [pc, #540]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8aec:	009f      	lsls	r7, r3, #2
    8aee:	18f9      	adds	r1, r7, r3
    8af0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8af4:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8af8:	0109      	lsls	r1, r1, #4
    8afa:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8afe:	430c      	orrs	r4, r1
    8b00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8b04:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b08:	443b      	add	r3, r7
    8b0a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8b0e:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8b12:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8b1a:	d80f      	bhi.n	8b3c <_usb_d_dev_ep_enable+0xe4>
    8b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8b20:	d819      	bhi.n	8b56 <_usb_d_dev_ep_enable+0xfe>
    8b22:	2b80      	cmp	r3, #128	; 0x80
    8b24:	d819      	bhi.n	8b5a <_usb_d_dev_ep_enable+0x102>
    8b26:	2b40      	cmp	r3, #64	; 0x40
    8b28:	d819      	bhi.n	8b5e <_usb_d_dev_ep_enable+0x106>
    8b2a:	2b20      	cmp	r3, #32
    8b2c:	d819      	bhi.n	8b62 <_usb_d_dev_ep_enable+0x10a>
    8b2e:	2b10      	cmp	r3, #16
    8b30:	d819      	bhi.n	8b66 <_usb_d_dev_ep_enable+0x10e>
    8b32:	2b08      	cmp	r3, #8
    8b34:	bf94      	ite	ls
    8b36:	2300      	movls	r3, #0
    8b38:	2301      	movhi	r3, #1
    8b3a:	e000      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b3c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b3e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8b42:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8b44:	2380      	movs	r3, #128	; 0x80
    8b46:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8b4a:	4b6f      	ldr	r3, [pc, #444]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8b4c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8b50:	2000      	movs	r0, #0
    8b52:	76a8      	strb	r0, [r5, #26]
    8b54:	e015      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b56:	2306      	movs	r3, #6
    8b58:	e7f1      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b5a:	2305      	movs	r3, #5
    8b5c:	e7ef      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b5e:	2304      	movs	r3, #4
    8b60:	e7ed      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b62:	2303      	movs	r3, #3
    8b64:	e7eb      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b66:	2302      	movs	r3, #2
    8b68:	e7e9      	b.n	8b3e <_usb_d_dev_ep_enable+0xe6>
    8b6a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8b6c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8b70:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8b72:	2340      	movs	r3, #64	; 0x40
    8b74:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    8b78:	4b63      	ldr	r3, [pc, #396]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8b7a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8b7e:	2000      	movs	r0, #0
    8b80:	72a8      	strb	r0, [r5, #10]
}
    8b82:	bcf0      	pop	{r4, r5, r6, r7}
    8b84:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8b86:	2106      	movs	r1, #6
    8b88:	e7f0      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
    8b8a:	2105      	movs	r1, #5
    8b8c:	e7ee      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
    8b8e:	2104      	movs	r1, #4
    8b90:	e7ec      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
    8b92:	2103      	movs	r1, #3
    8b94:	e7ea      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
    8b96:	2102      	movs	r1, #2
    8b98:	e7e8      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    8b9a:	f06f 0011 	mvn.w	r0, #17
    8b9e:	e7f0      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8ba0:	f06f 0013 	mvn.w	r0, #19
    8ba4:	e7ed      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8ba6:	f06f 0013 	mvn.w	r0, #19
    8baa:	e7ea      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8bac:	f06f 0013 	mvn.w	r0, #19
    8bb0:	e7e7      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8bb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bb6:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    8bba:	b2e4      	uxtb	r4, r4
    8bbc:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8bbe:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8bc0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8bc4:	4950      	ldr	r1, [pc, #320]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8bc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8bca:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8bce:	2aff      	cmp	r2, #255	; 0xff
    8bd0:	d0e3      	beq.n	8b9a <_usb_d_dev_ep_enable+0x142>
    8bd2:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8bd4:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8bd6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8bda:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8bde:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8be2:	f001 0107 	and.w	r1, r1, #7
    8be6:	2901      	cmp	r1, #1
    8be8:	f43f af4d 	beq.w	8a86 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8bec:	2e00      	cmp	r6, #0
    8bee:	f6ff af79 	blt.w	8ae4 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8bf2:	f014 0f07 	tst.w	r4, #7
    8bf6:	d1d9      	bne.n	8bac <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8bf8:	4e43      	ldr	r6, [pc, #268]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8bfa:	009f      	lsls	r7, r3, #2
    8bfc:	18f9      	adds	r1, r7, r3
    8bfe:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8c02:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8c06:	f001 0107 	and.w	r1, r1, #7
    8c0a:	430c      	orrs	r4, r1
    8c0c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8c10:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8c14:	443b      	add	r3, r7
    8c16:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8c1a:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8c1e:	4b3b      	ldr	r3, [pc, #236]	; (8d0c <_usb_d_dev_ep_enable+0x2b4>)
    8c20:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8c24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8c28:	d89f      	bhi.n	8b6a <_usb_d_dev_ep_enable+0x112>
    8c2a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8c2e:	d8aa      	bhi.n	8b86 <_usb_d_dev_ep_enable+0x12e>
    8c30:	2980      	cmp	r1, #128	; 0x80
    8c32:	d8aa      	bhi.n	8b8a <_usb_d_dev_ep_enable+0x132>
    8c34:	2940      	cmp	r1, #64	; 0x40
    8c36:	d8aa      	bhi.n	8b8e <_usb_d_dev_ep_enable+0x136>
    8c38:	2920      	cmp	r1, #32
    8c3a:	d8aa      	bhi.n	8b92 <_usb_d_dev_ep_enable+0x13a>
    8c3c:	2910      	cmp	r1, #16
    8c3e:	d8aa      	bhi.n	8b96 <_usb_d_dev_ep_enable+0x13e>
    8c40:	2908      	cmp	r1, #8
    8c42:	bf94      	ite	ls
    8c44:	2100      	movls	r1, #0
    8c46:	2101      	movhi	r1, #1
    8c48:	e790      	b.n	8b6c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8c4a:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8c4e:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8c50:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8c54:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8c56:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8c5a:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8c5c:	2640      	movs	r6, #64	; 0x40
    8c5e:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8c62:	2180      	movs	r1, #128	; 0x80
    8c64:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8c68:	4f27      	ldr	r7, [pc, #156]	; (8d08 <_usb_d_dev_ep_enable+0x2b0>)
    8c6a:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8c6e:	2000      	movs	r0, #0
    8c70:	72a8      	strb	r0, [r5, #10]
    8c72:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8c74:	009c      	lsls	r4, r3, #2
    8c76:	18e1      	adds	r1, r4, r3
    8c78:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8c7c:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8c80:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c84:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    8c88:	0152      	lsls	r2, r2, #5
    8c8a:	18b9      	adds	r1, r7, r2
    8c8c:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8c8e:	4423      	add	r3, r4
    8c90:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c94:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    8c98:	684b      	ldr	r3, [r1, #4]
    8c9a:	f364 339b 	bfi	r3, r4, #14, #14
    8c9e:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ca0:	684b      	ldr	r3, [r1, #4]
    8ca2:	f360 030d 	bfi	r3, r0, #0, #14
    8ca6:	604b      	str	r3, [r1, #4]
    8ca8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8cac:	21b0      	movs	r1, #176	; 0xb0
    8cae:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8cb2:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8cb6:	461a      	mov	r2, r3
    8cb8:	2310      	movs	r3, #16
    8cba:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8cbe:	e760      	b.n	8b82 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cc0:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cc4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cc6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cca:	2605      	movs	r6, #5
    8ccc:	e7c3      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cce:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cd2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cd4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cd8:	2603      	movs	r6, #3
    8cda:	e7bc      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cdc:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ce0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ce2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ce6:	2606      	movs	r6, #6
    8ce8:	e7b5      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cea:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cee:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cf0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cf4:	2604      	movs	r6, #4
    8cf6:	e7ae      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cf8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cfc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cfe:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d02:	2602      	movs	r6, #2
    8d04:	e7a7      	b.n	8c56 <_usb_d_dev_ep_enable+0x1fe>
    8d06:	bf00      	nop
    8d08:	200009a8 	.word	0x200009a8
    8d0c:	0fffc000 	.word	0x0fffc000

00008d10 <_usb_d_dev_ep_stall>:
{
    8d10:	b470      	push	{r4, r5, r6}
    8d12:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    8d14:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d16:	f010 000f 	ands.w	r0, r0, #15
    8d1a:	d008      	beq.n	8d2e <_usb_d_dev_ep_stall+0x1e>
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	bfb4      	ite	lt
    8d20:	1d43      	addlt	r3, r0, #5
    8d22:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    8d24:	2805      	cmp	r0, #5
    8d26:	d903      	bls.n	8d30 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    8d28:	f06f 0011 	mvn.w	r0, #17
    8d2c:	e018      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8d2e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8d30:	2901      	cmp	r1, #1
    8d32:	d017      	beq.n	8d64 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8d34:	2900      	cmp	r1, #0
    8d36:	d03a      	beq.n	8dae <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8d38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8d3c:	4a45      	ldr	r2, [pc, #276]	; (8e54 <_usb_d_dev_ep_stall+0x144>)
    8d3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8d42:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8d46:	f003 030f 	and.w	r3, r3, #15
    8d4a:	015b      	lsls	r3, r3, #5
    8d4c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8d50:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8d54:	2310      	movs	r3, #16
    8d56:	40a3      	lsls	r3, r4
    8d58:	421a      	tst	r2, r3
    8d5a:	bf14      	ite	ne
    8d5c:	2001      	movne	r0, #1
    8d5e:	2000      	moveq	r0, #0
}
    8d60:	bc70      	pop	{r4, r5, r6}
    8d62:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8d64:	2510      	movs	r5, #16
    8d66:	40a5      	lsls	r5, r4
    8d68:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8d6a:	493a      	ldr	r1, [pc, #232]	; (8e54 <_usb_d_dev_ep_stall+0x144>)
    8d6c:	009e      	lsls	r6, r3, #2
    8d6e:	18f2      	adds	r2, r6, r3
    8d70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8d74:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8d78:	f002 020f 	and.w	r2, r2, #15
    8d7c:	0150      	lsls	r0, r2, #5
    8d7e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8d82:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8d86:	2020      	movs	r0, #32
    8d88:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8d8c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8d8e:	0152      	lsls	r2, r2, #5
    8d90:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8d94:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    8d98:	4433      	add	r3, r6
    8d9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8d9e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8da2:	f042 0208 	orr.w	r2, r2, #8
    8da6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8daa:	2000      	movs	r0, #0
    8dac:	e7d8      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8dae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8db2:	4928      	ldr	r1, [pc, #160]	; (8e54 <_usb_d_dev_ep_stall+0x144>)
    8db4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8db8:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8dbc:	f002 020f 	and.w	r2, r2, #15
    8dc0:	0151      	lsls	r1, r2, #5
    8dc2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8dc6:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8dca:	2010      	movs	r0, #16
    8dcc:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    8dce:	4205      	tst	r5, r0
    8dd0:	d03c      	beq.n	8e4c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8dd2:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8dd4:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8dd8:	2020      	movs	r0, #32
    8dda:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8ddc:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8dde:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8de2:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    8de6:	4202      	tst	r2, r0
    8de8:	d007      	beq.n	8dfa <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8dea:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8dee:	2201      	movs	r2, #1
    8df0:	fa02 f404 	lsl.w	r4, r2, r4
    8df4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8df6:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8dfa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8dfe:	4815      	ldr	r0, [pc, #84]	; (8e54 <_usb_d_dev_ep_stall+0x144>)
    8e00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8e04:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    8e08:	f002 0207 	and.w	r2, r2, #7
    8e0c:	2a01      	cmp	r2, #1
    8e0e:	d00c      	beq.n	8e2a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    8e10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8e14:	4a0f      	ldr	r2, [pc, #60]	; (8e54 <_usb_d_dev_ep_stall+0x144>)
    8e16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8e1a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8e1e:	f36f 02c3 	bfc	r2, #3, #1
    8e22:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8e26:	2000      	movs	r0, #0
    8e28:	e79a      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8e2a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8e2e:	f012 0f30 	tst.w	r2, #48	; 0x30
    8e32:	d10d      	bne.n	8e50 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    8e34:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8e38:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8e3c:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8e40:	f36f 02c3 	bfc	r2, #3, #1
    8e44:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8e48:	2000      	movs	r0, #0
    8e4a:	e789      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
    8e4c:	2000      	movs	r0, #0
    8e4e:	e787      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
    8e50:	2000      	movs	r0, #0
    8e52:	e785      	b.n	8d60 <_usb_d_dev_ep_stall+0x50>
    8e54:	200009a8 	.word	0x200009a8

00008e58 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    8e58:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    8e5a:	f000 040f 	and.w	r4, r0, #15
    8e5e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    8e60:	4a14      	ldr	r2, [pc, #80]	; (8eb4 <_usb_d_dev_ep_read_req+0x5c>)
    8e62:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    8e64:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    8e66:	6840      	ldr	r0, [r0, #4]
    8e68:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    8e6c:	2c05      	cmp	r4, #5
    8e6e:	d817      	bhi.n	8ea0 <_usb_d_dev_ep_read_req+0x48>
    8e70:	b1c9      	cbz	r1, 8ea6 <_usb_d_dev_ep_read_req+0x4e>
    8e72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8e76:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    8e7a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    8e7c:	2a11      	cmp	r2, #17
    8e7e:	d115      	bne.n	8eac <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8e80:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    8e84:	f012 0f10 	tst.w	r2, #16
    8e88:	d102      	bne.n	8e90 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    8e8a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    8e8c:	bc30      	pop	{r4, r5}
    8e8e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    8e90:	682c      	ldr	r4, [r5, #0]
    8e92:	686a      	ldr	r2, [r5, #4]
    8e94:	600c      	str	r4, [r1, #0]
    8e96:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8e98:	2210      	movs	r2, #16
    8e9a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    8e9e:	e7f5      	b.n	8e8c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    8ea0:	f06f 0011 	mvn.w	r0, #17
    8ea4:	e7f2      	b.n	8e8c <_usb_d_dev_ep_read_req+0x34>
    8ea6:	f06f 0011 	mvn.w	r0, #17
    8eaa:	e7ef      	b.n	8e8c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    8eac:	f06f 0012 	mvn.w	r0, #18
    8eb0:	e7ec      	b.n	8e8c <_usb_d_dev_ep_read_req+0x34>
    8eb2:	bf00      	nop
    8eb4:	200009a8 	.word	0x200009a8

00008eb8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    8eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ebc:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    8ebe:	7a03      	ldrb	r3, [r0, #8]
    8ec0:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8ec2:	f013 030f 	ands.w	r3, r3, #15
    8ec6:	f000 80c2 	beq.w	904e <_usb_d_dev_ep_trans+0x196>
    8eca:	2e00      	cmp	r6, #0
    8ecc:	bfb4      	ite	lt
    8ece:	1d5a      	addlt	r2, r3, #5
    8ed0:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    8ed2:	4614      	mov	r4, r2
    8ed4:	4969      	ldr	r1, [pc, #420]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8ed6:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    8eda:	1c55      	adds	r5, r2, #1
    8edc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8ee0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8ee4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8ee8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8eec:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8ef0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8ef4:	428a      	cmp	r2, r1
    8ef6:	d025      	beq.n	8f44 <_usb_d_dev_ep_trans+0x8c>
    8ef8:	1e55      	subs	r5, r2, #1
    8efa:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    8efc:	6841      	ldr	r1, [r0, #4]
    8efe:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8f00:	2b05      	cmp	r3, #5
    8f02:	f200 8092 	bhi.w	902a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    8f06:	6803      	ldr	r3, [r0, #0]
    8f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8f0c:	d31c      	bcc.n	8f48 <_usb_d_dev_ep_trans+0x90>
    8f0e:	eb03 0c01 	add.w	ip, r3, r1
    8f12:	f8df e180 	ldr.w	lr, [pc, #384]	; 9094 <_usb_d_dev_ep_trans+0x1dc>
    8f16:	45f4      	cmp	ip, lr
    8f18:	d816      	bhi.n	8f48 <_usb_d_dev_ep_trans+0x90>
    8f1a:	f013 0f03 	tst.w	r3, #3
    8f1e:	d113      	bne.n	8f48 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    8f20:	2e00      	cmp	r6, #0
    8f22:	db2a      	blt.n	8f7a <_usb_d_dev_ep_trans+0xc2>
    8f24:	428a      	cmp	r2, r1
    8f26:	f200 809c 	bhi.w	9062 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    8f2a:	b34d      	cbz	r5, 8f80 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    8f2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f30:	4a52      	ldr	r2, [pc, #328]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8f32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d07b      	beq.n	9036 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    8f3e:	f04f 0800 	mov.w	r8, #0
    8f42:	e00c      	b.n	8f5e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8f44:	4615      	mov	r5, r2
    8f46:	e7d9      	b.n	8efc <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    8f48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f4c:	4a4b      	ldr	r2, [pc, #300]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8f4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8f56:	2b00      	cmp	r3, #0
    8f58:	d06a      	beq.n	9030 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    8f5a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8f5e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f62:	4a46      	ldr	r2, [pc, #280]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8f64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f68:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8f6c:	f013 0f08 	tst.w	r3, #8
    8f70:	d009      	beq.n	8f86 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    8f72:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    8f74:	b003      	add	sp, #12
    8f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    8f7a:	f04f 0800 	mov.w	r8, #0
    8f7e:	e7ee      	b.n	8f5e <_usb_d_dev_ep_trans+0xa6>
    8f80:	f04f 0800 	mov.w	r8, #0
    8f84:	e7eb      	b.n	8f5e <_usb_d_dev_ep_trans+0xa6>
    8f86:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    8f88:	a801      	add	r0, sp, #4
    8f8a:	4b3d      	ldr	r3, [pc, #244]	; (9080 <_usb_d_dev_ep_trans+0x1c8>)
    8f8c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    8f8e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f92:	4a3a      	ldr	r2, [pc, #232]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f98:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8f9c:	f013 0f40 	tst.w	r3, #64	; 0x40
    8fa0:	d13c      	bne.n	901c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    8fa2:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    8fa6:	4b35      	ldr	r3, [pc, #212]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8fa8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    8fac:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8fb4:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    8fb8:	a801      	add	r0, sp, #4
    8fba:	4b32      	ldr	r3, [pc, #200]	; (9084 <_usb_d_dev_ep_trans+0x1cc>)
    8fbc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    8fbe:	f8da 3000 	ldr.w	r3, [sl]
    8fc2:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    8fc6:	f8da 3004 	ldr.w	r3, [sl, #4]
    8fca:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    8fce:	2300      	movs	r3, #0
    8fd0:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    8fd4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    8fd6:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8fda:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    8fde:	f368 1345 	bfi	r3, r8, #5, #1
    8fe2:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    8fe6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    8fea:	b1e3      	cbz	r3, 9026 <_usb_d_dev_ep_trans+0x16e>
    8fec:	fab5 f585 	clz	r5, r5
    8ff0:	096d      	lsrs	r5, r5, #5
    8ff2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8ff6:	4b21      	ldr	r3, [pc, #132]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    8ff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8ffc:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9000:	f365 1304 	bfi	r3, r5, #4, #1
    9004:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9008:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    900a:	f04f 0100 	mov.w	r1, #0
    900e:	4638      	mov	r0, r7
    9010:	bfb4      	ite	lt
    9012:	4b1d      	ldrlt	r3, [pc, #116]	; (9088 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    9014:	4b1d      	ldrge	r3, [pc, #116]	; (908c <_usb_d_dev_ep_trans+0x1d4>)
    9016:	4798      	blx	r3
	return ERR_NONE;
    9018:	2000      	movs	r0, #0
    901a:	e7ab      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    901c:	a801      	add	r0, sp, #4
    901e:	4b19      	ldr	r3, [pc, #100]	; (9084 <_usb_d_dev_ep_trans+0x1cc>)
    9020:	4798      	blx	r3
		return USB_BUSY;
    9022:	2001      	movs	r0, #1
    9024:	e7a6      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
    9026:	2500      	movs	r5, #0
    9028:	e7e3      	b.n	8ff2 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    902a:	f06f 0011 	mvn.w	r0, #17
    902e:	e7a1      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9030:	f06f 0012 	mvn.w	r0, #18
    9034:	e79e      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    9036:	f06f 0011 	mvn.w	r0, #17
    903a:	e79b      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    903c:	f06f 0012 	mvn.w	r0, #18
    9040:	e798      	b.n	8f74 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9042:	6841      	ldr	r1, [r0, #4]
    9044:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9048:	4f11      	ldr	r7, [pc, #68]	; (9090 <_usb_d_dev_ep_trans+0x1d8>)
    904a:	2400      	movs	r4, #0
    904c:	e75b      	b.n	8f06 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    904e:	4a0b      	ldr	r2, [pc, #44]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    9050:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9054:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9058:	428a      	cmp	r2, r1
    905a:	d0f2      	beq.n	9042 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    905c:	4f0c      	ldr	r7, [pc, #48]	; (9090 <_usb_d_dev_ep_trans+0x1d8>)
    905e:	2400      	movs	r4, #0
    9060:	e74a      	b.n	8ef8 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9062:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9066:	4a05      	ldr	r2, [pc, #20]	; (907c <_usb_d_dev_ep_trans+0x1c4>)
    9068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    906c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9070:	2b00      	cmp	r3, #0
    9072:	d0e3      	beq.n	903c <_usb_d_dev_ep_trans+0x184>
    9074:	f04f 0801 	mov.w	r8, #1
    9078:	e771      	b.n	8f5e <_usb_d_dev_ep_trans+0xa6>
    907a:	bf00      	nop
    907c:	200009a8 	.word	0x200009a8
    9080:	000043ad 	.word	0x000043ad
    9084:	000043bb 	.word	0x000043bb
    9088:	000080dd 	.word	0x000080dd
    908c:	00008261 	.word	0x00008261
    9090:	20000a7c 	.word	0x20000a7c
    9094:	20041fff 	.word	0x20041fff

00009098 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9098:	4b07      	ldr	r3, [pc, #28]	; (90b8 <_usb_d_dev_register_callback+0x20>)
    909a:	2900      	cmp	r1, #0
    909c:	bf08      	it	eq
    909e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    90a0:	2801      	cmp	r0, #1
    90a2:	d004      	beq.n	90ae <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    90a4:	b910      	cbnz	r0, 90ac <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    90a6:	4b05      	ldr	r3, [pc, #20]	; (90bc <_usb_d_dev_register_callback+0x24>)
    90a8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    90ac:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    90ae:	4b03      	ldr	r3, [pc, #12]	; (90bc <_usb_d_dev_register_callback+0x24>)
    90b0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    90b4:	4770      	bx	lr
    90b6:	bf00      	nop
    90b8:	00007e4d 	.word	0x00007e4d
    90bc:	200009a8 	.word	0x200009a8

000090c0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    90c0:	4b0a      	ldr	r3, [pc, #40]	; (90ec <_usb_d_dev_register_ep_callback+0x2c>)
    90c2:	2900      	cmp	r1, #0
    90c4:	bf08      	it	eq
    90c6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    90c8:	4603      	mov	r3, r0
    90ca:	b138      	cbz	r0, 90dc <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    90cc:	2801      	cmp	r0, #1
    90ce:	d009      	beq.n	90e4 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    90d0:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    90d2:	bf04      	itt	eq
    90d4:	4b06      	ldreq	r3, [pc, #24]	; (90f0 <_usb_d_dev_register_ep_callback+0x30>)
    90d6:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    90da:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    90dc:	4b04      	ldr	r3, [pc, #16]	; (90f0 <_usb_d_dev_register_ep_callback+0x30>)
    90de:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    90e2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    90e4:	4b02      	ldr	r3, [pc, #8]	; (90f0 <_usb_d_dev_register_ep_callback+0x30>)
    90e6:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    90ea:	4770      	bx	lr
    90ec:	00007e4d 	.word	0x00007e4d
    90f0:	200009a8 	.word	0x200009a8

000090f4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    90f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    90f6:	4b01      	ldr	r3, [pc, #4]	; (90fc <USB_0_Handler+0x8>)
    90f8:	4798      	blx	r3
    90fa:	bd08      	pop	{r3, pc}
    90fc:	00008451 	.word	0x00008451

00009100 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9100:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9102:	4b01      	ldr	r3, [pc, #4]	; (9108 <USB_1_Handler+0x8>)
    9104:	4798      	blx	r3
    9106:	bd08      	pop	{r3, pc}
    9108:	00008451 	.word	0x00008451

0000910c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    910c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    910e:	4b01      	ldr	r3, [pc, #4]	; (9114 <USB_2_Handler+0x8>)
    9110:	4798      	blx	r3
    9112:	bd08      	pop	{r3, pc}
    9114:	00008451 	.word	0x00008451

00009118 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9118:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    911a:	4b01      	ldr	r3, [pc, #4]	; (9120 <USB_3_Handler+0x8>)
    911c:	4798      	blx	r3
    911e:	bd08      	pop	{r3, pc}
    9120:	00008451 	.word	0x00008451

00009124 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9124:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    9126:	4604      	mov	r4, r0
    9128:	b340      	cbz	r0, 917c <_wdt_init+0x58>
    912a:	6800      	ldr	r0, [r0, #0]
    912c:	3000      	adds	r0, #0
    912e:	bf18      	it	ne
    9130:	2001      	movne	r0, #1
    9132:	2250      	movs	r2, #80	; 0x50
    9134:	4915      	ldr	r1, [pc, #84]	; (918c <_wdt_init+0x68>)
    9136:	4b16      	ldr	r3, [pc, #88]	; (9190 <_wdt_init+0x6c>)
    9138:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    913a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    913c:	689a      	ldr	r2, [r3, #8]
    913e:	f012 0f0e 	tst.w	r2, #14
    9142:	d1fb      	bne.n	913c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9144:	781a      	ldrb	r2, [r3, #0]
    9146:	09d2      	lsrs	r2, r2, #7
    9148:	d11a      	bne.n	9180 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    914a:	689a      	ldr	r2, [r3, #8]
    914c:	f012 0f0e 	tst.w	r2, #14
    9150:	d1fb      	bne.n	914a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9152:	781a      	ldrb	r2, [r3, #0]
    9154:	f012 0f02 	tst.w	r2, #2
    9158:	d115      	bne.n	9186 <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    915a:	781a      	ldrb	r2, [r3, #0]
    915c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9160:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9162:	689a      	ldr	r2, [r3, #8]
    9164:	f012 0f0e 	tst.w	r2, #14
    9168:	d1fb      	bne.n	9162 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    916a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    916c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    916e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9172:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9176:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9178:	2000      	movs	r0, #0
    917a:	bd10      	pop	{r4, pc}
    917c:	2000      	movs	r0, #0
    917e:	e7d8      	b.n	9132 <_wdt_init+0xe>
		return ERR_DENIED;
    9180:	f06f 0010 	mvn.w	r0, #16
    9184:	bd10      	pop	{r4, pc}
    9186:	f06f 0010 	mvn.w	r0, #16
}
    918a:	bd10      	pop	{r4, pc}
    918c:	0000d160 	.word	0x0000d160
    9190:	00005745 	.word	0x00005745

00009194 <RTC_Scheduler_ping_cb>:
}


static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag++;
    9194:	4a04      	ldr	r2, [pc, #16]	; (91a8 <RTC_Scheduler_ping_cb+0x14>)
    9196:	7813      	ldrb	r3, [r2, #0]
    9198:	3301      	adds	r3, #1
    919a:	b2db      	uxtb	r3, r3
    919c:	7013      	strb	r3, [r2, #0]
	pingflag_active++;
    919e:	7853      	ldrb	r3, [r2, #1]
    91a0:	3301      	adds	r3, #1
    91a2:	b2db      	uxtb	r3, r3
    91a4:	7053      	strb	r3, [r2, #1]
    91a6:	4770      	bx	lr
    91a8:	20000d68 	.word	0x20000d68

000091ac <RTC_Scheduler_realtime_cb>:
}


static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{
    91ac:	b530      	push	{r4, r5, lr}
    91ae:	b083      	sub	sp, #12
	grid_sys_rtc_tick_time(&grid_sys_state);
    91b0:	481d      	ldr	r0, [pc, #116]	; (9228 <RTC_Scheduler_realtime_cb+0x7c>)
    91b2:	4b1e      	ldr	r3, [pc, #120]	; (922c <RTC_Scheduler_realtime_cb+0x80>)
    91b4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    91b6:	a801      	add	r0, sp, #4
    91b8:	4b1d      	ldr	r3, [pc, #116]	; (9230 <RTC_Scheduler_realtime_cb+0x84>)
    91ba:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    91bc:	4b1d      	ldr	r3, [pc, #116]	; (9234 <RTC_Scheduler_realtime_cb+0x88>)
    91be:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    91c2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    91c6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    91ca:	4054      	eors	r4, r2
    91cc:	400c      	ands	r4, r1
    91ce:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    91d0:	a801      	add	r0, sp, #4
    91d2:	4b19      	ldr	r3, [pc, #100]	; (9238 <RTC_Scheduler_realtime_cb+0x8c>)
    91d4:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    91d6:	4b19      	ldr	r3, [pc, #100]	; (923c <RTC_Scheduler_realtime_cb+0x90>)
    91d8:	685b      	ldr	r3, [r3, #4]
    91da:	68db      	ldr	r3, [r3, #12]
    91dc:	781a      	ldrb	r2, [r3, #0]
    91de:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    91e2:	4294      	cmp	r4, r2
    91e4:	d002      	beq.n	91ec <RTC_Scheduler_realtime_cb+0x40>
			
		uint8_t value;
			
		if (mod->report_array[report_index].helper[0] == 0){
    91e6:	b91a      	cbnz	r2, 91f0 <RTC_Scheduler_realtime_cb+0x44>
				
			mod->report_array[report_index].helper[0] = 1;
    91e8:	2201      	movs	r2, #1
    91ea:	701a      	strb	r2, [r3, #0]
			
			

	}

}
    91ec:	b003      	add	sp, #12
    91ee:	bd30      	pop	{r4, r5, pc}
			mod->report_array[report_index].helper[0] = 0;
    91f0:	2400      	movs	r4, #0
    91f2:	701c      	strb	r4, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    91f4:	4a0c      	ldr	r2, [pc, #48]	; (9228 <RTC_Scheduler_realtime_cb+0x7c>)
    91f6:	7a53      	ldrb	r3, [r2, #9]
    91f8:	3301      	adds	r3, #1
    91fa:	1ae1      	subs	r1, r4, r3
    91fc:	f003 0303 	and.w	r3, r3, #3
    9200:	f001 0103 	and.w	r1, r1, #3
    9204:	bf58      	it	pl
    9206:	424b      	negpl	r3, r1
    9208:	b2db      	uxtb	r3, r3
    920a:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    920c:	7a53      	ldrb	r3, [r2, #9]
 			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    920e:	7a52      	ldrb	r2, [r2, #9]
    9210:	4d0a      	ldr	r5, [pc, #40]	; (923c <RTC_Scheduler_realtime_cb+0x90>)
    9212:	686b      	ldr	r3, [r5, #4]
    9214:	6858      	ldr	r0, [r3, #4]
    9216:	2102      	movs	r1, #2
    9218:	3007      	adds	r0, #7
    921a:	4b09      	ldr	r3, [pc, #36]	; (9240 <RTC_Scheduler_realtime_cb+0x94>)
    921c:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, report_index);
    921e:	4621      	mov	r1, r4
    9220:	4628      	mov	r0, r5
    9222:	4b08      	ldr	r3, [pc, #32]	; (9244 <RTC_Scheduler_realtime_cb+0x98>)
    9224:	4798      	blx	r3
}
    9226:	e7e1      	b.n	91ec <RTC_Scheduler_realtime_cb+0x40>
    9228:	20001cf4 	.word	0x20001cf4
    922c:	00003743 	.word	0x00003743
    9230:	000043ad 	.word	0x000043ad
    9234:	41008000 	.word	0x41008000
    9238:	000043bb 	.word	0x000043bb
    923c:	20001ce4 	.word	0x20001ce4
    9240:	00003831 	.word	0x00003831
    9244:	00003e71 	.word	0x00003e71

00009248 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9248:	69c3      	ldr	r3, [r0, #28]
    924a:	2b00      	cmp	r3, #0
    924c:	d147      	bne.n	92de <grid_port_receive_task+0x96>
void grid_port_receive_task(struct grid_port* por){
    924e:	b530      	push	{r4, r5, lr}
    9250:	b083      	sub	sp, #12
    9252:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    9254:	6983      	ldr	r3, [r0, #24]
    9256:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    925a:	d91c      	bls.n	9296 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    925c:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    9260:	2b01      	cmp	r3, #1
    9262:	d005      	beq.n	9270 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    9264:	2300      	movs	r3, #0
    9266:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    9268:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    926a:	4b1d      	ldr	r3, [pc, #116]	; (92e0 <grid_port_receive_task+0x98>)
    926c:	4798      	blx	r3
    926e:	e014      	b.n	929a <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    9270:	2300      	movs	r3, #0
    9272:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    9274:	6243      	str	r3, [r0, #36]	; 0x24
			por->partner_status = 0;
    9276:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
			por->rx_double_buffer_timeout =0;
    927a:	6183      	str	r3, [r0, #24]
			grid_sys_port_reset_dma(por);
    927c:	4b18      	ldr	r3, [pc, #96]	; (92e0 <grid_port_receive_task+0x98>)
    927e:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9280:	23c8      	movs	r3, #200	; 0xc8
    9282:	9301      	str	r3, [sp, #4]
    9284:	2302      	movs	r3, #2
    9286:	9300      	str	r3, [sp, #0]
    9288:	23ff      	movs	r3, #255	; 0xff
    928a:	461a      	mov	r2, r3
    928c:	4619      	mov	r1, r3
    928e:	4815      	ldr	r0, [pc, #84]	; (92e4 <grid_port_receive_task+0x9c>)
    9290:	4d15      	ldr	r5, [pc, #84]	; (92e8 <grid_port_receive_task+0xa0>)
    9292:	47a8      	blx	r5
    9294:	e001      	b.n	929a <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    9296:	3301      	adds	r3, #1
    9298:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    929a:	6a23      	ldr	r3, [r4, #32]
    929c:	18e2      	adds	r2, r4, r3
    929e:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
    92a2:	2a0a      	cmp	r2, #10
    92a4:	d015      	beq.n	92d2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    92a6:	b1c2      	cbz	r2, 92da <grid_port_receive_task+0x92>
    92a8:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    92ac:	f240 2056 	movw	r0, #598	; 0x256
			por->rx_double_buffer_seek_start_index=0;
    92b0:	2500      	movs	r5, #0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    92b2:	4283      	cmp	r3, r0
			por->rx_double_buffer_seek_start_index++;			
    92b4:	bf9a      	itte	ls
    92b6:	3301      	addls	r3, #1
    92b8:	6223      	strls	r3, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    92ba:	6225      	strhi	r5, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    92bc:	3a01      	subs	r2, #1
    92be:	d00c      	beq.n	92da <grid_port_receive_task+0x92>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    92c0:	6a23      	ldr	r3, [r4, #32]
    92c2:	18e1      	adds	r1, r4, r3
    92c4:	f891 1280 	ldrb.w	r1, [r1, #640]	; 0x280
    92c8:	290a      	cmp	r1, #10
    92ca:	d002      	beq.n	92d2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    92cc:	2900      	cmp	r1, #0
    92ce:	d1f0      	bne.n	92b2 <grid_port_receive_task+0x6a>
    92d0:	e003      	b.n	92da <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
    92d2:	2301      	movs	r3, #1
    92d4:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    92d6:	2300      	movs	r3, #0
    92d8:	61a3      	str	r3, [r4, #24]
}
    92da:	b003      	add	sp, #12
    92dc:	bd30      	pop	{r4, r5, pc}
    92de:	4770      	bx	lr
    92e0:	000034a9 	.word	0x000034a9
    92e4:	20001cf4 	.word	0x20001cf4
    92e8:	0000379d 	.word	0x0000379d

000092ec <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t length){
    92ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92f0:	b08b      	sub	sp, #44	; 0x2c
    92f2:	af02      	add	r7, sp, #8
    92f4:	4604      	mov	r4, r0
    92f6:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    92f8:	2301      	movs	r3, #1
    92fa:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    92fc:	230e      	movs	r3, #14
    92fe:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    9300:	2315      	movs	r3, #21
    9302:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    9304:	2304      	movs	r3, #4
    9306:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    9308:	2330      	movs	r3, #48	; 0x30
    930a:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    930c:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    930e:	230a      	movs	r3, #10
    9310:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    9312:	2300      	movs	r3, #0
    9314:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    9316:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    9318:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    931a:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    931c:	1dd3      	adds	r3, r2, #7
    931e:	f023 0307 	bic.w	r3, r3, #7
    9322:	ebad 0d03 	sub.w	sp, sp, r3
    9326:	ae02      	add	r6, sp, #8
    9328:	46b0      	mov	r8, r6
	for (uint32_t i = 0; i<length; i++){
    932a:	b1b2      	cbz	r2, 935a <grid_port_receive_decode+0x6e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    932c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    932e:	eb06 0c02 	add.w	ip, r6, r2
    9332:	4632      	mov	r2, r6
    9334:	1b89      	subs	r1, r1, r6
    9336:	f8df e288 	ldr.w	lr, [pc, #648]	; 95c0 <grid_port_receive_decode+0x2d4>
    933a:	f44f 7016 	mov.w	r0, #600	; 0x258
    933e:	eb01 0902 	add.w	r9, r1, r2
    9342:	fbae a309 	umull	sl, r3, lr, r9
    9346:	099b      	lsrs	r3, r3, #6
    9348:	fb00 9313 	mls	r3, r0, r3, r9
    934c:	4423      	add	r3, r4
    934e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    9352:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i<length; i++){
    9356:	4594      	cmp	ip, r2
    9358:	d1f1      	bne.n	933e <grid_port_receive_decode+0x52>
	if (message[0] == 1 && message [length-1] == 10){
    935a:	7833      	ldrb	r3, [r6, #0]
    935c:	2b01      	cmp	r3, #1
    935e:	d02e      	beq.n	93be <grid_port_receive_decode+0xd2>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    9360:	23c8      	movs	r3, #200	; 0xc8
    9362:	9301      	str	r3, [sp, #4]
    9364:	2302      	movs	r3, #2
    9366:	9300      	str	r3, [sp, #0]
    9368:	2314      	movs	r3, #20
    936a:	2200      	movs	r2, #0
    936c:	4611      	mov	r1, r2
    936e:	4892      	ldr	r0, [pc, #584]	; (95b8 <grid_port_receive_decode+0x2cc>)
    9370:	4e92      	ldr	r6, [pc, #584]	; (95bc <grid_port_receive_decode+0x2d0>)
    9372:	47b0      	blx	r6
	for (uint32_t i = 0; i<length; i++){
    9374:	b18d      	cbz	r5, 939a <grid_port_receive_decode+0xae>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    9376:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9378:	eb05 0e02 	add.w	lr, r5, r2
    937c:	4e90      	ldr	r6, [pc, #576]	; (95c0 <grid_port_receive_decode+0x2d4>)
    937e:	f44f 7016 	mov.w	r0, #600	; 0x258
    9382:	2100      	movs	r1, #0
    9384:	fba6 c302 	umull	ip, r3, r6, r2
    9388:	099b      	lsrs	r3, r3, #6
    938a:	fb00 2313 	mls	r3, r0, r3, r2
    938e:	4423      	add	r3, r4
    9390:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    9394:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    9396:	4596      	cmp	lr, r2
    9398:	d1f4      	bne.n	9384 <grid_port_receive_decode+0x98>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    939a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    939c:	441d      	add	r5, r3
    939e:	4b88      	ldr	r3, [pc, #544]	; (95c0 <grid_port_receive_decode+0x2d4>)
    93a0:	fba3 2305 	umull	r2, r3, r3, r5
    93a4:	099b      	lsrs	r3, r3, #6
    93a6:	f44f 7216 	mov.w	r2, #600	; 0x258
    93aa:	fb02 5313 	mls	r3, r2, r3, r5
    93ae:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    93b0:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    93b2:	2300      	movs	r3, #0
    93b4:	61e3      	str	r3, [r4, #28]
}
    93b6:	3724      	adds	r7, #36	; 0x24
    93b8:	46bd      	mov	sp, r7
    93ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (message[0] == 1 && message [length-1] == 10){
    93be:	1973      	adds	r3, r6, r5
    93c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    93c4:	2b0a      	cmp	r3, #10
    93c6:	d1cb      	bne.n	9360 <grid_port_receive_decode+0x74>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    93c8:	1ee8      	subs	r0, r5, #3
    93ca:	f107 0213 	add.w	r2, r7, #19
    93ce:	2102      	movs	r1, #2
    93d0:	4430      	add	r0, r6
    93d2:	4b7c      	ldr	r3, [pc, #496]	; (95c4 <grid_port_receive_decode+0x2d8>)
    93d4:	4798      	blx	r3
    93d6:	4681      	mov	r9, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    93d8:	4629      	mov	r1, r5
    93da:	4630      	mov	r0, r6
    93dc:	4b7a      	ldr	r3, [pc, #488]	; (95c8 <grid_port_receive_decode+0x2dc>)
    93de:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    93e0:	fa5f f989 	uxtb.w	r9, r9
    93e4:	b2c0      	uxtb	r0, r0
    93e6:	4581      	cmp	r9, r0
    93e8:	d00e      	beq.n	9408 <grid_port_receive_decode+0x11c>
			if (error_flag != 0){		
    93ea:	7cfb      	ldrb	r3, [r7, #19]
    93ec:	2b00      	cmp	r3, #0
    93ee:	f040 819d 	bne.w	972c <grid_port_receive_decode+0x440>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // PURPLE BLINKY
    93f2:	23c8      	movs	r3, #200	; 0xc8
    93f4:	9301      	str	r3, [sp, #4]
    93f6:	2301      	movs	r3, #1
    93f8:	9300      	str	r3, [sp, #0]
    93fa:	23ff      	movs	r3, #255	; 0xff
    93fc:	2200      	movs	r2, #0
    93fe:	2114      	movs	r1, #20
    9400:	486d      	ldr	r0, [pc, #436]	; (95b8 <grid_port_receive_decode+0x2cc>)
    9402:	4e6e      	ldr	r6, [pc, #440]	; (95bc <grid_port_receive_decode+0x2d0>)
    9404:	47b0      	blx	r6
    9406:	e7b5      	b.n	9374 <grid_port_receive_decode+0x88>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9408:	f897 b013 	ldrb.w	fp, [r7, #19]
    940c:	f1bb 0f00 	cmp.w	fp, #0
    9410:	f040 818c 	bne.w	972c <grid_port_receive_decode+0x440>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9414:	7873      	ldrb	r3, [r6, #1]
    9416:	2b0f      	cmp	r3, #15
    9418:	d00d      	beq.n	9436 <grid_port_receive_decode+0x14a>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    941a:	2b0e      	cmp	r3, #14
    941c:	f000 80f6 	beq.w	960c <grid_port_receive_decode+0x320>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    9420:	23c8      	movs	r3, #200	; 0xc8
    9422:	9301      	str	r3, [sp, #4]
    9424:	2302      	movs	r3, #2
    9426:	9300      	str	r3, [sp, #0]
    9428:	2300      	movs	r3, #0
    942a:	461a      	mov	r2, r3
    942c:	21ff      	movs	r1, #255	; 0xff
    942e:	4862      	ldr	r0, [pc, #392]	; (95b8 <grid_port_receive_decode+0x2cc>)
    9430:	4e62      	ldr	r6, [pc, #392]	; (95bc <grid_port_receive_decode+0x2d0>)
    9432:	47b0      	blx	r6
    9434:	e79e      	b.n	9374 <grid_port_receive_decode+0x88>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9436:	4630      	mov	r0, r6
    9438:	4b64      	ldr	r3, [pc, #400]	; (95cc <grid_port_receive_decode+0x2e0>)
    943a:	4798      	blx	r3
    943c:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    943e:	4630      	mov	r0, r6
    9440:	4b63      	ldr	r3, [pc, #396]	; (95d0 <grid_port_receive_decode+0x2e4>)
    9442:	4798      	blx	r3
    9444:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9446:	4630      	mov	r0, r6
    9448:	4b62      	ldr	r3, [pc, #392]	; (95d4 <grid_port_receive_decode+0x2e8>)
    944a:	4798      	blx	r3
    944c:	4682      	mov	sl, r0
    944e:	f1a0 097f 	sub.w	r9, r0, #127	; 0x7f
    9452:	fa4f f989 	sxtb.w	r9, r9
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    9456:	4630      	mov	r0, r6
    9458:	4b5f      	ldr	r3, [pc, #380]	; (95d8 <grid_port_receive_decode+0x2ec>)
    945a:	4798      	blx	r3
    945c:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9460:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9462:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    9466:	b182      	cbz	r2, 948a <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 1){ // 90 deg
    9468:	2a01      	cmp	r2, #1
    946a:	d009      	beq.n	9480 <grid_port_receive_decode+0x194>
				else if(por->partner_fi == 2){ // 180 deg
    946c:	2a02      	cmp	r2, #2
    946e:	d162      	bne.n	9536 <grid_port_receive_decode+0x24a>
					rotated_dx  -= received_dx;
    9470:	f1ca 097f 	rsb	r9, sl, #127	; 0x7f
    9474:	fa4f f989 	sxtb.w	r9, r9
					rotated_dy  -= received_dy;
    9478:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    947c:	b25b      	sxtb	r3, r3
    947e:	e004      	b.n	948a <grid_port_receive_decode+0x19e>
					rotated_dx  -= received_dy;
    9480:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9484:	464b      	mov	r3, r9
					rotated_dx  -= received_dy;
    9486:	fa4f f980 	sxtb.w	r9, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    948a:	f894 a50d 	ldrb.w	sl, [r4, #1293]	; 0x50d
    948e:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    9492:	44d1      	add	r9, sl
    9494:	fa5f fa89 	uxtb.w	sl, r9
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    9498:	f894 950e 	ldrb.w	r9, [r4, #1294]	; 0x50e
    949c:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    94a0:	444b      	add	r3, r9
    94a2:	fa5f f983 	uxtb.w	r9, r3
				grid_msg_set_id(message, updated_id);
    94a6:	6879      	ldr	r1, [r7, #4]
    94a8:	4630      	mov	r0, r6
    94aa:	4b4c      	ldr	r3, [pc, #304]	; (95dc <grid_port_receive_decode+0x2f0>)
    94ac:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    94ae:	4651      	mov	r1, sl
    94b0:	4630      	mov	r0, r6
    94b2:	4b4b      	ldr	r3, [pc, #300]	; (95e0 <grid_port_receive_decode+0x2f4>)
    94b4:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    94b6:	4649      	mov	r1, r9
    94b8:	4630      	mov	r0, r6
    94ba:	4b4a      	ldr	r3, [pc, #296]	; (95e4 <grid_port_receive_decode+0x2f8>)
    94bc:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    94be:	6839      	ldr	r1, [r7, #0]
    94c0:	4630      	mov	r0, r6
    94c2:	4b49      	ldr	r3, [pc, #292]	; (95e8 <grid_port_receive_decode+0x2fc>)
    94c4:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
    94cc:	eb09 290a 	add.w	r9, r9, sl, lsl #8
    94d0:	683b      	ldr	r3, [r7, #0]
    94d2:	eb03 2909 	add.w	r9, r3, r9, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    94d6:	4649      	mov	r1, r9
    94d8:	4837      	ldr	r0, [pc, #220]	; (95b8 <grid_port_receive_decode+0x2cc>)
    94da:	4b44      	ldr	r3, [pc, #272]	; (95ec <grid_port_receive_decode+0x300>)
    94dc:	4798      	blx	r3
    94de:	2800      	cmp	r0, #0
    94e0:	d134      	bne.n	954c <grid_port_receive_decode+0x260>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    94e2:	4629      	mov	r1, r5
    94e4:	4630      	mov	r0, r6
    94e6:	4b38      	ldr	r3, [pc, #224]	; (95c8 <grid_port_receive_decode+0x2dc>)
    94e8:	4798      	blx	r3
    94ea:	4602      	mov	r2, r0
    94ec:	4629      	mov	r1, r5
    94ee:	4630      	mov	r0, r6
    94f0:	4b3f      	ldr	r3, [pc, #252]	; (95f0 <grid_port_receive_decode+0x304>)
    94f2:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    94f4:	f504 669e 	add.w	r6, r4, #1264	; 0x4f0
    94f8:	b2a9      	uxth	r1, r5
    94fa:	4630      	mov	r0, r6
    94fc:	4b3d      	ldr	r3, [pc, #244]	; (95f4 <grid_port_receive_decode+0x308>)
    94fe:	4798      	blx	r3
    9500:	b380      	cbz	r0, 9564 <grid_port_receive_decode+0x278>
						for (uint8_t i=0; i<length; i++){
    9502:	b15d      	cbz	r5, 951c <grid_port_receive_decode+0x230>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9504:	f8df a100 	ldr.w	sl, [pc, #256]	; 9608 <grid_port_receive_decode+0x31c>
    9508:	f818 100b 	ldrb.w	r1, [r8, fp]
    950c:	4630      	mov	r0, r6
    950e:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    9510:	f10b 0b01 	add.w	fp, fp, #1
    9514:	fa5f fb8b 	uxtb.w	fp, fp
    9518:	455d      	cmp	r5, fp
    951a:	d8f5      	bhi.n	9508 <grid_port_receive_decode+0x21c>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    951c:	4630      	mov	r0, r6
    951e:	4b36      	ldr	r3, [pc, #216]	; (95f8 <grid_port_receive_decode+0x30c>)
    9520:	4798      	blx	r3
						grid_port_process_inbound(por);
    9522:	4620      	mov	r0, r4
    9524:	4b35      	ldr	r3, [pc, #212]	; (95fc <grid_port_receive_decode+0x310>)
    9526:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    9528:	4649      	mov	r1, r9
    952a:	4823      	ldr	r0, [pc, #140]	; (95b8 <grid_port_receive_decode+0x2cc>)
    952c:	4b34      	ldr	r3, [pc, #208]	; (9600 <grid_port_receive_decode+0x314>)
    952e:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    9530:	2306      	movs	r3, #6
    9532:	75bb      	strb	r3, [r7, #22]
    9534:	e016      	b.n	9564 <grid_port_receive_decode+0x278>
				else if(por->partner_fi == 3){ // 270 deg
    9536:	2a03      	cmp	r2, #3
    9538:	d105      	bne.n	9546 <grid_port_receive_decode+0x25a>
					rotated_dy  -= received_dx;
    953a:	f1ca 0a7f 	rsb	sl, sl, #127	; 0x7f
					rotated_dx  += received_dy;
    953e:	4699      	mov	r9, r3
					rotated_dy  -= received_dx;
    9540:	fa4f f38a 	sxtb.w	r3, sl
    9544:	e7a1      	b.n	948a <grid_port_receive_decode+0x19e>
				int8_t rotated_dy = 0;
    9546:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9548:	4699      	mov	r9, r3
    954a:	e79e      	b.n	948a <grid_port_receive_decode+0x19e>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    954c:	2306      	movs	r3, #6
    954e:	75bb      	strb	r3, [r7, #22]
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    9550:	23c8      	movs	r3, #200	; 0xc8
    9552:	9301      	str	r3, [sp, #4]
    9554:	2302      	movs	r3, #2
    9556:	9300      	str	r3, [sp, #0]
    9558:	2332      	movs	r3, #50	; 0x32
    955a:	461a      	mov	r2, r3
    955c:	4619      	mov	r1, r3
    955e:	4816      	ldr	r0, [pc, #88]	; (95b8 <grid_port_receive_decode+0x2cc>)
    9560:	4e16      	ldr	r6, [pc, #88]	; (95bc <grid_port_receive_decode+0x2d0>)
    9562:	47b0      	blx	r6
				uint32_t response_length = strlen(response);
    9564:	f107 0014 	add.w	r0, r7, #20
    9568:	4b26      	ldr	r3, [pc, #152]	; (9604 <grid_port_receive_decode+0x318>)
    956a:	4798      	blx	r3
    956c:	4606      	mov	r6, r0
				if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    956e:	f504 699b 	add.w	r9, r4, #1240	; 0x4d8
    9572:	b281      	uxth	r1, r0
    9574:	4648      	mov	r0, r9
    9576:	4b1f      	ldr	r3, [pc, #124]	; (95f4 <grid_port_receive_decode+0x308>)
    9578:	4798      	blx	r3
    957a:	2800      	cmp	r0, #0
    957c:	f43f aefa 	beq.w	9374 <grid_port_receive_decode+0x88>
					uint8_t checksum = grid_msg_get_checksum(response, response_length);
    9580:	4631      	mov	r1, r6
    9582:	f107 0014 	add.w	r0, r7, #20
    9586:	4b10      	ldr	r3, [pc, #64]	; (95c8 <grid_port_receive_decode+0x2dc>)
    9588:	4798      	blx	r3
					grid_msg_set_checksum(response, response_length, checksum);
    958a:	b2c2      	uxtb	r2, r0
    958c:	4631      	mov	r1, r6
    958e:	f107 0014 	add.w	r0, r7, #20
    9592:	4b17      	ldr	r3, [pc, #92]	; (95f0 <grid_port_receive_decode+0x304>)
    9594:	4798      	blx	r3
					for (uint32_t i=0; i<response_length; i++)
    9596:	b156      	cbz	r6, 95ae <grid_port_receive_decode+0x2c2>
    9598:	f107 0814 	add.w	r8, r7, #20
    959c:	4446      	add	r6, r8
						grid_buffer_write_character(&por->tx_buffer, response[i]);
    959e:	f8df a068 	ldr.w	sl, [pc, #104]	; 9608 <grid_port_receive_decode+0x31c>
    95a2:	f818 1b01 	ldrb.w	r1, [r8], #1
    95a6:	4648      	mov	r0, r9
    95a8:	47d0      	blx	sl
					for (uint32_t i=0; i<response_length; i++)
    95aa:	4546      	cmp	r6, r8
    95ac:	d1f9      	bne.n	95a2 <grid_port_receive_decode+0x2b6>
					grid_buffer_write_acknowledge(&por->tx_buffer);
    95ae:	4648      	mov	r0, r9
    95b0:	4b11      	ldr	r3, [pc, #68]	; (95f8 <grid_port_receive_decode+0x30c>)
    95b2:	4798      	blx	r3
    95b4:	e6de      	b.n	9374 <grid_port_receive_decode+0x88>
    95b6:	bf00      	nop
    95b8:	20001cf4 	.word	0x20001cf4
    95bc:	0000379d 	.word	0x0000379d
    95c0:	1b4e81b5 	.word	0x1b4e81b5
    95c4:	000037f1 	.word	0x000037f1
    95c8:	00003ac9 	.word	0x00003ac9
    95cc:	00003af9 	.word	0x00003af9
    95d0:	00003b59 	.word	0x00003b59
    95d4:	00003b19 	.word	0x00003b19
    95d8:	00003b39 	.word	0x00003b39
    95dc:	00003b79 	.word	0x00003b79
    95e0:	00003b8d 	.word	0x00003b8d
    95e4:	00003ba1 	.word	0x00003ba1
    95e8:	00003bb5 	.word	0x00003bb5
    95ec:	00003bc9 	.word	0x00003bc9
    95f0:	00003ae5 	.word	0x00003ae5
    95f4:	00001375 	.word	0x00001375
    95f8:	000013c1 	.word	0x000013c1
    95fc:	000016bd 	.word	0x000016bd
    9600:	00003bf3 	.word	0x00003bf3
    9604:	0000bc69 	.word	0x0000bc69
    9608:	000013a5 	.word	0x000013a5
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    960c:	78b3      	ldrb	r3, [r6, #2]
    960e:	2b06      	cmp	r3, #6
    9610:	d044      	beq.n	969c <grid_port_receive_decode+0x3b0>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    9612:	2b15      	cmp	r3, #21
    9614:	d04d      	beq.n	96b2 <grid_port_receive_decode+0x3c6>
				else if (message[2] == GRID_MSG_BELL){
    9616:	2b07      	cmp	r3, #7
    9618:	f47f aeac 	bne.w	9374 <grid_port_receive_decode+0x88>
					if (por->partner_status == 0){
    961c:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    9620:	2b00      	cmp	r3, #0
    9622:	d150      	bne.n	96c6 <grid_port_receive_decode+0x3da>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    9624:	78f3      	ldrb	r3, [r6, #3]
    9626:	7a62      	ldrb	r2, [r4, #9]
    9628:	1a9b      	subs	r3, r3, r2
    962a:	3306      	adds	r3, #6
    962c:	425a      	negs	r2, r3
    962e:	f003 0303 	and.w	r3, r3, #3
    9632:	f002 0203 	and.w	r2, r2, #3
    9636:	bf58      	it	pl
    9638:	4253      	negpl	r3, r2
    963a:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    963e:	f1a5 000c 	sub.w	r0, r5, #12
    9642:	2200      	movs	r2, #0
    9644:	2108      	movs	r1, #8
    9646:	4430      	add	r0, r6
    9648:	4b3e      	ldr	r3, [pc, #248]	; (9744 <grid_port_receive_decode+0x458>)
    964a:	4798      	blx	r3
    964c:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    9650:	2301      	movs	r3, #1
    9652:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9656:	4e3c      	ldr	r6, [pc, #240]	; (9748 <grid_port_receive_decode+0x45c>)
    9658:	4630      	mov	r0, r6
    965a:	4b3c      	ldr	r3, [pc, #240]	; (974c <grid_port_receive_decode+0x460>)
    965c:	4798      	blx	r3
    965e:	b2c0      	uxtb	r0, r0
    9660:	7030      	strb	r0, [r6, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    9662:	23c8      	movs	r3, #200	; 0xc8
    9664:	9301      	str	r3, [sp, #4]
    9666:	2302      	movs	r3, #2
    9668:	9300      	str	r3, [sp, #0]
    966a:	2300      	movs	r3, #0
    966c:	22ff      	movs	r2, #255	; 0xff
    966e:	4619      	mov	r1, r3
    9670:	4630      	mov	r0, r6
    9672:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 975c <grid_port_receive_decode+0x470>
    9676:	47c0      	blx	r8
						if (grid_sys_state.bank_select!=255){
    9678:	7a73      	ldrb	r3, [r6, #9]
    967a:	b2db      	uxtb	r3, r3
    967c:	2bff      	cmp	r3, #255	; 0xff
    967e:	f43f ae79 	beq.w	9374 <grid_port_receive_decode+0x88>
							grid_sys_write_hex_string_value(&mod->report_array[0].payload[7], 2, grid_sys_state.bank_select);
    9682:	7a72      	ldrb	r2, [r6, #9]
    9684:	4e32      	ldr	r6, [pc, #200]	; (9750 <grid_port_receive_decode+0x464>)
    9686:	6873      	ldr	r3, [r6, #4]
    9688:	6858      	ldr	r0, [r3, #4]
    968a:	2102      	movs	r1, #2
    968c:	3007      	adds	r0, #7
    968e:	4b31      	ldr	r3, [pc, #196]	; (9754 <grid_port_receive_decode+0x468>)
    9690:	4798      	blx	r3
							grid_report_sys_set_changed_flag(mod, 0);												
    9692:	2100      	movs	r1, #0
    9694:	4630      	mov	r0, r6
    9696:	4b30      	ldr	r3, [pc, #192]	; (9758 <grid_port_receive_decode+0x46c>)
    9698:	4798      	blx	r3
    969a:	e66b      	b.n	9374 <grid_port_receive_decode+0x88>
					grid_sys_alert_set_alert(&grid_sys_state, 30, 30, 30, 0, 250); // LIGHT WHITE PULSE
    969c:	23fa      	movs	r3, #250	; 0xfa
    969e:	9301      	str	r3, [sp, #4]
    96a0:	2300      	movs	r3, #0
    96a2:	9300      	str	r3, [sp, #0]
    96a4:	231e      	movs	r3, #30
    96a6:	461a      	mov	r2, r3
    96a8:	4619      	mov	r1, r3
    96aa:	4827      	ldr	r0, [pc, #156]	; (9748 <grid_port_receive_decode+0x45c>)
    96ac:	4e2b      	ldr	r6, [pc, #172]	; (975c <grid_port_receive_decode+0x470>)
    96ae:	47b0      	blx	r6
    96b0:	e660      	b.n	9374 <grid_port_receive_decode+0x88>
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    96b2:	23fa      	movs	r3, #250	; 0xfa
    96b4:	9301      	str	r3, [sp, #4]
    96b6:	2200      	movs	r2, #0
    96b8:	9200      	str	r2, [sp, #0]
    96ba:	4613      	mov	r3, r2
    96bc:	2132      	movs	r1, #50	; 0x32
    96be:	4822      	ldr	r0, [pc, #136]	; (9748 <grid_port_receive_decode+0x45c>)
    96c0:	4e26      	ldr	r6, [pc, #152]	; (975c <grid_port_receive_decode+0x470>)
    96c2:	47b0      	blx	r6
    96c4:	e656      	b.n	9374 <grid_port_receive_decode+0x88>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    96c6:	78f3      	ldrb	r3, [r6, #3]
    96c8:	7a62      	ldrb	r2, [r4, #9]
    96ca:	1a9b      	subs	r3, r3, r2
    96cc:	3306      	adds	r3, #6
    96ce:	425a      	negs	r2, r3
    96d0:	f003 0303 	and.w	r3, r3, #3
    96d4:	f002 0203 	and.w	r2, r2, #3
    96d8:	bf58      	it	pl
    96da:	4253      	negpl	r3, r2
    96dc:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    96e0:	4543      	cmp	r3, r8
    96e2:	bf14      	ite	ne
    96e4:	f04f 0800 	movne.w	r8, #0
    96e8:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    96ec:	f1a5 000c 	sub.w	r0, r5, #12
    96f0:	2200      	movs	r2, #0
    96f2:	2108      	movs	r1, #8
    96f4:	4430      	add	r0, r6
    96f6:	4b13      	ldr	r3, [pc, #76]	; (9744 <grid_port_receive_decode+0x458>)
    96f8:	4798      	blx	r3
    96fa:	60b8      	str	r0, [r7, #8]
						volatile uint32_t debug2 = por->partner_hwcfg;
    96fc:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    9700:	60fb      	str	r3, [r7, #12]
						validator &= (por->partner_hwcfg == debug);									
    9702:	68ba      	ldr	r2, [r7, #8]
						if (validator == 0){
    9704:	4293      	cmp	r3, r2
    9706:	d103      	bne.n	9710 <grid_port_receive_decode+0x424>
    9708:	f1b8 0f00 	cmp.w	r8, #0
    970c:	f47f ae32 	bne.w	9374 <grid_port_receive_decode+0x88>
							por->partner_status = 0;	
    9710:	2300      	movs	r3, #0
    9712:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9716:	23c8      	movs	r3, #200	; 0xc8
    9718:	9301      	str	r3, [sp, #4]
    971a:	2302      	movs	r3, #2
    971c:	9300      	str	r3, [sp, #0]
    971e:	23ff      	movs	r3, #255	; 0xff
    9720:	461a      	mov	r2, r3
    9722:	4619      	mov	r1, r3
    9724:	4808      	ldr	r0, [pc, #32]	; (9748 <grid_port_receive_decode+0x45c>)
    9726:	4e0d      	ldr	r6, [pc, #52]	; (975c <grid_port_receive_decode+0x470>)
    9728:	47b0      	blx	r6
    972a:	e623      	b.n	9374 <grid_port_receive_decode+0x88>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    972c:	23c8      	movs	r3, #200	; 0xc8
    972e:	9301      	str	r3, [sp, #4]
    9730:	2301      	movs	r3, #1
    9732:	9300      	str	r3, [sp, #0]
    9734:	2300      	movs	r3, #0
    9736:	461a      	mov	r2, r3
    9738:	2114      	movs	r1, #20
    973a:	4803      	ldr	r0, [pc, #12]	; (9748 <grid_port_receive_decode+0x45c>)
    973c:	4e07      	ldr	r6, [pc, #28]	; (975c <grid_port_receive_decode+0x470>)
    973e:	47b0      	blx	r6
    9740:	e618      	b.n	9374 <grid_port_receive_decode+0x88>
    9742:	bf00      	nop
    9744:	000037f1 	.word	0x000037f1
    9748:	20001cf4 	.word	0x20001cf4
    974c:	00003731 	.word	0x00003731
    9750:	20001ce4 	.word	0x20001ce4
    9754:	00003831 	.word	0x00003831
    9758:	00003e71 	.word	0x00003e71
    975c:	0000379d 	.word	0x0000379d

00009760 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    9760:	b510      	push	{r4, lr}
    9762:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    9764:	4b08      	ldr	r3, [pc, #32]	; (9788 <grid_port_receive_complete_task+0x28>)
    9766:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9768:	69e3      	ldr	r3, [r4, #28]
    976a:	b163      	cbz	r3, 9786 <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    976c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    976e:	6a22      	ldr	r2, [r4, #32]
    9770:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9772:	bf34      	ite	cc
    9774:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9776:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    977a:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    977c:	4620      	mov	r0, r4
    977e:	4b03      	ldr	r3, [pc, #12]	; (978c <grid_port_receive_complete_task+0x2c>)
    9780:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    9782:	2300      	movs	r3, #0
    9784:	61e3      	str	r3, [r4, #28]
    9786:	bd10      	pop	{r4, pc}
    9788:	00009249 	.word	0x00009249
    978c:	000092ed 	.word	0x000092ed

00009790 <init_timer>:

#define RTC1SEC 16384

void init_timer(void)
{
    9790:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20; //was /5: 200ms
    9792:	4c0d      	ldr	r4, [pc, #52]	; (97c8 <init_timer+0x38>)
    9794:	f240 3333 	movw	r3, #819	; 0x333
    9798:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    979a:	4b0c      	ldr	r3, [pc, #48]	; (97cc <init_timer+0x3c>)
    979c:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    979e:	2301      	movs	r3, #1
    97a0:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_realtime.interval = 1;
    97a2:	6223      	str	r3, [r4, #32]
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    97a4:	4a0a      	ldr	r2, [pc, #40]	; (97d0 <init_timer+0x40>)
    97a6:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    97a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    97ac:	4d09      	ldr	r5, [pc, #36]	; (97d4 <init_timer+0x44>)
    97ae:	1d21      	adds	r1, r4, #4
    97b0:	4628      	mov	r0, r5
    97b2:	4e09      	ldr	r6, [pc, #36]	; (97d8 <init_timer+0x48>)
    97b4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    97b6:	f104 0118 	add.w	r1, r4, #24
    97ba:	4628      	mov	r0, r5
    97bc:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    97be:	4628      	mov	r0, r5
    97c0:	4b06      	ldr	r3, [pc, #24]	; (97dc <init_timer+0x4c>)
    97c2:	4798      	blx	r3
    97c4:	bd70      	pop	{r4, r5, r6, pc}
    97c6:	bf00      	nop
    97c8:	20000d68 	.word	0x20000d68
    97cc:	00009195 	.word	0x00009195
    97d0:	000091ad 	.word	0x000091ad
    97d4:	20000f6c 	.word	0x20000f6c
    97d8:	00004c99 	.word	0x00004c99
    97dc:	00004c59 	.word	0x00004c59

000097e0 <main>:




int main(void)
{
    97e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97e4:	b087      	sub	sp, #28

	atmel_start_init();	
    97e6:	4b66      	ldr	r3, [pc, #408]	; (9980 <main+0x1a0>)
    97e8:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    97ea:	4b66      	ldr	r3, [pc, #408]	; (9984 <main+0x1a4>)
    97ec:	4798      	blx	r3


	composite_device_start();
    97ee:	4b66      	ldr	r3, [pc, #408]	; (9988 <main+0x1a8>)
    97f0:	4798      	blx	r3

	grid_module_common_init();
    97f2:	4b66      	ldr	r3, [pc, #408]	; (998c <main+0x1ac>)
    97f4:	4798      	blx	r3


	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    97f6:	4b66      	ldr	r3, [pc, #408]	; (9990 <main+0x1b0>)
    97f8:	4798      	blx	r3
    97fa:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    97fc:	2600      	movs	r6, #0
    97fe:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 99e8 <main+0x208>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9802:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 99d0 <main+0x1f0>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9806:	e003      	b.n	9810 <main+0x30>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9808:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    980c:	d01d      	beq.n	984a <main+0x6a>
    980e:	3601      	adds	r6, #1
    9810:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9812:	4860      	ldr	r0, [pc, #384]	; (9994 <main+0x1b4>)
    9814:	47c8      	blx	r9
    9816:	42a8      	cmp	r0, r5
    9818:	d8f6      	bhi.n	9808 <main+0x28>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    981a:	4b5f      	ldr	r3, [pc, #380]	; (9998 <main+0x1b8>)
    981c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9820:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9824:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9828:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    982c:	495b      	ldr	r1, [pc, #364]	; (999c <main+0x1bc>)
    982e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9832:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PIN_GRID_SYNC_1, false);	
	
	init_timer();
    9836:	4b5a      	ldr	r3, [pc, #360]	; (99a0 <main+0x1c0>)
    9838:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	printf("Entering Main Loop\r\n");
    983a:	485a      	ldr	r0, [pc, #360]	; (99a4 <main+0x1c4>)
    983c:	4b5a      	ldr	r3, [pc, #360]	; (99a8 <main+0x1c8>)
    983e:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    9840:	2300      	movs	r3, #0
    9842:	9305      	str	r3, [sp, #20]
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9844:	f8df 914c 	ldr.w	r9, [pc, #332]	; 9994 <main+0x1b4>
    9848:	e0e7      	b.n	9a1a <main+0x23a>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    984a:	27ff      	movs	r7, #255	; 0xff
    984c:	9701      	str	r7, [sp, #4]
    984e:	2400      	movs	r4, #0
    9850:	9400      	str	r4, [sp, #0]
    9852:	4623      	mov	r3, r4
    9854:	4622      	mov	r2, r4
    9856:	4629      	mov	r1, r5
    9858:	484e      	ldr	r0, [pc, #312]	; (9994 <main+0x1b4>)
    985a:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    985c:	9401      	str	r4, [sp, #4]
    985e:	2305      	movs	r3, #5
    9860:	9300      	str	r3, [sp, #0]
    9862:	4623      	mov	r3, r4
    9864:	4622      	mov	r2, r4
    9866:	4629      	mov	r1, r5
    9868:	484a      	ldr	r0, [pc, #296]	; (9994 <main+0x1b4>)
    986a:	f8df b178 	ldr.w	fp, [pc, #376]	; 99e4 <main+0x204>
    986e:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    9870:	9401      	str	r4, [sp, #4]
    9872:	9400      	str	r4, [sp, #0]
    9874:	463b      	mov	r3, r7
    9876:	4622      	mov	r2, r4
    9878:	4629      	mov	r1, r5
    987a:	4846      	ldr	r0, [pc, #280]	; (9994 <main+0x1b4>)
    987c:	4c4b      	ldr	r4, [pc, #300]	; (99ac <main+0x1cc>)
    987e:	47a0      	blx	r4
    9880:	e7c5      	b.n	980e <main+0x2e>
			if (usb_d_get_frame_num() == 0){
    9882:	4b4b      	ldr	r3, [pc, #300]	; (99b0 <main+0x1d0>)
    9884:	4798      	blx	r3
    9886:	2800      	cmp	r0, #0
    9888:	f000 80cb 	beq.w	9a22 <main+0x242>
				grid_sys_bank_select(&grid_sys_state, 0);
    988c:	2100      	movs	r1, #0
    988e:	4849      	ldr	r0, [pc, #292]	; (99b4 <main+0x1d4>)
    9890:	4b49      	ldr	r3, [pc, #292]	; (99b8 <main+0x1d8>)
    9892:	4798      	blx	r3
				usb_init_variable = 1;
    9894:	2301      	movs	r3, #1
    9896:	9305      	str	r3, [sp, #20]
    9898:	e0c3      	b.n	9a22 <main+0x242>
				grid_sys_ping(&GRID_PORT_N);
    989a:	4848      	ldr	r0, [pc, #288]	; (99bc <main+0x1dc>)
    989c:	4b48      	ldr	r3, [pc, #288]	; (99c0 <main+0x1e0>)
    989e:	4798      	blx	r3
    98a0:	e0cc      	b.n	9a3c <main+0x25c>
				grid_sys_ping(&GRID_PORT_E);
    98a2:	4848      	ldr	r0, [pc, #288]	; (99c4 <main+0x1e4>)
    98a4:	4b46      	ldr	r3, [pc, #280]	; (99c0 <main+0x1e0>)
    98a6:	4798      	blx	r3
    98a8:	e0cf      	b.n	9a4a <main+0x26a>
				grid_sys_ping(&GRID_PORT_S);
    98aa:	4847      	ldr	r0, [pc, #284]	; (99c8 <main+0x1e8>)
    98ac:	4b44      	ldr	r3, [pc, #272]	; (99c0 <main+0x1e0>)
    98ae:	4798      	blx	r3
    98b0:	e0d2      	b.n	9a58 <main+0x278>
				grid_sys_ping(&GRID_PORT_W);
    98b2:	4846      	ldr	r0, [pc, #280]	; (99cc <main+0x1ec>)
    98b4:	4b42      	ldr	r3, [pc, #264]	; (99c0 <main+0x1e0>)
    98b6:	4798      	blx	r3
    98b8:	e0d5      	b.n	9a66 <main+0x286>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    98ba:	2300      	movs	r3, #0
    98bc:	9301      	str	r3, [sp, #4]
    98be:	9300      	str	r3, [sp, #0]
    98c0:	2201      	movs	r2, #1
    98c2:	4621      	mov	r1, r4
    98c4:	4648      	mov	r0, r9
    98c6:	4d42      	ldr	r5, [pc, #264]	; (99d0 <main+0x1f0>)
    98c8:	47a8      	blx	r5
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    98ca:	4f42      	ldr	r7, [pc, #264]	; (99d4 <main+0x1f4>)
    98cc:	9802      	ldr	r0, [sp, #8]
    98ce:	47b8      	blx	r7
    98d0:	4e41      	ldr	r6, [pc, #260]	; (99d8 <main+0x1f8>)
    98d2:	2200      	movs	r2, #0
    98d4:	4b41      	ldr	r3, [pc, #260]	; (99dc <main+0x1fc>)
    98d6:	47b0      	blx	r6
    98d8:	4d41      	ldr	r5, [pc, #260]	; (99e0 <main+0x200>)
    98da:	47a8      	blx	r5
    98dc:	fa5f fb80 	uxtb.w	fp, r0
    98e0:	9803      	ldr	r0, [sp, #12]
    98e2:	47b8      	blx	r7
    98e4:	2200      	movs	r2, #0
    98e6:	4b3d      	ldr	r3, [pc, #244]	; (99dc <main+0x1fc>)
    98e8:	47b0      	blx	r6
    98ea:	47a8      	blx	r5
    98ec:	b2c0      	uxtb	r0, r0
    98ee:	9001      	str	r0, [sp, #4]
    98f0:	4650      	mov	r0, sl
    98f2:	47b8      	blx	r7
    98f4:	2200      	movs	r2, #0
    98f6:	4b39      	ldr	r3, [pc, #228]	; (99dc <main+0x1fc>)
    98f8:	47b0      	blx	r6
    98fa:	47a8      	blx	r5
    98fc:	b2c0      	uxtb	r0, r0
    98fe:	9000      	str	r0, [sp, #0]
    9900:	465b      	mov	r3, fp
    9902:	2201      	movs	r2, #1
    9904:	4621      	mov	r1, r4
    9906:	4648      	mov	r0, r9
    9908:	4d36      	ldr	r5, [pc, #216]	; (99e4 <main+0x204>)
    990a:	47a8      	blx	r5
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    990c:	9a03      	ldr	r2, [sp, #12]
    990e:	9201      	str	r2, [sp, #4]
    9910:	f8cd a000 	str.w	sl, [sp]
    9914:	9b02      	ldr	r3, [sp, #8]
    9916:	2201      	movs	r2, #1
    9918:	4621      	mov	r1, r4
    991a:	4648      	mov	r0, r9
    991c:	4c23      	ldr	r4, [pc, #140]	; (99ac <main+0x1cc>)
    991e:	47a0      	blx	r4
    9920:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9924:	4648      	mov	r0, r9
    9926:	4b30      	ldr	r3, [pc, #192]	; (99e8 <main+0x208>)
    9928:	4798      	blx	r3
    992a:	f108 0801 	add.w	r8, r8, #1
    992e:	4284      	cmp	r4, r0
    9930:	d3c3      	bcc.n	98ba <main+0xda>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9932:	4820      	ldr	r0, [pc, #128]	; (99b4 <main+0x1d4>)
    9934:	4b2d      	ldr	r3, [pc, #180]	; (99ec <main+0x20c>)
    9936:	4798      	blx	r3
    9938:	4605      	mov	r5, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    993a:	f899 3001 	ldrb.w	r3, [r9, #1]
    993e:	b16b      	cbz	r3, 995c <main+0x17c>
    9940:	2400      	movs	r4, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    9942:	2701      	movs	r7, #1
    9944:	4e2a      	ldr	r6, [pc, #168]	; (99f0 <main+0x210>)
    9946:	462b      	mov	r3, r5
    9948:	463a      	mov	r2, r7
    994a:	4621      	mov	r1, r4
    994c:	4648      	mov	r0, r9
    994e:	47b0      	blx	r6
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9950:	3401      	adds	r4, #1
    9952:	b2e4      	uxtb	r4, r4
    9954:	f899 3001 	ldrb.w	r3, [r9, #1]
    9958:	42a3      	cmp	r3, r4
    995a:	d8f4      	bhi.n	9946 <main+0x166>
			
		}
		
		
	
		grid_led_tick(&grid_led_state);
    995c:	4648      	mov	r0, r9
    995e:	4b25      	ldr	r3, [pc, #148]	; (99f4 <main+0x214>)
    9960:	4798      	blx	r3
			
			
		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    9962:	4c25      	ldr	r4, [pc, #148]	; (99f8 <main+0x218>)
    9964:	4648      	mov	r0, r9
    9966:	47a0      	blx	r4
    9968:	2801      	cmp	r0, #1
    996a:	d1fb      	bne.n	9964 <main+0x184>
			
		}
		
		grid_led_render_all(&grid_led_state);
    996c:	4648      	mov	r0, r9
    996e:	4b23      	ldr	r3, [pc, #140]	; (99fc <main+0x21c>)
    9970:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    9972:	4648      	mov	r0, r9
    9974:	4b22      	ldr	r3, [pc, #136]	; (9a00 <main+0x220>)
    9976:	4798      	blx	r3
	
	
	

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9978:	4c22      	ldr	r4, [pc, #136]	; (9a04 <main+0x224>)
			
			delay_us(10);
    997a:	4d23      	ldr	r5, [pc, #140]	; (9a08 <main+0x228>)
    997c:	9e04      	ldr	r6, [sp, #16]
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    997e:	e047      	b.n	9a10 <main+0x230>
    9980:	000002d1 	.word	0x000002d1
    9984:	0000a651 	.word	0x0000a651
    9988:	0000aff9 	.word	0x0000aff9
    998c:	00002339 	.word	0x00002339
    9990:	00003869 	.word	0x00003869
    9994:	20003600 	.word	0x20003600
    9998:	41008000 	.word	0x41008000
    999c:	c0000004 	.word	0xc0000004
    99a0:	00009791 	.word	0x00009791
    99a4:	0000d238 	.word	0x0000d238
    99a8:	0000ba85 	.word	0x0000ba85
    99ac:	00001ee3 	.word	0x00001ee3
    99b0:	00005479 	.word	0x00005479
    99b4:	20001cf4 	.word	0x20001cf4
    99b8:	00003959 	.word	0x00003959
    99bc:	20001284 	.word	0x20001284
    99c0:	00003c09 	.word	0x00003c09
    99c4:	200030ec 	.word	0x200030ec
    99c8:	200026c8 	.word	0x200026c8
    99cc:	200021a4 	.word	0x200021a4
    99d0:	00001e51 	.word	0x00001e51
    99d4:	0000b2c5 	.word	0x0000b2c5
    99d8:	0000b391 	.word	0x0000b391
    99dc:	3fe00000 	.word	0x3fe00000
    99e0:	0000b7b5 	.word	0x0000b7b5
    99e4:	00001e99 	.word	0x00001e99
    99e8:	00001e09 	.word	0x00001e09
    99ec:	00003755 	.word	0x00003755
    99f0:	00001f2d 	.word	0x00001f2d
    99f4:	00001e0d 	.word	0x00001e0d
    99f8:	0000232d 	.word	0x0000232d
    99fc:	00002145 	.word	0x00002145
    9a00:	00002301 	.word	0x00002301
    9a04:	00003735 	.word	0x00003735
    9a08:	0000440d 	.word	0x0000440d
			delay_us(10);
    9a0c:	200a      	movs	r0, #10
    9a0e:	47a8      	blx	r5
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9a10:	4631      	mov	r1, r6
    9a12:	483c      	ldr	r0, [pc, #240]	; (9b04 <main+0x324>)
    9a14:	47a0      	blx	r4
    9a16:	280f      	cmp	r0, #15
    9a18:	d9f8      	bls.n	9a0c <main+0x22c>
		if (usb_init_variable == 0){
    9a1a:	9b05      	ldr	r3, [sp, #20]
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	f43f af30 	beq.w	9882 <main+0xa2>
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    9a22:	4838      	ldr	r0, [pc, #224]	; (9b04 <main+0x324>)
    9a24:	4b38      	ldr	r3, [pc, #224]	; (9b08 <main+0x328>)
    9a26:	4798      	blx	r3
    9a28:	9004      	str	r0, [sp, #16]
		if (pingflag_active){
    9a2a:	4b38      	ldr	r3, [pc, #224]	; (9b0c <main+0x32c>)
    9a2c:	785b      	ldrb	r3, [r3, #1]
    9a2e:	b1eb      	cbz	r3, 9a6c <main+0x28c>
			if (pingflag%4 == 0){
    9a30:	4b36      	ldr	r3, [pc, #216]	; (9b0c <main+0x32c>)
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	f013 0f03 	tst.w	r3, #3
    9a38:	f43f af2f 	beq.w	989a <main+0xba>
			if (pingflag%4 == 1){
    9a3c:	4b33      	ldr	r3, [pc, #204]	; (9b0c <main+0x32c>)
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	f003 0303 	and.w	r3, r3, #3
    9a44:	2b01      	cmp	r3, #1
    9a46:	f43f af2c 	beq.w	98a2 <main+0xc2>
			if (pingflag%4 == 2){
    9a4a:	4b30      	ldr	r3, [pc, #192]	; (9b0c <main+0x32c>)
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	f003 0303 	and.w	r3, r3, #3
    9a52:	2b02      	cmp	r3, #2
    9a54:	f43f af29 	beq.w	98aa <main+0xca>
			if (pingflag%4 == 3){
    9a58:	4b2c      	ldr	r3, [pc, #176]	; (9b0c <main+0x32c>)
    9a5a:	781b      	ldrb	r3, [r3, #0]
    9a5c:	f003 0303 	and.w	r3, r3, #3
    9a60:	2b03      	cmp	r3, #3
    9a62:	f43f af26 	beq.w	98b2 <main+0xd2>
			pingflag_active = 0;
    9a66:	2200      	movs	r2, #0
    9a68:	4b28      	ldr	r3, [pc, #160]	; (9b0c <main+0x32c>)
    9a6a:	705a      	strb	r2, [r3, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9a6c:	4828      	ldr	r0, [pc, #160]	; (9b10 <main+0x330>)
    9a6e:	4c29      	ldr	r4, [pc, #164]	; (9b14 <main+0x334>)
    9a70:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    9a72:	4829      	ldr	r0, [pc, #164]	; (9b18 <main+0x338>)
    9a74:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    9a76:	4829      	ldr	r0, [pc, #164]	; (9b1c <main+0x33c>)
    9a78:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    9a7a:	4829      	ldr	r0, [pc, #164]	; (9b20 <main+0x340>)
    9a7c:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);
    9a7e:	4d29      	ldr	r5, [pc, #164]	; (9b24 <main+0x344>)
    9a80:	4628      	mov	r0, r5
    9a82:	4b29      	ldr	r3, [pc, #164]	; (9b28 <main+0x348>)
    9a84:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    9a86:	4628      	mov	r0, r5
    9a88:	4c28      	ldr	r4, [pc, #160]	; (9b2c <main+0x34c>)
    9a8a:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    9a8c:	4820      	ldr	r0, [pc, #128]	; (9b10 <main+0x330>)
    9a8e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    9a90:	4821      	ldr	r0, [pc, #132]	; (9b18 <main+0x338>)
    9a92:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    9a94:	4821      	ldr	r0, [pc, #132]	; (9b1c <main+0x33c>)
    9a96:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);						
    9a98:	4821      	ldr	r0, [pc, #132]	; (9b20 <main+0x340>)
    9a9a:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    9a9c:	481c      	ldr	r0, [pc, #112]	; (9b10 <main+0x330>)
    9a9e:	4c24      	ldr	r4, [pc, #144]	; (9b30 <main+0x350>)
    9aa0:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    9aa2:	481d      	ldr	r0, [pc, #116]	; (9b18 <main+0x338>)
    9aa4:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    9aa6:	481d      	ldr	r0, [pc, #116]	; (9b1c <main+0x33c>)
    9aa8:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    9aaa:	481d      	ldr	r0, [pc, #116]	; (9b20 <main+0x340>)
    9aac:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    9aae:	4821      	ldr	r0, [pc, #132]	; (9b34 <main+0x354>)
    9ab0:	4b21      	ldr	r3, [pc, #132]	; (9b38 <main+0x358>)
    9ab2:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    9ab4:	4628      	mov	r0, r5
    9ab6:	4b21      	ldr	r3, [pc, #132]	; (9b3c <main+0x35c>)
    9ab8:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    9aba:	4b12      	ldr	r3, [pc, #72]	; (9b04 <main+0x324>)
    9abc:	889b      	ldrh	r3, [r3, #4]
    9abe:	b29b      	uxth	r3, r3
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	f43f af4b 	beq.w	995c <main+0x17c>
			grid_sys_state.alert_state--;
    9ac6:	4b0f      	ldr	r3, [pc, #60]	; (9b04 <main+0x324>)
    9ac8:	889b      	ldrh	r3, [r3, #4]
    9aca:	3b01      	subs	r3, #1
    9acc:	b29b      	uxth	r3, r3
    9ace:	4a0d      	ldr	r2, [pc, #52]	; (9b04 <main+0x324>)
    9ad0:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9ad2:	4610      	mov	r0, r2
    9ad4:	4b1a      	ldr	r3, [pc, #104]	; (9b40 <main+0x360>)
    9ad6:	4798      	blx	r3
    9ad8:	2800      	cmp	r0, #0
    9ada:	f43f af2a 	beq.w	9932 <main+0x152>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9ade:	4809      	ldr	r0, [pc, #36]	; (9b04 <main+0x324>)
    9ae0:	4b18      	ldr	r3, [pc, #96]	; (9b44 <main+0x364>)
    9ae2:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9ae4:	4807      	ldr	r0, [pc, #28]	; (9b04 <main+0x324>)
    9ae6:	4b18      	ldr	r3, [pc, #96]	; (9b48 <main+0x368>)
    9ae8:	4798      	blx	r3
    9aea:	9002      	str	r0, [sp, #8]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9aec:	4805      	ldr	r0, [pc, #20]	; (9b04 <main+0x324>)
    9aee:	4b17      	ldr	r3, [pc, #92]	; (9b4c <main+0x36c>)
    9af0:	4798      	blx	r3
    9af2:	4682      	mov	sl, r0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9af4:	4803      	ldr	r0, [pc, #12]	; (9b04 <main+0x324>)
    9af6:	4b16      	ldr	r3, [pc, #88]	; (9b50 <main+0x370>)
    9af8:	4798      	blx	r3
    9afa:	9003      	str	r0, [sp, #12]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9afc:	f04f 0800 	mov.w	r8, #0
    9b00:	e70e      	b.n	9920 <main+0x140>
    9b02:	bf00      	nop
    9b04:	20001cf4 	.word	0x20001cf4
    9b08:	00003731 	.word	0x00003731
    9b0c:	20000d68 	.word	0x20000d68
    9b10:	20001284 	.word	0x20001284
    9b14:	00009761 	.word	0x00009761
    9b18:	200030ec 	.word	0x200030ec
    9b1c:	200026c8 	.word	0x200026c8
    9b20:	200021a4 	.word	0x200021a4
    9b24:	200017d4 	.word	0x200017d4
    9b28:	00003e85 	.word	0x00003e85
    9b2c:	000016bd 	.word	0x000016bd
    9b30:	00001d25 	.word	0x00001d25
    9b34:	20002bdc 	.word	0x20002bdc
    9b38:	00001861 	.word	0x00001861
    9b3c:	00001ce1 	.word	0x00001ce1
    9b40:	0000374b 	.word	0x0000374b
    9b44:	0000374f 	.word	0x0000374f
    9b48:	000037bb 	.word	0x000037bb
    9b4c:	000037bf 	.word	0x000037bf
    9b50:	000037c3 	.word	0x000037c3

00009b54 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9b54:	b940      	cbnz	r0, 9b68 <_read+0x14>
{
    9b56:	b508      	push	{r3, lr}
    9b58:	460b      	mov	r3, r1
    9b5a:	4611      	mov	r1, r2
    9b5c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9b5e:	4b04      	ldr	r3, [pc, #16]	; (9b70 <_read+0x1c>)
    9b60:	4798      	blx	r3
    9b62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9b66:	bd08      	pop	{r3, pc}
		return -1;
    9b68:	f04f 30ff 	mov.w	r0, #4294967295
    9b6c:	4770      	bx	lr
    9b6e:	bf00      	nop
    9b70:	00009bc5 	.word	0x00009bc5

00009b74 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9b74:	3801      	subs	r0, #1
    9b76:	2802      	cmp	r0, #2
    9b78:	d808      	bhi.n	9b8c <_write+0x18>
{
    9b7a:	b508      	push	{r3, lr}
    9b7c:	460b      	mov	r3, r1
    9b7e:	4611      	mov	r1, r2
    9b80:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9b82:	4b04      	ldr	r3, [pc, #16]	; (9b94 <_write+0x20>)
    9b84:	4798      	blx	r3
    9b86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9b8a:	bd08      	pop	{r3, pc}
		return -1;
    9b8c:	f04f 30ff 	mov.w	r0, #4294967295
    9b90:	4770      	bx	lr
    9b92:	bf00      	nop
    9b94:	00009be9 	.word	0x00009be9

00009b98 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9b98:	b570      	push	{r4, r5, r6, lr}
    9b9a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9b9c:	4d06      	ldr	r5, [pc, #24]	; (9bb8 <stdio_io_init+0x20>)
    9b9e:	682b      	ldr	r3, [r5, #0]
    9ba0:	2100      	movs	r1, #0
    9ba2:	6898      	ldr	r0, [r3, #8]
    9ba4:	4c05      	ldr	r4, [pc, #20]	; (9bbc <stdio_io_init+0x24>)
    9ba6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9ba8:	682b      	ldr	r3, [r5, #0]
    9baa:	2100      	movs	r1, #0
    9bac:	6858      	ldr	r0, [r3, #4]
    9bae:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9bb0:	4b03      	ldr	r3, [pc, #12]	; (9bc0 <stdio_io_init+0x28>)
    9bb2:	601e      	str	r6, [r3, #0]
    9bb4:	bd70      	pop	{r4, r5, r6, pc}
    9bb6:	bf00      	nop
    9bb8:	20000558 	.word	0x20000558
    9bbc:	0000bab5 	.word	0x0000bab5
    9bc0:	20000e28 	.word	0x20000e28

00009bc4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9bc4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9bc6:	4b06      	ldr	r3, [pc, #24]	; (9be0 <stdio_io_read+0x1c>)
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	b133      	cbz	r3, 9bda <stdio_io_read+0x16>
    9bcc:	460a      	mov	r2, r1
    9bce:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9bd0:	b292      	uxth	r2, r2
    9bd2:	4618      	mov	r0, r3
    9bd4:	4b03      	ldr	r3, [pc, #12]	; (9be4 <stdio_io_read+0x20>)
    9bd6:	4798      	blx	r3
    9bd8:	bd08      	pop	{r3, pc}
		return 0;
    9bda:	2000      	movs	r0, #0
}
    9bdc:	bd08      	pop	{r3, pc}
    9bde:	bf00      	nop
    9be0:	20000e28 	.word	0x20000e28
    9be4:	000045e9 	.word	0x000045e9

00009be8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9be8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9bea:	4b06      	ldr	r3, [pc, #24]	; (9c04 <stdio_io_write+0x1c>)
    9bec:	681b      	ldr	r3, [r3, #0]
    9bee:	b133      	cbz	r3, 9bfe <stdio_io_write+0x16>
    9bf0:	460a      	mov	r2, r1
    9bf2:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9bf4:	b292      	uxth	r2, r2
    9bf6:	4618      	mov	r0, r3
    9bf8:	4b03      	ldr	r3, [pc, #12]	; (9c08 <stdio_io_write+0x20>)
    9bfa:	4798      	blx	r3
    9bfc:	bd08      	pop	{r3, pc}
		return 0;
    9bfe:	2000      	movs	r0, #0
}
    9c00:	bd08      	pop	{r3, pc}
    9c02:	bf00      	nop
    9c04:	20000e28 	.word	0x20000e28
    9c08:	000045b9 	.word	0x000045b9

00009c0c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9c0c:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9c0e:	4c04      	ldr	r4, [pc, #16]	; (9c20 <stdio_redirect_init+0x14>)
    9c10:	4620      	mov	r0, r4
    9c12:	4b04      	ldr	r3, [pc, #16]	; (9c24 <stdio_redirect_init+0x18>)
    9c14:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9c16:	4620      	mov	r0, r4
    9c18:	4b03      	ldr	r3, [pc, #12]	; (9c28 <stdio_redirect_init+0x1c>)
    9c1a:	4798      	blx	r3
    9c1c:	bd10      	pop	{r4, pc}
    9c1e:	bf00      	nop
    9c20:	20001024 	.word	0x20001024
    9c24:	0000516d 	.word	0x0000516d
    9c28:	00009b99 	.word	0x00009b99

00009c2c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c2e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9c30:	780b      	ldrb	r3, [r1, #0]
    9c32:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9c36:	2c01      	cmp	r4, #1
    9c38:	d15e      	bne.n	9cf8 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9c3a:	888c      	ldrh	r4, [r1, #4]
    9c3c:	4d35      	ldr	r5, [pc, #212]	; (9d14 <cdcdf_acm_req+0xe8>)
    9c3e:	782d      	ldrb	r5, [r5, #0]
    9c40:	42a5      	cmp	r5, r4
    9c42:	d003      	beq.n	9c4c <cdcdf_acm_req+0x20>
    9c44:	4d33      	ldr	r5, [pc, #204]	; (9d14 <cdcdf_acm_req+0xe8>)
    9c46:	786d      	ldrb	r5, [r5, #1]
    9c48:	42a5      	cmp	r5, r4
    9c4a:	d158      	bne.n	9cfe <cdcdf_acm_req+0xd2>
    9c4c:	4616      	mov	r6, r2
    9c4e:	460c      	mov	r4, r1
    9c50:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9c52:	f013 0f80 	tst.w	r3, #128	; 0x80
    9c56:	d10c      	bne.n	9c72 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9c58:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9c5a:	4b2f      	ldr	r3, [pc, #188]	; (9d18 <cdcdf_acm_req+0xec>)
    9c5c:	4798      	blx	r3
    9c5e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9c60:	7863      	ldrb	r3, [r4, #1]
    9c62:	2b20      	cmp	r3, #32
    9c64:	d013      	beq.n	9c8e <cdcdf_acm_req+0x62>
    9c66:	2b22      	cmp	r3, #34	; 0x22
    9c68:	d032      	beq.n	9cd0 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9c6a:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9c6e:	b003      	add	sp, #12
    9c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9c72:	2a01      	cmp	r2, #1
    9c74:	d046      	beq.n	9d04 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9c76:	784b      	ldrb	r3, [r1, #1]
    9c78:	2b21      	cmp	r3, #33	; 0x21
    9c7a:	d145      	bne.n	9d08 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9c7c:	88cb      	ldrh	r3, [r1, #6]
    9c7e:	2b07      	cmp	r3, #7
    9c80:	d145      	bne.n	9d0e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9c82:	2300      	movs	r3, #0
    9c84:	2207      	movs	r2, #7
    9c86:	4925      	ldr	r1, [pc, #148]	; (9d1c <cdcdf_acm_req+0xf0>)
    9c88:	4c25      	ldr	r4, [pc, #148]	; (9d20 <cdcdf_acm_req+0xf4>)
    9c8a:	47a0      	blx	r4
    9c8c:	e7ef      	b.n	9c6e <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9c8e:	2f07      	cmp	r7, #7
    9c90:	d12b      	bne.n	9cea <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9c92:	b1be      	cbz	r6, 9cc4 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9c94:	6800      	ldr	r0, [r0, #0]
    9c96:	9000      	str	r0, [sp, #0]
    9c98:	888a      	ldrh	r2, [r1, #4]
    9c9a:	798b      	ldrb	r3, [r1, #6]
    9c9c:	f8ad 2004 	strh.w	r2, [sp, #4]
    9ca0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9ca4:	4b1b      	ldr	r3, [pc, #108]	; (9d14 <cdcdf_acm_req+0xe8>)
    9ca6:	691b      	ldr	r3, [r3, #16]
    9ca8:	b113      	cbz	r3, 9cb0 <cdcdf_acm_req+0x84>
    9caa:	4668      	mov	r0, sp
    9cac:	4798      	blx	r3
    9cae:	b1f8      	cbz	r0, 9cf0 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9cb0:	4b18      	ldr	r3, [pc, #96]	; (9d14 <cdcdf_acm_req+0xe8>)
    9cb2:	aa02      	add	r2, sp, #8
    9cb4:	e912 0003 	ldmdb	r2, {r0, r1}
    9cb8:	6098      	str	r0, [r3, #8]
    9cba:	8199      	strh	r1, [r3, #12]
    9cbc:	0c09      	lsrs	r1, r1, #16
    9cbe:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9cc0:	2000      	movs	r0, #0
    9cc2:	e7d4      	b.n	9c6e <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9cc4:	2300      	movs	r3, #0
    9cc6:	2207      	movs	r2, #7
    9cc8:	4628      	mov	r0, r5
    9cca:	4c15      	ldr	r4, [pc, #84]	; (9d20 <cdcdf_acm_req+0xf4>)
    9ccc:	47a0      	blx	r4
    9cce:	e7ce      	b.n	9c6e <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9cd0:	2300      	movs	r3, #0
    9cd2:	461a      	mov	r2, r3
    9cd4:	4619      	mov	r1, r3
    9cd6:	4618      	mov	r0, r3
    9cd8:	4d11      	ldr	r5, [pc, #68]	; (9d20 <cdcdf_acm_req+0xf4>)
    9cda:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9cdc:	4b0d      	ldr	r3, [pc, #52]	; (9d14 <cdcdf_acm_req+0xe8>)
    9cde:	695b      	ldr	r3, [r3, #20]
    9ce0:	b143      	cbz	r3, 9cf4 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9ce2:	8860      	ldrh	r0, [r4, #2]
    9ce4:	4798      	blx	r3
		return ERR_NONE;
    9ce6:	2000      	movs	r0, #0
    9ce8:	e7c1      	b.n	9c6e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9cea:	f04f 30ff 	mov.w	r0, #4294967295
    9cee:	e7be      	b.n	9c6e <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9cf0:	2000      	movs	r0, #0
    9cf2:	e7bc      	b.n	9c6e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9cf4:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9cf6:	e7ba      	b.n	9c6e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9cf8:	f06f 0009 	mvn.w	r0, #9
    9cfc:	e7b7      	b.n	9c6e <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9cfe:	f06f 0009 	mvn.w	r0, #9
    9d02:	e7b4      	b.n	9c6e <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9d04:	2000      	movs	r0, #0
    9d06:	e7b2      	b.n	9c6e <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9d08:	f06f 000c 	mvn.w	r0, #12
    9d0c:	e7af      	b.n	9c6e <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9d0e:	f04f 30ff 	mov.w	r0, #4294967295
    9d12:	e7ac      	b.n	9c6e <cdcdf_acm_req+0x42>
    9d14:	20000e2c 	.word	0x20000e2c
    9d18:	0000ad75 	.word	0x0000ad75
    9d1c:	20000e34 	.word	0x20000e34
    9d20:	0000a851 	.word	0x0000a851

00009d24 <cdcdf_acm_ctrl>:
{
    9d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d28:	b083      	sub	sp, #12
    9d2a:	4616      	mov	r6, r2
	switch (ctrl) {
    9d2c:	2901      	cmp	r1, #1
    9d2e:	d066      	beq.n	9dfe <cdcdf_acm_ctrl+0xda>
    9d30:	b141      	cbz	r1, 9d44 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9d32:	2902      	cmp	r1, #2
    9d34:	bf0c      	ite	eq
    9d36:	f06f 001a 	mvneq.w	r0, #26
    9d3a:	f06f 000c 	mvnne.w	r0, #12
}
    9d3e:	b003      	add	sp, #12
    9d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9d44:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9d48:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9d4a:	2800      	cmp	r0, #0
    9d4c:	f000 8085 	beq.w	9e5a <cdcdf_acm_ctrl+0x136>
    9d50:	f10a 3bff 	add.w	fp, sl, #4294967295
    9d54:	f10a 0301 	add.w	r3, sl, #1
    9d58:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9d5a:	4f46      	ldr	r7, [pc, #280]	; (9e74 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9d5c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9e84 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9d60:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9e88 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9d64:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9d66:	7943      	ldrb	r3, [r0, #5]
    9d68:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9d6c:	2b02      	cmp	r3, #2
    9d6e:	d002      	beq.n	9d76 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9d70:	f06f 0009 	mvn.w	r0, #9
    9d74:	e7e3      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
    9d76:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9d7a:	f89b 3000 	ldrb.w	r3, [fp]
    9d7e:	429a      	cmp	r2, r3
    9d80:	d06e      	beq.n	9e60 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9d82:	2bff      	cmp	r3, #255	; 0xff
    9d84:	d16f      	bne.n	9e66 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9d86:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9d8a:	2205      	movs	r2, #5
    9d8c:	6871      	ldr	r1, [r6, #4]
    9d8e:	4b3a      	ldr	r3, [pc, #232]	; (9e78 <cdcdf_acm_ctrl+0x154>)
    9d90:	4798      	blx	r3
		while (NULL != ep) {
    9d92:	4604      	mov	r4, r0
    9d94:	b1f8      	cbz	r0, 9dd6 <cdcdf_acm_ctrl+0xb2>
    9d96:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9d9a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9d9c:	7963      	ldrb	r3, [r4, #5]
    9d9e:	7922      	ldrb	r2, [r4, #4]
    9da0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9da4:	b292      	uxth	r2, r2
    9da6:	78e1      	ldrb	r1, [r4, #3]
    9da8:	4628      	mov	r0, r5
    9daa:	47b8      	blx	r7
    9dac:	2800      	cmp	r0, #0
    9dae:	d15d      	bne.n	9e6c <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9db0:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9db4:	bf14      	ite	ne
    9db6:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9dba:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9dbe:	4628      	mov	r0, r5
    9dc0:	47c8      	blx	r9
			desc->sod = ep;
    9dc2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9dc4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9dc6:	6871      	ldr	r1, [r6, #4]
    9dc8:	4420      	add	r0, r4
    9dca:	47c0      	blx	r8
		while (NULL != ep) {
    9dcc:	4604      	mov	r4, r0
    9dce:	2800      	cmp	r0, #0
    9dd0:	d1e3      	bne.n	9d9a <cdcdf_acm_ctrl+0x76>
    9dd2:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9dd6:	6833      	ldr	r3, [r6, #0]
    9dd8:	7818      	ldrb	r0, [r3, #0]
    9dda:	2204      	movs	r2, #4
    9ddc:	6871      	ldr	r1, [r6, #4]
    9dde:	4418      	add	r0, r3
    9de0:	4b25      	ldr	r3, [pc, #148]	; (9e78 <cdcdf_acm_ctrl+0x154>)
    9de2:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9de4:	9b00      	ldr	r3, [sp, #0]
    9de6:	459b      	cmp	fp, r3
    9de8:	d004      	beq.n	9df4 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9dea:	2800      	cmp	r0, #0
    9dec:	d1ba      	bne.n	9d64 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9dee:	f06f 0009 	mvn.w	r0, #9
    9df2:	e7a4      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9df4:	2201      	movs	r2, #1
    9df6:	4b21      	ldr	r3, [pc, #132]	; (9e7c <cdcdf_acm_ctrl+0x158>)
    9df8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9dfa:	2000      	movs	r0, #0
    9dfc:	e79f      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9dfe:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9e00:	b142      	cbz	r2, 9e14 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9e02:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9e04:	795b      	ldrb	r3, [r3, #5]
    9e06:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9e0a:	2b02      	cmp	r3, #2
    9e0c:	d002      	beq.n	9e14 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9e0e:	f06f 0009 	mvn.w	r0, #9
    9e12:	e794      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9e14:	7823      	ldrb	r3, [r4, #0]
    9e16:	2bff      	cmp	r3, #255	; 0xff
    9e18:	d008      	beq.n	9e2c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9e1a:	23ff      	movs	r3, #255	; 0xff
    9e1c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9e1e:	78a0      	ldrb	r0, [r4, #2]
    9e20:	4298      	cmp	r0, r3
    9e22:	d003      	beq.n	9e2c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9e24:	4b16      	ldr	r3, [pc, #88]	; (9e80 <cdcdf_acm_ctrl+0x15c>)
    9e26:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9e28:	23ff      	movs	r3, #255	; 0xff
    9e2a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9e2c:	7863      	ldrb	r3, [r4, #1]
    9e2e:	2bff      	cmp	r3, #255	; 0xff
    9e30:	d008      	beq.n	9e44 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    9e32:	23ff      	movs	r3, #255	; 0xff
    9e34:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    9e36:	78e0      	ldrb	r0, [r4, #3]
    9e38:	4298      	cmp	r0, r3
    9e3a:	d003      	beq.n	9e44 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9e3c:	4b10      	ldr	r3, [pc, #64]	; (9e80 <cdcdf_acm_ctrl+0x15c>)
    9e3e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9e40:	23ff      	movs	r3, #255	; 0xff
    9e42:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    9e44:	7920      	ldrb	r0, [r4, #4]
    9e46:	28ff      	cmp	r0, #255	; 0xff
    9e48:	d003      	beq.n	9e52 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    9e4a:	4b0d      	ldr	r3, [pc, #52]	; (9e80 <cdcdf_acm_ctrl+0x15c>)
    9e4c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9e4e:	23ff      	movs	r3, #255	; 0xff
    9e50:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    9e52:	2000      	movs	r0, #0
    9e54:	4b09      	ldr	r3, [pc, #36]	; (9e7c <cdcdf_acm_ctrl+0x158>)
    9e56:	7158      	strb	r0, [r3, #5]
    9e58:	e771      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    9e5a:	f06f 0009 	mvn.w	r0, #9
    9e5e:	e76e      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    9e60:	f06f 0011 	mvn.w	r0, #17
    9e64:	e76b      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    9e66:	f06f 001b 	mvn.w	r0, #27
    9e6a:	e768      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9e6c:	f06f 0013 	mvn.w	r0, #19
    9e70:	e765      	b.n	9d3e <cdcdf_acm_ctrl+0x1a>
    9e72:	bf00      	nop
    9e74:	00005491 	.word	0x00005491
    9e78:	0000ad95 	.word	0x0000ad95
    9e7c:	20000e2c 	.word	0x20000e2c
    9e80:	000054f9 	.word	0x000054f9
    9e84:	00005525 	.word	0x00005525
    9e88:	0000adcf 	.word	0x0000adcf

00009e8c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9e8c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9e8e:	4b0a      	ldr	r3, [pc, #40]	; (9eb8 <cdcdf_acm_init+0x2c>)
    9e90:	4798      	blx	r3
    9e92:	2801      	cmp	r0, #1
    9e94:	d80c      	bhi.n	9eb0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9e96:	4809      	ldr	r0, [pc, #36]	; (9ebc <cdcdf_acm_init+0x30>)
    9e98:	4b09      	ldr	r3, [pc, #36]	; (9ec0 <cdcdf_acm_init+0x34>)
    9e9a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9e9c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9e9e:	3018      	adds	r0, #24
    9ea0:	4b08      	ldr	r3, [pc, #32]	; (9ec4 <cdcdf_acm_init+0x38>)
    9ea2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9ea4:	4908      	ldr	r1, [pc, #32]	; (9ec8 <cdcdf_acm_init+0x3c>)
    9ea6:	2001      	movs	r0, #1
    9ea8:	4b08      	ldr	r3, [pc, #32]	; (9ecc <cdcdf_acm_init+0x40>)
    9eaa:	4798      	blx	r3
	return ERR_NONE;
    9eac:	2000      	movs	r0, #0
    9eae:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9eb0:	f06f 0010 	mvn.w	r0, #16
}
    9eb4:	bd08      	pop	{r3, pc}
    9eb6:	bf00      	nop
    9eb8:	0000ad81 	.word	0x0000ad81
    9ebc:	20000e2c 	.word	0x20000e2c
    9ec0:	00009d25 	.word	0x00009d25
    9ec4:	0000ad21 	.word	0x0000ad21
    9ec8:	20000398 	.word	0x20000398
    9ecc:	0000ac8d 	.word	0x0000ac8d

00009ed0 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    9ed0:	4b07      	ldr	r3, [pc, #28]	; (9ef0 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    9ed2:	795b      	ldrb	r3, [r3, #5]
    9ed4:	b143      	cbz	r3, 9ee8 <cdcdf_acm_write+0x18>
{
    9ed6:	b510      	push	{r4, lr}
    9ed8:	460a      	mov	r2, r1
    9eda:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    9edc:	2301      	movs	r3, #1
    9ede:	4804      	ldr	r0, [pc, #16]	; (9ef0 <cdcdf_acm_write+0x20>)
    9ee0:	78c0      	ldrb	r0, [r0, #3]
    9ee2:	4c04      	ldr	r4, [pc, #16]	; (9ef4 <cdcdf_acm_write+0x24>)
    9ee4:	47a0      	blx	r4
    9ee6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    9ee8:	f06f 0010 	mvn.w	r0, #16
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	20000e2c 	.word	0x20000e2c
    9ef4:	0000a851 	.word	0x0000a851

00009ef8 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9ef8:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9efa:	780b      	ldrb	r3, [r1, #0]
    9efc:	2b81      	cmp	r3, #129	; 0x81
    9efe:	d010      	beq.n	9f22 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9f00:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9f04:	2b01      	cmp	r3, #1
    9f06:	d13f      	bne.n	9f88 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    9f08:	888a      	ldrh	r2, [r1, #4]
    9f0a:	4b22      	ldr	r3, [pc, #136]	; (9f94 <hid_keyboard_req+0x9c>)
    9f0c:	7b1b      	ldrb	r3, [r3, #12]
    9f0e:	429a      	cmp	r2, r3
    9f10:	d13d      	bne.n	9f8e <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    9f12:	784b      	ldrb	r3, [r1, #1]
    9f14:	2b03      	cmp	r3, #3
    9f16:	d028      	beq.n	9f6a <hid_keyboard_req+0x72>
    9f18:	2b0b      	cmp	r3, #11
    9f1a:	d02c      	beq.n	9f76 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9f1c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9f20:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9f22:	784b      	ldrb	r3, [r1, #1]
    9f24:	2b06      	cmp	r3, #6
    9f26:	d002      	beq.n	9f2e <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    9f28:	f06f 0009 	mvn.w	r0, #9
    9f2c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9f2e:	888a      	ldrh	r2, [r1, #4]
    9f30:	4b18      	ldr	r3, [pc, #96]	; (9f94 <hid_keyboard_req+0x9c>)
    9f32:	7b1b      	ldrb	r3, [r3, #12]
    9f34:	429a      	cmp	r2, r3
    9f36:	d002      	beq.n	9f3e <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    9f38:	f06f 0009 	mvn.w	r0, #9
    9f3c:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9f3e:	884b      	ldrh	r3, [r1, #2]
    9f40:	0a1b      	lsrs	r3, r3, #8
    9f42:	2b21      	cmp	r3, #33	; 0x21
    9f44:	d004      	beq.n	9f50 <hid_keyboard_req+0x58>
    9f46:	2b22      	cmp	r3, #34	; 0x22
    9f48:	d009      	beq.n	9f5e <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    9f4a:	f06f 000c 	mvn.w	r0, #12
    9f4e:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    9f50:	4b10      	ldr	r3, [pc, #64]	; (9f94 <hid_keyboard_req+0x9c>)
    9f52:	6819      	ldr	r1, [r3, #0]
    9f54:	2300      	movs	r3, #0
    9f56:	780a      	ldrb	r2, [r1, #0]
    9f58:	4c0f      	ldr	r4, [pc, #60]	; (9f98 <hid_keyboard_req+0xa0>)
    9f5a:	47a0      	blx	r4
    9f5c:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    9f5e:	2300      	movs	r3, #0
    9f60:	223b      	movs	r2, #59	; 0x3b
    9f62:	490e      	ldr	r1, [pc, #56]	; (9f9c <hid_keyboard_req+0xa4>)
    9f64:	4c0c      	ldr	r4, [pc, #48]	; (9f98 <hid_keyboard_req+0xa0>)
    9f66:	47a0      	blx	r4
    9f68:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    9f6a:	2300      	movs	r3, #0
    9f6c:	2201      	movs	r2, #1
    9f6e:	490c      	ldr	r1, [pc, #48]	; (9fa0 <hid_keyboard_req+0xa8>)
    9f70:	4c09      	ldr	r4, [pc, #36]	; (9f98 <hid_keyboard_req+0xa0>)
    9f72:	47a0      	blx	r4
    9f74:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    9f76:	884a      	ldrh	r2, [r1, #2]
    9f78:	4b06      	ldr	r3, [pc, #24]	; (9f94 <hid_keyboard_req+0x9c>)
    9f7a:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    9f7c:	2300      	movs	r3, #0
    9f7e:	461a      	mov	r2, r3
    9f80:	4619      	mov	r1, r3
    9f82:	4c05      	ldr	r4, [pc, #20]	; (9f98 <hid_keyboard_req+0xa0>)
    9f84:	47a0      	blx	r4
    9f86:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9f88:	f06f 0009 	mvn.w	r0, #9
    9f8c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9f8e:	f06f 0009 	mvn.w	r0, #9
    9f92:	bd10      	pop	{r4, pc}
    9f94:	20000e50 	.word	0x20000e50
    9f98:	0000a851 	.word	0x0000a851
    9f9c:	0000d24c 	.word	0x0000d24c
    9fa0:	20000e5f 	.word	0x20000e5f

00009fa4 <hid_keyboard_ctrl>:
{
    9fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fa8:	4614      	mov	r4, r2
	switch (ctrl) {
    9faa:	2901      	cmp	r1, #1
    9fac:	d050      	beq.n	a050 <hid_keyboard_ctrl+0xac>
    9fae:	b141      	cbz	r1, 9fc2 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9fb0:	2902      	cmp	r1, #2
    9fb2:	bf0c      	ite	eq
    9fb4:	f06f 051a 	mvneq.w	r5, #26
    9fb8:	f06f 050c 	mvnne.w	r5, #12
}
    9fbc:	4628      	mov	r0, r5
    9fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9fc2:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9fc6:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d05e      	beq.n	a08a <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9fcc:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9fce:	795b      	ldrb	r3, [r3, #5]
    9fd0:	2b03      	cmp	r3, #3
    9fd2:	d15d      	bne.n	a090 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9fd4:	f898 300c 	ldrb.w	r3, [r8, #12]
    9fd8:	429a      	cmp	r2, r3
    9fda:	d05c      	beq.n	a096 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9fdc:	2bff      	cmp	r3, #255	; 0xff
    9fde:	d15d      	bne.n	a09c <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9fe0:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9fe4:	6823      	ldr	r3, [r4, #0]
    9fe6:	7818      	ldrb	r0, [r3, #0]
    9fe8:	2221      	movs	r2, #33	; 0x21
    9fea:	6861      	ldr	r1, [r4, #4]
    9fec:	4418      	add	r0, r3
    9fee:	4b31      	ldr	r3, [pc, #196]	; (a0b4 <hid_keyboard_ctrl+0x110>)
    9ff0:	4798      	blx	r3
    9ff2:	4b31      	ldr	r3, [pc, #196]	; (a0b8 <hid_keyboard_ctrl+0x114>)
    9ff4:	6018      	str	r0, [r3, #0]
    9ff6:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9ff8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a0c0 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9ffc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a0c4 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a000:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a0c8 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a004:	6823      	ldr	r3, [r4, #0]
    a006:	7818      	ldrb	r0, [r3, #0]
    a008:	6861      	ldr	r1, [r4, #4]
    a00a:	4418      	add	r0, r3
    a00c:	47c8      	blx	r9
		desc->sod = ep;
    a00e:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a010:	2800      	cmp	r0, #0
    a012:	d046      	beq.n	a0a2 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a014:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a016:	7943      	ldrb	r3, [r0, #5]
    a018:	7902      	ldrb	r2, [r0, #4]
    a01a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a01e:	b292      	uxth	r2, r2
    a020:	78c1      	ldrb	r1, [r0, #3]
    a022:	4638      	mov	r0, r7
    a024:	47d0      	blx	sl
    a026:	4605      	mov	r5, r0
    a028:	2800      	cmp	r0, #0
    a02a:	d13d      	bne.n	a0a8 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a02c:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a030:	bf14      	ite	ne
    a032:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a036:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a03a:	4638      	mov	r0, r7
    a03c:	47d8      	blx	fp
    a03e:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a040:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a044:	d1de      	bne.n	a004 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a046:	4b1c      	ldr	r3, [pc, #112]	; (a0b8 <hid_keyboard_ctrl+0x114>)
    a048:	2201      	movs	r2, #1
    a04a:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a04c:	741a      	strb	r2, [r3, #16]
    a04e:	e7b5      	b.n	9fbc <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a050:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a052:	b11a      	cbz	r2, a05c <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a054:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a056:	795b      	ldrb	r3, [r3, #5]
    a058:	2b03      	cmp	r3, #3
    a05a:	d128      	bne.n	a0ae <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a05c:	7b2b      	ldrb	r3, [r5, #12]
    a05e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a060:	bf1c      	itt	ne
    a062:	23ff      	movne	r3, #255	; 0xff
    a064:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a066:	7b68      	ldrb	r0, [r5, #13]
    a068:	28ff      	cmp	r0, #255	; 0xff
    a06a:	d003      	beq.n	a074 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a06c:	4b13      	ldr	r3, [pc, #76]	; (a0bc <hid_keyboard_ctrl+0x118>)
    a06e:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a070:	23ff      	movs	r3, #255	; 0xff
    a072:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a074:	7ba8      	ldrb	r0, [r5, #14]
    a076:	28ff      	cmp	r0, #255	; 0xff
    a078:	d003      	beq.n	a082 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a07a:	4b10      	ldr	r3, [pc, #64]	; (a0bc <hid_keyboard_ctrl+0x118>)
    a07c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a07e:	23ff      	movs	r3, #255	; 0xff
    a080:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a082:	2500      	movs	r5, #0
    a084:	4b0c      	ldr	r3, [pc, #48]	; (a0b8 <hid_keyboard_ctrl+0x114>)
    a086:	741d      	strb	r5, [r3, #16]
    a088:	e798      	b.n	9fbc <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a08a:	f06f 0509 	mvn.w	r5, #9
    a08e:	e795      	b.n	9fbc <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a090:	f06f 0509 	mvn.w	r5, #9
    a094:	e792      	b.n	9fbc <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a096:	f06f 0511 	mvn.w	r5, #17
    a09a:	e78f      	b.n	9fbc <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a09c:	f06f 051b 	mvn.w	r5, #27
    a0a0:	e78c      	b.n	9fbc <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a0a2:	f06f 0509 	mvn.w	r5, #9
    a0a6:	e789      	b.n	9fbc <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a0a8:	f06f 0513 	mvn.w	r5, #19
    a0ac:	e786      	b.n	9fbc <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a0ae:	f06f 0509 	mvn.w	r5, #9
    a0b2:	e783      	b.n	9fbc <hid_keyboard_ctrl+0x18>
    a0b4:	0000ad95 	.word	0x0000ad95
    a0b8:	20000e50 	.word	0x20000e50
    a0bc:	000054f9 	.word	0x000054f9
    a0c0:	0000adcf 	.word	0x0000adcf
    a0c4:	00005491 	.word	0x00005491
    a0c8:	00005525 	.word	0x00005525

0000a0cc <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a0cc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a0ce:	4b0a      	ldr	r3, [pc, #40]	; (a0f8 <hiddf_keyboard_init+0x2c>)
    a0d0:	4798      	blx	r3
    a0d2:	2801      	cmp	r0, #1
    a0d4:	d80c      	bhi.n	a0f0 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a0d6:	4809      	ldr	r0, [pc, #36]	; (a0fc <hiddf_keyboard_init+0x30>)
    a0d8:	4b09      	ldr	r3, [pc, #36]	; (a100 <hiddf_keyboard_init+0x34>)
    a0da:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a0dc:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a0de:	3014      	adds	r0, #20
    a0e0:	4b08      	ldr	r3, [pc, #32]	; (a104 <hiddf_keyboard_init+0x38>)
    a0e2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a0e4:	4908      	ldr	r1, [pc, #32]	; (a108 <hiddf_keyboard_init+0x3c>)
    a0e6:	2001      	movs	r0, #1
    a0e8:	4b08      	ldr	r3, [pc, #32]	; (a10c <hiddf_keyboard_init+0x40>)
    a0ea:	4798      	blx	r3
	return ERR_NONE;
    a0ec:	2000      	movs	r0, #0
    a0ee:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a0f0:	f06f 0010 	mvn.w	r0, #16
}
    a0f4:	bd08      	pop	{r3, pc}
    a0f6:	bf00      	nop
    a0f8:	0000ad81 	.word	0x0000ad81
    a0fc:	20000e50 	.word	0x20000e50
    a100:	00009fa5 	.word	0x00009fa5
    a104:	0000ad21 	.word	0x0000ad21
    a108:	200003a0 	.word	0x200003a0
    a10c:	0000ac8d 	.word	0x0000ac8d

0000a110 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    a110:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    a112:	4b26      	ldr	r3, [pc, #152]	; (a1ac <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    a114:	7c1b      	ldrb	r3, [r3, #16]
    a116:	2b00      	cmp	r3, #0
    a118:	d045      	beq.n	a1a6 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    a11a:	4a24      	ldr	r2, [pc, #144]	; (a1ac <hiddf_keyboard_keys_state_change+0x9c>)
    a11c:	2300      	movs	r3, #0
    a11e:	6053      	str	r3, [r2, #4]
    a120:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    a122:	b329      	cbz	r1, a170 <hiddf_keyboard_keys_state_change+0x60>
    a124:	4603      	mov	r3, r0
    a126:	1e4d      	subs	r5, r1, #1
    a128:	b2ed      	uxtb	r5, r5
    a12a:	3501      	adds	r5, #1
    a12c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a130:	4405      	add	r5, r0
    a132:	2200      	movs	r2, #0
    a134:	e002      	b.n	a13c <hiddf_keyboard_keys_state_change+0x2c>
    a136:	3303      	adds	r3, #3
    a138:	42ab      	cmp	r3, r5
    a13a:	d005      	beq.n	a148 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    a13c:	785c      	ldrb	r4, [r3, #1]
    a13e:	2c00      	cmp	r4, #0
    a140:	d0f9      	beq.n	a136 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    a142:	3201      	adds	r2, #1
    a144:	b2d2      	uxtb	r2, r2
    a146:	e7f6      	b.n	a136 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    a148:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    a14a:	b2d2      	uxtb	r2, r2
    a14c:	2a06      	cmp	r2, #6
    a14e:	d809      	bhi.n	a164 <hiddf_keyboard_keys_state_change+0x54>
    a150:	4603      	mov	r3, r0
    a152:	1e4a      	subs	r2, r1, #1
    a154:	b2d2      	uxtb	r2, r2
    a156:	3201      	adds	r2, #1
    a158:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a15c:	4410      	add	r0, r2
    a15e:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a160:	4d12      	ldr	r5, [pc, #72]	; (a1ac <hiddf_keyboard_keys_state_change+0x9c>)
    a162:	e015      	b.n	a190 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    a164:	4b11      	ldr	r3, [pc, #68]	; (a1ac <hiddf_keyboard_keys_state_change+0x9c>)
    a166:	f04f 32ff 	mov.w	r2, #4294967295
    a16a:	f8c3 2006 	str.w	r2, [r3, #6]
    a16e:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    a170:	480e      	ldr	r0, [pc, #56]	; (a1ac <hiddf_keyboard_keys_state_change+0x9c>)
    a172:	2300      	movs	r3, #0
    a174:	2208      	movs	r2, #8
    a176:	1d01      	adds	r1, r0, #4
    a178:	7b40      	ldrb	r0, [r0, #13]
    a17a:	4c0d      	ldr	r4, [pc, #52]	; (a1b0 <hiddf_keyboard_keys_state_change+0xa0>)
    a17c:	47a0      	blx	r4
    a17e:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a180:	1c62      	adds	r2, r4, #1
    a182:	7819      	ldrb	r1, [r3, #0]
    a184:	442c      	add	r4, r5
    a186:	7121      	strb	r1, [r4, #4]
    a188:	b2d4      	uxtb	r4, r2
    a18a:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    a18c:	4283      	cmp	r3, r0
    a18e:	d0ef      	beq.n	a170 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    a190:	789a      	ldrb	r2, [r3, #2]
    a192:	2a01      	cmp	r2, #1
    a194:	d1f9      	bne.n	a18a <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    a196:	785a      	ldrb	r2, [r3, #1]
    a198:	2a00      	cmp	r2, #0
    a19a:	d0f1      	beq.n	a180 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    a19c:	792a      	ldrb	r2, [r5, #4]
    a19e:	7819      	ldrb	r1, [r3, #0]
    a1a0:	430a      	orrs	r2, r1
    a1a2:	712a      	strb	r2, [r5, #4]
    a1a4:	e7f1      	b.n	a18a <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    a1a6:	f06f 0010 	mvn.w	r0, #16
}
    a1aa:	bd38      	pop	{r3, r4, r5, pc}
    a1ac:	20000e50 	.word	0x20000e50
    a1b0:	0000a851 	.word	0x0000a851

0000a1b4 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a1b4:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a1b6:	780b      	ldrb	r3, [r1, #0]
    a1b8:	2b81      	cmp	r3, #129	; 0x81
    a1ba:	d010      	beq.n	a1de <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a1bc:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a1c0:	2b01      	cmp	r3, #1
    a1c2:	d13f      	bne.n	a244 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a1c4:	888a      	ldrh	r2, [r1, #4]
    a1c6:	4b22      	ldr	r3, [pc, #136]	; (a250 <hid_mouse_req+0x9c>)
    a1c8:	7a1b      	ldrb	r3, [r3, #8]
    a1ca:	429a      	cmp	r2, r3
    a1cc:	d13d      	bne.n	a24a <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a1ce:	784b      	ldrb	r3, [r1, #1]
    a1d0:	2b03      	cmp	r3, #3
    a1d2:	d028      	beq.n	a226 <hid_mouse_req+0x72>
    a1d4:	2b0b      	cmp	r3, #11
    a1d6:	d02c      	beq.n	a232 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a1d8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a1dc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a1de:	784b      	ldrb	r3, [r1, #1]
    a1e0:	2b06      	cmp	r3, #6
    a1e2:	d002      	beq.n	a1ea <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a1e4:	f06f 0009 	mvn.w	r0, #9
    a1e8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a1ea:	888a      	ldrh	r2, [r1, #4]
    a1ec:	4b18      	ldr	r3, [pc, #96]	; (a250 <hid_mouse_req+0x9c>)
    a1ee:	7a1b      	ldrb	r3, [r3, #8]
    a1f0:	429a      	cmp	r2, r3
    a1f2:	d002      	beq.n	a1fa <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a1f4:	f06f 0009 	mvn.w	r0, #9
    a1f8:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a1fa:	884b      	ldrh	r3, [r1, #2]
    a1fc:	0a1b      	lsrs	r3, r3, #8
    a1fe:	2b21      	cmp	r3, #33	; 0x21
    a200:	d004      	beq.n	a20c <hid_mouse_req+0x58>
    a202:	2b22      	cmp	r3, #34	; 0x22
    a204:	d009      	beq.n	a21a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a206:	f06f 000c 	mvn.w	r0, #12
    a20a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a20c:	4b10      	ldr	r3, [pc, #64]	; (a250 <hid_mouse_req+0x9c>)
    a20e:	6819      	ldr	r1, [r3, #0]
    a210:	2300      	movs	r3, #0
    a212:	780a      	ldrb	r2, [r1, #0]
    a214:	4c0f      	ldr	r4, [pc, #60]	; (a254 <hid_mouse_req+0xa0>)
    a216:	47a0      	blx	r4
    a218:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a21a:	2300      	movs	r3, #0
    a21c:	2234      	movs	r2, #52	; 0x34
    a21e:	490e      	ldr	r1, [pc, #56]	; (a258 <hid_mouse_req+0xa4>)
    a220:	4c0c      	ldr	r4, [pc, #48]	; (a254 <hid_mouse_req+0xa0>)
    a222:	47a0      	blx	r4
    a224:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a226:	2300      	movs	r3, #0
    a228:	2201      	movs	r2, #1
    a22a:	490c      	ldr	r1, [pc, #48]	; (a25c <hid_mouse_req+0xa8>)
    a22c:	4c09      	ldr	r4, [pc, #36]	; (a254 <hid_mouse_req+0xa0>)
    a22e:	47a0      	blx	r4
    a230:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a232:	884a      	ldrh	r2, [r1, #2]
    a234:	4b06      	ldr	r3, [pc, #24]	; (a250 <hid_mouse_req+0x9c>)
    a236:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a238:	2300      	movs	r3, #0
    a23a:	461a      	mov	r2, r3
    a23c:	4619      	mov	r1, r3
    a23e:	4c05      	ldr	r4, [pc, #20]	; (a254 <hid_mouse_req+0xa0>)
    a240:	47a0      	blx	r4
    a242:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a244:	f06f 0009 	mvn.w	r0, #9
    a248:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a24a:	f06f 0009 	mvn.w	r0, #9
    a24e:	bd10      	pop	{r4, pc}
    a250:	20000e70 	.word	0x20000e70
    a254:	0000a851 	.word	0x0000a851
    a258:	0000d288 	.word	0x0000d288
    a25c:	20000e7a 	.word	0x20000e7a

0000a260 <hid_mouse_ctrl>:
{
    a260:	b570      	push	{r4, r5, r6, lr}
    a262:	4614      	mov	r4, r2
	switch (ctrl) {
    a264:	2901      	cmp	r1, #1
    a266:	d040      	beq.n	a2ea <hid_mouse_ctrl+0x8a>
    a268:	b139      	cbz	r1, a27a <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a26a:	2902      	cmp	r1, #2
    a26c:	bf0c      	ite	eq
    a26e:	f06f 041a 	mvneq.w	r4, #26
    a272:	f06f 040c 	mvnne.w	r4, #12
}
    a276:	4620      	mov	r0, r4
    a278:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a27a:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a27c:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a27e:	2b00      	cmp	r3, #0
    a280:	d049      	beq.n	a316 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a282:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a284:	795b      	ldrb	r3, [r3, #5]
    a286:	2b03      	cmp	r3, #3
    a288:	d148      	bne.n	a31c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a28a:	7a2b      	ldrb	r3, [r5, #8]
    a28c:	429a      	cmp	r2, r3
    a28e:	d048      	beq.n	a322 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a290:	2bff      	cmp	r3, #255	; 0xff
    a292:	d149      	bne.n	a328 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a294:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a296:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a298:	7818      	ldrb	r0, [r3, #0]
    a29a:	2221      	movs	r2, #33	; 0x21
    a29c:	6861      	ldr	r1, [r4, #4]
    a29e:	4418      	add	r0, r3
    a2a0:	4b29      	ldr	r3, [pc, #164]	; (a348 <hid_mouse_ctrl+0xe8>)
    a2a2:	4798      	blx	r3
    a2a4:	4b29      	ldr	r3, [pc, #164]	; (a34c <hid_mouse_ctrl+0xec>)
    a2a6:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a2a8:	6823      	ldr	r3, [r4, #0]
    a2aa:	7818      	ldrb	r0, [r3, #0]
    a2ac:	6861      	ldr	r1, [r4, #4]
    a2ae:	4418      	add	r0, r3
    a2b0:	4b27      	ldr	r3, [pc, #156]	; (a350 <hid_mouse_ctrl+0xf0>)
    a2b2:	4798      	blx	r3
	desc->sod = ep;
    a2b4:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a2b6:	2800      	cmp	r0, #0
    a2b8:	d039      	beq.n	a32e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a2ba:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a2bc:	7943      	ldrb	r3, [r0, #5]
    a2be:	7902      	ldrb	r2, [r0, #4]
    a2c0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a2c4:	b292      	uxth	r2, r2
    a2c6:	78c1      	ldrb	r1, [r0, #3]
    a2c8:	4630      	mov	r0, r6
    a2ca:	4b22      	ldr	r3, [pc, #136]	; (a354 <hid_mouse_ctrl+0xf4>)
    a2cc:	4798      	blx	r3
    a2ce:	4604      	mov	r4, r0
    a2d0:	bb80      	cbnz	r0, a334 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a2d2:	f016 0f80 	tst.w	r6, #128	; 0x80
    a2d6:	d030      	beq.n	a33a <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a2d8:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a2da:	4630      	mov	r0, r6
    a2dc:	4b1e      	ldr	r3, [pc, #120]	; (a358 <hid_mouse_ctrl+0xf8>)
    a2de:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a2e0:	4b1a      	ldr	r3, [pc, #104]	; (a34c <hid_mouse_ctrl+0xec>)
    a2e2:	2201      	movs	r2, #1
    a2e4:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a2e6:	72da      	strb	r2, [r3, #11]
    a2e8:	e7c5      	b.n	a276 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a2ea:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a2ec:	b11a      	cbz	r2, a2f6 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a2ee:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a2f0:	795b      	ldrb	r3, [r3, #5]
    a2f2:	2b03      	cmp	r3, #3
    a2f4:	d124      	bne.n	a340 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a2f6:	7a2b      	ldrb	r3, [r5, #8]
    a2f8:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a2fa:	bf1c      	itt	ne
    a2fc:	23ff      	movne	r3, #255	; 0xff
    a2fe:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a300:	7a68      	ldrb	r0, [r5, #9]
    a302:	28ff      	cmp	r0, #255	; 0xff
    a304:	d003      	beq.n	a30e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a306:	4b15      	ldr	r3, [pc, #84]	; (a35c <hid_mouse_ctrl+0xfc>)
    a308:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a30a:	23ff      	movs	r3, #255	; 0xff
    a30c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a30e:	2400      	movs	r4, #0
    a310:	4b0e      	ldr	r3, [pc, #56]	; (a34c <hid_mouse_ctrl+0xec>)
    a312:	72dc      	strb	r4, [r3, #11]
    a314:	e7af      	b.n	a276 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a316:	f06f 0409 	mvn.w	r4, #9
    a31a:	e7ac      	b.n	a276 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a31c:	f06f 0409 	mvn.w	r4, #9
    a320:	e7a9      	b.n	a276 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a322:	f06f 0411 	mvn.w	r4, #17
    a326:	e7a6      	b.n	a276 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a328:	f06f 041b 	mvn.w	r4, #27
    a32c:	e7a3      	b.n	a276 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a32e:	f06f 0409 	mvn.w	r4, #9
    a332:	e7a0      	b.n	a276 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a334:	f06f 0413 	mvn.w	r4, #19
    a338:	e79d      	b.n	a276 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a33a:	f04f 34ff 	mov.w	r4, #4294967295
    a33e:	e79a      	b.n	a276 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a340:	f06f 0409 	mvn.w	r4, #9
    a344:	e797      	b.n	a276 <hid_mouse_ctrl+0x16>
    a346:	bf00      	nop
    a348:	0000ad95 	.word	0x0000ad95
    a34c:	20000e70 	.word	0x20000e70
    a350:	0000adcf 	.word	0x0000adcf
    a354:	00005491 	.word	0x00005491
    a358:	00005525 	.word	0x00005525
    a35c:	000054f9 	.word	0x000054f9

0000a360 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a360:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a362:	4b0a      	ldr	r3, [pc, #40]	; (a38c <hiddf_mouse_init+0x2c>)
    a364:	4798      	blx	r3
    a366:	2801      	cmp	r0, #1
    a368:	d80c      	bhi.n	a384 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a36a:	4809      	ldr	r0, [pc, #36]	; (a390 <hiddf_mouse_init+0x30>)
    a36c:	4b09      	ldr	r3, [pc, #36]	; (a394 <hiddf_mouse_init+0x34>)
    a36e:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a370:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a372:	300c      	adds	r0, #12
    a374:	4b08      	ldr	r3, [pc, #32]	; (a398 <hiddf_mouse_init+0x38>)
    a376:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a378:	4908      	ldr	r1, [pc, #32]	; (a39c <hiddf_mouse_init+0x3c>)
    a37a:	2001      	movs	r0, #1
    a37c:	4b08      	ldr	r3, [pc, #32]	; (a3a0 <hiddf_mouse_init+0x40>)
    a37e:	4798      	blx	r3
	return ERR_NONE;
    a380:	2000      	movs	r0, #0
    a382:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a384:	f06f 0010 	mvn.w	r0, #16
}
    a388:	bd08      	pop	{r3, pc}
    a38a:	bf00      	nop
    a38c:	0000ad81 	.word	0x0000ad81
    a390:	20000e70 	.word	0x20000e70
    a394:	0000a261 	.word	0x0000a261
    a398:	0000ad21 	.word	0x0000ad21
    a39c:	200003a8 	.word	0x200003a8
    a3a0:	0000ac8d 	.word	0x0000ac8d

0000a3a4 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    a3a4:	2200      	movs	r2, #0
    a3a6:	4b0d      	ldr	r3, [pc, #52]	; (a3dc <hiddf_mouse_move+0x38>)
    a3a8:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    a3aa:	2901      	cmp	r1, #1
    a3ac:	d00e      	beq.n	a3cc <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    a3ae:	2902      	cmp	r1, #2
    a3b0:	d00e      	beq.n	a3d0 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    a3b2:	2903      	cmp	r1, #3
    a3b4:	d10f      	bne.n	a3d6 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    a3b6:	4b09      	ldr	r3, [pc, #36]	; (a3dc <hiddf_mouse_move+0x38>)
    a3b8:	71d8      	strb	r0, [r3, #7]
{
    a3ba:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    a3bc:	4807      	ldr	r0, [pc, #28]	; (a3dc <hiddf_mouse_move+0x38>)
    a3be:	2300      	movs	r3, #0
    a3c0:	2204      	movs	r2, #4
    a3c2:	1881      	adds	r1, r0, r2
    a3c4:	7a40      	ldrb	r0, [r0, #9]
    a3c6:	4c06      	ldr	r4, [pc, #24]	; (a3e0 <hiddf_mouse_move+0x3c>)
    a3c8:	47a0      	blx	r4
    a3ca:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    a3cc:	7158      	strb	r0, [r3, #5]
    a3ce:	e7f4      	b.n	a3ba <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    a3d0:	4b02      	ldr	r3, [pc, #8]	; (a3dc <hiddf_mouse_move+0x38>)
    a3d2:	7198      	strb	r0, [r3, #6]
    a3d4:	e7f1      	b.n	a3ba <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    a3d6:	f06f 000c 	mvn.w	r0, #12
    a3da:	4770      	bx	lr
    a3dc:	20000e70 	.word	0x20000e70
    a3e0:	0000a851 	.word	0x0000a851

0000a3e4 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    a3e4:	4770      	bx	lr

0000a3e6 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a3e6:	e7fe      	b.n	a3e6 <midi_cb_ep_bulk_out>

0000a3e8 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a3e8:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a3ea:	780b      	ldrb	r3, [r1, #0]
    a3ec:	2b81      	cmp	r3, #129	; 0x81
    a3ee:	d014      	beq.n	a41a <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a3f0:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a3f4:	2b01      	cmp	r3, #1
    a3f6:	d132      	bne.n	a45e <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    a3f8:	888b      	ldrh	r3, [r1, #4]
    a3fa:	4a1c      	ldr	r2, [pc, #112]	; (a46c <audio_midi_req+0x84>)
    a3fc:	7912      	ldrb	r2, [r2, #4]
    a3fe:	429a      	cmp	r2, r3
    a400:	d003      	beq.n	a40a <audio_midi_req+0x22>
    a402:	4a1a      	ldr	r2, [pc, #104]	; (a46c <audio_midi_req+0x84>)
    a404:	7952      	ldrb	r2, [r2, #5]
    a406:	429a      	cmp	r2, r3
    a408:	d12c      	bne.n	a464 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    a40a:	784b      	ldrb	r3, [r1, #1]
    a40c:	2b03      	cmp	r3, #3
    a40e:	d017      	beq.n	a440 <audio_midi_req+0x58>
    a410:	2b0b      	cmp	r3, #11
    a412:	d01b      	beq.n	a44c <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    a414:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a418:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a41a:	888b      	ldrh	r3, [r1, #4]
    a41c:	4a13      	ldr	r2, [pc, #76]	; (a46c <audio_midi_req+0x84>)
    a41e:	7912      	ldrb	r2, [r2, #4]
    a420:	429a      	cmp	r2, r3
    a422:	d006      	beq.n	a432 <audio_midi_req+0x4a>
    a424:	4a11      	ldr	r2, [pc, #68]	; (a46c <audio_midi_req+0x84>)
    a426:	7952      	ldrb	r2, [r2, #5]
    a428:	429a      	cmp	r2, r3
    a42a:	d002      	beq.n	a432 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a42c:	f06f 0009 	mvn.w	r0, #9
    a430:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    a432:	4b0e      	ldr	r3, [pc, #56]	; (a46c <audio_midi_req+0x84>)
    a434:	6819      	ldr	r1, [r3, #0]
    a436:	2300      	movs	r3, #0
    a438:	780a      	ldrb	r2, [r1, #0]
    a43a:	4c0d      	ldr	r4, [pc, #52]	; (a470 <audio_midi_req+0x88>)
    a43c:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    a43e:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    a440:	2300      	movs	r3, #0
    a442:	2201      	movs	r2, #1
    a444:	490b      	ldr	r1, [pc, #44]	; (a474 <audio_midi_req+0x8c>)
    a446:	4c0a      	ldr	r4, [pc, #40]	; (a470 <audio_midi_req+0x88>)
    a448:	47a0      	blx	r4
    a44a:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    a44c:	884a      	ldrh	r2, [r1, #2]
    a44e:	4b07      	ldr	r3, [pc, #28]	; (a46c <audio_midi_req+0x84>)
    a450:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    a452:	2300      	movs	r3, #0
    a454:	461a      	mov	r2, r3
    a456:	4619      	mov	r1, r3
    a458:	4c05      	ldr	r4, [pc, #20]	; (a470 <audio_midi_req+0x88>)
    a45a:	47a0      	blx	r4
    a45c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a45e:	f06f 0009 	mvn.w	r0, #9
    a462:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a464:	f06f 0009 	mvn.w	r0, #9
    a468:	bd10      	pop	{r4, pc}
    a46a:	bf00      	nop
    a46c:	20000e88 	.word	0x20000e88
    a470:	0000a851 	.word	0x0000a851
    a474:	20000e90 	.word	0x20000e90

0000a478 <audio_midi_ctrl>:
{
    a478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a47c:	b083      	sub	sp, #12
    a47e:	4615      	mov	r5, r2
	switch (ctrl) {
    a480:	2901      	cmp	r1, #1
    a482:	f000 8092 	beq.w	a5aa <audio_midi_ctrl+0x132>
    a486:	b141      	cbz	r1, a49a <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    a488:	2902      	cmp	r1, #2
    a48a:	bf0c      	ite	eq
    a48c:	f06f 001a 	mvneq.w	r0, #26
    a490:	f06f 000c 	mvnne.w	r0, #12
}
    a494:	b003      	add	sp, #12
    a496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a49a:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    a49e:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a4a0:	2800      	cmp	r0, #0
    a4a2:	f000 80a9 	beq.w	a5f8 <audio_midi_ctrl+0x180>
    a4a6:	f109 0604 	add.w	r6, r9, #4
    a4aa:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a4ac:	f04f 0804 	mov.w	r8, #4
    a4b0:	4f5d      	ldr	r7, [pc, #372]	; (a628 <audio_midi_ctrl+0x1b0>)
    a4b2:	e019      	b.n	a4e8 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a4b4:	f816 3b01 	ldrb.w	r3, [r6], #1
    a4b8:	429a      	cmp	r2, r3
    a4ba:	f000 80a3 	beq.w	a604 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a4be:	2bff      	cmp	r3, #255	; 0xff
    a4c0:	f040 80a3 	bne.w	a60a <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a4c4:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    a4c8:	2c01      	cmp	r4, #1
    a4ca:	d016      	beq.n	a4fa <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a4cc:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a4ce:	7818      	ldrb	r0, [r3, #0]
    a4d0:	4642      	mov	r2, r8
    a4d2:	6869      	ldr	r1, [r5, #4]
    a4d4:	4418      	add	r0, r3
    a4d6:	47b8      	blx	r7
    a4d8:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    a4da:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a4de:	f000 809e 	beq.w	a61e <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    a4e2:	2800      	cmp	r0, #0
    a4e4:	f000 808b 	beq.w	a5fe <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    a4e8:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    a4ea:	7943      	ldrb	r3, [r0, #5]
    a4ec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a4f0:	2b01      	cmp	r3, #1
    a4f2:	d0df      	beq.n	a4b4 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    a4f4:	f06f 0009 	mvn.w	r0, #9
    a4f8:	e7cc      	b.n	a494 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a4fa:	2205      	movs	r2, #5
    a4fc:	6869      	ldr	r1, [r5, #4]
    a4fe:	4b4a      	ldr	r3, [pc, #296]	; (a628 <audio_midi_ctrl+0x1b0>)
    a500:	4798      	blx	r3
    a502:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a504:	4e49      	ldr	r6, [pc, #292]	; (a62c <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a506:	f8df 8144 	ldr.w	r8, [pc, #324]	; a64c <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    a50a:	4f49      	ldr	r7, [pc, #292]	; (a630 <audio_midi_ctrl+0x1b8>)
    a50c:	e01a      	b.n	a544 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    a50e:	4a47      	ldr	r2, [pc, #284]	; (a62c <audio_midi_ctrl+0x1b4>)
    a510:	7953      	ldrb	r3, [r2, #5]
    a512:	425b      	negs	r3, r3
    a514:	b2db      	uxtb	r3, r3
    a516:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    a518:	f06f 0013 	mvn.w	r0, #19
    a51c:	e7ba      	b.n	a494 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    a51e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a522:	b2c0      	uxtb	r0, r0
    a524:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    a528:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    a52a:	4a42      	ldr	r2, [pc, #264]	; (a634 <audio_midi_ctrl+0x1bc>)
    a52c:	2102      	movs	r1, #2
    a52e:	f899 0006 	ldrb.w	r0, [r9, #6]
    a532:	4b41      	ldr	r3, [pc, #260]	; (a638 <audio_midi_ctrl+0x1c0>)
    a534:	4798      	blx	r3
				desc->sod = ep;
    a536:	602c      	str	r4, [r5, #0]
    a538:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a53a:	6869      	ldr	r1, [r5, #4]
    a53c:	4420      	add	r0, r4
    a53e:	4b3f      	ldr	r3, [pc, #252]	; (a63c <audio_midi_ctrl+0x1c4>)
    a540:	4798      	blx	r3
    a542:	4604      	mov	r4, r0
			while (NULL != ep) {
    a544:	2c00      	cmp	r4, #0
    a546:	d063      	beq.n	a610 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    a548:	78a3      	ldrb	r3, [r4, #2]
    a54a:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    a54e:	78e3      	ldrb	r3, [r4, #3]
    a550:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    a554:	7962      	ldrb	r2, [r4, #5]
    a556:	7923      	ldrb	r3, [r4, #4]
    a558:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a55c:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    a55e:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a562:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a566:	b2db      	uxtb	r3, r3
    a568:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    a56a:	2301      	movs	r3, #1
    a56c:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a56e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a572:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a576:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a57a:	b292      	uxth	r2, r2
    a57c:	47c0      	blx	r8
    a57e:	b2c0      	uxtb	r0, r0
    a580:	7170      	strb	r0, [r6, #5]
    a582:	2800      	cmp	r0, #0
    a584:	d1c3      	bne.n	a50e <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a586:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a58a:	f013 0f80 	tst.w	r3, #128	; 0x80
    a58e:	d1c6      	bne.n	a51e <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    a590:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a594:	b2c0      	uxtb	r0, r0
    a596:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    a59a:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    a59c:	4a28      	ldr	r2, [pc, #160]	; (a640 <audio_midi_ctrl+0x1c8>)
    a59e:	2102      	movs	r1, #2
    a5a0:	f899 0007 	ldrb.w	r0, [r9, #7]
    a5a4:	4b24      	ldr	r3, [pc, #144]	; (a638 <audio_midi_ctrl+0x1c0>)
    a5a6:	4798      	blx	r3
    a5a8:	e7c5      	b.n	a536 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a5aa:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a5ac:	b142      	cbz	r2, a5c0 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a5ae:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    a5b0:	795b      	ldrb	r3, [r3, #5]
    a5b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a5b6:	2b01      	cmp	r3, #1
    a5b8:	d002      	beq.n	a5c0 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    a5ba:	f06f 0009 	mvn.w	r0, #9
    a5be:	e769      	b.n	a494 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    a5c0:	7923      	ldrb	r3, [r4, #4]
    a5c2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    a5c4:	bf1c      	itt	ne
    a5c6:	23ff      	movne	r3, #255	; 0xff
    a5c8:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    a5ca:	7963      	ldrb	r3, [r4, #5]
    a5cc:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    a5ce:	bf1c      	itt	ne
    a5d0:	23ff      	movne	r3, #255	; 0xff
    a5d2:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    a5d4:	79a0      	ldrb	r0, [r4, #6]
    a5d6:	28ff      	cmp	r0, #255	; 0xff
    a5d8:	d003      	beq.n	a5e2 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    a5da:	4b1a      	ldr	r3, [pc, #104]	; (a644 <audio_midi_ctrl+0x1cc>)
    a5dc:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a5de:	23ff      	movs	r3, #255	; 0xff
    a5e0:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    a5e2:	79e0      	ldrb	r0, [r4, #7]
    a5e4:	28ff      	cmp	r0, #255	; 0xff
    a5e6:	d003      	beq.n	a5f0 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    a5e8:	4b16      	ldr	r3, [pc, #88]	; (a644 <audio_midi_ctrl+0x1cc>)
    a5ea:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a5ec:	23ff      	movs	r3, #255	; 0xff
    a5ee:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    a5f0:	2000      	movs	r0, #0
    a5f2:	4b15      	ldr	r3, [pc, #84]	; (a648 <audio_midi_ctrl+0x1d0>)
    a5f4:	7358      	strb	r0, [r3, #13]
    a5f6:	e74d      	b.n	a494 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    a5f8:	f06f 0009 	mvn.w	r0, #9
    a5fc:	e74a      	b.n	a494 <audio_midi_ctrl+0x1c>
    a5fe:	f06f 0009 	mvn.w	r0, #9
    a602:	e747      	b.n	a494 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    a604:	f06f 0011 	mvn.w	r0, #17
    a608:	e744      	b.n	a494 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    a60a:	f06f 001b 	mvn.w	r0, #27
    a60e:	e741      	b.n	a494 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a610:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a612:	7818      	ldrb	r0, [r3, #0]
    a614:	2204      	movs	r2, #4
    a616:	6869      	ldr	r1, [r5, #4]
    a618:	4418      	add	r0, r3
    a61a:	4b03      	ldr	r3, [pc, #12]	; (a628 <audio_midi_ctrl+0x1b0>)
    a61c:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    a61e:	2201      	movs	r2, #1
    a620:	4b09      	ldr	r3, [pc, #36]	; (a648 <audio_midi_ctrl+0x1d0>)
    a622:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a624:	2000      	movs	r0, #0
    a626:	e735      	b.n	a494 <audio_midi_ctrl+0x1c>
    a628:	0000ad95 	.word	0x0000ad95
    a62c:	20003d50 	.word	0x20003d50
    a630:	00005525 	.word	0x00005525
    a634:	0000a3e5 	.word	0x0000a3e5
    a638:	000056f9 	.word	0x000056f9
    a63c:	0000adcf 	.word	0x0000adcf
    a640:	0000a3e7 	.word	0x0000a3e7
    a644:	000054f9 	.word	0x000054f9
    a648:	20000e88 	.word	0x20000e88
    a64c:	00005491 	.word	0x00005491

0000a650 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    a650:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    a652:	4b0a      	ldr	r3, [pc, #40]	; (a67c <audiodf_midi_init+0x2c>)
    a654:	4798      	blx	r3
    a656:	2801      	cmp	r0, #1
    a658:	d80c      	bhi.n	a674 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    a65a:	4809      	ldr	r0, [pc, #36]	; (a680 <audiodf_midi_init+0x30>)
    a65c:	4b09      	ldr	r3, [pc, #36]	; (a684 <audiodf_midi_init+0x34>)
    a65e:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    a660:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    a662:	3010      	adds	r0, #16
    a664:	4b08      	ldr	r3, [pc, #32]	; (a688 <audiodf_midi_init+0x38>)
    a666:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a668:	4908      	ldr	r1, [pc, #32]	; (a68c <audiodf_midi_init+0x3c>)
    a66a:	2001      	movs	r0, #1
    a66c:	4b08      	ldr	r3, [pc, #32]	; (a690 <audiodf_midi_init+0x40>)
    a66e:	4798      	blx	r3
	return ERR_NONE;
    a670:	2000      	movs	r0, #0
    a672:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a674:	f06f 0010 	mvn.w	r0, #16
}
    a678:	bd08      	pop	{r3, pc}
    a67a:	bf00      	nop
    a67c:	0000ad81 	.word	0x0000ad81
    a680:	20000e88 	.word	0x20000e88
    a684:	0000a479 	.word	0x0000a479
    a688:	0000ad21 	.word	0x0000ad21
    a68c:	200003b0 	.word	0x200003b0
    a690:	0000ac8d 	.word	0x0000ac8d

0000a694 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a694:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a696:	4c06      	ldr	r4, [pc, #24]	; (a6b0 <audiodf_midi_xfer_packet+0x1c>)
    a698:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a69a:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a69c:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a69e:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a6a0:	2300      	movs	r3, #0
    a6a2:	2204      	movs	r2, #4
    a6a4:	f104 0109 	add.w	r1, r4, #9
    a6a8:	79a0      	ldrb	r0, [r4, #6]
    a6aa:	4c02      	ldr	r4, [pc, #8]	; (a6b4 <audiodf_midi_xfer_packet+0x20>)
    a6ac:	47a0      	blx	r4
	
	
}
    a6ae:	bd10      	pop	{r4, pc}
    a6b0:	20000e88 	.word	0x20000e88
    a6b4:	0000a851 	.word	0x0000a851

0000a6b8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a6b8:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a6ba:	4b07      	ldr	r3, [pc, #28]	; (a6d8 <usbdc_unconfig+0x20>)
    a6bc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a6be:	b14c      	cbz	r4, a6d4 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a6c0:	2600      	movs	r6, #0
    a6c2:	2501      	movs	r5, #1
    a6c4:	6863      	ldr	r3, [r4, #4]
    a6c6:	4632      	mov	r2, r6
    a6c8:	4629      	mov	r1, r5
    a6ca:	4620      	mov	r0, r4
    a6cc:	4798      	blx	r3
		func = func->next;
    a6ce:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a6d0:	2c00      	cmp	r4, #0
    a6d2:	d1f7      	bne.n	a6c4 <usbdc_unconfig+0xc>
    a6d4:	bd70      	pop	{r4, r5, r6, pc}
    a6d6:	bf00      	nop
    a6d8:	20000ea4 	.word	0x20000ea4

0000a6dc <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a6dc:	b570      	push	{r4, r5, r6, lr}
    a6de:	4606      	mov	r6, r0
    a6e0:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a6e2:	4b07      	ldr	r3, [pc, #28]	; (a700 <usbdc_change_notify+0x24>)
    a6e4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a6e6:	b91c      	cbnz	r4, a6f0 <usbdc_change_notify+0x14>
    a6e8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a6ea:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a6ec:	2c00      	cmp	r4, #0
    a6ee:	d0fb      	beq.n	a6e8 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a6f0:	6863      	ldr	r3, [r4, #4]
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d0f9      	beq.n	a6ea <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a6f6:	4629      	mov	r1, r5
    a6f8:	4630      	mov	r0, r6
    a6fa:	4798      	blx	r3
    a6fc:	e7f5      	b.n	a6ea <usbdc_change_notify+0xe>
    a6fe:	bf00      	nop
    a700:	20000ea4 	.word	0x20000ea4

0000a704 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a706:	4607      	mov	r7, r0
    a708:	460e      	mov	r6, r1
    a70a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a70c:	4b0c      	ldr	r3, [pc, #48]	; (a740 <usbdc_request_handler+0x3c>)
    a70e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a710:	b91c      	cbnz	r4, a71a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a712:	2000      	movs	r0, #0
    a714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a716:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a718:	b16c      	cbz	r4, a736 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a71a:	6863      	ldr	r3, [r4, #4]
    a71c:	2b00      	cmp	r3, #0
    a71e:	d0fa      	beq.n	a716 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a720:	462a      	mov	r2, r5
    a722:	4631      	mov	r1, r6
    a724:	4638      	mov	r0, r7
    a726:	4798      	blx	r3
			if (0 == rc) {
    a728:	b138      	cbz	r0, a73a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a72a:	f110 0f0a 	cmn.w	r0, #10
    a72e:	d0f2      	beq.n	a716 <usbdc_request_handler+0x12>
				return -1;
    a730:	f04f 30ff 	mov.w	r0, #4294967295
}
    a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a736:	2000      	movs	r0, #0
    a738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a73a:	2001      	movs	r0, #1
    a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a73e:	bf00      	nop
    a740:	20000ea4 	.word	0x20000ea4

0000a744 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a744:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a746:	4b06      	ldr	r3, [pc, #24]	; (a760 <usbd_sof_cb+0x1c>)
    a748:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a74a:	b91c      	cbnz	r4, a754 <usbd_sof_cb+0x10>
    a74c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a74e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a750:	2c00      	cmp	r4, #0
    a752:	d0fb      	beq.n	a74c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a754:	6863      	ldr	r3, [r4, #4]
    a756:	2b00      	cmp	r3, #0
    a758:	d0f9      	beq.n	a74e <usbd_sof_cb+0xa>
			sof->cb();
    a75a:	4798      	blx	r3
    a75c:	e7f7      	b.n	a74e <usbd_sof_cb+0xa>
    a75e:	bf00      	nop
    a760:	20000ea4 	.word	0x20000ea4

0000a764 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a764:	b510      	push	{r4, lr}
    a766:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a768:	b119      	cbz	r1, a772 <usbdc_cb_ctl_done+0xe>
    a76a:	2901      	cmp	r1, #1
    a76c:	d026      	beq.n	a7bc <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a76e:	2000      	movs	r0, #0
    a770:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a772:	7813      	ldrb	r3, [r2, #0]
    a774:	2b00      	cmp	r3, #0
    a776:	d1fa      	bne.n	a76e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a778:	7853      	ldrb	r3, [r2, #1]
    a77a:	2b05      	cmp	r3, #5
    a77c:	d00f      	beq.n	a79e <usbdc_cb_ctl_done+0x3a>
    a77e:	2b09      	cmp	r3, #9
    a780:	d1f5      	bne.n	a76e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a782:	8852      	ldrh	r2, [r2, #2]
    a784:	4b10      	ldr	r3, [pc, #64]	; (a7c8 <usbdc_cb_ctl_done+0x64>)
    a786:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a788:	8863      	ldrh	r3, [r4, #2]
    a78a:	2b00      	cmp	r3, #0
    a78c:	bf14      	ite	ne
    a78e:	2104      	movne	r1, #4
    a790:	2103      	moveq	r1, #3
    a792:	4b0d      	ldr	r3, [pc, #52]	; (a7c8 <usbdc_cb_ctl_done+0x64>)
    a794:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a796:	2001      	movs	r0, #1
    a798:	4b0c      	ldr	r3, [pc, #48]	; (a7cc <usbdc_cb_ctl_done+0x68>)
    a79a:	4798      	blx	r3
    a79c:	e7e7      	b.n	a76e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a79e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a7a0:	b2c0      	uxtb	r0, r0
    a7a2:	4b0b      	ldr	r3, [pc, #44]	; (a7d0 <usbdc_cb_ctl_done+0x6c>)
    a7a4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a7a6:	8863      	ldrh	r3, [r4, #2]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	bf14      	ite	ne
    a7ac:	2103      	movne	r1, #3
    a7ae:	2102      	moveq	r1, #2
    a7b0:	4b05      	ldr	r3, [pc, #20]	; (a7c8 <usbdc_cb_ctl_done+0x64>)
    a7b2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a7b4:	2001      	movs	r0, #1
    a7b6:	4b05      	ldr	r3, [pc, #20]	; (a7cc <usbdc_cb_ctl_done+0x68>)
    a7b8:	4798      	blx	r3
    a7ba:	e7d8      	b.n	a76e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a7bc:	2201      	movs	r2, #1
    a7be:	4621      	mov	r1, r4
    a7c0:	2000      	movs	r0, #0
    a7c2:	4b04      	ldr	r3, [pc, #16]	; (a7d4 <usbdc_cb_ctl_done+0x70>)
    a7c4:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a7c6:	e7d2      	b.n	a76e <usbdc_cb_ctl_done+0xa>
    a7c8:	20000ea4 	.word	0x20000ea4
    a7cc:	0000a6dd 	.word	0x0000a6dd
    a7d0:	00005485 	.word	0x00005485
    a7d4:	0000a705 	.word	0x0000a705

0000a7d8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a7d8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a7da:	4b0d      	ldr	r3, [pc, #52]	; (a810 <usbdc_reset+0x38>)
    a7dc:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a7de:	4d0d      	ldr	r5, [pc, #52]	; (a814 <usbdc_reset+0x3c>)
    a7e0:	2602      	movs	r6, #2
    a7e2:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a7e4:	2400      	movs	r4, #0
    a7e6:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a7e8:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a7ea:	4620      	mov	r0, r4
    a7ec:	4b0a      	ldr	r3, [pc, #40]	; (a818 <usbdc_reset+0x40>)
    a7ee:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a7f0:	7f28      	ldrb	r0, [r5, #28]
    a7f2:	4b0a      	ldr	r3, [pc, #40]	; (a81c <usbdc_reset+0x44>)
    a7f4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a7f6:	4a0a      	ldr	r2, [pc, #40]	; (a820 <usbdc_reset+0x48>)
    a7f8:	4621      	mov	r1, r4
    a7fa:	4620      	mov	r0, r4
    a7fc:	4d09      	ldr	r5, [pc, #36]	; (a824 <usbdc_reset+0x4c>)
    a7fe:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a800:	4a09      	ldr	r2, [pc, #36]	; (a828 <usbdc_reset+0x50>)
    a802:	4631      	mov	r1, r6
    a804:	4620      	mov	r0, r4
    a806:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a808:	4620      	mov	r0, r4
    a80a:	4b08      	ldr	r3, [pc, #32]	; (a82c <usbdc_reset+0x54>)
    a80c:	4798      	blx	r3
    a80e:	bd70      	pop	{r4, r5, r6, pc}
    a810:	0000a6b9 	.word	0x0000a6b9
    a814:	20000ea4 	.word	0x20000ea4
    a818:	000054f9 	.word	0x000054f9
    a81c:	000054e5 	.word	0x000054e5
    a820:	0000a871 	.word	0x0000a871
    a824:	000056f9 	.word	0x000056f9
    a828:	0000a765 	.word	0x0000a765
    a82c:	00005525 	.word	0x00005525

0000a830 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a830:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a832:	b110      	cbz	r0, a83a <usbd_event_cb+0xa>
    a834:	2801      	cmp	r0, #1
    a836:	d004      	beq.n	a842 <usbd_event_cb+0x12>
    a838:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a83a:	2000      	movs	r0, #0
    a83c:	4b02      	ldr	r3, [pc, #8]	; (a848 <usbd_event_cb+0x18>)
    a83e:	4798      	blx	r3
		break;
    a840:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a842:	4b02      	ldr	r3, [pc, #8]	; (a84c <usbd_event_cb+0x1c>)
    a844:	4798      	blx	r3
    a846:	bd08      	pop	{r3, pc}
    a848:	0000a6dd 	.word	0x0000a6dd
    a84c:	0000a7d9 	.word	0x0000a7d9

0000a850 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a850:	b500      	push	{lr}
    a852:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a854:	9101      	str	r1, [sp, #4]
    a856:	9202      	str	r2, [sp, #8]
    a858:	f88d 000c 	strb.w	r0, [sp, #12]
    a85c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a860:	a801      	add	r0, sp, #4
    a862:	4b02      	ldr	r3, [pc, #8]	; (a86c <usbdc_xfer+0x1c>)
    a864:	4798      	blx	r3
}
    a866:	b005      	add	sp, #20
    a868:	f85d fb04 	ldr.w	pc, [sp], #4
    a86c:	00005571 	.word	0x00005571

0000a870 <usbdc_cb_ctl_req>:
{
    a870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a874:	b083      	sub	sp, #12
    a876:	4605      	mov	r5, r0
    a878:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a87a:	2200      	movs	r2, #0
    a87c:	4b9b      	ldr	r3, [pc, #620]	; (aaec <usbdc_cb_ctl_req+0x27c>)
    a87e:	4798      	blx	r3
    a880:	f1b0 3fff 	cmp.w	r0, #4294967295
    a884:	d00b      	beq.n	a89e <usbdc_cb_ctl_req+0x2e>
    a886:	2801      	cmp	r0, #1
    a888:	f000 81e3 	beq.w	ac52 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a88c:	7823      	ldrb	r3, [r4, #0]
    a88e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a892:	d008      	beq.n	a8a6 <usbdc_cb_ctl_req+0x36>
    a894:	2a80      	cmp	r2, #128	; 0x80
    a896:	f000 80f4 	beq.w	aa82 <usbdc_cb_ctl_req+0x212>
		return false;
    a89a:	2000      	movs	r0, #0
    a89c:	e000      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    a89e:	2000      	movs	r0, #0
}
    a8a0:	b003      	add	sp, #12
    a8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a8a6:	7862      	ldrb	r2, [r4, #1]
    a8a8:	3a01      	subs	r2, #1
    a8aa:	2a0a      	cmp	r2, #10
    a8ac:	f200 81d3 	bhi.w	ac56 <usbdc_cb_ctl_req+0x3e6>
    a8b0:	e8df f012 	tbh	[pc, r2, lsl #1]
    a8b4:	01d10060 	.word	0x01d10060
    a8b8:	01d10076 	.word	0x01d10076
    a8bc:	01d1000b 	.word	0x01d1000b
    a8c0:	01d101d1 	.word	0x01d101d1
    a8c4:	01d10015 	.word	0x01d10015
    a8c8:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a8ca:	2301      	movs	r3, #1
    a8cc:	2200      	movs	r2, #0
    a8ce:	4611      	mov	r1, r2
    a8d0:	4628      	mov	r0, r5
    a8d2:	4c87      	ldr	r4, [pc, #540]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    a8d4:	47a0      	blx	r4
    a8d6:	fab0 f080 	clz	r0, r0
    a8da:	0940      	lsrs	r0, r0, #5
    a8dc:	e7e0      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a8de:	8862      	ldrh	r2, [r4, #2]
    a8e0:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a8e2:	b1ca      	cbz	r2, a918 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a8e4:	4b83      	ldr	r3, [pc, #524]	; (aaf4 <usbdc_cb_ctl_req+0x284>)
    a8e6:	681b      	ldr	r3, [r3, #0]
    a8e8:	6859      	ldr	r1, [r3, #4]
    a8ea:	6818      	ldr	r0, [r3, #0]
    a8ec:	4b82      	ldr	r3, [pc, #520]	; (aaf8 <usbdc_cb_ctl_req+0x288>)
    a8ee:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a8f0:	2800      	cmp	r0, #0
    a8f2:	f000 81be 	beq.w	ac72 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    a8f6:	78c2      	ldrb	r2, [r0, #3]
    a8f8:	7881      	ldrb	r1, [r0, #2]
    a8fa:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a8fe:	fa10 f181 	uxtah	r1, r0, r1
    a902:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a904:	2204      	movs	r2, #4
    a906:	4b7d      	ldr	r3, [pc, #500]	; (aafc <usbdc_cb_ctl_req+0x28c>)
    a908:	4798      	blx	r3
    a90a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a90c:	b130      	cbz	r0, a91c <usbdc_cb_ctl_req+0xac>
    a90e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a910:	f8df 81e0 	ldr.w	r8, [pc, #480]	; aaf4 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a914:	4f79      	ldr	r7, [pc, #484]	; (aafc <usbdc_cb_ctl_req+0x28c>)
    a916:	e018      	b.n	a94a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a918:	4b79      	ldr	r3, [pc, #484]	; (ab00 <usbdc_cb_ctl_req+0x290>)
    a91a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a91c:	2301      	movs	r3, #1
    a91e:	2200      	movs	r2, #0
    a920:	4611      	mov	r1, r2
    a922:	4628      	mov	r0, r5
    a924:	4c72      	ldr	r4, [pc, #456]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    a926:	47a0      	blx	r4
    a928:	fab0 f080 	clz	r0, r0
    a92c:	0940      	lsrs	r0, r0, #5
    a92e:	e7b7      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a930:	464c      	mov	r4, r9
    a932:	e000      	b.n	a936 <usbdc_cb_ctl_req+0xc6>
    a934:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a936:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a938:	7803      	ldrb	r3, [r0, #0]
    a93a:	4418      	add	r0, r3
    a93c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a93e:	2204      	movs	r2, #4
    a940:	9901      	ldr	r1, [sp, #4]
    a942:	47b8      	blx	r7
    a944:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a946:	2800      	cmp	r0, #0
    a948:	d0e8      	beq.n	a91c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a94a:	f890 9002 	ldrb.w	r9, [r0, #2]
    a94e:	45a1      	cmp	r9, r4
    a950:	d0f1      	beq.n	a936 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a952:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a956:	2c00      	cmp	r4, #0
    a958:	d0ea      	beq.n	a930 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a95a:	2600      	movs	r6, #0
    a95c:	6863      	ldr	r3, [r4, #4]
    a95e:	466a      	mov	r2, sp
    a960:	4631      	mov	r1, r6
    a962:	4620      	mov	r0, r4
    a964:	4798      	blx	r3
    a966:	2800      	cmp	r0, #0
    a968:	d0e4      	beq.n	a934 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a96a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a96c:	2c00      	cmp	r4, #0
    a96e:	d1f5      	bne.n	a95c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a970:	464c      	mov	r4, r9
    a972:	e7e0      	b.n	a936 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a974:	f003 031f 	and.w	r3, r3, #31
    a978:	2b02      	cmp	r3, #2
    a97a:	f040 816e 	bne.w	ac5a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a97e:	88e3      	ldrh	r3, [r4, #6]
    a980:	b10b      	cbz	r3, a986 <usbdc_cb_ctl_req+0x116>
			return false;
    a982:	2000      	movs	r0, #0
    a984:	e78c      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a986:	88a0      	ldrh	r0, [r4, #4]
    a988:	2100      	movs	r1, #0
    a98a:	b2c0      	uxtb	r0, r0
    a98c:	4b5d      	ldr	r3, [pc, #372]	; (ab04 <usbdc_cb_ctl_req+0x294>)
    a98e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a990:	2301      	movs	r3, #1
    a992:	2200      	movs	r2, #0
    a994:	4611      	mov	r1, r2
    a996:	4628      	mov	r0, r5
    a998:	4c55      	ldr	r4, [pc, #340]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    a99a:	47a0      	blx	r4
		return true;
    a99c:	2001      	movs	r0, #1
    a99e:	e77f      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a9a0:	f003 031f 	and.w	r3, r3, #31
    a9a4:	2b02      	cmp	r3, #2
    a9a6:	f040 815a 	bne.w	ac5e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a9aa:	88e3      	ldrh	r3, [r4, #6]
    a9ac:	b10b      	cbz	r3, a9b2 <usbdc_cb_ctl_req+0x142>
			return false;
    a9ae:	2000      	movs	r0, #0
    a9b0:	e776      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a9b2:	88a0      	ldrh	r0, [r4, #4]
    a9b4:	2101      	movs	r1, #1
    a9b6:	b2c0      	uxtb	r0, r0
    a9b8:	4b52      	ldr	r3, [pc, #328]	; (ab04 <usbdc_cb_ctl_req+0x294>)
    a9ba:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a9bc:	2301      	movs	r3, #1
    a9be:	2200      	movs	r2, #0
    a9c0:	4611      	mov	r1, r2
    a9c2:	4628      	mov	r0, r5
    a9c4:	4c4a      	ldr	r4, [pc, #296]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    a9c6:	47a0      	blx	r4
		return true;
    a9c8:	2001      	movs	r0, #1
    a9ca:	e769      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a9cc:	8866      	ldrh	r6, [r4, #2]
    a9ce:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a9d0:	4a48      	ldr	r2, [pc, #288]	; (aaf4 <usbdc_cb_ctl_req+0x284>)
    a9d2:	6813      	ldr	r3, [r2, #0]
    a9d4:	7ed2      	ldrb	r2, [r2, #27]
    a9d6:	6859      	ldr	r1, [r3, #4]
    a9d8:	6818      	ldr	r0, [r3, #0]
    a9da:	4b47      	ldr	r3, [pc, #284]	; (aaf8 <usbdc_cb_ctl_req+0x288>)
    a9dc:	4798      	blx	r3
	if (NULL == ifc) {
    a9de:	2800      	cmp	r0, #0
    a9e0:	d045      	beq.n	aa6e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a9e2:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a9e4:	78c2      	ldrb	r2, [r0, #3]
    a9e6:	7881      	ldrb	r1, [r0, #2]
    a9e8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a9ec:	fa10 f181 	uxtah	r1, r0, r1
    a9f0:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a9f2:	2204      	movs	r2, #4
    a9f4:	4b41      	ldr	r3, [pc, #260]	; (aafc <usbdc_cb_ctl_req+0x28c>)
    a9f6:	4798      	blx	r3
    a9f8:	4603      	mov	r3, r0
    a9fa:	2800      	cmp	r0, #0
    a9fc:	d039      	beq.n	aa72 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a9fe:	2704      	movs	r7, #4
    aa00:	4d3e      	ldr	r5, [pc, #248]	; (aafc <usbdc_cb_ctl_req+0x28c>)
    aa02:	e008      	b.n	aa16 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    aa04:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    aa06:	7803      	ldrb	r3, [r0, #0]
    aa08:	4418      	add	r0, r3
    aa0a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    aa0c:	463a      	mov	r2, r7
    aa0e:	9901      	ldr	r1, [sp, #4]
    aa10:	47a8      	blx	r5
		if (NULL == ifc) {
    aa12:	4603      	mov	r3, r0
    aa14:	b378      	cbz	r0, aa76 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    aa16:	789a      	ldrb	r2, [r3, #2]
    aa18:	42a2      	cmp	r2, r4
    aa1a:	d1f3      	bne.n	aa04 <usbdc_cb_ctl_req+0x194>
    aa1c:	78da      	ldrb	r2, [r3, #3]
    aa1e:	42b2      	cmp	r2, r6
    aa20:	d1f0      	bne.n	aa04 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    aa22:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    aa24:	4b33      	ldr	r3, [pc, #204]	; (aaf4 <usbdc_cb_ctl_req+0x284>)
    aa26:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    aa28:	b33d      	cbz	r5, aa7a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    aa2a:	2701      	movs	r7, #1
    aa2c:	686b      	ldr	r3, [r5, #4]
    aa2e:	466a      	mov	r2, sp
    aa30:	4639      	mov	r1, r7
    aa32:	4628      	mov	r0, r5
    aa34:	4798      	blx	r3
    aa36:	b120      	cbz	r0, aa42 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    aa38:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    aa3a:	2d00      	cmp	r5, #0
    aa3c:	d1f6      	bne.n	aa2c <usbdc_cb_ctl_req+0x1bc>
	return false;
    aa3e:	2000      	movs	r0, #0
    aa40:	e72e      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    aa42:	686b      	ldr	r3, [r5, #4]
    aa44:	466a      	mov	r2, sp
    aa46:	2100      	movs	r1, #0
    aa48:	4628      	mov	r0, r5
    aa4a:	4798      	blx	r3
    aa4c:	b9b8      	cbnz	r0, aa7e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    aa4e:	b136      	cbz	r6, aa5e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    aa50:	4a28      	ldr	r2, [pc, #160]	; (aaf4 <usbdc_cb_ctl_req+0x284>)
    aa52:	2301      	movs	r3, #1
    aa54:	fa03 f404 	lsl.w	r4, r3, r4
    aa58:	7f53      	ldrb	r3, [r2, #29]
    aa5a:	4323      	orrs	r3, r4
    aa5c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    aa5e:	2300      	movs	r3, #0
    aa60:	461a      	mov	r2, r3
    aa62:	4619      	mov	r1, r3
    aa64:	4618      	mov	r0, r3
    aa66:	4c22      	ldr	r4, [pc, #136]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    aa68:	47a0      	blx	r4
			return true;
    aa6a:	2001      	movs	r0, #1
    aa6c:	e718      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    aa6e:	2000      	movs	r0, #0
    aa70:	e716      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    aa72:	2000      	movs	r0, #0
    aa74:	e714      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
			return false;
    aa76:	2000      	movs	r0, #0
    aa78:	e712      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	return false;
    aa7a:	2000      	movs	r0, #0
    aa7c:	e710      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
			return false;
    aa7e:	2000      	movs	r0, #0
    aa80:	e70e      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    aa82:	7862      	ldrb	r2, [r4, #1]
    aa84:	2a0a      	cmp	r2, #10
    aa86:	f200 80ec 	bhi.w	ac62 <usbdc_cb_ctl_req+0x3f2>
    aa8a:	e8df f012 	tbh	[pc, r2, lsl #1]
    aa8e:	008e      	.short	0x008e
    aa90:	00ea00ea 	.word	0x00ea00ea
    aa94:	00ea00ea 	.word	0x00ea00ea
    aa98:	000b00ea 	.word	0x000b00ea
    aa9c:	008200ea 	.word	0x008200ea
    aaa0:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    aaa4:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    aaa6:	0a13      	lsrs	r3, r2, #8
    aaa8:	2b02      	cmp	r3, #2
    aaaa:	d02d      	beq.n	ab08 <usbdc_cb_ctl_req+0x298>
    aaac:	2b03      	cmp	r3, #3
    aaae:	d050      	beq.n	ab52 <usbdc_cb_ctl_req+0x2e2>
    aab0:	2b01      	cmp	r3, #1
    aab2:	d001      	beq.n	aab8 <usbdc_cb_ctl_req+0x248>
	return false;
    aab4:	2000      	movs	r0, #0
    aab6:	e6f3      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    aab8:	88e2      	ldrh	r2, [r4, #6]
    aaba:	2a12      	cmp	r2, #18
    aabc:	bf28      	it	cs
    aabe:	2212      	movcs	r2, #18
    aac0:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    aac2:	4b0c      	ldr	r3, [pc, #48]	; (aaf4 <usbdc_cb_ctl_req+0x284>)
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	2201      	movs	r2, #1
    aac8:	6859      	ldr	r1, [r3, #4]
    aaca:	6818      	ldr	r0, [r3, #0]
    aacc:	4b0b      	ldr	r3, [pc, #44]	; (aafc <usbdc_cb_ctl_req+0x28c>)
    aace:	4798      	blx	r3
	if (!dev_desc) {
    aad0:	4601      	mov	r1, r0
    aad2:	2800      	cmp	r0, #0
    aad4:	f000 80c7 	beq.w	ac66 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    aad8:	2300      	movs	r3, #0
    aada:	4622      	mov	r2, r4
    aadc:	4628      	mov	r0, r5
    aade:	4c04      	ldr	r4, [pc, #16]	; (aaf0 <usbdc_cb_ctl_req+0x280>)
    aae0:	47a0      	blx	r4
    aae2:	fab0 f080 	clz	r0, r0
    aae6:	0940      	lsrs	r0, r0, #5
    aae8:	e6da      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
    aaea:	bf00      	nop
    aaec:	0000a705 	.word	0x0000a705
    aaf0:	0000a851 	.word	0x0000a851
    aaf4:	20000ea4 	.word	0x20000ea4
    aaf8:	0000ae15 	.word	0x0000ae15
    aafc:	0000ad95 	.word	0x0000ad95
    ab00:	0000a6b9 	.word	0x0000a6b9
    ab04:	00005691 	.word	0x00005691
	uint16_t length   = req->wLength;
    ab08:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ab0a:	4b5b      	ldr	r3, [pc, #364]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ab0c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ab0e:	681b      	ldr	r3, [r3, #0]
    ab10:	3201      	adds	r2, #1
    ab12:	b2d2      	uxtb	r2, r2
    ab14:	6859      	ldr	r1, [r3, #4]
    ab16:	6818      	ldr	r0, [r3, #0]
    ab18:	4b58      	ldr	r3, [pc, #352]	; (ac7c <usbdc_cb_ctl_req+0x40c>)
    ab1a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ab1c:	4601      	mov	r1, r0
    ab1e:	2800      	cmp	r0, #0
    ab20:	f000 80a3 	beq.w	ac6a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    ab24:	78c3      	ldrb	r3, [r0, #3]
    ab26:	7882      	ldrb	r2, [r0, #2]
    ab28:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    ab2c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    ab2e:	4294      	cmp	r4, r2
    ab30:	d90d      	bls.n	ab4e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ab32:	3e01      	subs	r6, #1
    ab34:	4226      	tst	r6, r4
    ab36:	bf0c      	ite	eq
    ab38:	2301      	moveq	r3, #1
    ab3a:	2300      	movne	r3, #0
		length = total_len;
    ab3c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ab3e:	4622      	mov	r2, r4
    ab40:	4628      	mov	r0, r5
    ab42:	4c4f      	ldr	r4, [pc, #316]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    ab44:	47a0      	blx	r4
    ab46:	fab0 f080 	clz	r0, r0
    ab4a:	0940      	lsrs	r0, r0, #5
    ab4c:	e6a8      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    ab4e:	2300      	movs	r3, #0
    ab50:	e7f5      	b.n	ab3e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    ab52:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ab54:	4b48      	ldr	r3, [pc, #288]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ab56:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ab58:	681b      	ldr	r3, [r3, #0]
    ab5a:	b2d2      	uxtb	r2, r2
    ab5c:	6859      	ldr	r1, [r3, #4]
    ab5e:	6818      	ldr	r0, [r3, #0]
    ab60:	4b48      	ldr	r3, [pc, #288]	; (ac84 <usbdc_cb_ctl_req+0x414>)
    ab62:	4798      	blx	r3
	if (NULL == str_desc) {
    ab64:	4601      	mov	r1, r0
    ab66:	2800      	cmp	r0, #0
    ab68:	f000 8081 	beq.w	ac6e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    ab6c:	7802      	ldrb	r2, [r0, #0]
    ab6e:	4294      	cmp	r4, r2
    ab70:	d90d      	bls.n	ab8e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ab72:	3e01      	subs	r6, #1
    ab74:	4226      	tst	r6, r4
    ab76:	bf0c      	ite	eq
    ab78:	2301      	moveq	r3, #1
    ab7a:	2300      	movne	r3, #0
		length = str_desc[0];
    ab7c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ab7e:	4622      	mov	r2, r4
    ab80:	4628      	mov	r0, r5
    ab82:	4c3f      	ldr	r4, [pc, #252]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    ab84:	47a0      	blx	r4
    ab86:	fab0 f080 	clz	r0, r0
    ab8a:	0940      	lsrs	r0, r0, #5
    ab8c:	e688      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    ab8e:	2300      	movs	r3, #0
    ab90:	e7f5      	b.n	ab7e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ab92:	4939      	ldr	r1, [pc, #228]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ab94:	694b      	ldr	r3, [r1, #20]
    ab96:	7eca      	ldrb	r2, [r1, #27]
    ab98:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ab9a:	2300      	movs	r3, #0
    ab9c:	2201      	movs	r2, #1
    ab9e:	6949      	ldr	r1, [r1, #20]
    aba0:	4628      	mov	r0, r5
    aba2:	4c37      	ldr	r4, [pc, #220]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    aba4:	47a0      	blx	r4
		return true;
    aba6:	2001      	movs	r0, #1
    aba8:	e67a      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    abaa:	f003 031f 	and.w	r3, r3, #31
    abae:	2b01      	cmp	r3, #1
    abb0:	d903      	bls.n	abba <usbdc_cb_ctl_req+0x34a>
    abb2:	2b02      	cmp	r3, #2
    abb4:	d010      	beq.n	abd8 <usbdc_cb_ctl_req+0x368>
		return false;
    abb6:	2000      	movs	r0, #0
    abb8:	e672      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		st = 0;
    abba:	2300      	movs	r3, #0
    abbc:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    abbe:	492e      	ldr	r1, [pc, #184]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    abc0:	694b      	ldr	r3, [r1, #20]
    abc2:	f8bd 2000 	ldrh.w	r2, [sp]
    abc6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    abc8:	2300      	movs	r3, #0
    abca:	2202      	movs	r2, #2
    abcc:	6949      	ldr	r1, [r1, #20]
    abce:	4628      	mov	r0, r5
    abd0:	4c2b      	ldr	r4, [pc, #172]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    abd2:	47a0      	blx	r4
	return true;
    abd4:	2001      	movs	r0, #1
    abd6:	e663      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    abd8:	88a0      	ldrh	r0, [r4, #4]
    abda:	2102      	movs	r1, #2
    abdc:	b2c0      	uxtb	r0, r0
    abde:	4b2a      	ldr	r3, [pc, #168]	; (ac88 <usbdc_cb_ctl_req+0x418>)
    abe0:	4798      	blx	r3
		if (st < 0) {
    abe2:	2800      	cmp	r0, #0
    abe4:	db03      	blt.n	abee <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    abe6:	f000 0001 	and.w	r0, r0, #1
    abea:	9000      	str	r0, [sp, #0]
    abec:	e7e7      	b.n	abbe <usbdc_cb_ctl_req+0x34e>
			return false;
    abee:	2000      	movs	r0, #0
    abf0:	e656      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    abf2:	4b21      	ldr	r3, [pc, #132]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    abf4:	7f5b      	ldrb	r3, [r3, #29]
    abf6:	88a2      	ldrh	r2, [r4, #4]
    abf8:	4113      	asrs	r3, r2
    abfa:	f013 0f01 	tst.w	r3, #1
    abfe:	d012      	beq.n	ac26 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ac00:	4b1d      	ldr	r3, [pc, #116]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ac02:	691d      	ldr	r5, [r3, #16]
	return false;
    ac04:	2000      	movs	r0, #0
	while (NULL != func) {
    ac06:	2d00      	cmp	r5, #0
    ac08:	f43f ae4a 	beq.w	a8a0 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ac0c:	2602      	movs	r6, #2
    ac0e:	686b      	ldr	r3, [r5, #4]
    ac10:	4622      	mov	r2, r4
    ac12:	4631      	mov	r1, r6
    ac14:	4628      	mov	r0, r5
    ac16:	4798      	blx	r3
    ac18:	2800      	cmp	r0, #0
    ac1a:	da0f      	bge.n	ac3c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    ac1c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    ac1e:	2d00      	cmp	r5, #0
    ac20:	d1f5      	bne.n	ac0e <usbdc_cb_ctl_req+0x39e>
	return false;
    ac22:	2000      	movs	r0, #0
    ac24:	e63c      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    ac26:	4914      	ldr	r1, [pc, #80]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ac28:	694b      	ldr	r3, [r1, #20]
    ac2a:	2000      	movs	r0, #0
    ac2c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ac2e:	4603      	mov	r3, r0
    ac30:	2201      	movs	r2, #1
    ac32:	6949      	ldr	r1, [r1, #20]
    ac34:	4c12      	ldr	r4, [pc, #72]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    ac36:	47a0      	blx	r4
		return true;
    ac38:	2001      	movs	r0, #1
    ac3a:	e631      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ac3c:	490e      	ldr	r1, [pc, #56]	; (ac78 <usbdc_cb_ctl_req+0x408>)
    ac3e:	694b      	ldr	r3, [r1, #20]
    ac40:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ac42:	2300      	movs	r3, #0
    ac44:	2201      	movs	r2, #1
    ac46:	6949      	ldr	r1, [r1, #20]
    ac48:	4618      	mov	r0, r3
    ac4a:	4c0d      	ldr	r4, [pc, #52]	; (ac80 <usbdc_cb_ctl_req+0x410>)
    ac4c:	47a0      	blx	r4
			return true;
    ac4e:	2001      	movs	r0, #1
    ac50:	e626      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return true;
    ac52:	2001      	movs	r0, #1
    ac54:	e624      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac56:	2000      	movs	r0, #0
    ac58:	e622      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac5a:	2000      	movs	r0, #0
    ac5c:	e620      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac5e:	2000      	movs	r0, #0
    ac60:	e61e      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac62:	2000      	movs	r0, #0
    ac64:	e61c      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac66:	2000      	movs	r0, #0
    ac68:	e61a      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac6a:	2000      	movs	r0, #0
    ac6c:	e618      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
		return false;
    ac6e:	2000      	movs	r0, #0
    ac70:	e616      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
			return false;
    ac72:	2000      	movs	r0, #0
    ac74:	e614      	b.n	a8a0 <usbdc_cb_ctl_req+0x30>
    ac76:	bf00      	nop
    ac78:	20000ea4 	.word	0x20000ea4
    ac7c:	0000ae15 	.word	0x0000ae15
    ac80:	0000a851 	.word	0x0000a851
    ac84:	0000ae7d 	.word	0x0000ae7d
    ac88:	00005691 	.word	0x00005691

0000ac8c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ac8c:	b508      	push	{r3, lr}
	switch (type) {
    ac8e:	2801      	cmp	r0, #1
    ac90:	d007      	beq.n	aca2 <usbdc_register_handler+0x16>
    ac92:	b110      	cbz	r0, ac9a <usbdc_register_handler+0xe>
    ac94:	2802      	cmp	r0, #2
    ac96:	d008      	beq.n	acaa <usbdc_register_handler+0x1e>
    ac98:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ac9a:	4806      	ldr	r0, [pc, #24]	; (acb4 <usbdc_register_handler+0x28>)
    ac9c:	4b06      	ldr	r3, [pc, #24]	; (acb8 <usbdc_register_handler+0x2c>)
    ac9e:	4798      	blx	r3
		break;
    aca0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    aca2:	4806      	ldr	r0, [pc, #24]	; (acbc <usbdc_register_handler+0x30>)
    aca4:	4b04      	ldr	r3, [pc, #16]	; (acb8 <usbdc_register_handler+0x2c>)
    aca6:	4798      	blx	r3
		break;
    aca8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    acaa:	4805      	ldr	r0, [pc, #20]	; (acc0 <usbdc_register_handler+0x34>)
    acac:	4b02      	ldr	r3, [pc, #8]	; (acb8 <usbdc_register_handler+0x2c>)
    acae:	4798      	blx	r3
    acb0:	bd08      	pop	{r3, pc}
    acb2:	bf00      	nop
    acb4:	20000ea8 	.word	0x20000ea8
    acb8:	000057a1 	.word	0x000057a1
    acbc:	20000eac 	.word	0x20000eac
    acc0:	20000eb0 	.word	0x20000eb0

0000acc4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    acc4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    acc6:	4605      	mov	r5, r0
    acc8:	f240 3255 	movw	r2, #853	; 0x355
    accc:	490c      	ldr	r1, [pc, #48]	; (ad00 <usbdc_init+0x3c>)
    acce:	3000      	adds	r0, #0
    acd0:	bf18      	it	ne
    acd2:	2001      	movne	r0, #1
    acd4:	4b0b      	ldr	r3, [pc, #44]	; (ad04 <usbdc_init+0x40>)
    acd6:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    acd8:	4b0b      	ldr	r3, [pc, #44]	; (ad08 <usbdc_init+0x44>)
    acda:	4798      	blx	r3
	if (rc < 0) {
    acdc:	2800      	cmp	r0, #0
    acde:	db0e      	blt.n	acfe <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ace0:	4c0a      	ldr	r4, [pc, #40]	; (ad0c <usbdc_init+0x48>)
    ace2:	2220      	movs	r2, #32
    ace4:	2100      	movs	r1, #0
    ace6:	4620      	mov	r0, r4
    ace8:	4b09      	ldr	r3, [pc, #36]	; (ad10 <usbdc_init+0x4c>)
    acea:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    acec:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    acee:	4909      	ldr	r1, [pc, #36]	; (ad14 <usbdc_init+0x50>)
    acf0:	2000      	movs	r0, #0
    acf2:	4c09      	ldr	r4, [pc, #36]	; (ad18 <usbdc_init+0x54>)
    acf4:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    acf6:	4909      	ldr	r1, [pc, #36]	; (ad1c <usbdc_init+0x58>)
    acf8:	2001      	movs	r0, #1
    acfa:	47a0      	blx	r4

	return 0;
    acfc:	2000      	movs	r0, #0
}
    acfe:	bd38      	pop	{r3, r4, r5, pc}
    ad00:	0000d2bc 	.word	0x0000d2bc
    ad04:	00005745 	.word	0x00005745
    ad08:	000053ed 	.word	0x000053ed
    ad0c:	20000ea4 	.word	0x20000ea4
    ad10:	0000b863 	.word	0x0000b863
    ad14:	0000a745 	.word	0x0000a745
    ad18:	00005455 	.word	0x00005455
    ad1c:	0000a831 	.word	0x0000a831

0000ad20 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ad20:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    ad22:	4601      	mov	r1, r0
    ad24:	4801      	ldr	r0, [pc, #4]	; (ad2c <usbdc_register_function+0xc>)
    ad26:	4b02      	ldr	r3, [pc, #8]	; (ad30 <usbdc_register_function+0x10>)
    ad28:	4798      	blx	r3
    ad2a:	bd08      	pop	{r3, pc}
    ad2c:	20000eb4 	.word	0x20000eb4
    ad30:	000057a1 	.word	0x000057a1

0000ad34 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ad34:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    ad36:	4b0a      	ldr	r3, [pc, #40]	; (ad60 <usbdc_start+0x2c>)
    ad38:	7e9b      	ldrb	r3, [r3, #26]
    ad3a:	b95b      	cbnz	r3, ad54 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    ad3c:	b168      	cbz	r0, ad5a <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    ad3e:	4b08      	ldr	r3, [pc, #32]	; (ad60 <usbdc_start+0x2c>)
    ad40:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ad42:	6802      	ldr	r2, [r0, #0]
    ad44:	79d2      	ldrb	r2, [r2, #7]
    ad46:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ad48:	2201      	movs	r2, #1
    ad4a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ad4c:	4b05      	ldr	r3, [pc, #20]	; (ad64 <usbdc_start+0x30>)
    ad4e:	4798      	blx	r3
	return ERR_NONE;
    ad50:	2000      	movs	r0, #0
    ad52:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    ad54:	f06f 0003 	mvn.w	r0, #3
    ad58:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    ad5a:	f06f 0008 	mvn.w	r0, #8
}
    ad5e:	bd08      	pop	{r3, pc}
    ad60:	20000ea4 	.word	0x20000ea4
    ad64:	00005461 	.word	0x00005461

0000ad68 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ad68:	b508      	push	{r3, lr}
	usb_d_attach();
    ad6a:	4b01      	ldr	r3, [pc, #4]	; (ad70 <usbdc_attach+0x8>)
    ad6c:	4798      	blx	r3
    ad6e:	bd08      	pop	{r3, pc}
    ad70:	0000546d 	.word	0x0000546d

0000ad74 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    ad74:	4b01      	ldr	r3, [pc, #4]	; (ad7c <usbdc_get_ctrl_buffer+0x8>)
    ad76:	6958      	ldr	r0, [r3, #20]
    ad78:	4770      	bx	lr
    ad7a:	bf00      	nop
    ad7c:	20000ea4 	.word	0x20000ea4

0000ad80 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    ad80:	4b03      	ldr	r3, [pc, #12]	; (ad90 <usbdc_get_state+0x10>)
    ad82:	7e98      	ldrb	r0, [r3, #26]
    ad84:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    ad88:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    ad8a:	bf18      	it	ne
    ad8c:	2010      	movne	r0, #16
    ad8e:	4770      	bx	lr
    ad90:	20000ea4 	.word	0x20000ea4

0000ad94 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ad94:	4288      	cmp	r0, r1
    ad96:	d214      	bcs.n	adc2 <usb_find_desc+0x2e>
	return desc[0];
    ad98:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ad9a:	2b01      	cmp	r3, #1
    ad9c:	d913      	bls.n	adc6 <usb_find_desc+0x32>
{
    ad9e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    ada0:	7844      	ldrb	r4, [r0, #1]
    ada2:	4294      	cmp	r4, r2
    ada4:	d00a      	beq.n	adbc <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    ada6:	4418      	add	r0, r3
	while (desc < eof) {
    ada8:	4281      	cmp	r1, r0
    adaa:	d906      	bls.n	adba <usb_find_desc+0x26>
	return desc[0];
    adac:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    adae:	2b01      	cmp	r3, #1
    adb0:	d90b      	bls.n	adca <usb_find_desc+0x36>
	return desc[1];
    adb2:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    adb4:	4294      	cmp	r4, r2
    adb6:	d1f6      	bne.n	ada6 <usb_find_desc+0x12>
    adb8:	e000      	b.n	adbc <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    adba:	2000      	movs	r0, #0
}
    adbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    adc0:	4770      	bx	lr
	return NULL;
    adc2:	2000      	movs	r0, #0
    adc4:	4770      	bx	lr
		_desc_len_check();
    adc6:	2000      	movs	r0, #0
    adc8:	4770      	bx	lr
    adca:	2000      	movs	r0, #0
    adcc:	e7f6      	b.n	adbc <usb_find_desc+0x28>

0000adce <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    adce:	4288      	cmp	r0, r1
    add0:	d216      	bcs.n	ae00 <usb_find_ep_desc+0x32>
	return desc[0];
    add2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    add4:	2b01      	cmp	r3, #1
    add6:	d915      	bls.n	ae04 <usb_find_ep_desc+0x36>
	return desc[1];
    add8:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    adda:	2a04      	cmp	r2, #4
    addc:	d014      	beq.n	ae08 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    adde:	2a05      	cmp	r2, #5
    ade0:	d00b      	beq.n	adfa <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    ade2:	4418      	add	r0, r3
	while (desc < eof) {
    ade4:	4281      	cmp	r1, r0
    ade6:	d909      	bls.n	adfc <usb_find_ep_desc+0x2e>
	return desc[0];
    ade8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    adea:	2b01      	cmp	r3, #1
    adec:	d90e      	bls.n	ae0c <usb_find_ep_desc+0x3e>
	return desc[1];
    adee:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    adf0:	2a04      	cmp	r2, #4
    adf2:	d00d      	beq.n	ae10 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    adf4:	2a05      	cmp	r2, #5
    adf6:	d1f4      	bne.n	ade2 <usb_find_ep_desc+0x14>
    adf8:	e00b      	b.n	ae12 <usb_find_ep_desc+0x44>
    adfa:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    adfc:	2000      	movs	r0, #0
    adfe:	4770      	bx	lr
    ae00:	2000      	movs	r0, #0
    ae02:	4770      	bx	lr
		_desc_len_check();
    ae04:	2000      	movs	r0, #0
    ae06:	4770      	bx	lr
	return NULL;
    ae08:	2000      	movs	r0, #0
    ae0a:	4770      	bx	lr
		_desc_len_check();
    ae0c:	2000      	movs	r0, #0
    ae0e:	4770      	bx	lr
	return NULL;
    ae10:	2000      	movs	r0, #0
}
    ae12:	4770      	bx	lr

0000ae14 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ae14:	b538      	push	{r3, r4, r5, lr}
    ae16:	460c      	mov	r4, r1
    ae18:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ae1a:	2202      	movs	r2, #2
    ae1c:	4b16      	ldr	r3, [pc, #88]	; (ae78 <usb_find_cfg_desc+0x64>)
    ae1e:	4798      	blx	r3
	if (!desc) {
    ae20:	4603      	mov	r3, r0
    ae22:	b1e8      	cbz	r0, ae60 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    ae24:	4284      	cmp	r4, r0
    ae26:	d91d      	bls.n	ae64 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    ae28:	7802      	ldrb	r2, [r0, #0]
    ae2a:	2a01      	cmp	r2, #1
    ae2c:	d91c      	bls.n	ae68 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    ae2e:	7842      	ldrb	r2, [r0, #1]
    ae30:	2a02      	cmp	r2, #2
    ae32:	d11b      	bne.n	ae6c <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    ae34:	7942      	ldrb	r2, [r0, #5]
    ae36:	42aa      	cmp	r2, r5
    ae38:	d012      	beq.n	ae60 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    ae3a:	78d9      	ldrb	r1, [r3, #3]
    ae3c:	789a      	ldrb	r2, [r3, #2]
    ae3e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ae42:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    ae46:	429c      	cmp	r4, r3
    ae48:	d909      	bls.n	ae5e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    ae4a:	781a      	ldrb	r2, [r3, #0]
    ae4c:	2a01      	cmp	r2, #1
    ae4e:	d90f      	bls.n	ae70 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    ae50:	785a      	ldrb	r2, [r3, #1]
    ae52:	2a02      	cmp	r2, #2
    ae54:	d10e      	bne.n	ae74 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    ae56:	795a      	ldrb	r2, [r3, #5]
    ae58:	42aa      	cmp	r2, r5
    ae5a:	d1ee      	bne.n	ae3a <usb_find_cfg_desc+0x26>
    ae5c:	e000      	b.n	ae60 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    ae5e:	2300      	movs	r3, #0
}
    ae60:	4618      	mov	r0, r3
    ae62:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    ae64:	2300      	movs	r3, #0
    ae66:	e7fb      	b.n	ae60 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ae68:	2300      	movs	r3, #0
    ae6a:	e7f9      	b.n	ae60 <usb_find_cfg_desc+0x4c>
	return NULL;
    ae6c:	2300      	movs	r3, #0
    ae6e:	e7f7      	b.n	ae60 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ae70:	2300      	movs	r3, #0
    ae72:	e7f5      	b.n	ae60 <usb_find_cfg_desc+0x4c>
	return NULL;
    ae74:	2300      	movs	r3, #0
    ae76:	e7f3      	b.n	ae60 <usb_find_cfg_desc+0x4c>
    ae78:	0000ad95 	.word	0x0000ad95

0000ae7c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ae7c:	4288      	cmp	r0, r1
    ae7e:	d217      	bcs.n	aeb0 <usb_find_str_desc+0x34>
{
    ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae84:	460d      	mov	r5, r1
    ae86:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    ae88:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ae8a:	f04f 0803 	mov.w	r8, #3
    ae8e:	4f0c      	ldr	r7, [pc, #48]	; (aec0 <usb_find_str_desc+0x44>)
    ae90:	4642      	mov	r2, r8
    ae92:	4629      	mov	r1, r5
    ae94:	47b8      	blx	r7
		if (desc) {
    ae96:	4603      	mov	r3, r0
    ae98:	b170      	cbz	r0, aeb8 <usb_find_str_desc+0x3c>
	return desc[0];
    ae9a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    ae9c:	2801      	cmp	r0, #1
    ae9e:	d90a      	bls.n	aeb6 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    aea0:	42a6      	cmp	r6, r4
    aea2:	d009      	beq.n	aeb8 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    aea4:	4418      	add	r0, r3
    aea6:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    aea8:	4285      	cmp	r5, r0
    aeaa:	d8f1      	bhi.n	ae90 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    aeac:	2300      	movs	r3, #0
    aeae:	e003      	b.n	aeb8 <usb_find_str_desc+0x3c>
    aeb0:	2300      	movs	r3, #0
}
    aeb2:	4618      	mov	r0, r3
    aeb4:	4770      	bx	lr
			_desc_len_check();
    aeb6:	2300      	movs	r3, #0
}
    aeb8:	4618      	mov	r0, r3
    aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aebe:	bf00      	nop
    aec0:	0000ad95 	.word	0x0000ad95

0000aec4 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    aec4:	4b3a      	ldr	r3, [pc, #232]	; (afb0 <hiddf_demo_sof_event+0xec>)
    aec6:	791b      	ldrb	r3, [r3, #4]
    aec8:	2b0a      	cmp	r3, #10
    aeca:	d803      	bhi.n	aed4 <hiddf_demo_sof_event+0x10>
    aecc:	3301      	adds	r3, #1
    aece:	4a38      	ldr	r2, [pc, #224]	; (afb0 <hiddf_demo_sof_event+0xec>)
    aed0:	7113      	strb	r3, [r2, #4]
    aed2:	4770      	bx	lr
{
    aed4:	b570      	push	{r4, r5, r6, lr}
    aed6:	b084      	sub	sp, #16
		interval = 0;
    aed8:	4b35      	ldr	r3, [pc, #212]	; (afb0 <hiddf_demo_sof_event+0xec>)
    aeda:	2200      	movs	r2, #0
    aedc:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    aede:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    aee0:	a801      	add	r0, sp, #4
    aee2:	4b34      	ldr	r3, [pc, #208]	; (afb4 <hiddf_demo_sof_event+0xf0>)
    aee4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    aee6:	096b      	lsrs	r3, r5, #5
    aee8:	4933      	ldr	r1, [pc, #204]	; (afb8 <hiddf_demo_sof_event+0xf4>)
    aeea:	01db      	lsls	r3, r3, #7
    aeec:	18ca      	adds	r2, r1, r3
    aeee:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    aef0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    aef2:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    aef4:	405c      	eors	r4, r3
    aef6:	400c      	ands	r4, r1
    aef8:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    aefa:	a801      	add	r0, sp, #4
    aefc:	4b2f      	ldr	r3, [pc, #188]	; (afbc <hiddf_demo_sof_event+0xf8>)
    aefe:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    af00:	f005 051f 	and.w	r5, r5, #31
    af04:	2301      	movs	r3, #1
    af06:	fa03 f505 	lsl.w	r5, r3, r5
    af0a:	4225      	tst	r5, r4
    af0c:	d040      	beq.n	af90 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    af0e:	4b28      	ldr	r3, [pc, #160]	; (afb0 <hiddf_demo_sof_event+0xec>)
    af10:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    af12:	a802      	add	r0, sp, #8
    af14:	4b27      	ldr	r3, [pc, #156]	; (afb4 <hiddf_demo_sof_event+0xf0>)
    af16:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    af18:	096b      	lsrs	r3, r5, #5
    af1a:	4927      	ldr	r1, [pc, #156]	; (afb8 <hiddf_demo_sof_event+0xf4>)
    af1c:	01db      	lsls	r3, r3, #7
    af1e:	18ca      	adds	r2, r1, r3
    af20:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    af22:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    af24:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    af26:	405c      	eors	r4, r3
    af28:	400c      	ands	r4, r1
    af2a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    af2c:	a802      	add	r0, sp, #8
    af2e:	4b23      	ldr	r3, [pc, #140]	; (afbc <hiddf_demo_sof_event+0xf8>)
    af30:	4798      	blx	r3
    af32:	f005 051f 	and.w	r5, r5, #31
    af36:	2301      	movs	r3, #1
    af38:	fa03 f505 	lsl.w	r5, r3, r5
    af3c:	4225      	tst	r5, r4
    af3e:	d02d      	beq.n	af9c <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    af40:	4d1b      	ldr	r5, [pc, #108]	; (afb0 <hiddf_demo_sof_event+0xec>)
    af42:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    af44:	a803      	add	r0, sp, #12
    af46:	4b1b      	ldr	r3, [pc, #108]	; (afb4 <hiddf_demo_sof_event+0xf0>)
    af48:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    af4a:	0973      	lsrs	r3, r6, #5
    af4c:	491a      	ldr	r1, [pc, #104]	; (afb8 <hiddf_demo_sof_event+0xf4>)
    af4e:	01db      	lsls	r3, r3, #7
    af50:	18ca      	adds	r2, r1, r3
    af52:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    af54:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    af56:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    af58:	405c      	eors	r4, r3
    af5a:	400c      	ands	r4, r1
    af5c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    af5e:	a803      	add	r0, sp, #12
    af60:	4b16      	ldr	r3, [pc, #88]	; (afbc <hiddf_demo_sof_event+0xf8>)
    af62:	4798      	blx	r3
    af64:	f006 061f 	and.w	r6, r6, #31
    af68:	2301      	movs	r3, #1
    af6a:	40b3      	lsls	r3, r6
    af6c:	401c      	ands	r4, r3
    af6e:	bf0c      	ite	eq
    af70:	2301      	moveq	r3, #1
    af72:	2300      	movne	r3, #0
    af74:	7d2a      	ldrb	r2, [r5, #20]
    af76:	429a      	cmp	r2, r3
    af78:	d008      	beq.n	af8c <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    af7a:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    af7c:	b19c      	cbz	r4, afa6 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    af7e:	2200      	movs	r2, #0
    af80:	4b0f      	ldr	r3, [pc, #60]	; (afc0 <hiddf_demo_sof_event+0xfc>)
    af82:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    af84:	2101      	movs	r1, #1
    af86:	480e      	ldr	r0, [pc, #56]	; (afc0 <hiddf_demo_sof_event+0xfc>)
    af88:	4b0e      	ldr	r3, [pc, #56]	; (afc4 <hiddf_demo_sof_event+0x100>)
    af8a:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    af8c:	b004      	add	sp, #16
    af8e:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    af90:	4619      	mov	r1, r3
    af92:	f06f 0004 	mvn.w	r0, #4
    af96:	4b0c      	ldr	r3, [pc, #48]	; (afc8 <hiddf_demo_sof_event+0x104>)
    af98:	4798      	blx	r3
    af9a:	e7b8      	b.n	af0e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    af9c:	4619      	mov	r1, r3
    af9e:	2005      	movs	r0, #5
    afa0:	4b09      	ldr	r3, [pc, #36]	; (afc8 <hiddf_demo_sof_event+0x104>)
    afa2:	4798      	blx	r3
    afa4:	e7cc      	b.n	af40 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    afa6:	2201      	movs	r2, #1
    afa8:	4b05      	ldr	r3, [pc, #20]	; (afc0 <hiddf_demo_sof_event+0xfc>)
    afaa:	709a      	strb	r2, [r3, #2]
    afac:	e7ea      	b.n	af84 <hiddf_demo_sof_event+0xc0>
    afae:	bf00      	nop
    afb0:	20000ec4 	.word	0x20000ec4
    afb4:	000043ad 	.word	0x000043ad
    afb8:	41008000 	.word	0x41008000
    afbc:	000043bb 	.word	0x000043bb
    afc0:	200003b8 	.word	0x200003b8
    afc4:	0000a111 	.word	0x0000a111
    afc8:	0000a3a5 	.word	0x0000a3a5

0000afcc <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    afcc:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    afce:	4805      	ldr	r0, [pc, #20]	; (afe4 <composite_device_init+0x18>)
    afd0:	4b05      	ldr	r3, [pc, #20]	; (afe8 <composite_device_init+0x1c>)
    afd2:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    afd4:	4b05      	ldr	r3, [pc, #20]	; (afec <composite_device_init+0x20>)
    afd6:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    afd8:	4b05      	ldr	r3, [pc, #20]	; (aff0 <composite_device_init+0x24>)
    afda:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    afdc:	4b05      	ldr	r3, [pc, #20]	; (aff4 <composite_device_init+0x28>)
    afde:	4798      	blx	r3
    afe0:	bd08      	pop	{r3, pc}
    afe2:	bf00      	nop
    afe4:	20000edc 	.word	0x20000edc
    afe8:	0000acc5 	.word	0x0000acc5
    afec:	00009e8d 	.word	0x00009e8d
    aff0:	0000a361 	.word	0x0000a361
    aff4:	0000a0cd 	.word	0x0000a0cd

0000aff8 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    aff8:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    affa:	4803      	ldr	r0, [pc, #12]	; (b008 <composite_device_start+0x10>)
    affc:	4b03      	ldr	r3, [pc, #12]	; (b00c <composite_device_start+0x14>)
    affe:	4798      	blx	r3
	usbdc_attach();
    b000:	4b03      	ldr	r3, [pc, #12]	; (b010 <composite_device_start+0x18>)
    b002:	4798      	blx	r3
    b004:	bd08      	pop	{r3, pc}
    b006:	bf00      	nop
    b008:	200003c4 	.word	0x200003c4
    b00c:	0000ad35 	.word	0x0000ad35
    b010:	0000ad69 	.word	0x0000ad69

0000b014 <usb_init>:
		}
	}
}

void usb_init(void)
{
    b014:	b508      	push	{r3, lr}

	composite_device_init();
    b016:	4b01      	ldr	r3, [pc, #4]	; (b01c <usb_init+0x8>)
    b018:	4798      	blx	r3
    b01a:	bd08      	pop	{r3, pc}
    b01c:	0000afcd 	.word	0x0000afcd

0000b020 <__aeabi_drsub>:
    b020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b024:	e002      	b.n	b02c <__adddf3>
    b026:	bf00      	nop

0000b028 <__aeabi_dsub>:
    b028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b02c <__adddf3>:
    b02c:	b530      	push	{r4, r5, lr}
    b02e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b032:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b036:	ea94 0f05 	teq	r4, r5
    b03a:	bf08      	it	eq
    b03c:	ea90 0f02 	teqeq	r0, r2
    b040:	bf1f      	itttt	ne
    b042:	ea54 0c00 	orrsne.w	ip, r4, r0
    b046:	ea55 0c02 	orrsne.w	ip, r5, r2
    b04a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b04e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b052:	f000 80e2 	beq.w	b21a <__adddf3+0x1ee>
    b056:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b05a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b05e:	bfb8      	it	lt
    b060:	426d      	neglt	r5, r5
    b062:	dd0c      	ble.n	b07e <__adddf3+0x52>
    b064:	442c      	add	r4, r5
    b066:	ea80 0202 	eor.w	r2, r0, r2
    b06a:	ea81 0303 	eor.w	r3, r1, r3
    b06e:	ea82 0000 	eor.w	r0, r2, r0
    b072:	ea83 0101 	eor.w	r1, r3, r1
    b076:	ea80 0202 	eor.w	r2, r0, r2
    b07a:	ea81 0303 	eor.w	r3, r1, r3
    b07e:	2d36      	cmp	r5, #54	; 0x36
    b080:	bf88      	it	hi
    b082:	bd30      	pophi	{r4, r5, pc}
    b084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b088:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b08c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b094:	d002      	beq.n	b09c <__adddf3+0x70>
    b096:	4240      	negs	r0, r0
    b098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b09c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b0a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b0a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b0a8:	d002      	beq.n	b0b0 <__adddf3+0x84>
    b0aa:	4252      	negs	r2, r2
    b0ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b0b0:	ea94 0f05 	teq	r4, r5
    b0b4:	f000 80a7 	beq.w	b206 <__adddf3+0x1da>
    b0b8:	f1a4 0401 	sub.w	r4, r4, #1
    b0bc:	f1d5 0e20 	rsbs	lr, r5, #32
    b0c0:	db0d      	blt.n	b0de <__adddf3+0xb2>
    b0c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    b0c6:	fa22 f205 	lsr.w	r2, r2, r5
    b0ca:	1880      	adds	r0, r0, r2
    b0cc:	f141 0100 	adc.w	r1, r1, #0
    b0d0:	fa03 f20e 	lsl.w	r2, r3, lr
    b0d4:	1880      	adds	r0, r0, r2
    b0d6:	fa43 f305 	asr.w	r3, r3, r5
    b0da:	4159      	adcs	r1, r3
    b0dc:	e00e      	b.n	b0fc <__adddf3+0xd0>
    b0de:	f1a5 0520 	sub.w	r5, r5, #32
    b0e2:	f10e 0e20 	add.w	lr, lr, #32
    b0e6:	2a01      	cmp	r2, #1
    b0e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    b0ec:	bf28      	it	cs
    b0ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    b0f2:	fa43 f305 	asr.w	r3, r3, r5
    b0f6:	18c0      	adds	r0, r0, r3
    b0f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b0fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b100:	d507      	bpl.n	b112 <__adddf3+0xe6>
    b102:	f04f 0e00 	mov.w	lr, #0
    b106:	f1dc 0c00 	rsbs	ip, ip, #0
    b10a:	eb7e 0000 	sbcs.w	r0, lr, r0
    b10e:	eb6e 0101 	sbc.w	r1, lr, r1
    b112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b116:	d31b      	bcc.n	b150 <__adddf3+0x124>
    b118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b11c:	d30c      	bcc.n	b138 <__adddf3+0x10c>
    b11e:	0849      	lsrs	r1, r1, #1
    b120:	ea5f 0030 	movs.w	r0, r0, rrx
    b124:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b128:	f104 0401 	add.w	r4, r4, #1
    b12c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b134:	f080 809a 	bcs.w	b26c <__adddf3+0x240>
    b138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b13c:	bf08      	it	eq
    b13e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b142:	f150 0000 	adcs.w	r0, r0, #0
    b146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b14a:	ea41 0105 	orr.w	r1, r1, r5
    b14e:	bd30      	pop	{r4, r5, pc}
    b150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b154:	4140      	adcs	r0, r0
    b156:	eb41 0101 	adc.w	r1, r1, r1
    b15a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b15e:	f1a4 0401 	sub.w	r4, r4, #1
    b162:	d1e9      	bne.n	b138 <__adddf3+0x10c>
    b164:	f091 0f00 	teq	r1, #0
    b168:	bf04      	itt	eq
    b16a:	4601      	moveq	r1, r0
    b16c:	2000      	moveq	r0, #0
    b16e:	fab1 f381 	clz	r3, r1
    b172:	bf08      	it	eq
    b174:	3320      	addeq	r3, #32
    b176:	f1a3 030b 	sub.w	r3, r3, #11
    b17a:	f1b3 0220 	subs.w	r2, r3, #32
    b17e:	da0c      	bge.n	b19a <__adddf3+0x16e>
    b180:	320c      	adds	r2, #12
    b182:	dd08      	ble.n	b196 <__adddf3+0x16a>
    b184:	f102 0c14 	add.w	ip, r2, #20
    b188:	f1c2 020c 	rsb	r2, r2, #12
    b18c:	fa01 f00c 	lsl.w	r0, r1, ip
    b190:	fa21 f102 	lsr.w	r1, r1, r2
    b194:	e00c      	b.n	b1b0 <__adddf3+0x184>
    b196:	f102 0214 	add.w	r2, r2, #20
    b19a:	bfd8      	it	le
    b19c:	f1c2 0c20 	rsble	ip, r2, #32
    b1a0:	fa01 f102 	lsl.w	r1, r1, r2
    b1a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    b1a8:	bfdc      	itt	le
    b1aa:	ea41 010c 	orrle.w	r1, r1, ip
    b1ae:	4090      	lslle	r0, r2
    b1b0:	1ae4      	subs	r4, r4, r3
    b1b2:	bfa2      	ittt	ge
    b1b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b1b8:	4329      	orrge	r1, r5
    b1ba:	bd30      	popge	{r4, r5, pc}
    b1bc:	ea6f 0404 	mvn.w	r4, r4
    b1c0:	3c1f      	subs	r4, #31
    b1c2:	da1c      	bge.n	b1fe <__adddf3+0x1d2>
    b1c4:	340c      	adds	r4, #12
    b1c6:	dc0e      	bgt.n	b1e6 <__adddf3+0x1ba>
    b1c8:	f104 0414 	add.w	r4, r4, #20
    b1cc:	f1c4 0220 	rsb	r2, r4, #32
    b1d0:	fa20 f004 	lsr.w	r0, r0, r4
    b1d4:	fa01 f302 	lsl.w	r3, r1, r2
    b1d8:	ea40 0003 	orr.w	r0, r0, r3
    b1dc:	fa21 f304 	lsr.w	r3, r1, r4
    b1e0:	ea45 0103 	orr.w	r1, r5, r3
    b1e4:	bd30      	pop	{r4, r5, pc}
    b1e6:	f1c4 040c 	rsb	r4, r4, #12
    b1ea:	f1c4 0220 	rsb	r2, r4, #32
    b1ee:	fa20 f002 	lsr.w	r0, r0, r2
    b1f2:	fa01 f304 	lsl.w	r3, r1, r4
    b1f6:	ea40 0003 	orr.w	r0, r0, r3
    b1fa:	4629      	mov	r1, r5
    b1fc:	bd30      	pop	{r4, r5, pc}
    b1fe:	fa21 f004 	lsr.w	r0, r1, r4
    b202:	4629      	mov	r1, r5
    b204:	bd30      	pop	{r4, r5, pc}
    b206:	f094 0f00 	teq	r4, #0
    b20a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b20e:	bf06      	itte	eq
    b210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b214:	3401      	addeq	r4, #1
    b216:	3d01      	subne	r5, #1
    b218:	e74e      	b.n	b0b8 <__adddf3+0x8c>
    b21a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b21e:	bf18      	it	ne
    b220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b224:	d029      	beq.n	b27a <__adddf3+0x24e>
    b226:	ea94 0f05 	teq	r4, r5
    b22a:	bf08      	it	eq
    b22c:	ea90 0f02 	teqeq	r0, r2
    b230:	d005      	beq.n	b23e <__adddf3+0x212>
    b232:	ea54 0c00 	orrs.w	ip, r4, r0
    b236:	bf04      	itt	eq
    b238:	4619      	moveq	r1, r3
    b23a:	4610      	moveq	r0, r2
    b23c:	bd30      	pop	{r4, r5, pc}
    b23e:	ea91 0f03 	teq	r1, r3
    b242:	bf1e      	ittt	ne
    b244:	2100      	movne	r1, #0
    b246:	2000      	movne	r0, #0
    b248:	bd30      	popne	{r4, r5, pc}
    b24a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b24e:	d105      	bne.n	b25c <__adddf3+0x230>
    b250:	0040      	lsls	r0, r0, #1
    b252:	4149      	adcs	r1, r1
    b254:	bf28      	it	cs
    b256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b25a:	bd30      	pop	{r4, r5, pc}
    b25c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b260:	bf3c      	itt	cc
    b262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b266:	bd30      	popcc	{r4, r5, pc}
    b268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b26c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b274:	f04f 0000 	mov.w	r0, #0
    b278:	bd30      	pop	{r4, r5, pc}
    b27a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b27e:	bf1a      	itte	ne
    b280:	4619      	movne	r1, r3
    b282:	4610      	movne	r0, r2
    b284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b288:	bf1c      	itt	ne
    b28a:	460b      	movne	r3, r1
    b28c:	4602      	movne	r2, r0
    b28e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b292:	bf06      	itte	eq
    b294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b298:	ea91 0f03 	teqeq	r1, r3
    b29c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b2a0:	bd30      	pop	{r4, r5, pc}
    b2a2:	bf00      	nop

0000b2a4 <__aeabi_ui2d>:
    b2a4:	f090 0f00 	teq	r0, #0
    b2a8:	bf04      	itt	eq
    b2aa:	2100      	moveq	r1, #0
    b2ac:	4770      	bxeq	lr
    b2ae:	b530      	push	{r4, r5, lr}
    b2b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b2b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b2b8:	f04f 0500 	mov.w	r5, #0
    b2bc:	f04f 0100 	mov.w	r1, #0
    b2c0:	e750      	b.n	b164 <__adddf3+0x138>
    b2c2:	bf00      	nop

0000b2c4 <__aeabi_i2d>:
    b2c4:	f090 0f00 	teq	r0, #0
    b2c8:	bf04      	itt	eq
    b2ca:	2100      	moveq	r1, #0
    b2cc:	4770      	bxeq	lr
    b2ce:	b530      	push	{r4, r5, lr}
    b2d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b2d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b2d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b2dc:	bf48      	it	mi
    b2de:	4240      	negmi	r0, r0
    b2e0:	f04f 0100 	mov.w	r1, #0
    b2e4:	e73e      	b.n	b164 <__adddf3+0x138>
    b2e6:	bf00      	nop

0000b2e8 <__aeabi_f2d>:
    b2e8:	0042      	lsls	r2, r0, #1
    b2ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b2ee:	ea4f 0131 	mov.w	r1, r1, rrx
    b2f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b2f6:	bf1f      	itttt	ne
    b2f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b2fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b304:	4770      	bxne	lr
    b306:	f092 0f00 	teq	r2, #0
    b30a:	bf14      	ite	ne
    b30c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b310:	4770      	bxeq	lr
    b312:	b530      	push	{r4, r5, lr}
    b314:	f44f 7460 	mov.w	r4, #896	; 0x380
    b318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b31c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b320:	e720      	b.n	b164 <__adddf3+0x138>
    b322:	bf00      	nop

0000b324 <__aeabi_ul2d>:
    b324:	ea50 0201 	orrs.w	r2, r0, r1
    b328:	bf08      	it	eq
    b32a:	4770      	bxeq	lr
    b32c:	b530      	push	{r4, r5, lr}
    b32e:	f04f 0500 	mov.w	r5, #0
    b332:	e00a      	b.n	b34a <__aeabi_l2d+0x16>

0000b334 <__aeabi_l2d>:
    b334:	ea50 0201 	orrs.w	r2, r0, r1
    b338:	bf08      	it	eq
    b33a:	4770      	bxeq	lr
    b33c:	b530      	push	{r4, r5, lr}
    b33e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b342:	d502      	bpl.n	b34a <__aeabi_l2d+0x16>
    b344:	4240      	negs	r0, r0
    b346:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b34a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b34e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b352:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b356:	f43f aedc 	beq.w	b112 <__adddf3+0xe6>
    b35a:	f04f 0203 	mov.w	r2, #3
    b35e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b362:	bf18      	it	ne
    b364:	3203      	addne	r2, #3
    b366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b36a:	bf18      	it	ne
    b36c:	3203      	addne	r2, #3
    b36e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b372:	f1c2 0320 	rsb	r3, r2, #32
    b376:	fa00 fc03 	lsl.w	ip, r0, r3
    b37a:	fa20 f002 	lsr.w	r0, r0, r2
    b37e:	fa01 fe03 	lsl.w	lr, r1, r3
    b382:	ea40 000e 	orr.w	r0, r0, lr
    b386:	fa21 f102 	lsr.w	r1, r1, r2
    b38a:	4414      	add	r4, r2
    b38c:	e6c1      	b.n	b112 <__adddf3+0xe6>
    b38e:	bf00      	nop

0000b390 <__aeabi_dmul>:
    b390:	b570      	push	{r4, r5, r6, lr}
    b392:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b396:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b39a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b39e:	bf1d      	ittte	ne
    b3a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b3a4:	ea94 0f0c 	teqne	r4, ip
    b3a8:	ea95 0f0c 	teqne	r5, ip
    b3ac:	f000 f8de 	bleq	b56c <__aeabi_dmul+0x1dc>
    b3b0:	442c      	add	r4, r5
    b3b2:	ea81 0603 	eor.w	r6, r1, r3
    b3b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b3ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b3be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b3c2:	bf18      	it	ne
    b3c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b3c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b3cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b3d0:	d038      	beq.n	b444 <__aeabi_dmul+0xb4>
    b3d2:	fba0 ce02 	umull	ip, lr, r0, r2
    b3d6:	f04f 0500 	mov.w	r5, #0
    b3da:	fbe1 e502 	umlal	lr, r5, r1, r2
    b3de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b3e2:	fbe0 e503 	umlal	lr, r5, r0, r3
    b3e6:	f04f 0600 	mov.w	r6, #0
    b3ea:	fbe1 5603 	umlal	r5, r6, r1, r3
    b3ee:	f09c 0f00 	teq	ip, #0
    b3f2:	bf18      	it	ne
    b3f4:	f04e 0e01 	orrne.w	lr, lr, #1
    b3f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b3fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b400:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b404:	d204      	bcs.n	b410 <__aeabi_dmul+0x80>
    b406:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b40a:	416d      	adcs	r5, r5
    b40c:	eb46 0606 	adc.w	r6, r6, r6
    b410:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b414:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b418:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b41c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b420:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b424:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b428:	bf88      	it	hi
    b42a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b42e:	d81e      	bhi.n	b46e <__aeabi_dmul+0xde>
    b430:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b434:	bf08      	it	eq
    b436:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b43a:	f150 0000 	adcs.w	r0, r0, #0
    b43e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b442:	bd70      	pop	{r4, r5, r6, pc}
    b444:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b448:	ea46 0101 	orr.w	r1, r6, r1
    b44c:	ea40 0002 	orr.w	r0, r0, r2
    b450:	ea81 0103 	eor.w	r1, r1, r3
    b454:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b458:	bfc2      	ittt	gt
    b45a:	ebd4 050c 	rsbsgt	r5, r4, ip
    b45e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b462:	bd70      	popgt	{r4, r5, r6, pc}
    b464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b468:	f04f 0e00 	mov.w	lr, #0
    b46c:	3c01      	subs	r4, #1
    b46e:	f300 80ab 	bgt.w	b5c8 <__aeabi_dmul+0x238>
    b472:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b476:	bfde      	ittt	le
    b478:	2000      	movle	r0, #0
    b47a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b47e:	bd70      	pople	{r4, r5, r6, pc}
    b480:	f1c4 0400 	rsb	r4, r4, #0
    b484:	3c20      	subs	r4, #32
    b486:	da35      	bge.n	b4f4 <__aeabi_dmul+0x164>
    b488:	340c      	adds	r4, #12
    b48a:	dc1b      	bgt.n	b4c4 <__aeabi_dmul+0x134>
    b48c:	f104 0414 	add.w	r4, r4, #20
    b490:	f1c4 0520 	rsb	r5, r4, #32
    b494:	fa00 f305 	lsl.w	r3, r0, r5
    b498:	fa20 f004 	lsr.w	r0, r0, r4
    b49c:	fa01 f205 	lsl.w	r2, r1, r5
    b4a0:	ea40 0002 	orr.w	r0, r0, r2
    b4a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b4a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b4ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b4b0:	fa21 f604 	lsr.w	r6, r1, r4
    b4b4:	eb42 0106 	adc.w	r1, r2, r6
    b4b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b4bc:	bf08      	it	eq
    b4be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
    b4c4:	f1c4 040c 	rsb	r4, r4, #12
    b4c8:	f1c4 0520 	rsb	r5, r4, #32
    b4cc:	fa00 f304 	lsl.w	r3, r0, r4
    b4d0:	fa20 f005 	lsr.w	r0, r0, r5
    b4d4:	fa01 f204 	lsl.w	r2, r1, r4
    b4d8:	ea40 0002 	orr.w	r0, r0, r2
    b4dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b4e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b4e4:	f141 0100 	adc.w	r1, r1, #0
    b4e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b4ec:	bf08      	it	eq
    b4ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b4f2:	bd70      	pop	{r4, r5, r6, pc}
    b4f4:	f1c4 0520 	rsb	r5, r4, #32
    b4f8:	fa00 f205 	lsl.w	r2, r0, r5
    b4fc:	ea4e 0e02 	orr.w	lr, lr, r2
    b500:	fa20 f304 	lsr.w	r3, r0, r4
    b504:	fa01 f205 	lsl.w	r2, r1, r5
    b508:	ea43 0302 	orr.w	r3, r3, r2
    b50c:	fa21 f004 	lsr.w	r0, r1, r4
    b510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b514:	fa21 f204 	lsr.w	r2, r1, r4
    b518:	ea20 0002 	bic.w	r0, r0, r2
    b51c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b524:	bf08      	it	eq
    b526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b52a:	bd70      	pop	{r4, r5, r6, pc}
    b52c:	f094 0f00 	teq	r4, #0
    b530:	d10f      	bne.n	b552 <__aeabi_dmul+0x1c2>
    b532:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b536:	0040      	lsls	r0, r0, #1
    b538:	eb41 0101 	adc.w	r1, r1, r1
    b53c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b540:	bf08      	it	eq
    b542:	3c01      	subeq	r4, #1
    b544:	d0f7      	beq.n	b536 <__aeabi_dmul+0x1a6>
    b546:	ea41 0106 	orr.w	r1, r1, r6
    b54a:	f095 0f00 	teq	r5, #0
    b54e:	bf18      	it	ne
    b550:	4770      	bxne	lr
    b552:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b556:	0052      	lsls	r2, r2, #1
    b558:	eb43 0303 	adc.w	r3, r3, r3
    b55c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b560:	bf08      	it	eq
    b562:	3d01      	subeq	r5, #1
    b564:	d0f7      	beq.n	b556 <__aeabi_dmul+0x1c6>
    b566:	ea43 0306 	orr.w	r3, r3, r6
    b56a:	4770      	bx	lr
    b56c:	ea94 0f0c 	teq	r4, ip
    b570:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b574:	bf18      	it	ne
    b576:	ea95 0f0c 	teqne	r5, ip
    b57a:	d00c      	beq.n	b596 <__aeabi_dmul+0x206>
    b57c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b580:	bf18      	it	ne
    b582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b586:	d1d1      	bne.n	b52c <__aeabi_dmul+0x19c>
    b588:	ea81 0103 	eor.w	r1, r1, r3
    b58c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b590:	f04f 0000 	mov.w	r0, #0
    b594:	bd70      	pop	{r4, r5, r6, pc}
    b596:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b59a:	bf06      	itte	eq
    b59c:	4610      	moveq	r0, r2
    b59e:	4619      	moveq	r1, r3
    b5a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b5a4:	d019      	beq.n	b5da <__aeabi_dmul+0x24a>
    b5a6:	ea94 0f0c 	teq	r4, ip
    b5aa:	d102      	bne.n	b5b2 <__aeabi_dmul+0x222>
    b5ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b5b0:	d113      	bne.n	b5da <__aeabi_dmul+0x24a>
    b5b2:	ea95 0f0c 	teq	r5, ip
    b5b6:	d105      	bne.n	b5c4 <__aeabi_dmul+0x234>
    b5b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b5bc:	bf1c      	itt	ne
    b5be:	4610      	movne	r0, r2
    b5c0:	4619      	movne	r1, r3
    b5c2:	d10a      	bne.n	b5da <__aeabi_dmul+0x24a>
    b5c4:	ea81 0103 	eor.w	r1, r1, r3
    b5c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b5cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b5d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b5d4:	f04f 0000 	mov.w	r0, #0
    b5d8:	bd70      	pop	{r4, r5, r6, pc}
    b5da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b5de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b5e2:	bd70      	pop	{r4, r5, r6, pc}

0000b5e4 <__aeabi_ddiv>:
    b5e4:	b570      	push	{r4, r5, r6, lr}
    b5e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b5ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b5ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b5f2:	bf1d      	ittte	ne
    b5f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b5f8:	ea94 0f0c 	teqne	r4, ip
    b5fc:	ea95 0f0c 	teqne	r5, ip
    b600:	f000 f8a7 	bleq	b752 <__aeabi_ddiv+0x16e>
    b604:	eba4 0405 	sub.w	r4, r4, r5
    b608:	ea81 0e03 	eor.w	lr, r1, r3
    b60c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b610:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b614:	f000 8088 	beq.w	b728 <__aeabi_ddiv+0x144>
    b618:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b61c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b620:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b624:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b628:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b62c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b630:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b634:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b638:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b63c:	429d      	cmp	r5, r3
    b63e:	bf08      	it	eq
    b640:	4296      	cmpeq	r6, r2
    b642:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b646:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b64a:	d202      	bcs.n	b652 <__aeabi_ddiv+0x6e>
    b64c:	085b      	lsrs	r3, r3, #1
    b64e:	ea4f 0232 	mov.w	r2, r2, rrx
    b652:	1ab6      	subs	r6, r6, r2
    b654:	eb65 0503 	sbc.w	r5, r5, r3
    b658:	085b      	lsrs	r3, r3, #1
    b65a:	ea4f 0232 	mov.w	r2, r2, rrx
    b65e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b662:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b666:	ebb6 0e02 	subs.w	lr, r6, r2
    b66a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b66e:	bf22      	ittt	cs
    b670:	1ab6      	subcs	r6, r6, r2
    b672:	4675      	movcs	r5, lr
    b674:	ea40 000c 	orrcs.w	r0, r0, ip
    b678:	085b      	lsrs	r3, r3, #1
    b67a:	ea4f 0232 	mov.w	r2, r2, rrx
    b67e:	ebb6 0e02 	subs.w	lr, r6, r2
    b682:	eb75 0e03 	sbcs.w	lr, r5, r3
    b686:	bf22      	ittt	cs
    b688:	1ab6      	subcs	r6, r6, r2
    b68a:	4675      	movcs	r5, lr
    b68c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b690:	085b      	lsrs	r3, r3, #1
    b692:	ea4f 0232 	mov.w	r2, r2, rrx
    b696:	ebb6 0e02 	subs.w	lr, r6, r2
    b69a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b69e:	bf22      	ittt	cs
    b6a0:	1ab6      	subcs	r6, r6, r2
    b6a2:	4675      	movcs	r5, lr
    b6a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b6a8:	085b      	lsrs	r3, r3, #1
    b6aa:	ea4f 0232 	mov.w	r2, r2, rrx
    b6ae:	ebb6 0e02 	subs.w	lr, r6, r2
    b6b2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b6b6:	bf22      	ittt	cs
    b6b8:	1ab6      	subcs	r6, r6, r2
    b6ba:	4675      	movcs	r5, lr
    b6bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b6c0:	ea55 0e06 	orrs.w	lr, r5, r6
    b6c4:	d018      	beq.n	b6f8 <__aeabi_ddiv+0x114>
    b6c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b6ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b6ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b6d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b6d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b6da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b6de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b6e2:	d1c0      	bne.n	b666 <__aeabi_ddiv+0x82>
    b6e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b6e8:	d10b      	bne.n	b702 <__aeabi_ddiv+0x11e>
    b6ea:	ea41 0100 	orr.w	r1, r1, r0
    b6ee:	f04f 0000 	mov.w	r0, #0
    b6f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b6f6:	e7b6      	b.n	b666 <__aeabi_ddiv+0x82>
    b6f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b6fc:	bf04      	itt	eq
    b6fe:	4301      	orreq	r1, r0
    b700:	2000      	moveq	r0, #0
    b702:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b706:	bf88      	it	hi
    b708:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b70c:	f63f aeaf 	bhi.w	b46e <__aeabi_dmul+0xde>
    b710:	ebb5 0c03 	subs.w	ip, r5, r3
    b714:	bf04      	itt	eq
    b716:	ebb6 0c02 	subseq.w	ip, r6, r2
    b71a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b71e:	f150 0000 	adcs.w	r0, r0, #0
    b722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b726:	bd70      	pop	{r4, r5, r6, pc}
    b728:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b72c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b730:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b734:	bfc2      	ittt	gt
    b736:	ebd4 050c 	rsbsgt	r5, r4, ip
    b73a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b73e:	bd70      	popgt	{r4, r5, r6, pc}
    b740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b744:	f04f 0e00 	mov.w	lr, #0
    b748:	3c01      	subs	r4, #1
    b74a:	e690      	b.n	b46e <__aeabi_dmul+0xde>
    b74c:	ea45 0e06 	orr.w	lr, r5, r6
    b750:	e68d      	b.n	b46e <__aeabi_dmul+0xde>
    b752:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b756:	ea94 0f0c 	teq	r4, ip
    b75a:	bf08      	it	eq
    b75c:	ea95 0f0c 	teqeq	r5, ip
    b760:	f43f af3b 	beq.w	b5da <__aeabi_dmul+0x24a>
    b764:	ea94 0f0c 	teq	r4, ip
    b768:	d10a      	bne.n	b780 <__aeabi_ddiv+0x19c>
    b76a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b76e:	f47f af34 	bne.w	b5da <__aeabi_dmul+0x24a>
    b772:	ea95 0f0c 	teq	r5, ip
    b776:	f47f af25 	bne.w	b5c4 <__aeabi_dmul+0x234>
    b77a:	4610      	mov	r0, r2
    b77c:	4619      	mov	r1, r3
    b77e:	e72c      	b.n	b5da <__aeabi_dmul+0x24a>
    b780:	ea95 0f0c 	teq	r5, ip
    b784:	d106      	bne.n	b794 <__aeabi_ddiv+0x1b0>
    b786:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b78a:	f43f aefd 	beq.w	b588 <__aeabi_dmul+0x1f8>
    b78e:	4610      	mov	r0, r2
    b790:	4619      	mov	r1, r3
    b792:	e722      	b.n	b5da <__aeabi_dmul+0x24a>
    b794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b798:	bf18      	it	ne
    b79a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b79e:	f47f aec5 	bne.w	b52c <__aeabi_dmul+0x19c>
    b7a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b7a6:	f47f af0d 	bne.w	b5c4 <__aeabi_dmul+0x234>
    b7aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b7ae:	f47f aeeb 	bne.w	b588 <__aeabi_dmul+0x1f8>
    b7b2:	e712      	b.n	b5da <__aeabi_dmul+0x24a>

0000b7b4 <__aeabi_d2uiz>:
    b7b4:	004a      	lsls	r2, r1, #1
    b7b6:	d211      	bcs.n	b7dc <__aeabi_d2uiz+0x28>
    b7b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b7bc:	d211      	bcs.n	b7e2 <__aeabi_d2uiz+0x2e>
    b7be:	d50d      	bpl.n	b7dc <__aeabi_d2uiz+0x28>
    b7c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b7c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b7c8:	d40e      	bmi.n	b7e8 <__aeabi_d2uiz+0x34>
    b7ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b7ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b7d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b7d6:	fa23 f002 	lsr.w	r0, r3, r2
    b7da:	4770      	bx	lr
    b7dc:	f04f 0000 	mov.w	r0, #0
    b7e0:	4770      	bx	lr
    b7e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b7e6:	d102      	bne.n	b7ee <__aeabi_d2uiz+0x3a>
    b7e8:	f04f 30ff 	mov.w	r0, #4294967295
    b7ec:	4770      	bx	lr
    b7ee:	f04f 0000 	mov.w	r0, #0
    b7f2:	4770      	bx	lr

0000b7f4 <__libc_init_array>:
    b7f4:	b570      	push	{r4, r5, r6, lr}
    b7f6:	4e0d      	ldr	r6, [pc, #52]	; (b82c <__libc_init_array+0x38>)
    b7f8:	4c0d      	ldr	r4, [pc, #52]	; (b830 <__libc_init_array+0x3c>)
    b7fa:	1ba4      	subs	r4, r4, r6
    b7fc:	10a4      	asrs	r4, r4, #2
    b7fe:	2500      	movs	r5, #0
    b800:	42a5      	cmp	r5, r4
    b802:	d109      	bne.n	b818 <__libc_init_array+0x24>
    b804:	4e0b      	ldr	r6, [pc, #44]	; (b834 <__libc_init_array+0x40>)
    b806:	4c0c      	ldr	r4, [pc, #48]	; (b838 <__libc_init_array+0x44>)
    b808:	f001 fdb0 	bl	d36c <_init>
    b80c:	1ba4      	subs	r4, r4, r6
    b80e:	10a4      	asrs	r4, r4, #2
    b810:	2500      	movs	r5, #0
    b812:	42a5      	cmp	r5, r4
    b814:	d105      	bne.n	b822 <__libc_init_array+0x2e>
    b816:	bd70      	pop	{r4, r5, r6, pc}
    b818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b81c:	4798      	blx	r3
    b81e:	3501      	adds	r5, #1
    b820:	e7ee      	b.n	b800 <__libc_init_array+0xc>
    b822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b826:	4798      	blx	r3
    b828:	3501      	adds	r5, #1
    b82a:	e7f2      	b.n	b812 <__libc_init_array+0x1e>
    b82c:	0000d378 	.word	0x0000d378
    b830:	0000d378 	.word	0x0000d378
    b834:	0000d378 	.word	0x0000d378
    b838:	0000d37c 	.word	0x0000d37c

0000b83c <malloc>:
    b83c:	4b02      	ldr	r3, [pc, #8]	; (b848 <malloc+0xc>)
    b83e:	4601      	mov	r1, r0
    b840:	6818      	ldr	r0, [r3, #0]
    b842:	f000 b865 	b.w	b910 <_malloc_r>
    b846:	bf00      	nop
    b848:	20000558 	.word	0x20000558

0000b84c <memcpy>:
    b84c:	b510      	push	{r4, lr}
    b84e:	1e43      	subs	r3, r0, #1
    b850:	440a      	add	r2, r1
    b852:	4291      	cmp	r1, r2
    b854:	d100      	bne.n	b858 <memcpy+0xc>
    b856:	bd10      	pop	{r4, pc}
    b858:	f811 4b01 	ldrb.w	r4, [r1], #1
    b85c:	f803 4f01 	strb.w	r4, [r3, #1]!
    b860:	e7f7      	b.n	b852 <memcpy+0x6>

0000b862 <memset>:
    b862:	4402      	add	r2, r0
    b864:	4603      	mov	r3, r0
    b866:	4293      	cmp	r3, r2
    b868:	d100      	bne.n	b86c <memset+0xa>
    b86a:	4770      	bx	lr
    b86c:	f803 1b01 	strb.w	r1, [r3], #1
    b870:	e7f9      	b.n	b866 <memset+0x4>
	...

0000b874 <_free_r>:
    b874:	b538      	push	{r3, r4, r5, lr}
    b876:	4605      	mov	r5, r0
    b878:	2900      	cmp	r1, #0
    b87a:	d045      	beq.n	b908 <_free_r+0x94>
    b87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b880:	1f0c      	subs	r4, r1, #4
    b882:	2b00      	cmp	r3, #0
    b884:	bfb8      	it	lt
    b886:	18e4      	addlt	r4, r4, r3
    b888:	f000 fc96 	bl	c1b8 <__malloc_lock>
    b88c:	4a1f      	ldr	r2, [pc, #124]	; (b90c <_free_r+0x98>)
    b88e:	6813      	ldr	r3, [r2, #0]
    b890:	4610      	mov	r0, r2
    b892:	b933      	cbnz	r3, b8a2 <_free_r+0x2e>
    b894:	6063      	str	r3, [r4, #4]
    b896:	6014      	str	r4, [r2, #0]
    b898:	4628      	mov	r0, r5
    b89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b89e:	f000 bc8c 	b.w	c1ba <__malloc_unlock>
    b8a2:	42a3      	cmp	r3, r4
    b8a4:	d90c      	bls.n	b8c0 <_free_r+0x4c>
    b8a6:	6821      	ldr	r1, [r4, #0]
    b8a8:	1862      	adds	r2, r4, r1
    b8aa:	4293      	cmp	r3, r2
    b8ac:	bf04      	itt	eq
    b8ae:	681a      	ldreq	r2, [r3, #0]
    b8b0:	685b      	ldreq	r3, [r3, #4]
    b8b2:	6063      	str	r3, [r4, #4]
    b8b4:	bf04      	itt	eq
    b8b6:	1852      	addeq	r2, r2, r1
    b8b8:	6022      	streq	r2, [r4, #0]
    b8ba:	6004      	str	r4, [r0, #0]
    b8bc:	e7ec      	b.n	b898 <_free_r+0x24>
    b8be:	4613      	mov	r3, r2
    b8c0:	685a      	ldr	r2, [r3, #4]
    b8c2:	b10a      	cbz	r2, b8c8 <_free_r+0x54>
    b8c4:	42a2      	cmp	r2, r4
    b8c6:	d9fa      	bls.n	b8be <_free_r+0x4a>
    b8c8:	6819      	ldr	r1, [r3, #0]
    b8ca:	1858      	adds	r0, r3, r1
    b8cc:	42a0      	cmp	r0, r4
    b8ce:	d10b      	bne.n	b8e8 <_free_r+0x74>
    b8d0:	6820      	ldr	r0, [r4, #0]
    b8d2:	4401      	add	r1, r0
    b8d4:	1858      	adds	r0, r3, r1
    b8d6:	4282      	cmp	r2, r0
    b8d8:	6019      	str	r1, [r3, #0]
    b8da:	d1dd      	bne.n	b898 <_free_r+0x24>
    b8dc:	6810      	ldr	r0, [r2, #0]
    b8de:	6852      	ldr	r2, [r2, #4]
    b8e0:	605a      	str	r2, [r3, #4]
    b8e2:	4401      	add	r1, r0
    b8e4:	6019      	str	r1, [r3, #0]
    b8e6:	e7d7      	b.n	b898 <_free_r+0x24>
    b8e8:	d902      	bls.n	b8f0 <_free_r+0x7c>
    b8ea:	230c      	movs	r3, #12
    b8ec:	602b      	str	r3, [r5, #0]
    b8ee:	e7d3      	b.n	b898 <_free_r+0x24>
    b8f0:	6820      	ldr	r0, [r4, #0]
    b8f2:	1821      	adds	r1, r4, r0
    b8f4:	428a      	cmp	r2, r1
    b8f6:	bf04      	itt	eq
    b8f8:	6811      	ldreq	r1, [r2, #0]
    b8fa:	6852      	ldreq	r2, [r2, #4]
    b8fc:	6062      	str	r2, [r4, #4]
    b8fe:	bf04      	itt	eq
    b900:	1809      	addeq	r1, r1, r0
    b902:	6021      	streq	r1, [r4, #0]
    b904:	605c      	str	r4, [r3, #4]
    b906:	e7c7      	b.n	b898 <_free_r+0x24>
    b908:	bd38      	pop	{r3, r4, r5, pc}
    b90a:	bf00      	nop
    b90c:	20000f1c 	.word	0x20000f1c

0000b910 <_malloc_r>:
    b910:	b570      	push	{r4, r5, r6, lr}
    b912:	1ccd      	adds	r5, r1, #3
    b914:	f025 0503 	bic.w	r5, r5, #3
    b918:	3508      	adds	r5, #8
    b91a:	2d0c      	cmp	r5, #12
    b91c:	bf38      	it	cc
    b91e:	250c      	movcc	r5, #12
    b920:	2d00      	cmp	r5, #0
    b922:	4606      	mov	r6, r0
    b924:	db01      	blt.n	b92a <_malloc_r+0x1a>
    b926:	42a9      	cmp	r1, r5
    b928:	d903      	bls.n	b932 <_malloc_r+0x22>
    b92a:	230c      	movs	r3, #12
    b92c:	6033      	str	r3, [r6, #0]
    b92e:	2000      	movs	r0, #0
    b930:	bd70      	pop	{r4, r5, r6, pc}
    b932:	f000 fc41 	bl	c1b8 <__malloc_lock>
    b936:	4a23      	ldr	r2, [pc, #140]	; (b9c4 <_malloc_r+0xb4>)
    b938:	6814      	ldr	r4, [r2, #0]
    b93a:	4621      	mov	r1, r4
    b93c:	b991      	cbnz	r1, b964 <_malloc_r+0x54>
    b93e:	4c22      	ldr	r4, [pc, #136]	; (b9c8 <_malloc_r+0xb8>)
    b940:	6823      	ldr	r3, [r4, #0]
    b942:	b91b      	cbnz	r3, b94c <_malloc_r+0x3c>
    b944:	4630      	mov	r0, r6
    b946:	f000 f8a5 	bl	ba94 <_sbrk_r>
    b94a:	6020      	str	r0, [r4, #0]
    b94c:	4629      	mov	r1, r5
    b94e:	4630      	mov	r0, r6
    b950:	f000 f8a0 	bl	ba94 <_sbrk_r>
    b954:	1c43      	adds	r3, r0, #1
    b956:	d126      	bne.n	b9a6 <_malloc_r+0x96>
    b958:	230c      	movs	r3, #12
    b95a:	6033      	str	r3, [r6, #0]
    b95c:	4630      	mov	r0, r6
    b95e:	f000 fc2c 	bl	c1ba <__malloc_unlock>
    b962:	e7e4      	b.n	b92e <_malloc_r+0x1e>
    b964:	680b      	ldr	r3, [r1, #0]
    b966:	1b5b      	subs	r3, r3, r5
    b968:	d41a      	bmi.n	b9a0 <_malloc_r+0x90>
    b96a:	2b0b      	cmp	r3, #11
    b96c:	d90f      	bls.n	b98e <_malloc_r+0x7e>
    b96e:	600b      	str	r3, [r1, #0]
    b970:	50cd      	str	r5, [r1, r3]
    b972:	18cc      	adds	r4, r1, r3
    b974:	4630      	mov	r0, r6
    b976:	f000 fc20 	bl	c1ba <__malloc_unlock>
    b97a:	f104 000b 	add.w	r0, r4, #11
    b97e:	1d23      	adds	r3, r4, #4
    b980:	f020 0007 	bic.w	r0, r0, #7
    b984:	1ac3      	subs	r3, r0, r3
    b986:	d01b      	beq.n	b9c0 <_malloc_r+0xb0>
    b988:	425a      	negs	r2, r3
    b98a:	50e2      	str	r2, [r4, r3]
    b98c:	bd70      	pop	{r4, r5, r6, pc}
    b98e:	428c      	cmp	r4, r1
    b990:	bf0d      	iteet	eq
    b992:	6863      	ldreq	r3, [r4, #4]
    b994:	684b      	ldrne	r3, [r1, #4]
    b996:	6063      	strne	r3, [r4, #4]
    b998:	6013      	streq	r3, [r2, #0]
    b99a:	bf18      	it	ne
    b99c:	460c      	movne	r4, r1
    b99e:	e7e9      	b.n	b974 <_malloc_r+0x64>
    b9a0:	460c      	mov	r4, r1
    b9a2:	6849      	ldr	r1, [r1, #4]
    b9a4:	e7ca      	b.n	b93c <_malloc_r+0x2c>
    b9a6:	1cc4      	adds	r4, r0, #3
    b9a8:	f024 0403 	bic.w	r4, r4, #3
    b9ac:	42a0      	cmp	r0, r4
    b9ae:	d005      	beq.n	b9bc <_malloc_r+0xac>
    b9b0:	1a21      	subs	r1, r4, r0
    b9b2:	4630      	mov	r0, r6
    b9b4:	f000 f86e 	bl	ba94 <_sbrk_r>
    b9b8:	3001      	adds	r0, #1
    b9ba:	d0cd      	beq.n	b958 <_malloc_r+0x48>
    b9bc:	6025      	str	r5, [r4, #0]
    b9be:	e7d9      	b.n	b974 <_malloc_r+0x64>
    b9c0:	bd70      	pop	{r4, r5, r6, pc}
    b9c2:	bf00      	nop
    b9c4:	20000f1c 	.word	0x20000f1c
    b9c8:	20000f20 	.word	0x20000f20

0000b9cc <_puts_r>:
    b9cc:	b570      	push	{r4, r5, r6, lr}
    b9ce:	460e      	mov	r6, r1
    b9d0:	4605      	mov	r5, r0
    b9d2:	b118      	cbz	r0, b9dc <_puts_r+0x10>
    b9d4:	6983      	ldr	r3, [r0, #24]
    b9d6:	b90b      	cbnz	r3, b9dc <_puts_r+0x10>
    b9d8:	f000 fb00 	bl	bfdc <__sinit>
    b9dc:	69ab      	ldr	r3, [r5, #24]
    b9de:	68ac      	ldr	r4, [r5, #8]
    b9e0:	b913      	cbnz	r3, b9e8 <_puts_r+0x1c>
    b9e2:	4628      	mov	r0, r5
    b9e4:	f000 fafa 	bl	bfdc <__sinit>
    b9e8:	4b23      	ldr	r3, [pc, #140]	; (ba78 <_puts_r+0xac>)
    b9ea:	429c      	cmp	r4, r3
    b9ec:	d117      	bne.n	ba1e <_puts_r+0x52>
    b9ee:	686c      	ldr	r4, [r5, #4]
    b9f0:	89a3      	ldrh	r3, [r4, #12]
    b9f2:	071b      	lsls	r3, r3, #28
    b9f4:	d51d      	bpl.n	ba32 <_puts_r+0x66>
    b9f6:	6923      	ldr	r3, [r4, #16]
    b9f8:	b1db      	cbz	r3, ba32 <_puts_r+0x66>
    b9fa:	3e01      	subs	r6, #1
    b9fc:	68a3      	ldr	r3, [r4, #8]
    b9fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    ba02:	3b01      	subs	r3, #1
    ba04:	60a3      	str	r3, [r4, #8]
    ba06:	b9e9      	cbnz	r1, ba44 <_puts_r+0x78>
    ba08:	2b00      	cmp	r3, #0
    ba0a:	da2e      	bge.n	ba6a <_puts_r+0x9e>
    ba0c:	4622      	mov	r2, r4
    ba0e:	210a      	movs	r1, #10
    ba10:	4628      	mov	r0, r5
    ba12:	f000 f931 	bl	bc78 <__swbuf_r>
    ba16:	3001      	adds	r0, #1
    ba18:	d011      	beq.n	ba3e <_puts_r+0x72>
    ba1a:	200a      	movs	r0, #10
    ba1c:	bd70      	pop	{r4, r5, r6, pc}
    ba1e:	4b17      	ldr	r3, [pc, #92]	; (ba7c <_puts_r+0xb0>)
    ba20:	429c      	cmp	r4, r3
    ba22:	d101      	bne.n	ba28 <_puts_r+0x5c>
    ba24:	68ac      	ldr	r4, [r5, #8]
    ba26:	e7e3      	b.n	b9f0 <_puts_r+0x24>
    ba28:	4b15      	ldr	r3, [pc, #84]	; (ba80 <_puts_r+0xb4>)
    ba2a:	429c      	cmp	r4, r3
    ba2c:	bf08      	it	eq
    ba2e:	68ec      	ldreq	r4, [r5, #12]
    ba30:	e7de      	b.n	b9f0 <_puts_r+0x24>
    ba32:	4621      	mov	r1, r4
    ba34:	4628      	mov	r0, r5
    ba36:	f000 f971 	bl	bd1c <__swsetup_r>
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d0dd      	beq.n	b9fa <_puts_r+0x2e>
    ba3e:	f04f 30ff 	mov.w	r0, #4294967295
    ba42:	bd70      	pop	{r4, r5, r6, pc}
    ba44:	2b00      	cmp	r3, #0
    ba46:	da04      	bge.n	ba52 <_puts_r+0x86>
    ba48:	69a2      	ldr	r2, [r4, #24]
    ba4a:	4293      	cmp	r3, r2
    ba4c:	db06      	blt.n	ba5c <_puts_r+0x90>
    ba4e:	290a      	cmp	r1, #10
    ba50:	d004      	beq.n	ba5c <_puts_r+0x90>
    ba52:	6823      	ldr	r3, [r4, #0]
    ba54:	1c5a      	adds	r2, r3, #1
    ba56:	6022      	str	r2, [r4, #0]
    ba58:	7019      	strb	r1, [r3, #0]
    ba5a:	e7cf      	b.n	b9fc <_puts_r+0x30>
    ba5c:	4622      	mov	r2, r4
    ba5e:	4628      	mov	r0, r5
    ba60:	f000 f90a 	bl	bc78 <__swbuf_r>
    ba64:	3001      	adds	r0, #1
    ba66:	d1c9      	bne.n	b9fc <_puts_r+0x30>
    ba68:	e7e9      	b.n	ba3e <_puts_r+0x72>
    ba6a:	6823      	ldr	r3, [r4, #0]
    ba6c:	200a      	movs	r0, #10
    ba6e:	1c5a      	adds	r2, r3, #1
    ba70:	6022      	str	r2, [r4, #0]
    ba72:	7018      	strb	r0, [r3, #0]
    ba74:	bd70      	pop	{r4, r5, r6, pc}
    ba76:	bf00      	nop
    ba78:	0000d2f8 	.word	0x0000d2f8
    ba7c:	0000d318 	.word	0x0000d318
    ba80:	0000d2d8 	.word	0x0000d2d8

0000ba84 <puts>:
    ba84:	4b02      	ldr	r3, [pc, #8]	; (ba90 <puts+0xc>)
    ba86:	4601      	mov	r1, r0
    ba88:	6818      	ldr	r0, [r3, #0]
    ba8a:	f7ff bf9f 	b.w	b9cc <_puts_r>
    ba8e:	bf00      	nop
    ba90:	20000558 	.word	0x20000558

0000ba94 <_sbrk_r>:
    ba94:	b538      	push	{r3, r4, r5, lr}
    ba96:	4c06      	ldr	r4, [pc, #24]	; (bab0 <_sbrk_r+0x1c>)
    ba98:	2300      	movs	r3, #0
    ba9a:	4605      	mov	r5, r0
    ba9c:	4608      	mov	r0, r1
    ba9e:	6023      	str	r3, [r4, #0]
    baa0:	f7f9 ff20 	bl	58e4 <_sbrk>
    baa4:	1c43      	adds	r3, r0, #1
    baa6:	d102      	bne.n	baae <_sbrk_r+0x1a>
    baa8:	6823      	ldr	r3, [r4, #0]
    baaa:	b103      	cbz	r3, baae <_sbrk_r+0x1a>
    baac:	602b      	str	r3, [r5, #0]
    baae:	bd38      	pop	{r3, r4, r5, pc}
    bab0:	20003d5c 	.word	0x20003d5c

0000bab4 <setbuf>:
    bab4:	2900      	cmp	r1, #0
    bab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    baba:	bf0c      	ite	eq
    babc:	2202      	moveq	r2, #2
    babe:	2200      	movne	r2, #0
    bac0:	f000 b800 	b.w	bac4 <setvbuf>

0000bac4 <setvbuf>:
    bac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bac8:	461d      	mov	r5, r3
    baca:	4b51      	ldr	r3, [pc, #324]	; (bc10 <setvbuf+0x14c>)
    bacc:	681e      	ldr	r6, [r3, #0]
    bace:	4604      	mov	r4, r0
    bad0:	460f      	mov	r7, r1
    bad2:	4690      	mov	r8, r2
    bad4:	b126      	cbz	r6, bae0 <setvbuf+0x1c>
    bad6:	69b3      	ldr	r3, [r6, #24]
    bad8:	b913      	cbnz	r3, bae0 <setvbuf+0x1c>
    bada:	4630      	mov	r0, r6
    badc:	f000 fa7e 	bl	bfdc <__sinit>
    bae0:	4b4c      	ldr	r3, [pc, #304]	; (bc14 <setvbuf+0x150>)
    bae2:	429c      	cmp	r4, r3
    bae4:	d152      	bne.n	bb8c <setvbuf+0xc8>
    bae6:	6874      	ldr	r4, [r6, #4]
    bae8:	f1b8 0f02 	cmp.w	r8, #2
    baec:	d006      	beq.n	bafc <setvbuf+0x38>
    baee:	f1b8 0f01 	cmp.w	r8, #1
    baf2:	f200 8089 	bhi.w	bc08 <setvbuf+0x144>
    baf6:	2d00      	cmp	r5, #0
    baf8:	f2c0 8086 	blt.w	bc08 <setvbuf+0x144>
    bafc:	4621      	mov	r1, r4
    bafe:	4630      	mov	r0, r6
    bb00:	f000 fa02 	bl	bf08 <_fflush_r>
    bb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bb06:	b141      	cbz	r1, bb1a <setvbuf+0x56>
    bb08:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bb0c:	4299      	cmp	r1, r3
    bb0e:	d002      	beq.n	bb16 <setvbuf+0x52>
    bb10:	4630      	mov	r0, r6
    bb12:	f7ff feaf 	bl	b874 <_free_r>
    bb16:	2300      	movs	r3, #0
    bb18:	6363      	str	r3, [r4, #52]	; 0x34
    bb1a:	2300      	movs	r3, #0
    bb1c:	61a3      	str	r3, [r4, #24]
    bb1e:	6063      	str	r3, [r4, #4]
    bb20:	89a3      	ldrh	r3, [r4, #12]
    bb22:	061b      	lsls	r3, r3, #24
    bb24:	d503      	bpl.n	bb2e <setvbuf+0x6a>
    bb26:	6921      	ldr	r1, [r4, #16]
    bb28:	4630      	mov	r0, r6
    bb2a:	f7ff fea3 	bl	b874 <_free_r>
    bb2e:	89a3      	ldrh	r3, [r4, #12]
    bb30:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    bb34:	f023 0303 	bic.w	r3, r3, #3
    bb38:	f1b8 0f02 	cmp.w	r8, #2
    bb3c:	81a3      	strh	r3, [r4, #12]
    bb3e:	d05d      	beq.n	bbfc <setvbuf+0x138>
    bb40:	ab01      	add	r3, sp, #4
    bb42:	466a      	mov	r2, sp
    bb44:	4621      	mov	r1, r4
    bb46:	4630      	mov	r0, r6
    bb48:	f000 fad2 	bl	c0f0 <__swhatbuf_r>
    bb4c:	89a3      	ldrh	r3, [r4, #12]
    bb4e:	4318      	orrs	r0, r3
    bb50:	81a0      	strh	r0, [r4, #12]
    bb52:	bb2d      	cbnz	r5, bba0 <setvbuf+0xdc>
    bb54:	9d00      	ldr	r5, [sp, #0]
    bb56:	4628      	mov	r0, r5
    bb58:	f7ff fe70 	bl	b83c <malloc>
    bb5c:	4607      	mov	r7, r0
    bb5e:	2800      	cmp	r0, #0
    bb60:	d14e      	bne.n	bc00 <setvbuf+0x13c>
    bb62:	f8dd 9000 	ldr.w	r9, [sp]
    bb66:	45a9      	cmp	r9, r5
    bb68:	d13c      	bne.n	bbe4 <setvbuf+0x120>
    bb6a:	f04f 30ff 	mov.w	r0, #4294967295
    bb6e:	89a3      	ldrh	r3, [r4, #12]
    bb70:	f043 0302 	orr.w	r3, r3, #2
    bb74:	81a3      	strh	r3, [r4, #12]
    bb76:	2300      	movs	r3, #0
    bb78:	60a3      	str	r3, [r4, #8]
    bb7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
    bb7e:	6023      	str	r3, [r4, #0]
    bb80:	6123      	str	r3, [r4, #16]
    bb82:	2301      	movs	r3, #1
    bb84:	6163      	str	r3, [r4, #20]
    bb86:	b003      	add	sp, #12
    bb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bb8c:	4b22      	ldr	r3, [pc, #136]	; (bc18 <setvbuf+0x154>)
    bb8e:	429c      	cmp	r4, r3
    bb90:	d101      	bne.n	bb96 <setvbuf+0xd2>
    bb92:	68b4      	ldr	r4, [r6, #8]
    bb94:	e7a8      	b.n	bae8 <setvbuf+0x24>
    bb96:	4b21      	ldr	r3, [pc, #132]	; (bc1c <setvbuf+0x158>)
    bb98:	429c      	cmp	r4, r3
    bb9a:	bf08      	it	eq
    bb9c:	68f4      	ldreq	r4, [r6, #12]
    bb9e:	e7a3      	b.n	bae8 <setvbuf+0x24>
    bba0:	2f00      	cmp	r7, #0
    bba2:	d0d8      	beq.n	bb56 <setvbuf+0x92>
    bba4:	69b3      	ldr	r3, [r6, #24]
    bba6:	b913      	cbnz	r3, bbae <setvbuf+0xea>
    bba8:	4630      	mov	r0, r6
    bbaa:	f000 fa17 	bl	bfdc <__sinit>
    bbae:	f1b8 0f01 	cmp.w	r8, #1
    bbb2:	bf08      	it	eq
    bbb4:	89a3      	ldrheq	r3, [r4, #12]
    bbb6:	6027      	str	r7, [r4, #0]
    bbb8:	bf04      	itt	eq
    bbba:	f043 0301 	orreq.w	r3, r3, #1
    bbbe:	81a3      	strheq	r3, [r4, #12]
    bbc0:	89a3      	ldrh	r3, [r4, #12]
    bbc2:	6127      	str	r7, [r4, #16]
    bbc4:	f013 0008 	ands.w	r0, r3, #8
    bbc8:	6165      	str	r5, [r4, #20]
    bbca:	d01b      	beq.n	bc04 <setvbuf+0x140>
    bbcc:	f013 0001 	ands.w	r0, r3, #1
    bbd0:	bf18      	it	ne
    bbd2:	426d      	negne	r5, r5
    bbd4:	f04f 0300 	mov.w	r3, #0
    bbd8:	bf1d      	ittte	ne
    bbda:	60a3      	strne	r3, [r4, #8]
    bbdc:	61a5      	strne	r5, [r4, #24]
    bbde:	4618      	movne	r0, r3
    bbe0:	60a5      	streq	r5, [r4, #8]
    bbe2:	e7d0      	b.n	bb86 <setvbuf+0xc2>
    bbe4:	4648      	mov	r0, r9
    bbe6:	f7ff fe29 	bl	b83c <malloc>
    bbea:	4607      	mov	r7, r0
    bbec:	2800      	cmp	r0, #0
    bbee:	d0bc      	beq.n	bb6a <setvbuf+0xa6>
    bbf0:	89a3      	ldrh	r3, [r4, #12]
    bbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbf6:	81a3      	strh	r3, [r4, #12]
    bbf8:	464d      	mov	r5, r9
    bbfa:	e7d3      	b.n	bba4 <setvbuf+0xe0>
    bbfc:	2000      	movs	r0, #0
    bbfe:	e7b6      	b.n	bb6e <setvbuf+0xaa>
    bc00:	46a9      	mov	r9, r5
    bc02:	e7f5      	b.n	bbf0 <setvbuf+0x12c>
    bc04:	60a0      	str	r0, [r4, #8]
    bc06:	e7be      	b.n	bb86 <setvbuf+0xc2>
    bc08:	f04f 30ff 	mov.w	r0, #4294967295
    bc0c:	e7bb      	b.n	bb86 <setvbuf+0xc2>
    bc0e:	bf00      	nop
    bc10:	20000558 	.word	0x20000558
    bc14:	0000d2f8 	.word	0x0000d2f8
    bc18:	0000d318 	.word	0x0000d318
    bc1c:	0000d2d8 	.word	0x0000d2d8

0000bc20 <siprintf>:
    bc20:	b40e      	push	{r1, r2, r3}
    bc22:	b500      	push	{lr}
    bc24:	b09c      	sub	sp, #112	; 0x70
    bc26:	f44f 7102 	mov.w	r1, #520	; 0x208
    bc2a:	ab1d      	add	r3, sp, #116	; 0x74
    bc2c:	f8ad 1014 	strh.w	r1, [sp, #20]
    bc30:	9002      	str	r0, [sp, #8]
    bc32:	9006      	str	r0, [sp, #24]
    bc34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bc38:	480a      	ldr	r0, [pc, #40]	; (bc64 <siprintf+0x44>)
    bc3a:	9104      	str	r1, [sp, #16]
    bc3c:	9107      	str	r1, [sp, #28]
    bc3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc42:	f853 2b04 	ldr.w	r2, [r3], #4
    bc46:	f8ad 1016 	strh.w	r1, [sp, #22]
    bc4a:	6800      	ldr	r0, [r0, #0]
    bc4c:	9301      	str	r3, [sp, #4]
    bc4e:	a902      	add	r1, sp, #8
    bc50:	f000 fb10 	bl	c274 <_svfiprintf_r>
    bc54:	9b02      	ldr	r3, [sp, #8]
    bc56:	2200      	movs	r2, #0
    bc58:	701a      	strb	r2, [r3, #0]
    bc5a:	b01c      	add	sp, #112	; 0x70
    bc5c:	f85d eb04 	ldr.w	lr, [sp], #4
    bc60:	b003      	add	sp, #12
    bc62:	4770      	bx	lr
    bc64:	20000558 	.word	0x20000558

0000bc68 <strlen>:
    bc68:	4603      	mov	r3, r0
    bc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
    bc6e:	2a00      	cmp	r2, #0
    bc70:	d1fb      	bne.n	bc6a <strlen+0x2>
    bc72:	1a18      	subs	r0, r3, r0
    bc74:	3801      	subs	r0, #1
    bc76:	4770      	bx	lr

0000bc78 <__swbuf_r>:
    bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc7a:	460e      	mov	r6, r1
    bc7c:	4614      	mov	r4, r2
    bc7e:	4605      	mov	r5, r0
    bc80:	b118      	cbz	r0, bc8a <__swbuf_r+0x12>
    bc82:	6983      	ldr	r3, [r0, #24]
    bc84:	b90b      	cbnz	r3, bc8a <__swbuf_r+0x12>
    bc86:	f000 f9a9 	bl	bfdc <__sinit>
    bc8a:	4b21      	ldr	r3, [pc, #132]	; (bd10 <__swbuf_r+0x98>)
    bc8c:	429c      	cmp	r4, r3
    bc8e:	d12a      	bne.n	bce6 <__swbuf_r+0x6e>
    bc90:	686c      	ldr	r4, [r5, #4]
    bc92:	69a3      	ldr	r3, [r4, #24]
    bc94:	60a3      	str	r3, [r4, #8]
    bc96:	89a3      	ldrh	r3, [r4, #12]
    bc98:	071a      	lsls	r2, r3, #28
    bc9a:	d52e      	bpl.n	bcfa <__swbuf_r+0x82>
    bc9c:	6923      	ldr	r3, [r4, #16]
    bc9e:	b363      	cbz	r3, bcfa <__swbuf_r+0x82>
    bca0:	6923      	ldr	r3, [r4, #16]
    bca2:	6820      	ldr	r0, [r4, #0]
    bca4:	1ac0      	subs	r0, r0, r3
    bca6:	6963      	ldr	r3, [r4, #20]
    bca8:	b2f6      	uxtb	r6, r6
    bcaa:	4298      	cmp	r0, r3
    bcac:	4637      	mov	r7, r6
    bcae:	db04      	blt.n	bcba <__swbuf_r+0x42>
    bcb0:	4621      	mov	r1, r4
    bcb2:	4628      	mov	r0, r5
    bcb4:	f000 f928 	bl	bf08 <_fflush_r>
    bcb8:	bb28      	cbnz	r0, bd06 <__swbuf_r+0x8e>
    bcba:	68a3      	ldr	r3, [r4, #8]
    bcbc:	3b01      	subs	r3, #1
    bcbe:	60a3      	str	r3, [r4, #8]
    bcc0:	6823      	ldr	r3, [r4, #0]
    bcc2:	1c5a      	adds	r2, r3, #1
    bcc4:	6022      	str	r2, [r4, #0]
    bcc6:	701e      	strb	r6, [r3, #0]
    bcc8:	6963      	ldr	r3, [r4, #20]
    bcca:	3001      	adds	r0, #1
    bccc:	4298      	cmp	r0, r3
    bcce:	d004      	beq.n	bcda <__swbuf_r+0x62>
    bcd0:	89a3      	ldrh	r3, [r4, #12]
    bcd2:	07db      	lsls	r3, r3, #31
    bcd4:	d519      	bpl.n	bd0a <__swbuf_r+0x92>
    bcd6:	2e0a      	cmp	r6, #10
    bcd8:	d117      	bne.n	bd0a <__swbuf_r+0x92>
    bcda:	4621      	mov	r1, r4
    bcdc:	4628      	mov	r0, r5
    bcde:	f000 f913 	bl	bf08 <_fflush_r>
    bce2:	b190      	cbz	r0, bd0a <__swbuf_r+0x92>
    bce4:	e00f      	b.n	bd06 <__swbuf_r+0x8e>
    bce6:	4b0b      	ldr	r3, [pc, #44]	; (bd14 <__swbuf_r+0x9c>)
    bce8:	429c      	cmp	r4, r3
    bcea:	d101      	bne.n	bcf0 <__swbuf_r+0x78>
    bcec:	68ac      	ldr	r4, [r5, #8]
    bcee:	e7d0      	b.n	bc92 <__swbuf_r+0x1a>
    bcf0:	4b09      	ldr	r3, [pc, #36]	; (bd18 <__swbuf_r+0xa0>)
    bcf2:	429c      	cmp	r4, r3
    bcf4:	bf08      	it	eq
    bcf6:	68ec      	ldreq	r4, [r5, #12]
    bcf8:	e7cb      	b.n	bc92 <__swbuf_r+0x1a>
    bcfa:	4621      	mov	r1, r4
    bcfc:	4628      	mov	r0, r5
    bcfe:	f000 f80d 	bl	bd1c <__swsetup_r>
    bd02:	2800      	cmp	r0, #0
    bd04:	d0cc      	beq.n	bca0 <__swbuf_r+0x28>
    bd06:	f04f 37ff 	mov.w	r7, #4294967295
    bd0a:	4638      	mov	r0, r7
    bd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd0e:	bf00      	nop
    bd10:	0000d2f8 	.word	0x0000d2f8
    bd14:	0000d318 	.word	0x0000d318
    bd18:	0000d2d8 	.word	0x0000d2d8

0000bd1c <__swsetup_r>:
    bd1c:	4b32      	ldr	r3, [pc, #200]	; (bde8 <__swsetup_r+0xcc>)
    bd1e:	b570      	push	{r4, r5, r6, lr}
    bd20:	681d      	ldr	r5, [r3, #0]
    bd22:	4606      	mov	r6, r0
    bd24:	460c      	mov	r4, r1
    bd26:	b125      	cbz	r5, bd32 <__swsetup_r+0x16>
    bd28:	69ab      	ldr	r3, [r5, #24]
    bd2a:	b913      	cbnz	r3, bd32 <__swsetup_r+0x16>
    bd2c:	4628      	mov	r0, r5
    bd2e:	f000 f955 	bl	bfdc <__sinit>
    bd32:	4b2e      	ldr	r3, [pc, #184]	; (bdec <__swsetup_r+0xd0>)
    bd34:	429c      	cmp	r4, r3
    bd36:	d10f      	bne.n	bd58 <__swsetup_r+0x3c>
    bd38:	686c      	ldr	r4, [r5, #4]
    bd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd3e:	b29a      	uxth	r2, r3
    bd40:	0715      	lsls	r5, r2, #28
    bd42:	d42c      	bmi.n	bd9e <__swsetup_r+0x82>
    bd44:	06d0      	lsls	r0, r2, #27
    bd46:	d411      	bmi.n	bd6c <__swsetup_r+0x50>
    bd48:	2209      	movs	r2, #9
    bd4a:	6032      	str	r2, [r6, #0]
    bd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd50:	81a3      	strh	r3, [r4, #12]
    bd52:	f04f 30ff 	mov.w	r0, #4294967295
    bd56:	bd70      	pop	{r4, r5, r6, pc}
    bd58:	4b25      	ldr	r3, [pc, #148]	; (bdf0 <__swsetup_r+0xd4>)
    bd5a:	429c      	cmp	r4, r3
    bd5c:	d101      	bne.n	bd62 <__swsetup_r+0x46>
    bd5e:	68ac      	ldr	r4, [r5, #8]
    bd60:	e7eb      	b.n	bd3a <__swsetup_r+0x1e>
    bd62:	4b24      	ldr	r3, [pc, #144]	; (bdf4 <__swsetup_r+0xd8>)
    bd64:	429c      	cmp	r4, r3
    bd66:	bf08      	it	eq
    bd68:	68ec      	ldreq	r4, [r5, #12]
    bd6a:	e7e6      	b.n	bd3a <__swsetup_r+0x1e>
    bd6c:	0751      	lsls	r1, r2, #29
    bd6e:	d512      	bpl.n	bd96 <__swsetup_r+0x7a>
    bd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bd72:	b141      	cbz	r1, bd86 <__swsetup_r+0x6a>
    bd74:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bd78:	4299      	cmp	r1, r3
    bd7a:	d002      	beq.n	bd82 <__swsetup_r+0x66>
    bd7c:	4630      	mov	r0, r6
    bd7e:	f7ff fd79 	bl	b874 <_free_r>
    bd82:	2300      	movs	r3, #0
    bd84:	6363      	str	r3, [r4, #52]	; 0x34
    bd86:	89a3      	ldrh	r3, [r4, #12]
    bd88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    bd8c:	81a3      	strh	r3, [r4, #12]
    bd8e:	2300      	movs	r3, #0
    bd90:	6063      	str	r3, [r4, #4]
    bd92:	6923      	ldr	r3, [r4, #16]
    bd94:	6023      	str	r3, [r4, #0]
    bd96:	89a3      	ldrh	r3, [r4, #12]
    bd98:	f043 0308 	orr.w	r3, r3, #8
    bd9c:	81a3      	strh	r3, [r4, #12]
    bd9e:	6923      	ldr	r3, [r4, #16]
    bda0:	b94b      	cbnz	r3, bdb6 <__swsetup_r+0x9a>
    bda2:	89a3      	ldrh	r3, [r4, #12]
    bda4:	f403 7320 	and.w	r3, r3, #640	; 0x280
    bda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bdac:	d003      	beq.n	bdb6 <__swsetup_r+0x9a>
    bdae:	4621      	mov	r1, r4
    bdb0:	4630      	mov	r0, r6
    bdb2:	f000 f9c1 	bl	c138 <__smakebuf_r>
    bdb6:	89a2      	ldrh	r2, [r4, #12]
    bdb8:	f012 0301 	ands.w	r3, r2, #1
    bdbc:	d00c      	beq.n	bdd8 <__swsetup_r+0xbc>
    bdbe:	2300      	movs	r3, #0
    bdc0:	60a3      	str	r3, [r4, #8]
    bdc2:	6963      	ldr	r3, [r4, #20]
    bdc4:	425b      	negs	r3, r3
    bdc6:	61a3      	str	r3, [r4, #24]
    bdc8:	6923      	ldr	r3, [r4, #16]
    bdca:	b953      	cbnz	r3, bde2 <__swsetup_r+0xc6>
    bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bdd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    bdd4:	d1ba      	bne.n	bd4c <__swsetup_r+0x30>
    bdd6:	bd70      	pop	{r4, r5, r6, pc}
    bdd8:	0792      	lsls	r2, r2, #30
    bdda:	bf58      	it	pl
    bddc:	6963      	ldrpl	r3, [r4, #20]
    bdde:	60a3      	str	r3, [r4, #8]
    bde0:	e7f2      	b.n	bdc8 <__swsetup_r+0xac>
    bde2:	2000      	movs	r0, #0
    bde4:	e7f7      	b.n	bdd6 <__swsetup_r+0xba>
    bde6:	bf00      	nop
    bde8:	20000558 	.word	0x20000558
    bdec:	0000d2f8 	.word	0x0000d2f8
    bdf0:	0000d318 	.word	0x0000d318
    bdf4:	0000d2d8 	.word	0x0000d2d8

0000bdf8 <__sflush_r>:
    bdf8:	898a      	ldrh	r2, [r1, #12]
    bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdfe:	4605      	mov	r5, r0
    be00:	0710      	lsls	r0, r2, #28
    be02:	460c      	mov	r4, r1
    be04:	d45a      	bmi.n	bebc <__sflush_r+0xc4>
    be06:	684b      	ldr	r3, [r1, #4]
    be08:	2b00      	cmp	r3, #0
    be0a:	dc05      	bgt.n	be18 <__sflush_r+0x20>
    be0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    be0e:	2b00      	cmp	r3, #0
    be10:	dc02      	bgt.n	be18 <__sflush_r+0x20>
    be12:	2000      	movs	r0, #0
    be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    be1a:	2e00      	cmp	r6, #0
    be1c:	d0f9      	beq.n	be12 <__sflush_r+0x1a>
    be1e:	2300      	movs	r3, #0
    be20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    be24:	682f      	ldr	r7, [r5, #0]
    be26:	602b      	str	r3, [r5, #0]
    be28:	d033      	beq.n	be92 <__sflush_r+0x9a>
    be2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    be2c:	89a3      	ldrh	r3, [r4, #12]
    be2e:	075a      	lsls	r2, r3, #29
    be30:	d505      	bpl.n	be3e <__sflush_r+0x46>
    be32:	6863      	ldr	r3, [r4, #4]
    be34:	1ac0      	subs	r0, r0, r3
    be36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    be38:	b10b      	cbz	r3, be3e <__sflush_r+0x46>
    be3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    be3c:	1ac0      	subs	r0, r0, r3
    be3e:	2300      	movs	r3, #0
    be40:	4602      	mov	r2, r0
    be42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    be44:	6a21      	ldr	r1, [r4, #32]
    be46:	4628      	mov	r0, r5
    be48:	47b0      	blx	r6
    be4a:	1c43      	adds	r3, r0, #1
    be4c:	89a3      	ldrh	r3, [r4, #12]
    be4e:	d106      	bne.n	be5e <__sflush_r+0x66>
    be50:	6829      	ldr	r1, [r5, #0]
    be52:	291d      	cmp	r1, #29
    be54:	d84b      	bhi.n	beee <__sflush_r+0xf6>
    be56:	4a2b      	ldr	r2, [pc, #172]	; (bf04 <__sflush_r+0x10c>)
    be58:	40ca      	lsrs	r2, r1
    be5a:	07d6      	lsls	r6, r2, #31
    be5c:	d547      	bpl.n	beee <__sflush_r+0xf6>
    be5e:	2200      	movs	r2, #0
    be60:	6062      	str	r2, [r4, #4]
    be62:	04d9      	lsls	r1, r3, #19
    be64:	6922      	ldr	r2, [r4, #16]
    be66:	6022      	str	r2, [r4, #0]
    be68:	d504      	bpl.n	be74 <__sflush_r+0x7c>
    be6a:	1c42      	adds	r2, r0, #1
    be6c:	d101      	bne.n	be72 <__sflush_r+0x7a>
    be6e:	682b      	ldr	r3, [r5, #0]
    be70:	b903      	cbnz	r3, be74 <__sflush_r+0x7c>
    be72:	6560      	str	r0, [r4, #84]	; 0x54
    be74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    be76:	602f      	str	r7, [r5, #0]
    be78:	2900      	cmp	r1, #0
    be7a:	d0ca      	beq.n	be12 <__sflush_r+0x1a>
    be7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    be80:	4299      	cmp	r1, r3
    be82:	d002      	beq.n	be8a <__sflush_r+0x92>
    be84:	4628      	mov	r0, r5
    be86:	f7ff fcf5 	bl	b874 <_free_r>
    be8a:	2000      	movs	r0, #0
    be8c:	6360      	str	r0, [r4, #52]	; 0x34
    be8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be92:	6a21      	ldr	r1, [r4, #32]
    be94:	2301      	movs	r3, #1
    be96:	4628      	mov	r0, r5
    be98:	47b0      	blx	r6
    be9a:	1c41      	adds	r1, r0, #1
    be9c:	d1c6      	bne.n	be2c <__sflush_r+0x34>
    be9e:	682b      	ldr	r3, [r5, #0]
    bea0:	2b00      	cmp	r3, #0
    bea2:	d0c3      	beq.n	be2c <__sflush_r+0x34>
    bea4:	2b1d      	cmp	r3, #29
    bea6:	d001      	beq.n	beac <__sflush_r+0xb4>
    bea8:	2b16      	cmp	r3, #22
    beaa:	d101      	bne.n	beb0 <__sflush_r+0xb8>
    beac:	602f      	str	r7, [r5, #0]
    beae:	e7b0      	b.n	be12 <__sflush_r+0x1a>
    beb0:	89a3      	ldrh	r3, [r4, #12]
    beb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    beb6:	81a3      	strh	r3, [r4, #12]
    beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bebc:	690f      	ldr	r7, [r1, #16]
    bebe:	2f00      	cmp	r7, #0
    bec0:	d0a7      	beq.n	be12 <__sflush_r+0x1a>
    bec2:	0793      	lsls	r3, r2, #30
    bec4:	680e      	ldr	r6, [r1, #0]
    bec6:	bf08      	it	eq
    bec8:	694b      	ldreq	r3, [r1, #20]
    beca:	600f      	str	r7, [r1, #0]
    becc:	bf18      	it	ne
    bece:	2300      	movne	r3, #0
    bed0:	eba6 0807 	sub.w	r8, r6, r7
    bed4:	608b      	str	r3, [r1, #8]
    bed6:	f1b8 0f00 	cmp.w	r8, #0
    beda:	dd9a      	ble.n	be12 <__sflush_r+0x1a>
    bedc:	4643      	mov	r3, r8
    bede:	463a      	mov	r2, r7
    bee0:	6a21      	ldr	r1, [r4, #32]
    bee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bee4:	4628      	mov	r0, r5
    bee6:	47b0      	blx	r6
    bee8:	2800      	cmp	r0, #0
    beea:	dc07      	bgt.n	befc <__sflush_r+0x104>
    beec:	89a3      	ldrh	r3, [r4, #12]
    beee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bef2:	81a3      	strh	r3, [r4, #12]
    bef4:	f04f 30ff 	mov.w	r0, #4294967295
    bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    befc:	4407      	add	r7, r0
    befe:	eba8 0800 	sub.w	r8, r8, r0
    bf02:	e7e8      	b.n	bed6 <__sflush_r+0xde>
    bf04:	20400001 	.word	0x20400001

0000bf08 <_fflush_r>:
    bf08:	b538      	push	{r3, r4, r5, lr}
    bf0a:	690b      	ldr	r3, [r1, #16]
    bf0c:	4605      	mov	r5, r0
    bf0e:	460c      	mov	r4, r1
    bf10:	b1db      	cbz	r3, bf4a <_fflush_r+0x42>
    bf12:	b118      	cbz	r0, bf1c <_fflush_r+0x14>
    bf14:	6983      	ldr	r3, [r0, #24]
    bf16:	b90b      	cbnz	r3, bf1c <_fflush_r+0x14>
    bf18:	f000 f860 	bl	bfdc <__sinit>
    bf1c:	4b0c      	ldr	r3, [pc, #48]	; (bf50 <_fflush_r+0x48>)
    bf1e:	429c      	cmp	r4, r3
    bf20:	d109      	bne.n	bf36 <_fflush_r+0x2e>
    bf22:	686c      	ldr	r4, [r5, #4]
    bf24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bf28:	b17b      	cbz	r3, bf4a <_fflush_r+0x42>
    bf2a:	4621      	mov	r1, r4
    bf2c:	4628      	mov	r0, r5
    bf2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bf32:	f7ff bf61 	b.w	bdf8 <__sflush_r>
    bf36:	4b07      	ldr	r3, [pc, #28]	; (bf54 <_fflush_r+0x4c>)
    bf38:	429c      	cmp	r4, r3
    bf3a:	d101      	bne.n	bf40 <_fflush_r+0x38>
    bf3c:	68ac      	ldr	r4, [r5, #8]
    bf3e:	e7f1      	b.n	bf24 <_fflush_r+0x1c>
    bf40:	4b05      	ldr	r3, [pc, #20]	; (bf58 <_fflush_r+0x50>)
    bf42:	429c      	cmp	r4, r3
    bf44:	bf08      	it	eq
    bf46:	68ec      	ldreq	r4, [r5, #12]
    bf48:	e7ec      	b.n	bf24 <_fflush_r+0x1c>
    bf4a:	2000      	movs	r0, #0
    bf4c:	bd38      	pop	{r3, r4, r5, pc}
    bf4e:	bf00      	nop
    bf50:	0000d2f8 	.word	0x0000d2f8
    bf54:	0000d318 	.word	0x0000d318
    bf58:	0000d2d8 	.word	0x0000d2d8

0000bf5c <_cleanup_r>:
    bf5c:	4901      	ldr	r1, [pc, #4]	; (bf64 <_cleanup_r+0x8>)
    bf5e:	f000 b8a9 	b.w	c0b4 <_fwalk_reent>
    bf62:	bf00      	nop
    bf64:	0000bf09 	.word	0x0000bf09

0000bf68 <std.isra.0>:
    bf68:	2300      	movs	r3, #0
    bf6a:	b510      	push	{r4, lr}
    bf6c:	4604      	mov	r4, r0
    bf6e:	6003      	str	r3, [r0, #0]
    bf70:	6043      	str	r3, [r0, #4]
    bf72:	6083      	str	r3, [r0, #8]
    bf74:	8181      	strh	r1, [r0, #12]
    bf76:	6643      	str	r3, [r0, #100]	; 0x64
    bf78:	81c2      	strh	r2, [r0, #14]
    bf7a:	6103      	str	r3, [r0, #16]
    bf7c:	6143      	str	r3, [r0, #20]
    bf7e:	6183      	str	r3, [r0, #24]
    bf80:	4619      	mov	r1, r3
    bf82:	2208      	movs	r2, #8
    bf84:	305c      	adds	r0, #92	; 0x5c
    bf86:	f7ff fc6c 	bl	b862 <memset>
    bf8a:	4b05      	ldr	r3, [pc, #20]	; (bfa0 <std.isra.0+0x38>)
    bf8c:	6263      	str	r3, [r4, #36]	; 0x24
    bf8e:	4b05      	ldr	r3, [pc, #20]	; (bfa4 <std.isra.0+0x3c>)
    bf90:	62a3      	str	r3, [r4, #40]	; 0x28
    bf92:	4b05      	ldr	r3, [pc, #20]	; (bfa8 <std.isra.0+0x40>)
    bf94:	62e3      	str	r3, [r4, #44]	; 0x2c
    bf96:	4b05      	ldr	r3, [pc, #20]	; (bfac <std.isra.0+0x44>)
    bf98:	6224      	str	r4, [r4, #32]
    bf9a:	6323      	str	r3, [r4, #48]	; 0x30
    bf9c:	bd10      	pop	{r4, pc}
    bf9e:	bf00      	nop
    bfa0:	0000c789 	.word	0x0000c789
    bfa4:	0000c7ab 	.word	0x0000c7ab
    bfa8:	0000c7e3 	.word	0x0000c7e3
    bfac:	0000c807 	.word	0x0000c807

0000bfb0 <__sfmoreglue>:
    bfb0:	b570      	push	{r4, r5, r6, lr}
    bfb2:	1e4a      	subs	r2, r1, #1
    bfb4:	2568      	movs	r5, #104	; 0x68
    bfb6:	4355      	muls	r5, r2
    bfb8:	460e      	mov	r6, r1
    bfba:	f105 0174 	add.w	r1, r5, #116	; 0x74
    bfbe:	f7ff fca7 	bl	b910 <_malloc_r>
    bfc2:	4604      	mov	r4, r0
    bfc4:	b140      	cbz	r0, bfd8 <__sfmoreglue+0x28>
    bfc6:	2100      	movs	r1, #0
    bfc8:	e880 0042 	stmia.w	r0, {r1, r6}
    bfcc:	300c      	adds	r0, #12
    bfce:	60a0      	str	r0, [r4, #8]
    bfd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    bfd4:	f7ff fc45 	bl	b862 <memset>
    bfd8:	4620      	mov	r0, r4
    bfda:	bd70      	pop	{r4, r5, r6, pc}

0000bfdc <__sinit>:
    bfdc:	6983      	ldr	r3, [r0, #24]
    bfde:	b510      	push	{r4, lr}
    bfe0:	4604      	mov	r4, r0
    bfe2:	bb33      	cbnz	r3, c032 <__sinit+0x56>
    bfe4:	6483      	str	r3, [r0, #72]	; 0x48
    bfe6:	64c3      	str	r3, [r0, #76]	; 0x4c
    bfe8:	6503      	str	r3, [r0, #80]	; 0x50
    bfea:	4b12      	ldr	r3, [pc, #72]	; (c034 <__sinit+0x58>)
    bfec:	4a12      	ldr	r2, [pc, #72]	; (c038 <__sinit+0x5c>)
    bfee:	681b      	ldr	r3, [r3, #0]
    bff0:	6282      	str	r2, [r0, #40]	; 0x28
    bff2:	4298      	cmp	r0, r3
    bff4:	bf04      	itt	eq
    bff6:	2301      	moveq	r3, #1
    bff8:	6183      	streq	r3, [r0, #24]
    bffa:	f000 f81f 	bl	c03c <__sfp>
    bffe:	6060      	str	r0, [r4, #4]
    c000:	4620      	mov	r0, r4
    c002:	f000 f81b 	bl	c03c <__sfp>
    c006:	60a0      	str	r0, [r4, #8]
    c008:	4620      	mov	r0, r4
    c00a:	f000 f817 	bl	c03c <__sfp>
    c00e:	2200      	movs	r2, #0
    c010:	60e0      	str	r0, [r4, #12]
    c012:	2104      	movs	r1, #4
    c014:	6860      	ldr	r0, [r4, #4]
    c016:	f7ff ffa7 	bl	bf68 <std.isra.0>
    c01a:	2201      	movs	r2, #1
    c01c:	2109      	movs	r1, #9
    c01e:	68a0      	ldr	r0, [r4, #8]
    c020:	f7ff ffa2 	bl	bf68 <std.isra.0>
    c024:	2202      	movs	r2, #2
    c026:	2112      	movs	r1, #18
    c028:	68e0      	ldr	r0, [r4, #12]
    c02a:	f7ff ff9d 	bl	bf68 <std.isra.0>
    c02e:	2301      	movs	r3, #1
    c030:	61a3      	str	r3, [r4, #24]
    c032:	bd10      	pop	{r4, pc}
    c034:	0000d2d4 	.word	0x0000d2d4
    c038:	0000bf5d 	.word	0x0000bf5d

0000c03c <__sfp>:
    c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c03e:	4b1c      	ldr	r3, [pc, #112]	; (c0b0 <__sfp+0x74>)
    c040:	681e      	ldr	r6, [r3, #0]
    c042:	69b3      	ldr	r3, [r6, #24]
    c044:	4607      	mov	r7, r0
    c046:	b913      	cbnz	r3, c04e <__sfp+0x12>
    c048:	4630      	mov	r0, r6
    c04a:	f7ff ffc7 	bl	bfdc <__sinit>
    c04e:	3648      	adds	r6, #72	; 0x48
    c050:	68b4      	ldr	r4, [r6, #8]
    c052:	6873      	ldr	r3, [r6, #4]
    c054:	3b01      	subs	r3, #1
    c056:	d503      	bpl.n	c060 <__sfp+0x24>
    c058:	6833      	ldr	r3, [r6, #0]
    c05a:	b133      	cbz	r3, c06a <__sfp+0x2e>
    c05c:	6836      	ldr	r6, [r6, #0]
    c05e:	e7f7      	b.n	c050 <__sfp+0x14>
    c060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c064:	b16d      	cbz	r5, c082 <__sfp+0x46>
    c066:	3468      	adds	r4, #104	; 0x68
    c068:	e7f4      	b.n	c054 <__sfp+0x18>
    c06a:	2104      	movs	r1, #4
    c06c:	4638      	mov	r0, r7
    c06e:	f7ff ff9f 	bl	bfb0 <__sfmoreglue>
    c072:	6030      	str	r0, [r6, #0]
    c074:	2800      	cmp	r0, #0
    c076:	d1f1      	bne.n	c05c <__sfp+0x20>
    c078:	230c      	movs	r3, #12
    c07a:	603b      	str	r3, [r7, #0]
    c07c:	4604      	mov	r4, r0
    c07e:	4620      	mov	r0, r4
    c080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c082:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c086:	81e3      	strh	r3, [r4, #14]
    c088:	2301      	movs	r3, #1
    c08a:	81a3      	strh	r3, [r4, #12]
    c08c:	6665      	str	r5, [r4, #100]	; 0x64
    c08e:	6025      	str	r5, [r4, #0]
    c090:	60a5      	str	r5, [r4, #8]
    c092:	6065      	str	r5, [r4, #4]
    c094:	6125      	str	r5, [r4, #16]
    c096:	6165      	str	r5, [r4, #20]
    c098:	61a5      	str	r5, [r4, #24]
    c09a:	2208      	movs	r2, #8
    c09c:	4629      	mov	r1, r5
    c09e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c0a2:	f7ff fbde 	bl	b862 <memset>
    c0a6:	6365      	str	r5, [r4, #52]	; 0x34
    c0a8:	63a5      	str	r5, [r4, #56]	; 0x38
    c0aa:	64a5      	str	r5, [r4, #72]	; 0x48
    c0ac:	64e5      	str	r5, [r4, #76]	; 0x4c
    c0ae:	e7e6      	b.n	c07e <__sfp+0x42>
    c0b0:	0000d2d4 	.word	0x0000d2d4

0000c0b4 <_fwalk_reent>:
    c0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0b8:	4680      	mov	r8, r0
    c0ba:	4689      	mov	r9, r1
    c0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c0c0:	2600      	movs	r6, #0
    c0c2:	b914      	cbnz	r4, c0ca <_fwalk_reent+0x16>
    c0c4:	4630      	mov	r0, r6
    c0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c0ca:	68a5      	ldr	r5, [r4, #8]
    c0cc:	6867      	ldr	r7, [r4, #4]
    c0ce:	3f01      	subs	r7, #1
    c0d0:	d501      	bpl.n	c0d6 <_fwalk_reent+0x22>
    c0d2:	6824      	ldr	r4, [r4, #0]
    c0d4:	e7f5      	b.n	c0c2 <_fwalk_reent+0xe>
    c0d6:	89ab      	ldrh	r3, [r5, #12]
    c0d8:	2b01      	cmp	r3, #1
    c0da:	d907      	bls.n	c0ec <_fwalk_reent+0x38>
    c0dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c0e0:	3301      	adds	r3, #1
    c0e2:	d003      	beq.n	c0ec <_fwalk_reent+0x38>
    c0e4:	4629      	mov	r1, r5
    c0e6:	4640      	mov	r0, r8
    c0e8:	47c8      	blx	r9
    c0ea:	4306      	orrs	r6, r0
    c0ec:	3568      	adds	r5, #104	; 0x68
    c0ee:	e7ee      	b.n	c0ce <_fwalk_reent+0x1a>

0000c0f0 <__swhatbuf_r>:
    c0f0:	b570      	push	{r4, r5, r6, lr}
    c0f2:	460e      	mov	r6, r1
    c0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c0f8:	2900      	cmp	r1, #0
    c0fa:	b090      	sub	sp, #64	; 0x40
    c0fc:	4614      	mov	r4, r2
    c0fe:	461d      	mov	r5, r3
    c100:	da07      	bge.n	c112 <__swhatbuf_r+0x22>
    c102:	2300      	movs	r3, #0
    c104:	602b      	str	r3, [r5, #0]
    c106:	89b3      	ldrh	r3, [r6, #12]
    c108:	061a      	lsls	r2, r3, #24
    c10a:	d410      	bmi.n	c12e <__swhatbuf_r+0x3e>
    c10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c110:	e00e      	b.n	c130 <__swhatbuf_r+0x40>
    c112:	aa01      	add	r2, sp, #4
    c114:	f000 fb9e 	bl	c854 <_fstat_r>
    c118:	2800      	cmp	r0, #0
    c11a:	dbf2      	blt.n	c102 <__swhatbuf_r+0x12>
    c11c:	9a02      	ldr	r2, [sp, #8]
    c11e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c126:	425a      	negs	r2, r3
    c128:	415a      	adcs	r2, r3
    c12a:	602a      	str	r2, [r5, #0]
    c12c:	e7ee      	b.n	c10c <__swhatbuf_r+0x1c>
    c12e:	2340      	movs	r3, #64	; 0x40
    c130:	2000      	movs	r0, #0
    c132:	6023      	str	r3, [r4, #0]
    c134:	b010      	add	sp, #64	; 0x40
    c136:	bd70      	pop	{r4, r5, r6, pc}

0000c138 <__smakebuf_r>:
    c138:	898b      	ldrh	r3, [r1, #12]
    c13a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c13c:	079d      	lsls	r5, r3, #30
    c13e:	4606      	mov	r6, r0
    c140:	460c      	mov	r4, r1
    c142:	d507      	bpl.n	c154 <__smakebuf_r+0x1c>
    c144:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c148:	6023      	str	r3, [r4, #0]
    c14a:	6123      	str	r3, [r4, #16]
    c14c:	2301      	movs	r3, #1
    c14e:	6163      	str	r3, [r4, #20]
    c150:	b002      	add	sp, #8
    c152:	bd70      	pop	{r4, r5, r6, pc}
    c154:	ab01      	add	r3, sp, #4
    c156:	466a      	mov	r2, sp
    c158:	f7ff ffca 	bl	c0f0 <__swhatbuf_r>
    c15c:	9900      	ldr	r1, [sp, #0]
    c15e:	4605      	mov	r5, r0
    c160:	4630      	mov	r0, r6
    c162:	f7ff fbd5 	bl	b910 <_malloc_r>
    c166:	b948      	cbnz	r0, c17c <__smakebuf_r+0x44>
    c168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c16c:	059a      	lsls	r2, r3, #22
    c16e:	d4ef      	bmi.n	c150 <__smakebuf_r+0x18>
    c170:	f023 0303 	bic.w	r3, r3, #3
    c174:	f043 0302 	orr.w	r3, r3, #2
    c178:	81a3      	strh	r3, [r4, #12]
    c17a:	e7e3      	b.n	c144 <__smakebuf_r+0xc>
    c17c:	4b0d      	ldr	r3, [pc, #52]	; (c1b4 <__smakebuf_r+0x7c>)
    c17e:	62b3      	str	r3, [r6, #40]	; 0x28
    c180:	89a3      	ldrh	r3, [r4, #12]
    c182:	6020      	str	r0, [r4, #0]
    c184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c188:	81a3      	strh	r3, [r4, #12]
    c18a:	9b00      	ldr	r3, [sp, #0]
    c18c:	6163      	str	r3, [r4, #20]
    c18e:	9b01      	ldr	r3, [sp, #4]
    c190:	6120      	str	r0, [r4, #16]
    c192:	b15b      	cbz	r3, c1ac <__smakebuf_r+0x74>
    c194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c198:	4630      	mov	r0, r6
    c19a:	f000 fb6d 	bl	c878 <_isatty_r>
    c19e:	b128      	cbz	r0, c1ac <__smakebuf_r+0x74>
    c1a0:	89a3      	ldrh	r3, [r4, #12]
    c1a2:	f023 0303 	bic.w	r3, r3, #3
    c1a6:	f043 0301 	orr.w	r3, r3, #1
    c1aa:	81a3      	strh	r3, [r4, #12]
    c1ac:	89a3      	ldrh	r3, [r4, #12]
    c1ae:	431d      	orrs	r5, r3
    c1b0:	81a5      	strh	r5, [r4, #12]
    c1b2:	e7cd      	b.n	c150 <__smakebuf_r+0x18>
    c1b4:	0000bf5d 	.word	0x0000bf5d

0000c1b8 <__malloc_lock>:
    c1b8:	4770      	bx	lr

0000c1ba <__malloc_unlock>:
    c1ba:	4770      	bx	lr

0000c1bc <__ssputs_r>:
    c1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1c0:	688e      	ldr	r6, [r1, #8]
    c1c2:	429e      	cmp	r6, r3
    c1c4:	4682      	mov	sl, r0
    c1c6:	460c      	mov	r4, r1
    c1c8:	4691      	mov	r9, r2
    c1ca:	4698      	mov	r8, r3
    c1cc:	d835      	bhi.n	c23a <__ssputs_r+0x7e>
    c1ce:	898a      	ldrh	r2, [r1, #12]
    c1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c1d4:	d031      	beq.n	c23a <__ssputs_r+0x7e>
    c1d6:	6825      	ldr	r5, [r4, #0]
    c1d8:	6909      	ldr	r1, [r1, #16]
    c1da:	1a6f      	subs	r7, r5, r1
    c1dc:	6965      	ldr	r5, [r4, #20]
    c1de:	2302      	movs	r3, #2
    c1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c1e4:	fb95 f5f3 	sdiv	r5, r5, r3
    c1e8:	f108 0301 	add.w	r3, r8, #1
    c1ec:	443b      	add	r3, r7
    c1ee:	429d      	cmp	r5, r3
    c1f0:	bf38      	it	cc
    c1f2:	461d      	movcc	r5, r3
    c1f4:	0553      	lsls	r3, r2, #21
    c1f6:	d531      	bpl.n	c25c <__ssputs_r+0xa0>
    c1f8:	4629      	mov	r1, r5
    c1fa:	f7ff fb89 	bl	b910 <_malloc_r>
    c1fe:	4606      	mov	r6, r0
    c200:	b950      	cbnz	r0, c218 <__ssputs_r+0x5c>
    c202:	230c      	movs	r3, #12
    c204:	f8ca 3000 	str.w	r3, [sl]
    c208:	89a3      	ldrh	r3, [r4, #12]
    c20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c20e:	81a3      	strh	r3, [r4, #12]
    c210:	f04f 30ff 	mov.w	r0, #4294967295
    c214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c218:	463a      	mov	r2, r7
    c21a:	6921      	ldr	r1, [r4, #16]
    c21c:	f7ff fb16 	bl	b84c <memcpy>
    c220:	89a3      	ldrh	r3, [r4, #12]
    c222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c22a:	81a3      	strh	r3, [r4, #12]
    c22c:	6126      	str	r6, [r4, #16]
    c22e:	6165      	str	r5, [r4, #20]
    c230:	443e      	add	r6, r7
    c232:	1bed      	subs	r5, r5, r7
    c234:	6026      	str	r6, [r4, #0]
    c236:	60a5      	str	r5, [r4, #8]
    c238:	4646      	mov	r6, r8
    c23a:	4546      	cmp	r6, r8
    c23c:	bf28      	it	cs
    c23e:	4646      	movcs	r6, r8
    c240:	4632      	mov	r2, r6
    c242:	4649      	mov	r1, r9
    c244:	6820      	ldr	r0, [r4, #0]
    c246:	f000 fb8b 	bl	c960 <memmove>
    c24a:	68a3      	ldr	r3, [r4, #8]
    c24c:	1b9b      	subs	r3, r3, r6
    c24e:	60a3      	str	r3, [r4, #8]
    c250:	6823      	ldr	r3, [r4, #0]
    c252:	441e      	add	r6, r3
    c254:	6026      	str	r6, [r4, #0]
    c256:	2000      	movs	r0, #0
    c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c25c:	462a      	mov	r2, r5
    c25e:	f000 fb99 	bl	c994 <_realloc_r>
    c262:	4606      	mov	r6, r0
    c264:	2800      	cmp	r0, #0
    c266:	d1e1      	bne.n	c22c <__ssputs_r+0x70>
    c268:	6921      	ldr	r1, [r4, #16]
    c26a:	4650      	mov	r0, sl
    c26c:	f7ff fb02 	bl	b874 <_free_r>
    c270:	e7c7      	b.n	c202 <__ssputs_r+0x46>
	...

0000c274 <_svfiprintf_r>:
    c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c278:	b09d      	sub	sp, #116	; 0x74
    c27a:	4680      	mov	r8, r0
    c27c:	9303      	str	r3, [sp, #12]
    c27e:	898b      	ldrh	r3, [r1, #12]
    c280:	061c      	lsls	r4, r3, #24
    c282:	460d      	mov	r5, r1
    c284:	4616      	mov	r6, r2
    c286:	d50f      	bpl.n	c2a8 <_svfiprintf_r+0x34>
    c288:	690b      	ldr	r3, [r1, #16]
    c28a:	b96b      	cbnz	r3, c2a8 <_svfiprintf_r+0x34>
    c28c:	2140      	movs	r1, #64	; 0x40
    c28e:	f7ff fb3f 	bl	b910 <_malloc_r>
    c292:	6028      	str	r0, [r5, #0]
    c294:	6128      	str	r0, [r5, #16]
    c296:	b928      	cbnz	r0, c2a4 <_svfiprintf_r+0x30>
    c298:	230c      	movs	r3, #12
    c29a:	f8c8 3000 	str.w	r3, [r8]
    c29e:	f04f 30ff 	mov.w	r0, #4294967295
    c2a2:	e0c5      	b.n	c430 <_svfiprintf_r+0x1bc>
    c2a4:	2340      	movs	r3, #64	; 0x40
    c2a6:	616b      	str	r3, [r5, #20]
    c2a8:	2300      	movs	r3, #0
    c2aa:	9309      	str	r3, [sp, #36]	; 0x24
    c2ac:	2320      	movs	r3, #32
    c2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c2b2:	2330      	movs	r3, #48	; 0x30
    c2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c2b8:	f04f 0b01 	mov.w	fp, #1
    c2bc:	4637      	mov	r7, r6
    c2be:	463c      	mov	r4, r7
    c2c0:	f814 3b01 	ldrb.w	r3, [r4], #1
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d13c      	bne.n	c342 <_svfiprintf_r+0xce>
    c2c8:	ebb7 0a06 	subs.w	sl, r7, r6
    c2cc:	d00b      	beq.n	c2e6 <_svfiprintf_r+0x72>
    c2ce:	4653      	mov	r3, sl
    c2d0:	4632      	mov	r2, r6
    c2d2:	4629      	mov	r1, r5
    c2d4:	4640      	mov	r0, r8
    c2d6:	f7ff ff71 	bl	c1bc <__ssputs_r>
    c2da:	3001      	adds	r0, #1
    c2dc:	f000 80a3 	beq.w	c426 <_svfiprintf_r+0x1b2>
    c2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c2e2:	4453      	add	r3, sl
    c2e4:	9309      	str	r3, [sp, #36]	; 0x24
    c2e6:	783b      	ldrb	r3, [r7, #0]
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	f000 809c 	beq.w	c426 <_svfiprintf_r+0x1b2>
    c2ee:	2300      	movs	r3, #0
    c2f0:	f04f 32ff 	mov.w	r2, #4294967295
    c2f4:	9304      	str	r3, [sp, #16]
    c2f6:	9307      	str	r3, [sp, #28]
    c2f8:	9205      	str	r2, [sp, #20]
    c2fa:	9306      	str	r3, [sp, #24]
    c2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c300:	931a      	str	r3, [sp, #104]	; 0x68
    c302:	2205      	movs	r2, #5
    c304:	7821      	ldrb	r1, [r4, #0]
    c306:	4850      	ldr	r0, [pc, #320]	; (c448 <_svfiprintf_r+0x1d4>)
    c308:	f000 fada 	bl	c8c0 <memchr>
    c30c:	1c67      	adds	r7, r4, #1
    c30e:	9b04      	ldr	r3, [sp, #16]
    c310:	b9d8      	cbnz	r0, c34a <_svfiprintf_r+0xd6>
    c312:	06d9      	lsls	r1, r3, #27
    c314:	bf44      	itt	mi
    c316:	2220      	movmi	r2, #32
    c318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c31c:	071a      	lsls	r2, r3, #28
    c31e:	bf44      	itt	mi
    c320:	222b      	movmi	r2, #43	; 0x2b
    c322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c326:	7822      	ldrb	r2, [r4, #0]
    c328:	2a2a      	cmp	r2, #42	; 0x2a
    c32a:	d016      	beq.n	c35a <_svfiprintf_r+0xe6>
    c32c:	9a07      	ldr	r2, [sp, #28]
    c32e:	2100      	movs	r1, #0
    c330:	200a      	movs	r0, #10
    c332:	4627      	mov	r7, r4
    c334:	3401      	adds	r4, #1
    c336:	783b      	ldrb	r3, [r7, #0]
    c338:	3b30      	subs	r3, #48	; 0x30
    c33a:	2b09      	cmp	r3, #9
    c33c:	d951      	bls.n	c3e2 <_svfiprintf_r+0x16e>
    c33e:	b1c9      	cbz	r1, c374 <_svfiprintf_r+0x100>
    c340:	e011      	b.n	c366 <_svfiprintf_r+0xf2>
    c342:	2b25      	cmp	r3, #37	; 0x25
    c344:	d0c0      	beq.n	c2c8 <_svfiprintf_r+0x54>
    c346:	4627      	mov	r7, r4
    c348:	e7b9      	b.n	c2be <_svfiprintf_r+0x4a>
    c34a:	4a3f      	ldr	r2, [pc, #252]	; (c448 <_svfiprintf_r+0x1d4>)
    c34c:	1a80      	subs	r0, r0, r2
    c34e:	fa0b f000 	lsl.w	r0, fp, r0
    c352:	4318      	orrs	r0, r3
    c354:	9004      	str	r0, [sp, #16]
    c356:	463c      	mov	r4, r7
    c358:	e7d3      	b.n	c302 <_svfiprintf_r+0x8e>
    c35a:	9a03      	ldr	r2, [sp, #12]
    c35c:	1d11      	adds	r1, r2, #4
    c35e:	6812      	ldr	r2, [r2, #0]
    c360:	9103      	str	r1, [sp, #12]
    c362:	2a00      	cmp	r2, #0
    c364:	db01      	blt.n	c36a <_svfiprintf_r+0xf6>
    c366:	9207      	str	r2, [sp, #28]
    c368:	e004      	b.n	c374 <_svfiprintf_r+0x100>
    c36a:	4252      	negs	r2, r2
    c36c:	f043 0302 	orr.w	r3, r3, #2
    c370:	9207      	str	r2, [sp, #28]
    c372:	9304      	str	r3, [sp, #16]
    c374:	783b      	ldrb	r3, [r7, #0]
    c376:	2b2e      	cmp	r3, #46	; 0x2e
    c378:	d10e      	bne.n	c398 <_svfiprintf_r+0x124>
    c37a:	787b      	ldrb	r3, [r7, #1]
    c37c:	2b2a      	cmp	r3, #42	; 0x2a
    c37e:	f107 0101 	add.w	r1, r7, #1
    c382:	d132      	bne.n	c3ea <_svfiprintf_r+0x176>
    c384:	9b03      	ldr	r3, [sp, #12]
    c386:	1d1a      	adds	r2, r3, #4
    c388:	681b      	ldr	r3, [r3, #0]
    c38a:	9203      	str	r2, [sp, #12]
    c38c:	2b00      	cmp	r3, #0
    c38e:	bfb8      	it	lt
    c390:	f04f 33ff 	movlt.w	r3, #4294967295
    c394:	3702      	adds	r7, #2
    c396:	9305      	str	r3, [sp, #20]
    c398:	4c2c      	ldr	r4, [pc, #176]	; (c44c <_svfiprintf_r+0x1d8>)
    c39a:	7839      	ldrb	r1, [r7, #0]
    c39c:	2203      	movs	r2, #3
    c39e:	4620      	mov	r0, r4
    c3a0:	f000 fa8e 	bl	c8c0 <memchr>
    c3a4:	b138      	cbz	r0, c3b6 <_svfiprintf_r+0x142>
    c3a6:	2340      	movs	r3, #64	; 0x40
    c3a8:	1b00      	subs	r0, r0, r4
    c3aa:	fa03 f000 	lsl.w	r0, r3, r0
    c3ae:	9b04      	ldr	r3, [sp, #16]
    c3b0:	4303      	orrs	r3, r0
    c3b2:	9304      	str	r3, [sp, #16]
    c3b4:	3701      	adds	r7, #1
    c3b6:	7839      	ldrb	r1, [r7, #0]
    c3b8:	4825      	ldr	r0, [pc, #148]	; (c450 <_svfiprintf_r+0x1dc>)
    c3ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c3be:	2206      	movs	r2, #6
    c3c0:	1c7e      	adds	r6, r7, #1
    c3c2:	f000 fa7d 	bl	c8c0 <memchr>
    c3c6:	2800      	cmp	r0, #0
    c3c8:	d035      	beq.n	c436 <_svfiprintf_r+0x1c2>
    c3ca:	4b22      	ldr	r3, [pc, #136]	; (c454 <_svfiprintf_r+0x1e0>)
    c3cc:	b9fb      	cbnz	r3, c40e <_svfiprintf_r+0x19a>
    c3ce:	9b03      	ldr	r3, [sp, #12]
    c3d0:	3307      	adds	r3, #7
    c3d2:	f023 0307 	bic.w	r3, r3, #7
    c3d6:	3308      	adds	r3, #8
    c3d8:	9303      	str	r3, [sp, #12]
    c3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3dc:	444b      	add	r3, r9
    c3de:	9309      	str	r3, [sp, #36]	; 0x24
    c3e0:	e76c      	b.n	c2bc <_svfiprintf_r+0x48>
    c3e2:	fb00 3202 	mla	r2, r0, r2, r3
    c3e6:	2101      	movs	r1, #1
    c3e8:	e7a3      	b.n	c332 <_svfiprintf_r+0xbe>
    c3ea:	2300      	movs	r3, #0
    c3ec:	9305      	str	r3, [sp, #20]
    c3ee:	4618      	mov	r0, r3
    c3f0:	240a      	movs	r4, #10
    c3f2:	460f      	mov	r7, r1
    c3f4:	3101      	adds	r1, #1
    c3f6:	783a      	ldrb	r2, [r7, #0]
    c3f8:	3a30      	subs	r2, #48	; 0x30
    c3fa:	2a09      	cmp	r2, #9
    c3fc:	d903      	bls.n	c406 <_svfiprintf_r+0x192>
    c3fe:	2b00      	cmp	r3, #0
    c400:	d0ca      	beq.n	c398 <_svfiprintf_r+0x124>
    c402:	9005      	str	r0, [sp, #20]
    c404:	e7c8      	b.n	c398 <_svfiprintf_r+0x124>
    c406:	fb04 2000 	mla	r0, r4, r0, r2
    c40a:	2301      	movs	r3, #1
    c40c:	e7f1      	b.n	c3f2 <_svfiprintf_r+0x17e>
    c40e:	ab03      	add	r3, sp, #12
    c410:	9300      	str	r3, [sp, #0]
    c412:	462a      	mov	r2, r5
    c414:	4b10      	ldr	r3, [pc, #64]	; (c458 <_svfiprintf_r+0x1e4>)
    c416:	a904      	add	r1, sp, #16
    c418:	4640      	mov	r0, r8
    c41a:	f3af 8000 	nop.w
    c41e:	f1b0 3fff 	cmp.w	r0, #4294967295
    c422:	4681      	mov	r9, r0
    c424:	d1d9      	bne.n	c3da <_svfiprintf_r+0x166>
    c426:	89ab      	ldrh	r3, [r5, #12]
    c428:	065b      	lsls	r3, r3, #25
    c42a:	f53f af38 	bmi.w	c29e <_svfiprintf_r+0x2a>
    c42e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c430:	b01d      	add	sp, #116	; 0x74
    c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c436:	ab03      	add	r3, sp, #12
    c438:	9300      	str	r3, [sp, #0]
    c43a:	462a      	mov	r2, r5
    c43c:	4b06      	ldr	r3, [pc, #24]	; (c458 <_svfiprintf_r+0x1e4>)
    c43e:	a904      	add	r1, sp, #16
    c440:	4640      	mov	r0, r8
    c442:	f000 f881 	bl	c548 <_printf_i>
    c446:	e7ea      	b.n	c41e <_svfiprintf_r+0x1aa>
    c448:	0000d338 	.word	0x0000d338
    c44c:	0000d33e 	.word	0x0000d33e
    c450:	0000d342 	.word	0x0000d342
    c454:	00000000 	.word	0x00000000
    c458:	0000c1bd 	.word	0x0000c1bd

0000c45c <_printf_common>:
    c45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c460:	4691      	mov	r9, r2
    c462:	461f      	mov	r7, r3
    c464:	688a      	ldr	r2, [r1, #8]
    c466:	690b      	ldr	r3, [r1, #16]
    c468:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c46c:	4293      	cmp	r3, r2
    c46e:	bfb8      	it	lt
    c470:	4613      	movlt	r3, r2
    c472:	f8c9 3000 	str.w	r3, [r9]
    c476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c47a:	4606      	mov	r6, r0
    c47c:	460c      	mov	r4, r1
    c47e:	b112      	cbz	r2, c486 <_printf_common+0x2a>
    c480:	3301      	adds	r3, #1
    c482:	f8c9 3000 	str.w	r3, [r9]
    c486:	6823      	ldr	r3, [r4, #0]
    c488:	0699      	lsls	r1, r3, #26
    c48a:	bf42      	ittt	mi
    c48c:	f8d9 3000 	ldrmi.w	r3, [r9]
    c490:	3302      	addmi	r3, #2
    c492:	f8c9 3000 	strmi.w	r3, [r9]
    c496:	6825      	ldr	r5, [r4, #0]
    c498:	f015 0506 	ands.w	r5, r5, #6
    c49c:	d107      	bne.n	c4ae <_printf_common+0x52>
    c49e:	f104 0a19 	add.w	sl, r4, #25
    c4a2:	68e3      	ldr	r3, [r4, #12]
    c4a4:	f8d9 2000 	ldr.w	r2, [r9]
    c4a8:	1a9b      	subs	r3, r3, r2
    c4aa:	429d      	cmp	r5, r3
    c4ac:	db29      	blt.n	c502 <_printf_common+0xa6>
    c4ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    c4b2:	6822      	ldr	r2, [r4, #0]
    c4b4:	3300      	adds	r3, #0
    c4b6:	bf18      	it	ne
    c4b8:	2301      	movne	r3, #1
    c4ba:	0692      	lsls	r2, r2, #26
    c4bc:	d42e      	bmi.n	c51c <_printf_common+0xc0>
    c4be:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c4c2:	4639      	mov	r1, r7
    c4c4:	4630      	mov	r0, r6
    c4c6:	47c0      	blx	r8
    c4c8:	3001      	adds	r0, #1
    c4ca:	d021      	beq.n	c510 <_printf_common+0xb4>
    c4cc:	6823      	ldr	r3, [r4, #0]
    c4ce:	68e5      	ldr	r5, [r4, #12]
    c4d0:	f8d9 2000 	ldr.w	r2, [r9]
    c4d4:	f003 0306 	and.w	r3, r3, #6
    c4d8:	2b04      	cmp	r3, #4
    c4da:	bf08      	it	eq
    c4dc:	1aad      	subeq	r5, r5, r2
    c4de:	68a3      	ldr	r3, [r4, #8]
    c4e0:	6922      	ldr	r2, [r4, #16]
    c4e2:	bf0c      	ite	eq
    c4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    c4e8:	2500      	movne	r5, #0
    c4ea:	4293      	cmp	r3, r2
    c4ec:	bfc4      	itt	gt
    c4ee:	1a9b      	subgt	r3, r3, r2
    c4f0:	18ed      	addgt	r5, r5, r3
    c4f2:	f04f 0900 	mov.w	r9, #0
    c4f6:	341a      	adds	r4, #26
    c4f8:	454d      	cmp	r5, r9
    c4fa:	d11b      	bne.n	c534 <_printf_common+0xd8>
    c4fc:	2000      	movs	r0, #0
    c4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c502:	2301      	movs	r3, #1
    c504:	4652      	mov	r2, sl
    c506:	4639      	mov	r1, r7
    c508:	4630      	mov	r0, r6
    c50a:	47c0      	blx	r8
    c50c:	3001      	adds	r0, #1
    c50e:	d103      	bne.n	c518 <_printf_common+0xbc>
    c510:	f04f 30ff 	mov.w	r0, #4294967295
    c514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c518:	3501      	adds	r5, #1
    c51a:	e7c2      	b.n	c4a2 <_printf_common+0x46>
    c51c:	18e1      	adds	r1, r4, r3
    c51e:	1c5a      	adds	r2, r3, #1
    c520:	2030      	movs	r0, #48	; 0x30
    c522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    c526:	4422      	add	r2, r4
    c528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    c52c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    c530:	3302      	adds	r3, #2
    c532:	e7c4      	b.n	c4be <_printf_common+0x62>
    c534:	2301      	movs	r3, #1
    c536:	4622      	mov	r2, r4
    c538:	4639      	mov	r1, r7
    c53a:	4630      	mov	r0, r6
    c53c:	47c0      	blx	r8
    c53e:	3001      	adds	r0, #1
    c540:	d0e6      	beq.n	c510 <_printf_common+0xb4>
    c542:	f109 0901 	add.w	r9, r9, #1
    c546:	e7d7      	b.n	c4f8 <_printf_common+0x9c>

0000c548 <_printf_i>:
    c548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c54c:	4617      	mov	r7, r2
    c54e:	7e0a      	ldrb	r2, [r1, #24]
    c550:	b085      	sub	sp, #20
    c552:	2a6e      	cmp	r2, #110	; 0x6e
    c554:	4698      	mov	r8, r3
    c556:	4606      	mov	r6, r0
    c558:	460c      	mov	r4, r1
    c55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c55c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    c560:	f000 80bc 	beq.w	c6dc <_printf_i+0x194>
    c564:	d81a      	bhi.n	c59c <_printf_i+0x54>
    c566:	2a63      	cmp	r2, #99	; 0x63
    c568:	d02e      	beq.n	c5c8 <_printf_i+0x80>
    c56a:	d80a      	bhi.n	c582 <_printf_i+0x3a>
    c56c:	2a00      	cmp	r2, #0
    c56e:	f000 80c8 	beq.w	c702 <_printf_i+0x1ba>
    c572:	2a58      	cmp	r2, #88	; 0x58
    c574:	f000 808a 	beq.w	c68c <_printf_i+0x144>
    c578:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c57c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    c580:	e02a      	b.n	c5d8 <_printf_i+0x90>
    c582:	2a64      	cmp	r2, #100	; 0x64
    c584:	d001      	beq.n	c58a <_printf_i+0x42>
    c586:	2a69      	cmp	r2, #105	; 0x69
    c588:	d1f6      	bne.n	c578 <_printf_i+0x30>
    c58a:	6821      	ldr	r1, [r4, #0]
    c58c:	681a      	ldr	r2, [r3, #0]
    c58e:	f011 0f80 	tst.w	r1, #128	; 0x80
    c592:	d023      	beq.n	c5dc <_printf_i+0x94>
    c594:	1d11      	adds	r1, r2, #4
    c596:	6019      	str	r1, [r3, #0]
    c598:	6813      	ldr	r3, [r2, #0]
    c59a:	e027      	b.n	c5ec <_printf_i+0xa4>
    c59c:	2a73      	cmp	r2, #115	; 0x73
    c59e:	f000 80b4 	beq.w	c70a <_printf_i+0x1c2>
    c5a2:	d808      	bhi.n	c5b6 <_printf_i+0x6e>
    c5a4:	2a6f      	cmp	r2, #111	; 0x6f
    c5a6:	d02a      	beq.n	c5fe <_printf_i+0xb6>
    c5a8:	2a70      	cmp	r2, #112	; 0x70
    c5aa:	d1e5      	bne.n	c578 <_printf_i+0x30>
    c5ac:	680a      	ldr	r2, [r1, #0]
    c5ae:	f042 0220 	orr.w	r2, r2, #32
    c5b2:	600a      	str	r2, [r1, #0]
    c5b4:	e003      	b.n	c5be <_printf_i+0x76>
    c5b6:	2a75      	cmp	r2, #117	; 0x75
    c5b8:	d021      	beq.n	c5fe <_printf_i+0xb6>
    c5ba:	2a78      	cmp	r2, #120	; 0x78
    c5bc:	d1dc      	bne.n	c578 <_printf_i+0x30>
    c5be:	2278      	movs	r2, #120	; 0x78
    c5c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    c5c4:	496e      	ldr	r1, [pc, #440]	; (c780 <_printf_i+0x238>)
    c5c6:	e064      	b.n	c692 <_printf_i+0x14a>
    c5c8:	681a      	ldr	r2, [r3, #0]
    c5ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
    c5ce:	1d11      	adds	r1, r2, #4
    c5d0:	6019      	str	r1, [r3, #0]
    c5d2:	6813      	ldr	r3, [r2, #0]
    c5d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c5d8:	2301      	movs	r3, #1
    c5da:	e0a3      	b.n	c724 <_printf_i+0x1dc>
    c5dc:	f011 0f40 	tst.w	r1, #64	; 0x40
    c5e0:	f102 0104 	add.w	r1, r2, #4
    c5e4:	6019      	str	r1, [r3, #0]
    c5e6:	d0d7      	beq.n	c598 <_printf_i+0x50>
    c5e8:	f9b2 3000 	ldrsh.w	r3, [r2]
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	da03      	bge.n	c5f8 <_printf_i+0xb0>
    c5f0:	222d      	movs	r2, #45	; 0x2d
    c5f2:	425b      	negs	r3, r3
    c5f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    c5f8:	4962      	ldr	r1, [pc, #392]	; (c784 <_printf_i+0x23c>)
    c5fa:	220a      	movs	r2, #10
    c5fc:	e017      	b.n	c62e <_printf_i+0xe6>
    c5fe:	6820      	ldr	r0, [r4, #0]
    c600:	6819      	ldr	r1, [r3, #0]
    c602:	f010 0f80 	tst.w	r0, #128	; 0x80
    c606:	d003      	beq.n	c610 <_printf_i+0xc8>
    c608:	1d08      	adds	r0, r1, #4
    c60a:	6018      	str	r0, [r3, #0]
    c60c:	680b      	ldr	r3, [r1, #0]
    c60e:	e006      	b.n	c61e <_printf_i+0xd6>
    c610:	f010 0f40 	tst.w	r0, #64	; 0x40
    c614:	f101 0004 	add.w	r0, r1, #4
    c618:	6018      	str	r0, [r3, #0]
    c61a:	d0f7      	beq.n	c60c <_printf_i+0xc4>
    c61c:	880b      	ldrh	r3, [r1, #0]
    c61e:	4959      	ldr	r1, [pc, #356]	; (c784 <_printf_i+0x23c>)
    c620:	2a6f      	cmp	r2, #111	; 0x6f
    c622:	bf14      	ite	ne
    c624:	220a      	movne	r2, #10
    c626:	2208      	moveq	r2, #8
    c628:	2000      	movs	r0, #0
    c62a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    c62e:	6865      	ldr	r5, [r4, #4]
    c630:	60a5      	str	r5, [r4, #8]
    c632:	2d00      	cmp	r5, #0
    c634:	f2c0 809c 	blt.w	c770 <_printf_i+0x228>
    c638:	6820      	ldr	r0, [r4, #0]
    c63a:	f020 0004 	bic.w	r0, r0, #4
    c63e:	6020      	str	r0, [r4, #0]
    c640:	2b00      	cmp	r3, #0
    c642:	d13f      	bne.n	c6c4 <_printf_i+0x17c>
    c644:	2d00      	cmp	r5, #0
    c646:	f040 8095 	bne.w	c774 <_printf_i+0x22c>
    c64a:	4675      	mov	r5, lr
    c64c:	2a08      	cmp	r2, #8
    c64e:	d10b      	bne.n	c668 <_printf_i+0x120>
    c650:	6823      	ldr	r3, [r4, #0]
    c652:	07da      	lsls	r2, r3, #31
    c654:	d508      	bpl.n	c668 <_printf_i+0x120>
    c656:	6923      	ldr	r3, [r4, #16]
    c658:	6862      	ldr	r2, [r4, #4]
    c65a:	429a      	cmp	r2, r3
    c65c:	bfde      	ittt	le
    c65e:	2330      	movle	r3, #48	; 0x30
    c660:	f805 3c01 	strble.w	r3, [r5, #-1]
    c664:	f105 35ff 	addle.w	r5, r5, #4294967295
    c668:	ebae 0305 	sub.w	r3, lr, r5
    c66c:	6123      	str	r3, [r4, #16]
    c66e:	f8cd 8000 	str.w	r8, [sp]
    c672:	463b      	mov	r3, r7
    c674:	aa03      	add	r2, sp, #12
    c676:	4621      	mov	r1, r4
    c678:	4630      	mov	r0, r6
    c67a:	f7ff feef 	bl	c45c <_printf_common>
    c67e:	3001      	adds	r0, #1
    c680:	d155      	bne.n	c72e <_printf_i+0x1e6>
    c682:	f04f 30ff 	mov.w	r0, #4294967295
    c686:	b005      	add	sp, #20
    c688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c68c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    c690:	493c      	ldr	r1, [pc, #240]	; (c784 <_printf_i+0x23c>)
    c692:	6822      	ldr	r2, [r4, #0]
    c694:	6818      	ldr	r0, [r3, #0]
    c696:	f012 0f80 	tst.w	r2, #128	; 0x80
    c69a:	f100 0504 	add.w	r5, r0, #4
    c69e:	601d      	str	r5, [r3, #0]
    c6a0:	d001      	beq.n	c6a6 <_printf_i+0x15e>
    c6a2:	6803      	ldr	r3, [r0, #0]
    c6a4:	e002      	b.n	c6ac <_printf_i+0x164>
    c6a6:	0655      	lsls	r5, r2, #25
    c6a8:	d5fb      	bpl.n	c6a2 <_printf_i+0x15a>
    c6aa:	8803      	ldrh	r3, [r0, #0]
    c6ac:	07d0      	lsls	r0, r2, #31
    c6ae:	bf44      	itt	mi
    c6b0:	f042 0220 	orrmi.w	r2, r2, #32
    c6b4:	6022      	strmi	r2, [r4, #0]
    c6b6:	b91b      	cbnz	r3, c6c0 <_printf_i+0x178>
    c6b8:	6822      	ldr	r2, [r4, #0]
    c6ba:	f022 0220 	bic.w	r2, r2, #32
    c6be:	6022      	str	r2, [r4, #0]
    c6c0:	2210      	movs	r2, #16
    c6c2:	e7b1      	b.n	c628 <_printf_i+0xe0>
    c6c4:	4675      	mov	r5, lr
    c6c6:	fbb3 f0f2 	udiv	r0, r3, r2
    c6ca:	fb02 3310 	mls	r3, r2, r0, r3
    c6ce:	5ccb      	ldrb	r3, [r1, r3]
    c6d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    c6d4:	4603      	mov	r3, r0
    c6d6:	2800      	cmp	r0, #0
    c6d8:	d1f5      	bne.n	c6c6 <_printf_i+0x17e>
    c6da:	e7b7      	b.n	c64c <_printf_i+0x104>
    c6dc:	6808      	ldr	r0, [r1, #0]
    c6de:	681a      	ldr	r2, [r3, #0]
    c6e0:	6949      	ldr	r1, [r1, #20]
    c6e2:	f010 0f80 	tst.w	r0, #128	; 0x80
    c6e6:	d004      	beq.n	c6f2 <_printf_i+0x1aa>
    c6e8:	1d10      	adds	r0, r2, #4
    c6ea:	6018      	str	r0, [r3, #0]
    c6ec:	6813      	ldr	r3, [r2, #0]
    c6ee:	6019      	str	r1, [r3, #0]
    c6f0:	e007      	b.n	c702 <_printf_i+0x1ba>
    c6f2:	f010 0f40 	tst.w	r0, #64	; 0x40
    c6f6:	f102 0004 	add.w	r0, r2, #4
    c6fa:	6018      	str	r0, [r3, #0]
    c6fc:	6813      	ldr	r3, [r2, #0]
    c6fe:	d0f6      	beq.n	c6ee <_printf_i+0x1a6>
    c700:	8019      	strh	r1, [r3, #0]
    c702:	2300      	movs	r3, #0
    c704:	6123      	str	r3, [r4, #16]
    c706:	4675      	mov	r5, lr
    c708:	e7b1      	b.n	c66e <_printf_i+0x126>
    c70a:	681a      	ldr	r2, [r3, #0]
    c70c:	1d11      	adds	r1, r2, #4
    c70e:	6019      	str	r1, [r3, #0]
    c710:	6815      	ldr	r5, [r2, #0]
    c712:	6862      	ldr	r2, [r4, #4]
    c714:	2100      	movs	r1, #0
    c716:	4628      	mov	r0, r5
    c718:	f000 f8d2 	bl	c8c0 <memchr>
    c71c:	b108      	cbz	r0, c722 <_printf_i+0x1da>
    c71e:	1b40      	subs	r0, r0, r5
    c720:	6060      	str	r0, [r4, #4]
    c722:	6863      	ldr	r3, [r4, #4]
    c724:	6123      	str	r3, [r4, #16]
    c726:	2300      	movs	r3, #0
    c728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c72c:	e79f      	b.n	c66e <_printf_i+0x126>
    c72e:	6923      	ldr	r3, [r4, #16]
    c730:	462a      	mov	r2, r5
    c732:	4639      	mov	r1, r7
    c734:	4630      	mov	r0, r6
    c736:	47c0      	blx	r8
    c738:	3001      	adds	r0, #1
    c73a:	d0a2      	beq.n	c682 <_printf_i+0x13a>
    c73c:	6823      	ldr	r3, [r4, #0]
    c73e:	079b      	lsls	r3, r3, #30
    c740:	d507      	bpl.n	c752 <_printf_i+0x20a>
    c742:	2500      	movs	r5, #0
    c744:	f104 0919 	add.w	r9, r4, #25
    c748:	68e3      	ldr	r3, [r4, #12]
    c74a:	9a03      	ldr	r2, [sp, #12]
    c74c:	1a9b      	subs	r3, r3, r2
    c74e:	429d      	cmp	r5, r3
    c750:	db05      	blt.n	c75e <_printf_i+0x216>
    c752:	68e0      	ldr	r0, [r4, #12]
    c754:	9b03      	ldr	r3, [sp, #12]
    c756:	4298      	cmp	r0, r3
    c758:	bfb8      	it	lt
    c75a:	4618      	movlt	r0, r3
    c75c:	e793      	b.n	c686 <_printf_i+0x13e>
    c75e:	2301      	movs	r3, #1
    c760:	464a      	mov	r2, r9
    c762:	4639      	mov	r1, r7
    c764:	4630      	mov	r0, r6
    c766:	47c0      	blx	r8
    c768:	3001      	adds	r0, #1
    c76a:	d08a      	beq.n	c682 <_printf_i+0x13a>
    c76c:	3501      	adds	r5, #1
    c76e:	e7eb      	b.n	c748 <_printf_i+0x200>
    c770:	2b00      	cmp	r3, #0
    c772:	d1a7      	bne.n	c6c4 <_printf_i+0x17c>
    c774:	780b      	ldrb	r3, [r1, #0]
    c776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c77a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c77e:	e765      	b.n	c64c <_printf_i+0x104>
    c780:	0000d35a 	.word	0x0000d35a
    c784:	0000d349 	.word	0x0000d349

0000c788 <__sread>:
    c788:	b510      	push	{r4, lr}
    c78a:	460c      	mov	r4, r1
    c78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c790:	f000 f926 	bl	c9e0 <_read_r>
    c794:	2800      	cmp	r0, #0
    c796:	bfab      	itete	ge
    c798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    c79a:	89a3      	ldrhlt	r3, [r4, #12]
    c79c:	181b      	addge	r3, r3, r0
    c79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    c7a2:	bfac      	ite	ge
    c7a4:	6563      	strge	r3, [r4, #84]	; 0x54
    c7a6:	81a3      	strhlt	r3, [r4, #12]
    c7a8:	bd10      	pop	{r4, pc}

0000c7aa <__swrite>:
    c7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7ae:	461f      	mov	r7, r3
    c7b0:	898b      	ldrh	r3, [r1, #12]
    c7b2:	05db      	lsls	r3, r3, #23
    c7b4:	4605      	mov	r5, r0
    c7b6:	460c      	mov	r4, r1
    c7b8:	4616      	mov	r6, r2
    c7ba:	d505      	bpl.n	c7c8 <__swrite+0x1e>
    c7bc:	2302      	movs	r3, #2
    c7be:	2200      	movs	r2, #0
    c7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c7c4:	f000 f868 	bl	c898 <_lseek_r>
    c7c8:	89a3      	ldrh	r3, [r4, #12]
    c7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c7d2:	81a3      	strh	r3, [r4, #12]
    c7d4:	4632      	mov	r2, r6
    c7d6:	463b      	mov	r3, r7
    c7d8:	4628      	mov	r0, r5
    c7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c7de:	f000 b817 	b.w	c810 <_write_r>

0000c7e2 <__sseek>:
    c7e2:	b510      	push	{r4, lr}
    c7e4:	460c      	mov	r4, r1
    c7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c7ea:	f000 f855 	bl	c898 <_lseek_r>
    c7ee:	1c43      	adds	r3, r0, #1
    c7f0:	89a3      	ldrh	r3, [r4, #12]
    c7f2:	bf15      	itete	ne
    c7f4:	6560      	strne	r0, [r4, #84]	; 0x54
    c7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c7fe:	81a3      	strheq	r3, [r4, #12]
    c800:	bf18      	it	ne
    c802:	81a3      	strhne	r3, [r4, #12]
    c804:	bd10      	pop	{r4, pc}

0000c806 <__sclose>:
    c806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c80a:	f000 b813 	b.w	c834 <_close_r>
	...

0000c810 <_write_r>:
    c810:	b538      	push	{r3, r4, r5, lr}
    c812:	4c07      	ldr	r4, [pc, #28]	; (c830 <_write_r+0x20>)
    c814:	4605      	mov	r5, r0
    c816:	4608      	mov	r0, r1
    c818:	4611      	mov	r1, r2
    c81a:	2200      	movs	r2, #0
    c81c:	6022      	str	r2, [r4, #0]
    c81e:	461a      	mov	r2, r3
    c820:	f7fd f9a8 	bl	9b74 <_write>
    c824:	1c43      	adds	r3, r0, #1
    c826:	d102      	bne.n	c82e <_write_r+0x1e>
    c828:	6823      	ldr	r3, [r4, #0]
    c82a:	b103      	cbz	r3, c82e <_write_r+0x1e>
    c82c:	602b      	str	r3, [r5, #0]
    c82e:	bd38      	pop	{r3, r4, r5, pc}
    c830:	20003d5c 	.word	0x20003d5c

0000c834 <_close_r>:
    c834:	b538      	push	{r3, r4, r5, lr}
    c836:	4c06      	ldr	r4, [pc, #24]	; (c850 <_close_r+0x1c>)
    c838:	2300      	movs	r3, #0
    c83a:	4605      	mov	r5, r0
    c83c:	4608      	mov	r0, r1
    c83e:	6023      	str	r3, [r4, #0]
    c840:	f7f9 f862 	bl	5908 <_close>
    c844:	1c43      	adds	r3, r0, #1
    c846:	d102      	bne.n	c84e <_close_r+0x1a>
    c848:	6823      	ldr	r3, [r4, #0]
    c84a:	b103      	cbz	r3, c84e <_close_r+0x1a>
    c84c:	602b      	str	r3, [r5, #0]
    c84e:	bd38      	pop	{r3, r4, r5, pc}
    c850:	20003d5c 	.word	0x20003d5c

0000c854 <_fstat_r>:
    c854:	b538      	push	{r3, r4, r5, lr}
    c856:	4c07      	ldr	r4, [pc, #28]	; (c874 <_fstat_r+0x20>)
    c858:	2300      	movs	r3, #0
    c85a:	4605      	mov	r5, r0
    c85c:	4608      	mov	r0, r1
    c85e:	4611      	mov	r1, r2
    c860:	6023      	str	r3, [r4, #0]
    c862:	f7f9 f854 	bl	590e <_fstat>
    c866:	1c43      	adds	r3, r0, #1
    c868:	d102      	bne.n	c870 <_fstat_r+0x1c>
    c86a:	6823      	ldr	r3, [r4, #0]
    c86c:	b103      	cbz	r3, c870 <_fstat_r+0x1c>
    c86e:	602b      	str	r3, [r5, #0]
    c870:	bd38      	pop	{r3, r4, r5, pc}
    c872:	bf00      	nop
    c874:	20003d5c 	.word	0x20003d5c

0000c878 <_isatty_r>:
    c878:	b538      	push	{r3, r4, r5, lr}
    c87a:	4c06      	ldr	r4, [pc, #24]	; (c894 <_isatty_r+0x1c>)
    c87c:	2300      	movs	r3, #0
    c87e:	4605      	mov	r5, r0
    c880:	4608      	mov	r0, r1
    c882:	6023      	str	r3, [r4, #0]
    c884:	f7f9 f848 	bl	5918 <_isatty>
    c888:	1c43      	adds	r3, r0, #1
    c88a:	d102      	bne.n	c892 <_isatty_r+0x1a>
    c88c:	6823      	ldr	r3, [r4, #0]
    c88e:	b103      	cbz	r3, c892 <_isatty_r+0x1a>
    c890:	602b      	str	r3, [r5, #0]
    c892:	bd38      	pop	{r3, r4, r5, pc}
    c894:	20003d5c 	.word	0x20003d5c

0000c898 <_lseek_r>:
    c898:	b538      	push	{r3, r4, r5, lr}
    c89a:	4c07      	ldr	r4, [pc, #28]	; (c8b8 <_lseek_r+0x20>)
    c89c:	4605      	mov	r5, r0
    c89e:	4608      	mov	r0, r1
    c8a0:	4611      	mov	r1, r2
    c8a2:	2200      	movs	r2, #0
    c8a4:	6022      	str	r2, [r4, #0]
    c8a6:	461a      	mov	r2, r3
    c8a8:	f7f9 f838 	bl	591c <_lseek>
    c8ac:	1c43      	adds	r3, r0, #1
    c8ae:	d102      	bne.n	c8b6 <_lseek_r+0x1e>
    c8b0:	6823      	ldr	r3, [r4, #0]
    c8b2:	b103      	cbz	r3, c8b6 <_lseek_r+0x1e>
    c8b4:	602b      	str	r3, [r5, #0]
    c8b6:	bd38      	pop	{r3, r4, r5, pc}
    c8b8:	20003d5c 	.word	0x20003d5c
    c8bc:	00000000 	.word	0x00000000

0000c8c0 <memchr>:
    c8c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c8c4:	2a10      	cmp	r2, #16
    c8c6:	db2b      	blt.n	c920 <memchr+0x60>
    c8c8:	f010 0f07 	tst.w	r0, #7
    c8cc:	d008      	beq.n	c8e0 <memchr+0x20>
    c8ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    c8d2:	3a01      	subs	r2, #1
    c8d4:	428b      	cmp	r3, r1
    c8d6:	d02d      	beq.n	c934 <memchr+0x74>
    c8d8:	f010 0f07 	tst.w	r0, #7
    c8dc:	b342      	cbz	r2, c930 <memchr+0x70>
    c8de:	d1f6      	bne.n	c8ce <memchr+0xe>
    c8e0:	b4f0      	push	{r4, r5, r6, r7}
    c8e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c8e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c8ea:	f022 0407 	bic.w	r4, r2, #7
    c8ee:	f07f 0700 	mvns.w	r7, #0
    c8f2:	2300      	movs	r3, #0
    c8f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c8f8:	3c08      	subs	r4, #8
    c8fa:	ea85 0501 	eor.w	r5, r5, r1
    c8fe:	ea86 0601 	eor.w	r6, r6, r1
    c902:	fa85 f547 	uadd8	r5, r5, r7
    c906:	faa3 f587 	sel	r5, r3, r7
    c90a:	fa86 f647 	uadd8	r6, r6, r7
    c90e:	faa5 f687 	sel	r6, r5, r7
    c912:	b98e      	cbnz	r6, c938 <memchr+0x78>
    c914:	d1ee      	bne.n	c8f4 <memchr+0x34>
    c916:	bcf0      	pop	{r4, r5, r6, r7}
    c918:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c91c:	f002 0207 	and.w	r2, r2, #7
    c920:	b132      	cbz	r2, c930 <memchr+0x70>
    c922:	f810 3b01 	ldrb.w	r3, [r0], #1
    c926:	3a01      	subs	r2, #1
    c928:	ea83 0301 	eor.w	r3, r3, r1
    c92c:	b113      	cbz	r3, c934 <memchr+0x74>
    c92e:	d1f8      	bne.n	c922 <memchr+0x62>
    c930:	2000      	movs	r0, #0
    c932:	4770      	bx	lr
    c934:	3801      	subs	r0, #1
    c936:	4770      	bx	lr
    c938:	2d00      	cmp	r5, #0
    c93a:	bf06      	itte	eq
    c93c:	4635      	moveq	r5, r6
    c93e:	3803      	subeq	r0, #3
    c940:	3807      	subne	r0, #7
    c942:	f015 0f01 	tst.w	r5, #1
    c946:	d107      	bne.n	c958 <memchr+0x98>
    c948:	3001      	adds	r0, #1
    c94a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c94e:	bf02      	ittt	eq
    c950:	3001      	addeq	r0, #1
    c952:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c956:	3001      	addeq	r0, #1
    c958:	bcf0      	pop	{r4, r5, r6, r7}
    c95a:	3801      	subs	r0, #1
    c95c:	4770      	bx	lr
    c95e:	bf00      	nop

0000c960 <memmove>:
    c960:	4288      	cmp	r0, r1
    c962:	b510      	push	{r4, lr}
    c964:	eb01 0302 	add.w	r3, r1, r2
    c968:	d803      	bhi.n	c972 <memmove+0x12>
    c96a:	1e42      	subs	r2, r0, #1
    c96c:	4299      	cmp	r1, r3
    c96e:	d10c      	bne.n	c98a <memmove+0x2a>
    c970:	bd10      	pop	{r4, pc}
    c972:	4298      	cmp	r0, r3
    c974:	d2f9      	bcs.n	c96a <memmove+0xa>
    c976:	1881      	adds	r1, r0, r2
    c978:	1ad2      	subs	r2, r2, r3
    c97a:	42d3      	cmn	r3, r2
    c97c:	d100      	bne.n	c980 <memmove+0x20>
    c97e:	bd10      	pop	{r4, pc}
    c980:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c984:	f801 4d01 	strb.w	r4, [r1, #-1]!
    c988:	e7f7      	b.n	c97a <memmove+0x1a>
    c98a:	f811 4b01 	ldrb.w	r4, [r1], #1
    c98e:	f802 4f01 	strb.w	r4, [r2, #1]!
    c992:	e7eb      	b.n	c96c <memmove+0xc>

0000c994 <_realloc_r>:
    c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c996:	4607      	mov	r7, r0
    c998:	4614      	mov	r4, r2
    c99a:	460e      	mov	r6, r1
    c99c:	b921      	cbnz	r1, c9a8 <_realloc_r+0x14>
    c99e:	4611      	mov	r1, r2
    c9a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c9a4:	f7fe bfb4 	b.w	b910 <_malloc_r>
    c9a8:	b922      	cbnz	r2, c9b4 <_realloc_r+0x20>
    c9aa:	f7fe ff63 	bl	b874 <_free_r>
    c9ae:	4625      	mov	r5, r4
    c9b0:	4628      	mov	r0, r5
    c9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9b4:	f000 f826 	bl	ca04 <_malloc_usable_size_r>
    c9b8:	4284      	cmp	r4, r0
    c9ba:	d90f      	bls.n	c9dc <_realloc_r+0x48>
    c9bc:	4621      	mov	r1, r4
    c9be:	4638      	mov	r0, r7
    c9c0:	f7fe ffa6 	bl	b910 <_malloc_r>
    c9c4:	4605      	mov	r5, r0
    c9c6:	2800      	cmp	r0, #0
    c9c8:	d0f2      	beq.n	c9b0 <_realloc_r+0x1c>
    c9ca:	4631      	mov	r1, r6
    c9cc:	4622      	mov	r2, r4
    c9ce:	f7fe ff3d 	bl	b84c <memcpy>
    c9d2:	4631      	mov	r1, r6
    c9d4:	4638      	mov	r0, r7
    c9d6:	f7fe ff4d 	bl	b874 <_free_r>
    c9da:	e7e9      	b.n	c9b0 <_realloc_r+0x1c>
    c9dc:	4635      	mov	r5, r6
    c9de:	e7e7      	b.n	c9b0 <_realloc_r+0x1c>

0000c9e0 <_read_r>:
    c9e0:	b538      	push	{r3, r4, r5, lr}
    c9e2:	4c07      	ldr	r4, [pc, #28]	; (ca00 <_read_r+0x20>)
    c9e4:	4605      	mov	r5, r0
    c9e6:	4608      	mov	r0, r1
    c9e8:	4611      	mov	r1, r2
    c9ea:	2200      	movs	r2, #0
    c9ec:	6022      	str	r2, [r4, #0]
    c9ee:	461a      	mov	r2, r3
    c9f0:	f7fd f8b0 	bl	9b54 <_read>
    c9f4:	1c43      	adds	r3, r0, #1
    c9f6:	d102      	bne.n	c9fe <_read_r+0x1e>
    c9f8:	6823      	ldr	r3, [r4, #0]
    c9fa:	b103      	cbz	r3, c9fe <_read_r+0x1e>
    c9fc:	602b      	str	r3, [r5, #0]
    c9fe:	bd38      	pop	{r3, r4, r5, pc}
    ca00:	20003d5c 	.word	0x20003d5c

0000ca04 <_malloc_usable_size_r>:
    ca04:	f851 0c04 	ldr.w	r0, [r1, #-4]
    ca08:	2800      	cmp	r0, #0
    ca0a:	f1a0 0004 	sub.w	r0, r0, #4
    ca0e:	bfbc      	itt	lt
    ca10:	580b      	ldrlt	r3, [r1, r0]
    ca12:	18c0      	addlt	r0, r0, r3
    ca14:	4770      	bx	lr
    ca16:	0000      	movs	r0, r0
    ca18:	682f2e2e 	.word	0x682f2e2e
    ca1c:	692f6c61 	.word	0x692f6c61
    ca20:	756c636e 	.word	0x756c636e
    ca24:	682f6564 	.word	0x682f6564
    ca28:	775f6c61 	.word	0x775f6c61
    ca2c:	682e7464 	.word	0x682e7464
    ca30:	00000000 	.word	0x00000000
    ca34:	4952475b 	.word	0x4952475b
    ca38:	25205d44 	.word	0x25205d44
    ca3c:	25206433 	.word	0x25206433
    ca40:	25206434 	.word	0x25206434
    ca44:	25206434 	.word	0x25206434
    ca48:	4d5b2064 	.word	0x4d5b2064
    ca4c:	5d494449 	.word	0x5d494449
    ca50:	3a684320 	.word	0x3a684320
    ca54:	20642520 	.word	0x20642520
    ca58:	646d4320 	.word	0x646d4320
    ca5c:	6425203a 	.word	0x6425203a
    ca60:	61502020 	.word	0x61502020
    ca64:	316d6172 	.word	0x316d6172
    ca68:	6425203a 	.word	0x6425203a
    ca6c:	61502020 	.word	0x61502020
    ca70:	326d6172 	.word	0x326d6172
    ca74:	6425203a 	.word	0x6425203a
    ca78:	0000000a 	.word	0x0000000a
    ca7c:	4952475b 	.word	0x4952475b
    ca80:	25205d44 	.word	0x25205d44
    ca84:	25206433 	.word	0x25206433
    ca88:	25206434 	.word	0x25206434
    ca8c:	25206434 	.word	0x25206434
    ca90:	4b5b2064 	.word	0x4b5b2064
    ca94:	4f425945 	.word	0x4f425945
    ca98:	5d445241 	.word	0x5d445241
    ca9c:	79654b20 	.word	0x79654b20
    caa0:	6425203a 	.word	0x6425203a
    caa4:	646f4d20 	.word	0x646f4d20
    caa8:	6425203a 	.word	0x6425203a
    caac:	646d4320 	.word	0x646d4320
    cab0:	6425203a 	.word	0x6425203a
    cab4:	4357480a 	.word	0x4357480a
    cab8:	203a4746 	.word	0x203a4746
    cabc:	78383025 	.word	0x78383025
    cac0:	0000000a 	.word	0x0000000a
    cac4:	4952475b 	.word	0x4952475b
    cac8:	25205d44 	.word	0x25205d44
    cacc:	25206433 	.word	0x25206433
    cad0:	25206434 	.word	0x25206434
    cad4:	25206434 	.word	0x25206434
    cad8:	535b2064 	.word	0x535b2064
    cadc:	205d5359 	.word	0x205d5359
    cae0:	20643325 	.word	0x20643325
    cae4:	20643325 	.word	0x20643325
    cae8:	0a643325 	.word	0x0a643325
    caec:	00000000 	.word	0x00000000
    caf0:	4b4e555b 	.word	0x4b4e555b
    caf4:	4e574f4e 	.word	0x4e574f4e
    caf8:	3e2d205d 	.word	0x3e2d205d
    cafc:	6f725020 	.word	0x6f725020
    cb00:	6f636f74 	.word	0x6f636f74
    cb04:	25203a6c 	.word	0x25203a6c
    cb08:	00000a64 	.word	0x00000a64
    cb0c:	0f0e0d0c 	.word	0x0f0e0d0c
    cb10:	0b0a0908 	.word	0x0b0a0908
    cb14:	07060504 	.word	0x07060504
    cb18:	03020100 	.word	0x03020100
    cb1c:	30256325 	.word	0x30256325
    cb20:	30257832 	.word	0x30257832
    cb24:	30257832 	.word	0x30257832
    cb28:	30257832 	.word	0x30257832
    cb2c:	30257832 	.word	0x30257832
    cb30:	63257832 	.word	0x63257832
    cb34:	30256325 	.word	0x30256325
    cb38:	30257832 	.word	0x30257832
    cb3c:	30257832 	.word	0x30257832
    cb40:	30257832 	.word	0x30257832
    cb44:	30257832 	.word	0x30257832
    cb48:	63257832 	.word	0x63257832
    cb4c:	00000000 	.word	0x00000000
    cb50:	78383025 	.word	0x78383025
    cb54:	00000000 	.word	0x00000000
    cb58:	30256325 	.word	0x30256325
    cb5c:	30257832 	.word	0x30257832
    cb60:	30257832 	.word	0x30257832
    cb64:	30257832 	.word	0x30257832
    cb68:	63257832 	.word	0x63257832
    cb6c:	00000000 	.word	0x00000000
    cb70:	63256325 	.word	0x63256325
    cb74:	78323025 	.word	0x78323025
    cb78:	78323025 	.word	0x78323025
    cb7c:	78323025 	.word	0x78323025
    cb80:	78323025 	.word	0x78323025
    cb84:	78323025 	.word	0x78323025
    cb88:	00006325 	.word	0x00006325
    cb8c:	78323025 	.word	0x78323025
    cb90:	00000000 	.word	0x00000000
    cb94:	000a3030 	.word	0x000a3030
    cb98:	682f2e2e 	.word	0x682f2e2e
    cb9c:	732f6c61 	.word	0x732f6c61
    cba0:	682f6372 	.word	0x682f6372
    cba4:	615f6c61 	.word	0x615f6c61
    cba8:	615f6364 	.word	0x615f6364
    cbac:	636e7973 	.word	0x636e7973
    cbb0:	0000632e 	.word	0x0000632e
    cbb4:	682f2e2e 	.word	0x682f2e2e
    cbb8:	732f6c61 	.word	0x732f6c61
    cbbc:	682f6372 	.word	0x682f6372
    cbc0:	635f6c61 	.word	0x635f6c61
    cbc4:	735f6372 	.word	0x735f6372
    cbc8:	2e636e79 	.word	0x2e636e79
    cbcc:	00000063 	.word	0x00000063
    cbd0:	682f2e2e 	.word	0x682f2e2e
    cbd4:	732f6c61 	.word	0x732f6c61
    cbd8:	682f6372 	.word	0x682f6372
    cbdc:	665f6c61 	.word	0x665f6c61
    cbe0:	6873616c 	.word	0x6873616c
    cbe4:	0000632e 	.word	0x0000632e
    cbe8:	682f2e2e 	.word	0x682f2e2e
    cbec:	732f6c61 	.word	0x732f6c61
    cbf0:	682f6372 	.word	0x682f6372
    cbf4:	695f6c61 	.word	0x695f6c61
    cbf8:	6d5f6332 	.word	0x6d5f6332
    cbfc:	7973615f 	.word	0x7973615f
    cc00:	632e636e 	.word	0x632e636e
    cc04:	00000000 	.word	0x00000000
    cc08:	682f2e2e 	.word	0x682f2e2e
    cc0c:	732f6c61 	.word	0x732f6c61
    cc10:	682f6372 	.word	0x682f6372
    cc14:	695f6c61 	.word	0x695f6c61
    cc18:	00632e6f 	.word	0x00632e6f
    cc1c:	682f2e2e 	.word	0x682f2e2e
    cc20:	732f6c61 	.word	0x732f6c61
    cc24:	682f6372 	.word	0x682f6372
    cc28:	715f6c61 	.word	0x715f6c61
    cc2c:	5f697073 	.word	0x5f697073
    cc30:	2e616d64 	.word	0x2e616d64
    cc34:	00000063 	.word	0x00000063
    cc38:	682f2e2e 	.word	0x682f2e2e
    cc3c:	732f6c61 	.word	0x732f6c61
    cc40:	682f6372 	.word	0x682f6372
    cc44:	735f6c61 	.word	0x735f6c61
    cc48:	6d5f6970 	.word	0x6d5f6970
    cc4c:	7973615f 	.word	0x7973615f
    cc50:	632e636e 	.word	0x632e636e
    cc54:	00000000 	.word	0x00000000
    cc58:	682f2e2e 	.word	0x682f2e2e
    cc5c:	732f6c61 	.word	0x732f6c61
    cc60:	682f6372 	.word	0x682f6372
    cc64:	735f6c61 	.word	0x735f6c61
    cc68:	6d5f6970 	.word	0x6d5f6970
    cc6c:	616d645f 	.word	0x616d645f
    cc70:	0000632e 	.word	0x0000632e
    cc74:	682f2e2e 	.word	0x682f2e2e
    cc78:	732f6c61 	.word	0x732f6c61
    cc7c:	682f6372 	.word	0x682f6372
    cc80:	745f6c61 	.word	0x745f6c61
    cc84:	72656d69 	.word	0x72656d69
    cc88:	0000632e 	.word	0x0000632e
    cc8c:	682f2e2e 	.word	0x682f2e2e
    cc90:	732f6c61 	.word	0x732f6c61
    cc94:	682f6372 	.word	0x682f6372
    cc98:	755f6c61 	.word	0x755f6c61
    cc9c:	74726173 	.word	0x74726173
    cca0:	7973615f 	.word	0x7973615f
    cca4:	632e636e 	.word	0x632e636e
    cca8:	00000000 	.word	0x00000000
    ccac:	682f2e2e 	.word	0x682f2e2e
    ccb0:	732f6c61 	.word	0x732f6c61
    ccb4:	682f6372 	.word	0x682f6372
    ccb8:	755f6c61 	.word	0x755f6c61
    ccbc:	74726173 	.word	0x74726173
    ccc0:	6e79735f 	.word	0x6e79735f
    ccc4:	00632e63 	.word	0x00632e63
    ccc8:	682f2e2e 	.word	0x682f2e2e
    cccc:	752f6c61 	.word	0x752f6c61
    ccd0:	736c6974 	.word	0x736c6974
    ccd4:	6372732f 	.word	0x6372732f
    ccd8:	6974752f 	.word	0x6974752f
    ccdc:	6c5f736c 	.word	0x6c5f736c
    cce0:	2e747369 	.word	0x2e747369
    cce4:	00000063 	.word	0x00000063
    cce8:	682f2e2e 	.word	0x682f2e2e
    ccec:	752f6c61 	.word	0x752f6c61
    ccf0:	736c6974 	.word	0x736c6974
    ccf4:	6372732f 	.word	0x6372732f
    ccf8:	6974752f 	.word	0x6974752f
    ccfc:	725f736c 	.word	0x725f736c
    cd00:	62676e69 	.word	0x62676e69
    cd04:	65666675 	.word	0x65666675
    cd08:	00632e72 	.word	0x00632e72

0000cd0c <_adcs>:
    cd0c:	01000000 0003000c 00041807 00000000     ................
    cd1c:	0014080b 00010000 000c0100 18040003     ................
    cd2c:	00000004 080b0000 00000014 682f2e2e     ............../h
    cd3c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    cd4c:	00000000                                ....

0000cd50 <_cfgs>:
    cd50:	00200600 08068000 00200400 08068000     .. ....... .....
    cd60:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    cd80:	00200b00 14000003 00200a00 08000002     .. ....... .....
    cd90:	00201300 14000003 00000000 00000000     .. .............
	...
    ce40:	00005400 1c000000 00005300 0c000000     .T.......S......

0000ce50 <user_mux_confs>:
	...
    ce7c:	04030201 04030201 00000000 00000000     ................
	...

0000ce94 <channel_confs>:
    ce94:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000ced4 <interrupt_cfg>:
    ced4:	00000002 00000002 00000002 00000002     ................
	...
    cf54:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    cf64:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    cf74:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    cf84:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    cf94:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    cfa4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    cfb4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000cfc4 <_usarts>:
    cfc4:	00000000 40100004 00030000 00700002     .......@......p.
    cfd4:	0000aaaa 00000000 00000001 40100004     ...............@
    cfe4:	00030000 00700002 0000aaaa 00000000     ......p.........
    cff4:	00000002 40100004 00030000 00700002     .......@......p.
    d004:	00005555 00000000 00000004 40100004     UU.............@
    d014:	00030000 00700002 0000aaaa 00000000     ......p.........
    d024:	00000006 40100004 00030000 00700002     .......@......p.
    d034:	0000aaaa 00000000                       ........

0000d03c <_i2cms>:
    d03c:	00000005 00200014 00000100 0000e6e5     ...... .........
    d04c:	00d70000 02dc6c00                       .....l..

0000d054 <sercomspi_regs>:
    d054:	3020000c 00020000 00000000 01ff0005     .. 0............
    d064:	20000c03 00000000 00000000 ff000600     ... ............
    d074:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    d084:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    d094:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    d0a4:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000d0b4 <_tcs>:
    d0b4:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    d0c4:	00000000 006c0001 00000308 00000021     ......l.....!...
    d0d4:	00003a98 00000000 006d0002 00000308     .:........m.....
    d0e4:	00000021 00003a98 00000000 006e0003     !....:........n.
    d0f4:	00000308 00000021 00003a98 00000000     ....!....:......
    d104:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    d114:	0000632e                                .c..

0000d118 <_usb_ep_cfgs>:
    d118:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    d130:	20000d20 00000000 00000008 20000ce0      .. ........... 
    d140:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    d158:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    d168:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    d178:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
    d188:	64657472 00000d0a 73616c46 72652068     rted....Flash er
    d198:	20657361 63637573 66737365 0d0a6c75     ase successful..
    d1a8:	00000000 73616c46 72772068 20657469     ....Flash write 
    d1b8:	63637573 66737365 0d0a6c75 00000000     successful......
    d1c8:	73616c46 65722068 73206461 65636375     Flash read succe
    d1d8:	75667373 000d0a6c 73616c46 61642068     ssful...Flash da
    d1e8:	76206174 66697265 74616369 206e6f69     ta verification 
    d1f8:	6c696166 0a2e6465 0000000d 74697257     failed......Writ
    d208:	202d2065 64616552 20736920 63637573     e - Read is succ
    d218:	66737365 69206c75 5351206e 46204950     essful in QSPI F
    d228:	6873616c 6d656d20 2e79726f 00000d0a     lash memory.....
    d238:	65746e45 676e6972 69614d20 6f4c206e     Entering Main Lo
    d248:	000d706f                                op..

0000d24c <keyboard_report_desc>:
    d24c:	06090105 070501a1 e729e019 01250015     ..........)...%.
    d25c:	08950175 01810281 65290019 65250015     u.........)e..%e
    d26c:	06950875 08050081 05290119 01250015     u.........)...%.
    d27c:	05950175 03950291 00c00191              u...........

0000d288 <mouse_report_desc>:
    d288:	02090105 010901a1 090500a1 03290119     ..............).
    d298:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    d2a8:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    d2b8:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    d2c8:	73752f65 2e636462 00000063              e/usbdc.c...

0000d2d4 <_global_impure_ptr>:
    d2d4:	2000055c                                \.. 

0000d2d8 <__sf_fake_stderr>:
	...

0000d2f8 <__sf_fake_stdin>:
	...

0000d318 <__sf_fake_stdout>:
	...
    d338:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d348:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d358:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d368:	00006665                                ef..

0000d36c <_init>:
    d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d36e:	bf00      	nop
    d370:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d372:	bc08      	pop	{r3}
    d374:	469e      	mov	lr, r3
    d376:	4770      	bx	lr

0000d378 <__init_array_start>:
    d378:	00000289 	.word	0x00000289

0000d37c <_fini>:
    d37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d37e:	bf00      	nop
    d380:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d382:	bc08      	pop	{r3}
    d384:	469e      	mov	lr, r3
    d386:	4770      	bx	lr

0000d388 <__fini_array_start>:
    d388:	00000265 	.word	0x00000265
