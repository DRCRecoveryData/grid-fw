
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009fac  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004c8  20000000  00009fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204c8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204c8  2**0
                  CONTENTS
  4 .bss          00002588  200004d0  0000a480  000204d0  2**4
                  ALLOC
  5 .stack        00010000  20002a58  0000ca08  000204d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00062113  00000000  00000000  0002054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000815f  00000000  00000000  00082662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026cd5  00000000  00000000  0008a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ce8  00000000  00000000  000b1496  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000028f0  00000000  00000000  000b317e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bec4  00000000  00000000  000b5a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a6ef  00000000  00000000  000f1932  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117605  00000000  00000000  0011c021  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000052d4  00000000  00000000  00233628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 2a 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     X*. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	81 2f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ./..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 45 2c 00 00 59 2c 00 00     ........E,..Y,..
      bc:	7d 2a 00 00 89 2a 00 00 95 2a 00 00 a1 2a 00 00     }*...*...*...*..
      cc:	ad 2a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .*..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	b5 2d 00 00 b1 38 00 00 c5 38 00 00 d9 38 00 00     .-...8...8...8..
     104:	ed 38 00 00 01 39 00 00 15 39 00 00 29 39 00 00     .8...9...9..)9..
     114:	3d 39 00 00 51 39 00 00 65 39 00 00 79 39 00 00     =9..Q9..e9..y9..
     124:	8d 39 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .9..............
     134:	e5 02 00 00 a1 39 00 00 b5 39 00 00 c9 39 00 00     .....9...9...9..
     144:	dd 39 00 00 f1 39 00 00 05 3a 00 00 19 3a 00 00     .9...9...:...:..
     154:	2d 3a 00 00 41 3a 00 00 55 3a 00 00 69 3a 00 00     -:..A:..U:..i:..
     164:	7d 3a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     }:..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 ed 57 00 00     .............W..
     184:	f9 57 00 00 05 58 00 00 11 58 00 00 00 00 00 00     .W...X...X......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 01 45 00 00 15 45 00 00     .........E...E..
     1f4:	29 45 00 00 3d 45 00 00 e5 02 00 00 e5 02 00 00     )E..=E..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 11 27 00 00 25 27 00 00 39 27 00 00     .....'..%'..9'..
     224:	4d 27 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     M'..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004d0 	.word	0x200004d0
     280:	00000000 	.word	0x00000000
     284:	00009fac 	.word	0x00009fac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00009fac 	.word	0x00009fac
     2c4:	200004d4 	.word	0x200004d4
     2c8:	00009fac 	.word	0x00009fac
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	00008dd1 	.word	0x00008dd1

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00009fac 	.word	0x00009fac
     364:	200004c8 	.word	0x200004c8
     368:	20002a58 	.word	0x20002a58
     36c:	200004d0 	.word	0x200004d0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00008ddd 	.word	0x00008ddd
     37c:	00007471 	.word	0x00007471

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200004ec 	.word	0x200004ec
     400:	20001338 	.word	0x20001338
     404:	20001430 	.word	0x20001430
     408:	43001c00 	.word	0x43001c00
     40c:	00000f91 	.word	0x00000f91
     410:	00001035 	.word	0x00001035
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200004ec 	.word	0x200004ec
     4a4:	20001508 	.word	0x20001508
     4a8:	20001290 	.word	0x20001290
     4ac:	43002000 	.word	0x43002000
     4b0:	00000f91 	.word	0x00000f91
     4b4:	00001035 	.word	0x00001035
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	2000128c 	.word	0x2000128c
     4e0:	000012d1 	.word	0x000012d1

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00001355 	.word	0x00001355

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20001270 	.word	0x20001270
     544:	00001375 	.word	0x00001375

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	20000514 	.word	0x20000514
     5dc:	40003000 	.word	0x40003000
     5e0:	20001364 	.word	0x20001364
     5e4:	00001aed 	.word	0x00001aed
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	20000524 	.word	0x20000524
     680:	40003400 	.word	0x40003400
     684:	200013b4 	.word	0x200013b4
     688:	00001aed 	.word	0x00001aed
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	20000534 	.word	0x20000534
     724:	41012000 	.word	0x41012000
     728:	200012e8 	.word	0x200012e8
     72c:	00001aed 	.word	0x00001aed
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2240      	movs	r2, #64	; 0x40
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_sync_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	20001218 	.word	0x20001218
     838:	00001629 	.word	0x00001629
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	20000544 	.word	0x20000544
     8d8:	20001468 	.word	0x20001468
     8dc:	00001aed 	.word	0x00001aed
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	200012a8 	.word	0x200012a8
     988:	00001455 	.word	0x00001455
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000554 	.word	0x20000554
     a24:	43000800 	.word	0x43000800
     a28:	200014b8 	.word	0x200014b8
     a2c:	00001aed 	.word	0x00001aed
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	20001404 	.word	0x20001404
     b30:	00001559 	.word	0x00001559
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	00001301 	.word	0x00001301

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00001e99 	.word	0x00001e99
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4b99      	ldr	r3, [pc, #612]	; (e80 <system_init+0x26c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4b99      	ldr	r3, [pc, #612]	; (e84 <system_init+0x270>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	2180      	movs	r1, #128	; 0x80
     c3e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c46:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c4e:	4c8e      	ldr	r4, [pc, #568]	; (e88 <system_init+0x274>)
     c50:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c54:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c58:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c5c:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c60:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c64:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c68:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c7c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c84:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c88:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8c:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c94:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c98:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
     ca0:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca8:	f893 00ce 	ldrb.w	r0, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb0:	f883 00ce 	strb.w	r0, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     cb8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cbc:	4873      	ldr	r0, [pc, #460]	; (e8c <system_init+0x278>)
     cbe:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     cc2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cc6:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     cca:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     cce:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cd2:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cda:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cde:	f44f 6000 	mov.w	r0, #2048	; 0x800
     ce2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce6:	4e6a      	ldr	r6, [pc, #424]	; (e90 <system_init+0x27c>)
     ce8:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     cec:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cf0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cf4:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
     cf8:	f044 0404 	orr.w	r4, r4, #4
     cfc:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d00:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d04:	f893 014b 	ldrb.w	r0, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d08:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0c:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d10:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d14:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d18:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     d1c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d20:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d28:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d34:	4a57      	ldr	r2, [pc, #348]	; (e94 <system_init+0x280>)
     d36:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d3a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     d3e:	3204      	adds	r2, #4
     d40:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d44:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d48:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d4c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d50:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d58:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d6c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d70:	4949      	ldr	r1, [pc, #292]	; (e98 <system_init+0x284>)
     d72:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d76:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d82:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     d86:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d8a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	4942      	ldr	r1, [pc, #264]	; (e9c <system_init+0x288>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4a3a      	ldr	r2, [pc, #232]	; (ea0 <system_init+0x28c>)
     db6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     dc6:	4b37      	ldr	r3, [pc, #220]	; (ea4 <system_init+0x290>)
     dc8:	4798      	blx	r3
	ADC_1_init();
     dca:	4b37      	ldr	r3, [pc, #220]	; (ea8 <system_init+0x294>)
     dcc:	4798      	blx	r3

	CRC_0_init();
     dce:	4b37      	ldr	r3, [pc, #220]	; (eac <system_init+0x298>)
     dd0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     dd2:	4b37      	ldr	r3, [pc, #220]	; (eb0 <system_init+0x29c>)
     dd4:	4798      	blx	r3

	FLASH_0_init();
     dd6:	4b37      	ldr	r3, [pc, #220]	; (eb4 <system_init+0x2a0>)
     dd8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     dda:	4c37      	ldr	r4, [pc, #220]	; (eb8 <system_init+0x2a4>)
     ddc:	6963      	ldr	r3, [r4, #20]
     dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     de2:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     de4:	4b35      	ldr	r3, [pc, #212]	; (ebc <system_init+0x2a8>)
     de6:	4798      	blx	r3
     de8:	4602      	mov	r2, r0
     dea:	4935      	ldr	r1, [pc, #212]	; (ec0 <system_init+0x2ac>)
     dec:	4835      	ldr	r0, [pc, #212]	; (ec4 <system_init+0x2b0>)
     dee:	4d36      	ldr	r5, [pc, #216]	; (ec8 <system_init+0x2b4>)
     df0:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     df2:	4b36      	ldr	r3, [pc, #216]	; (ecc <system_init+0x2b8>)
     df4:	4798      	blx	r3
	USART_NORTH_init();
     df6:	4b36      	ldr	r3, [pc, #216]	; (ed0 <system_init+0x2bc>)
     df8:	4798      	blx	r3
	GRID_AUX_init();
     dfa:	4b36      	ldr	r3, [pc, #216]	; (ed4 <system_init+0x2c0>)
     dfc:	4798      	blx	r3

	UI_SPI_init();
     dfe:	4b36      	ldr	r3, [pc, #216]	; (ed8 <system_init+0x2c4>)
     e00:	4798      	blx	r3
	USART_WEST_init();
     e02:	4b36      	ldr	r3, [pc, #216]	; (edc <system_init+0x2c8>)
     e04:	4798      	blx	r3

	SYS_I2C_init();
     e06:	4b36      	ldr	r3, [pc, #216]	; (ee0 <system_init+0x2cc>)
     e08:	4798      	blx	r3
	USART_SOUTH_init();
     e0a:	4b36      	ldr	r3, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0c:	4798      	blx	r3

	GRID_LED_init();
     e0e:	4b36      	ldr	r3, [pc, #216]	; (ee8 <system_init+0x2d4>)
     e10:	4798      	blx	r3

	delay_driver_init();
     e12:	4b36      	ldr	r3, [pc, #216]	; (eec <system_init+0x2d8>)
     e14:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e16:	6963      	ldr	r3, [r4, #20]
     e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e1c:	6163      	str	r3, [r4, #20]
     e1e:	4f34      	ldr	r7, [pc, #208]	; (ef0 <system_init+0x2dc>)
     e20:	f04f 0840 	mov.w	r8, #64	; 0x40
     e24:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e28:	4e32      	ldr	r6, [pc, #200]	; (ef4 <system_init+0x2e0>)
     e2a:	47b0      	blx	r6
     e2c:	4602      	mov	r2, r0
     e2e:	4932      	ldr	r1, [pc, #200]	; (ef8 <system_init+0x2e4>)
     e30:	4832      	ldr	r0, [pc, #200]	; (efc <system_init+0x2e8>)
     e32:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e40:	47b0      	blx	r6
     e42:	4602      	mov	r2, r0
     e44:	492e      	ldr	r1, [pc, #184]	; (f00 <system_init+0x2ec>)
     e46:	482f      	ldr	r0, [pc, #188]	; (f04 <system_init+0x2f0>)
     e48:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e4a:	69a3      	ldr	r3, [r4, #24]
     e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e50:	61a3      	str	r3, [r4, #24]
     e52:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e56:	47b0      	blx	r6
     e58:	4602      	mov	r2, r0
     e5a:	492b      	ldr	r1, [pc, #172]	; (f08 <system_init+0x2f4>)
     e5c:	482b      	ldr	r0, [pc, #172]	; (f0c <system_init+0x2f8>)
     e5e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e60:	69a3      	ldr	r3, [r4, #24]
     e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e66:	61a3      	str	r3, [r4, #24]
     e68:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e6c:	47b0      	blx	r6
     e6e:	4602      	mov	r2, r0
     e70:	4927      	ldr	r1, [pc, #156]	; (f10 <system_init+0x2fc>)
     e72:	4828      	ldr	r0, [pc, #160]	; (f14 <system_init+0x300>)
     e74:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e76:	4b28      	ldr	r3, [pc, #160]	; (f18 <system_init+0x304>)
     e78:	4798      	blx	r3
     e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e7e:	bf00      	nop
     e80:	00002791 	.word	0x00002791
     e84:	41008000 	.word	0x41008000
     e88:	c0020000 	.word	0xc0020000
     e8c:	40028000 	.word	0x40028000
     e90:	40020800 	.word	0x40020800
     e94:	40020000 	.word	0x40020000
     e98:	c0000008 	.word	0xc0000008
     e9c:	c0000010 	.word	0xc0000010
     ea0:	c0000020 	.word	0xc0000020
     ea4:	00000381 	.word	0x00000381
     ea8:	00000419 	.word	0x00000419
     eac:	000004bd 	.word	0x000004bd
     eb0:	000004e5 	.word	0x000004e5
     eb4:	00000529 	.word	0x00000529
     eb8:	40000800 	.word	0x40000800
     ebc:	00002f79 	.word	0x00002f79
     ec0:	40002400 	.word	0x40002400
     ec4:	20001230 	.word	0x20001230
     ec8:	00001809 	.word	0x00001809
     ecc:	000005b5 	.word	0x000005b5
     ed0:	00000659 	.word	0x00000659
     ed4:	000006fd 	.word	0x000006fd
     ed8:	00000819 	.word	0x00000819
     edc:	000008ad 	.word	0x000008ad
     ee0:	00000969 	.word	0x00000969
     ee4:	000009fd 	.word	0x000009fd
     ee8:	00000b11 	.word	0x00000b11
     eec:	00000b39 	.word	0x00000b39
     ef0:	40001c00 	.word	0x40001c00
     ef4:	000044f9 	.word	0x000044f9
     ef8:	40003800 	.word	0x40003800
     efc:	20001554 	.word	0x20001554
     f00:	40003c00 	.word	0x40003c00
     f04:	20001448 	.word	0x20001448
     f08:	4101a000 	.word	0x4101a000
     f0c:	20001250 	.word	0x20001250
     f10:	4101c000 	.word	0x4101c000
     f14:	20001534 	.word	0x20001534
     f18:	00000bf9 	.word	0x00000bf9

00000f1c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     f1c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     f1e:	6983      	ldr	r3, [r0, #24]
     f20:	b103      	cbz	r3, f24 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     f22:	4798      	blx	r3
     f24:	bd08      	pop	{r3, pc}

00000f26 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     f26:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     f28:	69c3      	ldr	r3, [r0, #28]
     f2a:	b103      	cbz	r3, f2e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     f2c:	4798      	blx	r3
     f2e:	bd08      	pop	{r3, pc}

00000f30 <adc_async_channel_conversion_done>:
{
     f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f34:	4606      	mov	r6, r0
     f36:	460f      	mov	r7, r1
     f38:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     f3a:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     f3c:	5c5c      	ldrb	r4, [r3, r1]
     f3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     f42:	00e4      	lsls	r4, r4, #3
     f44:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     f48:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     f4c:	f105 0a04 	add.w	sl, r5, #4
     f50:	b2d1      	uxtb	r1, r2
     f52:	4650      	mov	r0, sl
     f54:	4b0c      	ldr	r3, [pc, #48]	; (f88 <adc_async_channel_conversion_done+0x58>)
     f56:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     f58:	4630      	mov	r0, r6
     f5a:	4b0c      	ldr	r3, [pc, #48]	; (f8c <adc_async_channel_conversion_done+0x5c>)
     f5c:	4798      	blx	r3
     f5e:	2801      	cmp	r0, #1
     f60:	d907      	bls.n	f72 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     f62:	ea4f 2119 	mov.w	r1, r9, lsr #8
     f66:	4650      	mov	r0, sl
     f68:	4b07      	ldr	r3, [pc, #28]	; (f88 <adc_async_channel_conversion_done+0x58>)
     f6a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     f6c:	8aab      	ldrh	r3, [r5, #20]
     f6e:	3301      	adds	r3, #1
     f70:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     f72:	8aab      	ldrh	r3, [r5, #20]
     f74:	3301      	adds	r3, #1
     f76:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     f78:	f858 3004 	ldr.w	r3, [r8, r4]
     f7c:	b113      	cbz	r3, f84 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     f7e:	4639      	mov	r1, r7
     f80:	4630      	mov	r0, r6
     f82:	4798      	blx	r3
     f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f88:	00002321 	.word	0x00002321
     f8c:	000026a7 	.word	0x000026a7

00000f90 <adc_async_init>:
{
     f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f94:	4689      	mov	r9, r1
     f96:	4616      	mov	r6, r2
     f98:	461c      	mov	r4, r3
     f9a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     f9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     fa0:	4607      	mov	r7, r0
     fa2:	b140      	cbz	r0, fb6 <adc_async_init+0x26>
     fa4:	b149      	cbz	r1, fba <adc_async_init+0x2a>
     fa6:	b152      	cbz	r2, fbe <adc_async_init+0x2e>
     fa8:	f1b8 0f00 	cmp.w	r8, #0
     fac:	d009      	beq.n	fc2 <adc_async_init+0x32>
     fae:	1c28      	adds	r0, r5, #0
     fb0:	bf18      	it	ne
     fb2:	2001      	movne	r0, #1
     fb4:	e006      	b.n	fc4 <adc_async_init+0x34>
     fb6:	2000      	movs	r0, #0
     fb8:	e004      	b.n	fc4 <adc_async_init+0x34>
     fba:	2000      	movs	r0, #0
     fbc:	e002      	b.n	fc4 <adc_async_init+0x34>
     fbe:	2000      	movs	r0, #0
     fc0:	e000      	b.n	fc4 <adc_async_init+0x34>
     fc2:	2000      	movs	r0, #0
     fc4:	f8df b064 	ldr.w	fp, [pc, #100]	; 102c <adc_async_init+0x9c>
     fc8:	223f      	movs	r2, #63	; 0x3f
     fca:	4659      	mov	r1, fp
     fcc:	f8df a060 	ldr.w	sl, [pc, #96]	; 1030 <adc_async_init+0xa0>
     fd0:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     fd2:	1c60      	adds	r0, r4, #1
     fd4:	2240      	movs	r2, #64	; 0x40
     fd6:	4659      	mov	r1, fp
     fd8:	4580      	cmp	r8, r0
     fda:	bfcc      	ite	gt
     fdc:	2000      	movgt	r0, #0
     fde:	2001      	movle	r0, #1
     fe0:	47d0      	blx	sl
	device = &descr->device;
     fe2:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     fe4:	21ff      	movs	r1, #255	; 0xff
     fe6:	b2da      	uxtb	r2, r3
     fe8:	54b1      	strb	r1, [r6, r2]
     fea:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     fec:	b2da      	uxtb	r2, r3
     fee:	42a2      	cmp	r2, r4
     ff0:	d9f9      	bls.n	fe6 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     ff2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     ff4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     ff8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     ffc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     ffe:	4649      	mov	r1, r9
    1000:	4638      	mov	r0, r7
    1002:	4b06      	ldr	r3, [pc, #24]	; (101c <adc_async_init+0x8c>)
    1004:	4798      	blx	r3
	if (init_status) {
    1006:	4603      	mov	r3, r0
    1008:	b928      	cbnz	r0, 1016 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    100a:	4a05      	ldr	r2, [pc, #20]	; (1020 <adc_async_init+0x90>)
    100c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    100e:	4a05      	ldr	r2, [pc, #20]	; (1024 <adc_async_init+0x94>)
    1010:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1012:	4a05      	ldr	r2, [pc, #20]	; (1028 <adc_async_init+0x98>)
    1014:	607a      	str	r2, [r7, #4]
}
    1016:	4618      	mov	r0, r3
    1018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    101c:	00002575 	.word	0x00002575
    1020:	00000f31 	.word	0x00000f31
    1024:	00000f1d 	.word	0x00000f1d
    1028:	00000f27 	.word	0x00000f27
    102c:	000097a4 	.word	0x000097a4
    1030:	000021e5 	.word	0x000021e5

00001034 <adc_async_register_channel_buffer>:
{
    1034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1038:	460e      	mov	r6, r1
    103a:	4617      	mov	r7, r2
    103c:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    103e:	4605      	mov	r5, r0
    1040:	2800      	cmp	r0, #0
    1042:	d040      	beq.n	10c6 <adc_async_register_channel_buffer+0x92>
    1044:	2a00      	cmp	r2, #0
    1046:	d040      	beq.n	10ca <adc_async_register_channel_buffer+0x96>
    1048:	1c18      	adds	r0, r3, #0
    104a:	bf18      	it	ne
    104c:	2001      	movne	r0, #1
    104e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10e8 <adc_async_register_channel_buffer+0xb4>
    1052:	2266      	movs	r2, #102	; 0x66
    1054:	4649      	mov	r1, r9
    1056:	4c22      	ldr	r4, [pc, #136]	; (10e0 <adc_async_register_channel_buffer+0xac>)
    1058:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    105a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    105e:	2267      	movs	r2, #103	; 0x67
    1060:	4649      	mov	r1, r9
    1062:	42b0      	cmp	r0, r6
    1064:	bf34      	ite	cc
    1066:	2000      	movcc	r0, #0
    1068:	2001      	movcs	r0, #1
    106a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    106c:	6a29      	ldr	r1, [r5, #32]
    106e:	5d8b      	ldrb	r3, [r1, r6]
    1070:	2bff      	cmp	r3, #255	; 0xff
    1072:	d12c      	bne.n	10ce <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    1074:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1078:	2300      	movs	r3, #0
    107a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    107c:	b2da      	uxtb	r2, r3
    107e:	5c8a      	ldrb	r2, [r1, r2]
    1080:	2aff      	cmp	r2, #255	; 0xff
			index++;
    1082:	bf1c      	itt	ne
    1084:	3401      	addne	r4, #1
    1086:	b2e4      	uxtbne	r4, r4
    1088:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    108a:	b2da      	uxtb	r2, r3
    108c:	4282      	cmp	r2, r0
    108e:	d9f5      	bls.n	107c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    1090:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    1094:	42a3      	cmp	r3, r4
    1096:	d31d      	bcc.n	10d4 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    1098:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    109c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    10a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    10a2:	4448      	add	r0, r9
    10a4:	4642      	mov	r2, r8
    10a6:	4639      	mov	r1, r7
    10a8:	3004      	adds	r0, #4
    10aa:	4b0e      	ldr	r3, [pc, #56]	; (10e4 <adc_async_register_channel_buffer+0xb0>)
    10ac:	4798      	blx	r3
    10ae:	4602      	mov	r2, r0
    10b0:	b998      	cbnz	r0, 10da <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    10b2:	6a2b      	ldr	r3, [r5, #32]
    10b4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    10b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10b8:	4499      	add	r9, r3
    10ba:	2300      	movs	r3, #0
    10bc:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    10c0:	4610      	mov	r0, r2
    10c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    10c6:	2000      	movs	r0, #0
    10c8:	e7c1      	b.n	104e <adc_async_register_channel_buffer+0x1a>
    10ca:	2000      	movs	r0, #0
    10cc:	e7bf      	b.n	104e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    10ce:	f06f 020c 	mvn.w	r2, #12
    10d2:	e7f5      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    10d4:	f06f 021b 	mvn.w	r2, #27
    10d8:	e7f2      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    10da:	f06f 020c 	mvn.w	r2, #12
    10de:	e7ef      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
    10e0:	000021e5 	.word	0x000021e5
    10e4:	0000228d 	.word	0x0000228d
    10e8:	000097a4 	.word	0x000097a4

000010ec <adc_async_enable_channel>:
{
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ee:	460d      	mov	r5, r1
	ASSERT(descr);
    10f0:	4f0b      	ldr	r7, [pc, #44]	; (1120 <adc_async_enable_channel+0x34>)
    10f2:	4604      	mov	r4, r0
    10f4:	2283      	movs	r2, #131	; 0x83
    10f6:	4639      	mov	r1, r7
    10f8:	3000      	adds	r0, #0
    10fa:	bf18      	it	ne
    10fc:	2001      	movne	r0, #1
    10fe:	4e09      	ldr	r6, [pc, #36]	; (1124 <adc_async_enable_channel+0x38>)
    1100:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1102:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1106:	2284      	movs	r2, #132	; 0x84
    1108:	4639      	mov	r1, r7
    110a:	42a8      	cmp	r0, r5
    110c:	bf34      	ite	cc
    110e:	2000      	movcc	r0, #0
    1110:	2001      	movcs	r0, #1
    1112:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    1114:	4629      	mov	r1, r5
    1116:	4620      	mov	r0, r4
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <adc_async_enable_channel+0x3c>)
    111a:	4798      	blx	r3
}
    111c:	2000      	movs	r0, #0
    111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1120:	000097a4 	.word	0x000097a4
    1124:	000021e5 	.word	0x000021e5
    1128:	00002691 	.word	0x00002691

0000112c <adc_async_register_callback>:
{
    112c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1130:	460e      	mov	r6, r1
    1132:	4614      	mov	r4, r2
    1134:	4699      	mov	r9, r3
	ASSERT(descr);
    1136:	f8df 8070 	ldr.w	r8, [pc, #112]	; 11a8 <adc_async_register_callback+0x7c>
    113a:	4605      	mov	r5, r0
    113c:	229c      	movs	r2, #156	; 0x9c
    113e:	4641      	mov	r1, r8
    1140:	3000      	adds	r0, #0
    1142:	bf18      	it	ne
    1144:	2001      	movne	r0, #1
    1146:	4f16      	ldr	r7, [pc, #88]	; (11a0 <adc_async_register_callback+0x74>)
    1148:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    114a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    114e:	229d      	movs	r2, #157	; 0x9d
    1150:	4641      	mov	r1, r8
    1152:	42b0      	cmp	r0, r6
    1154:	bf34      	ite	cc
    1156:	2000      	movcc	r0, #0
    1158:	2001      	movcs	r0, #1
    115a:	47b8      	blx	r7
	switch (type) {
    115c:	2c01      	cmp	r4, #1
    115e:	d019      	beq.n	1194 <adc_async_register_callback+0x68>
    1160:	b12c      	cbz	r4, 116e <adc_async_register_callback+0x42>
    1162:	2c02      	cmp	r4, #2
    1164:	d019      	beq.n	119a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    1166:	f06f 000c 	mvn.w	r0, #12
}
    116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    116e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    1170:	5d9b      	ldrb	r3, [r3, r6]
    1172:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1178:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    117c:	f119 0300 	adds.w	r3, r9, #0
    1180:	bf18      	it	ne
    1182:	2301      	movne	r3, #1
    1184:	4622      	mov	r2, r4
    1186:	4631      	mov	r1, r6
    1188:	4628      	mov	r0, r5
    118a:	4c06      	ldr	r4, [pc, #24]	; (11a4 <adc_async_register_callback+0x78>)
    118c:	47a0      	blx	r4
	return ERR_NONE;
    118e:	2000      	movs	r0, #0
    1190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    1194:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    1198:	e7f0      	b.n	117c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    119a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    119e:	e7ed      	b.n	117c <adc_async_register_callback+0x50>
    11a0:	000021e5 	.word	0x000021e5
    11a4:	000026cf 	.word	0x000026cf
    11a8:	000097a4 	.word	0x000097a4

000011ac <adc_async_read_channel>:
{
    11ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b0:	b083      	sub	sp, #12
    11b2:	4688      	mov	r8, r1
    11b4:	4691      	mov	r9, r2
    11b6:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    11b8:	4604      	mov	r4, r0
    11ba:	2800      	cmp	r0, #0
    11bc:	d04f      	beq.n	125e <adc_async_read_channel+0xb2>
    11be:	2a00      	cmp	r2, #0
    11c0:	d04f      	beq.n	1262 <adc_async_read_channel+0xb6>
    11c2:	1c18      	adds	r0, r3, #0
    11c4:	bf18      	it	ne
    11c6:	2001      	movne	r0, #1
    11c8:	4f29      	ldr	r7, [pc, #164]	; (1270 <adc_async_read_channel+0xc4>)
    11ca:	22bc      	movs	r2, #188	; 0xbc
    11cc:	4639      	mov	r1, r7
    11ce:	4e29      	ldr	r6, [pc, #164]	; (1274 <adc_async_read_channel+0xc8>)
    11d0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    11d2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    11d6:	22bd      	movs	r2, #189	; 0xbd
    11d8:	4639      	mov	r1, r7
    11da:	4540      	cmp	r0, r8
    11dc:	bf34      	ite	cc
    11de:	2000      	movcc	r0, #0
    11e0:	2001      	movcs	r0, #1
    11e2:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    11e4:	4620      	mov	r0, r4
    11e6:	4b24      	ldr	r3, [pc, #144]	; (1278 <adc_async_read_channel+0xcc>)
    11e8:	4798      	blx	r3
	ASSERT(!(length % data_size));
    11ea:	fb95 f3f0 	sdiv	r3, r5, r0
    11ee:	fb03 5010 	mls	r0, r3, r0, r5
    11f2:	22bf      	movs	r2, #191	; 0xbf
    11f4:	4639      	mov	r1, r7
    11f6:	fab0 f080 	clz	r0, r0
    11fa:	0940      	lsrs	r0, r0, #5
    11fc:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    11fe:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1200:	f813 b008 	ldrb.w	fp, [r3, r8]
    1204:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    120a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    120e:	a801      	add	r0, sp, #4
    1210:	4b1a      	ldr	r3, [pc, #104]	; (127c <adc_async_read_channel+0xd0>)
    1212:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    1214:	f10b 0a04 	add.w	sl, fp, #4
    1218:	4650      	mov	r0, sl
    121a:	4b19      	ldr	r3, [pc, #100]	; (1280 <adc_async_read_channel+0xd4>)
    121c:	4798      	blx	r3
    121e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1220:	a801      	add	r0, sp, #4
    1222:	4b18      	ldr	r3, [pc, #96]	; (1284 <adc_async_read_channel+0xd8>)
    1224:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1226:	f1b8 0f00 	cmp.w	r8, #0
    122a:	d01c      	beq.n	1266 <adc_async_read_channel+0xba>
    122c:	b1ed      	cbz	r5, 126a <adc_async_read_channel+0xbe>
    122e:	3d01      	subs	r5, #1
    1230:	b2ad      	uxth	r5, r5
    1232:	3502      	adds	r5, #2
    1234:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    1236:	4f14      	ldr	r7, [pc, #80]	; (1288 <adc_async_read_channel+0xdc>)
    1238:	b2a6      	uxth	r6, r4
    123a:	1e61      	subs	r1, r4, #1
    123c:	4449      	add	r1, r9
    123e:	4650      	mov	r0, sl
    1240:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    1242:	4544      	cmp	r4, r8
    1244:	d002      	beq.n	124c <adc_async_read_channel+0xa0>
    1246:	3401      	adds	r4, #1
    1248:	42ac      	cmp	r4, r5
    124a:	d1f5      	bne.n	1238 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    124c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    1250:	1b9b      	subs	r3, r3, r6
    1252:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    1256:	4630      	mov	r0, r6
    1258:	b003      	add	sp, #12
    125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    125e:	2000      	movs	r0, #0
    1260:	e7b2      	b.n	11c8 <adc_async_read_channel+0x1c>
    1262:	2000      	movs	r0, #0
    1264:	e7b0      	b.n	11c8 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    1266:	2600      	movs	r6, #0
    1268:	e7f0      	b.n	124c <adc_async_read_channel+0xa0>
    126a:	2600      	movs	r6, #0
    126c:	e7ee      	b.n	124c <adc_async_read_channel+0xa0>
    126e:	bf00      	nop
    1270:	000097a4 	.word	0x000097a4
    1274:	000021e5 	.word	0x000021e5
    1278:	000026a7 	.word	0x000026a7
    127c:	000012b5 	.word	0x000012b5
    1280:	00002361 	.word	0x00002361
    1284:	000012c3 	.word	0x000012c3
    1288:	000022dd 	.word	0x000022dd

0000128c <adc_async_start_conversion>:
{
    128c:	b510      	push	{r4, lr}
	ASSERT(descr);
    128e:	4604      	mov	r4, r0
    1290:	22d6      	movs	r2, #214	; 0xd6
    1292:	4905      	ldr	r1, [pc, #20]	; (12a8 <adc_async_start_conversion+0x1c>)
    1294:	3000      	adds	r0, #0
    1296:	bf18      	it	ne
    1298:	2001      	movne	r0, #1
    129a:	4b04      	ldr	r3, [pc, #16]	; (12ac <adc_async_start_conversion+0x20>)
    129c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    129e:	4620      	mov	r0, r4
    12a0:	4b03      	ldr	r3, [pc, #12]	; (12b0 <adc_async_start_conversion+0x24>)
    12a2:	4798      	blx	r3
}
    12a4:	2000      	movs	r0, #0
    12a6:	bd10      	pop	{r4, pc}
    12a8:	000097a4 	.word	0x000097a4
    12ac:	000021e5 	.word	0x000021e5
    12b0:	000026b9 	.word	0x000026b9

000012b4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    12b4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    12b8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    12ba:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12bc:	f3bf 8f5f 	dmb	sy
    12c0:	4770      	bx	lr

000012c2 <atomic_leave_critical>:
    12c2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    12c6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    12c8:	f383 8810 	msr	PRIMASK, r3
    12cc:	4770      	bx	lr
	...

000012d0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    12d0:	b538      	push	{r3, r4, r5, lr}
    12d2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    12d4:	4605      	mov	r5, r0
    12d6:	b158      	cbz	r0, 12f0 <crc_sync_init+0x20>
    12d8:	1c08      	adds	r0, r1, #0
    12da:	bf18      	it	ne
    12dc:	2001      	movne	r0, #1
    12de:	222b      	movs	r2, #43	; 0x2b
    12e0:	4904      	ldr	r1, [pc, #16]	; (12f4 <crc_sync_init+0x24>)
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <crc_sync_init+0x28>)
    12e4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    12e6:	4621      	mov	r1, r4
    12e8:	4628      	mov	r0, r5
    12ea:	4b04      	ldr	r3, [pc, #16]	; (12fc <crc_sync_init+0x2c>)
    12ec:	4798      	blx	r3
}
    12ee:	bd38      	pop	{r3, r4, r5, pc}
    12f0:	2000      	movs	r0, #0
    12f2:	e7f4      	b.n	12de <crc_sync_init+0xe>
    12f4:	000097c0 	.word	0x000097c0
    12f8:	000021e5 	.word	0x000021e5
    12fc:	00002ab9 	.word	0x00002ab9

00001300 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1300:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1302:	4b02      	ldr	r3, [pc, #8]	; (130c <delay_init+0xc>)
    1304:	6018      	str	r0, [r3, #0]
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <delay_init+0x10>)
    1308:	4798      	blx	r3
    130a:	bd08      	pop	{r3, pc}
    130c:	20000564 	.word	0x20000564
    1310:	00004075 	.word	0x00004075

00001314 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1314:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1316:	4b04      	ldr	r3, [pc, #16]	; (1328 <delay_us+0x14>)
    1318:	681c      	ldr	r4, [r3, #0]
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <delay_us+0x18>)
    131c:	4798      	blx	r3
    131e:	4601      	mov	r1, r0
    1320:	4620      	mov	r0, r4
    1322:	4b03      	ldr	r3, [pc, #12]	; (1330 <delay_us+0x1c>)
    1324:	4798      	blx	r3
    1326:	bd10      	pop	{r4, pc}
    1328:	20000564 	.word	0x20000564
    132c:	0000277d 	.word	0x0000277d
    1330:	00004089 	.word	0x00004089

00001334 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1334:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1336:	4b04      	ldr	r3, [pc, #16]	; (1348 <delay_ms+0x14>)
    1338:	681c      	ldr	r4, [r3, #0]
    133a:	4b04      	ldr	r3, [pc, #16]	; (134c <delay_ms+0x18>)
    133c:	4798      	blx	r3
    133e:	4601      	mov	r1, r0
    1340:	4620      	mov	r0, r4
    1342:	4b03      	ldr	r3, [pc, #12]	; (1350 <delay_ms+0x1c>)
    1344:	4798      	blx	r3
    1346:	bd10      	pop	{r4, pc}
    1348:	20000564 	.word	0x20000564
    134c:	00002785 	.word	0x00002785
    1350:	00004089 	.word	0x00004089

00001354 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1354:	b508      	push	{r3, lr}
	return _event_system_init();
    1356:	4b01      	ldr	r3, [pc, #4]	; (135c <event_system_init+0x8>)
    1358:	4798      	blx	r3
}
    135a:	bd08      	pop	{r3, pc}
    135c:	00002ac1 	.word	0x00002ac1

00001360 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1360:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1362:	6943      	ldr	r3, [r0, #20]
    1364:	b103      	cbz	r3, 1368 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1366:	4798      	blx	r3
    1368:	bd08      	pop	{r3, pc}

0000136a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    136a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    136c:	6983      	ldr	r3, [r0, #24]
    136e:	b103      	cbz	r3, 1372 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1370:	4798      	blx	r3
    1372:	bd08      	pop	{r3, pc}

00001374 <flash_init>:
{
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1378:	4604      	mov	r4, r0
    137a:	b190      	cbz	r0, 13a2 <flash_init+0x2e>
    137c:	1c08      	adds	r0, r1, #0
    137e:	bf18      	it	ne
    1380:	2001      	movne	r0, #1
    1382:	2238      	movs	r2, #56	; 0x38
    1384:	4908      	ldr	r1, [pc, #32]	; (13a8 <flash_init+0x34>)
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <flash_init+0x38>)
    1388:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    138a:	4629      	mov	r1, r5
    138c:	4620      	mov	r0, r4
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <flash_init+0x3c>)
    1390:	4798      	blx	r3
	if (rc) {
    1392:	4603      	mov	r3, r0
    1394:	b918      	cbnz	r0, 139e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1396:	4a07      	ldr	r2, [pc, #28]	; (13b4 <flash_init+0x40>)
    1398:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    139a:	4a07      	ldr	r2, [pc, #28]	; (13b8 <flash_init+0x44>)
    139c:	6062      	str	r2, [r4, #4]
}
    139e:	4618      	mov	r0, r3
    13a0:	bd38      	pop	{r3, r4, r5, pc}
    13a2:	2000      	movs	r0, #0
    13a4:	e7ed      	b.n	1382 <flash_init+0xe>
    13a6:	bf00      	nop
    13a8:	000097dc 	.word	0x000097dc
    13ac:	000021e5 	.word	0x000021e5
    13b0:	00002bcd 	.word	0x00002bcd
    13b4:	00001361 	.word	0x00001361
    13b8:	0000136b 	.word	0x0000136b

000013bc <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13bc:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13be:	8843      	ldrh	r3, [r0, #2]
    13c0:	f413 7f80 	tst.w	r3, #256	; 0x100
    13c4:	d102      	bne.n	13cc <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    13c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    13c8:	b103      	cbz	r3, 13cc <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    13ca:	4798      	blx	r3
    13cc:	bd08      	pop	{r3, pc}

000013ce <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13ce:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13d0:	8843      	ldrh	r3, [r0, #2]
    13d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    13d6:	d102      	bne.n	13de <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    13d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    13da:	b103      	cbz	r3, 13de <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    13dc:	4798      	blx	r3
    13de:	bd08      	pop	{r3, pc}

000013e0 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    13e0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13e2:	8843      	ldrh	r3, [r0, #2]
    13e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    13e8:	d102      	bne.n	13f0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    13ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ec:	b103      	cbz	r3, 13f0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    13ee:	4798      	blx	r3
    13f0:	bd08      	pop	{r3, pc}
	...

000013f4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    13f4:	b510      	push	{r4, lr}
    13f6:	b084      	sub	sp, #16
    13f8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    13fa:	8a83      	ldrh	r3, [r0, #20]
    13fc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1400:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1406:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    140a:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    140c:	a901      	add	r1, sp, #4
    140e:	3828      	subs	r0, #40	; 0x28
    1410:	4b03      	ldr	r3, [pc, #12]	; (1420 <i2c_m_async_write+0x2c>)
    1412:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1414:	2800      	cmp	r0, #0
    1416:	bf08      	it	eq
    1418:	4620      	moveq	r0, r4
    141a:	b004      	add	sp, #16
    141c:	bd10      	pop	{r4, pc}
    141e:	bf00      	nop
    1420:	00003765 	.word	0x00003765

00001424 <i2c_m_async_read>:
{
    1424:	b510      	push	{r4, lr}
    1426:	b084      	sub	sp, #16
    1428:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    142a:	8a83      	ldrh	r3, [r0, #20]
    142c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1430:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1432:	f248 0301 	movw	r3, #32769	; 0x8001
    1436:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    143a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    143c:	a901      	add	r1, sp, #4
    143e:	3828      	subs	r0, #40	; 0x28
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <i2c_m_async_read+0x2c>)
    1442:	4798      	blx	r3
}
    1444:	2800      	cmp	r0, #0
    1446:	bf08      	it	eq
    1448:	4620      	moveq	r0, r4
    144a:	b004      	add	sp, #16
    144c:	bd10      	pop	{r4, pc}
    144e:	bf00      	nop
    1450:	00003765 	.word	0x00003765

00001454 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1454:	b570      	push	{r4, r5, r6, lr}
    1456:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1458:	4604      	mov	r4, r0
    145a:	2289      	movs	r2, #137	; 0x89
    145c:	490f      	ldr	r1, [pc, #60]	; (149c <i2c_m_async_init+0x48>)
    145e:	3000      	adds	r0, #0
    1460:	bf18      	it	ne
    1462:	2001      	movne	r0, #1
    1464:	4b0e      	ldr	r3, [pc, #56]	; (14a0 <i2c_m_async_init+0x4c>)
    1466:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1468:	4629      	mov	r1, r5
    146a:	4620      	mov	r0, r4
    146c:	4b0d      	ldr	r3, [pc, #52]	; (14a4 <i2c_m_async_init+0x50>)
    146e:	4798      	blx	r3
	if (init_status) {
    1470:	4605      	mov	r5, r0
    1472:	b108      	cbz	r0, 1478 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1474:	4628      	mov	r0, r5
    1476:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1478:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <i2c_m_async_init+0x54>)
    147a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    147c:	4b0b      	ldr	r3, [pc, #44]	; (14ac <i2c_m_async_init+0x58>)
    147e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1480:	4a0b      	ldr	r2, [pc, #44]	; (14b0 <i2c_m_async_init+0x5c>)
    1482:	2101      	movs	r1, #1
    1484:	4620      	mov	r0, r4
    1486:	4e0b      	ldr	r6, [pc, #44]	; (14b4 <i2c_m_async_init+0x60>)
    1488:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    148a:	4a0b      	ldr	r2, [pc, #44]	; (14b8 <i2c_m_async_init+0x64>)
    148c:	2102      	movs	r1, #2
    148e:	4620      	mov	r0, r4
    1490:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1492:	4a0a      	ldr	r2, [pc, #40]	; (14bc <i2c_m_async_init+0x68>)
    1494:	2100      	movs	r1, #0
    1496:	4620      	mov	r0, r4
    1498:	47b0      	blx	r6
	return ERR_NONE;
    149a:	e7eb      	b.n	1474 <i2c_m_async_init+0x20>
    149c:	000097f4 	.word	0x000097f4
    14a0:	000021e5 	.word	0x000021e5
    14a4:	000036e5 	.word	0x000036e5
    14a8:	00001425 	.word	0x00001425
    14ac:	000013f5 	.word	0x000013f5
    14b0:	000013bd 	.word	0x000013bd
    14b4:	00003895 	.word	0x00003895
    14b8:	000013cf 	.word	0x000013cf
    14bc:	000013e1 	.word	0x000013e1

000014c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
    14c2:	460d      	mov	r5, r1
    14c4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    14c6:	4604      	mov	r4, r0
    14c8:	b160      	cbz	r0, 14e4 <io_write+0x24>
    14ca:	1c08      	adds	r0, r1, #0
    14cc:	bf18      	it	ne
    14ce:	2001      	movne	r0, #1
    14d0:	2234      	movs	r2, #52	; 0x34
    14d2:	4905      	ldr	r1, [pc, #20]	; (14e8 <io_write+0x28>)
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <io_write+0x2c>)
    14d6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    14d8:	6823      	ldr	r3, [r4, #0]
    14da:	4632      	mov	r2, r6
    14dc:	4629      	mov	r1, r5
    14de:	4620      	mov	r0, r4
    14e0:	4798      	blx	r3
}
    14e2:	bd70      	pop	{r4, r5, r6, pc}
    14e4:	2000      	movs	r0, #0
    14e6:	e7f3      	b.n	14d0 <io_write+0x10>
    14e8:	00009814 	.word	0x00009814
    14ec:	000021e5 	.word	0x000021e5

000014f0 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    14f0:	b570      	push	{r4, r5, r6, lr}
    14f2:	460d      	mov	r5, r1
    14f4:	4616      	mov	r6, r2
	ASSERT(io);
    14f6:	4604      	mov	r4, r0
    14f8:	2298      	movs	r2, #152	; 0x98
    14fa:	4907      	ldr	r1, [pc, #28]	; (1518 <_spi_m_dma_io_write+0x28>)
    14fc:	3000      	adds	r0, #0
    14fe:	bf18      	it	ne
    1500:	2001      	movne	r0, #1
    1502:	4b06      	ldr	r3, [pc, #24]	; (151c <_spi_m_dma_io_write+0x2c>)
    1504:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    1506:	4633      	mov	r3, r6
    1508:	2200      	movs	r2, #0
    150a:	4629      	mov	r1, r5
    150c:	f1a4 001c 	sub.w	r0, r4, #28
    1510:	4c03      	ldr	r4, [pc, #12]	; (1520 <_spi_m_dma_io_write+0x30>)
    1512:	47a0      	blx	r4
}
    1514:	bd70      	pop	{r4, r5, r6, pc}
    1516:	bf00      	nop
    1518:	00009828 	.word	0x00009828
    151c:	000021e5 	.word	0x000021e5
    1520:	00003f1d 	.word	0x00003f1d

00001524 <_spi_m_dma_io_read>:
{
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	460d      	mov	r5, r1
    1528:	4616      	mov	r6, r2
	ASSERT(io);
    152a:	4604      	mov	r4, r0
    152c:	2281      	movs	r2, #129	; 0x81
    152e:	4907      	ldr	r1, [pc, #28]	; (154c <_spi_m_dma_io_read+0x28>)
    1530:	3000      	adds	r0, #0
    1532:	bf18      	it	ne
    1534:	2001      	movne	r0, #1
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <_spi_m_dma_io_read+0x2c>)
    1538:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    153a:	4633      	mov	r3, r6
    153c:	462a      	mov	r2, r5
    153e:	2100      	movs	r1, #0
    1540:	f1a4 001c 	sub.w	r0, r4, #28
    1544:	4c03      	ldr	r4, [pc, #12]	; (1554 <_spi_m_dma_io_read+0x30>)
    1546:	47a0      	blx	r4
}
    1548:	bd70      	pop	{r4, r5, r6, pc}
    154a:	bf00      	nop
    154c:	00009828 	.word	0x00009828
    1550:	000021e5 	.word	0x000021e5
    1554:	00003f1d 	.word	0x00003f1d

00001558 <spi_m_dma_init>:
{
    1558:	b538      	push	{r3, r4, r5, lr}
    155a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    155c:	4605      	mov	r5, r0
    155e:	b1a0      	cbz	r0, 158a <spi_m_dma_init+0x32>
    1560:	1c08      	adds	r0, r1, #0
    1562:	bf18      	it	ne
    1564:	2001      	movne	r0, #1
    1566:	223b      	movs	r2, #59	; 0x3b
    1568:	4909      	ldr	r1, [pc, #36]	; (1590 <spi_m_dma_init+0x38>)
    156a:	4b0a      	ldr	r3, [pc, #40]	; (1594 <spi_m_dma_init+0x3c>)
    156c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    156e:	4628      	mov	r0, r5
    1570:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1574:	4621      	mov	r1, r4
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <spi_m_dma_init+0x40>)
    1578:	4798      	blx	r3
	if (rc) {
    157a:	4603      	mov	r3, r0
    157c:	b918      	cbnz	r0, 1586 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    157e:	4a07      	ldr	r2, [pc, #28]	; (159c <spi_m_dma_init+0x44>)
    1580:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1582:	4a07      	ldr	r2, [pc, #28]	; (15a0 <spi_m_dma_init+0x48>)
    1584:	622a      	str	r2, [r5, #32]
}
    1586:	4618      	mov	r0, r3
    1588:	bd38      	pop	{r3, r4, r5, pc}
    158a:	2000      	movs	r0, #0
    158c:	e7eb      	b.n	1566 <spi_m_dma_init+0xe>
    158e:	bf00      	nop
    1590:	00009828 	.word	0x00009828
    1594:	000021e5 	.word	0x000021e5
    1598:	00003d01 	.word	0x00003d01
    159c:	00001525 	.word	0x00001525
    15a0:	000014f1 	.word	0x000014f1

000015a4 <spi_m_dma_enable>:
{
    15a4:	b510      	push	{r4, lr}
	ASSERT(spi);
    15a6:	4604      	mov	r4, r0
    15a8:	2251      	movs	r2, #81	; 0x51
    15aa:	4905      	ldr	r1, [pc, #20]	; (15c0 <spi_m_dma_enable+0x1c>)
    15ac:	3000      	adds	r0, #0
    15ae:	bf18      	it	ne
    15b0:	2001      	movne	r0, #1
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <spi_m_dma_enable+0x20>)
    15b4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    15b6:	1d20      	adds	r0, r4, #4
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <spi_m_dma_enable+0x24>)
    15ba:	4798      	blx	r3
    15bc:	bd10      	pop	{r4, pc}
    15be:	bf00      	nop
    15c0:	00009828 	.word	0x00009828
    15c4:	000021e5 	.word	0x000021e5
    15c8:	00003e7d 	.word	0x00003e7d

000015cc <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	460d      	mov	r5, r1
    15d0:	4616      	mov	r6, r2
	ASSERT(spi);
    15d2:	4604      	mov	r4, r0
    15d4:	22a8      	movs	r2, #168	; 0xa8
    15d6:	4906      	ldr	r1, [pc, #24]	; (15f0 <spi_m_dma_register_callback+0x24>)
    15d8:	3000      	adds	r0, #0
    15da:	bf18      	it	ne
    15dc:	2001      	movne	r0, #1
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <spi_m_dma_register_callback+0x28>)
    15e0:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    15e2:	4632      	mov	r2, r6
    15e4:	4629      	mov	r1, r5
    15e6:	1d20      	adds	r0, r4, #4
    15e8:	4b03      	ldr	r3, [pc, #12]	; (15f8 <spi_m_dma_register_callback+0x2c>)
    15ea:	4798      	blx	r3
    15ec:	bd70      	pop	{r4, r5, r6, pc}
    15ee:	bf00      	nop
    15f0:	00009828 	.word	0x00009828
    15f4:	000021e5 	.word	0x000021e5
    15f8:	00003ead 	.word	0x00003ead

000015fc <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    15fc:	b538      	push	{r3, r4, r5, lr}
    15fe:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1600:	4604      	mov	r4, r0
    1602:	b150      	cbz	r0, 161a <spi_m_dma_get_io_descriptor+0x1e>
    1604:	1c08      	adds	r0, r1, #0
    1606:	bf18      	it	ne
    1608:	2001      	movne	r0, #1
    160a:	22ae      	movs	r2, #174	; 0xae
    160c:	4904      	ldr	r1, [pc, #16]	; (1620 <spi_m_dma_get_io_descriptor+0x24>)
    160e:	4b05      	ldr	r3, [pc, #20]	; (1624 <spi_m_dma_get_io_descriptor+0x28>)
    1610:	4798      	blx	r3
	*io = &spi->io;
    1612:	3420      	adds	r4, #32
    1614:	602c      	str	r4, [r5, #0]

	return 0;
}
    1616:	2000      	movs	r0, #0
    1618:	bd38      	pop	{r3, r4, r5, pc}
    161a:	2000      	movs	r0, #0
    161c:	e7f5      	b.n	160a <spi_m_dma_get_io_descriptor+0xe>
    161e:	bf00      	nop
    1620:	00009828 	.word	0x00009828
    1624:	000021e5 	.word	0x000021e5

00001628 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1628:	b538      	push	{r3, r4, r5, lr}
    162a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    162c:	4604      	mov	r4, r0
    162e:	b1b8      	cbz	r0, 1660 <spi_m_sync_init+0x38>
    1630:	1c08      	adds	r0, r1, #0
    1632:	bf18      	it	ne
    1634:	2001      	movne	r0, #1
    1636:	2240      	movs	r2, #64	; 0x40
    1638:	490a      	ldr	r1, [pc, #40]	; (1664 <spi_m_sync_init+0x3c>)
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <spi_m_sync_init+0x40>)
    163c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    163e:	4620      	mov	r0, r4
    1640:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1644:	4629      	mov	r1, r5
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <spi_m_sync_init+0x44>)
    1648:	4798      	blx	r3

	if (rc < 0) {
    164a:	2800      	cmp	r0, #0
    164c:	db07      	blt.n	165e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    164e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1652:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1654:	4b06      	ldr	r3, [pc, #24]	; (1670 <spi_m_sync_init+0x48>)
    1656:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1658:	4b06      	ldr	r3, [pc, #24]	; (1674 <spi_m_sync_init+0x4c>)
    165a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    165c:	2000      	movs	r0, #0
}
    165e:	bd38      	pop	{r3, r4, r5, pc}
    1660:	2000      	movs	r0, #0
    1662:	e7e8      	b.n	1636 <spi_m_sync_init+0xe>
    1664:	00009844 	.word	0x00009844
    1668:	000021e5 	.word	0x000021e5
    166c:	00003a91 	.word	0x00003a91
    1670:	000016f5 	.word	0x000016f5
    1674:	000016b9 	.word	0x000016b9

00001678 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1678:	b530      	push	{r4, r5, lr}
    167a:	b085      	sub	sp, #20
    167c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    167e:	4605      	mov	r5, r0
    1680:	b190      	cbz	r0, 16a8 <spi_m_sync_transfer+0x30>
    1682:	1c08      	adds	r0, r1, #0
    1684:	bf18      	it	ne
    1686:	2001      	movne	r0, #1
    1688:	22b3      	movs	r2, #179	; 0xb3
    168a:	4908      	ldr	r1, [pc, #32]	; (16ac <spi_m_sync_transfer+0x34>)
    168c:	4b08      	ldr	r3, [pc, #32]	; (16b0 <spi_m_sync_transfer+0x38>)
    168e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1690:	6823      	ldr	r3, [r4, #0]
    1692:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1694:	6863      	ldr	r3, [r4, #4]
    1696:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1698:	68a3      	ldr	r3, [r4, #8]
    169a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    169c:	a901      	add	r1, sp, #4
    169e:	1d28      	adds	r0, r5, #4
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <spi_m_sync_transfer+0x3c>)
    16a2:	4798      	blx	r3
}
    16a4:	b005      	add	sp, #20
    16a6:	bd30      	pop	{r4, r5, pc}
    16a8:	2000      	movs	r0, #0
    16aa:	e7ed      	b.n	1688 <spi_m_sync_transfer+0x10>
    16ac:	00009844 	.word	0x00009844
    16b0:	000021e5 	.word	0x000021e5
    16b4:	00003c21 	.word	0x00003c21

000016b8 <_spi_m_sync_io_write>:
{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	460e      	mov	r6, r1
    16be:	4615      	mov	r5, r2
	ASSERT(io);
    16c0:	4604      	mov	r4, r0
    16c2:	22a3      	movs	r2, #163	; 0xa3
    16c4:	4908      	ldr	r1, [pc, #32]	; (16e8 <_spi_m_sync_io_write+0x30>)
    16c6:	3000      	adds	r0, #0
    16c8:	bf18      	it	ne
    16ca:	2001      	movne	r0, #1
    16cc:	4b07      	ldr	r3, [pc, #28]	; (16ec <_spi_m_sync_io_write+0x34>)
    16ce:	4798      	blx	r3
	xfer.rxbuf = 0;
    16d0:	2300      	movs	r3, #0
    16d2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    16d4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    16d6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16d8:	a901      	add	r1, sp, #4
    16da:	f1a4 000c 	sub.w	r0, r4, #12
    16de:	4b04      	ldr	r3, [pc, #16]	; (16f0 <_spi_m_sync_io_write+0x38>)
    16e0:	4798      	blx	r3
}
    16e2:	b004      	add	sp, #16
    16e4:	bd70      	pop	{r4, r5, r6, pc}
    16e6:	bf00      	nop
    16e8:	00009844 	.word	0x00009844
    16ec:	000021e5 	.word	0x000021e5
    16f0:	00001679 	.word	0x00001679

000016f4 <_spi_m_sync_io_read>:
{
    16f4:	b570      	push	{r4, r5, r6, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	460e      	mov	r6, r1
    16fa:	4615      	mov	r5, r2
	ASSERT(io);
    16fc:	4604      	mov	r4, r0
    16fe:	2287      	movs	r2, #135	; 0x87
    1700:	4908      	ldr	r1, [pc, #32]	; (1724 <_spi_m_sync_io_read+0x30>)
    1702:	3000      	adds	r0, #0
    1704:	bf18      	it	ne
    1706:	2001      	movne	r0, #1
    1708:	4b07      	ldr	r3, [pc, #28]	; (1728 <_spi_m_sync_io_read+0x34>)
    170a:	4798      	blx	r3
	xfer.rxbuf = buf;
    170c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    170e:	2300      	movs	r3, #0
    1710:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1712:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1714:	a901      	add	r1, sp, #4
    1716:	f1a4 000c 	sub.w	r0, r4, #12
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <_spi_m_sync_io_read+0x38>)
    171c:	4798      	blx	r3
}
    171e:	b004      	add	sp, #16
    1720:	bd70      	pop	{r4, r5, r6, pc}
    1722:	bf00      	nop
    1724:	00009844 	.word	0x00009844
    1728:	000021e5 	.word	0x000021e5
    172c:	00001679 	.word	0x00001679

00001730 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1732:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1734:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1736:	b12f      	cbz	r7, 1744 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1738:	688d      	ldr	r5, [r1, #8]
    173a:	463c      	mov	r4, r7
    173c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    173e:	f1c2 0e01 	rsb	lr, r2, #1
    1742:	e00b      	b.n	175c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1744:	4b0e      	ldr	r3, [pc, #56]	; (1780 <timer_add_timer_task+0x50>)
    1746:	4798      	blx	r3
		return;
    1748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    174a:	4473      	add	r3, lr
    174c:	68a0      	ldr	r0, [r4, #8]
    174e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1750:	42ab      	cmp	r3, r5
    1752:	d20a      	bcs.n	176a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1754:	6823      	ldr	r3, [r4, #0]
    1756:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1758:	b153      	cbz	r3, 1770 <timer_add_timer_task+0x40>
    175a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    175c:	6863      	ldr	r3, [r4, #4]
    175e:	4293      	cmp	r3, r2
    1760:	d8f3      	bhi.n	174a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1762:	68a0      	ldr	r0, [r4, #8]
    1764:	4403      	add	r3, r0
    1766:	1a9b      	subs	r3, r3, r2
    1768:	e7f2      	b.n	1750 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    176a:	42a7      	cmp	r7, r4
    176c:	d004      	beq.n	1778 <timer_add_timer_task+0x48>
    176e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1770:	4620      	mov	r0, r4
    1772:	4b04      	ldr	r3, [pc, #16]	; (1784 <timer_add_timer_task+0x54>)
    1774:	4798      	blx	r3
    1776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1778:	4660      	mov	r0, ip
    177a:	4b01      	ldr	r3, [pc, #4]	; (1780 <timer_add_timer_task+0x50>)
    177c:	4798      	blx	r3
    177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1780:	0000220d 	.word	0x0000220d
    1784:	00002239 	.word	0x00002239

00001788 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    178c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    178e:	6907      	ldr	r7, [r0, #16]
    1790:	3701      	adds	r7, #1
    1792:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1794:	7e03      	ldrb	r3, [r0, #24]
    1796:	f013 0f01 	tst.w	r3, #1
    179a:	d113      	bne.n	17c4 <timer_process_counted+0x3c>
    179c:	7e03      	ldrb	r3, [r0, #24]
    179e:	f013 0f02 	tst.w	r3, #2
    17a2:	d10f      	bne.n	17c4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    17a4:	b354      	cbz	r4, 17fc <timer_process_counted+0x74>
    17a6:	6863      	ldr	r3, [r4, #4]
    17a8:	1afb      	subs	r3, r7, r3
    17aa:	68a2      	ldr	r2, [r4, #8]
    17ac:	4293      	cmp	r3, r2
    17ae:	d307      	bcc.n	17c0 <timer_process_counted+0x38>
    17b0:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    17b2:	f100 0814 	add.w	r8, r0, #20
    17b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1800 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    17ba:	f8df a048 	ldr.w	sl, [pc, #72]	; 1804 <timer_process_counted+0x7c>
    17be:	e012      	b.n	17e6 <timer_process_counted+0x5e>
    17c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    17c4:	7e03      	ldrb	r3, [r0, #24]
    17c6:	f043 0302 	orr.w	r3, r3, #2
    17ca:	7603      	strb	r3, [r0, #24]
		return;
    17cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17d0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    17d2:	68e3      	ldr	r3, [r4, #12]
    17d4:	4620      	mov	r0, r4
    17d6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    17d8:	b185      	cbz	r5, 17fc <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    17da:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    17dc:	686b      	ldr	r3, [r5, #4]
    17de:	1afb      	subs	r3, r7, r3
    17e0:	68aa      	ldr	r2, [r5, #8]
    17e2:	4293      	cmp	r3, r2
    17e4:	d30a      	bcc.n	17fc <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    17e6:	4640      	mov	r0, r8
    17e8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    17ea:	7c23      	ldrb	r3, [r4, #16]
    17ec:	2b01      	cmp	r3, #1
    17ee:	d1ef      	bne.n	17d0 <timer_process_counted+0x48>
			tmp->time_label = time;
    17f0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    17f2:	463a      	mov	r2, r7
    17f4:	4621      	mov	r1, r4
    17f6:	4640      	mov	r0, r8
    17f8:	47d0      	blx	sl
    17fa:	e7e9      	b.n	17d0 <timer_process_counted+0x48>
    17fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1800:	00002281 	.word	0x00002281
    1804:	00001731 	.word	0x00001731

00001808 <timer_init>:
{
    1808:	b570      	push	{r4, r5, r6, lr}
    180a:	460e      	mov	r6, r1
    180c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    180e:	4604      	mov	r4, r0
    1810:	b190      	cbz	r0, 1838 <timer_init+0x30>
    1812:	b199      	cbz	r1, 183c <timer_init+0x34>
    1814:	1c10      	adds	r0, r2, #0
    1816:	bf18      	it	ne
    1818:	2001      	movne	r0, #1
    181a:	223b      	movs	r2, #59	; 0x3b
    181c:	4908      	ldr	r1, [pc, #32]	; (1840 <timer_init+0x38>)
    181e:	4b09      	ldr	r3, [pc, #36]	; (1844 <timer_init+0x3c>)
    1820:	4798      	blx	r3
	descr->func = func;
    1822:	4620      	mov	r0, r4
    1824:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1828:	682b      	ldr	r3, [r5, #0]
    182a:	4631      	mov	r1, r6
    182c:	4798      	blx	r3
	descr->time                           = 0;
    182e:	2000      	movs	r0, #0
    1830:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <timer_init+0x40>)
    1834:	6063      	str	r3, [r4, #4]
}
    1836:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1838:	2000      	movs	r0, #0
    183a:	e7ee      	b.n	181a <timer_init+0x12>
    183c:	2000      	movs	r0, #0
    183e:	e7ec      	b.n	181a <timer_init+0x12>
    1840:	00009860 	.word	0x00009860
    1844:	000021e5 	.word	0x000021e5
    1848:	00001789 	.word	0x00001789

0000184c <timer_start>:
{
    184c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    184e:	4604      	mov	r4, r0
    1850:	b198      	cbz	r0, 187a <timer_start+0x2e>
    1852:	6800      	ldr	r0, [r0, #0]
    1854:	3000      	adds	r0, #0
    1856:	bf18      	it	ne
    1858:	2001      	movne	r0, #1
    185a:	2254      	movs	r2, #84	; 0x54
    185c:	4909      	ldr	r1, [pc, #36]	; (1884 <timer_start+0x38>)
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <timer_start+0x3c>)
    1860:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    1862:	1d25      	adds	r5, r4, #4
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	699b      	ldr	r3, [r3, #24]
    1868:	4628      	mov	r0, r5
    186a:	4798      	blx	r3
    186c:	b938      	cbnz	r0, 187e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    186e:	6823      	ldr	r3, [r4, #0]
    1870:	689b      	ldr	r3, [r3, #8]
    1872:	4628      	mov	r0, r5
    1874:	4798      	blx	r3
	return ERR_NONE;
    1876:	2000      	movs	r0, #0
    1878:	bd38      	pop	{r3, r4, r5, pc}
    187a:	2000      	movs	r0, #0
    187c:	e7ed      	b.n	185a <timer_start+0xe>
		return ERR_DENIED;
    187e:	f06f 0010 	mvn.w	r0, #16
}
    1882:	bd38      	pop	{r3, r4, r5, pc}
    1884:	00009860 	.word	0x00009860
    1888:	000021e5 	.word	0x000021e5

0000188c <timer_add_task>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	b082      	sub	sp, #8
    1890:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    1892:	4604      	mov	r4, r0
    1894:	b328      	cbz	r0, 18e2 <timer_add_task+0x56>
    1896:	b331      	cbz	r1, 18e6 <timer_add_task+0x5a>
    1898:	6800      	ldr	r0, [r0, #0]
    189a:	3000      	adds	r0, #0
    189c:	bf18      	it	ne
    189e:	2001      	movne	r0, #1
    18a0:	227b      	movs	r2, #123	; 0x7b
    18a2:	4920      	ldr	r1, [pc, #128]	; (1924 <timer_add_task+0x98>)
    18a4:	4b20      	ldr	r3, [pc, #128]	; (1928 <timer_add_task+0x9c>)
    18a6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    18a8:	7f23      	ldrb	r3, [r4, #28]
    18aa:	f043 0301 	orr.w	r3, r3, #1
    18ae:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    18b0:	f104 0618 	add.w	r6, r4, #24
    18b4:	4629      	mov	r1, r5
    18b6:	4630      	mov	r0, r6
    18b8:	4b1c      	ldr	r3, [pc, #112]	; (192c <timer_add_task+0xa0>)
    18ba:	4798      	blx	r3
    18bc:	b9a8      	cbnz	r0, 18ea <timer_add_task+0x5e>
	task->time_label = descr->time;
    18be:	6963      	ldr	r3, [r4, #20]
    18c0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    18c2:	6962      	ldr	r2, [r4, #20]
    18c4:	4629      	mov	r1, r5
    18c6:	4630      	mov	r0, r6
    18c8:	4b19      	ldr	r3, [pc, #100]	; (1930 <timer_add_task+0xa4>)
    18ca:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18cc:	7f23      	ldrb	r3, [r4, #28]
    18ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18d2:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    18d4:	7f23      	ldrb	r3, [r4, #28]
    18d6:	f013 0f02 	tst.w	r3, #2
    18da:	d112      	bne.n	1902 <timer_add_task+0x76>
	return ERR_NONE;
    18dc:	2000      	movs	r0, #0
}
    18de:	b002      	add	sp, #8
    18e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    18e2:	2000      	movs	r0, #0
    18e4:	e7dc      	b.n	18a0 <timer_add_task+0x14>
    18e6:	2000      	movs	r0, #0
    18e8:	e7da      	b.n	18a0 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18ea:	7f23      	ldrb	r3, [r4, #28]
    18ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18f0:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    18f2:	2280      	movs	r2, #128	; 0x80
    18f4:	490b      	ldr	r1, [pc, #44]	; (1924 <timer_add_task+0x98>)
    18f6:	2000      	movs	r0, #0
    18f8:	4b0b      	ldr	r3, [pc, #44]	; (1928 <timer_add_task+0x9c>)
    18fa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    18fc:	f06f 0011 	mvn.w	r0, #17
    1900:	e7ed      	b.n	18de <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1902:	a801      	add	r0, sp, #4
    1904:	4b0b      	ldr	r3, [pc, #44]	; (1934 <timer_add_task+0xa8>)
    1906:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1908:	7f23      	ldrb	r3, [r4, #28]
    190a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    190e:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    1910:	6823      	ldr	r3, [r4, #0]
    1912:	69db      	ldr	r3, [r3, #28]
    1914:	1d20      	adds	r0, r4, #4
    1916:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1918:	a801      	add	r0, sp, #4
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <timer_add_task+0xac>)
    191c:	4798      	blx	r3
	return ERR_NONE;
    191e:	2000      	movs	r0, #0
    1920:	e7dd      	b.n	18de <timer_add_task+0x52>
    1922:	bf00      	nop
    1924:	00009860 	.word	0x00009860
    1928:	000021e5 	.word	0x000021e5
    192c:	000021eb 	.word	0x000021eb
    1930:	00001731 	.word	0x00001731
    1934:	000012b5 	.word	0x000012b5
    1938:	000012c3 	.word	0x000012c3

0000193c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    193c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    193e:	2300      	movs	r3, #0
    1940:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1942:	69c3      	ldr	r3, [r0, #28]
    1944:	b11b      	cbz	r3, 194e <usart_transmission_complete+0x12>
    1946:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    194a:	4610      	mov	r0, r2
    194c:	4798      	blx	r3
    194e:	bd08      	pop	{r3, pc}

00001950 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1950:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1952:	2300      	movs	r3, #0
    1954:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1956:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1958:	b11b      	cbz	r3, 1962 <usart_error+0x12>
    195a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    195e:	4610      	mov	r0, r2
    1960:	4798      	blx	r3
    1962:	bd08      	pop	{r3, pc}

00001964 <usart_fill_rx_buffer>:
{
    1964:	b538      	push	{r3, r4, r5, lr}
    1966:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1968:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    196c:	302c      	adds	r0, #44	; 0x2c
    196e:	4b03      	ldr	r3, [pc, #12]	; (197c <usart_fill_rx_buffer+0x18>)
    1970:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1972:	6a23      	ldr	r3, [r4, #32]
    1974:	b10b      	cbz	r3, 197a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1976:	4628      	mov	r0, r5
    1978:	4798      	blx	r3
    197a:	bd38      	pop	{r3, r4, r5, pc}
    197c:	00002321 	.word	0x00002321

00001980 <usart_async_write>:
{
    1980:	b570      	push	{r4, r5, r6, lr}
    1982:	460e      	mov	r6, r1
    1984:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1986:	4604      	mov	r4, r0
    1988:	b1e0      	cbz	r0, 19c4 <usart_async_write+0x44>
    198a:	b1e9      	cbz	r1, 19c8 <usart_async_write+0x48>
    198c:	1c10      	adds	r0, r2, #0
    198e:	bf18      	it	ne
    1990:	2001      	movne	r0, #1
    1992:	f240 123b 	movw	r2, #315	; 0x13b
    1996:	490f      	ldr	r1, [pc, #60]	; (19d4 <usart_async_write+0x54>)
    1998:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <usart_async_write+0x58>)
    199a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    199c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    19a0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    19a4:	429a      	cmp	r2, r3
    19a6:	d111      	bne.n	19cc <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    19a8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    19aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    19ae:	2300      	movs	r3, #0
    19b0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    19b4:	2301      	movs	r3, #1
    19b6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    19b8:	f104 0008 	add.w	r0, r4, #8
    19bc:	4b07      	ldr	r3, [pc, #28]	; (19dc <usart_async_write+0x5c>)
    19be:	4798      	blx	r3
	return (int32_t)length;
    19c0:	4628      	mov	r0, r5
    19c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    19c4:	2000      	movs	r0, #0
    19c6:	e7e4      	b.n	1992 <usart_async_write+0x12>
    19c8:	2000      	movs	r0, #0
    19ca:	e7e2      	b.n	1992 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    19cc:	f06f 001b 	mvn.w	r0, #27
}
    19d0:	bd70      	pop	{r4, r5, r6, pc}
    19d2:	bf00      	nop
    19d4:	00009878 	.word	0x00009878
    19d8:	000021e5 	.word	0x000021e5
    19dc:	00003667 	.word	0x00003667

000019e0 <usart_process_byte_sent>:
{
    19e0:	b510      	push	{r4, lr}
    19e2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    19e4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    19e6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    19ea:	429a      	cmp	r2, r3
    19ec:	d009      	beq.n	1a02 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    19ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
    19f0:	1c59      	adds	r1, r3, #1
    19f2:	8781      	strh	r1, [r0, #60]	; 0x3c
    19f4:	5cd1      	ldrb	r1, [r2, r3]
    19f6:	4b04      	ldr	r3, [pc, #16]	; (1a08 <usart_process_byte_sent+0x28>)
    19f8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    19fa:	4620      	mov	r0, r4
    19fc:	4b03      	ldr	r3, [pc, #12]	; (1a0c <usart_process_byte_sent+0x2c>)
    19fe:	4798      	blx	r3
    1a00:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1a02:	4b03      	ldr	r3, [pc, #12]	; (1a10 <usart_process_byte_sent+0x30>)
    1a04:	4798      	blx	r3
    1a06:	bd10      	pop	{r4, pc}
    1a08:	00003661 	.word	0x00003661
    1a0c:	00003667 	.word	0x00003667
    1a10:	0000366f 	.word	0x0000366f

00001a14 <usart_async_read>:
{
    1a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a18:	b082      	sub	sp, #8
    1a1a:	460f      	mov	r7, r1
    1a1c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1a1e:	4606      	mov	r6, r0
    1a20:	b1a0      	cbz	r0, 1a4c <usart_async_read+0x38>
    1a22:	b199      	cbz	r1, 1a4c <usart_async_read+0x38>
    1a24:	2a00      	cmp	r2, #0
    1a26:	d12d      	bne.n	1a84 <usart_async_read+0x70>
    1a28:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a2c:	4929      	ldr	r1, [pc, #164]	; (1ad4 <usart_async_read+0xc0>)
    1a2e:	2000      	movs	r0, #0
    1a30:	4b29      	ldr	r3, [pc, #164]	; (1ad8 <usart_async_read+0xc4>)
    1a32:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a34:	a801      	add	r0, sp, #4
    1a36:	4b29      	ldr	r3, [pc, #164]	; (1adc <usart_async_read+0xc8>)
    1a38:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a3a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1a3e:	4b28      	ldr	r3, [pc, #160]	; (1ae0 <usart_async_read+0xcc>)
    1a40:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1a42:	a801      	add	r0, sp, #4
    1a44:	4b27      	ldr	r3, [pc, #156]	; (1ae4 <usart_async_read+0xd0>)
    1a46:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1a48:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1a4a:	e03e      	b.n	1aca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a4c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a50:	4920      	ldr	r1, [pc, #128]	; (1ad4 <usart_async_read+0xc0>)
    1a52:	2000      	movs	r0, #0
    1a54:	4b20      	ldr	r3, [pc, #128]	; (1ad8 <usart_async_read+0xc4>)
    1a56:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a58:	a801      	add	r0, sp, #4
    1a5a:	4b20      	ldr	r3, [pc, #128]	; (1adc <usart_async_read+0xc8>)
    1a5c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a5e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a62:	4650      	mov	r0, sl
    1a64:	4b1e      	ldr	r3, [pc, #120]	; (1ae0 <usart_async_read+0xcc>)
    1a66:	4798      	blx	r3
    1a68:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1a6a:	a801      	add	r0, sp, #4
    1a6c:	4b1d      	ldr	r3, [pc, #116]	; (1ae4 <usart_async_read+0xd0>)
    1a6e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1a70:	f1b9 0f00 	cmp.w	r9, #0
    1a74:	d004      	beq.n	1a80 <usart_async_read+0x6c>
    1a76:	f1b8 0f00 	cmp.w	r8, #0
    1a7a:	d119      	bne.n	1ab0 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1a7c:	2500      	movs	r5, #0
    1a7e:	e024      	b.n	1aca <usart_async_read+0xb6>
    1a80:	2500      	movs	r5, #0
    1a82:	e022      	b.n	1aca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a84:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a88:	4912      	ldr	r1, [pc, #72]	; (1ad4 <usart_async_read+0xc0>)
    1a8a:	2001      	movs	r0, #1
    1a8c:	4b12      	ldr	r3, [pc, #72]	; (1ad8 <usart_async_read+0xc4>)
    1a8e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a90:	a801      	add	r0, sp, #4
    1a92:	4b12      	ldr	r3, [pc, #72]	; (1adc <usart_async_read+0xc8>)
    1a94:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a96:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a9a:	4650      	mov	r0, sl
    1a9c:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <usart_async_read+0xcc>)
    1a9e:	4798      	blx	r3
    1aa0:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1aa2:	a801      	add	r0, sp, #4
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <usart_async_read+0xd0>)
    1aa6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1aa8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1aaa:	f1b9 0f00 	cmp.w	r9, #0
    1aae:	d00c      	beq.n	1aca <usart_async_read+0xb6>
{
    1ab0:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1ab2:	4e0d      	ldr	r6, [pc, #52]	; (1ae8 <usart_async_read+0xd4>)
    1ab4:	1c60      	adds	r0, r4, #1
    1ab6:	b285      	uxth	r5, r0
    1ab8:	1939      	adds	r1, r7, r4
    1aba:	4650      	mov	r0, sl
    1abc:	47b0      	blx	r6
    1abe:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1ac0:	454c      	cmp	r4, r9
    1ac2:	d202      	bcs.n	1aca <usart_async_read+0xb6>
    1ac4:	b2a3      	uxth	r3, r4
    1ac6:	4598      	cmp	r8, r3
    1ac8:	d8f4      	bhi.n	1ab4 <usart_async_read+0xa0>
}
    1aca:	4628      	mov	r0, r5
    1acc:	b002      	add	sp, #8
    1ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ad2:	bf00      	nop
    1ad4:	00009878 	.word	0x00009878
    1ad8:	000021e5 	.word	0x000021e5
    1adc:	000012b5 	.word	0x000012b5
    1ae0:	00002361 	.word	0x00002361
    1ae4:	000012c3 	.word	0x000012c3
    1ae8:	000022dd 	.word	0x000022dd

00001aec <usart_async_init>:
{
    1aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aee:	460d      	mov	r5, r1
    1af0:	4616      	mov	r6, r2
    1af2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1af4:	4604      	mov	r4, r0
    1af6:	b320      	cbz	r0, 1b42 <usart_async_init+0x56>
    1af8:	b329      	cbz	r1, 1b46 <usart_async_init+0x5a>
    1afa:	b332      	cbz	r2, 1b4a <usart_async_init+0x5e>
    1afc:	1c18      	adds	r0, r3, #0
    1afe:	bf18      	it	ne
    1b00:	2001      	movne	r0, #1
    1b02:	223a      	movs	r2, #58	; 0x3a
    1b04:	4913      	ldr	r1, [pc, #76]	; (1b54 <usart_async_init+0x68>)
    1b06:	4b14      	ldr	r3, [pc, #80]	; (1b58 <usart_async_init+0x6c>)
    1b08:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1b0a:	463a      	mov	r2, r7
    1b0c:	4631      	mov	r1, r6
    1b0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1b12:	4b12      	ldr	r3, [pc, #72]	; (1b5c <usart_async_init+0x70>)
    1b14:	4798      	blx	r3
    1b16:	b9d0      	cbnz	r0, 1b4e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1b18:	4629      	mov	r1, r5
    1b1a:	f104 0008 	add.w	r0, r4, #8
    1b1e:	4b10      	ldr	r3, [pc, #64]	; (1b60 <usart_async_init+0x74>)
    1b20:	4798      	blx	r3
	if (init_status) {
    1b22:	4603      	mov	r3, r0
    1b24:	b958      	cbnz	r0, 1b3e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1b26:	4a0f      	ldr	r2, [pc, #60]	; (1b64 <usart_async_init+0x78>)
    1b28:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1b2a:	4a0f      	ldr	r2, [pc, #60]	; (1b68 <usart_async_init+0x7c>)
    1b2c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1b2e:	4a0f      	ldr	r2, [pc, #60]	; (1b6c <usart_async_init+0x80>)
    1b30:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1b32:	4a0f      	ldr	r2, [pc, #60]	; (1b70 <usart_async_init+0x84>)
    1b34:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1b36:	4a0f      	ldr	r2, [pc, #60]	; (1b74 <usart_async_init+0x88>)
    1b38:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1b3a:	4a0f      	ldr	r2, [pc, #60]	; (1b78 <usart_async_init+0x8c>)
    1b3c:	6162      	str	r2, [r4, #20]
}
    1b3e:	4618      	mov	r0, r3
    1b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b42:	2000      	movs	r0, #0
    1b44:	e7dd      	b.n	1b02 <usart_async_init+0x16>
    1b46:	2000      	movs	r0, #0
    1b48:	e7db      	b.n	1b02 <usart_async_init+0x16>
    1b4a:	2000      	movs	r0, #0
    1b4c:	e7d9      	b.n	1b02 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1b4e:	f06f 030c 	mvn.w	r3, #12
    1b52:	e7f4      	b.n	1b3e <usart_async_init+0x52>
    1b54:	00009878 	.word	0x00009878
    1b58:	000021e5 	.word	0x000021e5
    1b5c:	0000228d 	.word	0x0000228d
    1b60:	000035d1 	.word	0x000035d1
    1b64:	00001a15 	.word	0x00001a15
    1b68:	00001981 	.word	0x00001981
    1b6c:	000019e1 	.word	0x000019e1
    1b70:	00001965 	.word	0x00001965
    1b74:	0000193d 	.word	0x0000193d
    1b78:	00001951 	.word	0x00001951

00001b7c <usart_async_enable>:
{
    1b7c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1b7e:	4604      	mov	r4, r0
    1b80:	2261      	movs	r2, #97	; 0x61
    1b82:	4906      	ldr	r1, [pc, #24]	; (1b9c <usart_async_enable+0x20>)
    1b84:	3000      	adds	r0, #0
    1b86:	bf18      	it	ne
    1b88:	2001      	movne	r0, #1
    1b8a:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <usart_async_enable+0x24>)
    1b8c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1b8e:	f104 0008 	add.w	r0, r4, #8
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <usart_async_enable+0x28>)
    1b94:	4798      	blx	r3
}
    1b96:	2000      	movs	r0, #0
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	bf00      	nop
    1b9c:	00009878 	.word	0x00009878
    1ba0:	000021e5 	.word	0x000021e5
    1ba4:	0000364d 	.word	0x0000364d

00001ba8 <usart_async_get_io_descriptor>:
{
    1ba8:	b538      	push	{r3, r4, r5, lr}
    1baa:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1bac:	4605      	mov	r5, r0
    1bae:	b148      	cbz	r0, 1bc4 <usart_async_get_io_descriptor+0x1c>
    1bb0:	1c08      	adds	r0, r1, #0
    1bb2:	bf18      	it	ne
    1bb4:	2001      	movne	r0, #1
    1bb6:	2277      	movs	r2, #119	; 0x77
    1bb8:	4903      	ldr	r1, [pc, #12]	; (1bc8 <usart_async_get_io_descriptor+0x20>)
    1bba:	4b04      	ldr	r3, [pc, #16]	; (1bcc <usart_async_get_io_descriptor+0x24>)
    1bbc:	4798      	blx	r3
	*io = &descr->io;
    1bbe:	6025      	str	r5, [r4, #0]
}
    1bc0:	2000      	movs	r0, #0
    1bc2:	bd38      	pop	{r3, r4, r5, pc}
    1bc4:	2000      	movs	r0, #0
    1bc6:	e7f6      	b.n	1bb6 <usart_async_get_io_descriptor+0xe>
    1bc8:	00009878 	.word	0x00009878
    1bcc:	000021e5 	.word	0x000021e5

00001bd0 <usart_async_register_callback>:
{
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	460c      	mov	r4, r1
    1bd4:	4616      	mov	r6, r2
	ASSERT(descr);
    1bd6:	4605      	mov	r5, r0
    1bd8:	2283      	movs	r2, #131	; 0x83
    1bda:	4917      	ldr	r1, [pc, #92]	; (1c38 <usart_async_register_callback+0x68>)
    1bdc:	3000      	adds	r0, #0
    1bde:	bf18      	it	ne
    1be0:	2001      	movne	r0, #1
    1be2:	4b16      	ldr	r3, [pc, #88]	; (1c3c <usart_async_register_callback+0x6c>)
    1be4:	4798      	blx	r3
	switch (type) {
    1be6:	2c01      	cmp	r4, #1
    1be8:	d010      	beq.n	1c0c <usart_async_register_callback+0x3c>
    1bea:	b124      	cbz	r4, 1bf6 <usart_async_register_callback+0x26>
    1bec:	2c02      	cmp	r4, #2
    1bee:	d018      	beq.n	1c22 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    1bf0:	f06f 000c 	mvn.w	r0, #12
}
    1bf4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    1bf6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1bf8:	1c32      	adds	r2, r6, #0
    1bfa:	bf18      	it	ne
    1bfc:	2201      	movne	r2, #1
    1bfe:	2101      	movs	r1, #1
    1c00:	f105 0008 	add.w	r0, r5, #8
    1c04:	4b0e      	ldr	r3, [pc, #56]	; (1c40 <usart_async_register_callback+0x70>)
    1c06:	4798      	blx	r3
	return ERR_NONE;
    1c08:	2000      	movs	r0, #0
		break;
    1c0a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1c0c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1c0e:	1c32      	adds	r2, r6, #0
    1c10:	bf18      	it	ne
    1c12:	2201      	movne	r2, #1
    1c14:	2102      	movs	r1, #2
    1c16:	f105 0008 	add.w	r0, r5, #8
    1c1a:	4b09      	ldr	r3, [pc, #36]	; (1c40 <usart_async_register_callback+0x70>)
    1c1c:	4798      	blx	r3
	return ERR_NONE;
    1c1e:	2000      	movs	r0, #0
		break;
    1c20:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    1c22:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1c24:	1c32      	adds	r2, r6, #0
    1c26:	bf18      	it	ne
    1c28:	2201      	movne	r2, #1
    1c2a:	2103      	movs	r1, #3
    1c2c:	f105 0008 	add.w	r0, r5, #8
    1c30:	4b03      	ldr	r3, [pc, #12]	; (1c40 <usart_async_register_callback+0x70>)
    1c32:	4798      	blx	r3
	return ERR_NONE;
    1c34:	2000      	movs	r0, #0
		break;
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	00009878 	.word	0x00009878
    1c3c:	000021e5 	.word	0x000021e5
    1c40:	00003679 	.word	0x00003679

00001c44 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c44:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <_usb_d_find_ep+0x40>)
    1c46:	7859      	ldrb	r1, [r3, #1]
    1c48:	4288      	cmp	r0, r1
    1c4a:	d018      	beq.n	1c7e <_usb_d_find_ep+0x3a>
{
    1c4c:	b430      	push	{r4, r5}
    1c4e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c50:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c52:	f000 050f 	and.w	r5, r0, #15
    1c56:	e007      	b.n	1c68 <_usb_d_find_ep+0x24>
    1c58:	3301      	adds	r3, #1
    1c5a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c5c:	2b0d      	cmp	r3, #13
    1c5e:	d009      	beq.n	1c74 <_usb_d_find_ep+0x30>
    1c60:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c62:	7851      	ldrb	r1, [r2, #1]
    1c64:	4281      	cmp	r1, r0
    1c66:	d007      	beq.n	1c78 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1c68:	7814      	ldrb	r4, [r2, #0]
    1c6a:	2c00      	cmp	r4, #0
    1c6c:	d1f4      	bne.n	1c58 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c6e:	428d      	cmp	r5, r1
    1c70:	d1f2      	bne.n	1c58 <_usb_d_find_ep+0x14>
    1c72:	e001      	b.n	1c78 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1c74:	f04f 33ff 	mov.w	r3, #4294967295
}
    1c78:	4618      	mov	r0, r3
    1c7a:	bc30      	pop	{r4, r5}
    1c7c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c7e:	2300      	movs	r3, #0
}
    1c80:	4618      	mov	r0, r3
    1c82:	4770      	bx	lr
    1c84:	20000568 	.word	0x20000568

00001c88 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1c88:	2000      	movs	r0, #0
    1c8a:	4770      	bx	lr

00001c8c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1c8c:	b538      	push	{r3, r4, r5, lr}
    1c8e:	4604      	mov	r4, r0
    1c90:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c92:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <usb_d_cb_trans_more+0x2c>)
    1c94:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <usb_d_cb_trans_more+0x30>)
    1c98:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1c9c:	789b      	ldrb	r3, [r3, #2]
    1c9e:	2b03      	cmp	r3, #3
    1ca0:	d001      	beq.n	1ca6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1ca2:	2000      	movs	r0, #0
}
    1ca4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1ca6:	4b05      	ldr	r3, [pc, #20]	; (1cbc <usb_d_cb_trans_more+0x30>)
    1ca8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1cac:	6983      	ldr	r3, [r0, #24]
    1cae:	4629      	mov	r1, r5
    1cb0:	4620      	mov	r0, r4
    1cb2:	4798      	blx	r3
    1cb4:	bd38      	pop	{r3, r4, r5, pc}
    1cb6:	bf00      	nop
    1cb8:	00001c45 	.word	0x00001c45
    1cbc:	20000568 	.word	0x20000568

00001cc0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	b085      	sub	sp, #20
    1cc4:	4606      	mov	r6, r0
    1cc6:	460d      	mov	r5, r1
    1cc8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cca:	4b4d      	ldr	r3, [pc, #308]	; (1e00 <_usb_d_cb_trans_done+0x140>)
    1ccc:	4798      	blx	r3
    1cce:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1cd0:	2d00      	cmp	r5, #0
    1cd2:	d15b      	bne.n	1d8c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1cd4:	4a4b      	ldr	r2, [pc, #300]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1cd6:	0143      	lsls	r3, r0, #5
    1cd8:	18d1      	adds	r1, r2, r3
    1cda:	2000      	movs	r0, #0
    1cdc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1cde:	5cd3      	ldrb	r3, [r2, r3]
    1ce0:	b173      	cbz	r3, 1d00 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ce2:	4b48      	ldr	r3, [pc, #288]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1ce4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ce8:	2201      	movs	r2, #1
    1cea:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1cec:	4845      	ldr	r0, [pc, #276]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1cee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1cf2:	69c3      	ldr	r3, [r0, #28]
    1cf4:	463a      	mov	r2, r7
    1cf6:	78c1      	ldrb	r1, [r0, #3]
    1cf8:	4630      	mov	r0, r6
    1cfa:	4798      	blx	r3
}
    1cfc:	b005      	add	sp, #20
    1cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1d00:	788b      	ldrb	r3, [r1, #2]
    1d02:	2b03      	cmp	r3, #3
    1d04:	d00b      	beq.n	1d1e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1d06:	483f      	ldr	r0, [pc, #252]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d08:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1d0c:	4614      	mov	r4, r2
    1d0e:	69d3      	ldr	r3, [r2, #28]
    1d10:	320c      	adds	r2, #12
    1d12:	2100      	movs	r1, #0
    1d14:	7860      	ldrb	r0, [r4, #1]
    1d16:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d18:	2302      	movs	r3, #2
    1d1a:	70a3      	strb	r3, [r4, #2]
    1d1c:	e7ee      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1d1e:	460b      	mov	r3, r1
    1d20:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1d24:	460a      	mov	r2, r1
    1d26:	69ce      	ldr	r6, [r1, #28]
    1d28:	320c      	adds	r2, #12
    1d2a:	2101      	movs	r1, #1
    1d2c:	7858      	ldrb	r0, [r3, #1]
    1d2e:	47b0      	blx	r6
		if (err) {
    1d30:	b1a0      	cbz	r0, 1d5c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1d32:	4b34      	ldr	r3, [pc, #208]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d34:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d38:	2205      	movs	r2, #5
    1d3a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1d3c:	2202      	movs	r2, #2
    1d3e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1d40:	2d00      	cmp	r5, #0
    1d42:	db09      	blt.n	1d58 <_usb_d_cb_trans_done+0x98>
    1d44:	482f      	ldr	r0, [pc, #188]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d46:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d4a:	7840      	ldrb	r0, [r0, #1]
    1d4c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1d50:	2101      	movs	r1, #1
    1d52:	4b2d      	ldr	r3, [pc, #180]	; (1e08 <_usb_d_cb_trans_done+0x148>)
    1d54:	4798      	blx	r3
    1d56:	e7d1      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
    1d58:	7858      	ldrb	r0, [r3, #1]
    1d5a:	e7f9      	b.n	1d50 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1d5c:	4829      	ldr	r0, [pc, #164]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d62:	2304      	movs	r3, #4
    1d64:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1d66:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1d68:	2200      	movs	r2, #0
    1d6a:	9201      	str	r2, [sp, #4]
    1d6c:	9202      	str	r2, [sp, #8]
    1d6e:	4295      	cmp	r5, r2
    1d70:	bfac      	ite	ge
    1d72:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1d76:	f003 030f 	andlt.w	r3, r3, #15
    1d7a:	f88d 300c 	strb.w	r3, [sp, #12]
    1d7e:	2301      	movs	r3, #1
    1d80:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1d84:	a801      	add	r0, sp, #4
    1d86:	4b21      	ldr	r3, [pc, #132]	; (1e0c <_usb_d_cb_trans_done+0x14c>)
    1d88:	4798      	blx	r3
    1d8a:	e7b7      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1d8c:	2d01      	cmp	r5, #1
    1d8e:	d00a      	beq.n	1da6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1d90:	2d02      	cmp	r5, #2
    1d92:	d01c      	beq.n	1dce <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1d94:	2d03      	cmp	r5, #3
    1d96:	d02a      	beq.n	1dee <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1d98:	4b1a      	ldr	r3, [pc, #104]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d9a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1d9e:	2206      	movs	r2, #6
    1da0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1da2:	70da      	strb	r2, [r3, #3]
    1da4:	e7a2      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1da6:	4a17      	ldr	r2, [pc, #92]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1da8:	0143      	lsls	r3, r0, #5
    1daa:	18d1      	adds	r1, r2, r3
    1dac:	2002      	movs	r0, #2
    1dae:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1db0:	5cd3      	ldrb	r3, [r2, r3]
    1db2:	b12b      	cbz	r3, 1dc0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1db4:	4b13      	ldr	r3, [pc, #76]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1db6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1dba:	2205      	movs	r2, #5
    1dbc:	709a      	strb	r2, [r3, #2]
    1dbe:	e795      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1dc0:	460b      	mov	r3, r1
    1dc2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1dc4:	2100      	movs	r1, #0
    1dc6:	4630      	mov	r0, r6
    1dc8:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <_usb_d_cb_trans_done+0x148>)
    1dca:	4798      	blx	r3
    1dcc:	e78e      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1dce:	4a0d      	ldr	r2, [pc, #52]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1dd0:	0143      	lsls	r3, r0, #5
    1dd2:	18d1      	adds	r1, r2, r3
    1dd4:	2004      	movs	r0, #4
    1dd6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1dd8:	5cd3      	ldrb	r3, [r2, r3]
    1dda:	b12b      	cbz	r3, 1de8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ddc:	4b09      	ldr	r3, [pc, #36]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1dde:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1de2:	2201      	movs	r2, #1
    1de4:	709a      	strb	r2, [r3, #2]
    1de6:	e781      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1de8:	2302      	movs	r3, #2
    1dea:	708b      	strb	r3, [r1, #2]
			return;
    1dec:	e786      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1dee:	4b05      	ldr	r3, [pc, #20]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1df0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1df4:	2200      	movs	r2, #0
    1df6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1df8:	2205      	movs	r2, #5
    1dfa:	70da      	strb	r2, [r3, #3]
    1dfc:	e776      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
    1dfe:	bf00      	nop
    1e00:	00001c45 	.word	0x00001c45
    1e04:	20000568 	.word	0x20000568
    1e08:	00005409 	.word	0x00005409
    1e0c:	000055b1 	.word	0x000055b1

00001e10 <usb_d_cb_trans_setup>:
{
    1e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e14:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e16:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <usb_d_cb_trans_setup+0x78>)
    1e18:	4798      	blx	r3
    1e1a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1e1c:	4c1b      	ldr	r4, [pc, #108]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e1e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1e22:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1e24:	4621      	mov	r1, r4
    1e26:	4628      	mov	r0, r5
    1e28:	4b19      	ldr	r3, [pc, #100]	; (1e90 <usb_d_cb_trans_setup+0x80>)
    1e2a:	4798      	blx	r3
	if (n != 8) {
    1e2c:	b2c0      	uxtb	r0, r0
    1e2e:	2808      	cmp	r0, #8
    1e30:	d009      	beq.n	1e46 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e32:	2101      	movs	r1, #1
    1e34:	4628      	mov	r0, r5
    1e36:	4c17      	ldr	r4, [pc, #92]	; (1e94 <usb_d_cb_trans_setup+0x84>)
    1e38:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e3a:	2101      	movs	r1, #1
    1e3c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1e40:	47a0      	blx	r4
		return;
    1e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1e46:	2100      	movs	r1, #0
    1e48:	4628      	mov	r0, r5
    1e4a:	4f12      	ldr	r7, [pc, #72]	; (1e94 <usb_d_cb_trans_setup+0x84>)
    1e4c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1e4e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1e52:	2100      	movs	r1, #0
    1e54:	4640      	mov	r0, r8
    1e56:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1e58:	4b0c      	ldr	r3, [pc, #48]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e5a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1e5e:	2201      	movs	r2, #1
    1e60:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1e62:	695b      	ldr	r3, [r3, #20]
    1e64:	4621      	mov	r1, r4
    1e66:	4628      	mov	r0, r5
    1e68:	4798      	blx	r3
    1e6a:	b108      	cbz	r0, 1e70 <usb_d_cb_trans_setup+0x60>
    1e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1e70:	4b06      	ldr	r3, [pc, #24]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e72:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1e76:	2305      	movs	r3, #5
    1e78:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e7a:	2101      	movs	r1, #1
    1e7c:	4628      	mov	r0, r5
    1e7e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e80:	2101      	movs	r1, #1
    1e82:	4640      	mov	r0, r8
    1e84:	47b8      	blx	r7
    1e86:	e7f1      	b.n	1e6c <usb_d_cb_trans_setup+0x5c>
    1e88:	00001c45 	.word	0x00001c45
    1e8c:	20000568 	.word	0x20000568
    1e90:	00005551 	.word	0x00005551
    1e94:	00005409 	.word	0x00005409

00001e98 <usb_d_init>:

int32_t usb_d_init(void)
{
    1e98:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1e9a:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <usb_d_init+0x48>)
    1e9c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1e9e:	2800      	cmp	r0, #0
    1ea0:	db1d      	blt.n	1ede <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1ea2:	4c10      	ldr	r4, [pc, #64]	; (1ee4 <usb_d_init+0x4c>)
    1ea4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1ea8:	2100      	movs	r1, #0
    1eaa:	4620      	mov	r0, r4
    1eac:	4b0e      	ldr	r3, [pc, #56]	; (1ee8 <usb_d_init+0x50>)
    1eae:	4798      	blx	r3
    1eb0:	4623      	mov	r3, r4
    1eb2:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1eb6:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1eb8:	4a0c      	ldr	r2, [pc, #48]	; (1eec <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1eba:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1ebc:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1ebe:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1ec0:	61da      	str	r2, [r3, #28]
    1ec2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ec4:	4283      	cmp	r3, r0
    1ec6:	d1f8      	bne.n	1eba <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1ec8:	4909      	ldr	r1, [pc, #36]	; (1ef0 <usb_d_init+0x58>)
    1eca:	2000      	movs	r0, #0
    1ecc:	4c09      	ldr	r4, [pc, #36]	; (1ef4 <usb_d_init+0x5c>)
    1ece:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1ed0:	4909      	ldr	r1, [pc, #36]	; (1ef8 <usb_d_init+0x60>)
    1ed2:	2001      	movs	r0, #1
    1ed4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1ed6:	4909      	ldr	r1, [pc, #36]	; (1efc <usb_d_init+0x64>)
    1ed8:	2002      	movs	r0, #2
    1eda:	47a0      	blx	r4
	return ERR_NONE;
    1edc:	2000      	movs	r0, #0
}
    1ede:	bd10      	pop	{r4, pc}
    1ee0:	00004de1 	.word	0x00004de1
    1ee4:	20000568 	.word	0x20000568
    1ee8:	00008e4b 	.word	0x00008e4b
    1eec:	00001c89 	.word	0x00001c89
    1ef0:	00001e11 	.word	0x00001e11
    1ef4:	000057b9 	.word	0x000057b9
    1ef8:	00001c8d 	.word	0x00001c8d
    1efc:	00001cc1 	.word	0x00001cc1

00001f00 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1f00:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1f02:	4b01      	ldr	r3, [pc, #4]	; (1f08 <usb_d_register_callback+0x8>)
    1f04:	4798      	blx	r3
    1f06:	bd08      	pop	{r3, pc}
    1f08:	00005791 	.word	0x00005791

00001f0c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1f0c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1f0e:	4b01      	ldr	r3, [pc, #4]	; (1f14 <usb_d_enable+0x8>)
    1f10:	4798      	blx	r3
}
    1f12:	bd08      	pop	{r3, pc}
    1f14:	00004ee9 	.word	0x00004ee9

00001f18 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1f18:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    1f1a:	4b01      	ldr	r3, [pc, #4]	; (1f20 <usb_d_attach+0x8>)
    1f1c:	4798      	blx	r3
    1f1e:	bd08      	pop	{r3, pc}
    1f20:	00004f55 	.word	0x00004f55

00001f24 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1f24:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1f26:	4b01      	ldr	r3, [pc, #4]	; (1f2c <usb_d_set_address+0x8>)
    1f28:	4798      	blx	r3
    1f2a:	bd08      	pop	{r3, pc}
    1f2c:	00004f67 	.word	0x00004f67

00001f30 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f32:	4606      	mov	r6, r0
    1f34:	460c      	mov	r4, r1
    1f36:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f38:	4b0f      	ldr	r3, [pc, #60]	; (1f78 <usb_d_ep_init+0x48>)
    1f3a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1f3c:	2800      	cmp	r0, #0
    1f3e:	da14      	bge.n	1f6a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1f40:	20ff      	movs	r0, #255	; 0xff
    1f42:	4b0d      	ldr	r3, [pc, #52]	; (1f78 <usb_d_ep_init+0x48>)
    1f44:	4798      	blx	r3
		if (ep_index < 0) {
    1f46:	1e05      	subs	r5, r0, #0
    1f48:	db12      	blt.n	1f70 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1f4a:	463a      	mov	r2, r7
    1f4c:	4621      	mov	r1, r4
    1f4e:	4630      	mov	r0, r6
    1f50:	4b0a      	ldr	r3, [pc, #40]	; (1f7c <usb_d_ep_init+0x4c>)
    1f52:	4798      	blx	r3
	if (rc < 0) {
    1f54:	2800      	cmp	r0, #0
    1f56:	db0d      	blt.n	1f74 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1f58:	4b09      	ldr	r3, [pc, #36]	; (1f80 <usb_d_ep_init+0x50>)
    1f5a:	0168      	lsls	r0, r5, #5
    1f5c:	181a      	adds	r2, r3, r0
    1f5e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1f60:	f004 0403 	and.w	r4, r4, #3
    1f64:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1f66:	2000      	movs	r0, #0
    1f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1f6a:	f06f 0013 	mvn.w	r0, #19
    1f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1f70:	f06f 0014 	mvn.w	r0, #20
}
    1f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f76:	bf00      	nop
    1f78:	00001c45 	.word	0x00001c45
    1f7c:	00004f75 	.word	0x00004f75
    1f80:	20000568 	.word	0x20000568

00001f84 <usb_d_ep0_init>:
{
    1f84:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1f86:	4602      	mov	r2, r0
    1f88:	2100      	movs	r1, #0
    1f8a:	4608      	mov	r0, r1
    1f8c:	4b01      	ldr	r3, [pc, #4]	; (1f94 <usb_d_ep0_init+0x10>)
    1f8e:	4798      	blx	r3
}
    1f90:	bd08      	pop	{r3, pc}
    1f92:	bf00      	nop
    1f94:	00001f31 	.word	0x00001f31

00001f98 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1f98:	b538      	push	{r3, r4, r5, lr}
    1f9a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f9c:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <usb_d_ep_deinit+0x20>)
    1f9e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1fa0:	1e04      	subs	r4, r0, #0
    1fa2:	db07      	blt.n	1fb4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1fa4:	4628      	mov	r0, r5
    1fa6:	4b05      	ldr	r3, [pc, #20]	; (1fbc <usb_d_ep_deinit+0x24>)
    1fa8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1faa:	4805      	ldr	r0, [pc, #20]	; (1fc0 <usb_d_ep_deinit+0x28>)
    1fac:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1fb0:	23ff      	movs	r3, #255	; 0xff
    1fb2:	7043      	strb	r3, [r0, #1]
    1fb4:	bd38      	pop	{r3, r4, r5, pc}
    1fb6:	bf00      	nop
    1fb8:	00001c45 	.word	0x00001c45
    1fbc:	0000508d 	.word	0x0000508d
    1fc0:	20000568 	.word	0x20000568

00001fc4 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1fc4:	b538      	push	{r3, r4, r5, lr}
    1fc6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fc8:	4b0e      	ldr	r3, [pc, #56]	; (2004 <usb_d_ep_enable+0x40>)
    1fca:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1fcc:	1e04      	subs	r4, r0, #0
    1fce:	db16      	blt.n	1ffe <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1fd0:	0163      	lsls	r3, r4, #5
    1fd2:	4a0d      	ldr	r2, [pc, #52]	; (2008 <usb_d_ep_enable+0x44>)
    1fd4:	5cd3      	ldrb	r3, [r2, r3]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	bf0c      	ite	eq
    1fda:	2202      	moveq	r2, #2
    1fdc:	2201      	movne	r2, #1
    1fde:	4b0a      	ldr	r3, [pc, #40]	; (2008 <usb_d_ep_enable+0x44>)
    1fe0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1fe4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1fe6:	4628      	mov	r0, r5
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <usb_d_ep_enable+0x48>)
    1fea:	4798      	blx	r3
	if (rc < 0) {
    1fec:	2800      	cmp	r0, #0
    1fee:	db00      	blt.n	1ff2 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1ff0:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <usb_d_ep_enable+0x44>)
    1ff4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1ff8:	2300      	movs	r3, #0
    1ffa:	70a3      	strb	r3, [r4, #2]
    1ffc:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1ffe:	f06f 0011 	mvn.w	r0, #17
    2002:	e7f5      	b.n	1ff0 <usb_d_ep_enable+0x2c>
    2004:	00001c45 	.word	0x00001c45
    2008:	20000568 	.word	0x20000568
    200c:	00005151 	.word	0x00005151

00002010 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2014:	b086      	sub	sp, #24
    2016:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2018:	7a07      	ldrb	r7, [r0, #8]
    201a:	4638      	mov	r0, r7
    201c:	4b3f      	ldr	r3, [pc, #252]	; (211c <usb_d_ep_transfer+0x10c>)
    201e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2020:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    2022:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2026:	1e06      	subs	r6, r0, #0
    2028:	db72      	blt.n	2110 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    202a:	a804      	add	r0, sp, #16
    202c:	4b3c      	ldr	r3, [pc, #240]	; (2120 <usb_d_ep_transfer+0x110>)
    202e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2030:	4b3c      	ldr	r3, [pc, #240]	; (2124 <usb_d_ep_transfer+0x114>)
    2032:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2036:	789b      	ldrb	r3, [r3, #2]
    2038:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    203c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2040:	b2db      	uxtb	r3, r3
    2042:	2b01      	cmp	r3, #1
    2044:	d011      	beq.n	206a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2046:	a804      	add	r0, sp, #16
    2048:	4b37      	ldr	r3, [pc, #220]	; (2128 <usb_d_ep_transfer+0x118>)
    204a:	4798      	blx	r3
		switch (state) {
    204c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2050:	b2db      	uxtb	r3, r3
    2052:	2b05      	cmp	r3, #5
    2054:	d05f      	beq.n	2116 <usb_d_ep_transfer+0x106>
    2056:	2b06      	cmp	r3, #6
    2058:	d023      	beq.n	20a2 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    205a:	2b00      	cmp	r3, #0
    205c:	bf0c      	ite	eq
    205e:	f06f 0012 	mvneq.w	r0, #18
    2062:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2064:	b006      	add	sp, #24
    2066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    206a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2124 <usb_d_ep_transfer+0x114>
    206e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    2072:	eb0a 0309 	add.w	r3, sl, r9
    2076:	2203      	movs	r2, #3
    2078:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    207a:	a804      	add	r0, sp, #16
    207c:	4b2a      	ldr	r3, [pc, #168]	; (2128 <usb_d_ep_transfer+0x118>)
    207e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2080:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2084:	b183      	cbz	r3, 20a8 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2086:	7a22      	ldrb	r2, [r4, #8]
    2088:	3500      	adds	r5, #0
    208a:	bf18      	it	ne
    208c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    208e:	6823      	ldr	r3, [r4, #0]
    2090:	9301      	str	r3, [sp, #4]
    2092:	f8cd 8008 	str.w	r8, [sp, #8]
    2096:	f017 0f80 	tst.w	r7, #128	; 0x80
    209a:	d119      	bne.n	20d0 <usb_d_ep_transfer+0xc0>
    209c:	f002 030f 	and.w	r3, r2, #15
    20a0:	e018      	b.n	20d4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    20a2:	f06f 000f 	mvn.w	r0, #15
    20a6:	e7dd      	b.n	2064 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    20a8:	4b1e      	ldr	r3, [pc, #120]	; (2124 <usb_d_ep_transfer+0x114>)
    20aa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    20ae:	7cda      	ldrb	r2, [r3, #19]
    20b0:	7c9d      	ldrb	r5, [r3, #18]
    20b2:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    20b6:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    20b8:	b9a5      	cbnz	r5, 20e4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    20ba:	4b1a      	ldr	r3, [pc, #104]	; (2124 <usb_d_ep_transfer+0x114>)
    20bc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    20c0:	2304      	movs	r3, #4
    20c2:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    20c4:	2300      	movs	r3, #0
			zlp                 = true;
    20c6:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20c8:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20ca:	6821      	ldr	r1, [r4, #0]
    20cc:	9101      	str	r1, [sp, #4]
    20ce:	9302      	str	r3, [sp, #8]
    20d0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    20d4:	f88d 300c 	strb.w	r3, [sp, #12]
    20d8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    20dc:	a801      	add	r0, sp, #4
    20de:	4b13      	ldr	r3, [pc, #76]	; (212c <usb_d_ep_transfer+0x11c>)
    20e0:	4798      	blx	r3
	return rc;
    20e2:	e7bf      	b.n	2064 <usb_d_ep_transfer+0x54>
    20e4:	4643      	mov	r3, r8
    20e6:	45a8      	cmp	r8, r5
    20e8:	bf28      	it	cs
    20ea:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    20ec:	4a0d      	ldr	r2, [pc, #52]	; (2124 <usb_d_ep_transfer+0x114>)
    20ee:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    20f2:	f996 200c 	ldrsb.w	r2, [r6, #12]
    20f6:	2a00      	cmp	r2, #0
    20f8:	db05      	blt.n	2106 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20fa:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20fc:	6821      	ldr	r1, [r4, #0]
    20fe:	9101      	str	r1, [sp, #4]
    2100:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2102:	2500      	movs	r5, #0
    2104:	e7ca      	b.n	209c <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    2106:	429d      	cmp	r5, r3
    2108:	bf94      	ite	ls
    210a:	2500      	movls	r5, #0
    210c:	2501      	movhi	r5, #1
    210e:	e7db      	b.n	20c8 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    2110:	f06f 0011 	mvn.w	r0, #17
    2114:	e7a6      	b.n	2064 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    2116:	2002      	movs	r0, #2
    2118:	e7a4      	b.n	2064 <usb_d_ep_transfer+0x54>
    211a:	bf00      	nop
    211c:	00001c45 	.word	0x00001c45
    2120:	000012b5 	.word	0x000012b5
    2124:	20000568 	.word	0x20000568
    2128:	000012c3 	.word	0x000012c3
    212c:	000055b1 	.word	0x000055b1

00002130 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2130:	b538      	push	{r3, r4, r5, lr}
    2132:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2134:	b141      	cbz	r1, 2148 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2136:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2138:	bf0c      	ite	eq
    213a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    213c:	2102      	movne	r1, #2
    213e:	4b13      	ldr	r3, [pc, #76]	; (218c <usb_d_ep_halt+0x5c>)
    2140:	4798      	blx	r3
    2142:	4603      	mov	r3, r0
	}
}
    2144:	4618      	mov	r0, r3
    2146:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <usb_d_ep_halt+0x60>)
    214a:	4798      	blx	r3
	if (ep_index < 0) {
    214c:	1e05      	subs	r5, r0, #0
    214e:	db19      	blt.n	2184 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2150:	2102      	movs	r1, #2
    2152:	4620      	mov	r0, r4
    2154:	4b0d      	ldr	r3, [pc, #52]	; (218c <usb_d_ep_halt+0x5c>)
    2156:	4798      	blx	r3
    2158:	4603      	mov	r3, r0
    215a:	2800      	cmp	r0, #0
    215c:	d0f2      	beq.n	2144 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    215e:	2100      	movs	r1, #0
    2160:	4620      	mov	r0, r4
    2162:	4b0a      	ldr	r3, [pc, #40]	; (218c <usb_d_ep_halt+0x5c>)
    2164:	4798      	blx	r3
		if (rc < 0) {
    2166:	1e03      	subs	r3, r0, #0
    2168:	dbec      	blt.n	2144 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <usb_d_ep_halt+0x64>)
    216c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2170:	2201      	movs	r2, #1
    2172:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2174:	2103      	movs	r1, #3
    2176:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2178:	69db      	ldr	r3, [r3, #28]
    217a:	2200      	movs	r2, #0
    217c:	4620      	mov	r0, r4
    217e:	4798      	blx	r3
	return ERR_NONE;
    2180:	2300      	movs	r3, #0
    2182:	e7df      	b.n	2144 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2184:	f06f 0311 	mvn.w	r3, #17
    2188:	e7dc      	b.n	2144 <usb_d_ep_halt+0x14>
    218a:	bf00      	nop
    218c:	00005409 	.word	0x00005409
    2190:	00001c45 	.word	0x00001c45
    2194:	20000568 	.word	0x20000568

00002198 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2198:	b538      	push	{r3, r4, r5, lr}
    219a:	460d      	mov	r5, r1
    219c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    219e:	4b0e      	ldr	r3, [pc, #56]	; (21d8 <usb_d_ep_register_callback+0x40>)
    21a0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    21a2:	4b0e      	ldr	r3, [pc, #56]	; (21dc <usb_d_ep_register_callback+0x44>)
    21a4:	2c00      	cmp	r4, #0
    21a6:	bf08      	it	eq
    21a8:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    21aa:	2800      	cmp	r0, #0
    21ac:	db13      	blt.n	21d6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    21ae:	2d01      	cmp	r5, #1
    21b0:	d008      	beq.n	21c4 <usb_d_ep_register_callback+0x2c>
    21b2:	b115      	cbz	r5, 21ba <usb_d_ep_register_callback+0x22>
    21b4:	2d02      	cmp	r5, #2
    21b6:	d00a      	beq.n	21ce <usb_d_ep_register_callback+0x36>
    21b8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    21ba:	4b09      	ldr	r3, [pc, #36]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21bc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21c0:	6144      	str	r4, [r0, #20]
		break;
    21c2:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    21c4:	4b06      	ldr	r3, [pc, #24]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21ca:	6184      	str	r4, [r0, #24]
		break;
    21cc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    21ce:	4b04      	ldr	r3, [pc, #16]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21d0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21d4:	61c4      	str	r4, [r0, #28]
    21d6:	bd38      	pop	{r3, r4, r5, pc}
    21d8:	00001c45 	.word	0x00001c45
    21dc:	00001c89 	.word	0x00001c89
    21e0:	20000568 	.word	0x20000568

000021e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    21e4:	b900      	cbnz	r0, 21e8 <assert+0x4>
		__asm("BKPT #0");
    21e6:	be00      	bkpt	0x0000
    21e8:	4770      	bx	lr

000021ea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21ea:	6803      	ldr	r3, [r0, #0]
    21ec:	b14b      	cbz	r3, 2202 <is_list_element+0x18>
		if (it == element) {
    21ee:	428b      	cmp	r3, r1
    21f0:	d009      	beq.n	2206 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    21f2:	681b      	ldr	r3, [r3, #0]
    21f4:	b11b      	cbz	r3, 21fe <is_list_element+0x14>
		if (it == element) {
    21f6:	4299      	cmp	r1, r3
    21f8:	d1fb      	bne.n	21f2 <is_list_element+0x8>
			return true;
    21fa:	2001      	movs	r0, #1
		}
	}

	return false;
}
    21fc:	4770      	bx	lr
	return false;
    21fe:	2000      	movs	r0, #0
    2200:	4770      	bx	lr
    2202:	2000      	movs	r0, #0
    2204:	4770      	bx	lr
			return true;
    2206:	2001      	movs	r0, #1
    2208:	4770      	bx	lr
	...

0000220c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    220c:	b538      	push	{r3, r4, r5, lr}
    220e:	4604      	mov	r4, r0
    2210:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    2212:	4b06      	ldr	r3, [pc, #24]	; (222c <list_insert_as_head+0x20>)
    2214:	4798      	blx	r3
    2216:	f080 0001 	eor.w	r0, r0, #1
    221a:	2239      	movs	r2, #57	; 0x39
    221c:	4904      	ldr	r1, [pc, #16]	; (2230 <list_insert_as_head+0x24>)
    221e:	b2c0      	uxtb	r0, r0
    2220:	4b04      	ldr	r3, [pc, #16]	; (2234 <list_insert_as_head+0x28>)
    2222:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2224:	6823      	ldr	r3, [r4, #0]
    2226:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2228:	6025      	str	r5, [r4, #0]
    222a:	bd38      	pop	{r3, r4, r5, pc}
    222c:	000021eb 	.word	0x000021eb
    2230:	00009898 	.word	0x00009898
    2234:	000021e5 	.word	0x000021e5

00002238 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2238:	6803      	ldr	r3, [r0, #0]
    223a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    223c:	6001      	str	r1, [r0, #0]
    223e:	4770      	bx	lr

00002240 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2240:	b570      	push	{r4, r5, r6, lr}
    2242:	4605      	mov	r5, r0
    2244:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    2246:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2248:	4b0a      	ldr	r3, [pc, #40]	; (2274 <list_insert_at_end+0x34>)
    224a:	4798      	blx	r3
    224c:	f080 0001 	eor.w	r0, r0, #1
    2250:	224f      	movs	r2, #79	; 0x4f
    2252:	4909      	ldr	r1, [pc, #36]	; (2278 <list_insert_at_end+0x38>)
    2254:	b2c0      	uxtb	r0, r0
    2256:	4b09      	ldr	r3, [pc, #36]	; (227c <list_insert_at_end+0x3c>)
    2258:	4798      	blx	r3

	if (!list->head) {
    225a:	682b      	ldr	r3, [r5, #0]
    225c:	b91b      	cbnz	r3, 2266 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    225e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2260:	6033      	str	r3, [r6, #0]
		return;
    2262:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    2264:	461c      	mov	r4, r3
	while (it->next) {
    2266:	6823      	ldr	r3, [r4, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d1fb      	bne.n	2264 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    226c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    226e:	6033      	str	r3, [r6, #0]
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	bf00      	nop
    2274:	000021eb 	.word	0x000021eb
    2278:	00009898 	.word	0x00009898
    227c:	000021e5 	.word	0x000021e5

00002280 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2280:	6803      	ldr	r3, [r0, #0]
    2282:	b10b      	cbz	r3, 2288 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2284:	681a      	ldr	r2, [r3, #0]
    2286:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2288:	4618      	mov	r0, r3
    228a:	4770      	bx	lr

0000228c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	460e      	mov	r6, r1
    2290:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    2292:	4604      	mov	r4, r0
    2294:	b178      	cbz	r0, 22b6 <ringbuffer_init+0x2a>
    2296:	b181      	cbz	r1, 22ba <ringbuffer_init+0x2e>
    2298:	b1a2      	cbz	r2, 22c4 <ringbuffer_init+0x38>
    229a:	2001      	movs	r0, #1
    229c:	2228      	movs	r2, #40	; 0x28
    229e:	490d      	ldr	r1, [pc, #52]	; (22d4 <ringbuffer_init+0x48>)
    22a0:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <ringbuffer_init+0x4c>)
    22a2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    22a4:	1e6b      	subs	r3, r5, #1
    22a6:	421d      	tst	r5, r3
    22a8:	d109      	bne.n	22be <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    22aa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    22ac:	2000      	movs	r0, #0
    22ae:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    22b0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    22b2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    22b4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22b6:	2000      	movs	r0, #0
    22b8:	e7f0      	b.n	229c <ringbuffer_init+0x10>
    22ba:	2000      	movs	r0, #0
    22bc:	e7ee      	b.n	229c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    22be:	f06f 000c 	mvn.w	r0, #12
    22c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22c4:	2228      	movs	r2, #40	; 0x28
    22c6:	4903      	ldr	r1, [pc, #12]	; (22d4 <ringbuffer_init+0x48>)
    22c8:	2000      	movs	r0, #0
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <ringbuffer_init+0x4c>)
    22cc:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    22ce:	1e6b      	subs	r3, r5, #1
    22d0:	e7eb      	b.n	22aa <ringbuffer_init+0x1e>
    22d2:	bf00      	nop
    22d4:	000098b8 	.word	0x000098b8
    22d8:	000021e5 	.word	0x000021e5

000022dc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    22dc:	b538      	push	{r3, r4, r5, lr}
    22de:	460d      	mov	r5, r1
	ASSERT(rb && data);
    22e0:	4604      	mov	r4, r0
    22e2:	b1a0      	cbz	r0, 230e <ringbuffer_get+0x32>
    22e4:	1c08      	adds	r0, r1, #0
    22e6:	bf18      	it	ne
    22e8:	2001      	movne	r0, #1
    22ea:	2240      	movs	r2, #64	; 0x40
    22ec:	490a      	ldr	r1, [pc, #40]	; (2318 <ringbuffer_get+0x3c>)
    22ee:	4b0b      	ldr	r3, [pc, #44]	; (231c <ringbuffer_get+0x40>)
    22f0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    22f2:	68a3      	ldr	r3, [r4, #8]
    22f4:	68e2      	ldr	r2, [r4, #12]
    22f6:	429a      	cmp	r2, r3
    22f8:	d00b      	beq.n	2312 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    22fa:	6862      	ldr	r2, [r4, #4]
    22fc:	4013      	ands	r3, r2
    22fe:	6822      	ldr	r2, [r4, #0]
    2300:	5cd3      	ldrb	r3, [r2, r3]
    2302:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2304:	68a3      	ldr	r3, [r4, #8]
    2306:	3301      	adds	r3, #1
    2308:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    230a:	2000      	movs	r0, #0
    230c:	bd38      	pop	{r3, r4, r5, pc}
    230e:	2000      	movs	r0, #0
    2310:	e7eb      	b.n	22ea <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    2312:	f06f 0009 	mvn.w	r0, #9
}
    2316:	bd38      	pop	{r3, r4, r5, pc}
    2318:	000098b8 	.word	0x000098b8
    231c:	000021e5 	.word	0x000021e5

00002320 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2320:	b538      	push	{r3, r4, r5, lr}
    2322:	460d      	mov	r5, r1
	ASSERT(rb);
    2324:	4604      	mov	r4, r0
    2326:	2251      	movs	r2, #81	; 0x51
    2328:	490b      	ldr	r1, [pc, #44]	; (2358 <ringbuffer_put+0x38>)
    232a:	3000      	adds	r0, #0
    232c:	bf18      	it	ne
    232e:	2001      	movne	r0, #1
    2330:	4b0a      	ldr	r3, [pc, #40]	; (235c <ringbuffer_put+0x3c>)
    2332:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2334:	68e3      	ldr	r3, [r4, #12]
    2336:	6862      	ldr	r2, [r4, #4]
    2338:	4013      	ands	r3, r2
    233a:	6822      	ldr	r2, [r4, #0]
    233c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    233e:	68e3      	ldr	r3, [r4, #12]
    2340:	6861      	ldr	r1, [r4, #4]
    2342:	68a2      	ldr	r2, [r4, #8]
    2344:	1a9a      	subs	r2, r3, r2
    2346:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2348:	bf84      	itt	hi
    234a:	1a59      	subhi	r1, r3, r1
    234c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    234e:	3301      	adds	r3, #1
    2350:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2352:	2000      	movs	r0, #0
    2354:	bd38      	pop	{r3, r4, r5, pc}
    2356:	bf00      	nop
    2358:	000098b8 	.word	0x000098b8
    235c:	000021e5 	.word	0x000021e5

00002360 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2360:	b510      	push	{r4, lr}
	ASSERT(rb);
    2362:	4604      	mov	r4, r0
    2364:	2267      	movs	r2, #103	; 0x67
    2366:	4905      	ldr	r1, [pc, #20]	; (237c <ringbuffer_num+0x1c>)
    2368:	3000      	adds	r0, #0
    236a:	bf18      	it	ne
    236c:	2001      	movne	r0, #1
    236e:	4b04      	ldr	r3, [pc, #16]	; (2380 <ringbuffer_num+0x20>)
    2370:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2372:	68e0      	ldr	r0, [r4, #12]
    2374:	68a3      	ldr	r3, [r4, #8]
}
    2376:	1ac0      	subs	r0, r0, r3
    2378:	bd10      	pop	{r4, pc}
    237a:	bf00      	nop
    237c:	000098b8 	.word	0x000098b8
    2380:	000021e5 	.word	0x000021e5

00002384 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2384:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2386:	4a06      	ldr	r2, [pc, #24]	; (23a0 <_sbrk+0x1c>)
    2388:	6812      	ldr	r2, [r2, #0]
    238a:	b122      	cbz	r2, 2396 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    238c:	4a04      	ldr	r2, [pc, #16]	; (23a0 <_sbrk+0x1c>)
    238e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2390:	4403      	add	r3, r0
    2392:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2394:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2396:	4903      	ldr	r1, [pc, #12]	; (23a4 <_sbrk+0x20>)
    2398:	4a01      	ldr	r2, [pc, #4]	; (23a0 <_sbrk+0x1c>)
    239a:	6011      	str	r1, [r2, #0]
    239c:	e7f6      	b.n	238c <_sbrk+0x8>
    239e:	bf00      	nop
    23a0:	20000708 	.word	0x20000708
    23a4:	20012a58 	.word	0x20012a58

000023a8 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    23a8:	6940      	ldr	r0, [r0, #20]
    23aa:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    23ae:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    23b2:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    23b4:	0040      	lsls	r0, r0, #1
    23b6:	3076      	adds	r0, #118	; 0x76
}
    23b8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    23bc:	4770      	bx	lr
	...

000023c0 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    23c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    23c2:	f013 0f01 	tst.w	r3, #1
    23c6:	d11b      	bne.n	2400 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23ca:	f013 0f03 	tst.w	r3, #3
    23ce:	d1fb      	bne.n	23c8 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    23d0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    23d2:	f013 0f02 	tst.w	r3, #2
    23d6:	d00d      	beq.n	23f4 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    23d8:	8803      	ldrh	r3, [r0, #0]
    23da:	f023 0302 	bic.w	r3, r3, #2
    23de:	041b      	lsls	r3, r3, #16
    23e0:	0c1b      	lsrs	r3, r3, #16
    23e2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23e6:	f013 0f03 	tst.w	r3, #3
    23ea:	d1fb      	bne.n	23e4 <_adc_init+0x24>
    23ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23ee:	f013 0f02 	tst.w	r3, #2
    23f2:	d1fb      	bne.n	23ec <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    23f4:	2301      	movs	r3, #1
    23f6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23fa:	f013 0f03 	tst.w	r3, #3
    23fe:	d1fb      	bne.n	23f8 <_adc_init+0x38>
    2400:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2402:	f013 0f01 	tst.w	r3, #1
    2406:	d1fb      	bne.n	2400 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2408:	2316      	movs	r3, #22
    240a:	4a37      	ldr	r2, [pc, #220]	; (24e8 <_adc_init+0x128>)
    240c:	fb03 2301 	mla	r3, r3, r1, r2
    2410:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2412:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2414:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2416:	f3c3 030b 	ubfx	r3, r3, #0, #12
    241a:	2b00      	cmp	r3, #0
    241c:	d1fa      	bne.n	2414 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    241e:	2316      	movs	r3, #22
    2420:	4a31      	ldr	r2, [pc, #196]	; (24e8 <_adc_init+0x128>)
    2422:	fb03 2301 	mla	r3, r3, r1, r2
    2426:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2428:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    242a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2430:	2b00      	cmp	r3, #0
    2432:	d1fa      	bne.n	242a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2434:	2316      	movs	r3, #22
    2436:	4a2c      	ldr	r2, [pc, #176]	; (24e8 <_adc_init+0x128>)
    2438:	fb03 2301 	mla	r3, r3, r1, r2
    243c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    243e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2440:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2442:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2444:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2446:	f3c3 030b 	ubfx	r3, r3, #0, #12
    244a:	2b00      	cmp	r3, #0
    244c:	d1fa      	bne.n	2444 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    244e:	2316      	movs	r3, #22
    2450:	4a25      	ldr	r2, [pc, #148]	; (24e8 <_adc_init+0x128>)
    2452:	fb03 2301 	mla	r3, r3, r1, r2
    2456:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2458:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    245a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2460:	2b00      	cmp	r3, #0
    2462:	d1fa      	bne.n	245a <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2464:	2316      	movs	r3, #22
    2466:	4a20      	ldr	r2, [pc, #128]	; (24e8 <_adc_init+0x128>)
    2468:	fb03 2301 	mla	r3, r3, r1, r2
    246c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    246e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2470:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2472:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2476:	2b00      	cmp	r3, #0
    2478:	d1fa      	bne.n	2470 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    247a:	2316      	movs	r3, #22
    247c:	4a1a      	ldr	r2, [pc, #104]	; (24e8 <_adc_init+0x128>)
    247e:	fb03 2301 	mla	r3, r3, r1, r2
    2482:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2484:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2486:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2488:	f013 0f80 	tst.w	r3, #128	; 0x80
    248c:	d1fb      	bne.n	2486 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    248e:	2316      	movs	r3, #22
    2490:	4a15      	ldr	r2, [pc, #84]	; (24e8 <_adc_init+0x128>)
    2492:	fb03 2301 	mla	r3, r3, r1, r2
    2496:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2498:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    249a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    249c:	f413 7f80 	tst.w	r3, #256	; 0x100
    24a0:	d1fb      	bne.n	249a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    24a2:	2316      	movs	r3, #22
    24a4:	4a10      	ldr	r2, [pc, #64]	; (24e8 <_adc_init+0x128>)
    24a6:	fb03 2301 	mla	r3, r3, r1, r2
    24aa:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    24ac:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24b0:	f413 7f00 	tst.w	r3, #512	; 0x200
    24b4:	d1fb      	bne.n	24ae <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    24b6:	2316      	movs	r3, #22
    24b8:	4a0b      	ldr	r2, [pc, #44]	; (24e8 <_adc_init+0x128>)
    24ba:	fb03 2301 	mla	r3, r3, r1, r2
    24be:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    24c0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    24c8:	d1fb      	bne.n	24c2 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    24ca:	2216      	movs	r2, #22
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <_adc_init+0x128>)
    24ce:	fb02 3101 	mla	r1, r2, r1, r3
    24d2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    24d4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    24d6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    24d8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24dc:	f013 0f03 	tst.w	r3, #3
    24e0:	d1fb      	bne.n	24da <_adc_init+0x11a>

	return ERR_NONE;
}
    24e2:	2000      	movs	r0, #0
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop
    24e8:	000098dc 	.word	0x000098dc

000024ec <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    24ec:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    24ee:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    24f0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    24f4:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    24f8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    24fa:	f013 0f01 	tst.w	r3, #1
    24fe:	d106      	bne.n	250e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    2500:	f013 0f02 	tst.w	r3, #2
    2504:	d10d      	bne.n	2522 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    2506:	f013 0f04 	tst.w	r3, #4
    250a:	d111      	bne.n	2530 <_adc_interrupt_handler+0x44>
    250c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    250e:	2301      	movs	r3, #1
    2510:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    2514:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    2518:	6883      	ldr	r3, [r0, #8]
    251a:	b292      	uxth	r2, r2
    251c:	2100      	movs	r1, #0
    251e:	4798      	blx	r3
    2520:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2522:	2302      	movs	r3, #2
    2524:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2528:	6843      	ldr	r3, [r0, #4]
    252a:	2100      	movs	r1, #0
    252c:	4798      	blx	r3
    252e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2530:	2304      	movs	r3, #4
    2532:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    2536:	6803      	ldr	r3, [r0, #0]
    2538:	2100      	movs	r1, #0
    253a:	4798      	blx	r3
	}
}
    253c:	e7e6      	b.n	250c <_adc_interrupt_handler+0x20>
	...

00002540 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2540:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2544:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2548:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    254c:	b148      	cbz	r0, 2562 <_adc_get_regs+0x22>
    254e:	2801      	cmp	r0, #1
    2550:	d009      	beq.n	2566 <_adc_get_regs+0x26>
{
    2552:	b508      	push	{r3, lr}
	ASSERT(false);
    2554:	228c      	movs	r2, #140	; 0x8c
    2556:	4905      	ldr	r1, [pc, #20]	; (256c <_adc_get_regs+0x2c>)
    2558:	2000      	movs	r0, #0
    255a:	4b05      	ldr	r3, [pc, #20]	; (2570 <_adc_get_regs+0x30>)
    255c:	4798      	blx	r3
	return 0;
    255e:	2000      	movs	r0, #0
    2560:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2562:	2000      	movs	r0, #0
    2564:	4770      	bx	lr
    2566:	2001      	movs	r0, #1
    2568:	4770      	bx	lr
    256a:	bf00      	nop
    256c:	00009908 	.word	0x00009908
    2570:	000021e5 	.word	0x000021e5

00002574 <_adc_async_init>:
{
    2574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2578:	460c      	mov	r4, r1
	ASSERT(device);
    257a:	4605      	mov	r5, r0
    257c:	22e6      	movs	r2, #230	; 0xe6
    257e:	493b      	ldr	r1, [pc, #236]	; (266c <_adc_async_init+0xf8>)
    2580:	3000      	adds	r0, #0
    2582:	bf18      	it	ne
    2584:	2001      	movne	r0, #1
    2586:	4b3a      	ldr	r3, [pc, #232]	; (2670 <_adc_async_init+0xfc>)
    2588:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    258a:	4620      	mov	r0, r4
    258c:	4b39      	ldr	r3, [pc, #228]	; (2674 <_adc_async_init+0x100>)
    258e:	4798      	blx	r3
    2590:	4601      	mov	r1, r0
    2592:	4620      	mov	r0, r4
    2594:	4b38      	ldr	r3, [pc, #224]	; (2678 <_adc_async_init+0x104>)
    2596:	4798      	blx	r3
	if (init_status) {
    2598:	4606      	mov	r6, r0
    259a:	b110      	cbz	r0, 25a2 <_adc_async_init+0x2e>
}
    259c:	4630      	mov	r0, r6
    259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    25a2:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    25a4:	4b35      	ldr	r3, [pc, #212]	; (267c <_adc_async_init+0x108>)
    25a6:	429c      	cmp	r4, r3
    25a8:	d05c      	beq.n	2664 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    25aa:	4b35      	ldr	r3, [pc, #212]	; (2680 <_adc_async_init+0x10c>)
    25ac:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    25ae:	bf04      	itt	eq
    25b0:	4b34      	ldreq	r3, [pc, #208]	; (2684 <_adc_async_init+0x110>)
    25b2:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    25b4:	4628      	mov	r0, r5
    25b6:	4f34      	ldr	r7, [pc, #208]	; (2688 <_adc_async_init+0x114>)
    25b8:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25ba:	0943      	lsrs	r3, r0, #5
    25bc:	f000 001f 	and.w	r0, r0, #31
    25c0:	2401      	movs	r4, #1
    25c2:	fa04 f000 	lsl.w	r0, r4, r0
    25c6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 268c <_adc_async_init+0x118>
    25ca:	3320      	adds	r3, #32
    25cc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25d4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    25d8:	4628      	mov	r0, r5
    25da:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25dc:	0943      	lsrs	r3, r0, #5
    25de:	f000 001f 	and.w	r0, r0, #31
    25e2:	fa04 f000 	lsl.w	r0, r4, r0
    25e6:	3360      	adds	r3, #96	; 0x60
    25e8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    25ec:	4628      	mov	r0, r5
    25ee:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f0:	0943      	lsrs	r3, r0, #5
    25f2:	f000 001f 	and.w	r0, r0, #31
    25f6:	4084      	lsls	r4, r0
    25f8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    25fc:	4628      	mov	r0, r5
    25fe:	47b8      	blx	r7
    2600:	3001      	adds	r0, #1
    2602:	b280      	uxth	r0, r0
    2604:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2606:	2b00      	cmp	r3, #0
    2608:	dbc8      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    260a:	095b      	lsrs	r3, r3, #5
    260c:	f000 001f 	and.w	r0, r0, #31
    2610:	2201      	movs	r2, #1
    2612:	fa02 f000 	lsl.w	r0, r2, r0
    2616:	3320      	adds	r3, #32
    2618:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    261c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2620:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    2624:	4628      	mov	r0, r5
    2626:	47b8      	blx	r7
    2628:	3001      	adds	r0, #1
    262a:	b280      	uxth	r0, r0
    262c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    262e:	2b00      	cmp	r3, #0
    2630:	dbb4      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2632:	095b      	lsrs	r3, r3, #5
    2634:	f000 001f 	and.w	r0, r0, #31
    2638:	2201      	movs	r2, #1
    263a:	fa02 f000 	lsl.w	r0, r2, r0
    263e:	3360      	adds	r3, #96	; 0x60
    2640:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    2644:	4628      	mov	r0, r5
    2646:	47b8      	blx	r7
    2648:	3001      	adds	r0, #1
    264a:	b280      	uxth	r0, r0
    264c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    264e:	2b00      	cmp	r3, #0
    2650:	dba4      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2652:	095b      	lsrs	r3, r3, #5
    2654:	f000 001f 	and.w	r0, r0, #31
    2658:	2201      	movs	r2, #1
    265a:	fa02 f000 	lsl.w	r0, r2, r0
    265e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2662:	e79b      	b.n	259c <_adc_async_init+0x28>
		_adc0_dev = dev;
    2664:	4b07      	ldr	r3, [pc, #28]	; (2684 <_adc_async_init+0x110>)
    2666:	601d      	str	r5, [r3, #0]
    2668:	e7a4      	b.n	25b4 <_adc_async_init+0x40>
    266a:	bf00      	nop
    266c:	00009908 	.word	0x00009908
    2670:	000021e5 	.word	0x000021e5
    2674:	00002541 	.word	0x00002541
    2678:	000023c1 	.word	0x000023c1
    267c:	43001c00 	.word	0x43001c00
    2680:	43002000 	.word	0x43002000
    2684:	2000070c 	.word	0x2000070c
    2688:	000023a9 	.word	0x000023a9
    268c:	e000e100 	.word	0xe000e100

00002690 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2690:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2692:	8813      	ldrh	r3, [r2, #0]
    2694:	b29b      	uxth	r3, r3
    2696:	f043 0302 	orr.w	r3, r3, #2
    269a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    269c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    269e:	f013 0f03 	tst.w	r3, #3
    26a2:	d1fb      	bne.n	269c <_adc_async_enable_channel+0xc>
}
    26a4:	4770      	bx	lr

000026a6 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    26a6:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    26a8:	88db      	ldrh	r3, [r3, #6]
    26aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    26ae:	2b03      	cmp	r3, #3
}
    26b0:	bf0c      	ite	eq
    26b2:	2001      	moveq	r0, #1
    26b4:	2002      	movne	r0, #2
    26b6:	4770      	bx	lr

000026b8 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    26b8:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    26ba:	7d13      	ldrb	r3, [r2, #20]
    26bc:	f043 0302 	orr.w	r3, r3, #2
    26c0:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    26c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26c8:	2b00      	cmp	r3, #0
    26ca:	d1fa      	bne.n	26c2 <_adc_async_convert+0xa>
}
    26cc:	4770      	bx	lr

000026ce <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    26ce:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    26d0:	2a01      	cmp	r2, #1
    26d2:	d007      	beq.n	26e4 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    26d4:	2a02      	cmp	r2, #2
    26d6:	d00e      	beq.n	26f6 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    26d8:	b91a      	cbnz	r2, 26e2 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    26da:	b1ab      	cbz	r3, 2708 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    26dc:	2301      	movs	r3, #1
    26de:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26e2:	4770      	bx	lr
	if (value == 0x0) {
    26e4:	b91b      	cbnz	r3, 26ee <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    26e6:	2304      	movs	r3, #4
    26e8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26ec:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    26ee:	2304      	movs	r3, #4
    26f0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26f4:	4770      	bx	lr
	if (value == 0x0) {
    26f6:	b91b      	cbnz	r3, 2700 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    26f8:	2302      	movs	r3, #2
    26fa:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26fe:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    2700:	2302      	movs	r3, #2
    2702:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    2706:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    2708:	2301      	movs	r3, #1
    270a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    270e:	4770      	bx	lr

00002710 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    2710:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <ADC0_0_Handler+0xc>)
    2714:	6818      	ldr	r0, [r3, #0]
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <ADC0_0_Handler+0x10>)
    2718:	4798      	blx	r3
    271a:	bd08      	pop	{r3, pc}
    271c:	2000070c 	.word	0x2000070c
    2720:	000024ed 	.word	0x000024ed

00002724 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    2724:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <ADC0_1_Handler+0xc>)
    2728:	6818      	ldr	r0, [r3, #0]
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <ADC0_1_Handler+0x10>)
    272c:	4798      	blx	r3
    272e:	bd08      	pop	{r3, pc}
    2730:	2000070c 	.word	0x2000070c
    2734:	000024ed 	.word	0x000024ed

00002738 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2738:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    273a:	4b02      	ldr	r3, [pc, #8]	; (2744 <ADC1_0_Handler+0xc>)
    273c:	6858      	ldr	r0, [r3, #4]
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <ADC1_0_Handler+0x10>)
    2740:	4798      	blx	r3
    2742:	bd08      	pop	{r3, pc}
    2744:	2000070c 	.word	0x2000070c
    2748:	000024ed 	.word	0x000024ed

0000274c <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    274c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    274e:	4b02      	ldr	r3, [pc, #8]	; (2758 <ADC1_1_Handler+0xc>)
    2750:	6858      	ldr	r0, [r3, #4]
    2752:	4b02      	ldr	r3, [pc, #8]	; (275c <ADC1_1_Handler+0x10>)
    2754:	4798      	blx	r3
    2756:	bd08      	pop	{r3, pc}
    2758:	2000070c 	.word	0x2000070c
    275c:	000024ed 	.word	0x000024ed

00002760 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2760:	0943      	lsrs	r3, r0, #5
    2762:	f000 001f 	and.w	r0, r0, #31
    2766:	2201      	movs	r2, #1
    2768:	fa02 f000 	lsl.w	r0, r2, r0
    276c:	3340      	adds	r3, #64	; 0x40
    276e:	4a02      	ldr	r2, [pc, #8]	; (2778 <_irq_set+0x18>)
    2770:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2774:	4770      	bx	lr
    2776:	bf00      	nop
    2778:	e000e100 	.word	0xe000e100

0000277c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    277c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2780:	00c0      	lsls	r0, r0, #3
    2782:	4770      	bx	lr

00002784 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2784:	4b01      	ldr	r3, [pc, #4]	; (278c <_get_cycles_for_ms+0x8>)
    2786:	fb03 f000 	mul.w	r0, r3, r0
    278a:	4770      	bx	lr
    278c:	0001d4c0 	.word	0x0001d4c0

00002790 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2790:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2792:	4a0e      	ldr	r2, [pc, #56]	; (27cc <_init_chip+0x3c>)
    2794:	8813      	ldrh	r3, [r2, #0]
    2796:	b29b      	uxth	r3, r3
    2798:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    279c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    279e:	4b0c      	ldr	r3, [pc, #48]	; (27d0 <_init_chip+0x40>)
    27a0:	4798      	blx	r3
	_oscctrl_init_sources();
    27a2:	4b0c      	ldr	r3, [pc, #48]	; (27d4 <_init_chip+0x44>)
    27a4:	4798      	blx	r3
	_mclk_init();
    27a6:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <_init_chip+0x48>)
    27a8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    27aa:	2008      	movs	r0, #8
    27ac:	4c0b      	ldr	r4, [pc, #44]	; (27dc <_init_chip+0x4c>)
    27ae:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    27b0:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <_init_chip+0x50>)
    27b2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    27b4:	f640 70f7 	movw	r0, #4087	; 0xff7
    27b8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    27ba:	4a0a      	ldr	r2, [pc, #40]	; (27e4 <_init_chip+0x54>)
    27bc:	6913      	ldr	r3, [r2, #16]
    27be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    27c2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    27c4:	4b08      	ldr	r3, [pc, #32]	; (27e8 <_init_chip+0x58>)
    27c6:	4798      	blx	r3
    27c8:	bd10      	pop	{r4, pc}
    27ca:	bf00      	nop
    27cc:	41004000 	.word	0x41004000
    27d0:	00002c6d 	.word	0x00002c6d
    27d4:	00002c8d 	.word	0x00002c8d
    27d8:	00002b95 	.word	0x00002b95
    27dc:	00002b1d 	.word	0x00002b1d
    27e0:	00002c91 	.word	0x00002c91
    27e4:	40000800 	.word	0x40000800
    27e8:	00002861 	.word	0x00002861

000027ec <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    27ec:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    27ee:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_dmac_handler+0x6c>)
    27f0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    27f2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    27f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    27fa:	4818      	ldr	r0, [pc, #96]	; (285c <_dmac_handler+0x70>)
    27fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2800:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2804:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2808:	f012 0f01 	tst.w	r2, #1
    280c:	d10a      	bne.n	2824 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    280e:	011a      	lsls	r2, r3, #4
    2810:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2814:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2818:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    281c:	f012 0f02 	tst.w	r2, #2
    2820:	d10b      	bne.n	283a <_dmac_handler+0x4e>
    2822:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2824:	011a      	lsls	r2, r3, #4
    2826:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    282a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    282e:	2101      	movs	r1, #1
    2830:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2834:	6843      	ldr	r3, [r0, #4]
    2836:	4798      	blx	r3
    2838:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    283a:	011a      	lsls	r2, r3, #4
    283c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2840:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2844:	2102      	movs	r1, #2
    2846:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    284a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    284e:	4a03      	ldr	r2, [pc, #12]	; (285c <_dmac_handler+0x70>)
    2850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2854:	4798      	blx	r3
	}
}
    2856:	e7e4      	b.n	2822 <_dmac_handler+0x36>
    2858:	4100a000 	.word	0x4100a000
    285c:	20000714 	.word	0x20000714

00002860 <_dma_init>:
{
    2860:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2862:	4a32      	ldr	r2, [pc, #200]	; (292c <_dma_init+0xcc>)
    2864:	8813      	ldrh	r3, [r2, #0]
    2866:	f023 0302 	bic.w	r3, r3, #2
    286a:	041b      	lsls	r3, r3, #16
    286c:	0c1b      	lsrs	r3, r3, #16
    286e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2870:	8853      	ldrh	r3, [r2, #2]
    2872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2876:	041b      	lsls	r3, r3, #16
    2878:	0c1b      	lsrs	r3, r3, #16
    287a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    287c:	8813      	ldrh	r3, [r2, #0]
    287e:	b29b      	uxth	r3, r3
    2880:	f043 0301 	orr.w	r3, r3, #1
    2884:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2886:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2888:	f013 0f01 	tst.w	r3, #1
    288c:	d1fb      	bne.n	2886 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    288e:	4b27      	ldr	r3, [pc, #156]	; (292c <_dma_init+0xcc>)
    2890:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2894:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2896:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    289c:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    28a0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    28a2:	2100      	movs	r1, #0
    28a4:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    28a6:	4a22      	ldr	r2, [pc, #136]	; (2930 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    28a8:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    28aa:	4a22      	ldr	r2, [pc, #136]	; (2934 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    28ac:	639a      	str	r2, [r3, #56]	; 0x38
    28ae:	4b22      	ldr	r3, [pc, #136]	; (2938 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    28b0:	4c1f      	ldr	r4, [pc, #124]	; (2930 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    28b2:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    28b4:	681d      	ldr	r5, [r3, #0]
    28b6:	0108      	lsls	r0, r1, #4
    28b8:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    28bc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    28c0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    28c2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    28c4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    28c8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    28ca:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    28ce:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    28d0:	1822      	adds	r2, r4, r0
    28d2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    28d4:	60d6      	str	r6, [r2, #12]
    28d6:	3101      	adds	r1, #1
    28d8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    28da:	2920      	cmp	r1, #32
    28dc:	d1ea      	bne.n	28b4 <_dma_init+0x54>
    28de:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e0:	2001      	movs	r0, #1
    28e2:	4916      	ldr	r1, [pc, #88]	; (293c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    28e4:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    28e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    28ea:	d00b      	beq.n	2904 <_dma_init+0xa4>
    28ec:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    28ee:	2b24      	cmp	r3, #36	; 0x24
    28f0:	d1f8      	bne.n	28e4 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    28f2:	4a0e      	ldr	r2, [pc, #56]	; (292c <_dma_init+0xcc>)
    28f4:	8813      	ldrh	r3, [r2, #0]
    28f6:	b29b      	uxth	r3, r3
    28f8:	f043 0302 	orr.w	r3, r3, #2
    28fc:	8013      	strh	r3, [r2, #0]
}
    28fe:	2000      	movs	r0, #0
    2900:	bc70      	pop	{r4, r5, r6}
    2902:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2904:	095c      	lsrs	r4, r3, #5
    2906:	f002 021f 	and.w	r2, r2, #31
    290a:	fa00 f202 	lsl.w	r2, r0, r2
    290e:	f104 0520 	add.w	r5, r4, #32
    2912:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    291a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    291e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2922:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2926:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    292a:	e7df      	b.n	28ec <_dma_init+0x8c>
    292c:	4100a000 	.word	0x4100a000
    2930:	20001580 	.word	0x20001580
    2934:	20001780 	.word	0x20001780
    2938:	00009920 	.word	0x00009920
    293c:	e000e100 	.word	0xe000e100

00002940 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2940:	b991      	cbnz	r1, 2968 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2942:	b942      	cbnz	r2, 2956 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2944:	0100      	lsls	r0, r0, #4
    2946:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    294a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    294e:	2302      	movs	r3, #2
    2950:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2954:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2956:	0100      	lsls	r0, r0, #4
    2958:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    295c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2960:	2302      	movs	r3, #2
    2962:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2966:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2968:	2901      	cmp	r1, #1
    296a:	d000      	beq.n	296e <_dma_set_irq_state+0x2e>
    296c:	4770      	bx	lr
	if (value == 0x0) {
    296e:	b142      	cbz	r2, 2982 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2970:	0100      	lsls	r0, r0, #4
    2972:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2976:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    297a:	2301      	movs	r3, #1
    297c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2980:	e7f4      	b.n	296c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2982:	0100      	lsls	r0, r0, #4
    2984:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2988:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    298c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2990:	4770      	bx	lr
	...

00002994 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2994:	4b02      	ldr	r3, [pc, #8]	; (29a0 <_dma_set_destination_address+0xc>)
    2996:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    299a:	6081      	str	r1, [r0, #8]
}
    299c:	2000      	movs	r0, #0
    299e:	4770      	bx	lr
    29a0:	20001580 	.word	0x20001580

000029a4 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    29a4:	4b02      	ldr	r3, [pc, #8]	; (29b0 <_dma_set_source_address+0xc>)
    29a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    29aa:	6041      	str	r1, [r0, #4]
}
    29ac:	2000      	movs	r0, #0
    29ae:	4770      	bx	lr
    29b0:	20001580 	.word	0x20001580

000029b4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29b4:	4a05      	ldr	r2, [pc, #20]	; (29cc <_dma_srcinc_enable+0x18>)
    29b6:	0100      	lsls	r0, r0, #4
    29b8:	5a13      	ldrh	r3, [r2, r0]
    29ba:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    29bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    29c0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    29c4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    29c6:	5211      	strh	r1, [r2, r0]
}
    29c8:	2000      	movs	r0, #0
    29ca:	4770      	bx	lr
    29cc:	20001580 	.word	0x20001580

000029d0 <_dma_set_data_amount>:
{
    29d0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    29d2:	4c14      	ldr	r4, [pc, #80]	; (2a24 <_dma_set_data_amount+0x54>)
    29d4:	0102      	lsls	r2, r0, #4
    29d6:	18a3      	adds	r3, r4, r2
    29d8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29da:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    29dc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29e0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    29e2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    29e6:	d006      	beq.n	29f6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    29e8:	fa01 f403 	lsl.w	r4, r1, r3
    29ec:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    29ee:	4a0d      	ldr	r2, [pc, #52]	; (2a24 <_dma_set_data_amount+0x54>)
    29f0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    29f4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    29f6:	4c0b      	ldr	r4, [pc, #44]	; (2a24 <_dma_set_data_amount+0x54>)
    29f8:	0102      	lsls	r2, r0, #4
    29fa:	18a5      	adds	r5, r4, r2
    29fc:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29fe:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2a00:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2a04:	d005      	beq.n	2a12 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2a06:	fa01 f303 	lsl.w	r3, r1, r3
    2a0a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2a0c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2a10:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2a12:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2a14:	4b03      	ldr	r3, [pc, #12]	; (2a24 <_dma_set_data_amount+0x54>)
    2a16:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2a1a:	8041      	strh	r1, [r0, #2]
}
    2a1c:	2000      	movs	r0, #0
    2a1e:	bc30      	pop	{r4, r5}
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop
    2a24:	20001580 	.word	0x20001580

00002a28 <_dma_enable_transaction>:
{
    2a28:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2a2a:	4c0d      	ldr	r4, [pc, #52]	; (2a60 <_dma_enable_transaction+0x38>)
    2a2c:	0103      	lsls	r3, r0, #4
    2a2e:	5ae2      	ldrh	r2, [r4, r3]
    2a30:	b292      	uxth	r2, r2
    2a32:	f042 0201 	orr.w	r2, r2, #1
    2a36:	52e2      	strh	r2, [r4, r3]
    2a38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a3c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2a42:	f042 0202 	orr.w	r2, r2, #2
    2a46:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2a48:	b131      	cbz	r1, 2a58 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2a4a:	4a06      	ldr	r2, [pc, #24]	; (2a64 <_dma_enable_transaction+0x3c>)
    2a4c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2a4e:	2301      	movs	r3, #1
    2a50:	fa03 f000 	lsl.w	r0, r3, r0
    2a54:	4308      	orrs	r0, r1
    2a56:	6110      	str	r0, [r2, #16]
}
    2a58:	2000      	movs	r0, #0
    2a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a5e:	4770      	bx	lr
    2a60:	20001580 	.word	0x20001580
    2a64:	4100a000 	.word	0x4100a000

00002a68 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2a68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a6c:	4b02      	ldr	r3, [pc, #8]	; (2a78 <_dma_get_channel_resource+0x10>)
    2a6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2a72:	6001      	str	r1, [r0, #0]
}
    2a74:	2000      	movs	r0, #0
    2a76:	4770      	bx	lr
    2a78:	20000714 	.word	0x20000714

00002a7c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2a7c:	b508      	push	{r3, lr}
	_dmac_handler();
    2a7e:	4b01      	ldr	r3, [pc, #4]	; (2a84 <DMAC_0_Handler+0x8>)
    2a80:	4798      	blx	r3
    2a82:	bd08      	pop	{r3, pc}
    2a84:	000027ed 	.word	0x000027ed

00002a88 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2a88:	b508      	push	{r3, lr}
	_dmac_handler();
    2a8a:	4b01      	ldr	r3, [pc, #4]	; (2a90 <DMAC_1_Handler+0x8>)
    2a8c:	4798      	blx	r3
    2a8e:	bd08      	pop	{r3, pc}
    2a90:	000027ed 	.word	0x000027ed

00002a94 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2a94:	b508      	push	{r3, lr}
	_dmac_handler();
    2a96:	4b01      	ldr	r3, [pc, #4]	; (2a9c <DMAC_2_Handler+0x8>)
    2a98:	4798      	blx	r3
    2a9a:	bd08      	pop	{r3, pc}
    2a9c:	000027ed 	.word	0x000027ed

00002aa0 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2aa0:	b508      	push	{r3, lr}
	_dmac_handler();
    2aa2:	4b01      	ldr	r3, [pc, #4]	; (2aa8 <DMAC_3_Handler+0x8>)
    2aa4:	4798      	blx	r3
    2aa6:	bd08      	pop	{r3, pc}
    2aa8:	000027ed 	.word	0x000027ed

00002aac <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2aac:	b508      	push	{r3, lr}
	_dmac_handler();
    2aae:	4b01      	ldr	r3, [pc, #4]	; (2ab4 <DMAC_4_Handler+0x8>)
    2ab0:	4798      	blx	r3
    2ab2:	bd08      	pop	{r3, pc}
    2ab4:	000027ed 	.word	0x000027ed

00002ab8 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2ab8:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2aba:	2000      	movs	r0, #0
    2abc:	4770      	bx	lr
	...

00002ac0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2ac0:	b430      	push	{r4, r5}
    2ac2:	4814      	ldr	r0, [pc, #80]	; (2b14 <_event_system_init+0x54>)
    2ac4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2ac8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2aca:	4c13      	ldr	r4, [pc, #76]	; (2b18 <_event_system_init+0x58>)
    2acc:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2ace:	f813 1b01 	ldrb.w	r1, [r3], #1
    2ad2:	3248      	adds	r2, #72	; 0x48
    2ad4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2ad8:	42ab      	cmp	r3, r5
    2ada:	d1f7      	bne.n	2acc <_event_system_init+0xc>
    2adc:	480d      	ldr	r0, [pc, #52]	; (2b14 <_event_system_init+0x54>)
    2ade:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2ae2:	3080      	adds	r0, #128	; 0x80
    2ae4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2ae6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2aea:	00ca      	lsls	r2, r1, #3
    2aec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2af0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2af4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2af6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2afa:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2afc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2b00:	43db      	mvns	r3, r3
    2b02:	b2db      	uxtb	r3, r3
    2b04:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2b08:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2b0a:	2920      	cmp	r1, #32
    2b0c:	d1eb      	bne.n	2ae6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2b0e:	2000      	movs	r0, #0
    2b10:	bc30      	pop	{r4, r5}
    2b12:	4770      	bx	lr
    2b14:	00009a20 	.word	0x00009a20
    2b18:	4100e000 	.word	0x4100e000

00002b1c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2b1c:	f010 0f01 	tst.w	r0, #1
    2b20:	d008      	beq.n	2b34 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b22:	4a17      	ldr	r2, [pc, #92]	; (2b80 <_gclk_init_generators_by_fref+0x64>)
    2b24:	4b17      	ldr	r3, [pc, #92]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b26:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b28:	4619      	mov	r1, r3
    2b2a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b2e:	684b      	ldr	r3, [r1, #4]
    2b30:	4213      	tst	r3, r2
    2b32:	d1fc      	bne.n	2b2e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2b34:	f010 0f02 	tst.w	r0, #2
    2b38:	d008      	beq.n	2b4c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b3a:	4a13      	ldr	r2, [pc, #76]	; (2b88 <_gclk_init_generators_by_fref+0x6c>)
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b3e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b40:	4619      	mov	r1, r3
    2b42:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b46:	684b      	ldr	r3, [r1, #4]
    2b48:	4213      	tst	r3, r2
    2b4a:	d1fc      	bne.n	2b46 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2b4c:	f010 0f04 	tst.w	r0, #4
    2b50:	d008      	beq.n	2b64 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b52:	4a0e      	ldr	r2, [pc, #56]	; (2b8c <_gclk_init_generators_by_fref+0x70>)
    2b54:	4b0b      	ldr	r3, [pc, #44]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b56:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b58:	4619      	mov	r1, r3
    2b5a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b5e:	684b      	ldr	r3, [r1, #4]
    2b60:	4213      	tst	r3, r2
    2b62:	d1fc      	bne.n	2b5e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2b64:	f010 0f08 	tst.w	r0, #8
    2b68:	d008      	beq.n	2b7c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b6a:	4a09      	ldr	r2, [pc, #36]	; (2b90 <_gclk_init_generators_by_fref+0x74>)
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b70:	4619      	mov	r1, r3
    2b72:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b76:	684b      	ldr	r3, [r1, #4]
    2b78:	4213      	tst	r3, r2
    2b7a:	d1fc      	bne.n	2b76 <_gclk_init_generators_by_fref+0x5a>
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	00010107 	.word	0x00010107
    2b84:	40001c00 	.word	0x40001c00
    2b88:	00010106 	.word	0x00010106
    2b8c:	00100106 	.word	0x00100106
    2b90:	00010105 	.word	0x00010105

00002b94 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2b94:	2201      	movs	r2, #1
    2b96:	4b01      	ldr	r3, [pc, #4]	; (2b9c <_mclk_init+0x8>)
    2b98:	715a      	strb	r2, [r3, #5]
    2b9a:	4770      	bx	lr
    2b9c:	40000800 	.word	0x40000800

00002ba0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2ba0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2ba2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2ba4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2ba6:	f012 0f01 	tst.w	r2, #1
    2baa:	d005      	beq.n	2bb8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2bac:	2201      	movs	r2, #1
    2bae:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2bb0:	6803      	ldr	r3, [r0, #0]
    2bb2:	b153      	cbz	r3, 2bca <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2bb4:	4798      	blx	r3
    2bb6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2bb8:	8a1a      	ldrh	r2, [r3, #16]
    2bba:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2bbc:	b12a      	cbz	r2, 2bca <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2bbe:	f240 225e 	movw	r2, #606	; 0x25e
    2bc2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2bc4:	6843      	ldr	r3, [r0, #4]
    2bc6:	b103      	cbz	r3, 2bca <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2bc8:	4798      	blx	r3
    2bca:	bd08      	pop	{r3, pc}

00002bcc <_flash_init>:
{
    2bcc:	b538      	push	{r3, r4, r5, lr}
    2bce:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2bd0:	4605      	mov	r5, r0
    2bd2:	b350      	cbz	r0, 2c2a <_flash_init+0x5e>
    2bd4:	4816      	ldr	r0, [pc, #88]	; (2c30 <_flash_init+0x64>)
    2bd6:	4281      	cmp	r1, r0
    2bd8:	bf14      	ite	ne
    2bda:	2000      	movne	r0, #0
    2bdc:	2001      	moveq	r0, #1
    2bde:	224b      	movs	r2, #75	; 0x4b
    2be0:	4914      	ldr	r1, [pc, #80]	; (2c34 <_flash_init+0x68>)
    2be2:	4b15      	ldr	r3, [pc, #84]	; (2c38 <_flash_init+0x6c>)
    2be4:	4798      	blx	r3
	device->hw = hw;
    2be6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2be8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2bea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2bee:	049b      	lsls	r3, r3, #18
    2bf0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2bf2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2bf4:	4b11      	ldr	r3, [pc, #68]	; (2c3c <_flash_init+0x70>)
    2bf6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bf8:	4b11      	ldr	r3, [pc, #68]	; (2c40 <_flash_init+0x74>)
    2bfa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2bfe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c06:	f3bf 8f6f 	isb	sy
    2c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c16:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c1a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2c1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c22:	6019      	str	r1, [r3, #0]
    2c24:	601a      	str	r2, [r3, #0]
}
    2c26:	2000      	movs	r0, #0
    2c28:	bd38      	pop	{r3, r4, r5, pc}
    2c2a:	2000      	movs	r0, #0
    2c2c:	e7d7      	b.n	2bde <_flash_init+0x12>
    2c2e:	bf00      	nop
    2c30:	41004000 	.word	0x41004000
    2c34:	00009b24 	.word	0x00009b24
    2c38:	000021e5 	.word	0x000021e5
    2c3c:	20000894 	.word	0x20000894
    2c40:	e000e100 	.word	0xe000e100

00002c44 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2c44:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <NVMCTRL_0_Handler+0xc>)
    2c48:	6818      	ldr	r0, [r3, #0]
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <NVMCTRL_0_Handler+0x10>)
    2c4c:	4798      	blx	r3
    2c4e:	bd08      	pop	{r3, pc}
    2c50:	20000894 	.word	0x20000894
    2c54:	00002ba1 	.word	0x00002ba1

00002c58 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2c58:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <NVMCTRL_1_Handler+0xc>)
    2c5c:	6818      	ldr	r0, [r3, #0]
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <NVMCTRL_1_Handler+0x10>)
    2c60:	4798      	blx	r3
    2c62:	bd08      	pop	{r3, pc}
    2c64:	20000894 	.word	0x20000894
    2c68:	00002ba1 	.word	0x00002ba1

00002c6c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2c6c:	4b06      	ldr	r3, [pc, #24]	; (2c88 <_osc32kctrl_init_sources+0x1c>)
    2c6e:	f242 328e 	movw	r2, #9102	; 0x238e
    2c72:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2c74:	2200      	movs	r2, #0
    2c76:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2c78:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2c7a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2c7c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2c80:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2c82:	2205      	movs	r2, #5
    2c84:	741a      	strb	r2, [r3, #16]
    2c86:	4770      	bx	lr
    2c88:	40001400 	.word	0x40001400

00002c8c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2c8c:	4770      	bx	lr
	...

00002c90 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2c90:	4a44      	ldr	r2, [pc, #272]	; (2da4 <_oscctrl_init_referenced_generators+0x114>)
    2c92:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2c94:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2c98:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2c9c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2c9e:	4611      	mov	r1, r2
    2ca0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2ca4:	684b      	ldr	r3, [r1, #4]
    2ca6:	4213      	tst	r3, r2
    2ca8:	d1fc      	bne.n	2ca4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2caa:	4a3e      	ldr	r2, [pc, #248]	; (2da4 <_oscctrl_init_referenced_generators+0x114>)
    2cac:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2cae:	f013 0f04 	tst.w	r3, #4
    2cb2:	d1fb      	bne.n	2cac <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2cb4:	4b3c      	ldr	r3, [pc, #240]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2cb6:	2200      	movs	r2, #0
    2cb8:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2cba:	4a3c      	ldr	r2, [pc, #240]	; (2dac <_oscctrl_init_referenced_generators+0x11c>)
    2cbc:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cbe:	461a      	mov	r2, r3
    2cc0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2cc4:	f013 0f10 	tst.w	r3, #16
    2cc8:	d1fa      	bne.n	2cc0 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2cca:	2200      	movs	r2, #0
    2ccc:	4b36      	ldr	r3, [pc, #216]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2cce:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cd2:	461a      	mov	r2, r3
    2cd4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2cd8:	f013 0f04 	tst.w	r3, #4
    2cdc:	d1fa      	bne.n	2cd4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2cde:	2202      	movs	r2, #2
    2ce0:	4b31      	ldr	r3, [pc, #196]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2ce2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2ce4:	461a      	mov	r2, r3
    2ce6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2cea:	f013 0f02 	tst.w	r3, #2
    2cee:	d1fa      	bne.n	2ce6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2cf0:	4b2d      	ldr	r3, [pc, #180]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2cf4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cf6:	461a      	mov	r2, r3
    2cf8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2cfc:	f013 0f08 	tst.w	r3, #8
    2d00:	d1fa      	bne.n	2cf8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2d02:	2280      	movs	r2, #128	; 0x80
    2d04:	4b28      	ldr	r3, [pc, #160]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d06:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d0a:	461a      	mov	r2, r3
    2d0c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d10:	f013 0f04 	tst.w	r3, #4
    2d14:	d1fa      	bne.n	2d0c <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2d16:	4a26      	ldr	r2, [pc, #152]	; (2db0 <_oscctrl_init_referenced_generators+0x120>)
    2d18:	4b23      	ldr	r3, [pc, #140]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d1a:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d1c:	461a      	mov	r2, r3
    2d1e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2d20:	f013 0f06 	tst.w	r3, #6
    2d24:	d1fb      	bne.n	2d1e <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2d26:	4b20      	ldr	r3, [pc, #128]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d28:	f44f 6202 	mov.w	r2, #2080	; 0x820
    2d2c:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2d2e:	2202      	movs	r2, #2
    2d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d34:	461a      	mov	r2, r3
    2d36:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2d38:	f013 0f02 	tst.w	r3, #2
    2d3c:	d1fb      	bne.n	2d36 <_oscctrl_init_referenced_generators+0xa6>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d3e:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d40:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2d44:	f013 0f01 	tst.w	r3, #1
    2d48:	d026      	beq.n	2d98 <_oscctrl_init_referenced_generators+0x108>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d4a:	4a17      	ldr	r2, [pc, #92]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d4c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2d4e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2d52:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2d56:	d1f9      	bne.n	2d4c <_oscctrl_init_referenced_generators+0xbc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2d58:	4b13      	ldr	r3, [pc, #76]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    2d5c:	f012 0f01 	tst.w	r2, #1
    2d60:	d103      	bne.n	2d6a <_oscctrl_init_referenced_generators+0xda>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2d64:	f012 0f02 	tst.w	r2, #2
    2d68:	d0f7      	beq.n	2d5a <_oscctrl_init_referenced_generators+0xca>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2d6a:	4a0e      	ldr	r2, [pc, #56]	; (2da4 <_oscctrl_init_referenced_generators+0x114>)
    2d6c:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d1fc      	bne.n	2d6c <_oscctrl_init_referenced_generators+0xdc>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d72:	4a0c      	ldr	r2, [pc, #48]	; (2da4 <_oscctrl_init_referenced_generators+0x114>)
    2d74:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d76:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d7a:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d7e:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2d80:	4611      	mov	r1, r2
    2d82:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2d86:	684b      	ldr	r3, [r1, #4]
    2d88:	4213      	tst	r3, r2
    2d8a:	d1fc      	bne.n	2d86 <_oscctrl_init_referenced_generators+0xf6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2d8c:	4a05      	ldr	r2, [pc, #20]	; (2da4 <_oscctrl_init_referenced_generators+0x114>)
    2d8e:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2d90:	f013 0f04 	tst.w	r3, #4
    2d94:	d1fb      	bne.n	2d8e <_oscctrl_init_referenced_generators+0xfe>
		;
#endif
	(void)hw;
}
    2d96:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2d98:	4a03      	ldr	r2, [pc, #12]	; (2da8 <_oscctrl_init_referenced_generators+0x118>)
    2d9a:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2da0:	d0fb      	beq.n	2d9a <_oscctrl_init_referenced_generators+0x10a>
    2da2:	e7d9      	b.n	2d58 <_oscctrl_init_referenced_generators+0xc8>
    2da4:	40001c00 	.word	0x40001c00
    2da8:	40001000 	.word	0x40001000
    2dac:	04010000 	.word	0x04010000
    2db0:	000d0e4e 	.word	0x000d0e4e

00002db4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2db4:	b500      	push	{lr}
    2db6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2db8:	4b0d      	ldr	r3, [pc, #52]	; (2df0 <RAMECC_Handler+0x3c>)
    2dba:	789b      	ldrb	r3, [r3, #2]
    2dbc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2dbe:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	f013 0f02 	tst.w	r3, #2
    2dc6:	d006      	beq.n	2dd6 <RAMECC_Handler+0x22>
    2dc8:	4b0a      	ldr	r3, [pc, #40]	; (2df4 <RAMECC_Handler+0x40>)
    2dca:	681b      	ldr	r3, [r3, #0]
    2dcc:	b11b      	cbz	r3, 2dd6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2dce:	4a08      	ldr	r2, [pc, #32]	; (2df0 <RAMECC_Handler+0x3c>)
    2dd0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2dd2:	4798      	blx	r3
    2dd4:	e009      	b.n	2dea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2dd6:	9b01      	ldr	r3, [sp, #4]
    2dd8:	f013 0f01 	tst.w	r3, #1
    2ddc:	d005      	beq.n	2dea <RAMECC_Handler+0x36>
    2dde:	4b05      	ldr	r3, [pc, #20]	; (2df4 <RAMECC_Handler+0x40>)
    2de0:	685b      	ldr	r3, [r3, #4]
    2de2:	b113      	cbz	r3, 2dea <RAMECC_Handler+0x36>
    2de4:	4a02      	ldr	r2, [pc, #8]	; (2df0 <RAMECC_Handler+0x3c>)
    2de6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2de8:	4798      	blx	r3
	} else {
		return;
	}
}
    2dea:	b003      	add	sp, #12
    2dec:	f85d fb04 	ldr.w	pc, [sp], #4
    2df0:	41020000 	.word	0x41020000
    2df4:	20001980 	.word	0x20001980

00002df8 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    2df8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2dfa:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2dfc:	6913      	ldr	r3, [r2, #16]
    2dfe:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e02:	d1fb      	bne.n	2dfc <_rtc_timer_set_period+0x4>
}
    2e04:	4770      	bx	lr

00002e06 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    2e06:	68c2      	ldr	r2, [r0, #12]
    2e08:	6913      	ldr	r3, [r2, #16]
    2e0a:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e0e:	d1fb      	bne.n	2e08 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    2e10:	6a10      	ldr	r0, [r2, #32]
}
    2e12:	4770      	bx	lr

00002e14 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    2e14:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e16:	f248 0103 	movw	r1, #32771	; 0x8003
    2e1a:	6913      	ldr	r3, [r2, #16]
    2e1c:	420b      	tst	r3, r1
    2e1e:	d1fc      	bne.n	2e1a <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2e20:	8810      	ldrh	r0, [r2, #0]
}
    2e22:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e26:	4770      	bx	lr

00002e28 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    2e28:	4770      	bx	lr
	...

00002e2c <_rtc_timer_init>:
{
    2e2c:	b538      	push	{r3, r4, r5, lr}
    2e2e:	460c      	mov	r4, r1
	ASSERT(dev);
    2e30:	4605      	mov	r5, r0
    2e32:	2230      	movs	r2, #48	; 0x30
    2e34:	4914      	ldr	r1, [pc, #80]	; (2e88 <_rtc_timer_init+0x5c>)
    2e36:	3000      	adds	r0, #0
    2e38:	bf18      	it	ne
    2e3a:	2001      	movne	r0, #1
    2e3c:	4b13      	ldr	r3, [pc, #76]	; (2e8c <_rtc_timer_init+0x60>)
    2e3e:	4798      	blx	r3
	dev->hw = hw;
    2e40:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e42:	2301      	movs	r3, #1
    2e44:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e46:	f248 0203 	movw	r2, #32771	; 0x8003
    2e4a:	6923      	ldr	r3, [r4, #16]
    2e4c:	4213      	tst	r3, r2
    2e4e:	d1fc      	bne.n	2e4a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2e50:	68eb      	ldr	r3, [r5, #12]
    2e52:	691a      	ldr	r2, [r3, #16]
    2e54:	f012 0f01 	tst.w	r2, #1
    2e58:	d1fb      	bne.n	2e52 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e5a:	f248 0280 	movw	r2, #32896	; 0x8080
    2e5e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e60:	f248 0103 	movw	r1, #32771	; 0x8003
    2e64:	691a      	ldr	r2, [r3, #16]
    2e66:	420a      	tst	r2, r1
    2e68:	d1fc      	bne.n	2e64 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2e6a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2e6c:	2301      	movs	r3, #1
    2e6e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e70:	6913      	ldr	r3, [r2, #16]
    2e72:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e76:	d1fb      	bne.n	2e70 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2e78:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e7e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    2e80:	4b03      	ldr	r3, [pc, #12]	; (2e90 <_rtc_timer_init+0x64>)
    2e82:	601d      	str	r5, [r3, #0]
}
    2e84:	2000      	movs	r0, #0
    2e86:	bd38      	pop	{r3, r4, r5, pc}
    2e88:	00009b44 	.word	0x00009b44
    2e8c:	000021e5 	.word	0x000021e5
    2e90:	20000898 	.word	0x20000898

00002e94 <_rtc_timer_deinit>:
{
    2e94:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2e96:	4604      	mov	r4, r0
    2e98:	b1c8      	cbz	r0, 2ece <_rtc_timer_deinit+0x3a>
    2e9a:	68c0      	ldr	r0, [r0, #12]
    2e9c:	3000      	adds	r0, #0
    2e9e:	bf18      	it	ne
    2ea0:	2001      	movne	r0, #1
    2ea2:	2252      	movs	r2, #82	; 0x52
    2ea4:	490b      	ldr	r1, [pc, #44]	; (2ed4 <_rtc_timer_deinit+0x40>)
    2ea6:	4b0c      	ldr	r3, [pc, #48]	; (2ed8 <_rtc_timer_deinit+0x44>)
    2ea8:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2eae:	4b0b      	ldr	r3, [pc, #44]	; (2edc <_rtc_timer_deinit+0x48>)
    2eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2eb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb8:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    2ebc:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2ebe:	2301      	movs	r3, #1
    2ec0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ec2:	f248 0103 	movw	r1, #32771	; 0x8003
    2ec6:	6913      	ldr	r3, [r2, #16]
    2ec8:	420b      	tst	r3, r1
    2eca:	d1fc      	bne.n	2ec6 <_rtc_timer_deinit+0x32>
}
    2ecc:	bd10      	pop	{r4, pc}
    2ece:	2000      	movs	r0, #0
    2ed0:	e7e7      	b.n	2ea2 <_rtc_timer_deinit+0xe>
    2ed2:	bf00      	nop
    2ed4:	00009b44 	.word	0x00009b44
    2ed8:	000021e5 	.word	0x000021e5
    2edc:	e000e100 	.word	0xe000e100

00002ee0 <_rtc_timer_start>:
{
    2ee0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2ee2:	4604      	mov	r4, r0
    2ee4:	b310      	cbz	r0, 2f2c <_rtc_timer_start+0x4c>
    2ee6:	68c0      	ldr	r0, [r0, #12]
    2ee8:	3000      	adds	r0, #0
    2eea:	bf18      	it	ne
    2eec:	2001      	movne	r0, #1
    2eee:	225e      	movs	r2, #94	; 0x5e
    2ef0:	490f      	ldr	r1, [pc, #60]	; (2f30 <_rtc_timer_start+0x50>)
    2ef2:	4b10      	ldr	r3, [pc, #64]	; (2f34 <_rtc_timer_start+0x54>)
    2ef4:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2efa:	4b0f      	ldr	r3, [pc, #60]	; (2f38 <_rtc_timer_start+0x58>)
    2efc:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    2efe:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    2f00:	2300      	movs	r3, #0
    2f02:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f04:	6913      	ldr	r3, [r2, #16]
    2f06:	f013 0f08 	tst.w	r3, #8
    2f0a:	d1fb      	bne.n	2f04 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    2f0c:	68e3      	ldr	r3, [r4, #12]
    2f0e:	691a      	ldr	r2, [r3, #16]
    2f10:	f012 0f08 	tst.w	r2, #8
    2f14:	d1fb      	bne.n	2f0e <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2f16:	881a      	ldrh	r2, [r3, #0]
    2f18:	b292      	uxth	r2, r2
    2f1a:	f042 0202 	orr.w	r2, r2, #2
    2f1e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f20:	f248 0103 	movw	r1, #32771	; 0x8003
    2f24:	691a      	ldr	r2, [r3, #16]
    2f26:	420a      	tst	r2, r1
    2f28:	d1fc      	bne.n	2f24 <_rtc_timer_start+0x44>
}
    2f2a:	bd10      	pop	{r4, pc}
    2f2c:	2000      	movs	r0, #0
    2f2e:	e7de      	b.n	2eee <_rtc_timer_start+0xe>
    2f30:	00009b44 	.word	0x00009b44
    2f34:	000021e5 	.word	0x000021e5
    2f38:	e000e100 	.word	0xe000e100

00002f3c <_rtc_timer_stop>:
{
    2f3c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2f3e:	4604      	mov	r4, r0
    2f40:	b1a0      	cbz	r0, 2f6c <_rtc_timer_stop+0x30>
    2f42:	68c0      	ldr	r0, [r0, #12]
    2f44:	3000      	adds	r0, #0
    2f46:	bf18      	it	ne
    2f48:	2001      	movne	r0, #1
    2f4a:	226b      	movs	r2, #107	; 0x6b
    2f4c:	4908      	ldr	r1, [pc, #32]	; (2f70 <_rtc_timer_stop+0x34>)
    2f4e:	4b09      	ldr	r3, [pc, #36]	; (2f74 <_rtc_timer_stop+0x38>)
    2f50:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    2f52:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2f54:	8813      	ldrh	r3, [r2, #0]
    2f56:	f023 0302 	bic.w	r3, r3, #2
    2f5a:	041b      	lsls	r3, r3, #16
    2f5c:	0c1b      	lsrs	r3, r3, #16
    2f5e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f60:	f248 0103 	movw	r1, #32771	; 0x8003
    2f64:	6913      	ldr	r3, [r2, #16]
    2f66:	420b      	tst	r3, r1
    2f68:	d1fc      	bne.n	2f64 <_rtc_timer_stop+0x28>
}
    2f6a:	bd10      	pop	{r4, pc}
    2f6c:	2000      	movs	r0, #0
    2f6e:	e7ec      	b.n	2f4a <_rtc_timer_stop+0xe>
    2f70:	00009b44 	.word	0x00009b44
    2f74:	000021e5 	.word	0x000021e5

00002f78 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    2f78:	4800      	ldr	r0, [pc, #0]	; (2f7c <_rtc_get_timer+0x4>)
    2f7a:	4770      	bx	lr
    2f7c:	20000000 	.word	0x20000000

00002f80 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2f80:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2f82:	4b08      	ldr	r3, [pc, #32]	; (2fa4 <RTC_Handler+0x24>)
    2f84:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2f86:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2f88:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2f8a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f8e:	d007      	beq.n	2fa0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2f90:	6823      	ldr	r3, [r4, #0]
    2f92:	b10b      	cbz	r3, 2f98 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2f94:	4620      	mov	r0, r4
    2f96:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2f98:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2f9e:	819a      	strh	r2, [r3, #12]
    2fa0:	bd10      	pop	{r4, pc}
    2fa2:	bf00      	nop
    2fa4:	20000898 	.word	0x20000898

00002fa8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2fa8:	b470      	push	{r4, r5, r6}
    2faa:	b089      	sub	sp, #36	; 0x24
    2fac:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2fae:	466c      	mov	r4, sp
    2fb0:	4d0d      	ldr	r5, [pc, #52]	; (2fe8 <_sercom_get_hardware_index+0x40>)
    2fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2fb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2fbe:	9b00      	ldr	r3, [sp, #0]
    2fc0:	42b3      	cmp	r3, r6
    2fc2:	d00d      	beq.n	2fe0 <_sercom_get_hardware_index+0x38>
    2fc4:	4631      	mov	r1, r6
    2fc6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fc8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2fca:	f853 2b04 	ldr.w	r2, [r3], #4
    2fce:	428a      	cmp	r2, r1
    2fd0:	d007      	beq.n	2fe2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fd2:	3001      	adds	r0, #1
    2fd4:	2808      	cmp	r0, #8
    2fd6:	d1f8      	bne.n	2fca <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2fd8:	2000      	movs	r0, #0
}
    2fda:	b009      	add	sp, #36	; 0x24
    2fdc:	bc70      	pop	{r4, r5, r6}
    2fde:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fe0:	2000      	movs	r0, #0
			return i;
    2fe2:	b2c0      	uxtb	r0, r0
    2fe4:	e7f9      	b.n	2fda <_sercom_get_hardware_index+0x32>
    2fe6:	bf00      	nop
    2fe8:	00009b5c 	.word	0x00009b5c

00002fec <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2fec:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2fee:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2ff0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2ff2:	f013 0f01 	tst.w	r3, #1
    2ff6:	d003      	beq.n	3000 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2ff8:	7da3      	ldrb	r3, [r4, #22]
    2ffa:	f013 0f01 	tst.w	r3, #1
    2ffe:	d112      	bne.n	3026 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3000:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    3002:	f013 0f02 	tst.w	r3, #2
    3006:	d003      	beq.n	3010 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3008:	7da3      	ldrb	r3, [r4, #22]
    300a:	f013 0f02 	tst.w	r3, #2
    300e:	d10f      	bne.n	3030 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3010:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3012:	f013 0f04 	tst.w	r3, #4
    3016:	d015      	beq.n	3044 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    3018:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    301a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    301e:	b163      	cbz	r3, 303a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3020:	23ff      	movs	r3, #255	; 0xff
    3022:	8363      	strh	r3, [r4, #26]
    3024:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3026:	2301      	movs	r3, #1
    3028:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    302a:	6803      	ldr	r3, [r0, #0]
    302c:	4798      	blx	r3
    302e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3030:	2302      	movs	r3, #2
    3032:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3034:	6883      	ldr	r3, [r0, #8]
    3036:	4798      	blx	r3
    3038:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    303a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    303c:	6843      	ldr	r3, [r0, #4]
    303e:	b2c9      	uxtb	r1, r1
    3040:	4798      	blx	r3
    3042:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3044:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3046:	09db      	lsrs	r3, r3, #7
    3048:	d100      	bne.n	304c <_sercom_usart_interrupt_handler+0x60>
    304a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    304c:	2380      	movs	r3, #128	; 0x80
    304e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    3050:	68c3      	ldr	r3, [r0, #12]
    3052:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3054:	8b63      	ldrh	r3, [r4, #26]
    3056:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3058:	8363      	strh	r3, [r4, #26]
    305a:	e7f6      	b.n	304a <_sercom_usart_interrupt_handler+0x5e>

0000305c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    305c:	4b11      	ldr	r3, [pc, #68]	; (30a4 <_sercom_init_irq_param+0x48>)
    305e:	4298      	cmp	r0, r3
    3060:	d011      	beq.n	3086 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    3062:	4b11      	ldr	r3, [pc, #68]	; (30a8 <_sercom_init_irq_param+0x4c>)
    3064:	4298      	cmp	r0, r3
    3066:	d011      	beq.n	308c <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    3068:	4b10      	ldr	r3, [pc, #64]	; (30ac <_sercom_init_irq_param+0x50>)
    306a:	4298      	cmp	r0, r3
    306c:	d011      	beq.n	3092 <_sercom_init_irq_param+0x36>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    306e:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    3072:	d011      	beq.n	3098 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3074:	4b0e      	ldr	r3, [pc, #56]	; (30b0 <_sercom_init_irq_param+0x54>)
    3076:	4298      	cmp	r0, r3
    3078:	d011      	beq.n	309e <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    307a:	4b0e      	ldr	r3, [pc, #56]	; (30b4 <_sercom_init_irq_param+0x58>)
    307c:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    307e:	bf04      	itt	eq
    3080:	4b0d      	ldreq	r3, [pc, #52]	; (30b8 <_sercom_init_irq_param+0x5c>)
    3082:	6159      	streq	r1, [r3, #20]
    3084:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    3086:	4b0c      	ldr	r3, [pc, #48]	; (30b8 <_sercom_init_irq_param+0x5c>)
    3088:	6019      	str	r1, [r3, #0]
    308a:	e7f0      	b.n	306e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    308c:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <_sercom_init_irq_param+0x5c>)
    308e:	6059      	str	r1, [r3, #4]
    3090:	e7f0      	b.n	3074 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    3092:	4b09      	ldr	r3, [pc, #36]	; (30b8 <_sercom_init_irq_param+0x5c>)
    3094:	6099      	str	r1, [r3, #8]
    3096:	e7f0      	b.n	307a <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    3098:	4b07      	ldr	r3, [pc, #28]	; (30b8 <_sercom_init_irq_param+0x5c>)
    309a:	60d9      	str	r1, [r3, #12]
    309c:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    309e:	4b06      	ldr	r3, [pc, #24]	; (30b8 <_sercom_init_irq_param+0x5c>)
    30a0:	6119      	str	r1, [r3, #16]
    30a2:	4770      	bx	lr
    30a4:	40003000 	.word	0x40003000
    30a8:	40003400 	.word	0x40003400
    30ac:	41012000 	.word	0x41012000
    30b0:	43000400 	.word	0x43000400
    30b4:	43000800 	.word	0x43000800
    30b8:	2000089c 	.word	0x2000089c

000030bc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    30bc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    30be:	4b03      	ldr	r3, [pc, #12]	; (30cc <_sercom_get_irq_num+0x10>)
    30c0:	4798      	blx	r3
    30c2:	0080      	lsls	r0, r0, #2
    30c4:	302e      	adds	r0, #46	; 0x2e
}
    30c6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    30ca:	bd08      	pop	{r3, pc}
    30cc:	00002fa9 	.word	0x00002fa9

000030d0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    30d0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    30d2:	f013 0f01 	tst.w	r3, #1
    30d6:	d109      	bne.n	30ec <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    30d8:	6803      	ldr	r3, [r0, #0]
    30da:	f043 0302 	orr.w	r3, r3, #2
    30de:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    30e0:	69c3      	ldr	r3, [r0, #28]
    30e2:	f013 0f03 	tst.w	r3, #3
    30e6:	d1fb      	bne.n	30e0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    30e8:	2000      	movs	r0, #0
    30ea:	4770      	bx	lr
		return ERR_BUSY;
    30ec:	f06f 0003 	mvn.w	r0, #3
}
    30f0:	4770      	bx	lr
	...

000030f4 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    30f4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    30f6:	4b03      	ldr	r3, [pc, #12]	; (3104 <_spi_get_tx_dma_channel+0x10>)
    30f8:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    30fa:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    30fc:	bf0c      	ite	eq
    30fe:	2008      	moveq	r0, #8
    3100:	2000      	movne	r0, #0
    3102:	bd08      	pop	{r3, pc}
    3104:	00002fa9 	.word	0x00002fa9

00003108 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    3108:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    310a:	4b03      	ldr	r3, [pc, #12]	; (3118 <_spi_get_rx_dma_channel+0x10>)
    310c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    310e:	2807      	cmp	r0, #7
    3110:	bf8c      	ite	hi
    3112:	2000      	movhi	r0, #0
    3114:	2001      	movls	r0, #1
    3116:	bd08      	pop	{r3, pc}
    3118:	00002fa9 	.word	0x00002fa9

0000311c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    311c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    311e:	6883      	ldr	r3, [r0, #8]
    3120:	689b      	ldr	r3, [r3, #8]
    3122:	b103      	cbz	r3, 3126 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    3124:	4798      	blx	r3
    3126:	bd08      	pop	{r3, pc}

00003128 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    3128:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    312a:	6883      	ldr	r3, [r0, #8]
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	b103      	cbz	r3, 3132 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    3130:	4798      	blx	r3
    3132:	bd08      	pop	{r3, pc}

00003134 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    3134:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    3136:	6883      	ldr	r3, [r0, #8]
    3138:	68db      	ldr	r3, [r3, #12]
    313a:	b103      	cbz	r3, 313e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    313c:	4798      	blx	r3
    313e:	bd08      	pop	{r3, pc}

00003140 <_usart_init>:
{
    3140:	b510      	push	{r4, lr}
    3142:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3144:	4b48      	ldr	r3, [pc, #288]	; (3268 <_usart_init+0x128>)
    3146:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3148:	2800      	cmp	r0, #0
    314a:	d06a      	beq.n	3222 <_usart_init+0xe2>
    314c:	2801      	cmp	r0, #1
    314e:	d062      	beq.n	3216 <_usart_init+0xd6>
    3150:	2802      	cmp	r0, #2
    3152:	d062      	beq.n	321a <_usart_init+0xda>
    3154:	2804      	cmp	r0, #4
    3156:	d062      	beq.n	321e <_usart_init+0xde>
    3158:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    315a:	bf08      	it	eq
    315c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    315e:	d006      	beq.n	316e <_usart_init+0x2e>
	ASSERT(false);
    3160:	f240 2276 	movw	r2, #630	; 0x276
    3164:	4941      	ldr	r1, [pc, #260]	; (326c <_usart_init+0x12c>)
    3166:	2000      	movs	r0, #0
    3168:	4b41      	ldr	r3, [pc, #260]	; (3270 <_usart_init+0x130>)
    316a:	4798      	blx	r3
	return 0;
    316c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    316e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3170:	f013 0f01 	tst.w	r3, #1
    3174:	d122      	bne.n	31bc <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3176:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    317a:	4a3e      	ldr	r2, [pc, #248]	; (3274 <_usart_init+0x134>)
    317c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3182:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3186:	69e3      	ldr	r3, [r4, #28]
    3188:	f013 0f03 	tst.w	r3, #3
    318c:	d1fb      	bne.n	3186 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    318e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3190:	f013 0f02 	tst.w	r3, #2
    3194:	d00b      	beq.n	31ae <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3196:	6823      	ldr	r3, [r4, #0]
    3198:	f023 0302 	bic.w	r3, r3, #2
    319c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    319e:	69e3      	ldr	r3, [r4, #28]
    31a0:	f013 0f03 	tst.w	r3, #3
    31a4:	d1fb      	bne.n	319e <_usart_init+0x5e>
    31a6:	69e3      	ldr	r3, [r4, #28]
    31a8:	f013 0f02 	tst.w	r3, #2
    31ac:	d1fb      	bne.n	31a6 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    31ae:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31b2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31b4:	69e3      	ldr	r3, [r4, #28]
    31b6:	f013 0f03 	tst.w	r3, #3
    31ba:	d1fb      	bne.n	31b4 <_usart_init+0x74>
    31bc:	69e3      	ldr	r3, [r4, #28]
    31be:	f013 0f01 	tst.w	r3, #1
    31c2:	d1fb      	bne.n	31bc <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    31c4:	460a      	mov	r2, r1
    31c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    31ca:	4b2a      	ldr	r3, [pc, #168]	; (3274 <_usart_init+0x134>)
    31cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    31d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31d2:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31d4:	69e3      	ldr	r3, [r4, #28]
    31d6:	f013 0f03 	tst.w	r3, #3
    31da:	d1fb      	bne.n	31d4 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    31dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31e0:	4924      	ldr	r1, [pc, #144]	; (3274 <_usart_init+0x134>)
    31e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    31e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31ea:	69e3      	ldr	r3, [r4, #28]
    31ec:	f013 0f1f 	tst.w	r3, #31
    31f0:	d1fb      	bne.n	31ea <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    31f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31f6:	491f      	ldr	r1, [pc, #124]	; (3274 <_usart_init+0x134>)
    31f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    31fe:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3200:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3204:	d10f      	bne.n	3226 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3206:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    320a:	491a      	ldr	r1, [pc, #104]	; (3274 <_usart_init+0x134>)
    320c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3210:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    3212:	81a3      	strh	r3, [r4, #12]
    3214:	e016      	b.n	3244 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3216:	2101      	movs	r1, #1
    3218:	e7a9      	b.n	316e <_usart_init+0x2e>
    321a:	2102      	movs	r1, #2
    321c:	e7a7      	b.n	316e <_usart_init+0x2e>
    321e:	2103      	movs	r1, #3
    3220:	e7a5      	b.n	316e <_usart_init+0x2e>
    3222:	2100      	movs	r1, #0
    3224:	e7a3      	b.n	316e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3226:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    322a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    322e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    3230:	89a1      	ldrh	r1, [r4, #12]
    3232:	f360 010c 	bfi	r1, r0, #0, #13
    3236:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3238:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    323c:	89a3      	ldrh	r3, [r4, #12]
    323e:	f361 334f 	bfi	r3, r1, #13, #3
    3242:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3244:	4b0b      	ldr	r3, [pc, #44]	; (3274 <_usart_init+0x134>)
    3246:	0051      	lsls	r1, r2, #1
    3248:	1888      	adds	r0, r1, r2
    324a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    324e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    3252:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3254:	440a      	add	r2, r1
    3256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    325a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    325e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    3262:	2000      	movs	r0, #0
    3264:	bd10      	pop	{r4, pc}
    3266:	bf00      	nop
    3268:	00002fa9 	.word	0x00002fa9
    326c:	00009c30 	.word	0x00009c30
    3270:	000021e5 	.word	0x000021e5
    3274:	00009b5c 	.word	0x00009b5c

00003278 <_get_i2cm_index>:
{
    3278:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    327a:	4b07      	ldr	r3, [pc, #28]	; (3298 <_get_i2cm_index+0x20>)
    327c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    327e:	2805      	cmp	r0, #5
    3280:	d008      	beq.n	3294 <_get_i2cm_index+0x1c>
	ASSERT(false);
    3282:	f240 32ed 	movw	r2, #1005	; 0x3ed
    3286:	4905      	ldr	r1, [pc, #20]	; (329c <_get_i2cm_index+0x24>)
    3288:	2000      	movs	r0, #0
    328a:	4b05      	ldr	r3, [pc, #20]	; (32a0 <_get_i2cm_index+0x28>)
    328c:	4798      	blx	r3
	return -1;
    328e:	f04f 30ff 	mov.w	r0, #4294967295
}
    3292:	bd08      	pop	{r3, pc}
			return i;
    3294:	2000      	movs	r0, #0
    3296:	bd08      	pop	{r3, pc}
    3298:	00002fa9 	.word	0x00002fa9
    329c:	00009c30 	.word	0x00009c30
    32a0:	000021e5 	.word	0x000021e5

000032a4 <_i2c_m_sync_init_impl>:
{
    32a4:	b538      	push	{r3, r4, r5, lr}
    32a6:	4605      	mov	r5, r0
    32a8:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    32aa:	4608      	mov	r0, r1
    32ac:	4b34      	ldr	r3, [pc, #208]	; (3380 <_i2c_m_sync_init_impl+0xdc>)
    32ae:	4798      	blx	r3
    32b0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    32b2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    32b4:	f013 0f01 	tst.w	r3, #1
    32b8:	d123      	bne.n	3302 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    32ba:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    32be:	4a31      	ldr	r2, [pc, #196]	; (3384 <_i2c_m_sync_init_impl+0xe0>)
    32c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    32c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    32c8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32cc:	69e3      	ldr	r3, [r4, #28]
    32ce:	f013 0f03 	tst.w	r3, #3
    32d2:	d1fb      	bne.n	32cc <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    32d4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    32d6:	f013 0f02 	tst.w	r3, #2
    32da:	d00b      	beq.n	32f4 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    32dc:	6823      	ldr	r3, [r4, #0]
    32de:	f023 0302 	bic.w	r3, r3, #2
    32e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32e4:	69e3      	ldr	r3, [r4, #28]
    32e6:	f013 0f03 	tst.w	r3, #3
    32ea:	d1fb      	bne.n	32e4 <_i2c_m_sync_init_impl+0x40>
    32ec:	69e3      	ldr	r3, [r4, #28]
    32ee:	f013 0f02 	tst.w	r3, #2
    32f2:	d1fb      	bne.n	32ec <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    32f4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    32f8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32fa:	69e3      	ldr	r3, [r4, #28]
    32fc:	f013 0f03 	tst.w	r3, #3
    3300:	d1fb      	bne.n	32fa <_i2c_m_sync_init_impl+0x56>
    3302:	69e3      	ldr	r3, [r4, #28]
    3304:	f013 0f01 	tst.w	r3, #1
    3308:	d1fb      	bne.n	3302 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    330a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    330e:	4a1d      	ldr	r2, [pc, #116]	; (3384 <_i2c_m_sync_init_impl+0xe0>)
    3310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3314:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3318:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    331a:	69e3      	ldr	r3, [r4, #28]
    331c:	f013 0f03 	tst.w	r3, #3
    3320:	d1fb      	bne.n	331a <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    3322:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3326:	4917      	ldr	r1, [pc, #92]	; (3384 <_i2c_m_sync_init_impl+0xe0>)
    3328:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    332c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3330:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3332:	69e3      	ldr	r3, [r4, #28]
    3334:	f013 0f04 	tst.w	r3, #4
    3338:	d1fb      	bne.n	3332 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    333a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    333e:	4911      	ldr	r1, [pc, #68]	; (3384 <_i2c_m_sync_init_impl+0xe0>)
    3340:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    3348:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    334a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    334e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3350:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3356:	2b01      	cmp	r3, #1
    3358:	bf94      	ite	ls
    335a:	2300      	movls	r3, #0
    335c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    335e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    3362:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3364:	69e3      	ldr	r3, [r4, #28]
    3366:	f013 0f04 	tst.w	r3, #4
    336a:	d1fb      	bne.n	3364 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    336c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3370:	4b04      	ldr	r3, [pc, #16]	; (3384 <_i2c_m_sync_init_impl+0xe0>)
    3372:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3376:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    337a:	81eb      	strh	r3, [r5, #14]
}
    337c:	2000      	movs	r0, #0
    337e:	bd38      	pop	{r3, r4, r5, pc}
    3380:	00003279 	.word	0x00003279
    3384:	00009b5c 	.word	0x00009b5c

00003388 <_sercom_i2c_m_irq_handler>:
{
    3388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    338c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    338e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    3390:	7e26      	ldrb	r6, [r4, #24]
    3392:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    3394:	f8df 8234 	ldr.w	r8, [pc, #564]	; 35cc <_sercom_i2c_m_irq_handler+0x244>
    3398:	f240 425f 	movw	r2, #1119	; 0x45f
    339c:	4641      	mov	r1, r8
    339e:	3000      	adds	r0, #0
    33a0:	bf18      	it	ne
    33a2:	2001      	movne	r0, #1
    33a4:	4f88      	ldr	r7, [pc, #544]	; (35c8 <_sercom_i2c_m_irq_handler+0x240>)
    33a6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    33a8:	6928      	ldr	r0, [r5, #16]
    33aa:	f44f 628c 	mov.w	r2, #1120	; 0x460
    33ae:	4641      	mov	r1, r8
    33b0:	3000      	adds	r0, #0
    33b2:	bf18      	it	ne
    33b4:	2001      	movne	r0, #1
    33b6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    33b8:	f016 0f80 	tst.w	r6, #128	; 0x80
    33bc:	f040 80f4 	bne.w	35a8 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    33c0:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33c2:	69e3      	ldr	r3, [r4, #28]
    33c4:	f013 0f04 	tst.w	r3, #4
    33c8:	d1fb      	bne.n	33c2 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    33ca:	8b63      	ldrh	r3, [r4, #26]
    33cc:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    33ce:	f016 0f01 	tst.w	r6, #1
    33d2:	f000 8090 	beq.w	34f6 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    33d6:	f013 0f02 	tst.w	r3, #2
    33da:	d022      	beq.n	3422 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    33dc:	2201      	movs	r2, #1
    33de:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    33e0:	886a      	ldrh	r2, [r5, #2]
    33e2:	b292      	uxth	r2, r2
    33e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    33e8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    33ea:	886a      	ldrh	r2, [r5, #2]
    33ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    33f0:	0412      	lsls	r2, r2, #16
    33f2:	0c12      	lsrs	r2, r2, #16
    33f4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    33f6:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    33fa:	2b00      	cmp	r3, #0
    33fc:	bf14      	ite	ne
    33fe:	f06f 0104 	mvnne.w	r1, #4
    3402:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3406:	886b      	ldrh	r3, [r5, #2]
    3408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    340c:	041b      	lsls	r3, r3, #16
    340e:	0c1b      	lsrs	r3, r3, #16
    3410:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    3412:	696b      	ldr	r3, [r5, #20]
    3414:	2b00      	cmp	r3, #0
    3416:	f000 80c5 	beq.w	35a4 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    341a:	4628      	mov	r0, r5
    341c:	4798      	blx	r3
    341e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3422:	f013 0f04 	tst.w	r3, #4
    3426:	d124      	bne.n	3472 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    3428:	886b      	ldrh	r3, [r5, #2]
    342a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    342e:	d03e      	beq.n	34ae <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3430:	882b      	ldrh	r3, [r5, #0]
    3432:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3434:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3438:	69e3      	ldr	r3, [r4, #28]
    343a:	f013 0f04 	tst.w	r3, #4
    343e:	d1fb      	bne.n	3438 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3440:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    3446:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    344a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    344c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    344e:	69e3      	ldr	r3, [r4, #28]
    3450:	f013 0f04 	tst.w	r3, #4
    3454:	d1fb      	bne.n	344e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    3456:	886b      	ldrh	r3, [r5, #2]
    3458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    345c:	041b      	lsls	r3, r3, #16
    345e:	0c1b      	lsrs	r3, r3, #16
    3460:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    3462:	69ab      	ldr	r3, [r5, #24]
    3464:	2b00      	cmp	r3, #0
    3466:	f000 8088 	beq.w	357a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    346a:	4628      	mov	r0, r5
    346c:	4798      	blx	r3
    346e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    3472:	686b      	ldr	r3, [r5, #4]
    3474:	2b00      	cmp	r3, #0
    3476:	dd04      	ble.n	3482 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    3478:	886b      	ldrh	r3, [r5, #2]
    347a:	b29b      	uxth	r3, r3
    347c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3480:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    3482:	886b      	ldrh	r3, [r5, #2]
    3484:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3488:	d108      	bne.n	349c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    348a:	886b      	ldrh	r3, [r5, #2]
    348c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3490:	041b      	lsls	r3, r3, #16
    3492:	0c1b      	lsrs	r3, r3, #16
    3494:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    3496:	f06f 0101 	mvn.w	r1, #1
    349a:	e7b4      	b.n	3406 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    349c:	6863      	ldr	r3, [r4, #4]
    349e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    34a2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34a4:	69e3      	ldr	r3, [r4, #28]
    34a6:	f013 0f04 	tst.w	r3, #4
    34aa:	d1fb      	bne.n	34a4 <_sercom_i2c_m_irq_handler+0x11c>
    34ac:	e7ed      	b.n	348a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    34ae:	686b      	ldr	r3, [r5, #4]
    34b0:	b99b      	cbnz	r3, 34da <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    34b2:	886b      	ldrh	r3, [r5, #2]
    34b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    34b8:	d106      	bne.n	34c8 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    34ba:	886b      	ldrh	r3, [r5, #2]
    34bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    34c0:	041b      	lsls	r3, r3, #16
    34c2:	0c1b      	lsrs	r3, r3, #16
    34c4:	806b      	strh	r3, [r5, #2]
    34c6:	e7cc      	b.n	3462 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    34c8:	6863      	ldr	r3, [r4, #4]
    34ca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    34ce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34d0:	69e3      	ldr	r3, [r4, #28]
    34d2:	f013 0f04 	tst.w	r3, #4
    34d6:	d1fb      	bne.n	34d0 <_sercom_i2c_m_irq_handler+0x148>
    34d8:	e7ef      	b.n	34ba <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    34da:	68ab      	ldr	r3, [r5, #8]
    34dc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    34de:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34e0:	69e3      	ldr	r3, [r4, #28]
    34e2:	f013 0f04 	tst.w	r3, #4
    34e6:	d1fb      	bne.n	34e0 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    34e8:	68ab      	ldr	r3, [r5, #8]
    34ea:	3301      	adds	r3, #1
    34ec:	60ab      	str	r3, [r5, #8]
				msg->len--;
    34ee:	686b      	ldr	r3, [r5, #4]
    34f0:	3b01      	subs	r3, #1
    34f2:	606b      	str	r3, [r5, #4]
    34f4:	e7b5      	b.n	3462 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    34f6:	f016 0f02 	tst.w	r6, #2
    34fa:	d041      	beq.n	3580 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    34fc:	686a      	ldr	r2, [r5, #4]
    34fe:	2a00      	cmp	r2, #0
    3500:	d036      	beq.n	3570 <_sercom_i2c_m_irq_handler+0x1e8>
    3502:	f013 0f04 	tst.w	r3, #4
    3506:	d133      	bne.n	3570 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3508:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    350c:	3a01      	subs	r2, #1
    350e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3510:	2a00      	cmp	r2, #0
    3512:	d137      	bne.n	3584 <_sercom_i2c_m_irq_handler+0x1fc>
    3514:	2900      	cmp	r1, #0
    3516:	d039      	beq.n	358c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    3518:	886b      	ldrh	r3, [r5, #2]
    351a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    351e:	d116      	bne.n	354e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    3520:	886b      	ldrh	r3, [r5, #2]
    3522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3526:	041b      	lsls	r3, r3, #16
    3528:	0c1b      	lsrs	r3, r3, #16
    352a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    352c:	68aa      	ldr	r2, [r5, #8]
    352e:	1c53      	adds	r3, r2, #1
    3530:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3532:	69e3      	ldr	r3, [r4, #28]
    3534:	f013 0f04 	tst.w	r3, #4
    3538:	d1fb      	bne.n	3532 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    353a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    353c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    353e:	2302      	movs	r3, #2
    3540:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3542:	69eb      	ldr	r3, [r5, #28]
    3544:	b1e3      	cbz	r3, 3580 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    3546:	4628      	mov	r0, r5
    3548:	4798      	blx	r3
    354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    354e:	6863      	ldr	r3, [r4, #4]
    3550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3554:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3556:	69e3      	ldr	r3, [r4, #28]
    3558:	f013 0f04 	tst.w	r3, #4
    355c:	d1fb      	bne.n	3556 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    355e:	6863      	ldr	r3, [r4, #4]
    3560:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3564:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3566:	69e3      	ldr	r3, [r4, #28]
    3568:	f013 0f04 	tst.w	r3, #4
    356c:	d1fb      	bne.n	3566 <_sercom_i2c_m_irq_handler+0x1de>
    356e:	e7d7      	b.n	3520 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3570:	2302      	movs	r3, #2
    3572:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    3574:	f06f 0101 	mvn.w	r1, #1
    3578:	e745      	b.n	3406 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    357a:	f016 0f02 	tst.w	r6, #2
    357e:	d1e0      	bne.n	3542 <_sercom_i2c_m_irq_handler+0x1ba>
    3580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3584:	2a01      	cmp	r2, #1
    3586:	d1d1      	bne.n	352c <_sercom_i2c_m_irq_handler+0x1a4>
    3588:	2900      	cmp	r1, #0
    358a:	d0cf      	beq.n	352c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    358c:	6863      	ldr	r3, [r4, #4]
    358e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3592:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3594:	69e3      	ldr	r3, [r4, #28]
    3596:	f013 0f04 	tst.w	r3, #4
    359a:	d1fb      	bne.n	3594 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    359c:	686b      	ldr	r3, [r5, #4]
    359e:	2b00      	cmp	r3, #0
    35a0:	d0ba      	beq.n	3518 <_sercom_i2c_m_irq_handler+0x190>
    35a2:	e7c3      	b.n	352c <_sercom_i2c_m_irq_handler+0x1a4>
    35a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    35a8:	886b      	ldrh	r3, [r5, #2]
    35aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    35ae:	041b      	lsls	r3, r3, #16
    35b0:	0c1b      	lsrs	r3, r3, #16
    35b2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    35b4:	696b      	ldr	r3, [r5, #20]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d0e2      	beq.n	3580 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    35ba:	f06f 0104 	mvn.w	r1, #4
    35be:	4628      	mov	r0, r5
    35c0:	4798      	blx	r3
    35c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35c6:	bf00      	nop
    35c8:	000021e5 	.word	0x000021e5
    35cc:	00009c30 	.word	0x00009c30

000035d0 <_usart_async_init>:
{
    35d0:	b570      	push	{r4, r5, r6, lr}
    35d2:	460d      	mov	r5, r1
	ASSERT(device);
    35d4:	4606      	mov	r6, r0
    35d6:	22d6      	movs	r2, #214	; 0xd6
    35d8:	4917      	ldr	r1, [pc, #92]	; (3638 <_usart_async_init+0x68>)
    35da:	3000      	adds	r0, #0
    35dc:	bf18      	it	ne
    35de:	2001      	movne	r0, #1
    35e0:	4b16      	ldr	r3, [pc, #88]	; (363c <_usart_async_init+0x6c>)
    35e2:	4798      	blx	r3
	init_status = _usart_init(hw);
    35e4:	4628      	mov	r0, r5
    35e6:	4b16      	ldr	r3, [pc, #88]	; (3640 <_usart_async_init+0x70>)
    35e8:	4798      	blx	r3
	if (init_status) {
    35ea:	4604      	mov	r4, r0
    35ec:	b108      	cbz	r0, 35f2 <_usart_async_init+0x22>
}
    35ee:	4620      	mov	r0, r4
    35f0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    35f2:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    35f4:	4631      	mov	r1, r6
    35f6:	4628      	mov	r0, r5
    35f8:	4b12      	ldr	r3, [pc, #72]	; (3644 <_usart_async_init+0x74>)
    35fa:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    35fc:	4628      	mov	r0, r5
    35fe:	4b12      	ldr	r3, [pc, #72]	; (3648 <_usart_async_init+0x78>)
    3600:	4798      	blx	r3
    3602:	1d01      	adds	r1, r0, #4
    3604:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3606:	2501      	movs	r5, #1
    3608:	f000 021f 	and.w	r2, r0, #31
    360c:	fa05 f202 	lsl.w	r2, r5, r2
    3610:	0943      	lsrs	r3, r0, #5
    3612:	009b      	lsls	r3, r3, #2
    3614:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3618:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    361c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3624:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3628:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    362c:	601a      	str	r2, [r3, #0]
		irq++;
    362e:	3001      	adds	r0, #1
    3630:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3632:	4281      	cmp	r1, r0
    3634:	d1e8      	bne.n	3608 <_usart_async_init+0x38>
    3636:	e7da      	b.n	35ee <_usart_async_init+0x1e>
    3638:	00009c30 	.word	0x00009c30
    363c:	000021e5 	.word	0x000021e5
    3640:	00003141 	.word	0x00003141
    3644:	0000305d 	.word	0x0000305d
    3648:	000030bd 	.word	0x000030bd

0000364c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    364c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    364e:	6813      	ldr	r3, [r2, #0]
    3650:	f043 0302 	orr.w	r3, r3, #2
    3654:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3656:	69d3      	ldr	r3, [r2, #28]
    3658:	f013 0f03 	tst.w	r3, #3
    365c:	d1fb      	bne.n	3656 <_usart_async_enable+0xa>
}
    365e:	4770      	bx	lr

00003660 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3660:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3662:	6299      	str	r1, [r3, #40]	; 0x28
    3664:	4770      	bx	lr

00003666 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3666:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3668:	2201      	movs	r2, #1
    366a:	759a      	strb	r2, [r3, #22]
    366c:	4770      	bx	lr

0000366e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    366e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3670:	2202      	movs	r2, #2
    3672:	759a      	strb	r2, [r3, #22]
    3674:	4770      	bx	lr
	...

00003678 <_usart_async_set_irq_state>:
{
    3678:	b570      	push	{r4, r5, r6, lr}
    367a:	460c      	mov	r4, r1
    367c:	4616      	mov	r6, r2
	ASSERT(device);
    367e:	4605      	mov	r5, r0
    3680:	f240 2236 	movw	r2, #566	; 0x236
    3684:	4915      	ldr	r1, [pc, #84]	; (36dc <_usart_async_set_irq_state+0x64>)
    3686:	3000      	adds	r0, #0
    3688:	bf18      	it	ne
    368a:	2001      	movne	r0, #1
    368c:	4b14      	ldr	r3, [pc, #80]	; (36e0 <_usart_async_set_irq_state+0x68>)
    368e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3690:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3694:	d10d      	bne.n	36b2 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3696:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3698:	b92e      	cbnz	r6, 36a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    369a:	2201      	movs	r2, #1
    369c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    369e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    36a0:	2202      	movs	r2, #2
    36a2:	751a      	strb	r2, [r3, #20]
    36a4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    36a6:	2201      	movs	r2, #1
    36a8:	759a      	strb	r2, [r3, #22]
    36aa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    36ac:	2202      	movs	r2, #2
    36ae:	759a      	strb	r2, [r3, #22]
    36b0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    36b2:	2c01      	cmp	r4, #1
    36b4:	d002      	beq.n	36bc <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    36b6:	2c03      	cmp	r4, #3
    36b8:	d008      	beq.n	36cc <_usart_async_set_irq_state+0x54>
    36ba:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    36bc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    36be:	b916      	cbnz	r6, 36c6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    36c0:	2204      	movs	r2, #4
    36c2:	751a      	strb	r2, [r3, #20]
    36c4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    36c6:	2204      	movs	r2, #4
    36c8:	759a      	strb	r2, [r3, #22]
    36ca:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    36cc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    36ce:	b116      	cbz	r6, 36d6 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    36d0:	2280      	movs	r2, #128	; 0x80
    36d2:	759a      	strb	r2, [r3, #22]
}
    36d4:	e7f1      	b.n	36ba <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    36d6:	2280      	movs	r2, #128	; 0x80
    36d8:	751a      	strb	r2, [r3, #20]
    36da:	bd70      	pop	{r4, r5, r6, pc}
    36dc:	00009c30 	.word	0x00009c30
    36e0:	000021e5 	.word	0x000021e5

000036e4 <_i2c_m_async_init>:
{
    36e4:	b570      	push	{r4, r5, r6, lr}
    36e6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    36e8:	4606      	mov	r6, r0
    36ea:	f240 42d2 	movw	r2, #1234	; 0x4d2
    36ee:	4918      	ldr	r1, [pc, #96]	; (3750 <_i2c_m_async_init+0x6c>)
    36f0:	3000      	adds	r0, #0
    36f2:	bf18      	it	ne
    36f4:	2001      	movne	r0, #1
    36f6:	4b17      	ldr	r3, [pc, #92]	; (3754 <_i2c_m_async_init+0x70>)
    36f8:	4798      	blx	r3
	i2c_dev->hw = hw;
    36fa:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    36fc:	4629      	mov	r1, r5
    36fe:	4630      	mov	r0, r6
    3700:	4b15      	ldr	r3, [pc, #84]	; (3758 <_i2c_m_async_init+0x74>)
    3702:	4798      	blx	r3
	if (init_status) {
    3704:	4604      	mov	r4, r0
    3706:	b108      	cbz	r0, 370c <_i2c_m_async_init+0x28>
}
    3708:	4620      	mov	r0, r4
    370a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    370c:	4631      	mov	r1, r6
    370e:	4628      	mov	r0, r5
    3710:	4b12      	ldr	r3, [pc, #72]	; (375c <_i2c_m_async_init+0x78>)
    3712:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3714:	4628      	mov	r0, r5
    3716:	4b12      	ldr	r3, [pc, #72]	; (3760 <_i2c_m_async_init+0x7c>)
    3718:	4798      	blx	r3
    371a:	1d01      	adds	r1, r0, #4
    371c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    371e:	2501      	movs	r5, #1
    3720:	f000 021f 	and.w	r2, r0, #31
    3724:	fa05 f202 	lsl.w	r2, r5, r2
    3728:	0943      	lsrs	r3, r0, #5
    372a:	009b      	lsls	r3, r3, #2
    372c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3730:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    373c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3740:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3744:	601a      	str	r2, [r3, #0]
		irq++;
    3746:	3001      	adds	r0, #1
    3748:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    374a:	4281      	cmp	r1, r0
    374c:	d1e8      	bne.n	3720 <_i2c_m_async_init+0x3c>
    374e:	e7db      	b.n	3708 <_i2c_m_async_init+0x24>
    3750:	00009c30 	.word	0x00009c30
    3754:	000021e5 	.word	0x000021e5
    3758:	000032a5 	.word	0x000032a5
    375c:	0000305d 	.word	0x0000305d
    3760:	000030bd 	.word	0x000030bd

00003764 <_i2c_m_async_transfer>:
{
    3764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3768:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    376a:	4605      	mov	r5, r0
    376c:	f110 0800 	adds.w	r8, r0, #0
    3770:	bf18      	it	ne
    3772:	f04f 0801 	movne.w	r8, #1
    3776:	4f45      	ldr	r7, [pc, #276]	; (388c <_i2c_m_async_transfer+0x128>)
    3778:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    377c:	4639      	mov	r1, r7
    377e:	4640      	mov	r0, r8
    3780:	4e43      	ldr	r6, [pc, #268]	; (3890 <_i2c_m_async_transfer+0x12c>)
    3782:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3784:	6928      	ldr	r0, [r5, #16]
    3786:	f240 5229 	movw	r2, #1321	; 0x529
    378a:	4639      	mov	r1, r7
    378c:	3000      	adds	r0, #0
    378e:	bf18      	it	ne
    3790:	2001      	movne	r0, #1
    3792:	47b0      	blx	r6
	ASSERT(msg);
    3794:	f240 522a 	movw	r2, #1322	; 0x52a
    3798:	4639      	mov	r1, r7
    379a:	1c20      	adds	r0, r4, #0
    379c:	bf18      	it	ne
    379e:	2001      	movne	r0, #1
    37a0:	47b0      	blx	r6
	if (msg->len == 0) {
    37a2:	6860      	ldr	r0, [r4, #4]
    37a4:	2800      	cmp	r0, #0
    37a6:	d06f      	beq.n	3888 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    37a8:	886b      	ldrh	r3, [r5, #2]
    37aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    37ae:	d169      	bne.n	3884 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    37b0:	8863      	ldrh	r3, [r4, #2]
    37b2:	b29b      	uxth	r3, r3
    37b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37b8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    37ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    37be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    37c2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    37c4:	6853      	ldr	r3, [r2, #4]
    37c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37ca:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37cc:	69d3      	ldr	r3, [r2, #28]
    37ce:	f013 0f04 	tst.w	r3, #4
    37d2:	d1fb      	bne.n	37cc <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    37d4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    37d6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    37d8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    37dc:	492b      	ldr	r1, [pc, #172]	; (388c <_i2c_m_async_transfer+0x128>)
    37de:	4640      	mov	r0, r8
    37e0:	4b2b      	ldr	r3, [pc, #172]	; (3890 <_i2c_m_async_transfer+0x12c>)
    37e2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    37e4:	686b      	ldr	r3, [r5, #4]
    37e6:	2b01      	cmp	r3, #1
    37e8:	d02a      	beq.n	3840 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    37ea:	6863      	ldr	r3, [r4, #4]
    37ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    37f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37f2:	69e3      	ldr	r3, [r4, #28]
    37f4:	f013 0f04 	tst.w	r3, #4
    37f8:	d1fb      	bne.n	37f2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    37fa:	882b      	ldrh	r3, [r5, #0]
    37fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3800:	d02a      	beq.n	3858 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    3802:	886a      	ldrh	r2, [r5, #2]
    3804:	f012 0f01 	tst.w	r2, #1
    3808:	d004      	beq.n	3814 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    380a:	886a      	ldrh	r2, [r5, #2]
    380c:	b292      	uxth	r2, r2
    380e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3812:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3814:	f240 72fe 	movw	r2, #2046	; 0x7fe
    3818:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    381c:	69e3      	ldr	r3, [r4, #28]
    381e:	f013 0f04 	tst.w	r3, #4
    3822:	d1fb      	bne.n	381c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3824:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    382a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    382e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3830:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3832:	69e3      	ldr	r3, [r4, #28]
    3834:	f013 0f04 	tst.w	r3, #4
    3838:	d1fb      	bne.n	3832 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    383a:	2000      	movs	r0, #0
    383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    3840:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3844:	d0d1      	beq.n	37ea <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3846:	6863      	ldr	r3, [r4, #4]
    3848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    384c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    384e:	69e3      	ldr	r3, [r4, #28]
    3850:	f013 0f04 	tst.w	r3, #4
    3854:	d1fb      	bne.n	384e <_i2c_m_async_transfer+0xea>
    3856:	e7d0      	b.n	37fa <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3858:	8869      	ldrh	r1, [r5, #2]
    385a:	005a      	lsls	r2, r3, #1
    385c:	b2d2      	uxtb	r2, r2
    385e:	f001 0301 	and.w	r3, r1, #1
    3862:	431a      	orrs	r2, r3
    3864:	69e3      	ldr	r3, [r4, #28]
    3866:	f013 0f04 	tst.w	r3, #4
    386a:	d1fb      	bne.n	3864 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    386c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3872:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3874:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3876:	69e3      	ldr	r3, [r4, #28]
    3878:	f013 0f04 	tst.w	r3, #4
    387c:	d1fb      	bne.n	3876 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    387e:	2000      	movs	r0, #0
    3880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3884:	f06f 0003 	mvn.w	r0, #3
}
    3888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    388c:	00009c30 	.word	0x00009c30
    3890:	000021e5 	.word	0x000021e5

00003894 <_i2c_m_async_register_callback>:
	switch (type) {
    3894:	2901      	cmp	r1, #1
    3896:	d006      	beq.n	38a6 <_i2c_m_async_register_callback+0x12>
    3898:	b119      	cbz	r1, 38a2 <_i2c_m_async_register_callback+0xe>
    389a:	2902      	cmp	r1, #2
    389c:	d005      	beq.n	38aa <_i2c_m_async_register_callback+0x16>
}
    389e:	2000      	movs	r0, #0
    38a0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    38a2:	6142      	str	r2, [r0, #20]
		break;
    38a4:	e7fb      	b.n	389e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    38a6:	6182      	str	r2, [r0, #24]
		break;
    38a8:	e7f9      	b.n	389e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    38aa:	61c2      	str	r2, [r0, #28]
		break;
    38ac:	e7f7      	b.n	389e <_i2c_m_async_register_callback+0xa>
	...

000038b0 <SERCOM0_0_Handler>:
{
    38b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38b2:	4b02      	ldr	r3, [pc, #8]	; (38bc <SERCOM0_0_Handler+0xc>)
    38b4:	6818      	ldr	r0, [r3, #0]
    38b6:	4b02      	ldr	r3, [pc, #8]	; (38c0 <SERCOM0_0_Handler+0x10>)
    38b8:	4798      	blx	r3
    38ba:	bd08      	pop	{r3, pc}
    38bc:	2000089c 	.word	0x2000089c
    38c0:	00002fed 	.word	0x00002fed

000038c4 <SERCOM0_1_Handler>:
{
    38c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38c6:	4b02      	ldr	r3, [pc, #8]	; (38d0 <SERCOM0_1_Handler+0xc>)
    38c8:	6818      	ldr	r0, [r3, #0]
    38ca:	4b02      	ldr	r3, [pc, #8]	; (38d4 <SERCOM0_1_Handler+0x10>)
    38cc:	4798      	blx	r3
    38ce:	bd08      	pop	{r3, pc}
    38d0:	2000089c 	.word	0x2000089c
    38d4:	00002fed 	.word	0x00002fed

000038d8 <SERCOM0_2_Handler>:
{
    38d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38da:	4b02      	ldr	r3, [pc, #8]	; (38e4 <SERCOM0_2_Handler+0xc>)
    38dc:	6818      	ldr	r0, [r3, #0]
    38de:	4b02      	ldr	r3, [pc, #8]	; (38e8 <SERCOM0_2_Handler+0x10>)
    38e0:	4798      	blx	r3
    38e2:	bd08      	pop	{r3, pc}
    38e4:	2000089c 	.word	0x2000089c
    38e8:	00002fed 	.word	0x00002fed

000038ec <SERCOM0_3_Handler>:
{
    38ec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38ee:	4b02      	ldr	r3, [pc, #8]	; (38f8 <SERCOM0_3_Handler+0xc>)
    38f0:	6818      	ldr	r0, [r3, #0]
    38f2:	4b02      	ldr	r3, [pc, #8]	; (38fc <SERCOM0_3_Handler+0x10>)
    38f4:	4798      	blx	r3
    38f6:	bd08      	pop	{r3, pc}
    38f8:	2000089c 	.word	0x2000089c
    38fc:	00002fed 	.word	0x00002fed

00003900 <SERCOM1_0_Handler>:
{
    3900:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3902:	4b02      	ldr	r3, [pc, #8]	; (390c <SERCOM1_0_Handler+0xc>)
    3904:	6858      	ldr	r0, [r3, #4]
    3906:	4b02      	ldr	r3, [pc, #8]	; (3910 <SERCOM1_0_Handler+0x10>)
    3908:	4798      	blx	r3
    390a:	bd08      	pop	{r3, pc}
    390c:	2000089c 	.word	0x2000089c
    3910:	00002fed 	.word	0x00002fed

00003914 <SERCOM1_1_Handler>:
{
    3914:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <SERCOM1_1_Handler+0xc>)
    3918:	6858      	ldr	r0, [r3, #4]
    391a:	4b02      	ldr	r3, [pc, #8]	; (3924 <SERCOM1_1_Handler+0x10>)
    391c:	4798      	blx	r3
    391e:	bd08      	pop	{r3, pc}
    3920:	2000089c 	.word	0x2000089c
    3924:	00002fed 	.word	0x00002fed

00003928 <SERCOM1_2_Handler>:
{
    3928:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    392a:	4b02      	ldr	r3, [pc, #8]	; (3934 <SERCOM1_2_Handler+0xc>)
    392c:	6858      	ldr	r0, [r3, #4]
    392e:	4b02      	ldr	r3, [pc, #8]	; (3938 <SERCOM1_2_Handler+0x10>)
    3930:	4798      	blx	r3
    3932:	bd08      	pop	{r3, pc}
    3934:	2000089c 	.word	0x2000089c
    3938:	00002fed 	.word	0x00002fed

0000393c <SERCOM1_3_Handler>:
{
    393c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    393e:	4b02      	ldr	r3, [pc, #8]	; (3948 <SERCOM1_3_Handler+0xc>)
    3940:	6858      	ldr	r0, [r3, #4]
    3942:	4b02      	ldr	r3, [pc, #8]	; (394c <SERCOM1_3_Handler+0x10>)
    3944:	4798      	blx	r3
    3946:	bd08      	pop	{r3, pc}
    3948:	2000089c 	.word	0x2000089c
    394c:	00002fed 	.word	0x00002fed

00003950 <SERCOM2_0_Handler>:
{
    3950:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3952:	4b02      	ldr	r3, [pc, #8]	; (395c <SERCOM2_0_Handler+0xc>)
    3954:	6898      	ldr	r0, [r3, #8]
    3956:	4b02      	ldr	r3, [pc, #8]	; (3960 <SERCOM2_0_Handler+0x10>)
    3958:	4798      	blx	r3
    395a:	bd08      	pop	{r3, pc}
    395c:	2000089c 	.word	0x2000089c
    3960:	00002fed 	.word	0x00002fed

00003964 <SERCOM2_1_Handler>:
{
    3964:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3966:	4b02      	ldr	r3, [pc, #8]	; (3970 <SERCOM2_1_Handler+0xc>)
    3968:	6898      	ldr	r0, [r3, #8]
    396a:	4b02      	ldr	r3, [pc, #8]	; (3974 <SERCOM2_1_Handler+0x10>)
    396c:	4798      	blx	r3
    396e:	bd08      	pop	{r3, pc}
    3970:	2000089c 	.word	0x2000089c
    3974:	00002fed 	.word	0x00002fed

00003978 <SERCOM2_2_Handler>:
{
    3978:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    397a:	4b02      	ldr	r3, [pc, #8]	; (3984 <SERCOM2_2_Handler+0xc>)
    397c:	6898      	ldr	r0, [r3, #8]
    397e:	4b02      	ldr	r3, [pc, #8]	; (3988 <SERCOM2_2_Handler+0x10>)
    3980:	4798      	blx	r3
    3982:	bd08      	pop	{r3, pc}
    3984:	2000089c 	.word	0x2000089c
    3988:	00002fed 	.word	0x00002fed

0000398c <SERCOM2_3_Handler>:
{
    398c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    398e:	4b02      	ldr	r3, [pc, #8]	; (3998 <SERCOM2_3_Handler+0xc>)
    3990:	6898      	ldr	r0, [r3, #8]
    3992:	4b02      	ldr	r3, [pc, #8]	; (399c <SERCOM2_3_Handler+0x10>)
    3994:	4798      	blx	r3
    3996:	bd08      	pop	{r3, pc}
    3998:	2000089c 	.word	0x2000089c
    399c:	00002fed 	.word	0x00002fed

000039a0 <SERCOM4_0_Handler>:
{
    39a0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39a2:	4b02      	ldr	r3, [pc, #8]	; (39ac <SERCOM4_0_Handler+0xc>)
    39a4:	68d8      	ldr	r0, [r3, #12]
    39a6:	4b02      	ldr	r3, [pc, #8]	; (39b0 <SERCOM4_0_Handler+0x10>)
    39a8:	4798      	blx	r3
    39aa:	bd08      	pop	{r3, pc}
    39ac:	2000089c 	.word	0x2000089c
    39b0:	00002fed 	.word	0x00002fed

000039b4 <SERCOM4_1_Handler>:
{
    39b4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39b6:	4b02      	ldr	r3, [pc, #8]	; (39c0 <SERCOM4_1_Handler+0xc>)
    39b8:	68d8      	ldr	r0, [r3, #12]
    39ba:	4b02      	ldr	r3, [pc, #8]	; (39c4 <SERCOM4_1_Handler+0x10>)
    39bc:	4798      	blx	r3
    39be:	bd08      	pop	{r3, pc}
    39c0:	2000089c 	.word	0x2000089c
    39c4:	00002fed 	.word	0x00002fed

000039c8 <SERCOM4_2_Handler>:
{
    39c8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39ca:	4b02      	ldr	r3, [pc, #8]	; (39d4 <SERCOM4_2_Handler+0xc>)
    39cc:	68d8      	ldr	r0, [r3, #12]
    39ce:	4b02      	ldr	r3, [pc, #8]	; (39d8 <SERCOM4_2_Handler+0x10>)
    39d0:	4798      	blx	r3
    39d2:	bd08      	pop	{r3, pc}
    39d4:	2000089c 	.word	0x2000089c
    39d8:	00002fed 	.word	0x00002fed

000039dc <SERCOM4_3_Handler>:
{
    39dc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39de:	4b02      	ldr	r3, [pc, #8]	; (39e8 <SERCOM4_3_Handler+0xc>)
    39e0:	68d8      	ldr	r0, [r3, #12]
    39e2:	4b02      	ldr	r3, [pc, #8]	; (39ec <SERCOM4_3_Handler+0x10>)
    39e4:	4798      	blx	r3
    39e6:	bd08      	pop	{r3, pc}
    39e8:	2000089c 	.word	0x2000089c
    39ec:	00002fed 	.word	0x00002fed

000039f0 <SERCOM5_0_Handler>:
{
    39f0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    39f2:	4b02      	ldr	r3, [pc, #8]	; (39fc <SERCOM5_0_Handler+0xc>)
    39f4:	6918      	ldr	r0, [r3, #16]
    39f6:	4b02      	ldr	r3, [pc, #8]	; (3a00 <SERCOM5_0_Handler+0x10>)
    39f8:	4798      	blx	r3
    39fa:	bd08      	pop	{r3, pc}
    39fc:	2000089c 	.word	0x2000089c
    3a00:	00003389 	.word	0x00003389

00003a04 <SERCOM5_1_Handler>:
{
    3a04:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a06:	4b02      	ldr	r3, [pc, #8]	; (3a10 <SERCOM5_1_Handler+0xc>)
    3a08:	6918      	ldr	r0, [r3, #16]
    3a0a:	4b02      	ldr	r3, [pc, #8]	; (3a14 <SERCOM5_1_Handler+0x10>)
    3a0c:	4798      	blx	r3
    3a0e:	bd08      	pop	{r3, pc}
    3a10:	2000089c 	.word	0x2000089c
    3a14:	00003389 	.word	0x00003389

00003a18 <SERCOM5_2_Handler>:
{
    3a18:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <SERCOM5_2_Handler+0xc>)
    3a1c:	6918      	ldr	r0, [r3, #16]
    3a1e:	4b02      	ldr	r3, [pc, #8]	; (3a28 <SERCOM5_2_Handler+0x10>)
    3a20:	4798      	blx	r3
    3a22:	bd08      	pop	{r3, pc}
    3a24:	2000089c 	.word	0x2000089c
    3a28:	00003389 	.word	0x00003389

00003a2c <SERCOM5_3_Handler>:
{
    3a2c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a2e:	4b02      	ldr	r3, [pc, #8]	; (3a38 <SERCOM5_3_Handler+0xc>)
    3a30:	6918      	ldr	r0, [r3, #16]
    3a32:	4b02      	ldr	r3, [pc, #8]	; (3a3c <SERCOM5_3_Handler+0x10>)
    3a34:	4798      	blx	r3
    3a36:	bd08      	pop	{r3, pc}
    3a38:	2000089c 	.word	0x2000089c
    3a3c:	00003389 	.word	0x00003389

00003a40 <SERCOM6_0_Handler>:
{
    3a40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a42:	4b02      	ldr	r3, [pc, #8]	; (3a4c <SERCOM6_0_Handler+0xc>)
    3a44:	6958      	ldr	r0, [r3, #20]
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SERCOM6_0_Handler+0x10>)
    3a48:	4798      	blx	r3
    3a4a:	bd08      	pop	{r3, pc}
    3a4c:	2000089c 	.word	0x2000089c
    3a50:	00002fed 	.word	0x00002fed

00003a54 <SERCOM6_1_Handler>:
{
    3a54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a56:	4b02      	ldr	r3, [pc, #8]	; (3a60 <SERCOM6_1_Handler+0xc>)
    3a58:	6958      	ldr	r0, [r3, #20]
    3a5a:	4b02      	ldr	r3, [pc, #8]	; (3a64 <SERCOM6_1_Handler+0x10>)
    3a5c:	4798      	blx	r3
    3a5e:	bd08      	pop	{r3, pc}
    3a60:	2000089c 	.word	0x2000089c
    3a64:	00002fed 	.word	0x00002fed

00003a68 <SERCOM6_2_Handler>:
{
    3a68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a6a:	4b02      	ldr	r3, [pc, #8]	; (3a74 <SERCOM6_2_Handler+0xc>)
    3a6c:	6958      	ldr	r0, [r3, #20]
    3a6e:	4b02      	ldr	r3, [pc, #8]	; (3a78 <SERCOM6_2_Handler+0x10>)
    3a70:	4798      	blx	r3
    3a72:	bd08      	pop	{r3, pc}
    3a74:	2000089c 	.word	0x2000089c
    3a78:	00002fed 	.word	0x00002fed

00003a7c <SERCOM6_3_Handler>:
{
    3a7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a7e:	4b02      	ldr	r3, [pc, #8]	; (3a88 <SERCOM6_3_Handler+0xc>)
    3a80:	6958      	ldr	r0, [r3, #20]
    3a82:	4b02      	ldr	r3, [pc, #8]	; (3a8c <SERCOM6_3_Handler+0x10>)
    3a84:	4798      	blx	r3
    3a86:	bd08      	pop	{r3, pc}
    3a88:	2000089c 	.word	0x2000089c
    3a8c:	00002fed 	.word	0x00002fed

00003a90 <_spi_m_sync_init>:
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	4606      	mov	r6, r0
    3a94:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a96:	4608      	mov	r0, r1
    3a98:	4b5d      	ldr	r3, [pc, #372]	; (3c10 <_spi_m_sync_init+0x180>)
    3a9a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3a9c:	2803      	cmp	r0, #3
    3a9e:	d00c      	beq.n	3aba <_spi_m_sync_init+0x2a>
    3aa0:	2807      	cmp	r0, #7
    3aa2:	bf08      	it	eq
    3aa4:	2301      	moveq	r3, #1
    3aa6:	d009      	beq.n	3abc <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    3aa8:	2e00      	cmp	r6, #0
    3aaa:	f000 809f 	beq.w	3bec <_spi_m_sync_init+0x15c>
    3aae:	2c00      	cmp	r4, #0
    3ab0:	f040 80a5 	bne.w	3bfe <_spi_m_sync_init+0x16e>
	return NULL;
    3ab4:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3ab6:	2000      	movs	r0, #0
    3ab8:	e009      	b.n	3ace <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3aba:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3abc:	4d55      	ldr	r5, [pc, #340]	; (3c14 <_spi_m_sync_init+0x184>)
    3abe:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3ac2:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3ac4:	2e00      	cmp	r6, #0
    3ac6:	d0f6      	beq.n	3ab6 <_spi_m_sync_init+0x26>
    3ac8:	2001      	movs	r0, #1
    3aca:	2c00      	cmp	r4, #0
    3acc:	d0f3      	beq.n	3ab6 <_spi_m_sync_init+0x26>
    3ace:	f640 2254 	movw	r2, #2644	; 0xa54
    3ad2:	4951      	ldr	r1, [pc, #324]	; (3c18 <_spi_m_sync_init+0x188>)
    3ad4:	4b51      	ldr	r3, [pc, #324]	; (3c1c <_spi_m_sync_init+0x18c>)
    3ad6:	4798      	blx	r3
	if (regs == NULL) {
    3ad8:	2d00      	cmp	r5, #0
    3ada:	f000 8084 	beq.w	3be6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3ade:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3ae0:	f013 0f01 	tst.w	r3, #1
    3ae4:	d11d      	bne.n	3b22 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3ae6:	682b      	ldr	r3, [r5, #0]
    3ae8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3aec:	69e3      	ldr	r3, [r4, #28]
    3aee:	f013 0f03 	tst.w	r3, #3
    3af2:	d1fb      	bne.n	3aec <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3af4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3af6:	f013 0f02 	tst.w	r3, #2
    3afa:	d00b      	beq.n	3b14 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3afc:	6823      	ldr	r3, [r4, #0]
    3afe:	f023 0302 	bic.w	r3, r3, #2
    3b02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b04:	69e3      	ldr	r3, [r4, #28]
    3b06:	f013 0f03 	tst.w	r3, #3
    3b0a:	d1fb      	bne.n	3b04 <_spi_m_sync_init+0x74>
    3b0c:	69e3      	ldr	r3, [r4, #28]
    3b0e:	f013 0f02 	tst.w	r3, #2
    3b12:	d1fb      	bne.n	3b0c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b14:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b18:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b1a:	69e3      	ldr	r3, [r4, #28]
    3b1c:	f013 0f03 	tst.w	r3, #3
    3b20:	d1fb      	bne.n	3b1a <_spi_m_sync_init+0x8a>
    3b22:	69e3      	ldr	r3, [r4, #28]
    3b24:	f013 0f01 	tst.w	r3, #1
    3b28:	d1fb      	bne.n	3b22 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    3b2a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b2c:	682b      	ldr	r3, [r5, #0]
    3b2e:	f003 031c 	and.w	r3, r3, #28
    3b32:	2b08      	cmp	r3, #8
    3b34:	d02e      	beq.n	3b94 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    3b36:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3b3a:	4937      	ldr	r1, [pc, #220]	; (3c18 <_spi_m_sync_init+0x188>)
    3b3c:	1c20      	adds	r0, r4, #0
    3b3e:	bf18      	it	ne
    3b40:	2001      	movne	r0, #1
    3b42:	4b36      	ldr	r3, [pc, #216]	; (3c1c <_spi_m_sync_init+0x18c>)
    3b44:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b46:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3b48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3b4c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b50:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b52:	69e3      	ldr	r3, [r4, #28]
    3b54:	f013 0f03 	tst.w	r3, #3
    3b58:	d1fb      	bne.n	3b52 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    3b5a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3b5c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3b60:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b6a:	69e3      	ldr	r3, [r4, #28]
    3b6c:	f013 0f17 	tst.w	r3, #23
    3b70:	d1fb      	bne.n	3b6a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3b72:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3b74:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3b76:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3b78:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b7c:	686b      	ldr	r3, [r5, #4]
    3b7e:	f003 0307 	and.w	r3, r3, #7
    3b82:	2b00      	cmp	r3, #0
    3b84:	bf0c      	ite	eq
    3b86:	2301      	moveq	r3, #1
    3b88:	2302      	movne	r3, #2
    3b8a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    3b8c:	89eb      	ldrh	r3, [r5, #14]
    3b8e:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    3b90:	2000      	movs	r0, #0
    3b92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    3b94:	f640 1284 	movw	r2, #2436	; 0x984
    3b98:	491f      	ldr	r1, [pc, #124]	; (3c18 <_spi_m_sync_init+0x188>)
    3b9a:	1c20      	adds	r0, r4, #0
    3b9c:	bf18      	it	ne
    3b9e:	2001      	movne	r0, #1
    3ba0:	4b1e      	ldr	r3, [pc, #120]	; (3c1c <_spi_m_sync_init+0x18c>)
    3ba2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3ba4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3ba6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3baa:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3bae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3bb0:	69e3      	ldr	r3, [r4, #28]
    3bb2:	f013 0f03 	tst.w	r3, #3
    3bb6:	d1fb      	bne.n	3bb0 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3bb8:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3bba:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3bbe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3bc6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3bca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3bcc:	69e3      	ldr	r3, [r4, #28]
    3bce:	f013 0f17 	tst.w	r3, #23
    3bd2:	d1fb      	bne.n	3bcc <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3bd4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3bd6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3bd8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3bda:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3bde:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3be0:	2b00      	cmp	r3, #0
    3be2:	d1fc      	bne.n	3bde <_spi_m_sync_init+0x14e>
    3be4:	e7ca      	b.n	3b7c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    3be6:	f06f 000c 	mvn.w	r0, #12
    3bea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3bec:	f640 2254 	movw	r2, #2644	; 0xa54
    3bf0:	4909      	ldr	r1, [pc, #36]	; (3c18 <_spi_m_sync_init+0x188>)
    3bf2:	2000      	movs	r0, #0
    3bf4:	4b09      	ldr	r3, [pc, #36]	; (3c1c <_spi_m_sync_init+0x18c>)
    3bf6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3bf8:	f06f 000c 	mvn.w	r0, #12
    3bfc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3bfe:	f640 2254 	movw	r2, #2644	; 0xa54
    3c02:	4905      	ldr	r1, [pc, #20]	; (3c18 <_spi_m_sync_init+0x188>)
    3c04:	2001      	movs	r0, #1
    3c06:	4b05      	ldr	r3, [pc, #20]	; (3c1c <_spi_m_sync_init+0x18c>)
    3c08:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3c0a:	f06f 000c 	mvn.w	r0, #12
    3c0e:	bd70      	pop	{r4, r5, r6, pc}
    3c10:	00002fa9 	.word	0x00002fa9
    3c14:	00009c0c 	.word	0x00009c0c
    3c18:	00009c30 	.word	0x00009c30
    3c1c:	000021e5 	.word	0x000021e5

00003c20 <_spi_m_sync_trans>:
{
    3c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c24:	4681      	mov	r9, r0
    3c26:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3c28:	6804      	ldr	r4, [r0, #0]
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3c2a:	f8d1 8000 	ldr.w	r8, [r1]
    3c2e:	684d      	ldr	r5, [r1, #4]
    3c30:	7907      	ldrb	r7, [r0, #4]
	ASSERT(dev && hw);
    3c32:	b1a8      	cbz	r0, 3c60 <_spi_m_sync_trans+0x40>
    3c34:	1c20      	adds	r0, r4, #0
    3c36:	bf18      	it	ne
    3c38:	2001      	movne	r0, #1
    3c3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    3c3e:	492e      	ldr	r1, [pc, #184]	; (3cf8 <_spi_m_sync_trans+0xd8>)
    3c40:	4b2e      	ldr	r3, [pc, #184]	; (3cfc <_spi_m_sync_trans+0xdc>)
    3c42:	4798      	blx	r3
    3c44:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(
    3c46:	f013 0f07 	tst.w	r3, #7
    3c4a:	d134      	bne.n	3cb6 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c4c:	69e0      	ldr	r0, [r4, #28]
    3c4e:	f010 0003 	ands.w	r0, r0, #3
    3c52:	d1fb      	bne.n	3c4c <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3c54:	6823      	ldr	r3, [r4, #0]
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3c56:	f013 0f02 	tst.w	r3, #2
    3c5a:	d030      	beq.n	3cbe <_spi_m_sync_trans+0x9e>
    3c5c:	4602      	mov	r2, r0
    3c5e:	e008      	b.n	3c72 <_spi_m_sync_trans+0x52>
    3c60:	2000      	movs	r0, #0
    3c62:	e7ea      	b.n	3c3a <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    3c64:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3c66:	f013 0f80 	tst.w	r3, #128	; 0x80
    3c6a:	d112      	bne.n	3c92 <_spi_m_sync_trans+0x72>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3c6c:	68b3      	ldr	r3, [r6, #8]
    3c6e:	4283      	cmp	r3, r0
    3c70:	d91e      	bls.n	3cb0 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c72:	7e23      	ldrb	r3, [r4, #24]
    3c74:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c76:	f013 0f04 	tst.w	r3, #4
    3c7a:	d024      	beq.n	3cc6 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3c7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3c7e:	2d00      	cmp	r5, #0
    3c80:	d0f0      	beq.n	3c64 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c82:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    3c84:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    3c86:	bf91      	iteee	ls
    3c88:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c8a:	0a09      	lsrhi	r1, r1, #8
    3c8c:	7069      	strbhi	r1, [r5, #1]
    3c8e:	3502      	addhi	r5, #2
    3c90:	e7e8      	b.n	3c64 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3c96:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3c98:	2380      	movs	r3, #128	; 0x80
    3c9a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3c9c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3ca0:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3ca2:	f013 0f03 	tst.w	r3, #3
    3ca6:	d0fb      	beq.n	3ca0 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ca8:	2303      	movs	r3, #3
    3caa:	7623      	strb	r3, [r4, #24]
	return rc;
    3cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3cb0:	4293      	cmp	r3, r2
    3cb2:	d8de      	bhi.n	3c72 <_spi_m_sync_trans+0x52>
    3cb4:	e7f4      	b.n	3ca0 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3cb6:	f06f 0003 	mvn.w	r0, #3
    3cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    3cbe:	f06f 0013 	mvn.w	r0, #19
    3cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3cc6:	4290      	cmp	r0, r2
    3cc8:	d8cd      	bhi.n	3c66 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3cca:	f013 0f01 	tst.w	r3, #1
    3cce:	d0ca      	beq.n	3c66 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3cd0:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3cd4:	f1b8 0f00 	cmp.w	r8, #0
    3cd8:	d00b      	beq.n	3cf2 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    3cda:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    3cde:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3ce0:	bf91      	iteee	ls
    3ce2:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3ce6:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    3cea:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    3cee:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3cf2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3cf4:	62a1      	str	r1, [r4, #40]	; 0x28
    3cf6:	e7b6      	b.n	3c66 <_spi_m_sync_trans+0x46>
    3cf8:	00009c30 	.word	0x00009c30
    3cfc:	000021e5 	.word	0x000021e5

00003d00 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d04:	4605      	mov	r5, r0
    3d06:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3d08:	4608      	mov	r0, r1
    3d0a:	4b52      	ldr	r3, [pc, #328]	; (3e54 <_spi_m_dma_init+0x154>)
    3d0c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3d0e:	2803      	cmp	r0, #3
    3d10:	d00c      	beq.n	3d2c <_spi_m_dma_init+0x2c>
    3d12:	2807      	cmp	r0, #7
    3d14:	bf08      	it	eq
    3d16:	2301      	moveq	r3, #1
    3d18:	d009      	beq.n	3d2e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3d1a:	2d00      	cmp	r5, #0
    3d1c:	f000 8086 	beq.w	3e2c <_spi_m_dma_init+0x12c>
    3d20:	2c00      	cmp	r4, #0
    3d22:	f040 808d 	bne.w	3e40 <_spi_m_dma_init+0x140>
	return NULL;
    3d26:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    3d28:	2000      	movs	r0, #0
    3d2a:	e009      	b.n	3d40 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    3d2c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3d2e:	4e4a      	ldr	r6, [pc, #296]	; (3e58 <_spi_m_dma_init+0x158>)
    3d30:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    3d34:	441e      	add	r6, r3
	ASSERT(dev && hw);
    3d36:	2d00      	cmp	r5, #0
    3d38:	d0f6      	beq.n	3d28 <_spi_m_dma_init+0x28>
    3d3a:	2001      	movs	r0, #1
    3d3c:	2c00      	cmp	r4, #0
    3d3e:	d0f3      	beq.n	3d28 <_spi_m_dma_init+0x28>
    3d40:	f640 5286 	movw	r2, #3462	; 0xd86
    3d44:	4945      	ldr	r1, [pc, #276]	; (3e5c <_spi_m_dma_init+0x15c>)
    3d46:	4b46      	ldr	r3, [pc, #280]	; (3e60 <_spi_m_dma_init+0x160>)
    3d48:	4798      	blx	r3

	if (regs == NULL) {
    3d4a:	2e00      	cmp	r6, #0
    3d4c:	d06a      	beq.n	3e24 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d4e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3d50:	f013 0f01 	tst.w	r3, #1
    3d54:	d11d      	bne.n	3d92 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3d56:	6833      	ldr	r3, [r6, #0]
    3d58:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d5c:	69e3      	ldr	r3, [r4, #28]
    3d5e:	f013 0f03 	tst.w	r3, #3
    3d62:	d1fb      	bne.n	3d5c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3d64:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3d66:	f013 0f02 	tst.w	r3, #2
    3d6a:	d00b      	beq.n	3d84 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3d6c:	6823      	ldr	r3, [r4, #0]
    3d6e:	f023 0302 	bic.w	r3, r3, #2
    3d72:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d74:	69e3      	ldr	r3, [r4, #28]
    3d76:	f013 0f03 	tst.w	r3, #3
    3d7a:	d1fb      	bne.n	3d74 <_spi_m_dma_init+0x74>
    3d7c:	69e3      	ldr	r3, [r4, #28]
    3d7e:	f013 0f02 	tst.w	r3, #2
    3d82:	d1fb      	bne.n	3d7c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3d84:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3d88:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d8a:	69e3      	ldr	r3, [r4, #28]
    3d8c:	f013 0f03 	tst.w	r3, #3
    3d90:	d1fb      	bne.n	3d8a <_spi_m_dma_init+0x8a>
    3d92:	69e3      	ldr	r3, [r4, #28]
    3d94:	f013 0f01 	tst.w	r3, #1
    3d98:	d1fb      	bne.n	3d92 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3d9a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3d9c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3da0:	492e      	ldr	r1, [pc, #184]	; (3e5c <_spi_m_dma_init+0x15c>)
    3da2:	1c20      	adds	r0, r4, #0
    3da4:	bf18      	it	ne
    3da6:	2001      	movne	r0, #1
    3da8:	4b2d      	ldr	r3, [pc, #180]	; (3e60 <_spi_m_dma_init+0x160>)
    3daa:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3dac:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    3dae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3db2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3db6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3db8:	69e3      	ldr	r3, [r4, #28]
    3dba:	f013 0f03 	tst.w	r3, #3
    3dbe:	d1fb      	bne.n	3db8 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    3dc0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3dc2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3dc6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3dce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3dd0:	69e3      	ldr	r3, [r4, #28]
    3dd2:	f013 0f17 	tst.w	r3, #23
    3dd6:	d1fb      	bne.n	3dd0 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3dd8:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3dda:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3ddc:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3dde:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    3de2:	f105 0818 	add.w	r8, r5, #24
    3de6:	4620      	mov	r0, r4
    3de8:	4b1e      	ldr	r3, [pc, #120]	; (3e64 <_spi_m_dma_init+0x164>)
    3dea:	4798      	blx	r3
    3dec:	4601      	mov	r1, r0
    3dee:	4640      	mov	r0, r8
    3df0:	4f1d      	ldr	r7, [pc, #116]	; (3e68 <_spi_m_dma_init+0x168>)
    3df2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3df4:	69ab      	ldr	r3, [r5, #24]
    3df6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    3df8:	69ab      	ldr	r3, [r5, #24]
    3dfa:	4a1c      	ldr	r2, [pc, #112]	; (3e6c <_spi_m_dma_init+0x16c>)
    3dfc:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3dfe:	69ab      	ldr	r3, [r5, #24]
    3e00:	4e1b      	ldr	r6, [pc, #108]	; (3e70 <_spi_m_dma_init+0x170>)
    3e02:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    3e04:	4620      	mov	r0, r4
    3e06:	4b1b      	ldr	r3, [pc, #108]	; (3e74 <_spi_m_dma_init+0x174>)
    3e08:	4798      	blx	r3
    3e0a:	4601      	mov	r1, r0
    3e0c:	4640      	mov	r0, r8
    3e0e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3e10:	69ab      	ldr	r3, [r5, #24]
    3e12:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    3e14:	69ab      	ldr	r3, [r5, #24]
    3e16:	4a18      	ldr	r2, [pc, #96]	; (3e78 <_spi_m_dma_init+0x178>)
    3e18:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3e1a:	69ab      	ldr	r3, [r5, #24]
    3e1c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    3e1e:	2000      	movs	r0, #0
    3e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    3e24:	f06f 000c 	mvn.w	r0, #12
    3e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e2c:	f640 5286 	movw	r2, #3462	; 0xd86
    3e30:	490a      	ldr	r1, [pc, #40]	; (3e5c <_spi_m_dma_init+0x15c>)
    3e32:	2000      	movs	r0, #0
    3e34:	4b0a      	ldr	r3, [pc, #40]	; (3e60 <_spi_m_dma_init+0x160>)
    3e36:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e38:	f06f 000c 	mvn.w	r0, #12
    3e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e40:	f640 5286 	movw	r2, #3462	; 0xd86
    3e44:	4905      	ldr	r1, [pc, #20]	; (3e5c <_spi_m_dma_init+0x15c>)
    3e46:	2001      	movs	r0, #1
    3e48:	4b05      	ldr	r3, [pc, #20]	; (3e60 <_spi_m_dma_init+0x160>)
    3e4a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e4c:	f06f 000c 	mvn.w	r0, #12
    3e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e54:	00002fa9 	.word	0x00002fa9
    3e58:	00009c0c 	.word	0x00009c0c
    3e5c:	00009c30 	.word	0x00009c30
    3e60:	000021e5 	.word	0x000021e5
    3e64:	00003109 	.word	0x00003109
    3e68:	00002a69 	.word	0x00002a69
    3e6c:	0000311d 	.word	0x0000311d
    3e70:	00003135 	.word	0x00003135
    3e74:	000030f5 	.word	0x000030f5
    3e78:	00003129 	.word	0x00003129

00003e7c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    3e7c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3e7e:	4604      	mov	r4, r0
    3e80:	b160      	cbz	r0, 3e9c <_spi_m_dma_enable+0x20>
    3e82:	6800      	ldr	r0, [r0, #0]
    3e84:	3000      	adds	r0, #0
    3e86:	bf18      	it	ne
    3e88:	2001      	movne	r0, #1
    3e8a:	f640 52af 	movw	r2, #3503	; 0xdaf
    3e8e:	4904      	ldr	r1, [pc, #16]	; (3ea0 <_spi_m_dma_enable+0x24>)
    3e90:	4b04      	ldr	r3, [pc, #16]	; (3ea4 <_spi_m_dma_enable+0x28>)
    3e92:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3e94:	6820      	ldr	r0, [r4, #0]
    3e96:	4b04      	ldr	r3, [pc, #16]	; (3ea8 <_spi_m_dma_enable+0x2c>)
    3e98:	4798      	blx	r3
}
    3e9a:	bd10      	pop	{r4, pc}
    3e9c:	2000      	movs	r0, #0
    3e9e:	e7f4      	b.n	3e8a <_spi_m_dma_enable+0xe>
    3ea0:	00009c30 	.word	0x00009c30
    3ea4:	000021e5 	.word	0x000021e5
    3ea8:	000030d1 	.word	0x000030d1

00003eac <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    3eac:	b570      	push	{r4, r5, r6, lr}
    3eae:	4605      	mov	r5, r0
    3eb0:	4614      	mov	r4, r2
	switch (type) {
    3eb2:	2901      	cmp	r1, #1
    3eb4:	d00e      	beq.n	3ed4 <_spi_m_dma_register_callback+0x28>
    3eb6:	b111      	cbz	r1, 3ebe <_spi_m_dma_register_callback+0x12>
    3eb8:	2902      	cmp	r1, #2
    3eba:	d016      	beq.n	3eea <_spi_m_dma_register_callback+0x3e>
    3ebc:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    3ebe:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3ec0:	6800      	ldr	r0, [r0, #0]
    3ec2:	4b13      	ldr	r3, [pc, #76]	; (3f10 <_spi_m_dma_register_callback+0x64>)
    3ec4:	4798      	blx	r3
    3ec6:	1c22      	adds	r2, r4, #0
    3ec8:	bf18      	it	ne
    3eca:	2201      	movne	r2, #1
    3ecc:	2100      	movs	r1, #0
    3ece:	4b11      	ldr	r3, [pc, #68]	; (3f14 <_spi_m_dma_register_callback+0x68>)
    3ed0:	4798      	blx	r3
		break;
    3ed2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    3ed4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3ed6:	6800      	ldr	r0, [r0, #0]
    3ed8:	4b0f      	ldr	r3, [pc, #60]	; (3f18 <_spi_m_dma_register_callback+0x6c>)
    3eda:	4798      	blx	r3
    3edc:	1c22      	adds	r2, r4, #0
    3ede:	bf18      	it	ne
    3ee0:	2201      	movne	r2, #1
    3ee2:	2100      	movs	r1, #0
    3ee4:	4b0b      	ldr	r3, [pc, #44]	; (3f14 <_spi_m_dma_register_callback+0x68>)
    3ee6:	4798      	blx	r3
		break;
    3ee8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    3eea:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3eec:	6800      	ldr	r0, [r0, #0]
    3eee:	4b0a      	ldr	r3, [pc, #40]	; (3f18 <_spi_m_dma_register_callback+0x6c>)
    3ef0:	4798      	blx	r3
    3ef2:	3400      	adds	r4, #0
    3ef4:	bf18      	it	ne
    3ef6:	2401      	movne	r4, #1
    3ef8:	4622      	mov	r2, r4
    3efa:	2101      	movs	r1, #1
    3efc:	4e05      	ldr	r6, [pc, #20]	; (3f14 <_spi_m_dma_register_callback+0x68>)
    3efe:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3f00:	6828      	ldr	r0, [r5, #0]
    3f02:	4b03      	ldr	r3, [pc, #12]	; (3f10 <_spi_m_dma_register_callback+0x64>)
    3f04:	4798      	blx	r3
    3f06:	4622      	mov	r2, r4
    3f08:	2101      	movs	r1, #1
    3f0a:	47b0      	blx	r6
    3f0c:	bd70      	pop	{r4, r5, r6, pc}
    3f0e:	bf00      	nop
    3f10:	000030f5 	.word	0x000030f5
    3f14:	00002941 	.word	0x00002941
    3f18:	00003109 	.word	0x00003109

00003f1c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    3f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f20:	4605      	mov	r5, r0
    3f22:	4689      	mov	r9, r1
    3f24:	4617      	mov	r7, r2
    3f26:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    3f28:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3f2c:	4658      	mov	r0, fp
    3f2e:	4b46      	ldr	r3, [pc, #280]	; (4048 <_spi_m_dma_transfer+0x12c>)
    3f30:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3f32:	2803      	cmp	r0, #3
    3f34:	d053      	beq.n	3fde <_spi_m_dma_transfer+0xc2>
    3f36:	2807      	cmp	r0, #7
    3f38:	bf08      	it	eq
    3f3a:	2201      	moveq	r2, #1
    3f3c:	d050      	beq.n	3fe0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    3f3e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    3f42:	4658      	mov	r0, fp
    3f44:	4b41      	ldr	r3, [pc, #260]	; (404c <_spi_m_dma_transfer+0x130>)
    3f46:	4798      	blx	r3
    3f48:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    3f4a:	4658      	mov	r0, fp
    3f4c:	4b40      	ldr	r3, [pc, #256]	; (4050 <_spi_m_dma_transfer+0x134>)
    3f4e:	4798      	blx	r3
    3f50:	4604      	mov	r4, r0

	if (rxbuf) {
    3f52:	2f00      	cmp	r7, #0
    3f54:	d04b      	beq.n	3fee <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    3f56:	2d00      	cmp	r5, #0
    3f58:	d047      	beq.n	3fea <_spi_m_dma_transfer+0xce>
    3f5a:	f11b 0000 	adds.w	r0, fp, #0
    3f5e:	bf18      	it	ne
    3f60:	2001      	movne	r0, #1
    3f62:	f640 42f9 	movw	r2, #3321	; 0xcf9
    3f66:	493b      	ldr	r1, [pc, #236]	; (4054 <_spi_m_dma_transfer+0x138>)
    3f68:	4b3b      	ldr	r3, [pc, #236]	; (4058 <_spi_m_dma_transfer+0x13c>)
    3f6a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    3f6c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f6e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3f70:	f013 0f04 	tst.w	r3, #4
    3f74:	d107      	bne.n	3f86 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    3f76:	6853      	ldr	r3, [r2, #4]
    3f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f7c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f7e:	69d3      	ldr	r3, [r2, #28]
    3f80:	f013 0f17 	tst.w	r3, #23
    3f84:	d1fb      	bne.n	3f7e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3f86:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    3f88:	3128      	adds	r1, #40	; 0x28
    3f8a:	4630      	mov	r0, r6
    3f8c:	4b33      	ldr	r3, [pc, #204]	; (405c <_spi_m_dma_transfer+0x140>)
    3f8e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3f90:	4639      	mov	r1, r7
    3f92:	4630      	mov	r0, r6
    3f94:	4b32      	ldr	r3, [pc, #200]	; (4060 <_spi_m_dma_transfer+0x144>)
    3f96:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    3f98:	4641      	mov	r1, r8
    3f9a:	4630      	mov	r0, r6
    3f9c:	4b31      	ldr	r3, [pc, #196]	; (4064 <_spi_m_dma_transfer+0x148>)
    3f9e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3fa0:	2100      	movs	r1, #0
    3fa2:	4630      	mov	r0, r6
    3fa4:	4b30      	ldr	r3, [pc, #192]	; (4068 <_spi_m_dma_transfer+0x14c>)
    3fa6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    3fa8:	f1b9 0f00 	cmp.w	r9, #0
    3fac:	d039      	beq.n	4022 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    3fae:	4649      	mov	r1, r9
    3fb0:	4620      	mov	r0, r4
    3fb2:	4b2a      	ldr	r3, [pc, #168]	; (405c <_spi_m_dma_transfer+0x140>)
    3fb4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3fb6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3fb8:	3128      	adds	r1, #40	; 0x28
    3fba:	4620      	mov	r0, r4
    3fbc:	4b28      	ldr	r3, [pc, #160]	; (4060 <_spi_m_dma_transfer+0x144>)
    3fbe:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    3fc0:	2101      	movs	r1, #1
    3fc2:	4620      	mov	r0, r4
    3fc4:	4b29      	ldr	r3, [pc, #164]	; (406c <_spi_m_dma_transfer+0x150>)
    3fc6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3fc8:	4641      	mov	r1, r8
    3fca:	4620      	mov	r0, r4
    3fcc:	4b25      	ldr	r3, [pc, #148]	; (4064 <_spi_m_dma_transfer+0x148>)
    3fce:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    3fd0:	2100      	movs	r1, #0
    3fd2:	4620      	mov	r0, r4
    3fd4:	4b24      	ldr	r3, [pc, #144]	; (4068 <_spi_m_dma_transfer+0x14c>)
    3fd6:	4798      	blx	r3

	return ERR_NONE;
}
    3fd8:	2000      	movs	r0, #0
    3fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    3fde:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    3fe0:	4b23      	ldr	r3, [pc, #140]	; (4070 <_spi_m_dma_transfer+0x154>)
    3fe2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    3fe6:	4492      	add	sl, r2
    3fe8:	e7ab      	b.n	3f42 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    3fea:	2000      	movs	r0, #0
    3fec:	e7b9      	b.n	3f62 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    3fee:	b1b5      	cbz	r5, 401e <_spi_m_dma_transfer+0x102>
    3ff0:	f11b 0000 	adds.w	r0, fp, #0
    3ff4:	bf18      	it	ne
    3ff6:	2001      	movne	r0, #1
    3ff8:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    3ffc:	4915      	ldr	r1, [pc, #84]	; (4054 <_spi_m_dma_transfer+0x138>)
    3ffe:	4b16      	ldr	r3, [pc, #88]	; (4058 <_spi_m_dma_transfer+0x13c>)
    4000:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    4002:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4004:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4006:	f013 0f04 	tst.w	r3, #4
    400a:	d1cd      	bne.n	3fa8 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    400c:	6853      	ldr	r3, [r2, #4]
    400e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4012:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4014:	69d3      	ldr	r3, [r2, #28]
    4016:	f013 0f17 	tst.w	r3, #23
    401a:	d1fb      	bne.n	4014 <_spi_m_dma_transfer+0xf8>
    401c:	e7c4      	b.n	3fa8 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    401e:	2000      	movs	r0, #0
    4020:	e7ea      	b.n	3ff8 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    4022:	f10a 010e 	add.w	r1, sl, #14
    4026:	4620      	mov	r0, r4
    4028:	4b0c      	ldr	r3, [pc, #48]	; (405c <_spi_m_dma_transfer+0x140>)
    402a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    402c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    402e:	3128      	adds	r1, #40	; 0x28
    4030:	4620      	mov	r0, r4
    4032:	4b0b      	ldr	r3, [pc, #44]	; (4060 <_spi_m_dma_transfer+0x144>)
    4034:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4036:	2100      	movs	r1, #0
    4038:	4620      	mov	r0, r4
    403a:	4b0c      	ldr	r3, [pc, #48]	; (406c <_spi_m_dma_transfer+0x150>)
    403c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    403e:	4641      	mov	r1, r8
    4040:	4620      	mov	r0, r4
    4042:	4b08      	ldr	r3, [pc, #32]	; (4064 <_spi_m_dma_transfer+0x148>)
    4044:	4798      	blx	r3
    4046:	e7c3      	b.n	3fd0 <_spi_m_dma_transfer+0xb4>
    4048:	00002fa9 	.word	0x00002fa9
    404c:	00003109 	.word	0x00003109
    4050:	000030f5 	.word	0x000030f5
    4054:	00009c30 	.word	0x00009c30
    4058:	000021e5 	.word	0x000021e5
    405c:	000029a5 	.word	0x000029a5
    4060:	00002995 	.word	0x00002995
    4064:	000029d1 	.word	0x000029d1
    4068:	00002a29 	.word	0x00002a29
    406c:	000029b5 	.word	0x000029b5
    4070:	00009c0c 	.word	0x00009c0c

00004074 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4074:	4b03      	ldr	r3, [pc, #12]	; (4084 <_delay_init+0x10>)
    4076:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    407a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    407c:	2205      	movs	r2, #5
    407e:	601a      	str	r2, [r3, #0]
    4080:	4770      	bx	lr
    4082:	bf00      	nop
    4084:	e000e010 	.word	0xe000e010

00004088 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4088:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    408a:	b303      	cbz	r3, 40ce <_delay_cycles+0x46>
{
    408c:	b430      	push	{r4, r5}
    408e:	1e5d      	subs	r5, r3, #1
    4090:	b2ed      	uxtb	r5, r5
	while (n--) {
    4092:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    4094:	4a12      	ldr	r2, [pc, #72]	; (40e0 <_delay_cycles+0x58>)
    4096:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    409a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    409c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    409e:	6813      	ldr	r3, [r2, #0]
    40a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40a4:	d0fb      	beq.n	409e <_delay_cycles+0x16>
	while (n--) {
    40a6:	3801      	subs	r0, #1
    40a8:	b2c0      	uxtb	r0, r0
    40aa:	28ff      	cmp	r0, #255	; 0xff
    40ac:	d1f5      	bne.n	409a <_delay_cycles+0x12>
    40ae:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    40b2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    40b6:	3101      	adds	r1, #1
    40b8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    40ba:	4b09      	ldr	r3, [pc, #36]	; (40e0 <_delay_cycles+0x58>)
    40bc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40be:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40c0:	461a      	mov	r2, r3
    40c2:	6813      	ldr	r3, [r2, #0]
    40c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40c8:	d0fb      	beq.n	40c2 <_delay_cycles+0x3a>
		;
}
    40ca:	bc30      	pop	{r4, r5}
    40cc:	4770      	bx	lr
	SysTick->LOAD = buf;
    40ce:	4b04      	ldr	r3, [pc, #16]	; (40e0 <_delay_cycles+0x58>)
    40d0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40d2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40d4:	461a      	mov	r2, r3
    40d6:	6813      	ldr	r3, [r2, #0]
    40d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40dc:	d0fb      	beq.n	40d6 <_delay_cycles+0x4e>
    40de:	4770      	bx	lr
    40e0:	e000e010 	.word	0xe000e010

000040e4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    40e4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    40e6:	6813      	ldr	r3, [r2, #0]
    40e8:	f043 0302 	orr.w	r3, r3, #2
    40ec:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40ee:	6913      	ldr	r3, [r2, #16]
    40f0:	f013 0f03 	tst.w	r3, #3
    40f4:	d1fb      	bne.n	40ee <_tc_timer_start+0xa>
}
    40f6:	4770      	bx	lr

000040f8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    40f8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    40fa:	6813      	ldr	r3, [r2, #0]
    40fc:	f023 0302 	bic.w	r3, r3, #2
    4100:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4102:	6913      	ldr	r3, [r2, #16]
    4104:	f013 0f03 	tst.w	r3, #3
    4108:	d1fb      	bne.n	4102 <_tc_timer_stop+0xa>
}
    410a:	4770      	bx	lr

0000410c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    410c:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    410e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4110:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4114:	2a02      	cmp	r2, #2
    4116:	d00a      	beq.n	412e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4118:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    411a:	f012 0f0c 	tst.w	r2, #12
    411e:	d10c      	bne.n	413a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    4120:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4122:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4124:	691a      	ldr	r2, [r3, #16]
    4126:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    412a:	d1fb      	bne.n	4124 <_tc_timer_set_period+0x18>
    412c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    412e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4130:	691a      	ldr	r2, [r3, #16]
    4132:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4136:	d1fb      	bne.n	4130 <_tc_timer_set_period+0x24>
    4138:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    413a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    413c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4140:	2a01      	cmp	r2, #1
    4142:	d000      	beq.n	4146 <_tc_timer_set_period+0x3a>
    4144:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    4146:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    4148:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    414a:	691a      	ldr	r2, [r3, #16]
    414c:	f012 0f20 	tst.w	r2, #32
    4150:	d1fb      	bne.n	414a <_tc_timer_set_period+0x3e>
    4152:	e7f7      	b.n	4144 <_tc_timer_set_period+0x38>

00004154 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    4154:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4156:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4158:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    415c:	2a02      	cmp	r2, #2
    415e:	d00a      	beq.n	4176 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4160:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4162:	f012 0f0c 	tst.w	r2, #12
    4166:	d10c      	bne.n	4182 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4168:	691a      	ldr	r2, [r3, #16]
    416a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    416e:	d1fb      	bne.n	4168 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    4170:	8b98      	ldrh	r0, [r3, #28]
    4172:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    4174:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4176:	691a      	ldr	r2, [r3, #16]
    4178:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    417c:	d1fb      	bne.n	4176 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    417e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    4180:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4182:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4184:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4188:	2a01      	cmp	r2, #1
    418a:	d001      	beq.n	4190 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    418c:	2000      	movs	r0, #0
}
    418e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4190:	691a      	ldr	r2, [r3, #16]
    4192:	f012 0f20 	tst.w	r2, #32
    4196:	d1fb      	bne.n	4190 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    4198:	7ed8      	ldrb	r0, [r3, #27]
    419a:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    419c:	4770      	bx	lr

0000419e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    419e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    41a0:	6913      	ldr	r3, [r2, #16]
    41a2:	f013 0f03 	tst.w	r3, #3
    41a6:	d1fb      	bne.n	41a0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    41a8:	6810      	ldr	r0, [r2, #0]
}
    41aa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    41ae:	4770      	bx	lr

000041b0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    41b0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    41b2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    41b4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    41b6:	f012 0f01 	tst.w	r2, #1
    41ba:	d100      	bne.n	41be <tc_interrupt_handler+0xe>
    41bc:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    41be:	2201      	movs	r2, #1
    41c0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    41c2:	6803      	ldr	r3, [r0, #0]
    41c4:	4798      	blx	r3
	}
}
    41c6:	e7f9      	b.n	41bc <tc_interrupt_handler+0xc>

000041c8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	b088      	sub	sp, #32
    41cc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    41ce:	466c      	mov	r4, sp
    41d0:	4d19      	ldr	r5, [pc, #100]	; (4238 <get_tc_index+0x70>)
    41d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    41d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    41d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    41da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41de:	9b00      	ldr	r3, [sp, #0]
    41e0:	42b3      	cmp	r3, r6
    41e2:	d00c      	beq.n	41fe <get_tc_index+0x36>
    41e4:	4630      	mov	r0, r6
    41e6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41e8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41ea:	f852 1b04 	ldr.w	r1, [r2], #4
    41ee:	4281      	cmp	r1, r0
    41f0:	d006      	beq.n	4200 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41f2:	3301      	adds	r3, #1
    41f4:	2b08      	cmp	r3, #8
    41f6:	d1f8      	bne.n	41ea <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    41f8:	2000      	movs	r0, #0
			return i;
    41fa:	b240      	sxtb	r0, r0
    41fc:	e013      	b.n	4226 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41fe:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    4200:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4204:	d015      	beq.n	4232 <get_tc_index+0x6a>
    4206:	2b01      	cmp	r3, #1
    4208:	d00f      	beq.n	422a <get_tc_index+0x62>
    420a:	2b02      	cmp	r3, #2
    420c:	d00f      	beq.n	422e <get_tc_index+0x66>
    420e:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4210:	bf08      	it	eq
    4212:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    4214:	d0f1      	beq.n	41fa <get_tc_index+0x32>
	ASSERT(false);
    4216:	f240 1267 	movw	r2, #359	; 0x167
    421a:	4908      	ldr	r1, [pc, #32]	; (423c <get_tc_index+0x74>)
    421c:	2000      	movs	r0, #0
    421e:	4b08      	ldr	r3, [pc, #32]	; (4240 <get_tc_index+0x78>)
    4220:	4798      	blx	r3
	return -1;
    4222:	f04f 30ff 	mov.w	r0, #4294967295
}
    4226:	b008      	add	sp, #32
    4228:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    422a:	2001      	movs	r0, #1
    422c:	e7e5      	b.n	41fa <get_tc_index+0x32>
    422e:	2002      	movs	r0, #2
    4230:	e7e3      	b.n	41fa <get_tc_index+0x32>
    4232:	2000      	movs	r0, #0
    4234:	e7e1      	b.n	41fa <get_tc_index+0x32>
    4236:	bf00      	nop
    4238:	00009c4c 	.word	0x00009c4c
    423c:	00009cbc 	.word	0x00009cbc
    4240:	000021e5 	.word	0x000021e5

00004244 <_tc_timer_init>:
{
    4244:	b570      	push	{r4, r5, r6, lr}
    4246:	4606      	mov	r6, r0
    4248:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    424a:	4608      	mov	r0, r1
    424c:	4b71      	ldr	r3, [pc, #452]	; (4414 <_tc_timer_init+0x1d0>)
    424e:	4798      	blx	r3
    4250:	4605      	mov	r5, r0
	device->hw = hw;
    4252:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4254:	22a0      	movs	r2, #160	; 0xa0
    4256:	4970      	ldr	r1, [pc, #448]	; (4418 <_tc_timer_init+0x1d4>)
    4258:	2001      	movs	r0, #1
    425a:	4b70      	ldr	r3, [pc, #448]	; (441c <_tc_timer_init+0x1d8>)
    425c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    425e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    4260:	f013 0f01 	tst.w	r3, #1
    4264:	d119      	bne.n	429a <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4266:	6923      	ldr	r3, [r4, #16]
    4268:	f013 0f03 	tst.w	r3, #3
    426c:	d1fb      	bne.n	4266 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    426e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4270:	f013 0f02 	tst.w	r3, #2
    4274:	d00b      	beq.n	428e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4276:	6823      	ldr	r3, [r4, #0]
    4278:	f023 0302 	bic.w	r3, r3, #2
    427c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    427e:	6923      	ldr	r3, [r4, #16]
    4280:	f013 0f03 	tst.w	r3, #3
    4284:	d1fb      	bne.n	427e <_tc_timer_init+0x3a>
    4286:	6923      	ldr	r3, [r4, #16]
    4288:	f013 0f02 	tst.w	r3, #2
    428c:	d1fb      	bne.n	4286 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    428e:	2301      	movs	r3, #1
    4290:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4292:	6923      	ldr	r3, [r4, #16]
    4294:	f013 0f03 	tst.w	r3, #3
    4298:	d1fb      	bne.n	4292 <_tc_timer_init+0x4e>
    429a:	6923      	ldr	r3, [r4, #16]
    429c:	f013 0f01 	tst.w	r3, #1
    42a0:	d1fb      	bne.n	429a <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    42a2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42a6:	4a5e      	ldr	r2, [pc, #376]	; (4420 <_tc_timer_init+0x1dc>)
    42a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    42ae:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42b0:	6923      	ldr	r3, [r4, #16]
    42b2:	f013 0f03 	tst.w	r3, #3
    42b6:	d1fb      	bne.n	42b0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    42b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42bc:	4958      	ldr	r1, [pc, #352]	; (4420 <_tc_timer_init+0x1dc>)
    42be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    42c2:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    42c6:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    42c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    42ca:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    42cc:	2301      	movs	r3, #1
    42ce:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    42d0:	f002 020c 	and.w	r2, r2, #12
    42d4:	2a08      	cmp	r2, #8
    42d6:	d056      	beq.n	4386 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    42d8:	2a00      	cmp	r2, #0
    42da:	d16b      	bne.n	43b4 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    42dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42e0:	4a4f      	ldr	r2, [pc, #316]	; (4420 <_tc_timer_init+0x1dc>)
    42e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42e8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42ea:	6923      	ldr	r3, [r4, #16]
    42ec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    42f0:	d1fb      	bne.n	42ea <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    42f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42f6:	4a4a      	ldr	r2, [pc, #296]	; (4420 <_tc_timer_init+0x1dc>)
    42f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42fe:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4300:	6923      	ldr	r3, [r4, #16]
    4302:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4306:	d1fb      	bne.n	4300 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    4308:	2301      	movs	r3, #1
    430a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    430c:	4b45      	ldr	r3, [pc, #276]	; (4424 <_tc_timer_init+0x1e0>)
    430e:	429c      	cmp	r4, r3
    4310:	d077      	beq.n	4402 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    4312:	4b45      	ldr	r3, [pc, #276]	; (4428 <_tc_timer_init+0x1e4>)
    4314:	429c      	cmp	r4, r3
    4316:	d077      	beq.n	4408 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    4318:	4b44      	ldr	r3, [pc, #272]	; (442c <_tc_timer_init+0x1e8>)
    431a:	429c      	cmp	r4, r3
    431c:	d077      	beq.n	440e <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    431e:	4b44      	ldr	r3, [pc, #272]	; (4430 <_tc_timer_init+0x1ec>)
    4320:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    4322:	bf04      	itt	eq
    4324:	4b43      	ldreq	r3, [pc, #268]	; (4434 <_tc_timer_init+0x1f0>)
    4326:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    4328:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    432c:	4a3c      	ldr	r2, [pc, #240]	; (4420 <_tc_timer_init+0x1dc>)
    432e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4332:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4336:	2b00      	cmp	r3, #0
    4338:	db23      	blt.n	4382 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    433a:	095a      	lsrs	r2, r3, #5
    433c:	f003 031f 	and.w	r3, r3, #31
    4340:	2101      	movs	r1, #1
    4342:	fa01 f303 	lsl.w	r3, r1, r3
    4346:	3220      	adds	r2, #32
    4348:	493b      	ldr	r1, [pc, #236]	; (4438 <_tc_timer_init+0x1f4>)
    434a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    434e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4352:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4356:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    435a:	4b31      	ldr	r3, [pc, #196]	; (4420 <_tc_timer_init+0x1dc>)
    435c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4360:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4364:	2b00      	cmp	r3, #0
    4366:	db0c      	blt.n	4382 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4368:	0959      	lsrs	r1, r3, #5
    436a:	f003 031f 	and.w	r3, r3, #31
    436e:	2201      	movs	r2, #1
    4370:	fa02 f303 	lsl.w	r3, r2, r3
    4374:	4a30      	ldr	r2, [pc, #192]	; (4438 <_tc_timer_init+0x1f4>)
    4376:	f101 0060 	add.w	r0, r1, #96	; 0x60
    437a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    437e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4382:	2000      	movs	r0, #0
    4384:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4386:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    438a:	4a25      	ldr	r2, [pc, #148]	; (4420 <_tc_timer_init+0x1dc>)
    438c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4392:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4394:	6923      	ldr	r3, [r4, #16]
    4396:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    439a:	d1fb      	bne.n	4394 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    439c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43a0:	4a1f      	ldr	r2, [pc, #124]	; (4420 <_tc_timer_init+0x1dc>)
    43a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    43a8:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43aa:	6923      	ldr	r3, [r4, #16]
    43ac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43b0:	d1fb      	bne.n	43aa <_tc_timer_init+0x166>
    43b2:	e7a9      	b.n	4308 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    43b4:	2a04      	cmp	r2, #4
    43b6:	d1a7      	bne.n	4308 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    43b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43bc:	4a18      	ldr	r2, [pc, #96]	; (4420 <_tc_timer_init+0x1dc>)
    43be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43c6:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43c8:	6923      	ldr	r3, [r4, #16]
    43ca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43ce:	d1fb      	bne.n	43c8 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    43d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43d4:	4a12      	ldr	r2, [pc, #72]	; (4420 <_tc_timer_init+0x1dc>)
    43d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43de:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43e0:	6923      	ldr	r3, [r4, #16]
    43e2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43e6:	d1fb      	bne.n	43e0 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    43e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43ec:	4a0c      	ldr	r2, [pc, #48]	; (4420 <_tc_timer_init+0x1dc>)
    43ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    43f6:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43f8:	6923      	ldr	r3, [r4, #16]
    43fa:	f013 0f20 	tst.w	r3, #32
    43fe:	d1fb      	bne.n	43f8 <_tc_timer_init+0x1b4>
    4400:	e782      	b.n	4308 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    4402:	4b0c      	ldr	r3, [pc, #48]	; (4434 <_tc_timer_init+0x1f0>)
    4404:	601e      	str	r6, [r3, #0]
    4406:	e78a      	b.n	431e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    4408:	4b0a      	ldr	r3, [pc, #40]	; (4434 <_tc_timer_init+0x1f0>)
    440a:	605e      	str	r6, [r3, #4]
    440c:	e78c      	b.n	4328 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    440e:	4b09      	ldr	r3, [pc, #36]	; (4434 <_tc_timer_init+0x1f0>)
    4410:	609e      	str	r6, [r3, #8]
    4412:	e789      	b.n	4328 <_tc_timer_init+0xe4>
    4414:	000041c9 	.word	0x000041c9
    4418:	00009cbc 	.word	0x00009cbc
    441c:	000021e5 	.word	0x000021e5
    4420:	00009c4c 	.word	0x00009c4c
    4424:	40003800 	.word	0x40003800
    4428:	40003c00 	.word	0x40003c00
    442c:	4101a000 	.word	0x4101a000
    4430:	4101c000 	.word	0x4101c000
    4434:	200008b4 	.word	0x200008b4
    4438:	e000e100 	.word	0xe000e100

0000443c <_tc_timer_deinit>:
{
    443c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    443e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    4440:	4620      	mov	r0, r4
    4442:	4b18      	ldr	r3, [pc, #96]	; (44a4 <_tc_timer_deinit+0x68>)
    4444:	4798      	blx	r3
    4446:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4448:	22cd      	movs	r2, #205	; 0xcd
    444a:	4917      	ldr	r1, [pc, #92]	; (44a8 <_tc_timer_deinit+0x6c>)
    444c:	2001      	movs	r0, #1
    444e:	4b17      	ldr	r3, [pc, #92]	; (44ac <_tc_timer_deinit+0x70>)
    4450:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4452:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4456:	4b16      	ldr	r3, [pc, #88]	; (44b0 <_tc_timer_deinit+0x74>)
    4458:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    445c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4460:	2b00      	cmp	r3, #0
    4462:	db0d      	blt.n	4480 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4464:	095a      	lsrs	r2, r3, #5
    4466:	f003 031f 	and.w	r3, r3, #31
    446a:	2101      	movs	r1, #1
    446c:	fa01 f303 	lsl.w	r3, r1, r3
    4470:	3220      	adds	r2, #32
    4472:	4910      	ldr	r1, [pc, #64]	; (44b4 <_tc_timer_deinit+0x78>)
    4474:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4478:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    447c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4480:	6823      	ldr	r3, [r4, #0]
    4482:	f023 0302 	bic.w	r3, r3, #2
    4486:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4488:	6923      	ldr	r3, [r4, #16]
    448a:	f013 0f03 	tst.w	r3, #3
    448e:	d1fb      	bne.n	4488 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    4490:	6823      	ldr	r3, [r4, #0]
    4492:	f043 0301 	orr.w	r3, r3, #1
    4496:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4498:	6923      	ldr	r3, [r4, #16]
    449a:	f013 0f01 	tst.w	r3, #1
    449e:	d1fb      	bne.n	4498 <_tc_timer_deinit+0x5c>
}
    44a0:	bd38      	pop	{r3, r4, r5, pc}
    44a2:	bf00      	nop
    44a4:	000041c9 	.word	0x000041c9
    44a8:	00009cbc 	.word	0x00009cbc
    44ac:	000021e5 	.word	0x000021e5
    44b0:	00009c4c 	.word	0x00009c4c
    44b4:	e000e100 	.word	0xe000e100

000044b8 <_tc_timer_set_irq>:
{
    44b8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    44ba:	68c0      	ldr	r0, [r0, #12]
    44bc:	4b09      	ldr	r3, [pc, #36]	; (44e4 <_tc_timer_set_irq+0x2c>)
    44be:	4798      	blx	r3
    44c0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    44c2:	f44f 7291 	mov.w	r2, #290	; 0x122
    44c6:	4908      	ldr	r1, [pc, #32]	; (44e8 <_tc_timer_set_irq+0x30>)
    44c8:	2001      	movs	r0, #1
    44ca:	4b08      	ldr	r3, [pc, #32]	; (44ec <_tc_timer_set_irq+0x34>)
    44cc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    44ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    44d2:	4b07      	ldr	r3, [pc, #28]	; (44f0 <_tc_timer_set_irq+0x38>)
    44d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    44d8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    44dc:	4b05      	ldr	r3, [pc, #20]	; (44f4 <_tc_timer_set_irq+0x3c>)
    44de:	4798      	blx	r3
    44e0:	bd10      	pop	{r4, pc}
    44e2:	bf00      	nop
    44e4:	000041c9 	.word	0x000041c9
    44e8:	00009cbc 	.word	0x00009cbc
    44ec:	000021e5 	.word	0x000021e5
    44f0:	00009c4c 	.word	0x00009c4c
    44f4:	00002761 	.word	0x00002761

000044f8 <_tc_get_timer>:
}
    44f8:	4800      	ldr	r0, [pc, #0]	; (44fc <_tc_get_timer+0x4>)
    44fa:	4770      	bx	lr
    44fc:	20000020 	.word	0x20000020

00004500 <TC0_Handler>:
{
    4500:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    4502:	4b02      	ldr	r3, [pc, #8]	; (450c <TC0_Handler+0xc>)
    4504:	6818      	ldr	r0, [r3, #0]
    4506:	4b02      	ldr	r3, [pc, #8]	; (4510 <TC0_Handler+0x10>)
    4508:	4798      	blx	r3
    450a:	bd08      	pop	{r3, pc}
    450c:	200008b4 	.word	0x200008b4
    4510:	000041b1 	.word	0x000041b1

00004514 <TC1_Handler>:
{
    4514:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    4516:	4b02      	ldr	r3, [pc, #8]	; (4520 <TC1_Handler+0xc>)
    4518:	6858      	ldr	r0, [r3, #4]
    451a:	4b02      	ldr	r3, [pc, #8]	; (4524 <TC1_Handler+0x10>)
    451c:	4798      	blx	r3
    451e:	bd08      	pop	{r3, pc}
    4520:	200008b4 	.word	0x200008b4
    4524:	000041b1 	.word	0x000041b1

00004528 <TC2_Handler>:
{
    4528:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    452a:	4b02      	ldr	r3, [pc, #8]	; (4534 <TC2_Handler+0xc>)
    452c:	6898      	ldr	r0, [r3, #8]
    452e:	4b02      	ldr	r3, [pc, #8]	; (4538 <TC2_Handler+0x10>)
    4530:	4798      	blx	r3
    4532:	bd08      	pop	{r3, pc}
    4534:	200008b4 	.word	0x200008b4
    4538:	000041b1 	.word	0x000041b1

0000453c <TC3_Handler>:
{
    453c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    453e:	4b02      	ldr	r3, [pc, #8]	; (4548 <TC3_Handler+0xc>)
    4540:	68d8      	ldr	r0, [r3, #12]
    4542:	4b02      	ldr	r3, [pc, #8]	; (454c <TC3_Handler+0x10>)
    4544:	4798      	blx	r3
    4546:	bd08      	pop	{r3, pc}
    4548:	200008b4 	.word	0x200008b4
    454c:	000041b1 	.word	0x000041b1

00004550 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4550:	2000      	movs	r0, #0
    4552:	4770      	bx	lr

00004554 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4554:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4556:	7c83      	ldrb	r3, [r0, #18]
    4558:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    455c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    455e:	f002 0107 	and.w	r1, r2, #7
    4562:	2901      	cmp	r1, #1
    4564:	d00b      	beq.n	457e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4566:	015a      	lsls	r2, r3, #5
    4568:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    456c:	2110      	movs	r1, #16
    456e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4572:	015b      	lsls	r3, r3, #5
    4574:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4578:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    457c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    457e:	f012 0f40 	tst.w	r2, #64	; 0x40
    4582:	d00c      	beq.n	459e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4584:	7cc2      	ldrb	r2, [r0, #19]
    4586:	f36f 1286 	bfc	r2, #6, #1
    458a:	74c2      	strb	r2, [r0, #19]
    458c:	015a      	lsls	r2, r3, #5
    458e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4592:	2180      	movs	r1, #128	; 0x80
    4594:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4598:	2140      	movs	r1, #64	; 0x40
    459a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    459e:	7cc2      	ldrb	r2, [r0, #19]
    45a0:	f36f 02c3 	bfc	r2, #3, #1
    45a4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    45a6:	490a      	ldr	r1, [pc, #40]	; (45d0 <_usb_d_dev_handle_setup+0x7c>)
    45a8:	015a      	lsls	r2, r3, #5
    45aa:	188c      	adds	r4, r1, r2
    45ac:	2500      	movs	r5, #0
    45ae:	72a5      	strb	r5, [r4, #10]
    45b0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    45b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    45b6:	246f      	movs	r4, #111	; 0x6f
    45b8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    45bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    45c0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    45c4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    45c8:	7c80      	ldrb	r0, [r0, #18]
    45ca:	4798      	blx	r3
    45cc:	bd38      	pop	{r3, r4, r5, pc}
    45ce:	bf00      	nop
    45d0:	200008c4 	.word	0x200008c4

000045d4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    45d4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    45d6:	2320      	movs	r3, #32
    45d8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    45dc:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    45de:	7c83      	ldrb	r3, [r0, #18]
    45e0:	f003 030f 	and.w	r3, r3, #15
    45e4:	015b      	lsls	r3, r3, #5
    45e6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45ea:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    45ee:	4b04      	ldr	r3, [pc, #16]	; (4600 <_usb_d_dev_handle_stall+0x2c>)
    45f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    45f4:	6882      	ldr	r2, [r0, #8]
    45f6:	2101      	movs	r1, #1
    45f8:	7c80      	ldrb	r0, [r0, #18]
    45fa:	4798      	blx	r3
    45fc:	bd08      	pop	{r3, pc}
    45fe:	bf00      	nop
    4600:	200008c4 	.word	0x200008c4

00004604 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4604:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4606:	7c84      	ldrb	r4, [r0, #18]
    4608:	2cff      	cmp	r4, #255	; 0xff
    460a:	d003      	beq.n	4614 <_usb_d_dev_trans_done+0x10>
    460c:	7cc3      	ldrb	r3, [r0, #19]
    460e:	f013 0f40 	tst.w	r3, #64	; 0x40
    4612:	d100      	bne.n	4616 <_usb_d_dev_trans_done+0x12>
    4614:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4616:	7cc2      	ldrb	r2, [r0, #19]
    4618:	f36f 1286 	bfc	r2, #6, #1
    461c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    461e:	4a03      	ldr	r2, [pc, #12]	; (462c <_usb_d_dev_trans_done+0x28>)
    4620:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4624:	6882      	ldr	r2, [r0, #8]
    4626:	4620      	mov	r0, r4
    4628:	47a8      	blx	r5
    462a:	e7f3      	b.n	4614 <_usb_d_dev_trans_done+0x10>
    462c:	200008c4 	.word	0x200008c4

00004630 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    4630:	b530      	push	{r4, r5, lr}
    4632:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4634:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4636:	2425      	movs	r4, #37	; 0x25
    4638:	f88d 4004 	strb.w	r4, [sp, #4]
    463c:	244a      	movs	r4, #74	; 0x4a
    463e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4642:	2bff      	cmp	r3, #255	; 0xff
    4644:	d01e      	beq.n	4684 <_usb_d_dev_trans_stop+0x54>
    4646:	7cc4      	ldrb	r4, [r0, #19]
    4648:	f014 0f40 	tst.w	r4, #64	; 0x40
    464c:	d01a      	beq.n	4684 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    464e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4652:	b1c9      	cbz	r1, 4688 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4654:	0163      	lsls	r3, r4, #5
    4656:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    465a:	2580      	movs	r5, #128	; 0x80
    465c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    4660:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    4662:	a902      	add	r1, sp, #8
    4664:	440b      	add	r3, r1
    4666:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    466a:	0163      	lsls	r3, r4, #5
    466c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4670:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4674:	0163      	lsls	r3, r4, #5
    4676:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    467a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    467e:	4611      	mov	r1, r2
    4680:	4b05      	ldr	r3, [pc, #20]	; (4698 <_usb_d_dev_trans_stop+0x68>)
    4682:	4798      	blx	r3
}
    4684:	b003      	add	sp, #12
    4686:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4688:	0163      	lsls	r3, r4, #5
    468a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    468e:	2540      	movs	r5, #64	; 0x40
    4690:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4694:	e7e4      	b.n	4660 <_usb_d_dev_trans_stop+0x30>
    4696:	bf00      	nop
    4698:	00004605 	.word	0x00004605

0000469c <_usb_d_dev_handle_trfail>:
{
    469c:	b530      	push	{r4, r5, lr}
    469e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    46a0:	7c83      	ldrb	r3, [r0, #18]
    46a2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    46a6:	2204      	movs	r2, #4
    46a8:	f88d 2004 	strb.w	r2, [sp, #4]
    46ac:	2208      	movs	r2, #8
    46ae:	f88d 2005 	strb.w	r2, [sp, #5]
    46b2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    46b4:	460c      	mov	r4, r1
    46b6:	b391      	cbz	r1, 471e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    46b8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    46bc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    46c0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    46c4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    46c8:	4a32      	ldr	r2, [pc, #200]	; (4794 <_usb_d_dev_handle_trfail+0xf8>)
    46ca:	440a      	add	r2, r1
    46cc:	7a91      	ldrb	r1, [r2, #10]
    46ce:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    46d0:	2d02      	cmp	r5, #2
    46d2:	d02c      	beq.n	472e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    46d4:	f011 0f02 	tst.w	r1, #2
    46d8:	d045      	beq.n	4766 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46da:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    46dc:	7a91      	ldrb	r1, [r2, #10]
    46de:	f36f 0141 	bfc	r1, #1, #1
    46e2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    46e4:	aa02      	add	r2, sp, #8
    46e6:	4422      	add	r2, r4
    46e8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46ec:	015a      	lsls	r2, r3, #5
    46ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    46f2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    46f6:	015b      	lsls	r3, r3, #5
    46f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    46fc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4700:	f005 0307 	and.w	r3, r5, #7
    4704:	2b01      	cmp	r3, #1
    4706:	d143      	bne.n	4790 <_usb_d_dev_handle_trfail+0xf4>
    4708:	7cc3      	ldrb	r3, [r0, #19]
    470a:	f013 0f40 	tst.w	r3, #64	; 0x40
    470e:	d03f      	beq.n	4790 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    4710:	09d9      	lsrs	r1, r3, #7
    4712:	428c      	cmp	r4, r1
    4714:	d03c      	beq.n	4790 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4716:	2200      	movs	r2, #0
    4718:	4b1f      	ldr	r3, [pc, #124]	; (4798 <_usb_d_dev_handle_trfail+0xfc>)
    471a:	4798      	blx	r3
    471c:	e038      	b.n	4790 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    471e:	0159      	lsls	r1, r3, #5
    4720:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4724:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4728:	f005 0507 	and.w	r5, r5, #7
    472c:	e7ca      	b.n	46c4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    472e:	f011 0f01 	tst.w	r1, #1
    4732:	d0cf      	beq.n	46d4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4734:	7a91      	ldrb	r1, [r2, #10]
    4736:	f36f 0100 	bfc	r1, #0, #1
    473a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    473c:	aa02      	add	r2, sp, #8
    473e:	4422      	add	r2, r4
    4740:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4744:	015a      	lsls	r2, r3, #5
    4746:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    474a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    474e:	015b      	lsls	r3, r3, #5
    4750:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4754:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4758:	2204      	movs	r2, #4
    475a:	1c21      	adds	r1, r4, #0
    475c:	bf18      	it	ne
    475e:	2101      	movne	r1, #1
    4760:	4b0d      	ldr	r3, [pc, #52]	; (4798 <_usb_d_dev_handle_trfail+0xfc>)
    4762:	4798      	blx	r3
    4764:	e014      	b.n	4790 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4766:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    476a:	4a0a      	ldr	r2, [pc, #40]	; (4794 <_usb_d_dev_handle_trfail+0xf8>)
    476c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4770:	2100      	movs	r1, #0
    4772:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4774:	aa02      	add	r2, sp, #8
    4776:	4414      	add	r4, r2
    4778:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    477c:	015a      	lsls	r2, r3, #5
    477e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4782:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4786:	015b      	lsls	r3, r3, #5
    4788:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    478c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    4790:	b003      	add	sp, #12
    4792:	bd30      	pop	{r4, r5, pc}
    4794:	200008c4 	.word	0x200008c4
    4798:	00004631 	.word	0x00004631

0000479c <_usb_d_dev_reset_epts>:
{
    479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47a0:	4d0c      	ldr	r5, [pc, #48]	; (47d4 <_usb_d_dev_reset_epts+0x38>)
    47a2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    47a6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    47aa:	f04f 0803 	mov.w	r8, #3
    47ae:	4f0a      	ldr	r7, [pc, #40]	; (47d8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    47b0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    47b2:	4641      	mov	r1, r8
    47b4:	4620      	mov	r0, r4
    47b6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    47b8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    47ba:	2300      	movs	r3, #0
    47bc:	74e3      	strb	r3, [r4, #19]
    47be:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    47c0:	42ac      	cmp	r4, r5
    47c2:	d1f6      	bne.n	47b2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    47c4:	22c0      	movs	r2, #192	; 0xc0
    47c6:	4619      	mov	r1, r3
    47c8:	4802      	ldr	r0, [pc, #8]	; (47d4 <_usb_d_dev_reset_epts+0x38>)
    47ca:	4b04      	ldr	r3, [pc, #16]	; (47dc <_usb_d_dev_reset_epts+0x40>)
    47cc:	4798      	blx	r3
    47ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47d2:	bf00      	nop
    47d4:	200008c4 	.word	0x200008c4
    47d8:	00004605 	.word	0x00004605
    47dc:	00008e4b 	.word	0x00008e4b

000047e0 <_usb_d_dev_in_next>:
{
    47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    47e6:	7c84      	ldrb	r4, [r0, #18]
    47e8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47ec:	4688      	mov	r8, r1
    47ee:	2900      	cmp	r1, #0
    47f0:	f000 80a0 	beq.w	4934 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    47f4:	4b58      	ldr	r3, [pc, #352]	; (4958 <_usb_d_dev_in_next+0x178>)
    47f6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47fa:	6958      	ldr	r0, [r3, #20]
    47fc:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4800:	8a2b      	ldrh	r3, [r5, #16]
    4802:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4806:	4293      	cmp	r3, r2
    4808:	f000 808e 	beq.w	4928 <_usb_d_dev_in_next+0x148>
    480c:	3b01      	subs	r3, #1
    480e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4810:	7cef      	ldrb	r7, [r5, #19]
    4812:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4816:	f1b8 0f00 	cmp.w	r8, #0
    481a:	d005      	beq.n	4828 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    481c:	0162      	lsls	r2, r4, #5
    481e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4822:	2302      	movs	r3, #2
    4824:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4828:	68a9      	ldr	r1, [r5, #8]
    482a:	eb0e 0301 	add.w	r3, lr, r1
    482e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    4830:	686e      	ldr	r6, [r5, #4]
    4832:	42b3      	cmp	r3, r6
    4834:	d23f      	bcs.n	48b6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4836:	1af6      	subs	r6, r6, r3
    4838:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    483a:	7cea      	ldrb	r2, [r5, #19]
    483c:	f012 0f20 	tst.w	r2, #32
    4840:	d02d      	beq.n	489e <_usb_d_dev_in_next+0xbe>
    4842:	8a2a      	ldrh	r2, [r5, #16]
    4844:	4296      	cmp	r6, r2
    4846:	bf28      	it	cs
    4848:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    484a:	6829      	ldr	r1, [r5, #0]
    484c:	4632      	mov	r2, r6
    484e:	4419      	add	r1, r3
    4850:	68e8      	ldr	r0, [r5, #12]
    4852:	4b42      	ldr	r3, [pc, #264]	; (495c <_usb_d_dev_in_next+0x17c>)
    4854:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4856:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4858:	4b3f      	ldr	r3, [pc, #252]	; (4958 <_usb_d_dev_in_next+0x178>)
    485a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    485e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4860:	4b3d      	ldr	r3, [pc, #244]	; (4958 <_usb_d_dev_in_next+0x178>)
    4862:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4866:	695a      	ldr	r2, [r3, #20]
    4868:	f366 020d 	bfi	r2, r6, #0, #14
    486c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    486e:	695a      	ldr	r2, [r3, #20]
    4870:	f36f 329b 	bfc	r2, #14, #14
    4874:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4876:	f1b8 0f00 	cmp.w	r8, #0
    487a:	d108      	bne.n	488e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    487c:	2f01      	cmp	r7, #1
    487e:	bf0c      	ite	eq
    4880:	224e      	moveq	r2, #78	; 0x4e
    4882:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4884:	0163      	lsls	r3, r4, #5
    4886:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    488a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    488e:	0164      	lsls	r4, r4, #5
    4890:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4894:	2380      	movs	r3, #128	; 0x80
    4896:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    489e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    48a2:	bf28      	it	cs
    48a4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    48a8:	6829      	ldr	r1, [r5, #0]
    48aa:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    48ac:	4a2a      	ldr	r2, [pc, #168]	; (4958 <_usb_d_dev_in_next+0x178>)
    48ae:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    48b2:	6113      	str	r3, [r2, #16]
    48b4:	e7d4      	b.n	4860 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    48b6:	7ceb      	ldrb	r3, [r5, #19]
    48b8:	f013 0f10 	tst.w	r3, #16
    48bc:	d00f      	beq.n	48de <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    48be:	7ceb      	ldrb	r3, [r5, #19]
    48c0:	f36f 1304 	bfc	r3, #4, #1
    48c4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    48c6:	4b24      	ldr	r3, [pc, #144]	; (4958 <_usb_d_dev_in_next+0x178>)
    48c8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    48cc:	695a      	ldr	r2, [r3, #20]
    48ce:	f36f 020d 	bfc	r2, #0, #14
    48d2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    48d4:	695a      	ldr	r2, [r3, #20]
    48d6:	f36f 329b 	bfc	r2, #14, #14
    48da:	615a      	str	r2, [r3, #20]
    48dc:	e7cb      	b.n	4876 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    48de:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    48e0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    48e4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    48e8:	bf0c      	ite	eq
    48ea:	234b      	moveq	r3, #75	; 0x4b
    48ec:	234a      	movne	r3, #74	; 0x4a
    48ee:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    48f2:	8a2a      	ldrh	r2, [r5, #16]
    48f4:	ea00 030e 	and.w	r3, r0, lr
    48f8:	429a      	cmp	r2, r3
    48fa:	d005      	beq.n	4908 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    48fc:	2100      	movs	r1, #0
    48fe:	4628      	mov	r0, r5
    4900:	4b17      	ldr	r3, [pc, #92]	; (4960 <_usb_d_dev_in_next+0x180>)
    4902:	4798      	blx	r3
	return;
    4904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4908:	7ceb      	ldrb	r3, [r5, #19]
    490a:	f36f 1386 	bfc	r3, #6, #1
    490e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    4910:	4b11      	ldr	r3, [pc, #68]	; (4958 <_usb_d_dev_in_next+0x178>)
    4912:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4916:	68a9      	ldr	r1, [r5, #8]
    4918:	7ca8      	ldrb	r0, [r5, #18]
    491a:	4798      	blx	r3
    491c:	b9d0      	cbnz	r0, 4954 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    491e:	7ceb      	ldrb	r3, [r5, #19]
    4920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4924:	74eb      	strb	r3, [r5, #19]
    4926:	e7e9      	b.n	48fc <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4928:	7cef      	ldrb	r7, [r5, #19]
    492a:	f007 0707 	and.w	r7, r7, #7
    492e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4932:	e773      	b.n	481c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4934:	8a03      	ldrh	r3, [r0, #16]
    4936:	f240 32ff 	movw	r2, #1023	; 0x3ff
    493a:	4293      	cmp	r3, r2
    493c:	d107      	bne.n	494e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    493e:	7cef      	ldrb	r7, [r5, #19]
    4940:	f007 0707 	and.w	r7, r7, #7
    4944:	f04f 0e00 	mov.w	lr, #0
    4948:	f240 30ff 	movw	r0, #1023	; 0x3ff
    494c:	e76c      	b.n	4828 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    494e:	f04f 0e00 	mov.w	lr, #0
    4952:	e75b      	b.n	480c <_usb_d_dev_in_next+0x2c>
    4954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4958:	200008c4 	.word	0x200008c4
    495c:	00008e35 	.word	0x00008e35
    4960:	00004605 	.word	0x00004605

00004964 <_usb_d_dev_out_next>:
{
    4964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4968:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    496a:	7c85      	ldrb	r5, [r0, #18]
    496c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4970:	4689      	mov	r9, r1
    4972:	2900      	cmp	r1, #0
    4974:	d056      	beq.n	4a24 <_usb_d_dev_out_next+0xc0>
    4976:	4b74      	ldr	r3, [pc, #464]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4978:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    497c:	685a      	ldr	r2, [r3, #4]
    497e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4982:	685f      	ldr	r7, [r3, #4]
    4984:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4988:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    498a:	8a06      	ldrh	r6, [r0, #16]
    498c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4990:	429e      	cmp	r6, r3
    4992:	f000 80ba 	beq.w	4b0a <_usb_d_dev_out_next+0x1a6>
    4996:	3e01      	subs	r6, #1
    4998:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    499a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    499e:	f894 8013 	ldrb.w	r8, [r4, #19]
    49a2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    49a6:	f1b9 0f00 	cmp.w	r9, #0
    49aa:	d005      	beq.n	49b8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    49ac:	016b      	lsls	r3, r5, #5
    49ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    49b2:	2201      	movs	r2, #1
    49b4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    49b8:	7ce3      	ldrb	r3, [r4, #19]
    49ba:	f013 0f20 	tst.w	r3, #32
    49be:	d00d      	beq.n	49dc <_usb_d_dev_out_next+0x78>
    49c0:	6862      	ldr	r2, [r4, #4]
    49c2:	2a00      	cmp	r2, #0
    49c4:	d037      	beq.n	4a36 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    49c6:	68a0      	ldr	r0, [r4, #8]
    49c8:	1a12      	subs	r2, r2, r0
    49ca:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    49cc:	6823      	ldr	r3, [r4, #0]
    49ce:	42ba      	cmp	r2, r7
    49d0:	bf28      	it	cs
    49d2:	463a      	movcs	r2, r7
    49d4:	68e1      	ldr	r1, [r4, #12]
    49d6:	4418      	add	r0, r3
    49d8:	4b5c      	ldr	r3, [pc, #368]	; (4b4c <_usb_d_dev_out_next+0x1e8>)
    49da:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    49dc:	6863      	ldr	r3, [r4, #4]
    49de:	b353      	cbz	r3, 4a36 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    49e0:	f1b9 0f00 	cmp.w	r9, #0
    49e4:	d040      	beq.n	4a68 <_usb_d_dev_out_next+0x104>
    49e6:	8a22      	ldrh	r2, [r4, #16]
    49e8:	42ba      	cmp	r2, r7
    49ea:	d93d      	bls.n	4a68 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    49ec:	7ce3      	ldrb	r3, [r4, #19]
    49ee:	f36f 1304 	bfc	r3, #4, #1
    49f2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    49f4:	68a3      	ldr	r3, [r4, #8]
    49f6:	445b      	add	r3, fp
    49f8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    49fa:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    49fe:	ea4f 1345 	mov.w	r3, r5, lsl #5
    4a02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a06:	bf0c      	ite	eq
    4a08:	222d      	moveq	r2, #45	; 0x2d
    4a0a:	2225      	movne	r2, #37	; 0x25
    4a0c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4a10:	b915      	cbnz	r5, 4a18 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a12:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4a14:	4b4c      	ldr	r3, [pc, #304]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4a16:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4a18:	2100      	movs	r1, #0
    4a1a:	4620      	mov	r0, r4
    4a1c:	4b4c      	ldr	r3, [pc, #304]	; (4b50 <_usb_d_dev_out_next+0x1ec>)
    4a1e:	4798      	blx	r3
	return;
    4a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4a24:	8a06      	ldrh	r6, [r0, #16]
    4a26:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4a2a:	429e      	cmp	r6, r3
    4a2c:	d07b      	beq.n	4b26 <_usb_d_dev_out_next+0x1c2>
    4a2e:	f04f 0b00 	mov.w	fp, #0
    4a32:	46da      	mov	sl, fp
    4a34:	e7af      	b.n	4996 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4a36:	7ce3      	ldrb	r3, [r4, #19]
    4a38:	f013 0f10 	tst.w	r3, #16
    4a3c:	d06c      	beq.n	4b18 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4a3e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4a40:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4a44:	f043 0320 	orr.w	r3, r3, #32
    4a48:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a4a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a4c:	493e      	ldr	r1, [pc, #248]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4a4e:	016a      	lsls	r2, r5, #5
    4a50:	188b      	adds	r3, r1, r2
    4a52:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a54:	8a21      	ldrh	r1, [r4, #16]
    4a56:	685a      	ldr	r2, [r3, #4]
    4a58:	f361 329b 	bfi	r2, r1, #14, #14
    4a5c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a5e:	685a      	ldr	r2, [r3, #4]
    4a60:	f36f 020d 	bfc	r2, #0, #14
    4a64:	605a      	str	r2, [r3, #4]
    4a66:	e01d      	b.n	4aa4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4a68:	68a2      	ldr	r2, [r4, #8]
    4a6a:	4452      	add	r2, sl
    4a6c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4a6e:	4293      	cmp	r3, r2
    4a70:	d9c3      	bls.n	49fa <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4a72:	1a9b      	subs	r3, r3, r2
    4a74:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4a76:	7ce1      	ldrb	r1, [r4, #19]
    4a78:	f011 0f20 	tst.w	r1, #32
    4a7c:	d026      	beq.n	4acc <_usb_d_dev_out_next+0x168>
    4a7e:	8a22      	ldrh	r2, [r4, #16]
    4a80:	4293      	cmp	r3, r2
    4a82:	bf28      	it	cs
    4a84:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a86:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a88:	016a      	lsls	r2, r5, #5
    4a8a:	492f      	ldr	r1, [pc, #188]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4a8c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a8e:	4a2e      	ldr	r2, [pc, #184]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4a90:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4a94:	6851      	ldr	r1, [r2, #4]
    4a96:	f363 319b 	bfi	r1, r3, #14, #14
    4a9a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a9c:	6853      	ldr	r3, [r2, #4]
    4a9e:	f36f 030d 	bfc	r3, #0, #14
    4aa2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4aa4:	f1b9 0f00 	cmp.w	r9, #0
    4aa8:	d108      	bne.n	4abc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4aaa:	f1b8 0f01 	cmp.w	r8, #1
    4aae:	d025      	beq.n	4afc <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4ab0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4ab2:	016b      	lsls	r3, r5, #5
    4ab4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ab8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4abc:	016d      	lsls	r5, r5, #5
    4abe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4ac2:	2340      	movs	r3, #64	; 0x40
    4ac4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4acc:	8a21      	ldrh	r1, [r4, #16]
    4ace:	428b      	cmp	r3, r1
    4ad0:	d90a      	bls.n	4ae8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4ad6:	d80e      	bhi.n	4af6 <_usb_d_dev_out_next+0x192>
    4ad8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4adc:	6821      	ldr	r1, [r4, #0]
    4ade:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4ae0:	0169      	lsls	r1, r5, #5
    4ae2:	4819      	ldr	r0, [pc, #100]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4ae4:	5042      	str	r2, [r0, r1]
    4ae6:	e7d2      	b.n	4a8e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4ae8:	428b      	cmp	r3, r1
    4aea:	d2f7      	bcs.n	4adc <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    4aec:	7ce1      	ldrb	r1, [r4, #19]
    4aee:	f041 0120 	orr.w	r1, r1, #32
    4af2:	74e1      	strb	r1, [r4, #19]
    4af4:	e7f2      	b.n	4adc <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4afa:	e7ef      	b.n	4adc <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    4afc:	4b12      	ldr	r3, [pc, #72]	; (4b48 <_usb_d_dev_out_next+0x1e4>)
    4afe:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4b02:	2200      	movs	r2, #0
    4b04:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4b06:	222d      	movs	r2, #45	; 0x2d
    4b08:	e7d3      	b.n	4ab2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    4b0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b0e:	f890 8013 	ldrb.w	r8, [r0, #19]
    4b12:	f008 0807 	and.w	r8, r8, #7
    4b16:	e749      	b.n	49ac <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4b18:	f1b9 0f00 	cmp.w	r9, #0
    4b1c:	d10b      	bne.n	4b36 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    4b1e:	68a3      	ldr	r3, [r4, #8]
    4b20:	4453      	add	r3, sl
    4b22:	60a3      	str	r3, [r4, #8]
    4b24:	e769      	b.n	49fa <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b26:	f890 8013 	ldrb.w	r8, [r0, #19]
    4b2a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    4b2e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b30:	46bb      	mov	fp, r7
    4b32:	46ba      	mov	sl, r7
    4b34:	e740      	b.n	49b8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4b36:	8a23      	ldrh	r3, [r4, #16]
    4b38:	42bb      	cmp	r3, r7
    4b3a:	f63f af57 	bhi.w	49ec <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4b3e:	68a3      	ldr	r3, [r4, #8]
    4b40:	4453      	add	r3, sl
    4b42:	60a3      	str	r3, [r4, #8]
    4b44:	e759      	b.n	49fa <_usb_d_dev_out_next+0x96>
    4b46:	bf00      	nop
    4b48:	200008c4 	.word	0x200008c4
    4b4c:	00008e35 	.word	0x00008e35
    4b50:	00004605 	.word	0x00004605

00004b54 <_usb_d_dev_handler>:
{
    4b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4b58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4b5c:	8c1e      	ldrh	r6, [r3, #32]
    4b5e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4b60:	b146      	cbz	r6, 4b74 <_usb_d_dev_handler+0x20>
    4b62:	4d96      	ldr	r5, [pc, #600]	; (4dbc <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    4b64:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4b66:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    4b6a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 4dd8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    4b6e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 4ddc <_usb_d_dev_handler+0x288>
    4b72:	e0de      	b.n	4d32 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4b74:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4b76:	8b1b      	ldrh	r3, [r3, #24]
    4b78:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4b7a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4b7c:	f013 0f04 	tst.w	r3, #4
    4b80:	d11e      	bne.n	4bc0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4b82:	f413 7f00 	tst.w	r3, #512	; 0x200
    4b86:	d125      	bne.n	4bd4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4b88:	f013 0f80 	tst.w	r3, #128	; 0x80
    4b8c:	d14f      	bne.n	4c2e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4b8e:	f013 0f70 	tst.w	r3, #112	; 0x70
    4b92:	d158      	bne.n	4c46 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4b94:	f013 0f08 	tst.w	r3, #8
    4b98:	d178      	bne.n	4c8c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4b9a:	f013 0f01 	tst.w	r3, #1
    4b9e:	d0e0      	beq.n	4b62 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4ba0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ba4:	f240 2201 	movw	r2, #513	; 0x201
    4ba8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4baa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4bac:	2270      	movs	r2, #112	; 0x70
    4bae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4bb0:	4b83      	ldr	r3, [pc, #524]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4bb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4bb6:	2100      	movs	r1, #0
    4bb8:	2004      	movs	r0, #4
    4bba:	4798      	blx	r3
    4bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4bc0:	2204      	movs	r2, #4
    4bc2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4bc6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4bc8:	4b7d      	ldr	r3, [pc, #500]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4bca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4bce:	4798      	blx	r3
    4bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bd4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4bd8:	f240 2201 	movw	r2, #513	; 0x201
    4bdc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4bde:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4be0:	2270      	movs	r2, #112	; 0x70
    4be2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4be4:	4b76      	ldr	r3, [pc, #472]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4be6:	891b      	ldrh	r3, [r3, #8]
    4be8:	f003 030f 	and.w	r3, r3, #15
    4bec:	2b03      	cmp	r3, #3
    4bee:	d014      	beq.n	4c1a <_usb_d_dev_handler+0xc6>
    4bf0:	2301      	movs	r3, #1
    4bf2:	4873      	ldr	r0, [pc, #460]	; (4dc0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4bf4:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4bf6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    4bfa:	8912      	ldrh	r2, [r2, #8]
    4bfc:	f002 020f 	and.w	r2, r2, #15
    4c00:	2a03      	cmp	r2, #3
    4c02:	d00b      	beq.n	4c1c <_usb_d_dev_handler+0xc8>
    4c04:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4c06:	2b05      	cmp	r3, #5
    4c08:	d1f4      	bne.n	4bf4 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    4c0a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4c0c:	4b6c      	ldr	r3, [pc, #432]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4c0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c12:	2003      	movs	r0, #3
    4c14:	4798      	blx	r3
    4c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4c1a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4c1c:	4b68      	ldr	r3, [pc, #416]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4c1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    4c22:	8919      	ldrh	r1, [r3, #8]
    4c24:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4c28:	2200      	movs	r2, #0
    4c2a:	811a      	strh	r2, [r3, #8]
    4c2c:	e7ee      	b.n	4c0c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c2e:	2280      	movs	r2, #128	; 0x80
    4c30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c34:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4c36:	4b62      	ldr	r3, [pc, #392]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4c38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c3c:	2100      	movs	r1, #0
    4c3e:	2005      	movs	r0, #5
    4c40:	4798      	blx	r3
    4c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c4a:	2270      	movs	r2, #112	; 0x70
    4c4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c50:	f240 2201 	movw	r2, #513	; 0x201
    4c54:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4c56:	4b5b      	ldr	r3, [pc, #364]	; (4dc4 <_usb_d_dev_handler+0x270>)
    4c58:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    4c5c:	f013 0f01 	tst.w	r3, #1
    4c60:	d00e      	beq.n	4c80 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c62:	4a58      	ldr	r2, [pc, #352]	; (4dc4 <_usb_d_dev_handler+0x270>)
    4c64:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4c66:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4c6a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4c6e:	d1f9      	bne.n	4c64 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4c70:	4b53      	ldr	r3, [pc, #332]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4c72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c76:	2100      	movs	r1, #0
    4c78:	2002      	movs	r0, #2
    4c7a:	4798      	blx	r3
    4c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c80:	4a50      	ldr	r2, [pc, #320]	; (4dc4 <_usb_d_dev_handler+0x270>)
    4c82:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    4c84:	f413 7f80 	tst.w	r3, #256	; 0x100
    4c88:	d0fb      	beq.n	4c82 <_usb_d_dev_handler+0x12e>
    4c8a:	e7f1      	b.n	4c70 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4c8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c90:	2400      	movs	r4, #0
    4c92:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c96:	2208      	movs	r2, #8
    4c98:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c9a:	2270      	movs	r2, #112	; 0x70
    4c9c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c9e:	f240 2201 	movw	r2, #513	; 0x201
    4ca2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4ca4:	4b48      	ldr	r3, [pc, #288]	; (4dc8 <_usb_d_dev_handler+0x274>)
    4ca6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4ca8:	4b45      	ldr	r3, [pc, #276]	; (4dc0 <_usb_d_dev_handler+0x26c>)
    4caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4cae:	4621      	mov	r1, r4
    4cb0:	2001      	movs	r0, #1
    4cb2:	4798      	blx	r3
    4cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4cb8:	f011 0f10 	tst.w	r1, #16
    4cbc:	d109      	bne.n	4cd2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4cbe:	f011 0f40 	tst.w	r1, #64	; 0x40
    4cc2:	d108      	bne.n	4cd6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4cc4:	f011 0f20 	tst.w	r1, #32
    4cc8:	d02f      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4cca:	2100      	movs	r1, #0
    4ccc:	4b3f      	ldr	r3, [pc, #252]	; (4dcc <_usb_d_dev_handler+0x278>)
    4cce:	4798      	blx	r3
    4cd0:	e02b      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    4cd2:	47c8      	blx	r9
    4cd4:	e029      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4cd6:	2101      	movs	r1, #1
    4cd8:	4b3c      	ldr	r3, [pc, #240]	; (4dcc <_usb_d_dev_handler+0x278>)
    4cda:	4798      	blx	r3
    4cdc:	e025      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4cde:	f011 0f40 	tst.w	r1, #64	; 0x40
    4ce2:	d111      	bne.n	4d08 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4ce4:	f011 0f08 	tst.w	r1, #8
    4ce8:	d112      	bne.n	4d10 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4cea:	f011 0f02 	tst.w	r1, #2
    4cee:	d112      	bne.n	4d16 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4cf0:	f003 0307 	and.w	r3, r3, #7
    4cf4:	2b01      	cmp	r3, #1
    4cf6:	d118      	bne.n	4d2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cf8:	f011 0f04 	tst.w	r1, #4
    4cfc:	d10f      	bne.n	4d1e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4cfe:	f011 0f10 	tst.w	r1, #16
    4d02:	d012      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4d04:	47c8      	blx	r9
    4d06:	e010      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4d08:	2101      	movs	r1, #1
    4d0a:	4b30      	ldr	r3, [pc, #192]	; (4dcc <_usb_d_dev_handler+0x278>)
    4d0c:	4798      	blx	r3
    4d0e:	e00c      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    4d10:	2101      	movs	r1, #1
    4d12:	47c0      	blx	r8
    4d14:	e009      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    4d16:	2101      	movs	r1, #1
    4d18:	4b2d      	ldr	r3, [pc, #180]	; (4dd0 <_usb_d_dev_handler+0x27c>)
    4d1a:	4798      	blx	r3
    4d1c:	e005      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    4d1e:	2100      	movs	r1, #0
    4d20:	47c0      	blx	r8
    4d22:	e002      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4d24:	2100      	movs	r1, #0
    4d26:	4b29      	ldr	r3, [pc, #164]	; (4dcc <_usb_d_dev_handler+0x278>)
    4d28:	4798      	blx	r3
    4d2a:	3401      	adds	r4, #1
    4d2c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4d2e:	2c1b      	cmp	r4, #27
    4d30:	d042      	beq.n	4db8 <_usb_d_dev_handler+0x264>
    4d32:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    4d34:	7cab      	ldrb	r3, [r5, #18]
    4d36:	2bff      	cmp	r3, #255	; 0xff
    4d38:	d0f7      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    4d3a:	f003 030f 	and.w	r3, r3, #15
    4d3e:	2101      	movs	r1, #1
    4d40:	4099      	lsls	r1, r3
    4d42:	4231      	tst	r1, r6
    4d44:	d0f1      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4d46:	0159      	lsls	r1, r3, #5
    4d48:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4d4c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    4d50:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4d52:	015b      	lsls	r3, r3, #5
    4d54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d58:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4d5c:	4019      	ands	r1, r3
    4d5e:	d0e4      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4d60:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4d64:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4d68:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    4d6c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    4d70:	2a01      	cmp	r2, #1
    4d72:	d0a1      	beq.n	4cb8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4d74:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d78:	d1b1      	bne.n	4cde <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4d7a:	f011 0f20 	tst.w	r1, #32
    4d7e:	d1d1      	bne.n	4d24 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4d80:	f011 0f04 	tst.w	r1, #4
    4d84:	d10e      	bne.n	4da4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d86:	f011 0f01 	tst.w	r1, #1
    4d8a:	d10e      	bne.n	4daa <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4d8c:	f003 0307 	and.w	r3, r3, #7
    4d90:	2b01      	cmp	r3, #1
    4d92:	d1ca      	bne.n	4d2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4d94:	f011 0f08 	tst.w	r1, #8
    4d98:	d10b      	bne.n	4db2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d9a:	f011 0f10 	tst.w	r1, #16
    4d9e:	d0c4      	beq.n	4d2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4da0:	47c8      	blx	r9
    4da2:	e7c2      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    4da4:	2100      	movs	r1, #0
    4da6:	47c0      	blx	r8
    4da8:	e7bf      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    4daa:	2101      	movs	r1, #1
    4dac:	4b09      	ldr	r3, [pc, #36]	; (4dd4 <_usb_d_dev_handler+0x280>)
    4dae:	4798      	blx	r3
    4db0:	e7bb      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    4db2:	2101      	movs	r1, #1
    4db4:	47c0      	blx	r8
    4db6:	e7b8      	b.n	4d2a <_usb_d_dev_handler+0x1d6>
    4db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4dbc:	20000998 	.word	0x20000998
    4dc0:	200008c4 	.word	0x200008c4
    4dc4:	40001000 	.word	0x40001000
    4dc8:	0000479d 	.word	0x0000479d
    4dcc:	000045d5 	.word	0x000045d5
    4dd0:	000047e1 	.word	0x000047e1
    4dd4:	00004965 	.word	0x00004965
    4dd8:	00004555 	.word	0x00004555
    4ddc:	0000469d 	.word	0x0000469d

00004de0 <_usb_d_dev_init>:
{
    4de0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4de2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4de6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4de8:	f013 0f01 	tst.w	r3, #1
    4dec:	d124      	bne.n	4e38 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4dee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4df2:	7893      	ldrb	r3, [r2, #2]
    4df4:	f013 0f03 	tst.w	r3, #3
    4df8:	d1fb      	bne.n	4df2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4dfa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dfe:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    4e00:	f013 0f02 	tst.w	r3, #2
    4e04:	d00f      	beq.n	4e26 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4e06:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e0a:	7813      	ldrb	r3, [r2, #0]
    4e0c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e10:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e12:	7893      	ldrb	r3, [r2, #2]
    4e14:	f013 0f03 	tst.w	r3, #3
    4e18:	d1fb      	bne.n	4e12 <_usb_d_dev_init+0x32>
    4e1a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e1e:	7893      	ldrb	r3, [r2, #2]
    4e20:	f013 0f02 	tst.w	r3, #2
    4e24:	d1fb      	bne.n	4e1e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4e26:	2201      	movs	r2, #1
    4e28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e2c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e2e:	461a      	mov	r2, r3
    4e30:	7893      	ldrb	r3, [r2, #2]
    4e32:	f013 0f03 	tst.w	r3, #3
    4e36:	d1fb      	bne.n	4e30 <_usb_d_dev_init+0x50>
    4e38:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e3c:	7893      	ldrb	r3, [r2, #2]
    4e3e:	f013 0f01 	tst.w	r3, #1
    4e42:	d1fb      	bne.n	4e3c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    4e44:	4b24      	ldr	r3, [pc, #144]	; (4ed8 <_usb_d_dev_init+0xf8>)
    4e46:	4a25      	ldr	r2, [pc, #148]	; (4edc <_usb_d_dev_init+0xfc>)
    4e48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    4e4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    4e50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    4e54:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    4e58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    4e5c:	4b20      	ldr	r3, [pc, #128]	; (4ee0 <_usb_d_dev_init+0x100>)
    4e5e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4e60:	4b20      	ldr	r3, [pc, #128]	; (4ee4 <_usb_d_dev_init+0x104>)
    4e62:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    4e64:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4e68:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    4e6c:	f011 011f 	ands.w	r1, r1, #31
    4e70:	d02b      	beq.n	4eca <_usb_d_dev_init+0xea>
		pad_transn = 9;
    4e72:	291f      	cmp	r1, #31
    4e74:	bf08      	it	eq
    4e76:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4e78:	b34b      	cbz	r3, 4ece <_usb_d_dev_init+0xee>
		pad_transp = 25;
    4e7a:	2b1f      	cmp	r3, #31
    4e7c:	bf08      	it	eq
    4e7e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    4e80:	b33a      	cbz	r2, 4ed2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    4e82:	2a07      	cmp	r2, #7
    4e84:	bf08      	it	eq
    4e86:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4e88:	f003 031f 	and.w	r3, r3, #31
    4e8c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    4e90:	0312      	lsls	r2, r2, #12
    4e92:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    4e96:	4313      	orrs	r3, r2
    4e98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e9c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4e9e:	78d3      	ldrb	r3, [r2, #3]
    4ea0:	f043 0303 	orr.w	r3, r3, #3
    4ea4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4ea6:	78d3      	ldrb	r3, [r2, #3]
    4ea8:	f043 030c 	orr.w	r3, r3, #12
    4eac:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4eae:	2304      	movs	r3, #4
    4eb0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4eb2:	7893      	ldrb	r3, [r2, #2]
    4eb4:	f013 0f03 	tst.w	r3, #3
    4eb8:	d1fb      	bne.n	4eb2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4eba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ebe:	4a06      	ldr	r2, [pc, #24]	; (4ed8 <_usb_d_dev_init+0xf8>)
    4ec0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4ec2:	2201      	movs	r2, #1
    4ec4:	811a      	strh	r2, [r3, #8]
}
    4ec6:	2000      	movs	r0, #0
    4ec8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    4eca:	2109      	movs	r1, #9
    4ecc:	e7d4      	b.n	4e78 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    4ece:	2319      	movs	r3, #25
    4ed0:	e7d6      	b.n	4e80 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    4ed2:	2206      	movs	r2, #6
    4ed4:	e7d8      	b.n	4e88 <_usb_d_dev_init+0xa8>
    4ed6:	bf00      	nop
    4ed8:	200008c4 	.word	0x200008c4
    4edc:	00004551 	.word	0x00004551
    4ee0:	0000479d 	.word	0x0000479d
    4ee4:	00800084 	.word	0x00800084

00004ee8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4ee8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4eec:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4eee:	f013 0f03 	tst.w	r3, #3
    4ef2:	d129      	bne.n	4f48 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4ef4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ef8:	7893      	ldrb	r3, [r2, #2]
    4efa:	f013 0f03 	tst.w	r3, #3
    4efe:	d1fb      	bne.n	4ef8 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4f00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f04:	781b      	ldrb	r3, [r3, #0]
    4f06:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4f08:	f013 0f02 	tst.w	r3, #2
    4f0c:	d108      	bne.n	4f20 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4f0e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4f12:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4f16:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4f18:	7893      	ldrb	r3, [r2, #2]
    4f1a:	f013 0f03 	tst.w	r3, #3
    4f1e:	d1fb      	bne.n	4f18 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f20:	4b0b      	ldr	r3, [pc, #44]	; (4f50 <_usb_d_dev_enable+0x68>)
    4f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4f26:	609a      	str	r2, [r3, #8]
    4f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4f2c:	609a      	str	r2, [r3, #8]
    4f2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f32:	609a      	str	r2, [r3, #8]
    4f34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f38:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4f3a:	f240 228d 	movw	r2, #653	; 0x28d
    4f3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f42:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4f44:	2000      	movs	r0, #0
    4f46:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4f48:	f06f 0010 	mvn.w	r0, #16
}
    4f4c:	4770      	bx	lr
    4f4e:	bf00      	nop
    4f50:	e000e100 	.word	0xe000e100

00004f54 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4f54:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4f58:	8913      	ldrh	r3, [r2, #8]
    4f5a:	f023 0301 	bic.w	r3, r3, #1
    4f5e:	041b      	lsls	r3, r3, #16
    4f60:	0c1b      	lsrs	r3, r3, #16
    4f62:	8113      	strh	r3, [r2, #8]
    4f64:	4770      	bx	lr

00004f66 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4f66:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4f6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f6e:	7298      	strb	r0, [r3, #10]
    4f70:	4770      	bx	lr
	...

00004f74 <_usb_d_dev_ep_init>:
{
    4f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f76:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4f7a:	f010 050f 	ands.w	r5, r0, #15
    4f7e:	d04d      	beq.n	501c <_usb_d_dev_ep_init+0xa8>
    4f80:	f1be 0f00 	cmp.w	lr, #0
    4f84:	bfb4      	ite	lt
    4f86:	1d6c      	addlt	r4, r5, #5
    4f88:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4f8a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4f8e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4f90:	2d05      	cmp	r5, #5
    4f92:	d947      	bls.n	5024 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4f94:	f06f 0011 	mvn.w	r0, #17
    4f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4f9a:	f1be 0f00 	cmp.w	lr, #0
    4f9e:	db1b      	blt.n	4fd8 <_usb_d_dev_ep_init+0x64>
    4fa0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fa4:	4e37      	ldr	r6, [pc, #220]	; (5084 <_usb_d_dev_ep_init+0x110>)
    4fa6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4faa:	2d00      	cmp	r5, #0
    4fac:	d15e      	bne.n	506c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4fae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fb2:	4d34      	ldr	r5, [pc, #208]	; (5084 <_usb_d_dev_ep_init+0x110>)
    4fb4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4fb8:	4d33      	ldr	r5, [pc, #204]	; (5088 <_usb_d_dev_ep_init+0x114>)
    4fba:	00a6      	lsls	r6, r4, #2
    4fbc:	1933      	adds	r3, r6, r4
    4fbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4fc2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    4fc6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    4fca:	3101      	adds	r1, #1
    4fcc:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    4fd0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    4fd4:	2000      	movs	r0, #0
    4fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4fd8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fdc:	4e29      	ldr	r6, [pc, #164]	; (5084 <_usb_d_dev_ep_init+0x110>)
    4fde:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4fe2:	686d      	ldr	r5, [r5, #4]
    4fe4:	b935      	cbnz	r5, 4ff4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4fe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fea:	4d26      	ldr	r5, [pc, #152]	; (5084 <_usb_d_dev_ep_init+0x110>)
    4fec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4ff0:	685f      	ldr	r7, [r3, #4]
    4ff2:	e7e1      	b.n	4fb8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4ff4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4ff8:	4e22      	ldr	r6, [pc, #136]	; (5084 <_usb_d_dev_ep_init+0x110>)
    4ffa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4ffe:	896d      	ldrh	r5, [r5, #10]
    5000:	4295      	cmp	r5, r2
    5002:	daf0      	bge.n	4fe6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5004:	f06f 0012 	mvn.w	r0, #18
    5008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    500a:	f06f 0013 	mvn.w	r0, #19
    500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    5010:	f06f 0013 	mvn.w	r0, #19
    5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    5016:	f06f 0012 	mvn.w	r0, #18
    501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    501c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    5020:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    5022:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5024:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    5028:	4f17      	ldr	r7, [pc, #92]	; (5088 <_usb_d_dev_ep_init+0x114>)
    502a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    502e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    5032:	2eff      	cmp	r6, #255	; 0xff
    5034:	d1e9      	bne.n	500a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5036:	2900      	cmp	r1, #0
    5038:	d1af      	bne.n	4f9a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    503a:	b125      	cbz	r5, 5046 <_usb_d_dev_ep_init+0xd2>
    503c:	f1be 0f00 	cmp.w	lr, #0
    5040:	bfa4      	itt	ge
    5042:	3505      	addge	r5, #5
    5044:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    5046:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    504a:	4e0f      	ldr	r6, [pc, #60]	; (5088 <_usb_d_dev_ep_init+0x114>)
    504c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5050:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    5054:	2dff      	cmp	r5, #255	; 0xff
    5056:	d1db      	bne.n	5010 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    5058:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    505c:	4e09      	ldr	r6, [pc, #36]	; (5084 <_usb_d_dev_ep_init+0x110>)
    505e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    5062:	2d00      	cmp	r5, #0
    5064:	d0d7      	beq.n	5016 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5066:	f1be 0f00 	cmp.w	lr, #0
    506a:	dbb5      	blt.n	4fd8 <_usb_d_dev_ep_init+0x64>
    506c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5070:	4e04      	ldr	r6, [pc, #16]	; (5084 <_usb_d_dev_ep_init+0x110>)
    5072:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5076:	892d      	ldrh	r5, [r5, #8]
    5078:	4295      	cmp	r5, r2
    507a:	da98      	bge.n	4fae <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    507c:	f06f 0012 	mvn.w	r0, #18
    5080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5082:	bf00      	nop
    5084:	00009cd0 	.word	0x00009cd0
    5088:	200008c4 	.word	0x200008c4

0000508c <_usb_d_dev_ep_deinit>:
{
    508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    508e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5090:	f010 060f 	ands.w	r6, r0, #15
    5094:	d00e      	beq.n	50b4 <_usb_d_dev_ep_deinit+0x28>
    5096:	2f00      	cmp	r7, #0
    5098:	bfb4      	ite	lt
    509a:	1d73      	addlt	r3, r6, #5
    509c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    509e:	2e05      	cmp	r6, #5
    50a0:	d900      	bls.n	50a4 <_usb_d_dev_ep_deinit+0x18>
    50a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    50a4:	461d      	mov	r5, r3
    50a6:	3301      	adds	r3, #1
    50a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    50ac:	4a24      	ldr	r2, [pc, #144]	; (5140 <_usb_d_dev_ep_deinit+0xb4>)
    50ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    50b2:	e002      	b.n	50ba <_usb_d_dev_ep_deinit+0x2e>
    50b4:	f8df e094 	ldr.w	lr, [pc, #148]	; 514c <_usb_d_dev_ep_deinit+0xc0>
    50b8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    50ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    50be:	4a21      	ldr	r2, [pc, #132]	; (5144 <_usb_d_dev_ep_deinit+0xb8>)
    50c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50c4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    50c8:	2aff      	cmp	r2, #255	; 0xff
    50ca:	d0ea      	beq.n	50a2 <_usb_d_dev_ep_deinit+0x16>
    50cc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    50ce:	2203      	movs	r2, #3
    50d0:	0ff9      	lsrs	r1, r7, #31
    50d2:	4670      	mov	r0, lr
    50d4:	4b1c      	ldr	r3, [pc, #112]	; (5148 <_usb_d_dev_ep_deinit+0xbc>)
    50d6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    50d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    50dc:	4a19      	ldr	r2, [pc, #100]	; (5144 <_usb_d_dev_ep_deinit+0xb8>)
    50de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50e2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    50e6:	f003 0307 	and.w	r3, r3, #7
    50ea:	2b01      	cmp	r3, #1
    50ec:	d016      	beq.n	511c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    50ee:	2f00      	cmp	r7, #0
    50f0:	db1b      	blt.n	512a <_usb_d_dev_ep_deinit+0x9e>
    50f2:	0160      	lsls	r0, r4, #5
    50f4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    50f8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    50fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5100:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5104:	4b0f      	ldr	r3, [pc, #60]	; (5144 <_usb_d_dev_ep_deinit+0xb8>)
    5106:	00aa      	lsls	r2, r5, #2
    5108:	1951      	adds	r1, r2, r5
    510a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    510e:	2000      	movs	r0, #0
    5110:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    5114:	22ff      	movs	r2, #255	; 0xff
    5116:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    511a:	e7c2      	b.n	50a2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    511c:	0160      	lsls	r0, r4, #5
    511e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5122:	2300      	movs	r3, #0
    5124:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    5128:	e7ec      	b.n	5104 <_usb_d_dev_ep_deinit+0x78>
    512a:	0176      	lsls	r6, r6, #5
    512c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    5130:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5134:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5138:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    513c:	e7e2      	b.n	5104 <_usb_d_dev_ep_deinit+0x78>
    513e:	bf00      	nop
    5140:	20000984 	.word	0x20000984
    5144:	200008c4 	.word	0x200008c4
    5148:	00004631 	.word	0x00004631
    514c:	20000998 	.word	0x20000998

00005150 <_usb_d_dev_ep_enable>:
{
    5150:	b4f0      	push	{r4, r5, r6, r7}
    5152:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5154:	f010 000f 	ands.w	r0, r0, #15
    5158:	f000 80a7 	beq.w	52aa <_usb_d_dev_ep_enable+0x15a>
    515c:	2e00      	cmp	r6, #0
    515e:	bfb4      	ite	lt
    5160:	1d43      	addlt	r3, r0, #5
    5162:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5164:	4605      	mov	r5, r0
    5166:	0142      	lsls	r2, r0, #5
    5168:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    516c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    5170:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5172:	2805      	cmp	r0, #5
    5174:	f240 80a0 	bls.w	52b8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    5178:	f06f 0011 	mvn.w	r0, #17
    517c:	e07d      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    517e:	f014 0f77 	tst.w	r4, #119	; 0x77
    5182:	f040 8089 	bne.w	5298 <_usb_d_dev_ep_enable+0x148>
    5186:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    518a:	2111      	movs	r1, #17
    518c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5190:	4c9b      	ldr	r4, [pc, #620]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    5192:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    5196:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    519a:	4c9a      	ldr	r4, [pc, #616]	; (5404 <_usb_d_dev_ep_enable+0x2b4>)
    519c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    51a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    51a4:	f200 80cd 	bhi.w	5342 <_usb_d_dev_ep_enable+0x1f2>
    51a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    51ac:	f200 8112 	bhi.w	53d4 <_usb_d_dev_ep_enable+0x284>
    51b0:	2980      	cmp	r1, #128	; 0x80
    51b2:	f200 8101 	bhi.w	53b8 <_usb_d_dev_ep_enable+0x268>
    51b6:	2940      	cmp	r1, #64	; 0x40
    51b8:	f200 8113 	bhi.w	53e2 <_usb_d_dev_ep_enable+0x292>
    51bc:	2920      	cmp	r1, #32
    51be:	f200 8102 	bhi.w	53c6 <_usb_d_dev_ep_enable+0x276>
    51c2:	2910      	cmp	r1, #16
    51c4:	f200 8114 	bhi.w	53f0 <_usb_d_dev_ep_enable+0x2a0>
    51c8:	2908      	cmp	r1, #8
    51ca:	bf94      	ite	ls
    51cc:	2600      	movls	r6, #0
    51ce:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51d0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    51d4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51d6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    51da:	e0b8      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    51dc:	f014 0f70 	tst.w	r4, #112	; 0x70
    51e0:	d15d      	bne.n	529e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    51e2:	4e87      	ldr	r6, [pc, #540]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    51e4:	009f      	lsls	r7, r3, #2
    51e6:	18f9      	adds	r1, r7, r3
    51e8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    51ec:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    51f0:	0109      	lsls	r1, r1, #4
    51f2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    51f6:	430c      	orrs	r4, r1
    51f8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    51fc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5200:	443b      	add	r3, r7
    5202:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5206:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    520a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    520e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5212:	d80f      	bhi.n	5234 <_usb_d_dev_ep_enable+0xe4>
    5214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5218:	d819      	bhi.n	524e <_usb_d_dev_ep_enable+0xfe>
    521a:	2b80      	cmp	r3, #128	; 0x80
    521c:	d819      	bhi.n	5252 <_usb_d_dev_ep_enable+0x102>
    521e:	2b40      	cmp	r3, #64	; 0x40
    5220:	d819      	bhi.n	5256 <_usb_d_dev_ep_enable+0x106>
    5222:	2b20      	cmp	r3, #32
    5224:	d819      	bhi.n	525a <_usb_d_dev_ep_enable+0x10a>
    5226:	2b10      	cmp	r3, #16
    5228:	d819      	bhi.n	525e <_usb_d_dev_ep_enable+0x10e>
    522a:	2b08      	cmp	r3, #8
    522c:	bf94      	ite	ls
    522e:	2300      	movls	r3, #0
    5230:	2301      	movhi	r3, #1
    5232:	e000      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    5234:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5236:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    523a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    523c:	2380      	movs	r3, #128	; 0x80
    523e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5242:	4b6f      	ldr	r3, [pc, #444]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    5244:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5248:	2000      	movs	r0, #0
    524a:	76a8      	strb	r0, [r5, #26]
    524c:	e015      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    524e:	2306      	movs	r3, #6
    5250:	e7f1      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    5252:	2305      	movs	r3, #5
    5254:	e7ef      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    5256:	2304      	movs	r3, #4
    5258:	e7ed      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    525a:	2303      	movs	r3, #3
    525c:	e7eb      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    525e:	2302      	movs	r3, #2
    5260:	e7e9      	b.n	5236 <_usb_d_dev_ep_enable+0xe6>
    5262:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5264:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5268:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    526a:	2340      	movs	r3, #64	; 0x40
    526c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    5270:	4b63      	ldr	r3, [pc, #396]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    5272:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5276:	2000      	movs	r0, #0
    5278:	72a8      	strb	r0, [r5, #10]
}
    527a:	bcf0      	pop	{r4, r5, r6, r7}
    527c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    527e:	2106      	movs	r1, #6
    5280:	e7f0      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
    5282:	2105      	movs	r1, #5
    5284:	e7ee      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
    5286:	2104      	movs	r1, #4
    5288:	e7ec      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
    528a:	2103      	movs	r1, #3
    528c:	e7ea      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
    528e:	2102      	movs	r1, #2
    5290:	e7e8      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    5292:	f06f 0011 	mvn.w	r0, #17
    5296:	e7f0      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5298:	f06f 0013 	mvn.w	r0, #19
    529c:	e7ed      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    529e:	f06f 0013 	mvn.w	r0, #19
    52a2:	e7ea      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    52a4:	f06f 0013 	mvn.w	r0, #19
    52a8:	e7e7      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    52aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    52ae:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    52b2:	b2e4      	uxtb	r4, r4
    52b4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    52b6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    52b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    52bc:	4950      	ldr	r1, [pc, #320]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    52be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    52c2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    52c6:	2aff      	cmp	r2, #255	; 0xff
    52c8:	d0e3      	beq.n	5292 <_usb_d_dev_ep_enable+0x142>
    52ca:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    52cc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    52ce:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    52d2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    52d6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52da:	f001 0107 	and.w	r1, r1, #7
    52de:	2901      	cmp	r1, #1
    52e0:	f43f af4d 	beq.w	517e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    52e4:	2e00      	cmp	r6, #0
    52e6:	f6ff af79 	blt.w	51dc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    52ea:	f014 0f07 	tst.w	r4, #7
    52ee:	d1d9      	bne.n	52a4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    52f0:	4e43      	ldr	r6, [pc, #268]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    52f2:	009f      	lsls	r7, r3, #2
    52f4:	18f9      	adds	r1, r7, r3
    52f6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    52fa:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52fe:	f001 0107 	and.w	r1, r1, #7
    5302:	430c      	orrs	r4, r1
    5304:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5308:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    530c:	443b      	add	r3, r7
    530e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5312:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    5316:	4b3b      	ldr	r3, [pc, #236]	; (5404 <_usb_d_dev_ep_enable+0x2b4>)
    5318:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    531c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5320:	d89f      	bhi.n	5262 <_usb_d_dev_ep_enable+0x112>
    5322:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5326:	d8aa      	bhi.n	527e <_usb_d_dev_ep_enable+0x12e>
    5328:	2980      	cmp	r1, #128	; 0x80
    532a:	d8aa      	bhi.n	5282 <_usb_d_dev_ep_enable+0x132>
    532c:	2940      	cmp	r1, #64	; 0x40
    532e:	d8aa      	bhi.n	5286 <_usb_d_dev_ep_enable+0x136>
    5330:	2920      	cmp	r1, #32
    5332:	d8aa      	bhi.n	528a <_usb_d_dev_ep_enable+0x13a>
    5334:	2910      	cmp	r1, #16
    5336:	d8aa      	bhi.n	528e <_usb_d_dev_ep_enable+0x13e>
    5338:	2908      	cmp	r1, #8
    533a:	bf94      	ite	ls
    533c:	2100      	movls	r1, #0
    533e:	2101      	movhi	r1, #1
    5340:	e790      	b.n	5264 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5342:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5346:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5348:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    534c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    534e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    5352:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5354:	2640      	movs	r6, #64	; 0x40
    5356:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    535a:	2180      	movs	r1, #128	; 0x80
    535c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5360:	4f27      	ldr	r7, [pc, #156]	; (5400 <_usb_d_dev_ep_enable+0x2b0>)
    5362:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    5366:	2000      	movs	r0, #0
    5368:	72a8      	strb	r0, [r5, #10]
    536a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    536c:	009c      	lsls	r4, r3, #2
    536e:	18e1      	adds	r1, r4, r3
    5370:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    5374:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    5378:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    537c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    5380:	0152      	lsls	r2, r2, #5
    5382:	18b9      	adds	r1, r7, r2
    5384:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5386:	4423      	add	r3, r4
    5388:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    538c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    5390:	684b      	ldr	r3, [r1, #4]
    5392:	f364 339b 	bfi	r3, r4, #14, #14
    5396:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5398:	684b      	ldr	r3, [r1, #4]
    539a:	f360 030d 	bfi	r3, r0, #0, #14
    539e:	604b      	str	r3, [r1, #4]
    53a0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    53a4:	21b0      	movs	r1, #176	; 0xb0
    53a6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    53aa:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    53ae:	461a      	mov	r2, r3
    53b0:	2310      	movs	r3, #16
    53b2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    53b6:	e760      	b.n	527a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53b8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53bc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53be:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53c2:	2605      	movs	r6, #5
    53c4:	e7c3      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53c6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53ca:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53cc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53d0:	2603      	movs	r6, #3
    53d2:	e7bc      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53d4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53d8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53da:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53de:	2606      	movs	r6, #6
    53e0:	e7b5      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53e2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53e6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53e8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53ec:	2604      	movs	r6, #4
    53ee:	e7ae      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53f0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53f4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53f6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53fa:	2602      	movs	r6, #2
    53fc:	e7a7      	b.n	534e <_usb_d_dev_ep_enable+0x1fe>
    53fe:	bf00      	nop
    5400:	200008c4 	.word	0x200008c4
    5404:	0fffc000 	.word	0x0fffc000

00005408 <_usb_d_dev_ep_stall>:
{
    5408:	b470      	push	{r4, r5, r6}
    540a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    540c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    540e:	f010 000f 	ands.w	r0, r0, #15
    5412:	d008      	beq.n	5426 <_usb_d_dev_ep_stall+0x1e>
    5414:	2b00      	cmp	r3, #0
    5416:	bfb4      	ite	lt
    5418:	1d43      	addlt	r3, r0, #5
    541a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    541c:	2805      	cmp	r0, #5
    541e:	d903      	bls.n	5428 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    5420:	f06f 0011 	mvn.w	r0, #17
    5424:	e018      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    5426:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    5428:	2901      	cmp	r1, #1
    542a:	d017      	beq.n	545c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    542c:	2900      	cmp	r1, #0
    542e:	d03a      	beq.n	54a6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5434:	4a45      	ldr	r2, [pc, #276]	; (554c <_usb_d_dev_ep_stall+0x144>)
    5436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    543a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    543e:	f003 030f 	and.w	r3, r3, #15
    5442:	015b      	lsls	r3, r3, #5
    5444:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5448:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    544c:	2310      	movs	r3, #16
    544e:	40a3      	lsls	r3, r4
    5450:	421a      	tst	r2, r3
    5452:	bf14      	ite	ne
    5454:	2001      	movne	r0, #1
    5456:	2000      	moveq	r0, #0
}
    5458:	bc70      	pop	{r4, r5, r6}
    545a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    545c:	2510      	movs	r5, #16
    545e:	40a5      	lsls	r5, r4
    5460:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5462:	493a      	ldr	r1, [pc, #232]	; (554c <_usb_d_dev_ep_stall+0x144>)
    5464:	009e      	lsls	r6, r3, #2
    5466:	18f2      	adds	r2, r6, r3
    5468:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    546c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5470:	f002 020f 	and.w	r2, r2, #15
    5474:	0150      	lsls	r0, r2, #5
    5476:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    547a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    547e:	2020      	movs	r0, #32
    5480:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5484:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5486:	0152      	lsls	r2, r2, #5
    5488:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    548c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    5490:	4433      	add	r3, r6
    5492:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5496:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    549a:	f042 0208 	orr.w	r2, r2, #8
    549e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    54a2:	2000      	movs	r0, #0
    54a4:	e7d8      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    54a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    54aa:	4928      	ldr	r1, [pc, #160]	; (554c <_usb_d_dev_ep_stall+0x144>)
    54ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    54b0:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    54b4:	f002 020f 	and.w	r2, r2, #15
    54b8:	0151      	lsls	r1, r2, #5
    54ba:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    54be:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    54c2:	2010      	movs	r0, #16
    54c4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    54c6:	4205      	tst	r5, r0
    54c8:	d03c      	beq.n	5544 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    54ca:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54cc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    54d0:	2020      	movs	r0, #32
    54d2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    54d4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    54d6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    54da:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    54de:	4202      	tst	r2, r0
    54e0:	d007      	beq.n	54f2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    54e2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    54e6:	2201      	movs	r2, #1
    54e8:	fa02 f404 	lsl.w	r4, r2, r4
    54ec:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54ee:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    54f2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    54f6:	4815      	ldr	r0, [pc, #84]	; (554c <_usb_d_dev_ep_stall+0x144>)
    54f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    54fc:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    5500:	f002 0207 	and.w	r2, r2, #7
    5504:	2a01      	cmp	r2, #1
    5506:	d00c      	beq.n	5522 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    5508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    550c:	4a0f      	ldr	r2, [pc, #60]	; (554c <_usb_d_dev_ep_stall+0x144>)
    550e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5512:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5516:	f36f 02c3 	bfc	r2, #3, #1
    551a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    551e:	2000      	movs	r0, #0
    5520:	e79a      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5522:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5526:	f012 0f30 	tst.w	r2, #48	; 0x30
    552a:	d10d      	bne.n	5548 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    552c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5530:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5534:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5538:	f36f 02c3 	bfc	r2, #3, #1
    553c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5540:	2000      	movs	r0, #0
    5542:	e789      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
    5544:	2000      	movs	r0, #0
    5546:	e787      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
    5548:	2000      	movs	r0, #0
    554a:	e785      	b.n	5458 <_usb_d_dev_ep_stall+0x50>
    554c:	200008c4 	.word	0x200008c4

00005550 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    5550:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    5552:	f000 040f 	and.w	r4, r0, #15
    5556:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5558:	4a14      	ldr	r2, [pc, #80]	; (55ac <_usb_d_dev_ep_read_req+0x5c>)
    555a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    555c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    555e:	6840      	ldr	r0, [r0, #4]
    5560:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5564:	2c05      	cmp	r4, #5
    5566:	d817      	bhi.n	5598 <_usb_d_dev_ep_read_req+0x48>
    5568:	b1c9      	cbz	r1, 559e <_usb_d_dev_ep_read_req+0x4e>
    556a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    556e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    5572:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5574:	2a11      	cmp	r2, #17
    5576:	d115      	bne.n	55a4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5578:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    557c:	f012 0f10 	tst.w	r2, #16
    5580:	d102      	bne.n	5588 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    5582:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5584:	bc30      	pop	{r4, r5}
    5586:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5588:	682c      	ldr	r4, [r5, #0]
    558a:	686a      	ldr	r2, [r5, #4]
    558c:	600c      	str	r4, [r1, #0]
    558e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5590:	2210      	movs	r2, #16
    5592:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5596:	e7f5      	b.n	5584 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5598:	f06f 0011 	mvn.w	r0, #17
    559c:	e7f2      	b.n	5584 <_usb_d_dev_ep_read_req+0x34>
    559e:	f06f 0011 	mvn.w	r0, #17
    55a2:	e7ef      	b.n	5584 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    55a4:	f06f 0012 	mvn.w	r0, #18
    55a8:	e7ec      	b.n	5584 <_usb_d_dev_ep_read_req+0x34>
    55aa:	bf00      	nop
    55ac:	200008c4 	.word	0x200008c4

000055b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    55b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55b4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    55b6:	7a03      	ldrb	r3, [r0, #8]
    55b8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    55ba:	f013 030f 	ands.w	r3, r3, #15
    55be:	f000 80c2 	beq.w	5746 <_usb_d_dev_ep_trans+0x196>
    55c2:	2e00      	cmp	r6, #0
    55c4:	bfb4      	ite	lt
    55c6:	1d5a      	addlt	r2, r3, #5
    55c8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    55ca:	4614      	mov	r4, r2
    55cc:	4969      	ldr	r1, [pc, #420]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    55ce:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    55d2:	1c55      	adds	r5, r2, #1
    55d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    55d8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    55dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    55e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    55e4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    55e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    55ec:	428a      	cmp	r2, r1
    55ee:	d025      	beq.n	563c <_usb_d_dev_ep_trans+0x8c>
    55f0:	1e55      	subs	r5, r2, #1
    55f2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    55f4:	6841      	ldr	r1, [r0, #4]
    55f6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    55f8:	2b05      	cmp	r3, #5
    55fa:	f200 8092 	bhi.w	5722 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    55fe:	6803      	ldr	r3, [r0, #0]
    5600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5604:	d31c      	bcc.n	5640 <_usb_d_dev_ep_trans+0x90>
    5606:	eb03 0c01 	add.w	ip, r3, r1
    560a:	f8df e180 	ldr.w	lr, [pc, #384]	; 578c <_usb_d_dev_ep_trans+0x1dc>
    560e:	45f4      	cmp	ip, lr
    5610:	d816      	bhi.n	5640 <_usb_d_dev_ep_trans+0x90>
    5612:	f013 0f03 	tst.w	r3, #3
    5616:	d113      	bne.n	5640 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5618:	2e00      	cmp	r6, #0
    561a:	db2a      	blt.n	5672 <_usb_d_dev_ep_trans+0xc2>
    561c:	428a      	cmp	r2, r1
    561e:	f200 809c 	bhi.w	575a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    5622:	b34d      	cbz	r5, 5678 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5624:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5628:	4a52      	ldr	r2, [pc, #328]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    562a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    562e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5632:	2b00      	cmp	r3, #0
    5634:	d07b      	beq.n	572e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5636:	f04f 0800 	mov.w	r8, #0
    563a:	e00c      	b.n	5656 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    563c:	4615      	mov	r5, r2
    563e:	e7d9      	b.n	55f4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    5640:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5644:	4a4b      	ldr	r2, [pc, #300]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    5646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    564e:	2b00      	cmp	r3, #0
    5650:	d06a      	beq.n	5728 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    5652:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5656:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    565a:	4a46      	ldr	r2, [pc, #280]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    565c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5660:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5664:	f013 0f08 	tst.w	r3, #8
    5668:	d009      	beq.n	567e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    566a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    566c:	b003      	add	sp, #12
    566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    5672:	f04f 0800 	mov.w	r8, #0
    5676:	e7ee      	b.n	5656 <_usb_d_dev_ep_trans+0xa6>
    5678:	f04f 0800 	mov.w	r8, #0
    567c:	e7eb      	b.n	5656 <_usb_d_dev_ep_trans+0xa6>
    567e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    5680:	a801      	add	r0, sp, #4
    5682:	4b3d      	ldr	r3, [pc, #244]	; (5778 <_usb_d_dev_ep_trans+0x1c8>)
    5684:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5686:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    568a:	4a3a      	ldr	r2, [pc, #232]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    568c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5690:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5694:	f013 0f40 	tst.w	r3, #64	; 0x40
    5698:	d13c      	bne.n	5714 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    569a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    569e:	4b35      	ldr	r3, [pc, #212]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    56a0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    56a4:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    56a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    56ac:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    56b0:	a801      	add	r0, sp, #4
    56b2:	4b32      	ldr	r3, [pc, #200]	; (577c <_usb_d_dev_ep_trans+0x1cc>)
    56b4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    56b6:	f8da 3000 	ldr.w	r3, [sl]
    56ba:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    56be:	f8da 3004 	ldr.w	r3, [sl, #4]
    56c2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    56c6:	2300      	movs	r3, #0
    56c8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    56cc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    56ce:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    56d2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    56d6:	f368 1345 	bfi	r3, r8, #5, #1
    56da:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    56de:	f89a 3009 	ldrb.w	r3, [sl, #9]
    56e2:	b1e3      	cbz	r3, 571e <_usb_d_dev_ep_trans+0x16e>
    56e4:	fab5 f585 	clz	r5, r5
    56e8:	096d      	lsrs	r5, r5, #5
    56ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    56ee:	4b21      	ldr	r3, [pc, #132]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    56f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    56f4:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    56f8:	f365 1304 	bfi	r3, r5, #4, #1
    56fc:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    5700:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    5702:	f04f 0100 	mov.w	r1, #0
    5706:	4638      	mov	r0, r7
    5708:	bfb4      	ite	lt
    570a:	4b1d      	ldrlt	r3, [pc, #116]	; (5780 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    570c:	4b1d      	ldrge	r3, [pc, #116]	; (5784 <_usb_d_dev_ep_trans+0x1d4>)
    570e:	4798      	blx	r3
	return ERR_NONE;
    5710:	2000      	movs	r0, #0
    5712:	e7ab      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5714:	a801      	add	r0, sp, #4
    5716:	4b19      	ldr	r3, [pc, #100]	; (577c <_usb_d_dev_ep_trans+0x1cc>)
    5718:	4798      	blx	r3
		return USB_BUSY;
    571a:	2001      	movs	r0, #1
    571c:	e7a6      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
    571e:	2500      	movs	r5, #0
    5720:	e7e3      	b.n	56ea <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    5722:	f06f 0011 	mvn.w	r0, #17
    5726:	e7a1      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5728:	f06f 0012 	mvn.w	r0, #18
    572c:	e79e      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    572e:	f06f 0011 	mvn.w	r0, #17
    5732:	e79b      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5734:	f06f 0012 	mvn.w	r0, #18
    5738:	e798      	b.n	566c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    573a:	6841      	ldr	r1, [r0, #4]
    573c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    5740:	4f11      	ldr	r7, [pc, #68]	; (5788 <_usb_d_dev_ep_trans+0x1d8>)
    5742:	2400      	movs	r4, #0
    5744:	e75b      	b.n	55fe <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5746:	4a0b      	ldr	r2, [pc, #44]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    5748:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    574c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5750:	428a      	cmp	r2, r1
    5752:	d0f2      	beq.n	573a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5754:	4f0c      	ldr	r7, [pc, #48]	; (5788 <_usb_d_dev_ep_trans+0x1d8>)
    5756:	2400      	movs	r4, #0
    5758:	e74a      	b.n	55f0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    575a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    575e:	4a05      	ldr	r2, [pc, #20]	; (5774 <_usb_d_dev_ep_trans+0x1c4>)
    5760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5768:	2b00      	cmp	r3, #0
    576a:	d0e3      	beq.n	5734 <_usb_d_dev_ep_trans+0x184>
    576c:	f04f 0801 	mov.w	r8, #1
    5770:	e771      	b.n	5656 <_usb_d_dev_ep_trans+0xa6>
    5772:	bf00      	nop
    5774:	200008c4 	.word	0x200008c4
    5778:	000012b5 	.word	0x000012b5
    577c:	000012c3 	.word	0x000012c3
    5780:	000047e1 	.word	0x000047e1
    5784:	00004965 	.word	0x00004965
    5788:	20000998 	.word	0x20000998
    578c:	20041fff 	.word	0x20041fff

00005790 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5790:	4b07      	ldr	r3, [pc, #28]	; (57b0 <_usb_d_dev_register_callback+0x20>)
    5792:	2900      	cmp	r1, #0
    5794:	bf08      	it	eq
    5796:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5798:	2801      	cmp	r0, #1
    579a:	d004      	beq.n	57a6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    579c:	b910      	cbnz	r0, 57a4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    579e:	4b05      	ldr	r3, [pc, #20]	; (57b4 <_usb_d_dev_register_callback+0x24>)
    57a0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    57a4:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    57a6:	4b03      	ldr	r3, [pc, #12]	; (57b4 <_usb_d_dev_register_callback+0x24>)
    57a8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    57ac:	4770      	bx	lr
    57ae:	bf00      	nop
    57b0:	00004551 	.word	0x00004551
    57b4:	200008c4 	.word	0x200008c4

000057b8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    57b8:	4b0a      	ldr	r3, [pc, #40]	; (57e4 <_usb_d_dev_register_ep_callback+0x2c>)
    57ba:	2900      	cmp	r1, #0
    57bc:	bf08      	it	eq
    57be:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    57c0:	4603      	mov	r3, r0
    57c2:	b138      	cbz	r0, 57d4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    57c4:	2801      	cmp	r0, #1
    57c6:	d009      	beq.n	57dc <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    57c8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    57ca:	bf04      	itt	eq
    57cc:	4b06      	ldreq	r3, [pc, #24]	; (57e8 <_usb_d_dev_register_ep_callback+0x30>)
    57ce:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    57d2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    57d4:	4b04      	ldr	r3, [pc, #16]	; (57e8 <_usb_d_dev_register_ep_callback+0x30>)
    57d6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    57da:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    57dc:	4b02      	ldr	r3, [pc, #8]	; (57e8 <_usb_d_dev_register_ep_callback+0x30>)
    57de:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    57e2:	4770      	bx	lr
    57e4:	00004551 	.word	0x00004551
    57e8:	200008c4 	.word	0x200008c4

000057ec <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    57ec:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57ee:	4b01      	ldr	r3, [pc, #4]	; (57f4 <USB_0_Handler+0x8>)
    57f0:	4798      	blx	r3
    57f2:	bd08      	pop	{r3, pc}
    57f4:	00004b55 	.word	0x00004b55

000057f8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    57f8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57fa:	4b01      	ldr	r3, [pc, #4]	; (5800 <USB_1_Handler+0x8>)
    57fc:	4798      	blx	r3
    57fe:	bd08      	pop	{r3, pc}
    5800:	00004b55 	.word	0x00004b55

00005804 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5804:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5806:	4b01      	ldr	r3, [pc, #4]	; (580c <USB_2_Handler+0x8>)
    5808:	4798      	blx	r3
    580a:	bd08      	pop	{r3, pc}
    580c:	00004b55 	.word	0x00004b55

00005810 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5810:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5812:	4b01      	ldr	r3, [pc, #4]	; (5818 <USB_3_Handler+0x8>)
    5814:	4798      	blx	r3
    5816:	bd08      	pop	{r3, pc}
    5818:	00004b55 	.word	0x00004b55

0000581c <convert_cb_ADC_0>:
volatile static uint8_t ADC_0_conversion_ready = 0;
volatile static uint8_t ADC_1_conversion_ready = 0;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	ADC_0_conversion_ready = 1;
    581c:	2201      	movs	r2, #1
    581e:	4b01      	ldr	r3, [pc, #4]	; (5824 <convert_cb_ADC_0+0x8>)
    5820:	701a      	strb	r2, [r3, #0]
    5822:	4770      	bx	lr
    5824:	20000c3c 	.word	0x20000c3c

00005828 <tx_complete_cb_GRID_LED>:


// DMA SPI CALLBACK
static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
{
	dma_spi_done = 1;
    5828:	2201      	movs	r2, #1
    582a:	4b01      	ldr	r3, [pc, #4]	; (5830 <tx_complete_cb_GRID_LED+0x8>)
    582c:	605a      	str	r2, [r3, #4]
    582e:	4770      	bx	lr
    5830:	20000c3c 	.word	0x20000c3c

00005834 <RTC_Scheduler_tick_cb>:

volatile uint32_t realtime = 0; 

static void RTC_Scheduler_tick_cb(const struct timer_task *const timer_task)
{
	realtime++;
    5834:	4b05      	ldr	r3, [pc, #20]	; (584c <RTC_Scheduler_tick_cb+0x18>)
    5836:	689a      	ldr	r2, [r3, #8]
    5838:	3201      	adds	r2, #1
    583a:	609a      	str	r2, [r3, #8]
	task_counter[task_current]++;
    583c:	7b1a      	ldrb	r2, [r3, #12]
    583e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5842:	691a      	ldr	r2, [r3, #16]
    5844:	3201      	adds	r2, #1
    5846:	611a      	str	r2, [r3, #16]
    5848:	4770      	bx	lr
    584a:	bf00      	nop
    584c:	20000c3c 	.word	0x20000c3c

00005850 <RTC_Scheduler_report_cb>:
}

 static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
 {
 if (reportflag<255) reportflag++;
    5850:	4b06      	ldr	r3, [pc, #24]	; (586c <RTC_Scheduler_report_cb+0x1c>)
    5852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    5856:	b2db      	uxtb	r3, r3
    5858:	2bff      	cmp	r3, #255	; 0xff
    585a:	d006      	beq.n	586a <RTC_Scheduler_report_cb+0x1a>
    585c:	4a03      	ldr	r2, [pc, #12]	; (586c <RTC_Scheduler_report_cb+0x1c>)
    585e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    5862:	3301      	adds	r3, #1
    5864:	b2db      	uxtb	r3, r3
    5866:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    586a:	4770      	bx	lr
    586c:	20000c3c 	.word	0x20000c3c

00005870 <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    5870:	2201      	movs	r2, #1
    5872:	4b02      	ldr	r3, [pc, #8]	; (587c <RTC_Scheduler_ping_cb+0xc>)
    5874:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    5878:	4770      	bx	lr
    587a:	bf00      	nop
    587c:	20000c3c 	.word	0x20000c3c

00005880 <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    5880:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    5882:	4d0d      	ldr	r5, [pc, #52]	; (58b8 <grid_led_set_color+0x38>)
    5884:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    5886:	4285      	cmp	r5, r0
    5888:	d802      	bhi.n	5890 <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    588a:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    588c:	bc30      	pop	{r4, r5}
    588e:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    5890:	4c09      	ldr	r4, [pc, #36]	; (58b8 <grid_led_set_color+0x38>)
    5892:	6c25      	ldr	r5, [r4, #64]	; 0x40
    5894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5898:	0080      	lsls	r0, r0, #2
    589a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    589e:	6c52      	ldr	r2, [r2, #68]	; 0x44
    58a0:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    58a2:	4428      	add	r0, r5
    58a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    58a8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    58aa:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    58ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    58b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    58b2:	6083      	str	r3, [r0, #8]
		return 0;
    58b4:	2000      	movs	r0, #0
    58b6:	e7e9      	b.n	588c <grid_led_set_color+0xc>
    58b8:	20000c3c 	.word	0x20000c3c

000058bc <grid_led_tick>:
/** ================== ANIMATION ==================  */




void grid_led_tick(void){
    58bc:	b470      	push	{r4, r5, r6}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<led_number; j++){
    58be:	4b10      	ldr	r3, [pc, #64]	; (5900 <grid_led_tick+0x44>)
    58c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    58c2:	b1dc      	cbz	r4, 58fc <grid_led_tick+0x40>
					
		uint8_t num = j;
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			led_smart_buffer[num+(led_number*layer)].pha += led_smart_buffer[num+(led_number*layer)].fre; //PHASE + = FREQUENCY		
    58c4:	4b0f      	ldr	r3, [pc, #60]	; (5904 <grid_led_tick+0x48>)
    58c6:	681d      	ldr	r5, [r3, #0]
    58c8:	2300      	movs	r3, #0
    58ca:	4619      	mov	r1, r3
    58cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58d0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    58d4:	442a      	add	r2, r5
    58d6:	7b10      	ldrb	r0, [r2, #12]
    58d8:	7ad6      	ldrb	r6, [r2, #11]
    58da:	4430      	add	r0, r6
    58dc:	72d0      	strb	r0, [r2, #11]
    58de:	4423      	add	r3, r4
    58e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    58e8:	442b      	add	r3, r5
    58ea:	7ada      	ldrb	r2, [r3, #11]
    58ec:	7b18      	ldrb	r0, [r3, #12]
    58ee:	4402      	add	r2, r0
    58f0:	72da      	strb	r2, [r3, #11]
	for (uint8_t j=0; j<led_number; j++){
    58f2:	3101      	adds	r1, #1
    58f4:	b2c9      	uxtb	r1, r1
    58f6:	460b      	mov	r3, r1
    58f8:	42a1      	cmp	r1, r4
    58fa:	d3e7      	bcc.n	58cc <grid_led_tick+0x10>
		}	
	}
	/** END */
	
}
    58fc:	bc70      	pop	{r4, r5, r6}
    58fe:	4770      	bx	lr
    5900:	20000c3c 	.word	0x20000c3c
    5904:	20001b6c 	.word	0x20001b6c

00005908 <grid_led_set_min>:



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5908:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_min.r = r;
    590a:	4c0b      	ldr	r4, [pc, #44]	; (5938 <grid_led_set_min+0x30>)
    590c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    590e:	fb04 0101 	mla	r1, r4, r1, r0
    5912:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    5916:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    591a:	4808      	ldr	r0, [pc, #32]	; (593c <grid_led_set_min+0x34>)
    591c:	6804      	ldr	r4, [r0, #0]
    591e:	5462      	strb	r2, [r4, r1]
	led_smart_buffer[num+(led_number*layer)].color_min.g = g;
    5920:	6802      	ldr	r2, [r0, #0]
    5922:	440a      	add	r2, r1
    5924:	7053      	strb	r3, [r2, #1]
	led_smart_buffer[num+(led_number*layer)].color_min.b = b;	
    5926:	6800      	ldr	r0, [r0, #0]
    5928:	4401      	add	r1, r0
    592a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    592e:	708b      	strb	r3, [r1, #2]
}
    5930:	f85d 4b04 	ldr.w	r4, [sp], #4
    5934:	4770      	bx	lr
    5936:	bf00      	nop
    5938:	20000c3c 	.word	0x20000c3c
    593c:	20001b6c 	.word	0x20001b6c

00005940 <grid_led_set_mid>:

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5940:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_mid.r = r;
    5942:	4c0a      	ldr	r4, [pc, #40]	; (596c <grid_led_set_mid+0x2c>)
    5944:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    5946:	fb04 0101 	mla	r1, r4, r1, r0
    594a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    594e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5952:	4c07      	ldr	r4, [pc, #28]	; (5970 <grid_led_set_mid+0x30>)
    5954:	6820      	ldr	r0, [r4, #0]
    5956:	4408      	add	r0, r1
    5958:	70c2      	strb	r2, [r0, #3]
	led_smart_buffer[num+(led_number*layer)].color_mid.g = g;
    595a:	6820      	ldr	r0, [r4, #0]
    595c:	4401      	add	r1, r0
    595e:	710b      	strb	r3, [r1, #4]
	led_smart_buffer[num+(led_number*layer)].color_mid.b = b;	
    5960:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5964:	714b      	strb	r3, [r1, #5]
}
    5966:	f85d 4b04 	ldr.w	r4, [sp], #4
    596a:	4770      	bx	lr
    596c:	20000c3c 	.word	0x20000c3c
    5970:	20001b6c 	.word	0x20001b6c

00005974 <grid_led_set_max>:

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5974:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_max.r = r;
    5976:	4c09      	ldr	r4, [pc, #36]	; (599c <grid_led_set_max+0x28>)
    5978:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    597a:	fb04 0101 	mla	r1, r4, r1, r0
    597e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    5982:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5986:	4806      	ldr	r0, [pc, #24]	; (59a0 <grid_led_set_max+0x2c>)
    5988:	6800      	ldr	r0, [r0, #0]
    598a:	4401      	add	r1, r0
    598c:	718a      	strb	r2, [r1, #6]
	led_smart_buffer[num+(led_number*layer)].color_max.g = g;
    598e:	71cb      	strb	r3, [r1, #7]
	led_smart_buffer[num+(led_number*layer)].color_max.b = b;	
    5990:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5994:	720b      	strb	r3, [r1, #8]
}
    5996:	f85d 4b04 	ldr.w	r4, [sp], #4
    599a:	4770      	bx	lr
    599c:	20000c3c 	.word	0x20000c3c
    59a0:	20001b6c 	.word	0x20001b6c

000059a4 <grid_led_set_phase>:

void grid_led_set_phase(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].pha = val;
    59a4:	4b06      	ldr	r3, [pc, #24]	; (59c0 <grid_led_set_phase+0x1c>)
    59a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59a8:	fb03 0101 	mla	r1, r3, r1, r0
    59ac:	4b05      	ldr	r3, [pc, #20]	; (59c4 <grid_led_set_phase+0x20>)
    59ae:	681b      	ldr	r3, [r3, #0]
    59b0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59b4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59b8:	4419      	add	r1, r3
    59ba:	72ca      	strb	r2, [r1, #11]
    59bc:	4770      	bx	lr
    59be:	bf00      	nop
    59c0:	20000c3c 	.word	0x20000c3c
    59c4:	20001b6c 	.word	0x20001b6c

000059c8 <grid_led_set_frequency>:
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].fre = val;
    59c8:	4b06      	ldr	r3, [pc, #24]	; (59e4 <grid_led_set_frequency+0x1c>)
    59ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59cc:	fb03 0101 	mla	r1, r3, r1, r0
    59d0:	4b05      	ldr	r3, [pc, #20]	; (59e8 <grid_led_set_frequency+0x20>)
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59d8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59dc:	4419      	add	r1, r3
    59de:	730a      	strb	r2, [r1, #12]
    59e0:	4770      	bx	lr
    59e2:	bf00      	nop
    59e4:	20000c3c 	.word	0x20000c3c
    59e8:	20001b6c 	.word	0x20001b6c

000059ec <grid_led_init>:
uint8_t grid_led_init(uint8_t num){
    59ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59f0:	b083      	sub	sp, #12
    59f2:	4605      	mov	r5, r0
	led_number = num;	
    59f4:	4c5f      	ldr	r4, [pc, #380]	; (5b74 <grid_led_init+0x188>)
    59f6:	63e0      	str	r0, [r4, #60]	; 0x3c
	led_frame_buffer_size = (GRID_LED_RESET_LENGTH + num*3*4);
    59f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    59fc:	0080      	lsls	r0, r0, #2
    59fe:	3090      	adds	r0, #144	; 0x90
    5a00:	63a0      	str	r0, [r4, #56]	; 0x38
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    5a02:	4f5d      	ldr	r7, [pc, #372]	; (5b78 <grid_led_init+0x18c>)
    5a04:	47b8      	blx	r7
    5a06:	4606      	mov	r6, r0
    5a08:	6360      	str	r0, [r4, #52]	; 0x34
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[GRID_LED_RESET_LENGTH];
    5a0a:	f100 0390 	add.w	r3, r0, #144	; 0x90
    5a0e:	f844 3f40 	str.w	r3, [r4, #64]!
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    5a12:	201a      	movs	r0, #26
    5a14:	fb00 f005 	mul.w	r0, r0, r5
    5a18:	47b8      	blx	r7
    5a1a:	4b58      	ldr	r3, [pc, #352]	; (5b7c <grid_led_init+0x190>)
    5a1c:	6018      	str	r0, [r3, #0]
    5a1e:	2100      	movs	r1, #0
    5a20:	b28b      	uxth	r3, r1
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    5a22:	f003 0201 	and.w	r2, r3, #1
    5a26:	2a00      	cmp	r2, #0
    5a28:	bf14      	ite	ne
    5a2a:	f04f 6260 	movne.w	r2, #234881024	; 0xe000000
    5a2e:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    5a32:	f3c3 0040 	ubfx	r0, r3, #1, #1
    5a36:	2800      	cmp	r0, #0
    5a38:	bf14      	ite	ne
    5a3a:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    5a3e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    5a42:	4310      	orrs	r0, r2
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    5a44:	f3c3 0280 	ubfx	r2, r3, #2, #1
    5a48:	2a00      	cmp	r2, #0
    5a4a:	bf14      	ite	ne
    5a4c:	f44f 2260 	movne.w	r2, #917504	; 0xe0000
    5a50:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    5a54:	4302      	orrs	r2, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    5a56:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    5a5a:	2800      	cmp	r0, #0
    5a5c:	bf14      	ite	ne
    5a5e:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    5a62:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    5a66:	4302      	orrs	r2, r0
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    5a68:	f3c3 1000 	ubfx	r0, r3, #4, #1
    5a6c:	2800      	cmp	r0, #0
    5a6e:	bf14      	ite	ne
    5a70:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    5a74:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    5a78:	4310      	orrs	r0, r2
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    5a7a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    5a7e:	2a00      	cmp	r2, #0
    5a80:	bf14      	ite	ne
    5a82:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    5a86:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    5a8a:	4310      	orrs	r0, r2
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    5a8c:	f3c3 1280 	ubfx	r2, r3, #6, #1
    5a90:	2a00      	cmp	r2, #0
    5a92:	bf14      	ite	ne
    5a94:	220e      	movne	r2, #14
    5a96:	2208      	moveq	r2, #8
    5a98:	4302      	orrs	r2, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    5a9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	bf14      	ite	ne
    5aa2:	23e0      	movne	r3, #224	; 0xe0
    5aa4:	2380      	moveq	r3, #128	; 0x80
    5aa6:	4313      	orrs	r3, r2
		led_color_code[i] = temp;
    5aa8:	f844 3f04 	str.w	r3, [r4, #4]!
    5aac:	3101      	adds	r1, #1
	for(uint16_t i=0; i<256; i++){
    5aae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5ab2:	d1b5      	bne.n	5a20 <grid_led_init+0x34>
    5ab4:	1e73      	subs	r3, r6, #1
    5ab6:	368f      	adds	r6, #143	; 0x8f
		led_frame_buffer[i] = LED_CODE_R;
    5ab8:	2200      	movs	r2, #0
    5aba:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5abe:	42b3      	cmp	r3, r6
    5ac0:	d1fb      	bne.n	5aba <grid_led_init+0xce>
	for (uint32_t i = 0; i<led_number; i++){
    5ac2:	2d00      	cmp	r5, #0
    5ac4:	d051      	beq.n	5b6a <grid_led_init+0x17e>
    5ac6:	2600      	movs	r6, #0
		grid_led_set_color(i, 0,0,0);
    5ac8:	4637      	mov	r7, r6
    5aca:	4c2d      	ldr	r4, [pc, #180]	; (5b80 <grid_led_init+0x194>)
    5acc:	463b      	mov	r3, r7
    5ace:	463a      	mov	r2, r7
    5ad0:	4639      	mov	r1, r7
    5ad2:	4630      	mov	r0, r6
    5ad4:	47a0      	blx	r4
	for (uint32_t i = 0; i<led_number; i++){
    5ad6:	3601      	adds	r6, #1
    5ad8:	42b5      	cmp	r5, r6
    5ada:	d1f7      	bne.n	5acc <grid_led_init+0xe0>
	for(uint8_t i = 0; i<led_number; i++){
    5adc:	2e00      	cmp	r6, #0
    5ade:	d044      	beq.n	5b6a <grid_led_init+0x17e>
    5ae0:	2500      	movs	r5, #0
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5ae2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5b8c <grid_led_init+0x1a0>
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5ae6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 5b90 <grid_led_init+0x1a4>
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5aea:	46b1      	mov	r9, r6
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5aec:	2400      	movs	r4, #0
    5aee:	9400      	str	r4, [sp, #0]
    5af0:	4623      	mov	r3, r4
    5af2:	4622      	mov	r2, r4
    5af4:	4621      	mov	r1, r4
    5af6:	4628      	mov	r0, r5
    5af8:	47d8      	blx	fp
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5afa:	237f      	movs	r3, #127	; 0x7f
    5afc:	9300      	str	r3, [sp, #0]
    5afe:	4623      	mov	r3, r4
    5b00:	4622      	mov	r2, r4
    5b02:	4621      	mov	r1, r4
    5b04:	4628      	mov	r0, r5
    5b06:	47d0      	blx	sl
		grid_led_set_max(i, 0, 0x00, 0x00, 0xFF);
    5b08:	23ff      	movs	r3, #255	; 0xff
    5b0a:	9300      	str	r3, [sp, #0]
    5b0c:	4623      	mov	r3, r4
    5b0e:	4622      	mov	r2, r4
    5b10:	4621      	mov	r1, r4
    5b12:	4628      	mov	r0, r5
    5b14:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5b94 <grid_led_init+0x1a8>
    5b18:	47c0      	blx	r8
		grid_led_set_frequency(i, 0, 0);
    5b1a:	4622      	mov	r2, r4
    5b1c:	4621      	mov	r1, r4
    5b1e:	4628      	mov	r0, r5
    5b20:	4e18      	ldr	r6, [pc, #96]	; (5b84 <grid_led_init+0x198>)
    5b22:	47b0      	blx	r6
		grid_led_set_phase(i, 0, 0);
    5b24:	4622      	mov	r2, r4
    5b26:	4621      	mov	r1, r4
    5b28:	4628      	mov	r0, r5
    5b2a:	4f17      	ldr	r7, [pc, #92]	; (5b88 <grid_led_init+0x19c>)
    5b2c:	47b8      	blx	r7
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5b2e:	2202      	movs	r2, #2
    5b30:	9200      	str	r2, [sp, #0]
    5b32:	4613      	mov	r3, r2
    5b34:	2101      	movs	r1, #1
    5b36:	4628      	mov	r0, r5
    5b38:	47d8      	blx	fp
		grid_led_set_mid(i, 1, 0x00, 0x00, 0x00);
    5b3a:	9400      	str	r4, [sp, #0]
    5b3c:	4623      	mov	r3, r4
    5b3e:	4622      	mov	r2, r4
    5b40:	2101      	movs	r1, #1
    5b42:	4628      	mov	r0, r5
    5b44:	47d0      	blx	sl
		grid_led_set_max(i, 1, 0x00, 0x00, 0x00);
    5b46:	9400      	str	r4, [sp, #0]
    5b48:	4623      	mov	r3, r4
    5b4a:	4622      	mov	r2, r4
    5b4c:	2101      	movs	r1, #1
    5b4e:	4628      	mov	r0, r5
    5b50:	47c0      	blx	r8
		grid_led_set_frequency(i, 1, 0);
    5b52:	4622      	mov	r2, r4
    5b54:	2101      	movs	r1, #1
    5b56:	4628      	mov	r0, r5
    5b58:	47b0      	blx	r6
		grid_led_set_phase(i, 1, 0);
    5b5a:	4622      	mov	r2, r4
    5b5c:	2101      	movs	r1, #1
    5b5e:	4628      	mov	r0, r5
    5b60:	47b8      	blx	r7
	for(uint8_t i = 0; i<led_number; i++){
    5b62:	3501      	adds	r5, #1
    5b64:	b2ed      	uxtb	r5, r5
    5b66:	45a9      	cmp	r9, r5
    5b68:	d8c0      	bhi.n	5aec <grid_led_init+0x100>
}
    5b6a:	2000      	movs	r0, #0
    5b6c:	b003      	add	sp, #12
    5b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b72:	bf00      	nop
    5b74:	20000c3c 	.word	0x20000c3c
    5b78:	00008e25 	.word	0x00008e25
    5b7c:	20001b6c 	.word	0x20001b6c
    5b80:	00005881 	.word	0x00005881
    5b84:	000059c9 	.word	0x000059c9
    5b88:	000059a5 	.word	0x000059a5
    5b8c:	00005909 	.word	0x00005909
    5b90:	00005941 	.word	0x00005941
    5b94:	00005975 	.word	0x00005975

00005b98 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    5b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = led_smart_buffer[num+(led_number*layer)].color_min.r;
    5b9c:	4b25      	ldr	r3, [pc, #148]	; (5c34 <grid_led_render+0x9c>)
    5b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5ba0:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5ba4:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    5ba8:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    5bac:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    5bb0:	4a21      	ldr	r2, [pc, #132]	; (5c38 <grid_led_render+0xa0>)
    5bb2:	6814      	ldr	r4, [r2, #0]
    5bb4:	441c      	add	r4, r3
    5bb6:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    5bb8:	2300      	movs	r3, #0
	uint32_t mix_g = 0;
    5bba:	461a      	mov	r2, r3
	uint32_t mix_r = 0;
    5bbc:	4619      	mov	r1, r3
		uint8_t min_g = led_smart_buffer[num+(led_number*layer)].color_min.g;
		uint8_t min_b = led_smart_buffer[num+(led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bbe:	f8df c080 	ldr.w	ip, [pc, #128]	; 5c40 <grid_led_render+0xa8>
    5bc2:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = led_smart_buffer[num+(led_number*layer)].color_max.r;
		uint8_t max_g = led_smart_buffer[num+(led_number*layer)].color_max.g;
		uint8_t max_b = led_smart_buffer[num+(led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[led_smart_buffer[num+(led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bc4:	f81c 9006 	ldrb.w	r9, [ip, r6]
		uint8_t mid_a = mid_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bc8:	4466      	add	r6, ip
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bca:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    5bce:	f896 8200 	ldrb.w	r8, [r6, #512]	; 0x200
    5bd2:	7826      	ldrb	r6, [r4, #0]
    5bd4:	f894 a003 	ldrb.w	sl, [r4, #3]
    5bd8:	fb05 fa0a 	mul.w	sl, r5, sl
    5bdc:	fb09 aa06 	mla	sl, r9, r6, sl
    5be0:	79a6      	ldrb	r6, [r4, #6]
    5be2:	fb08 a606 	mla	r6, r8, r6, sl
    5be6:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    5be8:	7866      	ldrb	r6, [r4, #1]
    5bea:	f894 a004 	ldrb.w	sl, [r4, #4]
    5bee:	fb05 fa0a 	mul.w	sl, r5, sl
    5bf2:	fb09 aa06 	mla	sl, r9, r6, sl
    5bf6:	79e6      	ldrb	r6, [r4, #7]
    5bf8:	fb08 a606 	mla	r6, r8, r6, sl
    5bfc:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    5bfe:	78a6      	ldrb	r6, [r4, #2]
    5c00:	f894 a005 	ldrb.w	sl, [r4, #5]
    5c04:	fb05 f50a 	mul.w	r5, r5, sl
    5c08:	fb09 5606 	mla	r6, r9, r6, r5
    5c0c:	7a25      	ldrb	r5, [r4, #8]
    5c0e:	fb08 6505 	mla	r5, r8, r5, r6
    5c12:	442b      	add	r3, r5
    5c14:	3f01      	subs	r7, #1
    5c16:	4474      	add	r4, lr
	for (uint8_t i = 0; i<2; i++){
    5c18:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    5c1c:	d1d1      	bne.n	5bc2 <grid_led_render+0x2a>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    5c1e:	f3c3 2347 	ubfx	r3, r3, #9, #8
    5c22:	f3c2 2247 	ubfx	r2, r2, #9, #8
    5c26:	f3c1 2147 	ubfx	r1, r1, #9, #8
    5c2a:	4c04      	ldr	r4, [pc, #16]	; (5c3c <grid_led_render+0xa4>)
    5c2c:	47a0      	blx	r4
    5c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c32:	bf00      	nop
    5c34:	20000c3c 	.word	0x20000c3c
    5c38:	20001b6c 	.word	0x20001b6c
    5c3c:	00005881 	.word	0x00005881
    5c40:	20000040 	.word	0x20000040

00005c44 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    5c44:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    5c46:	4b05      	ldr	r3, [pc, #20]	; (5c5c <grid_led_render_all+0x18>)
    5c48:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5c4a:	b135      	cbz	r5, 5c5a <grid_led_render_all+0x16>
    5c4c:	2400      	movs	r4, #0
		
		grid_led_render(i);
    5c4e:	4e04      	ldr	r6, [pc, #16]	; (5c60 <grid_led_render_all+0x1c>)
    5c50:	4620      	mov	r0, r4
    5c52:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    5c54:	3401      	adds	r4, #1
    5c56:	42ac      	cmp	r4, r5
    5c58:	d1fa      	bne.n	5c50 <grid_led_render_all+0xc>
    5c5a:	bd70      	pop	{r4, r5, r6, pc}
    5c5c:	20000c3c 	.word	0x20000c3c
    5c60:	00005b99 	.word	0x00005b99

00005c64 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    5c64:	b538      	push	{r3, r4, r5, lr}
    5c66:	4604      	mov	r4, r0
    5c68:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    5c6a:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    5c6c:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    5c6e:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    5c70:	2300      	movs	r3, #0
    5c72:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    5c74:	0048      	lsls	r0, r1, #1
    5c76:	4b09      	ldr	r3, [pc, #36]	; (5c9c <grid_ain_channel_init+0x38>)
    5c78:	4798      	blx	r3
    5c7a:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c7c:	b14d      	cbz	r5, 5c92 <grid_ain_channel_init+0x2e>
    5c7e:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    5c80:	4619      	mov	r1, r3
    5c82:	6822      	ldr	r2, [r4, #0]
    5c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c88:	3301      	adds	r3, #1
    5c8a:	b2db      	uxtb	r3, r3
    5c8c:	7922      	ldrb	r2, [r4, #4]
    5c8e:	429a      	cmp	r2, r3
    5c90:	d8f7      	bhi.n	5c82 <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    5c92:	2000      	movs	r0, #0
    5c94:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    5c96:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    5c98:	bd38      	pop	{r3, r4, r5, pc}
    5c9a:	bf00      	nop
    5c9c:	00008e25 	.word	0x00008e25

00005ca0 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    5ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ca4:	4605      	mov	r5, r0
    5ca6:	460e      	mov	r6, r1
    5ca8:	4691      	mov	r9, r2
    5caa:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    5cac:	4c0e      	ldr	r4, [pc, #56]	; (5ce8 <grid_ain_init+0x48>)
    5cae:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
	ain_channel_buffer_depth = depth;
    5cb2:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    5cb6:	0100      	lsls	r0, r0, #4
    5cb8:	4b0c      	ldr	r3, [pc, #48]	; (5cec <grid_ain_init+0x4c>)
    5cba:	4798      	blx	r3
    5cbc:	f8c4 0448 	str.w	r0, [r4, #1096]	; 0x448

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cc0:	b175      	cbz	r5, 5ce0 <grid_ain_init+0x40>
    5cc2:	4604      	mov	r4, r0
    5cc4:	3d01      	subs	r5, #1
    5cc6:	b2ed      	uxtb	r5, r5
    5cc8:	3501      	adds	r5, #1
    5cca:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    5cce:	4f08      	ldr	r7, [pc, #32]	; (5cf0 <grid_ain_init+0x50>)
    5cd0:	4643      	mov	r3, r8
    5cd2:	464a      	mov	r2, r9
    5cd4:	4631      	mov	r1, r6
    5cd6:	4620      	mov	r0, r4
    5cd8:	47b8      	blx	r7
    5cda:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cdc:	42ac      	cmp	r4, r5
    5cde:	d1f7      	bne.n	5cd0 <grid_ain_init+0x30>
	}

	return 0;
}
    5ce0:	2000      	movs	r0, #0
    5ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ce6:	bf00      	nop
    5ce8:	20000c3c 	.word	0x20000c3c
    5cec:	00008e25 	.word	0x00008e25
    5cf0:	00005c65 	.word	0x00005c65

00005cf4 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    5cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5cf8:	0100      	lsls	r0, r0, #4
    5cfa:	4b3c      	ldr	r3, [pc, #240]	; (5dec <grid_ain_add_sample+0xf8>)
    5cfc:	f8d3 a448 	ldr.w	sl, [r3, #1096]	; 0x448
    5d00:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d04:	f89c 6004 	ldrb.w	r6, [ip, #4]
    5d08:	2e00      	cmp	r6, #0
    5d0a:	d05b      	beq.n	5dc4 <grid_ain_add_sample+0xd0>
    5d0c:	f85a 5000 	ldr.w	r5, [sl, r0]
    5d10:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    5d12:	2200      	movs	r2, #0
    5d14:	4690      	mov	r8, r2
    5d16:	4691      	mov	r9, r2
    5d18:	4696      	mov	lr, r2
    5d1a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5d1e:	4614      	mov	r4, r2
    5d20:	fa5f fb82 	uxtb.w	fp, r2
    5d24:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    5d28:	441c      	add	r4, r3
		
		if (current > maximum){
    5d2a:	4573      	cmp	r3, lr
    5d2c:	bf84      	itt	hi
    5d2e:	46d8      	movhi	r8, fp
			maximum = current;
    5d30:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    5d32:	42bb      	cmp	r3, r7
    5d34:	bf3c      	itt	cc
    5d36:	46d9      	movcc	r9, fp
			minimum = current;
    5d38:	461f      	movcc	r7, r3
    5d3a:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d3c:	b2d3      	uxtb	r3, r2
    5d3e:	42b3      	cmp	r3, r6
    5d40:	d3ee      	bcc.n	5d20 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    5d42:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    5d46:	b2b6      	uxth	r6, r6
    5d48:	428e      	cmp	r6, r1
    5d4a:	d23f      	bcs.n	5dcc <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    5d4c:	f85a 3000 	ldr.w	r3, [sl, r0]
    5d50:	440c      	add	r4, r1
    5d52:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    5d56:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    5d58:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    5d5c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    5d60:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d64:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d68:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    5d6c:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d6e:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    5d72:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d74:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d76:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    5d78:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d7c:	b29b      	uxth	r3, r3
    5d7e:	408b      	lsls	r3, r1
    5d80:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    5d82:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    5d86:	1b92      	subs	r2, r2, r6
    5d88:	2a00      	cmp	r2, #0
    5d8a:	bfb8      	it	lt
    5d8c:	4252      	neglt	r2, r2
    5d8e:	2601      	movs	r6, #1
    5d90:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5d94:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    5d98:	42be      	cmp	r6, r7
    5d9a:	d020      	beq.n	5dde <grid_ain_add_sample+0xea>
    5d9c:	4282      	cmp	r2, r0
    5d9e:	dc08      	bgt.n	5db2 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    5da0:	2201      	movs	r2, #1
    5da2:	fa02 f505 	lsl.w	r5, r2, r5
    5da6:	fa02 f101 	lsl.w	r1, r2, r1
    5daa:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5dac:	428f      	cmp	r7, r1
    5dae:	d000      	beq.n	5db2 <grid_ain_add_sample+0xbe>
    5db0:	b9c7      	cbnz	r7, 5de4 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    5db2:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    5db6:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    5dba:	2001      	movs	r0, #1
    5dbc:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    5dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    5dc4:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    5dc6:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    5dc8:	2400      	movs	r4, #0
    5dca:	e7ba      	b.n	5d42 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    5dcc:	f85a 3000 	ldr.w	r3, [sl, r0]
    5dd0:	440c      	add	r4, r1
    5dd2:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    5dd6:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    5dd8:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    5ddc:	e7be      	b.n	5d5c <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    5dde:	2000      	movs	r0, #0
    5de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5de4:	2000      	movs	r0, #0
	}
	
}
    5de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dea:	bf00      	nop
    5dec:	20000c3c 	.word	0x20000c3c

00005df0 <convert_cb_ADC_1>:
{
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	b082      	sub	sp, #8
	ADC_1_conversion_ready = 1;
    5df4:	2201      	movs	r2, #1
    5df6:	4b49      	ldr	r3, [pc, #292]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5df8:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	while(ADC_0_conversion_ready==0){}
    5dfc:	461a      	mov	r2, r3
    5dfe:	7813      	ldrb	r3, [r2, #0]
    5e00:	2b00      	cmp	r3, #0
    5e02:	d0fc      	beq.n	5dfe <convert_cb_ADC_1+0xe>
	while(ADC_1_conversion_ready==0){}
    5e04:	4a45      	ldr	r2, [pc, #276]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5e06:	f892 344c 	ldrb.w	r3, [r2, #1100]	; 0x44c
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d0fb      	beq.n	5e06 <convert_cb_ADC_1+0x16>
	uint16_t adcresult_0 = 0;
    5e0e:	2300      	movs	r3, #0
    5e10:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    5e14:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    5e18:	4940      	ldr	r1, [pc, #256]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5e1a:	f891 344d 	ldrb.w	r3, [r1, #1101]	; 0x44d
    5e1e:	4a40      	ldr	r2, [pc, #256]	; (5f20 <convert_cb_ADC_1+0x130>)
    5e20:	18d0      	adds	r0, r2, r3
    5e22:	7a05      	ldrb	r5, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    5e24:	5cd4      	ldrb	r4, [r2, r3]
	grid_module_mux++;
    5e26:	3301      	adds	r3, #1
    5e28:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    5e2a:	f003 0207 	and.w	r2, r3, #7
    5e2e:	f881 244d 	strb.w	r2, [r1, #1101]	; 0x44d
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    5e32:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    5e3a:	4b3a      	ldr	r3, [pc, #232]	; (5f24 <convert_cb_ADC_1+0x134>)
    5e3c:	bf14      	ite	ne
    5e3e:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e42:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5e46:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e4a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    5e4e:	4b35      	ldr	r3, [pc, #212]	; (5f24 <convert_cb_ADC_1+0x134>)
    5e50:	bf14      	ite	ne
    5e52:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e56:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5e5a:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5e60:	4b30      	ldr	r3, [pc, #192]	; (5f24 <convert_cb_ADC_1+0x134>)
    5e62:	bf14      	ite	ne
    5e64:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e68:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    5e6c:	2302      	movs	r3, #2
    5e6e:	f10d 0206 	add.w	r2, sp, #6
    5e72:	2100      	movs	r1, #0
    5e74:	482c      	ldr	r0, [pc, #176]	; (5f28 <convert_cb_ADC_1+0x138>)
    5e76:	4e2d      	ldr	r6, [pc, #180]	; (5f2c <convert_cb_ADC_1+0x13c>)
    5e78:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    5e7a:	2302      	movs	r3, #2
    5e7c:	aa01      	add	r2, sp, #4
    5e7e:	2100      	movs	r1, #0
    5e80:	482b      	ldr	r0, [pc, #172]	; (5f30 <convert_cb_ADC_1+0x140>)
    5e82:	47b0      	blx	r6
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e84:	4b25      	ldr	r3, [pc, #148]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5e86:	442b      	add	r3, r5
    5e88:	f993 2450 	ldrsb.w	r2, [r3, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_REVERSED)){
    5e8c:	f012 0f01 	tst.w	r2, #1
    5e90:	d004      	beq.n	5e9c <convert_cb_ADC_1+0xac>
		adcresult_0 = 65535 - adcresult_0;
    5e92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e96:	43db      	mvns	r3, r3
    5e98:	f8ad 3006 	strh.w	r3, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e9c:	4b1f      	ldr	r3, [pc, #124]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5e9e:	4423      	add	r3, r4
    5ea0:	f993 3450 	ldrsb.w	r3, [r3, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_REVERSED)){
    5ea4:	f013 0f01 	tst.w	r3, #1
    5ea8:	d004      	beq.n	5eb4 <convert_cb_ADC_1+0xc4>
		adcresult_1 = 65535 - adcresult_1;
    5eaa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5eae:	43c9      	mvns	r1, r1
    5eb0:	f8ad 1004 	strh.w	r1, [sp, #4]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5eb4:	f002 0202 	and.w	r2, r2, #2
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_BINARY)){
    5eb8:	b252      	sxtb	r2, r2
    5eba:	b152      	cbz	r2, 5ed2 <convert_cb_ADC_1+0xe2>
		adcresult_0 = (adcresult_0>10000)*65535;
    5ebc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5ec0:	f242 7110 	movw	r1, #10000	; 0x2710
    5ec4:	428a      	cmp	r2, r1
    5ec6:	f04f 32ff 	mov.w	r2, #4294967295
    5eca:	bf98      	it	ls
    5ecc:	2200      	movls	r2, #0
    5ece:	f8ad 2006 	strh.w	r2, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5ed2:	f003 0302 	and.w	r3, r3, #2
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_BINARY)){
    5ed6:	b25b      	sxtb	r3, r3
    5ed8:	b153      	cbz	r3, 5ef0 <convert_cb_ADC_1+0x100>
		adcresult_1 = (adcresult_1>10000)*65535;
    5eda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5ede:	f242 7210 	movw	r2, #10000	; 0x2710
    5ee2:	4293      	cmp	r3, r2
    5ee4:	f04f 33ff 	mov.w	r3, #4294967295
    5ee8:	bf98      	it	ls
    5eea:	2300      	movls	r3, #0
    5eec:	f8ad 3004 	strh.w	r3, [sp, #4]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    5ef0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5ef4:	4628      	mov	r0, r5
    5ef6:	4d0f      	ldr	r5, [pc, #60]	; (5f34 <convert_cb_ADC_1+0x144>)
    5ef8:	47a8      	blx	r5
	grid_ain_add_sample(adc_index_1, adcresult_1);
    5efa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5efe:	4620      	mov	r0, r4
    5f00:	47a8      	blx	r5
	ADC_0_conversion_ready = 0;	
    5f02:	4b06      	ldr	r3, [pc, #24]	; (5f1c <convert_cb_ADC_1+0x12c>)
    5f04:	2200      	movs	r2, #0
    5f06:	701a      	strb	r2, [r3, #0]
	ADC_1_conversion_ready = 0;
    5f08:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	adc_async_start_conversion(&ADC_0);			
    5f0c:	4806      	ldr	r0, [pc, #24]	; (5f28 <convert_cb_ADC_1+0x138>)
    5f0e:	4c0a      	ldr	r4, [pc, #40]	; (5f38 <convert_cb_ADC_1+0x148>)
    5f10:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    5f12:	4807      	ldr	r0, [pc, #28]	; (5f30 <convert_cb_ADC_1+0x140>)
    5f14:	47a0      	blx	r4
}
    5f16:	b002      	add	sp, #8
    5f18:	bd70      	pop	{r4, r5, r6, pc}
    5f1a:	bf00      	nop
    5f1c:	20000c3c 	.word	0x20000c3c
    5f20:	00009d18 	.word	0x00009d18
    5f24:	41008000 	.word	0x41008000
    5f28:	20001338 	.word	0x20001338
    5f2c:	000011ad 	.word	0x000011ad
    5f30:	20001508 	.word	0x20001508
    5f34:	00005cf5 	.word	0x00005cf5
    5f38:	0000128d 	.word	0x0000128d

00005f3c <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5f3c:	4b03      	ldr	r3, [pc, #12]	; (5f4c <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    5f3e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    5f46:	7b00      	ldrb	r0, [r0, #12]
    5f48:	4770      	bx	lr
    5f4a:	bf00      	nop
    5f4c:	20000c3c 	.word	0x20000c3c

00005f50 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    5f50:	4b04      	ldr	r3, [pc, #16]	; (5f64 <grid_ain_get_average+0x14>)
    5f52:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f56:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    5f5a:	2300      	movs	r3, #0
    5f5c:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    5f5e:	8900      	ldrh	r0, [r0, #8]
    5f60:	4770      	bx	lr
    5f62:	bf00      	nop
    5f64:	20000c3c 	.word	0x20000c3c

00005f68 <grid_tel_calculate_event_frequency>:


uint8_t grid_tel_calculate_event_frequency(struct TEL_event_counter* telemetry_event){

	// Save valid frequency data
	telemetry_event->frequency = telemetry_event->frequency_counter;
    5f68:	6843      	ldr	r3, [r0, #4]
    5f6a:	6103      	str	r3, [r0, #16]
	
	
	//Update the freq counter variable
	if(telemetry_event->frequency_counter >= telemetry_event->frequency_reference){
    5f6c:	6882      	ldr	r2, [r0, #8]
    5f6e:	4293      	cmp	r3, r2
		telemetry_event->frequency_counter -= telemetry_event->frequency_reference;
    5f70:	bf2c      	ite	cs
    5f72:	1a9b      	subcs	r3, r3, r2
	}else{
		telemetry_event->frequency_counter = 0;
    5f74:	2300      	movcc	r3, #0
    5f76:	6043      	str	r3, [r0, #4]
	}
	

	// Instant alert feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    5f78:	6842      	ldr	r2, [r0, #4]
    5f7a:	68c0      	ldr	r0, [r0, #12]
		return 1;
	}
	else{
		return 0;
	}	
}
    5f7c:	4282      	cmp	r2, r0
    5f7e:	bf94      	ite	ls
    5f80:	2000      	movls	r0, #0
    5f82:	2001      	movhi	r0, #1
    5f84:	4770      	bx	lr
	...

00005f88 <grid_tel_frequency_tick>:


void grid_tel_frequency_tick(){
    5f88:	b538      	push	{r3, r4, r5, lr}
	
	struct TEL_event_counter* current = grid_tel_event_head;
    5f8a:	4b05      	ldr	r3, [pc, #20]	; (5fa0 <grid_tel_frequency_tick+0x18>)
    5f8c:	f8d3 4460 	ldr.w	r4, [r3, #1120]	; 0x460
	while(current != NULL){
    5f90:	b12c      	cbz	r4, 5f9e <grid_tel_frequency_tick+0x16>
		grid_tel_calculate_event_frequency(current);
    5f92:	4d04      	ldr	r5, [pc, #16]	; (5fa4 <grid_tel_frequency_tick+0x1c>)
    5f94:	4620      	mov	r0, r4
    5f96:	47a8      	blx	r5
		current = current->next;
    5f98:	6964      	ldr	r4, [r4, #20]
	while(current != NULL){
    5f9a:	2c00      	cmp	r4, #0
    5f9c:	d1fa      	bne.n	5f94 <grid_tel_frequency_tick+0xc>
    5f9e:	bd38      	pop	{r3, r4, r5, pc}
    5fa0:	20000c3c 	.word	0x20000c3c
    5fa4:	00005f69 	.word	0x00005f69

00005fa8 <grid_sys_error_intensity>:



uint8_t grid_sys_error_intensity(struct grid_sys_model* mod){
	
	if (mod->error_style == 0){ // TRIANGLE
    5fa8:	f890 33ec 	ldrb.w	r3, [r0, #1004]	; 0x3ec
    5fac:	b123      	cbz	r3, 5fb8 <grid_sys_error_intensity+0x10>
		
		return (125-abs(mod->error_state/2-125))/2;
	}
	else if (mod->error_style == 1){ // SQUARE
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d010      	beq.n	5fd4 <grid_sys_error_intensity+0x2c>
		
		return 255*(mod->error_state/250%2);
	}
	else if (mod->error_style == 2){ // CONST
    5fb2:	2b02      	cmp	r3, #2
    5fb4:	d017      	beq.n	5fe6 <grid_sys_error_intensity+0x3e>
		
		return 255*(mod->error_state>100);
	}
	
	
}
    5fb6:	4770      	bx	lr
		return (125-abs(mod->error_state/2-125))/2;
    5fb8:	f8b0 03ea 	ldrh.w	r0, [r0, #1002]	; 0x3ea
    5fbc:	0840      	lsrs	r0, r0, #1
    5fbe:	387d      	subs	r0, #125	; 0x7d
    5fc0:	2800      	cmp	r0, #0
    5fc2:	bfb8      	it	lt
    5fc4:	4240      	neglt	r0, r0
    5fc6:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    5fca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    5fce:	f3c0 0047 	ubfx	r0, r0, #1, #8
    5fd2:	4770      	bx	lr
		return 255*(mod->error_state/250%2);
    5fd4:	f8b0 03ea 	ldrh.w	r0, [r0, #1002]	; 0x3ea
    5fd8:	4b06      	ldr	r3, [pc, #24]	; (5ff4 <grid_sys_error_intensity+0x4c>)
    5fda:	fba3 3000 	umull	r3, r0, r3, r0
    5fde:	f340 1000 	sbfx	r0, r0, #4, #1
    5fe2:	b2c0      	uxtb	r0, r0
    5fe4:	4770      	bx	lr
		return 255*(mod->error_state>100);
    5fe6:	f8b0 03ea 	ldrh.w	r0, [r0, #1002]	; 0x3ea
    5fea:	2864      	cmp	r0, #100	; 0x64
    5fec:	bf8c      	ite	hi
    5fee:	20ff      	movhi	r0, #255	; 0xff
    5ff0:	2000      	movls	r0, #0
    5ff2:	4770      	bx	lr
    5ff4:	10624dd3 	.word	0x10624dd3

00005ff8 <grid_sys_read_hex_char_value>:


uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    5ff8:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    5ffa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5ffe:	b2d8      	uxtb	r0, r3
    6000:	2809      	cmp	r0, #9
    6002:	d90d      	bls.n	6020 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    6004:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    6008:	b2db      	uxtb	r3, r3
    600a:	2b05      	cmp	r3, #5
    600c:	d903      	bls.n	6016 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    600e:	b131      	cbz	r1, 601e <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    6010:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    6012:	2000      	movs	r0, #0
    6014:	4770      	bx	lr
		result = ascii - 97 + 10;
    6016:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    601a:	b2c0      	uxtb	r0, r0
    601c:	4770      	bx	lr
	uint8_t result = 0;
    601e:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    6020:	4770      	bx	lr
	...

00006024 <grid_sys_read_hex_string_value>:


uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    6024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    6028:	b1c1      	cbz	r1, 605c <grid_sys_read_hex_string_value+0x38>
    602a:	4690      	mov	r8, r2
    602c:	1e45      	subs	r5, r0, #1
    602e:	1e4b      	subs	r3, r1, #1
    6030:	009c      	lsls	r4, r3, #2
    6032:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    6036:	3f02      	subs	r7, #2
    6038:	b2db      	uxtb	r3, r3
    603a:	1aff      	subs	r7, r7, r3
    603c:	00bf      	lsls	r7, r7, #2
    603e:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    6040:	f8df 901c 	ldr.w	r9, [pc, #28]	; 6060 <grid_sys_read_hex_string_value+0x3c>
    6044:	4641      	mov	r1, r8
    6046:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    604a:	47c8      	blx	r9
    604c:	40a0      	lsls	r0, r4
    604e:	4406      	add	r6, r0
    6050:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    6052:	42bc      	cmp	r4, r7
    6054:	d1f6      	bne.n	6044 <grid_sys_read_hex_string_value+0x20>
		

	

	return result;
}
    6056:	4630      	mov	r0, r6
    6058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    605c:	2600      	movs	r6, #0
	return result;
    605e:	e7fa      	b.n	6056 <grid_sys_read_hex_string_value+0x32>
    6060:	00005ff9 	.word	0x00005ff9

00006064 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    6064:	4b36      	ldr	r3, [pc, #216]	; (6140 <grid_sys_get_hwcfg+0xdc>)
    6066:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    606a:	f1b3 3fff 	cmp.w	r3, #4294967295
    606e:	d003      	beq.n	6078 <grid_sys_get_hwcfg+0x14>
	}

	
	return grid_sys_hwfcg;

}
    6070:	4b33      	ldr	r3, [pc, #204]	; (6140 <grid_sys_get_hwcfg+0xdc>)
    6072:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    6076:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    6078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    607c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    607e:	4b31      	ldr	r3, [pc, #196]	; (6144 <grid_sys_get_hwcfg+0xe0>)
    6080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6088:	492f      	ldr	r1, [pc, #188]	; (6148 <grid_sys_get_hwcfg+0xe4>)
    608a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    608e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    6092:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6096:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    609a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    609e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    60a2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    60a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    60aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    60ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    60b2:	4926      	ldr	r1, [pc, #152]	; (614c <grid_sys_get_hwcfg+0xe8>)
    60b4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    60b8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    60bc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    60c4:	2001      	movs	r0, #1
    60c6:	4b22      	ldr	r3, [pc, #136]	; (6150 <grid_sys_get_hwcfg+0xec>)
    60c8:	4798      	blx	r3
    60ca:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    60cc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60ce:	4d1d      	ldr	r5, [pc, #116]	; (6144 <grid_sys_get_hwcfg+0xe0>)
    60d0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    60d4:	4f1e      	ldr	r7, [pc, #120]	; (6150 <grid_sys_get_hwcfg+0xec>)
    60d6:	e00c      	b.n	60f2 <grid_sys_get_hwcfg+0x8e>
			if(i!=7){
    60d8:	2e07      	cmp	r6, #7
    60da:	d027      	beq.n	612c <grid_sys_get_hwcfg+0xc8>
    60dc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    60e0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    60e4:	2001      	movs	r0, #1
    60e6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60e8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    60ec:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    60ee:	2e08      	cmp	r6, #8
    60f0:	d01c      	beq.n	612c <grid_sys_get_hwcfg+0xc8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60f2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    60f6:	2001      	movs	r0, #1
    60f8:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    60fa:	a801      	add	r0, sp, #4
    60fc:	4b15      	ldr	r3, [pc, #84]	; (6154 <grid_sys_get_hwcfg+0xf0>)
    60fe:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6100:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6104:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6108:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    610c:	405c      	eors	r4, r3
    610e:	4014      	ands	r4, r2
    6110:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    6112:	a801      	add	r0, sp, #4
    6114:	4b10      	ldr	r3, [pc, #64]	; (6158 <grid_sys_get_hwcfg+0xf4>)
    6116:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    6118:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    611c:	d0dc      	beq.n	60d8 <grid_sys_get_hwcfg+0x74>
				hwcfg_value |= (1<<i);
    611e:	2301      	movs	r3, #1
    6120:	40b3      	lsls	r3, r6
    6122:	ea43 0808 	orr.w	r8, r3, r8
    6126:	fa5f f888 	uxtb.w	r8, r8
    612a:	e7d5      	b.n	60d8 <grid_sys_get_hwcfg+0x74>
		grid_sys_hwfcg = hwcfg_value;
    612c:	4b04      	ldr	r3, [pc, #16]	; (6140 <grid_sys_get_hwcfg+0xdc>)
    612e:	f8c3 8300 	str.w	r8, [r3, #768]	; 0x300
}
    6132:	4b03      	ldr	r3, [pc, #12]	; (6140 <grid_sys_get_hwcfg+0xdc>)
    6134:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    6138:	b003      	add	sp, #12
    613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    613e:	bf00      	nop
    6140:	20000040 	.word	0x20000040
    6144:	41008000 	.word	0x41008000
    6148:	40002000 	.word	0x40002000
    614c:	40028000 	.word	0x40028000
    6150:	00001335 	.word	0x00001335
    6154:	000012b5 	.word	0x000012b5
    6158:	000012c3 	.word	0x000012c3

0000615c <tx_cb_USART_GRID>:
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(GRID_PORT_t* const por){
	
	grid_sys_tx_counter[por->direction - 0x11]++;
    615c:	7943      	ldrb	r3, [r0, #5]
    615e:	f1a3 0211 	sub.w	r2, r3, #17
    6162:	4b18      	ldr	r3, [pc, #96]	; (61c4 <tx_cb_USART_GRID+0x68>)
    6164:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6168:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
    616c:	3201      	adds	r2, #1
    616e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    6172:	7cc3      	ldrb	r3, [r0, #19]
    6174:	2b0f      	cmp	r3, #15
    6176:	d00d      	beq.n	6194 <tx_cb_USART_GRID+0x38>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    6178:	2b0e      	cmp	r3, #14
    617a:	d017      	beq.n	61ac <tx_cb_USART_GRID+0x50>
    617c:	f100 0311 	add.w	r3, r0, #17
    6180:	f100 01d9 	add.w	r1, r0, #217	; 0xd9
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    6184:	2200      	movs	r2, #0
    6186:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    618a:	428b      	cmp	r3, r1
    618c:	d1fb      	bne.n	6186 <tx_cb_USART_GRID+0x2a>
		}
		
		por->tx_double_buffer_status = 0;
    618e:	2300      	movs	r3, #0
    6190:	8103      	strh	r3, [r0, #8]
    6192:	4770      	bx	lr
    6194:	f100 0311 	add.w	r3, r0, #17
    6198:	f100 01d9 	add.w	r1, r0, #217	; 0xd9
			por->tx_double_buffer[i] = 0;
    619c:	2200      	movs	r2, #0
    619e:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    61a2:	428b      	cmp	r3, r1
    61a4:	d1fb      	bne.n	619e <tx_cb_USART_GRID+0x42>
		por->tx_double_buffer_status = 0;
    61a6:	2300      	movs	r3, #0
    61a8:	8103      	strh	r3, [r0, #8]
    61aa:	4770      	bx	lr
    61ac:	f100 0311 	add.w	r3, r0, #17
    61b0:	f100 01d9 	add.w	r1, r0, #217	; 0xd9
			por->tx_double_buffer[i] = 0;
    61b4:	2200      	movs	r2, #0
    61b6:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    61ba:	428b      	cmp	r3, r1
    61bc:	d1fb      	bne.n	61b6 <tx_cb_USART_GRID+0x5a>
		por->tx_double_buffer_status = 0;
    61be:	2300      	movs	r3, #0
    61c0:	8103      	strh	r3, [r0, #8]
    61c2:	4770      	bx	lr
    61c4:	20000c3c 	.word	0x20000c3c

000061c8 <tx_cb_USART_GRID_W>:
{
    61c8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    61ca:	4802      	ldr	r0, [pc, #8]	; (61d4 <tx_cb_USART_GRID_W+0xc>)
    61cc:	4b02      	ldr	r3, [pc, #8]	; (61d8 <tx_cb_USART_GRID_W+0x10>)
    61ce:	4798      	blx	r3
    61d0:	bd08      	pop	{r3, pc}
    61d2:	bf00      	nop
    61d4:	20002144 	.word	0x20002144
    61d8:	0000615d 	.word	0x0000615d

000061dc <tx_cb_USART_GRID_S>:
{
    61dc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    61de:	4802      	ldr	r0, [pc, #8]	; (61e8 <tx_cb_USART_GRID_S+0xc>)
    61e0:	4b02      	ldr	r3, [pc, #8]	; (61ec <tx_cb_USART_GRID_S+0x10>)
    61e2:	4798      	blx	r3
    61e4:	bd08      	pop	{r3, pc}
    61e6:	bf00      	nop
    61e8:	20002324 	.word	0x20002324
    61ec:	0000615d 	.word	0x0000615d

000061f0 <tx_cb_USART_GRID_E>:
{
    61f0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    61f2:	4802      	ldr	r0, [pc, #8]	; (61fc <tx_cb_USART_GRID_E+0xc>)
    61f4:	4b02      	ldr	r3, [pc, #8]	; (6200 <tx_cb_USART_GRID_E+0x10>)
    61f6:	4798      	blx	r3
    61f8:	bd08      	pop	{r3, pc}
    61fa:	bf00      	nop
    61fc:	200027a8 	.word	0x200027a8
    6200:	0000615d 	.word	0x0000615d

00006204 <tx_cb_USART_GRID_N>:
{
    6204:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    6206:	4802      	ldr	r0, [pc, #8]	; (6210 <tx_cb_USART_GRID_N+0xc>)
    6208:	4b02      	ldr	r3, [pc, #8]	; (6214 <tx_cb_USART_GRID_N+0x10>)
    620a:	4798      	blx	r3
    620c:	bd08      	pop	{r3, pc}
    620e:	bf00      	nop
    6210:	20001990 	.word	0x20001990
    6214:	0000615d 	.word	0x0000615d

00006218 <grid_sys_calculate_checksum>:
}

uint8_t grid_sys_calculate_checksum(char* str, uint32_t len){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<len; i++){
    6218:	b141      	cbz	r1, 622c <grid_sys_calculate_checksum+0x14>
    621a:	4603      	mov	r3, r0
    621c:	1841      	adds	r1, r0, r1
    621e:	2000      	movs	r0, #0
		checksum ^= str[i]; 
    6220:	f813 2b01 	ldrb.w	r2, [r3], #1
    6224:	4050      	eors	r0, r2
	for (uint32_t i=0; i<len; i++){
    6226:	428b      	cmp	r3, r1
    6228:	d1fa      	bne.n	6220 <grid_sys_calculate_checksum+0x8>
    622a:	4770      	bx	lr
	uint8_t checksum = 0;
    622c:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    622e:	4770      	bx	lr

00006230 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    6230:	b538      	push	{r3, r4, r5, lr}
    6232:	4604      	mov	r4, r0
    6234:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    6236:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    6238:	2300      	movs	r3, #0
    623a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    623c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    623e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    6240:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    6242:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    6244:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    6246:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    6248:	4608      	mov	r0, r1
    624a:	4b08      	ldr	r3, [pc, #32]	; (626c <grid_buffer_init+0x3c>)
    624c:	4798      	blx	r3
    624e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    6250:	b900      	cbnz	r0, 6254 <grid_buffer_init+0x24>
    6252:	e7fe      	b.n	6252 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    6254:	b145      	cbz	r5, 6268 <grid_buffer_init+0x38>
    6256:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    6258:	4619      	mov	r1, r3
    625a:	6862      	ldr	r2, [r4, #4]
    625c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    625e:	3301      	adds	r3, #1
    6260:	b29b      	uxth	r3, r3
    6262:	8822      	ldrh	r2, [r4, #0]
    6264:	429a      	cmp	r2, r3
    6266:	d8f8      	bhi.n	625a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    6268:	2001      	movs	r0, #1
    626a:	bd38      	pop	{r3, r4, r5, pc}
    626c:	00008e25 	.word	0x00008e25

00006270 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    6270:	8903      	ldrh	r3, [r0, #8]
    6272:	8a02      	ldrh	r2, [r0, #16]
    6274:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    6276:	bf8f      	iteee	hi
    6278:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    627a:	8800      	ldrhls	r0, [r0, #0]
    627c:	18c0      	addls	r0, r0, r3
    627e:	1a80      	subls	r0, r0, r2
    6280:	b280      	uxth	r0, r0

	return space;

	
	
}
    6282:	4770      	bx	lr

00006284 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(GRID_BUFFER_t* buf, uint16_t length){
    6284:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    6286:	8903      	ldrh	r3, [r0, #8]
    6288:	8a02      	ldrh	r2, [r0, #16]
    628a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    628c:	bf9c      	itt	ls
    628e:	8804      	ldrhls	r4, [r0, #0]
    6290:	191b      	addls	r3, r3, r4
    6292:	1a9b      	subs	r3, r3, r2
    6294:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    6296:	428b      	cmp	r3, r1
    6298:	d90a      	bls.n	62b0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    629a:	440a      	add	r2, r1
    629c:	8804      	ldrh	r4, [r0, #0]
    629e:	fb92 f3f4 	sdiv	r3, r2, r4
    62a2:	fb04 2213 	mls	r2, r4, r3, r2
    62a6:	8242      	strh	r2, [r0, #18]
		
		return length;
    62a8:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    62aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    62ae:	4770      	bx	lr
		return 0; // failed
    62b0:	2000      	movs	r0, #0
    62b2:	e7fa      	b.n	62aa <grid_buffer_write_init+0x26>

000062b4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(GRID_BUFFER_t* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    62b4:	8a83      	ldrh	r3, [r0, #20]
    62b6:	6842      	ldr	r2, [r0, #4]
    62b8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    62ba:	8a83      	ldrh	r3, [r0, #20]
    62bc:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    62be:	b29b      	uxth	r3, r3
    62c0:	8801      	ldrh	r1, [r0, #0]
    62c2:	fbb3 f2f1 	udiv	r2, r3, r1
    62c6:	fb01 3312 	mls	r3, r1, r2, r3
    62ca:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    62cc:	2001      	movs	r0, #1
    62ce:	4770      	bx	lr

000062d0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(GRID_BUFFER_t* buf){
	
	if (buf->write_active == buf->write_stop){
    62d0:	8a83      	ldrh	r3, [r0, #20]
    62d2:	8a42      	ldrh	r2, [r0, #18]
    62d4:	429a      	cmp	r2, r3
    62d6:	d000      	beq.n	62da <grid_buffer_write_acknowledge+0xa>
    62d8:	e7fe      	b.n	62d8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    62da:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    62dc:	2001      	movs	r0, #1
    62de:	4770      	bx	lr

000062e0 <grid_sys_ping>:


void grid_sys_ping(GRID_PORT_t* por){
    62e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62e4:	b08a      	sub	sp, #40	; 0x28
    62e6:	4606      	mov	r6, r0
	
	char str[20];
	uint8_t len = 0;
	
	// Create the packet
	sprintf(str, "%c%c%c%c%08x%c", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    62e8:	7944      	ldrb	r4, [r0, #5]
    62ea:	4b1e      	ldr	r3, [pc, #120]	; (6364 <grid_sys_ping+0x84>)
    62ec:	4798      	blx	r3
    62ee:	2304      	movs	r3, #4
    62f0:	9303      	str	r3, [sp, #12]
    62f2:	9002      	str	r0, [sp, #8]
    62f4:	9401      	str	r4, [sp, #4]
    62f6:	2307      	movs	r3, #7
    62f8:	9300      	str	r3, [sp, #0]
    62fa:	230e      	movs	r3, #14
    62fc:	2201      	movs	r2, #1
    62fe:	491a      	ldr	r1, [pc, #104]	; (6368 <grid_sys_ping+0x88>)
    6300:	a805      	add	r0, sp, #20
    6302:	f8df 8080 	ldr.w	r8, [pc, #128]	; 6384 <grid_sys_ping+0xa4>
    6306:	47c0      	blx	r8
	
	// Calculate packet length
	len = strlen(str);
    6308:	a805      	add	r0, sp, #20
    630a:	4d18      	ldr	r5, [pc, #96]	; (636c <grid_sys_ping+0x8c>)
    630c:	47a8      	blx	r5
    630e:	b2c4      	uxtb	r4, r0
	
	// Concatonate the calculated CHECKSUM + \n
	sprintf(&str[len], "%02x\n", grid_sys_calculate_checksum(str, len));
    6310:	ab05      	add	r3, sp, #20
    6312:	191f      	adds	r7, r3, r4
    6314:	4621      	mov	r1, r4
    6316:	4618      	mov	r0, r3
    6318:	4b15      	ldr	r3, [pc, #84]	; (6370 <grid_sys_ping+0x90>)
    631a:	4798      	blx	r3
    631c:	4602      	mov	r2, r0
    631e:	4915      	ldr	r1, [pc, #84]	; (6374 <grid_sys_ping+0x94>)
    6320:	4638      	mov	r0, r7
    6322:	47c0      	blx	r8
	
	// Calculate the new packet length
	len += strlen(&str[len]);
    6324:	4638      	mov	r0, r7
    6326:	47a8      	blx	r5
	
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, len)){
    6328:	f506 76d2 	add.w	r6, r6, #420	; 0x1a4
	len += strlen(&str[len]);
    632c:	4420      	add	r0, r4
	if (grid_buffer_write_init(&por->tx_buffer, len)){
    632e:	b2c5      	uxtb	r5, r0
    6330:	4629      	mov	r1, r5
    6332:	4630      	mov	r0, r6
    6334:	4b10      	ldr	r3, [pc, #64]	; (6378 <grid_sys_ping+0x98>)
    6336:	4798      	blx	r3
    6338:	b180      	cbz	r0, 635c <grid_sys_ping+0x7c>
		
		for(uint16_t i = 0; i<len; i++){
    633a:	b165      	cbz	r5, 6356 <grid_sys_ping+0x76>
    633c:	f10d 0413 	add.w	r4, sp, #19
    6340:	3d01      	subs	r5, #1
    6342:	ab05      	add	r3, sp, #20
    6344:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, str[i]);
    6348:	4f0c      	ldr	r7, [pc, #48]	; (637c <grid_sys_ping+0x9c>)
    634a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    634e:	4630      	mov	r0, r6
    6350:	47b8      	blx	r7
		for(uint16_t i = 0; i<len; i++){
    6352:	42ac      	cmp	r4, r5
    6354:	d1f9      	bne.n	634a <grid_sys_ping+0x6a>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    6356:	4630      	mov	r0, r6
    6358:	4b09      	ldr	r3, [pc, #36]	; (6380 <grid_sys_ping+0xa0>)
    635a:	4798      	blx	r3
	}
				
	
}
    635c:	b00a      	add	sp, #40	; 0x28
    635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6362:	bf00      	nop
    6364:	00006065 	.word	0x00006065
    6368:	00009e20 	.word	0x00009e20
    636c:	00009091 	.word	0x00009091
    6370:	00006219 	.word	0x00006219
    6374:	00009e30 	.word	0x00009e30
    6378:	00006285 	.word	0x00006285
    637c:	000062b5 	.word	0x000062b5
    6380:	000062d1 	.word	0x000062d1
    6384:	00009049 	.word	0x00009049

00006388 <grid_sys_ping_all>:
void grid_sys_ping_all(){
    6388:	b510      	push	{r4, lr}
	grid_sys_ping(&GRID_PORT_N);
    638a:	4805      	ldr	r0, [pc, #20]	; (63a0 <grid_sys_ping_all+0x18>)
    638c:	4c05      	ldr	r4, [pc, #20]	; (63a4 <grid_sys_ping_all+0x1c>)
    638e:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_E);
    6390:	4805      	ldr	r0, [pc, #20]	; (63a8 <grid_sys_ping_all+0x20>)
    6392:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_S);
    6394:	4805      	ldr	r0, [pc, #20]	; (63ac <grid_sys_ping_all+0x24>)
    6396:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_W);
    6398:	4805      	ldr	r0, [pc, #20]	; (63b0 <grid_sys_ping_all+0x28>)
    639a:	47a0      	blx	r4
    639c:	bd10      	pop	{r4, pc}
    639e:	bf00      	nop
    63a0:	20001990 	.word	0x20001990
    63a4:	000062e1 	.word	0x000062e1
    63a8:	200027a8 	.word	0x200027a8
    63ac:	20002324 	.word	0x20002324
    63b0:	20002144 	.word	0x20002144

000063b4 <grid_buffer_read_size>:
}


uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    63b4:	8983      	ldrh	r3, [r0, #12]
    63b6:	8942      	ldrh	r2, [r0, #10]
    63b8:	429a      	cmp	r2, r3
    63ba:	d000      	beq.n	63be <grid_buffer_read_size+0xa>
    63bc:	e7fe      	b.n	63bc <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    63be:	8902      	ldrh	r2, [r0, #8]
    63c0:	429a      	cmp	r2, r3
    63c2:	d000      	beq.n	63c6 <grid_buffer_read_size+0x12>
    63c4:	e7fe      	b.n	63c4 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
    63c6:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    63c8:	8a05      	ldrh	r5, [r0, #16]
    63ca:	42ab      	cmp	r3, r5
    63cc:	d025      	beq.n	641a <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    63ce:	8804      	ldrh	r4, [r0, #0]
    63d0:	b1fc      	cbz	r4, 6412 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    63d2:	4626      	mov	r6, r4
    63d4:	fb93 f2f4 	sdiv	r2, r3, r4
    63d8:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    63dc:	b291      	uxth	r1, r2
    63de:	428d      	cmp	r5, r1
    63e0:	d01d      	beq.n	641e <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    63e2:	6840      	ldr	r0, [r0, #4]
    63e4:	5c42      	ldrb	r2, [r0, r1]
    63e6:	2a0a      	cmp	r2, #10
    63e8:	d114      	bne.n	6414 <grid_buffer_read_size+0x60>
    63ea:	2300      	movs	r3, #0
						
			return i+1; // packet length
    63ec:	3301      	adds	r3, #1
    63ee:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    63f0:	bcf0      	pop	{r4, r5, r6, r7}
    63f2:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    63f4:	fb92 f1f6 	sdiv	r1, r2, r6
    63f8:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    63fc:	b28f      	uxth	r7, r1
    63fe:	42bd      	cmp	r5, r7
    6400:	d00f      	beq.n	6422 <grid_buffer_read_size+0x6e>
    6402:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6404:	5dc1      	ldrb	r1, [r0, r7]
    6406:	290a      	cmp	r1, #10
    6408:	d0f0      	beq.n	63ec <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    640a:	3301      	adds	r3, #1
    640c:	b29b      	uxth	r3, r3
    640e:	42a3      	cmp	r3, r4
    6410:	d1f0      	bne.n	63f4 <grid_buffer_read_size+0x40>
    6412:	e7fe      	b.n	6412 <grid_buffer_read_size+0x5e>
    6414:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    6416:	2300      	movs	r3, #0
    6418:	e7f7      	b.n	640a <grid_buffer_read_size+0x56>
		return 0;
    641a:	2000      	movs	r0, #0
    641c:	e7e8      	b.n	63f0 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    641e:	2000      	movs	r0, #0
    6420:	e7e6      	b.n	63f0 <grid_buffer_read_size+0x3c>
    6422:	2000      	movs	r0, #0
    6424:	e7e4      	b.n	63f0 <grid_buffer_read_size+0x3c>

00006426 <grid_buffer_read_init>:



uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    6426:	8982      	ldrh	r2, [r0, #12]
    6428:	8943      	ldrh	r3, [r0, #10]
    642a:	4293      	cmp	r3, r2
    642c:	d000      	beq.n	6430 <grid_buffer_read_init+0xa>
    642e:	e7fe      	b.n	642e <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    6430:	8903      	ldrh	r3, [r0, #8]
    6432:	4293      	cmp	r3, r2
    6434:	d000      	beq.n	6438 <grid_buffer_read_init+0x12>
    6436:	e7fe      	b.n	6436 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
    6438:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    643a:	8a05      	ldrh	r5, [r0, #16]
    643c:	42aa      	cmp	r2, r5
    643e:	d031      	beq.n	64a4 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6440:	8804      	ldrh	r4, [r0, #0]
    6442:	b35c      	cbz	r4, 649c <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6444:	4626      	mov	r6, r4
    6446:	fb92 f3f4 	sdiv	r3, r2, r4
    644a:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    644e:	b299      	uxth	r1, r3
    6450:	428d      	cmp	r5, r1
    6452:	d029      	beq.n	64a8 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    6454:	6847      	ldr	r7, [r0, #4]
    6456:	460b      	mov	r3, r1
    6458:	5c79      	ldrb	r1, [r7, r1]
    645a:	290a      	cmp	r1, #10
    645c:	d11f      	bne.n	649e <grid_buffer_read_init+0x78>
    645e:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    6460:	3301      	adds	r3, #1
    6462:	fb93 f2f4 	sdiv	r2, r3, r4
    6466:	fb04 3312 	mls	r3, r4, r2, r3
    646a:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    646c:	1c4b      	adds	r3, r1, #1
    646e:	b29b      	uxth	r3, r3
    6470:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    6472:	4618      	mov	r0, r3
    6474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6476:	fb92 f3f6 	sdiv	r3, r2, r6
    647a:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    647e:	fa1f fe83 	uxth.w	lr, r3
    6482:	4575      	cmp	r5, lr
    6484:	d012      	beq.n	64ac <grid_buffer_read_init+0x86>
    6486:	4673      	mov	r3, lr
    6488:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    648a:	f817 e00e 	ldrb.w	lr, [r7, lr]
    648e:	f1be 0f0a 	cmp.w	lr, #10
    6492:	d0e5      	beq.n	6460 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6494:	3101      	adds	r1, #1
    6496:	b289      	uxth	r1, r1
    6498:	42a1      	cmp	r1, r4
    649a:	d1ec      	bne.n	6476 <grid_buffer_read_init+0x50>
    649c:	e7fe      	b.n	649c <grid_buffer_read_init+0x76>
    649e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    64a0:	2100      	movs	r1, #0
    64a2:	e7f7      	b.n	6494 <grid_buffer_read_init+0x6e>
		return 0;
    64a4:	2300      	movs	r3, #0
    64a6:	e7e4      	b.n	6472 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    64a8:	2300      	movs	r3, #0
    64aa:	e7e2      	b.n	6472 <grid_buffer_read_init+0x4c>
    64ac:	2300      	movs	r3, #0
    64ae:	e7e0      	b.n	6472 <grid_buffer_read_init+0x4c>

000064b0 <grid_buffer_read_character>:


uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    64b0:	8983      	ldrh	r3, [r0, #12]
    64b2:	8941      	ldrh	r1, [r0, #10]
    64b4:	4299      	cmp	r1, r3
    64b6:	d00e      	beq.n	64d6 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
    64b8:	b410      	push	{r4}
    64ba:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    64bc:	6841      	ldr	r1, [r0, #4]
    64be:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    64c0:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    64c2:	b29b      	uxth	r3, r3
    64c4:	8814      	ldrh	r4, [r2, #0]
    64c6:	fbb3 f1f4 	udiv	r1, r3, r4
    64ca:	fb04 3311 	mls	r3, r4, r1, r3
    64ce:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    64d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    64d4:	4770      	bx	lr
    64d6:	e7fe      	b.n	64d6 <grid_buffer_read_character+0x26>

000064d8 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(GRID_BUFFER_t* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    64d8:	8983      	ldrh	r3, [r0, #12]
    64da:	8942      	ldrh	r2, [r0, #10]
    64dc:	429a      	cmp	r2, r3
    64de:	d000      	beq.n	64e2 <grid_buffer_read_acknowledge+0xa>
    64e0:	e7fe      	b.n	64e0 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    64e2:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    64e4:	2001      	movs	r0, #1
    64e6:	4770      	bx	lr

000064e8 <grid_port_init>:
	return 1;
}



void grid_port_init(GRID_PORT_t* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    64e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64ec:	4604      	mov	r4, r0
    64ee:	4690      	mov	r8, r2
    64f0:	461f      	mov	r7, r3
    64f2:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    64f6:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
    64fa:	4e10      	ldr	r6, [pc, #64]	; (653c <grid_port_init+0x54>)
    64fc:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    64fe:	4641      	mov	r1, r8
    6500:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
    6504:	47b0      	blx	r6
	
	por->dma_channel = dma;
    6506:	f89d 3020 	ldrb.w	r3, [sp, #32]
    650a:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    650c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    6510:	7163      	strb	r3, [r4, #5]
	
	por->usart	= usart;
    6512:	6027      	str	r7, [r4, #0]
	por->type		= type;
    6514:	7125      	strb	r5, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    6516:	2300      	movs	r3, #0
    6518:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    651a:	81a3      	strh	r3, [r4, #12]
	
	por->partner_dx = 0;
    651c:	f884 31d9 	strb.w	r3, [r4, #473]	; 0x1d9
	por->partner_dy = 0;
    6520:	f884 31da 	strb.w	r3, [r4, #474]	; 0x1da
	por->partner_fi = 0;
    6524:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
	
	por->partner_hwcfg = 0;
    6528:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	por->partner_status = 1;
	
	if (type == GRID_PORT_TYPE_USART){	
    652c:	2d01      	cmp	r5, #1
	por->partner_status = 1;
    652e:	bf14      	ite	ne
    6530:	2301      	movne	r3, #1
		por->partner_status = 0;
    6532:	2300      	moveq	r3, #0
    6534:	f884 31db 	strb.w	r3, [r4, #475]	; 0x1db
    6538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    653c:	00006231 	.word	0x00006231

00006540 <grid_port_init_all>:
}




void grid_port_init_all(){
    6540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6544:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    6546:	2600      	movs	r6, #0
    6548:	9602      	str	r6, [sp, #8]
    654a:	2311      	movs	r3, #17
    654c:	9301      	str	r3, [sp, #4]
    654e:	2401      	movs	r4, #1
    6550:	9400      	str	r4, [sp, #0]
    6552:	4b25      	ldr	r3, [pc, #148]	; (65e8 <grid_port_init_all+0xa8>)
    6554:	f44f 7248 	mov.w	r2, #800	; 0x320
    6558:	4611      	mov	r1, r2
    655a:	4824      	ldr	r0, [pc, #144]	; (65ec <grid_port_init_all+0xac>)
    655c:	4d24      	ldr	r5, [pc, #144]	; (65f0 <grid_port_init_all+0xb0>)
    655e:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    6560:	9402      	str	r4, [sp, #8]
    6562:	2312      	movs	r3, #18
    6564:	9301      	str	r3, [sp, #4]
    6566:	9400      	str	r4, [sp, #0]
    6568:	4b22      	ldr	r3, [pc, #136]	; (65f4 <grid_port_init_all+0xb4>)
    656a:	f44f 7248 	mov.w	r2, #800	; 0x320
    656e:	4611      	mov	r1, r2
    6570:	4821      	ldr	r0, [pc, #132]	; (65f8 <grid_port_init_all+0xb8>)
    6572:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    6574:	f04f 0902 	mov.w	r9, #2
    6578:	f8cd 9008 	str.w	r9, [sp, #8]
    657c:	2313      	movs	r3, #19
    657e:	9301      	str	r3, [sp, #4]
    6580:	9400      	str	r4, [sp, #0]
    6582:	4b1e      	ldr	r3, [pc, #120]	; (65fc <grid_port_init_all+0xbc>)
    6584:	f44f 7248 	mov.w	r2, #800	; 0x320
    6588:	4611      	mov	r1, r2
    658a:	481d      	ldr	r0, [pc, #116]	; (6600 <grid_port_init_all+0xc0>)
    658c:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    658e:	2703      	movs	r7, #3
    6590:	9702      	str	r7, [sp, #8]
    6592:	2314      	movs	r3, #20
    6594:	9301      	str	r3, [sp, #4]
    6596:	9400      	str	r4, [sp, #0]
    6598:	4b1a      	ldr	r3, [pc, #104]	; (6604 <grid_port_init_all+0xc4>)
    659a:	f44f 7248 	mov.w	r2, #800	; 0x320
    659e:	4611      	mov	r1, r2
    65a0:	4819      	ldr	r0, [pc, #100]	; (6608 <grid_port_init_all+0xc8>)
    65a2:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    65a4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 6610 <grid_port_init_all+0xd0>
    65a8:	f04f 0aff 	mov.w	sl, #255	; 0xff
    65ac:	f8cd a008 	str.w	sl, [sp, #8]
    65b0:	9601      	str	r6, [sp, #4]
    65b2:	9700      	str	r7, [sp, #0]
    65b4:	4633      	mov	r3, r6
    65b6:	f44f 7248 	mov.w	r2, #800	; 0x320
    65ba:	4611      	mov	r1, r2
    65bc:	4640      	mov	r0, r8
    65be:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    65c0:	4f12      	ldr	r7, [pc, #72]	; (660c <grid_port_init_all+0xcc>)
    65c2:	f8cd a008 	str.w	sl, [sp, #8]
    65c6:	9601      	str	r6, [sp, #4]
    65c8:	f8cd 9000 	str.w	r9, [sp]
    65cc:	4633      	mov	r3, r6
    65ce:	f44f 7248 	mov.w	r2, #800	; 0x320
    65d2:	4611      	mov	r1, r2
    65d4:	4638      	mov	r0, r7
    65d6:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    65d8:	f888 41db 	strb.w	r4, [r8, #475]	; 0x1db
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    65dc:	f887 41db 	strb.w	r4, [r7, #475]	; 0x1db
	
	
}
    65e0:	b004      	add	sp, #16
    65e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65e6:	bf00      	nop
    65e8:	200013b4 	.word	0x200013b4
    65ec:	20001990 	.word	0x20001990
    65f0:	000064e9 	.word	0x000064e9
    65f4:	20001364 	.word	0x20001364
    65f8:	200027a8 	.word	0x200027a8
    65fc:	200014b8 	.word	0x200014b8
    6600:	20002324 	.word	0x20002324
    6604:	20001468 	.word	0x20001468
    6608:	20002144 	.word	0x20002144
    660c:	200025cc 	.word	0x200025cc
    6610:	20001b70 	.word	0x20001b70

00006614 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//

uint8_t grid_port_process_inbound(GRID_PORT_t* por){
    6614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6618:	b08f      	sub	sp, #60	; 0x3c
    661a:	af00      	add	r7, sp, #0
    661c:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    661e:	f500 79de 	add.w	r9, r0, #444	; 0x1bc
    6622:	4648      	mov	r0, r9
    6624:	4b4f      	ldr	r3, [pc, #316]	; (6764 <grid_port_process_inbound+0x150>)
    6626:	4798      	blx	r3
	
	if (!packet_size){
    6628:	b920      	cbnz	r0, 6634 <grid_port_process_inbound+0x20>
    662a:	2000      	movs	r0, #0
		}	

		
	}
		
}
    662c:	373c      	adds	r7, #60	; 0x3c
    662e:	46bd      	mov	sp, r7
    6630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6634:	4680      	mov	r8, r0
	}else{
    6636:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    663a:	4b4b      	ldr	r3, [pc, #300]	; (6768 <grid_port_process_inbound+0x154>)
    663c:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    663e:	4b4b      	ldr	r3, [pc, #300]	; (676c <grid_port_process_inbound+0x158>)
    6640:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    6642:	4b4b      	ldr	r3, [pc, #300]	; (6770 <grid_port_process_inbound+0x15c>)
    6644:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    6646:	4b4b      	ldr	r3, [pc, #300]	; (6774 <grid_port_process_inbound+0x160>)
    6648:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    664a:	4b4b      	ldr	r3, [pc, #300]	; (6778 <grid_port_process_inbound+0x164>)
    664c:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    664e:	4b4b      	ldr	r3, [pc, #300]	; (677c <grid_port_process_inbound+0x168>)
    6650:	61fb      	str	r3, [r7, #28]
    6652:	f107 0308 	add.w	r3, r7, #8
    6656:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    665a:	2600      	movs	r6, #0
    665c:	e001      	b.n	6662 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    665e:	428b      	cmp	r3, r1
    6660:	d00e      	beq.n	6680 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    6662:	f853 2b04 	ldr.w	r2, [r3], #4
    6666:	f892 01db 	ldrb.w	r0, [r2, #475]	; 0x1db
    666a:	2800      	cmp	r0, #0
    666c:	d0f7      	beq.n	665e <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    666e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    6672:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    6676:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    667a:	3601      	adds	r6, #1
    667c:	b2f6      	uxtb	r6, r6
    667e:	e7ee      	b.n	665e <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    6680:	2e00      	cmp	r6, #0
    6682:	d05d      	beq.n	6740 <grid_port_process_inbound+0x12c>
    6684:	f107 0a20 	add.w	sl, r7, #32
    6688:	1e74      	subs	r4, r6, #1
    668a:	b2e4      	uxtb	r4, r4
    668c:	3401      	adds	r4, #1
    668e:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    6692:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    6694:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 6794 <grid_port_process_inbound+0x180>
    6698:	e001      	b.n	669e <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    669a:	42a5      	cmp	r5, r4
    669c:	d00c      	beq.n	66b8 <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    669e:	f855 0b04 	ldr.w	r0, [r5], #4
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	4283      	cmp	r3, r0
    66a6:	d0f8      	beq.n	669a <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    66a8:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
    66ac:	47d8      	blx	fp
    66ae:	4580      	cmp	r8, r0
    66b0:	d9f3      	bls.n	669a <grid_port_process_inbound+0x86>
    66b2:	f8d7 d000 	ldr.w	sp, [r7]
    66b6:	e7b8      	b.n	662a <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    66b8:	4648      	mov	r0, r9
    66ba:	4b31      	ldr	r3, [pc, #196]	; (6780 <grid_port_process_inbound+0x16c>)
    66bc:	4798      	blx	r3
    66be:	4580      	cmp	r8, r0
    66c0:	d000      	beq.n	66c4 <grid_port_process_inbound+0xb0>
    66c2:	e7fe      	b.n	66c2 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    66c4:	4c2f      	ldr	r4, [pc, #188]	; (6784 <grid_port_process_inbound+0x170>)
    66c6:	e001      	b.n	66cc <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    66c8:	45aa      	cmp	sl, r5
    66ca:	d03e      	beq.n	674a <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    66cc:	f85a 0b04 	ldr.w	r0, [sl], #4
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	4283      	cmp	r3, r0
    66d4:	d0f8      	beq.n	66c8 <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    66d6:	4641      	mov	r1, r8
    66d8:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
    66dc:	47a0      	blx	r4
    66de:	e7f3      	b.n	66c8 <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    66e0:	42a5      	cmp	r5, r4
    66e2:	d009      	beq.n	66f8 <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    66e4:	f854 0b04 	ldr.w	r0, [r4], #4
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	4283      	cmp	r3, r0
    66ec:	d0f8      	beq.n	66e0 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    66ee:	6839      	ldr	r1, [r7, #0]
    66f0:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
    66f4:	47d8      	blx	fp
    66f6:	e7f3      	b.n	66e0 <grid_port_process_inbound+0xcc>
    66f8:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    66fc:	fa1f f38a 	uxth.w	r3, sl
    6700:	4543      	cmp	r3, r8
    6702:	d208      	bcs.n	6716 <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    6704:	4648      	mov	r0, r9
    6706:	4b20      	ldr	r3, [pc, #128]	; (6788 <grid_port_process_inbound+0x174>)
    6708:	4798      	blx	r3
    670a:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    670c:	2e00      	cmp	r6, #0
    670e:	d0f3      	beq.n	66f8 <grid_port_process_inbound+0xe4>
    6710:	f107 0420 	add.w	r4, r7, #32
    6714:	e7e6      	b.n	66e4 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    6716:	4648      	mov	r0, r9
    6718:	4b1c      	ldr	r3, [pc, #112]	; (678c <grid_port_process_inbound+0x178>)
    671a:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    671c:	2e00      	cmp	r6, #0
    671e:	d085      	beq.n	662c <grid_port_process_inbound+0x18>
    6720:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6724:	4e1a      	ldr	r6, [pc, #104]	; (6790 <grid_port_process_inbound+0x17c>)
    6726:	e002      	b.n	672e <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    6728:	42a5      	cmp	r5, r4
    672a:	f43f af7f 	beq.w	662c <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    672e:	f854 0b04 	ldr.w	r0, [r4], #4
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	4283      	cmp	r3, r0
    6736:	d0f7      	beq.n	6728 <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6738:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
    673c:	47b0      	blx	r6
    673e:	e7f3      	b.n	6728 <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    6740:	4648      	mov	r0, r9
    6742:	4b0f      	ldr	r3, [pc, #60]	; (6780 <grid_port_process_inbound+0x16c>)
    6744:	4798      	blx	r3
    6746:	4540      	cmp	r0, r8
    6748:	d1bb      	bne.n	66c2 <grid_port_process_inbound+0xae>
    674a:	1e75      	subs	r5, r6, #1
    674c:	b2ed      	uxtb	r5, r5
    674e:	f107 0338 	add.w	r3, r7, #56	; 0x38
    6752:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6756:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    6758:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    675c:	f8df b038 	ldr.w	fp, [pc, #56]	; 6798 <grid_port_process_inbound+0x184>
    6760:	e7d0      	b.n	6704 <grid_port_process_inbound+0xf0>
    6762:	bf00      	nop
    6764:	000063b5 	.word	0x000063b5
    6768:	20001990 	.word	0x20001990
    676c:	200027a8 	.word	0x200027a8
    6770:	20002324 	.word	0x20002324
    6774:	20002144 	.word	0x20002144
    6778:	20001b70 	.word	0x20001b70
    677c:	200025cc 	.word	0x200025cc
    6780:	00006427 	.word	0x00006427
    6784:	00006285 	.word	0x00006285
    6788:	000064b1 	.word	0x000064b1
    678c:	000064d9 	.word	0x000064d9
    6790:	000062d1 	.word	0x000062d1
    6794:	00006271 	.word	0x00006271
    6798:	000062b5 	.word	0x000062b5

0000679c <grid_port_process_outbound_usb>:


//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(GRID_PORT_t* por){
    679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    67a0:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    67a4:	4628      	mov	r0, r5
    67a6:	4b0e      	ldr	r3, [pc, #56]	; (67e0 <grid_port_process_outbound_usb+0x44>)
    67a8:	4798      	blx	r3
	
	if (!packet_size){
    67aa:	b908      	cbnz	r0, 67b0 <grid_port_process_outbound_usb+0x14>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    67ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67b0:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    67b2:	4628      	mov	r0, r5
    67b4:	4b0b      	ldr	r3, [pc, #44]	; (67e4 <grid_port_process_outbound_usb+0x48>)
    67b6:	4798      	blx	r3
    67b8:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    67ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 67f4 <grid_port_process_outbound_usb+0x58>
			usb_tx_double_buffer[i] = character;
    67be:	4f0a      	ldr	r7, [pc, #40]	; (67e8 <grid_port_process_outbound_usb+0x4c>)
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    67c0:	4628      	mov	r0, r5
    67c2:	47c0      	blx	r8
			usb_tx_double_buffer[i] = character;
    67c4:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<packet_size; i++){
    67c6:	3401      	adds	r4, #1
    67c8:	b2e4      	uxtb	r4, r4
    67ca:	b2a3      	uxth	r3, r4
    67cc:	429e      	cmp	r6, r3
    67ce:	d8f7      	bhi.n	67c0 <grid_port_process_outbound_usb+0x24>
		cdcdf_acm_write(usb_tx_double_buffer, packet_size);
    67d0:	4631      	mov	r1, r6
    67d2:	4805      	ldr	r0, [pc, #20]	; (67e8 <grid_port_process_outbound_usb+0x4c>)
    67d4:	4b05      	ldr	r3, [pc, #20]	; (67ec <grid_port_process_outbound_usb+0x50>)
    67d6:	4798      	blx	r3
		grid_buffer_read_acknowledge(&por->tx_buffer);
    67d8:	4628      	mov	r0, r5
    67da:	4b05      	ldr	r3, [pc, #20]	; (67f0 <grid_port_process_outbound_usb+0x54>)
    67dc:	4798      	blx	r3
}
    67de:	e7e5      	b.n	67ac <grid_port_process_outbound_usb+0x10>
    67e0:	000063b5 	.word	0x000063b5
    67e4:	00006427 	.word	0x00006427
    67e8:	20002984 	.word	0x20002984
    67ec:	00007d41 	.word	0x00007d41
    67f0:	000064d9 	.word	0x000064d9
    67f4:	000064b1 	.word	0x000064b1

000067f8 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(GRID_PORT_t* por){
    67f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    67fa:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    67fe:	4628      	mov	r0, r5
    6800:	4b0a      	ldr	r3, [pc, #40]	; (682c <grid_port_process_outbound_ui+0x34>)
    6802:	4798      	blx	r3
	
	if (!packet_size){
    6804:	b900      	cbnz	r0, 6808 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    6806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6808:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    680a:	4628      	mov	r0, r5
    680c:	4b08      	ldr	r3, [pc, #32]	; (6830 <grid_port_process_outbound_ui+0x38>)
    680e:	4798      	blx	r3
    6810:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6812:	4f08      	ldr	r7, [pc, #32]	; (6834 <grid_port_process_outbound_ui+0x3c>)
    6814:	4628      	mov	r0, r5
    6816:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    6818:	3401      	adds	r4, #1
    681a:	b2e4      	uxtb	r4, r4
    681c:	b2a3      	uxth	r3, r4
    681e:	429e      	cmp	r6, r3
    6820:	d8f8      	bhi.n	6814 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    6822:	4628      	mov	r0, r5
    6824:	4b04      	ldr	r3, [pc, #16]	; (6838 <grid_port_process_outbound_ui+0x40>)
    6826:	4798      	blx	r3
}
    6828:	e7ed      	b.n	6806 <grid_port_process_outbound_ui+0xe>
    682a:	bf00      	nop
    682c:	000063b5 	.word	0x000063b5
    6830:	00006427 	.word	0x00006427
    6834:	000064b1 	.word	0x000064b1
    6838:	000064d9 	.word	0x000064d9

0000683c <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    683c:	8903      	ldrh	r3, [r0, #8]
    683e:	b103      	cbz	r3, 6842 <grid_port_process_outbound_usart+0x6>
    6840:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
    6842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6846:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    6848:	f500 76d2 	add.w	r6, r0, #420	; 0x1a4
    684c:	4630      	mov	r0, r6
    684e:	4b10      	ldr	r3, [pc, #64]	; (6890 <grid_port_process_outbound_usart+0x54>)
    6850:	4798      	blx	r3
		
		if (!packet_size){
    6852:	4607      	mov	r7, r0
    6854:	b908      	cbnz	r0, 685a <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    6856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    685a:	4630      	mov	r0, r6
    685c:	4b0d      	ldr	r3, [pc, #52]	; (6894 <grid_port_process_outbound_usart+0x58>)
    685e:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    6860:	812f      	strh	r7, [r5, #8]
    6862:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6864:	f8df 8038 	ldr.w	r8, [pc, #56]	; 68a0 <grid_port_process_outbound_usart+0x64>
    6868:	4630      	mov	r0, r6
    686a:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    686c:	192b      	adds	r3, r5, r4
    686e:	7498      	strb	r0, [r3, #18]
			for (uint8_t i = 0; i<packet_size; i++){
    6870:	3401      	adds	r4, #1
    6872:	b2e4      	uxtb	r4, r4
    6874:	b2a3      	uxth	r3, r4
    6876:	429f      	cmp	r7, r3
    6878:	d8f6      	bhi.n	6868 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    687a:	4630      	mov	r0, r6
    687c:	4b06      	ldr	r3, [pc, #24]	; (6898 <grid_port_process_outbound_usart+0x5c>)
    687e:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    6880:	892a      	ldrh	r2, [r5, #8]
    6882:	f105 0112 	add.w	r1, r5, #18
    6886:	6828      	ldr	r0, [r5, #0]
    6888:	4b04      	ldr	r3, [pc, #16]	; (689c <grid_port_process_outbound_usart+0x60>)
    688a:	4798      	blx	r3
}
    688c:	e7e3      	b.n	6856 <grid_port_process_outbound_usart+0x1a>
    688e:	bf00      	nop
    6890:	000063b5 	.word	0x000063b5
    6894:	00006427 	.word	0x00006427
    6898:	000064d9 	.word	0x000064d9
    689c:	000014c1 	.word	0x000014c1
    68a0:	000064b1 	.word	0x000064b1

000068a4 <grid_sync_set_mode>:
	grid_sync_mode_register[sync_select - 1]  = sync_mode;
    68a4:	4b28      	ldr	r3, [pc, #160]	; (6948 <grid_sync_set_mode+0xa4>)
    68a6:	4403      	add	r3, r0
    68a8:	f883 1473 	strb.w	r1, [r3, #1139]	; 0x473
	if (sync_select == GRID_SYNC_1){		
    68ac:	2801      	cmp	r0, #1
    68ae:	d002      	beq.n	68b6 <grid_sync_set_mode+0x12>
	else if (sync_select == GRID_SYNC_2){	
    68b0:	2802      	cmp	r0, #2
    68b2:	d023      	beq.n	68fc <grid_sync_set_mode+0x58>
    68b4:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    68b6:	2901      	cmp	r1, #1
    68b8:	d011      	beq.n	68de <grid_sync_set_mode+0x3a>
		else if (sync_mode == GRID_SYNC_SLAVE){
    68ba:	2902      	cmp	r1, #2
    68bc:	d1fa      	bne.n	68b4 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    68be:	4b23      	ldr	r3, [pc, #140]	; (694c <grid_sync_set_mode+0xa8>)
    68c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    68c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68c8:	4921      	ldr	r1, [pc, #132]	; (6950 <grid_sync_set_mode+0xac>)
    68ca:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    68ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    68d2:	3104      	adds	r1, #4
    68d4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    68d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    68dc:	4770      	bx	lr
    68de:	4b1b      	ldr	r3, [pc, #108]	; (694c <grid_sync_set_mode+0xa8>)
    68e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    68e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    68e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    68f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    68f4:	4a17      	ldr	r2, [pc, #92]	; (6954 <grid_sync_set_mode+0xb0>)
    68f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    68fa:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    68fc:	2901      	cmp	r1, #1
    68fe:	d013      	beq.n	6928 <grid_sync_set_mode+0x84>
		else if (sync_mode == GRID_SYNC_SLAVE){
    6900:	2902      	cmp	r1, #2
    6902:	d1d7      	bne.n	68b4 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6904:	4b11      	ldr	r3, [pc, #68]	; (694c <grid_sync_set_mode+0xa8>)
    6906:	2280      	movs	r2, #128	; 0x80
    6908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    690c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6910:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    6914:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    6918:	4a0f      	ldr	r2, [pc, #60]	; (6958 <grid_sync_set_mode+0xb4>)
    691a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    691e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6922:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
    6926:	e7c5      	b.n	68b4 <grid_sync_set_mode+0x10>
    6928:	4b08      	ldr	r3, [pc, #32]	; (694c <grid_sync_set_mode+0xa8>)
    692a:	2280      	movs	r2, #128	; 0x80
    692c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6934:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6938:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    693c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    6940:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    6944:	4770      	bx	lr
    6946:	bf00      	nop
    6948:	20000c3c 	.word	0x20000c3c
    694c:	41008000 	.word	0x41008000
    6950:	40020000 	.word	0x40020000
    6954:	c0000004 	.word	0xc0000004
    6958:	c0020000 	.word	0xc0020000

0000695c <grid_sync_get_mode>:
	if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_MASTER){
    695c:	4b06      	ldr	r3, [pc, #24]	; (6978 <grid_sync_get_mode+0x1c>)
    695e:	4418      	add	r0, r3
    6960:	f890 3473 	ldrb.w	r3, [r0, #1139]	; 0x473
    6964:	2b01      	cmp	r3, #1
    6966:	d004      	beq.n	6972 <grid_sync_get_mode+0x16>
		return GRID_SYNC_INITIAL;	
    6968:	2b02      	cmp	r3, #2
    696a:	bf0c      	ite	eq
    696c:	2002      	moveq	r0, #2
    696e:	2000      	movne	r0, #0
    6970:	4770      	bx	lr
		return GRID_SYNC_MASTER;
    6972:	2001      	movs	r0, #1
}
    6974:	4770      	bx	lr
    6976:	bf00      	nop
    6978:	20000c3c 	.word	0x20000c3c

0000697c <grid_sync_set_level>:
void grid_sync_set_level(enum grid_sync_selector sync_select, uint8_t sync_level){
    697c:	b510      	push	{r4, lr}
    697e:	460c      	mov	r4, r1
	if (sync_select == GRID_SYNC_1){
    6980:	2801      	cmp	r0, #1
    6982:	d002      	beq.n	698a <grid_sync_set_level+0xe>
	else if (sync_select == GRID_SYNC_2){
    6984:	2802      	cmp	r0, #2
    6986:	d011      	beq.n	69ac <grid_sync_set_level+0x30>
    6988:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    698a:	4b10      	ldr	r3, [pc, #64]	; (69cc <grid_sync_set_level+0x50>)
    698c:	4798      	blx	r3
    698e:	2801      	cmp	r0, #1
    6990:	d1fa      	bne.n	6988 <grid_sync_set_level+0xc>
	if (level) {
    6992:	b12c      	cbz	r4, 69a0 <grid_sync_set_level+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6994:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6998:	4b0d      	ldr	r3, [pc, #52]	; (69d0 <grid_sync_set_level+0x54>)
    699a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    699e:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    69a4:	4b0a      	ldr	r3, [pc, #40]	; (69d0 <grid_sync_set_level+0x54>)
    69a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    69aa:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    69ac:	4b07      	ldr	r3, [pc, #28]	; (69cc <grid_sync_set_level+0x50>)
    69ae:	4798      	blx	r3
    69b0:	2801      	cmp	r0, #1
    69b2:	d1e9      	bne.n	6988 <grid_sync_set_level+0xc>
    69b4:	b924      	cbnz	r4, 69c0 <grid_sync_set_level+0x44>
    69b6:	2280      	movs	r2, #128	; 0x80
    69b8:	4b05      	ldr	r3, [pc, #20]	; (69d0 <grid_sync_set_level+0x54>)
    69ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    69be:	e7e3      	b.n	6988 <grid_sync_set_level+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    69c0:	2280      	movs	r2, #128	; 0x80
    69c2:	4b03      	ldr	r3, [pc, #12]	; (69d0 <grid_sync_set_level+0x54>)
    69c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    69c8:	bd10      	pop	{r4, pc}
    69ca:	bf00      	nop
    69cc:	0000695d 	.word	0x0000695d
    69d0:	41008000 	.word	0x41008000

000069d4 <grid_sys_port_reset_dma>:
void grid_sys_port_reset_dma(GRID_PORT_t* por){
    69d4:	b508      	push	{r3, lr}
    69d6:	7983      	ldrb	r3, [r0, #6]
    69d8:	011b      	lsls	r3, r3, #4
    69da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    69de:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    69e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    69e4:	f022 0202 	bic.w	r2, r2, #2
    69e8:	641a      	str	r2, [r3, #64]	; 0x40
	_dma_enable_transaction(por->dma_channel, false);
    69ea:	2100      	movs	r1, #0
    69ec:	7980      	ldrb	r0, [r0, #6]
    69ee:	4b01      	ldr	r3, [pc, #4]	; (69f4 <grid_sys_port_reset_dma+0x20>)
    69f0:	4798      	blx	r3
    69f2:	bd08      	pop	{r3, pc}
    69f4:	00002a29 	.word	0x00002a29

000069f8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    69f8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    69fa:	4802      	ldr	r0, [pc, #8]	; (6a04 <dma_transfer_complete_w_cb+0xc>)
    69fc:	4b02      	ldr	r3, [pc, #8]	; (6a08 <dma_transfer_complete_w_cb+0x10>)
    69fe:	4798      	blx	r3
    6a00:	bd08      	pop	{r3, pc}
    6a02:	bf00      	nop
    6a04:	20002144 	.word	0x20002144
    6a08:	000069d5 	.word	0x000069d5

00006a0c <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    6a0c:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6a0e:	4802      	ldr	r0, [pc, #8]	; (6a18 <dma_transfer_complete_s_cb+0xc>)
    6a10:	4b02      	ldr	r3, [pc, #8]	; (6a1c <dma_transfer_complete_s_cb+0x10>)
    6a12:	4798      	blx	r3
    6a14:	bd08      	pop	{r3, pc}
    6a16:	bf00      	nop
    6a18:	20002324 	.word	0x20002324
    6a1c:	000069d5 	.word	0x000069d5

00006a20 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    6a20:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6a22:	4802      	ldr	r0, [pc, #8]	; (6a2c <dma_transfer_complete_e_cb+0xc>)
    6a24:	4b02      	ldr	r3, [pc, #8]	; (6a30 <dma_transfer_complete_e_cb+0x10>)
    6a26:	4798      	blx	r3
    6a28:	bd08      	pop	{r3, pc}
    6a2a:	bf00      	nop
    6a2c:	200027a8 	.word	0x200027a8
    6a30:	000069d5 	.word	0x000069d5

00006a34 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    6a34:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6a36:	4802      	ldr	r0, [pc, #8]	; (6a40 <dma_transfer_complete_n_cb+0xc>)
    6a38:	4b02      	ldr	r3, [pc, #8]	; (6a44 <dma_transfer_complete_n_cb+0x10>)
    6a3a:	4798      	blx	r3
    6a3c:	bd08      	pop	{r3, pc}
    6a3e:	bf00      	nop
    6a40:	20001990 	.word	0x20001990
    6a44:	000069d5 	.word	0x000069d5

00006a48 <grid_sys_uart_init>:
void grid_sys_uart_init(){
    6a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6a4c:	4b2f      	ldr	r3, [pc, #188]	; (6b0c <grid_sys_uart_init+0xc4>)
    6a4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    6a52:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6a56:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    6a5a:	f042 0204 	orr.w	r2, r2, #4
    6a5e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a62:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6a66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6a6a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6a6e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    6a72:	f042 0204 	orr.w	r2, r2, #4
    6a76:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a7a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6a82:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6a86:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    6a8a:	f042 0204 	orr.w	r2, r2, #4
    6a8e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a92:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6a96:	f44f 7100 	mov.w	r1, #512	; 0x200
    6a9a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6a9e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    6aa2:	f042 0204 	orr.w	r2, r2, #4
    6aa6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6aaa:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    6aae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 6b48 <grid_sys_uart_init+0x100>
    6ab2:	4a17      	ldr	r2, [pc, #92]	; (6b10 <grid_sys_uart_init+0xc8>)
    6ab4:	2101      	movs	r1, #1
    6ab6:	4640      	mov	r0, r8
    6ab8:	4c16      	ldr	r4, [pc, #88]	; (6b14 <grid_sys_uart_init+0xcc>)
    6aba:	47a0      	blx	r4
 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    6abc:	4f16      	ldr	r7, [pc, #88]	; (6b18 <grid_sys_uart_init+0xd0>)
    6abe:	4a17      	ldr	r2, [pc, #92]	; (6b1c <grid_sys_uart_init+0xd4>)
    6ac0:	2101      	movs	r1, #1
    6ac2:	4638      	mov	r0, r7
    6ac4:	47a0      	blx	r4
 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    6ac6:	4e16      	ldr	r6, [pc, #88]	; (6b20 <grid_sys_uart_init+0xd8>)
    6ac8:	4a16      	ldr	r2, [pc, #88]	; (6b24 <grid_sys_uart_init+0xdc>)
    6aca:	2101      	movs	r1, #1
    6acc:	4630      	mov	r0, r6
    6ace:	47a0      	blx	r4
 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    6ad0:	4d15      	ldr	r5, [pc, #84]	; (6b28 <grid_sys_uart_init+0xe0>)
    6ad2:	4a16      	ldr	r2, [pc, #88]	; (6b2c <grid_sys_uart_init+0xe4>)
    6ad4:	2101      	movs	r1, #1
    6ad6:	4628      	mov	r0, r5
    6ad8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    6ada:	4915      	ldr	r1, [pc, #84]	; (6b30 <grid_sys_uart_init+0xe8>)
    6adc:	4640      	mov	r0, r8
    6ade:	4c15      	ldr	r4, [pc, #84]	; (6b34 <grid_sys_uart_init+0xec>)
    6ae0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    6ae2:	4915      	ldr	r1, [pc, #84]	; (6b38 <grid_sys_uart_init+0xf0>)
    6ae4:	4638      	mov	r0, r7
    6ae6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    6ae8:	4914      	ldr	r1, [pc, #80]	; (6b3c <grid_sys_uart_init+0xf4>)
    6aea:	4630      	mov	r0, r6
    6aec:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    6aee:	4914      	ldr	r1, [pc, #80]	; (6b40 <grid_sys_uart_init+0xf8>)
    6af0:	4628      	mov	r0, r5
    6af2:	47a0      	blx	r4
	usart_async_enable(&USART_NORTH);
    6af4:	4640      	mov	r0, r8
    6af6:	4c13      	ldr	r4, [pc, #76]	; (6b44 <grid_sys_uart_init+0xfc>)
    6af8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    6afa:	4638      	mov	r0, r7
    6afc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    6afe:	4630      	mov	r0, r6
    6b00:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    6b02:	4628      	mov	r0, r5
    6b04:	47a0      	blx	r4
    6b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b0a:	bf00      	nop
    6b0c:	41008000 	.word	0x41008000
    6b10:	00006205 	.word	0x00006205
    6b14:	00001bd1 	.word	0x00001bd1
    6b18:	20001364 	.word	0x20001364
    6b1c:	000061f1 	.word	0x000061f1
    6b20:	200014b8 	.word	0x200014b8
    6b24:	000061dd 	.word	0x000061dd
    6b28:	20001468 	.word	0x20001468
    6b2c:	000061c9 	.word	0x000061c9
    6b30:	20001d4c 	.word	0x20001d4c
    6b34:	00001ba9 	.word	0x00001ba9
    6b38:	20002320 	.word	0x20002320
    6b3c:	20002500 	.word	0x20002500
    6b40:	20002a4c 	.word	0x20002a4c
    6b44:	00001b7d 	.word	0x00001b7d
    6b48:	200013b4 	.word	0x200013b4

00006b4c <grid_rx_dma_init_one>:
void grid_rx_dma_init_one(GRID_PORT_t* por, uint32_t buffer_length, void* transfer_done_cb() ){
    6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b4e:	b083      	sub	sp, #12
    6b50:	460f      	mov	r7, r1
    6b52:	4616      	mov	r6, r2
	uint8_t dma_rx_channel = por->dma_channel;	
    6b54:	7984      	ldrb	r4, [r0, #6]
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    6b56:	4605      	mov	r5, r0
    6b58:	f855 3bda 	ldr.w	r3, [r5], #218
    6b5c:	6a19      	ldr	r1, [r3, #32]
    6b5e:	3128      	adds	r1, #40	; 0x28
    6b60:	4620      	mov	r0, r4
    6b62:	4b0d      	ldr	r3, [pc, #52]	; (6b98 <grid_rx_dma_init_one+0x4c>)
    6b64:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    6b66:	4629      	mov	r1, r5
    6b68:	4620      	mov	r0, r4
    6b6a:	4b0c      	ldr	r3, [pc, #48]	; (6b9c <grid_rx_dma_init_one+0x50>)
    6b6c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    6b6e:	4639      	mov	r1, r7
    6b70:	4620      	mov	r0, r4
    6b72:	4b0b      	ldr	r3, [pc, #44]	; (6ba0 <grid_rx_dma_init_one+0x54>)
    6b74:	4798      	blx	r3
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    6b76:	4621      	mov	r1, r4
    6b78:	a801      	add	r0, sp, #4
    6b7a:	4b0a      	ldr	r3, [pc, #40]	; (6ba4 <grid_rx_dma_init_one+0x58>)
    6b7c:	4798      	blx	r3
	resource_rx->dma_cb.transfer_done = transfer_done_cb;	
    6b7e:	9b01      	ldr	r3, [sp, #4]
    6b80:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    6b82:	2201      	movs	r2, #1
    6b84:	2100      	movs	r1, #0
    6b86:	4620      	mov	r0, r4
    6b88:	4b07      	ldr	r3, [pc, #28]	; (6ba8 <grid_rx_dma_init_one+0x5c>)
    6b8a:	4798      	blx	r3
	_dma_enable_transaction(dma_rx_channel, false);
    6b8c:	2100      	movs	r1, #0
    6b8e:	4620      	mov	r0, r4
    6b90:	4b06      	ldr	r3, [pc, #24]	; (6bac <grid_rx_dma_init_one+0x60>)
    6b92:	4798      	blx	r3
}
    6b94:	b003      	add	sp, #12
    6b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b98:	000029a5 	.word	0x000029a5
    6b9c:	00002995 	.word	0x00002995
    6ba0:	000029d1 	.word	0x000029d1
    6ba4:	00002a69 	.word	0x00002a69
    6ba8:	00002941 	.word	0x00002941
    6bac:	00002a29 	.word	0x00002a29

00006bb0 <grid_rx_dma_init>:
void grid_rx_dma_init(){
    6bb0:	b510      	push	{r4, lr}
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    6bb2:	4a09      	ldr	r2, [pc, #36]	; (6bd8 <grid_rx_dma_init+0x28>)
    6bb4:	21c8      	movs	r1, #200	; 0xc8
    6bb6:	4809      	ldr	r0, [pc, #36]	; (6bdc <grid_rx_dma_init+0x2c>)
    6bb8:	4c09      	ldr	r4, [pc, #36]	; (6be0 <grid_rx_dma_init+0x30>)
    6bba:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    6bbc:	4a09      	ldr	r2, [pc, #36]	; (6be4 <grid_rx_dma_init+0x34>)
    6bbe:	21c8      	movs	r1, #200	; 0xc8
    6bc0:	4809      	ldr	r0, [pc, #36]	; (6be8 <grid_rx_dma_init+0x38>)
    6bc2:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    6bc4:	4a09      	ldr	r2, [pc, #36]	; (6bec <grid_rx_dma_init+0x3c>)
    6bc6:	21c8      	movs	r1, #200	; 0xc8
    6bc8:	4809      	ldr	r0, [pc, #36]	; (6bf0 <grid_rx_dma_init+0x40>)
    6bca:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    6bcc:	4a09      	ldr	r2, [pc, #36]	; (6bf4 <grid_rx_dma_init+0x44>)
    6bce:	21c8      	movs	r1, #200	; 0xc8
    6bd0:	4809      	ldr	r0, [pc, #36]	; (6bf8 <grid_rx_dma_init+0x48>)
    6bd2:	47a0      	blx	r4
    6bd4:	bd10      	pop	{r4, pc}
    6bd6:	bf00      	nop
    6bd8:	00006a35 	.word	0x00006a35
    6bdc:	20001990 	.word	0x20001990
    6be0:	00006b4d 	.word	0x00006b4d
    6be4:	00006a21 	.word	0x00006a21
    6be8:	200027a8 	.word	0x200027a8
    6bec:	00006a0d 	.word	0x00006a0d
    6bf0:	20002324 	.word	0x20002324
    6bf4:	000069f9 	.word	0x000069f9
    6bf8:	20002144 	.word	0x20002144

00006bfc <grid_port_process_ui>:
void grid_port_process_ui(GRID_PORT_t* por){
    6bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c00:	b0c9      	sub	sp, #292	; 0x124
	sprintf(&txbuffer[txindex],
    6c02:	2317      	movs	r3, #23
    6c04:	9304      	str	r3, [sp, #16]
    6c06:	2700      	movs	r7, #0
    6c08:	9703      	str	r7, [sp, #12]
    6c0a:	9702      	str	r7, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    6c0c:	4b4d      	ldr	r3, [pc, #308]	; (6d44 <grid_port_process_ui+0x148>)
	sprintf(&txbuffer[txindex],
    6c0e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
    6c12:	9301      	str	r3, [sp, #4]
    6c14:	9700      	str	r7, [sp, #0]
    6c16:	230f      	movs	r3, #15
    6c18:	2201      	movs	r2, #1
    6c1a:	494b      	ldr	r1, [pc, #300]	; (6d48 <grid_port_process_ui+0x14c>)
    6c1c:	a808      	add	r0, sp, #32
    6c1e:	4c4b      	ldr	r4, [pc, #300]	; (6d4c <grid_port_process_ui+0x150>)
    6c20:	47a0      	blx	r4
	txindex += strlen(&txbuffer[txindex]);
    6c22:	a808      	add	r0, sp, #32
    6c24:	4b4a      	ldr	r3, [pc, #296]	; (6d50 <grid_port_process_ui+0x154>)
    6c26:	4798      	blx	r3
    6c28:	4681      	mov	r9, r0
    6c2a:	463c      	mov	r4, r7
		if (grid_ain_get_changed(i)){
    6c2c:	f8df a154 	ldr.w	sl, [pc, #340]	; 6d84 <grid_port_process_ui+0x188>
    6c30:	e00b      	b.n	6c4a <grid_port_process_ui+0x4e>
				grid_led_set_phase(i, 0, average*2/128); // 0...255
    6c32:	0072      	lsls	r2, r6, #1
    6c34:	bf48      	it	mi
    6c36:	327f      	addmi	r2, #127	; 0x7f
    6c38:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    6c3c:	2100      	movs	r1, #0
    6c3e:	4628      	mov	r0, r5
    6c40:	4b44      	ldr	r3, [pc, #272]	; (6d54 <grid_port_process_ui+0x158>)
    6c42:	4798      	blx	r3
    6c44:	3401      	adds	r4, #1
	for (uint8_t i = 0; i<16; i++)
    6c46:	2c10      	cmp	r4, #16
    6c48:	d032      	beq.n	6cb0 <grid_port_process_ui+0xb4>
    6c4a:	b2e5      	uxtb	r5, r4
		if (grid_ain_get_changed(i)){
    6c4c:	4628      	mov	r0, r5
    6c4e:	47d0      	blx	sl
    6c50:	2800      	cmp	r0, #0
    6c52:	d0f7      	beq.n	6c44 <grid_port_process_ui+0x48>
			packetvalid++;
    6c54:	3701      	adds	r7, #1
    6c56:	b2ff      	uxtb	r7, r7
			uint16_t average = grid_ain_get_average(i);
    6c58:	4628      	mov	r0, r5
    6c5a:	4b3f      	ldr	r3, [pc, #252]	; (6d58 <grid_port_process_ui+0x15c>)
    6c5c:	4798      	blx	r3
    6c5e:	4606      	mov	r6, r0
			sprintf(&txbuffer[txindex], "%c%x%02x%02x%02x%02x%c",
    6c60:	ab08      	add	r3, sp, #32
    6c62:	eb03 0809 	add.w	r8, r3, r9
    6c66:	2303      	movs	r3, #3
    6c68:	9304      	str	r3, [sp, #16]
    6c6a:	f3c0 138f 	ubfx	r3, r0, #6, #16
    6c6e:	9303      	str	r3, [sp, #12]
    6c70:	9402      	str	r4, [sp, #8]
    6c72:	23b0      	movs	r3, #176	; 0xb0
    6c74:	9301      	str	r3, [sp, #4]
    6c76:	2300      	movs	r3, #0
    6c78:	9300      	str	r3, [sp, #0]
    6c7a:	2202      	movs	r2, #2
    6c7c:	4937      	ldr	r1, [pc, #220]	; (6d5c <grid_port_process_ui+0x160>)
    6c7e:	4640      	mov	r0, r8
    6c80:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 6d4c <grid_port_process_ui+0x150>
    6c84:	47d8      	blx	fp
			txindex += strlen(&txbuffer[txindex]);
    6c86:	4640      	mov	r0, r8
    6c88:	4b31      	ldr	r3, [pc, #196]	; (6d50 <grid_port_process_ui+0x154>)
    6c8a:	4798      	blx	r3
    6c8c:	4481      	add	r9, r0
			if (grid_sys_get_hwcfg()==64 && i>11){
    6c8e:	4b34      	ldr	r3, [pc, #208]	; (6d60 <grid_port_process_ui+0x164>)
    6c90:	4798      	blx	r3
    6c92:	2840      	cmp	r0, #64	; 0x40
    6c94:	d1cd      	bne.n	6c32 <grid_port_process_ui+0x36>
    6c96:	2d0b      	cmp	r5, #11
    6c98:	d9cb      	bls.n	6c32 <grid_port_process_ui+0x36>
				grid_led_set_phase(i-4, 0, average*2/128); // 0...255
    6c9a:	0072      	lsls	r2, r6, #1
    6c9c:	bf48      	it	mi
    6c9e:	327f      	addmi	r2, #127	; 0x7f
    6ca0:	1f28      	subs	r0, r5, #4
    6ca2:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    6ca6:	2100      	movs	r1, #0
    6ca8:	b2c0      	uxtb	r0, r0
    6caa:	4b2a      	ldr	r3, [pc, #168]	; (6d54 <grid_port_process_ui+0x158>)
    6cac:	4798      	blx	r3
    6cae:	e7c9      	b.n	6c44 <grid_port_process_ui+0x48>
	if (packetvalid){
    6cb0:	b917      	cbnz	r7, 6cb8 <grid_port_process_ui+0xbc>
}
    6cb2:	b049      	add	sp, #292	; 0x124
    6cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_sys_state.next_broadcast_message_id++;
    6cb8:	4a22      	ldr	r2, [pc, #136]	; (6d44 <grid_port_process_ui+0x148>)
    6cba:	f892 33e8 	ldrb.w	r3, [r2, #1000]	; 0x3e8
    6cbe:	3301      	adds	r3, #1
    6cc0:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
		sprintf(&txbuffer[txindex], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    6cc4:	ab08      	add	r3, sp, #32
    6cc6:	eb03 0509 	add.w	r5, r3, r9
    6cca:	2204      	movs	r2, #4
    6ccc:	4925      	ldr	r1, [pc, #148]	; (6d64 <grid_port_process_ui+0x168>)
    6cce:	4628      	mov	r0, r5
    6cd0:	4c1e      	ldr	r4, [pc, #120]	; (6d4c <grid_port_process_ui+0x150>)
    6cd2:	47a0      	blx	r4
		txindex += strlen(&txbuffer[txindex]);
    6cd4:	4628      	mov	r0, r5
    6cd6:	4d1e      	ldr	r5, [pc, #120]	; (6d50 <grid_port_process_ui+0x154>)
    6cd8:	47a8      	blx	r5
    6cda:	4481      	add	r9, r0
		sprintf(length_string, "%02x", txindex);
    6cdc:	464a      	mov	r2, r9
    6cde:	4922      	ldr	r1, [pc, #136]	; (6d68 <grid_port_process_ui+0x16c>)
    6ce0:	a806      	add	r0, sp, #24
    6ce2:	47a0      	blx	r4
		txbuffer[2] = length_string[0];
    6ce4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    6ce8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		txbuffer[3] = length_string[1];
    6cec:	f89d 3019 	ldrb.w	r3, [sp, #25]
    6cf0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		sprintf(&txbuffer[txindex], "%02x\n", grid_sys_calculate_checksum(txbuffer, txindex)); // CALCULATE AND ADD CRC HERE
    6cf4:	ab08      	add	r3, sp, #32
    6cf6:	eb03 0609 	add.w	r6, r3, r9
    6cfa:	4649      	mov	r1, r9
    6cfc:	4618      	mov	r0, r3
    6cfe:	4b1b      	ldr	r3, [pc, #108]	; (6d6c <grid_port_process_ui+0x170>)
    6d00:	4798      	blx	r3
    6d02:	4602      	mov	r2, r0
    6d04:	491a      	ldr	r1, [pc, #104]	; (6d70 <grid_port_process_ui+0x174>)
    6d06:	4630      	mov	r0, r6
    6d08:	47a0      	blx	r4
		txindex += strlen(&txbuffer[txindex]);
    6d0a:	4630      	mov	r0, r6
    6d0c:	47a8      	blx	r5
    6d0e:	eb09 0400 	add.w	r4, r9, r0
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, txindex)){
    6d12:	b2a1      	uxth	r1, r4
    6d14:	4817      	ldr	r0, [pc, #92]	; (6d74 <grid_port_process_ui+0x178>)
    6d16:	4b18      	ldr	r3, [pc, #96]	; (6d78 <grid_port_process_ui+0x17c>)
    6d18:	4798      	blx	r3
    6d1a:	2800      	cmp	r0, #0
    6d1c:	d0c9      	beq.n	6cb2 <grid_port_process_ui+0xb6>
			for(uint16_t i = 0; i<txindex; i++){
    6d1e:	b164      	cbz	r4, 6d3a <grid_port_process_ui+0x13e>
    6d20:	2500      	movs	r5, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, txbuffer[i]);
    6d22:	f10d 0820 	add.w	r8, sp, #32
    6d26:	4f13      	ldr	r7, [pc, #76]	; (6d74 <grid_port_process_ui+0x178>)
    6d28:	4e14      	ldr	r6, [pc, #80]	; (6d7c <grid_port_process_ui+0x180>)
    6d2a:	f818 1005 	ldrb.w	r1, [r8, r5]
    6d2e:	4638      	mov	r0, r7
    6d30:	47b0      	blx	r6
			for(uint16_t i = 0; i<txindex; i++){
    6d32:	3501      	adds	r5, #1
    6d34:	b2ad      	uxth	r5, r5
    6d36:	42ac      	cmp	r4, r5
    6d38:	d8f7      	bhi.n	6d2a <grid_port_process_ui+0x12e>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    6d3a:	480e      	ldr	r0, [pc, #56]	; (6d74 <grid_port_process_ui+0x178>)
    6d3c:	4b10      	ldr	r3, [pc, #64]	; (6d80 <grid_port_process_ui+0x184>)
    6d3e:	4798      	blx	r3
}
    6d40:	e7b7      	b.n	6cb2 <grid_port_process_ui+0xb6>
    6d42:	bf00      	nop
    6d44:	20001d50 	.word	0x20001d50
    6d48:	00009e38 	.word	0x00009e38
    6d4c:	00009049 	.word	0x00009049
    6d50:	00009091 	.word	0x00009091
    6d54:	000059a5 	.word	0x000059a5
    6d58:	00005f51 	.word	0x00005f51
    6d5c:	00009e50 	.word	0x00009e50
    6d60:	00006065 	.word	0x00006065
    6d64:	00009e4c 	.word	0x00009e4c
    6d68:	00009e68 	.word	0x00009e68
    6d6c:	00006219 	.word	0x00006219
    6d70:	00009e30 	.word	0x00009e30
    6d74:	20001d2c 	.word	0x20001d2c
    6d78:	00006285 	.word	0x00006285
    6d7c:	000062b5 	.word	0x000062b5
    6d80:	000062d1 	.word	0x000062d1
    6d84:	00005f3d 	.word	0x00005f3d

00006d88 <grid_module_init>:



	
/* ============================== GRID_MODULE_INIT() ================================ */
void grid_module_init(void){
    6d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d8c:	b085      	sub	sp, #20
		
					

	grid_port_init_all();	
    6d8e:	4b79      	ldr	r3, [pc, #484]	; (6f74 <grid_module_init+0x1ec>)
    6d90:	4798      	blx	r3
		
		
						
	// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
	grid_ain_init(grid_module_ain_buffer_size, 5, 14, 8);		
    6d92:	2308      	movs	r3, #8
    6d94:	220e      	movs	r2, #14
    6d96:	2105      	movs	r1, #5
    6d98:	2010      	movs	r0, #16
    6d9a:	4c77      	ldr	r4, [pc, #476]	; (6f78 <grid_module_init+0x1f0>)
    6d9c:	47a0      	blx	r4
	grid_led_init(grid_module_led_buffer_size);
    6d9e:	2010      	movs	r0, #16
    6da0:	4b76      	ldr	r3, [pc, #472]	; (6f7c <grid_module_init+0x1f4>)
    6da2:	4798      	blx	r3

	spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    6da4:	4c76      	ldr	r4, [pc, #472]	; (6f80 <grid_module_init+0x1f8>)
    6da6:	4977      	ldr	r1, [pc, #476]	; (6f84 <grid_module_init+0x1fc>)
    6da8:	4620      	mov	r0, r4
    6daa:	4b77      	ldr	r3, [pc, #476]	; (6f88 <grid_module_init+0x200>)
    6dac:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    6dae:	4a77      	ldr	r2, [pc, #476]	; (6f8c <grid_module_init+0x204>)
    6db0:	2100      	movs	r1, #0
    6db2:	4620      	mov	r0, r4
    6db4:	4b76      	ldr	r3, [pc, #472]	; (6f90 <grid_module_init+0x208>)
    6db6:	4798      	blx	r3


//	grid_rx_timout_init();
	
		
	grid_sys_uart_init();
    6db8:	4b76      	ldr	r3, [pc, #472]	; (6f94 <grid_module_init+0x20c>)
    6dba:	4798      	blx	r3
	
	grid_rx_dma_init();	
    6dbc:	4b76      	ldr	r3, [pc, #472]	; (6f98 <grid_module_init+0x210>)
    6dbe:	4798      	blx	r3
    6dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6dc4:	4b75      	ldr	r3, [pc, #468]	; (6f9c <grid_module_init+0x214>)
    6dc6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    6dca:	4c75      	ldr	r4, [pc, #468]	; (6fa0 <grid_module_init+0x218>)
    6dcc:	47a0      	blx	r4
						
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){
    6dce:	47a0      	blx	r4
    6dd0:	2880      	cmp	r0, #128	; 0x80
    6dd2:	d033      	beq.n	6e3c <grid_module_init+0xb4>
		grid_adc_set_config(14, GRID_ADC_CFG_BINARY, 1);
		grid_adc_set_config(15, GRID_ADC_CFG_BINARY, 1);
			
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    6dd4:	4b72      	ldr	r3, [pc, #456]	; (6fa0 <grid_module_init+0x218>)
    6dd6:	4798      	blx	r3
    6dd8:	2840      	cmp	r0, #64	; 0x40
    6dda:	f000 8098 	beq.w	6f0e <grid_module_init+0x186>
					
	}
				
		
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    6dde:	4c71      	ldr	r4, [pc, #452]	; (6fa4 <grid_module_init+0x21c>)
    6de0:	4b71      	ldr	r3, [pc, #452]	; (6fa8 <grid_module_init+0x220>)
    6de2:	2200      	movs	r2, #0
    6de4:	4611      	mov	r1, r2
    6de6:	4620      	mov	r0, r4
    6de8:	4f70      	ldr	r7, [pc, #448]	; (6fac <grid_module_init+0x224>)
    6dea:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_0, 0);
    6dec:	2100      	movs	r1, #0
    6dee:	4620      	mov	r0, r4
    6df0:	4e6f      	ldr	r6, [pc, #444]	; (6fb0 <grid_module_init+0x228>)
    6df2:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    6df4:	4620      	mov	r0, r4
    6df6:	4d6f      	ldr	r5, [pc, #444]	; (6fb4 <grid_module_init+0x22c>)
    6df8:	47a8      	blx	r5
				
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    6dfa:	4c6f      	ldr	r4, [pc, #444]	; (6fb8 <grid_module_init+0x230>)
    6dfc:	4b6f      	ldr	r3, [pc, #444]	; (6fbc <grid_module_init+0x234>)
    6dfe:	2200      	movs	r2, #0
    6e00:	4611      	mov	r1, r2
    6e02:	4620      	mov	r0, r4
    6e04:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_1, 0);
    6e06:	2100      	movs	r1, #0
    6e08:	4620      	mov	r0, r4
    6e0a:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_1);
    6e0c:	4620      	mov	r0, r4
    6e0e:	47a8      	blx	r5
	
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    6e10:	4c6b      	ldr	r4, [pc, #428]	; (6fc0 <grid_module_init+0x238>)
    6e12:	496c      	ldr	r1, [pc, #432]	; (6fc4 <grid_module_init+0x23c>)
    6e14:	4620      	mov	r0, r4
    6e16:	4b6c      	ldr	r3, [pc, #432]	; (6fc8 <grid_module_init+0x240>)
    6e18:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    6e1a:	4620      	mov	r0, r4
    6e1c:	4b6b      	ldr	r3, [pc, #428]	; (6fcc <grid_module_init+0x244>)
    6e1e:	4798      	blx	r3


	// GRID_LED Library NEW NEW NEW NEW
	
	grid_sys_state.error_style = 0;
    6e20:	4b6b      	ldr	r3, [pc, #428]	; (6fd0 <grid_module_init+0x248>)
    6e22:	2200      	movs	r2, #0
    6e24:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
	grid_sys_state.error_state = 500;
    6e28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6e2c:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
	grid_sys_state.error_code = 7;
    6e30:	2207      	movs	r2, #7
    6e32:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
		
		
}
    6e36:	b005      	add	sp, #20
    6e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    6e3c:	4b65      	ldr	r3, [pc, #404]	; (6fd4 <grid_module_init+0x24c>)
    6e3e:	f993 a451 	ldrsb.w	sl, [r3, #1105]	; 0x451
    6e42:	f993 9452 	ldrsb.w	r9, [r3, #1106]	; 0x452
    6e46:	f993 8453 	ldrsb.w	r8, [r3, #1107]	; 0x453
    6e4a:	f993 c454 	ldrsb.w	ip, [r3, #1108]	; 0x454
    6e4e:	f993 e455 	ldrsb.w	lr, [r3, #1109]	; 0x455
    6e52:	f993 7456 	ldrsb.w	r7, [r3, #1110]	; 0x456
    6e56:	f993 6457 	ldrsb.w	r6, [r3, #1111]	; 0x457
    6e5a:	f993 5458 	ldrsb.w	r5, [r3, #1112]	; 0x458
    6e5e:	f993 4459 	ldrsb.w	r4, [r3, #1113]	; 0x459
    6e62:	f993 045a 	ldrsb.w	r0, [r3, #1114]	; 0x45a
    6e66:	f993 145b 	ldrsb.w	r1, [r3, #1115]	; 0x45b
    6e6a:	f993 245c 	ldrsb.w	r2, [r3, #1116]	; 0x45c
    6e6e:	9203      	str	r2, [sp, #12]
    6e70:	f993 245d 	ldrsb.w	r2, [r3, #1117]	; 0x45d
    6e74:	9202      	str	r2, [sp, #8]
    6e76:	f993 b45e 	ldrsb.w	fp, [r3, #1118]	; 0x45e
    6e7a:	f8cd b004 	str.w	fp, [sp, #4]
    6e7e:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    6e82:	f893 b450 	ldrb.w	fp, [r3, #1104]	; 0x450
    6e86:	f04b 0b03 	orr.w	fp, fp, #3
    6e8a:	f883 b450 	strb.w	fp, [r3, #1104]	; 0x450
    6e8e:	f04a 0a03 	orr.w	sl, sl, #3
    6e92:	f883 a451 	strb.w	sl, [r3, #1105]	; 0x451
    6e96:	f049 0903 	orr.w	r9, r9, #3
    6e9a:	f883 9452 	strb.w	r9, [r3, #1106]	; 0x452
    6e9e:	f048 0803 	orr.w	r8, r8, #3
    6ea2:	f883 8453 	strb.w	r8, [r3, #1107]	; 0x453
    6ea6:	f04c 0c03 	orr.w	ip, ip, #3
    6eaa:	f883 c454 	strb.w	ip, [r3, #1108]	; 0x454
    6eae:	f04e 0e03 	orr.w	lr, lr, #3
    6eb2:	f883 e455 	strb.w	lr, [r3, #1109]	; 0x455
    6eb6:	f047 0703 	orr.w	r7, r7, #3
    6eba:	f883 7456 	strb.w	r7, [r3, #1110]	; 0x456
    6ebe:	f046 0603 	orr.w	r6, r6, #3
    6ec2:	f883 6457 	strb.w	r6, [r3, #1111]	; 0x457
    6ec6:	f045 0503 	orr.w	r5, r5, #3
    6eca:	f883 5458 	strb.w	r5, [r3, #1112]	; 0x458
    6ece:	f044 0403 	orr.w	r4, r4, #3
    6ed2:	f883 4459 	strb.w	r4, [r3, #1113]	; 0x459
    6ed6:	f040 0003 	orr.w	r0, r0, #3
    6eda:	f883 045a 	strb.w	r0, [r3, #1114]	; 0x45a
    6ede:	f041 0103 	orr.w	r1, r1, #3
    6ee2:	f883 145b 	strb.w	r1, [r3, #1115]	; 0x45b
    6ee6:	9903      	ldr	r1, [sp, #12]
    6ee8:	f041 0103 	orr.w	r1, r1, #3
    6eec:	f883 145c 	strb.w	r1, [r3, #1116]	; 0x45c
    6ef0:	9902      	ldr	r1, [sp, #8]
    6ef2:	f041 0103 	orr.w	r1, r1, #3
    6ef6:	f883 145d 	strb.w	r1, [r3, #1117]	; 0x45d
    6efa:	9901      	ldr	r1, [sp, #4]
    6efc:	f041 0103 	orr.w	r1, r1, #3
    6f00:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    6f04:	f042 0203 	orr.w	r2, r2, #3
    6f08:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    6f0c:	e762      	b.n	6dd4 <grid_module_init+0x4c>
    6f0e:	4b31      	ldr	r3, [pc, #196]	; (6fd4 <grid_module_init+0x24c>)
    6f10:	f893 2450 	ldrb.w	r2, [r3, #1104]	; 0x450
    6f14:	f042 0201 	orr.w	r2, r2, #1
    6f18:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
    6f1c:	f893 2451 	ldrb.w	r2, [r3, #1105]	; 0x451
    6f20:	f042 0201 	orr.w	r2, r2, #1
    6f24:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
    6f28:	f893 2452 	ldrb.w	r2, [r3, #1106]	; 0x452
    6f2c:	f042 0201 	orr.w	r2, r2, #1
    6f30:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
    6f34:	f893 2453 	ldrb.w	r2, [r3, #1107]	; 0x453
    6f38:	f042 0201 	orr.w	r2, r2, #1
    6f3c:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
    6f40:	f993 045d 	ldrsb.w	r0, [r3, #1117]	; 0x45d
    6f44:	f993 145e 	ldrsb.w	r1, [r3, #1118]	; 0x45e
    6f48:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    6f4c:	f893 445c 	ldrb.w	r4, [r3, #1116]	; 0x45c
    6f50:	f044 0403 	orr.w	r4, r4, #3
    6f54:	f883 445c 	strb.w	r4, [r3, #1116]	; 0x45c
    6f58:	f040 0003 	orr.w	r0, r0, #3
    6f5c:	f883 045d 	strb.w	r0, [r3, #1117]	; 0x45d
    6f60:	f041 0103 	orr.w	r1, r1, #3
    6f64:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    6f68:	f042 0203 	orr.w	r2, r2, #3
    6f6c:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    6f70:	e735      	b.n	6dde <grid_module_init+0x56>
    6f72:	bf00      	nop
    6f74:	00006541 	.word	0x00006541
    6f78:	00005ca1 	.word	0x00005ca1
    6f7c:	000059ed 	.word	0x000059ed
    6f80:	20001404 	.word	0x20001404
    6f84:	20002a50 	.word	0x20002a50
    6f88:	000015fd 	.word	0x000015fd
    6f8c:	00005829 	.word	0x00005829
    6f90:	000015cd 	.word	0x000015cd
    6f94:	00006a49 	.word	0x00006a49
    6f98:	00006bb1 	.word	0x00006bb1
    6f9c:	41008000 	.word	0x41008000
    6fa0:	00006065 	.word	0x00006065
    6fa4:	20001338 	.word	0x20001338
    6fa8:	0000581d 	.word	0x0000581d
    6fac:	0000112d 	.word	0x0000112d
    6fb0:	000010ed 	.word	0x000010ed
    6fb4:	0000128d 	.word	0x0000128d
    6fb8:	20001508 	.word	0x20001508
    6fbc:	00005df1 	.word	0x00005df1
    6fc0:	200012e8 	.word	0x200012e8
    6fc4:	20002140 	.word	0x20002140
    6fc8:	00001ba9 	.word	0x00001ba9
    6fcc:	00001b7d 	.word	0x00001b7d
    6fd0:	20001d50 	.word	0x20001d50
    6fd4:	20000c3c 	.word	0x20000c3c

00006fd8 <grid_port_receive_task>:
void grid_port_receive_task(GRID_PORT_t* por){
    6fd8:	b538      	push	{r3, r4, r5, lr}
	if	(por->rx_double_buffer_status == 1){
    6fda:	8983      	ldrh	r3, [r0, #12]
    6fdc:	2b01      	cmp	r3, #1
    6fde:	d044      	beq.n	706a <grid_port_receive_task+0x92>
    6fe0:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    6fe2:	8943      	ldrh	r3, [r0, #10]
    6fe4:	f644 6220 	movw	r2, #20000	; 0x4e20
    6fe8:	4293      	cmp	r3, r2
    6fea:	d91c      	bls.n	7026 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    6fec:	f890 31db 	ldrb.w	r3, [r0, #475]	; 0x1db
    6ff0:	2b01      	cmp	r3, #1
    6ff2:	d005      	beq.n	7000 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    6ff4:	2300      	movs	r3, #0
    6ff6:	81c3      	strh	r3, [r0, #14]
			por->rx_double_buffer_read_start_index = 0;
    6ff8:	8203      	strh	r3, [r0, #16]
			grid_sys_port_reset_dma(por);
    6ffa:	4b1c      	ldr	r3, [pc, #112]	; (706c <grid_port_receive_task+0x94>)
    6ffc:	4798      	blx	r3
    6ffe:	e014      	b.n	702a <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    7000:	2300      	movs	r3, #0
    7002:	81c3      	strh	r3, [r0, #14]
			por->rx_double_buffer_read_start_index = 0;
    7004:	8203      	strh	r3, [r0, #16]
			por->partner_status = 0;
    7006:	f880 31db 	strb.w	r3, [r0, #475]	; 0x1db
			por->rx_double_buffer_timeout =0;
    700a:	8143      	strh	r3, [r0, #10]
			grid_sys_port_reset_dma(por);
    700c:	4b17      	ldr	r3, [pc, #92]	; (706c <grid_port_receive_task+0x94>)
    700e:	4798      	blx	r3
			grid_sys_state.error_code = 7; // WHITE
    7010:	4b17      	ldr	r3, [pc, #92]	; (7070 <grid_port_receive_task+0x98>)
    7012:	2207      	movs	r2, #7
    7014:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
			grid_sys_state.error_style = 2; // CONST
    7018:	2202      	movs	r2, #2
    701a:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
			grid_sys_state.error_state = 200; // CONST
    701e:	22c8      	movs	r2, #200	; 0xc8
    7020:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    7024:	e001      	b.n	702a <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    7026:	3301      	adds	r3, #1
    7028:	8143      	strh	r3, [r0, #10]
void grid_port_receive_task(GRID_PORT_t* por){
    702a:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    702c:	4d11      	ldr	r5, [pc, #68]	; (7074 <grid_port_receive_task+0x9c>)
    702e:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    7030:	89e3      	ldrh	r3, [r4, #14]
    7032:	18e2      	adds	r2, r4, r3
    7034:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
    7038:	2a0a      	cmp	r2, #10
    703a:	d012      	beq.n	7062 <grid_port_receive_task+0x8a>
    703c:	b1aa      	cbz	r2, 706a <grid_port_receive_task+0x92>
			por->rx_double_buffer_seek_start_index++;			
    703e:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    7040:	b29b      	uxth	r3, r3
    7042:	fba5 e203 	umull	lr, r2, r5, r3
    7046:	0992      	lsrs	r2, r2, #6
    7048:	fb00 3312 	mls	r3, r0, r2, r3
    704c:	81e3      	strh	r3, [r4, #14]
    704e:	3901      	subs	r1, #1
    7050:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    7052:	2900      	cmp	r1, #0
    7054:	d1ec      	bne.n	7030 <grid_port_receive_task+0x58>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    7056:	b29b      	uxth	r3, r3
    7058:	4423      	add	r3, r4
    705a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
    705e:	2b0a      	cmp	r3, #10
    7060:	d103      	bne.n	706a <grid_port_receive_task+0x92>
		por->rx_double_buffer_timeout = 0;
    7062:	2300      	movs	r3, #0
    7064:	8163      	strh	r3, [r4, #10]
		por->rx_double_buffer_status = 1;
    7066:	2301      	movs	r3, #1
    7068:	81a3      	strh	r3, [r4, #12]
    706a:	bd38      	pop	{r3, r4, r5, pc}
    706c:	000069d5 	.word	0x000069d5
    7070:	20001d50 	.word	0x20001d50
    7074:	51eb851f 	.word	0x51eb851f

00007078 <RTC_Scheduler_rx_task_cb>:
{
    7078:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    707a:	4805      	ldr	r0, [pc, #20]	; (7090 <RTC_Scheduler_rx_task_cb+0x18>)
    707c:	4c05      	ldr	r4, [pc, #20]	; (7094 <RTC_Scheduler_rx_task_cb+0x1c>)
    707e:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    7080:	4805      	ldr	r0, [pc, #20]	; (7098 <RTC_Scheduler_rx_task_cb+0x20>)
    7082:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    7084:	4805      	ldr	r0, [pc, #20]	; (709c <RTC_Scheduler_rx_task_cb+0x24>)
    7086:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    7088:	4805      	ldr	r0, [pc, #20]	; (70a0 <RTC_Scheduler_rx_task_cb+0x28>)
    708a:	47a0      	blx	r4
    708c:	bd10      	pop	{r4, pc}
    708e:	bf00      	nop
    7090:	20001990 	.word	0x20001990
    7094:	00006fd9 	.word	0x00006fd9
    7098:	200027a8 	.word	0x200027a8
    709c:	20002324 	.word	0x20002324
    70a0:	20002144 	.word	0x20002144

000070a4 <grid_port_receive_decode>:
void grid_port_receive_decode(GRID_PORT_t* por, uint8_t startcommand, uint8_t length){
    70a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70a8:	b089      	sub	sp, #36	; 0x24
    70aa:	af00      	add	r7, sp, #0
    70ac:	4604      	mov	r4, r0
    70ae:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    70b0:	2301      	movs	r3, #1
    70b2:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    70b4:	230e      	movs	r3, #14
    70b6:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    70b8:	2315      	movs	r3, #21
    70ba:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    70bc:	2304      	movs	r3, #4
    70be:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    70c0:	2330      	movs	r3, #48	; 0x30
    70c2:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    70c4:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    70c6:	230a      	movs	r3, #10
    70c8:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    70ca:	2300      	movs	r3, #0
    70cc:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    70ce:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    70d0:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    70d2:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    70d4:	1dd3      	adds	r3, r2, #7
    70d6:	f023 0307 	bic.w	r3, r3, #7
    70da:	ebad 0d03 	sub.w	sp, sp, r3
    70de:	46e8      	mov	r8, sp
	for (uint8_t i = 0; i<length; i++){
    70e0:	2a00      	cmp	r2, #0
    70e2:	f000 8135 	beq.w	7350 <grid_port_receive_decode+0x2ac>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    70e6:	8a02      	ldrh	r2, [r0, #16]
    70e8:	f10d 39ff 	add.w	r9, sp, #4294967295
    70ec:	1e69      	subs	r1, r5, #1
    70ee:	fa58 f181 	uxtab	r1, r8, r1
    70f2:	464e      	mov	r6, r9
    70f4:	3201      	adds	r2, #1
    70f6:	eba2 0208 	sub.w	r2, r2, r8
    70fa:	f8df e284 	ldr.w	lr, [pc, #644]	; 7380 <grid_port_receive_decode+0x2dc>
    70fe:	20c8      	movs	r0, #200	; 0xc8
    7100:	eb02 0c06 	add.w	ip, r2, r6
    7104:	fb8e 3a0c 	smull	r3, sl, lr, ip
    7108:	ea4f 73ec 	mov.w	r3, ip, asr #31
    710c:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    7110:	fb00 c313 	mls	r3, r0, r3, ip
    7114:	4423      	add	r3, r4
    7116:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
    711a:	f806 3f01 	strb.w	r3, [r6, #1]!
	for (uint8_t i = 0; i<length; i++){
    711e:	428e      	cmp	r6, r1
    7120:	d1ee      	bne.n	7100 <grid_port_receive_decode+0x5c>
	if (length>5){
    7122:	2d05      	cmp	r5, #5
    7124:	d82f      	bhi.n	7186 <grid_port_receive_decode+0xe2>
	if (message[1] == GRID_MSG_BROADCAST){
    7126:	f898 3001 	ldrb.w	r3, [r8, #1]
    712a:	2b0f      	cmp	r3, #15
    712c:	f000 8115 	beq.w	735a <grid_port_receive_decode+0x2b6>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    7130:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    7134:	2200      	movs	r2, #0
    7136:	f8df e248 	ldr.w	lr, [pc, #584]	; 7380 <grid_port_receive_decode+0x2dc>
    713a:	26c8      	movs	r6, #200	; 0xc8
    713c:	4610      	mov	r0, r2
    713e:	eb0c 0102 	add.w	r1, ip, r2
    7142:	fb8e 3801 	smull	r3, r8, lr, r1
    7146:	17cb      	asrs	r3, r1, #31
    7148:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    714c:	fb06 1313 	mls	r3, r6, r3, r1
    7150:	4423      	add	r3, r4
    7152:	f883 00da 	strb.w	r0, [r3, #218]	; 0xda
    7156:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    7158:	b2d3      	uxtb	r3, r2
    715a:	429d      	cmp	r5, r3
    715c:	d8ef      	bhi.n	713e <grid_port_receive_decode+0x9a>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    715e:	8a23      	ldrh	r3, [r4, #16]
    7160:	442b      	add	r3, r5
    7162:	4a87      	ldr	r2, [pc, #540]	; (7380 <grid_port_receive_decode+0x2dc>)
    7164:	fb82 1203 	smull	r1, r2, r2, r3
    7168:	17dd      	asrs	r5, r3, #31
    716a:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
    716e:	22c8      	movs	r2, #200	; 0xc8
    7170:	fb02 3515 	mls	r5, r2, r5, r3
    7174:	b2ad      	uxth	r5, r5
    7176:	8225      	strh	r5, [r4, #16]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    7178:	81e5      	strh	r5, [r4, #14]
	por->rx_double_buffer_status = 0;
    717a:	2300      	movs	r3, #0
    717c:	81a3      	strh	r3, [r4, #12]
}
    717e:	3724      	adds	r7, #36	; 0x24
    7180:	46bd      	mov	sp, r7
    7182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    7186:	f1a5 0a03 	sub.w	sl, r5, #3
    718a:	f107 0213 	add.w	r2, r7, #19
    718e:	2102      	movs	r1, #2
    7190:	eb08 000a 	add.w	r0, r8, sl
    7194:	4b7b      	ldr	r3, [pc, #492]	; (7384 <grid_port_receive_decode+0x2e0>)
    7196:	4798      	blx	r3
    7198:	4683      	mov	fp, r0
		checksum_calculated = grid_sys_calculate_checksum(message, length-3);
    719a:	4651      	mov	r1, sl
    719c:	4640      	mov	r0, r8
    719e:	4b7a      	ldr	r3, [pc, #488]	; (7388 <grid_port_receive_decode+0x2e4>)
    71a0:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    71a2:	fa5f fb8b 	uxtb.w	fp, fp
    71a6:	4583      	cmp	fp, r0
    71a8:	d00b      	beq.n	71c2 <grid_port_receive_decode+0x11e>
			grid_sys_state.error_state = 2000;
    71aa:	4b78      	ldr	r3, [pc, #480]	; (738c <grid_port_receive_decode+0x2e8>)
    71ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    71b0:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
			grid_sys_state.error_style = 1;
    71b4:	2201      	movs	r2, #1
    71b6:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
			grid_sys_state.error_code = 4; //RED
    71ba:	2204      	movs	r2, #4
    71bc:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
    71c0:	e7b1      	b.n	7126 <grid_port_receive_decode+0x82>
		if (checksum_calculated == checksum_received && error_flag == 0){
    71c2:	7cfb      	ldrb	r3, [r7, #19]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d1f0      	bne.n	71aa <grid_port_receive_decode+0x106>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    71c8:	f898 3001 	ldrb.w	r3, [r8, #1]
    71cc:	2b0f      	cmp	r3, #15
    71ce:	d00c      	beq.n	71ea <grid_port_receive_decode+0x146>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    71d0:	2b0e      	cmp	r3, #14
    71d2:	d023      	beq.n	721c <grid_port_receive_decode+0x178>
				grid_sys_state.error_code = 4; // RED
    71d4:	4b6d      	ldr	r3, [pc, #436]	; (738c <grid_port_receive_decode+0x2e8>)
    71d6:	2204      	movs	r2, #4
    71d8:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
				grid_sys_state.error_style = 2; // CONST
    71dc:	2202      	movs	r2, #2
    71de:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
				grid_sys_state.error_state = 200; // CONST
    71e2:	22c8      	movs	r2, #200	; 0xc8
    71e4:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    71e8:	e7a2      	b.n	7130 <grid_port_receive_decode+0x8c>
				if (grid_buffer_write_init(&por->rx_buffer, length)){
    71ea:	f504 7ade 	add.w	sl, r4, #444	; 0x1bc
    71ee:	4629      	mov	r1, r5
    71f0:	4650      	mov	r0, sl
    71f2:	4b67      	ldr	r3, [pc, #412]	; (7390 <grid_port_receive_decode+0x2ec>)
    71f4:	4798      	blx	r3
    71f6:	2800      	cmp	r0, #0
    71f8:	d095      	beq.n	7126 <grid_port_receive_decode+0x82>
						grid_buffer_write_character(&por->rx_buffer, message[i]);
    71fa:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 73a8 <grid_port_receive_decode+0x304>
    71fe:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    7202:	4650      	mov	r0, sl
    7204:	47d8      	blx	fp
					for (uint8_t i=0; i<length; i++){
    7206:	45b1      	cmp	r9, r6
    7208:	d1f9      	bne.n	71fe <grid_port_receive_decode+0x15a>
					grid_buffer_write_acknowledge(&por->rx_buffer);
    720a:	4650      	mov	r0, sl
    720c:	4b61      	ldr	r3, [pc, #388]	; (7394 <grid_port_receive_decode+0x2f0>)
    720e:	4798      	blx	r3
					grid_port_process_inbound(por);
    7210:	4620      	mov	r0, r4
    7212:	4b61      	ldr	r3, [pc, #388]	; (7398 <grid_port_receive_decode+0x2f4>)
    7214:	4798      	blx	r3
					response[2] = GRID_MSG_ACKNOWLEDGE;
    7216:	2306      	movs	r3, #6
    7218:	75bb      	strb	r3, [r7, #22]
    721a:	e784      	b.n	7126 <grid_port_receive_decode+0x82>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){
    721c:	f898 3002 	ldrb.w	r3, [r8, #2]
    7220:	2b06      	cmp	r3, #6
    7222:	d028      	beq.n	7276 <grid_port_receive_decode+0x1d2>
				else if (message[2] == GRID_MSG_BELL){
    7224:	2b07      	cmp	r3, #7
    7226:	d183      	bne.n	7130 <grid_port_receive_decode+0x8c>
					if (por->partner_status == 0){
    7228:	f894 31db 	ldrb.w	r3, [r4, #475]	; 0x1db
    722c:	bb73      	cbnz	r3, 728c <grid_port_receive_decode+0x1e8>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    722e:	f898 3003 	ldrb.w	r3, [r8, #3]
    7232:	7962      	ldrb	r2, [r4, #5]
    7234:	1a9b      	subs	r3, r3, r2
    7236:	3306      	adds	r3, #6
    7238:	425a      	negs	r2, r3
    723a:	f003 0303 	and.w	r3, r3, #3
    723e:	f002 0203 	and.w	r2, r2, #3
    7242:	bf58      	it	pl
    7244:	4253      	negpl	r3, r2
    7246:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    724a:	f1a5 000c 	sub.w	r0, r5, #12
    724e:	2200      	movs	r2, #0
    7250:	2108      	movs	r1, #8
    7252:	4440      	add	r0, r8
    7254:	4b4b      	ldr	r3, [pc, #300]	; (7384 <grid_port_receive_decode+0x2e0>)
    7256:	4798      	blx	r3
    7258:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
						por->partner_status = 1;
    725c:	2301      	movs	r3, #1
    725e:	f884 31db 	strb.w	r3, [r4, #475]	; 0x1db
						grid_sys_state.error_code = 2; // GREEN
    7262:	4b4a      	ldr	r3, [pc, #296]	; (738c <grid_port_receive_decode+0x2e8>)
    7264:	2202      	movs	r2, #2
    7266:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						grid_sys_state.error_style = 2; // CONST
    726a:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
						grid_sys_state.error_state = 200; // CONST
    726e:	22c8      	movs	r2, #200	; 0xc8
    7270:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    7274:	e757      	b.n	7126 <grid_port_receive_decode+0x82>
					grid_sys_state.error_code = 5; // Purple
    7276:	4b45      	ldr	r3, [pc, #276]	; (738c <grid_port_receive_decode+0x2e8>)
    7278:	2205      	movs	r2, #5
    727a:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
					grid_sys_state.error_style = 2; // CONST
    727e:	2202      	movs	r2, #2
    7280:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
					grid_sys_state.error_state = 200; // CONST
    7284:	22c8      	movs	r2, #200	; 0xc8
    7286:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    728a:	e751      	b.n	7130 <grid_port_receive_decode+0x8c>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    728c:	f898 3003 	ldrb.w	r3, [r8, #3]
    7290:	7962      	ldrb	r2, [r4, #5]
    7292:	1a9b      	subs	r3, r3, r2
    7294:	3306      	adds	r3, #6
    7296:	425a      	negs	r2, r3
    7298:	f003 0303 	and.w	r3, r3, #3
    729c:	f002 0203 	and.w	r2, r2, #3
    72a0:	bf58      	it	pl
    72a2:	4253      	negpl	r3, r2
    72a4:	f894 61d8 	ldrb.w	r6, [r4, #472]	; 0x1d8
    72a8:	42b3      	cmp	r3, r6
    72aa:	bf14      	ite	ne
    72ac:	2600      	movne	r6, #0
    72ae:	2601      	moveq	r6, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    72b0:	f1a5 000c 	sub.w	r0, r5, #12
    72b4:	2200      	movs	r2, #0
    72b6:	2108      	movs	r1, #8
    72b8:	4440      	add	r0, r8
    72ba:	4b32      	ldr	r3, [pc, #200]	; (7384 <grid_port_receive_decode+0x2e0>)
    72bc:	4798      	blx	r3
    72be:	6078      	str	r0, [r7, #4]
						volatile uint32_t debug2 = por->partner_hwcfg;
    72c0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    72c4:	60bb      	str	r3, [r7, #8]
						validator &= (por->partner_hwcfg == debug);
    72c6:	687a      	ldr	r2, [r7, #4]
						if (validator == 0){
    72c8:	4293      	cmp	r3, r2
    72ca:	d100      	bne.n	72ce <grid_port_receive_decode+0x22a>
    72cc:	b96e      	cbnz	r6, 72ea <grid_port_receive_decode+0x246>
							por->partner_status = 0;
    72ce:	2300      	movs	r3, #0
    72d0:	f884 31db 	strb.w	r3, [r4, #475]	; 0x1db
							grid_sys_state.error_code = 7; // WHITE
    72d4:	4b2d      	ldr	r3, [pc, #180]	; (738c <grid_port_receive_decode+0x2e8>)
    72d6:	2207      	movs	r2, #7
    72d8:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
							grid_sys_state.error_style = 2; // CONST
    72dc:	2202      	movs	r2, #2
    72de:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
							grid_sys_state.error_state = 200; // CONST
    72e2:	22c8      	movs	r2, #200	; 0xc8
    72e4:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    72e8:	e71d      	b.n	7126 <grid_port_receive_decode+0x82>
							grid_sys_state.error_code = 1; // BLUE
    72ea:	4b28      	ldr	r3, [pc, #160]	; (738c <grid_port_receive_decode+0x2e8>)
    72ec:	2201      	movs	r2, #1
    72ee:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
							grid_sys_state.error_style = 2; // CONST
    72f2:	2202      	movs	r2, #2
    72f4:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
							grid_sys_state.error_state = 200; // CONST
    72f8:	22c8      	movs	r2, #200	; 0xc8
    72fa:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    72fe:	e712      	b.n	7126 <grid_port_receive_decode+0x82>
			sprintf(checksum, "%02x", grid_sys_calculate_checksum(response, response_length-3));
    7300:	f1a8 0103 	sub.w	r1, r8, #3
    7304:	f107 0014 	add.w	r0, r7, #20
    7308:	4b1f      	ldr	r3, [pc, #124]	; (7388 <grid_port_receive_decode+0x2e4>)
    730a:	4798      	blx	r3
    730c:	4602      	mov	r2, r0
    730e:	4923      	ldr	r1, [pc, #140]	; (739c <grid_port_receive_decode+0x2f8>)
    7310:	f107 000c 	add.w	r0, r7, #12
    7314:	4b22      	ldr	r3, [pc, #136]	; (73a0 <grid_port_receive_decode+0x2fc>)
    7316:	4798      	blx	r3
			response[4] = checksum[0];
    7318:	7b3b      	ldrb	r3, [r7, #12]
    731a:	763b      	strb	r3, [r7, #24]
			response[5] = checksum[1];
    731c:	7b7b      	ldrb	r3, [r7, #13]
    731e:	767b      	strb	r3, [r7, #25]
			for (uint8_t i=0; i<response_length; i++)
    7320:	f1b8 0f00 	cmp.w	r8, #0
    7324:	d010      	beq.n	7348 <grid_port_receive_decode+0x2a4>
    7326:	f107 0614 	add.w	r6, r7, #20
    732a:	f108 38ff 	add.w	r8, r8, #4294967295
    732e:	fa5f f888 	uxtb.w	r8, r8
    7332:	f108 0801 	add.w	r8, r8, #1
    7336:	44b0      	add	r8, r6
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    7338:	f8df a06c 	ldr.w	sl, [pc, #108]	; 73a8 <grid_port_receive_decode+0x304>
    733c:	f816 1b01 	ldrb.w	r1, [r6], #1
    7340:	4648      	mov	r0, r9
    7342:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    7344:	45b0      	cmp	r8, r6
    7346:	d1f9      	bne.n	733c <grid_port_receive_decode+0x298>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    7348:	4648      	mov	r0, r9
    734a:	4b12      	ldr	r3, [pc, #72]	; (7394 <grid_port_receive_decode+0x2f0>)
    734c:	4798      	blx	r3
    734e:	e012      	b.n	7376 <grid_port_receive_decode+0x2d2>
	if (message[1] == GRID_MSG_BROADCAST){
    7350:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7354:	2b0f      	cmp	r3, #15
    7356:	f47f af02 	bne.w	715e <grid_port_receive_decode+0xba>
		uint8_t response_length = strlen(response);
    735a:	f107 0014 	add.w	r0, r7, #20
    735e:	4b11      	ldr	r3, [pc, #68]	; (73a4 <grid_port_receive_decode+0x300>)
    7360:	4798      	blx	r3
    7362:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    7366:	f504 79d2 	add.w	r9, r4, #420	; 0x1a4
    736a:	4641      	mov	r1, r8
    736c:	4648      	mov	r0, r9
    736e:	4b08      	ldr	r3, [pc, #32]	; (7390 <grid_port_receive_decode+0x2ec>)
    7370:	4798      	blx	r3
    7372:	2800      	cmp	r0, #0
    7374:	d1c4      	bne.n	7300 <grid_port_receive_decode+0x25c>
	for (uint8_t i = 0; i<length; i++){
    7376:	2d00      	cmp	r5, #0
    7378:	f47f aeda 	bne.w	7130 <grid_port_receive_decode+0x8c>
    737c:	e6ef      	b.n	715e <grid_port_receive_decode+0xba>
    737e:	bf00      	nop
    7380:	51eb851f 	.word	0x51eb851f
    7384:	00006025 	.word	0x00006025
    7388:	00006219 	.word	0x00006219
    738c:	20001d50 	.word	0x20001d50
    7390:	00006285 	.word	0x00006285
    7394:	000062d1 	.word	0x000062d1
    7398:	00006615 	.word	0x00006615
    739c:	00009e68 	.word	0x00009e68
    73a0:	00009049 	.word	0x00009049
    73a4:	00009091 	.word	0x00009091
    73a8:	000062b5 	.word	0x000062b5

000073ac <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    73ac:	8983      	ldrh	r3, [r0, #12]
    73ae:	2b01      	cmp	r3, #1
    73b0:	d000      	beq.n	73b4 <grid_port_receive_complete_task+0x8>
    73b2:	4770      	bx	lr
void grid_port_receive_complete_task(GRID_PORT_t* por){
    73b4:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    73b6:	8a01      	ldrh	r1, [r0, #16]
    73b8:	89c3      	ldrh	r3, [r0, #14]
    73ba:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    73bc:	bf34      	ite	cc
    73be:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    73c0:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    73c4:	1a52      	subs	r2, r2, r1
    73c6:	b2d2      	uxtb	r2, r2
    73c8:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    73ca:	b2c9      	uxtb	r1, r1
    73cc:	4b02      	ldr	r3, [pc, #8]	; (73d8 <grid_port_receive_complete_task+0x2c>)
    73ce:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    73d0:	2300      	movs	r3, #0
    73d2:	81a3      	strh	r3, [r4, #12]
    73d4:	bd10      	pop	{r4, pc}
    73d6:	bf00      	nop
    73d8:	000070a5 	.word	0x000070a5

000073dc <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    73dc:	b570      	push	{r4, r5, r6, lr}
	
	
	
	
	RTC_Scheduler_tick.interval = 1;
    73de:	4c1c      	ldr	r4, [pc, #112]	; (7450 <init_timer+0x74>)
    73e0:	2301      	movs	r3, #1
    73e2:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
	RTC_Scheduler_tick.cb       = RTC_Scheduler_tick_cb;
    73e6:	4a1b      	ldr	r2, [pc, #108]	; (7454 <init_timer+0x78>)
    73e8:	f8c4 2484 	str.w	r2, [r4, #1156]	; 0x484
	RTC_Scheduler_tick.mode     = TIMER_TASK_REPEAT;
    73ec:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
	
	
	RTC_Scheduler_report.interval = 32768/2; //1sec
    73f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    73f4:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    73f8:	4a17      	ldr	r2, [pc, #92]	; (7458 <init_timer+0x7c>)
    73fa:	f8c4 2498 	str.w	r2, [r4, #1176]	; 0x498
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    73fe:	f884 349c 	strb.w	r3, [r4, #1180]	; 0x49c
	
		
	RTC_Scheduler_ping.interval = 16380/5; //1sec
    7402:	f640 42cc 	movw	r2, #3276	; 0xccc
    7406:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    740a:	4a14      	ldr	r2, [pc, #80]	; (745c <init_timer+0x80>)
    740c:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    7410:	f884 34b0 	strb.w	r3, [r4, #1200]	; 0x4b0
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    7414:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    7418:	4a11      	ldr	r2, [pc, #68]	; (7460 <init_timer+0x84>)
    741a:	f8c4 24c0 	str.w	r2, [r4, #1216]	; 0x4c0
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    741e:	f884 34c4 	strb.w	r3, [r4, #1220]	; 0x4c4

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_tick);
    7422:	4d10      	ldr	r5, [pc, #64]	; (7464 <init_timer+0x88>)
    7424:	f504 618f 	add.w	r1, r4, #1144	; 0x478
    7428:	4628      	mov	r0, r5
    742a:	4e0f      	ldr	r6, [pc, #60]	; (7468 <init_timer+0x8c>)
    742c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    742e:	f204 418c 	addw	r1, r4, #1164	; 0x48c
    7432:	4628      	mov	r0, r5
    7434:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    7436:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
    743a:	4628      	mov	r0, r5
    743c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    743e:	f504 6194 	add.w	r1, r4, #1184	; 0x4a0
    7442:	4628      	mov	r0, r5
    7444:	47b0      	blx	r6
	timer_start(&RTC_Scheduler);
    7446:	4628      	mov	r0, r5
    7448:	4b08      	ldr	r3, [pc, #32]	; (746c <init_timer+0x90>)
    744a:	4798      	blx	r3
    744c:	bd70      	pop	{r4, r5, r6, pc}
    744e:	bf00      	nop
    7450:	20000c3c 	.word	0x20000c3c
    7454:	00005835 	.word	0x00005835
    7458:	00005851 	.word	0x00005851
    745c:	00005871 	.word	0x00005871
    7460:	00007079 	.word	0x00007079
    7464:	20001230 	.word	0x20001230
    7468:	0000188d 	.word	0x0000188d
    746c:	0000184d 	.word	0x0000184d

00007470 <main>:




int main(void)
{
    7470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7474:	b0fd      	sub	sp, #500	; 0x1f4
	
	
	#include "usb/class/midi/device/audiodf_midi.h"
	
	atmel_start_init();
    7476:	4b30      	ldr	r3, [pc, #192]	; (7538 <main+0xc8>)
    7478:	4798      	blx	r3
	
	
	//TIMER_0_example2();

	audiodf_midi_init();
    747a:	4b30      	ldr	r3, [pc, #192]	; (753c <main+0xcc>)
    747c:	4798      	blx	r3



	composite_device_start();
    747e:	4b30      	ldr	r3, [pc, #192]	; (7540 <main+0xd0>)
    7480:	4798      	blx	r3
	
	grid_module_init();
    7482:	4b30      	ldr	r3, [pc, #192]	; (7544 <main+0xd4>)
    7484:	4798      	blx	r3
	
	init_timer();
    7486:	4b30      	ldr	r3, [pc, #192]	; (7548 <main+0xd8>)
    7488:	4798      	blx	r3

	uint8_t mapmode = 1;
	uint8_t sysmode = 1;
	
	
	uint32_t loopcounter = 0;
    748a:	2300      	movs	r3, #0
	uint8_t sysmode = 1;
    748c:	2201      	movs	r2, #1
    748e:	9210      	str	r2, [sp, #64]	; 0x40
	uint8_t mapmode = 1;
    7490:	920c      	str	r2, [sp, #48]	; 0x30
	uint8_t colorcode = 0;
    7492:	930d      	str	r3, [sp, #52]	; 0x34
	uint16_t colorfade = 0;
    7494:	930e      	str	r3, [sp, #56]	; 0x38
	uint32_t faketimer = 0;
    7496:	930b      	str	r3, [sp, #44]	; 0x2c
		grid_port_receive_complete_task(&GRID_PORT_S);
		grid_port_receive_complete_task(&GRID_PORT_W);
		
				
				
		if (pingflag){
    7498:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 7570 <main+0x100>
			
			grid_sys_ping_all();
			pingflag = 0;
    749c:	469b      	mov	fp, r3
		}
	
		//checktimer flags
		if (reportflag){
			
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
    749e:	4a2b      	ldr	r2, [pc, #172]	; (754c <main+0xdc>)
    74a0:	3210      	adds	r2, #16
    74a2:	9211      	str	r2, [sp, #68]	; 0x44
				
				for (uint8_t i = 0; i<4; i++){
					
					if (r[i] == 0 && g[i] == 0 && b[i]==0){
						
						uint8_t ra = random()%3;
    74a4:	4699      	mov	r9, r3
    74a6:	e149      	b.n	773c <main+0x2cc>
			grid_sys_ping_all();
    74a8:	4b29      	ldr	r3, [pc, #164]	; (7550 <main+0xe0>)
    74aa:	4798      	blx	r3
			pingflag = 0;
    74ac:	f88a b031 	strb.w	fp, [sl, #49]	; 0x31
    74b0:	e152      	b.n	7758 <main+0x2e8>
			cdcdf_acm_write(system_report_tasks, strlen(system_report_tasks));		
    74b2:	a84a      	add	r0, sp, #296	; 0x128
    74b4:	4b27      	ldr	r3, [pc, #156]	; (7554 <main+0xe4>)
    74b6:	4798      	blx	r3
    74b8:	4601      	mov	r1, r0
    74ba:	a84a      	add	r0, sp, #296	; 0x128
    74bc:	4b26      	ldr	r3, [pc, #152]	; (7558 <main+0xe8>)
    74be:	4798      	blx	r3
    74c0:	e152      	b.n	7768 <main+0x2f8>
			cdcdf_acm_write(system_report_grid, strlen(system_report_grid));		
    74c2:	a818      	add	r0, sp, #96	; 0x60
    74c4:	4b23      	ldr	r3, [pc, #140]	; (7554 <main+0xe4>)
    74c6:	4798      	blx	r3
    74c8:	4601      	mov	r1, r0
    74ca:	a818      	add	r0, sp, #96	; 0x60
    74cc:	4b22      	ldr	r3, [pc, #136]	; (7558 <main+0xe8>)
    74ce:	4798      	blx	r3
    74d0:	e14a      	b.n	7768 <main+0x2f8>
				hiddf_keyboard_keys_state_change(key_array, 1);
    74d2:	2101      	movs	r1, #1
    74d4:	4821      	ldr	r0, [pc, #132]	; (755c <main+0xec>)
    74d6:	4b22      	ldr	r3, [pc, #136]	; (7560 <main+0xf0>)
    74d8:	4798      	blx	r3
				hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
    74da:	2101      	movs	r1, #1
    74dc:	f06f 0013 	mvn.w	r0, #19
    74e0:	4b20      	ldr	r3, [pc, #128]	; (7564 <main+0xf4>)
    74e2:	4798      	blx	r3
    74e4:	e073      	b.n	75ce <main+0x15e>
						
						if (ra == 0){
							r[i] = 255;
						}
						else if (ra == 1){
    74e6:	2801      	cmp	r0, #1
							g[i] = 255;
    74e8:	bf0c      	ite	eq
    74ea:	9b12      	ldreq	r3, [sp, #72]	; 0x48
						}
						else{
							b[i] = 255;
    74ec:	9b13      	ldrne	r3, [sp, #76]	; 0x4c
    74ee:	f883 8000 	strb.w	r8, [r3]
    74f2:	3401      	adds	r4, #1
    74f4:	3501      	adds	r5, #1
    74f6:	3601      	adds	r6, #1
				for (uint8_t i = 0; i<4; i++){
    74f8:	42a7      	cmp	r7, r4
    74fa:	d03b      	beq.n	7574 <main+0x104>
    74fc:	940a      	str	r4, [sp, #40]	; 0x28
					if (r[i] == 0 && g[i] == 0 && b[i]==0){
    74fe:	7823      	ldrb	r3, [r4, #0]
    7500:	2b00      	cmp	r3, #0
    7502:	d1f6      	bne.n	74f2 <main+0x82>
    7504:	9512      	str	r5, [sp, #72]	; 0x48
    7506:	782b      	ldrb	r3, [r5, #0]
    7508:	2b00      	cmp	r3, #0
    750a:	d1f2      	bne.n	74f2 <main+0x82>
    750c:	9613      	str	r6, [sp, #76]	; 0x4c
    750e:	7833      	ldrb	r3, [r6, #0]
    7510:	2b00      	cmp	r3, #0
    7512:	d1ee      	bne.n	74f2 <main+0x82>
						uint8_t ra = random()%3;
    7514:	4b14      	ldr	r3, [pc, #80]	; (7568 <main+0xf8>)
    7516:	4798      	blx	r3
    7518:	4b14      	ldr	r3, [pc, #80]	; (756c <main+0xfc>)
    751a:	fb83 2300 	smull	r2, r3, r3, r0
    751e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    7522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7526:	1ac0      	subs	r0, r0, r3
						if (ra == 0){
    7528:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    752c:	d1db      	bne.n	74e6 <main+0x76>
							r[i] = 255;
    752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7530:	f883 8000 	strb.w	r8, [r3]
    7534:	e7dd      	b.n	74f2 <main+0x82>
    7536:	bf00      	nop
    7538:	000002d1 	.word	0x000002d1
    753c:	00008431 	.word	0x00008431
    7540:	00008db5 	.word	0x00008db5
    7544:	00006d89 	.word	0x00006d89
    7548:	000073dd 	.word	0x000073dd
    754c:	00009d18 	.word	0x00009d18
    7550:	00006389 	.word	0x00006389
    7554:	00009091 	.word	0x00009091
    7558:	00007d41 	.word	0x00007d41
    755c:	20000344 	.word	0x20000344
    7560:	00007f81 	.word	0x00007f81
    7564:	00008215 	.word	0x00008215
    7568:	00008fb5 	.word	0x00008fb5
    756c:	55555556 	.word	0x55555556
    7570:	20000c3c 	.word	0x20000c3c
    7574:	2500      	movs	r5, #0
    7576:	b2ee      	uxtb	r6, r5
				
				
				
				for (uint8_t i = 0; i<16; i++){
					
					grid_led_set_max(i, 0, r[i%4], g[i%4], b[i%4]);
    7578:	f006 0303 	and.w	r3, r6, #3
    757c:	aa14      	add	r2, sp, #80	; 0x50
    757e:	5cd7      	ldrb	r7, [r2, r3]
    7580:	aa15      	add	r2, sp, #84	; 0x54
    7582:	f812 8003 	ldrb.w	r8, [r2, r3]
    7586:	aa16      	add	r2, sp, #88	; 0x58
    7588:	5cd3      	ldrb	r3, [r2, r3]
    758a:	930a      	str	r3, [sp, #40]	; 0x28
    758c:	9300      	str	r3, [sp, #0]
    758e:	4643      	mov	r3, r8
    7590:	463a      	mov	r2, r7
    7592:	4659      	mov	r1, fp
    7594:	4630      	mov	r0, r6
    7596:	4cb8      	ldr	r4, [pc, #736]	; (7878 <main+0x408>)
    7598:	47a0      	blx	r4
					grid_led_set_mid(i, 0, r[i%4]/2, g[i%4]/2, b[i%4]/2);
    759a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    759c:	085c      	lsrs	r4, r3, #1
    759e:	9400      	str	r4, [sp, #0]
    75a0:	ea4f 0358 	mov.w	r3, r8, lsr #1
    75a4:	087a      	lsrs	r2, r7, #1
    75a6:	4659      	mov	r1, fp
    75a8:	4630      	mov	r0, r6
    75aa:	4cb4      	ldr	r4, [pc, #720]	; (787c <main+0x40c>)
    75ac:	47a0      	blx	r4
    75ae:	3501      	adds	r5, #1
				for (uint8_t i = 0; i<16; i++){
    75b0:	2d10      	cmp	r5, #16
    75b2:	d1e0      	bne.n	7576 <main+0x106>
					
				}
				
				
				
				sysmode = ! sysmode;
    75b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    75b6:	2b00      	cmp	r3, #0
    75b8:	bf09      	itett	eq
    75ba:	2401      	moveq	r4, #1
    75bc:	2400      	movne	r4, #0
				
				if (sysmode){					
					grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
    75be:	2101      	moveq	r1, #1
    75c0:	4608      	moveq	r0, r1
					
				}
				else{
					grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_SLAVE);
    75c2:	bf1c      	itt	ne
    75c4:	2102      	movne	r1, #2
    75c6:	2001      	movne	r0, #1
    75c8:	4bad      	ldr	r3, [pc, #692]	; (7880 <main+0x410>)
    75ca:	4798      	blx	r3
				sysmode = ! sysmode;
    75cc:	9410      	str	r4, [sp, #64]	; 0x40
				}
				
				
			}
			
			mapmode = !mapmode;
    75ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75d0:	f083 0301 	eor.w	r3, r3, #1
    75d4:	930c      	str	r3, [sp, #48]	; 0x30
					
		}
		
		
		
		if (faketimer > 100){
    75d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    75d8:	2b64      	cmp	r3, #100	; 0x64
    75da:	f200 81f9 	bhi.w	79d0 <main+0x560>
			grid_tel_frequency_tick();
			faketimer = 0;
		}
		faketimer++;
    75de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    75e0:	3301      	adds	r3, #1
    75e2:	930b      	str	r3, [sp, #44]	; 0x2c

			
		// SYNC TEST
		if (sysmode){
    75e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    75e6:	2b00      	cmp	r3, #0
    75e8:	f040 81f7 	bne.w	79da <main+0x56a>
			
		/* ========================= UI_PROCESS_INBOUND ============================= */
		
		// Push out all changes
		
		task_current = TASK_UIIN;
    75ec:	2303      	movs	r3, #3
    75ee:	f88a 300c 	strb.w	r3, [sl, #12]
		
		task_current = TASK_UNDEFINED;
    75f2:	f88a b00c 	strb.w	fp, [sl, #12]
		
		/* ========================= GRID MOVE TASK ============================= */		
		
		uint16_t length = 0;
		
		grid_port_process_ui(&GRID_PORT_U);		
    75f6:	4da3      	ldr	r5, [pc, #652]	; (7884 <main+0x414>)
    75f8:	4628      	mov	r0, r5
    75fa:	4ba3      	ldr	r3, [pc, #652]	; (7888 <main+0x418>)
    75fc:	4798      	blx	r3
		
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    75fe:	4628      	mov	r0, r5
    7600:	4ca2      	ldr	r4, [pc, #648]	; (788c <main+0x41c>)
    7602:	47a0      	blx	r4

		grid_port_process_inbound(&GRID_PORT_N);		
    7604:	48a2      	ldr	r0, [pc, #648]	; (7890 <main+0x420>)
    7606:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    7608:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 78d0 <main+0x460>
    760c:	4640      	mov	r0, r8
    760e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    7610:	4fa0      	ldr	r7, [pc, #640]	; (7894 <main+0x424>)
    7612:	4638      	mov	r0, r7
    7614:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);		
    7616:	4ea0      	ldr	r6, [pc, #640]	; (7898 <main+0x428>)
    7618:	4630      	mov	r0, r6
    761a:	47a0      	blx	r4
		
		grid_port_process_outbound_usart(&GRID_PORT_N);
    761c:	489c      	ldr	r0, [pc, #624]	; (7890 <main+0x420>)
    761e:	4c9f      	ldr	r4, [pc, #636]	; (789c <main+0x42c>)
    7620:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    7622:	4640      	mov	r0, r8
    7624:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    7626:	4638      	mov	r0, r7
    7628:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    762a:	4630      	mov	r0, r6
    762c:	47a0      	blx	r4
		
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    762e:	489c      	ldr	r0, [pc, #624]	; (78a0 <main+0x430>)
    7630:	4b9c      	ldr	r3, [pc, #624]	; (78a4 <main+0x434>)
    7632:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    7634:	4628      	mov	r0, r5
    7636:	4b9c      	ldr	r3, [pc, #624]	; (78a8 <main+0x438>)
    7638:	4798      	blx	r3
			
			for (uint8_t i=0; i<16; i++){
				
				//grid_led_set_color(i, 0, 255, 0);
				
				grid_led_set_color(i, colorfade*(colorcode==0)/4, colorfade*(colorcode==1)/4, colorfade*(colorcode==2)/4);
    763a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    763c:	461d      	mov	r5, r3
    763e:	461f      	mov	r7, r3
    7640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7642:	4613      	mov	r3, r2
    7644:	2a00      	cmp	r2, #0
    7646:	bf18      	it	ne
    7648:	2700      	movne	r7, #0
    764a:	f3c7 0787 	ubfx	r7, r7, #2, #8
    764e:	2a01      	cmp	r2, #1
    7650:	bf14      	ite	ne
    7652:	2600      	movne	r6, #0
    7654:	2601      	moveq	r6, #1
    7656:	fb05 f606 	mul.w	r6, r5, r6
    765a:	f3c6 0687 	ubfx	r6, r6, #2, #8
    765e:	2a02      	cmp	r2, #2
    7660:	bf14      	ite	ne
    7662:	2300      	movne	r3, #0
    7664:	2301      	moveq	r3, #1
    7666:	fb05 f503 	mul.w	r5, r5, r3
    766a:	f3c5 0887 	ubfx	r8, r5, #2, #8
    766e:	2400      	movs	r4, #0
    7670:	4d8e      	ldr	r5, [pc, #568]	; (78ac <main+0x43c>)
    7672:	4643      	mov	r3, r8
    7674:	4632      	mov	r2, r6
    7676:	4639      	mov	r1, r7
    7678:	4620      	mov	r0, r4
    767a:	47a8      	blx	r5
    767c:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){
    767e:	2c10      	cmp	r4, #16
    7680:	d1f7      	bne.n	7672 <main+0x202>
				
				
			}
			
			colorfade++;
    7682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7684:	3301      	adds	r3, #1
    7686:	b29b      	uxth	r3, r3
    7688:	930e      	str	r3, [sp, #56]	; 0x38
			
			if (colorfade == 4*256){
    768a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    768e:	f000 81da 	beq.w	7a46 <main+0x5d6>
				colorfade = 0;
			}
			
			if (colorfade == 0) colorcode++;
    7692:	2b00      	cmp	r3, #0
    7694:	f000 81d7 	beq.w	7a46 <main+0x5d6>
			if (colorcode>2) colorcode=0;	
    7698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    769a:	4613      	mov	r3, r2
    769c:	9910      	ldr	r1, [sp, #64]	; 0x40
    769e:	2a02      	cmp	r2, #2
    76a0:	bf88      	it	hi
    76a2:	460b      	movhi	r3, r1
    76a4:	930d      	str	r3, [sp, #52]	; 0x34
			
		}
		
		
		
		if (grid_sys_state.error_state){
    76a6:	4b82      	ldr	r3, [pc, #520]	; (78b0 <main+0x440>)
    76a8:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
    76ac:	b313      	cbz	r3, 76f4 <main+0x284>
			
			grid_sys_state.error_state--;
    76ae:	4c80      	ldr	r4, [pc, #512]	; (78b0 <main+0x440>)
    76b0:	3b01      	subs	r3, #1
    76b2:	f8a4 33ea 	strh.w	r3, [r4, #1002]	; 0x3ea
			
			uint8_t intensity = grid_sys_error_intensity(&grid_sys_state);
    76b6:	4620      	mov	r0, r4
    76b8:	4b7e      	ldr	r3, [pc, #504]	; (78b4 <main+0x444>)
    76ba:	4798      	blx	r3
			uint8_t color_r   = ((grid_sys_state.error_code>>2)&1);
    76bc:	f894 33ed 	ldrb.w	r3, [r4, #1005]	; 0x3ed
    76c0:	f3c3 0780 	ubfx	r7, r3, #2, #1
			uint8_t color_b   = ((grid_sys_state.error_code>>0)&1);
			
			
			for (uint8_t i=0; i<16; i++){	
				//grid_led_set_color(i, 0, 255, 0);		
				grid_led_set_color(i, intensity*color_r, intensity*color_g, intensity*color_b);
    76c4:	fb17 f700 	smulbb	r7, r7, r0
    76c8:	b2ff      	uxtb	r7, r7
			uint8_t color_g   = ((grid_sys_state.error_code>>1)&1);
    76ca:	f3c3 0640 	ubfx	r6, r3, #1, #1
				grid_led_set_color(i, intensity*color_r, intensity*color_g, intensity*color_b);
    76ce:	fb16 f600 	smulbb	r6, r6, r0
    76d2:	b2f6      	uxtb	r6, r6
			uint8_t color_b   = ((grid_sys_state.error_code>>0)&1);
    76d4:	f003 0501 	and.w	r5, r3, #1
				grid_led_set_color(i, intensity*color_r, intensity*color_g, intensity*color_b);
    76d8:	fb15 f500 	smulbb	r5, r5, r0
    76dc:	fa5f f885 	uxtb.w	r8, r5
    76e0:	2400      	movs	r4, #0
    76e2:	4d72      	ldr	r5, [pc, #456]	; (78ac <main+0x43c>)
    76e4:	4643      	mov	r3, r8
    76e6:	4632      	mov	r2, r6
    76e8:	4639      	mov	r1, r7
    76ea:	4620      	mov	r0, r4
    76ec:	47a8      	blx	r5
    76ee:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){	
    76f0:	2c10      	cmp	r4, #16
    76f2:	d1f7      	bne.n	76e4 <main+0x274>
		}
		
		
		
		// SEND DATA TO LEDs
		dma_spi_done = 0;
    76f4:	f8ca b004 	str.w	fp, [sl, #4]
		spi_m_dma_enable(&GRID_LED);
    76f8:	486f      	ldr	r0, [pc, #444]	; (78b8 <main+0x448>)
    76fa:	4b70      	ldr	r3, [pc, #448]	; (78bc <main+0x44c>)
    76fc:	4798      	blx	r3
			
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    76fe:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
    7702:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
    7706:	4b6e      	ldr	r3, [pc, #440]	; (78c0 <main+0x450>)
    7708:	6818      	ldr	r0, [r3, #0]
    770a:	4b6e      	ldr	r3, [pc, #440]	; (78c4 <main+0x454>)
    770c:	4798      	blx	r3
			
		while (dma_spi_done == 0)
    770e:	f8da 3004 	ldr.w	r3, [sl, #4]
    7712:	2b00      	cmp	r3, #0
    7714:	d0fb      	beq.n	770e <main+0x29e>
		}	
		
		
		
		// IDLETASK
		task_current = TASK_IDLE;
    7716:	2301      	movs	r3, #1
    7718:	f88a 300c 	strb.w	r3, [sl, #12]
		while(loopstart + RTC1SEC/1000 > realtime){
    771c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    771e:	3410      	adds	r4, #16
    7720:	f8da 3008 	ldr.w	r3, [sl, #8]
    7724:	429c      	cmp	r4, r3
    7726:	d907      	bls.n	7738 <main+0x2c8>
			delay_us(10);
    7728:	260a      	movs	r6, #10
    772a:	4d67      	ldr	r5, [pc, #412]	; (78c8 <main+0x458>)
    772c:	4630      	mov	r0, r6
    772e:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    7730:	f8da 3008 	ldr.w	r3, [sl, #8]
    7734:	429c      	cmp	r4, r3
    7736:	d8f9      	bhi.n	772c <main+0x2bc>
		}
		
		task_current = TASK_UNDEFINED;
    7738:	f88a b00c 	strb.w	fp, [sl, #12]
		grid_port_receive_complete_task(&GRID_PORT_N);
    773c:	4854      	ldr	r0, [pc, #336]	; (7890 <main+0x420>)
    773e:	4c63      	ldr	r4, [pc, #396]	; (78cc <main+0x45c>)
    7740:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    7742:	4863      	ldr	r0, [pc, #396]	; (78d0 <main+0x460>)
    7744:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    7746:	4853      	ldr	r0, [pc, #332]	; (7894 <main+0x424>)
    7748:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    774a:	4853      	ldr	r0, [pc, #332]	; (7898 <main+0x428>)
    774c:	47a0      	blx	r4
		if (pingflag){
    774e:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
    7752:	2b00      	cmp	r3, #0
    7754:	f47f aea8 	bne.w	74a8 <main+0x38>
		if (loopcounter == 100){
    7758:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    775c:	f43f aea9 	beq.w	74b2 <main+0x42>
		}else if (loopcounter == 200){
    7760:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
    7764:	f43f aead 	beq.w	74c2 <main+0x52>
		if (reportflag){
    7768:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
    776c:	2b00      	cmp	r3, #0
    776e:	d06b      	beq.n	7848 <main+0x3d8>
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
    7770:	f8da 3008 	ldr.w	r3, [sl, #8]
    7774:	f8da 2010 	ldr.w	r2, [sl, #16]
    7778:	f8da 1014 	ldr.w	r1, [sl, #20]
    777c:	f8da 0018 	ldr.w	r0, [sl, #24]
    7780:	f8da 401c 	ldr.w	r4, [sl, #28]
    7784:	f8da 5020 	ldr.w	r5, [sl, #32]
    7788:	9504      	str	r5, [sp, #16]
    778a:	9403      	str	r4, [sp, #12]
    778c:	9002      	str	r0, [sp, #8]
    778e:	9101      	str	r1, [sp, #4]
    7790:	9200      	str	r2, [sp, #0]
    7792:	464a      	mov	r2, r9
    7794:	9911      	ldr	r1, [sp, #68]	; 0x44
    7796:	a84a      	add	r0, sp, #296	; 0x128
    7798:	4c4e      	ldr	r4, [pc, #312]	; (78d4 <main+0x464>)
    779a:	47a0      	blx	r4
			sprintf(system_report_grid, "N_RX_C %02x\nE_RX_C %02x\nS_RX_C %02x\nW_RX_C %02x\nN_TX_C %02x\nE_TX_C %02x\nS_TX_C %02x\nW_TX_C %02x\nN_BELL_C %02x\nE_BELL_C %02x\nS_BELL_C %02x\nW_BELL_C %02x\n\0", 
    779c:	f8da 34c8 	ldr.w	r3, [sl, #1224]	; 0x4c8
    77a0:	930a      	str	r3, [sp, #40]	; 0x28
    77a2:	f8da 34cc 	ldr.w	r3, [sl, #1228]	; 0x4cc
    77a6:	f8da 24d0 	ldr.w	r2, [sl, #1232]	; 0x4d0
    77aa:	f8da 14d4 	ldr.w	r1, [sl, #1236]	; 0x4d4
    77ae:	f8da 0464 	ldr.w	r0, [sl, #1124]	; 0x464
    77b2:	f8da 5468 	ldr.w	r5, [sl, #1128]	; 0x468
    77b6:	f8da 646c 	ldr.w	r6, [sl, #1132]	; 0x46c
    77ba:	f8da 7470 	ldr.w	r7, [sl, #1136]	; 0x470
				grid_sys_ping_counter[GRID_SYS_NORTH],
    77be:	f89a e4d8 	ldrb.w	lr, [sl, #1240]	; 0x4d8
				grid_sys_ping_counter[GRID_SYS_EAST],
    77c2:	f89a c4d9 	ldrb.w	ip, [sl, #1241]	; 0x4d9
				grid_sys_ping_counter[GRID_SYS_SOUTH],
    77c6:	f89a 84da 	ldrb.w	r8, [sl, #1242]	; 0x4da
				grid_sys_ping_counter[GRID_SYS_WEST]
    77ca:	f89a 94db 	ldrb.w	r9, [sl, #1243]	; 0x4db
			sprintf(system_report_grid, "N_RX_C %02x\nE_RX_C %02x\nS_RX_C %02x\nW_RX_C %02x\nN_TX_C %02x\nE_TX_C %02x\nS_TX_C %02x\nW_TX_C %02x\nN_BELL_C %02x\nE_BELL_C %02x\nS_BELL_C %02x\nW_BELL_C %02x\n\0", 
    77ce:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    77d2:	f8cd 8020 	str.w	r8, [sp, #32]
    77d6:	f8cd c01c 	str.w	ip, [sp, #28]
    77da:	f8cd e018 	str.w	lr, [sp, #24]
    77de:	9705      	str	r7, [sp, #20]
    77e0:	9604      	str	r6, [sp, #16]
    77e2:	9503      	str	r5, [sp, #12]
    77e4:	9002      	str	r0, [sp, #8]
    77e6:	9101      	str	r1, [sp, #4]
    77e8:	9200      	str	r2, [sp, #0]
    77ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    77ec:	493a      	ldr	r1, [pc, #232]	; (78d8 <main+0x468>)
    77ee:	3168      	adds	r1, #104	; 0x68
    77f0:	a818      	add	r0, sp, #96	; 0x60
    77f2:	47a0      	blx	r4
			grid_sys_rx_counter[GRID_SYS_NORTH]=0;
    77f4:	f8ca b4c8 	str.w	fp, [sl, #1224]	; 0x4c8
			grid_sys_rx_counter[GRID_SYS_EAST]=0;
    77f8:	f8ca b4cc 	str.w	fp, [sl, #1228]	; 0x4cc
			grid_sys_rx_counter[GRID_SYS_SOUTH]=0;
    77fc:	f8ca b4d0 	str.w	fp, [sl, #1232]	; 0x4d0
			grid_sys_rx_counter[GRID_SYS_WEST]=0;
    7800:	f8ca b4d4 	str.w	fp, [sl, #1236]	; 0x4d4
			grid_sys_tx_counter[GRID_SYS_NORTH]=0;
    7804:	f8ca b464 	str.w	fp, [sl, #1124]	; 0x464
			grid_sys_tx_counter[GRID_SYS_EAST]=0;
    7808:	f8ca b468 	str.w	fp, [sl, #1128]	; 0x468
			grid_sys_tx_counter[GRID_SYS_SOUTH]=0;
    780c:	f8ca b46c 	str.w	fp, [sl, #1132]	; 0x46c
			grid_sys_tx_counter[GRID_SYS_WEST]=0;
    7810:	f8ca b470 	str.w	fp, [sl, #1136]	; 0x470
			grid_sys_ping_counter[GRID_SYS_NORTH]=0;
    7814:	f88a b4d8 	strb.w	fp, [sl, #1240]	; 0x4d8
			grid_sys_ping_counter[GRID_SYS_EAST]=0;
    7818:	f88a b4d9 	strb.w	fp, [sl, #1241]	; 0x4d9
			grid_sys_ping_counter[GRID_SYS_SOUTH]=0;
    781c:	f88a b4da 	strb.w	fp, [sl, #1242]	; 0x4da
			grid_sys_ping_counter[GRID_SYS_WEST]=0;
    7820:	f88a b4db 	strb.w	fp, [sl, #1243]	; 0x4db
			realtime = 0;
    7824:	f8ca b008 	str.w	fp, [sl, #8]
			reportflag--;
    7828:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
    782c:	3b01      	subs	r3, #1
    782e:	b2db      	uxtb	r3, r3
    7830:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
    7834:	465b      	mov	r3, fp
				task_counter[i] = 0;
    7836:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    783a:	f8c2 b010 	str.w	fp, [r2, #16]
    783e:	3301      	adds	r3, #1
			for (uint8_t i=0; i<8; i++)
    7840:	2b08      	cmp	r3, #8
    7842:	d1f8      	bne.n	7836 <main+0x3c6>
			loopcounter = 0;
    7844:	f04f 0900 	mov.w	r9, #0
		loopcounter++;
    7848:	f109 0901 	add.w	r9, r9, #1
		loopstart = realtime;
    784c:	f8da 3008 	ldr.w	r3, [sl, #8]
    7850:	930f      	str	r3, [sp, #60]	; 0x3c
	CRITICAL_SECTION_ENTER();
    7852:	a817      	add	r0, sp, #92	; 0x5c
    7854:	4b21      	ldr	r3, [pc, #132]	; (78dc <main+0x46c>)
    7856:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7858:	4b21      	ldr	r3, [pc, #132]	; (78e0 <main+0x470>)
    785a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    785e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7862:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7866:	4054      	eors	r4, r2
    7868:	400c      	ands	r4, r1
    786a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    786c:	a817      	add	r0, sp, #92	; 0x5c
    786e:	4b1d      	ldr	r3, [pc, #116]	; (78e4 <main+0x474>)
    7870:	4798      	blx	r3
		if (mapmode != gpio_get_pin_level(MAP_MODE)){
    7872:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    7876:	e037      	b.n	78e8 <main+0x478>
    7878:	00005975 	.word	0x00005975
    787c:	00005941 	.word	0x00005941
    7880:	000068a5 	.word	0x000068a5
    7884:	20001b70 	.word	0x20001b70
    7888:	00006bfd 	.word	0x00006bfd
    788c:	00006615 	.word	0x00006615
    7890:	20001990 	.word	0x20001990
    7894:	20002324 	.word	0x20002324
    7898:	20002144 	.word	0x20002144
    789c:	0000683d 	.word	0x0000683d
    78a0:	200025cc 	.word	0x200025cc
    78a4:	0000679d 	.word	0x0000679d
    78a8:	000067f9 	.word	0x000067f9
    78ac:	00005881 	.word	0x00005881
    78b0:	20001d50 	.word	0x20001d50
    78b4:	00005fa9 	.word	0x00005fa9
    78b8:	20001404 	.word	0x20001404
    78bc:	000015a5 	.word	0x000015a5
    78c0:	20002a50 	.word	0x20002a50
    78c4:	000014c1 	.word	0x000014c1
    78c8:	00001315 	.word	0x00001315
    78cc:	000073ad 	.word	0x000073ad
    78d0:	200027a8 	.word	0x200027a8
    78d4:	00009049 	.word	0x00009049
    78d8:	00009d18 	.word	0x00009d18
    78dc:	000012b5 	.word	0x000012b5
    78e0:	41008000 	.word	0x41008000
    78e4:	000012c3 	.word	0x000012c3
    78e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    78ea:	42a2      	cmp	r2, r4
    78ec:	d06e      	beq.n	79cc <main+0x55c>
			if (mapmode == 1){
    78ee:	2a00      	cmp	r2, #0
    78f0:	f47f adef 	bne.w	74d2 <main+0x62>
				hiddf_keyboard_keys_state_change(key_array, 1);
    78f4:	2101      	movs	r1, #1
    78f6:	4857      	ldr	r0, [pc, #348]	; (7a54 <main+0x5e4>)
    78f8:	4b57      	ldr	r3, [pc, #348]	; (7a58 <main+0x5e8>)
    78fa:	4798      	blx	r3
				uint8_t r[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    78fc:	4c57      	ldr	r4, [pc, #348]	; (7a5c <main+0x5ec>)
    78fe:	47a0      	blx	r4
    7900:	2800      	cmp	r0, #0
    7902:	f000 0001 	and.w	r0, r0, #1
    7906:	bfa8      	it	ge
    7908:	4240      	negge	r0, r0
    790a:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    790e:	47a0      	blx	r4
    7910:	2800      	cmp	r0, #0
    7912:	f000 0001 	and.w	r0, r0, #1
    7916:	bfa8      	it	ge
    7918:	4240      	negge	r0, r0
    791a:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    791e:	47a0      	blx	r4
    7920:	2800      	cmp	r0, #0
    7922:	f000 0001 	and.w	r0, r0, #1
    7926:	bfa8      	it	ge
    7928:	4240      	negge	r0, r0
    792a:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    792e:	47a0      	blx	r4
    7930:	2800      	cmp	r0, #0
    7932:	f000 0001 	and.w	r0, r0, #1
    7936:	bfa8      	it	ge
    7938:	4240      	negge	r0, r0
    793a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
				uint8_t g[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    793e:	47a0      	blx	r4
    7940:	2800      	cmp	r0, #0
    7942:	f000 0001 	and.w	r0, r0, #1
    7946:	bfa8      	it	ge
    7948:	4240      	negge	r0, r0
    794a:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    794e:	47a0      	blx	r4
    7950:	2800      	cmp	r0, #0
    7952:	f000 0001 	and.w	r0, r0, #1
    7956:	bfa8      	it	ge
    7958:	4240      	negge	r0, r0
    795a:	f88d 0055 	strb.w	r0, [sp, #85]	; 0x55
    795e:	47a0      	blx	r4
    7960:	2800      	cmp	r0, #0
    7962:	f000 0001 	and.w	r0, r0, #1
    7966:	bfa8      	it	ge
    7968:	4240      	negge	r0, r0
    796a:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
    796e:	47a0      	blx	r4
    7970:	2800      	cmp	r0, #0
    7972:	f000 0001 	and.w	r0, r0, #1
    7976:	bfa8      	it	ge
    7978:	4240      	negge	r0, r0
    797a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
				uint8_t b[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    797e:	47a0      	blx	r4
    7980:	2800      	cmp	r0, #0
    7982:	f000 0001 	and.w	r0, r0, #1
    7986:	bfa8      	it	ge
    7988:	4240      	negge	r0, r0
    798a:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
    798e:	47a0      	blx	r4
    7990:	2800      	cmp	r0, #0
    7992:	f000 0001 	and.w	r0, r0, #1
    7996:	bfa8      	it	ge
    7998:	4240      	negge	r0, r0
    799a:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    799e:	47a0      	blx	r4
    79a0:	2800      	cmp	r0, #0
    79a2:	f000 0001 	and.w	r0, r0, #1
    79a6:	bfa8      	it	ge
    79a8:	4240      	negge	r0, r0
    79aa:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
    79ae:	47a0      	blx	r4
    79b0:	2800      	cmp	r0, #0
    79b2:	f000 0001 	and.w	r0, r0, #1
    79b6:	bfa8      	it	ge
    79b8:	4240      	negge	r0, r0
    79ba:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
    79be:	ac14      	add	r4, sp, #80	; 0x50
    79c0:	ad15      	add	r5, sp, #84	; 0x54
    79c2:	ae16      	add	r6, sp, #88	; 0x58
    79c4:	462f      	mov	r7, r5
							b[i] = 255;
    79c6:	f04f 08ff 	mov.w	r8, #255	; 0xff
    79ca:	e597      	b.n	74fc <main+0x8c>
    79cc:	940c      	str	r4, [sp, #48]	; 0x30
    79ce:	e602      	b.n	75d6 <main+0x166>
			grid_tel_frequency_tick();
    79d0:	4b23      	ldr	r3, [pc, #140]	; (7a60 <main+0x5f0>)
    79d2:	4798      	blx	r3
			faketimer = 0;
    79d4:	2300      	movs	r3, #0
    79d6:	930b      	str	r3, [sp, #44]	; 0x2c
    79d8:	e601      	b.n	75de <main+0x16e>
			grid_sync_set_level(GRID_SYNC_1, loopcounter%2);
    79da:	f009 0101 	and.w	r1, r9, #1
    79de:	2001      	movs	r0, #1
    79e0:	4b20      	ldr	r3, [pc, #128]	; (7a64 <main+0x5f4>)
    79e2:	4798      	blx	r3
		task_current = TASK_UIIN;
    79e4:	2303      	movs	r3, #3
    79e6:	f88a 300c 	strb.w	r3, [sl, #12]
		task_current = TASK_UNDEFINED;
    79ea:	f88a b00c 	strb.w	fp, [sl, #12]
		grid_port_process_ui(&GRID_PORT_U);		
    79ee:	4d1e      	ldr	r5, [pc, #120]	; (7a68 <main+0x5f8>)
    79f0:	4628      	mov	r0, r5
    79f2:	4b1e      	ldr	r3, [pc, #120]	; (7a6c <main+0x5fc>)
    79f4:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    79f6:	4628      	mov	r0, r5
    79f8:	4c1d      	ldr	r4, [pc, #116]	; (7a70 <main+0x600>)
    79fa:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    79fc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 7a98 <main+0x628>
    7a00:	4640      	mov	r0, r8
    7a02:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    7a04:	4f1b      	ldr	r7, [pc, #108]	; (7a74 <main+0x604>)
    7a06:	4638      	mov	r0, r7
    7a08:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    7a0a:	4e1b      	ldr	r6, [pc, #108]	; (7a78 <main+0x608>)
    7a0c:	4630      	mov	r0, r6
    7a0e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);		
    7a10:	481a      	ldr	r0, [pc, #104]	; (7a7c <main+0x60c>)
    7a12:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    7a14:	4640      	mov	r0, r8
    7a16:	4c1a      	ldr	r4, [pc, #104]	; (7a80 <main+0x610>)
    7a18:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    7a1a:	4638      	mov	r0, r7
    7a1c:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    7a1e:	4630      	mov	r0, r6
    7a20:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    7a22:	4816      	ldr	r0, [pc, #88]	; (7a7c <main+0x60c>)
    7a24:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    7a26:	4817      	ldr	r0, [pc, #92]	; (7a84 <main+0x614>)
    7a28:	4b17      	ldr	r3, [pc, #92]	; (7a88 <main+0x618>)
    7a2a:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    7a2c:	4628      	mov	r0, r5
    7a2e:	4b17      	ldr	r3, [pc, #92]	; (7a8c <main+0x61c>)
    7a30:	4798      	blx	r3
			task_current = TASK_LED;
    7a32:	2302      	movs	r3, #2
    7a34:	f88a 300c 	strb.w	r3, [sl, #12]
			grid_led_tick();		
    7a38:	4b15      	ldr	r3, [pc, #84]	; (7a90 <main+0x620>)
    7a3a:	4798      	blx	r3
			grid_led_render_all();
    7a3c:	4b15      	ldr	r3, [pc, #84]	; (7a94 <main+0x624>)
    7a3e:	4798      	blx	r3
			task_current = TASK_UNDEFINED;
    7a40:	f88a b00c 	strb.w	fp, [sl, #12]
    7a44:	e62f      	b.n	76a6 <main+0x236>
			if (colorfade == 0) colorcode++;
    7a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a48:	3301      	adds	r3, #1
    7a4a:	b2db      	uxtb	r3, r3
    7a4c:	930d      	str	r3, [sp, #52]	; 0x34
    7a4e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    7a52:	e621      	b.n	7698 <main+0x228>
    7a54:	20000348 	.word	0x20000348
    7a58:	00007f81 	.word	0x00007f81
    7a5c:	00008fb5 	.word	0x00008fb5
    7a60:	00005f89 	.word	0x00005f89
    7a64:	0000697d 	.word	0x0000697d
    7a68:	20001b70 	.word	0x20001b70
    7a6c:	00006bfd 	.word	0x00006bfd
    7a70:	00006615 	.word	0x00006615
    7a74:	200027a8 	.word	0x200027a8
    7a78:	20002324 	.word	0x20002324
    7a7c:	20002144 	.word	0x20002144
    7a80:	0000683d 	.word	0x0000683d
    7a84:	200025cc 	.word	0x200025cc
    7a88:	0000679d 	.word	0x0000679d
    7a8c:	000067f9 	.word	0x000067f9
    7a90:	000058bd 	.word	0x000058bd
    7a94:	00005c45 	.word	0x00005c45
    7a98:	20001990 	.word	0x20001990

00007a9c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a9e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7aa0:	780b      	ldrb	r3, [r1, #0]
    7aa2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    7aa6:	2c01      	cmp	r4, #1
    7aa8:	d15e      	bne.n	7b68 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    7aaa:	888c      	ldrh	r4, [r1, #4]
    7aac:	4d35      	ldr	r5, [pc, #212]	; (7b84 <cdcdf_acm_req+0xe8>)
    7aae:	782d      	ldrb	r5, [r5, #0]
    7ab0:	42a5      	cmp	r5, r4
    7ab2:	d003      	beq.n	7abc <cdcdf_acm_req+0x20>
    7ab4:	4d33      	ldr	r5, [pc, #204]	; (7b84 <cdcdf_acm_req+0xe8>)
    7ab6:	786d      	ldrb	r5, [r5, #1]
    7ab8:	42a5      	cmp	r5, r4
    7aba:	d158      	bne.n	7b6e <cdcdf_acm_req+0xd2>
    7abc:	4616      	mov	r6, r2
    7abe:	460c      	mov	r4, r1
    7ac0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    7ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
    7ac6:	d10c      	bne.n	7ae2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    7ac8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    7aca:	4b2f      	ldr	r3, [pc, #188]	; (7b88 <cdcdf_acm_req+0xec>)
    7acc:	4798      	blx	r3
    7ace:	4601      	mov	r1, r0
	switch (req->bRequest) {
    7ad0:	7863      	ldrb	r3, [r4, #1]
    7ad2:	2b20      	cmp	r3, #32
    7ad4:	d013      	beq.n	7afe <cdcdf_acm_req+0x62>
    7ad6:	2b22      	cmp	r3, #34	; 0x22
    7ad8:	d032      	beq.n	7b40 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    7ada:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    7ade:	b003      	add	sp, #12
    7ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    7ae2:	2a01      	cmp	r2, #1
    7ae4:	d046      	beq.n	7b74 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    7ae6:	784b      	ldrb	r3, [r1, #1]
    7ae8:	2b21      	cmp	r3, #33	; 0x21
    7aea:	d145      	bne.n	7b78 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7aec:	88cb      	ldrh	r3, [r1, #6]
    7aee:	2b07      	cmp	r3, #7
    7af0:	d145      	bne.n	7b7e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    7af2:	2300      	movs	r3, #0
    7af4:	2207      	movs	r2, #7
    7af6:	4925      	ldr	r1, [pc, #148]	; (7b8c <cdcdf_acm_req+0xf0>)
    7af8:	4c25      	ldr	r4, [pc, #148]	; (7b90 <cdcdf_acm_req+0xf4>)
    7afa:	47a0      	blx	r4
    7afc:	e7ef      	b.n	7ade <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7afe:	2f07      	cmp	r7, #7
    7b00:	d12b      	bne.n	7b5a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    7b02:	b1be      	cbz	r6, 7b34 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    7b04:	6800      	ldr	r0, [r0, #0]
    7b06:	9000      	str	r0, [sp, #0]
    7b08:	888a      	ldrh	r2, [r1, #4]
    7b0a:	798b      	ldrb	r3, [r1, #6]
    7b0c:	f8ad 2004 	strh.w	r2, [sp, #4]
    7b10:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    7b14:	4b1b      	ldr	r3, [pc, #108]	; (7b84 <cdcdf_acm_req+0xe8>)
    7b16:	691b      	ldr	r3, [r3, #16]
    7b18:	b113      	cbz	r3, 7b20 <cdcdf_acm_req+0x84>
    7b1a:	4668      	mov	r0, sp
    7b1c:	4798      	blx	r3
    7b1e:	b1f8      	cbz	r0, 7b60 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    7b20:	4b18      	ldr	r3, [pc, #96]	; (7b84 <cdcdf_acm_req+0xe8>)
    7b22:	aa02      	add	r2, sp, #8
    7b24:	e912 0003 	ldmdb	r2, {r0, r1}
    7b28:	6098      	str	r0, [r3, #8]
    7b2a:	8199      	strh	r1, [r3, #12]
    7b2c:	0c09      	lsrs	r1, r1, #16
    7b2e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    7b30:	2000      	movs	r0, #0
    7b32:	e7d4      	b.n	7ade <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    7b34:	2300      	movs	r3, #0
    7b36:	2207      	movs	r2, #7
    7b38:	4628      	mov	r0, r5
    7b3a:	4c15      	ldr	r4, [pc, #84]	; (7b90 <cdcdf_acm_req+0xf4>)
    7b3c:	47a0      	blx	r4
    7b3e:	e7ce      	b.n	7ade <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    7b40:	2300      	movs	r3, #0
    7b42:	461a      	mov	r2, r3
    7b44:	4619      	mov	r1, r3
    7b46:	4618      	mov	r0, r3
    7b48:	4d11      	ldr	r5, [pc, #68]	; (7b90 <cdcdf_acm_req+0xf4>)
    7b4a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    7b4c:	4b0d      	ldr	r3, [pc, #52]	; (7b84 <cdcdf_acm_req+0xe8>)
    7b4e:	695b      	ldr	r3, [r3, #20]
    7b50:	b143      	cbz	r3, 7b64 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    7b52:	8860      	ldrh	r0, [r4, #2]
    7b54:	4798      	blx	r3
		return ERR_NONE;
    7b56:	2000      	movs	r0, #0
    7b58:	e7c1      	b.n	7ade <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    7b5a:	f04f 30ff 	mov.w	r0, #4294967295
    7b5e:	e7be      	b.n	7ade <cdcdf_acm_req+0x42>
			return ERR_NONE;
    7b60:	2000      	movs	r0, #0
    7b62:	e7bc      	b.n	7ade <cdcdf_acm_req+0x42>
		return ERR_NONE;
    7b64:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    7b66:	e7ba      	b.n	7ade <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    7b68:	f06f 0009 	mvn.w	r0, #9
    7b6c:	e7b7      	b.n	7ade <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    7b6e:	f06f 0009 	mvn.w	r0, #9
    7b72:	e7b4      	b.n	7ade <cdcdf_acm_req+0x42>
		return ERR_NONE;
    7b74:	2000      	movs	r0, #0
    7b76:	e7b2      	b.n	7ade <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    7b78:	f06f 000c 	mvn.w	r0, #12
    7b7c:	e7af      	b.n	7ade <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    7b7e:	f04f 30ff 	mov.w	r0, #4294967295
    7b82:	e7ac      	b.n	7ade <cdcdf_acm_req+0x42>
    7b84:	20001120 	.word	0x20001120
    7b88:	00008b31 	.word	0x00008b31
    7b8c:	20001128 	.word	0x20001128
    7b90:	0000860d 	.word	0x0000860d

00007b94 <cdcdf_acm_ctrl>:
{
    7b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b98:	b083      	sub	sp, #12
    7b9a:	4616      	mov	r6, r2
	switch (ctrl) {
    7b9c:	2901      	cmp	r1, #1
    7b9e:	d066      	beq.n	7c6e <cdcdf_acm_ctrl+0xda>
    7ba0:	b141      	cbz	r1, 7bb4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    7ba2:	2902      	cmp	r1, #2
    7ba4:	bf0c      	ite	eq
    7ba6:	f06f 001a 	mvneq.w	r0, #26
    7baa:	f06f 000c 	mvnne.w	r0, #12
}
    7bae:	b003      	add	sp, #12
    7bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7bb4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    7bb8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    7bba:	2800      	cmp	r0, #0
    7bbc:	f000 8085 	beq.w	7cca <cdcdf_acm_ctrl+0x136>
    7bc0:	f10a 3bff 	add.w	fp, sl, #4294967295
    7bc4:	f10a 0301 	add.w	r3, sl, #1
    7bc8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7bca:	4f46      	ldr	r7, [pc, #280]	; (7ce4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    7bcc:	f8df 9124 	ldr.w	r9, [pc, #292]	; 7cf4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7bd0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 7cf8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    7bd4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    7bd6:	7943      	ldrb	r3, [r0, #5]
    7bd8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    7bdc:	2b02      	cmp	r3, #2
    7bde:	d002      	beq.n	7be6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    7be0:	f06f 0009 	mvn.w	r0, #9
    7be4:	e7e3      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
    7be6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    7bea:	f89b 3000 	ldrb.w	r3, [fp]
    7bee:	429a      	cmp	r2, r3
    7bf0:	d06e      	beq.n	7cd0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    7bf2:	2bff      	cmp	r3, #255	; 0xff
    7bf4:	d16f      	bne.n	7cd6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    7bf6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    7bfa:	2205      	movs	r2, #5
    7bfc:	6871      	ldr	r1, [r6, #4]
    7bfe:	4b3a      	ldr	r3, [pc, #232]	; (7ce8 <cdcdf_acm_ctrl+0x154>)
    7c00:	4798      	blx	r3
		while (NULL != ep) {
    7c02:	4604      	mov	r4, r0
    7c04:	b1f8      	cbz	r0, 7c46 <cdcdf_acm_ctrl+0xb2>
    7c06:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    7c0a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    7c0c:	7963      	ldrb	r3, [r4, #5]
    7c0e:	7922      	ldrb	r2, [r4, #4]
    7c10:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7c14:	b292      	uxth	r2, r2
    7c16:	78e1      	ldrb	r1, [r4, #3]
    7c18:	4628      	mov	r0, r5
    7c1a:	47b8      	blx	r7
    7c1c:	2800      	cmp	r0, #0
    7c1e:	d15d      	bne.n	7cdc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7c20:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    7c24:	bf14      	ite	ne
    7c26:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7c2a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    7c2e:	4628      	mov	r0, r5
    7c30:	47c8      	blx	r9
			desc->sod = ep;
    7c32:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    7c34:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7c36:	6871      	ldr	r1, [r6, #4]
    7c38:	4420      	add	r0, r4
    7c3a:	47c0      	blx	r8
		while (NULL != ep) {
    7c3c:	4604      	mov	r4, r0
    7c3e:	2800      	cmp	r0, #0
    7c40:	d1e3      	bne.n	7c0a <cdcdf_acm_ctrl+0x76>
    7c42:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    7c46:	6833      	ldr	r3, [r6, #0]
    7c48:	7818      	ldrb	r0, [r3, #0]
    7c4a:	2204      	movs	r2, #4
    7c4c:	6871      	ldr	r1, [r6, #4]
    7c4e:	4418      	add	r0, r3
    7c50:	4b25      	ldr	r3, [pc, #148]	; (7ce8 <cdcdf_acm_ctrl+0x154>)
    7c52:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    7c54:	9b00      	ldr	r3, [sp, #0]
    7c56:	459b      	cmp	fp, r3
    7c58:	d004      	beq.n	7c64 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d1ba      	bne.n	7bd4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    7c5e:	f06f 0009 	mvn.w	r0, #9
    7c62:	e7a4      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    7c64:	2201      	movs	r2, #1
    7c66:	4b21      	ldr	r3, [pc, #132]	; (7cec <cdcdf_acm_ctrl+0x158>)
    7c68:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    7c6a:	2000      	movs	r0, #0
    7c6c:	e79f      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7c6e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    7c70:	b142      	cbz	r2, 7c84 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7c72:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    7c74:	795b      	ldrb	r3, [r3, #5]
    7c76:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    7c7a:	2b02      	cmp	r3, #2
    7c7c:	d002      	beq.n	7c84 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    7c7e:	f06f 0009 	mvn.w	r0, #9
    7c82:	e794      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    7c84:	7823      	ldrb	r3, [r4, #0]
    7c86:	2bff      	cmp	r3, #255	; 0xff
    7c88:	d008      	beq.n	7c9c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    7c8a:	23ff      	movs	r3, #255	; 0xff
    7c8c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    7c8e:	78a0      	ldrb	r0, [r4, #2]
    7c90:	4298      	cmp	r0, r3
    7c92:	d003      	beq.n	7c9c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7c94:	4b16      	ldr	r3, [pc, #88]	; (7cf0 <cdcdf_acm_ctrl+0x15c>)
    7c96:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7c98:	23ff      	movs	r3, #255	; 0xff
    7c9a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    7c9c:	7863      	ldrb	r3, [r4, #1]
    7c9e:	2bff      	cmp	r3, #255	; 0xff
    7ca0:	d008      	beq.n	7cb4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    7ca2:	23ff      	movs	r3, #255	; 0xff
    7ca4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    7ca6:	78e0      	ldrb	r0, [r4, #3]
    7ca8:	4298      	cmp	r0, r3
    7caa:	d003      	beq.n	7cb4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7cac:	4b10      	ldr	r3, [pc, #64]	; (7cf0 <cdcdf_acm_ctrl+0x15c>)
    7cae:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7cb0:	23ff      	movs	r3, #255	; 0xff
    7cb2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    7cb4:	7920      	ldrb	r0, [r4, #4]
    7cb6:	28ff      	cmp	r0, #255	; 0xff
    7cb8:	d003      	beq.n	7cc2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    7cba:	4b0d      	ldr	r3, [pc, #52]	; (7cf0 <cdcdf_acm_ctrl+0x15c>)
    7cbc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7cbe:	23ff      	movs	r3, #255	; 0xff
    7cc0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    7cc2:	2000      	movs	r0, #0
    7cc4:	4b09      	ldr	r3, [pc, #36]	; (7cec <cdcdf_acm_ctrl+0x158>)
    7cc6:	7158      	strb	r0, [r3, #5]
    7cc8:	e771      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    7cca:	f06f 0009 	mvn.w	r0, #9
    7cce:	e76e      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    7cd0:	f06f 0011 	mvn.w	r0, #17
    7cd4:	e76b      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    7cd6:	f06f 001b 	mvn.w	r0, #27
    7cda:	e768      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    7cdc:	f06f 0013 	mvn.w	r0, #19
    7ce0:	e765      	b.n	7bae <cdcdf_acm_ctrl+0x1a>
    7ce2:	bf00      	nop
    7ce4:	00001f31 	.word	0x00001f31
    7ce8:	00008b51 	.word	0x00008b51
    7cec:	20001120 	.word	0x20001120
    7cf0:	00001f99 	.word	0x00001f99
    7cf4:	00001fc5 	.word	0x00001fc5
    7cf8:	00008b8b 	.word	0x00008b8b

00007cfc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    7cfc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    7cfe:	4b0a      	ldr	r3, [pc, #40]	; (7d28 <cdcdf_acm_init+0x2c>)
    7d00:	4798      	blx	r3
    7d02:	2801      	cmp	r0, #1
    7d04:	d80c      	bhi.n	7d20 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    7d06:	4809      	ldr	r0, [pc, #36]	; (7d2c <cdcdf_acm_init+0x30>)
    7d08:	4b09      	ldr	r3, [pc, #36]	; (7d30 <cdcdf_acm_init+0x34>)
    7d0a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    7d0c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    7d0e:	3018      	adds	r0, #24
    7d10:	4b08      	ldr	r3, [pc, #32]	; (7d34 <cdcdf_acm_init+0x38>)
    7d12:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7d14:	4908      	ldr	r1, [pc, #32]	; (7d38 <cdcdf_acm_init+0x3c>)
    7d16:	2001      	movs	r0, #1
    7d18:	4b08      	ldr	r3, [pc, #32]	; (7d3c <cdcdf_acm_init+0x40>)
    7d1a:	4798      	blx	r3
	return ERR_NONE;
    7d1c:	2000      	movs	r0, #0
    7d1e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7d20:	f06f 0010 	mvn.w	r0, #16
}
    7d24:	bd08      	pop	{r3, pc}
    7d26:	bf00      	nop
    7d28:	00008b3d 	.word	0x00008b3d
    7d2c:	20001120 	.word	0x20001120
    7d30:	00007b95 	.word	0x00007b95
    7d34:	00008add 	.word	0x00008add
    7d38:	20000350 	.word	0x20000350
    7d3c:	00008a49 	.word	0x00008a49

00007d40 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    7d40:	4b07      	ldr	r3, [pc, #28]	; (7d60 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    7d42:	795b      	ldrb	r3, [r3, #5]
    7d44:	b143      	cbz	r3, 7d58 <cdcdf_acm_write+0x18>
{
    7d46:	b510      	push	{r4, lr}
    7d48:	460a      	mov	r2, r1
    7d4a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    7d4c:	2301      	movs	r3, #1
    7d4e:	4804      	ldr	r0, [pc, #16]	; (7d60 <cdcdf_acm_write+0x20>)
    7d50:	78c0      	ldrb	r0, [r0, #3]
    7d52:	4c04      	ldr	r4, [pc, #16]	; (7d64 <cdcdf_acm_write+0x24>)
    7d54:	47a0      	blx	r4
    7d56:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    7d58:	f06f 0010 	mvn.w	r0, #16
    7d5c:	4770      	bx	lr
    7d5e:	bf00      	nop
    7d60:	20001120 	.word	0x20001120
    7d64:	0000860d 	.word	0x0000860d

00007d68 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7d68:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7d6a:	780b      	ldrb	r3, [r1, #0]
    7d6c:	2b81      	cmp	r3, #129	; 0x81
    7d6e:	d010      	beq.n	7d92 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7d70:	f3c3 1341 	ubfx	r3, r3, #5, #2
    7d74:	2b01      	cmp	r3, #1
    7d76:	d13f      	bne.n	7df8 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    7d78:	888a      	ldrh	r2, [r1, #4]
    7d7a:	4b22      	ldr	r3, [pc, #136]	; (7e04 <hid_keyboard_req+0x9c>)
    7d7c:	7b1b      	ldrb	r3, [r3, #12]
    7d7e:	429a      	cmp	r2, r3
    7d80:	d13d      	bne.n	7dfe <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    7d82:	784b      	ldrb	r3, [r1, #1]
    7d84:	2b03      	cmp	r3, #3
    7d86:	d028      	beq.n	7dda <hid_keyboard_req+0x72>
    7d88:	2b0b      	cmp	r3, #11
    7d8a:	d02c      	beq.n	7de6 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    7d8c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    7d90:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7d92:	784b      	ldrb	r3, [r1, #1]
    7d94:	2b06      	cmp	r3, #6
    7d96:	d002      	beq.n	7d9e <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    7d98:	f06f 0009 	mvn.w	r0, #9
    7d9c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7d9e:	888a      	ldrh	r2, [r1, #4]
    7da0:	4b18      	ldr	r3, [pc, #96]	; (7e04 <hid_keyboard_req+0x9c>)
    7da2:	7b1b      	ldrb	r3, [r3, #12]
    7da4:	429a      	cmp	r2, r3
    7da6:	d002      	beq.n	7dae <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    7da8:	f06f 0009 	mvn.w	r0, #9
    7dac:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    7dae:	884b      	ldrh	r3, [r1, #2]
    7db0:	0a1b      	lsrs	r3, r3, #8
    7db2:	2b21      	cmp	r3, #33	; 0x21
    7db4:	d004      	beq.n	7dc0 <hid_keyboard_req+0x58>
    7db6:	2b22      	cmp	r3, #34	; 0x22
    7db8:	d009      	beq.n	7dce <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    7dba:	f06f 000c 	mvn.w	r0, #12
    7dbe:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    7dc0:	4b10      	ldr	r3, [pc, #64]	; (7e04 <hid_keyboard_req+0x9c>)
    7dc2:	6819      	ldr	r1, [r3, #0]
    7dc4:	2300      	movs	r3, #0
    7dc6:	780a      	ldrb	r2, [r1, #0]
    7dc8:	4c0f      	ldr	r4, [pc, #60]	; (7e08 <hid_keyboard_req+0xa0>)
    7dca:	47a0      	blx	r4
    7dcc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    7dce:	2300      	movs	r3, #0
    7dd0:	223b      	movs	r2, #59	; 0x3b
    7dd2:	490e      	ldr	r1, [pc, #56]	; (7e0c <hid_keyboard_req+0xa4>)
    7dd4:	4c0c      	ldr	r4, [pc, #48]	; (7e08 <hid_keyboard_req+0xa0>)
    7dd6:	47a0      	blx	r4
    7dd8:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    7dda:	2300      	movs	r3, #0
    7ddc:	2201      	movs	r2, #1
    7dde:	490c      	ldr	r1, [pc, #48]	; (7e10 <hid_keyboard_req+0xa8>)
    7de0:	4c09      	ldr	r4, [pc, #36]	; (7e08 <hid_keyboard_req+0xa0>)
    7de2:	47a0      	blx	r4
    7de4:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    7de6:	884a      	ldrh	r2, [r1, #2]
    7de8:	4b06      	ldr	r3, [pc, #24]	; (7e04 <hid_keyboard_req+0x9c>)
    7dea:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    7dec:	2300      	movs	r3, #0
    7dee:	461a      	mov	r2, r3
    7df0:	4619      	mov	r1, r3
    7df2:	4c05      	ldr	r4, [pc, #20]	; (7e08 <hid_keyboard_req+0xa0>)
    7df4:	47a0      	blx	r4
    7df6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7df8:	f06f 0009 	mvn.w	r0, #9
    7dfc:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7dfe:	f06f 0009 	mvn.w	r0, #9
    7e02:	bd10      	pop	{r4, pc}
    7e04:	20001144 	.word	0x20001144
    7e08:	0000860d 	.word	0x0000860d
    7e0c:	00009e70 	.word	0x00009e70
    7e10:	20001153 	.word	0x20001153

00007e14 <hid_keyboard_ctrl>:
{
    7e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e18:	4614      	mov	r4, r2
	switch (ctrl) {
    7e1a:	2901      	cmp	r1, #1
    7e1c:	d050      	beq.n	7ec0 <hid_keyboard_ctrl+0xac>
    7e1e:	b141      	cbz	r1, 7e32 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    7e20:	2902      	cmp	r1, #2
    7e22:	bf0c      	ite	eq
    7e24:	f06f 051a 	mvneq.w	r5, #26
    7e28:	f06f 050c 	mvnne.w	r5, #12
}
    7e2c:	4628      	mov	r0, r5
    7e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    7e32:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    7e36:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d05e      	beq.n	7efa <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    7e3c:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    7e3e:	795b      	ldrb	r3, [r3, #5]
    7e40:	2b03      	cmp	r3, #3
    7e42:	d15d      	bne.n	7f00 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    7e44:	f898 300c 	ldrb.w	r3, [r8, #12]
    7e48:	429a      	cmp	r2, r3
    7e4a:	d05c      	beq.n	7f06 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    7e4c:	2bff      	cmp	r3, #255	; 0xff
    7e4e:	d15d      	bne.n	7f0c <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    7e50:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    7e54:	6823      	ldr	r3, [r4, #0]
    7e56:	7818      	ldrb	r0, [r3, #0]
    7e58:	2221      	movs	r2, #33	; 0x21
    7e5a:	6861      	ldr	r1, [r4, #4]
    7e5c:	4418      	add	r0, r3
    7e5e:	4b31      	ldr	r3, [pc, #196]	; (7f24 <hid_keyboard_ctrl+0x110>)
    7e60:	4798      	blx	r3
    7e62:	4b31      	ldr	r3, [pc, #196]	; (7f28 <hid_keyboard_ctrl+0x114>)
    7e64:	6018      	str	r0, [r3, #0]
    7e66:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7e68:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 7f30 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7e6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 7f34 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    7e70:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 7f38 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7e74:	6823      	ldr	r3, [r4, #0]
    7e76:	7818      	ldrb	r0, [r3, #0]
    7e78:	6861      	ldr	r1, [r4, #4]
    7e7a:	4418      	add	r0, r3
    7e7c:	47c8      	blx	r9
		desc->sod = ep;
    7e7e:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    7e80:	2800      	cmp	r0, #0
    7e82:	d046      	beq.n	7f12 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    7e84:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    7e86:	7943      	ldrb	r3, [r0, #5]
    7e88:	7902      	ldrb	r2, [r0, #4]
    7e8a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7e8e:	b292      	uxth	r2, r2
    7e90:	78c1      	ldrb	r1, [r0, #3]
    7e92:	4638      	mov	r0, r7
    7e94:	47d0      	blx	sl
    7e96:	4605      	mov	r5, r0
    7e98:	2800      	cmp	r0, #0
    7e9a:	d13d      	bne.n	7f18 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7e9c:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    7ea0:	bf14      	ite	ne
    7ea2:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7ea6:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    7eaa:	4638      	mov	r0, r7
    7eac:	47d8      	blx	fp
    7eae:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    7eb0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    7eb4:	d1de      	bne.n	7e74 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    7eb6:	4b1c      	ldr	r3, [pc, #112]	; (7f28 <hid_keyboard_ctrl+0x114>)
    7eb8:	2201      	movs	r2, #1
    7eba:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    7ebc:	741a      	strb	r2, [r3, #16]
    7ebe:	e7b5      	b.n	7e2c <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    7ec0:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    7ec2:	b11a      	cbz	r2, 7ecc <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7ec4:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    7ec6:	795b      	ldrb	r3, [r3, #5]
    7ec8:	2b03      	cmp	r3, #3
    7eca:	d128      	bne.n	7f1e <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    7ecc:	7b2b      	ldrb	r3, [r5, #12]
    7ece:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    7ed0:	bf1c      	itt	ne
    7ed2:	23ff      	movne	r3, #255	; 0xff
    7ed4:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    7ed6:	7b68      	ldrb	r0, [r5, #13]
    7ed8:	28ff      	cmp	r0, #255	; 0xff
    7eda:	d003      	beq.n	7ee4 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    7edc:	4b13      	ldr	r3, [pc, #76]	; (7f2c <hid_keyboard_ctrl+0x118>)
    7ede:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    7ee0:	23ff      	movs	r3, #255	; 0xff
    7ee2:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    7ee4:	7ba8      	ldrb	r0, [r5, #14]
    7ee6:	28ff      	cmp	r0, #255	; 0xff
    7ee8:	d003      	beq.n	7ef2 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    7eea:	4b10      	ldr	r3, [pc, #64]	; (7f2c <hid_keyboard_ctrl+0x118>)
    7eec:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7eee:	23ff      	movs	r3, #255	; 0xff
    7ef0:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    7ef2:	2500      	movs	r5, #0
    7ef4:	4b0c      	ldr	r3, [pc, #48]	; (7f28 <hid_keyboard_ctrl+0x114>)
    7ef6:	741d      	strb	r5, [r3, #16]
    7ef8:	e798      	b.n	7e2c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    7efa:	f06f 0509 	mvn.w	r5, #9
    7efe:	e795      	b.n	7e2c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    7f00:	f06f 0509 	mvn.w	r5, #9
    7f04:	e792      	b.n	7e2c <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    7f06:	f06f 0511 	mvn.w	r5, #17
    7f0a:	e78f      	b.n	7e2c <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    7f0c:	f06f 051b 	mvn.w	r5, #27
    7f10:	e78c      	b.n	7e2c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    7f12:	f06f 0509 	mvn.w	r5, #9
    7f16:	e789      	b.n	7e2c <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    7f18:	f06f 0513 	mvn.w	r5, #19
    7f1c:	e786      	b.n	7e2c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    7f1e:	f06f 0509 	mvn.w	r5, #9
    7f22:	e783      	b.n	7e2c <hid_keyboard_ctrl+0x18>
    7f24:	00008b51 	.word	0x00008b51
    7f28:	20001144 	.word	0x20001144
    7f2c:	00001f99 	.word	0x00001f99
    7f30:	00008b8b 	.word	0x00008b8b
    7f34:	00001f31 	.word	0x00001f31
    7f38:	00001fc5 	.word	0x00001fc5

00007f3c <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    7f3c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    7f3e:	4b0a      	ldr	r3, [pc, #40]	; (7f68 <hiddf_keyboard_init+0x2c>)
    7f40:	4798      	blx	r3
    7f42:	2801      	cmp	r0, #1
    7f44:	d80c      	bhi.n	7f60 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    7f46:	4809      	ldr	r0, [pc, #36]	; (7f6c <hiddf_keyboard_init+0x30>)
    7f48:	4b09      	ldr	r3, [pc, #36]	; (7f70 <hiddf_keyboard_init+0x34>)
    7f4a:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    7f4c:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    7f4e:	3014      	adds	r0, #20
    7f50:	4b08      	ldr	r3, [pc, #32]	; (7f74 <hiddf_keyboard_init+0x38>)
    7f52:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    7f54:	4908      	ldr	r1, [pc, #32]	; (7f78 <hiddf_keyboard_init+0x3c>)
    7f56:	2001      	movs	r0, #1
    7f58:	4b08      	ldr	r3, [pc, #32]	; (7f7c <hiddf_keyboard_init+0x40>)
    7f5a:	4798      	blx	r3
	return ERR_NONE;
    7f5c:	2000      	movs	r0, #0
    7f5e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7f60:	f06f 0010 	mvn.w	r0, #16
}
    7f64:	bd08      	pop	{r3, pc}
    7f66:	bf00      	nop
    7f68:	00008b3d 	.word	0x00008b3d
    7f6c:	20001144 	.word	0x20001144
    7f70:	00007e15 	.word	0x00007e15
    7f74:	00008add 	.word	0x00008add
    7f78:	20000358 	.word	0x20000358
    7f7c:	00008a49 	.word	0x00008a49

00007f80 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    7f80:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    7f82:	4b26      	ldr	r3, [pc, #152]	; (801c <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    7f84:	7c1b      	ldrb	r3, [r3, #16]
    7f86:	2b00      	cmp	r3, #0
    7f88:	d045      	beq.n	8016 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    7f8a:	4a24      	ldr	r2, [pc, #144]	; (801c <hiddf_keyboard_keys_state_change+0x9c>)
    7f8c:	2300      	movs	r3, #0
    7f8e:	6053      	str	r3, [r2, #4]
    7f90:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    7f92:	b329      	cbz	r1, 7fe0 <hiddf_keyboard_keys_state_change+0x60>
    7f94:	4603      	mov	r3, r0
    7f96:	1e4d      	subs	r5, r1, #1
    7f98:	b2ed      	uxtb	r5, r5
    7f9a:	3501      	adds	r5, #1
    7f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7fa0:	4405      	add	r5, r0
    7fa2:	2200      	movs	r2, #0
    7fa4:	e002      	b.n	7fac <hiddf_keyboard_keys_state_change+0x2c>
    7fa6:	3303      	adds	r3, #3
    7fa8:	42ab      	cmp	r3, r5
    7faa:	d005      	beq.n	7fb8 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    7fac:	785c      	ldrb	r4, [r3, #1]
    7fae:	2c00      	cmp	r4, #0
    7fb0:	d0f9      	beq.n	7fa6 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    7fb2:	3201      	adds	r2, #1
    7fb4:	b2d2      	uxtb	r2, r2
    7fb6:	e7f6      	b.n	7fa6 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    7fb8:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    7fba:	b2d2      	uxtb	r2, r2
    7fbc:	2a06      	cmp	r2, #6
    7fbe:	d809      	bhi.n	7fd4 <hiddf_keyboard_keys_state_change+0x54>
    7fc0:	4603      	mov	r3, r0
    7fc2:	1e4a      	subs	r2, r1, #1
    7fc4:	b2d2      	uxtb	r2, r2
    7fc6:	3201      	adds	r2, #1
    7fc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7fcc:	4410      	add	r0, r2
    7fce:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    7fd0:	4d12      	ldr	r5, [pc, #72]	; (801c <hiddf_keyboard_keys_state_change+0x9c>)
    7fd2:	e015      	b.n	8000 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    7fd4:	4b11      	ldr	r3, [pc, #68]	; (801c <hiddf_keyboard_keys_state_change+0x9c>)
    7fd6:	f04f 32ff 	mov.w	r2, #4294967295
    7fda:	f8c3 2006 	str.w	r2, [r3, #6]
    7fde:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    7fe0:	480e      	ldr	r0, [pc, #56]	; (801c <hiddf_keyboard_keys_state_change+0x9c>)
    7fe2:	2300      	movs	r3, #0
    7fe4:	2208      	movs	r2, #8
    7fe6:	1d01      	adds	r1, r0, #4
    7fe8:	7b40      	ldrb	r0, [r0, #13]
    7fea:	4c0d      	ldr	r4, [pc, #52]	; (8020 <hiddf_keyboard_keys_state_change+0xa0>)
    7fec:	47a0      	blx	r4
    7fee:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    7ff0:	1c62      	adds	r2, r4, #1
    7ff2:	7819      	ldrb	r1, [r3, #0]
    7ff4:	442c      	add	r4, r5
    7ff6:	7121      	strb	r1, [r4, #4]
    7ff8:	b2d4      	uxtb	r4, r2
    7ffa:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    7ffc:	4283      	cmp	r3, r0
    7ffe:	d0ef      	beq.n	7fe0 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    8000:	789a      	ldrb	r2, [r3, #2]
    8002:	2a01      	cmp	r2, #1
    8004:	d1f9      	bne.n	7ffa <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    8006:	785a      	ldrb	r2, [r3, #1]
    8008:	2a00      	cmp	r2, #0
    800a:	d0f1      	beq.n	7ff0 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    800c:	792a      	ldrb	r2, [r5, #4]
    800e:	7819      	ldrb	r1, [r3, #0]
    8010:	430a      	orrs	r2, r1
    8012:	712a      	strb	r2, [r5, #4]
    8014:	e7f1      	b.n	7ffa <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    8016:	f06f 0010 	mvn.w	r0, #16
}
    801a:	bd38      	pop	{r3, r4, r5, pc}
    801c:	20001144 	.word	0x20001144
    8020:	0000860d 	.word	0x0000860d

00008024 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8024:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8026:	780b      	ldrb	r3, [r1, #0]
    8028:	2b81      	cmp	r3, #129	; 0x81
    802a:	d010      	beq.n	804e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    802c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8030:	2b01      	cmp	r3, #1
    8032:	d13f      	bne.n	80b4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    8034:	888a      	ldrh	r2, [r1, #4]
    8036:	4b22      	ldr	r3, [pc, #136]	; (80c0 <hid_mouse_req+0x9c>)
    8038:	7a1b      	ldrb	r3, [r3, #8]
    803a:	429a      	cmp	r2, r3
    803c:	d13d      	bne.n	80ba <hid_mouse_req+0x96>
			switch (req->bRequest) {
    803e:	784b      	ldrb	r3, [r1, #1]
    8040:	2b03      	cmp	r3, #3
    8042:	d028      	beq.n	8096 <hid_mouse_req+0x72>
    8044:	2b0b      	cmp	r3, #11
    8046:	d02c      	beq.n	80a2 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    8048:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    804c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    804e:	784b      	ldrb	r3, [r1, #1]
    8050:	2b06      	cmp	r3, #6
    8052:	d002      	beq.n	805a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    8054:	f06f 0009 	mvn.w	r0, #9
    8058:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    805a:	888a      	ldrh	r2, [r1, #4]
    805c:	4b18      	ldr	r3, [pc, #96]	; (80c0 <hid_mouse_req+0x9c>)
    805e:	7a1b      	ldrb	r3, [r3, #8]
    8060:	429a      	cmp	r2, r3
    8062:	d002      	beq.n	806a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    8064:	f06f 0009 	mvn.w	r0, #9
    8068:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    806a:	884b      	ldrh	r3, [r1, #2]
    806c:	0a1b      	lsrs	r3, r3, #8
    806e:	2b21      	cmp	r3, #33	; 0x21
    8070:	d004      	beq.n	807c <hid_mouse_req+0x58>
    8072:	2b22      	cmp	r3, #34	; 0x22
    8074:	d009      	beq.n	808a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    8076:	f06f 000c 	mvn.w	r0, #12
    807a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    807c:	4b10      	ldr	r3, [pc, #64]	; (80c0 <hid_mouse_req+0x9c>)
    807e:	6819      	ldr	r1, [r3, #0]
    8080:	2300      	movs	r3, #0
    8082:	780a      	ldrb	r2, [r1, #0]
    8084:	4c0f      	ldr	r4, [pc, #60]	; (80c4 <hid_mouse_req+0xa0>)
    8086:	47a0      	blx	r4
    8088:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    808a:	2300      	movs	r3, #0
    808c:	2234      	movs	r2, #52	; 0x34
    808e:	490e      	ldr	r1, [pc, #56]	; (80c8 <hid_mouse_req+0xa4>)
    8090:	4c0c      	ldr	r4, [pc, #48]	; (80c4 <hid_mouse_req+0xa0>)
    8092:	47a0      	blx	r4
    8094:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    8096:	2300      	movs	r3, #0
    8098:	2201      	movs	r2, #1
    809a:	490c      	ldr	r1, [pc, #48]	; (80cc <hid_mouse_req+0xa8>)
    809c:	4c09      	ldr	r4, [pc, #36]	; (80c4 <hid_mouse_req+0xa0>)
    809e:	47a0      	blx	r4
    80a0:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    80a2:	884a      	ldrh	r2, [r1, #2]
    80a4:	4b06      	ldr	r3, [pc, #24]	; (80c0 <hid_mouse_req+0x9c>)
    80a6:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    80a8:	2300      	movs	r3, #0
    80aa:	461a      	mov	r2, r3
    80ac:	4619      	mov	r1, r3
    80ae:	4c05      	ldr	r4, [pc, #20]	; (80c4 <hid_mouse_req+0xa0>)
    80b0:	47a0      	blx	r4
    80b2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    80b4:	f06f 0009 	mvn.w	r0, #9
    80b8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    80ba:	f06f 0009 	mvn.w	r0, #9
    80be:	bd10      	pop	{r4, pc}
    80c0:	20001164 	.word	0x20001164
    80c4:	0000860d 	.word	0x0000860d
    80c8:	00009eac 	.word	0x00009eac
    80cc:	2000116e 	.word	0x2000116e

000080d0 <hid_mouse_ctrl>:
{
    80d0:	b570      	push	{r4, r5, r6, lr}
    80d2:	4614      	mov	r4, r2
	switch (ctrl) {
    80d4:	2901      	cmp	r1, #1
    80d6:	d040      	beq.n	815a <hid_mouse_ctrl+0x8a>
    80d8:	b139      	cbz	r1, 80ea <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    80da:	2902      	cmp	r1, #2
    80dc:	bf0c      	ite	eq
    80de:	f06f 041a 	mvneq.w	r4, #26
    80e2:	f06f 040c 	mvnne.w	r4, #12
}
    80e6:	4620      	mov	r0, r4
    80e8:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    80ea:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    80ec:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    80ee:	2b00      	cmp	r3, #0
    80f0:	d049      	beq.n	8186 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    80f2:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    80f4:	795b      	ldrb	r3, [r3, #5]
    80f6:	2b03      	cmp	r3, #3
    80f8:	d148      	bne.n	818c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    80fa:	7a2b      	ldrb	r3, [r5, #8]
    80fc:	429a      	cmp	r2, r3
    80fe:	d048      	beq.n	8192 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    8100:	2bff      	cmp	r3, #255	; 0xff
    8102:	d149      	bne.n	8198 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    8104:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    8106:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    8108:	7818      	ldrb	r0, [r3, #0]
    810a:	2221      	movs	r2, #33	; 0x21
    810c:	6861      	ldr	r1, [r4, #4]
    810e:	4418      	add	r0, r3
    8110:	4b29      	ldr	r3, [pc, #164]	; (81b8 <hid_mouse_ctrl+0xe8>)
    8112:	4798      	blx	r3
    8114:	4b29      	ldr	r3, [pc, #164]	; (81bc <hid_mouse_ctrl+0xec>)
    8116:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8118:	6823      	ldr	r3, [r4, #0]
    811a:	7818      	ldrb	r0, [r3, #0]
    811c:	6861      	ldr	r1, [r4, #4]
    811e:	4418      	add	r0, r3
    8120:	4b27      	ldr	r3, [pc, #156]	; (81c0 <hid_mouse_ctrl+0xf0>)
    8122:	4798      	blx	r3
	desc->sod = ep;
    8124:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    8126:	2800      	cmp	r0, #0
    8128:	d039      	beq.n	819e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    812a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    812c:	7943      	ldrb	r3, [r0, #5]
    812e:	7902      	ldrb	r2, [r0, #4]
    8130:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8134:	b292      	uxth	r2, r2
    8136:	78c1      	ldrb	r1, [r0, #3]
    8138:	4630      	mov	r0, r6
    813a:	4b22      	ldr	r3, [pc, #136]	; (81c4 <hid_mouse_ctrl+0xf4>)
    813c:	4798      	blx	r3
    813e:	4604      	mov	r4, r0
    8140:	bb80      	cbnz	r0, 81a4 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8142:	f016 0f80 	tst.w	r6, #128	; 0x80
    8146:	d030      	beq.n	81aa <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    8148:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    814a:	4630      	mov	r0, r6
    814c:	4b1e      	ldr	r3, [pc, #120]	; (81c8 <hid_mouse_ctrl+0xf8>)
    814e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    8150:	4b1a      	ldr	r3, [pc, #104]	; (81bc <hid_mouse_ctrl+0xec>)
    8152:	2201      	movs	r2, #1
    8154:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    8156:	72da      	strb	r2, [r3, #11]
    8158:	e7c5      	b.n	80e6 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    815a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    815c:	b11a      	cbz	r2, 8166 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    815e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8160:	795b      	ldrb	r3, [r3, #5]
    8162:	2b03      	cmp	r3, #3
    8164:	d124      	bne.n	81b0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    8166:	7a2b      	ldrb	r3, [r5, #8]
    8168:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    816a:	bf1c      	itt	ne
    816c:	23ff      	movne	r3, #255	; 0xff
    816e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    8170:	7a68      	ldrb	r0, [r5, #9]
    8172:	28ff      	cmp	r0, #255	; 0xff
    8174:	d003      	beq.n	817e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    8176:	4b15      	ldr	r3, [pc, #84]	; (81cc <hid_mouse_ctrl+0xfc>)
    8178:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    817a:	23ff      	movs	r3, #255	; 0xff
    817c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    817e:	2400      	movs	r4, #0
    8180:	4b0e      	ldr	r3, [pc, #56]	; (81bc <hid_mouse_ctrl+0xec>)
    8182:	72dc      	strb	r4, [r3, #11]
    8184:	e7af      	b.n	80e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8186:	f06f 0409 	mvn.w	r4, #9
    818a:	e7ac      	b.n	80e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    818c:	f06f 0409 	mvn.w	r4, #9
    8190:	e7a9      	b.n	80e6 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    8192:	f06f 0411 	mvn.w	r4, #17
    8196:	e7a6      	b.n	80e6 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    8198:	f06f 041b 	mvn.w	r4, #27
    819c:	e7a3      	b.n	80e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    819e:	f06f 0409 	mvn.w	r4, #9
    81a2:	e7a0      	b.n	80e6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    81a4:	f06f 0413 	mvn.w	r4, #19
    81a8:	e79d      	b.n	80e6 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    81aa:	f04f 34ff 	mov.w	r4, #4294967295
    81ae:	e79a      	b.n	80e6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    81b0:	f06f 0409 	mvn.w	r4, #9
    81b4:	e797      	b.n	80e6 <hid_mouse_ctrl+0x16>
    81b6:	bf00      	nop
    81b8:	00008b51 	.word	0x00008b51
    81bc:	20001164 	.word	0x20001164
    81c0:	00008b8b 	.word	0x00008b8b
    81c4:	00001f31 	.word	0x00001f31
    81c8:	00001fc5 	.word	0x00001fc5
    81cc:	00001f99 	.word	0x00001f99

000081d0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    81d0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    81d2:	4b0a      	ldr	r3, [pc, #40]	; (81fc <hiddf_mouse_init+0x2c>)
    81d4:	4798      	blx	r3
    81d6:	2801      	cmp	r0, #1
    81d8:	d80c      	bhi.n	81f4 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    81da:	4809      	ldr	r0, [pc, #36]	; (8200 <hiddf_mouse_init+0x30>)
    81dc:	4b09      	ldr	r3, [pc, #36]	; (8204 <hiddf_mouse_init+0x34>)
    81de:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    81e0:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    81e2:	300c      	adds	r0, #12
    81e4:	4b08      	ldr	r3, [pc, #32]	; (8208 <hiddf_mouse_init+0x38>)
    81e6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    81e8:	4908      	ldr	r1, [pc, #32]	; (820c <hiddf_mouse_init+0x3c>)
    81ea:	2001      	movs	r0, #1
    81ec:	4b08      	ldr	r3, [pc, #32]	; (8210 <hiddf_mouse_init+0x40>)
    81ee:	4798      	blx	r3
	return ERR_NONE;
    81f0:	2000      	movs	r0, #0
    81f2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    81f4:	f06f 0010 	mvn.w	r0, #16
}
    81f8:	bd08      	pop	{r3, pc}
    81fa:	bf00      	nop
    81fc:	00008b3d 	.word	0x00008b3d
    8200:	20001164 	.word	0x20001164
    8204:	000080d1 	.word	0x000080d1
    8208:	00008add 	.word	0x00008add
    820c:	20000360 	.word	0x20000360
    8210:	00008a49 	.word	0x00008a49

00008214 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    8214:	2200      	movs	r2, #0
    8216:	4b0d      	ldr	r3, [pc, #52]	; (824c <hiddf_mouse_move+0x38>)
    8218:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    821a:	2901      	cmp	r1, #1
    821c:	d00e      	beq.n	823c <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    821e:	2902      	cmp	r1, #2
    8220:	d00e      	beq.n	8240 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    8222:	2903      	cmp	r1, #3
    8224:	d10f      	bne.n	8246 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    8226:	4b09      	ldr	r3, [pc, #36]	; (824c <hiddf_mouse_move+0x38>)
    8228:	71d8      	strb	r0, [r3, #7]
{
    822a:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    822c:	4807      	ldr	r0, [pc, #28]	; (824c <hiddf_mouse_move+0x38>)
    822e:	2300      	movs	r3, #0
    8230:	2204      	movs	r2, #4
    8232:	1881      	adds	r1, r0, r2
    8234:	7a40      	ldrb	r0, [r0, #9]
    8236:	4c06      	ldr	r4, [pc, #24]	; (8250 <hiddf_mouse_move+0x3c>)
    8238:	47a0      	blx	r4
    823a:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    823c:	7158      	strb	r0, [r3, #5]
    823e:	e7f4      	b.n	822a <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    8240:	4b02      	ldr	r3, [pc, #8]	; (824c <hiddf_mouse_move+0x38>)
    8242:	7198      	strb	r0, [r3, #6]
    8244:	e7f1      	b.n	822a <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    8246:	f06f 000c 	mvn.w	r0, #12
    824a:	4770      	bx	lr
    824c:	20001164 	.word	0x20001164
    8250:	0000860d 	.word	0x0000860d

00008254 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8254:	b510      	push	{r4, lr}
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8256:	780b      	ldrb	r3, [r1, #0]
    8258:	2b81      	cmp	r3, #129	; 0x81
    825a:	d014      	beq.n	8286 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    825c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8260:	2b01      	cmp	r3, #1
    8262:	d132      	bne.n	82ca <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    8264:	888b      	ldrh	r3, [r1, #4]
    8266:	4a1c      	ldr	r2, [pc, #112]	; (82d8 <audio_midi_req+0x84>)
    8268:	7912      	ldrb	r2, [r2, #4]
    826a:	429a      	cmp	r2, r3
    826c:	d003      	beq.n	8276 <audio_midi_req+0x22>
    826e:	4a1a      	ldr	r2, [pc, #104]	; (82d8 <audio_midi_req+0x84>)
    8270:	7952      	ldrb	r2, [r2, #5]
    8272:	429a      	cmp	r2, r3
    8274:	d12c      	bne.n	82d0 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    8276:	784b      	ldrb	r3, [r1, #1]
    8278:	2b03      	cmp	r3, #3
    827a:	d017      	beq.n	82ac <audio_midi_req+0x58>
    827c:	2b0b      	cmp	r3, #11
    827e:	d01b      	beq.n	82b8 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    8280:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8284:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8286:	888b      	ldrh	r3, [r1, #4]
    8288:	4a13      	ldr	r2, [pc, #76]	; (82d8 <audio_midi_req+0x84>)
    828a:	7912      	ldrb	r2, [r2, #4]
    828c:	429a      	cmp	r2, r3
    828e:	d006      	beq.n	829e <audio_midi_req+0x4a>
    8290:	4a11      	ldr	r2, [pc, #68]	; (82d8 <audio_midi_req+0x84>)
    8292:	7952      	ldrb	r2, [r2, #5]
    8294:	429a      	cmp	r2, r3
    8296:	d002      	beq.n	829e <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8298:	f06f 0009 	mvn.w	r0, #9
    829c:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    829e:	4b0e      	ldr	r3, [pc, #56]	; (82d8 <audio_midi_req+0x84>)
    82a0:	6819      	ldr	r1, [r3, #0]
    82a2:	2300      	movs	r3, #0
    82a4:	780a      	ldrb	r2, [r1, #0]
    82a6:	4c0d      	ldr	r4, [pc, #52]	; (82dc <audio_midi_req+0x88>)
    82a8:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    82aa:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    82ac:	2300      	movs	r3, #0
    82ae:	2201      	movs	r2, #1
    82b0:	490b      	ldr	r1, [pc, #44]	; (82e0 <audio_midi_req+0x8c>)
    82b2:	4c0a      	ldr	r4, [pc, #40]	; (82dc <audio_midi_req+0x88>)
    82b4:	47a0      	blx	r4
    82b6:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    82b8:	884a      	ldrh	r2, [r1, #2]
    82ba:	4b07      	ldr	r3, [pc, #28]	; (82d8 <audio_midi_req+0x84>)
    82bc:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    82be:	2300      	movs	r3, #0
    82c0:	461a      	mov	r2, r3
    82c2:	4619      	mov	r1, r3
    82c4:	4c05      	ldr	r4, [pc, #20]	; (82dc <audio_midi_req+0x88>)
    82c6:	47a0      	blx	r4
    82c8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    82ca:	f06f 0009 	mvn.w	r0, #9
    82ce:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    82d0:	f06f 0009 	mvn.w	r0, #9
    82d4:	bd10      	pop	{r4, pc}
    82d6:	bf00      	nop
    82d8:	2000117c 	.word	0x2000117c
    82dc:	0000860d 	.word	0x0000860d
    82e0:	20001184 	.word	0x20001184

000082e4 <audio_midi_ctrl>:
{
    82e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82e8:	b083      	sub	sp, #12
    82ea:	4616      	mov	r6, r2
	switch (ctrl) {
    82ec:	2901      	cmp	r1, #1
    82ee:	d069      	beq.n	83c4 <audio_midi_ctrl+0xe0>
    82f0:	b141      	cbz	r1, 8304 <audio_midi_ctrl+0x20>
		return ERR_INVALID_ARG;
    82f2:	2902      	cmp	r1, #2
    82f4:	bf0c      	ite	eq
    82f6:	f06f 001a 	mvneq.w	r0, #26
    82fa:	f06f 000c 	mvnne.w	r0, #12
}
    82fe:	b003      	add	sp, #12
    8300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    8304:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    8306:	6814      	ldr	r4, [r2, #0]
		if (NULL == ifc) {
    8308:	2c00      	cmp	r4, #0
    830a:	d078      	beq.n	83fe <audio_midi_ctrl+0x11a>
    830c:	f107 0b04 	add.w	fp, r7, #4
    8310:	1dbb      	adds	r3, r7, #6
    8312:	9301      	str	r3, [sp, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    8314:	f8df a110 	ldr.w	sl, [pc, #272]	; 8428 <audio_midi_ctrl+0x144>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8318:	f8df 9110 	ldr.w	r9, [pc, #272]	; 842c <audio_midi_ctrl+0x148>
    831c:	46b8      	mov	r8, r7
		ifc_desc.bInterfaceNumber = ifc[2];
    831e:	78a2      	ldrb	r2, [r4, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    8320:	7963      	ldrb	r3, [r4, #5]
    8322:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8326:	2b01      	cmp	r3, #1
    8328:	d002      	beq.n	8330 <audio_midi_ctrl+0x4c>
			return ERR_NOT_FOUND;
    832a:	f06f 0009 	mvn.w	r0, #9
    832e:	e7e6      	b.n	82fe <audio_midi_ctrl+0x1a>
			if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    8330:	f108 0304 	add.w	r3, r8, #4
    8334:	4293      	cmp	r3, r2
    8336:	d065      	beq.n	8404 <audio_midi_ctrl+0x120>
			} else if (func_data->func_iface != 0xFF) { // Occupied
    8338:	2bff      	cmp	r3, #255	; 0xff
    833a:	d166      	bne.n	840a <audio_midi_ctrl+0x126>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    833c:	f80b 2b01 	strb.w	r2, [fp], #1
		_audiodf_midi_funcd.audio_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_AUDIO);
    8340:	6833      	ldr	r3, [r6, #0]
	return (desc + usb_desc_len(desc));
    8342:	7818      	ldrb	r0, [r3, #0]
    8344:	2224      	movs	r2, #36	; 0x24
    8346:	6871      	ldr	r1, [r6, #4]
    8348:	4418      	add	r0, r3
    834a:	4b33      	ldr	r3, [pc, #204]	; (8418 <audio_midi_ctrl+0x134>)
    834c:	4798      	blx	r3
    834e:	4b33      	ldr	r3, [pc, #204]	; (841c <audio_midi_ctrl+0x138>)
    8350:	6018      	str	r0, [r3, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    8352:	2205      	movs	r2, #5
    8354:	6871      	ldr	r1, [r6, #4]
    8356:	4620      	mov	r0, r4
    8358:	4b2f      	ldr	r3, [pc, #188]	; (8418 <audio_midi_ctrl+0x134>)
    835a:	4798      	blx	r3
		while (NULL != ep) {
    835c:	4604      	mov	r4, r0
    835e:	b1e0      	cbz	r0, 839a <audio_midi_ctrl+0xb6>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {			
    8360:	4f2f      	ldr	r7, [pc, #188]	; (8420 <audio_midi_ctrl+0x13c>)
			ep_desc.bEndpointAddress = ep[2];
    8362:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    8364:	7963      	ldrb	r3, [r4, #5]
    8366:	7922      	ldrb	r2, [r4, #4]
    8368:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {			
    836c:	b292      	uxth	r2, r2
    836e:	78e1      	ldrb	r1, [r4, #3]
    8370:	4628      	mov	r0, r5
    8372:	47b8      	blx	r7
    8374:	2800      	cmp	r0, #0
    8376:	d14b      	bne.n	8410 <audio_midi_ctrl+0x12c>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8378:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    837c:	bf14      	ite	ne
    837e:	f888 5006 	strbne.w	r5, [r8, #6]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    8382:	f888 5007 	strbeq.w	r5, [r8, #7]
				usb_d_ep_enable(func_data->func_ep_out);
    8386:	4628      	mov	r0, r5
    8388:	47d0      	blx	sl
			desc->sod = ep;
    838a:	6034      	str	r4, [r6, #0]
	return (desc + usb_desc_len(desc));
    838c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    838e:	6871      	ldr	r1, [r6, #4]
    8390:	4420      	add	r0, r4
    8392:	47c8      	blx	r9
		while (NULL != ep) {
    8394:	4604      	mov	r4, r0
    8396:	2800      	cmp	r0, #0
    8398:	d1e3      	bne.n	8362 <audio_midi_ctrl+0x7e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    839a:	6833      	ldr	r3, [r6, #0]
    839c:	7818      	ldrb	r0, [r3, #0]
    839e:	2204      	movs	r2, #4
    83a0:	6871      	ldr	r1, [r6, #4]
    83a2:	4418      	add	r0, r3
    83a4:	4b1c      	ldr	r3, [pc, #112]	; (8418 <audio_midi_ctrl+0x134>)
    83a6:	4798      	blx	r3
    83a8:	4604      	mov	r4, r0
	for (i=0; i<2; i++){
    83aa:	9b01      	ldr	r3, [sp, #4]
    83ac:	455b      	cmp	r3, fp
    83ae:	d004      	beq.n	83ba <audio_midi_ctrl+0xd6>
		if (NULL == ifc) {
    83b0:	2c00      	cmp	r4, #0
    83b2:	d1b4      	bne.n	831e <audio_midi_ctrl+0x3a>
			return ERR_NOT_FOUND;
    83b4:	f06f 0009 	mvn.w	r0, #9
    83b8:	e7a1      	b.n	82fe <audio_midi_ctrl+0x1a>
	_audiodf_midi_funcd.enabled = true;
    83ba:	2201      	movs	r2, #1
    83bc:	4b17      	ldr	r3, [pc, #92]	; (841c <audio_midi_ctrl+0x138>)
    83be:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    83c0:	2000      	movs	r0, #0
    83c2:	e79c      	b.n	82fe <audio_midi_ctrl+0x1a>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    83c4:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    83c6:	b142      	cbz	r2, 83da <audio_midi_ctrl+0xf6>
		ifc_desc.bInterfaceClass = desc->sod[5];
    83c8:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    83ca:	795b      	ldrb	r3, [r3, #5]
    83cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    83d0:	2b01      	cmp	r3, #1
    83d2:	d002      	beq.n	83da <audio_midi_ctrl+0xf6>
			return ERR_NOT_FOUND;
    83d4:	f06f 0009 	mvn.w	r0, #9
    83d8:	e791      	b.n	82fe <audio_midi_ctrl+0x1a>
	if (func_data->func_ep_in != 0xFF) {
    83da:	79a0      	ldrb	r0, [r4, #6]
    83dc:	28ff      	cmp	r0, #255	; 0xff
    83de:	d003      	beq.n	83e8 <audio_midi_ctrl+0x104>
		usb_d_ep_deinit(func_data->func_ep_in);
    83e0:	4b10      	ldr	r3, [pc, #64]	; (8424 <audio_midi_ctrl+0x140>)
    83e2:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    83e4:	23ff      	movs	r3, #255	; 0xff
    83e6:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    83e8:	79e0      	ldrb	r0, [r4, #7]
    83ea:	28ff      	cmp	r0, #255	; 0xff
    83ec:	d003      	beq.n	83f6 <audio_midi_ctrl+0x112>
		usb_d_ep_deinit(func_data->func_ep_out);
    83ee:	4b0d      	ldr	r3, [pc, #52]	; (8424 <audio_midi_ctrl+0x140>)
    83f0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    83f2:	23ff      	movs	r3, #255	; 0xff
    83f4:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    83f6:	2000      	movs	r0, #0
    83f8:	4b08      	ldr	r3, [pc, #32]	; (841c <audio_midi_ctrl+0x138>)
    83fa:	7358      	strb	r0, [r3, #13]
    83fc:	e77f      	b.n	82fe <audio_midi_ctrl+0x1a>
			return ERR_NOT_FOUND;
    83fe:	f06f 0009 	mvn.w	r0, #9
    8402:	e77c      	b.n	82fe <audio_midi_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    8404:	f06f 0011 	mvn.w	r0, #17
    8408:	e779      	b.n	82fe <audio_midi_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    840a:	f06f 001b 	mvn.w	r0, #27
    840e:	e776      	b.n	82fe <audio_midi_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    8410:	f06f 0013 	mvn.w	r0, #19
    8414:	e773      	b.n	82fe <audio_midi_ctrl+0x1a>
    8416:	bf00      	nop
    8418:	00008b51 	.word	0x00008b51
    841c:	2000117c 	.word	0x2000117c
    8420:	00001f31 	.word	0x00001f31
    8424:	00001f99 	.word	0x00001f99
    8428:	00001fc5 	.word	0x00001fc5
    842c:	00008b8b 	.word	0x00008b8b

00008430 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    8430:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    8432:	4b0a      	ldr	r3, [pc, #40]	; (845c <audiodf_midi_init+0x2c>)
    8434:	4798      	blx	r3
    8436:	2801      	cmp	r0, #1
    8438:	d80c      	bhi.n	8454 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    843a:	4809      	ldr	r0, [pc, #36]	; (8460 <audiodf_midi_init+0x30>)
    843c:	4b09      	ldr	r3, [pc, #36]	; (8464 <audiodf_midi_init+0x34>)
    843e:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    8440:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    8442:	3010      	adds	r0, #16
    8444:	4b08      	ldr	r3, [pc, #32]	; (8468 <audiodf_midi_init+0x38>)
    8446:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    8448:	4908      	ldr	r1, [pc, #32]	; (846c <audiodf_midi_init+0x3c>)
    844a:	2001      	movs	r0, #1
    844c:	4b08      	ldr	r3, [pc, #32]	; (8470 <audiodf_midi_init+0x40>)
    844e:	4798      	blx	r3
	return ERR_NONE;
    8450:	2000      	movs	r0, #0
    8452:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8454:	f06f 0010 	mvn.w	r0, #16
}
    8458:	bd08      	pop	{r3, pc}
    845a:	bf00      	nop
    845c:	00008b3d 	.word	0x00008b3d
    8460:	2000117c 	.word	0x2000117c
    8464:	000082e5 	.word	0x000082e5
    8468:	00008add 	.word	0x00008add
    846c:	20000368 	.word	0x20000368
    8470:	00008a49 	.word	0x00008a49

00008474 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    8474:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    8476:	4b07      	ldr	r3, [pc, #28]	; (8494 <usbdc_unconfig+0x20>)
    8478:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    847a:	b14c      	cbz	r4, 8490 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    847c:	2600      	movs	r6, #0
    847e:	2501      	movs	r5, #1
    8480:	6863      	ldr	r3, [r4, #4]
    8482:	4632      	mov	r2, r6
    8484:	4629      	mov	r1, r5
    8486:	4620      	mov	r0, r4
    8488:	4798      	blx	r3
		func = func->next;
    848a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    848c:	2c00      	cmp	r4, #0
    848e:	d1f7      	bne.n	8480 <usbdc_unconfig+0xc>
    8490:	bd70      	pop	{r4, r5, r6, pc}
    8492:	bf00      	nop
    8494:	20001198 	.word	0x20001198

00008498 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    8498:	b570      	push	{r4, r5, r6, lr}
    849a:	4606      	mov	r6, r0
    849c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    849e:	4b07      	ldr	r3, [pc, #28]	; (84bc <usbdc_change_notify+0x24>)
    84a0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    84a2:	b91c      	cbnz	r4, 84ac <usbdc_change_notify+0x14>
    84a4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    84a6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    84a8:	2c00      	cmp	r4, #0
    84aa:	d0fb      	beq.n	84a4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    84ac:	6863      	ldr	r3, [r4, #4]
    84ae:	2b00      	cmp	r3, #0
    84b0:	d0f9      	beq.n	84a6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    84b2:	4629      	mov	r1, r5
    84b4:	4630      	mov	r0, r6
    84b6:	4798      	blx	r3
    84b8:	e7f5      	b.n	84a6 <usbdc_change_notify+0xe>
    84ba:	bf00      	nop
    84bc:	20001198 	.word	0x20001198

000084c0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    84c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84c2:	4607      	mov	r7, r0
    84c4:	460e      	mov	r6, r1
    84c6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    84c8:	4b0c      	ldr	r3, [pc, #48]	; (84fc <usbdc_request_handler+0x3c>)
    84ca:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    84cc:	b91c      	cbnz	r4, 84d6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    84ce:	2000      	movs	r0, #0
    84d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    84d2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    84d4:	b16c      	cbz	r4, 84f2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    84d6:	6863      	ldr	r3, [r4, #4]
    84d8:	2b00      	cmp	r3, #0
    84da:	d0fa      	beq.n	84d2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    84dc:	462a      	mov	r2, r5
    84de:	4631      	mov	r1, r6
    84e0:	4638      	mov	r0, r7
    84e2:	4798      	blx	r3
			if (0 == rc) {
    84e4:	b138      	cbz	r0, 84f6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    84e6:	f110 0f0a 	cmn.w	r0, #10
    84ea:	d0f2      	beq.n	84d2 <usbdc_request_handler+0x12>
				return -1;
    84ec:	f04f 30ff 	mov.w	r0, #4294967295
}
    84f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    84f2:	2000      	movs	r0, #0
    84f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    84f6:	2001      	movs	r0, #1
    84f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84fa:	bf00      	nop
    84fc:	20001198 	.word	0x20001198

00008500 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    8500:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    8502:	4b06      	ldr	r3, [pc, #24]	; (851c <usbd_sof_cb+0x1c>)
    8504:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    8506:	b91c      	cbnz	r4, 8510 <usbd_sof_cb+0x10>
    8508:	bd10      	pop	{r4, pc}
		sof = sof->next;
    850a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    850c:	2c00      	cmp	r4, #0
    850e:	d0fb      	beq.n	8508 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    8510:	6863      	ldr	r3, [r4, #4]
    8512:	2b00      	cmp	r3, #0
    8514:	d0f9      	beq.n	850a <usbd_sof_cb+0xa>
			sof->cb();
    8516:	4798      	blx	r3
    8518:	e7f7      	b.n	850a <usbd_sof_cb+0xa>
    851a:	bf00      	nop
    851c:	20001198 	.word	0x20001198

00008520 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    8520:	b510      	push	{r4, lr}
    8522:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    8524:	b119      	cbz	r1, 852e <usbdc_cb_ctl_done+0xe>
    8526:	2901      	cmp	r1, #1
    8528:	d026      	beq.n	8578 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    852a:	2000      	movs	r0, #0
    852c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    852e:	7813      	ldrb	r3, [r2, #0]
    8530:	2b00      	cmp	r3, #0
    8532:	d1fa      	bne.n	852a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    8534:	7853      	ldrb	r3, [r2, #1]
    8536:	2b05      	cmp	r3, #5
    8538:	d00f      	beq.n	855a <usbdc_cb_ctl_done+0x3a>
    853a:	2b09      	cmp	r3, #9
    853c:	d1f5      	bne.n	852a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    853e:	8852      	ldrh	r2, [r2, #2]
    8540:	4b10      	ldr	r3, [pc, #64]	; (8584 <usbdc_cb_ctl_done+0x64>)
    8542:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    8544:	8863      	ldrh	r3, [r4, #2]
    8546:	2b00      	cmp	r3, #0
    8548:	bf14      	ite	ne
    854a:	2104      	movne	r1, #4
    854c:	2103      	moveq	r1, #3
    854e:	4b0d      	ldr	r3, [pc, #52]	; (8584 <usbdc_cb_ctl_done+0x64>)
    8550:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8552:	2001      	movs	r0, #1
    8554:	4b0c      	ldr	r3, [pc, #48]	; (8588 <usbdc_cb_ctl_done+0x68>)
    8556:	4798      	blx	r3
    8558:	e7e7      	b.n	852a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    855a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    855c:	b2c0      	uxtb	r0, r0
    855e:	4b0b      	ldr	r3, [pc, #44]	; (858c <usbdc_cb_ctl_done+0x6c>)
    8560:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    8562:	8863      	ldrh	r3, [r4, #2]
    8564:	2b00      	cmp	r3, #0
    8566:	bf14      	ite	ne
    8568:	2103      	movne	r1, #3
    856a:	2102      	moveq	r1, #2
    856c:	4b05      	ldr	r3, [pc, #20]	; (8584 <usbdc_cb_ctl_done+0x64>)
    856e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8570:	2001      	movs	r0, #1
    8572:	4b05      	ldr	r3, [pc, #20]	; (8588 <usbdc_cb_ctl_done+0x68>)
    8574:	4798      	blx	r3
    8576:	e7d8      	b.n	852a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    8578:	2201      	movs	r2, #1
    857a:	4621      	mov	r1, r4
    857c:	2000      	movs	r0, #0
    857e:	4b04      	ldr	r3, [pc, #16]	; (8590 <usbdc_cb_ctl_done+0x70>)
    8580:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    8582:	e7d2      	b.n	852a <usbdc_cb_ctl_done+0xa>
    8584:	20001198 	.word	0x20001198
    8588:	00008499 	.word	0x00008499
    858c:	00001f25 	.word	0x00001f25
    8590:	000084c1 	.word	0x000084c1

00008594 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    8594:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    8596:	4b0d      	ldr	r3, [pc, #52]	; (85cc <usbdc_reset+0x38>)
    8598:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    859a:	4d0d      	ldr	r5, [pc, #52]	; (85d0 <usbdc_reset+0x3c>)
    859c:	2602      	movs	r6, #2
    859e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    85a0:	2400      	movs	r4, #0
    85a2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    85a4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    85a6:	4620      	mov	r0, r4
    85a8:	4b0a      	ldr	r3, [pc, #40]	; (85d4 <usbdc_reset+0x40>)
    85aa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    85ac:	7f28      	ldrb	r0, [r5, #28]
    85ae:	4b0a      	ldr	r3, [pc, #40]	; (85d8 <usbdc_reset+0x44>)
    85b0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    85b2:	4a0a      	ldr	r2, [pc, #40]	; (85dc <usbdc_reset+0x48>)
    85b4:	4621      	mov	r1, r4
    85b6:	4620      	mov	r0, r4
    85b8:	4d09      	ldr	r5, [pc, #36]	; (85e0 <usbdc_reset+0x4c>)
    85ba:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    85bc:	4a09      	ldr	r2, [pc, #36]	; (85e4 <usbdc_reset+0x50>)
    85be:	4631      	mov	r1, r6
    85c0:	4620      	mov	r0, r4
    85c2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    85c4:	4620      	mov	r0, r4
    85c6:	4b08      	ldr	r3, [pc, #32]	; (85e8 <usbdc_reset+0x54>)
    85c8:	4798      	blx	r3
    85ca:	bd70      	pop	{r4, r5, r6, pc}
    85cc:	00008475 	.word	0x00008475
    85d0:	20001198 	.word	0x20001198
    85d4:	00001f99 	.word	0x00001f99
    85d8:	00001f85 	.word	0x00001f85
    85dc:	0000862d 	.word	0x0000862d
    85e0:	00002199 	.word	0x00002199
    85e4:	00008521 	.word	0x00008521
    85e8:	00001fc5 	.word	0x00001fc5

000085ec <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    85ec:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    85ee:	b110      	cbz	r0, 85f6 <usbd_event_cb+0xa>
    85f0:	2801      	cmp	r0, #1
    85f2:	d004      	beq.n	85fe <usbd_event_cb+0x12>
    85f4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    85f6:	2000      	movs	r0, #0
    85f8:	4b02      	ldr	r3, [pc, #8]	; (8604 <usbd_event_cb+0x18>)
    85fa:	4798      	blx	r3
		break;
    85fc:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    85fe:	4b02      	ldr	r3, [pc, #8]	; (8608 <usbd_event_cb+0x1c>)
    8600:	4798      	blx	r3
    8602:	bd08      	pop	{r3, pc}
    8604:	00008499 	.word	0x00008499
    8608:	00008595 	.word	0x00008595

0000860c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    860c:	b500      	push	{lr}
    860e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    8610:	9101      	str	r1, [sp, #4]
    8612:	9202      	str	r2, [sp, #8]
    8614:	f88d 000c 	strb.w	r0, [sp, #12]
    8618:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    861c:	a801      	add	r0, sp, #4
    861e:	4b02      	ldr	r3, [pc, #8]	; (8628 <usbdc_xfer+0x1c>)
    8620:	4798      	blx	r3
}
    8622:	b005      	add	sp, #20
    8624:	f85d fb04 	ldr.w	pc, [sp], #4
    8628:	00002011 	.word	0x00002011

0000862c <usbdc_cb_ctl_req>:
{
    862c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8630:	b083      	sub	sp, #12
    8632:	4605      	mov	r5, r0
    8634:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    8636:	2200      	movs	r2, #0
    8638:	4b9b      	ldr	r3, [pc, #620]	; (88a8 <usbdc_cb_ctl_req+0x27c>)
    863a:	4798      	blx	r3
    863c:	f1b0 3fff 	cmp.w	r0, #4294967295
    8640:	d00b      	beq.n	865a <usbdc_cb_ctl_req+0x2e>
    8642:	2801      	cmp	r0, #1
    8644:	f000 81e3 	beq.w	8a0e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8648:	7823      	ldrb	r3, [r4, #0]
    864a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    864e:	d008      	beq.n	8662 <usbdc_cb_ctl_req+0x36>
    8650:	2a80      	cmp	r2, #128	; 0x80
    8652:	f000 80f4 	beq.w	883e <usbdc_cb_ctl_req+0x212>
		return false;
    8656:	2000      	movs	r0, #0
    8658:	e000      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    865a:	2000      	movs	r0, #0
}
    865c:	b003      	add	sp, #12
    865e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    8662:	7862      	ldrb	r2, [r4, #1]
    8664:	3a01      	subs	r2, #1
    8666:	2a0a      	cmp	r2, #10
    8668:	f200 81d3 	bhi.w	8a12 <usbdc_cb_ctl_req+0x3e6>
    866c:	e8df f012 	tbh	[pc, r2, lsl #1]
    8670:	01d10060 	.word	0x01d10060
    8674:	01d10076 	.word	0x01d10076
    8678:	01d1000b 	.word	0x01d1000b
    867c:	01d101d1 	.word	0x01d101d1
    8680:	01d10015 	.word	0x01d10015
    8684:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    8686:	2301      	movs	r3, #1
    8688:	2200      	movs	r2, #0
    868a:	4611      	mov	r1, r2
    868c:	4628      	mov	r0, r5
    868e:	4c87      	ldr	r4, [pc, #540]	; (88ac <usbdc_cb_ctl_req+0x280>)
    8690:	47a0      	blx	r4
    8692:	fab0 f080 	clz	r0, r0
    8696:	0940      	lsrs	r0, r0, #5
    8698:	e7e0      	b.n	865c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    869a:	8862      	ldrh	r2, [r4, #2]
    869c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    869e:	b1ca      	cbz	r2, 86d4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    86a0:	4b83      	ldr	r3, [pc, #524]	; (88b0 <usbdc_cb_ctl_req+0x284>)
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	6859      	ldr	r1, [r3, #4]
    86a6:	6818      	ldr	r0, [r3, #0]
    86a8:	4b82      	ldr	r3, [pc, #520]	; (88b4 <usbdc_cb_ctl_req+0x288>)
    86aa:	4798      	blx	r3
	if (NULL == cfg_desc) {
    86ac:	2800      	cmp	r0, #0
    86ae:	f000 81be 	beq.w	8a2e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    86b2:	78c2      	ldrb	r2, [r0, #3]
    86b4:	7881      	ldrb	r1, [r0, #2]
    86b6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    86ba:	fa10 f181 	uxtah	r1, r0, r1
    86be:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    86c0:	2204      	movs	r2, #4
    86c2:	4b7d      	ldr	r3, [pc, #500]	; (88b8 <usbdc_cb_ctl_req+0x28c>)
    86c4:	4798      	blx	r3
    86c6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    86c8:	b130      	cbz	r0, 86d8 <usbdc_cb_ctl_req+0xac>
    86ca:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    86cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 88b0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    86d0:	4f79      	ldr	r7, [pc, #484]	; (88b8 <usbdc_cb_ctl_req+0x28c>)
    86d2:	e018      	b.n	8706 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    86d4:	4b79      	ldr	r3, [pc, #484]	; (88bc <usbdc_cb_ctl_req+0x290>)
    86d6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    86d8:	2301      	movs	r3, #1
    86da:	2200      	movs	r2, #0
    86dc:	4611      	mov	r1, r2
    86de:	4628      	mov	r0, r5
    86e0:	4c72      	ldr	r4, [pc, #456]	; (88ac <usbdc_cb_ctl_req+0x280>)
    86e2:	47a0      	blx	r4
    86e4:	fab0 f080 	clz	r0, r0
    86e8:	0940      	lsrs	r0, r0, #5
    86ea:	e7b7      	b.n	865c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    86ec:	464c      	mov	r4, r9
    86ee:	e000      	b.n	86f2 <usbdc_cb_ctl_req+0xc6>
    86f0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    86f2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    86f4:	7803      	ldrb	r3, [r0, #0]
    86f6:	4418      	add	r0, r3
    86f8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    86fa:	2204      	movs	r2, #4
    86fc:	9901      	ldr	r1, [sp, #4]
    86fe:	47b8      	blx	r7
    8700:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    8702:	2800      	cmp	r0, #0
    8704:	d0e8      	beq.n	86d8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    8706:	f890 9002 	ldrb.w	r9, [r0, #2]
    870a:	45a1      	cmp	r9, r4
    870c:	d0f1      	beq.n	86f2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    870e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    8712:	2c00      	cmp	r4, #0
    8714:	d0ea      	beq.n	86ec <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    8716:	2600      	movs	r6, #0
    8718:	6863      	ldr	r3, [r4, #4]
    871a:	466a      	mov	r2, sp
    871c:	4631      	mov	r1, r6
    871e:	4620      	mov	r0, r4
    8720:	4798      	blx	r3
    8722:	2800      	cmp	r0, #0
    8724:	d0e4      	beq.n	86f0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    8726:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    8728:	2c00      	cmp	r4, #0
    872a:	d1f5      	bne.n	8718 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    872c:	464c      	mov	r4, r9
    872e:	e7e0      	b.n	86f2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    8730:	f003 031f 	and.w	r3, r3, #31
    8734:	2b02      	cmp	r3, #2
    8736:	f040 816e 	bne.w	8a16 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    873a:	88e3      	ldrh	r3, [r4, #6]
    873c:	b10b      	cbz	r3, 8742 <usbdc_cb_ctl_req+0x116>
			return false;
    873e:	2000      	movs	r0, #0
    8740:	e78c      	b.n	865c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    8742:	88a0      	ldrh	r0, [r4, #4]
    8744:	2100      	movs	r1, #0
    8746:	b2c0      	uxtb	r0, r0
    8748:	4b5d      	ldr	r3, [pc, #372]	; (88c0 <usbdc_cb_ctl_req+0x294>)
    874a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    874c:	2301      	movs	r3, #1
    874e:	2200      	movs	r2, #0
    8750:	4611      	mov	r1, r2
    8752:	4628      	mov	r0, r5
    8754:	4c55      	ldr	r4, [pc, #340]	; (88ac <usbdc_cb_ctl_req+0x280>)
    8756:	47a0      	blx	r4
		return true;
    8758:	2001      	movs	r0, #1
    875a:	e77f      	b.n	865c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    875c:	f003 031f 	and.w	r3, r3, #31
    8760:	2b02      	cmp	r3, #2
    8762:	f040 815a 	bne.w	8a1a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    8766:	88e3      	ldrh	r3, [r4, #6]
    8768:	b10b      	cbz	r3, 876e <usbdc_cb_ctl_req+0x142>
			return false;
    876a:	2000      	movs	r0, #0
    876c:	e776      	b.n	865c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    876e:	88a0      	ldrh	r0, [r4, #4]
    8770:	2101      	movs	r1, #1
    8772:	b2c0      	uxtb	r0, r0
    8774:	4b52      	ldr	r3, [pc, #328]	; (88c0 <usbdc_cb_ctl_req+0x294>)
    8776:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    8778:	2301      	movs	r3, #1
    877a:	2200      	movs	r2, #0
    877c:	4611      	mov	r1, r2
    877e:	4628      	mov	r0, r5
    8780:	4c4a      	ldr	r4, [pc, #296]	; (88ac <usbdc_cb_ctl_req+0x280>)
    8782:	47a0      	blx	r4
		return true;
    8784:	2001      	movs	r0, #1
    8786:	e769      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    8788:	8866      	ldrh	r6, [r4, #2]
    878a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    878c:	4a48      	ldr	r2, [pc, #288]	; (88b0 <usbdc_cb_ctl_req+0x284>)
    878e:	6813      	ldr	r3, [r2, #0]
    8790:	7ed2      	ldrb	r2, [r2, #27]
    8792:	6859      	ldr	r1, [r3, #4]
    8794:	6818      	ldr	r0, [r3, #0]
    8796:	4b47      	ldr	r3, [pc, #284]	; (88b4 <usbdc_cb_ctl_req+0x288>)
    8798:	4798      	blx	r3
	if (NULL == ifc) {
    879a:	2800      	cmp	r0, #0
    879c:	d045      	beq.n	882a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    879e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    87a0:	78c2      	ldrb	r2, [r0, #3]
    87a2:	7881      	ldrb	r1, [r0, #2]
    87a4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    87a8:	fa10 f181 	uxtah	r1, r0, r1
    87ac:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    87ae:	2204      	movs	r2, #4
    87b0:	4b41      	ldr	r3, [pc, #260]	; (88b8 <usbdc_cb_ctl_req+0x28c>)
    87b2:	4798      	blx	r3
    87b4:	4603      	mov	r3, r0
    87b6:	2800      	cmp	r0, #0
    87b8:	d039      	beq.n	882e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    87ba:	2704      	movs	r7, #4
    87bc:	4d3e      	ldr	r5, [pc, #248]	; (88b8 <usbdc_cb_ctl_req+0x28c>)
    87be:	e008      	b.n	87d2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    87c0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    87c2:	7803      	ldrb	r3, [r0, #0]
    87c4:	4418      	add	r0, r3
    87c6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    87c8:	463a      	mov	r2, r7
    87ca:	9901      	ldr	r1, [sp, #4]
    87cc:	47a8      	blx	r5
		if (NULL == ifc) {
    87ce:	4603      	mov	r3, r0
    87d0:	b378      	cbz	r0, 8832 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    87d2:	789a      	ldrb	r2, [r3, #2]
    87d4:	42a2      	cmp	r2, r4
    87d6:	d1f3      	bne.n	87c0 <usbdc_cb_ctl_req+0x194>
    87d8:	78da      	ldrb	r2, [r3, #3]
    87da:	42b2      	cmp	r2, r6
    87dc:	d1f0      	bne.n	87c0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    87de:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    87e0:	4b33      	ldr	r3, [pc, #204]	; (88b0 <usbdc_cb_ctl_req+0x284>)
    87e2:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    87e4:	b33d      	cbz	r5, 8836 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    87e6:	2701      	movs	r7, #1
    87e8:	686b      	ldr	r3, [r5, #4]
    87ea:	466a      	mov	r2, sp
    87ec:	4639      	mov	r1, r7
    87ee:	4628      	mov	r0, r5
    87f0:	4798      	blx	r3
    87f2:	b120      	cbz	r0, 87fe <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    87f4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    87f6:	2d00      	cmp	r5, #0
    87f8:	d1f6      	bne.n	87e8 <usbdc_cb_ctl_req+0x1bc>
	return false;
    87fa:	2000      	movs	r0, #0
    87fc:	e72e      	b.n	865c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    87fe:	686b      	ldr	r3, [r5, #4]
    8800:	466a      	mov	r2, sp
    8802:	2100      	movs	r1, #0
    8804:	4628      	mov	r0, r5
    8806:	4798      	blx	r3
    8808:	b9b8      	cbnz	r0, 883a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    880a:	b136      	cbz	r6, 881a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    880c:	4a28      	ldr	r2, [pc, #160]	; (88b0 <usbdc_cb_ctl_req+0x284>)
    880e:	2301      	movs	r3, #1
    8810:	fa03 f404 	lsl.w	r4, r3, r4
    8814:	7f53      	ldrb	r3, [r2, #29]
    8816:	4323      	orrs	r3, r4
    8818:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    881a:	2300      	movs	r3, #0
    881c:	461a      	mov	r2, r3
    881e:	4619      	mov	r1, r3
    8820:	4618      	mov	r0, r3
    8822:	4c22      	ldr	r4, [pc, #136]	; (88ac <usbdc_cb_ctl_req+0x280>)
    8824:	47a0      	blx	r4
			return true;
    8826:	2001      	movs	r0, #1
    8828:	e718      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    882a:	2000      	movs	r0, #0
    882c:	e716      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    882e:	2000      	movs	r0, #0
    8830:	e714      	b.n	865c <usbdc_cb_ctl_req+0x30>
			return false;
    8832:	2000      	movs	r0, #0
    8834:	e712      	b.n	865c <usbdc_cb_ctl_req+0x30>
	return false;
    8836:	2000      	movs	r0, #0
    8838:	e710      	b.n	865c <usbdc_cb_ctl_req+0x30>
			return false;
    883a:	2000      	movs	r0, #0
    883c:	e70e      	b.n	865c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    883e:	7862      	ldrb	r2, [r4, #1]
    8840:	2a0a      	cmp	r2, #10
    8842:	f200 80ec 	bhi.w	8a1e <usbdc_cb_ctl_req+0x3f2>
    8846:	e8df f012 	tbh	[pc, r2, lsl #1]
    884a:	008e      	.short	0x008e
    884c:	00ea00ea 	.word	0x00ea00ea
    8850:	00ea00ea 	.word	0x00ea00ea
    8854:	000b00ea 	.word	0x000b00ea
    8858:	008200ea 	.word	0x008200ea
    885c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    8860:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    8862:	0a13      	lsrs	r3, r2, #8
    8864:	2b02      	cmp	r3, #2
    8866:	d02d      	beq.n	88c4 <usbdc_cb_ctl_req+0x298>
    8868:	2b03      	cmp	r3, #3
    886a:	d050      	beq.n	890e <usbdc_cb_ctl_req+0x2e2>
    886c:	2b01      	cmp	r3, #1
    886e:	d001      	beq.n	8874 <usbdc_cb_ctl_req+0x248>
	return false;
    8870:	2000      	movs	r0, #0
    8872:	e6f3      	b.n	865c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    8874:	88e2      	ldrh	r2, [r4, #6]
    8876:	2a12      	cmp	r2, #18
    8878:	bf28      	it	cs
    887a:	2212      	movcs	r2, #18
    887c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    887e:	4b0c      	ldr	r3, [pc, #48]	; (88b0 <usbdc_cb_ctl_req+0x284>)
    8880:	681b      	ldr	r3, [r3, #0]
    8882:	2201      	movs	r2, #1
    8884:	6859      	ldr	r1, [r3, #4]
    8886:	6818      	ldr	r0, [r3, #0]
    8888:	4b0b      	ldr	r3, [pc, #44]	; (88b8 <usbdc_cb_ctl_req+0x28c>)
    888a:	4798      	blx	r3
	if (!dev_desc) {
    888c:	4601      	mov	r1, r0
    888e:	2800      	cmp	r0, #0
    8890:	f000 80c7 	beq.w	8a22 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    8894:	2300      	movs	r3, #0
    8896:	4622      	mov	r2, r4
    8898:	4628      	mov	r0, r5
    889a:	4c04      	ldr	r4, [pc, #16]	; (88ac <usbdc_cb_ctl_req+0x280>)
    889c:	47a0      	blx	r4
    889e:	fab0 f080 	clz	r0, r0
    88a2:	0940      	lsrs	r0, r0, #5
    88a4:	e6da      	b.n	865c <usbdc_cb_ctl_req+0x30>
    88a6:	bf00      	nop
    88a8:	000084c1 	.word	0x000084c1
    88ac:	0000860d 	.word	0x0000860d
    88b0:	20001198 	.word	0x20001198
    88b4:	00008bd1 	.word	0x00008bd1
    88b8:	00008b51 	.word	0x00008b51
    88bc:	00008475 	.word	0x00008475
    88c0:	00002131 	.word	0x00002131
	uint16_t length   = req->wLength;
    88c4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    88c6:	4b5b      	ldr	r3, [pc, #364]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    88c8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    88ca:	681b      	ldr	r3, [r3, #0]
    88cc:	3201      	adds	r2, #1
    88ce:	b2d2      	uxtb	r2, r2
    88d0:	6859      	ldr	r1, [r3, #4]
    88d2:	6818      	ldr	r0, [r3, #0]
    88d4:	4b58      	ldr	r3, [pc, #352]	; (8a38 <usbdc_cb_ctl_req+0x40c>)
    88d6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    88d8:	4601      	mov	r1, r0
    88da:	2800      	cmp	r0, #0
    88dc:	f000 80a3 	beq.w	8a26 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    88e0:	78c3      	ldrb	r3, [r0, #3]
    88e2:	7882      	ldrb	r2, [r0, #2]
    88e4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    88e8:	b292      	uxth	r2, r2
	if (length <= total_len) {
    88ea:	4294      	cmp	r4, r2
    88ec:	d90d      	bls.n	890a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    88ee:	3e01      	subs	r6, #1
    88f0:	4226      	tst	r6, r4
    88f2:	bf0c      	ite	eq
    88f4:	2301      	moveq	r3, #1
    88f6:	2300      	movne	r3, #0
		length = total_len;
    88f8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    88fa:	4622      	mov	r2, r4
    88fc:	4628      	mov	r0, r5
    88fe:	4c4f      	ldr	r4, [pc, #316]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    8900:	47a0      	blx	r4
    8902:	fab0 f080 	clz	r0, r0
    8906:	0940      	lsrs	r0, r0, #5
    8908:	e6a8      	b.n	865c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    890a:	2300      	movs	r3, #0
    890c:	e7f5      	b.n	88fa <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    890e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8910:	4b48      	ldr	r3, [pc, #288]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    8912:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    8914:	681b      	ldr	r3, [r3, #0]
    8916:	b2d2      	uxtb	r2, r2
    8918:	6859      	ldr	r1, [r3, #4]
    891a:	6818      	ldr	r0, [r3, #0]
    891c:	4b48      	ldr	r3, [pc, #288]	; (8a40 <usbdc_cb_ctl_req+0x414>)
    891e:	4798      	blx	r3
	if (NULL == str_desc) {
    8920:	4601      	mov	r1, r0
    8922:	2800      	cmp	r0, #0
    8924:	f000 8081 	beq.w	8a2a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    8928:	7802      	ldrb	r2, [r0, #0]
    892a:	4294      	cmp	r4, r2
    892c:	d90d      	bls.n	894a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    892e:	3e01      	subs	r6, #1
    8930:	4226      	tst	r6, r4
    8932:	bf0c      	ite	eq
    8934:	2301      	moveq	r3, #1
    8936:	2300      	movne	r3, #0
		length = str_desc[0];
    8938:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    893a:	4622      	mov	r2, r4
    893c:	4628      	mov	r0, r5
    893e:	4c3f      	ldr	r4, [pc, #252]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    8940:	47a0      	blx	r4
    8942:	fab0 f080 	clz	r0, r0
    8946:	0940      	lsrs	r0, r0, #5
    8948:	e688      	b.n	865c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    894a:	2300      	movs	r3, #0
    894c:	e7f5      	b.n	893a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    894e:	4939      	ldr	r1, [pc, #228]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    8950:	694b      	ldr	r3, [r1, #20]
    8952:	7eca      	ldrb	r2, [r1, #27]
    8954:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    8956:	2300      	movs	r3, #0
    8958:	2201      	movs	r2, #1
    895a:	6949      	ldr	r1, [r1, #20]
    895c:	4628      	mov	r0, r5
    895e:	4c37      	ldr	r4, [pc, #220]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    8960:	47a0      	blx	r4
		return true;
    8962:	2001      	movs	r0, #1
    8964:	e67a      	b.n	865c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    8966:	f003 031f 	and.w	r3, r3, #31
    896a:	2b01      	cmp	r3, #1
    896c:	d903      	bls.n	8976 <usbdc_cb_ctl_req+0x34a>
    896e:	2b02      	cmp	r3, #2
    8970:	d010      	beq.n	8994 <usbdc_cb_ctl_req+0x368>
		return false;
    8972:	2000      	movs	r0, #0
    8974:	e672      	b.n	865c <usbdc_cb_ctl_req+0x30>
		st = 0;
    8976:	2300      	movs	r3, #0
    8978:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    897a:	492e      	ldr	r1, [pc, #184]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    897c:	694b      	ldr	r3, [r1, #20]
    897e:	f8bd 2000 	ldrh.w	r2, [sp]
    8982:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    8984:	2300      	movs	r3, #0
    8986:	2202      	movs	r2, #2
    8988:	6949      	ldr	r1, [r1, #20]
    898a:	4628      	mov	r0, r5
    898c:	4c2b      	ldr	r4, [pc, #172]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    898e:	47a0      	blx	r4
	return true;
    8990:	2001      	movs	r0, #1
    8992:	e663      	b.n	865c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    8994:	88a0      	ldrh	r0, [r4, #4]
    8996:	2102      	movs	r1, #2
    8998:	b2c0      	uxtb	r0, r0
    899a:	4b2a      	ldr	r3, [pc, #168]	; (8a44 <usbdc_cb_ctl_req+0x418>)
    899c:	4798      	blx	r3
		if (st < 0) {
    899e:	2800      	cmp	r0, #0
    89a0:	db03      	blt.n	89aa <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    89a2:	f000 0001 	and.w	r0, r0, #1
    89a6:	9000      	str	r0, [sp, #0]
    89a8:	e7e7      	b.n	897a <usbdc_cb_ctl_req+0x34e>
			return false;
    89aa:	2000      	movs	r0, #0
    89ac:	e656      	b.n	865c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    89ae:	4b21      	ldr	r3, [pc, #132]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    89b0:	7f5b      	ldrb	r3, [r3, #29]
    89b2:	88a2      	ldrh	r2, [r4, #4]
    89b4:	4113      	asrs	r3, r2
    89b6:	f013 0f01 	tst.w	r3, #1
    89ba:	d012      	beq.n	89e2 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    89bc:	4b1d      	ldr	r3, [pc, #116]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    89be:	691d      	ldr	r5, [r3, #16]
	return false;
    89c0:	2000      	movs	r0, #0
	while (NULL != func) {
    89c2:	2d00      	cmp	r5, #0
    89c4:	f43f ae4a 	beq.w	865c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    89c8:	2602      	movs	r6, #2
    89ca:	686b      	ldr	r3, [r5, #4]
    89cc:	4622      	mov	r2, r4
    89ce:	4631      	mov	r1, r6
    89d0:	4628      	mov	r0, r5
    89d2:	4798      	blx	r3
    89d4:	2800      	cmp	r0, #0
    89d6:	da0f      	bge.n	89f8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    89d8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    89da:	2d00      	cmp	r5, #0
    89dc:	d1f5      	bne.n	89ca <usbdc_cb_ctl_req+0x39e>
	return false;
    89de:	2000      	movs	r0, #0
    89e0:	e63c      	b.n	865c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    89e2:	4914      	ldr	r1, [pc, #80]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    89e4:	694b      	ldr	r3, [r1, #20]
    89e6:	2000      	movs	r0, #0
    89e8:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    89ea:	4603      	mov	r3, r0
    89ec:	2201      	movs	r2, #1
    89ee:	6949      	ldr	r1, [r1, #20]
    89f0:	4c12      	ldr	r4, [pc, #72]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    89f2:	47a0      	blx	r4
		return true;
    89f4:	2001      	movs	r0, #1
    89f6:	e631      	b.n	865c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    89f8:	490e      	ldr	r1, [pc, #56]	; (8a34 <usbdc_cb_ctl_req+0x408>)
    89fa:	694b      	ldr	r3, [r1, #20]
    89fc:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    89fe:	2300      	movs	r3, #0
    8a00:	2201      	movs	r2, #1
    8a02:	6949      	ldr	r1, [r1, #20]
    8a04:	4618      	mov	r0, r3
    8a06:	4c0d      	ldr	r4, [pc, #52]	; (8a3c <usbdc_cb_ctl_req+0x410>)
    8a08:	47a0      	blx	r4
			return true;
    8a0a:	2001      	movs	r0, #1
    8a0c:	e626      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return true;
    8a0e:	2001      	movs	r0, #1
    8a10:	e624      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a12:	2000      	movs	r0, #0
    8a14:	e622      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a16:	2000      	movs	r0, #0
    8a18:	e620      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a1a:	2000      	movs	r0, #0
    8a1c:	e61e      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a1e:	2000      	movs	r0, #0
    8a20:	e61c      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a22:	2000      	movs	r0, #0
    8a24:	e61a      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a26:	2000      	movs	r0, #0
    8a28:	e618      	b.n	865c <usbdc_cb_ctl_req+0x30>
		return false;
    8a2a:	2000      	movs	r0, #0
    8a2c:	e616      	b.n	865c <usbdc_cb_ctl_req+0x30>
			return false;
    8a2e:	2000      	movs	r0, #0
    8a30:	e614      	b.n	865c <usbdc_cb_ctl_req+0x30>
    8a32:	bf00      	nop
    8a34:	20001198 	.word	0x20001198
    8a38:	00008bd1 	.word	0x00008bd1
    8a3c:	0000860d 	.word	0x0000860d
    8a40:	00008c39 	.word	0x00008c39
    8a44:	00002131 	.word	0x00002131

00008a48 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    8a48:	b508      	push	{r3, lr}
	switch (type) {
    8a4a:	2801      	cmp	r0, #1
    8a4c:	d007      	beq.n	8a5e <usbdc_register_handler+0x16>
    8a4e:	b110      	cbz	r0, 8a56 <usbdc_register_handler+0xe>
    8a50:	2802      	cmp	r0, #2
    8a52:	d008      	beq.n	8a66 <usbdc_register_handler+0x1e>
    8a54:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    8a56:	4806      	ldr	r0, [pc, #24]	; (8a70 <usbdc_register_handler+0x28>)
    8a58:	4b06      	ldr	r3, [pc, #24]	; (8a74 <usbdc_register_handler+0x2c>)
    8a5a:	4798      	blx	r3
		break;
    8a5c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    8a5e:	4806      	ldr	r0, [pc, #24]	; (8a78 <usbdc_register_handler+0x30>)
    8a60:	4b04      	ldr	r3, [pc, #16]	; (8a74 <usbdc_register_handler+0x2c>)
    8a62:	4798      	blx	r3
		break;
    8a64:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    8a66:	4805      	ldr	r0, [pc, #20]	; (8a7c <usbdc_register_handler+0x34>)
    8a68:	4b02      	ldr	r3, [pc, #8]	; (8a74 <usbdc_register_handler+0x2c>)
    8a6a:	4798      	blx	r3
    8a6c:	bd08      	pop	{r3, pc}
    8a6e:	bf00      	nop
    8a70:	2000119c 	.word	0x2000119c
    8a74:	00002241 	.word	0x00002241
    8a78:	200011a0 	.word	0x200011a0
    8a7c:	200011a4 	.word	0x200011a4

00008a80 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    8a80:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    8a82:	4605      	mov	r5, r0
    8a84:	f240 3255 	movw	r2, #853	; 0x355
    8a88:	490c      	ldr	r1, [pc, #48]	; (8abc <usbdc_init+0x3c>)
    8a8a:	3000      	adds	r0, #0
    8a8c:	bf18      	it	ne
    8a8e:	2001      	movne	r0, #1
    8a90:	4b0b      	ldr	r3, [pc, #44]	; (8ac0 <usbdc_init+0x40>)
    8a92:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    8a94:	4b0b      	ldr	r3, [pc, #44]	; (8ac4 <usbdc_init+0x44>)
    8a96:	4798      	blx	r3
	if (rc < 0) {
    8a98:	2800      	cmp	r0, #0
    8a9a:	db0e      	blt.n	8aba <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    8a9c:	4c0a      	ldr	r4, [pc, #40]	; (8ac8 <usbdc_init+0x48>)
    8a9e:	2220      	movs	r2, #32
    8aa0:	2100      	movs	r1, #0
    8aa2:	4620      	mov	r0, r4
    8aa4:	4b09      	ldr	r3, [pc, #36]	; (8acc <usbdc_init+0x4c>)
    8aa6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    8aa8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    8aaa:	4909      	ldr	r1, [pc, #36]	; (8ad0 <usbdc_init+0x50>)
    8aac:	2000      	movs	r0, #0
    8aae:	4c09      	ldr	r4, [pc, #36]	; (8ad4 <usbdc_init+0x54>)
    8ab0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    8ab2:	4909      	ldr	r1, [pc, #36]	; (8ad8 <usbdc_init+0x58>)
    8ab4:	2001      	movs	r0, #1
    8ab6:	47a0      	blx	r4

	return 0;
    8ab8:	2000      	movs	r0, #0
}
    8aba:	bd38      	pop	{r3, r4, r5, pc}
    8abc:	00009ee0 	.word	0x00009ee0
    8ac0:	000021e5 	.word	0x000021e5
    8ac4:	00001e99 	.word	0x00001e99
    8ac8:	20001198 	.word	0x20001198
    8acc:	00008e4b 	.word	0x00008e4b
    8ad0:	00008501 	.word	0x00008501
    8ad4:	00001f01 	.word	0x00001f01
    8ad8:	000085ed 	.word	0x000085ed

00008adc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    8adc:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    8ade:	4601      	mov	r1, r0
    8ae0:	4801      	ldr	r0, [pc, #4]	; (8ae8 <usbdc_register_function+0xc>)
    8ae2:	4b02      	ldr	r3, [pc, #8]	; (8aec <usbdc_register_function+0x10>)
    8ae4:	4798      	blx	r3
    8ae6:	bd08      	pop	{r3, pc}
    8ae8:	200011a8 	.word	0x200011a8
    8aec:	00002241 	.word	0x00002241

00008af0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    8af0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    8af2:	4b0a      	ldr	r3, [pc, #40]	; (8b1c <usbdc_start+0x2c>)
    8af4:	7e9b      	ldrb	r3, [r3, #26]
    8af6:	b95b      	cbnz	r3, 8b10 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    8af8:	b168      	cbz	r0, 8b16 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    8afa:	4b08      	ldr	r3, [pc, #32]	; (8b1c <usbdc_start+0x2c>)
    8afc:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    8afe:	6802      	ldr	r2, [r0, #0]
    8b00:	79d2      	ldrb	r2, [r2, #7]
    8b02:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    8b04:	2201      	movs	r2, #1
    8b06:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    8b08:	4b05      	ldr	r3, [pc, #20]	; (8b20 <usbdc_start+0x30>)
    8b0a:	4798      	blx	r3
	return ERR_NONE;
    8b0c:	2000      	movs	r0, #0
    8b0e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    8b10:	f06f 0003 	mvn.w	r0, #3
    8b14:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    8b16:	f06f 0008 	mvn.w	r0, #8
}
    8b1a:	bd08      	pop	{r3, pc}
    8b1c:	20001198 	.word	0x20001198
    8b20:	00001f0d 	.word	0x00001f0d

00008b24 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    8b24:	b508      	push	{r3, lr}
	usb_d_attach();
    8b26:	4b01      	ldr	r3, [pc, #4]	; (8b2c <usbdc_attach+0x8>)
    8b28:	4798      	blx	r3
    8b2a:	bd08      	pop	{r3, pc}
    8b2c:	00001f19 	.word	0x00001f19

00008b30 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    8b30:	4b01      	ldr	r3, [pc, #4]	; (8b38 <usbdc_get_ctrl_buffer+0x8>)
    8b32:	6958      	ldr	r0, [r3, #20]
    8b34:	4770      	bx	lr
    8b36:	bf00      	nop
    8b38:	20001198 	.word	0x20001198

00008b3c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    8b3c:	4b03      	ldr	r3, [pc, #12]	; (8b4c <usbdc_get_state+0x10>)
    8b3e:	7e98      	ldrb	r0, [r3, #26]
    8b40:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    8b44:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    8b46:	bf18      	it	ne
    8b48:	2010      	movne	r0, #16
    8b4a:	4770      	bx	lr
    8b4c:	20001198 	.word	0x20001198

00008b50 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8b50:	4288      	cmp	r0, r1
    8b52:	d214      	bcs.n	8b7e <usb_find_desc+0x2e>
	return desc[0];
    8b54:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8b56:	2b01      	cmp	r3, #1
    8b58:	d913      	bls.n	8b82 <usb_find_desc+0x32>
{
    8b5a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    8b5c:	7844      	ldrb	r4, [r0, #1]
    8b5e:	4294      	cmp	r4, r2
    8b60:	d00a      	beq.n	8b78 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    8b62:	4418      	add	r0, r3
	while (desc < eof) {
    8b64:	4281      	cmp	r1, r0
    8b66:	d906      	bls.n	8b76 <usb_find_desc+0x26>
	return desc[0];
    8b68:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8b6a:	2b01      	cmp	r3, #1
    8b6c:	d90b      	bls.n	8b86 <usb_find_desc+0x36>
	return desc[1];
    8b6e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    8b70:	4294      	cmp	r4, r2
    8b72:	d1f6      	bne.n	8b62 <usb_find_desc+0x12>
    8b74:	e000      	b.n	8b78 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    8b76:	2000      	movs	r0, #0
}
    8b78:	f85d 4b04 	ldr.w	r4, [sp], #4
    8b7c:	4770      	bx	lr
	return NULL;
    8b7e:	2000      	movs	r0, #0
    8b80:	4770      	bx	lr
		_desc_len_check();
    8b82:	2000      	movs	r0, #0
    8b84:	4770      	bx	lr
    8b86:	2000      	movs	r0, #0
    8b88:	e7f6      	b.n	8b78 <usb_find_desc+0x28>

00008b8a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8b8a:	4288      	cmp	r0, r1
    8b8c:	d216      	bcs.n	8bbc <usb_find_ep_desc+0x32>
	return desc[0];
    8b8e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8b90:	2b01      	cmp	r3, #1
    8b92:	d915      	bls.n	8bc0 <usb_find_ep_desc+0x36>
	return desc[1];
    8b94:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8b96:	2a04      	cmp	r2, #4
    8b98:	d014      	beq.n	8bc4 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8b9a:	2a05      	cmp	r2, #5
    8b9c:	d00b      	beq.n	8bb6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    8b9e:	4418      	add	r0, r3
	while (desc < eof) {
    8ba0:	4281      	cmp	r1, r0
    8ba2:	d909      	bls.n	8bb8 <usb_find_ep_desc+0x2e>
	return desc[0];
    8ba4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8ba6:	2b01      	cmp	r3, #1
    8ba8:	d90e      	bls.n	8bc8 <usb_find_ep_desc+0x3e>
	return desc[1];
    8baa:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8bac:	2a04      	cmp	r2, #4
    8bae:	d00d      	beq.n	8bcc <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8bb0:	2a05      	cmp	r2, #5
    8bb2:	d1f4      	bne.n	8b9e <usb_find_ep_desc+0x14>
    8bb4:	e00b      	b.n	8bce <usb_find_ep_desc+0x44>
    8bb6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    8bb8:	2000      	movs	r0, #0
    8bba:	4770      	bx	lr
    8bbc:	2000      	movs	r0, #0
    8bbe:	4770      	bx	lr
		_desc_len_check();
    8bc0:	2000      	movs	r0, #0
    8bc2:	4770      	bx	lr
	return NULL;
    8bc4:	2000      	movs	r0, #0
    8bc6:	4770      	bx	lr
		_desc_len_check();
    8bc8:	2000      	movs	r0, #0
    8bca:	4770      	bx	lr
	return NULL;
    8bcc:	2000      	movs	r0, #0
}
    8bce:	4770      	bx	lr

00008bd0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8bd0:	b538      	push	{r3, r4, r5, lr}
    8bd2:	460c      	mov	r4, r1
    8bd4:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8bd6:	2202      	movs	r2, #2
    8bd8:	4b16      	ldr	r3, [pc, #88]	; (8c34 <usb_find_cfg_desc+0x64>)
    8bda:	4798      	blx	r3
	if (!desc) {
    8bdc:	4603      	mov	r3, r0
    8bde:	b1e8      	cbz	r0, 8c1c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    8be0:	4284      	cmp	r4, r0
    8be2:	d91d      	bls.n	8c20 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    8be4:	7802      	ldrb	r2, [r0, #0]
    8be6:	2a01      	cmp	r2, #1
    8be8:	d91c      	bls.n	8c24 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    8bea:	7842      	ldrb	r2, [r0, #1]
    8bec:	2a02      	cmp	r2, #2
    8bee:	d11b      	bne.n	8c28 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    8bf0:	7942      	ldrb	r2, [r0, #5]
    8bf2:	42aa      	cmp	r2, r5
    8bf4:	d012      	beq.n	8c1c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    8bf6:	78d9      	ldrb	r1, [r3, #3]
    8bf8:	789a      	ldrb	r2, [r3, #2]
    8bfa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    8bfe:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    8c02:	429c      	cmp	r4, r3
    8c04:	d909      	bls.n	8c1a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    8c06:	781a      	ldrb	r2, [r3, #0]
    8c08:	2a01      	cmp	r2, #1
    8c0a:	d90f      	bls.n	8c2c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    8c0c:	785a      	ldrb	r2, [r3, #1]
    8c0e:	2a02      	cmp	r2, #2
    8c10:	d10e      	bne.n	8c30 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    8c12:	795a      	ldrb	r2, [r3, #5]
    8c14:	42aa      	cmp	r2, r5
    8c16:	d1ee      	bne.n	8bf6 <usb_find_cfg_desc+0x26>
    8c18:	e000      	b.n	8c1c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    8c1a:	2300      	movs	r3, #0
}
    8c1c:	4618      	mov	r0, r3
    8c1e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    8c20:	2300      	movs	r3, #0
    8c22:	e7fb      	b.n	8c1c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    8c24:	2300      	movs	r3, #0
    8c26:	e7f9      	b.n	8c1c <usb_find_cfg_desc+0x4c>
	return NULL;
    8c28:	2300      	movs	r3, #0
    8c2a:	e7f7      	b.n	8c1c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    8c2c:	2300      	movs	r3, #0
    8c2e:	e7f5      	b.n	8c1c <usb_find_cfg_desc+0x4c>
	return NULL;
    8c30:	2300      	movs	r3, #0
    8c32:	e7f3      	b.n	8c1c <usb_find_cfg_desc+0x4c>
    8c34:	00008b51 	.word	0x00008b51

00008c38 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8c38:	4288      	cmp	r0, r1
    8c3a:	d217      	bcs.n	8c6c <usb_find_str_desc+0x34>
{
    8c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c40:	460d      	mov	r5, r1
    8c42:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    8c44:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8c46:	f04f 0803 	mov.w	r8, #3
    8c4a:	4f0c      	ldr	r7, [pc, #48]	; (8c7c <usb_find_str_desc+0x44>)
    8c4c:	4642      	mov	r2, r8
    8c4e:	4629      	mov	r1, r5
    8c50:	47b8      	blx	r7
		if (desc) {
    8c52:	4603      	mov	r3, r0
    8c54:	b170      	cbz	r0, 8c74 <usb_find_str_desc+0x3c>
	return desc[0];
    8c56:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    8c58:	2801      	cmp	r0, #1
    8c5a:	d90a      	bls.n	8c72 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    8c5c:	42a6      	cmp	r6, r4
    8c5e:	d009      	beq.n	8c74 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    8c60:	4418      	add	r0, r3
    8c62:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    8c64:	4285      	cmp	r5, r0
    8c66:	d8f1      	bhi.n	8c4c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    8c68:	2300      	movs	r3, #0
    8c6a:	e003      	b.n	8c74 <usb_find_str_desc+0x3c>
    8c6c:	2300      	movs	r3, #0
}
    8c6e:	4618      	mov	r0, r3
    8c70:	4770      	bx	lr
			_desc_len_check();
    8c72:	2300      	movs	r3, #0
}
    8c74:	4618      	mov	r0, r3
    8c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c7a:	bf00      	nop
    8c7c:	00008b51 	.word	0x00008b51

00008c80 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    8c80:	4b3a      	ldr	r3, [pc, #232]	; (8d6c <hiddf_demo_sof_event+0xec>)
    8c82:	791b      	ldrb	r3, [r3, #4]
    8c84:	2b0a      	cmp	r3, #10
    8c86:	d803      	bhi.n	8c90 <hiddf_demo_sof_event+0x10>
    8c88:	3301      	adds	r3, #1
    8c8a:	4a38      	ldr	r2, [pc, #224]	; (8d6c <hiddf_demo_sof_event+0xec>)
    8c8c:	7113      	strb	r3, [r2, #4]
    8c8e:	4770      	bx	lr
{
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b084      	sub	sp, #16
		interval = 0;
    8c94:	4b35      	ldr	r3, [pc, #212]	; (8d6c <hiddf_demo_sof_event+0xec>)
    8c96:	2200      	movs	r2, #0
    8c98:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    8c9a:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    8c9c:	a801      	add	r0, sp, #4
    8c9e:	4b34      	ldr	r3, [pc, #208]	; (8d70 <hiddf_demo_sof_event+0xf0>)
    8ca0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8ca2:	096b      	lsrs	r3, r5, #5
    8ca4:	4933      	ldr	r1, [pc, #204]	; (8d74 <hiddf_demo_sof_event+0xf4>)
    8ca6:	01db      	lsls	r3, r3, #7
    8ca8:	18ca      	adds	r2, r1, r3
    8caa:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8cac:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8cae:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8cb0:	405c      	eors	r4, r3
    8cb2:	400c      	ands	r4, r1
    8cb4:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8cb6:	a801      	add	r0, sp, #4
    8cb8:	4b2f      	ldr	r3, [pc, #188]	; (8d78 <hiddf_demo_sof_event+0xf8>)
    8cba:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    8cbc:	f005 051f 	and.w	r5, r5, #31
    8cc0:	2301      	movs	r3, #1
    8cc2:	fa03 f505 	lsl.w	r5, r3, r5
    8cc6:	4225      	tst	r5, r4
    8cc8:	d040      	beq.n	8d4c <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    8cca:	4b28      	ldr	r3, [pc, #160]	; (8d6c <hiddf_demo_sof_event+0xec>)
    8ccc:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    8cce:	a802      	add	r0, sp, #8
    8cd0:	4b27      	ldr	r3, [pc, #156]	; (8d70 <hiddf_demo_sof_event+0xf0>)
    8cd2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8cd4:	096b      	lsrs	r3, r5, #5
    8cd6:	4927      	ldr	r1, [pc, #156]	; (8d74 <hiddf_demo_sof_event+0xf4>)
    8cd8:	01db      	lsls	r3, r3, #7
    8cda:	18ca      	adds	r2, r1, r3
    8cdc:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8cde:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8ce0:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8ce2:	405c      	eors	r4, r3
    8ce4:	400c      	ands	r4, r1
    8ce6:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8ce8:	a802      	add	r0, sp, #8
    8cea:	4b23      	ldr	r3, [pc, #140]	; (8d78 <hiddf_demo_sof_event+0xf8>)
    8cec:	4798      	blx	r3
    8cee:	f005 051f 	and.w	r5, r5, #31
    8cf2:	2301      	movs	r3, #1
    8cf4:	fa03 f505 	lsl.w	r5, r3, r5
    8cf8:	4225      	tst	r5, r4
    8cfa:	d02d      	beq.n	8d58 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    8cfc:	4d1b      	ldr	r5, [pc, #108]	; (8d6c <hiddf_demo_sof_event+0xec>)
    8cfe:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    8d00:	a803      	add	r0, sp, #12
    8d02:	4b1b      	ldr	r3, [pc, #108]	; (8d70 <hiddf_demo_sof_event+0xf0>)
    8d04:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8d06:	0973      	lsrs	r3, r6, #5
    8d08:	491a      	ldr	r1, [pc, #104]	; (8d74 <hiddf_demo_sof_event+0xf4>)
    8d0a:	01db      	lsls	r3, r3, #7
    8d0c:	18ca      	adds	r2, r1, r3
    8d0e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8d10:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8d12:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8d14:	405c      	eors	r4, r3
    8d16:	400c      	ands	r4, r1
    8d18:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8d1a:	a803      	add	r0, sp, #12
    8d1c:	4b16      	ldr	r3, [pc, #88]	; (8d78 <hiddf_demo_sof_event+0xf8>)
    8d1e:	4798      	blx	r3
    8d20:	f006 061f 	and.w	r6, r6, #31
    8d24:	2301      	movs	r3, #1
    8d26:	40b3      	lsls	r3, r6
    8d28:	401c      	ands	r4, r3
    8d2a:	bf0c      	ite	eq
    8d2c:	2301      	moveq	r3, #1
    8d2e:	2300      	movne	r3, #0
    8d30:	7d2a      	ldrb	r2, [r5, #20]
    8d32:	429a      	cmp	r2, r3
    8d34:	d008      	beq.n	8d48 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    8d36:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    8d38:	b19c      	cbz	r4, 8d62 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    8d3a:	2200      	movs	r2, #0
    8d3c:	4b0f      	ldr	r3, [pc, #60]	; (8d7c <hiddf_demo_sof_event+0xfc>)
    8d3e:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    8d40:	2101      	movs	r1, #1
    8d42:	480e      	ldr	r0, [pc, #56]	; (8d7c <hiddf_demo_sof_event+0xfc>)
    8d44:	4b0e      	ldr	r3, [pc, #56]	; (8d80 <hiddf_demo_sof_event+0x100>)
    8d46:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    8d48:	b004      	add	sp, #16
    8d4a:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    8d4c:	4619      	mov	r1, r3
    8d4e:	f06f 0004 	mvn.w	r0, #4
    8d52:	4b0c      	ldr	r3, [pc, #48]	; (8d84 <hiddf_demo_sof_event+0x104>)
    8d54:	4798      	blx	r3
    8d56:	e7b8      	b.n	8cca <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    8d58:	4619      	mov	r1, r3
    8d5a:	2005      	movs	r0, #5
    8d5c:	4b09      	ldr	r3, [pc, #36]	; (8d84 <hiddf_demo_sof_event+0x104>)
    8d5e:	4798      	blx	r3
    8d60:	e7cc      	b.n	8cfc <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    8d62:	2201      	movs	r2, #1
    8d64:	4b05      	ldr	r3, [pc, #20]	; (8d7c <hiddf_demo_sof_event+0xfc>)
    8d66:	709a      	strb	r2, [r3, #2]
    8d68:	e7ea      	b.n	8d40 <hiddf_demo_sof_event+0xc0>
    8d6a:	bf00      	nop
    8d6c:	200011b8 	.word	0x200011b8
    8d70:	000012b5 	.word	0x000012b5
    8d74:	41008000 	.word	0x41008000
    8d78:	000012c3 	.word	0x000012c3
    8d7c:	20000370 	.word	0x20000370
    8d80:	00007f81 	.word	0x00007f81
    8d84:	00008215 	.word	0x00008215

00008d88 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    8d88:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    8d8a:	4805      	ldr	r0, [pc, #20]	; (8da0 <composite_device_init+0x18>)
    8d8c:	4b05      	ldr	r3, [pc, #20]	; (8da4 <composite_device_init+0x1c>)
    8d8e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    8d90:	4b05      	ldr	r3, [pc, #20]	; (8da8 <composite_device_init+0x20>)
    8d92:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    8d94:	4b05      	ldr	r3, [pc, #20]	; (8dac <composite_device_init+0x24>)
    8d96:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    8d98:	4b05      	ldr	r3, [pc, #20]	; (8db0 <composite_device_init+0x28>)
    8d9a:	4798      	blx	r3
    8d9c:	bd08      	pop	{r3, pc}
    8d9e:	bf00      	nop
    8da0:	200011d0 	.word	0x200011d0
    8da4:	00008a81 	.word	0x00008a81
    8da8:	00007cfd 	.word	0x00007cfd
    8dac:	000081d1 	.word	0x000081d1
    8db0:	00007f3d 	.word	0x00007f3d

00008db4 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    8db4:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    8db6:	4803      	ldr	r0, [pc, #12]	; (8dc4 <composite_device_start+0x10>)
    8db8:	4b03      	ldr	r3, [pc, #12]	; (8dc8 <composite_device_start+0x14>)
    8dba:	4798      	blx	r3
	usbdc_attach();
    8dbc:	4b03      	ldr	r3, [pc, #12]	; (8dcc <composite_device_start+0x18>)
    8dbe:	4798      	blx	r3
    8dc0:	bd08      	pop	{r3, pc}
    8dc2:	bf00      	nop
    8dc4:	2000037c 	.word	0x2000037c
    8dc8:	00008af1 	.word	0x00008af1
    8dcc:	00008b25 	.word	0x00008b25

00008dd0 <usb_init>:
		}
	}
}

void usb_init(void)
{
    8dd0:	b508      	push	{r3, lr}

	composite_device_init();
    8dd2:	4b01      	ldr	r3, [pc, #4]	; (8dd8 <usb_init+0x8>)
    8dd4:	4798      	blx	r3
    8dd6:	bd08      	pop	{r3, pc}
    8dd8:	00008d89 	.word	0x00008d89

00008ddc <__libc_init_array>:
    8ddc:	b570      	push	{r4, r5, r6, lr}
    8dde:	4e0d      	ldr	r6, [pc, #52]	; (8e14 <__libc_init_array+0x38>)
    8de0:	4c0d      	ldr	r4, [pc, #52]	; (8e18 <__libc_init_array+0x3c>)
    8de2:	1ba4      	subs	r4, r4, r6
    8de4:	10a4      	asrs	r4, r4, #2
    8de6:	2500      	movs	r5, #0
    8de8:	42a5      	cmp	r5, r4
    8dea:	d109      	bne.n	8e00 <__libc_init_array+0x24>
    8dec:	4e0b      	ldr	r6, [pc, #44]	; (8e1c <__libc_init_array+0x40>)
    8dee:	4c0c      	ldr	r4, [pc, #48]	; (8e20 <__libc_init_array+0x44>)
    8df0:	f001 f8cc 	bl	9f8c <_init>
    8df4:	1ba4      	subs	r4, r4, r6
    8df6:	10a4      	asrs	r4, r4, #2
    8df8:	2500      	movs	r5, #0
    8dfa:	42a5      	cmp	r5, r4
    8dfc:	d105      	bne.n	8e0a <__libc_init_array+0x2e>
    8dfe:	bd70      	pop	{r4, r5, r6, pc}
    8e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8e04:	4798      	blx	r3
    8e06:	3501      	adds	r5, #1
    8e08:	e7ee      	b.n	8de8 <__libc_init_array+0xc>
    8e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8e0e:	4798      	blx	r3
    8e10:	3501      	adds	r5, #1
    8e12:	e7f2      	b.n	8dfa <__libc_init_array+0x1e>
    8e14:	00009f98 	.word	0x00009f98
    8e18:	00009f98 	.word	0x00009f98
    8e1c:	00009f98 	.word	0x00009f98
    8e20:	00009f9c 	.word	0x00009f9c

00008e24 <malloc>:
    8e24:	4b02      	ldr	r3, [pc, #8]	; (8e30 <malloc+0xc>)
    8e26:	4601      	mov	r1, r0
    8e28:	6818      	ldr	r0, [r3, #0]
    8e2a:	f000 b865 	b.w	8ef8 <_malloc_r>
    8e2e:	bf00      	nop
    8e30:	20000464 	.word	0x20000464

00008e34 <memcpy>:
    8e34:	b510      	push	{r4, lr}
    8e36:	1e43      	subs	r3, r0, #1
    8e38:	440a      	add	r2, r1
    8e3a:	4291      	cmp	r1, r2
    8e3c:	d100      	bne.n	8e40 <memcpy+0xc>
    8e3e:	bd10      	pop	{r4, pc}
    8e40:	f811 4b01 	ldrb.w	r4, [r1], #1
    8e44:	f803 4f01 	strb.w	r4, [r3, #1]!
    8e48:	e7f7      	b.n	8e3a <memcpy+0x6>

00008e4a <memset>:
    8e4a:	4402      	add	r2, r0
    8e4c:	4603      	mov	r3, r0
    8e4e:	4293      	cmp	r3, r2
    8e50:	d100      	bne.n	8e54 <memset+0xa>
    8e52:	4770      	bx	lr
    8e54:	f803 1b01 	strb.w	r1, [r3], #1
    8e58:	e7f9      	b.n	8e4e <memset+0x4>
	...

00008e5c <_free_r>:
    8e5c:	b538      	push	{r3, r4, r5, lr}
    8e5e:	4605      	mov	r5, r0
    8e60:	2900      	cmp	r1, #0
    8e62:	d045      	beq.n	8ef0 <_free_r+0x94>
    8e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8e68:	1f0c      	subs	r4, r1, #4
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	bfb8      	it	lt
    8e6e:	18e4      	addlt	r4, r4, r3
    8e70:	f000 f916 	bl	90a0 <__malloc_lock>
    8e74:	4a1f      	ldr	r2, [pc, #124]	; (8ef4 <_free_r+0x98>)
    8e76:	6813      	ldr	r3, [r2, #0]
    8e78:	4610      	mov	r0, r2
    8e7a:	b933      	cbnz	r3, 8e8a <_free_r+0x2e>
    8e7c:	6063      	str	r3, [r4, #4]
    8e7e:	6014      	str	r4, [r2, #0]
    8e80:	4628      	mov	r0, r5
    8e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e86:	f000 b90c 	b.w	90a2 <__malloc_unlock>
    8e8a:	42a3      	cmp	r3, r4
    8e8c:	d90c      	bls.n	8ea8 <_free_r+0x4c>
    8e8e:	6821      	ldr	r1, [r4, #0]
    8e90:	1862      	adds	r2, r4, r1
    8e92:	4293      	cmp	r3, r2
    8e94:	bf04      	itt	eq
    8e96:	681a      	ldreq	r2, [r3, #0]
    8e98:	685b      	ldreq	r3, [r3, #4]
    8e9a:	6063      	str	r3, [r4, #4]
    8e9c:	bf04      	itt	eq
    8e9e:	1852      	addeq	r2, r2, r1
    8ea0:	6022      	streq	r2, [r4, #0]
    8ea2:	6004      	str	r4, [r0, #0]
    8ea4:	e7ec      	b.n	8e80 <_free_r+0x24>
    8ea6:	4613      	mov	r3, r2
    8ea8:	685a      	ldr	r2, [r3, #4]
    8eaa:	b10a      	cbz	r2, 8eb0 <_free_r+0x54>
    8eac:	42a2      	cmp	r2, r4
    8eae:	d9fa      	bls.n	8ea6 <_free_r+0x4a>
    8eb0:	6819      	ldr	r1, [r3, #0]
    8eb2:	1858      	adds	r0, r3, r1
    8eb4:	42a0      	cmp	r0, r4
    8eb6:	d10b      	bne.n	8ed0 <_free_r+0x74>
    8eb8:	6820      	ldr	r0, [r4, #0]
    8eba:	4401      	add	r1, r0
    8ebc:	1858      	adds	r0, r3, r1
    8ebe:	4282      	cmp	r2, r0
    8ec0:	6019      	str	r1, [r3, #0]
    8ec2:	d1dd      	bne.n	8e80 <_free_r+0x24>
    8ec4:	6810      	ldr	r0, [r2, #0]
    8ec6:	6852      	ldr	r2, [r2, #4]
    8ec8:	605a      	str	r2, [r3, #4]
    8eca:	4401      	add	r1, r0
    8ecc:	6019      	str	r1, [r3, #0]
    8ece:	e7d7      	b.n	8e80 <_free_r+0x24>
    8ed0:	d902      	bls.n	8ed8 <_free_r+0x7c>
    8ed2:	230c      	movs	r3, #12
    8ed4:	602b      	str	r3, [r5, #0]
    8ed6:	e7d3      	b.n	8e80 <_free_r+0x24>
    8ed8:	6820      	ldr	r0, [r4, #0]
    8eda:	1821      	adds	r1, r4, r0
    8edc:	428a      	cmp	r2, r1
    8ede:	bf04      	itt	eq
    8ee0:	6811      	ldreq	r1, [r2, #0]
    8ee2:	6852      	ldreq	r2, [r2, #4]
    8ee4:	6062      	str	r2, [r4, #4]
    8ee6:	bf04      	itt	eq
    8ee8:	1809      	addeq	r1, r1, r0
    8eea:	6021      	streq	r1, [r4, #0]
    8eec:	605c      	str	r4, [r3, #4]
    8eee:	e7c7      	b.n	8e80 <_free_r+0x24>
    8ef0:	bd38      	pop	{r3, r4, r5, pc}
    8ef2:	bf00      	nop
    8ef4:	20001210 	.word	0x20001210

00008ef8 <_malloc_r>:
    8ef8:	b570      	push	{r4, r5, r6, lr}
    8efa:	1ccd      	adds	r5, r1, #3
    8efc:	f025 0503 	bic.w	r5, r5, #3
    8f00:	3508      	adds	r5, #8
    8f02:	2d0c      	cmp	r5, #12
    8f04:	bf38      	it	cc
    8f06:	250c      	movcc	r5, #12
    8f08:	2d00      	cmp	r5, #0
    8f0a:	4606      	mov	r6, r0
    8f0c:	db01      	blt.n	8f12 <_malloc_r+0x1a>
    8f0e:	42a9      	cmp	r1, r5
    8f10:	d903      	bls.n	8f1a <_malloc_r+0x22>
    8f12:	230c      	movs	r3, #12
    8f14:	6033      	str	r3, [r6, #0]
    8f16:	2000      	movs	r0, #0
    8f18:	bd70      	pop	{r4, r5, r6, pc}
    8f1a:	f000 f8c1 	bl	90a0 <__malloc_lock>
    8f1e:	4a23      	ldr	r2, [pc, #140]	; (8fac <_malloc_r+0xb4>)
    8f20:	6814      	ldr	r4, [r2, #0]
    8f22:	4621      	mov	r1, r4
    8f24:	b991      	cbnz	r1, 8f4c <_malloc_r+0x54>
    8f26:	4c22      	ldr	r4, [pc, #136]	; (8fb0 <_malloc_r+0xb8>)
    8f28:	6823      	ldr	r3, [r4, #0]
    8f2a:	b91b      	cbnz	r3, 8f34 <_malloc_r+0x3c>
    8f2c:	4630      	mov	r0, r6
    8f2e:	f000 f87b 	bl	9028 <_sbrk_r>
    8f32:	6020      	str	r0, [r4, #0]
    8f34:	4629      	mov	r1, r5
    8f36:	4630      	mov	r0, r6
    8f38:	f000 f876 	bl	9028 <_sbrk_r>
    8f3c:	1c43      	adds	r3, r0, #1
    8f3e:	d126      	bne.n	8f8e <_malloc_r+0x96>
    8f40:	230c      	movs	r3, #12
    8f42:	6033      	str	r3, [r6, #0]
    8f44:	4630      	mov	r0, r6
    8f46:	f000 f8ac 	bl	90a2 <__malloc_unlock>
    8f4a:	e7e4      	b.n	8f16 <_malloc_r+0x1e>
    8f4c:	680b      	ldr	r3, [r1, #0]
    8f4e:	1b5b      	subs	r3, r3, r5
    8f50:	d41a      	bmi.n	8f88 <_malloc_r+0x90>
    8f52:	2b0b      	cmp	r3, #11
    8f54:	d90f      	bls.n	8f76 <_malloc_r+0x7e>
    8f56:	600b      	str	r3, [r1, #0]
    8f58:	50cd      	str	r5, [r1, r3]
    8f5a:	18cc      	adds	r4, r1, r3
    8f5c:	4630      	mov	r0, r6
    8f5e:	f000 f8a0 	bl	90a2 <__malloc_unlock>
    8f62:	f104 000b 	add.w	r0, r4, #11
    8f66:	1d23      	adds	r3, r4, #4
    8f68:	f020 0007 	bic.w	r0, r0, #7
    8f6c:	1ac3      	subs	r3, r0, r3
    8f6e:	d01b      	beq.n	8fa8 <_malloc_r+0xb0>
    8f70:	425a      	negs	r2, r3
    8f72:	50e2      	str	r2, [r4, r3]
    8f74:	bd70      	pop	{r4, r5, r6, pc}
    8f76:	428c      	cmp	r4, r1
    8f78:	bf0d      	iteet	eq
    8f7a:	6863      	ldreq	r3, [r4, #4]
    8f7c:	684b      	ldrne	r3, [r1, #4]
    8f7e:	6063      	strne	r3, [r4, #4]
    8f80:	6013      	streq	r3, [r2, #0]
    8f82:	bf18      	it	ne
    8f84:	460c      	movne	r4, r1
    8f86:	e7e9      	b.n	8f5c <_malloc_r+0x64>
    8f88:	460c      	mov	r4, r1
    8f8a:	6849      	ldr	r1, [r1, #4]
    8f8c:	e7ca      	b.n	8f24 <_malloc_r+0x2c>
    8f8e:	1cc4      	adds	r4, r0, #3
    8f90:	f024 0403 	bic.w	r4, r4, #3
    8f94:	42a0      	cmp	r0, r4
    8f96:	d005      	beq.n	8fa4 <_malloc_r+0xac>
    8f98:	1a21      	subs	r1, r4, r0
    8f9a:	4630      	mov	r0, r6
    8f9c:	f000 f844 	bl	9028 <_sbrk_r>
    8fa0:	3001      	adds	r0, #1
    8fa2:	d0cd      	beq.n	8f40 <_malloc_r+0x48>
    8fa4:	6025      	str	r5, [r4, #0]
    8fa6:	e7d9      	b.n	8f5c <_malloc_r+0x64>
    8fa8:	bd70      	pop	{r4, r5, r6, pc}
    8faa:	bf00      	nop
    8fac:	20001210 	.word	0x20001210
    8fb0:	20001214 	.word	0x20001214

00008fb4 <random>:
    8fb4:	4b19      	ldr	r3, [pc, #100]	; (901c <random+0x68>)
    8fb6:	b510      	push	{r4, lr}
    8fb8:	681c      	ldr	r4, [r3, #0]
    8fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8fbc:	b9d3      	cbnz	r3, 8ff4 <random+0x40>
    8fbe:	2018      	movs	r0, #24
    8fc0:	f7ff ff30 	bl	8e24 <malloc>
    8fc4:	f243 330e 	movw	r3, #13070	; 0x330e
    8fc8:	63a0      	str	r0, [r4, #56]	; 0x38
    8fca:	8003      	strh	r3, [r0, #0]
    8fcc:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    8fd0:	8043      	strh	r3, [r0, #2]
    8fd2:	f241 2334 	movw	r3, #4660	; 0x1234
    8fd6:	8083      	strh	r3, [r0, #4]
    8fd8:	f24e 636d 	movw	r3, #58989	; 0xe66d
    8fdc:	80c3      	strh	r3, [r0, #6]
    8fde:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    8fe2:	8103      	strh	r3, [r0, #8]
    8fe4:	2305      	movs	r3, #5
    8fe6:	8143      	strh	r3, [r0, #10]
    8fe8:	230b      	movs	r3, #11
    8fea:	8183      	strh	r3, [r0, #12]
    8fec:	2201      	movs	r2, #1
    8fee:	2300      	movs	r3, #0
    8ff0:	e9c0 2304 	strd	r2, r3, [r0, #16]
    8ff4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8ff6:	480a      	ldr	r0, [pc, #40]	; (9020 <random+0x6c>)
    8ff8:	690a      	ldr	r2, [r1, #16]
    8ffa:	694b      	ldr	r3, [r1, #20]
    8ffc:	4c09      	ldr	r4, [pc, #36]	; (9024 <random+0x70>)
    8ffe:	4350      	muls	r0, r2
    9000:	fb04 0003 	mla	r0, r4, r3, r0
    9004:	fba2 2304 	umull	r2, r3, r2, r4
    9008:	3201      	adds	r2, #1
    900a:	4403      	add	r3, r0
    900c:	f143 0300 	adc.w	r3, r3, #0
    9010:	e9c1 2304 	strd	r2, r3, [r1, #16]
    9014:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    9018:	bd10      	pop	{r4, pc}
    901a:	bf00      	nop
    901c:	20000464 	.word	0x20000464
    9020:	5851f42d 	.word	0x5851f42d
    9024:	4c957f2d 	.word	0x4c957f2d

00009028 <_sbrk_r>:
    9028:	b538      	push	{r3, r4, r5, lr}
    902a:	4c06      	ldr	r4, [pc, #24]	; (9044 <_sbrk_r+0x1c>)
    902c:	2300      	movs	r3, #0
    902e:	4605      	mov	r5, r0
    9030:	4608      	mov	r0, r1
    9032:	6023      	str	r3, [r4, #0]
    9034:	f7f9 f9a6 	bl	2384 <_sbrk>
    9038:	1c43      	adds	r3, r0, #1
    903a:	d102      	bne.n	9042 <_sbrk_r+0x1a>
    903c:	6823      	ldr	r3, [r4, #0]
    903e:	b103      	cbz	r3, 9042 <_sbrk_r+0x1a>
    9040:	602b      	str	r3, [r5, #0]
    9042:	bd38      	pop	{r3, r4, r5, pc}
    9044:	20002a54 	.word	0x20002a54

00009048 <siprintf>:
    9048:	b40e      	push	{r1, r2, r3}
    904a:	b500      	push	{lr}
    904c:	b09c      	sub	sp, #112	; 0x70
    904e:	f44f 7102 	mov.w	r1, #520	; 0x208
    9052:	ab1d      	add	r3, sp, #116	; 0x74
    9054:	f8ad 1014 	strh.w	r1, [sp, #20]
    9058:	9002      	str	r0, [sp, #8]
    905a:	9006      	str	r0, [sp, #24]
    905c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9060:	480a      	ldr	r0, [pc, #40]	; (908c <siprintf+0x44>)
    9062:	9104      	str	r1, [sp, #16]
    9064:	9107      	str	r1, [sp, #28]
    9066:	f64f 71ff 	movw	r1, #65535	; 0xffff
    906a:	f853 2b04 	ldr.w	r2, [r3], #4
    906e:	f8ad 1016 	strh.w	r1, [sp, #22]
    9072:	6800      	ldr	r0, [r0, #0]
    9074:	9301      	str	r3, [sp, #4]
    9076:	a902      	add	r1, sp, #8
    9078:	f000 f870 	bl	915c <_svfiprintf_r>
    907c:	9b02      	ldr	r3, [sp, #8]
    907e:	2200      	movs	r2, #0
    9080:	701a      	strb	r2, [r3, #0]
    9082:	b01c      	add	sp, #112	; 0x70
    9084:	f85d eb04 	ldr.w	lr, [sp], #4
    9088:	b003      	add	sp, #12
    908a:	4770      	bx	lr
    908c:	20000464 	.word	0x20000464

00009090 <strlen>:
    9090:	4603      	mov	r3, r0
    9092:	f813 2b01 	ldrb.w	r2, [r3], #1
    9096:	2a00      	cmp	r2, #0
    9098:	d1fb      	bne.n	9092 <strlen+0x2>
    909a:	1a18      	subs	r0, r3, r0
    909c:	3801      	subs	r0, #1
    909e:	4770      	bx	lr

000090a0 <__malloc_lock>:
    90a0:	4770      	bx	lr

000090a2 <__malloc_unlock>:
    90a2:	4770      	bx	lr

000090a4 <__ssputs_r>:
    90a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90a8:	688e      	ldr	r6, [r1, #8]
    90aa:	429e      	cmp	r6, r3
    90ac:	4682      	mov	sl, r0
    90ae:	460c      	mov	r4, r1
    90b0:	4691      	mov	r9, r2
    90b2:	4698      	mov	r8, r3
    90b4:	d835      	bhi.n	9122 <__ssputs_r+0x7e>
    90b6:	898a      	ldrh	r2, [r1, #12]
    90b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    90bc:	d031      	beq.n	9122 <__ssputs_r+0x7e>
    90be:	6825      	ldr	r5, [r4, #0]
    90c0:	6909      	ldr	r1, [r1, #16]
    90c2:	1a6f      	subs	r7, r5, r1
    90c4:	6965      	ldr	r5, [r4, #20]
    90c6:	2302      	movs	r3, #2
    90c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    90cc:	fb95 f5f3 	sdiv	r5, r5, r3
    90d0:	f108 0301 	add.w	r3, r8, #1
    90d4:	443b      	add	r3, r7
    90d6:	429d      	cmp	r5, r3
    90d8:	bf38      	it	cc
    90da:	461d      	movcc	r5, r3
    90dc:	0553      	lsls	r3, r2, #21
    90de:	d531      	bpl.n	9144 <__ssputs_r+0xa0>
    90e0:	4629      	mov	r1, r5
    90e2:	f7ff ff09 	bl	8ef8 <_malloc_r>
    90e6:	4606      	mov	r6, r0
    90e8:	b950      	cbnz	r0, 9100 <__ssputs_r+0x5c>
    90ea:	230c      	movs	r3, #12
    90ec:	f8ca 3000 	str.w	r3, [sl]
    90f0:	89a3      	ldrh	r3, [r4, #12]
    90f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    90f6:	81a3      	strh	r3, [r4, #12]
    90f8:	f04f 30ff 	mov.w	r0, #4294967295
    90fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9100:	463a      	mov	r2, r7
    9102:	6921      	ldr	r1, [r4, #16]
    9104:	f7ff fe96 	bl	8e34 <memcpy>
    9108:	89a3      	ldrh	r3, [r4, #12]
    910a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9112:	81a3      	strh	r3, [r4, #12]
    9114:	6126      	str	r6, [r4, #16]
    9116:	6165      	str	r5, [r4, #20]
    9118:	443e      	add	r6, r7
    911a:	1bed      	subs	r5, r5, r7
    911c:	6026      	str	r6, [r4, #0]
    911e:	60a5      	str	r5, [r4, #8]
    9120:	4646      	mov	r6, r8
    9122:	4546      	cmp	r6, r8
    9124:	bf28      	it	cs
    9126:	4646      	movcs	r6, r8
    9128:	4632      	mov	r2, r6
    912a:	4649      	mov	r1, r9
    912c:	6820      	ldr	r0, [r4, #0]
    912e:	f000 faef 	bl	9710 <memmove>
    9132:	68a3      	ldr	r3, [r4, #8]
    9134:	1b9b      	subs	r3, r3, r6
    9136:	60a3      	str	r3, [r4, #8]
    9138:	6823      	ldr	r3, [r4, #0]
    913a:	441e      	add	r6, r3
    913c:	6026      	str	r6, [r4, #0]
    913e:	2000      	movs	r0, #0
    9140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9144:	462a      	mov	r2, r5
    9146:	f000 fafd 	bl	9744 <_realloc_r>
    914a:	4606      	mov	r6, r0
    914c:	2800      	cmp	r0, #0
    914e:	d1e1      	bne.n	9114 <__ssputs_r+0x70>
    9150:	6921      	ldr	r1, [r4, #16]
    9152:	4650      	mov	r0, sl
    9154:	f7ff fe82 	bl	8e5c <_free_r>
    9158:	e7c7      	b.n	90ea <__ssputs_r+0x46>
	...

0000915c <_svfiprintf_r>:
    915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9160:	b09d      	sub	sp, #116	; 0x74
    9162:	4680      	mov	r8, r0
    9164:	9303      	str	r3, [sp, #12]
    9166:	898b      	ldrh	r3, [r1, #12]
    9168:	061c      	lsls	r4, r3, #24
    916a:	460d      	mov	r5, r1
    916c:	4616      	mov	r6, r2
    916e:	d50f      	bpl.n	9190 <_svfiprintf_r+0x34>
    9170:	690b      	ldr	r3, [r1, #16]
    9172:	b96b      	cbnz	r3, 9190 <_svfiprintf_r+0x34>
    9174:	2140      	movs	r1, #64	; 0x40
    9176:	f7ff febf 	bl	8ef8 <_malloc_r>
    917a:	6028      	str	r0, [r5, #0]
    917c:	6128      	str	r0, [r5, #16]
    917e:	b928      	cbnz	r0, 918c <_svfiprintf_r+0x30>
    9180:	230c      	movs	r3, #12
    9182:	f8c8 3000 	str.w	r3, [r8]
    9186:	f04f 30ff 	mov.w	r0, #4294967295
    918a:	e0c5      	b.n	9318 <_svfiprintf_r+0x1bc>
    918c:	2340      	movs	r3, #64	; 0x40
    918e:	616b      	str	r3, [r5, #20]
    9190:	2300      	movs	r3, #0
    9192:	9309      	str	r3, [sp, #36]	; 0x24
    9194:	2320      	movs	r3, #32
    9196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    919a:	2330      	movs	r3, #48	; 0x30
    919c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    91a0:	f04f 0b01 	mov.w	fp, #1
    91a4:	4637      	mov	r7, r6
    91a6:	463c      	mov	r4, r7
    91a8:	f814 3b01 	ldrb.w	r3, [r4], #1
    91ac:	2b00      	cmp	r3, #0
    91ae:	d13c      	bne.n	922a <_svfiprintf_r+0xce>
    91b0:	ebb7 0a06 	subs.w	sl, r7, r6
    91b4:	d00b      	beq.n	91ce <_svfiprintf_r+0x72>
    91b6:	4653      	mov	r3, sl
    91b8:	4632      	mov	r2, r6
    91ba:	4629      	mov	r1, r5
    91bc:	4640      	mov	r0, r8
    91be:	f7ff ff71 	bl	90a4 <__ssputs_r>
    91c2:	3001      	adds	r0, #1
    91c4:	f000 80a3 	beq.w	930e <_svfiprintf_r+0x1b2>
    91c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91ca:	4453      	add	r3, sl
    91cc:	9309      	str	r3, [sp, #36]	; 0x24
    91ce:	783b      	ldrb	r3, [r7, #0]
    91d0:	2b00      	cmp	r3, #0
    91d2:	f000 809c 	beq.w	930e <_svfiprintf_r+0x1b2>
    91d6:	2300      	movs	r3, #0
    91d8:	f04f 32ff 	mov.w	r2, #4294967295
    91dc:	9304      	str	r3, [sp, #16]
    91de:	9307      	str	r3, [sp, #28]
    91e0:	9205      	str	r2, [sp, #20]
    91e2:	9306      	str	r3, [sp, #24]
    91e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    91e8:	931a      	str	r3, [sp, #104]	; 0x68
    91ea:	2205      	movs	r2, #5
    91ec:	7821      	ldrb	r1, [r4, #0]
    91ee:	4850      	ldr	r0, [pc, #320]	; (9330 <_svfiprintf_r+0x1d4>)
    91f0:	f000 fa3e 	bl	9670 <memchr>
    91f4:	1c67      	adds	r7, r4, #1
    91f6:	9b04      	ldr	r3, [sp, #16]
    91f8:	b9d8      	cbnz	r0, 9232 <_svfiprintf_r+0xd6>
    91fa:	06d9      	lsls	r1, r3, #27
    91fc:	bf44      	itt	mi
    91fe:	2220      	movmi	r2, #32
    9200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9204:	071a      	lsls	r2, r3, #28
    9206:	bf44      	itt	mi
    9208:	222b      	movmi	r2, #43	; 0x2b
    920a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    920e:	7822      	ldrb	r2, [r4, #0]
    9210:	2a2a      	cmp	r2, #42	; 0x2a
    9212:	d016      	beq.n	9242 <_svfiprintf_r+0xe6>
    9214:	9a07      	ldr	r2, [sp, #28]
    9216:	2100      	movs	r1, #0
    9218:	200a      	movs	r0, #10
    921a:	4627      	mov	r7, r4
    921c:	3401      	adds	r4, #1
    921e:	783b      	ldrb	r3, [r7, #0]
    9220:	3b30      	subs	r3, #48	; 0x30
    9222:	2b09      	cmp	r3, #9
    9224:	d951      	bls.n	92ca <_svfiprintf_r+0x16e>
    9226:	b1c9      	cbz	r1, 925c <_svfiprintf_r+0x100>
    9228:	e011      	b.n	924e <_svfiprintf_r+0xf2>
    922a:	2b25      	cmp	r3, #37	; 0x25
    922c:	d0c0      	beq.n	91b0 <_svfiprintf_r+0x54>
    922e:	4627      	mov	r7, r4
    9230:	e7b9      	b.n	91a6 <_svfiprintf_r+0x4a>
    9232:	4a3f      	ldr	r2, [pc, #252]	; (9330 <_svfiprintf_r+0x1d4>)
    9234:	1a80      	subs	r0, r0, r2
    9236:	fa0b f000 	lsl.w	r0, fp, r0
    923a:	4318      	orrs	r0, r3
    923c:	9004      	str	r0, [sp, #16]
    923e:	463c      	mov	r4, r7
    9240:	e7d3      	b.n	91ea <_svfiprintf_r+0x8e>
    9242:	9a03      	ldr	r2, [sp, #12]
    9244:	1d11      	adds	r1, r2, #4
    9246:	6812      	ldr	r2, [r2, #0]
    9248:	9103      	str	r1, [sp, #12]
    924a:	2a00      	cmp	r2, #0
    924c:	db01      	blt.n	9252 <_svfiprintf_r+0xf6>
    924e:	9207      	str	r2, [sp, #28]
    9250:	e004      	b.n	925c <_svfiprintf_r+0x100>
    9252:	4252      	negs	r2, r2
    9254:	f043 0302 	orr.w	r3, r3, #2
    9258:	9207      	str	r2, [sp, #28]
    925a:	9304      	str	r3, [sp, #16]
    925c:	783b      	ldrb	r3, [r7, #0]
    925e:	2b2e      	cmp	r3, #46	; 0x2e
    9260:	d10e      	bne.n	9280 <_svfiprintf_r+0x124>
    9262:	787b      	ldrb	r3, [r7, #1]
    9264:	2b2a      	cmp	r3, #42	; 0x2a
    9266:	f107 0101 	add.w	r1, r7, #1
    926a:	d132      	bne.n	92d2 <_svfiprintf_r+0x176>
    926c:	9b03      	ldr	r3, [sp, #12]
    926e:	1d1a      	adds	r2, r3, #4
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	9203      	str	r2, [sp, #12]
    9274:	2b00      	cmp	r3, #0
    9276:	bfb8      	it	lt
    9278:	f04f 33ff 	movlt.w	r3, #4294967295
    927c:	3702      	adds	r7, #2
    927e:	9305      	str	r3, [sp, #20]
    9280:	4c2c      	ldr	r4, [pc, #176]	; (9334 <_svfiprintf_r+0x1d8>)
    9282:	7839      	ldrb	r1, [r7, #0]
    9284:	2203      	movs	r2, #3
    9286:	4620      	mov	r0, r4
    9288:	f000 f9f2 	bl	9670 <memchr>
    928c:	b138      	cbz	r0, 929e <_svfiprintf_r+0x142>
    928e:	2340      	movs	r3, #64	; 0x40
    9290:	1b00      	subs	r0, r0, r4
    9292:	fa03 f000 	lsl.w	r0, r3, r0
    9296:	9b04      	ldr	r3, [sp, #16]
    9298:	4303      	orrs	r3, r0
    929a:	9304      	str	r3, [sp, #16]
    929c:	3701      	adds	r7, #1
    929e:	7839      	ldrb	r1, [r7, #0]
    92a0:	4825      	ldr	r0, [pc, #148]	; (9338 <_svfiprintf_r+0x1dc>)
    92a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    92a6:	2206      	movs	r2, #6
    92a8:	1c7e      	adds	r6, r7, #1
    92aa:	f000 f9e1 	bl	9670 <memchr>
    92ae:	2800      	cmp	r0, #0
    92b0:	d035      	beq.n	931e <_svfiprintf_r+0x1c2>
    92b2:	4b22      	ldr	r3, [pc, #136]	; (933c <_svfiprintf_r+0x1e0>)
    92b4:	b9fb      	cbnz	r3, 92f6 <_svfiprintf_r+0x19a>
    92b6:	9b03      	ldr	r3, [sp, #12]
    92b8:	3307      	adds	r3, #7
    92ba:	f023 0307 	bic.w	r3, r3, #7
    92be:	3308      	adds	r3, #8
    92c0:	9303      	str	r3, [sp, #12]
    92c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92c4:	444b      	add	r3, r9
    92c6:	9309      	str	r3, [sp, #36]	; 0x24
    92c8:	e76c      	b.n	91a4 <_svfiprintf_r+0x48>
    92ca:	fb00 3202 	mla	r2, r0, r2, r3
    92ce:	2101      	movs	r1, #1
    92d0:	e7a3      	b.n	921a <_svfiprintf_r+0xbe>
    92d2:	2300      	movs	r3, #0
    92d4:	9305      	str	r3, [sp, #20]
    92d6:	4618      	mov	r0, r3
    92d8:	240a      	movs	r4, #10
    92da:	460f      	mov	r7, r1
    92dc:	3101      	adds	r1, #1
    92de:	783a      	ldrb	r2, [r7, #0]
    92e0:	3a30      	subs	r2, #48	; 0x30
    92e2:	2a09      	cmp	r2, #9
    92e4:	d903      	bls.n	92ee <_svfiprintf_r+0x192>
    92e6:	2b00      	cmp	r3, #0
    92e8:	d0ca      	beq.n	9280 <_svfiprintf_r+0x124>
    92ea:	9005      	str	r0, [sp, #20]
    92ec:	e7c8      	b.n	9280 <_svfiprintf_r+0x124>
    92ee:	fb04 2000 	mla	r0, r4, r0, r2
    92f2:	2301      	movs	r3, #1
    92f4:	e7f1      	b.n	92da <_svfiprintf_r+0x17e>
    92f6:	ab03      	add	r3, sp, #12
    92f8:	9300      	str	r3, [sp, #0]
    92fa:	462a      	mov	r2, r5
    92fc:	4b10      	ldr	r3, [pc, #64]	; (9340 <_svfiprintf_r+0x1e4>)
    92fe:	a904      	add	r1, sp, #16
    9300:	4640      	mov	r0, r8
    9302:	f3af 8000 	nop.w
    9306:	f1b0 3fff 	cmp.w	r0, #4294967295
    930a:	4681      	mov	r9, r0
    930c:	d1d9      	bne.n	92c2 <_svfiprintf_r+0x166>
    930e:	89ab      	ldrh	r3, [r5, #12]
    9310:	065b      	lsls	r3, r3, #25
    9312:	f53f af38 	bmi.w	9186 <_svfiprintf_r+0x2a>
    9316:	9809      	ldr	r0, [sp, #36]	; 0x24
    9318:	b01d      	add	sp, #116	; 0x74
    931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    931e:	ab03      	add	r3, sp, #12
    9320:	9300      	str	r3, [sp, #0]
    9322:	462a      	mov	r2, r5
    9324:	4b06      	ldr	r3, [pc, #24]	; (9340 <_svfiprintf_r+0x1e4>)
    9326:	a904      	add	r1, sp, #16
    9328:	4640      	mov	r0, r8
    932a:	f000 f881 	bl	9430 <_printf_i>
    932e:	e7ea      	b.n	9306 <_svfiprintf_r+0x1aa>
    9330:	00009f58 	.word	0x00009f58
    9334:	00009f5e 	.word	0x00009f5e
    9338:	00009f62 	.word	0x00009f62
    933c:	00000000 	.word	0x00000000
    9340:	000090a5 	.word	0x000090a5

00009344 <_printf_common>:
    9344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9348:	4691      	mov	r9, r2
    934a:	461f      	mov	r7, r3
    934c:	688a      	ldr	r2, [r1, #8]
    934e:	690b      	ldr	r3, [r1, #16]
    9350:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9354:	4293      	cmp	r3, r2
    9356:	bfb8      	it	lt
    9358:	4613      	movlt	r3, r2
    935a:	f8c9 3000 	str.w	r3, [r9]
    935e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    9362:	4606      	mov	r6, r0
    9364:	460c      	mov	r4, r1
    9366:	b112      	cbz	r2, 936e <_printf_common+0x2a>
    9368:	3301      	adds	r3, #1
    936a:	f8c9 3000 	str.w	r3, [r9]
    936e:	6823      	ldr	r3, [r4, #0]
    9370:	0699      	lsls	r1, r3, #26
    9372:	bf42      	ittt	mi
    9374:	f8d9 3000 	ldrmi.w	r3, [r9]
    9378:	3302      	addmi	r3, #2
    937a:	f8c9 3000 	strmi.w	r3, [r9]
    937e:	6825      	ldr	r5, [r4, #0]
    9380:	f015 0506 	ands.w	r5, r5, #6
    9384:	d107      	bne.n	9396 <_printf_common+0x52>
    9386:	f104 0a19 	add.w	sl, r4, #25
    938a:	68e3      	ldr	r3, [r4, #12]
    938c:	f8d9 2000 	ldr.w	r2, [r9]
    9390:	1a9b      	subs	r3, r3, r2
    9392:	429d      	cmp	r5, r3
    9394:	db29      	blt.n	93ea <_printf_common+0xa6>
    9396:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    939a:	6822      	ldr	r2, [r4, #0]
    939c:	3300      	adds	r3, #0
    939e:	bf18      	it	ne
    93a0:	2301      	movne	r3, #1
    93a2:	0692      	lsls	r2, r2, #26
    93a4:	d42e      	bmi.n	9404 <_printf_common+0xc0>
    93a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    93aa:	4639      	mov	r1, r7
    93ac:	4630      	mov	r0, r6
    93ae:	47c0      	blx	r8
    93b0:	3001      	adds	r0, #1
    93b2:	d021      	beq.n	93f8 <_printf_common+0xb4>
    93b4:	6823      	ldr	r3, [r4, #0]
    93b6:	68e5      	ldr	r5, [r4, #12]
    93b8:	f8d9 2000 	ldr.w	r2, [r9]
    93bc:	f003 0306 	and.w	r3, r3, #6
    93c0:	2b04      	cmp	r3, #4
    93c2:	bf08      	it	eq
    93c4:	1aad      	subeq	r5, r5, r2
    93c6:	68a3      	ldr	r3, [r4, #8]
    93c8:	6922      	ldr	r2, [r4, #16]
    93ca:	bf0c      	ite	eq
    93cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    93d0:	2500      	movne	r5, #0
    93d2:	4293      	cmp	r3, r2
    93d4:	bfc4      	itt	gt
    93d6:	1a9b      	subgt	r3, r3, r2
    93d8:	18ed      	addgt	r5, r5, r3
    93da:	f04f 0900 	mov.w	r9, #0
    93de:	341a      	adds	r4, #26
    93e0:	454d      	cmp	r5, r9
    93e2:	d11b      	bne.n	941c <_printf_common+0xd8>
    93e4:	2000      	movs	r0, #0
    93e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    93ea:	2301      	movs	r3, #1
    93ec:	4652      	mov	r2, sl
    93ee:	4639      	mov	r1, r7
    93f0:	4630      	mov	r0, r6
    93f2:	47c0      	blx	r8
    93f4:	3001      	adds	r0, #1
    93f6:	d103      	bne.n	9400 <_printf_common+0xbc>
    93f8:	f04f 30ff 	mov.w	r0, #4294967295
    93fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9400:	3501      	adds	r5, #1
    9402:	e7c2      	b.n	938a <_printf_common+0x46>
    9404:	18e1      	adds	r1, r4, r3
    9406:	1c5a      	adds	r2, r3, #1
    9408:	2030      	movs	r0, #48	; 0x30
    940a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    940e:	4422      	add	r2, r4
    9410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    9414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    9418:	3302      	adds	r3, #2
    941a:	e7c4      	b.n	93a6 <_printf_common+0x62>
    941c:	2301      	movs	r3, #1
    941e:	4622      	mov	r2, r4
    9420:	4639      	mov	r1, r7
    9422:	4630      	mov	r0, r6
    9424:	47c0      	blx	r8
    9426:	3001      	adds	r0, #1
    9428:	d0e6      	beq.n	93f8 <_printf_common+0xb4>
    942a:	f109 0901 	add.w	r9, r9, #1
    942e:	e7d7      	b.n	93e0 <_printf_common+0x9c>

00009430 <_printf_i>:
    9430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9434:	4617      	mov	r7, r2
    9436:	7e0a      	ldrb	r2, [r1, #24]
    9438:	b085      	sub	sp, #20
    943a:	2a6e      	cmp	r2, #110	; 0x6e
    943c:	4698      	mov	r8, r3
    943e:	4606      	mov	r6, r0
    9440:	460c      	mov	r4, r1
    9442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9444:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    9448:	f000 80bc 	beq.w	95c4 <_printf_i+0x194>
    944c:	d81a      	bhi.n	9484 <_printf_i+0x54>
    944e:	2a63      	cmp	r2, #99	; 0x63
    9450:	d02e      	beq.n	94b0 <_printf_i+0x80>
    9452:	d80a      	bhi.n	946a <_printf_i+0x3a>
    9454:	2a00      	cmp	r2, #0
    9456:	f000 80c8 	beq.w	95ea <_printf_i+0x1ba>
    945a:	2a58      	cmp	r2, #88	; 0x58
    945c:	f000 808a 	beq.w	9574 <_printf_i+0x144>
    9460:	f104 0542 	add.w	r5, r4, #66	; 0x42
    9464:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    9468:	e02a      	b.n	94c0 <_printf_i+0x90>
    946a:	2a64      	cmp	r2, #100	; 0x64
    946c:	d001      	beq.n	9472 <_printf_i+0x42>
    946e:	2a69      	cmp	r2, #105	; 0x69
    9470:	d1f6      	bne.n	9460 <_printf_i+0x30>
    9472:	6821      	ldr	r1, [r4, #0]
    9474:	681a      	ldr	r2, [r3, #0]
    9476:	f011 0f80 	tst.w	r1, #128	; 0x80
    947a:	d023      	beq.n	94c4 <_printf_i+0x94>
    947c:	1d11      	adds	r1, r2, #4
    947e:	6019      	str	r1, [r3, #0]
    9480:	6813      	ldr	r3, [r2, #0]
    9482:	e027      	b.n	94d4 <_printf_i+0xa4>
    9484:	2a73      	cmp	r2, #115	; 0x73
    9486:	f000 80b4 	beq.w	95f2 <_printf_i+0x1c2>
    948a:	d808      	bhi.n	949e <_printf_i+0x6e>
    948c:	2a6f      	cmp	r2, #111	; 0x6f
    948e:	d02a      	beq.n	94e6 <_printf_i+0xb6>
    9490:	2a70      	cmp	r2, #112	; 0x70
    9492:	d1e5      	bne.n	9460 <_printf_i+0x30>
    9494:	680a      	ldr	r2, [r1, #0]
    9496:	f042 0220 	orr.w	r2, r2, #32
    949a:	600a      	str	r2, [r1, #0]
    949c:	e003      	b.n	94a6 <_printf_i+0x76>
    949e:	2a75      	cmp	r2, #117	; 0x75
    94a0:	d021      	beq.n	94e6 <_printf_i+0xb6>
    94a2:	2a78      	cmp	r2, #120	; 0x78
    94a4:	d1dc      	bne.n	9460 <_printf_i+0x30>
    94a6:	2278      	movs	r2, #120	; 0x78
    94a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    94ac:	496e      	ldr	r1, [pc, #440]	; (9668 <_printf_i+0x238>)
    94ae:	e064      	b.n	957a <_printf_i+0x14a>
    94b0:	681a      	ldr	r2, [r3, #0]
    94b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    94b6:	1d11      	adds	r1, r2, #4
    94b8:	6019      	str	r1, [r3, #0]
    94ba:	6813      	ldr	r3, [r2, #0]
    94bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    94c0:	2301      	movs	r3, #1
    94c2:	e0a3      	b.n	960c <_printf_i+0x1dc>
    94c4:	f011 0f40 	tst.w	r1, #64	; 0x40
    94c8:	f102 0104 	add.w	r1, r2, #4
    94cc:	6019      	str	r1, [r3, #0]
    94ce:	d0d7      	beq.n	9480 <_printf_i+0x50>
    94d0:	f9b2 3000 	ldrsh.w	r3, [r2]
    94d4:	2b00      	cmp	r3, #0
    94d6:	da03      	bge.n	94e0 <_printf_i+0xb0>
    94d8:	222d      	movs	r2, #45	; 0x2d
    94da:	425b      	negs	r3, r3
    94dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    94e0:	4962      	ldr	r1, [pc, #392]	; (966c <_printf_i+0x23c>)
    94e2:	220a      	movs	r2, #10
    94e4:	e017      	b.n	9516 <_printf_i+0xe6>
    94e6:	6820      	ldr	r0, [r4, #0]
    94e8:	6819      	ldr	r1, [r3, #0]
    94ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    94ee:	d003      	beq.n	94f8 <_printf_i+0xc8>
    94f0:	1d08      	adds	r0, r1, #4
    94f2:	6018      	str	r0, [r3, #0]
    94f4:	680b      	ldr	r3, [r1, #0]
    94f6:	e006      	b.n	9506 <_printf_i+0xd6>
    94f8:	f010 0f40 	tst.w	r0, #64	; 0x40
    94fc:	f101 0004 	add.w	r0, r1, #4
    9500:	6018      	str	r0, [r3, #0]
    9502:	d0f7      	beq.n	94f4 <_printf_i+0xc4>
    9504:	880b      	ldrh	r3, [r1, #0]
    9506:	4959      	ldr	r1, [pc, #356]	; (966c <_printf_i+0x23c>)
    9508:	2a6f      	cmp	r2, #111	; 0x6f
    950a:	bf14      	ite	ne
    950c:	220a      	movne	r2, #10
    950e:	2208      	moveq	r2, #8
    9510:	2000      	movs	r0, #0
    9512:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    9516:	6865      	ldr	r5, [r4, #4]
    9518:	60a5      	str	r5, [r4, #8]
    951a:	2d00      	cmp	r5, #0
    951c:	f2c0 809c 	blt.w	9658 <_printf_i+0x228>
    9520:	6820      	ldr	r0, [r4, #0]
    9522:	f020 0004 	bic.w	r0, r0, #4
    9526:	6020      	str	r0, [r4, #0]
    9528:	2b00      	cmp	r3, #0
    952a:	d13f      	bne.n	95ac <_printf_i+0x17c>
    952c:	2d00      	cmp	r5, #0
    952e:	f040 8095 	bne.w	965c <_printf_i+0x22c>
    9532:	4675      	mov	r5, lr
    9534:	2a08      	cmp	r2, #8
    9536:	d10b      	bne.n	9550 <_printf_i+0x120>
    9538:	6823      	ldr	r3, [r4, #0]
    953a:	07da      	lsls	r2, r3, #31
    953c:	d508      	bpl.n	9550 <_printf_i+0x120>
    953e:	6923      	ldr	r3, [r4, #16]
    9540:	6862      	ldr	r2, [r4, #4]
    9542:	429a      	cmp	r2, r3
    9544:	bfde      	ittt	le
    9546:	2330      	movle	r3, #48	; 0x30
    9548:	f805 3c01 	strble.w	r3, [r5, #-1]
    954c:	f105 35ff 	addle.w	r5, r5, #4294967295
    9550:	ebae 0305 	sub.w	r3, lr, r5
    9554:	6123      	str	r3, [r4, #16]
    9556:	f8cd 8000 	str.w	r8, [sp]
    955a:	463b      	mov	r3, r7
    955c:	aa03      	add	r2, sp, #12
    955e:	4621      	mov	r1, r4
    9560:	4630      	mov	r0, r6
    9562:	f7ff feef 	bl	9344 <_printf_common>
    9566:	3001      	adds	r0, #1
    9568:	d155      	bne.n	9616 <_printf_i+0x1e6>
    956a:	f04f 30ff 	mov.w	r0, #4294967295
    956e:	b005      	add	sp, #20
    9570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9574:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    9578:	493c      	ldr	r1, [pc, #240]	; (966c <_printf_i+0x23c>)
    957a:	6822      	ldr	r2, [r4, #0]
    957c:	6818      	ldr	r0, [r3, #0]
    957e:	f012 0f80 	tst.w	r2, #128	; 0x80
    9582:	f100 0504 	add.w	r5, r0, #4
    9586:	601d      	str	r5, [r3, #0]
    9588:	d001      	beq.n	958e <_printf_i+0x15e>
    958a:	6803      	ldr	r3, [r0, #0]
    958c:	e002      	b.n	9594 <_printf_i+0x164>
    958e:	0655      	lsls	r5, r2, #25
    9590:	d5fb      	bpl.n	958a <_printf_i+0x15a>
    9592:	8803      	ldrh	r3, [r0, #0]
    9594:	07d0      	lsls	r0, r2, #31
    9596:	bf44      	itt	mi
    9598:	f042 0220 	orrmi.w	r2, r2, #32
    959c:	6022      	strmi	r2, [r4, #0]
    959e:	b91b      	cbnz	r3, 95a8 <_printf_i+0x178>
    95a0:	6822      	ldr	r2, [r4, #0]
    95a2:	f022 0220 	bic.w	r2, r2, #32
    95a6:	6022      	str	r2, [r4, #0]
    95a8:	2210      	movs	r2, #16
    95aa:	e7b1      	b.n	9510 <_printf_i+0xe0>
    95ac:	4675      	mov	r5, lr
    95ae:	fbb3 f0f2 	udiv	r0, r3, r2
    95b2:	fb02 3310 	mls	r3, r2, r0, r3
    95b6:	5ccb      	ldrb	r3, [r1, r3]
    95b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    95bc:	4603      	mov	r3, r0
    95be:	2800      	cmp	r0, #0
    95c0:	d1f5      	bne.n	95ae <_printf_i+0x17e>
    95c2:	e7b7      	b.n	9534 <_printf_i+0x104>
    95c4:	6808      	ldr	r0, [r1, #0]
    95c6:	681a      	ldr	r2, [r3, #0]
    95c8:	6949      	ldr	r1, [r1, #20]
    95ca:	f010 0f80 	tst.w	r0, #128	; 0x80
    95ce:	d004      	beq.n	95da <_printf_i+0x1aa>
    95d0:	1d10      	adds	r0, r2, #4
    95d2:	6018      	str	r0, [r3, #0]
    95d4:	6813      	ldr	r3, [r2, #0]
    95d6:	6019      	str	r1, [r3, #0]
    95d8:	e007      	b.n	95ea <_printf_i+0x1ba>
    95da:	f010 0f40 	tst.w	r0, #64	; 0x40
    95de:	f102 0004 	add.w	r0, r2, #4
    95e2:	6018      	str	r0, [r3, #0]
    95e4:	6813      	ldr	r3, [r2, #0]
    95e6:	d0f6      	beq.n	95d6 <_printf_i+0x1a6>
    95e8:	8019      	strh	r1, [r3, #0]
    95ea:	2300      	movs	r3, #0
    95ec:	6123      	str	r3, [r4, #16]
    95ee:	4675      	mov	r5, lr
    95f0:	e7b1      	b.n	9556 <_printf_i+0x126>
    95f2:	681a      	ldr	r2, [r3, #0]
    95f4:	1d11      	adds	r1, r2, #4
    95f6:	6019      	str	r1, [r3, #0]
    95f8:	6815      	ldr	r5, [r2, #0]
    95fa:	6862      	ldr	r2, [r4, #4]
    95fc:	2100      	movs	r1, #0
    95fe:	4628      	mov	r0, r5
    9600:	f000 f836 	bl	9670 <memchr>
    9604:	b108      	cbz	r0, 960a <_printf_i+0x1da>
    9606:	1b40      	subs	r0, r0, r5
    9608:	6060      	str	r0, [r4, #4]
    960a:	6863      	ldr	r3, [r4, #4]
    960c:	6123      	str	r3, [r4, #16]
    960e:	2300      	movs	r3, #0
    9610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9614:	e79f      	b.n	9556 <_printf_i+0x126>
    9616:	6923      	ldr	r3, [r4, #16]
    9618:	462a      	mov	r2, r5
    961a:	4639      	mov	r1, r7
    961c:	4630      	mov	r0, r6
    961e:	47c0      	blx	r8
    9620:	3001      	adds	r0, #1
    9622:	d0a2      	beq.n	956a <_printf_i+0x13a>
    9624:	6823      	ldr	r3, [r4, #0]
    9626:	079b      	lsls	r3, r3, #30
    9628:	d507      	bpl.n	963a <_printf_i+0x20a>
    962a:	2500      	movs	r5, #0
    962c:	f104 0919 	add.w	r9, r4, #25
    9630:	68e3      	ldr	r3, [r4, #12]
    9632:	9a03      	ldr	r2, [sp, #12]
    9634:	1a9b      	subs	r3, r3, r2
    9636:	429d      	cmp	r5, r3
    9638:	db05      	blt.n	9646 <_printf_i+0x216>
    963a:	68e0      	ldr	r0, [r4, #12]
    963c:	9b03      	ldr	r3, [sp, #12]
    963e:	4298      	cmp	r0, r3
    9640:	bfb8      	it	lt
    9642:	4618      	movlt	r0, r3
    9644:	e793      	b.n	956e <_printf_i+0x13e>
    9646:	2301      	movs	r3, #1
    9648:	464a      	mov	r2, r9
    964a:	4639      	mov	r1, r7
    964c:	4630      	mov	r0, r6
    964e:	47c0      	blx	r8
    9650:	3001      	adds	r0, #1
    9652:	d08a      	beq.n	956a <_printf_i+0x13a>
    9654:	3501      	adds	r5, #1
    9656:	e7eb      	b.n	9630 <_printf_i+0x200>
    9658:	2b00      	cmp	r3, #0
    965a:	d1a7      	bne.n	95ac <_printf_i+0x17c>
    965c:	780b      	ldrb	r3, [r1, #0]
    965e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    9662:	f104 0542 	add.w	r5, r4, #66	; 0x42
    9666:	e765      	b.n	9534 <_printf_i+0x104>
    9668:	00009f7a 	.word	0x00009f7a
    966c:	00009f69 	.word	0x00009f69

00009670 <memchr>:
    9670:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9674:	2a10      	cmp	r2, #16
    9676:	db2b      	blt.n	96d0 <memchr+0x60>
    9678:	f010 0f07 	tst.w	r0, #7
    967c:	d008      	beq.n	9690 <memchr+0x20>
    967e:	f810 3b01 	ldrb.w	r3, [r0], #1
    9682:	3a01      	subs	r2, #1
    9684:	428b      	cmp	r3, r1
    9686:	d02d      	beq.n	96e4 <memchr+0x74>
    9688:	f010 0f07 	tst.w	r0, #7
    968c:	b342      	cbz	r2, 96e0 <memchr+0x70>
    968e:	d1f6      	bne.n	967e <memchr+0xe>
    9690:	b4f0      	push	{r4, r5, r6, r7}
    9692:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9696:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    969a:	f022 0407 	bic.w	r4, r2, #7
    969e:	f07f 0700 	mvns.w	r7, #0
    96a2:	2300      	movs	r3, #0
    96a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    96a8:	3c08      	subs	r4, #8
    96aa:	ea85 0501 	eor.w	r5, r5, r1
    96ae:	ea86 0601 	eor.w	r6, r6, r1
    96b2:	fa85 f547 	uadd8	r5, r5, r7
    96b6:	faa3 f587 	sel	r5, r3, r7
    96ba:	fa86 f647 	uadd8	r6, r6, r7
    96be:	faa5 f687 	sel	r6, r5, r7
    96c2:	b98e      	cbnz	r6, 96e8 <memchr+0x78>
    96c4:	d1ee      	bne.n	96a4 <memchr+0x34>
    96c6:	bcf0      	pop	{r4, r5, r6, r7}
    96c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    96cc:	f002 0207 	and.w	r2, r2, #7
    96d0:	b132      	cbz	r2, 96e0 <memchr+0x70>
    96d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    96d6:	3a01      	subs	r2, #1
    96d8:	ea83 0301 	eor.w	r3, r3, r1
    96dc:	b113      	cbz	r3, 96e4 <memchr+0x74>
    96de:	d1f8      	bne.n	96d2 <memchr+0x62>
    96e0:	2000      	movs	r0, #0
    96e2:	4770      	bx	lr
    96e4:	3801      	subs	r0, #1
    96e6:	4770      	bx	lr
    96e8:	2d00      	cmp	r5, #0
    96ea:	bf06      	itte	eq
    96ec:	4635      	moveq	r5, r6
    96ee:	3803      	subeq	r0, #3
    96f0:	3807      	subne	r0, #7
    96f2:	f015 0f01 	tst.w	r5, #1
    96f6:	d107      	bne.n	9708 <memchr+0x98>
    96f8:	3001      	adds	r0, #1
    96fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    96fe:	bf02      	ittt	eq
    9700:	3001      	addeq	r0, #1
    9702:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    9706:	3001      	addeq	r0, #1
    9708:	bcf0      	pop	{r4, r5, r6, r7}
    970a:	3801      	subs	r0, #1
    970c:	4770      	bx	lr
    970e:	bf00      	nop

00009710 <memmove>:
    9710:	4288      	cmp	r0, r1
    9712:	b510      	push	{r4, lr}
    9714:	eb01 0302 	add.w	r3, r1, r2
    9718:	d803      	bhi.n	9722 <memmove+0x12>
    971a:	1e42      	subs	r2, r0, #1
    971c:	4299      	cmp	r1, r3
    971e:	d10c      	bne.n	973a <memmove+0x2a>
    9720:	bd10      	pop	{r4, pc}
    9722:	4298      	cmp	r0, r3
    9724:	d2f9      	bcs.n	971a <memmove+0xa>
    9726:	1881      	adds	r1, r0, r2
    9728:	1ad2      	subs	r2, r2, r3
    972a:	42d3      	cmn	r3, r2
    972c:	d100      	bne.n	9730 <memmove+0x20>
    972e:	bd10      	pop	{r4, pc}
    9730:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    9734:	f801 4d01 	strb.w	r4, [r1, #-1]!
    9738:	e7f7      	b.n	972a <memmove+0x1a>
    973a:	f811 4b01 	ldrb.w	r4, [r1], #1
    973e:	f802 4f01 	strb.w	r4, [r2, #1]!
    9742:	e7eb      	b.n	971c <memmove+0xc>

00009744 <_realloc_r>:
    9744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9746:	4607      	mov	r7, r0
    9748:	4614      	mov	r4, r2
    974a:	460e      	mov	r6, r1
    974c:	b921      	cbnz	r1, 9758 <_realloc_r+0x14>
    974e:	4611      	mov	r1, r2
    9750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9754:	f7ff bbd0 	b.w	8ef8 <_malloc_r>
    9758:	b922      	cbnz	r2, 9764 <_realloc_r+0x20>
    975a:	f7ff fb7f 	bl	8e5c <_free_r>
    975e:	4625      	mov	r5, r4
    9760:	4628      	mov	r0, r5
    9762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9764:	f000 f814 	bl	9790 <_malloc_usable_size_r>
    9768:	4284      	cmp	r4, r0
    976a:	d90f      	bls.n	978c <_realloc_r+0x48>
    976c:	4621      	mov	r1, r4
    976e:	4638      	mov	r0, r7
    9770:	f7ff fbc2 	bl	8ef8 <_malloc_r>
    9774:	4605      	mov	r5, r0
    9776:	2800      	cmp	r0, #0
    9778:	d0f2      	beq.n	9760 <_realloc_r+0x1c>
    977a:	4631      	mov	r1, r6
    977c:	4622      	mov	r2, r4
    977e:	f7ff fb59 	bl	8e34 <memcpy>
    9782:	4631      	mov	r1, r6
    9784:	4638      	mov	r0, r7
    9786:	f7ff fb69 	bl	8e5c <_free_r>
    978a:	e7e9      	b.n	9760 <_realloc_r+0x1c>
    978c:	4635      	mov	r5, r6
    978e:	e7e7      	b.n	9760 <_realloc_r+0x1c>

00009790 <_malloc_usable_size_r>:
    9790:	f851 0c04 	ldr.w	r0, [r1, #-4]
    9794:	2800      	cmp	r0, #0
    9796:	f1a0 0004 	sub.w	r0, r0, #4
    979a:	bfbc      	itt	lt
    979c:	580b      	ldrlt	r3, [r1, r0]
    979e:	18c0      	addlt	r0, r0, r3
    97a0:	4770      	bx	lr
    97a2:	0000      	movs	r0, r0
    97a4:	682f2e2e 	.word	0x682f2e2e
    97a8:	732f6c61 	.word	0x732f6c61
    97ac:	682f6372 	.word	0x682f6372
    97b0:	615f6c61 	.word	0x615f6c61
    97b4:	615f6364 	.word	0x615f6364
    97b8:	636e7973 	.word	0x636e7973
    97bc:	0000632e 	.word	0x0000632e
    97c0:	682f2e2e 	.word	0x682f2e2e
    97c4:	732f6c61 	.word	0x732f6c61
    97c8:	682f6372 	.word	0x682f6372
    97cc:	635f6c61 	.word	0x635f6c61
    97d0:	735f6372 	.word	0x735f6372
    97d4:	2e636e79 	.word	0x2e636e79
    97d8:	00000063 	.word	0x00000063
    97dc:	682f2e2e 	.word	0x682f2e2e
    97e0:	732f6c61 	.word	0x732f6c61
    97e4:	682f6372 	.word	0x682f6372
    97e8:	665f6c61 	.word	0x665f6c61
    97ec:	6873616c 	.word	0x6873616c
    97f0:	0000632e 	.word	0x0000632e
    97f4:	682f2e2e 	.word	0x682f2e2e
    97f8:	732f6c61 	.word	0x732f6c61
    97fc:	682f6372 	.word	0x682f6372
    9800:	695f6c61 	.word	0x695f6c61
    9804:	6d5f6332 	.word	0x6d5f6332
    9808:	7973615f 	.word	0x7973615f
    980c:	632e636e 	.word	0x632e636e
    9810:	00000000 	.word	0x00000000
    9814:	682f2e2e 	.word	0x682f2e2e
    9818:	732f6c61 	.word	0x732f6c61
    981c:	682f6372 	.word	0x682f6372
    9820:	695f6c61 	.word	0x695f6c61
    9824:	00632e6f 	.word	0x00632e6f
    9828:	682f2e2e 	.word	0x682f2e2e
    982c:	732f6c61 	.word	0x732f6c61
    9830:	682f6372 	.word	0x682f6372
    9834:	735f6c61 	.word	0x735f6c61
    9838:	6d5f6970 	.word	0x6d5f6970
    983c:	616d645f 	.word	0x616d645f
    9840:	0000632e 	.word	0x0000632e
    9844:	682f2e2e 	.word	0x682f2e2e
    9848:	732f6c61 	.word	0x732f6c61
    984c:	682f6372 	.word	0x682f6372
    9850:	735f6c61 	.word	0x735f6c61
    9854:	6d5f6970 	.word	0x6d5f6970
    9858:	6e79735f 	.word	0x6e79735f
    985c:	00632e63 	.word	0x00632e63
    9860:	682f2e2e 	.word	0x682f2e2e
    9864:	732f6c61 	.word	0x732f6c61
    9868:	682f6372 	.word	0x682f6372
    986c:	745f6c61 	.word	0x745f6c61
    9870:	72656d69 	.word	0x72656d69
    9874:	0000632e 	.word	0x0000632e
    9878:	682f2e2e 	.word	0x682f2e2e
    987c:	732f6c61 	.word	0x732f6c61
    9880:	682f6372 	.word	0x682f6372
    9884:	755f6c61 	.word	0x755f6c61
    9888:	74726173 	.word	0x74726173
    988c:	7973615f 	.word	0x7973615f
    9890:	632e636e 	.word	0x632e636e
    9894:	00000000 	.word	0x00000000
    9898:	682f2e2e 	.word	0x682f2e2e
    989c:	752f6c61 	.word	0x752f6c61
    98a0:	736c6974 	.word	0x736c6974
    98a4:	6372732f 	.word	0x6372732f
    98a8:	6974752f 	.word	0x6974752f
    98ac:	6c5f736c 	.word	0x6c5f736c
    98b0:	2e747369 	.word	0x2e747369
    98b4:	00000063 	.word	0x00000063
    98b8:	682f2e2e 	.word	0x682f2e2e
    98bc:	752f6c61 	.word	0x752f6c61
    98c0:	736c6974 	.word	0x736c6974
    98c4:	6372732f 	.word	0x6372732f
    98c8:	6974752f 	.word	0x6974752f
    98cc:	725f736c 	.word	0x725f736c
    98d0:	62676e69 	.word	0x62676e69
    98d4:	65666675 	.word	0x65666675
    98d8:	00632e72 	.word	0x00632e72

000098dc <_adcs>:
    98dc:	01000000 0003000c 00041807 00000000     ................
    98ec:	0014080b 00010000 000c0100 18040003     ................
    98fc:	00000004 080b0000 00000014 682f2e2e     ............../h
    990c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    991c:	00000000                                ....

00009920 <_cfgs>:
    9920:	00200600 08068000 00200400 08068000     .. ....... .....
    9930:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    9960:	00201300 14000000 00000000 00000000     .. .............
	...

00009a20 <user_mux_confs>:
	...
    9a4c:	04030201 04030201 00000000 00000000     ................
	...

00009a64 <channel_confs>:
    9a64:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

00009aa4 <interrupt_cfg>:
    9aa4:	00000002 00000002 00000002 00000002     ................
	...
    9b24:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    9b34:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    9b44:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    9b54:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    9b64:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    9b74:	43000800 43000c00                       ...C...C

00009b7c <_usarts>:
    9b7c:	00000000 40100004 00030000 00700002     .......@......p.
    9b8c:	0000aaaa 00000000 00000001 40100004     ...............@
    9b9c:	00030000 00700002 0000aaaa 00000000     ......p.........
    9bac:	00000002 40100004 00030000 00700002     .......@......p.
    9bbc:	0000f62b 00000000 00000004 40100004     +..............@
    9bcc:	00030000 00700002 0000aaaa 00000000     ......p.........
    9bdc:	00000006 40100004 00030000 00700002     .......@......p.
    9bec:	0000aaaa 00000000                       ........

00009bf4 <_i2cms>:
    9bf4:	00000005 00200014 00000100 0000e6e5     ...... .........
    9c04:	00d70000 02dc6c00                       .....l..

00009c0c <sercomspi_regs>:
    9c0c:	0020000c 00020000 00000000 01ff00fe     .. .............
    9c1c:	20000c03 00000000 00000000 ff000600     ... ............
    9c2c:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    9c3c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    9c4c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    9c5c:	42001400 42001800 43001400 43001800     ...B...B...C...C

00009c6c <_tcs>:
    9c6c:	006b0000 00000308 00000021 00003a9d     ..k.....!....:..
    9c7c:	00000000 006c0001 00000308 00000021     ......l.....!...
    9c8c:	00003a9d 00000000 006d0002 00000308     .:........m.....
    9c9c:	00000021 00003a9d 00000000 006e0003     !....:........n.
    9cac:	00000308 00000021 00003a9d 00000000     ....!....:......
    9cbc:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    9ccc:	0000632e                                .c..

00009cd0 <_usb_ep_cfgs>:
    9cd0:	20000bfc 00000000 00000040 00000000     ... ....@.......
	...
    9ce8:	20000bf4 00000000 00000008 20000bb4     ... ........... 
    9cf8:	00000000 00000040 00000000 00000000     ....@...........
	...

00009d18 <grid_module_mux_lookup>:
    9d18:	05040100 0d0c0908 07060302 0f0e0b0a     ................
    9d28:	504f4f4c 4b434954 32302520 45520a78     LOOPTICK %02x.RE
    9d38:	49544c41 2520454d 0a783230 4b534154     ALTIME %02x.TASK
    9d48:	30252030 540a7832 314b5341 32302520     0 %02x.TASK1 %02
    9d58:	41540a78 20324b53 78323025 5341540a     x.TASK2 %02x.TAS
    9d68:	2520334b 0a783230 4b534154 30252034     K3 %02x.TASK4 %0
    9d78:	000a7832 00000000 58525f4e 2520435f     2x......N_RX_C %
    9d88:	0a783230 58525f45 2520435f 0a783230     02x.E_RX_C %02x.
    9d98:	58525f53 2520435f 0a783230 58525f57     S_RX_C %02x.W_RX
    9da8:	2520435f 0a783230 58545f4e 2520435f     _C %02x.N_TX_C %
    9db8:	0a783230 58545f45 2520435f 0a783230     02x.E_TX_C %02x.
    9dc8:	58545f53 2520435f 0a783230 58545f57     S_TX_C %02x.W_TX
    9dd8:	2520435f 0a783230 45425f4e 435f4c4c     _C %02x.N_BELL_C
    9de8:	32302520 5f450a78 4c4c4542 2520435f      %02x.E_BELL_C %
    9df8:	0a783230 45425f53 435f4c4c 32302520     02x.S_BELL_C %02
    9e08:	5f570a78 4c4c4542 2520435f 0a783230     x.W_BELL_C %02x.
	...

00009e1a <grid_module_din_buffer_size>:
	...

00009e1b <grid_module_ain_buffer_size>:
    9e1b:	00001010                                         .

00009e1c <grid_module_led_buffer_size>:
    9e1c:	00000010 63256325 63256325 78383025     ....%c%c%c%c%08x
    9e2c:	00006325 78323025 0000000a 63256325     %c..%02x....%c%c
    9e3c:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
    9e4c:	00006325 78256325 78323025 78323025     %c..%c%x%02x%02x
    9e5c:	78323025 78323025 00006325 78323025     %02x%02x%c..%02x
    9e6c:	00000000                                ....

00009e70 <keyboard_report_desc>:
    9e70:	06090105 070501a1 e729e019 01250015     ..........)...%.
    9e80:	08950175 01810281 65290019 65250015     u.........)e..%e
    9e90:	06950875 08050081 05290119 01250015     u.........)...%.
    9ea0:	05950175 03950291 00c00191              u...........

00009eac <mouse_report_desc>:
    9eac:	02090105 010901a1 090500a1 03290119     ..............).
    9ebc:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    9ecc:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    9edc:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    9eec:	73752f65 2e636462 00000063              e/usbdc.c...

00009ef8 <__sf_fake_stderr>:
	...

00009f18 <__sf_fake_stdin>:
	...

00009f38 <__sf_fake_stdout>:
	...
    9f58:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9f68:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9f78:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9f88:	00006665                                ef..

00009f8c <_init>:
    9f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f8e:	bf00      	nop
    9f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9f92:	bc08      	pop	{r3}
    9f94:	469e      	mov	lr, r3
    9f96:	4770      	bx	lr

00009f98 <__init_array_start>:
    9f98:	00000289 	.word	0x00000289

00009f9c <_fini>:
    9f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f9e:	bf00      	nop
    9fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9fa2:	bc08      	pop	{r3}
    9fa4:	469e      	mov	lr, r3
    9fa6:	4770      	bx	lr

00009fa8 <__fini_array_start>:
    9fa8:	00000265 	.word	0x00000265
