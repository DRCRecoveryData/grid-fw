
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a2c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004c8  20000000  00009a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204c8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204c8  2**0
                  CONTENTS
  4 .bss          00002590  200004d0  00009f00  000204d0  2**4
                  ALLOC
  5 .stack        00010000  20002a60  0000c490  000204d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00060e6f  00000000  00000000  0002054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008125  00000000  00000000  000813be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025a29  00000000  00000000  000894e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cd0  00000000  00000000  000aef0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002860  00000000  00000000  000b0bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003be97  00000000  00000000  000b343c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a4bc  00000000  00000000  000ef2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011737b  00000000  00000000  0011978f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000528c  00000000  00000000  00230b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 2a 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     `*. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	61 2f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     a/..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 25 2c 00 00 39 2c 00 00     ........%,..9,..
      bc:	5d 2a 00 00 69 2a 00 00 75 2a 00 00 81 2a 00 00     ]*..i*..u*...*..
      cc:	8d 2a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .*..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	95 2d 00 00 91 38 00 00 a5 38 00 00 b9 38 00 00     .-...8...8...8..
     104:	cd 38 00 00 e1 38 00 00 f5 38 00 00 09 39 00 00     .8...8...8...9..
     114:	1d 39 00 00 31 39 00 00 45 39 00 00 59 39 00 00     .9..19..E9..Y9..
     124:	6d 39 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     m9..............
     134:	e5 02 00 00 81 39 00 00 95 39 00 00 a9 39 00 00     .....9...9...9..
     144:	bd 39 00 00 d1 39 00 00 e5 39 00 00 f9 39 00 00     .9...9...9...9..
     154:	0d 3a 00 00 21 3a 00 00 35 3a 00 00 49 3a 00 00     .:..!:..5:..I:..
     164:	5d 3a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ]:..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 c9 57 00 00     .............W..
     184:	d5 57 00 00 e1 57 00 00 ed 57 00 00 00 00 00 00     .W...W...W......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 dd 44 00 00     .............D..
     1f4:	e5 02 00 00 e5 02 00 00 f1 44 00 00 e5 02 00 00     .........D......
     204:	05 45 00 00 19 45 00 00 e5 02 00 00 e5 02 00 00     .E...E..........
     214:	e5 02 00 00 f1 26 00 00 05 27 00 00 19 27 00 00     .....&...'...'..
     224:	2d 27 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     -'..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004d0 	.word	0x200004d0
     280:	00000000 	.word	0x00000000
     284:	00009a2c 	.word	0x00009a2c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00009a2c 	.word	0x00009a2c
     2c4:	200004d4 	.word	0x200004d4
     2c8:	00009a2c 	.word	0x00009a2c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	00008845 	.word	0x00008845

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00009a2c 	.word	0x00009a2c
     364:	200004c8 	.word	0x200004c8
     368:	20002a60 	.word	0x20002a60
     36c:	200004d0 	.word	0x200004d0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00008851 	.word	0x00008851
     37c:	00006e61 	.word	0x00006e61

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200004ec 	.word	0x200004ec
     400:	20001384 	.word	0x20001384
     404:	2000147c 	.word	0x2000147c
     408:	43001c00 	.word	0x43001c00
     40c:	00000f31 	.word	0x00000f31
     410:	00000fd5 	.word	0x00000fd5
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200004ec 	.word	0x200004ec
     4a4:	20001554 	.word	0x20001554
     4a8:	200012dc 	.word	0x200012dc
     4ac:	43002000 	.word	0x43002000
     4b0:	00000f31 	.word	0x00000f31
     4b4:	00000fd5 	.word	0x00000fd5
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	200012d8 	.word	0x200012d8
     4e0:	00001271 	.word	0x00001271

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	000012f5 	.word	0x000012f5

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	200012bc 	.word	0x200012bc
     544:	00001315 	.word	0x00001315

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	20000514 	.word	0x20000514
     5dc:	40003000 	.word	0x40003000
     5e0:	200013b0 	.word	0x200013b0
     5e4:	00001acd 	.word	0x00001acd
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	20000524 	.word	0x20000524
     680:	40003400 	.word	0x40003400
     684:	20001400 	.word	0x20001400
     688:	00001acd 	.word	0x00001acd
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	20000534 	.word	0x20000534
     724:	41012000 	.word	0x41012000
     728:	20001334 	.word	0x20001334
     72c:	00001acd 	.word	0x00001acd
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2240      	movs	r2, #64	; 0x40
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_sync_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	20001264 	.word	0x20001264
     838:	000015c9 	.word	0x000015c9
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	20000544 	.word	0x20000544
     8d8:	200014b4 	.word	0x200014b4
     8dc:	00001acd 	.word	0x00001acd
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	200012f4 	.word	0x200012f4
     988:	000013f5 	.word	0x000013f5
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000554 	.word	0x20000554
     a24:	43000800 	.word	0x43000800
     a28:	20001504 	.word	0x20001504
     a2c:	00001acd 	.word	0x00001acd
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	20001450 	.word	0x20001450
     b30:	000014f9 	.word	0x000014f9
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	000012a1 	.word	0x000012a1

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00001e79 	.word	0x00001e79
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4b82      	ldr	r3, [pc, #520]	; (e24 <system_init+0x210>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4b82      	ldr	r3, [pc, #520]	; (e28 <system_init+0x214>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c40:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c44:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c48:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c4c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c54:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c58:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5c:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c64:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c68:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c6c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
     c70:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     c74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c78:	f893 00ce 	ldrb.w	r0, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     c7c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c80:	f883 00ce 	strb.w	r0, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     c88:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c8c:	4867      	ldr	r0, [pc, #412]	; (e2c <system_init+0x218>)
     c8e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     c92:	4c67      	ldr	r4, [pc, #412]	; (e30 <system_init+0x21c>)
     c94:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c98:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     c9c:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     ca0:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca4:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     ca8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cac:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
     cb4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cb8:	4e5e      	ldr	r6, [pc, #376]	; (e34 <system_init+0x220>)
     cba:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     cbe:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cc2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cc6:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
     cca:	f044 0404 	orr.w	r4, r4, #4
     cce:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cd2:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cd6:	f893 014b 	ldrb.w	r0, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     cda:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cde:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ce2:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ce6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cea:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     cee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf2:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cfa:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d02:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d0e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d12:	4949      	ldr	r1, [pc, #292]	; (e38 <system_init+0x224>)
     d14:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d18:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d20:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d24:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     d28:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d2c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d30:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d34:	4941      	ldr	r1, [pc, #260]	; (e3c <system_init+0x228>)
     d36:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d3a:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d42:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     d4a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d4e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d56:	4a3a      	ldr	r2, [pc, #232]	; (e40 <system_init+0x22c>)
     d58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d5c:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d64:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     d68:	4b36      	ldr	r3, [pc, #216]	; (e44 <system_init+0x230>)
     d6a:	4798      	blx	r3
	ADC_1_init();
     d6c:	4b36      	ldr	r3, [pc, #216]	; (e48 <system_init+0x234>)
     d6e:	4798      	blx	r3

	CRC_0_init();
     d70:	4b36      	ldr	r3, [pc, #216]	; (e4c <system_init+0x238>)
     d72:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     d74:	4b36      	ldr	r3, [pc, #216]	; (e50 <system_init+0x23c>)
     d76:	4798      	blx	r3

	FLASH_0_init();
     d78:	4b36      	ldr	r3, [pc, #216]	; (e54 <system_init+0x240>)
     d7a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     d7c:	4c36      	ldr	r4, [pc, #216]	; (e58 <system_init+0x244>)
     d7e:	6963      	ldr	r3, [r4, #20]
     d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     d84:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     d86:	4b35      	ldr	r3, [pc, #212]	; (e5c <system_init+0x248>)
     d88:	4798      	blx	r3
     d8a:	4602      	mov	r2, r0
     d8c:	4934      	ldr	r1, [pc, #208]	; (e60 <system_init+0x24c>)
     d8e:	4835      	ldr	r0, [pc, #212]	; (e64 <system_init+0x250>)
     d90:	4d35      	ldr	r5, [pc, #212]	; (e68 <system_init+0x254>)
     d92:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     d94:	4b35      	ldr	r3, [pc, #212]	; (e6c <system_init+0x258>)
     d96:	4798      	blx	r3
	USART_NORTH_init();
     d98:	4b35      	ldr	r3, [pc, #212]	; (e70 <system_init+0x25c>)
     d9a:	4798      	blx	r3
	GRID_AUX_init();
     d9c:	4b35      	ldr	r3, [pc, #212]	; (e74 <system_init+0x260>)
     d9e:	4798      	blx	r3

	UI_SPI_init();
     da0:	4b35      	ldr	r3, [pc, #212]	; (e78 <system_init+0x264>)
     da2:	4798      	blx	r3
	USART_WEST_init();
     da4:	4b35      	ldr	r3, [pc, #212]	; (e7c <system_init+0x268>)
     da6:	4798      	blx	r3

	SYS_I2C_init();
     da8:	4b35      	ldr	r3, [pc, #212]	; (e80 <system_init+0x26c>)
     daa:	4798      	blx	r3
	USART_SOUTH_init();
     dac:	4b35      	ldr	r3, [pc, #212]	; (e84 <system_init+0x270>)
     dae:	4798      	blx	r3

	GRID_LED_init();
     db0:	4b35      	ldr	r3, [pc, #212]	; (e88 <system_init+0x274>)
     db2:	4798      	blx	r3

	delay_driver_init();
     db4:	4b35      	ldr	r3, [pc, #212]	; (e8c <system_init+0x278>)
     db6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     db8:	6963      	ldr	r3, [r4, #20]
     dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     dbe:	6163      	str	r3, [r4, #20]
     dc0:	4f33      	ldr	r7, [pc, #204]	; (e90 <system_init+0x27c>)
     dc2:	f04f 0843 	mov.w	r8, #67	; 0x43
     dc6:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     dca:	4e32      	ldr	r6, [pc, #200]	; (e94 <system_init+0x280>)
     dcc:	47b0      	blx	r6
     dce:	4602      	mov	r2, r0
     dd0:	4931      	ldr	r1, [pc, #196]	; (e98 <system_init+0x284>)
     dd2:	4832      	ldr	r0, [pc, #200]	; (e9c <system_init+0x288>)
     dd4:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     dd6:	69e3      	ldr	r3, [r4, #28]
     dd8:	f043 0320 	orr.w	r3, r3, #32
     ddc:	61e3      	str	r3, [r4, #28]
     dde:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_0, TC4, _tc_get_timer());
     de2:	47b0      	blx	r6
     de4:	4602      	mov	r2, r0
     de6:	492e      	ldr	r1, [pc, #184]	; (ea0 <system_init+0x28c>)
     de8:	482e      	ldr	r0, [pc, #184]	; (ea4 <system_init+0x290>)
     dea:	47a8      	blx	r5
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     dec:	6a23      	ldr	r3, [r4, #32]
     dee:	f043 0320 	orr.w	r3, r3, #32
     df2:	6223      	str	r3, [r4, #32]
     df4:	f8c7 811c 	str.w	r8, [r7, #284]	; 0x11c
	timer_init(&TIMER_2, TC6, _tc_get_timer());
     df8:	47b0      	blx	r6
     dfa:	4602      	mov	r2, r0
     dfc:	492a      	ldr	r1, [pc, #168]	; (ea8 <system_init+0x294>)
     dfe:	482b      	ldr	r0, [pc, #172]	; (eac <system_init+0x298>)
     e00:	47a8      	blx	r5
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     e02:	6a23      	ldr	r3, [r4, #32]
     e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e08:	6223      	str	r3, [r4, #32]
     e0a:	2340      	movs	r3, #64	; 0x40
     e0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	timer_init(&TIMER_3, TC7, _tc_get_timer());
     e10:	47b0      	blx	r6
     e12:	4602      	mov	r2, r0
     e14:	4926      	ldr	r1, [pc, #152]	; (eb0 <system_init+0x29c>)
     e16:	4827      	ldr	r0, [pc, #156]	; (eb4 <system_init+0x2a0>)
     e18:	47a8      	blx	r5

	TIMER_1_init();
	TIMER_0_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e1a:	4b27      	ldr	r3, [pc, #156]	; (eb8 <system_init+0x2a4>)
     e1c:	4798      	blx	r3
     e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e22:	bf00      	nop
     e24:	00002771 	.word	0x00002771
     e28:	41008000 	.word	0x41008000
     e2c:	40028000 	.word	0x40028000
     e30:	c0020000 	.word	0xc0020000
     e34:	40020800 	.word	0x40020800
     e38:	c0000008 	.word	0xc0000008
     e3c:	c0000010 	.word	0xc0000010
     e40:	c0000020 	.word	0xc0000020
     e44:	00000381 	.word	0x00000381
     e48:	00000419 	.word	0x00000419
     e4c:	000004bd 	.word	0x000004bd
     e50:	000004e5 	.word	0x000004e5
     e54:	00000529 	.word	0x00000529
     e58:	40000800 	.word	0x40000800
     e5c:	00002f59 	.word	0x00002f59
     e60:	40002400 	.word	0x40002400
     e64:	2000127c 	.word	0x2000127c
     e68:	000017a9 	.word	0x000017a9
     e6c:	000005b5 	.word	0x000005b5
     e70:	00000659 	.word	0x00000659
     e74:	000006fd 	.word	0x000006fd
     e78:	00000819 	.word	0x00000819
     e7c:	000008ad 	.word	0x000008ad
     e80:	00000969 	.word	0x00000969
     e84:	000009fd 	.word	0x000009fd
     e88:	00000b11 	.word	0x00000b11
     e8c:	00000b39 	.word	0x00000b39
     e90:	40001c00 	.word	0x40001c00
     e94:	000044d5 	.word	0x000044d5
     e98:	40003c00 	.word	0x40003c00
     e9c:	20001494 	.word	0x20001494
     ea0:	42001400 	.word	0x42001400
     ea4:	200015a0 	.word	0x200015a0
     ea8:	43001400 	.word	0x43001400
     eac:	2000129c 	.word	0x2000129c
     eb0:	43001800 	.word	0x43001800
     eb4:	20001580 	.word	0x20001580
     eb8:	00000bf9 	.word	0x00000bf9

00000ebc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     ebc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     ebe:	6983      	ldr	r3, [r0, #24]
     ec0:	b103      	cbz	r3, ec4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     ec2:	4798      	blx	r3
     ec4:	bd08      	pop	{r3, pc}

00000ec6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     ec6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     ec8:	69c3      	ldr	r3, [r0, #28]
     eca:	b103      	cbz	r3, ece <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     ecc:	4798      	blx	r3
     ece:	bd08      	pop	{r3, pc}

00000ed0 <adc_async_channel_conversion_done>:
{
     ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ed4:	4606      	mov	r6, r0
     ed6:	460f      	mov	r7, r1
     ed8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     eda:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     edc:	5c5c      	ldrb	r4, [r3, r1]
     ede:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     ee2:	00e4      	lsls	r4, r4, #3
     ee4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     ee8:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     eec:	f105 0a04 	add.w	sl, r5, #4
     ef0:	b2d1      	uxtb	r1, r2
     ef2:	4650      	mov	r0, sl
     ef4:	4b0c      	ldr	r3, [pc, #48]	; (f28 <adc_async_channel_conversion_done+0x58>)
     ef6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     ef8:	4630      	mov	r0, r6
     efa:	4b0c      	ldr	r3, [pc, #48]	; (f2c <adc_async_channel_conversion_done+0x5c>)
     efc:	4798      	blx	r3
     efe:	2801      	cmp	r0, #1
     f00:	d907      	bls.n	f12 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     f02:	ea4f 2119 	mov.w	r1, r9, lsr #8
     f06:	4650      	mov	r0, sl
     f08:	4b07      	ldr	r3, [pc, #28]	; (f28 <adc_async_channel_conversion_done+0x58>)
     f0a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     f0c:	8aab      	ldrh	r3, [r5, #20]
     f0e:	3301      	adds	r3, #1
     f10:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     f12:	8aab      	ldrh	r3, [r5, #20]
     f14:	3301      	adds	r3, #1
     f16:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     f18:	f858 3004 	ldr.w	r3, [r8, r4]
     f1c:	b113      	cbz	r3, f24 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     f1e:	4639      	mov	r1, r7
     f20:	4630      	mov	r0, r6
     f22:	4798      	blx	r3
     f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f28:	00002301 	.word	0x00002301
     f2c:	00002687 	.word	0x00002687

00000f30 <adc_async_init>:
{
     f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f34:	4689      	mov	r9, r1
     f36:	4616      	mov	r6, r2
     f38:	461c      	mov	r4, r3
     f3a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     f3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     f40:	4607      	mov	r7, r0
     f42:	b140      	cbz	r0, f56 <adc_async_init+0x26>
     f44:	b149      	cbz	r1, f5a <adc_async_init+0x2a>
     f46:	b152      	cbz	r2, f5e <adc_async_init+0x2e>
     f48:	f1b8 0f00 	cmp.w	r8, #0
     f4c:	d009      	beq.n	f62 <adc_async_init+0x32>
     f4e:	1c28      	adds	r0, r5, #0
     f50:	bf18      	it	ne
     f52:	2001      	movne	r0, #1
     f54:	e006      	b.n	f64 <adc_async_init+0x34>
     f56:	2000      	movs	r0, #0
     f58:	e004      	b.n	f64 <adc_async_init+0x34>
     f5a:	2000      	movs	r0, #0
     f5c:	e002      	b.n	f64 <adc_async_init+0x34>
     f5e:	2000      	movs	r0, #0
     f60:	e000      	b.n	f64 <adc_async_init+0x34>
     f62:	2000      	movs	r0, #0
     f64:	f8df b064 	ldr.w	fp, [pc, #100]	; fcc <adc_async_init+0x9c>
     f68:	223f      	movs	r2, #63	; 0x3f
     f6a:	4659      	mov	r1, fp
     f6c:	f8df a060 	ldr.w	sl, [pc, #96]	; fd0 <adc_async_init+0xa0>
     f70:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     f72:	1c60      	adds	r0, r4, #1
     f74:	2240      	movs	r2, #64	; 0x40
     f76:	4659      	mov	r1, fp
     f78:	4580      	cmp	r8, r0
     f7a:	bfcc      	ite	gt
     f7c:	2000      	movgt	r0, #0
     f7e:	2001      	movle	r0, #1
     f80:	47d0      	blx	sl
	device = &descr->device;
     f82:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     f84:	21ff      	movs	r1, #255	; 0xff
     f86:	b2da      	uxtb	r2, r3
     f88:	54b1      	strb	r1, [r6, r2]
     f8a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     f8c:	b2da      	uxtb	r2, r3
     f8e:	42a2      	cmp	r2, r4
     f90:	d9f9      	bls.n	f86 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     f92:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     f94:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     f98:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     f9c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     f9e:	4649      	mov	r1, r9
     fa0:	4638      	mov	r0, r7
     fa2:	4b06      	ldr	r3, [pc, #24]	; (fbc <adc_async_init+0x8c>)
     fa4:	4798      	blx	r3
	if (init_status) {
     fa6:	4603      	mov	r3, r0
     fa8:	b928      	cbnz	r0, fb6 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     faa:	4a05      	ldr	r2, [pc, #20]	; (fc0 <adc_async_init+0x90>)
     fac:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     fae:	4a05      	ldr	r2, [pc, #20]	; (fc4 <adc_async_init+0x94>)
     fb0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     fb2:	4a05      	ldr	r2, [pc, #20]	; (fc8 <adc_async_init+0x98>)
     fb4:	607a      	str	r2, [r7, #4]
}
     fb6:	4618      	mov	r0, r3
     fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fbc:	00002555 	.word	0x00002555
     fc0:	00000ed1 	.word	0x00000ed1
     fc4:	00000ebd 	.word	0x00000ebd
     fc8:	00000ec7 	.word	0x00000ec7
     fcc:	00009224 	.word	0x00009224
     fd0:	000021c5 	.word	0x000021c5

00000fd4 <adc_async_register_channel_buffer>:
{
     fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fd8:	460e      	mov	r6, r1
     fda:	4617      	mov	r7, r2
     fdc:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     fde:	4605      	mov	r5, r0
     fe0:	2800      	cmp	r0, #0
     fe2:	d040      	beq.n	1066 <adc_async_register_channel_buffer+0x92>
     fe4:	2a00      	cmp	r2, #0
     fe6:	d040      	beq.n	106a <adc_async_register_channel_buffer+0x96>
     fe8:	1c18      	adds	r0, r3, #0
     fea:	bf18      	it	ne
     fec:	2001      	movne	r0, #1
     fee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1088 <adc_async_register_channel_buffer+0xb4>
     ff2:	2266      	movs	r2, #102	; 0x66
     ff4:	4649      	mov	r1, r9
     ff6:	4c22      	ldr	r4, [pc, #136]	; (1080 <adc_async_register_channel_buffer+0xac>)
     ff8:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     ffa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     ffe:	2267      	movs	r2, #103	; 0x67
    1000:	4649      	mov	r1, r9
    1002:	42b0      	cmp	r0, r6
    1004:	bf34      	ite	cc
    1006:	2000      	movcc	r0, #0
    1008:	2001      	movcs	r0, #1
    100a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    100c:	6a29      	ldr	r1, [r5, #32]
    100e:	5d8b      	ldrb	r3, [r1, r6]
    1010:	2bff      	cmp	r3, #255	; 0xff
    1012:	d12c      	bne.n	106e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    1014:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1018:	2300      	movs	r3, #0
    101a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    101c:	b2da      	uxtb	r2, r3
    101e:	5c8a      	ldrb	r2, [r1, r2]
    1020:	2aff      	cmp	r2, #255	; 0xff
			index++;
    1022:	bf1c      	itt	ne
    1024:	3401      	addne	r4, #1
    1026:	b2e4      	uxtbne	r4, r4
    1028:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    102a:	b2da      	uxtb	r2, r3
    102c:	4282      	cmp	r2, r0
    102e:	d9f5      	bls.n	101c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    1030:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    1034:	42a3      	cmp	r3, r4
    1036:	d31d      	bcc.n	1074 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    1038:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    103c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    1040:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1042:	4448      	add	r0, r9
    1044:	4642      	mov	r2, r8
    1046:	4639      	mov	r1, r7
    1048:	3004      	adds	r0, #4
    104a:	4b0e      	ldr	r3, [pc, #56]	; (1084 <adc_async_register_channel_buffer+0xb0>)
    104c:	4798      	blx	r3
    104e:	4602      	mov	r2, r0
    1050:	b998      	cbnz	r0, 107a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    1052:	6a2b      	ldr	r3, [r5, #32]
    1054:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    1056:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1058:	4499      	add	r9, r3
    105a:	2300      	movs	r3, #0
    105c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    1060:	4610      	mov	r0, r2
    1062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    1066:	2000      	movs	r0, #0
    1068:	e7c1      	b.n	fee <adc_async_register_channel_buffer+0x1a>
    106a:	2000      	movs	r0, #0
    106c:	e7bf      	b.n	fee <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    106e:	f06f 020c 	mvn.w	r2, #12
    1072:	e7f5      	b.n	1060 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    1074:	f06f 021b 	mvn.w	r2, #27
    1078:	e7f2      	b.n	1060 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    107a:	f06f 020c 	mvn.w	r2, #12
    107e:	e7ef      	b.n	1060 <adc_async_register_channel_buffer+0x8c>
    1080:	000021c5 	.word	0x000021c5
    1084:	0000226d 	.word	0x0000226d
    1088:	00009224 	.word	0x00009224

0000108c <adc_async_enable_channel>:
{
    108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    108e:	460d      	mov	r5, r1
	ASSERT(descr);
    1090:	4f0b      	ldr	r7, [pc, #44]	; (10c0 <adc_async_enable_channel+0x34>)
    1092:	4604      	mov	r4, r0
    1094:	2283      	movs	r2, #131	; 0x83
    1096:	4639      	mov	r1, r7
    1098:	3000      	adds	r0, #0
    109a:	bf18      	it	ne
    109c:	2001      	movne	r0, #1
    109e:	4e09      	ldr	r6, [pc, #36]	; (10c4 <adc_async_enable_channel+0x38>)
    10a0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    10a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    10a6:	2284      	movs	r2, #132	; 0x84
    10a8:	4639      	mov	r1, r7
    10aa:	42a8      	cmp	r0, r5
    10ac:	bf34      	ite	cc
    10ae:	2000      	movcc	r0, #0
    10b0:	2001      	movcs	r0, #1
    10b2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    10b4:	4629      	mov	r1, r5
    10b6:	4620      	mov	r0, r4
    10b8:	4b03      	ldr	r3, [pc, #12]	; (10c8 <adc_async_enable_channel+0x3c>)
    10ba:	4798      	blx	r3
}
    10bc:	2000      	movs	r0, #0
    10be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10c0:	00009224 	.word	0x00009224
    10c4:	000021c5 	.word	0x000021c5
    10c8:	00002671 	.word	0x00002671

000010cc <adc_async_register_callback>:
{
    10cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    10d0:	460e      	mov	r6, r1
    10d2:	4614      	mov	r4, r2
    10d4:	4699      	mov	r9, r3
	ASSERT(descr);
    10d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1148 <adc_async_register_callback+0x7c>
    10da:	4605      	mov	r5, r0
    10dc:	229c      	movs	r2, #156	; 0x9c
    10de:	4641      	mov	r1, r8
    10e0:	3000      	adds	r0, #0
    10e2:	bf18      	it	ne
    10e4:	2001      	movne	r0, #1
    10e6:	4f16      	ldr	r7, [pc, #88]	; (1140 <adc_async_register_callback+0x74>)
    10e8:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    10ea:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    10ee:	229d      	movs	r2, #157	; 0x9d
    10f0:	4641      	mov	r1, r8
    10f2:	42b0      	cmp	r0, r6
    10f4:	bf34      	ite	cc
    10f6:	2000      	movcc	r0, #0
    10f8:	2001      	movcs	r0, #1
    10fa:	47b8      	blx	r7
	switch (type) {
    10fc:	2c01      	cmp	r4, #1
    10fe:	d019      	beq.n	1134 <adc_async_register_callback+0x68>
    1100:	b12c      	cbz	r4, 110e <adc_async_register_callback+0x42>
    1102:	2c02      	cmp	r4, #2
    1104:	d019      	beq.n	113a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    1106:	f06f 000c 	mvn.w	r0, #12
}
    110a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    110e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    1110:	5d9b      	ldrb	r3, [r3, r6]
    1112:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1114:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1118:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    111c:	f119 0300 	adds.w	r3, r9, #0
    1120:	bf18      	it	ne
    1122:	2301      	movne	r3, #1
    1124:	4622      	mov	r2, r4
    1126:	4631      	mov	r1, r6
    1128:	4628      	mov	r0, r5
    112a:	4c06      	ldr	r4, [pc, #24]	; (1144 <adc_async_register_callback+0x78>)
    112c:	47a0      	blx	r4
	return ERR_NONE;
    112e:	2000      	movs	r0, #0
    1130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    1134:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    1138:	e7f0      	b.n	111c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    113a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    113e:	e7ed      	b.n	111c <adc_async_register_callback+0x50>
    1140:	000021c5 	.word	0x000021c5
    1144:	000026af 	.word	0x000026af
    1148:	00009224 	.word	0x00009224

0000114c <adc_async_read_channel>:
{
    114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1150:	b083      	sub	sp, #12
    1152:	4688      	mov	r8, r1
    1154:	4691      	mov	r9, r2
    1156:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    1158:	4604      	mov	r4, r0
    115a:	2800      	cmp	r0, #0
    115c:	d04f      	beq.n	11fe <adc_async_read_channel+0xb2>
    115e:	2a00      	cmp	r2, #0
    1160:	d04f      	beq.n	1202 <adc_async_read_channel+0xb6>
    1162:	1c18      	adds	r0, r3, #0
    1164:	bf18      	it	ne
    1166:	2001      	movne	r0, #1
    1168:	4f29      	ldr	r7, [pc, #164]	; (1210 <adc_async_read_channel+0xc4>)
    116a:	22bc      	movs	r2, #188	; 0xbc
    116c:	4639      	mov	r1, r7
    116e:	4e29      	ldr	r6, [pc, #164]	; (1214 <adc_async_read_channel+0xc8>)
    1170:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1172:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1176:	22bd      	movs	r2, #189	; 0xbd
    1178:	4639      	mov	r1, r7
    117a:	4540      	cmp	r0, r8
    117c:	bf34      	ite	cc
    117e:	2000      	movcc	r0, #0
    1180:	2001      	movcs	r0, #1
    1182:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    1184:	4620      	mov	r0, r4
    1186:	4b24      	ldr	r3, [pc, #144]	; (1218 <adc_async_read_channel+0xcc>)
    1188:	4798      	blx	r3
	ASSERT(!(length % data_size));
    118a:	fb95 f3f0 	sdiv	r3, r5, r0
    118e:	fb03 5010 	mls	r0, r3, r0, r5
    1192:	22bf      	movs	r2, #191	; 0xbf
    1194:	4639      	mov	r1, r7
    1196:	fab0 f080 	clz	r0, r0
    119a:	0940      	lsrs	r0, r0, #5
    119c:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    119e:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    11a0:	f813 b008 	ldrb.w	fp, [r3, r8]
    11a4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    11a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11aa:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    11ae:	a801      	add	r0, sp, #4
    11b0:	4b1a      	ldr	r3, [pc, #104]	; (121c <adc_async_read_channel+0xd0>)
    11b2:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    11b4:	f10b 0a04 	add.w	sl, fp, #4
    11b8:	4650      	mov	r0, sl
    11ba:	4b19      	ldr	r3, [pc, #100]	; (1220 <adc_async_read_channel+0xd4>)
    11bc:	4798      	blx	r3
    11be:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    11c0:	a801      	add	r0, sp, #4
    11c2:	4b18      	ldr	r3, [pc, #96]	; (1224 <adc_async_read_channel+0xd8>)
    11c4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    11c6:	f1b8 0f00 	cmp.w	r8, #0
    11ca:	d01c      	beq.n	1206 <adc_async_read_channel+0xba>
    11cc:	b1ed      	cbz	r5, 120a <adc_async_read_channel+0xbe>
    11ce:	3d01      	subs	r5, #1
    11d0:	b2ad      	uxth	r5, r5
    11d2:	3502      	adds	r5, #2
    11d4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    11d6:	4f14      	ldr	r7, [pc, #80]	; (1228 <adc_async_read_channel+0xdc>)
    11d8:	b2a6      	uxth	r6, r4
    11da:	1e61      	subs	r1, r4, #1
    11dc:	4449      	add	r1, r9
    11de:	4650      	mov	r0, sl
    11e0:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    11e2:	4544      	cmp	r4, r8
    11e4:	d002      	beq.n	11ec <adc_async_read_channel+0xa0>
    11e6:	3401      	adds	r4, #1
    11e8:	42ac      	cmp	r4, r5
    11ea:	d1f5      	bne.n	11d8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    11ec:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    11f0:	1b9b      	subs	r3, r3, r6
    11f2:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    11f6:	4630      	mov	r0, r6
    11f8:	b003      	add	sp, #12
    11fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    11fe:	2000      	movs	r0, #0
    1200:	e7b2      	b.n	1168 <adc_async_read_channel+0x1c>
    1202:	2000      	movs	r0, #0
    1204:	e7b0      	b.n	1168 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    1206:	2600      	movs	r6, #0
    1208:	e7f0      	b.n	11ec <adc_async_read_channel+0xa0>
    120a:	2600      	movs	r6, #0
    120c:	e7ee      	b.n	11ec <adc_async_read_channel+0xa0>
    120e:	bf00      	nop
    1210:	00009224 	.word	0x00009224
    1214:	000021c5 	.word	0x000021c5
    1218:	00002687 	.word	0x00002687
    121c:	00001255 	.word	0x00001255
    1220:	00002341 	.word	0x00002341
    1224:	00001263 	.word	0x00001263
    1228:	000022bd 	.word	0x000022bd

0000122c <adc_async_start_conversion>:
{
    122c:	b510      	push	{r4, lr}
	ASSERT(descr);
    122e:	4604      	mov	r4, r0
    1230:	22d6      	movs	r2, #214	; 0xd6
    1232:	4905      	ldr	r1, [pc, #20]	; (1248 <adc_async_start_conversion+0x1c>)
    1234:	3000      	adds	r0, #0
    1236:	bf18      	it	ne
    1238:	2001      	movne	r0, #1
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <adc_async_start_conversion+0x20>)
    123c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    123e:	4620      	mov	r0, r4
    1240:	4b03      	ldr	r3, [pc, #12]	; (1250 <adc_async_start_conversion+0x24>)
    1242:	4798      	blx	r3
}
    1244:	2000      	movs	r0, #0
    1246:	bd10      	pop	{r4, pc}
    1248:	00009224 	.word	0x00009224
    124c:	000021c5 	.word	0x000021c5
    1250:	00002699 	.word	0x00002699

00001254 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1254:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1258:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    125a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    125c:	f3bf 8f5f 	dmb	sy
    1260:	4770      	bx	lr

00001262 <atomic_leave_critical>:
    1262:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1266:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1268:	f383 8810 	msr	PRIMASK, r3
    126c:	4770      	bx	lr
	...

00001270 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1270:	b538      	push	{r3, r4, r5, lr}
    1272:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1274:	4605      	mov	r5, r0
    1276:	b158      	cbz	r0, 1290 <crc_sync_init+0x20>
    1278:	1c08      	adds	r0, r1, #0
    127a:	bf18      	it	ne
    127c:	2001      	movne	r0, #1
    127e:	222b      	movs	r2, #43	; 0x2b
    1280:	4904      	ldr	r1, [pc, #16]	; (1294 <crc_sync_init+0x24>)
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <crc_sync_init+0x28>)
    1284:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1286:	4621      	mov	r1, r4
    1288:	4628      	mov	r0, r5
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <crc_sync_init+0x2c>)
    128c:	4798      	blx	r3
}
    128e:	bd38      	pop	{r3, r4, r5, pc}
    1290:	2000      	movs	r0, #0
    1292:	e7f4      	b.n	127e <crc_sync_init+0xe>
    1294:	00009240 	.word	0x00009240
    1298:	000021c5 	.word	0x000021c5
    129c:	00002a99 	.word	0x00002a99

000012a0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    12a0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    12a2:	4b02      	ldr	r3, [pc, #8]	; (12ac <delay_init+0xc>)
    12a4:	6018      	str	r0, [r3, #0]
    12a6:	4b02      	ldr	r3, [pc, #8]	; (12b0 <delay_init+0x10>)
    12a8:	4798      	blx	r3
    12aa:	bd08      	pop	{r3, pc}
    12ac:	20000564 	.word	0x20000564
    12b0:	00004055 	.word	0x00004055

000012b4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    12b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    12b6:	4b04      	ldr	r3, [pc, #16]	; (12c8 <delay_us+0x14>)
    12b8:	681c      	ldr	r4, [r3, #0]
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <delay_us+0x18>)
    12bc:	4798      	blx	r3
    12be:	4601      	mov	r1, r0
    12c0:	4620      	mov	r0, r4
    12c2:	4b03      	ldr	r3, [pc, #12]	; (12d0 <delay_us+0x1c>)
    12c4:	4798      	blx	r3
    12c6:	bd10      	pop	{r4, pc}
    12c8:	20000564 	.word	0x20000564
    12cc:	0000275d 	.word	0x0000275d
    12d0:	00004069 	.word	0x00004069

000012d4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    12d4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    12d6:	4b04      	ldr	r3, [pc, #16]	; (12e8 <delay_ms+0x14>)
    12d8:	681c      	ldr	r4, [r3, #0]
    12da:	4b04      	ldr	r3, [pc, #16]	; (12ec <delay_ms+0x18>)
    12dc:	4798      	blx	r3
    12de:	4601      	mov	r1, r0
    12e0:	4620      	mov	r0, r4
    12e2:	4b03      	ldr	r3, [pc, #12]	; (12f0 <delay_ms+0x1c>)
    12e4:	4798      	blx	r3
    12e6:	bd10      	pop	{r4, pc}
    12e8:	20000564 	.word	0x20000564
    12ec:	00002765 	.word	0x00002765
    12f0:	00004069 	.word	0x00004069

000012f4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    12f4:	b508      	push	{r3, lr}
	return _event_system_init();
    12f6:	4b01      	ldr	r3, [pc, #4]	; (12fc <event_system_init+0x8>)
    12f8:	4798      	blx	r3
}
    12fa:	bd08      	pop	{r3, pc}
    12fc:	00002aa1 	.word	0x00002aa1

00001300 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1300:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1302:	6943      	ldr	r3, [r0, #20]
    1304:	b103      	cbz	r3, 1308 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1306:	4798      	blx	r3
    1308:	bd08      	pop	{r3, pc}

0000130a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    130a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    130c:	6983      	ldr	r3, [r0, #24]
    130e:	b103      	cbz	r3, 1312 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1310:	4798      	blx	r3
    1312:	bd08      	pop	{r3, pc}

00001314 <flash_init>:
{
    1314:	b538      	push	{r3, r4, r5, lr}
    1316:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1318:	4604      	mov	r4, r0
    131a:	b190      	cbz	r0, 1342 <flash_init+0x2e>
    131c:	1c08      	adds	r0, r1, #0
    131e:	bf18      	it	ne
    1320:	2001      	movne	r0, #1
    1322:	2238      	movs	r2, #56	; 0x38
    1324:	4908      	ldr	r1, [pc, #32]	; (1348 <flash_init+0x34>)
    1326:	4b09      	ldr	r3, [pc, #36]	; (134c <flash_init+0x38>)
    1328:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    132a:	4629      	mov	r1, r5
    132c:	4620      	mov	r0, r4
    132e:	4b08      	ldr	r3, [pc, #32]	; (1350 <flash_init+0x3c>)
    1330:	4798      	blx	r3
	if (rc) {
    1332:	4603      	mov	r3, r0
    1334:	b918      	cbnz	r0, 133e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1336:	4a07      	ldr	r2, [pc, #28]	; (1354 <flash_init+0x40>)
    1338:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    133a:	4a07      	ldr	r2, [pc, #28]	; (1358 <flash_init+0x44>)
    133c:	6062      	str	r2, [r4, #4]
}
    133e:	4618      	mov	r0, r3
    1340:	bd38      	pop	{r3, r4, r5, pc}
    1342:	2000      	movs	r0, #0
    1344:	e7ed      	b.n	1322 <flash_init+0xe>
    1346:	bf00      	nop
    1348:	0000925c 	.word	0x0000925c
    134c:	000021c5 	.word	0x000021c5
    1350:	00002bad 	.word	0x00002bad
    1354:	00001301 	.word	0x00001301
    1358:	0000130b 	.word	0x0000130b

0000135c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    135c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    135e:	8843      	ldrh	r3, [r0, #2]
    1360:	f413 7f80 	tst.w	r3, #256	; 0x100
    1364:	d102      	bne.n	136c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    1366:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1368:	b103      	cbz	r3, 136c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    136a:	4798      	blx	r3
    136c:	bd08      	pop	{r3, pc}

0000136e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    136e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1370:	8843      	ldrh	r3, [r0, #2]
    1372:	f413 7f80 	tst.w	r3, #256	; 0x100
    1376:	d102      	bne.n	137e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    1378:	6b83      	ldr	r3, [r0, #56]	; 0x38
    137a:	b103      	cbz	r3, 137e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    137c:	4798      	blx	r3
    137e:	bd08      	pop	{r3, pc}

00001380 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1380:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1382:	8843      	ldrh	r3, [r0, #2]
    1384:	f413 7f80 	tst.w	r3, #256	; 0x100
    1388:	d102      	bne.n	1390 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    138a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    138c:	b103      	cbz	r3, 1390 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    138e:	4798      	blx	r3
    1390:	bd08      	pop	{r3, pc}
	...

00001394 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1394:	b510      	push	{r4, lr}
    1396:	b084      	sub	sp, #16
    1398:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    139a:	8a83      	ldrh	r3, [r0, #20]
    139c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    13a0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    13a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    13a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    13aa:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    13ac:	a901      	add	r1, sp, #4
    13ae:	3828      	subs	r0, #40	; 0x28
    13b0:	4b03      	ldr	r3, [pc, #12]	; (13c0 <i2c_m_async_write+0x2c>)
    13b2:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    13b4:	2800      	cmp	r0, #0
    13b6:	bf08      	it	eq
    13b8:	4620      	moveq	r0, r4
    13ba:	b004      	add	sp, #16
    13bc:	bd10      	pop	{r4, pc}
    13be:	bf00      	nop
    13c0:	00003745 	.word	0x00003745

000013c4 <i2c_m_async_read>:
{
    13c4:	b510      	push	{r4, lr}
    13c6:	b084      	sub	sp, #16
    13c8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    13ca:	8a83      	ldrh	r3, [r0, #20]
    13cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    13d0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    13d2:	f248 0301 	movw	r3, #32769	; 0x8001
    13d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    13da:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    13dc:	a901      	add	r1, sp, #4
    13de:	3828      	subs	r0, #40	; 0x28
    13e0:	4b03      	ldr	r3, [pc, #12]	; (13f0 <i2c_m_async_read+0x2c>)
    13e2:	4798      	blx	r3
}
    13e4:	2800      	cmp	r0, #0
    13e6:	bf08      	it	eq
    13e8:	4620      	moveq	r0, r4
    13ea:	b004      	add	sp, #16
    13ec:	bd10      	pop	{r4, pc}
    13ee:	bf00      	nop
    13f0:	00003745 	.word	0x00003745

000013f4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    13f8:	4604      	mov	r4, r0
    13fa:	2289      	movs	r2, #137	; 0x89
    13fc:	490f      	ldr	r1, [pc, #60]	; (143c <i2c_m_async_init+0x48>)
    13fe:	3000      	adds	r0, #0
    1400:	bf18      	it	ne
    1402:	2001      	movne	r0, #1
    1404:	4b0e      	ldr	r3, [pc, #56]	; (1440 <i2c_m_async_init+0x4c>)
    1406:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1408:	4629      	mov	r1, r5
    140a:	4620      	mov	r0, r4
    140c:	4b0d      	ldr	r3, [pc, #52]	; (1444 <i2c_m_async_init+0x50>)
    140e:	4798      	blx	r3
	if (init_status) {
    1410:	4605      	mov	r5, r0
    1412:	b108      	cbz	r0, 1418 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1414:	4628      	mov	r0, r5
    1416:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1418:	4b0b      	ldr	r3, [pc, #44]	; (1448 <i2c_m_async_init+0x54>)
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    141c:	4b0b      	ldr	r3, [pc, #44]	; (144c <i2c_m_async_init+0x58>)
    141e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1420:	4a0b      	ldr	r2, [pc, #44]	; (1450 <i2c_m_async_init+0x5c>)
    1422:	2101      	movs	r1, #1
    1424:	4620      	mov	r0, r4
    1426:	4e0b      	ldr	r6, [pc, #44]	; (1454 <i2c_m_async_init+0x60>)
    1428:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    142a:	4a0b      	ldr	r2, [pc, #44]	; (1458 <i2c_m_async_init+0x64>)
    142c:	2102      	movs	r1, #2
    142e:	4620      	mov	r0, r4
    1430:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1432:	4a0a      	ldr	r2, [pc, #40]	; (145c <i2c_m_async_init+0x68>)
    1434:	2100      	movs	r1, #0
    1436:	4620      	mov	r0, r4
    1438:	47b0      	blx	r6
	return ERR_NONE;
    143a:	e7eb      	b.n	1414 <i2c_m_async_init+0x20>
    143c:	00009274 	.word	0x00009274
    1440:	000021c5 	.word	0x000021c5
    1444:	000036c5 	.word	0x000036c5
    1448:	000013c5 	.word	0x000013c5
    144c:	00001395 	.word	0x00001395
    1450:	0000135d 	.word	0x0000135d
    1454:	00003875 	.word	0x00003875
    1458:	0000136f 	.word	0x0000136f
    145c:	00001381 	.word	0x00001381

00001460 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	460d      	mov	r5, r1
    1464:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1466:	4604      	mov	r4, r0
    1468:	b160      	cbz	r0, 1484 <io_write+0x24>
    146a:	1c08      	adds	r0, r1, #0
    146c:	bf18      	it	ne
    146e:	2001      	movne	r0, #1
    1470:	2234      	movs	r2, #52	; 0x34
    1472:	4905      	ldr	r1, [pc, #20]	; (1488 <io_write+0x28>)
    1474:	4b05      	ldr	r3, [pc, #20]	; (148c <io_write+0x2c>)
    1476:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1478:	6823      	ldr	r3, [r4, #0]
    147a:	4632      	mov	r2, r6
    147c:	4629      	mov	r1, r5
    147e:	4620      	mov	r0, r4
    1480:	4798      	blx	r3
}
    1482:	bd70      	pop	{r4, r5, r6, pc}
    1484:	2000      	movs	r0, #0
    1486:	e7f3      	b.n	1470 <io_write+0x10>
    1488:	00009294 	.word	0x00009294
    148c:	000021c5 	.word	0x000021c5

00001490 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	460d      	mov	r5, r1
    1494:	4616      	mov	r6, r2
	ASSERT(io);
    1496:	4604      	mov	r4, r0
    1498:	2298      	movs	r2, #152	; 0x98
    149a:	4907      	ldr	r1, [pc, #28]	; (14b8 <_spi_m_dma_io_write+0x28>)
    149c:	3000      	adds	r0, #0
    149e:	bf18      	it	ne
    14a0:	2001      	movne	r0, #1
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <_spi_m_dma_io_write+0x2c>)
    14a4:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    14a6:	4633      	mov	r3, r6
    14a8:	2200      	movs	r2, #0
    14aa:	4629      	mov	r1, r5
    14ac:	f1a4 001c 	sub.w	r0, r4, #28
    14b0:	4c03      	ldr	r4, [pc, #12]	; (14c0 <_spi_m_dma_io_write+0x30>)
    14b2:	47a0      	blx	r4
}
    14b4:	bd70      	pop	{r4, r5, r6, pc}
    14b6:	bf00      	nop
    14b8:	000092a8 	.word	0x000092a8
    14bc:	000021c5 	.word	0x000021c5
    14c0:	00003efd 	.word	0x00003efd

000014c4 <_spi_m_dma_io_read>:
{
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	460d      	mov	r5, r1
    14c8:	4616      	mov	r6, r2
	ASSERT(io);
    14ca:	4604      	mov	r4, r0
    14cc:	2281      	movs	r2, #129	; 0x81
    14ce:	4907      	ldr	r1, [pc, #28]	; (14ec <_spi_m_dma_io_read+0x28>)
    14d0:	3000      	adds	r0, #0
    14d2:	bf18      	it	ne
    14d4:	2001      	movne	r0, #1
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <_spi_m_dma_io_read+0x2c>)
    14d8:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    14da:	4633      	mov	r3, r6
    14dc:	462a      	mov	r2, r5
    14de:	2100      	movs	r1, #0
    14e0:	f1a4 001c 	sub.w	r0, r4, #28
    14e4:	4c03      	ldr	r4, [pc, #12]	; (14f4 <_spi_m_dma_io_read+0x30>)
    14e6:	47a0      	blx	r4
}
    14e8:	bd70      	pop	{r4, r5, r6, pc}
    14ea:	bf00      	nop
    14ec:	000092a8 	.word	0x000092a8
    14f0:	000021c5 	.word	0x000021c5
    14f4:	00003efd 	.word	0x00003efd

000014f8 <spi_m_dma_init>:
{
    14f8:	b538      	push	{r3, r4, r5, lr}
    14fa:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    14fc:	4605      	mov	r5, r0
    14fe:	b1a0      	cbz	r0, 152a <spi_m_dma_init+0x32>
    1500:	1c08      	adds	r0, r1, #0
    1502:	bf18      	it	ne
    1504:	2001      	movne	r0, #1
    1506:	223b      	movs	r2, #59	; 0x3b
    1508:	4909      	ldr	r1, [pc, #36]	; (1530 <spi_m_dma_init+0x38>)
    150a:	4b0a      	ldr	r3, [pc, #40]	; (1534 <spi_m_dma_init+0x3c>)
    150c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    150e:	4628      	mov	r0, r5
    1510:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1514:	4621      	mov	r1, r4
    1516:	4b08      	ldr	r3, [pc, #32]	; (1538 <spi_m_dma_init+0x40>)
    1518:	4798      	blx	r3
	if (rc) {
    151a:	4603      	mov	r3, r0
    151c:	b918      	cbnz	r0, 1526 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    151e:	4a07      	ldr	r2, [pc, #28]	; (153c <spi_m_dma_init+0x44>)
    1520:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1522:	4a07      	ldr	r2, [pc, #28]	; (1540 <spi_m_dma_init+0x48>)
    1524:	622a      	str	r2, [r5, #32]
}
    1526:	4618      	mov	r0, r3
    1528:	bd38      	pop	{r3, r4, r5, pc}
    152a:	2000      	movs	r0, #0
    152c:	e7eb      	b.n	1506 <spi_m_dma_init+0xe>
    152e:	bf00      	nop
    1530:	000092a8 	.word	0x000092a8
    1534:	000021c5 	.word	0x000021c5
    1538:	00003ce1 	.word	0x00003ce1
    153c:	000014c5 	.word	0x000014c5
    1540:	00001491 	.word	0x00001491

00001544 <spi_m_dma_enable>:
{
    1544:	b510      	push	{r4, lr}
	ASSERT(spi);
    1546:	4604      	mov	r4, r0
    1548:	2251      	movs	r2, #81	; 0x51
    154a:	4905      	ldr	r1, [pc, #20]	; (1560 <spi_m_dma_enable+0x1c>)
    154c:	3000      	adds	r0, #0
    154e:	bf18      	it	ne
    1550:	2001      	movne	r0, #1
    1552:	4b04      	ldr	r3, [pc, #16]	; (1564 <spi_m_dma_enable+0x20>)
    1554:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    1556:	1d20      	adds	r0, r4, #4
    1558:	4b03      	ldr	r3, [pc, #12]	; (1568 <spi_m_dma_enable+0x24>)
    155a:	4798      	blx	r3
    155c:	bd10      	pop	{r4, pc}
    155e:	bf00      	nop
    1560:	000092a8 	.word	0x000092a8
    1564:	000021c5 	.word	0x000021c5
    1568:	00003e5d 	.word	0x00003e5d

0000156c <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    156c:	b570      	push	{r4, r5, r6, lr}
    156e:	460d      	mov	r5, r1
    1570:	4616      	mov	r6, r2
	ASSERT(spi);
    1572:	4604      	mov	r4, r0
    1574:	22a8      	movs	r2, #168	; 0xa8
    1576:	4906      	ldr	r1, [pc, #24]	; (1590 <spi_m_dma_register_callback+0x24>)
    1578:	3000      	adds	r0, #0
    157a:	bf18      	it	ne
    157c:	2001      	movne	r0, #1
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <spi_m_dma_register_callback+0x28>)
    1580:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    1582:	4632      	mov	r2, r6
    1584:	4629      	mov	r1, r5
    1586:	1d20      	adds	r0, r4, #4
    1588:	4b03      	ldr	r3, [pc, #12]	; (1598 <spi_m_dma_register_callback+0x2c>)
    158a:	4798      	blx	r3
    158c:	bd70      	pop	{r4, r5, r6, pc}
    158e:	bf00      	nop
    1590:	000092a8 	.word	0x000092a8
    1594:	000021c5 	.word	0x000021c5
    1598:	00003e8d 	.word	0x00003e8d

0000159c <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    159c:	b538      	push	{r3, r4, r5, lr}
    159e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    15a0:	4604      	mov	r4, r0
    15a2:	b150      	cbz	r0, 15ba <spi_m_dma_get_io_descriptor+0x1e>
    15a4:	1c08      	adds	r0, r1, #0
    15a6:	bf18      	it	ne
    15a8:	2001      	movne	r0, #1
    15aa:	22ae      	movs	r2, #174	; 0xae
    15ac:	4904      	ldr	r1, [pc, #16]	; (15c0 <spi_m_dma_get_io_descriptor+0x24>)
    15ae:	4b05      	ldr	r3, [pc, #20]	; (15c4 <spi_m_dma_get_io_descriptor+0x28>)
    15b0:	4798      	blx	r3
	*io = &spi->io;
    15b2:	3420      	adds	r4, #32
    15b4:	602c      	str	r4, [r5, #0]

	return 0;
}
    15b6:	2000      	movs	r0, #0
    15b8:	bd38      	pop	{r3, r4, r5, pc}
    15ba:	2000      	movs	r0, #0
    15bc:	e7f5      	b.n	15aa <spi_m_dma_get_io_descriptor+0xe>
    15be:	bf00      	nop
    15c0:	000092a8 	.word	0x000092a8
    15c4:	000021c5 	.word	0x000021c5

000015c8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    15cc:	4604      	mov	r4, r0
    15ce:	b1b8      	cbz	r0, 1600 <spi_m_sync_init+0x38>
    15d0:	1c08      	adds	r0, r1, #0
    15d2:	bf18      	it	ne
    15d4:	2001      	movne	r0, #1
    15d6:	2240      	movs	r2, #64	; 0x40
    15d8:	490a      	ldr	r1, [pc, #40]	; (1604 <spi_m_sync_init+0x3c>)
    15da:	4b0b      	ldr	r3, [pc, #44]	; (1608 <spi_m_sync_init+0x40>)
    15dc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    15de:	4620      	mov	r0, r4
    15e0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    15e4:	4629      	mov	r1, r5
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <spi_m_sync_init+0x44>)
    15e8:	4798      	blx	r3

	if (rc < 0) {
    15ea:	2800      	cmp	r0, #0
    15ec:	db07      	blt.n	15fe <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    15ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    15f2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    15f4:	4b06      	ldr	r3, [pc, #24]	; (1610 <spi_m_sync_init+0x48>)
    15f6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    15f8:	4b06      	ldr	r3, [pc, #24]	; (1614 <spi_m_sync_init+0x4c>)
    15fa:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    15fc:	2000      	movs	r0, #0
}
    15fe:	bd38      	pop	{r3, r4, r5, pc}
    1600:	2000      	movs	r0, #0
    1602:	e7e8      	b.n	15d6 <spi_m_sync_init+0xe>
    1604:	000092c4 	.word	0x000092c4
    1608:	000021c5 	.word	0x000021c5
    160c:	00003a71 	.word	0x00003a71
    1610:	00001695 	.word	0x00001695
    1614:	00001659 	.word	0x00001659

00001618 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1618:	b530      	push	{r4, r5, lr}
    161a:	b085      	sub	sp, #20
    161c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    161e:	4605      	mov	r5, r0
    1620:	b190      	cbz	r0, 1648 <spi_m_sync_transfer+0x30>
    1622:	1c08      	adds	r0, r1, #0
    1624:	bf18      	it	ne
    1626:	2001      	movne	r0, #1
    1628:	22b3      	movs	r2, #179	; 0xb3
    162a:	4908      	ldr	r1, [pc, #32]	; (164c <spi_m_sync_transfer+0x34>)
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <spi_m_sync_transfer+0x38>)
    162e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1630:	6823      	ldr	r3, [r4, #0]
    1632:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1634:	6863      	ldr	r3, [r4, #4]
    1636:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1638:	68a3      	ldr	r3, [r4, #8]
    163a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    163c:	a901      	add	r1, sp, #4
    163e:	1d28      	adds	r0, r5, #4
    1640:	4b04      	ldr	r3, [pc, #16]	; (1654 <spi_m_sync_transfer+0x3c>)
    1642:	4798      	blx	r3
}
    1644:	b005      	add	sp, #20
    1646:	bd30      	pop	{r4, r5, pc}
    1648:	2000      	movs	r0, #0
    164a:	e7ed      	b.n	1628 <spi_m_sync_transfer+0x10>
    164c:	000092c4 	.word	0x000092c4
    1650:	000021c5 	.word	0x000021c5
    1654:	00003c01 	.word	0x00003c01

00001658 <_spi_m_sync_io_write>:
{
    1658:	b570      	push	{r4, r5, r6, lr}
    165a:	b084      	sub	sp, #16
    165c:	460e      	mov	r6, r1
    165e:	4615      	mov	r5, r2
	ASSERT(io);
    1660:	4604      	mov	r4, r0
    1662:	22a3      	movs	r2, #163	; 0xa3
    1664:	4908      	ldr	r1, [pc, #32]	; (1688 <_spi_m_sync_io_write+0x30>)
    1666:	3000      	adds	r0, #0
    1668:	bf18      	it	ne
    166a:	2001      	movne	r0, #1
    166c:	4b07      	ldr	r3, [pc, #28]	; (168c <_spi_m_sync_io_write+0x34>)
    166e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1670:	2300      	movs	r3, #0
    1672:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1674:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1676:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1678:	a901      	add	r1, sp, #4
    167a:	f1a4 000c 	sub.w	r0, r4, #12
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <_spi_m_sync_io_write+0x38>)
    1680:	4798      	blx	r3
}
    1682:	b004      	add	sp, #16
    1684:	bd70      	pop	{r4, r5, r6, pc}
    1686:	bf00      	nop
    1688:	000092c4 	.word	0x000092c4
    168c:	000021c5 	.word	0x000021c5
    1690:	00001619 	.word	0x00001619

00001694 <_spi_m_sync_io_read>:
{
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	b084      	sub	sp, #16
    1698:	460e      	mov	r6, r1
    169a:	4615      	mov	r5, r2
	ASSERT(io);
    169c:	4604      	mov	r4, r0
    169e:	2287      	movs	r2, #135	; 0x87
    16a0:	4908      	ldr	r1, [pc, #32]	; (16c4 <_spi_m_sync_io_read+0x30>)
    16a2:	3000      	adds	r0, #0
    16a4:	bf18      	it	ne
    16a6:	2001      	movne	r0, #1
    16a8:	4b07      	ldr	r3, [pc, #28]	; (16c8 <_spi_m_sync_io_read+0x34>)
    16aa:	4798      	blx	r3
	xfer.rxbuf = buf;
    16ac:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    16ae:	2300      	movs	r3, #0
    16b0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    16b2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16b4:	a901      	add	r1, sp, #4
    16b6:	f1a4 000c 	sub.w	r0, r4, #12
    16ba:	4b04      	ldr	r3, [pc, #16]	; (16cc <_spi_m_sync_io_read+0x38>)
    16bc:	4798      	blx	r3
}
    16be:	b004      	add	sp, #16
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	bf00      	nop
    16c4:	000092c4 	.word	0x000092c4
    16c8:	000021c5 	.word	0x000021c5
    16cc:	00001619 	.word	0x00001619

000016d0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    16d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16d2:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    16d4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    16d6:	b12f      	cbz	r7, 16e4 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    16d8:	688d      	ldr	r5, [r1, #8]
    16da:	463c      	mov	r4, r7
    16dc:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16de:	f1c2 0e01 	rsb	lr, r2, #1
    16e2:	e00b      	b.n	16fc <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    16e4:	4b0e      	ldr	r3, [pc, #56]	; (1720 <timer_add_timer_task+0x50>)
    16e6:	4798      	blx	r3
		return;
    16e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16ea:	4473      	add	r3, lr
    16ec:	68a0      	ldr	r0, [r4, #8]
    16ee:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    16f0:	42ab      	cmp	r3, r5
    16f2:	d20a      	bcs.n	170a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    16f4:	6823      	ldr	r3, [r4, #0]
    16f6:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    16f8:	b153      	cbz	r3, 1710 <timer_add_timer_task+0x40>
    16fa:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    16fc:	6863      	ldr	r3, [r4, #4]
    16fe:	4293      	cmp	r3, r2
    1700:	d8f3      	bhi.n	16ea <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1702:	68a0      	ldr	r0, [r4, #8]
    1704:	4403      	add	r3, r0
    1706:	1a9b      	subs	r3, r3, r2
    1708:	e7f2      	b.n	16f0 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    170a:	42a7      	cmp	r7, r4
    170c:	d004      	beq.n	1718 <timer_add_timer_task+0x48>
    170e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1710:	4620      	mov	r0, r4
    1712:	4b04      	ldr	r3, [pc, #16]	; (1724 <timer_add_timer_task+0x54>)
    1714:	4798      	blx	r3
    1716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1718:	4660      	mov	r0, ip
    171a:	4b01      	ldr	r3, [pc, #4]	; (1720 <timer_add_timer_task+0x50>)
    171c:	4798      	blx	r3
    171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1720:	000021ed 	.word	0x000021ed
    1724:	00002219 	.word	0x00002219

00001728 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    172c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    172e:	6907      	ldr	r7, [r0, #16]
    1730:	3701      	adds	r7, #1
    1732:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1734:	7e03      	ldrb	r3, [r0, #24]
    1736:	f013 0f01 	tst.w	r3, #1
    173a:	d113      	bne.n	1764 <timer_process_counted+0x3c>
    173c:	7e03      	ldrb	r3, [r0, #24]
    173e:	f013 0f02 	tst.w	r3, #2
    1742:	d10f      	bne.n	1764 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1744:	b354      	cbz	r4, 179c <timer_process_counted+0x74>
    1746:	6863      	ldr	r3, [r4, #4]
    1748:	1afb      	subs	r3, r7, r3
    174a:	68a2      	ldr	r2, [r4, #8]
    174c:	4293      	cmp	r3, r2
    174e:	d307      	bcc.n	1760 <timer_process_counted+0x38>
    1750:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1752:	f100 0814 	add.w	r8, r0, #20
    1756:	f8df 9048 	ldr.w	r9, [pc, #72]	; 17a0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    175a:	f8df a048 	ldr.w	sl, [pc, #72]	; 17a4 <timer_process_counted+0x7c>
    175e:	e012      	b.n	1786 <timer_process_counted+0x5e>
    1760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1764:	7e03      	ldrb	r3, [r0, #24]
    1766:	f043 0302 	orr.w	r3, r3, #2
    176a:	7603      	strb	r3, [r0, #24]
		return;
    176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1770:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1772:	68e3      	ldr	r3, [r4, #12]
    1774:	4620      	mov	r0, r4
    1776:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1778:	b185      	cbz	r5, 179c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    177a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    177c:	686b      	ldr	r3, [r5, #4]
    177e:	1afb      	subs	r3, r7, r3
    1780:	68aa      	ldr	r2, [r5, #8]
    1782:	4293      	cmp	r3, r2
    1784:	d30a      	bcc.n	179c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1786:	4640      	mov	r0, r8
    1788:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    178a:	7c23      	ldrb	r3, [r4, #16]
    178c:	2b01      	cmp	r3, #1
    178e:	d1ef      	bne.n	1770 <timer_process_counted+0x48>
			tmp->time_label = time;
    1790:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1792:	463a      	mov	r2, r7
    1794:	4621      	mov	r1, r4
    1796:	4640      	mov	r0, r8
    1798:	47d0      	blx	sl
    179a:	e7e9      	b.n	1770 <timer_process_counted+0x48>
    179c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17a0:	00002261 	.word	0x00002261
    17a4:	000016d1 	.word	0x000016d1

000017a8 <timer_init>:
{
    17a8:	b570      	push	{r4, r5, r6, lr}
    17aa:	460e      	mov	r6, r1
    17ac:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    17ae:	4604      	mov	r4, r0
    17b0:	b190      	cbz	r0, 17d8 <timer_init+0x30>
    17b2:	b199      	cbz	r1, 17dc <timer_init+0x34>
    17b4:	1c10      	adds	r0, r2, #0
    17b6:	bf18      	it	ne
    17b8:	2001      	movne	r0, #1
    17ba:	223b      	movs	r2, #59	; 0x3b
    17bc:	4908      	ldr	r1, [pc, #32]	; (17e0 <timer_init+0x38>)
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <timer_init+0x3c>)
    17c0:	4798      	blx	r3
	descr->func = func;
    17c2:	4620      	mov	r0, r4
    17c4:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	4631      	mov	r1, r6
    17cc:	4798      	blx	r3
	descr->time                           = 0;
    17ce:	2000      	movs	r0, #0
    17d0:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    17d2:	4b05      	ldr	r3, [pc, #20]	; (17e8 <timer_init+0x40>)
    17d4:	6063      	str	r3, [r4, #4]
}
    17d6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    17d8:	2000      	movs	r0, #0
    17da:	e7ee      	b.n	17ba <timer_init+0x12>
    17dc:	2000      	movs	r0, #0
    17de:	e7ec      	b.n	17ba <timer_init+0x12>
    17e0:	000092e0 	.word	0x000092e0
    17e4:	000021c5 	.word	0x000021c5
    17e8:	00001729 	.word	0x00001729

000017ec <timer_start>:
{
    17ec:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    17ee:	4604      	mov	r4, r0
    17f0:	b198      	cbz	r0, 181a <timer_start+0x2e>
    17f2:	6800      	ldr	r0, [r0, #0]
    17f4:	3000      	adds	r0, #0
    17f6:	bf18      	it	ne
    17f8:	2001      	movne	r0, #1
    17fa:	2254      	movs	r2, #84	; 0x54
    17fc:	4909      	ldr	r1, [pc, #36]	; (1824 <timer_start+0x38>)
    17fe:	4b0a      	ldr	r3, [pc, #40]	; (1828 <timer_start+0x3c>)
    1800:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    1802:	1d25      	adds	r5, r4, #4
    1804:	6823      	ldr	r3, [r4, #0]
    1806:	699b      	ldr	r3, [r3, #24]
    1808:	4628      	mov	r0, r5
    180a:	4798      	blx	r3
    180c:	b938      	cbnz	r0, 181e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    180e:	6823      	ldr	r3, [r4, #0]
    1810:	689b      	ldr	r3, [r3, #8]
    1812:	4628      	mov	r0, r5
    1814:	4798      	blx	r3
	return ERR_NONE;
    1816:	2000      	movs	r0, #0
    1818:	bd38      	pop	{r3, r4, r5, pc}
    181a:	2000      	movs	r0, #0
    181c:	e7ed      	b.n	17fa <timer_start+0xe>
		return ERR_DENIED;
    181e:	f06f 0010 	mvn.w	r0, #16
}
    1822:	bd38      	pop	{r3, r4, r5, pc}
    1824:	000092e0 	.word	0x000092e0
    1828:	000021c5 	.word	0x000021c5

0000182c <timer_stop>:
{
    182c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    182e:	4604      	mov	r4, r0
    1830:	b198      	cbz	r0, 185a <timer_stop+0x2e>
    1832:	6800      	ldr	r0, [r0, #0]
    1834:	3000      	adds	r0, #0
    1836:	bf18      	it	ne
    1838:	2001      	movne	r0, #1
    183a:	2262      	movs	r2, #98	; 0x62
    183c:	4909      	ldr	r1, [pc, #36]	; (1864 <timer_stop+0x38>)
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <timer_stop+0x3c>)
    1840:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    1842:	1d25      	adds	r5, r4, #4
    1844:	6823      	ldr	r3, [r4, #0]
    1846:	699b      	ldr	r3, [r3, #24]
    1848:	4628      	mov	r0, r5
    184a:	4798      	blx	r3
    184c:	b138      	cbz	r0, 185e <timer_stop+0x32>
	descr->func->stop_timer(&descr->device);
    184e:	6823      	ldr	r3, [r4, #0]
    1850:	68db      	ldr	r3, [r3, #12]
    1852:	4628      	mov	r0, r5
    1854:	4798      	blx	r3
	return ERR_NONE;
    1856:	2000      	movs	r0, #0
    1858:	bd38      	pop	{r3, r4, r5, pc}
    185a:	2000      	movs	r0, #0
    185c:	e7ed      	b.n	183a <timer_stop+0xe>
		return ERR_DENIED;
    185e:	f06f 0010 	mvn.w	r0, #16
}
    1862:	bd38      	pop	{r3, r4, r5, pc}
    1864:	000092e0 	.word	0x000092e0
    1868:	000021c5 	.word	0x000021c5

0000186c <timer_add_task>:
{
    186c:	b570      	push	{r4, r5, r6, lr}
    186e:	b082      	sub	sp, #8
    1870:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    1872:	4604      	mov	r4, r0
    1874:	b328      	cbz	r0, 18c2 <timer_add_task+0x56>
    1876:	b331      	cbz	r1, 18c6 <timer_add_task+0x5a>
    1878:	6800      	ldr	r0, [r0, #0]
    187a:	3000      	adds	r0, #0
    187c:	bf18      	it	ne
    187e:	2001      	movne	r0, #1
    1880:	227b      	movs	r2, #123	; 0x7b
    1882:	4920      	ldr	r1, [pc, #128]	; (1904 <timer_add_task+0x98>)
    1884:	4b20      	ldr	r3, [pc, #128]	; (1908 <timer_add_task+0x9c>)
    1886:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1888:	7f23      	ldrb	r3, [r4, #28]
    188a:	f043 0301 	orr.w	r3, r3, #1
    188e:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    1890:	f104 0618 	add.w	r6, r4, #24
    1894:	4629      	mov	r1, r5
    1896:	4630      	mov	r0, r6
    1898:	4b1c      	ldr	r3, [pc, #112]	; (190c <timer_add_task+0xa0>)
    189a:	4798      	blx	r3
    189c:	b9a8      	cbnz	r0, 18ca <timer_add_task+0x5e>
	task->time_label = descr->time;
    189e:	6963      	ldr	r3, [r4, #20]
    18a0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    18a2:	6962      	ldr	r2, [r4, #20]
    18a4:	4629      	mov	r1, r5
    18a6:	4630      	mov	r0, r6
    18a8:	4b19      	ldr	r3, [pc, #100]	; (1910 <timer_add_task+0xa4>)
    18aa:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18ac:	7f23      	ldrb	r3, [r4, #28]
    18ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18b2:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    18b4:	7f23      	ldrb	r3, [r4, #28]
    18b6:	f013 0f02 	tst.w	r3, #2
    18ba:	d112      	bne.n	18e2 <timer_add_task+0x76>
	return ERR_NONE;
    18bc:	2000      	movs	r0, #0
}
    18be:	b002      	add	sp, #8
    18c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    18c2:	2000      	movs	r0, #0
    18c4:	e7dc      	b.n	1880 <timer_add_task+0x14>
    18c6:	2000      	movs	r0, #0
    18c8:	e7da      	b.n	1880 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18ca:	7f23      	ldrb	r3, [r4, #28]
    18cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18d0:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    18d2:	2280      	movs	r2, #128	; 0x80
    18d4:	490b      	ldr	r1, [pc, #44]	; (1904 <timer_add_task+0x98>)
    18d6:	2000      	movs	r0, #0
    18d8:	4b0b      	ldr	r3, [pc, #44]	; (1908 <timer_add_task+0x9c>)
    18da:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    18dc:	f06f 0011 	mvn.w	r0, #17
    18e0:	e7ed      	b.n	18be <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    18e2:	a801      	add	r0, sp, #4
    18e4:	4b0b      	ldr	r3, [pc, #44]	; (1914 <timer_add_task+0xa8>)
    18e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    18e8:	7f23      	ldrb	r3, [r4, #28]
    18ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    18ee:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    18f0:	6823      	ldr	r3, [r4, #0]
    18f2:	69db      	ldr	r3, [r3, #28]
    18f4:	1d20      	adds	r0, r4, #4
    18f6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    18f8:	a801      	add	r0, sp, #4
    18fa:	4b07      	ldr	r3, [pc, #28]	; (1918 <timer_add_task+0xac>)
    18fc:	4798      	blx	r3
	return ERR_NONE;
    18fe:	2000      	movs	r0, #0
    1900:	e7dd      	b.n	18be <timer_add_task+0x52>
    1902:	bf00      	nop
    1904:	000092e0 	.word	0x000092e0
    1908:	000021c5 	.word	0x000021c5
    190c:	000021cb 	.word	0x000021cb
    1910:	000016d1 	.word	0x000016d1
    1914:	00001255 	.word	0x00001255
    1918:	00001263 	.word	0x00001263

0000191c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    191c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    191e:	2300      	movs	r3, #0
    1920:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1922:	69c3      	ldr	r3, [r0, #28]
    1924:	b11b      	cbz	r3, 192e <usart_transmission_complete+0x12>
    1926:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    192a:	4610      	mov	r0, r2
    192c:	4798      	blx	r3
    192e:	bd08      	pop	{r3, pc}

00001930 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1930:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1932:	2300      	movs	r3, #0
    1934:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1936:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1938:	b11b      	cbz	r3, 1942 <usart_error+0x12>
    193a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    193e:	4610      	mov	r0, r2
    1940:	4798      	blx	r3
    1942:	bd08      	pop	{r3, pc}

00001944 <usart_fill_rx_buffer>:
{
    1944:	b538      	push	{r3, r4, r5, lr}
    1946:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1948:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    194c:	302c      	adds	r0, #44	; 0x2c
    194e:	4b03      	ldr	r3, [pc, #12]	; (195c <usart_fill_rx_buffer+0x18>)
    1950:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1952:	6a23      	ldr	r3, [r4, #32]
    1954:	b10b      	cbz	r3, 195a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1956:	4628      	mov	r0, r5
    1958:	4798      	blx	r3
    195a:	bd38      	pop	{r3, r4, r5, pc}
    195c:	00002301 	.word	0x00002301

00001960 <usart_async_write>:
{
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	460e      	mov	r6, r1
    1964:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1966:	4604      	mov	r4, r0
    1968:	b1e0      	cbz	r0, 19a4 <usart_async_write+0x44>
    196a:	b1e9      	cbz	r1, 19a8 <usart_async_write+0x48>
    196c:	1c10      	adds	r0, r2, #0
    196e:	bf18      	it	ne
    1970:	2001      	movne	r0, #1
    1972:	f240 123b 	movw	r2, #315	; 0x13b
    1976:	490f      	ldr	r1, [pc, #60]	; (19b4 <usart_async_write+0x54>)
    1978:	4b0f      	ldr	r3, [pc, #60]	; (19b8 <usart_async_write+0x58>)
    197a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    197c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1980:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1984:	429a      	cmp	r2, r3
    1986:	d111      	bne.n	19ac <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1988:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    198a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    198e:	2300      	movs	r3, #0
    1990:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1994:	2301      	movs	r3, #1
    1996:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1998:	f104 0008 	add.w	r0, r4, #8
    199c:	4b07      	ldr	r3, [pc, #28]	; (19bc <usart_async_write+0x5c>)
    199e:	4798      	blx	r3
	return (int32_t)length;
    19a0:	4628      	mov	r0, r5
    19a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    19a4:	2000      	movs	r0, #0
    19a6:	e7e4      	b.n	1972 <usart_async_write+0x12>
    19a8:	2000      	movs	r0, #0
    19aa:	e7e2      	b.n	1972 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    19ac:	f06f 001b 	mvn.w	r0, #27
}
    19b0:	bd70      	pop	{r4, r5, r6, pc}
    19b2:	bf00      	nop
    19b4:	000092f8 	.word	0x000092f8
    19b8:	000021c5 	.word	0x000021c5
    19bc:	00003647 	.word	0x00003647

000019c0 <usart_process_byte_sent>:
{
    19c0:	b510      	push	{r4, lr}
    19c2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    19c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    19c6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    19ca:	429a      	cmp	r2, r3
    19cc:	d009      	beq.n	19e2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    19ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    19d0:	1c59      	adds	r1, r3, #1
    19d2:	8781      	strh	r1, [r0, #60]	; 0x3c
    19d4:	5cd1      	ldrb	r1, [r2, r3]
    19d6:	4b04      	ldr	r3, [pc, #16]	; (19e8 <usart_process_byte_sent+0x28>)
    19d8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    19da:	4620      	mov	r0, r4
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <usart_process_byte_sent+0x2c>)
    19de:	4798      	blx	r3
    19e0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    19e2:	4b03      	ldr	r3, [pc, #12]	; (19f0 <usart_process_byte_sent+0x30>)
    19e4:	4798      	blx	r3
    19e6:	bd10      	pop	{r4, pc}
    19e8:	00003641 	.word	0x00003641
    19ec:	00003647 	.word	0x00003647
    19f0:	0000364f 	.word	0x0000364f

000019f4 <usart_async_read>:
{
    19f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19f8:	b082      	sub	sp, #8
    19fa:	460f      	mov	r7, r1
    19fc:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    19fe:	4606      	mov	r6, r0
    1a00:	b1a0      	cbz	r0, 1a2c <usart_async_read+0x38>
    1a02:	b199      	cbz	r1, 1a2c <usart_async_read+0x38>
    1a04:	2a00      	cmp	r2, #0
    1a06:	d12d      	bne.n	1a64 <usart_async_read+0x70>
    1a08:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a0c:	4929      	ldr	r1, [pc, #164]	; (1ab4 <usart_async_read+0xc0>)
    1a0e:	2000      	movs	r0, #0
    1a10:	4b29      	ldr	r3, [pc, #164]	; (1ab8 <usart_async_read+0xc4>)
    1a12:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a14:	a801      	add	r0, sp, #4
    1a16:	4b29      	ldr	r3, [pc, #164]	; (1abc <usart_async_read+0xc8>)
    1a18:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a1a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1a1e:	4b28      	ldr	r3, [pc, #160]	; (1ac0 <usart_async_read+0xcc>)
    1a20:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1a22:	a801      	add	r0, sp, #4
    1a24:	4b27      	ldr	r3, [pc, #156]	; (1ac4 <usart_async_read+0xd0>)
    1a26:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1a28:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1a2a:	e03e      	b.n	1aaa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a2c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a30:	4920      	ldr	r1, [pc, #128]	; (1ab4 <usart_async_read+0xc0>)
    1a32:	2000      	movs	r0, #0
    1a34:	4b20      	ldr	r3, [pc, #128]	; (1ab8 <usart_async_read+0xc4>)
    1a36:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a38:	a801      	add	r0, sp, #4
    1a3a:	4b20      	ldr	r3, [pc, #128]	; (1abc <usart_async_read+0xc8>)
    1a3c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a3e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a42:	4650      	mov	r0, sl
    1a44:	4b1e      	ldr	r3, [pc, #120]	; (1ac0 <usart_async_read+0xcc>)
    1a46:	4798      	blx	r3
    1a48:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1a4a:	a801      	add	r0, sp, #4
    1a4c:	4b1d      	ldr	r3, [pc, #116]	; (1ac4 <usart_async_read+0xd0>)
    1a4e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1a50:	f1b9 0f00 	cmp.w	r9, #0
    1a54:	d004      	beq.n	1a60 <usart_async_read+0x6c>
    1a56:	f1b8 0f00 	cmp.w	r8, #0
    1a5a:	d119      	bne.n	1a90 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1a5c:	2500      	movs	r5, #0
    1a5e:	e024      	b.n	1aaa <usart_async_read+0xb6>
    1a60:	2500      	movs	r5, #0
    1a62:	e022      	b.n	1aaa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a64:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a68:	4912      	ldr	r1, [pc, #72]	; (1ab4 <usart_async_read+0xc0>)
    1a6a:	2001      	movs	r0, #1
    1a6c:	4b12      	ldr	r3, [pc, #72]	; (1ab8 <usart_async_read+0xc4>)
    1a6e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a70:	a801      	add	r0, sp, #4
    1a72:	4b12      	ldr	r3, [pc, #72]	; (1abc <usart_async_read+0xc8>)
    1a74:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a76:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a7a:	4650      	mov	r0, sl
    1a7c:	4b10      	ldr	r3, [pc, #64]	; (1ac0 <usart_async_read+0xcc>)
    1a7e:	4798      	blx	r3
    1a80:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1a82:	a801      	add	r0, sp, #4
    1a84:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <usart_async_read+0xd0>)
    1a86:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1a88:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1a8a:	f1b9 0f00 	cmp.w	r9, #0
    1a8e:	d00c      	beq.n	1aaa <usart_async_read+0xb6>
{
    1a90:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1a92:	4e0d      	ldr	r6, [pc, #52]	; (1ac8 <usart_async_read+0xd4>)
    1a94:	1c60      	adds	r0, r4, #1
    1a96:	b285      	uxth	r5, r0
    1a98:	1939      	adds	r1, r7, r4
    1a9a:	4650      	mov	r0, sl
    1a9c:	47b0      	blx	r6
    1a9e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1aa0:	454c      	cmp	r4, r9
    1aa2:	d202      	bcs.n	1aaa <usart_async_read+0xb6>
    1aa4:	b2a3      	uxth	r3, r4
    1aa6:	4598      	cmp	r8, r3
    1aa8:	d8f4      	bhi.n	1a94 <usart_async_read+0xa0>
}
    1aaa:	4628      	mov	r0, r5
    1aac:	b002      	add	sp, #8
    1aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ab2:	bf00      	nop
    1ab4:	000092f8 	.word	0x000092f8
    1ab8:	000021c5 	.word	0x000021c5
    1abc:	00001255 	.word	0x00001255
    1ac0:	00002341 	.word	0x00002341
    1ac4:	00001263 	.word	0x00001263
    1ac8:	000022bd 	.word	0x000022bd

00001acc <usart_async_init>:
{
    1acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ace:	460d      	mov	r5, r1
    1ad0:	4616      	mov	r6, r2
    1ad2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1ad4:	4604      	mov	r4, r0
    1ad6:	b320      	cbz	r0, 1b22 <usart_async_init+0x56>
    1ad8:	b329      	cbz	r1, 1b26 <usart_async_init+0x5a>
    1ada:	b332      	cbz	r2, 1b2a <usart_async_init+0x5e>
    1adc:	1c18      	adds	r0, r3, #0
    1ade:	bf18      	it	ne
    1ae0:	2001      	movne	r0, #1
    1ae2:	223a      	movs	r2, #58	; 0x3a
    1ae4:	4913      	ldr	r1, [pc, #76]	; (1b34 <usart_async_init+0x68>)
    1ae6:	4b14      	ldr	r3, [pc, #80]	; (1b38 <usart_async_init+0x6c>)
    1ae8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1aea:	463a      	mov	r2, r7
    1aec:	4631      	mov	r1, r6
    1aee:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1af2:	4b12      	ldr	r3, [pc, #72]	; (1b3c <usart_async_init+0x70>)
    1af4:	4798      	blx	r3
    1af6:	b9d0      	cbnz	r0, 1b2e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1af8:	4629      	mov	r1, r5
    1afa:	f104 0008 	add.w	r0, r4, #8
    1afe:	4b10      	ldr	r3, [pc, #64]	; (1b40 <usart_async_init+0x74>)
    1b00:	4798      	blx	r3
	if (init_status) {
    1b02:	4603      	mov	r3, r0
    1b04:	b958      	cbnz	r0, 1b1e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1b06:	4a0f      	ldr	r2, [pc, #60]	; (1b44 <usart_async_init+0x78>)
    1b08:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1b0a:	4a0f      	ldr	r2, [pc, #60]	; (1b48 <usart_async_init+0x7c>)
    1b0c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1b0e:	4a0f      	ldr	r2, [pc, #60]	; (1b4c <usart_async_init+0x80>)
    1b10:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1b12:	4a0f      	ldr	r2, [pc, #60]	; (1b50 <usart_async_init+0x84>)
    1b14:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1b16:	4a0f      	ldr	r2, [pc, #60]	; (1b54 <usart_async_init+0x88>)
    1b18:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1b1a:	4a0f      	ldr	r2, [pc, #60]	; (1b58 <usart_async_init+0x8c>)
    1b1c:	6162      	str	r2, [r4, #20]
}
    1b1e:	4618      	mov	r0, r3
    1b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b22:	2000      	movs	r0, #0
    1b24:	e7dd      	b.n	1ae2 <usart_async_init+0x16>
    1b26:	2000      	movs	r0, #0
    1b28:	e7db      	b.n	1ae2 <usart_async_init+0x16>
    1b2a:	2000      	movs	r0, #0
    1b2c:	e7d9      	b.n	1ae2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1b2e:	f06f 030c 	mvn.w	r3, #12
    1b32:	e7f4      	b.n	1b1e <usart_async_init+0x52>
    1b34:	000092f8 	.word	0x000092f8
    1b38:	000021c5 	.word	0x000021c5
    1b3c:	0000226d 	.word	0x0000226d
    1b40:	000035b1 	.word	0x000035b1
    1b44:	000019f5 	.word	0x000019f5
    1b48:	00001961 	.word	0x00001961
    1b4c:	000019c1 	.word	0x000019c1
    1b50:	00001945 	.word	0x00001945
    1b54:	0000191d 	.word	0x0000191d
    1b58:	00001931 	.word	0x00001931

00001b5c <usart_async_enable>:
{
    1b5c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1b5e:	4604      	mov	r4, r0
    1b60:	2261      	movs	r2, #97	; 0x61
    1b62:	4906      	ldr	r1, [pc, #24]	; (1b7c <usart_async_enable+0x20>)
    1b64:	3000      	adds	r0, #0
    1b66:	bf18      	it	ne
    1b68:	2001      	movne	r0, #1
    1b6a:	4b05      	ldr	r3, [pc, #20]	; (1b80 <usart_async_enable+0x24>)
    1b6c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1b6e:	f104 0008 	add.w	r0, r4, #8
    1b72:	4b04      	ldr	r3, [pc, #16]	; (1b84 <usart_async_enable+0x28>)
    1b74:	4798      	blx	r3
}
    1b76:	2000      	movs	r0, #0
    1b78:	bd10      	pop	{r4, pc}
    1b7a:	bf00      	nop
    1b7c:	000092f8 	.word	0x000092f8
    1b80:	000021c5 	.word	0x000021c5
    1b84:	0000362d 	.word	0x0000362d

00001b88 <usart_async_get_io_descriptor>:
{
    1b88:	b538      	push	{r3, r4, r5, lr}
    1b8a:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1b8c:	4605      	mov	r5, r0
    1b8e:	b148      	cbz	r0, 1ba4 <usart_async_get_io_descriptor+0x1c>
    1b90:	1c08      	adds	r0, r1, #0
    1b92:	bf18      	it	ne
    1b94:	2001      	movne	r0, #1
    1b96:	2277      	movs	r2, #119	; 0x77
    1b98:	4903      	ldr	r1, [pc, #12]	; (1ba8 <usart_async_get_io_descriptor+0x20>)
    1b9a:	4b04      	ldr	r3, [pc, #16]	; (1bac <usart_async_get_io_descriptor+0x24>)
    1b9c:	4798      	blx	r3
	*io = &descr->io;
    1b9e:	6025      	str	r5, [r4, #0]
}
    1ba0:	2000      	movs	r0, #0
    1ba2:	bd38      	pop	{r3, r4, r5, pc}
    1ba4:	2000      	movs	r0, #0
    1ba6:	e7f6      	b.n	1b96 <usart_async_get_io_descriptor+0xe>
    1ba8:	000092f8 	.word	0x000092f8
    1bac:	000021c5 	.word	0x000021c5

00001bb0 <usart_async_register_callback>:
{
    1bb0:	b570      	push	{r4, r5, r6, lr}
    1bb2:	460c      	mov	r4, r1
    1bb4:	4616      	mov	r6, r2
	ASSERT(descr);
    1bb6:	4605      	mov	r5, r0
    1bb8:	2283      	movs	r2, #131	; 0x83
    1bba:	4917      	ldr	r1, [pc, #92]	; (1c18 <usart_async_register_callback+0x68>)
    1bbc:	3000      	adds	r0, #0
    1bbe:	bf18      	it	ne
    1bc0:	2001      	movne	r0, #1
    1bc2:	4b16      	ldr	r3, [pc, #88]	; (1c1c <usart_async_register_callback+0x6c>)
    1bc4:	4798      	blx	r3
	switch (type) {
    1bc6:	2c01      	cmp	r4, #1
    1bc8:	d010      	beq.n	1bec <usart_async_register_callback+0x3c>
    1bca:	b124      	cbz	r4, 1bd6 <usart_async_register_callback+0x26>
    1bcc:	2c02      	cmp	r4, #2
    1bce:	d018      	beq.n	1c02 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    1bd0:	f06f 000c 	mvn.w	r0, #12
}
    1bd4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    1bd6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1bd8:	1c32      	adds	r2, r6, #0
    1bda:	bf18      	it	ne
    1bdc:	2201      	movne	r2, #1
    1bde:	2101      	movs	r1, #1
    1be0:	f105 0008 	add.w	r0, r5, #8
    1be4:	4b0e      	ldr	r3, [pc, #56]	; (1c20 <usart_async_register_callback+0x70>)
    1be6:	4798      	blx	r3
	return ERR_NONE;
    1be8:	2000      	movs	r0, #0
		break;
    1bea:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1bec:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1bee:	1c32      	adds	r2, r6, #0
    1bf0:	bf18      	it	ne
    1bf2:	2201      	movne	r2, #1
    1bf4:	2102      	movs	r1, #2
    1bf6:	f105 0008 	add.w	r0, r5, #8
    1bfa:	4b09      	ldr	r3, [pc, #36]	; (1c20 <usart_async_register_callback+0x70>)
    1bfc:	4798      	blx	r3
	return ERR_NONE;
    1bfe:	2000      	movs	r0, #0
		break;
    1c00:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    1c02:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1c04:	1c32      	adds	r2, r6, #0
    1c06:	bf18      	it	ne
    1c08:	2201      	movne	r2, #1
    1c0a:	2103      	movs	r1, #3
    1c0c:	f105 0008 	add.w	r0, r5, #8
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <usart_async_register_callback+0x70>)
    1c12:	4798      	blx	r3
	return ERR_NONE;
    1c14:	2000      	movs	r0, #0
		break;
    1c16:	bd70      	pop	{r4, r5, r6, pc}
    1c18:	000092f8 	.word	0x000092f8
    1c1c:	000021c5 	.word	0x000021c5
    1c20:	00003659 	.word	0x00003659

00001c24 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c24:	4b0f      	ldr	r3, [pc, #60]	; (1c64 <_usb_d_find_ep+0x40>)
    1c26:	7859      	ldrb	r1, [r3, #1]
    1c28:	4288      	cmp	r0, r1
    1c2a:	d018      	beq.n	1c5e <_usb_d_find_ep+0x3a>
{
    1c2c:	b430      	push	{r4, r5}
    1c2e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c30:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c32:	f000 050f 	and.w	r5, r0, #15
    1c36:	e007      	b.n	1c48 <_usb_d_find_ep+0x24>
    1c38:	3301      	adds	r3, #1
    1c3a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c3c:	2b0d      	cmp	r3, #13
    1c3e:	d009      	beq.n	1c54 <_usb_d_find_ep+0x30>
    1c40:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c42:	7851      	ldrb	r1, [r2, #1]
    1c44:	4281      	cmp	r1, r0
    1c46:	d007      	beq.n	1c58 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1c48:	7814      	ldrb	r4, [r2, #0]
    1c4a:	2c00      	cmp	r4, #0
    1c4c:	d1f4      	bne.n	1c38 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c4e:	428d      	cmp	r5, r1
    1c50:	d1f2      	bne.n	1c38 <_usb_d_find_ep+0x14>
    1c52:	e001      	b.n	1c58 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1c54:	f04f 33ff 	mov.w	r3, #4294967295
}
    1c58:	4618      	mov	r0, r3
    1c5a:	bc30      	pop	{r4, r5}
    1c5c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c5e:	2300      	movs	r3, #0
}
    1c60:	4618      	mov	r0, r3
    1c62:	4770      	bx	lr
    1c64:	20000568 	.word	0x20000568

00001c68 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1c68:	2000      	movs	r0, #0
    1c6a:	4770      	bx	lr

00001c6c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1c6c:	b538      	push	{r3, r4, r5, lr}
    1c6e:	4604      	mov	r4, r0
    1c70:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c72:	4b09      	ldr	r3, [pc, #36]	; (1c98 <usb_d_cb_trans_more+0x2c>)
    1c74:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1c76:	4b09      	ldr	r3, [pc, #36]	; (1c9c <usb_d_cb_trans_more+0x30>)
    1c78:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1c7c:	789b      	ldrb	r3, [r3, #2]
    1c7e:	2b03      	cmp	r3, #3
    1c80:	d001      	beq.n	1c86 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1c82:	2000      	movs	r0, #0
}
    1c84:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <usb_d_cb_trans_more+0x30>)
    1c88:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1c8c:	6983      	ldr	r3, [r0, #24]
    1c8e:	4629      	mov	r1, r5
    1c90:	4620      	mov	r0, r4
    1c92:	4798      	blx	r3
    1c94:	bd38      	pop	{r3, r4, r5, pc}
    1c96:	bf00      	nop
    1c98:	00001c25 	.word	0x00001c25
    1c9c:	20000568 	.word	0x20000568

00001ca0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca2:	b085      	sub	sp, #20
    1ca4:	4606      	mov	r6, r0
    1ca6:	460d      	mov	r5, r1
    1ca8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1caa:	4b4d      	ldr	r3, [pc, #308]	; (1de0 <_usb_d_cb_trans_done+0x140>)
    1cac:	4798      	blx	r3
    1cae:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1cb0:	2d00      	cmp	r5, #0
    1cb2:	d15b      	bne.n	1d6c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1cb4:	4a4b      	ldr	r2, [pc, #300]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1cb6:	0143      	lsls	r3, r0, #5
    1cb8:	18d1      	adds	r1, r2, r3
    1cba:	2000      	movs	r0, #0
    1cbc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1cbe:	5cd3      	ldrb	r3, [r2, r3]
    1cc0:	b173      	cbz	r3, 1ce0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cc2:	4b48      	ldr	r3, [pc, #288]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1cc4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1cc8:	2201      	movs	r2, #1
    1cca:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1ccc:	4845      	ldr	r0, [pc, #276]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1cce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1cd2:	69c3      	ldr	r3, [r0, #28]
    1cd4:	463a      	mov	r2, r7
    1cd6:	78c1      	ldrb	r1, [r0, #3]
    1cd8:	4630      	mov	r0, r6
    1cda:	4798      	blx	r3
}
    1cdc:	b005      	add	sp, #20
    1cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1ce0:	788b      	ldrb	r3, [r1, #2]
    1ce2:	2b03      	cmp	r3, #3
    1ce4:	d00b      	beq.n	1cfe <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1ce6:	483f      	ldr	r0, [pc, #252]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1ce8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1cec:	4614      	mov	r4, r2
    1cee:	69d3      	ldr	r3, [r2, #28]
    1cf0:	320c      	adds	r2, #12
    1cf2:	2100      	movs	r1, #0
    1cf4:	7860      	ldrb	r0, [r4, #1]
    1cf6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1cf8:	2302      	movs	r3, #2
    1cfa:	70a3      	strb	r3, [r4, #2]
    1cfc:	e7ee      	b.n	1cdc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1cfe:	460b      	mov	r3, r1
    1d00:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1d04:	460a      	mov	r2, r1
    1d06:	69ce      	ldr	r6, [r1, #28]
    1d08:	320c      	adds	r2, #12
    1d0a:	2101      	movs	r1, #1
    1d0c:	7858      	ldrb	r0, [r3, #1]
    1d0e:	47b0      	blx	r6
		if (err) {
    1d10:	b1a0      	cbz	r0, 1d3c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1d12:	4b34      	ldr	r3, [pc, #208]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d14:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d18:	2205      	movs	r2, #5
    1d1a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1d1c:	2202      	movs	r2, #2
    1d1e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1d20:	2d00      	cmp	r5, #0
    1d22:	db09      	blt.n	1d38 <_usb_d_cb_trans_done+0x98>
    1d24:	482f      	ldr	r0, [pc, #188]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d26:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d2a:	7840      	ldrb	r0, [r0, #1]
    1d2c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1d30:	2101      	movs	r1, #1
    1d32:	4b2d      	ldr	r3, [pc, #180]	; (1de8 <_usb_d_cb_trans_done+0x148>)
    1d34:	4798      	blx	r3
    1d36:	e7d1      	b.n	1cdc <_usb_d_cb_trans_done+0x3c>
    1d38:	7858      	ldrb	r0, [r3, #1]
    1d3a:	e7f9      	b.n	1d30 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1d3c:	4829      	ldr	r0, [pc, #164]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d3e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d42:	2304      	movs	r3, #4
    1d44:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1d46:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1d48:	2200      	movs	r2, #0
    1d4a:	9201      	str	r2, [sp, #4]
    1d4c:	9202      	str	r2, [sp, #8]
    1d4e:	4295      	cmp	r5, r2
    1d50:	bfac      	ite	ge
    1d52:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1d56:	f003 030f 	andlt.w	r3, r3, #15
    1d5a:	f88d 300c 	strb.w	r3, [sp, #12]
    1d5e:	2301      	movs	r3, #1
    1d60:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1d64:	a801      	add	r0, sp, #4
    1d66:	4b21      	ldr	r3, [pc, #132]	; (1dec <_usb_d_cb_trans_done+0x14c>)
    1d68:	4798      	blx	r3
    1d6a:	e7b7      	b.n	1cdc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1d6c:	2d01      	cmp	r5, #1
    1d6e:	d00a      	beq.n	1d86 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1d70:	2d02      	cmp	r5, #2
    1d72:	d01c      	beq.n	1dae <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1d74:	2d03      	cmp	r5, #3
    1d76:	d02a      	beq.n	1dce <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1d78:	4b1a      	ldr	r3, [pc, #104]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d7a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1d7e:	2206      	movs	r2, #6
    1d80:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1d82:	70da      	strb	r2, [r3, #3]
    1d84:	e7a2      	b.n	1ccc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1d86:	4a17      	ldr	r2, [pc, #92]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d88:	0143      	lsls	r3, r0, #5
    1d8a:	18d1      	adds	r1, r2, r3
    1d8c:	2002      	movs	r0, #2
    1d8e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1d90:	5cd3      	ldrb	r3, [r2, r3]
    1d92:	b12b      	cbz	r3, 1da0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1d94:	4b13      	ldr	r3, [pc, #76]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1d96:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d9a:	2205      	movs	r2, #5
    1d9c:	709a      	strb	r2, [r3, #2]
    1d9e:	e795      	b.n	1ccc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1da0:	460b      	mov	r3, r1
    1da2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1da4:	2100      	movs	r1, #0
    1da6:	4630      	mov	r0, r6
    1da8:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <_usb_d_cb_trans_done+0x148>)
    1daa:	4798      	blx	r3
    1dac:	e78e      	b.n	1ccc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1dae:	4a0d      	ldr	r2, [pc, #52]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1db0:	0143      	lsls	r3, r0, #5
    1db2:	18d1      	adds	r1, r2, r3
    1db4:	2004      	movs	r0, #4
    1db6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1db8:	5cd3      	ldrb	r3, [r2, r3]
    1dba:	b12b      	cbz	r3, 1dc8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1dbc:	4b09      	ldr	r3, [pc, #36]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1dbe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1dc2:	2201      	movs	r2, #1
    1dc4:	709a      	strb	r2, [r3, #2]
    1dc6:	e781      	b.n	1ccc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1dc8:	2302      	movs	r3, #2
    1dca:	708b      	strb	r3, [r1, #2]
			return;
    1dcc:	e786      	b.n	1cdc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1dce:	4b05      	ldr	r3, [pc, #20]	; (1de4 <_usb_d_cb_trans_done+0x144>)
    1dd0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1dd4:	2200      	movs	r2, #0
    1dd6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1dd8:	2205      	movs	r2, #5
    1dda:	70da      	strb	r2, [r3, #3]
    1ddc:	e776      	b.n	1ccc <_usb_d_cb_trans_done+0x2c>
    1dde:	bf00      	nop
    1de0:	00001c25 	.word	0x00001c25
    1de4:	20000568 	.word	0x20000568
    1de8:	000053e5 	.word	0x000053e5
    1dec:	0000558d 	.word	0x0000558d

00001df0 <usb_d_cb_trans_setup>:
{
    1df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1df4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1df6:	4b1c      	ldr	r3, [pc, #112]	; (1e68 <usb_d_cb_trans_setup+0x78>)
    1df8:	4798      	blx	r3
    1dfa:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1dfc:	4c1b      	ldr	r4, [pc, #108]	; (1e6c <usb_d_cb_trans_setup+0x7c>)
    1dfe:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1e02:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1e04:	4621      	mov	r1, r4
    1e06:	4628      	mov	r0, r5
    1e08:	4b19      	ldr	r3, [pc, #100]	; (1e70 <usb_d_cb_trans_setup+0x80>)
    1e0a:	4798      	blx	r3
	if (n != 8) {
    1e0c:	b2c0      	uxtb	r0, r0
    1e0e:	2808      	cmp	r0, #8
    1e10:	d009      	beq.n	1e26 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e12:	2101      	movs	r1, #1
    1e14:	4628      	mov	r0, r5
    1e16:	4c17      	ldr	r4, [pc, #92]	; (1e74 <usb_d_cb_trans_setup+0x84>)
    1e18:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e1a:	2101      	movs	r1, #1
    1e1c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1e20:	47a0      	blx	r4
		return;
    1e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1e26:	2100      	movs	r1, #0
    1e28:	4628      	mov	r0, r5
    1e2a:	4f12      	ldr	r7, [pc, #72]	; (1e74 <usb_d_cb_trans_setup+0x84>)
    1e2c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1e2e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1e32:	2100      	movs	r1, #0
    1e34:	4640      	mov	r0, r8
    1e36:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1e38:	4b0c      	ldr	r3, [pc, #48]	; (1e6c <usb_d_cb_trans_setup+0x7c>)
    1e3a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1e3e:	2201      	movs	r2, #1
    1e40:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1e42:	695b      	ldr	r3, [r3, #20]
    1e44:	4621      	mov	r1, r4
    1e46:	4628      	mov	r0, r5
    1e48:	4798      	blx	r3
    1e4a:	b108      	cbz	r0, 1e50 <usb_d_cb_trans_setup+0x60>
    1e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1e50:	4b06      	ldr	r3, [pc, #24]	; (1e6c <usb_d_cb_trans_setup+0x7c>)
    1e52:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1e56:	2305      	movs	r3, #5
    1e58:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e5a:	2101      	movs	r1, #1
    1e5c:	4628      	mov	r0, r5
    1e5e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e60:	2101      	movs	r1, #1
    1e62:	4640      	mov	r0, r8
    1e64:	47b8      	blx	r7
    1e66:	e7f1      	b.n	1e4c <usb_d_cb_trans_setup+0x5c>
    1e68:	00001c25 	.word	0x00001c25
    1e6c:	20000568 	.word	0x20000568
    1e70:	0000552d 	.word	0x0000552d
    1e74:	000053e5 	.word	0x000053e5

00001e78 <usb_d_init>:

int32_t usb_d_init(void)
{
    1e78:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1e7a:	4b11      	ldr	r3, [pc, #68]	; (1ec0 <usb_d_init+0x48>)
    1e7c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1e7e:	2800      	cmp	r0, #0
    1e80:	db1d      	blt.n	1ebe <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1e82:	4c10      	ldr	r4, [pc, #64]	; (1ec4 <usb_d_init+0x4c>)
    1e84:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1e88:	2100      	movs	r1, #0
    1e8a:	4620      	mov	r0, r4
    1e8c:	4b0e      	ldr	r3, [pc, #56]	; (1ec8 <usb_d_init+0x50>)
    1e8e:	4798      	blx	r3
    1e90:	4623      	mov	r3, r4
    1e92:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1e96:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1e98:	4a0c      	ldr	r2, [pc, #48]	; (1ecc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1e9a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1e9c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1e9e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1ea0:	61da      	str	r2, [r3, #28]
    1ea2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ea4:	4283      	cmp	r3, r0
    1ea6:	d1f8      	bne.n	1e9a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1ea8:	4909      	ldr	r1, [pc, #36]	; (1ed0 <usb_d_init+0x58>)
    1eaa:	2000      	movs	r0, #0
    1eac:	4c09      	ldr	r4, [pc, #36]	; (1ed4 <usb_d_init+0x5c>)
    1eae:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1eb0:	4909      	ldr	r1, [pc, #36]	; (1ed8 <usb_d_init+0x60>)
    1eb2:	2001      	movs	r0, #1
    1eb4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1eb6:	4909      	ldr	r1, [pc, #36]	; (1edc <usb_d_init+0x64>)
    1eb8:	2002      	movs	r0, #2
    1eba:	47a0      	blx	r4
	return ERR_NONE;
    1ebc:	2000      	movs	r0, #0
}
    1ebe:	bd10      	pop	{r4, pc}
    1ec0:	00004dbd 	.word	0x00004dbd
    1ec4:	20000568 	.word	0x20000568
    1ec8:	000088bf 	.word	0x000088bf
    1ecc:	00001c69 	.word	0x00001c69
    1ed0:	00001df1 	.word	0x00001df1
    1ed4:	00005795 	.word	0x00005795
    1ed8:	00001c6d 	.word	0x00001c6d
    1edc:	00001ca1 	.word	0x00001ca1

00001ee0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1ee0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1ee2:	4b01      	ldr	r3, [pc, #4]	; (1ee8 <usb_d_register_callback+0x8>)
    1ee4:	4798      	blx	r3
    1ee6:	bd08      	pop	{r3, pc}
    1ee8:	0000576d 	.word	0x0000576d

00001eec <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1eec:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1eee:	4b01      	ldr	r3, [pc, #4]	; (1ef4 <usb_d_enable+0x8>)
    1ef0:	4798      	blx	r3
}
    1ef2:	bd08      	pop	{r3, pc}
    1ef4:	00004ec5 	.word	0x00004ec5

00001ef8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1ef8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    1efa:	4b01      	ldr	r3, [pc, #4]	; (1f00 <usb_d_attach+0x8>)
    1efc:	4798      	blx	r3
    1efe:	bd08      	pop	{r3, pc}
    1f00:	00004f31 	.word	0x00004f31

00001f04 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1f04:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1f06:	4b01      	ldr	r3, [pc, #4]	; (1f0c <usb_d_set_address+0x8>)
    1f08:	4798      	blx	r3
    1f0a:	bd08      	pop	{r3, pc}
    1f0c:	00004f43 	.word	0x00004f43

00001f10 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f12:	4606      	mov	r6, r0
    1f14:	460c      	mov	r4, r1
    1f16:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f18:	4b0f      	ldr	r3, [pc, #60]	; (1f58 <usb_d_ep_init+0x48>)
    1f1a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1f1c:	2800      	cmp	r0, #0
    1f1e:	da14      	bge.n	1f4a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1f20:	20ff      	movs	r0, #255	; 0xff
    1f22:	4b0d      	ldr	r3, [pc, #52]	; (1f58 <usb_d_ep_init+0x48>)
    1f24:	4798      	blx	r3
		if (ep_index < 0) {
    1f26:	1e05      	subs	r5, r0, #0
    1f28:	db12      	blt.n	1f50 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1f2a:	463a      	mov	r2, r7
    1f2c:	4621      	mov	r1, r4
    1f2e:	4630      	mov	r0, r6
    1f30:	4b0a      	ldr	r3, [pc, #40]	; (1f5c <usb_d_ep_init+0x4c>)
    1f32:	4798      	blx	r3
	if (rc < 0) {
    1f34:	2800      	cmp	r0, #0
    1f36:	db0d      	blt.n	1f54 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1f38:	4b09      	ldr	r3, [pc, #36]	; (1f60 <usb_d_ep_init+0x50>)
    1f3a:	0168      	lsls	r0, r5, #5
    1f3c:	181a      	adds	r2, r3, r0
    1f3e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1f40:	f004 0403 	and.w	r4, r4, #3
    1f44:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1f46:	2000      	movs	r0, #0
    1f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1f4a:	f06f 0013 	mvn.w	r0, #19
    1f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1f50:	f06f 0014 	mvn.w	r0, #20
}
    1f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f56:	bf00      	nop
    1f58:	00001c25 	.word	0x00001c25
    1f5c:	00004f51 	.word	0x00004f51
    1f60:	20000568 	.word	0x20000568

00001f64 <usb_d_ep0_init>:
{
    1f64:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1f66:	4602      	mov	r2, r0
    1f68:	2100      	movs	r1, #0
    1f6a:	4608      	mov	r0, r1
    1f6c:	4b01      	ldr	r3, [pc, #4]	; (1f74 <usb_d_ep0_init+0x10>)
    1f6e:	4798      	blx	r3
}
    1f70:	bd08      	pop	{r3, pc}
    1f72:	bf00      	nop
    1f74:	00001f11 	.word	0x00001f11

00001f78 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1f78:	b538      	push	{r3, r4, r5, lr}
    1f7a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <usb_d_ep_deinit+0x20>)
    1f7e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1f80:	1e04      	subs	r4, r0, #0
    1f82:	db07      	blt.n	1f94 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1f84:	4628      	mov	r0, r5
    1f86:	4b05      	ldr	r3, [pc, #20]	; (1f9c <usb_d_ep_deinit+0x24>)
    1f88:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1f8a:	4805      	ldr	r0, [pc, #20]	; (1fa0 <usb_d_ep_deinit+0x28>)
    1f8c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1f90:	23ff      	movs	r3, #255	; 0xff
    1f92:	7043      	strb	r3, [r0, #1]
    1f94:	bd38      	pop	{r3, r4, r5, pc}
    1f96:	bf00      	nop
    1f98:	00001c25 	.word	0x00001c25
    1f9c:	00005069 	.word	0x00005069
    1fa0:	20000568 	.word	0x20000568

00001fa4 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1fa4:	b538      	push	{r3, r4, r5, lr}
    1fa6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fa8:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <usb_d_ep_enable+0x40>)
    1faa:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1fac:	1e04      	subs	r4, r0, #0
    1fae:	db16      	blt.n	1fde <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1fb0:	0163      	lsls	r3, r4, #5
    1fb2:	4a0d      	ldr	r2, [pc, #52]	; (1fe8 <usb_d_ep_enable+0x44>)
    1fb4:	5cd3      	ldrb	r3, [r2, r3]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	bf0c      	ite	eq
    1fba:	2202      	moveq	r2, #2
    1fbc:	2201      	movne	r2, #1
    1fbe:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <usb_d_ep_enable+0x44>)
    1fc0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1fc4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1fc6:	4628      	mov	r0, r5
    1fc8:	4b08      	ldr	r3, [pc, #32]	; (1fec <usb_d_ep_enable+0x48>)
    1fca:	4798      	blx	r3
	if (rc < 0) {
    1fcc:	2800      	cmp	r0, #0
    1fce:	db00      	blt.n	1fd2 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1fd0:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1fd2:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <usb_d_ep_enable+0x44>)
    1fd4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1fd8:	2300      	movs	r3, #0
    1fda:	70a3      	strb	r3, [r4, #2]
    1fdc:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1fde:	f06f 0011 	mvn.w	r0, #17
    1fe2:	e7f5      	b.n	1fd0 <usb_d_ep_enable+0x2c>
    1fe4:	00001c25 	.word	0x00001c25
    1fe8:	20000568 	.word	0x20000568
    1fec:	0000512d 	.word	0x0000512d

00001ff0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ff4:	b086      	sub	sp, #24
    1ff6:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1ff8:	7a07      	ldrb	r7, [r0, #8]
    1ffa:	4638      	mov	r0, r7
    1ffc:	4b3f      	ldr	r3, [pc, #252]	; (20fc <usb_d_ep_transfer+0x10c>)
    1ffe:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2000:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    2002:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2006:	1e06      	subs	r6, r0, #0
    2008:	db72      	blt.n	20f0 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    200a:	a804      	add	r0, sp, #16
    200c:	4b3c      	ldr	r3, [pc, #240]	; (2100 <usb_d_ep_transfer+0x110>)
    200e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2010:	4b3c      	ldr	r3, [pc, #240]	; (2104 <usb_d_ep_transfer+0x114>)
    2012:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2016:	789b      	ldrb	r3, [r3, #2]
    2018:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    201c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2020:	b2db      	uxtb	r3, r3
    2022:	2b01      	cmp	r3, #1
    2024:	d011      	beq.n	204a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2026:	a804      	add	r0, sp, #16
    2028:	4b37      	ldr	r3, [pc, #220]	; (2108 <usb_d_ep_transfer+0x118>)
    202a:	4798      	blx	r3
		switch (state) {
    202c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2030:	b2db      	uxtb	r3, r3
    2032:	2b05      	cmp	r3, #5
    2034:	d05f      	beq.n	20f6 <usb_d_ep_transfer+0x106>
    2036:	2b06      	cmp	r3, #6
    2038:	d023      	beq.n	2082 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    203a:	2b00      	cmp	r3, #0
    203c:	bf0c      	ite	eq
    203e:	f06f 0012 	mvneq.w	r0, #18
    2042:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2044:	b006      	add	sp, #24
    2046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    204a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2104 <usb_d_ep_transfer+0x114>
    204e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    2052:	eb0a 0309 	add.w	r3, sl, r9
    2056:	2203      	movs	r2, #3
    2058:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    205a:	a804      	add	r0, sp, #16
    205c:	4b2a      	ldr	r3, [pc, #168]	; (2108 <usb_d_ep_transfer+0x118>)
    205e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2060:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2064:	b183      	cbz	r3, 2088 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2066:	7a22      	ldrb	r2, [r4, #8]
    2068:	3500      	adds	r5, #0
    206a:	bf18      	it	ne
    206c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    206e:	6823      	ldr	r3, [r4, #0]
    2070:	9301      	str	r3, [sp, #4]
    2072:	f8cd 8008 	str.w	r8, [sp, #8]
    2076:	f017 0f80 	tst.w	r7, #128	; 0x80
    207a:	d119      	bne.n	20b0 <usb_d_ep_transfer+0xc0>
    207c:	f002 030f 	and.w	r3, r2, #15
    2080:	e018      	b.n	20b4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    2082:	f06f 000f 	mvn.w	r0, #15
    2086:	e7dd      	b.n	2044 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2088:	4b1e      	ldr	r3, [pc, #120]	; (2104 <usb_d_ep_transfer+0x114>)
    208a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    208e:	7cda      	ldrb	r2, [r3, #19]
    2090:	7c9d      	ldrb	r5, [r3, #18]
    2092:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    2096:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    2098:	b9a5      	cbnz	r5, 20c4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    209a:	4b1a      	ldr	r3, [pc, #104]	; (2104 <usb_d_ep_transfer+0x114>)
    209c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    20a0:	2304      	movs	r3, #4
    20a2:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    20a4:	2300      	movs	r3, #0
			zlp                 = true;
    20a6:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20a8:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20aa:	6821      	ldr	r1, [r4, #0]
    20ac:	9101      	str	r1, [sp, #4]
    20ae:	9302      	str	r3, [sp, #8]
    20b0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    20b4:	f88d 300c 	strb.w	r3, [sp, #12]
    20b8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    20bc:	a801      	add	r0, sp, #4
    20be:	4b13      	ldr	r3, [pc, #76]	; (210c <usb_d_ep_transfer+0x11c>)
    20c0:	4798      	blx	r3
	return rc;
    20c2:	e7bf      	b.n	2044 <usb_d_ep_transfer+0x54>
    20c4:	4643      	mov	r3, r8
    20c6:	45a8      	cmp	r8, r5
    20c8:	bf28      	it	cs
    20ca:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    20cc:	4a0d      	ldr	r2, [pc, #52]	; (2104 <usb_d_ep_transfer+0x114>)
    20ce:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    20d2:	f996 200c 	ldrsb.w	r2, [r6, #12]
    20d6:	2a00      	cmp	r2, #0
    20d8:	db05      	blt.n	20e6 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20da:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20dc:	6821      	ldr	r1, [r4, #0]
    20de:	9101      	str	r1, [sp, #4]
    20e0:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20e2:	2500      	movs	r5, #0
    20e4:	e7ca      	b.n	207c <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    20e6:	429d      	cmp	r5, r3
    20e8:	bf94      	ite	ls
    20ea:	2500      	movls	r5, #0
    20ec:	2501      	movhi	r5, #1
    20ee:	e7db      	b.n	20a8 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    20f0:	f06f 0011 	mvn.w	r0, #17
    20f4:	e7a6      	b.n	2044 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    20f6:	2002      	movs	r0, #2
    20f8:	e7a4      	b.n	2044 <usb_d_ep_transfer+0x54>
    20fa:	bf00      	nop
    20fc:	00001c25 	.word	0x00001c25
    2100:	00001255 	.word	0x00001255
    2104:	20000568 	.word	0x20000568
    2108:	00001263 	.word	0x00001263
    210c:	0000558d 	.word	0x0000558d

00002110 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2110:	b538      	push	{r3, r4, r5, lr}
    2112:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2114:	b141      	cbz	r1, 2128 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2116:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2118:	bf0c      	ite	eq
    211a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    211c:	2102      	movne	r1, #2
    211e:	4b13      	ldr	r3, [pc, #76]	; (216c <usb_d_ep_halt+0x5c>)
    2120:	4798      	blx	r3
    2122:	4603      	mov	r3, r0
	}
}
    2124:	4618      	mov	r0, r3
    2126:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2128:	4b11      	ldr	r3, [pc, #68]	; (2170 <usb_d_ep_halt+0x60>)
    212a:	4798      	blx	r3
	if (ep_index < 0) {
    212c:	1e05      	subs	r5, r0, #0
    212e:	db19      	blt.n	2164 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2130:	2102      	movs	r1, #2
    2132:	4620      	mov	r0, r4
    2134:	4b0d      	ldr	r3, [pc, #52]	; (216c <usb_d_ep_halt+0x5c>)
    2136:	4798      	blx	r3
    2138:	4603      	mov	r3, r0
    213a:	2800      	cmp	r0, #0
    213c:	d0f2      	beq.n	2124 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    213e:	2100      	movs	r1, #0
    2140:	4620      	mov	r0, r4
    2142:	4b0a      	ldr	r3, [pc, #40]	; (216c <usb_d_ep_halt+0x5c>)
    2144:	4798      	blx	r3
		if (rc < 0) {
    2146:	1e03      	subs	r3, r0, #0
    2148:	dbec      	blt.n	2124 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    214a:	4b0a      	ldr	r3, [pc, #40]	; (2174 <usb_d_ep_halt+0x64>)
    214c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2150:	2201      	movs	r2, #1
    2152:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2154:	2103      	movs	r1, #3
    2156:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2158:	69db      	ldr	r3, [r3, #28]
    215a:	2200      	movs	r2, #0
    215c:	4620      	mov	r0, r4
    215e:	4798      	blx	r3
	return ERR_NONE;
    2160:	2300      	movs	r3, #0
    2162:	e7df      	b.n	2124 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2164:	f06f 0311 	mvn.w	r3, #17
    2168:	e7dc      	b.n	2124 <usb_d_ep_halt+0x14>
    216a:	bf00      	nop
    216c:	000053e5 	.word	0x000053e5
    2170:	00001c25 	.word	0x00001c25
    2174:	20000568 	.word	0x20000568

00002178 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2178:	b538      	push	{r3, r4, r5, lr}
    217a:	460d      	mov	r5, r1
    217c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    217e:	4b0e      	ldr	r3, [pc, #56]	; (21b8 <usb_d_ep_register_callback+0x40>)
    2180:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2182:	4b0e      	ldr	r3, [pc, #56]	; (21bc <usb_d_ep_register_callback+0x44>)
    2184:	2c00      	cmp	r4, #0
    2186:	bf08      	it	eq
    2188:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    218a:	2800      	cmp	r0, #0
    218c:	db13      	blt.n	21b6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    218e:	2d01      	cmp	r5, #1
    2190:	d008      	beq.n	21a4 <usb_d_ep_register_callback+0x2c>
    2192:	b115      	cbz	r5, 219a <usb_d_ep_register_callback+0x22>
    2194:	2d02      	cmp	r5, #2
    2196:	d00a      	beq.n	21ae <usb_d_ep_register_callback+0x36>
    2198:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    219a:	4b09      	ldr	r3, [pc, #36]	; (21c0 <usb_d_ep_register_callback+0x48>)
    219c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21a0:	6144      	str	r4, [r0, #20]
		break;
    21a2:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    21a4:	4b06      	ldr	r3, [pc, #24]	; (21c0 <usb_d_ep_register_callback+0x48>)
    21a6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21aa:	6184      	str	r4, [r0, #24]
		break;
    21ac:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    21ae:	4b04      	ldr	r3, [pc, #16]	; (21c0 <usb_d_ep_register_callback+0x48>)
    21b0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21b4:	61c4      	str	r4, [r0, #28]
    21b6:	bd38      	pop	{r3, r4, r5, pc}
    21b8:	00001c25 	.word	0x00001c25
    21bc:	00001c69 	.word	0x00001c69
    21c0:	20000568 	.word	0x20000568

000021c4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    21c4:	b900      	cbnz	r0, 21c8 <assert+0x4>
		__asm("BKPT #0");
    21c6:	be00      	bkpt	0x0000
    21c8:	4770      	bx	lr

000021ca <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21ca:	6803      	ldr	r3, [r0, #0]
    21cc:	b14b      	cbz	r3, 21e2 <is_list_element+0x18>
		if (it == element) {
    21ce:	428b      	cmp	r3, r1
    21d0:	d009      	beq.n	21e6 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    21d2:	681b      	ldr	r3, [r3, #0]
    21d4:	b11b      	cbz	r3, 21de <is_list_element+0x14>
		if (it == element) {
    21d6:	4299      	cmp	r1, r3
    21d8:	d1fb      	bne.n	21d2 <is_list_element+0x8>
			return true;
    21da:	2001      	movs	r0, #1
		}
	}

	return false;
}
    21dc:	4770      	bx	lr
	return false;
    21de:	2000      	movs	r0, #0
    21e0:	4770      	bx	lr
    21e2:	2000      	movs	r0, #0
    21e4:	4770      	bx	lr
			return true;
    21e6:	2001      	movs	r0, #1
    21e8:	4770      	bx	lr
	...

000021ec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    21ec:	b538      	push	{r3, r4, r5, lr}
    21ee:	4604      	mov	r4, r0
    21f0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    21f2:	4b06      	ldr	r3, [pc, #24]	; (220c <list_insert_as_head+0x20>)
    21f4:	4798      	blx	r3
    21f6:	f080 0001 	eor.w	r0, r0, #1
    21fa:	2239      	movs	r2, #57	; 0x39
    21fc:	4904      	ldr	r1, [pc, #16]	; (2210 <list_insert_as_head+0x24>)
    21fe:	b2c0      	uxtb	r0, r0
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <list_insert_as_head+0x28>)
    2202:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2204:	6823      	ldr	r3, [r4, #0]
    2206:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2208:	6025      	str	r5, [r4, #0]
    220a:	bd38      	pop	{r3, r4, r5, pc}
    220c:	000021cb 	.word	0x000021cb
    2210:	00009318 	.word	0x00009318
    2214:	000021c5 	.word	0x000021c5

00002218 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2218:	6803      	ldr	r3, [r0, #0]
    221a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    221c:	6001      	str	r1, [r0, #0]
    221e:	4770      	bx	lr

00002220 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	4605      	mov	r5, r0
    2224:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    2226:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2228:	4b0a      	ldr	r3, [pc, #40]	; (2254 <list_insert_at_end+0x34>)
    222a:	4798      	blx	r3
    222c:	f080 0001 	eor.w	r0, r0, #1
    2230:	224f      	movs	r2, #79	; 0x4f
    2232:	4909      	ldr	r1, [pc, #36]	; (2258 <list_insert_at_end+0x38>)
    2234:	b2c0      	uxtb	r0, r0
    2236:	4b09      	ldr	r3, [pc, #36]	; (225c <list_insert_at_end+0x3c>)
    2238:	4798      	blx	r3

	if (!list->head) {
    223a:	682b      	ldr	r3, [r5, #0]
    223c:	b91b      	cbnz	r3, 2246 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    223e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2240:	6033      	str	r3, [r6, #0]
		return;
    2242:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    2244:	461c      	mov	r4, r3
	while (it->next) {
    2246:	6823      	ldr	r3, [r4, #0]
    2248:	2b00      	cmp	r3, #0
    224a:	d1fb      	bne.n	2244 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    224c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    224e:	6033      	str	r3, [r6, #0]
    2250:	bd70      	pop	{r4, r5, r6, pc}
    2252:	bf00      	nop
    2254:	000021cb 	.word	0x000021cb
    2258:	00009318 	.word	0x00009318
    225c:	000021c5 	.word	0x000021c5

00002260 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2260:	6803      	ldr	r3, [r0, #0]
    2262:	b10b      	cbz	r3, 2268 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2264:	681a      	ldr	r2, [r3, #0]
    2266:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2268:	4618      	mov	r0, r3
    226a:	4770      	bx	lr

0000226c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    226c:	b570      	push	{r4, r5, r6, lr}
    226e:	460e      	mov	r6, r1
    2270:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    2272:	4604      	mov	r4, r0
    2274:	b178      	cbz	r0, 2296 <ringbuffer_init+0x2a>
    2276:	b181      	cbz	r1, 229a <ringbuffer_init+0x2e>
    2278:	b1a2      	cbz	r2, 22a4 <ringbuffer_init+0x38>
    227a:	2001      	movs	r0, #1
    227c:	2228      	movs	r2, #40	; 0x28
    227e:	490d      	ldr	r1, [pc, #52]	; (22b4 <ringbuffer_init+0x48>)
    2280:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <ringbuffer_init+0x4c>)
    2282:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2284:	1e6b      	subs	r3, r5, #1
    2286:	421d      	tst	r5, r3
    2288:	d109      	bne.n	229e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    228a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    228c:	2000      	movs	r0, #0
    228e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    2290:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2292:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2294:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2296:	2000      	movs	r0, #0
    2298:	e7f0      	b.n	227c <ringbuffer_init+0x10>
    229a:	2000      	movs	r0, #0
    229c:	e7ee      	b.n	227c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    229e:	f06f 000c 	mvn.w	r0, #12
    22a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22a4:	2228      	movs	r2, #40	; 0x28
    22a6:	4903      	ldr	r1, [pc, #12]	; (22b4 <ringbuffer_init+0x48>)
    22a8:	2000      	movs	r0, #0
    22aa:	4b03      	ldr	r3, [pc, #12]	; (22b8 <ringbuffer_init+0x4c>)
    22ac:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    22ae:	1e6b      	subs	r3, r5, #1
    22b0:	e7eb      	b.n	228a <ringbuffer_init+0x1e>
    22b2:	bf00      	nop
    22b4:	00009338 	.word	0x00009338
    22b8:	000021c5 	.word	0x000021c5

000022bc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    22bc:	b538      	push	{r3, r4, r5, lr}
    22be:	460d      	mov	r5, r1
	ASSERT(rb && data);
    22c0:	4604      	mov	r4, r0
    22c2:	b1a0      	cbz	r0, 22ee <ringbuffer_get+0x32>
    22c4:	1c08      	adds	r0, r1, #0
    22c6:	bf18      	it	ne
    22c8:	2001      	movne	r0, #1
    22ca:	2240      	movs	r2, #64	; 0x40
    22cc:	490a      	ldr	r1, [pc, #40]	; (22f8 <ringbuffer_get+0x3c>)
    22ce:	4b0b      	ldr	r3, [pc, #44]	; (22fc <ringbuffer_get+0x40>)
    22d0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    22d2:	68a3      	ldr	r3, [r4, #8]
    22d4:	68e2      	ldr	r2, [r4, #12]
    22d6:	429a      	cmp	r2, r3
    22d8:	d00b      	beq.n	22f2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    22da:	6862      	ldr	r2, [r4, #4]
    22dc:	4013      	ands	r3, r2
    22de:	6822      	ldr	r2, [r4, #0]
    22e0:	5cd3      	ldrb	r3, [r2, r3]
    22e2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    22e4:	68a3      	ldr	r3, [r4, #8]
    22e6:	3301      	adds	r3, #1
    22e8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    22ea:	2000      	movs	r0, #0
    22ec:	bd38      	pop	{r3, r4, r5, pc}
    22ee:	2000      	movs	r0, #0
    22f0:	e7eb      	b.n	22ca <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    22f2:	f06f 0009 	mvn.w	r0, #9
}
    22f6:	bd38      	pop	{r3, r4, r5, pc}
    22f8:	00009338 	.word	0x00009338
    22fc:	000021c5 	.word	0x000021c5

00002300 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2300:	b538      	push	{r3, r4, r5, lr}
    2302:	460d      	mov	r5, r1
	ASSERT(rb);
    2304:	4604      	mov	r4, r0
    2306:	2251      	movs	r2, #81	; 0x51
    2308:	490b      	ldr	r1, [pc, #44]	; (2338 <ringbuffer_put+0x38>)
    230a:	3000      	adds	r0, #0
    230c:	bf18      	it	ne
    230e:	2001      	movne	r0, #1
    2310:	4b0a      	ldr	r3, [pc, #40]	; (233c <ringbuffer_put+0x3c>)
    2312:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2314:	68e3      	ldr	r3, [r4, #12]
    2316:	6862      	ldr	r2, [r4, #4]
    2318:	4013      	ands	r3, r2
    231a:	6822      	ldr	r2, [r4, #0]
    231c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    231e:	68e3      	ldr	r3, [r4, #12]
    2320:	6861      	ldr	r1, [r4, #4]
    2322:	68a2      	ldr	r2, [r4, #8]
    2324:	1a9a      	subs	r2, r3, r2
    2326:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2328:	bf84      	itt	hi
    232a:	1a59      	subhi	r1, r3, r1
    232c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    232e:	3301      	adds	r3, #1
    2330:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2332:	2000      	movs	r0, #0
    2334:	bd38      	pop	{r3, r4, r5, pc}
    2336:	bf00      	nop
    2338:	00009338 	.word	0x00009338
    233c:	000021c5 	.word	0x000021c5

00002340 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2340:	b510      	push	{r4, lr}
	ASSERT(rb);
    2342:	4604      	mov	r4, r0
    2344:	2267      	movs	r2, #103	; 0x67
    2346:	4905      	ldr	r1, [pc, #20]	; (235c <ringbuffer_num+0x1c>)
    2348:	3000      	adds	r0, #0
    234a:	bf18      	it	ne
    234c:	2001      	movne	r0, #1
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <ringbuffer_num+0x20>)
    2350:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2352:	68e0      	ldr	r0, [r4, #12]
    2354:	68a3      	ldr	r3, [r4, #8]
}
    2356:	1ac0      	subs	r0, r0, r3
    2358:	bd10      	pop	{r4, pc}
    235a:	bf00      	nop
    235c:	00009338 	.word	0x00009338
    2360:	000021c5 	.word	0x000021c5

00002364 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2364:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2366:	4a06      	ldr	r2, [pc, #24]	; (2380 <_sbrk+0x1c>)
    2368:	6812      	ldr	r2, [r2, #0]
    236a:	b122      	cbz	r2, 2376 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    236c:	4a04      	ldr	r2, [pc, #16]	; (2380 <_sbrk+0x1c>)
    236e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2370:	4403      	add	r3, r0
    2372:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2374:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2376:	4903      	ldr	r1, [pc, #12]	; (2384 <_sbrk+0x20>)
    2378:	4a01      	ldr	r2, [pc, #4]	; (2380 <_sbrk+0x1c>)
    237a:	6011      	str	r1, [r2, #0]
    237c:	e7f6      	b.n	236c <_sbrk+0x8>
    237e:	bf00      	nop
    2380:	20000708 	.word	0x20000708
    2384:	20012a60 	.word	0x20012a60

00002388 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2388:	6940      	ldr	r0, [r0, #20]
    238a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    238e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2392:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    2394:	0040      	lsls	r0, r0, #1
    2396:	3076      	adds	r0, #118	; 0x76
}
    2398:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    239c:	4770      	bx	lr
	...

000023a0 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    23a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    23a2:	f013 0f01 	tst.w	r3, #1
    23a6:	d11b      	bne.n	23e0 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23aa:	f013 0f03 	tst.w	r3, #3
    23ae:	d1fb      	bne.n	23a8 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    23b0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    23b2:	f013 0f02 	tst.w	r3, #2
    23b6:	d00d      	beq.n	23d4 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    23b8:	8803      	ldrh	r3, [r0, #0]
    23ba:	f023 0302 	bic.w	r3, r3, #2
    23be:	041b      	lsls	r3, r3, #16
    23c0:	0c1b      	lsrs	r3, r3, #16
    23c2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23c6:	f013 0f03 	tst.w	r3, #3
    23ca:	d1fb      	bne.n	23c4 <_adc_init+0x24>
    23cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23ce:	f013 0f02 	tst.w	r3, #2
    23d2:	d1fb      	bne.n	23cc <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    23d4:	2301      	movs	r3, #1
    23d6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23da:	f013 0f03 	tst.w	r3, #3
    23de:	d1fb      	bne.n	23d8 <_adc_init+0x38>
    23e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23e2:	f013 0f01 	tst.w	r3, #1
    23e6:	d1fb      	bne.n	23e0 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    23e8:	2316      	movs	r3, #22
    23ea:	4a37      	ldr	r2, [pc, #220]	; (24c8 <_adc_init+0x128>)
    23ec:	fb03 2301 	mla	r3, r3, r1, r2
    23f0:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    23f2:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    23fa:	2b00      	cmp	r3, #0
    23fc:	d1fa      	bne.n	23f4 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    23fe:	2316      	movs	r3, #22
    2400:	4a31      	ldr	r2, [pc, #196]	; (24c8 <_adc_init+0x128>)
    2402:	fb03 2301 	mla	r3, r3, r1, r2
    2406:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2408:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    240a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2410:	2b00      	cmp	r3, #0
    2412:	d1fa      	bne.n	240a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2414:	2316      	movs	r3, #22
    2416:	4a2c      	ldr	r2, [pc, #176]	; (24c8 <_adc_init+0x128>)
    2418:	fb03 2301 	mla	r3, r3, r1, r2
    241c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    241e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2420:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2422:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2424:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2426:	f3c3 030b 	ubfx	r3, r3, #0, #12
    242a:	2b00      	cmp	r3, #0
    242c:	d1fa      	bne.n	2424 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    242e:	2316      	movs	r3, #22
    2430:	4a25      	ldr	r2, [pc, #148]	; (24c8 <_adc_init+0x128>)
    2432:	fb03 2301 	mla	r3, r3, r1, r2
    2436:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2438:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    243a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2440:	2b00      	cmp	r3, #0
    2442:	d1fa      	bne.n	243a <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2444:	2316      	movs	r3, #22
    2446:	4a20      	ldr	r2, [pc, #128]	; (24c8 <_adc_init+0x128>)
    2448:	fb03 2301 	mla	r3, r3, r1, r2
    244c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    244e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2450:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2452:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2456:	2b00      	cmp	r3, #0
    2458:	d1fa      	bne.n	2450 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    245a:	2316      	movs	r3, #22
    245c:	4a1a      	ldr	r2, [pc, #104]	; (24c8 <_adc_init+0x128>)
    245e:	fb03 2301 	mla	r3, r3, r1, r2
    2462:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2464:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2466:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2468:	f013 0f80 	tst.w	r3, #128	; 0x80
    246c:	d1fb      	bne.n	2466 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    246e:	2316      	movs	r3, #22
    2470:	4a15      	ldr	r2, [pc, #84]	; (24c8 <_adc_init+0x128>)
    2472:	fb03 2301 	mla	r3, r3, r1, r2
    2476:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2478:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    247a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    247c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2480:	d1fb      	bne.n	247a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2482:	2316      	movs	r3, #22
    2484:	4a10      	ldr	r2, [pc, #64]	; (24c8 <_adc_init+0x128>)
    2486:	fb03 2301 	mla	r3, r3, r1, r2
    248a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    248c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    248e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2490:	f413 7f00 	tst.w	r3, #512	; 0x200
    2494:	d1fb      	bne.n	248e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2496:	2316      	movs	r3, #22
    2498:	4a0b      	ldr	r2, [pc, #44]	; (24c8 <_adc_init+0x128>)
    249a:	fb03 2301 	mla	r3, r3, r1, r2
    249e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    24a0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    24a8:	d1fb      	bne.n	24a2 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    24aa:	2216      	movs	r2, #22
    24ac:	4b06      	ldr	r3, [pc, #24]	; (24c8 <_adc_init+0x128>)
    24ae:	fb02 3101 	mla	r1, r2, r1, r3
    24b2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    24b4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    24b6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    24b8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24bc:	f013 0f03 	tst.w	r3, #3
    24c0:	d1fb      	bne.n	24ba <_adc_init+0x11a>

	return ERR_NONE;
}
    24c2:	2000      	movs	r0, #0
    24c4:	4770      	bx	lr
    24c6:	bf00      	nop
    24c8:	0000935c 	.word	0x0000935c

000024cc <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    24cc:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    24ce:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    24d0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    24d4:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    24d8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    24da:	f013 0f01 	tst.w	r3, #1
    24de:	d106      	bne.n	24ee <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    24e0:	f013 0f02 	tst.w	r3, #2
    24e4:	d10d      	bne.n	2502 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    24e6:	f013 0f04 	tst.w	r3, #4
    24ea:	d111      	bne.n	2510 <_adc_interrupt_handler+0x44>
    24ec:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    24ee:	2301      	movs	r3, #1
    24f0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    24f4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    24f8:	6883      	ldr	r3, [r0, #8]
    24fa:	b292      	uxth	r2, r2
    24fc:	2100      	movs	r1, #0
    24fe:	4798      	blx	r3
    2500:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2502:	2302      	movs	r3, #2
    2504:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2508:	6843      	ldr	r3, [r0, #4]
    250a:	2100      	movs	r1, #0
    250c:	4798      	blx	r3
    250e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2510:	2304      	movs	r3, #4
    2512:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    2516:	6803      	ldr	r3, [r0, #0]
    2518:	2100      	movs	r1, #0
    251a:	4798      	blx	r3
	}
}
    251c:	e7e6      	b.n	24ec <_adc_interrupt_handler+0x20>
	...

00002520 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2520:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2524:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2528:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    252c:	b148      	cbz	r0, 2542 <_adc_get_regs+0x22>
    252e:	2801      	cmp	r0, #1
    2530:	d009      	beq.n	2546 <_adc_get_regs+0x26>
{
    2532:	b508      	push	{r3, lr}
	ASSERT(false);
    2534:	228c      	movs	r2, #140	; 0x8c
    2536:	4905      	ldr	r1, [pc, #20]	; (254c <_adc_get_regs+0x2c>)
    2538:	2000      	movs	r0, #0
    253a:	4b05      	ldr	r3, [pc, #20]	; (2550 <_adc_get_regs+0x30>)
    253c:	4798      	blx	r3
	return 0;
    253e:	2000      	movs	r0, #0
    2540:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2542:	2000      	movs	r0, #0
    2544:	4770      	bx	lr
    2546:	2001      	movs	r0, #1
    2548:	4770      	bx	lr
    254a:	bf00      	nop
    254c:	00009388 	.word	0x00009388
    2550:	000021c5 	.word	0x000021c5

00002554 <_adc_async_init>:
{
    2554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2558:	460c      	mov	r4, r1
	ASSERT(device);
    255a:	4605      	mov	r5, r0
    255c:	22e6      	movs	r2, #230	; 0xe6
    255e:	493b      	ldr	r1, [pc, #236]	; (264c <_adc_async_init+0xf8>)
    2560:	3000      	adds	r0, #0
    2562:	bf18      	it	ne
    2564:	2001      	movne	r0, #1
    2566:	4b3a      	ldr	r3, [pc, #232]	; (2650 <_adc_async_init+0xfc>)
    2568:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    256a:	4620      	mov	r0, r4
    256c:	4b39      	ldr	r3, [pc, #228]	; (2654 <_adc_async_init+0x100>)
    256e:	4798      	blx	r3
    2570:	4601      	mov	r1, r0
    2572:	4620      	mov	r0, r4
    2574:	4b38      	ldr	r3, [pc, #224]	; (2658 <_adc_async_init+0x104>)
    2576:	4798      	blx	r3
	if (init_status) {
    2578:	4606      	mov	r6, r0
    257a:	b110      	cbz	r0, 2582 <_adc_async_init+0x2e>
}
    257c:	4630      	mov	r0, r6
    257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    2582:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    2584:	4b35      	ldr	r3, [pc, #212]	; (265c <_adc_async_init+0x108>)
    2586:	429c      	cmp	r4, r3
    2588:	d05c      	beq.n	2644 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    258a:	4b35      	ldr	r3, [pc, #212]	; (2660 <_adc_async_init+0x10c>)
    258c:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    258e:	bf04      	itt	eq
    2590:	4b34      	ldreq	r3, [pc, #208]	; (2664 <_adc_async_init+0x110>)
    2592:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    2594:	4628      	mov	r0, r5
    2596:	4f34      	ldr	r7, [pc, #208]	; (2668 <_adc_async_init+0x114>)
    2598:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    259a:	0943      	lsrs	r3, r0, #5
    259c:	f000 001f 	and.w	r0, r0, #31
    25a0:	2401      	movs	r4, #1
    25a2:	fa04 f000 	lsl.w	r0, r4, r0
    25a6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 266c <_adc_async_init+0x118>
    25aa:	3320      	adds	r3, #32
    25ac:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25b4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    25b8:	4628      	mov	r0, r5
    25ba:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25bc:	0943      	lsrs	r3, r0, #5
    25be:	f000 001f 	and.w	r0, r0, #31
    25c2:	fa04 f000 	lsl.w	r0, r4, r0
    25c6:	3360      	adds	r3, #96	; 0x60
    25c8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    25cc:	4628      	mov	r0, r5
    25ce:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25d0:	0943      	lsrs	r3, r0, #5
    25d2:	f000 001f 	and.w	r0, r0, #31
    25d6:	4084      	lsls	r4, r0
    25d8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    25dc:	4628      	mov	r0, r5
    25de:	47b8      	blx	r7
    25e0:	3001      	adds	r0, #1
    25e2:	b280      	uxth	r0, r0
    25e4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    25e6:	2b00      	cmp	r3, #0
    25e8:	dbc8      	blt.n	257c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25ea:	095b      	lsrs	r3, r3, #5
    25ec:	f000 001f 	and.w	r0, r0, #31
    25f0:	2201      	movs	r2, #1
    25f2:	fa02 f000 	lsl.w	r0, r2, r0
    25f6:	3320      	adds	r3, #32
    25f8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2600:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    2604:	4628      	mov	r0, r5
    2606:	47b8      	blx	r7
    2608:	3001      	adds	r0, #1
    260a:	b280      	uxth	r0, r0
    260c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    260e:	2b00      	cmp	r3, #0
    2610:	dbb4      	blt.n	257c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2612:	095b      	lsrs	r3, r3, #5
    2614:	f000 001f 	and.w	r0, r0, #31
    2618:	2201      	movs	r2, #1
    261a:	fa02 f000 	lsl.w	r0, r2, r0
    261e:	3360      	adds	r3, #96	; 0x60
    2620:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    2624:	4628      	mov	r0, r5
    2626:	47b8      	blx	r7
    2628:	3001      	adds	r0, #1
    262a:	b280      	uxth	r0, r0
    262c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    262e:	2b00      	cmp	r3, #0
    2630:	dba4      	blt.n	257c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2632:	095b      	lsrs	r3, r3, #5
    2634:	f000 001f 	and.w	r0, r0, #31
    2638:	2201      	movs	r2, #1
    263a:	fa02 f000 	lsl.w	r0, r2, r0
    263e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2642:	e79b      	b.n	257c <_adc_async_init+0x28>
		_adc0_dev = dev;
    2644:	4b07      	ldr	r3, [pc, #28]	; (2664 <_adc_async_init+0x110>)
    2646:	601d      	str	r5, [r3, #0]
    2648:	e7a4      	b.n	2594 <_adc_async_init+0x40>
    264a:	bf00      	nop
    264c:	00009388 	.word	0x00009388
    2650:	000021c5 	.word	0x000021c5
    2654:	00002521 	.word	0x00002521
    2658:	000023a1 	.word	0x000023a1
    265c:	43001c00 	.word	0x43001c00
    2660:	43002000 	.word	0x43002000
    2664:	2000070c 	.word	0x2000070c
    2668:	00002389 	.word	0x00002389
    266c:	e000e100 	.word	0xe000e100

00002670 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2670:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2672:	8813      	ldrh	r3, [r2, #0]
    2674:	b29b      	uxth	r3, r3
    2676:	f043 0302 	orr.w	r3, r3, #2
    267a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    267c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    267e:	f013 0f03 	tst.w	r3, #3
    2682:	d1fb      	bne.n	267c <_adc_async_enable_channel+0xc>
}
    2684:	4770      	bx	lr

00002686 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2686:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    2688:	88db      	ldrh	r3, [r3, #6]
    268a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    268e:	2b03      	cmp	r3, #3
}
    2690:	bf0c      	ite	eq
    2692:	2001      	moveq	r0, #1
    2694:	2002      	movne	r0, #2
    2696:	4770      	bx	lr

00002698 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2698:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    269a:	7d13      	ldrb	r3, [r2, #20]
    269c:	f043 0302 	orr.w	r3, r3, #2
    26a0:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    26a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26a8:	2b00      	cmp	r3, #0
    26aa:	d1fa      	bne.n	26a2 <_adc_async_convert+0xa>
}
    26ac:	4770      	bx	lr

000026ae <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    26ae:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    26b0:	2a01      	cmp	r2, #1
    26b2:	d007      	beq.n	26c4 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    26b4:	2a02      	cmp	r2, #2
    26b6:	d00e      	beq.n	26d6 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    26b8:	b91a      	cbnz	r2, 26c2 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    26ba:	b1ab      	cbz	r3, 26e8 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    26bc:	2301      	movs	r3, #1
    26be:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26c2:	4770      	bx	lr
	if (value == 0x0) {
    26c4:	b91b      	cbnz	r3, 26ce <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    26c6:	2304      	movs	r3, #4
    26c8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26cc:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    26ce:	2304      	movs	r3, #4
    26d0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26d4:	4770      	bx	lr
	if (value == 0x0) {
    26d6:	b91b      	cbnz	r3, 26e0 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    26d8:	2302      	movs	r3, #2
    26da:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26de:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    26e0:	2302      	movs	r3, #2
    26e2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26e6:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    26e8:	2301      	movs	r3, #1
    26ea:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26ee:	4770      	bx	lr

000026f0 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    26f0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <ADC0_0_Handler+0xc>)
    26f4:	6818      	ldr	r0, [r3, #0]
    26f6:	4b02      	ldr	r3, [pc, #8]	; (2700 <ADC0_0_Handler+0x10>)
    26f8:	4798      	blx	r3
    26fa:	bd08      	pop	{r3, pc}
    26fc:	2000070c 	.word	0x2000070c
    2700:	000024cd 	.word	0x000024cd

00002704 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    2704:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <ADC0_1_Handler+0xc>)
    2708:	6818      	ldr	r0, [r3, #0]
    270a:	4b02      	ldr	r3, [pc, #8]	; (2714 <ADC0_1_Handler+0x10>)
    270c:	4798      	blx	r3
    270e:	bd08      	pop	{r3, pc}
    2710:	2000070c 	.word	0x2000070c
    2714:	000024cd 	.word	0x000024cd

00002718 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2718:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <ADC1_0_Handler+0xc>)
    271c:	6858      	ldr	r0, [r3, #4]
    271e:	4b02      	ldr	r3, [pc, #8]	; (2728 <ADC1_0_Handler+0x10>)
    2720:	4798      	blx	r3
    2722:	bd08      	pop	{r3, pc}
    2724:	2000070c 	.word	0x2000070c
    2728:	000024cd 	.word	0x000024cd

0000272c <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    272c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <ADC1_1_Handler+0xc>)
    2730:	6858      	ldr	r0, [r3, #4]
    2732:	4b02      	ldr	r3, [pc, #8]	; (273c <ADC1_1_Handler+0x10>)
    2734:	4798      	blx	r3
    2736:	bd08      	pop	{r3, pc}
    2738:	2000070c 	.word	0x2000070c
    273c:	000024cd 	.word	0x000024cd

00002740 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2740:	0943      	lsrs	r3, r0, #5
    2742:	f000 001f 	and.w	r0, r0, #31
    2746:	2201      	movs	r2, #1
    2748:	fa02 f000 	lsl.w	r0, r2, r0
    274c:	3340      	adds	r3, #64	; 0x40
    274e:	4a02      	ldr	r2, [pc, #8]	; (2758 <_irq_set+0x18>)
    2750:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2754:	4770      	bx	lr
    2756:	bf00      	nop
    2758:	e000e100 	.word	0xe000e100

0000275c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    275c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2760:	00c0      	lsls	r0, r0, #3
    2762:	4770      	bx	lr

00002764 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2764:	4b01      	ldr	r3, [pc, #4]	; (276c <_get_cycles_for_ms+0x8>)
    2766:	fb03 f000 	mul.w	r0, r3, r0
    276a:	4770      	bx	lr
    276c:	0001d4c0 	.word	0x0001d4c0

00002770 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2770:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2772:	4a0e      	ldr	r2, [pc, #56]	; (27ac <_init_chip+0x3c>)
    2774:	8813      	ldrh	r3, [r2, #0]
    2776:	b29b      	uxth	r3, r3
    2778:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    277c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    277e:	4b0c      	ldr	r3, [pc, #48]	; (27b0 <_init_chip+0x40>)
    2780:	4798      	blx	r3
	_oscctrl_init_sources();
    2782:	4b0c      	ldr	r3, [pc, #48]	; (27b4 <_init_chip+0x44>)
    2784:	4798      	blx	r3
	_mclk_init();
    2786:	4b0c      	ldr	r3, [pc, #48]	; (27b8 <_init_chip+0x48>)
    2788:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    278a:	2008      	movs	r0, #8
    278c:	4c0b      	ldr	r4, [pc, #44]	; (27bc <_init_chip+0x4c>)
    278e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2790:	4b0b      	ldr	r3, [pc, #44]	; (27c0 <_init_chip+0x50>)
    2792:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2794:	f640 70f7 	movw	r0, #4087	; 0xff7
    2798:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    279a:	4a0a      	ldr	r2, [pc, #40]	; (27c4 <_init_chip+0x54>)
    279c:	6913      	ldr	r3, [r2, #16]
    279e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    27a2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    27a4:	4b08      	ldr	r3, [pc, #32]	; (27c8 <_init_chip+0x58>)
    27a6:	4798      	blx	r3
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop
    27ac:	41004000 	.word	0x41004000
    27b0:	00002c4d 	.word	0x00002c4d
    27b4:	00002c6d 	.word	0x00002c6d
    27b8:	00002b75 	.word	0x00002b75
    27bc:	00002afd 	.word	0x00002afd
    27c0:	00002c71 	.word	0x00002c71
    27c4:	40000800 	.word	0x40000800
    27c8:	00002841 	.word	0x00002841

000027cc <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    27cc:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    27ce:	4a1a      	ldr	r2, [pc, #104]	; (2838 <_dmac_handler+0x6c>)
    27d0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    27d2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    27d6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    27da:	4818      	ldr	r0, [pc, #96]	; (283c <_dmac_handler+0x70>)
    27dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    27e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    27e4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    27e8:	f012 0f01 	tst.w	r2, #1
    27ec:	d10a      	bne.n	2804 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    27ee:	011a      	lsls	r2, r3, #4
    27f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    27f4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    27f8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    27fc:	f012 0f02 	tst.w	r2, #2
    2800:	d10b      	bne.n	281a <_dmac_handler+0x4e>
    2802:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2804:	011a      	lsls	r2, r3, #4
    2806:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    280a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    280e:	2101      	movs	r1, #1
    2810:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2814:	6843      	ldr	r3, [r0, #4]
    2816:	4798      	blx	r3
    2818:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    281a:	011a      	lsls	r2, r3, #4
    281c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2820:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2824:	2102      	movs	r1, #2
    2826:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    282a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    282e:	4a03      	ldr	r2, [pc, #12]	; (283c <_dmac_handler+0x70>)
    2830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2834:	4798      	blx	r3
	}
}
    2836:	e7e4      	b.n	2802 <_dmac_handler+0x36>
    2838:	4100a000 	.word	0x4100a000
    283c:	20000714 	.word	0x20000714

00002840 <_dma_init>:
{
    2840:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2842:	4a32      	ldr	r2, [pc, #200]	; (290c <_dma_init+0xcc>)
    2844:	8813      	ldrh	r3, [r2, #0]
    2846:	f023 0302 	bic.w	r3, r3, #2
    284a:	041b      	lsls	r3, r3, #16
    284c:	0c1b      	lsrs	r3, r3, #16
    284e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2850:	8853      	ldrh	r3, [r2, #2]
    2852:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2856:	041b      	lsls	r3, r3, #16
    2858:	0c1b      	lsrs	r3, r3, #16
    285a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    285c:	8813      	ldrh	r3, [r2, #0]
    285e:	b29b      	uxth	r3, r3
    2860:	f043 0301 	orr.w	r3, r3, #1
    2864:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2866:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2868:	f013 0f01 	tst.w	r3, #1
    286c:	d1fb      	bne.n	2866 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    286e:	4b27      	ldr	r3, [pc, #156]	; (290c <_dma_init+0xcc>)
    2870:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2874:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2876:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    287c:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2880:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2882:	2100      	movs	r1, #0
    2884:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2886:	4a22      	ldr	r2, [pc, #136]	; (2910 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2888:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    288a:	4a22      	ldr	r2, [pc, #136]	; (2914 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    288c:	639a      	str	r2, [r3, #56]	; 0x38
    288e:	4b22      	ldr	r3, [pc, #136]	; (2918 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2890:	4c1f      	ldr	r4, [pc, #124]	; (2910 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2892:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2894:	681d      	ldr	r5, [r3, #0]
    2896:	0108      	lsls	r0, r1, #4
    2898:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    289c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    28a0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    28a2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    28a4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    28a8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    28aa:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    28ae:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    28b0:	1822      	adds	r2, r4, r0
    28b2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    28b4:	60d6      	str	r6, [r2, #12]
    28b6:	3101      	adds	r1, #1
    28b8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    28ba:	2920      	cmp	r1, #32
    28bc:	d1ea      	bne.n	2894 <_dma_init+0x54>
    28be:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28c0:	2001      	movs	r0, #1
    28c2:	4916      	ldr	r1, [pc, #88]	; (291c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    28c4:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    28c6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    28ca:	d00b      	beq.n	28e4 <_dma_init+0xa4>
    28cc:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    28ce:	2b24      	cmp	r3, #36	; 0x24
    28d0:	d1f8      	bne.n	28c4 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    28d2:	4a0e      	ldr	r2, [pc, #56]	; (290c <_dma_init+0xcc>)
    28d4:	8813      	ldrh	r3, [r2, #0]
    28d6:	b29b      	uxth	r3, r3
    28d8:	f043 0302 	orr.w	r3, r3, #2
    28dc:	8013      	strh	r3, [r2, #0]
}
    28de:	2000      	movs	r0, #0
    28e0:	bc70      	pop	{r4, r5, r6}
    28e2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e4:	095c      	lsrs	r4, r3, #5
    28e6:	f002 021f 	and.w	r2, r2, #31
    28ea:	fa00 f202 	lsl.w	r2, r0, r2
    28ee:	f104 0520 	add.w	r5, r4, #32
    28f2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    28f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28fa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28fe:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2902:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2906:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    290a:	e7df      	b.n	28cc <_dma_init+0x8c>
    290c:	4100a000 	.word	0x4100a000
    2910:	200015c0 	.word	0x200015c0
    2914:	200017c0 	.word	0x200017c0
    2918:	000093a0 	.word	0x000093a0
    291c:	e000e100 	.word	0xe000e100

00002920 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2920:	b991      	cbnz	r1, 2948 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2922:	b942      	cbnz	r2, 2936 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2924:	0100      	lsls	r0, r0, #4
    2926:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    292a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    292e:	2302      	movs	r3, #2
    2930:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2934:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2936:	0100      	lsls	r0, r0, #4
    2938:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    293c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2940:	2302      	movs	r3, #2
    2942:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2946:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2948:	2901      	cmp	r1, #1
    294a:	d000      	beq.n	294e <_dma_set_irq_state+0x2e>
    294c:	4770      	bx	lr
	if (value == 0x0) {
    294e:	b142      	cbz	r2, 2962 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2950:	0100      	lsls	r0, r0, #4
    2952:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2956:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    295a:	2301      	movs	r3, #1
    295c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2960:	e7f4      	b.n	294c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2962:	0100      	lsls	r0, r0, #4
    2964:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2968:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    296c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2970:	4770      	bx	lr
	...

00002974 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2974:	4b02      	ldr	r3, [pc, #8]	; (2980 <_dma_set_destination_address+0xc>)
    2976:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    297a:	6081      	str	r1, [r0, #8]
}
    297c:	2000      	movs	r0, #0
    297e:	4770      	bx	lr
    2980:	200015c0 	.word	0x200015c0

00002984 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2984:	4b02      	ldr	r3, [pc, #8]	; (2990 <_dma_set_source_address+0xc>)
    2986:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    298a:	6041      	str	r1, [r0, #4]
}
    298c:	2000      	movs	r0, #0
    298e:	4770      	bx	lr
    2990:	200015c0 	.word	0x200015c0

00002994 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2994:	4a05      	ldr	r2, [pc, #20]	; (29ac <_dma_srcinc_enable+0x18>)
    2996:	0100      	lsls	r0, r0, #4
    2998:	5a13      	ldrh	r3, [r2, r0]
    299a:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    299c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    29a0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    29a4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    29a6:	5211      	strh	r1, [r2, r0]
}
    29a8:	2000      	movs	r0, #0
    29aa:	4770      	bx	lr
    29ac:	200015c0 	.word	0x200015c0

000029b0 <_dma_set_data_amount>:
{
    29b0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    29b2:	4c14      	ldr	r4, [pc, #80]	; (2a04 <_dma_set_data_amount+0x54>)
    29b4:	0102      	lsls	r2, r0, #4
    29b6:	18a3      	adds	r3, r4, r2
    29b8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29ba:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    29bc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29c0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    29c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    29c6:	d006      	beq.n	29d6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    29c8:	fa01 f403 	lsl.w	r4, r1, r3
    29cc:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    29ce:	4a0d      	ldr	r2, [pc, #52]	; (2a04 <_dma_set_data_amount+0x54>)
    29d0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    29d4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    29d6:	4c0b      	ldr	r4, [pc, #44]	; (2a04 <_dma_set_data_amount+0x54>)
    29d8:	0102      	lsls	r2, r0, #4
    29da:	18a5      	adds	r5, r4, r2
    29dc:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29de:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    29e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    29e4:	d005      	beq.n	29f2 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    29e6:	fa01 f303 	lsl.w	r3, r1, r3
    29ea:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    29ec:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    29f0:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    29f2:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    29f4:	4b03      	ldr	r3, [pc, #12]	; (2a04 <_dma_set_data_amount+0x54>)
    29f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    29fa:	8041      	strh	r1, [r0, #2]
}
    29fc:	2000      	movs	r0, #0
    29fe:	bc30      	pop	{r4, r5}
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop
    2a04:	200015c0 	.word	0x200015c0

00002a08 <_dma_enable_transaction>:
{
    2a08:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2a0a:	4c0d      	ldr	r4, [pc, #52]	; (2a40 <_dma_enable_transaction+0x38>)
    2a0c:	0103      	lsls	r3, r0, #4
    2a0e:	5ae2      	ldrh	r2, [r4, r3]
    2a10:	b292      	uxth	r2, r2
    2a12:	f042 0201 	orr.w	r2, r2, #1
    2a16:	52e2      	strh	r2, [r4, r3]
    2a18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a1c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2a22:	f042 0202 	orr.w	r2, r2, #2
    2a26:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2a28:	b131      	cbz	r1, 2a38 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2a2a:	4a06      	ldr	r2, [pc, #24]	; (2a44 <_dma_enable_transaction+0x3c>)
    2a2c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2a2e:	2301      	movs	r3, #1
    2a30:	fa03 f000 	lsl.w	r0, r3, r0
    2a34:	4308      	orrs	r0, r1
    2a36:	6110      	str	r0, [r2, #16]
}
    2a38:	2000      	movs	r0, #0
    2a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a3e:	4770      	bx	lr
    2a40:	200015c0 	.word	0x200015c0
    2a44:	4100a000 	.word	0x4100a000

00002a48 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2a48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a4c:	4b02      	ldr	r3, [pc, #8]	; (2a58 <_dma_get_channel_resource+0x10>)
    2a4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2a52:	6001      	str	r1, [r0, #0]
}
    2a54:	2000      	movs	r0, #0
    2a56:	4770      	bx	lr
    2a58:	20000714 	.word	0x20000714

00002a5c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2a5c:	b508      	push	{r3, lr}
	_dmac_handler();
    2a5e:	4b01      	ldr	r3, [pc, #4]	; (2a64 <DMAC_0_Handler+0x8>)
    2a60:	4798      	blx	r3
    2a62:	bd08      	pop	{r3, pc}
    2a64:	000027cd 	.word	0x000027cd

00002a68 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2a68:	b508      	push	{r3, lr}
	_dmac_handler();
    2a6a:	4b01      	ldr	r3, [pc, #4]	; (2a70 <DMAC_1_Handler+0x8>)
    2a6c:	4798      	blx	r3
    2a6e:	bd08      	pop	{r3, pc}
    2a70:	000027cd 	.word	0x000027cd

00002a74 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2a74:	b508      	push	{r3, lr}
	_dmac_handler();
    2a76:	4b01      	ldr	r3, [pc, #4]	; (2a7c <DMAC_2_Handler+0x8>)
    2a78:	4798      	blx	r3
    2a7a:	bd08      	pop	{r3, pc}
    2a7c:	000027cd 	.word	0x000027cd

00002a80 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2a80:	b508      	push	{r3, lr}
	_dmac_handler();
    2a82:	4b01      	ldr	r3, [pc, #4]	; (2a88 <DMAC_3_Handler+0x8>)
    2a84:	4798      	blx	r3
    2a86:	bd08      	pop	{r3, pc}
    2a88:	000027cd 	.word	0x000027cd

00002a8c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2a8c:	b508      	push	{r3, lr}
	_dmac_handler();
    2a8e:	4b01      	ldr	r3, [pc, #4]	; (2a94 <DMAC_4_Handler+0x8>)
    2a90:	4798      	blx	r3
    2a92:	bd08      	pop	{r3, pc}
    2a94:	000027cd 	.word	0x000027cd

00002a98 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2a98:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2a9a:	2000      	movs	r0, #0
    2a9c:	4770      	bx	lr
	...

00002aa0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2aa0:	b430      	push	{r4, r5}
    2aa2:	4814      	ldr	r0, [pc, #80]	; (2af4 <_event_system_init+0x54>)
    2aa4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2aa8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2aaa:	4c13      	ldr	r4, [pc, #76]	; (2af8 <_event_system_init+0x58>)
    2aac:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2aae:	f813 1b01 	ldrb.w	r1, [r3], #1
    2ab2:	3248      	adds	r2, #72	; 0x48
    2ab4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2ab8:	42ab      	cmp	r3, r5
    2aba:	d1f7      	bne.n	2aac <_event_system_init+0xc>
    2abc:	480d      	ldr	r0, [pc, #52]	; (2af4 <_event_system_init+0x54>)
    2abe:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2ac2:	3080      	adds	r0, #128	; 0x80
    2ac4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2ac6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2aca:	00ca      	lsls	r2, r1, #3
    2acc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ad0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2ad4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2ad6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2ada:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2adc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2ae0:	43db      	mvns	r3, r3
    2ae2:	b2db      	uxtb	r3, r3
    2ae4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2ae8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2aea:	2920      	cmp	r1, #32
    2aec:	d1eb      	bne.n	2ac6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2aee:	2000      	movs	r0, #0
    2af0:	bc30      	pop	{r4, r5}
    2af2:	4770      	bx	lr
    2af4:	000094a0 	.word	0x000094a0
    2af8:	4100e000 	.word	0x4100e000

00002afc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2afc:	f010 0f01 	tst.w	r0, #1
    2b00:	d008      	beq.n	2b14 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b02:	4a17      	ldr	r2, [pc, #92]	; (2b60 <_gclk_init_generators_by_fref+0x64>)
    2b04:	4b17      	ldr	r3, [pc, #92]	; (2b64 <_gclk_init_generators_by_fref+0x68>)
    2b06:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b08:	4619      	mov	r1, r3
    2b0a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b0e:	684b      	ldr	r3, [r1, #4]
    2b10:	4213      	tst	r3, r2
    2b12:	d1fc      	bne.n	2b0e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2b14:	f010 0f02 	tst.w	r0, #2
    2b18:	d008      	beq.n	2b2c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b1a:	4a13      	ldr	r2, [pc, #76]	; (2b68 <_gclk_init_generators_by_fref+0x6c>)
    2b1c:	4b11      	ldr	r3, [pc, #68]	; (2b64 <_gclk_init_generators_by_fref+0x68>)
    2b1e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b20:	4619      	mov	r1, r3
    2b22:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b26:	684b      	ldr	r3, [r1, #4]
    2b28:	4213      	tst	r3, r2
    2b2a:	d1fc      	bne.n	2b26 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2b2c:	f010 0f04 	tst.w	r0, #4
    2b30:	d008      	beq.n	2b44 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b32:	4a0e      	ldr	r2, [pc, #56]	; (2b6c <_gclk_init_generators_by_fref+0x70>)
    2b34:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <_gclk_init_generators_by_fref+0x68>)
    2b36:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b38:	4619      	mov	r1, r3
    2b3a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b3e:	684b      	ldr	r3, [r1, #4]
    2b40:	4213      	tst	r3, r2
    2b42:	d1fc      	bne.n	2b3e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2b44:	f010 0f08 	tst.w	r0, #8
    2b48:	d008      	beq.n	2b5c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b4a:	4a09      	ldr	r2, [pc, #36]	; (2b70 <_gclk_init_generators_by_fref+0x74>)
    2b4c:	4b05      	ldr	r3, [pc, #20]	; (2b64 <_gclk_init_generators_by_fref+0x68>)
    2b4e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b50:	4619      	mov	r1, r3
    2b52:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b56:	684b      	ldr	r3, [r1, #4]
    2b58:	4213      	tst	r3, r2
    2b5a:	d1fc      	bne.n	2b56 <_gclk_init_generators_by_fref+0x5a>
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	00010107 	.word	0x00010107
    2b64:	40001c00 	.word	0x40001c00
    2b68:	00010106 	.word	0x00010106
    2b6c:	00100106 	.word	0x00100106
    2b70:	00010105 	.word	0x00010105

00002b74 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2b74:	2201      	movs	r2, #1
    2b76:	4b01      	ldr	r3, [pc, #4]	; (2b7c <_mclk_init+0x8>)
    2b78:	715a      	strb	r2, [r3, #5]
    2b7a:	4770      	bx	lr
    2b7c:	40000800 	.word	0x40000800

00002b80 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2b80:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2b82:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2b84:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2b86:	f012 0f01 	tst.w	r2, #1
    2b8a:	d005      	beq.n	2b98 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2b8c:	2201      	movs	r2, #1
    2b8e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2b90:	6803      	ldr	r3, [r0, #0]
    2b92:	b153      	cbz	r3, 2baa <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2b94:	4798      	blx	r3
    2b96:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2b98:	8a1a      	ldrh	r2, [r3, #16]
    2b9a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2b9c:	b12a      	cbz	r2, 2baa <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2b9e:	f240 225e 	movw	r2, #606	; 0x25e
    2ba2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2ba4:	6843      	ldr	r3, [r0, #4]
    2ba6:	b103      	cbz	r3, 2baa <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2ba8:	4798      	blx	r3
    2baa:	bd08      	pop	{r3, pc}

00002bac <_flash_init>:
{
    2bac:	b538      	push	{r3, r4, r5, lr}
    2bae:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2bb0:	4605      	mov	r5, r0
    2bb2:	b350      	cbz	r0, 2c0a <_flash_init+0x5e>
    2bb4:	4816      	ldr	r0, [pc, #88]	; (2c10 <_flash_init+0x64>)
    2bb6:	4281      	cmp	r1, r0
    2bb8:	bf14      	ite	ne
    2bba:	2000      	movne	r0, #0
    2bbc:	2001      	moveq	r0, #1
    2bbe:	224b      	movs	r2, #75	; 0x4b
    2bc0:	4914      	ldr	r1, [pc, #80]	; (2c14 <_flash_init+0x68>)
    2bc2:	4b15      	ldr	r3, [pc, #84]	; (2c18 <_flash_init+0x6c>)
    2bc4:	4798      	blx	r3
	device->hw = hw;
    2bc6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2bc8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2bca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2bce:	049b      	lsls	r3, r3, #18
    2bd0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2bd2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2bd4:	4b11      	ldr	r3, [pc, #68]	; (2c1c <_flash_init+0x70>)
    2bd6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bd8:	4b11      	ldr	r3, [pc, #68]	; (2c20 <_flash_init+0x74>)
    2bda:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2bde:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2be6:	f3bf 8f6f 	isb	sy
    2bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bf6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bfa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2bfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c02:	6019      	str	r1, [r3, #0]
    2c04:	601a      	str	r2, [r3, #0]
}
    2c06:	2000      	movs	r0, #0
    2c08:	bd38      	pop	{r3, r4, r5, pc}
    2c0a:	2000      	movs	r0, #0
    2c0c:	e7d7      	b.n	2bbe <_flash_init+0x12>
    2c0e:	bf00      	nop
    2c10:	41004000 	.word	0x41004000
    2c14:	000095a4 	.word	0x000095a4
    2c18:	000021c5 	.word	0x000021c5
    2c1c:	20000894 	.word	0x20000894
    2c20:	e000e100 	.word	0xe000e100

00002c24 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2c24:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c26:	4b02      	ldr	r3, [pc, #8]	; (2c30 <NVMCTRL_0_Handler+0xc>)
    2c28:	6818      	ldr	r0, [r3, #0]
    2c2a:	4b02      	ldr	r3, [pc, #8]	; (2c34 <NVMCTRL_0_Handler+0x10>)
    2c2c:	4798      	blx	r3
    2c2e:	bd08      	pop	{r3, pc}
    2c30:	20000894 	.word	0x20000894
    2c34:	00002b81 	.word	0x00002b81

00002c38 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2c38:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c3a:	4b02      	ldr	r3, [pc, #8]	; (2c44 <NVMCTRL_1_Handler+0xc>)
    2c3c:	6818      	ldr	r0, [r3, #0]
    2c3e:	4b02      	ldr	r3, [pc, #8]	; (2c48 <NVMCTRL_1_Handler+0x10>)
    2c40:	4798      	blx	r3
    2c42:	bd08      	pop	{r3, pc}
    2c44:	20000894 	.word	0x20000894
    2c48:	00002b81 	.word	0x00002b81

00002c4c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2c4c:	4b06      	ldr	r3, [pc, #24]	; (2c68 <_osc32kctrl_init_sources+0x1c>)
    2c4e:	f242 328e 	movw	r2, #9102	; 0x238e
    2c52:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2c54:	2200      	movs	r2, #0
    2c56:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2c58:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2c5a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2c5c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2c60:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2c62:	2205      	movs	r2, #5
    2c64:	741a      	strb	r2, [r3, #16]
    2c66:	4770      	bx	lr
    2c68:	40001400 	.word	0x40001400

00002c6c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2c6c:	4770      	bx	lr
	...

00002c70 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2c70:	4a44      	ldr	r2, [pc, #272]	; (2d84 <_oscctrl_init_referenced_generators+0x114>)
    2c72:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2c74:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2c78:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2c7c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2c7e:	4611      	mov	r1, r2
    2c80:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2c84:	684b      	ldr	r3, [r1, #4]
    2c86:	4213      	tst	r3, r2
    2c88:	d1fc      	bne.n	2c84 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2c8a:	4a3e      	ldr	r2, [pc, #248]	; (2d84 <_oscctrl_init_referenced_generators+0x114>)
    2c8c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2c8e:	f013 0f04 	tst.w	r3, #4
    2c92:	d1fb      	bne.n	2c8c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2c94:	4b3c      	ldr	r3, [pc, #240]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2c96:	2200      	movs	r2, #0
    2c98:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2c9a:	4a3c      	ldr	r2, [pc, #240]	; (2d8c <_oscctrl_init_referenced_generators+0x11c>)
    2c9c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2c9e:	461a      	mov	r2, r3
    2ca0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2ca4:	f013 0f10 	tst.w	r3, #16
    2ca8:	d1fa      	bne.n	2ca0 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2caa:	2200      	movs	r2, #0
    2cac:	4b36      	ldr	r3, [pc, #216]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2cae:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cb2:	461a      	mov	r2, r3
    2cb4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2cb8:	f013 0f04 	tst.w	r3, #4
    2cbc:	d1fa      	bne.n	2cb4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2cbe:	2202      	movs	r2, #2
    2cc0:	4b31      	ldr	r3, [pc, #196]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2cc2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cc4:	461a      	mov	r2, r3
    2cc6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2cca:	f013 0f02 	tst.w	r3, #2
    2cce:	d1fa      	bne.n	2cc6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2cd0:	4b2d      	ldr	r3, [pc, #180]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2cd4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cd6:	461a      	mov	r2, r3
    2cd8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2cdc:	f013 0f08 	tst.w	r3, #8
    2ce0:	d1fa      	bne.n	2cd8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2ce2:	2280      	movs	r2, #128	; 0x80
    2ce4:	4b28      	ldr	r3, [pc, #160]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2ce6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cea:	461a      	mov	r2, r3
    2cec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2cf0:	f013 0f04 	tst.w	r3, #4
    2cf4:	d1fa      	bne.n	2cec <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2cf6:	4a26      	ldr	r2, [pc, #152]	; (2d90 <_oscctrl_init_referenced_generators+0x120>)
    2cf8:	4b23      	ldr	r3, [pc, #140]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2cfa:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2cfc:	461a      	mov	r2, r3
    2cfe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2d00:	f013 0f06 	tst.w	r3, #6
    2d04:	d1fb      	bne.n	2cfe <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2d06:	4b20      	ldr	r3, [pc, #128]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2d08:	f44f 6202 	mov.w	r2, #2080	; 0x820
    2d0c:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2d0e:	2202      	movs	r2, #2
    2d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d14:	461a      	mov	r2, r3
    2d16:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2d18:	f013 0f02 	tst.w	r3, #2
    2d1c:	d1fb      	bne.n	2d16 <_oscctrl_init_referenced_generators+0xa6>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d1e:	4b1a      	ldr	r3, [pc, #104]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2d20:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2d24:	f013 0f01 	tst.w	r3, #1
    2d28:	d026      	beq.n	2d78 <_oscctrl_init_referenced_generators+0x108>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d2a:	4a17      	ldr	r2, [pc, #92]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2d2c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2d2e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2d32:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2d36:	d1f9      	bne.n	2d2c <_oscctrl_init_referenced_generators+0xbc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2d38:	4b13      	ldr	r3, [pc, #76]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    2d3c:	f012 0f01 	tst.w	r2, #1
    2d40:	d103      	bne.n	2d4a <_oscctrl_init_referenced_generators+0xda>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2d44:	f012 0f02 	tst.w	r2, #2
    2d48:	d0f7      	beq.n	2d3a <_oscctrl_init_referenced_generators+0xca>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2d4a:	4a0e      	ldr	r2, [pc, #56]	; (2d84 <_oscctrl_init_referenced_generators+0x114>)
    2d4c:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d1fc      	bne.n	2d4c <_oscctrl_init_referenced_generators+0xdc>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d52:	4a0c      	ldr	r2, [pc, #48]	; (2d84 <_oscctrl_init_referenced_generators+0x114>)
    2d54:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d56:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d5a:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d5e:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2d60:	4611      	mov	r1, r2
    2d62:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2d66:	684b      	ldr	r3, [r1, #4]
    2d68:	4213      	tst	r3, r2
    2d6a:	d1fc      	bne.n	2d66 <_oscctrl_init_referenced_generators+0xf6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2d6c:	4a05      	ldr	r2, [pc, #20]	; (2d84 <_oscctrl_init_referenced_generators+0x114>)
    2d6e:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2d70:	f013 0f04 	tst.w	r3, #4
    2d74:	d1fb      	bne.n	2d6e <_oscctrl_init_referenced_generators+0xfe>
		;
#endif
	(void)hw;
}
    2d76:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2d78:	4a03      	ldr	r2, [pc, #12]	; (2d88 <_oscctrl_init_referenced_generators+0x118>)
    2d7a:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2d80:	d0fb      	beq.n	2d7a <_oscctrl_init_referenced_generators+0x10a>
    2d82:	e7d9      	b.n	2d38 <_oscctrl_init_referenced_generators+0xc8>
    2d84:	40001c00 	.word	0x40001c00
    2d88:	40001000 	.word	0x40001000
    2d8c:	04010000 	.word	0x04010000
    2d90:	000d0e4e 	.word	0x000d0e4e

00002d94 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2d94:	b500      	push	{lr}
    2d96:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2d98:	4b0d      	ldr	r3, [pc, #52]	; (2dd0 <RAMECC_Handler+0x3c>)
    2d9a:	789b      	ldrb	r3, [r3, #2]
    2d9c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2d9e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	f013 0f02 	tst.w	r3, #2
    2da6:	d006      	beq.n	2db6 <RAMECC_Handler+0x22>
    2da8:	4b0a      	ldr	r3, [pc, #40]	; (2dd4 <RAMECC_Handler+0x40>)
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	b11b      	cbz	r3, 2db6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2dae:	4a08      	ldr	r2, [pc, #32]	; (2dd0 <RAMECC_Handler+0x3c>)
    2db0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2db2:	4798      	blx	r3
    2db4:	e009      	b.n	2dca <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2db6:	9b01      	ldr	r3, [sp, #4]
    2db8:	f013 0f01 	tst.w	r3, #1
    2dbc:	d005      	beq.n	2dca <RAMECC_Handler+0x36>
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <RAMECC_Handler+0x40>)
    2dc0:	685b      	ldr	r3, [r3, #4]
    2dc2:	b113      	cbz	r3, 2dca <RAMECC_Handler+0x36>
    2dc4:	4a02      	ldr	r2, [pc, #8]	; (2dd0 <RAMECC_Handler+0x3c>)
    2dc6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2dc8:	4798      	blx	r3
	} else {
		return;
	}
}
    2dca:	b003      	add	sp, #12
    2dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    2dd0:	41020000 	.word	0x41020000
    2dd4:	200019c0 	.word	0x200019c0

00002dd8 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    2dd8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2dda:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ddc:	6913      	ldr	r3, [r2, #16]
    2dde:	f013 0f60 	tst.w	r3, #96	; 0x60
    2de2:	d1fb      	bne.n	2ddc <_rtc_timer_set_period+0x4>
}
    2de4:	4770      	bx	lr

00002de6 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    2de6:	68c2      	ldr	r2, [r0, #12]
    2de8:	6913      	ldr	r3, [r2, #16]
    2dea:	f013 0f60 	tst.w	r3, #96	; 0x60
    2dee:	d1fb      	bne.n	2de8 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    2df0:	6a10      	ldr	r0, [r2, #32]
}
    2df2:	4770      	bx	lr

00002df4 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    2df4:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2df6:	f248 0103 	movw	r1, #32771	; 0x8003
    2dfa:	6913      	ldr	r3, [r2, #16]
    2dfc:	420b      	tst	r3, r1
    2dfe:	d1fc      	bne.n	2dfa <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2e00:	8810      	ldrh	r0, [r2, #0]
}
    2e02:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e06:	4770      	bx	lr

00002e08 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    2e08:	4770      	bx	lr
	...

00002e0c <_rtc_timer_init>:
{
    2e0c:	b538      	push	{r3, r4, r5, lr}
    2e0e:	460c      	mov	r4, r1
	ASSERT(dev);
    2e10:	4605      	mov	r5, r0
    2e12:	2230      	movs	r2, #48	; 0x30
    2e14:	4914      	ldr	r1, [pc, #80]	; (2e68 <_rtc_timer_init+0x5c>)
    2e16:	3000      	adds	r0, #0
    2e18:	bf18      	it	ne
    2e1a:	2001      	movne	r0, #1
    2e1c:	4b13      	ldr	r3, [pc, #76]	; (2e6c <_rtc_timer_init+0x60>)
    2e1e:	4798      	blx	r3
	dev->hw = hw;
    2e20:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e22:	2301      	movs	r3, #1
    2e24:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e26:	f248 0203 	movw	r2, #32771	; 0x8003
    2e2a:	6923      	ldr	r3, [r4, #16]
    2e2c:	4213      	tst	r3, r2
    2e2e:	d1fc      	bne.n	2e2a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2e30:	68eb      	ldr	r3, [r5, #12]
    2e32:	691a      	ldr	r2, [r3, #16]
    2e34:	f012 0f01 	tst.w	r2, #1
    2e38:	d1fb      	bne.n	2e32 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e3a:	f248 0280 	movw	r2, #32896	; 0x8080
    2e3e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e40:	f248 0103 	movw	r1, #32771	; 0x8003
    2e44:	691a      	ldr	r2, [r3, #16]
    2e46:	420a      	tst	r2, r1
    2e48:	d1fc      	bne.n	2e44 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2e4a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2e4c:	2301      	movs	r3, #1
    2e4e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e50:	6913      	ldr	r3, [r2, #16]
    2e52:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e56:	d1fb      	bne.n	2e50 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2e58:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e5e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    2e60:	4b03      	ldr	r3, [pc, #12]	; (2e70 <_rtc_timer_init+0x64>)
    2e62:	601d      	str	r5, [r3, #0]
}
    2e64:	2000      	movs	r0, #0
    2e66:	bd38      	pop	{r3, r4, r5, pc}
    2e68:	000095c4 	.word	0x000095c4
    2e6c:	000021c5 	.word	0x000021c5
    2e70:	20000898 	.word	0x20000898

00002e74 <_rtc_timer_deinit>:
{
    2e74:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2e76:	4604      	mov	r4, r0
    2e78:	b1c8      	cbz	r0, 2eae <_rtc_timer_deinit+0x3a>
    2e7a:	68c0      	ldr	r0, [r0, #12]
    2e7c:	3000      	adds	r0, #0
    2e7e:	bf18      	it	ne
    2e80:	2001      	movne	r0, #1
    2e82:	2252      	movs	r2, #82	; 0x52
    2e84:	490b      	ldr	r1, [pc, #44]	; (2eb4 <_rtc_timer_deinit+0x40>)
    2e86:	4b0c      	ldr	r3, [pc, #48]	; (2eb8 <_rtc_timer_deinit+0x44>)
    2e88:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2e8e:	4b0b      	ldr	r3, [pc, #44]	; (2ebc <_rtc_timer_deinit+0x48>)
    2e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e98:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    2e9c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e9e:	2301      	movs	r3, #1
    2ea0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ea2:	f248 0103 	movw	r1, #32771	; 0x8003
    2ea6:	6913      	ldr	r3, [r2, #16]
    2ea8:	420b      	tst	r3, r1
    2eaa:	d1fc      	bne.n	2ea6 <_rtc_timer_deinit+0x32>
}
    2eac:	bd10      	pop	{r4, pc}
    2eae:	2000      	movs	r0, #0
    2eb0:	e7e7      	b.n	2e82 <_rtc_timer_deinit+0xe>
    2eb2:	bf00      	nop
    2eb4:	000095c4 	.word	0x000095c4
    2eb8:	000021c5 	.word	0x000021c5
    2ebc:	e000e100 	.word	0xe000e100

00002ec0 <_rtc_timer_start>:
{
    2ec0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2ec2:	4604      	mov	r4, r0
    2ec4:	b310      	cbz	r0, 2f0c <_rtc_timer_start+0x4c>
    2ec6:	68c0      	ldr	r0, [r0, #12]
    2ec8:	3000      	adds	r0, #0
    2eca:	bf18      	it	ne
    2ecc:	2001      	movne	r0, #1
    2ece:	225e      	movs	r2, #94	; 0x5e
    2ed0:	490f      	ldr	r1, [pc, #60]	; (2f10 <_rtc_timer_start+0x50>)
    2ed2:	4b10      	ldr	r3, [pc, #64]	; (2f14 <_rtc_timer_start+0x54>)
    2ed4:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2eda:	4b0f      	ldr	r3, [pc, #60]	; (2f18 <_rtc_timer_start+0x58>)
    2edc:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    2ede:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    2ee0:	2300      	movs	r3, #0
    2ee2:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ee4:	6913      	ldr	r3, [r2, #16]
    2ee6:	f013 0f08 	tst.w	r3, #8
    2eea:	d1fb      	bne.n	2ee4 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    2eec:	68e3      	ldr	r3, [r4, #12]
    2eee:	691a      	ldr	r2, [r3, #16]
    2ef0:	f012 0f08 	tst.w	r2, #8
    2ef4:	d1fb      	bne.n	2eee <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2ef6:	881a      	ldrh	r2, [r3, #0]
    2ef8:	b292      	uxth	r2, r2
    2efa:	f042 0202 	orr.w	r2, r2, #2
    2efe:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f00:	f248 0103 	movw	r1, #32771	; 0x8003
    2f04:	691a      	ldr	r2, [r3, #16]
    2f06:	420a      	tst	r2, r1
    2f08:	d1fc      	bne.n	2f04 <_rtc_timer_start+0x44>
}
    2f0a:	bd10      	pop	{r4, pc}
    2f0c:	2000      	movs	r0, #0
    2f0e:	e7de      	b.n	2ece <_rtc_timer_start+0xe>
    2f10:	000095c4 	.word	0x000095c4
    2f14:	000021c5 	.word	0x000021c5
    2f18:	e000e100 	.word	0xe000e100

00002f1c <_rtc_timer_stop>:
{
    2f1c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2f1e:	4604      	mov	r4, r0
    2f20:	b1a0      	cbz	r0, 2f4c <_rtc_timer_stop+0x30>
    2f22:	68c0      	ldr	r0, [r0, #12]
    2f24:	3000      	adds	r0, #0
    2f26:	bf18      	it	ne
    2f28:	2001      	movne	r0, #1
    2f2a:	226b      	movs	r2, #107	; 0x6b
    2f2c:	4908      	ldr	r1, [pc, #32]	; (2f50 <_rtc_timer_stop+0x34>)
    2f2e:	4b09      	ldr	r3, [pc, #36]	; (2f54 <_rtc_timer_stop+0x38>)
    2f30:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    2f32:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2f34:	8813      	ldrh	r3, [r2, #0]
    2f36:	f023 0302 	bic.w	r3, r3, #2
    2f3a:	041b      	lsls	r3, r3, #16
    2f3c:	0c1b      	lsrs	r3, r3, #16
    2f3e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f40:	f248 0103 	movw	r1, #32771	; 0x8003
    2f44:	6913      	ldr	r3, [r2, #16]
    2f46:	420b      	tst	r3, r1
    2f48:	d1fc      	bne.n	2f44 <_rtc_timer_stop+0x28>
}
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	2000      	movs	r0, #0
    2f4e:	e7ec      	b.n	2f2a <_rtc_timer_stop+0xe>
    2f50:	000095c4 	.word	0x000095c4
    2f54:	000021c5 	.word	0x000021c5

00002f58 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    2f58:	4800      	ldr	r0, [pc, #0]	; (2f5c <_rtc_get_timer+0x4>)
    2f5a:	4770      	bx	lr
    2f5c:	20000000 	.word	0x20000000

00002f60 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2f60:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2f62:	4b08      	ldr	r3, [pc, #32]	; (2f84 <RTC_Handler+0x24>)
    2f64:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2f66:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2f68:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2f6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f6e:	d007      	beq.n	2f80 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2f70:	6823      	ldr	r3, [r4, #0]
    2f72:	b10b      	cbz	r3, 2f78 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2f74:	4620      	mov	r0, r4
    2f76:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2f78:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2f7e:	819a      	strh	r2, [r3, #12]
    2f80:	bd10      	pop	{r4, pc}
    2f82:	bf00      	nop
    2f84:	20000898 	.word	0x20000898

00002f88 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2f88:	b470      	push	{r4, r5, r6}
    2f8a:	b089      	sub	sp, #36	; 0x24
    2f8c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2f8e:	466c      	mov	r4, sp
    2f90:	4d0d      	ldr	r5, [pc, #52]	; (2fc8 <_sercom_get_hardware_index+0x40>)
    2f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2f9e:	9b00      	ldr	r3, [sp, #0]
    2fa0:	42b3      	cmp	r3, r6
    2fa2:	d00d      	beq.n	2fc0 <_sercom_get_hardware_index+0x38>
    2fa4:	4631      	mov	r1, r6
    2fa6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fa8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2faa:	f853 2b04 	ldr.w	r2, [r3], #4
    2fae:	428a      	cmp	r2, r1
    2fb0:	d007      	beq.n	2fc2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fb2:	3001      	adds	r0, #1
    2fb4:	2808      	cmp	r0, #8
    2fb6:	d1f8      	bne.n	2faa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2fb8:	2000      	movs	r0, #0
}
    2fba:	b009      	add	sp, #36	; 0x24
    2fbc:	bc70      	pop	{r4, r5, r6}
    2fbe:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fc0:	2000      	movs	r0, #0
			return i;
    2fc2:	b2c0      	uxtb	r0, r0
    2fc4:	e7f9      	b.n	2fba <_sercom_get_hardware_index+0x32>
    2fc6:	bf00      	nop
    2fc8:	000095dc 	.word	0x000095dc

00002fcc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2fcc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2fce:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2fd0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2fd2:	f013 0f01 	tst.w	r3, #1
    2fd6:	d003      	beq.n	2fe0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2fd8:	7da3      	ldrb	r3, [r4, #22]
    2fda:	f013 0f01 	tst.w	r3, #1
    2fde:	d112      	bne.n	3006 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2fe0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2fe2:	f013 0f02 	tst.w	r3, #2
    2fe6:	d003      	beq.n	2ff0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2fe8:	7da3      	ldrb	r3, [r4, #22]
    2fea:	f013 0f02 	tst.w	r3, #2
    2fee:	d10f      	bne.n	3010 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2ff0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2ff2:	f013 0f04 	tst.w	r3, #4
    2ff6:	d015      	beq.n	3024 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2ff8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2ffa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2ffe:	b163      	cbz	r3, 301a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3000:	23ff      	movs	r3, #255	; 0xff
    3002:	8363      	strh	r3, [r4, #26]
    3004:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3006:	2301      	movs	r3, #1
    3008:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    300a:	6803      	ldr	r3, [r0, #0]
    300c:	4798      	blx	r3
    300e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3010:	2302      	movs	r3, #2
    3012:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3014:	6883      	ldr	r3, [r0, #8]
    3016:	4798      	blx	r3
    3018:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    301a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    301c:	6843      	ldr	r3, [r0, #4]
    301e:	b2c9      	uxtb	r1, r1
    3020:	4798      	blx	r3
    3022:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3024:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3026:	09db      	lsrs	r3, r3, #7
    3028:	d100      	bne.n	302c <_sercom_usart_interrupt_handler+0x60>
    302a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    302c:	2380      	movs	r3, #128	; 0x80
    302e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    3030:	68c3      	ldr	r3, [r0, #12]
    3032:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3034:	8b63      	ldrh	r3, [r4, #26]
    3036:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3038:	8363      	strh	r3, [r4, #26]
    303a:	e7f6      	b.n	302a <_sercom_usart_interrupt_handler+0x5e>

0000303c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    303c:	4b11      	ldr	r3, [pc, #68]	; (3084 <_sercom_init_irq_param+0x48>)
    303e:	4298      	cmp	r0, r3
    3040:	d011      	beq.n	3066 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    3042:	4b11      	ldr	r3, [pc, #68]	; (3088 <_sercom_init_irq_param+0x4c>)
    3044:	4298      	cmp	r0, r3
    3046:	d011      	beq.n	306c <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    3048:	4b10      	ldr	r3, [pc, #64]	; (308c <_sercom_init_irq_param+0x50>)
    304a:	4298      	cmp	r0, r3
    304c:	d011      	beq.n	3072 <_sercom_init_irq_param+0x36>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    304e:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    3052:	d011      	beq.n	3078 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3054:	4b0e      	ldr	r3, [pc, #56]	; (3090 <_sercom_init_irq_param+0x54>)
    3056:	4298      	cmp	r0, r3
    3058:	d011      	beq.n	307e <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    305a:	4b0e      	ldr	r3, [pc, #56]	; (3094 <_sercom_init_irq_param+0x58>)
    305c:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    305e:	bf04      	itt	eq
    3060:	4b0d      	ldreq	r3, [pc, #52]	; (3098 <_sercom_init_irq_param+0x5c>)
    3062:	6159      	streq	r1, [r3, #20]
    3064:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    3066:	4b0c      	ldr	r3, [pc, #48]	; (3098 <_sercom_init_irq_param+0x5c>)
    3068:	6019      	str	r1, [r3, #0]
    306a:	e7f0      	b.n	304e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    306c:	4b0a      	ldr	r3, [pc, #40]	; (3098 <_sercom_init_irq_param+0x5c>)
    306e:	6059      	str	r1, [r3, #4]
    3070:	e7f0      	b.n	3054 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    3072:	4b09      	ldr	r3, [pc, #36]	; (3098 <_sercom_init_irq_param+0x5c>)
    3074:	6099      	str	r1, [r3, #8]
    3076:	e7f0      	b.n	305a <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    3078:	4b07      	ldr	r3, [pc, #28]	; (3098 <_sercom_init_irq_param+0x5c>)
    307a:	60d9      	str	r1, [r3, #12]
    307c:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    307e:	4b06      	ldr	r3, [pc, #24]	; (3098 <_sercom_init_irq_param+0x5c>)
    3080:	6119      	str	r1, [r3, #16]
    3082:	4770      	bx	lr
    3084:	40003000 	.word	0x40003000
    3088:	40003400 	.word	0x40003400
    308c:	41012000 	.word	0x41012000
    3090:	43000400 	.word	0x43000400
    3094:	43000800 	.word	0x43000800
    3098:	2000089c 	.word	0x2000089c

0000309c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    309c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <_sercom_get_irq_num+0x10>)
    30a0:	4798      	blx	r3
    30a2:	0080      	lsls	r0, r0, #2
    30a4:	302e      	adds	r0, #46	; 0x2e
}
    30a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    30aa:	bd08      	pop	{r3, pc}
    30ac:	00002f89 	.word	0x00002f89

000030b0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    30b0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    30b2:	f013 0f01 	tst.w	r3, #1
    30b6:	d109      	bne.n	30cc <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    30b8:	6803      	ldr	r3, [r0, #0]
    30ba:	f043 0302 	orr.w	r3, r3, #2
    30be:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    30c0:	69c3      	ldr	r3, [r0, #28]
    30c2:	f013 0f03 	tst.w	r3, #3
    30c6:	d1fb      	bne.n	30c0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    30c8:	2000      	movs	r0, #0
    30ca:	4770      	bx	lr
		return ERR_BUSY;
    30cc:	f06f 0003 	mvn.w	r0, #3
}
    30d0:	4770      	bx	lr
	...

000030d4 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    30d4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    30d6:	4b03      	ldr	r3, [pc, #12]	; (30e4 <_spi_get_tx_dma_channel+0x10>)
    30d8:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    30da:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    30dc:	bf0c      	ite	eq
    30de:	2008      	moveq	r0, #8
    30e0:	2000      	movne	r0, #0
    30e2:	bd08      	pop	{r3, pc}
    30e4:	00002f89 	.word	0x00002f89

000030e8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    30e8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    30ea:	4b03      	ldr	r3, [pc, #12]	; (30f8 <_spi_get_rx_dma_channel+0x10>)
    30ec:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    30ee:	2807      	cmp	r0, #7
    30f0:	bf8c      	ite	hi
    30f2:	2000      	movhi	r0, #0
    30f4:	2001      	movls	r0, #1
    30f6:	bd08      	pop	{r3, pc}
    30f8:	00002f89 	.word	0x00002f89

000030fc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    30fc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    30fe:	6883      	ldr	r3, [r0, #8]
    3100:	689b      	ldr	r3, [r3, #8]
    3102:	b103      	cbz	r3, 3106 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    3104:	4798      	blx	r3
    3106:	bd08      	pop	{r3, pc}

00003108 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    3108:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    310a:	6883      	ldr	r3, [r0, #8]
    310c:	685b      	ldr	r3, [r3, #4]
    310e:	b103      	cbz	r3, 3112 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    3110:	4798      	blx	r3
    3112:	bd08      	pop	{r3, pc}

00003114 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    3114:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    3116:	6883      	ldr	r3, [r0, #8]
    3118:	68db      	ldr	r3, [r3, #12]
    311a:	b103      	cbz	r3, 311e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    311c:	4798      	blx	r3
    311e:	bd08      	pop	{r3, pc}

00003120 <_usart_init>:
{
    3120:	b510      	push	{r4, lr}
    3122:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3124:	4b48      	ldr	r3, [pc, #288]	; (3248 <_usart_init+0x128>)
    3126:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3128:	2800      	cmp	r0, #0
    312a:	d06a      	beq.n	3202 <_usart_init+0xe2>
    312c:	2801      	cmp	r0, #1
    312e:	d062      	beq.n	31f6 <_usart_init+0xd6>
    3130:	2802      	cmp	r0, #2
    3132:	d062      	beq.n	31fa <_usart_init+0xda>
    3134:	2804      	cmp	r0, #4
    3136:	d062      	beq.n	31fe <_usart_init+0xde>
    3138:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    313a:	bf08      	it	eq
    313c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    313e:	d006      	beq.n	314e <_usart_init+0x2e>
	ASSERT(false);
    3140:	f240 2276 	movw	r2, #630	; 0x276
    3144:	4941      	ldr	r1, [pc, #260]	; (324c <_usart_init+0x12c>)
    3146:	2000      	movs	r0, #0
    3148:	4b41      	ldr	r3, [pc, #260]	; (3250 <_usart_init+0x130>)
    314a:	4798      	blx	r3
	return 0;
    314c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    314e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3150:	f013 0f01 	tst.w	r3, #1
    3154:	d122      	bne.n	319c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3156:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    315a:	4a3e      	ldr	r2, [pc, #248]	; (3254 <_usart_init+0x134>)
    315c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3162:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3166:	69e3      	ldr	r3, [r4, #28]
    3168:	f013 0f03 	tst.w	r3, #3
    316c:	d1fb      	bne.n	3166 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    316e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3170:	f013 0f02 	tst.w	r3, #2
    3174:	d00b      	beq.n	318e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3176:	6823      	ldr	r3, [r4, #0]
    3178:	f023 0302 	bic.w	r3, r3, #2
    317c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    317e:	69e3      	ldr	r3, [r4, #28]
    3180:	f013 0f03 	tst.w	r3, #3
    3184:	d1fb      	bne.n	317e <_usart_init+0x5e>
    3186:	69e3      	ldr	r3, [r4, #28]
    3188:	f013 0f02 	tst.w	r3, #2
    318c:	d1fb      	bne.n	3186 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    318e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3192:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3194:	69e3      	ldr	r3, [r4, #28]
    3196:	f013 0f03 	tst.w	r3, #3
    319a:	d1fb      	bne.n	3194 <_usart_init+0x74>
    319c:	69e3      	ldr	r3, [r4, #28]
    319e:	f013 0f01 	tst.w	r3, #1
    31a2:	d1fb      	bne.n	319c <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    31a4:	460a      	mov	r2, r1
    31a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    31aa:	4b2a      	ldr	r3, [pc, #168]	; (3254 <_usart_init+0x134>)
    31ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    31b0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31b2:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31b4:	69e3      	ldr	r3, [r4, #28]
    31b6:	f013 0f03 	tst.w	r3, #3
    31ba:	d1fb      	bne.n	31b4 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    31bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31c0:	4924      	ldr	r1, [pc, #144]	; (3254 <_usart_init+0x134>)
    31c2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    31c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31ca:	69e3      	ldr	r3, [r4, #28]
    31cc:	f013 0f1f 	tst.w	r3, #31
    31d0:	d1fb      	bne.n	31ca <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    31d2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31d6:	491f      	ldr	r1, [pc, #124]	; (3254 <_usart_init+0x134>)
    31d8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    31de:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    31e0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    31e4:	d10f      	bne.n	3206 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    31e6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31ea:	491a      	ldr	r1, [pc, #104]	; (3254 <_usart_init+0x134>)
    31ec:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    31f2:	81a3      	strh	r3, [r4, #12]
    31f4:	e016      	b.n	3224 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    31f6:	2101      	movs	r1, #1
    31f8:	e7a9      	b.n	314e <_usart_init+0x2e>
    31fa:	2102      	movs	r1, #2
    31fc:	e7a7      	b.n	314e <_usart_init+0x2e>
    31fe:	2103      	movs	r1, #3
    3200:	e7a5      	b.n	314e <_usart_init+0x2e>
    3202:	2100      	movs	r1, #0
    3204:	e7a3      	b.n	314e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3206:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    320a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    320e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    3210:	89a1      	ldrh	r1, [r4, #12]
    3212:	f360 010c 	bfi	r1, r0, #0, #13
    3216:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3218:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    321c:	89a3      	ldrh	r3, [r4, #12]
    321e:	f361 334f 	bfi	r3, r1, #13, #3
    3222:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3224:	4b0b      	ldr	r3, [pc, #44]	; (3254 <_usart_init+0x134>)
    3226:	0051      	lsls	r1, r2, #1
    3228:	1888      	adds	r0, r1, r2
    322a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    322e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    3232:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3234:	440a      	add	r2, r1
    3236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    323a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    323e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    3242:	2000      	movs	r0, #0
    3244:	bd10      	pop	{r4, pc}
    3246:	bf00      	nop
    3248:	00002f89 	.word	0x00002f89
    324c:	000096b0 	.word	0x000096b0
    3250:	000021c5 	.word	0x000021c5
    3254:	000095dc 	.word	0x000095dc

00003258 <_get_i2cm_index>:
{
    3258:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <_get_i2cm_index+0x20>)
    325c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    325e:	2805      	cmp	r0, #5
    3260:	d008      	beq.n	3274 <_get_i2cm_index+0x1c>
	ASSERT(false);
    3262:	f240 32ed 	movw	r2, #1005	; 0x3ed
    3266:	4905      	ldr	r1, [pc, #20]	; (327c <_get_i2cm_index+0x24>)
    3268:	2000      	movs	r0, #0
    326a:	4b05      	ldr	r3, [pc, #20]	; (3280 <_get_i2cm_index+0x28>)
    326c:	4798      	blx	r3
	return -1;
    326e:	f04f 30ff 	mov.w	r0, #4294967295
}
    3272:	bd08      	pop	{r3, pc}
			return i;
    3274:	2000      	movs	r0, #0
    3276:	bd08      	pop	{r3, pc}
    3278:	00002f89 	.word	0x00002f89
    327c:	000096b0 	.word	0x000096b0
    3280:	000021c5 	.word	0x000021c5

00003284 <_i2c_m_sync_init_impl>:
{
    3284:	b538      	push	{r3, r4, r5, lr}
    3286:	4605      	mov	r5, r0
    3288:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    328a:	4608      	mov	r0, r1
    328c:	4b34      	ldr	r3, [pc, #208]	; (3360 <_i2c_m_sync_init_impl+0xdc>)
    328e:	4798      	blx	r3
    3290:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    3292:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    3294:	f013 0f01 	tst.w	r3, #1
    3298:	d123      	bne.n	32e2 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    329a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    329e:	4a31      	ldr	r2, [pc, #196]	; (3364 <_i2c_m_sync_init_impl+0xe0>)
    32a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    32a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    32a8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32ac:	69e3      	ldr	r3, [r4, #28]
    32ae:	f013 0f03 	tst.w	r3, #3
    32b2:	d1fb      	bne.n	32ac <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    32b4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    32b6:	f013 0f02 	tst.w	r3, #2
    32ba:	d00b      	beq.n	32d4 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    32bc:	6823      	ldr	r3, [r4, #0]
    32be:	f023 0302 	bic.w	r3, r3, #2
    32c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32c4:	69e3      	ldr	r3, [r4, #28]
    32c6:	f013 0f03 	tst.w	r3, #3
    32ca:	d1fb      	bne.n	32c4 <_i2c_m_sync_init_impl+0x40>
    32cc:	69e3      	ldr	r3, [r4, #28]
    32ce:	f013 0f02 	tst.w	r3, #2
    32d2:	d1fb      	bne.n	32cc <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    32d4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    32d8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32da:	69e3      	ldr	r3, [r4, #28]
    32dc:	f013 0f03 	tst.w	r3, #3
    32e0:	d1fb      	bne.n	32da <_i2c_m_sync_init_impl+0x56>
    32e2:	69e3      	ldr	r3, [r4, #28]
    32e4:	f013 0f01 	tst.w	r3, #1
    32e8:	d1fb      	bne.n	32e2 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    32ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    32ee:	4a1d      	ldr	r2, [pc, #116]	; (3364 <_i2c_m_sync_init_impl+0xe0>)
    32f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    32f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    32f8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32fa:	69e3      	ldr	r3, [r4, #28]
    32fc:	f013 0f03 	tst.w	r3, #3
    3300:	d1fb      	bne.n	32fa <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    3302:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3306:	4917      	ldr	r1, [pc, #92]	; (3364 <_i2c_m_sync_init_impl+0xe0>)
    3308:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    330c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3310:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3312:	69e3      	ldr	r3, [r4, #28]
    3314:	f013 0f04 	tst.w	r3, #4
    3318:	d1fb      	bne.n	3312 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    331a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    331e:	4911      	ldr	r1, [pc, #68]	; (3364 <_i2c_m_sync_init_impl+0xe0>)
    3320:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3324:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    3328:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    332a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    332e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3330:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3336:	2b01      	cmp	r3, #1
    3338:	bf94      	ite	ls
    333a:	2300      	movls	r3, #0
    333c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    333e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    3342:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3344:	69e3      	ldr	r3, [r4, #28]
    3346:	f013 0f04 	tst.w	r3, #4
    334a:	d1fb      	bne.n	3344 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    334c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3350:	4b04      	ldr	r3, [pc, #16]	; (3364 <_i2c_m_sync_init_impl+0xe0>)
    3352:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3356:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    335a:	81eb      	strh	r3, [r5, #14]
}
    335c:	2000      	movs	r0, #0
    335e:	bd38      	pop	{r3, r4, r5, pc}
    3360:	00003259 	.word	0x00003259
    3364:	000095dc 	.word	0x000095dc

00003368 <_sercom_i2c_m_irq_handler>:
{
    3368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    336c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    336e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    3370:	7e26      	ldrb	r6, [r4, #24]
    3372:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    3374:	f8df 8234 	ldr.w	r8, [pc, #564]	; 35ac <_sercom_i2c_m_irq_handler+0x244>
    3378:	f240 425f 	movw	r2, #1119	; 0x45f
    337c:	4641      	mov	r1, r8
    337e:	3000      	adds	r0, #0
    3380:	bf18      	it	ne
    3382:	2001      	movne	r0, #1
    3384:	4f88      	ldr	r7, [pc, #544]	; (35a8 <_sercom_i2c_m_irq_handler+0x240>)
    3386:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    3388:	6928      	ldr	r0, [r5, #16]
    338a:	f44f 628c 	mov.w	r2, #1120	; 0x460
    338e:	4641      	mov	r1, r8
    3390:	3000      	adds	r0, #0
    3392:	bf18      	it	ne
    3394:	2001      	movne	r0, #1
    3396:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    3398:	f016 0f80 	tst.w	r6, #128	; 0x80
    339c:	f040 80f4 	bne.w	3588 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    33a0:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33a2:	69e3      	ldr	r3, [r4, #28]
    33a4:	f013 0f04 	tst.w	r3, #4
    33a8:	d1fb      	bne.n	33a2 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    33aa:	8b63      	ldrh	r3, [r4, #26]
    33ac:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    33ae:	f016 0f01 	tst.w	r6, #1
    33b2:	f000 8090 	beq.w	34d6 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    33b6:	f013 0f02 	tst.w	r3, #2
    33ba:	d022      	beq.n	3402 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    33bc:	2201      	movs	r2, #1
    33be:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    33c0:	886a      	ldrh	r2, [r5, #2]
    33c2:	b292      	uxth	r2, r2
    33c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    33c8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    33ca:	886a      	ldrh	r2, [r5, #2]
    33cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    33d0:	0412      	lsls	r2, r2, #16
    33d2:	0c12      	lsrs	r2, r2, #16
    33d4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    33d6:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    33da:	2b00      	cmp	r3, #0
    33dc:	bf14      	ite	ne
    33de:	f06f 0104 	mvnne.w	r1, #4
    33e2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    33e6:	886b      	ldrh	r3, [r5, #2]
    33e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    33ec:	041b      	lsls	r3, r3, #16
    33ee:	0c1b      	lsrs	r3, r3, #16
    33f0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    33f2:	696b      	ldr	r3, [r5, #20]
    33f4:	2b00      	cmp	r3, #0
    33f6:	f000 80c5 	beq.w	3584 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    33fa:	4628      	mov	r0, r5
    33fc:	4798      	blx	r3
    33fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3402:	f013 0f04 	tst.w	r3, #4
    3406:	d124      	bne.n	3452 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    3408:	886b      	ldrh	r3, [r5, #2]
    340a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    340e:	d03e      	beq.n	348e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3410:	882b      	ldrh	r3, [r5, #0]
    3412:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3414:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3418:	69e3      	ldr	r3, [r4, #28]
    341a:	f013 0f04 	tst.w	r3, #4
    341e:	d1fb      	bne.n	3418 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3420:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    3426:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    342a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    342c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    342e:	69e3      	ldr	r3, [r4, #28]
    3430:	f013 0f04 	tst.w	r3, #4
    3434:	d1fb      	bne.n	342e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    3436:	886b      	ldrh	r3, [r5, #2]
    3438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    343c:	041b      	lsls	r3, r3, #16
    343e:	0c1b      	lsrs	r3, r3, #16
    3440:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    3442:	69ab      	ldr	r3, [r5, #24]
    3444:	2b00      	cmp	r3, #0
    3446:	f000 8088 	beq.w	355a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    344a:	4628      	mov	r0, r5
    344c:	4798      	blx	r3
    344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    3452:	686b      	ldr	r3, [r5, #4]
    3454:	2b00      	cmp	r3, #0
    3456:	dd04      	ble.n	3462 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    3458:	886b      	ldrh	r3, [r5, #2]
    345a:	b29b      	uxth	r3, r3
    345c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3460:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    3462:	886b      	ldrh	r3, [r5, #2]
    3464:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3468:	d108      	bne.n	347c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    346a:	886b      	ldrh	r3, [r5, #2]
    346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3470:	041b      	lsls	r3, r3, #16
    3472:	0c1b      	lsrs	r3, r3, #16
    3474:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    3476:	f06f 0101 	mvn.w	r1, #1
    347a:	e7b4      	b.n	33e6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    347c:	6863      	ldr	r3, [r4, #4]
    347e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3482:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3484:	69e3      	ldr	r3, [r4, #28]
    3486:	f013 0f04 	tst.w	r3, #4
    348a:	d1fb      	bne.n	3484 <_sercom_i2c_m_irq_handler+0x11c>
    348c:	e7ed      	b.n	346a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    348e:	686b      	ldr	r3, [r5, #4]
    3490:	b99b      	cbnz	r3, 34ba <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    3492:	886b      	ldrh	r3, [r5, #2]
    3494:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3498:	d106      	bne.n	34a8 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    349a:	886b      	ldrh	r3, [r5, #2]
    349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    34a0:	041b      	lsls	r3, r3, #16
    34a2:	0c1b      	lsrs	r3, r3, #16
    34a4:	806b      	strh	r3, [r5, #2]
    34a6:	e7cc      	b.n	3442 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    34a8:	6863      	ldr	r3, [r4, #4]
    34aa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    34ae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34b0:	69e3      	ldr	r3, [r4, #28]
    34b2:	f013 0f04 	tst.w	r3, #4
    34b6:	d1fb      	bne.n	34b0 <_sercom_i2c_m_irq_handler+0x148>
    34b8:	e7ef      	b.n	349a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    34ba:	68ab      	ldr	r3, [r5, #8]
    34bc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    34be:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34c0:	69e3      	ldr	r3, [r4, #28]
    34c2:	f013 0f04 	tst.w	r3, #4
    34c6:	d1fb      	bne.n	34c0 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    34c8:	68ab      	ldr	r3, [r5, #8]
    34ca:	3301      	adds	r3, #1
    34cc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    34ce:	686b      	ldr	r3, [r5, #4]
    34d0:	3b01      	subs	r3, #1
    34d2:	606b      	str	r3, [r5, #4]
    34d4:	e7b5      	b.n	3442 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    34d6:	f016 0f02 	tst.w	r6, #2
    34da:	d041      	beq.n	3560 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    34dc:	686a      	ldr	r2, [r5, #4]
    34de:	2a00      	cmp	r2, #0
    34e0:	d036      	beq.n	3550 <_sercom_i2c_m_irq_handler+0x1e8>
    34e2:	f013 0f04 	tst.w	r3, #4
    34e6:	d133      	bne.n	3550 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    34e8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    34ec:	3a01      	subs	r2, #1
    34ee:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    34f0:	2a00      	cmp	r2, #0
    34f2:	d137      	bne.n	3564 <_sercom_i2c_m_irq_handler+0x1fc>
    34f4:	2900      	cmp	r1, #0
    34f6:	d039      	beq.n	356c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    34f8:	886b      	ldrh	r3, [r5, #2]
    34fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    34fe:	d116      	bne.n	352e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    3500:	886b      	ldrh	r3, [r5, #2]
    3502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3506:	041b      	lsls	r3, r3, #16
    3508:	0c1b      	lsrs	r3, r3, #16
    350a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    350c:	68aa      	ldr	r2, [r5, #8]
    350e:	1c53      	adds	r3, r2, #1
    3510:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3512:	69e3      	ldr	r3, [r4, #28]
    3514:	f013 0f04 	tst.w	r3, #4
    3518:	d1fb      	bne.n	3512 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    351a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    351c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    351e:	2302      	movs	r3, #2
    3520:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3522:	69eb      	ldr	r3, [r5, #28]
    3524:	b1e3      	cbz	r3, 3560 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    3526:	4628      	mov	r0, r5
    3528:	4798      	blx	r3
    352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    352e:	6863      	ldr	r3, [r4, #4]
    3530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3534:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3536:	69e3      	ldr	r3, [r4, #28]
    3538:	f013 0f04 	tst.w	r3, #4
    353c:	d1fb      	bne.n	3536 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    353e:	6863      	ldr	r3, [r4, #4]
    3540:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3544:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3546:	69e3      	ldr	r3, [r4, #28]
    3548:	f013 0f04 	tst.w	r3, #4
    354c:	d1fb      	bne.n	3546 <_sercom_i2c_m_irq_handler+0x1de>
    354e:	e7d7      	b.n	3500 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3550:	2302      	movs	r3, #2
    3552:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    3554:	f06f 0101 	mvn.w	r1, #1
    3558:	e745      	b.n	33e6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    355a:	f016 0f02 	tst.w	r6, #2
    355e:	d1e0      	bne.n	3522 <_sercom_i2c_m_irq_handler+0x1ba>
    3560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3564:	2a01      	cmp	r2, #1
    3566:	d1d1      	bne.n	350c <_sercom_i2c_m_irq_handler+0x1a4>
    3568:	2900      	cmp	r1, #0
    356a:	d0cf      	beq.n	350c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    356c:	6863      	ldr	r3, [r4, #4]
    356e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3572:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3574:	69e3      	ldr	r3, [r4, #28]
    3576:	f013 0f04 	tst.w	r3, #4
    357a:	d1fb      	bne.n	3574 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    357c:	686b      	ldr	r3, [r5, #4]
    357e:	2b00      	cmp	r3, #0
    3580:	d0ba      	beq.n	34f8 <_sercom_i2c_m_irq_handler+0x190>
    3582:	e7c3      	b.n	350c <_sercom_i2c_m_irq_handler+0x1a4>
    3584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3588:	886b      	ldrh	r3, [r5, #2]
    358a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    358e:	041b      	lsls	r3, r3, #16
    3590:	0c1b      	lsrs	r3, r3, #16
    3592:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    3594:	696b      	ldr	r3, [r5, #20]
    3596:	2b00      	cmp	r3, #0
    3598:	d0e2      	beq.n	3560 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    359a:	f06f 0104 	mvn.w	r1, #4
    359e:	4628      	mov	r0, r5
    35a0:	4798      	blx	r3
    35a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35a6:	bf00      	nop
    35a8:	000021c5 	.word	0x000021c5
    35ac:	000096b0 	.word	0x000096b0

000035b0 <_usart_async_init>:
{
    35b0:	b570      	push	{r4, r5, r6, lr}
    35b2:	460d      	mov	r5, r1
	ASSERT(device);
    35b4:	4606      	mov	r6, r0
    35b6:	22d6      	movs	r2, #214	; 0xd6
    35b8:	4917      	ldr	r1, [pc, #92]	; (3618 <_usart_async_init+0x68>)
    35ba:	3000      	adds	r0, #0
    35bc:	bf18      	it	ne
    35be:	2001      	movne	r0, #1
    35c0:	4b16      	ldr	r3, [pc, #88]	; (361c <_usart_async_init+0x6c>)
    35c2:	4798      	blx	r3
	init_status = _usart_init(hw);
    35c4:	4628      	mov	r0, r5
    35c6:	4b16      	ldr	r3, [pc, #88]	; (3620 <_usart_async_init+0x70>)
    35c8:	4798      	blx	r3
	if (init_status) {
    35ca:	4604      	mov	r4, r0
    35cc:	b108      	cbz	r0, 35d2 <_usart_async_init+0x22>
}
    35ce:	4620      	mov	r0, r4
    35d0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    35d2:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    35d4:	4631      	mov	r1, r6
    35d6:	4628      	mov	r0, r5
    35d8:	4b12      	ldr	r3, [pc, #72]	; (3624 <_usart_async_init+0x74>)
    35da:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    35dc:	4628      	mov	r0, r5
    35de:	4b12      	ldr	r3, [pc, #72]	; (3628 <_usart_async_init+0x78>)
    35e0:	4798      	blx	r3
    35e2:	1d01      	adds	r1, r0, #4
    35e4:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35e6:	2501      	movs	r5, #1
    35e8:	f000 021f 	and.w	r2, r0, #31
    35ec:	fa05 f202 	lsl.w	r2, r5, r2
    35f0:	0943      	lsrs	r3, r0, #5
    35f2:	009b      	lsls	r3, r3, #2
    35f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    35f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    35fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3604:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3608:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    360c:	601a      	str	r2, [r3, #0]
		irq++;
    360e:	3001      	adds	r0, #1
    3610:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3612:	4281      	cmp	r1, r0
    3614:	d1e8      	bne.n	35e8 <_usart_async_init+0x38>
    3616:	e7da      	b.n	35ce <_usart_async_init+0x1e>
    3618:	000096b0 	.word	0x000096b0
    361c:	000021c5 	.word	0x000021c5
    3620:	00003121 	.word	0x00003121
    3624:	0000303d 	.word	0x0000303d
    3628:	0000309d 	.word	0x0000309d

0000362c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    362c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    362e:	6813      	ldr	r3, [r2, #0]
    3630:	f043 0302 	orr.w	r3, r3, #2
    3634:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3636:	69d3      	ldr	r3, [r2, #28]
    3638:	f013 0f03 	tst.w	r3, #3
    363c:	d1fb      	bne.n	3636 <_usart_async_enable+0xa>
}
    363e:	4770      	bx	lr

00003640 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3640:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3642:	6299      	str	r1, [r3, #40]	; 0x28
    3644:	4770      	bx	lr

00003646 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3646:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3648:	2201      	movs	r2, #1
    364a:	759a      	strb	r2, [r3, #22]
    364c:	4770      	bx	lr

0000364e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    364e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3650:	2202      	movs	r2, #2
    3652:	759a      	strb	r2, [r3, #22]
    3654:	4770      	bx	lr
	...

00003658 <_usart_async_set_irq_state>:
{
    3658:	b570      	push	{r4, r5, r6, lr}
    365a:	460c      	mov	r4, r1
    365c:	4616      	mov	r6, r2
	ASSERT(device);
    365e:	4605      	mov	r5, r0
    3660:	f240 2236 	movw	r2, #566	; 0x236
    3664:	4915      	ldr	r1, [pc, #84]	; (36bc <_usart_async_set_irq_state+0x64>)
    3666:	3000      	adds	r0, #0
    3668:	bf18      	it	ne
    366a:	2001      	movne	r0, #1
    366c:	4b14      	ldr	r3, [pc, #80]	; (36c0 <_usart_async_set_irq_state+0x68>)
    366e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3670:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3674:	d10d      	bne.n	3692 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3676:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3678:	b92e      	cbnz	r6, 3686 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    367a:	2201      	movs	r2, #1
    367c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    367e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3680:	2202      	movs	r2, #2
    3682:	751a      	strb	r2, [r3, #20]
    3684:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3686:	2201      	movs	r2, #1
    3688:	759a      	strb	r2, [r3, #22]
    368a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    368c:	2202      	movs	r2, #2
    368e:	759a      	strb	r2, [r3, #22]
    3690:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3692:	2c01      	cmp	r4, #1
    3694:	d002      	beq.n	369c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    3696:	2c03      	cmp	r4, #3
    3698:	d008      	beq.n	36ac <_usart_async_set_irq_state+0x54>
    369a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    369c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    369e:	b916      	cbnz	r6, 36a6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    36a0:	2204      	movs	r2, #4
    36a2:	751a      	strb	r2, [r3, #20]
    36a4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    36a6:	2204      	movs	r2, #4
    36a8:	759a      	strb	r2, [r3, #22]
    36aa:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    36ac:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    36ae:	b116      	cbz	r6, 36b6 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    36b0:	2280      	movs	r2, #128	; 0x80
    36b2:	759a      	strb	r2, [r3, #22]
}
    36b4:	e7f1      	b.n	369a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    36b6:	2280      	movs	r2, #128	; 0x80
    36b8:	751a      	strb	r2, [r3, #20]
    36ba:	bd70      	pop	{r4, r5, r6, pc}
    36bc:	000096b0 	.word	0x000096b0
    36c0:	000021c5 	.word	0x000021c5

000036c4 <_i2c_m_async_init>:
{
    36c4:	b570      	push	{r4, r5, r6, lr}
    36c6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    36c8:	4606      	mov	r6, r0
    36ca:	f240 42d2 	movw	r2, #1234	; 0x4d2
    36ce:	4918      	ldr	r1, [pc, #96]	; (3730 <_i2c_m_async_init+0x6c>)
    36d0:	3000      	adds	r0, #0
    36d2:	bf18      	it	ne
    36d4:	2001      	movne	r0, #1
    36d6:	4b17      	ldr	r3, [pc, #92]	; (3734 <_i2c_m_async_init+0x70>)
    36d8:	4798      	blx	r3
	i2c_dev->hw = hw;
    36da:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    36dc:	4629      	mov	r1, r5
    36de:	4630      	mov	r0, r6
    36e0:	4b15      	ldr	r3, [pc, #84]	; (3738 <_i2c_m_async_init+0x74>)
    36e2:	4798      	blx	r3
	if (init_status) {
    36e4:	4604      	mov	r4, r0
    36e6:	b108      	cbz	r0, 36ec <_i2c_m_async_init+0x28>
}
    36e8:	4620      	mov	r0, r4
    36ea:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    36ec:	4631      	mov	r1, r6
    36ee:	4628      	mov	r0, r5
    36f0:	4b12      	ldr	r3, [pc, #72]	; (373c <_i2c_m_async_init+0x78>)
    36f2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    36f4:	4628      	mov	r0, r5
    36f6:	4b12      	ldr	r3, [pc, #72]	; (3740 <_i2c_m_async_init+0x7c>)
    36f8:	4798      	blx	r3
    36fa:	1d01      	adds	r1, r0, #4
    36fc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36fe:	2501      	movs	r5, #1
    3700:	f000 021f 	and.w	r2, r0, #31
    3704:	fa05 f202 	lsl.w	r2, r5, r2
    3708:	0943      	lsrs	r3, r0, #5
    370a:	009b      	lsls	r3, r3, #2
    370c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3710:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    371c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3720:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3724:	601a      	str	r2, [r3, #0]
		irq++;
    3726:	3001      	adds	r0, #1
    3728:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    372a:	4281      	cmp	r1, r0
    372c:	d1e8      	bne.n	3700 <_i2c_m_async_init+0x3c>
    372e:	e7db      	b.n	36e8 <_i2c_m_async_init+0x24>
    3730:	000096b0 	.word	0x000096b0
    3734:	000021c5 	.word	0x000021c5
    3738:	00003285 	.word	0x00003285
    373c:	0000303d 	.word	0x0000303d
    3740:	0000309d 	.word	0x0000309d

00003744 <_i2c_m_async_transfer>:
{
    3744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3748:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    374a:	4605      	mov	r5, r0
    374c:	f110 0800 	adds.w	r8, r0, #0
    3750:	bf18      	it	ne
    3752:	f04f 0801 	movne.w	r8, #1
    3756:	4f45      	ldr	r7, [pc, #276]	; (386c <_i2c_m_async_transfer+0x128>)
    3758:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    375c:	4639      	mov	r1, r7
    375e:	4640      	mov	r0, r8
    3760:	4e43      	ldr	r6, [pc, #268]	; (3870 <_i2c_m_async_transfer+0x12c>)
    3762:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3764:	6928      	ldr	r0, [r5, #16]
    3766:	f240 5229 	movw	r2, #1321	; 0x529
    376a:	4639      	mov	r1, r7
    376c:	3000      	adds	r0, #0
    376e:	bf18      	it	ne
    3770:	2001      	movne	r0, #1
    3772:	47b0      	blx	r6
	ASSERT(msg);
    3774:	f240 522a 	movw	r2, #1322	; 0x52a
    3778:	4639      	mov	r1, r7
    377a:	1c20      	adds	r0, r4, #0
    377c:	bf18      	it	ne
    377e:	2001      	movne	r0, #1
    3780:	47b0      	blx	r6
	if (msg->len == 0) {
    3782:	6860      	ldr	r0, [r4, #4]
    3784:	2800      	cmp	r0, #0
    3786:	d06f      	beq.n	3868 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3788:	886b      	ldrh	r3, [r5, #2]
    378a:	f413 7f80 	tst.w	r3, #256	; 0x100
    378e:	d169      	bne.n	3864 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    3790:	8863      	ldrh	r3, [r4, #2]
    3792:	b29b      	uxth	r3, r3
    3794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3798:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    379a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    379e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    37a2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    37a4:	6853      	ldr	r3, [r2, #4]
    37a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37aa:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37ac:	69d3      	ldr	r3, [r2, #28]
    37ae:	f013 0f04 	tst.w	r3, #4
    37b2:	d1fb      	bne.n	37ac <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    37b4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    37b6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    37b8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    37bc:	492b      	ldr	r1, [pc, #172]	; (386c <_i2c_m_async_transfer+0x128>)
    37be:	4640      	mov	r0, r8
    37c0:	4b2b      	ldr	r3, [pc, #172]	; (3870 <_i2c_m_async_transfer+0x12c>)
    37c2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    37c4:	686b      	ldr	r3, [r5, #4]
    37c6:	2b01      	cmp	r3, #1
    37c8:	d02a      	beq.n	3820 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    37ca:	6863      	ldr	r3, [r4, #4]
    37cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    37d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37d2:	69e3      	ldr	r3, [r4, #28]
    37d4:	f013 0f04 	tst.w	r3, #4
    37d8:	d1fb      	bne.n	37d2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    37da:	882b      	ldrh	r3, [r5, #0]
    37dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    37e0:	d02a      	beq.n	3838 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    37e2:	886a      	ldrh	r2, [r5, #2]
    37e4:	f012 0f01 	tst.w	r2, #1
    37e8:	d004      	beq.n	37f4 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    37ea:	886a      	ldrh	r2, [r5, #2]
    37ec:	b292      	uxth	r2, r2
    37ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    37f2:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    37f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
    37f8:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    37fc:	69e3      	ldr	r3, [r4, #28]
    37fe:	f013 0f04 	tst.w	r3, #4
    3802:	d1fb      	bne.n	37fc <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3804:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    380e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3810:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3812:	69e3      	ldr	r3, [r4, #28]
    3814:	f013 0f04 	tst.w	r3, #4
    3818:	d1fb      	bne.n	3812 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    381a:	2000      	movs	r0, #0
    381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    3820:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3824:	d0d1      	beq.n	37ca <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3826:	6863      	ldr	r3, [r4, #4]
    3828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    382c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    382e:	69e3      	ldr	r3, [r4, #28]
    3830:	f013 0f04 	tst.w	r3, #4
    3834:	d1fb      	bne.n	382e <_i2c_m_async_transfer+0xea>
    3836:	e7d0      	b.n	37da <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3838:	8869      	ldrh	r1, [r5, #2]
    383a:	005a      	lsls	r2, r3, #1
    383c:	b2d2      	uxtb	r2, r2
    383e:	f001 0301 	and.w	r3, r1, #1
    3842:	431a      	orrs	r2, r3
    3844:	69e3      	ldr	r3, [r4, #28]
    3846:	f013 0f04 	tst.w	r3, #4
    384a:	d1fb      	bne.n	3844 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    384c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3852:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3854:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3856:	69e3      	ldr	r3, [r4, #28]
    3858:	f013 0f04 	tst.w	r3, #4
    385c:	d1fb      	bne.n	3856 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    385e:	2000      	movs	r0, #0
    3860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3864:	f06f 0003 	mvn.w	r0, #3
}
    3868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    386c:	000096b0 	.word	0x000096b0
    3870:	000021c5 	.word	0x000021c5

00003874 <_i2c_m_async_register_callback>:
	switch (type) {
    3874:	2901      	cmp	r1, #1
    3876:	d006      	beq.n	3886 <_i2c_m_async_register_callback+0x12>
    3878:	b119      	cbz	r1, 3882 <_i2c_m_async_register_callback+0xe>
    387a:	2902      	cmp	r1, #2
    387c:	d005      	beq.n	388a <_i2c_m_async_register_callback+0x16>
}
    387e:	2000      	movs	r0, #0
    3880:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    3882:	6142      	str	r2, [r0, #20]
		break;
    3884:	e7fb      	b.n	387e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    3886:	6182      	str	r2, [r0, #24]
		break;
    3888:	e7f9      	b.n	387e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    388a:	61c2      	str	r2, [r0, #28]
		break;
    388c:	e7f7      	b.n	387e <_i2c_m_async_register_callback+0xa>
	...

00003890 <SERCOM0_0_Handler>:
{
    3890:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3892:	4b02      	ldr	r3, [pc, #8]	; (389c <SERCOM0_0_Handler+0xc>)
    3894:	6818      	ldr	r0, [r3, #0]
    3896:	4b02      	ldr	r3, [pc, #8]	; (38a0 <SERCOM0_0_Handler+0x10>)
    3898:	4798      	blx	r3
    389a:	bd08      	pop	{r3, pc}
    389c:	2000089c 	.word	0x2000089c
    38a0:	00002fcd 	.word	0x00002fcd

000038a4 <SERCOM0_1_Handler>:
{
    38a4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38a6:	4b02      	ldr	r3, [pc, #8]	; (38b0 <SERCOM0_1_Handler+0xc>)
    38a8:	6818      	ldr	r0, [r3, #0]
    38aa:	4b02      	ldr	r3, [pc, #8]	; (38b4 <SERCOM0_1_Handler+0x10>)
    38ac:	4798      	blx	r3
    38ae:	bd08      	pop	{r3, pc}
    38b0:	2000089c 	.word	0x2000089c
    38b4:	00002fcd 	.word	0x00002fcd

000038b8 <SERCOM0_2_Handler>:
{
    38b8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38ba:	4b02      	ldr	r3, [pc, #8]	; (38c4 <SERCOM0_2_Handler+0xc>)
    38bc:	6818      	ldr	r0, [r3, #0]
    38be:	4b02      	ldr	r3, [pc, #8]	; (38c8 <SERCOM0_2_Handler+0x10>)
    38c0:	4798      	blx	r3
    38c2:	bd08      	pop	{r3, pc}
    38c4:	2000089c 	.word	0x2000089c
    38c8:	00002fcd 	.word	0x00002fcd

000038cc <SERCOM0_3_Handler>:
{
    38cc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38ce:	4b02      	ldr	r3, [pc, #8]	; (38d8 <SERCOM0_3_Handler+0xc>)
    38d0:	6818      	ldr	r0, [r3, #0]
    38d2:	4b02      	ldr	r3, [pc, #8]	; (38dc <SERCOM0_3_Handler+0x10>)
    38d4:	4798      	blx	r3
    38d6:	bd08      	pop	{r3, pc}
    38d8:	2000089c 	.word	0x2000089c
    38dc:	00002fcd 	.word	0x00002fcd

000038e0 <SERCOM1_0_Handler>:
{
    38e0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    38e2:	4b02      	ldr	r3, [pc, #8]	; (38ec <SERCOM1_0_Handler+0xc>)
    38e4:	6858      	ldr	r0, [r3, #4]
    38e6:	4b02      	ldr	r3, [pc, #8]	; (38f0 <SERCOM1_0_Handler+0x10>)
    38e8:	4798      	blx	r3
    38ea:	bd08      	pop	{r3, pc}
    38ec:	2000089c 	.word	0x2000089c
    38f0:	00002fcd 	.word	0x00002fcd

000038f4 <SERCOM1_1_Handler>:
{
    38f4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    38f6:	4b02      	ldr	r3, [pc, #8]	; (3900 <SERCOM1_1_Handler+0xc>)
    38f8:	6858      	ldr	r0, [r3, #4]
    38fa:	4b02      	ldr	r3, [pc, #8]	; (3904 <SERCOM1_1_Handler+0x10>)
    38fc:	4798      	blx	r3
    38fe:	bd08      	pop	{r3, pc}
    3900:	2000089c 	.word	0x2000089c
    3904:	00002fcd 	.word	0x00002fcd

00003908 <SERCOM1_2_Handler>:
{
    3908:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    390a:	4b02      	ldr	r3, [pc, #8]	; (3914 <SERCOM1_2_Handler+0xc>)
    390c:	6858      	ldr	r0, [r3, #4]
    390e:	4b02      	ldr	r3, [pc, #8]	; (3918 <SERCOM1_2_Handler+0x10>)
    3910:	4798      	blx	r3
    3912:	bd08      	pop	{r3, pc}
    3914:	2000089c 	.word	0x2000089c
    3918:	00002fcd 	.word	0x00002fcd

0000391c <SERCOM1_3_Handler>:
{
    391c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    391e:	4b02      	ldr	r3, [pc, #8]	; (3928 <SERCOM1_3_Handler+0xc>)
    3920:	6858      	ldr	r0, [r3, #4]
    3922:	4b02      	ldr	r3, [pc, #8]	; (392c <SERCOM1_3_Handler+0x10>)
    3924:	4798      	blx	r3
    3926:	bd08      	pop	{r3, pc}
    3928:	2000089c 	.word	0x2000089c
    392c:	00002fcd 	.word	0x00002fcd

00003930 <SERCOM2_0_Handler>:
{
    3930:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3932:	4b02      	ldr	r3, [pc, #8]	; (393c <SERCOM2_0_Handler+0xc>)
    3934:	6898      	ldr	r0, [r3, #8]
    3936:	4b02      	ldr	r3, [pc, #8]	; (3940 <SERCOM2_0_Handler+0x10>)
    3938:	4798      	blx	r3
    393a:	bd08      	pop	{r3, pc}
    393c:	2000089c 	.word	0x2000089c
    3940:	00002fcd 	.word	0x00002fcd

00003944 <SERCOM2_1_Handler>:
{
    3944:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3946:	4b02      	ldr	r3, [pc, #8]	; (3950 <SERCOM2_1_Handler+0xc>)
    3948:	6898      	ldr	r0, [r3, #8]
    394a:	4b02      	ldr	r3, [pc, #8]	; (3954 <SERCOM2_1_Handler+0x10>)
    394c:	4798      	blx	r3
    394e:	bd08      	pop	{r3, pc}
    3950:	2000089c 	.word	0x2000089c
    3954:	00002fcd 	.word	0x00002fcd

00003958 <SERCOM2_2_Handler>:
{
    3958:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    395a:	4b02      	ldr	r3, [pc, #8]	; (3964 <SERCOM2_2_Handler+0xc>)
    395c:	6898      	ldr	r0, [r3, #8]
    395e:	4b02      	ldr	r3, [pc, #8]	; (3968 <SERCOM2_2_Handler+0x10>)
    3960:	4798      	blx	r3
    3962:	bd08      	pop	{r3, pc}
    3964:	2000089c 	.word	0x2000089c
    3968:	00002fcd 	.word	0x00002fcd

0000396c <SERCOM2_3_Handler>:
{
    396c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    396e:	4b02      	ldr	r3, [pc, #8]	; (3978 <SERCOM2_3_Handler+0xc>)
    3970:	6898      	ldr	r0, [r3, #8]
    3972:	4b02      	ldr	r3, [pc, #8]	; (397c <SERCOM2_3_Handler+0x10>)
    3974:	4798      	blx	r3
    3976:	bd08      	pop	{r3, pc}
    3978:	2000089c 	.word	0x2000089c
    397c:	00002fcd 	.word	0x00002fcd

00003980 <SERCOM4_0_Handler>:
{
    3980:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3982:	4b02      	ldr	r3, [pc, #8]	; (398c <SERCOM4_0_Handler+0xc>)
    3984:	68d8      	ldr	r0, [r3, #12]
    3986:	4b02      	ldr	r3, [pc, #8]	; (3990 <SERCOM4_0_Handler+0x10>)
    3988:	4798      	blx	r3
    398a:	bd08      	pop	{r3, pc}
    398c:	2000089c 	.word	0x2000089c
    3990:	00002fcd 	.word	0x00002fcd

00003994 <SERCOM4_1_Handler>:
{
    3994:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3996:	4b02      	ldr	r3, [pc, #8]	; (39a0 <SERCOM4_1_Handler+0xc>)
    3998:	68d8      	ldr	r0, [r3, #12]
    399a:	4b02      	ldr	r3, [pc, #8]	; (39a4 <SERCOM4_1_Handler+0x10>)
    399c:	4798      	blx	r3
    399e:	bd08      	pop	{r3, pc}
    39a0:	2000089c 	.word	0x2000089c
    39a4:	00002fcd 	.word	0x00002fcd

000039a8 <SERCOM4_2_Handler>:
{
    39a8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39aa:	4b02      	ldr	r3, [pc, #8]	; (39b4 <SERCOM4_2_Handler+0xc>)
    39ac:	68d8      	ldr	r0, [r3, #12]
    39ae:	4b02      	ldr	r3, [pc, #8]	; (39b8 <SERCOM4_2_Handler+0x10>)
    39b0:	4798      	blx	r3
    39b2:	bd08      	pop	{r3, pc}
    39b4:	2000089c 	.word	0x2000089c
    39b8:	00002fcd 	.word	0x00002fcd

000039bc <SERCOM4_3_Handler>:
{
    39bc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39be:	4b02      	ldr	r3, [pc, #8]	; (39c8 <SERCOM4_3_Handler+0xc>)
    39c0:	68d8      	ldr	r0, [r3, #12]
    39c2:	4b02      	ldr	r3, [pc, #8]	; (39cc <SERCOM4_3_Handler+0x10>)
    39c4:	4798      	blx	r3
    39c6:	bd08      	pop	{r3, pc}
    39c8:	2000089c 	.word	0x2000089c
    39cc:	00002fcd 	.word	0x00002fcd

000039d0 <SERCOM5_0_Handler>:
{
    39d0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <SERCOM5_0_Handler+0xc>)
    39d4:	6918      	ldr	r0, [r3, #16]
    39d6:	4b02      	ldr	r3, [pc, #8]	; (39e0 <SERCOM5_0_Handler+0x10>)
    39d8:	4798      	blx	r3
    39da:	bd08      	pop	{r3, pc}
    39dc:	2000089c 	.word	0x2000089c
    39e0:	00003369 	.word	0x00003369

000039e4 <SERCOM5_1_Handler>:
{
    39e4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    39e6:	4b02      	ldr	r3, [pc, #8]	; (39f0 <SERCOM5_1_Handler+0xc>)
    39e8:	6918      	ldr	r0, [r3, #16]
    39ea:	4b02      	ldr	r3, [pc, #8]	; (39f4 <SERCOM5_1_Handler+0x10>)
    39ec:	4798      	blx	r3
    39ee:	bd08      	pop	{r3, pc}
    39f0:	2000089c 	.word	0x2000089c
    39f4:	00003369 	.word	0x00003369

000039f8 <SERCOM5_2_Handler>:
{
    39f8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    39fa:	4b02      	ldr	r3, [pc, #8]	; (3a04 <SERCOM5_2_Handler+0xc>)
    39fc:	6918      	ldr	r0, [r3, #16]
    39fe:	4b02      	ldr	r3, [pc, #8]	; (3a08 <SERCOM5_2_Handler+0x10>)
    3a00:	4798      	blx	r3
    3a02:	bd08      	pop	{r3, pc}
    3a04:	2000089c 	.word	0x2000089c
    3a08:	00003369 	.word	0x00003369

00003a0c <SERCOM5_3_Handler>:
{
    3a0c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a0e:	4b02      	ldr	r3, [pc, #8]	; (3a18 <SERCOM5_3_Handler+0xc>)
    3a10:	6918      	ldr	r0, [r3, #16]
    3a12:	4b02      	ldr	r3, [pc, #8]	; (3a1c <SERCOM5_3_Handler+0x10>)
    3a14:	4798      	blx	r3
    3a16:	bd08      	pop	{r3, pc}
    3a18:	2000089c 	.word	0x2000089c
    3a1c:	00003369 	.word	0x00003369

00003a20 <SERCOM6_0_Handler>:
{
    3a20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a22:	4b02      	ldr	r3, [pc, #8]	; (3a2c <SERCOM6_0_Handler+0xc>)
    3a24:	6958      	ldr	r0, [r3, #20]
    3a26:	4b02      	ldr	r3, [pc, #8]	; (3a30 <SERCOM6_0_Handler+0x10>)
    3a28:	4798      	blx	r3
    3a2a:	bd08      	pop	{r3, pc}
    3a2c:	2000089c 	.word	0x2000089c
    3a30:	00002fcd 	.word	0x00002fcd

00003a34 <SERCOM6_1_Handler>:
{
    3a34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <SERCOM6_1_Handler+0xc>)
    3a38:	6958      	ldr	r0, [r3, #20]
    3a3a:	4b02      	ldr	r3, [pc, #8]	; (3a44 <SERCOM6_1_Handler+0x10>)
    3a3c:	4798      	blx	r3
    3a3e:	bd08      	pop	{r3, pc}
    3a40:	2000089c 	.word	0x2000089c
    3a44:	00002fcd 	.word	0x00002fcd

00003a48 <SERCOM6_2_Handler>:
{
    3a48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a4a:	4b02      	ldr	r3, [pc, #8]	; (3a54 <SERCOM6_2_Handler+0xc>)
    3a4c:	6958      	ldr	r0, [r3, #20]
    3a4e:	4b02      	ldr	r3, [pc, #8]	; (3a58 <SERCOM6_2_Handler+0x10>)
    3a50:	4798      	blx	r3
    3a52:	bd08      	pop	{r3, pc}
    3a54:	2000089c 	.word	0x2000089c
    3a58:	00002fcd 	.word	0x00002fcd

00003a5c <SERCOM6_3_Handler>:
{
    3a5c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a5e:	4b02      	ldr	r3, [pc, #8]	; (3a68 <SERCOM6_3_Handler+0xc>)
    3a60:	6958      	ldr	r0, [r3, #20]
    3a62:	4b02      	ldr	r3, [pc, #8]	; (3a6c <SERCOM6_3_Handler+0x10>)
    3a64:	4798      	blx	r3
    3a66:	bd08      	pop	{r3, pc}
    3a68:	2000089c 	.word	0x2000089c
    3a6c:	00002fcd 	.word	0x00002fcd

00003a70 <_spi_m_sync_init>:
{
    3a70:	b570      	push	{r4, r5, r6, lr}
    3a72:	4606      	mov	r6, r0
    3a74:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a76:	4608      	mov	r0, r1
    3a78:	4b5d      	ldr	r3, [pc, #372]	; (3bf0 <_spi_m_sync_init+0x180>)
    3a7a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3a7c:	2803      	cmp	r0, #3
    3a7e:	d00c      	beq.n	3a9a <_spi_m_sync_init+0x2a>
    3a80:	2807      	cmp	r0, #7
    3a82:	bf08      	it	eq
    3a84:	2301      	moveq	r3, #1
    3a86:	d009      	beq.n	3a9c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    3a88:	2e00      	cmp	r6, #0
    3a8a:	f000 809f 	beq.w	3bcc <_spi_m_sync_init+0x15c>
    3a8e:	2c00      	cmp	r4, #0
    3a90:	f040 80a5 	bne.w	3bde <_spi_m_sync_init+0x16e>
	return NULL;
    3a94:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3a96:	2000      	movs	r0, #0
    3a98:	e009      	b.n	3aae <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3a9a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3a9c:	4d55      	ldr	r5, [pc, #340]	; (3bf4 <_spi_m_sync_init+0x184>)
    3a9e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3aa2:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3aa4:	2e00      	cmp	r6, #0
    3aa6:	d0f6      	beq.n	3a96 <_spi_m_sync_init+0x26>
    3aa8:	2001      	movs	r0, #1
    3aaa:	2c00      	cmp	r4, #0
    3aac:	d0f3      	beq.n	3a96 <_spi_m_sync_init+0x26>
    3aae:	f640 2254 	movw	r2, #2644	; 0xa54
    3ab2:	4951      	ldr	r1, [pc, #324]	; (3bf8 <_spi_m_sync_init+0x188>)
    3ab4:	4b51      	ldr	r3, [pc, #324]	; (3bfc <_spi_m_sync_init+0x18c>)
    3ab6:	4798      	blx	r3
	if (regs == NULL) {
    3ab8:	2d00      	cmp	r5, #0
    3aba:	f000 8084 	beq.w	3bc6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3abe:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3ac0:	f013 0f01 	tst.w	r3, #1
    3ac4:	d11d      	bne.n	3b02 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3ac6:	682b      	ldr	r3, [r5, #0]
    3ac8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3acc:	69e3      	ldr	r3, [r4, #28]
    3ace:	f013 0f03 	tst.w	r3, #3
    3ad2:	d1fb      	bne.n	3acc <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3ad4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3ad6:	f013 0f02 	tst.w	r3, #2
    3ada:	d00b      	beq.n	3af4 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3adc:	6823      	ldr	r3, [r4, #0]
    3ade:	f023 0302 	bic.w	r3, r3, #2
    3ae2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ae4:	69e3      	ldr	r3, [r4, #28]
    3ae6:	f013 0f03 	tst.w	r3, #3
    3aea:	d1fb      	bne.n	3ae4 <_spi_m_sync_init+0x74>
    3aec:	69e3      	ldr	r3, [r4, #28]
    3aee:	f013 0f02 	tst.w	r3, #2
    3af2:	d1fb      	bne.n	3aec <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3af4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3af8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3afa:	69e3      	ldr	r3, [r4, #28]
    3afc:	f013 0f03 	tst.w	r3, #3
    3b00:	d1fb      	bne.n	3afa <_spi_m_sync_init+0x8a>
    3b02:	69e3      	ldr	r3, [r4, #28]
    3b04:	f013 0f01 	tst.w	r3, #1
    3b08:	d1fb      	bne.n	3b02 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    3b0a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b0c:	682b      	ldr	r3, [r5, #0]
    3b0e:	f003 031c 	and.w	r3, r3, #28
    3b12:	2b08      	cmp	r3, #8
    3b14:	d02e      	beq.n	3b74 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    3b16:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3b1a:	4937      	ldr	r1, [pc, #220]	; (3bf8 <_spi_m_sync_init+0x188>)
    3b1c:	1c20      	adds	r0, r4, #0
    3b1e:	bf18      	it	ne
    3b20:	2001      	movne	r0, #1
    3b22:	4b36      	ldr	r3, [pc, #216]	; (3bfc <_spi_m_sync_init+0x18c>)
    3b24:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b26:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3b28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3b2c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b30:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b32:	69e3      	ldr	r3, [r4, #28]
    3b34:	f013 0f03 	tst.w	r3, #3
    3b38:	d1fb      	bne.n	3b32 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    3b3a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3b3c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3b40:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b48:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b4a:	69e3      	ldr	r3, [r4, #28]
    3b4c:	f013 0f17 	tst.w	r3, #23
    3b50:	d1fb      	bne.n	3b4a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3b52:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3b54:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3b56:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3b58:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b5c:	686b      	ldr	r3, [r5, #4]
    3b5e:	f003 0307 	and.w	r3, r3, #7
    3b62:	2b00      	cmp	r3, #0
    3b64:	bf0c      	ite	eq
    3b66:	2301      	moveq	r3, #1
    3b68:	2302      	movne	r3, #2
    3b6a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    3b6c:	89eb      	ldrh	r3, [r5, #14]
    3b6e:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    3b70:	2000      	movs	r0, #0
    3b72:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    3b74:	f640 1284 	movw	r2, #2436	; 0x984
    3b78:	491f      	ldr	r1, [pc, #124]	; (3bf8 <_spi_m_sync_init+0x188>)
    3b7a:	1c20      	adds	r0, r4, #0
    3b7c:	bf18      	it	ne
    3b7e:	2001      	movne	r0, #1
    3b80:	4b1e      	ldr	r3, [pc, #120]	; (3bfc <_spi_m_sync_init+0x18c>)
    3b82:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b84:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3b86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3b8a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b8e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b90:	69e3      	ldr	r3, [r4, #28]
    3b92:	f013 0f03 	tst.w	r3, #3
    3b96:	d1fb      	bne.n	3b90 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3b98:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3b9a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3b9e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3ba6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3baa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3bac:	69e3      	ldr	r3, [r4, #28]
    3bae:	f013 0f17 	tst.w	r3, #23
    3bb2:	d1fb      	bne.n	3bac <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3bb4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3bb6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3bb8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3bba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3bbe:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d1fc      	bne.n	3bbe <_spi_m_sync_init+0x14e>
    3bc4:	e7ca      	b.n	3b5c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    3bc6:	f06f 000c 	mvn.w	r0, #12
    3bca:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3bcc:	f640 2254 	movw	r2, #2644	; 0xa54
    3bd0:	4909      	ldr	r1, [pc, #36]	; (3bf8 <_spi_m_sync_init+0x188>)
    3bd2:	2000      	movs	r0, #0
    3bd4:	4b09      	ldr	r3, [pc, #36]	; (3bfc <_spi_m_sync_init+0x18c>)
    3bd6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3bd8:	f06f 000c 	mvn.w	r0, #12
    3bdc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3bde:	f640 2254 	movw	r2, #2644	; 0xa54
    3be2:	4905      	ldr	r1, [pc, #20]	; (3bf8 <_spi_m_sync_init+0x188>)
    3be4:	2001      	movs	r0, #1
    3be6:	4b05      	ldr	r3, [pc, #20]	; (3bfc <_spi_m_sync_init+0x18c>)
    3be8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3bea:	f06f 000c 	mvn.w	r0, #12
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	00002f89 	.word	0x00002f89
    3bf4:	0000968c 	.word	0x0000968c
    3bf8:	000096b0 	.word	0x000096b0
    3bfc:	000021c5 	.word	0x000021c5

00003c00 <_spi_m_sync_trans>:
{
    3c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c04:	4681      	mov	r9, r0
    3c06:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3c08:	6804      	ldr	r4, [r0, #0]
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3c0a:	f8d1 8000 	ldr.w	r8, [r1]
    3c0e:	684d      	ldr	r5, [r1, #4]
    3c10:	7907      	ldrb	r7, [r0, #4]
	ASSERT(dev && hw);
    3c12:	b1a8      	cbz	r0, 3c40 <_spi_m_sync_trans+0x40>
    3c14:	1c20      	adds	r0, r4, #0
    3c16:	bf18      	it	ne
    3c18:	2001      	movne	r0, #1
    3c1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    3c1e:	492e      	ldr	r1, [pc, #184]	; (3cd8 <_spi_m_sync_trans+0xd8>)
    3c20:	4b2e      	ldr	r3, [pc, #184]	; (3cdc <_spi_m_sync_trans+0xdc>)
    3c22:	4798      	blx	r3
    3c24:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(
    3c26:	f013 0f07 	tst.w	r3, #7
    3c2a:	d134      	bne.n	3c96 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c2c:	69e0      	ldr	r0, [r4, #28]
    3c2e:	f010 0003 	ands.w	r0, r0, #3
    3c32:	d1fb      	bne.n	3c2c <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3c34:	6823      	ldr	r3, [r4, #0]
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3c36:	f013 0f02 	tst.w	r3, #2
    3c3a:	d030      	beq.n	3c9e <_spi_m_sync_trans+0x9e>
    3c3c:	4602      	mov	r2, r0
    3c3e:	e008      	b.n	3c52 <_spi_m_sync_trans+0x52>
    3c40:	2000      	movs	r0, #0
    3c42:	e7ea      	b.n	3c1a <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    3c44:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3c46:	f013 0f80 	tst.w	r3, #128	; 0x80
    3c4a:	d112      	bne.n	3c72 <_spi_m_sync_trans+0x72>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3c4c:	68b3      	ldr	r3, [r6, #8]
    3c4e:	4283      	cmp	r3, r0
    3c50:	d91e      	bls.n	3c90 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c52:	7e23      	ldrb	r3, [r4, #24]
    3c54:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c56:	f013 0f04 	tst.w	r3, #4
    3c5a:	d024      	beq.n	3ca6 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3c5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3c5e:	2d00      	cmp	r5, #0
    3c60:	d0f0      	beq.n	3c44 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c62:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    3c64:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    3c66:	bf91      	iteee	ls
    3c68:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c6a:	0a09      	lsrhi	r1, r1, #8
    3c6c:	7069      	strbhi	r1, [r5, #1]
    3c6e:	3502      	addhi	r5, #2
    3c70:	e7e8      	b.n	3c44 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3c76:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3c78:	2380      	movs	r3, #128	; 0x80
    3c7a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3c7c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c80:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3c82:	f013 0f03 	tst.w	r3, #3
    3c86:	d0fb      	beq.n	3c80 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3c88:	2303      	movs	r3, #3
    3c8a:	7623      	strb	r3, [r4, #24]
	return rc;
    3c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3c90:	4293      	cmp	r3, r2
    3c92:	d8de      	bhi.n	3c52 <_spi_m_sync_trans+0x52>
    3c94:	e7f4      	b.n	3c80 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3c96:	f06f 0003 	mvn.w	r0, #3
    3c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    3c9e:	f06f 0013 	mvn.w	r0, #19
    3ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3ca6:	4290      	cmp	r0, r2
    3ca8:	d8cd      	bhi.n	3c46 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3caa:	f013 0f01 	tst.w	r3, #1
    3cae:	d0ca      	beq.n	3c46 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3cb0:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3cb4:	f1b8 0f00 	cmp.w	r8, #0
    3cb8:	d00b      	beq.n	3cd2 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    3cba:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    3cbe:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3cc0:	bf91      	iteee	ls
    3cc2:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3cc6:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    3cca:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    3cce:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3cd2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3cd4:	62a1      	str	r1, [r4, #40]	; 0x28
    3cd6:	e7b6      	b.n	3c46 <_spi_m_sync_trans+0x46>
    3cd8:	000096b0 	.word	0x000096b0
    3cdc:	000021c5 	.word	0x000021c5

00003ce0 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ce4:	4605      	mov	r5, r0
    3ce6:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3ce8:	4608      	mov	r0, r1
    3cea:	4b52      	ldr	r3, [pc, #328]	; (3e34 <_spi_m_dma_init+0x154>)
    3cec:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3cee:	2803      	cmp	r0, #3
    3cf0:	d00c      	beq.n	3d0c <_spi_m_dma_init+0x2c>
    3cf2:	2807      	cmp	r0, #7
    3cf4:	bf08      	it	eq
    3cf6:	2301      	moveq	r3, #1
    3cf8:	d009      	beq.n	3d0e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3cfa:	2d00      	cmp	r5, #0
    3cfc:	f000 8086 	beq.w	3e0c <_spi_m_dma_init+0x12c>
    3d00:	2c00      	cmp	r4, #0
    3d02:	f040 808d 	bne.w	3e20 <_spi_m_dma_init+0x140>
	return NULL;
    3d06:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    3d08:	2000      	movs	r0, #0
    3d0a:	e009      	b.n	3d20 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    3d0c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3d0e:	4e4a      	ldr	r6, [pc, #296]	; (3e38 <_spi_m_dma_init+0x158>)
    3d10:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    3d14:	441e      	add	r6, r3
	ASSERT(dev && hw);
    3d16:	2d00      	cmp	r5, #0
    3d18:	d0f6      	beq.n	3d08 <_spi_m_dma_init+0x28>
    3d1a:	2001      	movs	r0, #1
    3d1c:	2c00      	cmp	r4, #0
    3d1e:	d0f3      	beq.n	3d08 <_spi_m_dma_init+0x28>
    3d20:	f640 5286 	movw	r2, #3462	; 0xd86
    3d24:	4945      	ldr	r1, [pc, #276]	; (3e3c <_spi_m_dma_init+0x15c>)
    3d26:	4b46      	ldr	r3, [pc, #280]	; (3e40 <_spi_m_dma_init+0x160>)
    3d28:	4798      	blx	r3

	if (regs == NULL) {
    3d2a:	2e00      	cmp	r6, #0
    3d2c:	d06a      	beq.n	3e04 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d2e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3d30:	f013 0f01 	tst.w	r3, #1
    3d34:	d11d      	bne.n	3d72 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3d36:	6833      	ldr	r3, [r6, #0]
    3d38:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d3c:	69e3      	ldr	r3, [r4, #28]
    3d3e:	f013 0f03 	tst.w	r3, #3
    3d42:	d1fb      	bne.n	3d3c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3d44:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3d46:	f013 0f02 	tst.w	r3, #2
    3d4a:	d00b      	beq.n	3d64 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3d4c:	6823      	ldr	r3, [r4, #0]
    3d4e:	f023 0302 	bic.w	r3, r3, #2
    3d52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d54:	69e3      	ldr	r3, [r4, #28]
    3d56:	f013 0f03 	tst.w	r3, #3
    3d5a:	d1fb      	bne.n	3d54 <_spi_m_dma_init+0x74>
    3d5c:	69e3      	ldr	r3, [r4, #28]
    3d5e:	f013 0f02 	tst.w	r3, #2
    3d62:	d1fb      	bne.n	3d5c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3d64:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3d68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d6a:	69e3      	ldr	r3, [r4, #28]
    3d6c:	f013 0f03 	tst.w	r3, #3
    3d70:	d1fb      	bne.n	3d6a <_spi_m_dma_init+0x8a>
    3d72:	69e3      	ldr	r3, [r4, #28]
    3d74:	f013 0f01 	tst.w	r3, #1
    3d78:	d1fb      	bne.n	3d72 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3d7a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3d7c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3d80:	492e      	ldr	r1, [pc, #184]	; (3e3c <_spi_m_dma_init+0x15c>)
    3d82:	1c20      	adds	r0, r4, #0
    3d84:	bf18      	it	ne
    3d86:	2001      	movne	r0, #1
    3d88:	4b2d      	ldr	r3, [pc, #180]	; (3e40 <_spi_m_dma_init+0x160>)
    3d8a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3d8c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    3d8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3d92:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3d96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d98:	69e3      	ldr	r3, [r4, #28]
    3d9a:	f013 0f03 	tst.w	r3, #3
    3d9e:	d1fb      	bne.n	3d98 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    3da0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3da2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3da6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3dae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3db0:	69e3      	ldr	r3, [r4, #28]
    3db2:	f013 0f17 	tst.w	r3, #23
    3db6:	d1fb      	bne.n	3db0 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3db8:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3dba:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3dbc:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3dbe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    3dc2:	f105 0818 	add.w	r8, r5, #24
    3dc6:	4620      	mov	r0, r4
    3dc8:	4b1e      	ldr	r3, [pc, #120]	; (3e44 <_spi_m_dma_init+0x164>)
    3dca:	4798      	blx	r3
    3dcc:	4601      	mov	r1, r0
    3dce:	4640      	mov	r0, r8
    3dd0:	4f1d      	ldr	r7, [pc, #116]	; (3e48 <_spi_m_dma_init+0x168>)
    3dd2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3dd4:	69ab      	ldr	r3, [r5, #24]
    3dd6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    3dd8:	69ab      	ldr	r3, [r5, #24]
    3dda:	4a1c      	ldr	r2, [pc, #112]	; (3e4c <_spi_m_dma_init+0x16c>)
    3ddc:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3dde:	69ab      	ldr	r3, [r5, #24]
    3de0:	4e1b      	ldr	r6, [pc, #108]	; (3e50 <_spi_m_dma_init+0x170>)
    3de2:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    3de4:	4620      	mov	r0, r4
    3de6:	4b1b      	ldr	r3, [pc, #108]	; (3e54 <_spi_m_dma_init+0x174>)
    3de8:	4798      	blx	r3
    3dea:	4601      	mov	r1, r0
    3dec:	4640      	mov	r0, r8
    3dee:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3df0:	69ab      	ldr	r3, [r5, #24]
    3df2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    3df4:	69ab      	ldr	r3, [r5, #24]
    3df6:	4a18      	ldr	r2, [pc, #96]	; (3e58 <_spi_m_dma_init+0x178>)
    3df8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3dfa:	69ab      	ldr	r3, [r5, #24]
    3dfc:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    3dfe:	2000      	movs	r0, #0
    3e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    3e04:	f06f 000c 	mvn.w	r0, #12
    3e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e0c:	f640 5286 	movw	r2, #3462	; 0xd86
    3e10:	490a      	ldr	r1, [pc, #40]	; (3e3c <_spi_m_dma_init+0x15c>)
    3e12:	2000      	movs	r0, #0
    3e14:	4b0a      	ldr	r3, [pc, #40]	; (3e40 <_spi_m_dma_init+0x160>)
    3e16:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e18:	f06f 000c 	mvn.w	r0, #12
    3e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e20:	f640 5286 	movw	r2, #3462	; 0xd86
    3e24:	4905      	ldr	r1, [pc, #20]	; (3e3c <_spi_m_dma_init+0x15c>)
    3e26:	2001      	movs	r0, #1
    3e28:	4b05      	ldr	r3, [pc, #20]	; (3e40 <_spi_m_dma_init+0x160>)
    3e2a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e2c:	f06f 000c 	mvn.w	r0, #12
    3e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e34:	00002f89 	.word	0x00002f89
    3e38:	0000968c 	.word	0x0000968c
    3e3c:	000096b0 	.word	0x000096b0
    3e40:	000021c5 	.word	0x000021c5
    3e44:	000030e9 	.word	0x000030e9
    3e48:	00002a49 	.word	0x00002a49
    3e4c:	000030fd 	.word	0x000030fd
    3e50:	00003115 	.word	0x00003115
    3e54:	000030d5 	.word	0x000030d5
    3e58:	00003109 	.word	0x00003109

00003e5c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    3e5c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3e5e:	4604      	mov	r4, r0
    3e60:	b160      	cbz	r0, 3e7c <_spi_m_dma_enable+0x20>
    3e62:	6800      	ldr	r0, [r0, #0]
    3e64:	3000      	adds	r0, #0
    3e66:	bf18      	it	ne
    3e68:	2001      	movne	r0, #1
    3e6a:	f640 52af 	movw	r2, #3503	; 0xdaf
    3e6e:	4904      	ldr	r1, [pc, #16]	; (3e80 <_spi_m_dma_enable+0x24>)
    3e70:	4b04      	ldr	r3, [pc, #16]	; (3e84 <_spi_m_dma_enable+0x28>)
    3e72:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3e74:	6820      	ldr	r0, [r4, #0]
    3e76:	4b04      	ldr	r3, [pc, #16]	; (3e88 <_spi_m_dma_enable+0x2c>)
    3e78:	4798      	blx	r3
}
    3e7a:	bd10      	pop	{r4, pc}
    3e7c:	2000      	movs	r0, #0
    3e7e:	e7f4      	b.n	3e6a <_spi_m_dma_enable+0xe>
    3e80:	000096b0 	.word	0x000096b0
    3e84:	000021c5 	.word	0x000021c5
    3e88:	000030b1 	.word	0x000030b1

00003e8c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	4605      	mov	r5, r0
    3e90:	4614      	mov	r4, r2
	switch (type) {
    3e92:	2901      	cmp	r1, #1
    3e94:	d00e      	beq.n	3eb4 <_spi_m_dma_register_callback+0x28>
    3e96:	b111      	cbz	r1, 3e9e <_spi_m_dma_register_callback+0x12>
    3e98:	2902      	cmp	r1, #2
    3e9a:	d016      	beq.n	3eca <_spi_m_dma_register_callback+0x3e>
    3e9c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    3e9e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3ea0:	6800      	ldr	r0, [r0, #0]
    3ea2:	4b13      	ldr	r3, [pc, #76]	; (3ef0 <_spi_m_dma_register_callback+0x64>)
    3ea4:	4798      	blx	r3
    3ea6:	1c22      	adds	r2, r4, #0
    3ea8:	bf18      	it	ne
    3eaa:	2201      	movne	r2, #1
    3eac:	2100      	movs	r1, #0
    3eae:	4b11      	ldr	r3, [pc, #68]	; (3ef4 <_spi_m_dma_register_callback+0x68>)
    3eb0:	4798      	blx	r3
		break;
    3eb2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    3eb4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3eb6:	6800      	ldr	r0, [r0, #0]
    3eb8:	4b0f      	ldr	r3, [pc, #60]	; (3ef8 <_spi_m_dma_register_callback+0x6c>)
    3eba:	4798      	blx	r3
    3ebc:	1c22      	adds	r2, r4, #0
    3ebe:	bf18      	it	ne
    3ec0:	2201      	movne	r2, #1
    3ec2:	2100      	movs	r1, #0
    3ec4:	4b0b      	ldr	r3, [pc, #44]	; (3ef4 <_spi_m_dma_register_callback+0x68>)
    3ec6:	4798      	blx	r3
		break;
    3ec8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    3eca:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3ecc:	6800      	ldr	r0, [r0, #0]
    3ece:	4b0a      	ldr	r3, [pc, #40]	; (3ef8 <_spi_m_dma_register_callback+0x6c>)
    3ed0:	4798      	blx	r3
    3ed2:	3400      	adds	r4, #0
    3ed4:	bf18      	it	ne
    3ed6:	2401      	movne	r4, #1
    3ed8:	4622      	mov	r2, r4
    3eda:	2101      	movs	r1, #1
    3edc:	4e05      	ldr	r6, [pc, #20]	; (3ef4 <_spi_m_dma_register_callback+0x68>)
    3ede:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3ee0:	6828      	ldr	r0, [r5, #0]
    3ee2:	4b03      	ldr	r3, [pc, #12]	; (3ef0 <_spi_m_dma_register_callback+0x64>)
    3ee4:	4798      	blx	r3
    3ee6:	4622      	mov	r2, r4
    3ee8:	2101      	movs	r1, #1
    3eea:	47b0      	blx	r6
    3eec:	bd70      	pop	{r4, r5, r6, pc}
    3eee:	bf00      	nop
    3ef0:	000030d5 	.word	0x000030d5
    3ef4:	00002921 	.word	0x00002921
    3ef8:	000030e9 	.word	0x000030e9

00003efc <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    3efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f00:	4605      	mov	r5, r0
    3f02:	4689      	mov	r9, r1
    3f04:	4617      	mov	r7, r2
    3f06:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    3f08:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3f0c:	4658      	mov	r0, fp
    3f0e:	4b46      	ldr	r3, [pc, #280]	; (4028 <_spi_m_dma_transfer+0x12c>)
    3f10:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3f12:	2803      	cmp	r0, #3
    3f14:	d053      	beq.n	3fbe <_spi_m_dma_transfer+0xc2>
    3f16:	2807      	cmp	r0, #7
    3f18:	bf08      	it	eq
    3f1a:	2201      	moveq	r2, #1
    3f1c:	d050      	beq.n	3fc0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    3f1e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    3f22:	4658      	mov	r0, fp
    3f24:	4b41      	ldr	r3, [pc, #260]	; (402c <_spi_m_dma_transfer+0x130>)
    3f26:	4798      	blx	r3
    3f28:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    3f2a:	4658      	mov	r0, fp
    3f2c:	4b40      	ldr	r3, [pc, #256]	; (4030 <_spi_m_dma_transfer+0x134>)
    3f2e:	4798      	blx	r3
    3f30:	4604      	mov	r4, r0

	if (rxbuf) {
    3f32:	2f00      	cmp	r7, #0
    3f34:	d04b      	beq.n	3fce <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    3f36:	2d00      	cmp	r5, #0
    3f38:	d047      	beq.n	3fca <_spi_m_dma_transfer+0xce>
    3f3a:	f11b 0000 	adds.w	r0, fp, #0
    3f3e:	bf18      	it	ne
    3f40:	2001      	movne	r0, #1
    3f42:	f640 42f9 	movw	r2, #3321	; 0xcf9
    3f46:	493b      	ldr	r1, [pc, #236]	; (4034 <_spi_m_dma_transfer+0x138>)
    3f48:	4b3b      	ldr	r3, [pc, #236]	; (4038 <_spi_m_dma_transfer+0x13c>)
    3f4a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    3f4c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f4e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3f50:	f013 0f04 	tst.w	r3, #4
    3f54:	d107      	bne.n	3f66 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    3f56:	6853      	ldr	r3, [r2, #4]
    3f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f5c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f5e:	69d3      	ldr	r3, [r2, #28]
    3f60:	f013 0f17 	tst.w	r3, #23
    3f64:	d1fb      	bne.n	3f5e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3f66:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    3f68:	3128      	adds	r1, #40	; 0x28
    3f6a:	4630      	mov	r0, r6
    3f6c:	4b33      	ldr	r3, [pc, #204]	; (403c <_spi_m_dma_transfer+0x140>)
    3f6e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3f70:	4639      	mov	r1, r7
    3f72:	4630      	mov	r0, r6
    3f74:	4b32      	ldr	r3, [pc, #200]	; (4040 <_spi_m_dma_transfer+0x144>)
    3f76:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    3f78:	4641      	mov	r1, r8
    3f7a:	4630      	mov	r0, r6
    3f7c:	4b31      	ldr	r3, [pc, #196]	; (4044 <_spi_m_dma_transfer+0x148>)
    3f7e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3f80:	2100      	movs	r1, #0
    3f82:	4630      	mov	r0, r6
    3f84:	4b30      	ldr	r3, [pc, #192]	; (4048 <_spi_m_dma_transfer+0x14c>)
    3f86:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    3f88:	f1b9 0f00 	cmp.w	r9, #0
    3f8c:	d039      	beq.n	4002 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    3f8e:	4649      	mov	r1, r9
    3f90:	4620      	mov	r0, r4
    3f92:	4b2a      	ldr	r3, [pc, #168]	; (403c <_spi_m_dma_transfer+0x140>)
    3f94:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3f96:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3f98:	3128      	adds	r1, #40	; 0x28
    3f9a:	4620      	mov	r0, r4
    3f9c:	4b28      	ldr	r3, [pc, #160]	; (4040 <_spi_m_dma_transfer+0x144>)
    3f9e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    3fa0:	2101      	movs	r1, #1
    3fa2:	4620      	mov	r0, r4
    3fa4:	4b29      	ldr	r3, [pc, #164]	; (404c <_spi_m_dma_transfer+0x150>)
    3fa6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3fa8:	4641      	mov	r1, r8
    3faa:	4620      	mov	r0, r4
    3fac:	4b25      	ldr	r3, [pc, #148]	; (4044 <_spi_m_dma_transfer+0x148>)
    3fae:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    3fb0:	2100      	movs	r1, #0
    3fb2:	4620      	mov	r0, r4
    3fb4:	4b24      	ldr	r3, [pc, #144]	; (4048 <_spi_m_dma_transfer+0x14c>)
    3fb6:	4798      	blx	r3

	return ERR_NONE;
}
    3fb8:	2000      	movs	r0, #0
    3fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    3fbe:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    3fc0:	4b23      	ldr	r3, [pc, #140]	; (4050 <_spi_m_dma_transfer+0x154>)
    3fc2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    3fc6:	4492      	add	sl, r2
    3fc8:	e7ab      	b.n	3f22 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    3fca:	2000      	movs	r0, #0
    3fcc:	e7b9      	b.n	3f42 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    3fce:	b1b5      	cbz	r5, 3ffe <_spi_m_dma_transfer+0x102>
    3fd0:	f11b 0000 	adds.w	r0, fp, #0
    3fd4:	bf18      	it	ne
    3fd6:	2001      	movne	r0, #1
    3fd8:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    3fdc:	4915      	ldr	r1, [pc, #84]	; (4034 <_spi_m_dma_transfer+0x138>)
    3fde:	4b16      	ldr	r3, [pc, #88]	; (4038 <_spi_m_dma_transfer+0x13c>)
    3fe0:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    3fe2:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3fe4:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3fe6:	f013 0f04 	tst.w	r3, #4
    3fea:	d1cd      	bne.n	3f88 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    3fec:	6853      	ldr	r3, [r2, #4]
    3fee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3ff2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ff4:	69d3      	ldr	r3, [r2, #28]
    3ff6:	f013 0f17 	tst.w	r3, #23
    3ffa:	d1fb      	bne.n	3ff4 <_spi_m_dma_transfer+0xf8>
    3ffc:	e7c4      	b.n	3f88 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    3ffe:	2000      	movs	r0, #0
    4000:	e7ea      	b.n	3fd8 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    4002:	f10a 010e 	add.w	r1, sl, #14
    4006:	4620      	mov	r0, r4
    4008:	4b0c      	ldr	r3, [pc, #48]	; (403c <_spi_m_dma_transfer+0x140>)
    400a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    400c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    400e:	3128      	adds	r1, #40	; 0x28
    4010:	4620      	mov	r0, r4
    4012:	4b0b      	ldr	r3, [pc, #44]	; (4040 <_spi_m_dma_transfer+0x144>)
    4014:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4016:	2100      	movs	r1, #0
    4018:	4620      	mov	r0, r4
    401a:	4b0c      	ldr	r3, [pc, #48]	; (404c <_spi_m_dma_transfer+0x150>)
    401c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    401e:	4641      	mov	r1, r8
    4020:	4620      	mov	r0, r4
    4022:	4b08      	ldr	r3, [pc, #32]	; (4044 <_spi_m_dma_transfer+0x148>)
    4024:	4798      	blx	r3
    4026:	e7c3      	b.n	3fb0 <_spi_m_dma_transfer+0xb4>
    4028:	00002f89 	.word	0x00002f89
    402c:	000030e9 	.word	0x000030e9
    4030:	000030d5 	.word	0x000030d5
    4034:	000096b0 	.word	0x000096b0
    4038:	000021c5 	.word	0x000021c5
    403c:	00002985 	.word	0x00002985
    4040:	00002975 	.word	0x00002975
    4044:	000029b1 	.word	0x000029b1
    4048:	00002a09 	.word	0x00002a09
    404c:	00002995 	.word	0x00002995
    4050:	0000968c 	.word	0x0000968c

00004054 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4054:	4b03      	ldr	r3, [pc, #12]	; (4064 <_delay_init+0x10>)
    4056:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    405a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    405c:	2205      	movs	r2, #5
    405e:	601a      	str	r2, [r3, #0]
    4060:	4770      	bx	lr
    4062:	bf00      	nop
    4064:	e000e010 	.word	0xe000e010

00004068 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4068:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    406a:	b303      	cbz	r3, 40ae <_delay_cycles+0x46>
{
    406c:	b430      	push	{r4, r5}
    406e:	1e5d      	subs	r5, r3, #1
    4070:	b2ed      	uxtb	r5, r5
	while (n--) {
    4072:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    4074:	4a12      	ldr	r2, [pc, #72]	; (40c0 <_delay_cycles+0x58>)
    4076:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    407a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    407c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    407e:	6813      	ldr	r3, [r2, #0]
    4080:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4084:	d0fb      	beq.n	407e <_delay_cycles+0x16>
	while (n--) {
    4086:	3801      	subs	r0, #1
    4088:	b2c0      	uxtb	r0, r0
    408a:	28ff      	cmp	r0, #255	; 0xff
    408c:	d1f5      	bne.n	407a <_delay_cycles+0x12>
    408e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    4092:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    4096:	3101      	adds	r1, #1
    4098:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    409a:	4b09      	ldr	r3, [pc, #36]	; (40c0 <_delay_cycles+0x58>)
    409c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    409e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40a0:	461a      	mov	r2, r3
    40a2:	6813      	ldr	r3, [r2, #0]
    40a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40a8:	d0fb      	beq.n	40a2 <_delay_cycles+0x3a>
		;
}
    40aa:	bc30      	pop	{r4, r5}
    40ac:	4770      	bx	lr
	SysTick->LOAD = buf;
    40ae:	4b04      	ldr	r3, [pc, #16]	; (40c0 <_delay_cycles+0x58>)
    40b0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40b2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40b4:	461a      	mov	r2, r3
    40b6:	6813      	ldr	r3, [r2, #0]
    40b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40bc:	d0fb      	beq.n	40b6 <_delay_cycles+0x4e>
    40be:	4770      	bx	lr
    40c0:	e000e010 	.word	0xe000e010

000040c4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    40c4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    40c6:	6813      	ldr	r3, [r2, #0]
    40c8:	f043 0302 	orr.w	r3, r3, #2
    40cc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40ce:	6913      	ldr	r3, [r2, #16]
    40d0:	f013 0f03 	tst.w	r3, #3
    40d4:	d1fb      	bne.n	40ce <_tc_timer_start+0xa>
}
    40d6:	4770      	bx	lr

000040d8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    40d8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    40da:	6813      	ldr	r3, [r2, #0]
    40dc:	f023 0302 	bic.w	r3, r3, #2
    40e0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40e2:	6913      	ldr	r3, [r2, #16]
    40e4:	f013 0f03 	tst.w	r3, #3
    40e8:	d1fb      	bne.n	40e2 <_tc_timer_stop+0xa>
}
    40ea:	4770      	bx	lr

000040ec <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    40ec:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    40ee:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    40f0:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    40f4:	2a02      	cmp	r2, #2
    40f6:	d00a      	beq.n	410e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    40f8:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    40fa:	f012 0f0c 	tst.w	r2, #12
    40fe:	d10c      	bne.n	411a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    4100:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4102:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4104:	691a      	ldr	r2, [r3, #16]
    4106:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    410a:	d1fb      	bne.n	4104 <_tc_timer_set_period+0x18>
    410c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    410e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4110:	691a      	ldr	r2, [r3, #16]
    4112:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4116:	d1fb      	bne.n	4110 <_tc_timer_set_period+0x24>
    4118:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    411a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    411c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4120:	2a01      	cmp	r2, #1
    4122:	d000      	beq.n	4126 <_tc_timer_set_period+0x3a>
    4124:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    4126:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    4128:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    412a:	691a      	ldr	r2, [r3, #16]
    412c:	f012 0f20 	tst.w	r2, #32
    4130:	d1fb      	bne.n	412a <_tc_timer_set_period+0x3e>
    4132:	e7f7      	b.n	4124 <_tc_timer_set_period+0x38>

00004134 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    4134:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4136:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4138:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    413c:	2a02      	cmp	r2, #2
    413e:	d00a      	beq.n	4156 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4140:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4142:	f012 0f0c 	tst.w	r2, #12
    4146:	d10c      	bne.n	4162 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4148:	691a      	ldr	r2, [r3, #16]
    414a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    414e:	d1fb      	bne.n	4148 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    4150:	8b98      	ldrh	r0, [r3, #28]
    4152:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    4154:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4156:	691a      	ldr	r2, [r3, #16]
    4158:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    415c:	d1fb      	bne.n	4156 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    415e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    4160:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4162:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4164:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4168:	2a01      	cmp	r2, #1
    416a:	d001      	beq.n	4170 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    416c:	2000      	movs	r0, #0
}
    416e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4170:	691a      	ldr	r2, [r3, #16]
    4172:	f012 0f20 	tst.w	r2, #32
    4176:	d1fb      	bne.n	4170 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    4178:	7ed8      	ldrb	r0, [r3, #27]
    417a:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    417c:	4770      	bx	lr

0000417e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    417e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4180:	6913      	ldr	r3, [r2, #16]
    4182:	f013 0f03 	tst.w	r3, #3
    4186:	d1fb      	bne.n	4180 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4188:	6810      	ldr	r0, [r2, #0]
}
    418a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    418e:	4770      	bx	lr

00004190 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4190:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4192:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4194:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4196:	f012 0f01 	tst.w	r2, #1
    419a:	d100      	bne.n	419e <tc_interrupt_handler+0xe>
    419c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    419e:	2201      	movs	r2, #1
    41a0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    41a2:	6803      	ldr	r3, [r0, #0]
    41a4:	4798      	blx	r3
	}
}
    41a6:	e7f9      	b.n	419c <tc_interrupt_handler+0xc>

000041a8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	b088      	sub	sp, #32
    41ac:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    41ae:	466c      	mov	r4, sp
    41b0:	4d18      	ldr	r5, [pc, #96]	; (4214 <get_tc_index+0x6c>)
    41b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    41b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    41b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    41ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41be:	9b00      	ldr	r3, [sp, #0]
    41c0:	42b3      	cmp	r3, r6
    41c2:	d01c      	beq.n	41fe <get_tc_index+0x56>
    41c4:	4630      	mov	r0, r6
    41c6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41c8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41ca:	f852 1b04 	ldr.w	r1, [r2], #4
    41ce:	4281      	cmp	r1, r0
    41d0:	d016      	beq.n	4200 <get_tc_index+0x58>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41d2:	3301      	adds	r3, #1
    41d4:	2b08      	cmp	r3, #8
    41d6:	d1f8      	bne.n	41ca <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
    41d8:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    41da:	2b04      	cmp	r3, #4
    41dc:	d016      	beq.n	420c <get_tc_index+0x64>
    41de:	2b06      	cmp	r3, #6
    41e0:	d016      	beq.n	4210 <get_tc_index+0x68>
    41e2:	2b07      	cmp	r3, #7
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    41e4:	bf08      	it	eq
    41e6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    41e8:	d00e      	beq.n	4208 <get_tc_index+0x60>
	ASSERT(false);
    41ea:	f240 1267 	movw	r2, #359	; 0x167
    41ee:	490a      	ldr	r1, [pc, #40]	; (4218 <get_tc_index+0x70>)
    41f0:	2000      	movs	r0, #0
    41f2:	4b0a      	ldr	r3, [pc, #40]	; (421c <get_tc_index+0x74>)
    41f4:	4798      	blx	r3
	return -1;
    41f6:	f04f 30ff 	mov.w	r0, #4294967295
}
    41fa:	b008      	add	sp, #32
    41fc:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41fe:	2300      	movs	r3, #0
			return i;
    4200:	b2db      	uxtb	r3, r3
		if (_tcs[i].number == index) {
    4202:	2b01      	cmp	r3, #1
    4204:	d1e9      	bne.n	41da <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4206:	2000      	movs	r0, #0
			return i;
    4208:	b240      	sxtb	r0, r0
    420a:	e7f6      	b.n	41fa <get_tc_index+0x52>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    420c:	2001      	movs	r0, #1
    420e:	e7fb      	b.n	4208 <get_tc_index+0x60>
    4210:	2002      	movs	r0, #2
    4212:	e7f9      	b.n	4208 <get_tc_index+0x60>
    4214:	000096cc 	.word	0x000096cc
    4218:	0000973c 	.word	0x0000973c
    421c:	000021c5 	.word	0x000021c5

00004220 <_tc_timer_init>:
{
    4220:	b570      	push	{r4, r5, r6, lr}
    4222:	4606      	mov	r6, r0
    4224:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    4226:	4608      	mov	r0, r1
    4228:	4b71      	ldr	r3, [pc, #452]	; (43f0 <_tc_timer_init+0x1d0>)
    422a:	4798      	blx	r3
    422c:	4605      	mov	r5, r0
	device->hw = hw;
    422e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4230:	22a0      	movs	r2, #160	; 0xa0
    4232:	4970      	ldr	r1, [pc, #448]	; (43f4 <_tc_timer_init+0x1d4>)
    4234:	2001      	movs	r0, #1
    4236:	4b70      	ldr	r3, [pc, #448]	; (43f8 <_tc_timer_init+0x1d8>)
    4238:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    423a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    423c:	f013 0f01 	tst.w	r3, #1
    4240:	d119      	bne.n	4276 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4242:	6923      	ldr	r3, [r4, #16]
    4244:	f013 0f03 	tst.w	r3, #3
    4248:	d1fb      	bne.n	4242 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    424a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    424c:	f013 0f02 	tst.w	r3, #2
    4250:	d00b      	beq.n	426a <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4252:	6823      	ldr	r3, [r4, #0]
    4254:	f023 0302 	bic.w	r3, r3, #2
    4258:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    425a:	6923      	ldr	r3, [r4, #16]
    425c:	f013 0f03 	tst.w	r3, #3
    4260:	d1fb      	bne.n	425a <_tc_timer_init+0x3a>
    4262:	6923      	ldr	r3, [r4, #16]
    4264:	f013 0f02 	tst.w	r3, #2
    4268:	d1fb      	bne.n	4262 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    426a:	2301      	movs	r3, #1
    426c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    426e:	6923      	ldr	r3, [r4, #16]
    4270:	f013 0f03 	tst.w	r3, #3
    4274:	d1fb      	bne.n	426e <_tc_timer_init+0x4e>
    4276:	6923      	ldr	r3, [r4, #16]
    4278:	f013 0f01 	tst.w	r3, #1
    427c:	d1fb      	bne.n	4276 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    427e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4282:	4a5e      	ldr	r2, [pc, #376]	; (43fc <_tc_timer_init+0x1dc>)
    4284:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    428a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    428c:	6923      	ldr	r3, [r4, #16]
    428e:	f013 0f03 	tst.w	r3, #3
    4292:	d1fb      	bne.n	428c <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4294:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4298:	4958      	ldr	r1, [pc, #352]	; (43fc <_tc_timer_init+0x1dc>)
    429a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    429e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    42a2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    42a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    42a6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    42a8:	2301      	movs	r3, #1
    42aa:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    42ac:	f002 020c 	and.w	r2, r2, #12
    42b0:	2a08      	cmp	r2, #8
    42b2:	d056      	beq.n	4362 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    42b4:	2a00      	cmp	r2, #0
    42b6:	d16b      	bne.n	4390 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    42b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42bc:	4a4f      	ldr	r2, [pc, #316]	; (43fc <_tc_timer_init+0x1dc>)
    42be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42c4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42c6:	6923      	ldr	r3, [r4, #16]
    42c8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    42cc:	d1fb      	bne.n	42c6 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    42ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42d2:	4a4a      	ldr	r2, [pc, #296]	; (43fc <_tc_timer_init+0x1dc>)
    42d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42da:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42dc:	6923      	ldr	r3, [r4, #16]
    42de:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    42e2:	d1fb      	bne.n	42dc <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    42e4:	2301      	movs	r3, #1
    42e6:	7263      	strb	r3, [r4, #9]
	if (hw == TC1) {
    42e8:	4b45      	ldr	r3, [pc, #276]	; (4400 <_tc_timer_init+0x1e0>)
    42ea:	429c      	cmp	r4, r3
    42ec:	d077      	beq.n	43de <_tc_timer_init+0x1be>
	if (hw == TC4) {
    42ee:	4b45      	ldr	r3, [pc, #276]	; (4404 <_tc_timer_init+0x1e4>)
    42f0:	429c      	cmp	r4, r3
    42f2:	d077      	beq.n	43e4 <_tc_timer_init+0x1c4>
	if (hw == TC6) {
    42f4:	4b44      	ldr	r3, [pc, #272]	; (4408 <_tc_timer_init+0x1e8>)
    42f6:	429c      	cmp	r4, r3
    42f8:	d077      	beq.n	43ea <_tc_timer_init+0x1ca>
	if (hw == TC7) {
    42fa:	4b44      	ldr	r3, [pc, #272]	; (440c <_tc_timer_init+0x1ec>)
    42fc:	429c      	cmp	r4, r3
		_tc7_dev = (struct _timer_device *)dev;
    42fe:	bf04      	itt	eq
    4300:	4b43      	ldreq	r3, [pc, #268]	; (4410 <_tc_timer_init+0x1f0>)
    4302:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    4304:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4308:	4a3c      	ldr	r2, [pc, #240]	; (43fc <_tc_timer_init+0x1dc>)
    430a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    430e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4312:	2b00      	cmp	r3, #0
    4314:	db23      	blt.n	435e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4316:	095a      	lsrs	r2, r3, #5
    4318:	f003 031f 	and.w	r3, r3, #31
    431c:	2101      	movs	r1, #1
    431e:	fa01 f303 	lsl.w	r3, r1, r3
    4322:	3220      	adds	r2, #32
    4324:	493b      	ldr	r1, [pc, #236]	; (4414 <_tc_timer_init+0x1f4>)
    4326:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    432a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    432e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4332:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4336:	4b31      	ldr	r3, [pc, #196]	; (43fc <_tc_timer_init+0x1dc>)
    4338:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    433c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4340:	2b00      	cmp	r3, #0
    4342:	db0c      	blt.n	435e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4344:	0959      	lsrs	r1, r3, #5
    4346:	f003 031f 	and.w	r3, r3, #31
    434a:	2201      	movs	r2, #1
    434c:	fa02 f303 	lsl.w	r3, r2, r3
    4350:	4a30      	ldr	r2, [pc, #192]	; (4414 <_tc_timer_init+0x1f4>)
    4352:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4356:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    435a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    435e:	2000      	movs	r0, #0
    4360:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4362:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4366:	4a25      	ldr	r2, [pc, #148]	; (43fc <_tc_timer_init+0x1dc>)
    4368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    436e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4370:	6923      	ldr	r3, [r4, #16]
    4372:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4376:	d1fb      	bne.n	4370 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4378:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    437c:	4a1f      	ldr	r2, [pc, #124]	; (43fc <_tc_timer_init+0x1dc>)
    437e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4384:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4386:	6923      	ldr	r3, [r4, #16]
    4388:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    438c:	d1fb      	bne.n	4386 <_tc_timer_init+0x166>
    438e:	e7a9      	b.n	42e4 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4390:	2a04      	cmp	r2, #4
    4392:	d1a7      	bne.n	42e4 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4394:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4398:	4a18      	ldr	r2, [pc, #96]	; (43fc <_tc_timer_init+0x1dc>)
    439a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    439e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43a2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43a4:	6923      	ldr	r3, [r4, #16]
    43a6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43aa:	d1fb      	bne.n	43a4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    43ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43b0:	4a12      	ldr	r2, [pc, #72]	; (43fc <_tc_timer_init+0x1dc>)
    43b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43ba:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43bc:	6923      	ldr	r3, [r4, #16]
    43be:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43c2:	d1fb      	bne.n	43bc <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    43c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43c8:	4a0c      	ldr	r2, [pc, #48]	; (43fc <_tc_timer_init+0x1dc>)
    43ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    43d2:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43d4:	6923      	ldr	r3, [r4, #16]
    43d6:	f013 0f20 	tst.w	r3, #32
    43da:	d1fb      	bne.n	43d4 <_tc_timer_init+0x1b4>
    43dc:	e782      	b.n	42e4 <_tc_timer_init+0xc4>
		_tc1_dev = (struct _timer_device *)dev;
    43de:	4b0c      	ldr	r3, [pc, #48]	; (4410 <_tc_timer_init+0x1f0>)
    43e0:	601e      	str	r6, [r3, #0]
    43e2:	e78a      	b.n	42fa <_tc_timer_init+0xda>
		_tc4_dev = (struct _timer_device *)dev;
    43e4:	4b0a      	ldr	r3, [pc, #40]	; (4410 <_tc_timer_init+0x1f0>)
    43e6:	605e      	str	r6, [r3, #4]
    43e8:	e78c      	b.n	4304 <_tc_timer_init+0xe4>
		_tc6_dev = (struct _timer_device *)dev;
    43ea:	4b09      	ldr	r3, [pc, #36]	; (4410 <_tc_timer_init+0x1f0>)
    43ec:	609e      	str	r6, [r3, #8]
    43ee:	e789      	b.n	4304 <_tc_timer_init+0xe4>
    43f0:	000041a9 	.word	0x000041a9
    43f4:	0000973c 	.word	0x0000973c
    43f8:	000021c5 	.word	0x000021c5
    43fc:	000096cc 	.word	0x000096cc
    4400:	40003c00 	.word	0x40003c00
    4404:	42001400 	.word	0x42001400
    4408:	43001400 	.word	0x43001400
    440c:	43001800 	.word	0x43001800
    4410:	200008b4 	.word	0x200008b4
    4414:	e000e100 	.word	0xe000e100

00004418 <_tc_timer_deinit>:
{
    4418:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    441a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    441c:	4620      	mov	r0, r4
    441e:	4b18      	ldr	r3, [pc, #96]	; (4480 <_tc_timer_deinit+0x68>)
    4420:	4798      	blx	r3
    4422:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4424:	22cd      	movs	r2, #205	; 0xcd
    4426:	4917      	ldr	r1, [pc, #92]	; (4484 <_tc_timer_deinit+0x6c>)
    4428:	2001      	movs	r0, #1
    442a:	4b17      	ldr	r3, [pc, #92]	; (4488 <_tc_timer_deinit+0x70>)
    442c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    442e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4432:	4b16      	ldr	r3, [pc, #88]	; (448c <_tc_timer_deinit+0x74>)
    4434:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4438:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    443c:	2b00      	cmp	r3, #0
    443e:	db0d      	blt.n	445c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4440:	095a      	lsrs	r2, r3, #5
    4442:	f003 031f 	and.w	r3, r3, #31
    4446:	2101      	movs	r1, #1
    4448:	fa01 f303 	lsl.w	r3, r1, r3
    444c:	3220      	adds	r2, #32
    444e:	4910      	ldr	r1, [pc, #64]	; (4490 <_tc_timer_deinit+0x78>)
    4450:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4454:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4458:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    445c:	6823      	ldr	r3, [r4, #0]
    445e:	f023 0302 	bic.w	r3, r3, #2
    4462:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4464:	6923      	ldr	r3, [r4, #16]
    4466:	f013 0f03 	tst.w	r3, #3
    446a:	d1fb      	bne.n	4464 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    446c:	6823      	ldr	r3, [r4, #0]
    446e:	f043 0301 	orr.w	r3, r3, #1
    4472:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4474:	6923      	ldr	r3, [r4, #16]
    4476:	f013 0f01 	tst.w	r3, #1
    447a:	d1fb      	bne.n	4474 <_tc_timer_deinit+0x5c>
}
    447c:	bd38      	pop	{r3, r4, r5, pc}
    447e:	bf00      	nop
    4480:	000041a9 	.word	0x000041a9
    4484:	0000973c 	.word	0x0000973c
    4488:	000021c5 	.word	0x000021c5
    448c:	000096cc 	.word	0x000096cc
    4490:	e000e100 	.word	0xe000e100

00004494 <_tc_timer_set_irq>:
{
    4494:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    4496:	68c0      	ldr	r0, [r0, #12]
    4498:	4b09      	ldr	r3, [pc, #36]	; (44c0 <_tc_timer_set_irq+0x2c>)
    449a:	4798      	blx	r3
    449c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    449e:	f44f 7291 	mov.w	r2, #290	; 0x122
    44a2:	4908      	ldr	r1, [pc, #32]	; (44c4 <_tc_timer_set_irq+0x30>)
    44a4:	2001      	movs	r0, #1
    44a6:	4b08      	ldr	r3, [pc, #32]	; (44c8 <_tc_timer_set_irq+0x34>)
    44a8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    44aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    44ae:	4b07      	ldr	r3, [pc, #28]	; (44cc <_tc_timer_set_irq+0x38>)
    44b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    44b4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    44b8:	4b05      	ldr	r3, [pc, #20]	; (44d0 <_tc_timer_set_irq+0x3c>)
    44ba:	4798      	blx	r3
    44bc:	bd10      	pop	{r4, pc}
    44be:	bf00      	nop
    44c0:	000041a9 	.word	0x000041a9
    44c4:	0000973c 	.word	0x0000973c
    44c8:	000021c5 	.word	0x000021c5
    44cc:	000096cc 	.word	0x000096cc
    44d0:	00002741 	.word	0x00002741

000044d4 <_tc_get_timer>:
}
    44d4:	4800      	ldr	r0, [pc, #0]	; (44d8 <_tc_get_timer+0x4>)
    44d6:	4770      	bx	lr
    44d8:	20000020 	.word	0x20000020

000044dc <TC1_Handler>:
{
    44dc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    44de:	4b02      	ldr	r3, [pc, #8]	; (44e8 <TC1_Handler+0xc>)
    44e0:	6818      	ldr	r0, [r3, #0]
    44e2:	4b02      	ldr	r3, [pc, #8]	; (44ec <TC1_Handler+0x10>)
    44e4:	4798      	blx	r3
    44e6:	bd08      	pop	{r3, pc}
    44e8:	200008b4 	.word	0x200008b4
    44ec:	00004191 	.word	0x00004191

000044f0 <TC4_Handler>:
{
    44f0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    44f2:	4b02      	ldr	r3, [pc, #8]	; (44fc <TC4_Handler+0xc>)
    44f4:	6858      	ldr	r0, [r3, #4]
    44f6:	4b02      	ldr	r3, [pc, #8]	; (4500 <TC4_Handler+0x10>)
    44f8:	4798      	blx	r3
    44fa:	bd08      	pop	{r3, pc}
    44fc:	200008b4 	.word	0x200008b4
    4500:	00004191 	.word	0x00004191

00004504 <TC6_Handler>:
{
    4504:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc6_dev);
    4506:	4b02      	ldr	r3, [pc, #8]	; (4510 <TC6_Handler+0xc>)
    4508:	6898      	ldr	r0, [r3, #8]
    450a:	4b02      	ldr	r3, [pc, #8]	; (4514 <TC6_Handler+0x10>)
    450c:	4798      	blx	r3
    450e:	bd08      	pop	{r3, pc}
    4510:	200008b4 	.word	0x200008b4
    4514:	00004191 	.word	0x00004191

00004518 <TC7_Handler>:
{
    4518:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc7_dev);
    451a:	4b02      	ldr	r3, [pc, #8]	; (4524 <TC7_Handler+0xc>)
    451c:	68d8      	ldr	r0, [r3, #12]
    451e:	4b02      	ldr	r3, [pc, #8]	; (4528 <TC7_Handler+0x10>)
    4520:	4798      	blx	r3
    4522:	bd08      	pop	{r3, pc}
    4524:	200008b4 	.word	0x200008b4
    4528:	00004191 	.word	0x00004191

0000452c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    452c:	2000      	movs	r0, #0
    452e:	4770      	bx	lr

00004530 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4530:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4532:	7c83      	ldrb	r3, [r0, #18]
    4534:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4538:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    453a:	f002 0107 	and.w	r1, r2, #7
    453e:	2901      	cmp	r1, #1
    4540:	d00b      	beq.n	455a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4542:	015a      	lsls	r2, r3, #5
    4544:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4548:	2110      	movs	r1, #16
    454a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    454e:	015b      	lsls	r3, r3, #5
    4550:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4554:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4558:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    455a:	f012 0f40 	tst.w	r2, #64	; 0x40
    455e:	d00c      	beq.n	457a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4560:	7cc2      	ldrb	r2, [r0, #19]
    4562:	f36f 1286 	bfc	r2, #6, #1
    4566:	74c2      	strb	r2, [r0, #19]
    4568:	015a      	lsls	r2, r3, #5
    456a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    456e:	2180      	movs	r1, #128	; 0x80
    4570:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4574:	2140      	movs	r1, #64	; 0x40
    4576:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    457a:	7cc2      	ldrb	r2, [r0, #19]
    457c:	f36f 02c3 	bfc	r2, #3, #1
    4580:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    4582:	490a      	ldr	r1, [pc, #40]	; (45ac <_usb_d_dev_handle_setup+0x7c>)
    4584:	015a      	lsls	r2, r3, #5
    4586:	188c      	adds	r4, r1, r2
    4588:	2500      	movs	r5, #0
    458a:	72a5      	strb	r5, [r4, #10]
    458c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    458e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    4592:	246f      	movs	r4, #111	; 0x6f
    4594:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4598:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    459c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    45a0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    45a4:	7c80      	ldrb	r0, [r0, #18]
    45a6:	4798      	blx	r3
    45a8:	bd38      	pop	{r3, r4, r5, pc}
    45aa:	bf00      	nop
    45ac:	200008c4 	.word	0x200008c4

000045b0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    45b0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    45b2:	2320      	movs	r3, #32
    45b4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    45b8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    45ba:	7c83      	ldrb	r3, [r0, #18]
    45bc:	f003 030f 	and.w	r3, r3, #15
    45c0:	015b      	lsls	r3, r3, #5
    45c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45c6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    45ca:	4b04      	ldr	r3, [pc, #16]	; (45dc <_usb_d_dev_handle_stall+0x2c>)
    45cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    45d0:	6882      	ldr	r2, [r0, #8]
    45d2:	2101      	movs	r1, #1
    45d4:	7c80      	ldrb	r0, [r0, #18]
    45d6:	4798      	blx	r3
    45d8:	bd08      	pop	{r3, pc}
    45da:	bf00      	nop
    45dc:	200008c4 	.word	0x200008c4

000045e0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    45e0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    45e2:	7c84      	ldrb	r4, [r0, #18]
    45e4:	2cff      	cmp	r4, #255	; 0xff
    45e6:	d003      	beq.n	45f0 <_usb_d_dev_trans_done+0x10>
    45e8:	7cc3      	ldrb	r3, [r0, #19]
    45ea:	f013 0f40 	tst.w	r3, #64	; 0x40
    45ee:	d100      	bne.n	45f2 <_usb_d_dev_trans_done+0x12>
    45f0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    45f2:	7cc2      	ldrb	r2, [r0, #19]
    45f4:	f36f 1286 	bfc	r2, #6, #1
    45f8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    45fa:	4a03      	ldr	r2, [pc, #12]	; (4608 <_usb_d_dev_trans_done+0x28>)
    45fc:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4600:	6882      	ldr	r2, [r0, #8]
    4602:	4620      	mov	r0, r4
    4604:	47a8      	blx	r5
    4606:	e7f3      	b.n	45f0 <_usb_d_dev_trans_done+0x10>
    4608:	200008c4 	.word	0x200008c4

0000460c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    460c:	b530      	push	{r4, r5, lr}
    460e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4610:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4612:	2425      	movs	r4, #37	; 0x25
    4614:	f88d 4004 	strb.w	r4, [sp, #4]
    4618:	244a      	movs	r4, #74	; 0x4a
    461a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    461e:	2bff      	cmp	r3, #255	; 0xff
    4620:	d01e      	beq.n	4660 <_usb_d_dev_trans_stop+0x54>
    4622:	7cc4      	ldrb	r4, [r0, #19]
    4624:	f014 0f40 	tst.w	r4, #64	; 0x40
    4628:	d01a      	beq.n	4660 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    462a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    462e:	b1c9      	cbz	r1, 4664 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4630:	0163      	lsls	r3, r4, #5
    4632:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4636:	2580      	movs	r5, #128	; 0x80
    4638:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    463c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    463e:	a902      	add	r1, sp, #8
    4640:	440b      	add	r3, r1
    4642:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4646:	0163      	lsls	r3, r4, #5
    4648:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    464c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4650:	0163      	lsls	r3, r4, #5
    4652:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4656:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    465a:	4611      	mov	r1, r2
    465c:	4b05      	ldr	r3, [pc, #20]	; (4674 <_usb_d_dev_trans_stop+0x68>)
    465e:	4798      	blx	r3
}
    4660:	b003      	add	sp, #12
    4662:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4664:	0163      	lsls	r3, r4, #5
    4666:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    466a:	2540      	movs	r5, #64	; 0x40
    466c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4670:	e7e4      	b.n	463c <_usb_d_dev_trans_stop+0x30>
    4672:	bf00      	nop
    4674:	000045e1 	.word	0x000045e1

00004678 <_usb_d_dev_handle_trfail>:
{
    4678:	b530      	push	{r4, r5, lr}
    467a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    467c:	7c83      	ldrb	r3, [r0, #18]
    467e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4682:	2204      	movs	r2, #4
    4684:	f88d 2004 	strb.w	r2, [sp, #4]
    4688:	2208      	movs	r2, #8
    468a:	f88d 2005 	strb.w	r2, [sp, #5]
    468e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    4690:	460c      	mov	r4, r1
    4692:	b391      	cbz	r1, 46fa <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4694:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    4698:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    469c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    46a0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    46a4:	4a32      	ldr	r2, [pc, #200]	; (4770 <_usb_d_dev_handle_trfail+0xf8>)
    46a6:	440a      	add	r2, r1
    46a8:	7a91      	ldrb	r1, [r2, #10]
    46aa:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    46ac:	2d02      	cmp	r5, #2
    46ae:	d02c      	beq.n	470a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    46b0:	f011 0f02 	tst.w	r1, #2
    46b4:	d045      	beq.n	4742 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46b6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    46b8:	7a91      	ldrb	r1, [r2, #10]
    46ba:	f36f 0141 	bfc	r1, #1, #1
    46be:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    46c0:	aa02      	add	r2, sp, #8
    46c2:	4422      	add	r2, r4
    46c4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46c8:	015a      	lsls	r2, r3, #5
    46ca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    46ce:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    46d2:	015b      	lsls	r3, r3, #5
    46d4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    46d8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    46dc:	f005 0307 	and.w	r3, r5, #7
    46e0:	2b01      	cmp	r3, #1
    46e2:	d143      	bne.n	476c <_usb_d_dev_handle_trfail+0xf4>
    46e4:	7cc3      	ldrb	r3, [r0, #19]
    46e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    46ea:	d03f      	beq.n	476c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    46ec:	09d9      	lsrs	r1, r3, #7
    46ee:	428c      	cmp	r4, r1
    46f0:	d03c      	beq.n	476c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    46f2:	2200      	movs	r2, #0
    46f4:	4b1f      	ldr	r3, [pc, #124]	; (4774 <_usb_d_dev_handle_trfail+0xfc>)
    46f6:	4798      	blx	r3
    46f8:	e038      	b.n	476c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    46fa:	0159      	lsls	r1, r3, #5
    46fc:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4700:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4704:	f005 0507 	and.w	r5, r5, #7
    4708:	e7ca      	b.n	46a0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    470a:	f011 0f01 	tst.w	r1, #1
    470e:	d0cf      	beq.n	46b0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4710:	7a91      	ldrb	r1, [r2, #10]
    4712:	f36f 0100 	bfc	r1, #0, #1
    4716:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4718:	aa02      	add	r2, sp, #8
    471a:	4422      	add	r2, r4
    471c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4720:	015a      	lsls	r2, r3, #5
    4722:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4726:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    472a:	015b      	lsls	r3, r3, #5
    472c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4730:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4734:	2204      	movs	r2, #4
    4736:	1c21      	adds	r1, r4, #0
    4738:	bf18      	it	ne
    473a:	2101      	movne	r1, #1
    473c:	4b0d      	ldr	r3, [pc, #52]	; (4774 <_usb_d_dev_handle_trfail+0xfc>)
    473e:	4798      	blx	r3
    4740:	e014      	b.n	476c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4742:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4746:	4a0a      	ldr	r2, [pc, #40]	; (4770 <_usb_d_dev_handle_trfail+0xf8>)
    4748:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    474c:	2100      	movs	r1, #0
    474e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4750:	aa02      	add	r2, sp, #8
    4752:	4414      	add	r4, r2
    4754:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4758:	015a      	lsls	r2, r3, #5
    475a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    475e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4762:	015b      	lsls	r3, r3, #5
    4764:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4768:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    476c:	b003      	add	sp, #12
    476e:	bd30      	pop	{r4, r5, pc}
    4770:	200008c4 	.word	0x200008c4
    4774:	0000460d 	.word	0x0000460d

00004778 <_usb_d_dev_reset_epts>:
{
    4778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    477c:	4d0c      	ldr	r5, [pc, #48]	; (47b0 <_usb_d_dev_reset_epts+0x38>)
    477e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    4782:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4786:	f04f 0803 	mov.w	r8, #3
    478a:	4f0a      	ldr	r7, [pc, #40]	; (47b4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    478c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    478e:	4641      	mov	r1, r8
    4790:	4620      	mov	r0, r4
    4792:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    4794:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    4796:	2300      	movs	r3, #0
    4798:	74e3      	strb	r3, [r4, #19]
    479a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    479c:	42ac      	cmp	r4, r5
    479e:	d1f6      	bne.n	478e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    47a0:	22c0      	movs	r2, #192	; 0xc0
    47a2:	4619      	mov	r1, r3
    47a4:	4802      	ldr	r0, [pc, #8]	; (47b0 <_usb_d_dev_reset_epts+0x38>)
    47a6:	4b04      	ldr	r3, [pc, #16]	; (47b8 <_usb_d_dev_reset_epts+0x40>)
    47a8:	4798      	blx	r3
    47aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ae:	bf00      	nop
    47b0:	200008c4 	.word	0x200008c4
    47b4:	000045e1 	.word	0x000045e1
    47b8:	000088bf 	.word	0x000088bf

000047bc <_usb_d_dev_in_next>:
{
    47bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47c0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    47c2:	7c84      	ldrb	r4, [r0, #18]
    47c4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47c8:	4688      	mov	r8, r1
    47ca:	2900      	cmp	r1, #0
    47cc:	f000 80a0 	beq.w	4910 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    47d0:	4b58      	ldr	r3, [pc, #352]	; (4934 <_usb_d_dev_in_next+0x178>)
    47d2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47d6:	6958      	ldr	r0, [r3, #20]
    47d8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    47dc:	8a2b      	ldrh	r3, [r5, #16]
    47de:	f240 32ff 	movw	r2, #1023	; 0x3ff
    47e2:	4293      	cmp	r3, r2
    47e4:	f000 808e 	beq.w	4904 <_usb_d_dev_in_next+0x148>
    47e8:	3b01      	subs	r3, #1
    47ea:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    47ec:	7cef      	ldrb	r7, [r5, #19]
    47ee:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    47f2:	f1b8 0f00 	cmp.w	r8, #0
    47f6:	d005      	beq.n	4804 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    47f8:	0162      	lsls	r2, r4, #5
    47fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    47fe:	2302      	movs	r3, #2
    4800:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4804:	68a9      	ldr	r1, [r5, #8]
    4806:	eb0e 0301 	add.w	r3, lr, r1
    480a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    480c:	686e      	ldr	r6, [r5, #4]
    480e:	42b3      	cmp	r3, r6
    4810:	d23f      	bcs.n	4892 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4812:	1af6      	subs	r6, r6, r3
    4814:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    4816:	7cea      	ldrb	r2, [r5, #19]
    4818:	f012 0f20 	tst.w	r2, #32
    481c:	d02d      	beq.n	487a <_usb_d_dev_in_next+0xbe>
    481e:	8a2a      	ldrh	r2, [r5, #16]
    4820:	4296      	cmp	r6, r2
    4822:	bf28      	it	cs
    4824:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4826:	6829      	ldr	r1, [r5, #0]
    4828:	4632      	mov	r2, r6
    482a:	4419      	add	r1, r3
    482c:	68e8      	ldr	r0, [r5, #12]
    482e:	4b42      	ldr	r3, [pc, #264]	; (4938 <_usb_d_dev_in_next+0x17c>)
    4830:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4832:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4834:	4b3f      	ldr	r3, [pc, #252]	; (4934 <_usb_d_dev_in_next+0x178>)
    4836:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    483a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    483c:	4b3d      	ldr	r3, [pc, #244]	; (4934 <_usb_d_dev_in_next+0x178>)
    483e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4842:	695a      	ldr	r2, [r3, #20]
    4844:	f366 020d 	bfi	r2, r6, #0, #14
    4848:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    484a:	695a      	ldr	r2, [r3, #20]
    484c:	f36f 329b 	bfc	r2, #14, #14
    4850:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4852:	f1b8 0f00 	cmp.w	r8, #0
    4856:	d108      	bne.n	486a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4858:	2f01      	cmp	r7, #1
    485a:	bf0c      	ite	eq
    485c:	224e      	moveq	r2, #78	; 0x4e
    485e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4860:	0163      	lsls	r3, r4, #5
    4862:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4866:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    486a:	0164      	lsls	r4, r4, #5
    486c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4870:	2380      	movs	r3, #128	; 0x80
    4872:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    487a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    487e:	bf28      	it	cs
    4880:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4884:	6829      	ldr	r1, [r5, #0]
    4886:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4888:	4a2a      	ldr	r2, [pc, #168]	; (4934 <_usb_d_dev_in_next+0x178>)
    488a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    488e:	6113      	str	r3, [r2, #16]
    4890:	e7d4      	b.n	483c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    4892:	7ceb      	ldrb	r3, [r5, #19]
    4894:	f013 0f10 	tst.w	r3, #16
    4898:	d00f      	beq.n	48ba <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    489a:	7ceb      	ldrb	r3, [r5, #19]
    489c:	f36f 1304 	bfc	r3, #4, #1
    48a0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    48a2:	4b24      	ldr	r3, [pc, #144]	; (4934 <_usb_d_dev_in_next+0x178>)
    48a4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    48a8:	695a      	ldr	r2, [r3, #20]
    48aa:	f36f 020d 	bfc	r2, #0, #14
    48ae:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    48b0:	695a      	ldr	r2, [r3, #20]
    48b2:	f36f 329b 	bfc	r2, #14, #14
    48b6:	615a      	str	r2, [r3, #20]
    48b8:	e7cb      	b.n	4852 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    48ba:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    48bc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    48c0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    48c4:	bf0c      	ite	eq
    48c6:	234b      	moveq	r3, #75	; 0x4b
    48c8:	234a      	movne	r3, #74	; 0x4a
    48ca:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    48ce:	8a2a      	ldrh	r2, [r5, #16]
    48d0:	ea00 030e 	and.w	r3, r0, lr
    48d4:	429a      	cmp	r2, r3
    48d6:	d005      	beq.n	48e4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    48d8:	2100      	movs	r1, #0
    48da:	4628      	mov	r0, r5
    48dc:	4b17      	ldr	r3, [pc, #92]	; (493c <_usb_d_dev_in_next+0x180>)
    48de:	4798      	blx	r3
	return;
    48e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    48e4:	7ceb      	ldrb	r3, [r5, #19]
    48e6:	f36f 1386 	bfc	r3, #6, #1
    48ea:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    48ec:	4b11      	ldr	r3, [pc, #68]	; (4934 <_usb_d_dev_in_next+0x178>)
    48ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    48f2:	68a9      	ldr	r1, [r5, #8]
    48f4:	7ca8      	ldrb	r0, [r5, #18]
    48f6:	4798      	blx	r3
    48f8:	b9d0      	cbnz	r0, 4930 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    48fa:	7ceb      	ldrb	r3, [r5, #19]
    48fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4900:	74eb      	strb	r3, [r5, #19]
    4902:	e7e9      	b.n	48d8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4904:	7cef      	ldrb	r7, [r5, #19]
    4906:	f007 0707 	and.w	r7, r7, #7
    490a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    490e:	e773      	b.n	47f8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4910:	8a03      	ldrh	r3, [r0, #16]
    4912:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4916:	4293      	cmp	r3, r2
    4918:	d107      	bne.n	492a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    491a:	7cef      	ldrb	r7, [r5, #19]
    491c:	f007 0707 	and.w	r7, r7, #7
    4920:	f04f 0e00 	mov.w	lr, #0
    4924:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4928:	e76c      	b.n	4804 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    492a:	f04f 0e00 	mov.w	lr, #0
    492e:	e75b      	b.n	47e8 <_usb_d_dev_in_next+0x2c>
    4930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4934:	200008c4 	.word	0x200008c4
    4938:	000088a9 	.word	0x000088a9
    493c:	000045e1 	.word	0x000045e1

00004940 <_usb_d_dev_out_next>:
{
    4940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4944:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4946:	7c85      	ldrb	r5, [r0, #18]
    4948:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    494c:	4689      	mov	r9, r1
    494e:	2900      	cmp	r1, #0
    4950:	d056      	beq.n	4a00 <_usb_d_dev_out_next+0xc0>
    4952:	4b74      	ldr	r3, [pc, #464]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4954:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4958:	685a      	ldr	r2, [r3, #4]
    495a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    495e:	685f      	ldr	r7, [r3, #4]
    4960:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4964:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4966:	8a06      	ldrh	r6, [r0, #16]
    4968:	f240 33ff 	movw	r3, #1023	; 0x3ff
    496c:	429e      	cmp	r6, r3
    496e:	f000 80ba 	beq.w	4ae6 <_usb_d_dev_out_next+0x1a6>
    4972:	3e01      	subs	r6, #1
    4974:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4976:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    497a:	f894 8013 	ldrb.w	r8, [r4, #19]
    497e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    4982:	f1b9 0f00 	cmp.w	r9, #0
    4986:	d005      	beq.n	4994 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4988:	016b      	lsls	r3, r5, #5
    498a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    498e:	2201      	movs	r2, #1
    4990:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4994:	7ce3      	ldrb	r3, [r4, #19]
    4996:	f013 0f20 	tst.w	r3, #32
    499a:	d00d      	beq.n	49b8 <_usb_d_dev_out_next+0x78>
    499c:	6862      	ldr	r2, [r4, #4]
    499e:	2a00      	cmp	r2, #0
    49a0:	d037      	beq.n	4a12 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    49a2:	68a0      	ldr	r0, [r4, #8]
    49a4:	1a12      	subs	r2, r2, r0
    49a6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    49a8:	6823      	ldr	r3, [r4, #0]
    49aa:	42ba      	cmp	r2, r7
    49ac:	bf28      	it	cs
    49ae:	463a      	movcs	r2, r7
    49b0:	68e1      	ldr	r1, [r4, #12]
    49b2:	4418      	add	r0, r3
    49b4:	4b5c      	ldr	r3, [pc, #368]	; (4b28 <_usb_d_dev_out_next+0x1e8>)
    49b6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    49b8:	6863      	ldr	r3, [r4, #4]
    49ba:	b353      	cbz	r3, 4a12 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    49bc:	f1b9 0f00 	cmp.w	r9, #0
    49c0:	d040      	beq.n	4a44 <_usb_d_dev_out_next+0x104>
    49c2:	8a22      	ldrh	r2, [r4, #16]
    49c4:	42ba      	cmp	r2, r7
    49c6:	d93d      	bls.n	4a44 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    49c8:	7ce3      	ldrb	r3, [r4, #19]
    49ca:	f36f 1304 	bfc	r3, #4, #1
    49ce:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    49d0:	68a3      	ldr	r3, [r4, #8]
    49d2:	445b      	add	r3, fp
    49d4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    49d6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    49da:	ea4f 1345 	mov.w	r3, r5, lsl #5
    49de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    49e2:	bf0c      	ite	eq
    49e4:	222d      	moveq	r2, #45	; 0x2d
    49e6:	2225      	movne	r2, #37	; 0x25
    49e8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    49ec:	b915      	cbnz	r5, 49f4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    49ee:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    49f0:	4b4c      	ldr	r3, [pc, #304]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    49f2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    49f4:	2100      	movs	r1, #0
    49f6:	4620      	mov	r0, r4
    49f8:	4b4c      	ldr	r3, [pc, #304]	; (4b2c <_usb_d_dev_out_next+0x1ec>)
    49fa:	4798      	blx	r3
	return;
    49fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4a00:	8a06      	ldrh	r6, [r0, #16]
    4a02:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4a06:	429e      	cmp	r6, r3
    4a08:	d07b      	beq.n	4b02 <_usb_d_dev_out_next+0x1c2>
    4a0a:	f04f 0b00 	mov.w	fp, #0
    4a0e:	46da      	mov	sl, fp
    4a10:	e7af      	b.n	4972 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4a12:	7ce3      	ldrb	r3, [r4, #19]
    4a14:	f013 0f10 	tst.w	r3, #16
    4a18:	d06c      	beq.n	4af4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4a1a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4a1c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4a20:	f043 0320 	orr.w	r3, r3, #32
    4a24:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a26:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a28:	493e      	ldr	r1, [pc, #248]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4a2a:	016a      	lsls	r2, r5, #5
    4a2c:	188b      	adds	r3, r1, r2
    4a2e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a30:	8a21      	ldrh	r1, [r4, #16]
    4a32:	685a      	ldr	r2, [r3, #4]
    4a34:	f361 329b 	bfi	r2, r1, #14, #14
    4a38:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a3a:	685a      	ldr	r2, [r3, #4]
    4a3c:	f36f 020d 	bfc	r2, #0, #14
    4a40:	605a      	str	r2, [r3, #4]
    4a42:	e01d      	b.n	4a80 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4a44:	68a2      	ldr	r2, [r4, #8]
    4a46:	4452      	add	r2, sl
    4a48:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4a4a:	4293      	cmp	r3, r2
    4a4c:	d9c3      	bls.n	49d6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4a4e:	1a9b      	subs	r3, r3, r2
    4a50:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4a52:	7ce1      	ldrb	r1, [r4, #19]
    4a54:	f011 0f20 	tst.w	r1, #32
    4a58:	d026      	beq.n	4aa8 <_usb_d_dev_out_next+0x168>
    4a5a:	8a22      	ldrh	r2, [r4, #16]
    4a5c:	4293      	cmp	r3, r2
    4a5e:	bf28      	it	cs
    4a60:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a62:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a64:	016a      	lsls	r2, r5, #5
    4a66:	492f      	ldr	r1, [pc, #188]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4a68:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a6a:	4a2e      	ldr	r2, [pc, #184]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4a6c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4a70:	6851      	ldr	r1, [r2, #4]
    4a72:	f363 319b 	bfi	r1, r3, #14, #14
    4a76:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a78:	6853      	ldr	r3, [r2, #4]
    4a7a:	f36f 030d 	bfc	r3, #0, #14
    4a7e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4a80:	f1b9 0f00 	cmp.w	r9, #0
    4a84:	d108      	bne.n	4a98 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4a86:	f1b8 0f01 	cmp.w	r8, #1
    4a8a:	d025      	beq.n	4ad8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4a8c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4a8e:	016b      	lsls	r3, r5, #5
    4a90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a94:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4a98:	016d      	lsls	r5, r5, #5
    4a9a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4a9e:	2340      	movs	r3, #64	; 0x40
    4aa0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4aa8:	8a21      	ldrh	r1, [r4, #16]
    4aaa:	428b      	cmp	r3, r1
    4aac:	d90a      	bls.n	4ac4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4ab2:	d80e      	bhi.n	4ad2 <_usb_d_dev_out_next+0x192>
    4ab4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4ab8:	6821      	ldr	r1, [r4, #0]
    4aba:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4abc:	0169      	lsls	r1, r5, #5
    4abe:	4819      	ldr	r0, [pc, #100]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4ac0:	5042      	str	r2, [r0, r1]
    4ac2:	e7d2      	b.n	4a6a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4ac4:	428b      	cmp	r3, r1
    4ac6:	d2f7      	bcs.n	4ab8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    4ac8:	7ce1      	ldrb	r1, [r4, #19]
    4aca:	f041 0120 	orr.w	r1, r1, #32
    4ace:	74e1      	strb	r1, [r4, #19]
    4ad0:	e7f2      	b.n	4ab8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4ad6:	e7ef      	b.n	4ab8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    4ad8:	4b12      	ldr	r3, [pc, #72]	; (4b24 <_usb_d_dev_out_next+0x1e4>)
    4ada:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4ade:	2200      	movs	r2, #0
    4ae0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4ae2:	222d      	movs	r2, #45	; 0x2d
    4ae4:	e7d3      	b.n	4a8e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    4ae6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4aea:	f890 8013 	ldrb.w	r8, [r0, #19]
    4aee:	f008 0807 	and.w	r8, r8, #7
    4af2:	e749      	b.n	4988 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4af4:	f1b9 0f00 	cmp.w	r9, #0
    4af8:	d10b      	bne.n	4b12 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    4afa:	68a3      	ldr	r3, [r4, #8]
    4afc:	4453      	add	r3, sl
    4afe:	60a3      	str	r3, [r4, #8]
    4b00:	e769      	b.n	49d6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b02:	f890 8013 	ldrb.w	r8, [r0, #19]
    4b06:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    4b0a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b0c:	46bb      	mov	fp, r7
    4b0e:	46ba      	mov	sl, r7
    4b10:	e740      	b.n	4994 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4b12:	8a23      	ldrh	r3, [r4, #16]
    4b14:	42bb      	cmp	r3, r7
    4b16:	f63f af57 	bhi.w	49c8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4b1a:	68a3      	ldr	r3, [r4, #8]
    4b1c:	4453      	add	r3, sl
    4b1e:	60a3      	str	r3, [r4, #8]
    4b20:	e759      	b.n	49d6 <_usb_d_dev_out_next+0x96>
    4b22:	bf00      	nop
    4b24:	200008c4 	.word	0x200008c4
    4b28:	000088a9 	.word	0x000088a9
    4b2c:	000045e1 	.word	0x000045e1

00004b30 <_usb_d_dev_handler>:
{
    4b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4b34:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4b38:	8c1e      	ldrh	r6, [r3, #32]
    4b3a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4b3c:	b146      	cbz	r6, 4b50 <_usb_d_dev_handler+0x20>
    4b3e:	4d96      	ldr	r5, [pc, #600]	; (4d98 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    4b40:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4b42:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    4b46:	f8df 926c 	ldr.w	r9, [pc, #620]	; 4db4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    4b4a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 4db8 <_usb_d_dev_handler+0x288>
    4b4e:	e0de      	b.n	4d0e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4b50:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4b52:	8b1b      	ldrh	r3, [r3, #24]
    4b54:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4b56:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4b58:	f013 0f04 	tst.w	r3, #4
    4b5c:	d11e      	bne.n	4b9c <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4b5e:	f413 7f00 	tst.w	r3, #512	; 0x200
    4b62:	d125      	bne.n	4bb0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4b64:	f013 0f80 	tst.w	r3, #128	; 0x80
    4b68:	d14f      	bne.n	4c0a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4b6a:	f013 0f70 	tst.w	r3, #112	; 0x70
    4b6e:	d158      	bne.n	4c22 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4b70:	f013 0f08 	tst.w	r3, #8
    4b74:	d178      	bne.n	4c68 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4b76:	f013 0f01 	tst.w	r3, #1
    4b7a:	d0e0      	beq.n	4b3e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4b7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4b80:	f240 2201 	movw	r2, #513	; 0x201
    4b84:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4b86:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4b88:	2270      	movs	r2, #112	; 0x70
    4b8a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4b8c:	4b83      	ldr	r3, [pc, #524]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4b8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4b92:	2100      	movs	r1, #0
    4b94:	2004      	movs	r0, #4
    4b96:	4798      	blx	r3
    4b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4b9c:	2204      	movs	r2, #4
    4b9e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ba2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4ba4:	4b7d      	ldr	r3, [pc, #500]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4ba6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4baa:	4798      	blx	r3
    4bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bb0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4bb4:	f240 2201 	movw	r2, #513	; 0x201
    4bb8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4bba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4bbc:	2270      	movs	r2, #112	; 0x70
    4bbe:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4bc0:	4b76      	ldr	r3, [pc, #472]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4bc2:	891b      	ldrh	r3, [r3, #8]
    4bc4:	f003 030f 	and.w	r3, r3, #15
    4bc8:	2b03      	cmp	r3, #3
    4bca:	d014      	beq.n	4bf6 <_usb_d_dev_handler+0xc6>
    4bcc:	2301      	movs	r3, #1
    4bce:	4873      	ldr	r0, [pc, #460]	; (4d9c <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4bd0:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4bd2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    4bd6:	8912      	ldrh	r2, [r2, #8]
    4bd8:	f002 020f 	and.w	r2, r2, #15
    4bdc:	2a03      	cmp	r2, #3
    4bde:	d00b      	beq.n	4bf8 <_usb_d_dev_handler+0xc8>
    4be0:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4be2:	2b05      	cmp	r3, #5
    4be4:	d1f4      	bne.n	4bd0 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    4be6:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4be8:	4b6c      	ldr	r3, [pc, #432]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4bea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4bee:	2003      	movs	r0, #3
    4bf0:	4798      	blx	r3
    4bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4bf6:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4bf8:	4b68      	ldr	r3, [pc, #416]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4bfa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    4bfe:	8919      	ldrh	r1, [r3, #8]
    4c00:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4c04:	2200      	movs	r2, #0
    4c06:	811a      	strh	r2, [r3, #8]
    4c08:	e7ee      	b.n	4be8 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c0a:	2280      	movs	r2, #128	; 0x80
    4c0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c10:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4c12:	4b62      	ldr	r3, [pc, #392]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4c14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c18:	2100      	movs	r1, #0
    4c1a:	2005      	movs	r0, #5
    4c1c:	4798      	blx	r3
    4c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c26:	2270      	movs	r2, #112	; 0x70
    4c28:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c2a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c2c:	f240 2201 	movw	r2, #513	; 0x201
    4c30:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4c32:	4b5b      	ldr	r3, [pc, #364]	; (4da0 <_usb_d_dev_handler+0x270>)
    4c34:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    4c38:	f013 0f01 	tst.w	r3, #1
    4c3c:	d00e      	beq.n	4c5c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c3e:	4a58      	ldr	r2, [pc, #352]	; (4da0 <_usb_d_dev_handler+0x270>)
    4c40:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4c42:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4c46:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4c4a:	d1f9      	bne.n	4c40 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4c4c:	4b53      	ldr	r3, [pc, #332]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4c4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c52:	2100      	movs	r1, #0
    4c54:	2002      	movs	r0, #2
    4c56:	4798      	blx	r3
    4c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c5c:	4a50      	ldr	r2, [pc, #320]	; (4da0 <_usb_d_dev_handler+0x270>)
    4c5e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    4c60:	f413 7f80 	tst.w	r3, #256	; 0x100
    4c64:	d0fb      	beq.n	4c5e <_usb_d_dev_handler+0x12e>
    4c66:	e7f1      	b.n	4c4c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4c68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c6c:	2400      	movs	r4, #0
    4c6e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c72:	2208      	movs	r2, #8
    4c74:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c76:	2270      	movs	r2, #112	; 0x70
    4c78:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c7a:	f240 2201 	movw	r2, #513	; 0x201
    4c7e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4c80:	4b48      	ldr	r3, [pc, #288]	; (4da4 <_usb_d_dev_handler+0x274>)
    4c82:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4c84:	4b45      	ldr	r3, [pc, #276]	; (4d9c <_usb_d_dev_handler+0x26c>)
    4c86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c8a:	4621      	mov	r1, r4
    4c8c:	2001      	movs	r0, #1
    4c8e:	4798      	blx	r3
    4c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4c94:	f011 0f10 	tst.w	r1, #16
    4c98:	d109      	bne.n	4cae <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4c9a:	f011 0f40 	tst.w	r1, #64	; 0x40
    4c9e:	d108      	bne.n	4cb2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4ca0:	f011 0f20 	tst.w	r1, #32
    4ca4:	d02f      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4ca6:	2100      	movs	r1, #0
    4ca8:	4b3f      	ldr	r3, [pc, #252]	; (4da8 <_usb_d_dev_handler+0x278>)
    4caa:	4798      	blx	r3
    4cac:	e02b      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    4cae:	47c8      	blx	r9
    4cb0:	e029      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4cb2:	2101      	movs	r1, #1
    4cb4:	4b3c      	ldr	r3, [pc, #240]	; (4da8 <_usb_d_dev_handler+0x278>)
    4cb6:	4798      	blx	r3
    4cb8:	e025      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4cba:	f011 0f40 	tst.w	r1, #64	; 0x40
    4cbe:	d111      	bne.n	4ce4 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4cc0:	f011 0f08 	tst.w	r1, #8
    4cc4:	d112      	bne.n	4cec <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4cc6:	f011 0f02 	tst.w	r1, #2
    4cca:	d112      	bne.n	4cf2 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4ccc:	f003 0307 	and.w	r3, r3, #7
    4cd0:	2b01      	cmp	r3, #1
    4cd2:	d118      	bne.n	4d06 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cd4:	f011 0f04 	tst.w	r1, #4
    4cd8:	d10f      	bne.n	4cfa <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4cda:	f011 0f10 	tst.w	r1, #16
    4cde:	d012      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4ce0:	47c8      	blx	r9
    4ce2:	e010      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4ce4:	2101      	movs	r1, #1
    4ce6:	4b30      	ldr	r3, [pc, #192]	; (4da8 <_usb_d_dev_handler+0x278>)
    4ce8:	4798      	blx	r3
    4cea:	e00c      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    4cec:	2101      	movs	r1, #1
    4cee:	47c0      	blx	r8
    4cf0:	e009      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    4cf2:	2101      	movs	r1, #1
    4cf4:	4b2d      	ldr	r3, [pc, #180]	; (4dac <_usb_d_dev_handler+0x27c>)
    4cf6:	4798      	blx	r3
    4cf8:	e005      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    4cfa:	2100      	movs	r1, #0
    4cfc:	47c0      	blx	r8
    4cfe:	e002      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4d00:	2100      	movs	r1, #0
    4d02:	4b29      	ldr	r3, [pc, #164]	; (4da8 <_usb_d_dev_handler+0x278>)
    4d04:	4798      	blx	r3
    4d06:	3401      	adds	r4, #1
    4d08:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4d0a:	2c1b      	cmp	r4, #27
    4d0c:	d042      	beq.n	4d94 <_usb_d_dev_handler+0x264>
    4d0e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    4d10:	7cab      	ldrb	r3, [r5, #18]
    4d12:	2bff      	cmp	r3, #255	; 0xff
    4d14:	d0f7      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    4d16:	f003 030f 	and.w	r3, r3, #15
    4d1a:	2101      	movs	r1, #1
    4d1c:	4099      	lsls	r1, r3
    4d1e:	4231      	tst	r1, r6
    4d20:	d0f1      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4d22:	0159      	lsls	r1, r3, #5
    4d24:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4d28:	f501 7180 	add.w	r1, r1, #256	; 0x100
    4d2c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4d2e:	015b      	lsls	r3, r3, #5
    4d30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d34:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4d38:	4019      	ands	r1, r3
    4d3a:	d0e4      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4d3c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4d40:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4d44:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    4d48:	f003 0247 	and.w	r2, r3, #71	; 0x47
    4d4c:	2a01      	cmp	r2, #1
    4d4e:	d0a1      	beq.n	4c94 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4d50:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d54:	d1b1      	bne.n	4cba <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4d56:	f011 0f20 	tst.w	r1, #32
    4d5a:	d1d1      	bne.n	4d00 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4d5c:	f011 0f04 	tst.w	r1, #4
    4d60:	d10e      	bne.n	4d80 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d62:	f011 0f01 	tst.w	r1, #1
    4d66:	d10e      	bne.n	4d86 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4d68:	f003 0307 	and.w	r3, r3, #7
    4d6c:	2b01      	cmp	r3, #1
    4d6e:	d1ca      	bne.n	4d06 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4d70:	f011 0f08 	tst.w	r1, #8
    4d74:	d10b      	bne.n	4d8e <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d76:	f011 0f10 	tst.w	r1, #16
    4d7a:	d0c4      	beq.n	4d06 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4d7c:	47c8      	blx	r9
    4d7e:	e7c2      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    4d80:	2100      	movs	r1, #0
    4d82:	47c0      	blx	r8
    4d84:	e7bf      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    4d86:	2101      	movs	r1, #1
    4d88:	4b09      	ldr	r3, [pc, #36]	; (4db0 <_usb_d_dev_handler+0x280>)
    4d8a:	4798      	blx	r3
    4d8c:	e7bb      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    4d8e:	2101      	movs	r1, #1
    4d90:	47c0      	blx	r8
    4d92:	e7b8      	b.n	4d06 <_usb_d_dev_handler+0x1d6>
    4d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d98:	20000998 	.word	0x20000998
    4d9c:	200008c4 	.word	0x200008c4
    4da0:	40001000 	.word	0x40001000
    4da4:	00004779 	.word	0x00004779
    4da8:	000045b1 	.word	0x000045b1
    4dac:	000047bd 	.word	0x000047bd
    4db0:	00004941 	.word	0x00004941
    4db4:	00004531 	.word	0x00004531
    4db8:	00004679 	.word	0x00004679

00004dbc <_usb_d_dev_init>:
{
    4dbc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4dbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dc2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4dc4:	f013 0f01 	tst.w	r3, #1
    4dc8:	d124      	bne.n	4e14 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4dca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4dce:	7893      	ldrb	r3, [r2, #2]
    4dd0:	f013 0f03 	tst.w	r3, #3
    4dd4:	d1fb      	bne.n	4dce <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4dd6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dda:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    4ddc:	f013 0f02 	tst.w	r3, #2
    4de0:	d00f      	beq.n	4e02 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4de2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4de6:	7813      	ldrb	r3, [r2, #0]
    4de8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4dec:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4dee:	7893      	ldrb	r3, [r2, #2]
    4df0:	f013 0f03 	tst.w	r3, #3
    4df4:	d1fb      	bne.n	4dee <_usb_d_dev_init+0x32>
    4df6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4dfa:	7893      	ldrb	r3, [r2, #2]
    4dfc:	f013 0f02 	tst.w	r3, #2
    4e00:	d1fb      	bne.n	4dfa <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4e02:	2201      	movs	r2, #1
    4e04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e08:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e0a:	461a      	mov	r2, r3
    4e0c:	7893      	ldrb	r3, [r2, #2]
    4e0e:	f013 0f03 	tst.w	r3, #3
    4e12:	d1fb      	bne.n	4e0c <_usb_d_dev_init+0x50>
    4e14:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e18:	7893      	ldrb	r3, [r2, #2]
    4e1a:	f013 0f01 	tst.w	r3, #1
    4e1e:	d1fb      	bne.n	4e18 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    4e20:	4b24      	ldr	r3, [pc, #144]	; (4eb4 <_usb_d_dev_init+0xf8>)
    4e22:	4a25      	ldr	r2, [pc, #148]	; (4eb8 <_usb_d_dev_init+0xfc>)
    4e24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    4e28:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    4e2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    4e30:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    4e34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    4e38:	4b20      	ldr	r3, [pc, #128]	; (4ebc <_usb_d_dev_init+0x100>)
    4e3a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4e3c:	4b20      	ldr	r3, [pc, #128]	; (4ec0 <_usb_d_dev_init+0x104>)
    4e3e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    4e40:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4e44:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    4e48:	f011 011f 	ands.w	r1, r1, #31
    4e4c:	d02b      	beq.n	4ea6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    4e4e:	291f      	cmp	r1, #31
    4e50:	bf08      	it	eq
    4e52:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4e54:	b34b      	cbz	r3, 4eaa <_usb_d_dev_init+0xee>
		pad_transp = 25;
    4e56:	2b1f      	cmp	r3, #31
    4e58:	bf08      	it	eq
    4e5a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    4e5c:	b33a      	cbz	r2, 4eae <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    4e5e:	2a07      	cmp	r2, #7
    4e60:	bf08      	it	eq
    4e62:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4e64:	f003 031f 	and.w	r3, r3, #31
    4e68:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    4e6c:	0312      	lsls	r2, r2, #12
    4e6e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    4e72:	4313      	orrs	r3, r2
    4e74:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e78:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4e7a:	78d3      	ldrb	r3, [r2, #3]
    4e7c:	f043 0303 	orr.w	r3, r3, #3
    4e80:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4e82:	78d3      	ldrb	r3, [r2, #3]
    4e84:	f043 030c 	orr.w	r3, r3, #12
    4e88:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4e8a:	2304      	movs	r3, #4
    4e8c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e8e:	7893      	ldrb	r3, [r2, #2]
    4e90:	f013 0f03 	tst.w	r3, #3
    4e94:	d1fb      	bne.n	4e8e <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4e96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e9a:	4a06      	ldr	r2, [pc, #24]	; (4eb4 <_usb_d_dev_init+0xf8>)
    4e9c:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4e9e:	2201      	movs	r2, #1
    4ea0:	811a      	strh	r2, [r3, #8]
}
    4ea2:	2000      	movs	r0, #0
    4ea4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    4ea6:	2109      	movs	r1, #9
    4ea8:	e7d4      	b.n	4e54 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    4eaa:	2319      	movs	r3, #25
    4eac:	e7d6      	b.n	4e5c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    4eae:	2206      	movs	r2, #6
    4eb0:	e7d8      	b.n	4e64 <_usb_d_dev_init+0xa8>
    4eb2:	bf00      	nop
    4eb4:	200008c4 	.word	0x200008c4
    4eb8:	0000452d 	.word	0x0000452d
    4ebc:	00004779 	.word	0x00004779
    4ec0:	00800084 	.word	0x00800084

00004ec4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4ec4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ec8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4eca:	f013 0f03 	tst.w	r3, #3
    4ece:	d129      	bne.n	4f24 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4ed0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ed4:	7893      	ldrb	r3, [r2, #2]
    4ed6:	f013 0f03 	tst.w	r3, #3
    4eda:	d1fb      	bne.n	4ed4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4edc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ee0:	781b      	ldrb	r3, [r3, #0]
    4ee2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4ee4:	f013 0f02 	tst.w	r3, #2
    4ee8:	d108      	bne.n	4efc <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4eea:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4eee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ef2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4ef4:	7893      	ldrb	r3, [r2, #2]
    4ef6:	f013 0f03 	tst.w	r3, #3
    4efa:	d1fb      	bne.n	4ef4 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4efc:	4b0b      	ldr	r3, [pc, #44]	; (4f2c <_usb_d_dev_enable+0x68>)
    4efe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4f02:	609a      	str	r2, [r3, #8]
    4f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4f08:	609a      	str	r2, [r3, #8]
    4f0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f0e:	609a      	str	r2, [r3, #8]
    4f10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f14:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4f16:	f240 228d 	movw	r2, #653	; 0x28d
    4f1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f1e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4f20:	2000      	movs	r0, #0
    4f22:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4f24:	f06f 0010 	mvn.w	r0, #16
}
    4f28:	4770      	bx	lr
    4f2a:	bf00      	nop
    4f2c:	e000e100 	.word	0xe000e100

00004f30 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4f30:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4f34:	8913      	ldrh	r3, [r2, #8]
    4f36:	f023 0301 	bic.w	r3, r3, #1
    4f3a:	041b      	lsls	r3, r3, #16
    4f3c:	0c1b      	lsrs	r3, r3, #16
    4f3e:	8113      	strh	r3, [r2, #8]
    4f40:	4770      	bx	lr

00004f42 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4f42:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4f46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f4a:	7298      	strb	r0, [r3, #10]
    4f4c:	4770      	bx	lr
	...

00004f50 <_usb_d_dev_ep_init>:
{
    4f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f52:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4f56:	f010 050f 	ands.w	r5, r0, #15
    4f5a:	d04d      	beq.n	4ff8 <_usb_d_dev_ep_init+0xa8>
    4f5c:	f1be 0f00 	cmp.w	lr, #0
    4f60:	bfb4      	ite	lt
    4f62:	1d6c      	addlt	r4, r5, #5
    4f64:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4f66:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4f6a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4f6c:	2d05      	cmp	r5, #5
    4f6e:	d947      	bls.n	5000 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4f70:	f06f 0011 	mvn.w	r0, #17
    4f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4f76:	f1be 0f00 	cmp.w	lr, #0
    4f7a:	db1b      	blt.n	4fb4 <_usb_d_dev_ep_init+0x64>
    4f7c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4f80:	4e37      	ldr	r6, [pc, #220]	; (5060 <_usb_d_dev_ep_init+0x110>)
    4f82:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4f86:	2d00      	cmp	r5, #0
    4f88:	d15e      	bne.n	5048 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4f8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4f8e:	4d34      	ldr	r5, [pc, #208]	; (5060 <_usb_d_dev_ep_init+0x110>)
    4f90:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4f94:	4d33      	ldr	r5, [pc, #204]	; (5064 <_usb_d_dev_ep_init+0x114>)
    4f96:	00a6      	lsls	r6, r4, #2
    4f98:	1933      	adds	r3, r6, r4
    4f9a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4f9e:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    4fa2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    4fa6:	3101      	adds	r1, #1
    4fa8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    4fac:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    4fb0:	2000      	movs	r0, #0
    4fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4fb4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fb8:	4e29      	ldr	r6, [pc, #164]	; (5060 <_usb_d_dev_ep_init+0x110>)
    4fba:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4fbe:	686d      	ldr	r5, [r5, #4]
    4fc0:	b935      	cbnz	r5, 4fd0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4fc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fc6:	4d26      	ldr	r5, [pc, #152]	; (5060 <_usb_d_dev_ep_init+0x110>)
    4fc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4fcc:	685f      	ldr	r7, [r3, #4]
    4fce:	e7e1      	b.n	4f94 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4fd0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fd4:	4e22      	ldr	r6, [pc, #136]	; (5060 <_usb_d_dev_ep_init+0x110>)
    4fd6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4fda:	896d      	ldrh	r5, [r5, #10]
    4fdc:	4295      	cmp	r5, r2
    4fde:	daf0      	bge.n	4fc2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4fe0:	f06f 0012 	mvn.w	r0, #18
    4fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4fe6:	f06f 0013 	mvn.w	r0, #19
    4fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4fec:	f06f 0013 	mvn.w	r0, #19
    4ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4ff2:	f06f 0012 	mvn.w	r0, #18
    4ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4ff8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4ffc:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4ffe:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5000:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    5004:	4f17      	ldr	r7, [pc, #92]	; (5064 <_usb_d_dev_ep_init+0x114>)
    5006:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    500a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    500e:	2eff      	cmp	r6, #255	; 0xff
    5010:	d1e9      	bne.n	4fe6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5012:	2900      	cmp	r1, #0
    5014:	d1af      	bne.n	4f76 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5016:	b125      	cbz	r5, 5022 <_usb_d_dev_ep_init+0xd2>
    5018:	f1be 0f00 	cmp.w	lr, #0
    501c:	bfa4      	itt	ge
    501e:	3505      	addge	r5, #5
    5020:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    5022:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5026:	4e0f      	ldr	r6, [pc, #60]	; (5064 <_usb_d_dev_ep_init+0x114>)
    5028:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    502c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    5030:	2dff      	cmp	r5, #255	; 0xff
    5032:	d1db      	bne.n	4fec <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    5034:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5038:	4e09      	ldr	r6, [pc, #36]	; (5060 <_usb_d_dev_ep_init+0x110>)
    503a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    503e:	2d00      	cmp	r5, #0
    5040:	d0d7      	beq.n	4ff2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5042:	f1be 0f00 	cmp.w	lr, #0
    5046:	dbb5      	blt.n	4fb4 <_usb_d_dev_ep_init+0x64>
    5048:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    504c:	4e04      	ldr	r6, [pc, #16]	; (5060 <_usb_d_dev_ep_init+0x110>)
    504e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5052:	892d      	ldrh	r5, [r5, #8]
    5054:	4295      	cmp	r5, r2
    5056:	da98      	bge.n	4f8a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    5058:	f06f 0012 	mvn.w	r0, #18
    505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    505e:	bf00      	nop
    5060:	00009750 	.word	0x00009750
    5064:	200008c4 	.word	0x200008c4

00005068 <_usb_d_dev_ep_deinit>:
{
    5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    506c:	f010 060f 	ands.w	r6, r0, #15
    5070:	d00e      	beq.n	5090 <_usb_d_dev_ep_deinit+0x28>
    5072:	2f00      	cmp	r7, #0
    5074:	bfb4      	ite	lt
    5076:	1d73      	addlt	r3, r6, #5
    5078:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    507a:	2e05      	cmp	r6, #5
    507c:	d900      	bls.n	5080 <_usb_d_dev_ep_deinit+0x18>
    507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    5080:	461d      	mov	r5, r3
    5082:	3301      	adds	r3, #1
    5084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5088:	4a24      	ldr	r2, [pc, #144]	; (511c <_usb_d_dev_ep_deinit+0xb4>)
    508a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    508e:	e002      	b.n	5096 <_usb_d_dev_ep_deinit+0x2e>
    5090:	f8df e094 	ldr.w	lr, [pc, #148]	; 5128 <_usb_d_dev_ep_deinit+0xc0>
    5094:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5096:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    509a:	4a21      	ldr	r2, [pc, #132]	; (5120 <_usb_d_dev_ep_deinit+0xb8>)
    509c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50a0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    50a4:	2aff      	cmp	r2, #255	; 0xff
    50a6:	d0ea      	beq.n	507e <_usb_d_dev_ep_deinit+0x16>
    50a8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    50aa:	2203      	movs	r2, #3
    50ac:	0ff9      	lsrs	r1, r7, #31
    50ae:	4670      	mov	r0, lr
    50b0:	4b1c      	ldr	r3, [pc, #112]	; (5124 <_usb_d_dev_ep_deinit+0xbc>)
    50b2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    50b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    50b8:	4a19      	ldr	r2, [pc, #100]	; (5120 <_usb_d_dev_ep_deinit+0xb8>)
    50ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50be:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    50c2:	f003 0307 	and.w	r3, r3, #7
    50c6:	2b01      	cmp	r3, #1
    50c8:	d016      	beq.n	50f8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    50ca:	2f00      	cmp	r7, #0
    50cc:	db1b      	blt.n	5106 <_usb_d_dev_ep_deinit+0x9e>
    50ce:	0160      	lsls	r0, r4, #5
    50d0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    50d4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    50d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    50dc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    50e0:	4b0f      	ldr	r3, [pc, #60]	; (5120 <_usb_d_dev_ep_deinit+0xb8>)
    50e2:	00aa      	lsls	r2, r5, #2
    50e4:	1951      	adds	r1, r2, r5
    50e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    50ea:	2000      	movs	r0, #0
    50ec:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    50f0:	22ff      	movs	r2, #255	; 0xff
    50f2:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    50f6:	e7c2      	b.n	507e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    50f8:	0160      	lsls	r0, r4, #5
    50fa:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    50fe:	2300      	movs	r3, #0
    5100:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    5104:	e7ec      	b.n	50e0 <_usb_d_dev_ep_deinit+0x78>
    5106:	0176      	lsls	r6, r6, #5
    5108:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    510c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5110:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5114:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    5118:	e7e2      	b.n	50e0 <_usb_d_dev_ep_deinit+0x78>
    511a:	bf00      	nop
    511c:	20000984 	.word	0x20000984
    5120:	200008c4 	.word	0x200008c4
    5124:	0000460d 	.word	0x0000460d
    5128:	20000998 	.word	0x20000998

0000512c <_usb_d_dev_ep_enable>:
{
    512c:	b4f0      	push	{r4, r5, r6, r7}
    512e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5130:	f010 000f 	ands.w	r0, r0, #15
    5134:	f000 80a7 	beq.w	5286 <_usb_d_dev_ep_enable+0x15a>
    5138:	2e00      	cmp	r6, #0
    513a:	bfb4      	ite	lt
    513c:	1d43      	addlt	r3, r0, #5
    513e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5140:	4605      	mov	r5, r0
    5142:	0142      	lsls	r2, r0, #5
    5144:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5148:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    514c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    514e:	2805      	cmp	r0, #5
    5150:	f240 80a0 	bls.w	5294 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    5154:	f06f 0011 	mvn.w	r0, #17
    5158:	e07d      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    515a:	f014 0f77 	tst.w	r4, #119	; 0x77
    515e:	f040 8089 	bne.w	5274 <_usb_d_dev_ep_enable+0x148>
    5162:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5166:	2111      	movs	r1, #17
    5168:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    516c:	4c9b      	ldr	r4, [pc, #620]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    516e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    5172:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    5176:	4c9a      	ldr	r4, [pc, #616]	; (53e0 <_usb_d_dev_ep_enable+0x2b4>)
    5178:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    517c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5180:	f200 80cd 	bhi.w	531e <_usb_d_dev_ep_enable+0x1f2>
    5184:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5188:	f200 8112 	bhi.w	53b0 <_usb_d_dev_ep_enable+0x284>
    518c:	2980      	cmp	r1, #128	; 0x80
    518e:	f200 8101 	bhi.w	5394 <_usb_d_dev_ep_enable+0x268>
    5192:	2940      	cmp	r1, #64	; 0x40
    5194:	f200 8113 	bhi.w	53be <_usb_d_dev_ep_enable+0x292>
    5198:	2920      	cmp	r1, #32
    519a:	f200 8102 	bhi.w	53a2 <_usb_d_dev_ep_enable+0x276>
    519e:	2910      	cmp	r1, #16
    51a0:	f200 8114 	bhi.w	53cc <_usb_d_dev_ep_enable+0x2a0>
    51a4:	2908      	cmp	r1, #8
    51a6:	bf94      	ite	ls
    51a8:	2600      	movls	r6, #0
    51aa:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51ac:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    51b0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51b2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    51b6:	e0b8      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    51b8:	f014 0f70 	tst.w	r4, #112	; 0x70
    51bc:	d15d      	bne.n	527a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    51be:	4e87      	ldr	r6, [pc, #540]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    51c0:	009f      	lsls	r7, r3, #2
    51c2:	18f9      	adds	r1, r7, r3
    51c4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    51c8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    51cc:	0109      	lsls	r1, r1, #4
    51ce:	f001 0170 	and.w	r1, r1, #112	; 0x70
    51d2:	430c      	orrs	r4, r1
    51d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    51d8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51dc:	443b      	add	r3, r7
    51de:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    51e2:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    51e6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    51ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    51ee:	d80f      	bhi.n	5210 <_usb_d_dev_ep_enable+0xe4>
    51f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    51f4:	d819      	bhi.n	522a <_usb_d_dev_ep_enable+0xfe>
    51f6:	2b80      	cmp	r3, #128	; 0x80
    51f8:	d819      	bhi.n	522e <_usb_d_dev_ep_enable+0x102>
    51fa:	2b40      	cmp	r3, #64	; 0x40
    51fc:	d819      	bhi.n	5232 <_usb_d_dev_ep_enable+0x106>
    51fe:	2b20      	cmp	r3, #32
    5200:	d819      	bhi.n	5236 <_usb_d_dev_ep_enable+0x10a>
    5202:	2b10      	cmp	r3, #16
    5204:	d819      	bhi.n	523a <_usb_d_dev_ep_enable+0x10e>
    5206:	2b08      	cmp	r3, #8
    5208:	bf94      	ite	ls
    520a:	2300      	movls	r3, #0
    520c:	2301      	movhi	r3, #1
    520e:	e000      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    5210:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5212:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    5216:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5218:	2380      	movs	r3, #128	; 0x80
    521a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    521e:	4b6f      	ldr	r3, [pc, #444]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    5220:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5224:	2000      	movs	r0, #0
    5226:	76a8      	strb	r0, [r5, #26]
    5228:	e015      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    522a:	2306      	movs	r3, #6
    522c:	e7f1      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    522e:	2305      	movs	r3, #5
    5230:	e7ef      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    5232:	2304      	movs	r3, #4
    5234:	e7ed      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    5236:	2303      	movs	r3, #3
    5238:	e7eb      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    523a:	2302      	movs	r3, #2
    523c:	e7e9      	b.n	5212 <_usb_d_dev_ep_enable+0xe6>
    523e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5240:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5244:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5246:	2340      	movs	r3, #64	; 0x40
    5248:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    524c:	4b63      	ldr	r3, [pc, #396]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    524e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5252:	2000      	movs	r0, #0
    5254:	72a8      	strb	r0, [r5, #10]
}
    5256:	bcf0      	pop	{r4, r5, r6, r7}
    5258:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    525a:	2106      	movs	r1, #6
    525c:	e7f0      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
    525e:	2105      	movs	r1, #5
    5260:	e7ee      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
    5262:	2104      	movs	r1, #4
    5264:	e7ec      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
    5266:	2103      	movs	r1, #3
    5268:	e7ea      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
    526a:	2102      	movs	r1, #2
    526c:	e7e8      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    526e:	f06f 0011 	mvn.w	r0, #17
    5272:	e7f0      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5274:	f06f 0013 	mvn.w	r0, #19
    5278:	e7ed      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    527a:	f06f 0013 	mvn.w	r0, #19
    527e:	e7ea      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5280:	f06f 0013 	mvn.w	r0, #19
    5284:	e7e7      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5286:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    528a:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    528e:	b2e4      	uxtb	r4, r4
    5290:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    5292:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5294:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5298:	4950      	ldr	r1, [pc, #320]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    529a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    529e:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    52a2:	2aff      	cmp	r2, #255	; 0xff
    52a4:	d0e3      	beq.n	526e <_usb_d_dev_ep_enable+0x142>
    52a6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    52a8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    52aa:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    52ae:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    52b2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52b6:	f001 0107 	and.w	r1, r1, #7
    52ba:	2901      	cmp	r1, #1
    52bc:	f43f af4d 	beq.w	515a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    52c0:	2e00      	cmp	r6, #0
    52c2:	f6ff af79 	blt.w	51b8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    52c6:	f014 0f07 	tst.w	r4, #7
    52ca:	d1d9      	bne.n	5280 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    52cc:	4e43      	ldr	r6, [pc, #268]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    52ce:	009f      	lsls	r7, r3, #2
    52d0:	18f9      	adds	r1, r7, r3
    52d2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    52d6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52da:	f001 0107 	and.w	r1, r1, #7
    52de:	430c      	orrs	r4, r1
    52e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    52e4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    52e8:	443b      	add	r3, r7
    52ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    52ee:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    52f2:	4b3b      	ldr	r3, [pc, #236]	; (53e0 <_usb_d_dev_ep_enable+0x2b4>)
    52f4:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    52f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    52fc:	d89f      	bhi.n	523e <_usb_d_dev_ep_enable+0x112>
    52fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5302:	d8aa      	bhi.n	525a <_usb_d_dev_ep_enable+0x12e>
    5304:	2980      	cmp	r1, #128	; 0x80
    5306:	d8aa      	bhi.n	525e <_usb_d_dev_ep_enable+0x132>
    5308:	2940      	cmp	r1, #64	; 0x40
    530a:	d8aa      	bhi.n	5262 <_usb_d_dev_ep_enable+0x136>
    530c:	2920      	cmp	r1, #32
    530e:	d8aa      	bhi.n	5266 <_usb_d_dev_ep_enable+0x13a>
    5310:	2910      	cmp	r1, #16
    5312:	d8aa      	bhi.n	526a <_usb_d_dev_ep_enable+0x13e>
    5314:	2908      	cmp	r1, #8
    5316:	bf94      	ite	ls
    5318:	2100      	movls	r1, #0
    531a:	2101      	movhi	r1, #1
    531c:	e790      	b.n	5240 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    531e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5322:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5324:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5328:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    532a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    532e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5330:	2640      	movs	r6, #64	; 0x40
    5332:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5336:	2180      	movs	r1, #128	; 0x80
    5338:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    533c:	4f27      	ldr	r7, [pc, #156]	; (53dc <_usb_d_dev_ep_enable+0x2b0>)
    533e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    5342:	2000      	movs	r0, #0
    5344:	72a8      	strb	r0, [r5, #10]
    5346:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5348:	009c      	lsls	r4, r3, #2
    534a:	18e1      	adds	r1, r4, r3
    534c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    5350:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    5354:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5358:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    535c:	0152      	lsls	r2, r2, #5
    535e:	18b9      	adds	r1, r7, r2
    5360:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5362:	4423      	add	r3, r4
    5364:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5368:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    536c:	684b      	ldr	r3, [r1, #4]
    536e:	f364 339b 	bfi	r3, r4, #14, #14
    5372:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5374:	684b      	ldr	r3, [r1, #4]
    5376:	f360 030d 	bfi	r3, r0, #0, #14
    537a:	604b      	str	r3, [r1, #4]
    537c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    5380:	21b0      	movs	r1, #176	; 0xb0
    5382:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5386:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    538a:	461a      	mov	r2, r3
    538c:	2310      	movs	r3, #16
    538e:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    5392:	e760      	b.n	5256 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5394:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5398:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    539a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    539e:	2605      	movs	r6, #5
    53a0:	e7c3      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53a2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53a6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53a8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53ac:	2603      	movs	r6, #3
    53ae:	e7bc      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53b0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53b4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53b6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53ba:	2606      	movs	r6, #6
    53bc:	e7b5      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53be:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53c2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53c4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53c8:	2604      	movs	r6, #4
    53ca:	e7ae      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53cc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53d0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53d2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53d6:	2602      	movs	r6, #2
    53d8:	e7a7      	b.n	532a <_usb_d_dev_ep_enable+0x1fe>
    53da:	bf00      	nop
    53dc:	200008c4 	.word	0x200008c4
    53e0:	0fffc000 	.word	0x0fffc000

000053e4 <_usb_d_dev_ep_stall>:
{
    53e4:	b470      	push	{r4, r5, r6}
    53e6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    53e8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    53ea:	f010 000f 	ands.w	r0, r0, #15
    53ee:	d008      	beq.n	5402 <_usb_d_dev_ep_stall+0x1e>
    53f0:	2b00      	cmp	r3, #0
    53f2:	bfb4      	ite	lt
    53f4:	1d43      	addlt	r3, r0, #5
    53f6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    53f8:	2805      	cmp	r0, #5
    53fa:	d903      	bls.n	5404 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    53fc:	f06f 0011 	mvn.w	r0, #17
    5400:	e018      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    5402:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    5404:	2901      	cmp	r1, #1
    5406:	d017      	beq.n	5438 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    5408:	2900      	cmp	r1, #0
    540a:	d03a      	beq.n	5482 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    540c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5410:	4a45      	ldr	r2, [pc, #276]	; (5528 <_usb_d_dev_ep_stall+0x144>)
    5412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5416:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    541a:	f003 030f 	and.w	r3, r3, #15
    541e:	015b      	lsls	r3, r3, #5
    5420:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5424:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5428:	2310      	movs	r3, #16
    542a:	40a3      	lsls	r3, r4
    542c:	421a      	tst	r2, r3
    542e:	bf14      	ite	ne
    5430:	2001      	movne	r0, #1
    5432:	2000      	moveq	r0, #0
}
    5434:	bc70      	pop	{r4, r5, r6}
    5436:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5438:	2510      	movs	r5, #16
    543a:	40a5      	lsls	r5, r4
    543c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    543e:	493a      	ldr	r1, [pc, #232]	; (5528 <_usb_d_dev_ep_stall+0x144>)
    5440:	009e      	lsls	r6, r3, #2
    5442:	18f2      	adds	r2, r6, r3
    5444:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5448:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    544c:	f002 020f 	and.w	r2, r2, #15
    5450:	0150      	lsls	r0, r2, #5
    5452:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5456:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    545a:	2020      	movs	r0, #32
    545c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5460:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5462:	0152      	lsls	r2, r2, #5
    5464:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5468:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    546c:	4433      	add	r3, r6
    546e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5472:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5476:	f042 0208 	orr.w	r2, r2, #8
    547a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    547e:	2000      	movs	r0, #0
    5480:	e7d8      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    5482:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5486:	4928      	ldr	r1, [pc, #160]	; (5528 <_usb_d_dev_ep_stall+0x144>)
    5488:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    548c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    5490:	f002 020f 	and.w	r2, r2, #15
    5494:	0151      	lsls	r1, r2, #5
    5496:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    549a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    549e:	2010      	movs	r0, #16
    54a0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    54a2:	4205      	tst	r5, r0
    54a4:	d03c      	beq.n	5520 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    54a6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54a8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    54ac:	2020      	movs	r0, #32
    54ae:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    54b0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    54b2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    54b6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    54ba:	4202      	tst	r2, r0
    54bc:	d007      	beq.n	54ce <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    54be:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    54c2:	2201      	movs	r2, #1
    54c4:	fa02 f404 	lsl.w	r4, r2, r4
    54c8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54ca:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    54ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    54d2:	4815      	ldr	r0, [pc, #84]	; (5528 <_usb_d_dev_ep_stall+0x144>)
    54d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    54d8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    54dc:	f002 0207 	and.w	r2, r2, #7
    54e0:	2a01      	cmp	r2, #1
    54e2:	d00c      	beq.n	54fe <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    54e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    54e8:	4a0f      	ldr	r2, [pc, #60]	; (5528 <_usb_d_dev_ep_stall+0x144>)
    54ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    54ee:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    54f2:	f36f 02c3 	bfc	r2, #3, #1
    54f6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    54fa:	2000      	movs	r0, #0
    54fc:	e79a      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    54fe:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5502:	f012 0f30 	tst.w	r2, #48	; 0x30
    5506:	d10d      	bne.n	5524 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    5508:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    550c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5510:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5514:	f36f 02c3 	bfc	r2, #3, #1
    5518:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    551c:	2000      	movs	r0, #0
    551e:	e789      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
    5520:	2000      	movs	r0, #0
    5522:	e787      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
    5524:	2000      	movs	r0, #0
    5526:	e785      	b.n	5434 <_usb_d_dev_ep_stall+0x50>
    5528:	200008c4 	.word	0x200008c4

0000552c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    552c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    552e:	f000 040f 	and.w	r4, r0, #15
    5532:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5534:	4a14      	ldr	r2, [pc, #80]	; (5588 <_usb_d_dev_ep_read_req+0x5c>)
    5536:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    5538:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    553a:	6840      	ldr	r0, [r0, #4]
    553c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5540:	2c05      	cmp	r4, #5
    5542:	d817      	bhi.n	5574 <_usb_d_dev_ep_read_req+0x48>
    5544:	b1c9      	cbz	r1, 557a <_usb_d_dev_ep_read_req+0x4e>
    5546:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    554a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    554e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5550:	2a11      	cmp	r2, #17
    5552:	d115      	bne.n	5580 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5554:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5558:	f012 0f10 	tst.w	r2, #16
    555c:	d102      	bne.n	5564 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    555e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5560:	bc30      	pop	{r4, r5}
    5562:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5564:	682c      	ldr	r4, [r5, #0]
    5566:	686a      	ldr	r2, [r5, #4]
    5568:	600c      	str	r4, [r1, #0]
    556a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    556c:	2210      	movs	r2, #16
    556e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5572:	e7f5      	b.n	5560 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5574:	f06f 0011 	mvn.w	r0, #17
    5578:	e7f2      	b.n	5560 <_usb_d_dev_ep_read_req+0x34>
    557a:	f06f 0011 	mvn.w	r0, #17
    557e:	e7ef      	b.n	5560 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5580:	f06f 0012 	mvn.w	r0, #18
    5584:	e7ec      	b.n	5560 <_usb_d_dev_ep_read_req+0x34>
    5586:	bf00      	nop
    5588:	200008c4 	.word	0x200008c4

0000558c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5590:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5592:	7a03      	ldrb	r3, [r0, #8]
    5594:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5596:	f013 030f 	ands.w	r3, r3, #15
    559a:	f000 80c2 	beq.w	5722 <_usb_d_dev_ep_trans+0x196>
    559e:	2e00      	cmp	r6, #0
    55a0:	bfb4      	ite	lt
    55a2:	1d5a      	addlt	r2, r3, #5
    55a4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    55a6:	4614      	mov	r4, r2
    55a8:	4969      	ldr	r1, [pc, #420]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    55aa:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    55ae:	1c55      	adds	r5, r2, #1
    55b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    55b4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    55b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    55bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    55c0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    55c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    55c8:	428a      	cmp	r2, r1
    55ca:	d025      	beq.n	5618 <_usb_d_dev_ep_trans+0x8c>
    55cc:	1e55      	subs	r5, r2, #1
    55ce:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    55d0:	6841      	ldr	r1, [r0, #4]
    55d2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    55d4:	2b05      	cmp	r3, #5
    55d6:	f200 8092 	bhi.w	56fe <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    55da:	6803      	ldr	r3, [r0, #0]
    55dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    55e0:	d31c      	bcc.n	561c <_usb_d_dev_ep_trans+0x90>
    55e2:	eb03 0c01 	add.w	ip, r3, r1
    55e6:	f8df e180 	ldr.w	lr, [pc, #384]	; 5768 <_usb_d_dev_ep_trans+0x1dc>
    55ea:	45f4      	cmp	ip, lr
    55ec:	d816      	bhi.n	561c <_usb_d_dev_ep_trans+0x90>
    55ee:	f013 0f03 	tst.w	r3, #3
    55f2:	d113      	bne.n	561c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    55f4:	2e00      	cmp	r6, #0
    55f6:	db2a      	blt.n	564e <_usb_d_dev_ep_trans+0xc2>
    55f8:	428a      	cmp	r2, r1
    55fa:	f200 809c 	bhi.w	5736 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    55fe:	b34d      	cbz	r5, 5654 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5600:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5604:	4a52      	ldr	r2, [pc, #328]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    5606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    560a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    560e:	2b00      	cmp	r3, #0
    5610:	d07b      	beq.n	570a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5612:	f04f 0800 	mov.w	r8, #0
    5616:	e00c      	b.n	5632 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5618:	4615      	mov	r5, r2
    561a:	e7d9      	b.n	55d0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    561c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5620:	4a4b      	ldr	r2, [pc, #300]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    5622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    562a:	2b00      	cmp	r3, #0
    562c:	d06a      	beq.n	5704 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    562e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5632:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5636:	4a46      	ldr	r2, [pc, #280]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    5638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    563c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5640:	f013 0f08 	tst.w	r3, #8
    5644:	d009      	beq.n	565a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    5646:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5648:	b003      	add	sp, #12
    564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    564e:	f04f 0800 	mov.w	r8, #0
    5652:	e7ee      	b.n	5632 <_usb_d_dev_ep_trans+0xa6>
    5654:	f04f 0800 	mov.w	r8, #0
    5658:	e7eb      	b.n	5632 <_usb_d_dev_ep_trans+0xa6>
    565a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    565c:	a801      	add	r0, sp, #4
    565e:	4b3d      	ldr	r3, [pc, #244]	; (5754 <_usb_d_dev_ep_trans+0x1c8>)
    5660:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5662:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5666:	4a3a      	ldr	r2, [pc, #232]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    5668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    566c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5670:	f013 0f40 	tst.w	r3, #64	; 0x40
    5674:	d13c      	bne.n	56f0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5676:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    567a:	4b35      	ldr	r3, [pc, #212]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    567c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5680:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5688:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    568c:	a801      	add	r0, sp, #4
    568e:	4b32      	ldr	r3, [pc, #200]	; (5758 <_usb_d_dev_ep_trans+0x1cc>)
    5690:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5692:	f8da 3000 	ldr.w	r3, [sl]
    5696:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    569a:	f8da 3004 	ldr.w	r3, [sl, #4]
    569e:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    56a2:	2300      	movs	r3, #0
    56a4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    56a8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    56aa:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    56ae:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    56b2:	f368 1345 	bfi	r3, r8, #5, #1
    56b6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    56ba:	f89a 3009 	ldrb.w	r3, [sl, #9]
    56be:	b1e3      	cbz	r3, 56fa <_usb_d_dev_ep_trans+0x16e>
    56c0:	fab5 f585 	clz	r5, r5
    56c4:	096d      	lsrs	r5, r5, #5
    56c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    56ca:	4b21      	ldr	r3, [pc, #132]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    56cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    56d0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    56d4:	f365 1304 	bfi	r3, r5, #4, #1
    56d8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    56dc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    56de:	f04f 0100 	mov.w	r1, #0
    56e2:	4638      	mov	r0, r7
    56e4:	bfb4      	ite	lt
    56e6:	4b1d      	ldrlt	r3, [pc, #116]	; (575c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    56e8:	4b1d      	ldrge	r3, [pc, #116]	; (5760 <_usb_d_dev_ep_trans+0x1d4>)
    56ea:	4798      	blx	r3
	return ERR_NONE;
    56ec:	2000      	movs	r0, #0
    56ee:	e7ab      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    56f0:	a801      	add	r0, sp, #4
    56f2:	4b19      	ldr	r3, [pc, #100]	; (5758 <_usb_d_dev_ep_trans+0x1cc>)
    56f4:	4798      	blx	r3
		return USB_BUSY;
    56f6:	2001      	movs	r0, #1
    56f8:	e7a6      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
    56fa:	2500      	movs	r5, #0
    56fc:	e7e3      	b.n	56c6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    56fe:	f06f 0011 	mvn.w	r0, #17
    5702:	e7a1      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5704:	f06f 0012 	mvn.w	r0, #18
    5708:	e79e      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    570a:	f06f 0011 	mvn.w	r0, #17
    570e:	e79b      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5710:	f06f 0012 	mvn.w	r0, #18
    5714:	e798      	b.n	5648 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    5716:	6841      	ldr	r1, [r0, #4]
    5718:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    571c:	4f11      	ldr	r7, [pc, #68]	; (5764 <_usb_d_dev_ep_trans+0x1d8>)
    571e:	2400      	movs	r4, #0
    5720:	e75b      	b.n	55da <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5722:	4a0b      	ldr	r2, [pc, #44]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    5724:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5728:	f240 31ff 	movw	r1, #1023	; 0x3ff
    572c:	428a      	cmp	r2, r1
    572e:	d0f2      	beq.n	5716 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5730:	4f0c      	ldr	r7, [pc, #48]	; (5764 <_usb_d_dev_ep_trans+0x1d8>)
    5732:	2400      	movs	r4, #0
    5734:	e74a      	b.n	55cc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    5736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    573a:	4a05      	ldr	r2, [pc, #20]	; (5750 <_usb_d_dev_ep_trans+0x1c4>)
    573c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5744:	2b00      	cmp	r3, #0
    5746:	d0e3      	beq.n	5710 <_usb_d_dev_ep_trans+0x184>
    5748:	f04f 0801 	mov.w	r8, #1
    574c:	e771      	b.n	5632 <_usb_d_dev_ep_trans+0xa6>
    574e:	bf00      	nop
    5750:	200008c4 	.word	0x200008c4
    5754:	00001255 	.word	0x00001255
    5758:	00001263 	.word	0x00001263
    575c:	000047bd 	.word	0x000047bd
    5760:	00004941 	.word	0x00004941
    5764:	20000998 	.word	0x20000998
    5768:	20041fff 	.word	0x20041fff

0000576c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    576c:	4b07      	ldr	r3, [pc, #28]	; (578c <_usb_d_dev_register_callback+0x20>)
    576e:	2900      	cmp	r1, #0
    5770:	bf08      	it	eq
    5772:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5774:	2801      	cmp	r0, #1
    5776:	d004      	beq.n	5782 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5778:	b910      	cbnz	r0, 5780 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    577a:	4b05      	ldr	r3, [pc, #20]	; (5790 <_usb_d_dev_register_callback+0x24>)
    577c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    5780:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5782:	4b03      	ldr	r3, [pc, #12]	; (5790 <_usb_d_dev_register_callback+0x24>)
    5784:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    5788:	4770      	bx	lr
    578a:	bf00      	nop
    578c:	0000452d 	.word	0x0000452d
    5790:	200008c4 	.word	0x200008c4

00005794 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5794:	4b0a      	ldr	r3, [pc, #40]	; (57c0 <_usb_d_dev_register_ep_callback+0x2c>)
    5796:	2900      	cmp	r1, #0
    5798:	bf08      	it	eq
    579a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    579c:	4603      	mov	r3, r0
    579e:	b138      	cbz	r0, 57b0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    57a0:	2801      	cmp	r0, #1
    57a2:	d009      	beq.n	57b8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    57a4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    57a6:	bf04      	itt	eq
    57a8:	4b06      	ldreq	r3, [pc, #24]	; (57c4 <_usb_d_dev_register_ep_callback+0x30>)
    57aa:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    57ae:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    57b0:	4b04      	ldr	r3, [pc, #16]	; (57c4 <_usb_d_dev_register_ep_callback+0x30>)
    57b2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    57b6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    57b8:	4b02      	ldr	r3, [pc, #8]	; (57c4 <_usb_d_dev_register_ep_callback+0x30>)
    57ba:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    57be:	4770      	bx	lr
    57c0:	0000452d 	.word	0x0000452d
    57c4:	200008c4 	.word	0x200008c4

000057c8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    57c8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57ca:	4b01      	ldr	r3, [pc, #4]	; (57d0 <USB_0_Handler+0x8>)
    57cc:	4798      	blx	r3
    57ce:	bd08      	pop	{r3, pc}
    57d0:	00004b31 	.word	0x00004b31

000057d4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    57d4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57d6:	4b01      	ldr	r3, [pc, #4]	; (57dc <USB_1_Handler+0x8>)
    57d8:	4798      	blx	r3
    57da:	bd08      	pop	{r3, pc}
    57dc:	00004b31 	.word	0x00004b31

000057e0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    57e0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57e2:	4b01      	ldr	r3, [pc, #4]	; (57e8 <USB_2_Handler+0x8>)
    57e4:	4798      	blx	r3
    57e6:	bd08      	pop	{r3, pc}
    57e8:	00004b31 	.word	0x00004b31

000057ec <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    57ec:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57ee:	4b01      	ldr	r3, [pc, #4]	; (57f4 <USB_3_Handler+0x8>)
    57f0:	4798      	blx	r3
    57f2:	bd08      	pop	{r3, pc}
    57f4:	00004b31 	.word	0x00004b31

000057f8 <convert_cb_ADC_0>:
volatile static uint8_t ADC_0_conversion_ready = 0;
volatile static uint8_t ADC_1_conversion_ready = 0;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	ADC_0_conversion_ready = 1;
    57f8:	2201      	movs	r2, #1
    57fa:	4b01      	ldr	r3, [pc, #4]	; (5800 <convert_cb_ADC_0+0x8>)
    57fc:	701a      	strb	r2, [r3, #0]
    57fe:	4770      	bx	lr
    5800:	20000c3c 	.word	0x20000c3c

00005804 <tx_complete_cb_GRID_LED>:


// DMA SPI CALLBACK
static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
{
	dma_spi_done = 1;
    5804:	2201      	movs	r2, #1
    5806:	4b01      	ldr	r3, [pc, #4]	; (580c <tx_complete_cb_GRID_LED+0x8>)
    5808:	605a      	str	r2, [r3, #4]
    580a:	4770      	bx	lr
    580c:	20000c3c 	.word	0x20000c3c

00005810 <RTC_Scheduler_tick_cb>:

volatile uint32_t realtime = 0; 

static void RTC_Scheduler_tick_cb(const struct timer_task *const timer_task)
{
	realtime++;
    5810:	4b05      	ldr	r3, [pc, #20]	; (5828 <RTC_Scheduler_tick_cb+0x18>)
    5812:	689a      	ldr	r2, [r3, #8]
    5814:	3201      	adds	r2, #1
    5816:	609a      	str	r2, [r3, #8]
	task_counter[task_current]++;
    5818:	7b1a      	ldrb	r2, [r3, #12]
    581a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    581e:	691a      	ldr	r2, [r3, #16]
    5820:	3201      	adds	r2, #1
    5822:	611a      	str	r2, [r3, #16]
    5824:	4770      	bx	lr
    5826:	bf00      	nop
    5828:	20000c3c 	.word	0x20000c3c

0000582c <RTC_Scheduler_report_cb>:
}

 static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
 {
 if (reportflag<255) reportflag++;
    582c:	4b06      	ldr	r3, [pc, #24]	; (5848 <RTC_Scheduler_report_cb+0x1c>)
    582e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    5832:	b2db      	uxtb	r3, r3
    5834:	2bff      	cmp	r3, #255	; 0xff
    5836:	d006      	beq.n	5846 <RTC_Scheduler_report_cb+0x1a>
    5838:	4a03      	ldr	r2, [pc, #12]	; (5848 <RTC_Scheduler_report_cb+0x1c>)
    583a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    583e:	3301      	adds	r3, #1
    5840:	b2db      	uxtb	r3, r3
    5842:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    5846:	4770      	bx	lr
    5848:	20000c3c 	.word	0x20000c3c

0000584c <RTC_Scheduler_task2_cb>:
 }

static void RTC_Scheduler_task2_cb(const struct timer_task *const timer_task)
{
	if (task2flag<255) task2flag++;
    584c:	4b06      	ldr	r3, [pc, #24]	; (5868 <RTC_Scheduler_task2_cb+0x1c>)
    584e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5852:	b2db      	uxtb	r3, r3
    5854:	2bff      	cmp	r3, #255	; 0xff
    5856:	d006      	beq.n	5866 <RTC_Scheduler_task2_cb+0x1a>
    5858:	4a03      	ldr	r2, [pc, #12]	; (5868 <RTC_Scheduler_task2_cb+0x1c>)
    585a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
    585e:	3301      	adds	r3, #1
    5860:	b2db      	uxtb	r3, r3
    5862:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
    5866:	4770      	bx	lr
    5868:	20000c3c 	.word	0x20000c3c

0000586c <RTC_Scheduler_ping_cb>:
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    586c:	2201      	movs	r2, #1
    586e:	4b02      	ldr	r3, [pc, #8]	; (5878 <RTC_Scheduler_ping_cb+0xc>)
    5870:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    5874:	4770      	bx	lr
    5876:	bf00      	nop
    5878:	20000c3c 	.word	0x20000c3c

0000587c <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    587c:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    587e:	4d0d      	ldr	r5, [pc, #52]	; (58b4 <grid_led_set_color+0x38>)
    5880:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    5882:	4285      	cmp	r5, r0
    5884:	d802      	bhi.n	588c <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    5886:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    5888:	bc30      	pop	{r4, r5}
    588a:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    588c:	4c09      	ldr	r4, [pc, #36]	; (58b4 <grid_led_set_color+0x38>)
    588e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    5890:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5894:	0080      	lsls	r0, r0, #2
    5896:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    589a:	6c52      	ldr	r2, [r2, #68]	; 0x44
    589c:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    589e:	4428      	add	r0, r5
    58a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    58a4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    58a6:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    58a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    58ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
    58ae:	6083      	str	r3, [r0, #8]
		return 0;
    58b0:	2000      	movs	r0, #0
    58b2:	e7e9      	b.n	5888 <grid_led_set_color+0xc>
    58b4:	20000c3c 	.word	0x20000c3c

000058b8 <grid_led_tick>:
/** ================== ANIMATION ==================  */




void grid_led_tick(void){
    58b8:	b470      	push	{r4, r5, r6}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<led_number; j++){
    58ba:	4b10      	ldr	r3, [pc, #64]	; (58fc <grid_led_tick+0x44>)
    58bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    58be:	b1dc      	cbz	r4, 58f8 <grid_led_tick+0x40>
					
		uint8_t num = j;
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			led_smart_buffer[num+(led_number*layer)].pha += led_smart_buffer[num+(led_number*layer)].fre; //PHASE + = FREQUENCY		
    58c0:	4b0f      	ldr	r3, [pc, #60]	; (5900 <grid_led_tick+0x48>)
    58c2:	681d      	ldr	r5, [r3, #0]
    58c4:	2300      	movs	r3, #0
    58c6:	4619      	mov	r1, r3
    58c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    58d0:	442a      	add	r2, r5
    58d2:	7b10      	ldrb	r0, [r2, #12]
    58d4:	7ad6      	ldrb	r6, [r2, #11]
    58d6:	4430      	add	r0, r6
    58d8:	72d0      	strb	r0, [r2, #11]
    58da:	4423      	add	r3, r4
    58dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    58e4:	442b      	add	r3, r5
    58e6:	7ada      	ldrb	r2, [r3, #11]
    58e8:	7b18      	ldrb	r0, [r3, #12]
    58ea:	4402      	add	r2, r0
    58ec:	72da      	strb	r2, [r3, #11]
	for (uint8_t j=0; j<led_number; j++){
    58ee:	3101      	adds	r1, #1
    58f0:	b2c9      	uxtb	r1, r1
    58f2:	460b      	mov	r3, r1
    58f4:	42a1      	cmp	r1, r4
    58f6:	d3e7      	bcc.n	58c8 <grid_led_tick+0x10>
		}	
	}
	/** END */
	
}
    58f8:	bc70      	pop	{r4, r5, r6}
    58fa:	4770      	bx	lr
    58fc:	20000c3c 	.word	0x20000c3c
    5900:	20001ba4 	.word	0x20001ba4

00005904 <grid_led_set_min>:



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5904:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_min.r = r;
    5906:	4c0b      	ldr	r4, [pc, #44]	; (5934 <grid_led_set_min+0x30>)
    5908:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    590a:	fb04 0101 	mla	r1, r4, r1, r0
    590e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    5912:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5916:	4808      	ldr	r0, [pc, #32]	; (5938 <grid_led_set_min+0x34>)
    5918:	6804      	ldr	r4, [r0, #0]
    591a:	5462      	strb	r2, [r4, r1]
	led_smart_buffer[num+(led_number*layer)].color_min.g = g;
    591c:	6802      	ldr	r2, [r0, #0]
    591e:	440a      	add	r2, r1
    5920:	7053      	strb	r3, [r2, #1]
	led_smart_buffer[num+(led_number*layer)].color_min.b = b;	
    5922:	6800      	ldr	r0, [r0, #0]
    5924:	4401      	add	r1, r0
    5926:	f89d 3004 	ldrb.w	r3, [sp, #4]
    592a:	708b      	strb	r3, [r1, #2]
}
    592c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5930:	4770      	bx	lr
    5932:	bf00      	nop
    5934:	20000c3c 	.word	0x20000c3c
    5938:	20001ba4 	.word	0x20001ba4

0000593c <grid_led_set_mid>:

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    593c:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_mid.r = r;
    593e:	4c0a      	ldr	r4, [pc, #40]	; (5968 <grid_led_set_mid+0x2c>)
    5940:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    5942:	fb04 0101 	mla	r1, r4, r1, r0
    5946:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    594a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    594e:	4c07      	ldr	r4, [pc, #28]	; (596c <grid_led_set_mid+0x30>)
    5950:	6820      	ldr	r0, [r4, #0]
    5952:	4408      	add	r0, r1
    5954:	70c2      	strb	r2, [r0, #3]
	led_smart_buffer[num+(led_number*layer)].color_mid.g = g;
    5956:	6820      	ldr	r0, [r4, #0]
    5958:	4401      	add	r1, r0
    595a:	710b      	strb	r3, [r1, #4]
	led_smart_buffer[num+(led_number*layer)].color_mid.b = b;	
    595c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5960:	714b      	strb	r3, [r1, #5]
}
    5962:	f85d 4b04 	ldr.w	r4, [sp], #4
    5966:	4770      	bx	lr
    5968:	20000c3c 	.word	0x20000c3c
    596c:	20001ba4 	.word	0x20001ba4

00005970 <grid_led_set_max>:

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5970:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_max.r = r;
    5972:	4c09      	ldr	r4, [pc, #36]	; (5998 <grid_led_set_max+0x28>)
    5974:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    5976:	fb04 0101 	mla	r1, r4, r1, r0
    597a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    597e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5982:	4806      	ldr	r0, [pc, #24]	; (599c <grid_led_set_max+0x2c>)
    5984:	6800      	ldr	r0, [r0, #0]
    5986:	4401      	add	r1, r0
    5988:	718a      	strb	r2, [r1, #6]
	led_smart_buffer[num+(led_number*layer)].color_max.g = g;
    598a:	71cb      	strb	r3, [r1, #7]
	led_smart_buffer[num+(led_number*layer)].color_max.b = b;	
    598c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5990:	720b      	strb	r3, [r1, #8]
}
    5992:	f85d 4b04 	ldr.w	r4, [sp], #4
    5996:	4770      	bx	lr
    5998:	20000c3c 	.word	0x20000c3c
    599c:	20001ba4 	.word	0x20001ba4

000059a0 <grid_led_set_phase>:

void grid_led_set_phase(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].pha = val;
    59a0:	4b06      	ldr	r3, [pc, #24]	; (59bc <grid_led_set_phase+0x1c>)
    59a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59a4:	fb03 0101 	mla	r1, r3, r1, r0
    59a8:	4b05      	ldr	r3, [pc, #20]	; (59c0 <grid_led_set_phase+0x20>)
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59b4:	4419      	add	r1, r3
    59b6:	72ca      	strb	r2, [r1, #11]
    59b8:	4770      	bx	lr
    59ba:	bf00      	nop
    59bc:	20000c3c 	.word	0x20000c3c
    59c0:	20001ba4 	.word	0x20001ba4

000059c4 <grid_led_set_frequency>:
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].fre = val;
    59c4:	4b06      	ldr	r3, [pc, #24]	; (59e0 <grid_led_set_frequency+0x1c>)
    59c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59c8:	fb03 0101 	mla	r1, r3, r1, r0
    59cc:	4b05      	ldr	r3, [pc, #20]	; (59e4 <grid_led_set_frequency+0x20>)
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59d4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59d8:	4419      	add	r1, r3
    59da:	730a      	strb	r2, [r1, #12]
    59dc:	4770      	bx	lr
    59de:	bf00      	nop
    59e0:	20000c3c 	.word	0x20000c3c
    59e4:	20001ba4 	.word	0x20001ba4

000059e8 <grid_led_init>:
uint8_t grid_led_init(uint8_t num){
    59e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59ec:	b083      	sub	sp, #12
    59ee:	4605      	mov	r5, r0
	led_number = num;	
    59f0:	4c5f      	ldr	r4, [pc, #380]	; (5b70 <grid_led_init+0x188>)
    59f2:	63e0      	str	r0, [r4, #60]	; 0x3c
	led_frame_buffer_size = (GRID_LED_RESET_LENGTH + num*3*4);
    59f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    59f8:	0080      	lsls	r0, r0, #2
    59fa:	3090      	adds	r0, #144	; 0x90
    59fc:	63a0      	str	r0, [r4, #56]	; 0x38
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    59fe:	4f5d      	ldr	r7, [pc, #372]	; (5b74 <grid_led_init+0x18c>)
    5a00:	47b8      	blx	r7
    5a02:	4606      	mov	r6, r0
    5a04:	6360      	str	r0, [r4, #52]	; 0x34
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[GRID_LED_RESET_LENGTH];
    5a06:	f100 0390 	add.w	r3, r0, #144	; 0x90
    5a0a:	f844 3f40 	str.w	r3, [r4, #64]!
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    5a0e:	201a      	movs	r0, #26
    5a10:	fb00 f005 	mul.w	r0, r0, r5
    5a14:	47b8      	blx	r7
    5a16:	4b58      	ldr	r3, [pc, #352]	; (5b78 <grid_led_init+0x190>)
    5a18:	6018      	str	r0, [r3, #0]
    5a1a:	2100      	movs	r1, #0
    5a1c:	b28b      	uxth	r3, r1
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    5a1e:	f003 0201 	and.w	r2, r3, #1
    5a22:	2a00      	cmp	r2, #0
    5a24:	bf14      	ite	ne
    5a26:	f04f 6260 	movne.w	r2, #234881024	; 0xe000000
    5a2a:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    5a2e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    5a32:	2800      	cmp	r0, #0
    5a34:	bf14      	ite	ne
    5a36:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    5a3a:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    5a3e:	4310      	orrs	r0, r2
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    5a40:	f3c3 0280 	ubfx	r2, r3, #2, #1
    5a44:	2a00      	cmp	r2, #0
    5a46:	bf14      	ite	ne
    5a48:	f44f 2260 	movne.w	r2, #917504	; 0xe0000
    5a4c:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    5a50:	4302      	orrs	r2, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    5a52:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    5a56:	2800      	cmp	r0, #0
    5a58:	bf14      	ite	ne
    5a5a:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    5a5e:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    5a62:	4302      	orrs	r2, r0
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    5a64:	f3c3 1000 	ubfx	r0, r3, #4, #1
    5a68:	2800      	cmp	r0, #0
    5a6a:	bf14      	ite	ne
    5a6c:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    5a70:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    5a74:	4310      	orrs	r0, r2
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    5a76:	f3c3 1240 	ubfx	r2, r3, #5, #1
    5a7a:	2a00      	cmp	r2, #0
    5a7c:	bf14      	ite	ne
    5a7e:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    5a82:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    5a86:	4310      	orrs	r0, r2
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    5a88:	f3c3 1280 	ubfx	r2, r3, #6, #1
    5a8c:	2a00      	cmp	r2, #0
    5a8e:	bf14      	ite	ne
    5a90:	220e      	movne	r2, #14
    5a92:	2208      	moveq	r2, #8
    5a94:	4302      	orrs	r2, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    5a96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	bf14      	ite	ne
    5a9e:	23e0      	movne	r3, #224	; 0xe0
    5aa0:	2380      	moveq	r3, #128	; 0x80
    5aa2:	4313      	orrs	r3, r2
		led_color_code[i] = temp;
    5aa4:	f844 3f04 	str.w	r3, [r4, #4]!
    5aa8:	3101      	adds	r1, #1
	for(uint16_t i=0; i<256; i++){
    5aaa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5aae:	d1b5      	bne.n	5a1c <grid_led_init+0x34>
    5ab0:	1e73      	subs	r3, r6, #1
    5ab2:	368f      	adds	r6, #143	; 0x8f
		led_frame_buffer[i] = LED_CODE_R;
    5ab4:	2200      	movs	r2, #0
    5ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5aba:	42b3      	cmp	r3, r6
    5abc:	d1fb      	bne.n	5ab6 <grid_led_init+0xce>
	for (uint32_t i = 0; i<led_number; i++){
    5abe:	2d00      	cmp	r5, #0
    5ac0:	d051      	beq.n	5b66 <grid_led_init+0x17e>
    5ac2:	2600      	movs	r6, #0
		grid_led_set_color(i, 0,0,0);
    5ac4:	4637      	mov	r7, r6
    5ac6:	4c2d      	ldr	r4, [pc, #180]	; (5b7c <grid_led_init+0x194>)
    5ac8:	463b      	mov	r3, r7
    5aca:	463a      	mov	r2, r7
    5acc:	4639      	mov	r1, r7
    5ace:	4630      	mov	r0, r6
    5ad0:	47a0      	blx	r4
	for (uint32_t i = 0; i<led_number; i++){
    5ad2:	3601      	adds	r6, #1
    5ad4:	42b5      	cmp	r5, r6
    5ad6:	d1f7      	bne.n	5ac8 <grid_led_init+0xe0>
	for(uint8_t i = 0; i<led_number; i++){
    5ad8:	2e00      	cmp	r6, #0
    5ada:	d044      	beq.n	5b66 <grid_led_init+0x17e>
    5adc:	2500      	movs	r5, #0
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5ade:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5b88 <grid_led_init+0x1a0>
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5ae2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 5b8c <grid_led_init+0x1a4>
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5ae6:	46b1      	mov	r9, r6
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5ae8:	2400      	movs	r4, #0
    5aea:	9400      	str	r4, [sp, #0]
    5aec:	4623      	mov	r3, r4
    5aee:	4622      	mov	r2, r4
    5af0:	4621      	mov	r1, r4
    5af2:	4628      	mov	r0, r5
    5af4:	47d8      	blx	fp
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5af6:	237f      	movs	r3, #127	; 0x7f
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	4623      	mov	r3, r4
    5afc:	4622      	mov	r2, r4
    5afe:	4621      	mov	r1, r4
    5b00:	4628      	mov	r0, r5
    5b02:	47d0      	blx	sl
		grid_led_set_max(i, 0, 0x00, 0x00, 0xFF);
    5b04:	23ff      	movs	r3, #255	; 0xff
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	4623      	mov	r3, r4
    5b0a:	4622      	mov	r2, r4
    5b0c:	4621      	mov	r1, r4
    5b0e:	4628      	mov	r0, r5
    5b10:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5b90 <grid_led_init+0x1a8>
    5b14:	47c0      	blx	r8
		grid_led_set_frequency(i, 0, 0);
    5b16:	4622      	mov	r2, r4
    5b18:	4621      	mov	r1, r4
    5b1a:	4628      	mov	r0, r5
    5b1c:	4e18      	ldr	r6, [pc, #96]	; (5b80 <grid_led_init+0x198>)
    5b1e:	47b0      	blx	r6
		grid_led_set_phase(i, 0, 0);
    5b20:	4622      	mov	r2, r4
    5b22:	4621      	mov	r1, r4
    5b24:	4628      	mov	r0, r5
    5b26:	4f17      	ldr	r7, [pc, #92]	; (5b84 <grid_led_init+0x19c>)
    5b28:	47b8      	blx	r7
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5b2a:	2202      	movs	r2, #2
    5b2c:	9200      	str	r2, [sp, #0]
    5b2e:	4613      	mov	r3, r2
    5b30:	2101      	movs	r1, #1
    5b32:	4628      	mov	r0, r5
    5b34:	47d8      	blx	fp
		grid_led_set_mid(i, 1, 0x00, 0x00, 0x00);
    5b36:	9400      	str	r4, [sp, #0]
    5b38:	4623      	mov	r3, r4
    5b3a:	4622      	mov	r2, r4
    5b3c:	2101      	movs	r1, #1
    5b3e:	4628      	mov	r0, r5
    5b40:	47d0      	blx	sl
		grid_led_set_max(i, 1, 0x00, 0x00, 0x00);
    5b42:	9400      	str	r4, [sp, #0]
    5b44:	4623      	mov	r3, r4
    5b46:	4622      	mov	r2, r4
    5b48:	2101      	movs	r1, #1
    5b4a:	4628      	mov	r0, r5
    5b4c:	47c0      	blx	r8
		grid_led_set_frequency(i, 1, 0);
    5b4e:	4622      	mov	r2, r4
    5b50:	2101      	movs	r1, #1
    5b52:	4628      	mov	r0, r5
    5b54:	47b0      	blx	r6
		grid_led_set_phase(i, 1, 0);
    5b56:	4622      	mov	r2, r4
    5b58:	2101      	movs	r1, #1
    5b5a:	4628      	mov	r0, r5
    5b5c:	47b8      	blx	r7
	for(uint8_t i = 0; i<led_number; i++){
    5b5e:	3501      	adds	r5, #1
    5b60:	b2ed      	uxtb	r5, r5
    5b62:	45a9      	cmp	r9, r5
    5b64:	d8c0      	bhi.n	5ae8 <grid_led_init+0x100>
}
    5b66:	2000      	movs	r0, #0
    5b68:	b003      	add	sp, #12
    5b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b6e:	bf00      	nop
    5b70:	20000c3c 	.word	0x20000c3c
    5b74:	00008899 	.word	0x00008899
    5b78:	20001ba4 	.word	0x20001ba4
    5b7c:	0000587d 	.word	0x0000587d
    5b80:	000059c5 	.word	0x000059c5
    5b84:	000059a1 	.word	0x000059a1
    5b88:	00005905 	.word	0x00005905
    5b8c:	0000593d 	.word	0x0000593d
    5b90:	00005971 	.word	0x00005971

00005b94 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    5b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = led_smart_buffer[num+(led_number*layer)].color_min.r;
    5b98:	4b25      	ldr	r3, [pc, #148]	; (5c30 <grid_led_render+0x9c>)
    5b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5b9c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5ba0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    5ba4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    5ba8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    5bac:	4a21      	ldr	r2, [pc, #132]	; (5c34 <grid_led_render+0xa0>)
    5bae:	6814      	ldr	r4, [r2, #0]
    5bb0:	441c      	add	r4, r3
    5bb2:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    5bb4:	2300      	movs	r3, #0
	uint32_t mix_g = 0;
    5bb6:	461a      	mov	r2, r3
	uint32_t mix_r = 0;
    5bb8:	4619      	mov	r1, r3
		uint8_t min_g = led_smart_buffer[num+(led_number*layer)].color_min.g;
		uint8_t min_b = led_smart_buffer[num+(led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bba:	f8df c080 	ldr.w	ip, [pc, #128]	; 5c3c <grid_led_render+0xa8>
    5bbe:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = led_smart_buffer[num+(led_number*layer)].color_max.r;
		uint8_t max_g = led_smart_buffer[num+(led_number*layer)].color_max.g;
		uint8_t max_b = led_smart_buffer[num+(led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[led_smart_buffer[num+(led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bc0:	f81c 9006 	ldrb.w	r9, [ip, r6]
		uint8_t mid_a = mid_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bc4:	4466      	add	r6, ip
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bc6:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    5bca:	f896 8200 	ldrb.w	r8, [r6, #512]	; 0x200
    5bce:	7826      	ldrb	r6, [r4, #0]
    5bd0:	f894 a003 	ldrb.w	sl, [r4, #3]
    5bd4:	fb05 fa0a 	mul.w	sl, r5, sl
    5bd8:	fb09 aa06 	mla	sl, r9, r6, sl
    5bdc:	79a6      	ldrb	r6, [r4, #6]
    5bde:	fb08 a606 	mla	r6, r8, r6, sl
    5be2:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    5be4:	7866      	ldrb	r6, [r4, #1]
    5be6:	f894 a004 	ldrb.w	sl, [r4, #4]
    5bea:	fb05 fa0a 	mul.w	sl, r5, sl
    5bee:	fb09 aa06 	mla	sl, r9, r6, sl
    5bf2:	79e6      	ldrb	r6, [r4, #7]
    5bf4:	fb08 a606 	mla	r6, r8, r6, sl
    5bf8:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    5bfa:	78a6      	ldrb	r6, [r4, #2]
    5bfc:	f894 a005 	ldrb.w	sl, [r4, #5]
    5c00:	fb05 f50a 	mul.w	r5, r5, sl
    5c04:	fb09 5606 	mla	r6, r9, r6, r5
    5c08:	7a25      	ldrb	r5, [r4, #8]
    5c0a:	fb08 6505 	mla	r5, r8, r5, r6
    5c0e:	442b      	add	r3, r5
    5c10:	3f01      	subs	r7, #1
    5c12:	4474      	add	r4, lr
	for (uint8_t i = 0; i<2; i++){
    5c14:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    5c18:	d1d1      	bne.n	5bbe <grid_led_render+0x2a>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    5c1a:	f3c3 2347 	ubfx	r3, r3, #9, #8
    5c1e:	f3c2 2247 	ubfx	r2, r2, #9, #8
    5c22:	f3c1 2147 	ubfx	r1, r1, #9, #8
    5c26:	4c04      	ldr	r4, [pc, #16]	; (5c38 <grid_led_render+0xa4>)
    5c28:	47a0      	blx	r4
    5c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c2e:	bf00      	nop
    5c30:	20000c3c 	.word	0x20000c3c
    5c34:	20001ba4 	.word	0x20001ba4
    5c38:	0000587d 	.word	0x0000587d
    5c3c:	20000040 	.word	0x20000040

00005c40 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    5c40:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    5c42:	4b05      	ldr	r3, [pc, #20]	; (5c58 <grid_led_render_all+0x18>)
    5c44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5c46:	b135      	cbz	r5, 5c56 <grid_led_render_all+0x16>
    5c48:	2400      	movs	r4, #0
		
		grid_led_render(i);
    5c4a:	4e04      	ldr	r6, [pc, #16]	; (5c5c <grid_led_render_all+0x1c>)
    5c4c:	4620      	mov	r0, r4
    5c4e:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    5c50:	3401      	adds	r4, #1
    5c52:	42ac      	cmp	r4, r5
    5c54:	d1fa      	bne.n	5c4c <grid_led_render_all+0xc>
    5c56:	bd70      	pop	{r4, r5, r6, pc}
    5c58:	20000c3c 	.word	0x20000c3c
    5c5c:	00005b95 	.word	0x00005b95

00005c60 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    5c60:	b538      	push	{r3, r4, r5, lr}
    5c62:	4604      	mov	r4, r0
    5c64:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    5c66:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    5c68:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    5c6a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    5c6c:	2300      	movs	r3, #0
    5c6e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    5c70:	0048      	lsls	r0, r1, #1
    5c72:	4b09      	ldr	r3, [pc, #36]	; (5c98 <grid_ain_channel_init+0x38>)
    5c74:	4798      	blx	r3
    5c76:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c78:	b14d      	cbz	r5, 5c8e <grid_ain_channel_init+0x2e>
    5c7a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    5c7c:	4619      	mov	r1, r3
    5c7e:	6822      	ldr	r2, [r4, #0]
    5c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c84:	3301      	adds	r3, #1
    5c86:	b2db      	uxtb	r3, r3
    5c88:	7922      	ldrb	r2, [r4, #4]
    5c8a:	429a      	cmp	r2, r3
    5c8c:	d8f7      	bhi.n	5c7e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    5c8e:	2000      	movs	r0, #0
    5c90:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    5c92:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    5c94:	bd38      	pop	{r3, r4, r5, pc}
    5c96:	bf00      	nop
    5c98:	00008899 	.word	0x00008899

00005c9c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    5c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ca0:	4605      	mov	r5, r0
    5ca2:	460e      	mov	r6, r1
    5ca4:	4691      	mov	r9, r2
    5ca6:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    5ca8:	4c0e      	ldr	r4, [pc, #56]	; (5ce4 <grid_ain_init+0x48>)
    5caa:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
	ain_channel_buffer_depth = depth;
    5cae:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    5cb2:	0100      	lsls	r0, r0, #4
    5cb4:	4b0c      	ldr	r3, [pc, #48]	; (5ce8 <grid_ain_init+0x4c>)
    5cb6:	4798      	blx	r3
    5cb8:	f8c4 0448 	str.w	r0, [r4, #1096]	; 0x448

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cbc:	b175      	cbz	r5, 5cdc <grid_ain_init+0x40>
    5cbe:	4604      	mov	r4, r0
    5cc0:	3d01      	subs	r5, #1
    5cc2:	b2ed      	uxtb	r5, r5
    5cc4:	3501      	adds	r5, #1
    5cc6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    5cca:	4f08      	ldr	r7, [pc, #32]	; (5cec <grid_ain_init+0x50>)
    5ccc:	4643      	mov	r3, r8
    5cce:	464a      	mov	r2, r9
    5cd0:	4631      	mov	r1, r6
    5cd2:	4620      	mov	r0, r4
    5cd4:	47b8      	blx	r7
    5cd6:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cd8:	42ac      	cmp	r4, r5
    5cda:	d1f7      	bne.n	5ccc <grid_ain_init+0x30>
	}

	return 0;
}
    5cdc:	2000      	movs	r0, #0
    5cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ce2:	bf00      	nop
    5ce4:	20000c3c 	.word	0x20000c3c
    5ce8:	00008899 	.word	0x00008899
    5cec:	00005c61 	.word	0x00005c61

00005cf0 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    5cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5cf4:	0100      	lsls	r0, r0, #4
    5cf6:	4b3c      	ldr	r3, [pc, #240]	; (5de8 <grid_ain_add_sample+0xf8>)
    5cf8:	f8d3 a448 	ldr.w	sl, [r3, #1096]	; 0x448
    5cfc:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d00:	f89c 6004 	ldrb.w	r6, [ip, #4]
    5d04:	2e00      	cmp	r6, #0
    5d06:	d05b      	beq.n	5dc0 <grid_ain_add_sample+0xd0>
    5d08:	f85a 5000 	ldr.w	r5, [sl, r0]
    5d0c:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    5d0e:	2200      	movs	r2, #0
    5d10:	4690      	mov	r8, r2
    5d12:	4691      	mov	r9, r2
    5d14:	4696      	mov	lr, r2
    5d16:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5d1a:	4614      	mov	r4, r2
    5d1c:	fa5f fb82 	uxtb.w	fp, r2
    5d20:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    5d24:	441c      	add	r4, r3
		
		if (current > maximum){
    5d26:	4573      	cmp	r3, lr
    5d28:	bf84      	itt	hi
    5d2a:	46d8      	movhi	r8, fp
			maximum = current;
    5d2c:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    5d2e:	42bb      	cmp	r3, r7
    5d30:	bf3c      	itt	cc
    5d32:	46d9      	movcc	r9, fp
			minimum = current;
    5d34:	461f      	movcc	r7, r3
    5d36:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d38:	b2d3      	uxtb	r3, r2
    5d3a:	42b3      	cmp	r3, r6
    5d3c:	d3ee      	bcc.n	5d1c <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    5d3e:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    5d42:	b2b6      	uxth	r6, r6
    5d44:	428e      	cmp	r6, r1
    5d46:	d23f      	bcs.n	5dc8 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    5d48:	f85a 3000 	ldr.w	r3, [sl, r0]
    5d4c:	440c      	add	r4, r1
    5d4e:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    5d52:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    5d54:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    5d58:	f89c 3004 	ldrb.w	r3, [ip, #4]
    5d5c:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d60:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d64:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    5d68:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d6a:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    5d6e:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d70:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d72:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    5d74:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d78:	b29b      	uxth	r3, r3
    5d7a:	408b      	lsls	r3, r1
    5d7c:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    5d7e:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    5d82:	1b92      	subs	r2, r2, r6
    5d84:	2a00      	cmp	r2, #0
    5d86:	bfb8      	it	lt
    5d88:	4252      	neglt	r2, r2
    5d8a:	2601      	movs	r6, #1
    5d8c:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5d90:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    5d94:	42be      	cmp	r6, r7
    5d96:	d020      	beq.n	5dda <grid_ain_add_sample+0xea>
    5d98:	4282      	cmp	r2, r0
    5d9a:	dc08      	bgt.n	5dae <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    5d9c:	2201      	movs	r2, #1
    5d9e:	fa02 f505 	lsl.w	r5, r2, r5
    5da2:	fa02 f101 	lsl.w	r1, r2, r1
    5da6:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5da8:	428f      	cmp	r7, r1
    5daa:	d000      	beq.n	5dae <grid_ain_add_sample+0xbe>
    5dac:	b9c7      	cbnz	r7, 5de0 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    5dae:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    5db2:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    5db6:	2001      	movs	r0, #1
    5db8:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    5dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    5dc0:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    5dc2:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    5dc4:	2400      	movs	r4, #0
    5dc6:	e7ba      	b.n	5d3e <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    5dc8:	f85a 3000 	ldr.w	r3, [sl, r0]
    5dcc:	440c      	add	r4, r1
    5dce:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    5dd2:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    5dd4:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    5dd8:	e7be      	b.n	5d58 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    5dda:	2000      	movs	r0, #0
    5ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5de0:	2000      	movs	r0, #0
	}
	
}
    5de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5de6:	bf00      	nop
    5de8:	20000c3c 	.word	0x20000c3c

00005dec <convert_cb_ADC_1>:
{
    5dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5df0:	b082      	sub	sp, #8
	ADC_1_conversion_ready = 1;
    5df2:	2201      	movs	r2, #1
    5df4:	4b4a      	ldr	r3, [pc, #296]	; (5f20 <convert_cb_ADC_1+0x134>)
    5df6:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	while(ADC_0_conversion_ready==0){}
    5dfa:	461a      	mov	r2, r3
    5dfc:	7813      	ldrb	r3, [r2, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d0fc      	beq.n	5dfc <convert_cb_ADC_1+0x10>
	while(ADC_1_conversion_ready==0){}
    5e02:	4a47      	ldr	r2, [pc, #284]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e04:	f892 344c 	ldrb.w	r3, [r2, #1100]	; 0x44c
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d0fb      	beq.n	5e04 <convert_cb_ADC_1+0x18>
	uint16_t adcresult_0 = 0;
    5e0c:	2700      	movs	r7, #0
    5e0e:	f8ad 7006 	strh.w	r7, [sp, #6]
	uint16_t adcresult_1 = 0;
    5e12:	f8ad 7004 	strh.w	r7, [sp, #4]
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    5e16:	4e42      	ldr	r6, [pc, #264]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e18:	f896 344d 	ldrb.w	r3, [r6, #1101]	; 0x44d
    5e1c:	4a41      	ldr	r2, [pc, #260]	; (5f24 <convert_cb_ADC_1+0x138>)
    5e1e:	18d1      	adds	r1, r2, r3
    5e20:	7a0d      	ldrb	r5, [r1, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    5e22:	5cd4      	ldrb	r4, [r2, r3]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    5e24:	2302      	movs	r3, #2
    5e26:	f10d 0206 	add.w	r2, sp, #6
    5e2a:	4639      	mov	r1, r7
    5e2c:	483e      	ldr	r0, [pc, #248]	; (5f28 <convert_cb_ADC_1+0x13c>)
    5e2e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5f3c <convert_cb_ADC_1+0x150>
    5e32:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    5e34:	2302      	movs	r3, #2
    5e36:	aa01      	add	r2, sp, #4
    5e38:	4639      	mov	r1, r7
    5e3a:	483c      	ldr	r0, [pc, #240]	; (5f2c <convert_cb_ADC_1+0x140>)
    5e3c:	47c0      	blx	r8
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e3e:	442e      	add	r6, r5
    5e40:	f996 2450 	ldrsb.w	r2, [r6, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_REVERSED)){
    5e44:	f012 0f01 	tst.w	r2, #1
    5e48:	d004      	beq.n	5e54 <convert_cb_ADC_1+0x68>
		adcresult_0 = 65535 - adcresult_0;
    5e4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e4e:	43db      	mvns	r3, r3
    5e50:	f8ad 3006 	strh.w	r3, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e54:	4b32      	ldr	r3, [pc, #200]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e56:	4423      	add	r3, r4
    5e58:	f993 3450 	ldrsb.w	r3, [r3, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_REVERSED)){
    5e5c:	f013 0f01 	tst.w	r3, #1
    5e60:	d004      	beq.n	5e6c <convert_cb_ADC_1+0x80>
		adcresult_1 = 65535 - adcresult_1;
    5e62:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5e66:	43c9      	mvns	r1, r1
    5e68:	f8ad 1004 	strh.w	r1, [sp, #4]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e6c:	f002 0202 	and.w	r2, r2, #2
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_BINARY)){
    5e70:	b252      	sxtb	r2, r2
    5e72:	b152      	cbz	r2, 5e8a <convert_cb_ADC_1+0x9e>
		adcresult_0 = (adcresult_0>10000)*65535;
    5e74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5e78:	f242 7110 	movw	r1, #10000	; 0x2710
    5e7c:	428a      	cmp	r2, r1
    5e7e:	f04f 32ff 	mov.w	r2, #4294967295
    5e82:	bf98      	it	ls
    5e84:	2200      	movls	r2, #0
    5e86:	f8ad 2006 	strh.w	r2, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e8a:	f003 0302 	and.w	r3, r3, #2
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_BINARY)){
    5e8e:	b25b      	sxtb	r3, r3
    5e90:	b153      	cbz	r3, 5ea8 <convert_cb_ADC_1+0xbc>
		adcresult_1 = (adcresult_1>10000)*65535;
    5e92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5e96:	f242 7210 	movw	r2, #10000	; 0x2710
    5e9a:	4293      	cmp	r3, r2
    5e9c:	f04f 33ff 	mov.w	r3, #4294967295
    5ea0:	bf98      	it	ls
    5ea2:	2300      	movls	r3, #0
    5ea4:	f8ad 3004 	strh.w	r3, [sp, #4]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    5ea8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5eac:	4628      	mov	r0, r5
    5eae:	4d20      	ldr	r5, [pc, #128]	; (5f30 <convert_cb_ADC_1+0x144>)
    5eb0:	47a8      	blx	r5
	grid_ain_add_sample(adc_index_1, adcresult_1);
    5eb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5eb6:	4620      	mov	r0, r4
    5eb8:	47a8      	blx	r5
	grid_module_mux++;
    5eba:	4919      	ldr	r1, [pc, #100]	; (5f20 <convert_cb_ADC_1+0x134>)
    5ebc:	f891 344d 	ldrb.w	r3, [r1, #1101]	; 0x44d
    5ec0:	3301      	adds	r3, #1
    5ec2:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    5ec4:	f003 0207 	and.w	r2, r3, #7
    5ec8:	f881 244d 	strb.w	r2, [r1, #1101]	; 0x44d
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    5ecc:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ed0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    5ed4:	4b17      	ldr	r3, [pc, #92]	; (5f34 <convert_cb_ADC_1+0x148>)
    5ed6:	bf14      	ite	ne
    5ed8:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5edc:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5ee0:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ee4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    5ee8:	4b12      	ldr	r3, [pc, #72]	; (5f34 <convert_cb_ADC_1+0x148>)
    5eea:	bf14      	ite	ne
    5eec:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ef0:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5ef4:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ef6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5efa:	4b0e      	ldr	r3, [pc, #56]	; (5f34 <convert_cb_ADC_1+0x148>)
    5efc:	bf14      	ite	ne
    5efe:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f02:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	ADC_0_conversion_ready = 0;	
    5f06:	4b06      	ldr	r3, [pc, #24]	; (5f20 <convert_cb_ADC_1+0x134>)
    5f08:	2200      	movs	r2, #0
    5f0a:	701a      	strb	r2, [r3, #0]
	ADC_1_conversion_ready = 0;
    5f0c:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	adc_async_start_conversion(&ADC_0);			
    5f10:	4805      	ldr	r0, [pc, #20]	; (5f28 <convert_cb_ADC_1+0x13c>)
    5f12:	4c09      	ldr	r4, [pc, #36]	; (5f38 <convert_cb_ADC_1+0x14c>)
    5f14:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    5f16:	4805      	ldr	r0, [pc, #20]	; (5f2c <convert_cb_ADC_1+0x140>)
    5f18:	47a0      	blx	r4
}
    5f1a:	b002      	add	sp, #8
    5f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f20:	20000c3c 	.word	0x20000c3c
    5f24:	00009798 	.word	0x00009798
    5f28:	20001384 	.word	0x20001384
    5f2c:	20001554 	.word	0x20001554
    5f30:	00005cf1 	.word	0x00005cf1
    5f34:	41008000 	.word	0x41008000
    5f38:	0000122d 	.word	0x0000122d
    5f3c:	0000114d 	.word	0x0000114d

00005f40 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5f40:	4b03      	ldr	r3, [pc, #12]	; (5f50 <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    5f42:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f46:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    5f4a:	7b00      	ldrb	r0, [r0, #12]
    5f4c:	4770      	bx	lr
    5f4e:	bf00      	nop
    5f50:	20000c3c 	.word	0x20000c3c

00005f54 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    5f54:	4b04      	ldr	r3, [pc, #16]	; (5f68 <grid_ain_get_average+0x14>)
    5f56:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f5a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    5f5e:	2300      	movs	r3, #0
    5f60:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    5f62:	8900      	ldrh	r0, [r0, #8]
    5f64:	4770      	bx	lr
    5f66:	bf00      	nop
    5f68:	20000c3c 	.word	0x20000c3c

00005f6c <grid_tel_event_register>:
		return 0;
	}
}  


struct TEL_event_counter* grid_tel_event_register(uint32_t frequency_reference, uint32_t frequency_alert){
    5f6c:	b538      	push	{r3, r4, r5, lr}
    5f6e:	4604      	mov	r4, r0
    5f70:	460d      	mov	r5, r1
	
	struct TEL_event_counter* new_item = (struct TEL_event_counter*) malloc(sizeof(struct TEL_event_counter));
    5f72:	2018      	movs	r0, #24
    5f74:	4b0c      	ldr	r3, [pc, #48]	; (5fa8 <grid_tel_event_register+0x3c>)
    5f76:	4798      	blx	r3
	if(new_item != NULL){	// malloc successful
    5f78:	4601      	mov	r1, r0
    5f7a:	b190      	cbz	r0, 5fa2 <grid_tel_event_register+0x36>
		
		new_item->next = NULL;
    5f7c:	2300      	movs	r3, #0
    5f7e:	6143      	str	r3, [r0, #20]
		
		new_item->absolute_counter = 0;
    5f80:	6003      	str	r3, [r0, #0]
		new_item->frequency = 0;
    5f82:	6103      	str	r3, [r0, #16]
		new_item->frequency_alert = frequency_alert;
    5f84:	60c5      	str	r5, [r0, #12]
		new_item->frequency_counter = 0;
    5f86:	6043      	str	r3, [r0, #4]
		new_item->frequency_reference = frequency_reference;
    5f88:	6084      	str	r4, [r0, #8]
		
		

		if(grid_tel_event_head == NULL){ //List is empty
    5f8a:	4b08      	ldr	r3, [pc, #32]	; (5fac <grid_tel_event_register+0x40>)
    5f8c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
    5f90:	b91a      	cbnz	r2, 5f9a <grid_tel_event_register+0x2e>
			grid_tel_event_head = new_item;
    5f92:	f8c3 0460 	str.w	r0, [r3, #1120]	; 0x460
    5f96:	e004      	b.n	5fa2 <grid_tel_event_register+0x36>
			
			struct TEL_event_counter* current = grid_tel_event_head;
			
			while (current->next != NULL)
			{
				current = current->next;
    5f98:	461a      	mov	r2, r3
			while (current->next != NULL)
    5f9a:	6953      	ldr	r3, [r2, #20]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d1fb      	bne.n	5f98 <grid_tel_event_register+0x2c>
			}
			
			current -> next = new_item;
    5fa0:	6151      	str	r1, [r2, #20]

	}

	return new_item;

}
    5fa2:	4608      	mov	r0, r1
    5fa4:	bd38      	pop	{r3, r4, r5, pc}
    5fa6:	bf00      	nop
    5fa8:	00008899 	.word	0x00008899
    5fac:	20000c3c 	.word	0x20000c3c

00005fb0 <grid_tel_calculate_event_frequency>:


uint8_t grid_tel_calculate_event_frequency(struct TEL_event_counter* telemetry_event){

	// Save valid frequency data
	telemetry_event->frequency = telemetry_event->frequency_counter;
    5fb0:	6843      	ldr	r3, [r0, #4]
    5fb2:	6103      	str	r3, [r0, #16]
	
	
	//Update the freq counter variable
	if(telemetry_event->frequency_counter >= telemetry_event->frequency_reference){
    5fb4:	6882      	ldr	r2, [r0, #8]
    5fb6:	4293      	cmp	r3, r2
		telemetry_event->frequency_counter -= telemetry_event->frequency_reference;
    5fb8:	bf2c      	ite	cs
    5fba:	1a9b      	subcs	r3, r3, r2
	}else{
		telemetry_event->frequency_counter = 0;
    5fbc:	2300      	movcc	r3, #0
    5fbe:	6043      	str	r3, [r0, #4]
	}
	

	// Instant alert feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    5fc0:	6842      	ldr	r2, [r0, #4]
    5fc2:	68c0      	ldr	r0, [r0, #12]
		return 1;
	}
	else{
		return 0;
	}	
}
    5fc4:	4282      	cmp	r2, r0
    5fc6:	bf94      	ite	ls
    5fc8:	2000      	movls	r0, #0
    5fca:	2001      	movhi	r0, #1
    5fcc:	4770      	bx	lr
	...

00005fd0 <grid_tel_frequency_tick>:


void grid_tel_frequency_tick(){
    5fd0:	b538      	push	{r3, r4, r5, lr}
	
	struct TEL_event_counter* current = grid_tel_event_head;
    5fd2:	4b05      	ldr	r3, [pc, #20]	; (5fe8 <grid_tel_frequency_tick+0x18>)
    5fd4:	f8d3 4460 	ldr.w	r4, [r3, #1120]	; 0x460
	while(current != NULL){
    5fd8:	b12c      	cbz	r4, 5fe6 <grid_tel_frequency_tick+0x16>
		grid_tel_calculate_event_frequency(current);
    5fda:	4d04      	ldr	r5, [pc, #16]	; (5fec <grid_tel_frequency_tick+0x1c>)
    5fdc:	4620      	mov	r0, r4
    5fde:	47a8      	blx	r5
		current = current->next;
    5fe0:	6964      	ldr	r4, [r4, #20]
	while(current != NULL){
    5fe2:	2c00      	cmp	r4, #0
    5fe4:	d1fa      	bne.n	5fdc <grid_tel_frequency_tick+0xc>
    5fe6:	bd38      	pop	{r3, r4, r5, pc}
    5fe8:	20000c3c 	.word	0x20000c3c
    5fec:	00005fb1 	.word	0x00005fb1

00005ff0 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    5ff0:	4b36      	ldr	r3, [pc, #216]	; (60cc <grid_sys_get_hwcfg+0xdc>)
    5ff2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
    5ffa:	d003      	beq.n	6004 <grid_sys_get_hwcfg+0x14>
	}

	
	return grid_sys_hwfcg;

}
    5ffc:	4b33      	ldr	r3, [pc, #204]	; (60cc <grid_sys_get_hwcfg+0xdc>)
    5ffe:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    6002:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    6004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6008:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    600a:	4b31      	ldr	r3, [pc, #196]	; (60d0 <grid_sys_get_hwcfg+0xe0>)
    600c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6014:	492f      	ldr	r1, [pc, #188]	; (60d4 <grid_sys_get_hwcfg+0xe4>)
    6016:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    601a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    601e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6022:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    6026:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    602a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    602e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    6032:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    603a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    603e:	4926      	ldr	r1, [pc, #152]	; (60d8 <grid_sys_get_hwcfg+0xe8>)
    6040:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6044:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    6048:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    604c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    6050:	2001      	movs	r0, #1
    6052:	4b22      	ldr	r3, [pc, #136]	; (60dc <grid_sys_get_hwcfg+0xec>)
    6054:	4798      	blx	r3
    6056:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    6058:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    605a:	4d1d      	ldr	r5, [pc, #116]	; (60d0 <grid_sys_get_hwcfg+0xe0>)
    605c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    6060:	4f1e      	ldr	r7, [pc, #120]	; (60dc <grid_sys_get_hwcfg+0xec>)
    6062:	e00c      	b.n	607e <grid_sys_get_hwcfg+0x8e>
			if(i!=7){
    6064:	2e07      	cmp	r6, #7
    6066:	d027      	beq.n	60b8 <grid_sys_get_hwcfg+0xc8>
    6068:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    606c:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    6070:	2001      	movs	r0, #1
    6072:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6074:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    6078:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    607a:	2e08      	cmp	r6, #8
    607c:	d01c      	beq.n	60b8 <grid_sys_get_hwcfg+0xc8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    607e:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    6082:	2001      	movs	r0, #1
    6084:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    6086:	a801      	add	r0, sp, #4
    6088:	4b15      	ldr	r3, [pc, #84]	; (60e0 <grid_sys_get_hwcfg+0xf0>)
    608a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    608c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6090:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6094:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6098:	405c      	eors	r4, r3
    609a:	4014      	ands	r4, r2
    609c:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    609e:	a801      	add	r0, sp, #4
    60a0:	4b10      	ldr	r3, [pc, #64]	; (60e4 <grid_sys_get_hwcfg+0xf4>)
    60a2:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    60a4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    60a8:	d0dc      	beq.n	6064 <grid_sys_get_hwcfg+0x74>
				hwcfg_value |= (1<<i);
    60aa:	2301      	movs	r3, #1
    60ac:	40b3      	lsls	r3, r6
    60ae:	ea43 0808 	orr.w	r8, r3, r8
    60b2:	fa5f f888 	uxtb.w	r8, r8
    60b6:	e7d5      	b.n	6064 <grid_sys_get_hwcfg+0x74>
		grid_sys_hwfcg = hwcfg_value;
    60b8:	4b04      	ldr	r3, [pc, #16]	; (60cc <grid_sys_get_hwcfg+0xdc>)
    60ba:	f8c3 8300 	str.w	r8, [r3, #768]	; 0x300
}
    60be:	4b03      	ldr	r3, [pc, #12]	; (60cc <grid_sys_get_hwcfg+0xdc>)
    60c0:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    60c4:	b003      	add	sp, #12
    60c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    60ca:	bf00      	nop
    60cc:	20000040 	.word	0x20000040
    60d0:	41008000 	.word	0x41008000
    60d4:	40002000 	.word	0x40002000
    60d8:	40028000 	.word	0x40028000
    60dc:	000012d5 	.word	0x000012d5
    60e0:	00001255 	.word	0x00001255
    60e4:	00001263 	.word	0x00001263

000060e8 <tx_cb_USART_GRID>:
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(GRID_PORT_t* const por){
	
	grid_sys_tx_counter[por->direction - 0x11]++;
    60e8:	7943      	ldrb	r3, [r0, #5]
    60ea:	f1a3 0211 	sub.w	r2, r3, #17
    60ee:	4b05      	ldr	r3, [pc, #20]	; (6104 <tx_cb_USART_GRID+0x1c>)
    60f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    60f4:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
    60f8:	3201      	adds	r2, #1
    60fa:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
	por->tx_double_buffer_status = 0;
    60fe:	2300      	movs	r3, #0
    6100:	80c3      	strh	r3, [r0, #6]
    6102:	4770      	bx	lr
    6104:	20000c3c 	.word	0x20000c3c

00006108 <tx_cb_USART_GRID_W>:
{
    6108:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    610a:	4802      	ldr	r0, [pc, #8]	; (6114 <tx_cb_USART_GRID_W+0xc>)
    610c:	4b02      	ldr	r3, [pc, #8]	; (6118 <tx_cb_USART_GRID_W+0x10>)
    610e:	4798      	blx	r3
    6110:	bd08      	pop	{r3, pc}
    6112:	bf00      	nop
    6114:	20001d84 	.word	0x20001d84
    6118:	000060e9 	.word	0x000060e9

0000611c <tx_cb_USART_GRID_S>:
{
    611c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    611e:	4802      	ldr	r0, [pc, #8]	; (6128 <tx_cb_USART_GRID_S+0xc>)
    6120:	4b02      	ldr	r3, [pc, #8]	; (612c <tx_cb_USART_GRID_S+0x10>)
    6122:	4798      	blx	r3
    6124:	bd08      	pop	{r3, pc}
    6126:	bf00      	nop
    6128:	20002344 	.word	0x20002344
    612c:	000060e9 	.word	0x000060e9

00006130 <tx_cb_USART_GRID_E>:
{
    6130:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    6132:	4802      	ldr	r0, [pc, #8]	; (613c <tx_cb_USART_GRID_E+0xc>)
    6134:	4b02      	ldr	r3, [pc, #8]	; (6140 <tx_cb_USART_GRID_E+0x10>)
    6136:	4798      	blx	r3
    6138:	bd08      	pop	{r3, pc}
    613a:	bf00      	nop
    613c:	200027b8 	.word	0x200027b8
    6140:	000060e9 	.word	0x000060e9

00006144 <tx_cb_USART_GRID_N>:
{
    6144:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    6146:	4802      	ldr	r0, [pc, #8]	; (6150 <tx_cb_USART_GRID_N+0xc>)
    6148:	4b02      	ldr	r3, [pc, #8]	; (6154 <tx_cb_USART_GRID_N+0x10>)
    614a:	4798      	blx	r3
    614c:	bd08      	pop	{r3, pc}
    614e:	bf00      	nop
    6150:	200019d0 	.word	0x200019d0
    6154:	000060e9 	.word	0x000060e9

00006158 <grid_sys_calculate_checksum>:
}

uint8_t grid_sys_calculate_checksum(char* str, uint32_t len){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<len; i++){
    6158:	b141      	cbz	r1, 616c <grid_sys_calculate_checksum+0x14>
    615a:	4603      	mov	r3, r0
    615c:	1841      	adds	r1, r0, r1
    615e:	2000      	movs	r0, #0
		checksum ^= str[i]; 
    6160:	f813 2b01 	ldrb.w	r2, [r3], #1
    6164:	4050      	eors	r0, r2
	for (uint32_t i=0; i<len; i++){
    6166:	428b      	cmp	r3, r1
    6168:	d1fa      	bne.n	6160 <grid_sys_calculate_checksum+0x8>
    616a:	4770      	bx	lr
	uint8_t checksum = 0;
    616c:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    616e:	4770      	bx	lr

00006170 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    6170:	b538      	push	{r3, r4, r5, lr}
    6172:	4604      	mov	r4, r0
    6174:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    6176:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    6178:	2300      	movs	r3, #0
    617a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    617c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    617e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    6180:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    6182:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    6184:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    6186:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    6188:	4608      	mov	r0, r1
    618a:	4b08      	ldr	r3, [pc, #32]	; (61ac <grid_buffer_init+0x3c>)
    618c:	4798      	blx	r3
    618e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    6190:	b900      	cbnz	r0, 6194 <grid_buffer_init+0x24>
    6192:	e7fe      	b.n	6192 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    6194:	b145      	cbz	r5, 61a8 <grid_buffer_init+0x38>
    6196:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    6198:	4619      	mov	r1, r3
    619a:	6862      	ldr	r2, [r4, #4]
    619c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    619e:	3301      	adds	r3, #1
    61a0:	b29b      	uxth	r3, r3
    61a2:	8822      	ldrh	r2, [r4, #0]
    61a4:	429a      	cmp	r2, r3
    61a6:	d8f8      	bhi.n	619a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    61a8:	2001      	movs	r0, #1
    61aa:	bd38      	pop	{r3, r4, r5, pc}
    61ac:	00008899 	.word	0x00008899

000061b0 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    61b0:	8903      	ldrh	r3, [r0, #8]
    61b2:	8a02      	ldrh	r2, [r0, #16]
    61b4:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    61b6:	bf8f      	iteee	hi
    61b8:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    61ba:	8800      	ldrhls	r0, [r0, #0]
    61bc:	18c0      	addls	r0, r0, r3
    61be:	1a80      	subls	r0, r0, r2
    61c0:	b280      	uxth	r0, r0

	return space;

	
	
}
    61c2:	4770      	bx	lr

000061c4 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(GRID_BUFFER_t* buf, uint16_t length){
    61c4:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    61c6:	8903      	ldrh	r3, [r0, #8]
    61c8:	8a02      	ldrh	r2, [r0, #16]
    61ca:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    61cc:	bf9c      	itt	ls
    61ce:	8804      	ldrhls	r4, [r0, #0]
    61d0:	191b      	addls	r3, r3, r4
    61d2:	1a9b      	subs	r3, r3, r2
    61d4:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    61d6:	428b      	cmp	r3, r1
    61d8:	d90a      	bls.n	61f0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    61da:	440a      	add	r2, r1
    61dc:	8804      	ldrh	r4, [r0, #0]
    61de:	fb92 f3f4 	sdiv	r3, r2, r4
    61e2:	fb04 2213 	mls	r2, r4, r3, r2
    61e6:	8242      	strh	r2, [r0, #18]
		
		return length;
    61e8:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    61ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    61ee:	4770      	bx	lr
		return 0; // failed
    61f0:	2000      	movs	r0, #0
    61f2:	e7fa      	b.n	61ea <grid_buffer_write_init+0x26>

000061f4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(GRID_BUFFER_t* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    61f4:	8a83      	ldrh	r3, [r0, #20]
    61f6:	6842      	ldr	r2, [r0, #4]
    61f8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    61fa:	8a83      	ldrh	r3, [r0, #20]
    61fc:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    61fe:	b29b      	uxth	r3, r3
    6200:	8801      	ldrh	r1, [r0, #0]
    6202:	fbb3 f2f1 	udiv	r2, r3, r1
    6206:	fb01 3312 	mls	r3, r1, r2, r3
    620a:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    620c:	2001      	movs	r0, #1
    620e:	4770      	bx	lr

00006210 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(GRID_BUFFER_t* buf){
	
	if (buf->write_active == buf->write_stop){
    6210:	8a83      	ldrh	r3, [r0, #20]
    6212:	8a42      	ldrh	r2, [r0, #18]
    6214:	429a      	cmp	r2, r3
    6216:	d000      	beq.n	621a <grid_buffer_write_acknowledge+0xa>
    6218:	e7fe      	b.n	6218 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    621a:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    621c:	2001      	movs	r0, #1
    621e:	4770      	bx	lr

00006220 <grid_sys_ping>:


void grid_sys_ping(GRID_PORT_t* por){
    6220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6224:	b08a      	sub	sp, #40	; 0x28
    6226:	4606      	mov	r6, r0
	
	char str[20];
	uint8_t len = 0;
	
	// Create the packet
	sprintf(str, "%c%c%c%08x%c", GRID_MSG_START_OF_HEADING, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    6228:	7944      	ldrb	r4, [r0, #5]
    622a:	4b1d      	ldr	r3, [pc, #116]	; (62a0 <grid_sys_ping+0x80>)
    622c:	4798      	blx	r3
    622e:	2304      	movs	r3, #4
    6230:	9302      	str	r3, [sp, #8]
    6232:	9001      	str	r0, [sp, #4]
    6234:	9400      	str	r4, [sp, #0]
    6236:	2307      	movs	r3, #7
    6238:	2201      	movs	r2, #1
    623a:	491a      	ldr	r1, [pc, #104]	; (62a4 <grid_sys_ping+0x84>)
    623c:	a805      	add	r0, sp, #20
    623e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 62c0 <grid_sys_ping+0xa0>
    6242:	47c0      	blx	r8
	
	// Calculate packet length
	len = strlen(str);
    6244:	a805      	add	r0, sp, #20
    6246:	4d18      	ldr	r5, [pc, #96]	; (62a8 <grid_sys_ping+0x88>)
    6248:	47a8      	blx	r5
    624a:	b2c4      	uxtb	r4, r0
	
	// Concatonate the calculated CHECKSUM + \n
	sprintf(&str[len], "%02x\n", grid_sys_calculate_checksum(str, len));
    624c:	ab05      	add	r3, sp, #20
    624e:	191f      	adds	r7, r3, r4
    6250:	4621      	mov	r1, r4
    6252:	4618      	mov	r0, r3
    6254:	4b15      	ldr	r3, [pc, #84]	; (62ac <grid_sys_ping+0x8c>)
    6256:	4798      	blx	r3
    6258:	4602      	mov	r2, r0
    625a:	4915      	ldr	r1, [pc, #84]	; (62b0 <grid_sys_ping+0x90>)
    625c:	4638      	mov	r0, r7
    625e:	47c0      	blx	r8
	
	// Calculate the new packet length
	len += strlen(&str[len]);
    6260:	4638      	mov	r0, r7
    6262:	47a8      	blx	r5
	
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, len)){
    6264:	f506 76ce 	add.w	r6, r6, #412	; 0x19c
	len += strlen(&str[len]);
    6268:	4420      	add	r0, r4
	if (grid_buffer_write_init(&por->tx_buffer, len)){
    626a:	b2c5      	uxtb	r5, r0
    626c:	4629      	mov	r1, r5
    626e:	4630      	mov	r0, r6
    6270:	4b10      	ldr	r3, [pc, #64]	; (62b4 <grid_sys_ping+0x94>)
    6272:	4798      	blx	r3
    6274:	b180      	cbz	r0, 6298 <grid_sys_ping+0x78>
		
		for(uint16_t i = 0; i<len; i++){
    6276:	b165      	cbz	r5, 6292 <grid_sys_ping+0x72>
    6278:	f10d 0413 	add.w	r4, sp, #19
    627c:	3d01      	subs	r5, #1
    627e:	ab05      	add	r3, sp, #20
    6280:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, str[i]);
    6284:	4f0c      	ldr	r7, [pc, #48]	; (62b8 <grid_sys_ping+0x98>)
    6286:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    628a:	4630      	mov	r0, r6
    628c:	47b8      	blx	r7
		for(uint16_t i = 0; i<len; i++){
    628e:	42ac      	cmp	r4, r5
    6290:	d1f9      	bne.n	6286 <grid_sys_ping+0x66>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    6292:	4630      	mov	r0, r6
    6294:	4b09      	ldr	r3, [pc, #36]	; (62bc <grid_sys_ping+0x9c>)
    6296:	4798      	blx	r3
	}
				
	
}
    6298:	b00a      	add	sp, #40	; 0x28
    629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    629e:	bf00      	nop
    62a0:	00005ff1 	.word	0x00005ff1
    62a4:	000098a0 	.word	0x000098a0
    62a8:	00008b05 	.word	0x00008b05
    62ac:	00006159 	.word	0x00006159
    62b0:	000098b0 	.word	0x000098b0
    62b4:	000061c5 	.word	0x000061c5
    62b8:	000061f5 	.word	0x000061f5
    62bc:	00006211 	.word	0x00006211
    62c0:	00008abd 	.word	0x00008abd

000062c4 <grid_sys_ping_all>:
void grid_sys_ping_all(){
    62c4:	b510      	push	{r4, lr}
	grid_sys_ping(&GRID_PORT_N);
    62c6:	4805      	ldr	r0, [pc, #20]	; (62dc <grid_sys_ping_all+0x18>)
    62c8:	4c05      	ldr	r4, [pc, #20]	; (62e0 <grid_sys_ping_all+0x1c>)
    62ca:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_E);
    62cc:	4805      	ldr	r0, [pc, #20]	; (62e4 <grid_sys_ping_all+0x20>)
    62ce:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_S);
    62d0:	4805      	ldr	r0, [pc, #20]	; (62e8 <grid_sys_ping_all+0x24>)
    62d2:	47a0      	blx	r4
	grid_sys_ping(&GRID_PORT_W);
    62d4:	4805      	ldr	r0, [pc, #20]	; (62ec <grid_sys_ping_all+0x28>)
    62d6:	47a0      	blx	r4
    62d8:	bd10      	pop	{r4, pc}
    62da:	bf00      	nop
    62dc:	200019d0 	.word	0x200019d0
    62e0:	00006221 	.word	0x00006221
    62e4:	200027b8 	.word	0x200027b8
    62e8:	20002344 	.word	0x20002344
    62ec:	20001d84 	.word	0x20001d84

000062f0 <grid_buffer_read_size>:
}


uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    62f0:	8983      	ldrh	r3, [r0, #12]
    62f2:	8942      	ldrh	r2, [r0, #10]
    62f4:	429a      	cmp	r2, r3
    62f6:	d000      	beq.n	62fa <grid_buffer_read_size+0xa>
    62f8:	e7fe      	b.n	62f8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    62fa:	8902      	ldrh	r2, [r0, #8]
    62fc:	429a      	cmp	r2, r3
    62fe:	d000      	beq.n	6302 <grid_buffer_read_size+0x12>
    6300:	e7fe      	b.n	6300 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
    6302:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    6304:	8a05      	ldrh	r5, [r0, #16]
    6306:	42ab      	cmp	r3, r5
    6308:	d025      	beq.n	6356 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    630a:	8804      	ldrh	r4, [r0, #0]
    630c:	b1fc      	cbz	r4, 634e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    630e:	4626      	mov	r6, r4
    6310:	fb93 f2f4 	sdiv	r2, r3, r4
    6314:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    6318:	b291      	uxth	r1, r2
    631a:	428d      	cmp	r5, r1
    631c:	d01d      	beq.n	635a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    631e:	6840      	ldr	r0, [r0, #4]
    6320:	5c42      	ldrb	r2, [r0, r1]
    6322:	2a0a      	cmp	r2, #10
    6324:	d114      	bne.n	6350 <grid_buffer_read_size+0x60>
    6326:	2300      	movs	r3, #0
						
			return i+1; // packet length
    6328:	3301      	adds	r3, #1
    632a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    632c:	bcf0      	pop	{r4, r5, r6, r7}
    632e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6330:	fb92 f1f6 	sdiv	r1, r2, r6
    6334:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    6338:	b28f      	uxth	r7, r1
    633a:	42bd      	cmp	r5, r7
    633c:	d00f      	beq.n	635e <grid_buffer_read_size+0x6e>
    633e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6340:	5dc1      	ldrb	r1, [r0, r7]
    6342:	290a      	cmp	r1, #10
    6344:	d0f0      	beq.n	6328 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6346:	3301      	adds	r3, #1
    6348:	b29b      	uxth	r3, r3
    634a:	42a3      	cmp	r3, r4
    634c:	d1f0      	bne.n	6330 <grid_buffer_read_size+0x40>
    634e:	e7fe      	b.n	634e <grid_buffer_read_size+0x5e>
    6350:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    6352:	2300      	movs	r3, #0
    6354:	e7f7      	b.n	6346 <grid_buffer_read_size+0x56>
		return 0;
    6356:	2000      	movs	r0, #0
    6358:	e7e8      	b.n	632c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    635a:	2000      	movs	r0, #0
    635c:	e7e6      	b.n	632c <grid_buffer_read_size+0x3c>
    635e:	2000      	movs	r0, #0
    6360:	e7e4      	b.n	632c <grid_buffer_read_size+0x3c>

00006362 <grid_buffer_read_init>:



uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    6362:	8982      	ldrh	r2, [r0, #12]
    6364:	8943      	ldrh	r3, [r0, #10]
    6366:	4293      	cmp	r3, r2
    6368:	d000      	beq.n	636c <grid_buffer_read_init+0xa>
    636a:	e7fe      	b.n	636a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    636c:	8903      	ldrh	r3, [r0, #8]
    636e:	4293      	cmp	r3, r2
    6370:	d000      	beq.n	6374 <grid_buffer_read_init+0x12>
    6372:	e7fe      	b.n	6372 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
    6374:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    6376:	8a05      	ldrh	r5, [r0, #16]
    6378:	42aa      	cmp	r2, r5
    637a:	d031      	beq.n	63e0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    637c:	8804      	ldrh	r4, [r0, #0]
    637e:	b35c      	cbz	r4, 63d8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6380:	4626      	mov	r6, r4
    6382:	fb92 f3f4 	sdiv	r3, r2, r4
    6386:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    638a:	b299      	uxth	r1, r3
    638c:	428d      	cmp	r5, r1
    638e:	d029      	beq.n	63e4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    6390:	6847      	ldr	r7, [r0, #4]
    6392:	460b      	mov	r3, r1
    6394:	5c79      	ldrb	r1, [r7, r1]
    6396:	290a      	cmp	r1, #10
    6398:	d11f      	bne.n	63da <grid_buffer_read_init+0x78>
    639a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    639c:	3301      	adds	r3, #1
    639e:	fb93 f2f4 	sdiv	r2, r3, r4
    63a2:	fb04 3312 	mls	r3, r4, r2, r3
    63a6:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    63a8:	1c4b      	adds	r3, r1, #1
    63aa:	b29b      	uxth	r3, r3
    63ac:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    63ae:	4618      	mov	r0, r3
    63b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    63b2:	fb92 f3f6 	sdiv	r3, r2, r6
    63b6:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    63ba:	fa1f fe83 	uxth.w	lr, r3
    63be:	4575      	cmp	r5, lr
    63c0:	d012      	beq.n	63e8 <grid_buffer_read_init+0x86>
    63c2:	4673      	mov	r3, lr
    63c4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    63c6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    63ca:	f1be 0f0a 	cmp.w	lr, #10
    63ce:	d0e5      	beq.n	639c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    63d0:	3101      	adds	r1, #1
    63d2:	b289      	uxth	r1, r1
    63d4:	42a1      	cmp	r1, r4
    63d6:	d1ec      	bne.n	63b2 <grid_buffer_read_init+0x50>
    63d8:	e7fe      	b.n	63d8 <grid_buffer_read_init+0x76>
    63da:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    63dc:	2100      	movs	r1, #0
    63de:	e7f7      	b.n	63d0 <grid_buffer_read_init+0x6e>
		return 0;
    63e0:	2300      	movs	r3, #0
    63e2:	e7e4      	b.n	63ae <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    63e4:	2300      	movs	r3, #0
    63e6:	e7e2      	b.n	63ae <grid_buffer_read_init+0x4c>
    63e8:	2300      	movs	r3, #0
    63ea:	e7e0      	b.n	63ae <grid_buffer_read_init+0x4c>

000063ec <grid_buffer_read_character>:


uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    63ec:	8983      	ldrh	r3, [r0, #12]
    63ee:	8941      	ldrh	r1, [r0, #10]
    63f0:	4299      	cmp	r1, r3
    63f2:	d00e      	beq.n	6412 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
    63f4:	b410      	push	{r4}
    63f6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    63f8:	6841      	ldr	r1, [r0, #4]
    63fa:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    63fc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    63fe:	b29b      	uxth	r3, r3
    6400:	8814      	ldrh	r4, [r2, #0]
    6402:	fbb3 f1f4 	udiv	r1, r3, r4
    6406:	fb04 3311 	mls	r3, r4, r1, r3
    640a:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    640c:	f85d 4b04 	ldr.w	r4, [sp], #4
    6410:	4770      	bx	lr
    6412:	e7fe      	b.n	6412 <grid_buffer_read_character+0x26>

00006414 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(GRID_BUFFER_t* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    6414:	8983      	ldrh	r3, [r0, #12]
    6416:	8942      	ldrh	r2, [r0, #10]
    6418:	429a      	cmp	r2, r3
    641a:	d000      	beq.n	641e <grid_buffer_read_acknowledge+0xa>
    641c:	e7fe      	b.n	641c <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    641e:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    6420:	2001      	movs	r0, #1
    6422:	4770      	bx	lr

00006424 <grid_port_init>:
	return 1;
}



void grid_port_init(GRID_PORT_t* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir){
    6424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6426:	4604      	mov	r4, r0
    6428:	4617      	mov	r7, r2
    642a:	461e      	mov	r6, r3
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    642c:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    6430:	4d0d      	ldr	r5, [pc, #52]	; (6468 <grid_port_init+0x44>)
    6432:	47a8      	blx	r5
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    6434:	4639      	mov	r1, r7
    6436:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    643a:	47a8      	blx	r5
	
	por->direction = dir;
    643c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    6440:	7163      	strb	r3, [r4, #5]
	
	por->usart	= usart;
    6442:	6026      	str	r6, [r4, #0]
	por->type		= type;
    6444:	f89d 3018 	ldrb.w	r3, [sp, #24]
    6448:	7123      	strb	r3, [r4, #4]
	por->tx_double_buffer_status	= 0;
    644a:	2300      	movs	r3, #0
    644c:	80e3      	strh	r3, [r4, #6]
	por->rx_double_buffer_status	= 0;
    644e:	8123      	strh	r3, [r4, #8]
	
	por->partner_dx = 0;
    6450:	f884 31d1 	strb.w	r3, [r4, #465]	; 0x1d1
	por->partner_dy = 0;
    6454:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
	por->partner_fi = 0;
    6458:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	
	por->partner_hwcfg = 0;
    645c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	por->partner_status = 0;
    6460:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
    6464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6466:	bf00      	nop
    6468:	00006171 	.word	0x00006171

0000646c <grid_port_init_all>:
}




void grid_port_init_all(){
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	b082      	sub	sp, #8
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH);
    6472:	2311      	movs	r3, #17
    6474:	9301      	str	r3, [sp, #4]
    6476:	2401      	movs	r4, #1
    6478:	9400      	str	r4, [sp, #0]
    647a:	4b1f      	ldr	r3, [pc, #124]	; (64f8 <grid_port_init_all+0x8c>)
    647c:	f44f 7248 	mov.w	r2, #800	; 0x320
    6480:	4611      	mov	r1, r2
    6482:	481e      	ldr	r0, [pc, #120]	; (64fc <grid_port_init_all+0x90>)
    6484:	4d1e      	ldr	r5, [pc, #120]	; (6500 <grid_port_init_all+0x94>)
    6486:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST);
    6488:	2312      	movs	r3, #18
    648a:	9301      	str	r3, [sp, #4]
    648c:	9400      	str	r4, [sp, #0]
    648e:	4b1d      	ldr	r3, [pc, #116]	; (6504 <grid_port_init_all+0x98>)
    6490:	f44f 7248 	mov.w	r2, #800	; 0x320
    6494:	4611      	mov	r1, r2
    6496:	481c      	ldr	r0, [pc, #112]	; (6508 <grid_port_init_all+0x9c>)
    6498:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH);
    649a:	2313      	movs	r3, #19
    649c:	9301      	str	r3, [sp, #4]
    649e:	9400      	str	r4, [sp, #0]
    64a0:	4b1a      	ldr	r3, [pc, #104]	; (650c <grid_port_init_all+0xa0>)
    64a2:	f44f 7248 	mov.w	r2, #800	; 0x320
    64a6:	4611      	mov	r1, r2
    64a8:	4819      	ldr	r0, [pc, #100]	; (6510 <grid_port_init_all+0xa4>)
    64aa:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST);
    64ac:	2314      	movs	r3, #20
    64ae:	9301      	str	r3, [sp, #4]
    64b0:	9400      	str	r4, [sp, #0]
    64b2:	4b18      	ldr	r3, [pc, #96]	; (6514 <grid_port_init_all+0xa8>)
    64b4:	f44f 7248 	mov.w	r2, #800	; 0x320
    64b8:	4611      	mov	r1, r2
    64ba:	4817      	ldr	r0, [pc, #92]	; (6518 <grid_port_init_all+0xac>)
    64bc:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0);
    64be:	f8df 8060 	ldr.w	r8, [pc, #96]	; 6520 <grid_port_init_all+0xb4>
    64c2:	2600      	movs	r6, #0
    64c4:	9601      	str	r6, [sp, #4]
    64c6:	2303      	movs	r3, #3
    64c8:	9300      	str	r3, [sp, #0]
    64ca:	4633      	mov	r3, r6
    64cc:	f44f 7248 	mov.w	r2, #800	; 0x320
    64d0:	4611      	mov	r1, r2
    64d2:	4640      	mov	r0, r8
    64d4:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0);	
    64d6:	4f11      	ldr	r7, [pc, #68]	; (651c <grid_port_init_all+0xb0>)
    64d8:	9601      	str	r6, [sp, #4]
    64da:	2302      	movs	r3, #2
    64dc:	9300      	str	r3, [sp, #0]
    64de:	4633      	mov	r3, r6
    64e0:	f44f 7248 	mov.w	r2, #800	; 0x320
    64e4:	4611      	mov	r1, r2
    64e6:	4638      	mov	r0, r7
    64e8:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    64ea:	f888 41d3 	strb.w	r4, [r8, #467]	; 0x1d3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    64ee:	f887 41d3 	strb.w	r4, [r7, #467]	; 0x1d3
	
	
}
    64f2:	b002      	add	sp, #8
    64f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f8:	20001400 	.word	0x20001400
    64fc:	200019d0 	.word	0x200019d0
    6500:	00006425 	.word	0x00006425
    6504:	200013b0 	.word	0x200013b0
    6508:	200027b8 	.word	0x200027b8
    650c:	20001504 	.word	0x20001504
    6510:	20002344 	.word	0x20002344
    6514:	200014b4 	.word	0x200014b4
    6518:	20001d84 	.word	0x20001d84
    651c:	200025e4 	.word	0x200025e4
    6520:	20001ba8 	.word	0x20001ba8

00006524 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//

uint8_t grid_port_process_inbound(GRID_PORT_t* por){
    6524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6528:	b089      	sub	sp, #36	; 0x24
    652a:	af00      	add	r7, sp, #0
    652c:	4606      	mov	r6, r0
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    652e:	f500 78da 	add.w	r8, r0, #436	; 0x1b4
    6532:	4640      	mov	r0, r8
    6534:	4b37      	ldr	r3, [pc, #220]	; (6614 <grid_port_process_inbound+0xf0>)
    6536:	4798      	blx	r3
	
	if (!packet_size){
    6538:	b340      	cbz	r0, 658c <grid_port_process_inbound+0x68>
    653a:	4681      	mov	r9, r0
		
		// NO PACKET IN RX BUFFER
		return 0;
		 
	}else{
    653c:	46ea      	mov	sl, sp
			
		uint8_t port_count = 6;
		GRID_PORT_t* port_array[port_count];
		
		port_array[0] = &GRID_PORT_N;
    653e:	4b36      	ldr	r3, [pc, #216]	; (6618 <grid_port_process_inbound+0xf4>)
    6540:	60bb      	str	r3, [r7, #8]
		port_array[1] = &GRID_PORT_E;
    6542:	4b36      	ldr	r3, [pc, #216]	; (661c <grid_port_process_inbound+0xf8>)
    6544:	60fb      	str	r3, [r7, #12]
		port_array[2] = &GRID_PORT_S;
    6546:	4b36      	ldr	r3, [pc, #216]	; (6620 <grid_port_process_inbound+0xfc>)
    6548:	613b      	str	r3, [r7, #16]
		port_array[3] = &GRID_PORT_W;
    654a:	4b36      	ldr	r3, [pc, #216]	; (6624 <grid_port_process_inbound+0x100>)
    654c:	617b      	str	r3, [r7, #20]
		
		port_array[4] = &GRID_PORT_U;
    654e:	4b36      	ldr	r3, [pc, #216]	; (6628 <grid_port_process_inbound+0x104>)
    6550:	61bb      	str	r3, [r7, #24]
		port_array[5] = &GRID_PORT_H;
    6552:	4b36      	ldr	r3, [pc, #216]	; (662c <grid_port_process_inbound+0x108>)
    6554:	61fb      	str	r3, [r7, #28]
    6556:	f107 0508 	add.w	r5, r7, #8
    655a:	f107 0b20 	add.w	fp, r7, #32
    655e:	607d      	str	r5, [r7, #4]
		
		for (uint8_t i=0; i<port_count; i++)
		{
			if (port_array[i] != por){
			
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    6560:	4c33      	ldr	r4, [pc, #204]	; (6630 <grid_port_process_inbound+0x10c>)
			if (port_array[i] != por){
    6562:	687b      	ldr	r3, [r7, #4]
    6564:	f853 0b04 	ldr.w	r0, [r3], #4
    6568:	607b      	str	r3, [r7, #4]
    656a:	4286      	cmp	r6, r0
    656c:	d004      	beq.n	6578 <grid_port_process_inbound+0x54>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    656e:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    6572:	47a0      	blx	r4
    6574:	4581      	cmp	r9, r0
    6576:	d808      	bhi.n	658a <grid_port_process_inbound+0x66>
		for (uint8_t i=0; i<port_count; i++)
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	455b      	cmp	r3, fp
    657c:	d1f1      	bne.n	6562 <grid_port_process_inbound+0x3e>
					return 0;
				}	
			}	
		}
		
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    657e:	4640      	mov	r0, r8
    6580:	4b2c      	ldr	r3, [pc, #176]	; (6634 <grid_port_process_inbound+0x110>)
    6582:	4798      	blx	r3
    6584:	4581      	cmp	r9, r0
    6586:	d006      	beq.n	6596 <grid_port_process_inbound+0x72>
    6588:	e7fe      	b.n	6588 <grid_port_process_inbound+0x64>
    658a:	46d5      	mov	sp, sl
    658c:	2000      	movs	r0, #0
		}	

		
	}
		
}
    658e:	3724      	adds	r7, #36	; 0x24
    6590:	46bd      	mov	sp, r7
    6592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6596:	462c      	mov	r4, r5
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    6598:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 6644 <grid_port_process_inbound+0x120>
    659c:	e006      	b.n	65ac <grid_port_process_inbound+0x88>
    659e:	4649      	mov	r1, r9
    65a0:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    65a4:	47d0      	blx	sl
		for (uint8_t i=0; i<port_count; i++)
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	429c      	cmp	r4, r3
    65aa:	d004      	beq.n	65b6 <grid_port_process_inbound+0x92>
			if (port_array[i] != por){
    65ac:	f854 0b04 	ldr.w	r0, [r4], #4
    65b0:	4286      	cmp	r6, r0
    65b2:	d1f4      	bne.n	659e <grid_port_process_inbound+0x7a>
    65b4:	e7f7      	b.n	65a6 <grid_port_process_inbound+0x82>
    65b6:	f04f 0a00 	mov.w	sl, #0
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    65ba:	f8df b08c 	ldr.w	fp, [pc, #140]	; 6648 <grid_port_process_inbound+0x124>
    65be:	e014      	b.n	65ea <grid_port_process_inbound+0xc6>
			for (uint8_t i=0; i<port_count; i++){
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	429c      	cmp	r4, r3
    65c4:	d00b      	beq.n	65de <grid_port_process_inbound+0xba>
				if (port_array[i] != por){
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	f853 0b04 	ldr.w	r0, [r3], #4
    65cc:	607b      	str	r3, [r7, #4]
    65ce:	4286      	cmp	r6, r0
    65d0:	d0f6      	beq.n	65c0 <grid_port_process_inbound+0x9c>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    65d2:	6839      	ldr	r1, [r7, #0]
    65d4:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    65d8:	4b17      	ldr	r3, [pc, #92]	; (6638 <grid_port_process_inbound+0x114>)
    65da:	4798      	blx	r3
    65dc:	e7f0      	b.n	65c0 <grid_port_process_inbound+0x9c>
    65de:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    65e2:	fa1f f38a 	uxth.w	r3, sl
    65e6:	4599      	cmp	r9, r3
    65e8:	d904      	bls.n	65f4 <grid_port_process_inbound+0xd0>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    65ea:	4640      	mov	r0, r8
    65ec:	47d8      	blx	fp
    65ee:	6038      	str	r0, [r7, #0]
    65f0:	607d      	str	r5, [r7, #4]
    65f2:	e7e8      	b.n	65c6 <grid_port_process_inbound+0xa2>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    65f4:	4640      	mov	r0, r8
    65f6:	4b11      	ldr	r3, [pc, #68]	; (663c <grid_port_process_inbound+0x118>)
    65f8:	4798      	blx	r3
    65fa:	e005      	b.n	6608 <grid_port_process_inbound+0xe4>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    65fc:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    6600:	4b0f      	ldr	r3, [pc, #60]	; (6640 <grid_port_process_inbound+0x11c>)
    6602:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    6604:	42ac      	cmp	r4, r5
    6606:	d0c2      	beq.n	658e <grid_port_process_inbound+0x6a>
			if (port_array[i] != por){
    6608:	f855 0b04 	ldr.w	r0, [r5], #4
    660c:	4286      	cmp	r6, r0
    660e:	d1f5      	bne.n	65fc <grid_port_process_inbound+0xd8>
    6610:	e7f8      	b.n	6604 <grid_port_process_inbound+0xe0>
    6612:	bf00      	nop
    6614:	000062f1 	.word	0x000062f1
    6618:	200019d0 	.word	0x200019d0
    661c:	200027b8 	.word	0x200027b8
    6620:	20002344 	.word	0x20002344
    6624:	20001d84 	.word	0x20001d84
    6628:	20001ba8 	.word	0x20001ba8
    662c:	200025e4 	.word	0x200025e4
    6630:	000061b1 	.word	0x000061b1
    6634:	00006363 	.word	0x00006363
    6638:	000061f5 	.word	0x000061f5
    663c:	00006415 	.word	0x00006415
    6640:	00006211 	.word	0x00006211
    6644:	000061c5 	.word	0x000061c5
    6648:	000063ed 	.word	0x000063ed

0000664c <grid_port_process_inbound_usart>:


uint8_t grid_port_process_inbound_usart(GRID_PORT_t* por){
    664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6650:	b089      	sub	sp, #36	; 0x24
    6652:	af00      	add	r7, sp, #0
    6654:	4604      	mov	r4, r0
	
	// if full packet is available in rx_double_buffer
	if (por->rx_double_buffer_status){
    6656:	8903      	ldrh	r3, [r0, #8]
    6658:	2b00      	cmp	r3, #0
    665a:	d12e      	bne.n	66ba <grid_port_process_inbound_usart+0x6e>
			
	}
	
	
		
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    665c:	f500 78da 	add.w	r8, r0, #436	; 0x1b4
    6660:	4640      	mov	r0, r8
    6662:	4b3e      	ldr	r3, [pc, #248]	; (675c <grid_port_process_inbound_usart+0x110>)
    6664:	4798      	blx	r3
	
	if (!packet_size){
    6666:	4681      	mov	r9, r0
    6668:	2800      	cmp	r0, #0
    666a:	d032      	beq.n	66d2 <grid_port_process_inbound_usart+0x86>
		
		// NO PACKET IN RX BUFFER
		return 0;
		
		}else{
    666c:	46ea      	mov	sl, sp
		
		uint8_t port_count = 6;
		GRID_PORT_t* port_array[port_count];
		
		port_array[0] = &GRID_PORT_N;
    666e:	4b3c      	ldr	r3, [pc, #240]	; (6760 <grid_port_process_inbound_usart+0x114>)
    6670:	60bb      	str	r3, [r7, #8]
		port_array[1] = &GRID_PORT_E;
    6672:	4b3c      	ldr	r3, [pc, #240]	; (6764 <grid_port_process_inbound_usart+0x118>)
    6674:	60fb      	str	r3, [r7, #12]
		port_array[2] = &GRID_PORT_S;
    6676:	4b3c      	ldr	r3, [pc, #240]	; (6768 <grid_port_process_inbound_usart+0x11c>)
    6678:	613b      	str	r3, [r7, #16]
		port_array[3] = &GRID_PORT_W;
    667a:	4b3c      	ldr	r3, [pc, #240]	; (676c <grid_port_process_inbound_usart+0x120>)
    667c:	617b      	str	r3, [r7, #20]
		
		port_array[4] = &GRID_PORT_U;
    667e:	4b3c      	ldr	r3, [pc, #240]	; (6770 <grid_port_process_inbound_usart+0x124>)
    6680:	61bb      	str	r3, [r7, #24]
		port_array[5] = &GRID_PORT_H;
    6682:	4b3c      	ldr	r3, [pc, #240]	; (6774 <grid_port_process_inbound_usart+0x128>)
    6684:	61fb      	str	r3, [r7, #28]
    6686:	f107 0608 	add.w	r6, r7, #8
    668a:	f107 0b20 	add.w	fp, r7, #32
    668e:	607e      	str	r6, [r7, #4]
		
		for (uint8_t i=0; i<port_count; i++)
		{
			if (port_array[i] != por){
				
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    6690:	4d39      	ldr	r5, [pc, #228]	; (6778 <grid_port_process_inbound_usart+0x12c>)
			if (port_array[i] != por){
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	f853 0b04 	ldr.w	r0, [r3], #4
    6698:	607b      	str	r3, [r7, #4]
    669a:	4284      	cmp	r4, r0
    669c:	d004      	beq.n	66a8 <grid_port_process_inbound_usart+0x5c>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    669e:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    66a2:	47a8      	blx	r5
    66a4:	4581      	cmp	r9, r0
    66a6:	d819      	bhi.n	66dc <grid_port_process_inbound_usart+0x90>
		for (uint8_t i=0; i<port_count; i++)
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	455b      	cmp	r3, fp
    66ac:	d1f1      	bne.n	6692 <grid_port_process_inbound_usart+0x46>
					return 0;
				}
			}
		}
		
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    66ae:	4640      	mov	r0, r8
    66b0:	4b32      	ldr	r3, [pc, #200]	; (677c <grid_port_process_inbound_usart+0x130>)
    66b2:	4798      	blx	r3
    66b4:	4581      	cmp	r9, r0
    66b6:	d013      	beq.n	66e0 <grid_port_process_inbound_usart+0x94>
    66b8:	e7fe      	b.n	66b8 <grid_port_process_inbound_usart+0x6c>
		io_write(&por->usart->io, por->rx_double_buffer, por->rx_double_buffer_index);	
    66ba:	8942      	ldrh	r2, [r0, #10]
    66bc:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
    66c0:	6800      	ldr	r0, [r0, #0]
    66c2:	4b2f      	ldr	r3, [pc, #188]	; (6780 <grid_port_process_inbound_usart+0x134>)
    66c4:	4798      	blx	r3
		delay_ms(10);	
    66c6:	200a      	movs	r0, #10
    66c8:	4b2e      	ldr	r3, [pc, #184]	; (6784 <grid_port_process_inbound_usart+0x138>)
    66ca:	4798      	blx	r3
		por->rx_double_buffer_index = 0;
    66cc:	2300      	movs	r3, #0
    66ce:	8163      	strh	r3, [r4, #10]
		por->rx_double_buffer_status = 0;
    66d0:	8123      	strh	r3, [r4, #8]
    66d2:	2000      	movs	r0, #0
		}

		
	}
	
}
    66d4:	3724      	adds	r7, #36	; 0x24
    66d6:	46bd      	mov	sp, r7
    66d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66dc:	46d5      	mov	sp, sl
    66de:	e7f8      	b.n	66d2 <grid_port_process_inbound_usart+0x86>
    66e0:	4635      	mov	r5, r6
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    66e2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6794 <grid_port_process_inbound_usart+0x148>
    66e6:	e006      	b.n	66f6 <grid_port_process_inbound_usart+0xaa>
    66e8:	4649      	mov	r1, r9
    66ea:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    66ee:	47d0      	blx	sl
		for (uint8_t i=0; i<port_count; i++)
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	429d      	cmp	r5, r3
    66f4:	d004      	beq.n	6700 <grid_port_process_inbound_usart+0xb4>
			if (port_array[i] != por){
    66f6:	f855 0b04 	ldr.w	r0, [r5], #4
    66fa:	4284      	cmp	r4, r0
    66fc:	d1f4      	bne.n	66e8 <grid_port_process_inbound_usart+0x9c>
    66fe:	e7f7      	b.n	66f0 <grid_port_process_inbound_usart+0xa4>
    6700:	f04f 0a00 	mov.w	sl, #0
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    6704:	f8df b090 	ldr.w	fp, [pc, #144]	; 6798 <grid_port_process_inbound_usart+0x14c>
    6708:	e014      	b.n	6734 <grid_port_process_inbound_usart+0xe8>
			for (uint8_t i=0; i<port_count; i++){
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	429d      	cmp	r5, r3
    670e:	d00b      	beq.n	6728 <grid_port_process_inbound_usart+0xdc>
				if (port_array[i] != por){
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	f853 0b04 	ldr.w	r0, [r3], #4
    6716:	607b      	str	r3, [r7, #4]
    6718:	4284      	cmp	r4, r0
    671a:	d0f6      	beq.n	670a <grid_port_process_inbound_usart+0xbe>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    671c:	6839      	ldr	r1, [r7, #0]
    671e:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    6722:	4b19      	ldr	r3, [pc, #100]	; (6788 <grid_port_process_inbound_usart+0x13c>)
    6724:	4798      	blx	r3
    6726:	e7f0      	b.n	670a <grid_port_process_inbound_usart+0xbe>
    6728:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    672c:	fa1f f38a 	uxth.w	r3, sl
    6730:	4599      	cmp	r9, r3
    6732:	d904      	bls.n	673e <grid_port_process_inbound_usart+0xf2>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    6734:	4640      	mov	r0, r8
    6736:	47d8      	blx	fp
    6738:	6038      	str	r0, [r7, #0]
    673a:	607e      	str	r6, [r7, #4]
    673c:	e7e8      	b.n	6710 <grid_port_process_inbound_usart+0xc4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    673e:	4640      	mov	r0, r8
    6740:	4b12      	ldr	r3, [pc, #72]	; (678c <grid_port_process_inbound_usart+0x140>)
    6742:	4798      	blx	r3
    6744:	e005      	b.n	6752 <grid_port_process_inbound_usart+0x106>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6746:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    674a:	4b11      	ldr	r3, [pc, #68]	; (6790 <grid_port_process_inbound_usart+0x144>)
    674c:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    674e:	42b5      	cmp	r5, r6
    6750:	d0c0      	beq.n	66d4 <grid_port_process_inbound_usart+0x88>
			if (port_array[i] != por){
    6752:	f856 0b04 	ldr.w	r0, [r6], #4
    6756:	4284      	cmp	r4, r0
    6758:	d1f5      	bne.n	6746 <grid_port_process_inbound_usart+0xfa>
    675a:	e7f8      	b.n	674e <grid_port_process_inbound_usart+0x102>
    675c:	000062f1 	.word	0x000062f1
    6760:	200019d0 	.word	0x200019d0
    6764:	200027b8 	.word	0x200027b8
    6768:	20002344 	.word	0x20002344
    676c:	20001d84 	.word	0x20001d84
    6770:	20001ba8 	.word	0x20001ba8
    6774:	200025e4 	.word	0x200025e4
    6778:	000061b1 	.word	0x000061b1
    677c:	00006363 	.word	0x00006363
    6780:	00001461 	.word	0x00001461
    6784:	000012d5 	.word	0x000012d5
    6788:	000061f5 	.word	0x000061f5
    678c:	00006415 	.word	0x00006415
    6790:	00006211 	.word	0x00006211
    6794:	000061c5 	.word	0x000061c5
    6798:	000063ed 	.word	0x000063ed

0000679c <grid_port_process_outbound_usb>:

//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(GRID_PORT_t* por){
    679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    67a0:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    67a4:	4628      	mov	r0, r5
    67a6:	4b0e      	ldr	r3, [pc, #56]	; (67e0 <grid_port_process_outbound_usb+0x44>)
    67a8:	4798      	blx	r3
	
	if (!packet_size){
    67aa:	b908      	cbnz	r0, 67b0 <grid_port_process_outbound_usb+0x14>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    67ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67b0:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    67b2:	4628      	mov	r0, r5
    67b4:	4b0b      	ldr	r3, [pc, #44]	; (67e4 <grid_port_process_outbound_usb+0x48>)
    67b6:	4798      	blx	r3
    67b8:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    67ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 67f4 <grid_port_process_outbound_usb+0x58>
			usb_tx_double_buffer[i] = character;
    67be:	4f0a      	ldr	r7, [pc, #40]	; (67e8 <grid_port_process_outbound_usb+0x4c>)
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    67c0:	4628      	mov	r0, r5
    67c2:	47c0      	blx	r8
			usb_tx_double_buffer[i] = character;
    67c4:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<packet_size; i++){
    67c6:	3401      	adds	r4, #1
    67c8:	b2e4      	uxtb	r4, r4
    67ca:	b2a3      	uxth	r3, r4
    67cc:	429e      	cmp	r6, r3
    67ce:	d8f7      	bhi.n	67c0 <grid_port_process_outbound_usb+0x24>
		cdcdf_acm_write(usb_tx_double_buffer, packet_size);
    67d0:	4631      	mov	r1, r6
    67d2:	4805      	ldr	r0, [pc, #20]	; (67e8 <grid_port_process_outbound_usb+0x4c>)
    67d4:	4b05      	ldr	r3, [pc, #20]	; (67ec <grid_port_process_outbound_usb+0x50>)
    67d6:	4798      	blx	r3
		grid_buffer_read_acknowledge(&por->tx_buffer);
    67d8:	4628      	mov	r0, r5
    67da:	4b05      	ldr	r3, [pc, #20]	; (67f0 <grid_port_process_outbound_usb+0x54>)
    67dc:	4798      	blx	r3
}
    67de:	e7e5      	b.n	67ac <grid_port_process_outbound_usb+0x10>
    67e0:	000062f1 	.word	0x000062f1
    67e4:	00006363 	.word	0x00006363
    67e8:	2000298c 	.word	0x2000298c
    67ec:	000077b5 	.word	0x000077b5
    67f0:	00006415 	.word	0x00006415
    67f4:	000063ed 	.word	0x000063ed

000067f8 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(GRID_PORT_t* por){
    67f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    67fa:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    67fe:	4628      	mov	r0, r5
    6800:	4b0a      	ldr	r3, [pc, #40]	; (682c <grid_port_process_outbound_ui+0x34>)
    6802:	4798      	blx	r3
	
	if (!packet_size){
    6804:	b900      	cbnz	r0, 6808 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    6806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6808:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    680a:	4628      	mov	r0, r5
    680c:	4b08      	ldr	r3, [pc, #32]	; (6830 <grid_port_process_outbound_ui+0x38>)
    680e:	4798      	blx	r3
    6810:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6812:	4f08      	ldr	r7, [pc, #32]	; (6834 <grid_port_process_outbound_ui+0x3c>)
    6814:	4628      	mov	r0, r5
    6816:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    6818:	3401      	adds	r4, #1
    681a:	b2e4      	uxtb	r4, r4
    681c:	b2a3      	uxth	r3, r4
    681e:	429e      	cmp	r6, r3
    6820:	d8f8      	bhi.n	6814 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    6822:	4628      	mov	r0, r5
    6824:	4b04      	ldr	r3, [pc, #16]	; (6838 <grid_port_process_outbound_ui+0x40>)
    6826:	4798      	blx	r3
}
    6828:	e7ed      	b.n	6806 <grid_port_process_outbound_ui+0xe>
    682a:	bf00      	nop
    682c:	000062f1 	.word	0x000062f1
    6830:	00006363 	.word	0x00006363
    6834:	000063ed 	.word	0x000063ed
    6838:	00006415 	.word	0x00006415

0000683c <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    683c:	88c3      	ldrh	r3, [r0, #6]
    683e:	b103      	cbz	r3, 6842 <grid_port_process_outbound_usart+0x6>
    6840:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
    6842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6846:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    6848:	f500 76ce 	add.w	r6, r0, #412	; 0x19c
    684c:	4630      	mov	r0, r6
    684e:	4b10      	ldr	r3, [pc, #64]	; (6890 <grid_port_process_outbound_usart+0x54>)
    6850:	4798      	blx	r3
		
		if (!packet_size){
    6852:	4607      	mov	r7, r0
    6854:	b908      	cbnz	r0, 685a <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    6856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    685a:	4630      	mov	r0, r6
    685c:	4b0d      	ldr	r3, [pc, #52]	; (6894 <grid_port_process_outbound_usart+0x58>)
    685e:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    6860:	80ef      	strh	r7, [r5, #6]
    6862:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6864:	f8df 8038 	ldr.w	r8, [pc, #56]	; 68a0 <grid_port_process_outbound_usart+0x64>
    6868:	4630      	mov	r0, r6
    686a:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    686c:	192b      	adds	r3, r5, r4
    686e:	7318      	strb	r0, [r3, #12]
			for (uint8_t i = 0; i<packet_size; i++){
    6870:	3401      	adds	r4, #1
    6872:	b2e4      	uxtb	r4, r4
    6874:	b2a3      	uxth	r3, r4
    6876:	429f      	cmp	r7, r3
    6878:	d8f6      	bhi.n	6868 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    687a:	4630      	mov	r0, r6
    687c:	4b06      	ldr	r3, [pc, #24]	; (6898 <grid_port_process_outbound_usart+0x5c>)
    687e:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    6880:	88ea      	ldrh	r2, [r5, #6]
    6882:	f105 010c 	add.w	r1, r5, #12
    6886:	6828      	ldr	r0, [r5, #0]
    6888:	4b04      	ldr	r3, [pc, #16]	; (689c <grid_port_process_outbound_usart+0x60>)
    688a:	4798      	blx	r3
}
    688c:	e7e3      	b.n	6856 <grid_port_process_outbound_usart+0x1a>
    688e:	bf00      	nop
    6890:	000062f1 	.word	0x000062f1
    6894:	00006363 	.word	0x00006363
    6898:	00006415 	.word	0x00006415
    689c:	00001461 	.word	0x00001461
    68a0:	000063ed 	.word	0x000063ed

000068a4 <grid_sys_uart_init>:
void grid_sys_uart_init(){
    68a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    68a8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 693c <grid_sys_uart_init+0x98>
    68ac:	4a15      	ldr	r2, [pc, #84]	; (6904 <grid_sys_uart_init+0x60>)
    68ae:	2101      	movs	r1, #1
    68b0:	4640      	mov	r0, r8
    68b2:	4c15      	ldr	r4, [pc, #84]	; (6908 <grid_sys_uart_init+0x64>)
    68b4:	47a0      	blx	r4
 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    68b6:	4f15      	ldr	r7, [pc, #84]	; (690c <grid_sys_uart_init+0x68>)
    68b8:	4a15      	ldr	r2, [pc, #84]	; (6910 <grid_sys_uart_init+0x6c>)
    68ba:	2101      	movs	r1, #1
    68bc:	4638      	mov	r0, r7
    68be:	47a0      	blx	r4
 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    68c0:	4e14      	ldr	r6, [pc, #80]	; (6914 <grid_sys_uart_init+0x70>)
    68c2:	4a15      	ldr	r2, [pc, #84]	; (6918 <grid_sys_uart_init+0x74>)
    68c4:	2101      	movs	r1, #1
    68c6:	4630      	mov	r0, r6
    68c8:	47a0      	blx	r4
 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    68ca:	4d14      	ldr	r5, [pc, #80]	; (691c <grid_sys_uart_init+0x78>)
    68cc:	4a14      	ldr	r2, [pc, #80]	; (6920 <grid_sys_uart_init+0x7c>)
    68ce:	2101      	movs	r1, #1
    68d0:	4628      	mov	r0, r5
    68d2:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    68d4:	4913      	ldr	r1, [pc, #76]	; (6924 <grid_sys_uart_init+0x80>)
    68d6:	4640      	mov	r0, r8
    68d8:	4c13      	ldr	r4, [pc, #76]	; (6928 <grid_sys_uart_init+0x84>)
    68da:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    68dc:	4913      	ldr	r1, [pc, #76]	; (692c <grid_sys_uart_init+0x88>)
    68de:	4638      	mov	r0, r7
    68e0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    68e2:	4913      	ldr	r1, [pc, #76]	; (6930 <grid_sys_uart_init+0x8c>)
    68e4:	4630      	mov	r0, r6
    68e6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    68e8:	4912      	ldr	r1, [pc, #72]	; (6934 <grid_sys_uart_init+0x90>)
    68ea:	4628      	mov	r0, r5
    68ec:	47a0      	blx	r4
	usart_async_enable(&USART_NORTH);
    68ee:	4640      	mov	r0, r8
    68f0:	4c11      	ldr	r4, [pc, #68]	; (6938 <grid_sys_uart_init+0x94>)
    68f2:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    68f4:	4638      	mov	r0, r7
    68f6:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    68f8:	4630      	mov	r0, r6
    68fa:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    68fc:	4628      	mov	r0, r5
    68fe:	47a0      	blx	r4
    6900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6904:	00006145 	.word	0x00006145
    6908:	00001bb1 	.word	0x00001bb1
    690c:	200013b0 	.word	0x200013b0
    6910:	00006131 	.word	0x00006131
    6914:	20001504 	.word	0x20001504
    6918:	0000611d 	.word	0x0000611d
    691c:	200014b4 	.word	0x200014b4
    6920:	00006109 	.word	0x00006109
    6924:	20001d7c 	.word	0x20001d7c
    6928:	00001b89 	.word	0x00001b89
    692c:	20002340 	.word	0x20002340
    6930:	20002518 	.word	0x20002518
    6934:	20002a54 	.word	0x20002a54
    6938:	00001b5d 	.word	0x00001b5d
    693c:	20001400 	.word	0x20001400

00006940 <TIMER_RX_TIMEOUT_cb>:
{
    6940:	b5f0      	push	{r4, r5, r6, r7, lr}
    6942:	b09b      	sub	sp, #108	; 0x6c
    6944:	460c      	mov	r4, r1
    6946:	4615      	mov	r5, r2
	volatile uint8_t endcommand = 0;
    6948:	2300      	movs	r3, #0
    694a:	f88d 3003 	strb.w	r3, [sp, #3]
    694e:	f100 01d3 	add.w	r1, r0, #211	; 0xd3
		por->rx_double_buffer[i] = 0;
    6952:	469e      	mov	lr, r3
    6954:	b2df      	uxtb	r7, r3
		temp[i] = por->rx_double_buffer[i];
    6956:	784e      	ldrb	r6, [r1, #1]
    6958:	aa1a      	add	r2, sp, #104	; 0x68
    695a:	441a      	add	r2, r3
    695c:	f802 6c64 	strb.w	r6, [r2, #-100]
		por->rx_double_buffer[i] = 0;
    6960:	f801 ef01 	strb.w	lr, [r1, #1]!
		if (temp[i] == '\n'){
    6964:	f812 2c64 	ldrb.w	r2, [r2, #-100]
    6968:	b2d2      	uxtb	r2, r2
    696a:	2a0a      	cmp	r2, #10
			endcommand = i;
    696c:	bf08      	it	eq
    696e:	f88d 7003 	strbeq.w	r7, [sp, #3]
    6972:	3301      	adds	r3, #1
	for(uint8_t i = 0; i<100; i++){
    6974:	2b64      	cmp	r3, #100	; 0x64
    6976:	d1ed      	bne.n	6954 <TIMER_RX_TIMEOUT_cb+0x14>
	uint8_t str[] = "k\n";
    6978:	4b1b      	ldr	r3, [pc, #108]	; (69e8 <TIMER_RX_TIMEOUT_cb+0xa8>)
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	f8ad 3000 	strh.w	r3, [sp]
    6980:	0c1b      	lsrs	r3, r3, #16
    6982:	f88d 3002 	strb.w	r3, [sp, #2]
	if (endcommand>4){
    6986:	f89d 3003 	ldrb.w	r3, [sp, #3]
    698a:	b2db      	uxtb	r3, r3
    698c:	2b04      	cmp	r3, #4
		str[0] = GRID_MSG_ACKNOWLEDGE;
    698e:	bf8c      	ite	hi
    6990:	2306      	movhi	r3, #6
		str[0] = GRID_MSG_NACKNOWLEDGE;
    6992:	2315      	movls	r3, #21
    6994:	f88d 3000 	strb.w	r3, [sp]
	if(grid_buffer_write_init(&por->tx_buffer, 2)){
    6998:	f500 76ce 	add.w	r6, r0, #412	; 0x19c
    699c:	2102      	movs	r1, #2
    699e:	4630      	mov	r0, r6
    69a0:	4b12      	ldr	r3, [pc, #72]	; (69ec <TIMER_RX_TIMEOUT_cb+0xac>)
    69a2:	4798      	blx	r3
    69a4:	b158      	cbz	r0, 69be <TIMER_RX_TIMEOUT_cb+0x7e>
			grid_buffer_write_character(&por->tx_buffer, str[i]);
    69a6:	f89d 1000 	ldrb.w	r1, [sp]
    69aa:	4630      	mov	r0, r6
    69ac:	4f10      	ldr	r7, [pc, #64]	; (69f0 <TIMER_RX_TIMEOUT_cb+0xb0>)
    69ae:	47b8      	blx	r7
    69b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
    69b4:	4630      	mov	r0, r6
    69b6:	47b8      	blx	r7
		grid_buffer_write_acknowledge(&por->tx_buffer);
    69b8:	4630      	mov	r0, r6
    69ba:	4b0e      	ldr	r3, [pc, #56]	; (69f4 <TIMER_RX_TIMEOUT_cb+0xb4>)
    69bc:	4798      	blx	r3
	timer_stop(timer);	
    69be:	4620      	mov	r0, r4
    69c0:	4b0d      	ldr	r3, [pc, #52]	; (69f8 <TIMER_RX_TIMEOUT_cb+0xb8>)
    69c2:	4798      	blx	r3
    69c4:	012b      	lsls	r3, r5, #4
    69c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    69ca:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    69ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    69d0:	f022 0202 	bic.w	r2, r2, #2
    69d4:	641a      	str	r2, [r3, #64]	; 0x40
	_dma_enable_transaction(dma_channel, false);
    69d6:	2100      	movs	r1, #0
    69d8:	4628      	mov	r0, r5
    69da:	4b08      	ldr	r3, [pc, #32]	; (69fc <TIMER_RX_TIMEOUT_cb+0xbc>)
    69dc:	4798      	blx	r3
	timer_start(timer);		
    69de:	4620      	mov	r0, r4
    69e0:	4b07      	ldr	r3, [pc, #28]	; (6a00 <TIMER_RX_TIMEOUT_cb+0xc0>)
    69e2:	4798      	blx	r3
}
    69e4:	b01b      	add	sp, #108	; 0x6c
    69e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69e8:	000098b8 	.word	0x000098b8
    69ec:	000061c5 	.word	0x000061c5
    69f0:	000061f5 	.word	0x000061f5
    69f4:	00006211 	.word	0x00006211
    69f8:	0000182d 	.word	0x0000182d
    69fc:	00002a09 	.word	0x00002a09
    6a00:	000017ed 	.word	0x000017ed

00006a04 <TIMER_EAST_RX_TIMEOUT_cb>:
{
    6a04:	b508      	push	{r3, lr}
	TIMER_RX_TIMEOUT_cb(&GRID_PORT_E, &TIMER_1, DMA_EAST_RX_CHANNEL);
    6a06:	2201      	movs	r2, #1
    6a08:	4902      	ldr	r1, [pc, #8]	; (6a14 <TIMER_EAST_RX_TIMEOUT_cb+0x10>)
    6a0a:	4803      	ldr	r0, [pc, #12]	; (6a18 <TIMER_EAST_RX_TIMEOUT_cb+0x14>)
    6a0c:	4b03      	ldr	r3, [pc, #12]	; (6a1c <TIMER_EAST_RX_TIMEOUT_cb+0x18>)
    6a0e:	4798      	blx	r3
    6a10:	bd08      	pop	{r3, pc}
    6a12:	bf00      	nop
    6a14:	20001494 	.word	0x20001494
    6a18:	200027b8 	.word	0x200027b8
    6a1c:	00006941 	.word	0x00006941

00006a20 <DMA_RX_cb>:
	string2[0]++;
    6a20:	4a04      	ldr	r2, [pc, #16]	; (6a34 <DMA_RX_cb+0x14>)
    6a22:	f892 3474 	ldrb.w	r3, [r2, #1140]	; 0x474
    6a26:	3301      	adds	r3, #1
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
	if (string2[0] !=0){
    6a2e:	b103      	cbz	r3, 6a32 <DMA_RX_cb+0x12>
    6a30:	e7fe      	b.n	6a30 <DMA_RX_cb+0x10>
    6a32:	4770      	bx	lr
    6a34:	20000c3c 	.word	0x20000c3c

00006a38 <DMA_NORTH_RX_cb>:
{
    6a38:	b508      	push	{r3, lr}
	DMA_RX_cb(DMA_NORTH_RX_CHANNEL, &GRID_PORT_N);
    6a3a:	4902      	ldr	r1, [pc, #8]	; (6a44 <DMA_NORTH_RX_cb+0xc>)
    6a3c:	2000      	movs	r0, #0
    6a3e:	4b02      	ldr	r3, [pc, #8]	; (6a48 <DMA_NORTH_RX_cb+0x10>)
    6a40:	4798      	blx	r3
    6a42:	bd08      	pop	{r3, pc}
    6a44:	200019d0 	.word	0x200019d0
    6a48:	00006a21 	.word	0x00006a21

00006a4c <DMA_EAST_RX_cb>:
{
    6a4c:	b508      	push	{r3, lr}
	DMA_RX_cb(DMA_EAST_RX_CHANNEL, &GRID_PORT_E);
    6a4e:	4902      	ldr	r1, [pc, #8]	; (6a58 <DMA_EAST_RX_cb+0xc>)
    6a50:	2001      	movs	r0, #1
    6a52:	4b02      	ldr	r3, [pc, #8]	; (6a5c <DMA_EAST_RX_cb+0x10>)
    6a54:	4798      	blx	r3
    6a56:	bd08      	pop	{r3, pc}
    6a58:	200027b8 	.word	0x200027b8
    6a5c:	00006a21 	.word	0x00006a21

00006a60 <DMA_SOUTH_RX_cb>:
{
    6a60:	b508      	push	{r3, lr}
	DMA_RX_cb(DMA_SOUTH_RX_CHANNEL, &GRID_PORT_S);
    6a62:	4902      	ldr	r1, [pc, #8]	; (6a6c <DMA_SOUTH_RX_cb+0xc>)
    6a64:	2002      	movs	r0, #2
    6a66:	4b02      	ldr	r3, [pc, #8]	; (6a70 <DMA_SOUTH_RX_cb+0x10>)
    6a68:	4798      	blx	r3
    6a6a:	bd08      	pop	{r3, pc}
    6a6c:	20002344 	.word	0x20002344
    6a70:	00006a21 	.word	0x00006a21

00006a74 <DMA_WEST_RX_cb>:
{
    6a74:	b508      	push	{r3, lr}
	DMA_RX_cb(DMA_WEST_RX_CHANNEL, &GRID_PORT_W);
    6a76:	4902      	ldr	r1, [pc, #8]	; (6a80 <DMA_WEST_RX_cb+0xc>)
    6a78:	2003      	movs	r0, #3
    6a7a:	4b02      	ldr	r3, [pc, #8]	; (6a84 <DMA_WEST_RX_cb+0x10>)
    6a7c:	4798      	blx	r3
    6a7e:	bd08      	pop	{r3, pc}
    6a80:	20001d84 	.word	0x20001d84
    6a84:	00006a21 	.word	0x00006a21

00006a88 <grid_rx_timout_init_one>:
void grid_rx_timout_init_one(struct timer_descriptor* timer, struct timer_task* task, void (*function_cb)()){
    6a88:	b510      	push	{r4, lr}
    6a8a:	4604      	mov	r4, r0
	task->interval = 10;
    6a8c:	220a      	movs	r2, #10
    6a8e:	608a      	str	r2, [r1, #8]
	task->cb       = TIMER_EAST_RX_TIMEOUT_cb; //DEWBUFGASDASD
    6a90:	4a04      	ldr	r2, [pc, #16]	; (6aa4 <grid_rx_timout_init_one+0x1c>)
    6a92:	60ca      	str	r2, [r1, #12]
	task->mode     = TIMER_TASK_REPEAT;
    6a94:	2201      	movs	r2, #1
    6a96:	740a      	strb	r2, [r1, #16]
	timer_add_task(timer, task);
    6a98:	4b03      	ldr	r3, [pc, #12]	; (6aa8 <grid_rx_timout_init_one+0x20>)
    6a9a:	4798      	blx	r3
	timer_start(timer);
    6a9c:	4620      	mov	r0, r4
    6a9e:	4b03      	ldr	r3, [pc, #12]	; (6aac <grid_rx_timout_init_one+0x24>)
    6aa0:	4798      	blx	r3
    6aa2:	bd10      	pop	{r4, pc}
    6aa4:	00006a05 	.word	0x00006a05
    6aa8:	0000186d 	.word	0x0000186d
    6aac:	000017ed 	.word	0x000017ed

00006ab0 <grid_rx_timout_init>:
void grid_rx_timout_init(){
    6ab0:	b508      	push	{r3, lr}
	grid_rx_timout_init_one(&TIMER_1,  &TIMER_EAST_RX_TIMEOUT,  TIMER_EAST_RX_TIMEOUT_cb);
    6ab2:	4a03      	ldr	r2, [pc, #12]	; (6ac0 <grid_rx_timout_init+0x10>)
    6ab4:	4903      	ldr	r1, [pc, #12]	; (6ac4 <grid_rx_timout_init+0x14>)
    6ab6:	4804      	ldr	r0, [pc, #16]	; (6ac8 <grid_rx_timout_init+0x18>)
    6ab8:	4b04      	ldr	r3, [pc, #16]	; (6acc <grid_rx_timout_init+0x1c>)
    6aba:	4798      	blx	r3
    6abc:	bd08      	pop	{r3, pc}
    6abe:	bf00      	nop
    6ac0:	00006a05 	.word	0x00006a05
    6ac4:	200010c4 	.word	0x200010c4
    6ac8:	20001494 	.word	0x20001494
    6acc:	00006a89 	.word	0x00006a89

00006ad0 <grid_rx_dma_init_one>:
void grid_rx_dma_init_one(uint8_t dma_rx_channel, GRID_PORT_t* por, uint32_t buffer_length, void (*function_cb)()){
    6ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ad2:	b083      	sub	sp, #12
    6ad4:	4604      	mov	r4, r0
    6ad6:	4617      	mov	r7, r2
    6ad8:	461e      	mov	r6, r3
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    6ada:	460d      	mov	r5, r1
    6adc:	f855 3bd4 	ldr.w	r3, [r5], #212
    6ae0:	6a19      	ldr	r1, [r3, #32]
    6ae2:	3128      	adds	r1, #40	; 0x28
    6ae4:	4b0e      	ldr	r3, [pc, #56]	; (6b20 <grid_rx_dma_init_one+0x50>)
    6ae6:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    6ae8:	4629      	mov	r1, r5
    6aea:	4620      	mov	r0, r4
    6aec:	4b0d      	ldr	r3, [pc, #52]	; (6b24 <grid_rx_dma_init_one+0x54>)
    6aee:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    6af0:	4639      	mov	r1, r7
    6af2:	4620      	mov	r0, r4
    6af4:	4b0c      	ldr	r3, [pc, #48]	; (6b28 <grid_rx_dma_init_one+0x58>)
    6af6:	4798      	blx	r3
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    6af8:	4621      	mov	r1, r4
    6afa:	a801      	add	r0, sp, #4
    6afc:	4b0b      	ldr	r3, [pc, #44]	; (6b2c <grid_rx_dma_init_one+0x5c>)
    6afe:	4798      	blx	r3
	resource_rx->dma_cb.transfer_done = function_cb;
    6b00:	9b01      	ldr	r3, [sp, #4]
    6b02:	601e      	str	r6, [r3, #0]
	resource_rx->dma_cb.error         = function_cb;
    6b04:	9b01      	ldr	r3, [sp, #4]
    6b06:	605e      	str	r6, [r3, #4]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    6b08:	2201      	movs	r2, #1
    6b0a:	2100      	movs	r1, #0
    6b0c:	4620      	mov	r0, r4
    6b0e:	4b08      	ldr	r3, [pc, #32]	; (6b30 <grid_rx_dma_init_one+0x60>)
    6b10:	4798      	blx	r3
	_dma_enable_transaction(dma_rx_channel, false);
    6b12:	2100      	movs	r1, #0
    6b14:	4620      	mov	r0, r4
    6b16:	4b07      	ldr	r3, [pc, #28]	; (6b34 <grid_rx_dma_init_one+0x64>)
    6b18:	4798      	blx	r3
}
    6b1a:	b003      	add	sp, #12
    6b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b1e:	bf00      	nop
    6b20:	00002985 	.word	0x00002985
    6b24:	00002975 	.word	0x00002975
    6b28:	000029b1 	.word	0x000029b1
    6b2c:	00002a49 	.word	0x00002a49
    6b30:	00002921 	.word	0x00002921
    6b34:	00002a09 	.word	0x00002a09

00006b38 <grid_rx_dma_init>:
void grid_rx_dma_init(){
    6b38:	b510      	push	{r4, lr}
	grid_rx_dma_init_one(DMA_NORTH_RX_CHANNEL, &GRID_PORT_N, 15, DMA_NORTH_RX_cb);
    6b3a:	4b0b      	ldr	r3, [pc, #44]	; (6b68 <grid_rx_dma_init+0x30>)
    6b3c:	220f      	movs	r2, #15
    6b3e:	490b      	ldr	r1, [pc, #44]	; (6b6c <grid_rx_dma_init+0x34>)
    6b40:	2000      	movs	r0, #0
    6b42:	4c0b      	ldr	r4, [pc, #44]	; (6b70 <grid_rx_dma_init+0x38>)
    6b44:	47a0      	blx	r4
	grid_rx_dma_init_one(DMA_EAST_RX_CHANNEL,  &GRID_PORT_E, 15, DMA_EAST_RX_cb);
    6b46:	4b0b      	ldr	r3, [pc, #44]	; (6b74 <grid_rx_dma_init+0x3c>)
    6b48:	220f      	movs	r2, #15
    6b4a:	490b      	ldr	r1, [pc, #44]	; (6b78 <grid_rx_dma_init+0x40>)
    6b4c:	2001      	movs	r0, #1
    6b4e:	47a0      	blx	r4
	grid_rx_dma_init_one(DMA_SOUTH_RX_CHANNEL, &GRID_PORT_S, 15, DMA_SOUTH_RX_cb);
    6b50:	4b0a      	ldr	r3, [pc, #40]	; (6b7c <grid_rx_dma_init+0x44>)
    6b52:	220f      	movs	r2, #15
    6b54:	490a      	ldr	r1, [pc, #40]	; (6b80 <grid_rx_dma_init+0x48>)
    6b56:	2002      	movs	r0, #2
    6b58:	47a0      	blx	r4
	grid_rx_dma_init_one(DMA_WEST_RX_CHANNEL,  &GRID_PORT_W, 15, DMA_WEST_RX_cb);
    6b5a:	4b0a      	ldr	r3, [pc, #40]	; (6b84 <grid_rx_dma_init+0x4c>)
    6b5c:	220f      	movs	r2, #15
    6b5e:	490a      	ldr	r1, [pc, #40]	; (6b88 <grid_rx_dma_init+0x50>)
    6b60:	2003      	movs	r0, #3
    6b62:	47a0      	blx	r4
    6b64:	bd10      	pop	{r4, pc}
    6b66:	bf00      	nop
    6b68:	00006a39 	.word	0x00006a39
    6b6c:	200019d0 	.word	0x200019d0
    6b70:	00006ad1 	.word	0x00006ad1
    6b74:	00006a4d 	.word	0x00006a4d
    6b78:	200027b8 	.word	0x200027b8
    6b7c:	00006a61 	.word	0x00006a61
    6b80:	20002344 	.word	0x20002344
    6b84:	00006a75 	.word	0x00006a75
    6b88:	20001d84 	.word	0x20001d84

00006b8c <grid_module_init>:



	
/* ============================== GRID_MODULE_INIT() ================================ */
void grid_module_init(void){
    6b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b90:	b085      	sub	sp, #20
		
					

	grid_port_init_all();	
    6b92:	4b74      	ldr	r3, [pc, #464]	; (6d64 <grid_module_init+0x1d8>)
    6b94:	4798      	blx	r3
		
		
						
	// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
	grid_ain_init(grid_module_ain_buffer_size, 5, 14, 8);		
    6b96:	2308      	movs	r3, #8
    6b98:	220e      	movs	r2, #14
    6b9a:	2105      	movs	r1, #5
    6b9c:	2010      	movs	r0, #16
    6b9e:	4c72      	ldr	r4, [pc, #456]	; (6d68 <grid_module_init+0x1dc>)
    6ba0:	47a0      	blx	r4
	grid_led_init(grid_module_led_buffer_size);
    6ba2:	2010      	movs	r0, #16
    6ba4:	4b71      	ldr	r3, [pc, #452]	; (6d6c <grid_module_init+0x1e0>)
    6ba6:	4798      	blx	r3

	spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    6ba8:	4c71      	ldr	r4, [pc, #452]	; (6d70 <grid_module_init+0x1e4>)
    6baa:	4972      	ldr	r1, [pc, #456]	; (6d74 <grid_module_init+0x1e8>)
    6bac:	4620      	mov	r0, r4
    6bae:	4b72      	ldr	r3, [pc, #456]	; (6d78 <grid_module_init+0x1ec>)
    6bb0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    6bb2:	4a72      	ldr	r2, [pc, #456]	; (6d7c <grid_module_init+0x1f0>)
    6bb4:	2100      	movs	r1, #0
    6bb6:	4620      	mov	r0, r4
    6bb8:	4b71      	ldr	r3, [pc, #452]	; (6d80 <grid_module_init+0x1f4>)
    6bba:	4798      	blx	r3
		


	grid_rx_timout_init();
    6bbc:	4b71      	ldr	r3, [pc, #452]	; (6d84 <grid_module_init+0x1f8>)
    6bbe:	4798      	blx	r3
	
		
	grid_sys_uart_init();
    6bc0:	4b71      	ldr	r3, [pc, #452]	; (6d88 <grid_module_init+0x1fc>)
    6bc2:	4798      	blx	r3
	
	grid_rx_dma_init();	
    6bc4:	4b71      	ldr	r3, [pc, #452]	; (6d8c <grid_module_init+0x200>)
    6bc6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6bc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6bcc:	4b70      	ldr	r3, [pc, #448]	; (6d90 <grid_module_init+0x204>)
    6bce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    6bd2:	4c70      	ldr	r4, [pc, #448]	; (6d94 <grid_module_init+0x208>)
    6bd4:	47a0      	blx	r4
						
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){
    6bd6:	47a0      	blx	r4
    6bd8:	2880      	cmp	r0, #128	; 0x80
    6bda:	d028      	beq.n	6c2e <grid_module_init+0xa2>
		grid_adc_set_config(14, GRID_ADC_CFG_BINARY, 1);
		grid_adc_set_config(15, GRID_ADC_CFG_BINARY, 1);
			
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    6bdc:	4b6d      	ldr	r3, [pc, #436]	; (6d94 <grid_module_init+0x208>)
    6bde:	4798      	blx	r3
    6be0:	2840      	cmp	r0, #64	; 0x40
    6be2:	f000 808d 	beq.w	6d00 <grid_module_init+0x174>
					
	}
				
		
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    6be6:	4c6c      	ldr	r4, [pc, #432]	; (6d98 <grid_module_init+0x20c>)
    6be8:	4b6c      	ldr	r3, [pc, #432]	; (6d9c <grid_module_init+0x210>)
    6bea:	2200      	movs	r2, #0
    6bec:	4611      	mov	r1, r2
    6bee:	4620      	mov	r0, r4
    6bf0:	4f6b      	ldr	r7, [pc, #428]	; (6da0 <grid_module_init+0x214>)
    6bf2:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_0, 0);
    6bf4:	2100      	movs	r1, #0
    6bf6:	4620      	mov	r0, r4
    6bf8:	4e6a      	ldr	r6, [pc, #424]	; (6da4 <grid_module_init+0x218>)
    6bfa:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    6bfc:	4620      	mov	r0, r4
    6bfe:	4d6a      	ldr	r5, [pc, #424]	; (6da8 <grid_module_init+0x21c>)
    6c00:	47a8      	blx	r5
				
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    6c02:	4c6a      	ldr	r4, [pc, #424]	; (6dac <grid_module_init+0x220>)
    6c04:	4b6a      	ldr	r3, [pc, #424]	; (6db0 <grid_module_init+0x224>)
    6c06:	2200      	movs	r2, #0
    6c08:	4611      	mov	r1, r2
    6c0a:	4620      	mov	r0, r4
    6c0c:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_1, 0);
    6c0e:	2100      	movs	r1, #0
    6c10:	4620      	mov	r0, r4
    6c12:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_1);
    6c14:	4620      	mov	r0, r4
    6c16:	47a8      	blx	r5
	
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    6c18:	4c66      	ldr	r4, [pc, #408]	; (6db4 <grid_module_init+0x228>)
    6c1a:	4967      	ldr	r1, [pc, #412]	; (6db8 <grid_module_init+0x22c>)
    6c1c:	4620      	mov	r0, r4
    6c1e:	4b67      	ldr	r3, [pc, #412]	; (6dbc <grid_module_init+0x230>)
    6c20:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    6c22:	4620      	mov	r0, r4
    6c24:	4b66      	ldr	r3, [pc, #408]	; (6dc0 <grid_module_init+0x234>)
    6c26:	4798      	blx	r3

	// GRID_LED Library NEW NEW NEW NEW
	
		
		
}
    6c28:	b005      	add	sp, #20
    6c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    6c2e:	4b65      	ldr	r3, [pc, #404]	; (6dc4 <grid_module_init+0x238>)
    6c30:	f993 a451 	ldrsb.w	sl, [r3, #1105]	; 0x451
    6c34:	f993 9452 	ldrsb.w	r9, [r3, #1106]	; 0x452
    6c38:	f993 8453 	ldrsb.w	r8, [r3, #1107]	; 0x453
    6c3c:	f993 c454 	ldrsb.w	ip, [r3, #1108]	; 0x454
    6c40:	f993 e455 	ldrsb.w	lr, [r3, #1109]	; 0x455
    6c44:	f993 7456 	ldrsb.w	r7, [r3, #1110]	; 0x456
    6c48:	f993 6457 	ldrsb.w	r6, [r3, #1111]	; 0x457
    6c4c:	f993 5458 	ldrsb.w	r5, [r3, #1112]	; 0x458
    6c50:	f993 4459 	ldrsb.w	r4, [r3, #1113]	; 0x459
    6c54:	f993 045a 	ldrsb.w	r0, [r3, #1114]	; 0x45a
    6c58:	f993 145b 	ldrsb.w	r1, [r3, #1115]	; 0x45b
    6c5c:	f993 245c 	ldrsb.w	r2, [r3, #1116]	; 0x45c
    6c60:	9203      	str	r2, [sp, #12]
    6c62:	f993 245d 	ldrsb.w	r2, [r3, #1117]	; 0x45d
    6c66:	9202      	str	r2, [sp, #8]
    6c68:	f993 b45e 	ldrsb.w	fp, [r3, #1118]	; 0x45e
    6c6c:	f8cd b004 	str.w	fp, [sp, #4]
    6c70:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    6c74:	f893 b450 	ldrb.w	fp, [r3, #1104]	; 0x450
    6c78:	f04b 0b03 	orr.w	fp, fp, #3
    6c7c:	f883 b450 	strb.w	fp, [r3, #1104]	; 0x450
    6c80:	f04a 0a03 	orr.w	sl, sl, #3
    6c84:	f883 a451 	strb.w	sl, [r3, #1105]	; 0x451
    6c88:	f049 0903 	orr.w	r9, r9, #3
    6c8c:	f883 9452 	strb.w	r9, [r3, #1106]	; 0x452
    6c90:	f048 0803 	orr.w	r8, r8, #3
    6c94:	f883 8453 	strb.w	r8, [r3, #1107]	; 0x453
    6c98:	f04c 0c03 	orr.w	ip, ip, #3
    6c9c:	f883 c454 	strb.w	ip, [r3, #1108]	; 0x454
    6ca0:	f04e 0e03 	orr.w	lr, lr, #3
    6ca4:	f883 e455 	strb.w	lr, [r3, #1109]	; 0x455
    6ca8:	f047 0703 	orr.w	r7, r7, #3
    6cac:	f883 7456 	strb.w	r7, [r3, #1110]	; 0x456
    6cb0:	f046 0603 	orr.w	r6, r6, #3
    6cb4:	f883 6457 	strb.w	r6, [r3, #1111]	; 0x457
    6cb8:	f045 0503 	orr.w	r5, r5, #3
    6cbc:	f883 5458 	strb.w	r5, [r3, #1112]	; 0x458
    6cc0:	f044 0403 	orr.w	r4, r4, #3
    6cc4:	f883 4459 	strb.w	r4, [r3, #1113]	; 0x459
    6cc8:	f040 0003 	orr.w	r0, r0, #3
    6ccc:	f883 045a 	strb.w	r0, [r3, #1114]	; 0x45a
    6cd0:	f041 0103 	orr.w	r1, r1, #3
    6cd4:	f883 145b 	strb.w	r1, [r3, #1115]	; 0x45b
    6cd8:	9903      	ldr	r1, [sp, #12]
    6cda:	f041 0103 	orr.w	r1, r1, #3
    6cde:	f883 145c 	strb.w	r1, [r3, #1116]	; 0x45c
    6ce2:	9902      	ldr	r1, [sp, #8]
    6ce4:	f041 0103 	orr.w	r1, r1, #3
    6ce8:	f883 145d 	strb.w	r1, [r3, #1117]	; 0x45d
    6cec:	9901      	ldr	r1, [sp, #4]
    6cee:	f041 0103 	orr.w	r1, r1, #3
    6cf2:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    6cf6:	f042 0203 	orr.w	r2, r2, #3
    6cfa:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    6cfe:	e76d      	b.n	6bdc <grid_module_init+0x50>
    6d00:	4b30      	ldr	r3, [pc, #192]	; (6dc4 <grid_module_init+0x238>)
    6d02:	f893 2450 	ldrb.w	r2, [r3, #1104]	; 0x450
    6d06:	f042 0201 	orr.w	r2, r2, #1
    6d0a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
    6d0e:	f893 2451 	ldrb.w	r2, [r3, #1105]	; 0x451
    6d12:	f042 0201 	orr.w	r2, r2, #1
    6d16:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
    6d1a:	f893 2452 	ldrb.w	r2, [r3, #1106]	; 0x452
    6d1e:	f042 0201 	orr.w	r2, r2, #1
    6d22:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
    6d26:	f893 2453 	ldrb.w	r2, [r3, #1107]	; 0x453
    6d2a:	f042 0201 	orr.w	r2, r2, #1
    6d2e:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
    6d32:	f993 045d 	ldrsb.w	r0, [r3, #1117]	; 0x45d
    6d36:	f993 145e 	ldrsb.w	r1, [r3, #1118]	; 0x45e
    6d3a:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    6d3e:	f893 445c 	ldrb.w	r4, [r3, #1116]	; 0x45c
    6d42:	f044 0403 	orr.w	r4, r4, #3
    6d46:	f883 445c 	strb.w	r4, [r3, #1116]	; 0x45c
    6d4a:	f040 0003 	orr.w	r0, r0, #3
    6d4e:	f883 045d 	strb.w	r0, [r3, #1117]	; 0x45d
    6d52:	f041 0103 	orr.w	r1, r1, #3
    6d56:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    6d5a:	f042 0203 	orr.w	r2, r2, #3
    6d5e:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    6d62:	e740      	b.n	6be6 <grid_module_init+0x5a>
    6d64:	0000646d 	.word	0x0000646d
    6d68:	00005c9d 	.word	0x00005c9d
    6d6c:	000059e9 	.word	0x000059e9
    6d70:	20001450 	.word	0x20001450
    6d74:	20002a58 	.word	0x20002a58
    6d78:	0000159d 	.word	0x0000159d
    6d7c:	00005805 	.word	0x00005805
    6d80:	0000156d 	.word	0x0000156d
    6d84:	00006ab1 	.word	0x00006ab1
    6d88:	000068a5 	.word	0x000068a5
    6d8c:	00006b39 	.word	0x00006b39
    6d90:	41008000 	.word	0x41008000
    6d94:	00005ff1 	.word	0x00005ff1
    6d98:	20001384 	.word	0x20001384
    6d9c:	000057f9 	.word	0x000057f9
    6da0:	000010cd 	.word	0x000010cd
    6da4:	0000108d 	.word	0x0000108d
    6da8:	0000122d 	.word	0x0000122d
    6dac:	20001554 	.word	0x20001554
    6db0:	00005ded 	.word	0x00005ded
    6db4:	20001334 	.word	0x20001334
    6db8:	20001d80 	.word	0x20001d80
    6dbc:	00001b89 	.word	0x00001b89
    6dc0:	00001b5d 	.word	0x00001b5d
    6dc4:	20000c3c 	.word	0x20000c3c

00006dc8 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    6dc8:	b570      	push	{r4, r5, r6, lr}
	
	
	
	
	RTC_Scheduler_tick.interval = 1;
    6dca:	4c1d      	ldr	r4, [pc, #116]	; (6e40 <init_timer+0x78>)
    6dcc:	2301      	movs	r3, #1
    6dce:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
	RTC_Scheduler_tick.cb       = RTC_Scheduler_tick_cb;
    6dd2:	4a1c      	ldr	r2, [pc, #112]	; (6e44 <init_timer+0x7c>)
    6dd4:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
	RTC_Scheduler_tick.mode     = TIMER_TASK_REPEAT;
    6dd8:	f884 34ac 	strb.w	r3, [r4, #1196]	; 0x4ac
	
	
	RTC_Scheduler_report.interval = 32768/2; //1sec
    6ddc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6de0:	f8c4 24b8 	str.w	r2, [r4, #1208]	; 0x4b8
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    6de4:	4a18      	ldr	r2, [pc, #96]	; (6e48 <init_timer+0x80>)
    6de6:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    6dea:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
	
		
	RTC_Scheduler_ping.interval = 16380; //1sec
    6dee:	f643 72fc 	movw	r2, #16380	; 0x3ffc
    6df2:	f8c4 24cc 	str.w	r2, [r4, #1228]	; 0x4cc
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    6df6:	4a15      	ldr	r2, [pc, #84]	; (6e4c <init_timer+0x84>)
    6df8:	f8c4 24d0 	str.w	r2, [r4, #1232]	; 0x4d0
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    6dfc:	f884 34d4 	strb.w	r3, [r4, #1236]	; 0x4d4
	
	RTC_Scheduler_task2.interval = 32768/2*20;
    6e00:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6e04:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
	RTC_Scheduler_task2.cb       = RTC_Scheduler_task2_cb;
    6e08:	4a11      	ldr	r2, [pc, #68]	; (6e50 <init_timer+0x88>)
    6e0a:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
	RTC_Scheduler_task2.mode     = TIMER_TASK_REPEAT;
    6e0e:	f884 34e8 	strb.w	r3, [r4, #1256]	; 0x4e8

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_tick);
    6e12:	4d10      	ldr	r5, [pc, #64]	; (6e54 <init_timer+0x8c>)
    6e14:	f204 419c 	addw	r1, r4, #1180	; 0x49c
    6e18:	4628      	mov	r0, r5
    6e1a:	4e0f      	ldr	r6, [pc, #60]	; (6e58 <init_timer+0x90>)
    6e1c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    6e1e:	f504 6196 	add.w	r1, r4, #1200	; 0x4b0
    6e22:	4628      	mov	r0, r5
    6e24:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_task2);
    6e26:	f504 619b 	add.w	r1, r4, #1240	; 0x4d8
    6e2a:	4628      	mov	r0, r5
    6e2c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    6e2e:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
    6e32:	4628      	mov	r0, r5
    6e34:	47b0      	blx	r6
	timer_start(&RTC_Scheduler);
    6e36:	4628      	mov	r0, r5
    6e38:	4b08      	ldr	r3, [pc, #32]	; (6e5c <init_timer+0x94>)
    6e3a:	4798      	blx	r3
    6e3c:	bd70      	pop	{r4, r5, r6, pc}
    6e3e:	bf00      	nop
    6e40:	20000c3c 	.word	0x20000c3c
    6e44:	00005811 	.word	0x00005811
    6e48:	0000582d 	.word	0x0000582d
    6e4c:	0000586d 	.word	0x0000586d
    6e50:	0000584d 	.word	0x0000584d
    6e54:	2000127c 	.word	0x2000127c
    6e58:	0000186d 	.word	0x0000186d
    6e5c:	000017ed 	.word	0x000017ed

00006e60 <main>:
}



int main(void)
{
    6e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e64:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
	
	#include "usb/class/midi/device/audiodf_midi.h"
	
	atmel_start_init();
    6e68:	4b7b      	ldr	r3, [pc, #492]	; (7058 <main+0x1f8>)
    6e6a:	4798      	blx	r3
	
	
	//TIMER_0_example2();

	audiodf_midi_init();
    6e6c:	4b7b      	ldr	r3, [pc, #492]	; (705c <main+0x1fc>)
    6e6e:	4798      	blx	r3



	composite_device_start();
    6e70:	4b7b      	ldr	r3, [pc, #492]	; (7060 <main+0x200>)
    6e72:	4798      	blx	r3
	
	grid_module_init();
    6e74:	4b7b      	ldr	r3, [pc, #492]	; (7064 <main+0x204>)
    6e76:	4798      	blx	r3
	
	init_timer();
    6e78:	4b7b      	ldr	r3, [pc, #492]	; (7068 <main+0x208>)
    6e7a:	4798      	blx	r3



	// UI RX EVENT fref=5, alert=50;
	
	struct TEL_event_counter* console_tx = grid_tel_event_register(5, 50);
    6e7c:	2132      	movs	r1, #50	; 0x32
    6e7e:	2005      	movs	r0, #5
    6e80:	4b7a      	ldr	r3, [pc, #488]	; (706c <main+0x20c>)
    6e82:	4798      	blx	r3
	
	while(console_tx == NULL){/*TRAP*/}	
    6e84:	b900      	cbnz	r0, 6e88 <main+0x28>
    6e86:	e7fe      	b.n	6e86 <main+0x26>
    6e88:	2300      	movs	r3, #0
    6e8a:	9314      	str	r3, [sp, #80]	; 0x50
    6e8c:	930d      	str	r3, [sp, #52]	; 0x34
    6e8e:	9312      	str	r3, [sp, #72]	; 0x48
    6e90:	2201      	movs	r2, #1
    6e92:	920f      	str	r2, [sp, #60]	; 0x3c
    6e94:	9310      	str	r3, [sp, #64]	; 0x40
    6e96:	9313      	str	r3, [sp, #76]	; 0x4c
    6e98:	930e      	str	r3, [sp, #56]	; 0x38
	uint8_t current_message_id = 0;

	while (1) {
				
				
		if (pingflag){
    6e9a:	4f75      	ldr	r7, [pc, #468]	; (7070 <main+0x210>)
			
			grid_sys_ping_all();
			pingflag = 0;
    6e9c:	469b      	mov	fp, r3
    6e9e:	e179      	b.n	7194 <main+0x334>
			grid_sys_ping_all();
    6ea0:	4b74      	ldr	r3, [pc, #464]	; (7074 <main+0x214>)
    6ea2:	4798      	blx	r3
			pingflag = 0;
    6ea4:	f887 b032 	strb.w	fp, [r7, #50]	; 0x32
    6ea8:	e179      	b.n	719e <main+0x33e>
		
		// REPORT OVER CDC SERIAL FOR DEBUGING
		if (loopcounter == 100){
			
			
			cdcdf_acm_write(system_report_tasks, strlen(system_report_tasks));		
    6eaa:	a88c      	add	r0, sp, #560	; 0x230
    6eac:	4b72      	ldr	r3, [pc, #456]	; (7078 <main+0x218>)
    6eae:	4798      	blx	r3
    6eb0:	4601      	mov	r1, r0
    6eb2:	a88c      	add	r0, sp, #560	; 0x230
    6eb4:	4b71      	ldr	r3, [pc, #452]	; (707c <main+0x21c>)
    6eb6:	4798      	blx	r3
    6eb8:	e179      	b.n	71ae <main+0x34e>
		}else if (loopcounter == 200){
			cdcdf_acm_write(system_report_grid, strlen(system_report_grid));		
    6eba:	a85a      	add	r0, sp, #360	; 0x168
    6ebc:	4b6e      	ldr	r3, [pc, #440]	; (7078 <main+0x218>)
    6ebe:	4798      	blx	r3
    6ec0:	4601      	mov	r1, r0
    6ec2:	a85a      	add	r0, sp, #360	; 0x168
    6ec4:	4b6d      	ldr	r3, [pc, #436]	; (707c <main+0x21c>)
    6ec6:	4798      	blx	r3
    6ec8:	e171      	b.n	71ae <main+0x34e>
								
				static struct hiddf_kb_key_descriptors key_array[]      = {
					{HID_CAPS_LOCK, false, HID_KB_KEY_DOWN},
				};
				
				hiddf_keyboard_keys_state_change(key_array, 1);
    6eca:	2101      	movs	r1, #1
    6ecc:	486c      	ldr	r0, [pc, #432]	; (7080 <main+0x220>)
    6ece:	4b6d      	ldr	r3, [pc, #436]	; (7084 <main+0x224>)
    6ed0:	4798      	blx	r3
				//audiodf_midi_xfer_packet(0x09, 0x90, 0x64, 0x64); // cable 0 channel 0 note on 
				hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
    6ed2:	2101      	movs	r1, #1
    6ed4:	f06f 0013 	mvn.w	r0, #19
    6ed8:	4b6b      	ldr	r3, [pc, #428]	; (7088 <main+0x228>)
    6eda:	4798      	blx	r3
    6edc:	e04d      	b.n	6f7a <main+0x11a>
						uint8_t ra = random()%3;
						
						if (ra == 0){
							r[i] = 255;
						}
						else if (ra == 1){
    6ede:	2801      	cmp	r0, #1
							g[i] = 255;
    6ee0:	bf0c      	ite	eq
    6ee2:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
						}
						else{
							b[i] = 255;
    6ee4:	9b15      	ldrne	r3, [sp, #84]	; 0x54
    6ee6:	f883 a000 	strb.w	sl, [r3]
    6eea:	3401      	adds	r4, #1
    6eec:	3501      	adds	r5, #1
    6eee:	3601      	adds	r6, #1
				for (uint8_t i = 0; i<4; i++){
    6ef0:	45a0      	cmp	r8, r4
    6ef2:	d01b      	beq.n	6f2c <main+0xcc>
    6ef4:	940b      	str	r4, [sp, #44]	; 0x2c
					if (r[i] == 0 && g[i] == 0 && b[i]==0){
    6ef6:	7823      	ldrb	r3, [r4, #0]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d1f6      	bne.n	6eea <main+0x8a>
    6efc:	950c      	str	r5, [sp, #48]	; 0x30
    6efe:	782b      	ldrb	r3, [r5, #0]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d1f2      	bne.n	6eea <main+0x8a>
    6f04:	9615      	str	r6, [sp, #84]	; 0x54
    6f06:	7833      	ldrb	r3, [r6, #0]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d1ee      	bne.n	6eea <main+0x8a>
						uint8_t ra = random()%3;
    6f0c:	47c8      	blx	r9
    6f0e:	4b5f      	ldr	r3, [pc, #380]	; (708c <main+0x22c>)
    6f10:	fb83 2300 	smull	r2, r3, r3, r0
    6f14:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    6f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6f1c:	1ac0      	subs	r0, r0, r3
						if (ra == 0){
    6f1e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    6f22:	d1dc      	bne.n	6ede <main+0x7e>
							r[i] = 255;
    6f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6f26:	f883 a000 	strb.w	sl, [r3]
    6f2a:	e7de      	b.n	6eea <main+0x8a>
    6f2c:	2500      	movs	r5, #0
				
				
				for (uint8_t i = 0; i<16; i++){
					
					grid_led_set_max(i, 0, r[i%4], g[i%4], b[i%4]);
					grid_led_set_mid(i, 0, r[i%4]/2, g[i%4]/2, b[i%4]/2);
    6f2e:	f8df a180 	ldr.w	sl, [pc, #384]	; 70b0 <main+0x250>
    6f32:	b2ee      	uxtb	r6, r5
					grid_led_set_max(i, 0, r[i%4], g[i%4], b[i%4]);
    6f34:	f006 0303 	and.w	r3, r6, #3
    6f38:	aa16      	add	r2, sp, #88	; 0x58
    6f3a:	f812 8003 	ldrb.w	r8, [r2, r3]
    6f3e:	aa18      	add	r2, sp, #96	; 0x60
    6f40:	f812 9003 	ldrb.w	r9, [r2, r3]
    6f44:	aa1a      	add	r2, sp, #104	; 0x68
    6f46:	5cd3      	ldrb	r3, [r2, r3]
    6f48:	930b      	str	r3, [sp, #44]	; 0x2c
    6f4a:	9300      	str	r3, [sp, #0]
    6f4c:	464b      	mov	r3, r9
    6f4e:	4642      	mov	r2, r8
    6f50:	4659      	mov	r1, fp
    6f52:	4630      	mov	r0, r6
    6f54:	4c4e      	ldr	r4, [pc, #312]	; (7090 <main+0x230>)
    6f56:	47a0      	blx	r4
					grid_led_set_mid(i, 0, r[i%4]/2, g[i%4]/2, b[i%4]/2);
    6f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6f5a:	085c      	lsrs	r4, r3, #1
    6f5c:	9400      	str	r4, [sp, #0]
    6f5e:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6f62:	ea4f 0258 	mov.w	r2, r8, lsr #1
    6f66:	4659      	mov	r1, fp
    6f68:	4630      	mov	r0, r6
    6f6a:	47d0      	blx	sl
    6f6c:	3501      	adds	r5, #1
				for (uint8_t i = 0; i<16; i++){
    6f6e:	2d10      	cmp	r5, #16
    6f70:	d1df      	bne.n	6f32 <main+0xd2>
					
				}
				
				
				
				sysmode = ! sysmode;
    6f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f74:	f083 0301 	eor.w	r3, r3, #1
    6f78:	9312      	str	r3, [sp, #72]	; 0x48
				
				
				
			}
			
			mapmode = !mapmode;
    6f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6f7c:	f083 0301 	eor.w	r3, r3, #1
    6f80:	930f      	str	r3, [sp, #60]	; 0x3c
					
		}
		
		
		
		if (faketimer > 100){
    6f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f84:	2b64      	cmp	r3, #100	; 0x64
    6f86:	d81d      	bhi.n	6fc4 <main+0x164>
			grid_tel_frequency_tick();
			faketimer = 0;
		}
		faketimer++;
    6f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f8a:	3301      	adds	r3, #1
    6f8c:	930e      	str	r3, [sp, #56]	; 0x38
			
		/* ========================= UI_PROCESS_INBOUND ============================= */
		
		// Push out all changes
		
		task_current = TASK_UIIN;
    6f8e:	2303      	movs	r3, #3
    6f90:	733b      	strb	r3, [r7, #12]
		int8_t dx = 0;
		int8_t dy = 0;
				
		uint8_t packetvalid = 0;
				
		sprintf(&txbuffer[txindex],
    6f92:	2317      	movs	r3, #23
    6f94:	9303      	str	r3, [sp, #12]
    6f96:	f8cd b008 	str.w	fp, [sp, #8]
    6f9a:	f8cd b004 	str.w	fp, [sp, #4]
    6f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6fa0:	9300      	str	r3, [sp, #0]
    6fa2:	465b      	mov	r3, fp
    6fa4:	2201      	movs	r2, #1
    6fa6:	493b      	ldr	r1, [pc, #236]	; (7094 <main+0x234>)
    6fa8:	a81a      	add	r0, sp, #104	; 0x68
    6faa:	4c3b      	ldr	r4, [pc, #236]	; (7098 <main+0x238>)
    6fac:	47a0      	blx	r4
			GRID_MSG_START_OF_HEADING,
			len, id, dx, dy,
			GRID_MSG_END_OF_BLOCK
		);
		
		txindex += strlen(&txbuffer[txindex]);
    6fae:	a81a      	add	r0, sp, #104	; 0x68
    6fb0:	4b31      	ldr	r3, [pc, #196]	; (7078 <main+0x218>)
    6fb2:	4798      	blx	r3
    6fb4:	4681      	mov	r9, r0
    6fb6:	465c      	mov	r4, fp
		uint8_t packetvalid = 0;
    6fb8:	46d8      	mov	r8, fp
				
		for (uint8_t i = 0; i<16; i++)
		{
			
			
			if (grid_ain_get_changed(i)){
    6fba:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 70b4 <main+0x254>
    6fbe:	e013      	b.n	6fe8 <main+0x188>
    6fc0:	940f      	str	r4, [sp, #60]	; 0x3c
    6fc2:	e7de      	b.n	6f82 <main+0x122>
			grid_tel_frequency_tick();
    6fc4:	4b35      	ldr	r3, [pc, #212]	; (709c <main+0x23c>)
    6fc6:	4798      	blx	r3
			faketimer = 0;
    6fc8:	2300      	movs	r3, #0
    6fca:	930e      	str	r3, [sp, #56]	; 0x38
    6fcc:	e7dc      	b.n	6f88 <main+0x128>
				
				if (grid_sys_get_hwcfg()==64 && i>11){
					grid_led_set_phase(i-4, 0, average*2/128); // 0...255
				}
				else{
					grid_led_set_phase(i, 0, average*2/128); // 0...255	
    6fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fd0:	005a      	lsls	r2, r3, #1
    6fd2:	bf48      	it	mi
    6fd4:	327f      	addmi	r2, #127	; 0x7f
    6fd6:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    6fda:	4659      	mov	r1, fp
    6fdc:	4628      	mov	r0, r5
    6fde:	4b30      	ldr	r3, [pc, #192]	; (70a0 <main+0x240>)
    6fe0:	4798      	blx	r3
    6fe2:	3401      	adds	r4, #1
		for (uint8_t i = 0; i<16; i++)
    6fe4:	2c10      	cmp	r4, #16
    6fe6:	d067      	beq.n	70b8 <main+0x258>
    6fe8:	b2e5      	uxtb	r5, r4
			if (grid_ain_get_changed(i)){
    6fea:	4628      	mov	r0, r5
    6fec:	47d0      	blx	sl
    6fee:	2800      	cmp	r0, #0
    6ff0:	d0f7      	beq.n	6fe2 <main+0x182>
				packetvalid++;
    6ff2:	f108 0301 	add.w	r3, r8, #1
    6ff6:	fa5f f883 	uxtb.w	r8, r3
				uint16_t average = grid_ain_get_average(i);
    6ffa:	4628      	mov	r0, r5
    6ffc:	4b29      	ldr	r3, [pc, #164]	; (70a4 <main+0x244>)
    6ffe:	4798      	blx	r3
    7000:	4602      	mov	r2, r0
    7002:	900b      	str	r0, [sp, #44]	; 0x2c
				sprintf(&txbuffer[txindex], "%c%x%02x%02x%02x%02x%c", 
    7004:	ab1a      	add	r3, sp, #104	; 0x68
    7006:	444b      	add	r3, r9
    7008:	4618      	mov	r0, r3
    700a:	2303      	movs	r3, #3
    700c:	9304      	str	r3, [sp, #16]
    700e:	f3c2 138f 	ubfx	r3, r2, #6, #16
    7012:	9303      	str	r3, [sp, #12]
    7014:	9402      	str	r4, [sp, #8]
    7016:	23b0      	movs	r3, #176	; 0xb0
    7018:	9301      	str	r3, [sp, #4]
    701a:	f8cd b000 	str.w	fp, [sp]
    701e:	465b      	mov	r3, fp
    7020:	2202      	movs	r2, #2
    7022:	4921      	ldr	r1, [pc, #132]	; (70a8 <main+0x248>)
    7024:	900c      	str	r0, [sp, #48]	; 0x30
    7026:	4e1c      	ldr	r6, [pc, #112]	; (7098 <main+0x238>)
    7028:	47b0      	blx	r6
				txindex += strlen(&txbuffer[txindex]);
    702a:	980c      	ldr	r0, [sp, #48]	; 0x30
    702c:	4b12      	ldr	r3, [pc, #72]	; (7078 <main+0x218>)
    702e:	4798      	blx	r3
    7030:	4481      	add	r9, r0
				if (grid_sys_get_hwcfg()==64 && i>11){
    7032:	4b1e      	ldr	r3, [pc, #120]	; (70ac <main+0x24c>)
    7034:	4798      	blx	r3
    7036:	2840      	cmp	r0, #64	; 0x40
    7038:	d1c9      	bne.n	6fce <main+0x16e>
    703a:	2d0b      	cmp	r5, #11
    703c:	d9c7      	bls.n	6fce <main+0x16e>
					grid_led_set_phase(i-4, 0, average*2/128); // 0...255
    703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7040:	005a      	lsls	r2, r3, #1
    7042:	bf48      	it	mi
    7044:	327f      	addmi	r2, #127	; 0x7f
    7046:	1f28      	subs	r0, r5, #4
    7048:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    704c:	4659      	mov	r1, fp
    704e:	b2c0      	uxtb	r0, r0
    7050:	4b13      	ldr	r3, [pc, #76]	; (70a0 <main+0x240>)
    7052:	4798      	blx	r3
    7054:	e7c5      	b.n	6fe2 <main+0x182>
    7056:	bf00      	nop
    7058:	000002d1 	.word	0x000002d1
    705c:	00007ea5 	.word	0x00007ea5
    7060:	00008829 	.word	0x00008829
    7064:	00006b8d 	.word	0x00006b8d
    7068:	00006dc9 	.word	0x00006dc9
    706c:	00005f6d 	.word	0x00005f6d
    7070:	20000c3c 	.word	0x20000c3c
    7074:	000062c5 	.word	0x000062c5
    7078:	00008b05 	.word	0x00008b05
    707c:	000077b5 	.word	0x000077b5
    7080:	20000344 	.word	0x20000344
    7084:	000079f5 	.word	0x000079f5
    7088:	00007c89 	.word	0x00007c89
    708c:	55555556 	.word	0x55555556
    7090:	00005971 	.word	0x00005971
    7094:	000098bc 	.word	0x000098bc
    7098:	00008abd 	.word	0x00008abd
    709c:	00005fd1 	.word	0x00005fd1
    70a0:	000059a1 	.word	0x000059a1
    70a4:	00005f55 	.word	0x00005f55
    70a8:	000098d0 	.word	0x000098d0
    70ac:	00005ff1 	.word	0x00005ff1
    70b0:	0000593d 	.word	0x0000593d
    70b4:	00005f41 	.word	0x00005f41
				
			}
			
		}
		
		if (packetvalid){
    70b8:	f1b8 0f00 	cmp.w	r8, #0
    70bc:	f040 81b0 	bne.w	7420 <main+0x5c0>
		/* ========================= GRID MOVE TASK ============================= */		
		
		uint16_t length = 0;
		
		
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    70c0:	4db2      	ldr	r5, [pc, #712]	; (738c <main+0x52c>)
    70c2:	4628      	mov	r0, r5
    70c4:	4bb2      	ldr	r3, [pc, #712]	; (7390 <main+0x530>)
    70c6:	4798      	blx	r3

		grid_port_process_inbound_usart(&GRID_PORT_E);		
    70c8:	4eb2      	ldr	r6, [pc, #712]	; (7394 <main+0x534>)
    70ca:	4630      	mov	r0, r6
    70cc:	4bb2      	ldr	r3, [pc, #712]	; (7398 <main+0x538>)
    70ce:	4798      	blx	r3
		
		grid_port_process_outbound_usart(&GRID_PORT_N);
    70d0:	48b2      	ldr	r0, [pc, #712]	; (739c <main+0x53c>)
    70d2:	4cb3      	ldr	r4, [pc, #716]	; (73a0 <main+0x540>)
    70d4:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    70d6:	4630      	mov	r0, r6
    70d8:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    70da:	48b2      	ldr	r0, [pc, #712]	; (73a4 <main+0x544>)
    70dc:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    70de:	48b2      	ldr	r0, [pc, #712]	; (73a8 <main+0x548>)
    70e0:	47a0      	blx	r4
		
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    70e2:	48b2      	ldr	r0, [pc, #712]	; (73ac <main+0x54c>)
    70e4:	4bb2      	ldr	r3, [pc, #712]	; (73b0 <main+0x550>)
    70e6:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    70e8:	4628      	mov	r0, r5
    70ea:	4bb2      	ldr	r3, [pc, #712]	; (73b4 <main+0x554>)
    70ec:	4798      	blx	r3
		
	
		task_current = TASK_UNDEFINED;
    70ee:	f887 b00c 	strb.w	fp, [r7, #12]

				
		if (sysmode == 1){
    70f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    70f4:	2b00      	cmp	r3, #0
    70f6:	f040 81db 	bne.w	74b0 <main+0x650>
			
			for (uint8_t i=0; i<16; i++){
				
				//grid_led_set_color(i, 0, 255, 0);
				
				grid_led_set_color(i, colorfade*(colorcode==0), colorfade*(colorcode==1), colorfade*(colorcode==2));
    70fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    70fc:	4613      	mov	r3, r2
    70fe:	9810      	ldr	r0, [sp, #64]	; 0x40
    7100:	2800      	cmp	r0, #0
    7102:	bf18      	it	ne
    7104:	2300      	movne	r3, #0
    7106:	4699      	mov	r9, r3
    7108:	4613      	mov	r3, r2
    710a:	2801      	cmp	r0, #1
    710c:	bf18      	it	ne
    710e:	2200      	movne	r2, #0
    7110:	4690      	mov	r8, r2
    7112:	461a      	mov	r2, r3
    7114:	2802      	cmp	r0, #2
    7116:	bf18      	it	ne
    7118:	2200      	movne	r2, #0
    711a:	4616      	mov	r6, r2
    711c:	2400      	movs	r4, #0
    711e:	4da6      	ldr	r5, [pc, #664]	; (73b8 <main+0x558>)
    7120:	4633      	mov	r3, r6
    7122:	4642      	mov	r2, r8
    7124:	4649      	mov	r1, r9
    7126:	4620      	mov	r0, r4
    7128:	47a8      	blx	r5
    712a:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){
    712c:	2c10      	cmp	r4, #16
    712e:	d1f7      	bne.n	7120 <main+0x2c0>
				
				
			}
			
			colorfade++;
    7130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7132:	3301      	adds	r3, #1
			if (colorfade == 0) colorcode++;
    7134:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7138:	9313      	str	r3, [sp, #76]	; 0x4c
    713a:	d103      	bne.n	7144 <main+0x2e4>
    713c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    713e:	3301      	adds	r3, #1
    7140:	b2db      	uxtb	r3, r3
    7142:	9310      	str	r3, [sp, #64]	; 0x40
			if (colorcode>2) colorcode=0;
    7144:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7146:	4613      	mov	r3, r2
    7148:	9912      	ldr	r1, [sp, #72]	; 0x48
    714a:	2a02      	cmp	r2, #2
    714c:	bf88      	it	hi
    714e:	460b      	movhi	r3, r1
    7150:	9310      	str	r3, [sp, #64]	; 0x40
			
			
			delay_ms(2);
    7152:	2002      	movs	r0, #2
    7154:	4b99      	ldr	r3, [pc, #612]	; (73bc <main+0x55c>)
    7156:	4798      	blx	r3
			
			// SEND DATA TO LEDs
			dma_spi_done = 0;
    7158:	f8c7 b004 	str.w	fp, [r7, #4]
			spi_m_dma_enable(&GRID_LED);
    715c:	4898      	ldr	r0, [pc, #608]	; (73c0 <main+0x560>)
    715e:	4b99      	ldr	r3, [pc, #612]	; (73c4 <main+0x564>)
    7160:	4798      	blx	r3
			
			io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    7162:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    7164:	6b79      	ldr	r1, [r7, #52]	; 0x34
    7166:	4b98      	ldr	r3, [pc, #608]	; (73c8 <main+0x568>)
    7168:	6818      	ldr	r0, [r3, #0]
    716a:	4b98      	ldr	r3, [pc, #608]	; (73cc <main+0x56c>)
    716c:	4798      	blx	r3
			
			while (dma_spi_done == 0)
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	2b00      	cmp	r3, #0
    7172:	d0fc      	beq.n	716e <main+0x30e>
			
			
		}
		
		// IDLETASK
		task_current = TASK_IDLE;
    7174:	2301      	movs	r3, #1
    7176:	733b      	strb	r3, [r7, #12]
		while(loopstart + RTC1SEC/1000 > realtime){
    7178:	9c11      	ldr	r4, [sp, #68]	; 0x44
    717a:	3410      	adds	r4, #16
    717c:	68bb      	ldr	r3, [r7, #8]
    717e:	429c      	cmp	r4, r3
    7180:	d906      	bls.n	7190 <main+0x330>
			delay_us(10);
    7182:	260a      	movs	r6, #10
    7184:	4d92      	ldr	r5, [pc, #584]	; (73d0 <main+0x570>)
    7186:	4630      	mov	r0, r6
    7188:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    718a:	68bb      	ldr	r3, [r7, #8]
    718c:	429c      	cmp	r4, r3
    718e:	d8fa      	bhi.n	7186 <main+0x326>
		}
		
		task_current = TASK_UNDEFINED;
    7190:	f887 b00c 	strb.w	fp, [r7, #12]
		if (pingflag){
    7194:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    7198:	2b00      	cmp	r3, #0
    719a:	f47f ae81 	bne.w	6ea0 <main+0x40>
		if (loopcounter == 100){
    719e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71a0:	2b64      	cmp	r3, #100	; 0x64
    71a2:	f43f ae82 	beq.w	6eaa <main+0x4a>
		}else if (loopcounter == 200){
    71a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71a8:	2bc8      	cmp	r3, #200	; 0xc8
    71aa:	f43f ae86 	beq.w	6eba <main+0x5a>
		if (reportflag){
    71ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    71b2:	2b00      	cmp	r3, #0
    71b4:	d069      	beq.n	728a <main+0x42a>
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
    71b6:	68bb      	ldr	r3, [r7, #8]
    71b8:	693a      	ldr	r2, [r7, #16]
    71ba:	6979      	ldr	r1, [r7, #20]
    71bc:	69b8      	ldr	r0, [r7, #24]
    71be:	69fd      	ldr	r5, [r7, #28]
    71c0:	6a3e      	ldr	r6, [r7, #32]
    71c2:	4c84      	ldr	r4, [pc, #528]	; (73d4 <main+0x574>)
    71c4:	9604      	str	r6, [sp, #16]
    71c6:	9503      	str	r5, [sp, #12]
    71c8:	9002      	str	r0, [sp, #8]
    71ca:	9101      	str	r1, [sp, #4]
    71cc:	9200      	str	r2, [sp, #0]
    71ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    71d0:	f104 0110 	add.w	r1, r4, #16
    71d4:	a88c      	add	r0, sp, #560	; 0x230
    71d6:	4d80      	ldr	r5, [pc, #512]	; (73d8 <main+0x578>)
    71d8:	47a8      	blx	r5
			sprintf(system_report_grid, "N_RX_C %02x\nE_RX_C %02x\nS_RX_C %02x\nW_RX_C %02x\nN_TX_C %02x\nE_TX_C %02x\nS_TX_C %02x\nW_TX_C %02x\nN_BELL_C %02x\nE_BELL_C %02x\nS_BELL_C %02x\nW_BELL_C %02x\n\0", 
    71da:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
    71de:	930b      	str	r3, [sp, #44]	; 0x2c
    71e0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
    71e4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
    71e8:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
    71ec:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
    71f0:	f8d7 5468 	ldr.w	r5, [r7, #1128]	; 0x468
    71f4:	f8d7 646c 	ldr.w	r6, [r7, #1132]	; 0x46c
    71f8:	f8d7 e470 	ldr.w	lr, [r7, #1136]	; 0x470
				grid_sys_ping_counter[GRID_SYS_NORTH],
    71fc:	f897 c524 	ldrb.w	ip, [r7, #1316]	; 0x524
				grid_sys_ping_counter[GRID_SYS_EAST],
    7200:	f897 8525 	ldrb.w	r8, [r7, #1317]	; 0x525
				grid_sys_ping_counter[GRID_SYS_SOUTH],
    7204:	f897 9526 	ldrb.w	r9, [r7, #1318]	; 0x526
				grid_sys_ping_counter[GRID_SYS_WEST]
    7208:	f897 a527 	ldrb.w	sl, [r7, #1319]	; 0x527
			sprintf(system_report_grid, "N_RX_C %02x\nE_RX_C %02x\nS_RX_C %02x\nW_RX_C %02x\nN_TX_C %02x\nE_TX_C %02x\nS_TX_C %02x\nW_TX_C %02x\nN_BELL_C %02x\nE_BELL_C %02x\nS_BELL_C %02x\nW_BELL_C %02x\n\0", 
    720c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    7210:	f8cd 9020 	str.w	r9, [sp, #32]
    7214:	f8cd 801c 	str.w	r8, [sp, #28]
    7218:	f8cd c018 	str.w	ip, [sp, #24]
    721c:	f8cd e014 	str.w	lr, [sp, #20]
    7220:	9604      	str	r6, [sp, #16]
    7222:	9503      	str	r5, [sp, #12]
    7224:	9002      	str	r0, [sp, #8]
    7226:	9101      	str	r1, [sp, #4]
    7228:	9200      	str	r2, [sp, #0]
    722a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    722c:	f104 0168 	add.w	r1, r4, #104	; 0x68
    7230:	a85a      	add	r0, sp, #360	; 0x168
    7232:	4c69      	ldr	r4, [pc, #420]	; (73d8 <main+0x578>)
    7234:	47a0      	blx	r4
			grid_sys_rx_counter[GRID_SYS_NORTH]=0;
    7236:	f8c7 b514 	str.w	fp, [r7, #1300]	; 0x514
			grid_sys_rx_counter[GRID_SYS_EAST]=0;
    723a:	f8c7 b518 	str.w	fp, [r7, #1304]	; 0x518
			grid_sys_rx_counter[GRID_SYS_SOUTH]=0;
    723e:	f8c7 b51c 	str.w	fp, [r7, #1308]	; 0x51c
			grid_sys_rx_counter[GRID_SYS_WEST]=0;
    7242:	f8c7 b520 	str.w	fp, [r7, #1312]	; 0x520
			grid_sys_tx_counter[GRID_SYS_NORTH]=0;
    7246:	f8c7 b464 	str.w	fp, [r7, #1124]	; 0x464
			grid_sys_tx_counter[GRID_SYS_EAST]=0;
    724a:	f8c7 b468 	str.w	fp, [r7, #1128]	; 0x468
			grid_sys_tx_counter[GRID_SYS_SOUTH]=0;
    724e:	f8c7 b46c 	str.w	fp, [r7, #1132]	; 0x46c
			grid_sys_tx_counter[GRID_SYS_WEST]=0;
    7252:	f8c7 b470 	str.w	fp, [r7, #1136]	; 0x470
			grid_sys_ping_counter[GRID_SYS_NORTH]=0;
    7256:	f887 b524 	strb.w	fp, [r7, #1316]	; 0x524
			grid_sys_ping_counter[GRID_SYS_EAST]=0;
    725a:	f887 b525 	strb.w	fp, [r7, #1317]	; 0x525
			grid_sys_ping_counter[GRID_SYS_SOUTH]=0;
    725e:	f887 b526 	strb.w	fp, [r7, #1318]	; 0x526
			grid_sys_ping_counter[GRID_SYS_WEST]=0;
    7262:	f887 b527 	strb.w	fp, [r7, #1319]	; 0x527
			realtime = 0;
    7266:	f8c7 b008 	str.w	fp, [r7, #8]
			reportflag--;
    726a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    726e:	3b01      	subs	r3, #1
    7270:	b2db      	uxtb	r3, r3
    7272:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    7276:	465b      	mov	r3, fp
				task_counter[i] = 0;
    7278:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    727c:	f8c2 b010 	str.w	fp, [r2, #16]
    7280:	3301      	adds	r3, #1
			for (uint8_t i=0; i<8; i++)
    7282:	2b08      	cmp	r3, #8
    7284:	d1f8      	bne.n	7278 <main+0x418>
			loopcounter = 0;
    7286:	2300      	movs	r3, #0
    7288:	930d      	str	r3, [sp, #52]	; 0x34
		loopcounter++;
    728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    728c:	3301      	adds	r3, #1
    728e:	930d      	str	r3, [sp, #52]	; 0x34
		if (task2flag){
    7290:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    7294:	b12b      	cbz	r3, 72a2 <main+0x442>
			task2flag--;
    7296:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    729a:	3b01      	subs	r3, #1
    729c:	b2db      	uxtb	r3, r3
    729e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		loopstart = realtime;
    72a2:	68bb      	ldr	r3, [r7, #8]
    72a4:	9311      	str	r3, [sp, #68]	; 0x44
	CRITICAL_SECTION_ENTER();
    72a6:	a817      	add	r0, sp, #92	; 0x5c
    72a8:	4b4c      	ldr	r3, [pc, #304]	; (73dc <main+0x57c>)
    72aa:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    72ac:	4b4c      	ldr	r3, [pc, #304]	; (73e0 <main+0x580>)
    72ae:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    72b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    72b6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    72ba:	4054      	eors	r4, r2
    72bc:	400c      	ands	r4, r1
    72be:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    72c0:	a817      	add	r0, sp, #92	; 0x5c
    72c2:	4b48      	ldr	r3, [pc, #288]	; (73e4 <main+0x584>)
    72c4:	4798      	blx	r3
		if (mapmode != gpio_get_pin_level(MAP_MODE)){
    72c6:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    72ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    72cc:	42a2      	cmp	r2, r4
    72ce:	f43f ae77 	beq.w	6fc0 <main+0x160>
			if (mapmode == 1){
    72d2:	2a00      	cmp	r2, #0
    72d4:	f47f adf9 	bne.w	6eca <main+0x6a>
				hiddf_keyboard_keys_state_change(key_array, 1);
    72d8:	2101      	movs	r1, #1
    72da:	4843      	ldr	r0, [pc, #268]	; (73e8 <main+0x588>)
    72dc:	4b43      	ldr	r3, [pc, #268]	; (73ec <main+0x58c>)
    72de:	4798      	blx	r3
				uint8_t r[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    72e0:	4c43      	ldr	r4, [pc, #268]	; (73f0 <main+0x590>)
    72e2:	47a0      	blx	r4
    72e4:	2800      	cmp	r0, #0
    72e6:	f000 0001 	and.w	r0, r0, #1
    72ea:	bfa8      	it	ge
    72ec:	4240      	negge	r0, r0
    72ee:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
    72f2:	47a0      	blx	r4
    72f4:	2800      	cmp	r0, #0
    72f6:	f000 0001 	and.w	r0, r0, #1
    72fa:	bfa8      	it	ge
    72fc:	4240      	negge	r0, r0
    72fe:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    7302:	47a0      	blx	r4
    7304:	2800      	cmp	r0, #0
    7306:	f000 0001 	and.w	r0, r0, #1
    730a:	bfa8      	it	ge
    730c:	4240      	negge	r0, r0
    730e:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
    7312:	47a0      	blx	r4
    7314:	2800      	cmp	r0, #0
    7316:	f000 0001 	and.w	r0, r0, #1
    731a:	bfa8      	it	ge
    731c:	4240      	negge	r0, r0
    731e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
				uint8_t g[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    7322:	47a0      	blx	r4
    7324:	2800      	cmp	r0, #0
    7326:	f000 0001 	and.w	r0, r0, #1
    732a:	bfa8      	it	ge
    732c:	4240      	negge	r0, r0
    732e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    7332:	47a0      	blx	r4
    7334:	2800      	cmp	r0, #0
    7336:	f000 0001 	and.w	r0, r0, #1
    733a:	bfa8      	it	ge
    733c:	4240      	negge	r0, r0
    733e:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    7342:	47a0      	blx	r4
    7344:	2800      	cmp	r0, #0
    7346:	f000 0001 	and.w	r0, r0, #1
    734a:	bfa8      	it	ge
    734c:	4240      	negge	r0, r0
    734e:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    7352:	47a0      	blx	r4
    7354:	2800      	cmp	r0, #0
    7356:	f000 0001 	and.w	r0, r0, #1
    735a:	bfa8      	it	ge
    735c:	4240      	negge	r0, r0
    735e:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
				uint8_t b[4] = {255*(random()%2), 255*(random()%2), 255*(random()%2), 255*(random()%2)};
    7362:	47a0      	blx	r4
    7364:	2800      	cmp	r0, #0
    7366:	f000 0001 	and.w	r0, r0, #1
    736a:	bfa8      	it	ge
    736c:	4240      	negge	r0, r0
    736e:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
    7372:	47a0      	blx	r4
    7374:	2800      	cmp	r0, #0
    7376:	f000 0001 	and.w	r0, r0, #1
    737a:	bfa8      	it	ge
    737c:	4240      	negge	r0, r0
    737e:	f88d 0069 	strb.w	r0, [sp, #105]	; 0x69
    7382:	47a0      	blx	r4
    7384:	2800      	cmp	r0, #0
    7386:	f000 0001 	and.w	r0, r0, #1
    738a:	e033      	b.n	73f4 <main+0x594>
    738c:	20001ba8 	.word	0x20001ba8
    7390:	00006525 	.word	0x00006525
    7394:	200027b8 	.word	0x200027b8
    7398:	0000664d 	.word	0x0000664d
    739c:	200019d0 	.word	0x200019d0
    73a0:	0000683d 	.word	0x0000683d
    73a4:	20002344 	.word	0x20002344
    73a8:	20001d84 	.word	0x20001d84
    73ac:	200025e4 	.word	0x200025e4
    73b0:	0000679d 	.word	0x0000679d
    73b4:	000067f9 	.word	0x000067f9
    73b8:	0000587d 	.word	0x0000587d
    73bc:	000012d5 	.word	0x000012d5
    73c0:	20001450 	.word	0x20001450
    73c4:	00001545 	.word	0x00001545
    73c8:	20002a58 	.word	0x20002a58
    73cc:	00001461 	.word	0x00001461
    73d0:	000012b5 	.word	0x000012b5
    73d4:	00009798 	.word	0x00009798
    73d8:	00008abd 	.word	0x00008abd
    73dc:	00001255 	.word	0x00001255
    73e0:	41008000 	.word	0x41008000
    73e4:	00001263 	.word	0x00001263
    73e8:	20000348 	.word	0x20000348
    73ec:	000079f5 	.word	0x000079f5
    73f0:	00008a29 	.word	0x00008a29
    73f4:	bfa8      	it	ge
    73f6:	4240      	negge	r0, r0
    73f8:	f88d 006a 	strb.w	r0, [sp, #106]	; 0x6a
    73fc:	47a0      	blx	r4
    73fe:	2800      	cmp	r0, #0
    7400:	f000 0001 	and.w	r0, r0, #1
    7404:	bfa8      	it	ge
    7406:	4240      	negge	r0, r0
    7408:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    740c:	ac16      	add	r4, sp, #88	; 0x58
    740e:	ad18      	add	r5, sp, #96	; 0x60
    7410:	ae1a      	add	r6, sp, #104	; 0x68
    7412:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
						uint8_t ra = random()%3;
    7416:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 750c <main+0x6ac>
							b[i] = 255;
    741a:	f04f 0aff 	mov.w	sl, #255	; 0xff
    741e:	e569      	b.n	6ef4 <main+0x94>
			current_message_id++;
    7420:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7422:	3301      	adds	r3, #1
    7424:	b2db      	uxtb	r3, r3
    7426:	9314      	str	r3, [sp, #80]	; 0x50
			sprintf(&txbuffer[txindex], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE					
    7428:	ab1a      	add	r3, sp, #104	; 0x68
    742a:	eb03 0409 	add.w	r4, r3, r9
    742e:	2204      	movs	r2, #4
    7430:	4928      	ldr	r1, [pc, #160]	; (74d4 <main+0x674>)
    7432:	4620      	mov	r0, r4
    7434:	4b28      	ldr	r3, [pc, #160]	; (74d8 <main+0x678>)
    7436:	4798      	blx	r3
			txindex += strlen(&txbuffer[txindex]);
    7438:	4620      	mov	r0, r4
    743a:	4b28      	ldr	r3, [pc, #160]	; (74dc <main+0x67c>)
    743c:	4798      	blx	r3
    743e:	4481      	add	r9, r0
			sprintf(length_string, "%02x", txindex);
    7440:	464a      	mov	r2, r9
    7442:	4927      	ldr	r1, [pc, #156]	; (74e0 <main+0x680>)
    7444:	a818      	add	r0, sp, #96	; 0x60
    7446:	4b24      	ldr	r3, [pc, #144]	; (74d8 <main+0x678>)
    7448:	4798      	blx	r3
			txbuffer[1] = length_string[0];
    744a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    744e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
			txbuffer[2] = length_string[1];
    7452:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    7456:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
			sprintf(&txbuffer[txindex], "%02x\n", grid_sys_calculate_checksum(txbuffer, txindex)); // CALCULATE AND ADD CRC HERE
    745a:	ab1a      	add	r3, sp, #104	; 0x68
    745c:	eb03 0409 	add.w	r4, r3, r9
    7460:	4649      	mov	r1, r9
    7462:	4618      	mov	r0, r3
    7464:	4b1f      	ldr	r3, [pc, #124]	; (74e4 <main+0x684>)
    7466:	4798      	blx	r3
    7468:	4602      	mov	r2, r0
    746a:	491f      	ldr	r1, [pc, #124]	; (74e8 <main+0x688>)
    746c:	4620      	mov	r0, r4
    746e:	4b1a      	ldr	r3, [pc, #104]	; (74d8 <main+0x678>)
    7470:	4798      	blx	r3
			txindex += strlen(&txbuffer[txindex]);		
    7472:	4620      	mov	r0, r4
    7474:	4b19      	ldr	r3, [pc, #100]	; (74dc <main+0x67c>)
    7476:	4798      	blx	r3
    7478:	eb09 0400 	add.w	r4, r9, r0
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, txindex)){
    747c:	b2a1      	uxth	r1, r4
    747e:	481b      	ldr	r0, [pc, #108]	; (74ec <main+0x68c>)
    7480:	4b1b      	ldr	r3, [pc, #108]	; (74f0 <main+0x690>)
    7482:	4798      	blx	r3
    7484:	2800      	cmp	r0, #0
    7486:	f43f ae1b 	beq.w	70c0 <main+0x260>
				for(uint16_t i = 0; i<txindex; i++){
    748a:	b16c      	cbz	r4, 74a8 <main+0x648>
    748c:	465d      	mov	r5, fp
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, txbuffer[i]);
    748e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
    7492:	f8df 8058 	ldr.w	r8, [pc, #88]	; 74ec <main+0x68c>
    7496:	4e17      	ldr	r6, [pc, #92]	; (74f4 <main+0x694>)
    7498:	f819 1005 	ldrb.w	r1, [r9, r5]
    749c:	4640      	mov	r0, r8
    749e:	47b0      	blx	r6
				for(uint16_t i = 0; i<txindex; i++){
    74a0:	3501      	adds	r5, #1
    74a2:	b2ad      	uxth	r5, r5
    74a4:	42ac      	cmp	r4, r5
    74a6:	d8f7      	bhi.n	7498 <main+0x638>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    74a8:	4810      	ldr	r0, [pc, #64]	; (74ec <main+0x68c>)
    74aa:	4b13      	ldr	r3, [pc, #76]	; (74f8 <main+0x698>)
    74ac:	4798      	blx	r3
    74ae:	e607      	b.n	70c0 <main+0x260>
			task_current = TASK_LED;
    74b0:	2302      	movs	r3, #2
    74b2:	733b      	strb	r3, [r7, #12]
			grid_led_tick();		
    74b4:	4b11      	ldr	r3, [pc, #68]	; (74fc <main+0x69c>)
    74b6:	4798      	blx	r3
			grid_led_render_all();
    74b8:	4b11      	ldr	r3, [pc, #68]	; (7500 <main+0x6a0>)
    74ba:	4798      	blx	r3
			task_current = TASK_UNDEFINED;
    74bc:	f887 b00c 	strb.w	fp, [r7, #12]
			io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    74c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    74c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    74c4:	4b0f      	ldr	r3, [pc, #60]	; (7504 <main+0x6a4>)
    74c6:	6818      	ldr	r0, [r3, #0]
    74c8:	4b0f      	ldr	r3, [pc, #60]	; (7508 <main+0x6a8>)
    74ca:	4798      	blx	r3
			while (dma_spi_done == 0)
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d0fc      	beq.n	74cc <main+0x66c>
    74d2:	e64f      	b.n	7174 <main+0x314>
    74d4:	000098e4 	.word	0x000098e4
    74d8:	00008abd 	.word	0x00008abd
    74dc:	00008b05 	.word	0x00008b05
    74e0:	000098e8 	.word	0x000098e8
    74e4:	00006159 	.word	0x00006159
    74e8:	000098b0 	.word	0x000098b0
    74ec:	20001d5c 	.word	0x20001d5c
    74f0:	000061c5 	.word	0x000061c5
    74f4:	000061f5 	.word	0x000061f5
    74f8:	00006211 	.word	0x00006211
    74fc:	000058b9 	.word	0x000058b9
    7500:	00005c41 	.word	0x00005c41
    7504:	20002a58 	.word	0x20002a58
    7508:	00001461 	.word	0x00001461
    750c:	00008a29 	.word	0x00008a29

00007510 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7510:	b5f0      	push	{r4, r5, r6, r7, lr}
    7512:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7514:	780b      	ldrb	r3, [r1, #0]
    7516:	f3c3 1441 	ubfx	r4, r3, #5, #2
    751a:	2c01      	cmp	r4, #1
    751c:	d15e      	bne.n	75dc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    751e:	888c      	ldrh	r4, [r1, #4]
    7520:	4d35      	ldr	r5, [pc, #212]	; (75f8 <cdcdf_acm_req+0xe8>)
    7522:	782d      	ldrb	r5, [r5, #0]
    7524:	42a5      	cmp	r5, r4
    7526:	d003      	beq.n	7530 <cdcdf_acm_req+0x20>
    7528:	4d33      	ldr	r5, [pc, #204]	; (75f8 <cdcdf_acm_req+0xe8>)
    752a:	786d      	ldrb	r5, [r5, #1]
    752c:	42a5      	cmp	r5, r4
    752e:	d158      	bne.n	75e2 <cdcdf_acm_req+0xd2>
    7530:	4616      	mov	r6, r2
    7532:	460c      	mov	r4, r1
    7534:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    7536:	f013 0f80 	tst.w	r3, #128	; 0x80
    753a:	d10c      	bne.n	7556 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    753c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    753e:	4b2f      	ldr	r3, [pc, #188]	; (75fc <cdcdf_acm_req+0xec>)
    7540:	4798      	blx	r3
    7542:	4601      	mov	r1, r0
	switch (req->bRequest) {
    7544:	7863      	ldrb	r3, [r4, #1]
    7546:	2b20      	cmp	r3, #32
    7548:	d013      	beq.n	7572 <cdcdf_acm_req+0x62>
    754a:	2b22      	cmp	r3, #34	; 0x22
    754c:	d032      	beq.n	75b4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    754e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    7552:	b003      	add	sp, #12
    7554:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    7556:	2a01      	cmp	r2, #1
    7558:	d046      	beq.n	75e8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    755a:	784b      	ldrb	r3, [r1, #1]
    755c:	2b21      	cmp	r3, #33	; 0x21
    755e:	d145      	bne.n	75ec <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7560:	88cb      	ldrh	r3, [r1, #6]
    7562:	2b07      	cmp	r3, #7
    7564:	d145      	bne.n	75f2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    7566:	2300      	movs	r3, #0
    7568:	2207      	movs	r2, #7
    756a:	4925      	ldr	r1, [pc, #148]	; (7600 <cdcdf_acm_req+0xf0>)
    756c:	4c25      	ldr	r4, [pc, #148]	; (7604 <cdcdf_acm_req+0xf4>)
    756e:	47a0      	blx	r4
    7570:	e7ef      	b.n	7552 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7572:	2f07      	cmp	r7, #7
    7574:	d12b      	bne.n	75ce <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    7576:	b1be      	cbz	r6, 75a8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    7578:	6800      	ldr	r0, [r0, #0]
    757a:	9000      	str	r0, [sp, #0]
    757c:	888a      	ldrh	r2, [r1, #4]
    757e:	798b      	ldrb	r3, [r1, #6]
    7580:	f8ad 2004 	strh.w	r2, [sp, #4]
    7584:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    7588:	4b1b      	ldr	r3, [pc, #108]	; (75f8 <cdcdf_acm_req+0xe8>)
    758a:	691b      	ldr	r3, [r3, #16]
    758c:	b113      	cbz	r3, 7594 <cdcdf_acm_req+0x84>
    758e:	4668      	mov	r0, sp
    7590:	4798      	blx	r3
    7592:	b1f8      	cbz	r0, 75d4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    7594:	4b18      	ldr	r3, [pc, #96]	; (75f8 <cdcdf_acm_req+0xe8>)
    7596:	aa02      	add	r2, sp, #8
    7598:	e912 0003 	ldmdb	r2, {r0, r1}
    759c:	6098      	str	r0, [r3, #8]
    759e:	8199      	strh	r1, [r3, #12]
    75a0:	0c09      	lsrs	r1, r1, #16
    75a2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    75a4:	2000      	movs	r0, #0
    75a6:	e7d4      	b.n	7552 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    75a8:	2300      	movs	r3, #0
    75aa:	2207      	movs	r2, #7
    75ac:	4628      	mov	r0, r5
    75ae:	4c15      	ldr	r4, [pc, #84]	; (7604 <cdcdf_acm_req+0xf4>)
    75b0:	47a0      	blx	r4
    75b2:	e7ce      	b.n	7552 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    75b4:	2300      	movs	r3, #0
    75b6:	461a      	mov	r2, r3
    75b8:	4619      	mov	r1, r3
    75ba:	4618      	mov	r0, r3
    75bc:	4d11      	ldr	r5, [pc, #68]	; (7604 <cdcdf_acm_req+0xf4>)
    75be:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    75c0:	4b0d      	ldr	r3, [pc, #52]	; (75f8 <cdcdf_acm_req+0xe8>)
    75c2:	695b      	ldr	r3, [r3, #20]
    75c4:	b143      	cbz	r3, 75d8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    75c6:	8860      	ldrh	r0, [r4, #2]
    75c8:	4798      	blx	r3
		return ERR_NONE;
    75ca:	2000      	movs	r0, #0
    75cc:	e7c1      	b.n	7552 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    75ce:	f04f 30ff 	mov.w	r0, #4294967295
    75d2:	e7be      	b.n	7552 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    75d4:	2000      	movs	r0, #0
    75d6:	e7bc      	b.n	7552 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    75d8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    75da:	e7ba      	b.n	7552 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    75dc:	f06f 0009 	mvn.w	r0, #9
    75e0:	e7b7      	b.n	7552 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    75e2:	f06f 0009 	mvn.w	r0, #9
    75e6:	e7b4      	b.n	7552 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    75e8:	2000      	movs	r0, #0
    75ea:	e7b2      	b.n	7552 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    75ec:	f06f 000c 	mvn.w	r0, #12
    75f0:	e7af      	b.n	7552 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    75f2:	f04f 30ff 	mov.w	r0, #4294967295
    75f6:	e7ac      	b.n	7552 <cdcdf_acm_req+0x42>
    75f8:	2000116c 	.word	0x2000116c
    75fc:	000085a5 	.word	0x000085a5
    7600:	20001174 	.word	0x20001174
    7604:	00008081 	.word	0x00008081

00007608 <cdcdf_acm_ctrl>:
{
    7608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    760c:	b083      	sub	sp, #12
    760e:	4616      	mov	r6, r2
	switch (ctrl) {
    7610:	2901      	cmp	r1, #1
    7612:	d066      	beq.n	76e2 <cdcdf_acm_ctrl+0xda>
    7614:	b141      	cbz	r1, 7628 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    7616:	2902      	cmp	r1, #2
    7618:	bf0c      	ite	eq
    761a:	f06f 001a 	mvneq.w	r0, #26
    761e:	f06f 000c 	mvnne.w	r0, #12
}
    7622:	b003      	add	sp, #12
    7624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7628:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    762c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    762e:	2800      	cmp	r0, #0
    7630:	f000 8085 	beq.w	773e <cdcdf_acm_ctrl+0x136>
    7634:	f10a 3bff 	add.w	fp, sl, #4294967295
    7638:	f10a 0301 	add.w	r3, sl, #1
    763c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    763e:	4f46      	ldr	r7, [pc, #280]	; (7758 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    7640:	f8df 9124 	ldr.w	r9, [pc, #292]	; 7768 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7644:	f8df 8124 	ldr.w	r8, [pc, #292]	; 776c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    7648:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    764a:	7943      	ldrb	r3, [r0, #5]
    764c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    7650:	2b02      	cmp	r3, #2
    7652:	d002      	beq.n	765a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    7654:	f06f 0009 	mvn.w	r0, #9
    7658:	e7e3      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
    765a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    765e:	f89b 3000 	ldrb.w	r3, [fp]
    7662:	429a      	cmp	r2, r3
    7664:	d06e      	beq.n	7744 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    7666:	2bff      	cmp	r3, #255	; 0xff
    7668:	d16f      	bne.n	774a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    766a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    766e:	2205      	movs	r2, #5
    7670:	6871      	ldr	r1, [r6, #4]
    7672:	4b3a      	ldr	r3, [pc, #232]	; (775c <cdcdf_acm_ctrl+0x154>)
    7674:	4798      	blx	r3
		while (NULL != ep) {
    7676:	4604      	mov	r4, r0
    7678:	b1f8      	cbz	r0, 76ba <cdcdf_acm_ctrl+0xb2>
    767a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    767e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    7680:	7963      	ldrb	r3, [r4, #5]
    7682:	7922      	ldrb	r2, [r4, #4]
    7684:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7688:	b292      	uxth	r2, r2
    768a:	78e1      	ldrb	r1, [r4, #3]
    768c:	4628      	mov	r0, r5
    768e:	47b8      	blx	r7
    7690:	2800      	cmp	r0, #0
    7692:	d15d      	bne.n	7750 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7694:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    7698:	bf14      	ite	ne
    769a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    769e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    76a2:	4628      	mov	r0, r5
    76a4:	47c8      	blx	r9
			desc->sod = ep;
    76a6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    76a8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    76aa:	6871      	ldr	r1, [r6, #4]
    76ac:	4420      	add	r0, r4
    76ae:	47c0      	blx	r8
		while (NULL != ep) {
    76b0:	4604      	mov	r4, r0
    76b2:	2800      	cmp	r0, #0
    76b4:	d1e3      	bne.n	767e <cdcdf_acm_ctrl+0x76>
    76b6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    76ba:	6833      	ldr	r3, [r6, #0]
    76bc:	7818      	ldrb	r0, [r3, #0]
    76be:	2204      	movs	r2, #4
    76c0:	6871      	ldr	r1, [r6, #4]
    76c2:	4418      	add	r0, r3
    76c4:	4b25      	ldr	r3, [pc, #148]	; (775c <cdcdf_acm_ctrl+0x154>)
    76c6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    76c8:	9b00      	ldr	r3, [sp, #0]
    76ca:	459b      	cmp	fp, r3
    76cc:	d004      	beq.n	76d8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    76ce:	2800      	cmp	r0, #0
    76d0:	d1ba      	bne.n	7648 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    76d2:	f06f 0009 	mvn.w	r0, #9
    76d6:	e7a4      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    76d8:	2201      	movs	r2, #1
    76da:	4b21      	ldr	r3, [pc, #132]	; (7760 <cdcdf_acm_ctrl+0x158>)
    76dc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    76de:	2000      	movs	r0, #0
    76e0:	e79f      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    76e2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    76e4:	b142      	cbz	r2, 76f8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    76e6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    76e8:	795b      	ldrb	r3, [r3, #5]
    76ea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    76ee:	2b02      	cmp	r3, #2
    76f0:	d002      	beq.n	76f8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    76f2:	f06f 0009 	mvn.w	r0, #9
    76f6:	e794      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    76f8:	7823      	ldrb	r3, [r4, #0]
    76fa:	2bff      	cmp	r3, #255	; 0xff
    76fc:	d008      	beq.n	7710 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    76fe:	23ff      	movs	r3, #255	; 0xff
    7700:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    7702:	78a0      	ldrb	r0, [r4, #2]
    7704:	4298      	cmp	r0, r3
    7706:	d003      	beq.n	7710 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7708:	4b16      	ldr	r3, [pc, #88]	; (7764 <cdcdf_acm_ctrl+0x15c>)
    770a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    770c:	23ff      	movs	r3, #255	; 0xff
    770e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    7710:	7863      	ldrb	r3, [r4, #1]
    7712:	2bff      	cmp	r3, #255	; 0xff
    7714:	d008      	beq.n	7728 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    7716:	23ff      	movs	r3, #255	; 0xff
    7718:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    771a:	78e0      	ldrb	r0, [r4, #3]
    771c:	4298      	cmp	r0, r3
    771e:	d003      	beq.n	7728 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7720:	4b10      	ldr	r3, [pc, #64]	; (7764 <cdcdf_acm_ctrl+0x15c>)
    7722:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7724:	23ff      	movs	r3, #255	; 0xff
    7726:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    7728:	7920      	ldrb	r0, [r4, #4]
    772a:	28ff      	cmp	r0, #255	; 0xff
    772c:	d003      	beq.n	7736 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    772e:	4b0d      	ldr	r3, [pc, #52]	; (7764 <cdcdf_acm_ctrl+0x15c>)
    7730:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7732:	23ff      	movs	r3, #255	; 0xff
    7734:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    7736:	2000      	movs	r0, #0
    7738:	4b09      	ldr	r3, [pc, #36]	; (7760 <cdcdf_acm_ctrl+0x158>)
    773a:	7158      	strb	r0, [r3, #5]
    773c:	e771      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    773e:	f06f 0009 	mvn.w	r0, #9
    7742:	e76e      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    7744:	f06f 0011 	mvn.w	r0, #17
    7748:	e76b      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    774a:	f06f 001b 	mvn.w	r0, #27
    774e:	e768      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    7750:	f06f 0013 	mvn.w	r0, #19
    7754:	e765      	b.n	7622 <cdcdf_acm_ctrl+0x1a>
    7756:	bf00      	nop
    7758:	00001f11 	.word	0x00001f11
    775c:	000085c5 	.word	0x000085c5
    7760:	2000116c 	.word	0x2000116c
    7764:	00001f79 	.word	0x00001f79
    7768:	00001fa5 	.word	0x00001fa5
    776c:	000085ff 	.word	0x000085ff

00007770 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    7770:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    7772:	4b0a      	ldr	r3, [pc, #40]	; (779c <cdcdf_acm_init+0x2c>)
    7774:	4798      	blx	r3
    7776:	2801      	cmp	r0, #1
    7778:	d80c      	bhi.n	7794 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    777a:	4809      	ldr	r0, [pc, #36]	; (77a0 <cdcdf_acm_init+0x30>)
    777c:	4b09      	ldr	r3, [pc, #36]	; (77a4 <cdcdf_acm_init+0x34>)
    777e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    7780:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    7782:	3018      	adds	r0, #24
    7784:	4b08      	ldr	r3, [pc, #32]	; (77a8 <cdcdf_acm_init+0x38>)
    7786:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7788:	4908      	ldr	r1, [pc, #32]	; (77ac <cdcdf_acm_init+0x3c>)
    778a:	2001      	movs	r0, #1
    778c:	4b08      	ldr	r3, [pc, #32]	; (77b0 <cdcdf_acm_init+0x40>)
    778e:	4798      	blx	r3
	return ERR_NONE;
    7790:	2000      	movs	r0, #0
    7792:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7794:	f06f 0010 	mvn.w	r0, #16
}
    7798:	bd08      	pop	{r3, pc}
    779a:	bf00      	nop
    779c:	000085b1 	.word	0x000085b1
    77a0:	2000116c 	.word	0x2000116c
    77a4:	00007609 	.word	0x00007609
    77a8:	00008551 	.word	0x00008551
    77ac:	20000350 	.word	0x20000350
    77b0:	000084bd 	.word	0x000084bd

000077b4 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    77b4:	4b07      	ldr	r3, [pc, #28]	; (77d4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    77b6:	795b      	ldrb	r3, [r3, #5]
    77b8:	b143      	cbz	r3, 77cc <cdcdf_acm_write+0x18>
{
    77ba:	b510      	push	{r4, lr}
    77bc:	460a      	mov	r2, r1
    77be:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    77c0:	2301      	movs	r3, #1
    77c2:	4804      	ldr	r0, [pc, #16]	; (77d4 <cdcdf_acm_write+0x20>)
    77c4:	78c0      	ldrb	r0, [r0, #3]
    77c6:	4c04      	ldr	r4, [pc, #16]	; (77d8 <cdcdf_acm_write+0x24>)
    77c8:	47a0      	blx	r4
    77ca:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    77cc:	f06f 0010 	mvn.w	r0, #16
    77d0:	4770      	bx	lr
    77d2:	bf00      	nop
    77d4:	2000116c 	.word	0x2000116c
    77d8:	00008081 	.word	0x00008081

000077dc <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    77dc:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    77de:	780b      	ldrb	r3, [r1, #0]
    77e0:	2b81      	cmp	r3, #129	; 0x81
    77e2:	d010      	beq.n	7806 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    77e4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    77e8:	2b01      	cmp	r3, #1
    77ea:	d13f      	bne.n	786c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    77ec:	888a      	ldrh	r2, [r1, #4]
    77ee:	4b22      	ldr	r3, [pc, #136]	; (7878 <hid_keyboard_req+0x9c>)
    77f0:	7b1b      	ldrb	r3, [r3, #12]
    77f2:	429a      	cmp	r2, r3
    77f4:	d13d      	bne.n	7872 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    77f6:	784b      	ldrb	r3, [r1, #1]
    77f8:	2b03      	cmp	r3, #3
    77fa:	d028      	beq.n	784e <hid_keyboard_req+0x72>
    77fc:	2b0b      	cmp	r3, #11
    77fe:	d02c      	beq.n	785a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    7800:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    7804:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7806:	784b      	ldrb	r3, [r1, #1]
    7808:	2b06      	cmp	r3, #6
    780a:	d002      	beq.n	7812 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    780c:	f06f 0009 	mvn.w	r0, #9
    7810:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7812:	888a      	ldrh	r2, [r1, #4]
    7814:	4b18      	ldr	r3, [pc, #96]	; (7878 <hid_keyboard_req+0x9c>)
    7816:	7b1b      	ldrb	r3, [r3, #12]
    7818:	429a      	cmp	r2, r3
    781a:	d002      	beq.n	7822 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    781c:	f06f 0009 	mvn.w	r0, #9
    7820:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    7822:	884b      	ldrh	r3, [r1, #2]
    7824:	0a1b      	lsrs	r3, r3, #8
    7826:	2b21      	cmp	r3, #33	; 0x21
    7828:	d004      	beq.n	7834 <hid_keyboard_req+0x58>
    782a:	2b22      	cmp	r3, #34	; 0x22
    782c:	d009      	beq.n	7842 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    782e:	f06f 000c 	mvn.w	r0, #12
    7832:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    7834:	4b10      	ldr	r3, [pc, #64]	; (7878 <hid_keyboard_req+0x9c>)
    7836:	6819      	ldr	r1, [r3, #0]
    7838:	2300      	movs	r3, #0
    783a:	780a      	ldrb	r2, [r1, #0]
    783c:	4c0f      	ldr	r4, [pc, #60]	; (787c <hid_keyboard_req+0xa0>)
    783e:	47a0      	blx	r4
    7840:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    7842:	2300      	movs	r3, #0
    7844:	223b      	movs	r2, #59	; 0x3b
    7846:	490e      	ldr	r1, [pc, #56]	; (7880 <hid_keyboard_req+0xa4>)
    7848:	4c0c      	ldr	r4, [pc, #48]	; (787c <hid_keyboard_req+0xa0>)
    784a:	47a0      	blx	r4
    784c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    784e:	2300      	movs	r3, #0
    7850:	2201      	movs	r2, #1
    7852:	490c      	ldr	r1, [pc, #48]	; (7884 <hid_keyboard_req+0xa8>)
    7854:	4c09      	ldr	r4, [pc, #36]	; (787c <hid_keyboard_req+0xa0>)
    7856:	47a0      	blx	r4
    7858:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    785a:	884a      	ldrh	r2, [r1, #2]
    785c:	4b06      	ldr	r3, [pc, #24]	; (7878 <hid_keyboard_req+0x9c>)
    785e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    7860:	2300      	movs	r3, #0
    7862:	461a      	mov	r2, r3
    7864:	4619      	mov	r1, r3
    7866:	4c05      	ldr	r4, [pc, #20]	; (787c <hid_keyboard_req+0xa0>)
    7868:	47a0      	blx	r4
    786a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    786c:	f06f 0009 	mvn.w	r0, #9
    7870:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7872:	f06f 0009 	mvn.w	r0, #9
    7876:	bd10      	pop	{r4, pc}
    7878:	20001190 	.word	0x20001190
    787c:	00008081 	.word	0x00008081
    7880:	000098f0 	.word	0x000098f0
    7884:	2000119f 	.word	0x2000119f

00007888 <hid_keyboard_ctrl>:
{
    7888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    788c:	4614      	mov	r4, r2
	switch (ctrl) {
    788e:	2901      	cmp	r1, #1
    7890:	d050      	beq.n	7934 <hid_keyboard_ctrl+0xac>
    7892:	b141      	cbz	r1, 78a6 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    7894:	2902      	cmp	r1, #2
    7896:	bf0c      	ite	eq
    7898:	f06f 051a 	mvneq.w	r5, #26
    789c:	f06f 050c 	mvnne.w	r5, #12
}
    78a0:	4628      	mov	r0, r5
    78a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    78a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    78aa:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    78ac:	2b00      	cmp	r3, #0
    78ae:	d05e      	beq.n	796e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    78b0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    78b2:	795b      	ldrb	r3, [r3, #5]
    78b4:	2b03      	cmp	r3, #3
    78b6:	d15d      	bne.n	7974 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    78b8:	f898 300c 	ldrb.w	r3, [r8, #12]
    78bc:	429a      	cmp	r2, r3
    78be:	d05c      	beq.n	797a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    78c0:	2bff      	cmp	r3, #255	; 0xff
    78c2:	d15d      	bne.n	7980 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    78c4:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    78c8:	6823      	ldr	r3, [r4, #0]
    78ca:	7818      	ldrb	r0, [r3, #0]
    78cc:	2221      	movs	r2, #33	; 0x21
    78ce:	6861      	ldr	r1, [r4, #4]
    78d0:	4418      	add	r0, r3
    78d2:	4b31      	ldr	r3, [pc, #196]	; (7998 <hid_keyboard_ctrl+0x110>)
    78d4:	4798      	blx	r3
    78d6:	4b31      	ldr	r3, [pc, #196]	; (799c <hid_keyboard_ctrl+0x114>)
    78d8:	6018      	str	r0, [r3, #0]
    78da:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    78dc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 79a4 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    78e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 79a8 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    78e4:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 79ac <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    78e8:	6823      	ldr	r3, [r4, #0]
    78ea:	7818      	ldrb	r0, [r3, #0]
    78ec:	6861      	ldr	r1, [r4, #4]
    78ee:	4418      	add	r0, r3
    78f0:	47c8      	blx	r9
		desc->sod = ep;
    78f2:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    78f4:	2800      	cmp	r0, #0
    78f6:	d046      	beq.n	7986 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    78f8:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    78fa:	7943      	ldrb	r3, [r0, #5]
    78fc:	7902      	ldrb	r2, [r0, #4]
    78fe:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7902:	b292      	uxth	r2, r2
    7904:	78c1      	ldrb	r1, [r0, #3]
    7906:	4638      	mov	r0, r7
    7908:	47d0      	blx	sl
    790a:	4605      	mov	r5, r0
    790c:	2800      	cmp	r0, #0
    790e:	d13d      	bne.n	798c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7910:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    7914:	bf14      	ite	ne
    7916:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    791a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    791e:	4638      	mov	r0, r7
    7920:	47d8      	blx	fp
    7922:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    7924:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    7928:	d1de      	bne.n	78e8 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    792a:	4b1c      	ldr	r3, [pc, #112]	; (799c <hid_keyboard_ctrl+0x114>)
    792c:	2201      	movs	r2, #1
    792e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    7930:	741a      	strb	r2, [r3, #16]
    7932:	e7b5      	b.n	78a0 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    7934:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    7936:	b11a      	cbz	r2, 7940 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7938:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    793a:	795b      	ldrb	r3, [r3, #5]
    793c:	2b03      	cmp	r3, #3
    793e:	d128      	bne.n	7992 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    7940:	7b2b      	ldrb	r3, [r5, #12]
    7942:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    7944:	bf1c      	itt	ne
    7946:	23ff      	movne	r3, #255	; 0xff
    7948:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    794a:	7b68      	ldrb	r0, [r5, #13]
    794c:	28ff      	cmp	r0, #255	; 0xff
    794e:	d003      	beq.n	7958 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    7950:	4b13      	ldr	r3, [pc, #76]	; (79a0 <hid_keyboard_ctrl+0x118>)
    7952:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    7954:	23ff      	movs	r3, #255	; 0xff
    7956:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    7958:	7ba8      	ldrb	r0, [r5, #14]
    795a:	28ff      	cmp	r0, #255	; 0xff
    795c:	d003      	beq.n	7966 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    795e:	4b10      	ldr	r3, [pc, #64]	; (79a0 <hid_keyboard_ctrl+0x118>)
    7960:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7962:	23ff      	movs	r3, #255	; 0xff
    7964:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    7966:	2500      	movs	r5, #0
    7968:	4b0c      	ldr	r3, [pc, #48]	; (799c <hid_keyboard_ctrl+0x114>)
    796a:	741d      	strb	r5, [r3, #16]
    796c:	e798      	b.n	78a0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    796e:	f06f 0509 	mvn.w	r5, #9
    7972:	e795      	b.n	78a0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    7974:	f06f 0509 	mvn.w	r5, #9
    7978:	e792      	b.n	78a0 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    797a:	f06f 0511 	mvn.w	r5, #17
    797e:	e78f      	b.n	78a0 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    7980:	f06f 051b 	mvn.w	r5, #27
    7984:	e78c      	b.n	78a0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    7986:	f06f 0509 	mvn.w	r5, #9
    798a:	e789      	b.n	78a0 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    798c:	f06f 0513 	mvn.w	r5, #19
    7990:	e786      	b.n	78a0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    7992:	f06f 0509 	mvn.w	r5, #9
    7996:	e783      	b.n	78a0 <hid_keyboard_ctrl+0x18>
    7998:	000085c5 	.word	0x000085c5
    799c:	20001190 	.word	0x20001190
    79a0:	00001f79 	.word	0x00001f79
    79a4:	000085ff 	.word	0x000085ff
    79a8:	00001f11 	.word	0x00001f11
    79ac:	00001fa5 	.word	0x00001fa5

000079b0 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    79b0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    79b2:	4b0a      	ldr	r3, [pc, #40]	; (79dc <hiddf_keyboard_init+0x2c>)
    79b4:	4798      	blx	r3
    79b6:	2801      	cmp	r0, #1
    79b8:	d80c      	bhi.n	79d4 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    79ba:	4809      	ldr	r0, [pc, #36]	; (79e0 <hiddf_keyboard_init+0x30>)
    79bc:	4b09      	ldr	r3, [pc, #36]	; (79e4 <hiddf_keyboard_init+0x34>)
    79be:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    79c0:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    79c2:	3014      	adds	r0, #20
    79c4:	4b08      	ldr	r3, [pc, #32]	; (79e8 <hiddf_keyboard_init+0x38>)
    79c6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    79c8:	4908      	ldr	r1, [pc, #32]	; (79ec <hiddf_keyboard_init+0x3c>)
    79ca:	2001      	movs	r0, #1
    79cc:	4b08      	ldr	r3, [pc, #32]	; (79f0 <hiddf_keyboard_init+0x40>)
    79ce:	4798      	blx	r3
	return ERR_NONE;
    79d0:	2000      	movs	r0, #0
    79d2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    79d4:	f06f 0010 	mvn.w	r0, #16
}
    79d8:	bd08      	pop	{r3, pc}
    79da:	bf00      	nop
    79dc:	000085b1 	.word	0x000085b1
    79e0:	20001190 	.word	0x20001190
    79e4:	00007889 	.word	0x00007889
    79e8:	00008551 	.word	0x00008551
    79ec:	20000358 	.word	0x20000358
    79f0:	000084bd 	.word	0x000084bd

000079f4 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    79f4:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    79f6:	4b26      	ldr	r3, [pc, #152]	; (7a90 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    79f8:	7c1b      	ldrb	r3, [r3, #16]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d045      	beq.n	7a8a <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    79fe:	4a24      	ldr	r2, [pc, #144]	; (7a90 <hiddf_keyboard_keys_state_change+0x9c>)
    7a00:	2300      	movs	r3, #0
    7a02:	6053      	str	r3, [r2, #4]
    7a04:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    7a06:	b329      	cbz	r1, 7a54 <hiddf_keyboard_keys_state_change+0x60>
    7a08:	4603      	mov	r3, r0
    7a0a:	1e4d      	subs	r5, r1, #1
    7a0c:	b2ed      	uxtb	r5, r5
    7a0e:	3501      	adds	r5, #1
    7a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7a14:	4405      	add	r5, r0
    7a16:	2200      	movs	r2, #0
    7a18:	e002      	b.n	7a20 <hiddf_keyboard_keys_state_change+0x2c>
    7a1a:	3303      	adds	r3, #3
    7a1c:	42ab      	cmp	r3, r5
    7a1e:	d005      	beq.n	7a2c <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    7a20:	785c      	ldrb	r4, [r3, #1]
    7a22:	2c00      	cmp	r4, #0
    7a24:	d0f9      	beq.n	7a1a <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    7a26:	3201      	adds	r2, #1
    7a28:	b2d2      	uxtb	r2, r2
    7a2a:	e7f6      	b.n	7a1a <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    7a2c:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    7a2e:	b2d2      	uxtb	r2, r2
    7a30:	2a06      	cmp	r2, #6
    7a32:	d809      	bhi.n	7a48 <hiddf_keyboard_keys_state_change+0x54>
    7a34:	4603      	mov	r3, r0
    7a36:	1e4a      	subs	r2, r1, #1
    7a38:	b2d2      	uxtb	r2, r2
    7a3a:	3201      	adds	r2, #1
    7a3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7a40:	4410      	add	r0, r2
    7a42:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    7a44:	4d12      	ldr	r5, [pc, #72]	; (7a90 <hiddf_keyboard_keys_state_change+0x9c>)
    7a46:	e015      	b.n	7a74 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    7a48:	4b11      	ldr	r3, [pc, #68]	; (7a90 <hiddf_keyboard_keys_state_change+0x9c>)
    7a4a:	f04f 32ff 	mov.w	r2, #4294967295
    7a4e:	f8c3 2006 	str.w	r2, [r3, #6]
    7a52:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    7a54:	480e      	ldr	r0, [pc, #56]	; (7a90 <hiddf_keyboard_keys_state_change+0x9c>)
    7a56:	2300      	movs	r3, #0
    7a58:	2208      	movs	r2, #8
    7a5a:	1d01      	adds	r1, r0, #4
    7a5c:	7b40      	ldrb	r0, [r0, #13]
    7a5e:	4c0d      	ldr	r4, [pc, #52]	; (7a94 <hiddf_keyboard_keys_state_change+0xa0>)
    7a60:	47a0      	blx	r4
    7a62:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    7a64:	1c62      	adds	r2, r4, #1
    7a66:	7819      	ldrb	r1, [r3, #0]
    7a68:	442c      	add	r4, r5
    7a6a:	7121      	strb	r1, [r4, #4]
    7a6c:	b2d4      	uxtb	r4, r2
    7a6e:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    7a70:	4283      	cmp	r3, r0
    7a72:	d0ef      	beq.n	7a54 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    7a74:	789a      	ldrb	r2, [r3, #2]
    7a76:	2a01      	cmp	r2, #1
    7a78:	d1f9      	bne.n	7a6e <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    7a7a:	785a      	ldrb	r2, [r3, #1]
    7a7c:	2a00      	cmp	r2, #0
    7a7e:	d0f1      	beq.n	7a64 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    7a80:	792a      	ldrb	r2, [r5, #4]
    7a82:	7819      	ldrb	r1, [r3, #0]
    7a84:	430a      	orrs	r2, r1
    7a86:	712a      	strb	r2, [r5, #4]
    7a88:	e7f1      	b.n	7a6e <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    7a8a:	f06f 0010 	mvn.w	r0, #16
}
    7a8e:	bd38      	pop	{r3, r4, r5, pc}
    7a90:	20001190 	.word	0x20001190
    7a94:	00008081 	.word	0x00008081

00007a98 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7a98:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    7a9a:	780b      	ldrb	r3, [r1, #0]
    7a9c:	2b81      	cmp	r3, #129	; 0x81
    7a9e:	d010      	beq.n	7ac2 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7aa0:	f3c3 1341 	ubfx	r3, r3, #5, #2
    7aa4:	2b01      	cmp	r3, #1
    7aa6:	d13f      	bne.n	7b28 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    7aa8:	888a      	ldrh	r2, [r1, #4]
    7aaa:	4b22      	ldr	r3, [pc, #136]	; (7b34 <hid_mouse_req+0x9c>)
    7aac:	7a1b      	ldrb	r3, [r3, #8]
    7aae:	429a      	cmp	r2, r3
    7ab0:	d13d      	bne.n	7b2e <hid_mouse_req+0x96>
			switch (req->bRequest) {
    7ab2:	784b      	ldrb	r3, [r1, #1]
    7ab4:	2b03      	cmp	r3, #3
    7ab6:	d028      	beq.n	7b0a <hid_mouse_req+0x72>
    7ab8:	2b0b      	cmp	r3, #11
    7aba:	d02c      	beq.n	7b16 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    7abc:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    7ac0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    7ac2:	784b      	ldrb	r3, [r1, #1]
    7ac4:	2b06      	cmp	r3, #6
    7ac6:	d002      	beq.n	7ace <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    7ac8:	f06f 0009 	mvn.w	r0, #9
    7acc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    7ace:	888a      	ldrh	r2, [r1, #4]
    7ad0:	4b18      	ldr	r3, [pc, #96]	; (7b34 <hid_mouse_req+0x9c>)
    7ad2:	7a1b      	ldrb	r3, [r3, #8]
    7ad4:	429a      	cmp	r2, r3
    7ad6:	d002      	beq.n	7ade <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    7ad8:	f06f 0009 	mvn.w	r0, #9
    7adc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    7ade:	884b      	ldrh	r3, [r1, #2]
    7ae0:	0a1b      	lsrs	r3, r3, #8
    7ae2:	2b21      	cmp	r3, #33	; 0x21
    7ae4:	d004      	beq.n	7af0 <hid_mouse_req+0x58>
    7ae6:	2b22      	cmp	r3, #34	; 0x22
    7ae8:	d009      	beq.n	7afe <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    7aea:	f06f 000c 	mvn.w	r0, #12
    7aee:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    7af0:	4b10      	ldr	r3, [pc, #64]	; (7b34 <hid_mouse_req+0x9c>)
    7af2:	6819      	ldr	r1, [r3, #0]
    7af4:	2300      	movs	r3, #0
    7af6:	780a      	ldrb	r2, [r1, #0]
    7af8:	4c0f      	ldr	r4, [pc, #60]	; (7b38 <hid_mouse_req+0xa0>)
    7afa:	47a0      	blx	r4
    7afc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    7afe:	2300      	movs	r3, #0
    7b00:	2234      	movs	r2, #52	; 0x34
    7b02:	490e      	ldr	r1, [pc, #56]	; (7b3c <hid_mouse_req+0xa4>)
    7b04:	4c0c      	ldr	r4, [pc, #48]	; (7b38 <hid_mouse_req+0xa0>)
    7b06:	47a0      	blx	r4
    7b08:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    7b0a:	2300      	movs	r3, #0
    7b0c:	2201      	movs	r2, #1
    7b0e:	490c      	ldr	r1, [pc, #48]	; (7b40 <hid_mouse_req+0xa8>)
    7b10:	4c09      	ldr	r4, [pc, #36]	; (7b38 <hid_mouse_req+0xa0>)
    7b12:	47a0      	blx	r4
    7b14:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    7b16:	884a      	ldrh	r2, [r1, #2]
    7b18:	4b06      	ldr	r3, [pc, #24]	; (7b34 <hid_mouse_req+0x9c>)
    7b1a:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    7b1c:	2300      	movs	r3, #0
    7b1e:	461a      	mov	r2, r3
    7b20:	4619      	mov	r1, r3
    7b22:	4c05      	ldr	r4, [pc, #20]	; (7b38 <hid_mouse_req+0xa0>)
    7b24:	47a0      	blx	r4
    7b26:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7b28:	f06f 0009 	mvn.w	r0, #9
    7b2c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7b2e:	f06f 0009 	mvn.w	r0, #9
    7b32:	bd10      	pop	{r4, pc}
    7b34:	200011b0 	.word	0x200011b0
    7b38:	00008081 	.word	0x00008081
    7b3c:	0000992c 	.word	0x0000992c
    7b40:	200011ba 	.word	0x200011ba

00007b44 <hid_mouse_ctrl>:
{
    7b44:	b570      	push	{r4, r5, r6, lr}
    7b46:	4614      	mov	r4, r2
	switch (ctrl) {
    7b48:	2901      	cmp	r1, #1
    7b4a:	d040      	beq.n	7bce <hid_mouse_ctrl+0x8a>
    7b4c:	b139      	cbz	r1, 7b5e <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    7b4e:	2902      	cmp	r1, #2
    7b50:	bf0c      	ite	eq
    7b52:	f06f 041a 	mvneq.w	r4, #26
    7b56:	f06f 040c 	mvnne.w	r4, #12
}
    7b5a:	4620      	mov	r0, r4
    7b5c:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    7b5e:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    7b60:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    7b62:	2b00      	cmp	r3, #0
    7b64:	d049      	beq.n	7bfa <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    7b66:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    7b68:	795b      	ldrb	r3, [r3, #5]
    7b6a:	2b03      	cmp	r3, #3
    7b6c:	d148      	bne.n	7c00 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    7b6e:	7a2b      	ldrb	r3, [r5, #8]
    7b70:	429a      	cmp	r2, r3
    7b72:	d048      	beq.n	7c06 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    7b74:	2bff      	cmp	r3, #255	; 0xff
    7b76:	d149      	bne.n	7c0c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    7b78:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    7b7a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    7b7c:	7818      	ldrb	r0, [r3, #0]
    7b7e:	2221      	movs	r2, #33	; 0x21
    7b80:	6861      	ldr	r1, [r4, #4]
    7b82:	4418      	add	r0, r3
    7b84:	4b29      	ldr	r3, [pc, #164]	; (7c2c <hid_mouse_ctrl+0xe8>)
    7b86:	4798      	blx	r3
    7b88:	4b29      	ldr	r3, [pc, #164]	; (7c30 <hid_mouse_ctrl+0xec>)
    7b8a:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7b8c:	6823      	ldr	r3, [r4, #0]
    7b8e:	7818      	ldrb	r0, [r3, #0]
    7b90:	6861      	ldr	r1, [r4, #4]
    7b92:	4418      	add	r0, r3
    7b94:	4b27      	ldr	r3, [pc, #156]	; (7c34 <hid_mouse_ctrl+0xf0>)
    7b96:	4798      	blx	r3
	desc->sod = ep;
    7b98:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    7b9a:	2800      	cmp	r0, #0
    7b9c:	d039      	beq.n	7c12 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    7b9e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    7ba0:	7943      	ldrb	r3, [r0, #5]
    7ba2:	7902      	ldrb	r2, [r0, #4]
    7ba4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7ba8:	b292      	uxth	r2, r2
    7baa:	78c1      	ldrb	r1, [r0, #3]
    7bac:	4630      	mov	r0, r6
    7bae:	4b22      	ldr	r3, [pc, #136]	; (7c38 <hid_mouse_ctrl+0xf4>)
    7bb0:	4798      	blx	r3
    7bb2:	4604      	mov	r4, r0
    7bb4:	bb80      	cbnz	r0, 7c18 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7bb6:	f016 0f80 	tst.w	r6, #128	; 0x80
    7bba:	d030      	beq.n	7c1e <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    7bbc:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    7bbe:	4630      	mov	r0, r6
    7bc0:	4b1e      	ldr	r3, [pc, #120]	; (7c3c <hid_mouse_ctrl+0xf8>)
    7bc2:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    7bc4:	4b1a      	ldr	r3, [pc, #104]	; (7c30 <hid_mouse_ctrl+0xec>)
    7bc6:	2201      	movs	r2, #1
    7bc8:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    7bca:	72da      	strb	r2, [r3, #11]
    7bcc:	e7c5      	b.n	7b5a <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    7bce:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    7bd0:	b11a      	cbz	r2, 7bda <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7bd2:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    7bd4:	795b      	ldrb	r3, [r3, #5]
    7bd6:	2b03      	cmp	r3, #3
    7bd8:	d124      	bne.n	7c24 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    7bda:	7a2b      	ldrb	r3, [r5, #8]
    7bdc:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    7bde:	bf1c      	itt	ne
    7be0:	23ff      	movne	r3, #255	; 0xff
    7be2:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    7be4:	7a68      	ldrb	r0, [r5, #9]
    7be6:	28ff      	cmp	r0, #255	; 0xff
    7be8:	d003      	beq.n	7bf2 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    7bea:	4b15      	ldr	r3, [pc, #84]	; (7c40 <hid_mouse_ctrl+0xfc>)
    7bec:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    7bee:	23ff      	movs	r3, #255	; 0xff
    7bf0:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    7bf2:	2400      	movs	r4, #0
    7bf4:	4b0e      	ldr	r3, [pc, #56]	; (7c30 <hid_mouse_ctrl+0xec>)
    7bf6:	72dc      	strb	r4, [r3, #11]
    7bf8:	e7af      	b.n	7b5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    7bfa:	f06f 0409 	mvn.w	r4, #9
    7bfe:	e7ac      	b.n	7b5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    7c00:	f06f 0409 	mvn.w	r4, #9
    7c04:	e7a9      	b.n	7b5a <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    7c06:	f06f 0411 	mvn.w	r4, #17
    7c0a:	e7a6      	b.n	7b5a <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    7c0c:	f06f 041b 	mvn.w	r4, #27
    7c10:	e7a3      	b.n	7b5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    7c12:	f06f 0409 	mvn.w	r4, #9
    7c16:	e7a0      	b.n	7b5a <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    7c18:	f06f 0413 	mvn.w	r4, #19
    7c1c:	e79d      	b.n	7b5a <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    7c1e:	f04f 34ff 	mov.w	r4, #4294967295
    7c22:	e79a      	b.n	7b5a <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    7c24:	f06f 0409 	mvn.w	r4, #9
    7c28:	e797      	b.n	7b5a <hid_mouse_ctrl+0x16>
    7c2a:	bf00      	nop
    7c2c:	000085c5 	.word	0x000085c5
    7c30:	200011b0 	.word	0x200011b0
    7c34:	000085ff 	.word	0x000085ff
    7c38:	00001f11 	.word	0x00001f11
    7c3c:	00001fa5 	.word	0x00001fa5
    7c40:	00001f79 	.word	0x00001f79

00007c44 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    7c44:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    7c46:	4b0a      	ldr	r3, [pc, #40]	; (7c70 <hiddf_mouse_init+0x2c>)
    7c48:	4798      	blx	r3
    7c4a:	2801      	cmp	r0, #1
    7c4c:	d80c      	bhi.n	7c68 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    7c4e:	4809      	ldr	r0, [pc, #36]	; (7c74 <hiddf_mouse_init+0x30>)
    7c50:	4b09      	ldr	r3, [pc, #36]	; (7c78 <hiddf_mouse_init+0x34>)
    7c52:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    7c54:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    7c56:	300c      	adds	r0, #12
    7c58:	4b08      	ldr	r3, [pc, #32]	; (7c7c <hiddf_mouse_init+0x38>)
    7c5a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    7c5c:	4908      	ldr	r1, [pc, #32]	; (7c80 <hiddf_mouse_init+0x3c>)
    7c5e:	2001      	movs	r0, #1
    7c60:	4b08      	ldr	r3, [pc, #32]	; (7c84 <hiddf_mouse_init+0x40>)
    7c62:	4798      	blx	r3
	return ERR_NONE;
    7c64:	2000      	movs	r0, #0
    7c66:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7c68:	f06f 0010 	mvn.w	r0, #16
}
    7c6c:	bd08      	pop	{r3, pc}
    7c6e:	bf00      	nop
    7c70:	000085b1 	.word	0x000085b1
    7c74:	200011b0 	.word	0x200011b0
    7c78:	00007b45 	.word	0x00007b45
    7c7c:	00008551 	.word	0x00008551
    7c80:	20000360 	.word	0x20000360
    7c84:	000084bd 	.word	0x000084bd

00007c88 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    7c88:	2200      	movs	r2, #0
    7c8a:	4b0d      	ldr	r3, [pc, #52]	; (7cc0 <hiddf_mouse_move+0x38>)
    7c8c:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    7c8e:	2901      	cmp	r1, #1
    7c90:	d00e      	beq.n	7cb0 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    7c92:	2902      	cmp	r1, #2
    7c94:	d00e      	beq.n	7cb4 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    7c96:	2903      	cmp	r1, #3
    7c98:	d10f      	bne.n	7cba <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    7c9a:	4b09      	ldr	r3, [pc, #36]	; (7cc0 <hiddf_mouse_move+0x38>)
    7c9c:	71d8      	strb	r0, [r3, #7]
{
    7c9e:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    7ca0:	4807      	ldr	r0, [pc, #28]	; (7cc0 <hiddf_mouse_move+0x38>)
    7ca2:	2300      	movs	r3, #0
    7ca4:	2204      	movs	r2, #4
    7ca6:	1881      	adds	r1, r0, r2
    7ca8:	7a40      	ldrb	r0, [r0, #9]
    7caa:	4c06      	ldr	r4, [pc, #24]	; (7cc4 <hiddf_mouse_move+0x3c>)
    7cac:	47a0      	blx	r4
    7cae:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    7cb0:	7158      	strb	r0, [r3, #5]
    7cb2:	e7f4      	b.n	7c9e <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    7cb4:	4b02      	ldr	r3, [pc, #8]	; (7cc0 <hiddf_mouse_move+0x38>)
    7cb6:	7198      	strb	r0, [r3, #6]
    7cb8:	e7f1      	b.n	7c9e <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    7cba:	f06f 000c 	mvn.w	r0, #12
    7cbe:	4770      	bx	lr
    7cc0:	200011b0 	.word	0x200011b0
    7cc4:	00008081 	.word	0x00008081

00007cc8 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7cc8:	b510      	push	{r4, lr}
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    7cca:	780b      	ldrb	r3, [r1, #0]
    7ccc:	2b81      	cmp	r3, #129	; 0x81
    7cce:	d014      	beq.n	7cfa <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7cd0:	f3c3 1341 	ubfx	r3, r3, #5, #2
    7cd4:	2b01      	cmp	r3, #1
    7cd6:	d132      	bne.n	7d3e <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    7cd8:	888b      	ldrh	r3, [r1, #4]
    7cda:	4a1c      	ldr	r2, [pc, #112]	; (7d4c <audio_midi_req+0x84>)
    7cdc:	7912      	ldrb	r2, [r2, #4]
    7cde:	429a      	cmp	r2, r3
    7ce0:	d003      	beq.n	7cea <audio_midi_req+0x22>
    7ce2:	4a1a      	ldr	r2, [pc, #104]	; (7d4c <audio_midi_req+0x84>)
    7ce4:	7952      	ldrb	r2, [r2, #5]
    7ce6:	429a      	cmp	r2, r3
    7ce8:	d12c      	bne.n	7d44 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    7cea:	784b      	ldrb	r3, [r1, #1]
    7cec:	2b03      	cmp	r3, #3
    7cee:	d017      	beq.n	7d20 <audio_midi_req+0x58>
    7cf0:	2b0b      	cmp	r3, #11
    7cf2:	d01b      	beq.n	7d2c <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    7cf4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    7cf8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    7cfa:	888b      	ldrh	r3, [r1, #4]
    7cfc:	4a13      	ldr	r2, [pc, #76]	; (7d4c <audio_midi_req+0x84>)
    7cfe:	7912      	ldrb	r2, [r2, #4]
    7d00:	429a      	cmp	r2, r3
    7d02:	d006      	beq.n	7d12 <audio_midi_req+0x4a>
    7d04:	4a11      	ldr	r2, [pc, #68]	; (7d4c <audio_midi_req+0x84>)
    7d06:	7952      	ldrb	r2, [r2, #5]
    7d08:	429a      	cmp	r2, r3
    7d0a:	d002      	beq.n	7d12 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    7d0c:	f06f 0009 	mvn.w	r0, #9
    7d10:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    7d12:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <audio_midi_req+0x84>)
    7d14:	6819      	ldr	r1, [r3, #0]
    7d16:	2300      	movs	r3, #0
    7d18:	780a      	ldrb	r2, [r1, #0]
    7d1a:	4c0d      	ldr	r4, [pc, #52]	; (7d50 <audio_midi_req+0x88>)
    7d1c:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    7d1e:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    7d20:	2300      	movs	r3, #0
    7d22:	2201      	movs	r2, #1
    7d24:	490b      	ldr	r1, [pc, #44]	; (7d54 <audio_midi_req+0x8c>)
    7d26:	4c0a      	ldr	r4, [pc, #40]	; (7d50 <audio_midi_req+0x88>)
    7d28:	47a0      	blx	r4
    7d2a:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    7d2c:	884a      	ldrh	r2, [r1, #2]
    7d2e:	4b07      	ldr	r3, [pc, #28]	; (7d4c <audio_midi_req+0x84>)
    7d30:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    7d32:	2300      	movs	r3, #0
    7d34:	461a      	mov	r2, r3
    7d36:	4619      	mov	r1, r3
    7d38:	4c05      	ldr	r4, [pc, #20]	; (7d50 <audio_midi_req+0x88>)
    7d3a:	47a0      	blx	r4
    7d3c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    7d3e:	f06f 0009 	mvn.w	r0, #9
    7d42:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7d44:	f06f 0009 	mvn.w	r0, #9
    7d48:	bd10      	pop	{r4, pc}
    7d4a:	bf00      	nop
    7d4c:	200011c8 	.word	0x200011c8
    7d50:	00008081 	.word	0x00008081
    7d54:	200011d0 	.word	0x200011d0

00007d58 <audio_midi_ctrl>:
{
    7d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d5c:	b083      	sub	sp, #12
    7d5e:	4616      	mov	r6, r2
	switch (ctrl) {
    7d60:	2901      	cmp	r1, #1
    7d62:	d069      	beq.n	7e38 <audio_midi_ctrl+0xe0>
    7d64:	b141      	cbz	r1, 7d78 <audio_midi_ctrl+0x20>
		return ERR_INVALID_ARG;
    7d66:	2902      	cmp	r1, #2
    7d68:	bf0c      	ite	eq
    7d6a:	f06f 001a 	mvneq.w	r0, #26
    7d6e:	f06f 000c 	mvnne.w	r0, #12
}
    7d72:	b003      	add	sp, #12
    7d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    7d78:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    7d7a:	6814      	ldr	r4, [r2, #0]
		if (NULL == ifc) {
    7d7c:	2c00      	cmp	r4, #0
    7d7e:	d078      	beq.n	7e72 <audio_midi_ctrl+0x11a>
    7d80:	f107 0b04 	add.w	fp, r7, #4
    7d84:	1dbb      	adds	r3, r7, #6
    7d86:	9301      	str	r3, [sp, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    7d88:	f8df a110 	ldr.w	sl, [pc, #272]	; 7e9c <audio_midi_ctrl+0x144>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7d8c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 7ea0 <audio_midi_ctrl+0x148>
    7d90:	46b8      	mov	r8, r7
		ifc_desc.bInterfaceNumber = ifc[2];
    7d92:	78a2      	ldrb	r2, [r4, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    7d94:	7963      	ldrb	r3, [r4, #5]
    7d96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7d9a:	2b01      	cmp	r3, #1
    7d9c:	d002      	beq.n	7da4 <audio_midi_ctrl+0x4c>
			return ERR_NOT_FOUND;
    7d9e:	f06f 0009 	mvn.w	r0, #9
    7da2:	e7e6      	b.n	7d72 <audio_midi_ctrl+0x1a>
			if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    7da4:	f108 0304 	add.w	r3, r8, #4
    7da8:	4293      	cmp	r3, r2
    7daa:	d065      	beq.n	7e78 <audio_midi_ctrl+0x120>
			} else if (func_data->func_iface != 0xFF) { // Occupied
    7dac:	2bff      	cmp	r3, #255	; 0xff
    7dae:	d166      	bne.n	7e7e <audio_midi_ctrl+0x126>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    7db0:	f80b 2b01 	strb.w	r2, [fp], #1
		_audiodf_midi_funcd.audio_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_AUDIO);
    7db4:	6833      	ldr	r3, [r6, #0]
	return (desc + usb_desc_len(desc));
    7db6:	7818      	ldrb	r0, [r3, #0]
    7db8:	2224      	movs	r2, #36	; 0x24
    7dba:	6871      	ldr	r1, [r6, #4]
    7dbc:	4418      	add	r0, r3
    7dbe:	4b33      	ldr	r3, [pc, #204]	; (7e8c <audio_midi_ctrl+0x134>)
    7dc0:	4798      	blx	r3
    7dc2:	4b33      	ldr	r3, [pc, #204]	; (7e90 <audio_midi_ctrl+0x138>)
    7dc4:	6018      	str	r0, [r3, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    7dc6:	2205      	movs	r2, #5
    7dc8:	6871      	ldr	r1, [r6, #4]
    7dca:	4620      	mov	r0, r4
    7dcc:	4b2f      	ldr	r3, [pc, #188]	; (7e8c <audio_midi_ctrl+0x134>)
    7dce:	4798      	blx	r3
		while (NULL != ep) {
    7dd0:	4604      	mov	r4, r0
    7dd2:	b1e0      	cbz	r0, 7e0e <audio_midi_ctrl+0xb6>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {			
    7dd4:	4f2f      	ldr	r7, [pc, #188]	; (7e94 <audio_midi_ctrl+0x13c>)
			ep_desc.bEndpointAddress = ep[2];
    7dd6:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    7dd8:	7963      	ldrb	r3, [r4, #5]
    7dda:	7922      	ldrb	r2, [r4, #4]
    7ddc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {			
    7de0:	b292      	uxth	r2, r2
    7de2:	78e1      	ldrb	r1, [r4, #3]
    7de4:	4628      	mov	r0, r5
    7de6:	47b8      	blx	r7
    7de8:	2800      	cmp	r0, #0
    7dea:	d14b      	bne.n	7e84 <audio_midi_ctrl+0x12c>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7dec:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    7df0:	bf14      	ite	ne
    7df2:	f888 5006 	strbne.w	r5, [r8, #6]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7df6:	f888 5007 	strbeq.w	r5, [r8, #7]
				usb_d_ep_enable(func_data->func_ep_out);
    7dfa:	4628      	mov	r0, r5
    7dfc:	47d0      	blx	sl
			desc->sod = ep;
    7dfe:	6034      	str	r4, [r6, #0]
	return (desc + usb_desc_len(desc));
    7e00:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7e02:	6871      	ldr	r1, [r6, #4]
    7e04:	4420      	add	r0, r4
    7e06:	47c8      	blx	r9
		while (NULL != ep) {
    7e08:	4604      	mov	r4, r0
    7e0a:	2800      	cmp	r0, #0
    7e0c:	d1e3      	bne.n	7dd6 <audio_midi_ctrl+0x7e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    7e0e:	6833      	ldr	r3, [r6, #0]
    7e10:	7818      	ldrb	r0, [r3, #0]
    7e12:	2204      	movs	r2, #4
    7e14:	6871      	ldr	r1, [r6, #4]
    7e16:	4418      	add	r0, r3
    7e18:	4b1c      	ldr	r3, [pc, #112]	; (7e8c <audio_midi_ctrl+0x134>)
    7e1a:	4798      	blx	r3
    7e1c:	4604      	mov	r4, r0
	for (i=0; i<2; i++){
    7e1e:	9b01      	ldr	r3, [sp, #4]
    7e20:	455b      	cmp	r3, fp
    7e22:	d004      	beq.n	7e2e <audio_midi_ctrl+0xd6>
		if (NULL == ifc) {
    7e24:	2c00      	cmp	r4, #0
    7e26:	d1b4      	bne.n	7d92 <audio_midi_ctrl+0x3a>
			return ERR_NOT_FOUND;
    7e28:	f06f 0009 	mvn.w	r0, #9
    7e2c:	e7a1      	b.n	7d72 <audio_midi_ctrl+0x1a>
	_audiodf_midi_funcd.enabled = true;
    7e2e:	2201      	movs	r2, #1
    7e30:	4b17      	ldr	r3, [pc, #92]	; (7e90 <audio_midi_ctrl+0x138>)
    7e32:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    7e34:	2000      	movs	r0, #0
    7e36:	e79c      	b.n	7d72 <audio_midi_ctrl+0x1a>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    7e38:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    7e3a:	b142      	cbz	r2, 7e4e <audio_midi_ctrl+0xf6>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7e3c:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    7e3e:	795b      	ldrb	r3, [r3, #5]
    7e40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7e44:	2b01      	cmp	r3, #1
    7e46:	d002      	beq.n	7e4e <audio_midi_ctrl+0xf6>
			return ERR_NOT_FOUND;
    7e48:	f06f 0009 	mvn.w	r0, #9
    7e4c:	e791      	b.n	7d72 <audio_midi_ctrl+0x1a>
	if (func_data->func_ep_in != 0xFF) {
    7e4e:	79a0      	ldrb	r0, [r4, #6]
    7e50:	28ff      	cmp	r0, #255	; 0xff
    7e52:	d003      	beq.n	7e5c <audio_midi_ctrl+0x104>
		usb_d_ep_deinit(func_data->func_ep_in);
    7e54:	4b10      	ldr	r3, [pc, #64]	; (7e98 <audio_midi_ctrl+0x140>)
    7e56:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    7e58:	23ff      	movs	r3, #255	; 0xff
    7e5a:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    7e5c:	79e0      	ldrb	r0, [r4, #7]
    7e5e:	28ff      	cmp	r0, #255	; 0xff
    7e60:	d003      	beq.n	7e6a <audio_midi_ctrl+0x112>
		usb_d_ep_deinit(func_data->func_ep_out);
    7e62:	4b0d      	ldr	r3, [pc, #52]	; (7e98 <audio_midi_ctrl+0x140>)
    7e64:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7e66:	23ff      	movs	r3, #255	; 0xff
    7e68:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    7e6a:	2000      	movs	r0, #0
    7e6c:	4b08      	ldr	r3, [pc, #32]	; (7e90 <audio_midi_ctrl+0x138>)
    7e6e:	7358      	strb	r0, [r3, #13]
    7e70:	e77f      	b.n	7d72 <audio_midi_ctrl+0x1a>
			return ERR_NOT_FOUND;
    7e72:	f06f 0009 	mvn.w	r0, #9
    7e76:	e77c      	b.n	7d72 <audio_midi_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    7e78:	f06f 0011 	mvn.w	r0, #17
    7e7c:	e779      	b.n	7d72 <audio_midi_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    7e7e:	f06f 001b 	mvn.w	r0, #27
    7e82:	e776      	b.n	7d72 <audio_midi_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    7e84:	f06f 0013 	mvn.w	r0, #19
    7e88:	e773      	b.n	7d72 <audio_midi_ctrl+0x1a>
    7e8a:	bf00      	nop
    7e8c:	000085c5 	.word	0x000085c5
    7e90:	200011c8 	.word	0x200011c8
    7e94:	00001f11 	.word	0x00001f11
    7e98:	00001f79 	.word	0x00001f79
    7e9c:	00001fa5 	.word	0x00001fa5
    7ea0:	000085ff 	.word	0x000085ff

00007ea4 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    7ea4:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    7ea6:	4b0a      	ldr	r3, [pc, #40]	; (7ed0 <audiodf_midi_init+0x2c>)
    7ea8:	4798      	blx	r3
    7eaa:	2801      	cmp	r0, #1
    7eac:	d80c      	bhi.n	7ec8 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    7eae:	4809      	ldr	r0, [pc, #36]	; (7ed4 <audiodf_midi_init+0x30>)
    7eb0:	4b09      	ldr	r3, [pc, #36]	; (7ed8 <audiodf_midi_init+0x34>)
    7eb2:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    7eb4:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    7eb6:	3010      	adds	r0, #16
    7eb8:	4b08      	ldr	r3, [pc, #32]	; (7edc <audiodf_midi_init+0x38>)
    7eba:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    7ebc:	4908      	ldr	r1, [pc, #32]	; (7ee0 <audiodf_midi_init+0x3c>)
    7ebe:	2001      	movs	r0, #1
    7ec0:	4b08      	ldr	r3, [pc, #32]	; (7ee4 <audiodf_midi_init+0x40>)
    7ec2:	4798      	blx	r3
	return ERR_NONE;
    7ec4:	2000      	movs	r0, #0
    7ec6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7ec8:	f06f 0010 	mvn.w	r0, #16
}
    7ecc:	bd08      	pop	{r3, pc}
    7ece:	bf00      	nop
    7ed0:	000085b1 	.word	0x000085b1
    7ed4:	200011c8 	.word	0x200011c8
    7ed8:	00007d59 	.word	0x00007d59
    7edc:	00008551 	.word	0x00008551
    7ee0:	20000368 	.word	0x20000368
    7ee4:	000084bd 	.word	0x000084bd

00007ee8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    7ee8:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7eea:	4b07      	ldr	r3, [pc, #28]	; (7f08 <usbdc_unconfig+0x20>)
    7eec:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    7eee:	b14c      	cbz	r4, 7f04 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    7ef0:	2600      	movs	r6, #0
    7ef2:	2501      	movs	r5, #1
    7ef4:	6863      	ldr	r3, [r4, #4]
    7ef6:	4632      	mov	r2, r6
    7ef8:	4629      	mov	r1, r5
    7efa:	4620      	mov	r0, r4
    7efc:	4798      	blx	r3
		func = func->next;
    7efe:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    7f00:	2c00      	cmp	r4, #0
    7f02:	d1f7      	bne.n	7ef4 <usbdc_unconfig+0xc>
    7f04:	bd70      	pop	{r4, r5, r6, pc}
    7f06:	bf00      	nop
    7f08:	200011e4 	.word	0x200011e4

00007f0c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    7f0c:	b570      	push	{r4, r5, r6, lr}
    7f0e:	4606      	mov	r6, r0
    7f10:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    7f12:	4b07      	ldr	r3, [pc, #28]	; (7f30 <usbdc_change_notify+0x24>)
    7f14:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    7f16:	b91c      	cbnz	r4, 7f20 <usbdc_change_notify+0x14>
    7f18:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    7f1a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    7f1c:	2c00      	cmp	r4, #0
    7f1e:	d0fb      	beq.n	7f18 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    7f20:	6863      	ldr	r3, [r4, #4]
    7f22:	2b00      	cmp	r3, #0
    7f24:	d0f9      	beq.n	7f1a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    7f26:	4629      	mov	r1, r5
    7f28:	4630      	mov	r0, r6
    7f2a:	4798      	blx	r3
    7f2c:	e7f5      	b.n	7f1a <usbdc_change_notify+0xe>
    7f2e:	bf00      	nop
    7f30:	200011e4 	.word	0x200011e4

00007f34 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f36:	4607      	mov	r7, r0
    7f38:	460e      	mov	r6, r1
    7f3a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    7f3c:	4b0c      	ldr	r3, [pc, #48]	; (7f70 <usbdc_request_handler+0x3c>)
    7f3e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    7f40:	b91c      	cbnz	r4, 7f4a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    7f42:	2000      	movs	r0, #0
    7f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    7f46:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    7f48:	b16c      	cbz	r4, 7f66 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    7f4a:	6863      	ldr	r3, [r4, #4]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d0fa      	beq.n	7f46 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    7f50:	462a      	mov	r2, r5
    7f52:	4631      	mov	r1, r6
    7f54:	4638      	mov	r0, r7
    7f56:	4798      	blx	r3
			if (0 == rc) {
    7f58:	b138      	cbz	r0, 7f6a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    7f5a:	f110 0f0a 	cmn.w	r0, #10
    7f5e:	d0f2      	beq.n	7f46 <usbdc_request_handler+0x12>
				return -1;
    7f60:	f04f 30ff 	mov.w	r0, #4294967295
}
    7f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    7f66:	2000      	movs	r0, #0
    7f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    7f6a:	2001      	movs	r0, #1
    7f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f6e:	bf00      	nop
    7f70:	200011e4 	.word	0x200011e4

00007f74 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    7f74:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    7f76:	4b06      	ldr	r3, [pc, #24]	; (7f90 <usbd_sof_cb+0x1c>)
    7f78:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    7f7a:	b91c      	cbnz	r4, 7f84 <usbd_sof_cb+0x10>
    7f7c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    7f7e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    7f80:	2c00      	cmp	r4, #0
    7f82:	d0fb      	beq.n	7f7c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    7f84:	6863      	ldr	r3, [r4, #4]
    7f86:	2b00      	cmp	r3, #0
    7f88:	d0f9      	beq.n	7f7e <usbd_sof_cb+0xa>
			sof->cb();
    7f8a:	4798      	blx	r3
    7f8c:	e7f7      	b.n	7f7e <usbd_sof_cb+0xa>
    7f8e:	bf00      	nop
    7f90:	200011e4 	.word	0x200011e4

00007f94 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    7f94:	b510      	push	{r4, lr}
    7f96:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    7f98:	b119      	cbz	r1, 7fa2 <usbdc_cb_ctl_done+0xe>
    7f9a:	2901      	cmp	r1, #1
    7f9c:	d026      	beq.n	7fec <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    7f9e:	2000      	movs	r0, #0
    7fa0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    7fa2:	7813      	ldrb	r3, [r2, #0]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d1fa      	bne.n	7f9e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    7fa8:	7853      	ldrb	r3, [r2, #1]
    7faa:	2b05      	cmp	r3, #5
    7fac:	d00f      	beq.n	7fce <usbdc_cb_ctl_done+0x3a>
    7fae:	2b09      	cmp	r3, #9
    7fb0:	d1f5      	bne.n	7f9e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    7fb2:	8852      	ldrh	r2, [r2, #2]
    7fb4:	4b10      	ldr	r3, [pc, #64]	; (7ff8 <usbdc_cb_ctl_done+0x64>)
    7fb6:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    7fb8:	8863      	ldrh	r3, [r4, #2]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	bf14      	ite	ne
    7fbe:	2104      	movne	r1, #4
    7fc0:	2103      	moveq	r1, #3
    7fc2:	4b0d      	ldr	r3, [pc, #52]	; (7ff8 <usbdc_cb_ctl_done+0x64>)
    7fc4:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    7fc6:	2001      	movs	r0, #1
    7fc8:	4b0c      	ldr	r3, [pc, #48]	; (7ffc <usbdc_cb_ctl_done+0x68>)
    7fca:	4798      	blx	r3
    7fcc:	e7e7      	b.n	7f9e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    7fce:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    7fd0:	b2c0      	uxtb	r0, r0
    7fd2:	4b0b      	ldr	r3, [pc, #44]	; (8000 <usbdc_cb_ctl_done+0x6c>)
    7fd4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    7fd6:	8863      	ldrh	r3, [r4, #2]
    7fd8:	2b00      	cmp	r3, #0
    7fda:	bf14      	ite	ne
    7fdc:	2103      	movne	r1, #3
    7fde:	2102      	moveq	r1, #2
    7fe0:	4b05      	ldr	r3, [pc, #20]	; (7ff8 <usbdc_cb_ctl_done+0x64>)
    7fe2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    7fe4:	2001      	movs	r0, #1
    7fe6:	4b05      	ldr	r3, [pc, #20]	; (7ffc <usbdc_cb_ctl_done+0x68>)
    7fe8:	4798      	blx	r3
    7fea:	e7d8      	b.n	7f9e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    7fec:	2201      	movs	r2, #1
    7fee:	4621      	mov	r1, r4
    7ff0:	2000      	movs	r0, #0
    7ff2:	4b04      	ldr	r3, [pc, #16]	; (8004 <usbdc_cb_ctl_done+0x70>)
    7ff4:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    7ff6:	e7d2      	b.n	7f9e <usbdc_cb_ctl_done+0xa>
    7ff8:	200011e4 	.word	0x200011e4
    7ffc:	00007f0d 	.word	0x00007f0d
    8000:	00001f05 	.word	0x00001f05
    8004:	00007f35 	.word	0x00007f35

00008008 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    8008:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    800a:	4b0d      	ldr	r3, [pc, #52]	; (8040 <usbdc_reset+0x38>)
    800c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    800e:	4d0d      	ldr	r5, [pc, #52]	; (8044 <usbdc_reset+0x3c>)
    8010:	2602      	movs	r6, #2
    8012:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    8014:	2400      	movs	r4, #0
    8016:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    8018:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    801a:	4620      	mov	r0, r4
    801c:	4b0a      	ldr	r3, [pc, #40]	; (8048 <usbdc_reset+0x40>)
    801e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    8020:	7f28      	ldrb	r0, [r5, #28]
    8022:	4b0a      	ldr	r3, [pc, #40]	; (804c <usbdc_reset+0x44>)
    8024:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    8026:	4a0a      	ldr	r2, [pc, #40]	; (8050 <usbdc_reset+0x48>)
    8028:	4621      	mov	r1, r4
    802a:	4620      	mov	r0, r4
    802c:	4d09      	ldr	r5, [pc, #36]	; (8054 <usbdc_reset+0x4c>)
    802e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    8030:	4a09      	ldr	r2, [pc, #36]	; (8058 <usbdc_reset+0x50>)
    8032:	4631      	mov	r1, r6
    8034:	4620      	mov	r0, r4
    8036:	47a8      	blx	r5
	usb_d_ep_enable(0);
    8038:	4620      	mov	r0, r4
    803a:	4b08      	ldr	r3, [pc, #32]	; (805c <usbdc_reset+0x54>)
    803c:	4798      	blx	r3
    803e:	bd70      	pop	{r4, r5, r6, pc}
    8040:	00007ee9 	.word	0x00007ee9
    8044:	200011e4 	.word	0x200011e4
    8048:	00001f79 	.word	0x00001f79
    804c:	00001f65 	.word	0x00001f65
    8050:	000080a1 	.word	0x000080a1
    8054:	00002179 	.word	0x00002179
    8058:	00007f95 	.word	0x00007f95
    805c:	00001fa5 	.word	0x00001fa5

00008060 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    8060:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    8062:	b110      	cbz	r0, 806a <usbd_event_cb+0xa>
    8064:	2801      	cmp	r0, #1
    8066:	d004      	beq.n	8072 <usbd_event_cb+0x12>
    8068:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    806a:	2000      	movs	r0, #0
    806c:	4b02      	ldr	r3, [pc, #8]	; (8078 <usbd_event_cb+0x18>)
    806e:	4798      	blx	r3
		break;
    8070:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    8072:	4b02      	ldr	r3, [pc, #8]	; (807c <usbd_event_cb+0x1c>)
    8074:	4798      	blx	r3
    8076:	bd08      	pop	{r3, pc}
    8078:	00007f0d 	.word	0x00007f0d
    807c:	00008009 	.word	0x00008009

00008080 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    8080:	b500      	push	{lr}
    8082:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    8084:	9101      	str	r1, [sp, #4]
    8086:	9202      	str	r2, [sp, #8]
    8088:	f88d 000c 	strb.w	r0, [sp, #12]
    808c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    8090:	a801      	add	r0, sp, #4
    8092:	4b02      	ldr	r3, [pc, #8]	; (809c <usbdc_xfer+0x1c>)
    8094:	4798      	blx	r3
}
    8096:	b005      	add	sp, #20
    8098:	f85d fb04 	ldr.w	pc, [sp], #4
    809c:	00001ff1 	.word	0x00001ff1

000080a0 <usbdc_cb_ctl_req>:
{
    80a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    80a4:	b083      	sub	sp, #12
    80a6:	4605      	mov	r5, r0
    80a8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    80aa:	2200      	movs	r2, #0
    80ac:	4b9b      	ldr	r3, [pc, #620]	; (831c <usbdc_cb_ctl_req+0x27c>)
    80ae:	4798      	blx	r3
    80b0:	f1b0 3fff 	cmp.w	r0, #4294967295
    80b4:	d00b      	beq.n	80ce <usbdc_cb_ctl_req+0x2e>
    80b6:	2801      	cmp	r0, #1
    80b8:	f000 81e3 	beq.w	8482 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    80bc:	7823      	ldrb	r3, [r4, #0]
    80be:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    80c2:	d008      	beq.n	80d6 <usbdc_cb_ctl_req+0x36>
    80c4:	2a80      	cmp	r2, #128	; 0x80
    80c6:	f000 80f4 	beq.w	82b2 <usbdc_cb_ctl_req+0x212>
		return false;
    80ca:	2000      	movs	r0, #0
    80cc:	e000      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    80ce:	2000      	movs	r0, #0
}
    80d0:	b003      	add	sp, #12
    80d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    80d6:	7862      	ldrb	r2, [r4, #1]
    80d8:	3a01      	subs	r2, #1
    80da:	2a0a      	cmp	r2, #10
    80dc:	f200 81d3 	bhi.w	8486 <usbdc_cb_ctl_req+0x3e6>
    80e0:	e8df f012 	tbh	[pc, r2, lsl #1]
    80e4:	01d10060 	.word	0x01d10060
    80e8:	01d10076 	.word	0x01d10076
    80ec:	01d1000b 	.word	0x01d1000b
    80f0:	01d101d1 	.word	0x01d101d1
    80f4:	01d10015 	.word	0x01d10015
    80f8:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    80fa:	2301      	movs	r3, #1
    80fc:	2200      	movs	r2, #0
    80fe:	4611      	mov	r1, r2
    8100:	4628      	mov	r0, r5
    8102:	4c87      	ldr	r4, [pc, #540]	; (8320 <usbdc_cb_ctl_req+0x280>)
    8104:	47a0      	blx	r4
    8106:	fab0 f080 	clz	r0, r0
    810a:	0940      	lsrs	r0, r0, #5
    810c:	e7e0      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    810e:	8862      	ldrh	r2, [r4, #2]
    8110:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    8112:	b1ca      	cbz	r2, 8148 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    8114:	4b83      	ldr	r3, [pc, #524]	; (8324 <usbdc_cb_ctl_req+0x284>)
    8116:	681b      	ldr	r3, [r3, #0]
    8118:	6859      	ldr	r1, [r3, #4]
    811a:	6818      	ldr	r0, [r3, #0]
    811c:	4b82      	ldr	r3, [pc, #520]	; (8328 <usbdc_cb_ctl_req+0x288>)
    811e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    8120:	2800      	cmp	r0, #0
    8122:	f000 81be 	beq.w	84a2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    8126:	78c2      	ldrb	r2, [r0, #3]
    8128:	7881      	ldrb	r1, [r0, #2]
    812a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    812e:	fa10 f181 	uxtah	r1, r0, r1
    8132:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    8134:	2204      	movs	r2, #4
    8136:	4b7d      	ldr	r3, [pc, #500]	; (832c <usbdc_cb_ctl_req+0x28c>)
    8138:	4798      	blx	r3
    813a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    813c:	b130      	cbz	r0, 814c <usbdc_cb_ctl_req+0xac>
    813e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    8140:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8324 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    8144:	4f79      	ldr	r7, [pc, #484]	; (832c <usbdc_cb_ctl_req+0x28c>)
    8146:	e018      	b.n	817a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    8148:	4b79      	ldr	r3, [pc, #484]	; (8330 <usbdc_cb_ctl_req+0x290>)
    814a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    814c:	2301      	movs	r3, #1
    814e:	2200      	movs	r2, #0
    8150:	4611      	mov	r1, r2
    8152:	4628      	mov	r0, r5
    8154:	4c72      	ldr	r4, [pc, #456]	; (8320 <usbdc_cb_ctl_req+0x280>)
    8156:	47a0      	blx	r4
    8158:	fab0 f080 	clz	r0, r0
    815c:	0940      	lsrs	r0, r0, #5
    815e:	e7b7      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    8160:	464c      	mov	r4, r9
    8162:	e000      	b.n	8166 <usbdc_cb_ctl_req+0xc6>
    8164:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    8166:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    8168:	7803      	ldrb	r3, [r0, #0]
    816a:	4418      	add	r0, r3
    816c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    816e:	2204      	movs	r2, #4
    8170:	9901      	ldr	r1, [sp, #4]
    8172:	47b8      	blx	r7
    8174:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    8176:	2800      	cmp	r0, #0
    8178:	d0e8      	beq.n	814c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    817a:	f890 9002 	ldrb.w	r9, [r0, #2]
    817e:	45a1      	cmp	r9, r4
    8180:	d0f1      	beq.n	8166 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    8182:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    8186:	2c00      	cmp	r4, #0
    8188:	d0ea      	beq.n	8160 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    818a:	2600      	movs	r6, #0
    818c:	6863      	ldr	r3, [r4, #4]
    818e:	466a      	mov	r2, sp
    8190:	4631      	mov	r1, r6
    8192:	4620      	mov	r0, r4
    8194:	4798      	blx	r3
    8196:	2800      	cmp	r0, #0
    8198:	d0e4      	beq.n	8164 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    819a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    819c:	2c00      	cmp	r4, #0
    819e:	d1f5      	bne.n	818c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    81a0:	464c      	mov	r4, r9
    81a2:	e7e0      	b.n	8166 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    81a4:	f003 031f 	and.w	r3, r3, #31
    81a8:	2b02      	cmp	r3, #2
    81aa:	f040 816e 	bne.w	848a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    81ae:	88e3      	ldrh	r3, [r4, #6]
    81b0:	b10b      	cbz	r3, 81b6 <usbdc_cb_ctl_req+0x116>
			return false;
    81b2:	2000      	movs	r0, #0
    81b4:	e78c      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    81b6:	88a0      	ldrh	r0, [r4, #4]
    81b8:	2100      	movs	r1, #0
    81ba:	b2c0      	uxtb	r0, r0
    81bc:	4b5d      	ldr	r3, [pc, #372]	; (8334 <usbdc_cb_ctl_req+0x294>)
    81be:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    81c0:	2301      	movs	r3, #1
    81c2:	2200      	movs	r2, #0
    81c4:	4611      	mov	r1, r2
    81c6:	4628      	mov	r0, r5
    81c8:	4c55      	ldr	r4, [pc, #340]	; (8320 <usbdc_cb_ctl_req+0x280>)
    81ca:	47a0      	blx	r4
		return true;
    81cc:	2001      	movs	r0, #1
    81ce:	e77f      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    81d0:	f003 031f 	and.w	r3, r3, #31
    81d4:	2b02      	cmp	r3, #2
    81d6:	f040 815a 	bne.w	848e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    81da:	88e3      	ldrh	r3, [r4, #6]
    81dc:	b10b      	cbz	r3, 81e2 <usbdc_cb_ctl_req+0x142>
			return false;
    81de:	2000      	movs	r0, #0
    81e0:	e776      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    81e2:	88a0      	ldrh	r0, [r4, #4]
    81e4:	2101      	movs	r1, #1
    81e6:	b2c0      	uxtb	r0, r0
    81e8:	4b52      	ldr	r3, [pc, #328]	; (8334 <usbdc_cb_ctl_req+0x294>)
    81ea:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    81ec:	2301      	movs	r3, #1
    81ee:	2200      	movs	r2, #0
    81f0:	4611      	mov	r1, r2
    81f2:	4628      	mov	r0, r5
    81f4:	4c4a      	ldr	r4, [pc, #296]	; (8320 <usbdc_cb_ctl_req+0x280>)
    81f6:	47a0      	blx	r4
		return true;
    81f8:	2001      	movs	r0, #1
    81fa:	e769      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    81fc:	8866      	ldrh	r6, [r4, #2]
    81fe:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    8200:	4a48      	ldr	r2, [pc, #288]	; (8324 <usbdc_cb_ctl_req+0x284>)
    8202:	6813      	ldr	r3, [r2, #0]
    8204:	7ed2      	ldrb	r2, [r2, #27]
    8206:	6859      	ldr	r1, [r3, #4]
    8208:	6818      	ldr	r0, [r3, #0]
    820a:	4b47      	ldr	r3, [pc, #284]	; (8328 <usbdc_cb_ctl_req+0x288>)
    820c:	4798      	blx	r3
	if (NULL == ifc) {
    820e:	2800      	cmp	r0, #0
    8210:	d045      	beq.n	829e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    8212:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    8214:	78c2      	ldrb	r2, [r0, #3]
    8216:	7881      	ldrb	r1, [r0, #2]
    8218:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    821c:	fa10 f181 	uxtah	r1, r0, r1
    8220:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    8222:	2204      	movs	r2, #4
    8224:	4b41      	ldr	r3, [pc, #260]	; (832c <usbdc_cb_ctl_req+0x28c>)
    8226:	4798      	blx	r3
    8228:	4603      	mov	r3, r0
    822a:	2800      	cmp	r0, #0
    822c:	d039      	beq.n	82a2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    822e:	2704      	movs	r7, #4
    8230:	4d3e      	ldr	r5, [pc, #248]	; (832c <usbdc_cb_ctl_req+0x28c>)
    8232:	e008      	b.n	8246 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    8234:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    8236:	7803      	ldrb	r3, [r0, #0]
    8238:	4418      	add	r0, r3
    823a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    823c:	463a      	mov	r2, r7
    823e:	9901      	ldr	r1, [sp, #4]
    8240:	47a8      	blx	r5
		if (NULL == ifc) {
    8242:	4603      	mov	r3, r0
    8244:	b378      	cbz	r0, 82a6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    8246:	789a      	ldrb	r2, [r3, #2]
    8248:	42a2      	cmp	r2, r4
    824a:	d1f3      	bne.n	8234 <usbdc_cb_ctl_req+0x194>
    824c:	78da      	ldrb	r2, [r3, #3]
    824e:	42b2      	cmp	r2, r6
    8250:	d1f0      	bne.n	8234 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    8252:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    8254:	4b33      	ldr	r3, [pc, #204]	; (8324 <usbdc_cb_ctl_req+0x284>)
    8256:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    8258:	b33d      	cbz	r5, 82aa <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    825a:	2701      	movs	r7, #1
    825c:	686b      	ldr	r3, [r5, #4]
    825e:	466a      	mov	r2, sp
    8260:	4639      	mov	r1, r7
    8262:	4628      	mov	r0, r5
    8264:	4798      	blx	r3
    8266:	b120      	cbz	r0, 8272 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    8268:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    826a:	2d00      	cmp	r5, #0
    826c:	d1f6      	bne.n	825c <usbdc_cb_ctl_req+0x1bc>
	return false;
    826e:	2000      	movs	r0, #0
    8270:	e72e      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    8272:	686b      	ldr	r3, [r5, #4]
    8274:	466a      	mov	r2, sp
    8276:	2100      	movs	r1, #0
    8278:	4628      	mov	r0, r5
    827a:	4798      	blx	r3
    827c:	b9b8      	cbnz	r0, 82ae <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    827e:	b136      	cbz	r6, 828e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    8280:	4a28      	ldr	r2, [pc, #160]	; (8324 <usbdc_cb_ctl_req+0x284>)
    8282:	2301      	movs	r3, #1
    8284:	fa03 f404 	lsl.w	r4, r3, r4
    8288:	7f53      	ldrb	r3, [r2, #29]
    828a:	4323      	orrs	r3, r4
    828c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    828e:	2300      	movs	r3, #0
    8290:	461a      	mov	r2, r3
    8292:	4619      	mov	r1, r3
    8294:	4618      	mov	r0, r3
    8296:	4c22      	ldr	r4, [pc, #136]	; (8320 <usbdc_cb_ctl_req+0x280>)
    8298:	47a0      	blx	r4
			return true;
    829a:	2001      	movs	r0, #1
    829c:	e718      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    829e:	2000      	movs	r0, #0
    82a0:	e716      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    82a2:	2000      	movs	r0, #0
    82a4:	e714      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
			return false;
    82a6:	2000      	movs	r0, #0
    82a8:	e712      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	return false;
    82aa:	2000      	movs	r0, #0
    82ac:	e710      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
			return false;
    82ae:	2000      	movs	r0, #0
    82b0:	e70e      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    82b2:	7862      	ldrb	r2, [r4, #1]
    82b4:	2a0a      	cmp	r2, #10
    82b6:	f200 80ec 	bhi.w	8492 <usbdc_cb_ctl_req+0x3f2>
    82ba:	e8df f012 	tbh	[pc, r2, lsl #1]
    82be:	008e      	.short	0x008e
    82c0:	00ea00ea 	.word	0x00ea00ea
    82c4:	00ea00ea 	.word	0x00ea00ea
    82c8:	000b00ea 	.word	0x000b00ea
    82cc:	008200ea 	.word	0x008200ea
    82d0:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    82d4:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    82d6:	0a13      	lsrs	r3, r2, #8
    82d8:	2b02      	cmp	r3, #2
    82da:	d02d      	beq.n	8338 <usbdc_cb_ctl_req+0x298>
    82dc:	2b03      	cmp	r3, #3
    82de:	d050      	beq.n	8382 <usbdc_cb_ctl_req+0x2e2>
    82e0:	2b01      	cmp	r3, #1
    82e2:	d001      	beq.n	82e8 <usbdc_cb_ctl_req+0x248>
	return false;
    82e4:	2000      	movs	r0, #0
    82e6:	e6f3      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    82e8:	88e2      	ldrh	r2, [r4, #6]
    82ea:	2a12      	cmp	r2, #18
    82ec:	bf28      	it	cs
    82ee:	2212      	movcs	r2, #18
    82f0:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    82f2:	4b0c      	ldr	r3, [pc, #48]	; (8324 <usbdc_cb_ctl_req+0x284>)
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	2201      	movs	r2, #1
    82f8:	6859      	ldr	r1, [r3, #4]
    82fa:	6818      	ldr	r0, [r3, #0]
    82fc:	4b0b      	ldr	r3, [pc, #44]	; (832c <usbdc_cb_ctl_req+0x28c>)
    82fe:	4798      	blx	r3
	if (!dev_desc) {
    8300:	4601      	mov	r1, r0
    8302:	2800      	cmp	r0, #0
    8304:	f000 80c7 	beq.w	8496 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    8308:	2300      	movs	r3, #0
    830a:	4622      	mov	r2, r4
    830c:	4628      	mov	r0, r5
    830e:	4c04      	ldr	r4, [pc, #16]	; (8320 <usbdc_cb_ctl_req+0x280>)
    8310:	47a0      	blx	r4
    8312:	fab0 f080 	clz	r0, r0
    8316:	0940      	lsrs	r0, r0, #5
    8318:	e6da      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
    831a:	bf00      	nop
    831c:	00007f35 	.word	0x00007f35
    8320:	00008081 	.word	0x00008081
    8324:	200011e4 	.word	0x200011e4
    8328:	00008645 	.word	0x00008645
    832c:	000085c5 	.word	0x000085c5
    8330:	00007ee9 	.word	0x00007ee9
    8334:	00002111 	.word	0x00002111
	uint16_t length   = req->wLength;
    8338:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    833a:	4b5b      	ldr	r3, [pc, #364]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    833c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	3201      	adds	r2, #1
    8342:	b2d2      	uxtb	r2, r2
    8344:	6859      	ldr	r1, [r3, #4]
    8346:	6818      	ldr	r0, [r3, #0]
    8348:	4b58      	ldr	r3, [pc, #352]	; (84ac <usbdc_cb_ctl_req+0x40c>)
    834a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    834c:	4601      	mov	r1, r0
    834e:	2800      	cmp	r0, #0
    8350:	f000 80a3 	beq.w	849a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    8354:	78c3      	ldrb	r3, [r0, #3]
    8356:	7882      	ldrb	r2, [r0, #2]
    8358:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    835c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    835e:	4294      	cmp	r4, r2
    8360:	d90d      	bls.n	837e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8362:	3e01      	subs	r6, #1
    8364:	4226      	tst	r6, r4
    8366:	bf0c      	ite	eq
    8368:	2301      	moveq	r3, #1
    836a:	2300      	movne	r3, #0
		length = total_len;
    836c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    836e:	4622      	mov	r2, r4
    8370:	4628      	mov	r0, r5
    8372:	4c4f      	ldr	r4, [pc, #316]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    8374:	47a0      	blx	r4
    8376:	fab0 f080 	clz	r0, r0
    837a:	0940      	lsrs	r0, r0, #5
    837c:	e6a8      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    837e:	2300      	movs	r3, #0
    8380:	e7f5      	b.n	836e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    8382:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8384:	4b48      	ldr	r3, [pc, #288]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    8386:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    8388:	681b      	ldr	r3, [r3, #0]
    838a:	b2d2      	uxtb	r2, r2
    838c:	6859      	ldr	r1, [r3, #4]
    838e:	6818      	ldr	r0, [r3, #0]
    8390:	4b48      	ldr	r3, [pc, #288]	; (84b4 <usbdc_cb_ctl_req+0x414>)
    8392:	4798      	blx	r3
	if (NULL == str_desc) {
    8394:	4601      	mov	r1, r0
    8396:	2800      	cmp	r0, #0
    8398:	f000 8081 	beq.w	849e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    839c:	7802      	ldrb	r2, [r0, #0]
    839e:	4294      	cmp	r4, r2
    83a0:	d90d      	bls.n	83be <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    83a2:	3e01      	subs	r6, #1
    83a4:	4226      	tst	r6, r4
    83a6:	bf0c      	ite	eq
    83a8:	2301      	moveq	r3, #1
    83aa:	2300      	movne	r3, #0
		length = str_desc[0];
    83ac:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    83ae:	4622      	mov	r2, r4
    83b0:	4628      	mov	r0, r5
    83b2:	4c3f      	ldr	r4, [pc, #252]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    83b4:	47a0      	blx	r4
    83b6:	fab0 f080 	clz	r0, r0
    83ba:	0940      	lsrs	r0, r0, #5
    83bc:	e688      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    83be:	2300      	movs	r3, #0
    83c0:	e7f5      	b.n	83ae <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    83c2:	4939      	ldr	r1, [pc, #228]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    83c4:	694b      	ldr	r3, [r1, #20]
    83c6:	7eca      	ldrb	r2, [r1, #27]
    83c8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    83ca:	2300      	movs	r3, #0
    83cc:	2201      	movs	r2, #1
    83ce:	6949      	ldr	r1, [r1, #20]
    83d0:	4628      	mov	r0, r5
    83d2:	4c37      	ldr	r4, [pc, #220]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    83d4:	47a0      	blx	r4
		return true;
    83d6:	2001      	movs	r0, #1
    83d8:	e67a      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    83da:	f003 031f 	and.w	r3, r3, #31
    83de:	2b01      	cmp	r3, #1
    83e0:	d903      	bls.n	83ea <usbdc_cb_ctl_req+0x34a>
    83e2:	2b02      	cmp	r3, #2
    83e4:	d010      	beq.n	8408 <usbdc_cb_ctl_req+0x368>
		return false;
    83e6:	2000      	movs	r0, #0
    83e8:	e672      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		st = 0;
    83ea:	2300      	movs	r3, #0
    83ec:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    83ee:	492e      	ldr	r1, [pc, #184]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    83f0:	694b      	ldr	r3, [r1, #20]
    83f2:	f8bd 2000 	ldrh.w	r2, [sp]
    83f6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    83f8:	2300      	movs	r3, #0
    83fa:	2202      	movs	r2, #2
    83fc:	6949      	ldr	r1, [r1, #20]
    83fe:	4628      	mov	r0, r5
    8400:	4c2b      	ldr	r4, [pc, #172]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    8402:	47a0      	blx	r4
	return true;
    8404:	2001      	movs	r0, #1
    8406:	e663      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    8408:	88a0      	ldrh	r0, [r4, #4]
    840a:	2102      	movs	r1, #2
    840c:	b2c0      	uxtb	r0, r0
    840e:	4b2a      	ldr	r3, [pc, #168]	; (84b8 <usbdc_cb_ctl_req+0x418>)
    8410:	4798      	blx	r3
		if (st < 0) {
    8412:	2800      	cmp	r0, #0
    8414:	db03      	blt.n	841e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    8416:	f000 0001 	and.w	r0, r0, #1
    841a:	9000      	str	r0, [sp, #0]
    841c:	e7e7      	b.n	83ee <usbdc_cb_ctl_req+0x34e>
			return false;
    841e:	2000      	movs	r0, #0
    8420:	e656      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    8422:	4b21      	ldr	r3, [pc, #132]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    8424:	7f5b      	ldrb	r3, [r3, #29]
    8426:	88a2      	ldrh	r2, [r4, #4]
    8428:	4113      	asrs	r3, r2
    842a:	f013 0f01 	tst.w	r3, #1
    842e:	d012      	beq.n	8456 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    8430:	4b1d      	ldr	r3, [pc, #116]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    8432:	691d      	ldr	r5, [r3, #16]
	return false;
    8434:	2000      	movs	r0, #0
	while (NULL != func) {
    8436:	2d00      	cmp	r5, #0
    8438:	f43f ae4a 	beq.w	80d0 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    843c:	2602      	movs	r6, #2
    843e:	686b      	ldr	r3, [r5, #4]
    8440:	4622      	mov	r2, r4
    8442:	4631      	mov	r1, r6
    8444:	4628      	mov	r0, r5
    8446:	4798      	blx	r3
    8448:	2800      	cmp	r0, #0
    844a:	da0f      	bge.n	846c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    844c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    844e:	2d00      	cmp	r5, #0
    8450:	d1f5      	bne.n	843e <usbdc_cb_ctl_req+0x39e>
	return false;
    8452:	2000      	movs	r0, #0
    8454:	e63c      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    8456:	4914      	ldr	r1, [pc, #80]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    8458:	694b      	ldr	r3, [r1, #20]
    845a:	2000      	movs	r0, #0
    845c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    845e:	4603      	mov	r3, r0
    8460:	2201      	movs	r2, #1
    8462:	6949      	ldr	r1, [r1, #20]
    8464:	4c12      	ldr	r4, [pc, #72]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    8466:	47a0      	blx	r4
		return true;
    8468:	2001      	movs	r0, #1
    846a:	e631      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    846c:	490e      	ldr	r1, [pc, #56]	; (84a8 <usbdc_cb_ctl_req+0x408>)
    846e:	694b      	ldr	r3, [r1, #20]
    8470:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    8472:	2300      	movs	r3, #0
    8474:	2201      	movs	r2, #1
    8476:	6949      	ldr	r1, [r1, #20]
    8478:	4618      	mov	r0, r3
    847a:	4c0d      	ldr	r4, [pc, #52]	; (84b0 <usbdc_cb_ctl_req+0x410>)
    847c:	47a0      	blx	r4
			return true;
    847e:	2001      	movs	r0, #1
    8480:	e626      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return true;
    8482:	2001      	movs	r0, #1
    8484:	e624      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    8486:	2000      	movs	r0, #0
    8488:	e622      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    848a:	2000      	movs	r0, #0
    848c:	e620      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    848e:	2000      	movs	r0, #0
    8490:	e61e      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    8492:	2000      	movs	r0, #0
    8494:	e61c      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    8496:	2000      	movs	r0, #0
    8498:	e61a      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    849a:	2000      	movs	r0, #0
    849c:	e618      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
		return false;
    849e:	2000      	movs	r0, #0
    84a0:	e616      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
			return false;
    84a2:	2000      	movs	r0, #0
    84a4:	e614      	b.n	80d0 <usbdc_cb_ctl_req+0x30>
    84a6:	bf00      	nop
    84a8:	200011e4 	.word	0x200011e4
    84ac:	00008645 	.word	0x00008645
    84b0:	00008081 	.word	0x00008081
    84b4:	000086ad 	.word	0x000086ad
    84b8:	00002111 	.word	0x00002111

000084bc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    84bc:	b508      	push	{r3, lr}
	switch (type) {
    84be:	2801      	cmp	r0, #1
    84c0:	d007      	beq.n	84d2 <usbdc_register_handler+0x16>
    84c2:	b110      	cbz	r0, 84ca <usbdc_register_handler+0xe>
    84c4:	2802      	cmp	r0, #2
    84c6:	d008      	beq.n	84da <usbdc_register_handler+0x1e>
    84c8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    84ca:	4806      	ldr	r0, [pc, #24]	; (84e4 <usbdc_register_handler+0x28>)
    84cc:	4b06      	ldr	r3, [pc, #24]	; (84e8 <usbdc_register_handler+0x2c>)
    84ce:	4798      	blx	r3
		break;
    84d0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    84d2:	4806      	ldr	r0, [pc, #24]	; (84ec <usbdc_register_handler+0x30>)
    84d4:	4b04      	ldr	r3, [pc, #16]	; (84e8 <usbdc_register_handler+0x2c>)
    84d6:	4798      	blx	r3
		break;
    84d8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    84da:	4805      	ldr	r0, [pc, #20]	; (84f0 <usbdc_register_handler+0x34>)
    84dc:	4b02      	ldr	r3, [pc, #8]	; (84e8 <usbdc_register_handler+0x2c>)
    84de:	4798      	blx	r3
    84e0:	bd08      	pop	{r3, pc}
    84e2:	bf00      	nop
    84e4:	200011e8 	.word	0x200011e8
    84e8:	00002221 	.word	0x00002221
    84ec:	200011ec 	.word	0x200011ec
    84f0:	200011f0 	.word	0x200011f0

000084f4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    84f4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    84f6:	4605      	mov	r5, r0
    84f8:	f240 3255 	movw	r2, #853	; 0x355
    84fc:	490c      	ldr	r1, [pc, #48]	; (8530 <usbdc_init+0x3c>)
    84fe:	3000      	adds	r0, #0
    8500:	bf18      	it	ne
    8502:	2001      	movne	r0, #1
    8504:	4b0b      	ldr	r3, [pc, #44]	; (8534 <usbdc_init+0x40>)
    8506:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    8508:	4b0b      	ldr	r3, [pc, #44]	; (8538 <usbdc_init+0x44>)
    850a:	4798      	blx	r3
	if (rc < 0) {
    850c:	2800      	cmp	r0, #0
    850e:	db0e      	blt.n	852e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    8510:	4c0a      	ldr	r4, [pc, #40]	; (853c <usbdc_init+0x48>)
    8512:	2220      	movs	r2, #32
    8514:	2100      	movs	r1, #0
    8516:	4620      	mov	r0, r4
    8518:	4b09      	ldr	r3, [pc, #36]	; (8540 <usbdc_init+0x4c>)
    851a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    851c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    851e:	4909      	ldr	r1, [pc, #36]	; (8544 <usbdc_init+0x50>)
    8520:	2000      	movs	r0, #0
    8522:	4c09      	ldr	r4, [pc, #36]	; (8548 <usbdc_init+0x54>)
    8524:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    8526:	4909      	ldr	r1, [pc, #36]	; (854c <usbdc_init+0x58>)
    8528:	2001      	movs	r0, #1
    852a:	47a0      	blx	r4

	return 0;
    852c:	2000      	movs	r0, #0
}
    852e:	bd38      	pop	{r3, r4, r5, pc}
    8530:	00009960 	.word	0x00009960
    8534:	000021c5 	.word	0x000021c5
    8538:	00001e79 	.word	0x00001e79
    853c:	200011e4 	.word	0x200011e4
    8540:	000088bf 	.word	0x000088bf
    8544:	00007f75 	.word	0x00007f75
    8548:	00001ee1 	.word	0x00001ee1
    854c:	00008061 	.word	0x00008061

00008550 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    8550:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    8552:	4601      	mov	r1, r0
    8554:	4801      	ldr	r0, [pc, #4]	; (855c <usbdc_register_function+0xc>)
    8556:	4b02      	ldr	r3, [pc, #8]	; (8560 <usbdc_register_function+0x10>)
    8558:	4798      	blx	r3
    855a:	bd08      	pop	{r3, pc}
    855c:	200011f4 	.word	0x200011f4
    8560:	00002221 	.word	0x00002221

00008564 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    8564:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    8566:	4b0a      	ldr	r3, [pc, #40]	; (8590 <usbdc_start+0x2c>)
    8568:	7e9b      	ldrb	r3, [r3, #26]
    856a:	b95b      	cbnz	r3, 8584 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    856c:	b168      	cbz	r0, 858a <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    856e:	4b08      	ldr	r3, [pc, #32]	; (8590 <usbdc_start+0x2c>)
    8570:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    8572:	6802      	ldr	r2, [r0, #0]
    8574:	79d2      	ldrb	r2, [r2, #7]
    8576:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    8578:	2201      	movs	r2, #1
    857a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    857c:	4b05      	ldr	r3, [pc, #20]	; (8594 <usbdc_start+0x30>)
    857e:	4798      	blx	r3
	return ERR_NONE;
    8580:	2000      	movs	r0, #0
    8582:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    8584:	f06f 0003 	mvn.w	r0, #3
    8588:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    858a:	f06f 0008 	mvn.w	r0, #8
}
    858e:	bd08      	pop	{r3, pc}
    8590:	200011e4 	.word	0x200011e4
    8594:	00001eed 	.word	0x00001eed

00008598 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    8598:	b508      	push	{r3, lr}
	usb_d_attach();
    859a:	4b01      	ldr	r3, [pc, #4]	; (85a0 <usbdc_attach+0x8>)
    859c:	4798      	blx	r3
    859e:	bd08      	pop	{r3, pc}
    85a0:	00001ef9 	.word	0x00001ef9

000085a4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    85a4:	4b01      	ldr	r3, [pc, #4]	; (85ac <usbdc_get_ctrl_buffer+0x8>)
    85a6:	6958      	ldr	r0, [r3, #20]
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop
    85ac:	200011e4 	.word	0x200011e4

000085b0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    85b0:	4b03      	ldr	r3, [pc, #12]	; (85c0 <usbdc_get_state+0x10>)
    85b2:	7e98      	ldrb	r0, [r3, #26]
    85b4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    85b8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    85ba:	bf18      	it	ne
    85bc:	2010      	movne	r0, #16
    85be:	4770      	bx	lr
    85c0:	200011e4 	.word	0x200011e4

000085c4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    85c4:	4288      	cmp	r0, r1
    85c6:	d214      	bcs.n	85f2 <usb_find_desc+0x2e>
	return desc[0];
    85c8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    85ca:	2b01      	cmp	r3, #1
    85cc:	d913      	bls.n	85f6 <usb_find_desc+0x32>
{
    85ce:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    85d0:	7844      	ldrb	r4, [r0, #1]
    85d2:	4294      	cmp	r4, r2
    85d4:	d00a      	beq.n	85ec <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    85d6:	4418      	add	r0, r3
	while (desc < eof) {
    85d8:	4281      	cmp	r1, r0
    85da:	d906      	bls.n	85ea <usb_find_desc+0x26>
	return desc[0];
    85dc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    85de:	2b01      	cmp	r3, #1
    85e0:	d90b      	bls.n	85fa <usb_find_desc+0x36>
	return desc[1];
    85e2:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    85e4:	4294      	cmp	r4, r2
    85e6:	d1f6      	bne.n	85d6 <usb_find_desc+0x12>
    85e8:	e000      	b.n	85ec <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    85ea:	2000      	movs	r0, #0
}
    85ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    85f0:	4770      	bx	lr
	return NULL;
    85f2:	2000      	movs	r0, #0
    85f4:	4770      	bx	lr
		_desc_len_check();
    85f6:	2000      	movs	r0, #0
    85f8:	4770      	bx	lr
    85fa:	2000      	movs	r0, #0
    85fc:	e7f6      	b.n	85ec <usb_find_desc+0x28>

000085fe <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    85fe:	4288      	cmp	r0, r1
    8600:	d216      	bcs.n	8630 <usb_find_ep_desc+0x32>
	return desc[0];
    8602:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8604:	2b01      	cmp	r3, #1
    8606:	d915      	bls.n	8634 <usb_find_ep_desc+0x36>
	return desc[1];
    8608:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    860a:	2a04      	cmp	r2, #4
    860c:	d014      	beq.n	8638 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    860e:	2a05      	cmp	r2, #5
    8610:	d00b      	beq.n	862a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    8612:	4418      	add	r0, r3
	while (desc < eof) {
    8614:	4281      	cmp	r1, r0
    8616:	d909      	bls.n	862c <usb_find_ep_desc+0x2e>
	return desc[0];
    8618:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    861a:	2b01      	cmp	r3, #1
    861c:	d90e      	bls.n	863c <usb_find_ep_desc+0x3e>
	return desc[1];
    861e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8620:	2a04      	cmp	r2, #4
    8622:	d00d      	beq.n	8640 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8624:	2a05      	cmp	r2, #5
    8626:	d1f4      	bne.n	8612 <usb_find_ep_desc+0x14>
    8628:	e00b      	b.n	8642 <usb_find_ep_desc+0x44>
    862a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    862c:	2000      	movs	r0, #0
    862e:	4770      	bx	lr
    8630:	2000      	movs	r0, #0
    8632:	4770      	bx	lr
		_desc_len_check();
    8634:	2000      	movs	r0, #0
    8636:	4770      	bx	lr
	return NULL;
    8638:	2000      	movs	r0, #0
    863a:	4770      	bx	lr
		_desc_len_check();
    863c:	2000      	movs	r0, #0
    863e:	4770      	bx	lr
	return NULL;
    8640:	2000      	movs	r0, #0
}
    8642:	4770      	bx	lr

00008644 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8644:	b538      	push	{r3, r4, r5, lr}
    8646:	460c      	mov	r4, r1
    8648:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    864a:	2202      	movs	r2, #2
    864c:	4b16      	ldr	r3, [pc, #88]	; (86a8 <usb_find_cfg_desc+0x64>)
    864e:	4798      	blx	r3
	if (!desc) {
    8650:	4603      	mov	r3, r0
    8652:	b1e8      	cbz	r0, 8690 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    8654:	4284      	cmp	r4, r0
    8656:	d91d      	bls.n	8694 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    8658:	7802      	ldrb	r2, [r0, #0]
    865a:	2a01      	cmp	r2, #1
    865c:	d91c      	bls.n	8698 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    865e:	7842      	ldrb	r2, [r0, #1]
    8660:	2a02      	cmp	r2, #2
    8662:	d11b      	bne.n	869c <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    8664:	7942      	ldrb	r2, [r0, #5]
    8666:	42aa      	cmp	r2, r5
    8668:	d012      	beq.n	8690 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    866a:	78d9      	ldrb	r1, [r3, #3]
    866c:	789a      	ldrb	r2, [r3, #2]
    866e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    8672:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    8676:	429c      	cmp	r4, r3
    8678:	d909      	bls.n	868e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    867a:	781a      	ldrb	r2, [r3, #0]
    867c:	2a01      	cmp	r2, #1
    867e:	d90f      	bls.n	86a0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    8680:	785a      	ldrb	r2, [r3, #1]
    8682:	2a02      	cmp	r2, #2
    8684:	d10e      	bne.n	86a4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    8686:	795a      	ldrb	r2, [r3, #5]
    8688:	42aa      	cmp	r2, r5
    868a:	d1ee      	bne.n	866a <usb_find_cfg_desc+0x26>
    868c:	e000      	b.n	8690 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    868e:	2300      	movs	r3, #0
}
    8690:	4618      	mov	r0, r3
    8692:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    8694:	2300      	movs	r3, #0
    8696:	e7fb      	b.n	8690 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    8698:	2300      	movs	r3, #0
    869a:	e7f9      	b.n	8690 <usb_find_cfg_desc+0x4c>
	return NULL;
    869c:	2300      	movs	r3, #0
    869e:	e7f7      	b.n	8690 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    86a0:	2300      	movs	r3, #0
    86a2:	e7f5      	b.n	8690 <usb_find_cfg_desc+0x4c>
	return NULL;
    86a4:	2300      	movs	r3, #0
    86a6:	e7f3      	b.n	8690 <usb_find_cfg_desc+0x4c>
    86a8:	000085c5 	.word	0x000085c5

000086ac <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    86ac:	4288      	cmp	r0, r1
    86ae:	d217      	bcs.n	86e0 <usb_find_str_desc+0x34>
{
    86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86b4:	460d      	mov	r5, r1
    86b6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    86b8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    86ba:	f04f 0803 	mov.w	r8, #3
    86be:	4f0c      	ldr	r7, [pc, #48]	; (86f0 <usb_find_str_desc+0x44>)
    86c0:	4642      	mov	r2, r8
    86c2:	4629      	mov	r1, r5
    86c4:	47b8      	blx	r7
		if (desc) {
    86c6:	4603      	mov	r3, r0
    86c8:	b170      	cbz	r0, 86e8 <usb_find_str_desc+0x3c>
	return desc[0];
    86ca:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    86cc:	2801      	cmp	r0, #1
    86ce:	d90a      	bls.n	86e6 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    86d0:	42a6      	cmp	r6, r4
    86d2:	d009      	beq.n	86e8 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    86d4:	4418      	add	r0, r3
    86d6:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    86d8:	4285      	cmp	r5, r0
    86da:	d8f1      	bhi.n	86c0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    86dc:	2300      	movs	r3, #0
    86de:	e003      	b.n	86e8 <usb_find_str_desc+0x3c>
    86e0:	2300      	movs	r3, #0
}
    86e2:	4618      	mov	r0, r3
    86e4:	4770      	bx	lr
			_desc_len_check();
    86e6:	2300      	movs	r3, #0
}
    86e8:	4618      	mov	r0, r3
    86ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86ee:	bf00      	nop
    86f0:	000085c5 	.word	0x000085c5

000086f4 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    86f4:	4b3a      	ldr	r3, [pc, #232]	; (87e0 <hiddf_demo_sof_event+0xec>)
    86f6:	791b      	ldrb	r3, [r3, #4]
    86f8:	2b0a      	cmp	r3, #10
    86fa:	d803      	bhi.n	8704 <hiddf_demo_sof_event+0x10>
    86fc:	3301      	adds	r3, #1
    86fe:	4a38      	ldr	r2, [pc, #224]	; (87e0 <hiddf_demo_sof_event+0xec>)
    8700:	7113      	strb	r3, [r2, #4]
    8702:	4770      	bx	lr
{
    8704:	b570      	push	{r4, r5, r6, lr}
    8706:	b084      	sub	sp, #16
		interval = 0;
    8708:	4b35      	ldr	r3, [pc, #212]	; (87e0 <hiddf_demo_sof_event+0xec>)
    870a:	2200      	movs	r2, #0
    870c:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    870e:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    8710:	a801      	add	r0, sp, #4
    8712:	4b34      	ldr	r3, [pc, #208]	; (87e4 <hiddf_demo_sof_event+0xf0>)
    8714:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8716:	096b      	lsrs	r3, r5, #5
    8718:	4933      	ldr	r1, [pc, #204]	; (87e8 <hiddf_demo_sof_event+0xf4>)
    871a:	01db      	lsls	r3, r3, #7
    871c:	18ca      	adds	r2, r1, r3
    871e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8720:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8722:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8724:	405c      	eors	r4, r3
    8726:	400c      	ands	r4, r1
    8728:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    872a:	a801      	add	r0, sp, #4
    872c:	4b2f      	ldr	r3, [pc, #188]	; (87ec <hiddf_demo_sof_event+0xf8>)
    872e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    8730:	f005 051f 	and.w	r5, r5, #31
    8734:	2301      	movs	r3, #1
    8736:	fa03 f505 	lsl.w	r5, r3, r5
    873a:	4225      	tst	r5, r4
    873c:	d040      	beq.n	87c0 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    873e:	4b28      	ldr	r3, [pc, #160]	; (87e0 <hiddf_demo_sof_event+0xec>)
    8740:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    8742:	a802      	add	r0, sp, #8
    8744:	4b27      	ldr	r3, [pc, #156]	; (87e4 <hiddf_demo_sof_event+0xf0>)
    8746:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8748:	096b      	lsrs	r3, r5, #5
    874a:	4927      	ldr	r1, [pc, #156]	; (87e8 <hiddf_demo_sof_event+0xf4>)
    874c:	01db      	lsls	r3, r3, #7
    874e:	18ca      	adds	r2, r1, r3
    8750:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8752:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8754:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8756:	405c      	eors	r4, r3
    8758:	400c      	ands	r4, r1
    875a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    875c:	a802      	add	r0, sp, #8
    875e:	4b23      	ldr	r3, [pc, #140]	; (87ec <hiddf_demo_sof_event+0xf8>)
    8760:	4798      	blx	r3
    8762:	f005 051f 	and.w	r5, r5, #31
    8766:	2301      	movs	r3, #1
    8768:	fa03 f505 	lsl.w	r5, r3, r5
    876c:	4225      	tst	r5, r4
    876e:	d02d      	beq.n	87cc <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    8770:	4d1b      	ldr	r5, [pc, #108]	; (87e0 <hiddf_demo_sof_event+0xec>)
    8772:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    8774:	a803      	add	r0, sp, #12
    8776:	4b1b      	ldr	r3, [pc, #108]	; (87e4 <hiddf_demo_sof_event+0xf0>)
    8778:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    877a:	0973      	lsrs	r3, r6, #5
    877c:	491a      	ldr	r1, [pc, #104]	; (87e8 <hiddf_demo_sof_event+0xf4>)
    877e:	01db      	lsls	r3, r3, #7
    8780:	18ca      	adds	r2, r1, r3
    8782:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8784:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8786:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8788:	405c      	eors	r4, r3
    878a:	400c      	ands	r4, r1
    878c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    878e:	a803      	add	r0, sp, #12
    8790:	4b16      	ldr	r3, [pc, #88]	; (87ec <hiddf_demo_sof_event+0xf8>)
    8792:	4798      	blx	r3
    8794:	f006 061f 	and.w	r6, r6, #31
    8798:	2301      	movs	r3, #1
    879a:	40b3      	lsls	r3, r6
    879c:	401c      	ands	r4, r3
    879e:	bf0c      	ite	eq
    87a0:	2301      	moveq	r3, #1
    87a2:	2300      	movne	r3, #0
    87a4:	7d2a      	ldrb	r2, [r5, #20]
    87a6:	429a      	cmp	r2, r3
    87a8:	d008      	beq.n	87bc <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    87aa:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    87ac:	b19c      	cbz	r4, 87d6 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    87ae:	2200      	movs	r2, #0
    87b0:	4b0f      	ldr	r3, [pc, #60]	; (87f0 <hiddf_demo_sof_event+0xfc>)
    87b2:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    87b4:	2101      	movs	r1, #1
    87b6:	480e      	ldr	r0, [pc, #56]	; (87f0 <hiddf_demo_sof_event+0xfc>)
    87b8:	4b0e      	ldr	r3, [pc, #56]	; (87f4 <hiddf_demo_sof_event+0x100>)
    87ba:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    87bc:	b004      	add	sp, #16
    87be:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    87c0:	4619      	mov	r1, r3
    87c2:	f06f 0004 	mvn.w	r0, #4
    87c6:	4b0c      	ldr	r3, [pc, #48]	; (87f8 <hiddf_demo_sof_event+0x104>)
    87c8:	4798      	blx	r3
    87ca:	e7b8      	b.n	873e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    87cc:	4619      	mov	r1, r3
    87ce:	2005      	movs	r0, #5
    87d0:	4b09      	ldr	r3, [pc, #36]	; (87f8 <hiddf_demo_sof_event+0x104>)
    87d2:	4798      	blx	r3
    87d4:	e7cc      	b.n	8770 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    87d6:	2201      	movs	r2, #1
    87d8:	4b05      	ldr	r3, [pc, #20]	; (87f0 <hiddf_demo_sof_event+0xfc>)
    87da:	709a      	strb	r2, [r3, #2]
    87dc:	e7ea      	b.n	87b4 <hiddf_demo_sof_event+0xc0>
    87de:	bf00      	nop
    87e0:	20001204 	.word	0x20001204
    87e4:	00001255 	.word	0x00001255
    87e8:	41008000 	.word	0x41008000
    87ec:	00001263 	.word	0x00001263
    87f0:	20000370 	.word	0x20000370
    87f4:	000079f5 	.word	0x000079f5
    87f8:	00007c89 	.word	0x00007c89

000087fc <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    87fc:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    87fe:	4805      	ldr	r0, [pc, #20]	; (8814 <composite_device_init+0x18>)
    8800:	4b05      	ldr	r3, [pc, #20]	; (8818 <composite_device_init+0x1c>)
    8802:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    8804:	4b05      	ldr	r3, [pc, #20]	; (881c <composite_device_init+0x20>)
    8806:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    8808:	4b05      	ldr	r3, [pc, #20]	; (8820 <composite_device_init+0x24>)
    880a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    880c:	4b05      	ldr	r3, [pc, #20]	; (8824 <composite_device_init+0x28>)
    880e:	4798      	blx	r3
    8810:	bd08      	pop	{r3, pc}
    8812:	bf00      	nop
    8814:	2000121c 	.word	0x2000121c
    8818:	000084f5 	.word	0x000084f5
    881c:	00007771 	.word	0x00007771
    8820:	00007c45 	.word	0x00007c45
    8824:	000079b1 	.word	0x000079b1

00008828 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    8828:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    882a:	4803      	ldr	r0, [pc, #12]	; (8838 <composite_device_start+0x10>)
    882c:	4b03      	ldr	r3, [pc, #12]	; (883c <composite_device_start+0x14>)
    882e:	4798      	blx	r3
	usbdc_attach();
    8830:	4b03      	ldr	r3, [pc, #12]	; (8840 <composite_device_start+0x18>)
    8832:	4798      	blx	r3
    8834:	bd08      	pop	{r3, pc}
    8836:	bf00      	nop
    8838:	2000037c 	.word	0x2000037c
    883c:	00008565 	.word	0x00008565
    8840:	00008599 	.word	0x00008599

00008844 <usb_init>:
		}
	}
}

void usb_init(void)
{
    8844:	b508      	push	{r3, lr}

	composite_device_init();
    8846:	4b01      	ldr	r3, [pc, #4]	; (884c <usb_init+0x8>)
    8848:	4798      	blx	r3
    884a:	bd08      	pop	{r3, pc}
    884c:	000087fd 	.word	0x000087fd

00008850 <__libc_init_array>:
    8850:	b570      	push	{r4, r5, r6, lr}
    8852:	4e0d      	ldr	r6, [pc, #52]	; (8888 <__libc_init_array+0x38>)
    8854:	4c0d      	ldr	r4, [pc, #52]	; (888c <__libc_init_array+0x3c>)
    8856:	1ba4      	subs	r4, r4, r6
    8858:	10a4      	asrs	r4, r4, #2
    885a:	2500      	movs	r5, #0
    885c:	42a5      	cmp	r5, r4
    885e:	d109      	bne.n	8874 <__libc_init_array+0x24>
    8860:	4e0b      	ldr	r6, [pc, #44]	; (8890 <__libc_init_array+0x40>)
    8862:	4c0c      	ldr	r4, [pc, #48]	; (8894 <__libc_init_array+0x44>)
    8864:	f001 f8d2 	bl	9a0c <_init>
    8868:	1ba4      	subs	r4, r4, r6
    886a:	10a4      	asrs	r4, r4, #2
    886c:	2500      	movs	r5, #0
    886e:	42a5      	cmp	r5, r4
    8870:	d105      	bne.n	887e <__libc_init_array+0x2e>
    8872:	bd70      	pop	{r4, r5, r6, pc}
    8874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8878:	4798      	blx	r3
    887a:	3501      	adds	r5, #1
    887c:	e7ee      	b.n	885c <__libc_init_array+0xc>
    887e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8882:	4798      	blx	r3
    8884:	3501      	adds	r5, #1
    8886:	e7f2      	b.n	886e <__libc_init_array+0x1e>
    8888:	00009a18 	.word	0x00009a18
    888c:	00009a18 	.word	0x00009a18
    8890:	00009a18 	.word	0x00009a18
    8894:	00009a1c 	.word	0x00009a1c

00008898 <malloc>:
    8898:	4b02      	ldr	r3, [pc, #8]	; (88a4 <malloc+0xc>)
    889a:	4601      	mov	r1, r0
    889c:	6818      	ldr	r0, [r3, #0]
    889e:	f000 b865 	b.w	896c <_malloc_r>
    88a2:	bf00      	nop
    88a4:	20000464 	.word	0x20000464

000088a8 <memcpy>:
    88a8:	b510      	push	{r4, lr}
    88aa:	1e43      	subs	r3, r0, #1
    88ac:	440a      	add	r2, r1
    88ae:	4291      	cmp	r1, r2
    88b0:	d100      	bne.n	88b4 <memcpy+0xc>
    88b2:	bd10      	pop	{r4, pc}
    88b4:	f811 4b01 	ldrb.w	r4, [r1], #1
    88b8:	f803 4f01 	strb.w	r4, [r3, #1]!
    88bc:	e7f7      	b.n	88ae <memcpy+0x6>

000088be <memset>:
    88be:	4402      	add	r2, r0
    88c0:	4603      	mov	r3, r0
    88c2:	4293      	cmp	r3, r2
    88c4:	d100      	bne.n	88c8 <memset+0xa>
    88c6:	4770      	bx	lr
    88c8:	f803 1b01 	strb.w	r1, [r3], #1
    88cc:	e7f9      	b.n	88c2 <memset+0x4>
	...

000088d0 <_free_r>:
    88d0:	b538      	push	{r3, r4, r5, lr}
    88d2:	4605      	mov	r5, r0
    88d4:	2900      	cmp	r1, #0
    88d6:	d045      	beq.n	8964 <_free_r+0x94>
    88d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    88dc:	1f0c      	subs	r4, r1, #4
    88de:	2b00      	cmp	r3, #0
    88e0:	bfb8      	it	lt
    88e2:	18e4      	addlt	r4, r4, r3
    88e4:	f000 f916 	bl	8b14 <__malloc_lock>
    88e8:	4a1f      	ldr	r2, [pc, #124]	; (8968 <_free_r+0x98>)
    88ea:	6813      	ldr	r3, [r2, #0]
    88ec:	4610      	mov	r0, r2
    88ee:	b933      	cbnz	r3, 88fe <_free_r+0x2e>
    88f0:	6063      	str	r3, [r4, #4]
    88f2:	6014      	str	r4, [r2, #0]
    88f4:	4628      	mov	r0, r5
    88f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    88fa:	f000 b90c 	b.w	8b16 <__malloc_unlock>
    88fe:	42a3      	cmp	r3, r4
    8900:	d90c      	bls.n	891c <_free_r+0x4c>
    8902:	6821      	ldr	r1, [r4, #0]
    8904:	1862      	adds	r2, r4, r1
    8906:	4293      	cmp	r3, r2
    8908:	bf04      	itt	eq
    890a:	681a      	ldreq	r2, [r3, #0]
    890c:	685b      	ldreq	r3, [r3, #4]
    890e:	6063      	str	r3, [r4, #4]
    8910:	bf04      	itt	eq
    8912:	1852      	addeq	r2, r2, r1
    8914:	6022      	streq	r2, [r4, #0]
    8916:	6004      	str	r4, [r0, #0]
    8918:	e7ec      	b.n	88f4 <_free_r+0x24>
    891a:	4613      	mov	r3, r2
    891c:	685a      	ldr	r2, [r3, #4]
    891e:	b10a      	cbz	r2, 8924 <_free_r+0x54>
    8920:	42a2      	cmp	r2, r4
    8922:	d9fa      	bls.n	891a <_free_r+0x4a>
    8924:	6819      	ldr	r1, [r3, #0]
    8926:	1858      	adds	r0, r3, r1
    8928:	42a0      	cmp	r0, r4
    892a:	d10b      	bne.n	8944 <_free_r+0x74>
    892c:	6820      	ldr	r0, [r4, #0]
    892e:	4401      	add	r1, r0
    8930:	1858      	adds	r0, r3, r1
    8932:	4282      	cmp	r2, r0
    8934:	6019      	str	r1, [r3, #0]
    8936:	d1dd      	bne.n	88f4 <_free_r+0x24>
    8938:	6810      	ldr	r0, [r2, #0]
    893a:	6852      	ldr	r2, [r2, #4]
    893c:	605a      	str	r2, [r3, #4]
    893e:	4401      	add	r1, r0
    8940:	6019      	str	r1, [r3, #0]
    8942:	e7d7      	b.n	88f4 <_free_r+0x24>
    8944:	d902      	bls.n	894c <_free_r+0x7c>
    8946:	230c      	movs	r3, #12
    8948:	602b      	str	r3, [r5, #0]
    894a:	e7d3      	b.n	88f4 <_free_r+0x24>
    894c:	6820      	ldr	r0, [r4, #0]
    894e:	1821      	adds	r1, r4, r0
    8950:	428a      	cmp	r2, r1
    8952:	bf04      	itt	eq
    8954:	6811      	ldreq	r1, [r2, #0]
    8956:	6852      	ldreq	r2, [r2, #4]
    8958:	6062      	str	r2, [r4, #4]
    895a:	bf04      	itt	eq
    895c:	1809      	addeq	r1, r1, r0
    895e:	6021      	streq	r1, [r4, #0]
    8960:	605c      	str	r4, [r3, #4]
    8962:	e7c7      	b.n	88f4 <_free_r+0x24>
    8964:	bd38      	pop	{r3, r4, r5, pc}
    8966:	bf00      	nop
    8968:	2000125c 	.word	0x2000125c

0000896c <_malloc_r>:
    896c:	b570      	push	{r4, r5, r6, lr}
    896e:	1ccd      	adds	r5, r1, #3
    8970:	f025 0503 	bic.w	r5, r5, #3
    8974:	3508      	adds	r5, #8
    8976:	2d0c      	cmp	r5, #12
    8978:	bf38      	it	cc
    897a:	250c      	movcc	r5, #12
    897c:	2d00      	cmp	r5, #0
    897e:	4606      	mov	r6, r0
    8980:	db01      	blt.n	8986 <_malloc_r+0x1a>
    8982:	42a9      	cmp	r1, r5
    8984:	d903      	bls.n	898e <_malloc_r+0x22>
    8986:	230c      	movs	r3, #12
    8988:	6033      	str	r3, [r6, #0]
    898a:	2000      	movs	r0, #0
    898c:	bd70      	pop	{r4, r5, r6, pc}
    898e:	f000 f8c1 	bl	8b14 <__malloc_lock>
    8992:	4a23      	ldr	r2, [pc, #140]	; (8a20 <_malloc_r+0xb4>)
    8994:	6814      	ldr	r4, [r2, #0]
    8996:	4621      	mov	r1, r4
    8998:	b991      	cbnz	r1, 89c0 <_malloc_r+0x54>
    899a:	4c22      	ldr	r4, [pc, #136]	; (8a24 <_malloc_r+0xb8>)
    899c:	6823      	ldr	r3, [r4, #0]
    899e:	b91b      	cbnz	r3, 89a8 <_malloc_r+0x3c>
    89a0:	4630      	mov	r0, r6
    89a2:	f000 f87b 	bl	8a9c <_sbrk_r>
    89a6:	6020      	str	r0, [r4, #0]
    89a8:	4629      	mov	r1, r5
    89aa:	4630      	mov	r0, r6
    89ac:	f000 f876 	bl	8a9c <_sbrk_r>
    89b0:	1c43      	adds	r3, r0, #1
    89b2:	d126      	bne.n	8a02 <_malloc_r+0x96>
    89b4:	230c      	movs	r3, #12
    89b6:	6033      	str	r3, [r6, #0]
    89b8:	4630      	mov	r0, r6
    89ba:	f000 f8ac 	bl	8b16 <__malloc_unlock>
    89be:	e7e4      	b.n	898a <_malloc_r+0x1e>
    89c0:	680b      	ldr	r3, [r1, #0]
    89c2:	1b5b      	subs	r3, r3, r5
    89c4:	d41a      	bmi.n	89fc <_malloc_r+0x90>
    89c6:	2b0b      	cmp	r3, #11
    89c8:	d90f      	bls.n	89ea <_malloc_r+0x7e>
    89ca:	600b      	str	r3, [r1, #0]
    89cc:	50cd      	str	r5, [r1, r3]
    89ce:	18cc      	adds	r4, r1, r3
    89d0:	4630      	mov	r0, r6
    89d2:	f000 f8a0 	bl	8b16 <__malloc_unlock>
    89d6:	f104 000b 	add.w	r0, r4, #11
    89da:	1d23      	adds	r3, r4, #4
    89dc:	f020 0007 	bic.w	r0, r0, #7
    89e0:	1ac3      	subs	r3, r0, r3
    89e2:	d01b      	beq.n	8a1c <_malloc_r+0xb0>
    89e4:	425a      	negs	r2, r3
    89e6:	50e2      	str	r2, [r4, r3]
    89e8:	bd70      	pop	{r4, r5, r6, pc}
    89ea:	428c      	cmp	r4, r1
    89ec:	bf0d      	iteet	eq
    89ee:	6863      	ldreq	r3, [r4, #4]
    89f0:	684b      	ldrne	r3, [r1, #4]
    89f2:	6063      	strne	r3, [r4, #4]
    89f4:	6013      	streq	r3, [r2, #0]
    89f6:	bf18      	it	ne
    89f8:	460c      	movne	r4, r1
    89fa:	e7e9      	b.n	89d0 <_malloc_r+0x64>
    89fc:	460c      	mov	r4, r1
    89fe:	6849      	ldr	r1, [r1, #4]
    8a00:	e7ca      	b.n	8998 <_malloc_r+0x2c>
    8a02:	1cc4      	adds	r4, r0, #3
    8a04:	f024 0403 	bic.w	r4, r4, #3
    8a08:	42a0      	cmp	r0, r4
    8a0a:	d005      	beq.n	8a18 <_malloc_r+0xac>
    8a0c:	1a21      	subs	r1, r4, r0
    8a0e:	4630      	mov	r0, r6
    8a10:	f000 f844 	bl	8a9c <_sbrk_r>
    8a14:	3001      	adds	r0, #1
    8a16:	d0cd      	beq.n	89b4 <_malloc_r+0x48>
    8a18:	6025      	str	r5, [r4, #0]
    8a1a:	e7d9      	b.n	89d0 <_malloc_r+0x64>
    8a1c:	bd70      	pop	{r4, r5, r6, pc}
    8a1e:	bf00      	nop
    8a20:	2000125c 	.word	0x2000125c
    8a24:	20001260 	.word	0x20001260

00008a28 <random>:
    8a28:	4b19      	ldr	r3, [pc, #100]	; (8a90 <random+0x68>)
    8a2a:	b510      	push	{r4, lr}
    8a2c:	681c      	ldr	r4, [r3, #0]
    8a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8a30:	b9d3      	cbnz	r3, 8a68 <random+0x40>
    8a32:	2018      	movs	r0, #24
    8a34:	f7ff ff30 	bl	8898 <malloc>
    8a38:	f243 330e 	movw	r3, #13070	; 0x330e
    8a3c:	63a0      	str	r0, [r4, #56]	; 0x38
    8a3e:	8003      	strh	r3, [r0, #0]
    8a40:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    8a44:	8043      	strh	r3, [r0, #2]
    8a46:	f241 2334 	movw	r3, #4660	; 0x1234
    8a4a:	8083      	strh	r3, [r0, #4]
    8a4c:	f24e 636d 	movw	r3, #58989	; 0xe66d
    8a50:	80c3      	strh	r3, [r0, #6]
    8a52:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    8a56:	8103      	strh	r3, [r0, #8]
    8a58:	2305      	movs	r3, #5
    8a5a:	8143      	strh	r3, [r0, #10]
    8a5c:	230b      	movs	r3, #11
    8a5e:	8183      	strh	r3, [r0, #12]
    8a60:	2201      	movs	r2, #1
    8a62:	2300      	movs	r3, #0
    8a64:	e9c0 2304 	strd	r2, r3, [r0, #16]
    8a68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8a6a:	480a      	ldr	r0, [pc, #40]	; (8a94 <random+0x6c>)
    8a6c:	690a      	ldr	r2, [r1, #16]
    8a6e:	694b      	ldr	r3, [r1, #20]
    8a70:	4c09      	ldr	r4, [pc, #36]	; (8a98 <random+0x70>)
    8a72:	4350      	muls	r0, r2
    8a74:	fb04 0003 	mla	r0, r4, r3, r0
    8a78:	fba2 2304 	umull	r2, r3, r2, r4
    8a7c:	3201      	adds	r2, #1
    8a7e:	4403      	add	r3, r0
    8a80:	f143 0300 	adc.w	r3, r3, #0
    8a84:	e9c1 2304 	strd	r2, r3, [r1, #16]
    8a88:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    8a8c:	bd10      	pop	{r4, pc}
    8a8e:	bf00      	nop
    8a90:	20000464 	.word	0x20000464
    8a94:	5851f42d 	.word	0x5851f42d
    8a98:	4c957f2d 	.word	0x4c957f2d

00008a9c <_sbrk_r>:
    8a9c:	b538      	push	{r3, r4, r5, lr}
    8a9e:	4c06      	ldr	r4, [pc, #24]	; (8ab8 <_sbrk_r+0x1c>)
    8aa0:	2300      	movs	r3, #0
    8aa2:	4605      	mov	r5, r0
    8aa4:	4608      	mov	r0, r1
    8aa6:	6023      	str	r3, [r4, #0]
    8aa8:	f7f9 fc5c 	bl	2364 <_sbrk>
    8aac:	1c43      	adds	r3, r0, #1
    8aae:	d102      	bne.n	8ab6 <_sbrk_r+0x1a>
    8ab0:	6823      	ldr	r3, [r4, #0]
    8ab2:	b103      	cbz	r3, 8ab6 <_sbrk_r+0x1a>
    8ab4:	602b      	str	r3, [r5, #0]
    8ab6:	bd38      	pop	{r3, r4, r5, pc}
    8ab8:	20002a5c 	.word	0x20002a5c

00008abc <siprintf>:
    8abc:	b40e      	push	{r1, r2, r3}
    8abe:	b500      	push	{lr}
    8ac0:	b09c      	sub	sp, #112	; 0x70
    8ac2:	f44f 7102 	mov.w	r1, #520	; 0x208
    8ac6:	ab1d      	add	r3, sp, #116	; 0x74
    8ac8:	f8ad 1014 	strh.w	r1, [sp, #20]
    8acc:	9002      	str	r0, [sp, #8]
    8ace:	9006      	str	r0, [sp, #24]
    8ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8ad4:	480a      	ldr	r0, [pc, #40]	; (8b00 <siprintf+0x44>)
    8ad6:	9104      	str	r1, [sp, #16]
    8ad8:	9107      	str	r1, [sp, #28]
    8ada:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8ade:	f853 2b04 	ldr.w	r2, [r3], #4
    8ae2:	f8ad 1016 	strh.w	r1, [sp, #22]
    8ae6:	6800      	ldr	r0, [r0, #0]
    8ae8:	9301      	str	r3, [sp, #4]
    8aea:	a902      	add	r1, sp, #8
    8aec:	f000 f870 	bl	8bd0 <_svfiprintf_r>
    8af0:	9b02      	ldr	r3, [sp, #8]
    8af2:	2200      	movs	r2, #0
    8af4:	701a      	strb	r2, [r3, #0]
    8af6:	b01c      	add	sp, #112	; 0x70
    8af8:	f85d eb04 	ldr.w	lr, [sp], #4
    8afc:	b003      	add	sp, #12
    8afe:	4770      	bx	lr
    8b00:	20000464 	.word	0x20000464

00008b04 <strlen>:
    8b04:	4603      	mov	r3, r0
    8b06:	f813 2b01 	ldrb.w	r2, [r3], #1
    8b0a:	2a00      	cmp	r2, #0
    8b0c:	d1fb      	bne.n	8b06 <strlen+0x2>
    8b0e:	1a18      	subs	r0, r3, r0
    8b10:	3801      	subs	r0, #1
    8b12:	4770      	bx	lr

00008b14 <__malloc_lock>:
    8b14:	4770      	bx	lr

00008b16 <__malloc_unlock>:
    8b16:	4770      	bx	lr

00008b18 <__ssputs_r>:
    8b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b1c:	688e      	ldr	r6, [r1, #8]
    8b1e:	429e      	cmp	r6, r3
    8b20:	4682      	mov	sl, r0
    8b22:	460c      	mov	r4, r1
    8b24:	4691      	mov	r9, r2
    8b26:	4698      	mov	r8, r3
    8b28:	d835      	bhi.n	8b96 <__ssputs_r+0x7e>
    8b2a:	898a      	ldrh	r2, [r1, #12]
    8b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    8b30:	d031      	beq.n	8b96 <__ssputs_r+0x7e>
    8b32:	6825      	ldr	r5, [r4, #0]
    8b34:	6909      	ldr	r1, [r1, #16]
    8b36:	1a6f      	subs	r7, r5, r1
    8b38:	6965      	ldr	r5, [r4, #20]
    8b3a:	2302      	movs	r3, #2
    8b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8b40:	fb95 f5f3 	sdiv	r5, r5, r3
    8b44:	f108 0301 	add.w	r3, r8, #1
    8b48:	443b      	add	r3, r7
    8b4a:	429d      	cmp	r5, r3
    8b4c:	bf38      	it	cc
    8b4e:	461d      	movcc	r5, r3
    8b50:	0553      	lsls	r3, r2, #21
    8b52:	d531      	bpl.n	8bb8 <__ssputs_r+0xa0>
    8b54:	4629      	mov	r1, r5
    8b56:	f7ff ff09 	bl	896c <_malloc_r>
    8b5a:	4606      	mov	r6, r0
    8b5c:	b950      	cbnz	r0, 8b74 <__ssputs_r+0x5c>
    8b5e:	230c      	movs	r3, #12
    8b60:	f8ca 3000 	str.w	r3, [sl]
    8b64:	89a3      	ldrh	r3, [r4, #12]
    8b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b6a:	81a3      	strh	r3, [r4, #12]
    8b6c:	f04f 30ff 	mov.w	r0, #4294967295
    8b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b74:	463a      	mov	r2, r7
    8b76:	6921      	ldr	r1, [r4, #16]
    8b78:	f7ff fe96 	bl	88a8 <memcpy>
    8b7c:	89a3      	ldrh	r3, [r4, #12]
    8b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    8b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8b86:	81a3      	strh	r3, [r4, #12]
    8b88:	6126      	str	r6, [r4, #16]
    8b8a:	6165      	str	r5, [r4, #20]
    8b8c:	443e      	add	r6, r7
    8b8e:	1bed      	subs	r5, r5, r7
    8b90:	6026      	str	r6, [r4, #0]
    8b92:	60a5      	str	r5, [r4, #8]
    8b94:	4646      	mov	r6, r8
    8b96:	4546      	cmp	r6, r8
    8b98:	bf28      	it	cs
    8b9a:	4646      	movcs	r6, r8
    8b9c:	4632      	mov	r2, r6
    8b9e:	4649      	mov	r1, r9
    8ba0:	6820      	ldr	r0, [r4, #0]
    8ba2:	f000 faf5 	bl	9190 <memmove>
    8ba6:	68a3      	ldr	r3, [r4, #8]
    8ba8:	1b9b      	subs	r3, r3, r6
    8baa:	60a3      	str	r3, [r4, #8]
    8bac:	6823      	ldr	r3, [r4, #0]
    8bae:	441e      	add	r6, r3
    8bb0:	6026      	str	r6, [r4, #0]
    8bb2:	2000      	movs	r0, #0
    8bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8bb8:	462a      	mov	r2, r5
    8bba:	f000 fb03 	bl	91c4 <_realloc_r>
    8bbe:	4606      	mov	r6, r0
    8bc0:	2800      	cmp	r0, #0
    8bc2:	d1e1      	bne.n	8b88 <__ssputs_r+0x70>
    8bc4:	6921      	ldr	r1, [r4, #16]
    8bc6:	4650      	mov	r0, sl
    8bc8:	f7ff fe82 	bl	88d0 <_free_r>
    8bcc:	e7c7      	b.n	8b5e <__ssputs_r+0x46>
	...

00008bd0 <_svfiprintf_r>:
    8bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd4:	b09d      	sub	sp, #116	; 0x74
    8bd6:	4680      	mov	r8, r0
    8bd8:	9303      	str	r3, [sp, #12]
    8bda:	898b      	ldrh	r3, [r1, #12]
    8bdc:	061c      	lsls	r4, r3, #24
    8bde:	460d      	mov	r5, r1
    8be0:	4616      	mov	r6, r2
    8be2:	d50f      	bpl.n	8c04 <_svfiprintf_r+0x34>
    8be4:	690b      	ldr	r3, [r1, #16]
    8be6:	b96b      	cbnz	r3, 8c04 <_svfiprintf_r+0x34>
    8be8:	2140      	movs	r1, #64	; 0x40
    8bea:	f7ff febf 	bl	896c <_malloc_r>
    8bee:	6028      	str	r0, [r5, #0]
    8bf0:	6128      	str	r0, [r5, #16]
    8bf2:	b928      	cbnz	r0, 8c00 <_svfiprintf_r+0x30>
    8bf4:	230c      	movs	r3, #12
    8bf6:	f8c8 3000 	str.w	r3, [r8]
    8bfa:	f04f 30ff 	mov.w	r0, #4294967295
    8bfe:	e0c5      	b.n	8d8c <_svfiprintf_r+0x1bc>
    8c00:	2340      	movs	r3, #64	; 0x40
    8c02:	616b      	str	r3, [r5, #20]
    8c04:	2300      	movs	r3, #0
    8c06:	9309      	str	r3, [sp, #36]	; 0x24
    8c08:	2320      	movs	r3, #32
    8c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    8c0e:	2330      	movs	r3, #48	; 0x30
    8c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    8c14:	f04f 0b01 	mov.w	fp, #1
    8c18:	4637      	mov	r7, r6
    8c1a:	463c      	mov	r4, r7
    8c1c:	f814 3b01 	ldrb.w	r3, [r4], #1
    8c20:	2b00      	cmp	r3, #0
    8c22:	d13c      	bne.n	8c9e <_svfiprintf_r+0xce>
    8c24:	ebb7 0a06 	subs.w	sl, r7, r6
    8c28:	d00b      	beq.n	8c42 <_svfiprintf_r+0x72>
    8c2a:	4653      	mov	r3, sl
    8c2c:	4632      	mov	r2, r6
    8c2e:	4629      	mov	r1, r5
    8c30:	4640      	mov	r0, r8
    8c32:	f7ff ff71 	bl	8b18 <__ssputs_r>
    8c36:	3001      	adds	r0, #1
    8c38:	f000 80a3 	beq.w	8d82 <_svfiprintf_r+0x1b2>
    8c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c3e:	4453      	add	r3, sl
    8c40:	9309      	str	r3, [sp, #36]	; 0x24
    8c42:	783b      	ldrb	r3, [r7, #0]
    8c44:	2b00      	cmp	r3, #0
    8c46:	f000 809c 	beq.w	8d82 <_svfiprintf_r+0x1b2>
    8c4a:	2300      	movs	r3, #0
    8c4c:	f04f 32ff 	mov.w	r2, #4294967295
    8c50:	9304      	str	r3, [sp, #16]
    8c52:	9307      	str	r3, [sp, #28]
    8c54:	9205      	str	r2, [sp, #20]
    8c56:	9306      	str	r3, [sp, #24]
    8c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    8c5c:	931a      	str	r3, [sp, #104]	; 0x68
    8c5e:	2205      	movs	r2, #5
    8c60:	7821      	ldrb	r1, [r4, #0]
    8c62:	4850      	ldr	r0, [pc, #320]	; (8da4 <_svfiprintf_r+0x1d4>)
    8c64:	f000 fa44 	bl	90f0 <memchr>
    8c68:	1c67      	adds	r7, r4, #1
    8c6a:	9b04      	ldr	r3, [sp, #16]
    8c6c:	b9d8      	cbnz	r0, 8ca6 <_svfiprintf_r+0xd6>
    8c6e:	06d9      	lsls	r1, r3, #27
    8c70:	bf44      	itt	mi
    8c72:	2220      	movmi	r2, #32
    8c74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    8c78:	071a      	lsls	r2, r3, #28
    8c7a:	bf44      	itt	mi
    8c7c:	222b      	movmi	r2, #43	; 0x2b
    8c7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    8c82:	7822      	ldrb	r2, [r4, #0]
    8c84:	2a2a      	cmp	r2, #42	; 0x2a
    8c86:	d016      	beq.n	8cb6 <_svfiprintf_r+0xe6>
    8c88:	9a07      	ldr	r2, [sp, #28]
    8c8a:	2100      	movs	r1, #0
    8c8c:	200a      	movs	r0, #10
    8c8e:	4627      	mov	r7, r4
    8c90:	3401      	adds	r4, #1
    8c92:	783b      	ldrb	r3, [r7, #0]
    8c94:	3b30      	subs	r3, #48	; 0x30
    8c96:	2b09      	cmp	r3, #9
    8c98:	d951      	bls.n	8d3e <_svfiprintf_r+0x16e>
    8c9a:	b1c9      	cbz	r1, 8cd0 <_svfiprintf_r+0x100>
    8c9c:	e011      	b.n	8cc2 <_svfiprintf_r+0xf2>
    8c9e:	2b25      	cmp	r3, #37	; 0x25
    8ca0:	d0c0      	beq.n	8c24 <_svfiprintf_r+0x54>
    8ca2:	4627      	mov	r7, r4
    8ca4:	e7b9      	b.n	8c1a <_svfiprintf_r+0x4a>
    8ca6:	4a3f      	ldr	r2, [pc, #252]	; (8da4 <_svfiprintf_r+0x1d4>)
    8ca8:	1a80      	subs	r0, r0, r2
    8caa:	fa0b f000 	lsl.w	r0, fp, r0
    8cae:	4318      	orrs	r0, r3
    8cb0:	9004      	str	r0, [sp, #16]
    8cb2:	463c      	mov	r4, r7
    8cb4:	e7d3      	b.n	8c5e <_svfiprintf_r+0x8e>
    8cb6:	9a03      	ldr	r2, [sp, #12]
    8cb8:	1d11      	adds	r1, r2, #4
    8cba:	6812      	ldr	r2, [r2, #0]
    8cbc:	9103      	str	r1, [sp, #12]
    8cbe:	2a00      	cmp	r2, #0
    8cc0:	db01      	blt.n	8cc6 <_svfiprintf_r+0xf6>
    8cc2:	9207      	str	r2, [sp, #28]
    8cc4:	e004      	b.n	8cd0 <_svfiprintf_r+0x100>
    8cc6:	4252      	negs	r2, r2
    8cc8:	f043 0302 	orr.w	r3, r3, #2
    8ccc:	9207      	str	r2, [sp, #28]
    8cce:	9304      	str	r3, [sp, #16]
    8cd0:	783b      	ldrb	r3, [r7, #0]
    8cd2:	2b2e      	cmp	r3, #46	; 0x2e
    8cd4:	d10e      	bne.n	8cf4 <_svfiprintf_r+0x124>
    8cd6:	787b      	ldrb	r3, [r7, #1]
    8cd8:	2b2a      	cmp	r3, #42	; 0x2a
    8cda:	f107 0101 	add.w	r1, r7, #1
    8cde:	d132      	bne.n	8d46 <_svfiprintf_r+0x176>
    8ce0:	9b03      	ldr	r3, [sp, #12]
    8ce2:	1d1a      	adds	r2, r3, #4
    8ce4:	681b      	ldr	r3, [r3, #0]
    8ce6:	9203      	str	r2, [sp, #12]
    8ce8:	2b00      	cmp	r3, #0
    8cea:	bfb8      	it	lt
    8cec:	f04f 33ff 	movlt.w	r3, #4294967295
    8cf0:	3702      	adds	r7, #2
    8cf2:	9305      	str	r3, [sp, #20]
    8cf4:	4c2c      	ldr	r4, [pc, #176]	; (8da8 <_svfiprintf_r+0x1d8>)
    8cf6:	7839      	ldrb	r1, [r7, #0]
    8cf8:	2203      	movs	r2, #3
    8cfa:	4620      	mov	r0, r4
    8cfc:	f000 f9f8 	bl	90f0 <memchr>
    8d00:	b138      	cbz	r0, 8d12 <_svfiprintf_r+0x142>
    8d02:	2340      	movs	r3, #64	; 0x40
    8d04:	1b00      	subs	r0, r0, r4
    8d06:	fa03 f000 	lsl.w	r0, r3, r0
    8d0a:	9b04      	ldr	r3, [sp, #16]
    8d0c:	4303      	orrs	r3, r0
    8d0e:	9304      	str	r3, [sp, #16]
    8d10:	3701      	adds	r7, #1
    8d12:	7839      	ldrb	r1, [r7, #0]
    8d14:	4825      	ldr	r0, [pc, #148]	; (8dac <_svfiprintf_r+0x1dc>)
    8d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    8d1a:	2206      	movs	r2, #6
    8d1c:	1c7e      	adds	r6, r7, #1
    8d1e:	f000 f9e7 	bl	90f0 <memchr>
    8d22:	2800      	cmp	r0, #0
    8d24:	d035      	beq.n	8d92 <_svfiprintf_r+0x1c2>
    8d26:	4b22      	ldr	r3, [pc, #136]	; (8db0 <_svfiprintf_r+0x1e0>)
    8d28:	b9fb      	cbnz	r3, 8d6a <_svfiprintf_r+0x19a>
    8d2a:	9b03      	ldr	r3, [sp, #12]
    8d2c:	3307      	adds	r3, #7
    8d2e:	f023 0307 	bic.w	r3, r3, #7
    8d32:	3308      	adds	r3, #8
    8d34:	9303      	str	r3, [sp, #12]
    8d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d38:	444b      	add	r3, r9
    8d3a:	9309      	str	r3, [sp, #36]	; 0x24
    8d3c:	e76c      	b.n	8c18 <_svfiprintf_r+0x48>
    8d3e:	fb00 3202 	mla	r2, r0, r2, r3
    8d42:	2101      	movs	r1, #1
    8d44:	e7a3      	b.n	8c8e <_svfiprintf_r+0xbe>
    8d46:	2300      	movs	r3, #0
    8d48:	9305      	str	r3, [sp, #20]
    8d4a:	4618      	mov	r0, r3
    8d4c:	240a      	movs	r4, #10
    8d4e:	460f      	mov	r7, r1
    8d50:	3101      	adds	r1, #1
    8d52:	783a      	ldrb	r2, [r7, #0]
    8d54:	3a30      	subs	r2, #48	; 0x30
    8d56:	2a09      	cmp	r2, #9
    8d58:	d903      	bls.n	8d62 <_svfiprintf_r+0x192>
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d0ca      	beq.n	8cf4 <_svfiprintf_r+0x124>
    8d5e:	9005      	str	r0, [sp, #20]
    8d60:	e7c8      	b.n	8cf4 <_svfiprintf_r+0x124>
    8d62:	fb04 2000 	mla	r0, r4, r0, r2
    8d66:	2301      	movs	r3, #1
    8d68:	e7f1      	b.n	8d4e <_svfiprintf_r+0x17e>
    8d6a:	ab03      	add	r3, sp, #12
    8d6c:	9300      	str	r3, [sp, #0]
    8d6e:	462a      	mov	r2, r5
    8d70:	4b10      	ldr	r3, [pc, #64]	; (8db4 <_svfiprintf_r+0x1e4>)
    8d72:	a904      	add	r1, sp, #16
    8d74:	4640      	mov	r0, r8
    8d76:	f3af 8000 	nop.w
    8d7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    8d7e:	4681      	mov	r9, r0
    8d80:	d1d9      	bne.n	8d36 <_svfiprintf_r+0x166>
    8d82:	89ab      	ldrh	r3, [r5, #12]
    8d84:	065b      	lsls	r3, r3, #25
    8d86:	f53f af38 	bmi.w	8bfa <_svfiprintf_r+0x2a>
    8d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d8c:	b01d      	add	sp, #116	; 0x74
    8d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d92:	ab03      	add	r3, sp, #12
    8d94:	9300      	str	r3, [sp, #0]
    8d96:	462a      	mov	r2, r5
    8d98:	4b06      	ldr	r3, [pc, #24]	; (8db4 <_svfiprintf_r+0x1e4>)
    8d9a:	a904      	add	r1, sp, #16
    8d9c:	4640      	mov	r0, r8
    8d9e:	f000 f881 	bl	8ea4 <_printf_i>
    8da2:	e7ea      	b.n	8d7a <_svfiprintf_r+0x1aa>
    8da4:	000099d8 	.word	0x000099d8
    8da8:	000099de 	.word	0x000099de
    8dac:	000099e2 	.word	0x000099e2
    8db0:	00000000 	.word	0x00000000
    8db4:	00008b19 	.word	0x00008b19

00008db8 <_printf_common>:
    8db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dbc:	4691      	mov	r9, r2
    8dbe:	461f      	mov	r7, r3
    8dc0:	688a      	ldr	r2, [r1, #8]
    8dc2:	690b      	ldr	r3, [r1, #16]
    8dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    8dc8:	4293      	cmp	r3, r2
    8dca:	bfb8      	it	lt
    8dcc:	4613      	movlt	r3, r2
    8dce:	f8c9 3000 	str.w	r3, [r9]
    8dd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    8dd6:	4606      	mov	r6, r0
    8dd8:	460c      	mov	r4, r1
    8dda:	b112      	cbz	r2, 8de2 <_printf_common+0x2a>
    8ddc:	3301      	adds	r3, #1
    8dde:	f8c9 3000 	str.w	r3, [r9]
    8de2:	6823      	ldr	r3, [r4, #0]
    8de4:	0699      	lsls	r1, r3, #26
    8de6:	bf42      	ittt	mi
    8de8:	f8d9 3000 	ldrmi.w	r3, [r9]
    8dec:	3302      	addmi	r3, #2
    8dee:	f8c9 3000 	strmi.w	r3, [r9]
    8df2:	6825      	ldr	r5, [r4, #0]
    8df4:	f015 0506 	ands.w	r5, r5, #6
    8df8:	d107      	bne.n	8e0a <_printf_common+0x52>
    8dfa:	f104 0a19 	add.w	sl, r4, #25
    8dfe:	68e3      	ldr	r3, [r4, #12]
    8e00:	f8d9 2000 	ldr.w	r2, [r9]
    8e04:	1a9b      	subs	r3, r3, r2
    8e06:	429d      	cmp	r5, r3
    8e08:	db29      	blt.n	8e5e <_printf_common+0xa6>
    8e0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    8e0e:	6822      	ldr	r2, [r4, #0]
    8e10:	3300      	adds	r3, #0
    8e12:	bf18      	it	ne
    8e14:	2301      	movne	r3, #1
    8e16:	0692      	lsls	r2, r2, #26
    8e18:	d42e      	bmi.n	8e78 <_printf_common+0xc0>
    8e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    8e1e:	4639      	mov	r1, r7
    8e20:	4630      	mov	r0, r6
    8e22:	47c0      	blx	r8
    8e24:	3001      	adds	r0, #1
    8e26:	d021      	beq.n	8e6c <_printf_common+0xb4>
    8e28:	6823      	ldr	r3, [r4, #0]
    8e2a:	68e5      	ldr	r5, [r4, #12]
    8e2c:	f8d9 2000 	ldr.w	r2, [r9]
    8e30:	f003 0306 	and.w	r3, r3, #6
    8e34:	2b04      	cmp	r3, #4
    8e36:	bf08      	it	eq
    8e38:	1aad      	subeq	r5, r5, r2
    8e3a:	68a3      	ldr	r3, [r4, #8]
    8e3c:	6922      	ldr	r2, [r4, #16]
    8e3e:	bf0c      	ite	eq
    8e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    8e44:	2500      	movne	r5, #0
    8e46:	4293      	cmp	r3, r2
    8e48:	bfc4      	itt	gt
    8e4a:	1a9b      	subgt	r3, r3, r2
    8e4c:	18ed      	addgt	r5, r5, r3
    8e4e:	f04f 0900 	mov.w	r9, #0
    8e52:	341a      	adds	r4, #26
    8e54:	454d      	cmp	r5, r9
    8e56:	d11b      	bne.n	8e90 <_printf_common+0xd8>
    8e58:	2000      	movs	r0, #0
    8e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e5e:	2301      	movs	r3, #1
    8e60:	4652      	mov	r2, sl
    8e62:	4639      	mov	r1, r7
    8e64:	4630      	mov	r0, r6
    8e66:	47c0      	blx	r8
    8e68:	3001      	adds	r0, #1
    8e6a:	d103      	bne.n	8e74 <_printf_common+0xbc>
    8e6c:	f04f 30ff 	mov.w	r0, #4294967295
    8e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e74:	3501      	adds	r5, #1
    8e76:	e7c2      	b.n	8dfe <_printf_common+0x46>
    8e78:	18e1      	adds	r1, r4, r3
    8e7a:	1c5a      	adds	r2, r3, #1
    8e7c:	2030      	movs	r0, #48	; 0x30
    8e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    8e82:	4422      	add	r2, r4
    8e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    8e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    8e8c:	3302      	adds	r3, #2
    8e8e:	e7c4      	b.n	8e1a <_printf_common+0x62>
    8e90:	2301      	movs	r3, #1
    8e92:	4622      	mov	r2, r4
    8e94:	4639      	mov	r1, r7
    8e96:	4630      	mov	r0, r6
    8e98:	47c0      	blx	r8
    8e9a:	3001      	adds	r0, #1
    8e9c:	d0e6      	beq.n	8e6c <_printf_common+0xb4>
    8e9e:	f109 0901 	add.w	r9, r9, #1
    8ea2:	e7d7      	b.n	8e54 <_printf_common+0x9c>

00008ea4 <_printf_i>:
    8ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ea8:	4617      	mov	r7, r2
    8eaa:	7e0a      	ldrb	r2, [r1, #24]
    8eac:	b085      	sub	sp, #20
    8eae:	2a6e      	cmp	r2, #110	; 0x6e
    8eb0:	4698      	mov	r8, r3
    8eb2:	4606      	mov	r6, r0
    8eb4:	460c      	mov	r4, r1
    8eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8eb8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    8ebc:	f000 80bc 	beq.w	9038 <_printf_i+0x194>
    8ec0:	d81a      	bhi.n	8ef8 <_printf_i+0x54>
    8ec2:	2a63      	cmp	r2, #99	; 0x63
    8ec4:	d02e      	beq.n	8f24 <_printf_i+0x80>
    8ec6:	d80a      	bhi.n	8ede <_printf_i+0x3a>
    8ec8:	2a00      	cmp	r2, #0
    8eca:	f000 80c8 	beq.w	905e <_printf_i+0x1ba>
    8ece:	2a58      	cmp	r2, #88	; 0x58
    8ed0:	f000 808a 	beq.w	8fe8 <_printf_i+0x144>
    8ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    8ed8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    8edc:	e02a      	b.n	8f34 <_printf_i+0x90>
    8ede:	2a64      	cmp	r2, #100	; 0x64
    8ee0:	d001      	beq.n	8ee6 <_printf_i+0x42>
    8ee2:	2a69      	cmp	r2, #105	; 0x69
    8ee4:	d1f6      	bne.n	8ed4 <_printf_i+0x30>
    8ee6:	6821      	ldr	r1, [r4, #0]
    8ee8:	681a      	ldr	r2, [r3, #0]
    8eea:	f011 0f80 	tst.w	r1, #128	; 0x80
    8eee:	d023      	beq.n	8f38 <_printf_i+0x94>
    8ef0:	1d11      	adds	r1, r2, #4
    8ef2:	6019      	str	r1, [r3, #0]
    8ef4:	6813      	ldr	r3, [r2, #0]
    8ef6:	e027      	b.n	8f48 <_printf_i+0xa4>
    8ef8:	2a73      	cmp	r2, #115	; 0x73
    8efa:	f000 80b4 	beq.w	9066 <_printf_i+0x1c2>
    8efe:	d808      	bhi.n	8f12 <_printf_i+0x6e>
    8f00:	2a6f      	cmp	r2, #111	; 0x6f
    8f02:	d02a      	beq.n	8f5a <_printf_i+0xb6>
    8f04:	2a70      	cmp	r2, #112	; 0x70
    8f06:	d1e5      	bne.n	8ed4 <_printf_i+0x30>
    8f08:	680a      	ldr	r2, [r1, #0]
    8f0a:	f042 0220 	orr.w	r2, r2, #32
    8f0e:	600a      	str	r2, [r1, #0]
    8f10:	e003      	b.n	8f1a <_printf_i+0x76>
    8f12:	2a75      	cmp	r2, #117	; 0x75
    8f14:	d021      	beq.n	8f5a <_printf_i+0xb6>
    8f16:	2a78      	cmp	r2, #120	; 0x78
    8f18:	d1dc      	bne.n	8ed4 <_printf_i+0x30>
    8f1a:	2278      	movs	r2, #120	; 0x78
    8f1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    8f20:	496e      	ldr	r1, [pc, #440]	; (90dc <_printf_i+0x238>)
    8f22:	e064      	b.n	8fee <_printf_i+0x14a>
    8f24:	681a      	ldr	r2, [r3, #0]
    8f26:	f101 0542 	add.w	r5, r1, #66	; 0x42
    8f2a:	1d11      	adds	r1, r2, #4
    8f2c:	6019      	str	r1, [r3, #0]
    8f2e:	6813      	ldr	r3, [r2, #0]
    8f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8f34:	2301      	movs	r3, #1
    8f36:	e0a3      	b.n	9080 <_printf_i+0x1dc>
    8f38:	f011 0f40 	tst.w	r1, #64	; 0x40
    8f3c:	f102 0104 	add.w	r1, r2, #4
    8f40:	6019      	str	r1, [r3, #0]
    8f42:	d0d7      	beq.n	8ef4 <_printf_i+0x50>
    8f44:	f9b2 3000 	ldrsh.w	r3, [r2]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	da03      	bge.n	8f54 <_printf_i+0xb0>
    8f4c:	222d      	movs	r2, #45	; 0x2d
    8f4e:	425b      	negs	r3, r3
    8f50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    8f54:	4962      	ldr	r1, [pc, #392]	; (90e0 <_printf_i+0x23c>)
    8f56:	220a      	movs	r2, #10
    8f58:	e017      	b.n	8f8a <_printf_i+0xe6>
    8f5a:	6820      	ldr	r0, [r4, #0]
    8f5c:	6819      	ldr	r1, [r3, #0]
    8f5e:	f010 0f80 	tst.w	r0, #128	; 0x80
    8f62:	d003      	beq.n	8f6c <_printf_i+0xc8>
    8f64:	1d08      	adds	r0, r1, #4
    8f66:	6018      	str	r0, [r3, #0]
    8f68:	680b      	ldr	r3, [r1, #0]
    8f6a:	e006      	b.n	8f7a <_printf_i+0xd6>
    8f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
    8f70:	f101 0004 	add.w	r0, r1, #4
    8f74:	6018      	str	r0, [r3, #0]
    8f76:	d0f7      	beq.n	8f68 <_printf_i+0xc4>
    8f78:	880b      	ldrh	r3, [r1, #0]
    8f7a:	4959      	ldr	r1, [pc, #356]	; (90e0 <_printf_i+0x23c>)
    8f7c:	2a6f      	cmp	r2, #111	; 0x6f
    8f7e:	bf14      	ite	ne
    8f80:	220a      	movne	r2, #10
    8f82:	2208      	moveq	r2, #8
    8f84:	2000      	movs	r0, #0
    8f86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    8f8a:	6865      	ldr	r5, [r4, #4]
    8f8c:	60a5      	str	r5, [r4, #8]
    8f8e:	2d00      	cmp	r5, #0
    8f90:	f2c0 809c 	blt.w	90cc <_printf_i+0x228>
    8f94:	6820      	ldr	r0, [r4, #0]
    8f96:	f020 0004 	bic.w	r0, r0, #4
    8f9a:	6020      	str	r0, [r4, #0]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d13f      	bne.n	9020 <_printf_i+0x17c>
    8fa0:	2d00      	cmp	r5, #0
    8fa2:	f040 8095 	bne.w	90d0 <_printf_i+0x22c>
    8fa6:	4675      	mov	r5, lr
    8fa8:	2a08      	cmp	r2, #8
    8faa:	d10b      	bne.n	8fc4 <_printf_i+0x120>
    8fac:	6823      	ldr	r3, [r4, #0]
    8fae:	07da      	lsls	r2, r3, #31
    8fb0:	d508      	bpl.n	8fc4 <_printf_i+0x120>
    8fb2:	6923      	ldr	r3, [r4, #16]
    8fb4:	6862      	ldr	r2, [r4, #4]
    8fb6:	429a      	cmp	r2, r3
    8fb8:	bfde      	ittt	le
    8fba:	2330      	movle	r3, #48	; 0x30
    8fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
    8fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
    8fc4:	ebae 0305 	sub.w	r3, lr, r5
    8fc8:	6123      	str	r3, [r4, #16]
    8fca:	f8cd 8000 	str.w	r8, [sp]
    8fce:	463b      	mov	r3, r7
    8fd0:	aa03      	add	r2, sp, #12
    8fd2:	4621      	mov	r1, r4
    8fd4:	4630      	mov	r0, r6
    8fd6:	f7ff feef 	bl	8db8 <_printf_common>
    8fda:	3001      	adds	r0, #1
    8fdc:	d155      	bne.n	908a <_printf_i+0x1e6>
    8fde:	f04f 30ff 	mov.w	r0, #4294967295
    8fe2:	b005      	add	sp, #20
    8fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8fe8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    8fec:	493c      	ldr	r1, [pc, #240]	; (90e0 <_printf_i+0x23c>)
    8fee:	6822      	ldr	r2, [r4, #0]
    8ff0:	6818      	ldr	r0, [r3, #0]
    8ff2:	f012 0f80 	tst.w	r2, #128	; 0x80
    8ff6:	f100 0504 	add.w	r5, r0, #4
    8ffa:	601d      	str	r5, [r3, #0]
    8ffc:	d001      	beq.n	9002 <_printf_i+0x15e>
    8ffe:	6803      	ldr	r3, [r0, #0]
    9000:	e002      	b.n	9008 <_printf_i+0x164>
    9002:	0655      	lsls	r5, r2, #25
    9004:	d5fb      	bpl.n	8ffe <_printf_i+0x15a>
    9006:	8803      	ldrh	r3, [r0, #0]
    9008:	07d0      	lsls	r0, r2, #31
    900a:	bf44      	itt	mi
    900c:	f042 0220 	orrmi.w	r2, r2, #32
    9010:	6022      	strmi	r2, [r4, #0]
    9012:	b91b      	cbnz	r3, 901c <_printf_i+0x178>
    9014:	6822      	ldr	r2, [r4, #0]
    9016:	f022 0220 	bic.w	r2, r2, #32
    901a:	6022      	str	r2, [r4, #0]
    901c:	2210      	movs	r2, #16
    901e:	e7b1      	b.n	8f84 <_printf_i+0xe0>
    9020:	4675      	mov	r5, lr
    9022:	fbb3 f0f2 	udiv	r0, r3, r2
    9026:	fb02 3310 	mls	r3, r2, r0, r3
    902a:	5ccb      	ldrb	r3, [r1, r3]
    902c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    9030:	4603      	mov	r3, r0
    9032:	2800      	cmp	r0, #0
    9034:	d1f5      	bne.n	9022 <_printf_i+0x17e>
    9036:	e7b7      	b.n	8fa8 <_printf_i+0x104>
    9038:	6808      	ldr	r0, [r1, #0]
    903a:	681a      	ldr	r2, [r3, #0]
    903c:	6949      	ldr	r1, [r1, #20]
    903e:	f010 0f80 	tst.w	r0, #128	; 0x80
    9042:	d004      	beq.n	904e <_printf_i+0x1aa>
    9044:	1d10      	adds	r0, r2, #4
    9046:	6018      	str	r0, [r3, #0]
    9048:	6813      	ldr	r3, [r2, #0]
    904a:	6019      	str	r1, [r3, #0]
    904c:	e007      	b.n	905e <_printf_i+0x1ba>
    904e:	f010 0f40 	tst.w	r0, #64	; 0x40
    9052:	f102 0004 	add.w	r0, r2, #4
    9056:	6018      	str	r0, [r3, #0]
    9058:	6813      	ldr	r3, [r2, #0]
    905a:	d0f6      	beq.n	904a <_printf_i+0x1a6>
    905c:	8019      	strh	r1, [r3, #0]
    905e:	2300      	movs	r3, #0
    9060:	6123      	str	r3, [r4, #16]
    9062:	4675      	mov	r5, lr
    9064:	e7b1      	b.n	8fca <_printf_i+0x126>
    9066:	681a      	ldr	r2, [r3, #0]
    9068:	1d11      	adds	r1, r2, #4
    906a:	6019      	str	r1, [r3, #0]
    906c:	6815      	ldr	r5, [r2, #0]
    906e:	6862      	ldr	r2, [r4, #4]
    9070:	2100      	movs	r1, #0
    9072:	4628      	mov	r0, r5
    9074:	f000 f83c 	bl	90f0 <memchr>
    9078:	b108      	cbz	r0, 907e <_printf_i+0x1da>
    907a:	1b40      	subs	r0, r0, r5
    907c:	6060      	str	r0, [r4, #4]
    907e:	6863      	ldr	r3, [r4, #4]
    9080:	6123      	str	r3, [r4, #16]
    9082:	2300      	movs	r3, #0
    9084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9088:	e79f      	b.n	8fca <_printf_i+0x126>
    908a:	6923      	ldr	r3, [r4, #16]
    908c:	462a      	mov	r2, r5
    908e:	4639      	mov	r1, r7
    9090:	4630      	mov	r0, r6
    9092:	47c0      	blx	r8
    9094:	3001      	adds	r0, #1
    9096:	d0a2      	beq.n	8fde <_printf_i+0x13a>
    9098:	6823      	ldr	r3, [r4, #0]
    909a:	079b      	lsls	r3, r3, #30
    909c:	d507      	bpl.n	90ae <_printf_i+0x20a>
    909e:	2500      	movs	r5, #0
    90a0:	f104 0919 	add.w	r9, r4, #25
    90a4:	68e3      	ldr	r3, [r4, #12]
    90a6:	9a03      	ldr	r2, [sp, #12]
    90a8:	1a9b      	subs	r3, r3, r2
    90aa:	429d      	cmp	r5, r3
    90ac:	db05      	blt.n	90ba <_printf_i+0x216>
    90ae:	68e0      	ldr	r0, [r4, #12]
    90b0:	9b03      	ldr	r3, [sp, #12]
    90b2:	4298      	cmp	r0, r3
    90b4:	bfb8      	it	lt
    90b6:	4618      	movlt	r0, r3
    90b8:	e793      	b.n	8fe2 <_printf_i+0x13e>
    90ba:	2301      	movs	r3, #1
    90bc:	464a      	mov	r2, r9
    90be:	4639      	mov	r1, r7
    90c0:	4630      	mov	r0, r6
    90c2:	47c0      	blx	r8
    90c4:	3001      	adds	r0, #1
    90c6:	d08a      	beq.n	8fde <_printf_i+0x13a>
    90c8:	3501      	adds	r5, #1
    90ca:	e7eb      	b.n	90a4 <_printf_i+0x200>
    90cc:	2b00      	cmp	r3, #0
    90ce:	d1a7      	bne.n	9020 <_printf_i+0x17c>
    90d0:	780b      	ldrb	r3, [r1, #0]
    90d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    90d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    90da:	e765      	b.n	8fa8 <_printf_i+0x104>
    90dc:	000099fa 	.word	0x000099fa
    90e0:	000099e9 	.word	0x000099e9
	...

000090f0 <memchr>:
    90f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    90f4:	2a10      	cmp	r2, #16
    90f6:	db2b      	blt.n	9150 <memchr+0x60>
    90f8:	f010 0f07 	tst.w	r0, #7
    90fc:	d008      	beq.n	9110 <memchr+0x20>
    90fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    9102:	3a01      	subs	r2, #1
    9104:	428b      	cmp	r3, r1
    9106:	d02d      	beq.n	9164 <memchr+0x74>
    9108:	f010 0f07 	tst.w	r0, #7
    910c:	b342      	cbz	r2, 9160 <memchr+0x70>
    910e:	d1f6      	bne.n	90fe <memchr+0xe>
    9110:	b4f0      	push	{r4, r5, r6, r7}
    9112:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9116:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    911a:	f022 0407 	bic.w	r4, r2, #7
    911e:	f07f 0700 	mvns.w	r7, #0
    9122:	2300      	movs	r3, #0
    9124:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    9128:	3c08      	subs	r4, #8
    912a:	ea85 0501 	eor.w	r5, r5, r1
    912e:	ea86 0601 	eor.w	r6, r6, r1
    9132:	fa85 f547 	uadd8	r5, r5, r7
    9136:	faa3 f587 	sel	r5, r3, r7
    913a:	fa86 f647 	uadd8	r6, r6, r7
    913e:	faa5 f687 	sel	r6, r5, r7
    9142:	b98e      	cbnz	r6, 9168 <memchr+0x78>
    9144:	d1ee      	bne.n	9124 <memchr+0x34>
    9146:	bcf0      	pop	{r4, r5, r6, r7}
    9148:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    914c:	f002 0207 	and.w	r2, r2, #7
    9150:	b132      	cbz	r2, 9160 <memchr+0x70>
    9152:	f810 3b01 	ldrb.w	r3, [r0], #1
    9156:	3a01      	subs	r2, #1
    9158:	ea83 0301 	eor.w	r3, r3, r1
    915c:	b113      	cbz	r3, 9164 <memchr+0x74>
    915e:	d1f8      	bne.n	9152 <memchr+0x62>
    9160:	2000      	movs	r0, #0
    9162:	4770      	bx	lr
    9164:	3801      	subs	r0, #1
    9166:	4770      	bx	lr
    9168:	2d00      	cmp	r5, #0
    916a:	bf06      	itte	eq
    916c:	4635      	moveq	r5, r6
    916e:	3803      	subeq	r0, #3
    9170:	3807      	subne	r0, #7
    9172:	f015 0f01 	tst.w	r5, #1
    9176:	d107      	bne.n	9188 <memchr+0x98>
    9178:	3001      	adds	r0, #1
    917a:	f415 7f80 	tst.w	r5, #256	; 0x100
    917e:	bf02      	ittt	eq
    9180:	3001      	addeq	r0, #1
    9182:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    9186:	3001      	addeq	r0, #1
    9188:	bcf0      	pop	{r4, r5, r6, r7}
    918a:	3801      	subs	r0, #1
    918c:	4770      	bx	lr
    918e:	bf00      	nop

00009190 <memmove>:
    9190:	4288      	cmp	r0, r1
    9192:	b510      	push	{r4, lr}
    9194:	eb01 0302 	add.w	r3, r1, r2
    9198:	d803      	bhi.n	91a2 <memmove+0x12>
    919a:	1e42      	subs	r2, r0, #1
    919c:	4299      	cmp	r1, r3
    919e:	d10c      	bne.n	91ba <memmove+0x2a>
    91a0:	bd10      	pop	{r4, pc}
    91a2:	4298      	cmp	r0, r3
    91a4:	d2f9      	bcs.n	919a <memmove+0xa>
    91a6:	1881      	adds	r1, r0, r2
    91a8:	1ad2      	subs	r2, r2, r3
    91aa:	42d3      	cmn	r3, r2
    91ac:	d100      	bne.n	91b0 <memmove+0x20>
    91ae:	bd10      	pop	{r4, pc}
    91b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    91b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    91b8:	e7f7      	b.n	91aa <memmove+0x1a>
    91ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    91be:	f802 4f01 	strb.w	r4, [r2, #1]!
    91c2:	e7eb      	b.n	919c <memmove+0xc>

000091c4 <_realloc_r>:
    91c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91c6:	4607      	mov	r7, r0
    91c8:	4614      	mov	r4, r2
    91ca:	460e      	mov	r6, r1
    91cc:	b921      	cbnz	r1, 91d8 <_realloc_r+0x14>
    91ce:	4611      	mov	r1, r2
    91d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    91d4:	f7ff bbca 	b.w	896c <_malloc_r>
    91d8:	b922      	cbnz	r2, 91e4 <_realloc_r+0x20>
    91da:	f7ff fb79 	bl	88d0 <_free_r>
    91de:	4625      	mov	r5, r4
    91e0:	4628      	mov	r0, r5
    91e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91e4:	f000 f814 	bl	9210 <_malloc_usable_size_r>
    91e8:	4284      	cmp	r4, r0
    91ea:	d90f      	bls.n	920c <_realloc_r+0x48>
    91ec:	4621      	mov	r1, r4
    91ee:	4638      	mov	r0, r7
    91f0:	f7ff fbbc 	bl	896c <_malloc_r>
    91f4:	4605      	mov	r5, r0
    91f6:	2800      	cmp	r0, #0
    91f8:	d0f2      	beq.n	91e0 <_realloc_r+0x1c>
    91fa:	4631      	mov	r1, r6
    91fc:	4622      	mov	r2, r4
    91fe:	f7ff fb53 	bl	88a8 <memcpy>
    9202:	4631      	mov	r1, r6
    9204:	4638      	mov	r0, r7
    9206:	f7ff fb63 	bl	88d0 <_free_r>
    920a:	e7e9      	b.n	91e0 <_realloc_r+0x1c>
    920c:	4635      	mov	r5, r6
    920e:	e7e7      	b.n	91e0 <_realloc_r+0x1c>

00009210 <_malloc_usable_size_r>:
    9210:	f851 0c04 	ldr.w	r0, [r1, #-4]
    9214:	2800      	cmp	r0, #0
    9216:	f1a0 0004 	sub.w	r0, r0, #4
    921a:	bfbc      	itt	lt
    921c:	580b      	ldrlt	r3, [r1, r0]
    921e:	18c0      	addlt	r0, r0, r3
    9220:	4770      	bx	lr
    9222:	0000      	movs	r0, r0
    9224:	682f2e2e 	.word	0x682f2e2e
    9228:	732f6c61 	.word	0x732f6c61
    922c:	682f6372 	.word	0x682f6372
    9230:	615f6c61 	.word	0x615f6c61
    9234:	615f6364 	.word	0x615f6364
    9238:	636e7973 	.word	0x636e7973
    923c:	0000632e 	.word	0x0000632e
    9240:	682f2e2e 	.word	0x682f2e2e
    9244:	732f6c61 	.word	0x732f6c61
    9248:	682f6372 	.word	0x682f6372
    924c:	635f6c61 	.word	0x635f6c61
    9250:	735f6372 	.word	0x735f6372
    9254:	2e636e79 	.word	0x2e636e79
    9258:	00000063 	.word	0x00000063
    925c:	682f2e2e 	.word	0x682f2e2e
    9260:	732f6c61 	.word	0x732f6c61
    9264:	682f6372 	.word	0x682f6372
    9268:	665f6c61 	.word	0x665f6c61
    926c:	6873616c 	.word	0x6873616c
    9270:	0000632e 	.word	0x0000632e
    9274:	682f2e2e 	.word	0x682f2e2e
    9278:	732f6c61 	.word	0x732f6c61
    927c:	682f6372 	.word	0x682f6372
    9280:	695f6c61 	.word	0x695f6c61
    9284:	6d5f6332 	.word	0x6d5f6332
    9288:	7973615f 	.word	0x7973615f
    928c:	632e636e 	.word	0x632e636e
    9290:	00000000 	.word	0x00000000
    9294:	682f2e2e 	.word	0x682f2e2e
    9298:	732f6c61 	.word	0x732f6c61
    929c:	682f6372 	.word	0x682f6372
    92a0:	695f6c61 	.word	0x695f6c61
    92a4:	00632e6f 	.word	0x00632e6f
    92a8:	682f2e2e 	.word	0x682f2e2e
    92ac:	732f6c61 	.word	0x732f6c61
    92b0:	682f6372 	.word	0x682f6372
    92b4:	735f6c61 	.word	0x735f6c61
    92b8:	6d5f6970 	.word	0x6d5f6970
    92bc:	616d645f 	.word	0x616d645f
    92c0:	0000632e 	.word	0x0000632e
    92c4:	682f2e2e 	.word	0x682f2e2e
    92c8:	732f6c61 	.word	0x732f6c61
    92cc:	682f6372 	.word	0x682f6372
    92d0:	735f6c61 	.word	0x735f6c61
    92d4:	6d5f6970 	.word	0x6d5f6970
    92d8:	6e79735f 	.word	0x6e79735f
    92dc:	00632e63 	.word	0x00632e63
    92e0:	682f2e2e 	.word	0x682f2e2e
    92e4:	732f6c61 	.word	0x732f6c61
    92e8:	682f6372 	.word	0x682f6372
    92ec:	745f6c61 	.word	0x745f6c61
    92f0:	72656d69 	.word	0x72656d69
    92f4:	0000632e 	.word	0x0000632e
    92f8:	682f2e2e 	.word	0x682f2e2e
    92fc:	732f6c61 	.word	0x732f6c61
    9300:	682f6372 	.word	0x682f6372
    9304:	755f6c61 	.word	0x755f6c61
    9308:	74726173 	.word	0x74726173
    930c:	7973615f 	.word	0x7973615f
    9310:	632e636e 	.word	0x632e636e
    9314:	00000000 	.word	0x00000000
    9318:	682f2e2e 	.word	0x682f2e2e
    931c:	752f6c61 	.word	0x752f6c61
    9320:	736c6974 	.word	0x736c6974
    9324:	6372732f 	.word	0x6372732f
    9328:	6974752f 	.word	0x6974752f
    932c:	6c5f736c 	.word	0x6c5f736c
    9330:	2e747369 	.word	0x2e747369
    9334:	00000063 	.word	0x00000063
    9338:	682f2e2e 	.word	0x682f2e2e
    933c:	752f6c61 	.word	0x752f6c61
    9340:	736c6974 	.word	0x736c6974
    9344:	6372732f 	.word	0x6372732f
    9348:	6974752f 	.word	0x6974752f
    934c:	725f736c 	.word	0x725f736c
    9350:	62676e69 	.word	0x62676e69
    9354:	65666675 	.word	0x65666675
    9358:	00632e72 	.word	0x00632e72

0000935c <_adcs>:
    935c:	01000000 0003000c 00041807 00000000     ................
    936c:	0014080b 00010000 000c0100 18040003     ................
    937c:	00000004 080b0000 00000014 682f2e2e     ............../h
    938c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    939c:	00000000                                ....

000093a0 <_cfgs>:
    93a0:	00200600 08068000 00200400 08068000     .. ....... .....
    93b0:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    93e0:	00201300 14000000 00000000 00000000     .. .............
	...

000094a0 <user_mux_confs>:
	...
    94cc:	04030201 04030201 00000000 00000000     ................
	...

000094e4 <channel_confs>:
    94e4:	06230622 06250624 00000000 00000000     ".#.$.%.........
	...

00009524 <interrupt_cfg>:
	...
    95a4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    95b4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    95c4:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    95d4:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    95e4:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    95f4:	43000800 43000c00                       ...C...C

000095fc <_usarts>:
    95fc:	00000000 40100004 00030000 00700002     .......@......p.
    960c:	0000aaaa 00000000 00000001 40100004     ...............@
    961c:	00030000 00700002 0000aaaa 00000000     ......p.........
    962c:	00000002 40100004 00030000 00700002     .......@......p.
    963c:	0000f62b 00000000 00000004 40100004     +..............@
    964c:	00030000 00700002 0000aaaa 00000000     ......p.........
    965c:	00000006 40100004 00030000 00700002     .......@......p.
    966c:	0000aaaa 00000000                       ........

00009674 <_i2cms>:
    9674:	00000005 00200014 00000100 0000e6e5     ...... .........
    9684:	00d70000 02dc6c00                       .....l..

0000968c <sercomspi_regs>:
    968c:	0020000c 00020000 00000000 01ff00fe     .. .............
    969c:	20000c03 00000000 00000000 ff000600     ... ............
    96ac:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    96bc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    96cc:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    96dc:	42001400 42001800 43001400 43001800     ...B...B...C...C

000096ec <_tcs>:
    96ec:	006c0001 00000308 00000021 00000004     ..l.....!.......
    96fc:	00000000 006f0004 00000308 00000021     ......o.....!...
    970c:	00000004 00000000 00710006 00000308     ..........q.....
    971c:	00000021 00000004 00000000 00720007     !.............r.
    972c:	00000308 00000021 00003a9d 00000000     ....!....:......
    973c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    974c:	0000632e                                .c..

00009750 <_usb_ep_cfgs>:
    9750:	20000bfc 00000000 00000040 00000000     ... ....@.......
	...
    9768:	20000bf4 00000000 00000008 20000bb4     ... ........... 
    9778:	00000000 00000040 00000000 00000000     ....@...........
	...

00009798 <grid_module_mux_lookup>:
    9798:	05040100 0d0c0908 07060302 0f0e0b0a     ................
    97a8:	504f4f4c 4b434954 32302520 45520a78     LOOPTICK %02x.RE
    97b8:	49544c41 2520454d 0a783230 4b534154     ALTIME %02x.TASK
    97c8:	30252030 540a7832 314b5341 32302520     0 %02x.TASK1 %02
    97d8:	41540a78 20324b53 78323025 5341540a     x.TASK2 %02x.TAS
    97e8:	2520334b 0a783230 4b534154 30252034     K3 %02x.TASK4 %0
    97f8:	000a7832 00000000 58525f4e 2520435f     2x......N_RX_C %
    9808:	0a783230 58525f45 2520435f 0a783230     02x.E_RX_C %02x.
    9818:	58525f53 2520435f 0a783230 58525f57     S_RX_C %02x.W_RX
    9828:	2520435f 0a783230 58545f4e 2520435f     _C %02x.N_TX_C %
    9838:	0a783230 58545f45 2520435f 0a783230     02x.E_TX_C %02x.
    9848:	58545f53 2520435f 0a783230 58545f57     S_TX_C %02x.W_TX
    9858:	2520435f 0a783230 45425f4e 435f4c4c     _C %02x.N_BELL_C
    9868:	32302520 5f450a78 4c4c4542 2520435f      %02x.E_BELL_C %
    9878:	0a783230 45425f53 435f4c4c 32302520     02x.S_BELL_C %02
    9888:	5f570a78 4c4c4542 2520435f 0a783230     x.W_BELL_C %02x.
	...

0000989a <grid_module_din_buffer_size>:
	...

0000989b <grid_module_ain_buffer_size>:
    989b:	00001010                                         .

0000989c <grid_module_led_buffer_size>:
    989c:	00000010 63256325 30256325 63257838     ....%c%c%c%08x%c
    98ac:	00000000 78323025 0000000a 00000a6b     ....%02x....k...
    98bc:	30256325 30257832 30257832 30257832     %c%02x%02x%02x%0
    98cc:	00007832 78256325 78323025 78323025     2x..%c%x%02x%02x
    98dc:	78323025 78323025 00006325 78323025     %02x%02x%c..%02x
    98ec:	00000000                                ....

000098f0 <keyboard_report_desc>:
    98f0:	06090105 070501a1 e729e019 01250015     ..........)...%.
    9900:	08950175 01810281 65290019 65250015     u.........)e..%e
    9910:	06950875 08050081 05290119 01250015     u.........)...%.
    9920:	05950175 03950291 00c00191              u...........

0000992c <mouse_report_desc>:
    992c:	02090105 010901a1 090500a1 03290119     ..............).
    993c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    994c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    995c:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    996c:	73752f65 2e636462 00000063              e/usbdc.c...

00009978 <__sf_fake_stderr>:
	...

00009998 <__sf_fake_stdin>:
	...

000099b8 <__sf_fake_stdout>:
	...
    99d8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    99e8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    99f8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9a08:	00006665                                ef..

00009a0c <_init>:
    9a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a0e:	bf00      	nop
    9a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9a12:	bc08      	pop	{r3}
    9a14:	469e      	mov	lr, r3
    9a16:	4770      	bx	lr

00009a18 <__init_array_start>:
    9a18:	00000289 	.word	0x00000289

00009a1c <_fini>:
    9a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a1e:	bf00      	nop
    9a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9a22:	bc08      	pop	{r3}
    9a24:	469e      	mov	lr, r3
    9a26:	4770      	bx	lr

00009a28 <__fini_array_start>:
    9a28:	00000265 	.word	0x00000265
