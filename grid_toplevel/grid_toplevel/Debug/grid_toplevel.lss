
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e6b4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000e6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          00007794  200005c0  0000ec80  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20007d54  00016414  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008f1df  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bf8a  00000000  00000000  000af822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e312  00000000  00000000  000bb7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002300  00000000  00000000  000e9abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003258  00000000  00000000  000ebdbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00048786  00000000  00000000  000ef016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040406  00000000  00000000  0013779c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ab86  00000000  00000000  00177ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006850  00000000  00000000  00292728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 7d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     X}. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	05 6e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .n..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 11 6a 00 00 25 6a 00 00     .........j..%j..
      bc:	49 68 00 00 55 68 00 00 61 68 00 00 6d 68 00 00     Ih..Uh..ah..mh..
      cc:	79 68 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     yh..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	39 6c 00 00 21 79 00 00 35 79 00 00 49 79 00 00     9l..!y..5y..Iy..
     104:	5d 79 00 00 71 79 00 00 85 79 00 00 99 79 00 00     ]y..qy...y...y..
     114:	ad 79 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .y..............
     124:	ed 02 00 00 c1 79 00 00 d5 79 00 00 e9 79 00 00     .....y...y...y..
     134:	fd 79 00 00 11 7a 00 00 25 7a 00 00 39 7a 00 00     .y...z..%z..9z..
     144:	4d 7a 00 00 61 7a 00 00 75 7a 00 00 89 7a 00 00     Mz..az..uz...z..
     154:	9d 7a 00 00 b1 7a 00 00 c5 7a 00 00 d9 7a 00 00     .z...z...z...z..
     164:	ed 7a 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .z..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 09 9a 00 00     ................
     184:	15 9a 00 00 21 9a 00 00 2d 9a 00 00 00 00 00 00     ....!...-.......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 11 87 00 00 25 87 00 00     ............%...
     1f4:	39 87 00 00 4d 87 00 00 ed 02 00 00 ed 02 00 00     9...M...........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 dd 64 00 00 f1 64 00 00 05 65 00 00     .....d...d...e..
     224:	19 65 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .e..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000e6b4 	.word	0x0000e6b4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e6b4 	.word	0x0000e6b4
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000e6b4 	.word	0x0000e6b4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000bcf9 	.word	0x0000bcf9
     2e8:	0000a8f1 	.word	0x0000a8f1

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000e6b4 	.word	0x0000e6b4
     36c:	200005bc 	.word	0x200005bc
     370:	20007d54 	.word	0x20007d54
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000c4d9 	.word	0x0000c4d9
     384:	0000a411 	.word	0x0000a411

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20000fc8 	.word	0x20000fc8
     40c:	200010c4 	.word	0x200010c4
     410:	43001c00 	.word	0x43001c00
     414:	00004881 	.word	0x00004881
     418:	00004925 	.word	0x00004925
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000119c 	.word	0x2000119c
     4b0:	20000f64 	.word	0x20000f64
     4b4:	43002000 	.word	0x43002000
     4b8:	00004881 	.word	0x00004881
     4bc:	00004925 	.word	0x00004925
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000f60 	.word	0x20000f60
     4e8:	00004bc1 	.word	0x00004bc1

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004c45 	.word	0x00004c45

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000f44 	.word	0x20000f44
     54c:	00004c65 	.word	0x00004c65

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001208 	.word	0x20001208
     718:	00004e11 	.word	0x00004e11
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20000ff4 	.word	0x20000ff4
     7bc:	000056f1 	.word	0x000056f1
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	20001048 	.word	0x20001048
     860:	000056f1 	.word	0x000056f1
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20000fbc 	.word	0x20000fbc
     8f8:	00005979 	.word	0x00005979
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000ebc 	.word	0x20000ebc
     a04:	00005001 	.word	0x00005001
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	200010fc 	.word	0x200010fc
     aa8:	000056f1 	.word	0x000056f1
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000f7c 	.word	0x20000f7c
     b54:	00004d45 	.word	0x00004d45
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	2000114c 	.word	0x2000114c
     bf8:	000056f1 	.word	0x000056f1
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001098 	.word	0x20001098
     cfc:	00005265 	.word	0x00005265
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00004bf1 	.word	0x00004bf1

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00005c41 	.word	0x00005c41
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000d9a8 	.word	0x0000d9a8
     e14:	00005f99 	.word	0x00005f99
     e18:	20001044 	.word	0x20001044
     e1c:	40002000 	.word	0x40002000
     e20:	00009a39 	.word	0x00009a39

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	0000655d 	.word	0x0000655d
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00006dfd 	.word	0x00006dfd
    1100:	40002400 	.word	0x40002400
    1104:	20000f04 	.word	0x20000f04
    1108:	0000540d 	.word	0x0000540d
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00008709 	.word	0x00008709
    1134:	40003800 	.word	0x40003800
    1138:	200011e8 	.word	0x200011e8
    113c:	40003c00 	.word	0x40003c00
    1140:	200010dc 	.word	0x200010dc
    1144:	4101a000 	.word	0x4101a000
    1148:	20000f24 	.word	0x20000f24
    114c:	4101c000 	.word	0x4101c000
    1150:	200011c8 	.word	0x200011c8
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_d51_init>:
	
}



void grid_d51_init(){
    1160:	b538      	push	{r3, r4, r5, lr}
	
	#ifdef NDEBUG	
	grid_d51_verify_user_row();
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    1162:	4d06      	ldr	r5, [pc, #24]	; (117c <grid_d51_init+0x1c>)
    1164:	4906      	ldr	r1, [pc, #24]	; (1180 <grid_d51_init+0x20>)
    1166:	4628      	mov	r0, r5
    1168:	4c06      	ldr	r4, [pc, #24]	; (1184 <grid_d51_init+0x24>)
    116a:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    116c:	4906      	ldr	r1, [pc, #24]	; (1188 <grid_d51_init+0x28>)
    116e:	4628      	mov	r0, r5
    1170:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    1172:	4906      	ldr	r1, [pc, #24]	; (118c <grid_d51_init+0x2c>)
    1174:	4628      	mov	r0, r5
    1176:	47a0      	blx	r4
    1178:	bd38      	pop	{r3, r4, r5, pc}
    117a:	bf00      	nop
    117c:	0000d9d8 	.word	0x0000d9d8
    1180:	0000d9c4 	.word	0x0000d9c4
    1184:	0000c6b1 	.word	0x0000c6b1
    1188:	0000da00 	.word	0x0000da00
    118c:	0000da10 	.word	0x0000da10

00001190 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1190:	b538      	push	{r3, r4, r5, lr}
    1192:	4604      	mov	r4, r0
    1194:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1196:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1198:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    119a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    119c:	2300      	movs	r3, #0
    119e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    11a0:	0048      	lsls	r0, r1, #1
    11a2:	4b09      	ldr	r3, [pc, #36]	; (11c8 <grid_ain_channel_init+0x38>)
    11a4:	4798      	blx	r3
    11a6:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    11a8:	b14d      	cbz	r5, 11be <grid_ain_channel_init+0x2e>
    11aa:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    11ac:	4619      	mov	r1, r3
    11ae:	6822      	ldr	r2, [r4, #0]
    11b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    11b4:	3301      	adds	r3, #1
    11b6:	b2db      	uxtb	r3, r3
    11b8:	7922      	ldrb	r2, [r4, #4]
    11ba:	429a      	cmp	r2, r3
    11bc:	d8f7      	bhi.n	11ae <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    11be:	2000      	movs	r0, #0
    11c0:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    11c2:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    11c4:	bd38      	pop	{r3, r4, r5, pc}
    11c6:	bf00      	nop
    11c8:	0000c521 	.word	0x0000c521

000011cc <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    11cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11d0:	4605      	mov	r5, r0
    11d2:	4689      	mov	r9, r1
    11d4:	4617      	mov	r7, r2
    11d6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11d8:	0100      	lsls	r0, r0, #4
    11da:	4b0c      	ldr	r3, [pc, #48]	; (120c <grid_ain_init+0x40>)
    11dc:	4798      	blx	r3
    11de:	4b0c      	ldr	r3, [pc, #48]	; (1210 <grid_ain_init+0x44>)
    11e0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11e2:	b185      	cbz	r5, 1206 <grid_ain_init+0x3a>
    11e4:	3d01      	subs	r5, #1
    11e6:	b2ed      	uxtb	r5, r5
    11e8:	3501      	adds	r5, #1
    11ea:	012d      	lsls	r5, r5, #4
    11ec:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11ee:	469a      	mov	sl, r3
    11f0:	4e08      	ldr	r6, [pc, #32]	; (1214 <grid_ain_init+0x48>)
    11f2:	4643      	mov	r3, r8
    11f4:	463a      	mov	r2, r7
    11f6:	4649      	mov	r1, r9
    11f8:	f8da 0000 	ldr.w	r0, [sl]
    11fc:	4420      	add	r0, r4
    11fe:	47b0      	blx	r6
    1200:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    1202:	42ac      	cmp	r4, r5
    1204:	d1f5      	bne.n	11f2 <grid_ain_init+0x26>
	}

	return 0;
}
    1206:	2000      	movs	r0, #0
    1208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    120c:	0000c521 	.word	0x0000c521
    1210:	20002250 	.word	0x20002250
    1214:	00001191 	.word	0x00001191

00001218 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    121c:	0100      	lsls	r0, r0, #4
    121e:	4b3c      	ldr	r3, [pc, #240]	; (1310 <grid_ain_add_sample+0xf8>)
    1220:	f8d3 a000 	ldr.w	sl, [r3]
    1224:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1228:	f89c 6004 	ldrb.w	r6, [ip, #4]
    122c:	2e00      	cmp	r6, #0
    122e:	d05b      	beq.n	12e8 <grid_ain_add_sample+0xd0>
    1230:	f85a 5000 	ldr.w	r5, [sl, r0]
    1234:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1236:	2200      	movs	r2, #0
    1238:	4690      	mov	r8, r2
    123a:	4691      	mov	r9, r2
    123c:	4696      	mov	lr, r2
    123e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1242:	4614      	mov	r4, r2
    1244:	fa5f fb82 	uxtb.w	fp, r2
    1248:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    124c:	441c      	add	r4, r3
		
		if (current > maximum){
    124e:	4573      	cmp	r3, lr
    1250:	bf84      	itt	hi
    1252:	46d8      	movhi	r8, fp
			maximum = current;
    1254:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1256:	42bb      	cmp	r3, r7
    1258:	bf3c      	itt	cc
    125a:	46d9      	movcc	r9, fp
			minimum = current;
    125c:	461f      	movcc	r7, r3
    125e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1260:	b2d3      	uxtb	r3, r2
    1262:	42b3      	cmp	r3, r6
    1264:	d3ee      	bcc.n	1244 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1266:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    126a:	b2b6      	uxth	r6, r6
    126c:	428e      	cmp	r6, r1
    126e:	d23f      	bcs.n	12f0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1270:	f85a 3000 	ldr.w	r3, [sl, r0]
    1274:	440c      	add	r4, r1
    1276:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    127a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    127c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1280:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1284:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1288:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    128c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1290:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1292:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1296:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1298:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    129a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    129c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    12a0:	b29b      	uxth	r3, r3
    12a2:	408b      	lsls	r3, r1
    12a4:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    12a6:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    12aa:	1b92      	subs	r2, r2, r6
    12ac:	2a00      	cmp	r2, #0
    12ae:	bfb8      	it	lt
    12b0:	4252      	neglt	r2, r2
    12b2:	2601      	movs	r6, #1
    12b4:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12b8:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    12bc:	42be      	cmp	r6, r7
    12be:	d020      	beq.n	1302 <grid_ain_add_sample+0xea>
    12c0:	4282      	cmp	r2, r0
    12c2:	dc08      	bgt.n	12d6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    12c4:	2201      	movs	r2, #1
    12c6:	fa02 f505 	lsl.w	r5, r2, r5
    12ca:	fa02 f101 	lsl.w	r1, r2, r1
    12ce:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12d0:	428f      	cmp	r7, r1
    12d2:	d000      	beq.n	12d6 <grid_ain_add_sample+0xbe>
    12d4:	b9c7      	cbnz	r7, 1308 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12d6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12da:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12de:	2001      	movs	r0, #1
    12e0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12e8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ea:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12ec:	2400      	movs	r4, #0
    12ee:	e7ba      	b.n	1266 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12f0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12f4:	440c      	add	r4, r1
    12f6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12fa:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12fc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    1300:	e7be      	b.n	1280 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    1302:	2000      	movs	r0, #0
    1304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1308:	2000      	movs	r0, #0
	}
	
}
    130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    130e:	bf00      	nop
    1310:	20002250 	.word	0x20002250

00001314 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    1314:	4b02      	ldr	r3, [pc, #8]	; (1320 <grid_ain_get_changed+0xc>)
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    131c:	7b00      	ldrb	r0, [r0, #12]
    131e:	4770      	bx	lr
    1320:	20002250 	.word	0x20002250

00001324 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    1324:	4b09      	ldr	r3, [pc, #36]	; (134c <grid_ain_get_average+0x28>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    132c:	2300      	movs	r3, #0
    132e:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1330:	1fcb      	subs	r3, r1, #7
    1332:	b2db      	uxtb	r3, r3
    1334:	2b07      	cmp	r3, #7
    1336:	d806      	bhi.n	1346 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1338:	8903      	ldrh	r3, [r0, #8]
    133a:	7940      	ldrb	r0, [r0, #5]
    133c:	1a40      	subs	r0, r0, r1
    133e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1342:	b280      	uxth	r0, r0
    1344:	4770      	bx	lr
    1346:	2000      	movs	r0, #0
    1348:	e7fb      	b.n	1342 <grid_ain_get_average+0x1e>
    134a:	bf00      	nop
    134c:	20002250 	.word	0x20002250

00001350 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1350:	b538      	push	{r3, r4, r5, lr}
    1352:	4604      	mov	r4, r0
    1354:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1356:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1358:	2300      	movs	r3, #0
    135a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    135c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    135e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1360:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1362:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1364:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1366:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1368:	4608      	mov	r0, r1
    136a:	4b08      	ldr	r3, [pc, #32]	; (138c <grid_buffer_init+0x3c>)
    136c:	4798      	blx	r3
    136e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1370:	b900      	cbnz	r0, 1374 <grid_buffer_init+0x24>
    1372:	e7fe      	b.n	1372 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1374:	b145      	cbz	r5, 1388 <grid_buffer_init+0x38>
    1376:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1378:	4619      	mov	r1, r3
    137a:	6862      	ldr	r2, [r4, #4]
    137c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    137e:	3301      	adds	r3, #1
    1380:	b29b      	uxth	r3, r3
    1382:	8822      	ldrh	r2, [r4, #0]
    1384:	429a      	cmp	r2, r3
    1386:	d8f8      	bhi.n	137a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1388:	2001      	movs	r0, #1
    138a:	bd38      	pop	{r3, r4, r5, pc}
    138c:	0000c521 	.word	0x0000c521

00001390 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1390:	8903      	ldrh	r3, [r0, #8]
    1392:	8a02      	ldrh	r2, [r0, #16]
    1394:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1396:	bf8f      	iteee	hi
    1398:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    139a:	8800      	ldrhls	r0, [r0, #0]
    139c:	18c0      	addls	r0, r0, r3
    139e:	1a80      	subls	r0, r0, r2
    13a0:	b280      	uxth	r0, r0

	return space;

	
	
}
    13a2:	4770      	bx	lr

000013a4 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    13a4:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    13a6:	8903      	ldrh	r3, [r0, #8]
    13a8:	8a02      	ldrh	r2, [r0, #16]
    13aa:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    13ac:	bf9c      	itt	ls
    13ae:	8804      	ldrhls	r4, [r0, #0]
    13b0:	191b      	addls	r3, r3, r4
    13b2:	1a9b      	subs	r3, r3, r2
    13b4:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    13b6:	428b      	cmp	r3, r1
    13b8:	d90a      	bls.n	13d0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    13ba:	440a      	add	r2, r1
    13bc:	8804      	ldrh	r4, [r0, #0]
    13be:	fb92 f3f4 	sdiv	r3, r2, r4
    13c2:	fb04 2213 	mls	r2, r4, r3, r2
    13c6:	8242      	strh	r2, [r0, #18]
		
		return length;
    13c8:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    13ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    13ce:	4770      	bx	lr
		return 0; // failed
    13d0:	2000      	movs	r0, #0
    13d2:	e7fa      	b.n	13ca <grid_buffer_write_init+0x26>

000013d4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13d4:	8a83      	ldrh	r3, [r0, #20]
    13d6:	6842      	ldr	r2, [r0, #4]
    13d8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13da:	8a83      	ldrh	r3, [r0, #20]
    13dc:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13de:	b29b      	uxth	r3, r3
    13e0:	8801      	ldrh	r1, [r0, #0]
    13e2:	fbb3 f2f1 	udiv	r2, r3, r1
    13e6:	fb01 3312 	mls	r3, r1, r2, r3
    13ea:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13ec:	2001      	movs	r0, #1
    13ee:	4770      	bx	lr

000013f0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13f0:	8a83      	ldrh	r3, [r0, #20]
    13f2:	8a42      	ldrh	r2, [r0, #18]
    13f4:	429a      	cmp	r2, r3
    13f6:	d000      	beq.n	13fa <grid_buffer_write_acknowledge+0xa>
    13f8:	e7fe      	b.n	13f8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13fa:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13fc:	2001      	movs	r0, #1
    13fe:	4770      	bx	lr

00001400 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1400:	8983      	ldrh	r3, [r0, #12]
    1402:	8942      	ldrh	r2, [r0, #10]
    1404:	429a      	cmp	r2, r3
    1406:	d000      	beq.n	140a <grid_buffer_read_size+0xa>
    1408:	e7fe      	b.n	1408 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    140a:	8902      	ldrh	r2, [r0, #8]
    140c:	429a      	cmp	r2, r3
    140e:	d000      	beq.n	1412 <grid_buffer_read_size+0x12>
    1410:	e7fe      	b.n	1410 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    1412:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    1414:	8a05      	ldrh	r5, [r0, #16]
    1416:	42ab      	cmp	r3, r5
    1418:	d025      	beq.n	1466 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    141a:	8804      	ldrh	r4, [r0, #0]
    141c:	b1fc      	cbz	r4, 145e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    141e:	4626      	mov	r6, r4
    1420:	fb93 f2f4 	sdiv	r2, r3, r4
    1424:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1428:	b291      	uxth	r1, r2
    142a:	428d      	cmp	r5, r1
    142c:	d01d      	beq.n	146a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    142e:	6840      	ldr	r0, [r0, #4]
    1430:	5c42      	ldrb	r2, [r0, r1]
    1432:	2a0a      	cmp	r2, #10
    1434:	d114      	bne.n	1460 <grid_buffer_read_size+0x60>
    1436:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1438:	3301      	adds	r3, #1
    143a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    143c:	bcf0      	pop	{r4, r5, r6, r7}
    143e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1440:	fb92 f1f6 	sdiv	r1, r2, r6
    1444:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1448:	b28f      	uxth	r7, r1
    144a:	42bd      	cmp	r5, r7
    144c:	d00f      	beq.n	146e <grid_buffer_read_size+0x6e>
    144e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1450:	5dc1      	ldrb	r1, [r0, r7]
    1452:	290a      	cmp	r1, #10
    1454:	d0f0      	beq.n	1438 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1456:	3301      	adds	r3, #1
    1458:	b29b      	uxth	r3, r3
    145a:	42a3      	cmp	r3, r4
    145c:	d1f0      	bne.n	1440 <grid_buffer_read_size+0x40>
    145e:	e7fe      	b.n	145e <grid_buffer_read_size+0x5e>
    1460:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1462:	2300      	movs	r3, #0
    1464:	e7f7      	b.n	1456 <grid_buffer_read_size+0x56>
		return 0;
    1466:	2000      	movs	r0, #0
    1468:	e7e8      	b.n	143c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    146a:	2000      	movs	r0, #0
    146c:	e7e6      	b.n	143c <grid_buffer_read_size+0x3c>
    146e:	2000      	movs	r0, #0
    1470:	e7e4      	b.n	143c <grid_buffer_read_size+0x3c>

00001472 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1472:	8982      	ldrh	r2, [r0, #12]
    1474:	8943      	ldrh	r3, [r0, #10]
    1476:	4293      	cmp	r3, r2
    1478:	d000      	beq.n	147c <grid_buffer_read_init+0xa>
    147a:	e7fe      	b.n	147a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    147c:	8903      	ldrh	r3, [r0, #8]
    147e:	4293      	cmp	r3, r2
    1480:	d000      	beq.n	1484 <grid_buffer_read_init+0x12>
    1482:	e7fe      	b.n	1482 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1484:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1486:	8a05      	ldrh	r5, [r0, #16]
    1488:	42aa      	cmp	r2, r5
    148a:	d031      	beq.n	14f0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    148c:	8804      	ldrh	r4, [r0, #0]
    148e:	b35c      	cbz	r4, 14e8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1490:	4626      	mov	r6, r4
    1492:	fb92 f3f4 	sdiv	r3, r2, r4
    1496:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    149a:	b299      	uxth	r1, r3
    149c:	428d      	cmp	r5, r1
    149e:	d029      	beq.n	14f4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    14a0:	6847      	ldr	r7, [r0, #4]
    14a2:	460b      	mov	r3, r1
    14a4:	5c79      	ldrb	r1, [r7, r1]
    14a6:	290a      	cmp	r1, #10
    14a8:	d11f      	bne.n	14ea <grid_buffer_read_init+0x78>
    14aa:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    14ac:	3301      	adds	r3, #1
    14ae:	fb93 f2f4 	sdiv	r2, r3, r4
    14b2:	fb04 3312 	mls	r3, r4, r2, r3
    14b6:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    14b8:	1c4b      	adds	r3, r1, #1
    14ba:	b29b      	uxth	r3, r3
    14bc:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    14be:	4618      	mov	r0, r3
    14c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    14c2:	fb92 f3f6 	sdiv	r3, r2, r6
    14c6:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    14ca:	fa1f fe83 	uxth.w	lr, r3
    14ce:	4575      	cmp	r5, lr
    14d0:	d012      	beq.n	14f8 <grid_buffer_read_init+0x86>
    14d2:	4673      	mov	r3, lr
    14d4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14d6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14da:	f1be 0f0a 	cmp.w	lr, #10
    14de:	d0e5      	beq.n	14ac <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14e0:	3101      	adds	r1, #1
    14e2:	b289      	uxth	r1, r1
    14e4:	42a1      	cmp	r1, r4
    14e6:	d1ec      	bne.n	14c2 <grid_buffer_read_init+0x50>
    14e8:	e7fe      	b.n	14e8 <grid_buffer_read_init+0x76>
    14ea:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14ec:	2100      	movs	r1, #0
    14ee:	e7f7      	b.n	14e0 <grid_buffer_read_init+0x6e>
		return 0;
    14f0:	2300      	movs	r3, #0
    14f2:	e7e4      	b.n	14be <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14f4:	2300      	movs	r3, #0
    14f6:	e7e2      	b.n	14be <grid_buffer_read_init+0x4c>
    14f8:	2300      	movs	r3, #0
    14fa:	e7e0      	b.n	14be <grid_buffer_read_init+0x4c>

000014fc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14fc:	8983      	ldrh	r3, [r0, #12]
    14fe:	8941      	ldrh	r1, [r0, #10]
    1500:	4299      	cmp	r1, r3
    1502:	d00e      	beq.n	1522 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    1504:	b410      	push	{r4}
    1506:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1508:	6841      	ldr	r1, [r0, #4]
    150a:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    150c:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    150e:	b29b      	uxth	r3, r3
    1510:	8814      	ldrh	r4, [r2, #0]
    1512:	fbb3 f1f4 	udiv	r1, r3, r4
    1516:	fb04 3311 	mls	r3, r4, r1, r3
    151a:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    151c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1520:	4770      	bx	lr
    1522:	e7fe      	b.n	1522 <grid_buffer_read_character+0x26>

00001524 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    1524:	8983      	ldrh	r3, [r0, #12]
    1526:	8942      	ldrh	r2, [r0, #10]
    1528:	429a      	cmp	r2, r3
    152a:	d000      	beq.n	152e <grid_buffer_read_acknowledge+0xa>
    152c:	e7fe      	b.n	152c <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    152e:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1530:	2001      	movs	r0, #1
    1532:	4770      	bx	lr

00001534 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    1534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1538:	4604      	mov	r4, r0
    153a:	4690      	mov	r8, r2
    153c:	461f      	mov	r7, r3
    153e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1542:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1546:	4e3b      	ldr	r6, [pc, #236]	; (1634 <grid_port_init+0x100>)
    1548:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    154a:	4641      	mov	r1, r8
    154c:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
    1550:	47b0      	blx	r6
	
	por->ping_report = p_report;
    1552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1554:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    1556:	2300      	movs	r3, #0
    1558:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    155a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    155e:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    1560:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1564:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    1566:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    1568:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    156a:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    156c:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    156e:	4619      	mov	r1, r3
    1570:	18e2      	adds	r2, r4, r3
    1572:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1576:	3301      	adds	r3, #1
    1578:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    157c:	d1f8      	bne.n	1570 <grid_port_init+0x3c>
    157e:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1580:	4619      	mov	r1, r3
    1582:	18e2      	adds	r2, r4, r3
    1584:	f882 1800 	strb.w	r1, [r2, #2048]	; 0x800
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1588:	3301      	adds	r3, #1
    158a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    158e:	d1f8      	bne.n	1582 <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    1590:	2300      	movs	r3, #0
    1592:	f241 0204 	movw	r2, #4100	; 0x1004
    1596:	54a3      	strb	r3, [r4, r2]
	
	por->partner_hwcfg = 0;
    1598:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    159c:	6013      	str	r3, [r2, #0]
	por->partner_status = 1;
    159e:	2201      	movs	r2, #1
    15a0:	f241 0307 	movw	r3, #4103	; 0x1007
    15a4:	54e2      	strb	r2, [r4, r3]
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    15a6:	4295      	cmp	r5, r2
    15a8:	d005      	beq.n	15b6 <grid_port_init+0x82>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    15aa:	2201      	movs	r2, #1
    15ac:	f241 0307 	movw	r3, #4103	; 0x1007
    15b0:	54e2      	strb	r2, [r4, r3]
    15b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    15b6:	2300      	movs	r3, #0
    15b8:	f241 0207 	movw	r2, #4103	; 0x1007
    15bc:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    15be:	f241 0204 	movw	r2, #4100	; 0x1004
    15c2:	54a3      	strb	r3, [r4, r2]
		if (por->direction == GRID_MSG_NORTH){
    15c4:	7b63      	ldrb	r3, [r4, #13]
    15c6:	b2db      	uxtb	r3, r3
    15c8:	2b11      	cmp	r3, #17
    15ca:	d015      	beq.n	15f8 <grid_port_init+0xc4>
		else if (por->direction == GRID_MSG_EAST){
    15cc:	7b63      	ldrb	r3, [r4, #13]
    15ce:	b2db      	uxtb	r3, r3
    15d0:	2b12      	cmp	r3, #18
    15d2:	d01b      	beq.n	160c <grid_port_init+0xd8>
		else if (por->direction == GRID_MSG_SOUTH){
    15d4:	7b63      	ldrb	r3, [r4, #13]
    15d6:	b2db      	uxtb	r3, r3
    15d8:	2b13      	cmp	r3, #19
    15da:	d021      	beq.n	1620 <grid_port_init+0xec>
		else if (por->direction == GRID_MSG_WEST){
    15dc:	7b63      	ldrb	r3, [r4, #13]
    15de:	b2db      	uxtb	r3, r3
    15e0:	2b14      	cmp	r3, #20
    15e2:	d1e6      	bne.n	15b2 <grid_port_init+0x7e>
			por->dx = -1;
    15e4:	22ff      	movs	r2, #255	; 0xff
    15e6:	f241 0305 	movw	r3, #4101	; 0x1005
    15ea:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    15ec:	2200      	movs	r2, #0
    15ee:	f241 0306 	movw	r3, #4102	; 0x1006
    15f2:	54e2      	strb	r2, [r4, r3]
    15f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15f8:	2200      	movs	r2, #0
    15fa:	f241 0305 	movw	r3, #4101	; 0x1005
    15fe:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    1600:	2201      	movs	r2, #1
    1602:	f241 0306 	movw	r3, #4102	; 0x1006
    1606:	54e2      	strb	r2, [r4, r3]
    1608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    160c:	2201      	movs	r2, #1
    160e:	f241 0305 	movw	r3, #4101	; 0x1005
    1612:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    1614:	2200      	movs	r2, #0
    1616:	f241 0306 	movw	r3, #4102	; 0x1006
    161a:	54e2      	strb	r2, [r4, r3]
    161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1620:	2200      	movs	r2, #0
    1622:	f241 0305 	movw	r3, #4101	; 0x1005
    1626:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    1628:	22ff      	movs	r2, #255	; 0xff
    162a:	f241 0306 	movw	r3, #4102	; 0x1006
    162e:	54e2      	strb	r2, [r4, r3]
    1630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1634:	00001351 	.word	0x00001351

00001638 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    163c:	b084      	sub	sp, #16
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    163e:	4f30      	ldr	r7, [pc, #192]	; (1700 <grid_port_init_all+0xc8>)
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	3310      	adds	r3, #16
    1644:	9303      	str	r3, [sp, #12]
    1646:	2500      	movs	r5, #0
    1648:	9502      	str	r5, [sp, #8]
    164a:	2311      	movs	r3, #17
    164c:	9301      	str	r3, [sp, #4]
    164e:	2401      	movs	r4, #1
    1650:	9400      	str	r4, [sp, #0]
    1652:	4b2c      	ldr	r3, [pc, #176]	; (1704 <grid_port_init_all+0xcc>)
    1654:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1658:	4611      	mov	r1, r2
    165a:	482b      	ldr	r0, [pc, #172]	; (1708 <grid_port_init_all+0xd0>)
    165c:	4e2b      	ldr	r6, [pc, #172]	; (170c <grid_port_init_all+0xd4>)
    165e:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	3320      	adds	r3, #32
    1664:	9303      	str	r3, [sp, #12]
    1666:	9402      	str	r4, [sp, #8]
    1668:	2312      	movs	r3, #18
    166a:	9301      	str	r3, [sp, #4]
    166c:	9400      	str	r4, [sp, #0]
    166e:	4b28      	ldr	r3, [pc, #160]	; (1710 <grid_port_init_all+0xd8>)
    1670:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1674:	4611      	mov	r1, r2
    1676:	4827      	ldr	r0, [pc, #156]	; (1714 <grid_port_init_all+0xdc>)
    1678:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	3330      	adds	r3, #48	; 0x30
    167e:	9303      	str	r3, [sp, #12]
    1680:	f04f 0802 	mov.w	r8, #2
    1684:	f8cd 8008 	str.w	r8, [sp, #8]
    1688:	2313      	movs	r3, #19
    168a:	9301      	str	r3, [sp, #4]
    168c:	9400      	str	r4, [sp, #0]
    168e:	4b22      	ldr	r3, [pc, #136]	; (1718 <grid_port_init_all+0xe0>)
    1690:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1694:	4611      	mov	r1, r2
    1696:	4821      	ldr	r0, [pc, #132]	; (171c <grid_port_init_all+0xe4>)
    1698:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	3340      	adds	r3, #64	; 0x40
    169e:	9303      	str	r3, [sp, #12]
    16a0:	2703      	movs	r7, #3
    16a2:	9702      	str	r7, [sp, #8]
    16a4:	2314      	movs	r3, #20
    16a6:	9301      	str	r3, [sp, #4]
    16a8:	9400      	str	r4, [sp, #0]
    16aa:	4b1d      	ldr	r3, [pc, #116]	; (1720 <grid_port_init_all+0xe8>)
    16ac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    16b0:	4611      	mov	r1, r2
    16b2:	481c      	ldr	r0, [pc, #112]	; (1724 <grid_port_init_all+0xec>)
    16b4:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    16b6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 172c <grid_port_init_all+0xf4>
    16ba:	9503      	str	r5, [sp, #12]
    16bc:	f04f 0aff 	mov.w	sl, #255	; 0xff
    16c0:	f8cd a008 	str.w	sl, [sp, #8]
    16c4:	9501      	str	r5, [sp, #4]
    16c6:	9700      	str	r7, [sp, #0]
    16c8:	462b      	mov	r3, r5
    16ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    16ce:	4611      	mov	r1, r2
    16d0:	4648      	mov	r0, r9
    16d2:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    16d4:	4f14      	ldr	r7, [pc, #80]	; (1728 <grid_port_init_all+0xf0>)
    16d6:	9503      	str	r5, [sp, #12]
    16d8:	f8cd a008 	str.w	sl, [sp, #8]
    16dc:	9501      	str	r5, [sp, #4]
    16de:	f8cd 8000 	str.w	r8, [sp]
    16e2:	462b      	mov	r3, r5
    16e4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    16e8:	4611      	mov	r1, r2
    16ea:	4638      	mov	r0, r7
    16ec:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    16ee:	f241 0307 	movw	r3, #4103	; 0x1007
    16f2:	f809 4003 	strb.w	r4, [r9, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    16f6:	54fc      	strb	r4, [r7, r3]
	
	
}
    16f8:	b004      	add	sp, #16
    16fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16fe:	bf00      	nop
    1700:	20003270 	.word	0x20003270
    1704:	20001048 	.word	0x20001048
    1708:	2000121c 	.word	0x2000121c
    170c:	00001535 	.word	0x00001535
    1710:	20000ff4 	.word	0x20000ff4
    1714:	20006760 	.word	0x20006760
    1718:	2000114c 	.word	0x2000114c
    171c:	2000474c 	.word	0x2000474c
    1720:	200010fc 	.word	0x200010fc
    1724:	20003730 	.word	0x20003730
    1728:	20005758 	.word	0x20005758
    172c:	20002268 	.word	0x20002268

00001730 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    1730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1734:	b093      	sub	sp, #76	; 0x4c
    1736:	af02      	add	r7, sp, #8
    1738:	4605      	mov	r5, r0
    173a:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    173c:	f600 73e8 	addw	r3, r0, #4072	; 0xfe8
    1740:	60bb      	str	r3, [r7, #8]
    1742:	4618      	mov	r0, r3
    1744:	4b5e      	ldr	r3, [pc, #376]	; (18c0 <grid_port_process_inbound+0x190>)
    1746:	4798      	blx	r3
	
	if (!packet_size){
    1748:	b920      	cbnz	r0, 1754 <grid_port_process_inbound+0x24>
    174a:	2000      	movs	r0, #0
		}	

		
	}
		
}
    174c:	3744      	adds	r7, #68	; 0x44
    174e:	46bd      	mov	sp, r7
    1750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1754:	4680      	mov	r8, r0
	}else{
    1756:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    175a:	4b5a      	ldr	r3, [pc, #360]	; (18c4 <grid_port_process_inbound+0x194>)
    175c:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    175e:	4b5a      	ldr	r3, [pc, #360]	; (18c8 <grid_port_process_inbound+0x198>)
    1760:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    1762:	4b5a      	ldr	r3, [pc, #360]	; (18cc <grid_port_process_inbound+0x19c>)
    1764:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    1766:	4b5a      	ldr	r3, [pc, #360]	; (18d0 <grid_port_process_inbound+0x1a0>)
    1768:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    176a:	4b5a      	ldr	r3, [pc, #360]	; (18d4 <grid_port_process_inbound+0x1a4>)
    176c:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    176e:	4b5a      	ldr	r3, [pc, #360]	; (18d8 <grid_port_process_inbound+0x1a8>)
    1770:	627b      	str	r3, [r7, #36]	; 0x24
    1772:	f107 0310 	add.w	r3, r7, #16
    1776:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    177a:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    177c:	f241 0107 	movw	r1, #4103	; 0x1007
    1780:	e001      	b.n	1786 <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    1782:	4283      	cmp	r3, r0
    1784:	d00d      	beq.n	17a2 <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    1786:	f853 2b04 	ldr.w	r2, [r3], #4
    178a:	5c56      	ldrb	r6, [r2, r1]
    178c:	2e00      	cmp	r6, #0
    178e:	d0f8      	beq.n	1782 <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    1790:	f107 0640 	add.w	r6, r7, #64	; 0x40
    1794:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    1798:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    179c:	3401      	adds	r4, #1
    179e:	b2e4      	uxtb	r4, r4
    17a0:	e7ef      	b.n	1782 <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    17a2:	2c00      	cmp	r4, #0
    17a4:	d079      	beq.n	189a <grid_port_process_inbound+0x16a>
    17a6:	f107 0928 	add.w	r9, r7, #40	; 0x28
    17aa:	1e66      	subs	r6, r4, #1
    17ac:	b2f6      	uxtb	r6, r6
    17ae:	3601      	adds	r6, #1
    17b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    17b4:	f8df b140 	ldr.w	fp, [pc, #320]	; 18f8 <grid_port_process_inbound+0x1c8>
    17b8:	f8c7 900c 	str.w	r9, [r7, #12]
    17bc:	e007      	b.n	17ce <grid_port_process_inbound+0x9e>
    17be:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    17c2:	47d8      	blx	fp
    17c4:	4580      	cmp	r8, r0
    17c6:	d80c      	bhi.n	17e2 <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    17c8:	68fb      	ldr	r3, [r7, #12]
    17ca:	42b3      	cmp	r3, r6
    17cc:	d016      	beq.n	17fc <grid_port_process_inbound+0xcc>
			if (port_array[i] != por || loopback){
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	f853 0b04 	ldr.w	r0, [r3], #4
    17d4:	60fb      	str	r3, [r7, #12]
    17d6:	4285      	cmp	r5, r0
    17d8:	d1f1      	bne.n	17be <grid_port_process_inbound+0x8e>
    17da:	f1ba 0f00 	cmp.w	sl, #0
    17de:	d0f3      	beq.n	17c8 <grid_port_process_inbound+0x98>
    17e0:	e7ed      	b.n	17be <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    17e2:	23c8      	movs	r3, #200	; 0xc8
    17e4:	9301      	str	r3, [sp, #4]
    17e6:	2302      	movs	r3, #2
    17e8:	9300      	str	r3, [sp, #0]
    17ea:	2300      	movs	r3, #0
    17ec:	2264      	movs	r2, #100	; 0x64
    17ee:	4611      	mov	r1, r2
    17f0:	483a      	ldr	r0, [pc, #232]	; (18dc <grid_port_process_inbound+0x1ac>)
    17f2:	4c3b      	ldr	r4, [pc, #236]	; (18e0 <grid_port_process_inbound+0x1b0>)
    17f4:	47a0      	blx	r4
    17f6:	f8d7 d004 	ldr.w	sp, [r7, #4]
    17fa:	e7a6      	b.n	174a <grid_port_process_inbound+0x1a>
    17fc:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17fe:	68b8      	ldr	r0, [r7, #8]
    1800:	4b38      	ldr	r3, [pc, #224]	; (18e4 <grid_port_process_inbound+0x1b4>)
    1802:	4798      	blx	r3
    1804:	4580      	cmp	r8, r0
    1806:	d000      	beq.n	180a <grid_port_process_inbound+0xda>
    1808:	e7fe      	b.n	1808 <grid_port_process_inbound+0xd8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    180a:	4e37      	ldr	r6, [pc, #220]	; (18e8 <grid_port_process_inbound+0x1b8>)
    180c:	e004      	b.n	1818 <grid_port_process_inbound+0xe8>
			if (port_array[i] != por || loopback){
    180e:	f1ba 0f00 	cmp.w	sl, #0
    1812:	d105      	bne.n	1820 <grid_port_process_inbound+0xf0>
		for (uint8_t i=0; i<port_count; i++)
    1814:	45d9      	cmp	r9, fp
    1816:	d045      	beq.n	18a4 <grid_port_process_inbound+0x174>
			if (port_array[i] != por || loopback){
    1818:	f859 0b04 	ldr.w	r0, [r9], #4
    181c:	4285      	cmp	r5, r0
    181e:	d0f6      	beq.n	180e <grid_port_process_inbound+0xde>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1820:	4641      	mov	r1, r8
    1822:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1826:	47b0      	blx	r6
    1828:	e7f4      	b.n	1814 <grid_port_process_inbound+0xe4>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    182a:	6879      	ldr	r1, [r7, #4]
    182c:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1830:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	42b3      	cmp	r3, r6
    1836:	d007      	beq.n	1848 <grid_port_process_inbound+0x118>
				if (port_array[i] != por || loopback){
    1838:	f856 0b04 	ldr.w	r0, [r6], #4
    183c:	4285      	cmp	r5, r0
    183e:	d1f4      	bne.n	182a <grid_port_process_inbound+0xfa>
    1840:	f1ba 0f00 	cmp.w	sl, #0
    1844:	d0f5      	beq.n	1832 <grid_port_process_inbound+0x102>
    1846:	e7f0      	b.n	182a <grid_port_process_inbound+0xfa>
    1848:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    184c:	fa1f f38b 	uxth.w	r3, fp
    1850:	4543      	cmp	r3, r8
    1852:	d208      	bcs.n	1866 <grid_port_process_inbound+0x136>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1854:	68b8      	ldr	r0, [r7, #8]
    1856:	4b25      	ldr	r3, [pc, #148]	; (18ec <grid_port_process_inbound+0x1bc>)
    1858:	4798      	blx	r3
    185a:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    185c:	2c00      	cmp	r4, #0
    185e:	d0f3      	beq.n	1848 <grid_port_process_inbound+0x118>
    1860:	f107 0628 	add.w	r6, r7, #40	; 0x28
    1864:	e7e8      	b.n	1838 <grid_port_process_inbound+0x108>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    1866:	68b8      	ldr	r0, [r7, #8]
    1868:	4b21      	ldr	r3, [pc, #132]	; (18f0 <grid_port_process_inbound+0x1c0>)
    186a:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    186c:	2c00      	cmp	r4, #0
    186e:	f43f af6d 	beq.w	174c <grid_port_process_inbound+0x1c>
    1872:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1876:	4e1f      	ldr	r6, [pc, #124]	; (18f4 <grid_port_process_inbound+0x1c4>)
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	4698      	mov	r8, r3
    187c:	e005      	b.n	188a <grid_port_process_inbound+0x15a>
			if (port_array[i] != por || loopback){
    187e:	f1ba 0f00 	cmp.w	sl, #0
    1882:	d106      	bne.n	1892 <grid_port_process_inbound+0x162>
		for (uint8_t i=0; i<port_count; i++)
    1884:	45a0      	cmp	r8, r4
    1886:	f43f af61 	beq.w	174c <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    188a:	f854 0b04 	ldr.w	r0, [r4], #4
    188e:	4285      	cmp	r5, r0
    1890:	d0f5      	beq.n	187e <grid_port_process_inbound+0x14e>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1892:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1896:	47b0      	blx	r6
    1898:	e7f4      	b.n	1884 <grid_port_process_inbound+0x154>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    189a:	68b8      	ldr	r0, [r7, #8]
    189c:	4b11      	ldr	r3, [pc, #68]	; (18e4 <grid_port_process_inbound+0x1b4>)
    189e:	4798      	blx	r3
    18a0:	4540      	cmp	r0, r8
    18a2:	d1b1      	bne.n	1808 <grid_port_process_inbound+0xd8>
    18a4:	1e63      	subs	r3, r4, #1
    18a6:	b2db      	uxtb	r3, r3
    18a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
    18ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    18b0:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    18b2:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    18b6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 18fc <grid_port_process_inbound+0x1cc>
    18ba:	60fb      	str	r3, [r7, #12]
    18bc:	e7ca      	b.n	1854 <grid_port_process_inbound+0x124>
    18be:	bf00      	nop
    18c0:	00001401 	.word	0x00001401
    18c4:	2000121c 	.word	0x2000121c
    18c8:	20006760 	.word	0x20006760
    18cc:	2000474c 	.word	0x2000474c
    18d0:	20003730 	.word	0x20003730
    18d4:	20002268 	.word	0x20002268
    18d8:	20005758 	.word	0x20005758
    18dc:	20003280 	.word	0x20003280
    18e0:	00003b95 	.word	0x00003b95
    18e4:	00001473 	.word	0x00001473
    18e8:	000013a5 	.word	0x000013a5
    18ec:	000014fd 	.word	0x000014fd
    18f0:	00001525 	.word	0x00001525
    18f4:	000013f1 	.word	0x000013f1
    18f8:	00001391 	.word	0x00001391
    18fc:	000013d5 	.word	0x000013d5

00001900 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1904:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    1908:	af06      	add	r7, sp, #24
    190a:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    190c:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1910:	4630      	mov	r0, r6
    1912:	4b8a      	ldr	r3, [pc, #552]	; (1b3c <grid_port_process_outbound_usb+0x23c>)
    1914:	4798      	blx	r3
	
	if (!length){		
    1916:	2800      	cmp	r0, #0
    1918:	f000 8227 	beq.w	1d6a <grid_port_process_outbound_usb+0x46a>
    191c:	4604      	mov	r4, r0
    191e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1920:	4613      	mov	r3, r2
    1922:	332f      	adds	r3, #47	; 0x2f
    1924:	f202 71ff 	addw	r1, r2, #2047	; 0x7ff


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    1928:	2200      	movs	r2, #0
    192a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    192e:	428b      	cmp	r3, r1
    1930:	d1fb      	bne.n	192a <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    1932:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1936:	2100      	movs	r1, #0
    1938:	f107 0034 	add.w	r0, r7, #52	; 0x34
    193c:	4b80      	ldr	r3, [pc, #512]	; (1b40 <grid_port_process_outbound_usb+0x240>)
    193e:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    1940:	4630      	mov	r0, r6
    1942:	4b80      	ldr	r3, [pc, #512]	; (1b44 <grid_port_process_outbound_usb+0x244>)
    1944:	4798      	blx	r3
    1946:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1948:	f8df 9238 	ldr.w	r9, [pc, #568]	; 1b84 <grid_port_process_outbound_usb+0x284>
    194c:	f107 0834 	add.w	r8, r7, #52	; 0x34
    1950:	4630      	mov	r0, r6
    1952:	47c8      	blx	r9
    1954:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1958:	3501      	adds	r5, #1
    195a:	b2ed      	uxtb	r5, r5
    195c:	b2ab      	uxth	r3, r5
    195e:	429c      	cmp	r4, r3
    1960:	d8f6      	bhi.n	1950 <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1962:	4630      	mov	r0, r6
    1964:	4b78      	ldr	r3, [pc, #480]	; (1b48 <grid_port_process_outbound_usb+0x248>)
    1966:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    1968:	f107 0034 	add.w	r0, r7, #52	; 0x34
    196c:	4b77      	ldr	r3, [pc, #476]	; (1b4c <grid_port_process_outbound_usb+0x24c>)
    196e:	4798      	blx	r3
    1970:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1972:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1976:	4b76      	ldr	r3, [pc, #472]	; (1b50 <grid_port_process_outbound_usb+0x250>)
    1978:	4798      	blx	r3
    197a:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    197c:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1980:	4b74      	ldr	r3, [pc, #464]	; (1b54 <grid_port_process_outbound_usb+0x254>)
    1982:	4798      	blx	r3
    1984:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    1986:	f107 0034 	add.w	r0, r7, #52	; 0x34
    198a:	4b73      	ldr	r3, [pc, #460]	; (1b58 <grid_port_process_outbound_usb+0x258>)
    198c:	4798      	blx	r3
    198e:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    1990:	2500      	movs	r5, #0
    1992:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1996:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    199a:	fa4f f388 	sxtb.w	r3, r8
    199e:	627b      	str	r3, [r7, #36]	; 0x24
    19a0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    19a4:	005b      	lsls	r3, r3, #1
    19a6:	1aea      	subs	r2, r5, r3
    19a8:	f003 0307 	and.w	r3, r3, #7
    19ac:	4619      	mov	r1, r3
    19ae:	f002 0307 	and.w	r3, r2, #7
    19b2:	460a      	mov	r2, r1
    19b4:	bf58      	it	pl
    19b6:	425a      	negpl	r2, r3
    19b8:	60fa      	str	r2, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    19ba:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    19bc:	b273      	sxtb	r3, r6
    19be:	623b      	str	r3, [r7, #32]
    19c0:	011b      	lsls	r3, r3, #4
    19c2:	60bb      	str	r3, [r7, #8]
    19c4:	1e63      	subs	r3, r4, #1
    19c6:	b29b      	uxth	r3, r3
    19c8:	f103 0901 	add.w	r9, r3, #1
    19cc:	46ab      	mov	fp, r5
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
		
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    19ce:	464b      	mov	r3, r9
    19d0:	46d9      	mov	r9, fp
    19d2:	469a      	mov	sl, r3
    19d4:	e006      	b.n	19e4 <grid_port_process_outbound_usb+0xe4>
				current_start = i;
    19d6:	fa5f f58b 	uxtb.w	r5, fp
    19da:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    19de:	45d3      	cmp	fp, sl
    19e0:	f000 81be 	beq.w	1d60 <grid_port_process_outbound_usb+0x460>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    19e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19e8:	f81b 3003 	ldrb.w	r3, [fp, r3]
    19ec:	2b02      	cmp	r3, #2
    19ee:	d0f2      	beq.n	19d6 <grid_port_process_outbound_usb+0xd6>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    19f0:	2b03      	cmp	r3, #3
    19f2:	d1f2      	bne.n	19da <grid_port_process_outbound_usb+0xda>
    19f4:	2d00      	cmp	r5, #0
    19f6:	d0f0      	beq.n	19da <grid_port_process_outbound_usb+0xda>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    19f8:	462c      	mov	r4, r5
    19fa:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19fe:	2102      	movs	r1, #2
    1a00:	f507 730a 	add.w	r3, r7, #552	; 0x228
    1a04:	1958      	adds	r0, r3, r5
    1a06:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1a0a:	4b54      	ldr	r3, [pc, #336]	; (1b5c <grid_port_process_outbound_usb+0x25c>)
    1a0c:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1a0e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1a12:	d019      	beq.n	1a48 <grid_port_process_outbound_usb+0x148>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1a14:	2e01      	cmp	r6, #1
    1a16:	f000 80b7 	beq.w	1b88 <grid_port_process_outbound_usb+0x288>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1a1a:	2e04      	cmp	r6, #4
    1a1c:	f000 812d 	beq.w	1c7a <grid_port_process_outbound_usb+0x37a>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1a20:	2e02      	cmp	r6, #2
    1a22:	f000 819b 	beq.w	1d5c <grid_port_process_outbound_usb+0x45c>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1a26:	f109 0430 	add.w	r4, r9, #48	; 0x30
    1a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a2c:	441c      	add	r4, r3
    1a2e:	b2c2      	uxtb	r2, r0
    1a30:	494b      	ldr	r1, [pc, #300]	; (1b60 <grid_port_process_outbound_usb+0x260>)
    1a32:	4620      	mov	r0, r4
    1a34:	4b4b      	ldr	r3, [pc, #300]	; (1b64 <grid_port_process_outbound_usb+0x264>)
    1a36:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a38:	4620      	mov	r0, r4
    1a3a:	4b4b      	ldr	r3, [pc, #300]	; (1b68 <grid_port_process_outbound_usb+0x268>)
    1a3c:	4798      	blx	r3
    1a3e:	4481      	add	r9, r0
    1a40:	fa5f f989 	uxtb.w	r9, r9
				}
				
				current_start = 0;
    1a44:	2500      	movs	r5, #0
    1a46:	e7c8      	b.n	19da <grid_port_process_outbound_usb+0xda>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a48:	1ce8      	adds	r0, r5, #3
    1a4a:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a4e:	2102      	movs	r1, #2
    1a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a54:	4418      	add	r0, r3
    1a56:	4b41      	ldr	r3, [pc, #260]	; (1b5c <grid_port_process_outbound_usb+0x25c>)
    1a58:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a5a:	1d68      	adds	r0, r5, #5
    1a5c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a60:	2102      	movs	r1, #2
    1a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a66:	4418      	add	r0, r3
    1a68:	4b3c      	ldr	r3, [pc, #240]	; (1b5c <grid_port_process_outbound_usb+0x25c>)
    1a6a:	4798      	blx	r3
    1a6c:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a70:	1de8      	adds	r0, r5, #7
    1a72:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a76:	2102      	movs	r1, #2
    1a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a7c:	4418      	add	r0, r3
    1a7e:	4b37      	ldr	r3, [pc, #220]	; (1b5c <grid_port_process_outbound_usb+0x25c>)
    1a80:	4798      	blx	r3
    1a82:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a84:	f105 0009 	add.w	r0, r5, #9
    1a88:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a8c:	2102      	movs	r1, #2
    1a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a92:	4418      	add	r0, r3
    1a94:	4b31      	ldr	r3, [pc, #196]	; (1b5c <grid_port_process_outbound_usb+0x25c>)
    1a96:	4798      	blx	r3
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1a98:	4b34      	ldr	r3, [pc, #208]	; (1b6c <grid_port_process_outbound_usb+0x26c>)
    1a9a:	7a59      	ldrb	r1, [r3, #9]
    1a9c:	68fb      	ldr	r3, [r7, #12]
    1a9e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1aa2:	424b      	negs	r3, r1
    1aa4:	f001 020f 	and.w	r2, r1, #15
    1aa8:	f003 030f 	and.w	r3, r3, #15
    1aac:	bf58      	it	pl
    1aae:	425a      	negpl	r2, r3
    1ab0:	617a      	str	r2, [r7, #20]
    1ab2:	7d3b      	ldrb	r3, [r7, #20]
    1ab4:	4619      	mov	r1, r3
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1ab6:	b2e4      	uxtb	r4, r4
    1ab8:	34e0      	adds	r4, #224	; 0xe0
    1aba:	68bb      	ldr	r3, [r7, #8]
    1abc:	441c      	add	r4, r3
    1abe:	4b2c      	ldr	r3, [pc, #176]	; (1b70 <grid_port_process_outbound_usb+0x270>)
    1ac0:	fb83 3204 	smull	r3, r2, r3, r4
    1ac4:	17e3      	asrs	r3, r4, #31
    1ac6:	ebc3 1322 	rsb	r3, r3, r2, asr #4
    1aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1ace:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    1ad2:	b2e4      	uxtb	r4, r4
    1ad4:	b2c3      	uxtb	r3, r0
					printf("{\"type\":\"MIDI\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, midi_channel,	midi_command, midi_param1, midi_param2);
    1ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    1ad8:	9302      	str	r3, [sp, #8]
    1ada:	9401      	str	r4, [sp, #4]
    1adc:	f8cd 8000 	str.w	r8, [sp]
    1ae0:	6139      	str	r1, [r7, #16]
    1ae2:	460b      	mov	r3, r1
    1ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ae6:	6a39      	ldr	r1, [r7, #32]
    1ae8:	4822      	ldr	r0, [pc, #136]	; (1b74 <grid_port_process_outbound_usb+0x274>)
    1aea:	4d23      	ldr	r5, [pc, #140]	; (1b78 <grid_port_process_outbound_usb+0x278>)
    1aec:	47a8      	blx	r5
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1aee:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1af4:	4428      	add	r0, r5
    1af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1af8:	9205      	str	r2, [sp, #20]
    1afa:	9404      	str	r4, [sp, #16]
    1afc:	f8cd 800c 	str.w	r8, [sp, #12]
    1b00:	6939      	ldr	r1, [r7, #16]
    1b02:	9102      	str	r1, [sp, #8]
    1b04:	69b9      	ldr	r1, [r7, #24]
    1b06:	9101      	str	r1, [sp, #4]
    1b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1b0a:	9100      	str	r1, [sp, #0]
    1b0c:	6a3b      	ldr	r3, [r7, #32]
    1b0e:	69fa      	ldr	r2, [r7, #28]
    1b10:	491a      	ldr	r1, [pc, #104]	; (1b7c <grid_port_process_outbound_usb+0x27c>)
    1b12:	6138      	str	r0, [r7, #16]
    1b14:	4d13      	ldr	r5, [pc, #76]	; (1b64 <grid_port_process_outbound_usb+0x264>)
    1b16:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1b18:	6938      	ldr	r0, [r7, #16]
    1b1a:	4b13      	ldr	r3, [pc, #76]	; (1b68 <grid_port_process_outbound_usb+0x268>)
    1b1c:	4798      	blx	r3
    1b1e:	4481      	add	r9, r0
    1b20:	fa5f f989 	uxtb.w	r9, r9
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1b24:	6979      	ldr	r1, [r7, #20]
    1b26:	ea48 0101 	orr.w	r1, r8, r1
    1b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b2c:	4622      	mov	r2, r4
    1b2e:	b2c9      	uxtb	r1, r1
    1b30:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1b34:	4c12      	ldr	r4, [pc, #72]	; (1b80 <grid_port_process_outbound_usb+0x280>)
    1b36:	47a0      	blx	r4
				current_start = 0;
    1b38:	4635      	mov	r5, r6
    1b3a:	e74e      	b.n	19da <grid_port_process_outbound_usb+0xda>
    1b3c:	00001401 	.word	0x00001401
    1b40:	0000c547 	.word	0x0000c547
    1b44:	00001473 	.word	0x00001473
    1b48:	00001525 	.word	0x00001525
    1b4c:	00003f4d 	.word	0x00003f4d
    1b50:	00003f6d 	.word	0x00003f6d
    1b54:	00003f8d 	.word	0x00003f8d
    1b58:	00003fad 	.word	0x00003fad
    1b5c:	00003be9 	.word	0x00003be9
    1b60:	0000dbd8 	.word	0x0000dbd8
    1b64:	0000c935 	.word	0x0000c935
    1b68:	0000c97d 	.word	0x0000c97d
    1b6c:	20003280 	.word	0x20003280
    1b70:	2aaaaaab 	.word	0x2aaaaaab
    1b74:	0000daa8 	.word	0x0000daa8
    1b78:	0000c6b1 	.word	0x0000c6b1
    1b7c:	0000dae8 	.word	0x0000dae8
    1b80:	0000b379 	.word	0x0000b379
    1b84:	000014fd 	.word	0x000014fd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1b88:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1b8c:	fa5f f38b 	uxtb.w	r3, fp
    1b90:	1b5b      	subs	r3, r3, r5
    1b92:	1eda      	subs	r2, r3, #3
    1b94:	4b77      	ldr	r3, [pc, #476]	; (1d74 <grid_port_process_outbound_usb+0x474>)
    1b96:	fb83 1302 	smull	r1, r3, r3, r2
    1b9a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1b9e:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1ba0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1ba4:	3207      	adds	r2, #7
    1ba6:	f022 0207 	bic.w	r2, r2, #7
    1baa:	ebad 0d02 	sub.w	sp, sp, r2
    1bae:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d05e      	beq.n	1c72 <grid_port_process_outbound_usb+0x372>
    1bb4:	3403      	adds	r4, #3
    1bb6:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1bba:	440c      	add	r4, r1
    1bbc:	4690      	mov	r8, r2
    1bbe:	3b01      	subs	r3, #1
    1bc0:	b2db      	uxtb	r3, r3
    1bc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1bc6:	3509      	adds	r5, #9
    1bc8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1bcc:	18cb      	adds	r3, r1, r3
    1bce:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1bd0:	f8c7 b004 	str.w	fp, [r7, #4]
    1bd4:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1bd8:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bdc:	2102      	movs	r1, #2
    1bde:	4620      	mov	r0, r4
    1be0:	4b65      	ldr	r3, [pc, #404]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1be2:	4798      	blx	r3
    1be4:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1be6:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bea:	2102      	movs	r1, #2
    1bec:	1860      	adds	r0, r4, r1
    1bee:	4b62      	ldr	r3, [pc, #392]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1bf0:	4798      	blx	r3
    1bf2:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bf4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bf8:	2102      	movs	r1, #2
    1bfa:	1d20      	adds	r0, r4, #4
    1bfc:	4b5e      	ldr	r3, [pc, #376]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1bfe:	4798      	blx	r3
    1c00:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1c02:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    1c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c08:	449a      	add	sl, r3
    1c0a:	4b5c      	ldr	r3, [pc, #368]	; (1d7c <grid_port_process_outbound_usb+0x47c>)
    1c0c:	4798      	blx	r3
    1c0e:	9005      	str	r0, [sp, #20]
    1c10:	b2eb      	uxtb	r3, r5
    1c12:	62bb      	str	r3, [r7, #40]	; 0x28
    1c14:	9304      	str	r3, [sp, #16]
    1c16:	b2f6      	uxtb	r6, r6
    1c18:	9603      	str	r6, [sp, #12]
    1c1a:	fa5f f38b 	uxtb.w	r3, fp
    1c1e:	9302      	str	r3, [sp, #8]
    1c20:	69bb      	ldr	r3, [r7, #24]
    1c22:	9301      	str	r3, [sp, #4]
    1c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c26:	9300      	str	r3, [sp, #0]
    1c28:	6a3b      	ldr	r3, [r7, #32]
    1c2a:	69fa      	ldr	r2, [r7, #28]
    1c2c:	4954      	ldr	r1, [pc, #336]	; (1d80 <grid_port_process_outbound_usb+0x480>)
    1c2e:	4650      	mov	r0, sl
    1c30:	4d54      	ldr	r5, [pc, #336]	; (1d84 <grid_port_process_outbound_usb+0x484>)
    1c32:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1c34:	4650      	mov	r0, sl
    1c36:	4b54      	ldr	r3, [pc, #336]	; (1d88 <grid_port_process_outbound_usb+0x488>)
    1c38:	4798      	blx	r3
    1c3a:	4481      	add	r9, r0
    1c3c:	fa5f f989 	uxtb.w	r9, r9
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1c40:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1c44:	2e82      	cmp	r6, #130	; 0x82
    1c46:	bf14      	ite	ne
    1c48:	2600      	movne	r6, #0
    1c4a:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1c4c:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c52:	2b80      	cmp	r3, #128	; 0x80
    1c54:	bf14      	ite	ne
    1c56:	2500      	movne	r5, #0
    1c58:	2501      	moveq	r5, #1
    1c5a:	f888 5002 	strb.w	r5, [r8, #2]
    1c5e:	3406      	adds	r4, #6
    1c60:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	429c      	cmp	r4, r3
    1c68:	d1b6      	bne.n	1bd8 <grid_port_process_outbound_usb+0x2d8>
    1c6a:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1c6e:	f8d7 a000 	ldr.w	sl, [r7]
    1c72:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1c76:	2500      	movs	r5, #0
    1c78:	e6af      	b.n	19da <grid_port_process_outbound_usb+0xda>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c7a:	1ce8      	adds	r0, r5, #3
    1c7c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c80:	2102      	movs	r1, #2
    1c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c86:	4418      	add	r0, r3
    1c88:	4b3b      	ldr	r3, [pc, #236]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1c8a:	4798      	blx	r3
    1c8c:	62b8      	str	r0, [r7, #40]	; 0x28
    1c8e:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c90:	1d60      	adds	r0, r4, #5
    1c92:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c96:	2102      	movs	r1, #2
    1c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c9c:	4418      	add	r0, r3
    1c9e:	4b36      	ldr	r3, [pc, #216]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1ca0:	4798      	blx	r3
    1ca2:	4680      	mov	r8, r0
    1ca4:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1ca6:	1de0      	adds	r0, r4, #7
    1ca8:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1cac:	2102      	movs	r1, #2
    1cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1cb2:	4418      	add	r0, r3
    1cb4:	4b30      	ldr	r3, [pc, #192]	; (1d78 <grid_port_process_outbound_usb+0x478>)
    1cb6:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1cb8:	2d64      	cmp	r5, #100	; 0x64
    1cba:	d003      	beq.n	1cc4 <grid_port_process_outbound_usb+0x3c4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1cbc:	2d66      	cmp	r5, #102	; 0x66
    1cbe:	d025      	beq.n	1d0c <grid_port_process_outbound_usb+0x40c>
				current_start = 0;
    1cc0:	2500      	movs	r5, #0
    1cc2:	e68a      	b.n	19da <grid_port_process_outbound_usb+0xda>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1cc4:	2e65      	cmp	r6, #101	; 0x65
    1cc6:	d001      	beq.n	1ccc <grid_port_process_outbound_usb+0x3cc>
				current_start = 0;
    1cc8:	2500      	movs	r5, #0
    1cca:	e686      	b.n	19da <grid_port_process_outbound_usb+0xda>
    1ccc:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1cce:	4621      	mov	r1, r4
    1cd0:	482e      	ldr	r0, [pc, #184]	; (1d8c <grid_port_process_outbound_usb+0x48c>)
    1cd2:	4b2f      	ldr	r3, [pc, #188]	; (1d90 <grid_port_process_outbound_usb+0x490>)
    1cd4:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1cd6:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cdc:	441d      	add	r5, r3
    1cde:	9404      	str	r4, [sp, #16]
    1ce0:	9603      	str	r6, [sp, #12]
    1ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1ce6:	9302      	str	r3, [sp, #8]
    1ce8:	69bb      	ldr	r3, [r7, #24]
    1cea:	9301      	str	r3, [sp, #4]
    1cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cee:	9300      	str	r3, [sp, #0]
    1cf0:	6a3b      	ldr	r3, [r7, #32]
    1cf2:	69fa      	ldr	r2, [r7, #28]
    1cf4:	4927      	ldr	r1, [pc, #156]	; (1d94 <grid_port_process_outbound_usb+0x494>)
    1cf6:	4628      	mov	r0, r5
    1cf8:	4c22      	ldr	r4, [pc, #136]	; (1d84 <grid_port_process_outbound_usb+0x484>)
    1cfa:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1cfc:	4628      	mov	r0, r5
    1cfe:	4b22      	ldr	r3, [pc, #136]	; (1d88 <grid_port_process_outbound_usb+0x488>)
    1d00:	4798      	blx	r3
    1d02:	4481      	add	r9, r0
    1d04:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1d08:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1d0a:	e666      	b.n	19da <grid_port_process_outbound_usb+0xda>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1d0c:	2e67      	cmp	r6, #103	; 0x67
    1d0e:	d001      	beq.n	1d14 <grid_port_process_outbound_usb+0x414>
				current_start = 0;
    1d10:	2500      	movs	r5, #0
    1d12:	e662      	b.n	19da <grid_port_process_outbound_usb+0xda>
    1d14:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1d16:	462b      	mov	r3, r5
    1d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d1a:	6a39      	ldr	r1, [r7, #32]
    1d1c:	481e      	ldr	r0, [pc, #120]	; (1d98 <grid_port_process_outbound_usb+0x498>)
    1d1e:	4c1f      	ldr	r4, [pc, #124]	; (1d9c <grid_port_process_outbound_usb+0x49c>)
    1d20:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1d22:	f109 0630 	add.w	r6, r9, #48	; 0x30
    1d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d28:	4416      	add	r6, r2
    1d2a:	9504      	str	r5, [sp, #16]
    1d2c:	fa5f f388 	uxtb.w	r3, r8
    1d30:	9303      	str	r3, [sp, #12]
    1d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1d36:	9302      	str	r3, [sp, #8]
    1d38:	69ba      	ldr	r2, [r7, #24]
    1d3a:	9201      	str	r2, [sp, #4]
    1d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d3e:	9200      	str	r2, [sp, #0]
    1d40:	6a3b      	ldr	r3, [r7, #32]
    1d42:	69fa      	ldr	r2, [r7, #28]
    1d44:	4913      	ldr	r1, [pc, #76]	; (1d94 <grid_port_process_outbound_usb+0x494>)
    1d46:	4630      	mov	r0, r6
    1d48:	4c0e      	ldr	r4, [pc, #56]	; (1d84 <grid_port_process_outbound_usb+0x484>)
    1d4a:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1d4c:	4630      	mov	r0, r6
    1d4e:	4b0e      	ldr	r3, [pc, #56]	; (1d88 <grid_port_process_outbound_usb+0x488>)
    1d50:	4798      	blx	r3
    1d52:	4481      	add	r9, r0
    1d54:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1d58:	2500      	movs	r5, #0
    1d5a:	e63e      	b.n	19da <grid_port_process_outbound_usb+0xda>
    1d5c:	2500      	movs	r5, #0
    1d5e:	e63c      	b.n	19da <grid_port_process_outbound_usb+0xda>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1d60:	4649      	mov	r1, r9
    1d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1d64:	3030      	adds	r0, #48	; 0x30
    1d66:	4b0e      	ldr	r3, [pc, #56]	; (1da0 <grid_port_process_outbound_usb+0x4a0>)
    1d68:	4798      	blx	r3
				
		
	}
	
	
}
    1d6a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1d6e:	46bd      	mov	sp, r7
    1d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d74:	2aaaaaab 	.word	0x2aaaaaab
    1d78:	00003be9 	.word	0x00003be9
    1d7c:	00003c61 	.word	0x00003c61
    1d80:	0000db30 	.word	0x0000db30
    1d84:	0000c935 	.word	0x0000c935
    1d88:	0000c97d 	.word	0x0000c97d
    1d8c:	20003280 	.word	0x20003280
    1d90:	00003d51 	.word	0x00003d51
    1d94:	0000db78 	.word	0x0000db78
    1d98:	0000dba4 	.word	0x0000dba4
    1d9c:	0000c6b1 	.word	0x0000c6b1
    1da0:	0000abb5 	.word	0x0000abb5

00001da4 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da8:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1dac:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1db0:	4630      	mov	r0, r6
    1db2:	4b48      	ldr	r3, [pc, #288]	; (1ed4 <grid_port_process_outbound_ui+0x130>)
    1db4:	4798      	blx	r3
	
	if (!length){
    1db6:	b918      	cbnz	r0, 1dc0 <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1db8:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dc0:	4605      	mov	r5, r0
		uint8_t temp[500] = {0};
    1dc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1dc6:	2100      	movs	r1, #0
    1dc8:	a805      	add	r0, sp, #20
    1dca:	4b43      	ldr	r3, [pc, #268]	; (1ed8 <grid_port_process_outbound_ui+0x134>)
    1dcc:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    1dce:	4630      	mov	r0, r6
    1dd0:	4b42      	ldr	r3, [pc, #264]	; (1edc <grid_port_process_outbound_ui+0x138>)
    1dd2:	4798      	blx	r3
    1dd4:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1dd6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1efc <grid_port_process_outbound_ui+0x158>
    1dda:	af05      	add	r7, sp, #20
    1ddc:	4630      	mov	r0, r6
    1dde:	47c0      	blx	r8
    1de0:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1de2:	3401      	adds	r4, #1
    1de4:	b2e4      	uxtb	r4, r4
    1de6:	b2a3      	uxth	r3, r4
    1de8:	429d      	cmp	r5, r3
    1dea:	d8f7      	bhi.n	1ddc <grid_port_process_outbound_ui+0x38>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1dec:	4630      	mov	r0, r6
    1dee:	4b3c      	ldr	r3, [pc, #240]	; (1ee0 <grid_port_process_outbound_ui+0x13c>)
    1df0:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1df2:	ac05      	add	r4, sp, #20
    1df4:	4620      	mov	r0, r4
    1df6:	4b3b      	ldr	r3, [pc, #236]	; (1ee4 <grid_port_process_outbound_ui+0x140>)
    1df8:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1dfa:	4620      	mov	r0, r4
    1dfc:	4b3a      	ldr	r3, [pc, #232]	; (1ee8 <grid_port_process_outbound_ui+0x144>)
    1dfe:	4798      	blx	r3
    1e00:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1e02:	4620      	mov	r0, r4
    1e04:	4b39      	ldr	r3, [pc, #228]	; (1eec <grid_port_process_outbound_ui+0x148>)
    1e06:	4798      	blx	r3
    1e08:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1e0a:	4620      	mov	r0, r4
    1e0c:	4b38      	ldr	r3, [pc, #224]	; (1ef0 <grid_port_process_outbound_ui+0x14c>)
    1e0e:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1e10:	2000      	movs	r0, #0
    1e12:	f88d 0013 	strb.w	r0, [sp, #19]
    1e16:	4626      	mov	r6, r4
    1e18:	3d01      	subs	r5, #1
    1e1a:	b2ad      	uxth	r5, r5
    1e1c:	3501      	adds	r5, #1
    1e1e:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1e20:	4f34      	ldr	r7, [pc, #208]	; (1ef4 <grid_port_process_outbound_ui+0x150>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1e22:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1f00 <grid_port_process_outbound_ui+0x15c>
    1e26:	e004      	b.n	1e32 <grid_port_process_outbound_ui+0x8e>
    1e28:	1ba0      	subs	r0, r4, r6
    1e2a:	b2c0      	uxtb	r0, r0
    1e2c:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    1e2e:	42ac      	cmp	r4, r5
    1e30:	d0c2      	beq.n	1db8 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1e32:	7823      	ldrb	r3, [r4, #0]
    1e34:	2b02      	cmp	r3, #2
    1e36:	d0f7      	beq.n	1e28 <grid_port_process_outbound_ui+0x84>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1e38:	2b03      	cmp	r3, #3
    1e3a:	d1f7      	bne.n	1e2c <grid_port_process_outbound_ui+0x88>
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d0f5      	beq.n	1e2c <grid_port_process_outbound_ui+0x88>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1e40:	4680      	mov	r8, r0
    1e42:	ab82      	add	r3, sp, #520	; 0x208
    1e44:	4418      	add	r0, r3
    1e46:	f10d 0213 	add.w	r2, sp, #19
    1e4a:	2102      	movs	r1, #2
    1e4c:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1e50:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1e52:	b2c0      	uxtb	r0, r0
    1e54:	2803      	cmp	r0, #3
    1e56:	d001      	beq.n	1e5c <grid_port_process_outbound_ui+0xb8>
				current_start = 0;
    1e58:	2000      	movs	r0, #0
    1e5a:	e7e7      	b.n	1e2c <grid_port_process_outbound_ui+0x88>
					if (dx == 0 && dy == 0){
    1e5c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    1e60:	d136      	bne.n	1ed0 <grid_port_process_outbound_ui+0x12c>
    1e62:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    1e66:	d001      	beq.n	1e6c <grid_port_process_outbound_ui+0xc8>
				current_start = 0;
    1e68:	2000      	movs	r0, #0
    1e6a:	e7df      	b.n	1e2c <grid_port_process_outbound_ui+0x88>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1e6c:	f108 0003 	add.w	r0, r8, #3
    1e70:	f10d 0213 	add.w	r2, sp, #19
    1e74:	2102      	movs	r1, #2
    1e76:	ab05      	add	r3, sp, #20
    1e78:	4418      	add	r0, r3
    1e7a:	47b8      	blx	r7
    1e7c:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1e7e:	f108 0005 	add.w	r0, r8, #5
    1e82:	f10d 0213 	add.w	r2, sp, #19
    1e86:	2102      	movs	r1, #2
    1e88:	ab05      	add	r3, sp, #20
    1e8a:	4418      	add	r0, r3
    1e8c:	47b8      	blx	r7
    1e8e:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1e90:	f108 0007 	add.w	r0, r8, #7
    1e94:	f10d 0213 	add.w	r2, sp, #19
    1e98:	2102      	movs	r1, #2
    1e9a:	ab05      	add	r3, sp, #20
    1e9c:	4418      	add	r0, r3
    1e9e:	47b8      	blx	r7
    1ea0:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1ea2:	f108 0009 	add.w	r0, r8, #9
    1ea6:	f10d 0213 	add.w	r2, sp, #19
    1eaa:	2102      	movs	r1, #2
    1eac:	ab05      	add	r3, sp, #20
    1eae:	4418      	add	r0, r3
    1eb0:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1eb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1eb6:	2a63      	cmp	r2, #99	; 0x63
    1eb8:	d001      	beq.n	1ebe <grid_port_process_outbound_ui+0x11a>
				current_start = 0;
    1eba:	2000      	movs	r0, #0
    1ebc:	e7b6      	b.n	1e2c <grid_port_process_outbound_ui+0x88>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1ebe:	b2c3      	uxtb	r3, r0
    1ec0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1ec4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1ec8:	480b      	ldr	r0, [pc, #44]	; (1ef8 <grid_port_process_outbound_ui+0x154>)
    1eca:	47d8      	blx	fp
				current_start = 0;
    1ecc:	2000      	movs	r0, #0
    1ece:	e7ad      	b.n	1e2c <grid_port_process_outbound_ui+0x88>
    1ed0:	2000      	movs	r0, #0
    1ed2:	e7ab      	b.n	1e2c <grid_port_process_outbound_ui+0x88>
    1ed4:	00001401 	.word	0x00001401
    1ed8:	0000c547 	.word	0x0000c547
    1edc:	00001473 	.word	0x00001473
    1ee0:	00001525 	.word	0x00001525
    1ee4:	00003f4d 	.word	0x00003f4d
    1ee8:	00003f6d 	.word	0x00003f6d
    1eec:	00003f8d 	.word	0x00003f8d
    1ef0:	00003fad 	.word	0x00003fad
    1ef4:	00003be9 	.word	0x00003be9
    1ef8:	200077d4 	.word	0x200077d4
    1efc:	000014fd 	.word	0x000014fd
    1f00:	00002117 	.word	0x00002117

00001f04 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1f04:	8a03      	ldrh	r3, [r0, #16]
    1f06:	b103      	cbz	r3, 1f0a <grid_port_process_outbound_usart+0x6>
    1f08:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f0e:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1f10:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1f14:	4630      	mov	r0, r6
    1f16:	4b11      	ldr	r3, [pc, #68]	; (1f5c <grid_port_process_outbound_usart+0x58>)
    1f18:	4798      	blx	r3
    1f1a:	4604      	mov	r4, r0
    1f1c:	4607      	mov	r7, r0
		
		if (!packet_size){
    1f1e:	b910      	cbnz	r0, 1f26 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1f20:	2000      	movs	r0, #0
    1f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1f26:	4630      	mov	r0, r6
    1f28:	4b0d      	ldr	r3, [pc, #52]	; (1f60 <grid_port_process_outbound_usart+0x5c>)
    1f2a:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1f2c:	822c      	strh	r4, [r5, #16]
    1f2e:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1f30:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f6c <grid_port_process_outbound_usart+0x68>
    1f34:	4630      	mov	r0, r6
    1f36:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1f38:	192b      	adds	r3, r5, r4
    1f3a:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
			for (uint8_t i = 0; i<packet_size; i++){
    1f3e:	3401      	adds	r4, #1
    1f40:	b2e4      	uxtb	r4, r4
    1f42:	42a7      	cmp	r7, r4
    1f44:	d8f6      	bhi.n	1f34 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1f46:	4630      	mov	r0, r6
    1f48:	4b06      	ldr	r3, [pc, #24]	; (1f64 <grid_port_process_outbound_usart+0x60>)
    1f4a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1f4c:	8a2a      	ldrh	r2, [r5, #16]
    1f4e:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1f52:	68a8      	ldr	r0, [r5, #8]
    1f54:	4b04      	ldr	r3, [pc, #16]	; (1f68 <grid_port_process_outbound_usart+0x64>)
    1f56:	4798      	blx	r3
			
		}
		
	}
	
}
    1f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f5c:	00001401 	.word	0x00001401
    1f60:	00001473 	.word	0x00001473
    1f64:	00001525 	.word	0x00001525
    1f68:	00004db1 	.word	0x00004db1
    1f6c:	000014fd 	.word	0x000014fd

00001f70 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1f70:	2201      	movs	r2, #1
    1f72:	4b01      	ldr	r3, [pc, #4]	; (1f78 <grid_led_hardware_transfer_complete_cb+0x8>)
    1f74:	701a      	strb	r2, [r3, #0]
    1f76:	4770      	bx	lr
    1f78:	20001218 	.word	0x20001218

00001f7c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    1f7c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1f7e:	7844      	ldrb	r4, [r0, #1]
    1f80:	428c      	cmp	r4, r1
    1f82:	d802      	bhi.n	1f8a <grid_led_set_color+0xe>
		return -1;		
    1f84:	20ff      	movs	r0, #255	; 0xff
}
    1f86:	bc30      	pop	{r4, r5}
    1f88:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1f8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f8e:	0089      	lsls	r1, r1, #2
    1f90:	4c0d      	ldr	r4, [pc, #52]	; (1fc8 <grid_led_set_color+0x4c>)
    1f92:	2bff      	cmp	r3, #255	; 0xff
    1f94:	bf28      	it	cs
    1f96:	23ff      	movcs	r3, #255	; 0xff
    1f98:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1f9c:	68c3      	ldr	r3, [r0, #12]
    1f9e:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1fa0:	2aff      	cmp	r2, #255	; 0xff
    1fa2:	bf28      	it	cs
    1fa4:	22ff      	movcs	r2, #255	; 0xff
    1fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1faa:	68c3      	ldr	r3, [r0, #12]
    1fac:	440b      	add	r3, r1
    1fae:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1fb0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1fb4:	2bff      	cmp	r3, #255	; 0xff
    1fb6:	bf28      	it	cs
    1fb8:	23ff      	movcs	r3, #255	; 0xff
    1fba:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1fbe:	68c3      	ldr	r3, [r0, #12]
    1fc0:	4419      	add	r1, r3
    1fc2:	608a      	str	r2, [r1, #8]
		return 0;
    1fc4:	2000      	movs	r0, #0
    1fc6:	e7de      	b.n	1f86 <grid_led_set_color+0xa>
    1fc8:	20003320 	.word	0x20003320

00001fcc <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1fcc:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1fce:	4c06      	ldr	r4, [pc, #24]	; (1fe8 <grid_led_hardware_init+0x1c>)
    1fd0:	f100 0114 	add.w	r1, r0, #20
    1fd4:	4620      	mov	r0, r4
    1fd6:	4b05      	ldr	r3, [pc, #20]	; (1fec <grid_led_hardware_init+0x20>)
    1fd8:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1fda:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <grid_led_hardware_init+0x24>)
    1fdc:	2100      	movs	r1, #0
    1fde:	4620      	mov	r0, r4
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <grid_led_hardware_init+0x28>)
    1fe2:	4798      	blx	r3
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	bf00      	nop
    1fe8:	20001098 	.word	0x20001098
    1fec:	00005309 	.word	0x00005309
    1ff0:	00001f71 	.word	0x00001f71
    1ff4:	000052d9 	.word	0x000052d9

00001ff8 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1ff8:	7840      	ldrb	r0, [r0, #1]
    1ffa:	4770      	bx	lr

00001ffc <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1ffc:	7843      	ldrb	r3, [r0, #1]
    1ffe:	b113      	cbz	r3, 2006 <grid_led_tick+0xa>
void grid_led_tick(struct grid_led_model* mod){
    2000:	b430      	push	{r4, r5}
	for (uint8_t j=0; j<mod->led_number; j++){
    2002:	2400      	movs	r4, #0
    2004:	e005      	b.n	2012 <grid_led_tick+0x16>
    2006:	4770      	bx	lr
    2008:	3401      	adds	r4, #1
    200a:	b2e4      	uxtb	r4, r4
    200c:	7843      	ldrb	r3, [r0, #1]
    200e:	42a3      	cmp	r3, r4
    2010:	d911      	bls.n	2036 <grid_led_tick+0x3a>
void grid_led_tick(struct grid_led_model* mod){
    2012:	2100      	movs	r1, #0
					
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    2014:	7843      	ldrb	r3, [r0, #1]
    2016:	fb01 4303 	mla	r3, r1, r3, r4
    201a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    201e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2022:	6902      	ldr	r2, [r0, #16]
    2024:	4413      	add	r3, r2
    2026:	7ada      	ldrb	r2, [r3, #11]
    2028:	7b1d      	ldrb	r5, [r3, #12]
    202a:	442a      	add	r2, r5
    202c:	72da      	strb	r2, [r3, #11]
    202e:	3101      	adds	r1, #1
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    2030:	2903      	cmp	r1, #3
    2032:	d1ef      	bne.n	2014 <grid_led_tick+0x18>
    2034:	e7e8      	b.n	2008 <grid_led_tick+0xc>
		}	
	}
	/** END */
	
}
    2036:	bc30      	pop	{r4, r5}
    2038:	4770      	bx	lr

0000203a <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    203a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    203c:	7844      	ldrb	r4, [r0, #1]
    203e:	fb02 1404 	mla	r4, r2, r4, r1
    2042:	6905      	ldr	r5, [r0, #16]
    2044:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2048:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    204c:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    204e:	7843      	ldrb	r3, [r0, #1]
    2050:	fb02 1303 	mla	r3, r2, r3, r1
    2054:	6904      	ldr	r4, [r0, #16]
    2056:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    205a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    205e:	4423      	add	r3, r4
    2060:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2064:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    2066:	7843      	ldrb	r3, [r0, #1]
    2068:	fb02 1203 	mla	r2, r2, r3, r1
    206c:	6903      	ldr	r3, [r0, #16]
    206e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2072:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2076:	441a      	add	r2, r3
    2078:	f89d 3010 	ldrb.w	r3, [sp, #16]
    207c:	7093      	strb	r3, [r2, #2]
}
    207e:	bc70      	pop	{r4, r5, r6}
    2080:	4770      	bx	lr

00002082 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2082:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    2084:	7844      	ldrb	r4, [r0, #1]
    2086:	fb02 1404 	mla	r4, r2, r4, r1
    208a:	6905      	ldr	r5, [r0, #16]
    208c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2090:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2094:	442c      	add	r4, r5
    2096:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    2098:	7843      	ldrb	r3, [r0, #1]
    209a:	fb02 1303 	mla	r3, r2, r3, r1
    209e:	6904      	ldr	r4, [r0, #16]
    20a0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    20a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    20a8:	4423      	add	r3, r4
    20aa:	f89d 400c 	ldrb.w	r4, [sp, #12]
    20ae:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    20b0:	7843      	ldrb	r3, [r0, #1]
    20b2:	fb02 1203 	mla	r2, r2, r3, r1
    20b6:	6903      	ldr	r3, [r0, #16]
    20b8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    20bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    20c0:	441a      	add	r2, r3
    20c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    20c6:	7153      	strb	r3, [r2, #5]
}
    20c8:	bc70      	pop	{r4, r5, r6}
    20ca:	4770      	bx	lr

000020cc <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    20cc:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    20ce:	7844      	ldrb	r4, [r0, #1]
    20d0:	fb02 1404 	mla	r4, r2, r4, r1
    20d4:	6905      	ldr	r5, [r0, #16]
    20d6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    20da:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    20de:	442c      	add	r4, r5
    20e0:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    20e2:	7843      	ldrb	r3, [r0, #1]
    20e4:	fb02 1303 	mla	r3, r2, r3, r1
    20e8:	6904      	ldr	r4, [r0, #16]
    20ea:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    20ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    20f2:	4423      	add	r3, r4
    20f4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    20f8:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    20fa:	7843      	ldrb	r3, [r0, #1]
    20fc:	fb02 1203 	mla	r2, r2, r3, r1
    2100:	6903      	ldr	r3, [r0, #16]
    2102:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2106:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    210a:	441a      	add	r2, r3
    210c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2110:	7213      	strb	r3, [r2, #8]
}
    2112:	bc70      	pop	{r4, r5, r6}
    2114:	4770      	bx	lr

00002116 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2116:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    2118:	7844      	ldrb	r4, [r0, #1]
    211a:	fb02 1204 	mla	r2, r2, r4, r1
    211e:	6901      	ldr	r1, [r0, #16]
    2120:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2124:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2128:	440a      	add	r2, r1
    212a:	72d3      	strb	r3, [r2, #11]
}
    212c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2130:	4770      	bx	lr

00002132 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2132:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    2134:	7844      	ldrb	r4, [r0, #1]
    2136:	fb02 1204 	mla	r2, r2, r4, r1
    213a:	6901      	ldr	r1, [r0, #16]
    213c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2140:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2144:	440a      	add	r2, r1
    2146:	7313      	strb	r3, [r2, #12]
}
    2148:	f85d 4b04 	ldr.w	r4, [sp], #4
    214c:	4770      	bx	lr
	...

00002150 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2154:	b083      	sub	sp, #12
    2156:	4605      	mov	r5, r0
	mod->led_number = length;
    2158:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    215a:	b2cc      	uxtb	r4, r1
    215c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2160:	0080      	lsls	r0, r0, #2
    2162:	3090      	adds	r0, #144	; 0x90
    2164:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    2166:	4f52      	ldr	r7, [pc, #328]	; (22b0 <grid_led_buffer_init+0x160>)
    2168:	47b8      	blx	r7
    216a:	4606      	mov	r6, r0
    216c:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    216e:	f100 0390 	add.w	r3, r0, #144	; 0x90
    2172:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    2174:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2178:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    217c:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    217e:	2e00      	cmp	r6, #0
    2180:	f000 8094 	beq.w	22ac <grid_led_buffer_init+0x15c>
    2184:	2800      	cmp	r0, #0
    2186:	f000 8091 	beq.w	22ac <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    218a:	6128      	str	r0, [r5, #16]
    218c:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    218e:	4619      	mov	r1, r3
    2190:	68aa      	ldr	r2, [r5, #8]
    2192:	54d1      	strb	r1, [r2, r3]
    2194:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    2196:	2b90      	cmp	r3, #144	; 0x90
    2198:	d1fa      	bne.n	2190 <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    219a:	786b      	ldrb	r3, [r5, #1]
    219c:	2b00      	cmp	r3, #0
    219e:	f000 8082 	beq.w	22a6 <grid_led_buffer_init+0x156>
    21a2:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    21a4:	4626      	mov	r6, r4
    21a6:	4f43      	ldr	r7, [pc, #268]	; (22b4 <grid_led_buffer_init+0x164>)
    21a8:	9600      	str	r6, [sp, #0]
    21aa:	4633      	mov	r3, r6
    21ac:	4632      	mov	r2, r6
    21ae:	4621      	mov	r1, r4
    21b0:	4628      	mov	r0, r5
    21b2:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    21b4:	3401      	adds	r4, #1
    21b6:	786b      	ldrb	r3, [r5, #1]
    21b8:	42a3      	cmp	r3, r4
    21ba:	d8f5      	bhi.n	21a8 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    21bc:	2b00      	cmp	r3, #0
    21be:	d072      	beq.n	22a6 <grid_led_buffer_init+0x156>
    21c0:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    21c4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 22c0 <grid_led_buffer_init+0x170>
    21c8:	2400      	movs	r4, #0
    21ca:	9401      	str	r4, [sp, #4]
    21cc:	9400      	str	r4, [sp, #0]
    21ce:	4623      	mov	r3, r4
    21d0:	2201      	movs	r2, #1
    21d2:	4659      	mov	r1, fp
    21d4:	4628      	mov	r0, r5
    21d6:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    21d8:	9401      	str	r4, [sp, #4]
    21da:	237f      	movs	r3, #127	; 0x7f
    21dc:	9300      	str	r3, [sp, #0]
    21de:	4623      	mov	r3, r4
    21e0:	2201      	movs	r2, #1
    21e2:	4659      	mov	r1, fp
    21e4:	4628      	mov	r0, r5
    21e6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 22c4 <grid_led_buffer_init+0x174>
    21ea:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    21ec:	9401      	str	r4, [sp, #4]
    21ee:	23ff      	movs	r3, #255	; 0xff
    21f0:	9300      	str	r3, [sp, #0]
    21f2:	4623      	mov	r3, r4
    21f4:	2201      	movs	r2, #1
    21f6:	4659      	mov	r1, fp
    21f8:	4628      	mov	r0, r5
    21fa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 22c8 <grid_led_buffer_init+0x178>
    21fe:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    2200:	4623      	mov	r3, r4
    2202:	2201      	movs	r2, #1
    2204:	4659      	mov	r1, fp
    2206:	4628      	mov	r0, r5
    2208:	4f2b      	ldr	r7, [pc, #172]	; (22b8 <grid_led_buffer_init+0x168>)
    220a:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    220c:	4623      	mov	r3, r4
    220e:	2201      	movs	r2, #1
    2210:	4659      	mov	r1, fp
    2212:	4628      	mov	r0, r5
    2214:	4e29      	ldr	r6, [pc, #164]	; (22bc <grid_led_buffer_init+0x16c>)
    2216:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    2218:	9401      	str	r4, [sp, #4]
    221a:	9400      	str	r4, [sp, #0]
    221c:	4623      	mov	r3, r4
    221e:	2202      	movs	r2, #2
    2220:	4659      	mov	r1, fp
    2222:	4628      	mov	r0, r5
    2224:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    2226:	9401      	str	r4, [sp, #4]
    2228:	237f      	movs	r3, #127	; 0x7f
    222a:	9300      	str	r3, [sp, #0]
    222c:	4623      	mov	r3, r4
    222e:	2202      	movs	r2, #2
    2230:	4659      	mov	r1, fp
    2232:	4628      	mov	r0, r5
    2234:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    2236:	9401      	str	r4, [sp, #4]
    2238:	23ff      	movs	r3, #255	; 0xff
    223a:	9300      	str	r3, [sp, #0]
    223c:	4623      	mov	r3, r4
    223e:	2202      	movs	r2, #2
    2240:	4659      	mov	r1, fp
    2242:	4628      	mov	r0, r5
    2244:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    2246:	4623      	mov	r3, r4
    2248:	2202      	movs	r2, #2
    224a:	4659      	mov	r1, fp
    224c:	4628      	mov	r0, r5
    224e:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    2250:	4623      	mov	r3, r4
    2252:	2202      	movs	r2, #2
    2254:	4659      	mov	r1, fp
    2256:	4628      	mov	r0, r5
    2258:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    225a:	9401      	str	r4, [sp, #4]
    225c:	9400      	str	r4, [sp, #0]
    225e:	4623      	mov	r3, r4
    2260:	4622      	mov	r2, r4
    2262:	4659      	mov	r1, fp
    2264:	4628      	mov	r0, r5
    2266:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2268:	9401      	str	r4, [sp, #4]
    226a:	9400      	str	r4, [sp, #0]
    226c:	4623      	mov	r3, r4
    226e:	4622      	mov	r2, r4
    2270:	4659      	mov	r1, fp
    2272:	4628      	mov	r0, r5
    2274:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2276:	9401      	str	r4, [sp, #4]
    2278:	9400      	str	r4, [sp, #0]
    227a:	4623      	mov	r3, r4
    227c:	4622      	mov	r2, r4
    227e:	4659      	mov	r1, fp
    2280:	4628      	mov	r0, r5
    2282:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    2284:	4623      	mov	r3, r4
    2286:	4622      	mov	r2, r4
    2288:	4659      	mov	r1, fp
    228a:	4628      	mov	r0, r5
    228c:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    228e:	4623      	mov	r3, r4
    2290:	4622      	mov	r2, r4
    2292:	4659      	mov	r1, fp
    2294:	4628      	mov	r0, r5
    2296:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    2298:	f10b 0b01 	add.w	fp, fp, #1
    229c:	fa5f fb8b 	uxtb.w	fp, fp
    22a0:	786b      	ldrb	r3, [r5, #1]
    22a2:	455b      	cmp	r3, fp
    22a4:	d890      	bhi.n	21c8 <grid_led_buffer_init+0x78>
}
    22a6:	b003      	add	sp, #12
    22a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22ac:	e7fe      	b.n	22ac <grid_led_buffer_init+0x15c>
    22ae:	bf00      	nop
    22b0:	0000c521 	.word	0x0000c521
    22b4:	00001f7d 	.word	0x00001f7d
    22b8:	00002133 	.word	0x00002133
    22bc:	00002117 	.word	0x00002117
    22c0:	0000203b 	.word	0x0000203b
    22c4:	00002083 	.word	0x00002083
    22c8:	000020cd 	.word	0x000020cd

000022cc <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    22cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22d0:	b083      	sub	sp, #12
    22d2:	f890 c001 	ldrb.w	ip, [r0, #1]
    22d6:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    22da:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    22de:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    22e2:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    22e6:	6904      	ldr	r4, [r0, #16]
    22e8:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    22ea:	2703      	movs	r7, #3
	uint32_t mix_b = 0;
    22ec:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    22f0:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    22f2:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    22f4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 237c <grid_led_render+0xb0>
    22f8:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    22fa:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    22fe:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2300:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2304:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2308:	f894 a000 	ldrb.w	sl, [r4]
    230c:	f894 b003 	ldrb.w	fp, [r4, #3]
    2310:	fb05 fb0b 	mul.w	fp, r5, fp
    2314:	fb09 bb0a 	mla	fp, r9, sl, fp
    2318:	f894 a006 	ldrb.w	sl, [r4, #6]
    231c:	fb06 ba0a 	mla	sl, r6, sl, fp
    2320:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2322:	f894 a001 	ldrb.w	sl, [r4, #1]
    2326:	f894 b004 	ldrb.w	fp, [r4, #4]
    232a:	fb05 fb0b 	mul.w	fp, r5, fp
    232e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2332:	f894 a007 	ldrb.w	sl, [r4, #7]
    2336:	fb06 ba0a 	mla	sl, r6, sl, fp
    233a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    233c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2340:	f894 b005 	ldrb.w	fp, [r4, #5]
    2344:	fb05 f50b 	mul.w	r5, r5, fp
    2348:	fb09 590a 	mla	r9, r9, sl, r5
    234c:	7a25      	ldrb	r5, [r4, #8]
    234e:	fb06 9505 	mla	r5, r6, r5, r9
    2352:	44ae      	add	lr, r5
    2354:	3f01      	subs	r7, #1
    2356:	4464      	add	r4, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    2358:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    235c:	d1cc      	bne.n	22f8 <grid_led_render+0x2c>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    235e:	f3ce 244f 	ubfx	r4, lr, #9, #16
    2362:	9400      	str	r4, [sp, #0]
    2364:	f3c3 234f 	ubfx	r3, r3, #9, #16
    2368:	f3c2 224f 	ubfx	r2, r2, #9, #16
    236c:	4c02      	ldr	r4, [pc, #8]	; (2378 <grid_led_render+0xac>)
    236e:	47a0      	blx	r4
	
}
    2370:	b003      	add	sp, #12
    2372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2376:	bf00      	nop
    2378:	00001f7d 	.word	0x00001f7d
    237c:	20000000 	.word	0x20000000

00002380 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2380:	7843      	ldrb	r3, [r0, #1]
    2382:	b15b      	cbz	r3, 239c <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2384:	b570      	push	{r4, r5, r6, lr}
    2386:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2388:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    238a:	4e05      	ldr	r6, [pc, #20]	; (23a0 <grid_led_render_all+0x20>)
    238c:	4621      	mov	r1, r4
    238e:	4628      	mov	r0, r5
    2390:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2392:	3401      	adds	r4, #1
    2394:	786b      	ldrb	r3, [r5, #1]
    2396:	42a3      	cmp	r3, r4
    2398:	d8f8      	bhi.n	238c <grid_led_render_all+0xc>
    239a:	bd70      	pop	{r4, r5, r6, pc}
    239c:	4770      	bx	lr
    239e:	bf00      	nop
    23a0:	000022cd 	.word	0x000022cd

000023a4 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    23a4:	b510      	push	{r4, lr}
    23a6:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    23a8:	2200      	movs	r2, #0
    23aa:	4b08      	ldr	r3, [pc, #32]	; (23cc <grid_led_hardware_start_transfer_blocking+0x28>)
    23ac:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    23ae:	4808      	ldr	r0, [pc, #32]	; (23d0 <grid_led_hardware_start_transfer_blocking+0x2c>)
    23b0:	4b08      	ldr	r3, [pc, #32]	; (23d4 <grid_led_hardware_start_transfer_blocking+0x30>)
    23b2:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    23b4:	88a2      	ldrh	r2, [r4, #4]
    23b6:	68a1      	ldr	r1, [r4, #8]
    23b8:	6960      	ldr	r0, [r4, #20]
    23ba:	4b07      	ldr	r3, [pc, #28]	; (23d8 <grid_led_hardware_start_transfer_blocking+0x34>)
    23bc:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    23be:	4a03      	ldr	r2, [pc, #12]	; (23cc <grid_led_hardware_start_transfer_blocking+0x28>)
    23c0:	7813      	ldrb	r3, [r2, #0]
    23c2:	b2db      	uxtb	r3, r3
    23c4:	2b01      	cmp	r3, #1
    23c6:	d1fb      	bne.n	23c0 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    23c8:	bd10      	pop	{r4, pc}
    23ca:	bf00      	nop
    23cc:	20001218 	.word	0x20001218
    23d0:	20001098 	.word	0x20001098
    23d4:	000052b1 	.word	0x000052b1
    23d8:	00004db1 	.word	0x00004db1

000023dc <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    23dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e0:	b089      	sub	sp, #36	; 0x24
    23e2:	4605      	mov	r5, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    23e4:	4b31      	ldr	r3, [pc, #196]	; (24ac <grid_led_startup_animation+0xd0>)
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    23ea:	2b20      	cmp	r3, #32
    23ec:	d01c      	beq.n	2428 <grid_led_startup_animation+0x4c>
	}else if (grid_module_reset_cause == RESET_REASON_SYST){
    23ee:	2b40      	cmp	r3, #64	; 0x40
    23f0:	d015      	beq.n	241e <grid_led_startup_animation+0x42>
	uint8_t s		  = 1;
    23f2:	2301      	movs	r3, #1
	uint8_t color_b   = 1;
    23f4:	461a      	mov	r2, r3
	uint8_t color_g   = 1;
    23f6:	4619      	mov	r1, r3
	uint8_t color_r   = 1;
    23f8:	4618      	mov	r0, r3
    23fa:	fb03 f000 	mul.w	r0, r3, r0
    23fe:	9005      	str	r0, [sp, #20]
    2400:	fb03 f101 	mul.w	r1, r3, r1
    2404:	9106      	str	r1, [sp, #24]
    2406:	fb03 f302 	mul.w	r3, r3, r2
    240a:	9307      	str	r3, [sp, #28]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    240c:	f04f 0a00 	mov.w	sl, #0
    2410:	46d3      	mov	fp, sl
    2412:	46d0      	mov	r8, sl
    2414:	23ff      	movs	r3, #255	; 0xff
    2416:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 24b8 <grid_led_startup_animation+0xdc>
    241a:	461f      	mov	r7, r3
    241c:	e024      	b.n	2468 <grid_led_startup_animation+0x8c>
		s= 2;
    241e:	2302      	movs	r3, #2
		color_b = 1;
    2420:	2201      	movs	r2, #1
		color_g = 0;
    2422:	2100      	movs	r1, #0
		color_r = 0;
    2424:	4608      	mov	r0, r1
    2426:	e7e8      	b.n	23fa <grid_led_startup_animation+0x1e>
		s= 2;
    2428:	2302      	movs	r3, #2
		color_b = 0;
    242a:	2200      	movs	r2, #0
		color_g = 0;
    242c:	4611      	mov	r1, r2
		color_r = 1;
    242e:	2001      	movs	r0, #1
    2430:	e7e3      	b.n	23fa <grid_led_startup_animation+0x1e>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    2432:	9600      	str	r6, [sp, #0]
    2434:	9b04      	ldr	r3, [sp, #16]
    2436:	9a03      	ldr	r2, [sp, #12]
    2438:	4621      	mov	r1, r4
    243a:	4628      	mov	r0, r5
    243c:	47c8      	blx	r9
		for (uint8_t j=0; j<mod->led_number; j++){
    243e:	3401      	adds	r4, #1
    2440:	b2e4      	uxtb	r4, r4
    2442:	786b      	ldrb	r3, [r5, #1]
    2444:	42a3      	cmp	r3, r4
    2446:	d8f4      	bhi.n	2432 <grid_led_startup_animation+0x56>
		grid_led_hardware_start_transfer_blocking(mod);
    2448:	4628      	mov	r0, r5
    244a:	4b19      	ldr	r3, [pc, #100]	; (24b0 <grid_led_startup_animation+0xd4>)
    244c:	4798      	blx	r3
		delay_ms(1);
    244e:	2001      	movs	r0, #1
    2450:	4b18      	ldr	r3, [pc, #96]	; (24b4 <grid_led_startup_animation+0xd8>)
    2452:	4798      	blx	r3
    2454:	3f01      	subs	r7, #1
    2456:	9b05      	ldr	r3, [sp, #20]
    2458:	4498      	add	r8, r3
    245a:	9b06      	ldr	r3, [sp, #24]
    245c:	449b      	add	fp, r3
    245e:	9b07      	ldr	r3, [sp, #28]
    2460:	449a      	add	sl, r3
	for (uint8_t i = 0; i<255; i++){
    2462:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2466:	d01e      	beq.n	24a6 <grid_led_startup_animation+0xca>
		for (uint8_t j=0; j<mod->led_number; j++){
    2468:	786b      	ldrb	r3, [r5, #1]
    246a:	2b00      	cmp	r3, #0
    246c:	d0ec      	beq.n	2448 <grid_led_startup_animation+0x6c>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    246e:	f1d8 0200 	rsbs	r2, r8, #0
    2472:	fa5f f388 	uxtb.w	r3, r8
    2476:	b2d2      	uxtb	r2, r2
    2478:	bf58      	it	pl
    247a:	4253      	negpl	r3, r2
    247c:	b29b      	uxth	r3, r3
    247e:	9303      	str	r3, [sp, #12]
    2480:	f1db 0200 	rsbs	r2, fp, #0
    2484:	fa5f f38b 	uxtb.w	r3, fp
    2488:	b2d2      	uxtb	r2, r2
    248a:	bf58      	it	pl
    248c:	4253      	negpl	r3, r2
    248e:	b29b      	uxth	r3, r3
    2490:	9304      	str	r3, [sp, #16]
    2492:	f1da 0300 	rsbs	r3, sl, #0
    2496:	fa5f f68a 	uxtb.w	r6, sl
    249a:	b2db      	uxtb	r3, r3
    249c:	bf58      	it	pl
    249e:	425e      	negpl	r6, r3
    24a0:	b2b6      	uxth	r6, r6
    24a2:	2400      	movs	r4, #0
    24a4:	e7c5      	b.n	2432 <grid_led_startup_animation+0x56>
}
    24a6:	b009      	add	sp, #36	; 0x24
    24a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ac:	40000c00 	.word	0x40000c00
    24b0:	000023a5 	.word	0x000023a5
    24b4:	00004c25 	.word	0x00004c25
    24b8:	00001f7d 	.word	0x00001f7d

000024bc <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    24bc:	b570      	push	{r4, r5, r6, lr}
    24be:	4604      	mov	r4, r0
    24c0:	4e2b      	ldr	r6, [pc, #172]	; (2570 <grid_led_init+0xb4>)
    24c2:	2200      	movs	r2, #0
    24c4:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    24c6:	f003 0001 	and.w	r0, r3, #1
    24ca:	2800      	cmp	r0, #0
    24cc:	bf14      	ite	ne
    24ce:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    24d2:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    24d6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    24da:	2d00      	cmp	r5, #0
    24dc:	bf14      	ite	ne
    24de:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    24e2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    24e6:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    24e8:	f3c3 0080 	ubfx	r0, r3, #2, #1
    24ec:	2800      	cmp	r0, #0
    24ee:	bf14      	ite	ne
    24f0:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    24f4:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    24f8:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    24fa:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    24fe:	2d00      	cmp	r5, #0
    2500:	bf14      	ite	ne
    2502:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2506:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    250a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    250c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2510:	2d00      	cmp	r5, #0
    2512:	bf14      	ite	ne
    2514:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2518:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    251c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    251e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2522:	2800      	cmp	r0, #0
    2524:	bf14      	ite	ne
    2526:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    252a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    252e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2530:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2534:	2800      	cmp	r0, #0
    2536:	bf14      	ite	ne
    2538:	200e      	movne	r0, #14
    253a:	2008      	moveq	r0, #8
    253c:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    253e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2542:	2b00      	cmp	r3, #0
    2544:	bf14      	ite	ne
    2546:	23e0      	movne	r3, #224	; 0xe0
    2548:	2380      	moveq	r3, #128	; 0x80
    254a:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    254c:	f846 3f04 	str.w	r3, [r6, #4]!
    2550:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2552:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2556:	d1b5      	bne.n	24c4 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2558:	4620      	mov	r0, r4
    255a:	4b06      	ldr	r3, [pc, #24]	; (2574 <grid_led_init+0xb8>)
    255c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    255e:	4620      	mov	r0, r4
    2560:	4b05      	ldr	r3, [pc, #20]	; (2578 <grid_led_init+0xbc>)
    2562:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2564:	4620      	mov	r0, r4
    2566:	4b05      	ldr	r3, [pc, #20]	; (257c <grid_led_init+0xc0>)
    2568:	4798      	blx	r3
}
    256a:	2000      	movs	r0, #0
    256c:	bd70      	pop	{r4, r5, r6, pc}
    256e:	bf00      	nop
    2570:	2000331c 	.word	0x2000331c
    2574:	00002151 	.word	0x00002151
    2578:	00001fcd 	.word	0x00001fcd
    257c:	000023dd 	.word	0x000023dd

00002580 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    2580:	b510      	push	{r4, lr}
    2582:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2584:	2200      	movs	r2, #0
    2586:	4b05      	ldr	r3, [pc, #20]	; (259c <grid_led_hardware_start_transfer+0x1c>)
    2588:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    258a:	4805      	ldr	r0, [pc, #20]	; (25a0 <grid_led_hardware_start_transfer+0x20>)
    258c:	4b05      	ldr	r3, [pc, #20]	; (25a4 <grid_led_hardware_start_transfer+0x24>)
    258e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2590:	88a2      	ldrh	r2, [r4, #4]
    2592:	68a1      	ldr	r1, [r4, #8]
    2594:	6960      	ldr	r0, [r4, #20]
    2596:	4b04      	ldr	r3, [pc, #16]	; (25a8 <grid_led_hardware_start_transfer+0x28>)
    2598:	4798      	blx	r3
    259a:	bd10      	pop	{r4, pc}
    259c:	20001218 	.word	0x20001218
    25a0:	20001098 	.word	0x20001098
    25a4:	000052b1 	.word	0x000052b1
    25a8:	00004db1 	.word	0x00004db1

000025ac <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    25ac:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    25b2:	4b13      	ldr	r3, [pc, #76]	; (2600 <grid_module_common_init+0x54>)
    25b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <grid_module_common_init+0x58>)
    25ba:	4798      	blx	r3
    25bc:	b178      	cbz	r0, 25de <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    25be:	4b11      	ldr	r3, [pc, #68]	; (2604 <grid_module_common_init+0x58>)
    25c0:	4798      	blx	r3
    25c2:	2880      	cmp	r0, #128	; 0x80
    25c4:	d00f      	beq.n	25e6 <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    25c6:	4b0f      	ldr	r3, [pc, #60]	; (2604 <grid_module_common_init+0x58>)
    25c8:	4798      	blx	r3
    25ca:	2840      	cmp	r0, #64	; 0x40
    25cc:	d00f      	beq.n	25ee <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    25ce:	4b0d      	ldr	r3, [pc, #52]	; (2604 <grid_module_common_init+0x58>)
    25d0:	4798      	blx	r3
    25d2:	28c0      	cmp	r0, #192	; 0xc0
    25d4:	d00f      	beq.n	25f6 <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    25d6:	480c      	ldr	r0, [pc, #48]	; (2608 <grid_module_common_init+0x5c>)
    25d8:	4b0c      	ldr	r3, [pc, #48]	; (260c <grid_module_common_init+0x60>)
    25da:	4798      	blx	r3
    25dc:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    25de:	480c      	ldr	r0, [pc, #48]	; (2610 <grid_module_common_init+0x64>)
    25e0:	4b0c      	ldr	r3, [pc, #48]	; (2614 <grid_module_common_init+0x68>)
    25e2:	4798      	blx	r3
    25e4:	e7eb      	b.n	25be <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    25e6:	480a      	ldr	r0, [pc, #40]	; (2610 <grid_module_common_init+0x64>)
    25e8:	4b0b      	ldr	r3, [pc, #44]	; (2618 <grid_module_common_init+0x6c>)
    25ea:	4798      	blx	r3
    25ec:	e7eb      	b.n	25c6 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    25ee:	4808      	ldr	r0, [pc, #32]	; (2610 <grid_module_common_init+0x64>)
    25f0:	4b0a      	ldr	r3, [pc, #40]	; (261c <grid_module_common_init+0x70>)
    25f2:	4798      	blx	r3
    25f4:	e7eb      	b.n	25ce <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    25f6:	4806      	ldr	r0, [pc, #24]	; (2610 <grid_module_common_init+0x64>)
    25f8:	4b09      	ldr	r3, [pc, #36]	; (2620 <grid_module_common_init+0x74>)
    25fa:	4798      	blx	r3
    25fc:	e7eb      	b.n	25d6 <grid_module_common_init+0x2a>
    25fe:	bf00      	nop
    2600:	41008000 	.word	0x41008000
    2604:	00003c61 	.word	0x00003c61
    2608:	20003280 	.word	0x20003280
    260c:	00003ead 	.word	0x00003ead
    2610:	20003270 	.word	0x20003270
    2614:	000036dd 	.word	0x000036dd
    2618:	000028c1 	.word	0x000028c1
    261c:	00003339 	.word	0x00003339
    2620:	00002db1 	.word	0x00002db1

00002624 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    2624:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2626:	4803      	ldr	r0, [pc, #12]	; (2634 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2628:	4c03      	ldr	r4, [pc, #12]	; (2638 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    262a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    262c:	4803      	ldr	r0, [pc, #12]	; (263c <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    262e:	47a0      	blx	r4
    2630:	bd10      	pop	{r4, pc}
    2632:	bf00      	nop
    2634:	20000fc8 	.word	0x20000fc8
    2638:	00004b7d 	.word	0x00004b7d
    263c:	2000119c 	.word	0x2000119c

00002640 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2640:	4b84      	ldr	r3, [pc, #528]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	2b00      	cmp	r3, #0
    2646:	f000 80ef 	beq.w	2828 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    264a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    264e:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2650:	2300      	movs	r3, #0
    2652:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2656:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    265a:	4b7e      	ldr	r3, [pc, #504]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    265c:	785a      	ldrb	r2, [r3, #1]
    265e:	3208      	adds	r2, #8
    2660:	487d      	ldr	r0, [pc, #500]	; (2858 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>)
    2662:	5c85      	ldrb	r5, [r0, r2]
    2664:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    2666:	785a      	ldrb	r2, [r3, #1]
    2668:	b2d2      	uxtb	r2, r2
    266a:	5c84      	ldrb	r4, [r0, r2]
    266c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    266e:	785a      	ldrb	r2, [r3, #1]
    2670:	3201      	adds	r2, #1
    2672:	b2d2      	uxtb	r2, r2
    2674:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2676:	785a      	ldrb	r2, [r3, #1]
    2678:	f002 0207 	and.w	r2, r2, #7
    267c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    267e:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2680:	f013 0f01 	tst.w	r3, #1
    2684:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2688:	4b74      	ldr	r3, [pc, #464]	; (285c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    268a:	bf14      	ite	ne
    268c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2690:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    2694:	4b6f      	ldr	r3, [pc, #444]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2696:	785b      	ldrb	r3, [r3, #1]
    2698:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    269c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    26a0:	4b6e      	ldr	r3, [pc, #440]	; (285c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    26a2:	bf14      	ite	ne
    26a4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    26ac:	4b69      	ldr	r3, [pc, #420]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    26ae:	785b      	ldrb	r3, [r3, #1]
    26b0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    26b8:	4b68      	ldr	r3, [pc, #416]	; (285c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    26ba:	bf14      	ite	ne
    26bc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26c0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    26c4:	2302      	movs	r3, #2
    26c6:	f10d 0206 	add.w	r2, sp, #6
    26ca:	2100      	movs	r1, #0
    26cc:	4864      	ldr	r0, [pc, #400]	; (2860 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    26ce:	4e65      	ldr	r6, [pc, #404]	; (2864 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x224>)
    26d0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    26d2:	2302      	movs	r3, #2
    26d4:	aa01      	add	r2, sp, #4
    26d6:	2100      	movs	r1, #0
    26d8:	4863      	ldr	r0, [pc, #396]	; (2868 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    26da:	47b0      	blx	r6
	
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    26dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    26e0:	f64e 2260 	movw	r2, #60000	; 0xea60
    26e4:	4293      	cmp	r3, r2
    26e6:	f240 80a5 	bls.w	2834 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>
		adcresult_0 = 0;
    26ea:	2300      	movs	r3, #0
    26ec:	f8ad 3006 	strh.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    26f0:	2001      	movs	r0, #1
		adcresult_0_valid = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    26f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    26f6:	f64e 2260 	movw	r2, #60000	; 0xea60
    26fa:	4293      	cmp	r3, r2
    26fc:	f240 80a2 	bls.w	2844 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x204>
		adcresult_1 = 0;
    2700:	2300      	movs	r3, #0
    2702:	f8ad 3004 	strh.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    2706:	2601      	movs	r6, #1
		adcresult_1_valid = 1;
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0] && adcresult_0_valid){
    2708:	012f      	lsls	r7, r5, #4
    270a:	4b58      	ldr	r3, [pc, #352]	; (286c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    270c:	689b      	ldr	r3, [r3, #8]
    270e:	443b      	add	r3, r7
    2710:	68da      	ldr	r2, [r3, #12]
    2712:	7812      	ldrb	r2, [r2, #0]
    2714:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2718:	4291      	cmp	r1, r2
    271a:	d03c      	beq.n	2796 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
    271c:	2800      	cmp	r0, #0
    271e:	d03a      	beq.n	2796 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2720:	2a00      	cmp	r2, #0
    2722:	bf0c      	ite	eq
    2724:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2728:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    272c:	6858      	ldr	r0, [r3, #4]
    272e:	bf0c      	ite	eq
    2730:	2290      	moveq	r2, #144	; 0x90
    2732:	2280      	movne	r2, #128	; 0x80
    2734:	2102      	movs	r1, #2
    2736:	3005      	adds	r0, #5
    2738:	f8df b134 	ldr.w	fp, [pc, #308]	; 2870 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>
    273c:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    273e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 286c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    2742:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2746:	443b      	add	r3, r7
    2748:	6858      	ldr	r0, [r3, #4]
    274a:	462a      	mov	r2, r5
    274c:	2102      	movs	r1, #2
    274e:	3007      	adds	r0, #7
    2750:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    2752:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2756:	443b      	add	r3, r7
    2758:	6858      	ldr	r0, [r3, #4]
    275a:	464a      	mov	r2, r9
    275c:	2102      	movs	r1, #2
    275e:	3009      	adds	r0, #9
    2760:	47d8      	blx	fp

		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    2762:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2766:	443b      	add	r3, r7
    2768:	68db      	ldr	r3, [r3, #12]
    276a:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    276e:	4629      	mov	r1, r5
    2770:	4640      	mov	r0, r8
    2772:	f8df a104 	ldr.w	sl, [pc, #260]	; 2878 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    2776:	47d0      	blx	sl
		
		
				
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 16].payload[9], 2, actuator); // LED
    2778:	f8d8 3008 	ldr.w	r3, [r8, #8]
    277c:	441f      	add	r7, r3
    277e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    2782:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2786:	2102      	movs	r1, #2
    2788:	3009      	adds	r0, #9
    278a:	47d8      	blx	fp

		grid_report_ui_set_changed_flag(mod, adc_index_0 + 16);
    278c:	f105 0110 	add.w	r1, r5, #16
    2790:	b2c9      	uxtb	r1, r1
    2792:	4640      	mov	r0, r8
    2794:	47d0      	blx	sl
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0] && adcresult_1_valid){
    2796:	0125      	lsls	r5, r4, #4
    2798:	4b34      	ldr	r3, [pc, #208]	; (286c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    279a:	689b      	ldr	r3, [r3, #8]
    279c:	442b      	add	r3, r5
    279e:	68da      	ldr	r2, [r3, #12]
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    27a6:	4291      	cmp	r1, r2
    27a8:	d036      	beq.n	2818 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
    27aa:	2e00      	cmp	r6, #0
    27ac:	d034      	beq.n	2818 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    27ae:	2a00      	cmp	r2, #0
    27b0:	bf0c      	ite	eq
    27b2:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    27b6:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    27ba:	6858      	ldr	r0, [r3, #4]
    27bc:	bf0c      	ite	eq
    27be:	2290      	moveq	r2, #144	; 0x90
    27c0:	2280      	movne	r2, #128	; 0x80
    27c2:	2102      	movs	r1, #2
    27c4:	3005      	adds	r0, #5
    27c6:	4f2a      	ldr	r7, [pc, #168]	; (2870 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    27c8:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    27ca:	4e28      	ldr	r6, [pc, #160]	; (286c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    27cc:	68b3      	ldr	r3, [r6, #8]
    27ce:	442b      	add	r3, r5
    27d0:	6858      	ldr	r0, [r3, #4]
    27d2:	4622      	mov	r2, r4
    27d4:	2102      	movs	r1, #2
    27d6:	3007      	adds	r0, #7
    27d8:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    27da:	68b3      	ldr	r3, [r6, #8]
    27dc:	442b      	add	r3, r5
    27de:	6858      	ldr	r0, [r3, #4]
    27e0:	4642      	mov	r2, r8
    27e2:	2102      	movs	r1, #2
    27e4:	3009      	adds	r0, #9
    27e6:	47b8      	blx	r7
			
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    27e8:	68b3      	ldr	r3, [r6, #8]
    27ea:	442b      	add	r3, r5
    27ec:	68db      	ldr	r3, [r3, #12]
    27ee:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    27f2:	4621      	mov	r1, r4
    27f4:	4630      	mov	r0, r6
    27f6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2878 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    27fa:	47c8      	blx	r9
		
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 16].payload[9], 2, actuator); // LED
    27fc:	68b3      	ldr	r3, [r6, #8]
    27fe:	441d      	add	r5, r3
    2800:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2804:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2808:	2102      	movs	r1, #2
    280a:	3009      	adds	r0, #9
    280c:	47b8      	blx	r7

		grid_report_ui_set_changed_flag(mod, adc_index_1 + 16);
    280e:	f104 0110 	add.w	r1, r4, #16
    2812:	b2c9      	uxtb	r1, r1
    2814:	4630      	mov	r0, r6
    2816:	47c8      	blx	r9
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2818:	2200      	movs	r2, #0
    281a:	4b0e      	ldr	r3, [pc, #56]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    281c:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    281e:	4b15      	ldr	r3, [pc, #84]	; (2874 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>)
    2820:	4798      	blx	r3
}
    2822:	b003      	add	sp, #12
    2824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    2828:	4a0a      	ldr	r2, [pc, #40]	; (2854 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    282a:	7813      	ldrb	r3, [r2, #0]
    282c:	3301      	adds	r3, #1
    282e:	b2db      	uxtb	r3, r3
    2830:	7013      	strb	r3, [r2, #0]
    2832:	4770      	bx	lr
	else if (adcresult_0<200){
    2834:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_0 = 127;
    2836:	bf9d      	ittte	ls
    2838:	237f      	movls	r3, #127	; 0x7f
    283a:	f8ad 3006 	strhls.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    283e:	2001      	movls	r0, #1
	uint8_t adcresult_0_valid = 0;
    2840:	2000      	movhi	r0, #0
    2842:	e756      	b.n	26f2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xb2>
	else if (adcresult_1<200){
    2844:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_1 = 127;
    2846:	bf9d      	ittte	ls
    2848:	237f      	movls	r3, #127	; 0x7f
    284a:	f8ad 3004 	strhls.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    284e:	2601      	movls	r6, #1
	uint8_t adcresult_1_valid = 0;
    2850:	2600      	movhi	r6, #0
    2852:	e759      	b.n	2708 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xc8>
    2854:	20000644 	.word	0x20000644
    2858:	20000300 	.word	0x20000300
    285c:	41008000 	.word	0x41008000
    2860:	20000fc8 	.word	0x20000fc8
    2864:	00004a9d 	.word	0x00004a9d
    2868:	2000119c 	.word	0x2000119c
    286c:	20003270 	.word	0x20003270
    2870:	00003c29 	.word	0x00003c29
    2874:	00002625 	.word	0x00002625
    2878:	00004367 	.word	0x00004367

0000287c <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    287e:	4f0b      	ldr	r7, [pc, #44]	; (28ac <grid_module_bu16_revb_hardware_init+0x30>)
    2880:	4c0b      	ldr	r4, [pc, #44]	; (28b0 <grid_module_bu16_revb_hardware_init+0x34>)
    2882:	463b      	mov	r3, r7
    2884:	2200      	movs	r2, #0
    2886:	4611      	mov	r1, r2
    2888:	4620      	mov	r0, r4
    288a:	4e0a      	ldr	r6, [pc, #40]	; (28b4 <grid_module_bu16_revb_hardware_init+0x38>)
    288c:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    288e:	4d0a      	ldr	r5, [pc, #40]	; (28b8 <grid_module_bu16_revb_hardware_init+0x3c>)
    2890:	463b      	mov	r3, r7
    2892:	2200      	movs	r2, #0
    2894:	4611      	mov	r1, r2
    2896:	4628      	mov	r0, r5
    2898:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    289a:	2100      	movs	r1, #0
    289c:	4620      	mov	r0, r4
    289e:	4c07      	ldr	r4, [pc, #28]	; (28bc <grid_module_bu16_revb_hardware_init+0x40>)
    28a0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    28a2:	2100      	movs	r1, #0
    28a4:	4628      	mov	r0, r5
    28a6:	47a0      	blx	r4
    28a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28aa:	bf00      	nop
    28ac:	00002641 	.word	0x00002641
    28b0:	20000fc8 	.word	0x20000fc8
    28b4:	00004a1d 	.word	0x00004a1d
    28b8:	2000119c 	.word	0x2000119c
    28bc:	000049dd 	.word	0x000049dd

000028c0 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    28c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28c4:	b095      	sub	sp, #84	; 0x54
    28c6:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    28c8:	2110      	movs	r1, #16
    28ca:	482d      	ldr	r0, [pc, #180]	; (2980 <grid_module_bu16_revb_init+0xc0>)
    28cc:	4b2d      	ldr	r3, [pc, #180]	; (2984 <grid_module_bu16_revb_init+0xc4>)
    28ce:	4798      	blx	r3
	grid_ui_model_init(mod, 32);
    28d0:	2120      	movs	r1, #32
    28d2:	4648      	mov	r0, r9
    28d4:	4b2c      	ldr	r3, [pc, #176]	; (2988 <grid_module_bu16_revb_init+0xc8>)
    28d6:	4798      	blx	r3
    28d8:	f10d 0810 	add.w	r8, sp, #16
    28dc:	2600      	movs	r6, #0
		
	for(uint8_t i=0; i<32; i++){
				
		uint8_t payload_template[30] = {0};
    28de:	4634      	mov	r4, r6
    28e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 29ac <grid_module_bu16_revb_init+0xec>
    28e4:	e027      	b.n	2936 <grid_module_bu16_revb_init+0x76>
		}
		else{ // LED
	
			type = GRID_REPORT_TYPE_LOCAL;

			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    28e6:	2303      	movs	r3, #3
    28e8:	9304      	str	r3, [sp, #16]
    28ea:	9403      	str	r4, [sp, #12]
    28ec:	f898 2000 	ldrb.w	r2, [r8]
    28f0:	9202      	str	r2, [sp, #8]
    28f2:	2263      	movs	r2, #99	; 0x63
    28f4:	9201      	str	r2, [sp, #4]
    28f6:	2501      	movs	r5, #1
    28f8:	9500      	str	r5, [sp, #0]
    28fa:	2202      	movs	r2, #2
    28fc:	4923      	ldr	r1, [pc, #140]	; (298c <grid_module_bu16_revb_init+0xcc>)
    28fe:	a80c      	add	r0, sp, #48	; 0x30
    2900:	f8df b098 	ldr.w	fp, [pc, #152]	; 299c <grid_module_bu16_revb_init+0xdc>
    2904:	47d8      	blx	fp
			
			
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    2906:	a80c      	add	r0, sp, #48	; 0x30
    2908:	4b21      	ldr	r3, [pc, #132]	; (2990 <grid_module_bu16_revb_init+0xd0>)
    290a:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    290c:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2910:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    2914:	2302      	movs	r3, #2
    2916:	9302      	str	r3, [sp, #8]
    2918:	ab07      	add	r3, sp, #28
    291a:	9301      	str	r3, [sp, #4]
    291c:	b2c0      	uxtb	r0, r0
    291e:	9000      	str	r0, [sp, #0]
    2920:	ab0c      	add	r3, sp, #48	; 0x30
    2922:	462a      	mov	r2, r5
    2924:	4639      	mov	r1, r7
    2926:	4648      	mov	r0, r9
    2928:	4d1a      	ldr	r5, [pc, #104]	; (2994 <grid_module_bu16_revb_init+0xd4>)
    292a:	47a8      	blx	r5
    292c:	3601      	adds	r6, #1
    292e:	f108 0801 	add.w	r8, r8, #1
	for(uint8_t i=0; i<32; i++){
    2932:	2e20      	cmp	r6, #32
    2934:	d01a      	beq.n	296c <grid_module_bu16_revb_init+0xac>
    2936:	b2f7      	uxtb	r7, r6
		uint8_t payload_template[30] = {0};
    2938:	221e      	movs	r2, #30
    293a:	4621      	mov	r1, r4
    293c:	a80c      	add	r0, sp, #48	; 0x30
    293e:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2940:	4b15      	ldr	r3, [pc, #84]	; (2998 <grid_module_bu16_revb_init+0xd8>)
    2942:	ad08      	add	r5, sp, #32
    2944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2946:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (i<16){ //BUTTON
    294a:	2f0f      	cmp	r7, #15
    294c:	d8cb      	bhi.n	28e6 <grid_module_bu16_revb_init+0x26>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    294e:	2303      	movs	r3, #3
    2950:	9304      	str	r3, [sp, #16]
    2952:	9403      	str	r4, [sp, #12]
    2954:	9602      	str	r6, [sp, #8]
    2956:	2390      	movs	r3, #144	; 0x90
    2958:	9301      	str	r3, [sp, #4]
    295a:	9400      	str	r4, [sp, #0]
    295c:	4623      	mov	r3, r4
    295e:	2202      	movs	r2, #2
    2960:	490a      	ldr	r1, [pc, #40]	; (298c <grid_module_bu16_revb_init+0xcc>)
    2962:	a80c      	add	r0, sp, #48	; 0x30
    2964:	4d0d      	ldr	r5, [pc, #52]	; (299c <grid_module_bu16_revb_init+0xdc>)
    2966:	47a8      	blx	r5
			type = GRID_REPORT_TYPE_BROADCAST;
    2968:	2502      	movs	r5, #2
    296a:	e7cc      	b.n	2906 <grid_module_bu16_revb_init+0x46>
		

	}
	
	grid_report_sys_init(mod);
    296c:	4648      	mov	r0, r9
    296e:	4b0c      	ldr	r3, [pc, #48]	; (29a0 <grid_module_bu16_revb_init+0xe0>)
    2970:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    2972:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <grid_module_bu16_revb_init+0xe4>)
    2974:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2976:	4b0c      	ldr	r3, [pc, #48]	; (29a8 <grid_module_bu16_revb_init+0xe8>)
    2978:	4798      	blx	r3

};
    297a:	b015      	add	sp, #84	; 0x54
    297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2980:	200077d4 	.word	0x200077d4
    2984:	000024bd 	.word	0x000024bd
    2988:	0000405d 	.word	0x0000405d
    298c:	0000dc04 	.word	0x0000dc04
    2990:	0000c97d 	.word	0x0000c97d
    2994:	00004121 	.word	0x00004121
    2998:	0000dbf4 	.word	0x0000dbf4
    299c:	0000c935 	.word	0x0000c935
    29a0:	00004145 	.word	0x00004145
    29a4:	0000287d 	.word	0x0000287d
    29a8:	00002625 	.word	0x00002625
    29ac:	0000c547 	.word	0x0000c547

000029b0 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    29b0:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    29b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    29b6:	4b06      	ldr	r3, [pc, #24]	; (29d0 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    29b8:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    29ba:	4c06      	ldr	r4, [pc, #24]	; (29d4 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    29bc:	4620      	mov	r0, r4
    29be:	4b06      	ldr	r3, [pc, #24]	; (29d8 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    29c0:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    29c2:	2308      	movs	r3, #8
    29c4:	4a05      	ldr	r2, [pc, #20]	; (29dc <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    29c6:	4906      	ldr	r1, [pc, #24]	; (29e0 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    29c8:	4620      	mov	r0, r4
    29ca:	4c06      	ldr	r4, [pc, #24]	; (29e4 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    29cc:	47a0      	blx	r4
    29ce:	bd10      	pop	{r4, pc}
    29d0:	41008000 	.word	0x41008000
    29d4:	20000ebc 	.word	0x20000ebc
    29d8:	00005085 	.word	0x00005085
    29dc:	20002258 	.word	0x20002258
    29e0:	20000310 	.word	0x20000310
    29e4:	00005125 	.word	0x00005125

000029e8 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    29e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ec:	ed2d 8b04 	vpush	{d8-d9}
    29f0:	b085      	sub	sp, #20
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    29f6:	4b4c      	ldr	r3, [pc, #304]	; (2b28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x140>)
    29f8:	615a      	str	r2, [r3, #20]
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = 0;
	if (grid_sys_state.bank_select == 1){
    29fa:	4b4c      	ldr	r3, [pc, #304]	; (2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    29fc:	7a5a      	ldrb	r2, [r3, #9]
    29fe:	b2d2      	uxtb	r2, r2
    2a00:	2a01      	cmp	r2, #1
    2a02:	bf14      	ite	ne
    2a04:	2200      	movne	r2, #0
    2a06:	2201      	moveq	r2, #1
    2a08:	4611      	mov	r1, r2
    2a0a:	9201      	str	r2, [sp, #4]
		bank = 1;
	}

	uint8_t bank_changed = 0;
	
	grid_sys_state.bank_changed;
    2a0c:	7a9a      	ldrb	r2, [r3, #10]
	
	if (grid_sys_state.bank_changed){
    2a0e:	7a9b      	ldrb	r3, [r3, #10]
    2a10:	b1e3      	cbz	r3, 2a4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x64>
		grid_sys_state.bank_changed = 0;
    2a12:	2200      	movs	r2, #0
    2a14:	4b45      	ldr	r3, [pc, #276]	; (2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    2a16:	729a      	strb	r2, [r3, #10]
    2a18:	2420      	movs	r4, #32
    2a1a:	f44f 7500 	mov.w	r5, #512	; 0x200
		bank_changed = 1;			
		
		for (uint8_t i = 0; i<16; i++)
		{
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    2a1e:	4e44      	ldr	r6, [pc, #272]	; (2b30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    2a20:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2b44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
			grid_report_ui_set_changed_flag(mod, i+16+16);
    2a24:	4f43      	ldr	r7, [pc, #268]	; (2b34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>)
    2a26:	4689      	mov	r9, r1
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    2a28:	68b3      	ldr	r3, [r6, #8]
    2a2a:	442b      	add	r3, r5
    2a2c:	68da      	ldr	r2, [r3, #12]
    2a2e:	6858      	ldr	r0, [r3, #4]
    2a30:	f812 2009 	ldrb.w	r2, [r2, r9]
    2a34:	2102      	movs	r1, #2
    2a36:	3009      	adds	r0, #9
    2a38:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, i+16+16);
    2a3a:	4621      	mov	r1, r4
    2a3c:	4630      	mov	r0, r6
    2a3e:	47b8      	blx	r7
    2a40:	3510      	adds	r5, #16
    2a42:	3401      	adds	r4, #1
    2a44:	b2e4      	uxtb	r4, r4
		for (uint8_t i = 0; i<16; i++)
    2a46:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    2a4a:	d1ed      	bne.n	2a28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
		grid_sys_state.bank_changed = 0;
    2a4c:	f04f 0b00 	mov.w	fp, #0
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    2a50:	ed9f 9b31 	vldr	d9, [pc, #196]	; 2b18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x130>
    2a54:	ed9f 8b32 	vldr	d8, [pc, #200]	; 2b20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x138>
    2a58:	e07f      	b.n	2b5a <grid_module_en16_reva_hardware_transfer_complete_cb+0x172>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    2a5a:	4937      	ldr	r1, [pc, #220]	; (2b38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2a5c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    2a60:	78c9      	ldrb	r1, [r1, #3]
    2a62:	42d1      	cmn	r1, r2
    2a64:	d405      	bmi.n	2a72 <grid_module_en16_reva_hardware_transfer_complete_cb+0x8a>
						grid_ui_encoder_array[i].rotation_value += xi;
    2a66:	4a34      	ldr	r2, [pc, #208]	; (2b38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2a68:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2a6c:	440b      	add	r3, r1
    2a6e:	70d3      	strb	r3, [r2, #3]
    2a70:	e13a      	b.n	2ce8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    2a72:	4b31      	ldr	r3, [pc, #196]	; (2b38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2a74:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2a78:	2200      	movs	r2, #0
    2a7a:	70da      	strb	r2, [r3, #3]
    2a7c:	e134      	b.n	2ce8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    2a7e:	4b2e      	ldr	r3, [pc, #184]	; (2b38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2a80:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2a84:	227f      	movs	r2, #127	; 0x7f
    2a86:	70da      	strb	r2, [r3, #3]
    2a88:	e12e      	b.n	2ce8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
								
					
				value = mod->report_ui_array[i+16].helper[bank];
				
				if (value + delta*velocityfactor < 0){
					value = 0;
    2a8a:	2400      	movs	r4, #0
    2a8c:	e000      	b.n	2a90 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
				}
				else if (value + delta*velocityfactor > 127){
					value = 127;
    2a8e:	247f      	movs	r4, #127	; 0x7f
				else{
					value += delta*velocityfactor;
				}
								

				if (value != mod->report_ui_array[i+16].helper[bank]){
    2a90:	4294      	cmp	r4, r2
    2a92:	d05d      	beq.n	2b50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    2a94:	6858      	ldr	r0, [r3, #4]
    2a96:	22b0      	movs	r2, #176	; 0xb0
    2a98:	2102      	movs	r1, #2
    2a9a:	3005      	adds	r0, #5
    2a9c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2b44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
    2aa0:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    2aa2:	4f23      	ldr	r7, [pc, #140]	; (2b30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    2aa4:	68bb      	ldr	r3, [r7, #8]
    2aa6:	4433      	add	r3, r6
    2aa8:	6858      	ldr	r0, [r3, #4]
    2aaa:	462a      	mov	r2, r5
    2aac:	2102      	movs	r1, #2
    2aae:	3007      	adds	r0, #7
    2ab0:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    2ab2:	68bb      	ldr	r3, [r7, #8]
    2ab4:	4433      	add	r3, r6
    2ab6:	6858      	ldr	r0, [r3, #4]
    2ab8:	4622      	mov	r2, r4
    2aba:	2102      	movs	r1, #2
    2abc:	3009      	adds	r0, #9
    2abe:	47c0      	blx	r8
					
					mod->report_ui_array[i+16].helper[bank] = value;
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	4433      	add	r3, r6
    2ac4:	68db      	ldr	r3, [r3, #12]
    2ac6:	9a01      	ldr	r2, [sp, #4]
    2ac8:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16);
    2aca:	f105 0110 	add.w	r1, r5, #16
    2ace:	b2c9      	uxtb	r1, r1
    2ad0:	4638      	mov	r0, r7
    2ad2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2b34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>
    2ad6:	47c8      	blx	r9
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, value*2); // LED
    2ad8:	f506 7680 	add.w	r6, r6, #256	; 0x100
    2adc:	0064      	lsls	r4, r4, #1
    2ade:	68bb      	ldr	r3, [r7, #8]
    2ae0:	4433      	add	r3, r6
    2ae2:	6858      	ldr	r0, [r3, #4]
    2ae4:	4622      	mov	r2, r4
    2ae6:	2102      	movs	r1, #2
    2ae8:	3009      	adds	r0, #9
    2aea:	47c0      	blx	r8
					mod->report_ui_array[i+16+16].helper[bank] = value*2;
    2aec:	68bb      	ldr	r3, [r7, #8]
    2aee:	441e      	add	r6, r3
    2af0:	68f3      	ldr	r3, [r6, #12]
    2af2:	9a01      	ldr	r2, [sp, #4]
    2af4:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2af6:	f105 0120 	add.w	r1, r5, #32
    2afa:	b2c9      	uxtb	r1, r1
    2afc:	4638      	mov	r0, r7
    2afe:	47c8      	blx	r9
    2b00:	e026      	b.n	2b50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2b02:	2200      	movs	r2, #0
    2b04:	4b0d      	ldr	r3, [pc, #52]	; (2b3c <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>)
    2b06:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2b08:	4b0d      	ldr	r3, [pc, #52]	; (2b40 <grid_module_en16_reva_hardware_transfer_complete_cb+0x158>)
    2b0a:	4798      	blx	r3
}
    2b0c:	b005      	add	sp, #20
    2b0e:	ecbd 8b04 	vpop	{d8-d9}
    2b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b16:	bf00      	nop
    2b18:	00000000 	.word	0x00000000
    2b1c:	40ed4c00 	.word	0x40ed4c00
    2b20:	00000000 	.word	0x00000000
    2b24:	3ff00000 	.word	0x3ff00000
    2b28:	41008000 	.word	0x41008000
    2b2c:	20003280 	.word	0x20003280
    2b30:	20003270 	.word	0x20003270
    2b34:	00004367 	.word	0x00004367
    2b38:	20007804 	.word	0x20007804
    2b3c:	20007800 	.word	0x20007800
    2b40:	000029b1 	.word	0x000029b1
    2b44:	00003c29 	.word	0x00003c29
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2b48:	4971      	ldr	r1, [pc, #452]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2b4a:	eb01 1505 	add.w	r5, r1, r5, lsl #4
    2b4e:	73ac      	strb	r4, [r5, #14]
    2b50:	f10b 0b01 	add.w	fp, fp, #1
	for (uint8_t j=0; j<16; j++){
    2b54:	f1bb 0f10 	cmp.w	fp, #16
    2b58:	d0d3      	beq.n	2b02 <grid_module_en16_reva_hardware_transfer_complete_cb+0x11a>
    2b5a:	fa5f f28b 	uxtb.w	r2, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    2b5e:	0853      	lsrs	r3, r2, #1
    2b60:	496c      	ldr	r1, [pc, #432]	; (2d14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x32c>)
    2b62:	5ccc      	ldrb	r4, [r1, r3]
    2b64:	f002 0301 	and.w	r3, r2, #1
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	411c      	asrs	r4, r3
    2b6c:	b2e4      	uxtb	r4, r4
    2b6e:	f004 060f 	and.w	r6, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2b72:	4b69      	ldr	r3, [pc, #420]	; (2d18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x330>)
    2b74:	f813 300b 	ldrb.w	r3, [r3, fp]
    2b78:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    2b7a:	429e      	cmp	r6, r3
    2b7c:	d0e8      	beq.n	2b50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    2b7e:	4b67      	ldr	r3, [pc, #412]	; (2d1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x334>)
    2b80:	f81b 5003 	ldrb.w	r5, [fp, r3]
			UI_SPI_DEBUG = j;
    2b84:	4b66      	ldr	r3, [pc, #408]	; (2d20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x338>)
    2b86:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    2b88:	08b3      	lsrs	r3, r6, #2
			uint8_t phase_a = (new_value>>1)&1;
    2b8a:	f3c6 0640 	ubfx	r6, r6, #1, #1
			uint8_t phase_b = (new_value)&1;
    2b8e:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    2b92:	4a5f      	ldr	r2, [pc, #380]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2b94:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2b98:	7852      	ldrb	r2, [r2, #1]
    2b9a:	429a      	cmp	r2, r3
    2b9c:	d04f      	beq.n	2c3e <grid_module_en16_reva_hardware_transfer_complete_cb+0x256>
				grid_ui_encoder_array[i].button_changed = 1;
    2b9e:	4a5c      	ldr	r2, [pc, #368]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2ba0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2ba4:	2101      	movs	r1, #1
    2ba6:	7091      	strb	r1, [r2, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    2ba8:	7053      	strb	r3, [r2, #1]
					velocity = 0;
    2baa:	2b00      	cmp	r3, #0
    2bac:	bf0c      	ite	eq
    2bae:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2bb2:	f04f 0a00 	movne.w	sl, #0
				uint8_t actuator = 2*velocity;
    2bb6:	fa0a f301 	lsl.w	r3, sl, r1
    2bba:	9300      	str	r3, [sp, #0]
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    2bbc:	ea4f 1705 	mov.w	r7, r5, lsl #4
    2bc0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 2d40 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>
    2bc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2bc8:	443b      	add	r3, r7
    2bca:	6858      	ldr	r0, [r3, #4]
    2bcc:	bf0c      	ite	eq
    2bce:	2290      	moveq	r2, #144	; 0x90
    2bd0:	2280      	movne	r2, #128	; 0x80
    2bd2:	2102      	movs	r1, #2
    2bd4:	3005      	adds	r0, #5
    2bd6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2d44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x35c>
    2bda:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    2bdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2be0:	443b      	add	r3, r7
    2be2:	6858      	ldr	r0, [r3, #4]
    2be4:	462a      	mov	r2, r5
    2be6:	2102      	movs	r1, #2
    2be8:	3007      	adds	r0, #7
    2bea:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    2bec:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2bf0:	443b      	add	r3, r7
    2bf2:	6858      	ldr	r0, [r3, #4]
    2bf4:	4652      	mov	r2, sl
    2bf6:	2102      	movs	r1, #2
    2bf8:	3009      	adds	r0, #9
    2bfa:	47c8      	blx	r9
				mod->report_ui_array[i].helper[0] = velocity;
    2bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2c00:	443b      	add	r3, r7
    2c02:	68db      	ldr	r3, [r3, #12]
    2c04:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    2c08:	4629      	mov	r1, r5
    2c0a:	4640      	mov	r0, r8
    2c0c:	f8df a138 	ldr.w	sl, [pc, #312]	; 2d48 <grid_module_en16_reva_hardware_transfer_complete_cb+0x360>
    2c10:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16+16].payload[9], 2, actuator); // BUTTONLED
    2c12:	f507 7740 	add.w	r7, r7, #768	; 0x300
    2c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2c1a:	443b      	add	r3, r7
    2c1c:	6858      	ldr	r0, [r3, #4]
    2c1e:	9a00      	ldr	r2, [sp, #0]
    2c20:	2102      	movs	r1, #2
    2c22:	3009      	adds	r0, #9
    2c24:	47c8      	blx	r9
				mod->report_ui_array[i+16+16+16].helper[0] = actuator;
    2c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2c2a:	441f      	add	r7, r3
    2c2c:	68fb      	ldr	r3, [r7, #12]
    2c2e:	f89d 2000 	ldrb.w	r2, [sp]
    2c32:	701a      	strb	r2, [r3, #0]
				grid_report_ui_set_changed_flag(mod, i+16+16+16);
    2c34:	f105 0130 	add.w	r1, r5, #48	; 0x30
    2c38:	b2c9      	uxtb	r1, r1
    2c3a:	4640      	mov	r0, r8
    2c3c:	47d0      	blx	sl
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    2c3e:	4b34      	ldr	r3, [pc, #208]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2c40:	eb03 1305 	add.w	r3, r3, r5, lsl #4
			if (a_now != a_prev){
    2c44:	7b5b      	ldrb	r3, [r3, #13]
    2c46:	42b3      	cmp	r3, r6
    2c48:	f43f af7e 	beq.w	2b48 <grid_module_en16_reva_hardware_transfer_complete_cb+0x160>
					delta = +1;
    2c4c:	42a6      	cmp	r6, r4
    2c4e:	bf14      	ite	ne
    2c50:	f04f 37ff 	movne.w	r7, #4294967295
    2c54:	2701      	moveq	r7, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    2c56:	4b2e      	ldr	r3, [pc, #184]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2c58:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2c5c:	735e      	strb	r6, [r3, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2c5e:	739c      	strb	r4, [r3, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    2c60:	6899      	ldr	r1, [r3, #8]
    2c62:	4830      	ldr	r0, [pc, #192]	; (2d24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    2c64:	4b30      	ldr	r3, [pc, #192]	; (2d28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x340>)
    2c66:	4798      	blx	r3
    2c68:	9003      	str	r0, [sp, #12]
				if (elapsed_time>400){
    2c6a:	9b03      	ldr	r3, [sp, #12]
    2c6c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2c70:	bf84      	itt	hi
    2c72:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2c76:	9303      	strhi	r3, [sp, #12]
				if (elapsed_time<20){
    2c78:	9b03      	ldr	r3, [sp, #12]
    2c7a:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2c7c:	bf9c      	itt	ls
    2c7e:	2314      	movls	r3, #20
    2c80:	9303      	strls	r3, [sp, #12]
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    2c82:	9b03      	ldr	r3, [sp, #12]
    2c84:	9803      	ldr	r0, [sp, #12]
    2c86:	fb00 f003 	mul.w	r0, r0, r3
    2c8a:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2c8e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2c92:	4b26      	ldr	r3, [pc, #152]	; (2d2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x344>)
    2c94:	4798      	blx	r3
    2c96:	ec53 2b19 	vmov	r2, r3, d9
    2c9a:	4c25      	ldr	r4, [pc, #148]	; (2d30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2c9c:	47a0      	blx	r4
    2c9e:	ec53 2b18 	vmov	r2, r3, d8
    2ca2:	4c24      	ldr	r4, [pc, #144]	; (2d34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x34c>)
    2ca4:	47a0      	blx	r4
    2ca6:	4b24      	ldr	r3, [pc, #144]	; (2d38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x350>)
    2ca8:	4798      	blx	r3
    2caa:	b284      	uxth	r4, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2cac:	481d      	ldr	r0, [pc, #116]	; (2d24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    2cae:	4b23      	ldr	r3, [pc, #140]	; (2d3c <grid_module_en16_reva_hardware_transfer_complete_cb+0x354>)
    2cb0:	4798      	blx	r3
    2cb2:	4b17      	ldr	r3, [pc, #92]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2cb4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2cb8:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2cba:	1c63      	adds	r3, r4, #1
    2cbc:	fb13 f307 	smulbb	r3, r3, r7
    2cc0:	b29b      	uxth	r3, r3
    2cc2:	b21a      	sxth	r2, r3
				if (delta<0){
    2cc4:	2f00      	cmp	r7, #0
    2cc6:	f6ff aec8 	blt.w	2a5a <grid_module_en16_reva_hardware_transfer_complete_cb+0x72>
				else if (delta>0){
    2cca:	2f00      	cmp	r7, #0
    2ccc:	dd0c      	ble.n	2ce8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2cce:	4910      	ldr	r1, [pc, #64]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2cd0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    2cd4:	78c9      	ldrb	r1, [r1, #3]
    2cd6:	440a      	add	r2, r1
    2cd8:	2a7f      	cmp	r2, #127	; 0x7f
    2cda:	f73f aed0 	bgt.w	2a7e <grid_module_en16_reva_hardware_transfer_complete_cb+0x96>
						grid_ui_encoder_array[i].rotation_value += xi;
    2cde:	4a0c      	ldr	r2, [pc, #48]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2ce0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2ce4:	440b      	add	r3, r1
    2ce6:	70d3      	strb	r3, [r2, #3]
				value = mod->report_ui_array[i+16].helper[bank];
    2ce8:	f105 0610 	add.w	r6, r5, #16
    2cec:	0136      	lsls	r6, r6, #4
    2cee:	4b14      	ldr	r3, [pc, #80]	; (2d40 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    2cf0:	689b      	ldr	r3, [r3, #8]
    2cf2:	4433      	add	r3, r6
    2cf4:	68da      	ldr	r2, [r3, #12]
    2cf6:	9901      	ldr	r1, [sp, #4]
    2cf8:	5c52      	ldrb	r2, [r2, r1]
				if (value + delta*velocityfactor < 0){
    2cfa:	fb04 2107 	mla	r1, r4, r7, r2
    2cfe:	2900      	cmp	r1, #0
    2d00:	f6ff aec3 	blt.w	2a8a <grid_module_en16_reva_hardware_transfer_complete_cb+0xa2>
				else if (value + delta*velocityfactor > 127){
    2d04:	297f      	cmp	r1, #127	; 0x7f
    2d06:	f73f aec2 	bgt.w	2a8e <grid_module_en16_reva_hardware_transfer_complete_cb+0xa6>
					value += delta*velocityfactor;
    2d0a:	f001 04ff 	and.w	r4, r1, #255	; 0xff
    2d0e:	e6bf      	b.n	2a90 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
    2d10:	20007804 	.word	0x20007804
    2d14:	20002258 	.word	0x20002258
    2d18:	20002240 	.word	0x20002240
    2d1c:	20000320 	.word	0x20000320
    2d20:	20002224 	.word	0x20002224
    2d24:	20003280 	.word	0x20003280
    2d28:	00003b35 	.word	0x00003b35
    2d2c:	0000bf89 	.word	0x0000bf89
    2d30:	0000c2c9 	.word	0x0000c2c9
    2d34:	0000bd11 	.word	0x0000bd11
    2d38:	0000c499 	.word	0x0000c499
    2d3c:	00003b31 	.word	0x00003b31
    2d40:	20003270 	.word	0x20003270
    2d44:	00003c29 	.word	0x00003c29
    2d48:	00004367 	.word	0x00004367

00002d4c <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2d4c:	b510      	push	{r4, lr}
    2d4e:	4b0e      	ldr	r3, [pc, #56]	; (2d88 <grid_module_en16_reva_hardware_init+0x3c>)
    2d50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2d54:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d56:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d5c:	629a      	str	r2, [r3, #40]	; 0x28
    2d5e:	4a0b      	ldr	r2, [pc, #44]	; (2d8c <grid_module_en16_reva_hardware_init+0x40>)
    2d60:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2d62:	4c0b      	ldr	r4, [pc, #44]	; (2d90 <grid_module_en16_reva_hardware_init+0x44>)
    2d64:	2103      	movs	r1, #3
    2d66:	4620      	mov	r0, r4
    2d68:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <grid_module_en16_reva_hardware_init+0x48>)
    2d6a:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2d6c:	490a      	ldr	r1, [pc, #40]	; (2d98 <grid_module_en16_reva_hardware_init+0x4c>)
    2d6e:	4620      	mov	r0, r4
    2d70:	4b0a      	ldr	r3, [pc, #40]	; (2d9c <grid_module_en16_reva_hardware_init+0x50>)
    2d72:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2d74:	490a      	ldr	r1, [pc, #40]	; (2da0 <grid_module_en16_reva_hardware_init+0x54>)
    2d76:	4620      	mov	r0, r4
    2d78:	4b0a      	ldr	r3, [pc, #40]	; (2da4 <grid_module_en16_reva_hardware_init+0x58>)
    2d7a:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2d7c:	4a0a      	ldr	r2, [pc, #40]	; (2da8 <grid_module_en16_reva_hardware_init+0x5c>)
    2d7e:	2100      	movs	r1, #0
    2d80:	4620      	mov	r0, r4
    2d82:	4b0a      	ldr	r3, [pc, #40]	; (2dac <grid_module_en16_reva_hardware_init+0x60>)
    2d84:	4798      	blx	r3
    2d86:	bd10      	pop	{r4, pc}
    2d88:	41008000 	.word	0x41008000
    2d8c:	c0000020 	.word	0xc0000020
    2d90:	20000ebc 	.word	0x20000ebc
    2d94:	000050e9 	.word	0x000050e9
    2d98:	00061a80 	.word	0x00061a80
    2d9c:	000050ad 	.word	0x000050ad
    2da0:	2000223c 	.word	0x2000223c
    2da4:	000051d1 	.word	0x000051d1
    2da8:	000029e9 	.word	0x000029e9
    2dac:	0000518d 	.word	0x0000518d

00002db0 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2db4:	b090      	sub	sp, #64	; 0x40
    2db6:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2db8:	2110      	movs	r1, #16
    2dba:	4844      	ldr	r0, [pc, #272]	; (2ecc <grid_module_en16_reva_init+0x11c>)
    2dbc:	4b44      	ldr	r3, [pc, #272]	; (2ed0 <grid_module_en16_reva_init+0x120>)
    2dbe:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16+16);
    2dc0:	2140      	movs	r1, #64	; 0x40
    2dc2:	4640      	mov	r0, r8
    2dc4:	4b43      	ldr	r3, [pc, #268]	; (2ed4 <grid_module_en16_reva_init+0x124>)
    2dc6:	4798      	blx	r3
    2dc8:	2400      	movs	r4, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2dca:	4625      	mov	r5, r4
    2dcc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2ef8 <grid_module_en16_reva_init+0x148>
    2dd0:	e031      	b.n	2e36 <grid_module_en16_reva_init+0x86>
		

		if (i<16){ // ROTATION
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2dd2:	2303      	movs	r3, #3
    2dd4:	9304      	str	r3, [sp, #16]
    2dd6:	9503      	str	r5, [sp, #12]
    2dd8:	9402      	str	r4, [sp, #8]
    2dda:	2390      	movs	r3, #144	; 0x90
    2ddc:	9301      	str	r3, [sp, #4]
    2dde:	9500      	str	r5, [sp, #0]
    2de0:	462b      	mov	r3, r5
    2de2:	2202      	movs	r2, #2
    2de4:	493c      	ldr	r1, [pc, #240]	; (2ed8 <grid_module_en16_reva_init+0x128>)
    2de6:	a808      	add	r0, sp, #32
    2de8:	4f3c      	ldr	r7, [pc, #240]	; (2edc <grid_module_en16_reva_init+0x12c>)
    2dea:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    2dec:	2702      	movs	r7, #2
    2dee:	e00d      	b.n	2e0c <grid_module_en16_reva_init+0x5c>
			
		}		
		else if (i<16+16){ // BUTTON
			type = GRID_REPORT_TYPE_BROADCAST;
		
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2df0:	2303      	movs	r3, #3
    2df2:	9304      	str	r3, [sp, #16]
    2df4:	9503      	str	r5, [sp, #12]
    2df6:	9402      	str	r4, [sp, #8]
    2df8:	2390      	movs	r3, #144	; 0x90
    2dfa:	9301      	str	r3, [sp, #4]
    2dfc:	9500      	str	r5, [sp, #0]
    2dfe:	462b      	mov	r3, r5
    2e00:	2202      	movs	r2, #2
    2e02:	4935      	ldr	r1, [pc, #212]	; (2ed8 <grid_module_en16_reva_init+0x128>)
    2e04:	a808      	add	r0, sp, #32
    2e06:	4f35      	ldr	r7, [pc, #212]	; (2edc <grid_module_en16_reva_init+0x12c>)
    2e08:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    2e0a:	2702      	movs	r7, #2
			);
	
		}

		
		uint32_t payload_length = strlen(payload_template);
    2e0c:	a808      	add	r0, sp, #32
    2e0e:	4b34      	ldr	r3, [pc, #208]	; (2ee0 <grid_module_en16_reva_init+0x130>)
    2e10:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2e12:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    2e16:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    2e1a:	2302      	movs	r3, #2
    2e1c:	9302      	str	r3, [sp, #8]
    2e1e:	ab07      	add	r3, sp, #28
    2e20:	9301      	str	r3, [sp, #4]
    2e22:	9000      	str	r0, [sp, #0]
    2e24:	ab08      	add	r3, sp, #32
    2e26:	463a      	mov	r2, r7
    2e28:	4631      	mov	r1, r6
    2e2a:	4640      	mov	r0, r8
    2e2c:	4e2d      	ldr	r6, [pc, #180]	; (2ee4 <grid_module_en16_reva_init+0x134>)
    2e2e:	47b0      	blx	r6
    2e30:	3401      	adds	r4, #1
	for(uint8_t i=0; i<16+16+16+16; i++){
    2e32:	2c40      	cmp	r4, #64	; 0x40
    2e34:	d02b      	beq.n	2e8e <grid_module_en16_reva_init+0xde>
    2e36:	b2e6      	uxtb	r6, r4
		uint8_t payload_template[30] = {0};
    2e38:	221e      	movs	r2, #30
    2e3a:	4629      	mov	r1, r5
    2e3c:	a808      	add	r0, sp, #32
    2e3e:	47c8      	blx	r9
		if (i<16){ // ROTATION
    2e40:	2e0f      	cmp	r6, #15
    2e42:	d9c6      	bls.n	2dd2 <grid_module_en16_reva_init+0x22>
		else if (i<16+16){ // BUTTON
    2e44:	2e1f      	cmp	r6, #31
    2e46:	d9d3      	bls.n	2df0 <grid_module_en16_reva_init+0x40>
		else if(i<16+16+16){ // LED (Rotation)
    2e48:	2e2f      	cmp	r6, #47	; 0x2f
    2e4a:	d810      	bhi.n	2e6e <grid_module_en16_reva_init+0xbe>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2e4c:	2303      	movs	r3, #3
    2e4e:	9304      	str	r3, [sp, #16]
    2e50:	9503      	str	r5, [sp, #12]
    2e52:	f1a4 0220 	sub.w	r2, r4, #32
    2e56:	9202      	str	r2, [sp, #8]
    2e58:	2263      	movs	r2, #99	; 0x63
    2e5a:	9201      	str	r2, [sp, #4]
    2e5c:	2701      	movs	r7, #1
    2e5e:	9700      	str	r7, [sp, #0]
    2e60:	2202      	movs	r2, #2
    2e62:	491d      	ldr	r1, [pc, #116]	; (2ed8 <grid_module_en16_reva_init+0x128>)
    2e64:	a808      	add	r0, sp, #32
    2e66:	f8df a074 	ldr.w	sl, [pc, #116]	; 2edc <grid_module_en16_reva_init+0x12c>
    2e6a:	47d0      	blx	sl
    2e6c:	e7ce      	b.n	2e0c <grid_module_en16_reva_init+0x5c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2e6e:	2303      	movs	r3, #3
    2e70:	9304      	str	r3, [sp, #16]
    2e72:	9503      	str	r5, [sp, #12]
    2e74:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    2e78:	9202      	str	r2, [sp, #8]
    2e7a:	2263      	movs	r2, #99	; 0x63
    2e7c:	9201      	str	r2, [sp, #4]
    2e7e:	2202      	movs	r2, #2
    2e80:	9200      	str	r2, [sp, #0]
    2e82:	4915      	ldr	r1, [pc, #84]	; (2ed8 <grid_module_en16_reva_init+0x128>)
    2e84:	a808      	add	r0, sp, #32
    2e86:	4f15      	ldr	r7, [pc, #84]	; (2edc <grid_module_en16_reva_init+0x12c>)
    2e88:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_LOCAL;
    2e8a:	2701      	movs	r7, #1
    2e8c:	e7be      	b.n	2e0c <grid_module_en16_reva_init+0x5c>
		
	}
	
	grid_report_sys_init(mod);
    2e8e:	4640      	mov	r0, r8
    2e90:	4b15      	ldr	r3, [pc, #84]	; (2ee8 <grid_module_en16_reva_init+0x138>)
    2e92:	4798      	blx	r3
    2e94:	4b15      	ldr	r3, [pc, #84]	; (2eec <grid_module_en16_reva_init+0x13c>)
    2e96:	2100      	movs	r1, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
		
		grid_ui_encoder_array[i].button_value = 0;
    2e98:	460a      	mov	r2, r1
		grid_ui_encoder_array[i].button_changed = 0; 
		grid_ui_encoder_array[i].rotation_value = 0;
		grid_ui_encoder_array[i].rotation_changed = 1;
    2e9a:	2001      	movs	r0, #1
		grid_ui_encoder_array[i].rotation_direction = 0;
		grid_ui_encoder_array[i].last_real_time = -1;
    2e9c:	f04f 34ff 	mov.w	r4, #4294967295
		grid_ui_encoder_array[i].controller_number = i;
    2ea0:	7019      	strb	r1, [r3, #0]
		grid_ui_encoder_array[i].button_value = 0;
    2ea2:	705a      	strb	r2, [r3, #1]
		grid_ui_encoder_array[i].button_changed = 0; 
    2ea4:	709a      	strb	r2, [r3, #2]
		grid_ui_encoder_array[i].rotation_value = 0;
    2ea6:	70da      	strb	r2, [r3, #3]
		grid_ui_encoder_array[i].rotation_changed = 1;
    2ea8:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[i].rotation_direction = 0;
    2eaa:	715a      	strb	r2, [r3, #5]
		grid_ui_encoder_array[i].last_real_time = -1;
    2eac:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[i].velocity = 0;
    2eae:	731a      	strb	r2, [r3, #12]
		grid_ui_encoder_array[i].phase_a_previous = 1;
    2eb0:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[i].phase_b_previous = 1;	
    2eb2:	7398      	strb	r0, [r3, #14]
    2eb4:	3101      	adds	r1, #1
    2eb6:	3310      	adds	r3, #16
	for (uint8_t i = 0; i<16; i++)
    2eb8:	2910      	cmp	r1, #16
    2eba:	d1f1      	bne.n	2ea0 <grid_module_en16_reva_init+0xf0>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    2ebc:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <grid_module_en16_reva_init+0x140>)
    2ebe:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2ec0:	4b0c      	ldr	r3, [pc, #48]	; (2ef4 <grid_module_en16_reva_init+0x144>)
    2ec2:	4798      	blx	r3
	
}
    2ec4:	b010      	add	sp, #64	; 0x40
    2ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eca:	bf00      	nop
    2ecc:	200077d4 	.word	0x200077d4
    2ed0:	000024bd 	.word	0x000024bd
    2ed4:	0000405d 	.word	0x0000405d
    2ed8:	0000dc04 	.word	0x0000dc04
    2edc:	0000c935 	.word	0x0000c935
    2ee0:	0000c97d 	.word	0x0000c97d
    2ee4:	00004121 	.word	0x00004121
    2ee8:	00004145 	.word	0x00004145
    2eec:	20007804 	.word	0x20007804
    2ef0:	00002d4d 	.word	0x00002d4d
    2ef4:	000029b1 	.word	0x000029b1
    2ef8:	0000c547 	.word	0x0000c547

00002efc <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2efc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2efe:	4803      	ldr	r0, [pc, #12]	; (2f0c <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2f00:	4c03      	ldr	r4, [pc, #12]	; (2f10 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2f02:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2f04:	4803      	ldr	r0, [pc, #12]	; (2f14 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2f06:	47a0      	blx	r4
    2f08:	bd10      	pop	{r4, pc}
    2f0a:	bf00      	nop
    2f0c:	20000fc8 	.word	0x20000fc8
    2f10:	00004b7d 	.word	0x00004b7d
    2f14:	2000119c 	.word	0x2000119c

00002f18 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2f18:	4bb5      	ldr	r3, [pc, #724]	; (31f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	f000 811d 	beq.w	315c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2f22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f26:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2f28:	2300      	movs	r3, #0
    2f2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2f2e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2f32:	4bb0      	ldr	r3, [pc, #704]	; (31f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2f34:	781a      	ldrb	r2, [r3, #0]
    2f36:	3208      	adds	r2, #8
    2f38:	48af      	ldr	r0, [pc, #700]	; (31f8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2f3a:	5c86      	ldrb	r6, [r0, r2]
    2f3c:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2f3e:	781a      	ldrb	r2, [r3, #0]
    2f40:	b2d2      	uxtb	r2, r2
    2f42:	5c85      	ldrb	r5, [r0, r2]
    2f44:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2f46:	781a      	ldrb	r2, [r3, #0]
    2f48:	3201      	adds	r2, #1
    2f4a:	b2d2      	uxtb	r2, r2
    2f4c:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2f4e:	781a      	ldrb	r2, [r3, #0]
    2f50:	f002 0207 	and.w	r2, r2, #7
    2f54:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2f56:	781b      	ldrb	r3, [r3, #0]
    2f58:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2f60:	4ba6      	ldr	r3, [pc, #664]	; (31fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f62:	bf14      	ite	ne
    2f64:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f68:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2f6c:	4ba1      	ldr	r3, [pc, #644]	; (31f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2f78:	4ba0      	ldr	r3, [pc, #640]	; (31fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f7a:	bf14      	ite	ne
    2f7c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f80:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2f84:	4b9b      	ldr	r3, [pc, #620]	; (31f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2f90:	4b9a      	ldr	r3, [pc, #616]	; (31fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f92:	bf14      	ite	ne
    2f94:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f98:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2f9c:	2302      	movs	r3, #2
    2f9e:	f10d 0206 	add.w	r2, sp, #6
    2fa2:	2100      	movs	r1, #0
    2fa4:	4896      	ldr	r0, [pc, #600]	; (3200 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2fa6:	4c97      	ldr	r4, [pc, #604]	; (3204 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2fa8:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2faa:	2302      	movs	r3, #2
    2fac:	aa01      	add	r2, sp, #4
    2fae:	2100      	movs	r1, #0
    2fb0:	4895      	ldr	r0, [pc, #596]	; (3208 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2fb2:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2fb4:	f8df b268 	ldr.w	fp, [pc, #616]	; 3220 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2fb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2fbc:	47d8      	blx	fp
    2fbe:	f8df a264 	ldr.w	sl, [pc, #612]	; 3224 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
    2fc2:	a389      	add	r3, pc, #548	; (adr r3, 31e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fc8:	47d0      	blx	sl
    2fca:	f8df 925c 	ldr.w	r9, [pc, #604]	; 3228 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x310>
    2fce:	47c8      	blx	r9
    2fd0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2fd4:	42a0      	cmp	r0, r4
    2fd6:	bf28      	it	cs
    2fd8:	4620      	movcs	r0, r4
    2fda:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2fdc:	fa1f f880 	uxth.w	r8, r0
    2fe0:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2fe4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2fe8:	47d8      	blx	fp
    2fea:	a37f      	add	r3, pc, #508	; (adr r3, 31e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2fec:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ff0:	47d0      	blx	sl
    2ff2:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2ff4:	42a0      	cmp	r0, r4
    2ff6:	bf28      	it	cs
    2ff8:	4620      	movcs	r0, r4
    2ffa:	b280      	uxth	r0, r0
    2ffc:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    3000:	f1a5 0308 	sub.w	r3, r5, #8
    3004:	b2db      	uxtb	r3, r3
    3006:	2b01      	cmp	r3, #1
    3008:	f240 80d5 	bls.w	31b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    300c:	2e0d      	cmp	r6, #13
    300e:	f240 80be 	bls.w	318e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    3012:	f64e 2360 	movw	r3, #60000	; 0xea60
    3016:	4598      	cmp	r8, r3
    3018:	f240 80a6 	bls.w	3168 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			adcresult_0 = 0;
    301c:	2300      	movs	r3, #0
    301e:	f8ad 3006 	strh.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    3022:	f04f 0e01 	mov.w	lr, #1
			adcresult_0_valid = 1;
		}
		
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    3026:	f64e 2360 	movw	r3, #60000	; 0xea60
    302a:	4298      	cmp	r0, r3
    302c:	f240 80a7 	bls.w	317e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
			adcresult_1 = 0;
    3030:	2300      	movs	r3, #0
    3032:	f8ad 3004 	strh.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    3036:	2401      	movs	r4, #1
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0] && adcresult_0_valid){
    3038:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
    303c:	3b04      	subs	r3, #4
    303e:	011f      	lsls	r7, r3, #4
    3040:	4b72      	ldr	r3, [pc, #456]	; (320c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    3042:	689b      	ldr	r3, [r3, #8]
    3044:	443b      	add	r3, r7
    3046:	68da      	ldr	r2, [r3, #12]
    3048:	7812      	ldrb	r2, [r2, #0]
    304a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    304e:	4291      	cmp	r1, r2
    3050:	d03e      	beq.n	30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
    3052:	f1be 0f00 	cmp.w	lr, #0
    3056:	d03b      	beq.n	30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    3058:	2a00      	cmp	r2, #0
    305a:	bf0c      	ite	eq
    305c:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    3060:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    3064:	6858      	ldr	r0, [r3, #4]
    3066:	bf0c      	ite	eq
    3068:	2290      	moveq	r2, #144	; 0x90
    306a:	2280      	movne	r2, #128	; 0x80
    306c:	2102      	movs	r1, #2
    306e:	3005      	adds	r0, #5
    3070:	f8df a19c 	ldr.w	sl, [pc, #412]	; 3210 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
    3074:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    3076:	f8df 8194 	ldr.w	r8, [pc, #404]	; 320c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
    307a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    307e:	443b      	add	r3, r7
    3080:	6858      	ldr	r0, [r3, #4]
    3082:	4632      	mov	r2, r6
    3084:	2102      	movs	r1, #2
    3086:	3007      	adds	r0, #7
    3088:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    308a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    308e:	443b      	add	r3, r7
    3090:	6858      	ldr	r0, [r3, #4]
    3092:	464a      	mov	r2, r9
    3094:	2102      	movs	r1, #2
    3096:	3009      	adds	r0, #9
    3098:	47d0      	blx	sl
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    309a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    309e:	443b      	add	r3, r7
    30a0:	68db      	ldr	r3, [r3, #12]
    30a2:	f883 9000 	strb.w	r9, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    30a6:	1f31      	subs	r1, r6, #4
    30a8:	b2c9      	uxtb	r1, r1
    30aa:	4640      	mov	r0, r8
    30ac:	f8df b17c 	ldr.w	fp, [pc, #380]	; 322c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    30b0:	47d8      	blx	fp
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4+12].payload[9], 2, actuator);
    30b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    30b6:	443b      	add	r3, r7
    30b8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    30bc:	ea4f 0249 	mov.w	r2, r9, lsl #1
    30c0:	2102      	movs	r1, #2
    30c2:	3009      	adds	r0, #9
    30c4:	47d0      	blx	sl
			grid_report_ui_set_changed_flag(mod, adc_index_0-4+12);
    30c6:	f106 0108 	add.w	r1, r6, #8
    30ca:	b2c9      	uxtb	r1, r1
    30cc:	4640      	mov	r0, r8
    30ce:	47d8      	blx	fp
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0] && adcresult_1_valid){
    30d0:	f105 5380 	add.w	r3, r5, #268435456	; 0x10000000
    30d4:	3b04      	subs	r3, #4
    30d6:	011e      	lsls	r6, r3, #4
    30d8:	4b4c      	ldr	r3, [pc, #304]	; (320c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    30da:	689b      	ldr	r3, [r3, #8]
    30dc:	4433      	add	r3, r6
    30de:	68da      	ldr	r2, [r3, #12]
    30e0:	7812      	ldrb	r2, [r2, #0]
    30e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    30e6:	4291      	cmp	r1, r2
    30e8:	d065      	beq.n	31b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    30ea:	2c00      	cmp	r4, #0
    30ec:	d063      	beq.n	31b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    30ee:	2a00      	cmp	r2, #0
    30f0:	bf0c      	ite	eq
    30f2:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    30f6:	f04f 0800 	movne.w	r8, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    30fa:	6858      	ldr	r0, [r3, #4]
    30fc:	bf0c      	ite	eq
    30fe:	2290      	moveq	r2, #144	; 0x90
    3100:	2280      	movne	r2, #128	; 0x80
    3102:	2102      	movs	r1, #2
    3104:	3005      	adds	r0, #5
    3106:	4f42      	ldr	r7, [pc, #264]	; (3210 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    3108:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_1);
    310a:	4c40      	ldr	r4, [pc, #256]	; (320c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    310c:	68a3      	ldr	r3, [r4, #8]
    310e:	4433      	add	r3, r6
    3110:	6858      	ldr	r0, [r3, #4]
    3112:	462a      	mov	r2, r5
    3114:	2102      	movs	r1, #2
    3116:	3007      	adds	r0, #7
    3118:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);		
    311a:	68a3      	ldr	r3, [r4, #8]
    311c:	4433      	add	r3, r6
    311e:	6858      	ldr	r0, [r3, #4]
    3120:	4642      	mov	r2, r8
    3122:	2102      	movs	r1, #2
    3124:	3009      	adds	r0, #9
    3126:	47b8      	blx	r7
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;		
    3128:	68a3      	ldr	r3, [r4, #8]
    312a:	4433      	add	r3, r6
    312c:	68db      	ldr	r3, [r3, #12]
    312e:	f883 8000 	strb.w	r8, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    3132:	1f29      	subs	r1, r5, #4
    3134:	b2c9      	uxtb	r1, r1
    3136:	4620      	mov	r0, r4
    3138:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 322c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    313c:	47c8      	blx	r9
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4+12].payload[9], 2, actuator);		
    313e:	68a3      	ldr	r3, [r4, #8]
    3140:	4433      	add	r3, r6
    3142:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    3146:	ea4f 0248 	mov.w	r2, r8, lsl #1
    314a:	2102      	movs	r1, #2
    314c:	3009      	adds	r0, #9
    314e:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1-4+12);
    3150:	f105 0108 	add.w	r1, r5, #8
    3154:	b2c9      	uxtb	r1, r1
    3156:	4620      	mov	r0, r4
    3158:	47c8      	blx	r9
    315a:	e02c      	b.n	31b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    315c:	4a24      	ldr	r2, [pc, #144]	; (31f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    315e:	7813      	ldrb	r3, [r2, #0]
    3160:	3301      	adds	r3, #1
    3162:	b2db      	uxtb	r3, r3
    3164:	7013      	strb	r3, [r2, #0]
    3166:	4770      	bx	lr
		else if (adcresult_0<200){
    3168:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
			adcresult_0 = 127;
    316c:	bf9d      	ittte	ls
    316e:	237f      	movls	r3, #127	; 0x7f
    3170:	f8ad 3006 	strhls.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    3174:	f04f 0e01 	movls.w	lr, #1
		uint8_t adcresult_0_valid = 0;
    3178:	f04f 0e00 	movhi.w	lr, #0
    317c:	e753      	b.n	3026 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x10e>
		else if (adcresult_1<200){
    317e:	28c7      	cmp	r0, #199	; 0xc7
			adcresult_1 = 127;
    3180:	bf9d      	ittte	ls
    3182:	237f      	movls	r3, #127	; 0x7f
    3184:	f8ad 3004 	strhls.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    3188:	2401      	movls	r4, #1
		uint8_t adcresult_1_valid = 0;
    318a:	2400      	movhi	r4, #0
    318c:	e754      	b.n	3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x120>
		//CRITICAL_SECTION_LEAVE()

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    318e:	2d01      	cmp	r5, #1
    3190:	d919      	bls.n	31c6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ae>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
						
			grid_ain_add_sample(adc_index_0, adcresult_0);
    3192:	b2b9      	uxth	r1, r7
    3194:	4630      	mov	r0, r6
    3196:	4c1f      	ldr	r4, [pc, #124]	; (3214 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    3198:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    319a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    319e:	4628      	mov	r0, r5
    31a0:	47a0      	blx	r4
			
		
		
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_0)){
    31a2:	4630      	mov	r0, r6
    31a4:	4b1c      	ldr	r3, [pc, #112]	; (3218 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    31a6:	4798      	blx	r3
    31a8:	2800      	cmp	r0, #0
    31aa:	d141      	bne.n	3230 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x318>
		//CRITICAL_SECTION_LEAVE()
	
	
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_1)){
    31ac:	4628      	mov	r0, r5
    31ae:	4b1a      	ldr	r3, [pc, #104]	; (3218 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    31b0:	4798      	blx	r3
    31b2:	2800      	cmp	r0, #0
    31b4:	d169      	bne.n	328a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x372>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    31b6:	2200      	movs	r2, #0
    31b8:	4b0d      	ldr	r3, [pc, #52]	; (31f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    31ba:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    31bc:	4b17      	ldr	r3, [pc, #92]	; (321c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>)
    31be:	4798      	blx	r3
}
    31c0:	b003      	add	sp, #12
    31c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    31c6:	b2b9      	uxth	r1, r7
    31c8:	f64f 78ff 	movw	r8, #65535	; 0xffff
    31cc:	eba8 0101 	sub.w	r1, r8, r1
    31d0:	4630      	mov	r0, r6
    31d2:	4c10      	ldr	r4, [pc, #64]	; (3214 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    31d4:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    31d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    31da:	eba8 0101 	sub.w	r1, r8, r1
    31de:	4628      	mov	r0, r5
    31e0:	47a0      	blx	r4
    31e2:	e7de      	b.n	31a2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28a>
    31e4:	f3af 8000 	nop.w
    31e8:	47ae147b 	.word	0x47ae147b
    31ec:	3ff07ae1 	.word	0x3ff07ae1
    31f0:	20002254 	.word	0x20002254
    31f4:	20007769 	.word	0x20007769
    31f8:	20000334 	.word	0x20000334
    31fc:	41008000 	.word	0x41008000
    3200:	20000fc8 	.word	0x20000fc8
    3204:	00004a9d 	.word	0x00004a9d
    3208:	2000119c 	.word	0x2000119c
    320c:	20003270 	.word	0x20003270
    3210:	00003c29 	.word	0x00003c29
    3214:	00001219 	.word	0x00001219
    3218:	00001315 	.word	0x00001315
    321c:	00002efd 	.word	0x00002efd
    3220:	0000bfa9 	.word	0x0000bfa9
    3224:	0000c075 	.word	0x0000c075
    3228:	0000c499 	.word	0x0000c499
    322c:	00004367 	.word	0x00004367
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    3230:	2107      	movs	r1, #7
    3232:	4630      	mov	r0, r6
    3234:	4b2b      	ldr	r3, [pc, #172]	; (32e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    3236:	4798      	blx	r3
    3238:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    323a:	ea4f 1a06 	mov.w	sl, r6, lsl #4
    323e:	4c2a      	ldr	r4, [pc, #168]	; (32e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    3240:	68a3      	ldr	r3, [r4, #8]
    3242:	4453      	add	r3, sl
    3244:	6858      	ldr	r0, [r3, #4]
    3246:	4632      	mov	r2, r6
    3248:	2102      	movs	r1, #2
    324a:	3007      	adds	r0, #7
    324c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 32ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>
    3250:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    3252:	68a3      	ldr	r3, [r4, #8]
    3254:	4453      	add	r3, sl
    3256:	6858      	ldr	r0, [r3, #4]
    3258:	b2fa      	uxtb	r2, r7
    325a:	2102      	movs	r1, #2
    325c:	3009      	adds	r0, #9
    325e:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);	
    3260:	4631      	mov	r1, r6
    3262:	4620      	mov	r0, r4
    3264:	f8df 9088 	ldr.w	r9, [pc, #136]	; 32f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    3268:	47c8      	blx	r9
			uint8_t actuator = 2*value;
    326a:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 12].payload[9], 2, actuator);			
    326c:	68a3      	ldr	r3, [r4, #8]
    326e:	4453      	add	r3, sl
    3270:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    3274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3278:	2102      	movs	r1, #2
    327a:	3009      	adds	r0, #9
    327c:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0 + 12);
    327e:	f106 010c 	add.w	r1, r6, #12
    3282:	b2c9      	uxtb	r1, r1
    3284:	4620      	mov	r0, r4
    3286:	47c8      	blx	r9
    3288:	e790      	b.n	31ac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x294>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    328a:	2107      	movs	r1, #7
    328c:	4628      	mov	r0, r5
    328e:	4b15      	ldr	r3, [pc, #84]	; (32e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    3290:	4798      	blx	r3
    3292:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    3294:	ea4f 1905 	mov.w	r9, r5, lsl #4
    3298:	4c13      	ldr	r4, [pc, #76]	; (32e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    329a:	68a3      	ldr	r3, [r4, #8]
    329c:	444b      	add	r3, r9
    329e:	6858      	ldr	r0, [r3, #4]
    32a0:	462a      	mov	r2, r5
    32a2:	2102      	movs	r1, #2
    32a4:	3007      	adds	r0, #7
    32a6:	4f11      	ldr	r7, [pc, #68]	; (32ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    32a8:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    32aa:	68a3      	ldr	r3, [r4, #8]
    32ac:	444b      	add	r3, r9
    32ae:	6858      	ldr	r0, [r3, #4]
    32b0:	b2f2      	uxtb	r2, r6
    32b2:	2102      	movs	r1, #2
    32b4:	3009      	adds	r0, #9
    32b6:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    32b8:	4629      	mov	r1, r5
    32ba:	4620      	mov	r0, r4
    32bc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 32f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    32c0:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    32c2:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 12].payload[9], 2, actuator);		
    32c4:	68a3      	ldr	r3, [r4, #8]
    32c6:	444b      	add	r3, r9
    32c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    32cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    32d0:	2102      	movs	r1, #2
    32d2:	3009      	adds	r0, #9
    32d4:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1 + 12);
    32d6:	f105 010c 	add.w	r1, r5, #12
    32da:	b2c9      	uxtb	r1, r1
    32dc:	4620      	mov	r0, r4
    32de:	47c0      	blx	r8
    32e0:	e769      	b.n	31b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    32e2:	bf00      	nop
    32e4:	00001325 	.word	0x00001325
    32e8:	20003270 	.word	0x20003270
    32ec:	00003c29 	.word	0x00003c29
    32f0:	00004367 	.word	0x00004367

000032f4 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    32f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    32f6:	4f0b      	ldr	r7, [pc, #44]	; (3324 <grid_module_pbf4_reva_hardware_init+0x30>)
    32f8:	4c0b      	ldr	r4, [pc, #44]	; (3328 <grid_module_pbf4_reva_hardware_init+0x34>)
    32fa:	463b      	mov	r3, r7
    32fc:	2200      	movs	r2, #0
    32fe:	4611      	mov	r1, r2
    3300:	4620      	mov	r0, r4
    3302:	4e0a      	ldr	r6, [pc, #40]	; (332c <grid_module_pbf4_reva_hardware_init+0x38>)
    3304:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3306:	4d0a      	ldr	r5, [pc, #40]	; (3330 <grid_module_pbf4_reva_hardware_init+0x3c>)
    3308:	463b      	mov	r3, r7
    330a:	2200      	movs	r2, #0
    330c:	4611      	mov	r1, r2
    330e:	4628      	mov	r0, r5
    3310:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    3312:	2100      	movs	r1, #0
    3314:	4620      	mov	r0, r4
    3316:	4c07      	ldr	r4, [pc, #28]	; (3334 <grid_module_pbf4_reva_hardware_init+0x40>)
    3318:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    331a:	2100      	movs	r1, #0
    331c:	4628      	mov	r0, r5
    331e:	47a0      	blx	r4
    3320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3322:	bf00      	nop
    3324:	00002f19 	.word	0x00002f19
    3328:	20000fc8 	.word	0x20000fc8
    332c:	00004a1d 	.word	0x00004a1d
    3330:	2000119c 	.word	0x2000119c
    3334:	000049dd 	.word	0x000049dd

00003338 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    333c:	b090      	sub	sp, #64	; 0x40
    333e:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3340:	2307      	movs	r3, #7
    3342:	220e      	movs	r2, #14
    3344:	2105      	movs	r1, #5
    3346:	2010      	movs	r0, #16
    3348:	4c33      	ldr	r4, [pc, #204]	; (3418 <grid_module_pbf4_reva_init+0xe0>)
    334a:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    334c:	210c      	movs	r1, #12
    334e:	4833      	ldr	r0, [pc, #204]	; (341c <grid_module_pbf4_reva_init+0xe4>)
    3350:	4b33      	ldr	r3, [pc, #204]	; (3420 <grid_module_pbf4_reva_init+0xe8>)
    3352:	4798      	blx	r3
	
	grid_ui_model_init(mod, 24);
    3354:	2118      	movs	r1, #24
    3356:	4640      	mov	r0, r8
    3358:	4b32      	ldr	r3, [pc, #200]	; (3424 <grid_module_pbf4_reva_init+0xec>)
    335a:	4798      	blx	r3
    335c:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<24; i++){
		
		uint8_t payload_template[30] = {0};
    335e:	462c      	mov	r4, r5
    3360:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 3444 <grid_module_pbf4_reva_init+0x10c>
    3364:	e034      	b.n	33d0 <grid_module_pbf4_reva_init+0x98>
		
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
			
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    3366:	2303      	movs	r3, #3
    3368:	9304      	str	r3, [sp, #16]
    336a:	9403      	str	r4, [sp, #12]
    336c:	9502      	str	r5, [sp, #8]
    336e:	23b0      	movs	r3, #176	; 0xb0
    3370:	9301      	str	r3, [sp, #4]
    3372:	9400      	str	r4, [sp, #0]
    3374:	4623      	mov	r3, r4
    3376:	2202      	movs	r2, #2
    3378:	492b      	ldr	r1, [pc, #172]	; (3428 <grid_module_pbf4_reva_init+0xf0>)
    337a:	a808      	add	r0, sp, #32
    337c:	4f2b      	ldr	r7, [pc, #172]	; (342c <grid_module_pbf4_reva_init+0xf4>)
    337e:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    3380:	2702      	movs	r7, #2
    3382:	e00f      	b.n	33a4 <grid_module_pbf4_reva_init+0x6c>
		}
		else{ // LED -> Grid LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    3384:	2303      	movs	r3, #3
    3386:	9304      	str	r3, [sp, #16]
    3388:	9403      	str	r4, [sp, #12]
    338a:	f1a5 020c 	sub.w	r2, r5, #12
    338e:	9202      	str	r2, [sp, #8]
    3390:	2263      	movs	r2, #99	; 0x63
    3392:	9201      	str	r2, [sp, #4]
    3394:	2701      	movs	r7, #1
    3396:	9700      	str	r7, [sp, #0]
    3398:	2202      	movs	r2, #2
    339a:	4923      	ldr	r1, [pc, #140]	; (3428 <grid_module_pbf4_reva_init+0xf0>)
    339c:	a808      	add	r0, sp, #32
    339e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 342c <grid_module_pbf4_reva_init+0xf4>
    33a2:	47d0      	blx	sl

			);			
		}

		
		uint8_t payload_length = strlen(payload_template);
    33a4:	a808      	add	r0, sp, #32
    33a6:	4b22      	ldr	r3, [pc, #136]	; (3430 <grid_module_pbf4_reva_init+0xf8>)
    33a8:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    33aa:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    33ae:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    33b2:	2302      	movs	r3, #2
    33b4:	9302      	str	r3, [sp, #8]
    33b6:	ab07      	add	r3, sp, #28
    33b8:	9301      	str	r3, [sp, #4]
    33ba:	b2c0      	uxtb	r0, r0
    33bc:	9000      	str	r0, [sp, #0]
    33be:	ab08      	add	r3, sp, #32
    33c0:	463a      	mov	r2, r7
    33c2:	4631      	mov	r1, r6
    33c4:	4640      	mov	r0, r8
    33c6:	4e1b      	ldr	r6, [pc, #108]	; (3434 <grid_module_pbf4_reva_init+0xfc>)
    33c8:	47b0      	blx	r6
    33ca:	3501      	adds	r5, #1
	for(uint8_t i=0; i<24; i++){
    33cc:	2d18      	cmp	r5, #24
    33ce:	d018      	beq.n	3402 <grid_module_pbf4_reva_init+0xca>
    33d0:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    33d2:	221e      	movs	r2, #30
    33d4:	4621      	mov	r1, r4
    33d6:	a808      	add	r0, sp, #32
    33d8:	47c8      	blx	r9
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    33da:	2e07      	cmp	r6, #7
    33dc:	d9c3      	bls.n	3366 <grid_module_pbf4_reva_init+0x2e>
		else if (i<12){ // BUTTONS -> MIDI Note On/Off
    33de:	2e0b      	cmp	r6, #11
    33e0:	d8d0      	bhi.n	3384 <grid_module_pbf4_reva_init+0x4c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    33e2:	2303      	movs	r3, #3
    33e4:	9304      	str	r3, [sp, #16]
    33e6:	9403      	str	r4, [sp, #12]
    33e8:	1d2b      	adds	r3, r5, #4
    33ea:	9302      	str	r3, [sp, #8]
    33ec:	2390      	movs	r3, #144	; 0x90
    33ee:	9301      	str	r3, [sp, #4]
    33f0:	9400      	str	r4, [sp, #0]
    33f2:	4623      	mov	r3, r4
    33f4:	2202      	movs	r2, #2
    33f6:	490c      	ldr	r1, [pc, #48]	; (3428 <grid_module_pbf4_reva_init+0xf0>)
    33f8:	a808      	add	r0, sp, #32
    33fa:	4f0c      	ldr	r7, [pc, #48]	; (342c <grid_module_pbf4_reva_init+0xf4>)
    33fc:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    33fe:	2702      	movs	r7, #2
    3400:	e7d0      	b.n	33a4 <grid_module_pbf4_reva_init+0x6c>
		
	}
	
	grid_report_sys_init(mod);
    3402:	4640      	mov	r0, r8
    3404:	4b0c      	ldr	r3, [pc, #48]	; (3438 <grid_module_pbf4_reva_init+0x100>)
    3406:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    3408:	4b0c      	ldr	r3, [pc, #48]	; (343c <grid_module_pbf4_reva_init+0x104>)
    340a:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <grid_module_pbf4_reva_init+0x108>)
    340e:	4798      	blx	r3
	
    3410:	b010      	add	sp, #64	; 0x40
    3412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3416:	bf00      	nop
    3418:	000011cd 	.word	0x000011cd
    341c:	200077d4 	.word	0x200077d4
    3420:	000024bd 	.word	0x000024bd
    3424:	0000405d 	.word	0x0000405d
    3428:	0000dc04 	.word	0x0000dc04
    342c:	0000c935 	.word	0x0000c935
    3430:	0000c97d 	.word	0x0000c97d
    3434:	00004121 	.word	0x00004121
    3438:	00004145 	.word	0x00004145
    343c:	000032f5 	.word	0x000032f5
    3440:	00002efd 	.word	0x00002efd
    3444:	0000c547 	.word	0x0000c547

00003448 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3448:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    344a:	4803      	ldr	r0, [pc, #12]	; (3458 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    344c:	4c03      	ldr	r4, [pc, #12]	; (345c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    344e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3450:	4803      	ldr	r0, [pc, #12]	; (3460 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    3452:	47a0      	blx	r4
    3454:	bd10      	pop	{r4, pc}
    3456:	bf00      	nop
    3458:	20000fc8 	.word	0x20000fc8
    345c:	00004b7d 	.word	0x00004b7d
    3460:	2000119c 	.word	0x2000119c
    3464:	00000000 	.word	0x00000000

00003468 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3468:	4b7b      	ldr	r3, [pc, #492]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	2b00      	cmp	r3, #0
    346e:	f000 8085 	beq.w	357c <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3476:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3478:	2300      	movs	r3, #0
    347a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    347e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    3482:	4b75      	ldr	r3, [pc, #468]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3484:	785a      	ldrb	r2, [r3, #1]
    3486:	3208      	adds	r2, #8
    3488:	4874      	ldr	r0, [pc, #464]	; (365c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    348a:	5c85      	ldrb	r5, [r0, r2]
    348c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    348e:	785a      	ldrb	r2, [r3, #1]
    3490:	b2d2      	uxtb	r2, r2
    3492:	5c84      	ldrb	r4, [r0, r2]
    3494:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3496:	785a      	ldrb	r2, [r3, #1]
    3498:	3201      	adds	r2, #1
    349a:	b2d2      	uxtb	r2, r2
    349c:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    349e:	785a      	ldrb	r2, [r3, #1]
    34a0:	f002 0207 	and.w	r2, r2, #7
    34a4:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    34a6:	785b      	ldrb	r3, [r3, #1]
    34a8:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    34b0:	4b6b      	ldr	r3, [pc, #428]	; (3660 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    34b2:	bf14      	ite	ne
    34b4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34b8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    34bc:	4b66      	ldr	r3, [pc, #408]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    34be:	785b      	ldrb	r3, [r3, #1]
    34c0:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    34c8:	4b65      	ldr	r3, [pc, #404]	; (3660 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    34ca:	bf14      	ite	ne
    34cc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34d0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    34d4:	4b60      	ldr	r3, [pc, #384]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    34d6:	785b      	ldrb	r3, [r3, #1]
    34d8:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    34e0:	4b5f      	ldr	r3, [pc, #380]	; (3660 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    34e2:	bf14      	ite	ne
    34e4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34e8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    34ec:	2302      	movs	r3, #2
    34ee:	f10d 0206 	add.w	r2, sp, #6
    34f2:	2100      	movs	r1, #0
    34f4:	485b      	ldr	r0, [pc, #364]	; (3664 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    34f6:	4e5c      	ldr	r6, [pc, #368]	; (3668 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    34f8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    34fa:	2302      	movs	r3, #2
    34fc:	aa01      	add	r2, sp, #4
    34fe:	2100      	movs	r1, #0
    3500:	485a      	ldr	r0, [pc, #360]	; (366c <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3502:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    3504:	f8df a180 	ldr.w	sl, [pc, #384]	; 3688 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>
    3508:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    350c:	47d0      	blx	sl
    350e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 368c <grid_module_po16_revb_hardware_transfer_complete_cb+0x224>
    3512:	a34f      	add	r3, pc, #316	; (adr r3, 3650 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    3514:	e9d3 2300 	ldrd	r2, r3, [r3]
    3518:	47c8      	blx	r9
    351a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 3690 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>
    351e:	47c0      	blx	r8
    3520:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3524:	42b0      	cmp	r0, r6
    3526:	bf28      	it	cs
    3528:	4630      	movcs	r0, r6
    352a:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    352c:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3530:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    3534:	47d0      	blx	sl
    3536:	a346      	add	r3, pc, #280	; (adr r3, 3650 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    3538:	e9d3 2300 	ldrd	r2, r3, [r3]
    353c:	47c8      	blx	r9
    353e:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3540:	42b0      	cmp	r0, r6
    3542:	bf28      	it	cs
    3544:	4630      	movcs	r0, r6
    3546:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    354a:	b2b9      	uxth	r1, r7
    354c:	4628      	mov	r0, r5
    354e:	4e48      	ldr	r6, [pc, #288]	; (3670 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>)
    3550:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    3552:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3556:	4620      	mov	r0, r4
    3558:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    355a:	4628      	mov	r0, r5
    355c:	4b45      	ldr	r3, [pc, #276]	; (3674 <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    355e:	4798      	blx	r3
    3560:	b990      	cbnz	r0, 3588 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    3562:	4620      	mov	r0, r4
    3564:	4b43      	ldr	r3, [pc, #268]	; (3674 <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    3566:	4798      	blx	r3
    3568:	2800      	cmp	r0, #0
    356a:	d13f      	bne.n	35ec <grid_module_po16_revb_hardware_transfer_complete_cb+0x184>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    356c:	2200      	movs	r2, #0
    356e:	4b3a      	ldr	r3, [pc, #232]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3570:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    3572:	4b41      	ldr	r3, [pc, #260]	; (3678 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>)
    3574:	4798      	blx	r3
}
    3576:	b002      	add	sp, #8
    3578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    357c:	4a36      	ldr	r2, [pc, #216]	; (3658 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    357e:	7813      	ldrb	r3, [r2, #0]
    3580:	3301      	adds	r3, #1
    3582:	b2db      	uxtb	r3, r3
    3584:	7013      	strb	r3, [r2, #0]
    3586:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3588:	2107      	movs	r1, #7
    358a:	4628      	mov	r0, r5
    358c:	4b3b      	ldr	r3, [pc, #236]	; (367c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    358e:	4798      	blx	r3
    3590:	4681      	mov	r9, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3592:	012f      	lsls	r7, r5, #4
    3594:	4e3a      	ldr	r6, [pc, #232]	; (3680 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    3596:	68b3      	ldr	r3, [r6, #8]
    3598:	443b      	add	r3, r7
    359a:	6858      	ldr	r0, [r3, #4]
    359c:	462a      	mov	r2, r5
    359e:	2102      	movs	r1, #2
    35a0:	3007      	adds	r0, #7
    35a2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3684 <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>
    35a6:	47c0      	blx	r8
    35a8:	fa5f fa89 	uxtb.w	sl, r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    35ac:	68b3      	ldr	r3, [r6, #8]
    35ae:	443b      	add	r3, r7
    35b0:	6858      	ldr	r0, [r3, #4]
    35b2:	4652      	mov	r2, sl
    35b4:	2102      	movs	r1, #2
    35b6:	3009      	adds	r0, #9
    35b8:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = value;
    35ba:	68b3      	ldr	r3, [r6, #8]
    35bc:	443b      	add	r3, r7
    35be:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    35c0:	f883 9000 	strb.w	r9, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    35c4:	4629      	mov	r1, r5
    35c6:	4630      	mov	r0, r6
    35c8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3694 <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    35cc:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0+16].payload[9], 2, value*2);
    35ce:	68b3      	ldr	r3, [r6, #8]
    35d0:	441f      	add	r7, r3
    35d2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    35d6:	ea4f 024a 	mov.w	r2, sl, lsl #1
    35da:	2102      	movs	r1, #2
    35dc:	3009      	adds	r0, #9
    35de:	47c0      	blx	r8
		grid_report_ui_set_changed_flag(mod, adc_index_0+16);
    35e0:	f105 0110 	add.w	r1, r5, #16
    35e4:	b2c9      	uxtb	r1, r1
    35e6:	4630      	mov	r0, r6
    35e8:	47c8      	blx	r9
    35ea:	e7ba      	b.n	3562 <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    35ec:	2107      	movs	r1, #7
    35ee:	4620      	mov	r0, r4
    35f0:	4b22      	ldr	r3, [pc, #136]	; (367c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    35f2:	4798      	blx	r3
    35f4:	4680      	mov	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    35f6:	0126      	lsls	r6, r4, #4
    35f8:	4d21      	ldr	r5, [pc, #132]	; (3680 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    35fa:	68ab      	ldr	r3, [r5, #8]
    35fc:	4433      	add	r3, r6
    35fe:	6858      	ldr	r0, [r3, #4]
    3600:	4622      	mov	r2, r4
    3602:	2102      	movs	r1, #2
    3604:	3007      	adds	r0, #7
    3606:	4f1f      	ldr	r7, [pc, #124]	; (3684 <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>)
    3608:	47b8      	blx	r7
    360a:	fa5f f988 	uxtb.w	r9, r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    360e:	68ab      	ldr	r3, [r5, #8]
    3610:	4433      	add	r3, r6
    3612:	6858      	ldr	r0, [r3, #4]
    3614:	464a      	mov	r2, r9
    3616:	2102      	movs	r1, #2
    3618:	3009      	adds	r0, #9
    361a:	47b8      	blx	r7
		mod->report_ui_array[adc_index_1].helper[0] = value;
    361c:	68ab      	ldr	r3, [r5, #8]
    361e:	4433      	add	r3, r6
    3620:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3622:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    3626:	4621      	mov	r1, r4
    3628:	4628      	mov	r0, r5
    362a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3694 <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    362e:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1+16].payload[9], 2, value*2);
    3630:	68ab      	ldr	r3, [r5, #8]
    3632:	441e      	add	r6, r3
    3634:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
    3638:	ea4f 0249 	mov.w	r2, r9, lsl #1
    363c:	2102      	movs	r1, #2
    363e:	3009      	adds	r0, #9
    3640:	47b8      	blx	r7
		grid_report_ui_set_changed_flag(mod, adc_index_1+16);
    3642:	f104 0110 	add.w	r1, r4, #16
    3646:	b2c9      	uxtb	r1, r1
    3648:	4628      	mov	r0, r5
    364a:	47c0      	blx	r8
    364c:	e78e      	b.n	356c <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    364e:	bf00      	nop
    3650:	47ae147b 	.word	0x47ae147b
    3654:	3ff07ae1 	.word	0x3ff07ae1
    3658:	20000646 	.word	0x20000646
    365c:	20000344 	.word	0x20000344
    3660:	41008000 	.word	0x41008000
    3664:	20000fc8 	.word	0x20000fc8
    3668:	00004a9d 	.word	0x00004a9d
    366c:	2000119c 	.word	0x2000119c
    3670:	00001219 	.word	0x00001219
    3674:	00001315 	.word	0x00001315
    3678:	00003449 	.word	0x00003449
    367c:	00001325 	.word	0x00001325
    3680:	20003270 	.word	0x20003270
    3684:	00003c29 	.word	0x00003c29
    3688:	0000bfa9 	.word	0x0000bfa9
    368c:	0000c075 	.word	0x0000c075
    3690:	0000c499 	.word	0x0000c499
    3694:	00004367 	.word	0x00004367

00003698 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    369a:	4f0b      	ldr	r7, [pc, #44]	; (36c8 <grid_module_po16_revb_hardware_init+0x30>)
    369c:	4c0b      	ldr	r4, [pc, #44]	; (36cc <grid_module_po16_revb_hardware_init+0x34>)
    369e:	463b      	mov	r3, r7
    36a0:	2200      	movs	r2, #0
    36a2:	4611      	mov	r1, r2
    36a4:	4620      	mov	r0, r4
    36a6:	4e0a      	ldr	r6, [pc, #40]	; (36d0 <grid_module_po16_revb_hardware_init+0x38>)
    36a8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    36aa:	4d0a      	ldr	r5, [pc, #40]	; (36d4 <grid_module_po16_revb_hardware_init+0x3c>)
    36ac:	463b      	mov	r3, r7
    36ae:	2200      	movs	r2, #0
    36b0:	4611      	mov	r1, r2
    36b2:	4628      	mov	r0, r5
    36b4:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    36b6:	2100      	movs	r1, #0
    36b8:	4620      	mov	r0, r4
    36ba:	4c07      	ldr	r4, [pc, #28]	; (36d8 <grid_module_po16_revb_hardware_init+0x40>)
    36bc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    36be:	2100      	movs	r1, #0
    36c0:	4628      	mov	r0, r5
    36c2:	47a0      	blx	r4
    36c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36c6:	bf00      	nop
    36c8:	00003469 	.word	0x00003469
    36cc:	20000fc8 	.word	0x20000fc8
    36d0:	00004a1d 	.word	0x00004a1d
    36d4:	2000119c 	.word	0x2000119c
    36d8:	000049dd 	.word	0x000049dd

000036dc <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    36dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36e0:	b090      	sub	sp, #64	; 0x40
    36e2:	4680      	mov	r8, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    36e4:	2307      	movs	r3, #7
    36e6:	220e      	movs	r2, #14
    36e8:	2105      	movs	r1, #5
    36ea:	2010      	movs	r0, #16
    36ec:	4c2a      	ldr	r4, [pc, #168]	; (3798 <grid_module_po16_revb_init+0xbc>)
    36ee:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    36f0:	2110      	movs	r1, #16
    36f2:	482a      	ldr	r0, [pc, #168]	; (379c <grid_module_po16_revb_init+0xc0>)
    36f4:	4b2a      	ldr	r3, [pc, #168]	; (37a0 <grid_module_po16_revb_init+0xc4>)
    36f6:	4798      	blx	r3
	
	grid_ui_model_init(mod, 32);
    36f8:	2120      	movs	r1, #32
    36fa:	4640      	mov	r0, r8
    36fc:	4b29      	ldr	r3, [pc, #164]	; (37a4 <grid_module_po16_revb_init+0xc8>)
    36fe:	4798      	blx	r3
    3700:	2400      	movs	r4, #0
	
	
	for(uint8_t i=0; i<32; i++){
			
		uint8_t payload_template[30] = {0};
    3702:	4625      	mov	r5, r4
    3704:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 37c4 <grid_module_po16_revb_init+0xe8>
    3708:	e025      	b.n	3756 <grid_module_po16_revb_init+0x7a>
		}
		else{ // LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    370a:	2303      	movs	r3, #3
    370c:	9304      	str	r3, [sp, #16]
    370e:	9503      	str	r5, [sp, #12]
    3710:	f1a4 0210 	sub.w	r2, r4, #16
    3714:	9202      	str	r2, [sp, #8]
    3716:	2263      	movs	r2, #99	; 0x63
    3718:	9201      	str	r2, [sp, #4]
    371a:	2601      	movs	r6, #1
    371c:	9600      	str	r6, [sp, #0]
    371e:	2202      	movs	r2, #2
    3720:	4921      	ldr	r1, [pc, #132]	; (37a8 <grid_module_po16_revb_init+0xcc>)
    3722:	a808      	add	r0, sp, #32
    3724:	f8df a08c 	ldr.w	sl, [pc, #140]	; 37b4 <grid_module_po16_revb_init+0xd8>
    3728:	47d0      	blx	sl

			
		

		
		uint8_t payload_length = strlen(payload_template);
    372a:	a808      	add	r0, sp, #32
    372c:	4b1f      	ldr	r3, [pc, #124]	; (37ac <grid_module_po16_revb_init+0xd0>)
    372e:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3730:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    3734:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3738:	2302      	movs	r3, #2
    373a:	9302      	str	r3, [sp, #8]
    373c:	ab07      	add	r3, sp, #28
    373e:	9301      	str	r3, [sp, #4]
    3740:	b2c0      	uxtb	r0, r0
    3742:	9000      	str	r0, [sp, #0]
    3744:	ab08      	add	r3, sp, #32
    3746:	4632      	mov	r2, r6
    3748:	4639      	mov	r1, r7
    374a:	4640      	mov	r0, r8
    374c:	4e18      	ldr	r6, [pc, #96]	; (37b0 <grid_module_po16_revb_init+0xd4>)
    374e:	47b0      	blx	r6
    3750:	3401      	adds	r4, #1
	for(uint8_t i=0; i<32; i++){
    3752:	2c20      	cmp	r4, #32
    3754:	d015      	beq.n	3782 <grid_module_po16_revb_init+0xa6>
    3756:	b2e7      	uxtb	r7, r4
		uint8_t payload_template[30] = {0};
    3758:	221e      	movs	r2, #30
    375a:	4629      	mov	r1, r5
    375c:	a808      	add	r0, sp, #32
    375e:	47c8      	blx	r9
		if (i<16){ // Control Change
    3760:	2f0f      	cmp	r7, #15
    3762:	d8d2      	bhi.n	370a <grid_module_po16_revb_init+0x2e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    3764:	2303      	movs	r3, #3
    3766:	9304      	str	r3, [sp, #16]
    3768:	9503      	str	r5, [sp, #12]
    376a:	9402      	str	r4, [sp, #8]
    376c:	23b0      	movs	r3, #176	; 0xb0
    376e:	9301      	str	r3, [sp, #4]
    3770:	9500      	str	r5, [sp, #0]
    3772:	462b      	mov	r3, r5
    3774:	2202      	movs	r2, #2
    3776:	490c      	ldr	r1, [pc, #48]	; (37a8 <grid_module_po16_revb_init+0xcc>)
    3778:	a808      	add	r0, sp, #32
    377a:	4e0e      	ldr	r6, [pc, #56]	; (37b4 <grid_module_po16_revb_init+0xd8>)
    377c:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    377e:	2602      	movs	r6, #2
    3780:	e7d3      	b.n	372a <grid_module_po16_revb_init+0x4e>
		
	}
	
	grid_report_sys_init(mod);
    3782:	4640      	mov	r0, r8
    3784:	4b0c      	ldr	r3, [pc, #48]	; (37b8 <grid_module_po16_revb_init+0xdc>)
    3786:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3788:	4b0c      	ldr	r3, [pc, #48]	; (37bc <grid_module_po16_revb_init+0xe0>)
    378a:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    378c:	4b0c      	ldr	r3, [pc, #48]	; (37c0 <grid_module_po16_revb_init+0xe4>)
    378e:	4798      	blx	r3
	
    3790:	b010      	add	sp, #64	; 0x40
    3792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3796:	bf00      	nop
    3798:	000011cd 	.word	0x000011cd
    379c:	200077d4 	.word	0x200077d4
    37a0:	000024bd 	.word	0x000024bd
    37a4:	0000405d 	.word	0x0000405d
    37a8:	0000dc04 	.word	0x0000dc04
    37ac:	0000c97d 	.word	0x0000c97d
    37b0:	00004121 	.word	0x00004121
    37b4:	0000c935 	.word	0x0000c935
    37b8:	00004145 	.word	0x00004145
    37bc:	00003699 	.word	0x00003699
    37c0:	00003449 	.word	0x00003449
    37c4:	0000c547 	.word	0x0000c547

000037c8 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    37c8:	8a02      	ldrh	r2, [r0, #16]
    37ca:	b142      	cbz	r2, 37de <tx_cb_USART_GRID+0x16>
    37cc:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    37d0:	322f      	adds	r2, #47	; 0x2f
    37d2:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    37d4:	2100      	movs	r1, #0
    37d6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    37da:	4293      	cmp	r3, r2
    37dc:	d1fb      	bne.n	37d6 <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    37de:	2300      	movs	r3, #0
    37e0:	8203      	strh	r3, [r0, #16]
    37e2:	4770      	bx	lr

000037e4 <tx_cb_USART_GRID_W>:
{
    37e4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <tx_cb_USART_GRID_W+0xc>)
    37e8:	4b02      	ldr	r3, [pc, #8]	; (37f4 <tx_cb_USART_GRID_W+0x10>)
    37ea:	4798      	blx	r3
    37ec:	bd08      	pop	{r3, pc}
    37ee:	bf00      	nop
    37f0:	20003730 	.word	0x20003730
    37f4:	000037c9 	.word	0x000037c9

000037f8 <tx_cb_USART_GRID_S>:
{
    37f8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    37fa:	4802      	ldr	r0, [pc, #8]	; (3804 <tx_cb_USART_GRID_S+0xc>)
    37fc:	4b02      	ldr	r3, [pc, #8]	; (3808 <tx_cb_USART_GRID_S+0x10>)
    37fe:	4798      	blx	r3
    3800:	bd08      	pop	{r3, pc}
    3802:	bf00      	nop
    3804:	2000474c 	.word	0x2000474c
    3808:	000037c9 	.word	0x000037c9

0000380c <tx_cb_USART_GRID_E>:
{
    380c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    380e:	4802      	ldr	r0, [pc, #8]	; (3818 <tx_cb_USART_GRID_E+0xc>)
    3810:	4b02      	ldr	r3, [pc, #8]	; (381c <tx_cb_USART_GRID_E+0x10>)
    3812:	4798      	blx	r3
    3814:	bd08      	pop	{r3, pc}
    3816:	bf00      	nop
    3818:	20006760 	.word	0x20006760
    381c:	000037c9 	.word	0x000037c9

00003820 <tx_cb_USART_GRID_N>:
{
    3820:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3822:	4802      	ldr	r0, [pc, #8]	; (382c <tx_cb_USART_GRID_N+0xc>)
    3824:	4b02      	ldr	r3, [pc, #8]	; (3830 <tx_cb_USART_GRID_N+0x10>)
    3826:	4798      	blx	r3
    3828:	bd08      	pop	{r3, pc}
    382a:	bf00      	nop
    382c:	2000121c 	.word	0x2000121c
    3830:	000037c9 	.word	0x000037c9

00003834 <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    3834:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    3836:	2301      	movs	r3, #1
    3838:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    383a:	6880      	ldr	r0, [r0, #8]
    383c:	4b01      	ldr	r3, [pc, #4]	; (3844 <err_cb_USART_GRID+0x10>)
    383e:	4798      	blx	r3
    3840:	bd08      	pop	{r3, pc}
    3842:	bf00      	nop
    3844:	000057ad 	.word	0x000057ad

00003848 <err_cb_USART_GRID_W>:
{
    3848:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    384a:	4802      	ldr	r0, [pc, #8]	; (3854 <err_cb_USART_GRID_W+0xc>)
    384c:	4b02      	ldr	r3, [pc, #8]	; (3858 <err_cb_USART_GRID_W+0x10>)
    384e:	4798      	blx	r3
    3850:	bd08      	pop	{r3, pc}
    3852:	bf00      	nop
    3854:	20003730 	.word	0x20003730
    3858:	00003835 	.word	0x00003835

0000385c <err_cb_USART_GRID_S>:
{
    385c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    385e:	4802      	ldr	r0, [pc, #8]	; (3868 <err_cb_USART_GRID_S+0xc>)
    3860:	4b02      	ldr	r3, [pc, #8]	; (386c <err_cb_USART_GRID_S+0x10>)
    3862:	4798      	blx	r3
    3864:	bd08      	pop	{r3, pc}
    3866:	bf00      	nop
    3868:	2000474c 	.word	0x2000474c
    386c:	00003835 	.word	0x00003835

00003870 <err_cb_USART_GRID_E>:
{
    3870:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    3872:	4802      	ldr	r0, [pc, #8]	; (387c <err_cb_USART_GRID_E+0xc>)
    3874:	4b02      	ldr	r3, [pc, #8]	; (3880 <err_cb_USART_GRID_E+0x10>)
    3876:	4798      	blx	r3
    3878:	bd08      	pop	{r3, pc}
    387a:	bf00      	nop
    387c:	20006760 	.word	0x20006760
    3880:	00003835 	.word	0x00003835

00003884 <err_cb_USART_GRID_N>:
{
    3884:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    3886:	4802      	ldr	r0, [pc, #8]	; (3890 <err_cb_USART_GRID_N+0xc>)
    3888:	4b02      	ldr	r3, [pc, #8]	; (3894 <err_cb_USART_GRID_N+0x10>)
    388a:	4798      	blx	r3
    388c:	bd08      	pop	{r3, pc}
    388e:	bf00      	nop
    3890:	2000121c 	.word	0x2000121c
    3894:	00003835 	.word	0x00003835

00003898 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3898:	b508      	push	{r3, lr}
    389a:	7b83      	ldrb	r3, [r0, #14]
    389c:	011b      	lsls	r3, r3, #4
    389e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    38a2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    38a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    38a8:	f022 0202 	bic.w	r2, r2, #2
    38ac:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    38ae:	2100      	movs	r1, #0
    38b0:	7b80      	ldrb	r0, [r0, #14]
    38b2:	4b01      	ldr	r3, [pc, #4]	; (38b8 <grid_sys_port_reset_dma+0x20>)
    38b4:	4798      	blx	r3
    38b6:	bd08      	pop	{r3, pc}
    38b8:	000067f5 	.word	0x000067f5

000038bc <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    38bc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    38be:	4802      	ldr	r0, [pc, #8]	; (38c8 <dma_transfer_complete_w_cb+0xc>)
    38c0:	4b02      	ldr	r3, [pc, #8]	; (38cc <dma_transfer_complete_w_cb+0x10>)
    38c2:	4798      	blx	r3
    38c4:	bd08      	pop	{r3, pc}
    38c6:	bf00      	nop
    38c8:	20003730 	.word	0x20003730
    38cc:	00003899 	.word	0x00003899

000038d0 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    38d0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    38d2:	4802      	ldr	r0, [pc, #8]	; (38dc <dma_transfer_complete_s_cb+0xc>)
    38d4:	4b02      	ldr	r3, [pc, #8]	; (38e0 <dma_transfer_complete_s_cb+0x10>)
    38d6:	4798      	blx	r3
    38d8:	bd08      	pop	{r3, pc}
    38da:	bf00      	nop
    38dc:	2000474c 	.word	0x2000474c
    38e0:	00003899 	.word	0x00003899

000038e4 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    38e4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    38e6:	4802      	ldr	r0, [pc, #8]	; (38f0 <dma_transfer_complete_e_cb+0xc>)
    38e8:	4b02      	ldr	r3, [pc, #8]	; (38f4 <dma_transfer_complete_e_cb+0x10>)
    38ea:	4798      	blx	r3
    38ec:	bd08      	pop	{r3, pc}
    38ee:	bf00      	nop
    38f0:	20006760 	.word	0x20006760
    38f4:	00003899 	.word	0x00003899

000038f8 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    38f8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    38fa:	4802      	ldr	r0, [pc, #8]	; (3904 <dma_transfer_complete_n_cb+0xc>)
    38fc:	4b02      	ldr	r3, [pc, #8]	; (3908 <dma_transfer_complete_n_cb+0x10>)
    38fe:	4798      	blx	r3
    3900:	bd08      	pop	{r3, pc}
    3902:	bf00      	nop
    3904:	2000121c 	.word	0x2000121c
    3908:	00003899 	.word	0x00003899

0000390c <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3910:	4b3e      	ldr	r3, [pc, #248]	; (3a0c <grid_sys_uart_init+0x100>)
    3912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3916:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    391a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    391e:	f042 0204 	orr.w	r2, r2, #4
    3922:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3926:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    392a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    392e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3932:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3936:	f042 0204 	orr.w	r2, r2, #4
    393a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    393e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3946:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    394a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    394e:	f042 0204 	orr.w	r2, r2, #4
    3952:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3956:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    395a:	f44f 7100 	mov.w	r1, #512	; 0x200
    395e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3962:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3966:	f042 0204 	orr.w	r2, r2, #4
    396a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    396e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3972:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3a58 <grid_sys_uart_init+0x14c>
    3976:	4a26      	ldr	r2, [pc, #152]	; (3a10 <grid_sys_uart_init+0x104>)
    3978:	2101      	movs	r1, #1
    397a:	4640      	mov	r0, r8
    397c:	4c25      	ldr	r4, [pc, #148]	; (3a14 <grid_sys_uart_init+0x108>)
    397e:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3980:	4f25      	ldr	r7, [pc, #148]	; (3a18 <grid_sys_uart_init+0x10c>)
    3982:	4a26      	ldr	r2, [pc, #152]	; (3a1c <grid_sys_uart_init+0x110>)
    3984:	2101      	movs	r1, #1
    3986:	4638      	mov	r0, r7
    3988:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    398a:	4e25      	ldr	r6, [pc, #148]	; (3a20 <grid_sys_uart_init+0x114>)
    398c:	4a25      	ldr	r2, [pc, #148]	; (3a24 <grid_sys_uart_init+0x118>)
    398e:	2101      	movs	r1, #1
    3990:	4630      	mov	r0, r6
    3992:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3994:	4d24      	ldr	r5, [pc, #144]	; (3a28 <grid_sys_uart_init+0x11c>)
    3996:	4a25      	ldr	r2, [pc, #148]	; (3a2c <grid_sys_uart_init+0x120>)
    3998:	2101      	movs	r1, #1
    399a:	4628      	mov	r0, r5
    399c:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    399e:	2101      	movs	r1, #1
    39a0:	4640      	mov	r0, r8
    39a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3a5c <grid_sys_uart_init+0x150>
    39a6:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    39a8:	2101      	movs	r1, #1
    39aa:	4638      	mov	r0, r7
    39ac:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    39ae:	2101      	movs	r1, #1
    39b0:	4630      	mov	r0, r6
    39b2:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    39b4:	2101      	movs	r1, #1
    39b6:	4628      	mov	r0, r5
    39b8:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    39ba:	4a1d      	ldr	r2, [pc, #116]	; (3a30 <grid_sys_uart_init+0x124>)
    39bc:	2102      	movs	r1, #2
    39be:	4640      	mov	r0, r8
    39c0:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    39c2:	4a1c      	ldr	r2, [pc, #112]	; (3a34 <grid_sys_uart_init+0x128>)
    39c4:	2102      	movs	r1, #2
    39c6:	4638      	mov	r0, r7
    39c8:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    39ca:	4a1b      	ldr	r2, [pc, #108]	; (3a38 <grid_sys_uart_init+0x12c>)
    39cc:	2102      	movs	r1, #2
    39ce:	4630      	mov	r0, r6
    39d0:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    39d2:	4a1a      	ldr	r2, [pc, #104]	; (3a3c <grid_sys_uart_init+0x130>)
    39d4:	2102      	movs	r1, #2
    39d6:	4628      	mov	r0, r5
    39d8:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    39da:	4919      	ldr	r1, [pc, #100]	; (3a40 <grid_sys_uart_init+0x134>)
    39dc:	4640      	mov	r0, r8
    39de:	4c19      	ldr	r4, [pc, #100]	; (3a44 <grid_sys_uart_init+0x138>)
    39e0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    39e2:	4919      	ldr	r1, [pc, #100]	; (3a48 <grid_sys_uart_init+0x13c>)
    39e4:	4638      	mov	r0, r7
    39e6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    39e8:	4918      	ldr	r1, [pc, #96]	; (3a4c <grid_sys_uart_init+0x140>)
    39ea:	4630      	mov	r0, r6
    39ec:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    39ee:	4918      	ldr	r1, [pc, #96]	; (3a50 <grid_sys_uart_init+0x144>)
    39f0:	4628      	mov	r0, r5
    39f2:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    39f4:	4640      	mov	r0, r8
    39f6:	4c17      	ldr	r4, [pc, #92]	; (3a54 <grid_sys_uart_init+0x148>)
    39f8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    39fa:	4638      	mov	r0, r7
    39fc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    39fe:	4630      	mov	r0, r6
    3a00:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    3a02:	4628      	mov	r0, r5
    3a04:	47a0      	blx	r4
    3a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3a0a:	bf00      	nop
    3a0c:	41008000 	.word	0x41008000
    3a10:	00003821 	.word	0x00003821
    3a14:	00005801 	.word	0x00005801
    3a18:	20000ff4 	.word	0x20000ff4
    3a1c:	0000380d 	.word	0x0000380d
    3a20:	2000114c 	.word	0x2000114c
    3a24:	000037f9 	.word	0x000037f9
    3a28:	200010fc 	.word	0x200010fc
    3a2c:	000037e5 	.word	0x000037e5
    3a30:	00003885 	.word	0x00003885
    3a34:	00003871 	.word	0x00003871
    3a38:	0000385d 	.word	0x0000385d
    3a3c:	00003849 	.word	0x00003849
    3a40:	2000327c 	.word	0x2000327c
    3a44:	000057d9 	.word	0x000057d9
    3a48:	20004738 	.word	0x20004738
    3a4c:	20005754 	.word	0x20005754
    3a50:	200077fc 	.word	0x200077fc
    3a54:	00005781 	.word	0x00005781
    3a58:	20001048 	.word	0x20001048
    3a5c:	00005875 	.word	0x00005875

00003a60 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a62:	b083      	sub	sp, #12
    3a64:	4605      	mov	r5, r0
    3a66:	460f      	mov	r7, r1
    3a68:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3a6a:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3a6c:	6883      	ldr	r3, [r0, #8]
    3a6e:	6a19      	ldr	r1, [r3, #32]
    3a70:	3128      	adds	r1, #40	; 0x28
    3a72:	4620      	mov	r0, r4
    3a74:	4b0d      	ldr	r3, [pc, #52]	; (3aac <grid_sys_dma_rx_init_one+0x4c>)
    3a76:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3a78:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    3a7c:	4620      	mov	r0, r4
    3a7e:	4b0c      	ldr	r3, [pc, #48]	; (3ab0 <grid_sys_dma_rx_init_one+0x50>)
    3a80:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3a82:	4639      	mov	r1, r7
    3a84:	4620      	mov	r0, r4
    3a86:	4b0b      	ldr	r3, [pc, #44]	; (3ab4 <grid_sys_dma_rx_init_one+0x54>)
    3a88:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3a8a:	4621      	mov	r1, r4
    3a8c:	a801      	add	r0, sp, #4
    3a8e:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <grid_sys_dma_rx_init_one+0x58>)
    3a90:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3a92:	9b01      	ldr	r3, [sp, #4]
    3a94:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3a96:	2201      	movs	r2, #1
    3a98:	2100      	movs	r1, #0
    3a9a:	4620      	mov	r0, r4
    3a9c:	4b07      	ldr	r3, [pc, #28]	; (3abc <grid_sys_dma_rx_init_one+0x5c>)
    3a9e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3aa0:	2100      	movs	r1, #0
    3aa2:	4620      	mov	r0, r4
    3aa4:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <grid_sys_dma_rx_init_one+0x60>)
    3aa6:	4798      	blx	r3
	

}
    3aa8:	b003      	add	sp, #12
    3aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aac:	00006771 	.word	0x00006771
    3ab0:	00006761 	.word	0x00006761
    3ab4:	0000679d 	.word	0x0000679d
    3ab8:	00006835 	.word	0x00006835
    3abc:	0000670d 	.word	0x0000670d
    3ac0:	000067f5 	.word	0x000067f5

00003ac4 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3ac4:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3ac6:	4a10      	ldr	r2, [pc, #64]	; (3b08 <grid_sys_dma_rx_init+0x44>)
    3ac8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3acc:	480f      	ldr	r0, [pc, #60]	; (3b0c <grid_sys_dma_rx_init+0x48>)
    3ace:	4c10      	ldr	r4, [pc, #64]	; (3b10 <grid_sys_dma_rx_init+0x4c>)
    3ad0:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3ad2:	4a10      	ldr	r2, [pc, #64]	; (3b14 <grid_sys_dma_rx_init+0x50>)
    3ad4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3ad8:	480f      	ldr	r0, [pc, #60]	; (3b18 <grid_sys_dma_rx_init+0x54>)
    3ada:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3adc:	4a0f      	ldr	r2, [pc, #60]	; (3b1c <grid_sys_dma_rx_init+0x58>)
    3ade:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3ae2:	480f      	ldr	r0, [pc, #60]	; (3b20 <grid_sys_dma_rx_init+0x5c>)
    3ae4:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    3ae6:	4a0f      	ldr	r2, [pc, #60]	; (3b24 <grid_sys_dma_rx_init+0x60>)
    3ae8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3aec:	480e      	ldr	r0, [pc, #56]	; (3b28 <grid_sys_dma_rx_init+0x64>)
    3aee:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3af0:	4b0e      	ldr	r3, [pc, #56]	; (3b2c <grid_sys_dma_rx_init+0x68>)
    3af2:	2200      	movs	r2, #0
    3af4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    3af8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    3afc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    3b00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    3b04:	bd10      	pop	{r4, pc}
    3b06:	bf00      	nop
    3b08:	000038f9 	.word	0x000038f9
    3b0c:	2000121c 	.word	0x2000121c
    3b10:	00003a61 	.word	0x00003a61
    3b14:	000038e5 	.word	0x000038e5
    3b18:	20006760 	.word	0x20006760
    3b1c:	000038d1 	.word	0x000038d1
    3b20:	2000474c 	.word	0x2000474c
    3b24:	000038bd 	.word	0x000038bd
    3b28:	20003730 	.word	0x20003730
    3b2c:	e000e100 	.word	0xe000e100

00003b30 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3b30:	6980      	ldr	r0, [r0, #24]
    3b32:	4770      	bx	lr

00003b34 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    3b34:	6980      	ldr	r0, [r0, #24]
	
	

}
    3b36:	1a40      	subs	r0, r0, r1
    3b38:	4770      	bx	lr

00003b3a <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3b3a:	6983      	ldr	r3, [r0, #24]
    3b3c:	3301      	adds	r3, #1
    3b3e:	6183      	str	r3, [r0, #24]
    3b40:	4770      	bx	lr

00003b42 <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    3b42:	7a00      	ldrb	r0, [r0, #8]
    3b44:	4770      	bx	lr

00003b46 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3b46:	2300      	movs	r3, #0
    3b48:	7203      	strb	r3, [r0, #8]
    3b4a:	4770      	bx	lr

00003b4c <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3b4c:	7983      	ldrb	r3, [r0, #6]
    3b4e:	b123      	cbz	r3, 3b5a <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3b50:	2b01      	cmp	r3, #1
    3b52:	d00f      	beq.n	3b74 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3b54:	2b02      	cmp	r3, #2
    3b56:	d015      	beq.n	3b84 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3b58:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3b5a:	8880      	ldrh	r0, [r0, #4]
    3b5c:	0840      	lsrs	r0, r0, #1
    3b5e:	387d      	subs	r0, #125	; 0x7d
    3b60:	2800      	cmp	r0, #0
    3b62:	bfb8      	it	lt
    3b64:	4240      	neglt	r0, r0
    3b66:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3b6a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3b6e:	f3c0 0047 	ubfx	r0, r0, #1, #8
    3b72:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3b74:	8880      	ldrh	r0, [r0, #4]
    3b76:	4b06      	ldr	r3, [pc, #24]	; (3b90 <grid_sys_alert_get_color_intensity+0x44>)
    3b78:	fba3 3000 	umull	r3, r0, r3, r0
    3b7c:	f340 1000 	sbfx	r0, r0, #4, #1
    3b80:	b2c0      	uxtb	r0, r0
    3b82:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3b84:	8880      	ldrh	r0, [r0, #4]
    3b86:	2864      	cmp	r0, #100	; 0x64
    3b88:	bf8c      	ite	hi
    3b8a:	20ff      	movhi	r0, #255	; 0xff
    3b8c:	2000      	movls	r0, #0
    3b8e:	4770      	bx	lr
    3b90:	10624dd3 	.word	0x10624dd3

00003b94 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3b94:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3b96:	2401      	movs	r4, #1
    3b98:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3b9a:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    3b9c:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    3b9e:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    3ba0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3ba4:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3ba6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3baa:	7183      	strb	r3, [r0, #6]
	
}
    3bac:	f85d 4b04 	ldr.w	r4, [sp], #4
    3bb0:	4770      	bx	lr

00003bb2 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    3bb2:	7840      	ldrb	r0, [r0, #1]
    3bb4:	4770      	bx	lr

00003bb6 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3bb6:	7880      	ldrb	r0, [r0, #2]
    3bb8:	4770      	bx	lr

00003bba <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3bba:	78c0      	ldrb	r0, [r0, #3]
    3bbc:	4770      	bx	lr

00003bbe <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    3bbe:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    3bc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3bc4:	b2d8      	uxtb	r0, r3
    3bc6:	2809      	cmp	r0, #9
    3bc8:	d90d      	bls.n	3be6 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3bca:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    3bce:	b2db      	uxtb	r3, r3
    3bd0:	2b05      	cmp	r3, #5
    3bd2:	d903      	bls.n	3bdc <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3bd4:	b131      	cbz	r1, 3be4 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3bd6:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3bd8:	2000      	movs	r0, #0
    3bda:	4770      	bx	lr
		result = ascii - 97 + 10;
    3bdc:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    3be0:	b2c0      	uxtb	r0, r0
    3be2:	4770      	bx	lr
	uint8_t result = 0;
    3be4:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3be6:	4770      	bx	lr

00003be8 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3bec:	b1c1      	cbz	r1, 3c20 <grid_sys_read_hex_string_value+0x38>
    3bee:	4690      	mov	r8, r2
    3bf0:	1e45      	subs	r5, r0, #1
    3bf2:	1e4b      	subs	r3, r1, #1
    3bf4:	009c      	lsls	r4, r3, #2
    3bf6:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3bfa:	3f02      	subs	r7, #2
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	1aff      	subs	r7, r7, r3
    3c00:	00bf      	lsls	r7, r7, #2
    3c02:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3c04:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3c24 <grid_sys_read_hex_string_value+0x3c>
    3c08:	4641      	mov	r1, r8
    3c0a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3c0e:	47c8      	blx	r9
    3c10:	40a0      	lsls	r0, r4
    3c12:	4406      	add	r6, r0
    3c14:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3c16:	42bc      	cmp	r4, r7
    3c18:	d1f6      	bne.n	3c08 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3c1a:	4630      	mov	r0, r6
    3c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3c20:	2600      	movs	r6, #0
	return result;
    3c22:	e7fa      	b.n	3c1a <grid_sys_read_hex_string_value+0x32>
    3c24:	00003bbf 	.word	0x00003bbf

00003c28 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3c28:	b530      	push	{r4, r5, lr}
    3c2a:	b085      	sub	sp, #20
    3c2c:	4605      	mov	r5, r0
    3c2e:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3c30:	4909      	ldr	r1, [pc, #36]	; (3c58 <grid_sys_write_hex_string_value+0x30>)
    3c32:	a801      	add	r0, sp, #4
    3c34:	4b09      	ldr	r3, [pc, #36]	; (3c5c <grid_sys_write_hex_string_value+0x34>)
    3c36:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3c38:	b164      	cbz	r4, 3c54 <grid_sys_write_hex_string_value+0x2c>
    3c3a:	ab04      	add	r3, sp, #16
    3c3c:	1b1a      	subs	r2, r3, r4
    3c3e:	3a05      	subs	r2, #5
    3c40:	1e6b      	subs	r3, r5, #1
    3c42:	1e60      	subs	r0, r4, #1
    3c44:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3c48:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3c4c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3c50:	4283      	cmp	r3, r0
    3c52:	d1f9      	bne.n	3c48 <grid_sys_write_hex_string_value+0x20>
	}

}
    3c54:	b005      	add	sp, #20
    3c56:	bd30      	pop	{r4, r5, pc}
    3c58:	0000dc20 	.word	0x0000dc20
    3c5c:	0000c935 	.word	0x0000c935

00003c60 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3c60:	4b34      	ldr	r3, [pc, #208]	; (3d34 <grid_sys_get_hwcfg+0xd4>)
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c68:	d002      	beq.n	3c70 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3c6a:	4b32      	ldr	r3, [pc, #200]	; (3d34 <grid_sys_get_hwcfg+0xd4>)
    3c6c:	6818      	ldr	r0, [r3, #0]
    3c6e:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c74:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3c76:	4b30      	ldr	r3, [pc, #192]	; (3d38 <grid_sys_get_hwcfg+0xd8>)
    3c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3c80:	492e      	ldr	r1, [pc, #184]	; (3d3c <grid_sys_get_hwcfg+0xdc>)
    3c82:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3c86:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3c8a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3c8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3c92:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3c96:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3c9a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3c9e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3ca6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3caa:	4925      	ldr	r1, [pc, #148]	; (3d40 <grid_sys_get_hwcfg+0xe0>)
    3cac:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3cb0:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3cb4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3cb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3cbc:	2001      	movs	r0, #1
    3cbe:	4b21      	ldr	r3, [pc, #132]	; (3d44 <grid_sys_get_hwcfg+0xe4>)
    3cc0:	4798      	blx	r3
    3cc2:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3cc4:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cc6:	4d1c      	ldr	r5, [pc, #112]	; (3d38 <grid_sys_get_hwcfg+0xd8>)
    3cc8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3ccc:	4f1d      	ldr	r7, [pc, #116]	; (3d44 <grid_sys_get_hwcfg+0xe4>)
    3cce:	e00c      	b.n	3cea <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3cd0:	2e07      	cmp	r6, #7
    3cd2:	d027      	beq.n	3d24 <grid_sys_get_hwcfg+0xc4>
    3cd4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3cd8:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3cdc:	2001      	movs	r0, #1
    3cde:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ce0:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3ce4:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3ce6:	2e08      	cmp	r6, #8
    3ce8:	d01c      	beq.n	3d24 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cea:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3cee:	2001      	movs	r0, #1
    3cf0:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3cf2:	a801      	add	r0, sp, #4
    3cf4:	4b14      	ldr	r3, [pc, #80]	; (3d48 <grid_sys_get_hwcfg+0xe8>)
    3cf6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3cf8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3cfc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3d00:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3d04:	405c      	eors	r4, r3
    3d06:	4014      	ands	r4, r2
    3d08:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3d0a:	a801      	add	r0, sp, #4
    3d0c:	4b0f      	ldr	r3, [pc, #60]	; (3d4c <grid_sys_get_hwcfg+0xec>)
    3d0e:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3d10:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3d14:	d0dc      	beq.n	3cd0 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3d16:	2301      	movs	r3, #1
    3d18:	40b3      	lsls	r3, r6
    3d1a:	ea43 0808 	orr.w	r8, r3, r8
    3d1e:	fa5f f888 	uxtb.w	r8, r8
    3d22:	e7d5      	b.n	3cd0 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3d24:	4b03      	ldr	r3, [pc, #12]	; (3d34 <grid_sys_get_hwcfg+0xd4>)
    3d26:	f8c3 8000 	str.w	r8, [r3]
}
    3d2a:	4b02      	ldr	r3, [pc, #8]	; (3d34 <grid_sys_get_hwcfg+0xd4>)
    3d2c:	6818      	ldr	r0, [r3, #0]
    3d2e:	b003      	add	sp, #12
    3d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d34:	20000354 	.word	0x20000354
    3d38:	41008000 	.word	0x41008000
    3d3c:	40002000 	.word	0x40002000
    3d40:	40028000 	.word	0x40028000
    3d44:	00004c25 	.word	0x00004c25
    3d48:	00004ba5 	.word	0x00004ba5
    3d4c:	00004bb3 	.word	0x00004bb3

00003d50 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d54:	b085      	sub	sp, #20
    3d56:	9003      	str	r0, [sp, #12]
    3d58:	460c      	mov	r4, r1
	mod->bank_changed = 1;
    3d5a:	2301      	movs	r3, #1
    3d5c:	7283      	strb	r3, [r0, #10]
	uint32_t hwtype = grid_sys_get_hwcfg();
    3d5e:	4b4d      	ldr	r3, [pc, #308]	; (3e94 <grid_sys_bank_select+0x144>)
    3d60:	4798      	blx	r3
	if (banknumber == 255){
    3d62:	2cff      	cmp	r4, #255	; 0xff
    3d64:	d006      	beq.n	3d74 <grid_sys_bank_select+0x24>
		mod->bank_select = banknumber%4;
    3d66:	f004 0403 	and.w	r4, r4, #3
    3d6a:	9b03      	ldr	r3, [sp, #12]
    3d6c:	725c      	strb	r4, [r3, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3d6e:	f04f 0900 	mov.w	r9, #0
    3d72:	e083      	b.n	3e7c <grid_sys_bank_select+0x12c>
		mod->bank_select = 255;
    3d74:	23ff      	movs	r3, #255	; 0xff
    3d76:	9a03      	ldr	r2, [sp, #12]
    3d78:	7253      	strb	r3, [r2, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3d7a:	2700      	movs	r7, #0
    3d7c:	f8df b128 	ldr.w	fp, [pc, #296]	; 3ea8 <grid_sys_bank_select+0x158>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    3d80:	f8df a118 	ldr.w	sl, [pc, #280]	; 3e9c <grid_sys_bank_select+0x14c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3d84:	e02f      	b.n	3de6 <grid_sys_bank_select+0x96>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    3d86:	2306      	movs	r3, #6
    3d88:	9301      	str	r3, [sp, #4]
    3d8a:	9300      	str	r3, [sp, #0]
    3d8c:	2201      	movs	r2, #1
    3d8e:	4621      	mov	r1, r4
    3d90:	4841      	ldr	r0, [pc, #260]	; (3e98 <grid_sys_bank_select+0x148>)
    3d92:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    3d94:	263f      	movs	r6, #63	; 0x3f
    3d96:	9601      	str	r6, [sp, #4]
    3d98:	9600      	str	r6, [sp, #0]
    3d9a:	4633      	mov	r3, r6
    3d9c:	2201      	movs	r2, #1
    3d9e:	4621      	mov	r1, r4
    3da0:	483d      	ldr	r0, [pc, #244]	; (3e98 <grid_sys_bank_select+0x148>)
    3da2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3ea0 <grid_sys_bank_select+0x150>
    3da6:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    3da8:	257f      	movs	r5, #127	; 0x7f
    3daa:	9501      	str	r5, [sp, #4]
    3dac:	9500      	str	r5, [sp, #0]
    3dae:	462b      	mov	r3, r5
    3db0:	2201      	movs	r2, #1
    3db2:	4621      	mov	r1, r4
    3db4:	4838      	ldr	r0, [pc, #224]	; (3e98 <grid_sys_bank_select+0x148>)
    3db6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3ea4 <grid_sys_bank_select+0x154>
    3dba:	47c0      	blx	r8
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    3dbc:	2300      	movs	r3, #0
    3dbe:	9301      	str	r3, [sp, #4]
    3dc0:	9300      	str	r3, [sp, #0]
    3dc2:	2202      	movs	r2, #2
    3dc4:	4621      	mov	r1, r4
    3dc6:	4834      	ldr	r0, [pc, #208]	; (3e98 <grid_sys_bank_select+0x148>)
    3dc8:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    3dca:	9601      	str	r6, [sp, #4]
    3dcc:	9600      	str	r6, [sp, #0]
    3dce:	4633      	mov	r3, r6
    3dd0:	2202      	movs	r2, #2
    3dd2:	4621      	mov	r1, r4
    3dd4:	4830      	ldr	r0, [pc, #192]	; (3e98 <grid_sys_bank_select+0x148>)
    3dd6:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    3dd8:	9501      	str	r5, [sp, #4]
    3dda:	9500      	str	r5, [sp, #0]
    3ddc:	462b      	mov	r3, r5
    3dde:	2202      	movs	r2, #2
    3de0:	4621      	mov	r1, r4
    3de2:	482d      	ldr	r0, [pc, #180]	; (3e98 <grid_sys_bank_select+0x148>)
    3de4:	47c0      	blx	r8
    3de6:	b2fc      	uxtb	r4, r7
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3de8:	482b      	ldr	r0, [pc, #172]	; (3e98 <grid_sys_bank_select+0x148>)
    3dea:	47d8      	blx	fp
    3dec:	3701      	adds	r7, #1
    3dee:	42a0      	cmp	r0, r4
    3df0:	d8c9      	bhi.n	3d86 <grid_sys_bank_select+0x36>
    3df2:	e04c      	b.n	3e8e <grid_sys_bank_select+0x13e>
			uint8_t r = mod->bank_color_r[mod->bank_select];
    3df4:	9a03      	ldr	r2, [sp, #12]
    3df6:	7a53      	ldrb	r3, [r2, #9]
    3df8:	4413      	add	r3, r2
    3dfa:	f893 800b 	ldrb.w	r8, [r3, #11]
			uint8_t g = mod->bank_color_g[mod->bank_select];
    3dfe:	7bdd      	ldrb	r5, [r3, #15]
			uint8_t b = mod->bank_color_b[mod->bank_select];
    3e00:	7cde      	ldrb	r6, [r3, #19]
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/32, g/32, b/32);
    3e02:	0973      	lsrs	r3, r6, #5
    3e04:	9301      	str	r3, [sp, #4]
    3e06:	096b      	lsrs	r3, r5, #5
    3e08:	9300      	str	r3, [sp, #0]
    3e0a:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3e0e:	2201      	movs	r2, #1
    3e10:	4621      	mov	r1, r4
    3e12:	4821      	ldr	r0, [pc, #132]	; (3e98 <grid_sys_bank_select+0x148>)
    3e14:	4f21      	ldr	r7, [pc, #132]	; (3e9c <grid_sys_bank_select+0x14c>)
    3e16:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    3e18:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3e1c:	ea4f 0a55 	mov.w	sl, r5, lsr #1
    3e20:	ea4f 0b56 	mov.w	fp, r6, lsr #1
    3e24:	f8cd b004 	str.w	fp, [sp, #4]
    3e28:	f8cd a000 	str.w	sl, [sp]
    3e2c:	9302      	str	r3, [sp, #8]
    3e2e:	2201      	movs	r2, #1
    3e30:	4621      	mov	r1, r4
    3e32:	4819      	ldr	r0, [pc, #100]	; (3e98 <grid_sys_bank_select+0x148>)
    3e34:	4f1a      	ldr	r7, [pc, #104]	; (3ea0 <grid_sys_bank_select+0x150>)
    3e36:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    3e38:	9601      	str	r6, [sp, #4]
    3e3a:	9500      	str	r5, [sp, #0]
    3e3c:	4643      	mov	r3, r8
    3e3e:	2201      	movs	r2, #1
    3e40:	4621      	mov	r1, r4
    3e42:	4815      	ldr	r0, [pc, #84]	; (3e98 <grid_sys_bank_select+0x148>)
    3e44:	4f17      	ldr	r7, [pc, #92]	; (3ea4 <grid_sys_bank_select+0x154>)
    3e46:	47b8      	blx	r7
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    3e48:	2300      	movs	r3, #0
    3e4a:	9301      	str	r3, [sp, #4]
    3e4c:	9300      	str	r3, [sp, #0]
    3e4e:	2202      	movs	r2, #2
    3e50:	4621      	mov	r1, r4
    3e52:	4811      	ldr	r0, [pc, #68]	; (3e98 <grid_sys_bank_select+0x148>)
    3e54:	4f11      	ldr	r7, [pc, #68]	; (3e9c <grid_sys_bank_select+0x14c>)
    3e56:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    3e58:	f8cd b004 	str.w	fp, [sp, #4]
    3e5c:	f8cd a000 	str.w	sl, [sp]
    3e60:	9b02      	ldr	r3, [sp, #8]
    3e62:	2202      	movs	r2, #2
    3e64:	4621      	mov	r1, r4
    3e66:	480c      	ldr	r0, [pc, #48]	; (3e98 <grid_sys_bank_select+0x148>)
    3e68:	4f0d      	ldr	r7, [pc, #52]	; (3ea0 <grid_sys_bank_select+0x150>)
    3e6a:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    3e6c:	9601      	str	r6, [sp, #4]
    3e6e:	9500      	str	r5, [sp, #0]
    3e70:	4643      	mov	r3, r8
    3e72:	2202      	movs	r2, #2
    3e74:	4621      	mov	r1, r4
    3e76:	4808      	ldr	r0, [pc, #32]	; (3e98 <grid_sys_bank_select+0x148>)
    3e78:	4c0a      	ldr	r4, [pc, #40]	; (3ea4 <grid_sys_bank_select+0x154>)
    3e7a:	47a0      	blx	r4
    3e7c:	fa5f f489 	uxtb.w	r4, r9
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3e80:	4805      	ldr	r0, [pc, #20]	; (3e98 <grid_sys_bank_select+0x148>)
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <grid_sys_bank_select+0x158>)
    3e84:	4798      	blx	r3
    3e86:	f109 0901 	add.w	r9, r9, #1
    3e8a:	4284      	cmp	r4, r0
    3e8c:	d3b2      	bcc.n	3df4 <grid_sys_bank_select+0xa4>
}
    3e8e:	b005      	add	sp, #20
    3e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e94:	00003c61 	.word	0x00003c61
    3e98:	200077d4 	.word	0x200077d4
    3e9c:	0000203b 	.word	0x0000203b
    3ea0:	00002083 	.word	0x00002083
    3ea4:	000020cd 	.word	0x000020cd
    3ea8:	00001ff9 	.word	0x00001ff9

00003eac <grid_sys_init>:
void grid_sys_init(struct grid_sys_model* mod){
    3eac:	b510      	push	{r4, lr}
	mod->bank_select = 0;
    3eae:	2200      	movs	r2, #0
    3eb0:	7242      	strb	r2, [r0, #9]
	mod->bank_color_r[0] = 0;
    3eb2:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[0] = 100;
    3eb4:	2164      	movs	r1, #100	; 0x64
    3eb6:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[0] = 200;
    3eb8:	23c8      	movs	r3, #200	; 0xc8
    3eba:	74c3      	strb	r3, [r0, #19]
	mod->bank_color_r[1] = 200;
    3ebc:	7303      	strb	r3, [r0, #12]
	mod->bank_color_g[1] = 100;
    3ebe:	7401      	strb	r1, [r0, #16]
	mod->bank_color_b[1] = 0;
    3ec0:	7502      	strb	r2, [r0, #20]
	mod->bank_color_r[2] = 50;
    3ec2:	2432      	movs	r4, #50	; 0x32
    3ec4:	7344      	strb	r4, [r0, #13]
	mod->bank_color_g[2] = 200;
    3ec6:	7443      	strb	r3, [r0, #17]
	mod->bank_color_b[2] = 50;
    3ec8:	7544      	strb	r4, [r0, #21]
	mod->bank_color_r[3] = 100;
    3eca:	7381      	strb	r1, [r0, #14]
	mod->bank_color_g[3] = 0;
    3ecc:	7482      	strb	r2, [r0, #18]
	mod->bank_color_b[3] = 200;
    3ece:	7583      	strb	r3, [r0, #22]
	grid_sys_bank_select(&grid_sys_state, 255);
    3ed0:	21ff      	movs	r1, #255	; 0xff
    3ed2:	4805      	ldr	r0, [pc, #20]	; (3ee8 <grid_sys_init+0x3c>)
    3ed4:	4b05      	ldr	r3, [pc, #20]	; (3eec <grid_sys_init+0x40>)
    3ed6:	4798      	blx	r3
	grid_port_init_all();
    3ed8:	4b05      	ldr	r3, [pc, #20]	; (3ef0 <grid_sys_init+0x44>)
    3eda:	4798      	blx	r3
	grid_sys_uart_init();
    3edc:	4b05      	ldr	r3, [pc, #20]	; (3ef4 <grid_sys_init+0x48>)
    3ede:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3ee0:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <grid_sys_init+0x4c>)
    3ee2:	4798      	blx	r3
    3ee4:	bd10      	pop	{r4, pc}
    3ee6:	bf00      	nop
    3ee8:	20003280 	.word	0x20003280
    3eec:	00003d51 	.word	0x00003d51
    3ef0:	00001639 	.word	0x00001639
    3ef4:	0000390d 	.word	0x0000390d
    3ef8:	00003ac5 	.word	0x00003ac5

00003efc <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3efc:	2903      	cmp	r1, #3
    3efe:	d009      	beq.n	3f14 <grid_msg_checksum_calculate+0x18>
    3f00:	1e43      	subs	r3, r0, #1
    3f02:	3904      	subs	r1, #4
    3f04:	4401      	add	r1, r0
    3f06:	2000      	movs	r0, #0
		checksum ^= str[i];
    3f08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3f0c:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3f0e:	428b      	cmp	r3, r1
    3f10:	d1fa      	bne.n	3f08 <grid_msg_checksum_calculate+0xc>
    3f12:	4770      	bx	lr
	uint8_t checksum = 0;
    3f14:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3f16:	4770      	bx	lr

00003f18 <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    3f18:	b500      	push	{lr}
    3f1a:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    3f1c:	1ecb      	subs	r3, r1, #3
    3f1e:	f10d 0207 	add.w	r2, sp, #7
    3f22:	2102      	movs	r1, #2
    3f24:	4418      	add	r0, r3
    3f26:	4b03      	ldr	r3, [pc, #12]	; (3f34 <grid_msg_checksum_read+0x1c>)
    3f28:	4798      	blx	r3
}
    3f2a:	b2c0      	uxtb	r0, r0
    3f2c:	b003      	add	sp, #12
    3f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    3f32:	bf00      	nop
    3f34:	00003be9 	.word	0x00003be9

00003f38 <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    3f38:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3f3a:	1ecb      	subs	r3, r1, #3
    3f3c:	2102      	movs	r1, #2
    3f3e:	4418      	add	r0, r3
    3f40:	4b01      	ldr	r3, [pc, #4]	; (3f48 <grid_msg_checksum_write+0x10>)
    3f42:	4798      	blx	r3
    3f44:	bd08      	pop	{r3, pc}
    3f46:	bf00      	nop
    3f48:	00003c29 	.word	0x00003c29

00003f4c <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3f4c:	b500      	push	{lr}
    3f4e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3f50:	aa02      	add	r2, sp, #8
    3f52:	2300      	movs	r3, #0
    3f54:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3f58:	2102      	movs	r1, #2
    3f5a:	3004      	adds	r0, #4
    3f5c:	4b02      	ldr	r3, [pc, #8]	; (3f68 <grid_msg_get_id+0x1c>)
    3f5e:	4798      	blx	r3
	
}
    3f60:	b2c0      	uxtb	r0, r0
    3f62:	b003      	add	sp, #12
    3f64:	f85d fb04 	ldr.w	pc, [sp], #4
    3f68:	00003be9 	.word	0x00003be9

00003f6c <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3f6c:	b500      	push	{lr}
    3f6e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3f70:	aa02      	add	r2, sp, #8
    3f72:	2300      	movs	r3, #0
    3f74:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3f78:	2102      	movs	r1, #2
    3f7a:	3006      	adds	r0, #6
    3f7c:	4b02      	ldr	r3, [pc, #8]	; (3f88 <grid_msg_get_dx+0x1c>)
    3f7e:	4798      	blx	r3
	
}
    3f80:	b2c0      	uxtb	r0, r0
    3f82:	b003      	add	sp, #12
    3f84:	f85d fb04 	ldr.w	pc, [sp], #4
    3f88:	00003be9 	.word	0x00003be9

00003f8c <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3f8c:	b500      	push	{lr}
    3f8e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3f90:	aa02      	add	r2, sp, #8
    3f92:	2300      	movs	r3, #0
    3f94:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3f98:	2102      	movs	r1, #2
    3f9a:	3008      	adds	r0, #8
    3f9c:	4b02      	ldr	r3, [pc, #8]	; (3fa8 <grid_msg_get_dy+0x1c>)
    3f9e:	4798      	blx	r3

}
    3fa0:	b2c0      	uxtb	r0, r0
    3fa2:	b003      	add	sp, #12
    3fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    3fa8:	00003be9 	.word	0x00003be9

00003fac <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3fac:	b500      	push	{lr}
    3fae:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3fb0:	aa02      	add	r2, sp, #8
    3fb2:	2300      	movs	r3, #0
    3fb4:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3fb8:	2102      	movs	r1, #2
    3fba:	300a      	adds	r0, #10
    3fbc:	4b02      	ldr	r3, [pc, #8]	; (3fc8 <grid_msg_get_age+0x1c>)
    3fbe:	4798      	blx	r3
	
}
    3fc0:	b2c0      	uxtb	r0, r0
    3fc2:	b003      	add	sp, #12
    3fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    3fc8:	00003be9 	.word	0x00003be9

00003fcc <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3fcc:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3fce:	460a      	mov	r2, r1
    3fd0:	2102      	movs	r1, #2
    3fd2:	3004      	adds	r0, #4
    3fd4:	4b01      	ldr	r3, [pc, #4]	; (3fdc <grid_msg_set_id+0x10>)
    3fd6:	4798      	blx	r3
    3fd8:	bd08      	pop	{r3, pc}
    3fda:	bf00      	nop
    3fdc:	00003c29 	.word	0x00003c29

00003fe0 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3fe0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3fe2:	460a      	mov	r2, r1
    3fe4:	2102      	movs	r1, #2
    3fe6:	3006      	adds	r0, #6
    3fe8:	4b01      	ldr	r3, [pc, #4]	; (3ff0 <grid_msg_set_dx+0x10>)
    3fea:	4798      	blx	r3
    3fec:	bd08      	pop	{r3, pc}
    3fee:	bf00      	nop
    3ff0:	00003c29 	.word	0x00003c29

00003ff4 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3ff4:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3ff6:	460a      	mov	r2, r1
    3ff8:	2102      	movs	r1, #2
    3ffa:	3008      	adds	r0, #8
    3ffc:	4b01      	ldr	r3, [pc, #4]	; (4004 <grid_msg_set_dy+0x10>)
    3ffe:	4798      	blx	r3
    4000:	bd08      	pop	{r3, pc}
    4002:	bf00      	nop
    4004:	00003c29 	.word	0x00003c29

00004008 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    4008:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    400a:	460a      	mov	r2, r1
    400c:	2102      	movs	r1, #2
    400e:	300a      	adds	r0, #10
    4010:	4b01      	ldr	r3, [pc, #4]	; (4018 <grid_msg_set_age+0x10>)
    4012:	4798      	blx	r3
    4014:	bd08      	pop	{r3, pc}
    4016:	bf00      	nop
    4018:	00003c29 	.word	0x00003c29

0000401c <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    401c:	69c3      	ldr	r3, [r0, #28]
    401e:	4299      	cmp	r1, r3
    4020:	d00d      	beq.n	403e <grid_msg_find_recent+0x22>
    4022:	2301      	movs	r3, #1
    4024:	f003 021f 	and.w	r2, r3, #31
    4028:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    402c:	69d2      	ldr	r2, [r2, #28]
    402e:	428a      	cmp	r2, r1
    4030:	d007      	beq.n	4042 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    4032:	3301      	adds	r3, #1
    4034:	b2db      	uxtb	r3, r3
    4036:	2b20      	cmp	r3, #32
    4038:	d1f4      	bne.n	4024 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    403a:	2000      	movs	r0, #0
    403c:	4770      	bx	lr
			return 1;
    403e:	2001      	movs	r0, #1
    4040:	4770      	bx	lr
    4042:	2001      	movs	r0, #1
}
    4044:	4770      	bx	lr

00004046 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    4046:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    404a:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    404c:	f003 031f 	and.w	r3, r3, #31
    4050:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    4054:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4058:	61c1      	str	r1, [r0, #28]
    405a:	4770      	bx	lr

0000405c <grid_ui_model_init>:

	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    405c:	b510      	push	{r4, lr}
    405e:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    4060:	2307      	movs	r3, #7
    4062:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    4064:	4419      	add	r1, r3
    4066:	b2c8      	uxtb	r0, r1
    4068:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    406a:	0100      	lsls	r0, r0, #4
    406c:	4b02      	ldr	r3, [pc, #8]	; (4078 <grid_ui_model_init+0x1c>)
    406e:	4798      	blx	r3
    4070:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    4072:	3070      	adds	r0, #112	; 0x70
    4074:	60a0      	str	r0, [r4, #8]
		
}
    4076:	bd10      	pop	{r4, pc}
    4078:	0000c521 	.word	0x0000c521

0000407c <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    407c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4080:	4605      	mov	r5, r0
    4082:	4698      	mov	r8, r3
    4084:	9808      	ldr	r0, [sp, #32]
    4086:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    4088:	010c      	lsls	r4, r1, #4
    408a:	686b      	ldr	r3, [r5, #4]
    408c:	2100      	movs	r1, #0
    408e:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    4090:	686b      	ldr	r3, [r5, #4]
    4092:	4423      	add	r3, r4
    4094:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    4096:	686b      	ldr	r3, [r5, #4]
    4098:	4423      	add	r3, r4
    409a:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    409c:	686b      	ldr	r3, [r5, #4]
    409e:	4423      	add	r3, r4
    40a0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    40a4:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    40a6:	686b      	ldr	r3, [r5, #4]
    40a8:	eb03 0904 	add.w	r9, r3, r4
    40ac:	4f1b      	ldr	r7, [pc, #108]	; (411c <grid_report_init+0xa0>)
    40ae:	47b8      	blx	r7
    40b0:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    40b4:	686b      	ldr	r3, [r5, #4]
    40b6:	eb03 0904 	add.w	r9, r3, r4
    40ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    40bc:	47b8      	blx	r7
    40be:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    40c2:	686a      	ldr	r2, [r5, #4]
    40c4:	4422      	add	r2, r4
    40c6:	6853      	ldr	r3, [r2, #4]
    40c8:	b30b      	cbz	r3, 410e <grid_report_init+0x92>
    40ca:	68d3      	ldr	r3, [r2, #12]
    40cc:	b313      	cbz	r3, 4114 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    40ce:	7893      	ldrb	r3, [r2, #2]
    40d0:	b15b      	cbz	r3, 40ea <grid_report_init+0x6e>
    40d2:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    40d4:	f818 1003 	ldrb.w	r1, [r8, r3]
    40d8:	6852      	ldr	r2, [r2, #4]
    40da:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    40dc:	3301      	adds	r3, #1
    40de:	b2db      	uxtb	r3, r3
    40e0:	686a      	ldr	r2, [r5, #4]
    40e2:	4422      	add	r2, r4
    40e4:	7891      	ldrb	r1, [r2, #2]
    40e6:	4299      	cmp	r1, r3
    40e8:	d8f4      	bhi.n	40d4 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    40ea:	686a      	ldr	r2, [r5, #4]
    40ec:	4422      	add	r2, r4
    40ee:	7a10      	ldrb	r0, [r2, #8]
    40f0:	b188      	cbz	r0, 4116 <grid_report_init+0x9a>
    40f2:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    40f4:	5cf1      	ldrb	r1, [r6, r3]
    40f6:	68d2      	ldr	r2, [r2, #12]
    40f8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    40fa:	3301      	adds	r3, #1
    40fc:	b2db      	uxtb	r3, r3
    40fe:	686a      	ldr	r2, [r5, #4]
    4100:	4422      	add	r2, r4
    4102:	7a11      	ldrb	r1, [r2, #8]
    4104:	4299      	cmp	r1, r3
    4106:	d8f5      	bhi.n	40f4 <grid_report_init+0x78>
	}
	
	return 0;
    4108:	2000      	movs	r0, #0
    410a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    410e:	20ff      	movs	r0, #255	; 0xff
    4110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4114:	20ff      	movs	r0, #255	; 0xff
	
}
    4116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    411a:	bf00      	nop
    411c:	0000c521 	.word	0x0000c521

00004120 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    4120:	b510      	push	{r4, lr}
    4122:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    4124:	7844      	ldrb	r4, [r0, #1]
    4126:	4421      	add	r1, r4
    4128:	9c08      	ldr	r4, [sp, #32]
    412a:	9402      	str	r4, [sp, #8]
    412c:	9c07      	ldr	r4, [sp, #28]
    412e:	9401      	str	r4, [sp, #4]
    4130:	9c06      	ldr	r4, [sp, #24]
    4132:	9400      	str	r4, [sp, #0]
    4134:	b2c9      	uxtb	r1, r1
    4136:	4c02      	ldr	r4, [pc, #8]	; (4140 <grid_report_ui_init+0x20>)
    4138:	47a0      	blx	r4
}
    413a:	b004      	add	sp, #16
    413c:	bd10      	pop	{r4, pc}
    413e:	bf00      	nop
    4140:	0000407d 	.word	0x0000407d

00004144 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    4144:	7843      	ldrb	r3, [r0, #1]
    4146:	2b00      	cmp	r3, #0
    4148:	f000 80e9 	beq.w	431e <grid_report_sys_init+0x1da>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    414c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4150:	b091      	sub	sp, #68	; 0x44
    4152:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    4154:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    4156:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4158:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 4344 <grid_report_sys_init+0x200>
    415c:	e047      	b.n	41ee <grid_report_sys_init+0xaa>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    415e:	2303      	movs	r3, #3
    4160:	9303      	str	r3, [sp, #12]
    4162:	9502      	str	r5, [sp, #8]
    4164:	2365      	movs	r3, #101	; 0x65
    4166:	9301      	str	r3, [sp, #4]
    4168:	2364      	movs	r3, #100	; 0x64
    416a:	9300      	str	r3, [sp, #0]
    416c:	2304      	movs	r3, #4
    416e:	2202      	movs	r2, #2
    4170:	496b      	ldr	r1, [pc, #428]	; (4320 <grid_report_sys_init+0x1dc>)
    4172:	a808      	add	r0, sp, #32
    4174:	4e6b      	ldr	r6, [pc, #428]	; (4324 <grid_report_sys_init+0x1e0>)
    4176:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    4178:	2602      	movs	r6, #2
    417a:	e01d      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_CFG, GRID_MSG_COMMAND_SYS_CFG_REQUEST, GRID_MSG_END_OF_TEXT);
    417c:	2603      	movs	r6, #3
    417e:	9602      	str	r6, [sp, #8]
    4180:	2369      	movs	r3, #105	; 0x69
    4182:	9301      	str	r3, [sp, #4]
    4184:	2368      	movs	r3, #104	; 0x68
    4186:	9300      	str	r3, [sp, #0]
    4188:	2304      	movs	r3, #4
    418a:	2202      	movs	r2, #2
    418c:	4966      	ldr	r1, [pc, #408]	; (4328 <grid_report_sys_init+0x1e4>)
    418e:	a808      	add	r0, sp, #32
    4190:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4324 <grid_report_sys_init+0x1e0>
    4194:	47c8      	blx	r9
    4196:	e00f      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    4198:	4b64      	ldr	r3, [pc, #400]	; (432c <grid_report_sys_init+0x1e8>)
    419a:	4798      	blx	r3
    419c:	2303      	movs	r3, #3
    419e:	9303      	str	r3, [sp, #12]
    41a0:	9002      	str	r0, [sp, #8]
    41a2:	2367      	movs	r3, #103	; 0x67
    41a4:	9301      	str	r3, [sp, #4]
    41a6:	2366      	movs	r3, #102	; 0x66
    41a8:	9300      	str	r3, [sp, #0]
    41aa:	2304      	movs	r3, #4
    41ac:	2202      	movs	r2, #2
    41ae:	495c      	ldr	r1, [pc, #368]	; (4320 <grid_report_sys_init+0x1dc>)
    41b0:	a808      	add	r0, sp, #32
    41b2:	4e5c      	ldr	r6, [pc, #368]	; (4324 <grid_report_sys_init+0x1e0>)
    41b4:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    41b6:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    41b8:	a808      	add	r0, sp, #32
    41ba:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    41bc:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    41c0:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    41c4:	2302      	movs	r3, #2
    41c6:	9302      	str	r3, [sp, #8]
    41c8:	ab07      	add	r3, sp, #28
    41ca:	9301      	str	r3, [sp, #4]
    41cc:	b2c0      	uxtb	r0, r0
    41ce:	9000      	str	r0, [sp, #0]
    41d0:	ab08      	add	r3, sp, #32
    41d2:	4632      	mov	r2, r6
    41d4:	4621      	mov	r1, r4
    41d6:	4638      	mov	r0, r7
    41d8:	4e55      	ldr	r6, [pc, #340]	; (4330 <grid_report_sys_init+0x1ec>)
    41da:	47b0      	blx	r6
		
		if (error != 0){
    41dc:	2800      	cmp	r0, #0
    41de:	f040 809b 	bne.w	4318 <grid_report_sys_init+0x1d4>
	for(uint8_t i=0; i<mod->report_offset; i++){
    41e2:	3401      	adds	r4, #1
    41e4:	b2e4      	uxtb	r4, r4
    41e6:	787b      	ldrb	r3, [r7, #1]
    41e8:	42a3      	cmp	r3, r4
    41ea:	f240 8095 	bls.w	4318 <grid_report_sys_init+0x1d4>
		uint8_t payload_template[30] = {0};
    41ee:	221e      	movs	r2, #30
    41f0:	4629      	mov	r1, r5
    41f2:	a808      	add	r0, sp, #32
    41f4:	4b4f      	ldr	r3, [pc, #316]	; (4334 <grid_report_sys_init+0x1f0>)
    41f6:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    41f8:	2c05      	cmp	r4, #5
    41fa:	d0b0      	beq.n	415e <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST
    41fc:	2c06      	cmp	r4, #6
    41fe:	d0bd      	beq.n	417c <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    4200:	2c00      	cmp	r4, #0
    4202:	d0c9      	beq.n	4198 <grid_report_sys_init+0x54>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    4204:	2c01      	cmp	r4, #1
    4206:	d007      	beq.n	4218 <grid_report_sys_init+0xd4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    4208:	2c02      	cmp	r4, #2
    420a:	d025      	beq.n	4258 <grid_report_sys_init+0x114>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    420c:	2c03      	cmp	r4, #3
    420e:	d043      	beq.n	4298 <grid_report_sys_init+0x154>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    4210:	2c04      	cmp	r4, #4
    4212:	d061      	beq.n	42d8 <grid_report_sys_init+0x194>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    4214:	462e      	mov	r6, r5
    4216:	e7cf      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4218:	4b44      	ldr	r3, [pc, #272]	; (432c <grid_report_sys_init+0x1e8>)
    421a:	4798      	blx	r3
    421c:	2604      	movs	r6, #4
    421e:	9605      	str	r6, [sp, #20]
    4220:	23ff      	movs	r3, #255	; 0xff
    4222:	9304      	str	r3, [sp, #16]
    4224:	9303      	str	r3, [sp, #12]
    4226:	9002      	str	r0, [sp, #8]
    4228:	2311      	movs	r3, #17
    422a:	9301      	str	r3, [sp, #4]
    422c:	2307      	movs	r3, #7
    422e:	9300      	str	r3, [sp, #0]
    4230:	230e      	movs	r3, #14
    4232:	2201      	movs	r2, #1
    4234:	4940      	ldr	r1, [pc, #256]	; (4338 <grid_report_sys_init+0x1f4>)
    4236:	a808      	add	r0, sp, #32
    4238:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4324 <grid_report_sys_init+0x1e0>
    423c:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    423e:	a808      	add	r0, sp, #32
    4240:	47c0      	blx	r8
    4242:	4681      	mov	r9, r0
    4244:	4601      	mov	r1, r0
    4246:	a808      	add	r0, sp, #32
    4248:	4b3c      	ldr	r3, [pc, #240]	; (433c <grid_report_sys_init+0x1f8>)
    424a:	4798      	blx	r3
    424c:	4602      	mov	r2, r0
    424e:	4649      	mov	r1, r9
    4250:	a808      	add	r0, sp, #32
    4252:	4b3b      	ldr	r3, [pc, #236]	; (4340 <grid_report_sys_init+0x1fc>)
    4254:	4798      	blx	r3
    4256:	e7af      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4258:	4b34      	ldr	r3, [pc, #208]	; (432c <grid_report_sys_init+0x1e8>)
    425a:	4798      	blx	r3
    425c:	2304      	movs	r3, #4
    425e:	9305      	str	r3, [sp, #20]
    4260:	23ff      	movs	r3, #255	; 0xff
    4262:	9304      	str	r3, [sp, #16]
    4264:	9303      	str	r3, [sp, #12]
    4266:	9002      	str	r0, [sp, #8]
    4268:	2312      	movs	r3, #18
    426a:	9301      	str	r3, [sp, #4]
    426c:	2307      	movs	r3, #7
    426e:	9300      	str	r3, [sp, #0]
    4270:	230e      	movs	r3, #14
    4272:	2201      	movs	r2, #1
    4274:	4930      	ldr	r1, [pc, #192]	; (4338 <grid_report_sys_init+0x1f4>)
    4276:	a808      	add	r0, sp, #32
    4278:	4e2a      	ldr	r6, [pc, #168]	; (4324 <grid_report_sys_init+0x1e0>)
    427a:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    427c:	a808      	add	r0, sp, #32
    427e:	47c0      	blx	r8
    4280:	4606      	mov	r6, r0
    4282:	4601      	mov	r1, r0
    4284:	a808      	add	r0, sp, #32
    4286:	4b2d      	ldr	r3, [pc, #180]	; (433c <grid_report_sys_init+0x1f8>)
    4288:	4798      	blx	r3
    428a:	4602      	mov	r2, r0
    428c:	4631      	mov	r1, r6
    428e:	a808      	add	r0, sp, #32
    4290:	4b2b      	ldr	r3, [pc, #172]	; (4340 <grid_report_sys_init+0x1fc>)
    4292:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    4294:	2605      	movs	r6, #5
    4296:	e78f      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4298:	4b24      	ldr	r3, [pc, #144]	; (432c <grid_report_sys_init+0x1e8>)
    429a:	4798      	blx	r3
    429c:	2304      	movs	r3, #4
    429e:	9305      	str	r3, [sp, #20]
    42a0:	23ff      	movs	r3, #255	; 0xff
    42a2:	9304      	str	r3, [sp, #16]
    42a4:	9303      	str	r3, [sp, #12]
    42a6:	9002      	str	r0, [sp, #8]
    42a8:	2313      	movs	r3, #19
    42aa:	9301      	str	r3, [sp, #4]
    42ac:	2307      	movs	r3, #7
    42ae:	9300      	str	r3, [sp, #0]
    42b0:	230e      	movs	r3, #14
    42b2:	2201      	movs	r2, #1
    42b4:	4920      	ldr	r1, [pc, #128]	; (4338 <grid_report_sys_init+0x1f4>)
    42b6:	a808      	add	r0, sp, #32
    42b8:	4e1a      	ldr	r6, [pc, #104]	; (4324 <grid_report_sys_init+0x1e0>)
    42ba:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    42bc:	a808      	add	r0, sp, #32
    42be:	47c0      	blx	r8
    42c0:	4606      	mov	r6, r0
    42c2:	4601      	mov	r1, r0
    42c4:	a808      	add	r0, sp, #32
    42c6:	4b1d      	ldr	r3, [pc, #116]	; (433c <grid_report_sys_init+0x1f8>)
    42c8:	4798      	blx	r3
    42ca:	4602      	mov	r2, r0
    42cc:	4631      	mov	r1, r6
    42ce:	a808      	add	r0, sp, #32
    42d0:	4b1b      	ldr	r3, [pc, #108]	; (4340 <grid_report_sys_init+0x1fc>)
    42d2:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    42d4:	2606      	movs	r6, #6
    42d6:	e76f      	b.n	41b8 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    42d8:	4b14      	ldr	r3, [pc, #80]	; (432c <grid_report_sys_init+0x1e8>)
    42da:	4798      	blx	r3
    42dc:	2304      	movs	r3, #4
    42de:	9305      	str	r3, [sp, #20]
    42e0:	23ff      	movs	r3, #255	; 0xff
    42e2:	9304      	str	r3, [sp, #16]
    42e4:	9303      	str	r3, [sp, #12]
    42e6:	9002      	str	r0, [sp, #8]
    42e8:	2314      	movs	r3, #20
    42ea:	9301      	str	r3, [sp, #4]
    42ec:	2607      	movs	r6, #7
    42ee:	9600      	str	r6, [sp, #0]
    42f0:	230e      	movs	r3, #14
    42f2:	2201      	movs	r2, #1
    42f4:	4910      	ldr	r1, [pc, #64]	; (4338 <grid_report_sys_init+0x1f4>)
    42f6:	a808      	add	r0, sp, #32
    42f8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4324 <grid_report_sys_init+0x1e0>
    42fc:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    42fe:	a808      	add	r0, sp, #32
    4300:	47c0      	blx	r8
    4302:	4681      	mov	r9, r0
    4304:	4601      	mov	r1, r0
    4306:	a808      	add	r0, sp, #32
    4308:	4b0c      	ldr	r3, [pc, #48]	; (433c <grid_report_sys_init+0x1f8>)
    430a:	4798      	blx	r3
    430c:	4602      	mov	r2, r0
    430e:	4649      	mov	r1, r9
    4310:	a808      	add	r0, sp, #32
    4312:	4b0b      	ldr	r3, [pc, #44]	; (4340 <grid_report_sys_init+0x1fc>)
    4314:	4798      	blx	r3
    4316:	e74f      	b.n	41b8 <grid_report_sys_init+0x74>
			}
			
		}
	
	}
}
    4318:	b011      	add	sp, #68	; 0x44
    431a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    431e:	4770      	bx	lr
    4320:	0000dcd4 	.word	0x0000dcd4
    4324:	0000c935 	.word	0x0000c935
    4328:	0000dcec 	.word	0x0000dcec
    432c:	00003c61 	.word	0x00003c61
    4330:	0000407d 	.word	0x0000407d
    4334:	0000c547 	.word	0x0000c547
    4338:	0000dd00 	.word	0x0000dd00
    433c:	00003efd 	.word	0x00003efd
    4340:	00003f39 	.word	0x00003f39
    4344:	0000c97d 	.word	0x0000c97d

00004348 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    4348:	6843      	ldr	r3, [r0, #4]
    434a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    434e:	7888      	ldrb	r0, [r1, #2]
    4350:	b140      	cbz	r0, 4364 <grid_report_render+0x1c>
    4352:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    4354:	6848      	ldr	r0, [r1, #4]
    4356:	5cc0      	ldrb	r0, [r0, r3]
    4358:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    435a:	3301      	adds	r3, #1
    435c:	b2db      	uxtb	r3, r3
    435e:	7888      	ldrb	r0, [r1, #2]
    4360:	4298      	cmp	r0, r3
    4362:	d8f7      	bhi.n	4354 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    4364:	4770      	bx	lr

00004366 <grid_report_ui_set_changed_flag>:
	return mod->report_array[index+mod->report_offset].changed;
}

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    4366:	7843      	ldrb	r3, [r0, #1]
    4368:	4419      	add	r1, r3
    436a:	6843      	ldr	r3, [r0, #4]
    436c:	0109      	lsls	r1, r1, #4
    436e:	2201      	movs	r2, #1
    4370:	545a      	strb	r2, [r3, r1]
    4372:	4770      	bx	lr

00004374 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    4374:	6843      	ldr	r3, [r0, #4]
    4376:	0109      	lsls	r1, r1, #4
    4378:	2201      	movs	r2, #1
    437a:	545a      	strb	r2, [r3, r1]
    437c:	4770      	bx	lr

0000437e <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    437e:	6843      	ldr	r3, [r0, #4]
    4380:	0109      	lsls	r1, r1, #4
    4382:	2200      	movs	r2, #0
    4384:	545a      	strb	r2, [r3, r1]
    4386:	4770      	bx	lr

00004388 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    4388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    438c:	b0cf      	sub	sp, #316	; 0x13c
    438e:	9007      	str	r0, [sp, #28]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4390:	4b9a      	ldr	r3, [pc, #616]	; (45fc <grid_port_process_ui+0x274>)
    4392:	781b      	ldrb	r3, [r3, #0]
    4394:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    4398:	2b00      	cmp	r3, #0
    439a:	f000 80a7 	beq.w	44ec <grid_port_process_ui+0x164>
	return mod->report_array[index].changed;
    439e:	4b97      	ldr	r3, [pc, #604]	; (45fc <grid_port_process_ui+0x274>)
    43a0:	6858      	ldr	r0, [r3, #4]
    43a2:	2300      	movs	r3, #0
    43a4:	469a      	mov	sl, r3
    43a6:	4619      	mov	r1, r3
    43a8:	469b      	mov	fp, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    43aa:	4c94      	ldr	r4, [pc, #592]	; (45fc <grid_port_process_ui+0x274>)
    43ac:	e013      	b.n	43d6 <grid_port_process_ui+0x4e>
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    43ae:	f10a 0a01 	add.w	sl, sl, #1
    43b2:	fa5f fa8a 	uxtb.w	sl, sl
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    43b6:	2a05      	cmp	r2, #5
    43b8:	d122      	bne.n	4400 <grid_port_process_ui+0x78>
    43ba:	3101      	adds	r1, #1
    43bc:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_LOCAL)?message_local_available++:1;
    43be:	2a01      	cmp	r2, #1
    43c0:	bf04      	itt	eq
    43c2:	f10b 0b01 	addeq.w	fp, fp, #1
    43c6:	fa5f fb8b 	uxtbeq.w	fp, fp
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    43ca:	3301      	adds	r3, #1
    43cc:	b2db      	uxtb	r3, r3
    43ce:	7822      	ldrb	r2, [r4, #0]
    43d0:	b2d2      	uxtb	r2, r2
    43d2:	429a      	cmp	r2, r3
    43d4:	d919      	bls.n	440a <grid_port_process_ui+0x82>
	return mod->report_array[index].changed;
    43d6:	011a      	lsls	r2, r3, #4
    43d8:	1885      	adds	r5, r0, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    43da:	5c82      	ldrb	r2, [r0, r2]
    43dc:	2a00      	cmp	r2, #0
    43de:	d0f4      	beq.n	43ca <grid_port_process_ui+0x42>
	return mod->report_array[index].type;
    43e0:	786a      	ldrb	r2, [r5, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    43e2:	2a02      	cmp	r2, #2
    43e4:	d0e3      	beq.n	43ae <grid_port_process_ui+0x26>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    43e6:	2a03      	cmp	r2, #3
    43e8:	d008      	beq.n	43fc <grid_port_process_ui+0x74>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    43ea:	2a04      	cmp	r2, #4
    43ec:	d1e3      	bne.n	43b6 <grid_port_process_ui+0x2e>
    43ee:	3101      	adds	r1, #1
    43f0:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    43f2:	2a07      	cmp	r2, #7
    43f4:	d1e3      	bne.n	43be <grid_port_process_ui+0x36>
    43f6:	3101      	adds	r1, #1
    43f8:	b2c9      	uxtb	r1, r1
    43fa:	e7e6      	b.n	43ca <grid_port_process_ui+0x42>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    43fc:	3101      	adds	r1, #1
    43fe:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    4400:	2a06      	cmp	r2, #6
    4402:	d1f6      	bne.n	43f2 <grid_port_process_ui+0x6a>
    4404:	3101      	adds	r1, #1
    4406:	b2c9      	uxtb	r1, r1
    4408:	e7df      	b.n	43ca <grid_port_process_ui+0x42>
	if (message_direct_available){
    440a:	2900      	cmp	r1, #0
    440c:	d067      	beq.n	44de <grid_port_process_ui+0x156>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    440e:	4b7b      	ldr	r3, [pc, #492]	; (45fc <grid_port_process_ui+0x274>)
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	2b00      	cmp	r3, #0
    4414:	d063      	beq.n	44de <grid_port_process_ui+0x156>
    4416:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    4418:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 45fc <grid_port_process_ui+0x274>
    441c:	e00e      	b.n	443c <grid_port_process_ui+0xb4>
					target_buffer = &GRID_PORT_U.rx_buffer;
    441e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 4634 <grid_port_process_ui+0x2ac>
				if (grid_buffer_write_init(target_buffer, length)){
    4422:	b2b1      	uxth	r1, r6
    4424:	4640      	mov	r0, r8
    4426:	4b76      	ldr	r3, [pc, #472]	; (4600 <grid_port_process_ui+0x278>)
    4428:	4798      	blx	r3
    442a:	2800      	cmp	r0, #0
    442c:	d141      	bne.n	44b2 <grid_port_process_ui+0x12a>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    442e:	3501      	adds	r5, #1
    4430:	b2ed      	uxtb	r5, r5
    4432:	f899 3000 	ldrb.w	r3, [r9]
    4436:	b2db      	uxtb	r3, r3
    4438:	42ab      	cmp	r3, r5
    443a:	d950      	bls.n	44de <grid_port_process_ui+0x156>
	return mod->report_array[index].changed;
    443c:	012c      	lsls	r4, r5, #4
    443e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4442:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    4444:	5d1b      	ldrb	r3, [r3, r4]
    4446:	2b00      	cmp	r3, #0
    4448:	d0f1      	beq.n	442e <grid_port_process_ui+0xa6>
    444a:	7853      	ldrb	r3, [r2, #1]
    444c:	3b03      	subs	r3, #3
    444e:	b2db      	uxtb	r3, r3
    4450:	2b04      	cmp	r3, #4
    4452:	d8ec      	bhi.n	442e <grid_port_process_ui+0xa6>
				uint8_t message[256] = {0};
    4454:	f44f 7280 	mov.w	r2, #256	; 0x100
    4458:	2100      	movs	r1, #0
    445a:	a80e      	add	r0, sp, #56	; 0x38
    445c:	4b69      	ldr	r3, [pc, #420]	; (4604 <grid_port_process_ui+0x27c>)
    445e:	4798      	blx	r3
				CRITICAL_SECTION_ENTER()			
    4460:	a809      	add	r0, sp, #36	; 0x24
    4462:	4b69      	ldr	r3, [pc, #420]	; (4608 <grid_port_process_ui+0x280>)
    4464:	4798      	blx	r3
				grid_report_render(mod, i, &message[length]);
    4466:	aa0e      	add	r2, sp, #56	; 0x38
    4468:	4629      	mov	r1, r5
    446a:	4648      	mov	r0, r9
    446c:	4b67      	ldr	r3, [pc, #412]	; (460c <grid_port_process_ui+0x284>)
    446e:	4798      	blx	r3
				length += strlen(&message[length]);
    4470:	a80e      	add	r0, sp, #56	; 0x38
    4472:	4b67      	ldr	r3, [pc, #412]	; (4610 <grid_port_process_ui+0x288>)
    4474:	4798      	blx	r3
    4476:	4606      	mov	r6, r0
				CRITICAL_SECTION_LEAVE()			
    4478:	a809      	add	r0, sp, #36	; 0x24
    447a:	4b66      	ldr	r3, [pc, #408]	; (4614 <grid_port_process_ui+0x28c>)
    447c:	4798      	blx	r3
	return mod->report_array[index].type;
    447e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4482:	441c      	add	r4, r3
    4484:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    4486:	2b03      	cmp	r3, #3
    4488:	d0c9      	beq.n	441e <grid_port_process_ui+0x96>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    448a:	2b04      	cmp	r3, #4
    448c:	d008      	beq.n	44a0 <grid_port_process_ui+0x118>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    448e:	2b05      	cmp	r3, #5
    4490:	d009      	beq.n	44a6 <grid_port_process_ui+0x11e>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    4492:	2b06      	cmp	r3, #6
    4494:	d00a      	beq.n	44ac <grid_port_process_ui+0x124>
					target_buffer = &GRID_PORT_W.tx_buffer;
    4496:	4a60      	ldr	r2, [pc, #384]	; (4618 <grid_port_process_ui+0x290>)
    4498:	2b07      	cmp	r3, #7
    449a:	bf08      	it	eq
    449c:	4690      	moveq	r8, r2
    449e:	e7c0      	b.n	4422 <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_N.tx_buffer;
    44a0:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4638 <grid_port_process_ui+0x2b0>
    44a4:	e7bd      	b.n	4422 <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_E.tx_buffer;
    44a6:	f8df 8194 	ldr.w	r8, [pc, #404]	; 463c <grid_port_process_ui+0x2b4>
    44aa:	e7ba      	b.n	4422 <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_S.tx_buffer;
    44ac:	f8df 8190 	ldr.w	r8, [pc, #400]	; 4640 <grid_port_process_ui+0x2b8>
    44b0:	e7b7      	b.n	4422 <grid_port_process_ui+0x9a>
					grid_report_sys_clear_changed_flag(mod, i);
    44b2:	4629      	mov	r1, r5
    44b4:	4648      	mov	r0, r9
    44b6:	4b59      	ldr	r3, [pc, #356]	; (461c <grid_port_process_ui+0x294>)
    44b8:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    44ba:	b166      	cbz	r6, 44d6 <grid_port_process_ui+0x14e>
    44bc:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    44c0:	ab4e      	add	r3, sp, #312	; 0x138
    44c2:	441e      	add	r6, r3
    44c4:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    44c8:	4f55      	ldr	r7, [pc, #340]	; (4620 <grid_port_process_ui+0x298>)
    44ca:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    44ce:	4640      	mov	r0, r8
    44d0:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    44d2:	42b4      	cmp	r4, r6
    44d4:	d1f9      	bne.n	44ca <grid_port_process_ui+0x142>
					grid_buffer_write_acknowledge(target_buffer);
    44d6:	4640      	mov	r0, r8
    44d8:	4b52      	ldr	r3, [pc, #328]	; (4624 <grid_port_process_ui+0x29c>)
    44da:	4798      	blx	r3
    44dc:	e7a7      	b.n	442e <grid_port_process_ui+0xa6>
	if (message_local_available && por->cooldown<20){
    44de:	f1bb 0f00 	cmp.w	fp, #0
    44e2:	d003      	beq.n	44ec <grid_port_process_ui+0x164>
    44e4:	9b07      	ldr	r3, [sp, #28]
    44e6:	681b      	ldr	r3, [r3, #0]
    44e8:	2b13      	cmp	r3, #19
    44ea:	d935      	bls.n	4558 <grid_port_process_ui+0x1d0>
	if (por->cooldown > 15){
    44ec:	9b07      	ldr	r3, [sp, #28]
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	2b0f      	cmp	r3, #15
    44f2:	f200 80f0 	bhi.w	46d6 <grid_port_process_ui+0x34e>
	else if (por->cooldown>0){
    44f6:	b113      	cbz	r3, 44fe <grid_port_process_ui+0x176>
		por->cooldown--;
    44f8:	3b01      	subs	r3, #1
    44fa:	9a07      	ldr	r2, [sp, #28]
    44fc:	6013      	str	r3, [r2, #0]
	if (message_broadcast_available){
    44fe:	f1ba 0f00 	cmp.w	sl, #0
    4502:	f000 80eb 	beq.w	46dc <grid_port_process_ui+0x354>
		uint8_t message[256] = {0};
    4506:	f44f 7280 	mov.w	r2, #256	; 0x100
    450a:	2100      	movs	r1, #0
    450c:	a80e      	add	r0, sp, #56	; 0x38
    450e:	4b3d      	ldr	r3, [pc, #244]	; (4604 <grid_port_process_ui+0x27c>)
    4510:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4512:	4b45      	ldr	r3, [pc, #276]	; (4628 <grid_port_process_ui+0x2a0>)
    4514:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4518:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    451a:	2117      	movs	r1, #23
    451c:	9105      	str	r1, [sp, #20]
    451e:	9304      	str	r3, [sp, #16]
    4520:	237f      	movs	r3, #127	; 0x7f
    4522:	9303      	str	r3, [sp, #12]
    4524:	9302      	str	r3, [sp, #8]
    4526:	9201      	str	r2, [sp, #4]
    4528:	2300      	movs	r3, #0
    452a:	9300      	str	r3, [sp, #0]
    452c:	230f      	movs	r3, #15
    452e:	2201      	movs	r2, #1
    4530:	493e      	ldr	r1, [pc, #248]	; (462c <grid_port_process_ui+0x2a4>)
    4532:	a80e      	add	r0, sp, #56	; 0x38
    4534:	4c3e      	ldr	r4, [pc, #248]	; (4630 <grid_port_process_ui+0x2a8>)
    4536:	47a0      	blx	r4
		length += strlen(&message[length]);
    4538:	a80e      	add	r0, sp, #56	; 0x38
    453a:	4b35      	ldr	r3, [pc, #212]	; (4610 <grid_port_process_ui+0x288>)
    453c:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    453e:	4b2f      	ldr	r3, [pc, #188]	; (45fc <grid_port_process_ui+0x274>)
    4540:	781b      	ldrb	r3, [r3, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	f000 80ca 	beq.w	46dc <grid_port_process_ui+0x354>
    4548:	4605      	mov	r5, r0
    454a:	2400      	movs	r4, #0
    454c:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    454e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4608 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    4552:	4e2a      	ldr	r6, [pc, #168]	; (45fc <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    4554:	4f2f      	ldr	r7, [pc, #188]	; (4614 <grid_port_process_ui+0x28c>)
    4556:	e0cc      	b.n	46f2 <grid_port_process_ui+0x36a>
		uint8_t message[256] = {0};
    4558:	f44f 7280 	mov.w	r2, #256	; 0x100
    455c:	2100      	movs	r1, #0
    455e:	a80e      	add	r0, sp, #56	; 0x38
    4560:	4b28      	ldr	r3, [pc, #160]	; (4604 <grid_port_process_ui+0x27c>)
    4562:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4564:	4b30      	ldr	r3, [pc, #192]	; (4628 <grid_port_process_ui+0x2a0>)
    4566:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    456a:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    456c:	2117      	movs	r1, #23
    456e:	9105      	str	r1, [sp, #20]
    4570:	9304      	str	r3, [sp, #16]
    4572:	237f      	movs	r3, #127	; 0x7f
    4574:	9303      	str	r3, [sp, #12]
    4576:	9302      	str	r3, [sp, #8]
    4578:	9201      	str	r2, [sp, #4]
    457a:	2300      	movs	r3, #0
    457c:	9300      	str	r3, [sp, #0]
    457e:	230f      	movs	r3, #15
    4580:	2201      	movs	r2, #1
    4582:	492a      	ldr	r1, [pc, #168]	; (462c <grid_port_process_ui+0x2a4>)
    4584:	a80e      	add	r0, sp, #56	; 0x38
    4586:	4c2a      	ldr	r4, [pc, #168]	; (4630 <grid_port_process_ui+0x2a8>)
    4588:	47a0      	blx	r4
		length += strlen(&message[length]);
    458a:	a80e      	add	r0, sp, #56	; 0x38
    458c:	4b20      	ldr	r3, [pc, #128]	; (4610 <grid_port_process_ui+0x288>)
    458e:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4590:	4b1a      	ldr	r3, [pc, #104]	; (45fc <grid_port_process_ui+0x274>)
    4592:	781b      	ldrb	r3, [r3, #0]
    4594:	2b00      	cmp	r3, #0
    4596:	d0a9      	beq.n	44ec <grid_port_process_ui+0x164>
    4598:	4605      	mov	r5, r0
    459a:	2400      	movs	r4, #0
    459c:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    459e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 4608 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    45a2:	4e16      	ldr	r6, [pc, #88]	; (45fc <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    45a4:	4f1b      	ldr	r7, [pc, #108]	; (4614 <grid_port_process_ui+0x28c>)
    45a6:	e007      	b.n	45b8 <grid_port_process_ui+0x230>
    45a8:	a80a      	add	r0, sp, #40	; 0x28
    45aa:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    45ac:	3401      	adds	r4, #1
    45ae:	b2e4      	uxtb	r4, r4
    45b0:	7833      	ldrb	r3, [r6, #0]
    45b2:	b2db      	uxtb	r3, r3
    45b4:	42a3      	cmp	r3, r4
    45b6:	d945      	bls.n	4644 <grid_port_process_ui+0x2bc>
			if (length>200){
    45b8:	2dc8      	cmp	r5, #200	; 0xc8
    45ba:	d8f7      	bhi.n	45ac <grid_port_process_ui+0x224>
			CRITICAL_SECTION_ENTER()
    45bc:	a80a      	add	r0, sp, #40	; 0x28
    45be:	47c0      	blx	r8
	return mod->report_array[index].changed;
    45c0:	0123      	lsls	r3, r4, #4
    45c2:	6872      	ldr	r2, [r6, #4]
    45c4:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_LOCAL){
    45c6:	5cd3      	ldrb	r3, [r2, r3]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d0ed      	beq.n	45a8 <grid_port_process_ui+0x220>
    45cc:	784b      	ldrb	r3, [r1, #1]
    45ce:	2b01      	cmp	r3, #1
    45d0:	d1ea      	bne.n	45a8 <grid_port_process_ui+0x220>
				packetvalid++;
    45d2:	f109 0901 	add.w	r9, r9, #1
    45d6:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    45da:	ab0e      	add	r3, sp, #56	; 0x38
    45dc:	eb03 0b05 	add.w	fp, r3, r5
    45e0:	465a      	mov	r2, fp
    45e2:	4621      	mov	r1, r4
    45e4:	4630      	mov	r0, r6
    45e6:	4b09      	ldr	r3, [pc, #36]	; (460c <grid_port_process_ui+0x284>)
    45e8:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    45ea:	4621      	mov	r1, r4
    45ec:	4630      	mov	r0, r6
    45ee:	4b0b      	ldr	r3, [pc, #44]	; (461c <grid_port_process_ui+0x294>)
    45f0:	4798      	blx	r3
				length += strlen(&message[length]);
    45f2:	4658      	mov	r0, fp
    45f4:	4b06      	ldr	r3, [pc, #24]	; (4610 <grid_port_process_ui+0x288>)
    45f6:	4798      	blx	r3
    45f8:	4405      	add	r5, r0
    45fa:	e7d5      	b.n	45a8 <grid_port_process_ui+0x220>
    45fc:	20003270 	.word	0x20003270
    4600:	000013a5 	.word	0x000013a5
    4604:	0000c547 	.word	0x0000c547
    4608:	00004ba5 	.word	0x00004ba5
    460c:	00004349 	.word	0x00004349
    4610:	0000c97d 	.word	0x0000c97d
    4614:	00004bb3 	.word	0x00004bb3
    4618:	20004700 	.word	0x20004700
    461c:	0000437f 	.word	0x0000437f
    4620:	000013d5 	.word	0x000013d5
    4624:	000013f1 	.word	0x000013f1
    4628:	20003280 	.word	0x20003280
    462c:	0000dd1c 	.word	0x0000dd1c
    4630:	0000c935 	.word	0x0000c935
    4634:	20003250 	.word	0x20003250
    4638:	200021ec 	.word	0x200021ec
    463c:	20007730 	.word	0x20007730
    4640:	2000571c 	.word	0x2000571c
		if (packetvalid){
    4644:	f1b9 0f00 	cmp.w	r9, #0
    4648:	f43f af50 	beq.w	44ec <grid_port_process_ui+0x164>
			grid_sys_state.next_broadcast_message_id++;
    464c:	4a60      	ldr	r2, [pc, #384]	; (47d0 <grid_port_process_ui+0x448>)
    464e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    4652:	3301      	adds	r3, #1
    4654:	b2db      	uxtb	r3, r3
    4656:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    465a:	ac0e      	add	r4, sp, #56	; 0x38
    465c:	1966      	adds	r6, r4, r5
    465e:	2204      	movs	r2, #4
    4660:	495c      	ldr	r1, [pc, #368]	; (47d4 <grid_port_process_ui+0x44c>)
    4662:	4630      	mov	r0, r6
    4664:	4f5c      	ldr	r7, [pc, #368]	; (47d8 <grid_port_process_ui+0x450>)
    4666:	47b8      	blx	r7
			length += strlen(&message[length]);
    4668:	4630      	mov	r0, r6
    466a:	4e5c      	ldr	r6, [pc, #368]	; (47dc <grid_port_process_ui+0x454>)
    466c:	47b0      	blx	r6
    466e:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    4670:	462a      	mov	r2, r5
    4672:	495b      	ldr	r1, [pc, #364]	; (47e0 <grid_port_process_ui+0x458>)
    4674:	a80c      	add	r0, sp, #48	; 0x30
    4676:	47b8      	blx	r7
			message[2] = length_string[0];
    4678:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    467c:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    467e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    4682:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    4684:	4b57      	ldr	r3, [pc, #348]	; (47e4 <grid_port_process_ui+0x45c>)
    4686:	6818      	ldr	r0, [r3, #0]
    4688:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    468a:	1960      	adds	r0, r4, r5
    468c:	47b0      	blx	r6
    468e:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    4690:	4629      	mov	r1, r5
    4692:	4620      	mov	r0, r4
    4694:	4b54      	ldr	r3, [pc, #336]	; (47e8 <grid_port_process_ui+0x460>)
    4696:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    4698:	4602      	mov	r2, r0
    469a:	4629      	mov	r1, r5
    469c:	4620      	mov	r0, r4
    469e:	4b53      	ldr	r3, [pc, #332]	; (47ec <grid_port_process_ui+0x464>)
    46a0:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, length)){
    46a2:	b2a9      	uxth	r1, r5
    46a4:	4852      	ldr	r0, [pc, #328]	; (47f0 <grid_port_process_ui+0x468>)
    46a6:	4b53      	ldr	r3, [pc, #332]	; (47f4 <grid_port_process_ui+0x46c>)
    46a8:	4798      	blx	r3
    46aa:	2800      	cmp	r0, #0
    46ac:	f43f af1e 	beq.w	44ec <grid_port_process_ui+0x164>
				for(uint32_t i = 0; i<length; i++){
    46b0:	b16d      	cbz	r5, 46ce <grid_port_process_ui+0x346>
    46b2:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    46b6:	ab4e      	add	r3, sp, #312	; 0x138
    46b8:	441d      	add	r5, r3
    46ba:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.tx_buffer, message[i]);
    46be:	4f4c      	ldr	r7, [pc, #304]	; (47f0 <grid_port_process_ui+0x468>)
    46c0:	4e4d      	ldr	r6, [pc, #308]	; (47f8 <grid_port_process_ui+0x470>)
    46c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    46c6:	4638      	mov	r0, r7
    46c8:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    46ca:	42a5      	cmp	r5, r4
    46cc:	d1f9      	bne.n	46c2 <grid_port_process_ui+0x33a>
				grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    46ce:	4848      	ldr	r0, [pc, #288]	; (47f0 <grid_port_process_ui+0x468>)
    46d0:	4b4a      	ldr	r3, [pc, #296]	; (47fc <grid_port_process_ui+0x474>)
    46d2:	4798      	blx	r3
    46d4:	e70a      	b.n	44ec <grid_port_process_ui+0x164>
		por->cooldown--;
    46d6:	3b01      	subs	r3, #1
    46d8:	9a07      	ldr	r2, [sp, #28]
    46da:	6013      	str	r3, [r2, #0]
}
    46dc:	b04f      	add	sp, #316	; 0x13c
    46de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			CRITICAL_SECTION_LEAVE()
    46e2:	a80b      	add	r0, sp, #44	; 0x2c
    46e4:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    46e6:	3401      	adds	r4, #1
    46e8:	b2e4      	uxtb	r4, r4
    46ea:	7833      	ldrb	r3, [r6, #0]
    46ec:	b2db      	uxtb	r3, r3
    46ee:	42a3      	cmp	r3, r4
    46f0:	d921      	bls.n	4736 <grid_port_process_ui+0x3ae>
			if (length>200){
    46f2:	2dc8      	cmp	r5, #200	; 0xc8
    46f4:	d8f7      	bhi.n	46e6 <grid_port_process_ui+0x35e>
			CRITICAL_SECTION_ENTER()
    46f6:	a80b      	add	r0, sp, #44	; 0x2c
    46f8:	47c0      	blx	r8
	return mod->report_array[index].changed;
    46fa:	0123      	lsls	r3, r4, #4
    46fc:	6872      	ldr	r2, [r6, #4]
    46fe:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    4700:	5cd3      	ldrb	r3, [r2, r3]
    4702:	2b00      	cmp	r3, #0
    4704:	d0ed      	beq.n	46e2 <grid_port_process_ui+0x35a>
    4706:	784b      	ldrb	r3, [r1, #1]
    4708:	2b02      	cmp	r3, #2
    470a:	d1ea      	bne.n	46e2 <grid_port_process_ui+0x35a>
				packetvalid++;
    470c:	f109 0901 	add.w	r9, r9, #1
    4710:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    4714:	ab0e      	add	r3, sp, #56	; 0x38
    4716:	eb03 0a05 	add.w	sl, r3, r5
    471a:	4652      	mov	r2, sl
    471c:	4621      	mov	r1, r4
    471e:	4630      	mov	r0, r6
    4720:	4b37      	ldr	r3, [pc, #220]	; (4800 <grid_port_process_ui+0x478>)
    4722:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    4724:	4621      	mov	r1, r4
    4726:	4630      	mov	r0, r6
    4728:	4b36      	ldr	r3, [pc, #216]	; (4804 <grid_port_process_ui+0x47c>)
    472a:	4798      	blx	r3
				length += strlen(&message[length]);
    472c:	4650      	mov	r0, sl
    472e:	4b2b      	ldr	r3, [pc, #172]	; (47dc <grid_port_process_ui+0x454>)
    4730:	4798      	blx	r3
    4732:	4405      	add	r5, r0
    4734:	e7d5      	b.n	46e2 <grid_port_process_ui+0x35a>
		if (packetvalid){
    4736:	f1b9 0f00 	cmp.w	r9, #0
    473a:	d0cf      	beq.n	46dc <grid_port_process_ui+0x354>
			por->cooldown += (10+por->cooldown);
    473c:	9a07      	ldr	r2, [sp, #28]
    473e:	6813      	ldr	r3, [r2, #0]
    4740:	005b      	lsls	r3, r3, #1
    4742:	330a      	adds	r3, #10
    4744:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    4746:	4a22      	ldr	r2, [pc, #136]	; (47d0 <grid_port_process_ui+0x448>)
    4748:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    474c:	3301      	adds	r3, #1
    474e:	b2db      	uxtb	r3, r3
    4750:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    4754:	ac0e      	add	r4, sp, #56	; 0x38
    4756:	1966      	adds	r6, r4, r5
    4758:	2204      	movs	r2, #4
    475a:	491e      	ldr	r1, [pc, #120]	; (47d4 <grid_port_process_ui+0x44c>)
    475c:	4630      	mov	r0, r6
    475e:	4f1e      	ldr	r7, [pc, #120]	; (47d8 <grid_port_process_ui+0x450>)
    4760:	47b8      	blx	r7
			length += strlen(&message[length]);
    4762:	4630      	mov	r0, r6
    4764:	4e1d      	ldr	r6, [pc, #116]	; (47dc <grid_port_process_ui+0x454>)
    4766:	47b0      	blx	r6
    4768:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    476a:	462a      	mov	r2, r5
    476c:	491c      	ldr	r1, [pc, #112]	; (47e0 <grid_port_process_ui+0x458>)
    476e:	a80c      	add	r0, sp, #48	; 0x30
    4770:	47b8      	blx	r7
			message[2] = length_string[0];
    4772:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4776:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4778:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    477c:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    477e:	4b19      	ldr	r3, [pc, #100]	; (47e4 <grid_port_process_ui+0x45c>)
    4780:	6818      	ldr	r0, [r3, #0]
    4782:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4784:	1960      	adds	r0, r4, r5
    4786:	47b0      	blx	r6
    4788:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    478a:	4629      	mov	r1, r5
    478c:	4620      	mov	r0, r4
    478e:	4b16      	ldr	r3, [pc, #88]	; (47e8 <grid_port_process_ui+0x460>)
    4790:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    4792:	4602      	mov	r2, r0
    4794:	4629      	mov	r1, r5
    4796:	4620      	mov	r0, r4
    4798:	4b14      	ldr	r3, [pc, #80]	; (47ec <grid_port_process_ui+0x464>)
    479a:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    479c:	b2a9      	uxth	r1, r5
    479e:	481a      	ldr	r0, [pc, #104]	; (4808 <grid_port_process_ui+0x480>)
    47a0:	4b14      	ldr	r3, [pc, #80]	; (47f4 <grid_port_process_ui+0x46c>)
    47a2:	4798      	blx	r3
    47a4:	2800      	cmp	r0, #0
    47a6:	d099      	beq.n	46dc <grid_port_process_ui+0x354>
				for(uint32_t i = 0; i<length; i++){
    47a8:	b16d      	cbz	r5, 47c6 <grid_port_process_ui+0x43e>
    47aa:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    47ae:	ab4e      	add	r3, sp, #312	; 0x138
    47b0:	441d      	add	r5, r3
    47b2:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    47b6:	4f14      	ldr	r7, [pc, #80]	; (4808 <grid_port_process_ui+0x480>)
    47b8:	4e0f      	ldr	r6, [pc, #60]	; (47f8 <grid_port_process_ui+0x470>)
    47ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    47be:	4638      	mov	r0, r7
    47c0:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    47c2:	42ac      	cmp	r4, r5
    47c4:	d1f9      	bne.n	47ba <grid_port_process_ui+0x432>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    47c6:	4810      	ldr	r0, [pc, #64]	; (4808 <grid_port_process_ui+0x480>)
    47c8:	4b0c      	ldr	r3, [pc, #48]	; (47fc <grid_port_process_ui+0x474>)
    47ca:	4798      	blx	r3
    47cc:	e786      	b.n	46dc <grid_port_process_ui+0x354>
    47ce:	bf00      	nop
    47d0:	20003280 	.word	0x20003280
    47d4:	0000dd34 	.word	0x0000dd34
    47d8:	0000c935 	.word	0x0000c935
    47dc:	0000c97d 	.word	0x0000c97d
    47e0:	0000dd38 	.word	0x0000dd38
    47e4:	0000dd40 	.word	0x0000dd40
    47e8:	00003efd 	.word	0x00003efd
    47ec:	00003f39 	.word	0x00003f39
    47f0:	20003238 	.word	0x20003238
    47f4:	000013a5 	.word	0x000013a5
    47f8:	000013d5 	.word	0x000013d5
    47fc:	000013f1 	.word	0x000013f1
    4800:	00004349 	.word	0x00004349
    4804:	0000437f 	.word	0x0000437f
    4808:	20003250 	.word	0x20003250

0000480c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    480c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    480e:	6983      	ldr	r3, [r0, #24]
    4810:	b103      	cbz	r3, 4814 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    4812:	4798      	blx	r3
    4814:	bd08      	pop	{r3, pc}

00004816 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    4816:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    4818:	69c3      	ldr	r3, [r0, #28]
    481a:	b103      	cbz	r3, 481e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    481c:	4798      	blx	r3
    481e:	bd08      	pop	{r3, pc}

00004820 <adc_async_channel_conversion_done>:
{
    4820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4824:	4606      	mov	r6, r0
    4826:	460f      	mov	r7, r1
    4828:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    482a:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    482c:	5c5c      	ldrb	r4, [r3, r1]
    482e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4832:	00e4      	lsls	r4, r4, #3
    4834:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    4838:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    483c:	f105 0a04 	add.w	sl, r5, #4
    4840:	b2d1      	uxtb	r1, r2
    4842:	4650      	mov	r0, sl
    4844:	4b0c      	ldr	r3, [pc, #48]	; (4878 <adc_async_channel_conversion_done+0x58>)
    4846:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    4848:	4630      	mov	r0, r6
    484a:	4b0c      	ldr	r3, [pc, #48]	; (487c <adc_async_channel_conversion_done+0x5c>)
    484c:	4798      	blx	r3
    484e:	2801      	cmp	r0, #1
    4850:	d907      	bls.n	4862 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4852:	ea4f 2119 	mov.w	r1, r9, lsr #8
    4856:	4650      	mov	r0, sl
    4858:	4b07      	ldr	r3, [pc, #28]	; (4878 <adc_async_channel_conversion_done+0x58>)
    485a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    485c:	8aab      	ldrh	r3, [r5, #20]
    485e:	3301      	adds	r3, #1
    4860:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4862:	8aab      	ldrh	r3, [r5, #20]
    4864:	3301      	adds	r3, #1
    4866:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4868:	f858 3004 	ldr.w	r3, [r8, r4]
    486c:	b113      	cbz	r3, 4874 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    486e:	4639      	mov	r1, r7
    4870:	4630      	mov	r0, r6
    4872:	4798      	blx	r3
    4874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4878:	000060d5 	.word	0x000060d5
    487c:	00006473 	.word	0x00006473

00004880 <adc_async_init>:
{
    4880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4884:	4689      	mov	r9, r1
    4886:	4616      	mov	r6, r2
    4888:	461c      	mov	r4, r3
    488a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    488e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4890:	4607      	mov	r7, r0
    4892:	b140      	cbz	r0, 48a6 <adc_async_init+0x26>
    4894:	b149      	cbz	r1, 48aa <adc_async_init+0x2a>
    4896:	b152      	cbz	r2, 48ae <adc_async_init+0x2e>
    4898:	f1b8 0f00 	cmp.w	r8, #0
    489c:	d009      	beq.n	48b2 <adc_async_init+0x32>
    489e:	1c28      	adds	r0, r5, #0
    48a0:	bf18      	it	ne
    48a2:	2001      	movne	r0, #1
    48a4:	e006      	b.n	48b4 <adc_async_init+0x34>
    48a6:	2000      	movs	r0, #0
    48a8:	e004      	b.n	48b4 <adc_async_init+0x34>
    48aa:	2000      	movs	r0, #0
    48ac:	e002      	b.n	48b4 <adc_async_init+0x34>
    48ae:	2000      	movs	r0, #0
    48b0:	e000      	b.n	48b4 <adc_async_init+0x34>
    48b2:	2000      	movs	r0, #0
    48b4:	f8df b064 	ldr.w	fp, [pc, #100]	; 491c <adc_async_init+0x9c>
    48b8:	223f      	movs	r2, #63	; 0x3f
    48ba:	4659      	mov	r1, fp
    48bc:	f8df a060 	ldr.w	sl, [pc, #96]	; 4920 <adc_async_init+0xa0>
    48c0:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    48c2:	1c60      	adds	r0, r4, #1
    48c4:	2240      	movs	r2, #64	; 0x40
    48c6:	4659      	mov	r1, fp
    48c8:	4580      	cmp	r8, r0
    48ca:	bfcc      	ite	gt
    48cc:	2000      	movgt	r0, #0
    48ce:	2001      	movle	r0, #1
    48d0:	47d0      	blx	sl
	device = &descr->device;
    48d2:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    48d4:	21ff      	movs	r1, #255	; 0xff
    48d6:	b2da      	uxtb	r2, r3
    48d8:	54b1      	strb	r1, [r6, r2]
    48da:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    48dc:	b2da      	uxtb	r2, r3
    48de:	42a2      	cmp	r2, r4
    48e0:	d9f9      	bls.n	48d6 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    48e2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    48e4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    48e8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    48ec:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    48ee:	4649      	mov	r1, r9
    48f0:	4638      	mov	r0, r7
    48f2:	4b06      	ldr	r3, [pc, #24]	; (490c <adc_async_init+0x8c>)
    48f4:	4798      	blx	r3
	if (init_status) {
    48f6:	4603      	mov	r3, r0
    48f8:	b928      	cbnz	r0, 4906 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    48fa:	4a05      	ldr	r2, [pc, #20]	; (4910 <adc_async_init+0x90>)
    48fc:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    48fe:	4a05      	ldr	r2, [pc, #20]	; (4914 <adc_async_init+0x94>)
    4900:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    4902:	4a05      	ldr	r2, [pc, #20]	; (4918 <adc_async_init+0x98>)
    4904:	607a      	str	r2, [r7, #4]
}
    4906:	4618      	mov	r0, r3
    4908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    490c:	00006341 	.word	0x00006341
    4910:	00004821 	.word	0x00004821
    4914:	0000480d 	.word	0x0000480d
    4918:	00004817 	.word	0x00004817
    491c:	0000dd44 	.word	0x0000dd44
    4920:	00005f99 	.word	0x00005f99

00004924 <adc_async_register_channel_buffer>:
{
    4924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4928:	460e      	mov	r6, r1
    492a:	4617      	mov	r7, r2
    492c:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    492e:	4605      	mov	r5, r0
    4930:	2800      	cmp	r0, #0
    4932:	d040      	beq.n	49b6 <adc_async_register_channel_buffer+0x92>
    4934:	2a00      	cmp	r2, #0
    4936:	d040      	beq.n	49ba <adc_async_register_channel_buffer+0x96>
    4938:	1c18      	adds	r0, r3, #0
    493a:	bf18      	it	ne
    493c:	2001      	movne	r0, #1
    493e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 49d8 <adc_async_register_channel_buffer+0xb4>
    4942:	2266      	movs	r2, #102	; 0x66
    4944:	4649      	mov	r1, r9
    4946:	4c22      	ldr	r4, [pc, #136]	; (49d0 <adc_async_register_channel_buffer+0xac>)
    4948:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    494a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    494e:	2267      	movs	r2, #103	; 0x67
    4950:	4649      	mov	r1, r9
    4952:	42b0      	cmp	r0, r6
    4954:	bf34      	ite	cc
    4956:	2000      	movcc	r0, #0
    4958:	2001      	movcs	r0, #1
    495a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    495c:	6a29      	ldr	r1, [r5, #32]
    495e:	5d8b      	ldrb	r3, [r1, r6]
    4960:	2bff      	cmp	r3, #255	; 0xff
    4962:	d12c      	bne.n	49be <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4964:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4968:	2300      	movs	r3, #0
    496a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    496c:	b2da      	uxtb	r2, r3
    496e:	5c8a      	ldrb	r2, [r1, r2]
    4970:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4972:	bf1c      	itt	ne
    4974:	3401      	addne	r4, #1
    4976:	b2e4      	uxtbne	r4, r4
    4978:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    497a:	b2da      	uxtb	r2, r3
    497c:	4282      	cmp	r2, r0
    497e:	d9f5      	bls.n	496c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4980:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4984:	42a3      	cmp	r3, r4
    4986:	d31d      	bcc.n	49c4 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4988:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    498c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4990:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4992:	4448      	add	r0, r9
    4994:	4642      	mov	r2, r8
    4996:	4639      	mov	r1, r7
    4998:	3004      	adds	r0, #4
    499a:	4b0e      	ldr	r3, [pc, #56]	; (49d4 <adc_async_register_channel_buffer+0xb0>)
    499c:	4798      	blx	r3
    499e:	4602      	mov	r2, r0
    49a0:	b998      	cbnz	r0, 49ca <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    49a2:	6a2b      	ldr	r3, [r5, #32]
    49a4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    49a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    49a8:	4499      	add	r9, r3
    49aa:	2300      	movs	r3, #0
    49ac:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    49b0:	4610      	mov	r0, r2
    49b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    49b6:	2000      	movs	r0, #0
    49b8:	e7c1      	b.n	493e <adc_async_register_channel_buffer+0x1a>
    49ba:	2000      	movs	r0, #0
    49bc:	e7bf      	b.n	493e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    49be:	f06f 020c 	mvn.w	r2, #12
    49c2:	e7f5      	b.n	49b0 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    49c4:	f06f 021b 	mvn.w	r2, #27
    49c8:	e7f2      	b.n	49b0 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    49ca:	f06f 020c 	mvn.w	r2, #12
    49ce:	e7ef      	b.n	49b0 <adc_async_register_channel_buffer+0x8c>
    49d0:	00005f99 	.word	0x00005f99
    49d4:	00006041 	.word	0x00006041
    49d8:	0000dd44 	.word	0x0000dd44

000049dc <adc_async_enable_channel>:
{
    49dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49de:	460d      	mov	r5, r1
	ASSERT(descr);
    49e0:	4f0b      	ldr	r7, [pc, #44]	; (4a10 <adc_async_enable_channel+0x34>)
    49e2:	4604      	mov	r4, r0
    49e4:	2283      	movs	r2, #131	; 0x83
    49e6:	4639      	mov	r1, r7
    49e8:	3000      	adds	r0, #0
    49ea:	bf18      	it	ne
    49ec:	2001      	movne	r0, #1
    49ee:	4e09      	ldr	r6, [pc, #36]	; (4a14 <adc_async_enable_channel+0x38>)
    49f0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    49f2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    49f6:	2284      	movs	r2, #132	; 0x84
    49f8:	4639      	mov	r1, r7
    49fa:	42a8      	cmp	r0, r5
    49fc:	bf34      	ite	cc
    49fe:	2000      	movcc	r0, #0
    4a00:	2001      	movcs	r0, #1
    4a02:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    4a04:	4629      	mov	r1, r5
    4a06:	4620      	mov	r0, r4
    4a08:	4b03      	ldr	r3, [pc, #12]	; (4a18 <adc_async_enable_channel+0x3c>)
    4a0a:	4798      	blx	r3
}
    4a0c:	2000      	movs	r0, #0
    4a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a10:	0000dd44 	.word	0x0000dd44
    4a14:	00005f99 	.word	0x00005f99
    4a18:	0000645d 	.word	0x0000645d

00004a1c <adc_async_register_callback>:
{
    4a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a20:	460e      	mov	r6, r1
    4a22:	4614      	mov	r4, r2
    4a24:	4699      	mov	r9, r3
	ASSERT(descr);
    4a26:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4a98 <adc_async_register_callback+0x7c>
    4a2a:	4605      	mov	r5, r0
    4a2c:	229c      	movs	r2, #156	; 0x9c
    4a2e:	4641      	mov	r1, r8
    4a30:	3000      	adds	r0, #0
    4a32:	bf18      	it	ne
    4a34:	2001      	movne	r0, #1
    4a36:	4f16      	ldr	r7, [pc, #88]	; (4a90 <adc_async_register_callback+0x74>)
    4a38:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    4a3a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4a3e:	229d      	movs	r2, #157	; 0x9d
    4a40:	4641      	mov	r1, r8
    4a42:	42b0      	cmp	r0, r6
    4a44:	bf34      	ite	cc
    4a46:	2000      	movcc	r0, #0
    4a48:	2001      	movcs	r0, #1
    4a4a:	47b8      	blx	r7
	switch (type) {
    4a4c:	2c01      	cmp	r4, #1
    4a4e:	d019      	beq.n	4a84 <adc_async_register_callback+0x68>
    4a50:	b12c      	cbz	r4, 4a5e <adc_async_register_callback+0x42>
    4a52:	2c02      	cmp	r4, #2
    4a54:	d019      	beq.n	4a8a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    4a56:	f06f 000c 	mvn.w	r0, #12
}
    4a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4a5e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4a60:	5d9b      	ldrb	r3, [r3, r6]
    4a62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a68:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4a6c:	f119 0300 	adds.w	r3, r9, #0
    4a70:	bf18      	it	ne
    4a72:	2301      	movne	r3, #1
    4a74:	4622      	mov	r2, r4
    4a76:	4631      	mov	r1, r6
    4a78:	4628      	mov	r0, r5
    4a7a:	4c06      	ldr	r4, [pc, #24]	; (4a94 <adc_async_register_callback+0x78>)
    4a7c:	47a0      	blx	r4
	return ERR_NONE;
    4a7e:	2000      	movs	r0, #0
    4a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4a84:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4a88:	e7f0      	b.n	4a6c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    4a8a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    4a8e:	e7ed      	b.n	4a6c <adc_async_register_callback+0x50>
    4a90:	00005f99 	.word	0x00005f99
    4a94:	0000649b 	.word	0x0000649b
    4a98:	0000dd44 	.word	0x0000dd44

00004a9c <adc_async_read_channel>:
{
    4a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aa0:	b083      	sub	sp, #12
    4aa2:	4688      	mov	r8, r1
    4aa4:	4691      	mov	r9, r2
    4aa6:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    4aa8:	4604      	mov	r4, r0
    4aaa:	2800      	cmp	r0, #0
    4aac:	d04f      	beq.n	4b4e <adc_async_read_channel+0xb2>
    4aae:	2a00      	cmp	r2, #0
    4ab0:	d04f      	beq.n	4b52 <adc_async_read_channel+0xb6>
    4ab2:	1c18      	adds	r0, r3, #0
    4ab4:	bf18      	it	ne
    4ab6:	2001      	movne	r0, #1
    4ab8:	4f29      	ldr	r7, [pc, #164]	; (4b60 <adc_async_read_channel+0xc4>)
    4aba:	22bc      	movs	r2, #188	; 0xbc
    4abc:	4639      	mov	r1, r7
    4abe:	4e29      	ldr	r6, [pc, #164]	; (4b64 <adc_async_read_channel+0xc8>)
    4ac0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4ac2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4ac6:	22bd      	movs	r2, #189	; 0xbd
    4ac8:	4639      	mov	r1, r7
    4aca:	4540      	cmp	r0, r8
    4acc:	bf34      	ite	cc
    4ace:	2000      	movcc	r0, #0
    4ad0:	2001      	movcs	r0, #1
    4ad2:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    4ad4:	4620      	mov	r0, r4
    4ad6:	4b24      	ldr	r3, [pc, #144]	; (4b68 <adc_async_read_channel+0xcc>)
    4ad8:	4798      	blx	r3
	ASSERT(!(length % data_size));
    4ada:	fb95 f3f0 	sdiv	r3, r5, r0
    4ade:	fb03 5010 	mls	r0, r3, r0, r5
    4ae2:	22bf      	movs	r2, #191	; 0xbf
    4ae4:	4639      	mov	r1, r7
    4ae6:	fab0 f080 	clz	r0, r0
    4aea:	0940      	lsrs	r0, r0, #5
    4aec:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    4aee:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4af0:	f813 b008 	ldrb.w	fp, [r3, r8]
    4af4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4afa:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4afe:	a801      	add	r0, sp, #4
    4b00:	4b1a      	ldr	r3, [pc, #104]	; (4b6c <adc_async_read_channel+0xd0>)
    4b02:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    4b04:	f10b 0a04 	add.w	sl, fp, #4
    4b08:	4650      	mov	r0, sl
    4b0a:	4b19      	ldr	r3, [pc, #100]	; (4b70 <adc_async_read_channel+0xd4>)
    4b0c:	4798      	blx	r3
    4b0e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4b10:	a801      	add	r0, sp, #4
    4b12:	4b18      	ldr	r3, [pc, #96]	; (4b74 <adc_async_read_channel+0xd8>)
    4b14:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4b16:	f1b8 0f00 	cmp.w	r8, #0
    4b1a:	d01c      	beq.n	4b56 <adc_async_read_channel+0xba>
    4b1c:	b1ed      	cbz	r5, 4b5a <adc_async_read_channel+0xbe>
    4b1e:	3d01      	subs	r5, #1
    4b20:	b2ad      	uxth	r5, r5
    4b22:	3502      	adds	r5, #2
    4b24:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    4b26:	4f14      	ldr	r7, [pc, #80]	; (4b78 <adc_async_read_channel+0xdc>)
    4b28:	b2a6      	uxth	r6, r4
    4b2a:	1e61      	subs	r1, r4, #1
    4b2c:	4449      	add	r1, r9
    4b2e:	4650      	mov	r0, sl
    4b30:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4b32:	4544      	cmp	r4, r8
    4b34:	d002      	beq.n	4b3c <adc_async_read_channel+0xa0>
    4b36:	3401      	adds	r4, #1
    4b38:	42ac      	cmp	r4, r5
    4b3a:	d1f5      	bne.n	4b28 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4b3c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4b40:	1b9b      	subs	r3, r3, r6
    4b42:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    4b46:	4630      	mov	r0, r6
    4b48:	b003      	add	sp, #12
    4b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4b4e:	2000      	movs	r0, #0
    4b50:	e7b2      	b.n	4ab8 <adc_async_read_channel+0x1c>
    4b52:	2000      	movs	r0, #0
    4b54:	e7b0      	b.n	4ab8 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4b56:	2600      	movs	r6, #0
    4b58:	e7f0      	b.n	4b3c <adc_async_read_channel+0xa0>
    4b5a:	2600      	movs	r6, #0
    4b5c:	e7ee      	b.n	4b3c <adc_async_read_channel+0xa0>
    4b5e:	bf00      	nop
    4b60:	0000dd44 	.word	0x0000dd44
    4b64:	00005f99 	.word	0x00005f99
    4b68:	00006473 	.word	0x00006473
    4b6c:	00004ba5 	.word	0x00004ba5
    4b70:	00006115 	.word	0x00006115
    4b74:	00004bb3 	.word	0x00004bb3
    4b78:	00006091 	.word	0x00006091

00004b7c <adc_async_start_conversion>:
{
    4b7c:	b510      	push	{r4, lr}
	ASSERT(descr);
    4b7e:	4604      	mov	r4, r0
    4b80:	22d6      	movs	r2, #214	; 0xd6
    4b82:	4905      	ldr	r1, [pc, #20]	; (4b98 <adc_async_start_conversion+0x1c>)
    4b84:	3000      	adds	r0, #0
    4b86:	bf18      	it	ne
    4b88:	2001      	movne	r0, #1
    4b8a:	4b04      	ldr	r3, [pc, #16]	; (4b9c <adc_async_start_conversion+0x20>)
    4b8c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4b8e:	4620      	mov	r0, r4
    4b90:	4b03      	ldr	r3, [pc, #12]	; (4ba0 <adc_async_start_conversion+0x24>)
    4b92:	4798      	blx	r3
}
    4b94:	2000      	movs	r0, #0
    4b96:	bd10      	pop	{r4, pc}
    4b98:	0000dd44 	.word	0x0000dd44
    4b9c:	00005f99 	.word	0x00005f99
    4ba0:	00006485 	.word	0x00006485

00004ba4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4ba4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4ba8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4baa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4bac:	f3bf 8f5f 	dmb	sy
    4bb0:	4770      	bx	lr

00004bb2 <atomic_leave_critical>:
    4bb2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4bb6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4bb8:	f383 8810 	msr	PRIMASK, r3
    4bbc:	4770      	bx	lr
	...

00004bc0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4bc0:	b538      	push	{r3, r4, r5, lr}
    4bc2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4bc4:	4605      	mov	r5, r0
    4bc6:	b158      	cbz	r0, 4be0 <crc_sync_init+0x20>
    4bc8:	1c08      	adds	r0, r1, #0
    4bca:	bf18      	it	ne
    4bcc:	2001      	movne	r0, #1
    4bce:	222b      	movs	r2, #43	; 0x2b
    4bd0:	4904      	ldr	r1, [pc, #16]	; (4be4 <crc_sync_init+0x24>)
    4bd2:	4b05      	ldr	r3, [pc, #20]	; (4be8 <crc_sync_init+0x28>)
    4bd4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4bd6:	4621      	mov	r1, r4
    4bd8:	4628      	mov	r0, r5
    4bda:	4b04      	ldr	r3, [pc, #16]	; (4bec <crc_sync_init+0x2c>)
    4bdc:	4798      	blx	r3
}
    4bde:	bd38      	pop	{r3, r4, r5, pc}
    4be0:	2000      	movs	r0, #0
    4be2:	e7f4      	b.n	4bce <crc_sync_init+0xe>
    4be4:	0000dd60 	.word	0x0000dd60
    4be8:	00005f99 	.word	0x00005f99
    4bec:	00006885 	.word	0x00006885

00004bf0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4bf0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    4bf2:	4b02      	ldr	r3, [pc, #8]	; (4bfc <delay_init+0xc>)
    4bf4:	6018      	str	r0, [r3, #0]
    4bf6:	4b02      	ldr	r3, [pc, #8]	; (4c00 <delay_init+0x10>)
    4bf8:	4798      	blx	r3
    4bfa:	bd08      	pop	{r3, pc}
    4bfc:	20000648 	.word	0x20000648
    4c00:	00008285 	.word	0x00008285

00004c04 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4c04:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4c06:	4b04      	ldr	r3, [pc, #16]	; (4c18 <delay_us+0x14>)
    4c08:	681c      	ldr	r4, [r3, #0]
    4c0a:	4b04      	ldr	r3, [pc, #16]	; (4c1c <delay_us+0x18>)
    4c0c:	4798      	blx	r3
    4c0e:	4601      	mov	r1, r0
    4c10:	4620      	mov	r0, r4
    4c12:	4b03      	ldr	r3, [pc, #12]	; (4c20 <delay_us+0x1c>)
    4c14:	4798      	blx	r3
    4c16:	bd10      	pop	{r4, pc}
    4c18:	20000648 	.word	0x20000648
    4c1c:	00006549 	.word	0x00006549
    4c20:	00008299 	.word	0x00008299

00004c24 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4c24:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4c26:	4b04      	ldr	r3, [pc, #16]	; (4c38 <delay_ms+0x14>)
    4c28:	681c      	ldr	r4, [r3, #0]
    4c2a:	4b04      	ldr	r3, [pc, #16]	; (4c3c <delay_ms+0x18>)
    4c2c:	4798      	blx	r3
    4c2e:	4601      	mov	r1, r0
    4c30:	4620      	mov	r0, r4
    4c32:	4b03      	ldr	r3, [pc, #12]	; (4c40 <delay_ms+0x1c>)
    4c34:	4798      	blx	r3
    4c36:	bd10      	pop	{r4, pc}
    4c38:	20000648 	.word	0x20000648
    4c3c:	00006551 	.word	0x00006551
    4c40:	00008299 	.word	0x00008299

00004c44 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4c44:	b508      	push	{r3, lr}
	return _event_system_init();
    4c46:	4b01      	ldr	r3, [pc, #4]	; (4c4c <event_system_init+0x8>)
    4c48:	4798      	blx	r3
}
    4c4a:	bd08      	pop	{r3, pc}
    4c4c:	0000688d 	.word	0x0000688d

00004c50 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4c50:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4c52:	6943      	ldr	r3, [r0, #20]
    4c54:	b103      	cbz	r3, 4c58 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4c56:	4798      	blx	r3
    4c58:	bd08      	pop	{r3, pc}

00004c5a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4c5a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4c5c:	6983      	ldr	r3, [r0, #24]
    4c5e:	b103      	cbz	r3, 4c62 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4c60:	4798      	blx	r3
    4c62:	bd08      	pop	{r3, pc}

00004c64 <flash_init>:
{
    4c64:	b538      	push	{r3, r4, r5, lr}
    4c66:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4c68:	4604      	mov	r4, r0
    4c6a:	b190      	cbz	r0, 4c92 <flash_init+0x2e>
    4c6c:	1c08      	adds	r0, r1, #0
    4c6e:	bf18      	it	ne
    4c70:	2001      	movne	r0, #1
    4c72:	2238      	movs	r2, #56	; 0x38
    4c74:	4908      	ldr	r1, [pc, #32]	; (4c98 <flash_init+0x34>)
    4c76:	4b09      	ldr	r3, [pc, #36]	; (4c9c <flash_init+0x38>)
    4c78:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4c7a:	4629      	mov	r1, r5
    4c7c:	4620      	mov	r0, r4
    4c7e:	4b08      	ldr	r3, [pc, #32]	; (4ca0 <flash_init+0x3c>)
    4c80:	4798      	blx	r3
	if (rc) {
    4c82:	4603      	mov	r3, r0
    4c84:	b918      	cbnz	r0, 4c8e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4c86:	4a07      	ldr	r2, [pc, #28]	; (4ca4 <flash_init+0x40>)
    4c88:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4c8a:	4a07      	ldr	r2, [pc, #28]	; (4ca8 <flash_init+0x44>)
    4c8c:	6062      	str	r2, [r4, #4]
}
    4c8e:	4618      	mov	r0, r3
    4c90:	bd38      	pop	{r3, r4, r5, pc}
    4c92:	2000      	movs	r0, #0
    4c94:	e7ed      	b.n	4c72 <flash_init+0xe>
    4c96:	bf00      	nop
    4c98:	0000dd7c 	.word	0x0000dd7c
    4c9c:	00005f99 	.word	0x00005f99
    4ca0:	00006999 	.word	0x00006999
    4ca4:	00004c51 	.word	0x00004c51
    4ca8:	00004c5b 	.word	0x00004c5b

00004cac <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4cac:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4cae:	8843      	ldrh	r3, [r0, #2]
    4cb0:	f413 7f80 	tst.w	r3, #256	; 0x100
    4cb4:	d102      	bne.n	4cbc <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4cb8:	b103      	cbz	r3, 4cbc <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    4cba:	4798      	blx	r3
    4cbc:	bd08      	pop	{r3, pc}

00004cbe <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4cbe:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4cc0:	8843      	ldrh	r3, [r0, #2]
    4cc2:	f413 7f80 	tst.w	r3, #256	; 0x100
    4cc6:	d102      	bne.n	4cce <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4cc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4cca:	b103      	cbz	r3, 4cce <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    4ccc:	4798      	blx	r3
    4cce:	bd08      	pop	{r3, pc}

00004cd0 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4cd0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4cd2:	8843      	ldrh	r3, [r0, #2]
    4cd4:	f413 7f80 	tst.w	r3, #256	; 0x100
    4cd8:	d102      	bne.n	4ce0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4cda:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4cdc:	b103      	cbz	r3, 4ce0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4cde:	4798      	blx	r3
    4ce0:	bd08      	pop	{r3, pc}
	...

00004ce4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4ce4:	b510      	push	{r4, lr}
    4ce6:	b084      	sub	sp, #16
    4ce8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4cea:	8a83      	ldrh	r3, [r0, #20]
    4cec:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4cf0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    4cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4cf6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4cfa:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4cfc:	a901      	add	r1, sp, #4
    4cfe:	3828      	subs	r0, #40	; 0x28
    4d00:	4b03      	ldr	r3, [pc, #12]	; (4d10 <i2c_m_async_write+0x2c>)
    4d02:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4d04:	2800      	cmp	r0, #0
    4d06:	bf08      	it	eq
    4d08:	4620      	moveq	r0, r4
    4d0a:	b004      	add	sp, #16
    4d0c:	bd10      	pop	{r4, pc}
    4d0e:	bf00      	nop
    4d10:	000077d5 	.word	0x000077d5

00004d14 <i2c_m_async_read>:
{
    4d14:	b510      	push	{r4, lr}
    4d16:	b084      	sub	sp, #16
    4d18:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4d1a:	8a83      	ldrh	r3, [r0, #20]
    4d1c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4d20:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4d22:	f248 0301 	movw	r3, #32769	; 0x8001
    4d26:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4d2a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4d2c:	a901      	add	r1, sp, #4
    4d2e:	3828      	subs	r0, #40	; 0x28
    4d30:	4b03      	ldr	r3, [pc, #12]	; (4d40 <i2c_m_async_read+0x2c>)
    4d32:	4798      	blx	r3
}
    4d34:	2800      	cmp	r0, #0
    4d36:	bf08      	it	eq
    4d38:	4620      	moveq	r0, r4
    4d3a:	b004      	add	sp, #16
    4d3c:	bd10      	pop	{r4, pc}
    4d3e:	bf00      	nop
    4d40:	000077d5 	.word	0x000077d5

00004d44 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4d44:	b570      	push	{r4, r5, r6, lr}
    4d46:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4d48:	4604      	mov	r4, r0
    4d4a:	2289      	movs	r2, #137	; 0x89
    4d4c:	490f      	ldr	r1, [pc, #60]	; (4d8c <i2c_m_async_init+0x48>)
    4d4e:	3000      	adds	r0, #0
    4d50:	bf18      	it	ne
    4d52:	2001      	movne	r0, #1
    4d54:	4b0e      	ldr	r3, [pc, #56]	; (4d90 <i2c_m_async_init+0x4c>)
    4d56:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4d58:	4629      	mov	r1, r5
    4d5a:	4620      	mov	r0, r4
    4d5c:	4b0d      	ldr	r3, [pc, #52]	; (4d94 <i2c_m_async_init+0x50>)
    4d5e:	4798      	blx	r3
	if (init_status) {
    4d60:	4605      	mov	r5, r0
    4d62:	b108      	cbz	r0, 4d68 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4d64:	4628      	mov	r0, r5
    4d66:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4d68:	4b0b      	ldr	r3, [pc, #44]	; (4d98 <i2c_m_async_init+0x54>)
    4d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4d6c:	4b0b      	ldr	r3, [pc, #44]	; (4d9c <i2c_m_async_init+0x58>)
    4d6e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4d70:	4a0b      	ldr	r2, [pc, #44]	; (4da0 <i2c_m_async_init+0x5c>)
    4d72:	2101      	movs	r1, #1
    4d74:	4620      	mov	r0, r4
    4d76:	4e0b      	ldr	r6, [pc, #44]	; (4da4 <i2c_m_async_init+0x60>)
    4d78:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4d7a:	4a0b      	ldr	r2, [pc, #44]	; (4da8 <i2c_m_async_init+0x64>)
    4d7c:	2102      	movs	r1, #2
    4d7e:	4620      	mov	r0, r4
    4d80:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4d82:	4a0a      	ldr	r2, [pc, #40]	; (4dac <i2c_m_async_init+0x68>)
    4d84:	2100      	movs	r1, #0
    4d86:	4620      	mov	r0, r4
    4d88:	47b0      	blx	r6
	return ERR_NONE;
    4d8a:	e7eb      	b.n	4d64 <i2c_m_async_init+0x20>
    4d8c:	0000dd94 	.word	0x0000dd94
    4d90:	00005f99 	.word	0x00005f99
    4d94:	00007755 	.word	0x00007755
    4d98:	00004d15 	.word	0x00004d15
    4d9c:	00004ce5 	.word	0x00004ce5
    4da0:	00004cad 	.word	0x00004cad
    4da4:	00007905 	.word	0x00007905
    4da8:	00004cbf 	.word	0x00004cbf
    4dac:	00004cd1 	.word	0x00004cd1

00004db0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4db0:	b570      	push	{r4, r5, r6, lr}
    4db2:	460d      	mov	r5, r1
    4db4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4db6:	4604      	mov	r4, r0
    4db8:	b160      	cbz	r0, 4dd4 <io_write+0x24>
    4dba:	1c08      	adds	r0, r1, #0
    4dbc:	bf18      	it	ne
    4dbe:	2001      	movne	r0, #1
    4dc0:	2234      	movs	r2, #52	; 0x34
    4dc2:	4905      	ldr	r1, [pc, #20]	; (4dd8 <io_write+0x28>)
    4dc4:	4b05      	ldr	r3, [pc, #20]	; (4ddc <io_write+0x2c>)
    4dc6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4dc8:	6823      	ldr	r3, [r4, #0]
    4dca:	4632      	mov	r2, r6
    4dcc:	4629      	mov	r1, r5
    4dce:	4620      	mov	r0, r4
    4dd0:	4798      	blx	r3
}
    4dd2:	bd70      	pop	{r4, r5, r6, pc}
    4dd4:	2000      	movs	r0, #0
    4dd6:	e7f3      	b.n	4dc0 <io_write+0x10>
    4dd8:	0000ddb4 	.word	0x0000ddb4
    4ddc:	00005f99 	.word	0x00005f99

00004de0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	460d      	mov	r5, r1
    4de4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4de6:	4604      	mov	r4, r0
    4de8:	b160      	cbz	r0, 4e04 <io_read+0x24>
    4dea:	1c08      	adds	r0, r1, #0
    4dec:	bf18      	it	ne
    4dee:	2001      	movne	r0, #1
    4df0:	223d      	movs	r2, #61	; 0x3d
    4df2:	4905      	ldr	r1, [pc, #20]	; (4e08 <io_read+0x28>)
    4df4:	4b05      	ldr	r3, [pc, #20]	; (4e0c <io_read+0x2c>)
    4df6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4df8:	6863      	ldr	r3, [r4, #4]
    4dfa:	4632      	mov	r2, r6
    4dfc:	4629      	mov	r1, r5
    4dfe:	4620      	mov	r0, r4
    4e00:	4798      	blx	r3
}
    4e02:	bd70      	pop	{r4, r5, r6, pc}
    4e04:	2000      	movs	r0, #0
    4e06:	e7f3      	b.n	4df0 <io_read+0x10>
    4e08:	0000ddb4 	.word	0x0000ddb4
    4e0c:	00005f99 	.word	0x00005f99

00004e10 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4e10:	b538      	push	{r3, r4, r5, lr}
    4e12:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    4e14:	4605      	mov	r5, r0
    4e16:	b158      	cbz	r0, 4e30 <qspi_dma_init+0x20>
    4e18:	1c08      	adds	r0, r1, #0
    4e1a:	bf18      	it	ne
    4e1c:	2001      	movne	r0, #1
    4e1e:	2231      	movs	r2, #49	; 0x31
    4e20:	4904      	ldr	r1, [pc, #16]	; (4e34 <qspi_dma_init+0x24>)
    4e22:	4b05      	ldr	r3, [pc, #20]	; (4e38 <qspi_dma_init+0x28>)
    4e24:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    4e26:	4621      	mov	r1, r4
    4e28:	4628      	mov	r0, r5
    4e2a:	4b04      	ldr	r3, [pc, #16]	; (4e3c <qspi_dma_init+0x2c>)
    4e2c:	4798      	blx	r3
}
    4e2e:	bd38      	pop	{r3, r4, r5, pc}
    4e30:	2000      	movs	r0, #0
    4e32:	e7f4      	b.n	4e1e <qspi_dma_init+0xe>
    4e34:	0000ddc8 	.word	0x0000ddc8
    4e38:	00005f99 	.word	0x00005f99
    4e3c:	00006bb9 	.word	0x00006bb9

00004e40 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e42:	460f      	mov	r7, r1
    4e44:	4616      	mov	r6, r2
	ASSERT(io);
    4e46:	4604      	mov	r4, r0
    4e48:	f240 1227 	movw	r2, #295	; 0x127
    4e4c:	4909      	ldr	r1, [pc, #36]	; (4e74 <_spi_m_async_io_write+0x34>)
    4e4e:	3000      	adds	r0, #0
    4e50:	bf18      	it	ne
    4e52:	2001      	movne	r0, #1
    4e54:	4b08      	ldr	r3, [pc, #32]	; (4e78 <_spi_m_async_io_write+0x38>)
    4e56:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4e58:	2500      	movs	r5, #0
    4e5a:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4e5c:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4e5e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4e60:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4e62:	2310      	movs	r3, #16
    4e64:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    4e66:	2101      	movs	r1, #1
    4e68:	f1a4 0020 	sub.w	r0, r4, #32
    4e6c:	4b03      	ldr	r3, [pc, #12]	; (4e7c <_spi_m_async_io_write+0x3c>)
    4e6e:	4798      	blx	r3

	return ERR_NONE;
}
    4e70:	4628      	mov	r0, r5
    4e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e74:	0000dde4 	.word	0x0000dde4
    4e78:	00005f99 	.word	0x00005f99
    4e7c:	00007d99 	.word	0x00007d99

00004e80 <_spi_m_async_io_read>:
{
    4e80:	b570      	push	{r4, r5, r6, lr}
    4e82:	460d      	mov	r5, r1
    4e84:	4616      	mov	r6, r2
	ASSERT(io);
    4e86:	4604      	mov	r4, r0
    4e88:	f240 1205 	movw	r2, #261	; 0x105
    4e8c:	490c      	ldr	r1, [pc, #48]	; (4ec0 <_spi_m_async_io_read+0x40>)
    4e8e:	3000      	adds	r0, #0
    4e90:	bf18      	it	ne
    4e92:	2001      	movne	r0, #1
    4e94:	4b0b      	ldr	r3, [pc, #44]	; (4ec4 <_spi_m_async_io_read+0x44>)
    4e96:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4e98:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    4e9a:	2500      	movs	r5, #0
    4e9c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4e9e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4ea0:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4ea2:	2310      	movs	r3, #16
    4ea4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4ea6:	3c20      	subs	r4, #32
    4ea8:	2101      	movs	r1, #1
    4eaa:	4620      	mov	r0, r4
    4eac:	4b06      	ldr	r3, [pc, #24]	; (4ec8 <_spi_m_async_io_read+0x48>)
    4eae:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4eb0:	f240 11ff 	movw	r1, #511	; 0x1ff
    4eb4:	4620      	mov	r0, r4
    4eb6:	4b05      	ldr	r3, [pc, #20]	; (4ecc <_spi_m_async_io_read+0x4c>)
    4eb8:	4798      	blx	r3
}
    4eba:	4628      	mov	r0, r5
    4ebc:	bd70      	pop	{r4, r5, r6, pc}
    4ebe:	bf00      	nop
    4ec0:	0000dde4 	.word	0x0000dde4
    4ec4:	00005f99 	.word	0x00005f99
    4ec8:	00007dcd 	.word	0x00007dcd
    4ecc:	00007e49 	.word	0x00007e49

00004ed0 <_spi_dev_error>:
{
    4ed0:	b570      	push	{r4, r5, r6, lr}
    4ed2:	4604      	mov	r4, r0
    4ed4:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4ed6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4ed8:	2100      	movs	r1, #0
    4eda:	4b09      	ldr	r3, [pc, #36]	; (4f00 <_spi_dev_error+0x30>)
    4edc:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4ede:	2100      	movs	r1, #0
    4ee0:	4620      	mov	r0, r4
    4ee2:	4b08      	ldr	r3, [pc, #32]	; (4f04 <_spi_dev_error+0x34>)
    4ee4:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4ee6:	2100      	movs	r1, #0
    4ee8:	4620      	mov	r0, r4
    4eea:	4b07      	ldr	r3, [pc, #28]	; (4f08 <_spi_dev_error+0x38>)
    4eec:	4798      	blx	r3
	spi->stat = 0;
    4eee:	2300      	movs	r3, #0
    4ef0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4ef6:	b113      	cbz	r3, 4efe <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4ef8:	4631      	mov	r1, r6
    4efa:	4628      	mov	r0, r5
    4efc:	4798      	blx	r3
    4efe:	bd70      	pop	{r4, r5, r6, pc}
    4f00:	00007d99 	.word	0x00007d99
    4f04:	00007dcd 	.word	0x00007dcd
    4f08:	00007e0d 	.word	0x00007e0d

00004f0c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4f0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4f0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4f10:	429a      	cmp	r2, r3
    4f12:	d200      	bcs.n	4f16 <_spi_dev_complete+0xa>
    4f14:	4770      	bx	lr
{
    4f16:	b510      	push	{r4, lr}
    4f18:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4f1a:	2100      	movs	r1, #0
    4f1c:	4b04      	ldr	r3, [pc, #16]	; (4f30 <_spi_dev_complete+0x24>)
    4f1e:	4798      	blx	r3
		spi->stat = 0;
    4f20:	2300      	movs	r3, #0
    4f22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4f26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f28:	b10b      	cbz	r3, 4f2e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4f2a:	1f20      	subs	r0, r4, #4
    4f2c:	4798      	blx	r3
    4f2e:	bd10      	pop	{r4, pc}
    4f30:	00007e0d 	.word	0x00007e0d

00004f34 <_spi_dev_tx>:
{
    4f34:	b510      	push	{r4, lr}
    4f36:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4f38:	7903      	ldrb	r3, [r0, #4]
    4f3a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4f3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4f3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4f40:	f103 0101 	add.w	r1, r3, #1
    4f44:	6401      	str	r1, [r0, #64]	; 0x40
    4f46:	bf94      	ite	ls
    4f48:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4f4a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4f4e:	4b08      	ldr	r3, [pc, #32]	; (4f70 <_spi_dev_tx+0x3c>)
    4f50:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4f52:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4f56:	429a      	cmp	r2, r3
    4f58:	d000      	beq.n	4f5c <_spi_dev_tx+0x28>
    4f5a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4f5c:	2100      	movs	r1, #0
    4f5e:	4620      	mov	r0, r4
    4f60:	4b04      	ldr	r3, [pc, #16]	; (4f74 <_spi_dev_tx+0x40>)
    4f62:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4f64:	2101      	movs	r1, #1
    4f66:	4620      	mov	r0, r4
    4f68:	4b03      	ldr	r3, [pc, #12]	; (4f78 <_spi_dev_tx+0x44>)
    4f6a:	4798      	blx	r3
}
    4f6c:	e7f5      	b.n	4f5a <_spi_dev_tx+0x26>
    4f6e:	bf00      	nop
    4f70:	00007e49 	.word	0x00007e49
    4f74:	00007d99 	.word	0x00007d99
    4f78:	00007e0d 	.word	0x00007e0d

00004f7c <_spi_dev_rx>:
{
    4f7c:	b570      	push	{r4, r5, r6, lr}
    4f7e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4f80:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4f82:	b305      	cbz	r5, 4fc6 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4f84:	7903      	ldrb	r3, [r0, #4]
    4f86:	2b01      	cmp	r3, #1
    4f88:	d916      	bls.n	4fb8 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4f8a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4f8c:	1c73      	adds	r3, r6, #1
    4f8e:	6403      	str	r3, [r0, #64]	; 0x40
    4f90:	4b18      	ldr	r3, [pc, #96]	; (4ff4 <_spi_dev_rx+0x78>)
    4f92:	4798      	blx	r3
    4f94:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4f9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4f9c:	4293      	cmp	r3, r2
    4f9e:	d21d      	bcs.n	4fdc <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4fa0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4fa2:	b1b2      	cbz	r2, 4fd2 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4fa4:	7921      	ldrb	r1, [r4, #4]
    4fa6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4fa8:	bf94      	ite	ls
    4faa:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4fac:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4fb0:	4620      	mov	r0, r4
    4fb2:	4b11      	ldr	r3, [pc, #68]	; (4ff8 <_spi_dev_rx+0x7c>)
    4fb4:	4798      	blx	r3
    4fb6:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4fb8:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4fba:	1c73      	adds	r3, r6, #1
    4fbc:	6403      	str	r3, [r0, #64]	; 0x40
    4fbe:	4b0d      	ldr	r3, [pc, #52]	; (4ff4 <_spi_dev_rx+0x78>)
    4fc0:	4798      	blx	r3
    4fc2:	55a8      	strb	r0, [r5, r6]
    4fc4:	e7e8      	b.n	4f98 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4fc6:	4b0b      	ldr	r3, [pc, #44]	; (4ff4 <_spi_dev_rx+0x78>)
    4fc8:	4798      	blx	r3
		spi->xfercnt++;
    4fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4fcc:	3301      	adds	r3, #1
    4fce:	6423      	str	r3, [r4, #64]	; 0x40
    4fd0:	e7e2      	b.n	4f98 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4fd2:	88e1      	ldrh	r1, [r4, #6]
    4fd4:	4620      	mov	r0, r4
    4fd6:	4b08      	ldr	r3, [pc, #32]	; (4ff8 <_spi_dev_rx+0x7c>)
    4fd8:	4798      	blx	r3
    4fda:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4fdc:	2100      	movs	r1, #0
    4fde:	4620      	mov	r0, r4
    4fe0:	4b06      	ldr	r3, [pc, #24]	; (4ffc <_spi_dev_rx+0x80>)
    4fe2:	4798      	blx	r3
		spi->stat = 0;
    4fe4:	2300      	movs	r3, #0
    4fe6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4fec:	b10b      	cbz	r3, 4ff2 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4fee:	1f20      	subs	r0, r4, #4
    4ff0:	4798      	blx	r3
    4ff2:	bd70      	pop	{r4, r5, r6, pc}
    4ff4:	00007e79 	.word	0x00007e79
    4ff8:	00007e49 	.word	0x00007e49
    4ffc:	00007dcd 	.word	0x00007dcd

00005000 <spi_m_async_init>:
{
    5000:	b570      	push	{r4, r5, r6, lr}
    5002:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    5004:	4606      	mov	r6, r0
    5006:	b330      	cbz	r0, 5056 <spi_m_async_init+0x56>
    5008:	1c08      	adds	r0, r1, #0
    500a:	bf18      	it	ne
    500c:	2001      	movne	r0, #1
    500e:	22a5      	movs	r2, #165	; 0xa5
    5010:	4912      	ldr	r1, [pc, #72]	; (505c <spi_m_async_init+0x5c>)
    5012:	4b13      	ldr	r3, [pc, #76]	; (5060 <spi_m_async_init+0x60>)
    5014:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5016:	4634      	mov	r4, r6
    5018:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    501c:	4629      	mov	r1, r5
    501e:	4620      	mov	r0, r4
    5020:	4b10      	ldr	r3, [pc, #64]	; (5064 <spi_m_async_init+0x64>)
    5022:	4798      	blx	r3
	if (rc >= 0) {
    5024:	2800      	cmp	r0, #0
    5026:	db15      	blt.n	5054 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5028:	4a0f      	ldr	r2, [pc, #60]	; (5068 <spi_m_async_init+0x68>)
    502a:	2100      	movs	r1, #0
    502c:	4620      	mov	r0, r4
    502e:	4d0f      	ldr	r5, [pc, #60]	; (506c <spi_m_async_init+0x6c>)
    5030:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    5032:	4a0f      	ldr	r2, [pc, #60]	; (5070 <spi_m_async_init+0x70>)
    5034:	2101      	movs	r1, #1
    5036:	4620      	mov	r0, r4
    5038:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    503a:	4a0e      	ldr	r2, [pc, #56]	; (5074 <spi_m_async_init+0x74>)
    503c:	2102      	movs	r1, #2
    503e:	4620      	mov	r0, r4
    5040:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5042:	4a0d      	ldr	r2, [pc, #52]	; (5078 <spi_m_async_init+0x78>)
    5044:	2103      	movs	r1, #3
    5046:	4620      	mov	r0, r4
    5048:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    504a:	4b0c      	ldr	r3, [pc, #48]	; (507c <spi_m_async_init+0x7c>)
    504c:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    504e:	4b0c      	ldr	r3, [pc, #48]	; (5080 <spi_m_async_init+0x80>)
    5050:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    5052:	2000      	movs	r0, #0
}
    5054:	bd70      	pop	{r4, r5, r6, pc}
    5056:	2000      	movs	r0, #0
    5058:	e7d9      	b.n	500e <spi_m_async_init+0xe>
    505a:	bf00      	nop
    505c:	0000dde4 	.word	0x0000dde4
    5060:	00005f99 	.word	0x00005f99
    5064:	00007c91 	.word	0x00007c91
    5068:	00004f35 	.word	0x00004f35
    506c:	00007ea5 	.word	0x00007ea5
    5070:	00004f7d 	.word	0x00004f7d
    5074:	00004f0d 	.word	0x00004f0d
    5078:	00004ed1 	.word	0x00004ed1
    507c:	00004e81 	.word	0x00004e81
    5080:	00004e41 	.word	0x00004e41

00005084 <spi_m_async_enable>:
{
    5084:	b510      	push	{r4, lr}
	ASSERT(spi);
    5086:	4604      	mov	r4, r0
    5088:	22c1      	movs	r2, #193	; 0xc1
    508a:	4905      	ldr	r1, [pc, #20]	; (50a0 <spi_m_async_enable+0x1c>)
    508c:	3000      	adds	r0, #0
    508e:	bf18      	it	ne
    5090:	2001      	movne	r0, #1
    5092:	4b04      	ldr	r3, [pc, #16]	; (50a4 <spi_m_async_enable+0x20>)
    5094:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    5096:	1d20      	adds	r0, r4, #4
    5098:	4b03      	ldr	r3, [pc, #12]	; (50a8 <spi_m_async_enable+0x24>)
    509a:	4798      	blx	r3
    509c:	bd10      	pop	{r4, pc}
    509e:	bf00      	nop
    50a0:	0000dde4 	.word	0x0000dde4
    50a4:	00005f99 	.word	0x00005f99
    50a8:	00007cf9 	.word	0x00007cf9

000050ac <spi_m_async_set_baudrate>:
{
    50ac:	b538      	push	{r3, r4, r5, lr}
    50ae:	460d      	mov	r5, r1
	ASSERT(spi);
    50b0:	4604      	mov	r4, r0
    50b2:	22cf      	movs	r2, #207	; 0xcf
    50b4:	4909      	ldr	r1, [pc, #36]	; (50dc <spi_m_async_set_baudrate+0x30>)
    50b6:	3000      	adds	r0, #0
    50b8:	bf18      	it	ne
    50ba:	2001      	movne	r0, #1
    50bc:	4b08      	ldr	r3, [pc, #32]	; (50e0 <spi_m_async_set_baudrate+0x34>)
    50be:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    50c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    50c4:	f013 0f10 	tst.w	r3, #16
    50c8:	d104      	bne.n	50d4 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    50ca:	4629      	mov	r1, r5
    50cc:	1d20      	adds	r0, r4, #4
    50ce:	4b05      	ldr	r3, [pc, #20]	; (50e4 <spi_m_async_set_baudrate+0x38>)
    50d0:	4798      	blx	r3
    50d2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    50d4:	f06f 0003 	mvn.w	r0, #3
}
    50d8:	bd38      	pop	{r3, r4, r5, pc}
    50da:	bf00      	nop
    50dc:	0000dde4 	.word	0x0000dde4
    50e0:	00005f99 	.word	0x00005f99
    50e4:	00007d5d 	.word	0x00007d5d

000050e8 <spi_m_async_set_mode>:
{
    50e8:	b538      	push	{r3, r4, r5, lr}
    50ea:	460d      	mov	r5, r1
	ASSERT(spi);
    50ec:	4604      	mov	r4, r0
    50ee:	22d9      	movs	r2, #217	; 0xd9
    50f0:	4909      	ldr	r1, [pc, #36]	; (5118 <spi_m_async_set_mode+0x30>)
    50f2:	3000      	adds	r0, #0
    50f4:	bf18      	it	ne
    50f6:	2001      	movne	r0, #1
    50f8:	4b08      	ldr	r3, [pc, #32]	; (511c <spi_m_async_set_mode+0x34>)
    50fa:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    50fc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    5100:	f013 0f10 	tst.w	r3, #16
    5104:	d104      	bne.n	5110 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    5106:	4629      	mov	r1, r5
    5108:	1d20      	adds	r0, r4, #4
    510a:	4b05      	ldr	r3, [pc, #20]	; (5120 <spi_m_async_set_mode+0x38>)
    510c:	4798      	blx	r3
    510e:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    5110:	f06f 0003 	mvn.w	r0, #3
}
    5114:	bd38      	pop	{r3, r4, r5, pc}
    5116:	bf00      	nop
    5118:	0000dde4 	.word	0x0000dde4
    511c:	00005f99 	.word	0x00005f99
    5120:	00007d29 	.word	0x00007d29

00005124 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    5124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5126:	460d      	mov	r5, r1
    5128:	4617      	mov	r7, r2
    512a:	461e      	mov	r6, r3
	ASSERT(spi);
    512c:	4604      	mov	r4, r0
    512e:	f44f 729c 	mov.w	r2, #312	; 0x138
    5132:	4912      	ldr	r1, [pc, #72]	; (517c <spi_m_async_transfer+0x58>)
    5134:	3000      	adds	r0, #0
    5136:	bf18      	it	ne
    5138:	2001      	movne	r0, #1
    513a:	4b11      	ldr	r3, [pc, #68]	; (5180 <spi_m_async_transfer+0x5c>)
    513c:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    513e:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    5140:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    5142:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    5144:	2300      	movs	r3, #0
    5146:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5148:	2310      	movs	r3, #16
    514a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    514e:	1d26      	adds	r6, r4, #4
    5150:	2101      	movs	r1, #1
    5152:	4630      	mov	r0, r6
    5154:	4b0b      	ldr	r3, [pc, #44]	; (5184 <spi_m_async_transfer+0x60>)
    5156:	4798      	blx	r3
	if (txbuf) {
    5158:	b15d      	cbz	r5, 5172 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    515a:	7a23      	ldrb	r3, [r4, #8]
    515c:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    515e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5160:	bf94      	ite	ls
    5162:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    5164:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    5168:	4630      	mov	r0, r6
    516a:	4b07      	ldr	r3, [pc, #28]	; (5188 <spi_m_async_transfer+0x64>)
    516c:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    516e:	2000      	movs	r0, #0
    5170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    5172:	8961      	ldrh	r1, [r4, #10]
    5174:	4630      	mov	r0, r6
    5176:	4b04      	ldr	r3, [pc, #16]	; (5188 <spi_m_async_transfer+0x64>)
    5178:	4798      	blx	r3
    517a:	e7f8      	b.n	516e <spi_m_async_transfer+0x4a>
    517c:	0000dde4 	.word	0x0000dde4
    5180:	00005f99 	.word	0x00005f99
    5184:	00007dcd 	.word	0x00007dcd
    5188:	00007e49 	.word	0x00007e49

0000518c <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    518c:	b570      	push	{r4, r5, r6, lr}
    518e:	460c      	mov	r4, r1
    5190:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    5192:	4605      	mov	r5, r0
    5194:	b158      	cbz	r0, 51ae <spi_m_async_register_callback+0x22>
    5196:	2901      	cmp	r1, #1
    5198:	bf8c      	ite	hi
    519a:	2000      	movhi	r0, #0
    519c:	2001      	movls	r0, #1
    519e:	f240 1263 	movw	r2, #355	; 0x163
    51a2:	4908      	ldr	r1, [pc, #32]	; (51c4 <spi_m_async_register_callback+0x38>)
    51a4:	4b08      	ldr	r3, [pc, #32]	; (51c8 <spi_m_async_register_callback+0x3c>)
    51a6:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    51a8:	b91c      	cbnz	r4, 51b2 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    51aa:	632e      	str	r6, [r5, #48]	; 0x30
    51ac:	bd70      	pop	{r4, r5, r6, pc}
    51ae:	2000      	movs	r0, #0
    51b0:	e7f5      	b.n	519e <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    51b2:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    51b4:	1c32      	adds	r2, r6, #0
    51b6:	bf18      	it	ne
    51b8:	2201      	movne	r2, #1
    51ba:	2103      	movs	r1, #3
    51bc:	1d28      	adds	r0, r5, #4
    51be:	4b03      	ldr	r3, [pc, #12]	; (51cc <spi_m_async_register_callback+0x40>)
    51c0:	4798      	blx	r3
    51c2:	bd70      	pop	{r4, r5, r6, pc}
    51c4:	0000dde4 	.word	0x0000dde4
    51c8:	00005f99 	.word	0x00005f99
    51cc:	00007ed9 	.word	0x00007ed9

000051d0 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    51d0:	b538      	push	{r3, r4, r5, lr}
    51d2:	460d      	mov	r5, r1
	ASSERT(spi && io);
    51d4:	4604      	mov	r4, r0
    51d6:	b158      	cbz	r0, 51f0 <spi_m_async_get_io_descriptor+0x20>
    51d8:	1c08      	adds	r0, r1, #0
    51da:	bf18      	it	ne
    51dc:	2001      	movne	r0, #1
    51de:	f240 126f 	movw	r2, #367	; 0x16f
    51e2:	4904      	ldr	r1, [pc, #16]	; (51f4 <spi_m_async_get_io_descriptor+0x24>)
    51e4:	4b04      	ldr	r3, [pc, #16]	; (51f8 <spi_m_async_get_io_descriptor+0x28>)
    51e6:	4798      	blx	r3
	*io = &spi->io;
    51e8:	3424      	adds	r4, #36	; 0x24
    51ea:	602c      	str	r4, [r5, #0]
	return 0;
}
    51ec:	2000      	movs	r0, #0
    51ee:	bd38      	pop	{r3, r4, r5, pc}
    51f0:	2000      	movs	r0, #0
    51f2:	e7f4      	b.n	51de <spi_m_async_get_io_descriptor+0xe>
    51f4:	0000dde4 	.word	0x0000dde4
    51f8:	00005f99 	.word	0x00005f99

000051fc <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    51fc:	b570      	push	{r4, r5, r6, lr}
    51fe:	460d      	mov	r5, r1
    5200:	4616      	mov	r6, r2
	ASSERT(io);
    5202:	4604      	mov	r4, r0
    5204:	2298      	movs	r2, #152	; 0x98
    5206:	4907      	ldr	r1, [pc, #28]	; (5224 <_spi_m_dma_io_write+0x28>)
    5208:	3000      	adds	r0, #0
    520a:	bf18      	it	ne
    520c:	2001      	movne	r0, #1
    520e:	4b06      	ldr	r3, [pc, #24]	; (5228 <_spi_m_dma_io_write+0x2c>)
    5210:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    5212:	4633      	mov	r3, r6
    5214:	2200      	movs	r2, #0
    5216:	4629      	mov	r1, r5
    5218:	f1a4 001c 	sub.w	r0, r4, #28
    521c:	4c03      	ldr	r4, [pc, #12]	; (522c <_spi_m_dma_io_write+0x30>)
    521e:	47a0      	blx	r4
}
    5220:	bd70      	pop	{r4, r5, r6, pc}
    5222:	bf00      	nop
    5224:	0000de04 	.word	0x0000de04
    5228:	00005f99 	.word	0x00005f99
    522c:	0000812d 	.word	0x0000812d

00005230 <_spi_m_dma_io_read>:
{
    5230:	b570      	push	{r4, r5, r6, lr}
    5232:	460d      	mov	r5, r1
    5234:	4616      	mov	r6, r2
	ASSERT(io);
    5236:	4604      	mov	r4, r0
    5238:	2281      	movs	r2, #129	; 0x81
    523a:	4907      	ldr	r1, [pc, #28]	; (5258 <_spi_m_dma_io_read+0x28>)
    523c:	3000      	adds	r0, #0
    523e:	bf18      	it	ne
    5240:	2001      	movne	r0, #1
    5242:	4b06      	ldr	r3, [pc, #24]	; (525c <_spi_m_dma_io_read+0x2c>)
    5244:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    5246:	4633      	mov	r3, r6
    5248:	462a      	mov	r2, r5
    524a:	2100      	movs	r1, #0
    524c:	f1a4 001c 	sub.w	r0, r4, #28
    5250:	4c03      	ldr	r4, [pc, #12]	; (5260 <_spi_m_dma_io_read+0x30>)
    5252:	47a0      	blx	r4
}
    5254:	bd70      	pop	{r4, r5, r6, pc}
    5256:	bf00      	nop
    5258:	0000de04 	.word	0x0000de04
    525c:	00005f99 	.word	0x00005f99
    5260:	0000812d 	.word	0x0000812d

00005264 <spi_m_dma_init>:
{
    5264:	b538      	push	{r3, r4, r5, lr}
    5266:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    5268:	4605      	mov	r5, r0
    526a:	b1a0      	cbz	r0, 5296 <spi_m_dma_init+0x32>
    526c:	1c08      	adds	r0, r1, #0
    526e:	bf18      	it	ne
    5270:	2001      	movne	r0, #1
    5272:	223b      	movs	r2, #59	; 0x3b
    5274:	4909      	ldr	r1, [pc, #36]	; (529c <spi_m_dma_init+0x38>)
    5276:	4b0a      	ldr	r3, [pc, #40]	; (52a0 <spi_m_dma_init+0x3c>)
    5278:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    527a:	4628      	mov	r0, r5
    527c:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5280:	4621      	mov	r1, r4
    5282:	4b08      	ldr	r3, [pc, #32]	; (52a4 <spi_m_dma_init+0x40>)
    5284:	4798      	blx	r3
	if (rc) {
    5286:	4603      	mov	r3, r0
    5288:	b918      	cbnz	r0, 5292 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    528a:	4a07      	ldr	r2, [pc, #28]	; (52a8 <spi_m_dma_init+0x44>)
    528c:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    528e:	4a07      	ldr	r2, [pc, #28]	; (52ac <spi_m_dma_init+0x48>)
    5290:	622a      	str	r2, [r5, #32]
}
    5292:	4618      	mov	r0, r3
    5294:	bd38      	pop	{r3, r4, r5, pc}
    5296:	2000      	movs	r0, #0
    5298:	e7eb      	b.n	5272 <spi_m_dma_init+0xe>
    529a:	bf00      	nop
    529c:	0000de04 	.word	0x0000de04
    52a0:	00005f99 	.word	0x00005f99
    52a4:	00007f11 	.word	0x00007f11
    52a8:	00005231 	.word	0x00005231
    52ac:	000051fd 	.word	0x000051fd

000052b0 <spi_m_dma_enable>:
{
    52b0:	b510      	push	{r4, lr}
	ASSERT(spi);
    52b2:	4604      	mov	r4, r0
    52b4:	2251      	movs	r2, #81	; 0x51
    52b6:	4905      	ldr	r1, [pc, #20]	; (52cc <spi_m_dma_enable+0x1c>)
    52b8:	3000      	adds	r0, #0
    52ba:	bf18      	it	ne
    52bc:	2001      	movne	r0, #1
    52be:	4b04      	ldr	r3, [pc, #16]	; (52d0 <spi_m_dma_enable+0x20>)
    52c0:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    52c2:	1d20      	adds	r0, r4, #4
    52c4:	4b03      	ldr	r3, [pc, #12]	; (52d4 <spi_m_dma_enable+0x24>)
    52c6:	4798      	blx	r3
    52c8:	bd10      	pop	{r4, pc}
    52ca:	bf00      	nop
    52cc:	0000de04 	.word	0x0000de04
    52d0:	00005f99 	.word	0x00005f99
    52d4:	0000808d 	.word	0x0000808d

000052d8 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    52d8:	b570      	push	{r4, r5, r6, lr}
    52da:	460d      	mov	r5, r1
    52dc:	4616      	mov	r6, r2
	ASSERT(spi);
    52de:	4604      	mov	r4, r0
    52e0:	22a8      	movs	r2, #168	; 0xa8
    52e2:	4906      	ldr	r1, [pc, #24]	; (52fc <spi_m_dma_register_callback+0x24>)
    52e4:	3000      	adds	r0, #0
    52e6:	bf18      	it	ne
    52e8:	2001      	movne	r0, #1
    52ea:	4b05      	ldr	r3, [pc, #20]	; (5300 <spi_m_dma_register_callback+0x28>)
    52ec:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    52ee:	4632      	mov	r2, r6
    52f0:	4629      	mov	r1, r5
    52f2:	1d20      	adds	r0, r4, #4
    52f4:	4b03      	ldr	r3, [pc, #12]	; (5304 <spi_m_dma_register_callback+0x2c>)
    52f6:	4798      	blx	r3
    52f8:	bd70      	pop	{r4, r5, r6, pc}
    52fa:	bf00      	nop
    52fc:	0000de04 	.word	0x0000de04
    5300:	00005f99 	.word	0x00005f99
    5304:	000080bd 	.word	0x000080bd

00005308 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    5308:	b538      	push	{r3, r4, r5, lr}
    530a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    530c:	4604      	mov	r4, r0
    530e:	b150      	cbz	r0, 5326 <spi_m_dma_get_io_descriptor+0x1e>
    5310:	1c08      	adds	r0, r1, #0
    5312:	bf18      	it	ne
    5314:	2001      	movne	r0, #1
    5316:	22ae      	movs	r2, #174	; 0xae
    5318:	4904      	ldr	r1, [pc, #16]	; (532c <spi_m_dma_get_io_descriptor+0x24>)
    531a:	4b05      	ldr	r3, [pc, #20]	; (5330 <spi_m_dma_get_io_descriptor+0x28>)
    531c:	4798      	blx	r3
	*io = &spi->io;
    531e:	3420      	adds	r4, #32
    5320:	602c      	str	r4, [r5, #0]

	return 0;
}
    5322:	2000      	movs	r0, #0
    5324:	bd38      	pop	{r3, r4, r5, pc}
    5326:	2000      	movs	r0, #0
    5328:	e7f5      	b.n	5316 <spi_m_dma_get_io_descriptor+0xe>
    532a:	bf00      	nop
    532c:	0000de04 	.word	0x0000de04
    5330:	00005f99 	.word	0x00005f99

00005334 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5336:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    5338:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    533a:	b12f      	cbz	r7, 5348 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    533c:	688d      	ldr	r5, [r1, #8]
    533e:	463c      	mov	r4, r7
    5340:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5342:	f1c2 0e01 	rsb	lr, r2, #1
    5346:	e00b      	b.n	5360 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    5348:	4b0e      	ldr	r3, [pc, #56]	; (5384 <timer_add_timer_task+0x50>)
    534a:	4798      	blx	r3
		return;
    534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    534e:	4473      	add	r3, lr
    5350:	68a0      	ldr	r0, [r4, #8]
    5352:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    5354:	42ab      	cmp	r3, r5
    5356:	d20a      	bcs.n	536e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    5358:	6823      	ldr	r3, [r4, #0]
    535a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    535c:	b153      	cbz	r3, 5374 <timer_add_timer_task+0x40>
    535e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5360:	6863      	ldr	r3, [r4, #4]
    5362:	4293      	cmp	r3, r2
    5364:	d8f3      	bhi.n	534e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    5366:	68a0      	ldr	r0, [r4, #8]
    5368:	4403      	add	r3, r0
    536a:	1a9b      	subs	r3, r3, r2
    536c:	e7f2      	b.n	5354 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    536e:	42a7      	cmp	r7, r4
    5370:	d004      	beq.n	537c <timer_add_timer_task+0x48>
    5372:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    5374:	4620      	mov	r0, r4
    5376:	4b04      	ldr	r3, [pc, #16]	; (5388 <timer_add_timer_task+0x54>)
    5378:	4798      	blx	r3
    537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    537c:	4660      	mov	r0, ip
    537e:	4b01      	ldr	r3, [pc, #4]	; (5384 <timer_add_timer_task+0x50>)
    5380:	4798      	blx	r3
    5382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5384:	00005fc1 	.word	0x00005fc1
    5388:	00005fed 	.word	0x00005fed

0000538c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    5390:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    5392:	6907      	ldr	r7, [r0, #16]
    5394:	3701      	adds	r7, #1
    5396:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5398:	7e03      	ldrb	r3, [r0, #24]
    539a:	f013 0f01 	tst.w	r3, #1
    539e:	d113      	bne.n	53c8 <timer_process_counted+0x3c>
    53a0:	7e03      	ldrb	r3, [r0, #24]
    53a2:	f013 0f02 	tst.w	r3, #2
    53a6:	d10f      	bne.n	53c8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    53a8:	b354      	cbz	r4, 5400 <timer_process_counted+0x74>
    53aa:	6863      	ldr	r3, [r4, #4]
    53ac:	1afb      	subs	r3, r7, r3
    53ae:	68a2      	ldr	r2, [r4, #8]
    53b0:	4293      	cmp	r3, r2
    53b2:	d307      	bcc.n	53c4 <timer_process_counted+0x38>
    53b4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    53b6:	f100 0814 	add.w	r8, r0, #20
    53ba:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5404 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    53be:	f8df a048 	ldr.w	sl, [pc, #72]	; 5408 <timer_process_counted+0x7c>
    53c2:	e012      	b.n	53ea <timer_process_counted+0x5e>
    53c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    53c8:	7e03      	ldrb	r3, [r0, #24]
    53ca:	f043 0302 	orr.w	r3, r3, #2
    53ce:	7603      	strb	r3, [r0, #24]
		return;
    53d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53d4:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    53d6:	68e3      	ldr	r3, [r4, #12]
    53d8:	4620      	mov	r0, r4
    53da:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    53dc:	b185      	cbz	r5, 5400 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    53de:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    53e0:	686b      	ldr	r3, [r5, #4]
    53e2:	1afb      	subs	r3, r7, r3
    53e4:	68aa      	ldr	r2, [r5, #8]
    53e6:	4293      	cmp	r3, r2
    53e8:	d30a      	bcc.n	5400 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    53ea:	4640      	mov	r0, r8
    53ec:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    53ee:	7c23      	ldrb	r3, [r4, #16]
    53f0:	2b01      	cmp	r3, #1
    53f2:	d1ef      	bne.n	53d4 <timer_process_counted+0x48>
			tmp->time_label = time;
    53f4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    53f6:	463a      	mov	r2, r7
    53f8:	4621      	mov	r1, r4
    53fa:	4640      	mov	r0, r8
    53fc:	47d0      	blx	sl
    53fe:	e7e9      	b.n	53d4 <timer_process_counted+0x48>
    5400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5404:	00006035 	.word	0x00006035
    5408:	00005335 	.word	0x00005335

0000540c <timer_init>:
{
    540c:	b570      	push	{r4, r5, r6, lr}
    540e:	460e      	mov	r6, r1
    5410:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    5412:	4604      	mov	r4, r0
    5414:	b190      	cbz	r0, 543c <timer_init+0x30>
    5416:	b199      	cbz	r1, 5440 <timer_init+0x34>
    5418:	1c10      	adds	r0, r2, #0
    541a:	bf18      	it	ne
    541c:	2001      	movne	r0, #1
    541e:	223b      	movs	r2, #59	; 0x3b
    5420:	4908      	ldr	r1, [pc, #32]	; (5444 <timer_init+0x38>)
    5422:	4b09      	ldr	r3, [pc, #36]	; (5448 <timer_init+0x3c>)
    5424:	4798      	blx	r3
	descr->func = func;
    5426:	4620      	mov	r0, r4
    5428:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    542c:	682b      	ldr	r3, [r5, #0]
    542e:	4631      	mov	r1, r6
    5430:	4798      	blx	r3
	descr->time                           = 0;
    5432:	2000      	movs	r0, #0
    5434:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5436:	4b05      	ldr	r3, [pc, #20]	; (544c <timer_init+0x40>)
    5438:	6063      	str	r3, [r4, #4]
}
    543a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    543c:	2000      	movs	r0, #0
    543e:	e7ee      	b.n	541e <timer_init+0x12>
    5440:	2000      	movs	r0, #0
    5442:	e7ec      	b.n	541e <timer_init+0x12>
    5444:	0000de20 	.word	0x0000de20
    5448:	00005f99 	.word	0x00005f99
    544c:	0000538d 	.word	0x0000538d

00005450 <timer_start>:
{
    5450:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    5452:	4604      	mov	r4, r0
    5454:	b198      	cbz	r0, 547e <timer_start+0x2e>
    5456:	6800      	ldr	r0, [r0, #0]
    5458:	3000      	adds	r0, #0
    545a:	bf18      	it	ne
    545c:	2001      	movne	r0, #1
    545e:	2254      	movs	r2, #84	; 0x54
    5460:	4909      	ldr	r1, [pc, #36]	; (5488 <timer_start+0x38>)
    5462:	4b0a      	ldr	r3, [pc, #40]	; (548c <timer_start+0x3c>)
    5464:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    5466:	1d25      	adds	r5, r4, #4
    5468:	6823      	ldr	r3, [r4, #0]
    546a:	699b      	ldr	r3, [r3, #24]
    546c:	4628      	mov	r0, r5
    546e:	4798      	blx	r3
    5470:	b938      	cbnz	r0, 5482 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    5472:	6823      	ldr	r3, [r4, #0]
    5474:	689b      	ldr	r3, [r3, #8]
    5476:	4628      	mov	r0, r5
    5478:	4798      	blx	r3
	return ERR_NONE;
    547a:	2000      	movs	r0, #0
    547c:	bd38      	pop	{r3, r4, r5, pc}
    547e:	2000      	movs	r0, #0
    5480:	e7ed      	b.n	545e <timer_start+0xe>
		return ERR_DENIED;
    5482:	f06f 0010 	mvn.w	r0, #16
}
    5486:	bd38      	pop	{r3, r4, r5, pc}
    5488:	0000de20 	.word	0x0000de20
    548c:	00005f99 	.word	0x00005f99

00005490 <timer_add_task>:
{
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	b082      	sub	sp, #8
    5494:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    5496:	4604      	mov	r4, r0
    5498:	b328      	cbz	r0, 54e6 <timer_add_task+0x56>
    549a:	b331      	cbz	r1, 54ea <timer_add_task+0x5a>
    549c:	6800      	ldr	r0, [r0, #0]
    549e:	3000      	adds	r0, #0
    54a0:	bf18      	it	ne
    54a2:	2001      	movne	r0, #1
    54a4:	227b      	movs	r2, #123	; 0x7b
    54a6:	4920      	ldr	r1, [pc, #128]	; (5528 <timer_add_task+0x98>)
    54a8:	4b20      	ldr	r3, [pc, #128]	; (552c <timer_add_task+0x9c>)
    54aa:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    54ac:	7f23      	ldrb	r3, [r4, #28]
    54ae:	f043 0301 	orr.w	r3, r3, #1
    54b2:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    54b4:	f104 0618 	add.w	r6, r4, #24
    54b8:	4629      	mov	r1, r5
    54ba:	4630      	mov	r0, r6
    54bc:	4b1c      	ldr	r3, [pc, #112]	; (5530 <timer_add_task+0xa0>)
    54be:	4798      	blx	r3
    54c0:	b9a8      	cbnz	r0, 54ee <timer_add_task+0x5e>
	task->time_label = descr->time;
    54c2:	6963      	ldr	r3, [r4, #20]
    54c4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    54c6:	6962      	ldr	r2, [r4, #20]
    54c8:	4629      	mov	r1, r5
    54ca:	4630      	mov	r0, r6
    54cc:	4b19      	ldr	r3, [pc, #100]	; (5534 <timer_add_task+0xa4>)
    54ce:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    54d0:	7f23      	ldrb	r3, [r4, #28]
    54d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    54d6:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    54d8:	7f23      	ldrb	r3, [r4, #28]
    54da:	f013 0f02 	tst.w	r3, #2
    54de:	d112      	bne.n	5506 <timer_add_task+0x76>
	return ERR_NONE;
    54e0:	2000      	movs	r0, #0
}
    54e2:	b002      	add	sp, #8
    54e4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    54e6:	2000      	movs	r0, #0
    54e8:	e7dc      	b.n	54a4 <timer_add_task+0x14>
    54ea:	2000      	movs	r0, #0
    54ec:	e7da      	b.n	54a4 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    54ee:	7f23      	ldrb	r3, [r4, #28]
    54f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    54f4:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    54f6:	2280      	movs	r2, #128	; 0x80
    54f8:	490b      	ldr	r1, [pc, #44]	; (5528 <timer_add_task+0x98>)
    54fa:	2000      	movs	r0, #0
    54fc:	4b0b      	ldr	r3, [pc, #44]	; (552c <timer_add_task+0x9c>)
    54fe:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5500:	f06f 0011 	mvn.w	r0, #17
    5504:	e7ed      	b.n	54e2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    5506:	a801      	add	r0, sp, #4
    5508:	4b0b      	ldr	r3, [pc, #44]	; (5538 <timer_add_task+0xa8>)
    550a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    550c:	7f23      	ldrb	r3, [r4, #28]
    550e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5512:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    5514:	6823      	ldr	r3, [r4, #0]
    5516:	69db      	ldr	r3, [r3, #28]
    5518:	1d20      	adds	r0, r4, #4
    551a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    551c:	a801      	add	r0, sp, #4
    551e:	4b07      	ldr	r3, [pc, #28]	; (553c <timer_add_task+0xac>)
    5520:	4798      	blx	r3
	return ERR_NONE;
    5522:	2000      	movs	r0, #0
    5524:	e7dd      	b.n	54e2 <timer_add_task+0x52>
    5526:	bf00      	nop
    5528:	0000de20 	.word	0x0000de20
    552c:	00005f99 	.word	0x00005f99
    5530:	00005f9f 	.word	0x00005f9f
    5534:	00005335 	.word	0x00005335
    5538:	00004ba5 	.word	0x00004ba5
    553c:	00004bb3 	.word	0x00004bb3

00005540 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    5540:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5542:	2300      	movs	r3, #0
    5544:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    5546:	69c3      	ldr	r3, [r0, #28]
    5548:	b11b      	cbz	r3, 5552 <usart_transmission_complete+0x12>
    554a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    554e:	4610      	mov	r0, r2
    5550:	4798      	blx	r3
    5552:	bd08      	pop	{r3, pc}

00005554 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    5554:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5556:	2300      	movs	r3, #0
    5558:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    555a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    555c:	b11b      	cbz	r3, 5566 <usart_error+0x12>
    555e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    5562:	4610      	mov	r0, r2
    5564:	4798      	blx	r3
    5566:	bd08      	pop	{r3, pc}

00005568 <usart_fill_rx_buffer>:
{
    5568:	b538      	push	{r3, r4, r5, lr}
    556a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    556c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    5570:	302c      	adds	r0, #44	; 0x2c
    5572:	4b03      	ldr	r3, [pc, #12]	; (5580 <usart_fill_rx_buffer+0x18>)
    5574:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    5576:	6a23      	ldr	r3, [r4, #32]
    5578:	b10b      	cbz	r3, 557e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    557a:	4628      	mov	r0, r5
    557c:	4798      	blx	r3
    557e:	bd38      	pop	{r3, r4, r5, pc}
    5580:	000060d5 	.word	0x000060d5

00005584 <usart_async_write>:
{
    5584:	b570      	push	{r4, r5, r6, lr}
    5586:	460e      	mov	r6, r1
    5588:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    558a:	4604      	mov	r4, r0
    558c:	b1e0      	cbz	r0, 55c8 <usart_async_write+0x44>
    558e:	b1e9      	cbz	r1, 55cc <usart_async_write+0x48>
    5590:	1c10      	adds	r0, r2, #0
    5592:	bf18      	it	ne
    5594:	2001      	movne	r0, #1
    5596:	f240 123b 	movw	r2, #315	; 0x13b
    559a:	490f      	ldr	r1, [pc, #60]	; (55d8 <usart_async_write+0x54>)
    559c:	4b0f      	ldr	r3, [pc, #60]	; (55dc <usart_async_write+0x58>)
    559e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    55a0:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    55a4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    55a8:	429a      	cmp	r2, r3
    55aa:	d111      	bne.n	55d0 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    55ac:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    55ae:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    55b2:	2300      	movs	r3, #0
    55b4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    55b8:	2301      	movs	r3, #1
    55ba:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    55bc:	f104 0008 	add.w	r0, r4, #8
    55c0:	4b07      	ldr	r3, [pc, #28]	; (55e0 <usart_async_write+0x5c>)
    55c2:	4798      	blx	r3
	return (int32_t)length;
    55c4:	4628      	mov	r0, r5
    55c6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    55c8:	2000      	movs	r0, #0
    55ca:	e7e4      	b.n	5596 <usart_async_write+0x12>
    55cc:	2000      	movs	r0, #0
    55ce:	e7e2      	b.n	5596 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    55d0:	f06f 001b 	mvn.w	r0, #27
}
    55d4:	bd70      	pop	{r4, r5, r6, pc}
    55d6:	bf00      	nop
    55d8:	0000de38 	.word	0x0000de38
    55dc:	00005f99 	.word	0x00005f99
    55e0:	000076d7 	.word	0x000076d7

000055e4 <usart_process_byte_sent>:
{
    55e4:	b510      	push	{r4, lr}
    55e6:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    55e8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    55ea:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    55ee:	429a      	cmp	r2, r3
    55f0:	d009      	beq.n	5606 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    55f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    55f4:	1c59      	adds	r1, r3, #1
    55f6:	8781      	strh	r1, [r0, #60]	; 0x3c
    55f8:	5cd1      	ldrb	r1, [r2, r3]
    55fa:	4b04      	ldr	r3, [pc, #16]	; (560c <usart_process_byte_sent+0x28>)
    55fc:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    55fe:	4620      	mov	r0, r4
    5600:	4b03      	ldr	r3, [pc, #12]	; (5610 <usart_process_byte_sent+0x2c>)
    5602:	4798      	blx	r3
    5604:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    5606:	4b03      	ldr	r3, [pc, #12]	; (5614 <usart_process_byte_sent+0x30>)
    5608:	4798      	blx	r3
    560a:	bd10      	pop	{r4, pc}
    560c:	000076ab 	.word	0x000076ab
    5610:	000076d7 	.word	0x000076d7
    5614:	000076df 	.word	0x000076df

00005618 <usart_async_read>:
{
    5618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    561c:	b082      	sub	sp, #8
    561e:	460f      	mov	r7, r1
    5620:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    5622:	4606      	mov	r6, r0
    5624:	b1a0      	cbz	r0, 5650 <usart_async_read+0x38>
    5626:	b199      	cbz	r1, 5650 <usart_async_read+0x38>
    5628:	2a00      	cmp	r2, #0
    562a:	d12d      	bne.n	5688 <usart_async_read+0x70>
    562c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5630:	4929      	ldr	r1, [pc, #164]	; (56d8 <usart_async_read+0xc0>)
    5632:	2000      	movs	r0, #0
    5634:	4b29      	ldr	r3, [pc, #164]	; (56dc <usart_async_read+0xc4>)
    5636:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5638:	a801      	add	r0, sp, #4
    563a:	4b29      	ldr	r3, [pc, #164]	; (56e0 <usart_async_read+0xc8>)
    563c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    563e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    5642:	4b28      	ldr	r3, [pc, #160]	; (56e4 <usart_async_read+0xcc>)
    5644:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    5646:	a801      	add	r0, sp, #4
    5648:	4b27      	ldr	r3, [pc, #156]	; (56e8 <usart_async_read+0xd0>)
    564a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    564c:	2500      	movs	r5, #0
	return (int32_t)was_read;
    564e:	e03e      	b.n	56ce <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5650:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5654:	4920      	ldr	r1, [pc, #128]	; (56d8 <usart_async_read+0xc0>)
    5656:	2000      	movs	r0, #0
    5658:	4b20      	ldr	r3, [pc, #128]	; (56dc <usart_async_read+0xc4>)
    565a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    565c:	a801      	add	r0, sp, #4
    565e:	4b20      	ldr	r3, [pc, #128]	; (56e0 <usart_async_read+0xc8>)
    5660:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5662:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5666:	4650      	mov	r0, sl
    5668:	4b1e      	ldr	r3, [pc, #120]	; (56e4 <usart_async_read+0xcc>)
    566a:	4798      	blx	r3
    566c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    566e:	a801      	add	r0, sp, #4
    5670:	4b1d      	ldr	r3, [pc, #116]	; (56e8 <usart_async_read+0xd0>)
    5672:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5674:	f1b9 0f00 	cmp.w	r9, #0
    5678:	d004      	beq.n	5684 <usart_async_read+0x6c>
    567a:	f1b8 0f00 	cmp.w	r8, #0
    567e:	d119      	bne.n	56b4 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5680:	2500      	movs	r5, #0
    5682:	e024      	b.n	56ce <usart_async_read+0xb6>
    5684:	2500      	movs	r5, #0
    5686:	e022      	b.n	56ce <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5688:	f44f 72ac 	mov.w	r2, #344	; 0x158
    568c:	4912      	ldr	r1, [pc, #72]	; (56d8 <usart_async_read+0xc0>)
    568e:	2001      	movs	r0, #1
    5690:	4b12      	ldr	r3, [pc, #72]	; (56dc <usart_async_read+0xc4>)
    5692:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5694:	a801      	add	r0, sp, #4
    5696:	4b12      	ldr	r3, [pc, #72]	; (56e0 <usart_async_read+0xc8>)
    5698:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    569a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    569e:	4650      	mov	r0, sl
    56a0:	4b10      	ldr	r3, [pc, #64]	; (56e4 <usart_async_read+0xcc>)
    56a2:	4798      	blx	r3
    56a4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    56a6:	a801      	add	r0, sp, #4
    56a8:	4b0f      	ldr	r3, [pc, #60]	; (56e8 <usart_async_read+0xd0>)
    56aa:	4798      	blx	r3
	uint16_t                       was_read = 0;
    56ac:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    56ae:	f1b9 0f00 	cmp.w	r9, #0
    56b2:	d00c      	beq.n	56ce <usart_async_read+0xb6>
{
    56b4:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    56b6:	4e0d      	ldr	r6, [pc, #52]	; (56ec <usart_async_read+0xd4>)
    56b8:	1c60      	adds	r0, r4, #1
    56ba:	b285      	uxth	r5, r0
    56bc:	1939      	adds	r1, r7, r4
    56be:	4650      	mov	r0, sl
    56c0:	47b0      	blx	r6
    56c2:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    56c4:	454c      	cmp	r4, r9
    56c6:	d202      	bcs.n	56ce <usart_async_read+0xb6>
    56c8:	b2a3      	uxth	r3, r4
    56ca:	4598      	cmp	r8, r3
    56cc:	d8f4      	bhi.n	56b8 <usart_async_read+0xa0>
}
    56ce:	4628      	mov	r0, r5
    56d0:	b002      	add	sp, #8
    56d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56d6:	bf00      	nop
    56d8:	0000de38 	.word	0x0000de38
    56dc:	00005f99 	.word	0x00005f99
    56e0:	00004ba5 	.word	0x00004ba5
    56e4:	00006115 	.word	0x00006115
    56e8:	00004bb3 	.word	0x00004bb3
    56ec:	00006091 	.word	0x00006091

000056f0 <usart_async_init>:
{
    56f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56f2:	460d      	mov	r5, r1
    56f4:	4616      	mov	r6, r2
    56f6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    56f8:	4604      	mov	r4, r0
    56fa:	b320      	cbz	r0, 5746 <usart_async_init+0x56>
    56fc:	b329      	cbz	r1, 574a <usart_async_init+0x5a>
    56fe:	b332      	cbz	r2, 574e <usart_async_init+0x5e>
    5700:	1c18      	adds	r0, r3, #0
    5702:	bf18      	it	ne
    5704:	2001      	movne	r0, #1
    5706:	223a      	movs	r2, #58	; 0x3a
    5708:	4913      	ldr	r1, [pc, #76]	; (5758 <usart_async_init+0x68>)
    570a:	4b14      	ldr	r3, [pc, #80]	; (575c <usart_async_init+0x6c>)
    570c:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    570e:	463a      	mov	r2, r7
    5710:	4631      	mov	r1, r6
    5712:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5716:	4b12      	ldr	r3, [pc, #72]	; (5760 <usart_async_init+0x70>)
    5718:	4798      	blx	r3
    571a:	b9d0      	cbnz	r0, 5752 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    571c:	4629      	mov	r1, r5
    571e:	f104 0008 	add.w	r0, r4, #8
    5722:	4b10      	ldr	r3, [pc, #64]	; (5764 <usart_async_init+0x74>)
    5724:	4798      	blx	r3
	if (init_status) {
    5726:	4603      	mov	r3, r0
    5728:	b958      	cbnz	r0, 5742 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    572a:	4a0f      	ldr	r2, [pc, #60]	; (5768 <usart_async_init+0x78>)
    572c:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    572e:	4a0f      	ldr	r2, [pc, #60]	; (576c <usart_async_init+0x7c>)
    5730:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    5732:	4a0f      	ldr	r2, [pc, #60]	; (5770 <usart_async_init+0x80>)
    5734:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    5736:	4a0f      	ldr	r2, [pc, #60]	; (5774 <usart_async_init+0x84>)
    5738:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    573a:	4a0f      	ldr	r2, [pc, #60]	; (5778 <usart_async_init+0x88>)
    573c:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    573e:	4a0f      	ldr	r2, [pc, #60]	; (577c <usart_async_init+0x8c>)
    5740:	6162      	str	r2, [r4, #20]
}
    5742:	4618      	mov	r0, r3
    5744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    5746:	2000      	movs	r0, #0
    5748:	e7dd      	b.n	5706 <usart_async_init+0x16>
    574a:	2000      	movs	r0, #0
    574c:	e7db      	b.n	5706 <usart_async_init+0x16>
    574e:	2000      	movs	r0, #0
    5750:	e7d9      	b.n	5706 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    5752:	f06f 030c 	mvn.w	r3, #12
    5756:	e7f4      	b.n	5742 <usart_async_init+0x52>
    5758:	0000de38 	.word	0x0000de38
    575c:	00005f99 	.word	0x00005f99
    5760:	00006041 	.word	0x00006041
    5764:	000075dd 	.word	0x000075dd
    5768:	00005619 	.word	0x00005619
    576c:	00005585 	.word	0x00005585
    5770:	000055e5 	.word	0x000055e5
    5774:	00005569 	.word	0x00005569
    5778:	00005541 	.word	0x00005541
    577c:	00005555 	.word	0x00005555

00005780 <usart_async_enable>:
{
    5780:	b510      	push	{r4, lr}
	ASSERT(descr);
    5782:	4604      	mov	r4, r0
    5784:	2261      	movs	r2, #97	; 0x61
    5786:	4906      	ldr	r1, [pc, #24]	; (57a0 <usart_async_enable+0x20>)
    5788:	3000      	adds	r0, #0
    578a:	bf18      	it	ne
    578c:	2001      	movne	r0, #1
    578e:	4b05      	ldr	r3, [pc, #20]	; (57a4 <usart_async_enable+0x24>)
    5790:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    5792:	f104 0008 	add.w	r0, r4, #8
    5796:	4b04      	ldr	r3, [pc, #16]	; (57a8 <usart_async_enable+0x28>)
    5798:	4798      	blx	r3
}
    579a:	2000      	movs	r0, #0
    579c:	bd10      	pop	{r4, pc}
    579e:	bf00      	nop
    57a0:	0000de38 	.word	0x0000de38
    57a4:	00005f99 	.word	0x00005f99
    57a8:	0000766d 	.word	0x0000766d

000057ac <usart_async_disable>:
{
    57ac:	b510      	push	{r4, lr}
	ASSERT(descr);
    57ae:	4604      	mov	r4, r0
    57b0:	226c      	movs	r2, #108	; 0x6c
    57b2:	4906      	ldr	r1, [pc, #24]	; (57cc <usart_async_disable+0x20>)
    57b4:	3000      	adds	r0, #0
    57b6:	bf18      	it	ne
    57b8:	2001      	movne	r0, #1
    57ba:	4b05      	ldr	r3, [pc, #20]	; (57d0 <usart_async_disable+0x24>)
    57bc:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    57be:	f104 0008 	add.w	r0, r4, #8
    57c2:	4b04      	ldr	r3, [pc, #16]	; (57d4 <usart_async_disable+0x28>)
    57c4:	4798      	blx	r3
}
    57c6:	2000      	movs	r0, #0
    57c8:	bd10      	pop	{r4, pc}
    57ca:	bf00      	nop
    57cc:	0000de38 	.word	0x0000de38
    57d0:	00005f99 	.word	0x00005f99
    57d4:	00007681 	.word	0x00007681

000057d8 <usart_async_get_io_descriptor>:
{
    57d8:	b538      	push	{r3, r4, r5, lr}
    57da:	460c      	mov	r4, r1
	ASSERT(descr && io);
    57dc:	4605      	mov	r5, r0
    57de:	b148      	cbz	r0, 57f4 <usart_async_get_io_descriptor+0x1c>
    57e0:	1c08      	adds	r0, r1, #0
    57e2:	bf18      	it	ne
    57e4:	2001      	movne	r0, #1
    57e6:	2277      	movs	r2, #119	; 0x77
    57e8:	4903      	ldr	r1, [pc, #12]	; (57f8 <usart_async_get_io_descriptor+0x20>)
    57ea:	4b04      	ldr	r3, [pc, #16]	; (57fc <usart_async_get_io_descriptor+0x24>)
    57ec:	4798      	blx	r3
	*io = &descr->io;
    57ee:	6025      	str	r5, [r4, #0]
}
    57f0:	2000      	movs	r0, #0
    57f2:	bd38      	pop	{r3, r4, r5, pc}
    57f4:	2000      	movs	r0, #0
    57f6:	e7f6      	b.n	57e6 <usart_async_get_io_descriptor+0xe>
    57f8:	0000de38 	.word	0x0000de38
    57fc:	00005f99 	.word	0x00005f99

00005800 <usart_async_register_callback>:
{
    5800:	b570      	push	{r4, r5, r6, lr}
    5802:	460c      	mov	r4, r1
    5804:	4616      	mov	r6, r2
	ASSERT(descr);
    5806:	4605      	mov	r5, r0
    5808:	2283      	movs	r2, #131	; 0x83
    580a:	4917      	ldr	r1, [pc, #92]	; (5868 <usart_async_register_callback+0x68>)
    580c:	3000      	adds	r0, #0
    580e:	bf18      	it	ne
    5810:	2001      	movne	r0, #1
    5812:	4b16      	ldr	r3, [pc, #88]	; (586c <usart_async_register_callback+0x6c>)
    5814:	4798      	blx	r3
	switch (type) {
    5816:	2c01      	cmp	r4, #1
    5818:	d010      	beq.n	583c <usart_async_register_callback+0x3c>
    581a:	b124      	cbz	r4, 5826 <usart_async_register_callback+0x26>
    581c:	2c02      	cmp	r4, #2
    581e:	d018      	beq.n	5852 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    5820:	f06f 000c 	mvn.w	r0, #12
}
    5824:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    5826:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    5828:	1c32      	adds	r2, r6, #0
    582a:	bf18      	it	ne
    582c:	2201      	movne	r2, #1
    582e:	2101      	movs	r1, #1
    5830:	f105 0008 	add.w	r0, r5, #8
    5834:	4b0e      	ldr	r3, [pc, #56]	; (5870 <usart_async_register_callback+0x70>)
    5836:	4798      	blx	r3
	return ERR_NONE;
    5838:	2000      	movs	r0, #0
		break;
    583a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    583c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    583e:	1c32      	adds	r2, r6, #0
    5840:	bf18      	it	ne
    5842:	2201      	movne	r2, #1
    5844:	2102      	movs	r1, #2
    5846:	f105 0008 	add.w	r0, r5, #8
    584a:	4b09      	ldr	r3, [pc, #36]	; (5870 <usart_async_register_callback+0x70>)
    584c:	4798      	blx	r3
	return ERR_NONE;
    584e:	2000      	movs	r0, #0
		break;
    5850:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5852:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5854:	1c32      	adds	r2, r6, #0
    5856:	bf18      	it	ne
    5858:	2201      	movne	r2, #1
    585a:	2103      	movs	r1, #3
    585c:	f105 0008 	add.w	r0, r5, #8
    5860:	4b03      	ldr	r3, [pc, #12]	; (5870 <usart_async_register_callback+0x70>)
    5862:	4798      	blx	r3
	return ERR_NONE;
    5864:	2000      	movs	r0, #0
		break;
    5866:	bd70      	pop	{r4, r5, r6, pc}
    5868:	0000de38 	.word	0x0000de38
    586c:	00005f99 	.word	0x00005f99
    5870:	000076e9 	.word	0x000076e9

00005874 <usart_async_set_parity>:
{
    5874:	b538      	push	{r3, r4, r5, lr}
    5876:	460d      	mov	r5, r1
	ASSERT(descr);
    5878:	4604      	mov	r4, r0
    587a:	22cb      	movs	r2, #203	; 0xcb
    587c:	4906      	ldr	r1, [pc, #24]	; (5898 <usart_async_set_parity+0x24>)
    587e:	3000      	adds	r0, #0
    5880:	bf18      	it	ne
    5882:	2001      	movne	r0, #1
    5884:	4b05      	ldr	r3, [pc, #20]	; (589c <usart_async_set_parity+0x28>)
    5886:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    5888:	4629      	mov	r1, r5
    588a:	f104 0008 	add.w	r0, r4, #8
    588e:	4b04      	ldr	r3, [pc, #16]	; (58a0 <usart_async_set_parity+0x2c>)
    5890:	4798      	blx	r3
}
    5892:	2000      	movs	r0, #0
    5894:	bd38      	pop	{r3, r4, r5, pc}
    5896:	bf00      	nop
    5898:	0000de38 	.word	0x0000de38
    589c:	00005f99 	.word	0x00005f99
    58a0:	00007695 	.word	0x00007695

000058a4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    58a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    58a8:	460f      	mov	r7, r1
    58aa:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    58ac:	4604      	mov	r4, r0
    58ae:	b328      	cbz	r0, 58fc <usart_sync_write+0x58>
    58b0:	b331      	cbz	r1, 5900 <usart_sync_write+0x5c>
    58b2:	1c10      	adds	r0, r2, #0
    58b4:	bf18      	it	ne
    58b6:	2001      	movne	r0, #1
    58b8:	22f1      	movs	r2, #241	; 0xf1
    58ba:	4912      	ldr	r1, [pc, #72]	; (5904 <usart_sync_write+0x60>)
    58bc:	4b12      	ldr	r3, [pc, #72]	; (5908 <usart_sync_write+0x64>)
    58be:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    58c0:	3408      	adds	r4, #8
    58c2:	4d12      	ldr	r5, [pc, #72]	; (590c <usart_sync_write+0x68>)
    58c4:	4620      	mov	r0, r4
    58c6:	47a8      	blx	r5
    58c8:	2800      	cmp	r0, #0
    58ca:	d0fb      	beq.n	58c4 <usart_sync_write+0x20>
    58cc:	3f01      	subs	r7, #1
    58ce:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    58d0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 5914 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    58d4:	4d0d      	ldr	r5, [pc, #52]	; (590c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    58d6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    58da:	4620      	mov	r0, r4
    58dc:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    58de:	4620      	mov	r0, r4
    58e0:	47a8      	blx	r5
    58e2:	2800      	cmp	r0, #0
    58e4:	d0fb      	beq.n	58de <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    58e6:	3601      	adds	r6, #1
    58e8:	4546      	cmp	r6, r8
    58ea:	d3f4      	bcc.n	58d6 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    58ec:	4d08      	ldr	r5, [pc, #32]	; (5910 <usart_sync_write+0x6c>)
    58ee:	4620      	mov	r0, r4
    58f0:	47a8      	blx	r5
    58f2:	2800      	cmp	r0, #0
    58f4:	d0fb      	beq.n	58ee <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    58f6:	4630      	mov	r0, r6
    58f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    58fc:	2000      	movs	r0, #0
    58fe:	e7db      	b.n	58b8 <usart_sync_write+0x14>
    5900:	2000      	movs	r0, #0
    5902:	e7d9      	b.n	58b8 <usart_sync_write+0x14>
    5904:	0000de58 	.word	0x0000de58
    5908:	00005f99 	.word	0x00005f99
    590c:	000076b9 	.word	0x000076b9
    5910:	000076c3 	.word	0x000076c3
    5914:	000076a5 	.word	0x000076a5

00005918 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    591c:	460f      	mov	r7, r1
    591e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5920:	4604      	mov	r4, r0
    5922:	b1e0      	cbz	r0, 595e <usart_sync_read+0x46>
    5924:	b1e9      	cbz	r1, 5962 <usart_sync_read+0x4a>
    5926:	1c10      	adds	r0, r2, #0
    5928:	bf18      	it	ne
    592a:	2001      	movne	r0, #1
    592c:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5930:	490d      	ldr	r1, [pc, #52]	; (5968 <usart_sync_read+0x50>)
    5932:	4b0e      	ldr	r3, [pc, #56]	; (596c <usart_sync_read+0x54>)
    5934:	4798      	blx	r3
    5936:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    5938:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    593a:	3408      	adds	r4, #8
    593c:	4d0c      	ldr	r5, [pc, #48]	; (5970 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    593e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5974 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    5942:	4620      	mov	r0, r4
    5944:	47a8      	blx	r5
    5946:	2800      	cmp	r0, #0
    5948:	d0fb      	beq.n	5942 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    594a:	4620      	mov	r0, r4
    594c:	47c8      	blx	r9
    594e:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    5952:	3601      	adds	r6, #1
    5954:	4546      	cmp	r6, r8
    5956:	d3f4      	bcc.n	5942 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    5958:	4630      	mov	r0, r6
    595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    595e:	2000      	movs	r0, #0
    5960:	e7e4      	b.n	592c <usart_sync_read+0x14>
    5962:	2000      	movs	r0, #0
    5964:	e7e2      	b.n	592c <usart_sync_read+0x14>
    5966:	bf00      	nop
    5968:	0000de58 	.word	0x0000de58
    596c:	00005f99 	.word	0x00005f99
    5970:	000076cd 	.word	0x000076cd
    5974:	000076b1 	.word	0x000076b1

00005978 <usart_sync_init>:
{
    5978:	b538      	push	{r3, r4, r5, lr}
    597a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    597c:	4604      	mov	r4, r0
    597e:	b198      	cbz	r0, 59a8 <usart_sync_init+0x30>
    5980:	1c08      	adds	r0, r1, #0
    5982:	bf18      	it	ne
    5984:	2001      	movne	r0, #1
    5986:	2234      	movs	r2, #52	; 0x34
    5988:	4908      	ldr	r1, [pc, #32]	; (59ac <usart_sync_init+0x34>)
    598a:	4b09      	ldr	r3, [pc, #36]	; (59b0 <usart_sync_init+0x38>)
    598c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    598e:	4629      	mov	r1, r5
    5990:	f104 0008 	add.w	r0, r4, #8
    5994:	4b07      	ldr	r3, [pc, #28]	; (59b4 <usart_sync_init+0x3c>)
    5996:	4798      	blx	r3
	if (init_status) {
    5998:	4603      	mov	r3, r0
    599a:	b918      	cbnz	r0, 59a4 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    599c:	4a06      	ldr	r2, [pc, #24]	; (59b8 <usart_sync_init+0x40>)
    599e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    59a0:	4a06      	ldr	r2, [pc, #24]	; (59bc <usart_sync_init+0x44>)
    59a2:	6022      	str	r2, [r4, #0]
}
    59a4:	4618      	mov	r0, r3
    59a6:	bd38      	pop	{r3, r4, r5, pc}
    59a8:	2000      	movs	r0, #0
    59aa:	e7ec      	b.n	5986 <usart_sync_init+0xe>
    59ac:	0000de58 	.word	0x0000de58
    59b0:	00005f99 	.word	0x00005f99
    59b4:	000075b1 	.word	0x000075b1
    59b8:	00005919 	.word	0x00005919
    59bc:	000058a5 	.word	0x000058a5

000059c0 <usart_sync_enable>:
{
    59c0:	b510      	push	{r4, lr}
	ASSERT(descr);
    59c2:	4604      	mov	r4, r0
    59c4:	2253      	movs	r2, #83	; 0x53
    59c6:	4906      	ldr	r1, [pc, #24]	; (59e0 <usart_sync_enable+0x20>)
    59c8:	3000      	adds	r0, #0
    59ca:	bf18      	it	ne
    59cc:	2001      	movne	r0, #1
    59ce:	4b05      	ldr	r3, [pc, #20]	; (59e4 <usart_sync_enable+0x24>)
    59d0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    59d2:	f104 0008 	add.w	r0, r4, #8
    59d6:	4b04      	ldr	r3, [pc, #16]	; (59e8 <usart_sync_enable+0x28>)
    59d8:	4798      	blx	r3
}
    59da:	2000      	movs	r0, #0
    59dc:	bd10      	pop	{r4, pc}
    59de:	bf00      	nop
    59e0:	0000de58 	.word	0x0000de58
    59e4:	00005f99 	.word	0x00005f99
    59e8:	00007659 	.word	0x00007659

000059ec <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    59ec:	4b0f      	ldr	r3, [pc, #60]	; (5a2c <_usb_d_find_ep+0x40>)
    59ee:	7859      	ldrb	r1, [r3, #1]
    59f0:	4288      	cmp	r0, r1
    59f2:	d018      	beq.n	5a26 <_usb_d_find_ep+0x3a>
{
    59f4:	b430      	push	{r4, r5}
    59f6:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    59f8:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    59fa:	f000 050f 	and.w	r5, r0, #15
    59fe:	e007      	b.n	5a10 <_usb_d_find_ep+0x24>
    5a00:	3301      	adds	r3, #1
    5a02:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5a04:	2b0d      	cmp	r3, #13
    5a06:	d009      	beq.n	5a1c <_usb_d_find_ep+0x30>
    5a08:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5a0a:	7851      	ldrb	r1, [r2, #1]
    5a0c:	4281      	cmp	r1, r0
    5a0e:	d007      	beq.n	5a20 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5a10:	7814      	ldrb	r4, [r2, #0]
    5a12:	2c00      	cmp	r4, #0
    5a14:	d1f4      	bne.n	5a00 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5a16:	428d      	cmp	r5, r1
    5a18:	d1f2      	bne.n	5a00 <_usb_d_find_ep+0x14>
    5a1a:	e001      	b.n	5a20 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    5a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5a20:	4618      	mov	r0, r3
    5a22:	bc30      	pop	{r4, r5}
    5a24:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5a26:	2300      	movs	r3, #0
}
    5a28:	4618      	mov	r0, r3
    5a2a:	4770      	bx	lr
    5a2c:	2000064c 	.word	0x2000064c

00005a30 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    5a30:	2000      	movs	r0, #0
    5a32:	4770      	bx	lr

00005a34 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5a34:	b538      	push	{r3, r4, r5, lr}
    5a36:	4604      	mov	r4, r0
    5a38:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a3a:	4b09      	ldr	r3, [pc, #36]	; (5a60 <usb_d_cb_trans_more+0x2c>)
    5a3c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5a3e:	4b09      	ldr	r3, [pc, #36]	; (5a64 <usb_d_cb_trans_more+0x30>)
    5a40:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5a44:	789b      	ldrb	r3, [r3, #2]
    5a46:	2b03      	cmp	r3, #3
    5a48:	d001      	beq.n	5a4e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    5a4a:	2000      	movs	r0, #0
}
    5a4c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    5a4e:	4b05      	ldr	r3, [pc, #20]	; (5a64 <usb_d_cb_trans_more+0x30>)
    5a50:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5a54:	6983      	ldr	r3, [r0, #24]
    5a56:	4629      	mov	r1, r5
    5a58:	4620      	mov	r0, r4
    5a5a:	4798      	blx	r3
    5a5c:	bd38      	pop	{r3, r4, r5, pc}
    5a5e:	bf00      	nop
    5a60:	000059ed 	.word	0x000059ed
    5a64:	2000064c 	.word	0x2000064c

00005a68 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a6a:	b085      	sub	sp, #20
    5a6c:	4606      	mov	r6, r0
    5a6e:	460d      	mov	r5, r1
    5a70:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a72:	4b4d      	ldr	r3, [pc, #308]	; (5ba8 <_usb_d_cb_trans_done+0x140>)
    5a74:	4798      	blx	r3
    5a76:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5a78:	2d00      	cmp	r5, #0
    5a7a:	d15b      	bne.n	5b34 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5a7c:	4a4b      	ldr	r2, [pc, #300]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5a7e:	0143      	lsls	r3, r0, #5
    5a80:	18d1      	adds	r1, r2, r3
    5a82:	2000      	movs	r0, #0
    5a84:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5a86:	5cd3      	ldrb	r3, [r2, r3]
    5a88:	b173      	cbz	r3, 5aa8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5a8a:	4b48      	ldr	r3, [pc, #288]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5a8c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5a90:	2201      	movs	r2, #1
    5a92:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5a94:	4845      	ldr	r0, [pc, #276]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5a96:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5a9a:	69c3      	ldr	r3, [r0, #28]
    5a9c:	463a      	mov	r2, r7
    5a9e:	78c1      	ldrb	r1, [r0, #3]
    5aa0:	4630      	mov	r0, r6
    5aa2:	4798      	blx	r3
}
    5aa4:	b005      	add	sp, #20
    5aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5aa8:	788b      	ldrb	r3, [r1, #2]
    5aaa:	2b03      	cmp	r3, #3
    5aac:	d00b      	beq.n	5ac6 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5aae:	483f      	ldr	r0, [pc, #252]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5ab0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5ab4:	4614      	mov	r4, r2
    5ab6:	69d3      	ldr	r3, [r2, #28]
    5ab8:	320c      	adds	r2, #12
    5aba:	2100      	movs	r1, #0
    5abc:	7860      	ldrb	r0, [r4, #1]
    5abe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5ac0:	2302      	movs	r3, #2
    5ac2:	70a3      	strb	r3, [r4, #2]
    5ac4:	e7ee      	b.n	5aa4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5ac6:	460b      	mov	r3, r1
    5ac8:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5acc:	460a      	mov	r2, r1
    5ace:	69ce      	ldr	r6, [r1, #28]
    5ad0:	320c      	adds	r2, #12
    5ad2:	2101      	movs	r1, #1
    5ad4:	7858      	ldrb	r0, [r3, #1]
    5ad6:	47b0      	blx	r6
		if (err) {
    5ad8:	b1a0      	cbz	r0, 5b04 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5ada:	4b34      	ldr	r3, [pc, #208]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5adc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5ae0:	2205      	movs	r2, #5
    5ae2:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5ae4:	2202      	movs	r2, #2
    5ae6:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5ae8:	2d00      	cmp	r5, #0
    5aea:	db09      	blt.n	5b00 <_usb_d_cb_trans_done+0x98>
    5aec:	482f      	ldr	r0, [pc, #188]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5aee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5af2:	7840      	ldrb	r0, [r0, #1]
    5af4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    5af8:	2101      	movs	r1, #1
    5afa:	4b2d      	ldr	r3, [pc, #180]	; (5bb0 <_usb_d_cb_trans_done+0x148>)
    5afc:	4798      	blx	r3
    5afe:	e7d1      	b.n	5aa4 <_usb_d_cb_trans_done+0x3c>
    5b00:	7858      	ldrb	r0, [r3, #1]
    5b02:	e7f9      	b.n	5af8 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5b04:	4829      	ldr	r0, [pc, #164]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b06:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5b0a:	2304      	movs	r3, #4
    5b0c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5b0e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    5b10:	2200      	movs	r2, #0
    5b12:	9201      	str	r2, [sp, #4]
    5b14:	9202      	str	r2, [sp, #8]
    5b16:	4295      	cmp	r5, r2
    5b18:	bfac      	ite	ge
    5b1a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    5b1e:	f003 030f 	andlt.w	r3, r3, #15
    5b22:	f88d 300c 	strb.w	r3, [sp, #12]
    5b26:	2301      	movs	r3, #1
    5b28:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5b2c:	a801      	add	r0, sp, #4
    5b2e:	4b21      	ldr	r3, [pc, #132]	; (5bb4 <_usb_d_cb_trans_done+0x14c>)
    5b30:	4798      	blx	r3
    5b32:	e7b7      	b.n	5aa4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    5b34:	2d01      	cmp	r5, #1
    5b36:	d00a      	beq.n	5b4e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    5b38:	2d02      	cmp	r5, #2
    5b3a:	d01c      	beq.n	5b76 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    5b3c:	2d03      	cmp	r5, #3
    5b3e:	d02a      	beq.n	5b96 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5b40:	4b1a      	ldr	r3, [pc, #104]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b42:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5b46:	2206      	movs	r2, #6
    5b48:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5b4a:	70da      	strb	r2, [r3, #3]
    5b4c:	e7a2      	b.n	5a94 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5b4e:	4a17      	ldr	r2, [pc, #92]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b50:	0143      	lsls	r3, r0, #5
    5b52:	18d1      	adds	r1, r2, r3
    5b54:	2002      	movs	r0, #2
    5b56:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5b58:	5cd3      	ldrb	r3, [r2, r3]
    5b5a:	b12b      	cbz	r3, 5b68 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5b5c:	4b13      	ldr	r3, [pc, #76]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b5e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5b62:	2205      	movs	r2, #5
    5b64:	709a      	strb	r2, [r3, #2]
    5b66:	e795      	b.n	5a94 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5b68:	460b      	mov	r3, r1
    5b6a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5b6c:	2100      	movs	r1, #0
    5b6e:	4630      	mov	r0, r6
    5b70:	4b0f      	ldr	r3, [pc, #60]	; (5bb0 <_usb_d_cb_trans_done+0x148>)
    5b72:	4798      	blx	r3
    5b74:	e78e      	b.n	5a94 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5b76:	4a0d      	ldr	r2, [pc, #52]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b78:	0143      	lsls	r3, r0, #5
    5b7a:	18d1      	adds	r1, r2, r3
    5b7c:	2004      	movs	r0, #4
    5b7e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5b80:	5cd3      	ldrb	r3, [r2, r3]
    5b82:	b12b      	cbz	r3, 5b90 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5b84:	4b09      	ldr	r3, [pc, #36]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5b8a:	2201      	movs	r2, #1
    5b8c:	709a      	strb	r2, [r3, #2]
    5b8e:	e781      	b.n	5a94 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5b90:	2302      	movs	r3, #2
    5b92:	708b      	strb	r3, [r1, #2]
			return;
    5b94:	e786      	b.n	5aa4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5b96:	4b05      	ldr	r3, [pc, #20]	; (5bac <_usb_d_cb_trans_done+0x144>)
    5b98:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5b9c:	2200      	movs	r2, #0
    5b9e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5ba0:	2205      	movs	r2, #5
    5ba2:	70da      	strb	r2, [r3, #3]
    5ba4:	e776      	b.n	5a94 <_usb_d_cb_trans_done+0x2c>
    5ba6:	bf00      	nop
    5ba8:	000059ed 	.word	0x000059ed
    5bac:	2000064c 	.word	0x2000064c
    5bb0:	00009625 	.word	0x00009625
    5bb4:	000097cd 	.word	0x000097cd

00005bb8 <usb_d_cb_trans_setup>:
{
    5bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bbc:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5bbe:	4b1c      	ldr	r3, [pc, #112]	; (5c30 <usb_d_cb_trans_setup+0x78>)
    5bc0:	4798      	blx	r3
    5bc2:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5bc4:	4c1b      	ldr	r4, [pc, #108]	; (5c34 <usb_d_cb_trans_setup+0x7c>)
    5bc6:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5bca:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5bcc:	4621      	mov	r1, r4
    5bce:	4628      	mov	r0, r5
    5bd0:	4b19      	ldr	r3, [pc, #100]	; (5c38 <usb_d_cb_trans_setup+0x80>)
    5bd2:	4798      	blx	r3
	if (n != 8) {
    5bd4:	b2c0      	uxtb	r0, r0
    5bd6:	2808      	cmp	r0, #8
    5bd8:	d009      	beq.n	5bee <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5bda:	2101      	movs	r1, #1
    5bdc:	4628      	mov	r0, r5
    5bde:	4c17      	ldr	r4, [pc, #92]	; (5c3c <usb_d_cb_trans_setup+0x84>)
    5be0:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5be2:	2101      	movs	r1, #1
    5be4:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5be8:	47a0      	blx	r4
		return;
    5bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5bee:	2100      	movs	r1, #0
    5bf0:	4628      	mov	r0, r5
    5bf2:	4f12      	ldr	r7, [pc, #72]	; (5c3c <usb_d_cb_trans_setup+0x84>)
    5bf4:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5bf6:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    5bfa:	2100      	movs	r1, #0
    5bfc:	4640      	mov	r0, r8
    5bfe:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c00:	4b0c      	ldr	r3, [pc, #48]	; (5c34 <usb_d_cb_trans_setup+0x7c>)
    5c02:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5c06:	2201      	movs	r2, #1
    5c08:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5c0a:	695b      	ldr	r3, [r3, #20]
    5c0c:	4621      	mov	r1, r4
    5c0e:	4628      	mov	r0, r5
    5c10:	4798      	blx	r3
    5c12:	b108      	cbz	r0, 5c18 <usb_d_cb_trans_setup+0x60>
    5c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5c18:	4b06      	ldr	r3, [pc, #24]	; (5c34 <usb_d_cb_trans_setup+0x7c>)
    5c1a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5c1e:	2305      	movs	r3, #5
    5c20:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5c22:	2101      	movs	r1, #1
    5c24:	4628      	mov	r0, r5
    5c26:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5c28:	2101      	movs	r1, #1
    5c2a:	4640      	mov	r0, r8
    5c2c:	47b8      	blx	r7
    5c2e:	e7f1      	b.n	5c14 <usb_d_cb_trans_setup+0x5c>
    5c30:	000059ed 	.word	0x000059ed
    5c34:	2000064c 	.word	0x2000064c
    5c38:	0000976d 	.word	0x0000976d
    5c3c:	00009625 	.word	0x00009625

00005c40 <usb_d_init>:

int32_t usb_d_init(void)
{
    5c40:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    5c42:	4b11      	ldr	r3, [pc, #68]	; (5c88 <usb_d_init+0x48>)
    5c44:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    5c46:	2800      	cmp	r0, #0
    5c48:	db1d      	blt.n	5c86 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5c4a:	4c10      	ldr	r4, [pc, #64]	; (5c8c <usb_d_init+0x4c>)
    5c4c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5c50:	2100      	movs	r1, #0
    5c52:	4620      	mov	r0, r4
    5c54:	4b0e      	ldr	r3, [pc, #56]	; (5c90 <usb_d_init+0x50>)
    5c56:	4798      	blx	r3
    5c58:	4623      	mov	r3, r4
    5c5a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5c5e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5c60:	4a0c      	ldr	r2, [pc, #48]	; (5c94 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5c62:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5c64:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5c66:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5c68:	61da      	str	r2, [r3, #28]
    5c6a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5c6c:	4283      	cmp	r3, r0
    5c6e:	d1f8      	bne.n	5c62 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5c70:	4909      	ldr	r1, [pc, #36]	; (5c98 <usb_d_init+0x58>)
    5c72:	2000      	movs	r0, #0
    5c74:	4c09      	ldr	r4, [pc, #36]	; (5c9c <usb_d_init+0x5c>)
    5c76:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5c78:	4909      	ldr	r1, [pc, #36]	; (5ca0 <usb_d_init+0x60>)
    5c7a:	2001      	movs	r0, #1
    5c7c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5c7e:	4909      	ldr	r1, [pc, #36]	; (5ca4 <usb_d_init+0x64>)
    5c80:	2002      	movs	r0, #2
    5c82:	47a0      	blx	r4
	return ERR_NONE;
    5c84:	2000      	movs	r0, #0
}
    5c86:	bd10      	pop	{r4, pc}
    5c88:	00008ff1 	.word	0x00008ff1
    5c8c:	2000064c 	.word	0x2000064c
    5c90:	0000c547 	.word	0x0000c547
    5c94:	00005a31 	.word	0x00005a31
    5c98:	00005bb9 	.word	0x00005bb9
    5c9c:	000099d5 	.word	0x000099d5
    5ca0:	00005a35 	.word	0x00005a35
    5ca4:	00005a69 	.word	0x00005a69

00005ca8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5ca8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5caa:	4b01      	ldr	r3, [pc, #4]	; (5cb0 <usb_d_register_callback+0x8>)
    5cac:	4798      	blx	r3
    5cae:	bd08      	pop	{r3, pc}
    5cb0:	000099ad 	.word	0x000099ad

00005cb4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5cb4:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5cb6:	4b01      	ldr	r3, [pc, #4]	; (5cbc <usb_d_enable+0x8>)
    5cb8:	4798      	blx	r3
}
    5cba:	bd08      	pop	{r3, pc}
    5cbc:	000090f9 	.word	0x000090f9

00005cc0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5cc0:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5cc2:	4b01      	ldr	r3, [pc, #4]	; (5cc8 <usb_d_attach+0x8>)
    5cc4:	4798      	blx	r3
    5cc6:	bd08      	pop	{r3, pc}
    5cc8:	00009165 	.word	0x00009165

00005ccc <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5ccc:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    5cce:	4b01      	ldr	r3, [pc, #4]	; (5cd4 <usb_d_get_frame_num+0x8>)
    5cd0:	4798      	blx	r3
}
    5cd2:	bd08      	pop	{r3, pc}
    5cd4:	00009183 	.word	0x00009183

00005cd8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5cd8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5cda:	4b01      	ldr	r3, [pc, #4]	; (5ce0 <usb_d_set_address+0x8>)
    5cdc:	4798      	blx	r3
    5cde:	bd08      	pop	{r3, pc}
    5ce0:	00009177 	.word	0x00009177

00005ce4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ce6:	4606      	mov	r6, r0
    5ce8:	460c      	mov	r4, r1
    5cea:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5cec:	4b0f      	ldr	r3, [pc, #60]	; (5d2c <usb_d_ep_init+0x48>)
    5cee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5cf0:	2800      	cmp	r0, #0
    5cf2:	da14      	bge.n	5d1e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5cf4:	20ff      	movs	r0, #255	; 0xff
    5cf6:	4b0d      	ldr	r3, [pc, #52]	; (5d2c <usb_d_ep_init+0x48>)
    5cf8:	4798      	blx	r3
		if (ep_index < 0) {
    5cfa:	1e05      	subs	r5, r0, #0
    5cfc:	db12      	blt.n	5d24 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5cfe:	463a      	mov	r2, r7
    5d00:	4621      	mov	r1, r4
    5d02:	4630      	mov	r0, r6
    5d04:	4b0a      	ldr	r3, [pc, #40]	; (5d30 <usb_d_ep_init+0x4c>)
    5d06:	4798      	blx	r3
	if (rc < 0) {
    5d08:	2800      	cmp	r0, #0
    5d0a:	db0d      	blt.n	5d28 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    5d0c:	4b09      	ldr	r3, [pc, #36]	; (5d34 <usb_d_ep_init+0x50>)
    5d0e:	0168      	lsls	r0, r5, #5
    5d10:	181a      	adds	r2, r3, r0
    5d12:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5d14:	f004 0403 	and.w	r4, r4, #3
    5d18:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    5d1a:	2000      	movs	r0, #0
    5d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5d1e:	f06f 0013 	mvn.w	r0, #19
    5d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    5d24:	f06f 0014 	mvn.w	r0, #20
}
    5d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d2a:	bf00      	nop
    5d2c:	000059ed 	.word	0x000059ed
    5d30:	00009191 	.word	0x00009191
    5d34:	2000064c 	.word	0x2000064c

00005d38 <usb_d_ep0_init>:
{
    5d38:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5d3a:	4602      	mov	r2, r0
    5d3c:	2100      	movs	r1, #0
    5d3e:	4608      	mov	r0, r1
    5d40:	4b01      	ldr	r3, [pc, #4]	; (5d48 <usb_d_ep0_init+0x10>)
    5d42:	4798      	blx	r3
}
    5d44:	bd08      	pop	{r3, pc}
    5d46:	bf00      	nop
    5d48:	00005ce5 	.word	0x00005ce5

00005d4c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5d4c:	b538      	push	{r3, r4, r5, lr}
    5d4e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d50:	4b06      	ldr	r3, [pc, #24]	; (5d6c <usb_d_ep_deinit+0x20>)
    5d52:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5d54:	1e04      	subs	r4, r0, #0
    5d56:	db07      	blt.n	5d68 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5d58:	4628      	mov	r0, r5
    5d5a:	4b05      	ldr	r3, [pc, #20]	; (5d70 <usb_d_ep_deinit+0x24>)
    5d5c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5d5e:	4805      	ldr	r0, [pc, #20]	; (5d74 <usb_d_ep_deinit+0x28>)
    5d60:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5d64:	23ff      	movs	r3, #255	; 0xff
    5d66:	7043      	strb	r3, [r0, #1]
    5d68:	bd38      	pop	{r3, r4, r5, pc}
    5d6a:	bf00      	nop
    5d6c:	000059ed 	.word	0x000059ed
    5d70:	000092a9 	.word	0x000092a9
    5d74:	2000064c 	.word	0x2000064c

00005d78 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5d78:	b538      	push	{r3, r4, r5, lr}
    5d7a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d7c:	4b0e      	ldr	r3, [pc, #56]	; (5db8 <usb_d_ep_enable+0x40>)
    5d7e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5d80:	1e04      	subs	r4, r0, #0
    5d82:	db16      	blt.n	5db2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5d84:	0163      	lsls	r3, r4, #5
    5d86:	4a0d      	ldr	r2, [pc, #52]	; (5dbc <usb_d_ep_enable+0x44>)
    5d88:	5cd3      	ldrb	r3, [r2, r3]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	bf0c      	ite	eq
    5d8e:	2202      	moveq	r2, #2
    5d90:	2201      	movne	r2, #1
    5d92:	4b0a      	ldr	r3, [pc, #40]	; (5dbc <usb_d_ep_enable+0x44>)
    5d94:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5d98:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5d9a:	4628      	mov	r0, r5
    5d9c:	4b08      	ldr	r3, [pc, #32]	; (5dc0 <usb_d_ep_enable+0x48>)
    5d9e:	4798      	blx	r3
	if (rc < 0) {
    5da0:	2800      	cmp	r0, #0
    5da2:	db00      	blt.n	5da6 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5da4:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5da6:	4b05      	ldr	r3, [pc, #20]	; (5dbc <usb_d_ep_enable+0x44>)
    5da8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5dac:	2300      	movs	r3, #0
    5dae:	70a3      	strb	r3, [r4, #2]
    5db0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5db2:	f06f 0011 	mvn.w	r0, #17
    5db6:	e7f5      	b.n	5da4 <usb_d_ep_enable+0x2c>
    5db8:	000059ed 	.word	0x000059ed
    5dbc:	2000064c 	.word	0x2000064c
    5dc0:	0000936d 	.word	0x0000936d

00005dc4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5dc8:	b086      	sub	sp, #24
    5dca:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5dcc:	7a07      	ldrb	r7, [r0, #8]
    5dce:	4638      	mov	r0, r7
    5dd0:	4b3f      	ldr	r3, [pc, #252]	; (5ed0 <usb_d_ep_transfer+0x10c>)
    5dd2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5dd4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5dd6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5dda:	1e06      	subs	r6, r0, #0
    5ddc:	db72      	blt.n	5ec4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5dde:	a804      	add	r0, sp, #16
    5de0:	4b3c      	ldr	r3, [pc, #240]	; (5ed4 <usb_d_ep_transfer+0x110>)
    5de2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5de4:	4b3c      	ldr	r3, [pc, #240]	; (5ed8 <usb_d_ep_transfer+0x114>)
    5de6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5dea:	789b      	ldrb	r3, [r3, #2]
    5dec:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5df0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5df4:	b2db      	uxtb	r3, r3
    5df6:	2b01      	cmp	r3, #1
    5df8:	d011      	beq.n	5e1e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    5dfa:	a804      	add	r0, sp, #16
    5dfc:	4b37      	ldr	r3, [pc, #220]	; (5edc <usb_d_ep_transfer+0x118>)
    5dfe:	4798      	blx	r3
		switch (state) {
    5e00:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5e04:	b2db      	uxtb	r3, r3
    5e06:	2b05      	cmp	r3, #5
    5e08:	d05f      	beq.n	5eca <usb_d_ep_transfer+0x106>
    5e0a:	2b06      	cmp	r3, #6
    5e0c:	d023      	beq.n	5e56 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    5e0e:	2b00      	cmp	r3, #0
    5e10:	bf0c      	ite	eq
    5e12:	f06f 0012 	mvneq.w	r0, #18
    5e16:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    5e18:	b006      	add	sp, #24
    5e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5e1e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5ed8 <usb_d_ep_transfer+0x114>
    5e22:	ea4f 1946 	mov.w	r9, r6, lsl #5
    5e26:	eb0a 0309 	add.w	r3, sl, r9
    5e2a:	2203      	movs	r2, #3
    5e2c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5e2e:	a804      	add	r0, sp, #16
    5e30:	4b2a      	ldr	r3, [pc, #168]	; (5edc <usb_d_ep_transfer+0x118>)
    5e32:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5e34:	f81a 3009 	ldrb.w	r3, [sl, r9]
    5e38:	b183      	cbz	r3, 5e5c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5e3a:	7a22      	ldrb	r2, [r4, #8]
    5e3c:	3500      	adds	r5, #0
    5e3e:	bf18      	it	ne
    5e40:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    5e42:	6823      	ldr	r3, [r4, #0]
    5e44:	9301      	str	r3, [sp, #4]
    5e46:	f8cd 8008 	str.w	r8, [sp, #8]
    5e4a:	f017 0f80 	tst.w	r7, #128	; 0x80
    5e4e:	d119      	bne.n	5e84 <usb_d_ep_transfer+0xc0>
    5e50:	f002 030f 	and.w	r3, r2, #15
    5e54:	e018      	b.n	5e88 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5e56:	f06f 000f 	mvn.w	r0, #15
    5e5a:	e7dd      	b.n	5e18 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5e5c:	4b1e      	ldr	r3, [pc, #120]	; (5ed8 <usb_d_ep_transfer+0x114>)
    5e5e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5e62:	7cda      	ldrb	r2, [r3, #19]
    5e64:	7c9d      	ldrb	r5, [r3, #18]
    5e66:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5e6a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5e6c:	b9a5      	cbnz	r5, 5e98 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5e6e:	4b1a      	ldr	r3, [pc, #104]	; (5ed8 <usb_d_ep_transfer+0x114>)
    5e70:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5e74:	2304      	movs	r3, #4
    5e76:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5e78:	2300      	movs	r3, #0
			zlp                 = true;
    5e7a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5e7c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5e7e:	6821      	ldr	r1, [r4, #0]
    5e80:	9101      	str	r1, [sp, #4]
    5e82:	9302      	str	r3, [sp, #8]
    5e84:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5e88:	f88d 300c 	strb.w	r3, [sp, #12]
    5e8c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5e90:	a801      	add	r0, sp, #4
    5e92:	4b13      	ldr	r3, [pc, #76]	; (5ee0 <usb_d_ep_transfer+0x11c>)
    5e94:	4798      	blx	r3
	return rc;
    5e96:	e7bf      	b.n	5e18 <usb_d_ep_transfer+0x54>
    5e98:	4643      	mov	r3, r8
    5e9a:	45a8      	cmp	r8, r5
    5e9c:	bf28      	it	cs
    5e9e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5ea0:	4a0d      	ldr	r2, [pc, #52]	; (5ed8 <usb_d_ep_transfer+0x114>)
    5ea2:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5ea6:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5eaa:	2a00      	cmp	r2, #0
    5eac:	db05      	blt.n	5eba <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5eae:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5eb0:	6821      	ldr	r1, [r4, #0]
    5eb2:	9101      	str	r1, [sp, #4]
    5eb4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5eb6:	2500      	movs	r5, #0
    5eb8:	e7ca      	b.n	5e50 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5eba:	429d      	cmp	r5, r3
    5ebc:	bf94      	ite	ls
    5ebe:	2500      	movls	r5, #0
    5ec0:	2501      	movhi	r5, #1
    5ec2:	e7db      	b.n	5e7c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5ec4:	f06f 0011 	mvn.w	r0, #17
    5ec8:	e7a6      	b.n	5e18 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5eca:	2002      	movs	r0, #2
    5ecc:	e7a4      	b.n	5e18 <usb_d_ep_transfer+0x54>
    5ece:	bf00      	nop
    5ed0:	000059ed 	.word	0x000059ed
    5ed4:	00004ba5 	.word	0x00004ba5
    5ed8:	2000064c 	.word	0x2000064c
    5edc:	00004bb3 	.word	0x00004bb3
    5ee0:	000097cd 	.word	0x000097cd

00005ee4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5ee4:	b538      	push	{r3, r4, r5, lr}
    5ee6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5ee8:	b141      	cbz	r1, 5efc <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5eea:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5eec:	bf0c      	ite	eq
    5eee:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5ef0:	2102      	movne	r1, #2
    5ef2:	4b13      	ldr	r3, [pc, #76]	; (5f40 <usb_d_ep_halt+0x5c>)
    5ef4:	4798      	blx	r3
    5ef6:	4603      	mov	r3, r0
	}
}
    5ef8:	4618      	mov	r0, r3
    5efa:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    5efc:	4b11      	ldr	r3, [pc, #68]	; (5f44 <usb_d_ep_halt+0x60>)
    5efe:	4798      	blx	r3
	if (ep_index < 0) {
    5f00:	1e05      	subs	r5, r0, #0
    5f02:	db19      	blt.n	5f38 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5f04:	2102      	movs	r1, #2
    5f06:	4620      	mov	r0, r4
    5f08:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <usb_d_ep_halt+0x5c>)
    5f0a:	4798      	blx	r3
    5f0c:	4603      	mov	r3, r0
    5f0e:	2800      	cmp	r0, #0
    5f10:	d0f2      	beq.n	5ef8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5f12:	2100      	movs	r1, #0
    5f14:	4620      	mov	r0, r4
    5f16:	4b0a      	ldr	r3, [pc, #40]	; (5f40 <usb_d_ep_halt+0x5c>)
    5f18:	4798      	blx	r3
		if (rc < 0) {
    5f1a:	1e03      	subs	r3, r0, #0
    5f1c:	dbec      	blt.n	5ef8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5f1e:	4b0a      	ldr	r3, [pc, #40]	; (5f48 <usb_d_ep_halt+0x64>)
    5f20:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    5f24:	2201      	movs	r2, #1
    5f26:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5f28:	2103      	movs	r1, #3
    5f2a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5f2c:	69db      	ldr	r3, [r3, #28]
    5f2e:	2200      	movs	r2, #0
    5f30:	4620      	mov	r0, r4
    5f32:	4798      	blx	r3
	return ERR_NONE;
    5f34:	2300      	movs	r3, #0
    5f36:	e7df      	b.n	5ef8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    5f38:	f06f 0311 	mvn.w	r3, #17
    5f3c:	e7dc      	b.n	5ef8 <usb_d_ep_halt+0x14>
    5f3e:	bf00      	nop
    5f40:	00009625 	.word	0x00009625
    5f44:	000059ed 	.word	0x000059ed
    5f48:	2000064c 	.word	0x2000064c

00005f4c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5f4c:	b538      	push	{r3, r4, r5, lr}
    5f4e:	460d      	mov	r5, r1
    5f50:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f52:	4b0e      	ldr	r3, [pc, #56]	; (5f8c <usb_d_ep_register_callback+0x40>)
    5f54:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5f56:	4b0e      	ldr	r3, [pc, #56]	; (5f90 <usb_d_ep_register_callback+0x44>)
    5f58:	2c00      	cmp	r4, #0
    5f5a:	bf08      	it	eq
    5f5c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5f5e:	2800      	cmp	r0, #0
    5f60:	db13      	blt.n	5f8a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5f62:	2d01      	cmp	r5, #1
    5f64:	d008      	beq.n	5f78 <usb_d_ep_register_callback+0x2c>
    5f66:	b115      	cbz	r5, 5f6e <usb_d_ep_register_callback+0x22>
    5f68:	2d02      	cmp	r5, #2
    5f6a:	d00a      	beq.n	5f82 <usb_d_ep_register_callback+0x36>
    5f6c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5f6e:	4b09      	ldr	r3, [pc, #36]	; (5f94 <usb_d_ep_register_callback+0x48>)
    5f70:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5f74:	6144      	str	r4, [r0, #20]
		break;
    5f76:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5f78:	4b06      	ldr	r3, [pc, #24]	; (5f94 <usb_d_ep_register_callback+0x48>)
    5f7a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5f7e:	6184      	str	r4, [r0, #24]
		break;
    5f80:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5f82:	4b04      	ldr	r3, [pc, #16]	; (5f94 <usb_d_ep_register_callback+0x48>)
    5f84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5f88:	61c4      	str	r4, [r0, #28]
    5f8a:	bd38      	pop	{r3, r4, r5, pc}
    5f8c:	000059ed 	.word	0x000059ed
    5f90:	00005a31 	.word	0x00005a31
    5f94:	2000064c 	.word	0x2000064c

00005f98 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5f98:	b900      	cbnz	r0, 5f9c <assert+0x4>
		__asm("BKPT #0");
    5f9a:	be00      	bkpt	0x0000
    5f9c:	4770      	bx	lr

00005f9e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5f9e:	6803      	ldr	r3, [r0, #0]
    5fa0:	b14b      	cbz	r3, 5fb6 <is_list_element+0x18>
		if (it == element) {
    5fa2:	428b      	cmp	r3, r1
    5fa4:	d009      	beq.n	5fba <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5fa6:	681b      	ldr	r3, [r3, #0]
    5fa8:	b11b      	cbz	r3, 5fb2 <is_list_element+0x14>
		if (it == element) {
    5faa:	4299      	cmp	r1, r3
    5fac:	d1fb      	bne.n	5fa6 <is_list_element+0x8>
			return true;
    5fae:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5fb0:	4770      	bx	lr
	return false;
    5fb2:	2000      	movs	r0, #0
    5fb4:	4770      	bx	lr
    5fb6:	2000      	movs	r0, #0
    5fb8:	4770      	bx	lr
			return true;
    5fba:	2001      	movs	r0, #1
    5fbc:	4770      	bx	lr
	...

00005fc0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
    5fc2:	4604      	mov	r4, r0
    5fc4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5fc6:	4b06      	ldr	r3, [pc, #24]	; (5fe0 <list_insert_as_head+0x20>)
    5fc8:	4798      	blx	r3
    5fca:	f080 0001 	eor.w	r0, r0, #1
    5fce:	2239      	movs	r2, #57	; 0x39
    5fd0:	4904      	ldr	r1, [pc, #16]	; (5fe4 <list_insert_as_head+0x24>)
    5fd2:	b2c0      	uxtb	r0, r0
    5fd4:	4b04      	ldr	r3, [pc, #16]	; (5fe8 <list_insert_as_head+0x28>)
    5fd6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5fd8:	6823      	ldr	r3, [r4, #0]
    5fda:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5fdc:	6025      	str	r5, [r4, #0]
    5fde:	bd38      	pop	{r3, r4, r5, pc}
    5fe0:	00005f9f 	.word	0x00005f9f
    5fe4:	0000de74 	.word	0x0000de74
    5fe8:	00005f99 	.word	0x00005f99

00005fec <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5fec:	6803      	ldr	r3, [r0, #0]
    5fee:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5ff0:	6001      	str	r1, [r0, #0]
    5ff2:	4770      	bx	lr

00005ff4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5ff4:	b570      	push	{r4, r5, r6, lr}
    5ff6:	4605      	mov	r5, r0
    5ff8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5ffa:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5ffc:	4b0a      	ldr	r3, [pc, #40]	; (6028 <list_insert_at_end+0x34>)
    5ffe:	4798      	blx	r3
    6000:	f080 0001 	eor.w	r0, r0, #1
    6004:	224f      	movs	r2, #79	; 0x4f
    6006:	4909      	ldr	r1, [pc, #36]	; (602c <list_insert_at_end+0x38>)
    6008:	b2c0      	uxtb	r0, r0
    600a:	4b09      	ldr	r3, [pc, #36]	; (6030 <list_insert_at_end+0x3c>)
    600c:	4798      	blx	r3

	if (!list->head) {
    600e:	682b      	ldr	r3, [r5, #0]
    6010:	b91b      	cbnz	r3, 601a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    6012:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    6014:	6033      	str	r3, [r6, #0]
		return;
    6016:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    6018:	461c      	mov	r4, r3
	while (it->next) {
    601a:	6823      	ldr	r3, [r4, #0]
    601c:	2b00      	cmp	r3, #0
    601e:	d1fb      	bne.n	6018 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    6020:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    6022:	6033      	str	r3, [r6, #0]
    6024:	bd70      	pop	{r4, r5, r6, pc}
    6026:	bf00      	nop
    6028:	00005f9f 	.word	0x00005f9f
    602c:	0000de74 	.word	0x0000de74
    6030:	00005f99 	.word	0x00005f99

00006034 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    6034:	6803      	ldr	r3, [r0, #0]
    6036:	b10b      	cbz	r3, 603c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    6038:	681a      	ldr	r2, [r3, #0]
    603a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    603c:	4618      	mov	r0, r3
    603e:	4770      	bx	lr

00006040 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    6040:	b570      	push	{r4, r5, r6, lr}
    6042:	460e      	mov	r6, r1
    6044:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    6046:	4604      	mov	r4, r0
    6048:	b178      	cbz	r0, 606a <ringbuffer_init+0x2a>
    604a:	b181      	cbz	r1, 606e <ringbuffer_init+0x2e>
    604c:	b1a2      	cbz	r2, 6078 <ringbuffer_init+0x38>
    604e:	2001      	movs	r0, #1
    6050:	2228      	movs	r2, #40	; 0x28
    6052:	490d      	ldr	r1, [pc, #52]	; (6088 <ringbuffer_init+0x48>)
    6054:	4b0d      	ldr	r3, [pc, #52]	; (608c <ringbuffer_init+0x4c>)
    6056:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    6058:	1e6b      	subs	r3, r5, #1
    605a:	421d      	tst	r5, r3
    605c:	d109      	bne.n	6072 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    605e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    6060:	2000      	movs	r0, #0
    6062:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    6064:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    6066:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    6068:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    606a:	2000      	movs	r0, #0
    606c:	e7f0      	b.n	6050 <ringbuffer_init+0x10>
    606e:	2000      	movs	r0, #0
    6070:	e7ee      	b.n	6050 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    6072:	f06f 000c 	mvn.w	r0, #12
    6076:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    6078:	2228      	movs	r2, #40	; 0x28
    607a:	4903      	ldr	r1, [pc, #12]	; (6088 <ringbuffer_init+0x48>)
    607c:	2000      	movs	r0, #0
    607e:	4b03      	ldr	r3, [pc, #12]	; (608c <ringbuffer_init+0x4c>)
    6080:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    6082:	1e6b      	subs	r3, r5, #1
    6084:	e7eb      	b.n	605e <ringbuffer_init+0x1e>
    6086:	bf00      	nop
    6088:	0000de94 	.word	0x0000de94
    608c:	00005f99 	.word	0x00005f99

00006090 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    6090:	b538      	push	{r3, r4, r5, lr}
    6092:	460d      	mov	r5, r1
	ASSERT(rb && data);
    6094:	4604      	mov	r4, r0
    6096:	b1a0      	cbz	r0, 60c2 <ringbuffer_get+0x32>
    6098:	1c08      	adds	r0, r1, #0
    609a:	bf18      	it	ne
    609c:	2001      	movne	r0, #1
    609e:	2240      	movs	r2, #64	; 0x40
    60a0:	490a      	ldr	r1, [pc, #40]	; (60cc <ringbuffer_get+0x3c>)
    60a2:	4b0b      	ldr	r3, [pc, #44]	; (60d0 <ringbuffer_get+0x40>)
    60a4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    60a6:	68a3      	ldr	r3, [r4, #8]
    60a8:	68e2      	ldr	r2, [r4, #12]
    60aa:	429a      	cmp	r2, r3
    60ac:	d00b      	beq.n	60c6 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    60ae:	6862      	ldr	r2, [r4, #4]
    60b0:	4013      	ands	r3, r2
    60b2:	6822      	ldr	r2, [r4, #0]
    60b4:	5cd3      	ldrb	r3, [r2, r3]
    60b6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    60b8:	68a3      	ldr	r3, [r4, #8]
    60ba:	3301      	adds	r3, #1
    60bc:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    60be:	2000      	movs	r0, #0
    60c0:	bd38      	pop	{r3, r4, r5, pc}
    60c2:	2000      	movs	r0, #0
    60c4:	e7eb      	b.n	609e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    60c6:	f06f 0009 	mvn.w	r0, #9
}
    60ca:	bd38      	pop	{r3, r4, r5, pc}
    60cc:	0000de94 	.word	0x0000de94
    60d0:	00005f99 	.word	0x00005f99

000060d4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    60d4:	b538      	push	{r3, r4, r5, lr}
    60d6:	460d      	mov	r5, r1
	ASSERT(rb);
    60d8:	4604      	mov	r4, r0
    60da:	2251      	movs	r2, #81	; 0x51
    60dc:	490b      	ldr	r1, [pc, #44]	; (610c <ringbuffer_put+0x38>)
    60de:	3000      	adds	r0, #0
    60e0:	bf18      	it	ne
    60e2:	2001      	movne	r0, #1
    60e4:	4b0a      	ldr	r3, [pc, #40]	; (6110 <ringbuffer_put+0x3c>)
    60e6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    60e8:	68e3      	ldr	r3, [r4, #12]
    60ea:	6862      	ldr	r2, [r4, #4]
    60ec:	4013      	ands	r3, r2
    60ee:	6822      	ldr	r2, [r4, #0]
    60f0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    60f2:	68e3      	ldr	r3, [r4, #12]
    60f4:	6861      	ldr	r1, [r4, #4]
    60f6:	68a2      	ldr	r2, [r4, #8]
    60f8:	1a9a      	subs	r2, r3, r2
    60fa:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    60fc:	bf84      	itt	hi
    60fe:	1a59      	subhi	r1, r3, r1
    6100:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    6102:	3301      	adds	r3, #1
    6104:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    6106:	2000      	movs	r0, #0
    6108:	bd38      	pop	{r3, r4, r5, pc}
    610a:	bf00      	nop
    610c:	0000de94 	.word	0x0000de94
    6110:	00005f99 	.word	0x00005f99

00006114 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    6114:	b510      	push	{r4, lr}
	ASSERT(rb);
    6116:	4604      	mov	r4, r0
    6118:	2267      	movs	r2, #103	; 0x67
    611a:	4905      	ldr	r1, [pc, #20]	; (6130 <ringbuffer_num+0x1c>)
    611c:	3000      	adds	r0, #0
    611e:	bf18      	it	ne
    6120:	2001      	movne	r0, #1
    6122:	4b04      	ldr	r3, [pc, #16]	; (6134 <ringbuffer_num+0x20>)
    6124:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    6126:	68e0      	ldr	r0, [r4, #12]
    6128:	68a3      	ldr	r3, [r4, #8]
}
    612a:	1ac0      	subs	r0, r0, r3
    612c:	bd10      	pop	{r4, pc}
    612e:	bf00      	nop
    6130:	0000de94 	.word	0x0000de94
    6134:	00005f99 	.word	0x00005f99

00006138 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    6138:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    613a:	4a06      	ldr	r2, [pc, #24]	; (6154 <_sbrk+0x1c>)
    613c:	6812      	ldr	r2, [r2, #0]
    613e:	b122      	cbz	r2, 614a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6140:	4a04      	ldr	r2, [pc, #16]	; (6154 <_sbrk+0x1c>)
    6142:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6144:	4403      	add	r3, r0
    6146:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    6148:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    614a:	4903      	ldr	r1, [pc, #12]	; (6158 <_sbrk+0x20>)
    614c:	4a01      	ldr	r2, [pc, #4]	; (6154 <_sbrk+0x1c>)
    614e:	6011      	str	r1, [r2, #0]
    6150:	e7f6      	b.n	6140 <_sbrk+0x8>
    6152:	bf00      	nop
    6154:	200007ec 	.word	0x200007ec
    6158:	20017d58 	.word	0x20017d58

0000615c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    615c:	f04f 30ff 	mov.w	r0, #4294967295
    6160:	4770      	bx	lr

00006162 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    6162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6166:	604b      	str	r3, [r1, #4]

	return 0;
}
    6168:	2000      	movs	r0, #0
    616a:	4770      	bx	lr

0000616c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    616c:	2001      	movs	r0, #1
    616e:	4770      	bx	lr

00006170 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    6170:	2000      	movs	r0, #0
    6172:	4770      	bx	lr

00006174 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6174:	6940      	ldr	r0, [r0, #20]
    6176:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    617a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    617e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6180:	0040      	lsls	r0, r0, #1
    6182:	3076      	adds	r0, #118	; 0x76
}
    6184:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6188:	4770      	bx	lr
	...

0000618c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    618c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    618e:	f013 0f01 	tst.w	r3, #1
    6192:	d11b      	bne.n	61cc <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6194:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6196:	f013 0f03 	tst.w	r3, #3
    619a:	d1fb      	bne.n	6194 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    619c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    619e:	f013 0f02 	tst.w	r3, #2
    61a2:	d00d      	beq.n	61c0 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    61a4:	8803      	ldrh	r3, [r0, #0]
    61a6:	f023 0302 	bic.w	r3, r3, #2
    61aa:	041b      	lsls	r3, r3, #16
    61ac:	0c1b      	lsrs	r3, r3, #16
    61ae:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    61b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61b2:	f013 0f03 	tst.w	r3, #3
    61b6:	d1fb      	bne.n	61b0 <_adc_init+0x24>
    61b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61ba:	f013 0f02 	tst.w	r3, #2
    61be:	d1fb      	bne.n	61b8 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    61c0:	2301      	movs	r3, #1
    61c2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    61c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61c6:	f013 0f03 	tst.w	r3, #3
    61ca:	d1fb      	bne.n	61c4 <_adc_init+0x38>
    61cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61ce:	f013 0f01 	tst.w	r3, #1
    61d2:	d1fb      	bne.n	61cc <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    61d4:	2316      	movs	r3, #22
    61d6:	4a37      	ldr	r2, [pc, #220]	; (62b4 <_adc_init+0x128>)
    61d8:	fb03 2301 	mla	r3, r3, r1, r2
    61dc:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    61de:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    61e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    61e6:	2b00      	cmp	r3, #0
    61e8:	d1fa      	bne.n	61e0 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    61ea:	2316      	movs	r3, #22
    61ec:	4a31      	ldr	r2, [pc, #196]	; (62b4 <_adc_init+0x128>)
    61ee:	fb03 2301 	mla	r3, r3, r1, r2
    61f2:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    61f4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    61f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    61f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    61fc:	2b00      	cmp	r3, #0
    61fe:	d1fa      	bne.n	61f6 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    6200:	2316      	movs	r3, #22
    6202:	4a2c      	ldr	r2, [pc, #176]	; (62b4 <_adc_init+0x128>)
    6204:	fb03 2301 	mla	r3, r3, r1, r2
    6208:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    620a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    620c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    620e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6210:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6212:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6216:	2b00      	cmp	r3, #0
    6218:	d1fa      	bne.n	6210 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    621a:	2316      	movs	r3, #22
    621c:	4a25      	ldr	r2, [pc, #148]	; (62b4 <_adc_init+0x128>)
    621e:	fb03 2301 	mla	r3, r3, r1, r2
    6222:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    6224:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6226:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6228:	f3c3 030b 	ubfx	r3, r3, #0, #12
    622c:	2b00      	cmp	r3, #0
    622e:	d1fa      	bne.n	6226 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    6230:	2316      	movs	r3, #22
    6232:	4a20      	ldr	r2, [pc, #128]	; (62b4 <_adc_init+0x128>)
    6234:	fb03 2301 	mla	r3, r3, r1, r2
    6238:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    623a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    623c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    623e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6242:	2b00      	cmp	r3, #0
    6244:	d1fa      	bne.n	623c <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    6246:	2316      	movs	r3, #22
    6248:	4a1a      	ldr	r2, [pc, #104]	; (62b4 <_adc_init+0x128>)
    624a:	fb03 2301 	mla	r3, r3, r1, r2
    624e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    6250:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6252:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6254:	f013 0f80 	tst.w	r3, #128	; 0x80
    6258:	d1fb      	bne.n	6252 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    625a:	2316      	movs	r3, #22
    625c:	4a15      	ldr	r2, [pc, #84]	; (62b4 <_adc_init+0x128>)
    625e:	fb03 2301 	mla	r3, r3, r1, r2
    6262:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    6264:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6266:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6268:	f413 7f80 	tst.w	r3, #256	; 0x100
    626c:	d1fb      	bne.n	6266 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    626e:	2316      	movs	r3, #22
    6270:	4a10      	ldr	r2, [pc, #64]	; (62b4 <_adc_init+0x128>)
    6272:	fb03 2301 	mla	r3, r3, r1, r2
    6276:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    6278:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    627a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    627c:	f413 7f00 	tst.w	r3, #512	; 0x200
    6280:	d1fb      	bne.n	627a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    6282:	2316      	movs	r3, #22
    6284:	4a0b      	ldr	r2, [pc, #44]	; (62b4 <_adc_init+0x128>)
    6286:	fb03 2301 	mla	r3, r3, r1, r2
    628a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    628c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    628e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6290:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6294:	d1fb      	bne.n	628e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    6296:	2216      	movs	r2, #22
    6298:	4b06      	ldr	r3, [pc, #24]	; (62b4 <_adc_init+0x128>)
    629a:	fb02 3101 	mla	r1, r2, r1, r3
    629e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    62a0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    62a2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    62a4:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    62a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    62a8:	f013 0f03 	tst.w	r3, #3
    62ac:	d1fb      	bne.n	62a6 <_adc_init+0x11a>

	return ERR_NONE;
}
    62ae:	2000      	movs	r0, #0
    62b0:	4770      	bx	lr
    62b2:	bf00      	nop
    62b4:	0000deb8 	.word	0x0000deb8

000062b8 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    62b8:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    62ba:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    62bc:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    62c0:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    62c4:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    62c6:	f013 0f01 	tst.w	r3, #1
    62ca:	d106      	bne.n	62da <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    62cc:	f013 0f02 	tst.w	r3, #2
    62d0:	d10d      	bne.n	62ee <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    62d2:	f013 0f04 	tst.w	r3, #4
    62d6:	d111      	bne.n	62fc <_adc_interrupt_handler+0x44>
    62d8:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    62da:	2301      	movs	r3, #1
    62dc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    62e0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    62e4:	6883      	ldr	r3, [r0, #8]
    62e6:	b292      	uxth	r2, r2
    62e8:	2100      	movs	r1, #0
    62ea:	4798      	blx	r3
    62ec:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    62ee:	2302      	movs	r3, #2
    62f0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    62f4:	6843      	ldr	r3, [r0, #4]
    62f6:	2100      	movs	r1, #0
    62f8:	4798      	blx	r3
    62fa:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    62fc:	2304      	movs	r3, #4
    62fe:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    6302:	6803      	ldr	r3, [r0, #0]
    6304:	2100      	movs	r1, #0
    6306:	4798      	blx	r3
	}
}
    6308:	e7e6      	b.n	62d8 <_adc_interrupt_handler+0x20>
	...

0000630c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    630c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6310:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6314:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    6318:	b148      	cbz	r0, 632e <_adc_get_regs+0x22>
    631a:	2801      	cmp	r0, #1
    631c:	d009      	beq.n	6332 <_adc_get_regs+0x26>
{
    631e:	b508      	push	{r3, lr}
	ASSERT(false);
    6320:	228c      	movs	r2, #140	; 0x8c
    6322:	4905      	ldr	r1, [pc, #20]	; (6338 <_adc_get_regs+0x2c>)
    6324:	2000      	movs	r0, #0
    6326:	4b05      	ldr	r3, [pc, #20]	; (633c <_adc_get_regs+0x30>)
    6328:	4798      	blx	r3
	return 0;
    632a:	2000      	movs	r0, #0
    632c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    632e:	2000      	movs	r0, #0
    6330:	4770      	bx	lr
    6332:	2001      	movs	r0, #1
    6334:	4770      	bx	lr
    6336:	bf00      	nop
    6338:	0000dee4 	.word	0x0000dee4
    633c:	00005f99 	.word	0x00005f99

00006340 <_adc_async_init>:
{
    6340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6344:	460c      	mov	r4, r1
	ASSERT(device);
    6346:	4605      	mov	r5, r0
    6348:	22e6      	movs	r2, #230	; 0xe6
    634a:	493b      	ldr	r1, [pc, #236]	; (6438 <_adc_async_init+0xf8>)
    634c:	3000      	adds	r0, #0
    634e:	bf18      	it	ne
    6350:	2001      	movne	r0, #1
    6352:	4b3a      	ldr	r3, [pc, #232]	; (643c <_adc_async_init+0xfc>)
    6354:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    6356:	4620      	mov	r0, r4
    6358:	4b39      	ldr	r3, [pc, #228]	; (6440 <_adc_async_init+0x100>)
    635a:	4798      	blx	r3
    635c:	4601      	mov	r1, r0
    635e:	4620      	mov	r0, r4
    6360:	4b38      	ldr	r3, [pc, #224]	; (6444 <_adc_async_init+0x104>)
    6362:	4798      	blx	r3
	if (init_status) {
    6364:	4606      	mov	r6, r0
    6366:	b110      	cbz	r0, 636e <_adc_async_init+0x2e>
}
    6368:	4630      	mov	r0, r6
    636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    636e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6370:	4b35      	ldr	r3, [pc, #212]	; (6448 <_adc_async_init+0x108>)
    6372:	429c      	cmp	r4, r3
    6374:	d05c      	beq.n	6430 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    6376:	4b35      	ldr	r3, [pc, #212]	; (644c <_adc_async_init+0x10c>)
    6378:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    637a:	bf04      	itt	eq
    637c:	4b34      	ldreq	r3, [pc, #208]	; (6450 <_adc_async_init+0x110>)
    637e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6380:	4628      	mov	r0, r5
    6382:	4f34      	ldr	r7, [pc, #208]	; (6454 <_adc_async_init+0x114>)
    6384:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6386:	0943      	lsrs	r3, r0, #5
    6388:	f000 001f 	and.w	r0, r0, #31
    638c:	2401      	movs	r4, #1
    638e:	fa04 f000 	lsl.w	r0, r4, r0
    6392:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6458 <_adc_async_init+0x118>
    6396:	3320      	adds	r3, #32
    6398:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    639c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63a0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    63a4:	4628      	mov	r0, r5
    63a6:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63a8:	0943      	lsrs	r3, r0, #5
    63aa:	f000 001f 	and.w	r0, r0, #31
    63ae:	fa04 f000 	lsl.w	r0, r4, r0
    63b2:	3360      	adds	r3, #96	; 0x60
    63b4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    63b8:	4628      	mov	r0, r5
    63ba:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63bc:	0943      	lsrs	r3, r0, #5
    63be:	f000 001f 	and.w	r0, r0, #31
    63c2:	4084      	lsls	r4, r0
    63c4:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    63c8:	4628      	mov	r0, r5
    63ca:	47b8      	blx	r7
    63cc:	3001      	adds	r0, #1
    63ce:	b280      	uxth	r0, r0
    63d0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    63d2:	2b00      	cmp	r3, #0
    63d4:	dbc8      	blt.n	6368 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63d6:	095b      	lsrs	r3, r3, #5
    63d8:	f000 001f 	and.w	r0, r0, #31
    63dc:	2201      	movs	r2, #1
    63de:	fa02 f000 	lsl.w	r0, r2, r0
    63e2:	3320      	adds	r3, #32
    63e4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    63e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63ec:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    63f0:	4628      	mov	r0, r5
    63f2:	47b8      	blx	r7
    63f4:	3001      	adds	r0, #1
    63f6:	b280      	uxth	r0, r0
    63f8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    63fa:	2b00      	cmp	r3, #0
    63fc:	dbb4      	blt.n	6368 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63fe:	095b      	lsrs	r3, r3, #5
    6400:	f000 001f 	and.w	r0, r0, #31
    6404:	2201      	movs	r2, #1
    6406:	fa02 f000 	lsl.w	r0, r2, r0
    640a:	3360      	adds	r3, #96	; 0x60
    640c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    6410:	4628      	mov	r0, r5
    6412:	47b8      	blx	r7
    6414:	3001      	adds	r0, #1
    6416:	b280      	uxth	r0, r0
    6418:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    641a:	2b00      	cmp	r3, #0
    641c:	dba4      	blt.n	6368 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    641e:	095b      	lsrs	r3, r3, #5
    6420:	f000 001f 	and.w	r0, r0, #31
    6424:	2201      	movs	r2, #1
    6426:	fa02 f000 	lsl.w	r0, r2, r0
    642a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    642e:	e79b      	b.n	6368 <_adc_async_init+0x28>
		_adc0_dev = dev;
    6430:	4b07      	ldr	r3, [pc, #28]	; (6450 <_adc_async_init+0x110>)
    6432:	601d      	str	r5, [r3, #0]
    6434:	e7a4      	b.n	6380 <_adc_async_init+0x40>
    6436:	bf00      	nop
    6438:	0000dee4 	.word	0x0000dee4
    643c:	00005f99 	.word	0x00005f99
    6440:	0000630d 	.word	0x0000630d
    6444:	0000618d 	.word	0x0000618d
    6448:	43001c00 	.word	0x43001c00
    644c:	43002000 	.word	0x43002000
    6450:	200007f0 	.word	0x200007f0
    6454:	00006175 	.word	0x00006175
    6458:	e000e100 	.word	0xe000e100

0000645c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    645c:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    645e:	8813      	ldrh	r3, [r2, #0]
    6460:	b29b      	uxth	r3, r3
    6462:	f043 0302 	orr.w	r3, r3, #2
    6466:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6468:	6b13      	ldr	r3, [r2, #48]	; 0x30
    646a:	f013 0f03 	tst.w	r3, #3
    646e:	d1fb      	bne.n	6468 <_adc_async_enable_channel+0xc>
}
    6470:	4770      	bx	lr

00006472 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6472:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6474:	88db      	ldrh	r3, [r3, #6]
    6476:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    647a:	2b03      	cmp	r3, #3
}
    647c:	bf0c      	ite	eq
    647e:	2001      	moveq	r0, #1
    6480:	2002      	movne	r0, #2
    6482:	4770      	bx	lr

00006484 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    6484:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    6486:	7d13      	ldrb	r3, [r2, #20]
    6488:	f043 0302 	orr.w	r3, r3, #2
    648c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    648e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6490:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6494:	2b00      	cmp	r3, #0
    6496:	d1fa      	bne.n	648e <_adc_async_convert+0xa>
}
    6498:	4770      	bx	lr

0000649a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    649a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    649c:	2a01      	cmp	r2, #1
    649e:	d007      	beq.n	64b0 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    64a0:	2a02      	cmp	r2, #2
    64a2:	d00e      	beq.n	64c2 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    64a4:	b91a      	cbnz	r2, 64ae <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    64a6:	b1ab      	cbz	r3, 64d4 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    64a8:	2301      	movs	r3, #1
    64aa:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    64ae:	4770      	bx	lr
	if (value == 0x0) {
    64b0:	b91b      	cbnz	r3, 64ba <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    64b2:	2304      	movs	r3, #4
    64b4:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    64b8:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    64ba:	2304      	movs	r3, #4
    64bc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    64c0:	4770      	bx	lr
	if (value == 0x0) {
    64c2:	b91b      	cbnz	r3, 64cc <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    64c4:	2302      	movs	r3, #2
    64c6:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    64ca:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    64cc:	2302      	movs	r3, #2
    64ce:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    64d2:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    64d4:	2301      	movs	r3, #1
    64d6:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    64da:	4770      	bx	lr

000064dc <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    64dc:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    64de:	4b02      	ldr	r3, [pc, #8]	; (64e8 <ADC0_0_Handler+0xc>)
    64e0:	6818      	ldr	r0, [r3, #0]
    64e2:	4b02      	ldr	r3, [pc, #8]	; (64ec <ADC0_0_Handler+0x10>)
    64e4:	4798      	blx	r3
    64e6:	bd08      	pop	{r3, pc}
    64e8:	200007f0 	.word	0x200007f0
    64ec:	000062b9 	.word	0x000062b9

000064f0 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    64f0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    64f2:	4b02      	ldr	r3, [pc, #8]	; (64fc <ADC0_1_Handler+0xc>)
    64f4:	6818      	ldr	r0, [r3, #0]
    64f6:	4b02      	ldr	r3, [pc, #8]	; (6500 <ADC0_1_Handler+0x10>)
    64f8:	4798      	blx	r3
    64fa:	bd08      	pop	{r3, pc}
    64fc:	200007f0 	.word	0x200007f0
    6500:	000062b9 	.word	0x000062b9

00006504 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    6504:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6506:	4b02      	ldr	r3, [pc, #8]	; (6510 <ADC1_0_Handler+0xc>)
    6508:	6858      	ldr	r0, [r3, #4]
    650a:	4b02      	ldr	r3, [pc, #8]	; (6514 <ADC1_0_Handler+0x10>)
    650c:	4798      	blx	r3
    650e:	bd08      	pop	{r3, pc}
    6510:	200007f0 	.word	0x200007f0
    6514:	000062b9 	.word	0x000062b9

00006518 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    6518:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    651a:	4b02      	ldr	r3, [pc, #8]	; (6524 <ADC1_1_Handler+0xc>)
    651c:	6858      	ldr	r0, [r3, #4]
    651e:	4b02      	ldr	r3, [pc, #8]	; (6528 <ADC1_1_Handler+0x10>)
    6520:	4798      	blx	r3
    6522:	bd08      	pop	{r3, pc}
    6524:	200007f0 	.word	0x200007f0
    6528:	000062b9 	.word	0x000062b9

0000652c <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    652c:	0943      	lsrs	r3, r0, #5
    652e:	f000 001f 	and.w	r0, r0, #31
    6532:	2201      	movs	r2, #1
    6534:	fa02 f000 	lsl.w	r0, r2, r0
    6538:	3340      	adds	r3, #64	; 0x40
    653a:	4a02      	ldr	r2, [pc, #8]	; (6544 <_irq_set+0x18>)
    653c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6540:	4770      	bx	lr
    6542:	bf00      	nop
    6544:	e000e100 	.word	0xe000e100

00006548 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    6548:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    654c:	00c0      	lsls	r0, r0, #3
    654e:	4770      	bx	lr

00006550 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6550:	4b01      	ldr	r3, [pc, #4]	; (6558 <_get_cycles_for_ms+0x8>)
    6552:	fb03 f000 	mul.w	r0, r3, r0
    6556:	4770      	bx	lr
    6558:	0001d4c0 	.word	0x0001d4c0

0000655c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    655c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    655e:	4a0e      	ldr	r2, [pc, #56]	; (6598 <_init_chip+0x3c>)
    6560:	8813      	ldrh	r3, [r2, #0]
    6562:	b29b      	uxth	r3, r3
    6564:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6568:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    656a:	4b0c      	ldr	r3, [pc, #48]	; (659c <_init_chip+0x40>)
    656c:	4798      	blx	r3
	_oscctrl_init_sources();
    656e:	4b0c      	ldr	r3, [pc, #48]	; (65a0 <_init_chip+0x44>)
    6570:	4798      	blx	r3
	_mclk_init();
    6572:	4b0c      	ldr	r3, [pc, #48]	; (65a4 <_init_chip+0x48>)
    6574:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6576:	2004      	movs	r0, #4
    6578:	4c0b      	ldr	r4, [pc, #44]	; (65a8 <_init_chip+0x4c>)
    657a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    657c:	4b0b      	ldr	r3, [pc, #44]	; (65ac <_init_chip+0x50>)
    657e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6580:	f640 70fb 	movw	r0, #4091	; 0xffb
    6584:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6586:	4a0a      	ldr	r2, [pc, #40]	; (65b0 <_init_chip+0x54>)
    6588:	6913      	ldr	r3, [r2, #16]
    658a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    658e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6590:	4b08      	ldr	r3, [pc, #32]	; (65b4 <_init_chip+0x58>)
    6592:	4798      	blx	r3
    6594:	bd10      	pop	{r4, pc}
    6596:	bf00      	nop
    6598:	41004000 	.word	0x41004000
    659c:	00006a39 	.word	0x00006a39
    65a0:	00006a4d 	.word	0x00006a4d
    65a4:	00006961 	.word	0x00006961
    65a8:	000068e9 	.word	0x000068e9
    65ac:	00006a51 	.word	0x00006a51
    65b0:	40000800 	.word	0x40000800
    65b4:	0000662d 	.word	0x0000662d

000065b8 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    65b8:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    65ba:	4a1a      	ldr	r2, [pc, #104]	; (6624 <_dmac_handler+0x6c>)
    65bc:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    65be:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    65c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    65c6:	4818      	ldr	r0, [pc, #96]	; (6628 <_dmac_handler+0x70>)
    65c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    65cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    65d0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    65d4:	f012 0f01 	tst.w	r2, #1
    65d8:	d10a      	bne.n	65f0 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    65da:	011a      	lsls	r2, r3, #4
    65dc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    65e0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    65e4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    65e8:	f012 0f02 	tst.w	r2, #2
    65ec:	d10b      	bne.n	6606 <_dmac_handler+0x4e>
    65ee:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    65f0:	011a      	lsls	r2, r3, #4
    65f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    65f6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    65fa:	2101      	movs	r1, #1
    65fc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    6600:	6843      	ldr	r3, [r0, #4]
    6602:	4798      	blx	r3
    6604:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    6606:	011a      	lsls	r2, r3, #4
    6608:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    660c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6610:	2102      	movs	r1, #2
    6612:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    6616:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    661a:	4a03      	ldr	r2, [pc, #12]	; (6628 <_dmac_handler+0x70>)
    661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6620:	4798      	blx	r3
	}
}
    6622:	e7e4      	b.n	65ee <_dmac_handler+0x36>
    6624:	4100a000 	.word	0x4100a000
    6628:	200007f8 	.word	0x200007f8

0000662c <_dma_init>:
{
    662c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    662e:	4a32      	ldr	r2, [pc, #200]	; (66f8 <_dma_init+0xcc>)
    6630:	8813      	ldrh	r3, [r2, #0]
    6632:	f023 0302 	bic.w	r3, r3, #2
    6636:	041b      	lsls	r3, r3, #16
    6638:	0c1b      	lsrs	r3, r3, #16
    663a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    663c:	8853      	ldrh	r3, [r2, #2]
    663e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6642:	041b      	lsls	r3, r3, #16
    6644:	0c1b      	lsrs	r3, r3, #16
    6646:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    6648:	8813      	ldrh	r3, [r2, #0]
    664a:	b29b      	uxth	r3, r3
    664c:	f043 0301 	orr.w	r3, r3, #1
    6650:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6652:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6654:	f013 0f01 	tst.w	r3, #1
    6658:	d1fb      	bne.n	6652 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    665a:	4b27      	ldr	r3, [pc, #156]	; (66f8 <_dma_init+0xcc>)
    665c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6660:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6662:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6668:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    666c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    666e:	2100      	movs	r1, #0
    6670:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6672:	4a22      	ldr	r2, [pc, #136]	; (66fc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6674:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6676:	4a22      	ldr	r2, [pc, #136]	; (6700 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6678:	639a      	str	r2, [r3, #56]	; 0x38
    667a:	4b22      	ldr	r3, [pc, #136]	; (6704 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    667c:	4c1f      	ldr	r4, [pc, #124]	; (66fc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    667e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6680:	681d      	ldr	r5, [r3, #0]
    6682:	0108      	lsls	r0, r1, #4
    6684:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6688:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    668c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    668e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6690:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6694:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6696:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    669a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    669c:	1822      	adds	r2, r4, r0
    669e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    66a0:	60d6      	str	r6, [r2, #12]
    66a2:	3101      	adds	r1, #1
    66a4:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    66a6:	2920      	cmp	r1, #32
    66a8:	d1ea      	bne.n	6680 <_dma_init+0x54>
    66aa:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66ac:	2001      	movs	r0, #1
    66ae:	4916      	ldr	r1, [pc, #88]	; (6708 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    66b0:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    66b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    66b6:	d00b      	beq.n	66d0 <_dma_init+0xa4>
    66b8:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    66ba:	2b24      	cmp	r3, #36	; 0x24
    66bc:	d1f8      	bne.n	66b0 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    66be:	4a0e      	ldr	r2, [pc, #56]	; (66f8 <_dma_init+0xcc>)
    66c0:	8813      	ldrh	r3, [r2, #0]
    66c2:	b29b      	uxth	r3, r3
    66c4:	f043 0302 	orr.w	r3, r3, #2
    66c8:	8013      	strh	r3, [r2, #0]
}
    66ca:	2000      	movs	r0, #0
    66cc:	bc70      	pop	{r4, r5, r6}
    66ce:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66d0:	095c      	lsrs	r4, r3, #5
    66d2:	f002 021f 	and.w	r2, r2, #31
    66d6:	fa00 f202 	lsl.w	r2, r0, r2
    66da:	f104 0520 	add.w	r5, r4, #32
    66de:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    66e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66e6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66ea:	f104 0560 	add.w	r5, r4, #96	; 0x60
    66ee:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66f2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    66f6:	e7df      	b.n	66b8 <_dma_init+0x8c>
    66f8:	4100a000 	.word	0x4100a000
    66fc:	20007910 	.word	0x20007910
    6700:	20007b10 	.word	0x20007b10
    6704:	0000defc 	.word	0x0000defc
    6708:	e000e100 	.word	0xe000e100

0000670c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    670c:	b991      	cbnz	r1, 6734 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    670e:	b942      	cbnz	r2, 6722 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    6710:	0100      	lsls	r0, r0, #4
    6712:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6716:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    671a:	2302      	movs	r3, #2
    671c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    6720:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    6722:	0100      	lsls	r0, r0, #4
    6724:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6728:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    672c:	2302      	movs	r3, #2
    672e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    6732:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    6734:	2901      	cmp	r1, #1
    6736:	d000      	beq.n	673a <_dma_set_irq_state+0x2e>
    6738:	4770      	bx	lr
	if (value == 0x0) {
    673a:	b142      	cbz	r2, 674e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    673c:	0100      	lsls	r0, r0, #4
    673e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6742:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6746:	2301      	movs	r3, #1
    6748:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    674c:	e7f4      	b.n	6738 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    674e:	0100      	lsls	r0, r0, #4
    6750:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6754:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6758:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    675c:	4770      	bx	lr
	...

00006760 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6760:	4b02      	ldr	r3, [pc, #8]	; (676c <_dma_set_destination_address+0xc>)
    6762:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6766:	6081      	str	r1, [r0, #8]
}
    6768:	2000      	movs	r0, #0
    676a:	4770      	bx	lr
    676c:	20007910 	.word	0x20007910

00006770 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6770:	4b02      	ldr	r3, [pc, #8]	; (677c <_dma_set_source_address+0xc>)
    6772:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6776:	6041      	str	r1, [r0, #4]
}
    6778:	2000      	movs	r0, #0
    677a:	4770      	bx	lr
    677c:	20007910 	.word	0x20007910

00006780 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6780:	4a05      	ldr	r2, [pc, #20]	; (6798 <_dma_srcinc_enable+0x18>)
    6782:	0100      	lsls	r0, r0, #4
    6784:	5a13      	ldrh	r3, [r2, r0]
    6786:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    678c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6790:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6792:	5211      	strh	r1, [r2, r0]
}
    6794:	2000      	movs	r0, #0
    6796:	4770      	bx	lr
    6798:	20007910 	.word	0x20007910

0000679c <_dma_set_data_amount>:
{
    679c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    679e:	4c14      	ldr	r4, [pc, #80]	; (67f0 <_dma_set_data_amount+0x54>)
    67a0:	0102      	lsls	r2, r0, #4
    67a2:	18a3      	adds	r3, r4, r2
    67a4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    67a6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    67a8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    67ac:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    67ae:	f412 6f00 	tst.w	r2, #2048	; 0x800
    67b2:	d006      	beq.n	67c2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    67b4:	fa01 f403 	lsl.w	r4, r1, r3
    67b8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    67ba:	4a0d      	ldr	r2, [pc, #52]	; (67f0 <_dma_set_data_amount+0x54>)
    67bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    67c0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    67c2:	4c0b      	ldr	r4, [pc, #44]	; (67f0 <_dma_set_data_amount+0x54>)
    67c4:	0102      	lsls	r2, r0, #4
    67c6:	18a5      	adds	r5, r4, r2
    67c8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    67ca:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    67cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
    67d0:	d005      	beq.n	67de <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    67d2:	fa01 f303 	lsl.w	r3, r1, r3
    67d6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    67d8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    67dc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    67de:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    67e0:	4b03      	ldr	r3, [pc, #12]	; (67f0 <_dma_set_data_amount+0x54>)
    67e2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    67e6:	8041      	strh	r1, [r0, #2]
}
    67e8:	2000      	movs	r0, #0
    67ea:	bc30      	pop	{r4, r5}
    67ec:	4770      	bx	lr
    67ee:	bf00      	nop
    67f0:	20007910 	.word	0x20007910

000067f4 <_dma_enable_transaction>:
{
    67f4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    67f6:	4c0d      	ldr	r4, [pc, #52]	; (682c <_dma_enable_transaction+0x38>)
    67f8:	0103      	lsls	r3, r0, #4
    67fa:	5ae2      	ldrh	r2, [r4, r3]
    67fc:	b292      	uxth	r2, r2
    67fe:	f042 0201 	orr.w	r2, r2, #1
    6802:	52e2      	strh	r2, [r4, r3]
    6804:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6808:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    680c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    680e:	f042 0202 	orr.w	r2, r2, #2
    6812:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    6814:	b131      	cbz	r1, 6824 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    6816:	4a06      	ldr	r2, [pc, #24]	; (6830 <_dma_enable_transaction+0x3c>)
    6818:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    681a:	2301      	movs	r3, #1
    681c:	fa03 f000 	lsl.w	r0, r3, r0
    6820:	4308      	orrs	r0, r1
    6822:	6110      	str	r0, [r2, #16]
}
    6824:	2000      	movs	r0, #0
    6826:	f85d 4b04 	ldr.w	r4, [sp], #4
    682a:	4770      	bx	lr
    682c:	20007910 	.word	0x20007910
    6830:	4100a000 	.word	0x4100a000

00006834 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    6834:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6838:	4b02      	ldr	r3, [pc, #8]	; (6844 <_dma_get_channel_resource+0x10>)
    683a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    683e:	6001      	str	r1, [r0, #0]
}
    6840:	2000      	movs	r0, #0
    6842:	4770      	bx	lr
    6844:	200007f8 	.word	0x200007f8

00006848 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    6848:	b508      	push	{r3, lr}
	_dmac_handler();
    684a:	4b01      	ldr	r3, [pc, #4]	; (6850 <DMAC_0_Handler+0x8>)
    684c:	4798      	blx	r3
    684e:	bd08      	pop	{r3, pc}
    6850:	000065b9 	.word	0x000065b9

00006854 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6854:	b508      	push	{r3, lr}
	_dmac_handler();
    6856:	4b01      	ldr	r3, [pc, #4]	; (685c <DMAC_1_Handler+0x8>)
    6858:	4798      	blx	r3
    685a:	bd08      	pop	{r3, pc}
    685c:	000065b9 	.word	0x000065b9

00006860 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6860:	b508      	push	{r3, lr}
	_dmac_handler();
    6862:	4b01      	ldr	r3, [pc, #4]	; (6868 <DMAC_2_Handler+0x8>)
    6864:	4798      	blx	r3
    6866:	bd08      	pop	{r3, pc}
    6868:	000065b9 	.word	0x000065b9

0000686c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    686c:	b508      	push	{r3, lr}
	_dmac_handler();
    686e:	4b01      	ldr	r3, [pc, #4]	; (6874 <DMAC_3_Handler+0x8>)
    6870:	4798      	blx	r3
    6872:	bd08      	pop	{r3, pc}
    6874:	000065b9 	.word	0x000065b9

00006878 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6878:	b508      	push	{r3, lr}
	_dmac_handler();
    687a:	4b01      	ldr	r3, [pc, #4]	; (6880 <DMAC_4_Handler+0x8>)
    687c:	4798      	blx	r3
    687e:	bd08      	pop	{r3, pc}
    6880:	000065b9 	.word	0x000065b9

00006884 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6884:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6886:	2000      	movs	r0, #0
    6888:	4770      	bx	lr
	...

0000688c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    688c:	b430      	push	{r4, r5}
    688e:	4814      	ldr	r0, [pc, #80]	; (68e0 <_event_system_init+0x54>)
    6890:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6894:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6896:	4c13      	ldr	r4, [pc, #76]	; (68e4 <_event_system_init+0x58>)
    6898:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    689a:	f813 1b01 	ldrb.w	r1, [r3], #1
    689e:	3248      	adds	r2, #72	; 0x48
    68a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    68a4:	42ab      	cmp	r3, r5
    68a6:	d1f7      	bne.n	6898 <_event_system_init+0xc>
    68a8:	480d      	ldr	r0, [pc, #52]	; (68e0 <_event_system_init+0x54>)
    68aa:	f100 0442 	add.w	r4, r0, #66	; 0x42
    68ae:	3080      	adds	r0, #128	; 0x80
    68b0:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    68b2:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    68b6:	00ca      	lsls	r2, r1, #3
    68b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    68bc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    68c0:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    68c2:	f850 3f04 	ldr.w	r3, [r0, #4]!
    68c6:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    68c8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    68cc:	43db      	mvns	r3, r3
    68ce:	b2db      	uxtb	r3, r3
    68d0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    68d4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    68d6:	2920      	cmp	r1, #32
    68d8:	d1eb      	bne.n	68b2 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    68da:	2000      	movs	r0, #0
    68dc:	bc30      	pop	{r4, r5}
    68de:	4770      	bx	lr
    68e0:	0000dffc 	.word	0x0000dffc
    68e4:	4100e000 	.word	0x4100e000

000068e8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    68e8:	f010 0f01 	tst.w	r0, #1
    68ec:	d008      	beq.n	6900 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    68ee:	4a17      	ldr	r2, [pc, #92]	; (694c <_gclk_init_generators_by_fref+0x64>)
    68f0:	4b17      	ldr	r3, [pc, #92]	; (6950 <_gclk_init_generators_by_fref+0x68>)
    68f2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    68f4:	4619      	mov	r1, r3
    68f6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    68fa:	684b      	ldr	r3, [r1, #4]
    68fc:	4213      	tst	r3, r2
    68fe:	d1fc      	bne.n	68fa <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6900:	f010 0f02 	tst.w	r0, #2
    6904:	d008      	beq.n	6918 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6906:	4a13      	ldr	r2, [pc, #76]	; (6954 <_gclk_init_generators_by_fref+0x6c>)
    6908:	4b11      	ldr	r3, [pc, #68]	; (6950 <_gclk_init_generators_by_fref+0x68>)
    690a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    690c:	4619      	mov	r1, r3
    690e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6912:	684b      	ldr	r3, [r1, #4]
    6914:	4213      	tst	r3, r2
    6916:	d1fc      	bne.n	6912 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6918:	f010 0f04 	tst.w	r0, #4
    691c:	d008      	beq.n	6930 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    691e:	4a0e      	ldr	r2, [pc, #56]	; (6958 <_gclk_init_generators_by_fref+0x70>)
    6920:	4b0b      	ldr	r3, [pc, #44]	; (6950 <_gclk_init_generators_by_fref+0x68>)
    6922:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6924:	4619      	mov	r1, r3
    6926:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    692a:	684b      	ldr	r3, [r1, #4]
    692c:	4213      	tst	r3, r2
    692e:	d1fc      	bne.n	692a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6930:	f010 0f08 	tst.w	r0, #8
    6934:	d008      	beq.n	6948 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6936:	4a09      	ldr	r2, [pc, #36]	; (695c <_gclk_init_generators_by_fref+0x74>)
    6938:	4b05      	ldr	r3, [pc, #20]	; (6950 <_gclk_init_generators_by_fref+0x68>)
    693a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    693c:	4619      	mov	r1, r3
    693e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6942:	684b      	ldr	r3, [r1, #4]
    6944:	4213      	tst	r3, r2
    6946:	d1fc      	bne.n	6942 <_gclk_init_generators_by_fref+0x5a>
    6948:	4770      	bx	lr
    694a:	bf00      	nop
    694c:	00010108 	.word	0x00010108
    6950:	40001c00 	.word	0x40001c00
    6954:	00010106 	.word	0x00010106
    6958:	00100106 	.word	0x00100106
    695c:	00010104 	.word	0x00010104

00006960 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6960:	2201      	movs	r2, #1
    6962:	4b01      	ldr	r3, [pc, #4]	; (6968 <_mclk_init+0x8>)
    6964:	715a      	strb	r2, [r3, #5]
    6966:	4770      	bx	lr
    6968:	40000800 	.word	0x40000800

0000696c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    696c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    696e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6970:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6972:	f012 0f01 	tst.w	r2, #1
    6976:	d005      	beq.n	6984 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6978:	2201      	movs	r2, #1
    697a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    697c:	6803      	ldr	r3, [r0, #0]
    697e:	b153      	cbz	r3, 6996 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6980:	4798      	blx	r3
    6982:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6984:	8a1a      	ldrh	r2, [r3, #16]
    6986:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6988:	b12a      	cbz	r2, 6996 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    698a:	f240 225e 	movw	r2, #606	; 0x25e
    698e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6990:	6843      	ldr	r3, [r0, #4]
    6992:	b103      	cbz	r3, 6996 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6994:	4798      	blx	r3
    6996:	bd08      	pop	{r3, pc}

00006998 <_flash_init>:
{
    6998:	b538      	push	{r3, r4, r5, lr}
    699a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    699c:	4605      	mov	r5, r0
    699e:	b350      	cbz	r0, 69f6 <_flash_init+0x5e>
    69a0:	4816      	ldr	r0, [pc, #88]	; (69fc <_flash_init+0x64>)
    69a2:	4281      	cmp	r1, r0
    69a4:	bf14      	ite	ne
    69a6:	2000      	movne	r0, #0
    69a8:	2001      	moveq	r0, #1
    69aa:	224b      	movs	r2, #75	; 0x4b
    69ac:	4914      	ldr	r1, [pc, #80]	; (6a00 <_flash_init+0x68>)
    69ae:	4b15      	ldr	r3, [pc, #84]	; (6a04 <_flash_init+0x6c>)
    69b0:	4798      	blx	r3
	device->hw = hw;
    69b2:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    69b4:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    69b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    69ba:	049b      	lsls	r3, r3, #18
    69bc:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    69be:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    69c0:	4b11      	ldr	r3, [pc, #68]	; (6a08 <_flash_init+0x70>)
    69c2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    69c4:	4b11      	ldr	r3, [pc, #68]	; (6a0c <_flash_init+0x74>)
    69c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    69ca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    69ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    69d2:	f3bf 8f6f 	isb	sy
    69d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    69da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    69de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    69e2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    69e6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    69ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    69ee:	6019      	str	r1, [r3, #0]
    69f0:	601a      	str	r2, [r3, #0]
}
    69f2:	2000      	movs	r0, #0
    69f4:	bd38      	pop	{r3, r4, r5, pc}
    69f6:	2000      	movs	r0, #0
    69f8:	e7d7      	b.n	69aa <_flash_init+0x12>
    69fa:	bf00      	nop
    69fc:	41004000 	.word	0x41004000
    6a00:	0000e100 	.word	0x0000e100
    6a04:	00005f99 	.word	0x00005f99
    6a08:	20000978 	.word	0x20000978
    6a0c:	e000e100 	.word	0xe000e100

00006a10 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    6a10:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    6a12:	4b02      	ldr	r3, [pc, #8]	; (6a1c <NVMCTRL_0_Handler+0xc>)
    6a14:	6818      	ldr	r0, [r3, #0]
    6a16:	4b02      	ldr	r3, [pc, #8]	; (6a20 <NVMCTRL_0_Handler+0x10>)
    6a18:	4798      	blx	r3
    6a1a:	bd08      	pop	{r3, pc}
    6a1c:	20000978 	.word	0x20000978
    6a20:	0000696d 	.word	0x0000696d

00006a24 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    6a24:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    6a26:	4b02      	ldr	r3, [pc, #8]	; (6a30 <NVMCTRL_1_Handler+0xc>)
    6a28:	6818      	ldr	r0, [r3, #0]
    6a2a:	4b02      	ldr	r3, [pc, #8]	; (6a34 <NVMCTRL_1_Handler+0x10>)
    6a2c:	4798      	blx	r3
    6a2e:	bd08      	pop	{r3, pc}
    6a30:	20000978 	.word	0x20000978
    6a34:	0000696d 	.word	0x0000696d

00006a38 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <_osc32kctrl_init_sources+0x10>)
    6a3a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6a3c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6a40:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6a42:	2201      	movs	r2, #1
    6a44:	741a      	strb	r2, [r3, #16]
    6a46:	4770      	bx	lr
    6a48:	40001400 	.word	0x40001400

00006a4c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6a4c:	4770      	bx	lr
	...

00006a50 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6a50:	4a47      	ldr	r2, [pc, #284]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6a52:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6a54:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6a58:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6a5c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6a5e:	4611      	mov	r1, r2
    6a60:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6a64:	684b      	ldr	r3, [r1, #4]
    6a66:	4213      	tst	r3, r2
    6a68:	d1fc      	bne.n	6a64 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6a6a:	4a41      	ldr	r2, [pc, #260]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6a6c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6a6e:	f013 0f04 	tst.w	r3, #4
    6a72:	d1fb      	bne.n	6a6c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6a74:	4b3f      	ldr	r3, [pc, #252]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6a76:	2200      	movs	r2, #0
    6a78:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6a7a:	4a3f      	ldr	r2, [pc, #252]	; (6b78 <_oscctrl_init_referenced_generators+0x128>)
    6a7c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6a7e:	461a      	mov	r2, r3
    6a80:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6a84:	f013 0f10 	tst.w	r3, #16
    6a88:	d1fa      	bne.n	6a80 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6a8a:	2200      	movs	r2, #0
    6a8c:	4b39      	ldr	r3, [pc, #228]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6a8e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6a92:	461a      	mov	r2, r3
    6a94:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6a98:	f013 0f04 	tst.w	r3, #4
    6a9c:	d1fa      	bne.n	6a94 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6a9e:	2202      	movs	r2, #2
    6aa0:	4b34      	ldr	r3, [pc, #208]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6aa2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6aa4:	461a      	mov	r2, r3
    6aa6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6aaa:	f013 0f02 	tst.w	r3, #2
    6aae:	d1fa      	bne.n	6aa6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6ab0:	4b30      	ldr	r3, [pc, #192]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6ab4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6ab6:	461a      	mov	r2, r3
    6ab8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6abc:	f013 0f08 	tst.w	r3, #8
    6ac0:	d1fa      	bne.n	6ab8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6ac2:	2288      	movs	r2, #136	; 0x88
    6ac4:	4b2b      	ldr	r3, [pc, #172]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6ac6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6aca:	461a      	mov	r2, r3
    6acc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6ad0:	f013 0f04 	tst.w	r3, #4
    6ad4:	d1fa      	bne.n	6acc <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6ad6:	2242      	movs	r2, #66	; 0x42
    6ad8:	4b25      	ldr	r3, [pc, #148]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6ade:	2227      	movs	r2, #39	; 0x27
    6ae0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    6ae4:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6ae6:	461a      	mov	r2, r3
    6ae8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6aea:	f013 0f06 	tst.w	r3, #6
    6aee:	d1fb      	bne.n	6ae8 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6af0:	4b20      	ldr	r3, [pc, #128]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6af6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6af8:	2202      	movs	r2, #2
    6afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6afe:	461a      	mov	r2, r3
    6b00:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6b02:	f013 0f02 	tst.w	r3, #2
    6b06:	d1fb      	bne.n	6b00 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6b08:	4b1a      	ldr	r3, [pc, #104]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6b0e:	f013 0f01 	tst.w	r3, #1
    6b12:	d026      	beq.n	6b62 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6b14:	4a17      	ldr	r2, [pc, #92]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6b16:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    6b18:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6b1c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6b20:	d1f9      	bne.n	6b16 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6b22:	4b14      	ldr	r3, [pc, #80]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6b26:	f012 0f01 	tst.w	r2, #1
    6b2a:	d103      	bne.n	6b34 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6b2e:	f012 0f02 	tst.w	r2, #2
    6b32:	d0f7      	beq.n	6b24 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6b34:	4a0e      	ldr	r2, [pc, #56]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6b36:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d1fc      	bne.n	6b36 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6b3c:	4a0c      	ldr	r2, [pc, #48]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6b3e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6b40:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6b44:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6b48:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6b4a:	4611      	mov	r1, r2
    6b4c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6b50:	684b      	ldr	r3, [r1, #4]
    6b52:	4213      	tst	r3, r2
    6b54:	d1fc      	bne.n	6b50 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6b56:	4a06      	ldr	r2, [pc, #24]	; (6b70 <_oscctrl_init_referenced_generators+0x120>)
    6b58:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6b5a:	f013 0f04 	tst.w	r3, #4
    6b5e:	d1fb      	bne.n	6b58 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6b60:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6b62:	4a04      	ldr	r2, [pc, #16]	; (6b74 <_oscctrl_init_referenced_generators+0x124>)
    6b64:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6b66:	f413 7f80 	tst.w	r3, #256	; 0x100
    6b6a:	d0fb      	beq.n	6b64 <_oscctrl_init_referenced_generators+0x114>
    6b6c:	e7d9      	b.n	6b22 <_oscctrl_init_referenced_generators+0xd2>
    6b6e:	bf00      	nop
    6b70:	40001c00 	.word	0x40001c00
    6b74:	40001000 	.word	0x40001000
    6b78:	04010000 	.word	0x04010000

00006b7c <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6b7c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6b7e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6b80:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6b82:	4903      	ldr	r1, [pc, #12]	; (6b90 <_qspi_dma_rx_complete+0x14>)
    6b84:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6b86:	685b      	ldr	r3, [r3, #4]
    6b88:	b103      	cbz	r3, 6b8c <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    6b8a:	4798      	blx	r3
    6b8c:	bd08      	pop	{r3, pc}
    6b8e:	bf00      	nop
    6b90:	01000002 	.word	0x01000002

00006b94 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6b94:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6b96:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6b98:	681a      	ldr	r2, [r3, #0]
    6b9a:	4903      	ldr	r1, [pc, #12]	; (6ba8 <_qspi_dma_tx_complete+0x14>)
    6b9c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6b9e:	685b      	ldr	r3, [r3, #4]
    6ba0:	b103      	cbz	r3, 6ba4 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6ba2:	4798      	blx	r3
    6ba4:	bd08      	pop	{r3, pc}
    6ba6:	bf00      	nop
    6ba8:	01000002 	.word	0x01000002

00006bac <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    6bac:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    6bae:	6883      	ldr	r3, [r0, #8]
    6bb0:	689b      	ldr	r3, [r3, #8]
    6bb2:	b103      	cbz	r3, 6bb6 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6bb4:	4798      	blx	r3
    6bb6:	bd08      	pop	{r3, pc}

00006bb8 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bba:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    6bbc:	4604      	mov	r4, r0
    6bbe:	2800      	cmp	r0, #0
    6bc0:	d027      	beq.n	6c12 <_qspi_dma_init+0x5a>
    6bc2:	1c08      	adds	r0, r1, #0
    6bc4:	bf18      	it	ne
    6bc6:	2001      	movne	r0, #1
    6bc8:	22cb      	movs	r2, #203	; 0xcb
    6bca:	4913      	ldr	r1, [pc, #76]	; (6c18 <_qspi_dma_init+0x60>)
    6bcc:	4b13      	ldr	r3, [pc, #76]	; (6c1c <_qspi_dma_init+0x64>)
    6bce:	4798      	blx	r3
	dev->prvt = hw;
    6bd0:	4626      	mov	r6, r4
    6bd2:	f846 5b0c 	str.w	r5, [r6], #12
    6bd6:	2301      	movs	r3, #1
    6bd8:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6bda:	4b11      	ldr	r3, [pc, #68]	; (6c20 <_qspi_dma_init+0x68>)
    6bdc:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6bde:	4b11      	ldr	r3, [pc, #68]	; (6c24 <_qspi_dma_init+0x6c>)
    6be0:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    6be2:	211f      	movs	r1, #31
    6be4:	4630      	mov	r0, r6
    6be6:	4f10      	ldr	r7, [pc, #64]	; (6c28 <_qspi_dma_init+0x70>)
    6be8:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6bea:	68e3      	ldr	r3, [r4, #12]
    6bec:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    6bee:	68e3      	ldr	r3, [r4, #12]
    6bf0:	4a0e      	ldr	r2, [pc, #56]	; (6c2c <_qspi_dma_init+0x74>)
    6bf2:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6bf4:	68e3      	ldr	r3, [r4, #12]
    6bf6:	4d0e      	ldr	r5, [pc, #56]	; (6c30 <_qspi_dma_init+0x78>)
    6bf8:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    6bfa:	211e      	movs	r1, #30
    6bfc:	4630      	mov	r0, r6
    6bfe:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6c00:	68e3      	ldr	r3, [r4, #12]
    6c02:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    6c04:	68e3      	ldr	r3, [r4, #12]
    6c06:	4a0b      	ldr	r2, [pc, #44]	; (6c34 <_qspi_dma_init+0x7c>)
    6c08:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6c0a:	68e3      	ldr	r3, [r4, #12]
    6c0c:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    6c0e:	2000      	movs	r0, #0
    6c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c12:	2000      	movs	r0, #0
    6c14:	e7d8      	b.n	6bc8 <_qspi_dma_init+0x10>
    6c16:	bf00      	nop
    6c18:	0000e120 	.word	0x0000e120
    6c1c:	00005f99 	.word	0x00005f99
    6c20:	06000011 	.word	0x06000011
    6c24:	00243b00 	.word	0x00243b00
    6c28:	00006835 	.word	0x00006835
    6c2c:	00006b7d 	.word	0x00006b7d
    6c30:	00006bad 	.word	0x00006bad
    6c34:	00006b95 	.word	0x00006b95

00006c38 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    6c38:	b500      	push	{lr}
    6c3a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    6c3c:	4b0d      	ldr	r3, [pc, #52]	; (6c74 <RAMECC_Handler+0x3c>)
    6c3e:	789b      	ldrb	r3, [r3, #2]
    6c40:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    6c42:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	f013 0f02 	tst.w	r3, #2
    6c4a:	d006      	beq.n	6c5a <RAMECC_Handler+0x22>
    6c4c:	4b0a      	ldr	r3, [pc, #40]	; (6c78 <RAMECC_Handler+0x40>)
    6c4e:	681b      	ldr	r3, [r3, #0]
    6c50:	b11b      	cbz	r3, 6c5a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6c52:	4a08      	ldr	r2, [pc, #32]	; (6c74 <RAMECC_Handler+0x3c>)
    6c54:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6c56:	4798      	blx	r3
    6c58:	e009      	b.n	6c6e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	f013 0f01 	tst.w	r3, #1
    6c60:	d005      	beq.n	6c6e <RAMECC_Handler+0x36>
    6c62:	4b05      	ldr	r3, [pc, #20]	; (6c78 <RAMECC_Handler+0x40>)
    6c64:	685b      	ldr	r3, [r3, #4]
    6c66:	b113      	cbz	r3, 6c6e <RAMECC_Handler+0x36>
    6c68:	4a02      	ldr	r2, [pc, #8]	; (6c74 <RAMECC_Handler+0x3c>)
    6c6a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6c6c:	4798      	blx	r3
	} else {
		return;
	}
}
    6c6e:	b003      	add	sp, #12
    6c70:	f85d fb04 	ldr.w	pc, [sp], #4
    6c74:	41020000 	.word	0x41020000
    6c78:	20007d10 	.word	0x20007d10

00006c7c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6c7c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6c7e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6c80:	6913      	ldr	r3, [r2, #16]
    6c82:	f013 0f60 	tst.w	r3, #96	; 0x60
    6c86:	d1fb      	bne.n	6c80 <_rtc_timer_set_period+0x4>
}
    6c88:	4770      	bx	lr

00006c8a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    6c8a:	68c2      	ldr	r2, [r0, #12]
    6c8c:	6913      	ldr	r3, [r2, #16]
    6c8e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6c92:	d1fb      	bne.n	6c8c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6c94:	6a10      	ldr	r0, [r2, #32]
}
    6c96:	4770      	bx	lr

00006c98 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6c98:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6c9a:	f248 0103 	movw	r1, #32771	; 0x8003
    6c9e:	6913      	ldr	r3, [r2, #16]
    6ca0:	420b      	tst	r3, r1
    6ca2:	d1fc      	bne.n	6c9e <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6ca4:	8810      	ldrh	r0, [r2, #0]
}
    6ca6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6caa:	4770      	bx	lr

00006cac <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    6cac:	4770      	bx	lr
	...

00006cb0 <_rtc_timer_init>:
{
    6cb0:	b538      	push	{r3, r4, r5, lr}
    6cb2:	460c      	mov	r4, r1
	ASSERT(dev);
    6cb4:	4605      	mov	r5, r0
    6cb6:	2230      	movs	r2, #48	; 0x30
    6cb8:	4914      	ldr	r1, [pc, #80]	; (6d0c <_rtc_timer_init+0x5c>)
    6cba:	3000      	adds	r0, #0
    6cbc:	bf18      	it	ne
    6cbe:	2001      	movne	r0, #1
    6cc0:	4b13      	ldr	r3, [pc, #76]	; (6d10 <_rtc_timer_init+0x60>)
    6cc2:	4798      	blx	r3
	dev->hw = hw;
    6cc4:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6cc6:	2301      	movs	r3, #1
    6cc8:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6cca:	f248 0203 	movw	r2, #32771	; 0x8003
    6cce:	6923      	ldr	r3, [r4, #16]
    6cd0:	4213      	tst	r3, r2
    6cd2:	d1fc      	bne.n	6cce <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6cd4:	68eb      	ldr	r3, [r5, #12]
    6cd6:	691a      	ldr	r2, [r3, #16]
    6cd8:	f012 0f01 	tst.w	r2, #1
    6cdc:	d1fb      	bne.n	6cd6 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6cde:	f248 0280 	movw	r2, #32896	; 0x8080
    6ce2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6ce4:	f248 0103 	movw	r1, #32771	; 0x8003
    6ce8:	691a      	ldr	r2, [r3, #16]
    6cea:	420a      	tst	r2, r1
    6cec:	d1fc      	bne.n	6ce8 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    6cee:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6cf0:	2301      	movs	r3, #1
    6cf2:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6cf4:	6913      	ldr	r3, [r2, #16]
    6cf6:	f013 0f60 	tst.w	r3, #96	; 0x60
    6cfa:	d1fb      	bne.n	6cf4 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6cfc:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    6cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d02:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    6d04:	4b03      	ldr	r3, [pc, #12]	; (6d14 <_rtc_timer_init+0x64>)
    6d06:	601d      	str	r5, [r3, #0]
}
    6d08:	2000      	movs	r0, #0
    6d0a:	bd38      	pop	{r3, r4, r5, pc}
    6d0c:	0000e138 	.word	0x0000e138
    6d10:	00005f99 	.word	0x00005f99
    6d14:	2000097c 	.word	0x2000097c

00006d18 <_rtc_timer_deinit>:
{
    6d18:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6d1a:	4604      	mov	r4, r0
    6d1c:	b1c8      	cbz	r0, 6d52 <_rtc_timer_deinit+0x3a>
    6d1e:	68c0      	ldr	r0, [r0, #12]
    6d20:	3000      	adds	r0, #0
    6d22:	bf18      	it	ne
    6d24:	2001      	movne	r0, #1
    6d26:	2252      	movs	r2, #82	; 0x52
    6d28:	490b      	ldr	r1, [pc, #44]	; (6d58 <_rtc_timer_deinit+0x40>)
    6d2a:	4b0c      	ldr	r3, [pc, #48]	; (6d5c <_rtc_timer_deinit+0x44>)
    6d2c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6d32:	4b0b      	ldr	r3, [pc, #44]	; (6d60 <_rtc_timer_deinit+0x48>)
    6d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d3c:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    6d40:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6d42:	2301      	movs	r3, #1
    6d44:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6d46:	f248 0103 	movw	r1, #32771	; 0x8003
    6d4a:	6913      	ldr	r3, [r2, #16]
    6d4c:	420b      	tst	r3, r1
    6d4e:	d1fc      	bne.n	6d4a <_rtc_timer_deinit+0x32>
}
    6d50:	bd10      	pop	{r4, pc}
    6d52:	2000      	movs	r0, #0
    6d54:	e7e7      	b.n	6d26 <_rtc_timer_deinit+0xe>
    6d56:	bf00      	nop
    6d58:	0000e138 	.word	0x0000e138
    6d5c:	00005f99 	.word	0x00005f99
    6d60:	e000e100 	.word	0xe000e100

00006d64 <_rtc_timer_start>:
{
    6d64:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6d66:	4604      	mov	r4, r0
    6d68:	b310      	cbz	r0, 6db0 <_rtc_timer_start+0x4c>
    6d6a:	68c0      	ldr	r0, [r0, #12]
    6d6c:	3000      	adds	r0, #0
    6d6e:	bf18      	it	ne
    6d70:	2001      	movne	r0, #1
    6d72:	225e      	movs	r2, #94	; 0x5e
    6d74:	490f      	ldr	r1, [pc, #60]	; (6db4 <_rtc_timer_start+0x50>)
    6d76:	4b10      	ldr	r3, [pc, #64]	; (6db8 <_rtc_timer_start+0x54>)
    6d78:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6d7e:	4b0f      	ldr	r3, [pc, #60]	; (6dbc <_rtc_timer_start+0x58>)
    6d80:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6d82:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6d84:	2300      	movs	r3, #0
    6d86:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6d88:	6913      	ldr	r3, [r2, #16]
    6d8a:	f013 0f08 	tst.w	r3, #8
    6d8e:	d1fb      	bne.n	6d88 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6d90:	68e3      	ldr	r3, [r4, #12]
    6d92:	691a      	ldr	r2, [r3, #16]
    6d94:	f012 0f08 	tst.w	r2, #8
    6d98:	d1fb      	bne.n	6d92 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6d9a:	881a      	ldrh	r2, [r3, #0]
    6d9c:	b292      	uxth	r2, r2
    6d9e:	f042 0202 	orr.w	r2, r2, #2
    6da2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6da4:	f248 0103 	movw	r1, #32771	; 0x8003
    6da8:	691a      	ldr	r2, [r3, #16]
    6daa:	420a      	tst	r2, r1
    6dac:	d1fc      	bne.n	6da8 <_rtc_timer_start+0x44>
}
    6dae:	bd10      	pop	{r4, pc}
    6db0:	2000      	movs	r0, #0
    6db2:	e7de      	b.n	6d72 <_rtc_timer_start+0xe>
    6db4:	0000e138 	.word	0x0000e138
    6db8:	00005f99 	.word	0x00005f99
    6dbc:	e000e100 	.word	0xe000e100

00006dc0 <_rtc_timer_stop>:
{
    6dc0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6dc2:	4604      	mov	r4, r0
    6dc4:	b1a0      	cbz	r0, 6df0 <_rtc_timer_stop+0x30>
    6dc6:	68c0      	ldr	r0, [r0, #12]
    6dc8:	3000      	adds	r0, #0
    6dca:	bf18      	it	ne
    6dcc:	2001      	movne	r0, #1
    6dce:	226b      	movs	r2, #107	; 0x6b
    6dd0:	4908      	ldr	r1, [pc, #32]	; (6df4 <_rtc_timer_stop+0x34>)
    6dd2:	4b09      	ldr	r3, [pc, #36]	; (6df8 <_rtc_timer_stop+0x38>)
    6dd4:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6dd6:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6dd8:	8813      	ldrh	r3, [r2, #0]
    6dda:	f023 0302 	bic.w	r3, r3, #2
    6dde:	041b      	lsls	r3, r3, #16
    6de0:	0c1b      	lsrs	r3, r3, #16
    6de2:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6de4:	f248 0103 	movw	r1, #32771	; 0x8003
    6de8:	6913      	ldr	r3, [r2, #16]
    6dea:	420b      	tst	r3, r1
    6dec:	d1fc      	bne.n	6de8 <_rtc_timer_stop+0x28>
}
    6dee:	bd10      	pop	{r4, pc}
    6df0:	2000      	movs	r0, #0
    6df2:	e7ec      	b.n	6dce <_rtc_timer_stop+0xe>
    6df4:	0000e138 	.word	0x0000e138
    6df8:	00005f99 	.word	0x00005f99

00006dfc <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6dfc:	4800      	ldr	r0, [pc, #0]	; (6e00 <_rtc_get_timer+0x4>)
    6dfe:	4770      	bx	lr
    6e00:	20000358 	.word	0x20000358

00006e04 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6e04:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    6e06:	4b08      	ldr	r3, [pc, #32]	; (6e28 <RTC_Handler+0x24>)
    6e08:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6e0a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6e0c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6e0e:	f413 7f80 	tst.w	r3, #256	; 0x100
    6e12:	d007      	beq.n	6e24 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6e14:	6823      	ldr	r3, [r4, #0]
    6e16:	b10b      	cbz	r3, 6e1c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    6e18:	4620      	mov	r0, r4
    6e1a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6e1c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e22:	819a      	strh	r2, [r3, #12]
    6e24:	bd10      	pop	{r4, pc}
    6e26:	bf00      	nop
    6e28:	2000097c 	.word	0x2000097c

00006e2c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6e2c:	b470      	push	{r4, r5, r6}
    6e2e:	b089      	sub	sp, #36	; 0x24
    6e30:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6e32:	466c      	mov	r4, sp
    6e34:	4d0d      	ldr	r5, [pc, #52]	; (6e6c <_sercom_get_hardware_index+0x40>)
    6e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6e42:	9b00      	ldr	r3, [sp, #0]
    6e44:	42b3      	cmp	r3, r6
    6e46:	d00d      	beq.n	6e64 <_sercom_get_hardware_index+0x38>
    6e48:	4631      	mov	r1, r6
    6e4a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6e4c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6e4e:	f853 2b04 	ldr.w	r2, [r3], #4
    6e52:	428a      	cmp	r2, r1
    6e54:	d007      	beq.n	6e66 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6e56:	3001      	adds	r0, #1
    6e58:	2808      	cmp	r0, #8
    6e5a:	d1f8      	bne.n	6e4e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6e5c:	2000      	movs	r0, #0
}
    6e5e:	b009      	add	sp, #36	; 0x24
    6e60:	bc70      	pop	{r4, r5, r6}
    6e62:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6e64:	2000      	movs	r0, #0
			return i;
    6e66:	b2c0      	uxtb	r0, r0
    6e68:	e7f9      	b.n	6e5e <_sercom_get_hardware_index+0x32>
    6e6a:	bf00      	nop
    6e6c:	0000e150 	.word	0x0000e150

00006e70 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6e70:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6e72:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6e74:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6e76:	f013 0f01 	tst.w	r3, #1
    6e7a:	d003      	beq.n	6e84 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6e7c:	7da3      	ldrb	r3, [r4, #22]
    6e7e:	f013 0f01 	tst.w	r3, #1
    6e82:	d112      	bne.n	6eaa <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6e84:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6e86:	f013 0f02 	tst.w	r3, #2
    6e8a:	d003      	beq.n	6e94 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6e8c:	7da3      	ldrb	r3, [r4, #22]
    6e8e:	f013 0f02 	tst.w	r3, #2
    6e92:	d10f      	bne.n	6eb4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6e94:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6e96:	f013 0f04 	tst.w	r3, #4
    6e9a:	d015      	beq.n	6ec8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6e9c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6e9e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6ea2:	b163      	cbz	r3, 6ebe <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6ea4:	23ff      	movs	r3, #255	; 0xff
    6ea6:	8363      	strh	r3, [r4, #26]
    6ea8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6eaa:	2301      	movs	r3, #1
    6eac:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6eae:	6803      	ldr	r3, [r0, #0]
    6eb0:	4798      	blx	r3
    6eb2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6eb4:	2302      	movs	r3, #2
    6eb6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6eb8:	6883      	ldr	r3, [r0, #8]
    6eba:	4798      	blx	r3
    6ebc:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6ebe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6ec0:	6843      	ldr	r3, [r0, #4]
    6ec2:	b2c9      	uxtb	r1, r1
    6ec4:	4798      	blx	r3
    6ec6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6ec8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6eca:	09db      	lsrs	r3, r3, #7
    6ecc:	d100      	bne.n	6ed0 <_sercom_usart_interrupt_handler+0x60>
    6ece:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6ed0:	2380      	movs	r3, #128	; 0x80
    6ed2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6ed4:	68c3      	ldr	r3, [r0, #12]
    6ed6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6ed8:	8b63      	ldrh	r3, [r4, #26]
    6eda:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6edc:	8363      	strh	r3, [r4, #26]
    6ede:	e7f6      	b.n	6ece <_sercom_usart_interrupt_handler+0x5e>

00006ee0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6ee0:	4b11      	ldr	r3, [pc, #68]	; (6f28 <_sercom_init_irq_param+0x48>)
    6ee2:	4298      	cmp	r0, r3
    6ee4:	d011      	beq.n	6f0a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6ee6:	4b11      	ldr	r3, [pc, #68]	; (6f2c <_sercom_init_irq_param+0x4c>)
    6ee8:	4298      	cmp	r0, r3
    6eea:	d011      	beq.n	6f10 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6eec:	4b10      	ldr	r3, [pc, #64]	; (6f30 <_sercom_init_irq_param+0x50>)
    6eee:	4298      	cmp	r0, r3
    6ef0:	d011      	beq.n	6f16 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6ef2:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6ef6:	d011      	beq.n	6f1c <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6ef8:	4b0e      	ldr	r3, [pc, #56]	; (6f34 <_sercom_init_irq_param+0x54>)
    6efa:	4298      	cmp	r0, r3
    6efc:	d011      	beq.n	6f22 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6efe:	4b0e      	ldr	r3, [pc, #56]	; (6f38 <_sercom_init_irq_param+0x58>)
    6f00:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    6f02:	bf04      	itt	eq
    6f04:	4b0d      	ldreq	r3, [pc, #52]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f06:	6159      	streq	r1, [r3, #20]
    6f08:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6f0a:	4b0c      	ldr	r3, [pc, #48]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f0c:	6019      	str	r1, [r3, #0]
    6f0e:	e7f0      	b.n	6ef2 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6f10:	4b0a      	ldr	r3, [pc, #40]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f12:	6059      	str	r1, [r3, #4]
    6f14:	e7f0      	b.n	6ef8 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    6f16:	4b09      	ldr	r3, [pc, #36]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f18:	6099      	str	r1, [r3, #8]
    6f1a:	e7f0      	b.n	6efe <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6f1c:	4b07      	ldr	r3, [pc, #28]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f1e:	60d9      	str	r1, [r3, #12]
    6f20:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6f22:	4b06      	ldr	r3, [pc, #24]	; (6f3c <_sercom_init_irq_param+0x5c>)
    6f24:	6119      	str	r1, [r3, #16]
    6f26:	4770      	bx	lr
    6f28:	40003000 	.word	0x40003000
    6f2c:	40003400 	.word	0x40003400
    6f30:	41014000 	.word	0x41014000
    6f34:	43000400 	.word	0x43000400
    6f38:	43000800 	.word	0x43000800
    6f3c:	20000980 	.word	0x20000980

00006f40 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6f40:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6f42:	4b03      	ldr	r3, [pc, #12]	; (6f50 <_sercom_get_irq_num+0x10>)
    6f44:	4798      	blx	r3
    6f46:	0080      	lsls	r0, r0, #2
    6f48:	302e      	adds	r0, #46	; 0x2e
}
    6f4a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6f4e:	bd08      	pop	{r3, pc}
    6f50:	00006e2d 	.word	0x00006e2d

00006f54 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6f54:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6f56:	f013 0f01 	tst.w	r3, #1
    6f5a:	d109      	bne.n	6f70 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6f5c:	6803      	ldr	r3, [r0, #0]
    6f5e:	f043 0302 	orr.w	r3, r3, #2
    6f62:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6f64:	69c3      	ldr	r3, [r0, #28]
    6f66:	f013 0f03 	tst.w	r3, #3
    6f6a:	d1fb      	bne.n	6f64 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6f6c:	2000      	movs	r0, #0
    6f6e:	4770      	bx	lr
		return ERR_BUSY;
    6f70:	f06f 0003 	mvn.w	r0, #3
}
    6f74:	4770      	bx	lr
	...

00006f78 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6f78:	b538      	push	{r3, r4, r5, lr}
    6f7a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6f7c:	4b0b      	ldr	r3, [pc, #44]	; (6fac <_spi_async_enable+0x34>)
    6f7e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6f80:	4620      	mov	r0, r4
    6f82:	4b0b      	ldr	r3, [pc, #44]	; (6fb0 <_spi_async_enable+0x38>)
    6f84:	4798      	blx	r3
    6f86:	1d01      	adds	r1, r0, #4
    6f88:	b2c9      	uxtb	r1, r1
    6f8a:	2501      	movs	r5, #1
    6f8c:	4c09      	ldr	r4, [pc, #36]	; (6fb4 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6f8e:	1c43      	adds	r3, r0, #1
    6f90:	b2db      	uxtb	r3, r3
    6f92:	0942      	lsrs	r2, r0, #5
    6f94:	f000 001f 	and.w	r0, r0, #31
    6f98:	fa05 f000 	lsl.w	r0, r5, r0
    6f9c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6fa0:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6fa2:	4299      	cmp	r1, r3
    6fa4:	d1f3      	bne.n	6f8e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6fa6:	2000      	movs	r0, #0
    6fa8:	bd38      	pop	{r3, r4, r5, pc}
    6faa:	bf00      	nop
    6fac:	00006f55 	.word	0x00006f55
    6fb0:	00006f41 	.word	0x00006f41
    6fb4:	e000e100 	.word	0xe000e100

00006fb8 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6fb8:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6fba:	f013 0f03 	tst.w	r3, #3
    6fbe:	d111      	bne.n	6fe4 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6fc0:	69c3      	ldr	r3, [r0, #28]
    6fc2:	f013 0f03 	tst.w	r3, #3
    6fc6:	d1fb      	bne.n	6fc0 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6fc8:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6fca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6fce:	0709      	lsls	r1, r1, #28
    6fd0:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6fd4:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6fd6:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6fd8:	69c3      	ldr	r3, [r0, #28]
    6fda:	f013 0f03 	tst.w	r3, #3
    6fde:	d1fb      	bne.n	6fd8 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6fe0:	2000      	movs	r0, #0
    6fe2:	4770      	bx	lr
		return ERR_BUSY;
    6fe4:	f06f 0003 	mvn.w	r0, #3
}
    6fe8:	4770      	bx	lr

00006fea <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6fea:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6fec:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6fee:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6ff0:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6ff2:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6ff4:	f013 0f01 	tst.w	r3, #1
    6ff8:	d109      	bne.n	700e <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6ffa:	f013 0f04 	tst.w	r3, #4
    6ffe:	d109      	bne.n	7014 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    7000:	f013 0f02 	tst.w	r3, #2
    7004:	d109      	bne.n	701a <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    7006:	f013 0f80 	tst.w	r3, #128	; 0x80
    700a:	d10b      	bne.n	7024 <_spi_handler+0x3a>
    700c:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    700e:	6883      	ldr	r3, [r0, #8]
    7010:	4798      	blx	r3
    7012:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    7014:	68c3      	ldr	r3, [r0, #12]
    7016:	4798      	blx	r3
    7018:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    701a:	2302      	movs	r3, #2
    701c:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    701e:	6903      	ldr	r3, [r0, #16]
    7020:	4798      	blx	r3
    7022:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7024:	2304      	movs	r3, #4
    7026:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7028:	2380      	movs	r3, #128	; 0x80
    702a:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    702c:	6943      	ldr	r3, [r0, #20]
    702e:	f06f 0112 	mvn.w	r1, #18
    7032:	4798      	blx	r3
	}
}
    7034:	e7ea      	b.n	700c <_spi_handler+0x22>
	...

00007038 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    7038:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    703a:	4b03      	ldr	r3, [pc, #12]	; (7048 <_spi_get_tx_dma_channel+0x10>)
    703c:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    703e:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7040:	bf0c      	ite	eq
    7042:	2008      	moveq	r0, #8
    7044:	2000      	movne	r0, #0
    7046:	bd08      	pop	{r3, pc}
    7048:	00006e2d 	.word	0x00006e2d

0000704c <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    704c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    704e:	4b03      	ldr	r3, [pc, #12]	; (705c <_spi_get_rx_dma_channel+0x10>)
    7050:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7052:	2807      	cmp	r0, #7
    7054:	bf8c      	ite	hi
    7056:	2000      	movhi	r0, #0
    7058:	2001      	movls	r0, #1
    705a:	bd08      	pop	{r3, pc}
    705c:	00006e2d 	.word	0x00006e2d

00007060 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    7060:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    7062:	6883      	ldr	r3, [r0, #8]
    7064:	689b      	ldr	r3, [r3, #8]
    7066:	b103      	cbz	r3, 706a <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    7068:	4798      	blx	r3
    706a:	bd08      	pop	{r3, pc}

0000706c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    706c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    706e:	6883      	ldr	r3, [r0, #8]
    7070:	685b      	ldr	r3, [r3, #4]
    7072:	b103      	cbz	r3, 7076 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    7074:	4798      	blx	r3
    7076:	bd08      	pop	{r3, pc}

00007078 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    7078:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    707a:	6883      	ldr	r3, [r0, #8]
    707c:	68db      	ldr	r3, [r3, #12]
    707e:	b103      	cbz	r3, 7082 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    7080:	4798      	blx	r3
    7082:	bd08      	pop	{r3, pc}

00007084 <_usart_init>:
{
    7084:	b510      	push	{r4, lr}
    7086:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7088:	4b48      	ldr	r3, [pc, #288]	; (71ac <_usart_init+0x128>)
    708a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    708c:	2800      	cmp	r0, #0
    708e:	d06a      	beq.n	7166 <_usart_init+0xe2>
    7090:	2801      	cmp	r0, #1
    7092:	d062      	beq.n	715a <_usart_init+0xd6>
    7094:	2802      	cmp	r0, #2
    7096:	d062      	beq.n	715e <_usart_init+0xda>
    7098:	2804      	cmp	r0, #4
    709a:	d062      	beq.n	7162 <_usart_init+0xde>
    709c:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    709e:	bf08      	it	eq
    70a0:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    70a2:	d006      	beq.n	70b2 <_usart_init+0x2e>
	ASSERT(false);
    70a4:	f240 2276 	movw	r2, #630	; 0x276
    70a8:	4941      	ldr	r1, [pc, #260]	; (71b0 <_usart_init+0x12c>)
    70aa:	2000      	movs	r0, #0
    70ac:	4b41      	ldr	r3, [pc, #260]	; (71b4 <_usart_init+0x130>)
    70ae:	4798      	blx	r3
	return 0;
    70b0:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    70b2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    70b4:	f013 0f01 	tst.w	r3, #1
    70b8:	d122      	bne.n	7100 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    70ba:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    70be:	4a3e      	ldr	r2, [pc, #248]	; (71b8 <_usart_init+0x134>)
    70c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    70c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    70c6:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    70ca:	69e3      	ldr	r3, [r4, #28]
    70cc:	f013 0f03 	tst.w	r3, #3
    70d0:	d1fb      	bne.n	70ca <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    70d2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    70d4:	f013 0f02 	tst.w	r3, #2
    70d8:	d00b      	beq.n	70f2 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    70da:	6823      	ldr	r3, [r4, #0]
    70dc:	f023 0302 	bic.w	r3, r3, #2
    70e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    70e2:	69e3      	ldr	r3, [r4, #28]
    70e4:	f013 0f03 	tst.w	r3, #3
    70e8:	d1fb      	bne.n	70e2 <_usart_init+0x5e>
    70ea:	69e3      	ldr	r3, [r4, #28]
    70ec:	f013 0f02 	tst.w	r3, #2
    70f0:	d1fb      	bne.n	70ea <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    70f2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    70f6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    70f8:	69e3      	ldr	r3, [r4, #28]
    70fa:	f013 0f03 	tst.w	r3, #3
    70fe:	d1fb      	bne.n	70f8 <_usart_init+0x74>
    7100:	69e3      	ldr	r3, [r4, #28]
    7102:	f013 0f01 	tst.w	r3, #1
    7106:	d1fb      	bne.n	7100 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    7108:	460a      	mov	r2, r1
    710a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    710e:	4b2a      	ldr	r3, [pc, #168]	; (71b8 <_usart_init+0x134>)
    7110:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    7114:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    7116:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7118:	69e3      	ldr	r3, [r4, #28]
    711a:	f013 0f03 	tst.w	r3, #3
    711e:	d1fb      	bne.n	7118 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    7120:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7124:	4924      	ldr	r1, [pc, #144]	; (71b8 <_usart_init+0x134>)
    7126:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    712c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    712e:	69e3      	ldr	r3, [r4, #28]
    7130:	f013 0f1f 	tst.w	r3, #31
    7134:	d1fb      	bne.n	712e <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    7136:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    713a:	491f      	ldr	r1, [pc, #124]	; (71b8 <_usart_init+0x134>)
    713c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    7142:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    7144:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    7148:	d10f      	bne.n	716a <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    714a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    714e:	491a      	ldr	r1, [pc, #104]	; (71b8 <_usart_init+0x134>)
    7150:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7154:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    7156:	81a3      	strh	r3, [r4, #12]
    7158:	e016      	b.n	7188 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    715a:	2101      	movs	r1, #1
    715c:	e7a9      	b.n	70b2 <_usart_init+0x2e>
    715e:	2102      	movs	r1, #2
    7160:	e7a7      	b.n	70b2 <_usart_init+0x2e>
    7162:	2103      	movs	r1, #3
    7164:	e7a5      	b.n	70b2 <_usart_init+0x2e>
    7166:	2100      	movs	r1, #0
    7168:	e7a3      	b.n	70b2 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    716a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    716e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7172:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    7174:	89a1      	ldrh	r1, [r4, #12]
    7176:	f360 010c 	bfi	r1, r0, #0, #13
    717a:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    717c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    7180:	89a3      	ldrh	r3, [r4, #12]
    7182:	f361 334f 	bfi	r3, r1, #13, #3
    7186:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    7188:	4b0b      	ldr	r3, [pc, #44]	; (71b8 <_usart_init+0x134>)
    718a:	0051      	lsls	r1, r2, #1
    718c:	1888      	adds	r0, r1, r2
    718e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7192:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    7196:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    7198:	440a      	add	r2, r1
    719a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    719e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    71a2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    71a6:	2000      	movs	r0, #0
    71a8:	bd10      	pop	{r4, pc}
    71aa:	bf00      	nop
    71ac:	00006e2d 	.word	0x00006e2d
    71b0:	0000e224 	.word	0x0000e224
    71b4:	00005f99 	.word	0x00005f99
    71b8:	0000e150 	.word	0x0000e150

000071bc <_get_i2cm_index>:
{
    71bc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    71be:	4b07      	ldr	r3, [pc, #28]	; (71dc <_get_i2cm_index+0x20>)
    71c0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    71c2:	2805      	cmp	r0, #5
    71c4:	d008      	beq.n	71d8 <_get_i2cm_index+0x1c>
	ASSERT(false);
    71c6:	f240 32ed 	movw	r2, #1005	; 0x3ed
    71ca:	4905      	ldr	r1, [pc, #20]	; (71e0 <_get_i2cm_index+0x24>)
    71cc:	2000      	movs	r0, #0
    71ce:	4b05      	ldr	r3, [pc, #20]	; (71e4 <_get_i2cm_index+0x28>)
    71d0:	4798      	blx	r3
	return -1;
    71d2:	f04f 30ff 	mov.w	r0, #4294967295
}
    71d6:	bd08      	pop	{r3, pc}
			return i;
    71d8:	2000      	movs	r0, #0
    71da:	bd08      	pop	{r3, pc}
    71dc:	00006e2d 	.word	0x00006e2d
    71e0:	0000e224 	.word	0x0000e224
    71e4:	00005f99 	.word	0x00005f99

000071e8 <_i2c_m_sync_init_impl>:
{
    71e8:	b538      	push	{r3, r4, r5, lr}
    71ea:	4605      	mov	r5, r0
    71ec:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    71ee:	4608      	mov	r0, r1
    71f0:	4b34      	ldr	r3, [pc, #208]	; (72c4 <_i2c_m_sync_init_impl+0xdc>)
    71f2:	4798      	blx	r3
    71f4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    71f6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    71f8:	f013 0f01 	tst.w	r3, #1
    71fc:	d123      	bne.n	7246 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    71fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7202:	4a31      	ldr	r2, [pc, #196]	; (72c8 <_i2c_m_sync_init_impl+0xe0>)
    7204:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7208:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    720c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7210:	69e3      	ldr	r3, [r4, #28]
    7212:	f013 0f03 	tst.w	r3, #3
    7216:	d1fb      	bne.n	7210 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7218:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    721a:	f013 0f02 	tst.w	r3, #2
    721e:	d00b      	beq.n	7238 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7220:	6823      	ldr	r3, [r4, #0]
    7222:	f023 0302 	bic.w	r3, r3, #2
    7226:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7228:	69e3      	ldr	r3, [r4, #28]
    722a:	f013 0f03 	tst.w	r3, #3
    722e:	d1fb      	bne.n	7228 <_i2c_m_sync_init_impl+0x40>
    7230:	69e3      	ldr	r3, [r4, #28]
    7232:	f013 0f02 	tst.w	r3, #2
    7236:	d1fb      	bne.n	7230 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7238:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    723c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    723e:	69e3      	ldr	r3, [r4, #28]
    7240:	f013 0f03 	tst.w	r3, #3
    7244:	d1fb      	bne.n	723e <_i2c_m_sync_init_impl+0x56>
    7246:	69e3      	ldr	r3, [r4, #28]
    7248:	f013 0f01 	tst.w	r3, #1
    724c:	d1fb      	bne.n	7246 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    724e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7252:	4a1d      	ldr	r2, [pc, #116]	; (72c8 <_i2c_m_sync_init_impl+0xe0>)
    7254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7258:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    725c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    725e:	69e3      	ldr	r3, [r4, #28]
    7260:	f013 0f03 	tst.w	r3, #3
    7264:	d1fb      	bne.n	725e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7266:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    726a:	4917      	ldr	r1, [pc, #92]	; (72c8 <_i2c_m_sync_init_impl+0xe0>)
    726c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7274:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7276:	69e3      	ldr	r3, [r4, #28]
    7278:	f013 0f04 	tst.w	r3, #4
    727c:	d1fb      	bne.n	7276 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    727e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7282:	4911      	ldr	r1, [pc, #68]	; (72c8 <_i2c_m_sync_init_impl+0xe0>)
    7284:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    728c:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    728e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    7292:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7294:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7296:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    729a:	2b01      	cmp	r3, #1
    729c:	bf94      	ite	ls
    729e:	2300      	movls	r3, #0
    72a0:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    72a2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    72a6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72a8:	69e3      	ldr	r3, [r4, #28]
    72aa:	f013 0f04 	tst.w	r3, #4
    72ae:	d1fb      	bne.n	72a8 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    72b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    72b4:	4b04      	ldr	r3, [pc, #16]	; (72c8 <_i2c_m_sync_init_impl+0xe0>)
    72b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    72ba:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    72be:	81eb      	strh	r3, [r5, #14]
}
    72c0:	2000      	movs	r0, #0
    72c2:	bd38      	pop	{r3, r4, r5, pc}
    72c4:	000071bd 	.word	0x000071bd
    72c8:	0000e150 	.word	0x0000e150

000072cc <_sercom_i2c_m_irq_handler>:
{
    72cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72d0:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    72d2:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    72d4:	7e26      	ldrb	r6, [r4, #24]
    72d6:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    72d8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 7510 <_sercom_i2c_m_irq_handler+0x244>
    72dc:	f240 425f 	movw	r2, #1119	; 0x45f
    72e0:	4641      	mov	r1, r8
    72e2:	3000      	adds	r0, #0
    72e4:	bf18      	it	ne
    72e6:	2001      	movne	r0, #1
    72e8:	4f88      	ldr	r7, [pc, #544]	; (750c <_sercom_i2c_m_irq_handler+0x240>)
    72ea:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    72ec:	6928      	ldr	r0, [r5, #16]
    72ee:	f44f 628c 	mov.w	r2, #1120	; 0x460
    72f2:	4641      	mov	r1, r8
    72f4:	3000      	adds	r0, #0
    72f6:	bf18      	it	ne
    72f8:	2001      	movne	r0, #1
    72fa:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    72fc:	f016 0f80 	tst.w	r6, #128	; 0x80
    7300:	f040 80f4 	bne.w	74ec <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7304:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7306:	69e3      	ldr	r3, [r4, #28]
    7308:	f013 0f04 	tst.w	r3, #4
    730c:	d1fb      	bne.n	7306 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    730e:	8b63      	ldrh	r3, [r4, #26]
    7310:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    7312:	f016 0f01 	tst.w	r6, #1
    7316:	f000 8090 	beq.w	743a <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    731a:	f013 0f02 	tst.w	r3, #2
    731e:	d022      	beq.n	7366 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7320:	2201      	movs	r2, #1
    7322:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    7324:	886a      	ldrh	r2, [r5, #2]
    7326:	b292      	uxth	r2, r2
    7328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    732c:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    732e:	886a      	ldrh	r2, [r5, #2]
    7330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7334:	0412      	lsls	r2, r2, #16
    7336:	0c12      	lsrs	r2, r2, #16
    7338:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    733a:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    733e:	2b00      	cmp	r3, #0
    7340:	bf14      	ite	ne
    7342:	f06f 0104 	mvnne.w	r1, #4
    7346:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    734a:	886b      	ldrh	r3, [r5, #2]
    734c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7350:	041b      	lsls	r3, r3, #16
    7352:	0c1b      	lsrs	r3, r3, #16
    7354:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    7356:	696b      	ldr	r3, [r5, #20]
    7358:	2b00      	cmp	r3, #0
    735a:	f000 80c5 	beq.w	74e8 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    735e:	4628      	mov	r0, r5
    7360:	4798      	blx	r3
    7362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7366:	f013 0f04 	tst.w	r3, #4
    736a:	d124      	bne.n	73b6 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    736c:	886b      	ldrh	r3, [r5, #2]
    736e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7372:	d03e      	beq.n	73f2 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7374:	882b      	ldrh	r3, [r5, #0]
    7376:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7378:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    737c:	69e3      	ldr	r3, [r4, #28]
    737e:	f013 0f04 	tst.w	r3, #4
    7382:	d1fb      	bne.n	737c <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7384:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    738a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    738e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7390:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7392:	69e3      	ldr	r3, [r4, #28]
    7394:	f013 0f04 	tst.w	r3, #4
    7398:	d1fb      	bne.n	7392 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    739a:	886b      	ldrh	r3, [r5, #2]
    739c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    73a0:	041b      	lsls	r3, r3, #16
    73a2:	0c1b      	lsrs	r3, r3, #16
    73a4:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    73a6:	69ab      	ldr	r3, [r5, #24]
    73a8:	2b00      	cmp	r3, #0
    73aa:	f000 8088 	beq.w	74be <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    73ae:	4628      	mov	r0, r5
    73b0:	4798      	blx	r3
    73b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    73b6:	686b      	ldr	r3, [r5, #4]
    73b8:	2b00      	cmp	r3, #0
    73ba:	dd04      	ble.n	73c6 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    73bc:	886b      	ldrh	r3, [r5, #2]
    73be:	b29b      	uxth	r3, r3
    73c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    73c4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    73c6:	886b      	ldrh	r3, [r5, #2]
    73c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    73cc:	d108      	bne.n	73e0 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    73ce:	886b      	ldrh	r3, [r5, #2]
    73d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    73d4:	041b      	lsls	r3, r3, #16
    73d6:	0c1b      	lsrs	r3, r3, #16
    73d8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    73da:	f06f 0101 	mvn.w	r1, #1
    73de:	e7b4      	b.n	734a <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    73e0:	6863      	ldr	r3, [r4, #4]
    73e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    73e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    73e8:	69e3      	ldr	r3, [r4, #28]
    73ea:	f013 0f04 	tst.w	r3, #4
    73ee:	d1fb      	bne.n	73e8 <_sercom_i2c_m_irq_handler+0x11c>
    73f0:	e7ed      	b.n	73ce <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    73f2:	686b      	ldr	r3, [r5, #4]
    73f4:	b99b      	cbnz	r3, 741e <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    73f6:	886b      	ldrh	r3, [r5, #2]
    73f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    73fc:	d106      	bne.n	740c <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    73fe:	886b      	ldrh	r3, [r5, #2]
    7400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7404:	041b      	lsls	r3, r3, #16
    7406:	0c1b      	lsrs	r3, r3, #16
    7408:	806b      	strh	r3, [r5, #2]
    740a:	e7cc      	b.n	73a6 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    740c:	6863      	ldr	r3, [r4, #4]
    740e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    7412:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7414:	69e3      	ldr	r3, [r4, #28]
    7416:	f013 0f04 	tst.w	r3, #4
    741a:	d1fb      	bne.n	7414 <_sercom_i2c_m_irq_handler+0x148>
    741c:	e7ef      	b.n	73fe <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    741e:	68ab      	ldr	r3, [r5, #8]
    7420:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7422:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7424:	69e3      	ldr	r3, [r4, #28]
    7426:	f013 0f04 	tst.w	r3, #4
    742a:	d1fb      	bne.n	7424 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    742c:	68ab      	ldr	r3, [r5, #8]
    742e:	3301      	adds	r3, #1
    7430:	60ab      	str	r3, [r5, #8]
				msg->len--;
    7432:	686b      	ldr	r3, [r5, #4]
    7434:	3b01      	subs	r3, #1
    7436:	606b      	str	r3, [r5, #4]
    7438:	e7b5      	b.n	73a6 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    743a:	f016 0f02 	tst.w	r6, #2
    743e:	d041      	beq.n	74c4 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7440:	686a      	ldr	r2, [r5, #4]
    7442:	2a00      	cmp	r2, #0
    7444:	d036      	beq.n	74b4 <_sercom_i2c_m_irq_handler+0x1e8>
    7446:	f013 0f04 	tst.w	r3, #4
    744a:	d133      	bne.n	74b4 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    744c:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    7450:	3a01      	subs	r2, #1
    7452:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7454:	2a00      	cmp	r2, #0
    7456:	d137      	bne.n	74c8 <_sercom_i2c_m_irq_handler+0x1fc>
    7458:	2900      	cmp	r1, #0
    745a:	d039      	beq.n	74d0 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    745c:	886b      	ldrh	r3, [r5, #2]
    745e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7462:	d116      	bne.n	7492 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    7464:	886b      	ldrh	r3, [r5, #2]
    7466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    746a:	041b      	lsls	r3, r3, #16
    746c:	0c1b      	lsrs	r3, r3, #16
    746e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7470:	68aa      	ldr	r2, [r5, #8]
    7472:	1c53      	adds	r3, r2, #1
    7474:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7476:	69e3      	ldr	r3, [r4, #28]
    7478:	f013 0f04 	tst.w	r3, #4
    747c:	d1fb      	bne.n	7476 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    747e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7480:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7482:	2302      	movs	r3, #2
    7484:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7486:	69eb      	ldr	r3, [r5, #28]
    7488:	b1e3      	cbz	r3, 74c4 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    748a:	4628      	mov	r0, r5
    748c:	4798      	blx	r3
    748e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7492:	6863      	ldr	r3, [r4, #4]
    7494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7498:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    749a:	69e3      	ldr	r3, [r4, #28]
    749c:	f013 0f04 	tst.w	r3, #4
    74a0:	d1fb      	bne.n	749a <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    74a2:	6863      	ldr	r3, [r4, #4]
    74a4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    74a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    74aa:	69e3      	ldr	r3, [r4, #28]
    74ac:	f013 0f04 	tst.w	r3, #4
    74b0:	d1fb      	bne.n	74aa <_sercom_i2c_m_irq_handler+0x1de>
    74b2:	e7d7      	b.n	7464 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    74b4:	2302      	movs	r3, #2
    74b6:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    74b8:	f06f 0101 	mvn.w	r1, #1
    74bc:	e745      	b.n	734a <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    74be:	f016 0f02 	tst.w	r6, #2
    74c2:	d1e0      	bne.n	7486 <_sercom_i2c_m_irq_handler+0x1ba>
    74c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    74c8:	2a01      	cmp	r2, #1
    74ca:	d1d1      	bne.n	7470 <_sercom_i2c_m_irq_handler+0x1a4>
    74cc:	2900      	cmp	r1, #0
    74ce:	d0cf      	beq.n	7470 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    74d0:	6863      	ldr	r3, [r4, #4]
    74d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    74d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    74d8:	69e3      	ldr	r3, [r4, #28]
    74da:	f013 0f04 	tst.w	r3, #4
    74de:	d1fb      	bne.n	74d8 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    74e0:	686b      	ldr	r3, [r5, #4]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d0ba      	beq.n	745c <_sercom_i2c_m_irq_handler+0x190>
    74e6:	e7c3      	b.n	7470 <_sercom_i2c_m_irq_handler+0x1a4>
    74e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    74ec:	886b      	ldrh	r3, [r5, #2]
    74ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    74f2:	041b      	lsls	r3, r3, #16
    74f4:	0c1b      	lsrs	r3, r3, #16
    74f6:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    74f8:	696b      	ldr	r3, [r5, #20]
    74fa:	2b00      	cmp	r3, #0
    74fc:	d0e2      	beq.n	74c4 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    74fe:	f06f 0104 	mvn.w	r1, #4
    7502:	4628      	mov	r0, r5
    7504:	4798      	blx	r3
    7506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    750a:	bf00      	nop
    750c:	00005f99 	.word	0x00005f99
    7510:	0000e224 	.word	0x0000e224

00007514 <_usart_set_parity>:
{
    7514:	b570      	push	{r4, r5, r6, lr}
    7516:	b082      	sub	sp, #8
    7518:	4604      	mov	r4, r0
    751a:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    751c:	69e3      	ldr	r3, [r4, #28]
    751e:	f013 0f03 	tst.w	r3, #3
    7522:	d1fb      	bne.n	751c <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7524:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    7526:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    752a:	6823      	ldr	r3, [r4, #0]
    752c:	f023 0302 	bic.w	r3, r3, #2
    7530:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7532:	69e3      	ldr	r3, [r4, #28]
    7534:	f013 0f03 	tst.w	r3, #3
    7538:	d1fb      	bne.n	7532 <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    753a:	a801      	add	r0, sp, #4
    753c:	4b1a      	ldr	r3, [pc, #104]	; (75a8 <_usart_set_parity+0x94>)
    753e:	4798      	blx	r3
    7540:	69e3      	ldr	r3, [r4, #28]
    7542:	f013 0f02 	tst.w	r3, #2
    7546:	d1fb      	bne.n	7540 <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    7548:	2e02      	cmp	r6, #2
    754a:	d023      	beq.n	7594 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    754c:	6823      	ldr	r3, [r4, #0]
    754e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7552:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7554:	69e3      	ldr	r3, [r4, #28]
    7556:	f013 0f1f 	tst.w	r3, #31
    755a:	d1fb      	bne.n	7554 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    755c:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    755e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    7562:	3600      	adds	r6, #0
    7564:	bf18      	it	ne
    7566:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    7568:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    756c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    756e:	69e3      	ldr	r3, [r4, #28]
    7570:	f013 0f1f 	tst.w	r3, #31
    7574:	d1fb      	bne.n	756e <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    7576:	a801      	add	r0, sp, #4
    7578:	4b0c      	ldr	r3, [pc, #48]	; (75ac <_usart_set_parity+0x98>)
    757a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    757c:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    757e:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    7582:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    7586:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7588:	69e3      	ldr	r3, [r4, #28]
    758a:	f013 0f03 	tst.w	r3, #3
    758e:	d1fb      	bne.n	7588 <_usart_set_parity+0x74>
}
    7590:	b002      	add	sp, #8
    7592:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    7594:	6823      	ldr	r3, [r4, #0]
    7596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    759a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    759c:	69e3      	ldr	r3, [r4, #28]
    759e:	f013 0f1f 	tst.w	r3, #31
    75a2:	d1fb      	bne.n	759c <_usart_set_parity+0x88>
    75a4:	e7da      	b.n	755c <_usart_set_parity+0x48>
    75a6:	bf00      	nop
    75a8:	00004ba5 	.word	0x00004ba5
    75ac:	00004bb3 	.word	0x00004bb3

000075b0 <_usart_sync_init>:
{
    75b0:	b538      	push	{r3, r4, r5, lr}
    75b2:	460c      	mov	r4, r1
	ASSERT(device);
    75b4:	4605      	mov	r5, r0
    75b6:	22c8      	movs	r2, #200	; 0xc8
    75b8:	4905      	ldr	r1, [pc, #20]	; (75d0 <_usart_sync_init+0x20>)
    75ba:	3000      	adds	r0, #0
    75bc:	bf18      	it	ne
    75be:	2001      	movne	r0, #1
    75c0:	4b04      	ldr	r3, [pc, #16]	; (75d4 <_usart_sync_init+0x24>)
    75c2:	4798      	blx	r3
	device->hw = hw;
    75c4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    75c6:	4620      	mov	r0, r4
    75c8:	4b03      	ldr	r3, [pc, #12]	; (75d8 <_usart_sync_init+0x28>)
    75ca:	4798      	blx	r3
}
    75cc:	bd38      	pop	{r3, r4, r5, pc}
    75ce:	bf00      	nop
    75d0:	0000e224 	.word	0x0000e224
    75d4:	00005f99 	.word	0x00005f99
    75d8:	00007085 	.word	0x00007085

000075dc <_usart_async_init>:
{
    75dc:	b570      	push	{r4, r5, r6, lr}
    75de:	460d      	mov	r5, r1
	ASSERT(device);
    75e0:	4606      	mov	r6, r0
    75e2:	22d6      	movs	r2, #214	; 0xd6
    75e4:	4917      	ldr	r1, [pc, #92]	; (7644 <_usart_async_init+0x68>)
    75e6:	3000      	adds	r0, #0
    75e8:	bf18      	it	ne
    75ea:	2001      	movne	r0, #1
    75ec:	4b16      	ldr	r3, [pc, #88]	; (7648 <_usart_async_init+0x6c>)
    75ee:	4798      	blx	r3
	init_status = _usart_init(hw);
    75f0:	4628      	mov	r0, r5
    75f2:	4b16      	ldr	r3, [pc, #88]	; (764c <_usart_async_init+0x70>)
    75f4:	4798      	blx	r3
	if (init_status) {
    75f6:	4604      	mov	r4, r0
    75f8:	b108      	cbz	r0, 75fe <_usart_async_init+0x22>
}
    75fa:	4620      	mov	r0, r4
    75fc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    75fe:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7600:	4631      	mov	r1, r6
    7602:	4628      	mov	r0, r5
    7604:	4b12      	ldr	r3, [pc, #72]	; (7650 <_usart_async_init+0x74>)
    7606:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7608:	4628      	mov	r0, r5
    760a:	4b12      	ldr	r3, [pc, #72]	; (7654 <_usart_async_init+0x78>)
    760c:	4798      	blx	r3
    760e:	1d01      	adds	r1, r0, #4
    7610:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7612:	2501      	movs	r5, #1
    7614:	f000 021f 	and.w	r2, r0, #31
    7618:	fa05 f202 	lsl.w	r2, r5, r2
    761c:	0943      	lsrs	r3, r0, #5
    761e:	009b      	lsls	r3, r3, #2
    7620:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7624:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    762c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7630:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7634:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7638:	601a      	str	r2, [r3, #0]
		irq++;
    763a:	3001      	adds	r0, #1
    763c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    763e:	4281      	cmp	r1, r0
    7640:	d1e8      	bne.n	7614 <_usart_async_init+0x38>
    7642:	e7da      	b.n	75fa <_usart_async_init+0x1e>
    7644:	0000e224 	.word	0x0000e224
    7648:	00005f99 	.word	0x00005f99
    764c:	00007085 	.word	0x00007085
    7650:	00006ee1 	.word	0x00006ee1
    7654:	00006f41 	.word	0x00006f41

00007658 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7658:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    765a:	6813      	ldr	r3, [r2, #0]
    765c:	f043 0302 	orr.w	r3, r3, #2
    7660:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7662:	69d3      	ldr	r3, [r2, #28]
    7664:	f013 0f03 	tst.w	r3, #3
    7668:	d1fb      	bne.n	7662 <_usart_sync_enable+0xa>
}
    766a:	4770      	bx	lr

0000766c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    766c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    766e:	6813      	ldr	r3, [r2, #0]
    7670:	f043 0302 	orr.w	r3, r3, #2
    7674:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7676:	69d3      	ldr	r3, [r2, #28]
    7678:	f013 0f03 	tst.w	r3, #3
    767c:	d1fb      	bne.n	7676 <_usart_async_enable+0xa>
}
    767e:	4770      	bx	lr

00007680 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    7680:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7682:	6813      	ldr	r3, [r2, #0]
    7684:	f023 0302 	bic.w	r3, r3, #2
    7688:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    768a:	69d3      	ldr	r3, [r2, #28]
    768c:	f013 0f03 	tst.w	r3, #3
    7690:	d1fb      	bne.n	768a <_usart_async_disable+0xa>
}
    7692:	4770      	bx	lr

00007694 <_usart_async_set_parity>:
{
    7694:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    7696:	6980      	ldr	r0, [r0, #24]
    7698:	4b01      	ldr	r3, [pc, #4]	; (76a0 <_usart_async_set_parity+0xc>)
    769a:	4798      	blx	r3
    769c:	bd08      	pop	{r3, pc}
    769e:	bf00      	nop
    76a0:	00007515 	.word	0x00007515

000076a4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    76a4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    76a6:	6299      	str	r1, [r3, #40]	; 0x28
    76a8:	4770      	bx	lr

000076aa <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    76aa:	6983      	ldr	r3, [r0, #24]
    76ac:	6299      	str	r1, [r3, #40]	; 0x28
    76ae:	4770      	bx	lr

000076b0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    76b0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    76b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    76b4:	b2c0      	uxtb	r0, r0
    76b6:	4770      	bx	lr

000076b8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    76b8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    76ba:	7e18      	ldrb	r0, [r3, #24]
}
    76bc:	f000 0001 	and.w	r0, r0, #1
    76c0:	4770      	bx	lr

000076c2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    76c2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    76c4:	7e18      	ldrb	r0, [r3, #24]
}
    76c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    76ca:	4770      	bx	lr

000076cc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    76cc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    76ce:	7e18      	ldrb	r0, [r3, #24]
}
    76d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    76d4:	4770      	bx	lr

000076d6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    76d6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    76d8:	2201      	movs	r2, #1
    76da:	759a      	strb	r2, [r3, #22]
    76dc:	4770      	bx	lr

000076de <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    76de:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    76e0:	2202      	movs	r2, #2
    76e2:	759a      	strb	r2, [r3, #22]
    76e4:	4770      	bx	lr
	...

000076e8 <_usart_async_set_irq_state>:
{
    76e8:	b570      	push	{r4, r5, r6, lr}
    76ea:	460c      	mov	r4, r1
    76ec:	4616      	mov	r6, r2
	ASSERT(device);
    76ee:	4605      	mov	r5, r0
    76f0:	f240 2236 	movw	r2, #566	; 0x236
    76f4:	4915      	ldr	r1, [pc, #84]	; (774c <_usart_async_set_irq_state+0x64>)
    76f6:	3000      	adds	r0, #0
    76f8:	bf18      	it	ne
    76fa:	2001      	movne	r0, #1
    76fc:	4b14      	ldr	r3, [pc, #80]	; (7750 <_usart_async_set_irq_state+0x68>)
    76fe:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    7700:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    7704:	d10d      	bne.n	7722 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    7706:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7708:	b92e      	cbnz	r6, 7716 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    770a:	2201      	movs	r2, #1
    770c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    770e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7710:	2202      	movs	r2, #2
    7712:	751a      	strb	r2, [r3, #20]
    7714:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7716:	2201      	movs	r2, #1
    7718:	759a      	strb	r2, [r3, #22]
    771a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    771c:	2202      	movs	r2, #2
    771e:	759a      	strb	r2, [r3, #22]
    7720:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    7722:	2c01      	cmp	r4, #1
    7724:	d002      	beq.n	772c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    7726:	2c03      	cmp	r4, #3
    7728:	d008      	beq.n	773c <_usart_async_set_irq_state+0x54>
    772a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    772c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    772e:	b916      	cbnz	r6, 7736 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    7730:	2204      	movs	r2, #4
    7732:	751a      	strb	r2, [r3, #20]
    7734:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    7736:	2204      	movs	r2, #4
    7738:	759a      	strb	r2, [r3, #22]
    773a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    773c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    773e:	b116      	cbz	r6, 7746 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7740:	2280      	movs	r2, #128	; 0x80
    7742:	759a      	strb	r2, [r3, #22]
}
    7744:	e7f1      	b.n	772a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    7746:	2280      	movs	r2, #128	; 0x80
    7748:	751a      	strb	r2, [r3, #20]
    774a:	bd70      	pop	{r4, r5, r6, pc}
    774c:	0000e224 	.word	0x0000e224
    7750:	00005f99 	.word	0x00005f99

00007754 <_i2c_m_async_init>:
{
    7754:	b570      	push	{r4, r5, r6, lr}
    7756:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7758:	4606      	mov	r6, r0
    775a:	f240 42d2 	movw	r2, #1234	; 0x4d2
    775e:	4918      	ldr	r1, [pc, #96]	; (77c0 <_i2c_m_async_init+0x6c>)
    7760:	3000      	adds	r0, #0
    7762:	bf18      	it	ne
    7764:	2001      	movne	r0, #1
    7766:	4b17      	ldr	r3, [pc, #92]	; (77c4 <_i2c_m_async_init+0x70>)
    7768:	4798      	blx	r3
	i2c_dev->hw = hw;
    776a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    776c:	4629      	mov	r1, r5
    776e:	4630      	mov	r0, r6
    7770:	4b15      	ldr	r3, [pc, #84]	; (77c8 <_i2c_m_async_init+0x74>)
    7772:	4798      	blx	r3
	if (init_status) {
    7774:	4604      	mov	r4, r0
    7776:	b108      	cbz	r0, 777c <_i2c_m_async_init+0x28>
}
    7778:	4620      	mov	r0, r4
    777a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    777c:	4631      	mov	r1, r6
    777e:	4628      	mov	r0, r5
    7780:	4b12      	ldr	r3, [pc, #72]	; (77cc <_i2c_m_async_init+0x78>)
    7782:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7784:	4628      	mov	r0, r5
    7786:	4b12      	ldr	r3, [pc, #72]	; (77d0 <_i2c_m_async_init+0x7c>)
    7788:	4798      	blx	r3
    778a:	1d01      	adds	r1, r0, #4
    778c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    778e:	2501      	movs	r5, #1
    7790:	f000 021f 	and.w	r2, r0, #31
    7794:	fa05 f202 	lsl.w	r2, r5, r2
    7798:	0943      	lsrs	r3, r0, #5
    779a:	009b      	lsls	r3, r3, #2
    779c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    77a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    77a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    77a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    77ac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77b4:	601a      	str	r2, [r3, #0]
		irq++;
    77b6:	3001      	adds	r0, #1
    77b8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    77ba:	4281      	cmp	r1, r0
    77bc:	d1e8      	bne.n	7790 <_i2c_m_async_init+0x3c>
    77be:	e7db      	b.n	7778 <_i2c_m_async_init+0x24>
    77c0:	0000e224 	.word	0x0000e224
    77c4:	00005f99 	.word	0x00005f99
    77c8:	000071e9 	.word	0x000071e9
    77cc:	00006ee1 	.word	0x00006ee1
    77d0:	00006f41 	.word	0x00006f41

000077d4 <_i2c_m_async_transfer>:
{
    77d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77d8:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    77da:	4605      	mov	r5, r0
    77dc:	f110 0800 	adds.w	r8, r0, #0
    77e0:	bf18      	it	ne
    77e2:	f04f 0801 	movne.w	r8, #1
    77e6:	4f45      	ldr	r7, [pc, #276]	; (78fc <_i2c_m_async_transfer+0x128>)
    77e8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    77ec:	4639      	mov	r1, r7
    77ee:	4640      	mov	r0, r8
    77f0:	4e43      	ldr	r6, [pc, #268]	; (7900 <_i2c_m_async_transfer+0x12c>)
    77f2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    77f4:	6928      	ldr	r0, [r5, #16]
    77f6:	f240 5229 	movw	r2, #1321	; 0x529
    77fa:	4639      	mov	r1, r7
    77fc:	3000      	adds	r0, #0
    77fe:	bf18      	it	ne
    7800:	2001      	movne	r0, #1
    7802:	47b0      	blx	r6
	ASSERT(msg);
    7804:	f240 522a 	movw	r2, #1322	; 0x52a
    7808:	4639      	mov	r1, r7
    780a:	1c20      	adds	r0, r4, #0
    780c:	bf18      	it	ne
    780e:	2001      	movne	r0, #1
    7810:	47b0      	blx	r6
	if (msg->len == 0) {
    7812:	6860      	ldr	r0, [r4, #4]
    7814:	2800      	cmp	r0, #0
    7816:	d06f      	beq.n	78f8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7818:	886b      	ldrh	r3, [r5, #2]
    781a:	f413 7f80 	tst.w	r3, #256	; 0x100
    781e:	d169      	bne.n	78f4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    7820:	8863      	ldrh	r3, [r4, #2]
    7822:	b29b      	uxth	r3, r3
    7824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7828:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    782a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    782e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7832:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7834:	6853      	ldr	r3, [r2, #4]
    7836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    783a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    783c:	69d3      	ldr	r3, [r2, #28]
    783e:	f013 0f04 	tst.w	r3, #4
    7842:	d1fb      	bne.n	783c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7844:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7846:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    7848:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    784c:	492b      	ldr	r1, [pc, #172]	; (78fc <_i2c_m_async_transfer+0x128>)
    784e:	4640      	mov	r0, r8
    7850:	4b2b      	ldr	r3, [pc, #172]	; (7900 <_i2c_m_async_transfer+0x12c>)
    7852:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7854:	686b      	ldr	r3, [r5, #4]
    7856:	2b01      	cmp	r3, #1
    7858:	d02a      	beq.n	78b0 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    785a:	6863      	ldr	r3, [r4, #4]
    785c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7860:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7862:	69e3      	ldr	r3, [r4, #28]
    7864:	f013 0f04 	tst.w	r3, #4
    7868:	d1fb      	bne.n	7862 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    786a:	882b      	ldrh	r3, [r5, #0]
    786c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7870:	d02a      	beq.n	78c8 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7872:	886a      	ldrh	r2, [r5, #2]
    7874:	f012 0f01 	tst.w	r2, #1
    7878:	d004      	beq.n	7884 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    787a:	886a      	ldrh	r2, [r5, #2]
    787c:	b292      	uxth	r2, r2
    787e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7882:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7884:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7888:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    788c:	69e3      	ldr	r3, [r4, #28]
    788e:	f013 0f04 	tst.w	r3, #4
    7892:	d1fb      	bne.n	788c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7894:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    789e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    78a0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78a2:	69e3      	ldr	r3, [r4, #28]
    78a4:	f013 0f04 	tst.w	r3, #4
    78a8:	d1fb      	bne.n	78a2 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    78aa:	2000      	movs	r0, #0
    78ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    78b0:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    78b4:	d0d1      	beq.n	785a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    78b6:	6863      	ldr	r3, [r4, #4]
    78b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    78bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78be:	69e3      	ldr	r3, [r4, #28]
    78c0:	f013 0f04 	tst.w	r3, #4
    78c4:	d1fb      	bne.n	78be <_i2c_m_async_transfer+0xea>
    78c6:	e7d0      	b.n	786a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    78c8:	8869      	ldrh	r1, [r5, #2]
    78ca:	005a      	lsls	r2, r3, #1
    78cc:	b2d2      	uxtb	r2, r2
    78ce:	f001 0301 	and.w	r3, r1, #1
    78d2:	431a      	orrs	r2, r3
    78d4:	69e3      	ldr	r3, [r4, #28]
    78d6:	f013 0f04 	tst.w	r3, #4
    78da:	d1fb      	bne.n	78d4 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    78dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    78de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    78e2:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    78e4:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78e6:	69e3      	ldr	r3, [r4, #28]
    78e8:	f013 0f04 	tst.w	r3, #4
    78ec:	d1fb      	bne.n	78e6 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    78ee:	2000      	movs	r0, #0
    78f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    78f4:	f06f 0003 	mvn.w	r0, #3
}
    78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78fc:	0000e224 	.word	0x0000e224
    7900:	00005f99 	.word	0x00005f99

00007904 <_i2c_m_async_register_callback>:
	switch (type) {
    7904:	2901      	cmp	r1, #1
    7906:	d006      	beq.n	7916 <_i2c_m_async_register_callback+0x12>
    7908:	b119      	cbz	r1, 7912 <_i2c_m_async_register_callback+0xe>
    790a:	2902      	cmp	r1, #2
    790c:	d005      	beq.n	791a <_i2c_m_async_register_callback+0x16>
}
    790e:	2000      	movs	r0, #0
    7910:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7912:	6142      	str	r2, [r0, #20]
		break;
    7914:	e7fb      	b.n	790e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7916:	6182      	str	r2, [r0, #24]
		break;
    7918:	e7f9      	b.n	790e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    791a:	61c2      	str	r2, [r0, #28]
		break;
    791c:	e7f7      	b.n	790e <_i2c_m_async_register_callback+0xa>
	...

00007920 <SERCOM0_0_Handler>:
{
    7920:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7922:	4b02      	ldr	r3, [pc, #8]	; (792c <SERCOM0_0_Handler+0xc>)
    7924:	6818      	ldr	r0, [r3, #0]
    7926:	4b02      	ldr	r3, [pc, #8]	; (7930 <SERCOM0_0_Handler+0x10>)
    7928:	4798      	blx	r3
    792a:	bd08      	pop	{r3, pc}
    792c:	20000980 	.word	0x20000980
    7930:	00006e71 	.word	0x00006e71

00007934 <SERCOM0_1_Handler>:
{
    7934:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7936:	4b02      	ldr	r3, [pc, #8]	; (7940 <SERCOM0_1_Handler+0xc>)
    7938:	6818      	ldr	r0, [r3, #0]
    793a:	4b02      	ldr	r3, [pc, #8]	; (7944 <SERCOM0_1_Handler+0x10>)
    793c:	4798      	blx	r3
    793e:	bd08      	pop	{r3, pc}
    7940:	20000980 	.word	0x20000980
    7944:	00006e71 	.word	0x00006e71

00007948 <SERCOM0_2_Handler>:
{
    7948:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    794a:	4b02      	ldr	r3, [pc, #8]	; (7954 <SERCOM0_2_Handler+0xc>)
    794c:	6818      	ldr	r0, [r3, #0]
    794e:	4b02      	ldr	r3, [pc, #8]	; (7958 <SERCOM0_2_Handler+0x10>)
    7950:	4798      	blx	r3
    7952:	bd08      	pop	{r3, pc}
    7954:	20000980 	.word	0x20000980
    7958:	00006e71 	.word	0x00006e71

0000795c <SERCOM0_3_Handler>:
{
    795c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    795e:	4b02      	ldr	r3, [pc, #8]	; (7968 <SERCOM0_3_Handler+0xc>)
    7960:	6818      	ldr	r0, [r3, #0]
    7962:	4b02      	ldr	r3, [pc, #8]	; (796c <SERCOM0_3_Handler+0x10>)
    7964:	4798      	blx	r3
    7966:	bd08      	pop	{r3, pc}
    7968:	20000980 	.word	0x20000980
    796c:	00006e71 	.word	0x00006e71

00007970 <SERCOM1_0_Handler>:
{
    7970:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7972:	4b02      	ldr	r3, [pc, #8]	; (797c <SERCOM1_0_Handler+0xc>)
    7974:	6858      	ldr	r0, [r3, #4]
    7976:	4b02      	ldr	r3, [pc, #8]	; (7980 <SERCOM1_0_Handler+0x10>)
    7978:	4798      	blx	r3
    797a:	bd08      	pop	{r3, pc}
    797c:	20000980 	.word	0x20000980
    7980:	00006e71 	.word	0x00006e71

00007984 <SERCOM1_1_Handler>:
{
    7984:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7986:	4b02      	ldr	r3, [pc, #8]	; (7990 <SERCOM1_1_Handler+0xc>)
    7988:	6858      	ldr	r0, [r3, #4]
    798a:	4b02      	ldr	r3, [pc, #8]	; (7994 <SERCOM1_1_Handler+0x10>)
    798c:	4798      	blx	r3
    798e:	bd08      	pop	{r3, pc}
    7990:	20000980 	.word	0x20000980
    7994:	00006e71 	.word	0x00006e71

00007998 <SERCOM1_2_Handler>:
{
    7998:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    799a:	4b02      	ldr	r3, [pc, #8]	; (79a4 <SERCOM1_2_Handler+0xc>)
    799c:	6858      	ldr	r0, [r3, #4]
    799e:	4b02      	ldr	r3, [pc, #8]	; (79a8 <SERCOM1_2_Handler+0x10>)
    79a0:	4798      	blx	r3
    79a2:	bd08      	pop	{r3, pc}
    79a4:	20000980 	.word	0x20000980
    79a8:	00006e71 	.word	0x00006e71

000079ac <SERCOM1_3_Handler>:
{
    79ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    79ae:	4b02      	ldr	r3, [pc, #8]	; (79b8 <SERCOM1_3_Handler+0xc>)
    79b0:	6858      	ldr	r0, [r3, #4]
    79b2:	4b02      	ldr	r3, [pc, #8]	; (79bc <SERCOM1_3_Handler+0x10>)
    79b4:	4798      	blx	r3
    79b6:	bd08      	pop	{r3, pc}
    79b8:	20000980 	.word	0x20000980
    79bc:	00006e71 	.word	0x00006e71

000079c0 <SERCOM3_0_Handler>:
{
    79c0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    79c2:	4b02      	ldr	r3, [pc, #8]	; (79cc <SERCOM3_0_Handler+0xc>)
    79c4:	6898      	ldr	r0, [r3, #8]
    79c6:	4b02      	ldr	r3, [pc, #8]	; (79d0 <SERCOM3_0_Handler+0x10>)
    79c8:	4798      	blx	r3
    79ca:	bd08      	pop	{r3, pc}
    79cc:	20000980 	.word	0x20000980
    79d0:	00006feb 	.word	0x00006feb

000079d4 <SERCOM3_1_Handler>:
{
    79d4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    79d6:	4b02      	ldr	r3, [pc, #8]	; (79e0 <SERCOM3_1_Handler+0xc>)
    79d8:	6898      	ldr	r0, [r3, #8]
    79da:	4b02      	ldr	r3, [pc, #8]	; (79e4 <SERCOM3_1_Handler+0x10>)
    79dc:	4798      	blx	r3
    79de:	bd08      	pop	{r3, pc}
    79e0:	20000980 	.word	0x20000980
    79e4:	00006feb 	.word	0x00006feb

000079e8 <SERCOM3_2_Handler>:
{
    79e8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    79ea:	4b02      	ldr	r3, [pc, #8]	; (79f4 <SERCOM3_2_Handler+0xc>)
    79ec:	6898      	ldr	r0, [r3, #8]
    79ee:	4b02      	ldr	r3, [pc, #8]	; (79f8 <SERCOM3_2_Handler+0x10>)
    79f0:	4798      	blx	r3
    79f2:	bd08      	pop	{r3, pc}
    79f4:	20000980 	.word	0x20000980
    79f8:	00006feb 	.word	0x00006feb

000079fc <SERCOM3_3_Handler>:
{
    79fc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    79fe:	4b02      	ldr	r3, [pc, #8]	; (7a08 <SERCOM3_3_Handler+0xc>)
    7a00:	6898      	ldr	r0, [r3, #8]
    7a02:	4b02      	ldr	r3, [pc, #8]	; (7a0c <SERCOM3_3_Handler+0x10>)
    7a04:	4798      	blx	r3
    7a06:	bd08      	pop	{r3, pc}
    7a08:	20000980 	.word	0x20000980
    7a0c:	00006feb 	.word	0x00006feb

00007a10 <SERCOM4_0_Handler>:
{
    7a10:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7a12:	4b02      	ldr	r3, [pc, #8]	; (7a1c <SERCOM4_0_Handler+0xc>)
    7a14:	68d8      	ldr	r0, [r3, #12]
    7a16:	4b02      	ldr	r3, [pc, #8]	; (7a20 <SERCOM4_0_Handler+0x10>)
    7a18:	4798      	blx	r3
    7a1a:	bd08      	pop	{r3, pc}
    7a1c:	20000980 	.word	0x20000980
    7a20:	00006e71 	.word	0x00006e71

00007a24 <SERCOM4_1_Handler>:
{
    7a24:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7a26:	4b02      	ldr	r3, [pc, #8]	; (7a30 <SERCOM4_1_Handler+0xc>)
    7a28:	68d8      	ldr	r0, [r3, #12]
    7a2a:	4b02      	ldr	r3, [pc, #8]	; (7a34 <SERCOM4_1_Handler+0x10>)
    7a2c:	4798      	blx	r3
    7a2e:	bd08      	pop	{r3, pc}
    7a30:	20000980 	.word	0x20000980
    7a34:	00006e71 	.word	0x00006e71

00007a38 <SERCOM4_2_Handler>:
{
    7a38:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7a3a:	4b02      	ldr	r3, [pc, #8]	; (7a44 <SERCOM4_2_Handler+0xc>)
    7a3c:	68d8      	ldr	r0, [r3, #12]
    7a3e:	4b02      	ldr	r3, [pc, #8]	; (7a48 <SERCOM4_2_Handler+0x10>)
    7a40:	4798      	blx	r3
    7a42:	bd08      	pop	{r3, pc}
    7a44:	20000980 	.word	0x20000980
    7a48:	00006e71 	.word	0x00006e71

00007a4c <SERCOM4_3_Handler>:
{
    7a4c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7a4e:	4b02      	ldr	r3, [pc, #8]	; (7a58 <SERCOM4_3_Handler+0xc>)
    7a50:	68d8      	ldr	r0, [r3, #12]
    7a52:	4b02      	ldr	r3, [pc, #8]	; (7a5c <SERCOM4_3_Handler+0x10>)
    7a54:	4798      	blx	r3
    7a56:	bd08      	pop	{r3, pc}
    7a58:	20000980 	.word	0x20000980
    7a5c:	00006e71 	.word	0x00006e71

00007a60 <SERCOM5_0_Handler>:
{
    7a60:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7a62:	4b02      	ldr	r3, [pc, #8]	; (7a6c <SERCOM5_0_Handler+0xc>)
    7a64:	6918      	ldr	r0, [r3, #16]
    7a66:	4b02      	ldr	r3, [pc, #8]	; (7a70 <SERCOM5_0_Handler+0x10>)
    7a68:	4798      	blx	r3
    7a6a:	bd08      	pop	{r3, pc}
    7a6c:	20000980 	.word	0x20000980
    7a70:	000072cd 	.word	0x000072cd

00007a74 <SERCOM5_1_Handler>:
{
    7a74:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7a76:	4b02      	ldr	r3, [pc, #8]	; (7a80 <SERCOM5_1_Handler+0xc>)
    7a78:	6918      	ldr	r0, [r3, #16]
    7a7a:	4b02      	ldr	r3, [pc, #8]	; (7a84 <SERCOM5_1_Handler+0x10>)
    7a7c:	4798      	blx	r3
    7a7e:	bd08      	pop	{r3, pc}
    7a80:	20000980 	.word	0x20000980
    7a84:	000072cd 	.word	0x000072cd

00007a88 <SERCOM5_2_Handler>:
{
    7a88:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7a8a:	4b02      	ldr	r3, [pc, #8]	; (7a94 <SERCOM5_2_Handler+0xc>)
    7a8c:	6918      	ldr	r0, [r3, #16]
    7a8e:	4b02      	ldr	r3, [pc, #8]	; (7a98 <SERCOM5_2_Handler+0x10>)
    7a90:	4798      	blx	r3
    7a92:	bd08      	pop	{r3, pc}
    7a94:	20000980 	.word	0x20000980
    7a98:	000072cd 	.word	0x000072cd

00007a9c <SERCOM5_3_Handler>:
{
    7a9c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7a9e:	4b02      	ldr	r3, [pc, #8]	; (7aa8 <SERCOM5_3_Handler+0xc>)
    7aa0:	6918      	ldr	r0, [r3, #16]
    7aa2:	4b02      	ldr	r3, [pc, #8]	; (7aac <SERCOM5_3_Handler+0x10>)
    7aa4:	4798      	blx	r3
    7aa6:	bd08      	pop	{r3, pc}
    7aa8:	20000980 	.word	0x20000980
    7aac:	000072cd 	.word	0x000072cd

00007ab0 <SERCOM6_0_Handler>:
{
    7ab0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7ab2:	4b02      	ldr	r3, [pc, #8]	; (7abc <SERCOM6_0_Handler+0xc>)
    7ab4:	6958      	ldr	r0, [r3, #20]
    7ab6:	4b02      	ldr	r3, [pc, #8]	; (7ac0 <SERCOM6_0_Handler+0x10>)
    7ab8:	4798      	blx	r3
    7aba:	bd08      	pop	{r3, pc}
    7abc:	20000980 	.word	0x20000980
    7ac0:	00006e71 	.word	0x00006e71

00007ac4 <SERCOM6_1_Handler>:
{
    7ac4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7ac6:	4b02      	ldr	r3, [pc, #8]	; (7ad0 <SERCOM6_1_Handler+0xc>)
    7ac8:	6958      	ldr	r0, [r3, #20]
    7aca:	4b02      	ldr	r3, [pc, #8]	; (7ad4 <SERCOM6_1_Handler+0x10>)
    7acc:	4798      	blx	r3
    7ace:	bd08      	pop	{r3, pc}
    7ad0:	20000980 	.word	0x20000980
    7ad4:	00006e71 	.word	0x00006e71

00007ad8 <SERCOM6_2_Handler>:
{
    7ad8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7ada:	4b02      	ldr	r3, [pc, #8]	; (7ae4 <SERCOM6_2_Handler+0xc>)
    7adc:	6958      	ldr	r0, [r3, #20]
    7ade:	4b02      	ldr	r3, [pc, #8]	; (7ae8 <SERCOM6_2_Handler+0x10>)
    7ae0:	4798      	blx	r3
    7ae2:	bd08      	pop	{r3, pc}
    7ae4:	20000980 	.word	0x20000980
    7ae8:	00006e71 	.word	0x00006e71

00007aec <SERCOM6_3_Handler>:
{
    7aec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7aee:	4b02      	ldr	r3, [pc, #8]	; (7af8 <SERCOM6_3_Handler+0xc>)
    7af0:	6958      	ldr	r0, [r3, #20]
    7af2:	4b02      	ldr	r3, [pc, #8]	; (7afc <SERCOM6_3_Handler+0x10>)
    7af4:	4798      	blx	r3
    7af6:	bd08      	pop	{r3, pc}
    7af8:	20000980 	.word	0x20000980
    7afc:	00006e71 	.word	0x00006e71

00007b00 <_spi_m_sync_init>:
{
    7b00:	b570      	push	{r4, r5, r6, lr}
    7b02:	4606      	mov	r6, r0
    7b04:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7b06:	4608      	mov	r0, r1
    7b08:	4b5d      	ldr	r3, [pc, #372]	; (7c80 <_spi_m_sync_init+0x180>)
    7b0a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7b0c:	2803      	cmp	r0, #3
    7b0e:	d00c      	beq.n	7b2a <_spi_m_sync_init+0x2a>
    7b10:	2807      	cmp	r0, #7
    7b12:	bf08      	it	eq
    7b14:	2301      	moveq	r3, #1
    7b16:	d009      	beq.n	7b2c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    7b18:	2e00      	cmp	r6, #0
    7b1a:	f000 809f 	beq.w	7c5c <_spi_m_sync_init+0x15c>
    7b1e:	2c00      	cmp	r4, #0
    7b20:	f040 80a5 	bne.w	7c6e <_spi_m_sync_init+0x16e>
	return NULL;
    7b24:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7b26:	2000      	movs	r0, #0
    7b28:	e009      	b.n	7b3e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    7b2a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7b2c:	4d55      	ldr	r5, [pc, #340]	; (7c84 <_spi_m_sync_init+0x184>)
    7b2e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7b32:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7b34:	2e00      	cmp	r6, #0
    7b36:	d0f6      	beq.n	7b26 <_spi_m_sync_init+0x26>
    7b38:	2001      	movs	r0, #1
    7b3a:	2c00      	cmp	r4, #0
    7b3c:	d0f3      	beq.n	7b26 <_spi_m_sync_init+0x26>
    7b3e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7b42:	4951      	ldr	r1, [pc, #324]	; (7c88 <_spi_m_sync_init+0x188>)
    7b44:	4b51      	ldr	r3, [pc, #324]	; (7c8c <_spi_m_sync_init+0x18c>)
    7b46:	4798      	blx	r3
	if (regs == NULL) {
    7b48:	2d00      	cmp	r5, #0
    7b4a:	f000 8084 	beq.w	7c56 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7b4e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7b50:	f013 0f01 	tst.w	r3, #1
    7b54:	d11d      	bne.n	7b92 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7b56:	682b      	ldr	r3, [r5, #0]
    7b58:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b5c:	69e3      	ldr	r3, [r4, #28]
    7b5e:	f013 0f03 	tst.w	r3, #3
    7b62:	d1fb      	bne.n	7b5c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7b64:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7b66:	f013 0f02 	tst.w	r3, #2
    7b6a:	d00b      	beq.n	7b84 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7b6c:	6823      	ldr	r3, [r4, #0]
    7b6e:	f023 0302 	bic.w	r3, r3, #2
    7b72:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b74:	69e3      	ldr	r3, [r4, #28]
    7b76:	f013 0f03 	tst.w	r3, #3
    7b7a:	d1fb      	bne.n	7b74 <_spi_m_sync_init+0x74>
    7b7c:	69e3      	ldr	r3, [r4, #28]
    7b7e:	f013 0f02 	tst.w	r3, #2
    7b82:	d1fb      	bne.n	7b7c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7b84:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7b88:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b8a:	69e3      	ldr	r3, [r4, #28]
    7b8c:	f013 0f03 	tst.w	r3, #3
    7b90:	d1fb      	bne.n	7b8a <_spi_m_sync_init+0x8a>
    7b92:	69e3      	ldr	r3, [r4, #28]
    7b94:	f013 0f01 	tst.w	r3, #1
    7b98:	d1fb      	bne.n	7b92 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    7b9a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7b9c:	682b      	ldr	r3, [r5, #0]
    7b9e:	f003 031c 	and.w	r3, r3, #28
    7ba2:	2b08      	cmp	r3, #8
    7ba4:	d02e      	beq.n	7c04 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7ba6:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7baa:	4937      	ldr	r1, [pc, #220]	; (7c88 <_spi_m_sync_init+0x188>)
    7bac:	1c20      	adds	r0, r4, #0
    7bae:	bf18      	it	ne
    7bb0:	2001      	movne	r0, #1
    7bb2:	4b36      	ldr	r3, [pc, #216]	; (7c8c <_spi_m_sync_init+0x18c>)
    7bb4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7bb6:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7bbc:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7bc0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7bc2:	69e3      	ldr	r3, [r4, #28]
    7bc4:	f013 0f03 	tst.w	r3, #3
    7bc8:	d1fb      	bne.n	7bc2 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    7bca:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7bcc:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7bd0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7bd8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7bda:	69e3      	ldr	r3, [r4, #28]
    7bdc:	f013 0f17 	tst.w	r3, #23
    7be0:	d1fb      	bne.n	7bda <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7be2:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7be4:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7be6:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7be8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7bec:	686b      	ldr	r3, [r5, #4]
    7bee:	f003 0307 	and.w	r3, r3, #7
    7bf2:	2b00      	cmp	r3, #0
    7bf4:	bf0c      	ite	eq
    7bf6:	2301      	moveq	r3, #1
    7bf8:	2302      	movne	r3, #2
    7bfa:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    7bfc:	89eb      	ldrh	r3, [r5, #14]
    7bfe:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7c00:	2000      	movs	r0, #0
    7c02:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7c04:	f640 1284 	movw	r2, #2436	; 0x984
    7c08:	491f      	ldr	r1, [pc, #124]	; (7c88 <_spi_m_sync_init+0x188>)
    7c0a:	1c20      	adds	r0, r4, #0
    7c0c:	bf18      	it	ne
    7c0e:	2001      	movne	r0, #1
    7c10:	4b1e      	ldr	r3, [pc, #120]	; (7c8c <_spi_m_sync_init+0x18c>)
    7c12:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7c14:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7c16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7c1a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7c1e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7c20:	69e3      	ldr	r3, [r4, #28]
    7c22:	f013 0f03 	tst.w	r3, #3
    7c26:	d1fb      	bne.n	7c20 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7c28:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7c2a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7c2e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7c36:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7c3a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7c3c:	69e3      	ldr	r3, [r4, #28]
    7c3e:	f013 0f17 	tst.w	r3, #23
    7c42:	d1fb      	bne.n	7c3c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7c44:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7c46:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7c48:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7c4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7c4e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7c50:	2b00      	cmp	r3, #0
    7c52:	d1fc      	bne.n	7c4e <_spi_m_sync_init+0x14e>
    7c54:	e7ca      	b.n	7bec <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7c56:	f06f 000c 	mvn.w	r0, #12
    7c5a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7c5c:	f640 226e 	movw	r2, #2670	; 0xa6e
    7c60:	4909      	ldr	r1, [pc, #36]	; (7c88 <_spi_m_sync_init+0x188>)
    7c62:	2000      	movs	r0, #0
    7c64:	4b09      	ldr	r3, [pc, #36]	; (7c8c <_spi_m_sync_init+0x18c>)
    7c66:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7c68:	f06f 000c 	mvn.w	r0, #12
    7c6c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7c6e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7c72:	4905      	ldr	r1, [pc, #20]	; (7c88 <_spi_m_sync_init+0x188>)
    7c74:	2001      	movs	r0, #1
    7c76:	4b05      	ldr	r3, [pc, #20]	; (7c8c <_spi_m_sync_init+0x18c>)
    7c78:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7c7a:	f06f 000c 	mvn.w	r0, #12
    7c7e:	bd70      	pop	{r4, r5, r6, pc}
    7c80:	00006e2d 	.word	0x00006e2d
    7c84:	0000e200 	.word	0x0000e200
    7c88:	0000e224 	.word	0x0000e224
    7c8c:	00005f99 	.word	0x00005f99

00007c90 <_spi_m_async_init>:
{
    7c90:	b538      	push	{r3, r4, r5, lr}
    7c92:	4604      	mov	r4, r0
    7c94:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7c96:	4b15      	ldr	r3, [pc, #84]	; (7cec <_spi_m_async_init+0x5c>)
    7c98:	4798      	blx	r3
	if (rc < 0) {
    7c9a:	2800      	cmp	r0, #0
    7c9c:	db24      	blt.n	7ce8 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7c9e:	4621      	mov	r1, r4
    7ca0:	4628      	mov	r0, r5
    7ca2:	4b13      	ldr	r3, [pc, #76]	; (7cf0 <_spi_m_async_init+0x60>)
    7ca4:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7ca6:	2300      	movs	r3, #0
    7ca8:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7caa:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7cac:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7cae:	4628      	mov	r0, r5
    7cb0:	4b10      	ldr	r3, [pc, #64]	; (7cf4 <_spi_m_async_init+0x64>)
    7cb2:	4798      	blx	r3
    7cb4:	1d01      	adds	r1, r0, #4
    7cb6:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7cb8:	2401      	movs	r4, #1
    7cba:	f000 021f 	and.w	r2, r0, #31
    7cbe:	fa04 f202 	lsl.w	r2, r4, r2
    7cc2:	0943      	lsrs	r3, r0, #5
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7cca:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7cd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7cd6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7cda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    7cde:	3001      	adds	r0, #1
    7ce0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7ce2:	4281      	cmp	r1, r0
    7ce4:	d1e9      	bne.n	7cba <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7ce6:	2000      	movs	r0, #0
}
    7ce8:	bd38      	pop	{r3, r4, r5, pc}
    7cea:	bf00      	nop
    7cec:	00007b01 	.word	0x00007b01
    7cf0:	00006ee1 	.word	0x00006ee1
    7cf4:	00006f41 	.word	0x00006f41

00007cf8 <_spi_m_async_enable>:
{
    7cf8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7cfa:	4604      	mov	r4, r0
    7cfc:	b160      	cbz	r0, 7d18 <_spi_m_async_enable+0x20>
    7cfe:	6800      	ldr	r0, [r0, #0]
    7d00:	3000      	adds	r0, #0
    7d02:	bf18      	it	ne
    7d04:	2001      	movne	r0, #1
    7d06:	f640 22db 	movw	r2, #2779	; 0xadb
    7d0a:	4904      	ldr	r1, [pc, #16]	; (7d1c <_spi_m_async_enable+0x24>)
    7d0c:	4b04      	ldr	r3, [pc, #16]	; (7d20 <_spi_m_async_enable+0x28>)
    7d0e:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    7d10:	6820      	ldr	r0, [r4, #0]
    7d12:	4b04      	ldr	r3, [pc, #16]	; (7d24 <_spi_m_async_enable+0x2c>)
    7d14:	4798      	blx	r3
}
    7d16:	bd10      	pop	{r4, pc}
    7d18:	2000      	movs	r0, #0
    7d1a:	e7f4      	b.n	7d06 <_spi_m_async_enable+0xe>
    7d1c:	0000e224 	.word	0x0000e224
    7d20:	00005f99 	.word	0x00005f99
    7d24:	00006f79 	.word	0x00006f79

00007d28 <_spi_m_async_set_mode>:
{
    7d28:	b538      	push	{r3, r4, r5, lr}
    7d2a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7d2c:	4604      	mov	r4, r0
    7d2e:	b168      	cbz	r0, 7d4c <_spi_m_async_set_mode+0x24>
    7d30:	6800      	ldr	r0, [r0, #0]
    7d32:	3000      	adds	r0, #0
    7d34:	bf18      	it	ne
    7d36:	2001      	movne	r0, #1
    7d38:	f640 320c 	movw	r2, #2828	; 0xb0c
    7d3c:	4904      	ldr	r1, [pc, #16]	; (7d50 <_spi_m_async_set_mode+0x28>)
    7d3e:	4b05      	ldr	r3, [pc, #20]	; (7d54 <_spi_m_async_set_mode+0x2c>)
    7d40:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7d42:	4629      	mov	r1, r5
    7d44:	6820      	ldr	r0, [r4, #0]
    7d46:	4b04      	ldr	r3, [pc, #16]	; (7d58 <_spi_m_async_set_mode+0x30>)
    7d48:	4798      	blx	r3
}
    7d4a:	bd38      	pop	{r3, r4, r5, pc}
    7d4c:	2000      	movs	r0, #0
    7d4e:	e7f3      	b.n	7d38 <_spi_m_async_set_mode+0x10>
    7d50:	0000e224 	.word	0x0000e224
    7d54:	00005f99 	.word	0x00005f99
    7d58:	00006fb9 	.word	0x00006fb9

00007d5c <_spi_m_async_set_baudrate>:
{
    7d5c:	b538      	push	{r3, r4, r5, lr}
    7d5e:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7d60:	4605      	mov	r5, r0
    7d62:	b198      	cbz	r0, 7d8c <_spi_m_async_set_baudrate+0x30>
    7d64:	6800      	ldr	r0, [r0, #0]
    7d66:	3000      	adds	r0, #0
    7d68:	bf18      	it	ne
    7d6a:	2001      	movne	r0, #1
    7d6c:	f640 323b 	movw	r2, #2875	; 0xb3b
    7d70:	4907      	ldr	r1, [pc, #28]	; (7d90 <_spi_m_async_set_baudrate+0x34>)
    7d72:	4b08      	ldr	r3, [pc, #32]	; (7d94 <_spi_m_async_set_baudrate+0x38>)
    7d74:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7d76:	682b      	ldr	r3, [r5, #0]
    7d78:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7d7a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    7d7e:	bf03      	ittte	eq
    7d80:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7d82:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7d84:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7d86:	f06f 0003 	mvnne.w	r0, #3
}
    7d8a:	bd38      	pop	{r3, r4, r5, pc}
    7d8c:	2000      	movs	r0, #0
    7d8e:	e7ed      	b.n	7d6c <_spi_m_async_set_baudrate+0x10>
    7d90:	0000e224 	.word	0x0000e224
    7d94:	00005f99 	.word	0x00005f99

00007d98 <_spi_m_async_enable_tx>:
{
    7d98:	b538      	push	{r3, r4, r5, lr}
    7d9a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    7d9c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    7d9e:	b160      	cbz	r0, 7dba <_spi_m_async_enable_tx+0x22>
    7da0:	1c20      	adds	r0, r4, #0
    7da2:	bf18      	it	ne
    7da4:	2001      	movne	r0, #1
    7da6:	f640 32fe 	movw	r2, #3070	; 0xbfe
    7daa:	4906      	ldr	r1, [pc, #24]	; (7dc4 <_spi_m_async_enable_tx+0x2c>)
    7dac:	4b06      	ldr	r3, [pc, #24]	; (7dc8 <_spi_m_async_enable_tx+0x30>)
    7dae:	4798      	blx	r3
	if (state) {
    7db0:	b92d      	cbnz	r5, 7dbe <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7db2:	2301      	movs	r3, #1
    7db4:	7523      	strb	r3, [r4, #20]
}
    7db6:	2000      	movs	r0, #0
    7db8:	bd38      	pop	{r3, r4, r5, pc}
    7dba:	2000      	movs	r0, #0
    7dbc:	e7f3      	b.n	7da6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7dbe:	2301      	movs	r3, #1
    7dc0:	75a3      	strb	r3, [r4, #22]
    7dc2:	e7f8      	b.n	7db6 <_spi_m_async_enable_tx+0x1e>
    7dc4:	0000e224 	.word	0x0000e224
    7dc8:	00005f99 	.word	0x00005f99

00007dcc <_spi_m_async_enable_rx>:
{
    7dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dce:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7dd0:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    7dd2:	4e0c      	ldr	r6, [pc, #48]	; (7e04 <_spi_m_async_enable_rx+0x38>)
    7dd4:	f640 4212 	movw	r2, #3090	; 0xc12
    7dd8:	4631      	mov	r1, r6
    7dda:	3000      	adds	r0, #0
    7ddc:	bf18      	it	ne
    7dde:	2001      	movne	r0, #1
    7de0:	4d09      	ldr	r5, [pc, #36]	; (7e08 <_spi_m_async_enable_rx+0x3c>)
    7de2:	47a8      	blx	r5
	ASSERT(hw);
    7de4:	f640 4213 	movw	r2, #3091	; 0xc13
    7de8:	4631      	mov	r1, r6
    7dea:	1c20      	adds	r0, r4, #0
    7dec:	bf18      	it	ne
    7dee:	2001      	movne	r0, #1
    7df0:	47a8      	blx	r5
	if (state) {
    7df2:	b91f      	cbnz	r7, 7dfc <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7df4:	2304      	movs	r3, #4
    7df6:	7523      	strb	r3, [r4, #20]
}
    7df8:	2000      	movs	r0, #0
    7dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7dfc:	2304      	movs	r3, #4
    7dfe:	75a3      	strb	r3, [r4, #22]
    7e00:	e7fa      	b.n	7df8 <_spi_m_async_enable_rx+0x2c>
    7e02:	bf00      	nop
    7e04:	0000e224 	.word	0x0000e224
    7e08:	00005f99 	.word	0x00005f99

00007e0c <_spi_m_async_enable_tx_complete>:
{
    7e0c:	b538      	push	{r3, r4, r5, lr}
    7e0e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7e10:	4604      	mov	r4, r0
    7e12:	b170      	cbz	r0, 7e32 <_spi_m_async_enable_tx_complete+0x26>
    7e14:	6800      	ldr	r0, [r0, #0]
    7e16:	3000      	adds	r0, #0
    7e18:	bf18      	it	ne
    7e1a:	2001      	movne	r0, #1
    7e1c:	f640 4225 	movw	r2, #3109	; 0xc25
    7e20:	4907      	ldr	r1, [pc, #28]	; (7e40 <_spi_m_async_enable_tx_complete+0x34>)
    7e22:	4b08      	ldr	r3, [pc, #32]	; (7e44 <_spi_m_async_enable_tx_complete+0x38>)
    7e24:	4798      	blx	r3
	if (state) {
    7e26:	b935      	cbnz	r5, 7e36 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7e28:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7e2a:	2202      	movs	r2, #2
    7e2c:	751a      	strb	r2, [r3, #20]
}
    7e2e:	2000      	movs	r0, #0
    7e30:	bd38      	pop	{r3, r4, r5, pc}
    7e32:	2000      	movs	r0, #0
    7e34:	e7f2      	b.n	7e1c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7e36:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7e38:	2202      	movs	r2, #2
    7e3a:	759a      	strb	r2, [r3, #22]
    7e3c:	e7f7      	b.n	7e2e <_spi_m_async_enable_tx_complete+0x22>
    7e3e:	bf00      	nop
    7e40:	0000e224 	.word	0x0000e224
    7e44:	00005f99 	.word	0x00005f99

00007e48 <_spi_m_async_write_one>:
{
    7e48:	b538      	push	{r3, r4, r5, lr}
    7e4a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7e4c:	4604      	mov	r4, r0
    7e4e:	b160      	cbz	r0, 7e6a <_spi_m_async_write_one+0x22>
    7e50:	6800      	ldr	r0, [r0, #0]
    7e52:	3000      	adds	r0, #0
    7e54:	bf18      	it	ne
    7e56:	2001      	movne	r0, #1
    7e58:	f640 4237 	movw	r2, #3127	; 0xc37
    7e5c:	4904      	ldr	r1, [pc, #16]	; (7e70 <_spi_m_async_write_one+0x28>)
    7e5e:	4b05      	ldr	r3, [pc, #20]	; (7e74 <_spi_m_async_write_one+0x2c>)
    7e60:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7e62:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7e64:	629d      	str	r5, [r3, #40]	; 0x28
}
    7e66:	2000      	movs	r0, #0
    7e68:	bd38      	pop	{r3, r4, r5, pc}
    7e6a:	2000      	movs	r0, #0
    7e6c:	e7f4      	b.n	7e58 <_spi_m_async_write_one+0x10>
    7e6e:	bf00      	nop
    7e70:	0000e224 	.word	0x0000e224
    7e74:	00005f99 	.word	0x00005f99

00007e78 <_spi_m_async_read_one>:
{
    7e78:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7e7a:	4604      	mov	r4, r0
    7e7c:	b160      	cbz	r0, 7e98 <_spi_m_async_read_one+0x20>
    7e7e:	6800      	ldr	r0, [r0, #0]
    7e80:	3000      	adds	r0, #0
    7e82:	bf18      	it	ne
    7e84:	2001      	movne	r0, #1
    7e86:	f640 4252 	movw	r2, #3154	; 0xc52
    7e8a:	4904      	ldr	r1, [pc, #16]	; (7e9c <_spi_m_async_read_one+0x24>)
    7e8c:	4b04      	ldr	r3, [pc, #16]	; (7ea0 <_spi_m_async_read_one+0x28>)
    7e8e:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7e90:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7e92:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7e94:	b280      	uxth	r0, r0
    7e96:	bd10      	pop	{r4, pc}
    7e98:	2000      	movs	r0, #0
    7e9a:	e7f4      	b.n	7e86 <_spi_m_async_read_one+0xe>
    7e9c:	0000e224 	.word	0x0000e224
    7ea0:	00005f99 	.word	0x00005f99

00007ea4 <_spi_m_async_register_callback>:
{
    7ea4:	b570      	push	{r4, r5, r6, lr}
    7ea6:	460d      	mov	r5, r1
    7ea8:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7eaa:	4604      	mov	r4, r0
    7eac:	b168      	cbz	r0, 7eca <_spi_m_async_register_callback+0x26>
    7eae:	2903      	cmp	r1, #3
    7eb0:	bf8c      	ite	hi
    7eb2:	2000      	movhi	r0, #0
    7eb4:	2001      	movls	r0, #1
    7eb6:	f640 426b 	movw	r2, #3179	; 0xc6b
    7eba:	4905      	ldr	r1, [pc, #20]	; (7ed0 <_spi_m_async_register_callback+0x2c>)
    7ebc:	4b05      	ldr	r3, [pc, #20]	; (7ed4 <_spi_m_async_register_callback+0x30>)
    7ebe:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7ec0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7ec4:	60a6      	str	r6, [r4, #8]
}
    7ec6:	2000      	movs	r0, #0
    7ec8:	bd70      	pop	{r4, r5, r6, pc}
    7eca:	2000      	movs	r0, #0
    7ecc:	e7f3      	b.n	7eb6 <_spi_m_async_register_callback+0x12>
    7ece:	bf00      	nop
    7ed0:	0000e224 	.word	0x0000e224
    7ed4:	00005f99 	.word	0x00005f99

00007ed8 <_spi_m_async_set_irq_state>:
{
    7ed8:	b570      	push	{r4, r5, r6, lr}
    7eda:	460c      	mov	r4, r1
    7edc:	4615      	mov	r5, r2
	ASSERT(device);
    7ede:	4606      	mov	r6, r0
    7ee0:	f640 42ac 	movw	r2, #3244	; 0xcac
    7ee4:	4908      	ldr	r1, [pc, #32]	; (7f08 <_spi_m_async_set_irq_state+0x30>)
    7ee6:	3000      	adds	r0, #0
    7ee8:	bf18      	it	ne
    7eea:	2001      	movne	r0, #1
    7eec:	4b07      	ldr	r3, [pc, #28]	; (7f0c <_spi_m_async_set_irq_state+0x34>)
    7eee:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7ef0:	2c03      	cmp	r4, #3
    7ef2:	d000      	beq.n	7ef6 <_spi_m_async_set_irq_state+0x1e>
    7ef4:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7ef6:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7ef8:	b115      	cbz	r5, 7f00 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    7efa:	2280      	movs	r2, #128	; 0x80
    7efc:	759a      	strb	r2, [r3, #22]
}
    7efe:	e7f9      	b.n	7ef4 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7f00:	2280      	movs	r2, #128	; 0x80
    7f02:	751a      	strb	r2, [r3, #20]
    7f04:	bd70      	pop	{r4, r5, r6, pc}
    7f06:	bf00      	nop
    7f08:	0000e224 	.word	0x0000e224
    7f0c:	00005f99 	.word	0x00005f99

00007f10 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f14:	4605      	mov	r5, r0
    7f16:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7f18:	4608      	mov	r0, r1
    7f1a:	4b52      	ldr	r3, [pc, #328]	; (8064 <_spi_m_dma_init+0x154>)
    7f1c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7f1e:	2803      	cmp	r0, #3
    7f20:	d00c      	beq.n	7f3c <_spi_m_dma_init+0x2c>
    7f22:	2807      	cmp	r0, #7
    7f24:	bf08      	it	eq
    7f26:	2301      	moveq	r3, #1
    7f28:	d009      	beq.n	7f3e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7f2a:	2d00      	cmp	r5, #0
    7f2c:	f000 8086 	beq.w	803c <_spi_m_dma_init+0x12c>
    7f30:	2c00      	cmp	r4, #0
    7f32:	f040 808d 	bne.w	8050 <_spi_m_dma_init+0x140>
	return NULL;
    7f36:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7f38:	2000      	movs	r0, #0
    7f3a:	e009      	b.n	7f50 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7f3c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7f3e:	4e4a      	ldr	r6, [pc, #296]	; (8068 <_spi_m_dma_init+0x158>)
    7f40:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7f44:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7f46:	2d00      	cmp	r5, #0
    7f48:	d0f6      	beq.n	7f38 <_spi_m_dma_init+0x28>
    7f4a:	2001      	movs	r0, #1
    7f4c:	2c00      	cmp	r4, #0
    7f4e:	d0f3      	beq.n	7f38 <_spi_m_dma_init+0x28>
    7f50:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7f54:	4945      	ldr	r1, [pc, #276]	; (806c <_spi_m_dma_init+0x15c>)
    7f56:	4b46      	ldr	r3, [pc, #280]	; (8070 <_spi_m_dma_init+0x160>)
    7f58:	4798      	blx	r3

	if (regs == NULL) {
    7f5a:	2e00      	cmp	r6, #0
    7f5c:	d06a      	beq.n	8034 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7f5e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7f60:	f013 0f01 	tst.w	r3, #1
    7f64:	d11d      	bne.n	7fa2 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7f66:	6833      	ldr	r3, [r6, #0]
    7f68:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f6c:	69e3      	ldr	r3, [r4, #28]
    7f6e:	f013 0f03 	tst.w	r3, #3
    7f72:	d1fb      	bne.n	7f6c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7f74:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7f76:	f013 0f02 	tst.w	r3, #2
    7f7a:	d00b      	beq.n	7f94 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7f7c:	6823      	ldr	r3, [r4, #0]
    7f7e:	f023 0302 	bic.w	r3, r3, #2
    7f82:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f84:	69e3      	ldr	r3, [r4, #28]
    7f86:	f013 0f03 	tst.w	r3, #3
    7f8a:	d1fb      	bne.n	7f84 <_spi_m_dma_init+0x74>
    7f8c:	69e3      	ldr	r3, [r4, #28]
    7f8e:	f013 0f02 	tst.w	r3, #2
    7f92:	d1fb      	bne.n	7f8c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7f94:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7f98:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f9a:	69e3      	ldr	r3, [r4, #28]
    7f9c:	f013 0f03 	tst.w	r3, #3
    7fa0:	d1fb      	bne.n	7f9a <_spi_m_dma_init+0x8a>
    7fa2:	69e3      	ldr	r3, [r4, #28]
    7fa4:	f013 0f01 	tst.w	r3, #1
    7fa8:	d1fb      	bne.n	7fa2 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7faa:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7fac:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7fb0:	492e      	ldr	r1, [pc, #184]	; (806c <_spi_m_dma_init+0x15c>)
    7fb2:	1c20      	adds	r0, r4, #0
    7fb4:	bf18      	it	ne
    7fb6:	2001      	movne	r0, #1
    7fb8:	4b2d      	ldr	r3, [pc, #180]	; (8070 <_spi_m_dma_init+0x160>)
    7fba:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7fbc:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    7fbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7fc2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7fc6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7fc8:	69e3      	ldr	r3, [r4, #28]
    7fca:	f013 0f03 	tst.w	r3, #3
    7fce:	d1fb      	bne.n	7fc8 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7fd0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7fd2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7fd6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7fde:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7fe0:	69e3      	ldr	r3, [r4, #28]
    7fe2:	f013 0f17 	tst.w	r3, #23
    7fe6:	d1fb      	bne.n	7fe0 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7fe8:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7fea:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7fec:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7fee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7ff2:	f105 0818 	add.w	r8, r5, #24
    7ff6:	4620      	mov	r0, r4
    7ff8:	4b1e      	ldr	r3, [pc, #120]	; (8074 <_spi_m_dma_init+0x164>)
    7ffa:	4798      	blx	r3
    7ffc:	4601      	mov	r1, r0
    7ffe:	4640      	mov	r0, r8
    8000:	4f1d      	ldr	r7, [pc, #116]	; (8078 <_spi_m_dma_init+0x168>)
    8002:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8004:	69ab      	ldr	r3, [r5, #24]
    8006:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    8008:	69ab      	ldr	r3, [r5, #24]
    800a:	4a1c      	ldr	r2, [pc, #112]	; (807c <_spi_m_dma_init+0x16c>)
    800c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    800e:	69ab      	ldr	r3, [r5, #24]
    8010:	4e1b      	ldr	r6, [pc, #108]	; (8080 <_spi_m_dma_init+0x170>)
    8012:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    8014:	4620      	mov	r0, r4
    8016:	4b1b      	ldr	r3, [pc, #108]	; (8084 <_spi_m_dma_init+0x174>)
    8018:	4798      	blx	r3
    801a:	4601      	mov	r1, r0
    801c:	4640      	mov	r0, r8
    801e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8020:	69ab      	ldr	r3, [r5, #24]
    8022:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    8024:	69ab      	ldr	r3, [r5, #24]
    8026:	4a18      	ldr	r2, [pc, #96]	; (8088 <_spi_m_dma_init+0x178>)
    8028:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    802a:	69ab      	ldr	r3, [r5, #24]
    802c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    802e:	2000      	movs	r0, #0
    8030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    8034:	f06f 000c 	mvn.w	r0, #12
    8038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    803c:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    8040:	490a      	ldr	r1, [pc, #40]	; (806c <_spi_m_dma_init+0x15c>)
    8042:	2000      	movs	r0, #0
    8044:	4b0a      	ldr	r3, [pc, #40]	; (8070 <_spi_m_dma_init+0x160>)
    8046:	4798      	blx	r3
		return ERR_INVALID_ARG;
    8048:	f06f 000c 	mvn.w	r0, #12
    804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    8050:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    8054:	4905      	ldr	r1, [pc, #20]	; (806c <_spi_m_dma_init+0x15c>)
    8056:	2001      	movs	r0, #1
    8058:	4b05      	ldr	r3, [pc, #20]	; (8070 <_spi_m_dma_init+0x160>)
    805a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    805c:	f06f 000c 	mvn.w	r0, #12
    8060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8064:	00006e2d 	.word	0x00006e2d
    8068:	0000e200 	.word	0x0000e200
    806c:	0000e224 	.word	0x0000e224
    8070:	00005f99 	.word	0x00005f99
    8074:	0000704d 	.word	0x0000704d
    8078:	00006835 	.word	0x00006835
    807c:	00007061 	.word	0x00007061
    8080:	00007079 	.word	0x00007079
    8084:	00007039 	.word	0x00007039
    8088:	0000706d 	.word	0x0000706d

0000808c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    808c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    808e:	4604      	mov	r4, r0
    8090:	b160      	cbz	r0, 80ac <_spi_m_dma_enable+0x20>
    8092:	6800      	ldr	r0, [r0, #0]
    8094:	3000      	adds	r0, #0
    8096:	bf18      	it	ne
    8098:	2001      	movne	r0, #1
    809a:	f640 52c9 	movw	r2, #3529	; 0xdc9
    809e:	4904      	ldr	r1, [pc, #16]	; (80b0 <_spi_m_dma_enable+0x24>)
    80a0:	4b04      	ldr	r3, [pc, #16]	; (80b4 <_spi_m_dma_enable+0x28>)
    80a2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    80a4:	6820      	ldr	r0, [r4, #0]
    80a6:	4b04      	ldr	r3, [pc, #16]	; (80b8 <_spi_m_dma_enable+0x2c>)
    80a8:	4798      	blx	r3
}
    80aa:	bd10      	pop	{r4, pc}
    80ac:	2000      	movs	r0, #0
    80ae:	e7f4      	b.n	809a <_spi_m_dma_enable+0xe>
    80b0:	0000e224 	.word	0x0000e224
    80b4:	00005f99 	.word	0x00005f99
    80b8:	00006f55 	.word	0x00006f55

000080bc <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    80bc:	b570      	push	{r4, r5, r6, lr}
    80be:	4605      	mov	r5, r0
    80c0:	4614      	mov	r4, r2
	switch (type) {
    80c2:	2901      	cmp	r1, #1
    80c4:	d00e      	beq.n	80e4 <_spi_m_dma_register_callback+0x28>
    80c6:	b111      	cbz	r1, 80ce <_spi_m_dma_register_callback+0x12>
    80c8:	2902      	cmp	r1, #2
    80ca:	d016      	beq.n	80fa <_spi_m_dma_register_callback+0x3e>
    80cc:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    80ce:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    80d0:	6800      	ldr	r0, [r0, #0]
    80d2:	4b13      	ldr	r3, [pc, #76]	; (8120 <_spi_m_dma_register_callback+0x64>)
    80d4:	4798      	blx	r3
    80d6:	1c22      	adds	r2, r4, #0
    80d8:	bf18      	it	ne
    80da:	2201      	movne	r2, #1
    80dc:	2100      	movs	r1, #0
    80de:	4b11      	ldr	r3, [pc, #68]	; (8124 <_spi_m_dma_register_callback+0x68>)
    80e0:	4798      	blx	r3
		break;
    80e2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    80e4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    80e6:	6800      	ldr	r0, [r0, #0]
    80e8:	4b0f      	ldr	r3, [pc, #60]	; (8128 <_spi_m_dma_register_callback+0x6c>)
    80ea:	4798      	blx	r3
    80ec:	1c22      	adds	r2, r4, #0
    80ee:	bf18      	it	ne
    80f0:	2201      	movne	r2, #1
    80f2:	2100      	movs	r1, #0
    80f4:	4b0b      	ldr	r3, [pc, #44]	; (8124 <_spi_m_dma_register_callback+0x68>)
    80f6:	4798      	blx	r3
		break;
    80f8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    80fa:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    80fc:	6800      	ldr	r0, [r0, #0]
    80fe:	4b0a      	ldr	r3, [pc, #40]	; (8128 <_spi_m_dma_register_callback+0x6c>)
    8100:	4798      	blx	r3
    8102:	3400      	adds	r4, #0
    8104:	bf18      	it	ne
    8106:	2401      	movne	r4, #1
    8108:	4622      	mov	r2, r4
    810a:	2101      	movs	r1, #1
    810c:	4e05      	ldr	r6, [pc, #20]	; (8124 <_spi_m_dma_register_callback+0x68>)
    810e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    8110:	6828      	ldr	r0, [r5, #0]
    8112:	4b03      	ldr	r3, [pc, #12]	; (8120 <_spi_m_dma_register_callback+0x64>)
    8114:	4798      	blx	r3
    8116:	4622      	mov	r2, r4
    8118:	2101      	movs	r1, #1
    811a:	47b0      	blx	r6
    811c:	bd70      	pop	{r4, r5, r6, pc}
    811e:	bf00      	nop
    8120:	00007039 	.word	0x00007039
    8124:	0000670d 	.word	0x0000670d
    8128:	0000704d 	.word	0x0000704d

0000812c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    812c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8130:	4605      	mov	r5, r0
    8132:	4689      	mov	r9, r1
    8134:	4617      	mov	r7, r2
    8136:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    8138:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    813c:	4658      	mov	r0, fp
    813e:	4b46      	ldr	r3, [pc, #280]	; (8258 <_spi_m_dma_transfer+0x12c>)
    8140:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8142:	2803      	cmp	r0, #3
    8144:	d053      	beq.n	81ee <_spi_m_dma_transfer+0xc2>
    8146:	2807      	cmp	r0, #7
    8148:	bf08      	it	eq
    814a:	2201      	moveq	r2, #1
    814c:	d050      	beq.n	81f0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    814e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    8152:	4658      	mov	r0, fp
    8154:	4b41      	ldr	r3, [pc, #260]	; (825c <_spi_m_dma_transfer+0x130>)
    8156:	4798      	blx	r3
    8158:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    815a:	4658      	mov	r0, fp
    815c:	4b40      	ldr	r3, [pc, #256]	; (8260 <_spi_m_dma_transfer+0x134>)
    815e:	4798      	blx	r3
    8160:	4604      	mov	r4, r0

	if (rxbuf) {
    8162:	2f00      	cmp	r7, #0
    8164:	d04b      	beq.n	81fe <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    8166:	2d00      	cmp	r5, #0
    8168:	d047      	beq.n	81fa <_spi_m_dma_transfer+0xce>
    816a:	f11b 0000 	adds.w	r0, fp, #0
    816e:	bf18      	it	ne
    8170:	2001      	movne	r0, #1
    8172:	f640 5213 	movw	r2, #3347	; 0xd13
    8176:	493b      	ldr	r1, [pc, #236]	; (8264 <_spi_m_dma_transfer+0x138>)
    8178:	4b3b      	ldr	r3, [pc, #236]	; (8268 <_spi_m_dma_transfer+0x13c>)
    817a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    817c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    817e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8180:	f013 0f04 	tst.w	r3, #4
    8184:	d107      	bne.n	8196 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    8186:	6853      	ldr	r3, [r2, #4]
    8188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    818c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    818e:	69d3      	ldr	r3, [r2, #28]
    8190:	f013 0f17 	tst.w	r3, #23
    8194:	d1fb      	bne.n	818e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8196:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    8198:	3128      	adds	r1, #40	; 0x28
    819a:	4630      	mov	r0, r6
    819c:	4b33      	ldr	r3, [pc, #204]	; (826c <_spi_m_dma_transfer+0x140>)
    819e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    81a0:	4639      	mov	r1, r7
    81a2:	4630      	mov	r0, r6
    81a4:	4b32      	ldr	r3, [pc, #200]	; (8270 <_spi_m_dma_transfer+0x144>)
    81a6:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    81a8:	4641      	mov	r1, r8
    81aa:	4630      	mov	r0, r6
    81ac:	4b31      	ldr	r3, [pc, #196]	; (8274 <_spi_m_dma_transfer+0x148>)
    81ae:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    81b0:	2100      	movs	r1, #0
    81b2:	4630      	mov	r0, r6
    81b4:	4b30      	ldr	r3, [pc, #192]	; (8278 <_spi_m_dma_transfer+0x14c>)
    81b6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    81b8:	f1b9 0f00 	cmp.w	r9, #0
    81bc:	d039      	beq.n	8232 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    81be:	4649      	mov	r1, r9
    81c0:	4620      	mov	r0, r4
    81c2:	4b2a      	ldr	r3, [pc, #168]	; (826c <_spi_m_dma_transfer+0x140>)
    81c4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    81c6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    81c8:	3128      	adds	r1, #40	; 0x28
    81ca:	4620      	mov	r0, r4
    81cc:	4b28      	ldr	r3, [pc, #160]	; (8270 <_spi_m_dma_transfer+0x144>)
    81ce:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    81d0:	2101      	movs	r1, #1
    81d2:	4620      	mov	r0, r4
    81d4:	4b29      	ldr	r3, [pc, #164]	; (827c <_spi_m_dma_transfer+0x150>)
    81d6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    81d8:	4641      	mov	r1, r8
    81da:	4620      	mov	r0, r4
    81dc:	4b25      	ldr	r3, [pc, #148]	; (8274 <_spi_m_dma_transfer+0x148>)
    81de:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    81e0:	2100      	movs	r1, #0
    81e2:	4620      	mov	r0, r4
    81e4:	4b24      	ldr	r3, [pc, #144]	; (8278 <_spi_m_dma_transfer+0x14c>)
    81e6:	4798      	blx	r3

	return ERR_NONE;
}
    81e8:	2000      	movs	r0, #0
    81ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    81ee:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    81f0:	4b23      	ldr	r3, [pc, #140]	; (8280 <_spi_m_dma_transfer+0x154>)
    81f2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    81f6:	4492      	add	sl, r2
    81f8:	e7ab      	b.n	8152 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    81fa:	2000      	movs	r0, #0
    81fc:	e7b9      	b.n	8172 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    81fe:	b1b5      	cbz	r5, 822e <_spi_m_dma_transfer+0x102>
    8200:	f11b 0000 	adds.w	r0, fp, #0
    8204:	bf18      	it	ne
    8206:	2001      	movne	r0, #1
    8208:	f640 521a 	movw	r2, #3354	; 0xd1a
    820c:	4915      	ldr	r1, [pc, #84]	; (8264 <_spi_m_dma_transfer+0x138>)
    820e:	4b16      	ldr	r3, [pc, #88]	; (8268 <_spi_m_dma_transfer+0x13c>)
    8210:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    8212:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8214:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8216:	f013 0f04 	tst.w	r3, #4
    821a:	d1cd      	bne.n	81b8 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    821c:	6853      	ldr	r3, [r2, #4]
    821e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8222:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8224:	69d3      	ldr	r3, [r2, #28]
    8226:	f013 0f17 	tst.w	r3, #23
    822a:	d1fb      	bne.n	8224 <_spi_m_dma_transfer+0xf8>
    822c:	e7c4      	b.n	81b8 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    822e:	2000      	movs	r0, #0
    8230:	e7ea      	b.n	8208 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    8232:	f10a 010e 	add.w	r1, sl, #14
    8236:	4620      	mov	r0, r4
    8238:	4b0c      	ldr	r3, [pc, #48]	; (826c <_spi_m_dma_transfer+0x140>)
    823a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    823c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    823e:	3128      	adds	r1, #40	; 0x28
    8240:	4620      	mov	r0, r4
    8242:	4b0b      	ldr	r3, [pc, #44]	; (8270 <_spi_m_dma_transfer+0x144>)
    8244:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    8246:	2100      	movs	r1, #0
    8248:	4620      	mov	r0, r4
    824a:	4b0c      	ldr	r3, [pc, #48]	; (827c <_spi_m_dma_transfer+0x150>)
    824c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    824e:	4641      	mov	r1, r8
    8250:	4620      	mov	r0, r4
    8252:	4b08      	ldr	r3, [pc, #32]	; (8274 <_spi_m_dma_transfer+0x148>)
    8254:	4798      	blx	r3
    8256:	e7c3      	b.n	81e0 <_spi_m_dma_transfer+0xb4>
    8258:	00006e2d 	.word	0x00006e2d
    825c:	0000704d 	.word	0x0000704d
    8260:	00007039 	.word	0x00007039
    8264:	0000e224 	.word	0x0000e224
    8268:	00005f99 	.word	0x00005f99
    826c:	00006771 	.word	0x00006771
    8270:	00006761 	.word	0x00006761
    8274:	0000679d 	.word	0x0000679d
    8278:	000067f5 	.word	0x000067f5
    827c:	00006781 	.word	0x00006781
    8280:	0000e200 	.word	0x0000e200

00008284 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8284:	4b03      	ldr	r3, [pc, #12]	; (8294 <_delay_init+0x10>)
    8286:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    828a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    828c:	2205      	movs	r2, #5
    828e:	601a      	str	r2, [r3, #0]
    8290:	4770      	bx	lr
    8292:	bf00      	nop
    8294:	e000e010 	.word	0xe000e010

00008298 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    8298:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    829a:	b303      	cbz	r3, 82de <_delay_cycles+0x46>
{
    829c:	b430      	push	{r4, r5}
    829e:	1e5d      	subs	r5, r3, #1
    82a0:	b2ed      	uxtb	r5, r5
	while (n--) {
    82a2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    82a4:	4a12      	ldr	r2, [pc, #72]	; (82f0 <_delay_cycles+0x58>)
    82a6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    82aa:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    82ac:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    82ae:	6813      	ldr	r3, [r2, #0]
    82b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    82b4:	d0fb      	beq.n	82ae <_delay_cycles+0x16>
	while (n--) {
    82b6:	3801      	subs	r0, #1
    82b8:	b2c0      	uxtb	r0, r0
    82ba:	28ff      	cmp	r0, #255	; 0xff
    82bc:	d1f5      	bne.n	82aa <_delay_cycles+0x12>
    82be:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    82c2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    82c6:	3101      	adds	r1, #1
    82c8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    82ca:	4b09      	ldr	r3, [pc, #36]	; (82f0 <_delay_cycles+0x58>)
    82cc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    82ce:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    82d0:	461a      	mov	r2, r3
    82d2:	6813      	ldr	r3, [r2, #0]
    82d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    82d8:	d0fb      	beq.n	82d2 <_delay_cycles+0x3a>
		;
}
    82da:	bc30      	pop	{r4, r5}
    82dc:	4770      	bx	lr
	SysTick->LOAD = buf;
    82de:	4b04      	ldr	r3, [pc, #16]	; (82f0 <_delay_cycles+0x58>)
    82e0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    82e2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    82e4:	461a      	mov	r2, r3
    82e6:	6813      	ldr	r3, [r2, #0]
    82e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    82ec:	d0fb      	beq.n	82e6 <_delay_cycles+0x4e>
    82ee:	4770      	bx	lr
    82f0:	e000e010 	.word	0xe000e010

000082f4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    82f4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    82f6:	6813      	ldr	r3, [r2, #0]
    82f8:	f043 0302 	orr.w	r3, r3, #2
    82fc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    82fe:	6913      	ldr	r3, [r2, #16]
    8300:	f013 0f03 	tst.w	r3, #3
    8304:	d1fb      	bne.n	82fe <_tc_timer_start+0xa>
}
    8306:	4770      	bx	lr

00008308 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8308:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    830a:	6813      	ldr	r3, [r2, #0]
    830c:	f023 0302 	bic.w	r3, r3, #2
    8310:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8312:	6913      	ldr	r3, [r2, #16]
    8314:	f013 0f03 	tst.w	r3, #3
    8318:	d1fb      	bne.n	8312 <_tc_timer_stop+0xa>
}
    831a:	4770      	bx	lr

0000831c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    831c:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    831e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8320:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8324:	2a02      	cmp	r2, #2
    8326:	d00a      	beq.n	833e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8328:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    832a:	f012 0f0c 	tst.w	r2, #12
    832e:	d10c      	bne.n	834a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8330:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8332:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8334:	691a      	ldr	r2, [r3, #16]
    8336:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    833a:	d1fb      	bne.n	8334 <_tc_timer_set_period+0x18>
    833c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    833e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8340:	691a      	ldr	r2, [r3, #16]
    8342:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8346:	d1fb      	bne.n	8340 <_tc_timer_set_period+0x24>
    8348:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    834a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    834c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8350:	2a01      	cmp	r2, #1
    8352:	d000      	beq.n	8356 <_tc_timer_set_period+0x3a>
    8354:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8356:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    8358:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    835a:	691a      	ldr	r2, [r3, #16]
    835c:	f012 0f20 	tst.w	r2, #32
    8360:	d1fb      	bne.n	835a <_tc_timer_set_period+0x3e>
    8362:	e7f7      	b.n	8354 <_tc_timer_set_period+0x38>

00008364 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    8364:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8366:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8368:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    836c:	2a02      	cmp	r2, #2
    836e:	d00a      	beq.n	8386 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8370:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8372:	f012 0f0c 	tst.w	r2, #12
    8376:	d10c      	bne.n	8392 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8378:	691a      	ldr	r2, [r3, #16]
    837a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    837e:	d1fb      	bne.n	8378 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8380:	8b98      	ldrh	r0, [r3, #28]
    8382:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8384:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8386:	691a      	ldr	r2, [r3, #16]
    8388:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    838c:	d1fb      	bne.n	8386 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    838e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    8390:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8392:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8394:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8398:	2a01      	cmp	r2, #1
    839a:	d001      	beq.n	83a0 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    839c:	2000      	movs	r0, #0
}
    839e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83a0:	691a      	ldr	r2, [r3, #16]
    83a2:	f012 0f20 	tst.w	r2, #32
    83a6:	d1fb      	bne.n	83a0 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    83a8:	7ed8      	ldrb	r0, [r3, #27]
    83aa:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    83ac:	4770      	bx	lr

000083ae <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    83ae:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83b0:	6913      	ldr	r3, [r2, #16]
    83b2:	f013 0f03 	tst.w	r3, #3
    83b6:	d1fb      	bne.n	83b0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83b8:	6810      	ldr	r0, [r2, #0]
}
    83ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    83be:	4770      	bx	lr

000083c0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    83c0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    83c2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    83c4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    83c6:	f012 0f01 	tst.w	r2, #1
    83ca:	d100      	bne.n	83ce <tc_interrupt_handler+0xe>
    83cc:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    83ce:	2201      	movs	r2, #1
    83d0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    83d2:	6803      	ldr	r3, [r0, #0]
    83d4:	4798      	blx	r3
	}
}
    83d6:	e7f9      	b.n	83cc <tc_interrupt_handler+0xc>

000083d8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    83d8:	b570      	push	{r4, r5, r6, lr}
    83da:	b088      	sub	sp, #32
    83dc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    83de:	466c      	mov	r4, sp
    83e0:	4d19      	ldr	r5, [pc, #100]	; (8448 <get_tc_index+0x70>)
    83e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    83e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    83e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    83ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    83ee:	9b00      	ldr	r3, [sp, #0]
    83f0:	42b3      	cmp	r3, r6
    83f2:	d00c      	beq.n	840e <get_tc_index+0x36>
    83f4:	4630      	mov	r0, r6
    83f6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    83f8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    83fa:	f852 1b04 	ldr.w	r1, [r2], #4
    83fe:	4281      	cmp	r1, r0
    8400:	d006      	beq.n	8410 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8402:	3301      	adds	r3, #1
    8404:	2b08      	cmp	r3, #8
    8406:	d1f8      	bne.n	83fa <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8408:	2000      	movs	r0, #0
			return i;
    840a:	b240      	sxtb	r0, r0
    840c:	e013      	b.n	8436 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    840e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    8410:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8414:	d015      	beq.n	8442 <get_tc_index+0x6a>
    8416:	2b01      	cmp	r3, #1
    8418:	d00f      	beq.n	843a <get_tc_index+0x62>
    841a:	2b02      	cmp	r3, #2
    841c:	d00f      	beq.n	843e <get_tc_index+0x66>
    841e:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8420:	bf08      	it	eq
    8422:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    8424:	d0f1      	beq.n	840a <get_tc_index+0x32>
	ASSERT(false);
    8426:	f240 1267 	movw	r2, #359	; 0x167
    842a:	4908      	ldr	r1, [pc, #32]	; (844c <get_tc_index+0x74>)
    842c:	2000      	movs	r0, #0
    842e:	4b08      	ldr	r3, [pc, #32]	; (8450 <get_tc_index+0x78>)
    8430:	4798      	blx	r3
	return -1;
    8432:	f04f 30ff 	mov.w	r0, #4294967295
}
    8436:	b008      	add	sp, #32
    8438:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    843a:	2001      	movs	r0, #1
    843c:	e7e5      	b.n	840a <get_tc_index+0x32>
    843e:	2002      	movs	r0, #2
    8440:	e7e3      	b.n	840a <get_tc_index+0x32>
    8442:	2000      	movs	r0, #0
    8444:	e7e1      	b.n	840a <get_tc_index+0x32>
    8446:	bf00      	nop
    8448:	0000e240 	.word	0x0000e240
    844c:	0000e2b0 	.word	0x0000e2b0
    8450:	00005f99 	.word	0x00005f99

00008454 <_tc_timer_init>:
{
    8454:	b570      	push	{r4, r5, r6, lr}
    8456:	4606      	mov	r6, r0
    8458:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    845a:	4608      	mov	r0, r1
    845c:	4b71      	ldr	r3, [pc, #452]	; (8624 <_tc_timer_init+0x1d0>)
    845e:	4798      	blx	r3
    8460:	4605      	mov	r5, r0
	device->hw = hw;
    8462:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8464:	22a0      	movs	r2, #160	; 0xa0
    8466:	4970      	ldr	r1, [pc, #448]	; (8628 <_tc_timer_init+0x1d4>)
    8468:	2001      	movs	r0, #1
    846a:	4b70      	ldr	r3, [pc, #448]	; (862c <_tc_timer_init+0x1d8>)
    846c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    846e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8470:	f013 0f01 	tst.w	r3, #1
    8474:	d119      	bne.n	84aa <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8476:	6923      	ldr	r3, [r4, #16]
    8478:	f013 0f03 	tst.w	r3, #3
    847c:	d1fb      	bne.n	8476 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    847e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8480:	f013 0f02 	tst.w	r3, #2
    8484:	d00b      	beq.n	849e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8486:	6823      	ldr	r3, [r4, #0]
    8488:	f023 0302 	bic.w	r3, r3, #2
    848c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    848e:	6923      	ldr	r3, [r4, #16]
    8490:	f013 0f03 	tst.w	r3, #3
    8494:	d1fb      	bne.n	848e <_tc_timer_init+0x3a>
    8496:	6923      	ldr	r3, [r4, #16]
    8498:	f013 0f02 	tst.w	r3, #2
    849c:	d1fb      	bne.n	8496 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    849e:	2301      	movs	r3, #1
    84a0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84a2:	6923      	ldr	r3, [r4, #16]
    84a4:	f013 0f03 	tst.w	r3, #3
    84a8:	d1fb      	bne.n	84a2 <_tc_timer_init+0x4e>
    84aa:	6923      	ldr	r3, [r4, #16]
    84ac:	f013 0f01 	tst.w	r3, #1
    84b0:	d1fb      	bne.n	84aa <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    84b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84b6:	4a5e      	ldr	r2, [pc, #376]	; (8630 <_tc_timer_init+0x1dc>)
    84b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    84bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    84be:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84c0:	6923      	ldr	r3, [r4, #16]
    84c2:	f013 0f03 	tst.w	r3, #3
    84c6:	d1fb      	bne.n	84c0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    84c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84cc:	4958      	ldr	r1, [pc, #352]	; (8630 <_tc_timer_init+0x1dc>)
    84ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    84d2:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    84d6:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    84d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    84da:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    84dc:	2301      	movs	r3, #1
    84de:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    84e0:	f002 020c 	and.w	r2, r2, #12
    84e4:	2a08      	cmp	r2, #8
    84e6:	d056      	beq.n	8596 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    84e8:	2a00      	cmp	r2, #0
    84ea:	d16b      	bne.n	85c4 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    84ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84f0:	4a4f      	ldr	r2, [pc, #316]	; (8630 <_tc_timer_init+0x1dc>)
    84f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    84f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    84f8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84fa:	6923      	ldr	r3, [r4, #16]
    84fc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8500:	d1fb      	bne.n	84fa <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8502:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8506:	4a4a      	ldr	r2, [pc, #296]	; (8630 <_tc_timer_init+0x1dc>)
    8508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    850c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    850e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8510:	6923      	ldr	r3, [r4, #16]
    8512:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8516:	d1fb      	bne.n	8510 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8518:	2301      	movs	r3, #1
    851a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    851c:	4b45      	ldr	r3, [pc, #276]	; (8634 <_tc_timer_init+0x1e0>)
    851e:	429c      	cmp	r4, r3
    8520:	d077      	beq.n	8612 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    8522:	4b45      	ldr	r3, [pc, #276]	; (8638 <_tc_timer_init+0x1e4>)
    8524:	429c      	cmp	r4, r3
    8526:	d077      	beq.n	8618 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    8528:	4b44      	ldr	r3, [pc, #272]	; (863c <_tc_timer_init+0x1e8>)
    852a:	429c      	cmp	r4, r3
    852c:	d077      	beq.n	861e <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    852e:	4b44      	ldr	r3, [pc, #272]	; (8640 <_tc_timer_init+0x1ec>)
    8530:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    8532:	bf04      	itt	eq
    8534:	4b43      	ldreq	r3, [pc, #268]	; (8644 <_tc_timer_init+0x1f0>)
    8536:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    8538:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    853c:	4a3c      	ldr	r2, [pc, #240]	; (8630 <_tc_timer_init+0x1dc>)
    853e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8542:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8546:	2b00      	cmp	r3, #0
    8548:	db23      	blt.n	8592 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    854a:	095a      	lsrs	r2, r3, #5
    854c:	f003 031f 	and.w	r3, r3, #31
    8550:	2101      	movs	r1, #1
    8552:	fa01 f303 	lsl.w	r3, r1, r3
    8556:	3220      	adds	r2, #32
    8558:	493b      	ldr	r1, [pc, #236]	; (8648 <_tc_timer_init+0x1f4>)
    855a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    855e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8562:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8566:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    856a:	4b31      	ldr	r3, [pc, #196]	; (8630 <_tc_timer_init+0x1dc>)
    856c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8570:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8574:	2b00      	cmp	r3, #0
    8576:	db0c      	blt.n	8592 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8578:	0959      	lsrs	r1, r3, #5
    857a:	f003 031f 	and.w	r3, r3, #31
    857e:	2201      	movs	r2, #1
    8580:	fa02 f303 	lsl.w	r3, r2, r3
    8584:	4a30      	ldr	r2, [pc, #192]	; (8648 <_tc_timer_init+0x1f4>)
    8586:	f101 0060 	add.w	r0, r1, #96	; 0x60
    858a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    858e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    8592:	2000      	movs	r0, #0
    8594:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8596:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    859a:	4a25      	ldr	r2, [pc, #148]	; (8630 <_tc_timer_init+0x1dc>)
    859c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    85a2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85a4:	6923      	ldr	r3, [r4, #16]
    85a6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85aa:	d1fb      	bne.n	85a4 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    85b0:	4a1f      	ldr	r2, [pc, #124]	; (8630 <_tc_timer_init+0x1dc>)
    85b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    85b8:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85ba:	6923      	ldr	r3, [r4, #16]
    85bc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85c0:	d1fb      	bne.n	85ba <_tc_timer_init+0x166>
    85c2:	e7a9      	b.n	8518 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    85c4:	2a04      	cmp	r2, #4
    85c6:	d1a7      	bne.n	8518 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    85c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    85cc:	4a18      	ldr	r2, [pc, #96]	; (8630 <_tc_timer_init+0x1dc>)
    85ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    85d6:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85d8:	6923      	ldr	r3, [r4, #16]
    85da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85de:	d1fb      	bne.n	85d8 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    85e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    85e4:	4a12      	ldr	r2, [pc, #72]	; (8630 <_tc_timer_init+0x1dc>)
    85e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    85ee:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85f0:	6923      	ldr	r3, [r4, #16]
    85f2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85f6:	d1fb      	bne.n	85f0 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    85f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    85fc:	4a0c      	ldr	r2, [pc, #48]	; (8630 <_tc_timer_init+0x1dc>)
    85fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8602:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    8606:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8608:	6923      	ldr	r3, [r4, #16]
    860a:	f013 0f20 	tst.w	r3, #32
    860e:	d1fb      	bne.n	8608 <_tc_timer_init+0x1b4>
    8610:	e782      	b.n	8518 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    8612:	4b0c      	ldr	r3, [pc, #48]	; (8644 <_tc_timer_init+0x1f0>)
    8614:	601e      	str	r6, [r3, #0]
    8616:	e78a      	b.n	852e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    8618:	4b0a      	ldr	r3, [pc, #40]	; (8644 <_tc_timer_init+0x1f0>)
    861a:	605e      	str	r6, [r3, #4]
    861c:	e78c      	b.n	8538 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    861e:	4b09      	ldr	r3, [pc, #36]	; (8644 <_tc_timer_init+0x1f0>)
    8620:	609e      	str	r6, [r3, #8]
    8622:	e789      	b.n	8538 <_tc_timer_init+0xe4>
    8624:	000083d9 	.word	0x000083d9
    8628:	0000e2b0 	.word	0x0000e2b0
    862c:	00005f99 	.word	0x00005f99
    8630:	0000e240 	.word	0x0000e240
    8634:	40003800 	.word	0x40003800
    8638:	40003c00 	.word	0x40003c00
    863c:	4101a000 	.word	0x4101a000
    8640:	4101c000 	.word	0x4101c000
    8644:	20000998 	.word	0x20000998
    8648:	e000e100 	.word	0xe000e100

0000864c <_tc_timer_deinit>:
{
    864c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    864e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8650:	4620      	mov	r0, r4
    8652:	4b18      	ldr	r3, [pc, #96]	; (86b4 <_tc_timer_deinit+0x68>)
    8654:	4798      	blx	r3
    8656:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8658:	22cd      	movs	r2, #205	; 0xcd
    865a:	4917      	ldr	r1, [pc, #92]	; (86b8 <_tc_timer_deinit+0x6c>)
    865c:	2001      	movs	r0, #1
    865e:	4b17      	ldr	r3, [pc, #92]	; (86bc <_tc_timer_deinit+0x70>)
    8660:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8662:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8666:	4b16      	ldr	r3, [pc, #88]	; (86c0 <_tc_timer_deinit+0x74>)
    8668:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    866c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8670:	2b00      	cmp	r3, #0
    8672:	db0d      	blt.n	8690 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8674:	095a      	lsrs	r2, r3, #5
    8676:	f003 031f 	and.w	r3, r3, #31
    867a:	2101      	movs	r1, #1
    867c:	fa01 f303 	lsl.w	r3, r1, r3
    8680:	3220      	adds	r2, #32
    8682:	4910      	ldr	r1, [pc, #64]	; (86c4 <_tc_timer_deinit+0x78>)
    8684:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    868c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8690:	6823      	ldr	r3, [r4, #0]
    8692:	f023 0302 	bic.w	r3, r3, #2
    8696:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8698:	6923      	ldr	r3, [r4, #16]
    869a:	f013 0f03 	tst.w	r3, #3
    869e:	d1fb      	bne.n	8698 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    86a0:	6823      	ldr	r3, [r4, #0]
    86a2:	f043 0301 	orr.w	r3, r3, #1
    86a6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86a8:	6923      	ldr	r3, [r4, #16]
    86aa:	f013 0f01 	tst.w	r3, #1
    86ae:	d1fb      	bne.n	86a8 <_tc_timer_deinit+0x5c>
}
    86b0:	bd38      	pop	{r3, r4, r5, pc}
    86b2:	bf00      	nop
    86b4:	000083d9 	.word	0x000083d9
    86b8:	0000e2b0 	.word	0x0000e2b0
    86bc:	00005f99 	.word	0x00005f99
    86c0:	0000e240 	.word	0x0000e240
    86c4:	e000e100 	.word	0xe000e100

000086c8 <_tc_timer_set_irq>:
{
    86c8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    86ca:	68c0      	ldr	r0, [r0, #12]
    86cc:	4b09      	ldr	r3, [pc, #36]	; (86f4 <_tc_timer_set_irq+0x2c>)
    86ce:	4798      	blx	r3
    86d0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    86d2:	f44f 7291 	mov.w	r2, #290	; 0x122
    86d6:	4908      	ldr	r1, [pc, #32]	; (86f8 <_tc_timer_set_irq+0x30>)
    86d8:	2001      	movs	r0, #1
    86da:	4b08      	ldr	r3, [pc, #32]	; (86fc <_tc_timer_set_irq+0x34>)
    86dc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    86de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    86e2:	4b07      	ldr	r3, [pc, #28]	; (8700 <_tc_timer_set_irq+0x38>)
    86e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    86e8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    86ec:	4b05      	ldr	r3, [pc, #20]	; (8704 <_tc_timer_set_irq+0x3c>)
    86ee:	4798      	blx	r3
    86f0:	bd10      	pop	{r4, pc}
    86f2:	bf00      	nop
    86f4:	000083d9 	.word	0x000083d9
    86f8:	0000e2b0 	.word	0x0000e2b0
    86fc:	00005f99 	.word	0x00005f99
    8700:	0000e240 	.word	0x0000e240
    8704:	0000652d 	.word	0x0000652d

00008708 <_tc_get_timer>:
}
    8708:	4800      	ldr	r0, [pc, #0]	; (870c <_tc_get_timer+0x4>)
    870a:	4770      	bx	lr
    870c:	20000378 	.word	0x20000378

00008710 <TC0_Handler>:
{
    8710:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8712:	4b02      	ldr	r3, [pc, #8]	; (871c <TC0_Handler+0xc>)
    8714:	6818      	ldr	r0, [r3, #0]
    8716:	4b02      	ldr	r3, [pc, #8]	; (8720 <TC0_Handler+0x10>)
    8718:	4798      	blx	r3
    871a:	bd08      	pop	{r3, pc}
    871c:	20000998 	.word	0x20000998
    8720:	000083c1 	.word	0x000083c1

00008724 <TC1_Handler>:
{
    8724:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8726:	4b02      	ldr	r3, [pc, #8]	; (8730 <TC1_Handler+0xc>)
    8728:	6858      	ldr	r0, [r3, #4]
    872a:	4b02      	ldr	r3, [pc, #8]	; (8734 <TC1_Handler+0x10>)
    872c:	4798      	blx	r3
    872e:	bd08      	pop	{r3, pc}
    8730:	20000998 	.word	0x20000998
    8734:	000083c1 	.word	0x000083c1

00008738 <TC2_Handler>:
{
    8738:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    873a:	4b02      	ldr	r3, [pc, #8]	; (8744 <TC2_Handler+0xc>)
    873c:	6898      	ldr	r0, [r3, #8]
    873e:	4b02      	ldr	r3, [pc, #8]	; (8748 <TC2_Handler+0x10>)
    8740:	4798      	blx	r3
    8742:	bd08      	pop	{r3, pc}
    8744:	20000998 	.word	0x20000998
    8748:	000083c1 	.word	0x000083c1

0000874c <TC3_Handler>:
{
    874c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    874e:	4b02      	ldr	r3, [pc, #8]	; (8758 <TC3_Handler+0xc>)
    8750:	68d8      	ldr	r0, [r3, #12]
    8752:	4b02      	ldr	r3, [pc, #8]	; (875c <TC3_Handler+0x10>)
    8754:	4798      	blx	r3
    8756:	bd08      	pop	{r3, pc}
    8758:	20000998 	.word	0x20000998
    875c:	000083c1 	.word	0x000083c1

00008760 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8760:	2000      	movs	r0, #0
    8762:	4770      	bx	lr

00008764 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8764:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8766:	7c83      	ldrb	r3, [r0, #18]
    8768:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    876c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    876e:	f002 0107 	and.w	r1, r2, #7
    8772:	2901      	cmp	r1, #1
    8774:	d00b      	beq.n	878e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8776:	015a      	lsls	r2, r3, #5
    8778:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    877c:	2110      	movs	r1, #16
    877e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8782:	015b      	lsls	r3, r3, #5
    8784:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8788:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    878c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    878e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8792:	d00c      	beq.n	87ae <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8794:	7cc2      	ldrb	r2, [r0, #19]
    8796:	f36f 1286 	bfc	r2, #6, #1
    879a:	74c2      	strb	r2, [r0, #19]
    879c:	015a      	lsls	r2, r3, #5
    879e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87a2:	2180      	movs	r1, #128	; 0x80
    87a4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    87a8:	2140      	movs	r1, #64	; 0x40
    87aa:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    87ae:	7cc2      	ldrb	r2, [r0, #19]
    87b0:	f36f 02c3 	bfc	r2, #3, #1
    87b4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    87b6:	490a      	ldr	r1, [pc, #40]	; (87e0 <_usb_d_dev_handle_setup+0x7c>)
    87b8:	015a      	lsls	r2, r3, #5
    87ba:	188c      	adds	r4, r1, r2
    87bc:	2500      	movs	r5, #0
    87be:	72a5      	strb	r5, [r4, #10]
    87c0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    87c6:	246f      	movs	r4, #111	; 0x6f
    87c8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87cc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87d0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    87d4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    87d8:	7c80      	ldrb	r0, [r0, #18]
    87da:	4798      	blx	r3
    87dc:	bd38      	pop	{r3, r4, r5, pc}
    87de:	bf00      	nop
    87e0:	200009a8 	.word	0x200009a8

000087e4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    87e4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    87e6:	2320      	movs	r3, #32
    87e8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    87ec:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    87ee:	7c83      	ldrb	r3, [r0, #18]
    87f0:	f003 030f 	and.w	r3, r3, #15
    87f4:	015b      	lsls	r3, r3, #5
    87f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87fa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    87fe:	4b04      	ldr	r3, [pc, #16]	; (8810 <_usb_d_dev_handle_stall+0x2c>)
    8800:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8804:	6882      	ldr	r2, [r0, #8]
    8806:	2101      	movs	r1, #1
    8808:	7c80      	ldrb	r0, [r0, #18]
    880a:	4798      	blx	r3
    880c:	bd08      	pop	{r3, pc}
    880e:	bf00      	nop
    8810:	200009a8 	.word	0x200009a8

00008814 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8814:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8816:	7c84      	ldrb	r4, [r0, #18]
    8818:	2cff      	cmp	r4, #255	; 0xff
    881a:	d003      	beq.n	8824 <_usb_d_dev_trans_done+0x10>
    881c:	7cc3      	ldrb	r3, [r0, #19]
    881e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8822:	d100      	bne.n	8826 <_usb_d_dev_trans_done+0x12>
    8824:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8826:	7cc2      	ldrb	r2, [r0, #19]
    8828:	f36f 1286 	bfc	r2, #6, #1
    882c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    882e:	4a03      	ldr	r2, [pc, #12]	; (883c <_usb_d_dev_trans_done+0x28>)
    8830:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8834:	6882      	ldr	r2, [r0, #8]
    8836:	4620      	mov	r0, r4
    8838:	47a8      	blx	r5
    883a:	e7f3      	b.n	8824 <_usb_d_dev_trans_done+0x10>
    883c:	200009a8 	.word	0x200009a8

00008840 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8840:	b530      	push	{r4, r5, lr}
    8842:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8844:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8846:	2425      	movs	r4, #37	; 0x25
    8848:	f88d 4004 	strb.w	r4, [sp, #4]
    884c:	244a      	movs	r4, #74	; 0x4a
    884e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8852:	2bff      	cmp	r3, #255	; 0xff
    8854:	d01e      	beq.n	8894 <_usb_d_dev_trans_stop+0x54>
    8856:	7cc4      	ldrb	r4, [r0, #19]
    8858:	f014 0f40 	tst.w	r4, #64	; 0x40
    885c:	d01a      	beq.n	8894 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    885e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8862:	b1c9      	cbz	r1, 8898 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8864:	0163      	lsls	r3, r4, #5
    8866:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    886a:	2580      	movs	r5, #128	; 0x80
    886c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8870:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8872:	a902      	add	r1, sp, #8
    8874:	440b      	add	r3, r1
    8876:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    887a:	0163      	lsls	r3, r4, #5
    887c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8880:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8884:	0163      	lsls	r3, r4, #5
    8886:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    888a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    888e:	4611      	mov	r1, r2
    8890:	4b05      	ldr	r3, [pc, #20]	; (88a8 <_usb_d_dev_trans_stop+0x68>)
    8892:	4798      	blx	r3
}
    8894:	b003      	add	sp, #12
    8896:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8898:	0163      	lsls	r3, r4, #5
    889a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    889e:	2540      	movs	r5, #64	; 0x40
    88a0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    88a4:	e7e4      	b.n	8870 <_usb_d_dev_trans_stop+0x30>
    88a6:	bf00      	nop
    88a8:	00008815 	.word	0x00008815

000088ac <_usb_d_dev_handle_trfail>:
{
    88ac:	b530      	push	{r4, r5, lr}
    88ae:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    88b0:	7c83      	ldrb	r3, [r0, #18]
    88b2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    88b6:	2204      	movs	r2, #4
    88b8:	f88d 2004 	strb.w	r2, [sp, #4]
    88bc:	2208      	movs	r2, #8
    88be:	f88d 2005 	strb.w	r2, [sp, #5]
    88c2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    88c4:	460c      	mov	r4, r1
    88c6:	b391      	cbz	r1, 892e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    88c8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    88cc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    88d0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    88d4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    88d8:	4a32      	ldr	r2, [pc, #200]	; (89a4 <_usb_d_dev_handle_trfail+0xf8>)
    88da:	440a      	add	r2, r1
    88dc:	7a91      	ldrb	r1, [r2, #10]
    88de:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    88e0:	2d02      	cmp	r5, #2
    88e2:	d02c      	beq.n	893e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    88e4:	f011 0f02 	tst.w	r1, #2
    88e8:	d045      	beq.n	8976 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    88ea:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    88ec:	7a91      	ldrb	r1, [r2, #10]
    88ee:	f36f 0141 	bfc	r1, #1, #1
    88f2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    88f4:	aa02      	add	r2, sp, #8
    88f6:	4422      	add	r2, r4
    88f8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88fc:	015a      	lsls	r2, r3, #5
    88fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8902:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8906:	015b      	lsls	r3, r3, #5
    8908:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    890c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8910:	f005 0307 	and.w	r3, r5, #7
    8914:	2b01      	cmp	r3, #1
    8916:	d143      	bne.n	89a0 <_usb_d_dev_handle_trfail+0xf4>
    8918:	7cc3      	ldrb	r3, [r0, #19]
    891a:	f013 0f40 	tst.w	r3, #64	; 0x40
    891e:	d03f      	beq.n	89a0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8920:	09d9      	lsrs	r1, r3, #7
    8922:	428c      	cmp	r4, r1
    8924:	d03c      	beq.n	89a0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8926:	2200      	movs	r2, #0
    8928:	4b1f      	ldr	r3, [pc, #124]	; (89a8 <_usb_d_dev_handle_trfail+0xfc>)
    892a:	4798      	blx	r3
    892c:	e038      	b.n	89a0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    892e:	0159      	lsls	r1, r3, #5
    8930:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8934:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8938:	f005 0507 	and.w	r5, r5, #7
    893c:	e7ca      	b.n	88d4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    893e:	f011 0f01 	tst.w	r1, #1
    8942:	d0cf      	beq.n	88e4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8944:	7a91      	ldrb	r1, [r2, #10]
    8946:	f36f 0100 	bfc	r1, #0, #1
    894a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    894c:	aa02      	add	r2, sp, #8
    894e:	4422      	add	r2, r4
    8950:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8954:	015a      	lsls	r2, r3, #5
    8956:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    895a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    895e:	015b      	lsls	r3, r3, #5
    8960:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8964:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8968:	2204      	movs	r2, #4
    896a:	1c21      	adds	r1, r4, #0
    896c:	bf18      	it	ne
    896e:	2101      	movne	r1, #1
    8970:	4b0d      	ldr	r3, [pc, #52]	; (89a8 <_usb_d_dev_handle_trfail+0xfc>)
    8972:	4798      	blx	r3
    8974:	e014      	b.n	89a0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8976:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    897a:	4a0a      	ldr	r2, [pc, #40]	; (89a4 <_usb_d_dev_handle_trfail+0xf8>)
    897c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8980:	2100      	movs	r1, #0
    8982:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8984:	aa02      	add	r2, sp, #8
    8986:	4414      	add	r4, r2
    8988:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    898c:	015a      	lsls	r2, r3, #5
    898e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8992:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8996:	015b      	lsls	r3, r3, #5
    8998:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    899c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    89a0:	b003      	add	sp, #12
    89a2:	bd30      	pop	{r4, r5, pc}
    89a4:	200009a8 	.word	0x200009a8
    89a8:	00008841 	.word	0x00008841

000089ac <_usb_d_dev_reset_epts>:
{
    89ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89b0:	4d0c      	ldr	r5, [pc, #48]	; (89e4 <_usb_d_dev_reset_epts+0x38>)
    89b2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    89b6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    89ba:	f04f 0803 	mov.w	r8, #3
    89be:	4f0a      	ldr	r7, [pc, #40]	; (89e8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    89c0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    89c2:	4641      	mov	r1, r8
    89c4:	4620      	mov	r0, r4
    89c6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    89c8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    89ca:	2300      	movs	r3, #0
    89cc:	74e3      	strb	r3, [r4, #19]
    89ce:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    89d0:	42ac      	cmp	r4, r5
    89d2:	d1f6      	bne.n	89c2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    89d4:	22c0      	movs	r2, #192	; 0xc0
    89d6:	4619      	mov	r1, r3
    89d8:	4802      	ldr	r0, [pc, #8]	; (89e4 <_usb_d_dev_reset_epts+0x38>)
    89da:	4b04      	ldr	r3, [pc, #16]	; (89ec <_usb_d_dev_reset_epts+0x40>)
    89dc:	4798      	blx	r3
    89de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89e2:	bf00      	nop
    89e4:	200009a8 	.word	0x200009a8
    89e8:	00008815 	.word	0x00008815
    89ec:	0000c547 	.word	0x0000c547

000089f0 <_usb_d_dev_in_next>:
{
    89f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89f4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    89f6:	7c84      	ldrb	r4, [r0, #18]
    89f8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    89fc:	4688      	mov	r8, r1
    89fe:	2900      	cmp	r1, #0
    8a00:	f000 80a0 	beq.w	8b44 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8a04:	4b58      	ldr	r3, [pc, #352]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8a06:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8a0a:	6958      	ldr	r0, [r3, #20]
    8a0c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8a10:	8a2b      	ldrh	r3, [r5, #16]
    8a12:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8a16:	4293      	cmp	r3, r2
    8a18:	f000 808e 	beq.w	8b38 <_usb_d_dev_in_next+0x148>
    8a1c:	3b01      	subs	r3, #1
    8a1e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8a20:	7cef      	ldrb	r7, [r5, #19]
    8a22:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8a26:	f1b8 0f00 	cmp.w	r8, #0
    8a2a:	d005      	beq.n	8a38 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8a2c:	0162      	lsls	r2, r4, #5
    8a2e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8a32:	2302      	movs	r3, #2
    8a34:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8a38:	68a9      	ldr	r1, [r5, #8]
    8a3a:	eb0e 0301 	add.w	r3, lr, r1
    8a3e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8a40:	686e      	ldr	r6, [r5, #4]
    8a42:	42b3      	cmp	r3, r6
    8a44:	d23f      	bcs.n	8ac6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8a46:	1af6      	subs	r6, r6, r3
    8a48:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8a4a:	7cea      	ldrb	r2, [r5, #19]
    8a4c:	f012 0f20 	tst.w	r2, #32
    8a50:	d02d      	beq.n	8aae <_usb_d_dev_in_next+0xbe>
    8a52:	8a2a      	ldrh	r2, [r5, #16]
    8a54:	4296      	cmp	r6, r2
    8a56:	bf28      	it	cs
    8a58:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8a5a:	6829      	ldr	r1, [r5, #0]
    8a5c:	4632      	mov	r2, r6
    8a5e:	4419      	add	r1, r3
    8a60:	68e8      	ldr	r0, [r5, #12]
    8a62:	4b42      	ldr	r3, [pc, #264]	; (8b6c <_usb_d_dev_in_next+0x17c>)
    8a64:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8a66:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8a68:	4b3f      	ldr	r3, [pc, #252]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8a6a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8a6e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8a70:	4b3d      	ldr	r3, [pc, #244]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8a72:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8a76:	695a      	ldr	r2, [r3, #20]
    8a78:	f366 020d 	bfi	r2, r6, #0, #14
    8a7c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8a7e:	695a      	ldr	r2, [r3, #20]
    8a80:	f36f 329b 	bfc	r2, #14, #14
    8a84:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8a86:	f1b8 0f00 	cmp.w	r8, #0
    8a8a:	d108      	bne.n	8a9e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8a8c:	2f01      	cmp	r7, #1
    8a8e:	bf0c      	ite	eq
    8a90:	224e      	moveq	r2, #78	; 0x4e
    8a92:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8a94:	0163      	lsls	r3, r4, #5
    8a96:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8a9a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8a9e:	0164      	lsls	r4, r4, #5
    8aa0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8aa4:	2380      	movs	r3, #128	; 0x80
    8aa6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8aae:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8ab2:	bf28      	it	cs
    8ab4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8ab8:	6829      	ldr	r1, [r5, #0]
    8aba:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8abc:	4a2a      	ldr	r2, [pc, #168]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8abe:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8ac2:	6113      	str	r3, [r2, #16]
    8ac4:	e7d4      	b.n	8a70 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8ac6:	7ceb      	ldrb	r3, [r5, #19]
    8ac8:	f013 0f10 	tst.w	r3, #16
    8acc:	d00f      	beq.n	8aee <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8ace:	7ceb      	ldrb	r3, [r5, #19]
    8ad0:	f36f 1304 	bfc	r3, #4, #1
    8ad4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8ad6:	4b24      	ldr	r3, [pc, #144]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8ad8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8adc:	695a      	ldr	r2, [r3, #20]
    8ade:	f36f 020d 	bfc	r2, #0, #14
    8ae2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8ae4:	695a      	ldr	r2, [r3, #20]
    8ae6:	f36f 329b 	bfc	r2, #14, #14
    8aea:	615a      	str	r2, [r3, #20]
    8aec:	e7cb      	b.n	8a86 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8aee:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8af0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8af4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8af8:	bf0c      	ite	eq
    8afa:	234b      	moveq	r3, #75	; 0x4b
    8afc:	234a      	movne	r3, #74	; 0x4a
    8afe:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8b02:	8a2a      	ldrh	r2, [r5, #16]
    8b04:	ea00 030e 	and.w	r3, r0, lr
    8b08:	429a      	cmp	r2, r3
    8b0a:	d005      	beq.n	8b18 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8b0c:	2100      	movs	r1, #0
    8b0e:	4628      	mov	r0, r5
    8b10:	4b17      	ldr	r3, [pc, #92]	; (8b70 <_usb_d_dev_in_next+0x180>)
    8b12:	4798      	blx	r3
	return;
    8b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8b18:	7ceb      	ldrb	r3, [r5, #19]
    8b1a:	f36f 1386 	bfc	r3, #6, #1
    8b1e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8b20:	4b11      	ldr	r3, [pc, #68]	; (8b68 <_usb_d_dev_in_next+0x178>)
    8b22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8b26:	68a9      	ldr	r1, [r5, #8]
    8b28:	7ca8      	ldrb	r0, [r5, #18]
    8b2a:	4798      	blx	r3
    8b2c:	b9d0      	cbnz	r0, 8b64 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8b2e:	7ceb      	ldrb	r3, [r5, #19]
    8b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b34:	74eb      	strb	r3, [r5, #19]
    8b36:	e7e9      	b.n	8b0c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b38:	7cef      	ldrb	r7, [r5, #19]
    8b3a:	f007 0707 	and.w	r7, r7, #7
    8b3e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8b42:	e773      	b.n	8a2c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b44:	8a03      	ldrh	r3, [r0, #16]
    8b46:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b4a:	4293      	cmp	r3, r2
    8b4c:	d107      	bne.n	8b5e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b4e:	7cef      	ldrb	r7, [r5, #19]
    8b50:	f007 0707 	and.w	r7, r7, #7
    8b54:	f04f 0e00 	mov.w	lr, #0
    8b58:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8b5c:	e76c      	b.n	8a38 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b5e:	f04f 0e00 	mov.w	lr, #0
    8b62:	e75b      	b.n	8a1c <_usb_d_dev_in_next+0x2c>
    8b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b68:	200009a8 	.word	0x200009a8
    8b6c:	0000c531 	.word	0x0000c531
    8b70:	00008815 	.word	0x00008815

00008b74 <_usb_d_dev_out_next>:
{
    8b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b78:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8b7a:	7c85      	ldrb	r5, [r0, #18]
    8b7c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8b80:	4689      	mov	r9, r1
    8b82:	2900      	cmp	r1, #0
    8b84:	d056      	beq.n	8c34 <_usb_d_dev_out_next+0xc0>
    8b86:	4b74      	ldr	r3, [pc, #464]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8b88:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8b8c:	685a      	ldr	r2, [r3, #4]
    8b8e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8b92:	685f      	ldr	r7, [r3, #4]
    8b94:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8b98:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8b9a:	8a06      	ldrh	r6, [r0, #16]
    8b9c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8ba0:	429e      	cmp	r6, r3
    8ba2:	f000 80ba 	beq.w	8d1a <_usb_d_dev_out_next+0x1a6>
    8ba6:	3e01      	subs	r6, #1
    8ba8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8baa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8bae:	f894 8013 	ldrb.w	r8, [r4, #19]
    8bb2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8bb6:	f1b9 0f00 	cmp.w	r9, #0
    8bba:	d005      	beq.n	8bc8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8bbc:	016b      	lsls	r3, r5, #5
    8bbe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bc2:	2201      	movs	r2, #1
    8bc4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8bc8:	7ce3      	ldrb	r3, [r4, #19]
    8bca:	f013 0f20 	tst.w	r3, #32
    8bce:	d00d      	beq.n	8bec <_usb_d_dev_out_next+0x78>
    8bd0:	6862      	ldr	r2, [r4, #4]
    8bd2:	2a00      	cmp	r2, #0
    8bd4:	d037      	beq.n	8c46 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8bd6:	68a0      	ldr	r0, [r4, #8]
    8bd8:	1a12      	subs	r2, r2, r0
    8bda:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8bdc:	6823      	ldr	r3, [r4, #0]
    8bde:	42ba      	cmp	r2, r7
    8be0:	bf28      	it	cs
    8be2:	463a      	movcs	r2, r7
    8be4:	68e1      	ldr	r1, [r4, #12]
    8be6:	4418      	add	r0, r3
    8be8:	4b5c      	ldr	r3, [pc, #368]	; (8d5c <_usb_d_dev_out_next+0x1e8>)
    8bea:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8bec:	6863      	ldr	r3, [r4, #4]
    8bee:	b353      	cbz	r3, 8c46 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8bf0:	f1b9 0f00 	cmp.w	r9, #0
    8bf4:	d040      	beq.n	8c78 <_usb_d_dev_out_next+0x104>
    8bf6:	8a22      	ldrh	r2, [r4, #16]
    8bf8:	42ba      	cmp	r2, r7
    8bfa:	d93d      	bls.n	8c78 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8bfc:	7ce3      	ldrb	r3, [r4, #19]
    8bfe:	f36f 1304 	bfc	r3, #4, #1
    8c02:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8c04:	68a3      	ldr	r3, [r4, #8]
    8c06:	445b      	add	r3, fp
    8c08:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8c0a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c0e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8c12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c16:	bf0c      	ite	eq
    8c18:	222d      	moveq	r2, #45	; 0x2d
    8c1a:	2225      	movne	r2, #37	; 0x25
    8c1c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8c20:	b915      	cbnz	r5, 8c28 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c22:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8c24:	4b4c      	ldr	r3, [pc, #304]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8c26:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8c28:	2100      	movs	r1, #0
    8c2a:	4620      	mov	r0, r4
    8c2c:	4b4c      	ldr	r3, [pc, #304]	; (8d60 <_usb_d_dev_out_next+0x1ec>)
    8c2e:	4798      	blx	r3
	return;
    8c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8c34:	8a06      	ldrh	r6, [r0, #16]
    8c36:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8c3a:	429e      	cmp	r6, r3
    8c3c:	d07b      	beq.n	8d36 <_usb_d_dev_out_next+0x1c2>
    8c3e:	f04f 0b00 	mov.w	fp, #0
    8c42:	46da      	mov	sl, fp
    8c44:	e7af      	b.n	8ba6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8c46:	7ce3      	ldrb	r3, [r4, #19]
    8c48:	f013 0f10 	tst.w	r3, #16
    8c4c:	d06c      	beq.n	8d28 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8c4e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8c50:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8c54:	f043 0320 	orr.w	r3, r3, #32
    8c58:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c5a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8c5c:	493e      	ldr	r1, [pc, #248]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8c5e:	016a      	lsls	r2, r5, #5
    8c60:	188b      	adds	r3, r1, r2
    8c62:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c64:	8a21      	ldrh	r1, [r4, #16]
    8c66:	685a      	ldr	r2, [r3, #4]
    8c68:	f361 329b 	bfi	r2, r1, #14, #14
    8c6c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8c6e:	685a      	ldr	r2, [r3, #4]
    8c70:	f36f 020d 	bfc	r2, #0, #14
    8c74:	605a      	str	r2, [r3, #4]
    8c76:	e01d      	b.n	8cb4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8c78:	68a2      	ldr	r2, [r4, #8]
    8c7a:	4452      	add	r2, sl
    8c7c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8c7e:	4293      	cmp	r3, r2
    8c80:	d9c3      	bls.n	8c0a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8c82:	1a9b      	subs	r3, r3, r2
    8c84:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8c86:	7ce1      	ldrb	r1, [r4, #19]
    8c88:	f011 0f20 	tst.w	r1, #32
    8c8c:	d026      	beq.n	8cdc <_usb_d_dev_out_next+0x168>
    8c8e:	8a22      	ldrh	r2, [r4, #16]
    8c90:	4293      	cmp	r3, r2
    8c92:	bf28      	it	cs
    8c94:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c96:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8c98:	016a      	lsls	r2, r5, #5
    8c9a:	492f      	ldr	r1, [pc, #188]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8c9c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c9e:	4a2e      	ldr	r2, [pc, #184]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8ca0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8ca4:	6851      	ldr	r1, [r2, #4]
    8ca6:	f363 319b 	bfi	r1, r3, #14, #14
    8caa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8cac:	6853      	ldr	r3, [r2, #4]
    8cae:	f36f 030d 	bfc	r3, #0, #14
    8cb2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8cb4:	f1b9 0f00 	cmp.w	r9, #0
    8cb8:	d108      	bne.n	8ccc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8cba:	f1b8 0f01 	cmp.w	r8, #1
    8cbe:	d025      	beq.n	8d0c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8cc0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8cc2:	016b      	lsls	r3, r5, #5
    8cc4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8cc8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8ccc:	016d      	lsls	r5, r5, #5
    8cce:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8cd2:	2340      	movs	r3, #64	; 0x40
    8cd4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    8cdc:	8a21      	ldrh	r1, [r4, #16]
    8cde:	428b      	cmp	r3, r1
    8ce0:	d90a      	bls.n	8cf8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8ce6:	d80e      	bhi.n	8d06 <_usb_d_dev_out_next+0x192>
    8ce8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8cec:	6821      	ldr	r1, [r4, #0]
    8cee:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8cf0:	0169      	lsls	r1, r5, #5
    8cf2:	4819      	ldr	r0, [pc, #100]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8cf4:	5042      	str	r2, [r0, r1]
    8cf6:	e7d2      	b.n	8c9e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8cf8:	428b      	cmp	r3, r1
    8cfa:	d2f7      	bcs.n	8cec <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    8cfc:	7ce1      	ldrb	r1, [r4, #19]
    8cfe:	f041 0120 	orr.w	r1, r1, #32
    8d02:	74e1      	strb	r1, [r4, #19]
    8d04:	e7f2      	b.n	8cec <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d0a:	e7ef      	b.n	8cec <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    8d0c:	4b12      	ldr	r3, [pc, #72]	; (8d58 <_usb_d_dev_out_next+0x1e4>)
    8d0e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8d12:	2200      	movs	r2, #0
    8d14:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8d16:	222d      	movs	r2, #45	; 0x2d
    8d18:	e7d3      	b.n	8cc2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8d1a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d1e:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d22:	f008 0807 	and.w	r8, r8, #7
    8d26:	e749      	b.n	8bbc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8d28:	f1b9 0f00 	cmp.w	r9, #0
    8d2c:	d10b      	bne.n	8d46 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    8d2e:	68a3      	ldr	r3, [r4, #8]
    8d30:	4453      	add	r3, sl
    8d32:	60a3      	str	r3, [r4, #8]
    8d34:	e769      	b.n	8c0a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d36:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d3a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8d3e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d40:	46bb      	mov	fp, r7
    8d42:	46ba      	mov	sl, r7
    8d44:	e740      	b.n	8bc8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8d46:	8a23      	ldrh	r3, [r4, #16]
    8d48:	42bb      	cmp	r3, r7
    8d4a:	f63f af57 	bhi.w	8bfc <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8d4e:	68a3      	ldr	r3, [r4, #8]
    8d50:	4453      	add	r3, sl
    8d52:	60a3      	str	r3, [r4, #8]
    8d54:	e759      	b.n	8c0a <_usb_d_dev_out_next+0x96>
    8d56:	bf00      	nop
    8d58:	200009a8 	.word	0x200009a8
    8d5c:	0000c531 	.word	0x0000c531
    8d60:	00008815 	.word	0x00008815

00008d64 <_usb_d_dev_handler>:
{
    8d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8d68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d6c:	8c1e      	ldrh	r6, [r3, #32]
    8d6e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8d70:	b146      	cbz	r6, 8d84 <_usb_d_dev_handler+0x20>
    8d72:	4d96      	ldr	r5, [pc, #600]	; (8fcc <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8d74:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8d76:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8d7a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8fe8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8d7e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8fec <_usb_d_dev_handler+0x288>
    8d82:	e0de      	b.n	8f42 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8d84:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8d86:	8b1b      	ldrh	r3, [r3, #24]
    8d88:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8d8a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8d8c:	f013 0f04 	tst.w	r3, #4
    8d90:	d11e      	bne.n	8dd0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8d92:	f413 7f00 	tst.w	r3, #512	; 0x200
    8d96:	d125      	bne.n	8de4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8d98:	f013 0f80 	tst.w	r3, #128	; 0x80
    8d9c:	d14f      	bne.n	8e3e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8d9e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8da2:	d158      	bne.n	8e56 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8da4:	f013 0f08 	tst.w	r3, #8
    8da8:	d178      	bne.n	8e9c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8daa:	f013 0f01 	tst.w	r3, #1
    8dae:	d0e0      	beq.n	8d72 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8db0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8db4:	f240 2201 	movw	r2, #513	; 0x201
    8db8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8dba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8dbc:	2270      	movs	r2, #112	; 0x70
    8dbe:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8dc0:	4b83      	ldr	r3, [pc, #524]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8dc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8dc6:	2100      	movs	r1, #0
    8dc8:	2004      	movs	r0, #4
    8dca:	4798      	blx	r3
    8dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8dd0:	2204      	movs	r2, #4
    8dd2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dd6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8dd8:	4b7d      	ldr	r3, [pc, #500]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8dda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8dde:	4798      	blx	r3
    8de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8de4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8de8:	f240 2201 	movw	r2, #513	; 0x201
    8dec:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8dee:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8df0:	2270      	movs	r2, #112	; 0x70
    8df2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8df4:	4b76      	ldr	r3, [pc, #472]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8df6:	891b      	ldrh	r3, [r3, #8]
    8df8:	f003 030f 	and.w	r3, r3, #15
    8dfc:	2b03      	cmp	r3, #3
    8dfe:	d014      	beq.n	8e2a <_usb_d_dev_handler+0xc6>
    8e00:	2301      	movs	r3, #1
    8e02:	4873      	ldr	r0, [pc, #460]	; (8fd0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8e04:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8e06:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    8e0a:	8912      	ldrh	r2, [r2, #8]
    8e0c:	f002 020f 	and.w	r2, r2, #15
    8e10:	2a03      	cmp	r2, #3
    8e12:	d00b      	beq.n	8e2c <_usb_d_dev_handler+0xc8>
    8e14:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8e16:	2b05      	cmp	r3, #5
    8e18:	d1f4      	bne.n	8e04 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8e1a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8e1c:	4b6c      	ldr	r3, [pc, #432]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8e1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e22:	2003      	movs	r0, #3
    8e24:	4798      	blx	r3
    8e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8e2a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8e2c:	4b68      	ldr	r3, [pc, #416]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8e2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8e32:	8919      	ldrh	r1, [r3, #8]
    8e34:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8e38:	2200      	movs	r2, #0
    8e3a:	811a      	strh	r2, [r3, #8]
    8e3c:	e7ee      	b.n	8e1c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e3e:	2280      	movs	r2, #128	; 0x80
    8e40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e44:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8e46:	4b62      	ldr	r3, [pc, #392]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8e48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e4c:	2100      	movs	r1, #0
    8e4e:	2005      	movs	r0, #5
    8e50:	4798      	blx	r3
    8e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e5a:	2270      	movs	r2, #112	; 0x70
    8e5c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e5e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e60:	f240 2201 	movw	r2, #513	; 0x201
    8e64:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8e66:	4b5b      	ldr	r3, [pc, #364]	; (8fd4 <_usb_d_dev_handler+0x270>)
    8e68:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8e6c:	f013 0f01 	tst.w	r3, #1
    8e70:	d00e      	beq.n	8e90 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8e72:	4a58      	ldr	r2, [pc, #352]	; (8fd4 <_usb_d_dev_handler+0x270>)
    8e74:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8e76:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8e7a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8e7e:	d1f9      	bne.n	8e74 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8e80:	4b53      	ldr	r3, [pc, #332]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8e82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e86:	2100      	movs	r1, #0
    8e88:	2002      	movs	r0, #2
    8e8a:	4798      	blx	r3
    8e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8e90:	4a50      	ldr	r2, [pc, #320]	; (8fd4 <_usb_d_dev_handler+0x270>)
    8e92:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8e94:	f413 7f80 	tst.w	r3, #256	; 0x100
    8e98:	d0fb      	beq.n	8e92 <_usb_d_dev_handler+0x12e>
    8e9a:	e7f1      	b.n	8e80 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8e9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ea0:	2400      	movs	r4, #0
    8ea2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8ea6:	2208      	movs	r2, #8
    8ea8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8eaa:	2270      	movs	r2, #112	; 0x70
    8eac:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8eae:	f240 2201 	movw	r2, #513	; 0x201
    8eb2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8eb4:	4b48      	ldr	r3, [pc, #288]	; (8fd8 <_usb_d_dev_handler+0x274>)
    8eb6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8eb8:	4b45      	ldr	r3, [pc, #276]	; (8fd0 <_usb_d_dev_handler+0x26c>)
    8eba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8ebe:	4621      	mov	r1, r4
    8ec0:	2001      	movs	r0, #1
    8ec2:	4798      	blx	r3
    8ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8ec8:	f011 0f10 	tst.w	r1, #16
    8ecc:	d109      	bne.n	8ee2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8ece:	f011 0f40 	tst.w	r1, #64	; 0x40
    8ed2:	d108      	bne.n	8ee6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8ed4:	f011 0f20 	tst.w	r1, #32
    8ed8:	d02f      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8eda:	2100      	movs	r1, #0
    8edc:	4b3f      	ldr	r3, [pc, #252]	; (8fdc <_usb_d_dev_handler+0x278>)
    8ede:	4798      	blx	r3
    8ee0:	e02b      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8ee2:	47c8      	blx	r9
    8ee4:	e029      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8ee6:	2101      	movs	r1, #1
    8ee8:	4b3c      	ldr	r3, [pc, #240]	; (8fdc <_usb_d_dev_handler+0x278>)
    8eea:	4798      	blx	r3
    8eec:	e025      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8eee:	f011 0f40 	tst.w	r1, #64	; 0x40
    8ef2:	d111      	bne.n	8f18 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8ef4:	f011 0f08 	tst.w	r1, #8
    8ef8:	d112      	bne.n	8f20 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8efa:	f011 0f02 	tst.w	r1, #2
    8efe:	d112      	bne.n	8f26 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8f00:	f003 0307 	and.w	r3, r3, #7
    8f04:	2b01      	cmp	r3, #1
    8f06:	d118      	bne.n	8f3a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8f08:	f011 0f04 	tst.w	r1, #4
    8f0c:	d10f      	bne.n	8f2e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8f0e:	f011 0f10 	tst.w	r1, #16
    8f12:	d012      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8f14:	47c8      	blx	r9
    8f16:	e010      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8f18:	2101      	movs	r1, #1
    8f1a:	4b30      	ldr	r3, [pc, #192]	; (8fdc <_usb_d_dev_handler+0x278>)
    8f1c:	4798      	blx	r3
    8f1e:	e00c      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8f20:	2101      	movs	r1, #1
    8f22:	47c0      	blx	r8
    8f24:	e009      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8f26:	2101      	movs	r1, #1
    8f28:	4b2d      	ldr	r3, [pc, #180]	; (8fe0 <_usb_d_dev_handler+0x27c>)
    8f2a:	4798      	blx	r3
    8f2c:	e005      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8f2e:	2100      	movs	r1, #0
    8f30:	47c0      	blx	r8
    8f32:	e002      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8f34:	2100      	movs	r1, #0
    8f36:	4b29      	ldr	r3, [pc, #164]	; (8fdc <_usb_d_dev_handler+0x278>)
    8f38:	4798      	blx	r3
    8f3a:	3401      	adds	r4, #1
    8f3c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8f3e:	2c1b      	cmp	r4, #27
    8f40:	d042      	beq.n	8fc8 <_usb_d_dev_handler+0x264>
    8f42:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8f44:	7cab      	ldrb	r3, [r5, #18]
    8f46:	2bff      	cmp	r3, #255	; 0xff
    8f48:	d0f7      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8f4a:	f003 030f 	and.w	r3, r3, #15
    8f4e:	2101      	movs	r1, #1
    8f50:	4099      	lsls	r1, r3
    8f52:	4231      	tst	r1, r6
    8f54:	d0f1      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8f56:	0159      	lsls	r1, r3, #5
    8f58:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8f5c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8f60:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8f62:	015b      	lsls	r3, r3, #5
    8f64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f68:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8f6c:	4019      	ands	r1, r3
    8f6e:	d0e4      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8f70:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8f74:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8f78:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8f7c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8f80:	2a01      	cmp	r2, #1
    8f82:	d0a1      	beq.n	8ec8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8f84:	f013 0f80 	tst.w	r3, #128	; 0x80
    8f88:	d1b1      	bne.n	8eee <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8f8a:	f011 0f20 	tst.w	r1, #32
    8f8e:	d1d1      	bne.n	8f34 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8f90:	f011 0f04 	tst.w	r1, #4
    8f94:	d10e      	bne.n	8fb4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8f96:	f011 0f01 	tst.w	r1, #1
    8f9a:	d10e      	bne.n	8fba <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8f9c:	f003 0307 	and.w	r3, r3, #7
    8fa0:	2b01      	cmp	r3, #1
    8fa2:	d1ca      	bne.n	8f3a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8fa4:	f011 0f08 	tst.w	r1, #8
    8fa8:	d10b      	bne.n	8fc2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8faa:	f011 0f10 	tst.w	r1, #16
    8fae:	d0c4      	beq.n	8f3a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8fb0:	47c8      	blx	r9
    8fb2:	e7c2      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8fb4:	2100      	movs	r1, #0
    8fb6:	47c0      	blx	r8
    8fb8:	e7bf      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8fba:	2101      	movs	r1, #1
    8fbc:	4b09      	ldr	r3, [pc, #36]	; (8fe4 <_usb_d_dev_handler+0x280>)
    8fbe:	4798      	blx	r3
    8fc0:	e7bb      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8fc2:	2101      	movs	r1, #1
    8fc4:	47c0      	blx	r8
    8fc6:	e7b8      	b.n	8f3a <_usb_d_dev_handler+0x1d6>
    8fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8fcc:	20000a7c 	.word	0x20000a7c
    8fd0:	200009a8 	.word	0x200009a8
    8fd4:	40001000 	.word	0x40001000
    8fd8:	000089ad 	.word	0x000089ad
    8fdc:	000087e5 	.word	0x000087e5
    8fe0:	000089f1 	.word	0x000089f1
    8fe4:	00008b75 	.word	0x00008b75
    8fe8:	00008765 	.word	0x00008765
    8fec:	000088ad 	.word	0x000088ad

00008ff0 <_usb_d_dev_init>:
{
    8ff0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8ff2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ff6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8ff8:	f013 0f01 	tst.w	r3, #1
    8ffc:	d124      	bne.n	9048 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ffe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9002:	7893      	ldrb	r3, [r2, #2]
    9004:	f013 0f03 	tst.w	r3, #3
    9008:	d1fb      	bne.n	9002 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    900a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    900e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9010:	f013 0f02 	tst.w	r3, #2
    9014:	d00f      	beq.n	9036 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9016:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    901a:	7813      	ldrb	r3, [r2, #0]
    901c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9020:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9022:	7893      	ldrb	r3, [r2, #2]
    9024:	f013 0f03 	tst.w	r3, #3
    9028:	d1fb      	bne.n	9022 <_usb_d_dev_init+0x32>
    902a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    902e:	7893      	ldrb	r3, [r2, #2]
    9030:	f013 0f02 	tst.w	r3, #2
    9034:	d1fb      	bne.n	902e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9036:	2201      	movs	r2, #1
    9038:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    903c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    903e:	461a      	mov	r2, r3
    9040:	7893      	ldrb	r3, [r2, #2]
    9042:	f013 0f03 	tst.w	r3, #3
    9046:	d1fb      	bne.n	9040 <_usb_d_dev_init+0x50>
    9048:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    904c:	7893      	ldrb	r3, [r2, #2]
    904e:	f013 0f01 	tst.w	r3, #1
    9052:	d1fb      	bne.n	904c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9054:	4b24      	ldr	r3, [pc, #144]	; (90e8 <_usb_d_dev_init+0xf8>)
    9056:	4a25      	ldr	r2, [pc, #148]	; (90ec <_usb_d_dev_init+0xfc>)
    9058:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    905c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9060:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9064:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9068:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    906c:	4b20      	ldr	r3, [pc, #128]	; (90f0 <_usb_d_dev_init+0x100>)
    906e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9070:	4b20      	ldr	r3, [pc, #128]	; (90f4 <_usb_d_dev_init+0x104>)
    9072:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    9074:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9078:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    907c:	f011 011f 	ands.w	r1, r1, #31
    9080:	d02b      	beq.n	90da <_usb_d_dev_init+0xea>
		pad_transn = 9;
    9082:	291f      	cmp	r1, #31
    9084:	bf08      	it	eq
    9086:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9088:	b34b      	cbz	r3, 90de <_usb_d_dev_init+0xee>
		pad_transp = 25;
    908a:	2b1f      	cmp	r3, #31
    908c:	bf08      	it	eq
    908e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    9090:	b33a      	cbz	r2, 90e2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    9092:	2a07      	cmp	r2, #7
    9094:	bf08      	it	eq
    9096:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9098:	f003 031f 	and.w	r3, r3, #31
    909c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    90a0:	0312      	lsls	r2, r2, #12
    90a2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    90a6:	4313      	orrs	r3, r2
    90a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    90ac:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    90ae:	78d3      	ldrb	r3, [r2, #3]
    90b0:	f043 0303 	orr.w	r3, r3, #3
    90b4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    90b6:	78d3      	ldrb	r3, [r2, #3]
    90b8:	f043 030c 	orr.w	r3, r3, #12
    90bc:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    90be:	2304      	movs	r3, #4
    90c0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    90c2:	7893      	ldrb	r3, [r2, #2]
    90c4:	f013 0f03 	tst.w	r3, #3
    90c8:	d1fb      	bne.n	90c2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    90ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90ce:	4a06      	ldr	r2, [pc, #24]	; (90e8 <_usb_d_dev_init+0xf8>)
    90d0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    90d2:	2201      	movs	r2, #1
    90d4:	811a      	strh	r2, [r3, #8]
}
    90d6:	2000      	movs	r0, #0
    90d8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    90da:	2109      	movs	r1, #9
    90dc:	e7d4      	b.n	9088 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    90de:	2319      	movs	r3, #25
    90e0:	e7d6      	b.n	9090 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    90e2:	2206      	movs	r2, #6
    90e4:	e7d8      	b.n	9098 <_usb_d_dev_init+0xa8>
    90e6:	bf00      	nop
    90e8:	200009a8 	.word	0x200009a8
    90ec:	00008761 	.word	0x00008761
    90f0:	000089ad 	.word	0x000089ad
    90f4:	00800084 	.word	0x00800084

000090f8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    90f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90fc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    90fe:	f013 0f03 	tst.w	r3, #3
    9102:	d129      	bne.n	9158 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9104:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9108:	7893      	ldrb	r3, [r2, #2]
    910a:	f013 0f03 	tst.w	r3, #3
    910e:	d1fb      	bne.n	9108 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9110:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9114:	781b      	ldrb	r3, [r3, #0]
    9116:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9118:	f013 0f02 	tst.w	r3, #2
    911c:	d108      	bne.n	9130 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    911e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9122:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9126:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9128:	7893      	ldrb	r3, [r2, #2]
    912a:	f013 0f03 	tst.w	r3, #3
    912e:	d1fb      	bne.n	9128 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9130:	4b0b      	ldr	r3, [pc, #44]	; (9160 <_usb_d_dev_enable+0x68>)
    9132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9136:	609a      	str	r2, [r3, #8]
    9138:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    913c:	609a      	str	r2, [r3, #8]
    913e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9142:	609a      	str	r2, [r3, #8]
    9144:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9148:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    914a:	f240 228d 	movw	r2, #653	; 0x28d
    914e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9152:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    9154:	2000      	movs	r0, #0
    9156:	4770      	bx	lr
		return -USB_ERR_DENIED;
    9158:	f06f 0010 	mvn.w	r0, #16
}
    915c:	4770      	bx	lr
    915e:	bf00      	nop
    9160:	e000e100 	.word	0xe000e100

00009164 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9164:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9168:	8913      	ldrh	r3, [r2, #8]
    916a:	f023 0301 	bic.w	r3, r3, #1
    916e:	041b      	lsls	r3, r3, #16
    9170:	0c1b      	lsrs	r3, r3, #16
    9172:	8113      	strh	r3, [r2, #8]
    9174:	4770      	bx	lr

00009176 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9176:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    917a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    917e:	7298      	strb	r0, [r3, #10]
    9180:	4770      	bx	lr

00009182 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    9182:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9186:	8a18      	ldrh	r0, [r3, #16]
}
    9188:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    918c:	4770      	bx	lr
	...

00009190 <_usb_d_dev_ep_init>:
{
    9190:	b5f0      	push	{r4, r5, r6, r7, lr}
    9192:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9196:	f010 050f 	ands.w	r5, r0, #15
    919a:	d04d      	beq.n	9238 <_usb_d_dev_ep_init+0xa8>
    919c:	f1be 0f00 	cmp.w	lr, #0
    91a0:	bfb4      	ite	lt
    91a2:	1d6c      	addlt	r4, r5, #5
    91a4:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    91a6:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    91aa:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    91ac:	2d05      	cmp	r5, #5
    91ae:	d947      	bls.n	9240 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    91b0:	f06f 0011 	mvn.w	r0, #17
    91b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    91b6:	f1be 0f00 	cmp.w	lr, #0
    91ba:	db1b      	blt.n	91f4 <_usb_d_dev_ep_init+0x64>
    91bc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91c0:	4e37      	ldr	r6, [pc, #220]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    91c2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    91c6:	2d00      	cmp	r5, #0
    91c8:	d15e      	bne.n	9288 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    91ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91ce:	4d34      	ldr	r5, [pc, #208]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    91d0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    91d4:	4d33      	ldr	r5, [pc, #204]	; (92a4 <_usb_d_dev_ep_init+0x114>)
    91d6:	00a6      	lsls	r6, r4, #2
    91d8:	1933      	adds	r3, r6, r4
    91da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    91de:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    91e2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    91e6:	3101      	adds	r1, #1
    91e8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    91ec:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    91f0:	2000      	movs	r0, #0
    91f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    91f4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91f8:	4e29      	ldr	r6, [pc, #164]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    91fa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    91fe:	686d      	ldr	r5, [r5, #4]
    9200:	b935      	cbnz	r5, 9210 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9206:	4d26      	ldr	r5, [pc, #152]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    9208:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    920c:	685f      	ldr	r7, [r3, #4]
    920e:	e7e1      	b.n	91d4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9210:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9214:	4e22      	ldr	r6, [pc, #136]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    9216:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    921a:	896d      	ldrh	r5, [r5, #10]
    921c:	4295      	cmp	r5, r2
    921e:	daf0      	bge.n	9202 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    9220:	f06f 0012 	mvn.w	r0, #18
    9224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    9226:	f06f 0013 	mvn.w	r0, #19
    922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    922c:	f06f 0013 	mvn.w	r0, #19
    9230:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    9232:	f06f 0012 	mvn.w	r0, #18
    9236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9238:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    923c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    923e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    9240:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9244:	4f17      	ldr	r7, [pc, #92]	; (92a4 <_usb_d_dev_ep_init+0x114>)
    9246:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    924a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    924e:	2eff      	cmp	r6, #255	; 0xff
    9250:	d1e9      	bne.n	9226 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9252:	2900      	cmp	r1, #0
    9254:	d1af      	bne.n	91b6 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9256:	b125      	cbz	r5, 9262 <_usb_d_dev_ep_init+0xd2>
    9258:	f1be 0f00 	cmp.w	lr, #0
    925c:	bfa4      	itt	ge
    925e:	3505      	addge	r5, #5
    9260:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    9262:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9266:	4e0f      	ldr	r6, [pc, #60]	; (92a4 <_usb_d_dev_ep_init+0x114>)
    9268:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    926c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9270:	2dff      	cmp	r5, #255	; 0xff
    9272:	d1db      	bne.n	922c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9274:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9278:	4e09      	ldr	r6, [pc, #36]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    927a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    927e:	2d00      	cmp	r5, #0
    9280:	d0d7      	beq.n	9232 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9282:	f1be 0f00 	cmp.w	lr, #0
    9286:	dbb5      	blt.n	91f4 <_usb_d_dev_ep_init+0x64>
    9288:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    928c:	4e04      	ldr	r6, [pc, #16]	; (92a0 <_usb_d_dev_ep_init+0x110>)
    928e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9292:	892d      	ldrh	r5, [r5, #8]
    9294:	4295      	cmp	r5, r2
    9296:	da98      	bge.n	91ca <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    9298:	f06f 0012 	mvn.w	r0, #18
    929c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    929e:	bf00      	nop
    92a0:	0000e2c4 	.word	0x0000e2c4
    92a4:	200009a8 	.word	0x200009a8

000092a8 <_usb_d_dev_ep_deinit>:
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92aa:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    92ac:	f010 060f 	ands.w	r6, r0, #15
    92b0:	d00e      	beq.n	92d0 <_usb_d_dev_ep_deinit+0x28>
    92b2:	2f00      	cmp	r7, #0
    92b4:	bfb4      	ite	lt
    92b6:	1d73      	addlt	r3, r6, #5
    92b8:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    92ba:	2e05      	cmp	r6, #5
    92bc:	d900      	bls.n	92c0 <_usb_d_dev_ep_deinit+0x18>
    92be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    92c0:	461d      	mov	r5, r3
    92c2:	3301      	adds	r3, #1
    92c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    92c8:	4a24      	ldr	r2, [pc, #144]	; (935c <_usb_d_dev_ep_deinit+0xb4>)
    92ca:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    92ce:	e002      	b.n	92d6 <_usb_d_dev_ep_deinit+0x2e>
    92d0:	f8df e094 	ldr.w	lr, [pc, #148]	; 9368 <_usb_d_dev_ep_deinit+0xc0>
    92d4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    92d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    92da:	4a21      	ldr	r2, [pc, #132]	; (9360 <_usb_d_dev_ep_deinit+0xb8>)
    92dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    92e0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    92e4:	2aff      	cmp	r2, #255	; 0xff
    92e6:	d0ea      	beq.n	92be <_usb_d_dev_ep_deinit+0x16>
    92e8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    92ea:	2203      	movs	r2, #3
    92ec:	0ff9      	lsrs	r1, r7, #31
    92ee:	4670      	mov	r0, lr
    92f0:	4b1c      	ldr	r3, [pc, #112]	; (9364 <_usb_d_dev_ep_deinit+0xbc>)
    92f2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    92f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    92f8:	4a19      	ldr	r2, [pc, #100]	; (9360 <_usb_d_dev_ep_deinit+0xb8>)
    92fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    92fe:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9302:	f003 0307 	and.w	r3, r3, #7
    9306:	2b01      	cmp	r3, #1
    9308:	d016      	beq.n	9338 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    930a:	2f00      	cmp	r7, #0
    930c:	db1b      	blt.n	9346 <_usb_d_dev_ep_deinit+0x9e>
    930e:	0160      	lsls	r0, r4, #5
    9310:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9314:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    9318:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    931c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    9320:	4b0f      	ldr	r3, [pc, #60]	; (9360 <_usb_d_dev_ep_deinit+0xb8>)
    9322:	00aa      	lsls	r2, r5, #2
    9324:	1951      	adds	r1, r2, r5
    9326:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    932a:	2000      	movs	r0, #0
    932c:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    9330:	22ff      	movs	r2, #255	; 0xff
    9332:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    9336:	e7c2      	b.n	92be <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9338:	0160      	lsls	r0, r4, #5
    933a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    933e:	2300      	movs	r3, #0
    9340:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    9344:	e7ec      	b.n	9320 <_usb_d_dev_ep_deinit+0x78>
    9346:	0176      	lsls	r6, r6, #5
    9348:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    934c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    9350:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    9354:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    9358:	e7e2      	b.n	9320 <_usb_d_dev_ep_deinit+0x78>
    935a:	bf00      	nop
    935c:	20000a68 	.word	0x20000a68
    9360:	200009a8 	.word	0x200009a8
    9364:	00008841 	.word	0x00008841
    9368:	20000a7c 	.word	0x20000a7c

0000936c <_usb_d_dev_ep_enable>:
{
    936c:	b4f0      	push	{r4, r5, r6, r7}
    936e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9370:	f010 000f 	ands.w	r0, r0, #15
    9374:	f000 80a7 	beq.w	94c6 <_usb_d_dev_ep_enable+0x15a>
    9378:	2e00      	cmp	r6, #0
    937a:	bfb4      	ite	lt
    937c:	1d43      	addlt	r3, r0, #5
    937e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9380:	4605      	mov	r5, r0
    9382:	0142      	lsls	r2, r0, #5
    9384:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9388:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    938c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    938e:	2805      	cmp	r0, #5
    9390:	f240 80a0 	bls.w	94d4 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    9394:	f06f 0011 	mvn.w	r0, #17
    9398:	e07d      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    939a:	f014 0f77 	tst.w	r4, #119	; 0x77
    939e:	f040 8089 	bne.w	94b4 <_usb_d_dev_ep_enable+0x148>
    93a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    93a6:	2111      	movs	r1, #17
    93a8:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93ac:	4c9b      	ldr	r4, [pc, #620]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    93ae:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    93b2:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    93b6:	4c9a      	ldr	r4, [pc, #616]	; (9620 <_usb_d_dev_ep_enable+0x2b4>)
    93b8:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    93c0:	f200 80cd 	bhi.w	955e <_usb_d_dev_ep_enable+0x1f2>
    93c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    93c8:	f200 8112 	bhi.w	95f0 <_usb_d_dev_ep_enable+0x284>
    93cc:	2980      	cmp	r1, #128	; 0x80
    93ce:	f200 8101 	bhi.w	95d4 <_usb_d_dev_ep_enable+0x268>
    93d2:	2940      	cmp	r1, #64	; 0x40
    93d4:	f200 8113 	bhi.w	95fe <_usb_d_dev_ep_enable+0x292>
    93d8:	2920      	cmp	r1, #32
    93da:	f200 8102 	bhi.w	95e2 <_usb_d_dev_ep_enable+0x276>
    93de:	2910      	cmp	r1, #16
    93e0:	f200 8114 	bhi.w	960c <_usb_d_dev_ep_enable+0x2a0>
    93e4:	2908      	cmp	r1, #8
    93e6:	bf94      	ite	ls
    93e8:	2600      	movls	r6, #0
    93ea:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93ec:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93f0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93f2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    93f6:	e0b8      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    93f8:	f014 0f70 	tst.w	r4, #112	; 0x70
    93fc:	d15d      	bne.n	94ba <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    93fe:	4e87      	ldr	r6, [pc, #540]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    9400:	009f      	lsls	r7, r3, #2
    9402:	18f9      	adds	r1, r7, r3
    9404:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9408:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    940c:	0109      	lsls	r1, r1, #4
    940e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    9412:	430c      	orrs	r4, r1
    9414:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9418:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    941c:	443b      	add	r3, r7
    941e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9422:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    9426:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    942a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    942e:	d80f      	bhi.n	9450 <_usb_d_dev_ep_enable+0xe4>
    9430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9434:	d819      	bhi.n	946a <_usb_d_dev_ep_enable+0xfe>
    9436:	2b80      	cmp	r3, #128	; 0x80
    9438:	d819      	bhi.n	946e <_usb_d_dev_ep_enable+0x102>
    943a:	2b40      	cmp	r3, #64	; 0x40
    943c:	d819      	bhi.n	9472 <_usb_d_dev_ep_enable+0x106>
    943e:	2b20      	cmp	r3, #32
    9440:	d819      	bhi.n	9476 <_usb_d_dev_ep_enable+0x10a>
    9442:	2b10      	cmp	r3, #16
    9444:	d819      	bhi.n	947a <_usb_d_dev_ep_enable+0x10e>
    9446:	2b08      	cmp	r3, #8
    9448:	bf94      	ite	ls
    944a:	2300      	movls	r3, #0
    944c:	2301      	movhi	r3, #1
    944e:	e000      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    9450:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9452:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    9456:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9458:	2380      	movs	r3, #128	; 0x80
    945a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    945e:	4b6f      	ldr	r3, [pc, #444]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    9460:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9464:	2000      	movs	r0, #0
    9466:	76a8      	strb	r0, [r5, #26]
    9468:	e015      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    946a:	2306      	movs	r3, #6
    946c:	e7f1      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    946e:	2305      	movs	r3, #5
    9470:	e7ef      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    9472:	2304      	movs	r3, #4
    9474:	e7ed      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    9476:	2303      	movs	r3, #3
    9478:	e7eb      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    947a:	2302      	movs	r3, #2
    947c:	e7e9      	b.n	9452 <_usb_d_dev_ep_enable+0xe6>
    947e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9480:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9484:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9486:	2340      	movs	r3, #64	; 0x40
    9488:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    948c:	4b63      	ldr	r3, [pc, #396]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    948e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9492:	2000      	movs	r0, #0
    9494:	72a8      	strb	r0, [r5, #10]
}
    9496:	bcf0      	pop	{r4, r5, r6, r7}
    9498:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    949a:	2106      	movs	r1, #6
    949c:	e7f0      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
    949e:	2105      	movs	r1, #5
    94a0:	e7ee      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
    94a2:	2104      	movs	r1, #4
    94a4:	e7ec      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
    94a6:	2103      	movs	r1, #3
    94a8:	e7ea      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
    94aa:	2102      	movs	r1, #2
    94ac:	e7e8      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    94ae:	f06f 0011 	mvn.w	r0, #17
    94b2:	e7f0      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    94b4:	f06f 0013 	mvn.w	r0, #19
    94b8:	e7ed      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    94ba:	f06f 0013 	mvn.w	r0, #19
    94be:	e7ea      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    94c0:	f06f 0013 	mvn.w	r0, #19
    94c4:	e7e7      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    94c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94ca:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    94ce:	b2e4      	uxtb	r4, r4
    94d0:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    94d2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    94d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    94d8:	4950      	ldr	r1, [pc, #320]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    94da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    94de:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    94e2:	2aff      	cmp	r2, #255	; 0xff
    94e4:	d0e3      	beq.n	94ae <_usb_d_dev_ep_enable+0x142>
    94e6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    94e8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    94ea:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    94ee:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    94f2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    94f6:	f001 0107 	and.w	r1, r1, #7
    94fa:	2901      	cmp	r1, #1
    94fc:	f43f af4d 	beq.w	939a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    9500:	2e00      	cmp	r6, #0
    9502:	f6ff af79 	blt.w	93f8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9506:	f014 0f07 	tst.w	r4, #7
    950a:	d1d9      	bne.n	94c0 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    950c:	4e43      	ldr	r6, [pc, #268]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    950e:	009f      	lsls	r7, r3, #2
    9510:	18f9      	adds	r1, r7, r3
    9512:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9516:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    951a:	f001 0107 	and.w	r1, r1, #7
    951e:	430c      	orrs	r4, r1
    9520:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9524:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9528:	443b      	add	r3, r7
    952a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    952e:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    9532:	4b3b      	ldr	r3, [pc, #236]	; (9620 <_usb_d_dev_ep_enable+0x2b4>)
    9534:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9538:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    953c:	d89f      	bhi.n	947e <_usb_d_dev_ep_enable+0x112>
    953e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9542:	d8aa      	bhi.n	949a <_usb_d_dev_ep_enable+0x12e>
    9544:	2980      	cmp	r1, #128	; 0x80
    9546:	d8aa      	bhi.n	949e <_usb_d_dev_ep_enable+0x132>
    9548:	2940      	cmp	r1, #64	; 0x40
    954a:	d8aa      	bhi.n	94a2 <_usb_d_dev_ep_enable+0x136>
    954c:	2920      	cmp	r1, #32
    954e:	d8aa      	bhi.n	94a6 <_usb_d_dev_ep_enable+0x13a>
    9550:	2910      	cmp	r1, #16
    9552:	d8aa      	bhi.n	94aa <_usb_d_dev_ep_enable+0x13e>
    9554:	2908      	cmp	r1, #8
    9556:	bf94      	ite	ls
    9558:	2100      	movls	r1, #0
    955a:	2101      	movhi	r1, #1
    955c:	e790      	b.n	9480 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    955e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9562:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9564:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9568:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    956a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    956e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9570:	2640      	movs	r6, #64	; 0x40
    9572:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9576:	2180      	movs	r1, #128	; 0x80
    9578:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    957c:	4f27      	ldr	r7, [pc, #156]	; (961c <_usb_d_dev_ep_enable+0x2b0>)
    957e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9582:	2000      	movs	r0, #0
    9584:	72a8      	strb	r0, [r5, #10]
    9586:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9588:	009c      	lsls	r4, r3, #2
    958a:	18e1      	adds	r1, r4, r3
    958c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9590:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9594:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9598:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    959c:	0152      	lsls	r2, r2, #5
    959e:	18b9      	adds	r1, r7, r2
    95a0:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    95a2:	4423      	add	r3, r4
    95a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    95a8:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    95ac:	684b      	ldr	r3, [r1, #4]
    95ae:	f364 339b 	bfi	r3, r4, #14, #14
    95b2:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    95b4:	684b      	ldr	r3, [r1, #4]
    95b6:	f360 030d 	bfi	r3, r0, #0, #14
    95ba:	604b      	str	r3, [r1, #4]
    95bc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    95c0:	21b0      	movs	r1, #176	; 0xb0
    95c2:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    95c6:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    95ca:	461a      	mov	r2, r3
    95cc:	2310      	movs	r3, #16
    95ce:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    95d2:	e760      	b.n	9496 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95d4:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95d8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95da:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95de:	2605      	movs	r6, #5
    95e0:	e7c3      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95e2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95e6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95e8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95ec:	2603      	movs	r6, #3
    95ee:	e7bc      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95f0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95f4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95f6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95fa:	2606      	movs	r6, #6
    95fc:	e7b5      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95fe:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9602:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9604:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9608:	2604      	movs	r6, #4
    960a:	e7ae      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    960c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9610:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9612:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9616:	2602      	movs	r6, #2
    9618:	e7a7      	b.n	956a <_usb_d_dev_ep_enable+0x1fe>
    961a:	bf00      	nop
    961c:	200009a8 	.word	0x200009a8
    9620:	0fffc000 	.word	0x0fffc000

00009624 <_usb_d_dev_ep_stall>:
{
    9624:	b470      	push	{r4, r5, r6}
    9626:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    9628:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    962a:	f010 000f 	ands.w	r0, r0, #15
    962e:	d008      	beq.n	9642 <_usb_d_dev_ep_stall+0x1e>
    9630:	2b00      	cmp	r3, #0
    9632:	bfb4      	ite	lt
    9634:	1d43      	addlt	r3, r0, #5
    9636:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    9638:	2805      	cmp	r0, #5
    963a:	d903      	bls.n	9644 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    963c:	f06f 0011 	mvn.w	r0, #17
    9640:	e018      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9642:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9644:	2901      	cmp	r1, #1
    9646:	d017      	beq.n	9678 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9648:	2900      	cmp	r1, #0
    964a:	d03a      	beq.n	96c2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    964c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9650:	4a45      	ldr	r2, [pc, #276]	; (9768 <_usb_d_dev_ep_stall+0x144>)
    9652:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9656:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    965a:	f003 030f 	and.w	r3, r3, #15
    965e:	015b      	lsls	r3, r3, #5
    9660:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9664:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9668:	2310      	movs	r3, #16
    966a:	40a3      	lsls	r3, r4
    966c:	421a      	tst	r2, r3
    966e:	bf14      	ite	ne
    9670:	2001      	movne	r0, #1
    9672:	2000      	moveq	r0, #0
}
    9674:	bc70      	pop	{r4, r5, r6}
    9676:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9678:	2510      	movs	r5, #16
    967a:	40a5      	lsls	r5, r4
    967c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    967e:	493a      	ldr	r1, [pc, #232]	; (9768 <_usb_d_dev_ep_stall+0x144>)
    9680:	009e      	lsls	r6, r3, #2
    9682:	18f2      	adds	r2, r6, r3
    9684:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9688:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    968c:	f002 020f 	and.w	r2, r2, #15
    9690:	0150      	lsls	r0, r2, #5
    9692:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9696:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    969a:	2020      	movs	r0, #32
    969c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    96a0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    96a2:	0152      	lsls	r2, r2, #5
    96a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    96a8:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    96ac:	4433      	add	r3, r6
    96ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    96b2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    96b6:	f042 0208 	orr.w	r2, r2, #8
    96ba:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    96be:	2000      	movs	r0, #0
    96c0:	e7d8      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    96c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    96c6:	4928      	ldr	r1, [pc, #160]	; (9768 <_usb_d_dev_ep_stall+0x144>)
    96c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    96cc:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    96d0:	f002 020f 	and.w	r2, r2, #15
    96d4:	0151      	lsls	r1, r2, #5
    96d6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    96da:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96de:	2010      	movs	r0, #16
    96e0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    96e2:	4205      	tst	r5, r0
    96e4:	d03c      	beq.n	9760 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96e6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    96e8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    96ec:	2020      	movs	r0, #32
    96ee:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    96f0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    96f2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    96f6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    96fa:	4202      	tst	r2, r0
    96fc:	d007      	beq.n	970e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    96fe:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9702:	2201      	movs	r2, #1
    9704:	fa02 f404 	lsl.w	r4, r2, r4
    9708:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    970a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    970e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9712:	4815      	ldr	r0, [pc, #84]	; (9768 <_usb_d_dev_ep_stall+0x144>)
    9714:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9718:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    971c:	f002 0207 	and.w	r2, r2, #7
    9720:	2a01      	cmp	r2, #1
    9722:	d00c      	beq.n	973e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9724:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9728:	4a0f      	ldr	r2, [pc, #60]	; (9768 <_usb_d_dev_ep_stall+0x144>)
    972a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    972e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9732:	f36f 02c3 	bfc	r2, #3, #1
    9736:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    973a:	2000      	movs	r0, #0
    973c:	e79a      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    973e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9742:	f012 0f30 	tst.w	r2, #48	; 0x30
    9746:	d10d      	bne.n	9764 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    9748:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    974c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9750:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9754:	f36f 02c3 	bfc	r2, #3, #1
    9758:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    975c:	2000      	movs	r0, #0
    975e:	e789      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
    9760:	2000      	movs	r0, #0
    9762:	e787      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
    9764:	2000      	movs	r0, #0
    9766:	e785      	b.n	9674 <_usb_d_dev_ep_stall+0x50>
    9768:	200009a8 	.word	0x200009a8

0000976c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    976c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    976e:	f000 040f 	and.w	r4, r0, #15
    9772:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9774:	4a14      	ldr	r2, [pc, #80]	; (97c8 <_usb_d_dev_ep_read_req+0x5c>)
    9776:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9778:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    977a:	6840      	ldr	r0, [r0, #4]
    977c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9780:	2c05      	cmp	r4, #5
    9782:	d817      	bhi.n	97b4 <_usb_d_dev_ep_read_req+0x48>
    9784:	b1c9      	cbz	r1, 97ba <_usb_d_dev_ep_read_req+0x4e>
    9786:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    978a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    978e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9790:	2a11      	cmp	r2, #17
    9792:	d115      	bne.n	97c0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9794:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9798:	f012 0f10 	tst.w	r2, #16
    979c:	d102      	bne.n	97a4 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    979e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    97a0:	bc30      	pop	{r4, r5}
    97a2:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    97a4:	682c      	ldr	r4, [r5, #0]
    97a6:	686a      	ldr	r2, [r5, #4]
    97a8:	600c      	str	r4, [r1, #0]
    97aa:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    97ac:	2210      	movs	r2, #16
    97ae:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    97b2:	e7f5      	b.n	97a0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    97b4:	f06f 0011 	mvn.w	r0, #17
    97b8:	e7f2      	b.n	97a0 <_usb_d_dev_ep_read_req+0x34>
    97ba:	f06f 0011 	mvn.w	r0, #17
    97be:	e7ef      	b.n	97a0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    97c0:	f06f 0012 	mvn.w	r0, #18
    97c4:	e7ec      	b.n	97a0 <_usb_d_dev_ep_read_req+0x34>
    97c6:	bf00      	nop
    97c8:	200009a8 	.word	0x200009a8

000097cc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    97cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97d0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    97d2:	7a03      	ldrb	r3, [r0, #8]
    97d4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    97d6:	f013 030f 	ands.w	r3, r3, #15
    97da:	f000 80c2 	beq.w	9962 <_usb_d_dev_ep_trans+0x196>
    97de:	2e00      	cmp	r6, #0
    97e0:	bfb4      	ite	lt
    97e2:	1d5a      	addlt	r2, r3, #5
    97e4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    97e6:	4614      	mov	r4, r2
    97e8:	4969      	ldr	r1, [pc, #420]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    97ea:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    97ee:	1c55      	adds	r5, r2, #1
    97f0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    97f4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    97f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    97fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9800:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9804:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9808:	428a      	cmp	r2, r1
    980a:	d025      	beq.n	9858 <_usb_d_dev_ep_trans+0x8c>
    980c:	1e55      	subs	r5, r2, #1
    980e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9810:	6841      	ldr	r1, [r0, #4]
    9812:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9814:	2b05      	cmp	r3, #5
    9816:	f200 8092 	bhi.w	993e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    981a:	6803      	ldr	r3, [r0, #0]
    981c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9820:	d31c      	bcc.n	985c <_usb_d_dev_ep_trans+0x90>
    9822:	eb03 0c01 	add.w	ip, r3, r1
    9826:	f8df e180 	ldr.w	lr, [pc, #384]	; 99a8 <_usb_d_dev_ep_trans+0x1dc>
    982a:	45f4      	cmp	ip, lr
    982c:	d816      	bhi.n	985c <_usb_d_dev_ep_trans+0x90>
    982e:	f013 0f03 	tst.w	r3, #3
    9832:	d113      	bne.n	985c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9834:	2e00      	cmp	r6, #0
    9836:	db2a      	blt.n	988e <_usb_d_dev_ep_trans+0xc2>
    9838:	428a      	cmp	r2, r1
    983a:	f200 809c 	bhi.w	9976 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    983e:	b34d      	cbz	r5, 9894 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9840:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9844:	4a52      	ldr	r2, [pc, #328]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    9846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    984a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    984e:	2b00      	cmp	r3, #0
    9850:	d07b      	beq.n	994a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9852:	f04f 0800 	mov.w	r8, #0
    9856:	e00c      	b.n	9872 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9858:	4615      	mov	r5, r2
    985a:	e7d9      	b.n	9810 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    985c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9860:	4a4b      	ldr	r2, [pc, #300]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    9862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    986a:	2b00      	cmp	r3, #0
    986c:	d06a      	beq.n	9944 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    986e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9872:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9876:	4a46      	ldr	r2, [pc, #280]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    9878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    987c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9880:	f013 0f08 	tst.w	r3, #8
    9884:	d009      	beq.n	989a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    9886:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9888:	b003      	add	sp, #12
    988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    988e:	f04f 0800 	mov.w	r8, #0
    9892:	e7ee      	b.n	9872 <_usb_d_dev_ep_trans+0xa6>
    9894:	f04f 0800 	mov.w	r8, #0
    9898:	e7eb      	b.n	9872 <_usb_d_dev_ep_trans+0xa6>
    989a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    989c:	a801      	add	r0, sp, #4
    989e:	4b3d      	ldr	r3, [pc, #244]	; (9994 <_usb_d_dev_ep_trans+0x1c8>)
    98a0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    98a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    98a6:	4a3a      	ldr	r2, [pc, #232]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    98a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    98ac:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    98b0:	f013 0f40 	tst.w	r3, #64	; 0x40
    98b4:	d13c      	bne.n	9930 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    98b6:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    98ba:	4b35      	ldr	r3, [pc, #212]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    98bc:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    98c0:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    98c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98c8:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    98cc:	a801      	add	r0, sp, #4
    98ce:	4b32      	ldr	r3, [pc, #200]	; (9998 <_usb_d_dev_ep_trans+0x1cc>)
    98d0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    98d2:	f8da 3000 	ldr.w	r3, [sl]
    98d6:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    98da:	f8da 3004 	ldr.w	r3, [sl, #4]
    98de:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    98e2:	2300      	movs	r3, #0
    98e4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    98e8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    98ea:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    98ee:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    98f2:	f368 1345 	bfi	r3, r8, #5, #1
    98f6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    98fa:	f89a 3009 	ldrb.w	r3, [sl, #9]
    98fe:	b1e3      	cbz	r3, 993a <_usb_d_dev_ep_trans+0x16e>
    9900:	fab5 f585 	clz	r5, r5
    9904:	096d      	lsrs	r5, r5, #5
    9906:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    990a:	4b21      	ldr	r3, [pc, #132]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    990c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9910:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9914:	f365 1304 	bfi	r3, r5, #4, #1
    9918:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    991c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    991e:	f04f 0100 	mov.w	r1, #0
    9922:	4638      	mov	r0, r7
    9924:	bfb4      	ite	lt
    9926:	4b1d      	ldrlt	r3, [pc, #116]	; (999c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    9928:	4b1d      	ldrge	r3, [pc, #116]	; (99a0 <_usb_d_dev_ep_trans+0x1d4>)
    992a:	4798      	blx	r3
	return ERR_NONE;
    992c:	2000      	movs	r0, #0
    992e:	e7ab      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9930:	a801      	add	r0, sp, #4
    9932:	4b19      	ldr	r3, [pc, #100]	; (9998 <_usb_d_dev_ep_trans+0x1cc>)
    9934:	4798      	blx	r3
		return USB_BUSY;
    9936:	2001      	movs	r0, #1
    9938:	e7a6      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
    993a:	2500      	movs	r5, #0
    993c:	e7e3      	b.n	9906 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    993e:	f06f 0011 	mvn.w	r0, #17
    9942:	e7a1      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9944:	f06f 0012 	mvn.w	r0, #18
    9948:	e79e      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    994a:	f06f 0011 	mvn.w	r0, #17
    994e:	e79b      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9950:	f06f 0012 	mvn.w	r0, #18
    9954:	e798      	b.n	9888 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9956:	6841      	ldr	r1, [r0, #4]
    9958:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    995c:	4f11      	ldr	r7, [pc, #68]	; (99a4 <_usb_d_dev_ep_trans+0x1d8>)
    995e:	2400      	movs	r4, #0
    9960:	e75b      	b.n	981a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9962:	4a0b      	ldr	r2, [pc, #44]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    9964:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9968:	f240 31ff 	movw	r1, #1023	; 0x3ff
    996c:	428a      	cmp	r2, r1
    996e:	d0f2      	beq.n	9956 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9970:	4f0c      	ldr	r7, [pc, #48]	; (99a4 <_usb_d_dev_ep_trans+0x1d8>)
    9972:	2400      	movs	r4, #0
    9974:	e74a      	b.n	980c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9976:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    997a:	4a05      	ldr	r2, [pc, #20]	; (9990 <_usb_d_dev_ep_trans+0x1c4>)
    997c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9984:	2b00      	cmp	r3, #0
    9986:	d0e3      	beq.n	9950 <_usb_d_dev_ep_trans+0x184>
    9988:	f04f 0801 	mov.w	r8, #1
    998c:	e771      	b.n	9872 <_usb_d_dev_ep_trans+0xa6>
    998e:	bf00      	nop
    9990:	200009a8 	.word	0x200009a8
    9994:	00004ba5 	.word	0x00004ba5
    9998:	00004bb3 	.word	0x00004bb3
    999c:	000089f1 	.word	0x000089f1
    99a0:	00008b75 	.word	0x00008b75
    99a4:	20000a7c 	.word	0x20000a7c
    99a8:	20041fff 	.word	0x20041fff

000099ac <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    99ac:	4b07      	ldr	r3, [pc, #28]	; (99cc <_usb_d_dev_register_callback+0x20>)
    99ae:	2900      	cmp	r1, #0
    99b0:	bf08      	it	eq
    99b2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    99b4:	2801      	cmp	r0, #1
    99b6:	d004      	beq.n	99c2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    99b8:	b910      	cbnz	r0, 99c0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    99ba:	4b05      	ldr	r3, [pc, #20]	; (99d0 <_usb_d_dev_register_callback+0x24>)
    99bc:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    99c0:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    99c2:	4b03      	ldr	r3, [pc, #12]	; (99d0 <_usb_d_dev_register_callback+0x24>)
    99c4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    99c8:	4770      	bx	lr
    99ca:	bf00      	nop
    99cc:	00008761 	.word	0x00008761
    99d0:	200009a8 	.word	0x200009a8

000099d4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    99d4:	4b0a      	ldr	r3, [pc, #40]	; (9a00 <_usb_d_dev_register_ep_callback+0x2c>)
    99d6:	2900      	cmp	r1, #0
    99d8:	bf08      	it	eq
    99da:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    99dc:	4603      	mov	r3, r0
    99de:	b138      	cbz	r0, 99f0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    99e0:	2801      	cmp	r0, #1
    99e2:	d009      	beq.n	99f8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    99e4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    99e6:	bf04      	itt	eq
    99e8:	4b06      	ldreq	r3, [pc, #24]	; (9a04 <_usb_d_dev_register_ep_callback+0x30>)
    99ea:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    99ee:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    99f0:	4b04      	ldr	r3, [pc, #16]	; (9a04 <_usb_d_dev_register_ep_callback+0x30>)
    99f2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    99f6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    99f8:	4b02      	ldr	r3, [pc, #8]	; (9a04 <_usb_d_dev_register_ep_callback+0x30>)
    99fa:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    99fe:	4770      	bx	lr
    9a00:	00008761 	.word	0x00008761
    9a04:	200009a8 	.word	0x200009a8

00009a08 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    9a08:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9a0a:	4b01      	ldr	r3, [pc, #4]	; (9a10 <USB_0_Handler+0x8>)
    9a0c:	4798      	blx	r3
    9a0e:	bd08      	pop	{r3, pc}
    9a10:	00008d65 	.word	0x00008d65

00009a14 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9a14:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9a16:	4b01      	ldr	r3, [pc, #4]	; (9a1c <USB_1_Handler+0x8>)
    9a18:	4798      	blx	r3
    9a1a:	bd08      	pop	{r3, pc}
    9a1c:	00008d65 	.word	0x00008d65

00009a20 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9a20:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9a22:	4b01      	ldr	r3, [pc, #4]	; (9a28 <USB_2_Handler+0x8>)
    9a24:	4798      	blx	r3
    9a26:	bd08      	pop	{r3, pc}
    9a28:	00008d65 	.word	0x00008d65

00009a2c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9a2c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9a2e:	4b01      	ldr	r3, [pc, #4]	; (9a34 <USB_3_Handler+0x8>)
    9a30:	4798      	blx	r3
    9a32:	bd08      	pop	{r3, pc}
    9a34:	00008d65 	.word	0x00008d65

00009a38 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9a38:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    9a3a:	4604      	mov	r4, r0
    9a3c:	b340      	cbz	r0, 9a90 <_wdt_init+0x58>
    9a3e:	6800      	ldr	r0, [r0, #0]
    9a40:	3000      	adds	r0, #0
    9a42:	bf18      	it	ne
    9a44:	2001      	movne	r0, #1
    9a46:	2250      	movs	r2, #80	; 0x50
    9a48:	4915      	ldr	r1, [pc, #84]	; (9aa0 <_wdt_init+0x68>)
    9a4a:	4b16      	ldr	r3, [pc, #88]	; (9aa4 <_wdt_init+0x6c>)
    9a4c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9a4e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a50:	689a      	ldr	r2, [r3, #8]
    9a52:	f012 0f0e 	tst.w	r2, #14
    9a56:	d1fb      	bne.n	9a50 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9a58:	781a      	ldrb	r2, [r3, #0]
    9a5a:	09d2      	lsrs	r2, r2, #7
    9a5c:	d11a      	bne.n	9a94 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a5e:	689a      	ldr	r2, [r3, #8]
    9a60:	f012 0f0e 	tst.w	r2, #14
    9a64:	d1fb      	bne.n	9a5e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9a66:	781a      	ldrb	r2, [r3, #0]
    9a68:	f012 0f02 	tst.w	r2, #2
    9a6c:	d115      	bne.n	9a9a <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9a6e:	781a      	ldrb	r2, [r3, #0]
    9a70:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9a74:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a76:	689a      	ldr	r2, [r3, #8]
    9a78:	f012 0f0e 	tst.w	r2, #14
    9a7c:	d1fb      	bne.n	9a76 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9a7e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9a80:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9a86:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9a8a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9a8c:	2000      	movs	r0, #0
    9a8e:	bd10      	pop	{r4, pc}
    9a90:	2000      	movs	r0, #0
    9a92:	e7d8      	b.n	9a46 <_wdt_init+0xe>
		return ERR_DENIED;
    9a94:	f06f 0010 	mvn.w	r0, #16
    9a98:	bd10      	pop	{r4, pc}
    9a9a:	f06f 0010 	mvn.w	r0, #16
}
    9a9e:	bd10      	pop	{r4, pc}
    9aa0:	0000e30c 	.word	0x0000e30c
    9aa4:	00005f99 	.word	0x00005f99

00009aa8 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    9aa8:	2201      	movs	r2, #1
    9aaa:	4b01      	ldr	r3, [pc, #4]	; (9ab0 <RTC_Scheduler_report_cb+0x8>)
    9aac:	701a      	strb	r2, [r3, #0]
    9aae:	4770      	bx	lr
    9ab0:	20000d68 	.word	0x20000d68

00009ab4 <RTC_Scheduler_heartbeat_cb>:
{
    9ab4:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    9ab6:	2100      	movs	r1, #0
    9ab8:	4801      	ldr	r0, [pc, #4]	; (9ac0 <RTC_Scheduler_heartbeat_cb+0xc>)
    9aba:	4b02      	ldr	r3, [pc, #8]	; (9ac4 <RTC_Scheduler_heartbeat_cb+0x10>)
    9abc:	4798      	blx	r3
    9abe:	bd08      	pop	{r3, pc}
    9ac0:	20003270 	.word	0x20003270
    9ac4:	00004375 	.word	0x00004375

00009ac8 <RTC_Scheduler_ping_cb>:
{
    9ac8:	b508      	push	{r3, lr}
	pingflag++;
    9aca:	4a11      	ldr	r2, [pc, #68]	; (9b10 <RTC_Scheduler_ping_cb+0x48>)
    9acc:	7853      	ldrb	r3, [r2, #1]
    9ace:	3301      	adds	r3, #1
    9ad0:	b2db      	uxtb	r3, r3
    9ad2:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    9ad4:	7853      	ldrb	r3, [r2, #1]
    9ad6:	f003 0303 	and.w	r3, r3, #3
    9ada:	2b03      	cmp	r3, #3
    9adc:	d816      	bhi.n	9b0c <RTC_Scheduler_ping_cb+0x44>
    9ade:	e8df f003 	tbb	[pc, r3]
    9ae2:	0702      	.short	0x0702
    9ae4:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    9ae6:	2101      	movs	r1, #1
    9ae8:	480a      	ldr	r0, [pc, #40]	; (9b14 <RTC_Scheduler_ping_cb+0x4c>)
    9aea:	4b0b      	ldr	r3, [pc, #44]	; (9b18 <RTC_Scheduler_ping_cb+0x50>)
    9aec:	4798      	blx	r3
			break;
    9aee:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    9af0:	2102      	movs	r1, #2
    9af2:	4808      	ldr	r0, [pc, #32]	; (9b14 <RTC_Scheduler_ping_cb+0x4c>)
    9af4:	4b08      	ldr	r3, [pc, #32]	; (9b18 <RTC_Scheduler_ping_cb+0x50>)
    9af6:	4798      	blx	r3
			break;
    9af8:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    9afa:	2103      	movs	r1, #3
    9afc:	4805      	ldr	r0, [pc, #20]	; (9b14 <RTC_Scheduler_ping_cb+0x4c>)
    9afe:	4b06      	ldr	r3, [pc, #24]	; (9b18 <RTC_Scheduler_ping_cb+0x50>)
    9b00:	4798      	blx	r3
			break;
    9b02:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    9b04:	2104      	movs	r1, #4
    9b06:	4803      	ldr	r0, [pc, #12]	; (9b14 <RTC_Scheduler_ping_cb+0x4c>)
    9b08:	4b03      	ldr	r3, [pc, #12]	; (9b18 <RTC_Scheduler_ping_cb+0x50>)
    9b0a:	4798      	blx	r3
    9b0c:	bd08      	pop	{r3, pc}
    9b0e:	bf00      	nop
    9b10:	20000d68 	.word	0x20000d68
    9b14:	20003270 	.word	0x20003270
    9b18:	00004375 	.word	0x00004375

00009b1c <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    9b1c:	7843      	ldrb	r3, [r0, #1]
    9b1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    9b22:	6843      	ldr	r3, [r0, #4]
    9b24:	3301      	adds	r3, #1
    9b26:	6043      	str	r3, [r0, #4]
    9b28:	4770      	bx	lr
	...

00009b2c <RTC_Scheduler_realtime_cb>:
{
    9b2c:	b510      	push	{r4, lr}
    9b2e:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    9b30:	481b      	ldr	r0, [pc, #108]	; (9ba0 <RTC_Scheduler_realtime_cb+0x74>)
    9b32:	4b1c      	ldr	r3, [pc, #112]	; (9ba4 <RTC_Scheduler_realtime_cb+0x78>)
    9b34:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    9b36:	481c      	ldr	r0, [pc, #112]	; (9ba8 <RTC_Scheduler_realtime_cb+0x7c>)
    9b38:	4b1c      	ldr	r3, [pc, #112]	; (9bac <RTC_Scheduler_realtime_cb+0x80>)
    9b3a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    9b3c:	a801      	add	r0, sp, #4
    9b3e:	4b1c      	ldr	r3, [pc, #112]	; (9bb0 <RTC_Scheduler_realtime_cb+0x84>)
    9b40:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9b42:	4b1c      	ldr	r3, [pc, #112]	; (9bb4 <RTC_Scheduler_realtime_cb+0x88>)
    9b44:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9b48:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9b4c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9b50:	4054      	eors	r4, r2
    9b52:	400c      	ands	r4, r1
    9b54:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9b56:	a801      	add	r0, sp, #4
    9b58:	4b17      	ldr	r3, [pc, #92]	; (9bb8 <RTC_Scheduler_realtime_cb+0x8c>)
    9b5a:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    9b5c:	4b17      	ldr	r3, [pc, #92]	; (9bbc <RTC_Scheduler_realtime_cb+0x90>)
    9b5e:	685b      	ldr	r3, [r3, #4]
    9b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9b62:	781a      	ldrb	r2, [r3, #0]
    9b64:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9b68:	4294      	cmp	r4, r2
    9b6a:	d002      	beq.n	9b72 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    9b6c:	b91a      	cbnz	r2, 9b76 <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    9b6e:	2201      	movs	r2, #1
    9b70:	701a      	strb	r2, [r3, #0]
}
    9b72:	b002      	add	sp, #8
    9b74:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    9b76:	2200      	movs	r2, #0
    9b78:	701a      	strb	r2, [r3, #0]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    9b7a:	4b09      	ldr	r3, [pc, #36]	; (9ba0 <RTC_Scheduler_realtime_cb+0x74>)
    9b7c:	7a5a      	ldrb	r2, [r3, #9]
    9b7e:	3201      	adds	r2, #1
    9b80:	f002 0201 	and.w	r2, r2, #1
    9b84:	4c0d      	ldr	r4, [pc, #52]	; (9bbc <RTC_Scheduler_realtime_cb+0x90>)
    9b86:	6863      	ldr	r3, [r4, #4]
    9b88:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9b8a:	bf48      	it	mi
    9b8c:	4252      	negmi	r2, r2
    9b8e:	2102      	movs	r1, #2
    9b90:	3007      	adds	r0, #7
    9b92:	4b0b      	ldr	r3, [pc, #44]	; (9bc0 <RTC_Scheduler_realtime_cb+0x94>)
    9b94:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9b96:	2105      	movs	r1, #5
    9b98:	4620      	mov	r0, r4
    9b9a:	4b0a      	ldr	r3, [pc, #40]	; (9bc4 <RTC_Scheduler_realtime_cb+0x98>)
    9b9c:	4798      	blx	r3
}
    9b9e:	e7e8      	b.n	9b72 <RTC_Scheduler_realtime_cb+0x46>
    9ba0:	20003280 	.word	0x20003280
    9ba4:	00003b3b 	.word	0x00003b3b
    9ba8:	20007d20 	.word	0x20007d20
    9bac:	00009b1d 	.word	0x00009b1d
    9bb0:	00004ba5 	.word	0x00004ba5
    9bb4:	41008000 	.word	0x41008000
    9bb8:	00004bb3 	.word	0x00004bb3
    9bbc:	20003270 	.word	0x20003270
    9bc0:	00003c29 	.word	0x00003c29
    9bc4:	00004375 	.word	0x00004375

00009bc8 <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    9bc8:	1d03      	adds	r3, r0, #4
    9bca:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    9bcc:	2200      	movs	r2, #0
    9bce:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    9bd2:	4283      	cmp	r3, r0
    9bd4:	d1fb      	bne.n	9bce <grid_task_timer_reset+0x6>
}
    9bd6:	4770      	bx	lr

00009bd8 <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    9bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bda:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    9bdc:	6880      	ldr	r0, [r0, #8]
    9bde:	4b19      	ldr	r3, [pc, #100]	; (9c44 <grid_port_reset_receiver+0x6c>)
    9be0:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    9be2:	2500      	movs	r5, #0
    9be4:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    9be6:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    9be8:	f241 0307 	movw	r3, #4103	; 0x1007
    9bec:	54e5      	strb	r5, [r4, r3]
	struct grid_ui_report* stored_report = por->ping_report;
    9bee:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    9bf0:	6870      	ldr	r0, [r6, #4]
    9bf2:	22ff      	movs	r2, #255	; 0xff
    9bf4:	2102      	movs	r1, #2
    9bf6:	3008      	adds	r0, #8
    9bf8:	4f13      	ldr	r7, [pc, #76]	; (9c48 <grid_port_reset_receiver+0x70>)
    9bfa:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    9bfc:	6870      	ldr	r0, [r6, #4]
    9bfe:	22ff      	movs	r2, #255	; 0xff
    9c00:	2102      	movs	r1, #2
    9c02:	3006      	adds	r0, #6
    9c04:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9c06:	6877      	ldr	r7, [r6, #4]
    9c08:	78b6      	ldrb	r6, [r6, #2]
    9c0a:	4631      	mov	r1, r6
    9c0c:	4638      	mov	r0, r7
    9c0e:	4b0f      	ldr	r3, [pc, #60]	; (9c4c <grid_port_reset_receiver+0x74>)
    9c10:	4798      	blx	r3
    9c12:	4602      	mov	r2, r0
    9c14:	4631      	mov	r1, r6
    9c16:	4638      	mov	r0, r7
    9c18:	4b0d      	ldr	r3, [pc, #52]	; (9c50 <grid_port_reset_receiver+0x78>)
    9c1a:	4798      	blx	r3
	por->rx_double_buffer_timeout = 0;
    9c1c:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    9c1e:	4620      	mov	r0, r4
    9c20:	4b0c      	ldr	r3, [pc, #48]	; (9c54 <grid_port_reset_receiver+0x7c>)
    9c22:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    9c24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9c26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    9c2a:	3b01      	subs	r3, #1
    9c2c:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d1fb      	bne.n	9c2a <grid_port_reset_receiver+0x52>
    9c32:	18a3      	adds	r3, r4, r2
    9c34:	2200      	movs	r2, #0
    9c36:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	usart_async_enable(por->usart);
    9c3a:	68a0      	ldr	r0, [r4, #8]
    9c3c:	4b06      	ldr	r3, [pc, #24]	; (9c58 <grid_port_reset_receiver+0x80>)
    9c3e:	4798      	blx	r3
    9c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c42:	bf00      	nop
    9c44:	000057ad 	.word	0x000057ad
    9c48:	00003c29 	.word	0x00003c29
    9c4c:	00003efd 	.word	0x00003efd
    9c50:	00003f39 	.word	0x00003f39
    9c54:	00003899 	.word	0x00003899
    9c58:	00005781 	.word	0x00005781

00009c5c <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9c5e:	2b00      	cmp	r3, #0
    9c60:	f040 80bc 	bne.w	9ddc <grid_port_receive_task+0x180>
void grid_port_receive_task(struct grid_port* por){
    9c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c68:	b082      	sub	sp, #8
    9c6a:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    9c6c:	6a03      	ldr	r3, [r0, #32]
    9c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9c72:	d92c      	bls.n	9cce <grid_port_receive_task+0x72>
		if (por->partner_status == 1){
    9c74:	f241 0307 	movw	r3, #4103	; 0x1007
    9c78:	5cc3      	ldrb	r3, [r0, r3]
    9c7a:	2b01      	cmp	r3, #1
    9c7c:	d015      	beq.n	9caa <grid_port_receive_task+0x4e>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    9c7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    9c80:	b90b      	cbnz	r3, 9c86 <grid_port_receive_task+0x2a>
    9c82:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9c84:	b32b      	cbz	r3, 9cd2 <grid_port_receive_task+0x76>
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    9c86:	4956      	ldr	r1, [pc, #344]	; (9de0 <grid_port_receive_task+0x184>)
    9c88:	4856      	ldr	r0, [pc, #344]	; (9de4 <grid_port_receive_task+0x188>)
    9c8a:	4b57      	ldr	r3, [pc, #348]	; (9de8 <grid_port_receive_task+0x18c>)
    9c8c:	4798      	blx	r3
				grid_port_reset_receiver(por);
    9c8e:	4620      	mov	r0, r4
    9c90:	4b56      	ldr	r3, [pc, #344]	; (9dec <grid_port_receive_task+0x190>)
    9c92:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9c94:	23c8      	movs	r3, #200	; 0xc8
    9c96:	9301      	str	r3, [sp, #4]
    9c98:	2302      	movs	r3, #2
    9c9a:	9300      	str	r3, [sp, #0]
    9c9c:	23ff      	movs	r3, #255	; 0xff
    9c9e:	461a      	mov	r2, r3
    9ca0:	4619      	mov	r1, r3
    9ca2:	4853      	ldr	r0, [pc, #332]	; (9df0 <grid_port_receive_task+0x194>)
    9ca4:	4d53      	ldr	r5, [pc, #332]	; (9df4 <grid_port_receive_task+0x198>)
    9ca6:	47a8      	blx	r5
    9ca8:	e013      	b.n	9cd2 <grid_port_receive_task+0x76>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    9caa:	4953      	ldr	r1, [pc, #332]	; (9df8 <grid_port_receive_task+0x19c>)
    9cac:	484d      	ldr	r0, [pc, #308]	; (9de4 <grid_port_receive_task+0x188>)
    9cae:	4b4e      	ldr	r3, [pc, #312]	; (9de8 <grid_port_receive_task+0x18c>)
    9cb0:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9cb2:	4620      	mov	r0, r4
    9cb4:	4b4d      	ldr	r3, [pc, #308]	; (9dec <grid_port_receive_task+0x190>)
    9cb6:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9cb8:	23c8      	movs	r3, #200	; 0xc8
    9cba:	9301      	str	r3, [sp, #4]
    9cbc:	2302      	movs	r3, #2
    9cbe:	9300      	str	r3, [sp, #0]
    9cc0:	23ff      	movs	r3, #255	; 0xff
    9cc2:	461a      	mov	r2, r3
    9cc4:	4619      	mov	r1, r3
    9cc6:	484a      	ldr	r0, [pc, #296]	; (9df0 <grid_port_receive_task+0x194>)
    9cc8:	4d4a      	ldr	r5, [pc, #296]	; (9df4 <grid_port_receive_task+0x198>)
    9cca:	47a8      	blx	r5
    9ccc:	e001      	b.n	9cd2 <grid_port_receive_task+0x76>
		por->rx_double_buffer_timeout++;
    9cce:	3301      	adds	r3, #1
    9cd0:	6203      	str	r3, [r0, #32]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9cd4:	18e2      	adds	r2, r4, r3
    9cd6:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9cda:	2a0a      	cmp	r2, #10
    9cdc:	d010      	beq.n	9d00 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9cde:	b19a      	cbz	r2, 9d08 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9ce2:	1e51      	subs	r1, r2, #1
    9ce4:	428b      	cmp	r3, r1
    9ce6:	d012      	beq.n	9d0e <grid_port_receive_task+0xb2>
    9ce8:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9cec:	f240 76cf 	movw	r6, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
    9cf0:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9cf2:	f8df e114 	ldr.w	lr, [pc, #276]	; 9e08 <grid_port_receive_task+0x1ac>
    9cf6:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9cfa:	f240 7cce 	movw	ip, #1998	; 0x7ce
    9cfe:	e05c      	b.n	9dba <grid_port_receive_task+0x15e>
			por->rx_double_buffer_status = 1;
    9d00:	2301      	movs	r3, #1
    9d02:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    9d04:	2300      	movs	r3, #0
    9d06:	6223      	str	r3, [r4, #32]
}
    9d08:	b002      	add	sp, #8
    9d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 1");
    9d0e:	493b      	ldr	r1, [pc, #236]	; (9dfc <grid_port_receive_task+0x1a0>)
    9d10:	4834      	ldr	r0, [pc, #208]	; (9de4 <grid_port_receive_task+0x188>)
    9d12:	4b35      	ldr	r3, [pc, #212]	; (9de8 <grid_port_receive_task+0x18c>)
    9d14:	4798      	blx	r3
			grid_port_reset_receiver(por);
    9d16:	4620      	mov	r0, r4
    9d18:	4b34      	ldr	r3, [pc, #208]	; (9dec <grid_port_receive_task+0x190>)
    9d1a:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    9d1c:	23c8      	movs	r3, #200	; 0xc8
    9d1e:	9301      	str	r3, [sp, #4]
    9d20:	2302      	movs	r3, #2
    9d22:	9300      	str	r3, [sp, #0]
    9d24:	2300      	movs	r3, #0
    9d26:	461a      	mov	r2, r3
    9d28:	21ff      	movs	r1, #255	; 0xff
    9d2a:	4831      	ldr	r0, [pc, #196]	; (9df0 <grid_port_receive_task+0x194>)
    9d2c:	4c31      	ldr	r4, [pc, #196]	; (9df4 <grid_port_receive_task+0x198>)
    9d2e:	47a0      	blx	r4
			return;	
    9d30:	e7ea      	b.n	9d08 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9d32:	b16a      	cbz	r2, 9d50 <grid_port_receive_task+0xf4>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9d34:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    9d38:	fbae 1302 	umull	r1, r3, lr, r2
    9d3c:	09db      	lsrs	r3, r3, #7
    9d3e:	fb07 2213 	mls	r2, r7, r3, r2
    9d42:	4422      	add	r2, r4
    9d44:	f892 3800 	ldrb.w	r3, [r2, #2048]	; 0x800
    9d48:	b9a3      	cbnz	r3, 9d74 <grid_port_receive_task+0x118>
			por->rx_double_buffer_timeout = 0;
    9d4a:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    9d4c:	62a5      	str	r5, [r4, #40]	; 0x28
    9d4e:	e026      	b.n	9d9e <grid_port_receive_task+0x142>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 2");
    9d50:	492b      	ldr	r1, [pc, #172]	; (9e00 <grid_port_receive_task+0x1a4>)
    9d52:	4824      	ldr	r0, [pc, #144]	; (9de4 <grid_port_receive_task+0x188>)
    9d54:	4b24      	ldr	r3, [pc, #144]	; (9de8 <grid_port_receive_task+0x18c>)
    9d56:	4798      	blx	r3
			grid_port_reset_receiver(por);
    9d58:	4620      	mov	r0, r4
    9d5a:	4b24      	ldr	r3, [pc, #144]	; (9dec <grid_port_receive_task+0x190>)
    9d5c:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    9d5e:	23c8      	movs	r3, #200	; 0xc8
    9d60:	9301      	str	r3, [sp, #4]
    9d62:	2302      	movs	r3, #2
    9d64:	9300      	str	r3, [sp, #0]
    9d66:	2300      	movs	r3, #0
    9d68:	461a      	mov	r2, r3
    9d6a:	21ff      	movs	r1, #255	; 0xff
    9d6c:	4820      	ldr	r0, [pc, #128]	; (9df0 <grid_port_receive_task+0x194>)
    9d6e:	4c21      	ldr	r4, [pc, #132]	; (9df4 <grid_port_receive_task+0x198>)
    9d70:	47a0      	blx	r4
			return;
    9d72:	e7c9      	b.n	9d08 <grid_port_receive_task+0xac>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 3");
    9d74:	4923      	ldr	r1, [pc, #140]	; (9e04 <grid_port_receive_task+0x1a8>)
    9d76:	481b      	ldr	r0, [pc, #108]	; (9de4 <grid_port_receive_task+0x188>)
    9d78:	4b1b      	ldr	r3, [pc, #108]	; (9de8 <grid_port_receive_task+0x18c>)
    9d7a:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9d7c:	4620      	mov	r0, r4
    9d7e:	4b1b      	ldr	r3, [pc, #108]	; (9dec <grid_port_receive_task+0x190>)
    9d80:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    9d82:	23c8      	movs	r3, #200	; 0xc8
    9d84:	9301      	str	r3, [sp, #4]
    9d86:	2302      	movs	r3, #2
    9d88:	9300      	str	r3, [sp, #0]
    9d8a:	2300      	movs	r3, #0
    9d8c:	461a      	mov	r2, r3
    9d8e:	21ff      	movs	r1, #255	; 0xff
    9d90:	4817      	ldr	r0, [pc, #92]	; (9df0 <grid_port_receive_task+0x194>)
    9d92:	4c18      	ldr	r4, [pc, #96]	; (9df4 <grid_port_receive_task+0x198>)
    9d94:	47a0      	blx	r4
			return;
    9d96:	e7b7      	b.n	9d08 <grid_port_receive_task+0xac>
			por->rx_double_buffer_timeout = 0;
    9d98:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;			
    9d9a:	3301      	adds	r3, #1
    9d9c:	62a3      	str	r3, [r4, #40]	; 0x28
	for(uint32_t i = 0; i<490; i++){
    9d9e:	3801      	subs	r0, #1
    9da0:	d0b2      	beq.n	9d08 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9da2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9da4:	18e2      	adds	r2, r4, r3
    9da6:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9daa:	2a0a      	cmp	r2, #10
    9dac:	d0a8      	beq.n	9d00 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9dae:	2a00      	cmp	r2, #0
    9db0:	d0aa      	beq.n	9d08 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9db4:	1e51      	subs	r1, r2, #1
    9db6:	428b      	cmp	r3, r1
    9db8:	d0a9      	beq.n	9d0e <grid_port_receive_task+0xb2>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9dba:	42b3      	cmp	r3, r6
    9dbc:	d0b9      	beq.n	9d32 <grid_port_receive_task+0xd6>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9dbe:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    9dc2:	fbae 8102 	umull	r8, r1, lr, r2
    9dc6:	09c9      	lsrs	r1, r1, #7
    9dc8:	fb07 2211 	mls	r2, r7, r1, r2
    9dcc:	4422      	add	r2, r4
    9dce:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9dd2:	2a00      	cmp	r2, #0
    9dd4:	d1ce      	bne.n	9d74 <grid_port_receive_task+0x118>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9dd6:	4563      	cmp	r3, ip
    9dd8:	d9de      	bls.n	9d98 <grid_port_receive_task+0x13c>
    9dda:	e7b6      	b.n	9d4a <grid_port_receive_task+0xee>
    9ddc:	4770      	bx	lr
    9dde:	bf00      	nop
    9de0:	0000e348 	.word	0x0000e348
    9de4:	0000d9d8 	.word	0x0000d9d8
    9de8:	0000c6b1 	.word	0x0000c6b1
    9dec:	00009bd9 	.word	0x00009bd9
    9df0:	20003280 	.word	0x20003280
    9df4:	00003b95 	.word	0x00003b95
    9df8:	0000e324 	.word	0x0000e324
    9dfc:	0000e364 	.word	0x0000e364
    9e00:	0000e380 	.word	0x0000e380
    9e04:	0000e39c 	.word	0x0000e39c
    9e08:	10624dd3 	.word	0x10624dd3

00009e0c <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    9e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e10:	b087      	sub	sp, #28
    9e12:	af02      	add	r7, sp, #8
    9e14:	4606      	mov	r6, r0
    9e16:	4690      	mov	r8, r2
	uint8_t buffer[length];			
    9e18:	1dd3      	adds	r3, r2, #7
    9e1a:	f023 0307 	bic.w	r3, r3, #7
    9e1e:	ebad 0d03 	sub.w	sp, sp, r3
    9e22:	ad02      	add	r5, sp, #8
	for (uint32_t i = 0; i<length; i++){
    9e24:	2a00      	cmp	r2, #0
    9e26:	f000 8239 	beq.w	a29c <grid_port_receive_decode+0x490>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9e2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    9e2c:	eb05 0908 	add.w	r9, r5, r8
    9e30:	4629      	mov	r1, r5
    9e32:	eba2 0c05 	sub.w	ip, r2, r5
    9e36:	f8df e2ec 	ldr.w	lr, [pc, #748]	; a124 <grid_port_receive_decode+0x318>
    9e3a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9e3e:	2000      	movs	r0, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9e40:	eb0c 0a01 	add.w	sl, ip, r1
    9e44:	fbae b30a 	umull	fp, r3, lr, sl
    9e48:	09db      	lsrs	r3, r3, #7
    9e4a:	fb04 a313 	mls	r3, r4, r3, sl
    9e4e:	4433      	add	r3, r6
    9e50:	f893 a800 	ldrb.w	sl, [r3, #2048]	; 0x800
    9e54:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9e58:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
	for (uint32_t i = 0; i<length; i++){
    9e5c:	4549      	cmp	r1, r9
    9e5e:	d1ef      	bne.n	9e40 <grid_port_receive_decode+0x34>
	message = &buffer[0];
    9e60:	46aa      	mov	sl, r5
    9e62:	eb08 0e02 	add.w	lr, r8, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    9e66:	4caf      	ldr	r4, [pc, #700]	; (a124 <grid_port_receive_decode+0x318>)
    9e68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    9e6c:	2100      	movs	r1, #0
    9e6e:	fba4 c302 	umull	ip, r3, r4, r2
    9e72:	09db      	lsrs	r3, r3, #7
    9e74:	fb00 2313 	mls	r3, r0, r3, r2
    9e78:	4433      	add	r3, r6
    9e7a:	f883 1800 	strb.w	r1, [r3, #2048]	; 0x800
    9e7e:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    9e80:	4572      	cmp	r2, lr
    9e82:	d1f4      	bne.n	9e6e <grid_port_receive_decode+0x62>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    9e84:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    9e86:	4442      	add	r2, r8
    9e88:	4ba6      	ldr	r3, [pc, #664]	; (a124 <grid_port_receive_decode+0x318>)
    9e8a:	fba3 1302 	umull	r1, r3, r3, r2
    9e8e:	09db      	lsrs	r3, r3, #7
    9e90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    9e94:	fb01 2313 	mls	r3, r1, r3, r2
    9e98:	62f3      	str	r3, [r6, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9e9a:	62b3      	str	r3, [r6, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    9e9c:	2300      	movs	r3, #0
    9e9e:	6273      	str	r3, [r6, #36]	; 0x24
 	for (uint32_t i = 1; i<length; i++){
    9ea0:	f1b8 0f01 	cmp.w	r8, #1
    9ea4:	f240 8209 	bls.w	a2ba <grid_port_receive_decode+0x4ae>
    9ea8:	2401      	movs	r4, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    9eaa:	f8df b2e0 	ldr.w	fp, [pc, #736]	; a18c <grid_port_receive_decode+0x380>
    9eae:	f8df 929c 	ldr.w	r9, [pc, #668]	; a14c <grid_port_receive_decode+0x340>
    9eb2:	e003      	b.n	9ebc <grid_port_receive_decode+0xb0>
 	for (uint32_t i = 1; i<length; i++){
    9eb4:	3401      	adds	r4, #1
    9eb6:	45a0      	cmp	r8, r4
    9eb8:	f240 81ff 	bls.w	a2ba <grid_port_receive_decode+0x4ae>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    9ebc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    9ec0:	2b01      	cmp	r3, #1
    9ec2:	d1f7      	bne.n	9eb4 <grid_port_receive_decode+0xa8>
 			length -= i;
    9ec4:	eba8 0804 	sub.w	r8, r8, r4
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    9ec8:	4659      	mov	r1, fp
    9eca:	4897      	ldr	r0, [pc, #604]	; (a128 <grid_port_receive_decode+0x31c>)
    9ecc:	47c8      	blx	r9
 			message = &buffer[i];
    9ece:	46aa      	mov	sl, r5
    9ed0:	e7f0      	b.n	9eb4 <grid_port_receive_decode+0xa8>
	if (message[0] == 1 && message [length-1] == 10){
    9ed2:	eb0a 0308 	add.w	r3, sl, r8
    9ed6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9eda:	2b0a      	cmp	r3, #10
    9edc:	f040 81f2 	bne.w	a2c4 <grid_port_receive_decode+0x4b8>
		checksum_received = grid_msg_checksum_read(message, length);
    9ee0:	4641      	mov	r1, r8
    9ee2:	4650      	mov	r0, sl
    9ee4:	4b91      	ldr	r3, [pc, #580]	; (a12c <grid_port_receive_decode+0x320>)
    9ee6:	4798      	blx	r3
    9ee8:	4604      	mov	r4, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    9eea:	4641      	mov	r1, r8
    9eec:	4650      	mov	r0, sl
    9eee:	4b90      	ldr	r3, [pc, #576]	; (a130 <grid_port_receive_decode+0x324>)
    9ef0:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9ef2:	4284      	cmp	r4, r0
    9ef4:	f040 81c4 	bne.w	a280 <grid_port_receive_decode+0x474>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9ef8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9efc:	2b0f      	cmp	r3, #15
    9efe:	f000 808b 	beq.w	a018 <grid_port_receive_decode+0x20c>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    9f02:	2b0e      	cmp	r3, #14
    9f04:	f040 81ae 	bne.w	a264 <grid_port_receive_decode+0x458>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    9f08:	f89a 3002 	ldrb.w	r3, [sl, #2]
    9f0c:	2b07      	cmp	r3, #7
    9f0e:	f040 81e6 	bne.w	a2de <grid_port_receive_decode+0x4d2>
					struct grid_ui_report* stored_report = por->ping_report;
    9f12:	6874      	ldr	r4, [r6, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    9f14:	6860      	ldr	r0, [r4, #4]
    9f16:	2200      	movs	r2, #0
    9f18:	2102      	movs	r1, #2
    9f1a:	3006      	adds	r0, #6
    9f1c:	f8df 921c 	ldr.w	r9, [pc, #540]	; a13c <grid_port_receive_decode+0x330>
    9f20:	47c8      	blx	r9
    9f22:	b2c5      	uxtb	r5, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    9f24:	6860      	ldr	r0, [r4, #4]
    9f26:	2200      	movs	r2, #0
    9f28:	2102      	movs	r1, #2
    9f2a:	3008      	adds	r0, #8
    9f2c:	47c8      	blx	r9
    9f2e:	b2c3      	uxtb	r3, r0
    9f30:	60fb      	str	r3, [r7, #12]
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    9f32:	2200      	movs	r2, #0
    9f34:	2102      	movs	r1, #2
    9f36:	f10a 0008 	add.w	r0, sl, #8
    9f3a:	47c8      	blx	r9
    9f3c:	fa5f fb80 	uxtb.w	fp, r0
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    9f40:	2200      	movs	r2, #0
    9f42:	2102      	movs	r1, #2
    9f44:	f10a 0006 	add.w	r0, sl, #6
    9f48:	47c8      	blx	r9
    9f4a:	60b8      	str	r0, [r7, #8]
    9f4c:	fa5f f980 	uxtb.w	r9, r0
					if (por->partner_status == 0){
    9f50:	f241 0307 	movw	r3, #4103	; 0x1007
    9f54:	5cf3      	ldrb	r3, [r6, r3]
    9f56:	2b00      	cmp	r3, #0
    9f58:	f040 8135 	bne.w	a1c6 <grid_port_receive_decode+0x3ba>
						if (local_stored == 255){ // I have no clue				
    9f5c:	2dff      	cmp	r5, #255	; 0xff
    9f5e:	f000 8119 	beq.w	a194 <grid_port_receive_decode+0x388>
						if (remote_received != remote_stored){
    9f62:	68fb      	ldr	r3, [r7, #12]
    9f64:	454b      	cmp	r3, r9
    9f66:	d011      	beq.n	9f8c <grid_port_receive_decode+0x180>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    9f68:	6860      	ldr	r0, [r4, #4]
    9f6a:	7a3a      	ldrb	r2, [r7, #8]
    9f6c:	2102      	movs	r1, #2
    9f6e:	3008      	adds	r0, #8
    9f70:	4b70      	ldr	r3, [pc, #448]	; (a134 <grid_port_receive_decode+0x328>)
    9f72:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9f74:	f8d4 9004 	ldr.w	r9, [r4, #4]
    9f78:	78a4      	ldrb	r4, [r4, #2]
    9f7a:	4621      	mov	r1, r4
    9f7c:	4648      	mov	r0, r9
    9f7e:	4b6c      	ldr	r3, [pc, #432]	; (a130 <grid_port_receive_decode+0x324>)
    9f80:	4798      	blx	r3
    9f82:	4602      	mov	r2, r0
    9f84:	4621      	mov	r1, r4
    9f86:	4648      	mov	r0, r9
    9f88:	4b6b      	ldr	r3, [pc, #428]	; (a138 <grid_port_receive_decode+0x32c>)
    9f8a:	4798      	blx	r3
						if (local_stored != local_received){
    9f8c:	455d      	cmp	r5, fp
    9f8e:	f040 81a6 	bne.w	a2de <grid_port_receive_decode+0x4d2>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    9f92:	f89a 3003 	ldrb.w	r3, [sl, #3]
    9f96:	7b72      	ldrb	r2, [r6, #13]
    9f98:	1a9b      	subs	r3, r3, r2
    9f9a:	3306      	adds	r3, #6
    9f9c:	425a      	negs	r2, r3
    9f9e:	f003 0303 	and.w	r3, r3, #3
    9fa2:	f002 0203 	and.w	r2, r2, #3
    9fa6:	bf58      	it	pl
    9fa8:	4253      	negpl	r3, r2
    9faa:	f241 0204 	movw	r2, #4100	; 0x1004
    9fae:	54b3      	strb	r3, [r6, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    9fb0:	f1a8 000a 	sub.w	r0, r8, #10
    9fb4:	2200      	movs	r2, #0
    9fb6:	2102      	movs	r1, #2
    9fb8:	4450      	add	r0, sl
    9fba:	4b60      	ldr	r3, [pc, #384]	; (a13c <grid_port_receive_decode+0x330>)
    9fbc:	4798      	blx	r3
    9fbe:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    9fc2:	6018      	str	r0, [r3, #0]
							por->partner_status = 1;
    9fc4:	2201      	movs	r2, #1
    9fc6:	f241 0307 	movw	r3, #4103	; 0x1007
    9fca:	54f2      	strb	r2, [r6, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9fcc:	4c5c      	ldr	r4, [pc, #368]	; (a140 <grid_port_receive_decode+0x334>)
    9fce:	4620      	mov	r0, r4
    9fd0:	4b5c      	ldr	r3, [pc, #368]	; (a144 <grid_port_receive_decode+0x338>)
    9fd2:	4798      	blx	r3
    9fd4:	b2c0      	uxtb	r0, r0
    9fd6:	7020      	strb	r0, [r4, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    9fd8:	495b      	ldr	r1, [pc, #364]	; (a148 <grid_port_receive_decode+0x33c>)
    9fda:	4853      	ldr	r0, [pc, #332]	; (a128 <grid_port_receive_decode+0x31c>)
    9fdc:	4b5b      	ldr	r3, [pc, #364]	; (a14c <grid_port_receive_decode+0x340>)
    9fde:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    9fe0:	23c8      	movs	r3, #200	; 0xc8
    9fe2:	9301      	str	r3, [sp, #4]
    9fe4:	2302      	movs	r3, #2
    9fe6:	9300      	str	r3, [sp, #0]
    9fe8:	2300      	movs	r3, #0
    9fea:	22ff      	movs	r2, #255	; 0xff
    9fec:	4619      	mov	r1, r3
    9fee:	4620      	mov	r0, r4
    9ff0:	4d57      	ldr	r5, [pc, #348]	; (a150 <grid_port_receive_decode+0x344>)
    9ff2:	47a8      	blx	r5
							if (grid_sys_state.bank_select!=255){
    9ff4:	7a63      	ldrb	r3, [r4, #9]
    9ff6:	b2db      	uxtb	r3, r3
    9ff8:	2bff      	cmp	r3, #255	; 0xff
    9ffa:	f000 8170 	beq.w	a2de <grid_port_receive_decode+0x4d2>
								grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9ffe:	7a62      	ldrb	r2, [r4, #9]
    a000:	4c54      	ldr	r4, [pc, #336]	; (a154 <grid_port_receive_decode+0x348>)
    a002:	6863      	ldr	r3, [r4, #4]
    a004:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a006:	2102      	movs	r1, #2
    a008:	3007      	adds	r0, #7
    a00a:	4b4a      	ldr	r3, [pc, #296]	; (a134 <grid_port_receive_decode+0x328>)
    a00c:	4798      	blx	r3
								grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    a00e:	2105      	movs	r1, #5
    a010:	4620      	mov	r0, r4
    a012:	4b51      	ldr	r3, [pc, #324]	; (a158 <grid_port_receive_decode+0x34c>)
    a014:	4798      	blx	r3
    a016:	e162      	b.n	a2de <grid_port_receive_decode+0x4d2>
				uint8_t received_id  = grid_msg_get_id(message);;			
    a018:	4650      	mov	r0, sl
    a01a:	4b50      	ldr	r3, [pc, #320]	; (a15c <grid_port_receive_decode+0x350>)
    a01c:	4798      	blx	r3
    a01e:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    a020:	4650      	mov	r0, sl
    a022:	4b4f      	ldr	r3, [pc, #316]	; (a160 <grid_port_receive_decode+0x354>)
    a024:	4798      	blx	r3
    a026:	4681      	mov	r9, r0
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    a028:	4650      	mov	r0, sl
    a02a:	4b4e      	ldr	r3, [pc, #312]	; (a164 <grid_port_receive_decode+0x358>)
    a02c:	4798      	blx	r3
    a02e:	4605      	mov	r5, r0
    a030:	f1a0 047f 	sub.w	r4, r0, #127	; 0x7f
    a034:	b264      	sxtb	r4, r4
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    a036:	4650      	mov	r0, sl
    a038:	4b4b      	ldr	r3, [pc, #300]	; (a168 <grid_port_receive_decode+0x35c>)
    a03a:	4798      	blx	r3
    a03c:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    a040:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    a042:	f241 0204 	movw	r2, #4100	; 0x1004
    a046:	5cb2      	ldrb	r2, [r6, r2]
    a048:	b12a      	cbz	r2, a056 <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 1){ // 90 deg
    a04a:	2a01      	cmp	r2, #1
    a04c:	d157      	bne.n	a0fe <grid_port_receive_decode+0x2f2>
					rotated_dx  -= received_dy;
    a04e:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    a052:	4623      	mov	r3, r4
					rotated_dx  -= received_dy;
    a054:	b244      	sxtb	r4, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    a056:	f241 0205 	movw	r2, #4101	; 0x1005
    a05a:	5cb5      	ldrb	r5, [r6, r2]
    a05c:	357f      	adds	r5, #127	; 0x7f
    a05e:	442c      	add	r4, r5
    a060:	b2e5      	uxtb	r5, r4
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    a062:	f241 0206 	movw	r2, #4102	; 0x1006
    a066:	5cb4      	ldrb	r4, [r6, r2]
    a068:	347f      	adds	r4, #127	; 0x7f
    a06a:	441c      	add	r4, r3
    a06c:	b2e4      	uxtb	r4, r4
				grid_msg_set_id(message, updated_id);
    a06e:	4659      	mov	r1, fp
    a070:	4650      	mov	r0, sl
    a072:	4b3e      	ldr	r3, [pc, #248]	; (a16c <grid_port_receive_decode+0x360>)
    a074:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    a076:	4629      	mov	r1, r5
    a078:	4650      	mov	r0, sl
    a07a:	4b3d      	ldr	r3, [pc, #244]	; (a170 <grid_port_receive_decode+0x364>)
    a07c:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    a07e:	4621      	mov	r1, r4
    a080:	4650      	mov	r0, sl
    a082:	4b3c      	ldr	r3, [pc, #240]	; (a174 <grid_port_receive_decode+0x368>)
    a084:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    a086:	4649      	mov	r1, r9
    a088:	4650      	mov	r0, sl
    a08a:	4b3b      	ldr	r3, [pc, #236]	; (a178 <grid_port_receive_decode+0x36c>)
    a08c:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    a08e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
    a092:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    a096:	eb09 2404 	add.w	r4, r9, r4, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    a09a:	4621      	mov	r1, r4
    a09c:	4828      	ldr	r0, [pc, #160]	; (a140 <grid_port_receive_decode+0x334>)
    a09e:	4b37      	ldr	r3, [pc, #220]	; (a17c <grid_port_receive_decode+0x370>)
    a0a0:	4798      	blx	r3
    a0a2:	2800      	cmp	r0, #0
    a0a4:	f040 811b 	bne.w	a2de <grid_port_receive_decode+0x4d2>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    a0a8:	4641      	mov	r1, r8
    a0aa:	4650      	mov	r0, sl
    a0ac:	4b20      	ldr	r3, [pc, #128]	; (a130 <grid_port_receive_decode+0x324>)
    a0ae:	4798      	blx	r3
    a0b0:	4602      	mov	r2, r0
    a0b2:	4641      	mov	r1, r8
    a0b4:	4650      	mov	r0, sl
    a0b6:	4b20      	ldr	r3, [pc, #128]	; (a138 <grid_port_receive_decode+0x32c>)
    a0b8:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    a0ba:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
    a0be:	fa1f f188 	uxth.w	r1, r8
    a0c2:	4630      	mov	r0, r6
    a0c4:	4b2e      	ldr	r3, [pc, #184]	; (a180 <grid_port_receive_decode+0x374>)
    a0c6:	4798      	blx	r3
    a0c8:	2800      	cmp	r0, #0
    a0ca:	f000 8108 	beq.w	a2de <grid_port_receive_decode+0x4d2>
						for (uint8_t i=0; i<length; i++){
    a0ce:	f1b8 0f00 	cmp.w	r8, #0
    a0d2:	d00c      	beq.n	a0ee <grid_port_receive_decode+0x2e2>
    a0d4:	2300      	movs	r3, #0
    a0d6:	461d      	mov	r5, r3
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    a0d8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a190 <grid_port_receive_decode+0x384>
    a0dc:	f81a 1003 	ldrb.w	r1, [sl, r3]
    a0e0:	4630      	mov	r0, r6
    a0e2:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    a0e4:	3501      	adds	r5, #1
    a0e6:	b2ed      	uxtb	r5, r5
    a0e8:	462b      	mov	r3, r5
    a0ea:	4545      	cmp	r5, r8
    a0ec:	d3f6      	bcc.n	a0dc <grid_port_receive_decode+0x2d0>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    a0ee:	4630      	mov	r0, r6
    a0f0:	4b24      	ldr	r3, [pc, #144]	; (a184 <grid_port_receive_decode+0x378>)
    a0f2:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    a0f4:	4621      	mov	r1, r4
    a0f6:	4812      	ldr	r0, [pc, #72]	; (a140 <grid_port_receive_decode+0x334>)
    a0f8:	4b23      	ldr	r3, [pc, #140]	; (a188 <grid_port_receive_decode+0x37c>)
    a0fa:	4798      	blx	r3
    a0fc:	e0ef      	b.n	a2de <grid_port_receive_decode+0x4d2>
				else if(por->partner_fi == 2){ // 180 deg
    a0fe:	2a02      	cmp	r2, #2
    a100:	d106      	bne.n	a110 <grid_port_receive_decode+0x304>
					rotated_dx  -= received_dx;
    a102:	f1c5 047f 	rsb	r4, r5, #127	; 0x7f
    a106:	b264      	sxtb	r4, r4
					rotated_dy  -= received_dy;
    a108:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
    a10c:	b243      	sxtb	r3, r0
    a10e:	e7a2      	b.n	a056 <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 3){ // 270 deg
    a110:	2a03      	cmp	r2, #3
    a112:	d002      	beq.n	a11a <grid_port_receive_decode+0x30e>
				int8_t rotated_dy = 0;
    a114:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    a116:	461c      	mov	r4, r3
    a118:	e79d      	b.n	a056 <grid_port_receive_decode+0x24a>
					rotated_dy  -= received_dx;
    a11a:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
					rotated_dx  += received_dy;
    a11e:	461c      	mov	r4, r3
					rotated_dy  -= received_dx;
    a120:	b26b      	sxtb	r3, r5
    a122:	e798      	b.n	a056 <grid_port_receive_decode+0x24a>
    a124:	10624dd3 	.word	0x10624dd3
    a128:	0000d9d8 	.word	0x0000d9d8
    a12c:	00003f19 	.word	0x00003f19
    a130:	00003efd 	.word	0x00003efd
    a134:	00003c29 	.word	0x00003c29
    a138:	00003f39 	.word	0x00003f39
    a13c:	00003be9 	.word	0x00003be9
    a140:	20003280 	.word	0x20003280
    a144:	00003b31 	.word	0x00003b31
    a148:	0000e3cc 	.word	0x0000e3cc
    a14c:	0000c6b1 	.word	0x0000c6b1
    a150:	00003b95 	.word	0x00003b95
    a154:	20003270 	.word	0x20003270
    a158:	00004375 	.word	0x00004375
    a15c:	00003f4d 	.word	0x00003f4d
    a160:	00003fad 	.word	0x00003fad
    a164:	00003f6d 	.word	0x00003f6d
    a168:	00003f8d 	.word	0x00003f8d
    a16c:	00003fcd 	.word	0x00003fcd
    a170:	00003fe1 	.word	0x00003fe1
    a174:	00003ff5 	.word	0x00003ff5
    a178:	00004009 	.word	0x00004009
    a17c:	0000401d 	.word	0x0000401d
    a180:	000013a5 	.word	0x000013a5
    a184:	000013f1 	.word	0x000013f1
    a188:	00004047 	.word	0x00004047
    a18c:	0000e3b8 	.word	0x0000e3b8
    a190:	000013d5 	.word	0x000013d5
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    a194:	4854      	ldr	r0, [pc, #336]	; (a2e8 <grid_port_receive_decode+0x4dc>)
    a196:	4b55      	ldr	r3, [pc, #340]	; (a2ec <grid_port_receive_decode+0x4e0>)
    a198:	4798      	blx	r3
    a19a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    a19e:	6860      	ldr	r0, [r4, #4]
    a1a0:	462a      	mov	r2, r5
    a1a2:	2102      	movs	r1, #2
    a1a4:	3006      	adds	r0, #6
    a1a6:	4b52      	ldr	r3, [pc, #328]	; (a2f0 <grid_port_receive_decode+0x4e4>)
    a1a8:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    a1aa:	6863      	ldr	r3, [r4, #4]
    a1ac:	78a2      	ldrb	r2, [r4, #2]
    a1ae:	603a      	str	r2, [r7, #0]
    a1b0:	4611      	mov	r1, r2
    a1b2:	607b      	str	r3, [r7, #4]
    a1b4:	4618      	mov	r0, r3
    a1b6:	4b4f      	ldr	r3, [pc, #316]	; (a2f4 <grid_port_receive_decode+0x4e8>)
    a1b8:	4798      	blx	r3
    a1ba:	4602      	mov	r2, r0
    a1bc:	6839      	ldr	r1, [r7, #0]
    a1be:	6878      	ldr	r0, [r7, #4]
    a1c0:	4b4d      	ldr	r3, [pc, #308]	; (a2f8 <grid_port_receive_decode+0x4ec>)
    a1c2:	4798      	blx	r3
    a1c4:	e6cd      	b.n	9f62 <grid_port_receive_decode+0x156>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    a1c6:	f89a 3003 	ldrb.w	r3, [sl, #3]
    a1ca:	7b72      	ldrb	r2, [r6, #13]
    a1cc:	1a9b      	subs	r3, r3, r2
    a1ce:	3306      	adds	r3, #6
    a1d0:	425a      	negs	r2, r3
    a1d2:	f003 0303 	and.w	r3, r3, #3
    a1d6:	f002 0203 	and.w	r2, r2, #3
    a1da:	bf58      	it	pl
    a1dc:	4253      	negpl	r3, r2
    a1de:	f241 0204 	movw	r2, #4100	; 0x1004
    a1e2:	5cb2      	ldrb	r2, [r6, r2]
    a1e4:	68f9      	ldr	r1, [r7, #12]
    a1e6:	455d      	cmp	r5, fp
    a1e8:	bf08      	it	eq
    a1ea:	4549      	cmpeq	r1, r9
    a1ec:	bf0c      	ite	eq
    a1ee:	2501      	moveq	r5, #1
    a1f0:	2500      	movne	r5, #0
    a1f2:	4293      	cmp	r3, r2
    a1f4:	bf14      	ite	ne
    a1f6:	2500      	movne	r5, #0
    a1f8:	f005 0501 	andeq.w	r5, r5, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    a1fc:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    a200:	f8d3 9000 	ldr.w	r9, [r3]
    a204:	f1a8 000a 	sub.w	r0, r8, #10
    a208:	2200      	movs	r2, #0
    a20a:	2102      	movs	r1, #2
    a20c:	4450      	add	r0, sl
    a20e:	4b3b      	ldr	r3, [pc, #236]	; (a2fc <grid_port_receive_decode+0x4f0>)
    a210:	4798      	blx	r3
						if (validator == 1){
    a212:	4548      	cmp	r0, r9
    a214:	d101      	bne.n	a21a <grid_port_receive_decode+0x40e>
    a216:	2d00      	cmp	r5, #0
    a218:	d161      	bne.n	a2de <grid_port_receive_decode+0x4d2>
							por->partner_status = 0;
    a21a:	2200      	movs	r2, #0
    a21c:	f241 0307 	movw	r3, #4103	; 0x1007
    a220:	54f2      	strb	r2, [r6, r3]
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    a222:	6860      	ldr	r0, [r4, #4]
    a224:	22ff      	movs	r2, #255	; 0xff
    a226:	2102      	movs	r1, #2
    a228:	3008      	adds	r0, #8
    a22a:	4d31      	ldr	r5, [pc, #196]	; (a2f0 <grid_port_receive_decode+0x4e4>)
    a22c:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    a22e:	6860      	ldr	r0, [r4, #4]
    a230:	22ff      	movs	r2, #255	; 0xff
    a232:	2102      	movs	r1, #2
    a234:	3006      	adds	r0, #6
    a236:	47a8      	blx	r5
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));														
    a238:	6865      	ldr	r5, [r4, #4]
    a23a:	78a4      	ldrb	r4, [r4, #2]
    a23c:	4621      	mov	r1, r4
    a23e:	4628      	mov	r0, r5
    a240:	4b2c      	ldr	r3, [pc, #176]	; (a2f4 <grid_port_receive_decode+0x4e8>)
    a242:	4798      	blx	r3
    a244:	4602      	mov	r2, r0
    a246:	4621      	mov	r1, r4
    a248:	4628      	mov	r0, r5
    a24a:	4b2b      	ldr	r3, [pc, #172]	; (a2f8 <grid_port_receive_decode+0x4ec>)
    a24c:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    a24e:	23c8      	movs	r3, #200	; 0xc8
    a250:	9301      	str	r3, [sp, #4]
    a252:	2302      	movs	r3, #2
    a254:	9300      	str	r3, [sp, #0]
    a256:	23ff      	movs	r3, #255	; 0xff
    a258:	461a      	mov	r2, r3
    a25a:	4619      	mov	r1, r3
    a25c:	4822      	ldr	r0, [pc, #136]	; (a2e8 <grid_port_receive_decode+0x4dc>)
    a25e:	4c28      	ldr	r4, [pc, #160]	; (a300 <grid_port_receive_decode+0x4f4>)
    a260:	47a0      	blx	r4
    a262:	e03c      	b.n	a2de <grid_port_receive_decode+0x4d2>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    a264:	23c8      	movs	r3, #200	; 0xc8
    a266:	9301      	str	r3, [sp, #4]
    a268:	2302      	movs	r3, #2
    a26a:	9300      	str	r3, [sp, #0]
    a26c:	2300      	movs	r3, #0
    a26e:	461a      	mov	r2, r3
    a270:	21ff      	movs	r1, #255	; 0xff
    a272:	481d      	ldr	r0, [pc, #116]	; (a2e8 <grid_port_receive_decode+0x4dc>)
    a274:	4c22      	ldr	r4, [pc, #136]	; (a300 <grid_port_receive_decode+0x4f4>)
    a276:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    a278:	4822      	ldr	r0, [pc, #136]	; (a304 <grid_port_receive_decode+0x4f8>)
    a27a:	4b23      	ldr	r3, [pc, #140]	; (a308 <grid_port_receive_decode+0x4fc>)
    a27c:	4798      	blx	r3
    a27e:	e02e      	b.n	a2de <grid_port_receive_decode+0x4d2>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    a280:	4822      	ldr	r0, [pc, #136]	; (a30c <grid_port_receive_decode+0x500>)
    a282:	4b21      	ldr	r3, [pc, #132]	; (a308 <grid_port_receive_decode+0x4fc>)
    a284:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    a286:	23c8      	movs	r3, #200	; 0xc8
    a288:	9301      	str	r3, [sp, #4]
    a28a:	2301      	movs	r3, #1
    a28c:	9300      	str	r3, [sp, #0]
    a28e:	23ff      	movs	r3, #255	; 0xff
    a290:	2200      	movs	r2, #0
    a292:	2114      	movs	r1, #20
    a294:	4814      	ldr	r0, [pc, #80]	; (a2e8 <grid_port_receive_decode+0x4dc>)
    a296:	4c1a      	ldr	r4, [pc, #104]	; (a300 <grid_port_receive_decode+0x4f4>)
    a298:	47a0      	blx	r4
    a29a:	e020      	b.n	a2de <grid_port_receive_decode+0x4d2>
	message = &buffer[0];
    a29c:	46aa      	mov	sl, r5
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    a29e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a2a0:	4442      	add	r2, r8
    a2a2:	4b1b      	ldr	r3, [pc, #108]	; (a310 <grid_port_receive_decode+0x504>)
    a2a4:	fba3 1302 	umull	r1, r3, r3, r2
    a2a8:	09db      	lsrs	r3, r3, #7
    a2aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    a2ae:	fb01 2313 	mls	r3, r1, r3, r2
    a2b2:	62c3      	str	r3, [r0, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    a2b4:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    a2b6:	2300      	movs	r3, #0
    a2b8:	6243      	str	r3, [r0, #36]	; 0x24
	if (message[0] == 1 && message [length-1] == 10){
    a2ba:	f89a 3000 	ldrb.w	r3, [sl]
    a2be:	2b01      	cmp	r3, #1
    a2c0:	f43f ae07 	beq.w	9ed2 <grid_port_receive_decode+0xc6>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    a2c4:	23c8      	movs	r3, #200	; 0xc8
    a2c6:	9301      	str	r3, [sp, #4]
    a2c8:	2302      	movs	r3, #2
    a2ca:	9300      	str	r3, [sp, #0]
    a2cc:	2314      	movs	r3, #20
    a2ce:	2200      	movs	r2, #0
    a2d0:	4611      	mov	r1, r2
    a2d2:	4805      	ldr	r0, [pc, #20]	; (a2e8 <grid_port_receive_decode+0x4dc>)
    a2d4:	4c0a      	ldr	r4, [pc, #40]	; (a300 <grid_port_receive_decode+0x4f4>)
    a2d6:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    a2d8:	480e      	ldr	r0, [pc, #56]	; (a314 <grid_port_receive_decode+0x508>)
    a2da:	4b0b      	ldr	r3, [pc, #44]	; (a308 <grid_port_receive_decode+0x4fc>)
    a2dc:	4798      	blx	r3
}
    a2de:	3714      	adds	r7, #20
    a2e0:	46bd      	mov	sp, r7
    a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2e6:	bf00      	nop
    a2e8:	20003280 	.word	0x20003280
    a2ec:	00003b31 	.word	0x00003b31
    a2f0:	00003c29 	.word	0x00003c29
    a2f4:	00003efd 	.word	0x00003efd
    a2f8:	00003f39 	.word	0x00003f39
    a2fc:	00003be9 	.word	0x00003be9
    a300:	00003b95 	.word	0x00003b95
    a304:	0000e3d4 	.word	0x0000e3d4
    a308:	0000c799 	.word	0x0000c799
    a30c:	0000e40c 	.word	0x0000e40c
    a310:	10624dd3 	.word	0x10624dd3
    a314:	0000e440 	.word	0x0000e440

0000a318 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    a318:	b530      	push	{r4, r5, lr}
    a31a:	b083      	sub	sp, #12
    a31c:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    a31e:	7f03      	ldrb	r3, [r0, #28]
    a320:	2b01      	cmp	r3, #1
    a322:	d013      	beq.n	a34c <grid_port_receive_complete_task+0x34>
	grid_port_receive_task(por);	
    a324:	4620      	mov	r0, r4
    a326:	4b12      	ldr	r3, [pc, #72]	; (a370 <grid_port_receive_complete_task+0x58>)
    a328:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    a32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a32c:	b163      	cbz	r3, a348 <grid_port_receive_complete_task+0x30>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    a32e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a330:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a332:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a334:	bf34      	ite	cc
    a336:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a338:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    a33c:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    a33e:	4620      	mov	r0, r4
    a340:	4b0c      	ldr	r3, [pc, #48]	; (a374 <grid_port_receive_complete_task+0x5c>)
    a342:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    a344:	2300      	movs	r3, #0
    a346:	6263      	str	r3, [r4, #36]	; 0x24
}
    a348:	b003      	add	sp, #12
    a34a:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    a34c:	2300      	movs	r3, #0
    a34e:	7703      	strb	r3, [r0, #28]
		grid_port_reset_receiver(por);			
    a350:	4b09      	ldr	r3, [pc, #36]	; (a378 <grid_port_receive_complete_task+0x60>)
    a352:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a354:	23c8      	movs	r3, #200	; 0xc8
    a356:	9301      	str	r3, [sp, #4]
    a358:	2302      	movs	r3, #2
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	23ff      	movs	r3, #255	; 0xff
    a35e:	461a      	mov	r2, r3
    a360:	4619      	mov	r1, r3
    a362:	4806      	ldr	r0, [pc, #24]	; (a37c <grid_port_receive_complete_task+0x64>)
    a364:	4d06      	ldr	r5, [pc, #24]	; (a380 <grid_port_receive_complete_task+0x68>)
    a366:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    a368:	4806      	ldr	r0, [pc, #24]	; (a384 <grid_port_receive_complete_task+0x6c>)
    a36a:	4b07      	ldr	r3, [pc, #28]	; (a388 <grid_port_receive_complete_task+0x70>)
    a36c:	4798      	blx	r3
    a36e:	e7d9      	b.n	a324 <grid_port_receive_complete_task+0xc>
    a370:	00009c5d 	.word	0x00009c5d
    a374:	00009e0d 	.word	0x00009e0d
    a378:	00009bd9 	.word	0x00009bd9
    a37c:	20003280 	.word	0x20003280
    a380:	00003b95 	.word	0x00003b95
    a384:	0000e46c 	.word	0x0000e46c
    a388:	0000c799 	.word	0x0000c799

0000a38c <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    a38c:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    a38e:	4c18      	ldr	r4, [pc, #96]	; (a3f0 <init_timer+0x64>)
    a390:	f240 3333 	movw	r3, #819	; 0x333
    a394:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    a396:	4b17      	ldr	r3, [pc, #92]	; (a3f4 <init_timer+0x68>)
    a398:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    a39a:	2301      	movs	r3, #1
    a39c:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    a39e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a3a2:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    a3a4:	4a14      	ldr	r2, [pc, #80]	; (a3f8 <init_timer+0x6c>)
    a3a6:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    a3a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    a3ac:	f240 6266 	movw	r2, #1638	; 0x666
    a3b0:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    a3b2:	4a12      	ldr	r2, [pc, #72]	; (a3fc <init_timer+0x70>)
    a3b4:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    a3b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    a3ba:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    a3bc:	4a10      	ldr	r2, [pc, #64]	; (a400 <init_timer+0x74>)
    a3be:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    a3c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    a3c4:	4d0f      	ldr	r5, [pc, #60]	; (a404 <init_timer+0x78>)
    a3c6:	1d21      	adds	r1, r4, #4
    a3c8:	4628      	mov	r0, r5
    a3ca:	4e0f      	ldr	r6, [pc, #60]	; (a408 <init_timer+0x7c>)
    a3cc:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    a3ce:	f104 0118 	add.w	r1, r4, #24
    a3d2:	4628      	mov	r0, r5
    a3d4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    a3d6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a3da:	4628      	mov	r0, r5
    a3dc:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    a3de:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a3e2:	4628      	mov	r0, r5
    a3e4:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    a3e6:	4628      	mov	r0, r5
    a3e8:	4b08      	ldr	r3, [pc, #32]	; (a40c <init_timer+0x80>)
    a3ea:	4798      	blx	r3
    a3ec:	bd70      	pop	{r4, r5, r6, pc}
    a3ee:	bf00      	nop
    a3f0:	20000d68 	.word	0x20000d68
    a3f4:	00009ac9 	.word	0x00009ac9
    a3f8:	00009ab5 	.word	0x00009ab5
    a3fc:	00009aa9 	.word	0x00009aa9
    a400:	00009b2d 	.word	0x00009b2d
    a404:	20000f04 	.word	0x20000f04
    a408:	00005491 	.word	0x00005491
    a40c:	00005451 	.word	0x00005451

0000a410 <main>:
}



int main(void)
{
    a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a414:	b097      	sub	sp, #92	; 0x5c

	atmel_start_init();	
    a416:	4b5f      	ldr	r3, [pc, #380]	; (a594 <main+0x184>)
    a418:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    a41a:	4d5f      	ldr	r5, [pc, #380]	; (a598 <main+0x188>)
    a41c:	495f      	ldr	r1, [pc, #380]	; (a59c <main+0x18c>)
    a41e:	4628      	mov	r0, r5
    a420:	4c5f      	ldr	r4, [pc, #380]	; (a5a0 <main+0x190>)
    a422:	47a0      	blx	r4

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    a424:	495f      	ldr	r1, [pc, #380]	; (a5a4 <main+0x194>)
    a426:	4628      	mov	r0, r5
    a428:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    a42a:	4b5f      	ldr	r3, [pc, #380]	; (a5a8 <main+0x198>)
    a42c:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    a42e:	4b5f      	ldr	r3, [pc, #380]	; (a5ac <main+0x19c>)
    a430:	4798      	blx	r3

	composite_device_start();
    a432:	4b5f      	ldr	r3, [pc, #380]	; (a5b0 <main+0x1a0>)
    a434:	4798      	blx	r3

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    a436:	495f      	ldr	r1, [pc, #380]	; (a5b4 <main+0x1a4>)
    a438:	4628      	mov	r0, r5
    a43a:	47a0      	blx	r4
		
	grid_module_common_init();
    a43c:	4b5e      	ldr	r3, [pc, #376]	; (a5b8 <main+0x1a8>)
    a43e:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    a440:	495e      	ldr	r1, [pc, #376]	; (a5bc <main+0x1ac>)
    a442:	4628      	mov	r0, r5
    a444:	47a0      	blx	r4

	init_timer();
    a446:	4b5e      	ldr	r3, [pc, #376]	; (a5c0 <main+0x1b0>)
    a448:	4798      	blx	r3
	uint32_t loopfast = 0;
	uint32_t loopwarp = 0;
	
	uint8_t usb_init_variable = 0;
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Loop");
    a44a:	495e      	ldr	r1, [pc, #376]	; (a5c4 <main+0x1b4>)
    a44c:	4628      	mov	r0, r5
    a44e:	47a0      	blx	r4
	uint8_t usb_init_variable = 0;
    a450:	2300      	movs	r3, #0
    a452:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t loopwarp = 0;
    a454:	9304      	str	r3, [sp, #16]
	uint32_t loopfast = 0;
    a456:	9307      	str	r3, [sp, #28]
	uint32_t loopslow = 0;
    a458:	9306      	str	r3, [sp, #24]
	uint32_t loopcounter = 0;
    a45a:	9303      	str	r3, [sp, #12]
	mod->current_task = next_task;
    a45c:	f8df a1b8 	ldr.w	sl, [pc, #440]	; a618 <main+0x208>
    a460:	f04f 0301 	mov.w	r3, #1
    a464:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
		
		if (scheduler_report_flag){
			
			scheduler_report_flag=0;
    a468:	2400      	movs	r4, #0
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a46a:	f8df b1b0 	ldr.w	fp, [pc, #432]	; a61c <main+0x20c>
    a46e:	e0e0      	b.n	a632 <main+0x222>
			if (usb_d_get_frame_num() == 0){
    a470:	4b55      	ldr	r3, [pc, #340]	; (a5c8 <main+0x1b8>)
    a472:	4798      	blx	r3
    a474:	2800      	cmp	r0, #0
    a476:	f000 80e4 	beq.w	a642 <main+0x232>
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    a47a:	4954      	ldr	r1, [pc, #336]	; (a5cc <main+0x1bc>)
    a47c:	4846      	ldr	r0, [pc, #280]	; (a598 <main+0x188>)
    a47e:	4b48      	ldr	r3, [pc, #288]	; (a5a0 <main+0x190>)
    a480:	4798      	blx	r3
				grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    a482:	4b53      	ldr	r3, [pc, #332]	; (a5d0 <main+0x1c0>)
    a484:	7a5b      	ldrb	r3, [r3, #9]
    a486:	3301      	adds	r3, #1
    a488:	f003 0201 	and.w	r2, r3, #1
    a48c:	4d51      	ldr	r5, [pc, #324]	; (a5d4 <main+0x1c4>)
    a48e:	686b      	ldr	r3, [r5, #4]
    a490:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a492:	bf48      	it	mi
    a494:	4252      	negmi	r2, r2
    a496:	2102      	movs	r1, #2
    a498:	3007      	adds	r0, #7
    a49a:	4b4f      	ldr	r3, [pc, #316]	; (a5d8 <main+0x1c8>)
    a49c:	4798      	blx	r3
				grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    a49e:	2105      	movs	r1, #5
    a4a0:	4628      	mov	r0, r5
    a4a2:	4b4e      	ldr	r3, [pc, #312]	; (a5dc <main+0x1cc>)
    a4a4:	4798      	blx	r3
				usb_init_variable = 1;
    a4a6:	2301      	movs	r3, #1
    a4a8:	930c      	str	r3, [sp, #48]	; 0x30
    a4aa:	e0ca      	b.n	a642 <main+0x232>
			grid_sys_state.alert_state--;
    a4ac:	4b48      	ldr	r3, [pc, #288]	; (a5d0 <main+0x1c0>)
    a4ae:	889b      	ldrh	r3, [r3, #4]
    a4b0:	3b01      	subs	r3, #1
    a4b2:	b29b      	uxth	r3, r3
    a4b4:	4a46      	ldr	r2, [pc, #280]	; (a5d0 <main+0x1c0>)
    a4b6:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    a4b8:	4610      	mov	r0, r2
    a4ba:	4b49      	ldr	r3, [pc, #292]	; (a5e0 <main+0x1d0>)
    a4bc:	4798      	blx	r3
    a4be:	b9b0      	cbnz	r0, a4ee <main+0xde>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    a4c0:	4843      	ldr	r0, [pc, #268]	; (a5d0 <main+0x1c0>)
    a4c2:	4b48      	ldr	r3, [pc, #288]	; (a5e4 <main+0x1d4>)
    a4c4:	4798      	blx	r3
    a4c6:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a4c8:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	f000 8141 	beq.w	a754 <main+0x344>
    a4d2:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    a4d4:	4f44      	ldr	r7, [pc, #272]	; (a5e8 <main+0x1d8>)
    a4d6:	4633      	mov	r3, r6
    a4d8:	4622      	mov	r2, r4
    a4da:	4629      	mov	r1, r5
    a4dc:	4658      	mov	r0, fp
    a4de:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a4e0:	3501      	adds	r5, #1
    a4e2:	b2ed      	uxtb	r5, r5
    a4e4:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a4e8:	42ab      	cmp	r3, r5
    a4ea:	d8f4      	bhi.n	a4d6 <main+0xc6>
    a4ec:	e132      	b.n	a754 <main+0x344>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    a4ee:	4838      	ldr	r0, [pc, #224]	; (a5d0 <main+0x1c0>)
    a4f0:	4b3e      	ldr	r3, [pc, #248]	; (a5ec <main+0x1dc>)
    a4f2:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    a4f4:	4836      	ldr	r0, [pc, #216]	; (a5d0 <main+0x1c0>)
    a4f6:	4b3e      	ldr	r3, [pc, #248]	; (a5f0 <main+0x1e0>)
    a4f8:	4798      	blx	r3
    a4fa:	9008      	str	r0, [sp, #32]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    a4fc:	4834      	ldr	r0, [pc, #208]	; (a5d0 <main+0x1c0>)
    a4fe:	4b3d      	ldr	r3, [pc, #244]	; (a5f4 <main+0x1e4>)
    a500:	4798      	blx	r3
    a502:	9009      	str	r0, [sp, #36]	; 0x24
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    a504:	4832      	ldr	r0, [pc, #200]	; (a5d0 <main+0x1c0>)
    a506:	4b3c      	ldr	r3, [pc, #240]	; (a5f8 <main+0x1e8>)
    a508:	4798      	blx	r3
    a50a:	900a      	str	r0, [sp, #40]	; 0x28
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a50c:	f04f 0900 	mov.w	r9, #0
    a510:	e033      	b.n	a57a <main+0x16a>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    a512:	9401      	str	r4, [sp, #4]
    a514:	9400      	str	r4, [sp, #0]
    a516:	4623      	mov	r3, r4
    a518:	4622      	mov	r2, r4
    a51a:	4629      	mov	r1, r5
    a51c:	4658      	mov	r0, fp
    a51e:	4e37      	ldr	r6, [pc, #220]	; (a5fc <main+0x1ec>)
    a520:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    a522:	f8df 80fc 	ldr.w	r8, [pc, #252]	; a620 <main+0x210>
    a526:	9808      	ldr	r0, [sp, #32]
    a528:	47c0      	blx	r8
    a52a:	4f35      	ldr	r7, [pc, #212]	; (a600 <main+0x1f0>)
    a52c:	2200      	movs	r2, #0
    a52e:	4b35      	ldr	r3, [pc, #212]	; (a604 <main+0x1f4>)
    a530:	47b8      	blx	r7
    a532:	4e35      	ldr	r6, [pc, #212]	; (a608 <main+0x1f8>)
    a534:	47b0      	blx	r6
    a536:	b2c2      	uxtb	r2, r0
    a538:	920b      	str	r2, [sp, #44]	; 0x2c
    a53a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a53c:	47c0      	blx	r8
    a53e:	2200      	movs	r2, #0
    a540:	4b30      	ldr	r3, [pc, #192]	; (a604 <main+0x1f4>)
    a542:	47b8      	blx	r7
    a544:	47b0      	blx	r6
    a546:	b2c0      	uxtb	r0, r0
    a548:	9001      	str	r0, [sp, #4]
    a54a:	9809      	ldr	r0, [sp, #36]	; 0x24
    a54c:	47c0      	blx	r8
    a54e:	2200      	movs	r2, #0
    a550:	4b2c      	ldr	r3, [pc, #176]	; (a604 <main+0x1f4>)
    a552:	47b8      	blx	r7
    a554:	47b0      	blx	r6
    a556:	b2c0      	uxtb	r0, r0
    a558:	9000      	str	r0, [sp, #0]
    a55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a55c:	4622      	mov	r2, r4
    a55e:	4629      	mov	r1, r5
    a560:	4658      	mov	r0, fp
    a562:	4e2a      	ldr	r6, [pc, #168]	; (a60c <main+0x1fc>)
    a564:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    a566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a568:	9201      	str	r2, [sp, #4]
    a56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a56c:	9200      	str	r2, [sp, #0]
    a56e:	9b08      	ldr	r3, [sp, #32]
    a570:	4622      	mov	r2, r4
    a572:	4629      	mov	r1, r5
    a574:	4658      	mov	r0, fp
    a576:	4d26      	ldr	r5, [pc, #152]	; (a610 <main+0x200>)
    a578:	47a8      	blx	r5
    a57a:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a57e:	4658      	mov	r0, fp
    a580:	4b24      	ldr	r3, [pc, #144]	; (a614 <main+0x204>)
    a582:	4798      	blx	r3
    a584:	f109 0901 	add.w	r9, r9, #1
    a588:	42a8      	cmp	r0, r5
    a58a:	d8c2      	bhi.n	a512 <main+0x102>
    a58c:	e798      	b.n	a4c0 <main+0xb0>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    a58e:	9404      	str	r4, [sp, #16]
    a590:	e107      	b.n	a7a2 <main+0x392>
    a592:	bf00      	nop
    a594:	000002d1 	.word	0x000002d1
    a598:	0000da38 	.word	0x0000da38
    a59c:	0000e49c 	.word	0x0000e49c
    a5a0:	0000c6b1 	.word	0x0000c6b1
    a5a4:	0000e4b0 	.word	0x0000e4b0
    a5a8:	00001161 	.word	0x00001161
    a5ac:	0000b335 	.word	0x0000b335
    a5b0:	0000bcdd 	.word	0x0000bcdd
    a5b4:	0000e4bc 	.word	0x0000e4bc
    a5b8:	000025ad 	.word	0x000025ad
    a5bc:	0000e4dc 	.word	0x0000e4dc
    a5c0:	0000a38d 	.word	0x0000a38d
    a5c4:	0000e4f4 	.word	0x0000e4f4
    a5c8:	00005ccd 	.word	0x00005ccd
    a5cc:	0000e4fc 	.word	0x0000e4fc
    a5d0:	20003280 	.word	0x20003280
    a5d4:	20003270 	.word	0x20003270
    a5d8:	00003c29 	.word	0x00003c29
    a5dc:	00004375 	.word	0x00004375
    a5e0:	00003b43 	.word	0x00003b43
    a5e4:	00003b4d 	.word	0x00003b4d
    a5e8:	00002117 	.word	0x00002117
    a5ec:	00003b47 	.word	0x00003b47
    a5f0:	00003bb3 	.word	0x00003bb3
    a5f4:	00003bb7 	.word	0x00003bb7
    a5f8:	00003bbb 	.word	0x00003bbb
    a5fc:	0000203b 	.word	0x0000203b
    a600:	0000c075 	.word	0x0000c075
    a604:	3fe00000 	.word	0x3fe00000
    a608:	0000c499 	.word	0x0000c499
    a60c:	00002083 	.word	0x00002083
    a610:	000020cd 	.word	0x000020cd
    a614:	00001ff9 	.word	0x00001ff9
    a618:	20007d20 	.word	0x20007d20
    a61c:	200077d4 	.word	0x200077d4
    a620:	0000bfa9 	.word	0x0000bfa9
				}
			}
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
					
				delay_us(1);			
    a624:	2001      	movs	r0, #1
    a626:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    a628:	4639      	mov	r1, r7
    a62a:	4865      	ldr	r0, [pc, #404]	; (a7c0 <main+0x3b0>)
    a62c:	47a8      	blx	r5
    a62e:	280f      	cmp	r0, #15
    a630:	d9f8      	bls.n	a624 <main+0x214>
	mod->current_task = next_task;
    a632:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a636:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    a63a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a63c:	2b00      	cmp	r3, #0
    a63e:	f43f af17 	beq.w	a470 <main+0x60>
		loopcounter++;
    a642:	9b03      	ldr	r3, [sp, #12]
    a644:	3301      	adds	r3, #1
    a646:	9303      	str	r3, [sp, #12]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    a648:	485d      	ldr	r0, [pc, #372]	; (a7c0 <main+0x3b0>)
    a64a:	4b5e      	ldr	r3, [pc, #376]	; (a7c4 <main+0x3b4>)
    a64c:	4798      	blx	r3
    a64e:	9005      	str	r0, [sp, #20]
		if (scheduler_report_flag){
    a650:	4b5d      	ldr	r3, [pc, #372]	; (a7c8 <main+0x3b8>)
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	2b00      	cmp	r3, #0
    a656:	d037      	beq.n	a6c8 <main+0x2b8>
			scheduler_report_flag=0;
    a658:	4b5b      	ldr	r3, [pc, #364]	; (a7c8 <main+0x3b8>)
    a65a:	701c      	strb	r4, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    a65c:	2220      	movs	r2, #32
    a65e:	4621      	mov	r1, r4
    a660:	a80e      	add	r0, sp, #56	; 0x38
    a662:	4b5a      	ldr	r3, [pc, #360]	; (a7cc <main+0x3bc>)
    a664:	4798      	blx	r3
    a666:	4b5a      	ldr	r3, [pc, #360]	; (a7d0 <main+0x3c0>)
    a668:	aa0d      	add	r2, sp, #52	; 0x34
    a66a:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    a66e:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    a672:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    a676:	4298      	cmp	r0, r3
    a678:	d1f9      	bne.n	a66e <main+0x25e>
			grid_task_timer_reset(&grid_task_state);
    a67a:	4650      	mov	r0, sl
    a67c:	4b55      	ldr	r3, [pc, #340]	; (a7d4 <main+0x3c4>)
    a67e:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    a680:	4855      	ldr	r0, [pc, #340]	; (a7d8 <main+0x3c8>)
    a682:	4d56      	ldr	r5, [pc, #344]	; (a7dc <main+0x3cc>)
    a684:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    a686:	990e      	ldr	r1, [sp, #56]	; 0x38
    a688:	4855      	ldr	r0, [pc, #340]	; (a7e0 <main+0x3d0>)
    a68a:	47a8      	blx	r5
    a68c:	ad0f      	add	r5, sp, #60	; 0x3c
    a68e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
					printf(", ");
    a692:	f8df 8198 	ldr.w	r8, [pc, #408]	; a82c <main+0x41c>
    a696:	4e51      	ldr	r6, [pc, #324]	; (a7dc <main+0x3cc>)
				printf("\"%d\"", task_val[i]);
    a698:	4f51      	ldr	r7, [pc, #324]	; (a7e0 <main+0x3d0>)
					printf(", ");
    a69a:	4640      	mov	r0, r8
    a69c:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    a69e:	f855 1b04 	ldr.w	r1, [r5], #4
    a6a2:	4638      	mov	r0, r7
    a6a4:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    a6a6:	454d      	cmp	r5, r9
    a6a8:	d1f7      	bne.n	a69a <main+0x28a>
			printf("]}\r\n");
    a6aa:	484e      	ldr	r0, [pc, #312]	; (a7e4 <main+0x3d4>)
    a6ac:	4b4e      	ldr	r3, [pc, #312]	; (a7e8 <main+0x3d8>)
    a6ae:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", loopcounter, loopslow, loopfast, loopwarp);
    a6b0:	9b04      	ldr	r3, [sp, #16]
    a6b2:	9300      	str	r3, [sp, #0]
    a6b4:	9b07      	ldr	r3, [sp, #28]
    a6b6:	9a06      	ldr	r2, [sp, #24]
    a6b8:	9903      	ldr	r1, [sp, #12]
    a6ba:	484c      	ldr	r0, [pc, #304]	; (a7ec <main+0x3dc>)
    a6bc:	4d47      	ldr	r5, [pc, #284]	; (a7dc <main+0x3cc>)
    a6be:	47a8      	blx	r5
			loopwarp = 0;
    a6c0:	9404      	str	r4, [sp, #16]
			loopfast = 0;
    a6c2:	9407      	str	r4, [sp, #28]
			loopslow = 0;
    a6c4:	9406      	str	r4, [sp, #24]
			loopcounter = 0;
    a6c6:	9403      	str	r4, [sp, #12]
	mod->current_task = next_task;
    a6c8:	2302      	movs	r3, #2
    a6ca:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    a6ce:	4848      	ldr	r0, [pc, #288]	; (a7f0 <main+0x3e0>)
    a6d0:	4d48      	ldr	r5, [pc, #288]	; (a7f4 <main+0x3e4>)
    a6d2:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    a6d4:	f8df 9158 	ldr.w	r9, [pc, #344]	; a830 <main+0x420>
    a6d8:	4648      	mov	r0, r9
    a6da:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    a6dc:	f8df 8154 	ldr.w	r8, [pc, #340]	; a834 <main+0x424>
    a6e0:	4640      	mov	r0, r8
    a6e2:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    a6e4:	4f44      	ldr	r7, [pc, #272]	; (a7f8 <main+0x3e8>)
    a6e6:	4638      	mov	r0, r7
    a6e8:	47a8      	blx	r5
	mod->current_task = next_task;
    a6ea:	2303      	movs	r3, #3
    a6ec:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    a6f0:	4e42      	ldr	r6, [pc, #264]	; (a7fc <main+0x3ec>)
    a6f2:	4630      	mov	r0, r6
    a6f4:	4b42      	ldr	r3, [pc, #264]	; (a800 <main+0x3f0>)
    a6f6:	4798      	blx	r3
	mod->current_task = next_task;
    a6f8:	2304      	movs	r3, #4
    a6fa:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    a6fe:	2101      	movs	r1, #1
    a700:	4630      	mov	r0, r6
    a702:	4d40      	ldr	r5, [pc, #256]	; (a804 <main+0x3f4>)
    a704:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    a706:	4621      	mov	r1, r4
    a708:	4839      	ldr	r0, [pc, #228]	; (a7f0 <main+0x3e0>)
    a70a:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    a70c:	4621      	mov	r1, r4
    a70e:	4648      	mov	r0, r9
    a710:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    a712:	4621      	mov	r1, r4
    a714:	4640      	mov	r0, r8
    a716:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    a718:	4621      	mov	r1, r4
    a71a:	4638      	mov	r0, r7
    a71c:	47a8      	blx	r5
	mod->current_task = next_task;
    a71e:	2305      	movs	r3, #5
    a720:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    a724:	4832      	ldr	r0, [pc, #200]	; (a7f0 <main+0x3e0>)
    a726:	4d38      	ldr	r5, [pc, #224]	; (a808 <main+0x3f8>)
    a728:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    a72a:	4648      	mov	r0, r9
    a72c:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    a72e:	4640      	mov	r0, r8
    a730:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    a732:	4638      	mov	r0, r7
    a734:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    a736:	4835      	ldr	r0, [pc, #212]	; (a80c <main+0x3fc>)
    a738:	4b35      	ldr	r3, [pc, #212]	; (a810 <main+0x400>)
    a73a:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    a73c:	4630      	mov	r0, r6
    a73e:	4b35      	ldr	r3, [pc, #212]	; (a814 <main+0x404>)
    a740:	4798      	blx	r3
	mod->current_task = next_task;
    a742:	2307      	movs	r3, #7
    a744:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    a748:	4b1d      	ldr	r3, [pc, #116]	; (a7c0 <main+0x3b0>)
    a74a:	889b      	ldrh	r3, [r3, #4]
    a74c:	b29b      	uxth	r3, r3
    a74e:	2b00      	cmp	r3, #0
    a750:	f47f aeac 	bne.w	a4ac <main+0x9c>
	mod->current_task = next_task;
    a754:	2306      	movs	r3, #6
    a756:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    a75a:	4658      	mov	r0, fp
    a75c:	4b2e      	ldr	r3, [pc, #184]	; (a818 <main+0x408>)
    a75e:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    a760:	4658      	mov	r0, fp
    a762:	4b2e      	ldr	r3, [pc, #184]	; (a81c <main+0x40c>)
    a764:	4798      	blx	r3
			grid_led_hardware_start_transfer(&grid_led_state);
    a766:	4658      	mov	r0, fp
    a768:	4b2d      	ldr	r3, [pc, #180]	; (a820 <main+0x410>)
    a76a:	4798      	blx	r3
	mod->current_task = next_task;
    a76c:	f88a 4001 	strb.w	r4, [sl, #1]
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    a770:	9d05      	ldr	r5, [sp, #20]
    a772:	4629      	mov	r1, r5
    a774:	4812      	ldr	r0, [pc, #72]	; (a7c0 <main+0x3b0>)
    a776:	4b2b      	ldr	r3, [pc, #172]	; (a824 <main+0x414>)
    a778:	4798      	blx	r3
		if (elapsed < RTC1MS){
    a77a:	280f      	cmp	r0, #15
    a77c:	d818      	bhi.n	a7b0 <main+0x3a0>
			if (loopwarp>5){
    a77e:	9904      	ldr	r1, [sp, #16]
    a780:	2905      	cmp	r1, #5
    a782:	d911      	bls.n	a7a8 <main+0x398>
				if (RTC1MS - elapsed > 0){
    a784:	2810      	cmp	r0, #16
    a786:	d00f      	beq.n	a7a8 <main+0x398>
					if ((RTC1MS - elapsed)<loopwarp){				
    a788:	f1c0 0310 	rsb	r3, r0, #16
    a78c:	4299      	cmp	r1, r3
    a78e:	f67f aefe 	bls.w	a58e <main+0x17e>
    a792:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    a796:	4403      	add	r3, r0
    a798:	9304      	str	r3, [sp, #16]
    a79a:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    a79e:	18c3      	adds	r3, r0, r3
    a7a0:	9305      	str	r3, [sp, #20]
					loopfast++;
    a7a2:	9b07      	ldr	r3, [sp, #28]
    a7a4:	3301      	adds	r3, #1
    a7a6:	9307      	str	r3, [sp, #28]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    a7a8:	4d1e      	ldr	r5, [pc, #120]	; (a824 <main+0x414>)
				delay_us(1);			
    a7aa:	4e1f      	ldr	r6, [pc, #124]	; (a828 <main+0x418>)
    a7ac:	9f05      	ldr	r7, [sp, #20]
    a7ae:	e73b      	b.n	a628 <main+0x218>
    a7b0:	9b04      	ldr	r3, [sp, #16]
    a7b2:	3b10      	subs	r3, #16
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    a7b4:	18c3      	adds	r3, r0, r3
    a7b6:	9304      	str	r3, [sp, #16]
			
			loopslow++;
    a7b8:	9b06      	ldr	r3, [sp, #24]
    a7ba:	3301      	adds	r3, #1
    a7bc:	9306      	str	r3, [sp, #24]
    a7be:	e738      	b.n	a632 <main+0x222>
    a7c0:	20003280 	.word	0x20003280
    a7c4:	00003b31 	.word	0x00003b31
    a7c8:	20000d68 	.word	0x20000d68
    a7cc:	0000c547 	.word	0x0000c547
    a7d0:	20007d24 	.word	0x20007d24
    a7d4:	00009bc9 	.word	0x00009bc9
    a7d8:	0000e518 	.word	0x0000e518
    a7dc:	0000c6b1 	.word	0x0000c6b1
    a7e0:	0000e534 	.word	0x0000e534
    a7e4:	0000e468 	.word	0x0000e468
    a7e8:	0000c799 	.word	0x0000c799
    a7ec:	0000e540 	.word	0x0000e540
    a7f0:	2000121c 	.word	0x2000121c
    a7f4:	0000a319 	.word	0x0000a319
    a7f8:	20003730 	.word	0x20003730
    a7fc:	20002268 	.word	0x20002268
    a800:	00004389 	.word	0x00004389
    a804:	00001731 	.word	0x00001731
    a808:	00001f05 	.word	0x00001f05
    a80c:	20005758 	.word	0x20005758
    a810:	00001901 	.word	0x00001901
    a814:	00001da5 	.word	0x00001da5
    a818:	00001ffd 	.word	0x00001ffd
    a81c:	00002381 	.word	0x00002381
    a820:	00002581 	.word	0x00002581
    a824:	00003b35 	.word	0x00003b35
    a828:	00004c05 	.word	0x00004c05
    a82c:	0000e53c 	.word	0x0000e53c
    a830:	20006760 	.word	0x20006760
    a834:	2000474c 	.word	0x2000474c

0000a838 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a838:	b940      	cbnz	r0, a84c <_read+0x14>
{
    a83a:	b508      	push	{r3, lr}
    a83c:	460b      	mov	r3, r1
    a83e:	4611      	mov	r1, r2
    a840:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a842:	4b04      	ldr	r3, [pc, #16]	; (a854 <_read+0x1c>)
    a844:	4798      	blx	r3
    a846:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a84a:	bd08      	pop	{r3, pc}
		return -1;
    a84c:	f04f 30ff 	mov.w	r0, #4294967295
    a850:	4770      	bx	lr
    a852:	bf00      	nop
    a854:	0000a8a9 	.word	0x0000a8a9

0000a858 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a858:	3801      	subs	r0, #1
    a85a:	2802      	cmp	r0, #2
    a85c:	d808      	bhi.n	a870 <_write+0x18>
{
    a85e:	b508      	push	{r3, lr}
    a860:	460b      	mov	r3, r1
    a862:	4611      	mov	r1, r2
    a864:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a866:	4b04      	ldr	r3, [pc, #16]	; (a878 <_write+0x20>)
    a868:	4798      	blx	r3
    a86a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a86e:	bd08      	pop	{r3, pc}
		return -1;
    a870:	f04f 30ff 	mov.w	r0, #4294967295
    a874:	4770      	bx	lr
    a876:	bf00      	nop
    a878:	0000a8cd 	.word	0x0000a8cd

0000a87c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a87c:	b570      	push	{r4, r5, r6, lr}
    a87e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a880:	4d06      	ldr	r5, [pc, #24]	; (a89c <stdio_io_init+0x20>)
    a882:	682b      	ldr	r3, [r5, #0]
    a884:	2100      	movs	r1, #0
    a886:	6898      	ldr	r0, [r3, #8]
    a888:	4c05      	ldr	r4, [pc, #20]	; (a8a0 <stdio_io_init+0x24>)
    a88a:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a88c:	682b      	ldr	r3, [r5, #0]
    a88e:	2100      	movs	r1, #0
    a890:	6858      	ldr	r0, [r3, #4]
    a892:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a894:	4b03      	ldr	r3, [pc, #12]	; (a8a4 <stdio_io_init+0x28>)
    a896:	601e      	str	r6, [r3, #0]
    a898:	bd70      	pop	{r4, r5, r6, pc}
    a89a:	bf00      	nop
    a89c:	20000558 	.word	0x20000558
    a8a0:	0000c7c9 	.word	0x0000c7c9
    a8a4:	20000dc0 	.word	0x20000dc0

0000a8a8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a8a8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a8aa:	4b06      	ldr	r3, [pc, #24]	; (a8c4 <stdio_io_read+0x1c>)
    a8ac:	681b      	ldr	r3, [r3, #0]
    a8ae:	b133      	cbz	r3, a8be <stdio_io_read+0x16>
    a8b0:	460a      	mov	r2, r1
    a8b2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a8b4:	b292      	uxth	r2, r2
    a8b6:	4618      	mov	r0, r3
    a8b8:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <stdio_io_read+0x20>)
    a8ba:	4798      	blx	r3
    a8bc:	bd08      	pop	{r3, pc}
		return 0;
    a8be:	2000      	movs	r0, #0
}
    a8c0:	bd08      	pop	{r3, pc}
    a8c2:	bf00      	nop
    a8c4:	20000dc0 	.word	0x20000dc0
    a8c8:	00004de1 	.word	0x00004de1

0000a8cc <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a8cc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a8ce:	4b06      	ldr	r3, [pc, #24]	; (a8e8 <stdio_io_write+0x1c>)
    a8d0:	681b      	ldr	r3, [r3, #0]
    a8d2:	b133      	cbz	r3, a8e2 <stdio_io_write+0x16>
    a8d4:	460a      	mov	r2, r1
    a8d6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a8d8:	b292      	uxth	r2, r2
    a8da:	4618      	mov	r0, r3
    a8dc:	4b03      	ldr	r3, [pc, #12]	; (a8ec <stdio_io_write+0x20>)
    a8de:	4798      	blx	r3
    a8e0:	bd08      	pop	{r3, pc}
		return 0;
    a8e2:	2000      	movs	r0, #0
}
    a8e4:	bd08      	pop	{r3, pc}
    a8e6:	bf00      	nop
    a8e8:	20000dc0 	.word	0x20000dc0
    a8ec:	00004db1 	.word	0x00004db1

0000a8f0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a8f0:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    a8f2:	4c04      	ldr	r4, [pc, #16]	; (a904 <stdio_redirect_init+0x14>)
    a8f4:	4620      	mov	r0, r4
    a8f6:	4b04      	ldr	r3, [pc, #16]	; (a908 <stdio_redirect_init+0x18>)
    a8f8:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    a8fa:	4620      	mov	r0, r4
    a8fc:	4b03      	ldr	r3, [pc, #12]	; (a90c <stdio_redirect_init+0x1c>)
    a8fe:	4798      	blx	r3
    a900:	bd10      	pop	{r4, pc}
    a902:	bf00      	nop
    a904:	20000fbc 	.word	0x20000fbc
    a908:	000059c1 	.word	0x000059c1
    a90c:	0000a87d 	.word	0x0000a87d

0000a910 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a910:	b5f0      	push	{r4, r5, r6, r7, lr}
    a912:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a914:	780b      	ldrb	r3, [r1, #0]
    a916:	f3c3 1441 	ubfx	r4, r3, #5, #2
    a91a:	2c01      	cmp	r4, #1
    a91c:	d15e      	bne.n	a9dc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a91e:	888c      	ldrh	r4, [r1, #4]
    a920:	4d35      	ldr	r5, [pc, #212]	; (a9f8 <cdcdf_acm_req+0xe8>)
    a922:	782d      	ldrb	r5, [r5, #0]
    a924:	42a5      	cmp	r5, r4
    a926:	d003      	beq.n	a930 <cdcdf_acm_req+0x20>
    a928:	4d33      	ldr	r5, [pc, #204]	; (a9f8 <cdcdf_acm_req+0xe8>)
    a92a:	786d      	ldrb	r5, [r5, #1]
    a92c:	42a5      	cmp	r5, r4
    a92e:	d158      	bne.n	a9e2 <cdcdf_acm_req+0xd2>
    a930:	4616      	mov	r6, r2
    a932:	460c      	mov	r4, r1
    a934:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a936:	f013 0f80 	tst.w	r3, #128	; 0x80
    a93a:	d10c      	bne.n	a956 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    a93c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a93e:	4b2f      	ldr	r3, [pc, #188]	; (a9fc <cdcdf_acm_req+0xec>)
    a940:	4798      	blx	r3
    a942:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a944:	7863      	ldrb	r3, [r4, #1]
    a946:	2b20      	cmp	r3, #32
    a948:	d013      	beq.n	a972 <cdcdf_acm_req+0x62>
    a94a:	2b22      	cmp	r3, #34	; 0x22
    a94c:	d032      	beq.n	a9b4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    a94e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a952:	b003      	add	sp, #12
    a954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    a956:	2a01      	cmp	r2, #1
    a958:	d046      	beq.n	a9e8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    a95a:	784b      	ldrb	r3, [r1, #1]
    a95c:	2b21      	cmp	r3, #33	; 0x21
    a95e:	d145      	bne.n	a9ec <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a960:	88cb      	ldrh	r3, [r1, #6]
    a962:	2b07      	cmp	r3, #7
    a964:	d145      	bne.n	a9f2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a966:	2300      	movs	r3, #0
    a968:	2207      	movs	r2, #7
    a96a:	4925      	ldr	r1, [pc, #148]	; (aa00 <cdcdf_acm_req+0xf0>)
    a96c:	4c25      	ldr	r4, [pc, #148]	; (aa04 <cdcdf_acm_req+0xf4>)
    a96e:	47a0      	blx	r4
    a970:	e7ef      	b.n	a952 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a972:	2f07      	cmp	r7, #7
    a974:	d12b      	bne.n	a9ce <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    a976:	b1be      	cbz	r6, a9a8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a978:	6800      	ldr	r0, [r0, #0]
    a97a:	9000      	str	r0, [sp, #0]
    a97c:	888a      	ldrh	r2, [r1, #4]
    a97e:	798b      	ldrb	r3, [r1, #6]
    a980:	f8ad 2004 	strh.w	r2, [sp, #4]
    a984:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a988:	4b1b      	ldr	r3, [pc, #108]	; (a9f8 <cdcdf_acm_req+0xe8>)
    a98a:	691b      	ldr	r3, [r3, #16]
    a98c:	b113      	cbz	r3, a994 <cdcdf_acm_req+0x84>
    a98e:	4668      	mov	r0, sp
    a990:	4798      	blx	r3
    a992:	b1f8      	cbz	r0, a9d4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    a994:	4b18      	ldr	r3, [pc, #96]	; (a9f8 <cdcdf_acm_req+0xe8>)
    a996:	aa02      	add	r2, sp, #8
    a998:	e912 0003 	ldmdb	r2, {r0, r1}
    a99c:	6098      	str	r0, [r3, #8]
    a99e:	8199      	strh	r1, [r3, #12]
    a9a0:	0c09      	lsrs	r1, r1, #16
    a9a2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    a9a4:	2000      	movs	r0, #0
    a9a6:	e7d4      	b.n	a952 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a9a8:	2300      	movs	r3, #0
    a9aa:	2207      	movs	r2, #7
    a9ac:	4628      	mov	r0, r5
    a9ae:	4c15      	ldr	r4, [pc, #84]	; (aa04 <cdcdf_acm_req+0xf4>)
    a9b0:	47a0      	blx	r4
    a9b2:	e7ce      	b.n	a952 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    a9b4:	2300      	movs	r3, #0
    a9b6:	461a      	mov	r2, r3
    a9b8:	4619      	mov	r1, r3
    a9ba:	4618      	mov	r0, r3
    a9bc:	4d11      	ldr	r5, [pc, #68]	; (aa04 <cdcdf_acm_req+0xf4>)
    a9be:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    a9c0:	4b0d      	ldr	r3, [pc, #52]	; (a9f8 <cdcdf_acm_req+0xe8>)
    a9c2:	695b      	ldr	r3, [r3, #20]
    a9c4:	b143      	cbz	r3, a9d8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    a9c6:	8860      	ldrh	r0, [r4, #2]
    a9c8:	4798      	blx	r3
		return ERR_NONE;
    a9ca:	2000      	movs	r0, #0
    a9cc:	e7c1      	b.n	a952 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a9ce:	f04f 30ff 	mov.w	r0, #4294967295
    a9d2:	e7be      	b.n	a952 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    a9d4:	2000      	movs	r0, #0
    a9d6:	e7bc      	b.n	a952 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a9d8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    a9da:	e7ba      	b.n	a952 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a9dc:	f06f 0009 	mvn.w	r0, #9
    a9e0:	e7b7      	b.n	a952 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a9e2:	f06f 0009 	mvn.w	r0, #9
    a9e6:	e7b4      	b.n	a952 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a9e8:	2000      	movs	r0, #0
    a9ea:	e7b2      	b.n	a952 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    a9ec:	f06f 000c 	mvn.w	r0, #12
    a9f0:	e7af      	b.n	a952 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a9f2:	f04f 30ff 	mov.w	r0, #4294967295
    a9f6:	e7ac      	b.n	a952 <cdcdf_acm_req+0x42>
    a9f8:	20000dc4 	.word	0x20000dc4
    a9fc:	0000ba59 	.word	0x0000ba59
    aa00:	20000dcc 	.word	0x20000dcc
    aa04:	0000b535 	.word	0x0000b535

0000aa08 <cdcdf_acm_ctrl>:
{
    aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa0c:	b083      	sub	sp, #12
    aa0e:	4616      	mov	r6, r2
	switch (ctrl) {
    aa10:	2901      	cmp	r1, #1
    aa12:	d066      	beq.n	aae2 <cdcdf_acm_ctrl+0xda>
    aa14:	b141      	cbz	r1, aa28 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    aa16:	2902      	cmp	r1, #2
    aa18:	bf0c      	ite	eq
    aa1a:	f06f 001a 	mvneq.w	r0, #26
    aa1e:	f06f 000c 	mvnne.w	r0, #12
}
    aa22:	b003      	add	sp, #12
    aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    aa28:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    aa2c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    aa2e:	2800      	cmp	r0, #0
    aa30:	f000 8085 	beq.w	ab3e <cdcdf_acm_ctrl+0x136>
    aa34:	f10a 3bff 	add.w	fp, sl, #4294967295
    aa38:	f10a 0301 	add.w	r3, sl, #1
    aa3c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aa3e:	4f46      	ldr	r7, [pc, #280]	; (ab58 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    aa40:	f8df 9124 	ldr.w	r9, [pc, #292]	; ab68 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aa44:	f8df 8124 	ldr.w	r8, [pc, #292]	; ab6c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    aa48:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    aa4a:	7943      	ldrb	r3, [r0, #5]
    aa4c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    aa50:	2b02      	cmp	r3, #2
    aa52:	d002      	beq.n	aa5a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    aa54:	f06f 0009 	mvn.w	r0, #9
    aa58:	e7e3      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
    aa5a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    aa5e:	f89b 3000 	ldrb.w	r3, [fp]
    aa62:	429a      	cmp	r2, r3
    aa64:	d06e      	beq.n	ab44 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    aa66:	2bff      	cmp	r3, #255	; 0xff
    aa68:	d16f      	bne.n	ab4a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    aa6a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    aa6e:	2205      	movs	r2, #5
    aa70:	6871      	ldr	r1, [r6, #4]
    aa72:	4b3a      	ldr	r3, [pc, #232]	; (ab5c <cdcdf_acm_ctrl+0x154>)
    aa74:	4798      	blx	r3
		while (NULL != ep) {
    aa76:	4604      	mov	r4, r0
    aa78:	b1f8      	cbz	r0, aaba <cdcdf_acm_ctrl+0xb2>
    aa7a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    aa7e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    aa80:	7963      	ldrb	r3, [r4, #5]
    aa82:	7922      	ldrb	r2, [r4, #4]
    aa84:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aa88:	b292      	uxth	r2, r2
    aa8a:	78e1      	ldrb	r1, [r4, #3]
    aa8c:	4628      	mov	r0, r5
    aa8e:	47b8      	blx	r7
    aa90:	2800      	cmp	r0, #0
    aa92:	d15d      	bne.n	ab50 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    aa94:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    aa98:	bf14      	ite	ne
    aa9a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    aa9e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    aaa2:	4628      	mov	r0, r5
    aaa4:	47c8      	blx	r9
			desc->sod = ep;
    aaa6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    aaa8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aaaa:	6871      	ldr	r1, [r6, #4]
    aaac:	4420      	add	r0, r4
    aaae:	47c0      	blx	r8
		while (NULL != ep) {
    aab0:	4604      	mov	r4, r0
    aab2:	2800      	cmp	r0, #0
    aab4:	d1e3      	bne.n	aa7e <cdcdf_acm_ctrl+0x76>
    aab6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    aaba:	6833      	ldr	r3, [r6, #0]
    aabc:	7818      	ldrb	r0, [r3, #0]
    aabe:	2204      	movs	r2, #4
    aac0:	6871      	ldr	r1, [r6, #4]
    aac2:	4418      	add	r0, r3
    aac4:	4b25      	ldr	r3, [pc, #148]	; (ab5c <cdcdf_acm_ctrl+0x154>)
    aac6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    aac8:	9b00      	ldr	r3, [sp, #0]
    aaca:	459b      	cmp	fp, r3
    aacc:	d004      	beq.n	aad8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    aace:	2800      	cmp	r0, #0
    aad0:	d1ba      	bne.n	aa48 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    aad2:	f06f 0009 	mvn.w	r0, #9
    aad6:	e7a4      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    aad8:	2201      	movs	r2, #1
    aada:	4b21      	ldr	r3, [pc, #132]	; (ab60 <cdcdf_acm_ctrl+0x158>)
    aadc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    aade:	2000      	movs	r0, #0
    aae0:	e79f      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    aae2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    aae4:	b142      	cbz	r2, aaf8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    aae6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    aae8:	795b      	ldrb	r3, [r3, #5]
    aaea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    aaee:	2b02      	cmp	r3, #2
    aaf0:	d002      	beq.n	aaf8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    aaf2:	f06f 0009 	mvn.w	r0, #9
    aaf6:	e794      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    aaf8:	7823      	ldrb	r3, [r4, #0]
    aafa:	2bff      	cmp	r3, #255	; 0xff
    aafc:	d008      	beq.n	ab10 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    aafe:	23ff      	movs	r3, #255	; 0xff
    ab00:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    ab02:	78a0      	ldrb	r0, [r4, #2]
    ab04:	4298      	cmp	r0, r3
    ab06:	d003      	beq.n	ab10 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    ab08:	4b16      	ldr	r3, [pc, #88]	; (ab64 <cdcdf_acm_ctrl+0x15c>)
    ab0a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    ab0c:	23ff      	movs	r3, #255	; 0xff
    ab0e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    ab10:	7863      	ldrb	r3, [r4, #1]
    ab12:	2bff      	cmp	r3, #255	; 0xff
    ab14:	d008      	beq.n	ab28 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    ab16:	23ff      	movs	r3, #255	; 0xff
    ab18:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    ab1a:	78e0      	ldrb	r0, [r4, #3]
    ab1c:	4298      	cmp	r0, r3
    ab1e:	d003      	beq.n	ab28 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    ab20:	4b10      	ldr	r3, [pc, #64]	; (ab64 <cdcdf_acm_ctrl+0x15c>)
    ab22:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    ab24:	23ff      	movs	r3, #255	; 0xff
    ab26:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    ab28:	7920      	ldrb	r0, [r4, #4]
    ab2a:	28ff      	cmp	r0, #255	; 0xff
    ab2c:	d003      	beq.n	ab36 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    ab2e:	4b0d      	ldr	r3, [pc, #52]	; (ab64 <cdcdf_acm_ctrl+0x15c>)
    ab30:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ab32:	23ff      	movs	r3, #255	; 0xff
    ab34:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    ab36:	2000      	movs	r0, #0
    ab38:	4b09      	ldr	r3, [pc, #36]	; (ab60 <cdcdf_acm_ctrl+0x158>)
    ab3a:	7158      	strb	r0, [r3, #5]
    ab3c:	e771      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    ab3e:	f06f 0009 	mvn.w	r0, #9
    ab42:	e76e      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    ab44:	f06f 0011 	mvn.w	r0, #17
    ab48:	e76b      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    ab4a:	f06f 001b 	mvn.w	r0, #27
    ab4e:	e768      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    ab50:	f06f 0013 	mvn.w	r0, #19
    ab54:	e765      	b.n	aa22 <cdcdf_acm_ctrl+0x1a>
    ab56:	bf00      	nop
    ab58:	00005ce5 	.word	0x00005ce5
    ab5c:	0000ba79 	.word	0x0000ba79
    ab60:	20000dc4 	.word	0x20000dc4
    ab64:	00005d4d 	.word	0x00005d4d
    ab68:	00005d79 	.word	0x00005d79
    ab6c:	0000bab3 	.word	0x0000bab3

0000ab70 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ab70:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    ab72:	4b0a      	ldr	r3, [pc, #40]	; (ab9c <cdcdf_acm_init+0x2c>)
    ab74:	4798      	blx	r3
    ab76:	2801      	cmp	r0, #1
    ab78:	d80c      	bhi.n	ab94 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    ab7a:	4809      	ldr	r0, [pc, #36]	; (aba0 <cdcdf_acm_init+0x30>)
    ab7c:	4b09      	ldr	r3, [pc, #36]	; (aba4 <cdcdf_acm_init+0x34>)
    ab7e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    ab80:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    ab82:	3018      	adds	r0, #24
    ab84:	4b08      	ldr	r3, [pc, #32]	; (aba8 <cdcdf_acm_init+0x38>)
    ab86:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ab88:	4908      	ldr	r1, [pc, #32]	; (abac <cdcdf_acm_init+0x3c>)
    ab8a:	2001      	movs	r0, #1
    ab8c:	4b08      	ldr	r3, [pc, #32]	; (abb0 <cdcdf_acm_init+0x40>)
    ab8e:	4798      	blx	r3
	return ERR_NONE;
    ab90:	2000      	movs	r0, #0
    ab92:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ab94:	f06f 0010 	mvn.w	r0, #16
}
    ab98:	bd08      	pop	{r3, pc}
    ab9a:	bf00      	nop
    ab9c:	0000ba65 	.word	0x0000ba65
    aba0:	20000dc4 	.word	0x20000dc4
    aba4:	0000aa09 	.word	0x0000aa09
    aba8:	0000ba05 	.word	0x0000ba05
    abac:	20000398 	.word	0x20000398
    abb0:	0000b971 	.word	0x0000b971

0000abb4 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    abb4:	4b07      	ldr	r3, [pc, #28]	; (abd4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    abb6:	795b      	ldrb	r3, [r3, #5]
    abb8:	b143      	cbz	r3, abcc <cdcdf_acm_write+0x18>
{
    abba:	b510      	push	{r4, lr}
    abbc:	460a      	mov	r2, r1
    abbe:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    abc0:	2301      	movs	r3, #1
    abc2:	4804      	ldr	r0, [pc, #16]	; (abd4 <cdcdf_acm_write+0x20>)
    abc4:	78c0      	ldrb	r0, [r0, #3]
    abc6:	4c04      	ldr	r4, [pc, #16]	; (abd8 <cdcdf_acm_write+0x24>)
    abc8:	47a0      	blx	r4
    abca:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    abcc:	f06f 0010 	mvn.w	r0, #16
    abd0:	4770      	bx	lr
    abd2:	bf00      	nop
    abd4:	20000dc4 	.word	0x20000dc4
    abd8:	0000b535 	.word	0x0000b535

0000abdc <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    abdc:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    abde:	780b      	ldrb	r3, [r1, #0]
    abe0:	2b81      	cmp	r3, #129	; 0x81
    abe2:	d010      	beq.n	ac06 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    abe4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    abe8:	2b01      	cmp	r3, #1
    abea:	d13f      	bne.n	ac6c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    abec:	888a      	ldrh	r2, [r1, #4]
    abee:	4b22      	ldr	r3, [pc, #136]	; (ac78 <hid_keyboard_req+0x9c>)
    abf0:	7b1b      	ldrb	r3, [r3, #12]
    abf2:	429a      	cmp	r2, r3
    abf4:	d13d      	bne.n	ac72 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    abf6:	784b      	ldrb	r3, [r1, #1]
    abf8:	2b03      	cmp	r3, #3
    abfa:	d028      	beq.n	ac4e <hid_keyboard_req+0x72>
    abfc:	2b0b      	cmp	r3, #11
    abfe:	d02c      	beq.n	ac5a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    ac00:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ac04:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    ac06:	784b      	ldrb	r3, [r1, #1]
    ac08:	2b06      	cmp	r3, #6
    ac0a:	d002      	beq.n	ac12 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    ac0c:	f06f 0009 	mvn.w	r0, #9
    ac10:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    ac12:	888a      	ldrh	r2, [r1, #4]
    ac14:	4b18      	ldr	r3, [pc, #96]	; (ac78 <hid_keyboard_req+0x9c>)
    ac16:	7b1b      	ldrb	r3, [r3, #12]
    ac18:	429a      	cmp	r2, r3
    ac1a:	d002      	beq.n	ac22 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    ac1c:	f06f 0009 	mvn.w	r0, #9
    ac20:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    ac22:	884b      	ldrh	r3, [r1, #2]
    ac24:	0a1b      	lsrs	r3, r3, #8
    ac26:	2b21      	cmp	r3, #33	; 0x21
    ac28:	d004      	beq.n	ac34 <hid_keyboard_req+0x58>
    ac2a:	2b22      	cmp	r3, #34	; 0x22
    ac2c:	d009      	beq.n	ac42 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    ac2e:	f06f 000c 	mvn.w	r0, #12
    ac32:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    ac34:	4b10      	ldr	r3, [pc, #64]	; (ac78 <hid_keyboard_req+0x9c>)
    ac36:	6819      	ldr	r1, [r3, #0]
    ac38:	2300      	movs	r3, #0
    ac3a:	780a      	ldrb	r2, [r1, #0]
    ac3c:	4c0f      	ldr	r4, [pc, #60]	; (ac7c <hid_keyboard_req+0xa0>)
    ac3e:	47a0      	blx	r4
    ac40:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    ac42:	2300      	movs	r3, #0
    ac44:	223b      	movs	r2, #59	; 0x3b
    ac46:	490e      	ldr	r1, [pc, #56]	; (ac80 <hid_keyboard_req+0xa4>)
    ac48:	4c0c      	ldr	r4, [pc, #48]	; (ac7c <hid_keyboard_req+0xa0>)
    ac4a:	47a0      	blx	r4
    ac4c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    ac4e:	2300      	movs	r3, #0
    ac50:	2201      	movs	r2, #1
    ac52:	490c      	ldr	r1, [pc, #48]	; (ac84 <hid_keyboard_req+0xa8>)
    ac54:	4c09      	ldr	r4, [pc, #36]	; (ac7c <hid_keyboard_req+0xa0>)
    ac56:	47a0      	blx	r4
    ac58:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    ac5a:	884a      	ldrh	r2, [r1, #2]
    ac5c:	4b06      	ldr	r3, [pc, #24]	; (ac78 <hid_keyboard_req+0x9c>)
    ac5e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    ac60:	2300      	movs	r3, #0
    ac62:	461a      	mov	r2, r3
    ac64:	4619      	mov	r1, r3
    ac66:	4c05      	ldr	r4, [pc, #20]	; (ac7c <hid_keyboard_req+0xa0>)
    ac68:	47a0      	blx	r4
    ac6a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ac6c:	f06f 0009 	mvn.w	r0, #9
    ac70:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ac72:	f06f 0009 	mvn.w	r0, #9
    ac76:	bd10      	pop	{r4, pc}
    ac78:	20000de8 	.word	0x20000de8
    ac7c:	0000b535 	.word	0x0000b535
    ac80:	0000e574 	.word	0x0000e574
    ac84:	20000df7 	.word	0x20000df7

0000ac88 <hid_keyboard_ctrl>:
{
    ac88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac8c:	4614      	mov	r4, r2
	switch (ctrl) {
    ac8e:	2901      	cmp	r1, #1
    ac90:	d050      	beq.n	ad34 <hid_keyboard_ctrl+0xac>
    ac92:	b141      	cbz	r1, aca6 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    ac94:	2902      	cmp	r1, #2
    ac96:	bf0c      	ite	eq
    ac98:	f06f 051a 	mvneq.w	r5, #26
    ac9c:	f06f 050c 	mvnne.w	r5, #12
}
    aca0:	4628      	mov	r0, r5
    aca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    aca6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    acaa:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    acac:	2b00      	cmp	r3, #0
    acae:	d05e      	beq.n	ad6e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    acb0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    acb2:	795b      	ldrb	r3, [r3, #5]
    acb4:	2b03      	cmp	r3, #3
    acb6:	d15d      	bne.n	ad74 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    acb8:	f898 300c 	ldrb.w	r3, [r8, #12]
    acbc:	429a      	cmp	r2, r3
    acbe:	d05c      	beq.n	ad7a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    acc0:	2bff      	cmp	r3, #255	; 0xff
    acc2:	d15d      	bne.n	ad80 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    acc4:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    acc8:	6823      	ldr	r3, [r4, #0]
    acca:	7818      	ldrb	r0, [r3, #0]
    accc:	2221      	movs	r2, #33	; 0x21
    acce:	6861      	ldr	r1, [r4, #4]
    acd0:	4418      	add	r0, r3
    acd2:	4b31      	ldr	r3, [pc, #196]	; (ad98 <hid_keyboard_ctrl+0x110>)
    acd4:	4798      	blx	r3
    acd6:	4b31      	ldr	r3, [pc, #196]	; (ad9c <hid_keyboard_ctrl+0x114>)
    acd8:	6018      	str	r0, [r3, #0]
    acda:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    acdc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; ada4 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ace0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; ada8 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    ace4:	f8df b0c4 	ldr.w	fp, [pc, #196]	; adac <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ace8:	6823      	ldr	r3, [r4, #0]
    acea:	7818      	ldrb	r0, [r3, #0]
    acec:	6861      	ldr	r1, [r4, #4]
    acee:	4418      	add	r0, r3
    acf0:	47c8      	blx	r9
		desc->sod = ep;
    acf2:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    acf4:	2800      	cmp	r0, #0
    acf6:	d046      	beq.n	ad86 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    acf8:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    acfa:	7943      	ldrb	r3, [r0, #5]
    acfc:	7902      	ldrb	r2, [r0, #4]
    acfe:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ad02:	b292      	uxth	r2, r2
    ad04:	78c1      	ldrb	r1, [r0, #3]
    ad06:	4638      	mov	r0, r7
    ad08:	47d0      	blx	sl
    ad0a:	4605      	mov	r5, r0
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d13d      	bne.n	ad8c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ad10:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    ad14:	bf14      	ite	ne
    ad16:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ad1a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    ad1e:	4638      	mov	r0, r7
    ad20:	47d8      	blx	fp
    ad22:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    ad24:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    ad28:	d1de      	bne.n	ace8 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    ad2a:	4b1c      	ldr	r3, [pc, #112]	; (ad9c <hid_keyboard_ctrl+0x114>)
    ad2c:	2201      	movs	r2, #1
    ad2e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    ad30:	741a      	strb	r2, [r3, #16]
    ad32:	e7b5      	b.n	aca0 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    ad34:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    ad36:	b11a      	cbz	r2, ad40 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ad38:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    ad3a:	795b      	ldrb	r3, [r3, #5]
    ad3c:	2b03      	cmp	r3, #3
    ad3e:	d128      	bne.n	ad92 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    ad40:	7b2b      	ldrb	r3, [r5, #12]
    ad42:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    ad44:	bf1c      	itt	ne
    ad46:	23ff      	movne	r3, #255	; 0xff
    ad48:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    ad4a:	7b68      	ldrb	r0, [r5, #13]
    ad4c:	28ff      	cmp	r0, #255	; 0xff
    ad4e:	d003      	beq.n	ad58 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    ad50:	4b13      	ldr	r3, [pc, #76]	; (ada0 <hid_keyboard_ctrl+0x118>)
    ad52:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ad54:	23ff      	movs	r3, #255	; 0xff
    ad56:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    ad58:	7ba8      	ldrb	r0, [r5, #14]
    ad5a:	28ff      	cmp	r0, #255	; 0xff
    ad5c:	d003      	beq.n	ad66 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    ad5e:	4b10      	ldr	r3, [pc, #64]	; (ada0 <hid_keyboard_ctrl+0x118>)
    ad60:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ad62:	23ff      	movs	r3, #255	; 0xff
    ad64:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    ad66:	2500      	movs	r5, #0
    ad68:	4b0c      	ldr	r3, [pc, #48]	; (ad9c <hid_keyboard_ctrl+0x114>)
    ad6a:	741d      	strb	r5, [r3, #16]
    ad6c:	e798      	b.n	aca0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ad6e:	f06f 0509 	mvn.w	r5, #9
    ad72:	e795      	b.n	aca0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ad74:	f06f 0509 	mvn.w	r5, #9
    ad78:	e792      	b.n	aca0 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    ad7a:	f06f 0511 	mvn.w	r5, #17
    ad7e:	e78f      	b.n	aca0 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    ad80:	f06f 051b 	mvn.w	r5, #27
    ad84:	e78c      	b.n	aca0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    ad86:	f06f 0509 	mvn.w	r5, #9
    ad8a:	e789      	b.n	aca0 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    ad8c:	f06f 0513 	mvn.w	r5, #19
    ad90:	e786      	b.n	aca0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    ad92:	f06f 0509 	mvn.w	r5, #9
    ad96:	e783      	b.n	aca0 <hid_keyboard_ctrl+0x18>
    ad98:	0000ba79 	.word	0x0000ba79
    ad9c:	20000de8 	.word	0x20000de8
    ada0:	00005d4d 	.word	0x00005d4d
    ada4:	0000bab3 	.word	0x0000bab3
    ada8:	00005ce5 	.word	0x00005ce5
    adac:	00005d79 	.word	0x00005d79

0000adb0 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    adb0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    adb2:	4b0a      	ldr	r3, [pc, #40]	; (addc <hiddf_keyboard_init+0x2c>)
    adb4:	4798      	blx	r3
    adb6:	2801      	cmp	r0, #1
    adb8:	d80c      	bhi.n	add4 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    adba:	4809      	ldr	r0, [pc, #36]	; (ade0 <hiddf_keyboard_init+0x30>)
    adbc:	4b09      	ldr	r3, [pc, #36]	; (ade4 <hiddf_keyboard_init+0x34>)
    adbe:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    adc0:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    adc2:	3014      	adds	r0, #20
    adc4:	4b08      	ldr	r3, [pc, #32]	; (ade8 <hiddf_keyboard_init+0x38>)
    adc6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    adc8:	4908      	ldr	r1, [pc, #32]	; (adec <hiddf_keyboard_init+0x3c>)
    adca:	2001      	movs	r0, #1
    adcc:	4b08      	ldr	r3, [pc, #32]	; (adf0 <hiddf_keyboard_init+0x40>)
    adce:	4798      	blx	r3
	return ERR_NONE;
    add0:	2000      	movs	r0, #0
    add2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    add4:	f06f 0010 	mvn.w	r0, #16
}
    add8:	bd08      	pop	{r3, pc}
    adda:	bf00      	nop
    addc:	0000ba65 	.word	0x0000ba65
    ade0:	20000de8 	.word	0x20000de8
    ade4:	0000ac89 	.word	0x0000ac89
    ade8:	0000ba05 	.word	0x0000ba05
    adec:	200003a0 	.word	0x200003a0
    adf0:	0000b971 	.word	0x0000b971

0000adf4 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    adf4:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    adf6:	4b26      	ldr	r3, [pc, #152]	; (ae90 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    adf8:	7c1b      	ldrb	r3, [r3, #16]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d045      	beq.n	ae8a <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    adfe:	4a24      	ldr	r2, [pc, #144]	; (ae90 <hiddf_keyboard_keys_state_change+0x9c>)
    ae00:	2300      	movs	r3, #0
    ae02:	6053      	str	r3, [r2, #4]
    ae04:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    ae06:	b329      	cbz	r1, ae54 <hiddf_keyboard_keys_state_change+0x60>
    ae08:	4603      	mov	r3, r0
    ae0a:	1e4d      	subs	r5, r1, #1
    ae0c:	b2ed      	uxtb	r5, r5
    ae0e:	3501      	adds	r5, #1
    ae10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ae14:	4405      	add	r5, r0
    ae16:	2200      	movs	r2, #0
    ae18:	e002      	b.n	ae20 <hiddf_keyboard_keys_state_change+0x2c>
    ae1a:	3303      	adds	r3, #3
    ae1c:	42ab      	cmp	r3, r5
    ae1e:	d005      	beq.n	ae2c <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    ae20:	785c      	ldrb	r4, [r3, #1]
    ae22:	2c00      	cmp	r4, #0
    ae24:	d0f9      	beq.n	ae1a <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    ae26:	3201      	adds	r2, #1
    ae28:	b2d2      	uxtb	r2, r2
    ae2a:	e7f6      	b.n	ae1a <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    ae2c:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    ae2e:	b2d2      	uxtb	r2, r2
    ae30:	2a06      	cmp	r2, #6
    ae32:	d809      	bhi.n	ae48 <hiddf_keyboard_keys_state_change+0x54>
    ae34:	4603      	mov	r3, r0
    ae36:	1e4a      	subs	r2, r1, #1
    ae38:	b2d2      	uxtb	r2, r2
    ae3a:	3201      	adds	r2, #1
    ae3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ae40:	4410      	add	r0, r2
    ae42:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ae44:	4d12      	ldr	r5, [pc, #72]	; (ae90 <hiddf_keyboard_keys_state_change+0x9c>)
    ae46:	e015      	b.n	ae74 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    ae48:	4b11      	ldr	r3, [pc, #68]	; (ae90 <hiddf_keyboard_keys_state_change+0x9c>)
    ae4a:	f04f 32ff 	mov.w	r2, #4294967295
    ae4e:	f8c3 2006 	str.w	r2, [r3, #6]
    ae52:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    ae54:	480e      	ldr	r0, [pc, #56]	; (ae90 <hiddf_keyboard_keys_state_change+0x9c>)
    ae56:	2300      	movs	r3, #0
    ae58:	2208      	movs	r2, #8
    ae5a:	1d01      	adds	r1, r0, #4
    ae5c:	7b40      	ldrb	r0, [r0, #13]
    ae5e:	4c0d      	ldr	r4, [pc, #52]	; (ae94 <hiddf_keyboard_keys_state_change+0xa0>)
    ae60:	47a0      	blx	r4
    ae62:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ae64:	1c62      	adds	r2, r4, #1
    ae66:	7819      	ldrb	r1, [r3, #0]
    ae68:	442c      	add	r4, r5
    ae6a:	7121      	strb	r1, [r4, #4]
    ae6c:	b2d4      	uxtb	r4, r2
    ae6e:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    ae70:	4283      	cmp	r3, r0
    ae72:	d0ef      	beq.n	ae54 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    ae74:	789a      	ldrb	r2, [r3, #2]
    ae76:	2a01      	cmp	r2, #1
    ae78:	d1f9      	bne.n	ae6e <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    ae7a:	785a      	ldrb	r2, [r3, #1]
    ae7c:	2a00      	cmp	r2, #0
    ae7e:	d0f1      	beq.n	ae64 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    ae80:	792a      	ldrb	r2, [r5, #4]
    ae82:	7819      	ldrb	r1, [r3, #0]
    ae84:	430a      	orrs	r2, r1
    ae86:	712a      	strb	r2, [r5, #4]
    ae88:	e7f1      	b.n	ae6e <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    ae8a:	f06f 0010 	mvn.w	r0, #16
}
    ae8e:	bd38      	pop	{r3, r4, r5, pc}
    ae90:	20000de8 	.word	0x20000de8
    ae94:	0000b535 	.word	0x0000b535

0000ae98 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ae98:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ae9a:	780b      	ldrb	r3, [r1, #0]
    ae9c:	2b81      	cmp	r3, #129	; 0x81
    ae9e:	d010      	beq.n	aec2 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    aea0:	f3c3 1341 	ubfx	r3, r3, #5, #2
    aea4:	2b01      	cmp	r3, #1
    aea6:	d13f      	bne.n	af28 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    aea8:	888a      	ldrh	r2, [r1, #4]
    aeaa:	4b22      	ldr	r3, [pc, #136]	; (af34 <hid_mouse_req+0x9c>)
    aeac:	7a1b      	ldrb	r3, [r3, #8]
    aeae:	429a      	cmp	r2, r3
    aeb0:	d13d      	bne.n	af2e <hid_mouse_req+0x96>
			switch (req->bRequest) {
    aeb2:	784b      	ldrb	r3, [r1, #1]
    aeb4:	2b03      	cmp	r3, #3
    aeb6:	d028      	beq.n	af0a <hid_mouse_req+0x72>
    aeb8:	2b0b      	cmp	r3, #11
    aeba:	d02c      	beq.n	af16 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    aebc:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    aec0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    aec2:	784b      	ldrb	r3, [r1, #1]
    aec4:	2b06      	cmp	r3, #6
    aec6:	d002      	beq.n	aece <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    aec8:	f06f 0009 	mvn.w	r0, #9
    aecc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    aece:	888a      	ldrh	r2, [r1, #4]
    aed0:	4b18      	ldr	r3, [pc, #96]	; (af34 <hid_mouse_req+0x9c>)
    aed2:	7a1b      	ldrb	r3, [r3, #8]
    aed4:	429a      	cmp	r2, r3
    aed6:	d002      	beq.n	aede <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    aed8:	f06f 0009 	mvn.w	r0, #9
    aedc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    aede:	884b      	ldrh	r3, [r1, #2]
    aee0:	0a1b      	lsrs	r3, r3, #8
    aee2:	2b21      	cmp	r3, #33	; 0x21
    aee4:	d004      	beq.n	aef0 <hid_mouse_req+0x58>
    aee6:	2b22      	cmp	r3, #34	; 0x22
    aee8:	d009      	beq.n	aefe <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    aeea:	f06f 000c 	mvn.w	r0, #12
    aeee:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    aef0:	4b10      	ldr	r3, [pc, #64]	; (af34 <hid_mouse_req+0x9c>)
    aef2:	6819      	ldr	r1, [r3, #0]
    aef4:	2300      	movs	r3, #0
    aef6:	780a      	ldrb	r2, [r1, #0]
    aef8:	4c0f      	ldr	r4, [pc, #60]	; (af38 <hid_mouse_req+0xa0>)
    aefa:	47a0      	blx	r4
    aefc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    aefe:	2300      	movs	r3, #0
    af00:	2234      	movs	r2, #52	; 0x34
    af02:	490e      	ldr	r1, [pc, #56]	; (af3c <hid_mouse_req+0xa4>)
    af04:	4c0c      	ldr	r4, [pc, #48]	; (af38 <hid_mouse_req+0xa0>)
    af06:	47a0      	blx	r4
    af08:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    af0a:	2300      	movs	r3, #0
    af0c:	2201      	movs	r2, #1
    af0e:	490c      	ldr	r1, [pc, #48]	; (af40 <hid_mouse_req+0xa8>)
    af10:	4c09      	ldr	r4, [pc, #36]	; (af38 <hid_mouse_req+0xa0>)
    af12:	47a0      	blx	r4
    af14:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    af16:	884a      	ldrh	r2, [r1, #2]
    af18:	4b06      	ldr	r3, [pc, #24]	; (af34 <hid_mouse_req+0x9c>)
    af1a:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    af1c:	2300      	movs	r3, #0
    af1e:	461a      	mov	r2, r3
    af20:	4619      	mov	r1, r3
    af22:	4c05      	ldr	r4, [pc, #20]	; (af38 <hid_mouse_req+0xa0>)
    af24:	47a0      	blx	r4
    af26:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    af28:	f06f 0009 	mvn.w	r0, #9
    af2c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    af2e:	f06f 0009 	mvn.w	r0, #9
    af32:	bd10      	pop	{r4, pc}
    af34:	20000e08 	.word	0x20000e08
    af38:	0000b535 	.word	0x0000b535
    af3c:	0000e5b0 	.word	0x0000e5b0
    af40:	20000e12 	.word	0x20000e12

0000af44 <hid_mouse_ctrl>:
{
    af44:	b570      	push	{r4, r5, r6, lr}
    af46:	4614      	mov	r4, r2
	switch (ctrl) {
    af48:	2901      	cmp	r1, #1
    af4a:	d040      	beq.n	afce <hid_mouse_ctrl+0x8a>
    af4c:	b139      	cbz	r1, af5e <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    af4e:	2902      	cmp	r1, #2
    af50:	bf0c      	ite	eq
    af52:	f06f 041a 	mvneq.w	r4, #26
    af56:	f06f 040c 	mvnne.w	r4, #12
}
    af5a:	4620      	mov	r0, r4
    af5c:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    af5e:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    af60:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    af62:	2b00      	cmp	r3, #0
    af64:	d049      	beq.n	affa <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    af66:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    af68:	795b      	ldrb	r3, [r3, #5]
    af6a:	2b03      	cmp	r3, #3
    af6c:	d148      	bne.n	b000 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    af6e:	7a2b      	ldrb	r3, [r5, #8]
    af70:	429a      	cmp	r2, r3
    af72:	d048      	beq.n	b006 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    af74:	2bff      	cmp	r3, #255	; 0xff
    af76:	d149      	bne.n	b00c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    af78:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    af7a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    af7c:	7818      	ldrb	r0, [r3, #0]
    af7e:	2221      	movs	r2, #33	; 0x21
    af80:	6861      	ldr	r1, [r4, #4]
    af82:	4418      	add	r0, r3
    af84:	4b29      	ldr	r3, [pc, #164]	; (b02c <hid_mouse_ctrl+0xe8>)
    af86:	4798      	blx	r3
    af88:	4b29      	ldr	r3, [pc, #164]	; (b030 <hid_mouse_ctrl+0xec>)
    af8a:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    af8c:	6823      	ldr	r3, [r4, #0]
    af8e:	7818      	ldrb	r0, [r3, #0]
    af90:	6861      	ldr	r1, [r4, #4]
    af92:	4418      	add	r0, r3
    af94:	4b27      	ldr	r3, [pc, #156]	; (b034 <hid_mouse_ctrl+0xf0>)
    af96:	4798      	blx	r3
	desc->sod = ep;
    af98:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    af9a:	2800      	cmp	r0, #0
    af9c:	d039      	beq.n	b012 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    af9e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    afa0:	7943      	ldrb	r3, [r0, #5]
    afa2:	7902      	ldrb	r2, [r0, #4]
    afa4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    afa8:	b292      	uxth	r2, r2
    afaa:	78c1      	ldrb	r1, [r0, #3]
    afac:	4630      	mov	r0, r6
    afae:	4b22      	ldr	r3, [pc, #136]	; (b038 <hid_mouse_ctrl+0xf4>)
    afb0:	4798      	blx	r3
    afb2:	4604      	mov	r4, r0
    afb4:	bb80      	cbnz	r0, b018 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    afb6:	f016 0f80 	tst.w	r6, #128	; 0x80
    afba:	d030      	beq.n	b01e <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    afbc:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    afbe:	4630      	mov	r0, r6
    afc0:	4b1e      	ldr	r3, [pc, #120]	; (b03c <hid_mouse_ctrl+0xf8>)
    afc2:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    afc4:	4b1a      	ldr	r3, [pc, #104]	; (b030 <hid_mouse_ctrl+0xec>)
    afc6:	2201      	movs	r2, #1
    afc8:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    afca:	72da      	strb	r2, [r3, #11]
    afcc:	e7c5      	b.n	af5a <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    afce:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    afd0:	b11a      	cbz	r2, afda <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    afd2:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    afd4:	795b      	ldrb	r3, [r3, #5]
    afd6:	2b03      	cmp	r3, #3
    afd8:	d124      	bne.n	b024 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    afda:	7a2b      	ldrb	r3, [r5, #8]
    afdc:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    afde:	bf1c      	itt	ne
    afe0:	23ff      	movne	r3, #255	; 0xff
    afe2:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    afe4:	7a68      	ldrb	r0, [r5, #9]
    afe6:	28ff      	cmp	r0, #255	; 0xff
    afe8:	d003      	beq.n	aff2 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    afea:	4b15      	ldr	r3, [pc, #84]	; (b040 <hid_mouse_ctrl+0xfc>)
    afec:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    afee:	23ff      	movs	r3, #255	; 0xff
    aff0:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    aff2:	2400      	movs	r4, #0
    aff4:	4b0e      	ldr	r3, [pc, #56]	; (b030 <hid_mouse_ctrl+0xec>)
    aff6:	72dc      	strb	r4, [r3, #11]
    aff8:	e7af      	b.n	af5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    affa:	f06f 0409 	mvn.w	r4, #9
    affe:	e7ac      	b.n	af5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    b000:	f06f 0409 	mvn.w	r4, #9
    b004:	e7a9      	b.n	af5a <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    b006:	f06f 0411 	mvn.w	r4, #17
    b00a:	e7a6      	b.n	af5a <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    b00c:	f06f 041b 	mvn.w	r4, #27
    b010:	e7a3      	b.n	af5a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    b012:	f06f 0409 	mvn.w	r4, #9
    b016:	e7a0      	b.n	af5a <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    b018:	f06f 0413 	mvn.w	r4, #19
    b01c:	e79d      	b.n	af5a <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    b01e:	f04f 34ff 	mov.w	r4, #4294967295
    b022:	e79a      	b.n	af5a <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    b024:	f06f 0409 	mvn.w	r4, #9
    b028:	e797      	b.n	af5a <hid_mouse_ctrl+0x16>
    b02a:	bf00      	nop
    b02c:	0000ba79 	.word	0x0000ba79
    b030:	20000e08 	.word	0x20000e08
    b034:	0000bab3 	.word	0x0000bab3
    b038:	00005ce5 	.word	0x00005ce5
    b03c:	00005d79 	.word	0x00005d79
    b040:	00005d4d 	.word	0x00005d4d

0000b044 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    b044:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b046:	4b0a      	ldr	r3, [pc, #40]	; (b070 <hiddf_mouse_init+0x2c>)
    b048:	4798      	blx	r3
    b04a:	2801      	cmp	r0, #1
    b04c:	d80c      	bhi.n	b068 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    b04e:	4809      	ldr	r0, [pc, #36]	; (b074 <hiddf_mouse_init+0x30>)
    b050:	4b09      	ldr	r3, [pc, #36]	; (b078 <hiddf_mouse_init+0x34>)
    b052:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    b054:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    b056:	300c      	adds	r0, #12
    b058:	4b08      	ldr	r3, [pc, #32]	; (b07c <hiddf_mouse_init+0x38>)
    b05a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    b05c:	4908      	ldr	r1, [pc, #32]	; (b080 <hiddf_mouse_init+0x3c>)
    b05e:	2001      	movs	r0, #1
    b060:	4b08      	ldr	r3, [pc, #32]	; (b084 <hiddf_mouse_init+0x40>)
    b062:	4798      	blx	r3
	return ERR_NONE;
    b064:	2000      	movs	r0, #0
    b066:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b068:	f06f 0010 	mvn.w	r0, #16
}
    b06c:	bd08      	pop	{r3, pc}
    b06e:	bf00      	nop
    b070:	0000ba65 	.word	0x0000ba65
    b074:	20000e08 	.word	0x20000e08
    b078:	0000af45 	.word	0x0000af45
    b07c:	0000ba05 	.word	0x0000ba05
    b080:	200003a8 	.word	0x200003a8
    b084:	0000b971 	.word	0x0000b971

0000b088 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    b088:	2200      	movs	r2, #0
    b08a:	4b0d      	ldr	r3, [pc, #52]	; (b0c0 <hiddf_mouse_move+0x38>)
    b08c:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    b08e:	2901      	cmp	r1, #1
    b090:	d00e      	beq.n	b0b0 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    b092:	2902      	cmp	r1, #2
    b094:	d00e      	beq.n	b0b4 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    b096:	2903      	cmp	r1, #3
    b098:	d10f      	bne.n	b0ba <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    b09a:	4b09      	ldr	r3, [pc, #36]	; (b0c0 <hiddf_mouse_move+0x38>)
    b09c:	71d8      	strb	r0, [r3, #7]
{
    b09e:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    b0a0:	4807      	ldr	r0, [pc, #28]	; (b0c0 <hiddf_mouse_move+0x38>)
    b0a2:	2300      	movs	r3, #0
    b0a4:	2204      	movs	r2, #4
    b0a6:	1881      	adds	r1, r0, r2
    b0a8:	7a40      	ldrb	r0, [r0, #9]
    b0aa:	4c06      	ldr	r4, [pc, #24]	; (b0c4 <hiddf_mouse_move+0x3c>)
    b0ac:	47a0      	blx	r4
    b0ae:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    b0b0:	7158      	strb	r0, [r3, #5]
    b0b2:	e7f4      	b.n	b09e <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    b0b4:	4b02      	ldr	r3, [pc, #8]	; (b0c0 <hiddf_mouse_move+0x38>)
    b0b6:	7198      	strb	r0, [r3, #6]
    b0b8:	e7f1      	b.n	b09e <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    b0ba:	f06f 000c 	mvn.w	r0, #12
    b0be:	4770      	bx	lr
    b0c0:	20000e08 	.word	0x20000e08
    b0c4:	0000b535 	.word	0x0000b535

0000b0c8 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    b0c8:	4770      	bx	lr

0000b0ca <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    b0ca:	e7fe      	b.n	b0ca <midi_cb_ep_bulk_out>

0000b0cc <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b0cc:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    b0ce:	780b      	ldrb	r3, [r1, #0]
    b0d0:	2b81      	cmp	r3, #129	; 0x81
    b0d2:	d014      	beq.n	b0fe <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b0d4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b0d8:	2b01      	cmp	r3, #1
    b0da:	d132      	bne.n	b142 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    b0dc:	888b      	ldrh	r3, [r1, #4]
    b0de:	4a1c      	ldr	r2, [pc, #112]	; (b150 <audio_midi_req+0x84>)
    b0e0:	7912      	ldrb	r2, [r2, #4]
    b0e2:	429a      	cmp	r2, r3
    b0e4:	d003      	beq.n	b0ee <audio_midi_req+0x22>
    b0e6:	4a1a      	ldr	r2, [pc, #104]	; (b150 <audio_midi_req+0x84>)
    b0e8:	7952      	ldrb	r2, [r2, #5]
    b0ea:	429a      	cmp	r2, r3
    b0ec:	d12c      	bne.n	b148 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    b0ee:	784b      	ldrb	r3, [r1, #1]
    b0f0:	2b03      	cmp	r3, #3
    b0f2:	d017      	beq.n	b124 <audio_midi_req+0x58>
    b0f4:	2b0b      	cmp	r3, #11
    b0f6:	d01b      	beq.n	b130 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    b0f8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    b0fc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    b0fe:	888b      	ldrh	r3, [r1, #4]
    b100:	4a13      	ldr	r2, [pc, #76]	; (b150 <audio_midi_req+0x84>)
    b102:	7912      	ldrb	r2, [r2, #4]
    b104:	429a      	cmp	r2, r3
    b106:	d006      	beq.n	b116 <audio_midi_req+0x4a>
    b108:	4a11      	ldr	r2, [pc, #68]	; (b150 <audio_midi_req+0x84>)
    b10a:	7952      	ldrb	r2, [r2, #5]
    b10c:	429a      	cmp	r2, r3
    b10e:	d002      	beq.n	b116 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b110:	f06f 0009 	mvn.w	r0, #9
    b114:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    b116:	4b0e      	ldr	r3, [pc, #56]	; (b150 <audio_midi_req+0x84>)
    b118:	6819      	ldr	r1, [r3, #0]
    b11a:	2300      	movs	r3, #0
    b11c:	780a      	ldrb	r2, [r1, #0]
    b11e:	4c0d      	ldr	r4, [pc, #52]	; (b154 <audio_midi_req+0x88>)
    b120:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    b122:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    b124:	2300      	movs	r3, #0
    b126:	2201      	movs	r2, #1
    b128:	490b      	ldr	r1, [pc, #44]	; (b158 <audio_midi_req+0x8c>)
    b12a:	4c0a      	ldr	r4, [pc, #40]	; (b154 <audio_midi_req+0x88>)
    b12c:	47a0      	blx	r4
    b12e:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    b130:	884a      	ldrh	r2, [r1, #2]
    b132:	4b07      	ldr	r3, [pc, #28]	; (b150 <audio_midi_req+0x84>)
    b134:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    b136:	2300      	movs	r3, #0
    b138:	461a      	mov	r2, r3
    b13a:	4619      	mov	r1, r3
    b13c:	4c05      	ldr	r4, [pc, #20]	; (b154 <audio_midi_req+0x88>)
    b13e:	47a0      	blx	r4
    b140:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b142:	f06f 0009 	mvn.w	r0, #9
    b146:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b148:	f06f 0009 	mvn.w	r0, #9
    b14c:	bd10      	pop	{r4, pc}
    b14e:	bf00      	nop
    b150:	20000e20 	.word	0x20000e20
    b154:	0000b535 	.word	0x0000b535
    b158:	20000e28 	.word	0x20000e28

0000b15c <audio_midi_ctrl>:
{
    b15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b160:	b083      	sub	sp, #12
    b162:	4615      	mov	r5, r2
	switch (ctrl) {
    b164:	2901      	cmp	r1, #1
    b166:	f000 8092 	beq.w	b28e <audio_midi_ctrl+0x132>
    b16a:	b141      	cbz	r1, b17e <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    b16c:	2902      	cmp	r1, #2
    b16e:	bf0c      	ite	eq
    b170:	f06f 001a 	mvneq.w	r0, #26
    b174:	f06f 000c 	mvnne.w	r0, #12
}
    b178:	b003      	add	sp, #12
    b17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b17e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    b182:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    b184:	2800      	cmp	r0, #0
    b186:	f000 80a9 	beq.w	b2dc <audio_midi_ctrl+0x180>
    b18a:	f109 0604 	add.w	r6, r9, #4
    b18e:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b190:	f04f 0804 	mov.w	r8, #4
    b194:	4f5d      	ldr	r7, [pc, #372]	; (b30c <audio_midi_ctrl+0x1b0>)
    b196:	e019      	b.n	b1cc <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b198:	f816 3b01 	ldrb.w	r3, [r6], #1
    b19c:	429a      	cmp	r2, r3
    b19e:	f000 80a3 	beq.w	b2e8 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b1a2:	2bff      	cmp	r3, #255	; 0xff
    b1a4:	f040 80a3 	bne.w	b2ee <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b1a8:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    b1ac:	2c01      	cmp	r4, #1
    b1ae:	d016      	beq.n	b1de <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b1b0:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b1b2:	7818      	ldrb	r0, [r3, #0]
    b1b4:	4642      	mov	r2, r8
    b1b6:	6869      	ldr	r1, [r5, #4]
    b1b8:	4418      	add	r0, r3
    b1ba:	47b8      	blx	r7
    b1bc:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    b1be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    b1c2:	f000 809e 	beq.w	b302 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    b1c6:	2800      	cmp	r0, #0
    b1c8:	f000 808b 	beq.w	b2e2 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    b1cc:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    b1ce:	7943      	ldrb	r3, [r0, #5]
    b1d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b1d4:	2b01      	cmp	r3, #1
    b1d6:	d0df      	beq.n	b198 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    b1d8:	f06f 0009 	mvn.w	r0, #9
    b1dc:	e7cc      	b.n	b178 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b1de:	2205      	movs	r2, #5
    b1e0:	6869      	ldr	r1, [r5, #4]
    b1e2:	4b4a      	ldr	r3, [pc, #296]	; (b30c <audio_midi_ctrl+0x1b0>)
    b1e4:	4798      	blx	r3
    b1e6:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b1e8:	4e49      	ldr	r6, [pc, #292]	; (b310 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b1ea:	f8df 8144 	ldr.w	r8, [pc, #324]	; b330 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    b1ee:	4f49      	ldr	r7, [pc, #292]	; (b314 <audio_midi_ctrl+0x1b8>)
    b1f0:	e01a      	b.n	b228 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    b1f2:	4a47      	ldr	r2, [pc, #284]	; (b310 <audio_midi_ctrl+0x1b4>)
    b1f4:	7953      	ldrb	r3, [r2, #5]
    b1f6:	425b      	negs	r3, r3
    b1f8:	b2db      	uxtb	r3, r3
    b1fa:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    b1fc:	f06f 0013 	mvn.w	r0, #19
    b200:	e7ba      	b.n	b178 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    b202:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b206:	b2c0      	uxtb	r0, r0
    b208:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    b20c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    b20e:	4a42      	ldr	r2, [pc, #264]	; (b318 <audio_midi_ctrl+0x1bc>)
    b210:	2102      	movs	r1, #2
    b212:	f899 0006 	ldrb.w	r0, [r9, #6]
    b216:	4b41      	ldr	r3, [pc, #260]	; (b31c <audio_midi_ctrl+0x1c0>)
    b218:	4798      	blx	r3
				desc->sod = ep;
    b21a:	602c      	str	r4, [r5, #0]
    b21c:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b21e:	6869      	ldr	r1, [r5, #4]
    b220:	4420      	add	r0, r4
    b222:	4b3f      	ldr	r3, [pc, #252]	; (b320 <audio_midi_ctrl+0x1c4>)
    b224:	4798      	blx	r3
    b226:	4604      	mov	r4, r0
			while (NULL != ep) {
    b228:	2c00      	cmp	r4, #0
    b22a:	d063      	beq.n	b2f4 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    b22c:	78a3      	ldrb	r3, [r4, #2]
    b22e:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    b232:	78e3      	ldrb	r3, [r4, #3]
    b234:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    b238:	7962      	ldrb	r2, [r4, #5]
    b23a:	7923      	ldrb	r3, [r4, #4]
    b23c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    b240:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b242:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b246:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b24a:	b2db      	uxtb	r3, r3
    b24c:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    b24e:	2301      	movs	r3, #1
    b250:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b252:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b256:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b25a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b25e:	b292      	uxth	r2, r2
    b260:	47c0      	blx	r8
    b262:	b2c0      	uxtb	r0, r0
    b264:	7170      	strb	r0, [r6, #5]
    b266:	2800      	cmp	r0, #0
    b268:	d1c3      	bne.n	b1f2 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b26a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b26e:	f013 0f80 	tst.w	r3, #128	; 0x80
    b272:	d1c6      	bne.n	b202 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    b274:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b278:	b2c0      	uxtb	r0, r0
    b27a:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    b27e:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    b280:	4a28      	ldr	r2, [pc, #160]	; (b324 <audio_midi_ctrl+0x1c8>)
    b282:	2102      	movs	r1, #2
    b284:	f899 0007 	ldrb.w	r0, [r9, #7]
    b288:	4b24      	ldr	r3, [pc, #144]	; (b31c <audio_midi_ctrl+0x1c0>)
    b28a:	4798      	blx	r3
    b28c:	e7c5      	b.n	b21a <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b28e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b290:	b142      	cbz	r2, b2a4 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b292:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    b294:	795b      	ldrb	r3, [r3, #5]
    b296:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b29a:	2b01      	cmp	r3, #1
    b29c:	d002      	beq.n	b2a4 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    b29e:	f06f 0009 	mvn.w	r0, #9
    b2a2:	e769      	b.n	b178 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    b2a4:	7923      	ldrb	r3, [r4, #4]
    b2a6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    b2a8:	bf1c      	itt	ne
    b2aa:	23ff      	movne	r3, #255	; 0xff
    b2ac:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    b2ae:	7963      	ldrb	r3, [r4, #5]
    b2b0:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    b2b2:	bf1c      	itt	ne
    b2b4:	23ff      	movne	r3, #255	; 0xff
    b2b6:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    b2b8:	79a0      	ldrb	r0, [r4, #6]
    b2ba:	28ff      	cmp	r0, #255	; 0xff
    b2bc:	d003      	beq.n	b2c6 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    b2be:	4b1a      	ldr	r3, [pc, #104]	; (b328 <audio_midi_ctrl+0x1cc>)
    b2c0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b2c2:	23ff      	movs	r3, #255	; 0xff
    b2c4:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    b2c6:	79e0      	ldrb	r0, [r4, #7]
    b2c8:	28ff      	cmp	r0, #255	; 0xff
    b2ca:	d003      	beq.n	b2d4 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    b2cc:	4b16      	ldr	r3, [pc, #88]	; (b328 <audio_midi_ctrl+0x1cc>)
    b2ce:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b2d0:	23ff      	movs	r3, #255	; 0xff
    b2d2:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    b2d4:	2000      	movs	r0, #0
    b2d6:	4b15      	ldr	r3, [pc, #84]	; (b32c <audio_midi_ctrl+0x1d0>)
    b2d8:	7358      	strb	r0, [r3, #13]
    b2da:	e74d      	b.n	b178 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    b2dc:	f06f 0009 	mvn.w	r0, #9
    b2e0:	e74a      	b.n	b178 <audio_midi_ctrl+0x1c>
    b2e2:	f06f 0009 	mvn.w	r0, #9
    b2e6:	e747      	b.n	b178 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    b2e8:	f06f 0011 	mvn.w	r0, #17
    b2ec:	e744      	b.n	b178 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    b2ee:	f06f 001b 	mvn.w	r0, #27
    b2f2:	e741      	b.n	b178 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b2f4:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b2f6:	7818      	ldrb	r0, [r3, #0]
    b2f8:	2204      	movs	r2, #4
    b2fa:	6869      	ldr	r1, [r5, #4]
    b2fc:	4418      	add	r0, r3
    b2fe:	4b03      	ldr	r3, [pc, #12]	; (b30c <audio_midi_ctrl+0x1b0>)
    b300:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    b302:	2201      	movs	r2, #1
    b304:	4b09      	ldr	r3, [pc, #36]	; (b32c <audio_midi_ctrl+0x1d0>)
    b306:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b308:	2000      	movs	r0, #0
    b30a:	e735      	b.n	b178 <audio_midi_ctrl+0x1c>
    b30c:	0000ba79 	.word	0x0000ba79
    b310:	20007d44 	.word	0x20007d44
    b314:	00005d79 	.word	0x00005d79
    b318:	0000b0c9 	.word	0x0000b0c9
    b31c:	00005f4d 	.word	0x00005f4d
    b320:	0000bab3 	.word	0x0000bab3
    b324:	0000b0cb 	.word	0x0000b0cb
    b328:	00005d4d 	.word	0x00005d4d
    b32c:	20000e20 	.word	0x20000e20
    b330:	00005ce5 	.word	0x00005ce5

0000b334 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    b334:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    b336:	4b0a      	ldr	r3, [pc, #40]	; (b360 <audiodf_midi_init+0x2c>)
    b338:	4798      	blx	r3
    b33a:	2801      	cmp	r0, #1
    b33c:	d80c      	bhi.n	b358 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    b33e:	4809      	ldr	r0, [pc, #36]	; (b364 <audiodf_midi_init+0x30>)
    b340:	4b09      	ldr	r3, [pc, #36]	; (b368 <audiodf_midi_init+0x34>)
    b342:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    b344:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    b346:	3010      	adds	r0, #16
    b348:	4b08      	ldr	r3, [pc, #32]	; (b36c <audiodf_midi_init+0x38>)
    b34a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    b34c:	4908      	ldr	r1, [pc, #32]	; (b370 <audiodf_midi_init+0x3c>)
    b34e:	2001      	movs	r0, #1
    b350:	4b08      	ldr	r3, [pc, #32]	; (b374 <audiodf_midi_init+0x40>)
    b352:	4798      	blx	r3
	return ERR_NONE;
    b354:	2000      	movs	r0, #0
    b356:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b358:	f06f 0010 	mvn.w	r0, #16
}
    b35c:	bd08      	pop	{r3, pc}
    b35e:	bf00      	nop
    b360:	0000ba65 	.word	0x0000ba65
    b364:	20000e20 	.word	0x20000e20
    b368:	0000b15d 	.word	0x0000b15d
    b36c:	0000ba05 	.word	0x0000ba05
    b370:	200003b0 	.word	0x200003b0
    b374:	0000b971 	.word	0x0000b971

0000b378 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    b378:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    b37a:	4c06      	ldr	r4, [pc, #24]	; (b394 <audiodf_midi_xfer_packet+0x1c>)
    b37c:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    b37e:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    b380:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    b382:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    b384:	2300      	movs	r3, #0
    b386:	2204      	movs	r2, #4
    b388:	f104 0109 	add.w	r1, r4, #9
    b38c:	79a0      	ldrb	r0, [r4, #6]
    b38e:	4c02      	ldr	r4, [pc, #8]	; (b398 <audiodf_midi_xfer_packet+0x20>)
    b390:	47a0      	blx	r4
	
	
}
    b392:	bd10      	pop	{r4, pc}
    b394:	20000e20 	.word	0x20000e20
    b398:	0000b535 	.word	0x0000b535

0000b39c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    b39c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b39e:	4b07      	ldr	r3, [pc, #28]	; (b3bc <usbdc_unconfig+0x20>)
    b3a0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    b3a2:	b14c      	cbz	r4, b3b8 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b3a4:	2600      	movs	r6, #0
    b3a6:	2501      	movs	r5, #1
    b3a8:	6863      	ldr	r3, [r4, #4]
    b3aa:	4632      	mov	r2, r6
    b3ac:	4629      	mov	r1, r5
    b3ae:	4620      	mov	r0, r4
    b3b0:	4798      	blx	r3
		func = func->next;
    b3b2:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b3b4:	2c00      	cmp	r4, #0
    b3b6:	d1f7      	bne.n	b3a8 <usbdc_unconfig+0xc>
    b3b8:	bd70      	pop	{r4, r5, r6, pc}
    b3ba:	bf00      	nop
    b3bc:	20000e3c 	.word	0x20000e3c

0000b3c0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    b3c0:	b570      	push	{r4, r5, r6, lr}
    b3c2:	4606      	mov	r6, r0
    b3c4:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b3c6:	4b07      	ldr	r3, [pc, #28]	; (b3e4 <usbdc_change_notify+0x24>)
    b3c8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    b3ca:	b91c      	cbnz	r4, b3d4 <usbdc_change_notify+0x14>
    b3cc:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    b3ce:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b3d0:	2c00      	cmp	r4, #0
    b3d2:	d0fb      	beq.n	b3cc <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    b3d4:	6863      	ldr	r3, [r4, #4]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d0f9      	beq.n	b3ce <usbdc_change_notify+0xe>
			cg->cb(change, value);
    b3da:	4629      	mov	r1, r5
    b3dc:	4630      	mov	r0, r6
    b3de:	4798      	blx	r3
    b3e0:	e7f5      	b.n	b3ce <usbdc_change_notify+0xe>
    b3e2:	bf00      	nop
    b3e4:	20000e3c 	.word	0x20000e3c

0000b3e8 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3ea:	4607      	mov	r7, r0
    b3ec:	460e      	mov	r6, r1
    b3ee:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b3f0:	4b0c      	ldr	r3, [pc, #48]	; (b424 <usbdc_request_handler+0x3c>)
    b3f2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    b3f4:	b91c      	cbnz	r4, b3fe <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    b3f6:	2000      	movs	r0, #0
    b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    b3fa:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b3fc:	b16c      	cbz	r4, b41a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    b3fe:	6863      	ldr	r3, [r4, #4]
    b400:	2b00      	cmp	r3, #0
    b402:	d0fa      	beq.n	b3fa <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    b404:	462a      	mov	r2, r5
    b406:	4631      	mov	r1, r6
    b408:	4638      	mov	r0, r7
    b40a:	4798      	blx	r3
			if (0 == rc) {
    b40c:	b138      	cbz	r0, b41e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    b40e:	f110 0f0a 	cmn.w	r0, #10
    b412:	d0f2      	beq.n	b3fa <usbdc_request_handler+0x12>
				return -1;
    b414:	f04f 30ff 	mov.w	r0, #4294967295
}
    b418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    b41a:	2000      	movs	r0, #0
    b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    b41e:	2001      	movs	r0, #1
    b420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b422:	bf00      	nop
    b424:	20000e3c 	.word	0x20000e3c

0000b428 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b428:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b42a:	4b06      	ldr	r3, [pc, #24]	; (b444 <usbd_sof_cb+0x1c>)
    b42c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    b42e:	b91c      	cbnz	r4, b438 <usbd_sof_cb+0x10>
    b430:	bd10      	pop	{r4, pc}
		sof = sof->next;
    b432:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    b434:	2c00      	cmp	r4, #0
    b436:	d0fb      	beq.n	b430 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    b438:	6863      	ldr	r3, [r4, #4]
    b43a:	2b00      	cmp	r3, #0
    b43c:	d0f9      	beq.n	b432 <usbd_sof_cb+0xa>
			sof->cb();
    b43e:	4798      	blx	r3
    b440:	e7f7      	b.n	b432 <usbd_sof_cb+0xa>
    b442:	bf00      	nop
    b444:	20000e3c 	.word	0x20000e3c

0000b448 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b448:	b510      	push	{r4, lr}
    b44a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    b44c:	b119      	cbz	r1, b456 <usbdc_cb_ctl_done+0xe>
    b44e:	2901      	cmp	r1, #1
    b450:	d026      	beq.n	b4a0 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    b452:	2000      	movs	r0, #0
    b454:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b456:	7813      	ldrb	r3, [r2, #0]
    b458:	2b00      	cmp	r3, #0
    b45a:	d1fa      	bne.n	b452 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    b45c:	7853      	ldrb	r3, [r2, #1]
    b45e:	2b05      	cmp	r3, #5
    b460:	d00f      	beq.n	b482 <usbdc_cb_ctl_done+0x3a>
    b462:	2b09      	cmp	r3, #9
    b464:	d1f5      	bne.n	b452 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    b466:	8852      	ldrh	r2, [r2, #2]
    b468:	4b10      	ldr	r3, [pc, #64]	; (b4ac <usbdc_cb_ctl_done+0x64>)
    b46a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b46c:	8863      	ldrh	r3, [r4, #2]
    b46e:	2b00      	cmp	r3, #0
    b470:	bf14      	ite	ne
    b472:	2104      	movne	r1, #4
    b474:	2103      	moveq	r1, #3
    b476:	4b0d      	ldr	r3, [pc, #52]	; (b4ac <usbdc_cb_ctl_done+0x64>)
    b478:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b47a:	2001      	movs	r0, #1
    b47c:	4b0c      	ldr	r3, [pc, #48]	; (b4b0 <usbdc_cb_ctl_done+0x68>)
    b47e:	4798      	blx	r3
    b480:	e7e7      	b.n	b452 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    b482:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    b484:	b2c0      	uxtb	r0, r0
    b486:	4b0b      	ldr	r3, [pc, #44]	; (b4b4 <usbdc_cb_ctl_done+0x6c>)
    b488:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b48a:	8863      	ldrh	r3, [r4, #2]
    b48c:	2b00      	cmp	r3, #0
    b48e:	bf14      	ite	ne
    b490:	2103      	movne	r1, #3
    b492:	2102      	moveq	r1, #2
    b494:	4b05      	ldr	r3, [pc, #20]	; (b4ac <usbdc_cb_ctl_done+0x64>)
    b496:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b498:	2001      	movs	r0, #1
    b49a:	4b05      	ldr	r3, [pc, #20]	; (b4b0 <usbdc_cb_ctl_done+0x68>)
    b49c:	4798      	blx	r3
    b49e:	e7d8      	b.n	b452 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    b4a0:	2201      	movs	r2, #1
    b4a2:	4621      	mov	r1, r4
    b4a4:	2000      	movs	r0, #0
    b4a6:	4b04      	ldr	r3, [pc, #16]	; (b4b8 <usbdc_cb_ctl_done+0x70>)
    b4a8:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    b4aa:	e7d2      	b.n	b452 <usbdc_cb_ctl_done+0xa>
    b4ac:	20000e3c 	.word	0x20000e3c
    b4b0:	0000b3c1 	.word	0x0000b3c1
    b4b4:	00005cd9 	.word	0x00005cd9
    b4b8:	0000b3e9 	.word	0x0000b3e9

0000b4bc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    b4bc:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    b4be:	4b0d      	ldr	r3, [pc, #52]	; (b4f4 <usbdc_reset+0x38>)
    b4c0:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    b4c2:	4d0d      	ldr	r5, [pc, #52]	; (b4f8 <usbdc_reset+0x3c>)
    b4c4:	2602      	movs	r6, #2
    b4c6:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    b4c8:	2400      	movs	r4, #0
    b4ca:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    b4cc:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    b4ce:	4620      	mov	r0, r4
    b4d0:	4b0a      	ldr	r3, [pc, #40]	; (b4fc <usbdc_reset+0x40>)
    b4d2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    b4d4:	7f28      	ldrb	r0, [r5, #28]
    b4d6:	4b0a      	ldr	r3, [pc, #40]	; (b500 <usbdc_reset+0x44>)
    b4d8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b4da:	4a0a      	ldr	r2, [pc, #40]	; (b504 <usbdc_reset+0x48>)
    b4dc:	4621      	mov	r1, r4
    b4de:	4620      	mov	r0, r4
    b4e0:	4d09      	ldr	r5, [pc, #36]	; (b508 <usbdc_reset+0x4c>)
    b4e2:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b4e4:	4a09      	ldr	r2, [pc, #36]	; (b50c <usbdc_reset+0x50>)
    b4e6:	4631      	mov	r1, r6
    b4e8:	4620      	mov	r0, r4
    b4ea:	47a8      	blx	r5
	usb_d_ep_enable(0);
    b4ec:	4620      	mov	r0, r4
    b4ee:	4b08      	ldr	r3, [pc, #32]	; (b510 <usbdc_reset+0x54>)
    b4f0:	4798      	blx	r3
    b4f2:	bd70      	pop	{r4, r5, r6, pc}
    b4f4:	0000b39d 	.word	0x0000b39d
    b4f8:	20000e3c 	.word	0x20000e3c
    b4fc:	00005d4d 	.word	0x00005d4d
    b500:	00005d39 	.word	0x00005d39
    b504:	0000b555 	.word	0x0000b555
    b508:	00005f4d 	.word	0x00005f4d
    b50c:	0000b449 	.word	0x0000b449
    b510:	00005d79 	.word	0x00005d79

0000b514 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    b514:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    b516:	b110      	cbz	r0, b51e <usbd_event_cb+0xa>
    b518:	2801      	cmp	r0, #1
    b51a:	d004      	beq.n	b526 <usbd_event_cb+0x12>
    b51c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    b51e:	2000      	movs	r0, #0
    b520:	4b02      	ldr	r3, [pc, #8]	; (b52c <usbd_event_cb+0x18>)
    b522:	4798      	blx	r3
		break;
    b524:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    b526:	4b02      	ldr	r3, [pc, #8]	; (b530 <usbd_event_cb+0x1c>)
    b528:	4798      	blx	r3
    b52a:	bd08      	pop	{r3, pc}
    b52c:	0000b3c1 	.word	0x0000b3c1
    b530:	0000b4bd 	.word	0x0000b4bd

0000b534 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    b534:	b500      	push	{lr}
    b536:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b538:	9101      	str	r1, [sp, #4]
    b53a:	9202      	str	r2, [sp, #8]
    b53c:	f88d 000c 	strb.w	r0, [sp, #12]
    b540:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    b544:	a801      	add	r0, sp, #4
    b546:	4b02      	ldr	r3, [pc, #8]	; (b550 <usbdc_xfer+0x1c>)
    b548:	4798      	blx	r3
}
    b54a:	b005      	add	sp, #20
    b54c:	f85d fb04 	ldr.w	pc, [sp], #4
    b550:	00005dc5 	.word	0x00005dc5

0000b554 <usbdc_cb_ctl_req>:
{
    b554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b558:	b083      	sub	sp, #12
    b55a:	4605      	mov	r5, r0
    b55c:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    b55e:	2200      	movs	r2, #0
    b560:	4b9b      	ldr	r3, [pc, #620]	; (b7d0 <usbdc_cb_ctl_req+0x27c>)
    b562:	4798      	blx	r3
    b564:	f1b0 3fff 	cmp.w	r0, #4294967295
    b568:	d00b      	beq.n	b582 <usbdc_cb_ctl_req+0x2e>
    b56a:	2801      	cmp	r0, #1
    b56c:	f000 81e3 	beq.w	b936 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b570:	7823      	ldrb	r3, [r4, #0]
    b572:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    b576:	d008      	beq.n	b58a <usbdc_cb_ctl_req+0x36>
    b578:	2a80      	cmp	r2, #128	; 0x80
    b57a:	f000 80f4 	beq.w	b766 <usbdc_cb_ctl_req+0x212>
		return false;
    b57e:	2000      	movs	r0, #0
    b580:	e000      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b582:	2000      	movs	r0, #0
}
    b584:	b003      	add	sp, #12
    b586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    b58a:	7862      	ldrb	r2, [r4, #1]
    b58c:	3a01      	subs	r2, #1
    b58e:	2a0a      	cmp	r2, #10
    b590:	f200 81d3 	bhi.w	b93a <usbdc_cb_ctl_req+0x3e6>
    b594:	e8df f012 	tbh	[pc, r2, lsl #1]
    b598:	01d10060 	.word	0x01d10060
    b59c:	01d10076 	.word	0x01d10076
    b5a0:	01d1000b 	.word	0x01d1000b
    b5a4:	01d101d1 	.word	0x01d101d1
    b5a8:	01d10015 	.word	0x01d10015
    b5ac:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b5ae:	2301      	movs	r3, #1
    b5b0:	2200      	movs	r2, #0
    b5b2:	4611      	mov	r1, r2
    b5b4:	4628      	mov	r0, r5
    b5b6:	4c87      	ldr	r4, [pc, #540]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b5b8:	47a0      	blx	r4
    b5ba:	fab0 f080 	clz	r0, r0
    b5be:	0940      	lsrs	r0, r0, #5
    b5c0:	e7e0      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    b5c2:	8862      	ldrh	r2, [r4, #2]
    b5c4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b5c6:	b1ca      	cbz	r2, b5fc <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b5c8:	4b83      	ldr	r3, [pc, #524]	; (b7d8 <usbdc_cb_ctl_req+0x284>)
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	6859      	ldr	r1, [r3, #4]
    b5ce:	6818      	ldr	r0, [r3, #0]
    b5d0:	4b82      	ldr	r3, [pc, #520]	; (b7dc <usbdc_cb_ctl_req+0x288>)
    b5d2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b5d4:	2800      	cmp	r0, #0
    b5d6:	f000 81be 	beq.w	b956 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    b5da:	78c2      	ldrb	r2, [r0, #3]
    b5dc:	7881      	ldrb	r1, [r0, #2]
    b5de:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    b5e2:	fa10 f181 	uxtah	r1, r0, r1
    b5e6:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b5e8:	2204      	movs	r2, #4
    b5ea:	4b7d      	ldr	r3, [pc, #500]	; (b7e0 <usbdc_cb_ctl_req+0x28c>)
    b5ec:	4798      	blx	r3
    b5ee:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b5f0:	b130      	cbz	r0, b600 <usbdc_cb_ctl_req+0xac>
    b5f2:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b5f4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b7d8 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b5f8:	4f79      	ldr	r7, [pc, #484]	; (b7e0 <usbdc_cb_ctl_req+0x28c>)
    b5fa:	e018      	b.n	b62e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    b5fc:	4b79      	ldr	r3, [pc, #484]	; (b7e4 <usbdc_cb_ctl_req+0x290>)
    b5fe:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b600:	2301      	movs	r3, #1
    b602:	2200      	movs	r2, #0
    b604:	4611      	mov	r1, r2
    b606:	4628      	mov	r0, r5
    b608:	4c72      	ldr	r4, [pc, #456]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b60a:	47a0      	blx	r4
    b60c:	fab0 f080 	clz	r0, r0
    b610:	0940      	lsrs	r0, r0, #5
    b612:	e7b7      	b.n	b584 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    b614:	464c      	mov	r4, r9
    b616:	e000      	b.n	b61a <usbdc_cb_ctl_req+0xc6>
    b618:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    b61a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b61c:	7803      	ldrb	r3, [r0, #0]
    b61e:	4418      	add	r0, r3
    b620:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b622:	2204      	movs	r2, #4
    b624:	9901      	ldr	r1, [sp, #4]
    b626:	47b8      	blx	r7
    b628:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b62a:	2800      	cmp	r0, #0
    b62c:	d0e8      	beq.n	b600 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b62e:	f890 9002 	ldrb.w	r9, [r0, #2]
    b632:	45a1      	cmp	r9, r4
    b634:	d0f1      	beq.n	b61a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b636:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    b63a:	2c00      	cmp	r4, #0
    b63c:	d0ea      	beq.n	b614 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b63e:	2600      	movs	r6, #0
    b640:	6863      	ldr	r3, [r4, #4]
    b642:	466a      	mov	r2, sp
    b644:	4631      	mov	r1, r6
    b646:	4620      	mov	r0, r4
    b648:	4798      	blx	r3
    b64a:	2800      	cmp	r0, #0
    b64c:	d0e4      	beq.n	b618 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    b64e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b650:	2c00      	cmp	r4, #0
    b652:	d1f5      	bne.n	b640 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    b654:	464c      	mov	r4, r9
    b656:	e7e0      	b.n	b61a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b658:	f003 031f 	and.w	r3, r3, #31
    b65c:	2b02      	cmp	r3, #2
    b65e:	f040 816e 	bne.w	b93e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    b662:	88e3      	ldrh	r3, [r4, #6]
    b664:	b10b      	cbz	r3, b66a <usbdc_cb_ctl_req+0x116>
			return false;
    b666:	2000      	movs	r0, #0
    b668:	e78c      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b66a:	88a0      	ldrh	r0, [r4, #4]
    b66c:	2100      	movs	r1, #0
    b66e:	b2c0      	uxtb	r0, r0
    b670:	4b5d      	ldr	r3, [pc, #372]	; (b7e8 <usbdc_cb_ctl_req+0x294>)
    b672:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b674:	2301      	movs	r3, #1
    b676:	2200      	movs	r2, #0
    b678:	4611      	mov	r1, r2
    b67a:	4628      	mov	r0, r5
    b67c:	4c55      	ldr	r4, [pc, #340]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b67e:	47a0      	blx	r4
		return true;
    b680:	2001      	movs	r0, #1
    b682:	e77f      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b684:	f003 031f 	and.w	r3, r3, #31
    b688:	2b02      	cmp	r3, #2
    b68a:	f040 815a 	bne.w	b942 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    b68e:	88e3      	ldrh	r3, [r4, #6]
    b690:	b10b      	cbz	r3, b696 <usbdc_cb_ctl_req+0x142>
			return false;
    b692:	2000      	movs	r0, #0
    b694:	e776      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    b696:	88a0      	ldrh	r0, [r4, #4]
    b698:	2101      	movs	r1, #1
    b69a:	b2c0      	uxtb	r0, r0
    b69c:	4b52      	ldr	r3, [pc, #328]	; (b7e8 <usbdc_cb_ctl_req+0x294>)
    b69e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b6a0:	2301      	movs	r3, #1
    b6a2:	2200      	movs	r2, #0
    b6a4:	4611      	mov	r1, r2
    b6a6:	4628      	mov	r0, r5
    b6a8:	4c4a      	ldr	r4, [pc, #296]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b6aa:	47a0      	blx	r4
		return true;
    b6ac:	2001      	movs	r0, #1
    b6ae:	e769      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    b6b0:	8866      	ldrh	r6, [r4, #2]
    b6b2:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b6b4:	4a48      	ldr	r2, [pc, #288]	; (b7d8 <usbdc_cb_ctl_req+0x284>)
    b6b6:	6813      	ldr	r3, [r2, #0]
    b6b8:	7ed2      	ldrb	r2, [r2, #27]
    b6ba:	6859      	ldr	r1, [r3, #4]
    b6bc:	6818      	ldr	r0, [r3, #0]
    b6be:	4b47      	ldr	r3, [pc, #284]	; (b7dc <usbdc_cb_ctl_req+0x288>)
    b6c0:	4798      	blx	r3
	if (NULL == ifc) {
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d045      	beq.n	b752 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    b6c6:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    b6c8:	78c2      	ldrb	r2, [r0, #3]
    b6ca:	7881      	ldrb	r1, [r0, #2]
    b6cc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b6d0:	fa10 f181 	uxtah	r1, r0, r1
    b6d4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b6d6:	2204      	movs	r2, #4
    b6d8:	4b41      	ldr	r3, [pc, #260]	; (b7e0 <usbdc_cb_ctl_req+0x28c>)
    b6da:	4798      	blx	r3
    b6dc:	4603      	mov	r3, r0
    b6de:	2800      	cmp	r0, #0
    b6e0:	d039      	beq.n	b756 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b6e2:	2704      	movs	r7, #4
    b6e4:	4d3e      	ldr	r5, [pc, #248]	; (b7e0 <usbdc_cb_ctl_req+0x28c>)
    b6e6:	e008      	b.n	b6fa <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    b6e8:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b6ea:	7803      	ldrb	r3, [r0, #0]
    b6ec:	4418      	add	r0, r3
    b6ee:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b6f0:	463a      	mov	r2, r7
    b6f2:	9901      	ldr	r1, [sp, #4]
    b6f4:	47a8      	blx	r5
		if (NULL == ifc) {
    b6f6:	4603      	mov	r3, r0
    b6f8:	b378      	cbz	r0, b75a <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b6fa:	789a      	ldrb	r2, [r3, #2]
    b6fc:	42a2      	cmp	r2, r4
    b6fe:	d1f3      	bne.n	b6e8 <usbdc_cb_ctl_req+0x194>
    b700:	78da      	ldrb	r2, [r3, #3]
    b702:	42b2      	cmp	r2, r6
    b704:	d1f0      	bne.n	b6e8 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    b706:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    b708:	4b33      	ldr	r3, [pc, #204]	; (b7d8 <usbdc_cb_ctl_req+0x284>)
    b70a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    b70c:	b33d      	cbz	r5, b75e <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    b70e:	2701      	movs	r7, #1
    b710:	686b      	ldr	r3, [r5, #4]
    b712:	466a      	mov	r2, sp
    b714:	4639      	mov	r1, r7
    b716:	4628      	mov	r0, r5
    b718:	4798      	blx	r3
    b71a:	b120      	cbz	r0, b726 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    b71c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b71e:	2d00      	cmp	r5, #0
    b720:	d1f6      	bne.n	b710 <usbdc_cb_ctl_req+0x1bc>
	return false;
    b722:	2000      	movs	r0, #0
    b724:	e72e      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    b726:	686b      	ldr	r3, [r5, #4]
    b728:	466a      	mov	r2, sp
    b72a:	2100      	movs	r1, #0
    b72c:	4628      	mov	r0, r5
    b72e:	4798      	blx	r3
    b730:	b9b8      	cbnz	r0, b762 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    b732:	b136      	cbz	r6, b742 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    b734:	4a28      	ldr	r2, [pc, #160]	; (b7d8 <usbdc_cb_ctl_req+0x284>)
    b736:	2301      	movs	r3, #1
    b738:	fa03 f404 	lsl.w	r4, r3, r4
    b73c:	7f53      	ldrb	r3, [r2, #29]
    b73e:	4323      	orrs	r3, r4
    b740:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    b742:	2300      	movs	r3, #0
    b744:	461a      	mov	r2, r3
    b746:	4619      	mov	r1, r3
    b748:	4618      	mov	r0, r3
    b74a:	4c22      	ldr	r4, [pc, #136]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b74c:	47a0      	blx	r4
			return true;
    b74e:	2001      	movs	r0, #1
    b750:	e718      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b752:	2000      	movs	r0, #0
    b754:	e716      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b756:	2000      	movs	r0, #0
    b758:	e714      	b.n	b584 <usbdc_cb_ctl_req+0x30>
			return false;
    b75a:	2000      	movs	r0, #0
    b75c:	e712      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	return false;
    b75e:	2000      	movs	r0, #0
    b760:	e710      	b.n	b584 <usbdc_cb_ctl_req+0x30>
			return false;
    b762:	2000      	movs	r0, #0
    b764:	e70e      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    b766:	7862      	ldrb	r2, [r4, #1]
    b768:	2a0a      	cmp	r2, #10
    b76a:	f200 80ec 	bhi.w	b946 <usbdc_cb_ctl_req+0x3f2>
    b76e:	e8df f012 	tbh	[pc, r2, lsl #1]
    b772:	008e      	.short	0x008e
    b774:	00ea00ea 	.word	0x00ea00ea
    b778:	00ea00ea 	.word	0x00ea00ea
    b77c:	000b00ea 	.word	0x000b00ea
    b780:	008200ea 	.word	0x008200ea
    b784:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b788:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    b78a:	0a13      	lsrs	r3, r2, #8
    b78c:	2b02      	cmp	r3, #2
    b78e:	d02d      	beq.n	b7ec <usbdc_cb_ctl_req+0x298>
    b790:	2b03      	cmp	r3, #3
    b792:	d050      	beq.n	b836 <usbdc_cb_ctl_req+0x2e2>
    b794:	2b01      	cmp	r3, #1
    b796:	d001      	beq.n	b79c <usbdc_cb_ctl_req+0x248>
	return false;
    b798:	2000      	movs	r0, #0
    b79a:	e6f3      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    b79c:	88e2      	ldrh	r2, [r4, #6]
    b79e:	2a12      	cmp	r2, #18
    b7a0:	bf28      	it	cs
    b7a2:	2212      	movcs	r2, #18
    b7a4:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b7a6:	4b0c      	ldr	r3, [pc, #48]	; (b7d8 <usbdc_cb_ctl_req+0x284>)
    b7a8:	681b      	ldr	r3, [r3, #0]
    b7aa:	2201      	movs	r2, #1
    b7ac:	6859      	ldr	r1, [r3, #4]
    b7ae:	6818      	ldr	r0, [r3, #0]
    b7b0:	4b0b      	ldr	r3, [pc, #44]	; (b7e0 <usbdc_cb_ctl_req+0x28c>)
    b7b2:	4798      	blx	r3
	if (!dev_desc) {
    b7b4:	4601      	mov	r1, r0
    b7b6:	2800      	cmp	r0, #0
    b7b8:	f000 80c7 	beq.w	b94a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b7bc:	2300      	movs	r3, #0
    b7be:	4622      	mov	r2, r4
    b7c0:	4628      	mov	r0, r5
    b7c2:	4c04      	ldr	r4, [pc, #16]	; (b7d4 <usbdc_cb_ctl_req+0x280>)
    b7c4:	47a0      	blx	r4
    b7c6:	fab0 f080 	clz	r0, r0
    b7ca:	0940      	lsrs	r0, r0, #5
    b7cc:	e6da      	b.n	b584 <usbdc_cb_ctl_req+0x30>
    b7ce:	bf00      	nop
    b7d0:	0000b3e9 	.word	0x0000b3e9
    b7d4:	0000b535 	.word	0x0000b535
    b7d8:	20000e3c 	.word	0x20000e3c
    b7dc:	0000baf9 	.word	0x0000baf9
    b7e0:	0000ba79 	.word	0x0000ba79
    b7e4:	0000b39d 	.word	0x0000b39d
    b7e8:	00005ee5 	.word	0x00005ee5
	uint16_t length   = req->wLength;
    b7ec:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b7ee:	4b5b      	ldr	r3, [pc, #364]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b7f0:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b7f2:	681b      	ldr	r3, [r3, #0]
    b7f4:	3201      	adds	r2, #1
    b7f6:	b2d2      	uxtb	r2, r2
    b7f8:	6859      	ldr	r1, [r3, #4]
    b7fa:	6818      	ldr	r0, [r3, #0]
    b7fc:	4b58      	ldr	r3, [pc, #352]	; (b960 <usbdc_cb_ctl_req+0x40c>)
    b7fe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b800:	4601      	mov	r1, r0
    b802:	2800      	cmp	r0, #0
    b804:	f000 80a3 	beq.w	b94e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    b808:	78c3      	ldrb	r3, [r0, #3]
    b80a:	7882      	ldrb	r2, [r0, #2]
    b80c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    b810:	b292      	uxth	r2, r2
	if (length <= total_len) {
    b812:	4294      	cmp	r4, r2
    b814:	d90d      	bls.n	b832 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b816:	3e01      	subs	r6, #1
    b818:	4226      	tst	r6, r4
    b81a:	bf0c      	ite	eq
    b81c:	2301      	moveq	r3, #1
    b81e:	2300      	movne	r3, #0
		length = total_len;
    b820:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b822:	4622      	mov	r2, r4
    b824:	4628      	mov	r0, r5
    b826:	4c4f      	ldr	r4, [pc, #316]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b828:	47a0      	blx	r4
    b82a:	fab0 f080 	clz	r0, r0
    b82e:	0940      	lsrs	r0, r0, #5
    b830:	e6a8      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b832:	2300      	movs	r3, #0
    b834:	e7f5      	b.n	b822 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    b836:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b838:	4b48      	ldr	r3, [pc, #288]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b83a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b83c:	681b      	ldr	r3, [r3, #0]
    b83e:	b2d2      	uxtb	r2, r2
    b840:	6859      	ldr	r1, [r3, #4]
    b842:	6818      	ldr	r0, [r3, #0]
    b844:	4b48      	ldr	r3, [pc, #288]	; (b968 <usbdc_cb_ctl_req+0x414>)
    b846:	4798      	blx	r3
	if (NULL == str_desc) {
    b848:	4601      	mov	r1, r0
    b84a:	2800      	cmp	r0, #0
    b84c:	f000 8081 	beq.w	b952 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    b850:	7802      	ldrb	r2, [r0, #0]
    b852:	4294      	cmp	r4, r2
    b854:	d90d      	bls.n	b872 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b856:	3e01      	subs	r6, #1
    b858:	4226      	tst	r6, r4
    b85a:	bf0c      	ite	eq
    b85c:	2301      	moveq	r3, #1
    b85e:	2300      	movne	r3, #0
		length = str_desc[0];
    b860:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b862:	4622      	mov	r2, r4
    b864:	4628      	mov	r0, r5
    b866:	4c3f      	ldr	r4, [pc, #252]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b868:	47a0      	blx	r4
    b86a:	fab0 f080 	clz	r0, r0
    b86e:	0940      	lsrs	r0, r0, #5
    b870:	e688      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b872:	2300      	movs	r3, #0
    b874:	e7f5      	b.n	b862 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b876:	4939      	ldr	r1, [pc, #228]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b878:	694b      	ldr	r3, [r1, #20]
    b87a:	7eca      	ldrb	r2, [r1, #27]
    b87c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b87e:	2300      	movs	r3, #0
    b880:	2201      	movs	r2, #1
    b882:	6949      	ldr	r1, [r1, #20]
    b884:	4628      	mov	r0, r5
    b886:	4c37      	ldr	r4, [pc, #220]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b888:	47a0      	blx	r4
		return true;
    b88a:	2001      	movs	r0, #1
    b88c:	e67a      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b88e:	f003 031f 	and.w	r3, r3, #31
    b892:	2b01      	cmp	r3, #1
    b894:	d903      	bls.n	b89e <usbdc_cb_ctl_req+0x34a>
    b896:	2b02      	cmp	r3, #2
    b898:	d010      	beq.n	b8bc <usbdc_cb_ctl_req+0x368>
		return false;
    b89a:	2000      	movs	r0, #0
    b89c:	e672      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		st = 0;
    b89e:	2300      	movs	r3, #0
    b8a0:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b8a2:	492e      	ldr	r1, [pc, #184]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b8a4:	694b      	ldr	r3, [r1, #20]
    b8a6:	f8bd 2000 	ldrh.w	r2, [sp]
    b8aa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b8ac:	2300      	movs	r3, #0
    b8ae:	2202      	movs	r2, #2
    b8b0:	6949      	ldr	r1, [r1, #20]
    b8b2:	4628      	mov	r0, r5
    b8b4:	4c2b      	ldr	r4, [pc, #172]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b8b6:	47a0      	blx	r4
	return true;
    b8b8:	2001      	movs	r0, #1
    b8ba:	e663      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b8bc:	88a0      	ldrh	r0, [r4, #4]
    b8be:	2102      	movs	r1, #2
    b8c0:	b2c0      	uxtb	r0, r0
    b8c2:	4b2a      	ldr	r3, [pc, #168]	; (b96c <usbdc_cb_ctl_req+0x418>)
    b8c4:	4798      	blx	r3
		if (st < 0) {
    b8c6:	2800      	cmp	r0, #0
    b8c8:	db03      	blt.n	b8d2 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    b8ca:	f000 0001 	and.w	r0, r0, #1
    b8ce:	9000      	str	r0, [sp, #0]
    b8d0:	e7e7      	b.n	b8a2 <usbdc_cb_ctl_req+0x34e>
			return false;
    b8d2:	2000      	movs	r0, #0
    b8d4:	e656      	b.n	b584 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b8d6:	4b21      	ldr	r3, [pc, #132]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b8d8:	7f5b      	ldrb	r3, [r3, #29]
    b8da:	88a2      	ldrh	r2, [r4, #4]
    b8dc:	4113      	asrs	r3, r2
    b8de:	f013 0f01 	tst.w	r3, #1
    b8e2:	d012      	beq.n	b90a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b8e4:	4b1d      	ldr	r3, [pc, #116]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b8e6:	691d      	ldr	r5, [r3, #16]
	return false;
    b8e8:	2000      	movs	r0, #0
	while (NULL != func) {
    b8ea:	2d00      	cmp	r5, #0
    b8ec:	f43f ae4a 	beq.w	b584 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b8f0:	2602      	movs	r6, #2
    b8f2:	686b      	ldr	r3, [r5, #4]
    b8f4:	4622      	mov	r2, r4
    b8f6:	4631      	mov	r1, r6
    b8f8:	4628      	mov	r0, r5
    b8fa:	4798      	blx	r3
    b8fc:	2800      	cmp	r0, #0
    b8fe:	da0f      	bge.n	b920 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    b900:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b902:	2d00      	cmp	r5, #0
    b904:	d1f5      	bne.n	b8f2 <usbdc_cb_ctl_req+0x39e>
	return false;
    b906:	2000      	movs	r0, #0
    b908:	e63c      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    b90a:	4914      	ldr	r1, [pc, #80]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b90c:	694b      	ldr	r3, [r1, #20]
    b90e:	2000      	movs	r0, #0
    b910:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b912:	4603      	mov	r3, r0
    b914:	2201      	movs	r2, #1
    b916:	6949      	ldr	r1, [r1, #20]
    b918:	4c12      	ldr	r4, [pc, #72]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b91a:	47a0      	blx	r4
		return true;
    b91c:	2001      	movs	r0, #1
    b91e:	e631      	b.n	b584 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b920:	490e      	ldr	r1, [pc, #56]	; (b95c <usbdc_cb_ctl_req+0x408>)
    b922:	694b      	ldr	r3, [r1, #20]
    b924:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b926:	2300      	movs	r3, #0
    b928:	2201      	movs	r2, #1
    b92a:	6949      	ldr	r1, [r1, #20]
    b92c:	4618      	mov	r0, r3
    b92e:	4c0d      	ldr	r4, [pc, #52]	; (b964 <usbdc_cb_ctl_req+0x410>)
    b930:	47a0      	blx	r4
			return true;
    b932:	2001      	movs	r0, #1
    b934:	e626      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return true;
    b936:	2001      	movs	r0, #1
    b938:	e624      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b93a:	2000      	movs	r0, #0
    b93c:	e622      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b93e:	2000      	movs	r0, #0
    b940:	e620      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b942:	2000      	movs	r0, #0
    b944:	e61e      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b946:	2000      	movs	r0, #0
    b948:	e61c      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b94a:	2000      	movs	r0, #0
    b94c:	e61a      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b94e:	2000      	movs	r0, #0
    b950:	e618      	b.n	b584 <usbdc_cb_ctl_req+0x30>
		return false;
    b952:	2000      	movs	r0, #0
    b954:	e616      	b.n	b584 <usbdc_cb_ctl_req+0x30>
			return false;
    b956:	2000      	movs	r0, #0
    b958:	e614      	b.n	b584 <usbdc_cb_ctl_req+0x30>
    b95a:	bf00      	nop
    b95c:	20000e3c 	.word	0x20000e3c
    b960:	0000baf9 	.word	0x0000baf9
    b964:	0000b535 	.word	0x0000b535
    b968:	0000bb61 	.word	0x0000bb61
    b96c:	00005ee5 	.word	0x00005ee5

0000b970 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b970:	b508      	push	{r3, lr}
	switch (type) {
    b972:	2801      	cmp	r0, #1
    b974:	d007      	beq.n	b986 <usbdc_register_handler+0x16>
    b976:	b110      	cbz	r0, b97e <usbdc_register_handler+0xe>
    b978:	2802      	cmp	r0, #2
    b97a:	d008      	beq.n	b98e <usbdc_register_handler+0x1e>
    b97c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b97e:	4806      	ldr	r0, [pc, #24]	; (b998 <usbdc_register_handler+0x28>)
    b980:	4b06      	ldr	r3, [pc, #24]	; (b99c <usbdc_register_handler+0x2c>)
    b982:	4798      	blx	r3
		break;
    b984:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b986:	4806      	ldr	r0, [pc, #24]	; (b9a0 <usbdc_register_handler+0x30>)
    b988:	4b04      	ldr	r3, [pc, #16]	; (b99c <usbdc_register_handler+0x2c>)
    b98a:	4798      	blx	r3
		break;
    b98c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b98e:	4805      	ldr	r0, [pc, #20]	; (b9a4 <usbdc_register_handler+0x34>)
    b990:	4b02      	ldr	r3, [pc, #8]	; (b99c <usbdc_register_handler+0x2c>)
    b992:	4798      	blx	r3
    b994:	bd08      	pop	{r3, pc}
    b996:	bf00      	nop
    b998:	20000e40 	.word	0x20000e40
    b99c:	00005ff5 	.word	0x00005ff5
    b9a0:	20000e44 	.word	0x20000e44
    b9a4:	20000e48 	.word	0x20000e48

0000b9a8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b9a8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b9aa:	4605      	mov	r5, r0
    b9ac:	f240 3255 	movw	r2, #853	; 0x355
    b9b0:	490c      	ldr	r1, [pc, #48]	; (b9e4 <usbdc_init+0x3c>)
    b9b2:	3000      	adds	r0, #0
    b9b4:	bf18      	it	ne
    b9b6:	2001      	movne	r0, #1
    b9b8:	4b0b      	ldr	r3, [pc, #44]	; (b9e8 <usbdc_init+0x40>)
    b9ba:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b9bc:	4b0b      	ldr	r3, [pc, #44]	; (b9ec <usbdc_init+0x44>)
    b9be:	4798      	blx	r3
	if (rc < 0) {
    b9c0:	2800      	cmp	r0, #0
    b9c2:	db0e      	blt.n	b9e2 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b9c4:	4c0a      	ldr	r4, [pc, #40]	; (b9f0 <usbdc_init+0x48>)
    b9c6:	2220      	movs	r2, #32
    b9c8:	2100      	movs	r1, #0
    b9ca:	4620      	mov	r0, r4
    b9cc:	4b09      	ldr	r3, [pc, #36]	; (b9f4 <usbdc_init+0x4c>)
    b9ce:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b9d0:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b9d2:	4909      	ldr	r1, [pc, #36]	; (b9f8 <usbdc_init+0x50>)
    b9d4:	2000      	movs	r0, #0
    b9d6:	4c09      	ldr	r4, [pc, #36]	; (b9fc <usbdc_init+0x54>)
    b9d8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b9da:	4909      	ldr	r1, [pc, #36]	; (ba00 <usbdc_init+0x58>)
    b9dc:	2001      	movs	r0, #1
    b9de:	47a0      	blx	r4

	return 0;
    b9e0:	2000      	movs	r0, #0
}
    b9e2:	bd38      	pop	{r3, r4, r5, pc}
    b9e4:	0000e5e4 	.word	0x0000e5e4
    b9e8:	00005f99 	.word	0x00005f99
    b9ec:	00005c41 	.word	0x00005c41
    b9f0:	20000e3c 	.word	0x20000e3c
    b9f4:	0000c547 	.word	0x0000c547
    b9f8:	0000b429 	.word	0x0000b429
    b9fc:	00005ca9 	.word	0x00005ca9
    ba00:	0000b515 	.word	0x0000b515

0000ba04 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ba04:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    ba06:	4601      	mov	r1, r0
    ba08:	4801      	ldr	r0, [pc, #4]	; (ba10 <usbdc_register_function+0xc>)
    ba0a:	4b02      	ldr	r3, [pc, #8]	; (ba14 <usbdc_register_function+0x10>)
    ba0c:	4798      	blx	r3
    ba0e:	bd08      	pop	{r3, pc}
    ba10:	20000e4c 	.word	0x20000e4c
    ba14:	00005ff5 	.word	0x00005ff5

0000ba18 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ba18:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    ba1a:	4b0a      	ldr	r3, [pc, #40]	; (ba44 <usbdc_start+0x2c>)
    ba1c:	7e9b      	ldrb	r3, [r3, #26]
    ba1e:	b95b      	cbnz	r3, ba38 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    ba20:	b168      	cbz	r0, ba3e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    ba22:	4b08      	ldr	r3, [pc, #32]	; (ba44 <usbdc_start+0x2c>)
    ba24:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ba26:	6802      	ldr	r2, [r0, #0]
    ba28:	79d2      	ldrb	r2, [r2, #7]
    ba2a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ba2c:	2201      	movs	r2, #1
    ba2e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ba30:	4b05      	ldr	r3, [pc, #20]	; (ba48 <usbdc_start+0x30>)
    ba32:	4798      	blx	r3
	return ERR_NONE;
    ba34:	2000      	movs	r0, #0
    ba36:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    ba38:	f06f 0003 	mvn.w	r0, #3
    ba3c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    ba3e:	f06f 0008 	mvn.w	r0, #8
}
    ba42:	bd08      	pop	{r3, pc}
    ba44:	20000e3c 	.word	0x20000e3c
    ba48:	00005cb5 	.word	0x00005cb5

0000ba4c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ba4c:	b508      	push	{r3, lr}
	usb_d_attach();
    ba4e:	4b01      	ldr	r3, [pc, #4]	; (ba54 <usbdc_attach+0x8>)
    ba50:	4798      	blx	r3
    ba52:	bd08      	pop	{r3, pc}
    ba54:	00005cc1 	.word	0x00005cc1

0000ba58 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    ba58:	4b01      	ldr	r3, [pc, #4]	; (ba60 <usbdc_get_ctrl_buffer+0x8>)
    ba5a:	6958      	ldr	r0, [r3, #20]
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
    ba60:	20000e3c 	.word	0x20000e3c

0000ba64 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    ba64:	4b03      	ldr	r3, [pc, #12]	; (ba74 <usbdc_get_state+0x10>)
    ba66:	7e98      	ldrb	r0, [r3, #26]
    ba68:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    ba6c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    ba6e:	bf18      	it	ne
    ba70:	2010      	movne	r0, #16
    ba72:	4770      	bx	lr
    ba74:	20000e3c 	.word	0x20000e3c

0000ba78 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ba78:	4288      	cmp	r0, r1
    ba7a:	d214      	bcs.n	baa6 <usb_find_desc+0x2e>
	return desc[0];
    ba7c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ba7e:	2b01      	cmp	r3, #1
    ba80:	d913      	bls.n	baaa <usb_find_desc+0x32>
{
    ba82:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    ba84:	7844      	ldrb	r4, [r0, #1]
    ba86:	4294      	cmp	r4, r2
    ba88:	d00a      	beq.n	baa0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    ba8a:	4418      	add	r0, r3
	while (desc < eof) {
    ba8c:	4281      	cmp	r1, r0
    ba8e:	d906      	bls.n	ba9e <usb_find_desc+0x26>
	return desc[0];
    ba90:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ba92:	2b01      	cmp	r3, #1
    ba94:	d90b      	bls.n	baae <usb_find_desc+0x36>
	return desc[1];
    ba96:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    ba98:	4294      	cmp	r4, r2
    ba9a:	d1f6      	bne.n	ba8a <usb_find_desc+0x12>
    ba9c:	e000      	b.n	baa0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    ba9e:	2000      	movs	r0, #0
}
    baa0:	f85d 4b04 	ldr.w	r4, [sp], #4
    baa4:	4770      	bx	lr
	return NULL;
    baa6:	2000      	movs	r0, #0
    baa8:	4770      	bx	lr
		_desc_len_check();
    baaa:	2000      	movs	r0, #0
    baac:	4770      	bx	lr
    baae:	2000      	movs	r0, #0
    bab0:	e7f6      	b.n	baa0 <usb_find_desc+0x28>

0000bab2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    bab2:	4288      	cmp	r0, r1
    bab4:	d216      	bcs.n	bae4 <usb_find_ep_desc+0x32>
	return desc[0];
    bab6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    bab8:	2b01      	cmp	r3, #1
    baba:	d915      	bls.n	bae8 <usb_find_ep_desc+0x36>
	return desc[1];
    babc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    babe:	2a04      	cmp	r2, #4
    bac0:	d014      	beq.n	baec <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    bac2:	2a05      	cmp	r2, #5
    bac4:	d00b      	beq.n	bade <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    bac6:	4418      	add	r0, r3
	while (desc < eof) {
    bac8:	4281      	cmp	r1, r0
    baca:	d909      	bls.n	bae0 <usb_find_ep_desc+0x2e>
	return desc[0];
    bacc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    bace:	2b01      	cmp	r3, #1
    bad0:	d90e      	bls.n	baf0 <usb_find_ep_desc+0x3e>
	return desc[1];
    bad2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    bad4:	2a04      	cmp	r2, #4
    bad6:	d00d      	beq.n	baf4 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    bad8:	2a05      	cmp	r2, #5
    bada:	d1f4      	bne.n	bac6 <usb_find_ep_desc+0x14>
    badc:	e00b      	b.n	baf6 <usb_find_ep_desc+0x44>
    bade:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    bae0:	2000      	movs	r0, #0
    bae2:	4770      	bx	lr
    bae4:	2000      	movs	r0, #0
    bae6:	4770      	bx	lr
		_desc_len_check();
    bae8:	2000      	movs	r0, #0
    baea:	4770      	bx	lr
	return NULL;
    baec:	2000      	movs	r0, #0
    baee:	4770      	bx	lr
		_desc_len_check();
    baf0:	2000      	movs	r0, #0
    baf2:	4770      	bx	lr
	return NULL;
    baf4:	2000      	movs	r0, #0
}
    baf6:	4770      	bx	lr

0000baf8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    baf8:	b538      	push	{r3, r4, r5, lr}
    bafa:	460c      	mov	r4, r1
    bafc:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    bafe:	2202      	movs	r2, #2
    bb00:	4b16      	ldr	r3, [pc, #88]	; (bb5c <usb_find_cfg_desc+0x64>)
    bb02:	4798      	blx	r3
	if (!desc) {
    bb04:	4603      	mov	r3, r0
    bb06:	b1e8      	cbz	r0, bb44 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    bb08:	4284      	cmp	r4, r0
    bb0a:	d91d      	bls.n	bb48 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    bb0c:	7802      	ldrb	r2, [r0, #0]
    bb0e:	2a01      	cmp	r2, #1
    bb10:	d91c      	bls.n	bb4c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    bb12:	7842      	ldrb	r2, [r0, #1]
    bb14:	2a02      	cmp	r2, #2
    bb16:	d11b      	bne.n	bb50 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    bb18:	7942      	ldrb	r2, [r0, #5]
    bb1a:	42aa      	cmp	r2, r5
    bb1c:	d012      	beq.n	bb44 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    bb1e:	78d9      	ldrb	r1, [r3, #3]
    bb20:	789a      	ldrb	r2, [r3, #2]
    bb22:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    bb26:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    bb2a:	429c      	cmp	r4, r3
    bb2c:	d909      	bls.n	bb42 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    bb2e:	781a      	ldrb	r2, [r3, #0]
    bb30:	2a01      	cmp	r2, #1
    bb32:	d90f      	bls.n	bb54 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    bb34:	785a      	ldrb	r2, [r3, #1]
    bb36:	2a02      	cmp	r2, #2
    bb38:	d10e      	bne.n	bb58 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    bb3a:	795a      	ldrb	r2, [r3, #5]
    bb3c:	42aa      	cmp	r2, r5
    bb3e:	d1ee      	bne.n	bb1e <usb_find_cfg_desc+0x26>
    bb40:	e000      	b.n	bb44 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    bb42:	2300      	movs	r3, #0
}
    bb44:	4618      	mov	r0, r3
    bb46:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    bb48:	2300      	movs	r3, #0
    bb4a:	e7fb      	b.n	bb44 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    bb4c:	2300      	movs	r3, #0
    bb4e:	e7f9      	b.n	bb44 <usb_find_cfg_desc+0x4c>
	return NULL;
    bb50:	2300      	movs	r3, #0
    bb52:	e7f7      	b.n	bb44 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    bb54:	2300      	movs	r3, #0
    bb56:	e7f5      	b.n	bb44 <usb_find_cfg_desc+0x4c>
	return NULL;
    bb58:	2300      	movs	r3, #0
    bb5a:	e7f3      	b.n	bb44 <usb_find_cfg_desc+0x4c>
    bb5c:	0000ba79 	.word	0x0000ba79

0000bb60 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    bb60:	4288      	cmp	r0, r1
    bb62:	d217      	bcs.n	bb94 <usb_find_str_desc+0x34>
{
    bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb68:	460d      	mov	r5, r1
    bb6a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    bb6c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    bb6e:	f04f 0803 	mov.w	r8, #3
    bb72:	4f0c      	ldr	r7, [pc, #48]	; (bba4 <usb_find_str_desc+0x44>)
    bb74:	4642      	mov	r2, r8
    bb76:	4629      	mov	r1, r5
    bb78:	47b8      	blx	r7
		if (desc) {
    bb7a:	4603      	mov	r3, r0
    bb7c:	b170      	cbz	r0, bb9c <usb_find_str_desc+0x3c>
	return desc[0];
    bb7e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    bb80:	2801      	cmp	r0, #1
    bb82:	d90a      	bls.n	bb9a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    bb84:	42a6      	cmp	r6, r4
    bb86:	d009      	beq.n	bb9c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    bb88:	4418      	add	r0, r3
    bb8a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    bb8c:	4285      	cmp	r5, r0
    bb8e:	d8f1      	bhi.n	bb74 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    bb90:	2300      	movs	r3, #0
    bb92:	e003      	b.n	bb9c <usb_find_str_desc+0x3c>
    bb94:	2300      	movs	r3, #0
}
    bb96:	4618      	mov	r0, r3
    bb98:	4770      	bx	lr
			_desc_len_check();
    bb9a:	2300      	movs	r3, #0
}
    bb9c:	4618      	mov	r0, r3
    bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bba2:	bf00      	nop
    bba4:	0000ba79 	.word	0x0000ba79

0000bba8 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    bba8:	4b3a      	ldr	r3, [pc, #232]	; (bc94 <hiddf_demo_sof_event+0xec>)
    bbaa:	791b      	ldrb	r3, [r3, #4]
    bbac:	2b0a      	cmp	r3, #10
    bbae:	d803      	bhi.n	bbb8 <hiddf_demo_sof_event+0x10>
    bbb0:	3301      	adds	r3, #1
    bbb2:	4a38      	ldr	r2, [pc, #224]	; (bc94 <hiddf_demo_sof_event+0xec>)
    bbb4:	7113      	strb	r3, [r2, #4]
    bbb6:	4770      	bx	lr
{
    bbb8:	b570      	push	{r4, r5, r6, lr}
    bbba:	b084      	sub	sp, #16
		interval = 0;
    bbbc:	4b35      	ldr	r3, [pc, #212]	; (bc94 <hiddf_demo_sof_event+0xec>)
    bbbe:	2200      	movs	r2, #0
    bbc0:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    bbc2:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    bbc4:	a801      	add	r0, sp, #4
    bbc6:	4b34      	ldr	r3, [pc, #208]	; (bc98 <hiddf_demo_sof_event+0xf0>)
    bbc8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bbca:	096b      	lsrs	r3, r5, #5
    bbcc:	4933      	ldr	r1, [pc, #204]	; (bc9c <hiddf_demo_sof_event+0xf4>)
    bbce:	01db      	lsls	r3, r3, #7
    bbd0:	18ca      	adds	r2, r1, r3
    bbd2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bbd4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bbd6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bbd8:	405c      	eors	r4, r3
    bbda:	400c      	ands	r4, r1
    bbdc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bbde:	a801      	add	r0, sp, #4
    bbe0:	4b2f      	ldr	r3, [pc, #188]	; (bca0 <hiddf_demo_sof_event+0xf8>)
    bbe2:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    bbe4:	f005 051f 	and.w	r5, r5, #31
    bbe8:	2301      	movs	r3, #1
    bbea:	fa03 f505 	lsl.w	r5, r3, r5
    bbee:	4225      	tst	r5, r4
    bbf0:	d040      	beq.n	bc74 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    bbf2:	4b28      	ldr	r3, [pc, #160]	; (bc94 <hiddf_demo_sof_event+0xec>)
    bbf4:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    bbf6:	a802      	add	r0, sp, #8
    bbf8:	4b27      	ldr	r3, [pc, #156]	; (bc98 <hiddf_demo_sof_event+0xf0>)
    bbfa:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bbfc:	096b      	lsrs	r3, r5, #5
    bbfe:	4927      	ldr	r1, [pc, #156]	; (bc9c <hiddf_demo_sof_event+0xf4>)
    bc00:	01db      	lsls	r3, r3, #7
    bc02:	18ca      	adds	r2, r1, r3
    bc04:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bc06:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bc08:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bc0a:	405c      	eors	r4, r3
    bc0c:	400c      	ands	r4, r1
    bc0e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bc10:	a802      	add	r0, sp, #8
    bc12:	4b23      	ldr	r3, [pc, #140]	; (bca0 <hiddf_demo_sof_event+0xf8>)
    bc14:	4798      	blx	r3
    bc16:	f005 051f 	and.w	r5, r5, #31
    bc1a:	2301      	movs	r3, #1
    bc1c:	fa03 f505 	lsl.w	r5, r3, r5
    bc20:	4225      	tst	r5, r4
    bc22:	d02d      	beq.n	bc80 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    bc24:	4d1b      	ldr	r5, [pc, #108]	; (bc94 <hiddf_demo_sof_event+0xec>)
    bc26:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    bc28:	a803      	add	r0, sp, #12
    bc2a:	4b1b      	ldr	r3, [pc, #108]	; (bc98 <hiddf_demo_sof_event+0xf0>)
    bc2c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bc2e:	0973      	lsrs	r3, r6, #5
    bc30:	491a      	ldr	r1, [pc, #104]	; (bc9c <hiddf_demo_sof_event+0xf4>)
    bc32:	01db      	lsls	r3, r3, #7
    bc34:	18ca      	adds	r2, r1, r3
    bc36:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bc38:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bc3a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bc3c:	405c      	eors	r4, r3
    bc3e:	400c      	ands	r4, r1
    bc40:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bc42:	a803      	add	r0, sp, #12
    bc44:	4b16      	ldr	r3, [pc, #88]	; (bca0 <hiddf_demo_sof_event+0xf8>)
    bc46:	4798      	blx	r3
    bc48:	f006 061f 	and.w	r6, r6, #31
    bc4c:	2301      	movs	r3, #1
    bc4e:	40b3      	lsls	r3, r6
    bc50:	401c      	ands	r4, r3
    bc52:	bf0c      	ite	eq
    bc54:	2301      	moveq	r3, #1
    bc56:	2300      	movne	r3, #0
    bc58:	7d2a      	ldrb	r2, [r5, #20]
    bc5a:	429a      	cmp	r2, r3
    bc5c:	d008      	beq.n	bc70 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    bc5e:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    bc60:	b19c      	cbz	r4, bc8a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    bc62:	2200      	movs	r2, #0
    bc64:	4b0f      	ldr	r3, [pc, #60]	; (bca4 <hiddf_demo_sof_event+0xfc>)
    bc66:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    bc68:	2101      	movs	r1, #1
    bc6a:	480e      	ldr	r0, [pc, #56]	; (bca4 <hiddf_demo_sof_event+0xfc>)
    bc6c:	4b0e      	ldr	r3, [pc, #56]	; (bca8 <hiddf_demo_sof_event+0x100>)
    bc6e:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    bc70:	b004      	add	sp, #16
    bc72:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    bc74:	4619      	mov	r1, r3
    bc76:	f06f 0004 	mvn.w	r0, #4
    bc7a:	4b0c      	ldr	r3, [pc, #48]	; (bcac <hiddf_demo_sof_event+0x104>)
    bc7c:	4798      	blx	r3
    bc7e:	e7b8      	b.n	bbf2 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    bc80:	4619      	mov	r1, r3
    bc82:	2005      	movs	r0, #5
    bc84:	4b09      	ldr	r3, [pc, #36]	; (bcac <hiddf_demo_sof_event+0x104>)
    bc86:	4798      	blx	r3
    bc88:	e7cc      	b.n	bc24 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    bc8a:	2201      	movs	r2, #1
    bc8c:	4b05      	ldr	r3, [pc, #20]	; (bca4 <hiddf_demo_sof_event+0xfc>)
    bc8e:	709a      	strb	r2, [r3, #2]
    bc90:	e7ea      	b.n	bc68 <hiddf_demo_sof_event+0xc0>
    bc92:	bf00      	nop
    bc94:	20000e5c 	.word	0x20000e5c
    bc98:	00004ba5 	.word	0x00004ba5
    bc9c:	41008000 	.word	0x41008000
    bca0:	00004bb3 	.word	0x00004bb3
    bca4:	200003b8 	.word	0x200003b8
    bca8:	0000adf5 	.word	0x0000adf5
    bcac:	0000b089 	.word	0x0000b089

0000bcb0 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    bcb0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bcb2:	4805      	ldr	r0, [pc, #20]	; (bcc8 <composite_device_init+0x18>)
    bcb4:	4b05      	ldr	r3, [pc, #20]	; (bccc <composite_device_init+0x1c>)
    bcb6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    bcb8:	4b05      	ldr	r3, [pc, #20]	; (bcd0 <composite_device_init+0x20>)
    bcba:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    bcbc:	4b05      	ldr	r3, [pc, #20]	; (bcd4 <composite_device_init+0x24>)
    bcbe:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    bcc0:	4b05      	ldr	r3, [pc, #20]	; (bcd8 <composite_device_init+0x28>)
    bcc2:	4798      	blx	r3
    bcc4:	bd08      	pop	{r3, pc}
    bcc6:	bf00      	nop
    bcc8:	20000e74 	.word	0x20000e74
    bccc:	0000b9a9 	.word	0x0000b9a9
    bcd0:	0000ab71 	.word	0x0000ab71
    bcd4:	0000b045 	.word	0x0000b045
    bcd8:	0000adb1 	.word	0x0000adb1

0000bcdc <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    bcdc:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    bcde:	4803      	ldr	r0, [pc, #12]	; (bcec <composite_device_start+0x10>)
    bce0:	4b03      	ldr	r3, [pc, #12]	; (bcf0 <composite_device_start+0x14>)
    bce2:	4798      	blx	r3
	usbdc_attach();
    bce4:	4b03      	ldr	r3, [pc, #12]	; (bcf4 <composite_device_start+0x18>)
    bce6:	4798      	blx	r3
    bce8:	bd08      	pop	{r3, pc}
    bcea:	bf00      	nop
    bcec:	200003c4 	.word	0x200003c4
    bcf0:	0000ba19 	.word	0x0000ba19
    bcf4:	0000ba4d 	.word	0x0000ba4d

0000bcf8 <usb_init>:
		}
	}
}

void usb_init(void)
{
    bcf8:	b508      	push	{r3, lr}

	composite_device_init();
    bcfa:	4b01      	ldr	r3, [pc, #4]	; (bd00 <usb_init+0x8>)
    bcfc:	4798      	blx	r3
    bcfe:	bd08      	pop	{r3, pc}
    bd00:	0000bcb1 	.word	0x0000bcb1

0000bd04 <__aeabi_drsub>:
    bd04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bd08:	e002      	b.n	bd10 <__adddf3>
    bd0a:	bf00      	nop

0000bd0c <__aeabi_dsub>:
    bd0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bd10 <__adddf3>:
    bd10:	b530      	push	{r4, r5, lr}
    bd12:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bd16:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bd1a:	ea94 0f05 	teq	r4, r5
    bd1e:	bf08      	it	eq
    bd20:	ea90 0f02 	teqeq	r0, r2
    bd24:	bf1f      	itttt	ne
    bd26:	ea54 0c00 	orrsne.w	ip, r4, r0
    bd2a:	ea55 0c02 	orrsne.w	ip, r5, r2
    bd2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bd32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bd36:	f000 80e2 	beq.w	befe <__adddf3+0x1ee>
    bd3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bd3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bd42:	bfb8      	it	lt
    bd44:	426d      	neglt	r5, r5
    bd46:	dd0c      	ble.n	bd62 <__adddf3+0x52>
    bd48:	442c      	add	r4, r5
    bd4a:	ea80 0202 	eor.w	r2, r0, r2
    bd4e:	ea81 0303 	eor.w	r3, r1, r3
    bd52:	ea82 0000 	eor.w	r0, r2, r0
    bd56:	ea83 0101 	eor.w	r1, r3, r1
    bd5a:	ea80 0202 	eor.w	r2, r0, r2
    bd5e:	ea81 0303 	eor.w	r3, r1, r3
    bd62:	2d36      	cmp	r5, #54	; 0x36
    bd64:	bf88      	it	hi
    bd66:	bd30      	pophi	{r4, r5, pc}
    bd68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bd6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bd70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bd74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bd78:	d002      	beq.n	bd80 <__adddf3+0x70>
    bd7a:	4240      	negs	r0, r0
    bd7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bd80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bd84:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bd88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bd8c:	d002      	beq.n	bd94 <__adddf3+0x84>
    bd8e:	4252      	negs	r2, r2
    bd90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bd94:	ea94 0f05 	teq	r4, r5
    bd98:	f000 80a7 	beq.w	beea <__adddf3+0x1da>
    bd9c:	f1a4 0401 	sub.w	r4, r4, #1
    bda0:	f1d5 0e20 	rsbs	lr, r5, #32
    bda4:	db0d      	blt.n	bdc2 <__adddf3+0xb2>
    bda6:	fa02 fc0e 	lsl.w	ip, r2, lr
    bdaa:	fa22 f205 	lsr.w	r2, r2, r5
    bdae:	1880      	adds	r0, r0, r2
    bdb0:	f141 0100 	adc.w	r1, r1, #0
    bdb4:	fa03 f20e 	lsl.w	r2, r3, lr
    bdb8:	1880      	adds	r0, r0, r2
    bdba:	fa43 f305 	asr.w	r3, r3, r5
    bdbe:	4159      	adcs	r1, r3
    bdc0:	e00e      	b.n	bde0 <__adddf3+0xd0>
    bdc2:	f1a5 0520 	sub.w	r5, r5, #32
    bdc6:	f10e 0e20 	add.w	lr, lr, #32
    bdca:	2a01      	cmp	r2, #1
    bdcc:	fa03 fc0e 	lsl.w	ip, r3, lr
    bdd0:	bf28      	it	cs
    bdd2:	f04c 0c02 	orrcs.w	ip, ip, #2
    bdd6:	fa43 f305 	asr.w	r3, r3, r5
    bdda:	18c0      	adds	r0, r0, r3
    bddc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bde0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bde4:	d507      	bpl.n	bdf6 <__adddf3+0xe6>
    bde6:	f04f 0e00 	mov.w	lr, #0
    bdea:	f1dc 0c00 	rsbs	ip, ip, #0
    bdee:	eb7e 0000 	sbcs.w	r0, lr, r0
    bdf2:	eb6e 0101 	sbc.w	r1, lr, r1
    bdf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bdfa:	d31b      	bcc.n	be34 <__adddf3+0x124>
    bdfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    be00:	d30c      	bcc.n	be1c <__adddf3+0x10c>
    be02:	0849      	lsrs	r1, r1, #1
    be04:	ea5f 0030 	movs.w	r0, r0, rrx
    be08:	ea4f 0c3c 	mov.w	ip, ip, rrx
    be0c:	f104 0401 	add.w	r4, r4, #1
    be10:	ea4f 5244 	mov.w	r2, r4, lsl #21
    be14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    be18:	f080 809a 	bcs.w	bf50 <__adddf3+0x240>
    be1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    be20:	bf08      	it	eq
    be22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    be26:	f150 0000 	adcs.w	r0, r0, #0
    be2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    be2e:	ea41 0105 	orr.w	r1, r1, r5
    be32:	bd30      	pop	{r4, r5, pc}
    be34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    be38:	4140      	adcs	r0, r0
    be3a:	eb41 0101 	adc.w	r1, r1, r1
    be3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    be42:	f1a4 0401 	sub.w	r4, r4, #1
    be46:	d1e9      	bne.n	be1c <__adddf3+0x10c>
    be48:	f091 0f00 	teq	r1, #0
    be4c:	bf04      	itt	eq
    be4e:	4601      	moveq	r1, r0
    be50:	2000      	moveq	r0, #0
    be52:	fab1 f381 	clz	r3, r1
    be56:	bf08      	it	eq
    be58:	3320      	addeq	r3, #32
    be5a:	f1a3 030b 	sub.w	r3, r3, #11
    be5e:	f1b3 0220 	subs.w	r2, r3, #32
    be62:	da0c      	bge.n	be7e <__adddf3+0x16e>
    be64:	320c      	adds	r2, #12
    be66:	dd08      	ble.n	be7a <__adddf3+0x16a>
    be68:	f102 0c14 	add.w	ip, r2, #20
    be6c:	f1c2 020c 	rsb	r2, r2, #12
    be70:	fa01 f00c 	lsl.w	r0, r1, ip
    be74:	fa21 f102 	lsr.w	r1, r1, r2
    be78:	e00c      	b.n	be94 <__adddf3+0x184>
    be7a:	f102 0214 	add.w	r2, r2, #20
    be7e:	bfd8      	it	le
    be80:	f1c2 0c20 	rsble	ip, r2, #32
    be84:	fa01 f102 	lsl.w	r1, r1, r2
    be88:	fa20 fc0c 	lsr.w	ip, r0, ip
    be8c:	bfdc      	itt	le
    be8e:	ea41 010c 	orrle.w	r1, r1, ip
    be92:	4090      	lslle	r0, r2
    be94:	1ae4      	subs	r4, r4, r3
    be96:	bfa2      	ittt	ge
    be98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    be9c:	4329      	orrge	r1, r5
    be9e:	bd30      	popge	{r4, r5, pc}
    bea0:	ea6f 0404 	mvn.w	r4, r4
    bea4:	3c1f      	subs	r4, #31
    bea6:	da1c      	bge.n	bee2 <__adddf3+0x1d2>
    bea8:	340c      	adds	r4, #12
    beaa:	dc0e      	bgt.n	beca <__adddf3+0x1ba>
    beac:	f104 0414 	add.w	r4, r4, #20
    beb0:	f1c4 0220 	rsb	r2, r4, #32
    beb4:	fa20 f004 	lsr.w	r0, r0, r4
    beb8:	fa01 f302 	lsl.w	r3, r1, r2
    bebc:	ea40 0003 	orr.w	r0, r0, r3
    bec0:	fa21 f304 	lsr.w	r3, r1, r4
    bec4:	ea45 0103 	orr.w	r1, r5, r3
    bec8:	bd30      	pop	{r4, r5, pc}
    beca:	f1c4 040c 	rsb	r4, r4, #12
    bece:	f1c4 0220 	rsb	r2, r4, #32
    bed2:	fa20 f002 	lsr.w	r0, r0, r2
    bed6:	fa01 f304 	lsl.w	r3, r1, r4
    beda:	ea40 0003 	orr.w	r0, r0, r3
    bede:	4629      	mov	r1, r5
    bee0:	bd30      	pop	{r4, r5, pc}
    bee2:	fa21 f004 	lsr.w	r0, r1, r4
    bee6:	4629      	mov	r1, r5
    bee8:	bd30      	pop	{r4, r5, pc}
    beea:	f094 0f00 	teq	r4, #0
    beee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    bef2:	bf06      	itte	eq
    bef4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    bef8:	3401      	addeq	r4, #1
    befa:	3d01      	subne	r5, #1
    befc:	e74e      	b.n	bd9c <__adddf3+0x8c>
    befe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bf02:	bf18      	it	ne
    bf04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bf08:	d029      	beq.n	bf5e <__adddf3+0x24e>
    bf0a:	ea94 0f05 	teq	r4, r5
    bf0e:	bf08      	it	eq
    bf10:	ea90 0f02 	teqeq	r0, r2
    bf14:	d005      	beq.n	bf22 <__adddf3+0x212>
    bf16:	ea54 0c00 	orrs.w	ip, r4, r0
    bf1a:	bf04      	itt	eq
    bf1c:	4619      	moveq	r1, r3
    bf1e:	4610      	moveq	r0, r2
    bf20:	bd30      	pop	{r4, r5, pc}
    bf22:	ea91 0f03 	teq	r1, r3
    bf26:	bf1e      	ittt	ne
    bf28:	2100      	movne	r1, #0
    bf2a:	2000      	movne	r0, #0
    bf2c:	bd30      	popne	{r4, r5, pc}
    bf2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    bf32:	d105      	bne.n	bf40 <__adddf3+0x230>
    bf34:	0040      	lsls	r0, r0, #1
    bf36:	4149      	adcs	r1, r1
    bf38:	bf28      	it	cs
    bf3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bf3e:	bd30      	pop	{r4, r5, pc}
    bf40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    bf44:	bf3c      	itt	cc
    bf46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    bf4a:	bd30      	popcc	{r4, r5, pc}
    bf4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bf50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bf54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bf58:	f04f 0000 	mov.w	r0, #0
    bf5c:	bd30      	pop	{r4, r5, pc}
    bf5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bf62:	bf1a      	itte	ne
    bf64:	4619      	movne	r1, r3
    bf66:	4610      	movne	r0, r2
    bf68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bf6c:	bf1c      	itt	ne
    bf6e:	460b      	movne	r3, r1
    bf70:	4602      	movne	r2, r0
    bf72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bf76:	bf06      	itte	eq
    bf78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bf7c:	ea91 0f03 	teqeq	r1, r3
    bf80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bf84:	bd30      	pop	{r4, r5, pc}
    bf86:	bf00      	nop

0000bf88 <__aeabi_ui2d>:
    bf88:	f090 0f00 	teq	r0, #0
    bf8c:	bf04      	itt	eq
    bf8e:	2100      	moveq	r1, #0
    bf90:	4770      	bxeq	lr
    bf92:	b530      	push	{r4, r5, lr}
    bf94:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bf98:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bf9c:	f04f 0500 	mov.w	r5, #0
    bfa0:	f04f 0100 	mov.w	r1, #0
    bfa4:	e750      	b.n	be48 <__adddf3+0x138>
    bfa6:	bf00      	nop

0000bfa8 <__aeabi_i2d>:
    bfa8:	f090 0f00 	teq	r0, #0
    bfac:	bf04      	itt	eq
    bfae:	2100      	moveq	r1, #0
    bfb0:	4770      	bxeq	lr
    bfb2:	b530      	push	{r4, r5, lr}
    bfb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bfb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bfbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bfc0:	bf48      	it	mi
    bfc2:	4240      	negmi	r0, r0
    bfc4:	f04f 0100 	mov.w	r1, #0
    bfc8:	e73e      	b.n	be48 <__adddf3+0x138>
    bfca:	bf00      	nop

0000bfcc <__aeabi_f2d>:
    bfcc:	0042      	lsls	r2, r0, #1
    bfce:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bfd2:	ea4f 0131 	mov.w	r1, r1, rrx
    bfd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bfda:	bf1f      	itttt	ne
    bfdc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bfe0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bfe4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bfe8:	4770      	bxne	lr
    bfea:	f092 0f00 	teq	r2, #0
    bfee:	bf14      	ite	ne
    bff0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bff4:	4770      	bxeq	lr
    bff6:	b530      	push	{r4, r5, lr}
    bff8:	f44f 7460 	mov.w	r4, #896	; 0x380
    bffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c000:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c004:	e720      	b.n	be48 <__adddf3+0x138>
    c006:	bf00      	nop

0000c008 <__aeabi_ul2d>:
    c008:	ea50 0201 	orrs.w	r2, r0, r1
    c00c:	bf08      	it	eq
    c00e:	4770      	bxeq	lr
    c010:	b530      	push	{r4, r5, lr}
    c012:	f04f 0500 	mov.w	r5, #0
    c016:	e00a      	b.n	c02e <__aeabi_l2d+0x16>

0000c018 <__aeabi_l2d>:
    c018:	ea50 0201 	orrs.w	r2, r0, r1
    c01c:	bf08      	it	eq
    c01e:	4770      	bxeq	lr
    c020:	b530      	push	{r4, r5, lr}
    c022:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c026:	d502      	bpl.n	c02e <__aeabi_l2d+0x16>
    c028:	4240      	negs	r0, r0
    c02a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c02e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c032:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c036:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c03a:	f43f aedc 	beq.w	bdf6 <__adddf3+0xe6>
    c03e:	f04f 0203 	mov.w	r2, #3
    c042:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c046:	bf18      	it	ne
    c048:	3203      	addne	r2, #3
    c04a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c04e:	bf18      	it	ne
    c050:	3203      	addne	r2, #3
    c052:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c056:	f1c2 0320 	rsb	r3, r2, #32
    c05a:	fa00 fc03 	lsl.w	ip, r0, r3
    c05e:	fa20 f002 	lsr.w	r0, r0, r2
    c062:	fa01 fe03 	lsl.w	lr, r1, r3
    c066:	ea40 000e 	orr.w	r0, r0, lr
    c06a:	fa21 f102 	lsr.w	r1, r1, r2
    c06e:	4414      	add	r4, r2
    c070:	e6c1      	b.n	bdf6 <__adddf3+0xe6>
    c072:	bf00      	nop

0000c074 <__aeabi_dmul>:
    c074:	b570      	push	{r4, r5, r6, lr}
    c076:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c07a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c07e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c082:	bf1d      	ittte	ne
    c084:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c088:	ea94 0f0c 	teqne	r4, ip
    c08c:	ea95 0f0c 	teqne	r5, ip
    c090:	f000 f8de 	bleq	c250 <__aeabi_dmul+0x1dc>
    c094:	442c      	add	r4, r5
    c096:	ea81 0603 	eor.w	r6, r1, r3
    c09a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c09e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c0a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c0a6:	bf18      	it	ne
    c0a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c0ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c0b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c0b4:	d038      	beq.n	c128 <__aeabi_dmul+0xb4>
    c0b6:	fba0 ce02 	umull	ip, lr, r0, r2
    c0ba:	f04f 0500 	mov.w	r5, #0
    c0be:	fbe1 e502 	umlal	lr, r5, r1, r2
    c0c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c0c6:	fbe0 e503 	umlal	lr, r5, r0, r3
    c0ca:	f04f 0600 	mov.w	r6, #0
    c0ce:	fbe1 5603 	umlal	r5, r6, r1, r3
    c0d2:	f09c 0f00 	teq	ip, #0
    c0d6:	bf18      	it	ne
    c0d8:	f04e 0e01 	orrne.w	lr, lr, #1
    c0dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c0e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c0e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c0e8:	d204      	bcs.n	c0f4 <__aeabi_dmul+0x80>
    c0ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c0ee:	416d      	adcs	r5, r5
    c0f0:	eb46 0606 	adc.w	r6, r6, r6
    c0f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c0f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c0fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c100:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c104:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c108:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c10c:	bf88      	it	hi
    c10e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c112:	d81e      	bhi.n	c152 <__aeabi_dmul+0xde>
    c114:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c118:	bf08      	it	eq
    c11a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c11e:	f150 0000 	adcs.w	r0, r0, #0
    c122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c126:	bd70      	pop	{r4, r5, r6, pc}
    c128:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c12c:	ea46 0101 	orr.w	r1, r6, r1
    c130:	ea40 0002 	orr.w	r0, r0, r2
    c134:	ea81 0103 	eor.w	r1, r1, r3
    c138:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c13c:	bfc2      	ittt	gt
    c13e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c146:	bd70      	popgt	{r4, r5, r6, pc}
    c148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c14c:	f04f 0e00 	mov.w	lr, #0
    c150:	3c01      	subs	r4, #1
    c152:	f300 80ab 	bgt.w	c2ac <__aeabi_dmul+0x238>
    c156:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c15a:	bfde      	ittt	le
    c15c:	2000      	movle	r0, #0
    c15e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c162:	bd70      	pople	{r4, r5, r6, pc}
    c164:	f1c4 0400 	rsb	r4, r4, #0
    c168:	3c20      	subs	r4, #32
    c16a:	da35      	bge.n	c1d8 <__aeabi_dmul+0x164>
    c16c:	340c      	adds	r4, #12
    c16e:	dc1b      	bgt.n	c1a8 <__aeabi_dmul+0x134>
    c170:	f104 0414 	add.w	r4, r4, #20
    c174:	f1c4 0520 	rsb	r5, r4, #32
    c178:	fa00 f305 	lsl.w	r3, r0, r5
    c17c:	fa20 f004 	lsr.w	r0, r0, r4
    c180:	fa01 f205 	lsl.w	r2, r1, r5
    c184:	ea40 0002 	orr.w	r0, r0, r2
    c188:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c18c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c190:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c194:	fa21 f604 	lsr.w	r6, r1, r4
    c198:	eb42 0106 	adc.w	r1, r2, r6
    c19c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c1a0:	bf08      	it	eq
    c1a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c1a6:	bd70      	pop	{r4, r5, r6, pc}
    c1a8:	f1c4 040c 	rsb	r4, r4, #12
    c1ac:	f1c4 0520 	rsb	r5, r4, #32
    c1b0:	fa00 f304 	lsl.w	r3, r0, r4
    c1b4:	fa20 f005 	lsr.w	r0, r0, r5
    c1b8:	fa01 f204 	lsl.w	r2, r1, r4
    c1bc:	ea40 0002 	orr.w	r0, r0, r2
    c1c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c1c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c1c8:	f141 0100 	adc.w	r1, r1, #0
    c1cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c1d0:	bf08      	it	eq
    c1d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c1d6:	bd70      	pop	{r4, r5, r6, pc}
    c1d8:	f1c4 0520 	rsb	r5, r4, #32
    c1dc:	fa00 f205 	lsl.w	r2, r0, r5
    c1e0:	ea4e 0e02 	orr.w	lr, lr, r2
    c1e4:	fa20 f304 	lsr.w	r3, r0, r4
    c1e8:	fa01 f205 	lsl.w	r2, r1, r5
    c1ec:	ea43 0302 	orr.w	r3, r3, r2
    c1f0:	fa21 f004 	lsr.w	r0, r1, r4
    c1f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c1f8:	fa21 f204 	lsr.w	r2, r1, r4
    c1fc:	ea20 0002 	bic.w	r0, r0, r2
    c200:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c208:	bf08      	it	eq
    c20a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c20e:	bd70      	pop	{r4, r5, r6, pc}
    c210:	f094 0f00 	teq	r4, #0
    c214:	d10f      	bne.n	c236 <__aeabi_dmul+0x1c2>
    c216:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c21a:	0040      	lsls	r0, r0, #1
    c21c:	eb41 0101 	adc.w	r1, r1, r1
    c220:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c224:	bf08      	it	eq
    c226:	3c01      	subeq	r4, #1
    c228:	d0f7      	beq.n	c21a <__aeabi_dmul+0x1a6>
    c22a:	ea41 0106 	orr.w	r1, r1, r6
    c22e:	f095 0f00 	teq	r5, #0
    c232:	bf18      	it	ne
    c234:	4770      	bxne	lr
    c236:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c23a:	0052      	lsls	r2, r2, #1
    c23c:	eb43 0303 	adc.w	r3, r3, r3
    c240:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c244:	bf08      	it	eq
    c246:	3d01      	subeq	r5, #1
    c248:	d0f7      	beq.n	c23a <__aeabi_dmul+0x1c6>
    c24a:	ea43 0306 	orr.w	r3, r3, r6
    c24e:	4770      	bx	lr
    c250:	ea94 0f0c 	teq	r4, ip
    c254:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c258:	bf18      	it	ne
    c25a:	ea95 0f0c 	teqne	r5, ip
    c25e:	d00c      	beq.n	c27a <__aeabi_dmul+0x206>
    c260:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c264:	bf18      	it	ne
    c266:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c26a:	d1d1      	bne.n	c210 <__aeabi_dmul+0x19c>
    c26c:	ea81 0103 	eor.w	r1, r1, r3
    c270:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c274:	f04f 0000 	mov.w	r0, #0
    c278:	bd70      	pop	{r4, r5, r6, pc}
    c27a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c27e:	bf06      	itte	eq
    c280:	4610      	moveq	r0, r2
    c282:	4619      	moveq	r1, r3
    c284:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c288:	d019      	beq.n	c2be <__aeabi_dmul+0x24a>
    c28a:	ea94 0f0c 	teq	r4, ip
    c28e:	d102      	bne.n	c296 <__aeabi_dmul+0x222>
    c290:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c294:	d113      	bne.n	c2be <__aeabi_dmul+0x24a>
    c296:	ea95 0f0c 	teq	r5, ip
    c29a:	d105      	bne.n	c2a8 <__aeabi_dmul+0x234>
    c29c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c2a0:	bf1c      	itt	ne
    c2a2:	4610      	movne	r0, r2
    c2a4:	4619      	movne	r1, r3
    c2a6:	d10a      	bne.n	c2be <__aeabi_dmul+0x24a>
    c2a8:	ea81 0103 	eor.w	r1, r1, r3
    c2ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c2b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c2b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2b8:	f04f 0000 	mov.w	r0, #0
    c2bc:	bd70      	pop	{r4, r5, r6, pc}
    c2be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c2c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c2c6:	bd70      	pop	{r4, r5, r6, pc}

0000c2c8 <__aeabi_ddiv>:
    c2c8:	b570      	push	{r4, r5, r6, lr}
    c2ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c2ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c2d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c2d6:	bf1d      	ittte	ne
    c2d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c2dc:	ea94 0f0c 	teqne	r4, ip
    c2e0:	ea95 0f0c 	teqne	r5, ip
    c2e4:	f000 f8a7 	bleq	c436 <__aeabi_ddiv+0x16e>
    c2e8:	eba4 0405 	sub.w	r4, r4, r5
    c2ec:	ea81 0e03 	eor.w	lr, r1, r3
    c2f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c2f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2f8:	f000 8088 	beq.w	c40c <__aeabi_ddiv+0x144>
    c2fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c300:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c304:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c308:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c30c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c310:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c314:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c318:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c31c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c320:	429d      	cmp	r5, r3
    c322:	bf08      	it	eq
    c324:	4296      	cmpeq	r6, r2
    c326:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c32a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c32e:	d202      	bcs.n	c336 <__aeabi_ddiv+0x6e>
    c330:	085b      	lsrs	r3, r3, #1
    c332:	ea4f 0232 	mov.w	r2, r2, rrx
    c336:	1ab6      	subs	r6, r6, r2
    c338:	eb65 0503 	sbc.w	r5, r5, r3
    c33c:	085b      	lsrs	r3, r3, #1
    c33e:	ea4f 0232 	mov.w	r2, r2, rrx
    c342:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c346:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c34a:	ebb6 0e02 	subs.w	lr, r6, r2
    c34e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c352:	bf22      	ittt	cs
    c354:	1ab6      	subcs	r6, r6, r2
    c356:	4675      	movcs	r5, lr
    c358:	ea40 000c 	orrcs.w	r0, r0, ip
    c35c:	085b      	lsrs	r3, r3, #1
    c35e:	ea4f 0232 	mov.w	r2, r2, rrx
    c362:	ebb6 0e02 	subs.w	lr, r6, r2
    c366:	eb75 0e03 	sbcs.w	lr, r5, r3
    c36a:	bf22      	ittt	cs
    c36c:	1ab6      	subcs	r6, r6, r2
    c36e:	4675      	movcs	r5, lr
    c370:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c374:	085b      	lsrs	r3, r3, #1
    c376:	ea4f 0232 	mov.w	r2, r2, rrx
    c37a:	ebb6 0e02 	subs.w	lr, r6, r2
    c37e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c382:	bf22      	ittt	cs
    c384:	1ab6      	subcs	r6, r6, r2
    c386:	4675      	movcs	r5, lr
    c388:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c38c:	085b      	lsrs	r3, r3, #1
    c38e:	ea4f 0232 	mov.w	r2, r2, rrx
    c392:	ebb6 0e02 	subs.w	lr, r6, r2
    c396:	eb75 0e03 	sbcs.w	lr, r5, r3
    c39a:	bf22      	ittt	cs
    c39c:	1ab6      	subcs	r6, r6, r2
    c39e:	4675      	movcs	r5, lr
    c3a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c3a4:	ea55 0e06 	orrs.w	lr, r5, r6
    c3a8:	d018      	beq.n	c3dc <__aeabi_ddiv+0x114>
    c3aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c3ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c3b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c3b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c3ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c3be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c3c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c3c6:	d1c0      	bne.n	c34a <__aeabi_ddiv+0x82>
    c3c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3cc:	d10b      	bne.n	c3e6 <__aeabi_ddiv+0x11e>
    c3ce:	ea41 0100 	orr.w	r1, r1, r0
    c3d2:	f04f 0000 	mov.w	r0, #0
    c3d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c3da:	e7b6      	b.n	c34a <__aeabi_ddiv+0x82>
    c3dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3e0:	bf04      	itt	eq
    c3e2:	4301      	orreq	r1, r0
    c3e4:	2000      	moveq	r0, #0
    c3e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c3ea:	bf88      	it	hi
    c3ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c3f0:	f63f aeaf 	bhi.w	c152 <__aeabi_dmul+0xde>
    c3f4:	ebb5 0c03 	subs.w	ip, r5, r3
    c3f8:	bf04      	itt	eq
    c3fa:	ebb6 0c02 	subseq.w	ip, r6, r2
    c3fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c402:	f150 0000 	adcs.w	r0, r0, #0
    c406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c40a:	bd70      	pop	{r4, r5, r6, pc}
    c40c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c410:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c414:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c418:	bfc2      	ittt	gt
    c41a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c41e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c422:	bd70      	popgt	{r4, r5, r6, pc}
    c424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c428:	f04f 0e00 	mov.w	lr, #0
    c42c:	3c01      	subs	r4, #1
    c42e:	e690      	b.n	c152 <__aeabi_dmul+0xde>
    c430:	ea45 0e06 	orr.w	lr, r5, r6
    c434:	e68d      	b.n	c152 <__aeabi_dmul+0xde>
    c436:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c43a:	ea94 0f0c 	teq	r4, ip
    c43e:	bf08      	it	eq
    c440:	ea95 0f0c 	teqeq	r5, ip
    c444:	f43f af3b 	beq.w	c2be <__aeabi_dmul+0x24a>
    c448:	ea94 0f0c 	teq	r4, ip
    c44c:	d10a      	bne.n	c464 <__aeabi_ddiv+0x19c>
    c44e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c452:	f47f af34 	bne.w	c2be <__aeabi_dmul+0x24a>
    c456:	ea95 0f0c 	teq	r5, ip
    c45a:	f47f af25 	bne.w	c2a8 <__aeabi_dmul+0x234>
    c45e:	4610      	mov	r0, r2
    c460:	4619      	mov	r1, r3
    c462:	e72c      	b.n	c2be <__aeabi_dmul+0x24a>
    c464:	ea95 0f0c 	teq	r5, ip
    c468:	d106      	bne.n	c478 <__aeabi_ddiv+0x1b0>
    c46a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c46e:	f43f aefd 	beq.w	c26c <__aeabi_dmul+0x1f8>
    c472:	4610      	mov	r0, r2
    c474:	4619      	mov	r1, r3
    c476:	e722      	b.n	c2be <__aeabi_dmul+0x24a>
    c478:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c47c:	bf18      	it	ne
    c47e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c482:	f47f aec5 	bne.w	c210 <__aeabi_dmul+0x19c>
    c486:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c48a:	f47f af0d 	bne.w	c2a8 <__aeabi_dmul+0x234>
    c48e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c492:	f47f aeeb 	bne.w	c26c <__aeabi_dmul+0x1f8>
    c496:	e712      	b.n	c2be <__aeabi_dmul+0x24a>

0000c498 <__aeabi_d2uiz>:
    c498:	004a      	lsls	r2, r1, #1
    c49a:	d211      	bcs.n	c4c0 <__aeabi_d2uiz+0x28>
    c49c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c4a0:	d211      	bcs.n	c4c6 <__aeabi_d2uiz+0x2e>
    c4a2:	d50d      	bpl.n	c4c0 <__aeabi_d2uiz+0x28>
    c4a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c4a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c4ac:	d40e      	bmi.n	c4cc <__aeabi_d2uiz+0x34>
    c4ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c4b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c4ba:	fa23 f002 	lsr.w	r0, r3, r2
    c4be:	4770      	bx	lr
    c4c0:	f04f 0000 	mov.w	r0, #0
    c4c4:	4770      	bx	lr
    c4c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c4ca:	d102      	bne.n	c4d2 <__aeabi_d2uiz+0x3a>
    c4cc:	f04f 30ff 	mov.w	r0, #4294967295
    c4d0:	4770      	bx	lr
    c4d2:	f04f 0000 	mov.w	r0, #0
    c4d6:	4770      	bx	lr

0000c4d8 <__libc_init_array>:
    c4d8:	b570      	push	{r4, r5, r6, lr}
    c4da:	4e0d      	ldr	r6, [pc, #52]	; (c510 <__libc_init_array+0x38>)
    c4dc:	4c0d      	ldr	r4, [pc, #52]	; (c514 <__libc_init_array+0x3c>)
    c4de:	1ba4      	subs	r4, r4, r6
    c4e0:	10a4      	asrs	r4, r4, #2
    c4e2:	2500      	movs	r5, #0
    c4e4:	42a5      	cmp	r5, r4
    c4e6:	d109      	bne.n	c4fc <__libc_init_array+0x24>
    c4e8:	4e0b      	ldr	r6, [pc, #44]	; (c518 <__libc_init_array+0x40>)
    c4ea:	4c0c      	ldr	r4, [pc, #48]	; (c51c <__libc_init_array+0x44>)
    c4ec:	f002 f8d2 	bl	e694 <_init>
    c4f0:	1ba4      	subs	r4, r4, r6
    c4f2:	10a4      	asrs	r4, r4, #2
    c4f4:	2500      	movs	r5, #0
    c4f6:	42a5      	cmp	r5, r4
    c4f8:	d105      	bne.n	c506 <__libc_init_array+0x2e>
    c4fa:	bd70      	pop	{r4, r5, r6, pc}
    c4fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c500:	4798      	blx	r3
    c502:	3501      	adds	r5, #1
    c504:	e7ee      	b.n	c4e4 <__libc_init_array+0xc>
    c506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c50a:	4798      	blx	r3
    c50c:	3501      	adds	r5, #1
    c50e:	e7f2      	b.n	c4f6 <__libc_init_array+0x1e>
    c510:	0000e6a0 	.word	0x0000e6a0
    c514:	0000e6a0 	.word	0x0000e6a0
    c518:	0000e6a0 	.word	0x0000e6a0
    c51c:	0000e6a4 	.word	0x0000e6a4

0000c520 <malloc>:
    c520:	4b02      	ldr	r3, [pc, #8]	; (c52c <malloc+0xc>)
    c522:	4601      	mov	r1, r0
    c524:	6818      	ldr	r0, [r3, #0]
    c526:	f000 b865 	b.w	c5f4 <_malloc_r>
    c52a:	bf00      	nop
    c52c:	20000558 	.word	0x20000558

0000c530 <memcpy>:
    c530:	b510      	push	{r4, lr}
    c532:	1e43      	subs	r3, r0, #1
    c534:	440a      	add	r2, r1
    c536:	4291      	cmp	r1, r2
    c538:	d100      	bne.n	c53c <memcpy+0xc>
    c53a:	bd10      	pop	{r4, pc}
    c53c:	f811 4b01 	ldrb.w	r4, [r1], #1
    c540:	f803 4f01 	strb.w	r4, [r3, #1]!
    c544:	e7f7      	b.n	c536 <memcpy+0x6>

0000c546 <memset>:
    c546:	4402      	add	r2, r0
    c548:	4603      	mov	r3, r0
    c54a:	4293      	cmp	r3, r2
    c54c:	d100      	bne.n	c550 <memset+0xa>
    c54e:	4770      	bx	lr
    c550:	f803 1b01 	strb.w	r1, [r3], #1
    c554:	e7f9      	b.n	c54a <memset+0x4>
	...

0000c558 <_free_r>:
    c558:	b538      	push	{r3, r4, r5, lr}
    c55a:	4605      	mov	r5, r0
    c55c:	2900      	cmp	r1, #0
    c55e:	d045      	beq.n	c5ec <_free_r+0x94>
    c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c564:	1f0c      	subs	r4, r1, #4
    c566:	2b00      	cmp	r3, #0
    c568:	bfb8      	it	lt
    c56a:	18e4      	addlt	r4, r4, r3
    c56c:	f000 fcae 	bl	cecc <__malloc_lock>
    c570:	4a1f      	ldr	r2, [pc, #124]	; (c5f0 <_free_r+0x98>)
    c572:	6813      	ldr	r3, [r2, #0]
    c574:	4610      	mov	r0, r2
    c576:	b933      	cbnz	r3, c586 <_free_r+0x2e>
    c578:	6063      	str	r3, [r4, #4]
    c57a:	6014      	str	r4, [r2, #0]
    c57c:	4628      	mov	r0, r5
    c57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c582:	f000 bca4 	b.w	cece <__malloc_unlock>
    c586:	42a3      	cmp	r3, r4
    c588:	d90c      	bls.n	c5a4 <_free_r+0x4c>
    c58a:	6821      	ldr	r1, [r4, #0]
    c58c:	1862      	adds	r2, r4, r1
    c58e:	4293      	cmp	r3, r2
    c590:	bf04      	itt	eq
    c592:	681a      	ldreq	r2, [r3, #0]
    c594:	685b      	ldreq	r3, [r3, #4]
    c596:	6063      	str	r3, [r4, #4]
    c598:	bf04      	itt	eq
    c59a:	1852      	addeq	r2, r2, r1
    c59c:	6022      	streq	r2, [r4, #0]
    c59e:	6004      	str	r4, [r0, #0]
    c5a0:	e7ec      	b.n	c57c <_free_r+0x24>
    c5a2:	4613      	mov	r3, r2
    c5a4:	685a      	ldr	r2, [r3, #4]
    c5a6:	b10a      	cbz	r2, c5ac <_free_r+0x54>
    c5a8:	42a2      	cmp	r2, r4
    c5aa:	d9fa      	bls.n	c5a2 <_free_r+0x4a>
    c5ac:	6819      	ldr	r1, [r3, #0]
    c5ae:	1858      	adds	r0, r3, r1
    c5b0:	42a0      	cmp	r0, r4
    c5b2:	d10b      	bne.n	c5cc <_free_r+0x74>
    c5b4:	6820      	ldr	r0, [r4, #0]
    c5b6:	4401      	add	r1, r0
    c5b8:	1858      	adds	r0, r3, r1
    c5ba:	4282      	cmp	r2, r0
    c5bc:	6019      	str	r1, [r3, #0]
    c5be:	d1dd      	bne.n	c57c <_free_r+0x24>
    c5c0:	6810      	ldr	r0, [r2, #0]
    c5c2:	6852      	ldr	r2, [r2, #4]
    c5c4:	605a      	str	r2, [r3, #4]
    c5c6:	4401      	add	r1, r0
    c5c8:	6019      	str	r1, [r3, #0]
    c5ca:	e7d7      	b.n	c57c <_free_r+0x24>
    c5cc:	d902      	bls.n	c5d4 <_free_r+0x7c>
    c5ce:	230c      	movs	r3, #12
    c5d0:	602b      	str	r3, [r5, #0]
    c5d2:	e7d3      	b.n	c57c <_free_r+0x24>
    c5d4:	6820      	ldr	r0, [r4, #0]
    c5d6:	1821      	adds	r1, r4, r0
    c5d8:	428a      	cmp	r2, r1
    c5da:	bf04      	itt	eq
    c5dc:	6811      	ldreq	r1, [r2, #0]
    c5de:	6852      	ldreq	r2, [r2, #4]
    c5e0:	6062      	str	r2, [r4, #4]
    c5e2:	bf04      	itt	eq
    c5e4:	1809      	addeq	r1, r1, r0
    c5e6:	6021      	streq	r1, [r4, #0]
    c5e8:	605c      	str	r4, [r3, #4]
    c5ea:	e7c7      	b.n	c57c <_free_r+0x24>
    c5ec:	bd38      	pop	{r3, r4, r5, pc}
    c5ee:	bf00      	nop
    c5f0:	20000eb4 	.word	0x20000eb4

0000c5f4 <_malloc_r>:
    c5f4:	b570      	push	{r4, r5, r6, lr}
    c5f6:	1ccd      	adds	r5, r1, #3
    c5f8:	f025 0503 	bic.w	r5, r5, #3
    c5fc:	3508      	adds	r5, #8
    c5fe:	2d0c      	cmp	r5, #12
    c600:	bf38      	it	cc
    c602:	250c      	movcc	r5, #12
    c604:	2d00      	cmp	r5, #0
    c606:	4606      	mov	r6, r0
    c608:	db01      	blt.n	c60e <_malloc_r+0x1a>
    c60a:	42a9      	cmp	r1, r5
    c60c:	d903      	bls.n	c616 <_malloc_r+0x22>
    c60e:	230c      	movs	r3, #12
    c610:	6033      	str	r3, [r6, #0]
    c612:	2000      	movs	r0, #0
    c614:	bd70      	pop	{r4, r5, r6, pc}
    c616:	f000 fc59 	bl	cecc <__malloc_lock>
    c61a:	4a23      	ldr	r2, [pc, #140]	; (c6a8 <_malloc_r+0xb4>)
    c61c:	6814      	ldr	r4, [r2, #0]
    c61e:	4621      	mov	r1, r4
    c620:	b991      	cbnz	r1, c648 <_malloc_r+0x54>
    c622:	4c22      	ldr	r4, [pc, #136]	; (c6ac <_malloc_r+0xb8>)
    c624:	6823      	ldr	r3, [r4, #0]
    c626:	b91b      	cbnz	r3, c630 <_malloc_r+0x3c>
    c628:	4630      	mov	r0, r6
    c62a:	f000 f8bd 	bl	c7a8 <_sbrk_r>
    c62e:	6020      	str	r0, [r4, #0]
    c630:	4629      	mov	r1, r5
    c632:	4630      	mov	r0, r6
    c634:	f000 f8b8 	bl	c7a8 <_sbrk_r>
    c638:	1c43      	adds	r3, r0, #1
    c63a:	d126      	bne.n	c68a <_malloc_r+0x96>
    c63c:	230c      	movs	r3, #12
    c63e:	6033      	str	r3, [r6, #0]
    c640:	4630      	mov	r0, r6
    c642:	f000 fc44 	bl	cece <__malloc_unlock>
    c646:	e7e4      	b.n	c612 <_malloc_r+0x1e>
    c648:	680b      	ldr	r3, [r1, #0]
    c64a:	1b5b      	subs	r3, r3, r5
    c64c:	d41a      	bmi.n	c684 <_malloc_r+0x90>
    c64e:	2b0b      	cmp	r3, #11
    c650:	d90f      	bls.n	c672 <_malloc_r+0x7e>
    c652:	600b      	str	r3, [r1, #0]
    c654:	50cd      	str	r5, [r1, r3]
    c656:	18cc      	adds	r4, r1, r3
    c658:	4630      	mov	r0, r6
    c65a:	f000 fc38 	bl	cece <__malloc_unlock>
    c65e:	f104 000b 	add.w	r0, r4, #11
    c662:	1d23      	adds	r3, r4, #4
    c664:	f020 0007 	bic.w	r0, r0, #7
    c668:	1ac3      	subs	r3, r0, r3
    c66a:	d01b      	beq.n	c6a4 <_malloc_r+0xb0>
    c66c:	425a      	negs	r2, r3
    c66e:	50e2      	str	r2, [r4, r3]
    c670:	bd70      	pop	{r4, r5, r6, pc}
    c672:	428c      	cmp	r4, r1
    c674:	bf0d      	iteet	eq
    c676:	6863      	ldreq	r3, [r4, #4]
    c678:	684b      	ldrne	r3, [r1, #4]
    c67a:	6063      	strne	r3, [r4, #4]
    c67c:	6013      	streq	r3, [r2, #0]
    c67e:	bf18      	it	ne
    c680:	460c      	movne	r4, r1
    c682:	e7e9      	b.n	c658 <_malloc_r+0x64>
    c684:	460c      	mov	r4, r1
    c686:	6849      	ldr	r1, [r1, #4]
    c688:	e7ca      	b.n	c620 <_malloc_r+0x2c>
    c68a:	1cc4      	adds	r4, r0, #3
    c68c:	f024 0403 	bic.w	r4, r4, #3
    c690:	42a0      	cmp	r0, r4
    c692:	d005      	beq.n	c6a0 <_malloc_r+0xac>
    c694:	1a21      	subs	r1, r4, r0
    c696:	4630      	mov	r0, r6
    c698:	f000 f886 	bl	c7a8 <_sbrk_r>
    c69c:	3001      	adds	r0, #1
    c69e:	d0cd      	beq.n	c63c <_malloc_r+0x48>
    c6a0:	6025      	str	r5, [r4, #0]
    c6a2:	e7d9      	b.n	c658 <_malloc_r+0x64>
    c6a4:	bd70      	pop	{r4, r5, r6, pc}
    c6a6:	bf00      	nop
    c6a8:	20000eb4 	.word	0x20000eb4
    c6ac:	20000eb8 	.word	0x20000eb8

0000c6b0 <iprintf>:
    c6b0:	b40f      	push	{r0, r1, r2, r3}
    c6b2:	4b0a      	ldr	r3, [pc, #40]	; (c6dc <iprintf+0x2c>)
    c6b4:	b513      	push	{r0, r1, r4, lr}
    c6b6:	681c      	ldr	r4, [r3, #0]
    c6b8:	b124      	cbz	r4, c6c4 <iprintf+0x14>
    c6ba:	69a3      	ldr	r3, [r4, #24]
    c6bc:	b913      	cbnz	r3, c6c4 <iprintf+0x14>
    c6be:	4620      	mov	r0, r4
    c6c0:	f000 fb16 	bl	ccf0 <__sinit>
    c6c4:	ab05      	add	r3, sp, #20
    c6c6:	9a04      	ldr	r2, [sp, #16]
    c6c8:	68a1      	ldr	r1, [r4, #8]
    c6ca:	9301      	str	r3, [sp, #4]
    c6cc:	4620      	mov	r0, r4
    c6ce:	f000 fd77 	bl	d1c0 <_vfiprintf_r>
    c6d2:	b002      	add	sp, #8
    c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6d8:	b004      	add	sp, #16
    c6da:	4770      	bx	lr
    c6dc:	20000558 	.word	0x20000558

0000c6e0 <_puts_r>:
    c6e0:	b570      	push	{r4, r5, r6, lr}
    c6e2:	460e      	mov	r6, r1
    c6e4:	4605      	mov	r5, r0
    c6e6:	b118      	cbz	r0, c6f0 <_puts_r+0x10>
    c6e8:	6983      	ldr	r3, [r0, #24]
    c6ea:	b90b      	cbnz	r3, c6f0 <_puts_r+0x10>
    c6ec:	f000 fb00 	bl	ccf0 <__sinit>
    c6f0:	69ab      	ldr	r3, [r5, #24]
    c6f2:	68ac      	ldr	r4, [r5, #8]
    c6f4:	b913      	cbnz	r3, c6fc <_puts_r+0x1c>
    c6f6:	4628      	mov	r0, r5
    c6f8:	f000 fafa 	bl	ccf0 <__sinit>
    c6fc:	4b23      	ldr	r3, [pc, #140]	; (c78c <_puts_r+0xac>)
    c6fe:	429c      	cmp	r4, r3
    c700:	d117      	bne.n	c732 <_puts_r+0x52>
    c702:	686c      	ldr	r4, [r5, #4]
    c704:	89a3      	ldrh	r3, [r4, #12]
    c706:	071b      	lsls	r3, r3, #28
    c708:	d51d      	bpl.n	c746 <_puts_r+0x66>
    c70a:	6923      	ldr	r3, [r4, #16]
    c70c:	b1db      	cbz	r3, c746 <_puts_r+0x66>
    c70e:	3e01      	subs	r6, #1
    c710:	68a3      	ldr	r3, [r4, #8]
    c712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    c716:	3b01      	subs	r3, #1
    c718:	60a3      	str	r3, [r4, #8]
    c71a:	b9e9      	cbnz	r1, c758 <_puts_r+0x78>
    c71c:	2b00      	cmp	r3, #0
    c71e:	da2e      	bge.n	c77e <_puts_r+0x9e>
    c720:	4622      	mov	r2, r4
    c722:	210a      	movs	r1, #10
    c724:	4628      	mov	r0, r5
    c726:	f000 f931 	bl	c98c <__swbuf_r>
    c72a:	3001      	adds	r0, #1
    c72c:	d011      	beq.n	c752 <_puts_r+0x72>
    c72e:	200a      	movs	r0, #10
    c730:	bd70      	pop	{r4, r5, r6, pc}
    c732:	4b17      	ldr	r3, [pc, #92]	; (c790 <_puts_r+0xb0>)
    c734:	429c      	cmp	r4, r3
    c736:	d101      	bne.n	c73c <_puts_r+0x5c>
    c738:	68ac      	ldr	r4, [r5, #8]
    c73a:	e7e3      	b.n	c704 <_puts_r+0x24>
    c73c:	4b15      	ldr	r3, [pc, #84]	; (c794 <_puts_r+0xb4>)
    c73e:	429c      	cmp	r4, r3
    c740:	bf08      	it	eq
    c742:	68ec      	ldreq	r4, [r5, #12]
    c744:	e7de      	b.n	c704 <_puts_r+0x24>
    c746:	4621      	mov	r1, r4
    c748:	4628      	mov	r0, r5
    c74a:	f000 f971 	bl	ca30 <__swsetup_r>
    c74e:	2800      	cmp	r0, #0
    c750:	d0dd      	beq.n	c70e <_puts_r+0x2e>
    c752:	f04f 30ff 	mov.w	r0, #4294967295
    c756:	bd70      	pop	{r4, r5, r6, pc}
    c758:	2b00      	cmp	r3, #0
    c75a:	da04      	bge.n	c766 <_puts_r+0x86>
    c75c:	69a2      	ldr	r2, [r4, #24]
    c75e:	4293      	cmp	r3, r2
    c760:	db06      	blt.n	c770 <_puts_r+0x90>
    c762:	290a      	cmp	r1, #10
    c764:	d004      	beq.n	c770 <_puts_r+0x90>
    c766:	6823      	ldr	r3, [r4, #0]
    c768:	1c5a      	adds	r2, r3, #1
    c76a:	6022      	str	r2, [r4, #0]
    c76c:	7019      	strb	r1, [r3, #0]
    c76e:	e7cf      	b.n	c710 <_puts_r+0x30>
    c770:	4622      	mov	r2, r4
    c772:	4628      	mov	r0, r5
    c774:	f000 f90a 	bl	c98c <__swbuf_r>
    c778:	3001      	adds	r0, #1
    c77a:	d1c9      	bne.n	c710 <_puts_r+0x30>
    c77c:	e7e9      	b.n	c752 <_puts_r+0x72>
    c77e:	6823      	ldr	r3, [r4, #0]
    c780:	200a      	movs	r0, #10
    c782:	1c5a      	adds	r2, r3, #1
    c784:	6022      	str	r2, [r4, #0]
    c786:	7018      	strb	r0, [r3, #0]
    c788:	bd70      	pop	{r4, r5, r6, pc}
    c78a:	bf00      	nop
    c78c:	0000e620 	.word	0x0000e620
    c790:	0000e640 	.word	0x0000e640
    c794:	0000e600 	.word	0x0000e600

0000c798 <puts>:
    c798:	4b02      	ldr	r3, [pc, #8]	; (c7a4 <puts+0xc>)
    c79a:	4601      	mov	r1, r0
    c79c:	6818      	ldr	r0, [r3, #0]
    c79e:	f7ff bf9f 	b.w	c6e0 <_puts_r>
    c7a2:	bf00      	nop
    c7a4:	20000558 	.word	0x20000558

0000c7a8 <_sbrk_r>:
    c7a8:	b538      	push	{r3, r4, r5, lr}
    c7aa:	4c06      	ldr	r4, [pc, #24]	; (c7c4 <_sbrk_r+0x1c>)
    c7ac:	2300      	movs	r3, #0
    c7ae:	4605      	mov	r5, r0
    c7b0:	4608      	mov	r0, r1
    c7b2:	6023      	str	r3, [r4, #0]
    c7b4:	f7f9 fcc0 	bl	6138 <_sbrk>
    c7b8:	1c43      	adds	r3, r0, #1
    c7ba:	d102      	bne.n	c7c2 <_sbrk_r+0x1a>
    c7bc:	6823      	ldr	r3, [r4, #0]
    c7be:	b103      	cbz	r3, c7c2 <_sbrk_r+0x1a>
    c7c0:	602b      	str	r3, [r5, #0]
    c7c2:	bd38      	pop	{r3, r4, r5, pc}
    c7c4:	20007d50 	.word	0x20007d50

0000c7c8 <setbuf>:
    c7c8:	2900      	cmp	r1, #0
    c7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c7ce:	bf0c      	ite	eq
    c7d0:	2202      	moveq	r2, #2
    c7d2:	2200      	movne	r2, #0
    c7d4:	f000 b800 	b.w	c7d8 <setvbuf>

0000c7d8 <setvbuf>:
    c7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c7dc:	461d      	mov	r5, r3
    c7de:	4b51      	ldr	r3, [pc, #324]	; (c924 <setvbuf+0x14c>)
    c7e0:	681e      	ldr	r6, [r3, #0]
    c7e2:	4604      	mov	r4, r0
    c7e4:	460f      	mov	r7, r1
    c7e6:	4690      	mov	r8, r2
    c7e8:	b126      	cbz	r6, c7f4 <setvbuf+0x1c>
    c7ea:	69b3      	ldr	r3, [r6, #24]
    c7ec:	b913      	cbnz	r3, c7f4 <setvbuf+0x1c>
    c7ee:	4630      	mov	r0, r6
    c7f0:	f000 fa7e 	bl	ccf0 <__sinit>
    c7f4:	4b4c      	ldr	r3, [pc, #304]	; (c928 <setvbuf+0x150>)
    c7f6:	429c      	cmp	r4, r3
    c7f8:	d152      	bne.n	c8a0 <setvbuf+0xc8>
    c7fa:	6874      	ldr	r4, [r6, #4]
    c7fc:	f1b8 0f02 	cmp.w	r8, #2
    c800:	d006      	beq.n	c810 <setvbuf+0x38>
    c802:	f1b8 0f01 	cmp.w	r8, #1
    c806:	f200 8089 	bhi.w	c91c <setvbuf+0x144>
    c80a:	2d00      	cmp	r5, #0
    c80c:	f2c0 8086 	blt.w	c91c <setvbuf+0x144>
    c810:	4621      	mov	r1, r4
    c812:	4630      	mov	r0, r6
    c814:	f000 fa02 	bl	cc1c <_fflush_r>
    c818:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c81a:	b141      	cbz	r1, c82e <setvbuf+0x56>
    c81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c820:	4299      	cmp	r1, r3
    c822:	d002      	beq.n	c82a <setvbuf+0x52>
    c824:	4630      	mov	r0, r6
    c826:	f7ff fe97 	bl	c558 <_free_r>
    c82a:	2300      	movs	r3, #0
    c82c:	6363      	str	r3, [r4, #52]	; 0x34
    c82e:	2300      	movs	r3, #0
    c830:	61a3      	str	r3, [r4, #24]
    c832:	6063      	str	r3, [r4, #4]
    c834:	89a3      	ldrh	r3, [r4, #12]
    c836:	061b      	lsls	r3, r3, #24
    c838:	d503      	bpl.n	c842 <setvbuf+0x6a>
    c83a:	6921      	ldr	r1, [r4, #16]
    c83c:	4630      	mov	r0, r6
    c83e:	f7ff fe8b 	bl	c558 <_free_r>
    c842:	89a3      	ldrh	r3, [r4, #12]
    c844:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c848:	f023 0303 	bic.w	r3, r3, #3
    c84c:	f1b8 0f02 	cmp.w	r8, #2
    c850:	81a3      	strh	r3, [r4, #12]
    c852:	d05d      	beq.n	c910 <setvbuf+0x138>
    c854:	ab01      	add	r3, sp, #4
    c856:	466a      	mov	r2, sp
    c858:	4621      	mov	r1, r4
    c85a:	4630      	mov	r0, r6
    c85c:	f000 fad2 	bl	ce04 <__swhatbuf_r>
    c860:	89a3      	ldrh	r3, [r4, #12]
    c862:	4318      	orrs	r0, r3
    c864:	81a0      	strh	r0, [r4, #12]
    c866:	bb2d      	cbnz	r5, c8b4 <setvbuf+0xdc>
    c868:	9d00      	ldr	r5, [sp, #0]
    c86a:	4628      	mov	r0, r5
    c86c:	f7ff fe58 	bl	c520 <malloc>
    c870:	4607      	mov	r7, r0
    c872:	2800      	cmp	r0, #0
    c874:	d14e      	bne.n	c914 <setvbuf+0x13c>
    c876:	f8dd 9000 	ldr.w	r9, [sp]
    c87a:	45a9      	cmp	r9, r5
    c87c:	d13c      	bne.n	c8f8 <setvbuf+0x120>
    c87e:	f04f 30ff 	mov.w	r0, #4294967295
    c882:	89a3      	ldrh	r3, [r4, #12]
    c884:	f043 0302 	orr.w	r3, r3, #2
    c888:	81a3      	strh	r3, [r4, #12]
    c88a:	2300      	movs	r3, #0
    c88c:	60a3      	str	r3, [r4, #8]
    c88e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c892:	6023      	str	r3, [r4, #0]
    c894:	6123      	str	r3, [r4, #16]
    c896:	2301      	movs	r3, #1
    c898:	6163      	str	r3, [r4, #20]
    c89a:	b003      	add	sp, #12
    c89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c8a0:	4b22      	ldr	r3, [pc, #136]	; (c92c <setvbuf+0x154>)
    c8a2:	429c      	cmp	r4, r3
    c8a4:	d101      	bne.n	c8aa <setvbuf+0xd2>
    c8a6:	68b4      	ldr	r4, [r6, #8]
    c8a8:	e7a8      	b.n	c7fc <setvbuf+0x24>
    c8aa:	4b21      	ldr	r3, [pc, #132]	; (c930 <setvbuf+0x158>)
    c8ac:	429c      	cmp	r4, r3
    c8ae:	bf08      	it	eq
    c8b0:	68f4      	ldreq	r4, [r6, #12]
    c8b2:	e7a3      	b.n	c7fc <setvbuf+0x24>
    c8b4:	2f00      	cmp	r7, #0
    c8b6:	d0d8      	beq.n	c86a <setvbuf+0x92>
    c8b8:	69b3      	ldr	r3, [r6, #24]
    c8ba:	b913      	cbnz	r3, c8c2 <setvbuf+0xea>
    c8bc:	4630      	mov	r0, r6
    c8be:	f000 fa17 	bl	ccf0 <__sinit>
    c8c2:	f1b8 0f01 	cmp.w	r8, #1
    c8c6:	bf08      	it	eq
    c8c8:	89a3      	ldrheq	r3, [r4, #12]
    c8ca:	6027      	str	r7, [r4, #0]
    c8cc:	bf04      	itt	eq
    c8ce:	f043 0301 	orreq.w	r3, r3, #1
    c8d2:	81a3      	strheq	r3, [r4, #12]
    c8d4:	89a3      	ldrh	r3, [r4, #12]
    c8d6:	6127      	str	r7, [r4, #16]
    c8d8:	f013 0008 	ands.w	r0, r3, #8
    c8dc:	6165      	str	r5, [r4, #20]
    c8de:	d01b      	beq.n	c918 <setvbuf+0x140>
    c8e0:	f013 0001 	ands.w	r0, r3, #1
    c8e4:	bf18      	it	ne
    c8e6:	426d      	negne	r5, r5
    c8e8:	f04f 0300 	mov.w	r3, #0
    c8ec:	bf1d      	ittte	ne
    c8ee:	60a3      	strne	r3, [r4, #8]
    c8f0:	61a5      	strne	r5, [r4, #24]
    c8f2:	4618      	movne	r0, r3
    c8f4:	60a5      	streq	r5, [r4, #8]
    c8f6:	e7d0      	b.n	c89a <setvbuf+0xc2>
    c8f8:	4648      	mov	r0, r9
    c8fa:	f7ff fe11 	bl	c520 <malloc>
    c8fe:	4607      	mov	r7, r0
    c900:	2800      	cmp	r0, #0
    c902:	d0bc      	beq.n	c87e <setvbuf+0xa6>
    c904:	89a3      	ldrh	r3, [r4, #12]
    c906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c90a:	81a3      	strh	r3, [r4, #12]
    c90c:	464d      	mov	r5, r9
    c90e:	e7d3      	b.n	c8b8 <setvbuf+0xe0>
    c910:	2000      	movs	r0, #0
    c912:	e7b6      	b.n	c882 <setvbuf+0xaa>
    c914:	46a9      	mov	r9, r5
    c916:	e7f5      	b.n	c904 <setvbuf+0x12c>
    c918:	60a0      	str	r0, [r4, #8]
    c91a:	e7be      	b.n	c89a <setvbuf+0xc2>
    c91c:	f04f 30ff 	mov.w	r0, #4294967295
    c920:	e7bb      	b.n	c89a <setvbuf+0xc2>
    c922:	bf00      	nop
    c924:	20000558 	.word	0x20000558
    c928:	0000e620 	.word	0x0000e620
    c92c:	0000e640 	.word	0x0000e640
    c930:	0000e600 	.word	0x0000e600

0000c934 <siprintf>:
    c934:	b40e      	push	{r1, r2, r3}
    c936:	b500      	push	{lr}
    c938:	b09c      	sub	sp, #112	; 0x70
    c93a:	f44f 7102 	mov.w	r1, #520	; 0x208
    c93e:	ab1d      	add	r3, sp, #116	; 0x74
    c940:	f8ad 1014 	strh.w	r1, [sp, #20]
    c944:	9002      	str	r0, [sp, #8]
    c946:	9006      	str	r0, [sp, #24]
    c948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c94c:	480a      	ldr	r0, [pc, #40]	; (c978 <siprintf+0x44>)
    c94e:	9104      	str	r1, [sp, #16]
    c950:	9107      	str	r1, [sp, #28]
    c952:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c956:	f853 2b04 	ldr.w	r2, [r3], #4
    c95a:	f8ad 1016 	strh.w	r1, [sp, #22]
    c95e:	6800      	ldr	r0, [r0, #0]
    c960:	9301      	str	r3, [sp, #4]
    c962:	a902      	add	r1, sp, #8
    c964:	f000 fb10 	bl	cf88 <_svfiprintf_r>
    c968:	9b02      	ldr	r3, [sp, #8]
    c96a:	2200      	movs	r2, #0
    c96c:	701a      	strb	r2, [r3, #0]
    c96e:	b01c      	add	sp, #112	; 0x70
    c970:	f85d eb04 	ldr.w	lr, [sp], #4
    c974:	b003      	add	sp, #12
    c976:	4770      	bx	lr
    c978:	20000558 	.word	0x20000558

0000c97c <strlen>:
    c97c:	4603      	mov	r3, r0
    c97e:	f813 2b01 	ldrb.w	r2, [r3], #1
    c982:	2a00      	cmp	r2, #0
    c984:	d1fb      	bne.n	c97e <strlen+0x2>
    c986:	1a18      	subs	r0, r3, r0
    c988:	3801      	subs	r0, #1
    c98a:	4770      	bx	lr

0000c98c <__swbuf_r>:
    c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c98e:	460e      	mov	r6, r1
    c990:	4614      	mov	r4, r2
    c992:	4605      	mov	r5, r0
    c994:	b118      	cbz	r0, c99e <__swbuf_r+0x12>
    c996:	6983      	ldr	r3, [r0, #24]
    c998:	b90b      	cbnz	r3, c99e <__swbuf_r+0x12>
    c99a:	f000 f9a9 	bl	ccf0 <__sinit>
    c99e:	4b21      	ldr	r3, [pc, #132]	; (ca24 <__swbuf_r+0x98>)
    c9a0:	429c      	cmp	r4, r3
    c9a2:	d12a      	bne.n	c9fa <__swbuf_r+0x6e>
    c9a4:	686c      	ldr	r4, [r5, #4]
    c9a6:	69a3      	ldr	r3, [r4, #24]
    c9a8:	60a3      	str	r3, [r4, #8]
    c9aa:	89a3      	ldrh	r3, [r4, #12]
    c9ac:	071a      	lsls	r2, r3, #28
    c9ae:	d52e      	bpl.n	ca0e <__swbuf_r+0x82>
    c9b0:	6923      	ldr	r3, [r4, #16]
    c9b2:	b363      	cbz	r3, ca0e <__swbuf_r+0x82>
    c9b4:	6923      	ldr	r3, [r4, #16]
    c9b6:	6820      	ldr	r0, [r4, #0]
    c9b8:	1ac0      	subs	r0, r0, r3
    c9ba:	6963      	ldr	r3, [r4, #20]
    c9bc:	b2f6      	uxtb	r6, r6
    c9be:	4298      	cmp	r0, r3
    c9c0:	4637      	mov	r7, r6
    c9c2:	db04      	blt.n	c9ce <__swbuf_r+0x42>
    c9c4:	4621      	mov	r1, r4
    c9c6:	4628      	mov	r0, r5
    c9c8:	f000 f928 	bl	cc1c <_fflush_r>
    c9cc:	bb28      	cbnz	r0, ca1a <__swbuf_r+0x8e>
    c9ce:	68a3      	ldr	r3, [r4, #8]
    c9d0:	3b01      	subs	r3, #1
    c9d2:	60a3      	str	r3, [r4, #8]
    c9d4:	6823      	ldr	r3, [r4, #0]
    c9d6:	1c5a      	adds	r2, r3, #1
    c9d8:	6022      	str	r2, [r4, #0]
    c9da:	701e      	strb	r6, [r3, #0]
    c9dc:	6963      	ldr	r3, [r4, #20]
    c9de:	3001      	adds	r0, #1
    c9e0:	4298      	cmp	r0, r3
    c9e2:	d004      	beq.n	c9ee <__swbuf_r+0x62>
    c9e4:	89a3      	ldrh	r3, [r4, #12]
    c9e6:	07db      	lsls	r3, r3, #31
    c9e8:	d519      	bpl.n	ca1e <__swbuf_r+0x92>
    c9ea:	2e0a      	cmp	r6, #10
    c9ec:	d117      	bne.n	ca1e <__swbuf_r+0x92>
    c9ee:	4621      	mov	r1, r4
    c9f0:	4628      	mov	r0, r5
    c9f2:	f000 f913 	bl	cc1c <_fflush_r>
    c9f6:	b190      	cbz	r0, ca1e <__swbuf_r+0x92>
    c9f8:	e00f      	b.n	ca1a <__swbuf_r+0x8e>
    c9fa:	4b0b      	ldr	r3, [pc, #44]	; (ca28 <__swbuf_r+0x9c>)
    c9fc:	429c      	cmp	r4, r3
    c9fe:	d101      	bne.n	ca04 <__swbuf_r+0x78>
    ca00:	68ac      	ldr	r4, [r5, #8]
    ca02:	e7d0      	b.n	c9a6 <__swbuf_r+0x1a>
    ca04:	4b09      	ldr	r3, [pc, #36]	; (ca2c <__swbuf_r+0xa0>)
    ca06:	429c      	cmp	r4, r3
    ca08:	bf08      	it	eq
    ca0a:	68ec      	ldreq	r4, [r5, #12]
    ca0c:	e7cb      	b.n	c9a6 <__swbuf_r+0x1a>
    ca0e:	4621      	mov	r1, r4
    ca10:	4628      	mov	r0, r5
    ca12:	f000 f80d 	bl	ca30 <__swsetup_r>
    ca16:	2800      	cmp	r0, #0
    ca18:	d0cc      	beq.n	c9b4 <__swbuf_r+0x28>
    ca1a:	f04f 37ff 	mov.w	r7, #4294967295
    ca1e:	4638      	mov	r0, r7
    ca20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca22:	bf00      	nop
    ca24:	0000e620 	.word	0x0000e620
    ca28:	0000e640 	.word	0x0000e640
    ca2c:	0000e600 	.word	0x0000e600

0000ca30 <__swsetup_r>:
    ca30:	4b32      	ldr	r3, [pc, #200]	; (cafc <__swsetup_r+0xcc>)
    ca32:	b570      	push	{r4, r5, r6, lr}
    ca34:	681d      	ldr	r5, [r3, #0]
    ca36:	4606      	mov	r6, r0
    ca38:	460c      	mov	r4, r1
    ca3a:	b125      	cbz	r5, ca46 <__swsetup_r+0x16>
    ca3c:	69ab      	ldr	r3, [r5, #24]
    ca3e:	b913      	cbnz	r3, ca46 <__swsetup_r+0x16>
    ca40:	4628      	mov	r0, r5
    ca42:	f000 f955 	bl	ccf0 <__sinit>
    ca46:	4b2e      	ldr	r3, [pc, #184]	; (cb00 <__swsetup_r+0xd0>)
    ca48:	429c      	cmp	r4, r3
    ca4a:	d10f      	bne.n	ca6c <__swsetup_r+0x3c>
    ca4c:	686c      	ldr	r4, [r5, #4]
    ca4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ca52:	b29a      	uxth	r2, r3
    ca54:	0715      	lsls	r5, r2, #28
    ca56:	d42c      	bmi.n	cab2 <__swsetup_r+0x82>
    ca58:	06d0      	lsls	r0, r2, #27
    ca5a:	d411      	bmi.n	ca80 <__swsetup_r+0x50>
    ca5c:	2209      	movs	r2, #9
    ca5e:	6032      	str	r2, [r6, #0]
    ca60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca64:	81a3      	strh	r3, [r4, #12]
    ca66:	f04f 30ff 	mov.w	r0, #4294967295
    ca6a:	bd70      	pop	{r4, r5, r6, pc}
    ca6c:	4b25      	ldr	r3, [pc, #148]	; (cb04 <__swsetup_r+0xd4>)
    ca6e:	429c      	cmp	r4, r3
    ca70:	d101      	bne.n	ca76 <__swsetup_r+0x46>
    ca72:	68ac      	ldr	r4, [r5, #8]
    ca74:	e7eb      	b.n	ca4e <__swsetup_r+0x1e>
    ca76:	4b24      	ldr	r3, [pc, #144]	; (cb08 <__swsetup_r+0xd8>)
    ca78:	429c      	cmp	r4, r3
    ca7a:	bf08      	it	eq
    ca7c:	68ec      	ldreq	r4, [r5, #12]
    ca7e:	e7e6      	b.n	ca4e <__swsetup_r+0x1e>
    ca80:	0751      	lsls	r1, r2, #29
    ca82:	d512      	bpl.n	caaa <__swsetup_r+0x7a>
    ca84:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ca86:	b141      	cbz	r1, ca9a <__swsetup_r+0x6a>
    ca88:	f104 0344 	add.w	r3, r4, #68	; 0x44
    ca8c:	4299      	cmp	r1, r3
    ca8e:	d002      	beq.n	ca96 <__swsetup_r+0x66>
    ca90:	4630      	mov	r0, r6
    ca92:	f7ff fd61 	bl	c558 <_free_r>
    ca96:	2300      	movs	r3, #0
    ca98:	6363      	str	r3, [r4, #52]	; 0x34
    ca9a:	89a3      	ldrh	r3, [r4, #12]
    ca9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    caa0:	81a3      	strh	r3, [r4, #12]
    caa2:	2300      	movs	r3, #0
    caa4:	6063      	str	r3, [r4, #4]
    caa6:	6923      	ldr	r3, [r4, #16]
    caa8:	6023      	str	r3, [r4, #0]
    caaa:	89a3      	ldrh	r3, [r4, #12]
    caac:	f043 0308 	orr.w	r3, r3, #8
    cab0:	81a3      	strh	r3, [r4, #12]
    cab2:	6923      	ldr	r3, [r4, #16]
    cab4:	b94b      	cbnz	r3, caca <__swsetup_r+0x9a>
    cab6:	89a3      	ldrh	r3, [r4, #12]
    cab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    cac0:	d003      	beq.n	caca <__swsetup_r+0x9a>
    cac2:	4621      	mov	r1, r4
    cac4:	4630      	mov	r0, r6
    cac6:	f000 f9c1 	bl	ce4c <__smakebuf_r>
    caca:	89a2      	ldrh	r2, [r4, #12]
    cacc:	f012 0301 	ands.w	r3, r2, #1
    cad0:	d00c      	beq.n	caec <__swsetup_r+0xbc>
    cad2:	2300      	movs	r3, #0
    cad4:	60a3      	str	r3, [r4, #8]
    cad6:	6963      	ldr	r3, [r4, #20]
    cad8:	425b      	negs	r3, r3
    cada:	61a3      	str	r3, [r4, #24]
    cadc:	6923      	ldr	r3, [r4, #16]
    cade:	b953      	cbnz	r3, caf6 <__swsetup_r+0xc6>
    cae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cae4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    cae8:	d1ba      	bne.n	ca60 <__swsetup_r+0x30>
    caea:	bd70      	pop	{r4, r5, r6, pc}
    caec:	0792      	lsls	r2, r2, #30
    caee:	bf58      	it	pl
    caf0:	6963      	ldrpl	r3, [r4, #20]
    caf2:	60a3      	str	r3, [r4, #8]
    caf4:	e7f2      	b.n	cadc <__swsetup_r+0xac>
    caf6:	2000      	movs	r0, #0
    caf8:	e7f7      	b.n	caea <__swsetup_r+0xba>
    cafa:	bf00      	nop
    cafc:	20000558 	.word	0x20000558
    cb00:	0000e620 	.word	0x0000e620
    cb04:	0000e640 	.word	0x0000e640
    cb08:	0000e600 	.word	0x0000e600

0000cb0c <__sflush_r>:
    cb0c:	898a      	ldrh	r2, [r1, #12]
    cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb12:	4605      	mov	r5, r0
    cb14:	0710      	lsls	r0, r2, #28
    cb16:	460c      	mov	r4, r1
    cb18:	d45a      	bmi.n	cbd0 <__sflush_r+0xc4>
    cb1a:	684b      	ldr	r3, [r1, #4]
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	dc05      	bgt.n	cb2c <__sflush_r+0x20>
    cb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    cb22:	2b00      	cmp	r3, #0
    cb24:	dc02      	bgt.n	cb2c <__sflush_r+0x20>
    cb26:	2000      	movs	r0, #0
    cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    cb2e:	2e00      	cmp	r6, #0
    cb30:	d0f9      	beq.n	cb26 <__sflush_r+0x1a>
    cb32:	2300      	movs	r3, #0
    cb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    cb38:	682f      	ldr	r7, [r5, #0]
    cb3a:	602b      	str	r3, [r5, #0]
    cb3c:	d033      	beq.n	cba6 <__sflush_r+0x9a>
    cb3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    cb40:	89a3      	ldrh	r3, [r4, #12]
    cb42:	075a      	lsls	r2, r3, #29
    cb44:	d505      	bpl.n	cb52 <__sflush_r+0x46>
    cb46:	6863      	ldr	r3, [r4, #4]
    cb48:	1ac0      	subs	r0, r0, r3
    cb4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cb4c:	b10b      	cbz	r3, cb52 <__sflush_r+0x46>
    cb4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cb50:	1ac0      	subs	r0, r0, r3
    cb52:	2300      	movs	r3, #0
    cb54:	4602      	mov	r2, r0
    cb56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    cb58:	6a21      	ldr	r1, [r4, #32]
    cb5a:	4628      	mov	r0, r5
    cb5c:	47b0      	blx	r6
    cb5e:	1c43      	adds	r3, r0, #1
    cb60:	89a3      	ldrh	r3, [r4, #12]
    cb62:	d106      	bne.n	cb72 <__sflush_r+0x66>
    cb64:	6829      	ldr	r1, [r5, #0]
    cb66:	291d      	cmp	r1, #29
    cb68:	d84b      	bhi.n	cc02 <__sflush_r+0xf6>
    cb6a:	4a2b      	ldr	r2, [pc, #172]	; (cc18 <__sflush_r+0x10c>)
    cb6c:	40ca      	lsrs	r2, r1
    cb6e:	07d6      	lsls	r6, r2, #31
    cb70:	d547      	bpl.n	cc02 <__sflush_r+0xf6>
    cb72:	2200      	movs	r2, #0
    cb74:	6062      	str	r2, [r4, #4]
    cb76:	04d9      	lsls	r1, r3, #19
    cb78:	6922      	ldr	r2, [r4, #16]
    cb7a:	6022      	str	r2, [r4, #0]
    cb7c:	d504      	bpl.n	cb88 <__sflush_r+0x7c>
    cb7e:	1c42      	adds	r2, r0, #1
    cb80:	d101      	bne.n	cb86 <__sflush_r+0x7a>
    cb82:	682b      	ldr	r3, [r5, #0]
    cb84:	b903      	cbnz	r3, cb88 <__sflush_r+0x7c>
    cb86:	6560      	str	r0, [r4, #84]	; 0x54
    cb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cb8a:	602f      	str	r7, [r5, #0]
    cb8c:	2900      	cmp	r1, #0
    cb8e:	d0ca      	beq.n	cb26 <__sflush_r+0x1a>
    cb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
    cb94:	4299      	cmp	r1, r3
    cb96:	d002      	beq.n	cb9e <__sflush_r+0x92>
    cb98:	4628      	mov	r0, r5
    cb9a:	f7ff fcdd 	bl	c558 <_free_r>
    cb9e:	2000      	movs	r0, #0
    cba0:	6360      	str	r0, [r4, #52]	; 0x34
    cba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cba6:	6a21      	ldr	r1, [r4, #32]
    cba8:	2301      	movs	r3, #1
    cbaa:	4628      	mov	r0, r5
    cbac:	47b0      	blx	r6
    cbae:	1c41      	adds	r1, r0, #1
    cbb0:	d1c6      	bne.n	cb40 <__sflush_r+0x34>
    cbb2:	682b      	ldr	r3, [r5, #0]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d0c3      	beq.n	cb40 <__sflush_r+0x34>
    cbb8:	2b1d      	cmp	r3, #29
    cbba:	d001      	beq.n	cbc0 <__sflush_r+0xb4>
    cbbc:	2b16      	cmp	r3, #22
    cbbe:	d101      	bne.n	cbc4 <__sflush_r+0xb8>
    cbc0:	602f      	str	r7, [r5, #0]
    cbc2:	e7b0      	b.n	cb26 <__sflush_r+0x1a>
    cbc4:	89a3      	ldrh	r3, [r4, #12]
    cbc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cbca:	81a3      	strh	r3, [r4, #12]
    cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbd0:	690f      	ldr	r7, [r1, #16]
    cbd2:	2f00      	cmp	r7, #0
    cbd4:	d0a7      	beq.n	cb26 <__sflush_r+0x1a>
    cbd6:	0793      	lsls	r3, r2, #30
    cbd8:	680e      	ldr	r6, [r1, #0]
    cbda:	bf08      	it	eq
    cbdc:	694b      	ldreq	r3, [r1, #20]
    cbde:	600f      	str	r7, [r1, #0]
    cbe0:	bf18      	it	ne
    cbe2:	2300      	movne	r3, #0
    cbe4:	eba6 0807 	sub.w	r8, r6, r7
    cbe8:	608b      	str	r3, [r1, #8]
    cbea:	f1b8 0f00 	cmp.w	r8, #0
    cbee:	dd9a      	ble.n	cb26 <__sflush_r+0x1a>
    cbf0:	4643      	mov	r3, r8
    cbf2:	463a      	mov	r2, r7
    cbf4:	6a21      	ldr	r1, [r4, #32]
    cbf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    cbf8:	4628      	mov	r0, r5
    cbfa:	47b0      	blx	r6
    cbfc:	2800      	cmp	r0, #0
    cbfe:	dc07      	bgt.n	cc10 <__sflush_r+0x104>
    cc00:	89a3      	ldrh	r3, [r4, #12]
    cc02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cc06:	81a3      	strh	r3, [r4, #12]
    cc08:	f04f 30ff 	mov.w	r0, #4294967295
    cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc10:	4407      	add	r7, r0
    cc12:	eba8 0800 	sub.w	r8, r8, r0
    cc16:	e7e8      	b.n	cbea <__sflush_r+0xde>
    cc18:	20400001 	.word	0x20400001

0000cc1c <_fflush_r>:
    cc1c:	b538      	push	{r3, r4, r5, lr}
    cc1e:	690b      	ldr	r3, [r1, #16]
    cc20:	4605      	mov	r5, r0
    cc22:	460c      	mov	r4, r1
    cc24:	b1db      	cbz	r3, cc5e <_fflush_r+0x42>
    cc26:	b118      	cbz	r0, cc30 <_fflush_r+0x14>
    cc28:	6983      	ldr	r3, [r0, #24]
    cc2a:	b90b      	cbnz	r3, cc30 <_fflush_r+0x14>
    cc2c:	f000 f860 	bl	ccf0 <__sinit>
    cc30:	4b0c      	ldr	r3, [pc, #48]	; (cc64 <_fflush_r+0x48>)
    cc32:	429c      	cmp	r4, r3
    cc34:	d109      	bne.n	cc4a <_fflush_r+0x2e>
    cc36:	686c      	ldr	r4, [r5, #4]
    cc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cc3c:	b17b      	cbz	r3, cc5e <_fflush_r+0x42>
    cc3e:	4621      	mov	r1, r4
    cc40:	4628      	mov	r0, r5
    cc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cc46:	f7ff bf61 	b.w	cb0c <__sflush_r>
    cc4a:	4b07      	ldr	r3, [pc, #28]	; (cc68 <_fflush_r+0x4c>)
    cc4c:	429c      	cmp	r4, r3
    cc4e:	d101      	bne.n	cc54 <_fflush_r+0x38>
    cc50:	68ac      	ldr	r4, [r5, #8]
    cc52:	e7f1      	b.n	cc38 <_fflush_r+0x1c>
    cc54:	4b05      	ldr	r3, [pc, #20]	; (cc6c <_fflush_r+0x50>)
    cc56:	429c      	cmp	r4, r3
    cc58:	bf08      	it	eq
    cc5a:	68ec      	ldreq	r4, [r5, #12]
    cc5c:	e7ec      	b.n	cc38 <_fflush_r+0x1c>
    cc5e:	2000      	movs	r0, #0
    cc60:	bd38      	pop	{r3, r4, r5, pc}
    cc62:	bf00      	nop
    cc64:	0000e620 	.word	0x0000e620
    cc68:	0000e640 	.word	0x0000e640
    cc6c:	0000e600 	.word	0x0000e600

0000cc70 <_cleanup_r>:
    cc70:	4901      	ldr	r1, [pc, #4]	; (cc78 <_cleanup_r+0x8>)
    cc72:	f000 b8a9 	b.w	cdc8 <_fwalk_reent>
    cc76:	bf00      	nop
    cc78:	0000cc1d 	.word	0x0000cc1d

0000cc7c <std.isra.0>:
    cc7c:	2300      	movs	r3, #0
    cc7e:	b510      	push	{r4, lr}
    cc80:	4604      	mov	r4, r0
    cc82:	6003      	str	r3, [r0, #0]
    cc84:	6043      	str	r3, [r0, #4]
    cc86:	6083      	str	r3, [r0, #8]
    cc88:	8181      	strh	r1, [r0, #12]
    cc8a:	6643      	str	r3, [r0, #100]	; 0x64
    cc8c:	81c2      	strh	r2, [r0, #14]
    cc8e:	6103      	str	r3, [r0, #16]
    cc90:	6143      	str	r3, [r0, #20]
    cc92:	6183      	str	r3, [r0, #24]
    cc94:	4619      	mov	r1, r3
    cc96:	2208      	movs	r2, #8
    cc98:	305c      	adds	r0, #92	; 0x5c
    cc9a:	f7ff fc54 	bl	c546 <memset>
    cc9e:	4b05      	ldr	r3, [pc, #20]	; (ccb4 <std.isra.0+0x38>)
    cca0:	6263      	str	r3, [r4, #36]	; 0x24
    cca2:	4b05      	ldr	r3, [pc, #20]	; (ccb8 <std.isra.0+0x3c>)
    cca4:	62a3      	str	r3, [r4, #40]	; 0x28
    cca6:	4b05      	ldr	r3, [pc, #20]	; (ccbc <std.isra.0+0x40>)
    cca8:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccaa:	4b05      	ldr	r3, [pc, #20]	; (ccc0 <std.isra.0+0x44>)
    ccac:	6224      	str	r4, [r4, #32]
    ccae:	6323      	str	r3, [r4, #48]	; 0x30
    ccb0:	bd10      	pop	{r4, pc}
    ccb2:	bf00      	nop
    ccb4:	0000d719 	.word	0x0000d719
    ccb8:	0000d73b 	.word	0x0000d73b
    ccbc:	0000d773 	.word	0x0000d773
    ccc0:	0000d797 	.word	0x0000d797

0000ccc4 <__sfmoreglue>:
    ccc4:	b570      	push	{r4, r5, r6, lr}
    ccc6:	1e4a      	subs	r2, r1, #1
    ccc8:	2568      	movs	r5, #104	; 0x68
    ccca:	4355      	muls	r5, r2
    cccc:	460e      	mov	r6, r1
    ccce:	f105 0174 	add.w	r1, r5, #116	; 0x74
    ccd2:	f7ff fc8f 	bl	c5f4 <_malloc_r>
    ccd6:	4604      	mov	r4, r0
    ccd8:	b140      	cbz	r0, ccec <__sfmoreglue+0x28>
    ccda:	2100      	movs	r1, #0
    ccdc:	e880 0042 	stmia.w	r0, {r1, r6}
    cce0:	300c      	adds	r0, #12
    cce2:	60a0      	str	r0, [r4, #8]
    cce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    cce8:	f7ff fc2d 	bl	c546 <memset>
    ccec:	4620      	mov	r0, r4
    ccee:	bd70      	pop	{r4, r5, r6, pc}

0000ccf0 <__sinit>:
    ccf0:	6983      	ldr	r3, [r0, #24]
    ccf2:	b510      	push	{r4, lr}
    ccf4:	4604      	mov	r4, r0
    ccf6:	bb33      	cbnz	r3, cd46 <__sinit+0x56>
    ccf8:	6483      	str	r3, [r0, #72]	; 0x48
    ccfa:	64c3      	str	r3, [r0, #76]	; 0x4c
    ccfc:	6503      	str	r3, [r0, #80]	; 0x50
    ccfe:	4b12      	ldr	r3, [pc, #72]	; (cd48 <__sinit+0x58>)
    cd00:	4a12      	ldr	r2, [pc, #72]	; (cd4c <__sinit+0x5c>)
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	6282      	str	r2, [r0, #40]	; 0x28
    cd06:	4298      	cmp	r0, r3
    cd08:	bf04      	itt	eq
    cd0a:	2301      	moveq	r3, #1
    cd0c:	6183      	streq	r3, [r0, #24]
    cd0e:	f000 f81f 	bl	cd50 <__sfp>
    cd12:	6060      	str	r0, [r4, #4]
    cd14:	4620      	mov	r0, r4
    cd16:	f000 f81b 	bl	cd50 <__sfp>
    cd1a:	60a0      	str	r0, [r4, #8]
    cd1c:	4620      	mov	r0, r4
    cd1e:	f000 f817 	bl	cd50 <__sfp>
    cd22:	2200      	movs	r2, #0
    cd24:	60e0      	str	r0, [r4, #12]
    cd26:	2104      	movs	r1, #4
    cd28:	6860      	ldr	r0, [r4, #4]
    cd2a:	f7ff ffa7 	bl	cc7c <std.isra.0>
    cd2e:	2201      	movs	r2, #1
    cd30:	2109      	movs	r1, #9
    cd32:	68a0      	ldr	r0, [r4, #8]
    cd34:	f7ff ffa2 	bl	cc7c <std.isra.0>
    cd38:	2202      	movs	r2, #2
    cd3a:	2112      	movs	r1, #18
    cd3c:	68e0      	ldr	r0, [r4, #12]
    cd3e:	f7ff ff9d 	bl	cc7c <std.isra.0>
    cd42:	2301      	movs	r3, #1
    cd44:	61a3      	str	r3, [r4, #24]
    cd46:	bd10      	pop	{r4, pc}
    cd48:	0000e5fc 	.word	0x0000e5fc
    cd4c:	0000cc71 	.word	0x0000cc71

0000cd50 <__sfp>:
    cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd52:	4b1c      	ldr	r3, [pc, #112]	; (cdc4 <__sfp+0x74>)
    cd54:	681e      	ldr	r6, [r3, #0]
    cd56:	69b3      	ldr	r3, [r6, #24]
    cd58:	4607      	mov	r7, r0
    cd5a:	b913      	cbnz	r3, cd62 <__sfp+0x12>
    cd5c:	4630      	mov	r0, r6
    cd5e:	f7ff ffc7 	bl	ccf0 <__sinit>
    cd62:	3648      	adds	r6, #72	; 0x48
    cd64:	68b4      	ldr	r4, [r6, #8]
    cd66:	6873      	ldr	r3, [r6, #4]
    cd68:	3b01      	subs	r3, #1
    cd6a:	d503      	bpl.n	cd74 <__sfp+0x24>
    cd6c:	6833      	ldr	r3, [r6, #0]
    cd6e:	b133      	cbz	r3, cd7e <__sfp+0x2e>
    cd70:	6836      	ldr	r6, [r6, #0]
    cd72:	e7f7      	b.n	cd64 <__sfp+0x14>
    cd74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    cd78:	b16d      	cbz	r5, cd96 <__sfp+0x46>
    cd7a:	3468      	adds	r4, #104	; 0x68
    cd7c:	e7f4      	b.n	cd68 <__sfp+0x18>
    cd7e:	2104      	movs	r1, #4
    cd80:	4638      	mov	r0, r7
    cd82:	f7ff ff9f 	bl	ccc4 <__sfmoreglue>
    cd86:	6030      	str	r0, [r6, #0]
    cd88:	2800      	cmp	r0, #0
    cd8a:	d1f1      	bne.n	cd70 <__sfp+0x20>
    cd8c:	230c      	movs	r3, #12
    cd8e:	603b      	str	r3, [r7, #0]
    cd90:	4604      	mov	r4, r0
    cd92:	4620      	mov	r0, r4
    cd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cd9a:	81e3      	strh	r3, [r4, #14]
    cd9c:	2301      	movs	r3, #1
    cd9e:	81a3      	strh	r3, [r4, #12]
    cda0:	6665      	str	r5, [r4, #100]	; 0x64
    cda2:	6025      	str	r5, [r4, #0]
    cda4:	60a5      	str	r5, [r4, #8]
    cda6:	6065      	str	r5, [r4, #4]
    cda8:	6125      	str	r5, [r4, #16]
    cdaa:	6165      	str	r5, [r4, #20]
    cdac:	61a5      	str	r5, [r4, #24]
    cdae:	2208      	movs	r2, #8
    cdb0:	4629      	mov	r1, r5
    cdb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cdb6:	f7ff fbc6 	bl	c546 <memset>
    cdba:	6365      	str	r5, [r4, #52]	; 0x34
    cdbc:	63a5      	str	r5, [r4, #56]	; 0x38
    cdbe:	64a5      	str	r5, [r4, #72]	; 0x48
    cdc0:	64e5      	str	r5, [r4, #76]	; 0x4c
    cdc2:	e7e6      	b.n	cd92 <__sfp+0x42>
    cdc4:	0000e5fc 	.word	0x0000e5fc

0000cdc8 <_fwalk_reent>:
    cdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cdcc:	4680      	mov	r8, r0
    cdce:	4689      	mov	r9, r1
    cdd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    cdd4:	2600      	movs	r6, #0
    cdd6:	b914      	cbnz	r4, cdde <_fwalk_reent+0x16>
    cdd8:	4630      	mov	r0, r6
    cdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdde:	68a5      	ldr	r5, [r4, #8]
    cde0:	6867      	ldr	r7, [r4, #4]
    cde2:	3f01      	subs	r7, #1
    cde4:	d501      	bpl.n	cdea <_fwalk_reent+0x22>
    cde6:	6824      	ldr	r4, [r4, #0]
    cde8:	e7f5      	b.n	cdd6 <_fwalk_reent+0xe>
    cdea:	89ab      	ldrh	r3, [r5, #12]
    cdec:	2b01      	cmp	r3, #1
    cdee:	d907      	bls.n	ce00 <_fwalk_reent+0x38>
    cdf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    cdf4:	3301      	adds	r3, #1
    cdf6:	d003      	beq.n	ce00 <_fwalk_reent+0x38>
    cdf8:	4629      	mov	r1, r5
    cdfa:	4640      	mov	r0, r8
    cdfc:	47c8      	blx	r9
    cdfe:	4306      	orrs	r6, r0
    ce00:	3568      	adds	r5, #104	; 0x68
    ce02:	e7ee      	b.n	cde2 <_fwalk_reent+0x1a>

0000ce04 <__swhatbuf_r>:
    ce04:	b570      	push	{r4, r5, r6, lr}
    ce06:	460e      	mov	r6, r1
    ce08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ce0c:	2900      	cmp	r1, #0
    ce0e:	b090      	sub	sp, #64	; 0x40
    ce10:	4614      	mov	r4, r2
    ce12:	461d      	mov	r5, r3
    ce14:	da07      	bge.n	ce26 <__swhatbuf_r+0x22>
    ce16:	2300      	movs	r3, #0
    ce18:	602b      	str	r3, [r5, #0]
    ce1a:	89b3      	ldrh	r3, [r6, #12]
    ce1c:	061a      	lsls	r2, r3, #24
    ce1e:	d410      	bmi.n	ce42 <__swhatbuf_r+0x3e>
    ce20:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ce24:	e00e      	b.n	ce44 <__swhatbuf_r+0x40>
    ce26:	aa01      	add	r2, sp, #4
    ce28:	f000 fcdc 	bl	d7e4 <_fstat_r>
    ce2c:	2800      	cmp	r0, #0
    ce2e:	dbf2      	blt.n	ce16 <__swhatbuf_r+0x12>
    ce30:	9a02      	ldr	r2, [sp, #8]
    ce32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    ce36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    ce3a:	425a      	negs	r2, r3
    ce3c:	415a      	adcs	r2, r3
    ce3e:	602a      	str	r2, [r5, #0]
    ce40:	e7ee      	b.n	ce20 <__swhatbuf_r+0x1c>
    ce42:	2340      	movs	r3, #64	; 0x40
    ce44:	2000      	movs	r0, #0
    ce46:	6023      	str	r3, [r4, #0]
    ce48:	b010      	add	sp, #64	; 0x40
    ce4a:	bd70      	pop	{r4, r5, r6, pc}

0000ce4c <__smakebuf_r>:
    ce4c:	898b      	ldrh	r3, [r1, #12]
    ce4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ce50:	079d      	lsls	r5, r3, #30
    ce52:	4606      	mov	r6, r0
    ce54:	460c      	mov	r4, r1
    ce56:	d507      	bpl.n	ce68 <__smakebuf_r+0x1c>
    ce58:	f104 0347 	add.w	r3, r4, #71	; 0x47
    ce5c:	6023      	str	r3, [r4, #0]
    ce5e:	6123      	str	r3, [r4, #16]
    ce60:	2301      	movs	r3, #1
    ce62:	6163      	str	r3, [r4, #20]
    ce64:	b002      	add	sp, #8
    ce66:	bd70      	pop	{r4, r5, r6, pc}
    ce68:	ab01      	add	r3, sp, #4
    ce6a:	466a      	mov	r2, sp
    ce6c:	f7ff ffca 	bl	ce04 <__swhatbuf_r>
    ce70:	9900      	ldr	r1, [sp, #0]
    ce72:	4605      	mov	r5, r0
    ce74:	4630      	mov	r0, r6
    ce76:	f7ff fbbd 	bl	c5f4 <_malloc_r>
    ce7a:	b948      	cbnz	r0, ce90 <__smakebuf_r+0x44>
    ce7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ce80:	059a      	lsls	r2, r3, #22
    ce82:	d4ef      	bmi.n	ce64 <__smakebuf_r+0x18>
    ce84:	f023 0303 	bic.w	r3, r3, #3
    ce88:	f043 0302 	orr.w	r3, r3, #2
    ce8c:	81a3      	strh	r3, [r4, #12]
    ce8e:	e7e3      	b.n	ce58 <__smakebuf_r+0xc>
    ce90:	4b0d      	ldr	r3, [pc, #52]	; (cec8 <__smakebuf_r+0x7c>)
    ce92:	62b3      	str	r3, [r6, #40]	; 0x28
    ce94:	89a3      	ldrh	r3, [r4, #12]
    ce96:	6020      	str	r0, [r4, #0]
    ce98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce9c:	81a3      	strh	r3, [r4, #12]
    ce9e:	9b00      	ldr	r3, [sp, #0]
    cea0:	6163      	str	r3, [r4, #20]
    cea2:	9b01      	ldr	r3, [sp, #4]
    cea4:	6120      	str	r0, [r4, #16]
    cea6:	b15b      	cbz	r3, cec0 <__smakebuf_r+0x74>
    cea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ceac:	4630      	mov	r0, r6
    ceae:	f000 fcab 	bl	d808 <_isatty_r>
    ceb2:	b128      	cbz	r0, cec0 <__smakebuf_r+0x74>
    ceb4:	89a3      	ldrh	r3, [r4, #12]
    ceb6:	f023 0303 	bic.w	r3, r3, #3
    ceba:	f043 0301 	orr.w	r3, r3, #1
    cebe:	81a3      	strh	r3, [r4, #12]
    cec0:	89a3      	ldrh	r3, [r4, #12]
    cec2:	431d      	orrs	r5, r3
    cec4:	81a5      	strh	r5, [r4, #12]
    cec6:	e7cd      	b.n	ce64 <__smakebuf_r+0x18>
    cec8:	0000cc71 	.word	0x0000cc71

0000cecc <__malloc_lock>:
    cecc:	4770      	bx	lr

0000cece <__malloc_unlock>:
    cece:	4770      	bx	lr

0000ced0 <__ssputs_r>:
    ced0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ced4:	688e      	ldr	r6, [r1, #8]
    ced6:	429e      	cmp	r6, r3
    ced8:	4682      	mov	sl, r0
    ceda:	460c      	mov	r4, r1
    cedc:	4691      	mov	r9, r2
    cede:	4698      	mov	r8, r3
    cee0:	d835      	bhi.n	cf4e <__ssputs_r+0x7e>
    cee2:	898a      	ldrh	r2, [r1, #12]
    cee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    cee8:	d031      	beq.n	cf4e <__ssputs_r+0x7e>
    ceea:	6825      	ldr	r5, [r4, #0]
    ceec:	6909      	ldr	r1, [r1, #16]
    ceee:	1a6f      	subs	r7, r5, r1
    cef0:	6965      	ldr	r5, [r4, #20]
    cef2:	2302      	movs	r3, #2
    cef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    cef8:	fb95 f5f3 	sdiv	r5, r5, r3
    cefc:	f108 0301 	add.w	r3, r8, #1
    cf00:	443b      	add	r3, r7
    cf02:	429d      	cmp	r5, r3
    cf04:	bf38      	it	cc
    cf06:	461d      	movcc	r5, r3
    cf08:	0553      	lsls	r3, r2, #21
    cf0a:	d531      	bpl.n	cf70 <__ssputs_r+0xa0>
    cf0c:	4629      	mov	r1, r5
    cf0e:	f7ff fb71 	bl	c5f4 <_malloc_r>
    cf12:	4606      	mov	r6, r0
    cf14:	b950      	cbnz	r0, cf2c <__ssputs_r+0x5c>
    cf16:	230c      	movs	r3, #12
    cf18:	f8ca 3000 	str.w	r3, [sl]
    cf1c:	89a3      	ldrh	r3, [r4, #12]
    cf1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf22:	81a3      	strh	r3, [r4, #12]
    cf24:	f04f 30ff 	mov.w	r0, #4294967295
    cf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf2c:	463a      	mov	r2, r7
    cf2e:	6921      	ldr	r1, [r4, #16]
    cf30:	f7ff fafe 	bl	c530 <memcpy>
    cf34:	89a3      	ldrh	r3, [r4, #12]
    cf36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    cf3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf3e:	81a3      	strh	r3, [r4, #12]
    cf40:	6126      	str	r6, [r4, #16]
    cf42:	6165      	str	r5, [r4, #20]
    cf44:	443e      	add	r6, r7
    cf46:	1bed      	subs	r5, r5, r7
    cf48:	6026      	str	r6, [r4, #0]
    cf4a:	60a5      	str	r5, [r4, #8]
    cf4c:	4646      	mov	r6, r8
    cf4e:	4546      	cmp	r6, r8
    cf50:	bf28      	it	cs
    cf52:	4646      	movcs	r6, r8
    cf54:	4632      	mov	r2, r6
    cf56:	4649      	mov	r1, r9
    cf58:	6820      	ldr	r0, [r4, #0]
    cf5a:	f000 fcc9 	bl	d8f0 <memmove>
    cf5e:	68a3      	ldr	r3, [r4, #8]
    cf60:	1b9b      	subs	r3, r3, r6
    cf62:	60a3      	str	r3, [r4, #8]
    cf64:	6823      	ldr	r3, [r4, #0]
    cf66:	441e      	add	r6, r3
    cf68:	6026      	str	r6, [r4, #0]
    cf6a:	2000      	movs	r0, #0
    cf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf70:	462a      	mov	r2, r5
    cf72:	f000 fcd7 	bl	d924 <_realloc_r>
    cf76:	4606      	mov	r6, r0
    cf78:	2800      	cmp	r0, #0
    cf7a:	d1e1      	bne.n	cf40 <__ssputs_r+0x70>
    cf7c:	6921      	ldr	r1, [r4, #16]
    cf7e:	4650      	mov	r0, sl
    cf80:	f7ff faea 	bl	c558 <_free_r>
    cf84:	e7c7      	b.n	cf16 <__ssputs_r+0x46>
	...

0000cf88 <_svfiprintf_r>:
    cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf8c:	b09d      	sub	sp, #116	; 0x74
    cf8e:	4680      	mov	r8, r0
    cf90:	9303      	str	r3, [sp, #12]
    cf92:	898b      	ldrh	r3, [r1, #12]
    cf94:	061c      	lsls	r4, r3, #24
    cf96:	460d      	mov	r5, r1
    cf98:	4616      	mov	r6, r2
    cf9a:	d50f      	bpl.n	cfbc <_svfiprintf_r+0x34>
    cf9c:	690b      	ldr	r3, [r1, #16]
    cf9e:	b96b      	cbnz	r3, cfbc <_svfiprintf_r+0x34>
    cfa0:	2140      	movs	r1, #64	; 0x40
    cfa2:	f7ff fb27 	bl	c5f4 <_malloc_r>
    cfa6:	6028      	str	r0, [r5, #0]
    cfa8:	6128      	str	r0, [r5, #16]
    cfaa:	b928      	cbnz	r0, cfb8 <_svfiprintf_r+0x30>
    cfac:	230c      	movs	r3, #12
    cfae:	f8c8 3000 	str.w	r3, [r8]
    cfb2:	f04f 30ff 	mov.w	r0, #4294967295
    cfb6:	e0c5      	b.n	d144 <_svfiprintf_r+0x1bc>
    cfb8:	2340      	movs	r3, #64	; 0x40
    cfba:	616b      	str	r3, [r5, #20]
    cfbc:	2300      	movs	r3, #0
    cfbe:	9309      	str	r3, [sp, #36]	; 0x24
    cfc0:	2320      	movs	r3, #32
    cfc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cfc6:	2330      	movs	r3, #48	; 0x30
    cfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cfcc:	f04f 0b01 	mov.w	fp, #1
    cfd0:	4637      	mov	r7, r6
    cfd2:	463c      	mov	r4, r7
    cfd4:	f814 3b01 	ldrb.w	r3, [r4], #1
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d13c      	bne.n	d056 <_svfiprintf_r+0xce>
    cfdc:	ebb7 0a06 	subs.w	sl, r7, r6
    cfe0:	d00b      	beq.n	cffa <_svfiprintf_r+0x72>
    cfe2:	4653      	mov	r3, sl
    cfe4:	4632      	mov	r2, r6
    cfe6:	4629      	mov	r1, r5
    cfe8:	4640      	mov	r0, r8
    cfea:	f7ff ff71 	bl	ced0 <__ssputs_r>
    cfee:	3001      	adds	r0, #1
    cff0:	f000 80a3 	beq.w	d13a <_svfiprintf_r+0x1b2>
    cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cff6:	4453      	add	r3, sl
    cff8:	9309      	str	r3, [sp, #36]	; 0x24
    cffa:	783b      	ldrb	r3, [r7, #0]
    cffc:	2b00      	cmp	r3, #0
    cffe:	f000 809c 	beq.w	d13a <_svfiprintf_r+0x1b2>
    d002:	2300      	movs	r3, #0
    d004:	f04f 32ff 	mov.w	r2, #4294967295
    d008:	9304      	str	r3, [sp, #16]
    d00a:	9307      	str	r3, [sp, #28]
    d00c:	9205      	str	r2, [sp, #20]
    d00e:	9306      	str	r3, [sp, #24]
    d010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d014:	931a      	str	r3, [sp, #104]	; 0x68
    d016:	2205      	movs	r2, #5
    d018:	7821      	ldrb	r1, [r4, #0]
    d01a:	4850      	ldr	r0, [pc, #320]	; (d15c <_svfiprintf_r+0x1d4>)
    d01c:	f000 fc18 	bl	d850 <memchr>
    d020:	1c67      	adds	r7, r4, #1
    d022:	9b04      	ldr	r3, [sp, #16]
    d024:	b9d8      	cbnz	r0, d05e <_svfiprintf_r+0xd6>
    d026:	06d9      	lsls	r1, r3, #27
    d028:	bf44      	itt	mi
    d02a:	2220      	movmi	r2, #32
    d02c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d030:	071a      	lsls	r2, r3, #28
    d032:	bf44      	itt	mi
    d034:	222b      	movmi	r2, #43	; 0x2b
    d036:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d03a:	7822      	ldrb	r2, [r4, #0]
    d03c:	2a2a      	cmp	r2, #42	; 0x2a
    d03e:	d016      	beq.n	d06e <_svfiprintf_r+0xe6>
    d040:	9a07      	ldr	r2, [sp, #28]
    d042:	2100      	movs	r1, #0
    d044:	200a      	movs	r0, #10
    d046:	4627      	mov	r7, r4
    d048:	3401      	adds	r4, #1
    d04a:	783b      	ldrb	r3, [r7, #0]
    d04c:	3b30      	subs	r3, #48	; 0x30
    d04e:	2b09      	cmp	r3, #9
    d050:	d951      	bls.n	d0f6 <_svfiprintf_r+0x16e>
    d052:	b1c9      	cbz	r1, d088 <_svfiprintf_r+0x100>
    d054:	e011      	b.n	d07a <_svfiprintf_r+0xf2>
    d056:	2b25      	cmp	r3, #37	; 0x25
    d058:	d0c0      	beq.n	cfdc <_svfiprintf_r+0x54>
    d05a:	4627      	mov	r7, r4
    d05c:	e7b9      	b.n	cfd2 <_svfiprintf_r+0x4a>
    d05e:	4a3f      	ldr	r2, [pc, #252]	; (d15c <_svfiprintf_r+0x1d4>)
    d060:	1a80      	subs	r0, r0, r2
    d062:	fa0b f000 	lsl.w	r0, fp, r0
    d066:	4318      	orrs	r0, r3
    d068:	9004      	str	r0, [sp, #16]
    d06a:	463c      	mov	r4, r7
    d06c:	e7d3      	b.n	d016 <_svfiprintf_r+0x8e>
    d06e:	9a03      	ldr	r2, [sp, #12]
    d070:	1d11      	adds	r1, r2, #4
    d072:	6812      	ldr	r2, [r2, #0]
    d074:	9103      	str	r1, [sp, #12]
    d076:	2a00      	cmp	r2, #0
    d078:	db01      	blt.n	d07e <_svfiprintf_r+0xf6>
    d07a:	9207      	str	r2, [sp, #28]
    d07c:	e004      	b.n	d088 <_svfiprintf_r+0x100>
    d07e:	4252      	negs	r2, r2
    d080:	f043 0302 	orr.w	r3, r3, #2
    d084:	9207      	str	r2, [sp, #28]
    d086:	9304      	str	r3, [sp, #16]
    d088:	783b      	ldrb	r3, [r7, #0]
    d08a:	2b2e      	cmp	r3, #46	; 0x2e
    d08c:	d10e      	bne.n	d0ac <_svfiprintf_r+0x124>
    d08e:	787b      	ldrb	r3, [r7, #1]
    d090:	2b2a      	cmp	r3, #42	; 0x2a
    d092:	f107 0101 	add.w	r1, r7, #1
    d096:	d132      	bne.n	d0fe <_svfiprintf_r+0x176>
    d098:	9b03      	ldr	r3, [sp, #12]
    d09a:	1d1a      	adds	r2, r3, #4
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	9203      	str	r2, [sp, #12]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	bfb8      	it	lt
    d0a4:	f04f 33ff 	movlt.w	r3, #4294967295
    d0a8:	3702      	adds	r7, #2
    d0aa:	9305      	str	r3, [sp, #20]
    d0ac:	4c2c      	ldr	r4, [pc, #176]	; (d160 <_svfiprintf_r+0x1d8>)
    d0ae:	7839      	ldrb	r1, [r7, #0]
    d0b0:	2203      	movs	r2, #3
    d0b2:	4620      	mov	r0, r4
    d0b4:	f000 fbcc 	bl	d850 <memchr>
    d0b8:	b138      	cbz	r0, d0ca <_svfiprintf_r+0x142>
    d0ba:	2340      	movs	r3, #64	; 0x40
    d0bc:	1b00      	subs	r0, r0, r4
    d0be:	fa03 f000 	lsl.w	r0, r3, r0
    d0c2:	9b04      	ldr	r3, [sp, #16]
    d0c4:	4303      	orrs	r3, r0
    d0c6:	9304      	str	r3, [sp, #16]
    d0c8:	3701      	adds	r7, #1
    d0ca:	7839      	ldrb	r1, [r7, #0]
    d0cc:	4825      	ldr	r0, [pc, #148]	; (d164 <_svfiprintf_r+0x1dc>)
    d0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d0d2:	2206      	movs	r2, #6
    d0d4:	1c7e      	adds	r6, r7, #1
    d0d6:	f000 fbbb 	bl	d850 <memchr>
    d0da:	2800      	cmp	r0, #0
    d0dc:	d035      	beq.n	d14a <_svfiprintf_r+0x1c2>
    d0de:	4b22      	ldr	r3, [pc, #136]	; (d168 <_svfiprintf_r+0x1e0>)
    d0e0:	b9fb      	cbnz	r3, d122 <_svfiprintf_r+0x19a>
    d0e2:	9b03      	ldr	r3, [sp, #12]
    d0e4:	3307      	adds	r3, #7
    d0e6:	f023 0307 	bic.w	r3, r3, #7
    d0ea:	3308      	adds	r3, #8
    d0ec:	9303      	str	r3, [sp, #12]
    d0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0f0:	444b      	add	r3, r9
    d0f2:	9309      	str	r3, [sp, #36]	; 0x24
    d0f4:	e76c      	b.n	cfd0 <_svfiprintf_r+0x48>
    d0f6:	fb00 3202 	mla	r2, r0, r2, r3
    d0fa:	2101      	movs	r1, #1
    d0fc:	e7a3      	b.n	d046 <_svfiprintf_r+0xbe>
    d0fe:	2300      	movs	r3, #0
    d100:	9305      	str	r3, [sp, #20]
    d102:	4618      	mov	r0, r3
    d104:	240a      	movs	r4, #10
    d106:	460f      	mov	r7, r1
    d108:	3101      	adds	r1, #1
    d10a:	783a      	ldrb	r2, [r7, #0]
    d10c:	3a30      	subs	r2, #48	; 0x30
    d10e:	2a09      	cmp	r2, #9
    d110:	d903      	bls.n	d11a <_svfiprintf_r+0x192>
    d112:	2b00      	cmp	r3, #0
    d114:	d0ca      	beq.n	d0ac <_svfiprintf_r+0x124>
    d116:	9005      	str	r0, [sp, #20]
    d118:	e7c8      	b.n	d0ac <_svfiprintf_r+0x124>
    d11a:	fb04 2000 	mla	r0, r4, r0, r2
    d11e:	2301      	movs	r3, #1
    d120:	e7f1      	b.n	d106 <_svfiprintf_r+0x17e>
    d122:	ab03      	add	r3, sp, #12
    d124:	9300      	str	r3, [sp, #0]
    d126:	462a      	mov	r2, r5
    d128:	4b10      	ldr	r3, [pc, #64]	; (d16c <_svfiprintf_r+0x1e4>)
    d12a:	a904      	add	r1, sp, #16
    d12c:	4640      	mov	r0, r8
    d12e:	f3af 8000 	nop.w
    d132:	f1b0 3fff 	cmp.w	r0, #4294967295
    d136:	4681      	mov	r9, r0
    d138:	d1d9      	bne.n	d0ee <_svfiprintf_r+0x166>
    d13a:	89ab      	ldrh	r3, [r5, #12]
    d13c:	065b      	lsls	r3, r3, #25
    d13e:	f53f af38 	bmi.w	cfb2 <_svfiprintf_r+0x2a>
    d142:	9809      	ldr	r0, [sp, #36]	; 0x24
    d144:	b01d      	add	sp, #116	; 0x74
    d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d14a:	ab03      	add	r3, sp, #12
    d14c:	9300      	str	r3, [sp, #0]
    d14e:	462a      	mov	r2, r5
    d150:	4b06      	ldr	r3, [pc, #24]	; (d16c <_svfiprintf_r+0x1e4>)
    d152:	a904      	add	r1, sp, #16
    d154:	4640      	mov	r0, r8
    d156:	f000 f9bf 	bl	d4d8 <_printf_i>
    d15a:	e7ea      	b.n	d132 <_svfiprintf_r+0x1aa>
    d15c:	0000e660 	.word	0x0000e660
    d160:	0000e666 	.word	0x0000e666
    d164:	0000e66a 	.word	0x0000e66a
    d168:	00000000 	.word	0x00000000
    d16c:	0000ced1 	.word	0x0000ced1

0000d170 <__sfputc_r>:
    d170:	6893      	ldr	r3, [r2, #8]
    d172:	3b01      	subs	r3, #1
    d174:	2b00      	cmp	r3, #0
    d176:	b410      	push	{r4}
    d178:	6093      	str	r3, [r2, #8]
    d17a:	da08      	bge.n	d18e <__sfputc_r+0x1e>
    d17c:	6994      	ldr	r4, [r2, #24]
    d17e:	42a3      	cmp	r3, r4
    d180:	db02      	blt.n	d188 <__sfputc_r+0x18>
    d182:	b2cb      	uxtb	r3, r1
    d184:	2b0a      	cmp	r3, #10
    d186:	d102      	bne.n	d18e <__sfputc_r+0x1e>
    d188:	bc10      	pop	{r4}
    d18a:	f7ff bbff 	b.w	c98c <__swbuf_r>
    d18e:	6813      	ldr	r3, [r2, #0]
    d190:	1c58      	adds	r0, r3, #1
    d192:	6010      	str	r0, [r2, #0]
    d194:	7019      	strb	r1, [r3, #0]
    d196:	b2c8      	uxtb	r0, r1
    d198:	bc10      	pop	{r4}
    d19a:	4770      	bx	lr

0000d19c <__sfputs_r>:
    d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d19e:	4606      	mov	r6, r0
    d1a0:	460f      	mov	r7, r1
    d1a2:	4614      	mov	r4, r2
    d1a4:	18d5      	adds	r5, r2, r3
    d1a6:	42ac      	cmp	r4, r5
    d1a8:	d101      	bne.n	d1ae <__sfputs_r+0x12>
    d1aa:	2000      	movs	r0, #0
    d1ac:	e007      	b.n	d1be <__sfputs_r+0x22>
    d1ae:	463a      	mov	r2, r7
    d1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
    d1b4:	4630      	mov	r0, r6
    d1b6:	f7ff ffdb 	bl	d170 <__sfputc_r>
    d1ba:	1c43      	adds	r3, r0, #1
    d1bc:	d1f3      	bne.n	d1a6 <__sfputs_r+0xa>
    d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d1c0 <_vfiprintf_r>:
    d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1c4:	b09d      	sub	sp, #116	; 0x74
    d1c6:	460c      	mov	r4, r1
    d1c8:	4617      	mov	r7, r2
    d1ca:	9303      	str	r3, [sp, #12]
    d1cc:	4606      	mov	r6, r0
    d1ce:	b118      	cbz	r0, d1d8 <_vfiprintf_r+0x18>
    d1d0:	6983      	ldr	r3, [r0, #24]
    d1d2:	b90b      	cbnz	r3, d1d8 <_vfiprintf_r+0x18>
    d1d4:	f7ff fd8c 	bl	ccf0 <__sinit>
    d1d8:	4b7c      	ldr	r3, [pc, #496]	; (d3cc <_vfiprintf_r+0x20c>)
    d1da:	429c      	cmp	r4, r3
    d1dc:	d157      	bne.n	d28e <_vfiprintf_r+0xce>
    d1de:	6874      	ldr	r4, [r6, #4]
    d1e0:	89a3      	ldrh	r3, [r4, #12]
    d1e2:	0718      	lsls	r0, r3, #28
    d1e4:	d55d      	bpl.n	d2a2 <_vfiprintf_r+0xe2>
    d1e6:	6923      	ldr	r3, [r4, #16]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	d05a      	beq.n	d2a2 <_vfiprintf_r+0xe2>
    d1ec:	2300      	movs	r3, #0
    d1ee:	9309      	str	r3, [sp, #36]	; 0x24
    d1f0:	2320      	movs	r3, #32
    d1f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d1f6:	2330      	movs	r3, #48	; 0x30
    d1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d1fc:	f04f 0b01 	mov.w	fp, #1
    d200:	46b8      	mov	r8, r7
    d202:	4645      	mov	r5, r8
    d204:	f815 3b01 	ldrb.w	r3, [r5], #1
    d208:	2b00      	cmp	r3, #0
    d20a:	d155      	bne.n	d2b8 <_vfiprintf_r+0xf8>
    d20c:	ebb8 0a07 	subs.w	sl, r8, r7
    d210:	d00b      	beq.n	d22a <_vfiprintf_r+0x6a>
    d212:	4653      	mov	r3, sl
    d214:	463a      	mov	r2, r7
    d216:	4621      	mov	r1, r4
    d218:	4630      	mov	r0, r6
    d21a:	f7ff ffbf 	bl	d19c <__sfputs_r>
    d21e:	3001      	adds	r0, #1
    d220:	f000 80c4 	beq.w	d3ac <_vfiprintf_r+0x1ec>
    d224:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d226:	4453      	add	r3, sl
    d228:	9309      	str	r3, [sp, #36]	; 0x24
    d22a:	f898 3000 	ldrb.w	r3, [r8]
    d22e:	2b00      	cmp	r3, #0
    d230:	f000 80bc 	beq.w	d3ac <_vfiprintf_r+0x1ec>
    d234:	2300      	movs	r3, #0
    d236:	f04f 32ff 	mov.w	r2, #4294967295
    d23a:	9304      	str	r3, [sp, #16]
    d23c:	9307      	str	r3, [sp, #28]
    d23e:	9205      	str	r2, [sp, #20]
    d240:	9306      	str	r3, [sp, #24]
    d242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d246:	931a      	str	r3, [sp, #104]	; 0x68
    d248:	2205      	movs	r2, #5
    d24a:	7829      	ldrb	r1, [r5, #0]
    d24c:	4860      	ldr	r0, [pc, #384]	; (d3d0 <_vfiprintf_r+0x210>)
    d24e:	f000 faff 	bl	d850 <memchr>
    d252:	f105 0801 	add.w	r8, r5, #1
    d256:	9b04      	ldr	r3, [sp, #16]
    d258:	2800      	cmp	r0, #0
    d25a:	d131      	bne.n	d2c0 <_vfiprintf_r+0x100>
    d25c:	06d9      	lsls	r1, r3, #27
    d25e:	bf44      	itt	mi
    d260:	2220      	movmi	r2, #32
    d262:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d266:	071a      	lsls	r2, r3, #28
    d268:	bf44      	itt	mi
    d26a:	222b      	movmi	r2, #43	; 0x2b
    d26c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d270:	782a      	ldrb	r2, [r5, #0]
    d272:	2a2a      	cmp	r2, #42	; 0x2a
    d274:	d02c      	beq.n	d2d0 <_vfiprintf_r+0x110>
    d276:	9a07      	ldr	r2, [sp, #28]
    d278:	2100      	movs	r1, #0
    d27a:	200a      	movs	r0, #10
    d27c:	46a8      	mov	r8, r5
    d27e:	3501      	adds	r5, #1
    d280:	f898 3000 	ldrb.w	r3, [r8]
    d284:	3b30      	subs	r3, #48	; 0x30
    d286:	2b09      	cmp	r3, #9
    d288:	d96d      	bls.n	d366 <_vfiprintf_r+0x1a6>
    d28a:	b371      	cbz	r1, d2ea <_vfiprintf_r+0x12a>
    d28c:	e026      	b.n	d2dc <_vfiprintf_r+0x11c>
    d28e:	4b51      	ldr	r3, [pc, #324]	; (d3d4 <_vfiprintf_r+0x214>)
    d290:	429c      	cmp	r4, r3
    d292:	d101      	bne.n	d298 <_vfiprintf_r+0xd8>
    d294:	68b4      	ldr	r4, [r6, #8]
    d296:	e7a3      	b.n	d1e0 <_vfiprintf_r+0x20>
    d298:	4b4f      	ldr	r3, [pc, #316]	; (d3d8 <_vfiprintf_r+0x218>)
    d29a:	429c      	cmp	r4, r3
    d29c:	bf08      	it	eq
    d29e:	68f4      	ldreq	r4, [r6, #12]
    d2a0:	e79e      	b.n	d1e0 <_vfiprintf_r+0x20>
    d2a2:	4621      	mov	r1, r4
    d2a4:	4630      	mov	r0, r6
    d2a6:	f7ff fbc3 	bl	ca30 <__swsetup_r>
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d09e      	beq.n	d1ec <_vfiprintf_r+0x2c>
    d2ae:	f04f 30ff 	mov.w	r0, #4294967295
    d2b2:	b01d      	add	sp, #116	; 0x74
    d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2b8:	2b25      	cmp	r3, #37	; 0x25
    d2ba:	d0a7      	beq.n	d20c <_vfiprintf_r+0x4c>
    d2bc:	46a8      	mov	r8, r5
    d2be:	e7a0      	b.n	d202 <_vfiprintf_r+0x42>
    d2c0:	4a43      	ldr	r2, [pc, #268]	; (d3d0 <_vfiprintf_r+0x210>)
    d2c2:	1a80      	subs	r0, r0, r2
    d2c4:	fa0b f000 	lsl.w	r0, fp, r0
    d2c8:	4318      	orrs	r0, r3
    d2ca:	9004      	str	r0, [sp, #16]
    d2cc:	4645      	mov	r5, r8
    d2ce:	e7bb      	b.n	d248 <_vfiprintf_r+0x88>
    d2d0:	9a03      	ldr	r2, [sp, #12]
    d2d2:	1d11      	adds	r1, r2, #4
    d2d4:	6812      	ldr	r2, [r2, #0]
    d2d6:	9103      	str	r1, [sp, #12]
    d2d8:	2a00      	cmp	r2, #0
    d2da:	db01      	blt.n	d2e0 <_vfiprintf_r+0x120>
    d2dc:	9207      	str	r2, [sp, #28]
    d2de:	e004      	b.n	d2ea <_vfiprintf_r+0x12a>
    d2e0:	4252      	negs	r2, r2
    d2e2:	f043 0302 	orr.w	r3, r3, #2
    d2e6:	9207      	str	r2, [sp, #28]
    d2e8:	9304      	str	r3, [sp, #16]
    d2ea:	f898 3000 	ldrb.w	r3, [r8]
    d2ee:	2b2e      	cmp	r3, #46	; 0x2e
    d2f0:	d110      	bne.n	d314 <_vfiprintf_r+0x154>
    d2f2:	f898 3001 	ldrb.w	r3, [r8, #1]
    d2f6:	2b2a      	cmp	r3, #42	; 0x2a
    d2f8:	f108 0101 	add.w	r1, r8, #1
    d2fc:	d137      	bne.n	d36e <_vfiprintf_r+0x1ae>
    d2fe:	9b03      	ldr	r3, [sp, #12]
    d300:	1d1a      	adds	r2, r3, #4
    d302:	681b      	ldr	r3, [r3, #0]
    d304:	9203      	str	r2, [sp, #12]
    d306:	2b00      	cmp	r3, #0
    d308:	bfb8      	it	lt
    d30a:	f04f 33ff 	movlt.w	r3, #4294967295
    d30e:	f108 0802 	add.w	r8, r8, #2
    d312:	9305      	str	r3, [sp, #20]
    d314:	4d31      	ldr	r5, [pc, #196]	; (d3dc <_vfiprintf_r+0x21c>)
    d316:	f898 1000 	ldrb.w	r1, [r8]
    d31a:	2203      	movs	r2, #3
    d31c:	4628      	mov	r0, r5
    d31e:	f000 fa97 	bl	d850 <memchr>
    d322:	b140      	cbz	r0, d336 <_vfiprintf_r+0x176>
    d324:	2340      	movs	r3, #64	; 0x40
    d326:	1b40      	subs	r0, r0, r5
    d328:	fa03 f000 	lsl.w	r0, r3, r0
    d32c:	9b04      	ldr	r3, [sp, #16]
    d32e:	4303      	orrs	r3, r0
    d330:	9304      	str	r3, [sp, #16]
    d332:	f108 0801 	add.w	r8, r8, #1
    d336:	f898 1000 	ldrb.w	r1, [r8]
    d33a:	4829      	ldr	r0, [pc, #164]	; (d3e0 <_vfiprintf_r+0x220>)
    d33c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d340:	2206      	movs	r2, #6
    d342:	f108 0701 	add.w	r7, r8, #1
    d346:	f000 fa83 	bl	d850 <memchr>
    d34a:	2800      	cmp	r0, #0
    d34c:	d034      	beq.n	d3b8 <_vfiprintf_r+0x1f8>
    d34e:	4b25      	ldr	r3, [pc, #148]	; (d3e4 <_vfiprintf_r+0x224>)
    d350:	bb03      	cbnz	r3, d394 <_vfiprintf_r+0x1d4>
    d352:	9b03      	ldr	r3, [sp, #12]
    d354:	3307      	adds	r3, #7
    d356:	f023 0307 	bic.w	r3, r3, #7
    d35a:	3308      	adds	r3, #8
    d35c:	9303      	str	r3, [sp, #12]
    d35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d360:	444b      	add	r3, r9
    d362:	9309      	str	r3, [sp, #36]	; 0x24
    d364:	e74c      	b.n	d200 <_vfiprintf_r+0x40>
    d366:	fb00 3202 	mla	r2, r0, r2, r3
    d36a:	2101      	movs	r1, #1
    d36c:	e786      	b.n	d27c <_vfiprintf_r+0xbc>
    d36e:	2300      	movs	r3, #0
    d370:	9305      	str	r3, [sp, #20]
    d372:	4618      	mov	r0, r3
    d374:	250a      	movs	r5, #10
    d376:	4688      	mov	r8, r1
    d378:	3101      	adds	r1, #1
    d37a:	f898 2000 	ldrb.w	r2, [r8]
    d37e:	3a30      	subs	r2, #48	; 0x30
    d380:	2a09      	cmp	r2, #9
    d382:	d903      	bls.n	d38c <_vfiprintf_r+0x1cc>
    d384:	2b00      	cmp	r3, #0
    d386:	d0c5      	beq.n	d314 <_vfiprintf_r+0x154>
    d388:	9005      	str	r0, [sp, #20]
    d38a:	e7c3      	b.n	d314 <_vfiprintf_r+0x154>
    d38c:	fb05 2000 	mla	r0, r5, r0, r2
    d390:	2301      	movs	r3, #1
    d392:	e7f0      	b.n	d376 <_vfiprintf_r+0x1b6>
    d394:	ab03      	add	r3, sp, #12
    d396:	9300      	str	r3, [sp, #0]
    d398:	4622      	mov	r2, r4
    d39a:	4b13      	ldr	r3, [pc, #76]	; (d3e8 <_vfiprintf_r+0x228>)
    d39c:	a904      	add	r1, sp, #16
    d39e:	4630      	mov	r0, r6
    d3a0:	f3af 8000 	nop.w
    d3a4:	f1b0 3fff 	cmp.w	r0, #4294967295
    d3a8:	4681      	mov	r9, r0
    d3aa:	d1d8      	bne.n	d35e <_vfiprintf_r+0x19e>
    d3ac:	89a3      	ldrh	r3, [r4, #12]
    d3ae:	065b      	lsls	r3, r3, #25
    d3b0:	f53f af7d 	bmi.w	d2ae <_vfiprintf_r+0xee>
    d3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    d3b6:	e77c      	b.n	d2b2 <_vfiprintf_r+0xf2>
    d3b8:	ab03      	add	r3, sp, #12
    d3ba:	9300      	str	r3, [sp, #0]
    d3bc:	4622      	mov	r2, r4
    d3be:	4b0a      	ldr	r3, [pc, #40]	; (d3e8 <_vfiprintf_r+0x228>)
    d3c0:	a904      	add	r1, sp, #16
    d3c2:	4630      	mov	r0, r6
    d3c4:	f000 f888 	bl	d4d8 <_printf_i>
    d3c8:	e7ec      	b.n	d3a4 <_vfiprintf_r+0x1e4>
    d3ca:	bf00      	nop
    d3cc:	0000e620 	.word	0x0000e620
    d3d0:	0000e660 	.word	0x0000e660
    d3d4:	0000e640 	.word	0x0000e640
    d3d8:	0000e600 	.word	0x0000e600
    d3dc:	0000e666 	.word	0x0000e666
    d3e0:	0000e66a 	.word	0x0000e66a
    d3e4:	00000000 	.word	0x00000000
    d3e8:	0000d19d 	.word	0x0000d19d

0000d3ec <_printf_common>:
    d3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3f0:	4691      	mov	r9, r2
    d3f2:	461f      	mov	r7, r3
    d3f4:	688a      	ldr	r2, [r1, #8]
    d3f6:	690b      	ldr	r3, [r1, #16]
    d3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d3fc:	4293      	cmp	r3, r2
    d3fe:	bfb8      	it	lt
    d400:	4613      	movlt	r3, r2
    d402:	f8c9 3000 	str.w	r3, [r9]
    d406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d40a:	4606      	mov	r6, r0
    d40c:	460c      	mov	r4, r1
    d40e:	b112      	cbz	r2, d416 <_printf_common+0x2a>
    d410:	3301      	adds	r3, #1
    d412:	f8c9 3000 	str.w	r3, [r9]
    d416:	6823      	ldr	r3, [r4, #0]
    d418:	0699      	lsls	r1, r3, #26
    d41a:	bf42      	ittt	mi
    d41c:	f8d9 3000 	ldrmi.w	r3, [r9]
    d420:	3302      	addmi	r3, #2
    d422:	f8c9 3000 	strmi.w	r3, [r9]
    d426:	6825      	ldr	r5, [r4, #0]
    d428:	f015 0506 	ands.w	r5, r5, #6
    d42c:	d107      	bne.n	d43e <_printf_common+0x52>
    d42e:	f104 0a19 	add.w	sl, r4, #25
    d432:	68e3      	ldr	r3, [r4, #12]
    d434:	f8d9 2000 	ldr.w	r2, [r9]
    d438:	1a9b      	subs	r3, r3, r2
    d43a:	429d      	cmp	r5, r3
    d43c:	db29      	blt.n	d492 <_printf_common+0xa6>
    d43e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d442:	6822      	ldr	r2, [r4, #0]
    d444:	3300      	adds	r3, #0
    d446:	bf18      	it	ne
    d448:	2301      	movne	r3, #1
    d44a:	0692      	lsls	r2, r2, #26
    d44c:	d42e      	bmi.n	d4ac <_printf_common+0xc0>
    d44e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d452:	4639      	mov	r1, r7
    d454:	4630      	mov	r0, r6
    d456:	47c0      	blx	r8
    d458:	3001      	adds	r0, #1
    d45a:	d021      	beq.n	d4a0 <_printf_common+0xb4>
    d45c:	6823      	ldr	r3, [r4, #0]
    d45e:	68e5      	ldr	r5, [r4, #12]
    d460:	f8d9 2000 	ldr.w	r2, [r9]
    d464:	f003 0306 	and.w	r3, r3, #6
    d468:	2b04      	cmp	r3, #4
    d46a:	bf08      	it	eq
    d46c:	1aad      	subeq	r5, r5, r2
    d46e:	68a3      	ldr	r3, [r4, #8]
    d470:	6922      	ldr	r2, [r4, #16]
    d472:	bf0c      	ite	eq
    d474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    d478:	2500      	movne	r5, #0
    d47a:	4293      	cmp	r3, r2
    d47c:	bfc4      	itt	gt
    d47e:	1a9b      	subgt	r3, r3, r2
    d480:	18ed      	addgt	r5, r5, r3
    d482:	f04f 0900 	mov.w	r9, #0
    d486:	341a      	adds	r4, #26
    d488:	454d      	cmp	r5, r9
    d48a:	d11b      	bne.n	d4c4 <_printf_common+0xd8>
    d48c:	2000      	movs	r0, #0
    d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d492:	2301      	movs	r3, #1
    d494:	4652      	mov	r2, sl
    d496:	4639      	mov	r1, r7
    d498:	4630      	mov	r0, r6
    d49a:	47c0      	blx	r8
    d49c:	3001      	adds	r0, #1
    d49e:	d103      	bne.n	d4a8 <_printf_common+0xbc>
    d4a0:	f04f 30ff 	mov.w	r0, #4294967295
    d4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d4a8:	3501      	adds	r5, #1
    d4aa:	e7c2      	b.n	d432 <_printf_common+0x46>
    d4ac:	18e1      	adds	r1, r4, r3
    d4ae:	1c5a      	adds	r2, r3, #1
    d4b0:	2030      	movs	r0, #48	; 0x30
    d4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d4b6:	4422      	add	r2, r4
    d4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    d4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    d4c0:	3302      	adds	r3, #2
    d4c2:	e7c4      	b.n	d44e <_printf_common+0x62>
    d4c4:	2301      	movs	r3, #1
    d4c6:	4622      	mov	r2, r4
    d4c8:	4639      	mov	r1, r7
    d4ca:	4630      	mov	r0, r6
    d4cc:	47c0      	blx	r8
    d4ce:	3001      	adds	r0, #1
    d4d0:	d0e6      	beq.n	d4a0 <_printf_common+0xb4>
    d4d2:	f109 0901 	add.w	r9, r9, #1
    d4d6:	e7d7      	b.n	d488 <_printf_common+0x9c>

0000d4d8 <_printf_i>:
    d4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d4dc:	4617      	mov	r7, r2
    d4de:	7e0a      	ldrb	r2, [r1, #24]
    d4e0:	b085      	sub	sp, #20
    d4e2:	2a6e      	cmp	r2, #110	; 0x6e
    d4e4:	4698      	mov	r8, r3
    d4e6:	4606      	mov	r6, r0
    d4e8:	460c      	mov	r4, r1
    d4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d4ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    d4f0:	f000 80bc 	beq.w	d66c <_printf_i+0x194>
    d4f4:	d81a      	bhi.n	d52c <_printf_i+0x54>
    d4f6:	2a63      	cmp	r2, #99	; 0x63
    d4f8:	d02e      	beq.n	d558 <_printf_i+0x80>
    d4fa:	d80a      	bhi.n	d512 <_printf_i+0x3a>
    d4fc:	2a00      	cmp	r2, #0
    d4fe:	f000 80c8 	beq.w	d692 <_printf_i+0x1ba>
    d502:	2a58      	cmp	r2, #88	; 0x58
    d504:	f000 808a 	beq.w	d61c <_printf_i+0x144>
    d508:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d50c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    d510:	e02a      	b.n	d568 <_printf_i+0x90>
    d512:	2a64      	cmp	r2, #100	; 0x64
    d514:	d001      	beq.n	d51a <_printf_i+0x42>
    d516:	2a69      	cmp	r2, #105	; 0x69
    d518:	d1f6      	bne.n	d508 <_printf_i+0x30>
    d51a:	6821      	ldr	r1, [r4, #0]
    d51c:	681a      	ldr	r2, [r3, #0]
    d51e:	f011 0f80 	tst.w	r1, #128	; 0x80
    d522:	d023      	beq.n	d56c <_printf_i+0x94>
    d524:	1d11      	adds	r1, r2, #4
    d526:	6019      	str	r1, [r3, #0]
    d528:	6813      	ldr	r3, [r2, #0]
    d52a:	e027      	b.n	d57c <_printf_i+0xa4>
    d52c:	2a73      	cmp	r2, #115	; 0x73
    d52e:	f000 80b4 	beq.w	d69a <_printf_i+0x1c2>
    d532:	d808      	bhi.n	d546 <_printf_i+0x6e>
    d534:	2a6f      	cmp	r2, #111	; 0x6f
    d536:	d02a      	beq.n	d58e <_printf_i+0xb6>
    d538:	2a70      	cmp	r2, #112	; 0x70
    d53a:	d1e5      	bne.n	d508 <_printf_i+0x30>
    d53c:	680a      	ldr	r2, [r1, #0]
    d53e:	f042 0220 	orr.w	r2, r2, #32
    d542:	600a      	str	r2, [r1, #0]
    d544:	e003      	b.n	d54e <_printf_i+0x76>
    d546:	2a75      	cmp	r2, #117	; 0x75
    d548:	d021      	beq.n	d58e <_printf_i+0xb6>
    d54a:	2a78      	cmp	r2, #120	; 0x78
    d54c:	d1dc      	bne.n	d508 <_printf_i+0x30>
    d54e:	2278      	movs	r2, #120	; 0x78
    d550:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d554:	496e      	ldr	r1, [pc, #440]	; (d710 <_printf_i+0x238>)
    d556:	e064      	b.n	d622 <_printf_i+0x14a>
    d558:	681a      	ldr	r2, [r3, #0]
    d55a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    d55e:	1d11      	adds	r1, r2, #4
    d560:	6019      	str	r1, [r3, #0]
    d562:	6813      	ldr	r3, [r2, #0]
    d564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d568:	2301      	movs	r3, #1
    d56a:	e0a3      	b.n	d6b4 <_printf_i+0x1dc>
    d56c:	f011 0f40 	tst.w	r1, #64	; 0x40
    d570:	f102 0104 	add.w	r1, r2, #4
    d574:	6019      	str	r1, [r3, #0]
    d576:	d0d7      	beq.n	d528 <_printf_i+0x50>
    d578:	f9b2 3000 	ldrsh.w	r3, [r2]
    d57c:	2b00      	cmp	r3, #0
    d57e:	da03      	bge.n	d588 <_printf_i+0xb0>
    d580:	222d      	movs	r2, #45	; 0x2d
    d582:	425b      	negs	r3, r3
    d584:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    d588:	4962      	ldr	r1, [pc, #392]	; (d714 <_printf_i+0x23c>)
    d58a:	220a      	movs	r2, #10
    d58c:	e017      	b.n	d5be <_printf_i+0xe6>
    d58e:	6820      	ldr	r0, [r4, #0]
    d590:	6819      	ldr	r1, [r3, #0]
    d592:	f010 0f80 	tst.w	r0, #128	; 0x80
    d596:	d003      	beq.n	d5a0 <_printf_i+0xc8>
    d598:	1d08      	adds	r0, r1, #4
    d59a:	6018      	str	r0, [r3, #0]
    d59c:	680b      	ldr	r3, [r1, #0]
    d59e:	e006      	b.n	d5ae <_printf_i+0xd6>
    d5a0:	f010 0f40 	tst.w	r0, #64	; 0x40
    d5a4:	f101 0004 	add.w	r0, r1, #4
    d5a8:	6018      	str	r0, [r3, #0]
    d5aa:	d0f7      	beq.n	d59c <_printf_i+0xc4>
    d5ac:	880b      	ldrh	r3, [r1, #0]
    d5ae:	4959      	ldr	r1, [pc, #356]	; (d714 <_printf_i+0x23c>)
    d5b0:	2a6f      	cmp	r2, #111	; 0x6f
    d5b2:	bf14      	ite	ne
    d5b4:	220a      	movne	r2, #10
    d5b6:	2208      	moveq	r2, #8
    d5b8:	2000      	movs	r0, #0
    d5ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d5be:	6865      	ldr	r5, [r4, #4]
    d5c0:	60a5      	str	r5, [r4, #8]
    d5c2:	2d00      	cmp	r5, #0
    d5c4:	f2c0 809c 	blt.w	d700 <_printf_i+0x228>
    d5c8:	6820      	ldr	r0, [r4, #0]
    d5ca:	f020 0004 	bic.w	r0, r0, #4
    d5ce:	6020      	str	r0, [r4, #0]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d13f      	bne.n	d654 <_printf_i+0x17c>
    d5d4:	2d00      	cmp	r5, #0
    d5d6:	f040 8095 	bne.w	d704 <_printf_i+0x22c>
    d5da:	4675      	mov	r5, lr
    d5dc:	2a08      	cmp	r2, #8
    d5de:	d10b      	bne.n	d5f8 <_printf_i+0x120>
    d5e0:	6823      	ldr	r3, [r4, #0]
    d5e2:	07da      	lsls	r2, r3, #31
    d5e4:	d508      	bpl.n	d5f8 <_printf_i+0x120>
    d5e6:	6923      	ldr	r3, [r4, #16]
    d5e8:	6862      	ldr	r2, [r4, #4]
    d5ea:	429a      	cmp	r2, r3
    d5ec:	bfde      	ittt	le
    d5ee:	2330      	movle	r3, #48	; 0x30
    d5f0:	f805 3c01 	strble.w	r3, [r5, #-1]
    d5f4:	f105 35ff 	addle.w	r5, r5, #4294967295
    d5f8:	ebae 0305 	sub.w	r3, lr, r5
    d5fc:	6123      	str	r3, [r4, #16]
    d5fe:	f8cd 8000 	str.w	r8, [sp]
    d602:	463b      	mov	r3, r7
    d604:	aa03      	add	r2, sp, #12
    d606:	4621      	mov	r1, r4
    d608:	4630      	mov	r0, r6
    d60a:	f7ff feef 	bl	d3ec <_printf_common>
    d60e:	3001      	adds	r0, #1
    d610:	d155      	bne.n	d6be <_printf_i+0x1e6>
    d612:	f04f 30ff 	mov.w	r0, #4294967295
    d616:	b005      	add	sp, #20
    d618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d61c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d620:	493c      	ldr	r1, [pc, #240]	; (d714 <_printf_i+0x23c>)
    d622:	6822      	ldr	r2, [r4, #0]
    d624:	6818      	ldr	r0, [r3, #0]
    d626:	f012 0f80 	tst.w	r2, #128	; 0x80
    d62a:	f100 0504 	add.w	r5, r0, #4
    d62e:	601d      	str	r5, [r3, #0]
    d630:	d001      	beq.n	d636 <_printf_i+0x15e>
    d632:	6803      	ldr	r3, [r0, #0]
    d634:	e002      	b.n	d63c <_printf_i+0x164>
    d636:	0655      	lsls	r5, r2, #25
    d638:	d5fb      	bpl.n	d632 <_printf_i+0x15a>
    d63a:	8803      	ldrh	r3, [r0, #0]
    d63c:	07d0      	lsls	r0, r2, #31
    d63e:	bf44      	itt	mi
    d640:	f042 0220 	orrmi.w	r2, r2, #32
    d644:	6022      	strmi	r2, [r4, #0]
    d646:	b91b      	cbnz	r3, d650 <_printf_i+0x178>
    d648:	6822      	ldr	r2, [r4, #0]
    d64a:	f022 0220 	bic.w	r2, r2, #32
    d64e:	6022      	str	r2, [r4, #0]
    d650:	2210      	movs	r2, #16
    d652:	e7b1      	b.n	d5b8 <_printf_i+0xe0>
    d654:	4675      	mov	r5, lr
    d656:	fbb3 f0f2 	udiv	r0, r3, r2
    d65a:	fb02 3310 	mls	r3, r2, r0, r3
    d65e:	5ccb      	ldrb	r3, [r1, r3]
    d660:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d664:	4603      	mov	r3, r0
    d666:	2800      	cmp	r0, #0
    d668:	d1f5      	bne.n	d656 <_printf_i+0x17e>
    d66a:	e7b7      	b.n	d5dc <_printf_i+0x104>
    d66c:	6808      	ldr	r0, [r1, #0]
    d66e:	681a      	ldr	r2, [r3, #0]
    d670:	6949      	ldr	r1, [r1, #20]
    d672:	f010 0f80 	tst.w	r0, #128	; 0x80
    d676:	d004      	beq.n	d682 <_printf_i+0x1aa>
    d678:	1d10      	adds	r0, r2, #4
    d67a:	6018      	str	r0, [r3, #0]
    d67c:	6813      	ldr	r3, [r2, #0]
    d67e:	6019      	str	r1, [r3, #0]
    d680:	e007      	b.n	d692 <_printf_i+0x1ba>
    d682:	f010 0f40 	tst.w	r0, #64	; 0x40
    d686:	f102 0004 	add.w	r0, r2, #4
    d68a:	6018      	str	r0, [r3, #0]
    d68c:	6813      	ldr	r3, [r2, #0]
    d68e:	d0f6      	beq.n	d67e <_printf_i+0x1a6>
    d690:	8019      	strh	r1, [r3, #0]
    d692:	2300      	movs	r3, #0
    d694:	6123      	str	r3, [r4, #16]
    d696:	4675      	mov	r5, lr
    d698:	e7b1      	b.n	d5fe <_printf_i+0x126>
    d69a:	681a      	ldr	r2, [r3, #0]
    d69c:	1d11      	adds	r1, r2, #4
    d69e:	6019      	str	r1, [r3, #0]
    d6a0:	6815      	ldr	r5, [r2, #0]
    d6a2:	6862      	ldr	r2, [r4, #4]
    d6a4:	2100      	movs	r1, #0
    d6a6:	4628      	mov	r0, r5
    d6a8:	f000 f8d2 	bl	d850 <memchr>
    d6ac:	b108      	cbz	r0, d6b2 <_printf_i+0x1da>
    d6ae:	1b40      	subs	r0, r0, r5
    d6b0:	6060      	str	r0, [r4, #4]
    d6b2:	6863      	ldr	r3, [r4, #4]
    d6b4:	6123      	str	r3, [r4, #16]
    d6b6:	2300      	movs	r3, #0
    d6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d6bc:	e79f      	b.n	d5fe <_printf_i+0x126>
    d6be:	6923      	ldr	r3, [r4, #16]
    d6c0:	462a      	mov	r2, r5
    d6c2:	4639      	mov	r1, r7
    d6c4:	4630      	mov	r0, r6
    d6c6:	47c0      	blx	r8
    d6c8:	3001      	adds	r0, #1
    d6ca:	d0a2      	beq.n	d612 <_printf_i+0x13a>
    d6cc:	6823      	ldr	r3, [r4, #0]
    d6ce:	079b      	lsls	r3, r3, #30
    d6d0:	d507      	bpl.n	d6e2 <_printf_i+0x20a>
    d6d2:	2500      	movs	r5, #0
    d6d4:	f104 0919 	add.w	r9, r4, #25
    d6d8:	68e3      	ldr	r3, [r4, #12]
    d6da:	9a03      	ldr	r2, [sp, #12]
    d6dc:	1a9b      	subs	r3, r3, r2
    d6de:	429d      	cmp	r5, r3
    d6e0:	db05      	blt.n	d6ee <_printf_i+0x216>
    d6e2:	68e0      	ldr	r0, [r4, #12]
    d6e4:	9b03      	ldr	r3, [sp, #12]
    d6e6:	4298      	cmp	r0, r3
    d6e8:	bfb8      	it	lt
    d6ea:	4618      	movlt	r0, r3
    d6ec:	e793      	b.n	d616 <_printf_i+0x13e>
    d6ee:	2301      	movs	r3, #1
    d6f0:	464a      	mov	r2, r9
    d6f2:	4639      	mov	r1, r7
    d6f4:	4630      	mov	r0, r6
    d6f6:	47c0      	blx	r8
    d6f8:	3001      	adds	r0, #1
    d6fa:	d08a      	beq.n	d612 <_printf_i+0x13a>
    d6fc:	3501      	adds	r5, #1
    d6fe:	e7eb      	b.n	d6d8 <_printf_i+0x200>
    d700:	2b00      	cmp	r3, #0
    d702:	d1a7      	bne.n	d654 <_printf_i+0x17c>
    d704:	780b      	ldrb	r3, [r1, #0]
    d706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d70a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d70e:	e765      	b.n	d5dc <_printf_i+0x104>
    d710:	0000e682 	.word	0x0000e682
    d714:	0000e671 	.word	0x0000e671

0000d718 <__sread>:
    d718:	b510      	push	{r4, lr}
    d71a:	460c      	mov	r4, r1
    d71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d720:	f000 f926 	bl	d970 <_read_r>
    d724:	2800      	cmp	r0, #0
    d726:	bfab      	itete	ge
    d728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d72a:	89a3      	ldrhlt	r3, [r4, #12]
    d72c:	181b      	addge	r3, r3, r0
    d72e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d732:	bfac      	ite	ge
    d734:	6563      	strge	r3, [r4, #84]	; 0x54
    d736:	81a3      	strhlt	r3, [r4, #12]
    d738:	bd10      	pop	{r4, pc}

0000d73a <__swrite>:
    d73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d73e:	461f      	mov	r7, r3
    d740:	898b      	ldrh	r3, [r1, #12]
    d742:	05db      	lsls	r3, r3, #23
    d744:	4605      	mov	r5, r0
    d746:	460c      	mov	r4, r1
    d748:	4616      	mov	r6, r2
    d74a:	d505      	bpl.n	d758 <__swrite+0x1e>
    d74c:	2302      	movs	r3, #2
    d74e:	2200      	movs	r2, #0
    d750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d754:	f000 f868 	bl	d828 <_lseek_r>
    d758:	89a3      	ldrh	r3, [r4, #12]
    d75a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d75e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d762:	81a3      	strh	r3, [r4, #12]
    d764:	4632      	mov	r2, r6
    d766:	463b      	mov	r3, r7
    d768:	4628      	mov	r0, r5
    d76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d76e:	f000 b817 	b.w	d7a0 <_write_r>

0000d772 <__sseek>:
    d772:	b510      	push	{r4, lr}
    d774:	460c      	mov	r4, r1
    d776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d77a:	f000 f855 	bl	d828 <_lseek_r>
    d77e:	1c43      	adds	r3, r0, #1
    d780:	89a3      	ldrh	r3, [r4, #12]
    d782:	bf15      	itete	ne
    d784:	6560      	strne	r0, [r4, #84]	; 0x54
    d786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d78a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d78e:	81a3      	strheq	r3, [r4, #12]
    d790:	bf18      	it	ne
    d792:	81a3      	strhne	r3, [r4, #12]
    d794:	bd10      	pop	{r4, pc}

0000d796 <__sclose>:
    d796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d79a:	f000 b813 	b.w	d7c4 <_close_r>
	...

0000d7a0 <_write_r>:
    d7a0:	b538      	push	{r3, r4, r5, lr}
    d7a2:	4c07      	ldr	r4, [pc, #28]	; (d7c0 <_write_r+0x20>)
    d7a4:	4605      	mov	r5, r0
    d7a6:	4608      	mov	r0, r1
    d7a8:	4611      	mov	r1, r2
    d7aa:	2200      	movs	r2, #0
    d7ac:	6022      	str	r2, [r4, #0]
    d7ae:	461a      	mov	r2, r3
    d7b0:	f7fd f852 	bl	a858 <_write>
    d7b4:	1c43      	adds	r3, r0, #1
    d7b6:	d102      	bne.n	d7be <_write_r+0x1e>
    d7b8:	6823      	ldr	r3, [r4, #0]
    d7ba:	b103      	cbz	r3, d7be <_write_r+0x1e>
    d7bc:	602b      	str	r3, [r5, #0]
    d7be:	bd38      	pop	{r3, r4, r5, pc}
    d7c0:	20007d50 	.word	0x20007d50

0000d7c4 <_close_r>:
    d7c4:	b538      	push	{r3, r4, r5, lr}
    d7c6:	4c06      	ldr	r4, [pc, #24]	; (d7e0 <_close_r+0x1c>)
    d7c8:	2300      	movs	r3, #0
    d7ca:	4605      	mov	r5, r0
    d7cc:	4608      	mov	r0, r1
    d7ce:	6023      	str	r3, [r4, #0]
    d7d0:	f7f8 fcc4 	bl	615c <_close>
    d7d4:	1c43      	adds	r3, r0, #1
    d7d6:	d102      	bne.n	d7de <_close_r+0x1a>
    d7d8:	6823      	ldr	r3, [r4, #0]
    d7da:	b103      	cbz	r3, d7de <_close_r+0x1a>
    d7dc:	602b      	str	r3, [r5, #0]
    d7de:	bd38      	pop	{r3, r4, r5, pc}
    d7e0:	20007d50 	.word	0x20007d50

0000d7e4 <_fstat_r>:
    d7e4:	b538      	push	{r3, r4, r5, lr}
    d7e6:	4c07      	ldr	r4, [pc, #28]	; (d804 <_fstat_r+0x20>)
    d7e8:	2300      	movs	r3, #0
    d7ea:	4605      	mov	r5, r0
    d7ec:	4608      	mov	r0, r1
    d7ee:	4611      	mov	r1, r2
    d7f0:	6023      	str	r3, [r4, #0]
    d7f2:	f7f8 fcb6 	bl	6162 <_fstat>
    d7f6:	1c43      	adds	r3, r0, #1
    d7f8:	d102      	bne.n	d800 <_fstat_r+0x1c>
    d7fa:	6823      	ldr	r3, [r4, #0]
    d7fc:	b103      	cbz	r3, d800 <_fstat_r+0x1c>
    d7fe:	602b      	str	r3, [r5, #0]
    d800:	bd38      	pop	{r3, r4, r5, pc}
    d802:	bf00      	nop
    d804:	20007d50 	.word	0x20007d50

0000d808 <_isatty_r>:
    d808:	b538      	push	{r3, r4, r5, lr}
    d80a:	4c06      	ldr	r4, [pc, #24]	; (d824 <_isatty_r+0x1c>)
    d80c:	2300      	movs	r3, #0
    d80e:	4605      	mov	r5, r0
    d810:	4608      	mov	r0, r1
    d812:	6023      	str	r3, [r4, #0]
    d814:	f7f8 fcaa 	bl	616c <_isatty>
    d818:	1c43      	adds	r3, r0, #1
    d81a:	d102      	bne.n	d822 <_isatty_r+0x1a>
    d81c:	6823      	ldr	r3, [r4, #0]
    d81e:	b103      	cbz	r3, d822 <_isatty_r+0x1a>
    d820:	602b      	str	r3, [r5, #0]
    d822:	bd38      	pop	{r3, r4, r5, pc}
    d824:	20007d50 	.word	0x20007d50

0000d828 <_lseek_r>:
    d828:	b538      	push	{r3, r4, r5, lr}
    d82a:	4c07      	ldr	r4, [pc, #28]	; (d848 <_lseek_r+0x20>)
    d82c:	4605      	mov	r5, r0
    d82e:	4608      	mov	r0, r1
    d830:	4611      	mov	r1, r2
    d832:	2200      	movs	r2, #0
    d834:	6022      	str	r2, [r4, #0]
    d836:	461a      	mov	r2, r3
    d838:	f7f8 fc9a 	bl	6170 <_lseek>
    d83c:	1c43      	adds	r3, r0, #1
    d83e:	d102      	bne.n	d846 <_lseek_r+0x1e>
    d840:	6823      	ldr	r3, [r4, #0]
    d842:	b103      	cbz	r3, d846 <_lseek_r+0x1e>
    d844:	602b      	str	r3, [r5, #0]
    d846:	bd38      	pop	{r3, r4, r5, pc}
    d848:	20007d50 	.word	0x20007d50
    d84c:	00000000 	.word	0x00000000

0000d850 <memchr>:
    d850:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d854:	2a10      	cmp	r2, #16
    d856:	db2b      	blt.n	d8b0 <memchr+0x60>
    d858:	f010 0f07 	tst.w	r0, #7
    d85c:	d008      	beq.n	d870 <memchr+0x20>
    d85e:	f810 3b01 	ldrb.w	r3, [r0], #1
    d862:	3a01      	subs	r2, #1
    d864:	428b      	cmp	r3, r1
    d866:	d02d      	beq.n	d8c4 <memchr+0x74>
    d868:	f010 0f07 	tst.w	r0, #7
    d86c:	b342      	cbz	r2, d8c0 <memchr+0x70>
    d86e:	d1f6      	bne.n	d85e <memchr+0xe>
    d870:	b4f0      	push	{r4, r5, r6, r7}
    d872:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d876:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d87a:	f022 0407 	bic.w	r4, r2, #7
    d87e:	f07f 0700 	mvns.w	r7, #0
    d882:	2300      	movs	r3, #0
    d884:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d888:	3c08      	subs	r4, #8
    d88a:	ea85 0501 	eor.w	r5, r5, r1
    d88e:	ea86 0601 	eor.w	r6, r6, r1
    d892:	fa85 f547 	uadd8	r5, r5, r7
    d896:	faa3 f587 	sel	r5, r3, r7
    d89a:	fa86 f647 	uadd8	r6, r6, r7
    d89e:	faa5 f687 	sel	r6, r5, r7
    d8a2:	b98e      	cbnz	r6, d8c8 <memchr+0x78>
    d8a4:	d1ee      	bne.n	d884 <memchr+0x34>
    d8a6:	bcf0      	pop	{r4, r5, r6, r7}
    d8a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d8ac:	f002 0207 	and.w	r2, r2, #7
    d8b0:	b132      	cbz	r2, d8c0 <memchr+0x70>
    d8b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    d8b6:	3a01      	subs	r2, #1
    d8b8:	ea83 0301 	eor.w	r3, r3, r1
    d8bc:	b113      	cbz	r3, d8c4 <memchr+0x74>
    d8be:	d1f8      	bne.n	d8b2 <memchr+0x62>
    d8c0:	2000      	movs	r0, #0
    d8c2:	4770      	bx	lr
    d8c4:	3801      	subs	r0, #1
    d8c6:	4770      	bx	lr
    d8c8:	2d00      	cmp	r5, #0
    d8ca:	bf06      	itte	eq
    d8cc:	4635      	moveq	r5, r6
    d8ce:	3803      	subeq	r0, #3
    d8d0:	3807      	subne	r0, #7
    d8d2:	f015 0f01 	tst.w	r5, #1
    d8d6:	d107      	bne.n	d8e8 <memchr+0x98>
    d8d8:	3001      	adds	r0, #1
    d8da:	f415 7f80 	tst.w	r5, #256	; 0x100
    d8de:	bf02      	ittt	eq
    d8e0:	3001      	addeq	r0, #1
    d8e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d8e6:	3001      	addeq	r0, #1
    d8e8:	bcf0      	pop	{r4, r5, r6, r7}
    d8ea:	3801      	subs	r0, #1
    d8ec:	4770      	bx	lr
    d8ee:	bf00      	nop

0000d8f0 <memmove>:
    d8f0:	4288      	cmp	r0, r1
    d8f2:	b510      	push	{r4, lr}
    d8f4:	eb01 0302 	add.w	r3, r1, r2
    d8f8:	d803      	bhi.n	d902 <memmove+0x12>
    d8fa:	1e42      	subs	r2, r0, #1
    d8fc:	4299      	cmp	r1, r3
    d8fe:	d10c      	bne.n	d91a <memmove+0x2a>
    d900:	bd10      	pop	{r4, pc}
    d902:	4298      	cmp	r0, r3
    d904:	d2f9      	bcs.n	d8fa <memmove+0xa>
    d906:	1881      	adds	r1, r0, r2
    d908:	1ad2      	subs	r2, r2, r3
    d90a:	42d3      	cmn	r3, r2
    d90c:	d100      	bne.n	d910 <memmove+0x20>
    d90e:	bd10      	pop	{r4, pc}
    d910:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d914:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d918:	e7f7      	b.n	d90a <memmove+0x1a>
    d91a:	f811 4b01 	ldrb.w	r4, [r1], #1
    d91e:	f802 4f01 	strb.w	r4, [r2, #1]!
    d922:	e7eb      	b.n	d8fc <memmove+0xc>

0000d924 <_realloc_r>:
    d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d926:	4607      	mov	r7, r0
    d928:	4614      	mov	r4, r2
    d92a:	460e      	mov	r6, r1
    d92c:	b921      	cbnz	r1, d938 <_realloc_r+0x14>
    d92e:	4611      	mov	r1, r2
    d930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d934:	f7fe be5e 	b.w	c5f4 <_malloc_r>
    d938:	b922      	cbnz	r2, d944 <_realloc_r+0x20>
    d93a:	f7fe fe0d 	bl	c558 <_free_r>
    d93e:	4625      	mov	r5, r4
    d940:	4628      	mov	r0, r5
    d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d944:	f000 f826 	bl	d994 <_malloc_usable_size_r>
    d948:	4284      	cmp	r4, r0
    d94a:	d90f      	bls.n	d96c <_realloc_r+0x48>
    d94c:	4621      	mov	r1, r4
    d94e:	4638      	mov	r0, r7
    d950:	f7fe fe50 	bl	c5f4 <_malloc_r>
    d954:	4605      	mov	r5, r0
    d956:	2800      	cmp	r0, #0
    d958:	d0f2      	beq.n	d940 <_realloc_r+0x1c>
    d95a:	4631      	mov	r1, r6
    d95c:	4622      	mov	r2, r4
    d95e:	f7fe fde7 	bl	c530 <memcpy>
    d962:	4631      	mov	r1, r6
    d964:	4638      	mov	r0, r7
    d966:	f7fe fdf7 	bl	c558 <_free_r>
    d96a:	e7e9      	b.n	d940 <_realloc_r+0x1c>
    d96c:	4635      	mov	r5, r6
    d96e:	e7e7      	b.n	d940 <_realloc_r+0x1c>

0000d970 <_read_r>:
    d970:	b538      	push	{r3, r4, r5, lr}
    d972:	4c07      	ldr	r4, [pc, #28]	; (d990 <_read_r+0x20>)
    d974:	4605      	mov	r5, r0
    d976:	4608      	mov	r0, r1
    d978:	4611      	mov	r1, r2
    d97a:	2200      	movs	r2, #0
    d97c:	6022      	str	r2, [r4, #0]
    d97e:	461a      	mov	r2, r3
    d980:	f7fc ff5a 	bl	a838 <_read>
    d984:	1c43      	adds	r3, r0, #1
    d986:	d102      	bne.n	d98e <_read_r+0x1e>
    d988:	6823      	ldr	r3, [r4, #0]
    d98a:	b103      	cbz	r3, d98e <_read_r+0x1e>
    d98c:	602b      	str	r3, [r5, #0]
    d98e:	bd38      	pop	{r3, r4, r5, pc}
    d990:	20007d50 	.word	0x20007d50

0000d994 <_malloc_usable_size_r>:
    d994:	f851 0c04 	ldr.w	r0, [r1, #-4]
    d998:	2800      	cmp	r0, #0
    d99a:	f1a0 0004 	sub.w	r0, r0, #4
    d99e:	bfbc      	itt	lt
    d9a0:	580b      	ldrlt	r3, [r1, r0]
    d9a2:	18c0      	addlt	r0, r0, r3
    d9a4:	4770      	bx	lr
    d9a6:	0000      	movs	r0, r0
    d9a8:	682f2e2e 	.word	0x682f2e2e
    d9ac:	692f6c61 	.word	0x692f6c61
    d9b0:	756c636e 	.word	0x756c636e
    d9b4:	682f6564 	.word	0x682f6564
    d9b8:	775f6c61 	.word	0x775f6c61
    d9bc:	682e7464 	.word	0x682e7464
    d9c0:	00000000 	.word	0x00000000
    d9c4:	55204f4e 	.word	0x55204f4e
    d9c8:	20524553 	.word	0x20524553
    d9cc:	20574f52 	.word	0x20574f52
    d9d0:	43454843 	.word	0x43454843
    d9d4:	0000214b 	.word	0x0000214b
    d9d8:	7974227b 	.word	0x7974227b
    d9dc:	3a226570 	.word	0x3a226570
    d9e0:	52415722 	.word	0x52415722
    d9e4:	474e494e 	.word	0x474e494e
    d9e8:	22202c22 	.word	0x22202c22
    d9ec:	61746164 	.word	0x61746164
    d9f0:	5b203a22 	.word	0x5b203a22
    d9f4:	22732522 	.word	0x22732522
    d9f8:	0a0d7d5d 	.word	0x0a0d7d5d
    d9fc:	00000000 	.word	0x00000000
    da00:	55206f4e 	.word	0x55206f4e
    da04:	2074696e 	.word	0x2074696e
    da08:	74736554 	.word	0x74736554
    da0c:	00000000 	.word	0x00000000
    da10:	48206f4e 	.word	0x48206f4e
    da14:	77647261 	.word	0x77647261
    da18:	20657261 	.word	0x20657261
    da1c:	74736554 	.word	0x74736554
    da20:	00000000 	.word	0x00000000
    da24:	64616552 	.word	0x64616552
    da28:	20676e69 	.word	0x20676e69
    da2c:	72657355 	.word	0x72657355
    da30:	776f5220 	.word	0x776f5220
    da34:	00000000 	.word	0x00000000
    da38:	7974227b 	.word	0x7974227b
    da3c:	3a226570 	.word	0x3a226570
    da40:	474f4c22 	.word	0x474f4c22
    da44:	22202c22 	.word	0x22202c22
    da48:	61746164 	.word	0x61746164
    da4c:	5b203a22 	.word	0x5b203a22
    da50:	22732522 	.word	0x22732522
    da54:	0a0d7d5d 	.word	0x0a0d7d5d
    da58:	00000000 	.word	0x00000000
    da5c:	69726556 	.word	0x69726556
    da60:	6e697966 	.word	0x6e697966
    da64:	73552067 	.word	0x73552067
    da68:	52207265 	.word	0x52207265
    da6c:	0000776f 	.word	0x0000776f
    da70:	61647055 	.word	0x61647055
    da74:	676e6974 	.word	0x676e6974
    da78:	65735520 	.word	0x65735520
    da7c:	6f522072 	.word	0x6f522072
    da80:	00000077 	.word	0x00000077
    da84:	74737953 	.word	0x74737953
    da88:	52206d65 	.word	0x52206d65
    da8c:	74657365 	.word	0x74657365
    da90:	00000000 	.word	0x00000000
    da94:	68636e55 	.word	0x68636e55
    da98:	65676e61 	.word	0x65676e61
    da9c:	73552064 	.word	0x73552064
    daa0:	52207265 	.word	0x52207265
    daa4:	0000776f 	.word	0x0000776f
    daa8:	7974227b 	.word	0x7974227b
    daac:	3a226570 	.word	0x3a226570
    dab0:	44494d22 	.word	0x44494d22
    dab4:	202c2249 	.word	0x202c2249
    dab8:	74616422 	.word	0x74616422
    dabc:	203a2261 	.word	0x203a2261
    dac0:	6425225b 	.word	0x6425225b
    dac4:	22202c22 	.word	0x22202c22
    dac8:	2c226425 	.word	0x2c226425
    dacc:	64252220 	.word	0x64252220
    dad0:	22202c22 	.word	0x22202c22
    dad4:	2c226425 	.word	0x2c226425
    dad8:	64252220 	.word	0x64252220
    dadc:	22202c22 	.word	0x22202c22
    dae0:	5d226425 	.word	0x5d226425
    dae4:	000a0d7d 	.word	0x000a0d7d
    dae8:	4952475b 	.word	0x4952475b
    daec:	25205d44 	.word	0x25205d44
    daf0:	25206433 	.word	0x25206433
    daf4:	25206434 	.word	0x25206434
    daf8:	25206434 	.word	0x25206434
    dafc:	4d5b2064 	.word	0x4d5b2064
    db00:	5d494449 	.word	0x5d494449
    db04:	3a684320 	.word	0x3a684320
    db08:	20642520 	.word	0x20642520
    db0c:	646d4320 	.word	0x646d4320
    db10:	6425203a 	.word	0x6425203a
    db14:	61502020 	.word	0x61502020
    db18:	316d6172 	.word	0x316d6172
    db1c:	6425203a 	.word	0x6425203a
    db20:	61502020 	.word	0x61502020
    db24:	326d6172 	.word	0x326d6172
    db28:	6425203a 	.word	0x6425203a
    db2c:	0000000a 	.word	0x0000000a
    db30:	4952475b 	.word	0x4952475b
    db34:	25205d44 	.word	0x25205d44
    db38:	25206433 	.word	0x25206433
    db3c:	25206434 	.word	0x25206434
    db40:	25206434 	.word	0x25206434
    db44:	4b5b2064 	.word	0x4b5b2064
    db48:	4f425945 	.word	0x4f425945
    db4c:	5d445241 	.word	0x5d445241
    db50:	79654b20 	.word	0x79654b20
    db54:	6425203a 	.word	0x6425203a
    db58:	646f4d20 	.word	0x646f4d20
    db5c:	6425203a 	.word	0x6425203a
    db60:	646d4320 	.word	0x646d4320
    db64:	6425203a 	.word	0x6425203a
    db68:	4357480a 	.word	0x4357480a
    db6c:	203a4746 	.word	0x203a4746
    db70:	78383025 	.word	0x78383025
    db74:	0000000a 	.word	0x0000000a
    db78:	4952475b 	.word	0x4952475b
    db7c:	25205d44 	.word	0x25205d44
    db80:	25206433 	.word	0x25206433
    db84:	25206434 	.word	0x25206434
    db88:	25206434 	.word	0x25206434
    db8c:	535b2064 	.word	0x535b2064
    db90:	205d5359 	.word	0x205d5359
    db94:	20643325 	.word	0x20643325
    db98:	20643325 	.word	0x20643325
    db9c:	0a643325 	.word	0x0a643325
    dba0:	00000000 	.word	0x00000000
    dba4:	7974227b 	.word	0x7974227b
    dba8:	3a226570 	.word	0x3a226570
    dbac:	41454822 	.word	0x41454822
    dbb0:	45425452 	.word	0x45425452
    dbb4:	2c225441 	.word	0x2c225441
    dbb8:	61642220 	.word	0x61642220
    dbbc:	3a226174 	.word	0x3a226174
    dbc0:	25225b20 	.word	0x25225b20
    dbc4:	202c2264 	.word	0x202c2264
    dbc8:	22642522 	.word	0x22642522
    dbcc:	2522202c 	.word	0x2522202c
    dbd0:	7d5d2264 	.word	0x7d5d2264
    dbd4:	00000a0d 	.word	0x00000a0d
    dbd8:	4b4e555b 	.word	0x4b4e555b
    dbdc:	4e574f4e 	.word	0x4e574f4e
    dbe0:	3e2d205d 	.word	0x3e2d205d
    dbe4:	6f725020 	.word	0x6f725020
    dbe8:	6f636f74 	.word	0x6f636f74
    dbec:	25203a6c 	.word	0x25203a6c
    dbf0:	00000a64 	.word	0x00000a64
    dbf4:	0f0e0d0c 	.word	0x0f0e0d0c
    dbf8:	0b0a0908 	.word	0x0b0a0908
    dbfc:	07060504 	.word	0x07060504
    dc00:	03020100 	.word	0x03020100
    dc04:	30256325 	.word	0x30256325
    dc08:	30257832 	.word	0x30257832
    dc0c:	30257832 	.word	0x30257832
    dc10:	30257832 	.word	0x30257832
    dc14:	30257832 	.word	0x30257832
    dc18:	63257832 	.word	0x63257832
    dc1c:	00000000 	.word	0x00000000
    dc20:	78383025 	.word	0x78383025
    dc24:	00000000 	.word	0x00000000
    dc28:	64697267 	.word	0x64697267
    dc2c:	7379735f 	.word	0x7379735f
    dc30:	68633a3a 	.word	0x68633a3a
    dc34:	736b6365 	.word	0x736b6365
    dc38:	00006d75 	.word	0x00006d75
    dc3c:	63656843 	.word	0x63656843
    dc40:	6d75736b 	.word	0x6d75736b
    dc44:	61655220 	.word	0x61655220
    dc48:	61432f64 	.word	0x61432f64
    dc4c:	6c75636c 	.word	0x6c75636c
    dc50:	00657461 	.word	0x00657461
    dc54:	6b636170 	.word	0x6b636170
    dc58:	257b7465 	.word	0x257b7465
    dc5c:	25202c64 	.word	0x25202c64
    dc60:	25202c64 	.word	0x25202c64
    dc64:	25202c64 	.word	0x25202c64
    dc68:	25202c64 	.word	0x25202c64
    dc6c:	25202c64 	.word	0x25202c64
    dc70:	25202c64 	.word	0x25202c64
    dc74:	25202c64 	.word	0x25202c64
    dc78:	52207d64 	.word	0x52207d64
    dc7c:	3a646165 	.word	0x3a646165
    dc80:	2c642520 	.word	0x2c642520
    dc84:	6c614320 	.word	0x6c614320
    dc88:	616c7563 	.word	0x616c7563
    dc8c:	203a6574 	.word	0x203a6574
    dc90:	00006425 	.word	0x00006425
    dc94:	63656843 	.word	0x63656843
    dc98:	6d75736b 	.word	0x6d75736b
    dc9c:	69725720 	.word	0x69725720
    dca0:	432f6574 	.word	0x432f6574
    dca4:	75636c61 	.word	0x75636c61
    dca8:	6574616c 	.word	0x6574616c
    dcac:	00000000 	.word	0x00000000
    dcb0:	63656843 	.word	0x63656843
    dcb4:	6d75736b 	.word	0x6d75736b
    dcb8:	65764f20 	.word	0x65764f20
    dcbc:	69727772 	.word	0x69727772
    dcc0:	00006574 	.word	0x00006574
    dcc4:	61726150 	.word	0x61726150
    dcc8:	72706170 	.word	0x72706170
    dccc:	73616b69 	.word	0x73616b69
    dcd0:	00000000 	.word	0x00000000
    dcd4:	30256325 	.word	0x30256325
    dcd8:	30257832 	.word	0x30257832
    dcdc:	30257832 	.word	0x30257832
    dce0:	30257832 	.word	0x30257832
    dce4:	63257832 	.word	0x63257832
    dce8:	00000000 	.word	0x00000000
    dcec:	30256325 	.word	0x30256325
    dcf0:	30257832 	.word	0x30257832
    dcf4:	30257832 	.word	0x30257832
    dcf8:	63257832 	.word	0x63257832
    dcfc:	00000000 	.word	0x00000000
    dd00:	63256325 	.word	0x63256325
    dd04:	63256325 	.word	0x63256325
    dd08:	78323025 	.word	0x78323025
    dd0c:	78323025 	.word	0x78323025
    dd10:	78323025 	.word	0x78323025
    dd14:	30306325 	.word	0x30306325
    dd18:	0000000a 	.word	0x0000000a
    dd1c:	63256325 	.word	0x63256325
    dd20:	78323025 	.word	0x78323025
    dd24:	78323025 	.word	0x78323025
    dd28:	78323025 	.word	0x78323025
    dd2c:	78323025 	.word	0x78323025
    dd30:	78323025 	.word	0x78323025
    dd34:	00006325 	.word	0x00006325
    dd38:	78323025 	.word	0x78323025
    dd3c:	00000000 	.word	0x00000000
    dd40:	000a3030 	.word	0x000a3030
    dd44:	682f2e2e 	.word	0x682f2e2e
    dd48:	732f6c61 	.word	0x732f6c61
    dd4c:	682f6372 	.word	0x682f6372
    dd50:	615f6c61 	.word	0x615f6c61
    dd54:	615f6364 	.word	0x615f6364
    dd58:	636e7973 	.word	0x636e7973
    dd5c:	0000632e 	.word	0x0000632e
    dd60:	682f2e2e 	.word	0x682f2e2e
    dd64:	732f6c61 	.word	0x732f6c61
    dd68:	682f6372 	.word	0x682f6372
    dd6c:	635f6c61 	.word	0x635f6c61
    dd70:	735f6372 	.word	0x735f6372
    dd74:	2e636e79 	.word	0x2e636e79
    dd78:	00000063 	.word	0x00000063
    dd7c:	682f2e2e 	.word	0x682f2e2e
    dd80:	732f6c61 	.word	0x732f6c61
    dd84:	682f6372 	.word	0x682f6372
    dd88:	665f6c61 	.word	0x665f6c61
    dd8c:	6873616c 	.word	0x6873616c
    dd90:	0000632e 	.word	0x0000632e
    dd94:	682f2e2e 	.word	0x682f2e2e
    dd98:	732f6c61 	.word	0x732f6c61
    dd9c:	682f6372 	.word	0x682f6372
    dda0:	695f6c61 	.word	0x695f6c61
    dda4:	6d5f6332 	.word	0x6d5f6332
    dda8:	7973615f 	.word	0x7973615f
    ddac:	632e636e 	.word	0x632e636e
    ddb0:	00000000 	.word	0x00000000
    ddb4:	682f2e2e 	.word	0x682f2e2e
    ddb8:	732f6c61 	.word	0x732f6c61
    ddbc:	682f6372 	.word	0x682f6372
    ddc0:	695f6c61 	.word	0x695f6c61
    ddc4:	00632e6f 	.word	0x00632e6f
    ddc8:	682f2e2e 	.word	0x682f2e2e
    ddcc:	732f6c61 	.word	0x732f6c61
    ddd0:	682f6372 	.word	0x682f6372
    ddd4:	715f6c61 	.word	0x715f6c61
    ddd8:	5f697073 	.word	0x5f697073
    dddc:	2e616d64 	.word	0x2e616d64
    dde0:	00000063 	.word	0x00000063
    dde4:	682f2e2e 	.word	0x682f2e2e
    dde8:	732f6c61 	.word	0x732f6c61
    ddec:	682f6372 	.word	0x682f6372
    ddf0:	735f6c61 	.word	0x735f6c61
    ddf4:	6d5f6970 	.word	0x6d5f6970
    ddf8:	7973615f 	.word	0x7973615f
    ddfc:	632e636e 	.word	0x632e636e
    de00:	00000000 	.word	0x00000000
    de04:	682f2e2e 	.word	0x682f2e2e
    de08:	732f6c61 	.word	0x732f6c61
    de0c:	682f6372 	.word	0x682f6372
    de10:	735f6c61 	.word	0x735f6c61
    de14:	6d5f6970 	.word	0x6d5f6970
    de18:	616d645f 	.word	0x616d645f
    de1c:	0000632e 	.word	0x0000632e
    de20:	682f2e2e 	.word	0x682f2e2e
    de24:	732f6c61 	.word	0x732f6c61
    de28:	682f6372 	.word	0x682f6372
    de2c:	745f6c61 	.word	0x745f6c61
    de30:	72656d69 	.word	0x72656d69
    de34:	0000632e 	.word	0x0000632e
    de38:	682f2e2e 	.word	0x682f2e2e
    de3c:	732f6c61 	.word	0x732f6c61
    de40:	682f6372 	.word	0x682f6372
    de44:	755f6c61 	.word	0x755f6c61
    de48:	74726173 	.word	0x74726173
    de4c:	7973615f 	.word	0x7973615f
    de50:	632e636e 	.word	0x632e636e
    de54:	00000000 	.word	0x00000000
    de58:	682f2e2e 	.word	0x682f2e2e
    de5c:	732f6c61 	.word	0x732f6c61
    de60:	682f6372 	.word	0x682f6372
    de64:	755f6c61 	.word	0x755f6c61
    de68:	74726173 	.word	0x74726173
    de6c:	6e79735f 	.word	0x6e79735f
    de70:	00632e63 	.word	0x00632e63
    de74:	682f2e2e 	.word	0x682f2e2e
    de78:	752f6c61 	.word	0x752f6c61
    de7c:	736c6974 	.word	0x736c6974
    de80:	6372732f 	.word	0x6372732f
    de84:	6974752f 	.word	0x6974752f
    de88:	6c5f736c 	.word	0x6c5f736c
    de8c:	2e747369 	.word	0x2e747369
    de90:	00000063 	.word	0x00000063
    de94:	682f2e2e 	.word	0x682f2e2e
    de98:	752f6c61 	.word	0x752f6c61
    de9c:	736c6974 	.word	0x736c6974
    dea0:	6372732f 	.word	0x6372732f
    dea4:	6974752f 	.word	0x6974752f
    dea8:	725f736c 	.word	0x725f736c
    deac:	62676e69 	.word	0x62676e69
    deb0:	65666675 	.word	0x65666675
    deb4:	00632e72 	.word	0x00632e72

0000deb8 <_adcs>:
    deb8:	01000000 0003000c 00041807 00000000     ................
    dec8:	0014080b 00010000 000c0100 18040003     ................
    ded8:	00000004 080b0000 00000014 682f2e2e     ............../h
    dee8:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    def8:	00000000                                ....

0000defc <_cfgs>:
    defc:	00200600 08068000 00200400 08068000     .. ....... .....
    df0c:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    df2c:	00200b00 14000003 00200a00 08000002     .. ....... .....
    df3c:	00201300 14000003 00000000 00000000     .. .............
	...
    dfec:	00005400 1c000000 00005300 0c000000     .T.......S......

0000dffc <user_mux_confs>:
	...
    e028:	04030201 04030201 00000000 00000000     ................
	...

0000e040 <channel_confs>:
    e040:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000e080 <interrupt_cfg>:
    e080:	00000002 00000002 00000002 00000002     ................
	...
    e100:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    e110:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    e120:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    e130:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    e140:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    e150:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    e160:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000e170 <_usarts>:
    e170:	00000000 40100004 00030000 00700002     .......@......p.
    e180:	0000aaaa 00000000 00000001 40100004     ...............@
    e190:	00030000 00700002 0000aaaa 00000000     ......p.........
    e1a0:	00000002 40100004 00030000 00700002     .......@......p.
    e1b0:	00005555 00000000 00000004 40100004     UU.............@
    e1c0:	00030000 00700002 0000aaaa 00000000     ......p.........
    e1d0:	00000006 40100004 00030000 00700002     .......@......p.
    e1e0:	0000aaaa 00000000                       ........

0000e1e8 <_i2cms>:
    e1e8:	00000005 00200014 00000100 0000e6e5     ...... .........
    e1f8:	00d70000 02dc6c00                       .....l..

0000e200 <sercomspi_regs>:
    e200:	3020000c 00020000 00000000 01ff0005     .. 0............
    e210:	20000c03 00000000 00000000 ff000600     ... ............
    e220:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    e230:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    e240:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    e250:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000e260 <_tcs>:
    e260:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    e270:	00000000 006c0001 00000308 00000021     ......l.....!...
    e280:	00003a98 00000000 006d0002 00000308     .:........m.....
    e290:	00000021 00003a98 00000000 006e0003     !....:........n.
    e2a0:	00000308 00000021 00003a98 00000000     ....!....:......
    e2b0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    e2c0:	0000632e                                .c..

0000e2c4 <_usb_ep_cfgs>:
    e2c4:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    e2dc:	20000d20 00000000 00000008 20000ce0      .. ........... 
    e2ec:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    e304:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    e314:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    e324:	656d6954 2074756f 63736944 656e6e6f     Timeout Disconne
    e334:	26207463 73655220 52207465 69656365     ct & Reset Recei
    e344:	00726576 656d6954 2074756f 65522026     ver.Timeout & Re
    e354:	20746573 65636552 72657669 00000000     set Receiver....
    e364:	645f7872 6c62756f 75625f65 72656666     rx_double_buffer
    e374:	65766f20 6e757272 00003120 645f7872      overrun 1..rx_d
    e384:	6c62756f 75625f65 72656666 65766f20     ouble_buffer ove
    e394:	6e757272 00003220 645f7872 6c62756f     rrun 2..rx_doubl
    e3a4:	75625f65 72656666 65766f20 6e757272     e_buffer overrun
    e3b4:	00003320 6d617246 74532065 20747261      3..Frame Start 
    e3c4:	7366664f 00007465 6e6e6f43 00746365     Offset..Connect.
    e3d4:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
    e3e4:	202c2247 74616422 203a2261 6e55225b     G", "data": ["Un
    e3f4:	776f6e6b 73654d20 65676173 70795420     know Message Typ
    e404:	7d5d2265 0000000d 7974227b 3a226570     e"]}....{"type":
    e414:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
    e424:	203a2261 6e49225b 696c6176 68432064     a": ["Invalid Ch
    e434:	736b6365 5d226d75 00000d7d 7974227b     ecksum"]}...{"ty
    e444:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    e454:	22617461 225b203a 6d617246 72452065     ata": ["Frame Er
    e464:	22726f72 000d7d5d 7974227b 3a226570     ror"]}..{"type":
    e474:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    e484:	225b203a 69726150 45207974 726f7272     : ["Parity Error
    e494:	0d7d5d22 00000000 72617453 6e492074     "]}.....Start In
    e4a4:	61697469 657a696c 00000064 20313544     itialized...D51 
    e4b4:	74696e49 00000000 706d6f43 7469736f     Init....Composit
    e4c4:	65442065 65636976 696e4920 6c616974     e Device Initial
    e4d4:	64657a69 00000000 64697247 646f4d20     ized....Grid Mod
    e4e4:	20656c75 74696e49 696c6169 0064657a     ule Initialized.
    e4f4:	706f6f4c 00000000 706d6f43 7469736f     Loop....Composit
    e504:	65442065 65636976 6e6f4320 7463656e     e Device Connect
    e514:	00006465 7974227b 3a226570 53415422     ed..{"type":"TAS
    e524:	202c224b 74616422 203a2261 0000005b     K", "data": [...
    e534:	22642522 00000000 0000202c 7974227b     "%d"...., ..{"ty
    e544:	3a226570 4f4f4c22 202c2250 74616422     pe":"LOOP", "dat
    e554:	203a2261 6425225b 22202c22 2c226425     a": ["%d", "%d",
    e564:	64252220 22202c22 5d226425 000a0d7d      "%d", "%d"]}...

0000e574 <keyboard_report_desc>:
    e574:	06090105 070501a1 e729e019 01250015     ..........)...%.
    e584:	08950175 01810281 65290019 65250015     u.........)e..%e
    e594:	06950875 08050081 05290119 01250015     u.........)...%.
    e5a4:	05950175 03950291 00c00191              u...........

0000e5b0 <mouse_report_desc>:
    e5b0:	02090105 010901a1 090500a1 03290119     ..............).
    e5c0:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    e5d0:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    e5e0:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    e5f0:	73752f65 2e636462 00000063              e/usbdc.c...

0000e5fc <_global_impure_ptr>:
    e5fc:	2000055c                                \.. 

0000e600 <__sf_fake_stderr>:
	...

0000e620 <__sf_fake_stdin>:
	...

0000e640 <__sf_fake_stdout>:
	...
    e660:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    e670:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    e680:	31300046 35343332 39383736 64636261     F.0123456789abcd
    e690:	00006665                                ef..

0000e694 <_init>:
    e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e696:	bf00      	nop
    e698:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e69a:	bc08      	pop	{r3}
    e69c:	469e      	mov	lr, r3
    e69e:	4770      	bx	lr

0000e6a0 <__init_array_start>:
    e6a0:	00000289 	.word	0x00000289

0000e6a4 <_fini>:
    e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6a6:	bf00      	nop
    e6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e6aa:	bc08      	pop	{r3}
    e6ac:	469e      	mov	lr, r3
    e6ae:	4770      	bx	lr

0000e6b0 <__fini_array_start>:
    e6b0:	00000265 	.word	0x00000265
