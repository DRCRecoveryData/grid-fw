
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064c0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003d0  20000000  000064c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000203d0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000203d0  2**0
                  CONTENTS
  4 .bss          000011c8  200003d0  00006890  000203d0  2**4
                  ALLOC
  5 .stack        00010000  20001598  00007a58  000203d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000203fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00046e17  00000000  00000000  00020457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000064f2  00000000  00000000  0006726e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d7fb  00000000  00000000  0006d760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016b8  00000000  00000000  0008af5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001fb0  00000000  00000000  0008c613  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036623  00000000  00000000  0008e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002204d  00000000  00000000  000c4be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c7e6  00000000  00000000  000e6c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004170  00000000  00000000  001f341c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 15 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 bd 22 00 00 d1 22 00 00     ........."..."..
      bc:	d9 20 00 00 e5 20 00 00 f1 20 00 00 fd 20 00 00     . ... ... ... ..
      cc:	09 21 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .!..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	81 25 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .%..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 71 2d 00 00 85 2d 00 00 99 2d 00 00     ....q-...-...-..
     124:	ad 2d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .-..............
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 c1 2d 00 00 d5 2d 00 00 e9 2d 00 00     .....-...-...-..
     154:	fd 2d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .-..............
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 f5 43 00 00     .............C..
     184:	01 44 00 00 0d 44 00 00 19 44 00 00 00 00 00 00     .D...D...D......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 99 1d 00 00 ad 1d 00 00 c1 1d 00 00     ................
     224:	d5 1d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200003d0 	.word	0x200003d0
     280:	00000000 	.word	0x00000000
     284:	000064c0 	.word	0x000064c0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000064c0 	.word	0x000064c0
     2c4:	200003d4 	.word	0x200003d4
     2c8:	000064c0 	.word	0x000064c0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000845 	.word	0x00000845
     2e0:	0000575d 	.word	0x0000575d

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	000064c0 	.word	0x000064c0
     364:	200003d0 	.word	0x200003d0
     368:	20001598 	.word	0x20001598
     36c:	200003d0 	.word	0x200003d0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00005769 	.word	0x00005769
     37c:	00004aa9 	.word	0x00004aa9

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2240      	movs	r2, #64	; 0x40
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200003ec 	.word	0x200003ec
     400:	20001070 	.word	0x20001070
     404:	200010c8 	.word	0x200010c8
     408:	43001c00 	.word	0x43001c00
     40c:	000009c9 	.word	0x000009c9
     410:	00000a6d 	.word	0x00000a6d
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2240      	movs	r2, #64	; 0x40
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200003ec 	.word	0x200003ec
     4a4:	200010e0 	.word	0x200010e0
     4a8:	20000fc8 	.word	0x20000fc8
     4ac:	43002000 	.word	0x43002000
     4b0:	000009c9 	.word	0x000009c9
     4b4:	00000a6d 	.word	0x00000a6d
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20000fc4 	.word	0x20000fc4
     4e0:	00000d09 	.word	0x00000d09

000004e4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     4e4:	4a02      	ldr	r2, [pc, #8]	; (4f0 <FLASH_0_CLOCK_init+0xc>)
     4e6:	6913      	ldr	r3, [r2, #16]
     4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     4ec:	6113      	str	r3, [r2, #16]
     4ee:	4770      	bx	lr
     4f0:	40000800 	.word	0x40000800

000004f4 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <FLASH_0_init+0x10>)
     4f8:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     4fa:	4903      	ldr	r1, [pc, #12]	; (508 <FLASH_0_init+0x14>)
     4fc:	4803      	ldr	r0, [pc, #12]	; (50c <FLASH_0_init+0x18>)
     4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <FLASH_0_init+0x1c>)
     500:	4798      	blx	r3
     502:	bd08      	pop	{r3, pc}
     504:	000004e5 	.word	0x000004e5
     508:	41004000 	.word	0x41004000
     50c:	20000fa8 	.word	0x20000fa8
     510:	00000dc5 	.word	0x00000dc5

00000514 <GRID_AUX_CLOCK_init>:
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <GRID_AUX_CLOCK_init+0x1c>)
     516:	2240      	movs	r2, #64	; 0x40
     518:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     51c:	2243      	movs	r2, #67	; 0x43
     51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     522:	4a04      	ldr	r2, [pc, #16]	; (534 <GRID_AUX_CLOCK_init+0x20>)
     524:	6993      	ldr	r3, [r2, #24]
     526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     52a:	6193      	str	r3, [r2, #24]
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	40001c00 	.word	0x40001c00
     534:	40000800 	.word	0x40000800

00000538 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     538:	4b10      	ldr	r3, [pc, #64]	; (57c <GRID_AUX_PORT_init+0x44>)
     53a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     53e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     542:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     546:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     54e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     552:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     556:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     55a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     55e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     562:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     566:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     56a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     56e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     572:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     576:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     57a:	4770      	bx	lr
     57c:	41008000 	.word	0x41008000

00000580 <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     580:	b510      	push	{r4, lr}
     582:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <GRID_AUX_init+0x20>)
     586:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     588:	2300      	movs	r3, #0
     58a:	9300      	str	r3, [sp, #0]
     58c:	2310      	movs	r3, #16
     58e:	4a05      	ldr	r2, [pc, #20]	; (5a4 <GRID_AUX_init+0x24>)
     590:	4905      	ldr	r1, [pc, #20]	; (5a8 <GRID_AUX_init+0x28>)
     592:	4806      	ldr	r0, [pc, #24]	; (5ac <GRID_AUX_init+0x2c>)
     594:	4c06      	ldr	r4, [pc, #24]	; (5b0 <GRID_AUX_init+0x30>)
     596:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <GRID_AUX_init+0x34>)
     59a:	4798      	blx	r3
}
     59c:	b002      	add	sp, #8
     59e:	bd10      	pop	{r4, pc}
     5a0:	00000515 	.word	0x00000515
     5a4:	20000414 	.word	0x20000414
     5a8:	41012000 	.word	0x41012000
     5ac:	20001020 	.word	0x20001020
     5b0:	00001229 	.word	0x00001229
     5b4:	00000539 	.word	0x00000539

000005b8 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5b8:	4b16      	ldr	r3, [pc, #88]	; (614 <SYS_I2C_PORT_init+0x5c>)
     5ba:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     5be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5c2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5de:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     5ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     602:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     606:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     60a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     612:	4770      	bx	lr
     614:	41008000 	.word	0x41008000

00000618 <SYS_I2C_CLOCK_init>:
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <SYS_I2C_CLOCK_init+0x1c>)
     61a:	2240      	movs	r2, #64	; 0x40
     61c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     620:	2243      	movs	r2, #67	; 0x43
     622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     626:	4a04      	ldr	r2, [pc, #16]	; (638 <SYS_I2C_CLOCK_init+0x20>)
     628:	6a13      	ldr	r3, [r2, #32]
     62a:	f043 0302 	orr.w	r3, r3, #2
     62e:	6213      	str	r3, [r2, #32]
     630:	4770      	bx	lr
     632:	bf00      	nop
     634:	40001c00 	.word	0x40001c00
     638:	40000800 	.word	0x40000800

0000063c <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     63c:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     63e:	4b04      	ldr	r3, [pc, #16]	; (650 <SYS_I2C_init+0x14>)
     640:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     642:	4904      	ldr	r1, [pc, #16]	; (654 <SYS_I2C_init+0x18>)
     644:	4804      	ldr	r0, [pc, #16]	; (658 <SYS_I2C_init+0x1c>)
     646:	4b05      	ldr	r3, [pc, #20]	; (65c <SYS_I2C_init+0x20>)
     648:	4798      	blx	r3
	SYS_I2C_PORT_init();
     64a:	4b05      	ldr	r3, [pc, #20]	; (660 <SYS_I2C_init+0x24>)
     64c:	4798      	blx	r3
     64e:	bd08      	pop	{r3, pc}
     650:	00000619 	.word	0x00000619
     654:	43000400 	.word	0x43000400
     658:	20000fe0 	.word	0x20000fe0
     65c:	00000ea5 	.word	0x00000ea5
     660:	000005b9 	.word	0x000005b9

00000664 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     664:	4b29      	ldr	r3, [pc, #164]	; (70c <GRID_LED_PORT_init+0xa8>)
     666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     66a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     672:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     676:	4926      	ldr	r1, [pc, #152]	; (710 <GRID_LED_PORT_init+0xac>)
     678:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     680:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     684:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     688:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     690:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     694:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     698:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     69c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     6a0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6ac:	4919      	ldr	r1, [pc, #100]	; (714 <GRID_LED_PORT_init+0xb0>)
     6ae:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b2:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6be:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c2:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6c6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ca:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ce:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6d8:	629a      	str	r2, [r3, #40]	; 0x28
     6da:	4a0f      	ldr	r2, [pc, #60]	; (718 <GRID_LED_PORT_init+0xb4>)
     6dc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6de:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     6e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6e6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ea:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fa:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6fe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     702:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     70a:	4770      	bx	lr
     70c:	41008000 	.word	0x41008000
     710:	c0004000 	.word	0xc0004000
     714:	c0008000 	.word	0xc0008000
     718:	c0024000 	.word	0xc0024000

0000071c <GRID_LED_CLOCK_init>:
     71c:	4b06      	ldr	r3, [pc, #24]	; (738 <GRID_LED_CLOCK_init+0x1c>)
     71e:	2240      	movs	r2, #64	; 0x40
     720:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     724:	2243      	movs	r2, #67	; 0x43
     726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     72a:	4a04      	ldr	r2, [pc, #16]	; (73c <GRID_LED_CLOCK_init+0x20>)
     72c:	6a13      	ldr	r3, [r2, #32]
     72e:	f043 0308 	orr.w	r3, r3, #8
     732:	6213      	str	r3, [r2, #32]
     734:	4770      	bx	lr
     736:	bf00      	nop
     738:	40001c00 	.word	0x40001c00
     73c:	40000800 	.word	0x40000800

00000740 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     740:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     742:	4b04      	ldr	r3, [pc, #16]	; (754 <GRID_LED_init+0x14>)
     744:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     746:	4904      	ldr	r1, [pc, #16]	; (758 <GRID_LED_init+0x18>)
     748:	4804      	ldr	r0, [pc, #16]	; (75c <GRID_LED_init+0x1c>)
     74a:	4b05      	ldr	r3, [pc, #20]	; (760 <GRID_LED_init+0x20>)
     74c:	4798      	blx	r3
	GRID_LED_PORT_init();
     74e:	4b05      	ldr	r3, [pc, #20]	; (764 <GRID_LED_init+0x24>)
     750:	4798      	blx	r3
     752:	bd08      	pop	{r3, pc}
     754:	0000071d 	.word	0x0000071d
     758:	43000c00 	.word	0x43000c00
     75c:	2000109c 	.word	0x2000109c
     760:	00000fa9 	.word	0x00000fa9
     764:	00000665 	.word	0x00000665

00000768 <delay_driver_init>:
}

void delay_driver_init(void)
{
     768:	b508      	push	{r3, lr}
	delay_init(SysTick);
     76a:	4802      	ldr	r0, [pc, #8]	; (774 <delay_driver_init+0xc>)
     76c:	4b02      	ldr	r3, [pc, #8]	; (778 <delay_driver_init+0x10>)
     76e:	4798      	blx	r3
     770:	bd08      	pop	{r3, pc}
     772:	bf00      	nop
     774:	e000e010 	.word	0xe000e010
     778:	00000d7d 	.word	0x00000d7d

0000077c <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     77c:	4b1e      	ldr	r3, [pc, #120]	; (7f8 <USB_0_PORT_init+0x7c>)
     77e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     782:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     788:	6299      	str	r1, [r3, #40]	; 0x28
     78a:	481c      	ldr	r0, [pc, #112]	; (7fc <USB_0_PORT_init+0x80>)
     78c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     78e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     790:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     794:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     798:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ac:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7b4:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     7c0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c2:	6299      	str	r1, [r3, #40]	; 0x28
     7c4:	490e      	ldr	r1, [pc, #56]	; (800 <USB_0_PORT_init+0x84>)
     7c6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7c8:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ca:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     7ce:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     7da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7ee:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     7f6:	4770      	bx	lr
     7f8:	41008000 	.word	0x41008000
     7fc:	c0000100 	.word	0xc0000100
     800:	c0000200 	.word	0xc0000200

00000804 <USB_0_CLOCK_init>:
     804:	2240      	movs	r2, #64	; 0x40
     806:	4b07      	ldr	r3, [pc, #28]	; (824 <USB_0_CLOCK_init+0x20>)
     808:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     80c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     810:	691a      	ldr	r2, [r3, #16]
     812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     816:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     818:	699a      	ldr	r2, [r3, #24]
     81a:	f042 0201 	orr.w	r2, r2, #1
     81e:	619a      	str	r2, [r3, #24]
     820:	4770      	bx	lr
     822:	bf00      	nop
     824:	40001c00 	.word	0x40001c00

00000828 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     828:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     82a:	4b03      	ldr	r3, [pc, #12]	; (838 <USB_0_init+0x10>)
     82c:	4798      	blx	r3
	usb_d_init();
     82e:	4b03      	ldr	r3, [pc, #12]	; (83c <USB_0_init+0x14>)
     830:	4798      	blx	r3
	USB_0_PORT_init();
     832:	4b03      	ldr	r3, [pc, #12]	; (840 <USB_0_init+0x18>)
     834:	4798      	blx	r3
     836:	bd08      	pop	{r3, pc}
     838:	00000805 	.word	0x00000805
     83c:	00001561 	.word	0x00001561
     840:	0000077d 	.word	0x0000077d

00000844 <system_init>:
}

void system_init(void)
{
     844:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     846:	4b36      	ldr	r3, [pc, #216]	; (920 <system_init+0xdc>)
     848:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     84a:	4b36      	ldr	r3, [pc, #216]	; (924 <system_init+0xe0>)
     84c:	2220      	movs	r2, #32
     84e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     852:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     856:	629a      	str	r2, [r3, #40]	; 0x28
     858:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     85c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     862:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     86a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     86e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     872:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     876:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     87a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     87e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     882:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     886:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     88a:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     892:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     896:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     89a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     89e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     8a2:	3108      	adds	r1, #8
     8a4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8b0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     8b8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8bc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     8c4:	4918      	ldr	r1, [pc, #96]	; (928 <system_init+0xe4>)
     8c6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8d2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     8da:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8de:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     8e6:	4a11      	ldr	r2, [pc, #68]	; (92c <system_init+0xe8>)
     8e8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ec:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8f4:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     8f8:	4b0d      	ldr	r3, [pc, #52]	; (930 <system_init+0xec>)
     8fa:	4798      	blx	r3
	ADC_1_init();
     8fc:	4b0d      	ldr	r3, [pc, #52]	; (934 <system_init+0xf0>)
     8fe:	4798      	blx	r3

	CRC_0_init();
     900:	4b0d      	ldr	r3, [pc, #52]	; (938 <system_init+0xf4>)
     902:	4798      	blx	r3

	FLASH_0_init();
     904:	4b0d      	ldr	r3, [pc, #52]	; (93c <system_init+0xf8>)
     906:	4798      	blx	r3

	GRID_AUX_init();
     908:	4b0d      	ldr	r3, [pc, #52]	; (940 <system_init+0xfc>)
     90a:	4798      	blx	r3

	SYS_I2C_init();
     90c:	4b0d      	ldr	r3, [pc, #52]	; (944 <system_init+0x100>)
     90e:	4798      	blx	r3

	GRID_LED_init();
     910:	4b0d      	ldr	r3, [pc, #52]	; (948 <system_init+0x104>)
     912:	4798      	blx	r3

	delay_driver_init();
     914:	4b0d      	ldr	r3, [pc, #52]	; (94c <system_init+0x108>)
     916:	4798      	blx	r3

	USB_0_init();
     918:	4b0d      	ldr	r3, [pc, #52]	; (950 <system_init+0x10c>)
     91a:	4798      	blx	r3
     91c:	bd08      	pop	{r3, pc}
     91e:	bf00      	nop
     920:	00001df5 	.word	0x00001df5
     924:	41008000 	.word	0x41008000
     928:	c0000010 	.word	0xc0000010
     92c:	c0000020 	.word	0xc0000020
     930:	00000381 	.word	0x00000381
     934:	00000419 	.word	0x00000419
     938:	000004bd 	.word	0x000004bd
     93c:	000004f5 	.word	0x000004f5
     940:	00000581 	.word	0x00000581
     944:	0000063d 	.word	0x0000063d
     948:	00000741 	.word	0x00000741
     94c:	00000769 	.word	0x00000769
     950:	00000829 	.word	0x00000829

00000954 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     954:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     956:	6983      	ldr	r3, [r0, #24]
     958:	b103      	cbz	r3, 95c <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     95a:	4798      	blx	r3
     95c:	bd08      	pop	{r3, pc}

0000095e <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     95e:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     960:	69c3      	ldr	r3, [r0, #28]
     962:	b103      	cbz	r3, 966 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     964:	4798      	blx	r3
     966:	bd08      	pop	{r3, pc}

00000968 <adc_async_channel_conversion_done>:
{
     968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     96c:	4606      	mov	r6, r0
     96e:	460f      	mov	r7, r1
     970:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     972:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     974:	5c5c      	ldrb	r4, [r3, r1]
     976:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     97a:	00e4      	lsls	r4, r4, #3
     97c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     980:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     984:	f105 0a04 	add.w	sl, r5, #4
     988:	b2d1      	uxtb	r1, r2
     98a:	4650      	mov	r0, sl
     98c:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <adc_async_channel_conversion_done+0x58>)
     98e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     990:	4630      	mov	r0, r6
     992:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <adc_async_channel_conversion_done+0x5c>)
     994:	4798      	blx	r3
     996:	2801      	cmp	r0, #1
     998:	d907      	bls.n	9aa <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     99a:	ea4f 2119 	mov.w	r1, r9, lsr #8
     99e:	4650      	mov	r0, sl
     9a0:	4b07      	ldr	r3, [pc, #28]	; (9c0 <adc_async_channel_conversion_done+0x58>)
     9a2:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     9a4:	8aab      	ldrh	r3, [r5, #20]
     9a6:	3301      	adds	r3, #1
     9a8:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     9aa:	8aab      	ldrh	r3, [r5, #20]
     9ac:	3301      	adds	r3, #1
     9ae:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     9b0:	f858 3004 	ldr.w	r3, [r8, r4]
     9b4:	b113      	cbz	r3, 9bc <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     9b6:	4639      	mov	r1, r7
     9b8:	4630      	mov	r0, r6
     9ba:	4798      	blx	r3
     9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c0:	000019a9 	.word	0x000019a9
     9c4:	00001d2f 	.word	0x00001d2f

000009c8 <adc_async_init>:
{
     9c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9cc:	4689      	mov	r9, r1
     9ce:	4616      	mov	r6, r2
     9d0:	461c      	mov	r4, r3
     9d2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     9d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     9d8:	4607      	mov	r7, r0
     9da:	b140      	cbz	r0, 9ee <adc_async_init+0x26>
     9dc:	b149      	cbz	r1, 9f2 <adc_async_init+0x2a>
     9de:	b152      	cbz	r2, 9f6 <adc_async_init+0x2e>
     9e0:	f1b8 0f00 	cmp.w	r8, #0
     9e4:	d009      	beq.n	9fa <adc_async_init+0x32>
     9e6:	1c28      	adds	r0, r5, #0
     9e8:	bf18      	it	ne
     9ea:	2001      	movne	r0, #1
     9ec:	e006      	b.n	9fc <adc_async_init+0x34>
     9ee:	2000      	movs	r0, #0
     9f0:	e004      	b.n	9fc <adc_async_init+0x34>
     9f2:	2000      	movs	r0, #0
     9f4:	e002      	b.n	9fc <adc_async_init+0x34>
     9f6:	2000      	movs	r0, #0
     9f8:	e000      	b.n	9fc <adc_async_init+0x34>
     9fa:	2000      	movs	r0, #0
     9fc:	f8df b064 	ldr.w	fp, [pc, #100]	; a64 <adc_async_init+0x9c>
     a00:	223f      	movs	r2, #63	; 0x3f
     a02:	4659      	mov	r1, fp
     a04:	f8df a060 	ldr.w	sl, [pc, #96]	; a68 <adc_async_init+0xa0>
     a08:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     a0a:	1c60      	adds	r0, r4, #1
     a0c:	2240      	movs	r2, #64	; 0x40
     a0e:	4659      	mov	r1, fp
     a10:	4580      	cmp	r8, r0
     a12:	bfcc      	ite	gt
     a14:	2000      	movgt	r0, #0
     a16:	2001      	movle	r0, #1
     a18:	47d0      	blx	sl
	device = &descr->device;
     a1a:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     a1c:	21ff      	movs	r1, #255	; 0xff
     a1e:	b2da      	uxtb	r2, r3
     a20:	54b1      	strb	r1, [r6, r2]
     a22:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     a24:	b2da      	uxtb	r2, r3
     a26:	42a2      	cmp	r2, r4
     a28:	d9f9      	bls.n	a1e <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     a2a:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     a2c:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     a30:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     a34:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     a36:	4649      	mov	r1, r9
     a38:	4638      	mov	r0, r7
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <adc_async_init+0x8c>)
     a3c:	4798      	blx	r3
	if (init_status) {
     a3e:	4603      	mov	r3, r0
     a40:	b928      	cbnz	r0, a4e <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     a42:	4a05      	ldr	r2, [pc, #20]	; (a58 <adc_async_init+0x90>)
     a44:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     a46:	4a05      	ldr	r2, [pc, #20]	; (a5c <adc_async_init+0x94>)
     a48:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     a4a:	4a05      	ldr	r2, [pc, #20]	; (a60 <adc_async_init+0x98>)
     a4c:	607a      	str	r2, [r7, #4]
}
     a4e:	4618      	mov	r0, r3
     a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a54:	00001bfd 	.word	0x00001bfd
     a58:	00000969 	.word	0x00000969
     a5c:	00000955 	.word	0x00000955
     a60:	0000095f 	.word	0x0000095f
     a64:	000060b4 	.word	0x000060b4
     a68:	000018ad 	.word	0x000018ad

00000a6c <adc_async_register_channel_buffer>:
{
     a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a70:	460e      	mov	r6, r1
     a72:	4617      	mov	r7, r2
     a74:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     a76:	4605      	mov	r5, r0
     a78:	2800      	cmp	r0, #0
     a7a:	d040      	beq.n	afe <adc_async_register_channel_buffer+0x92>
     a7c:	2a00      	cmp	r2, #0
     a7e:	d040      	beq.n	b02 <adc_async_register_channel_buffer+0x96>
     a80:	1c18      	adds	r0, r3, #0
     a82:	bf18      	it	ne
     a84:	2001      	movne	r0, #1
     a86:	f8df 9098 	ldr.w	r9, [pc, #152]	; b20 <adc_async_register_channel_buffer+0xb4>
     a8a:	2266      	movs	r2, #102	; 0x66
     a8c:	4649      	mov	r1, r9
     a8e:	4c22      	ldr	r4, [pc, #136]	; (b18 <adc_async_register_channel_buffer+0xac>)
     a90:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     a92:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     a96:	2267      	movs	r2, #103	; 0x67
     a98:	4649      	mov	r1, r9
     a9a:	42b0      	cmp	r0, r6
     a9c:	bf34      	ite	cc
     a9e:	2000      	movcc	r0, #0
     aa0:	2001      	movcs	r0, #1
     aa2:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     aa4:	6a29      	ldr	r1, [r5, #32]
     aa6:	5d8b      	ldrb	r3, [r1, r6]
     aa8:	2bff      	cmp	r3, #255	; 0xff
     aaa:	d12c      	bne.n	b06 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     aac:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     ab0:	2300      	movs	r3, #0
     ab2:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     ab4:	b2da      	uxtb	r2, r3
     ab6:	5c8a      	ldrb	r2, [r1, r2]
     ab8:	2aff      	cmp	r2, #255	; 0xff
			index++;
     aba:	bf1c      	itt	ne
     abc:	3401      	addne	r4, #1
     abe:	b2e4      	uxtbne	r4, r4
     ac0:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     ac2:	b2da      	uxtb	r2, r3
     ac4:	4282      	cmp	r2, r0
     ac6:	d9f5      	bls.n	ab4 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     ac8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     acc:	42a3      	cmp	r3, r4
     ace:	d31d      	bcc.n	b0c <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     ad0:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     ad4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     ad8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     ada:	4448      	add	r0, r9
     adc:	4642      	mov	r2, r8
     ade:	4639      	mov	r1, r7
     ae0:	3004      	adds	r0, #4
     ae2:	4b0e      	ldr	r3, [pc, #56]	; (b1c <adc_async_register_channel_buffer+0xb0>)
     ae4:	4798      	blx	r3
     ae6:	4602      	mov	r2, r0
     ae8:	b998      	cbnz	r0, b12 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     aea:	6a2b      	ldr	r3, [r5, #32]
     aec:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     aee:	6aab      	ldr	r3, [r5, #40]	; 0x28
     af0:	4499      	add	r9, r3
     af2:	2300      	movs	r3, #0
     af4:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     af8:	4610      	mov	r0, r2
     afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     afe:	2000      	movs	r0, #0
     b00:	e7c1      	b.n	a86 <adc_async_register_channel_buffer+0x1a>
     b02:	2000      	movs	r0, #0
     b04:	e7bf      	b.n	a86 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     b06:	f06f 020c 	mvn.w	r2, #12
     b0a:	e7f5      	b.n	af8 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     b0c:	f06f 021b 	mvn.w	r2, #27
     b10:	e7f2      	b.n	af8 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     b12:	f06f 020c 	mvn.w	r2, #12
     b16:	e7ef      	b.n	af8 <adc_async_register_channel_buffer+0x8c>
     b18:	000018ad 	.word	0x000018ad
     b1c:	00001915 	.word	0x00001915
     b20:	000060b4 	.word	0x000060b4

00000b24 <adc_async_enable_channel>:
{
     b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b26:	460d      	mov	r5, r1
	ASSERT(descr);
     b28:	4f0b      	ldr	r7, [pc, #44]	; (b58 <adc_async_enable_channel+0x34>)
     b2a:	4604      	mov	r4, r0
     b2c:	2283      	movs	r2, #131	; 0x83
     b2e:	4639      	mov	r1, r7
     b30:	3000      	adds	r0, #0
     b32:	bf18      	it	ne
     b34:	2001      	movne	r0, #1
     b36:	4e09      	ldr	r6, [pc, #36]	; (b5c <adc_async_enable_channel+0x38>)
     b38:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     b3a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     b3e:	2284      	movs	r2, #132	; 0x84
     b40:	4639      	mov	r1, r7
     b42:	42a8      	cmp	r0, r5
     b44:	bf34      	ite	cc
     b46:	2000      	movcc	r0, #0
     b48:	2001      	movcs	r0, #1
     b4a:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     b4c:	4629      	mov	r1, r5
     b4e:	4620      	mov	r0, r4
     b50:	4b03      	ldr	r3, [pc, #12]	; (b60 <adc_async_enable_channel+0x3c>)
     b52:	4798      	blx	r3
}
     b54:	2000      	movs	r0, #0
     b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b58:	000060b4 	.word	0x000060b4
     b5c:	000018ad 	.word	0x000018ad
     b60:	00001d19 	.word	0x00001d19

00000b64 <adc_async_register_callback>:
{
     b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b68:	460e      	mov	r6, r1
     b6a:	4614      	mov	r4, r2
     b6c:	4699      	mov	r9, r3
	ASSERT(descr);
     b6e:	f8df 8070 	ldr.w	r8, [pc, #112]	; be0 <adc_async_register_callback+0x7c>
     b72:	4605      	mov	r5, r0
     b74:	229c      	movs	r2, #156	; 0x9c
     b76:	4641      	mov	r1, r8
     b78:	3000      	adds	r0, #0
     b7a:	bf18      	it	ne
     b7c:	2001      	movne	r0, #1
     b7e:	4f16      	ldr	r7, [pc, #88]	; (bd8 <adc_async_register_callback+0x74>)
     b80:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     b82:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     b86:	229d      	movs	r2, #157	; 0x9d
     b88:	4641      	mov	r1, r8
     b8a:	42b0      	cmp	r0, r6
     b8c:	bf34      	ite	cc
     b8e:	2000      	movcc	r0, #0
     b90:	2001      	movcs	r0, #1
     b92:	47b8      	blx	r7
	switch (type) {
     b94:	2c01      	cmp	r4, #1
     b96:	d019      	beq.n	bcc <adc_async_register_callback+0x68>
     b98:	b12c      	cbz	r4, ba6 <adc_async_register_callback+0x42>
     b9a:	2c02      	cmp	r4, #2
     b9c:	d019      	beq.n	bd2 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
     b9e:	f06f 000c 	mvn.w	r0, #12
}
     ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
     ba6:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     ba8:	5d9b      	ldrb	r3, [r3, r6]
     baa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     bac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bb0:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     bb4:	f119 0300 	adds.w	r3, r9, #0
     bb8:	bf18      	it	ne
     bba:	2301      	movne	r3, #1
     bbc:	4622      	mov	r2, r4
     bbe:	4631      	mov	r1, r6
     bc0:	4628      	mov	r0, r5
     bc2:	4c06      	ldr	r4, [pc, #24]	; (bdc <adc_async_register_callback+0x78>)
     bc4:	47a0      	blx	r4
	return ERR_NONE;
     bc6:	2000      	movs	r0, #0
     bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
     bcc:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
     bd0:	e7f0      	b.n	bb4 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     bd2:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
     bd6:	e7ed      	b.n	bb4 <adc_async_register_callback+0x50>
     bd8:	000018ad 	.word	0x000018ad
     bdc:	00001d57 	.word	0x00001d57
     be0:	000060b4 	.word	0x000060b4

00000be4 <adc_async_read_channel>:
{
     be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be8:	b083      	sub	sp, #12
     bea:	4688      	mov	r8, r1
     bec:	4691      	mov	r9, r2
     bee:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
     bf0:	4604      	mov	r4, r0
     bf2:	2800      	cmp	r0, #0
     bf4:	d04f      	beq.n	c96 <adc_async_read_channel+0xb2>
     bf6:	2a00      	cmp	r2, #0
     bf8:	d04f      	beq.n	c9a <adc_async_read_channel+0xb6>
     bfa:	1c18      	adds	r0, r3, #0
     bfc:	bf18      	it	ne
     bfe:	2001      	movne	r0, #1
     c00:	4f29      	ldr	r7, [pc, #164]	; (ca8 <adc_async_read_channel+0xc4>)
     c02:	22bc      	movs	r2, #188	; 0xbc
     c04:	4639      	mov	r1, r7
     c06:	4e29      	ldr	r6, [pc, #164]	; (cac <adc_async_read_channel+0xc8>)
     c08:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     c0a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     c0e:	22bd      	movs	r2, #189	; 0xbd
     c10:	4639      	mov	r1, r7
     c12:	4540      	cmp	r0, r8
     c14:	bf34      	ite	cc
     c16:	2000      	movcc	r0, #0
     c18:	2001      	movcs	r0, #1
     c1a:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     c1c:	4620      	mov	r0, r4
     c1e:	4b24      	ldr	r3, [pc, #144]	; (cb0 <adc_async_read_channel+0xcc>)
     c20:	4798      	blx	r3
	ASSERT(!(length % data_size));
     c22:	fb95 f3f0 	sdiv	r3, r5, r0
     c26:	fb03 5010 	mls	r0, r3, r0, r5
     c2a:	22bf      	movs	r2, #191	; 0xbf
     c2c:	4639      	mov	r1, r7
     c2e:	fab0 f080 	clz	r0, r0
     c32:	0940      	lsrs	r0, r0, #5
     c34:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
     c36:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     c38:	f813 b008 	ldrb.w	fp, [r3, r8]
     c3c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
     c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c42:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
     c46:	a801      	add	r0, sp, #4
     c48:	4b1a      	ldr	r3, [pc, #104]	; (cb4 <adc_async_read_channel+0xd0>)
     c4a:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     c4c:	f10b 0a04 	add.w	sl, fp, #4
     c50:	4650      	mov	r0, sl
     c52:	4b19      	ldr	r3, [pc, #100]	; (cb8 <adc_async_read_channel+0xd4>)
     c54:	4798      	blx	r3
     c56:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     c58:	a801      	add	r0, sp, #4
     c5a:	4b18      	ldr	r3, [pc, #96]	; (cbc <adc_async_read_channel+0xd8>)
     c5c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     c5e:	f1b8 0f00 	cmp.w	r8, #0
     c62:	d01c      	beq.n	c9e <adc_async_read_channel+0xba>
     c64:	b1ed      	cbz	r5, ca2 <adc_async_read_channel+0xbe>
     c66:	3d01      	subs	r5, #1
     c68:	b2ad      	uxth	r5, r5
     c6a:	3502      	adds	r5, #2
     c6c:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     c6e:	4f14      	ldr	r7, [pc, #80]	; (cc0 <adc_async_read_channel+0xdc>)
     c70:	b2a6      	uxth	r6, r4
     c72:	1e61      	subs	r1, r4, #1
     c74:	4449      	add	r1, r9
     c76:	4650      	mov	r0, sl
     c78:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
     c7a:	4544      	cmp	r4, r8
     c7c:	d002      	beq.n	c84 <adc_async_read_channel+0xa0>
     c7e:	3401      	adds	r4, #1
     c80:	42ac      	cmp	r4, r5
     c82:	d1f5      	bne.n	c70 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     c84:	f8bb 3014 	ldrh.w	r3, [fp, #20]
     c88:	1b9b      	subs	r3, r3, r6
     c8a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
     c8e:	4630      	mov	r0, r6
     c90:	b003      	add	sp, #12
     c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
     c96:	2000      	movs	r0, #0
     c98:	e7b2      	b.n	c00 <adc_async_read_channel+0x1c>
     c9a:	2000      	movs	r0, #0
     c9c:	e7b0      	b.n	c00 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
     c9e:	2600      	movs	r6, #0
     ca0:	e7f0      	b.n	c84 <adc_async_read_channel+0xa0>
     ca2:	2600      	movs	r6, #0
     ca4:	e7ee      	b.n	c84 <adc_async_read_channel+0xa0>
     ca6:	bf00      	nop
     ca8:	000060b4 	.word	0x000060b4
     cac:	000018ad 	.word	0x000018ad
     cb0:	00001d2f 	.word	0x00001d2f
     cb4:	00000ced 	.word	0x00000ced
     cb8:	000019e9 	.word	0x000019e9
     cbc:	00000cfb 	.word	0x00000cfb
     cc0:	00001965 	.word	0x00001965

00000cc4 <adc_async_start_conversion>:
{
     cc4:	b510      	push	{r4, lr}
	ASSERT(descr);
     cc6:	4604      	mov	r4, r0
     cc8:	22d6      	movs	r2, #214	; 0xd6
     cca:	4905      	ldr	r1, [pc, #20]	; (ce0 <adc_async_start_conversion+0x1c>)
     ccc:	3000      	adds	r0, #0
     cce:	bf18      	it	ne
     cd0:	2001      	movne	r0, #1
     cd2:	4b04      	ldr	r3, [pc, #16]	; (ce4 <adc_async_start_conversion+0x20>)
     cd4:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     cd6:	4620      	mov	r0, r4
     cd8:	4b03      	ldr	r3, [pc, #12]	; (ce8 <adc_async_start_conversion+0x24>)
     cda:	4798      	blx	r3
}
     cdc:	2000      	movs	r0, #0
     cde:	bd10      	pop	{r4, pc}
     ce0:	000060b4 	.word	0x000060b4
     ce4:	000018ad 	.word	0x000018ad
     ce8:	00001d41 	.word	0x00001d41

00000cec <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     cec:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     cf0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     cf2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     cf4:	f3bf 8f5f 	dmb	sy
     cf8:	4770      	bx	lr

00000cfa <atomic_leave_critical>:
     cfa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     cfe:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d00:	f383 8810 	msr	PRIMASK, r3
     d04:	4770      	bx	lr
	...

00000d08 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
     d08:	b538      	push	{r3, r4, r5, lr}
     d0a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     d0c:	4605      	mov	r5, r0
     d0e:	b158      	cbz	r0, d28 <crc_sync_init+0x20>
     d10:	1c08      	adds	r0, r1, #0
     d12:	bf18      	it	ne
     d14:	2001      	movne	r0, #1
     d16:	222b      	movs	r2, #43	; 0x2b
     d18:	4904      	ldr	r1, [pc, #16]	; (d2c <crc_sync_init+0x24>)
     d1a:	4b05      	ldr	r3, [pc, #20]	; (d30 <crc_sync_init+0x28>)
     d1c:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
     d1e:	4621      	mov	r1, r4
     d20:	4628      	mov	r0, r5
     d22:	4b04      	ldr	r3, [pc, #16]	; (d34 <crc_sync_init+0x2c>)
     d24:	4798      	blx	r3
}
     d26:	bd38      	pop	{r3, r4, r5, pc}
     d28:	2000      	movs	r0, #0
     d2a:	e7f4      	b.n	d16 <crc_sync_init+0xe>
     d2c:	000060d0 	.word	0x000060d0
     d30:	000018ad 	.word	0x000018ad
     d34:	00002115 	.word	0x00002115

00000d38 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
     d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d3a:	460c      	mov	r4, r1
     d3c:	4615      	mov	r5, r2
     d3e:	461e      	mov	r6, r3
	ASSERT(descr && data && len && pcrc);
     d40:	4607      	mov	r7, r0
     d42:	b128      	cbz	r0, d50 <crc_sync_crc32+0x18>
     d44:	b131      	cbz	r1, d54 <crc_sync_crc32+0x1c>
     d46:	b13a      	cbz	r2, d58 <crc_sync_crc32+0x20>
     d48:	1c18      	adds	r0, r3, #0
     d4a:	bf18      	it	ne
     d4c:	2001      	movne	r0, #1
     d4e:	e004      	b.n	d5a <crc_sync_crc32+0x22>
     d50:	2000      	movs	r0, #0
     d52:	e002      	b.n	d5a <crc_sync_crc32+0x22>
     d54:	2000      	movs	r0, #0
     d56:	e000      	b.n	d5a <crc_sync_crc32+0x22>
     d58:	2000      	movs	r0, #0
     d5a:	2253      	movs	r2, #83	; 0x53
     d5c:	4904      	ldr	r1, [pc, #16]	; (d70 <crc_sync_crc32+0x38>)
     d5e:	4b05      	ldr	r3, [pc, #20]	; (d74 <crc_sync_crc32+0x3c>)
     d60:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
     d62:	4633      	mov	r3, r6
     d64:	462a      	mov	r2, r5
     d66:	4621      	mov	r1, r4
     d68:	4638      	mov	r0, r7
     d6a:	4c03      	ldr	r4, [pc, #12]	; (d78 <crc_sync_crc32+0x40>)
     d6c:	47a0      	blx	r4
}
     d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d70:	000060d0 	.word	0x000060d0
     d74:	000018ad 	.word	0x000018ad
     d78:	0000211d 	.word	0x0000211d

00000d7c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d7c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     d7e:	4b02      	ldr	r3, [pc, #8]	; (d88 <delay_init+0xc>)
     d80:	6018      	str	r0, [r3, #0]
     d82:	4b02      	ldr	r3, [pc, #8]	; (d8c <delay_init+0x10>)
     d84:	4798      	blx	r3
     d86:	bd08      	pop	{r3, pc}
     d88:	20000424 	.word	0x20000424
     d8c:	00003119 	.word	0x00003119

00000d90 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d90:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <delay_ms+0x14>)
     d94:	681c      	ldr	r4, [r3, #0]
     d96:	4b04      	ldr	r3, [pc, #16]	; (da8 <delay_ms+0x18>)
     d98:	4798      	blx	r3
     d9a:	4601      	mov	r1, r0
     d9c:	4620      	mov	r0, r4
     d9e:	4b03      	ldr	r3, [pc, #12]	; (dac <delay_ms+0x1c>)
     da0:	4798      	blx	r3
     da2:	bd10      	pop	{r4, pc}
     da4:	20000424 	.word	0x20000424
     da8:	00001de9 	.word	0x00001de9
     dac:	0000312d 	.word	0x0000312d

00000db0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     db0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     db2:	6943      	ldr	r3, [r0, #20]
     db4:	b103      	cbz	r3, db8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     db6:	4798      	blx	r3
     db8:	bd08      	pop	{r3, pc}

00000dba <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     dba:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     dbc:	6983      	ldr	r3, [r0, #24]
     dbe:	b103      	cbz	r3, dc2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     dc0:	4798      	blx	r3
     dc2:	bd08      	pop	{r3, pc}

00000dc4 <flash_init>:
{
     dc4:	b538      	push	{r3, r4, r5, lr}
     dc6:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     dc8:	4604      	mov	r4, r0
     dca:	b190      	cbz	r0, df2 <flash_init+0x2e>
     dcc:	1c08      	adds	r0, r1, #0
     dce:	bf18      	it	ne
     dd0:	2001      	movne	r0, #1
     dd2:	2238      	movs	r2, #56	; 0x38
     dd4:	4908      	ldr	r1, [pc, #32]	; (df8 <flash_init+0x34>)
     dd6:	4b09      	ldr	r3, [pc, #36]	; (dfc <flash_init+0x38>)
     dd8:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     dda:	4629      	mov	r1, r5
     ddc:	4620      	mov	r0, r4
     dde:	4b08      	ldr	r3, [pc, #32]	; (e00 <flash_init+0x3c>)
     de0:	4798      	blx	r3
	if (rc) {
     de2:	4603      	mov	r3, r0
     de4:	b918      	cbnz	r0, dee <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     de6:	4a07      	ldr	r2, [pc, #28]	; (e04 <flash_init+0x40>)
     de8:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     dea:	4a07      	ldr	r2, [pc, #28]	; (e08 <flash_init+0x44>)
     dec:	6062      	str	r2, [r4, #4]
}
     dee:	4618      	mov	r0, r3
     df0:	bd38      	pop	{r3, r4, r5, pc}
     df2:	2000      	movs	r0, #0
     df4:	e7ed      	b.n	dd2 <flash_init+0xe>
     df6:	bf00      	nop
     df8:	000060ec 	.word	0x000060ec
     dfc:	000018ad 	.word	0x000018ad
     e00:	00002245 	.word	0x00002245
     e04:	00000db1 	.word	0x00000db1
     e08:	00000dbb 	.word	0x00000dbb

00000e0c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     e0c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     e0e:	8843      	ldrh	r3, [r0, #2]
     e10:	f413 7f80 	tst.w	r3, #256	; 0x100
     e14:	d102      	bne.n	e1c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     e16:	6b43      	ldr	r3, [r0, #52]	; 0x34
     e18:	b103      	cbz	r3, e1c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     e1a:	4798      	blx	r3
     e1c:	bd08      	pop	{r3, pc}

00000e1e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     e1e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     e20:	8843      	ldrh	r3, [r0, #2]
     e22:	f413 7f80 	tst.w	r3, #256	; 0x100
     e26:	d102      	bne.n	e2e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     e28:	6b83      	ldr	r3, [r0, #56]	; 0x38
     e2a:	b103      	cbz	r3, e2e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     e2c:	4798      	blx	r3
     e2e:	bd08      	pop	{r3, pc}

00000e30 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     e30:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     e32:	8843      	ldrh	r3, [r0, #2]
     e34:	f413 7f80 	tst.w	r3, #256	; 0x100
     e38:	d102      	bne.n	e40 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     e3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
     e3c:	b103      	cbz	r3, e40 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     e3e:	4798      	blx	r3
     e40:	bd08      	pop	{r3, pc}
	...

00000e44 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     e44:	b510      	push	{r4, lr}
     e46:	b084      	sub	sp, #16
     e48:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     e4a:	8a83      	ldrh	r3, [r0, #20]
     e4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     e50:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     e56:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     e5a:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     e5c:	a901      	add	r1, sp, #4
     e5e:	3828      	subs	r0, #40	; 0x28
     e60:	4b03      	ldr	r3, [pc, #12]	; (e70 <i2c_m_async_write+0x2c>)
     e62:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     e64:	2800      	cmp	r0, #0
     e66:	bf08      	it	eq
     e68:	4620      	moveq	r0, r4
     e6a:	b004      	add	sp, #16
     e6c:	bd10      	pop	{r4, pc}
     e6e:	bf00      	nop
     e70:	00002c25 	.word	0x00002c25

00000e74 <i2c_m_async_read>:
{
     e74:	b510      	push	{r4, lr}
     e76:	b084      	sub	sp, #16
     e78:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     e7a:	8a83      	ldrh	r3, [r0, #20]
     e7c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     e80:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     e82:	f248 0301 	movw	r3, #32769	; 0x8001
     e86:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     e8a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     e8c:	a901      	add	r1, sp, #4
     e8e:	3828      	subs	r0, #40	; 0x28
     e90:	4b03      	ldr	r3, [pc, #12]	; (ea0 <i2c_m_async_read+0x2c>)
     e92:	4798      	blx	r3
}
     e94:	2800      	cmp	r0, #0
     e96:	bf08      	it	eq
     e98:	4620      	moveq	r0, r4
     e9a:	b004      	add	sp, #16
     e9c:	bd10      	pop	{r4, pc}
     e9e:	bf00      	nop
     ea0:	00002c25 	.word	0x00002c25

00000ea4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     ea4:	b570      	push	{r4, r5, r6, lr}
     ea6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     ea8:	4604      	mov	r4, r0
     eaa:	2289      	movs	r2, #137	; 0x89
     eac:	490f      	ldr	r1, [pc, #60]	; (eec <i2c_m_async_init+0x48>)
     eae:	3000      	adds	r0, #0
     eb0:	bf18      	it	ne
     eb2:	2001      	movne	r0, #1
     eb4:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <i2c_m_async_init+0x4c>)
     eb6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     eb8:	4629      	mov	r1, r5
     eba:	4620      	mov	r0, r4
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <i2c_m_async_init+0x50>)
     ebe:	4798      	blx	r3
	if (init_status) {
     ec0:	4605      	mov	r5, r0
     ec2:	b108      	cbz	r0, ec8 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     ec4:	4628      	mov	r0, r5
     ec6:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     ec8:	4b0b      	ldr	r3, [pc, #44]	; (ef8 <i2c_m_async_init+0x54>)
     eca:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     ecc:	4b0b      	ldr	r3, [pc, #44]	; (efc <i2c_m_async_init+0x58>)
     ece:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     ed0:	4a0b      	ldr	r2, [pc, #44]	; (f00 <i2c_m_async_init+0x5c>)
     ed2:	2101      	movs	r1, #1
     ed4:	4620      	mov	r0, r4
     ed6:	4e0b      	ldr	r6, [pc, #44]	; (f04 <i2c_m_async_init+0x60>)
     ed8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     eda:	4a0b      	ldr	r2, [pc, #44]	; (f08 <i2c_m_async_init+0x64>)
     edc:	2102      	movs	r1, #2
     ede:	4620      	mov	r0, r4
     ee0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     ee2:	4a0a      	ldr	r2, [pc, #40]	; (f0c <i2c_m_async_init+0x68>)
     ee4:	2100      	movs	r1, #0
     ee6:	4620      	mov	r0, r4
     ee8:	47b0      	blx	r6
	return ERR_NONE;
     eea:	e7eb      	b.n	ec4 <i2c_m_async_init+0x20>
     eec:	00006104 	.word	0x00006104
     ef0:	000018ad 	.word	0x000018ad
     ef4:	00002ba5 	.word	0x00002ba5
     ef8:	00000e75 	.word	0x00000e75
     efc:	00000e45 	.word	0x00000e45
     f00:	00000e0d 	.word	0x00000e0d
     f04:	00002d55 	.word	0x00002d55
     f08:	00000e1f 	.word	0x00000e1f
     f0c:	00000e31 	.word	0x00000e31

00000f10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f10:	b570      	push	{r4, r5, r6, lr}
     f12:	460d      	mov	r5, r1
     f14:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     f16:	4604      	mov	r4, r0
     f18:	b160      	cbz	r0, f34 <io_write+0x24>
     f1a:	1c08      	adds	r0, r1, #0
     f1c:	bf18      	it	ne
     f1e:	2001      	movne	r0, #1
     f20:	2234      	movs	r2, #52	; 0x34
     f22:	4905      	ldr	r1, [pc, #20]	; (f38 <io_write+0x28>)
     f24:	4b05      	ldr	r3, [pc, #20]	; (f3c <io_write+0x2c>)
     f26:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     f28:	6823      	ldr	r3, [r4, #0]
     f2a:	4632      	mov	r2, r6
     f2c:	4629      	mov	r1, r5
     f2e:	4620      	mov	r0, r4
     f30:	4798      	blx	r3
}
     f32:	bd70      	pop	{r4, r5, r6, pc}
     f34:	2000      	movs	r0, #0
     f36:	e7f3      	b.n	f20 <io_write+0x10>
     f38:	00006124 	.word	0x00006124
     f3c:	000018ad 	.word	0x000018ad

00000f40 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	460d      	mov	r5, r1
     f44:	4616      	mov	r6, r2
	ASSERT(io);
     f46:	4604      	mov	r4, r0
     f48:	2298      	movs	r2, #152	; 0x98
     f4a:	4907      	ldr	r1, [pc, #28]	; (f68 <_spi_m_dma_io_write+0x28>)
     f4c:	3000      	adds	r0, #0
     f4e:	bf18      	it	ne
     f50:	2001      	movne	r0, #1
     f52:	4b06      	ldr	r3, [pc, #24]	; (f6c <_spi_m_dma_io_write+0x2c>)
     f54:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     f56:	4633      	mov	r3, r6
     f58:	2200      	movs	r2, #0
     f5a:	4629      	mov	r1, r5
     f5c:	f1a4 001c 	sub.w	r0, r4, #28
     f60:	4c03      	ldr	r4, [pc, #12]	; (f70 <_spi_m_dma_io_write+0x30>)
     f62:	47a0      	blx	r4
}
     f64:	bd70      	pop	{r4, r5, r6, pc}
     f66:	bf00      	nop
     f68:	00006138 	.word	0x00006138
     f6c:	000018ad 	.word	0x000018ad
     f70:	00002fe1 	.word	0x00002fe1

00000f74 <_spi_m_dma_io_read>:
{
     f74:	b570      	push	{r4, r5, r6, lr}
     f76:	460d      	mov	r5, r1
     f78:	4616      	mov	r6, r2
	ASSERT(io);
     f7a:	4604      	mov	r4, r0
     f7c:	2281      	movs	r2, #129	; 0x81
     f7e:	4907      	ldr	r1, [pc, #28]	; (f9c <_spi_m_dma_io_read+0x28>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b06      	ldr	r3, [pc, #24]	; (fa0 <_spi_m_dma_io_read+0x2c>)
     f88:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     f8a:	4633      	mov	r3, r6
     f8c:	462a      	mov	r2, r5
     f8e:	2100      	movs	r1, #0
     f90:	f1a4 001c 	sub.w	r0, r4, #28
     f94:	4c03      	ldr	r4, [pc, #12]	; (fa4 <_spi_m_dma_io_read+0x30>)
     f96:	47a0      	blx	r4
}
     f98:	bd70      	pop	{r4, r5, r6, pc}
     f9a:	bf00      	nop
     f9c:	00006138 	.word	0x00006138
     fa0:	000018ad 	.word	0x000018ad
     fa4:	00002fe1 	.word	0x00002fe1

00000fa8 <spi_m_dma_init>:
{
     fa8:	b538      	push	{r3, r4, r5, lr}
     faa:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     fac:	4605      	mov	r5, r0
     fae:	b1a0      	cbz	r0, fda <spi_m_dma_init+0x32>
     fb0:	1c08      	adds	r0, r1, #0
     fb2:	bf18      	it	ne
     fb4:	2001      	movne	r0, #1
     fb6:	223b      	movs	r2, #59	; 0x3b
     fb8:	4909      	ldr	r1, [pc, #36]	; (fe0 <spi_m_dma_init+0x38>)
     fba:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <spi_m_dma_init+0x3c>)
     fbc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     fbe:	4628      	mov	r0, r5
     fc0:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     fc4:	4621      	mov	r1, r4
     fc6:	4b08      	ldr	r3, [pc, #32]	; (fe8 <spi_m_dma_init+0x40>)
     fc8:	4798      	blx	r3
	if (rc) {
     fca:	4603      	mov	r3, r0
     fcc:	b918      	cbnz	r0, fd6 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
     fce:	4a07      	ldr	r2, [pc, #28]	; (fec <spi_m_dma_init+0x44>)
     fd0:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
     fd2:	4a07      	ldr	r2, [pc, #28]	; (ff0 <spi_m_dma_init+0x48>)
     fd4:	622a      	str	r2, [r5, #32]
}
     fd6:	4618      	mov	r0, r3
     fd8:	bd38      	pop	{r3, r4, r5, pc}
     fda:	2000      	movs	r0, #0
     fdc:	e7eb      	b.n	fb6 <spi_m_dma_init+0xe>
     fde:	bf00      	nop
     fe0:	00006138 	.word	0x00006138
     fe4:	000018ad 	.word	0x000018ad
     fe8:	00002e11 	.word	0x00002e11
     fec:	00000f75 	.word	0x00000f75
     ff0:	00000f41 	.word	0x00000f41

00000ff4 <spi_m_dma_enable>:
{
     ff4:	b510      	push	{r4, lr}
	ASSERT(spi);
     ff6:	4604      	mov	r4, r0
     ff8:	2251      	movs	r2, #81	; 0x51
     ffa:	4905      	ldr	r1, [pc, #20]	; (1010 <spi_m_dma_enable+0x1c>)
     ffc:	3000      	adds	r0, #0
     ffe:	bf18      	it	ne
    1000:	2001      	movne	r0, #1
    1002:	4b04      	ldr	r3, [pc, #16]	; (1014 <spi_m_dma_enable+0x20>)
    1004:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    1006:	1d20      	adds	r0, r4, #4
    1008:	4b03      	ldr	r3, [pc, #12]	; (1018 <spi_m_dma_enable+0x24>)
    100a:	4798      	blx	r3
    100c:	bd10      	pop	{r4, pc}
    100e:	bf00      	nop
    1010:	00006138 	.word	0x00006138
    1014:	000018ad 	.word	0x000018ad
    1018:	00002f51 	.word	0x00002f51

0000101c <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    101c:	b570      	push	{r4, r5, r6, lr}
    101e:	460d      	mov	r5, r1
    1020:	4616      	mov	r6, r2
	ASSERT(spi);
    1022:	4604      	mov	r4, r0
    1024:	22a8      	movs	r2, #168	; 0xa8
    1026:	4906      	ldr	r1, [pc, #24]	; (1040 <spi_m_dma_register_callback+0x24>)
    1028:	3000      	adds	r0, #0
    102a:	bf18      	it	ne
    102c:	2001      	movne	r0, #1
    102e:	4b05      	ldr	r3, [pc, #20]	; (1044 <spi_m_dma_register_callback+0x28>)
    1030:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    1032:	4632      	mov	r2, r6
    1034:	4629      	mov	r1, r5
    1036:	1d20      	adds	r0, r4, #4
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <spi_m_dma_register_callback+0x2c>)
    103a:	4798      	blx	r3
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	bf00      	nop
    1040:	00006138 	.word	0x00006138
    1044:	000018ad 	.word	0x000018ad
    1048:	00002f81 	.word	0x00002f81

0000104c <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    104c:	b538      	push	{r3, r4, r5, lr}
    104e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1050:	4604      	mov	r4, r0
    1052:	b150      	cbz	r0, 106a <spi_m_dma_get_io_descriptor+0x1e>
    1054:	1c08      	adds	r0, r1, #0
    1056:	bf18      	it	ne
    1058:	2001      	movne	r0, #1
    105a:	22ae      	movs	r2, #174	; 0xae
    105c:	4904      	ldr	r1, [pc, #16]	; (1070 <spi_m_dma_get_io_descriptor+0x24>)
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <spi_m_dma_get_io_descriptor+0x28>)
    1060:	4798      	blx	r3
	*io = &spi->io;
    1062:	3420      	adds	r4, #32
    1064:	602c      	str	r4, [r5, #0]

	return 0;
}
    1066:	2000      	movs	r0, #0
    1068:	bd38      	pop	{r3, r4, r5, pc}
    106a:	2000      	movs	r0, #0
    106c:	e7f5      	b.n	105a <spi_m_dma_get_io_descriptor+0xe>
    106e:	bf00      	nop
    1070:	00006138 	.word	0x00006138
    1074:	000018ad 	.word	0x000018ad

00001078 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1078:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    107a:	2300      	movs	r3, #0
    107c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    107e:	69c3      	ldr	r3, [r0, #28]
    1080:	b11b      	cbz	r3, 108a <usart_transmission_complete+0x12>
    1082:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1086:	4610      	mov	r0, r2
    1088:	4798      	blx	r3
    108a:	bd08      	pop	{r3, pc}

0000108c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    108c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    108e:	2300      	movs	r3, #0
    1090:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1092:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1094:	b11b      	cbz	r3, 109e <usart_error+0x12>
    1096:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    109a:	4610      	mov	r0, r2
    109c:	4798      	blx	r3
    109e:	bd08      	pop	{r3, pc}

000010a0 <usart_fill_rx_buffer>:
{
    10a0:	b538      	push	{r3, r4, r5, lr}
    10a2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    10a4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    10a8:	302c      	adds	r0, #44	; 0x2c
    10aa:	4b03      	ldr	r3, [pc, #12]	; (10b8 <usart_fill_rx_buffer+0x18>)
    10ac:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    10ae:	6a23      	ldr	r3, [r4, #32]
    10b0:	b10b      	cbz	r3, 10b6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    10b2:	4628      	mov	r0, r5
    10b4:	4798      	blx	r3
    10b6:	bd38      	pop	{r3, r4, r5, pc}
    10b8:	000019a9 	.word	0x000019a9

000010bc <usart_async_write>:
{
    10bc:	b570      	push	{r4, r5, r6, lr}
    10be:	460e      	mov	r6, r1
    10c0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    10c2:	4604      	mov	r4, r0
    10c4:	b1e0      	cbz	r0, 1100 <usart_async_write+0x44>
    10c6:	b1e9      	cbz	r1, 1104 <usart_async_write+0x48>
    10c8:	1c10      	adds	r0, r2, #0
    10ca:	bf18      	it	ne
    10cc:	2001      	movne	r0, #1
    10ce:	f240 123b 	movw	r2, #315	; 0x13b
    10d2:	490f      	ldr	r1, [pc, #60]	; (1110 <usart_async_write+0x54>)
    10d4:	4b0f      	ldr	r3, [pc, #60]	; (1114 <usart_async_write+0x58>)
    10d6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    10d8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    10dc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    10e0:	429a      	cmp	r2, r3
    10e2:	d111      	bne.n	1108 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    10e4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    10e6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    10ea:	2300      	movs	r3, #0
    10ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    10f0:	2301      	movs	r3, #1
    10f2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    10f4:	f104 0008 	add.w	r0, r4, #8
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <usart_async_write+0x5c>)
    10fa:	4798      	blx	r3
	return (int32_t)length;
    10fc:	4628      	mov	r0, r5
    10fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1100:	2000      	movs	r0, #0
    1102:	e7e4      	b.n	10ce <usart_async_write+0x12>
    1104:	2000      	movs	r0, #0
    1106:	e7e2      	b.n	10ce <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1108:	f06f 001b 	mvn.w	r0, #27
}
    110c:	bd70      	pop	{r4, r5, r6, pc}
    110e:	bf00      	nop
    1110:	00006154 	.word	0x00006154
    1114:	000018ad 	.word	0x000018ad
    1118:	00002b93 	.word	0x00002b93

0000111c <usart_process_byte_sent>:
{
    111c:	b510      	push	{r4, lr}
    111e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1120:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1122:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1126:	429a      	cmp	r2, r3
    1128:	d009      	beq.n	113e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    112a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    112c:	1c59      	adds	r1, r3, #1
    112e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1130:	5cd1      	ldrb	r1, [r2, r3]
    1132:	4b04      	ldr	r3, [pc, #16]	; (1144 <usart_process_byte_sent+0x28>)
    1134:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1136:	4620      	mov	r0, r4
    1138:	4b03      	ldr	r3, [pc, #12]	; (1148 <usart_process_byte_sent+0x2c>)
    113a:	4798      	blx	r3
    113c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    113e:	4b03      	ldr	r3, [pc, #12]	; (114c <usart_process_byte_sent+0x30>)
    1140:	4798      	blx	r3
    1142:	bd10      	pop	{r4, pc}
    1144:	00002b8d 	.word	0x00002b8d
    1148:	00002b93 	.word	0x00002b93
    114c:	00002b9b 	.word	0x00002b9b

00001150 <usart_async_read>:
{
    1150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1154:	b082      	sub	sp, #8
    1156:	460f      	mov	r7, r1
    1158:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    115a:	4606      	mov	r6, r0
    115c:	b1a0      	cbz	r0, 1188 <usart_async_read+0x38>
    115e:	b199      	cbz	r1, 1188 <usart_async_read+0x38>
    1160:	2a00      	cmp	r2, #0
    1162:	d12d      	bne.n	11c0 <usart_async_read+0x70>
    1164:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1168:	4929      	ldr	r1, [pc, #164]	; (1210 <usart_async_read+0xc0>)
    116a:	2000      	movs	r0, #0
    116c:	4b29      	ldr	r3, [pc, #164]	; (1214 <usart_async_read+0xc4>)
    116e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1170:	a801      	add	r0, sp, #4
    1172:	4b29      	ldr	r3, [pc, #164]	; (1218 <usart_async_read+0xc8>)
    1174:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1176:	f106 0034 	add.w	r0, r6, #52	; 0x34
    117a:	4b28      	ldr	r3, [pc, #160]	; (121c <usart_async_read+0xcc>)
    117c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    117e:	a801      	add	r0, sp, #4
    1180:	4b27      	ldr	r3, [pc, #156]	; (1220 <usart_async_read+0xd0>)
    1182:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1184:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1186:	e03e      	b.n	1206 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1188:	f44f 72ac 	mov.w	r2, #344	; 0x158
    118c:	4920      	ldr	r1, [pc, #128]	; (1210 <usart_async_read+0xc0>)
    118e:	2000      	movs	r0, #0
    1190:	4b20      	ldr	r3, [pc, #128]	; (1214 <usart_async_read+0xc4>)
    1192:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1194:	a801      	add	r0, sp, #4
    1196:	4b20      	ldr	r3, [pc, #128]	; (1218 <usart_async_read+0xc8>)
    1198:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    119a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    119e:	4650      	mov	r0, sl
    11a0:	4b1e      	ldr	r3, [pc, #120]	; (121c <usart_async_read+0xcc>)
    11a2:	4798      	blx	r3
    11a4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    11a6:	a801      	add	r0, sp, #4
    11a8:	4b1d      	ldr	r3, [pc, #116]	; (1220 <usart_async_read+0xd0>)
    11aa:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    11ac:	f1b9 0f00 	cmp.w	r9, #0
    11b0:	d004      	beq.n	11bc <usart_async_read+0x6c>
    11b2:	f1b8 0f00 	cmp.w	r8, #0
    11b6:	d119      	bne.n	11ec <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    11b8:	2500      	movs	r5, #0
    11ba:	e024      	b.n	1206 <usart_async_read+0xb6>
    11bc:	2500      	movs	r5, #0
    11be:	e022      	b.n	1206 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    11c0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    11c4:	4912      	ldr	r1, [pc, #72]	; (1210 <usart_async_read+0xc0>)
    11c6:	2001      	movs	r0, #1
    11c8:	4b12      	ldr	r3, [pc, #72]	; (1214 <usart_async_read+0xc4>)
    11ca:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    11cc:	a801      	add	r0, sp, #4
    11ce:	4b12      	ldr	r3, [pc, #72]	; (1218 <usart_async_read+0xc8>)
    11d0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    11d2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    11d6:	4650      	mov	r0, sl
    11d8:	4b10      	ldr	r3, [pc, #64]	; (121c <usart_async_read+0xcc>)
    11da:	4798      	blx	r3
    11dc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    11de:	a801      	add	r0, sp, #4
    11e0:	4b0f      	ldr	r3, [pc, #60]	; (1220 <usart_async_read+0xd0>)
    11e2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    11e4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    11e6:	f1b9 0f00 	cmp.w	r9, #0
    11ea:	d00c      	beq.n	1206 <usart_async_read+0xb6>
{
    11ec:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    11ee:	4e0d      	ldr	r6, [pc, #52]	; (1224 <usart_async_read+0xd4>)
    11f0:	1c60      	adds	r0, r4, #1
    11f2:	b285      	uxth	r5, r0
    11f4:	1939      	adds	r1, r7, r4
    11f6:	4650      	mov	r0, sl
    11f8:	47b0      	blx	r6
    11fa:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    11fc:	454c      	cmp	r4, r9
    11fe:	d202      	bcs.n	1206 <usart_async_read+0xb6>
    1200:	b2a3      	uxth	r3, r4
    1202:	4598      	cmp	r8, r3
    1204:	d8f4      	bhi.n	11f0 <usart_async_read+0xa0>
}
    1206:	4628      	mov	r0, r5
    1208:	b002      	add	sp, #8
    120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    120e:	bf00      	nop
    1210:	00006154 	.word	0x00006154
    1214:	000018ad 	.word	0x000018ad
    1218:	00000ced 	.word	0x00000ced
    121c:	000019e9 	.word	0x000019e9
    1220:	00000cfb 	.word	0x00000cfb
    1224:	00001965 	.word	0x00001965

00001228 <usart_async_init>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	460d      	mov	r5, r1
    122c:	4616      	mov	r6, r2
    122e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1230:	4604      	mov	r4, r0
    1232:	b320      	cbz	r0, 127e <usart_async_init+0x56>
    1234:	b329      	cbz	r1, 1282 <usart_async_init+0x5a>
    1236:	b332      	cbz	r2, 1286 <usart_async_init+0x5e>
    1238:	1c18      	adds	r0, r3, #0
    123a:	bf18      	it	ne
    123c:	2001      	movne	r0, #1
    123e:	223a      	movs	r2, #58	; 0x3a
    1240:	4913      	ldr	r1, [pc, #76]	; (1290 <usart_async_init+0x68>)
    1242:	4b14      	ldr	r3, [pc, #80]	; (1294 <usart_async_init+0x6c>)
    1244:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1246:	463a      	mov	r2, r7
    1248:	4631      	mov	r1, r6
    124a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    124e:	4b12      	ldr	r3, [pc, #72]	; (1298 <usart_async_init+0x70>)
    1250:	4798      	blx	r3
    1252:	b9d0      	cbnz	r0, 128a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1254:	4629      	mov	r1, r5
    1256:	f104 0008 	add.w	r0, r4, #8
    125a:	4b10      	ldr	r3, [pc, #64]	; (129c <usart_async_init+0x74>)
    125c:	4798      	blx	r3
	if (init_status) {
    125e:	4603      	mov	r3, r0
    1260:	b958      	cbnz	r0, 127a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1262:	4a0f      	ldr	r2, [pc, #60]	; (12a0 <usart_async_init+0x78>)
    1264:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1266:	4a0f      	ldr	r2, [pc, #60]	; (12a4 <usart_async_init+0x7c>)
    1268:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    126a:	4a0f      	ldr	r2, [pc, #60]	; (12a8 <usart_async_init+0x80>)
    126c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    126e:	4a0f      	ldr	r2, [pc, #60]	; (12ac <usart_async_init+0x84>)
    1270:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1272:	4a0f      	ldr	r2, [pc, #60]	; (12b0 <usart_async_init+0x88>)
    1274:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1276:	4a0f      	ldr	r2, [pc, #60]	; (12b4 <usart_async_init+0x8c>)
    1278:	6162      	str	r2, [r4, #20]
}
    127a:	4618      	mov	r0, r3
    127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    127e:	2000      	movs	r0, #0
    1280:	e7dd      	b.n	123e <usart_async_init+0x16>
    1282:	2000      	movs	r0, #0
    1284:	e7db      	b.n	123e <usart_async_init+0x16>
    1286:	2000      	movs	r0, #0
    1288:	e7d9      	b.n	123e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    128a:	f06f 030c 	mvn.w	r3, #12
    128e:	e7f4      	b.n	127a <usart_async_init+0x52>
    1290:	00006154 	.word	0x00006154
    1294:	000018ad 	.word	0x000018ad
    1298:	00001915 	.word	0x00001915
    129c:	00002afd 	.word	0x00002afd
    12a0:	00001151 	.word	0x00001151
    12a4:	000010bd 	.word	0x000010bd
    12a8:	0000111d 	.word	0x0000111d
    12ac:	000010a1 	.word	0x000010a1
    12b0:	00001079 	.word	0x00001079
    12b4:	0000108d 	.word	0x0000108d

000012b8 <usart_async_enable>:
{
    12b8:	b510      	push	{r4, lr}
	ASSERT(descr);
    12ba:	4604      	mov	r4, r0
    12bc:	2261      	movs	r2, #97	; 0x61
    12be:	4906      	ldr	r1, [pc, #24]	; (12d8 <usart_async_enable+0x20>)
    12c0:	3000      	adds	r0, #0
    12c2:	bf18      	it	ne
    12c4:	2001      	movne	r0, #1
    12c6:	4b05      	ldr	r3, [pc, #20]	; (12dc <usart_async_enable+0x24>)
    12c8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    12ca:	f104 0008 	add.w	r0, r4, #8
    12ce:	4b04      	ldr	r3, [pc, #16]	; (12e0 <usart_async_enable+0x28>)
    12d0:	4798      	blx	r3
}
    12d2:	2000      	movs	r0, #0
    12d4:	bd10      	pop	{r4, pc}
    12d6:	bf00      	nop
    12d8:	00006154 	.word	0x00006154
    12dc:	000018ad 	.word	0x000018ad
    12e0:	00002b79 	.word	0x00002b79

000012e4 <usart_async_get_io_descriptor>:
{
    12e4:	b538      	push	{r3, r4, r5, lr}
    12e6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    12e8:	4605      	mov	r5, r0
    12ea:	b148      	cbz	r0, 1300 <usart_async_get_io_descriptor+0x1c>
    12ec:	1c08      	adds	r0, r1, #0
    12ee:	bf18      	it	ne
    12f0:	2001      	movne	r0, #1
    12f2:	2277      	movs	r2, #119	; 0x77
    12f4:	4903      	ldr	r1, [pc, #12]	; (1304 <usart_async_get_io_descriptor+0x20>)
    12f6:	4b04      	ldr	r3, [pc, #16]	; (1308 <usart_async_get_io_descriptor+0x24>)
    12f8:	4798      	blx	r3
	*io = &descr->io;
    12fa:	6025      	str	r5, [r4, #0]
}
    12fc:	2000      	movs	r0, #0
    12fe:	bd38      	pop	{r3, r4, r5, pc}
    1300:	2000      	movs	r0, #0
    1302:	e7f6      	b.n	12f2 <usart_async_get_io_descriptor+0xe>
    1304:	00006154 	.word	0x00006154
    1308:	000018ad 	.word	0x000018ad

0000130c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    130c:	4b0f      	ldr	r3, [pc, #60]	; (134c <_usb_d_find_ep+0x40>)
    130e:	7859      	ldrb	r1, [r3, #1]
    1310:	4288      	cmp	r0, r1
    1312:	d018      	beq.n	1346 <_usb_d_find_ep+0x3a>
{
    1314:	b430      	push	{r4, r5}
    1316:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1318:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    131a:	f000 050f 	and.w	r5, r0, #15
    131e:	e007      	b.n	1330 <_usb_d_find_ep+0x24>
    1320:	3301      	adds	r3, #1
    1322:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1324:	2b0d      	cmp	r3, #13
    1326:	d009      	beq.n	133c <_usb_d_find_ep+0x30>
    1328:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    132a:	7851      	ldrb	r1, [r2, #1]
    132c:	4281      	cmp	r1, r0
    132e:	d007      	beq.n	1340 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1330:	7814      	ldrb	r4, [r2, #0]
    1332:	2c00      	cmp	r4, #0
    1334:	d1f4      	bne.n	1320 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1336:	428d      	cmp	r5, r1
    1338:	d1f2      	bne.n	1320 <_usb_d_find_ep+0x14>
    133a:	e001      	b.n	1340 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    133c:	f04f 33ff 	mov.w	r3, #4294967295
}
    1340:	4618      	mov	r0, r3
    1342:	bc30      	pop	{r4, r5}
    1344:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1346:	2300      	movs	r3, #0
}
    1348:	4618      	mov	r0, r3
    134a:	4770      	bx	lr
    134c:	20000428 	.word	0x20000428

00001350 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1350:	2000      	movs	r0, #0
    1352:	4770      	bx	lr

00001354 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1354:	b538      	push	{r3, r4, r5, lr}
    1356:	4604      	mov	r4, r0
    1358:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    135a:	4b09      	ldr	r3, [pc, #36]	; (1380 <usb_d_cb_trans_more+0x2c>)
    135c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    135e:	4b09      	ldr	r3, [pc, #36]	; (1384 <usb_d_cb_trans_more+0x30>)
    1360:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1364:	789b      	ldrb	r3, [r3, #2]
    1366:	2b03      	cmp	r3, #3
    1368:	d001      	beq.n	136e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    136a:	2000      	movs	r0, #0
}
    136c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <usb_d_cb_trans_more+0x30>)
    1370:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1374:	6983      	ldr	r3, [r0, #24]
    1376:	4629      	mov	r1, r5
    1378:	4620      	mov	r0, r4
    137a:	4798      	blx	r3
    137c:	bd38      	pop	{r3, r4, r5, pc}
    137e:	bf00      	nop
    1380:	0000130d 	.word	0x0000130d
    1384:	20000428 	.word	0x20000428

00001388 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1388:	b5f0      	push	{r4, r5, r6, r7, lr}
    138a:	b085      	sub	sp, #20
    138c:	4606      	mov	r6, r0
    138e:	460d      	mov	r5, r1
    1390:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1392:	4b4d      	ldr	r3, [pc, #308]	; (14c8 <_usb_d_cb_trans_done+0x140>)
    1394:	4798      	blx	r3
    1396:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1398:	2d00      	cmp	r5, #0
    139a:	d15b      	bne.n	1454 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    139c:	4a4b      	ldr	r2, [pc, #300]	; (14cc <_usb_d_cb_trans_done+0x144>)
    139e:	0143      	lsls	r3, r0, #5
    13a0:	18d1      	adds	r1, r2, r3
    13a2:	2000      	movs	r0, #0
    13a4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    13a6:	5cd3      	ldrb	r3, [r2, r3]
    13a8:	b173      	cbz	r3, 13c8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    13aa:	4b48      	ldr	r3, [pc, #288]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    13b0:	2201      	movs	r2, #1
    13b2:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    13b4:	4845      	ldr	r0, [pc, #276]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13b6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    13ba:	69c3      	ldr	r3, [r0, #28]
    13bc:	463a      	mov	r2, r7
    13be:	78c1      	ldrb	r1, [r0, #3]
    13c0:	4630      	mov	r0, r6
    13c2:	4798      	blx	r3
}
    13c4:	b005      	add	sp, #20
    13c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    13c8:	788b      	ldrb	r3, [r1, #2]
    13ca:	2b03      	cmp	r3, #3
    13cc:	d00b      	beq.n	13e6 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    13ce:	483f      	ldr	r0, [pc, #252]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13d0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    13d4:	4614      	mov	r4, r2
    13d6:	69d3      	ldr	r3, [r2, #28]
    13d8:	320c      	adds	r2, #12
    13da:	2100      	movs	r1, #0
    13dc:	7860      	ldrb	r0, [r4, #1]
    13de:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    13e0:	2302      	movs	r3, #2
    13e2:	70a3      	strb	r3, [r4, #2]
    13e4:	e7ee      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    13e6:	460b      	mov	r3, r1
    13e8:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    13ec:	460a      	mov	r2, r1
    13ee:	69ce      	ldr	r6, [r1, #28]
    13f0:	320c      	adds	r2, #12
    13f2:	2101      	movs	r1, #1
    13f4:	7858      	ldrb	r0, [r3, #1]
    13f6:	47b0      	blx	r6
		if (err) {
    13f8:	b1a0      	cbz	r0, 1424 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    13fa:	4b34      	ldr	r3, [pc, #208]	; (14cc <_usb_d_cb_trans_done+0x144>)
    13fc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1400:	2205      	movs	r2, #5
    1402:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1404:	2202      	movs	r2, #2
    1406:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1408:	2d00      	cmp	r5, #0
    140a:	db09      	blt.n	1420 <_usb_d_cb_trans_done+0x98>
    140c:	482f      	ldr	r0, [pc, #188]	; (14cc <_usb_d_cb_trans_done+0x144>)
    140e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1412:	7840      	ldrb	r0, [r0, #1]
    1414:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1418:	2101      	movs	r1, #1
    141a:	4b2d      	ldr	r3, [pc, #180]	; (14d0 <_usb_d_cb_trans_done+0x148>)
    141c:	4798      	blx	r3
    141e:	e7d1      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
    1420:	7858      	ldrb	r0, [r3, #1]
    1422:	e7f9      	b.n	1418 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1424:	4829      	ldr	r0, [pc, #164]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1426:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    142a:	2304      	movs	r3, #4
    142c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    142e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1430:	2200      	movs	r2, #0
    1432:	9201      	str	r2, [sp, #4]
    1434:	9202      	str	r2, [sp, #8]
    1436:	4295      	cmp	r5, r2
    1438:	bfac      	ite	ge
    143a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    143e:	f003 030f 	andlt.w	r3, r3, #15
    1442:	f88d 300c 	strb.w	r3, [sp, #12]
    1446:	2301      	movs	r3, #1
    1448:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    144c:	a801      	add	r0, sp, #4
    144e:	4b21      	ldr	r3, [pc, #132]	; (14d4 <_usb_d_cb_trans_done+0x14c>)
    1450:	4798      	blx	r3
    1452:	e7b7      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1454:	2d01      	cmp	r5, #1
    1456:	d00a      	beq.n	146e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1458:	2d02      	cmp	r5, #2
    145a:	d01c      	beq.n	1496 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    145c:	2d03      	cmp	r5, #3
    145e:	d02a      	beq.n	14b6 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1460:	4b1a      	ldr	r3, [pc, #104]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1462:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1466:	2206      	movs	r2, #6
    1468:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    146a:	70da      	strb	r2, [r3, #3]
    146c:	e7a2      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    146e:	4a17      	ldr	r2, [pc, #92]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1470:	0143      	lsls	r3, r0, #5
    1472:	18d1      	adds	r1, r2, r3
    1474:	2002      	movs	r0, #2
    1476:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1478:	5cd3      	ldrb	r3, [r2, r3]
    147a:	b12b      	cbz	r3, 1488 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    147c:	4b13      	ldr	r3, [pc, #76]	; (14cc <_usb_d_cb_trans_done+0x144>)
    147e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1482:	2205      	movs	r2, #5
    1484:	709a      	strb	r2, [r3, #2]
    1486:	e795      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1488:	460b      	mov	r3, r1
    148a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    148c:	2100      	movs	r1, #0
    148e:	4630      	mov	r0, r6
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <_usb_d_cb_trans_done+0x148>)
    1492:	4798      	blx	r3
    1494:	e78e      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1496:	4a0d      	ldr	r2, [pc, #52]	; (14cc <_usb_d_cb_trans_done+0x144>)
    1498:	0143      	lsls	r3, r0, #5
    149a:	18d1      	adds	r1, r2, r3
    149c:	2004      	movs	r0, #4
    149e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    14a0:	5cd3      	ldrb	r3, [r2, r3]
    14a2:	b12b      	cbz	r3, 14b0 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    14a4:	4b09      	ldr	r3, [pc, #36]	; (14cc <_usb_d_cb_trans_done+0x144>)
    14a6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    14aa:	2201      	movs	r2, #1
    14ac:	709a      	strb	r2, [r3, #2]
    14ae:	e781      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    14b0:	2302      	movs	r3, #2
    14b2:	708b      	strb	r3, [r1, #2]
			return;
    14b4:	e786      	b.n	13c4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <_usb_d_cb_trans_done+0x144>)
    14b8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    14bc:	2200      	movs	r2, #0
    14be:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    14c0:	2205      	movs	r2, #5
    14c2:	70da      	strb	r2, [r3, #3]
    14c4:	e776      	b.n	13b4 <_usb_d_cb_trans_done+0x2c>
    14c6:	bf00      	nop
    14c8:	0000130d 	.word	0x0000130d
    14cc:	20000428 	.word	0x20000428
    14d0:	00004019 	.word	0x00004019
    14d4:	000041c1 	.word	0x000041c1

000014d8 <usb_d_cb_trans_setup>:
{
    14d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14dc:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    14de:	4b1c      	ldr	r3, [pc, #112]	; (1550 <usb_d_cb_trans_setup+0x78>)
    14e0:	4798      	blx	r3
    14e2:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    14e4:	4c1b      	ldr	r4, [pc, #108]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    14e6:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    14ea:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    14ec:	4621      	mov	r1, r4
    14ee:	4628      	mov	r0, r5
    14f0:	4b19      	ldr	r3, [pc, #100]	; (1558 <usb_d_cb_trans_setup+0x80>)
    14f2:	4798      	blx	r3
	if (n != 8) {
    14f4:	b2c0      	uxtb	r0, r0
    14f6:	2808      	cmp	r0, #8
    14f8:	d009      	beq.n	150e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    14fa:	2101      	movs	r1, #1
    14fc:	4628      	mov	r0, r5
    14fe:	4c17      	ldr	r4, [pc, #92]	; (155c <usb_d_cb_trans_setup+0x84>)
    1500:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1502:	2101      	movs	r1, #1
    1504:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1508:	47a0      	blx	r4
		return;
    150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    150e:	2100      	movs	r1, #0
    1510:	4628      	mov	r0, r5
    1512:	4f12      	ldr	r7, [pc, #72]	; (155c <usb_d_cb_trans_setup+0x84>)
    1514:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1516:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    151a:	2100      	movs	r1, #0
    151c:	4640      	mov	r0, r8
    151e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1520:	4b0c      	ldr	r3, [pc, #48]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    1522:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1526:	2201      	movs	r2, #1
    1528:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    152a:	695b      	ldr	r3, [r3, #20]
    152c:	4621      	mov	r1, r4
    152e:	4628      	mov	r0, r5
    1530:	4798      	blx	r3
    1532:	b108      	cbz	r0, 1538 <usb_d_cb_trans_setup+0x60>
    1534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <usb_d_cb_trans_setup+0x7c>)
    153a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    153e:	2305      	movs	r3, #5
    1540:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1542:	2101      	movs	r1, #1
    1544:	4628      	mov	r0, r5
    1546:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1548:	2101      	movs	r1, #1
    154a:	4640      	mov	r0, r8
    154c:	47b8      	blx	r7
    154e:	e7f1      	b.n	1534 <usb_d_cb_trans_setup+0x5c>
    1550:	0000130d 	.word	0x0000130d
    1554:	20000428 	.word	0x20000428
    1558:	00004161 	.word	0x00004161
    155c:	00004019 	.word	0x00004019

00001560 <usb_d_init>:

int32_t usb_d_init(void)
{
    1560:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1562:	4b11      	ldr	r3, [pc, #68]	; (15a8 <usb_d_init+0x48>)
    1564:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1566:	2800      	cmp	r0, #0
    1568:	db1d      	blt.n	15a6 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    156a:	4c10      	ldr	r4, [pc, #64]	; (15ac <usb_d_init+0x4c>)
    156c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1570:	2100      	movs	r1, #0
    1572:	4620      	mov	r0, r4
    1574:	4b0e      	ldr	r3, [pc, #56]	; (15b0 <usb_d_init+0x50>)
    1576:	4798      	blx	r3
    1578:	4623      	mov	r3, r4
    157a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    157e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1580:	4a0c      	ldr	r2, [pc, #48]	; (15b4 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1582:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1584:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1586:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1588:	61da      	str	r2, [r3, #28]
    158a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    158c:	4283      	cmp	r3, r0
    158e:	d1f8      	bne.n	1582 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1590:	4909      	ldr	r1, [pc, #36]	; (15b8 <usb_d_init+0x58>)
    1592:	2000      	movs	r0, #0
    1594:	4c09      	ldr	r4, [pc, #36]	; (15bc <usb_d_init+0x5c>)
    1596:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1598:	4909      	ldr	r1, [pc, #36]	; (15c0 <usb_d_init+0x60>)
    159a:	2001      	movs	r0, #1
    159c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    159e:	4909      	ldr	r1, [pc, #36]	; (15c4 <usb_d_init+0x64>)
    15a0:	2002      	movs	r0, #2
    15a2:	47a0      	blx	r4
	return ERR_NONE;
    15a4:	2000      	movs	r0, #0
}
    15a6:	bd10      	pop	{r4, pc}
    15a8:	000039fd 	.word	0x000039fd
    15ac:	20000428 	.word	0x20000428
    15b0:	000057d7 	.word	0x000057d7
    15b4:	00001351 	.word	0x00001351
    15b8:	000014d9 	.word	0x000014d9
    15bc:	000043c5 	.word	0x000043c5
    15c0:	00001355 	.word	0x00001355
    15c4:	00001389 	.word	0x00001389

000015c8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    15c8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    15ca:	4b01      	ldr	r3, [pc, #4]	; (15d0 <usb_d_register_callback+0x8>)
    15cc:	4798      	blx	r3
    15ce:	bd08      	pop	{r3, pc}
    15d0:	000043a1 	.word	0x000043a1

000015d4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    15d4:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    15d6:	4b01      	ldr	r3, [pc, #4]	; (15dc <usb_d_enable+0x8>)
    15d8:	4798      	blx	r3
}
    15da:	bd08      	pop	{r3, pc}
    15dc:	00003af9 	.word	0x00003af9

000015e0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    15e0:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    15e2:	4b01      	ldr	r3, [pc, #4]	; (15e8 <usb_d_attach+0x8>)
    15e4:	4798      	blx	r3
    15e6:	bd08      	pop	{r3, pc}
    15e8:	00003b65 	.word	0x00003b65

000015ec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    15ec:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    15ee:	4b01      	ldr	r3, [pc, #4]	; (15f4 <usb_d_set_address+0x8>)
    15f0:	4798      	blx	r3
    15f2:	bd08      	pop	{r3, pc}
    15f4:	00003b77 	.word	0x00003b77

000015f8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15fa:	4606      	mov	r6, r0
    15fc:	460c      	mov	r4, r1
    15fe:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1600:	4b0f      	ldr	r3, [pc, #60]	; (1640 <usb_d_ep_init+0x48>)
    1602:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1604:	2800      	cmp	r0, #0
    1606:	da14      	bge.n	1632 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1608:	20ff      	movs	r0, #255	; 0xff
    160a:	4b0d      	ldr	r3, [pc, #52]	; (1640 <usb_d_ep_init+0x48>)
    160c:	4798      	blx	r3
		if (ep_index < 0) {
    160e:	1e05      	subs	r5, r0, #0
    1610:	db12      	blt.n	1638 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1612:	463a      	mov	r2, r7
    1614:	4621      	mov	r1, r4
    1616:	4630      	mov	r0, r6
    1618:	4b0a      	ldr	r3, [pc, #40]	; (1644 <usb_d_ep_init+0x4c>)
    161a:	4798      	blx	r3
	if (rc < 0) {
    161c:	2800      	cmp	r0, #0
    161e:	db0d      	blt.n	163c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1620:	4b09      	ldr	r3, [pc, #36]	; (1648 <usb_d_ep_init+0x50>)
    1622:	0168      	lsls	r0, r5, #5
    1624:	181a      	adds	r2, r3, r0
    1626:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1628:	f004 0403 	and.w	r4, r4, #3
    162c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    162e:	2000      	movs	r0, #0
    1630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1632:	f06f 0013 	mvn.w	r0, #19
    1636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1638:	f06f 0014 	mvn.w	r0, #20
}
    163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    163e:	bf00      	nop
    1640:	0000130d 	.word	0x0000130d
    1644:	00003b85 	.word	0x00003b85
    1648:	20000428 	.word	0x20000428

0000164c <usb_d_ep0_init>:
{
    164c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    164e:	4602      	mov	r2, r0
    1650:	2100      	movs	r1, #0
    1652:	4608      	mov	r0, r1
    1654:	4b01      	ldr	r3, [pc, #4]	; (165c <usb_d_ep0_init+0x10>)
    1656:	4798      	blx	r3
}
    1658:	bd08      	pop	{r3, pc}
    165a:	bf00      	nop
    165c:	000015f9 	.word	0x000015f9

00001660 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1660:	b538      	push	{r3, r4, r5, lr}
    1662:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1664:	4b06      	ldr	r3, [pc, #24]	; (1680 <usb_d_ep_deinit+0x20>)
    1666:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1668:	1e04      	subs	r4, r0, #0
    166a:	db07      	blt.n	167c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    166c:	4628      	mov	r0, r5
    166e:	4b05      	ldr	r3, [pc, #20]	; (1684 <usb_d_ep_deinit+0x24>)
    1670:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1672:	4805      	ldr	r0, [pc, #20]	; (1688 <usb_d_ep_deinit+0x28>)
    1674:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1678:	23ff      	movs	r3, #255	; 0xff
    167a:	7043      	strb	r3, [r0, #1]
    167c:	bd38      	pop	{r3, r4, r5, pc}
    167e:	bf00      	nop
    1680:	0000130d 	.word	0x0000130d
    1684:	00003c9d 	.word	0x00003c9d
    1688:	20000428 	.word	0x20000428

0000168c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    168c:	b538      	push	{r3, r4, r5, lr}
    168e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1690:	4b0e      	ldr	r3, [pc, #56]	; (16cc <usb_d_ep_enable+0x40>)
    1692:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1694:	1e04      	subs	r4, r0, #0
    1696:	db16      	blt.n	16c6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1698:	0163      	lsls	r3, r4, #5
    169a:	4a0d      	ldr	r2, [pc, #52]	; (16d0 <usb_d_ep_enable+0x44>)
    169c:	5cd3      	ldrb	r3, [r2, r3]
    169e:	2b00      	cmp	r3, #0
    16a0:	bf0c      	ite	eq
    16a2:	2202      	moveq	r2, #2
    16a4:	2201      	movne	r2, #1
    16a6:	4b0a      	ldr	r3, [pc, #40]	; (16d0 <usb_d_ep_enable+0x44>)
    16a8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16ac:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    16ae:	4628      	mov	r0, r5
    16b0:	4b08      	ldr	r3, [pc, #32]	; (16d4 <usb_d_ep_enable+0x48>)
    16b2:	4798      	blx	r3
	if (rc < 0) {
    16b4:	2800      	cmp	r0, #0
    16b6:	db00      	blt.n	16ba <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    16b8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    16ba:	4b05      	ldr	r3, [pc, #20]	; (16d0 <usb_d_ep_enable+0x44>)
    16bc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    16c0:	2300      	movs	r3, #0
    16c2:	70a3      	strb	r3, [r4, #2]
    16c4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    16c6:	f06f 0011 	mvn.w	r0, #17
    16ca:	e7f5      	b.n	16b8 <usb_d_ep_enable+0x2c>
    16cc:	0000130d 	.word	0x0000130d
    16d0:	20000428 	.word	0x20000428
    16d4:	00003d61 	.word	0x00003d61

000016d8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    16d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16dc:	b086      	sub	sp, #24
    16de:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    16e0:	7a07      	ldrb	r7, [r0, #8]
    16e2:	4638      	mov	r0, r7
    16e4:	4b3f      	ldr	r3, [pc, #252]	; (17e4 <usb_d_ep_transfer+0x10c>)
    16e6:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    16e8:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    16ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    16ee:	1e06      	subs	r6, r0, #0
    16f0:	db72      	blt.n	17d8 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    16f2:	a804      	add	r0, sp, #16
    16f4:	4b3c      	ldr	r3, [pc, #240]	; (17e8 <usb_d_ep_transfer+0x110>)
    16f6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    16f8:	4b3c      	ldr	r3, [pc, #240]	; (17ec <usb_d_ep_transfer+0x114>)
    16fa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    16fe:	789b      	ldrb	r3, [r3, #2]
    1700:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1704:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1708:	b2db      	uxtb	r3, r3
    170a:	2b01      	cmp	r3, #1
    170c:	d011      	beq.n	1732 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    170e:	a804      	add	r0, sp, #16
    1710:	4b37      	ldr	r3, [pc, #220]	; (17f0 <usb_d_ep_transfer+0x118>)
    1712:	4798      	blx	r3
		switch (state) {
    1714:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1718:	b2db      	uxtb	r3, r3
    171a:	2b05      	cmp	r3, #5
    171c:	d05f      	beq.n	17de <usb_d_ep_transfer+0x106>
    171e:	2b06      	cmp	r3, #6
    1720:	d023      	beq.n	176a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1722:	2b00      	cmp	r3, #0
    1724:	bf0c      	ite	eq
    1726:	f06f 0012 	mvneq.w	r0, #18
    172a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    172c:	b006      	add	sp, #24
    172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1732:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 17ec <usb_d_ep_transfer+0x114>
    1736:	ea4f 1946 	mov.w	r9, r6, lsl #5
    173a:	eb0a 0309 	add.w	r3, sl, r9
    173e:	2203      	movs	r2, #3
    1740:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1742:	a804      	add	r0, sp, #16
    1744:	4b2a      	ldr	r3, [pc, #168]	; (17f0 <usb_d_ep_transfer+0x118>)
    1746:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1748:	f81a 3009 	ldrb.w	r3, [sl, r9]
    174c:	b183      	cbz	r3, 1770 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    174e:	7a22      	ldrb	r2, [r4, #8]
    1750:	3500      	adds	r5, #0
    1752:	bf18      	it	ne
    1754:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1756:	6823      	ldr	r3, [r4, #0]
    1758:	9301      	str	r3, [sp, #4]
    175a:	f8cd 8008 	str.w	r8, [sp, #8]
    175e:	f017 0f80 	tst.w	r7, #128	; 0x80
    1762:	d119      	bne.n	1798 <usb_d_ep_transfer+0xc0>
    1764:	f002 030f 	and.w	r3, r2, #15
    1768:	e018      	b.n	179c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    176a:	f06f 000f 	mvn.w	r0, #15
    176e:	e7dd      	b.n	172c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1770:	4b1e      	ldr	r3, [pc, #120]	; (17ec <usb_d_ep_transfer+0x114>)
    1772:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1776:	7cda      	ldrb	r2, [r3, #19]
    1778:	7c9d      	ldrb	r5, [r3, #18]
    177a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    177e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1780:	b9a5      	cbnz	r5, 17ac <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1782:	4b1a      	ldr	r3, [pc, #104]	; (17ec <usb_d_ep_transfer+0x114>)
    1784:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1788:	2304      	movs	r3, #4
    178a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    178c:	2300      	movs	r3, #0
			zlp                 = true;
    178e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1790:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1792:	6821      	ldr	r1, [r4, #0]
    1794:	9101      	str	r1, [sp, #4]
    1796:	9302      	str	r3, [sp, #8]
    1798:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    179c:	f88d 300c 	strb.w	r3, [sp, #12]
    17a0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    17a4:	a801      	add	r0, sp, #4
    17a6:	4b13      	ldr	r3, [pc, #76]	; (17f4 <usb_d_ep_transfer+0x11c>)
    17a8:	4798      	blx	r3
	return rc;
    17aa:	e7bf      	b.n	172c <usb_d_ep_transfer+0x54>
    17ac:	4643      	mov	r3, r8
    17ae:	45a8      	cmp	r8, r5
    17b0:	bf28      	it	cs
    17b2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    17b4:	4a0d      	ldr	r2, [pc, #52]	; (17ec <usb_d_ep_transfer+0x114>)
    17b6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    17ba:	f996 200c 	ldrsb.w	r2, [r6, #12]
    17be:	2a00      	cmp	r2, #0
    17c0:	db05      	blt.n	17ce <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    17c2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    17c4:	6821      	ldr	r1, [r4, #0]
    17c6:	9101      	str	r1, [sp, #4]
    17c8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    17ca:	2500      	movs	r5, #0
    17cc:	e7ca      	b.n	1764 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    17ce:	429d      	cmp	r5, r3
    17d0:	bf94      	ite	ls
    17d2:	2500      	movls	r5, #0
    17d4:	2501      	movhi	r5, #1
    17d6:	e7db      	b.n	1790 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    17d8:	f06f 0011 	mvn.w	r0, #17
    17dc:	e7a6      	b.n	172c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    17de:	2002      	movs	r0, #2
    17e0:	e7a4      	b.n	172c <usb_d_ep_transfer+0x54>
    17e2:	bf00      	nop
    17e4:	0000130d 	.word	0x0000130d
    17e8:	00000ced 	.word	0x00000ced
    17ec:	20000428 	.word	0x20000428
    17f0:	00000cfb 	.word	0x00000cfb
    17f4:	000041c1 	.word	0x000041c1

000017f8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    17f8:	b538      	push	{r3, r4, r5, lr}
    17fa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    17fc:	b141      	cbz	r1, 1810 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    17fe:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1800:	bf0c      	ite	eq
    1802:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1804:	2102      	movne	r1, #2
    1806:	4b13      	ldr	r3, [pc, #76]	; (1854 <usb_d_ep_halt+0x5c>)
    1808:	4798      	blx	r3
    180a:	4603      	mov	r3, r0
	}
}
    180c:	4618      	mov	r0, r3
    180e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1810:	4b11      	ldr	r3, [pc, #68]	; (1858 <usb_d_ep_halt+0x60>)
    1812:	4798      	blx	r3
	if (ep_index < 0) {
    1814:	1e05      	subs	r5, r0, #0
    1816:	db19      	blt.n	184c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1818:	2102      	movs	r1, #2
    181a:	4620      	mov	r0, r4
    181c:	4b0d      	ldr	r3, [pc, #52]	; (1854 <usb_d_ep_halt+0x5c>)
    181e:	4798      	blx	r3
    1820:	4603      	mov	r3, r0
    1822:	2800      	cmp	r0, #0
    1824:	d0f2      	beq.n	180c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1826:	2100      	movs	r1, #0
    1828:	4620      	mov	r0, r4
    182a:	4b0a      	ldr	r3, [pc, #40]	; (1854 <usb_d_ep_halt+0x5c>)
    182c:	4798      	blx	r3
		if (rc < 0) {
    182e:	1e03      	subs	r3, r0, #0
    1830:	dbec      	blt.n	180c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1832:	4b0a      	ldr	r3, [pc, #40]	; (185c <usb_d_ep_halt+0x64>)
    1834:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1838:	2201      	movs	r2, #1
    183a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    183c:	2103      	movs	r1, #3
    183e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1840:	69db      	ldr	r3, [r3, #28]
    1842:	2200      	movs	r2, #0
    1844:	4620      	mov	r0, r4
    1846:	4798      	blx	r3
	return ERR_NONE;
    1848:	2300      	movs	r3, #0
    184a:	e7df      	b.n	180c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    184c:	f06f 0311 	mvn.w	r3, #17
    1850:	e7dc      	b.n	180c <usb_d_ep_halt+0x14>
    1852:	bf00      	nop
    1854:	00004019 	.word	0x00004019
    1858:	0000130d 	.word	0x0000130d
    185c:	20000428 	.word	0x20000428

00001860 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1860:	b538      	push	{r3, r4, r5, lr}
    1862:	460d      	mov	r5, r1
    1864:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1866:	4b0e      	ldr	r3, [pc, #56]	; (18a0 <usb_d_ep_register_callback+0x40>)
    1868:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    186a:	4b0e      	ldr	r3, [pc, #56]	; (18a4 <usb_d_ep_register_callback+0x44>)
    186c:	2c00      	cmp	r4, #0
    186e:	bf08      	it	eq
    1870:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1872:	2800      	cmp	r0, #0
    1874:	db13      	blt.n	189e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1876:	2d01      	cmp	r5, #1
    1878:	d008      	beq.n	188c <usb_d_ep_register_callback+0x2c>
    187a:	b115      	cbz	r5, 1882 <usb_d_ep_register_callback+0x22>
    187c:	2d02      	cmp	r5, #2
    187e:	d00a      	beq.n	1896 <usb_d_ep_register_callback+0x36>
    1880:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1882:	4b09      	ldr	r3, [pc, #36]	; (18a8 <usb_d_ep_register_callback+0x48>)
    1884:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1888:	6144      	str	r4, [r0, #20]
		break;
    188a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <usb_d_ep_register_callback+0x48>)
    188e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1892:	6184      	str	r4, [r0, #24]
		break;
    1894:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1896:	4b04      	ldr	r3, [pc, #16]	; (18a8 <usb_d_ep_register_callback+0x48>)
    1898:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    189c:	61c4      	str	r4, [r0, #28]
    189e:	bd38      	pop	{r3, r4, r5, pc}
    18a0:	0000130d 	.word	0x0000130d
    18a4:	00001351 	.word	0x00001351
    18a8:	20000428 	.word	0x20000428

000018ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    18ac:	b900      	cbnz	r0, 18b0 <assert+0x4>
		__asm("BKPT #0");
    18ae:	be00      	bkpt	0x0000
    18b0:	4770      	bx	lr

000018b2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    18b2:	6803      	ldr	r3, [r0, #0]
    18b4:	b14b      	cbz	r3, 18ca <is_list_element+0x18>
		if (it == element) {
    18b6:	428b      	cmp	r3, r1
    18b8:	d009      	beq.n	18ce <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	b11b      	cbz	r3, 18c6 <is_list_element+0x14>
		if (it == element) {
    18be:	4299      	cmp	r1, r3
    18c0:	d1fb      	bne.n	18ba <is_list_element+0x8>
			return true;
    18c2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    18c4:	4770      	bx	lr
	return false;
    18c6:	2000      	movs	r0, #0
    18c8:	4770      	bx	lr
    18ca:	2000      	movs	r0, #0
    18cc:	4770      	bx	lr
			return true;
    18ce:	2001      	movs	r0, #1
    18d0:	4770      	bx	lr
	...

000018d4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    18d4:	b570      	push	{r4, r5, r6, lr}
    18d6:	4605      	mov	r5, r0
    18d8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    18da:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    18dc:	4b0a      	ldr	r3, [pc, #40]	; (1908 <list_insert_at_end+0x34>)
    18de:	4798      	blx	r3
    18e0:	f080 0001 	eor.w	r0, r0, #1
    18e4:	224f      	movs	r2, #79	; 0x4f
    18e6:	4909      	ldr	r1, [pc, #36]	; (190c <list_insert_at_end+0x38>)
    18e8:	b2c0      	uxtb	r0, r0
    18ea:	4b09      	ldr	r3, [pc, #36]	; (1910 <list_insert_at_end+0x3c>)
    18ec:	4798      	blx	r3

	if (!list->head) {
    18ee:	682b      	ldr	r3, [r5, #0]
    18f0:	b91b      	cbnz	r3, 18fa <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    18f2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    18f4:	6033      	str	r3, [r6, #0]
		return;
    18f6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    18f8:	461c      	mov	r4, r3
	while (it->next) {
    18fa:	6823      	ldr	r3, [r4, #0]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d1fb      	bne.n	18f8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1900:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1902:	6033      	str	r3, [r6, #0]
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	bf00      	nop
    1908:	000018b3 	.word	0x000018b3
    190c:	00006174 	.word	0x00006174
    1910:	000018ad 	.word	0x000018ad

00001914 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	460e      	mov	r6, r1
    1918:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    191a:	4604      	mov	r4, r0
    191c:	b178      	cbz	r0, 193e <ringbuffer_init+0x2a>
    191e:	b181      	cbz	r1, 1942 <ringbuffer_init+0x2e>
    1920:	b1a2      	cbz	r2, 194c <ringbuffer_init+0x38>
    1922:	2001      	movs	r0, #1
    1924:	2228      	movs	r2, #40	; 0x28
    1926:	490d      	ldr	r1, [pc, #52]	; (195c <ringbuffer_init+0x48>)
    1928:	4b0d      	ldr	r3, [pc, #52]	; (1960 <ringbuffer_init+0x4c>)
    192a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    192c:	1e6b      	subs	r3, r5, #1
    192e:	421d      	tst	r5, r3
    1930:	d109      	bne.n	1946 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1932:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1934:	2000      	movs	r0, #0
    1936:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1938:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    193a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    193c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    193e:	2000      	movs	r0, #0
    1940:	e7f0      	b.n	1924 <ringbuffer_init+0x10>
    1942:	2000      	movs	r0, #0
    1944:	e7ee      	b.n	1924 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1946:	f06f 000c 	mvn.w	r0, #12
    194a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    194c:	2228      	movs	r2, #40	; 0x28
    194e:	4903      	ldr	r1, [pc, #12]	; (195c <ringbuffer_init+0x48>)
    1950:	2000      	movs	r0, #0
    1952:	4b03      	ldr	r3, [pc, #12]	; (1960 <ringbuffer_init+0x4c>)
    1954:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1956:	1e6b      	subs	r3, r5, #1
    1958:	e7eb      	b.n	1932 <ringbuffer_init+0x1e>
    195a:	bf00      	nop
    195c:	00006194 	.word	0x00006194
    1960:	000018ad 	.word	0x000018ad

00001964 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1964:	b538      	push	{r3, r4, r5, lr}
    1966:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1968:	4604      	mov	r4, r0
    196a:	b1a0      	cbz	r0, 1996 <ringbuffer_get+0x32>
    196c:	1c08      	adds	r0, r1, #0
    196e:	bf18      	it	ne
    1970:	2001      	movne	r0, #1
    1972:	2240      	movs	r2, #64	; 0x40
    1974:	490a      	ldr	r1, [pc, #40]	; (19a0 <ringbuffer_get+0x3c>)
    1976:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <ringbuffer_get+0x40>)
    1978:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    197a:	68a3      	ldr	r3, [r4, #8]
    197c:	68e2      	ldr	r2, [r4, #12]
    197e:	429a      	cmp	r2, r3
    1980:	d00b      	beq.n	199a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1982:	6862      	ldr	r2, [r4, #4]
    1984:	4013      	ands	r3, r2
    1986:	6822      	ldr	r2, [r4, #0]
    1988:	5cd3      	ldrb	r3, [r2, r3]
    198a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    198c:	68a3      	ldr	r3, [r4, #8]
    198e:	3301      	adds	r3, #1
    1990:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1992:	2000      	movs	r0, #0
    1994:	bd38      	pop	{r3, r4, r5, pc}
    1996:	2000      	movs	r0, #0
    1998:	e7eb      	b.n	1972 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    199a:	f06f 0009 	mvn.w	r0, #9
}
    199e:	bd38      	pop	{r3, r4, r5, pc}
    19a0:	00006194 	.word	0x00006194
    19a4:	000018ad 	.word	0x000018ad

000019a8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    19a8:	b538      	push	{r3, r4, r5, lr}
    19aa:	460d      	mov	r5, r1
	ASSERT(rb);
    19ac:	4604      	mov	r4, r0
    19ae:	2251      	movs	r2, #81	; 0x51
    19b0:	490b      	ldr	r1, [pc, #44]	; (19e0 <ringbuffer_put+0x38>)
    19b2:	3000      	adds	r0, #0
    19b4:	bf18      	it	ne
    19b6:	2001      	movne	r0, #1
    19b8:	4b0a      	ldr	r3, [pc, #40]	; (19e4 <ringbuffer_put+0x3c>)
    19ba:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    19bc:	68e3      	ldr	r3, [r4, #12]
    19be:	6862      	ldr	r2, [r4, #4]
    19c0:	4013      	ands	r3, r2
    19c2:	6822      	ldr	r2, [r4, #0]
    19c4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    19c6:	68e3      	ldr	r3, [r4, #12]
    19c8:	6861      	ldr	r1, [r4, #4]
    19ca:	68a2      	ldr	r2, [r4, #8]
    19cc:	1a9a      	subs	r2, r3, r2
    19ce:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    19d0:	bf84      	itt	hi
    19d2:	1a59      	subhi	r1, r3, r1
    19d4:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    19d6:	3301      	adds	r3, #1
    19d8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    19da:	2000      	movs	r0, #0
    19dc:	bd38      	pop	{r3, r4, r5, pc}
    19de:	bf00      	nop
    19e0:	00006194 	.word	0x00006194
    19e4:	000018ad 	.word	0x000018ad

000019e8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    19e8:	b510      	push	{r4, lr}
	ASSERT(rb);
    19ea:	4604      	mov	r4, r0
    19ec:	2267      	movs	r2, #103	; 0x67
    19ee:	4905      	ldr	r1, [pc, #20]	; (1a04 <ringbuffer_num+0x1c>)
    19f0:	3000      	adds	r0, #0
    19f2:	bf18      	it	ne
    19f4:	2001      	movne	r0, #1
    19f6:	4b04      	ldr	r3, [pc, #16]	; (1a08 <ringbuffer_num+0x20>)
    19f8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    19fa:	68e0      	ldr	r0, [r4, #12]
    19fc:	68a3      	ldr	r3, [r4, #8]
}
    19fe:	1ac0      	subs	r0, r0, r3
    1a00:	bd10      	pop	{r4, pc}
    1a02:	bf00      	nop
    1a04:	00006194 	.word	0x00006194
    1a08:	000018ad 	.word	0x000018ad

00001a0c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1a0c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1a0e:	4a06      	ldr	r2, [pc, #24]	; (1a28 <_sbrk+0x1c>)
    1a10:	6812      	ldr	r2, [r2, #0]
    1a12:	b122      	cbz	r2, 1a1e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a14:	4a04      	ldr	r2, [pc, #16]	; (1a28 <_sbrk+0x1c>)
    1a16:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a18:	4403      	add	r3, r0
    1a1a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1a1c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a1e:	4903      	ldr	r1, [pc, #12]	; (1a2c <_sbrk+0x20>)
    1a20:	4a01      	ldr	r2, [pc, #4]	; (1a28 <_sbrk+0x1c>)
    1a22:	6011      	str	r1, [r2, #0]
    1a24:	e7f6      	b.n	1a14 <_sbrk+0x8>
    1a26:	bf00      	nop
    1a28:	200005c8 	.word	0x200005c8
    1a2c:	20011598 	.word	0x20011598

00001a30 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1a30:	6940      	ldr	r0, [r0, #20]
    1a32:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1a36:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1a3a:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    1a3c:	0040      	lsls	r0, r0, #1
    1a3e:	3076      	adds	r0, #118	; 0x76
}
    1a40:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1a44:	4770      	bx	lr
	...

00001a48 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1a48:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1a4a:	f013 0f01 	tst.w	r3, #1
    1a4e:	d11b      	bne.n	1a88 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a50:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a52:	f013 0f03 	tst.w	r3, #3
    1a56:	d1fb      	bne.n	1a50 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1a58:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1a5a:	f013 0f02 	tst.w	r3, #2
    1a5e:	d00d      	beq.n	1a7c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1a60:	8803      	ldrh	r3, [r0, #0]
    1a62:	f023 0302 	bic.w	r3, r3, #2
    1a66:	041b      	lsls	r3, r3, #16
    1a68:	0c1b      	lsrs	r3, r3, #16
    1a6a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a6e:	f013 0f03 	tst.w	r3, #3
    1a72:	d1fb      	bne.n	1a6c <_adc_init+0x24>
    1a74:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a76:	f013 0f02 	tst.w	r3, #2
    1a7a:	d1fb      	bne.n	1a74 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1a7c:	2301      	movs	r3, #1
    1a7e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a82:	f013 0f03 	tst.w	r3, #3
    1a86:	d1fb      	bne.n	1a80 <_adc_init+0x38>
    1a88:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a8a:	f013 0f01 	tst.w	r3, #1
    1a8e:	d1fb      	bne.n	1a88 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1a90:	2316      	movs	r3, #22
    1a92:	4a37      	ldr	r2, [pc, #220]	; (1b70 <_adc_init+0x128>)
    1a94:	fb03 2301 	mla	r3, r3, r1, r2
    1a98:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1a9a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d1fa      	bne.n	1a9c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1aa6:	2316      	movs	r3, #22
    1aa8:	4a31      	ldr	r2, [pc, #196]	; (1b70 <_adc_init+0x128>)
    1aaa:	fb03 2301 	mla	r3, r3, r1, r2
    1aae:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1ab0:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ab2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d1fa      	bne.n	1ab2 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1abc:	2316      	movs	r3, #22
    1abe:	4a2c      	ldr	r2, [pc, #176]	; (1b70 <_adc_init+0x128>)
    1ac0:	fb03 2301 	mla	r3, r3, r1, r2
    1ac4:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1ac6:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1ac8:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1aca:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1acc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d1fa      	bne.n	1acc <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1ad6:	2316      	movs	r3, #22
    1ad8:	4a25      	ldr	r2, [pc, #148]	; (1b70 <_adc_init+0x128>)
    1ada:	fb03 2301 	mla	r3, r3, r1, r2
    1ade:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1ae0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ae2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d1fa      	bne.n	1ae2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1aec:	2316      	movs	r3, #22
    1aee:	4a20      	ldr	r2, [pc, #128]	; (1b70 <_adc_init+0x128>)
    1af0:	fb03 2301 	mla	r3, r3, r1, r2
    1af4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1af6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1af8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1afe:	2b00      	cmp	r3, #0
    1b00:	d1fa      	bne.n	1af8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1b02:	2316      	movs	r3, #22
    1b04:	4a1a      	ldr	r2, [pc, #104]	; (1b70 <_adc_init+0x128>)
    1b06:	fb03 2301 	mla	r3, r3, r1, r2
    1b0a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1b0c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b10:	f013 0f80 	tst.w	r3, #128	; 0x80
    1b14:	d1fb      	bne.n	1b0e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1b16:	2316      	movs	r3, #22
    1b18:	4a15      	ldr	r2, [pc, #84]	; (1b70 <_adc_init+0x128>)
    1b1a:	fb03 2301 	mla	r3, r3, r1, r2
    1b1e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1b20:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b22:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b24:	f413 7f80 	tst.w	r3, #256	; 0x100
    1b28:	d1fb      	bne.n	1b22 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1b2a:	2316      	movs	r3, #22
    1b2c:	4a10      	ldr	r2, [pc, #64]	; (1b70 <_adc_init+0x128>)
    1b2e:	fb03 2301 	mla	r3, r3, r1, r2
    1b32:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1b34:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b36:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b38:	f413 7f00 	tst.w	r3, #512	; 0x200
    1b3c:	d1fb      	bne.n	1b36 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1b3e:	2316      	movs	r3, #22
    1b40:	4a0b      	ldr	r2, [pc, #44]	; (1b70 <_adc_init+0x128>)
    1b42:	fb03 2301 	mla	r3, r3, r1, r2
    1b46:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1b48:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1b50:	d1fb      	bne.n	1b4a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1b52:	2216      	movs	r2, #22
    1b54:	4b06      	ldr	r3, [pc, #24]	; (1b70 <_adc_init+0x128>)
    1b56:	fb02 3101 	mla	r1, r2, r1, r3
    1b5a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1b5c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1b5e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1b60:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b64:	f013 0f03 	tst.w	r3, #3
    1b68:	d1fb      	bne.n	1b62 <_adc_init+0x11a>

	return ERR_NONE;
}
    1b6a:	2000      	movs	r0, #0
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop
    1b70:	000061b8 	.word	0x000061b8

00001b74 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1b74:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    1b76:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    1b78:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    1b7c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    1b80:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1b82:	f013 0f01 	tst.w	r3, #1
    1b86:	d106      	bne.n	1b96 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1b88:	f013 0f02 	tst.w	r3, #2
    1b8c:	d10d      	bne.n	1baa <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    1b8e:	f013 0f04 	tst.w	r3, #4
    1b92:	d111      	bne.n	1bb8 <_adc_interrupt_handler+0x44>
    1b94:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1b96:	2301      	movs	r3, #1
    1b98:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    1b9c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    1ba0:	6883      	ldr	r3, [r0, #8]
    1ba2:	b292      	uxth	r2, r2
    1ba4:	2100      	movs	r1, #0
    1ba6:	4798      	blx	r3
    1ba8:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1baa:	2302      	movs	r3, #2
    1bac:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    1bb0:	6843      	ldr	r3, [r0, #4]
    1bb2:	2100      	movs	r1, #0
    1bb4:	4798      	blx	r3
    1bb6:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1bb8:	2304      	movs	r3, #4
    1bba:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    1bbe:	6803      	ldr	r3, [r0, #0]
    1bc0:	2100      	movs	r1, #0
    1bc2:	4798      	blx	r3
	}
}
    1bc4:	e7e6      	b.n	1b94 <_adc_interrupt_handler+0x20>
	...

00001bc8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1bc8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1bcc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1bd0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1bd4:	b148      	cbz	r0, 1bea <_adc_get_regs+0x22>
    1bd6:	2801      	cmp	r0, #1
    1bd8:	d009      	beq.n	1bee <_adc_get_regs+0x26>
{
    1bda:	b508      	push	{r3, lr}
	ASSERT(false);
    1bdc:	228c      	movs	r2, #140	; 0x8c
    1bde:	4905      	ldr	r1, [pc, #20]	; (1bf4 <_adc_get_regs+0x2c>)
    1be0:	2000      	movs	r0, #0
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <_adc_get_regs+0x30>)
    1be4:	4798      	blx	r3
	return 0;
    1be6:	2000      	movs	r0, #0
    1be8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1bea:	2000      	movs	r0, #0
    1bec:	4770      	bx	lr
    1bee:	2001      	movs	r0, #1
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	000061e4 	.word	0x000061e4
    1bf8:	000018ad 	.word	0x000018ad

00001bfc <_adc_async_init>:
{
    1bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c00:	460c      	mov	r4, r1
	ASSERT(device);
    1c02:	4605      	mov	r5, r0
    1c04:	22e6      	movs	r2, #230	; 0xe6
    1c06:	493b      	ldr	r1, [pc, #236]	; (1cf4 <_adc_async_init+0xf8>)
    1c08:	3000      	adds	r0, #0
    1c0a:	bf18      	it	ne
    1c0c:	2001      	movne	r0, #1
    1c0e:	4b3a      	ldr	r3, [pc, #232]	; (1cf8 <_adc_async_init+0xfc>)
    1c10:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1c12:	4620      	mov	r0, r4
    1c14:	4b39      	ldr	r3, [pc, #228]	; (1cfc <_adc_async_init+0x100>)
    1c16:	4798      	blx	r3
    1c18:	4601      	mov	r1, r0
    1c1a:	4620      	mov	r0, r4
    1c1c:	4b38      	ldr	r3, [pc, #224]	; (1d00 <_adc_async_init+0x104>)
    1c1e:	4798      	blx	r3
	if (init_status) {
    1c20:	4606      	mov	r6, r0
    1c22:	b110      	cbz	r0, 1c2a <_adc_async_init+0x2e>
}
    1c24:	4630      	mov	r0, r6
    1c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    1c2a:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    1c2c:	4b35      	ldr	r3, [pc, #212]	; (1d04 <_adc_async_init+0x108>)
    1c2e:	429c      	cmp	r4, r3
    1c30:	d05c      	beq.n	1cec <_adc_async_init+0xf0>
	if (hw == ADC1) {
    1c32:	4b35      	ldr	r3, [pc, #212]	; (1d08 <_adc_async_init+0x10c>)
    1c34:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    1c36:	bf04      	itt	eq
    1c38:	4b34      	ldreq	r3, [pc, #208]	; (1d0c <_adc_async_init+0x110>)
    1c3a:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    1c3c:	4628      	mov	r0, r5
    1c3e:	4f34      	ldr	r7, [pc, #208]	; (1d10 <_adc_async_init+0x114>)
    1c40:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c42:	0943      	lsrs	r3, r0, #5
    1c44:	f000 001f 	and.w	r0, r0, #31
    1c48:	2401      	movs	r4, #1
    1c4a:	fa04 f000 	lsl.w	r0, r4, r0
    1c4e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1d14 <_adc_async_init+0x118>
    1c52:	3320      	adds	r3, #32
    1c54:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c5c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    1c60:	4628      	mov	r0, r5
    1c62:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c64:	0943      	lsrs	r3, r0, #5
    1c66:	f000 001f 	and.w	r0, r0, #31
    1c6a:	fa04 f000 	lsl.w	r0, r4, r0
    1c6e:	3360      	adds	r3, #96	; 0x60
    1c70:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    1c74:	4628      	mov	r0, r5
    1c76:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c78:	0943      	lsrs	r3, r0, #5
    1c7a:	f000 001f 	and.w	r0, r0, #31
    1c7e:	4084      	lsls	r4, r0
    1c80:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    1c84:	4628      	mov	r0, r5
    1c86:	47b8      	blx	r7
    1c88:	3001      	adds	r0, #1
    1c8a:	b280      	uxth	r0, r0
    1c8c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c8e:	2b00      	cmp	r3, #0
    1c90:	dbc8      	blt.n	1c24 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c92:	095b      	lsrs	r3, r3, #5
    1c94:	f000 001f 	and.w	r0, r0, #31
    1c98:	2201      	movs	r2, #1
    1c9a:	fa02 f000 	lsl.w	r0, r2, r0
    1c9e:	3320      	adds	r3, #32
    1ca0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ca8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    1cac:	4628      	mov	r0, r5
    1cae:	47b8      	blx	r7
    1cb0:	3001      	adds	r0, #1
    1cb2:	b280      	uxth	r0, r0
    1cb4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	dbb4      	blt.n	1c24 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cba:	095b      	lsrs	r3, r3, #5
    1cbc:	f000 001f 	and.w	r0, r0, #31
    1cc0:	2201      	movs	r2, #1
    1cc2:	fa02 f000 	lsl.w	r0, r2, r0
    1cc6:	3360      	adds	r3, #96	; 0x60
    1cc8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    1ccc:	4628      	mov	r0, r5
    1cce:	47b8      	blx	r7
    1cd0:	3001      	adds	r0, #1
    1cd2:	b280      	uxth	r0, r0
    1cd4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	dba4      	blt.n	1c24 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cda:	095b      	lsrs	r3, r3, #5
    1cdc:	f000 001f 	and.w	r0, r0, #31
    1ce0:	2201      	movs	r2, #1
    1ce2:	fa02 f000 	lsl.w	r0, r2, r0
    1ce6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    1cea:	e79b      	b.n	1c24 <_adc_async_init+0x28>
		_adc0_dev = dev;
    1cec:	4b07      	ldr	r3, [pc, #28]	; (1d0c <_adc_async_init+0x110>)
    1cee:	601d      	str	r5, [r3, #0]
    1cf0:	e7a4      	b.n	1c3c <_adc_async_init+0x40>
    1cf2:	bf00      	nop
    1cf4:	000061e4 	.word	0x000061e4
    1cf8:	000018ad 	.word	0x000018ad
    1cfc:	00001bc9 	.word	0x00001bc9
    1d00:	00001a49 	.word	0x00001a49
    1d04:	43001c00 	.word	0x43001c00
    1d08:	43002000 	.word	0x43002000
    1d0c:	200005cc 	.word	0x200005cc
    1d10:	00001a31 	.word	0x00001a31
    1d14:	e000e100 	.word	0xe000e100

00001d18 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1d18:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1d1a:	8813      	ldrh	r3, [r2, #0]
    1d1c:	b29b      	uxth	r3, r3
    1d1e:	f043 0302 	orr.w	r3, r3, #2
    1d22:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1d24:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1d26:	f013 0f03 	tst.w	r3, #3
    1d2a:	d1fb      	bne.n	1d24 <_adc_async_enable_channel+0xc>
}
    1d2c:	4770      	bx	lr

00001d2e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1d2e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1d30:	88db      	ldrh	r3, [r3, #6]
    1d32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1d36:	2b03      	cmp	r3, #3
}
    1d38:	bf0c      	ite	eq
    1d3a:	2001      	moveq	r0, #1
    1d3c:	2002      	movne	r0, #2
    1d3e:	4770      	bx	lr

00001d40 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1d40:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1d42:	7d13      	ldrb	r3, [r2, #20]
    1d44:	f043 0302 	orr.w	r3, r3, #2
    1d48:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1d4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1d50:	2b00      	cmp	r3, #0
    1d52:	d1fa      	bne.n	1d4a <_adc_async_convert+0xa>
}
    1d54:	4770      	bx	lr

00001d56 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    1d56:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    1d58:	2a01      	cmp	r2, #1
    1d5a:	d007      	beq.n	1d6c <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    1d5c:	2a02      	cmp	r2, #2
    1d5e:	d00e      	beq.n	1d7e <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    1d60:	b91a      	cbnz	r2, 1d6a <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    1d62:	b1ab      	cbz	r3, 1d90 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    1d64:	2301      	movs	r3, #1
    1d66:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    1d6a:	4770      	bx	lr
	if (value == 0x0) {
    1d6c:	b91b      	cbnz	r3, 1d76 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    1d6e:	2304      	movs	r3, #4
    1d70:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1d74:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    1d76:	2304      	movs	r3, #4
    1d78:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    1d7c:	4770      	bx	lr
	if (value == 0x0) {
    1d7e:	b91b      	cbnz	r3, 1d88 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    1d80:	2302      	movs	r3, #2
    1d82:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1d86:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    1d88:	2302      	movs	r3, #2
    1d8a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    1d8e:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    1d90:	2301      	movs	r3, #1
    1d92:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1d96:	4770      	bx	lr

00001d98 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    1d98:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    1d9a:	4b02      	ldr	r3, [pc, #8]	; (1da4 <ADC0_0_Handler+0xc>)
    1d9c:	6818      	ldr	r0, [r3, #0]
    1d9e:	4b02      	ldr	r3, [pc, #8]	; (1da8 <ADC0_0_Handler+0x10>)
    1da0:	4798      	blx	r3
    1da2:	bd08      	pop	{r3, pc}
    1da4:	200005cc 	.word	0x200005cc
    1da8:	00001b75 	.word	0x00001b75

00001dac <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    1dac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    1dae:	4b02      	ldr	r3, [pc, #8]	; (1db8 <ADC0_1_Handler+0xc>)
    1db0:	6818      	ldr	r0, [r3, #0]
    1db2:	4b02      	ldr	r3, [pc, #8]	; (1dbc <ADC0_1_Handler+0x10>)
    1db4:	4798      	blx	r3
    1db6:	bd08      	pop	{r3, pc}
    1db8:	200005cc 	.word	0x200005cc
    1dbc:	00001b75 	.word	0x00001b75

00001dc0 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    1dc0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1dc2:	4b02      	ldr	r3, [pc, #8]	; (1dcc <ADC1_0_Handler+0xc>)
    1dc4:	6858      	ldr	r0, [r3, #4]
    1dc6:	4b02      	ldr	r3, [pc, #8]	; (1dd0 <ADC1_0_Handler+0x10>)
    1dc8:	4798      	blx	r3
    1dca:	bd08      	pop	{r3, pc}
    1dcc:	200005cc 	.word	0x200005cc
    1dd0:	00001b75 	.word	0x00001b75

00001dd4 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    1dd4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1dd6:	4b02      	ldr	r3, [pc, #8]	; (1de0 <ADC1_1_Handler+0xc>)
    1dd8:	6858      	ldr	r0, [r3, #4]
    1dda:	4b02      	ldr	r3, [pc, #8]	; (1de4 <ADC1_1_Handler+0x10>)
    1ddc:	4798      	blx	r3
    1dde:	bd08      	pop	{r3, pc}
    1de0:	200005cc 	.word	0x200005cc
    1de4:	00001b75 	.word	0x00001b75

00001de8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1de8:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1dec:	fb03 f000 	mul.w	r0, r3, r0
    1df0:	4770      	bx	lr
	...

00001df4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1df4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1df6:	4a0d      	ldr	r2, [pc, #52]	; (1e2c <_init_chip+0x38>)
    1df8:	8813      	ldrh	r3, [r2, #0]
    1dfa:	b29b      	uxth	r3, r3
    1dfc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1dfe:	4b0c      	ldr	r3, [pc, #48]	; (1e30 <_init_chip+0x3c>)
    1e00:	4798      	blx	r3
	_oscctrl_init_sources();
    1e02:	4b0c      	ldr	r3, [pc, #48]	; (1e34 <_init_chip+0x40>)
    1e04:	4798      	blx	r3
	_mclk_init();
    1e06:	4b0c      	ldr	r3, [pc, #48]	; (1e38 <_init_chip+0x44>)
    1e08:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1e0a:	2008      	movs	r0, #8
    1e0c:	4c0b      	ldr	r4, [pc, #44]	; (1e3c <_init_chip+0x48>)
    1e0e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1e10:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <_init_chip+0x4c>)
    1e12:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1e14:	f640 70f7 	movw	r0, #4087	; 0xff7
    1e18:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1e1a:	4a0a      	ldr	r2, [pc, #40]	; (1e44 <_init_chip+0x50>)
    1e1c:	6913      	ldr	r3, [r2, #16]
    1e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1e22:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1e24:	4b08      	ldr	r3, [pc, #32]	; (1e48 <_init_chip+0x54>)
    1e26:	4798      	blx	r3
    1e28:	bd10      	pop	{r4, pc}
    1e2a:	bf00      	nop
    1e2c:	41004000 	.word	0x41004000
    1e30:	000022e5 	.word	0x000022e5
    1e34:	000022f9 	.word	0x000022f9
    1e38:	0000220d 	.word	0x0000220d
    1e3c:	000021b1 	.word	0x000021b1
    1e40:	00002315 	.word	0x00002315
    1e44:	40000800 	.word	0x40000800
    1e48:	00001ec1 	.word	0x00001ec1

00001e4c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1e4c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1e4e:	4a1a      	ldr	r2, [pc, #104]	; (1eb8 <_dmac_handler+0x6c>)
    1e50:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1e52:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1e56:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1e5a:	4818      	ldr	r0, [pc, #96]	; (1ebc <_dmac_handler+0x70>)
    1e5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1e60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1e64:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1e68:	f012 0f01 	tst.w	r2, #1
    1e6c:	d10a      	bne.n	1e84 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1e6e:	011a      	lsls	r2, r3, #4
    1e70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e74:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1e78:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1e7c:	f012 0f02 	tst.w	r2, #2
    1e80:	d10b      	bne.n	1e9a <_dmac_handler+0x4e>
    1e82:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1e84:	011a      	lsls	r2, r3, #4
    1e86:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e8a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1e8e:	2101      	movs	r1, #1
    1e90:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1e94:	6843      	ldr	r3, [r0, #4]
    1e96:	4798      	blx	r3
    1e98:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1e9a:	011a      	lsls	r2, r3, #4
    1e9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ea0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1ea4:	2102      	movs	r1, #2
    1ea6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1eaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1eae:	4a03      	ldr	r2, [pc, #12]	; (1ebc <_dmac_handler+0x70>)
    1eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1eb4:	4798      	blx	r3
	}
}
    1eb6:	e7e4      	b.n	1e82 <_dmac_handler+0x36>
    1eb8:	4100a000 	.word	0x4100a000
    1ebc:	200005d4 	.word	0x200005d4

00001ec0 <_dma_init>:
{
    1ec0:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1ec2:	4a31      	ldr	r2, [pc, #196]	; (1f88 <_dma_init+0xc8>)
    1ec4:	8813      	ldrh	r3, [r2, #0]
    1ec6:	f023 0302 	bic.w	r3, r3, #2
    1eca:	041b      	lsls	r3, r3, #16
    1ecc:	0c1b      	lsrs	r3, r3, #16
    1ece:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1ed0:	8853      	ldrh	r3, [r2, #2]
    1ed2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1ed6:	041b      	lsls	r3, r3, #16
    1ed8:	0c1b      	lsrs	r3, r3, #16
    1eda:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1edc:	8813      	ldrh	r3, [r2, #0]
    1ede:	b29b      	uxth	r3, r3
    1ee0:	f043 0301 	orr.w	r3, r3, #1
    1ee4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1ee6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1ee8:	f013 0f01 	tst.w	r3, #1
    1eec:	d1fb      	bne.n	1ee6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1eee:	4b26      	ldr	r3, [pc, #152]	; (1f88 <_dma_init+0xc8>)
    1ef0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1ef4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1ef6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1efc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1efe:	2100      	movs	r1, #0
    1f00:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1f02:	4a22      	ldr	r2, [pc, #136]	; (1f8c <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1f04:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1f06:	4a22      	ldr	r2, [pc, #136]	; (1f90 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1f08:	639a      	str	r2, [r3, #56]	; 0x38
    1f0a:	4b22      	ldr	r3, [pc, #136]	; (1f94 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1f0c:	4c1f      	ldr	r4, [pc, #124]	; (1f8c <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1f0e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1f10:	681d      	ldr	r5, [r3, #0]
    1f12:	0108      	lsls	r0, r1, #4
    1f14:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    1f18:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1f1c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1f1e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1f20:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1f24:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1f26:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1f2a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1f2c:	1822      	adds	r2, r4, r0
    1f2e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1f30:	60d6      	str	r6, [r2, #12]
    1f32:	3101      	adds	r1, #1
    1f34:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1f36:	2920      	cmp	r1, #32
    1f38:	d1ea      	bne.n	1f10 <_dma_init+0x50>
    1f3a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f3c:	2001      	movs	r0, #1
    1f3e:	4916      	ldr	r1, [pc, #88]	; (1f98 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1f40:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1f42:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1f46:	d00b      	beq.n	1f60 <_dma_init+0xa0>
    1f48:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1f4a:	2b24      	cmp	r3, #36	; 0x24
    1f4c:	d1f8      	bne.n	1f40 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1f4e:	4a0e      	ldr	r2, [pc, #56]	; (1f88 <_dma_init+0xc8>)
    1f50:	8813      	ldrh	r3, [r2, #0]
    1f52:	b29b      	uxth	r3, r3
    1f54:	f043 0302 	orr.w	r3, r3, #2
    1f58:	8013      	strh	r3, [r2, #0]
}
    1f5a:	2000      	movs	r0, #0
    1f5c:	bc70      	pop	{r4, r5, r6}
    1f5e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f60:	095c      	lsrs	r4, r3, #5
    1f62:	f002 021f 	and.w	r2, r2, #31
    1f66:	fa00 f202 	lsl.w	r2, r0, r2
    1f6a:	f104 0520 	add.w	r5, r4, #32
    1f6e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f76:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f7a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1f7e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f82:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1f86:	e7df      	b.n	1f48 <_dma_init+0x88>
    1f88:	4100a000 	.word	0x4100a000
    1f8c:	20001110 	.word	0x20001110
    1f90:	20001310 	.word	0x20001310
    1f94:	000061fc 	.word	0x000061fc
    1f98:	e000e100 	.word	0xe000e100

00001f9c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    1f9c:	b991      	cbnz	r1, 1fc4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    1f9e:	b942      	cbnz	r2, 1fb2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    1fa0:	0100      	lsls	r0, r0, #4
    1fa2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1fa6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1faa:	2302      	movs	r3, #2
    1fac:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1fb0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    1fb2:	0100      	lsls	r0, r0, #4
    1fb4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1fb8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1fbc:	2302      	movs	r3, #2
    1fbe:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1fc2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1fc4:	2901      	cmp	r1, #1
    1fc6:	d000      	beq.n	1fca <_dma_set_irq_state+0x2e>
    1fc8:	4770      	bx	lr
	if (value == 0x0) {
    1fca:	b142      	cbz	r2, 1fde <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    1fcc:	0100      	lsls	r0, r0, #4
    1fce:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1fd2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1fd6:	2301      	movs	r3, #1
    1fd8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1fdc:	e7f4      	b.n	1fc8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    1fde:	0100      	lsls	r0, r0, #4
    1fe0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1fe4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1fe8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    1fec:	4770      	bx	lr
	...

00001ff0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1ff0:	4b02      	ldr	r3, [pc, #8]	; (1ffc <_dma_set_destination_address+0xc>)
    1ff2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1ff6:	6081      	str	r1, [r0, #8]
}
    1ff8:	2000      	movs	r0, #0
    1ffa:	4770      	bx	lr
    1ffc:	20001110 	.word	0x20001110

00002000 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2000:	4b02      	ldr	r3, [pc, #8]	; (200c <_dma_set_source_address+0xc>)
    2002:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2006:	6041      	str	r1, [r0, #4]
}
    2008:	2000      	movs	r0, #0
    200a:	4770      	bx	lr
    200c:	20001110 	.word	0x20001110

00002010 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2010:	4a05      	ldr	r2, [pc, #20]	; (2028 <_dma_srcinc_enable+0x18>)
    2012:	0100      	lsls	r0, r0, #4
    2014:	5a13      	ldrh	r3, [r2, r0]
    2016:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    201c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    2020:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2022:	5211      	strh	r1, [r2, r0]
}
    2024:	2000      	movs	r0, #0
    2026:	4770      	bx	lr
    2028:	20001110 	.word	0x20001110

0000202c <_dma_set_data_amount>:
{
    202c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    202e:	4c14      	ldr	r4, [pc, #80]	; (2080 <_dma_set_data_amount+0x54>)
    2030:	0102      	lsls	r2, r0, #4
    2032:	18a3      	adds	r3, r4, r2
    2034:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2036:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2038:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    203c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    203e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2042:	d006      	beq.n	2052 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2044:	fa01 f403 	lsl.w	r4, r1, r3
    2048:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    204a:	4a0d      	ldr	r2, [pc, #52]	; (2080 <_dma_set_data_amount+0x54>)
    204c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2050:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2052:	4c0b      	ldr	r4, [pc, #44]	; (2080 <_dma_set_data_amount+0x54>)
    2054:	0102      	lsls	r2, r0, #4
    2056:	18a5      	adds	r5, r4, r2
    2058:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    205a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    205c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2060:	d005      	beq.n	206e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2062:	fa01 f303 	lsl.w	r3, r1, r3
    2066:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2068:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    206c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    206e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2070:	4b03      	ldr	r3, [pc, #12]	; (2080 <_dma_set_data_amount+0x54>)
    2072:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2076:	8041      	strh	r1, [r0, #2]
}
    2078:	2000      	movs	r0, #0
    207a:	bc30      	pop	{r4, r5}
    207c:	4770      	bx	lr
    207e:	bf00      	nop
    2080:	20001110 	.word	0x20001110

00002084 <_dma_enable_transaction>:
{
    2084:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2086:	4c0d      	ldr	r4, [pc, #52]	; (20bc <_dma_enable_transaction+0x38>)
    2088:	0103      	lsls	r3, r0, #4
    208a:	5ae2      	ldrh	r2, [r4, r3]
    208c:	b292      	uxth	r2, r2
    208e:	f042 0201 	orr.w	r2, r2, #1
    2092:	52e2      	strh	r2, [r4, r3]
    2094:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2098:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    209c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    209e:	f042 0202 	orr.w	r2, r2, #2
    20a2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    20a4:	b131      	cbz	r1, 20b4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    20a6:	4a06      	ldr	r2, [pc, #24]	; (20c0 <_dma_enable_transaction+0x3c>)
    20a8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    20aa:	2301      	movs	r3, #1
    20ac:	fa03 f000 	lsl.w	r0, r3, r0
    20b0:	4308      	orrs	r0, r1
    20b2:	6110      	str	r0, [r2, #16]
}
    20b4:	2000      	movs	r0, #0
    20b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    20ba:	4770      	bx	lr
    20bc:	20001110 	.word	0x20001110
    20c0:	4100a000 	.word	0x4100a000

000020c4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    20c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    20c8:	4b02      	ldr	r3, [pc, #8]	; (20d4 <_dma_get_channel_resource+0x10>)
    20ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    20ce:	6001      	str	r1, [r0, #0]
}
    20d0:	2000      	movs	r0, #0
    20d2:	4770      	bx	lr
    20d4:	200005d4 	.word	0x200005d4

000020d8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    20d8:	b508      	push	{r3, lr}
	_dmac_handler();
    20da:	4b01      	ldr	r3, [pc, #4]	; (20e0 <DMAC_0_Handler+0x8>)
    20dc:	4798      	blx	r3
    20de:	bd08      	pop	{r3, pc}
    20e0:	00001e4d 	.word	0x00001e4d

000020e4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    20e4:	b508      	push	{r3, lr}
	_dmac_handler();
    20e6:	4b01      	ldr	r3, [pc, #4]	; (20ec <DMAC_1_Handler+0x8>)
    20e8:	4798      	blx	r3
    20ea:	bd08      	pop	{r3, pc}
    20ec:	00001e4d 	.word	0x00001e4d

000020f0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    20f0:	b508      	push	{r3, lr}
	_dmac_handler();
    20f2:	4b01      	ldr	r3, [pc, #4]	; (20f8 <DMAC_2_Handler+0x8>)
    20f4:	4798      	blx	r3
    20f6:	bd08      	pop	{r3, pc}
    20f8:	00001e4d 	.word	0x00001e4d

000020fc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    20fc:	b508      	push	{r3, lr}
	_dmac_handler();
    20fe:	4b01      	ldr	r3, [pc, #4]	; (2104 <DMAC_3_Handler+0x8>)
    2100:	4798      	blx	r3
    2102:	bd08      	pop	{r3, pc}
    2104:	00001e4d 	.word	0x00001e4d

00002108 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2108:	b508      	push	{r3, lr}
	_dmac_handler();
    210a:	4b01      	ldr	r3, [pc, #4]	; (2110 <DMAC_4_Handler+0x8>)
    210c:	4798      	blx	r3
    210e:	bd08      	pop	{r3, pc}
    2110:	00001e4d 	.word	0x00001e4d

00002114 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2114:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2116:	2000      	movs	r0, #0
    2118:	4770      	bx	lr
	...

0000211c <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    211e:	b083      	sub	sp, #12
	int32_t rc = ERR_NONE;
	if (((uint32_t)data) & 0x00000003) {
    2120:	f011 0f03 	tst.w	r1, #3
    2124:	d138      	bne.n	2198 <_crc_sync_crc32+0x7c>
    2126:	461d      	mov	r5, r3
    2128:	4617      	mov	r7, r2
    212a:	460e      	mov	r6, r1
    212c:	4604      	mov	r4, r0
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
	}

	CRITICAL_SECTION_ENTER()
    212e:	a801      	add	r0, sp, #4
    2130:	4b1b      	ldr	r3, [pc, #108]	; (21a0 <_crc_sync_crc32+0x84>)
    2132:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    2134:	6820      	ldr	r0, [r4, #0]
    2136:	4b1b      	ldr	r3, [pc, #108]	; (21a4 <_crc_sync_crc32+0x88>)
    2138:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    213a:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    213c:	605e      	str	r6, [r3, #4]
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    213e:	6823      	ldr	r3, [r4, #0]

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    2140:	6899      	ldr	r1, [r3, #8]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    2142:	f001 0103 	and.w	r1, r1, #3
	tmp |= DSU_LENGTH_LENGTH(data);
    2146:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
	((Dsu *)hw)->LENGTH.reg = tmp;
    214a:	6099      	str	r1, [r3, #8]
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    214c:	6823      	ldr	r3, [r4, #0]
    214e:	682a      	ldr	r2, [r5, #0]
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    2150:	60da      	str	r2, [r3, #12]
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    2152:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    2154:	2204      	movs	r2, #4
    2156:	701a      	strb	r2, [r3, #0]

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    2158:	6821      	ldr	r1, [r4, #0]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    215a:	784a      	ldrb	r2, [r1, #1]
    215c:	f012 0f01 	tst.w	r2, #1
    2160:	d0fb      	beq.n	215a <_crc_sync_crc32+0x3e>
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    2162:	784b      	ldrb	r3, [r1, #1]
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    2164:	f013 0f04 	tst.w	r3, #4
    2168:	d012      	beq.n	2190 <_crc_sync_crc32+0x74>
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    216a:	2304      	movs	r3, #4
    216c:	704b      	strb	r3, [r1, #1]
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    216e:	6823      	ldr	r3, [r4, #0]
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    2170:	2201      	movs	r2, #1
    2172:	705a      	strb	r2, [r3, #1]
		rc = ERR_IO;
    2174:	f06f 0505 	mvn.w	r5, #5
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    2178:	6823      	ldr	r3, [r4, #0]
    217a:	2201      	movs	r2, #1
    217c:	705a      	strb	r2, [r3, #1]

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    217e:	6820      	ldr	r0, [r4, #0]
    2180:	4b09      	ldr	r3, [pc, #36]	; (21a8 <_crc_sync_crc32+0x8c>)
    2182:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    2184:	a801      	add	r0, sp, #4
    2186:	4b09      	ldr	r3, [pc, #36]	; (21ac <_crc_sync_crc32+0x90>)
    2188:	4798      	blx	r3

	return rc;
}
    218a:	4628      	mov	r0, r5
    218c:	b003      	add	sp, #12
    218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((Dsu *)hw)->DATA.reg;
    2190:	68cb      	ldr	r3, [r1, #12]
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    2192:	602b      	str	r3, [r5, #0]
	int32_t rc = ERR_NONE;
    2194:	2500      	movs	r5, #0
    2196:	e7ef      	b.n	2178 <_crc_sync_crc32+0x5c>
		return ERR_INVALID_ARG;
    2198:	f06f 050c 	mvn.w	r5, #12
    219c:	e7f5      	b.n	218a <_crc_sync_crc32+0x6e>
    219e:	bf00      	nop
    21a0:	00000ced 	.word	0x00000ced
    21a4:	00002515 	.word	0x00002515
    21a8:	000024a9 	.word	0x000024a9
    21ac:	00000cfb 	.word	0x00000cfb

000021b0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    21b0:	f010 0f01 	tst.w	r0, #1
    21b4:	d008      	beq.n	21c8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21b6:	4a11      	ldr	r2, [pc, #68]	; (21fc <_gclk_init_generators_by_fref+0x4c>)
    21b8:	4b11      	ldr	r3, [pc, #68]	; (2200 <_gclk_init_generators_by_fref+0x50>)
    21ba:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21bc:	4619      	mov	r1, r3
    21be:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21c2:	684b      	ldr	r3, [r1, #4]
    21c4:	4213      	tst	r3, r2
    21c6:	d1fc      	bne.n	21c2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    21c8:	f010 0f04 	tst.w	r0, #4
    21cc:	d008      	beq.n	21e0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21ce:	4a0d      	ldr	r2, [pc, #52]	; (2204 <_gclk_init_generators_by_fref+0x54>)
    21d0:	4b0b      	ldr	r3, [pc, #44]	; (2200 <_gclk_init_generators_by_fref+0x50>)
    21d2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21d4:	4619      	mov	r1, r3
    21d6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21da:	684b      	ldr	r3, [r1, #4]
    21dc:	4213      	tst	r3, r2
    21de:	d1fc      	bne.n	21da <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    21e0:	f010 0f08 	tst.w	r0, #8
    21e4:	d008      	beq.n	21f8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21e6:	4a08      	ldr	r2, [pc, #32]	; (2208 <_gclk_init_generators_by_fref+0x58>)
    21e8:	4b05      	ldr	r3, [pc, #20]	; (2200 <_gclk_init_generators_by_fref+0x50>)
    21ea:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21ec:	4619      	mov	r1, r3
    21ee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21f2:	684b      	ldr	r3, [r1, #4]
    21f4:	4213      	tst	r3, r2
    21f6:	d1fc      	bne.n	21f2 <_gclk_init_generators_by_fref+0x42>
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop
    21fc:	00010106 	.word	0x00010106
    2200:	40001c00 	.word	0x40001c00
    2204:	00011901 	.word	0x00011901
    2208:	00010904 	.word	0x00010904

0000220c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    220c:	2201      	movs	r2, #1
    220e:	4b01      	ldr	r3, [pc, #4]	; (2214 <_mclk_init+0x8>)
    2210:	715a      	strb	r2, [r3, #5]
    2212:	4770      	bx	lr
    2214:	40000800 	.word	0x40000800

00002218 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2218:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    221a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    221c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    221e:	f012 0f01 	tst.w	r2, #1
    2222:	d005      	beq.n	2230 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2224:	2201      	movs	r2, #1
    2226:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2228:	6803      	ldr	r3, [r0, #0]
    222a:	b153      	cbz	r3, 2242 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    222c:	4798      	blx	r3
    222e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2230:	8a1a      	ldrh	r2, [r3, #16]
    2232:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2234:	b12a      	cbz	r2, 2242 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2236:	f240 225e 	movw	r2, #606	; 0x25e
    223a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    223c:	6843      	ldr	r3, [r0, #4]
    223e:	b103      	cbz	r3, 2242 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2240:	4798      	blx	r3
    2242:	bd08      	pop	{r3, pc}

00002244 <_flash_init>:
{
    2244:	b538      	push	{r3, r4, r5, lr}
    2246:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2248:	4605      	mov	r5, r0
    224a:	b350      	cbz	r0, 22a2 <_flash_init+0x5e>
    224c:	4816      	ldr	r0, [pc, #88]	; (22a8 <_flash_init+0x64>)
    224e:	4281      	cmp	r1, r0
    2250:	bf14      	ite	ne
    2252:	2000      	movne	r0, #0
    2254:	2001      	moveq	r0, #1
    2256:	224b      	movs	r2, #75	; 0x4b
    2258:	4914      	ldr	r1, [pc, #80]	; (22ac <_flash_init+0x68>)
    225a:	4b15      	ldr	r3, [pc, #84]	; (22b0 <_flash_init+0x6c>)
    225c:	4798      	blx	r3
	device->hw = hw;
    225e:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2260:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2262:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2266:	049b      	lsls	r3, r3, #18
    2268:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    226a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    226c:	4b11      	ldr	r3, [pc, #68]	; (22b4 <_flash_init+0x70>)
    226e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2270:	4b11      	ldr	r3, [pc, #68]	; (22b8 <_flash_init+0x74>)
    2272:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2276:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    227a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    227e:	f3bf 8f6f 	isb	sy
    2282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    228a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    228e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2292:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2296:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    229a:	6019      	str	r1, [r3, #0]
    229c:	601a      	str	r2, [r3, #0]
}
    229e:	2000      	movs	r0, #0
    22a0:	bd38      	pop	{r3, r4, r5, pc}
    22a2:	2000      	movs	r0, #0
    22a4:	e7d7      	b.n	2256 <_flash_init+0x12>
    22a6:	bf00      	nop
    22a8:	41004000 	.word	0x41004000
    22ac:	000062fc 	.word	0x000062fc
    22b0:	000018ad 	.word	0x000018ad
    22b4:	20000754 	.word	0x20000754
    22b8:	e000e100 	.word	0xe000e100

000022bc <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    22bc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    22be:	4b02      	ldr	r3, [pc, #8]	; (22c8 <NVMCTRL_0_Handler+0xc>)
    22c0:	6818      	ldr	r0, [r3, #0]
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <NVMCTRL_0_Handler+0x10>)
    22c4:	4798      	blx	r3
    22c6:	bd08      	pop	{r3, pc}
    22c8:	20000754 	.word	0x20000754
    22cc:	00002219 	.word	0x00002219

000022d0 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    22d0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    22d2:	4b02      	ldr	r3, [pc, #8]	; (22dc <NVMCTRL_1_Handler+0xc>)
    22d4:	6818      	ldr	r0, [r3, #0]
    22d6:	4b02      	ldr	r3, [pc, #8]	; (22e0 <NVMCTRL_1_Handler+0x10>)
    22d8:	4798      	blx	r3
    22da:	bd08      	pop	{r3, pc}
    22dc:	20000754 	.word	0x20000754
    22e0:	00002219 	.word	0x00002219

000022e4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    22e4:	4b03      	ldr	r3, [pc, #12]	; (22f4 <_osc32kctrl_init_sources+0x10>)
    22e6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    22e8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    22ec:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    22ee:	2201      	movs	r2, #1
    22f0:	741a      	strb	r2, [r3, #16]
    22f2:	4770      	bx	lr
    22f4:	40001400 	.word	0x40001400

000022f8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    22f8:	4a04      	ldr	r2, [pc, #16]	; (230c <_oscctrl_init_sources+0x14>)
    22fa:	4b05      	ldr	r3, [pc, #20]	; (2310 <_oscctrl_init_sources+0x18>)
    22fc:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    22fe:	461a      	mov	r2, r3
    2300:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2302:	f013 0f02 	tst.w	r3, #2
    2306:	d0fb      	beq.n	2300 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2308:	4770      	bx	lr
    230a:	bf00      	nop
    230c:	03002606 	.word	0x03002606
    2310:	40001000 	.word	0x40001000

00002314 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2314:	4a36      	ldr	r2, [pc, #216]	; (23f0 <_oscctrl_init_referenced_generators+0xdc>)
    2316:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2318:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    231c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2320:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2322:	4611      	mov	r1, r2
    2324:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2328:	684b      	ldr	r3, [r1, #4]
    232a:	4213      	tst	r3, r2
    232c:	d1fc      	bne.n	2328 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    232e:	4a30      	ldr	r2, [pc, #192]	; (23f0 <_oscctrl_init_referenced_generators+0xdc>)
    2330:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2332:	f013 0f04 	tst.w	r3, #4
    2336:	d1fb      	bne.n	2330 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2338:	4b2e      	ldr	r3, [pc, #184]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    233a:	2200      	movs	r2, #0
    233c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    233e:	4a2e      	ldr	r2, [pc, #184]	; (23f8 <_oscctrl_init_referenced_generators+0xe4>)
    2340:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2342:	461a      	mov	r2, r3
    2344:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2348:	f013 0f10 	tst.w	r3, #16
    234c:	d1fa      	bne.n	2344 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    234e:	2200      	movs	r2, #0
    2350:	4b28      	ldr	r3, [pc, #160]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    2352:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2356:	461a      	mov	r2, r3
    2358:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    235c:	f013 0f04 	tst.w	r3, #4
    2360:	d1fa      	bne.n	2358 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2362:	2202      	movs	r2, #2
    2364:	4b23      	ldr	r3, [pc, #140]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    2366:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2368:	461a      	mov	r2, r3
    236a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    236e:	f013 0f02 	tst.w	r3, #2
    2372:	d1fa      	bne.n	236a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2374:	4b1f      	ldr	r3, [pc, #124]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    2376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2378:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    237a:	461a      	mov	r2, r3
    237c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2380:	f013 0f08 	tst.w	r3, #8
    2384:	d1fa      	bne.n	237c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2386:	2280      	movs	r2, #128	; 0x80
    2388:	4b1a      	ldr	r3, [pc, #104]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    238a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    238e:	461a      	mov	r2, r3
    2390:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2394:	f013 0f04 	tst.w	r3, #4
    2398:	d1fa      	bne.n	2390 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    239a:	4b16      	ldr	r3, [pc, #88]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    239c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    23a0:	f013 0f01 	tst.w	r3, #1
    23a4:	d01d      	beq.n	23e2 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    23a6:	4a13      	ldr	r2, [pc, #76]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    23a8:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    23aa:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    23ae:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    23b2:	d1f9      	bne.n	23a8 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    23b4:	4a0e      	ldr	r2, [pc, #56]	; (23f0 <_oscctrl_init_referenced_generators+0xdc>)
    23b6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    23b8:	2b00      	cmp	r3, #0
    23ba:	d1fc      	bne.n	23b6 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    23bc:	4a0c      	ldr	r2, [pc, #48]	; (23f0 <_oscctrl_init_referenced_generators+0xdc>)
    23be:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    23c0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    23c4:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    23c8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    23ca:	4611      	mov	r1, r2
    23cc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    23d0:	684b      	ldr	r3, [r1, #4]
    23d2:	4213      	tst	r3, r2
    23d4:	d1fc      	bne.n	23d0 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    23d6:	4a06      	ldr	r2, [pc, #24]	; (23f0 <_oscctrl_init_referenced_generators+0xdc>)
    23d8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    23da:	f013 0f04 	tst.w	r3, #4
    23de:	d1fb      	bne.n	23d8 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    23e0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    23e2:	4a04      	ldr	r2, [pc, #16]	; (23f4 <_oscctrl_init_referenced_generators+0xe0>)
    23e4:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    23e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    23ea:	d0fb      	beq.n	23e4 <_oscctrl_init_referenced_generators+0xd0>
    23ec:	e7e2      	b.n	23b4 <_oscctrl_init_referenced_generators+0xa0>
    23ee:	bf00      	nop
    23f0:	40001c00 	.word	0x40001c00
    23f4:	40001000 	.word	0x40001000
    23f8:	04010000 	.word	0x04010000

000023fc <_pac_get_peripheral_id>:

static uint32_t _pac_get_peripheral_id(const void *const module)
{
	uint32_t peripheral = 10;

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    23fc:	f000 4382 	and.w	r3, r0, #1090519040	; 0x41000000
		peripheral = 13;
    2400:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    2404:	bf14      	ite	ne
    2406:	220a      	movne	r2, #10
    2408:	220d      	moveq	r2, #13
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    240a:	4b04      	ldr	r3, [pc, #16]	; (241c <_pac_get_peripheral_id+0x20>)
    240c:	4003      	ands	r3, r0
    240e:	40d3      	lsrs	r3, r2
    2410:	f3c0 6003 	ubfx	r0, r0, #24, #4

	return peripheral;
}
    2414:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2418:	4770      	bx	lr
    241a:	bf00      	nop
    241c:	000fff00 	.word	0x000fff00

00002420 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    2420:	b538      	push	{r3, r4, r5, lr}
    2422:	4604      	mov	r4, r0
    2424:	460d      	mov	r5, r1
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    2426:	226d      	movs	r2, #109	; 0x6d
    2428:	491c      	ldr	r1, [pc, #112]	; (249c <_periph_get_lock_state+0x7c>)
    242a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    242e:	bf94      	ite	ls
    2430:	2000      	movls	r0, #0
    2432:	2001      	movhi	r0, #1
    2434:	4b1a      	ldr	r3, [pc, #104]	; (24a0 <_periph_get_lock_state+0x80>)
    2436:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    2438:	4620      	mov	r0, r4
    243a:	4b1a      	ldr	r3, [pc, #104]	; (24a4 <_periph_get_lock_state+0x84>)
    243c:	4798      	blx	r3
    243e:	f000 001f 	and.w	r0, r0, #31

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    2442:	f1b4 4f82 	cmp.w	r4, #1090519040	; 0x41000000
    2446:	d311      	bcc.n	246c <_periph_get_lock_state+0x4c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    2448:	f1b4 4f84 	cmp.w	r4, #1107296256	; 0x42000000
    244c:	d31a      	bcc.n	2484 <_periph_get_lock_state+0x64>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    244e:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    2452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2456:	bf34      	ite	cc
    2458:	6bda      	ldrcc	r2, [r3, #60]	; 0x3c
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    245a:	6c1a      	ldrcs	r2, [r3, #64]	; 0x40
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    245c:	2301      	movs	r3, #1
    245e:	fa03 f000 	lsl.w	r0, r3, r0
    2462:	4210      	tst	r0, r2
    2464:	bf08      	it	eq
    2466:	2300      	moveq	r3, #0
    2468:	702b      	strb	r3, [r5, #0]
    246a:	e009      	b.n	2480 <_periph_get_lock_state+0x60>
	tmp = ((Pac *)hw)->STATUSA.reg;
    246c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    2472:	2301      	movs	r3, #1
    2474:	fa03 f000 	lsl.w	r0, r3, r0
    2478:	4210      	tst	r0, r2
    247a:	bf08      	it	eq
    247c:	2300      	moveq	r3, #0
    247e:	702b      	strb	r3, [r5, #0]
	}

	return ERR_NONE;
}
    2480:	2000      	movs	r0, #0
    2482:	bd38      	pop	{r3, r4, r5, pc}
	tmp = ((Pac *)hw)->STATUSB.reg;
    2484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    248a:	2301      	movs	r3, #1
    248c:	fa03 f000 	lsl.w	r0, r3, r0
    2490:	4210      	tst	r0, r2
    2492:	bf08      	it	eq
    2494:	2300      	moveq	r3, #0
    2496:	702b      	strb	r3, [r5, #0]
    2498:	e7f2      	b.n	2480 <_periph_get_lock_state+0x60>
    249a:	bf00      	nop
    249c:	0000631c 	.word	0x0000631c
    24a0:	000018ad 	.word	0x000018ad
    24a4:	000023fd 	.word	0x000023fd

000024a8 <_periph_lock>:
{
    24a8:	b570      	push	{r4, r5, r6, lr}
    24aa:	b082      	sub	sp, #8
    24ac:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    24ae:	2239      	movs	r2, #57	; 0x39
    24b0:	4914      	ldr	r1, [pc, #80]	; (2504 <_periph_lock+0x5c>)
    24b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    24b6:	bf94      	ite	ls
    24b8:	2000      	movls	r0, #0
    24ba:	2001      	movhi	r0, #1
    24bc:	4b12      	ldr	r3, [pc, #72]	; (2508 <_periph_lock+0x60>)
    24be:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    24c0:	4628      	mov	r0, r5
    24c2:	4b12      	ldr	r3, [pc, #72]	; (250c <_periph_lock+0x64>)
    24c4:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    24c6:	b280      	uxth	r0, r0
    24c8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    24cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24d0:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    24d2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    24d6:	4e0e      	ldr	r6, [pc, #56]	; (2510 <_periph_lock+0x68>)
    24d8:	f10d 0107 	add.w	r1, sp, #7
    24dc:	4628      	mov	r0, r5
    24de:	47b0      	blx	r6
	} while (!stat && timeout--);
    24e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    24e4:	b933      	cbnz	r3, 24f4 <_periph_lock+0x4c>
    24e6:	3c01      	subs	r4, #1
    24e8:	f1b4 3fff 	cmp.w	r4, #4294967295
    24ec:	d1f4      	bne.n	24d8 <_periph_lock+0x30>
		return ERR_TIMEOUT;
    24ee:	f06f 0007 	mvn.w	r0, #7
    24f2:	e004      	b.n	24fe <_periph_lock+0x56>
	return ERR_NONE;
    24f4:	2c00      	cmp	r4, #0
    24f6:	bfb4      	ite	lt
    24f8:	f06f 0007 	mvnlt.w	r0, #7
    24fc:	2000      	movge	r0, #0
}
    24fe:	b002      	add	sp, #8
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	bf00      	nop
    2504:	0000631c 	.word	0x0000631c
    2508:	000018ad 	.word	0x000018ad
    250c:	000023fd 	.word	0x000023fd
    2510:	00002421 	.word	0x00002421

00002514 <_periph_unlock>:
{
    2514:	b570      	push	{r4, r5, r6, lr}
    2516:	b082      	sub	sp, #8
    2518:	4605      	mov	r5, r0
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    251a:	2253      	movs	r2, #83	; 0x53
    251c:	4914      	ldr	r1, [pc, #80]	; (2570 <_periph_unlock+0x5c>)
    251e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    2522:	bf94      	ite	ls
    2524:	2000      	movls	r0, #0
    2526:	2001      	movhi	r0, #1
    2528:	4b12      	ldr	r3, [pc, #72]	; (2574 <_periph_unlock+0x60>)
    252a:	4798      	blx	r3
	peripheral = _pac_get_peripheral_id(module);
    252c:	4628      	mov	r0, r5
    252e:	4b12      	ldr	r3, [pc, #72]	; (2578 <_periph_unlock+0x64>)
    2530:	4798      	blx	r3
	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    2532:	b280      	uxth	r0, r0
    2534:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    2538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    253c:	6018      	str	r0, [r3, #0]
	int32_t  timeout = 1000;
    253e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		_periph_get_lock_state(module, &stat);
    2542:	4e0e      	ldr	r6, [pc, #56]	; (257c <_periph_unlock+0x68>)
    2544:	f10d 0107 	add.w	r1, sp, #7
    2548:	4628      	mov	r0, r5
    254a:	47b0      	blx	r6
	} while (stat && timeout--);
    254c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2550:	b133      	cbz	r3, 2560 <_periph_unlock+0x4c>
    2552:	3c01      	subs	r4, #1
    2554:	f1b4 3fff 	cmp.w	r4, #4294967295
    2558:	d1f4      	bne.n	2544 <_periph_unlock+0x30>
		return ERR_TIMEOUT;
    255a:	f06f 0007 	mvn.w	r0, #7
    255e:	e004      	b.n	256a <_periph_unlock+0x56>
	return ERR_NONE;
    2560:	2c00      	cmp	r4, #0
    2562:	bfb4      	ite	lt
    2564:	f06f 0007 	mvnlt.w	r0, #7
    2568:	2000      	movge	r0, #0
}
    256a:	b002      	add	sp, #8
    256c:	bd70      	pop	{r4, r5, r6, pc}
    256e:	bf00      	nop
    2570:	0000631c 	.word	0x0000631c
    2574:	000018ad 	.word	0x000018ad
    2578:	000023fd 	.word	0x000023fd
    257c:	00002421 	.word	0x00002421

00002580 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2580:	b500      	push	{lr}
    2582:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2584:	4b0d      	ldr	r3, [pc, #52]	; (25bc <RAMECC_Handler+0x3c>)
    2586:	789b      	ldrb	r3, [r3, #2]
    2588:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    258a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    258c:	9b01      	ldr	r3, [sp, #4]
    258e:	f013 0f02 	tst.w	r3, #2
    2592:	d006      	beq.n	25a2 <RAMECC_Handler+0x22>
    2594:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <RAMECC_Handler+0x40>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	b11b      	cbz	r3, 25a2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    259a:	4a08      	ldr	r2, [pc, #32]	; (25bc <RAMECC_Handler+0x3c>)
    259c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    259e:	4798      	blx	r3
    25a0:	e009      	b.n	25b6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    25a2:	9b01      	ldr	r3, [sp, #4]
    25a4:	f013 0f01 	tst.w	r3, #1
    25a8:	d005      	beq.n	25b6 <RAMECC_Handler+0x36>
    25aa:	4b05      	ldr	r3, [pc, #20]	; (25c0 <RAMECC_Handler+0x40>)
    25ac:	685b      	ldr	r3, [r3, #4]
    25ae:	b113      	cbz	r3, 25b6 <RAMECC_Handler+0x36>
    25b0:	4a02      	ldr	r2, [pc, #8]	; (25bc <RAMECC_Handler+0x3c>)
    25b2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    25b4:	4798      	blx	r3
	} else {
		return;
	}
}
    25b6:	b003      	add	sp, #12
    25b8:	f85d fb04 	ldr.w	pc, [sp], #4
    25bc:	41020000 	.word	0x41020000
    25c0:	20001510 	.word	0x20001510

000025c4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    25c4:	b470      	push	{r4, r5, r6}
    25c6:	b089      	sub	sp, #36	; 0x24
    25c8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    25ca:	466c      	mov	r4, sp
    25cc:	4d0d      	ldr	r5, [pc, #52]	; (2604 <_sercom_get_hardware_index+0x40>)
    25ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    25d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    25d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    25d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    25da:	9b00      	ldr	r3, [sp, #0]
    25dc:	42b3      	cmp	r3, r6
    25de:	d00d      	beq.n	25fc <_sercom_get_hardware_index+0x38>
    25e0:	4631      	mov	r1, r6
    25e2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25e4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    25e6:	f853 2b04 	ldr.w	r2, [r3], #4
    25ea:	428a      	cmp	r2, r1
    25ec:	d007      	beq.n	25fe <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25ee:	3001      	adds	r0, #1
    25f0:	2808      	cmp	r0, #8
    25f2:	d1f8      	bne.n	25e6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    25f4:	2000      	movs	r0, #0
}
    25f6:	b009      	add	sp, #36	; 0x24
    25f8:	bc70      	pop	{r4, r5, r6}
    25fa:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25fc:	2000      	movs	r0, #0
			return i;
    25fe:	b2c0      	uxtb	r0, r0
    2600:	e7f9      	b.n	25f6 <_sercom_get_hardware_index+0x32>
    2602:	bf00      	nop
    2604:	00006334 	.word	0x00006334

00002608 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2608:	b510      	push	{r4, lr}
	void *hw = device->hw;
    260a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    260c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    260e:	f013 0f01 	tst.w	r3, #1
    2612:	d003      	beq.n	261c <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2614:	7da3      	ldrb	r3, [r4, #22]
    2616:	f013 0f01 	tst.w	r3, #1
    261a:	d112      	bne.n	2642 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    261c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    261e:	f013 0f02 	tst.w	r3, #2
    2622:	d003      	beq.n	262c <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2624:	7da3      	ldrb	r3, [r4, #22]
    2626:	f013 0f02 	tst.w	r3, #2
    262a:	d10f      	bne.n	264c <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    262c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    262e:	f013 0f04 	tst.w	r3, #4
    2632:	d015      	beq.n	2660 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2634:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2636:	f003 0337 	and.w	r3, r3, #55	; 0x37
    263a:	b163      	cbz	r3, 2656 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    263c:	23ff      	movs	r3, #255	; 0xff
    263e:	8363      	strh	r3, [r4, #26]
    2640:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2642:	2301      	movs	r3, #1
    2644:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2646:	6803      	ldr	r3, [r0, #0]
    2648:	4798      	blx	r3
    264a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    264c:	2302      	movs	r3, #2
    264e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2650:	6883      	ldr	r3, [r0, #8]
    2652:	4798      	blx	r3
    2654:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    2656:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2658:	6843      	ldr	r3, [r0, #4]
    265a:	b2c9      	uxtb	r1, r1
    265c:	4798      	blx	r3
    265e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2660:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2662:	09db      	lsrs	r3, r3, #7
    2664:	d100      	bne.n	2668 <_sercom_usart_interrupt_handler+0x60>
    2666:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2668:	2380      	movs	r3, #128	; 0x80
    266a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    266c:	68c3      	ldr	r3, [r0, #12]
    266e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2670:	8b63      	ldrh	r3, [r4, #26]
    2672:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2674:	8363      	strh	r3, [r4, #26]
    2676:	e7f6      	b.n	2666 <_sercom_usart_interrupt_handler+0x5e>

00002678 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM2) {
    2678:	4b05      	ldr	r3, [pc, #20]	; (2690 <_sercom_init_irq_param+0x18>)
    267a:	4298      	cmp	r0, r3
    267c:	d005      	beq.n	268a <_sercom_init_irq_param+0x12>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    267e:	4b05      	ldr	r3, [pc, #20]	; (2694 <_sercom_init_irq_param+0x1c>)
    2680:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    2682:	bf04      	itt	eq
    2684:	4b04      	ldreq	r3, [pc, #16]	; (2698 <_sercom_init_irq_param+0x20>)
    2686:	6059      	streq	r1, [r3, #4]
    2688:	4770      	bx	lr
		_sercom2_dev = (struct _usart_async_device *)dev;
    268a:	4b03      	ldr	r3, [pc, #12]	; (2698 <_sercom_init_irq_param+0x20>)
    268c:	6019      	str	r1, [r3, #0]
    268e:	4770      	bx	lr
    2690:	41012000 	.word	0x41012000
    2694:	43000400 	.word	0x43000400
    2698:	20000758 	.word	0x20000758

0000269c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    269c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    269e:	4b03      	ldr	r3, [pc, #12]	; (26ac <_sercom_get_irq_num+0x10>)
    26a0:	4798      	blx	r3
    26a2:	0080      	lsls	r0, r0, #2
    26a4:	302e      	adds	r0, #46	; 0x2e
}
    26a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    26aa:	bd08      	pop	{r3, pc}
    26ac:	000025c5 	.word	0x000025c5

000026b0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    26b0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    26b2:	f013 0f01 	tst.w	r3, #1
    26b6:	d109      	bne.n	26cc <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    26b8:	6803      	ldr	r3, [r0, #0]
    26ba:	f043 0302 	orr.w	r3, r3, #2
    26be:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26c0:	69c3      	ldr	r3, [r0, #28]
    26c2:	f013 0f03 	tst.w	r3, #3
    26c6:	d1fb      	bne.n	26c0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    26c8:	2000      	movs	r0, #0
    26ca:	4770      	bx	lr
		return ERR_BUSY;
    26cc:	f06f 0003 	mvn.w	r0, #3
}
    26d0:	4770      	bx	lr
	...

000026d4 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    26d4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    26d6:	4b03      	ldr	r3, [pc, #12]	; (26e4 <_spi_get_rx_dma_channel+0x10>)
    26d8:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    26da:	2807      	cmp	r0, #7
    26dc:	bf8c      	ite	hi
    26de:	2000      	movhi	r0, #0
    26e0:	2001      	movls	r0, #1
    26e2:	bd08      	pop	{r3, pc}
    26e4:	000025c5 	.word	0x000025c5

000026e8 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    26e8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    26ea:	6883      	ldr	r3, [r0, #8]
    26ec:	689b      	ldr	r3, [r3, #8]
    26ee:	b103      	cbz	r3, 26f2 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    26f0:	4798      	blx	r3
    26f2:	bd08      	pop	{r3, pc}

000026f4 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    26f4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    26f6:	6883      	ldr	r3, [r0, #8]
    26f8:	685b      	ldr	r3, [r3, #4]
    26fa:	b103      	cbz	r3, 26fe <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    26fc:	4798      	blx	r3
    26fe:	bd08      	pop	{r3, pc}

00002700 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    2700:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    2702:	6883      	ldr	r3, [r0, #8]
    2704:	68db      	ldr	r3, [r3, #12]
    2706:	b103      	cbz	r3, 270a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    2708:	4798      	blx	r3
    270a:	bd08      	pop	{r3, pc}

0000270c <_usart_init>:
{
    270c:	b510      	push	{r4, lr}
    270e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2710:	4b21      	ldr	r3, [pc, #132]	; (2798 <_usart_init+0x8c>)
    2712:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2714:	2802      	cmp	r0, #2
    2716:	d005      	beq.n	2724 <_usart_init+0x18>
	ASSERT(false);
    2718:	f240 226e 	movw	r2, #622	; 0x26e
    271c:	491f      	ldr	r1, [pc, #124]	; (279c <_usart_init+0x90>)
    271e:	2000      	movs	r0, #0
    2720:	4b1f      	ldr	r3, [pc, #124]	; (27a0 <_usart_init+0x94>)
    2722:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2724:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2726:	f013 0f01 	tst.w	r3, #1
    272a:	d119      	bne.n	2760 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    272c:	69e3      	ldr	r3, [r4, #28]
    272e:	f013 0f03 	tst.w	r3, #3
    2732:	d1fb      	bne.n	272c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2734:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2736:	f013 0f02 	tst.w	r3, #2
    273a:	d00b      	beq.n	2754 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    273c:	6823      	ldr	r3, [r4, #0]
    273e:	f023 0302 	bic.w	r3, r3, #2
    2742:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2744:	69e3      	ldr	r3, [r4, #28]
    2746:	f013 0f03 	tst.w	r3, #3
    274a:	d1fb      	bne.n	2744 <_usart_init+0x38>
    274c:	69e3      	ldr	r3, [r4, #28]
    274e:	f013 0f02 	tst.w	r3, #2
    2752:	d1fb      	bne.n	274c <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2754:	2305      	movs	r3, #5
    2756:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2758:	69e3      	ldr	r3, [r4, #28]
    275a:	f013 0f03 	tst.w	r3, #3
    275e:	d1fb      	bne.n	2758 <_usart_init+0x4c>
    2760:	69e3      	ldr	r3, [r4, #28]
    2762:	f013 0f01 	tst.w	r3, #1
    2766:	d1fb      	bne.n	2760 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2768:	4b0e      	ldr	r3, [pc, #56]	; (27a4 <_usart_init+0x98>)
    276a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    276c:	69e3      	ldr	r3, [r4, #28]
    276e:	f013 0f03 	tst.w	r3, #3
    2772:	d1fb      	bne.n	276c <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2774:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    2778:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    277a:	69e3      	ldr	r3, [r4, #28]
    277c:	f013 0f1f 	tst.w	r3, #31
    2780:	d1fb      	bne.n	277a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2782:	4b09      	ldr	r3, [pc, #36]	; (27a8 <_usart_init+0x9c>)
    2784:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    2786:	f24f 632b 	movw	r3, #63019	; 0xf62b
    278a:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    278c:	2000      	movs	r0, #0
    278e:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2790:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    2794:	bd10      	pop	{r4, pc}
    2796:	bf00      	nop
    2798:	000025c5 	.word	0x000025c5
    279c:	00006380 	.word	0x00006380
    27a0:	000018ad 	.word	0x000018ad
    27a4:	40100004 	.word	0x40100004
    27a8:	00700002 	.word	0x00700002

000027ac <_get_i2cm_index>:
{
    27ac:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    27ae:	4b07      	ldr	r3, [pc, #28]	; (27cc <_get_i2cm_index+0x20>)
    27b0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    27b2:	2805      	cmp	r0, #5
    27b4:	d008      	beq.n	27c8 <_get_i2cm_index+0x1c>
	ASSERT(false);
    27b6:	f240 32d5 	movw	r2, #981	; 0x3d5
    27ba:	4905      	ldr	r1, [pc, #20]	; (27d0 <_get_i2cm_index+0x24>)
    27bc:	2000      	movs	r0, #0
    27be:	4b05      	ldr	r3, [pc, #20]	; (27d4 <_get_i2cm_index+0x28>)
    27c0:	4798      	blx	r3
	return -1;
    27c2:	f04f 30ff 	mov.w	r0, #4294967295
}
    27c6:	bd08      	pop	{r3, pc}
			return i;
    27c8:	2000      	movs	r0, #0
    27ca:	bd08      	pop	{r3, pc}
    27cc:	000025c5 	.word	0x000025c5
    27d0:	00006380 	.word	0x00006380
    27d4:	000018ad 	.word	0x000018ad

000027d8 <_i2c_m_sync_init_impl>:
{
    27d8:	b538      	push	{r3, r4, r5, lr}
    27da:	4605      	mov	r5, r0
    27dc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    27de:	4608      	mov	r0, r1
    27e0:	4b32      	ldr	r3, [pc, #200]	; (28ac <_i2c_m_sync_init_impl+0xd4>)
    27e2:	4798      	blx	r3
    27e4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    27e6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    27e8:	f013 0f01 	tst.w	r3, #1
    27ec:	d122      	bne.n	2834 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    27ee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27f2:	4a2f      	ldr	r2, [pc, #188]	; (28b0 <_i2c_m_sync_init_impl+0xd8>)
    27f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    27f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27fa:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    27fe:	69e3      	ldr	r3, [r4, #28]
    2800:	f013 0f03 	tst.w	r3, #3
    2804:	d1fb      	bne.n	27fe <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2806:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    2808:	f013 0f02 	tst.w	r3, #2
    280c:	d00b      	beq.n	2826 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    280e:	6823      	ldr	r3, [r4, #0]
    2810:	f023 0302 	bic.w	r3, r3, #2
    2814:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2816:	69e3      	ldr	r3, [r4, #28]
    2818:	f013 0f03 	tst.w	r3, #3
    281c:	d1fb      	bne.n	2816 <_i2c_m_sync_init_impl+0x3e>
    281e:	69e3      	ldr	r3, [r4, #28]
    2820:	f013 0f02 	tst.w	r3, #2
    2824:	d1fb      	bne.n	281e <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    2826:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    282a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    282c:	69e3      	ldr	r3, [r4, #28]
    282e:	f013 0f03 	tst.w	r3, #3
    2832:	d1fb      	bne.n	282c <_i2c_m_sync_init_impl+0x54>
    2834:	69e3      	ldr	r3, [r4, #28]
    2836:	f013 0f01 	tst.w	r3, #1
    283a:	d1fb      	bne.n	2834 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    283c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2840:	4a1b      	ldr	r2, [pc, #108]	; (28b0 <_i2c_m_sync_init_impl+0xd8>)
    2842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2848:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    284a:	69e3      	ldr	r3, [r4, #28]
    284c:	f013 0f03 	tst.w	r3, #3
    2850:	d1fb      	bne.n	284a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2852:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2856:	4916      	ldr	r1, [pc, #88]	; (28b0 <_i2c_m_sync_init_impl+0xd8>)
    2858:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    285e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2860:	69e3      	ldr	r3, [r4, #28]
    2862:	f013 0f04 	tst.w	r3, #4
    2866:	d1fb      	bne.n	2860 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2868:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    286c:	4910      	ldr	r1, [pc, #64]	; (28b0 <_i2c_m_sync_init_impl+0xd8>)
    286e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2874:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2876:	f3c2 6301 	ubfx	r3, r2, #24, #2
    287a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    287c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    287e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2882:	2b01      	cmp	r3, #1
    2884:	bf94      	ite	ls
    2886:	2300      	movls	r3, #0
    2888:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    288a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    288e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2890:	69e3      	ldr	r3, [r4, #28]
    2892:	f013 0f04 	tst.w	r3, #4
    2896:	d1fb      	bne.n	2890 <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    2898:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    289c:	4b04      	ldr	r3, [pc, #16]	; (28b0 <_i2c_m_sync_init_impl+0xd8>)
    289e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    28a2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    28a4:	81eb      	strh	r3, [r5, #14]
}
    28a6:	2000      	movs	r0, #0
    28a8:	bd38      	pop	{r3, r4, r5, pc}
    28aa:	bf00      	nop
    28ac:	000027ad 	.word	0x000027ad
    28b0:	00006334 	.word	0x00006334

000028b4 <_sercom_i2c_m_irq_handler>:
{
    28b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    28ba:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    28bc:	7e26      	ldrb	r6, [r4, #24]
    28be:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    28c0:	f8df 8234 	ldr.w	r8, [pc, #564]	; 2af8 <_sercom_i2c_m_irq_handler+0x244>
    28c4:	f240 4247 	movw	r2, #1095	; 0x447
    28c8:	4641      	mov	r1, r8
    28ca:	3000      	adds	r0, #0
    28cc:	bf18      	it	ne
    28ce:	2001      	movne	r0, #1
    28d0:	4f88      	ldr	r7, [pc, #544]	; (2af4 <_sercom_i2c_m_irq_handler+0x240>)
    28d2:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    28d4:	6928      	ldr	r0, [r5, #16]
    28d6:	f44f 6289 	mov.w	r2, #1096	; 0x448
    28da:	4641      	mov	r1, r8
    28dc:	3000      	adds	r0, #0
    28de:	bf18      	it	ne
    28e0:	2001      	movne	r0, #1
    28e2:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    28e4:	f016 0f80 	tst.w	r6, #128	; 0x80
    28e8:	f040 80f4 	bne.w	2ad4 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    28ec:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    28ee:	69e3      	ldr	r3, [r4, #28]
    28f0:	f013 0f04 	tst.w	r3, #4
    28f4:	d1fb      	bne.n	28ee <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    28f6:	8b63      	ldrh	r3, [r4, #26]
    28f8:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    28fa:	f016 0f01 	tst.w	r6, #1
    28fe:	f000 8090 	beq.w	2a22 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2902:	f013 0f02 	tst.w	r3, #2
    2906:	d022      	beq.n	294e <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2908:	2201      	movs	r2, #1
    290a:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    290c:	886a      	ldrh	r2, [r5, #2]
    290e:	b292      	uxth	r2, r2
    2910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    2914:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2916:	886a      	ldrh	r2, [r5, #2]
    2918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    291c:	0412      	lsls	r2, r2, #16
    291e:	0c12      	lsrs	r2, r2, #16
    2920:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2922:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    2926:	2b00      	cmp	r3, #0
    2928:	bf14      	ite	ne
    292a:	f06f 0104 	mvnne.w	r1, #4
    292e:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2932:	886b      	ldrh	r3, [r5, #2]
    2934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2938:	041b      	lsls	r3, r3, #16
    293a:	0c1b      	lsrs	r3, r3, #16
    293c:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    293e:	696b      	ldr	r3, [r5, #20]
    2940:	2b00      	cmp	r3, #0
    2942:	f000 80c5 	beq.w	2ad0 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    2946:	4628      	mov	r0, r5
    2948:	4798      	blx	r3
    294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    294e:	f013 0f04 	tst.w	r3, #4
    2952:	d124      	bne.n	299e <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    2954:	886b      	ldrh	r3, [r5, #2]
    2956:	f413 6f80 	tst.w	r3, #1024	; 0x400
    295a:	d03e      	beq.n	29da <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    295c:	882b      	ldrh	r3, [r5, #0]
    295e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2960:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2964:	69e3      	ldr	r3, [r4, #28]
    2966:	f013 0f04 	tst.w	r3, #4
    296a:	d1fb      	bne.n	2964 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    296c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    2972:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2976:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2978:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    297a:	69e3      	ldr	r3, [r4, #28]
    297c:	f013 0f04 	tst.w	r3, #4
    2980:	d1fb      	bne.n	297a <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    2982:	886b      	ldrh	r3, [r5, #2]
    2984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2988:	041b      	lsls	r3, r3, #16
    298a:	0c1b      	lsrs	r3, r3, #16
    298c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    298e:	69ab      	ldr	r3, [r5, #24]
    2990:	2b00      	cmp	r3, #0
    2992:	f000 8088 	beq.w	2aa6 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    2996:	4628      	mov	r0, r5
    2998:	4798      	blx	r3
    299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    299e:	686b      	ldr	r3, [r5, #4]
    29a0:	2b00      	cmp	r3, #0
    29a2:	dd04      	ble.n	29ae <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    29a4:	886b      	ldrh	r3, [r5, #2]
    29a6:	b29b      	uxth	r3, r3
    29a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    29ac:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    29ae:	886b      	ldrh	r3, [r5, #2]
    29b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    29b4:	d108      	bne.n	29c8 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    29b6:	886b      	ldrh	r3, [r5, #2]
    29b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    29bc:	041b      	lsls	r3, r3, #16
    29be:	0c1b      	lsrs	r3, r3, #16
    29c0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    29c2:	f06f 0101 	mvn.w	r1, #1
    29c6:	e7b4      	b.n	2932 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    29c8:	6863      	ldr	r3, [r4, #4]
    29ca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    29ce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    29d0:	69e3      	ldr	r3, [r4, #28]
    29d2:	f013 0f04 	tst.w	r3, #4
    29d6:	d1fb      	bne.n	29d0 <_sercom_i2c_m_irq_handler+0x11c>
    29d8:	e7ed      	b.n	29b6 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    29da:	686b      	ldr	r3, [r5, #4]
    29dc:	b99b      	cbnz	r3, 2a06 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    29de:	886b      	ldrh	r3, [r5, #2]
    29e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    29e4:	d106      	bne.n	29f4 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    29e6:	886b      	ldrh	r3, [r5, #2]
    29e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    29ec:	041b      	lsls	r3, r3, #16
    29ee:	0c1b      	lsrs	r3, r3, #16
    29f0:	806b      	strh	r3, [r5, #2]
    29f2:	e7cc      	b.n	298e <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    29f4:	6863      	ldr	r3, [r4, #4]
    29f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    29fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    29fc:	69e3      	ldr	r3, [r4, #28]
    29fe:	f013 0f04 	tst.w	r3, #4
    2a02:	d1fb      	bne.n	29fc <_sercom_i2c_m_irq_handler+0x148>
    2a04:	e7ef      	b.n	29e6 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2a06:	68ab      	ldr	r3, [r5, #8]
    2a08:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2a0a:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a0c:	69e3      	ldr	r3, [r4, #28]
    2a0e:	f013 0f04 	tst.w	r3, #4
    2a12:	d1fb      	bne.n	2a0c <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    2a14:	68ab      	ldr	r3, [r5, #8]
    2a16:	3301      	adds	r3, #1
    2a18:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2a1a:	686b      	ldr	r3, [r5, #4]
    2a1c:	3b01      	subs	r3, #1
    2a1e:	606b      	str	r3, [r5, #4]
    2a20:	e7b5      	b.n	298e <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    2a22:	f016 0f02 	tst.w	r6, #2
    2a26:	d041      	beq.n	2aac <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2a28:	686a      	ldr	r2, [r5, #4]
    2a2a:	2a00      	cmp	r2, #0
    2a2c:	d036      	beq.n	2a9c <_sercom_i2c_m_irq_handler+0x1e8>
    2a2e:	f013 0f04 	tst.w	r3, #4
    2a32:	d133      	bne.n	2a9c <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2a34:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2a38:	3a01      	subs	r2, #1
    2a3a:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2a3c:	2a00      	cmp	r2, #0
    2a3e:	d137      	bne.n	2ab0 <_sercom_i2c_m_irq_handler+0x1fc>
    2a40:	2900      	cmp	r1, #0
    2a42:	d039      	beq.n	2ab8 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    2a44:	886b      	ldrh	r3, [r5, #2]
    2a46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2a4a:	d116      	bne.n	2a7a <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    2a4c:	886b      	ldrh	r3, [r5, #2]
    2a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2a52:	041b      	lsls	r3, r3, #16
    2a54:	0c1b      	lsrs	r3, r3, #16
    2a56:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2a58:	68aa      	ldr	r2, [r5, #8]
    2a5a:	1c53      	adds	r3, r2, #1
    2a5c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a5e:	69e3      	ldr	r3, [r4, #28]
    2a60:	f013 0f04 	tst.w	r3, #4
    2a64:	d1fb      	bne.n	2a5e <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a68:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2a6a:	2302      	movs	r3, #2
    2a6c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2a6e:	69eb      	ldr	r3, [r5, #28]
    2a70:	b1e3      	cbz	r3, 2aac <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    2a72:	4628      	mov	r0, r5
    2a74:	4798      	blx	r3
    2a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2a7a:	6863      	ldr	r3, [r4, #4]
    2a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2a80:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a82:	69e3      	ldr	r3, [r4, #28]
    2a84:	f013 0f04 	tst.w	r3, #4
    2a88:	d1fb      	bne.n	2a82 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2a8a:	6863      	ldr	r3, [r4, #4]
    2a8c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2a90:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a92:	69e3      	ldr	r3, [r4, #28]
    2a94:	f013 0f04 	tst.w	r3, #4
    2a98:	d1fb      	bne.n	2a92 <_sercom_i2c_m_irq_handler+0x1de>
    2a9a:	e7d7      	b.n	2a4c <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2a9c:	2302      	movs	r3, #2
    2a9e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2aa0:	f06f 0101 	mvn.w	r1, #1
    2aa4:	e745      	b.n	2932 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2aa6:	f016 0f02 	tst.w	r6, #2
    2aaa:	d1e0      	bne.n	2a6e <_sercom_i2c_m_irq_handler+0x1ba>
    2aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2ab0:	2a01      	cmp	r2, #1
    2ab2:	d1d1      	bne.n	2a58 <_sercom_i2c_m_irq_handler+0x1a4>
    2ab4:	2900      	cmp	r1, #0
    2ab6:	d0cf      	beq.n	2a58 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2ab8:	6863      	ldr	r3, [r4, #4]
    2aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2abe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2ac0:	69e3      	ldr	r3, [r4, #28]
    2ac2:	f013 0f04 	tst.w	r3, #4
    2ac6:	d1fb      	bne.n	2ac0 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    2ac8:	686b      	ldr	r3, [r5, #4]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d0ba      	beq.n	2a44 <_sercom_i2c_m_irq_handler+0x190>
    2ace:	e7c3      	b.n	2a58 <_sercom_i2c_m_irq_handler+0x1a4>
    2ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2ad4:	886b      	ldrh	r3, [r5, #2]
    2ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2ada:	041b      	lsls	r3, r3, #16
    2adc:	0c1b      	lsrs	r3, r3, #16
    2ade:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2ae0:	696b      	ldr	r3, [r5, #20]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d0e2      	beq.n	2aac <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    2ae6:	f06f 0104 	mvn.w	r1, #4
    2aea:	4628      	mov	r0, r5
    2aec:	4798      	blx	r3
    2aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2af2:	bf00      	nop
    2af4:	000018ad 	.word	0x000018ad
    2af8:	00006380 	.word	0x00006380

00002afc <_usart_async_init>:
{
    2afc:	b570      	push	{r4, r5, r6, lr}
    2afe:	460d      	mov	r5, r1
	ASSERT(device);
    2b00:	4606      	mov	r6, r0
    2b02:	22ce      	movs	r2, #206	; 0xce
    2b04:	4917      	ldr	r1, [pc, #92]	; (2b64 <_usart_async_init+0x68>)
    2b06:	3000      	adds	r0, #0
    2b08:	bf18      	it	ne
    2b0a:	2001      	movne	r0, #1
    2b0c:	4b16      	ldr	r3, [pc, #88]	; (2b68 <_usart_async_init+0x6c>)
    2b0e:	4798      	blx	r3
	init_status = _usart_init(hw);
    2b10:	4628      	mov	r0, r5
    2b12:	4b16      	ldr	r3, [pc, #88]	; (2b6c <_usart_async_init+0x70>)
    2b14:	4798      	blx	r3
	if (init_status) {
    2b16:	4604      	mov	r4, r0
    2b18:	b108      	cbz	r0, 2b1e <_usart_async_init+0x22>
}
    2b1a:	4620      	mov	r0, r4
    2b1c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2b1e:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2b20:	4631      	mov	r1, r6
    2b22:	4628      	mov	r0, r5
    2b24:	4b12      	ldr	r3, [pc, #72]	; (2b70 <_usart_async_init+0x74>)
    2b26:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2b28:	4628      	mov	r0, r5
    2b2a:	4b12      	ldr	r3, [pc, #72]	; (2b74 <_usart_async_init+0x78>)
    2b2c:	4798      	blx	r3
    2b2e:	1d01      	adds	r1, r0, #4
    2b30:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b32:	2501      	movs	r5, #1
    2b34:	f000 021f 	and.w	r2, r0, #31
    2b38:	fa05 f202 	lsl.w	r2, r5, r2
    2b3c:	0943      	lsrs	r3, r0, #5
    2b3e:	009b      	lsls	r3, r3, #2
    2b40:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2b44:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2b4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b50:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b58:	601a      	str	r2, [r3, #0]
		irq++;
    2b5a:	3001      	adds	r0, #1
    2b5c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2b5e:	4281      	cmp	r1, r0
    2b60:	d1e8      	bne.n	2b34 <_usart_async_init+0x38>
    2b62:	e7da      	b.n	2b1a <_usart_async_init+0x1e>
    2b64:	00006380 	.word	0x00006380
    2b68:	000018ad 	.word	0x000018ad
    2b6c:	0000270d 	.word	0x0000270d
    2b70:	00002679 	.word	0x00002679
    2b74:	0000269d 	.word	0x0000269d

00002b78 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2b78:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2b7a:	6813      	ldr	r3, [r2, #0]
    2b7c:	f043 0302 	orr.w	r3, r3, #2
    2b80:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b82:	69d3      	ldr	r3, [r2, #28]
    2b84:	f013 0f03 	tst.w	r3, #3
    2b88:	d1fb      	bne.n	2b82 <_usart_async_enable+0xa>
}
    2b8a:	4770      	bx	lr

00002b8c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2b8c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2b8e:	6299      	str	r1, [r3, #40]	; 0x28
    2b90:	4770      	bx	lr

00002b92 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2b92:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2b94:	2201      	movs	r2, #1
    2b96:	759a      	strb	r2, [r3, #22]
    2b98:	4770      	bx	lr

00002b9a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2b9a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2b9c:	2202      	movs	r2, #2
    2b9e:	759a      	strb	r2, [r3, #22]
    2ba0:	4770      	bx	lr
	...

00002ba4 <_i2c_m_async_init>:
{
    2ba4:	b570      	push	{r4, r5, r6, lr}
    2ba6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2ba8:	4606      	mov	r6, r0
    2baa:	f240 42bc 	movw	r2, #1212	; 0x4bc
    2bae:	4918      	ldr	r1, [pc, #96]	; (2c10 <_i2c_m_async_init+0x6c>)
    2bb0:	3000      	adds	r0, #0
    2bb2:	bf18      	it	ne
    2bb4:	2001      	movne	r0, #1
    2bb6:	4b17      	ldr	r3, [pc, #92]	; (2c14 <_i2c_m_async_init+0x70>)
    2bb8:	4798      	blx	r3
	i2c_dev->hw = hw;
    2bba:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2bbc:	4629      	mov	r1, r5
    2bbe:	4630      	mov	r0, r6
    2bc0:	4b15      	ldr	r3, [pc, #84]	; (2c18 <_i2c_m_async_init+0x74>)
    2bc2:	4798      	blx	r3
	if (init_status) {
    2bc4:	4604      	mov	r4, r0
    2bc6:	b108      	cbz	r0, 2bcc <_i2c_m_async_init+0x28>
}
    2bc8:	4620      	mov	r0, r4
    2bca:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    2bcc:	4631      	mov	r1, r6
    2bce:	4628      	mov	r0, r5
    2bd0:	4b12      	ldr	r3, [pc, #72]	; (2c1c <_i2c_m_async_init+0x78>)
    2bd2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2bd4:	4628      	mov	r0, r5
    2bd6:	4b12      	ldr	r3, [pc, #72]	; (2c20 <_i2c_m_async_init+0x7c>)
    2bd8:	4798      	blx	r3
    2bda:	1d01      	adds	r1, r0, #4
    2bdc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bde:	2501      	movs	r5, #1
    2be0:	f000 021f 	and.w	r2, r0, #31
    2be4:	fa05 f202 	lsl.w	r2, r5, r2
    2be8:	0943      	lsrs	r3, r0, #5
    2bea:	009b      	lsls	r3, r3, #2
    2bec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2bf0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bfc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c04:	601a      	str	r2, [r3, #0]
		irq++;
    2c06:	3001      	adds	r0, #1
    2c08:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2c0a:	4281      	cmp	r1, r0
    2c0c:	d1e8      	bne.n	2be0 <_i2c_m_async_init+0x3c>
    2c0e:	e7db      	b.n	2bc8 <_i2c_m_async_init+0x24>
    2c10:	00006380 	.word	0x00006380
    2c14:	000018ad 	.word	0x000018ad
    2c18:	000027d9 	.word	0x000027d9
    2c1c:	00002679 	.word	0x00002679
    2c20:	0000269d 	.word	0x0000269d

00002c24 <_i2c_m_async_transfer>:
{
    2c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c28:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    2c2a:	4605      	mov	r5, r0
    2c2c:	f110 0800 	adds.w	r8, r0, #0
    2c30:	bf18      	it	ne
    2c32:	f04f 0801 	movne.w	r8, #1
    2c36:	4f45      	ldr	r7, [pc, #276]	; (2d4c <_i2c_m_async_transfer+0x128>)
    2c38:	f240 5212 	movw	r2, #1298	; 0x512
    2c3c:	4639      	mov	r1, r7
    2c3e:	4640      	mov	r0, r8
    2c40:	4e43      	ldr	r6, [pc, #268]	; (2d50 <_i2c_m_async_transfer+0x12c>)
    2c42:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2c44:	6928      	ldr	r0, [r5, #16]
    2c46:	f240 5213 	movw	r2, #1299	; 0x513
    2c4a:	4639      	mov	r1, r7
    2c4c:	3000      	adds	r0, #0
    2c4e:	bf18      	it	ne
    2c50:	2001      	movne	r0, #1
    2c52:	47b0      	blx	r6
	ASSERT(msg);
    2c54:	f240 5214 	movw	r2, #1300	; 0x514
    2c58:	4639      	mov	r1, r7
    2c5a:	1c20      	adds	r0, r4, #0
    2c5c:	bf18      	it	ne
    2c5e:	2001      	movne	r0, #1
    2c60:	47b0      	blx	r6
	if (msg->len == 0) {
    2c62:	6860      	ldr	r0, [r4, #4]
    2c64:	2800      	cmp	r0, #0
    2c66:	d06f      	beq.n	2d48 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2c68:	886b      	ldrh	r3, [r5, #2]
    2c6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2c6e:	d169      	bne.n	2d44 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    2c70:	8863      	ldrh	r3, [r4, #2]
    2c72:	b29b      	uxth	r3, r3
    2c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c78:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    2c7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2c7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    2c82:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2c84:	6853      	ldr	r3, [r2, #4]
    2c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c8a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2c8c:	69d3      	ldr	r3, [r2, #28]
    2c8e:	f013 0f04 	tst.w	r3, #4
    2c92:	d1fb      	bne.n	2c8c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    2c94:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2c96:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    2c98:	f240 42ea 	movw	r2, #1258	; 0x4ea
    2c9c:	492b      	ldr	r1, [pc, #172]	; (2d4c <_i2c_m_async_transfer+0x128>)
    2c9e:	4640      	mov	r0, r8
    2ca0:	4b2b      	ldr	r3, [pc, #172]	; (2d50 <_i2c_m_async_transfer+0x12c>)
    2ca2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2ca4:	686b      	ldr	r3, [r5, #4]
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d02a      	beq.n	2d00 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2caa:	6863      	ldr	r3, [r4, #4]
    2cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2cb0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2cb2:	69e3      	ldr	r3, [r4, #28]
    2cb4:	f013 0f04 	tst.w	r3, #4
    2cb8:	d1fb      	bne.n	2cb2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    2cba:	882b      	ldrh	r3, [r5, #0]
    2cbc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2cc0:	d02a      	beq.n	2d18 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    2cc2:	886a      	ldrh	r2, [r5, #2]
    2cc4:	f012 0f01 	tst.w	r2, #1
    2cc8:	d004      	beq.n	2cd4 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    2cca:	886a      	ldrh	r2, [r5, #2]
    2ccc:	b292      	uxth	r2, r2
    2cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2cd2:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2cd4:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2cd8:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2cdc:	69e3      	ldr	r3, [r4, #28]
    2cde:	f013 0f04 	tst.w	r3, #4
    2ce2:	d1fb      	bne.n	2cdc <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2cee:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2cf0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2cf2:	69e3      	ldr	r3, [r4, #28]
    2cf4:	f013 0f04 	tst.w	r3, #4
    2cf8:	d1fb      	bne.n	2cf2 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    2cfa:	2000      	movs	r0, #0
    2cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2d00:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2d04:	d0d1      	beq.n	2caa <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2d06:	6863      	ldr	r3, [r4, #4]
    2d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2d0c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2d0e:	69e3      	ldr	r3, [r4, #28]
    2d10:	f013 0f04 	tst.w	r3, #4
    2d14:	d1fb      	bne.n	2d0e <_i2c_m_async_transfer+0xea>
    2d16:	e7d0      	b.n	2cba <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2d18:	8869      	ldrh	r1, [r5, #2]
    2d1a:	005a      	lsls	r2, r3, #1
    2d1c:	b2d2      	uxtb	r2, r2
    2d1e:	f001 0301 	and.w	r3, r1, #1
    2d22:	431a      	orrs	r2, r3
    2d24:	69e3      	ldr	r3, [r4, #28]
    2d26:	f013 0f04 	tst.w	r3, #4
    2d2a:	d1fb      	bne.n	2d24 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2d32:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2d34:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2d36:	69e3      	ldr	r3, [r4, #28]
    2d38:	f013 0f04 	tst.w	r3, #4
    2d3c:	d1fb      	bne.n	2d36 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    2d3e:	2000      	movs	r0, #0
    2d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2d44:	f06f 0003 	mvn.w	r0, #3
}
    2d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d4c:	00006380 	.word	0x00006380
    2d50:	000018ad 	.word	0x000018ad

00002d54 <_i2c_m_async_register_callback>:
	switch (type) {
    2d54:	2901      	cmp	r1, #1
    2d56:	d006      	beq.n	2d66 <_i2c_m_async_register_callback+0x12>
    2d58:	b119      	cbz	r1, 2d62 <_i2c_m_async_register_callback+0xe>
    2d5a:	2902      	cmp	r1, #2
    2d5c:	d005      	beq.n	2d6a <_i2c_m_async_register_callback+0x16>
}
    2d5e:	2000      	movs	r0, #0
    2d60:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    2d62:	6142      	str	r2, [r0, #20]
		break;
    2d64:	e7fb      	b.n	2d5e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    2d66:	6182      	str	r2, [r0, #24]
		break;
    2d68:	e7f9      	b.n	2d5e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    2d6a:	61c2      	str	r2, [r0, #28]
		break;
    2d6c:	e7f7      	b.n	2d5e <_i2c_m_async_register_callback+0xa>
	...

00002d70 <SERCOM2_0_Handler>:
{
    2d70:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2d72:	4b02      	ldr	r3, [pc, #8]	; (2d7c <SERCOM2_0_Handler+0xc>)
    2d74:	6818      	ldr	r0, [r3, #0]
    2d76:	4b02      	ldr	r3, [pc, #8]	; (2d80 <SERCOM2_0_Handler+0x10>)
    2d78:	4798      	blx	r3
    2d7a:	bd08      	pop	{r3, pc}
    2d7c:	20000758 	.word	0x20000758
    2d80:	00002609 	.word	0x00002609

00002d84 <SERCOM2_1_Handler>:
{
    2d84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2d86:	4b02      	ldr	r3, [pc, #8]	; (2d90 <SERCOM2_1_Handler+0xc>)
    2d88:	6818      	ldr	r0, [r3, #0]
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <SERCOM2_1_Handler+0x10>)
    2d8c:	4798      	blx	r3
    2d8e:	bd08      	pop	{r3, pc}
    2d90:	20000758 	.word	0x20000758
    2d94:	00002609 	.word	0x00002609

00002d98 <SERCOM2_2_Handler>:
{
    2d98:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2d9a:	4b02      	ldr	r3, [pc, #8]	; (2da4 <SERCOM2_2_Handler+0xc>)
    2d9c:	6818      	ldr	r0, [r3, #0]
    2d9e:	4b02      	ldr	r3, [pc, #8]	; (2da8 <SERCOM2_2_Handler+0x10>)
    2da0:	4798      	blx	r3
    2da2:	bd08      	pop	{r3, pc}
    2da4:	20000758 	.word	0x20000758
    2da8:	00002609 	.word	0x00002609

00002dac <SERCOM2_3_Handler>:
{
    2dac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2dae:	4b02      	ldr	r3, [pc, #8]	; (2db8 <SERCOM2_3_Handler+0xc>)
    2db0:	6818      	ldr	r0, [r3, #0]
    2db2:	4b02      	ldr	r3, [pc, #8]	; (2dbc <SERCOM2_3_Handler+0x10>)
    2db4:	4798      	blx	r3
    2db6:	bd08      	pop	{r3, pc}
    2db8:	20000758 	.word	0x20000758
    2dbc:	00002609 	.word	0x00002609

00002dc0 <SERCOM5_0_Handler>:
{
    2dc0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2dc2:	4b02      	ldr	r3, [pc, #8]	; (2dcc <SERCOM5_0_Handler+0xc>)
    2dc4:	6858      	ldr	r0, [r3, #4]
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <SERCOM5_0_Handler+0x10>)
    2dc8:	4798      	blx	r3
    2dca:	bd08      	pop	{r3, pc}
    2dcc:	20000758 	.word	0x20000758
    2dd0:	000028b5 	.word	0x000028b5

00002dd4 <SERCOM5_1_Handler>:
{
    2dd4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2dd6:	4b02      	ldr	r3, [pc, #8]	; (2de0 <SERCOM5_1_Handler+0xc>)
    2dd8:	6858      	ldr	r0, [r3, #4]
    2dda:	4b02      	ldr	r3, [pc, #8]	; (2de4 <SERCOM5_1_Handler+0x10>)
    2ddc:	4798      	blx	r3
    2dde:	bd08      	pop	{r3, pc}
    2de0:	20000758 	.word	0x20000758
    2de4:	000028b5 	.word	0x000028b5

00002de8 <SERCOM5_2_Handler>:
{
    2de8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2dea:	4b02      	ldr	r3, [pc, #8]	; (2df4 <SERCOM5_2_Handler+0xc>)
    2dec:	6858      	ldr	r0, [r3, #4]
    2dee:	4b02      	ldr	r3, [pc, #8]	; (2df8 <SERCOM5_2_Handler+0x10>)
    2df0:	4798      	blx	r3
    2df2:	bd08      	pop	{r3, pc}
    2df4:	20000758 	.word	0x20000758
    2df8:	000028b5 	.word	0x000028b5

00002dfc <SERCOM5_3_Handler>:
{
    2dfc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2dfe:	4b02      	ldr	r3, [pc, #8]	; (2e08 <SERCOM5_3_Handler+0xc>)
    2e00:	6858      	ldr	r0, [r3, #4]
    2e02:	4b02      	ldr	r3, [pc, #8]	; (2e0c <SERCOM5_3_Handler+0x10>)
    2e04:	4798      	blx	r3
    2e06:	bd08      	pop	{r3, pc}
    2e08:	20000758 	.word	0x20000758
    2e0c:	000028b5 	.word	0x000028b5

00002e10 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    2e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e14:	4605      	mov	r5, r0
    2e16:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2e18:	4608      	mov	r0, r1
    2e1a:	4b44      	ldr	r3, [pc, #272]	; (2f2c <_spi_m_dma_init+0x11c>)
    2e1c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2e1e:	2807      	cmp	r0, #7
    2e20:	d00d      	beq.n	2e3e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2e22:	2d00      	cmp	r5, #0
    2e24:	d06e      	beq.n	2f04 <_spi_m_dma_init+0xf4>
    2e26:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2e2a:	4941      	ldr	r1, [pc, #260]	; (2f30 <_spi_m_dma_init+0x120>)
    2e2c:	1c20      	adds	r0, r4, #0
    2e2e:	bf18      	it	ne
    2e30:	2001      	movne	r0, #1
    2e32:	4b40      	ldr	r3, [pc, #256]	; (2f34 <_spi_m_dma_init+0x124>)
    2e34:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2e36:	f06f 000c 	mvn.w	r0, #12
    2e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2e3e:	2d00      	cmp	r5, #0
    2e40:	d16a      	bne.n	2f18 <_spi_m_dma_init+0x108>
    2e42:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2e46:	493a      	ldr	r1, [pc, #232]	; (2f30 <_spi_m_dma_init+0x120>)
    2e48:	2000      	movs	r0, #0
    2e4a:	4b3a      	ldr	r3, [pc, #232]	; (2f34 <_spi_m_dma_init+0x124>)
    2e4c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e4e:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2e50:	f013 0f01 	tst.w	r3, #1
    2e54:	d119      	bne.n	2e8a <_spi_m_dma_init+0x7a>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e56:	69e3      	ldr	r3, [r4, #28]
    2e58:	f013 0f03 	tst.w	r3, #3
    2e5c:	d1fb      	bne.n	2e56 <_spi_m_dma_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2e5e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2e60:	f013 0f02 	tst.w	r3, #2
    2e64:	d00b      	beq.n	2e7e <_spi_m_dma_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2e66:	6823      	ldr	r3, [r4, #0]
    2e68:	f023 0302 	bic.w	r3, r3, #2
    2e6c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e6e:	69e3      	ldr	r3, [r4, #28]
    2e70:	f013 0f03 	tst.w	r3, #3
    2e74:	d1fb      	bne.n	2e6e <_spi_m_dma_init+0x5e>
    2e76:	69e3      	ldr	r3, [r4, #28]
    2e78:	f013 0f02 	tst.w	r3, #2
    2e7c:	d1fb      	bne.n	2e76 <_spi_m_dma_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e7e:	230d      	movs	r3, #13
    2e80:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e82:	69e3      	ldr	r3, [r4, #28]
    2e84:	f013 0f03 	tst.w	r3, #3
    2e88:	d1fb      	bne.n	2e82 <_spi_m_dma_init+0x72>
    2e8a:	69e3      	ldr	r3, [r4, #28]
    2e8c:	f013 0f01 	tst.w	r3, #1
    2e90:	d1fb      	bne.n	2e8a <_spi_m_dma_init+0x7a>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2e92:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2e94:	f640 1256 	movw	r2, #2390	; 0x956
    2e98:	4925      	ldr	r1, [pc, #148]	; (2f30 <_spi_m_dma_init+0x120>)
    2e9a:	1c20      	adds	r0, r4, #0
    2e9c:	bf18      	it	ne
    2e9e:	2001      	movne	r0, #1
    2ea0:	4b24      	ldr	r3, [pc, #144]	; (2f34 <_spi_m_dma_init+0x124>)
    2ea2:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2ea4:	4b24      	ldr	r3, [pc, #144]	; (2f38 <_spi_m_dma_init+0x128>)
    2ea6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ea8:	69e3      	ldr	r3, [r4, #28]
    2eaa:	f013 0f03 	tst.w	r3, #3
    2eae:	d1fb      	bne.n	2ea8 <_spi_m_dma_init+0x98>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2eb4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2eb6:	69e3      	ldr	r3, [r4, #28]
    2eb8:	f013 0f17 	tst.w	r3, #23
    2ebc:	d1fb      	bne.n	2eb6 <_spi_m_dma_init+0xa6>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2ebe:	2306      	movs	r3, #6
    2ec0:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2ec2:	2600      	movs	r6, #0
    2ec4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    2ec8:	f105 0818 	add.w	r8, r5, #24
    2ecc:	4620      	mov	r0, r4
    2ece:	4b1b      	ldr	r3, [pc, #108]	; (2f3c <_spi_m_dma_init+0x12c>)
    2ed0:	4798      	blx	r3
    2ed2:	4601      	mov	r1, r0
    2ed4:	4640      	mov	r0, r8
    2ed6:	4f1a      	ldr	r7, [pc, #104]	; (2f40 <_spi_m_dma_init+0x130>)
    2ed8:	47b8      	blx	r7
	dev->resource->back                 = dev;
    2eda:	69ab      	ldr	r3, [r5, #24]
    2edc:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    2ede:	69ab      	ldr	r3, [r5, #24]
    2ee0:	4a18      	ldr	r2, [pc, #96]	; (2f44 <_spi_m_dma_init+0x134>)
    2ee2:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    2ee4:	69ab      	ldr	r3, [r5, #24]
    2ee6:	4c18      	ldr	r4, [pc, #96]	; (2f48 <_spi_m_dma_init+0x138>)
    2ee8:	605c      	str	r4, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    2eea:	4631      	mov	r1, r6
    2eec:	4640      	mov	r0, r8
    2eee:	47b8      	blx	r7
	dev->resource->back                 = dev;
    2ef0:	69ab      	ldr	r3, [r5, #24]
    2ef2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    2ef4:	69ab      	ldr	r3, [r5, #24]
    2ef6:	4a15      	ldr	r2, [pc, #84]	; (2f4c <_spi_m_dma_init+0x13c>)
    2ef8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    2efa:	69ab      	ldr	r3, [r5, #24]
    2efc:	605c      	str	r4, [r3, #4]

	return ERR_NONE;
    2efe:	4630      	mov	r0, r6
    2f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2f04:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2f08:	4909      	ldr	r1, [pc, #36]	; (2f30 <_spi_m_dma_init+0x120>)
    2f0a:	2000      	movs	r0, #0
    2f0c:	4b09      	ldr	r3, [pc, #36]	; (2f34 <_spi_m_dma_init+0x124>)
    2f0e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2f10:	f06f 000c 	mvn.w	r0, #12
    2f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2f18:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2f1c:	4904      	ldr	r1, [pc, #16]	; (2f30 <_spi_m_dma_init+0x120>)
    2f1e:	1c20      	adds	r0, r4, #0
    2f20:	bf18      	it	ne
    2f22:	2001      	movne	r0, #1
    2f24:	4b03      	ldr	r3, [pc, #12]	; (2f34 <_spi_m_dma_init+0x124>)
    2f26:	4798      	blx	r3
    2f28:	e791      	b.n	2e4e <_spi_m_dma_init+0x3e>
    2f2a:	bf00      	nop
    2f2c:	000025c5 	.word	0x000025c5
    2f30:	00006380 	.word	0x00006380
    2f34:	000018ad 	.word	0x000018ad
    2f38:	0020000c 	.word	0x0020000c
    2f3c:	000026d5 	.word	0x000026d5
    2f40:	000020c5 	.word	0x000020c5
    2f44:	000026e9 	.word	0x000026e9
    2f48:	00002701 	.word	0x00002701
    2f4c:	000026f5 	.word	0x000026f5

00002f50 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    2f50:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    2f52:	4604      	mov	r4, r0
    2f54:	b160      	cbz	r0, 2f70 <_spi_m_dma_enable+0x20>
    2f56:	6800      	ldr	r0, [r0, #0]
    2f58:	3000      	adds	r0, #0
    2f5a:	bf18      	it	ne
    2f5c:	2001      	movne	r0, #1
    2f5e:	f640 5221 	movw	r2, #3361	; 0xd21
    2f62:	4904      	ldr	r1, [pc, #16]	; (2f74 <_spi_m_dma_enable+0x24>)
    2f64:	4b04      	ldr	r3, [pc, #16]	; (2f78 <_spi_m_dma_enable+0x28>)
    2f66:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2f68:	6820      	ldr	r0, [r4, #0]
    2f6a:	4b04      	ldr	r3, [pc, #16]	; (2f7c <_spi_m_dma_enable+0x2c>)
    2f6c:	4798      	blx	r3
}
    2f6e:	bd10      	pop	{r4, pc}
    2f70:	2000      	movs	r0, #0
    2f72:	e7f4      	b.n	2f5e <_spi_m_dma_enable+0xe>
    2f74:	00006380 	.word	0x00006380
    2f78:	000018ad 	.word	0x000018ad
    2f7c:	000026b1 	.word	0x000026b1

00002f80 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    2f80:	b538      	push	{r3, r4, r5, lr}
    2f82:	4614      	mov	r4, r2
	switch (type) {
    2f84:	2901      	cmp	r1, #1
    2f86:	d00c      	beq.n	2fa2 <_spi_m_dma_register_callback+0x22>
    2f88:	b111      	cbz	r1, 2f90 <_spi_m_dma_register_callback+0x10>
    2f8a:	2902      	cmp	r1, #2
    2f8c:	d014      	beq.n	2fb8 <_spi_m_dma_register_callback+0x38>
    2f8e:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    2f90:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    2f92:	3200      	adds	r2, #0
    2f94:	bf18      	it	ne
    2f96:	2201      	movne	r2, #1
    2f98:	2100      	movs	r1, #0
    2f9a:	4608      	mov	r0, r1
    2f9c:	4b0e      	ldr	r3, [pc, #56]	; (2fd8 <_spi_m_dma_register_callback+0x58>)
    2f9e:	4798      	blx	r3
		break;
    2fa0:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    2fa2:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    2fa4:	6800      	ldr	r0, [r0, #0]
    2fa6:	4b0d      	ldr	r3, [pc, #52]	; (2fdc <_spi_m_dma_register_callback+0x5c>)
    2fa8:	4798      	blx	r3
    2faa:	1c22      	adds	r2, r4, #0
    2fac:	bf18      	it	ne
    2fae:	2201      	movne	r2, #1
    2fb0:	2100      	movs	r1, #0
    2fb2:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <_spi_m_dma_register_callback+0x58>)
    2fb4:	4798      	blx	r3
		break;
    2fb6:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    2fb8:	60c2      	str	r2, [r0, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    2fba:	6800      	ldr	r0, [r0, #0]
    2fbc:	4b07      	ldr	r3, [pc, #28]	; (2fdc <_spi_m_dma_register_callback+0x5c>)
    2fbe:	4798      	blx	r3
    2fc0:	3400      	adds	r4, #0
    2fc2:	bf18      	it	ne
    2fc4:	2401      	movne	r4, #1
    2fc6:	4622      	mov	r2, r4
    2fc8:	2101      	movs	r1, #1
    2fca:	4d03      	ldr	r5, [pc, #12]	; (2fd8 <_spi_m_dma_register_callback+0x58>)
    2fcc:	47a8      	blx	r5
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    2fce:	4622      	mov	r2, r4
    2fd0:	2101      	movs	r1, #1
    2fd2:	2000      	movs	r0, #0
    2fd4:	47a8      	blx	r5
    2fd6:	bd38      	pop	{r3, r4, r5, pc}
    2fd8:	00001f9d 	.word	0x00001f9d
    2fdc:	000026d5 	.word	0x000026d5

00002fe0 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    2fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fe4:	4604      	mov	r4, r0
    2fe6:	4689      	mov	r9, r1
    2fe8:	4617      	mov	r7, r2
    2fea:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    2fec:	f8d0 a000 	ldr.w	sl, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2ff0:	4650      	mov	r0, sl
    2ff2:	4b3f      	ldr	r3, [pc, #252]	; (30f0 <_spi_m_dma_transfer+0x110>)
    2ff4:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2ff6:	2807      	cmp	r0, #7
			return &sercomspi_regs[i];
    2ff8:	4e3e      	ldr	r6, [pc, #248]	; (30f4 <_spi_m_dma_transfer+0x114>)
    2ffa:	bf18      	it	ne
    2ffc:	2600      	movne	r6, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    2ffe:	4650      	mov	r0, sl
    3000:	4b3d      	ldr	r3, [pc, #244]	; (30f8 <_spi_m_dma_transfer+0x118>)
    3002:	4798      	blx	r3
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
    3004:	2f00      	cmp	r7, #0
    3006:	d046      	beq.n	3096 <_spi_m_dma_transfer+0xb6>
    3008:	4605      	mov	r5, r0
	ASSERT(dev && dev->prvt);
    300a:	2c00      	cmp	r4, #0
    300c:	d041      	beq.n	3092 <_spi_m_dma_transfer+0xb2>
    300e:	f11a 0000 	adds.w	r0, sl, #0
    3012:	bf18      	it	ne
    3014:	2001      	movne	r0, #1
    3016:	f640 426b 	movw	r2, #3179	; 0xc6b
    301a:	4938      	ldr	r1, [pc, #224]	; (30fc <_spi_m_dma_transfer+0x11c>)
    301c:	4b38      	ldr	r3, [pc, #224]	; (3100 <_spi_m_dma_transfer+0x120>)
    301e:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    3020:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3022:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3024:	f013 0f04 	tst.w	r3, #4
    3028:	d107      	bne.n	303a <_spi_m_dma_transfer+0x5a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    302a:	6853      	ldr	r3, [r2, #4]
    302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3030:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3032:	69d3      	ldr	r3, [r2, #28]
    3034:	f013 0f17 	tst.w	r3, #23
    3038:	d1fb      	bne.n	3032 <_spi_m_dma_transfer+0x52>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    303a:	6821      	ldr	r1, [r4, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    303c:	3128      	adds	r1, #40	; 0x28
    303e:	4628      	mov	r0, r5
    3040:	4b30      	ldr	r3, [pc, #192]	; (3104 <_spi_m_dma_transfer+0x124>)
    3042:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3044:	4639      	mov	r1, r7
    3046:	4628      	mov	r0, r5
    3048:	4b2f      	ldr	r3, [pc, #188]	; (3108 <_spi_m_dma_transfer+0x128>)
    304a:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    304c:	4641      	mov	r1, r8
    304e:	4628      	mov	r0, r5
    3050:	4b2e      	ldr	r3, [pc, #184]	; (310c <_spi_m_dma_transfer+0x12c>)
    3052:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3054:	2100      	movs	r1, #0
    3056:	4628      	mov	r0, r5
    3058:	4b2d      	ldr	r3, [pc, #180]	; (3110 <_spi_m_dma_transfer+0x130>)
    305a:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    305c:	f1b9 0f00 	cmp.w	r9, #0
    3060:	d033      	beq.n	30ca <_spi_m_dma_transfer+0xea>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    3062:	4649      	mov	r1, r9
    3064:	2000      	movs	r0, #0
    3066:	4b27      	ldr	r3, [pc, #156]	; (3104 <_spi_m_dma_transfer+0x124>)
    3068:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    306a:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    306c:	3128      	adds	r1, #40	; 0x28
    306e:	2000      	movs	r0, #0
    3070:	4b25      	ldr	r3, [pc, #148]	; (3108 <_spi_m_dma_transfer+0x128>)
    3072:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    3074:	2101      	movs	r1, #1
    3076:	2000      	movs	r0, #0
    3078:	4b26      	ldr	r3, [pc, #152]	; (3114 <_spi_m_dma_transfer+0x134>)
    307a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    307c:	4641      	mov	r1, r8
    307e:	2000      	movs	r0, #0
    3080:	4b22      	ldr	r3, [pc, #136]	; (310c <_spi_m_dma_transfer+0x12c>)
    3082:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    3084:	2100      	movs	r1, #0
    3086:	4608      	mov	r0, r1
    3088:	4b21      	ldr	r3, [pc, #132]	; (3110 <_spi_m_dma_transfer+0x130>)
    308a:	4798      	blx	r3

	return ERR_NONE;
}
    308c:	2000      	movs	r0, #0
    308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(dev && dev->prvt);
    3092:	2000      	movs	r0, #0
    3094:	e7bf      	b.n	3016 <_spi_m_dma_transfer+0x36>
	ASSERT(dev && dev->prvt);
    3096:	b1b4      	cbz	r4, 30c6 <_spi_m_dma_transfer+0xe6>
    3098:	f11a 0000 	adds.w	r0, sl, #0
    309c:	bf18      	it	ne
    309e:	2001      	movne	r0, #1
    30a0:	f640 4272 	movw	r2, #3186	; 0xc72
    30a4:	4915      	ldr	r1, [pc, #84]	; (30fc <_spi_m_dma_transfer+0x11c>)
    30a6:	4b16      	ldr	r3, [pc, #88]	; (3100 <_spi_m_dma_transfer+0x120>)
    30a8:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    30aa:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    30ac:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    30ae:	f013 0f04 	tst.w	r3, #4
    30b2:	d1d3      	bne.n	305c <_spi_m_dma_transfer+0x7c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    30b4:	6853      	ldr	r3, [r2, #4]
    30b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    30ba:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    30bc:	69d3      	ldr	r3, [r2, #28]
    30be:	f013 0f17 	tst.w	r3, #23
    30c2:	d1fb      	bne.n	30bc <_spi_m_dma_transfer+0xdc>
    30c4:	e7ca      	b.n	305c <_spi_m_dma_transfer+0x7c>
	ASSERT(dev && dev->prvt);
    30c6:	2000      	movs	r0, #0
    30c8:	e7ea      	b.n	30a0 <_spi_m_dma_transfer+0xc0>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    30ca:	f106 010e 	add.w	r1, r6, #14
    30ce:	2000      	movs	r0, #0
    30d0:	4b0c      	ldr	r3, [pc, #48]	; (3104 <_spi_m_dma_transfer+0x124>)
    30d2:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    30d4:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    30d6:	3128      	adds	r1, #40	; 0x28
    30d8:	2000      	movs	r0, #0
    30da:	4b0b      	ldr	r3, [pc, #44]	; (3108 <_spi_m_dma_transfer+0x128>)
    30dc:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    30de:	2100      	movs	r1, #0
    30e0:	4608      	mov	r0, r1
    30e2:	4b0c      	ldr	r3, [pc, #48]	; (3114 <_spi_m_dma_transfer+0x134>)
    30e4:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    30e6:	4641      	mov	r1, r8
    30e8:	2000      	movs	r0, #0
    30ea:	4b08      	ldr	r3, [pc, #32]	; (310c <_spi_m_dma_transfer+0x12c>)
    30ec:	4798      	blx	r3
    30ee:	e7c9      	b.n	3084 <_spi_m_dma_transfer+0xa4>
    30f0:	000025c5 	.word	0x000025c5
    30f4:	0000636c 	.word	0x0000636c
    30f8:	000026d5 	.word	0x000026d5
    30fc:	00006380 	.word	0x00006380
    3100:	000018ad 	.word	0x000018ad
    3104:	00002001 	.word	0x00002001
    3108:	00001ff1 	.word	0x00001ff1
    310c:	0000202d 	.word	0x0000202d
    3110:	00002085 	.word	0x00002085
    3114:	00002011 	.word	0x00002011

00003118 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3118:	4b03      	ldr	r3, [pc, #12]	; (3128 <_delay_init+0x10>)
    311a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    311e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3120:	2205      	movs	r2, #5
    3122:	601a      	str	r2, [r3, #0]
    3124:	4770      	bx	lr
    3126:	bf00      	nop
    3128:	e000e010 	.word	0xe000e010

0000312c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    312c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    312e:	b303      	cbz	r3, 3172 <_delay_cycles+0x46>
{
    3130:	b430      	push	{r4, r5}
    3132:	1e5d      	subs	r5, r3, #1
    3134:	b2ed      	uxtb	r5, r5
	while (n--) {
    3136:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3138:	4a12      	ldr	r2, [pc, #72]	; (3184 <_delay_cycles+0x58>)
    313a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    313e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3140:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3142:	6813      	ldr	r3, [r2, #0]
    3144:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3148:	d0fb      	beq.n	3142 <_delay_cycles+0x16>
	while (n--) {
    314a:	3801      	subs	r0, #1
    314c:	b2c0      	uxtb	r0, r0
    314e:	28ff      	cmp	r0, #255	; 0xff
    3150:	d1f5      	bne.n	313e <_delay_cycles+0x12>
    3152:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3156:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    315a:	3101      	adds	r1, #1
    315c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    315e:	4b09      	ldr	r3, [pc, #36]	; (3184 <_delay_cycles+0x58>)
    3160:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3162:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3164:	461a      	mov	r2, r3
    3166:	6813      	ldr	r3, [r2, #0]
    3168:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    316c:	d0fb      	beq.n	3166 <_delay_cycles+0x3a>
		;
}
    316e:	bc30      	pop	{r4, r5}
    3170:	4770      	bx	lr
	SysTick->LOAD = buf;
    3172:	4b04      	ldr	r3, [pc, #16]	; (3184 <_delay_cycles+0x58>)
    3174:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3176:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3178:	461a      	mov	r2, r3
    317a:	6813      	ldr	r3, [r2, #0]
    317c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3180:	d0fb      	beq.n	317a <_delay_cycles+0x4e>
    3182:	4770      	bx	lr
    3184:	e000e010 	.word	0xe000e010

00003188 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3188:	2000      	movs	r0, #0
    318a:	4770      	bx	lr

0000318c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    318c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    318e:	7c83      	ldrb	r3, [r0, #18]
    3190:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3194:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    3196:	f002 0107 	and.w	r1, r2, #7
    319a:	2901      	cmp	r1, #1
    319c:	d00b      	beq.n	31b6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    319e:	015a      	lsls	r2, r3, #5
    31a0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    31a4:	2110      	movs	r1, #16
    31a6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    31b0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    31b4:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    31b6:	f012 0f40 	tst.w	r2, #64	; 0x40
    31ba:	d00c      	beq.n	31d6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    31bc:	7cc2      	ldrb	r2, [r0, #19]
    31be:	f36f 1286 	bfc	r2, #6, #1
    31c2:	74c2      	strb	r2, [r0, #19]
    31c4:	015a      	lsls	r2, r3, #5
    31c6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    31ca:	2180      	movs	r1, #128	; 0x80
    31cc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    31d0:	2140      	movs	r1, #64	; 0x40
    31d2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    31d6:	7cc2      	ldrb	r2, [r0, #19]
    31d8:	f36f 02c3 	bfc	r2, #3, #1
    31dc:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    31de:	4909      	ldr	r1, [pc, #36]	; (3204 <_usb_d_dev_handle_setup+0x78>)
    31e0:	015a      	lsls	r2, r3, #5
    31e2:	188c      	adds	r4, r1, r2
    31e4:	2500      	movs	r5, #0
    31e6:	72a5      	strb	r5, [r4, #10]
    31e8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31ea:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    31ee:	246f      	movs	r4, #111	; 0x6f
    31f0:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    31f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    31f8:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    31fc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    31fe:	7c80      	ldrb	r0, [r0, #18]
    3200:	4798      	blx	r3
    3202:	bd38      	pop	{r3, r4, r5, pc}
    3204:	20000760 	.word	0x20000760

00003208 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3208:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    320a:	2320      	movs	r3, #32
    320c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3210:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3212:	7c83      	ldrb	r3, [r0, #18]
    3214:	f003 030f 	and.w	r3, r3, #15
    3218:	015b      	lsls	r3, r3, #5
    321a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    321e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3222:	4b03      	ldr	r3, [pc, #12]	; (3230 <_usb_d_dev_handle_stall+0x28>)
    3224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3226:	6882      	ldr	r2, [r0, #8]
    3228:	2101      	movs	r1, #1
    322a:	7c80      	ldrb	r0, [r0, #18]
    322c:	4798      	blx	r3
    322e:	bd08      	pop	{r3, pc}
    3230:	20000760 	.word	0x20000760

00003234 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3234:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3236:	7c84      	ldrb	r4, [r0, #18]
    3238:	2cff      	cmp	r4, #255	; 0xff
    323a:	d003      	beq.n	3244 <_usb_d_dev_trans_done+0x10>
    323c:	7cc3      	ldrb	r3, [r0, #19]
    323e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3242:	d100      	bne.n	3246 <_usb_d_dev_trans_done+0x12>
    3244:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    3246:	7cc2      	ldrb	r2, [r0, #19]
    3248:	f36f 1286 	bfc	r2, #6, #1
    324c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    324e:	4a03      	ldr	r2, [pc, #12]	; (325c <_usb_d_dev_trans_done+0x28>)
    3250:	6f15      	ldr	r5, [r2, #112]	; 0x70
    3252:	6882      	ldr	r2, [r0, #8]
    3254:	4620      	mov	r0, r4
    3256:	47a8      	blx	r5
    3258:	e7f4      	b.n	3244 <_usb_d_dev_trans_done+0x10>
    325a:	bf00      	nop
    325c:	20000760 	.word	0x20000760

00003260 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3260:	b530      	push	{r4, r5, lr}
    3262:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3264:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3266:	2425      	movs	r4, #37	; 0x25
    3268:	f88d 4004 	strb.w	r4, [sp, #4]
    326c:	244a      	movs	r4, #74	; 0x4a
    326e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3272:	2bff      	cmp	r3, #255	; 0xff
    3274:	d01e      	beq.n	32b4 <_usb_d_dev_trans_stop+0x54>
    3276:	7cc4      	ldrb	r4, [r0, #19]
    3278:	f014 0f40 	tst.w	r4, #64	; 0x40
    327c:	d01a      	beq.n	32b4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    327e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    3282:	b1c9      	cbz	r1, 32b8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3284:	0163      	lsls	r3, r4, #5
    3286:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    328a:	2580      	movs	r5, #128	; 0x80
    328c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    3290:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3292:	a902      	add	r1, sp, #8
    3294:	440b      	add	r3, r1
    3296:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    329a:	0163      	lsls	r3, r4, #5
    329c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    32a0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    32a4:	0163      	lsls	r3, r4, #5
    32a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    32aa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    32ae:	4611      	mov	r1, r2
    32b0:	4b05      	ldr	r3, [pc, #20]	; (32c8 <_usb_d_dev_trans_stop+0x68>)
    32b2:	4798      	blx	r3
}
    32b4:	b003      	add	sp, #12
    32b6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    32b8:	0163      	lsls	r3, r4, #5
    32ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    32be:	2540      	movs	r5, #64	; 0x40
    32c0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    32c4:	e7e4      	b.n	3290 <_usb_d_dev_trans_stop+0x30>
    32c6:	bf00      	nop
    32c8:	00003235 	.word	0x00003235

000032cc <_usb_d_dev_handle_trfail>:
{
    32cc:	b530      	push	{r4, r5, lr}
    32ce:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    32d0:	7c83      	ldrb	r3, [r0, #18]
    32d2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    32d6:	2204      	movs	r2, #4
    32d8:	f88d 2004 	strb.w	r2, [sp, #4]
    32dc:	2208      	movs	r2, #8
    32de:	f88d 2005 	strb.w	r2, [sp, #5]
    32e2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    32e4:	460c      	mov	r4, r1
    32e6:	b391      	cbz	r1, 334e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    32e8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    32ec:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    32f0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    32f4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    32f8:	4a32      	ldr	r2, [pc, #200]	; (33c4 <_usb_d_dev_handle_trfail+0xf8>)
    32fa:	440a      	add	r2, r1
    32fc:	7a91      	ldrb	r1, [r2, #10]
    32fe:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3300:	2d02      	cmp	r5, #2
    3302:	d02c      	beq.n	335e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    3304:	f011 0f02 	tst.w	r1, #2
    3308:	d045      	beq.n	3396 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    330a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    330c:	7a91      	ldrb	r1, [r2, #10]
    330e:	f36f 0141 	bfc	r1, #1, #1
    3312:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3314:	aa02      	add	r2, sp, #8
    3316:	4422      	add	r2, r4
    3318:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    331c:	015a      	lsls	r2, r3, #5
    331e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3322:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3326:	015b      	lsls	r3, r3, #5
    3328:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    332c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3330:	f005 0307 	and.w	r3, r5, #7
    3334:	2b01      	cmp	r3, #1
    3336:	d143      	bne.n	33c0 <_usb_d_dev_handle_trfail+0xf4>
    3338:	7cc3      	ldrb	r3, [r0, #19]
    333a:	f013 0f40 	tst.w	r3, #64	; 0x40
    333e:	d03f      	beq.n	33c0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3340:	09d9      	lsrs	r1, r3, #7
    3342:	428c      	cmp	r4, r1
    3344:	d03c      	beq.n	33c0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3346:	2200      	movs	r2, #0
    3348:	4b1f      	ldr	r3, [pc, #124]	; (33c8 <_usb_d_dev_handle_trfail+0xfc>)
    334a:	4798      	blx	r3
    334c:	e038      	b.n	33c0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    334e:	0159      	lsls	r1, r3, #5
    3350:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3354:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3358:	f005 0507 	and.w	r5, r5, #7
    335c:	e7ca      	b.n	32f4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    335e:	f011 0f01 	tst.w	r1, #1
    3362:	d0cf      	beq.n	3304 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3364:	7a91      	ldrb	r1, [r2, #10]
    3366:	f36f 0100 	bfc	r1, #0, #1
    336a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    336c:	aa02      	add	r2, sp, #8
    336e:	4422      	add	r2, r4
    3370:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3374:	015a      	lsls	r2, r3, #5
    3376:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    337a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    337e:	015b      	lsls	r3, r3, #5
    3380:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3384:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3388:	2204      	movs	r2, #4
    338a:	1c21      	adds	r1, r4, #0
    338c:	bf18      	it	ne
    338e:	2101      	movne	r1, #1
    3390:	4b0d      	ldr	r3, [pc, #52]	; (33c8 <_usb_d_dev_handle_trfail+0xfc>)
    3392:	4798      	blx	r3
    3394:	e014      	b.n	33c0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    3396:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    339a:	4a0a      	ldr	r2, [pc, #40]	; (33c4 <_usb_d_dev_handle_trfail+0xf8>)
    339c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    33a0:	2100      	movs	r1, #0
    33a2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    33a4:	aa02      	add	r2, sp, #8
    33a6:	4414      	add	r4, r2
    33a8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33ac:	015a      	lsls	r2, r3, #5
    33ae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    33b2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    33b6:	015b      	lsls	r3, r3, #5
    33b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    33bc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    33c0:	b003      	add	sp, #12
    33c2:	bd30      	pop	{r4, r5, pc}
    33c4:	20000760 	.word	0x20000760
    33c8:	00003261 	.word	0x00003261

000033cc <_usb_d_dev_reset_epts>:
{
    33cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33d0:	4d0c      	ldr	r5, [pc, #48]	; (3404 <_usb_d_dev_reset_epts+0x38>)
    33d2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    33d6:	f505 7524 	add.w	r5, r5, #656	; 0x290
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    33da:	f04f 0803 	mov.w	r8, #3
    33de:	4f0a      	ldr	r7, [pc, #40]	; (3408 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    33e0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    33e2:	4641      	mov	r1, r8
    33e4:	4620      	mov	r0, r4
    33e6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    33e8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    33ea:	2300      	movs	r3, #0
    33ec:	74e3      	strb	r3, [r4, #19]
    33ee:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    33f0:	42ac      	cmp	r4, r5
    33f2:	d1f6      	bne.n	33e2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    33f4:	2260      	movs	r2, #96	; 0x60
    33f6:	4619      	mov	r1, r3
    33f8:	4802      	ldr	r0, [pc, #8]	; (3404 <_usb_d_dev_reset_epts+0x38>)
    33fa:	4b04      	ldr	r3, [pc, #16]	; (340c <_usb_d_dev_reset_epts+0x40>)
    33fc:	4798      	blx	r3
    33fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3402:	bf00      	nop
    3404:	20000760 	.word	0x20000760
    3408:	00003235 	.word	0x00003235
    340c:	000057d7 	.word	0x000057d7

00003410 <_usb_d_dev_in_next>:
{
    3410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3414:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    3416:	7c84      	ldrb	r4, [r0, #18]
    3418:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    341c:	4688      	mov	r8, r1
    341e:	2900      	cmp	r1, #0
    3420:	f000 809f 	beq.w	3562 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3424:	4b58      	ldr	r3, [pc, #352]	; (3588 <_usb_d_dev_in_next+0x178>)
    3426:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    342a:	6958      	ldr	r0, [r3, #20]
    342c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3430:	8a2b      	ldrh	r3, [r5, #16]
    3432:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3436:	4293      	cmp	r3, r2
    3438:	f000 808d 	beq.w	3556 <_usb_d_dev_in_next+0x146>
    343c:	3b01      	subs	r3, #1
    343e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3440:	7cef      	ldrb	r7, [r5, #19]
    3442:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    3446:	f1b8 0f00 	cmp.w	r8, #0
    344a:	d005      	beq.n	3458 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    344c:	0162      	lsls	r2, r4, #5
    344e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3452:	2302      	movs	r3, #2
    3454:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    3458:	68a9      	ldr	r1, [r5, #8]
    345a:	eb0e 0301 	add.w	r3, lr, r1
    345e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    3460:	686e      	ldr	r6, [r5, #4]
    3462:	42b3      	cmp	r3, r6
    3464:	d23f      	bcs.n	34e6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    3466:	1af6      	subs	r6, r6, r3
    3468:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    346a:	7cea      	ldrb	r2, [r5, #19]
    346c:	f012 0f20 	tst.w	r2, #32
    3470:	d02d      	beq.n	34ce <_usb_d_dev_in_next+0xbe>
    3472:	8a2a      	ldrh	r2, [r5, #16]
    3474:	4296      	cmp	r6, r2
    3476:	bf28      	it	cs
    3478:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    347a:	6829      	ldr	r1, [r5, #0]
    347c:	4632      	mov	r2, r6
    347e:	4419      	add	r1, r3
    3480:	68e8      	ldr	r0, [r5, #12]
    3482:	4b42      	ldr	r3, [pc, #264]	; (358c <_usb_d_dev_in_next+0x17c>)
    3484:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3486:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    3488:	4b3f      	ldr	r3, [pc, #252]	; (3588 <_usb_d_dev_in_next+0x178>)
    348a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    348e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3490:	4b3d      	ldr	r3, [pc, #244]	; (3588 <_usb_d_dev_in_next+0x178>)
    3492:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3496:	695a      	ldr	r2, [r3, #20]
    3498:	f366 020d 	bfi	r2, r6, #0, #14
    349c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    349e:	695a      	ldr	r2, [r3, #20]
    34a0:	f36f 329b 	bfc	r2, #14, #14
    34a4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    34a6:	f1b8 0f00 	cmp.w	r8, #0
    34aa:	d108      	bne.n	34be <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    34ac:	2f01      	cmp	r7, #1
    34ae:	bf0c      	ite	eq
    34b0:	224e      	moveq	r2, #78	; 0x4e
    34b2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    34b4:	0163      	lsls	r3, r4, #5
    34b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34ba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    34be:	0164      	lsls	r4, r4, #5
    34c0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    34c4:	2380      	movs	r3, #128	; 0x80
    34c6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    34ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34ce:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    34d2:	bf28      	it	cs
    34d4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    34d8:	6829      	ldr	r1, [r5, #0]
    34da:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    34dc:	4a2a      	ldr	r2, [pc, #168]	; (3588 <_usb_d_dev_in_next+0x178>)
    34de:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    34e2:	6113      	str	r3, [r2, #16]
    34e4:	e7d4      	b.n	3490 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    34e6:	7ceb      	ldrb	r3, [r5, #19]
    34e8:	f013 0f10 	tst.w	r3, #16
    34ec:	d00f      	beq.n	350e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    34ee:	7ceb      	ldrb	r3, [r5, #19]
    34f0:	f36f 1304 	bfc	r3, #4, #1
    34f4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    34f6:	4b24      	ldr	r3, [pc, #144]	; (3588 <_usb_d_dev_in_next+0x178>)
    34f8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    34fc:	695a      	ldr	r2, [r3, #20]
    34fe:	f36f 020d 	bfc	r2, #0, #14
    3502:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3504:	695a      	ldr	r2, [r3, #20]
    3506:	f36f 329b 	bfc	r2, #14, #14
    350a:	615a      	str	r2, [r3, #20]
    350c:	e7cb      	b.n	34a6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    350e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3510:	ea4f 1444 	mov.w	r4, r4, lsl #5
    3514:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3518:	bf0c      	ite	eq
    351a:	234b      	moveq	r3, #75	; 0x4b
    351c:	234a      	movne	r3, #74	; 0x4a
    351e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    3522:	8a2a      	ldrh	r2, [r5, #16]
    3524:	ea00 030e 	and.w	r3, r0, lr
    3528:	429a      	cmp	r2, r3
    352a:	d005      	beq.n	3538 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    352c:	2100      	movs	r1, #0
    352e:	4628      	mov	r0, r5
    3530:	4b17      	ldr	r3, [pc, #92]	; (3590 <_usb_d_dev_in_next+0x180>)
    3532:	4798      	blx	r3
	return;
    3534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    3538:	7ceb      	ldrb	r3, [r5, #19]
    353a:	f36f 1386 	bfc	r3, #6, #1
    353e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    3540:	4b11      	ldr	r3, [pc, #68]	; (3588 <_usb_d_dev_in_next+0x178>)
    3542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3544:	68a9      	ldr	r1, [r5, #8]
    3546:	7ca8      	ldrb	r0, [r5, #18]
    3548:	4798      	blx	r3
    354a:	b9d0      	cbnz	r0, 3582 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    354c:	7ceb      	ldrb	r3, [r5, #19]
    354e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3552:	74eb      	strb	r3, [r5, #19]
    3554:	e7ea      	b.n	352c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3556:	7cef      	ldrb	r7, [r5, #19]
    3558:	f007 0707 	and.w	r7, r7, #7
    355c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3560:	e774      	b.n	344c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3562:	8a03      	ldrh	r3, [r0, #16]
    3564:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3568:	4293      	cmp	r3, r2
    356a:	d107      	bne.n	357c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    356c:	7cef      	ldrb	r7, [r5, #19]
    356e:	f007 0707 	and.w	r7, r7, #7
    3572:	f04f 0e00 	mov.w	lr, #0
    3576:	f240 30ff 	movw	r0, #1023	; 0x3ff
    357a:	e76d      	b.n	3458 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    357c:	f04f 0e00 	mov.w	lr, #0
    3580:	e75c      	b.n	343c <_usb_d_dev_in_next+0x2c>
    3582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3586:	bf00      	nop
    3588:	20000760 	.word	0x20000760
    358c:	000057c1 	.word	0x000057c1
    3590:	00003235 	.word	0x00003235

00003594 <_usb_d_dev_out_next>:
{
    3594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3598:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    359a:	7c85      	ldrb	r5, [r0, #18]
    359c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    35a0:	4689      	mov	r9, r1
    35a2:	2900      	cmp	r1, #0
    35a4:	d056      	beq.n	3654 <_usb_d_dev_out_next+0xc0>
    35a6:	4b74      	ldr	r3, [pc, #464]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    35a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    35ac:	685a      	ldr	r2, [r3, #4]
    35ae:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    35b2:	685f      	ldr	r7, [r3, #4]
    35b4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    35b8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    35ba:	8a06      	ldrh	r6, [r0, #16]
    35bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    35c0:	429e      	cmp	r6, r3
    35c2:	f000 80ba 	beq.w	373a <_usb_d_dev_out_next+0x1a6>
    35c6:	3e01      	subs	r6, #1
    35c8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    35ca:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    35ce:	f894 8013 	ldrb.w	r8, [r4, #19]
    35d2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    35d6:	f1b9 0f00 	cmp.w	r9, #0
    35da:	d005      	beq.n	35e8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35dc:	016b      	lsls	r3, r5, #5
    35de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    35e2:	2201      	movs	r2, #1
    35e4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    35e8:	7ce3      	ldrb	r3, [r4, #19]
    35ea:	f013 0f20 	tst.w	r3, #32
    35ee:	d00d      	beq.n	360c <_usb_d_dev_out_next+0x78>
    35f0:	6862      	ldr	r2, [r4, #4]
    35f2:	2a00      	cmp	r2, #0
    35f4:	d037      	beq.n	3666 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    35f6:	68a0      	ldr	r0, [r4, #8]
    35f8:	1a12      	subs	r2, r2, r0
    35fa:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	42ba      	cmp	r2, r7
    3600:	bf28      	it	cs
    3602:	463a      	movcs	r2, r7
    3604:	68e1      	ldr	r1, [r4, #12]
    3606:	4418      	add	r0, r3
    3608:	4b5c      	ldr	r3, [pc, #368]	; (377c <_usb_d_dev_out_next+0x1e8>)
    360a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    360c:	6863      	ldr	r3, [r4, #4]
    360e:	b353      	cbz	r3, 3666 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    3610:	f1b9 0f00 	cmp.w	r9, #0
    3614:	d040      	beq.n	3698 <_usb_d_dev_out_next+0x104>
    3616:	8a22      	ldrh	r2, [r4, #16]
    3618:	42ba      	cmp	r2, r7
    361a:	d93d      	bls.n	3698 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    361c:	7ce3      	ldrb	r3, [r4, #19]
    361e:	f36f 1304 	bfc	r3, #4, #1
    3622:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3624:	68a3      	ldr	r3, [r4, #8]
    3626:	445b      	add	r3, fp
    3628:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    362a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    362e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    3632:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3636:	bf0c      	ite	eq
    3638:	222d      	moveq	r2, #45	; 0x2d
    363a:	2225      	movne	r2, #37	; 0x25
    363c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    3640:	b915      	cbnz	r5, 3648 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3642:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3644:	4b4c      	ldr	r3, [pc, #304]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    3646:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3648:	2100      	movs	r1, #0
    364a:	4620      	mov	r0, r4
    364c:	4b4c      	ldr	r3, [pc, #304]	; (3780 <_usb_d_dev_out_next+0x1ec>)
    364e:	4798      	blx	r3
	return;
    3650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3654:	8a06      	ldrh	r6, [r0, #16]
    3656:	f240 33ff 	movw	r3, #1023	; 0x3ff
    365a:	429e      	cmp	r6, r3
    365c:	d07b      	beq.n	3756 <_usb_d_dev_out_next+0x1c2>
    365e:	f04f 0b00 	mov.w	fp, #0
    3662:	46da      	mov	sl, fp
    3664:	e7af      	b.n	35c6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3666:	7ce3      	ldrb	r3, [r4, #19]
    3668:	f013 0f10 	tst.w	r3, #16
    366c:	d06c      	beq.n	3748 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    366e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3670:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3674:	f043 0320 	orr.w	r3, r3, #32
    3678:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    367a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    367c:	493e      	ldr	r1, [pc, #248]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    367e:	016a      	lsls	r2, r5, #5
    3680:	188b      	adds	r3, r1, r2
    3682:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3684:	8a21      	ldrh	r1, [r4, #16]
    3686:	685a      	ldr	r2, [r3, #4]
    3688:	f361 329b 	bfi	r2, r1, #14, #14
    368c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    368e:	685a      	ldr	r2, [r3, #4]
    3690:	f36f 020d 	bfc	r2, #0, #14
    3694:	605a      	str	r2, [r3, #4]
    3696:	e01d      	b.n	36d4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    3698:	68a2      	ldr	r2, [r4, #8]
    369a:	4452      	add	r2, sl
    369c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    369e:	4293      	cmp	r3, r2
    36a0:	d9c3      	bls.n	362a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    36a2:	1a9b      	subs	r3, r3, r2
    36a4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    36a6:	7ce1      	ldrb	r1, [r4, #19]
    36a8:	f011 0f20 	tst.w	r1, #32
    36ac:	d026      	beq.n	36fc <_usb_d_dev_out_next+0x168>
    36ae:	8a22      	ldrh	r2, [r4, #16]
    36b0:	4293      	cmp	r3, r2
    36b2:	bf28      	it	cs
    36b4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    36b6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    36b8:	016a      	lsls	r2, r5, #5
    36ba:	492f      	ldr	r1, [pc, #188]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    36bc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    36be:	4a2e      	ldr	r2, [pc, #184]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    36c0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    36c4:	6851      	ldr	r1, [r2, #4]
    36c6:	f363 319b 	bfi	r1, r3, #14, #14
    36ca:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    36cc:	6853      	ldr	r3, [r2, #4]
    36ce:	f36f 030d 	bfc	r3, #0, #14
    36d2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    36d4:	f1b9 0f00 	cmp.w	r9, #0
    36d8:	d108      	bne.n	36ec <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    36da:	f1b8 0f01 	cmp.w	r8, #1
    36de:	d025      	beq.n	372c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    36e0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    36e2:	016b      	lsls	r3, r5, #5
    36e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36e8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36ec:	016d      	lsls	r5, r5, #5
    36ee:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    36f2:	2340      	movs	r3, #64	; 0x40
    36f4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    36f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    36fc:	8a21      	ldrh	r1, [r4, #16]
    36fe:	428b      	cmp	r3, r1
    3700:	d90a      	bls.n	3718 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3706:	d80e      	bhi.n	3726 <_usb_d_dev_out_next+0x192>
    3708:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    370c:	6821      	ldr	r1, [r4, #0]
    370e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    3710:	0169      	lsls	r1, r5, #5
    3712:	4819      	ldr	r0, [pc, #100]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    3714:	5042      	str	r2, [r0, r1]
    3716:	e7d2      	b.n	36be <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    3718:	428b      	cmp	r3, r1
    371a:	d2f7      	bcs.n	370c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    371c:	7ce1      	ldrb	r1, [r4, #19]
    371e:	f041 0120 	orr.w	r1, r1, #32
    3722:	74e1      	strb	r1, [r4, #19]
    3724:	e7f2      	b.n	370c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    3726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    372a:	e7ef      	b.n	370c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    372c:	4b12      	ldr	r3, [pc, #72]	; (3778 <_usb_d_dev_out_next+0x1e4>)
    372e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3732:	2200      	movs	r2, #0
    3734:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3736:	222d      	movs	r2, #45	; 0x2d
    3738:	e7d3      	b.n	36e2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    373a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    373e:	f890 8013 	ldrb.w	r8, [r0, #19]
    3742:	f008 0807 	and.w	r8, r8, #7
    3746:	e749      	b.n	35dc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    3748:	f1b9 0f00 	cmp.w	r9, #0
    374c:	d10b      	bne.n	3766 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    374e:	68a3      	ldr	r3, [r4, #8]
    3750:	4453      	add	r3, sl
    3752:	60a3      	str	r3, [r4, #8]
    3754:	e769      	b.n	362a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3756:	f890 8013 	ldrb.w	r8, [r0, #19]
    375a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    375e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3760:	46bb      	mov	fp, r7
    3762:	46ba      	mov	sl, r7
    3764:	e740      	b.n	35e8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    3766:	8a23      	ldrh	r3, [r4, #16]
    3768:	42bb      	cmp	r3, r7
    376a:	f63f af57 	bhi.w	361c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    376e:	68a3      	ldr	r3, [r4, #8]
    3770:	4453      	add	r3, sl
    3772:	60a3      	str	r3, [r4, #8]
    3774:	e759      	b.n	362a <_usb_d_dev_out_next+0x96>
    3776:	bf00      	nop
    3778:	20000760 	.word	0x20000760
    377c:	000057c1 	.word	0x000057c1
    3780:	00003235 	.word	0x00003235

00003784 <_usb_d_dev_handler>:
{
    3784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3788:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    378c:	8c1e      	ldrh	r6, [r3, #32]
    378e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3790:	b146      	cbz	r6, 37a4 <_usb_d_dev_handler+0x20>
    3792:	4d91      	ldr	r5, [pc, #580]	; (39d8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    3794:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3796:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    379a:	f8df 9258 	ldr.w	r9, [pc, #600]	; 39f4 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    379e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 39f8 <_usb_d_dev_handler+0x274>
    37a2:	e0d3      	b.n	394c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    37a4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    37a6:	8b1b      	ldrh	r3, [r3, #24]
    37a8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    37aa:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    37ac:	f013 0f04 	tst.w	r3, #4
    37b0:	d11d      	bne.n	37ee <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    37b2:	f413 7f00 	tst.w	r3, #512	; 0x200
    37b6:	d123      	bne.n	3800 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    37b8:	f013 0f80 	tst.w	r3, #128	; 0x80
    37bc:	d147      	bne.n	384e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    37be:	f013 0f70 	tst.w	r3, #112	; 0x70
    37c2:	d14f      	bne.n	3864 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    37c4:	f013 0f08 	tst.w	r3, #8
    37c8:	d16e      	bne.n	38a8 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    37ca:	f013 0f01 	tst.w	r3, #1
    37ce:	d0e0      	beq.n	3792 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    37d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    37d4:	f240 2201 	movw	r2, #513	; 0x201
    37d8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    37da:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    37dc:	2270      	movs	r2, #112	; 0x70
    37de:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    37e0:	4b7e      	ldr	r3, [pc, #504]	; (39dc <_usb_d_dev_handler+0x258>)
    37e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    37e4:	2100      	movs	r1, #0
    37e6:	2004      	movs	r0, #4
    37e8:	4798      	blx	r3
    37ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    37ee:	2204      	movs	r2, #4
    37f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    37f4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    37f6:	4b79      	ldr	r3, [pc, #484]	; (39dc <_usb_d_dev_handler+0x258>)
    37f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    37fa:	4798      	blx	r3
    37fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3800:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3804:	f240 2201 	movw	r2, #513	; 0x201
    3808:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    380a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    380c:	2270      	movs	r2, #112	; 0x70
    380e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3810:	4b72      	ldr	r3, [pc, #456]	; (39dc <_usb_d_dev_handler+0x258>)
    3812:	891b      	ldrh	r3, [r3, #8]
    3814:	f003 030f 	and.w	r3, r3, #15
    3818:	2b03      	cmp	r3, #3
    381a:	d00e      	beq.n	383a <_usb_d_dev_handler+0xb6>
    381c:	4b6f      	ldr	r3, [pc, #444]	; (39dc <_usb_d_dev_handler+0x258>)
    381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3820:	f003 030f 	and.w	r3, r3, #15
    3824:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3826:	bf08      	it	eq
    3828:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    382a:	d007      	beq.n	383c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    382c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    382e:	4b6b      	ldr	r3, [pc, #428]	; (39dc <_usb_d_dev_handler+0x258>)
    3830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3832:	2003      	movs	r0, #3
    3834:	4798      	blx	r3
    3836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    383a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    383c:	4b67      	ldr	r3, [pc, #412]	; (39dc <_usb_d_dev_handler+0x258>)
    383e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    3842:	8919      	ldrh	r1, [r3, #8]
    3844:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    3848:	2200      	movs	r2, #0
    384a:	811a      	strh	r2, [r3, #8]
    384c:	e7ef      	b.n	382e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    384e:	2280      	movs	r2, #128	; 0x80
    3850:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3854:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3856:	4b61      	ldr	r3, [pc, #388]	; (39dc <_usb_d_dev_handler+0x258>)
    3858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    385a:	2100      	movs	r1, #0
    385c:	2005      	movs	r0, #5
    385e:	4798      	blx	r3
    3860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3864:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3868:	2270      	movs	r2, #112	; 0x70
    386a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    386c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    386e:	f240 2201 	movw	r2, #513	; 0x201
    3872:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3874:	4b5a      	ldr	r3, [pc, #360]	; (39e0 <_usb_d_dev_handler+0x25c>)
    3876:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    387a:	f013 0f01 	tst.w	r3, #1
    387e:	d00d      	beq.n	389c <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3880:	4a57      	ldr	r2, [pc, #348]	; (39e0 <_usb_d_dev_handler+0x25c>)
    3882:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3884:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3888:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    388c:	d1f9      	bne.n	3882 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    388e:	4b53      	ldr	r3, [pc, #332]	; (39dc <_usb_d_dev_handler+0x258>)
    3890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3892:	2100      	movs	r1, #0
    3894:	2002      	movs	r0, #2
    3896:	4798      	blx	r3
    3898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    389c:	4a50      	ldr	r2, [pc, #320]	; (39e0 <_usb_d_dev_handler+0x25c>)
    389e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    38a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    38a4:	d0fb      	beq.n	389e <_usb_d_dev_handler+0x11a>
    38a6:	e7f2      	b.n	388e <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    38a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    38ac:	2400      	movs	r4, #0
    38ae:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    38b2:	2208      	movs	r2, #8
    38b4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    38b6:	2270      	movs	r2, #112	; 0x70
    38b8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    38ba:	f240 2201 	movw	r2, #513	; 0x201
    38be:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    38c0:	4b48      	ldr	r3, [pc, #288]	; (39e4 <_usb_d_dev_handler+0x260>)
    38c2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    38c4:	4b45      	ldr	r3, [pc, #276]	; (39dc <_usb_d_dev_handler+0x258>)
    38c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    38c8:	4621      	mov	r1, r4
    38ca:	2001      	movs	r0, #1
    38cc:	4798      	blx	r3
    38ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    38d2:	f011 0f10 	tst.w	r1, #16
    38d6:	d109      	bne.n	38ec <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    38d8:	f011 0f40 	tst.w	r1, #64	; 0x40
    38dc:	d108      	bne.n	38f0 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    38de:	f011 0f20 	tst.w	r1, #32
    38e2:	d02f      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    38e4:	2100      	movs	r1, #0
    38e6:	4b40      	ldr	r3, [pc, #256]	; (39e8 <_usb_d_dev_handler+0x264>)
    38e8:	4798      	blx	r3
    38ea:	e02b      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    38ec:	47c8      	blx	r9
    38ee:	e029      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    38f0:	2101      	movs	r1, #1
    38f2:	4b3d      	ldr	r3, [pc, #244]	; (39e8 <_usb_d_dev_handler+0x264>)
    38f4:	4798      	blx	r3
    38f6:	e025      	b.n	3944 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    38f8:	f011 0f40 	tst.w	r1, #64	; 0x40
    38fc:	d111      	bne.n	3922 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    38fe:	f011 0f08 	tst.w	r1, #8
    3902:	d112      	bne.n	392a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3904:	f011 0f02 	tst.w	r1, #2
    3908:	d112      	bne.n	3930 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    390a:	f003 0307 	and.w	r3, r3, #7
    390e:	2b01      	cmp	r3, #1
    3910:	d118      	bne.n	3944 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3912:	f011 0f04 	tst.w	r1, #4
    3916:	d10f      	bne.n	3938 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3918:	f011 0f10 	tst.w	r1, #16
    391c:	d012      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    391e:	47c8      	blx	r9
    3920:	e010      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    3922:	2101      	movs	r1, #1
    3924:	4b30      	ldr	r3, [pc, #192]	; (39e8 <_usb_d_dev_handler+0x264>)
    3926:	4798      	blx	r3
    3928:	e00c      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    392a:	2101      	movs	r1, #1
    392c:	47c0      	blx	r8
    392e:	e009      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    3930:	2101      	movs	r1, #1
    3932:	4b2e      	ldr	r3, [pc, #184]	; (39ec <_usb_d_dev_handler+0x268>)
    3934:	4798      	blx	r3
    3936:	e005      	b.n	3944 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    3938:	2100      	movs	r1, #0
    393a:	47c0      	blx	r8
    393c:	e002      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    393e:	2100      	movs	r1, #0
    3940:	4b29      	ldr	r3, [pc, #164]	; (39e8 <_usb_d_dev_handler+0x264>)
    3942:	4798      	blx	r3
    3944:	3401      	adds	r4, #1
    3946:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3948:	2c1b      	cmp	r4, #27
    394a:	d042      	beq.n	39d2 <_usb_d_dev_handler+0x24e>
    394c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    394e:	7cab      	ldrb	r3, [r5, #18]
    3950:	2bff      	cmp	r3, #255	; 0xff
    3952:	d0f7      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    3954:	f003 030f 	and.w	r3, r3, #15
    3958:	2101      	movs	r1, #1
    395a:	4099      	lsls	r1, r3
    395c:	4231      	tst	r1, r6
    395e:	d0f1      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3960:	0159      	lsls	r1, r3, #5
    3962:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3966:	f501 7180 	add.w	r1, r1, #256	; 0x100
    396a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    396c:	015b      	lsls	r3, r3, #5
    396e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3972:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    3976:	4019      	ands	r1, r3
    3978:	d0e4      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    397a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    397e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3982:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    3986:	f003 0247 	and.w	r2, r3, #71	; 0x47
    398a:	2a01      	cmp	r2, #1
    398c:	d0a1      	beq.n	38d2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    398e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3992:	d1b1      	bne.n	38f8 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3994:	f011 0f20 	tst.w	r1, #32
    3998:	d1d1      	bne.n	393e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    399a:	f011 0f04 	tst.w	r1, #4
    399e:	d10e      	bne.n	39be <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    39a0:	f011 0f01 	tst.w	r1, #1
    39a4:	d10e      	bne.n	39c4 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    39a6:	f003 0307 	and.w	r3, r3, #7
    39aa:	2b01      	cmp	r3, #1
    39ac:	d1ca      	bne.n	3944 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    39ae:	f011 0f08 	tst.w	r1, #8
    39b2:	d10b      	bne.n	39cc <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    39b4:	f011 0f10 	tst.w	r1, #16
    39b8:	d0c4      	beq.n	3944 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    39ba:	47c8      	blx	r9
    39bc:	e7c2      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    39be:	2100      	movs	r1, #0
    39c0:	47c0      	blx	r8
    39c2:	e7bf      	b.n	3944 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    39c4:	2101      	movs	r1, #1
    39c6:	4b0a      	ldr	r3, [pc, #40]	; (39f0 <_usb_d_dev_handler+0x26c>)
    39c8:	4798      	blx	r3
    39ca:	e7bb      	b.n	3944 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    39cc:	2101      	movs	r1, #1
    39ce:	47c0      	blx	r8
    39d0:	e7b8      	b.n	3944 <_usb_d_dev_handler+0x1c0>
    39d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    39d6:	bf00      	nop
    39d8:	200007d4 	.word	0x200007d4
    39dc:	20000760 	.word	0x20000760
    39e0:	40001000 	.word	0x40001000
    39e4:	000033cd 	.word	0x000033cd
    39e8:	00003209 	.word	0x00003209
    39ec:	00003411 	.word	0x00003411
    39f0:	00003595 	.word	0x00003595
    39f4:	0000318d 	.word	0x0000318d
    39f8:	000032cd 	.word	0x000032cd

000039fc <_usb_d_dev_init>:
{
    39fc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    39fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3a02:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3a04:	f013 0f01 	tst.w	r3, #1
    3a08:	d124      	bne.n	3a54 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a0a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a0e:	7893      	ldrb	r3, [r2, #2]
    3a10:	f013 0f03 	tst.w	r3, #3
    3a14:	d1fb      	bne.n	3a0e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    3a16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3a1a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3a1c:	f013 0f02 	tst.w	r3, #2
    3a20:	d00f      	beq.n	3a42 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3a22:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a26:	7813      	ldrb	r3, [r2, #0]
    3a28:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3a2c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a2e:	7893      	ldrb	r3, [r2, #2]
    3a30:	f013 0f03 	tst.w	r3, #3
    3a34:	d1fb      	bne.n	3a2e <_usb_d_dev_init+0x32>
    3a36:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a3a:	7893      	ldrb	r3, [r2, #2]
    3a3c:	f013 0f02 	tst.w	r3, #2
    3a40:	d1fb      	bne.n	3a3a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3a42:	2201      	movs	r2, #1
    3a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3a48:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a4a:	461a      	mov	r2, r3
    3a4c:	7893      	ldrb	r3, [r2, #2]
    3a4e:	f013 0f03 	tst.w	r3, #3
    3a52:	d1fb      	bne.n	3a4c <_usb_d_dev_init+0x50>
    3a54:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3a58:	7893      	ldrb	r3, [r2, #2]
    3a5a:	f013 0f01 	tst.w	r3, #1
    3a5e:	d1fb      	bne.n	3a58 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3a60:	4b21      	ldr	r3, [pc, #132]	; (3ae8 <_usb_d_dev_init+0xec>)
    3a62:	4a22      	ldr	r2, [pc, #136]	; (3aec <_usb_d_dev_init+0xf0>)
    3a64:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3a66:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3a68:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3a6a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3a6c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    3a6e:	4b20      	ldr	r3, [pc, #128]	; (3af0 <_usb_d_dev_init+0xf4>)
    3a70:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3a72:	4b20      	ldr	r3, [pc, #128]	; (3af4 <_usb_d_dev_init+0xf8>)
    3a74:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3a76:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3a7a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3a7e:	f011 011f 	ands.w	r1, r1, #31
    3a82:	d02b      	beq.n	3adc <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    3a84:	291f      	cmp	r1, #31
    3a86:	bf08      	it	eq
    3a88:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3a8a:	b34b      	cbz	r3, 3ae0 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3a8c:	2b1f      	cmp	r3, #31
    3a8e:	bf08      	it	eq
    3a90:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3a92:	b33a      	cbz	r2, 3ae4 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3a94:	2a07      	cmp	r2, #7
    3a96:	bf08      	it	eq
    3a98:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3a9a:	f003 031f 	and.w	r3, r3, #31
    3a9e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3aa2:	0312      	lsls	r2, r2, #12
    3aa4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3aa8:	4313      	orrs	r3, r2
    3aaa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3aae:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3ab0:	78d3      	ldrb	r3, [r2, #3]
    3ab2:	f043 0303 	orr.w	r3, r3, #3
    3ab6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3ab8:	78d3      	ldrb	r3, [r2, #3]
    3aba:	f043 030c 	orr.w	r3, r3, #12
    3abe:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3ac0:	2304      	movs	r3, #4
    3ac2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3ac4:	7893      	ldrb	r3, [r2, #2]
    3ac6:	f013 0f03 	tst.w	r3, #3
    3aca:	d1fb      	bne.n	3ac4 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3acc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ad0:	4a05      	ldr	r2, [pc, #20]	; (3ae8 <_usb_d_dev_init+0xec>)
    3ad2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3ad4:	2201      	movs	r2, #1
    3ad6:	811a      	strh	r2, [r3, #8]
}
    3ad8:	2000      	movs	r0, #0
    3ada:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3adc:	2109      	movs	r1, #9
    3ade:	e7d4      	b.n	3a8a <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    3ae0:	2319      	movs	r3, #25
    3ae2:	e7d6      	b.n	3a92 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    3ae4:	2206      	movs	r2, #6
    3ae6:	e7d8      	b.n	3a9a <_usb_d_dev_init+0x9e>
    3ae8:	20000760 	.word	0x20000760
    3aec:	00003189 	.word	0x00003189
    3af0:	000033cd 	.word	0x000033cd
    3af4:	00800084 	.word	0x00800084

00003af8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3af8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3afc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3afe:	f013 0f03 	tst.w	r3, #3
    3b02:	d129      	bne.n	3b58 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3b04:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b08:	7893      	ldrb	r3, [r2, #2]
    3b0a:	f013 0f03 	tst.w	r3, #3
    3b0e:	d1fb      	bne.n	3b08 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3b10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3b18:	f013 0f02 	tst.w	r3, #2
    3b1c:	d108      	bne.n	3b30 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3b1e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3b22:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b26:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3b28:	7893      	ldrb	r3, [r2, #2]
    3b2a:	f013 0f03 	tst.w	r3, #3
    3b2e:	d1fb      	bne.n	3b28 <_usb_d_dev_enable+0x30>
    3b30:	4b0b      	ldr	r3, [pc, #44]	; (3b60 <_usb_d_dev_enable+0x68>)
    3b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b36:	609a      	str	r2, [r3, #8]
    3b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3b3c:	609a      	str	r2, [r3, #8]
    3b3e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3b42:	609a      	str	r2, [r3, #8]
    3b44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3b48:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3b4a:	f240 228d 	movw	r2, #653	; 0x28d
    3b4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b52:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3b54:	2000      	movs	r0, #0
    3b56:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3b58:	f06f 0010 	mvn.w	r0, #16
}
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop
    3b60:	e000e100 	.word	0xe000e100

00003b64 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3b64:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b68:	8913      	ldrh	r3, [r2, #8]
    3b6a:	f023 0301 	bic.w	r3, r3, #1
    3b6e:	041b      	lsls	r3, r3, #16
    3b70:	0c1b      	lsrs	r3, r3, #16
    3b72:	8113      	strh	r3, [r2, #8]
    3b74:	4770      	bx	lr

00003b76 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3b76:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3b7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b7e:	7298      	strb	r0, [r3, #10]
    3b80:	4770      	bx	lr
	...

00003b84 <_usb_d_dev_ep_init>:
{
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b86:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b8a:	f010 050f 	ands.w	r5, r0, #15
    3b8e:	d04d      	beq.n	3c2c <_usb_d_dev_ep_init+0xa8>
    3b90:	f1be 0f00 	cmp.w	lr, #0
    3b94:	bfb4      	ite	lt
    3b96:	1cac      	addlt	r4, r5, #2
    3b98:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3b9a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3b9e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3ba0:	2d02      	cmp	r5, #2
    3ba2:	d947      	bls.n	3c34 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3ba4:	f06f 0011 	mvn.w	r0, #17
    3ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3baa:	f1be 0f00 	cmp.w	lr, #0
    3bae:	db1b      	blt.n	3be8 <_usb_d_dev_ep_init+0x64>
    3bb0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3bb4:	4e37      	ldr	r6, [pc, #220]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3bb6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3bba:	2d00      	cmp	r5, #0
    3bbc:	d15e      	bne.n	3c7c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3bbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bc2:	4d34      	ldr	r5, [pc, #208]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3bc4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3bc8:	4d33      	ldr	r5, [pc, #204]	; (3c98 <_usb_d_dev_ep_init+0x114>)
    3bca:	00a6      	lsls	r6, r4, #2
    3bcc:	1933      	adds	r3, r6, r4
    3bce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3bd2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    3bd6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    3bda:	3101      	adds	r1, #1
    3bdc:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    3be0:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    3be4:	2000      	movs	r0, #0
    3be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3be8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3bec:	4e29      	ldr	r6, [pc, #164]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3bee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3bf2:	686d      	ldr	r5, [r5, #4]
    3bf4:	b935      	cbnz	r5, 3c04 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3bf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bfa:	4d26      	ldr	r5, [pc, #152]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3bfc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3c00:	685f      	ldr	r7, [r3, #4]
    3c02:	e7e1      	b.n	3bc8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3c04:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3c08:	4e22      	ldr	r6, [pc, #136]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3c0a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3c0e:	896d      	ldrh	r5, [r5, #10]
    3c10:	4295      	cmp	r5, r2
    3c12:	daf0      	bge.n	3bf6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    3c14:	f06f 0012 	mvn.w	r0, #18
    3c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    3c1a:	f06f 0013 	mvn.w	r0, #19
    3c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3c20:	f06f 0013 	mvn.w	r0, #19
    3c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    3c26:	f06f 0012 	mvn.w	r0, #18
    3c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3c2c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3c30:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3c32:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    3c34:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    3c38:	4f17      	ldr	r7, [pc, #92]	; (3c98 <_usb_d_dev_ep_init+0x114>)
    3c3a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3c3e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    3c42:	2eff      	cmp	r6, #255	; 0xff
    3c44:	d1e9      	bne.n	3c1a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3c46:	2900      	cmp	r1, #0
    3c48:	d1af      	bne.n	3baa <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c4a:	b125      	cbz	r5, 3c56 <_usb_d_dev_ep_init+0xd2>
    3c4c:	f1be 0f00 	cmp.w	lr, #0
    3c50:	bfa4      	itt	ge
    3c52:	3502      	addge	r5, #2
    3c54:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    3c56:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3c5a:	4e0f      	ldr	r6, [pc, #60]	; (3c98 <_usb_d_dev_ep_init+0x114>)
    3c5c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3c60:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    3c64:	2dff      	cmp	r5, #255	; 0xff
    3c66:	d1db      	bne.n	3c20 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3c68:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3c6c:	4e09      	ldr	r6, [pc, #36]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3c6e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3c72:	2d00      	cmp	r5, #0
    3c74:	d0d7      	beq.n	3c26 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3c76:	f1be 0f00 	cmp.w	lr, #0
    3c7a:	dbb5      	blt.n	3be8 <_usb_d_dev_ep_init+0x64>
    3c7c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3c80:	4e04      	ldr	r6, [pc, #16]	; (3c94 <_usb_d_dev_ep_init+0x110>)
    3c82:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3c86:	892d      	ldrh	r5, [r5, #8]
    3c88:	4295      	cmp	r5, r2
    3c8a:	da98      	bge.n	3bbe <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3c8c:	f06f 0012 	mvn.w	r0, #18
    3c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c92:	bf00      	nop
    3c94:	0000639c 	.word	0x0000639c
    3c98:	20000760 	.word	0x20000760

00003c9c <_usb_d_dev_ep_deinit>:
{
    3c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3ca0:	f010 060f 	ands.w	r6, r0, #15
    3ca4:	d00e      	beq.n	3cc4 <_usb_d_dev_ep_deinit+0x28>
    3ca6:	2f00      	cmp	r7, #0
    3ca8:	bfb4      	ite	lt
    3caa:	1cb3      	addlt	r3, r6, #2
    3cac:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3cae:	2e02      	cmp	r6, #2
    3cb0:	d900      	bls.n	3cb4 <_usb_d_dev_ep_deinit+0x18>
    3cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3cb4:	461d      	mov	r5, r3
    3cb6:	3301      	adds	r3, #1
    3cb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3cbc:	4a24      	ldr	r2, [pc, #144]	; (3d50 <_usb_d_dev_ep_deinit+0xb4>)
    3cbe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    3cc2:	e002      	b.n	3cca <_usb_d_dev_ep_deinit+0x2e>
    3cc4:	f8df e094 	ldr.w	lr, [pc, #148]	; 3d5c <_usb_d_dev_ep_deinit+0xc0>
    3cc8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3cca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cce:	4a21      	ldr	r2, [pc, #132]	; (3d54 <_usb_d_dev_ep_deinit+0xb8>)
    3cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cd4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    3cd8:	2aff      	cmp	r2, #255	; 0xff
    3cda:	d0ea      	beq.n	3cb2 <_usb_d_dev_ep_deinit+0x16>
    3cdc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3cde:	2203      	movs	r2, #3
    3ce0:	0ff9      	lsrs	r1, r7, #31
    3ce2:	4670      	mov	r0, lr
    3ce4:	4b1c      	ldr	r3, [pc, #112]	; (3d58 <_usb_d_dev_ep_deinit+0xbc>)
    3ce6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3ce8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cec:	4a19      	ldr	r2, [pc, #100]	; (3d54 <_usb_d_dev_ep_deinit+0xb8>)
    3cee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cf2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3cf6:	f003 0307 	and.w	r3, r3, #7
    3cfa:	2b01      	cmp	r3, #1
    3cfc:	d016      	beq.n	3d2c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    3cfe:	2f00      	cmp	r7, #0
    3d00:	db1b      	blt.n	3d3a <_usb_d_dev_ep_deinit+0x9e>
    3d02:	0160      	lsls	r0, r4, #5
    3d04:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3d08:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3d0c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3d10:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    3d14:	4b0f      	ldr	r3, [pc, #60]	; (3d54 <_usb_d_dev_ep_deinit+0xb8>)
    3d16:	00aa      	lsls	r2, r5, #2
    3d18:	1951      	adds	r1, r2, r5
    3d1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3d1e:	2000      	movs	r0, #0
    3d20:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    3d24:	22ff      	movs	r2, #255	; 0xff
    3d26:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    3d2a:	e7c2      	b.n	3cb2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3d2c:	0160      	lsls	r0, r4, #5
    3d2e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3d32:	2300      	movs	r3, #0
    3d34:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3d38:	e7ec      	b.n	3d14 <_usb_d_dev_ep_deinit+0x78>
    3d3a:	0176      	lsls	r6, r6, #5
    3d3c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3d40:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    3d44:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3d48:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    3d4c:	e7e2      	b.n	3d14 <_usb_d_dev_ep_deinit+0x78>
    3d4e:	bf00      	nop
    3d50:	200007c0 	.word	0x200007c0
    3d54:	20000760 	.word	0x20000760
    3d58:	00003261 	.word	0x00003261
    3d5c:	200007d4 	.word	0x200007d4

00003d60 <_usb_d_dev_ep_enable>:
{
    3d60:	b4f0      	push	{r4, r5, r6, r7}
    3d62:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3d64:	f010 000f 	ands.w	r0, r0, #15
    3d68:	f000 80a7 	beq.w	3eba <_usb_d_dev_ep_enable+0x15a>
    3d6c:	2e00      	cmp	r6, #0
    3d6e:	bfb4      	ite	lt
    3d70:	1c83      	addlt	r3, r0, #2
    3d72:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3d74:	4605      	mov	r5, r0
    3d76:	0142      	lsls	r2, r0, #5
    3d78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3d7c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3d80:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d82:	2802      	cmp	r0, #2
    3d84:	f240 80a0 	bls.w	3ec8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    3d88:	f06f 0011 	mvn.w	r0, #17
    3d8c:	e07d      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3d8e:	f014 0f77 	tst.w	r4, #119	; 0x77
    3d92:	f040 8089 	bne.w	3ea8 <_usb_d_dev_ep_enable+0x148>
    3d96:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3d9a:	2111      	movs	r1, #17
    3d9c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3da0:	4c9b      	ldr	r4, [pc, #620]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3da2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    3da6:	f8b1 1084 	ldrh.w	r1, [r1, #132]	; 0x84
    3daa:	4c9a      	ldr	r4, [pc, #616]	; (4014 <_usb_d_dev_ep_enable+0x2b4>)
    3dac:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3db0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3db4:	f200 80cd 	bhi.w	3f52 <_usb_d_dev_ep_enable+0x1f2>
    3db8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3dbc:	f200 8112 	bhi.w	3fe4 <_usb_d_dev_ep_enable+0x284>
    3dc0:	2980      	cmp	r1, #128	; 0x80
    3dc2:	f200 8101 	bhi.w	3fc8 <_usb_d_dev_ep_enable+0x268>
    3dc6:	2940      	cmp	r1, #64	; 0x40
    3dc8:	f200 8113 	bhi.w	3ff2 <_usb_d_dev_ep_enable+0x292>
    3dcc:	2920      	cmp	r1, #32
    3dce:	f200 8102 	bhi.w	3fd6 <_usb_d_dev_ep_enable+0x276>
    3dd2:	2910      	cmp	r1, #16
    3dd4:	f200 8114 	bhi.w	4000 <_usb_d_dev_ep_enable+0x2a0>
    3dd8:	2908      	cmp	r1, #8
    3dda:	bf94      	ite	ls
    3ddc:	2600      	movls	r6, #0
    3dde:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3de0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3de4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3de6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    3dea:	e0b8      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3dec:	f014 0f70 	tst.w	r4, #112	; 0x70
    3df0:	d15d      	bne.n	3eae <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3df2:	4e87      	ldr	r6, [pc, #540]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3df4:	009f      	lsls	r7, r3, #2
    3df6:	18f9      	adds	r1, r7, r3
    3df8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3dfc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3e00:	0109      	lsls	r1, r1, #4
    3e02:	f001 0170 	and.w	r1, r1, #112	; 0x70
    3e06:	430c      	orrs	r4, r1
    3e08:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3e0c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e10:	443b      	add	r3, r7
    3e12:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    3e16:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
    3e1a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e22:	d80f      	bhi.n	3e44 <_usb_d_dev_ep_enable+0xe4>
    3e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e28:	d819      	bhi.n	3e5e <_usb_d_dev_ep_enable+0xfe>
    3e2a:	2b80      	cmp	r3, #128	; 0x80
    3e2c:	d819      	bhi.n	3e62 <_usb_d_dev_ep_enable+0x102>
    3e2e:	2b40      	cmp	r3, #64	; 0x40
    3e30:	d819      	bhi.n	3e66 <_usb_d_dev_ep_enable+0x106>
    3e32:	2b20      	cmp	r3, #32
    3e34:	d819      	bhi.n	3e6a <_usb_d_dev_ep_enable+0x10a>
    3e36:	2b10      	cmp	r3, #16
    3e38:	d819      	bhi.n	3e6e <_usb_d_dev_ep_enable+0x10e>
    3e3a:	2b08      	cmp	r3, #8
    3e3c:	bf94      	ite	ls
    3e3e:	2300      	movls	r3, #0
    3e40:	2301      	movhi	r3, #1
    3e42:	e000      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e44:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e46:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    3e4a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e4c:	2380      	movs	r3, #128	; 0x80
    3e4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3e52:	4b6f      	ldr	r3, [pc, #444]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3e54:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    3e58:	2000      	movs	r0, #0
    3e5a:	76a8      	strb	r0, [r5, #26]
    3e5c:	e015      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e5e:	2306      	movs	r3, #6
    3e60:	e7f1      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e62:	2305      	movs	r3, #5
    3e64:	e7ef      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e66:	2304      	movs	r3, #4
    3e68:	e7ed      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e6a:	2303      	movs	r3, #3
    3e6c:	e7eb      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e6e:	2302      	movs	r3, #2
    3e70:	e7e9      	b.n	3e46 <_usb_d_dev_ep_enable+0xe6>
    3e72:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e74:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e78:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e7a:	2340      	movs	r3, #64	; 0x40
    3e7c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3e80:	4b63      	ldr	r3, [pc, #396]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3e82:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    3e86:	2000      	movs	r0, #0
    3e88:	72a8      	strb	r0, [r5, #10]
}
    3e8a:	bcf0      	pop	{r4, r5, r6, r7}
    3e8c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e8e:	2106      	movs	r1, #6
    3e90:	e7f0      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
    3e92:	2105      	movs	r1, #5
    3e94:	e7ee      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
    3e96:	2104      	movs	r1, #4
    3e98:	e7ec      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
    3e9a:	2103      	movs	r1, #3
    3e9c:	e7ea      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
    3e9e:	2102      	movs	r1, #2
    3ea0:	e7e8      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3ea2:	f06f 0011 	mvn.w	r0, #17
    3ea6:	e7f0      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    3ea8:	f06f 0013 	mvn.w	r0, #19
    3eac:	e7ed      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    3eae:	f06f 0013 	mvn.w	r0, #19
    3eb2:	e7ea      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    3eb4:	f06f 0013 	mvn.w	r0, #19
    3eb8:	e7e7      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3eba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ebe:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3ec2:	b2e4      	uxtb	r4, r4
    3ec4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    3ec6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3ec8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3ecc:	4950      	ldr	r1, [pc, #320]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3ece:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3ed2:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3ed6:	2aff      	cmp	r2, #255	; 0xff
    3ed8:	d0e3      	beq.n	3ea2 <_usb_d_dev_ep_enable+0x142>
    3eda:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3edc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3ede:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    3ee2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    3ee6:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3eea:	f001 0107 	and.w	r1, r1, #7
    3eee:	2901      	cmp	r1, #1
    3ef0:	f43f af4d 	beq.w	3d8e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    3ef4:	2e00      	cmp	r6, #0
    3ef6:	f6ff af79 	blt.w	3dec <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3efa:	f014 0f07 	tst.w	r4, #7
    3efe:	d1d9      	bne.n	3eb4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3f00:	4e43      	ldr	r6, [pc, #268]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3f02:	009f      	lsls	r7, r3, #2
    3f04:	18f9      	adds	r1, r7, r3
    3f06:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3f0a:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3f0e:	f001 0107 	and.w	r1, r1, #7
    3f12:	430c      	orrs	r4, r1
    3f14:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3f18:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f1c:	443b      	add	r3, r7
    3f1e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    3f22:	f8b6 1084 	ldrh.w	r1, [r6, #132]	; 0x84
    3f26:	4b3b      	ldr	r3, [pc, #236]	; (4014 <_usb_d_dev_ep_enable+0x2b4>)
    3f28:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3f30:	d89f      	bhi.n	3e72 <_usb_d_dev_ep_enable+0x112>
    3f32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3f36:	d8aa      	bhi.n	3e8e <_usb_d_dev_ep_enable+0x12e>
    3f38:	2980      	cmp	r1, #128	; 0x80
    3f3a:	d8aa      	bhi.n	3e92 <_usb_d_dev_ep_enable+0x132>
    3f3c:	2940      	cmp	r1, #64	; 0x40
    3f3e:	d8aa      	bhi.n	3e96 <_usb_d_dev_ep_enable+0x136>
    3f40:	2920      	cmp	r1, #32
    3f42:	d8aa      	bhi.n	3e9a <_usb_d_dev_ep_enable+0x13a>
    3f44:	2910      	cmp	r1, #16
    3f46:	d8aa      	bhi.n	3e9e <_usb_d_dev_ep_enable+0x13e>
    3f48:	2908      	cmp	r1, #8
    3f4a:	bf94      	ite	ls
    3f4c:	2100      	movls	r1, #0
    3f4e:	2101      	movhi	r1, #1
    3f50:	e790      	b.n	3e74 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f52:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f56:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f58:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f5c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f5e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    3f62:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f64:	2640      	movs	r6, #64	; 0x40
    3f66:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f6a:	2180      	movs	r1, #128	; 0x80
    3f6c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3f70:	4f27      	ldr	r7, [pc, #156]	; (4010 <_usb_d_dev_ep_enable+0x2b0>)
    3f72:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    3f76:	2000      	movs	r0, #0
    3f78:	72a8      	strb	r0, [r5, #10]
    3f7a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f7c:	009c      	lsls	r4, r3, #2
    3f7e:	18e1      	adds	r1, r4, r3
    3f80:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    3f84:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    3f88:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3f8c:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3f90:	0152      	lsls	r2, r2, #5
    3f92:	18b9      	adds	r1, r7, r2
    3f94:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3f96:	4423      	add	r3, r4
    3f98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3f9c:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
    3fa0:	684b      	ldr	r3, [r1, #4]
    3fa2:	f364 339b 	bfi	r3, r4, #14, #14
    3fa6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3fa8:	684b      	ldr	r3, [r1, #4]
    3faa:	f360 030d 	bfi	r3, r0, #0, #14
    3fae:	604b      	str	r3, [r1, #4]
    3fb0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    3fb4:	21b0      	movs	r1, #176	; 0xb0
    3fb6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3fba:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3fbe:	461a      	mov	r2, r3
    3fc0:	2310      	movs	r3, #16
    3fc2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    3fc6:	e760      	b.n	3e8a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fc8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fcc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fce:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fd2:	2605      	movs	r6, #5
    3fd4:	e7c3      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fd6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fda:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fdc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fe0:	2603      	movs	r6, #3
    3fe2:	e7bc      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fe4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3fe8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3fea:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3fee:	2606      	movs	r6, #6
    3ff0:	e7b5      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ff2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ff6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ff8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3ffc:	2604      	movs	r6, #4
    3ffe:	e7ae      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4000:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4004:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4006:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    400a:	2602      	movs	r6, #2
    400c:	e7a7      	b.n	3f5e <_usb_d_dev_ep_enable+0x1fe>
    400e:	bf00      	nop
    4010:	20000760 	.word	0x20000760
    4014:	0fffc000 	.word	0x0fffc000

00004018 <_usb_d_dev_ep_stall>:
{
    4018:	b470      	push	{r4, r5, r6}
    401a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    401c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    401e:	f010 000f 	ands.w	r0, r0, #15
    4022:	d008      	beq.n	4036 <_usb_d_dev_ep_stall+0x1e>
    4024:	2b00      	cmp	r3, #0
    4026:	bfb4      	ite	lt
    4028:	1c83      	addlt	r3, r0, #2
    402a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    402c:	2802      	cmp	r0, #2
    402e:	d903      	bls.n	4038 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4030:	f06f 0011 	mvn.w	r0, #17
    4034:	e018      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4036:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4038:	2901      	cmp	r1, #1
    403a:	d017      	beq.n	406c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    403c:	2900      	cmp	r1, #0
    403e:	d03a      	beq.n	40b6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4044:	4a45      	ldr	r2, [pc, #276]	; (415c <_usb_d_dev_ep_stall+0x144>)
    4046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    404a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    404e:	f003 030f 	and.w	r3, r3, #15
    4052:	015b      	lsls	r3, r3, #5
    4054:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4058:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    405c:	2310      	movs	r3, #16
    405e:	40a3      	lsls	r3, r4
    4060:	421a      	tst	r2, r3
    4062:	bf14      	ite	ne
    4064:	2001      	movne	r0, #1
    4066:	2000      	moveq	r0, #0
}
    4068:	bc70      	pop	{r4, r5, r6}
    406a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    406c:	2510      	movs	r5, #16
    406e:	40a5      	lsls	r5, r4
    4070:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4072:	493a      	ldr	r1, [pc, #232]	; (415c <_usb_d_dev_ep_stall+0x144>)
    4074:	009e      	lsls	r6, r3, #2
    4076:	18f2      	adds	r2, r6, r3
    4078:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    407c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4080:	f002 020f 	and.w	r2, r2, #15
    4084:	0150      	lsls	r0, r2, #5
    4086:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    408a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    408e:	2020      	movs	r0, #32
    4090:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4094:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4096:	0152      	lsls	r2, r2, #5
    4098:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    409c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    40a0:	4433      	add	r3, r6
    40a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    40a6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    40aa:	f042 0208 	orr.w	r2, r2, #8
    40ae:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    40b2:	2000      	movs	r0, #0
    40b4:	e7d8      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    40b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    40ba:	4928      	ldr	r1, [pc, #160]	; (415c <_usb_d_dev_ep_stall+0x144>)
    40bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    40c0:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    40c4:	f002 020f 	and.w	r2, r2, #15
    40c8:	0151      	lsls	r1, r2, #5
    40ca:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    40ce:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    40d2:	2010      	movs	r0, #16
    40d4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    40d6:	4205      	tst	r5, r0
    40d8:	d03c      	beq.n	4154 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    40da:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    40dc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    40e0:	2020      	movs	r0, #32
    40e2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    40e4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    40e6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    40ea:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    40ee:	4202      	tst	r2, r0
    40f0:	d007      	beq.n	4102 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40f2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    40f6:	2201      	movs	r2, #1
    40f8:	fa02 f404 	lsl.w	r4, r2, r4
    40fc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    40fe:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4102:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4106:	4815      	ldr	r0, [pc, #84]	; (415c <_usb_d_dev_ep_stall+0x144>)
    4108:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    410c:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    4110:	f002 0207 	and.w	r2, r2, #7
    4114:	2a01      	cmp	r2, #1
    4116:	d00c      	beq.n	4132 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    4118:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    411c:	4a0f      	ldr	r2, [pc, #60]	; (415c <_usb_d_dev_ep_stall+0x144>)
    411e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4122:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4126:	f36f 02c3 	bfc	r2, #3, #1
    412a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    412e:	2000      	movs	r0, #0
    4130:	e79a      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4132:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4136:	f012 0f30 	tst.w	r2, #48	; 0x30
    413a:	d10d      	bne.n	4158 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    413c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4140:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    4144:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4148:	f36f 02c3 	bfc	r2, #3, #1
    414c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4150:	2000      	movs	r0, #0
    4152:	e789      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
    4154:	2000      	movs	r0, #0
    4156:	e787      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
    4158:	2000      	movs	r0, #0
    415a:	e785      	b.n	4068 <_usb_d_dev_ep_stall+0x50>
    415c:	20000760 	.word	0x20000760

00004160 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4160:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    4162:	f000 040f 	and.w	r4, r0, #15
    4166:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4168:	4a14      	ldr	r2, [pc, #80]	; (41bc <_usb_d_dev_ep_read_req+0x5c>)
    416a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    416c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    416e:	6840      	ldr	r0, [r0, #4]
    4170:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4174:	2c02      	cmp	r4, #2
    4176:	d817      	bhi.n	41a8 <_usb_d_dev_ep_read_req+0x48>
    4178:	b1c9      	cbz	r1, 41ae <_usb_d_dev_ep_read_req+0x4e>
    417a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    417e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    4182:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4184:	2a11      	cmp	r2, #17
    4186:	d115      	bne.n	41b4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4188:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    418c:	f012 0f10 	tst.w	r2, #16
    4190:	d102      	bne.n	4198 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    4192:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4194:	bc30      	pop	{r4, r5}
    4196:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    4198:	682c      	ldr	r4, [r5, #0]
    419a:	686a      	ldr	r2, [r5, #4]
    419c:	600c      	str	r4, [r1, #0]
    419e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    41a0:	2210      	movs	r2, #16
    41a2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    41a6:	e7f5      	b.n	4194 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    41a8:	f06f 0011 	mvn.w	r0, #17
    41ac:	e7f2      	b.n	4194 <_usb_d_dev_ep_read_req+0x34>
    41ae:	f06f 0011 	mvn.w	r0, #17
    41b2:	e7ef      	b.n	4194 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    41b4:	f06f 0012 	mvn.w	r0, #18
    41b8:	e7ec      	b.n	4194 <_usb_d_dev_ep_read_req+0x34>
    41ba:	bf00      	nop
    41bc:	20000760 	.word	0x20000760

000041c0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    41c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41c4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    41c6:	7a03      	ldrb	r3, [r0, #8]
    41c8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    41ca:	f013 030f 	ands.w	r3, r3, #15
    41ce:	f000 80c2 	beq.w	4356 <_usb_d_dev_ep_trans+0x196>
    41d2:	2e00      	cmp	r6, #0
    41d4:	bfb4      	ite	lt
    41d6:	1c9a      	addlt	r2, r3, #2
    41d8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    41da:	4614      	mov	r4, r2
    41dc:	4969      	ldr	r1, [pc, #420]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    41de:	f101 0760 	add.w	r7, r1, #96	; 0x60
    41e2:	1c55      	adds	r5, r2, #1
    41e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    41e8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    41ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    41f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    41f4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    41f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    41fc:	428a      	cmp	r2, r1
    41fe:	d025      	beq.n	424c <_usb_d_dev_ep_trans+0x8c>
    4200:	1e55      	subs	r5, r2, #1
    4202:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    4204:	6841      	ldr	r1, [r0, #4]
    4206:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4208:	2b02      	cmp	r3, #2
    420a:	f200 8092 	bhi.w	4332 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    420e:	6803      	ldr	r3, [r0, #0]
    4210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4214:	d31c      	bcc.n	4250 <_usb_d_dev_ep_trans+0x90>
    4216:	eb03 0c01 	add.w	ip, r3, r1
    421a:	f8df e180 	ldr.w	lr, [pc, #384]	; 439c <_usb_d_dev_ep_trans+0x1dc>
    421e:	45f4      	cmp	ip, lr
    4220:	d816      	bhi.n	4250 <_usb_d_dev_ep_trans+0x90>
    4222:	f013 0f03 	tst.w	r3, #3
    4226:	d113      	bne.n	4250 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    4228:	2e00      	cmp	r6, #0
    422a:	db2a      	blt.n	4282 <_usb_d_dev_ep_trans+0xc2>
    422c:	428a      	cmp	r2, r1
    422e:	f200 809c 	bhi.w	436a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    4232:	b34d      	cbz	r5, 4288 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    4234:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4238:	4a52      	ldr	r2, [pc, #328]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    423a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4242:	2b00      	cmp	r3, #0
    4244:	d07b      	beq.n	433e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    4246:	f04f 0800 	mov.w	r8, #0
    424a:	e00c      	b.n	4266 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    424c:	4615      	mov	r5, r2
    424e:	e7d9      	b.n	4204 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4250:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4254:	4a4b      	ldr	r2, [pc, #300]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    4256:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    425e:	2b00      	cmp	r3, #0
    4260:	d06a      	beq.n	4338 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    4262:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4266:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    426a:	4a46      	ldr	r2, [pc, #280]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    426c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4270:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4274:	f013 0f08 	tst.w	r3, #8
    4278:	d009      	beq.n	428e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    427a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    427c:	b003      	add	sp, #12
    427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    4282:	f04f 0800 	mov.w	r8, #0
    4286:	e7ee      	b.n	4266 <_usb_d_dev_ep_trans+0xa6>
    4288:	f04f 0800 	mov.w	r8, #0
    428c:	e7eb      	b.n	4266 <_usb_d_dev_ep_trans+0xa6>
    428e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    4290:	a801      	add	r0, sp, #4
    4292:	4b3d      	ldr	r3, [pc, #244]	; (4388 <_usb_d_dev_ep_trans+0x1c8>)
    4294:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4296:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    429a:	4a3a      	ldr	r2, [pc, #232]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    429c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42a0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    42a4:	f013 0f40 	tst.w	r3, #64	; 0x40
    42a8:	d13c      	bne.n	4324 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    42aa:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    42ae:	4b35      	ldr	r3, [pc, #212]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    42b0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    42b4:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    42b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    42bc:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    42c0:	a801      	add	r0, sp, #4
    42c2:	4b32      	ldr	r3, [pc, #200]	; (438c <_usb_d_dev_ep_trans+0x1cc>)
    42c4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    42c6:	f8da 3000 	ldr.w	r3, [sl]
    42ca:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    42ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    42d2:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    42d6:	2300      	movs	r3, #0
    42d8:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    42dc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    42de:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    42e2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    42e6:	f368 1345 	bfi	r3, r8, #5, #1
    42ea:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    42ee:	f89a 3009 	ldrb.w	r3, [sl, #9]
    42f2:	b1e3      	cbz	r3, 432e <_usb_d_dev_ep_trans+0x16e>
    42f4:	fab5 f585 	clz	r5, r5
    42f8:	096d      	lsrs	r5, r5, #5
    42fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    42fe:	4b21      	ldr	r3, [pc, #132]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    4300:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4304:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    4308:	f365 1304 	bfi	r3, r5, #4, #1
    430c:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    4310:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    4312:	f04f 0100 	mov.w	r1, #0
    4316:	4638      	mov	r0, r7
    4318:	bfb4      	ite	lt
    431a:	4b1d      	ldrlt	r3, [pc, #116]	; (4390 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    431c:	4b1d      	ldrge	r3, [pc, #116]	; (4394 <_usb_d_dev_ep_trans+0x1d4>)
    431e:	4798      	blx	r3
	return ERR_NONE;
    4320:	2000      	movs	r0, #0
    4322:	e7ab      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    4324:	a801      	add	r0, sp, #4
    4326:	4b19      	ldr	r3, [pc, #100]	; (438c <_usb_d_dev_ep_trans+0x1cc>)
    4328:	4798      	blx	r3
		return USB_BUSY;
    432a:	2001      	movs	r0, #1
    432c:	e7a6      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
    432e:	2500      	movs	r5, #0
    4330:	e7e3      	b.n	42fa <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    4332:	f06f 0011 	mvn.w	r0, #17
    4336:	e7a1      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4338:	f06f 0012 	mvn.w	r0, #18
    433c:	e79e      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    433e:	f06f 0011 	mvn.w	r0, #17
    4342:	e79b      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4344:	f06f 0012 	mvn.w	r0, #18
    4348:	e798      	b.n	427c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    434a:	6841      	ldr	r1, [r0, #4]
    434c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    4350:	4f11      	ldr	r7, [pc, #68]	; (4398 <_usb_d_dev_ep_trans+0x1d8>)
    4352:	2400      	movs	r4, #0
    4354:	e75b      	b.n	420e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4356:	4a0b      	ldr	r2, [pc, #44]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    4358:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    435c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4360:	428a      	cmp	r2, r1
    4362:	d0f2      	beq.n	434a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    4364:	4f0c      	ldr	r7, [pc, #48]	; (4398 <_usb_d_dev_ep_trans+0x1d8>)
    4366:	2400      	movs	r4, #0
    4368:	e74a      	b.n	4200 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    436a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    436e:	4a05      	ldr	r2, [pc, #20]	; (4384 <_usb_d_dev_ep_trans+0x1c4>)
    4370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4378:	2b00      	cmp	r3, #0
    437a:	d0e3      	beq.n	4344 <_usb_d_dev_ep_trans+0x184>
    437c:	f04f 0801 	mov.w	r8, #1
    4380:	e771      	b.n	4266 <_usb_d_dev_ep_trans+0xa6>
    4382:	bf00      	nop
    4384:	20000760 	.word	0x20000760
    4388:	00000ced 	.word	0x00000ced
    438c:	00000cfb 	.word	0x00000cfb
    4390:	00003411 	.word	0x00003411
    4394:	00003595 	.word	0x00003595
    4398:	200007d4 	.word	0x200007d4
    439c:	20041fff 	.word	0x20041fff

000043a0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    43a0:	4b06      	ldr	r3, [pc, #24]	; (43bc <_usb_d_dev_register_callback+0x1c>)
    43a2:	2900      	cmp	r1, #0
    43a4:	bf08      	it	eq
    43a6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    43a8:	2801      	cmp	r0, #1
    43aa:	d003      	beq.n	43b4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    43ac:	b908      	cbnz	r0, 43b2 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    43ae:	4b04      	ldr	r3, [pc, #16]	; (43c0 <_usb_d_dev_register_callback+0x20>)
    43b0:	6619      	str	r1, [r3, #96]	; 0x60
    43b2:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    43b4:	4b02      	ldr	r3, [pc, #8]	; (43c0 <_usb_d_dev_register_callback+0x20>)
    43b6:	6659      	str	r1, [r3, #100]	; 0x64
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	00003189 	.word	0x00003189
    43c0:	20000760 	.word	0x20000760

000043c4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    43c4:	4b09      	ldr	r3, [pc, #36]	; (43ec <_usb_d_dev_register_ep_callback+0x28>)
    43c6:	2900      	cmp	r1, #0
    43c8:	bf08      	it	eq
    43ca:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    43cc:	4603      	mov	r3, r0
    43ce:	b130      	cbz	r0, 43de <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    43d0:	2801      	cmp	r0, #1
    43d2:	d007      	beq.n	43e4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    43d4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    43d6:	bf04      	itt	eq
    43d8:	4b05      	ldreq	r3, [pc, #20]	; (43f0 <_usb_d_dev_register_ep_callback+0x2c>)
    43da:	6719      	streq	r1, [r3, #112]	; 0x70
    43dc:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    43de:	4b04      	ldr	r3, [pc, #16]	; (43f0 <_usb_d_dev_register_ep_callback+0x2c>)
    43e0:	6699      	str	r1, [r3, #104]	; 0x68
    43e2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    43e4:	4b02      	ldr	r3, [pc, #8]	; (43f0 <_usb_d_dev_register_ep_callback+0x2c>)
    43e6:	66d9      	str	r1, [r3, #108]	; 0x6c
    43e8:	4770      	bx	lr
    43ea:	bf00      	nop
    43ec:	00003189 	.word	0x00003189
    43f0:	20000760 	.word	0x20000760

000043f4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    43f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    43f6:	4b01      	ldr	r3, [pc, #4]	; (43fc <USB_0_Handler+0x8>)
    43f8:	4798      	blx	r3
    43fa:	bd08      	pop	{r3, pc}
    43fc:	00003785 	.word	0x00003785

00004400 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    4400:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4402:	4b01      	ldr	r3, [pc, #4]	; (4408 <USB_1_Handler+0x8>)
    4404:	4798      	blx	r3
    4406:	bd08      	pop	{r3, pc}
    4408:	00003785 	.word	0x00003785

0000440c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    440c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    440e:	4b01      	ldr	r3, [pc, #4]	; (4414 <USB_2_Handler+0x8>)
    4410:	4798      	blx	r3
    4412:	bd08      	pop	{r3, pc}
    4414:	00003785 	.word	0x00003785

00004418 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    4418:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    441a:	4b01      	ldr	r3, [pc, #4]	; (4420 <USB_3_Handler+0x8>)
    441c:	4798      	blx	r3
    441e:	bd08      	pop	{r3, pc}
    4420:	00003785 	.word	0x00003785

00004424 <convert_cb_ADC_0>:
	volatile static uint8_t ADC_0_conversion_ready = 0;
	volatile static uint8_t ADC_1_conversion_ready = 0;

	static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
	{
		ADC_0_conversion_ready = 1;
    4424:	2201      	movs	r2, #1
    4426:	4b01      	ldr	r3, [pc, #4]	; (442c <convert_cb_ADC_0+0x8>)
    4428:	701a      	strb	r2, [r3, #0]
    442a:	4770      	bx	lr
    442c:	20000ab0 	.word	0x20000ab0

00004430 <tx_complete_cb_GRID_LED>:


	// DMA SPI CALLBACK
	static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
	{
		dma_spi_done = 1;
    4430:	2201      	movs	r2, #1
    4432:	4b01      	ldr	r3, [pc, #4]	; (4438 <tx_complete_cb_GRID_LED+0x8>)
    4434:	605a      	str	r2, [r3, #4]
    4436:	4770      	bx	lr
    4438:	20000ab0 	.word	0x20000ab0

0000443c <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    443c:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    443e:	4d0d      	ldr	r5, [pc, #52]	; (4474 <grid_led_set_color+0x38>)
    4440:	692d      	ldr	r5, [r5, #16]
    4442:	4285      	cmp	r5, r0
    4444:	d802      	bhi.n	444c <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    4446:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    4448:	bc30      	pop	{r4, r5}
    444a:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    444c:	4c09      	ldr	r4, [pc, #36]	; (4474 <grid_led_set_color+0x38>)
    444e:	6965      	ldr	r5, [r4, #20]
    4450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4454:	0080      	lsls	r0, r0, #2
    4456:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    445a:	6992      	ldr	r2, [r2, #24]
    445c:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    445e:	4428      	add	r0, r5
    4460:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    4464:	698a      	ldr	r2, [r1, #24]
    4466:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    4468:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    446c:	69a3      	ldr	r3, [r4, #24]
    446e:	6083      	str	r3, [r0, #8]
		return 0;
    4470:	2000      	movs	r0, #0
    4472:	e7e9      	b.n	4448 <grid_led_set_color+0xc>
    4474:	20000ab0 	.word	0x20000ab0

00004478 <grid_led_init>:

/** Initialize led buffer for a given number of LEDs */
uint8_t grid_led_init(uint8_t num){
    4478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    447a:	4606      	mov	r6, r0
	
	led_number = num;	
    447c:	4c46      	ldr	r4, [pc, #280]	; (4598 <grid_led_init+0x120>)
    447e:	6120      	str	r0, [r4, #16]
	
	// Allocating memory for the frame buffer
	led_frame_buffer_size = (24 + num*3*4);
    4480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4484:	0080      	lsls	r0, r0, #2
    4486:	3018      	adds	r0, #24
    4488:	60e0      	str	r0, [r4, #12]
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    448a:	4f44      	ldr	r7, [pc, #272]	; (459c <grid_led_init+0x124>)
    448c:	47b8      	blx	r7
    448e:	4605      	mov	r5, r0
    4490:	60a0      	str	r0, [r4, #8]
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[24];
    4492:	f100 0318 	add.w	r3, r0, #24
    4496:	f844 3f14 	str.w	r3, [r4, #20]!
	
	// Allocating memory for the smart buffer (2D array)
	#define led_smart_buffer_layer_number 2
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    449a:	201a      	movs	r0, #26
    449c:	fb00 f006 	mul.w	r0, r0, r6
    44a0:	47b8      	blx	r7
    44a2:	4b3f      	ldr	r3, [pc, #252]	; (45a0 <grid_led_init+0x128>)
    44a4:	6018      	str	r0, [r3, #0]
    44a6:	2200      	movs	r2, #0
    44a8:	b293      	uxth	r3, r2
	
	for(uint16_t i=0; i<256; i++){
		
		uint32_t temp = 0;
		
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    44aa:	f003 0101 	and.w	r1, r3, #1
    44ae:	2900      	cmp	r1, #0
    44b0:	bf14      	ite	ne
    44b2:	f04f 6160 	movne.w	r1, #234881024	; 0xe000000
    44b6:	f04f 6100 	moveq.w	r1, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    44ba:	f3c3 0040 	ubfx	r0, r3, #1, #1
    44be:	2800      	cmp	r0, #0
    44c0:	bf14      	ite	ne
    44c2:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    44c6:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    44ca:	4308      	orrs	r0, r1
		
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    44cc:	f3c3 0180 	ubfx	r1, r3, #2, #1
    44d0:	2900      	cmp	r1, #0
    44d2:	bf14      	ite	ne
    44d4:	f44f 2160 	movne.w	r1, #917504	; 0xe0000
    44d8:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    44dc:	4301      	orrs	r1, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    44de:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    44e2:	2800      	cmp	r0, #0
    44e4:	bf14      	ite	ne
    44e6:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    44ea:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    44ee:	4301      	orrs	r1, r0
		
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    44f0:	f3c3 1000 	ubfx	r0, r3, #4, #1
    44f4:	2800      	cmp	r0, #0
    44f6:	bf14      	ite	ne
    44f8:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    44fc:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    4500:	4308      	orrs	r0, r1
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    4502:	f3c3 1140 	ubfx	r1, r3, #5, #1
    4506:	2900      	cmp	r1, #0
    4508:	bf14      	ite	ne
    450a:	f44f 4160 	movne.w	r1, #57344	; 0xe000
    450e:	f44f 4100 	moveq.w	r1, #32768	; 0x8000
    4512:	4308      	orrs	r0, r1
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    4514:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4518:	2900      	cmp	r1, #0
    451a:	bf14      	ite	ne
    451c:	210e      	movne	r1, #14
    451e:	2108      	moveq	r1, #8
    4520:	4301      	orrs	r1, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    4522:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4526:	2b00      	cmp	r3, #0
    4528:	bf14      	ite	ne
    452a:	23e0      	movne	r3, #224	; 0xe0
    452c:	2380      	moveq	r3, #128	; 0x80
    452e:	430b      	orrs	r3, r1
		
		led_color_code[i] = temp;
    4530:	f844 3f04 	str.w	r3, [r4, #4]!
    4534:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    4536:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    453a:	d1b5      	bne.n	44a8 <grid_led_init+0x30>
    453c:	1e6b      	subs	r3, r5, #1
    453e:	3517      	adds	r5, #23

	// Fill the first 24 bytes with the rr_code (reset)
	// This memory is essentially wasted but allows the entire frame to be sent out using DMA

	for (uint8_t i = 0; i<24; i++){
		led_frame_buffer[i] = LED_CODE_R;
    4540:	2200      	movs	r2, #0
    4542:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<24; i++){
    4546:	42ab      	cmp	r3, r5
    4548:	d1fb      	bne.n	4542 <grid_led_init+0xca>
	}
	
	
	// Fill the rest of the buffer with rgb=(0,0,0);
	for (uint32_t i = 0; i<led_number; i++){
    454a:	b31e      	cbz	r6, 4594 <grid_led_init+0x11c>
    454c:	2400      	movs	r4, #0
		grid_led_set_color(i, 0,0,0);
    454e:	4627      	mov	r7, r4
    4550:	4d14      	ldr	r5, [pc, #80]	; (45a4 <grid_led_init+0x12c>)
    4552:	463b      	mov	r3, r7
    4554:	463a      	mov	r2, r7
    4556:	4639      	mov	r1, r7
    4558:	4620      	mov	r0, r4
    455a:	47a8      	blx	r5
	for (uint32_t i = 0; i<led_number; i++){
    455c:	3401      	adds	r4, #1
    455e:	42a6      	cmp	r6, r4
    4560:	d1f7      	bne.n	4552 <grid_led_init+0xda>

	// READ DEFAULT SETTINGS FROM NVM 
	
	
	// OR FALLBACK TO DEFAULT IF NO CONFIG FOUND 
	for(uint8_t i = 0; i<led_number; i++){
    4562:	b1bc      	cbz	r4, 4594 <grid_led_init+0x11c>
    4564:	2100      	movs	r1, #0



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_min.r = r;
    4566:	4d10      	ldr	r5, [pc, #64]	; (45a8 <grid_led_init+0x130>)
    4568:	f04f 0e1a 	mov.w	lr, #26
    456c:	460a      	mov	r2, r1

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_mid.r = r;
	l_buffer[num][layer].color_mid.g = g;
	l_buffer[num][layer].color_mid.b = b;	
    456e:	2760      	movs	r7, #96	; 0x60

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
	
	l_buffer[num][layer].color_max.r = r;
	l_buffer[num][layer].color_max.g = g;
	l_buffer[num][layer].color_max.b = b;	
    4570:	26e0      	movs	r6, #224	; 0xe0
	l_buffer[num][layer].color_min.r = r;
    4572:	fb0e f001 	mul.w	r0, lr, r1
    4576:	182b      	adds	r3, r5, r0
    4578:	542a      	strb	r2, [r5, r0]
	l_buffer[num][layer].color_min.g = g;
    457a:	705a      	strb	r2, [r3, #1]
	l_buffer[num][layer].color_min.b = b;	
    457c:	709a      	strb	r2, [r3, #2]
	l_buffer[num][layer].color_mid.r = r;
    457e:	70da      	strb	r2, [r3, #3]
	l_buffer[num][layer].color_mid.g = g;
    4580:	711a      	strb	r2, [r3, #4]
	l_buffer[num][layer].color_mid.b = b;	
    4582:	715f      	strb	r7, [r3, #5]
	l_buffer[num][layer].color_max.r = r;
    4584:	719a      	strb	r2, [r3, #6]
	l_buffer[num][layer].color_max.g = g;
    4586:	71da      	strb	r2, [r3, #7]
	l_buffer[num][layer].color_max.b = b;	
    4588:	721e      	strb	r6, [r3, #8]
	l_buffer[num][layer].pha = val;
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	l_buffer[num][layer].fre = val;
    458a:	731a      	strb	r2, [r3, #12]
	for(uint8_t i = 0; i<led_number; i++){
    458c:	3101      	adds	r1, #1
    458e:	b2c9      	uxtb	r1, r1
    4590:	428c      	cmp	r4, r1
    4592:	d8ee      	bhi.n	4572 <grid_led_init+0xfa>
}
    4594:	2000      	movs	r0, #0
    4596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4598:	20000ab0 	.word	0x20000ab0
    459c:	000057b1 	.word	0x000057b1
    45a0:	20001520 	.word	0x20001520
    45a4:	0000443d 	.word	0x0000443d
    45a8:	20001528 	.word	0x20001528

000045ac <grid_led_tick>:
	for (uint32_t j=0; j<led_number; j++){
    45ac:	4b09      	ldr	r3, [pc, #36]	; (45d4 <grid_led_tick+0x28>)
    45ae:	6918      	ldr	r0, [r3, #16]
    45b0:	b170      	cbz	r0, 45d0 <grid_led_tick+0x24>
    45b2:	4b09      	ldr	r3, [pc, #36]	; (45d8 <grid_led_tick+0x2c>)
    45b4:	221a      	movs	r2, #26
    45b6:	fb02 3000 	mla	r0, r2, r0, r3
			l_buffer[j][i].pha += l_buffer[j][i].fre; //PHASE + = FREQUENCY		
    45ba:	7ada      	ldrb	r2, [r3, #11]
    45bc:	7b19      	ldrb	r1, [r3, #12]
    45be:	440a      	add	r2, r1
    45c0:	72da      	strb	r2, [r3, #11]
    45c2:	7e1a      	ldrb	r2, [r3, #24]
    45c4:	7e59      	ldrb	r1, [r3, #25]
    45c6:	440a      	add	r2, r1
    45c8:	761a      	strb	r2, [r3, #24]
    45ca:	331a      	adds	r3, #26
	for (uint32_t j=0; j<led_number; j++){
    45cc:	4298      	cmp	r0, r3
    45ce:	d1f4      	bne.n	45ba <grid_led_tick+0xe>
    45d0:	4770      	bx	lr
    45d2:	bf00      	nop
    45d4:	20000ab0 	.word	0x20000ab0
    45d8:	20001528 	.word	0x20001528

000045dc <grid_led_render>:
}




void grid_led_render(uint32_t num){
    45dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45e0:	4b23      	ldr	r3, [pc, #140]	; (4670 <grid_led_render+0x94>)
    45e2:	241a      	movs	r4, #26
    45e4:	fb04 3400 	mla	r4, r4, r0, r3
    45e8:	2700      	movs	r7, #0
	
	
	uint32_t mix_r = 0;
	uint32_t mix_g = 0;
	uint32_t mix_b = 0;
    45ea:	463b      	mov	r3, r7
	uint32_t mix_g = 0;
    45ec:	463a      	mov	r2, r7
	uint32_t mix_r = 0;
    45ee:	4639      	mov	r1, r7
	for (uint8_t i = 0; i<2; i++){
				
		uint8_t min_r = l_buffer[num][i].color_min.r;
		uint8_t min_g = l_buffer[num][i].color_min.g;
		uint8_t min_b = l_buffer[num][i].color_min.b;
		uint8_t min_a = min_lookup[l_buffer[num][i].pha];
    45f0:	f8df e088 	ldr.w	lr, [pc, #136]	; 467c <grid_led_render+0xa0>
    45f4:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = l_buffer[num][i].color_max.r;
		uint8_t max_g = l_buffer[num][i].color_max.g;
		uint8_t max_b = l_buffer[num][i].color_max.b;
		uint8_t max_a = max_lookup[l_buffer[num][i].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    45f6:	f81e 8006 	ldrb.w	r8, [lr, r6]
		uint8_t mid_a = mid_lookup[l_buffer[num][i].pha];
    45fa:	4476      	add	r6, lr
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    45fc:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    4600:	f896 c200 	ldrb.w	ip, [r6, #512]	; 0x200
    4604:	7826      	ldrb	r6, [r4, #0]
    4606:	f894 9003 	ldrb.w	r9, [r4, #3]
    460a:	fb05 f909 	mul.w	r9, r5, r9
    460e:	fb08 9906 	mla	r9, r8, r6, r9
    4612:	79a6      	ldrb	r6, [r4, #6]
    4614:	fb0c 9606 	mla	r6, ip, r6, r9
    4618:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    461a:	7866      	ldrb	r6, [r4, #1]
    461c:	f894 9004 	ldrb.w	r9, [r4, #4]
    4620:	fb05 f909 	mul.w	r9, r5, r9
    4624:	fb08 9906 	mla	r9, r8, r6, r9
    4628:	79e6      	ldrb	r6, [r4, #7]
    462a:	fb0c 9606 	mla	r6, ip, r6, r9
    462e:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    4630:	78a6      	ldrb	r6, [r4, #2]
    4632:	f894 9005 	ldrb.w	r9, [r4, #5]
    4636:	fb05 f509 	mul.w	r5, r5, r9
    463a:	fb08 5606 	mla	r6, r8, r6, r5
    463e:	7a25      	ldrb	r5, [r4, #8]
    4640:	fb0c 6505 	mla	r5, ip, r5, r6
    4644:	442b      	add	r3, r5
    4646:	3701      	adds	r7, #1
    4648:	340d      	adds	r4, #13
	for (uint8_t i = 0; i<2; i++){
    464a:	2f02      	cmp	r7, #2
    464c:	d1d2      	bne.n	45f4 <grid_led_render+0x18>
	}
	

	mix_r = (mix_r)/2/3/256;
	mix_g = (mix_g)/2/3/256;
	mix_b = (mix_b)/2/3/256;
    464e:	4c09      	ldr	r4, [pc, #36]	; (4674 <grid_led_render+0x98>)
    4650:	fba4 5303 	umull	r5, r3, r4, r3
	mix_g = (mix_g)/2/3/256;
    4654:	fba4 5202 	umull	r5, r2, r4, r2
	mix_r = (mix_r)/2/3/256;
    4658:	fba4 4101 	umull	r4, r1, r4, r1
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    465c:	f3c3 2387 	ubfx	r3, r3, #10, #8
    4660:	f3c2 2287 	ubfx	r2, r2, #10, #8
    4664:	f3c1 2187 	ubfx	r1, r1, #10, #8
    4668:	4c03      	ldr	r4, [pc, #12]	; (4678 <grid_led_render+0x9c>)
    466a:	47a0      	blx	r4
    466c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4670:	20001528 	.word	0x20001528
    4674:	aaaaaaab 	.word	0xaaaaaaab
    4678:	0000443d 	.word	0x0000443d
    467c:	20000000 	.word	0x20000000

00004680 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    4680:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    4682:	4b05      	ldr	r3, [pc, #20]	; (4698 <grid_led_render_all+0x18>)
    4684:	691d      	ldr	r5, [r3, #16]
    4686:	b135      	cbz	r5, 4696 <grid_led_render_all+0x16>
    4688:	2400      	movs	r4, #0
		
		grid_led_render(i);
    468a:	4e04      	ldr	r6, [pc, #16]	; (469c <grid_led_render_all+0x1c>)
    468c:	4620      	mov	r0, r4
    468e:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    4690:	3401      	adds	r4, #1
    4692:	42ac      	cmp	r4, r5
    4694:	d1fa      	bne.n	468c <grid_led_render_all+0xc>
    4696:	bd70      	pop	{r4, r5, r6, pc}
    4698:	20000ab0 	.word	0x20000ab0
    469c:	000045dd 	.word	0x000045dd

000046a0 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    46a0:	b538      	push	{r3, r4, r5, lr}
    46a2:	4604      	mov	r4, r0
    46a4:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    46a6:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    46a8:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    46aa:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    46ac:	2300      	movs	r3, #0
    46ae:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    46b0:	0048      	lsls	r0, r1, #1
    46b2:	4b09      	ldr	r3, [pc, #36]	; (46d8 <grid_ain_channel_init+0x38>)
    46b4:	4798      	blx	r3
    46b6:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    46b8:	b14d      	cbz	r5, 46ce <grid_ain_channel_init+0x2e>
    46ba:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    46bc:	4619      	mov	r1, r3
    46be:	6822      	ldr	r2, [r4, #0]
    46c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    46c4:	3301      	adds	r3, #1
    46c6:	b2db      	uxtb	r3, r3
    46c8:	7922      	ldrb	r2, [r4, #4]
    46ca:	429a      	cmp	r2, r3
    46cc:	d8f7      	bhi.n	46be <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    46ce:	2000      	movs	r0, #0
    46d0:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    46d2:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    46d4:	bd38      	pop	{r3, r4, r5, pc}
    46d6:	bf00      	nop
    46d8:	000057b1 	.word	0x000057b1

000046dc <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    46dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46e0:	4605      	mov	r5, r0
    46e2:	460e      	mov	r6, r1
    46e4:	4691      	mov	r9, r2
    46e6:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    46e8:	4c0e      	ldr	r4, [pc, #56]	; (4724 <grid_ain_init+0x48>)
    46ea:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
	ain_channel_buffer_depth = depth;
    46ee:	f884 1419 	strb.w	r1, [r4, #1049]	; 0x419
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    46f2:	0100      	lsls	r0, r0, #4
    46f4:	4b0c      	ldr	r3, [pc, #48]	; (4728 <grid_ain_init+0x4c>)
    46f6:	4798      	blx	r3
    46f8:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    46fc:	b175      	cbz	r5, 471c <grid_ain_init+0x40>
    46fe:	4604      	mov	r4, r0
    4700:	3d01      	subs	r5, #1
    4702:	b2ed      	uxtb	r5, r5
    4704:	3501      	adds	r5, #1
    4706:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    470a:	4f08      	ldr	r7, [pc, #32]	; (472c <grid_ain_init+0x50>)
    470c:	4643      	mov	r3, r8
    470e:	464a      	mov	r2, r9
    4710:	4631      	mov	r1, r6
    4712:	4620      	mov	r0, r4
    4714:	47b8      	blx	r7
    4716:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    4718:	42ac      	cmp	r4, r5
    471a:	d1f7      	bne.n	470c <grid_ain_init+0x30>
	}

	return 0;
}
    471c:	2000      	movs	r0, #0
    471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4722:	bf00      	nop
    4724:	20000ab0 	.word	0x20000ab0
    4728:	000057b1 	.word	0x000057b1
    472c:	000046a1 	.word	0x000046a1

00004730 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    4730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4734:	0100      	lsls	r0, r0, #4
    4736:	4b3c      	ldr	r3, [pc, #240]	; (4828 <grid_ain_add_sample+0xf8>)
    4738:	f8d3 a41c 	ldr.w	sl, [r3, #1052]	; 0x41c
    473c:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    4740:	f89c 6004 	ldrb.w	r6, [ip, #4]
    4744:	2e00      	cmp	r6, #0
    4746:	d05b      	beq.n	4800 <grid_ain_add_sample+0xd0>
    4748:	f85a 5000 	ldr.w	r5, [sl, r0]
    474c:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    474e:	2200      	movs	r2, #0
    4750:	4690      	mov	r8, r2
    4752:	4691      	mov	r9, r2
    4754:	4696      	mov	lr, r2
    4756:	f64f 77ff 	movw	r7, #65535	; 0xffff
    475a:	4614      	mov	r4, r2
    475c:	fa5f fb82 	uxtb.w	fp, r2
    4760:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    4764:	441c      	add	r4, r3
		
		if (current > maximum){
    4766:	4573      	cmp	r3, lr
    4768:	bf84      	itt	hi
    476a:	46d8      	movhi	r8, fp
			maximum = current;
    476c:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    476e:	42bb      	cmp	r3, r7
    4770:	bf3c      	itt	cc
    4772:	46d9      	movcc	r9, fp
			minimum = current;
    4774:	461f      	movcc	r7, r3
    4776:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    4778:	b2d3      	uxtb	r3, r2
    477a:	42b3      	cmp	r3, r6
    477c:	d3ee      	bcc.n	475c <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    477e:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    4782:	b2b6      	uxth	r6, r6
    4784:	428e      	cmp	r6, r1
    4786:	d23f      	bcs.n	4808 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    4788:	f85a 3000 	ldr.w	r3, [sl, r0]
    478c:	440c      	add	r4, r1
    478e:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    4792:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    4794:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    4798:	f89c 3004 	ldrb.w	r3, [ip, #4]
    479c:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    47a0:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    47a4:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    47a8:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    47aa:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    47ae:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    47b0:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    47b2:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    47b4:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    47b8:	b29b      	uxth	r3, r3
    47ba:	408b      	lsls	r3, r1
    47bc:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    47be:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    47c2:	1b92      	subs	r2, r2, r6
    47c4:	2a00      	cmp	r2, #0
    47c6:	bfb8      	it	lt
    47c8:	4252      	neglt	r2, r2
    47ca:	2601      	movs	r6, #1
    47cc:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    47d0:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    47d4:	42be      	cmp	r6, r7
    47d6:	d020      	beq.n	481a <grid_ain_add_sample+0xea>
    47d8:	4282      	cmp	r2, r0
    47da:	dc08      	bgt.n	47ee <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    47dc:	2201      	movs	r2, #1
    47de:	fa02 f505 	lsl.w	r5, r2, r5
    47e2:	fa02 f101 	lsl.w	r1, r2, r1
    47e6:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    47e8:	428f      	cmp	r7, r1
    47ea:	d000      	beq.n	47ee <grid_ain_add_sample+0xbe>
    47ec:	b9c7      	cbnz	r7, 4820 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    47ee:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    47f2:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    47f6:	2001      	movs	r0, #1
    47f8:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    47fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    4800:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    4802:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    4804:	2400      	movs	r4, #0
    4806:	e7ba      	b.n	477e <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    4808:	f85a 3000 	ldr.w	r3, [sl, r0]
    480c:	440c      	add	r4, r1
    480e:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    4812:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    4814:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    4818:	e7be      	b.n	4798 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    481a:	2000      	movs	r0, #0
    481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4820:	2000      	movs	r0, #0
	}
	
}
    4822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4826:	bf00      	nop
    4828:	20000ab0 	.word	0x20000ab0

0000482c <convert_cb_ADC_1>:
	{
    482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4830:	b082      	sub	sp, #8
		ADC_1_conversion_ready = 1;
    4832:	2201      	movs	r2, #1
    4834:	4b2b      	ldr	r3, [pc, #172]	; (48e4 <convert_cb_ADC_1+0xb8>)
    4836:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		while(ADC_0_conversion_ready==0){}
    483a:	461a      	mov	r2, r3
    483c:	7813      	ldrb	r3, [r2, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d0fc      	beq.n	483c <convert_cb_ADC_1+0x10>
		while(ADC_1_conversion_ready==0){}
    4842:	4a28      	ldr	r2, [pc, #160]	; (48e4 <convert_cb_ADC_1+0xb8>)
    4844:	f892 3420 	ldrb.w	r3, [r2, #1056]	; 0x420
    4848:	2b00      	cmp	r3, #0
    484a:	d0fb      	beq.n	4844 <convert_cb_ADC_1+0x18>
		uint16_t adcresult_0 = 0;
    484c:	2400      	movs	r4, #0
    484e:	aa02      	add	r2, sp, #8
    4850:	f822 4d02 	strh.w	r4, [r2, #-2]!
		adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    4854:	2302      	movs	r3, #2
    4856:	4621      	mov	r1, r4
    4858:	4823      	ldr	r0, [pc, #140]	; (48e8 <convert_cb_ADC_1+0xbc>)
    485a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4900 <convert_cb_ADC_1+0xd4>
    485e:	47c0      	blx	r8
		grid_ain_add_sample(grid_module_mux_lookup[grid_module_mux+8], adcresult_0);
    4860:	4f22      	ldr	r7, [pc, #136]	; (48ec <convert_cb_ADC_1+0xc0>)
    4862:	4d20      	ldr	r5, [pc, #128]	; (48e4 <convert_cb_ADC_1+0xb8>)
    4864:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    4868:	443b      	add	r3, r7
    486a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    486e:	7a18      	ldrb	r0, [r3, #8]
    4870:	4e1f      	ldr	r6, [pc, #124]	; (48f0 <convert_cb_ADC_1+0xc4>)
    4872:	47b0      	blx	r6
		uint16_t adcresult_1 = 0;
    4874:	aa02      	add	r2, sp, #8
    4876:	f822 4d04 	strh.w	r4, [r2, #-4]!
		adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    487a:	2302      	movs	r3, #2
    487c:	4621      	mov	r1, r4
    487e:	481d      	ldr	r0, [pc, #116]	; (48f4 <convert_cb_ADC_1+0xc8>)
    4880:	47c0      	blx	r8
		grid_ain_add_sample(grid_module_mux_lookup[grid_module_mux+0], adcresult_1);
    4882:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    4886:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    488a:	5cf8      	ldrb	r0, [r7, r3]
    488c:	47b0      	blx	r6
		if (grid_module_mux == 0){
    488e:	f895 3421 	ldrb.w	r3, [r5, #1057]	; 0x421
    4892:	b9eb      	cbnz	r3, 48d0 <convert_cb_ADC_1+0xa4>
			grid_module_mux = 1;
    4894:	2201      	movs	r2, #1
    4896:	f885 2421 	strb.w	r2, [r5, #1057]	; 0x421
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    489a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    489e:	4b16      	ldr	r3, [pc, #88]	; (48f8 <convert_cb_ADC_1+0xcc>)
    48a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    48a8:	4b13      	ldr	r3, [pc, #76]	; (48f8 <convert_cb_ADC_1+0xcc>)
    48aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    48ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    48b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ADC_0_conversion_ready = 0;	
    48b6:	4b0b      	ldr	r3, [pc, #44]	; (48e4 <convert_cb_ADC_1+0xb8>)
    48b8:	2200      	movs	r2, #0
    48ba:	701a      	strb	r2, [r3, #0]
		ADC_1_conversion_ready = 0;
    48bc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		adc_async_start_conversion(&ADC_0);			
    48c0:	4809      	ldr	r0, [pc, #36]	; (48e8 <convert_cb_ADC_1+0xbc>)
    48c2:	4c0e      	ldr	r4, [pc, #56]	; (48fc <convert_cb_ADC_1+0xd0>)
    48c4:	47a0      	blx	r4
		adc_async_start_conversion(&ADC_1);
    48c6:	480b      	ldr	r0, [pc, #44]	; (48f4 <convert_cb_ADC_1+0xc8>)
    48c8:	47a0      	blx	r4
	}
    48ca:	b002      	add	sp, #8
    48cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_module_mux = 0;
    48d0:	2200      	movs	r2, #0
    48d2:	4b04      	ldr	r3, [pc, #16]	; (48e4 <convert_cb_ADC_1+0xb8>)
    48d4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    48d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    48dc:	4b06      	ldr	r3, [pc, #24]	; (48f8 <convert_cb_ADC_1+0xcc>)
    48de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    48e2:	e7df      	b.n	48a4 <convert_cb_ADC_1+0x78>
    48e4:	20000ab0 	.word	0x20000ab0
    48e8:	20001070 	.word	0x20001070
    48ec:	000063c0 	.word	0x000063c0
    48f0:	00004731 	.word	0x00004731
    48f4:	200010e0 	.word	0x200010e0
    48f8:	41008000 	.word	0x41008000
    48fc:	00000cc5 	.word	0x00000cc5
    4900:	00000be5 	.word	0x00000be5

00004904 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4904:	4b03      	ldr	r3, [pc, #12]	; (4914 <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    4906:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    490a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    490e:	7b00      	ldrb	r0, [r0, #12]
    4910:	4770      	bx	lr
    4912:	bf00      	nop
    4914:	20000ab0 	.word	0x20000ab0

00004918 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    4918:	4b04      	ldr	r3, [pc, #16]	; (492c <grid_ain_get_average+0x14>)
    491a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    491e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    4922:	2300      	movs	r3, #0
    4924:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    4926:	8900      	ldrh	r0, [r0, #8]
    4928:	4770      	bx	lr
    492a:	bf00      	nop
    492c:	20000ab0 	.word	0x20000ab0

00004930 <grid_tel_event_handler>:


// Register that the event happened and provide quick alert
uint8_t grid_tel_event_handler(struct TEL_event_counter* telemetry_event){
	
	if(telemetry_event == NULL) return 1;
    4930:	4603      	mov	r3, r0
    4932:	b190      	cbz	r0, 495a <grid_tel_event_handler+0x2a>
	
	
	
	if(telemetry_event->absolute_counter<(uint32_t)(-1)){
    4934:	6802      	ldr	r2, [r0, #0]
    4936:	f1b2 3fff 	cmp.w	r2, #4294967295
		telemetry_event->absolute_counter++;
    493a:	bf1c      	itt	ne
    493c:	3201      	addne	r2, #1
    493e:	6002      	strne	r2, [r0, #0]
	}
	
	if(telemetry_event->frequency_counter<(uint32_t)(-1)){
    4940:	6842      	ldr	r2, [r0, #4]
    4942:	f1b2 3fff 	cmp.w	r2, #4294967295
		telemetry_event->frequency_counter++;
    4946:	bf1c      	itt	ne
    4948:	3201      	addne	r2, #1
    494a:	6042      	strne	r2, [r0, #4]
	}
	
	// Instant feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    494c:	6840      	ldr	r0, [r0, #4]
    494e:	68db      	ldr	r3, [r3, #12]
	if(telemetry_event == NULL) return 1;
    4950:	4298      	cmp	r0, r3
    4952:	bf94      	ite	ls
    4954:	2000      	movls	r0, #0
    4956:	2001      	movhi	r0, #1
    4958:	4770      	bx	lr
    495a:	2001      	movs	r0, #1
		return 1;
	}
	else{
		return 0;
	}
}  
    495c:	4770      	bx	lr
	...

00004960 <grid_tel_event_register>:


struct TEL_event_counter* grid_tel_event_register(uint32_t frequency_reference, uint32_t frequency_alert){
    4960:	b538      	push	{r3, r4, r5, lr}
    4962:	4604      	mov	r4, r0
    4964:	460d      	mov	r5, r1
	
	struct TEL_event_counter* new_item = (struct TEL_event_counter*) malloc(sizeof(struct TEL_event_counter));
    4966:	2018      	movs	r0, #24
    4968:	4b0c      	ldr	r3, [pc, #48]	; (499c <grid_tel_event_register+0x3c>)
    496a:	4798      	blx	r3
	if(new_item != NULL){	// malloc successful
    496c:	4601      	mov	r1, r0
    496e:	b190      	cbz	r0, 4996 <grid_tel_event_register+0x36>
		
		new_item->next = NULL;
    4970:	2300      	movs	r3, #0
    4972:	6143      	str	r3, [r0, #20]
		
		new_item->absolute_counter = 0;
    4974:	6003      	str	r3, [r0, #0]
		new_item->frequency = 0;
    4976:	6103      	str	r3, [r0, #16]
		new_item->frequency_alert = frequency_alert;
    4978:	60c5      	str	r5, [r0, #12]
		new_item->frequency_counter = 0;
    497a:	6043      	str	r3, [r0, #4]
		new_item->frequency_reference = frequency_reference;
    497c:	6084      	str	r4, [r0, #8]
		
		

		if(grid_tel_event_head == NULL){ //List is empty
    497e:	4b08      	ldr	r3, [pc, #32]	; (49a0 <grid_tel_event_register+0x40>)
    4980:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
    4984:	b91a      	cbnz	r2, 498e <grid_tel_event_register+0x2e>
			grid_tel_event_head = new_item;
    4986:	f8c3 0424 	str.w	r0, [r3, #1060]	; 0x424
    498a:	e004      	b.n	4996 <grid_tel_event_register+0x36>
			
			struct TEL_event_counter* current = grid_tel_event_head;
			
			while (current->next != NULL)
			{
				current = current->next;
    498c:	461a      	mov	r2, r3
			while (current->next != NULL)
    498e:	6953      	ldr	r3, [r2, #20]
    4990:	2b00      	cmp	r3, #0
    4992:	d1fb      	bne.n	498c <grid_tel_event_register+0x2c>
			}
			
			current -> next = new_item;
    4994:	6151      	str	r1, [r2, #20]

	}

	return new_item;

}
    4996:	4608      	mov	r0, r1
    4998:	bd38      	pop	{r3, r4, r5, pc}
    499a:	bf00      	nop
    499c:	000057b1 	.word	0x000057b1
    49a0:	20000ab0 	.word	0x20000ab0

000049a4 <grid_tel_calculate_event_frequency>:


uint8_t grid_tel_calculate_event_frequency(struct TEL_event_counter* telemetry_event){

	// Save valid frequency data
	telemetry_event->frequency = telemetry_event->frequency_counter;
    49a4:	6843      	ldr	r3, [r0, #4]
    49a6:	6103      	str	r3, [r0, #16]
	
	
	//Update the freq counter variable
	if(telemetry_event->frequency_counter >= telemetry_event->frequency_reference){
    49a8:	6882      	ldr	r2, [r0, #8]
    49aa:	4293      	cmp	r3, r2
		telemetry_event->frequency_counter -= telemetry_event->frequency_reference;
    49ac:	bf2c      	ite	cs
    49ae:	1a9b      	subcs	r3, r3, r2
	}else{
		telemetry_event->frequency_counter = 0;
    49b0:	2300      	movcc	r3, #0
    49b2:	6043      	str	r3, [r0, #4]
	}
	

	// Instant alert feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    49b4:	6842      	ldr	r2, [r0, #4]
    49b6:	68c0      	ldr	r0, [r0, #12]
		return 1;
	}
	else{
		return 0;
	}	
}
    49b8:	4282      	cmp	r2, r0
    49ba:	bf94      	ite	ls
    49bc:	2000      	movls	r0, #0
    49be:	2001      	movhi	r0, #1
    49c0:	4770      	bx	lr
	...

000049c4 <grid_tel_frequency_tick>:


void grid_tel_frequency_tick(){
    49c4:	b538      	push	{r3, r4, r5, lr}
	
	struct TEL_event_counter* current = grid_tel_event_head;
    49c6:	4b05      	ldr	r3, [pc, #20]	; (49dc <grid_tel_frequency_tick+0x18>)
    49c8:	f8d3 4424 	ldr.w	r4, [r3, #1060]	; 0x424
	while(current != NULL){
    49cc:	b12c      	cbz	r4, 49da <grid_tel_frequency_tick+0x16>
		grid_tel_calculate_event_frequency(current);
    49ce:	4d04      	ldr	r5, [pc, #16]	; (49e0 <grid_tel_frequency_tick+0x1c>)
    49d0:	4620      	mov	r0, r4
    49d2:	47a8      	blx	r5
		current = current->next;
    49d4:	6964      	ldr	r4, [r4, #20]
	while(current != NULL){
    49d6:	2c00      	cmp	r4, #0
    49d8:	d1fa      	bne.n	49d0 <grid_tel_frequency_tick+0xc>
    49da:	bd38      	pop	{r3, r4, r5, pc}
    49dc:	20000ab0 	.word	0x20000ab0
    49e0:	000049a5 	.word	0x000049a5

000049e4 <grid_module_init>:
	}


	/* ============================== GRID_MODULE_INIT() ================================ */

	void grid_module_init(void){
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		
						
		// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
		grid_ain_init(grid_module_ain_buffer_size, 3, 14, 10);		
    49e6:	230a      	movs	r3, #10
    49e8:	220e      	movs	r2, #14
    49ea:	2103      	movs	r1, #3
    49ec:	2010      	movs	r0, #16
    49ee:	4c1b      	ldr	r4, [pc, #108]	; (4a5c <grid_module_init+0x78>)
    49f0:	47a0      	blx	r4
		grid_led_init(grid_module_led_buffer_size);
    49f2:	2010      	movs	r0, #16
    49f4:	4b1a      	ldr	r3, [pc, #104]	; (4a60 <grid_module_init+0x7c>)
    49f6:	4798      	blx	r3

		spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    49f8:	4c1a      	ldr	r4, [pc, #104]	; (4a64 <grid_module_init+0x80>)
    49fa:	491b      	ldr	r1, [pc, #108]	; (4a68 <grid_module_init+0x84>)
    49fc:	4620      	mov	r0, r4
    49fe:	4b1b      	ldr	r3, [pc, #108]	; (4a6c <grid_module_init+0x88>)
    4a00:	4798      	blx	r3
		spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    4a02:	4a1b      	ldr	r2, [pc, #108]	; (4a70 <grid_module_init+0x8c>)
    4a04:	2100      	movs	r1, #0
    4a06:	4620      	mov	r0, r4
    4a08:	4b1a      	ldr	r3, [pc, #104]	; (4a74 <grid_module_init+0x90>)
    4a0a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4a10:	4b19      	ldr	r3, [pc, #100]	; (4a78 <grid_module_init+0x94>)
    4a12:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		//enable pwr!
		gpio_set_pin_level(UI_PWR_EN, true);

		// ADC SETUP	
	
		adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    4a16:	4c19      	ldr	r4, [pc, #100]	; (4a7c <grid_module_init+0x98>)
    4a18:	4b19      	ldr	r3, [pc, #100]	; (4a80 <grid_module_init+0x9c>)
    4a1a:	2200      	movs	r2, #0
    4a1c:	4611      	mov	r1, r2
    4a1e:	4620      	mov	r0, r4
    4a20:	4f18      	ldr	r7, [pc, #96]	; (4a84 <grid_module_init+0xa0>)
    4a22:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_0, 0);
    4a24:	2100      	movs	r1, #0
    4a26:	4620      	mov	r0, r4
    4a28:	4e17      	ldr	r6, [pc, #92]	; (4a88 <grid_module_init+0xa4>)
    4a2a:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_0);
    4a2c:	4620      	mov	r0, r4
    4a2e:	4d17      	ldr	r5, [pc, #92]	; (4a8c <grid_module_init+0xa8>)
    4a30:	47a8      	blx	r5
				
		adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    4a32:	4c17      	ldr	r4, [pc, #92]	; (4a90 <grid_module_init+0xac>)
    4a34:	4b17      	ldr	r3, [pc, #92]	; (4a94 <grid_module_init+0xb0>)
    4a36:	2200      	movs	r2, #0
    4a38:	4611      	mov	r1, r2
    4a3a:	4620      	mov	r0, r4
    4a3c:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_1, 0);
    4a3e:	2100      	movs	r1, #0
    4a40:	4620      	mov	r0, r4
    4a42:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_1);
    4a44:	4620      	mov	r0, r4
    4a46:	47a8      	blx	r5
	
		//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
		/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
		usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
		usart_async_get_io_descriptor(&GRID_AUX, &io);
    4a48:	4c13      	ldr	r4, [pc, #76]	; (4a98 <grid_module_init+0xb4>)
    4a4a:	4914      	ldr	r1, [pc, #80]	; (4a9c <grid_module_init+0xb8>)
    4a4c:	4620      	mov	r0, r4
    4a4e:	4b14      	ldr	r3, [pc, #80]	; (4aa0 <grid_module_init+0xbc>)
    4a50:	4798      	blx	r3
		usart_async_enable(&GRID_AUX);
    4a52:	4620      	mov	r0, r4
    4a54:	4b13      	ldr	r3, [pc, #76]	; (4aa4 <grid_module_init+0xc0>)
    4a56:	4798      	blx	r3
    4a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a5a:	bf00      	nop
    4a5c:	000046dd 	.word	0x000046dd
    4a60:	00004479 	.word	0x00004479
    4a64:	2000109c 	.word	0x2000109c
    4a68:	20001590 	.word	0x20001590
    4a6c:	0000104d 	.word	0x0000104d
    4a70:	00004431 	.word	0x00004431
    4a74:	0000101d 	.word	0x0000101d
    4a78:	41008000 	.word	0x41008000
    4a7c:	20001070 	.word	0x20001070
    4a80:	00004425 	.word	0x00004425
    4a84:	00000b65 	.word	0x00000b65
    4a88:	00000b25 	.word	0x00000b25
    4a8c:	00000cc5 	.word	0x00000cc5
    4a90:	200010e0 	.word	0x200010e0
    4a94:	0000482d 	.word	0x0000482d
    4a98:	20001020 	.word	0x20001020
    4a9c:	20001524 	.word	0x20001524
    4aa0:	000012e5 	.word	0x000012e5
    4aa4:	000012b9 	.word	0x000012b9

00004aa8 <main>:

#include "../../grid_modules/grid_module_p16.c" // Grid Telemetry


int main(void)
{
    4aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aac:	b099      	sub	sp, #100	; 0x64
	atmel_start_init();
    4aae:	4c5b      	ldr	r4, [pc, #364]	; (4c1c <main+0x174>)
    4ab0:	47a0      	blx	r4
	
	
	
	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
    4ab2:	47a0      	blx	r4
	
	grid_module_init();
    4ab4:	4b5a      	ldr	r3, [pc, #360]	; (4c20 <main+0x178>)
    4ab6:	4798      	blx	r3
	
	

	// UI RX EVENT fref=5, alert=50;
	
	struct TEL_event_counter* console_tx = grid_tel_event_register(5, 50);
    4ab8:	2132      	movs	r1, #50	; 0x32
    4aba:	2005      	movs	r0, #5
    4abc:	4b59      	ldr	r3, [pc, #356]	; (4c24 <main+0x17c>)
    4abe:	4798      	blx	r3
	
	while(console_tx == NULL){/*TRAP*/}	
    4ac0:	9006      	str	r0, [sp, #24]
    4ac2:	b928      	cbnz	r0, 4ad0 <main+0x28>
    4ac4:	e7fe      	b.n	4ac4 <main+0x1c>
	uint8_t colorcode = 0;

	while (1) {
		
		if (faketimer == 10){
			grid_tel_frequency_tick();
    4ac6:	4b58      	ldr	r3, [pc, #352]	; (4c28 <main+0x180>)
    4ac8:	4798      	blx	r3
			faketimer = 0;
    4aca:	2300      	movs	r3, #0
    4acc:	9303      	str	r3, [sp, #12]
    4ace:	e094      	b.n	4bfa <main+0x152>
	while(console_tx == NULL){/*TRAP*/}	
    4ad0:	f04f 0800 	mov.w	r8, #0
    4ad4:	46c2      	mov	sl, r8
    4ad6:	f8cd 800c 	str.w	r8, [sp, #12]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    4ada:	2320      	movs	r3, #32
    4adc:	9307      	str	r3, [sp, #28]
		gpio_toggle_pin_level(LED0);

			
		/* ========================= ANALOG READ ============================= */
		
		delay_ms(1);
    4ade:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4c70 <main+0x1c8>
		if (colorfade == 0) colorcode++;
		if (colorcode>2) colorcode=0;
		delay_ms(2);
			
		// SEND DATA TO LEDs 		
		dma_spi_done = 0;
    4ae2:	f8df b190 	ldr.w	fp, [pc, #400]	; 4c74 <main+0x1cc>
    4ae6:	e088      	b.n	4bfa <main+0x152>
    4ae8:	3401      	adds	r4, #1
    4aea:	351a      	adds	r5, #26
		for (uint8_t i = 0; i<4; i++)
    4aec:	2c04      	cmp	r4, #4
    4aee:	d037      	beq.n	4b60 <main+0xb8>
    4af0:	b2e6      	uxtb	r6, r4
			if (grid_ain_get_changed(i)){
    4af2:	4630      	mov	r0, r6
    4af4:	47b8      	blx	r7
    4af6:	2800      	cmp	r0, #0
    4af8:	d0f6      	beq.n	4ae8 <main+0x40>
				grid_tel_event_handler(console_tx);
    4afa:	9806      	ldr	r0, [sp, #24]
    4afc:	4b4b      	ldr	r3, [pc, #300]	; (4c2c <main+0x184>)
    4afe:	4798      	blx	r3
				uint16_t average = grid_ain_get_average(i);
    4b00:	4630      	mov	r0, r6
    4b02:	4b4b      	ldr	r3, [pc, #300]	; (4c30 <main+0x188>)
    4b04:	4798      	blx	r3
    4b06:	4603      	mov	r3, r0
				sprintf(str, "ADC: %5d %5d %5d \n", i, average, average/128);
    4b08:	f3c0 1acf 	ubfx	sl, r0, #7, #16
    4b0c:	f8cd a000 	str.w	sl, [sp]
    4b10:	4622      	mov	r2, r4
    4b12:	4948      	ldr	r1, [pc, #288]	; (4c34 <main+0x18c>)
    4b14:	a80a      	add	r0, sp, #40	; 0x28
    4b16:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4c78 <main+0x1d0>
    4b1a:	47c0      	blx	r8
				io_write(io, str, 24);
    4b1c:	2218      	movs	r2, #24
    4b1e:	a90a      	add	r1, sp, #40	; 0x28
    4b20:	4b45      	ldr	r3, [pc, #276]	; (4c38 <main+0x190>)
    4b22:	6818      	ldr	r0, [r3, #0]
    4b24:	4b45      	ldr	r3, [pc, #276]	; (4c3c <main+0x194>)
    4b26:	4798      	blx	r3
				uint32_t crc = 0xFFFFFFFF;
    4b28:	ab18      	add	r3, sp, #96	; 0x60
    4b2a:	f04f 32ff 	mov.w	r2, #4294967295
    4b2e:	f843 2d3c 	str.w	r2, [r3, #-60]!
 				crc_sync_crc32(&CRC_0, (uint32_t *)str, 5, &crc);
    4b32:	2205      	movs	r2, #5
    4b34:	a90a      	add	r1, sp, #40	; 0x28
    4b36:	4842      	ldr	r0, [pc, #264]	; (4c40 <main+0x198>)
    4b38:	4e42      	ldr	r6, [pc, #264]	; (4c44 <main+0x19c>)
    4b3a:	47b0      	blx	r6
 				crc ^= 0xFFFFFFFF;
    4b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b3e:	43db      	mvns	r3, r3
    4b40:	9309      	str	r3, [sp, #36]	; 0x24
				delay_ms(5);
    4b42:	2005      	movs	r0, #5
    4b44:	47c8      	blx	r9
				sprintf(str2, "CRC: %x \n", crc);
    4b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4b48:	493f      	ldr	r1, [pc, #252]	; (4c48 <main+0x1a0>)
    4b4a:	a811      	add	r0, sp, #68	; 0x44
    4b4c:	47c0      	blx	r8
				io_write(io, str2, 15);
    4b4e:	220f      	movs	r2, #15
    4b50:	a911      	add	r1, sp, #68	; 0x44
    4b52:	4b39      	ldr	r3, [pc, #228]	; (4c38 <main+0x190>)
    4b54:	6818      	ldr	r0, [r3, #0]
    4b56:	4b39      	ldr	r3, [pc, #228]	; (4c3c <main+0x194>)
    4b58:	4798      	blx	r3
				grid_led_set_phase(i, 0, average/8/4/4);
    4b5a:	f885 a00b 	strb.w	sl, [r5, #11]
    4b5e:	e7c3      	b.n	4ae8 <main+0x40>
    4b60:	f8dd a010 	ldr.w	sl, [sp, #16]
    4b64:	f8dd 8014 	ldr.w	r8, [sp, #20]
    4b68:	4b38      	ldr	r3, [pc, #224]	; (4c4c <main+0x1a4>)
    4b6a:	2220      	movs	r2, #32
    4b6c:	61da      	str	r2, [r3, #28]
		delay_ms(1);
    4b6e:	2001      	movs	r0, #1
    4b70:	47c8      	blx	r9
		grid_led_tick();
    4b72:	4b37      	ldr	r3, [pc, #220]	; (4c50 <main+0x1a8>)
    4b74:	4798      	blx	r3
		grid_led_render_all();
    4b76:	4b37      	ldr	r3, [pc, #220]	; (4c54 <main+0x1ac>)
    4b78:	4798      	blx	r3
		grid_led_set_color(4, colorfade*(colorcode==0), colorfade*(colorcode==1), colorfade*(colorcode==2));
    4b7a:	f1ba 0f00 	cmp.w	sl, #0
    4b7e:	bf0c      	ite	eq
    4b80:	4645      	moveq	r5, r8
    4b82:	2500      	movne	r5, #0
    4b84:	f1ba 0f01 	cmp.w	sl, #1
    4b88:	bf0c      	ite	eq
    4b8a:	4646      	moveq	r6, r8
    4b8c:	2600      	movne	r6, #0
    4b8e:	f1ba 0f02 	cmp.w	sl, #2
    4b92:	bf0c      	ite	eq
    4b94:	4647      	moveq	r7, r8
    4b96:	2700      	movne	r7, #0
    4b98:	463b      	mov	r3, r7
    4b9a:	4632      	mov	r2, r6
    4b9c:	4629      	mov	r1, r5
    4b9e:	2004      	movs	r0, #4
    4ba0:	4c2d      	ldr	r4, [pc, #180]	; (4c58 <main+0x1b0>)
    4ba2:	47a0      	blx	r4
		grid_led_set_color(0, colorfade*(colorcode==0), colorfade*(colorcode==1), colorfade*(colorcode==2));
    4ba4:	463b      	mov	r3, r7
    4ba6:	4632      	mov	r2, r6
    4ba8:	4629      	mov	r1, r5
    4baa:	2000      	movs	r0, #0
    4bac:	47a0      	blx	r4
		colorfade++;
    4bae:	f108 0301 	add.w	r3, r8, #1
		if (colorfade == 0) colorcode++;
    4bb2:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
    4bb6:	bf04      	itt	eq
    4bb8:	f10a 0301 	addeq.w	r3, sl, #1
    4bbc:	fa5f fa83 	uxtbeq.w	sl, r3
		if (colorcode>2) colorcode=0;
    4bc0:	f1ba 0f03 	cmp.w	sl, #3
    4bc4:	bf28      	it	cs
    4bc6:	f04f 0a00 	movcs.w	sl, #0
		delay_ms(2);
    4bca:	2002      	movs	r0, #2
    4bcc:	47c8      	blx	r9
		dma_spi_done = 0;
    4bce:	2300      	movs	r3, #0
    4bd0:	f8cb 3004 	str.w	r3, [fp, #4]
		spi_m_dma_enable(&GRID_LED);
    4bd4:	4821      	ldr	r0, [pc, #132]	; (4c5c <main+0x1b4>)
    4bd6:	4b22      	ldr	r3, [pc, #136]	; (4c60 <main+0x1b8>)
    4bd8:	4798      	blx	r3
		
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    4bda:	f89b 200c 	ldrb.w	r2, [fp, #12]
    4bde:	f8db 1008 	ldr.w	r1, [fp, #8]
    4be2:	4b20      	ldr	r3, [pc, #128]	; (4c64 <main+0x1bc>)
    4be4:	6818      	ldr	r0, [r3, #0]
    4be6:	4b15      	ldr	r3, [pc, #84]	; (4c3c <main+0x194>)
    4be8:	4798      	blx	r3
		
 		while (dma_spi_done == 0)
    4bea:	f8db 3004 	ldr.w	r3, [fp, #4]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d0fb      	beq.n	4bea <main+0x142>
		if (faketimer == 10){
    4bf2:	9b03      	ldr	r3, [sp, #12]
    4bf4:	2b0a      	cmp	r3, #10
    4bf6:	f43f af66 	beq.w	4ac6 <main+0x1e>
		faketimer++;
    4bfa:	9b03      	ldr	r3, [sp, #12]
    4bfc:	3301      	adds	r3, #1
    4bfe:	9303      	str	r3, [sp, #12]
    4c00:	4b12      	ldr	r3, [pc, #72]	; (4c4c <main+0x1a4>)
    4c02:	9a07      	ldr	r2, [sp, #28]
    4c04:	61da      	str	r2, [r3, #28]
		delay_ms(1);
    4c06:	2001      	movs	r0, #1
    4c08:	47c8      	blx	r9
    4c0a:	4d17      	ldr	r5, [pc, #92]	; (4c68 <main+0x1c0>)
    4c0c:	2400      	movs	r4, #0
			if (grid_ain_get_changed(i)){
    4c0e:	4f17      	ldr	r7, [pc, #92]	; (4c6c <main+0x1c4>)
				uint16_t average = grid_ain_get_average(i);
    4c10:	f8cd a010 	str.w	sl, [sp, #16]
    4c14:	f8cd 8014 	str.w	r8, [sp, #20]
    4c18:	e76a      	b.n	4af0 <main+0x48>
    4c1a:	bf00      	nop
    4c1c:	000002d1 	.word	0x000002d1
    4c20:	000049e5 	.word	0x000049e5
    4c24:	00004961 	.word	0x00004961
    4c28:	000049c5 	.word	0x000049c5
    4c2c:	00004931 	.word	0x00004931
    4c30:	00004919 	.word	0x00004919
    4c34:	000063d4 	.word	0x000063d4
    4c38:	20001524 	.word	0x20001524
    4c3c:	00000f11 	.word	0x00000f11
    4c40:	20000fc4 	.word	0x20000fc4
    4c44:	00000d39 	.word	0x00000d39
    4c48:	000063e8 	.word	0x000063e8
    4c4c:	41008000 	.word	0x41008000
    4c50:	000045ad 	.word	0x000045ad
    4c54:	00004681 	.word	0x00004681
    4c58:	0000443d 	.word	0x0000443d
    4c5c:	2000109c 	.word	0x2000109c
    4c60:	00000ff5 	.word	0x00000ff5
    4c64:	20001590 	.word	0x20001590
    4c68:	20001528 	.word	0x20001528
    4c6c:	00004905 	.word	0x00004905
    4c70:	00000d91 	.word	0x00000d91
    4c74:	20000ab0 	.word	0x20000ab0
    4c78:	00005961 	.word	0x00005961

00004c7c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c7e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4c80:	780b      	ldrb	r3, [r1, #0]
    4c82:	f3c3 1441 	ubfx	r4, r3, #5, #2
    4c86:	2c01      	cmp	r4, #1
    4c88:	d15e      	bne.n	4d48 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    4c8a:	888c      	ldrh	r4, [r1, #4]
    4c8c:	4d35      	ldr	r5, [pc, #212]	; (4d64 <cdcdf_acm_req+0xe8>)
    4c8e:	782d      	ldrb	r5, [r5, #0]
    4c90:	42a5      	cmp	r5, r4
    4c92:	d003      	beq.n	4c9c <cdcdf_acm_req+0x20>
    4c94:	4d33      	ldr	r5, [pc, #204]	; (4d64 <cdcdf_acm_req+0xe8>)
    4c96:	786d      	ldrb	r5, [r5, #1]
    4c98:	42a5      	cmp	r5, r4
    4c9a:	d158      	bne.n	4d4e <cdcdf_acm_req+0xd2>
    4c9c:	4616      	mov	r6, r2
    4c9e:	460c      	mov	r4, r1
    4ca0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    4ca2:	f013 0f80 	tst.w	r3, #128	; 0x80
    4ca6:	d10c      	bne.n	4cc2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    4ca8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4caa:	4b2f      	ldr	r3, [pc, #188]	; (4d68 <cdcdf_acm_req+0xec>)
    4cac:	4798      	blx	r3
    4cae:	4601      	mov	r1, r0
	switch (req->bRequest) {
    4cb0:	7863      	ldrb	r3, [r4, #1]
    4cb2:	2b20      	cmp	r3, #32
    4cb4:	d013      	beq.n	4cde <cdcdf_acm_req+0x62>
    4cb6:	2b22      	cmp	r3, #34	; 0x22
    4cb8:	d032      	beq.n	4d20 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    4cba:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    4cbe:	b003      	add	sp, #12
    4cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    4cc2:	2a01      	cmp	r2, #1
    4cc4:	d046      	beq.n	4d54 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    4cc6:	784b      	ldrb	r3, [r1, #1]
    4cc8:	2b21      	cmp	r3, #33	; 0x21
    4cca:	d145      	bne.n	4d58 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4ccc:	88cb      	ldrh	r3, [r1, #6]
    4cce:	2b07      	cmp	r3, #7
    4cd0:	d145      	bne.n	4d5e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    4cd2:	2300      	movs	r3, #0
    4cd4:	2207      	movs	r2, #7
    4cd6:	4925      	ldr	r1, [pc, #148]	; (4d6c <cdcdf_acm_req+0xf0>)
    4cd8:	4c25      	ldr	r4, [pc, #148]	; (4d70 <cdcdf_acm_req+0xf4>)
    4cda:	47a0      	blx	r4
    4cdc:	e7ef      	b.n	4cbe <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4cde:	2f07      	cmp	r7, #7
    4ce0:	d12b      	bne.n	4d3a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    4ce2:	b1be      	cbz	r6, 4d14 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4ce4:	6800      	ldr	r0, [r0, #0]
    4ce6:	9000      	str	r0, [sp, #0]
    4ce8:	888a      	ldrh	r2, [r1, #4]
    4cea:	798b      	ldrb	r3, [r1, #6]
    4cec:	f8ad 2004 	strh.w	r2, [sp, #4]
    4cf0:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4cf4:	4b1b      	ldr	r3, [pc, #108]	; (4d64 <cdcdf_acm_req+0xe8>)
    4cf6:	691b      	ldr	r3, [r3, #16]
    4cf8:	b113      	cbz	r3, 4d00 <cdcdf_acm_req+0x84>
    4cfa:	4668      	mov	r0, sp
    4cfc:	4798      	blx	r3
    4cfe:	b1f8      	cbz	r0, 4d40 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    4d00:	4b18      	ldr	r3, [pc, #96]	; (4d64 <cdcdf_acm_req+0xe8>)
    4d02:	aa02      	add	r2, sp, #8
    4d04:	e912 0003 	ldmdb	r2, {r0, r1}
    4d08:	6098      	str	r0, [r3, #8]
    4d0a:	8199      	strh	r1, [r3, #12]
    4d0c:	0c09      	lsrs	r1, r1, #16
    4d0e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    4d10:	2000      	movs	r0, #0
    4d12:	e7d4      	b.n	4cbe <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4d14:	2300      	movs	r3, #0
    4d16:	2207      	movs	r2, #7
    4d18:	4628      	mov	r0, r5
    4d1a:	4c15      	ldr	r4, [pc, #84]	; (4d70 <cdcdf_acm_req+0xf4>)
    4d1c:	47a0      	blx	r4
    4d1e:	e7ce      	b.n	4cbe <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    4d20:	2300      	movs	r3, #0
    4d22:	461a      	mov	r2, r3
    4d24:	4619      	mov	r1, r3
    4d26:	4618      	mov	r0, r3
    4d28:	4d11      	ldr	r5, [pc, #68]	; (4d70 <cdcdf_acm_req+0xf4>)
    4d2a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    4d2c:	4b0d      	ldr	r3, [pc, #52]	; (4d64 <cdcdf_acm_req+0xe8>)
    4d2e:	695b      	ldr	r3, [r3, #20]
    4d30:	b143      	cbz	r3, 4d44 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    4d32:	8860      	ldrh	r0, [r4, #2]
    4d34:	4798      	blx	r3
		return ERR_NONE;
    4d36:	2000      	movs	r0, #0
    4d38:	e7c1      	b.n	4cbe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    4d3a:	f04f 30ff 	mov.w	r0, #4294967295
    4d3e:	e7be      	b.n	4cbe <cdcdf_acm_req+0x42>
			return ERR_NONE;
    4d40:	2000      	movs	r0, #0
    4d42:	e7bc      	b.n	4cbe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    4d44:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    4d46:	e7ba      	b.n	4cbe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    4d48:	f06f 0009 	mvn.w	r0, #9
    4d4c:	e7b7      	b.n	4cbe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    4d4e:	f06f 0009 	mvn.w	r0, #9
    4d52:	e7b4      	b.n	4cbe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    4d54:	2000      	movs	r0, #0
    4d56:	e7b2      	b.n	4cbe <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    4d58:	f06f 000c 	mvn.w	r0, #12
    4d5c:	e7af      	b.n	4cbe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    4d5e:	f04f 30ff 	mov.w	r0, #4294967295
    4d62:	e7ac      	b.n	4cbe <cdcdf_acm_req+0x42>
    4d64:	20000edc 	.word	0x20000edc
    4d68:	000055dd 	.word	0x000055dd
    4d6c:	20000ee4 	.word	0x20000ee4
    4d70:	000050b9 	.word	0x000050b9

00004d74 <cdcdf_acm_ctrl>:
{
    4d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d78:	b083      	sub	sp, #12
    4d7a:	4616      	mov	r6, r2
	switch (ctrl) {
    4d7c:	2901      	cmp	r1, #1
    4d7e:	d066      	beq.n	4e4e <cdcdf_acm_ctrl+0xda>
    4d80:	b141      	cbz	r1, 4d94 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    4d82:	2902      	cmp	r1, #2
    4d84:	bf0c      	ite	eq
    4d86:	f06f 001a 	mvneq.w	r0, #26
    4d8a:	f06f 000c 	mvnne.w	r0, #12
}
    4d8e:	b003      	add	sp, #12
    4d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    4d94:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    4d98:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    4d9a:	2800      	cmp	r0, #0
    4d9c:	f000 8085 	beq.w	4eaa <cdcdf_acm_ctrl+0x136>
    4da0:	f10a 3bff 	add.w	fp, sl, #4294967295
    4da4:	f10a 0301 	add.w	r3, sl, #1
    4da8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4daa:	4f46      	ldr	r7, [pc, #280]	; (4ec4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    4dac:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4ed4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4db0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4ed8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    4db4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4db6:	7943      	ldrb	r3, [r0, #5]
    4db8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    4dbc:	2b02      	cmp	r3, #2
    4dbe:	d002      	beq.n	4dc6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    4dc0:	f06f 0009 	mvn.w	r0, #9
    4dc4:	e7e3      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
    4dc6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    4dca:	f89b 3000 	ldrb.w	r3, [fp]
    4dce:	429a      	cmp	r2, r3
    4dd0:	d06e      	beq.n	4eb0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    4dd2:	2bff      	cmp	r3, #255	; 0xff
    4dd4:	d16f      	bne.n	4eb6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    4dd6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4dda:	2205      	movs	r2, #5
    4ddc:	6871      	ldr	r1, [r6, #4]
    4dde:	4b3a      	ldr	r3, [pc, #232]	; (4ec8 <cdcdf_acm_ctrl+0x154>)
    4de0:	4798      	blx	r3
		while (NULL != ep) {
    4de2:	4604      	mov	r4, r0
    4de4:	b1f8      	cbz	r0, 4e26 <cdcdf_acm_ctrl+0xb2>
    4de6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    4dea:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    4dec:	7963      	ldrb	r3, [r4, #5]
    4dee:	7922      	ldrb	r2, [r4, #4]
    4df0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4df4:	b292      	uxth	r2, r2
    4df6:	78e1      	ldrb	r1, [r4, #3]
    4df8:	4628      	mov	r0, r5
    4dfa:	47b8      	blx	r7
    4dfc:	2800      	cmp	r0, #0
    4dfe:	d15d      	bne.n	4ebc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4e00:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4e04:	bf14      	ite	ne
    4e06:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4e0a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    4e0e:	4628      	mov	r0, r5
    4e10:	47c8      	blx	r9
			desc->sod = ep;
    4e12:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4e14:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4e16:	6871      	ldr	r1, [r6, #4]
    4e18:	4420      	add	r0, r4
    4e1a:	47c0      	blx	r8
		while (NULL != ep) {
    4e1c:	4604      	mov	r4, r0
    4e1e:	2800      	cmp	r0, #0
    4e20:	d1e3      	bne.n	4dea <cdcdf_acm_ctrl+0x76>
    4e22:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    4e26:	6833      	ldr	r3, [r6, #0]
    4e28:	7818      	ldrb	r0, [r3, #0]
    4e2a:	2204      	movs	r2, #4
    4e2c:	6871      	ldr	r1, [r6, #4]
    4e2e:	4418      	add	r0, r3
    4e30:	4b25      	ldr	r3, [pc, #148]	; (4ec8 <cdcdf_acm_ctrl+0x154>)
    4e32:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    4e34:	9b00      	ldr	r3, [sp, #0]
    4e36:	459b      	cmp	fp, r3
    4e38:	d004      	beq.n	4e44 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    4e3a:	2800      	cmp	r0, #0
    4e3c:	d1ba      	bne.n	4db4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    4e3e:	f06f 0009 	mvn.w	r0, #9
    4e42:	e7a4      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    4e44:	2201      	movs	r2, #1
    4e46:	4b21      	ldr	r3, [pc, #132]	; (4ecc <cdcdf_acm_ctrl+0x158>)
    4e48:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    4e4a:	2000      	movs	r0, #0
    4e4c:	e79f      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    4e4e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    4e50:	b142      	cbz	r2, 4e64 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    4e52:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    4e54:	795b      	ldrb	r3, [r3, #5]
    4e56:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    4e5a:	2b02      	cmp	r3, #2
    4e5c:	d002      	beq.n	4e64 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    4e5e:	f06f 0009 	mvn.w	r0, #9
    4e62:	e794      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    4e64:	7823      	ldrb	r3, [r4, #0]
    4e66:	2bff      	cmp	r3, #255	; 0xff
    4e68:	d008      	beq.n	4e7c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    4e6a:	23ff      	movs	r3, #255	; 0xff
    4e6c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    4e6e:	78a0      	ldrb	r0, [r4, #2]
    4e70:	4298      	cmp	r0, r3
    4e72:	d003      	beq.n	4e7c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    4e74:	4b16      	ldr	r3, [pc, #88]	; (4ed0 <cdcdf_acm_ctrl+0x15c>)
    4e76:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4e78:	23ff      	movs	r3, #255	; 0xff
    4e7a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    4e7c:	7863      	ldrb	r3, [r4, #1]
    4e7e:	2bff      	cmp	r3, #255	; 0xff
    4e80:	d008      	beq.n	4e94 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    4e82:	23ff      	movs	r3, #255	; 0xff
    4e84:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    4e86:	78e0      	ldrb	r0, [r4, #3]
    4e88:	4298      	cmp	r0, r3
    4e8a:	d003      	beq.n	4e94 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    4e8c:	4b10      	ldr	r3, [pc, #64]	; (4ed0 <cdcdf_acm_ctrl+0x15c>)
    4e8e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4e90:	23ff      	movs	r3, #255	; 0xff
    4e92:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    4e94:	7920      	ldrb	r0, [r4, #4]
    4e96:	28ff      	cmp	r0, #255	; 0xff
    4e98:	d003      	beq.n	4ea2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    4e9a:	4b0d      	ldr	r3, [pc, #52]	; (4ed0 <cdcdf_acm_ctrl+0x15c>)
    4e9c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    4e9e:	23ff      	movs	r3, #255	; 0xff
    4ea0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    4ea2:	2000      	movs	r0, #0
    4ea4:	4b09      	ldr	r3, [pc, #36]	; (4ecc <cdcdf_acm_ctrl+0x158>)
    4ea6:	7158      	strb	r0, [r3, #5]
    4ea8:	e771      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    4eaa:	f06f 0009 	mvn.w	r0, #9
    4eae:	e76e      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    4eb0:	f06f 0011 	mvn.w	r0, #17
    4eb4:	e76b      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    4eb6:	f06f 001b 	mvn.w	r0, #27
    4eba:	e768      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    4ebc:	f06f 0013 	mvn.w	r0, #19
    4ec0:	e765      	b.n	4d8e <cdcdf_acm_ctrl+0x1a>
    4ec2:	bf00      	nop
    4ec4:	000015f9 	.word	0x000015f9
    4ec8:	000055fd 	.word	0x000055fd
    4ecc:	20000edc 	.word	0x20000edc
    4ed0:	00001661 	.word	0x00001661
    4ed4:	0000168d 	.word	0x0000168d
    4ed8:	00005637 	.word	0x00005637

00004edc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4edc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    4ede:	4b0a      	ldr	r3, [pc, #40]	; (4f08 <cdcdf_acm_init+0x2c>)
    4ee0:	4798      	blx	r3
    4ee2:	2801      	cmp	r0, #1
    4ee4:	d80c      	bhi.n	4f00 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4ee6:	4809      	ldr	r0, [pc, #36]	; (4f0c <cdcdf_acm_init+0x30>)
    4ee8:	4b09      	ldr	r3, [pc, #36]	; (4f10 <cdcdf_acm_init+0x34>)
    4eea:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4eec:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    4eee:	3018      	adds	r0, #24
    4ef0:	4b08      	ldr	r3, [pc, #32]	; (4f14 <cdcdf_acm_init+0x38>)
    4ef2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4ef4:	4908      	ldr	r1, [pc, #32]	; (4f18 <cdcdf_acm_init+0x3c>)
    4ef6:	2001      	movs	r0, #1
    4ef8:	4b08      	ldr	r3, [pc, #32]	; (4f1c <cdcdf_acm_init+0x40>)
    4efa:	4798      	blx	r3
	return ERR_NONE;
    4efc:	2000      	movs	r0, #0
    4efe:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    4f00:	f06f 0010 	mvn.w	r0, #16
}
    4f04:	bd08      	pop	{r3, pc}
    4f06:	bf00      	nop
    4f08:	000055e9 	.word	0x000055e9
    4f0c:	20000edc 	.word	0x20000edc
    4f10:	00004d75 	.word	0x00004d75
    4f14:	00005589 	.word	0x00005589
    4f18:	20000304 	.word	0x20000304
    4f1c:	000054f5 	.word	0x000054f5

00004f20 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4f20:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4f22:	4b07      	ldr	r3, [pc, #28]	; (4f40 <usbdc_unconfig+0x20>)
    4f24:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4f26:	b14c      	cbz	r4, 4f3c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    4f28:	2600      	movs	r6, #0
    4f2a:	2501      	movs	r5, #1
    4f2c:	6863      	ldr	r3, [r4, #4]
    4f2e:	4632      	mov	r2, r6
    4f30:	4629      	mov	r1, r5
    4f32:	4620      	mov	r0, r4
    4f34:	4798      	blx	r3
		func = func->next;
    4f36:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4f38:	2c00      	cmp	r4, #0
    4f3a:	d1f7      	bne.n	4f2c <usbdc_unconfig+0xc>
    4f3c:	bd70      	pop	{r4, r5, r6, pc}
    4f3e:	bf00      	nop
    4f40:	20000f00 	.word	0x20000f00

00004f44 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4f44:	b570      	push	{r4, r5, r6, lr}
    4f46:	4606      	mov	r6, r0
    4f48:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    4f4a:	4b07      	ldr	r3, [pc, #28]	; (4f68 <usbdc_change_notify+0x24>)
    4f4c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    4f4e:	b91c      	cbnz	r4, 4f58 <usbdc_change_notify+0x14>
    4f50:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4f52:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4f54:	2c00      	cmp	r4, #0
    4f56:	d0fb      	beq.n	4f50 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    4f58:	6863      	ldr	r3, [r4, #4]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d0f9      	beq.n	4f52 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    4f5e:	4629      	mov	r1, r5
    4f60:	4630      	mov	r0, r6
    4f62:	4798      	blx	r3
    4f64:	e7f5      	b.n	4f52 <usbdc_change_notify+0xe>
    4f66:	bf00      	nop
    4f68:	20000f00 	.word	0x20000f00

00004f6c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f6e:	4607      	mov	r7, r0
    4f70:	460e      	mov	r6, r1
    4f72:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4f74:	4b0c      	ldr	r3, [pc, #48]	; (4fa8 <usbdc_request_handler+0x3c>)
    4f76:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    4f78:	b91c      	cbnz	r4, 4f82 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    4f7a:	2000      	movs	r0, #0
    4f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    4f7e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    4f80:	b16c      	cbz	r4, 4f9e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    4f82:	6863      	ldr	r3, [r4, #4]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d0fa      	beq.n	4f7e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    4f88:	462a      	mov	r2, r5
    4f8a:	4631      	mov	r1, r6
    4f8c:	4638      	mov	r0, r7
    4f8e:	4798      	blx	r3
			if (0 == rc) {
    4f90:	b138      	cbz	r0, 4fa2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    4f92:	f110 0f0a 	cmn.w	r0, #10
    4f96:	d0f2      	beq.n	4f7e <usbdc_request_handler+0x12>
				return -1;
    4f98:	f04f 30ff 	mov.w	r0, #4294967295
}
    4f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    4f9e:	2000      	movs	r0, #0
    4fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    4fa2:	2001      	movs	r0, #1
    4fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fa6:	bf00      	nop
    4fa8:	20000f00 	.word	0x20000f00

00004fac <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    4fac:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    4fae:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <usbd_sof_cb+0x1c>)
    4fb0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    4fb2:	b91c      	cbnz	r4, 4fbc <usbd_sof_cb+0x10>
    4fb4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    4fb6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    4fb8:	2c00      	cmp	r4, #0
    4fba:	d0fb      	beq.n	4fb4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    4fbc:	6863      	ldr	r3, [r4, #4]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d0f9      	beq.n	4fb6 <usbd_sof_cb+0xa>
			sof->cb();
    4fc2:	4798      	blx	r3
    4fc4:	e7f7      	b.n	4fb6 <usbd_sof_cb+0xa>
    4fc6:	bf00      	nop
    4fc8:	20000f00 	.word	0x20000f00

00004fcc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    4fcc:	b510      	push	{r4, lr}
    4fce:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    4fd0:	b119      	cbz	r1, 4fda <usbdc_cb_ctl_done+0xe>
    4fd2:	2901      	cmp	r1, #1
    4fd4:	d026      	beq.n	5024 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    4fd6:	2000      	movs	r0, #0
    4fd8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    4fda:	7813      	ldrb	r3, [r2, #0]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d1fa      	bne.n	4fd6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    4fe0:	7853      	ldrb	r3, [r2, #1]
    4fe2:	2b05      	cmp	r3, #5
    4fe4:	d00f      	beq.n	5006 <usbdc_cb_ctl_done+0x3a>
    4fe6:	2b09      	cmp	r3, #9
    4fe8:	d1f5      	bne.n	4fd6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    4fea:	8852      	ldrh	r2, [r2, #2]
    4fec:	4b10      	ldr	r3, [pc, #64]	; (5030 <usbdc_cb_ctl_done+0x64>)
    4fee:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    4ff0:	8863      	ldrh	r3, [r4, #2]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	bf14      	ite	ne
    4ff6:	2104      	movne	r1, #4
    4ff8:	2103      	moveq	r1, #3
    4ffa:	4b0d      	ldr	r3, [pc, #52]	; (5030 <usbdc_cb_ctl_done+0x64>)
    4ffc:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4ffe:	2001      	movs	r0, #1
    5000:	4b0c      	ldr	r3, [pc, #48]	; (5034 <usbdc_cb_ctl_done+0x68>)
    5002:	4798      	blx	r3
    5004:	e7e7      	b.n	4fd6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    5006:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    5008:	b2c0      	uxtb	r0, r0
    500a:	4b0b      	ldr	r3, [pc, #44]	; (5038 <usbdc_cb_ctl_done+0x6c>)
    500c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    500e:	8863      	ldrh	r3, [r4, #2]
    5010:	2b00      	cmp	r3, #0
    5012:	bf14      	ite	ne
    5014:	2103      	movne	r1, #3
    5016:	2102      	moveq	r1, #2
    5018:	4b05      	ldr	r3, [pc, #20]	; (5030 <usbdc_cb_ctl_done+0x64>)
    501a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    501c:	2001      	movs	r0, #1
    501e:	4b05      	ldr	r3, [pc, #20]	; (5034 <usbdc_cb_ctl_done+0x68>)
    5020:	4798      	blx	r3
    5022:	e7d8      	b.n	4fd6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    5024:	2201      	movs	r2, #1
    5026:	4621      	mov	r1, r4
    5028:	2000      	movs	r0, #0
    502a:	4b04      	ldr	r3, [pc, #16]	; (503c <usbdc_cb_ctl_done+0x70>)
    502c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    502e:	e7d2      	b.n	4fd6 <usbdc_cb_ctl_done+0xa>
    5030:	20000f00 	.word	0x20000f00
    5034:	00004f45 	.word	0x00004f45
    5038:	000015ed 	.word	0x000015ed
    503c:	00004f6d 	.word	0x00004f6d

00005040 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5040:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    5042:	4b0d      	ldr	r3, [pc, #52]	; (5078 <usbdc_reset+0x38>)
    5044:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    5046:	4d0d      	ldr	r5, [pc, #52]	; (507c <usbdc_reset+0x3c>)
    5048:	2602      	movs	r6, #2
    504a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    504c:	2400      	movs	r4, #0
    504e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    5050:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    5052:	4620      	mov	r0, r4
    5054:	4b0a      	ldr	r3, [pc, #40]	; (5080 <usbdc_reset+0x40>)
    5056:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5058:	7f28      	ldrb	r0, [r5, #28]
    505a:	4b0a      	ldr	r3, [pc, #40]	; (5084 <usbdc_reset+0x44>)
    505c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    505e:	4a0a      	ldr	r2, [pc, #40]	; (5088 <usbdc_reset+0x48>)
    5060:	4621      	mov	r1, r4
    5062:	4620      	mov	r0, r4
    5064:	4d09      	ldr	r5, [pc, #36]	; (508c <usbdc_reset+0x4c>)
    5066:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5068:	4a09      	ldr	r2, [pc, #36]	; (5090 <usbdc_reset+0x50>)
    506a:	4631      	mov	r1, r6
    506c:	4620      	mov	r0, r4
    506e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    5070:	4620      	mov	r0, r4
    5072:	4b08      	ldr	r3, [pc, #32]	; (5094 <usbdc_reset+0x54>)
    5074:	4798      	blx	r3
    5076:	bd70      	pop	{r4, r5, r6, pc}
    5078:	00004f21 	.word	0x00004f21
    507c:	20000f00 	.word	0x20000f00
    5080:	00001661 	.word	0x00001661
    5084:	0000164d 	.word	0x0000164d
    5088:	000050d9 	.word	0x000050d9
    508c:	00001861 	.word	0x00001861
    5090:	00004fcd 	.word	0x00004fcd
    5094:	0000168d 	.word	0x0000168d

00005098 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5098:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    509a:	b110      	cbz	r0, 50a2 <usbd_event_cb+0xa>
    509c:	2801      	cmp	r0, #1
    509e:	d004      	beq.n	50aa <usbd_event_cb+0x12>
    50a0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    50a2:	2000      	movs	r0, #0
    50a4:	4b02      	ldr	r3, [pc, #8]	; (50b0 <usbd_event_cb+0x18>)
    50a6:	4798      	blx	r3
		break;
    50a8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    50aa:	4b02      	ldr	r3, [pc, #8]	; (50b4 <usbd_event_cb+0x1c>)
    50ac:	4798      	blx	r3
    50ae:	bd08      	pop	{r3, pc}
    50b0:	00004f45 	.word	0x00004f45
    50b4:	00005041 	.word	0x00005041

000050b8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    50b8:	b500      	push	{lr}
    50ba:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    50bc:	9101      	str	r1, [sp, #4]
    50be:	9202      	str	r2, [sp, #8]
    50c0:	f88d 000c 	strb.w	r0, [sp, #12]
    50c4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    50c8:	a801      	add	r0, sp, #4
    50ca:	4b02      	ldr	r3, [pc, #8]	; (50d4 <usbdc_xfer+0x1c>)
    50cc:	4798      	blx	r3
}
    50ce:	b005      	add	sp, #20
    50d0:	f85d fb04 	ldr.w	pc, [sp], #4
    50d4:	000016d9 	.word	0x000016d9

000050d8 <usbdc_cb_ctl_req>:
{
    50d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    50dc:	b083      	sub	sp, #12
    50de:	4605      	mov	r5, r0
    50e0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    50e2:	2200      	movs	r2, #0
    50e4:	4b9b      	ldr	r3, [pc, #620]	; (5354 <usbdc_cb_ctl_req+0x27c>)
    50e6:	4798      	blx	r3
    50e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    50ec:	d00b      	beq.n	5106 <usbdc_cb_ctl_req+0x2e>
    50ee:	2801      	cmp	r0, #1
    50f0:	f000 81e3 	beq.w	54ba <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    50f4:	7823      	ldrb	r3, [r4, #0]
    50f6:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    50fa:	d008      	beq.n	510e <usbdc_cb_ctl_req+0x36>
    50fc:	2a80      	cmp	r2, #128	; 0x80
    50fe:	f000 80f4 	beq.w	52ea <usbdc_cb_ctl_req+0x212>
		return false;
    5102:	2000      	movs	r0, #0
    5104:	e000      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    5106:	2000      	movs	r0, #0
}
    5108:	b003      	add	sp, #12
    510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    510e:	7862      	ldrb	r2, [r4, #1]
    5110:	3a01      	subs	r2, #1
    5112:	2a0a      	cmp	r2, #10
    5114:	f200 81d3 	bhi.w	54be <usbdc_cb_ctl_req+0x3e6>
    5118:	e8df f012 	tbh	[pc, r2, lsl #1]
    511c:	01d10060 	.word	0x01d10060
    5120:	01d10076 	.word	0x01d10076
    5124:	01d1000b 	.word	0x01d1000b
    5128:	01d101d1 	.word	0x01d101d1
    512c:	01d10015 	.word	0x01d10015
    5130:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5132:	2301      	movs	r3, #1
    5134:	2200      	movs	r2, #0
    5136:	4611      	mov	r1, r2
    5138:	4628      	mov	r0, r5
    513a:	4c87      	ldr	r4, [pc, #540]	; (5358 <usbdc_cb_ctl_req+0x280>)
    513c:	47a0      	blx	r4
    513e:	fab0 f080 	clz	r0, r0
    5142:	0940      	lsrs	r0, r0, #5
    5144:	e7e0      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    5146:	8862      	ldrh	r2, [r4, #2]
    5148:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    514a:	b1ca      	cbz	r2, 5180 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    514c:	4b83      	ldr	r3, [pc, #524]	; (535c <usbdc_cb_ctl_req+0x284>)
    514e:	681b      	ldr	r3, [r3, #0]
    5150:	6859      	ldr	r1, [r3, #4]
    5152:	6818      	ldr	r0, [r3, #0]
    5154:	4b82      	ldr	r3, [pc, #520]	; (5360 <usbdc_cb_ctl_req+0x288>)
    5156:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5158:	2800      	cmp	r0, #0
    515a:	f000 81be 	beq.w	54da <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    515e:	78c2      	ldrb	r2, [r0, #3]
    5160:	7881      	ldrb	r1, [r0, #2]
    5162:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    5166:	fa10 f181 	uxtah	r1, r0, r1
    516a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    516c:	2204      	movs	r2, #4
    516e:	4b7d      	ldr	r3, [pc, #500]	; (5364 <usbdc_cb_ctl_req+0x28c>)
    5170:	4798      	blx	r3
    5172:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    5174:	b130      	cbz	r0, 5184 <usbdc_cb_ctl_req+0xac>
    5176:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    5178:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 535c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    517c:	4f79      	ldr	r7, [pc, #484]	; (5364 <usbdc_cb_ctl_req+0x28c>)
    517e:	e018      	b.n	51b2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    5180:	4b79      	ldr	r3, [pc, #484]	; (5368 <usbdc_cb_ctl_req+0x290>)
    5182:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5184:	2301      	movs	r3, #1
    5186:	2200      	movs	r2, #0
    5188:	4611      	mov	r1, r2
    518a:	4628      	mov	r0, r5
    518c:	4c72      	ldr	r4, [pc, #456]	; (5358 <usbdc_cb_ctl_req+0x280>)
    518e:	47a0      	blx	r4
    5190:	fab0 f080 	clz	r0, r0
    5194:	0940      	lsrs	r0, r0, #5
    5196:	e7b7      	b.n	5108 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    5198:	464c      	mov	r4, r9
    519a:	e000      	b.n	519e <usbdc_cb_ctl_req+0xc6>
    519c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    519e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    51a0:	7803      	ldrb	r3, [r0, #0]
    51a2:	4418      	add	r0, r3
    51a4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    51a6:	2204      	movs	r2, #4
    51a8:	9901      	ldr	r1, [sp, #4]
    51aa:	47b8      	blx	r7
    51ac:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    51ae:	2800      	cmp	r0, #0
    51b0:	d0e8      	beq.n	5184 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    51b2:	f890 9002 	ldrb.w	r9, [r0, #2]
    51b6:	45a1      	cmp	r9, r4
    51b8:	d0f1      	beq.n	519e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    51ba:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    51be:	2c00      	cmp	r4, #0
    51c0:	d0ea      	beq.n	5198 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    51c2:	2600      	movs	r6, #0
    51c4:	6863      	ldr	r3, [r4, #4]
    51c6:	466a      	mov	r2, sp
    51c8:	4631      	mov	r1, r6
    51ca:	4620      	mov	r0, r4
    51cc:	4798      	blx	r3
    51ce:	2800      	cmp	r0, #0
    51d0:	d0e4      	beq.n	519c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    51d2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    51d4:	2c00      	cmp	r4, #0
    51d6:	d1f5      	bne.n	51c4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    51d8:	464c      	mov	r4, r9
    51da:	e7e0      	b.n	519e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    51dc:	f003 031f 	and.w	r3, r3, #31
    51e0:	2b02      	cmp	r3, #2
    51e2:	f040 816e 	bne.w	54c2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    51e6:	88e3      	ldrh	r3, [r4, #6]
    51e8:	b10b      	cbz	r3, 51ee <usbdc_cb_ctl_req+0x116>
			return false;
    51ea:	2000      	movs	r0, #0
    51ec:	e78c      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    51ee:	88a0      	ldrh	r0, [r4, #4]
    51f0:	2100      	movs	r1, #0
    51f2:	b2c0      	uxtb	r0, r0
    51f4:	4b5d      	ldr	r3, [pc, #372]	; (536c <usbdc_cb_ctl_req+0x294>)
    51f6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    51f8:	2301      	movs	r3, #1
    51fa:	2200      	movs	r2, #0
    51fc:	4611      	mov	r1, r2
    51fe:	4628      	mov	r0, r5
    5200:	4c55      	ldr	r4, [pc, #340]	; (5358 <usbdc_cb_ctl_req+0x280>)
    5202:	47a0      	blx	r4
		return true;
    5204:	2001      	movs	r0, #1
    5206:	e77f      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5208:	f003 031f 	and.w	r3, r3, #31
    520c:	2b02      	cmp	r3, #2
    520e:	f040 815a 	bne.w	54c6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    5212:	88e3      	ldrh	r3, [r4, #6]
    5214:	b10b      	cbz	r3, 521a <usbdc_cb_ctl_req+0x142>
			return false;
    5216:	2000      	movs	r0, #0
    5218:	e776      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    521a:	88a0      	ldrh	r0, [r4, #4]
    521c:	2101      	movs	r1, #1
    521e:	b2c0      	uxtb	r0, r0
    5220:	4b52      	ldr	r3, [pc, #328]	; (536c <usbdc_cb_ctl_req+0x294>)
    5222:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5224:	2301      	movs	r3, #1
    5226:	2200      	movs	r2, #0
    5228:	4611      	mov	r1, r2
    522a:	4628      	mov	r0, r5
    522c:	4c4a      	ldr	r4, [pc, #296]	; (5358 <usbdc_cb_ctl_req+0x280>)
    522e:	47a0      	blx	r4
		return true;
    5230:	2001      	movs	r0, #1
    5232:	e769      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    5234:	8866      	ldrh	r6, [r4, #2]
    5236:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5238:	4a48      	ldr	r2, [pc, #288]	; (535c <usbdc_cb_ctl_req+0x284>)
    523a:	6813      	ldr	r3, [r2, #0]
    523c:	7ed2      	ldrb	r2, [r2, #27]
    523e:	6859      	ldr	r1, [r3, #4]
    5240:	6818      	ldr	r0, [r3, #0]
    5242:	4b47      	ldr	r3, [pc, #284]	; (5360 <usbdc_cb_ctl_req+0x288>)
    5244:	4798      	blx	r3
	if (NULL == ifc) {
    5246:	2800      	cmp	r0, #0
    5248:	d045      	beq.n	52d6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    524a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    524c:	78c2      	ldrb	r2, [r0, #3]
    524e:	7881      	ldrb	r1, [r0, #2]
    5250:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    5254:	fa10 f181 	uxtah	r1, r0, r1
    5258:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    525a:	2204      	movs	r2, #4
    525c:	4b41      	ldr	r3, [pc, #260]	; (5364 <usbdc_cb_ctl_req+0x28c>)
    525e:	4798      	blx	r3
    5260:	4603      	mov	r3, r0
    5262:	2800      	cmp	r0, #0
    5264:	d039      	beq.n	52da <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5266:	2704      	movs	r7, #4
    5268:	4d3e      	ldr	r5, [pc, #248]	; (5364 <usbdc_cb_ctl_req+0x28c>)
    526a:	e008      	b.n	527e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    526c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    526e:	7803      	ldrb	r3, [r0, #0]
    5270:	4418      	add	r0, r3
    5272:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5274:	463a      	mov	r2, r7
    5276:	9901      	ldr	r1, [sp, #4]
    5278:	47a8      	blx	r5
		if (NULL == ifc) {
    527a:	4603      	mov	r3, r0
    527c:	b378      	cbz	r0, 52de <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    527e:	789a      	ldrb	r2, [r3, #2]
    5280:	42a2      	cmp	r2, r4
    5282:	d1f3      	bne.n	526c <usbdc_cb_ctl_req+0x194>
    5284:	78da      	ldrb	r2, [r3, #3]
    5286:	42b2      	cmp	r2, r6
    5288:	d1f0      	bne.n	526c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    528a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    528c:	4b33      	ldr	r3, [pc, #204]	; (535c <usbdc_cb_ctl_req+0x284>)
    528e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    5290:	b33d      	cbz	r5, 52e2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    5292:	2701      	movs	r7, #1
    5294:	686b      	ldr	r3, [r5, #4]
    5296:	466a      	mov	r2, sp
    5298:	4639      	mov	r1, r7
    529a:	4628      	mov	r0, r5
    529c:	4798      	blx	r3
    529e:	b120      	cbz	r0, 52aa <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    52a0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    52a2:	2d00      	cmp	r5, #0
    52a4:	d1f6      	bne.n	5294 <usbdc_cb_ctl_req+0x1bc>
	return false;
    52a6:	2000      	movs	r0, #0
    52a8:	e72e      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    52aa:	686b      	ldr	r3, [r5, #4]
    52ac:	466a      	mov	r2, sp
    52ae:	2100      	movs	r1, #0
    52b0:	4628      	mov	r0, r5
    52b2:	4798      	blx	r3
    52b4:	b9b8      	cbnz	r0, 52e6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    52b6:	b136      	cbz	r6, 52c6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    52b8:	4a28      	ldr	r2, [pc, #160]	; (535c <usbdc_cb_ctl_req+0x284>)
    52ba:	2301      	movs	r3, #1
    52bc:	fa03 f404 	lsl.w	r4, r3, r4
    52c0:	7f53      	ldrb	r3, [r2, #29]
    52c2:	4323      	orrs	r3, r4
    52c4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    52c6:	2300      	movs	r3, #0
    52c8:	461a      	mov	r2, r3
    52ca:	4619      	mov	r1, r3
    52cc:	4618      	mov	r0, r3
    52ce:	4c22      	ldr	r4, [pc, #136]	; (5358 <usbdc_cb_ctl_req+0x280>)
    52d0:	47a0      	blx	r4
			return true;
    52d2:	2001      	movs	r0, #1
    52d4:	e718      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    52d6:	2000      	movs	r0, #0
    52d8:	e716      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    52da:	2000      	movs	r0, #0
    52dc:	e714      	b.n	5108 <usbdc_cb_ctl_req+0x30>
			return false;
    52de:	2000      	movs	r0, #0
    52e0:	e712      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	return false;
    52e2:	2000      	movs	r0, #0
    52e4:	e710      	b.n	5108 <usbdc_cb_ctl_req+0x30>
			return false;
    52e6:	2000      	movs	r0, #0
    52e8:	e70e      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    52ea:	7862      	ldrb	r2, [r4, #1]
    52ec:	2a0a      	cmp	r2, #10
    52ee:	f200 80ec 	bhi.w	54ca <usbdc_cb_ctl_req+0x3f2>
    52f2:	e8df f012 	tbh	[pc, r2, lsl #1]
    52f6:	008e      	.short	0x008e
    52f8:	00ea00ea 	.word	0x00ea00ea
    52fc:	00ea00ea 	.word	0x00ea00ea
    5300:	000b00ea 	.word	0x000b00ea
    5304:	008200ea 	.word	0x008200ea
    5308:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    530c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    530e:	0a13      	lsrs	r3, r2, #8
    5310:	2b02      	cmp	r3, #2
    5312:	d02d      	beq.n	5370 <usbdc_cb_ctl_req+0x298>
    5314:	2b03      	cmp	r3, #3
    5316:	d050      	beq.n	53ba <usbdc_cb_ctl_req+0x2e2>
    5318:	2b01      	cmp	r3, #1
    531a:	d001      	beq.n	5320 <usbdc_cb_ctl_req+0x248>
	return false;
    531c:	2000      	movs	r0, #0
    531e:	e6f3      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    5320:	88e2      	ldrh	r2, [r4, #6]
    5322:	2a12      	cmp	r2, #18
    5324:	bf28      	it	cs
    5326:	2212      	movcs	r2, #18
    5328:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    532a:	4b0c      	ldr	r3, [pc, #48]	; (535c <usbdc_cb_ctl_req+0x284>)
    532c:	681b      	ldr	r3, [r3, #0]
    532e:	2201      	movs	r2, #1
    5330:	6859      	ldr	r1, [r3, #4]
    5332:	6818      	ldr	r0, [r3, #0]
    5334:	4b0b      	ldr	r3, [pc, #44]	; (5364 <usbdc_cb_ctl_req+0x28c>)
    5336:	4798      	blx	r3
	if (!dev_desc) {
    5338:	4601      	mov	r1, r0
    533a:	2800      	cmp	r0, #0
    533c:	f000 80c7 	beq.w	54ce <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5340:	2300      	movs	r3, #0
    5342:	4622      	mov	r2, r4
    5344:	4628      	mov	r0, r5
    5346:	4c04      	ldr	r4, [pc, #16]	; (5358 <usbdc_cb_ctl_req+0x280>)
    5348:	47a0      	blx	r4
    534a:	fab0 f080 	clz	r0, r0
    534e:	0940      	lsrs	r0, r0, #5
    5350:	e6da      	b.n	5108 <usbdc_cb_ctl_req+0x30>
    5352:	bf00      	nop
    5354:	00004f6d 	.word	0x00004f6d
    5358:	000050b9 	.word	0x000050b9
    535c:	20000f00 	.word	0x20000f00
    5360:	0000567d 	.word	0x0000567d
    5364:	000055fd 	.word	0x000055fd
    5368:	00004f21 	.word	0x00004f21
    536c:	000017f9 	.word	0x000017f9
	uint16_t length   = req->wLength;
    5370:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5372:	4b5b      	ldr	r3, [pc, #364]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    5374:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	3201      	adds	r2, #1
    537a:	b2d2      	uxtb	r2, r2
    537c:	6859      	ldr	r1, [r3, #4]
    537e:	6818      	ldr	r0, [r3, #0]
    5380:	4b58      	ldr	r3, [pc, #352]	; (54e4 <usbdc_cb_ctl_req+0x40c>)
    5382:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5384:	4601      	mov	r1, r0
    5386:	2800      	cmp	r0, #0
    5388:	f000 80a3 	beq.w	54d2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    538c:	78c3      	ldrb	r3, [r0, #3]
    538e:	7882      	ldrb	r2, [r0, #2]
    5390:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    5394:	b292      	uxth	r2, r2
	if (length <= total_len) {
    5396:	4294      	cmp	r4, r2
    5398:	d90d      	bls.n	53b6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    539a:	3e01      	subs	r6, #1
    539c:	4226      	tst	r6, r4
    539e:	bf0c      	ite	eq
    53a0:	2301      	moveq	r3, #1
    53a2:	2300      	movne	r3, #0
		length = total_len;
    53a4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    53a6:	4622      	mov	r2, r4
    53a8:	4628      	mov	r0, r5
    53aa:	4c4f      	ldr	r4, [pc, #316]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    53ac:	47a0      	blx	r4
    53ae:	fab0 f080 	clz	r0, r0
    53b2:	0940      	lsrs	r0, r0, #5
    53b4:	e6a8      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    53b6:	2300      	movs	r3, #0
    53b8:	e7f5      	b.n	53a6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    53ba:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    53bc:	4b48      	ldr	r3, [pc, #288]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    53be:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	b2d2      	uxtb	r2, r2
    53c4:	6859      	ldr	r1, [r3, #4]
    53c6:	6818      	ldr	r0, [r3, #0]
    53c8:	4b48      	ldr	r3, [pc, #288]	; (54ec <usbdc_cb_ctl_req+0x414>)
    53ca:	4798      	blx	r3
	if (NULL == str_desc) {
    53cc:	4601      	mov	r1, r0
    53ce:	2800      	cmp	r0, #0
    53d0:	f000 8081 	beq.w	54d6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    53d4:	7802      	ldrb	r2, [r0, #0]
    53d6:	4294      	cmp	r4, r2
    53d8:	d90d      	bls.n	53f6 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    53da:	3e01      	subs	r6, #1
    53dc:	4226      	tst	r6, r4
    53de:	bf0c      	ite	eq
    53e0:	2301      	moveq	r3, #1
    53e2:	2300      	movne	r3, #0
		length = str_desc[0];
    53e4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    53e6:	4622      	mov	r2, r4
    53e8:	4628      	mov	r0, r5
    53ea:	4c3f      	ldr	r4, [pc, #252]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    53ec:	47a0      	blx	r4
    53ee:	fab0 f080 	clz	r0, r0
    53f2:	0940      	lsrs	r0, r0, #5
    53f4:	e688      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    53f6:	2300      	movs	r3, #0
    53f8:	e7f5      	b.n	53e6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    53fa:	4939      	ldr	r1, [pc, #228]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    53fc:	694b      	ldr	r3, [r1, #20]
    53fe:	7eca      	ldrb	r2, [r1, #27]
    5400:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    5402:	2300      	movs	r3, #0
    5404:	2201      	movs	r2, #1
    5406:	6949      	ldr	r1, [r1, #20]
    5408:	4628      	mov	r0, r5
    540a:	4c37      	ldr	r4, [pc, #220]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    540c:	47a0      	blx	r4
		return true;
    540e:	2001      	movs	r0, #1
    5410:	e67a      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5412:	f003 031f 	and.w	r3, r3, #31
    5416:	2b01      	cmp	r3, #1
    5418:	d903      	bls.n	5422 <usbdc_cb_ctl_req+0x34a>
    541a:	2b02      	cmp	r3, #2
    541c:	d010      	beq.n	5440 <usbdc_cb_ctl_req+0x368>
		return false;
    541e:	2000      	movs	r0, #0
    5420:	e672      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		st = 0;
    5422:	2300      	movs	r3, #0
    5424:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5426:	492e      	ldr	r1, [pc, #184]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    5428:	694b      	ldr	r3, [r1, #20]
    542a:	f8bd 2000 	ldrh.w	r2, [sp]
    542e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5430:	2300      	movs	r3, #0
    5432:	2202      	movs	r2, #2
    5434:	6949      	ldr	r1, [r1, #20]
    5436:	4628      	mov	r0, r5
    5438:	4c2b      	ldr	r4, [pc, #172]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    543a:	47a0      	blx	r4
	return true;
    543c:	2001      	movs	r0, #1
    543e:	e663      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5440:	88a0      	ldrh	r0, [r4, #4]
    5442:	2102      	movs	r1, #2
    5444:	b2c0      	uxtb	r0, r0
    5446:	4b2a      	ldr	r3, [pc, #168]	; (54f0 <usbdc_cb_ctl_req+0x418>)
    5448:	4798      	blx	r3
		if (st < 0) {
    544a:	2800      	cmp	r0, #0
    544c:	db03      	blt.n	5456 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    544e:	f000 0001 	and.w	r0, r0, #1
    5452:	9000      	str	r0, [sp, #0]
    5454:	e7e7      	b.n	5426 <usbdc_cb_ctl_req+0x34e>
			return false;
    5456:	2000      	movs	r0, #0
    5458:	e656      	b.n	5108 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    545a:	4b21      	ldr	r3, [pc, #132]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    545c:	7f5b      	ldrb	r3, [r3, #29]
    545e:	88a2      	ldrh	r2, [r4, #4]
    5460:	4113      	asrs	r3, r2
    5462:	f013 0f01 	tst.w	r3, #1
    5466:	d012      	beq.n	548e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5468:	4b1d      	ldr	r3, [pc, #116]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    546a:	691d      	ldr	r5, [r3, #16]
	return false;
    546c:	2000      	movs	r0, #0
	while (NULL != func) {
    546e:	2d00      	cmp	r5, #0
    5470:	f43f ae4a 	beq.w	5108 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    5474:	2602      	movs	r6, #2
    5476:	686b      	ldr	r3, [r5, #4]
    5478:	4622      	mov	r2, r4
    547a:	4631      	mov	r1, r6
    547c:	4628      	mov	r0, r5
    547e:	4798      	blx	r3
    5480:	2800      	cmp	r0, #0
    5482:	da0f      	bge.n	54a4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    5484:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    5486:	2d00      	cmp	r5, #0
    5488:	d1f5      	bne.n	5476 <usbdc_cb_ctl_req+0x39e>
	return false;
    548a:	2000      	movs	r0, #0
    548c:	e63c      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    548e:	4914      	ldr	r1, [pc, #80]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    5490:	694b      	ldr	r3, [r1, #20]
    5492:	2000      	movs	r0, #0
    5494:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5496:	4603      	mov	r3, r0
    5498:	2201      	movs	r2, #1
    549a:	6949      	ldr	r1, [r1, #20]
    549c:	4c12      	ldr	r4, [pc, #72]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    549e:	47a0      	blx	r4
		return true;
    54a0:	2001      	movs	r0, #1
    54a2:	e631      	b.n	5108 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    54a4:	490e      	ldr	r1, [pc, #56]	; (54e0 <usbdc_cb_ctl_req+0x408>)
    54a6:	694b      	ldr	r3, [r1, #20]
    54a8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    54aa:	2300      	movs	r3, #0
    54ac:	2201      	movs	r2, #1
    54ae:	6949      	ldr	r1, [r1, #20]
    54b0:	4618      	mov	r0, r3
    54b2:	4c0d      	ldr	r4, [pc, #52]	; (54e8 <usbdc_cb_ctl_req+0x410>)
    54b4:	47a0      	blx	r4
			return true;
    54b6:	2001      	movs	r0, #1
    54b8:	e626      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return true;
    54ba:	2001      	movs	r0, #1
    54bc:	e624      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54be:	2000      	movs	r0, #0
    54c0:	e622      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54c2:	2000      	movs	r0, #0
    54c4:	e620      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54c6:	2000      	movs	r0, #0
    54c8:	e61e      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54ca:	2000      	movs	r0, #0
    54cc:	e61c      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54ce:	2000      	movs	r0, #0
    54d0:	e61a      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54d2:	2000      	movs	r0, #0
    54d4:	e618      	b.n	5108 <usbdc_cb_ctl_req+0x30>
		return false;
    54d6:	2000      	movs	r0, #0
    54d8:	e616      	b.n	5108 <usbdc_cb_ctl_req+0x30>
			return false;
    54da:	2000      	movs	r0, #0
    54dc:	e614      	b.n	5108 <usbdc_cb_ctl_req+0x30>
    54de:	bf00      	nop
    54e0:	20000f00 	.word	0x20000f00
    54e4:	0000567d 	.word	0x0000567d
    54e8:	000050b9 	.word	0x000050b9
    54ec:	000056e5 	.word	0x000056e5
    54f0:	000017f9 	.word	0x000017f9

000054f4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    54f4:	b508      	push	{r3, lr}
	switch (type) {
    54f6:	2801      	cmp	r0, #1
    54f8:	d007      	beq.n	550a <usbdc_register_handler+0x16>
    54fa:	b110      	cbz	r0, 5502 <usbdc_register_handler+0xe>
    54fc:	2802      	cmp	r0, #2
    54fe:	d008      	beq.n	5512 <usbdc_register_handler+0x1e>
    5500:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5502:	4806      	ldr	r0, [pc, #24]	; (551c <usbdc_register_handler+0x28>)
    5504:	4b06      	ldr	r3, [pc, #24]	; (5520 <usbdc_register_handler+0x2c>)
    5506:	4798      	blx	r3
		break;
    5508:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    550a:	4806      	ldr	r0, [pc, #24]	; (5524 <usbdc_register_handler+0x30>)
    550c:	4b04      	ldr	r3, [pc, #16]	; (5520 <usbdc_register_handler+0x2c>)
    550e:	4798      	blx	r3
		break;
    5510:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5512:	4805      	ldr	r0, [pc, #20]	; (5528 <usbdc_register_handler+0x34>)
    5514:	4b02      	ldr	r3, [pc, #8]	; (5520 <usbdc_register_handler+0x2c>)
    5516:	4798      	blx	r3
    5518:	bd08      	pop	{r3, pc}
    551a:	bf00      	nop
    551c:	20000f04 	.word	0x20000f04
    5520:	000018d5 	.word	0x000018d5
    5524:	20000f08 	.word	0x20000f08
    5528:	20000f0c 	.word	0x20000f0c

0000552c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    552c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    552e:	4605      	mov	r5, r0
    5530:	f240 3255 	movw	r2, #853	; 0x355
    5534:	490c      	ldr	r1, [pc, #48]	; (5568 <usbdc_init+0x3c>)
    5536:	3000      	adds	r0, #0
    5538:	bf18      	it	ne
    553a:	2001      	movne	r0, #1
    553c:	4b0b      	ldr	r3, [pc, #44]	; (556c <usbdc_init+0x40>)
    553e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5540:	4b0b      	ldr	r3, [pc, #44]	; (5570 <usbdc_init+0x44>)
    5542:	4798      	blx	r3
	if (rc < 0) {
    5544:	2800      	cmp	r0, #0
    5546:	db0e      	blt.n	5566 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5548:	4c0a      	ldr	r4, [pc, #40]	; (5574 <usbdc_init+0x48>)
    554a:	2220      	movs	r2, #32
    554c:	2100      	movs	r1, #0
    554e:	4620      	mov	r0, r4
    5550:	4b09      	ldr	r3, [pc, #36]	; (5578 <usbdc_init+0x4c>)
    5552:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5554:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5556:	4909      	ldr	r1, [pc, #36]	; (557c <usbdc_init+0x50>)
    5558:	2000      	movs	r0, #0
    555a:	4c09      	ldr	r4, [pc, #36]	; (5580 <usbdc_init+0x54>)
    555c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    555e:	4909      	ldr	r1, [pc, #36]	; (5584 <usbdc_init+0x58>)
    5560:	2001      	movs	r0, #1
    5562:	47a0      	blx	r4

	return 0;
    5564:	2000      	movs	r0, #0
}
    5566:	bd38      	pop	{r3, r4, r5, pc}
    5568:	000063f4 	.word	0x000063f4
    556c:	000018ad 	.word	0x000018ad
    5570:	00001561 	.word	0x00001561
    5574:	20000f00 	.word	0x20000f00
    5578:	000057d7 	.word	0x000057d7
    557c:	00004fad 	.word	0x00004fad
    5580:	000015c9 	.word	0x000015c9
    5584:	00005099 	.word	0x00005099

00005588 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    5588:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    558a:	4601      	mov	r1, r0
    558c:	4801      	ldr	r0, [pc, #4]	; (5594 <usbdc_register_function+0xc>)
    558e:	4b02      	ldr	r3, [pc, #8]	; (5598 <usbdc_register_function+0x10>)
    5590:	4798      	blx	r3
    5592:	bd08      	pop	{r3, pc}
    5594:	20000f10 	.word	0x20000f10
    5598:	000018d5 	.word	0x000018d5

0000559c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    559c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    559e:	4b0a      	ldr	r3, [pc, #40]	; (55c8 <usbdc_start+0x2c>)
    55a0:	7e9b      	ldrb	r3, [r3, #26]
    55a2:	b95b      	cbnz	r3, 55bc <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    55a4:	b168      	cbz	r0, 55c2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    55a6:	4b08      	ldr	r3, [pc, #32]	; (55c8 <usbdc_start+0x2c>)
    55a8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    55aa:	6802      	ldr	r2, [r0, #0]
    55ac:	79d2      	ldrb	r2, [r2, #7]
    55ae:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    55b0:	2201      	movs	r2, #1
    55b2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    55b4:	4b05      	ldr	r3, [pc, #20]	; (55cc <usbdc_start+0x30>)
    55b6:	4798      	blx	r3
	return ERR_NONE;
    55b8:	2000      	movs	r0, #0
    55ba:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    55bc:	f06f 0003 	mvn.w	r0, #3
    55c0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    55c2:	f06f 0008 	mvn.w	r0, #8
}
    55c6:	bd08      	pop	{r3, pc}
    55c8:	20000f00 	.word	0x20000f00
    55cc:	000015d5 	.word	0x000015d5

000055d0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    55d0:	b508      	push	{r3, lr}
	usb_d_attach();
    55d2:	4b01      	ldr	r3, [pc, #4]	; (55d8 <usbdc_attach+0x8>)
    55d4:	4798      	blx	r3
    55d6:	bd08      	pop	{r3, pc}
    55d8:	000015e1 	.word	0x000015e1

000055dc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    55dc:	4b01      	ldr	r3, [pc, #4]	; (55e4 <usbdc_get_ctrl_buffer+0x8>)
    55de:	6958      	ldr	r0, [r3, #20]
    55e0:	4770      	bx	lr
    55e2:	bf00      	nop
    55e4:	20000f00 	.word	0x20000f00

000055e8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    55e8:	4b03      	ldr	r3, [pc, #12]	; (55f8 <usbdc_get_state+0x10>)
    55ea:	7e98      	ldrb	r0, [r3, #26]
    55ec:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    55f0:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    55f2:	bf18      	it	ne
    55f4:	2010      	movne	r0, #16
    55f6:	4770      	bx	lr
    55f8:	20000f00 	.word	0x20000f00

000055fc <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    55fc:	4288      	cmp	r0, r1
    55fe:	d214      	bcs.n	562a <usb_find_desc+0x2e>
	return desc[0];
    5600:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5602:	2b01      	cmp	r3, #1
    5604:	d913      	bls.n	562e <usb_find_desc+0x32>
{
    5606:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    5608:	7844      	ldrb	r4, [r0, #1]
    560a:	4294      	cmp	r4, r2
    560c:	d00a      	beq.n	5624 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    560e:	4418      	add	r0, r3
	while (desc < eof) {
    5610:	4281      	cmp	r1, r0
    5612:	d906      	bls.n	5622 <usb_find_desc+0x26>
	return desc[0];
    5614:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5616:	2b01      	cmp	r3, #1
    5618:	d90b      	bls.n	5632 <usb_find_desc+0x36>
	return desc[1];
    561a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    561c:	4294      	cmp	r4, r2
    561e:	d1f6      	bne.n	560e <usb_find_desc+0x12>
    5620:	e000      	b.n	5624 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5622:	2000      	movs	r0, #0
}
    5624:	f85d 4b04 	ldr.w	r4, [sp], #4
    5628:	4770      	bx	lr
	return NULL;
    562a:	2000      	movs	r0, #0
    562c:	4770      	bx	lr
		_desc_len_check();
    562e:	2000      	movs	r0, #0
    5630:	4770      	bx	lr
    5632:	2000      	movs	r0, #0
    5634:	e7f6      	b.n	5624 <usb_find_desc+0x28>

00005636 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5636:	4288      	cmp	r0, r1
    5638:	d216      	bcs.n	5668 <usb_find_ep_desc+0x32>
	return desc[0];
    563a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    563c:	2b01      	cmp	r3, #1
    563e:	d915      	bls.n	566c <usb_find_ep_desc+0x36>
	return desc[1];
    5640:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5642:	2a04      	cmp	r2, #4
    5644:	d014      	beq.n	5670 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5646:	2a05      	cmp	r2, #5
    5648:	d00b      	beq.n	5662 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    564a:	4418      	add	r0, r3
	while (desc < eof) {
    564c:	4281      	cmp	r1, r0
    564e:	d909      	bls.n	5664 <usb_find_ep_desc+0x2e>
	return desc[0];
    5650:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5652:	2b01      	cmp	r3, #1
    5654:	d90e      	bls.n	5674 <usb_find_ep_desc+0x3e>
	return desc[1];
    5656:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5658:	2a04      	cmp	r2, #4
    565a:	d00d      	beq.n	5678 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    565c:	2a05      	cmp	r2, #5
    565e:	d1f4      	bne.n	564a <usb_find_ep_desc+0x14>
    5660:	e00b      	b.n	567a <usb_find_ep_desc+0x44>
    5662:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5664:	2000      	movs	r0, #0
    5666:	4770      	bx	lr
    5668:	2000      	movs	r0, #0
    566a:	4770      	bx	lr
		_desc_len_check();
    566c:	2000      	movs	r0, #0
    566e:	4770      	bx	lr
	return NULL;
    5670:	2000      	movs	r0, #0
    5672:	4770      	bx	lr
		_desc_len_check();
    5674:	2000      	movs	r0, #0
    5676:	4770      	bx	lr
	return NULL;
    5678:	2000      	movs	r0, #0
}
    567a:	4770      	bx	lr

0000567c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    567c:	b538      	push	{r3, r4, r5, lr}
    567e:	460c      	mov	r4, r1
    5680:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    5682:	2202      	movs	r2, #2
    5684:	4b16      	ldr	r3, [pc, #88]	; (56e0 <usb_find_cfg_desc+0x64>)
    5686:	4798      	blx	r3
	if (!desc) {
    5688:	4603      	mov	r3, r0
    568a:	b1e8      	cbz	r0, 56c8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    568c:	4284      	cmp	r4, r0
    568e:	d91d      	bls.n	56cc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    5690:	7802      	ldrb	r2, [r0, #0]
    5692:	2a01      	cmp	r2, #1
    5694:	d91c      	bls.n	56d0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    5696:	7842      	ldrb	r2, [r0, #1]
    5698:	2a02      	cmp	r2, #2
    569a:	d11b      	bne.n	56d4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    569c:	7942      	ldrb	r2, [r0, #5]
    569e:	42aa      	cmp	r2, r5
    56a0:	d012      	beq.n	56c8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    56a2:	78d9      	ldrb	r1, [r3, #3]
    56a4:	789a      	ldrb	r2, [r3, #2]
    56a6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    56aa:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    56ae:	429c      	cmp	r4, r3
    56b0:	d909      	bls.n	56c6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    56b2:	781a      	ldrb	r2, [r3, #0]
    56b4:	2a01      	cmp	r2, #1
    56b6:	d90f      	bls.n	56d8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    56b8:	785a      	ldrb	r2, [r3, #1]
    56ba:	2a02      	cmp	r2, #2
    56bc:	d10e      	bne.n	56dc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    56be:	795a      	ldrb	r2, [r3, #5]
    56c0:	42aa      	cmp	r2, r5
    56c2:	d1ee      	bne.n	56a2 <usb_find_cfg_desc+0x26>
    56c4:	e000      	b.n	56c8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    56c6:	2300      	movs	r3, #0
}
    56c8:	4618      	mov	r0, r3
    56ca:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    56cc:	2300      	movs	r3, #0
    56ce:	e7fb      	b.n	56c8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    56d0:	2300      	movs	r3, #0
    56d2:	e7f9      	b.n	56c8 <usb_find_cfg_desc+0x4c>
	return NULL;
    56d4:	2300      	movs	r3, #0
    56d6:	e7f7      	b.n	56c8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    56d8:	2300      	movs	r3, #0
    56da:	e7f5      	b.n	56c8 <usb_find_cfg_desc+0x4c>
	return NULL;
    56dc:	2300      	movs	r3, #0
    56de:	e7f3      	b.n	56c8 <usb_find_cfg_desc+0x4c>
    56e0:	000055fd 	.word	0x000055fd

000056e4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    56e4:	4288      	cmp	r0, r1
    56e6:	d217      	bcs.n	5718 <usb_find_str_desc+0x34>
{
    56e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ec:	460d      	mov	r5, r1
    56ee:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    56f0:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    56f2:	f04f 0803 	mov.w	r8, #3
    56f6:	4f0c      	ldr	r7, [pc, #48]	; (5728 <usb_find_str_desc+0x44>)
    56f8:	4642      	mov	r2, r8
    56fa:	4629      	mov	r1, r5
    56fc:	47b8      	blx	r7
		if (desc) {
    56fe:	4603      	mov	r3, r0
    5700:	b170      	cbz	r0, 5720 <usb_find_str_desc+0x3c>
	return desc[0];
    5702:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    5704:	2801      	cmp	r0, #1
    5706:	d90a      	bls.n	571e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    5708:	42a6      	cmp	r6, r4
    570a:	d009      	beq.n	5720 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    570c:	4418      	add	r0, r3
    570e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    5710:	4285      	cmp	r5, r0
    5712:	d8f1      	bhi.n	56f8 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5714:	2300      	movs	r3, #0
    5716:	e003      	b.n	5720 <usb_find_str_desc+0x3c>
    5718:	2300      	movs	r3, #0
}
    571a:	4618      	mov	r0, r3
    571c:	4770      	bx	lr
			_desc_len_check();
    571e:	2300      	movs	r3, #0
}
    5720:	4618      	mov	r0, r3
    5722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5726:	bf00      	nop
    5728:	000055fd 	.word	0x000055fd

0000572c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    572c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    572e:	4805      	ldr	r0, [pc, #20]	; (5744 <cdc_device_acm_init+0x18>)
    5730:	4b05      	ldr	r3, [pc, #20]	; (5748 <cdc_device_acm_init+0x1c>)
    5732:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    5734:	4b05      	ldr	r3, [pc, #20]	; (574c <cdc_device_acm_init+0x20>)
    5736:	4798      	blx	r3

	usbdc_start(single_desc);
    5738:	4805      	ldr	r0, [pc, #20]	; (5750 <cdc_device_acm_init+0x24>)
    573a:	4b06      	ldr	r3, [pc, #24]	; (5754 <cdc_device_acm_init+0x28>)
    573c:	4798      	blx	r3
	usbdc_attach();
    573e:	4b06      	ldr	r3, [pc, #24]	; (5758 <cdc_device_acm_init+0x2c>)
    5740:	4798      	blx	r3
    5742:	bd08      	pop	{r3, pc}
    5744:	20000f60 	.word	0x20000f60
    5748:	0000552d 	.word	0x0000552d
    574c:	00004edd 	.word	0x00004edd
    5750:	2000030c 	.word	0x2000030c
    5754:	0000559d 	.word	0x0000559d
    5758:	000055d1 	.word	0x000055d1

0000575c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    575c:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    575e:	4b01      	ldr	r3, [pc, #4]	; (5764 <usb_init+0x8>)
    5760:	4798      	blx	r3
    5762:	bd08      	pop	{r3, pc}
    5764:	0000572d 	.word	0x0000572d

00005768 <__libc_init_array>:
    5768:	b570      	push	{r4, r5, r6, lr}
    576a:	4e0d      	ldr	r6, [pc, #52]	; (57a0 <__libc_init_array+0x38>)
    576c:	4c0d      	ldr	r4, [pc, #52]	; (57a4 <__libc_init_array+0x3c>)
    576e:	1ba4      	subs	r4, r4, r6
    5770:	10a4      	asrs	r4, r4, #2
    5772:	2500      	movs	r5, #0
    5774:	42a5      	cmp	r5, r4
    5776:	d109      	bne.n	578c <__libc_init_array+0x24>
    5778:	4e0b      	ldr	r6, [pc, #44]	; (57a8 <__libc_init_array+0x40>)
    577a:	4c0c      	ldr	r4, [pc, #48]	; (57ac <__libc_init_array+0x44>)
    577c:	f000 fe90 	bl	64a0 <_init>
    5780:	1ba4      	subs	r4, r4, r6
    5782:	10a4      	asrs	r4, r4, #2
    5784:	2500      	movs	r5, #0
    5786:	42a5      	cmp	r5, r4
    5788:	d105      	bne.n	5796 <__libc_init_array+0x2e>
    578a:	bd70      	pop	{r4, r5, r6, pc}
    578c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5790:	4798      	blx	r3
    5792:	3501      	adds	r5, #1
    5794:	e7ee      	b.n	5774 <__libc_init_array+0xc>
    5796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    579a:	4798      	blx	r3
    579c:	3501      	adds	r5, #1
    579e:	e7f2      	b.n	5786 <__libc_init_array+0x1e>
    57a0:	000064ac 	.word	0x000064ac
    57a4:	000064ac 	.word	0x000064ac
    57a8:	000064ac 	.word	0x000064ac
    57ac:	000064b0 	.word	0x000064b0

000057b0 <malloc>:
    57b0:	4b02      	ldr	r3, [pc, #8]	; (57bc <malloc+0xc>)
    57b2:	4601      	mov	r1, r0
    57b4:	6818      	ldr	r0, [r3, #0]
    57b6:	f000 b865 	b.w	5884 <_malloc_r>
    57ba:	bf00      	nop
    57bc:	2000036c 	.word	0x2000036c

000057c0 <memcpy>:
    57c0:	b510      	push	{r4, lr}
    57c2:	1e43      	subs	r3, r0, #1
    57c4:	440a      	add	r2, r1
    57c6:	4291      	cmp	r1, r2
    57c8:	d100      	bne.n	57cc <memcpy+0xc>
    57ca:	bd10      	pop	{r4, pc}
    57cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    57d0:	f803 4f01 	strb.w	r4, [r3, #1]!
    57d4:	e7f7      	b.n	57c6 <memcpy+0x6>

000057d6 <memset>:
    57d6:	4402      	add	r2, r0
    57d8:	4603      	mov	r3, r0
    57da:	4293      	cmp	r3, r2
    57dc:	d100      	bne.n	57e0 <memset+0xa>
    57de:	4770      	bx	lr
    57e0:	f803 1b01 	strb.w	r1, [r3], #1
    57e4:	e7f9      	b.n	57da <memset+0x4>
	...

000057e8 <_free_r>:
    57e8:	b538      	push	{r3, r4, r5, lr}
    57ea:	4605      	mov	r5, r0
    57ec:	2900      	cmp	r1, #0
    57ee:	d045      	beq.n	587c <_free_r+0x94>
    57f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    57f4:	1f0c      	subs	r4, r1, #4
    57f6:	2b00      	cmp	r3, #0
    57f8:	bfb8      	it	lt
    57fa:	18e4      	addlt	r4, r4, r3
    57fc:	f000 f8d4 	bl	59a8 <__malloc_lock>
    5800:	4a1f      	ldr	r2, [pc, #124]	; (5880 <_free_r+0x98>)
    5802:	6813      	ldr	r3, [r2, #0]
    5804:	4610      	mov	r0, r2
    5806:	b933      	cbnz	r3, 5816 <_free_r+0x2e>
    5808:	6063      	str	r3, [r4, #4]
    580a:	6014      	str	r4, [r2, #0]
    580c:	4628      	mov	r0, r5
    580e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5812:	f000 b8ca 	b.w	59aa <__malloc_unlock>
    5816:	42a3      	cmp	r3, r4
    5818:	d90c      	bls.n	5834 <_free_r+0x4c>
    581a:	6821      	ldr	r1, [r4, #0]
    581c:	1862      	adds	r2, r4, r1
    581e:	4293      	cmp	r3, r2
    5820:	bf04      	itt	eq
    5822:	681a      	ldreq	r2, [r3, #0]
    5824:	685b      	ldreq	r3, [r3, #4]
    5826:	6063      	str	r3, [r4, #4]
    5828:	bf04      	itt	eq
    582a:	1852      	addeq	r2, r2, r1
    582c:	6022      	streq	r2, [r4, #0]
    582e:	6004      	str	r4, [r0, #0]
    5830:	e7ec      	b.n	580c <_free_r+0x24>
    5832:	4613      	mov	r3, r2
    5834:	685a      	ldr	r2, [r3, #4]
    5836:	b10a      	cbz	r2, 583c <_free_r+0x54>
    5838:	42a2      	cmp	r2, r4
    583a:	d9fa      	bls.n	5832 <_free_r+0x4a>
    583c:	6819      	ldr	r1, [r3, #0]
    583e:	1858      	adds	r0, r3, r1
    5840:	42a0      	cmp	r0, r4
    5842:	d10b      	bne.n	585c <_free_r+0x74>
    5844:	6820      	ldr	r0, [r4, #0]
    5846:	4401      	add	r1, r0
    5848:	1858      	adds	r0, r3, r1
    584a:	4282      	cmp	r2, r0
    584c:	6019      	str	r1, [r3, #0]
    584e:	d1dd      	bne.n	580c <_free_r+0x24>
    5850:	6810      	ldr	r0, [r2, #0]
    5852:	6852      	ldr	r2, [r2, #4]
    5854:	605a      	str	r2, [r3, #4]
    5856:	4401      	add	r1, r0
    5858:	6019      	str	r1, [r3, #0]
    585a:	e7d7      	b.n	580c <_free_r+0x24>
    585c:	d902      	bls.n	5864 <_free_r+0x7c>
    585e:	230c      	movs	r3, #12
    5860:	602b      	str	r3, [r5, #0]
    5862:	e7d3      	b.n	580c <_free_r+0x24>
    5864:	6820      	ldr	r0, [r4, #0]
    5866:	1821      	adds	r1, r4, r0
    5868:	428a      	cmp	r2, r1
    586a:	bf04      	itt	eq
    586c:	6811      	ldreq	r1, [r2, #0]
    586e:	6852      	ldreq	r2, [r2, #4]
    5870:	6062      	str	r2, [r4, #4]
    5872:	bf04      	itt	eq
    5874:	1809      	addeq	r1, r1, r0
    5876:	6021      	streq	r1, [r4, #0]
    5878:	605c      	str	r4, [r3, #4]
    587a:	e7c7      	b.n	580c <_free_r+0x24>
    587c:	bd38      	pop	{r3, r4, r5, pc}
    587e:	bf00      	nop
    5880:	20000fa0 	.word	0x20000fa0

00005884 <_malloc_r>:
    5884:	b570      	push	{r4, r5, r6, lr}
    5886:	1ccd      	adds	r5, r1, #3
    5888:	f025 0503 	bic.w	r5, r5, #3
    588c:	3508      	adds	r5, #8
    588e:	2d0c      	cmp	r5, #12
    5890:	bf38      	it	cc
    5892:	250c      	movcc	r5, #12
    5894:	2d00      	cmp	r5, #0
    5896:	4606      	mov	r6, r0
    5898:	db01      	blt.n	589e <_malloc_r+0x1a>
    589a:	42a9      	cmp	r1, r5
    589c:	d903      	bls.n	58a6 <_malloc_r+0x22>
    589e:	230c      	movs	r3, #12
    58a0:	6033      	str	r3, [r6, #0]
    58a2:	2000      	movs	r0, #0
    58a4:	bd70      	pop	{r4, r5, r6, pc}
    58a6:	f000 f87f 	bl	59a8 <__malloc_lock>
    58aa:	4a23      	ldr	r2, [pc, #140]	; (5938 <_malloc_r+0xb4>)
    58ac:	6814      	ldr	r4, [r2, #0]
    58ae:	4621      	mov	r1, r4
    58b0:	b991      	cbnz	r1, 58d8 <_malloc_r+0x54>
    58b2:	4c22      	ldr	r4, [pc, #136]	; (593c <_malloc_r+0xb8>)
    58b4:	6823      	ldr	r3, [r4, #0]
    58b6:	b91b      	cbnz	r3, 58c0 <_malloc_r+0x3c>
    58b8:	4630      	mov	r0, r6
    58ba:	f000 f841 	bl	5940 <_sbrk_r>
    58be:	6020      	str	r0, [r4, #0]
    58c0:	4629      	mov	r1, r5
    58c2:	4630      	mov	r0, r6
    58c4:	f000 f83c 	bl	5940 <_sbrk_r>
    58c8:	1c43      	adds	r3, r0, #1
    58ca:	d126      	bne.n	591a <_malloc_r+0x96>
    58cc:	230c      	movs	r3, #12
    58ce:	6033      	str	r3, [r6, #0]
    58d0:	4630      	mov	r0, r6
    58d2:	f000 f86a 	bl	59aa <__malloc_unlock>
    58d6:	e7e4      	b.n	58a2 <_malloc_r+0x1e>
    58d8:	680b      	ldr	r3, [r1, #0]
    58da:	1b5b      	subs	r3, r3, r5
    58dc:	d41a      	bmi.n	5914 <_malloc_r+0x90>
    58de:	2b0b      	cmp	r3, #11
    58e0:	d90f      	bls.n	5902 <_malloc_r+0x7e>
    58e2:	600b      	str	r3, [r1, #0]
    58e4:	50cd      	str	r5, [r1, r3]
    58e6:	18cc      	adds	r4, r1, r3
    58e8:	4630      	mov	r0, r6
    58ea:	f000 f85e 	bl	59aa <__malloc_unlock>
    58ee:	f104 000b 	add.w	r0, r4, #11
    58f2:	1d23      	adds	r3, r4, #4
    58f4:	f020 0007 	bic.w	r0, r0, #7
    58f8:	1ac3      	subs	r3, r0, r3
    58fa:	d01b      	beq.n	5934 <_malloc_r+0xb0>
    58fc:	425a      	negs	r2, r3
    58fe:	50e2      	str	r2, [r4, r3]
    5900:	bd70      	pop	{r4, r5, r6, pc}
    5902:	428c      	cmp	r4, r1
    5904:	bf0d      	iteet	eq
    5906:	6863      	ldreq	r3, [r4, #4]
    5908:	684b      	ldrne	r3, [r1, #4]
    590a:	6063      	strne	r3, [r4, #4]
    590c:	6013      	streq	r3, [r2, #0]
    590e:	bf18      	it	ne
    5910:	460c      	movne	r4, r1
    5912:	e7e9      	b.n	58e8 <_malloc_r+0x64>
    5914:	460c      	mov	r4, r1
    5916:	6849      	ldr	r1, [r1, #4]
    5918:	e7ca      	b.n	58b0 <_malloc_r+0x2c>
    591a:	1cc4      	adds	r4, r0, #3
    591c:	f024 0403 	bic.w	r4, r4, #3
    5920:	42a0      	cmp	r0, r4
    5922:	d005      	beq.n	5930 <_malloc_r+0xac>
    5924:	1a21      	subs	r1, r4, r0
    5926:	4630      	mov	r0, r6
    5928:	f000 f80a 	bl	5940 <_sbrk_r>
    592c:	3001      	adds	r0, #1
    592e:	d0cd      	beq.n	58cc <_malloc_r+0x48>
    5930:	6025      	str	r5, [r4, #0]
    5932:	e7d9      	b.n	58e8 <_malloc_r+0x64>
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	bf00      	nop
    5938:	20000fa0 	.word	0x20000fa0
    593c:	20000fa4 	.word	0x20000fa4

00005940 <_sbrk_r>:
    5940:	b538      	push	{r3, r4, r5, lr}
    5942:	4c06      	ldr	r4, [pc, #24]	; (595c <_sbrk_r+0x1c>)
    5944:	2300      	movs	r3, #0
    5946:	4605      	mov	r5, r0
    5948:	4608      	mov	r0, r1
    594a:	6023      	str	r3, [r4, #0]
    594c:	f7fc f85e 	bl	1a0c <_sbrk>
    5950:	1c43      	adds	r3, r0, #1
    5952:	d102      	bne.n	595a <_sbrk_r+0x1a>
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	b103      	cbz	r3, 595a <_sbrk_r+0x1a>
    5958:	602b      	str	r3, [r5, #0]
    595a:	bd38      	pop	{r3, r4, r5, pc}
    595c:	20001594 	.word	0x20001594

00005960 <siprintf>:
    5960:	b40e      	push	{r1, r2, r3}
    5962:	b500      	push	{lr}
    5964:	b09c      	sub	sp, #112	; 0x70
    5966:	f44f 7102 	mov.w	r1, #520	; 0x208
    596a:	ab1d      	add	r3, sp, #116	; 0x74
    596c:	f8ad 1014 	strh.w	r1, [sp, #20]
    5970:	9002      	str	r0, [sp, #8]
    5972:	9006      	str	r0, [sp, #24]
    5974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5978:	480a      	ldr	r0, [pc, #40]	; (59a4 <siprintf+0x44>)
    597a:	9104      	str	r1, [sp, #16]
    597c:	9107      	str	r1, [sp, #28]
    597e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5982:	f853 2b04 	ldr.w	r2, [r3], #4
    5986:	f8ad 1016 	strh.w	r1, [sp, #22]
    598a:	6800      	ldr	r0, [r0, #0]
    598c:	9301      	str	r3, [sp, #4]
    598e:	a902      	add	r1, sp, #8
    5990:	f000 f868 	bl	5a64 <_svfiprintf_r>
    5994:	9b02      	ldr	r3, [sp, #8]
    5996:	2200      	movs	r2, #0
    5998:	701a      	strb	r2, [r3, #0]
    599a:	b01c      	add	sp, #112	; 0x70
    599c:	f85d eb04 	ldr.w	lr, [sp], #4
    59a0:	b003      	add	sp, #12
    59a2:	4770      	bx	lr
    59a4:	2000036c 	.word	0x2000036c

000059a8 <__malloc_lock>:
    59a8:	4770      	bx	lr

000059aa <__malloc_unlock>:
    59aa:	4770      	bx	lr

000059ac <__ssputs_r>:
    59ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59b0:	688e      	ldr	r6, [r1, #8]
    59b2:	429e      	cmp	r6, r3
    59b4:	4682      	mov	sl, r0
    59b6:	460c      	mov	r4, r1
    59b8:	4691      	mov	r9, r2
    59ba:	4698      	mov	r8, r3
    59bc:	d835      	bhi.n	5a2a <__ssputs_r+0x7e>
    59be:	898a      	ldrh	r2, [r1, #12]
    59c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    59c4:	d031      	beq.n	5a2a <__ssputs_r+0x7e>
    59c6:	6825      	ldr	r5, [r4, #0]
    59c8:	6909      	ldr	r1, [r1, #16]
    59ca:	1a6f      	subs	r7, r5, r1
    59cc:	6965      	ldr	r5, [r4, #20]
    59ce:	2302      	movs	r3, #2
    59d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    59d4:	fb95 f5f3 	sdiv	r5, r5, r3
    59d8:	f108 0301 	add.w	r3, r8, #1
    59dc:	443b      	add	r3, r7
    59de:	429d      	cmp	r5, r3
    59e0:	bf38      	it	cc
    59e2:	461d      	movcc	r5, r3
    59e4:	0553      	lsls	r3, r2, #21
    59e6:	d531      	bpl.n	5a4c <__ssputs_r+0xa0>
    59e8:	4629      	mov	r1, r5
    59ea:	f7ff ff4b 	bl	5884 <_malloc_r>
    59ee:	4606      	mov	r6, r0
    59f0:	b950      	cbnz	r0, 5a08 <__ssputs_r+0x5c>
    59f2:	230c      	movs	r3, #12
    59f4:	f8ca 3000 	str.w	r3, [sl]
    59f8:	89a3      	ldrh	r3, [r4, #12]
    59fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    59fe:	81a3      	strh	r3, [r4, #12]
    5a00:	f04f 30ff 	mov.w	r0, #4294967295
    5a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a08:	463a      	mov	r2, r7
    5a0a:	6921      	ldr	r1, [r4, #16]
    5a0c:	f7ff fed8 	bl	57c0 <memcpy>
    5a10:	89a3      	ldrh	r3, [r4, #12]
    5a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    5a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5a1a:	81a3      	strh	r3, [r4, #12]
    5a1c:	6126      	str	r6, [r4, #16]
    5a1e:	6165      	str	r5, [r4, #20]
    5a20:	443e      	add	r6, r7
    5a22:	1bed      	subs	r5, r5, r7
    5a24:	6026      	str	r6, [r4, #0]
    5a26:	60a5      	str	r5, [r4, #8]
    5a28:	4646      	mov	r6, r8
    5a2a:	4546      	cmp	r6, r8
    5a2c:	bf28      	it	cs
    5a2e:	4646      	movcs	r6, r8
    5a30:	4632      	mov	r2, r6
    5a32:	4649      	mov	r1, r9
    5a34:	6820      	ldr	r0, [r4, #0]
    5a36:	f000 faf3 	bl	6020 <memmove>
    5a3a:	68a3      	ldr	r3, [r4, #8]
    5a3c:	1b9b      	subs	r3, r3, r6
    5a3e:	60a3      	str	r3, [r4, #8]
    5a40:	6823      	ldr	r3, [r4, #0]
    5a42:	441e      	add	r6, r3
    5a44:	6026      	str	r6, [r4, #0]
    5a46:	2000      	movs	r0, #0
    5a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a4c:	462a      	mov	r2, r5
    5a4e:	f000 fb01 	bl	6054 <_realloc_r>
    5a52:	4606      	mov	r6, r0
    5a54:	2800      	cmp	r0, #0
    5a56:	d1e1      	bne.n	5a1c <__ssputs_r+0x70>
    5a58:	6921      	ldr	r1, [r4, #16]
    5a5a:	4650      	mov	r0, sl
    5a5c:	f7ff fec4 	bl	57e8 <_free_r>
    5a60:	e7c7      	b.n	59f2 <__ssputs_r+0x46>
	...

00005a64 <_svfiprintf_r>:
    5a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a68:	b09d      	sub	sp, #116	; 0x74
    5a6a:	4680      	mov	r8, r0
    5a6c:	9303      	str	r3, [sp, #12]
    5a6e:	898b      	ldrh	r3, [r1, #12]
    5a70:	061c      	lsls	r4, r3, #24
    5a72:	460d      	mov	r5, r1
    5a74:	4616      	mov	r6, r2
    5a76:	d50f      	bpl.n	5a98 <_svfiprintf_r+0x34>
    5a78:	690b      	ldr	r3, [r1, #16]
    5a7a:	b96b      	cbnz	r3, 5a98 <_svfiprintf_r+0x34>
    5a7c:	2140      	movs	r1, #64	; 0x40
    5a7e:	f7ff ff01 	bl	5884 <_malloc_r>
    5a82:	6028      	str	r0, [r5, #0]
    5a84:	6128      	str	r0, [r5, #16]
    5a86:	b928      	cbnz	r0, 5a94 <_svfiprintf_r+0x30>
    5a88:	230c      	movs	r3, #12
    5a8a:	f8c8 3000 	str.w	r3, [r8]
    5a8e:	f04f 30ff 	mov.w	r0, #4294967295
    5a92:	e0c5      	b.n	5c20 <_svfiprintf_r+0x1bc>
    5a94:	2340      	movs	r3, #64	; 0x40
    5a96:	616b      	str	r3, [r5, #20]
    5a98:	2300      	movs	r3, #0
    5a9a:	9309      	str	r3, [sp, #36]	; 0x24
    5a9c:	2320      	movs	r3, #32
    5a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5aa2:	2330      	movs	r3, #48	; 0x30
    5aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5aa8:	f04f 0b01 	mov.w	fp, #1
    5aac:	4637      	mov	r7, r6
    5aae:	463c      	mov	r4, r7
    5ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d13c      	bne.n	5b32 <_svfiprintf_r+0xce>
    5ab8:	ebb7 0a06 	subs.w	sl, r7, r6
    5abc:	d00b      	beq.n	5ad6 <_svfiprintf_r+0x72>
    5abe:	4653      	mov	r3, sl
    5ac0:	4632      	mov	r2, r6
    5ac2:	4629      	mov	r1, r5
    5ac4:	4640      	mov	r0, r8
    5ac6:	f7ff ff71 	bl	59ac <__ssputs_r>
    5aca:	3001      	adds	r0, #1
    5acc:	f000 80a3 	beq.w	5c16 <_svfiprintf_r+0x1b2>
    5ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ad2:	4453      	add	r3, sl
    5ad4:	9309      	str	r3, [sp, #36]	; 0x24
    5ad6:	783b      	ldrb	r3, [r7, #0]
    5ad8:	2b00      	cmp	r3, #0
    5ada:	f000 809c 	beq.w	5c16 <_svfiprintf_r+0x1b2>
    5ade:	2300      	movs	r3, #0
    5ae0:	f04f 32ff 	mov.w	r2, #4294967295
    5ae4:	9304      	str	r3, [sp, #16]
    5ae6:	9307      	str	r3, [sp, #28]
    5ae8:	9205      	str	r2, [sp, #20]
    5aea:	9306      	str	r3, [sp, #24]
    5aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5af0:	931a      	str	r3, [sp, #104]	; 0x68
    5af2:	2205      	movs	r2, #5
    5af4:	7821      	ldrb	r1, [r4, #0]
    5af6:	4850      	ldr	r0, [pc, #320]	; (5c38 <_svfiprintf_r+0x1d4>)
    5af8:	f000 fa42 	bl	5f80 <memchr>
    5afc:	1c67      	adds	r7, r4, #1
    5afe:	9b04      	ldr	r3, [sp, #16]
    5b00:	b9d8      	cbnz	r0, 5b3a <_svfiprintf_r+0xd6>
    5b02:	06d9      	lsls	r1, r3, #27
    5b04:	bf44      	itt	mi
    5b06:	2220      	movmi	r2, #32
    5b08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5b0c:	071a      	lsls	r2, r3, #28
    5b0e:	bf44      	itt	mi
    5b10:	222b      	movmi	r2, #43	; 0x2b
    5b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5b16:	7822      	ldrb	r2, [r4, #0]
    5b18:	2a2a      	cmp	r2, #42	; 0x2a
    5b1a:	d016      	beq.n	5b4a <_svfiprintf_r+0xe6>
    5b1c:	9a07      	ldr	r2, [sp, #28]
    5b1e:	2100      	movs	r1, #0
    5b20:	200a      	movs	r0, #10
    5b22:	4627      	mov	r7, r4
    5b24:	3401      	adds	r4, #1
    5b26:	783b      	ldrb	r3, [r7, #0]
    5b28:	3b30      	subs	r3, #48	; 0x30
    5b2a:	2b09      	cmp	r3, #9
    5b2c:	d951      	bls.n	5bd2 <_svfiprintf_r+0x16e>
    5b2e:	b1c9      	cbz	r1, 5b64 <_svfiprintf_r+0x100>
    5b30:	e011      	b.n	5b56 <_svfiprintf_r+0xf2>
    5b32:	2b25      	cmp	r3, #37	; 0x25
    5b34:	d0c0      	beq.n	5ab8 <_svfiprintf_r+0x54>
    5b36:	4627      	mov	r7, r4
    5b38:	e7b9      	b.n	5aae <_svfiprintf_r+0x4a>
    5b3a:	4a3f      	ldr	r2, [pc, #252]	; (5c38 <_svfiprintf_r+0x1d4>)
    5b3c:	1a80      	subs	r0, r0, r2
    5b3e:	fa0b f000 	lsl.w	r0, fp, r0
    5b42:	4318      	orrs	r0, r3
    5b44:	9004      	str	r0, [sp, #16]
    5b46:	463c      	mov	r4, r7
    5b48:	e7d3      	b.n	5af2 <_svfiprintf_r+0x8e>
    5b4a:	9a03      	ldr	r2, [sp, #12]
    5b4c:	1d11      	adds	r1, r2, #4
    5b4e:	6812      	ldr	r2, [r2, #0]
    5b50:	9103      	str	r1, [sp, #12]
    5b52:	2a00      	cmp	r2, #0
    5b54:	db01      	blt.n	5b5a <_svfiprintf_r+0xf6>
    5b56:	9207      	str	r2, [sp, #28]
    5b58:	e004      	b.n	5b64 <_svfiprintf_r+0x100>
    5b5a:	4252      	negs	r2, r2
    5b5c:	f043 0302 	orr.w	r3, r3, #2
    5b60:	9207      	str	r2, [sp, #28]
    5b62:	9304      	str	r3, [sp, #16]
    5b64:	783b      	ldrb	r3, [r7, #0]
    5b66:	2b2e      	cmp	r3, #46	; 0x2e
    5b68:	d10e      	bne.n	5b88 <_svfiprintf_r+0x124>
    5b6a:	787b      	ldrb	r3, [r7, #1]
    5b6c:	2b2a      	cmp	r3, #42	; 0x2a
    5b6e:	f107 0101 	add.w	r1, r7, #1
    5b72:	d132      	bne.n	5bda <_svfiprintf_r+0x176>
    5b74:	9b03      	ldr	r3, [sp, #12]
    5b76:	1d1a      	adds	r2, r3, #4
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	9203      	str	r2, [sp, #12]
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	bfb8      	it	lt
    5b80:	f04f 33ff 	movlt.w	r3, #4294967295
    5b84:	3702      	adds	r7, #2
    5b86:	9305      	str	r3, [sp, #20]
    5b88:	4c2c      	ldr	r4, [pc, #176]	; (5c3c <_svfiprintf_r+0x1d8>)
    5b8a:	7839      	ldrb	r1, [r7, #0]
    5b8c:	2203      	movs	r2, #3
    5b8e:	4620      	mov	r0, r4
    5b90:	f000 f9f6 	bl	5f80 <memchr>
    5b94:	b138      	cbz	r0, 5ba6 <_svfiprintf_r+0x142>
    5b96:	2340      	movs	r3, #64	; 0x40
    5b98:	1b00      	subs	r0, r0, r4
    5b9a:	fa03 f000 	lsl.w	r0, r3, r0
    5b9e:	9b04      	ldr	r3, [sp, #16]
    5ba0:	4303      	orrs	r3, r0
    5ba2:	9304      	str	r3, [sp, #16]
    5ba4:	3701      	adds	r7, #1
    5ba6:	7839      	ldrb	r1, [r7, #0]
    5ba8:	4825      	ldr	r0, [pc, #148]	; (5c40 <_svfiprintf_r+0x1dc>)
    5baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5bae:	2206      	movs	r2, #6
    5bb0:	1c7e      	adds	r6, r7, #1
    5bb2:	f000 f9e5 	bl	5f80 <memchr>
    5bb6:	2800      	cmp	r0, #0
    5bb8:	d035      	beq.n	5c26 <_svfiprintf_r+0x1c2>
    5bba:	4b22      	ldr	r3, [pc, #136]	; (5c44 <_svfiprintf_r+0x1e0>)
    5bbc:	b9fb      	cbnz	r3, 5bfe <_svfiprintf_r+0x19a>
    5bbe:	9b03      	ldr	r3, [sp, #12]
    5bc0:	3307      	adds	r3, #7
    5bc2:	f023 0307 	bic.w	r3, r3, #7
    5bc6:	3308      	adds	r3, #8
    5bc8:	9303      	str	r3, [sp, #12]
    5bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bcc:	444b      	add	r3, r9
    5bce:	9309      	str	r3, [sp, #36]	; 0x24
    5bd0:	e76c      	b.n	5aac <_svfiprintf_r+0x48>
    5bd2:	fb00 3202 	mla	r2, r0, r2, r3
    5bd6:	2101      	movs	r1, #1
    5bd8:	e7a3      	b.n	5b22 <_svfiprintf_r+0xbe>
    5bda:	2300      	movs	r3, #0
    5bdc:	9305      	str	r3, [sp, #20]
    5bde:	4618      	mov	r0, r3
    5be0:	240a      	movs	r4, #10
    5be2:	460f      	mov	r7, r1
    5be4:	3101      	adds	r1, #1
    5be6:	783a      	ldrb	r2, [r7, #0]
    5be8:	3a30      	subs	r2, #48	; 0x30
    5bea:	2a09      	cmp	r2, #9
    5bec:	d903      	bls.n	5bf6 <_svfiprintf_r+0x192>
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d0ca      	beq.n	5b88 <_svfiprintf_r+0x124>
    5bf2:	9005      	str	r0, [sp, #20]
    5bf4:	e7c8      	b.n	5b88 <_svfiprintf_r+0x124>
    5bf6:	fb04 2000 	mla	r0, r4, r0, r2
    5bfa:	2301      	movs	r3, #1
    5bfc:	e7f1      	b.n	5be2 <_svfiprintf_r+0x17e>
    5bfe:	ab03      	add	r3, sp, #12
    5c00:	9300      	str	r3, [sp, #0]
    5c02:	462a      	mov	r2, r5
    5c04:	4b10      	ldr	r3, [pc, #64]	; (5c48 <_svfiprintf_r+0x1e4>)
    5c06:	a904      	add	r1, sp, #16
    5c08:	4640      	mov	r0, r8
    5c0a:	f3af 8000 	nop.w
    5c0e:	f1b0 3fff 	cmp.w	r0, #4294967295
    5c12:	4681      	mov	r9, r0
    5c14:	d1d9      	bne.n	5bca <_svfiprintf_r+0x166>
    5c16:	89ab      	ldrh	r3, [r5, #12]
    5c18:	065b      	lsls	r3, r3, #25
    5c1a:	f53f af38 	bmi.w	5a8e <_svfiprintf_r+0x2a>
    5c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5c20:	b01d      	add	sp, #116	; 0x74
    5c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c26:	ab03      	add	r3, sp, #12
    5c28:	9300      	str	r3, [sp, #0]
    5c2a:	462a      	mov	r2, r5
    5c2c:	4b06      	ldr	r3, [pc, #24]	; (5c48 <_svfiprintf_r+0x1e4>)
    5c2e:	a904      	add	r1, sp, #16
    5c30:	4640      	mov	r0, r8
    5c32:	f000 f881 	bl	5d38 <_printf_i>
    5c36:	e7ea      	b.n	5c0e <_svfiprintf_r+0x1aa>
    5c38:	0000646c 	.word	0x0000646c
    5c3c:	00006472 	.word	0x00006472
    5c40:	00006476 	.word	0x00006476
    5c44:	00000000 	.word	0x00000000
    5c48:	000059ad 	.word	0x000059ad

00005c4c <_printf_common>:
    5c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c50:	4691      	mov	r9, r2
    5c52:	461f      	mov	r7, r3
    5c54:	688a      	ldr	r2, [r1, #8]
    5c56:	690b      	ldr	r3, [r1, #16]
    5c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5c5c:	4293      	cmp	r3, r2
    5c5e:	bfb8      	it	lt
    5c60:	4613      	movlt	r3, r2
    5c62:	f8c9 3000 	str.w	r3, [r9]
    5c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5c6a:	4606      	mov	r6, r0
    5c6c:	460c      	mov	r4, r1
    5c6e:	b112      	cbz	r2, 5c76 <_printf_common+0x2a>
    5c70:	3301      	adds	r3, #1
    5c72:	f8c9 3000 	str.w	r3, [r9]
    5c76:	6823      	ldr	r3, [r4, #0]
    5c78:	0699      	lsls	r1, r3, #26
    5c7a:	bf42      	ittt	mi
    5c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
    5c80:	3302      	addmi	r3, #2
    5c82:	f8c9 3000 	strmi.w	r3, [r9]
    5c86:	6825      	ldr	r5, [r4, #0]
    5c88:	f015 0506 	ands.w	r5, r5, #6
    5c8c:	d107      	bne.n	5c9e <_printf_common+0x52>
    5c8e:	f104 0a19 	add.w	sl, r4, #25
    5c92:	68e3      	ldr	r3, [r4, #12]
    5c94:	f8d9 2000 	ldr.w	r2, [r9]
    5c98:	1a9b      	subs	r3, r3, r2
    5c9a:	429d      	cmp	r5, r3
    5c9c:	db29      	blt.n	5cf2 <_printf_common+0xa6>
    5c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5ca2:	6822      	ldr	r2, [r4, #0]
    5ca4:	3300      	adds	r3, #0
    5ca6:	bf18      	it	ne
    5ca8:	2301      	movne	r3, #1
    5caa:	0692      	lsls	r2, r2, #26
    5cac:	d42e      	bmi.n	5d0c <_printf_common+0xc0>
    5cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5cb2:	4639      	mov	r1, r7
    5cb4:	4630      	mov	r0, r6
    5cb6:	47c0      	blx	r8
    5cb8:	3001      	adds	r0, #1
    5cba:	d021      	beq.n	5d00 <_printf_common+0xb4>
    5cbc:	6823      	ldr	r3, [r4, #0]
    5cbe:	68e5      	ldr	r5, [r4, #12]
    5cc0:	f8d9 2000 	ldr.w	r2, [r9]
    5cc4:	f003 0306 	and.w	r3, r3, #6
    5cc8:	2b04      	cmp	r3, #4
    5cca:	bf08      	it	eq
    5ccc:	1aad      	subeq	r5, r5, r2
    5cce:	68a3      	ldr	r3, [r4, #8]
    5cd0:	6922      	ldr	r2, [r4, #16]
    5cd2:	bf0c      	ite	eq
    5cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5cd8:	2500      	movne	r5, #0
    5cda:	4293      	cmp	r3, r2
    5cdc:	bfc4      	itt	gt
    5cde:	1a9b      	subgt	r3, r3, r2
    5ce0:	18ed      	addgt	r5, r5, r3
    5ce2:	f04f 0900 	mov.w	r9, #0
    5ce6:	341a      	adds	r4, #26
    5ce8:	454d      	cmp	r5, r9
    5cea:	d11b      	bne.n	5d24 <_printf_common+0xd8>
    5cec:	2000      	movs	r0, #0
    5cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cf2:	2301      	movs	r3, #1
    5cf4:	4652      	mov	r2, sl
    5cf6:	4639      	mov	r1, r7
    5cf8:	4630      	mov	r0, r6
    5cfa:	47c0      	blx	r8
    5cfc:	3001      	adds	r0, #1
    5cfe:	d103      	bne.n	5d08 <_printf_common+0xbc>
    5d00:	f04f 30ff 	mov.w	r0, #4294967295
    5d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d08:	3501      	adds	r5, #1
    5d0a:	e7c2      	b.n	5c92 <_printf_common+0x46>
    5d0c:	18e1      	adds	r1, r4, r3
    5d0e:	1c5a      	adds	r2, r3, #1
    5d10:	2030      	movs	r0, #48	; 0x30
    5d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5d16:	4422      	add	r2, r4
    5d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5d20:	3302      	adds	r3, #2
    5d22:	e7c4      	b.n	5cae <_printf_common+0x62>
    5d24:	2301      	movs	r3, #1
    5d26:	4622      	mov	r2, r4
    5d28:	4639      	mov	r1, r7
    5d2a:	4630      	mov	r0, r6
    5d2c:	47c0      	blx	r8
    5d2e:	3001      	adds	r0, #1
    5d30:	d0e6      	beq.n	5d00 <_printf_common+0xb4>
    5d32:	f109 0901 	add.w	r9, r9, #1
    5d36:	e7d7      	b.n	5ce8 <_printf_common+0x9c>

00005d38 <_printf_i>:
    5d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d3c:	4617      	mov	r7, r2
    5d3e:	7e0a      	ldrb	r2, [r1, #24]
    5d40:	b085      	sub	sp, #20
    5d42:	2a6e      	cmp	r2, #110	; 0x6e
    5d44:	4698      	mov	r8, r3
    5d46:	4606      	mov	r6, r0
    5d48:	460c      	mov	r4, r1
    5d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5d50:	f000 80bc 	beq.w	5ecc <_printf_i+0x194>
    5d54:	d81a      	bhi.n	5d8c <_printf_i+0x54>
    5d56:	2a63      	cmp	r2, #99	; 0x63
    5d58:	d02e      	beq.n	5db8 <_printf_i+0x80>
    5d5a:	d80a      	bhi.n	5d72 <_printf_i+0x3a>
    5d5c:	2a00      	cmp	r2, #0
    5d5e:	f000 80c8 	beq.w	5ef2 <_printf_i+0x1ba>
    5d62:	2a58      	cmp	r2, #88	; 0x58
    5d64:	f000 808a 	beq.w	5e7c <_printf_i+0x144>
    5d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5d6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5d70:	e02a      	b.n	5dc8 <_printf_i+0x90>
    5d72:	2a64      	cmp	r2, #100	; 0x64
    5d74:	d001      	beq.n	5d7a <_printf_i+0x42>
    5d76:	2a69      	cmp	r2, #105	; 0x69
    5d78:	d1f6      	bne.n	5d68 <_printf_i+0x30>
    5d7a:	6821      	ldr	r1, [r4, #0]
    5d7c:	681a      	ldr	r2, [r3, #0]
    5d7e:	f011 0f80 	tst.w	r1, #128	; 0x80
    5d82:	d023      	beq.n	5dcc <_printf_i+0x94>
    5d84:	1d11      	adds	r1, r2, #4
    5d86:	6019      	str	r1, [r3, #0]
    5d88:	6813      	ldr	r3, [r2, #0]
    5d8a:	e027      	b.n	5ddc <_printf_i+0xa4>
    5d8c:	2a73      	cmp	r2, #115	; 0x73
    5d8e:	f000 80b4 	beq.w	5efa <_printf_i+0x1c2>
    5d92:	d808      	bhi.n	5da6 <_printf_i+0x6e>
    5d94:	2a6f      	cmp	r2, #111	; 0x6f
    5d96:	d02a      	beq.n	5dee <_printf_i+0xb6>
    5d98:	2a70      	cmp	r2, #112	; 0x70
    5d9a:	d1e5      	bne.n	5d68 <_printf_i+0x30>
    5d9c:	680a      	ldr	r2, [r1, #0]
    5d9e:	f042 0220 	orr.w	r2, r2, #32
    5da2:	600a      	str	r2, [r1, #0]
    5da4:	e003      	b.n	5dae <_printf_i+0x76>
    5da6:	2a75      	cmp	r2, #117	; 0x75
    5da8:	d021      	beq.n	5dee <_printf_i+0xb6>
    5daa:	2a78      	cmp	r2, #120	; 0x78
    5dac:	d1dc      	bne.n	5d68 <_printf_i+0x30>
    5dae:	2278      	movs	r2, #120	; 0x78
    5db0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5db4:	496e      	ldr	r1, [pc, #440]	; (5f70 <_printf_i+0x238>)
    5db6:	e064      	b.n	5e82 <_printf_i+0x14a>
    5db8:	681a      	ldr	r2, [r3, #0]
    5dba:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5dbe:	1d11      	adds	r1, r2, #4
    5dc0:	6019      	str	r1, [r3, #0]
    5dc2:	6813      	ldr	r3, [r2, #0]
    5dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5dc8:	2301      	movs	r3, #1
    5dca:	e0a3      	b.n	5f14 <_printf_i+0x1dc>
    5dcc:	f011 0f40 	tst.w	r1, #64	; 0x40
    5dd0:	f102 0104 	add.w	r1, r2, #4
    5dd4:	6019      	str	r1, [r3, #0]
    5dd6:	d0d7      	beq.n	5d88 <_printf_i+0x50>
    5dd8:	f9b2 3000 	ldrsh.w	r3, [r2]
    5ddc:	2b00      	cmp	r3, #0
    5dde:	da03      	bge.n	5de8 <_printf_i+0xb0>
    5de0:	222d      	movs	r2, #45	; 0x2d
    5de2:	425b      	negs	r3, r3
    5de4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5de8:	4962      	ldr	r1, [pc, #392]	; (5f74 <_printf_i+0x23c>)
    5dea:	220a      	movs	r2, #10
    5dec:	e017      	b.n	5e1e <_printf_i+0xe6>
    5dee:	6820      	ldr	r0, [r4, #0]
    5df0:	6819      	ldr	r1, [r3, #0]
    5df2:	f010 0f80 	tst.w	r0, #128	; 0x80
    5df6:	d003      	beq.n	5e00 <_printf_i+0xc8>
    5df8:	1d08      	adds	r0, r1, #4
    5dfa:	6018      	str	r0, [r3, #0]
    5dfc:	680b      	ldr	r3, [r1, #0]
    5dfe:	e006      	b.n	5e0e <_printf_i+0xd6>
    5e00:	f010 0f40 	tst.w	r0, #64	; 0x40
    5e04:	f101 0004 	add.w	r0, r1, #4
    5e08:	6018      	str	r0, [r3, #0]
    5e0a:	d0f7      	beq.n	5dfc <_printf_i+0xc4>
    5e0c:	880b      	ldrh	r3, [r1, #0]
    5e0e:	4959      	ldr	r1, [pc, #356]	; (5f74 <_printf_i+0x23c>)
    5e10:	2a6f      	cmp	r2, #111	; 0x6f
    5e12:	bf14      	ite	ne
    5e14:	220a      	movne	r2, #10
    5e16:	2208      	moveq	r2, #8
    5e18:	2000      	movs	r0, #0
    5e1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5e1e:	6865      	ldr	r5, [r4, #4]
    5e20:	60a5      	str	r5, [r4, #8]
    5e22:	2d00      	cmp	r5, #0
    5e24:	f2c0 809c 	blt.w	5f60 <_printf_i+0x228>
    5e28:	6820      	ldr	r0, [r4, #0]
    5e2a:	f020 0004 	bic.w	r0, r0, #4
    5e2e:	6020      	str	r0, [r4, #0]
    5e30:	2b00      	cmp	r3, #0
    5e32:	d13f      	bne.n	5eb4 <_printf_i+0x17c>
    5e34:	2d00      	cmp	r5, #0
    5e36:	f040 8095 	bne.w	5f64 <_printf_i+0x22c>
    5e3a:	4675      	mov	r5, lr
    5e3c:	2a08      	cmp	r2, #8
    5e3e:	d10b      	bne.n	5e58 <_printf_i+0x120>
    5e40:	6823      	ldr	r3, [r4, #0]
    5e42:	07da      	lsls	r2, r3, #31
    5e44:	d508      	bpl.n	5e58 <_printf_i+0x120>
    5e46:	6923      	ldr	r3, [r4, #16]
    5e48:	6862      	ldr	r2, [r4, #4]
    5e4a:	429a      	cmp	r2, r3
    5e4c:	bfde      	ittt	le
    5e4e:	2330      	movle	r3, #48	; 0x30
    5e50:	f805 3c01 	strble.w	r3, [r5, #-1]
    5e54:	f105 35ff 	addle.w	r5, r5, #4294967295
    5e58:	ebae 0305 	sub.w	r3, lr, r5
    5e5c:	6123      	str	r3, [r4, #16]
    5e5e:	f8cd 8000 	str.w	r8, [sp]
    5e62:	463b      	mov	r3, r7
    5e64:	aa03      	add	r2, sp, #12
    5e66:	4621      	mov	r1, r4
    5e68:	4630      	mov	r0, r6
    5e6a:	f7ff feef 	bl	5c4c <_printf_common>
    5e6e:	3001      	adds	r0, #1
    5e70:	d155      	bne.n	5f1e <_printf_i+0x1e6>
    5e72:	f04f 30ff 	mov.w	r0, #4294967295
    5e76:	b005      	add	sp, #20
    5e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5e7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5e80:	493c      	ldr	r1, [pc, #240]	; (5f74 <_printf_i+0x23c>)
    5e82:	6822      	ldr	r2, [r4, #0]
    5e84:	6818      	ldr	r0, [r3, #0]
    5e86:	f012 0f80 	tst.w	r2, #128	; 0x80
    5e8a:	f100 0504 	add.w	r5, r0, #4
    5e8e:	601d      	str	r5, [r3, #0]
    5e90:	d001      	beq.n	5e96 <_printf_i+0x15e>
    5e92:	6803      	ldr	r3, [r0, #0]
    5e94:	e002      	b.n	5e9c <_printf_i+0x164>
    5e96:	0655      	lsls	r5, r2, #25
    5e98:	d5fb      	bpl.n	5e92 <_printf_i+0x15a>
    5e9a:	8803      	ldrh	r3, [r0, #0]
    5e9c:	07d0      	lsls	r0, r2, #31
    5e9e:	bf44      	itt	mi
    5ea0:	f042 0220 	orrmi.w	r2, r2, #32
    5ea4:	6022      	strmi	r2, [r4, #0]
    5ea6:	b91b      	cbnz	r3, 5eb0 <_printf_i+0x178>
    5ea8:	6822      	ldr	r2, [r4, #0]
    5eaa:	f022 0220 	bic.w	r2, r2, #32
    5eae:	6022      	str	r2, [r4, #0]
    5eb0:	2210      	movs	r2, #16
    5eb2:	e7b1      	b.n	5e18 <_printf_i+0xe0>
    5eb4:	4675      	mov	r5, lr
    5eb6:	fbb3 f0f2 	udiv	r0, r3, r2
    5eba:	fb02 3310 	mls	r3, r2, r0, r3
    5ebe:	5ccb      	ldrb	r3, [r1, r3]
    5ec0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5ec4:	4603      	mov	r3, r0
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d1f5      	bne.n	5eb6 <_printf_i+0x17e>
    5eca:	e7b7      	b.n	5e3c <_printf_i+0x104>
    5ecc:	6808      	ldr	r0, [r1, #0]
    5ece:	681a      	ldr	r2, [r3, #0]
    5ed0:	6949      	ldr	r1, [r1, #20]
    5ed2:	f010 0f80 	tst.w	r0, #128	; 0x80
    5ed6:	d004      	beq.n	5ee2 <_printf_i+0x1aa>
    5ed8:	1d10      	adds	r0, r2, #4
    5eda:	6018      	str	r0, [r3, #0]
    5edc:	6813      	ldr	r3, [r2, #0]
    5ede:	6019      	str	r1, [r3, #0]
    5ee0:	e007      	b.n	5ef2 <_printf_i+0x1ba>
    5ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
    5ee6:	f102 0004 	add.w	r0, r2, #4
    5eea:	6018      	str	r0, [r3, #0]
    5eec:	6813      	ldr	r3, [r2, #0]
    5eee:	d0f6      	beq.n	5ede <_printf_i+0x1a6>
    5ef0:	8019      	strh	r1, [r3, #0]
    5ef2:	2300      	movs	r3, #0
    5ef4:	6123      	str	r3, [r4, #16]
    5ef6:	4675      	mov	r5, lr
    5ef8:	e7b1      	b.n	5e5e <_printf_i+0x126>
    5efa:	681a      	ldr	r2, [r3, #0]
    5efc:	1d11      	adds	r1, r2, #4
    5efe:	6019      	str	r1, [r3, #0]
    5f00:	6815      	ldr	r5, [r2, #0]
    5f02:	6862      	ldr	r2, [r4, #4]
    5f04:	2100      	movs	r1, #0
    5f06:	4628      	mov	r0, r5
    5f08:	f000 f83a 	bl	5f80 <memchr>
    5f0c:	b108      	cbz	r0, 5f12 <_printf_i+0x1da>
    5f0e:	1b40      	subs	r0, r0, r5
    5f10:	6060      	str	r0, [r4, #4]
    5f12:	6863      	ldr	r3, [r4, #4]
    5f14:	6123      	str	r3, [r4, #16]
    5f16:	2300      	movs	r3, #0
    5f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5f1c:	e79f      	b.n	5e5e <_printf_i+0x126>
    5f1e:	6923      	ldr	r3, [r4, #16]
    5f20:	462a      	mov	r2, r5
    5f22:	4639      	mov	r1, r7
    5f24:	4630      	mov	r0, r6
    5f26:	47c0      	blx	r8
    5f28:	3001      	adds	r0, #1
    5f2a:	d0a2      	beq.n	5e72 <_printf_i+0x13a>
    5f2c:	6823      	ldr	r3, [r4, #0]
    5f2e:	079b      	lsls	r3, r3, #30
    5f30:	d507      	bpl.n	5f42 <_printf_i+0x20a>
    5f32:	2500      	movs	r5, #0
    5f34:	f104 0919 	add.w	r9, r4, #25
    5f38:	68e3      	ldr	r3, [r4, #12]
    5f3a:	9a03      	ldr	r2, [sp, #12]
    5f3c:	1a9b      	subs	r3, r3, r2
    5f3e:	429d      	cmp	r5, r3
    5f40:	db05      	blt.n	5f4e <_printf_i+0x216>
    5f42:	68e0      	ldr	r0, [r4, #12]
    5f44:	9b03      	ldr	r3, [sp, #12]
    5f46:	4298      	cmp	r0, r3
    5f48:	bfb8      	it	lt
    5f4a:	4618      	movlt	r0, r3
    5f4c:	e793      	b.n	5e76 <_printf_i+0x13e>
    5f4e:	2301      	movs	r3, #1
    5f50:	464a      	mov	r2, r9
    5f52:	4639      	mov	r1, r7
    5f54:	4630      	mov	r0, r6
    5f56:	47c0      	blx	r8
    5f58:	3001      	adds	r0, #1
    5f5a:	d08a      	beq.n	5e72 <_printf_i+0x13a>
    5f5c:	3501      	adds	r5, #1
    5f5e:	e7eb      	b.n	5f38 <_printf_i+0x200>
    5f60:	2b00      	cmp	r3, #0
    5f62:	d1a7      	bne.n	5eb4 <_printf_i+0x17c>
    5f64:	780b      	ldrb	r3, [r1, #0]
    5f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5f6e:	e765      	b.n	5e3c <_printf_i+0x104>
    5f70:	0000648e 	.word	0x0000648e
    5f74:	0000647d 	.word	0x0000647d
	...

00005f80 <memchr>:
    5f80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5f84:	2a10      	cmp	r2, #16
    5f86:	db2b      	blt.n	5fe0 <memchr+0x60>
    5f88:	f010 0f07 	tst.w	r0, #7
    5f8c:	d008      	beq.n	5fa0 <memchr+0x20>
    5f8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5f92:	3a01      	subs	r2, #1
    5f94:	428b      	cmp	r3, r1
    5f96:	d02d      	beq.n	5ff4 <memchr+0x74>
    5f98:	f010 0f07 	tst.w	r0, #7
    5f9c:	b342      	cbz	r2, 5ff0 <memchr+0x70>
    5f9e:	d1f6      	bne.n	5f8e <memchr+0xe>
    5fa0:	b4f0      	push	{r4, r5, r6, r7}
    5fa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5fa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5faa:	f022 0407 	bic.w	r4, r2, #7
    5fae:	f07f 0700 	mvns.w	r7, #0
    5fb2:	2300      	movs	r3, #0
    5fb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5fb8:	3c08      	subs	r4, #8
    5fba:	ea85 0501 	eor.w	r5, r5, r1
    5fbe:	ea86 0601 	eor.w	r6, r6, r1
    5fc2:	fa85 f547 	uadd8	r5, r5, r7
    5fc6:	faa3 f587 	sel	r5, r3, r7
    5fca:	fa86 f647 	uadd8	r6, r6, r7
    5fce:	faa5 f687 	sel	r6, r5, r7
    5fd2:	b98e      	cbnz	r6, 5ff8 <memchr+0x78>
    5fd4:	d1ee      	bne.n	5fb4 <memchr+0x34>
    5fd6:	bcf0      	pop	{r4, r5, r6, r7}
    5fd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5fdc:	f002 0207 	and.w	r2, r2, #7
    5fe0:	b132      	cbz	r2, 5ff0 <memchr+0x70>
    5fe2:	f810 3b01 	ldrb.w	r3, [r0], #1
    5fe6:	3a01      	subs	r2, #1
    5fe8:	ea83 0301 	eor.w	r3, r3, r1
    5fec:	b113      	cbz	r3, 5ff4 <memchr+0x74>
    5fee:	d1f8      	bne.n	5fe2 <memchr+0x62>
    5ff0:	2000      	movs	r0, #0
    5ff2:	4770      	bx	lr
    5ff4:	3801      	subs	r0, #1
    5ff6:	4770      	bx	lr
    5ff8:	2d00      	cmp	r5, #0
    5ffa:	bf06      	itte	eq
    5ffc:	4635      	moveq	r5, r6
    5ffe:	3803      	subeq	r0, #3
    6000:	3807      	subne	r0, #7
    6002:	f015 0f01 	tst.w	r5, #1
    6006:	d107      	bne.n	6018 <memchr+0x98>
    6008:	3001      	adds	r0, #1
    600a:	f415 7f80 	tst.w	r5, #256	; 0x100
    600e:	bf02      	ittt	eq
    6010:	3001      	addeq	r0, #1
    6012:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    6016:	3001      	addeq	r0, #1
    6018:	bcf0      	pop	{r4, r5, r6, r7}
    601a:	3801      	subs	r0, #1
    601c:	4770      	bx	lr
    601e:	bf00      	nop

00006020 <memmove>:
    6020:	4288      	cmp	r0, r1
    6022:	b510      	push	{r4, lr}
    6024:	eb01 0302 	add.w	r3, r1, r2
    6028:	d803      	bhi.n	6032 <memmove+0x12>
    602a:	1e42      	subs	r2, r0, #1
    602c:	4299      	cmp	r1, r3
    602e:	d10c      	bne.n	604a <memmove+0x2a>
    6030:	bd10      	pop	{r4, pc}
    6032:	4298      	cmp	r0, r3
    6034:	d2f9      	bcs.n	602a <memmove+0xa>
    6036:	1881      	adds	r1, r0, r2
    6038:	1ad2      	subs	r2, r2, r3
    603a:	42d3      	cmn	r3, r2
    603c:	d100      	bne.n	6040 <memmove+0x20>
    603e:	bd10      	pop	{r4, pc}
    6040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6044:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6048:	e7f7      	b.n	603a <memmove+0x1a>
    604a:	f811 4b01 	ldrb.w	r4, [r1], #1
    604e:	f802 4f01 	strb.w	r4, [r2, #1]!
    6052:	e7eb      	b.n	602c <memmove+0xc>

00006054 <_realloc_r>:
    6054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6056:	4607      	mov	r7, r0
    6058:	4614      	mov	r4, r2
    605a:	460e      	mov	r6, r1
    605c:	b921      	cbnz	r1, 6068 <_realloc_r+0x14>
    605e:	4611      	mov	r1, r2
    6060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6064:	f7ff bc0e 	b.w	5884 <_malloc_r>
    6068:	b922      	cbnz	r2, 6074 <_realloc_r+0x20>
    606a:	f7ff fbbd 	bl	57e8 <_free_r>
    606e:	4625      	mov	r5, r4
    6070:	4628      	mov	r0, r5
    6072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6074:	f000 f814 	bl	60a0 <_malloc_usable_size_r>
    6078:	4284      	cmp	r4, r0
    607a:	d90f      	bls.n	609c <_realloc_r+0x48>
    607c:	4621      	mov	r1, r4
    607e:	4638      	mov	r0, r7
    6080:	f7ff fc00 	bl	5884 <_malloc_r>
    6084:	4605      	mov	r5, r0
    6086:	2800      	cmp	r0, #0
    6088:	d0f2      	beq.n	6070 <_realloc_r+0x1c>
    608a:	4631      	mov	r1, r6
    608c:	4622      	mov	r2, r4
    608e:	f7ff fb97 	bl	57c0 <memcpy>
    6092:	4631      	mov	r1, r6
    6094:	4638      	mov	r0, r7
    6096:	f7ff fba7 	bl	57e8 <_free_r>
    609a:	e7e9      	b.n	6070 <_realloc_r+0x1c>
    609c:	4635      	mov	r5, r6
    609e:	e7e7      	b.n	6070 <_realloc_r+0x1c>

000060a0 <_malloc_usable_size_r>:
    60a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    60a4:	2800      	cmp	r0, #0
    60a6:	f1a0 0004 	sub.w	r0, r0, #4
    60aa:	bfbc      	itt	lt
    60ac:	580b      	ldrlt	r3, [r1, r0]
    60ae:	18c0      	addlt	r0, r0, r3
    60b0:	4770      	bx	lr
    60b2:	0000      	movs	r0, r0
    60b4:	682f2e2e 	.word	0x682f2e2e
    60b8:	732f6c61 	.word	0x732f6c61
    60bc:	682f6372 	.word	0x682f6372
    60c0:	615f6c61 	.word	0x615f6c61
    60c4:	615f6364 	.word	0x615f6364
    60c8:	636e7973 	.word	0x636e7973
    60cc:	0000632e 	.word	0x0000632e
    60d0:	682f2e2e 	.word	0x682f2e2e
    60d4:	732f6c61 	.word	0x732f6c61
    60d8:	682f6372 	.word	0x682f6372
    60dc:	635f6c61 	.word	0x635f6c61
    60e0:	735f6372 	.word	0x735f6372
    60e4:	2e636e79 	.word	0x2e636e79
    60e8:	00000063 	.word	0x00000063
    60ec:	682f2e2e 	.word	0x682f2e2e
    60f0:	732f6c61 	.word	0x732f6c61
    60f4:	682f6372 	.word	0x682f6372
    60f8:	665f6c61 	.word	0x665f6c61
    60fc:	6873616c 	.word	0x6873616c
    6100:	0000632e 	.word	0x0000632e
    6104:	682f2e2e 	.word	0x682f2e2e
    6108:	732f6c61 	.word	0x732f6c61
    610c:	682f6372 	.word	0x682f6372
    6110:	695f6c61 	.word	0x695f6c61
    6114:	6d5f6332 	.word	0x6d5f6332
    6118:	7973615f 	.word	0x7973615f
    611c:	632e636e 	.word	0x632e636e
    6120:	00000000 	.word	0x00000000
    6124:	682f2e2e 	.word	0x682f2e2e
    6128:	732f6c61 	.word	0x732f6c61
    612c:	682f6372 	.word	0x682f6372
    6130:	695f6c61 	.word	0x695f6c61
    6134:	00632e6f 	.word	0x00632e6f
    6138:	682f2e2e 	.word	0x682f2e2e
    613c:	732f6c61 	.word	0x732f6c61
    6140:	682f6372 	.word	0x682f6372
    6144:	735f6c61 	.word	0x735f6c61
    6148:	6d5f6970 	.word	0x6d5f6970
    614c:	616d645f 	.word	0x616d645f
    6150:	0000632e 	.word	0x0000632e
    6154:	682f2e2e 	.word	0x682f2e2e
    6158:	732f6c61 	.word	0x732f6c61
    615c:	682f6372 	.word	0x682f6372
    6160:	755f6c61 	.word	0x755f6c61
    6164:	74726173 	.word	0x74726173
    6168:	7973615f 	.word	0x7973615f
    616c:	632e636e 	.word	0x632e636e
    6170:	00000000 	.word	0x00000000
    6174:	682f2e2e 	.word	0x682f2e2e
    6178:	752f6c61 	.word	0x752f6c61
    617c:	736c6974 	.word	0x736c6974
    6180:	6372732f 	.word	0x6372732f
    6184:	6974752f 	.word	0x6974752f
    6188:	6c5f736c 	.word	0x6c5f736c
    618c:	2e747369 	.word	0x2e747369
    6190:	00000063 	.word	0x00000063
    6194:	682f2e2e 	.word	0x682f2e2e
    6198:	752f6c61 	.word	0x752f6c61
    619c:	736c6974 	.word	0x736c6974
    61a0:	6372732f 	.word	0x6372732f
    61a4:	6974752f 	.word	0x6974752f
    61a8:	725f736c 	.word	0x725f736c
    61ac:	62676e69 	.word	0x62676e69
    61b0:	65666675 	.word	0x65666675
    61b4:	00632e72 	.word	0x00632e72

000061b8 <_adcs>:
    61b8:	01000000 0003000c 00041807 00000000     ................
    61c8:	0014080b 00010000 000c0100 18040003     ................
    61d8:	00000004 080b0000 00000014 682f2e2e     ............../h
    61e8:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    61f8:	00000000                                ....

000061fc <_cfgs>:
    61fc:	00201300 14000000 00000000 00000000     .. .............
	...
    62fc:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    630c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    631c:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
    632c:	632e6361 00000000 40003000 40003400     ac.c.....0.@.4.@
    633c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    634c:	43000800 43000c00                       ...C...C

00006354 <_i2cms>:
    6354:	00000005 00200014 00000100 0000e6e5     ...... .........
    6364:	00d70000 02dc6c00                       .....l..

0000636c <sercomspi_regs>:
    636c:	0020000c 00000000 00000000 01ff0006     .. .............
    637c:	00000007 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    638c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

0000639c <_usb_ep_cfgs>:
    639c:	20000a70 00000000 00000040 20000a30     p.. ....@...0.. 
    63ac:	00000000 00000040 200009f0 00000000     ....@...... ....
    63bc:	00000040                                @...

000063c0 <grid_module_mux_lookup>:
    63c0:	05040100 0d0c0908 07060302 0f0e0b0a     ................

000063d0 <grid_module_din_buffer_size>:
	...

000063d1 <grid_module_ain_buffer_size>:
    63d1:	41001010                                         .

000063d2 <grid_module_led_buffer_size>:
    63d2:	44410010 25203a43 25206435 25206435     ..ADC: %5d %5d %
    63e2:	0a206435 52430000 25203a43 000a2078     5d ...CRC: %x ..
    63f2:	2e2e0000 6273752f 7665642f 2f656369     ..../usb/device/
    6402:	64627375 00632e63 00000000                       usbdc.c...

0000640c <__sf_fake_stderr>:
	...

0000642c <__sf_fake_stdin>:
	...

0000644c <__sf_fake_stdout>:
	...
    646c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    647c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    648c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    649c:	00006665                                ef..

000064a0 <_init>:
    64a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64a2:	bf00      	nop
    64a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    64a6:	bc08      	pop	{r3}
    64a8:	469e      	mov	lr, r3
    64aa:	4770      	bx	lr

000064ac <__init_array_start>:
    64ac:	00000289 	.word	0x00000289

000064b0 <_fini>:
    64b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64b2:	bf00      	nop
    64b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    64b6:	bc08      	pop	{r3}
    64b8:	469e      	mov	lr, r3
    64ba:	4770      	bx	lr

000064bc <__fini_array_start>:
    64bc:	00000265 	.word	0x00000265
