
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007848  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003d8  20000000  00007848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000203d8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000203d8  2**0
                  CONTENTS
  4 .bss          000018d8  200003e0  00007c30  000203e0  2**4
                  ALLOC
  5 .stack        00010000  20001cb8  00009508  000203e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020406  2**0
                  CONTENTS, READONLY
  8 .debug_info   000502f5  00000000  00000000  0002045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006969  00000000  00000000  00070754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020c78  00000000  00000000  000770bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001918  00000000  00000000  00097d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002320  00000000  00000000  0009964d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000371c9  00000000  00000000  0009b96d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002392d  00000000  00000000  000d2b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010e171  00000000  00000000  000f6463  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004824  00000000  00000000  002045d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 1c 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	55 2b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     U+..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 c1 28 00 00 d5 28 00 00     .........(...(..
      bc:	55 27 00 00 61 27 00 00 6d 27 00 00 79 27 00 00     U'..a'..m'..y'..
      cc:	85 27 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .'..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	31 2a 00 00 71 34 00 00 85 34 00 00 99 34 00 00     1*..q4...4...4..
     104:	ad 34 00 00 c1 34 00 00 d5 34 00 00 e9 34 00 00     .4...4...4...4..
     114:	fd 34 00 00 11 35 00 00 25 35 00 00 39 35 00 00     .4...5..%5..95..
     124:	4d 35 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     M5..............
     134:	e5 02 00 00 61 35 00 00 75 35 00 00 89 35 00 00     ....a5..u5...5..
     144:	9d 35 00 00 b1 35 00 00 c5 35 00 00 d9 35 00 00     .5...5...5...5..
     154:	ed 35 00 00 01 36 00 00 15 36 00 00 29 36 00 00     .5...6...6..)6..
     164:	3d 36 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     =6..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 35 4c 00 00     ............5L..
     184:	41 4c 00 00 4d 4c 00 00 59 4c 00 00 00 00 00 00     AL..ML..YL......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 09 24 00 00 1d 24 00 00 31 24 00 00     .....$...$..1$..
     224:	45 24 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     E$..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200003e0 	.word	0x200003e0
     280:	00000000 	.word	0x00000000
     284:	00007848 	.word	0x00007848

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00007848 	.word	0x00007848
     2c4:	200003e4 	.word	0x200003e4
     2c8:	00007848 	.word	0x00007848
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000ad5 	.word	0x00000ad5
     2e0:	00006a51 	.word	0x00006a51

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00007848 	.word	0x00007848
     364:	200003d8 	.word	0x200003d8
     368:	20001cb8 	.word	0x20001cb8
     36c:	200003e0 	.word	0x200003e0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00006a5d 	.word	0x00006a5d
     37c:	00005b89 	.word	0x00005b89

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200003fc 	.word	0x200003fc
     400:	200011a4 	.word	0x200011a4
     404:	2000129c 	.word	0x2000129c
     408:	43001c00 	.word	0x43001c00
     40c:	00000d51 	.word	0x00000d51
     410:	00000df5 	.word	0x00000df5
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200003fc 	.word	0x200003fc
     4a4:	20001354 	.word	0x20001354
     4a8:	200010fc 	.word	0x200010fc
     4ac:	43002000 	.word	0x43002000
     4b0:	00000d51 	.word	0x00000d51
     4b4:	00000df5 	.word	0x00000df5
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	200010f8 	.word	0x200010f8
     4e0:	00001091 	.word	0x00001091

000004e4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     4e4:	4a02      	ldr	r2, [pc, #8]	; (4f0 <FLASH_0_CLOCK_init+0xc>)
     4e6:	6913      	ldr	r3, [r2, #16]
     4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     4ec:	6113      	str	r3, [r2, #16]
     4ee:	4770      	bx	lr
     4f0:	40000800 	.word	0x40000800

000004f4 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <FLASH_0_init+0x10>)
     4f8:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     4fa:	4903      	ldr	r1, [pc, #12]	; (508 <FLASH_0_init+0x14>)
     4fc:	4803      	ldr	r0, [pc, #12]	; (50c <FLASH_0_init+0x18>)
     4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <FLASH_0_init+0x1c>)
     500:	4798      	blx	r3
     502:	bd08      	pop	{r3, pc}
     504:	000004e5 	.word	0x000004e5
     508:	41004000 	.word	0x41004000
     50c:	200010dc 	.word	0x200010dc
     510:	00001129 	.word	0x00001129

00000514 <USART_EAST_CLOCK_init>:
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <USART_EAST_CLOCK_init+0x1c>)
     516:	2241      	movs	r2, #65	; 0x41
     518:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     51c:	2242      	movs	r2, #66	; 0x42
     51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     522:	4a04      	ldr	r2, [pc, #16]	; (534 <USART_EAST_CLOCK_init+0x20>)
     524:	6953      	ldr	r3, [r2, #20]
     526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     52a:	6153      	str	r3, [r2, #20]
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	40001c00 	.word	0x40001c00
     534:	40000800 	.word	0x40000800

00000538 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     538:	4b10      	ldr	r3, [pc, #64]	; (57c <USART_EAST_PORT_init+0x44>)
     53a:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     53e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     542:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     546:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54a:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     54e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     552:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     556:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     55a:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     55e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     562:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     566:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     56a:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     56e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     572:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     576:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     57a:	4770      	bx	lr
     57c:	41008000 	.word	0x41008000

00000580 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     580:	b510      	push	{r4, lr}
     582:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <USART_EAST_init+0x20>)
     586:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     588:	2300      	movs	r3, #0
     58a:	9300      	str	r3, [sp, #0]
     58c:	2310      	movs	r3, #16
     58e:	4a05      	ldr	r2, [pc, #20]	; (5a4 <USART_EAST_init+0x24>)
     590:	4905      	ldr	r1, [pc, #20]	; (5a8 <USART_EAST_init+0x28>)
     592:	4806      	ldr	r0, [pc, #24]	; (5ac <USART_EAST_init+0x2c>)
     594:	4c06      	ldr	r4, [pc, #24]	; (5b0 <USART_EAST_init+0x30>)
     596:	47a0      	blx	r4
	USART_EAST_PORT_init();
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <USART_EAST_init+0x34>)
     59a:	4798      	blx	r3
}
     59c:	b002      	add	sp, #8
     59e:	bd10      	pop	{r4, pc}
     5a0:	00000515 	.word	0x00000515
     5a4:	20000424 	.word	0x20000424
     5a8:	40003000 	.word	0x40003000
     5ac:	200011d0 	.word	0x200011d0
     5b0:	000017b5 	.word	0x000017b5
     5b4:	00000539 	.word	0x00000539

000005b8 <USART_NORTH_CLOCK_init>:
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_NORTH_CLOCK_init+0x1c>)
     5ba:	2241      	movs	r2, #65	; 0x41
     5bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5c0:	2242      	movs	r2, #66	; 0x42
     5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5c6:	4a04      	ldr	r2, [pc, #16]	; (5d8 <USART_NORTH_CLOCK_init+0x20>)
     5c8:	6953      	ldr	r3, [r2, #20]
     5ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     5ce:	6153      	str	r3, [r2, #20]
     5d0:	4770      	bx	lr
     5d2:	bf00      	nop
     5d4:	40001c00 	.word	0x40001c00
     5d8:	40000800 	.word	0x40000800

000005dc <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5dc:	4b10      	ldr	r3, [pc, #64]	; (620 <USART_NORTH_PORT_init+0x44>)
     5de:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ee:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5f6:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fa:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fe:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     606:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     60e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     612:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     616:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     61e:	4770      	bx	lr
     620:	41008000 	.word	0x41008000

00000624 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     624:	b510      	push	{r4, lr}
     626:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     628:	4b06      	ldr	r3, [pc, #24]	; (644 <USART_NORTH_init+0x20>)
     62a:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     62c:	2300      	movs	r3, #0
     62e:	9300      	str	r3, [sp, #0]
     630:	2310      	movs	r3, #16
     632:	4a05      	ldr	r2, [pc, #20]	; (648 <USART_NORTH_init+0x24>)
     634:	4905      	ldr	r1, [pc, #20]	; (64c <USART_NORTH_init+0x28>)
     636:	4806      	ldr	r0, [pc, #24]	; (650 <USART_NORTH_init+0x2c>)
     638:	4c06      	ldr	r4, [pc, #24]	; (654 <USART_NORTH_init+0x30>)
     63a:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     63c:	4b06      	ldr	r3, [pc, #24]	; (658 <USART_NORTH_init+0x34>)
     63e:	4798      	blx	r3
}
     640:	b002      	add	sp, #8
     642:	bd10      	pop	{r4, pc}
     644:	000005b9 	.word	0x000005b9
     648:	20000434 	.word	0x20000434
     64c:	40003400 	.word	0x40003400
     650:	20001220 	.word	0x20001220
     654:	000017b5 	.word	0x000017b5
     658:	000005dd 	.word	0x000005dd

0000065c <GRID_AUX_CLOCK_init>:
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <GRID_AUX_CLOCK_init+0x1c>)
     65e:	2241      	movs	r2, #65	; 0x41
     660:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     664:	2242      	movs	r2, #66	; 0x42
     666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     66a:	4a04      	ldr	r2, [pc, #16]	; (67c <GRID_AUX_CLOCK_init+0x20>)
     66c:	6993      	ldr	r3, [r2, #24]
     66e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     672:	6193      	str	r3, [r2, #24]
     674:	4770      	bx	lr
     676:	bf00      	nop
     678:	40001c00 	.word	0x40001c00
     67c:	40000800 	.word	0x40000800

00000680 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     680:	4b10      	ldr	r3, [pc, #64]	; (6c4 <GRID_AUX_PORT_init+0x44>)
     682:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     686:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     692:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     696:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     69a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     69e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a2:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6b2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6be:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6c2:	4770      	bx	lr
     6c4:	41008000 	.word	0x41008000

000006c8 <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6c8:	b510      	push	{r4, lr}
     6ca:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     6cc:	4b06      	ldr	r3, [pc, #24]	; (6e8 <GRID_AUX_init+0x20>)
     6ce:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     6d0:	2300      	movs	r3, #0
     6d2:	9300      	str	r3, [sp, #0]
     6d4:	2310      	movs	r3, #16
     6d6:	4a05      	ldr	r2, [pc, #20]	; (6ec <GRID_AUX_init+0x24>)
     6d8:	4905      	ldr	r1, [pc, #20]	; (6f0 <GRID_AUX_init+0x28>)
     6da:	4806      	ldr	r0, [pc, #24]	; (6f4 <GRID_AUX_init+0x2c>)
     6dc:	4c06      	ldr	r4, [pc, #24]	; (6f8 <GRID_AUX_init+0x30>)
     6de:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <GRID_AUX_init+0x34>)
     6e2:	4798      	blx	r3
}
     6e4:	b002      	add	sp, #8
     6e6:	bd10      	pop	{r4, pc}
     6e8:	0000065d 	.word	0x0000065d
     6ec:	20000444 	.word	0x20000444
     6f0:	41012000 	.word	0x41012000
     6f4:	20001154 	.word	0x20001154
     6f8:	000017b5 	.word	0x000017b5
     6fc:	00000681 	.word	0x00000681

00000700 <USART_WEST_CLOCK_init>:
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <USART_WEST_CLOCK_init+0x1c>)
     702:	2241      	movs	r2, #65	; 0x41
     704:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     708:	2242      	movs	r2, #66	; 0x42
     70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     70e:	4a04      	ldr	r2, [pc, #16]	; (720 <USART_WEST_CLOCK_init+0x20>)
     710:	6a13      	ldr	r3, [r2, #32]
     712:	f043 0301 	orr.w	r3, r3, #1
     716:	6213      	str	r3, [r2, #32]
     718:	4770      	bx	lr
     71a:	bf00      	nop
     71c:	40001c00 	.word	0x40001c00
     720:	40000800 	.word	0x40000800

00000724 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     724:	4b10      	ldr	r3, [pc, #64]	; (768 <USART_WEST_PORT_init+0x44>)
     726:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     72a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     72e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     732:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     736:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     73a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     73e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     742:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     746:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     766:	4770      	bx	lr
     768:	41008000 	.word	0x41008000

0000076c <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     76c:	b510      	push	{r4, lr}
     76e:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     770:	4b07      	ldr	r3, [pc, #28]	; (790 <USART_WEST_init+0x24>)
     772:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     774:	2300      	movs	r3, #0
     776:	9300      	str	r3, [sp, #0]
     778:	2310      	movs	r3, #16
     77a:	4a06      	ldr	r2, [pc, #24]	; (794 <USART_WEST_init+0x28>)
     77c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     780:	4805      	ldr	r0, [pc, #20]	; (798 <USART_WEST_init+0x2c>)
     782:	4c06      	ldr	r4, [pc, #24]	; (79c <USART_WEST_init+0x30>)
     784:	47a0      	blx	r4
	USART_WEST_PORT_init();
     786:	4b06      	ldr	r3, [pc, #24]	; (7a0 <USART_WEST_init+0x34>)
     788:	4798      	blx	r3
}
     78a:	b002      	add	sp, #8
     78c:	bd10      	pop	{r4, pc}
     78e:	bf00      	nop
     790:	00000701 	.word	0x00000701
     794:	20000454 	.word	0x20000454
     798:	200012b4 	.word	0x200012b4
     79c:	000017b5 	.word	0x000017b5
     7a0:	00000725 	.word	0x00000725

000007a4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7a4:	4b16      	ldr	r3, [pc, #88]	; (800 <SYS_I2C_PORT_init+0x5c>)
     7a6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     7aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7ae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7be:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7ca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ce:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7d2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     7d6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7de:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ee:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7f6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7fa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     7fe:	4770      	bx	lr
     800:	41008000 	.word	0x41008000

00000804 <SYS_I2C_CLOCK_init>:
     804:	4b06      	ldr	r3, [pc, #24]	; (820 <SYS_I2C_CLOCK_init+0x1c>)
     806:	2241      	movs	r2, #65	; 0x41
     808:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     80c:	2242      	movs	r2, #66	; 0x42
     80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     812:	4a04      	ldr	r2, [pc, #16]	; (824 <SYS_I2C_CLOCK_init+0x20>)
     814:	6a13      	ldr	r3, [r2, #32]
     816:	f043 0302 	orr.w	r3, r3, #2
     81a:	6213      	str	r3, [r2, #32]
     81c:	4770      	bx	lr
     81e:	bf00      	nop
     820:	40001c00 	.word	0x40001c00
     824:	40000800 	.word	0x40000800

00000828 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     828:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     82a:	4b04      	ldr	r3, [pc, #16]	; (83c <SYS_I2C_init+0x14>)
     82c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     82e:	4904      	ldr	r1, [pc, #16]	; (840 <SYS_I2C_init+0x18>)
     830:	4804      	ldr	r0, [pc, #16]	; (844 <SYS_I2C_init+0x1c>)
     832:	4b05      	ldr	r3, [pc, #20]	; (848 <SYS_I2C_init+0x20>)
     834:	4798      	blx	r3
	SYS_I2C_PORT_init();
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <SYS_I2C_init+0x24>)
     838:	4798      	blx	r3
     83a:	bd08      	pop	{r3, pc}
     83c:	00000805 	.word	0x00000805
     840:	43000400 	.word	0x43000400
     844:	20001114 	.word	0x20001114
     848:	00001209 	.word	0x00001209
     84c:	000007a5 	.word	0x000007a5

00000850 <USART_SOUTH_CLOCK_init>:
     850:	4b06      	ldr	r3, [pc, #24]	; (86c <USART_SOUTH_CLOCK_init+0x1c>)
     852:	2241      	movs	r2, #65	; 0x41
     854:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     858:	2242      	movs	r2, #66	; 0x42
     85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     85e:	4a04      	ldr	r2, [pc, #16]	; (870 <USART_SOUTH_CLOCK_init+0x20>)
     860:	6a13      	ldr	r3, [r2, #32]
     862:	f043 0304 	orr.w	r3, r3, #4
     866:	6213      	str	r3, [r2, #32]
     868:	4770      	bx	lr
     86a:	bf00      	nop
     86c:	40001c00 	.word	0x40001c00
     870:	40000800 	.word	0x40000800

00000874 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     874:	4b10      	ldr	r3, [pc, #64]	; (8b8 <USART_SOUTH_PORT_init+0x44>)
     876:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     87a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     87e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     882:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     886:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     88a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     88e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     892:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     896:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     89a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     89e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8a6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8ae:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8b2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     8b6:	4770      	bx	lr
     8b8:	41008000 	.word	0x41008000

000008bc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     8bc:	b510      	push	{r4, lr}
     8be:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     8c0:	4b06      	ldr	r3, [pc, #24]	; (8dc <USART_SOUTH_init+0x20>)
     8c2:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     8c4:	2300      	movs	r3, #0
     8c6:	9300      	str	r3, [sp, #0]
     8c8:	2310      	movs	r3, #16
     8ca:	4a05      	ldr	r2, [pc, #20]	; (8e0 <USART_SOUTH_init+0x24>)
     8cc:	4905      	ldr	r1, [pc, #20]	; (8e4 <USART_SOUTH_init+0x28>)
     8ce:	4806      	ldr	r0, [pc, #24]	; (8e8 <USART_SOUTH_init+0x2c>)
     8d0:	4c06      	ldr	r4, [pc, #24]	; (8ec <USART_SOUTH_init+0x30>)
     8d2:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     8d4:	4b06      	ldr	r3, [pc, #24]	; (8f0 <USART_SOUTH_init+0x34>)
     8d6:	4798      	blx	r3
}
     8d8:	b002      	add	sp, #8
     8da:	bd10      	pop	{r4, pc}
     8dc:	00000851 	.word	0x00000851
     8e0:	20000464 	.word	0x20000464
     8e4:	43000800 	.word	0x43000800
     8e8:	20001304 	.word	0x20001304
     8ec:	000017b5 	.word	0x000017b5
     8f0:	00000875 	.word	0x00000875

000008f4 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8f4:	4b29      	ldr	r3, [pc, #164]	; (99c <GRID_LED_PORT_init+0xa8>)
     8f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     8fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     902:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     906:	4926      	ldr	r1, [pc, #152]	; (9a0 <GRID_LED_PORT_init+0xac>)
     908:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     90c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     910:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     914:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     918:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     91c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     920:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     924:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     928:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     92c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     930:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     934:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     938:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     93c:	4919      	ldr	r1, [pc, #100]	; (9a4 <GRID_LED_PORT_init+0xb0>)
     93e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     942:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     946:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     94a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     94e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     952:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     956:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     95a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     95e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     962:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     964:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     968:	629a      	str	r2, [r3, #40]	; 0x28
     96a:	4a0f      	ldr	r2, [pc, #60]	; (9a8 <GRID_LED_PORT_init+0xb4>)
     96c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     96e:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     972:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     976:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     97e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     982:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     986:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     98a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     98e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     992:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     99a:	4770      	bx	lr
     99c:	41008000 	.word	0x41008000
     9a0:	c0004000 	.word	0xc0004000
     9a4:	c0008000 	.word	0xc0008000
     9a8:	c0024000 	.word	0xc0024000

000009ac <GRID_LED_CLOCK_init>:
     9ac:	4b06      	ldr	r3, [pc, #24]	; (9c8 <GRID_LED_CLOCK_init+0x1c>)
     9ae:	2241      	movs	r2, #65	; 0x41
     9b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     9b4:	2242      	movs	r2, #66	; 0x42
     9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     9ba:	4a04      	ldr	r2, [pc, #16]	; (9cc <GRID_LED_CLOCK_init+0x20>)
     9bc:	6a13      	ldr	r3, [r2, #32]
     9be:	f043 0308 	orr.w	r3, r3, #8
     9c2:	6213      	str	r3, [r2, #32]
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop
     9c8:	40001c00 	.word	0x40001c00
     9cc:	40000800 	.word	0x40000800

000009d0 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     9d0:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <GRID_LED_init+0x14>)
     9d4:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     9d6:	4904      	ldr	r1, [pc, #16]	; (9e8 <GRID_LED_init+0x18>)
     9d8:	4804      	ldr	r0, [pc, #16]	; (9ec <GRID_LED_init+0x1c>)
     9da:	4b05      	ldr	r3, [pc, #20]	; (9f0 <GRID_LED_init+0x20>)
     9dc:	4798      	blx	r3
	GRID_LED_PORT_init();
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <GRID_LED_init+0x24>)
     9e0:	4798      	blx	r3
     9e2:	bd08      	pop	{r3, pc}
     9e4:	000009ad 	.word	0x000009ad
     9e8:	43000c00 	.word	0x43000c00
     9ec:	20001270 	.word	0x20001270
     9f0:	0000133d 	.word	0x0000133d
     9f4:	000008f5 	.word	0x000008f5

000009f8 <delay_driver_init>:
}

void delay_driver_init(void)
{
     9f8:	b508      	push	{r3, lr}
	delay_init(SysTick);
     9fa:	4802      	ldr	r0, [pc, #8]	; (a04 <delay_driver_init+0xc>)
     9fc:	4b02      	ldr	r3, [pc, #8]	; (a08 <delay_driver_init+0x10>)
     9fe:	4798      	blx	r3
     a00:	bd08      	pop	{r3, pc}
     a02:	bf00      	nop
     a04:	e000e010 	.word	0xe000e010
     a08:	000010c1 	.word	0x000010c1

00000a0c <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0c:	4b1e      	ldr	r3, [pc, #120]	; (a88 <USB_0_PORT_init+0x7c>)
     a0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     a12:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     a18:	6299      	str	r1, [r3, #40]	; 0x28
     a1a:	481c      	ldr	r0, [pc, #112]	; (a8c <USB_0_PORT_init+0x80>)
     a1c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a1e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     a24:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a34:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a3c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a44:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     a50:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a52:	6299      	str	r1, [r3, #40]	; 0x28
     a54:	490e      	ldr	r1, [pc, #56]	; (a90 <USB_0_PORT_init+0x84>)
     a56:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a58:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     a5e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a6e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a76:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a7a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a7e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     a86:	4770      	bx	lr
     a88:	41008000 	.word	0x41008000
     a8c:	c0000100 	.word	0xc0000100
     a90:	c0000200 	.word	0xc0000200

00000a94 <USB_0_CLOCK_init>:
     a94:	2241      	movs	r2, #65	; 0x41
     a96:	4b07      	ldr	r3, [pc, #28]	; (ab4 <USB_0_CLOCK_init+0x20>)
     a98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a9c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     aa0:	691a      	ldr	r2, [r3, #16]
     aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     aa6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     aa8:	699a      	ldr	r2, [r3, #24]
     aaa:	f042 0201 	orr.w	r2, r2, #1
     aae:	619a      	str	r2, [r3, #24]
     ab0:	4770      	bx	lr
     ab2:	bf00      	nop
     ab4:	40001c00 	.word	0x40001c00

00000ab8 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     ab8:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     aba:	4b03      	ldr	r3, [pc, #12]	; (ac8 <USB_0_init+0x10>)
     abc:	4798      	blx	r3
	usb_d_init();
     abe:	4b03      	ldr	r3, [pc, #12]	; (acc <USB_0_init+0x14>)
     ac0:	4798      	blx	r3
	USB_0_PORT_init();
     ac2:	4b03      	ldr	r3, [pc, #12]	; (ad0 <USB_0_init+0x18>)
     ac4:	4798      	blx	r3
     ac6:	bd08      	pop	{r3, pc}
     ac8:	00000a95 	.word	0x00000a95
     acc:	00001b91 	.word	0x00001b91
     ad0:	00000a0d 	.word	0x00000a0d

00000ad4 <system_init>:
}

void system_init(void)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     ad6:	4b67      	ldr	r3, [pc, #412]	; (c74 <system_init+0x1a0>)
     ad8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ada:	4b67      	ldr	r3, [pc, #412]	; (c78 <system_init+0x1a4>)
     adc:	2220      	movs	r2, #32
     ade:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ae0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ae2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ae6:	629a      	str	r2, [r3, #40]	; 0x28
     ae8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     aec:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aee:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     af2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     afe:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b02:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     b0a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     b0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b12:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     b16:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b1a:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     b22:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b26:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b2a:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
     b2e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b32:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b36:	f893 00ce 	ldrb.w	r0, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     b3a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3e:	f883 00ce 	strb.w	r0, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     b46:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	484c      	ldr	r0, [pc, #304]	; (c7c <system_init+0x1a8>)
     b4c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b50:	4c4b      	ldr	r4, [pc, #300]	; (c80 <system_init+0x1ac>)
     b52:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b56:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     b5a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b5e:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b62:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     b66:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6a:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
     b72:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b76:	4e43      	ldr	r6, [pc, #268]	; (c84 <system_init+0x1b0>)
     b78:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     b7c:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b80:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b84:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
     b88:	f044 0404 	orr.w	r4, r4, #4
     b8c:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b90:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b94:	f893 014b 	ldrb.w	r0, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     b98:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b9c:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ba0:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ba4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ba8:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     bac:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bb0:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb8:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     bc0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bcc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     bd0:	492d      	ldr	r1, [pc, #180]	; (c88 <system_init+0x1b4>)
     bd2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bd6:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     bda:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bde:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     be2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     be6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bea:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     bf2:	4926      	ldr	r1, [pc, #152]	; (c8c <system_init+0x1b8>)
     bf4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bf8:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     bfc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c00:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     c08:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c10:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     c14:	4a1e      	ldr	r2, [pc, #120]	; (c90 <system_init+0x1bc>)
     c16:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c1a:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c22:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     c26:	4b1b      	ldr	r3, [pc, #108]	; (c94 <system_init+0x1c0>)
     c28:	4798      	blx	r3
	ADC_1_init();
     c2a:	4b1b      	ldr	r3, [pc, #108]	; (c98 <system_init+0x1c4>)
     c2c:	4798      	blx	r3

	CRC_0_init();
     c2e:	4b1b      	ldr	r3, [pc, #108]	; (c9c <system_init+0x1c8>)
     c30:	4798      	blx	r3

	FLASH_0_init();
     c32:	4b1b      	ldr	r3, [pc, #108]	; (ca0 <system_init+0x1cc>)
     c34:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     c36:	4a1b      	ldr	r2, [pc, #108]	; (ca4 <system_init+0x1d0>)
     c38:	6953      	ldr	r3, [r2, #20]
     c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c3e:	6153      	str	r3, [r2, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     c40:	4b19      	ldr	r3, [pc, #100]	; (ca8 <system_init+0x1d4>)
     c42:	4798      	blx	r3
     c44:	4602      	mov	r2, r0
     c46:	4919      	ldr	r1, [pc, #100]	; (cac <system_init+0x1d8>)
     c48:	4819      	ldr	r0, [pc, #100]	; (cb0 <system_init+0x1dc>)
     c4a:	4b1a      	ldr	r3, [pc, #104]	; (cb4 <system_init+0x1e0>)
     c4c:	4798      	blx	r3

	RTC_Scheduler_init();
	USART_EAST_init();
     c4e:	4b1a      	ldr	r3, [pc, #104]	; (cb8 <system_init+0x1e4>)
     c50:	4798      	blx	r3
	USART_NORTH_init();
     c52:	4b1a      	ldr	r3, [pc, #104]	; (cbc <system_init+0x1e8>)
     c54:	4798      	blx	r3
	GRID_AUX_init();
     c56:	4b1a      	ldr	r3, [pc, #104]	; (cc0 <system_init+0x1ec>)
     c58:	4798      	blx	r3
	USART_WEST_init();
     c5a:	4b1a      	ldr	r3, [pc, #104]	; (cc4 <system_init+0x1f0>)
     c5c:	4798      	blx	r3

	SYS_I2C_init();
     c5e:	4b1a      	ldr	r3, [pc, #104]	; (cc8 <system_init+0x1f4>)
     c60:	4798      	blx	r3
	USART_SOUTH_init();
     c62:	4b1a      	ldr	r3, [pc, #104]	; (ccc <system_init+0x1f8>)
     c64:	4798      	blx	r3

	GRID_LED_init();
     c66:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <system_init+0x1fc>)
     c68:	4798      	blx	r3

	delay_driver_init();
     c6a:	4b1a      	ldr	r3, [pc, #104]	; (cd4 <system_init+0x200>)
     c6c:	4798      	blx	r3

	USB_0_init();
     c6e:	4b1a      	ldr	r3, [pc, #104]	; (cd8 <system_init+0x204>)
     c70:	4798      	blx	r3
     c72:	bd70      	pop	{r4, r5, r6, pc}
     c74:	0000246d 	.word	0x0000246d
     c78:	41008000 	.word	0x41008000
     c7c:	40028000 	.word	0x40028000
     c80:	c0020000 	.word	0xc0020000
     c84:	40020800 	.word	0x40020800
     c88:	c0000008 	.word	0xc0000008
     c8c:	c0000010 	.word	0xc0000010
     c90:	c0000020 	.word	0xc0000020
     c94:	00000381 	.word	0x00000381
     c98:	00000419 	.word	0x00000419
     c9c:	000004bd 	.word	0x000004bd
     ca0:	000004f5 	.word	0x000004f5
     ca4:	40000800 	.word	0x40000800
     ca8:	00002b4f 	.word	0x00002b4f
     cac:	40002400 	.word	0x40002400
     cb0:	200010c0 	.word	0x200010c0
     cb4:	000014e5 	.word	0x000014e5
     cb8:	00000581 	.word	0x00000581
     cbc:	00000625 	.word	0x00000625
     cc0:	000006c9 	.word	0x000006c9
     cc4:	0000076d 	.word	0x0000076d
     cc8:	00000829 	.word	0x00000829
     ccc:	000008bd 	.word	0x000008bd
     cd0:	000009d1 	.word	0x000009d1
     cd4:	000009f9 	.word	0x000009f9
     cd8:	00000ab9 	.word	0x00000ab9

00000cdc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     cdc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     cde:	6983      	ldr	r3, [r0, #24]
     ce0:	b103      	cbz	r3, ce4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     ce2:	4798      	blx	r3
     ce4:	bd08      	pop	{r3, pc}

00000ce6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     ce6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     ce8:	69c3      	ldr	r3, [r0, #28]
     cea:	b103      	cbz	r3, cee <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}

00000cf0 <adc_async_channel_conversion_done>:
{
     cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     cf4:	4606      	mov	r6, r0
     cf6:	460f      	mov	r7, r1
     cf8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     cfa:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     cfc:	5c5c      	ldrb	r4, [r3, r1]
     cfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     d02:	00e4      	lsls	r4, r4, #3
     d04:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     d08:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     d0c:	f105 0a04 	add.w	sl, r5, #4
     d10:	b2d1      	uxtb	r1, r2
     d12:	4650      	mov	r0, sl
     d14:	4b0c      	ldr	r3, [pc, #48]	; (d48 <adc_async_channel_conversion_done+0x58>)
     d16:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     d18:	4630      	mov	r0, r6
     d1a:	4b0c      	ldr	r3, [pc, #48]	; (d4c <adc_async_channel_conversion_done+0x5c>)
     d1c:	4798      	blx	r3
     d1e:	2801      	cmp	r0, #1
     d20:	d907      	bls.n	d32 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     d22:	ea4f 2119 	mov.w	r1, r9, lsr #8
     d26:	4650      	mov	r0, sl
     d28:	4b07      	ldr	r3, [pc, #28]	; (d48 <adc_async_channel_conversion_done+0x58>)
     d2a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     d2c:	8aab      	ldrh	r3, [r5, #20]
     d2e:	3301      	adds	r3, #1
     d30:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     d32:	8aab      	ldrh	r3, [r5, #20]
     d34:	3301      	adds	r3, #1
     d36:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     d38:	f858 3004 	ldr.w	r3, [r8, r4]
     d3c:	b113      	cbz	r3, d44 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     d3e:	4639      	mov	r1, r7
     d40:	4630      	mov	r0, r6
     d42:	4798      	blx	r3
     d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d48:	00002019 	.word	0x00002019
     d4c:	0000239f 	.word	0x0000239f

00000d50 <adc_async_init>:
{
     d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d54:	4689      	mov	r9, r1
     d56:	4616      	mov	r6, r2
     d58:	461c      	mov	r4, r3
     d5a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     d5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     d60:	4607      	mov	r7, r0
     d62:	b140      	cbz	r0, d76 <adc_async_init+0x26>
     d64:	b149      	cbz	r1, d7a <adc_async_init+0x2a>
     d66:	b152      	cbz	r2, d7e <adc_async_init+0x2e>
     d68:	f1b8 0f00 	cmp.w	r8, #0
     d6c:	d009      	beq.n	d82 <adc_async_init+0x32>
     d6e:	1c28      	adds	r0, r5, #0
     d70:	bf18      	it	ne
     d72:	2001      	movne	r0, #1
     d74:	e006      	b.n	d84 <adc_async_init+0x34>
     d76:	2000      	movs	r0, #0
     d78:	e004      	b.n	d84 <adc_async_init+0x34>
     d7a:	2000      	movs	r0, #0
     d7c:	e002      	b.n	d84 <adc_async_init+0x34>
     d7e:	2000      	movs	r0, #0
     d80:	e000      	b.n	d84 <adc_async_init+0x34>
     d82:	2000      	movs	r0, #0
     d84:	f8df b064 	ldr.w	fp, [pc, #100]	; dec <adc_async_init+0x9c>
     d88:	223f      	movs	r2, #63	; 0x3f
     d8a:	4659      	mov	r1, fp
     d8c:	f8df a060 	ldr.w	sl, [pc, #96]	; df0 <adc_async_init+0xa0>
     d90:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     d92:	1c60      	adds	r0, r4, #1
     d94:	2240      	movs	r2, #64	; 0x40
     d96:	4659      	mov	r1, fp
     d98:	4580      	cmp	r8, r0
     d9a:	bfcc      	ite	gt
     d9c:	2000      	movgt	r0, #0
     d9e:	2001      	movle	r0, #1
     da0:	47d0      	blx	sl
	device = &descr->device;
     da2:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     da4:	21ff      	movs	r1, #255	; 0xff
     da6:	b2da      	uxtb	r2, r3
     da8:	54b1      	strb	r1, [r6, r2]
     daa:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     dac:	b2da      	uxtb	r2, r3
     dae:	42a2      	cmp	r2, r4
     db0:	d9f9      	bls.n	da6 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     db2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     db4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     db8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     dbc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     dbe:	4649      	mov	r1, r9
     dc0:	4638      	mov	r0, r7
     dc2:	4b06      	ldr	r3, [pc, #24]	; (ddc <adc_async_init+0x8c>)
     dc4:	4798      	blx	r3
	if (init_status) {
     dc6:	4603      	mov	r3, r0
     dc8:	b928      	cbnz	r0, dd6 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     dca:	4a05      	ldr	r2, [pc, #20]	; (de0 <adc_async_init+0x90>)
     dcc:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     dce:	4a05      	ldr	r2, [pc, #20]	; (de4 <adc_async_init+0x94>)
     dd0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     dd2:	4a05      	ldr	r2, [pc, #20]	; (de8 <adc_async_init+0x98>)
     dd4:	607a      	str	r2, [r7, #4]
}
     dd6:	4618      	mov	r0, r3
     dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ddc:	0000226d 	.word	0x0000226d
     de0:	00000cf1 	.word	0x00000cf1
     de4:	00000cdd 	.word	0x00000cdd
     de8:	00000ce7 	.word	0x00000ce7
     dec:	000073b4 	.word	0x000073b4
     df0:	00001edd 	.word	0x00001edd

00000df4 <adc_async_register_channel_buffer>:
{
     df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     df8:	460e      	mov	r6, r1
     dfa:	4617      	mov	r7, r2
     dfc:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     dfe:	4605      	mov	r5, r0
     e00:	2800      	cmp	r0, #0
     e02:	d040      	beq.n	e86 <adc_async_register_channel_buffer+0x92>
     e04:	2a00      	cmp	r2, #0
     e06:	d040      	beq.n	e8a <adc_async_register_channel_buffer+0x96>
     e08:	1c18      	adds	r0, r3, #0
     e0a:	bf18      	it	ne
     e0c:	2001      	movne	r0, #1
     e0e:	f8df 9098 	ldr.w	r9, [pc, #152]	; ea8 <adc_async_register_channel_buffer+0xb4>
     e12:	2266      	movs	r2, #102	; 0x66
     e14:	4649      	mov	r1, r9
     e16:	4c22      	ldr	r4, [pc, #136]	; (ea0 <adc_async_register_channel_buffer+0xac>)
     e18:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     e1a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     e1e:	2267      	movs	r2, #103	; 0x67
     e20:	4649      	mov	r1, r9
     e22:	42b0      	cmp	r0, r6
     e24:	bf34      	ite	cc
     e26:	2000      	movcc	r0, #0
     e28:	2001      	movcs	r0, #1
     e2a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     e2c:	6a29      	ldr	r1, [r5, #32]
     e2e:	5d8b      	ldrb	r3, [r1, r6]
     e30:	2bff      	cmp	r3, #255	; 0xff
     e32:	d12c      	bne.n	e8e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     e34:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     e38:	2300      	movs	r3, #0
     e3a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     e3c:	b2da      	uxtb	r2, r3
     e3e:	5c8a      	ldrb	r2, [r1, r2]
     e40:	2aff      	cmp	r2, #255	; 0xff
			index++;
     e42:	bf1c      	itt	ne
     e44:	3401      	addne	r4, #1
     e46:	b2e4      	uxtbne	r4, r4
     e48:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     e4a:	b2da      	uxtb	r2, r3
     e4c:	4282      	cmp	r2, r0
     e4e:	d9f5      	bls.n	e3c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     e50:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     e54:	42a3      	cmp	r3, r4
     e56:	d31d      	bcc.n	e94 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     e58:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     e5c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     e60:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     e62:	4448      	add	r0, r9
     e64:	4642      	mov	r2, r8
     e66:	4639      	mov	r1, r7
     e68:	3004      	adds	r0, #4
     e6a:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <adc_async_register_channel_buffer+0xb0>)
     e6c:	4798      	blx	r3
     e6e:	4602      	mov	r2, r0
     e70:	b998      	cbnz	r0, e9a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     e72:	6a2b      	ldr	r3, [r5, #32]
     e74:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     e76:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e78:	4499      	add	r9, r3
     e7a:	2300      	movs	r3, #0
     e7c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     e80:	4610      	mov	r0, r2
     e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     e86:	2000      	movs	r0, #0
     e88:	e7c1      	b.n	e0e <adc_async_register_channel_buffer+0x1a>
     e8a:	2000      	movs	r0, #0
     e8c:	e7bf      	b.n	e0e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     e8e:	f06f 020c 	mvn.w	r2, #12
     e92:	e7f5      	b.n	e80 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     e94:	f06f 021b 	mvn.w	r2, #27
     e98:	e7f2      	b.n	e80 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     e9a:	f06f 020c 	mvn.w	r2, #12
     e9e:	e7ef      	b.n	e80 <adc_async_register_channel_buffer+0x8c>
     ea0:	00001edd 	.word	0x00001edd
     ea4:	00001f85 	.word	0x00001f85
     ea8:	000073b4 	.word	0x000073b4

00000eac <adc_async_enable_channel>:
{
     eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eae:	460d      	mov	r5, r1
	ASSERT(descr);
     eb0:	4f0b      	ldr	r7, [pc, #44]	; (ee0 <adc_async_enable_channel+0x34>)
     eb2:	4604      	mov	r4, r0
     eb4:	2283      	movs	r2, #131	; 0x83
     eb6:	4639      	mov	r1, r7
     eb8:	3000      	adds	r0, #0
     eba:	bf18      	it	ne
     ebc:	2001      	movne	r0, #1
     ebe:	4e09      	ldr	r6, [pc, #36]	; (ee4 <adc_async_enable_channel+0x38>)
     ec0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     ec2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     ec6:	2284      	movs	r2, #132	; 0x84
     ec8:	4639      	mov	r1, r7
     eca:	42a8      	cmp	r0, r5
     ecc:	bf34      	ite	cc
     ece:	2000      	movcc	r0, #0
     ed0:	2001      	movcs	r0, #1
     ed2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     ed4:	4629      	mov	r1, r5
     ed6:	4620      	mov	r0, r4
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <adc_async_enable_channel+0x3c>)
     eda:	4798      	blx	r3
}
     edc:	2000      	movs	r0, #0
     ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ee0:	000073b4 	.word	0x000073b4
     ee4:	00001edd 	.word	0x00001edd
     ee8:	00002389 	.word	0x00002389

00000eec <adc_async_register_callback>:
{
     eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ef0:	460e      	mov	r6, r1
     ef2:	4614      	mov	r4, r2
     ef4:	4699      	mov	r9, r3
	ASSERT(descr);
     ef6:	f8df 8070 	ldr.w	r8, [pc, #112]	; f68 <adc_async_register_callback+0x7c>
     efa:	4605      	mov	r5, r0
     efc:	229c      	movs	r2, #156	; 0x9c
     efe:	4641      	mov	r1, r8
     f00:	3000      	adds	r0, #0
     f02:	bf18      	it	ne
     f04:	2001      	movne	r0, #1
     f06:	4f16      	ldr	r7, [pc, #88]	; (f60 <adc_async_register_callback+0x74>)
     f08:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     f0a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     f0e:	229d      	movs	r2, #157	; 0x9d
     f10:	4641      	mov	r1, r8
     f12:	42b0      	cmp	r0, r6
     f14:	bf34      	ite	cc
     f16:	2000      	movcc	r0, #0
     f18:	2001      	movcs	r0, #1
     f1a:	47b8      	blx	r7
	switch (type) {
     f1c:	2c01      	cmp	r4, #1
     f1e:	d019      	beq.n	f54 <adc_async_register_callback+0x68>
     f20:	b12c      	cbz	r4, f2e <adc_async_register_callback+0x42>
     f22:	2c02      	cmp	r4, #2
     f24:	d019      	beq.n	f5a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
     f26:	f06f 000c 	mvn.w	r0, #12
}
     f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
     f2e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     f30:	5d9b      	ldrb	r3, [r3, r6]
     f32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f38:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     f3c:	f119 0300 	adds.w	r3, r9, #0
     f40:	bf18      	it	ne
     f42:	2301      	movne	r3, #1
     f44:	4622      	mov	r2, r4
     f46:	4631      	mov	r1, r6
     f48:	4628      	mov	r0, r5
     f4a:	4c06      	ldr	r4, [pc, #24]	; (f64 <adc_async_register_callback+0x78>)
     f4c:	47a0      	blx	r4
	return ERR_NONE;
     f4e:	2000      	movs	r0, #0
     f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
     f54:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
     f58:	e7f0      	b.n	f3c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     f5a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
     f5e:	e7ed      	b.n	f3c <adc_async_register_callback+0x50>
     f60:	00001edd 	.word	0x00001edd
     f64:	000023c7 	.word	0x000023c7
     f68:	000073b4 	.word	0x000073b4

00000f6c <adc_async_read_channel>:
{
     f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f70:	b083      	sub	sp, #12
     f72:	4688      	mov	r8, r1
     f74:	4691      	mov	r9, r2
     f76:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
     f78:	4604      	mov	r4, r0
     f7a:	2800      	cmp	r0, #0
     f7c:	d04f      	beq.n	101e <adc_async_read_channel+0xb2>
     f7e:	2a00      	cmp	r2, #0
     f80:	d04f      	beq.n	1022 <adc_async_read_channel+0xb6>
     f82:	1c18      	adds	r0, r3, #0
     f84:	bf18      	it	ne
     f86:	2001      	movne	r0, #1
     f88:	4f29      	ldr	r7, [pc, #164]	; (1030 <adc_async_read_channel+0xc4>)
     f8a:	22bc      	movs	r2, #188	; 0xbc
     f8c:	4639      	mov	r1, r7
     f8e:	4e29      	ldr	r6, [pc, #164]	; (1034 <adc_async_read_channel+0xc8>)
     f90:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     f92:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     f96:	22bd      	movs	r2, #189	; 0xbd
     f98:	4639      	mov	r1, r7
     f9a:	4540      	cmp	r0, r8
     f9c:	bf34      	ite	cc
     f9e:	2000      	movcc	r0, #0
     fa0:	2001      	movcs	r0, #1
     fa2:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     fa4:	4620      	mov	r0, r4
     fa6:	4b24      	ldr	r3, [pc, #144]	; (1038 <adc_async_read_channel+0xcc>)
     fa8:	4798      	blx	r3
	ASSERT(!(length % data_size));
     faa:	fb95 f3f0 	sdiv	r3, r5, r0
     fae:	fb03 5010 	mls	r0, r3, r0, r5
     fb2:	22bf      	movs	r2, #191	; 0xbf
     fb4:	4639      	mov	r1, r7
     fb6:	fab0 f080 	clz	r0, r0
     fba:	0940      	lsrs	r0, r0, #5
     fbc:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
     fbe:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     fc0:	f813 b008 	ldrb.w	fp, [r3, r8]
     fc4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
     fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fca:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
     fce:	a801      	add	r0, sp, #4
     fd0:	4b1a      	ldr	r3, [pc, #104]	; (103c <adc_async_read_channel+0xd0>)
     fd2:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     fd4:	f10b 0a04 	add.w	sl, fp, #4
     fd8:	4650      	mov	r0, sl
     fda:	4b19      	ldr	r3, [pc, #100]	; (1040 <adc_async_read_channel+0xd4>)
     fdc:	4798      	blx	r3
     fde:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     fe0:	a801      	add	r0, sp, #4
     fe2:	4b18      	ldr	r3, [pc, #96]	; (1044 <adc_async_read_channel+0xd8>)
     fe4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     fe6:	f1b8 0f00 	cmp.w	r8, #0
     fea:	d01c      	beq.n	1026 <adc_async_read_channel+0xba>
     fec:	b1ed      	cbz	r5, 102a <adc_async_read_channel+0xbe>
     fee:	3d01      	subs	r5, #1
     ff0:	b2ad      	uxth	r5, r5
     ff2:	3502      	adds	r5, #2
     ff4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     ff6:	4f14      	ldr	r7, [pc, #80]	; (1048 <adc_async_read_channel+0xdc>)
     ff8:	b2a6      	uxth	r6, r4
     ffa:	1e61      	subs	r1, r4, #1
     ffc:	4449      	add	r1, r9
     ffe:	4650      	mov	r0, sl
    1000:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    1002:	4544      	cmp	r4, r8
    1004:	d002      	beq.n	100c <adc_async_read_channel+0xa0>
    1006:	3401      	adds	r4, #1
    1008:	42ac      	cmp	r4, r5
    100a:	d1f5      	bne.n	ff8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    100c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    1010:	1b9b      	subs	r3, r3, r6
    1012:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    1016:	4630      	mov	r0, r6
    1018:	b003      	add	sp, #12
    101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    101e:	2000      	movs	r0, #0
    1020:	e7b2      	b.n	f88 <adc_async_read_channel+0x1c>
    1022:	2000      	movs	r0, #0
    1024:	e7b0      	b.n	f88 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    1026:	2600      	movs	r6, #0
    1028:	e7f0      	b.n	100c <adc_async_read_channel+0xa0>
    102a:	2600      	movs	r6, #0
    102c:	e7ee      	b.n	100c <adc_async_read_channel+0xa0>
    102e:	bf00      	nop
    1030:	000073b4 	.word	0x000073b4
    1034:	00001edd 	.word	0x00001edd
    1038:	0000239f 	.word	0x0000239f
    103c:	00001075 	.word	0x00001075
    1040:	00002059 	.word	0x00002059
    1044:	00001083 	.word	0x00001083
    1048:	00001fd5 	.word	0x00001fd5

0000104c <adc_async_start_conversion>:
{
    104c:	b510      	push	{r4, lr}
	ASSERT(descr);
    104e:	4604      	mov	r4, r0
    1050:	22d6      	movs	r2, #214	; 0xd6
    1052:	4905      	ldr	r1, [pc, #20]	; (1068 <adc_async_start_conversion+0x1c>)
    1054:	3000      	adds	r0, #0
    1056:	bf18      	it	ne
    1058:	2001      	movne	r0, #1
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <adc_async_start_conversion+0x20>)
    105c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    105e:	4620      	mov	r0, r4
    1060:	4b03      	ldr	r3, [pc, #12]	; (1070 <adc_async_start_conversion+0x24>)
    1062:	4798      	blx	r3
}
    1064:	2000      	movs	r0, #0
    1066:	bd10      	pop	{r4, pc}
    1068:	000073b4 	.word	0x000073b4
    106c:	00001edd 	.word	0x00001edd
    1070:	000023b1 	.word	0x000023b1

00001074 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1074:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1078:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    107a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    107c:	f3bf 8f5f 	dmb	sy
    1080:	4770      	bx	lr

00001082 <atomic_leave_critical>:
    1082:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1086:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1088:	f383 8810 	msr	PRIMASK, r3
    108c:	4770      	bx	lr
	...

00001090 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1090:	b538      	push	{r3, r4, r5, lr}
    1092:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1094:	4605      	mov	r5, r0
    1096:	b158      	cbz	r0, 10b0 <crc_sync_init+0x20>
    1098:	1c08      	adds	r0, r1, #0
    109a:	bf18      	it	ne
    109c:	2001      	movne	r0, #1
    109e:	222b      	movs	r2, #43	; 0x2b
    10a0:	4904      	ldr	r1, [pc, #16]	; (10b4 <crc_sync_init+0x24>)
    10a2:	4b05      	ldr	r3, [pc, #20]	; (10b8 <crc_sync_init+0x28>)
    10a4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    10a6:	4621      	mov	r1, r4
    10a8:	4628      	mov	r0, r5
    10aa:	4b04      	ldr	r3, [pc, #16]	; (10bc <crc_sync_init+0x2c>)
    10ac:	4798      	blx	r3
}
    10ae:	bd38      	pop	{r3, r4, r5, pc}
    10b0:	2000      	movs	r0, #0
    10b2:	e7f4      	b.n	109e <crc_sync_init+0xe>
    10b4:	000073d0 	.word	0x000073d0
    10b8:	00001edd 	.word	0x00001edd
    10bc:	00002791 	.word	0x00002791

000010c0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    10c0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <delay_init+0xc>)
    10c4:	6018      	str	r0, [r3, #0]
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <delay_init+0x10>)
    10c8:	4798      	blx	r3
    10ca:	bd08      	pop	{r3, pc}
    10cc:	20000474 	.word	0x20000474
    10d0:	00003959 	.word	0x00003959

000010d4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    10d4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    10d6:	4b04      	ldr	r3, [pc, #16]	; (10e8 <delay_us+0x14>)
    10d8:	681c      	ldr	r4, [r3, #0]
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <delay_us+0x18>)
    10dc:	4798      	blx	r3
    10de:	4601      	mov	r1, r0
    10e0:	4620      	mov	r0, r4
    10e2:	4b03      	ldr	r3, [pc, #12]	; (10f0 <delay_us+0x1c>)
    10e4:	4798      	blx	r3
    10e6:	bd10      	pop	{r4, pc}
    10e8:	20000474 	.word	0x20000474
    10ec:	00002459 	.word	0x00002459
    10f0:	0000396d 	.word	0x0000396d

000010f4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    10f4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    10f6:	4b04      	ldr	r3, [pc, #16]	; (1108 <delay_ms+0x14>)
    10f8:	681c      	ldr	r4, [r3, #0]
    10fa:	4b04      	ldr	r3, [pc, #16]	; (110c <delay_ms+0x18>)
    10fc:	4798      	blx	r3
    10fe:	4601      	mov	r1, r0
    1100:	4620      	mov	r0, r4
    1102:	4b03      	ldr	r3, [pc, #12]	; (1110 <delay_ms+0x1c>)
    1104:	4798      	blx	r3
    1106:	bd10      	pop	{r4, pc}
    1108:	20000474 	.word	0x20000474
    110c:	00002461 	.word	0x00002461
    1110:	0000396d 	.word	0x0000396d

00001114 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1114:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1116:	6943      	ldr	r3, [r0, #20]
    1118:	b103      	cbz	r3, 111c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    111a:	4798      	blx	r3
    111c:	bd08      	pop	{r3, pc}

0000111e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    111e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1120:	6983      	ldr	r3, [r0, #24]
    1122:	b103      	cbz	r3, 1126 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1124:	4798      	blx	r3
    1126:	bd08      	pop	{r3, pc}

00001128 <flash_init>:
{
    1128:	b538      	push	{r3, r4, r5, lr}
    112a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    112c:	4604      	mov	r4, r0
    112e:	b190      	cbz	r0, 1156 <flash_init+0x2e>
    1130:	1c08      	adds	r0, r1, #0
    1132:	bf18      	it	ne
    1134:	2001      	movne	r0, #1
    1136:	2238      	movs	r2, #56	; 0x38
    1138:	4908      	ldr	r1, [pc, #32]	; (115c <flash_init+0x34>)
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <flash_init+0x38>)
    113c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    113e:	4629      	mov	r1, r5
    1140:	4620      	mov	r0, r4
    1142:	4b08      	ldr	r3, [pc, #32]	; (1164 <flash_init+0x3c>)
    1144:	4798      	blx	r3
	if (rc) {
    1146:	4603      	mov	r3, r0
    1148:	b918      	cbnz	r0, 1152 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    114a:	4a07      	ldr	r2, [pc, #28]	; (1168 <flash_init+0x40>)
    114c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    114e:	4a07      	ldr	r2, [pc, #28]	; (116c <flash_init+0x44>)
    1150:	6062      	str	r2, [r4, #4]
}
    1152:	4618      	mov	r0, r3
    1154:	bd38      	pop	{r3, r4, r5, pc}
    1156:	2000      	movs	r0, #0
    1158:	e7ed      	b.n	1136 <flash_init+0xe>
    115a:	bf00      	nop
    115c:	000073ec 	.word	0x000073ec
    1160:	00001edd 	.word	0x00001edd
    1164:	00002849 	.word	0x00002849
    1168:	00001115 	.word	0x00001115
    116c:	0000111f 	.word	0x0000111f

00001170 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1170:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1172:	8843      	ldrh	r3, [r0, #2]
    1174:	f413 7f80 	tst.w	r3, #256	; 0x100
    1178:	d102      	bne.n	1180 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    117a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    117c:	b103      	cbz	r3, 1180 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    117e:	4798      	blx	r3
    1180:	bd08      	pop	{r3, pc}

00001182 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1182:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1184:	8843      	ldrh	r3, [r0, #2]
    1186:	f413 7f80 	tst.w	r3, #256	; 0x100
    118a:	d102      	bne.n	1192 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    118c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    118e:	b103      	cbz	r3, 1192 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    1190:	4798      	blx	r3
    1192:	bd08      	pop	{r3, pc}

00001194 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1194:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1196:	8843      	ldrh	r3, [r0, #2]
    1198:	f413 7f80 	tst.w	r3, #256	; 0x100
    119c:	d102      	bne.n	11a4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    119e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11a0:	b103      	cbz	r3, 11a4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    11a2:	4798      	blx	r3
    11a4:	bd08      	pop	{r3, pc}
	...

000011a8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    11a8:	b510      	push	{r4, lr}
    11aa:	b084      	sub	sp, #16
    11ac:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    11ae:	8a83      	ldrh	r3, [r0, #20]
    11b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    11b4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    11b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    11be:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    11c0:	a901      	add	r1, sp, #4
    11c2:	3828      	subs	r0, #40	; 0x28
    11c4:	4b03      	ldr	r3, [pc, #12]	; (11d4 <i2c_m_async_write+0x2c>)
    11c6:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    11c8:	2800      	cmp	r0, #0
    11ca:	bf08      	it	eq
    11cc:	4620      	moveq	r0, r4
    11ce:	b004      	add	sp, #16
    11d0:	bd10      	pop	{r4, pc}
    11d2:	bf00      	nop
    11d4:	00003325 	.word	0x00003325

000011d8 <i2c_m_async_read>:
{
    11d8:	b510      	push	{r4, lr}
    11da:	b084      	sub	sp, #16
    11dc:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    11de:	8a83      	ldrh	r3, [r0, #20]
    11e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    11e4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    11e6:	f248 0301 	movw	r3, #32769	; 0x8001
    11ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    11ee:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    11f0:	a901      	add	r1, sp, #4
    11f2:	3828      	subs	r0, #40	; 0x28
    11f4:	4b03      	ldr	r3, [pc, #12]	; (1204 <i2c_m_async_read+0x2c>)
    11f6:	4798      	blx	r3
}
    11f8:	2800      	cmp	r0, #0
    11fa:	bf08      	it	eq
    11fc:	4620      	moveq	r0, r4
    11fe:	b004      	add	sp, #16
    1200:	bd10      	pop	{r4, pc}
    1202:	bf00      	nop
    1204:	00003325 	.word	0x00003325

00001208 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1208:	b570      	push	{r4, r5, r6, lr}
    120a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    120c:	4604      	mov	r4, r0
    120e:	2289      	movs	r2, #137	; 0x89
    1210:	490f      	ldr	r1, [pc, #60]	; (1250 <i2c_m_async_init+0x48>)
    1212:	3000      	adds	r0, #0
    1214:	bf18      	it	ne
    1216:	2001      	movne	r0, #1
    1218:	4b0e      	ldr	r3, [pc, #56]	; (1254 <i2c_m_async_init+0x4c>)
    121a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    121c:	4629      	mov	r1, r5
    121e:	4620      	mov	r0, r4
    1220:	4b0d      	ldr	r3, [pc, #52]	; (1258 <i2c_m_async_init+0x50>)
    1222:	4798      	blx	r3
	if (init_status) {
    1224:	4605      	mov	r5, r0
    1226:	b108      	cbz	r0, 122c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1228:	4628      	mov	r0, r5
    122a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    122c:	4b0b      	ldr	r3, [pc, #44]	; (125c <i2c_m_async_init+0x54>)
    122e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1230:	4b0b      	ldr	r3, [pc, #44]	; (1260 <i2c_m_async_init+0x58>)
    1232:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1234:	4a0b      	ldr	r2, [pc, #44]	; (1264 <i2c_m_async_init+0x5c>)
    1236:	2101      	movs	r1, #1
    1238:	4620      	mov	r0, r4
    123a:	4e0b      	ldr	r6, [pc, #44]	; (1268 <i2c_m_async_init+0x60>)
    123c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    123e:	4a0b      	ldr	r2, [pc, #44]	; (126c <i2c_m_async_init+0x64>)
    1240:	2102      	movs	r1, #2
    1242:	4620      	mov	r0, r4
    1244:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1246:	4a0a      	ldr	r2, [pc, #40]	; (1270 <i2c_m_async_init+0x68>)
    1248:	2100      	movs	r1, #0
    124a:	4620      	mov	r0, r4
    124c:	47b0      	blx	r6
	return ERR_NONE;
    124e:	e7eb      	b.n	1228 <i2c_m_async_init+0x20>
    1250:	00007404 	.word	0x00007404
    1254:	00001edd 	.word	0x00001edd
    1258:	000032a5 	.word	0x000032a5
    125c:	000011d9 	.word	0x000011d9
    1260:	000011a9 	.word	0x000011a9
    1264:	00001171 	.word	0x00001171
    1268:	00003455 	.word	0x00003455
    126c:	00001183 	.word	0x00001183
    1270:	00001195 	.word	0x00001195

00001274 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	460d      	mov	r5, r1
    1278:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    127a:	4604      	mov	r4, r0
    127c:	b160      	cbz	r0, 1298 <io_write+0x24>
    127e:	1c08      	adds	r0, r1, #0
    1280:	bf18      	it	ne
    1282:	2001      	movne	r0, #1
    1284:	2234      	movs	r2, #52	; 0x34
    1286:	4905      	ldr	r1, [pc, #20]	; (129c <io_write+0x28>)
    1288:	4b05      	ldr	r3, [pc, #20]	; (12a0 <io_write+0x2c>)
    128a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    128c:	6823      	ldr	r3, [r4, #0]
    128e:	4632      	mov	r2, r6
    1290:	4629      	mov	r1, r5
    1292:	4620      	mov	r0, r4
    1294:	4798      	blx	r3
}
    1296:	bd70      	pop	{r4, r5, r6, pc}
    1298:	2000      	movs	r0, #0
    129a:	e7f3      	b.n	1284 <io_write+0x10>
    129c:	00007424 	.word	0x00007424
    12a0:	00001edd 	.word	0x00001edd

000012a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    12a4:	b570      	push	{r4, r5, r6, lr}
    12a6:	460d      	mov	r5, r1
    12a8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    12aa:	4604      	mov	r4, r0
    12ac:	b160      	cbz	r0, 12c8 <io_read+0x24>
    12ae:	1c08      	adds	r0, r1, #0
    12b0:	bf18      	it	ne
    12b2:	2001      	movne	r0, #1
    12b4:	223d      	movs	r2, #61	; 0x3d
    12b6:	4905      	ldr	r1, [pc, #20]	; (12cc <io_read+0x28>)
    12b8:	4b05      	ldr	r3, [pc, #20]	; (12d0 <io_read+0x2c>)
    12ba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    12bc:	6863      	ldr	r3, [r4, #4]
    12be:	4632      	mov	r2, r6
    12c0:	4629      	mov	r1, r5
    12c2:	4620      	mov	r0, r4
    12c4:	4798      	blx	r3
}
    12c6:	bd70      	pop	{r4, r5, r6, pc}
    12c8:	2000      	movs	r0, #0
    12ca:	e7f3      	b.n	12b4 <io_read+0x10>
    12cc:	00007424 	.word	0x00007424
    12d0:	00001edd 	.word	0x00001edd

000012d4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    12d4:	b570      	push	{r4, r5, r6, lr}
    12d6:	460d      	mov	r5, r1
    12d8:	4616      	mov	r6, r2
	ASSERT(io);
    12da:	4604      	mov	r4, r0
    12dc:	2298      	movs	r2, #152	; 0x98
    12de:	4907      	ldr	r1, [pc, #28]	; (12fc <_spi_m_dma_io_write+0x28>)
    12e0:	3000      	adds	r0, #0
    12e2:	bf18      	it	ne
    12e4:	2001      	movne	r0, #1
    12e6:	4b06      	ldr	r3, [pc, #24]	; (1300 <_spi_m_dma_io_write+0x2c>)
    12e8:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    12ea:	4633      	mov	r3, r6
    12ec:	2200      	movs	r2, #0
    12ee:	4629      	mov	r1, r5
    12f0:	f1a4 001c 	sub.w	r0, r4, #28
    12f4:	4c03      	ldr	r4, [pc, #12]	; (1304 <_spi_m_dma_io_write+0x30>)
    12f6:	47a0      	blx	r4
}
    12f8:	bd70      	pop	{r4, r5, r6, pc}
    12fa:	bf00      	nop
    12fc:	00007438 	.word	0x00007438
    1300:	00001edd 	.word	0x00001edd
    1304:	00003821 	.word	0x00003821

00001308 <_spi_m_dma_io_read>:
{
    1308:	b570      	push	{r4, r5, r6, lr}
    130a:	460d      	mov	r5, r1
    130c:	4616      	mov	r6, r2
	ASSERT(io);
    130e:	4604      	mov	r4, r0
    1310:	2281      	movs	r2, #129	; 0x81
    1312:	4907      	ldr	r1, [pc, #28]	; (1330 <_spi_m_dma_io_read+0x28>)
    1314:	3000      	adds	r0, #0
    1316:	bf18      	it	ne
    1318:	2001      	movne	r0, #1
    131a:	4b06      	ldr	r3, [pc, #24]	; (1334 <_spi_m_dma_io_read+0x2c>)
    131c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    131e:	4633      	mov	r3, r6
    1320:	462a      	mov	r2, r5
    1322:	2100      	movs	r1, #0
    1324:	f1a4 001c 	sub.w	r0, r4, #28
    1328:	4c03      	ldr	r4, [pc, #12]	; (1338 <_spi_m_dma_io_read+0x30>)
    132a:	47a0      	blx	r4
}
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	bf00      	nop
    1330:	00007438 	.word	0x00007438
    1334:	00001edd 	.word	0x00001edd
    1338:	00003821 	.word	0x00003821

0000133c <spi_m_dma_init>:
{
    133c:	b538      	push	{r3, r4, r5, lr}
    133e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    1340:	4605      	mov	r5, r0
    1342:	b1a0      	cbz	r0, 136e <spi_m_dma_init+0x32>
    1344:	1c08      	adds	r0, r1, #0
    1346:	bf18      	it	ne
    1348:	2001      	movne	r0, #1
    134a:	223b      	movs	r2, #59	; 0x3b
    134c:	4909      	ldr	r1, [pc, #36]	; (1374 <spi_m_dma_init+0x38>)
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <spi_m_dma_init+0x3c>)
    1350:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1352:	4628      	mov	r0, r5
    1354:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1358:	4621      	mov	r1, r4
    135a:	4b08      	ldr	r3, [pc, #32]	; (137c <spi_m_dma_init+0x40>)
    135c:	4798      	blx	r3
	if (rc) {
    135e:	4603      	mov	r3, r0
    1360:	b918      	cbnz	r0, 136a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    1362:	4a07      	ldr	r2, [pc, #28]	; (1380 <spi_m_dma_init+0x44>)
    1364:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1366:	4a07      	ldr	r2, [pc, #28]	; (1384 <spi_m_dma_init+0x48>)
    1368:	622a      	str	r2, [r5, #32]
}
    136a:	4618      	mov	r0, r3
    136c:	bd38      	pop	{r3, r4, r5, pc}
    136e:	2000      	movs	r0, #0
    1370:	e7eb      	b.n	134a <spi_m_dma_init+0xe>
    1372:	bf00      	nop
    1374:	00007438 	.word	0x00007438
    1378:	00001edd 	.word	0x00001edd
    137c:	00003651 	.word	0x00003651
    1380:	00001309 	.word	0x00001309
    1384:	000012d5 	.word	0x000012d5

00001388 <spi_m_dma_enable>:
{
    1388:	b510      	push	{r4, lr}
	ASSERT(spi);
    138a:	4604      	mov	r4, r0
    138c:	2251      	movs	r2, #81	; 0x51
    138e:	4905      	ldr	r1, [pc, #20]	; (13a4 <spi_m_dma_enable+0x1c>)
    1390:	3000      	adds	r0, #0
    1392:	bf18      	it	ne
    1394:	2001      	movne	r0, #1
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <spi_m_dma_enable+0x20>)
    1398:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    139a:	1d20      	adds	r0, r4, #4
    139c:	4b03      	ldr	r3, [pc, #12]	; (13ac <spi_m_dma_enable+0x24>)
    139e:	4798      	blx	r3
    13a0:	bd10      	pop	{r4, pc}
    13a2:	bf00      	nop
    13a4:	00007438 	.word	0x00007438
    13a8:	00001edd 	.word	0x00001edd
    13ac:	00003791 	.word	0x00003791

000013b0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	460d      	mov	r5, r1
    13b4:	4616      	mov	r6, r2
	ASSERT(spi);
    13b6:	4604      	mov	r4, r0
    13b8:	22a8      	movs	r2, #168	; 0xa8
    13ba:	4906      	ldr	r1, [pc, #24]	; (13d4 <spi_m_dma_register_callback+0x24>)
    13bc:	3000      	adds	r0, #0
    13be:	bf18      	it	ne
    13c0:	2001      	movne	r0, #1
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <spi_m_dma_register_callback+0x28>)
    13c4:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    13c6:	4632      	mov	r2, r6
    13c8:	4629      	mov	r1, r5
    13ca:	1d20      	adds	r0, r4, #4
    13cc:	4b03      	ldr	r3, [pc, #12]	; (13dc <spi_m_dma_register_callback+0x2c>)
    13ce:	4798      	blx	r3
    13d0:	bd70      	pop	{r4, r5, r6, pc}
    13d2:	bf00      	nop
    13d4:	00007438 	.word	0x00007438
    13d8:	00001edd 	.word	0x00001edd
    13dc:	000037c1 	.word	0x000037c1

000013e0 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    13e0:	b538      	push	{r3, r4, r5, lr}
    13e2:	460d      	mov	r5, r1
	ASSERT(spi && io);
    13e4:	4604      	mov	r4, r0
    13e6:	b150      	cbz	r0, 13fe <spi_m_dma_get_io_descriptor+0x1e>
    13e8:	1c08      	adds	r0, r1, #0
    13ea:	bf18      	it	ne
    13ec:	2001      	movne	r0, #1
    13ee:	22ae      	movs	r2, #174	; 0xae
    13f0:	4904      	ldr	r1, [pc, #16]	; (1404 <spi_m_dma_get_io_descriptor+0x24>)
    13f2:	4b05      	ldr	r3, [pc, #20]	; (1408 <spi_m_dma_get_io_descriptor+0x28>)
    13f4:	4798      	blx	r3
	*io = &spi->io;
    13f6:	3420      	adds	r4, #32
    13f8:	602c      	str	r4, [r5, #0]

	return 0;
}
    13fa:	2000      	movs	r0, #0
    13fc:	bd38      	pop	{r3, r4, r5, pc}
    13fe:	2000      	movs	r0, #0
    1400:	e7f5      	b.n	13ee <spi_m_dma_get_io_descriptor+0xe>
    1402:	bf00      	nop
    1404:	00007438 	.word	0x00007438
    1408:	00001edd 	.word	0x00001edd

0000140c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1410:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1412:	b12f      	cbz	r7, 1420 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1414:	688d      	ldr	r5, [r1, #8]
    1416:	463c      	mov	r4, r7
    1418:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    141a:	f1c2 0e01 	rsb	lr, r2, #1
    141e:	e00b      	b.n	1438 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1420:	4b0e      	ldr	r3, [pc, #56]	; (145c <timer_add_timer_task+0x50>)
    1422:	4798      	blx	r3
		return;
    1424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1426:	4473      	add	r3, lr
    1428:	68a0      	ldr	r0, [r4, #8]
    142a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    142c:	42ab      	cmp	r3, r5
    142e:	d20a      	bcs.n	1446 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1430:	6823      	ldr	r3, [r4, #0]
    1432:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1434:	b153      	cbz	r3, 144c <timer_add_timer_task+0x40>
    1436:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1438:	6863      	ldr	r3, [r4, #4]
    143a:	4293      	cmp	r3, r2
    143c:	d8f3      	bhi.n	1426 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    143e:	68a0      	ldr	r0, [r4, #8]
    1440:	4403      	add	r3, r0
    1442:	1a9b      	subs	r3, r3, r2
    1444:	e7f2      	b.n	142c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1446:	42a7      	cmp	r7, r4
    1448:	d004      	beq.n	1454 <timer_add_timer_task+0x48>
    144a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    144c:	4620      	mov	r0, r4
    144e:	4b04      	ldr	r3, [pc, #16]	; (1460 <timer_add_timer_task+0x54>)
    1450:	4798      	blx	r3
    1452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1454:	4660      	mov	r0, ip
    1456:	4b01      	ldr	r3, [pc, #4]	; (145c <timer_add_timer_task+0x50>)
    1458:	4798      	blx	r3
    145a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    145c:	00001f05 	.word	0x00001f05
    1460:	00001f31 	.word	0x00001f31

00001464 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1468:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    146a:	6907      	ldr	r7, [r0, #16]
    146c:	3701      	adds	r7, #1
    146e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1470:	7e03      	ldrb	r3, [r0, #24]
    1472:	f013 0f01 	tst.w	r3, #1
    1476:	d113      	bne.n	14a0 <timer_process_counted+0x3c>
    1478:	7e03      	ldrb	r3, [r0, #24]
    147a:	f013 0f02 	tst.w	r3, #2
    147e:	d10f      	bne.n	14a0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1480:	b354      	cbz	r4, 14d8 <timer_process_counted+0x74>
    1482:	6863      	ldr	r3, [r4, #4]
    1484:	1afb      	subs	r3, r7, r3
    1486:	68a2      	ldr	r2, [r4, #8]
    1488:	4293      	cmp	r3, r2
    148a:	d307      	bcc.n	149c <timer_process_counted+0x38>
    148c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    148e:	f100 0814 	add.w	r8, r0, #20
    1492:	f8df 9048 	ldr.w	r9, [pc, #72]	; 14dc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1496:	f8df a048 	ldr.w	sl, [pc, #72]	; 14e0 <timer_process_counted+0x7c>
    149a:	e012      	b.n	14c2 <timer_process_counted+0x5e>
    149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    14a0:	7e03      	ldrb	r3, [r0, #24]
    14a2:	f043 0302 	orr.w	r3, r3, #2
    14a6:	7603      	strb	r3, [r0, #24]
		return;
    14a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14ac:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    14ae:	68e3      	ldr	r3, [r4, #12]
    14b0:	4620      	mov	r0, r4
    14b2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    14b4:	b185      	cbz	r5, 14d8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    14b6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    14b8:	686b      	ldr	r3, [r5, #4]
    14ba:	1afb      	subs	r3, r7, r3
    14bc:	68aa      	ldr	r2, [r5, #8]
    14be:	4293      	cmp	r3, r2
    14c0:	d30a      	bcc.n	14d8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    14c2:	4640      	mov	r0, r8
    14c4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    14c6:	7c23      	ldrb	r3, [r4, #16]
    14c8:	2b01      	cmp	r3, #1
    14ca:	d1ef      	bne.n	14ac <timer_process_counted+0x48>
			tmp->time_label = time;
    14cc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    14ce:	463a      	mov	r2, r7
    14d0:	4621      	mov	r1, r4
    14d2:	4640      	mov	r0, r8
    14d4:	47d0      	blx	sl
    14d6:	e7e9      	b.n	14ac <timer_process_counted+0x48>
    14d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14dc:	00001f79 	.word	0x00001f79
    14e0:	0000140d 	.word	0x0000140d

000014e4 <timer_init>:
{
    14e4:	b538      	push	{r3, r4, r5, lr}
    14e6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    14e8:	4604      	mov	r4, r0
    14ea:	b178      	cbz	r0, 150c <timer_init+0x28>
    14ec:	1c08      	adds	r0, r1, #0
    14ee:	bf18      	it	ne
    14f0:	2001      	movne	r0, #1
    14f2:	223b      	movs	r2, #59	; 0x3b
    14f4:	4906      	ldr	r1, [pc, #24]	; (1510 <timer_init+0x2c>)
    14f6:	4b07      	ldr	r3, [pc, #28]	; (1514 <timer_init+0x30>)
    14f8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    14fa:	4629      	mov	r1, r5
    14fc:	4620      	mov	r0, r4
    14fe:	4b06      	ldr	r3, [pc, #24]	; (1518 <timer_init+0x34>)
    1500:	4798      	blx	r3
	descr->time                           = 0;
    1502:	2000      	movs	r0, #0
    1504:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <timer_init+0x38>)
    1508:	6023      	str	r3, [r4, #0]
}
    150a:	bd38      	pop	{r3, r4, r5, pc}
    150c:	2000      	movs	r0, #0
    150e:	e7f0      	b.n	14f2 <timer_init+0xe>
    1510:	00007454 	.word	0x00007454
    1514:	00001edd 	.word	0x00001edd
    1518:	00002a75 	.word	0x00002a75
    151c:	00001465 	.word	0x00001465

00001520 <timer_start>:
{
    1520:	b510      	push	{r4, lr}
	ASSERT(descr);
    1522:	4604      	mov	r4, r0
    1524:	2253      	movs	r2, #83	; 0x53
    1526:	4909      	ldr	r1, [pc, #36]	; (154c <timer_start+0x2c>)
    1528:	3000      	adds	r0, #0
    152a:	bf18      	it	ne
    152c:	2001      	movne	r0, #1
    152e:	4b08      	ldr	r3, [pc, #32]	; (1550 <timer_start+0x30>)
    1530:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1532:	4620      	mov	r0, r4
    1534:	4b07      	ldr	r3, [pc, #28]	; (1554 <timer_start+0x34>)
    1536:	4798      	blx	r3
    1538:	b920      	cbnz	r0, 1544 <timer_start+0x24>
	_timer_start(&descr->device);
    153a:	4620      	mov	r0, r4
    153c:	4b06      	ldr	r3, [pc, #24]	; (1558 <timer_start+0x38>)
    153e:	4798      	blx	r3
	return ERR_NONE;
    1540:	2000      	movs	r0, #0
    1542:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1544:	f06f 0010 	mvn.w	r0, #16
}
    1548:	bd10      	pop	{r4, pc}
    154a:	bf00      	nop
    154c:	00007454 	.word	0x00007454
    1550:	00001edd 	.word	0x00001edd
    1554:	00002b39 	.word	0x00002b39
    1558:	00002add 	.word	0x00002add

0000155c <timer_add_task>:
{
    155c:	b570      	push	{r4, r5, r6, lr}
    155e:	b082      	sub	sp, #8
    1560:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1562:	4604      	mov	r4, r0
    1564:	b318      	cbz	r0, 15ae <timer_add_task+0x52>
    1566:	1c08      	adds	r0, r1, #0
    1568:	bf18      	it	ne
    156a:	2001      	movne	r0, #1
    156c:	227a      	movs	r2, #122	; 0x7a
    156e:	491e      	ldr	r1, [pc, #120]	; (15e8 <timer_add_task+0x8c>)
    1570:	4b1e      	ldr	r3, [pc, #120]	; (15ec <timer_add_task+0x90>)
    1572:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1574:	7e23      	ldrb	r3, [r4, #24]
    1576:	f043 0301 	orr.w	r3, r3, #1
    157a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    157c:	f104 0614 	add.w	r6, r4, #20
    1580:	4629      	mov	r1, r5
    1582:	4630      	mov	r0, r6
    1584:	4b1a      	ldr	r3, [pc, #104]	; (15f0 <timer_add_task+0x94>)
    1586:	4798      	blx	r3
    1588:	b998      	cbnz	r0, 15b2 <timer_add_task+0x56>
	task->time_label = descr->time;
    158a:	6923      	ldr	r3, [r4, #16]
    158c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    158e:	6922      	ldr	r2, [r4, #16]
    1590:	4629      	mov	r1, r5
    1592:	4630      	mov	r0, r6
    1594:	4b17      	ldr	r3, [pc, #92]	; (15f4 <timer_add_task+0x98>)
    1596:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1598:	7e23      	ldrb	r3, [r4, #24]
    159a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    159e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    15a0:	7e23      	ldrb	r3, [r4, #24]
    15a2:	f013 0f02 	tst.w	r3, #2
    15a6:	d110      	bne.n	15ca <timer_add_task+0x6e>
	return ERR_NONE;
    15a8:	2000      	movs	r0, #0
}
    15aa:	b002      	add	sp, #8
    15ac:	bd70      	pop	{r4, r5, r6, pc}
    15ae:	2000      	movs	r0, #0
    15b0:	e7dc      	b.n	156c <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    15b2:	7e23      	ldrb	r3, [r4, #24]
    15b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    15b8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    15ba:	227f      	movs	r2, #127	; 0x7f
    15bc:	490a      	ldr	r1, [pc, #40]	; (15e8 <timer_add_task+0x8c>)
    15be:	2000      	movs	r0, #0
    15c0:	4b0a      	ldr	r3, [pc, #40]	; (15ec <timer_add_task+0x90>)
    15c2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    15c4:	f06f 0011 	mvn.w	r0, #17
    15c8:	e7ef      	b.n	15aa <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    15ca:	a801      	add	r0, sp, #4
    15cc:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <timer_add_task+0x9c>)
    15ce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    15d0:	7e23      	ldrb	r3, [r4, #24]
    15d2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    15d6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    15d8:	4620      	mov	r0, r4
    15da:	4b08      	ldr	r3, [pc, #32]	; (15fc <timer_add_task+0xa0>)
    15dc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    15de:	a801      	add	r0, sp, #4
    15e0:	4b07      	ldr	r3, [pc, #28]	; (1600 <timer_add_task+0xa4>)
    15e2:	4798      	blx	r3
	return ERR_NONE;
    15e4:	2000      	movs	r0, #0
    15e6:	e7e0      	b.n	15aa <timer_add_task+0x4e>
    15e8:	00007454 	.word	0x00007454
    15ec:	00001edd 	.word	0x00001edd
    15f0:	00001ee3 	.word	0x00001ee3
    15f4:	0000140d 	.word	0x0000140d
    15f8:	00001075 	.word	0x00001075
    15fc:	00002b4d 	.word	0x00002b4d
    1600:	00001083 	.word	0x00001083

00001604 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1604:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1606:	2300      	movs	r3, #0
    1608:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    160a:	69c3      	ldr	r3, [r0, #28]
    160c:	b11b      	cbz	r3, 1616 <usart_transmission_complete+0x12>
    160e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1612:	4610      	mov	r0, r2
    1614:	4798      	blx	r3
    1616:	bd08      	pop	{r3, pc}

00001618 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1618:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    161a:	2300      	movs	r3, #0
    161c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    161e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1620:	b11b      	cbz	r3, 162a <usart_error+0x12>
    1622:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1626:	4610      	mov	r0, r2
    1628:	4798      	blx	r3
    162a:	bd08      	pop	{r3, pc}

0000162c <usart_fill_rx_buffer>:
{
    162c:	b538      	push	{r3, r4, r5, lr}
    162e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1630:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1634:	302c      	adds	r0, #44	; 0x2c
    1636:	4b03      	ldr	r3, [pc, #12]	; (1644 <usart_fill_rx_buffer+0x18>)
    1638:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    163a:	6a23      	ldr	r3, [r4, #32]
    163c:	b10b      	cbz	r3, 1642 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    163e:	4628      	mov	r0, r5
    1640:	4798      	blx	r3
    1642:	bd38      	pop	{r3, r4, r5, pc}
    1644:	00002019 	.word	0x00002019

00001648 <usart_async_write>:
{
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	460e      	mov	r6, r1
    164c:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    164e:	4604      	mov	r4, r0
    1650:	b1e0      	cbz	r0, 168c <usart_async_write+0x44>
    1652:	b1e9      	cbz	r1, 1690 <usart_async_write+0x48>
    1654:	1c10      	adds	r0, r2, #0
    1656:	bf18      	it	ne
    1658:	2001      	movne	r0, #1
    165a:	f240 123b 	movw	r2, #315	; 0x13b
    165e:	490f      	ldr	r1, [pc, #60]	; (169c <usart_async_write+0x54>)
    1660:	4b0f      	ldr	r3, [pc, #60]	; (16a0 <usart_async_write+0x58>)
    1662:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1664:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1668:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    166c:	429a      	cmp	r2, r3
    166e:	d111      	bne.n	1694 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1670:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1672:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1676:	2300      	movs	r3, #0
    1678:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    167c:	2301      	movs	r3, #1
    167e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1680:	f104 0008 	add.w	r0, r4, #8
    1684:	4b07      	ldr	r3, [pc, #28]	; (16a4 <usart_async_write+0x5c>)
    1686:	4798      	blx	r3
	return (int32_t)length;
    1688:	4628      	mov	r0, r5
    168a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    168c:	2000      	movs	r0, #0
    168e:	e7e4      	b.n	165a <usart_async_write+0x12>
    1690:	2000      	movs	r0, #0
    1692:	e7e2      	b.n	165a <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1694:	f06f 001b 	mvn.w	r0, #27
}
    1698:	bd70      	pop	{r4, r5, r6, pc}
    169a:	bf00      	nop
    169c:	0000746c 	.word	0x0000746c
    16a0:	00001edd 	.word	0x00001edd
    16a4:	00003227 	.word	0x00003227

000016a8 <usart_process_byte_sent>:
{
    16a8:	b510      	push	{r4, lr}
    16aa:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    16ac:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    16ae:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    16b2:	429a      	cmp	r2, r3
    16b4:	d009      	beq.n	16ca <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    16b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    16b8:	1c59      	adds	r1, r3, #1
    16ba:	8781      	strh	r1, [r0, #60]	; 0x3c
    16bc:	5cd1      	ldrb	r1, [r2, r3]
    16be:	4b04      	ldr	r3, [pc, #16]	; (16d0 <usart_process_byte_sent+0x28>)
    16c0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    16c2:	4620      	mov	r0, r4
    16c4:	4b03      	ldr	r3, [pc, #12]	; (16d4 <usart_process_byte_sent+0x2c>)
    16c6:	4798      	blx	r3
    16c8:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    16ca:	4b03      	ldr	r3, [pc, #12]	; (16d8 <usart_process_byte_sent+0x30>)
    16cc:	4798      	blx	r3
    16ce:	bd10      	pop	{r4, pc}
    16d0:	00003221 	.word	0x00003221
    16d4:	00003227 	.word	0x00003227
    16d8:	0000322f 	.word	0x0000322f

000016dc <usart_async_read>:
{
    16dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16e0:	b082      	sub	sp, #8
    16e2:	460f      	mov	r7, r1
    16e4:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    16e6:	4606      	mov	r6, r0
    16e8:	b1a0      	cbz	r0, 1714 <usart_async_read+0x38>
    16ea:	b199      	cbz	r1, 1714 <usart_async_read+0x38>
    16ec:	2a00      	cmp	r2, #0
    16ee:	d12d      	bne.n	174c <usart_async_read+0x70>
    16f0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    16f4:	4929      	ldr	r1, [pc, #164]	; (179c <usart_async_read+0xc0>)
    16f6:	2000      	movs	r0, #0
    16f8:	4b29      	ldr	r3, [pc, #164]	; (17a0 <usart_async_read+0xc4>)
    16fa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    16fc:	a801      	add	r0, sp, #4
    16fe:	4b29      	ldr	r3, [pc, #164]	; (17a4 <usart_async_read+0xc8>)
    1700:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1702:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1706:	4b28      	ldr	r3, [pc, #160]	; (17a8 <usart_async_read+0xcc>)
    1708:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    170a:	a801      	add	r0, sp, #4
    170c:	4b27      	ldr	r3, [pc, #156]	; (17ac <usart_async_read+0xd0>)
    170e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1710:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1712:	e03e      	b.n	1792 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1714:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1718:	4920      	ldr	r1, [pc, #128]	; (179c <usart_async_read+0xc0>)
    171a:	2000      	movs	r0, #0
    171c:	4b20      	ldr	r3, [pc, #128]	; (17a0 <usart_async_read+0xc4>)
    171e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1720:	a801      	add	r0, sp, #4
    1722:	4b20      	ldr	r3, [pc, #128]	; (17a4 <usart_async_read+0xc8>)
    1724:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1726:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    172a:	4650      	mov	r0, sl
    172c:	4b1e      	ldr	r3, [pc, #120]	; (17a8 <usart_async_read+0xcc>)
    172e:	4798      	blx	r3
    1730:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1732:	a801      	add	r0, sp, #4
    1734:	4b1d      	ldr	r3, [pc, #116]	; (17ac <usart_async_read+0xd0>)
    1736:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1738:	f1b9 0f00 	cmp.w	r9, #0
    173c:	d004      	beq.n	1748 <usart_async_read+0x6c>
    173e:	f1b8 0f00 	cmp.w	r8, #0
    1742:	d119      	bne.n	1778 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1744:	2500      	movs	r5, #0
    1746:	e024      	b.n	1792 <usart_async_read+0xb6>
    1748:	2500      	movs	r5, #0
    174a:	e022      	b.n	1792 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    174c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1750:	4912      	ldr	r1, [pc, #72]	; (179c <usart_async_read+0xc0>)
    1752:	2001      	movs	r0, #1
    1754:	4b12      	ldr	r3, [pc, #72]	; (17a0 <usart_async_read+0xc4>)
    1756:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1758:	a801      	add	r0, sp, #4
    175a:	4b12      	ldr	r3, [pc, #72]	; (17a4 <usart_async_read+0xc8>)
    175c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    175e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1762:	4650      	mov	r0, sl
    1764:	4b10      	ldr	r3, [pc, #64]	; (17a8 <usart_async_read+0xcc>)
    1766:	4798      	blx	r3
    1768:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    176a:	a801      	add	r0, sp, #4
    176c:	4b0f      	ldr	r3, [pc, #60]	; (17ac <usart_async_read+0xd0>)
    176e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1770:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1772:	f1b9 0f00 	cmp.w	r9, #0
    1776:	d00c      	beq.n	1792 <usart_async_read+0xb6>
{
    1778:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    177a:	4e0d      	ldr	r6, [pc, #52]	; (17b0 <usart_async_read+0xd4>)
    177c:	1c60      	adds	r0, r4, #1
    177e:	b285      	uxth	r5, r0
    1780:	1939      	adds	r1, r7, r4
    1782:	4650      	mov	r0, sl
    1784:	47b0      	blx	r6
    1786:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1788:	454c      	cmp	r4, r9
    178a:	d202      	bcs.n	1792 <usart_async_read+0xb6>
    178c:	b2a3      	uxth	r3, r4
    178e:	4598      	cmp	r8, r3
    1790:	d8f4      	bhi.n	177c <usart_async_read+0xa0>
}
    1792:	4628      	mov	r0, r5
    1794:	b002      	add	sp, #8
    1796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    179a:	bf00      	nop
    179c:	0000746c 	.word	0x0000746c
    17a0:	00001edd 	.word	0x00001edd
    17a4:	00001075 	.word	0x00001075
    17a8:	00002059 	.word	0x00002059
    17ac:	00001083 	.word	0x00001083
    17b0:	00001fd5 	.word	0x00001fd5

000017b4 <usart_async_init>:
{
    17b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17b6:	460d      	mov	r5, r1
    17b8:	4616      	mov	r6, r2
    17ba:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    17bc:	4604      	mov	r4, r0
    17be:	b320      	cbz	r0, 180a <usart_async_init+0x56>
    17c0:	b329      	cbz	r1, 180e <usart_async_init+0x5a>
    17c2:	b332      	cbz	r2, 1812 <usart_async_init+0x5e>
    17c4:	1c18      	adds	r0, r3, #0
    17c6:	bf18      	it	ne
    17c8:	2001      	movne	r0, #1
    17ca:	223a      	movs	r2, #58	; 0x3a
    17cc:	4913      	ldr	r1, [pc, #76]	; (181c <usart_async_init+0x68>)
    17ce:	4b14      	ldr	r3, [pc, #80]	; (1820 <usart_async_init+0x6c>)
    17d0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    17d2:	463a      	mov	r2, r7
    17d4:	4631      	mov	r1, r6
    17d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <usart_async_init+0x70>)
    17dc:	4798      	blx	r3
    17de:	b9d0      	cbnz	r0, 1816 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    17e0:	4629      	mov	r1, r5
    17e2:	f104 0008 	add.w	r0, r4, #8
    17e6:	4b10      	ldr	r3, [pc, #64]	; (1828 <usart_async_init+0x74>)
    17e8:	4798      	blx	r3
	if (init_status) {
    17ea:	4603      	mov	r3, r0
    17ec:	b958      	cbnz	r0, 1806 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    17ee:	4a0f      	ldr	r2, [pc, #60]	; (182c <usart_async_init+0x78>)
    17f0:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    17f2:	4a0f      	ldr	r2, [pc, #60]	; (1830 <usart_async_init+0x7c>)
    17f4:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    17f6:	4a0f      	ldr	r2, [pc, #60]	; (1834 <usart_async_init+0x80>)
    17f8:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    17fa:	4a0f      	ldr	r2, [pc, #60]	; (1838 <usart_async_init+0x84>)
    17fc:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    17fe:	4a0f      	ldr	r2, [pc, #60]	; (183c <usart_async_init+0x88>)
    1800:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1802:	4a0f      	ldr	r2, [pc, #60]	; (1840 <usart_async_init+0x8c>)
    1804:	6162      	str	r2, [r4, #20]
}
    1806:	4618      	mov	r0, r3
    1808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    180a:	2000      	movs	r0, #0
    180c:	e7dd      	b.n	17ca <usart_async_init+0x16>
    180e:	2000      	movs	r0, #0
    1810:	e7db      	b.n	17ca <usart_async_init+0x16>
    1812:	2000      	movs	r0, #0
    1814:	e7d9      	b.n	17ca <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1816:	f06f 030c 	mvn.w	r3, #12
    181a:	e7f4      	b.n	1806 <usart_async_init+0x52>
    181c:	0000746c 	.word	0x0000746c
    1820:	00001edd 	.word	0x00001edd
    1824:	00001f85 	.word	0x00001f85
    1828:	00003191 	.word	0x00003191
    182c:	000016dd 	.word	0x000016dd
    1830:	00001649 	.word	0x00001649
    1834:	000016a9 	.word	0x000016a9
    1838:	0000162d 	.word	0x0000162d
    183c:	00001605 	.word	0x00001605
    1840:	00001619 	.word	0x00001619

00001844 <usart_async_enable>:
{
    1844:	b510      	push	{r4, lr}
	ASSERT(descr);
    1846:	4604      	mov	r4, r0
    1848:	2261      	movs	r2, #97	; 0x61
    184a:	4906      	ldr	r1, [pc, #24]	; (1864 <usart_async_enable+0x20>)
    184c:	3000      	adds	r0, #0
    184e:	bf18      	it	ne
    1850:	2001      	movne	r0, #1
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <usart_async_enable+0x24>)
    1854:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1856:	f104 0008 	add.w	r0, r4, #8
    185a:	4b04      	ldr	r3, [pc, #16]	; (186c <usart_async_enable+0x28>)
    185c:	4798      	blx	r3
}
    185e:	2000      	movs	r0, #0
    1860:	bd10      	pop	{r4, pc}
    1862:	bf00      	nop
    1864:	0000746c 	.word	0x0000746c
    1868:	00001edd 	.word	0x00001edd
    186c:	0000320d 	.word	0x0000320d

00001870 <usart_async_get_io_descriptor>:
{
    1870:	b538      	push	{r3, r4, r5, lr}
    1872:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1874:	4605      	mov	r5, r0
    1876:	b148      	cbz	r0, 188c <usart_async_get_io_descriptor+0x1c>
    1878:	1c08      	adds	r0, r1, #0
    187a:	bf18      	it	ne
    187c:	2001      	movne	r0, #1
    187e:	2277      	movs	r2, #119	; 0x77
    1880:	4903      	ldr	r1, [pc, #12]	; (1890 <usart_async_get_io_descriptor+0x20>)
    1882:	4b04      	ldr	r3, [pc, #16]	; (1894 <usart_async_get_io_descriptor+0x24>)
    1884:	4798      	blx	r3
	*io = &descr->io;
    1886:	6025      	str	r5, [r4, #0]
}
    1888:	2000      	movs	r0, #0
    188a:	bd38      	pop	{r3, r4, r5, pc}
    188c:	2000      	movs	r0, #0
    188e:	e7f6      	b.n	187e <usart_async_get_io_descriptor+0xe>
    1890:	0000746c 	.word	0x0000746c
    1894:	00001edd 	.word	0x00001edd

00001898 <usart_async_register_callback>:
{
    1898:	b570      	push	{r4, r5, r6, lr}
    189a:	460c      	mov	r4, r1
    189c:	4616      	mov	r6, r2
	ASSERT(descr);
    189e:	4605      	mov	r5, r0
    18a0:	2283      	movs	r2, #131	; 0x83
    18a2:	4917      	ldr	r1, [pc, #92]	; (1900 <usart_async_register_callback+0x68>)
    18a4:	3000      	adds	r0, #0
    18a6:	bf18      	it	ne
    18a8:	2001      	movne	r0, #1
    18aa:	4b16      	ldr	r3, [pc, #88]	; (1904 <usart_async_register_callback+0x6c>)
    18ac:	4798      	blx	r3
	switch (type) {
    18ae:	2c01      	cmp	r4, #1
    18b0:	d010      	beq.n	18d4 <usart_async_register_callback+0x3c>
    18b2:	b124      	cbz	r4, 18be <usart_async_register_callback+0x26>
    18b4:	2c02      	cmp	r4, #2
    18b6:	d018      	beq.n	18ea <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    18b8:	f06f 000c 	mvn.w	r0, #12
}
    18bc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    18be:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    18c0:	1c32      	adds	r2, r6, #0
    18c2:	bf18      	it	ne
    18c4:	2201      	movne	r2, #1
    18c6:	2101      	movs	r1, #1
    18c8:	f105 0008 	add.w	r0, r5, #8
    18cc:	4b0e      	ldr	r3, [pc, #56]	; (1908 <usart_async_register_callback+0x70>)
    18ce:	4798      	blx	r3
	return ERR_NONE;
    18d0:	2000      	movs	r0, #0
		break;
    18d2:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    18d4:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    18d6:	1c32      	adds	r2, r6, #0
    18d8:	bf18      	it	ne
    18da:	2201      	movne	r2, #1
    18dc:	2102      	movs	r1, #2
    18de:	f105 0008 	add.w	r0, r5, #8
    18e2:	4b09      	ldr	r3, [pc, #36]	; (1908 <usart_async_register_callback+0x70>)
    18e4:	4798      	blx	r3
	return ERR_NONE;
    18e6:	2000      	movs	r0, #0
		break;
    18e8:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    18ea:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    18ec:	1c32      	adds	r2, r6, #0
    18ee:	bf18      	it	ne
    18f0:	2201      	movne	r2, #1
    18f2:	2103      	movs	r1, #3
    18f4:	f105 0008 	add.w	r0, r5, #8
    18f8:	4b03      	ldr	r3, [pc, #12]	; (1908 <usart_async_register_callback+0x70>)
    18fa:	4798      	blx	r3
	return ERR_NONE;
    18fc:	2000      	movs	r0, #0
		break;
    18fe:	bd70      	pop	{r4, r5, r6, pc}
    1900:	0000746c 	.word	0x0000746c
    1904:	00001edd 	.word	0x00001edd
    1908:	00003239 	.word	0x00003239

0000190c <usart_async_is_rx_not_empty>:
{
    190c:	b510      	push	{r4, lr}
	ASSERT(descr);
    190e:	4604      	mov	r4, r0
    1910:	f240 1201 	movw	r2, #257	; 0x101
    1914:	4906      	ldr	r1, [pc, #24]	; (1930 <usart_async_is_rx_not_empty+0x24>)
    1916:	3000      	adds	r0, #0
    1918:	bf18      	it	ne
    191a:	2001      	movne	r0, #1
    191c:	4b05      	ldr	r3, [pc, #20]	; (1934 <usart_async_is_rx_not_empty+0x28>)
    191e:	4798      	blx	r3
	return ringbuffer_num(&descr->rx) > 0;
    1920:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1924:	4b04      	ldr	r3, [pc, #16]	; (1938 <usart_async_is_rx_not_empty+0x2c>)
    1926:	4798      	blx	r3
}
    1928:	3000      	adds	r0, #0
    192a:	bf18      	it	ne
    192c:	2001      	movne	r0, #1
    192e:	bd10      	pop	{r4, pc}
    1930:	0000746c 	.word	0x0000746c
    1934:	00001edd 	.word	0x00001edd
    1938:	00002059 	.word	0x00002059

0000193c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    193c:	4b0f      	ldr	r3, [pc, #60]	; (197c <_usb_d_find_ep+0x40>)
    193e:	7859      	ldrb	r1, [r3, #1]
    1940:	4288      	cmp	r0, r1
    1942:	d018      	beq.n	1976 <_usb_d_find_ep+0x3a>
{
    1944:	b430      	push	{r4, r5}
    1946:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1948:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    194a:	f000 050f 	and.w	r5, r0, #15
    194e:	e007      	b.n	1960 <_usb_d_find_ep+0x24>
    1950:	3301      	adds	r3, #1
    1952:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1954:	2b0d      	cmp	r3, #13
    1956:	d009      	beq.n	196c <_usb_d_find_ep+0x30>
    1958:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    195a:	7851      	ldrb	r1, [r2, #1]
    195c:	4281      	cmp	r1, r0
    195e:	d007      	beq.n	1970 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1960:	7814      	ldrb	r4, [r2, #0]
    1962:	2c00      	cmp	r4, #0
    1964:	d1f4      	bne.n	1950 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1966:	428d      	cmp	r5, r1
    1968:	d1f2      	bne.n	1950 <_usb_d_find_ep+0x14>
    196a:	e001      	b.n	1970 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    196c:	f04f 33ff 	mov.w	r3, #4294967295
}
    1970:	4618      	mov	r0, r3
    1972:	bc30      	pop	{r4, r5}
    1974:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1976:	2300      	movs	r3, #0
}
    1978:	4618      	mov	r0, r3
    197a:	4770      	bx	lr
    197c:	20000478 	.word	0x20000478

00001980 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1980:	2000      	movs	r0, #0
    1982:	4770      	bx	lr

00001984 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1984:	b538      	push	{r3, r4, r5, lr}
    1986:	4604      	mov	r4, r0
    1988:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    198a:	4b09      	ldr	r3, [pc, #36]	; (19b0 <usb_d_cb_trans_more+0x2c>)
    198c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    198e:	4b09      	ldr	r3, [pc, #36]	; (19b4 <usb_d_cb_trans_more+0x30>)
    1990:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1994:	789b      	ldrb	r3, [r3, #2]
    1996:	2b03      	cmp	r3, #3
    1998:	d001      	beq.n	199e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    199a:	2000      	movs	r0, #0
}
    199c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <usb_d_cb_trans_more+0x30>)
    19a0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    19a4:	6983      	ldr	r3, [r0, #24]
    19a6:	4629      	mov	r1, r5
    19a8:	4620      	mov	r0, r4
    19aa:	4798      	blx	r3
    19ac:	bd38      	pop	{r3, r4, r5, pc}
    19ae:	bf00      	nop
    19b0:	0000193d 	.word	0x0000193d
    19b4:	20000478 	.word	0x20000478

000019b8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	b085      	sub	sp, #20
    19bc:	4606      	mov	r6, r0
    19be:	460d      	mov	r5, r1
    19c0:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    19c2:	4b4d      	ldr	r3, [pc, #308]	; (1af8 <_usb_d_cb_trans_done+0x140>)
    19c4:	4798      	blx	r3
    19c6:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    19c8:	2d00      	cmp	r5, #0
    19ca:	d15b      	bne.n	1a84 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    19cc:	4a4b      	ldr	r2, [pc, #300]	; (1afc <_usb_d_cb_trans_done+0x144>)
    19ce:	0143      	lsls	r3, r0, #5
    19d0:	18d1      	adds	r1, r2, r3
    19d2:	2000      	movs	r0, #0
    19d4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    19d6:	5cd3      	ldrb	r3, [r2, r3]
    19d8:	b173      	cbz	r3, 19f8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    19da:	4b48      	ldr	r3, [pc, #288]	; (1afc <_usb_d_cb_trans_done+0x144>)
    19dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    19e0:	2201      	movs	r2, #1
    19e2:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    19e4:	4845      	ldr	r0, [pc, #276]	; (1afc <_usb_d_cb_trans_done+0x144>)
    19e6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    19ea:	69c3      	ldr	r3, [r0, #28]
    19ec:	463a      	mov	r2, r7
    19ee:	78c1      	ldrb	r1, [r0, #3]
    19f0:	4630      	mov	r0, r6
    19f2:	4798      	blx	r3
}
    19f4:	b005      	add	sp, #20
    19f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    19f8:	788b      	ldrb	r3, [r1, #2]
    19fa:	2b03      	cmp	r3, #3
    19fc:	d00b      	beq.n	1a16 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    19fe:	483f      	ldr	r0, [pc, #252]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1a00:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1a04:	4614      	mov	r4, r2
    1a06:	69d3      	ldr	r3, [r2, #28]
    1a08:	320c      	adds	r2, #12
    1a0a:	2100      	movs	r1, #0
    1a0c:	7860      	ldrb	r0, [r4, #1]
    1a0e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1a10:	2302      	movs	r3, #2
    1a12:	70a3      	strb	r3, [r4, #2]
    1a14:	e7ee      	b.n	19f4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1a16:	460b      	mov	r3, r1
    1a18:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1a1c:	460a      	mov	r2, r1
    1a1e:	69ce      	ldr	r6, [r1, #28]
    1a20:	320c      	adds	r2, #12
    1a22:	2101      	movs	r1, #1
    1a24:	7858      	ldrb	r0, [r3, #1]
    1a26:	47b0      	blx	r6
		if (err) {
    1a28:	b1a0      	cbz	r0, 1a54 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1a2a:	4b34      	ldr	r3, [pc, #208]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1a2c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1a30:	2205      	movs	r2, #5
    1a32:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1a34:	2202      	movs	r2, #2
    1a36:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1a38:	2d00      	cmp	r5, #0
    1a3a:	db09      	blt.n	1a50 <_usb_d_cb_trans_done+0x98>
    1a3c:	482f      	ldr	r0, [pc, #188]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1a3e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1a42:	7840      	ldrb	r0, [r0, #1]
    1a44:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1a48:	2101      	movs	r1, #1
    1a4a:	4b2d      	ldr	r3, [pc, #180]	; (1b00 <_usb_d_cb_trans_done+0x148>)
    1a4c:	4798      	blx	r3
    1a4e:	e7d1      	b.n	19f4 <_usb_d_cb_trans_done+0x3c>
    1a50:	7858      	ldrb	r0, [r3, #1]
    1a52:	e7f9      	b.n	1a48 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1a54:	4829      	ldr	r0, [pc, #164]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1a56:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1a5a:	2304      	movs	r3, #4
    1a5c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1a5e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1a60:	2200      	movs	r2, #0
    1a62:	9201      	str	r2, [sp, #4]
    1a64:	9202      	str	r2, [sp, #8]
    1a66:	4295      	cmp	r5, r2
    1a68:	bfac      	ite	ge
    1a6a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1a6e:	f003 030f 	andlt.w	r3, r3, #15
    1a72:	f88d 300c 	strb.w	r3, [sp, #12]
    1a76:	2301      	movs	r3, #1
    1a78:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1a7c:	a801      	add	r0, sp, #4
    1a7e:	4b21      	ldr	r3, [pc, #132]	; (1b04 <_usb_d_cb_trans_done+0x14c>)
    1a80:	4798      	blx	r3
    1a82:	e7b7      	b.n	19f4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1a84:	2d01      	cmp	r5, #1
    1a86:	d00a      	beq.n	1a9e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1a88:	2d02      	cmp	r5, #2
    1a8a:	d01c      	beq.n	1ac6 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1a8c:	2d03      	cmp	r5, #3
    1a8e:	d02a      	beq.n	1ae6 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1a90:	4b1a      	ldr	r3, [pc, #104]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1a92:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1a96:	2206      	movs	r2, #6
    1a98:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1a9a:	70da      	strb	r2, [r3, #3]
    1a9c:	e7a2      	b.n	19e4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1a9e:	4a17      	ldr	r2, [pc, #92]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1aa0:	0143      	lsls	r3, r0, #5
    1aa2:	18d1      	adds	r1, r2, r3
    1aa4:	2002      	movs	r0, #2
    1aa6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1aa8:	5cd3      	ldrb	r3, [r2, r3]
    1aaa:	b12b      	cbz	r3, 1ab8 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1aac:	4b13      	ldr	r3, [pc, #76]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1aae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ab2:	2205      	movs	r2, #5
    1ab4:	709a      	strb	r2, [r3, #2]
    1ab6:	e795      	b.n	19e4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1ab8:	460b      	mov	r3, r1
    1aba:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1abc:	2100      	movs	r1, #0
    1abe:	4630      	mov	r0, r6
    1ac0:	4b0f      	ldr	r3, [pc, #60]	; (1b00 <_usb_d_cb_trans_done+0x148>)
    1ac2:	4798      	blx	r3
    1ac4:	e78e      	b.n	19e4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1ac6:	4a0d      	ldr	r2, [pc, #52]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1ac8:	0143      	lsls	r3, r0, #5
    1aca:	18d1      	adds	r1, r2, r3
    1acc:	2004      	movs	r0, #4
    1ace:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1ad0:	5cd3      	ldrb	r3, [r2, r3]
    1ad2:	b12b      	cbz	r3, 1ae0 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ad4:	4b09      	ldr	r3, [pc, #36]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1ad6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ada:	2201      	movs	r2, #1
    1adc:	709a      	strb	r2, [r3, #2]
    1ade:	e781      	b.n	19e4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1ae0:	2302      	movs	r3, #2
    1ae2:	708b      	strb	r3, [r1, #2]
			return;
    1ae4:	e786      	b.n	19f4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1ae6:	4b05      	ldr	r3, [pc, #20]	; (1afc <_usb_d_cb_trans_done+0x144>)
    1ae8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1aec:	2200      	movs	r2, #0
    1aee:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1af0:	2205      	movs	r2, #5
    1af2:	70da      	strb	r2, [r3, #3]
    1af4:	e776      	b.n	19e4 <_usb_d_cb_trans_done+0x2c>
    1af6:	bf00      	nop
    1af8:	0000193d 	.word	0x0000193d
    1afc:	20000478 	.word	0x20000478
    1b00:	00004859 	.word	0x00004859
    1b04:	00004a01 	.word	0x00004a01

00001b08 <usb_d_cb_trans_setup>:
{
    1b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b0c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b0e:	4b1c      	ldr	r3, [pc, #112]	; (1b80 <usb_d_cb_trans_setup+0x78>)
    1b10:	4798      	blx	r3
    1b12:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1b14:	4c1b      	ldr	r4, [pc, #108]	; (1b84 <usb_d_cb_trans_setup+0x7c>)
    1b16:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1b1a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1b1c:	4621      	mov	r1, r4
    1b1e:	4628      	mov	r0, r5
    1b20:	4b19      	ldr	r3, [pc, #100]	; (1b88 <usb_d_cb_trans_setup+0x80>)
    1b22:	4798      	blx	r3
	if (n != 8) {
    1b24:	b2c0      	uxtb	r0, r0
    1b26:	2808      	cmp	r0, #8
    1b28:	d009      	beq.n	1b3e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1b2a:	2101      	movs	r1, #1
    1b2c:	4628      	mov	r0, r5
    1b2e:	4c17      	ldr	r4, [pc, #92]	; (1b8c <usb_d_cb_trans_setup+0x84>)
    1b30:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1b32:	2101      	movs	r1, #1
    1b34:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1b38:	47a0      	blx	r4
		return;
    1b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1b3e:	2100      	movs	r1, #0
    1b40:	4628      	mov	r0, r5
    1b42:	4f12      	ldr	r7, [pc, #72]	; (1b8c <usb_d_cb_trans_setup+0x84>)
    1b44:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1b46:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1b4a:	2100      	movs	r1, #0
    1b4c:	4640      	mov	r0, r8
    1b4e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1b50:	4b0c      	ldr	r3, [pc, #48]	; (1b84 <usb_d_cb_trans_setup+0x7c>)
    1b52:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1b56:	2201      	movs	r2, #1
    1b58:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1b5a:	695b      	ldr	r3, [r3, #20]
    1b5c:	4621      	mov	r1, r4
    1b5e:	4628      	mov	r0, r5
    1b60:	4798      	blx	r3
    1b62:	b108      	cbz	r0, 1b68 <usb_d_cb_trans_setup+0x60>
    1b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <usb_d_cb_trans_setup+0x7c>)
    1b6a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1b6e:	2305      	movs	r3, #5
    1b70:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1b72:	2101      	movs	r1, #1
    1b74:	4628      	mov	r0, r5
    1b76:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1b78:	2101      	movs	r1, #1
    1b7a:	4640      	mov	r0, r8
    1b7c:	47b8      	blx	r7
    1b7e:	e7f1      	b.n	1b64 <usb_d_cb_trans_setup+0x5c>
    1b80:	0000193d 	.word	0x0000193d
    1b84:	20000478 	.word	0x20000478
    1b88:	000049a1 	.word	0x000049a1
    1b8c:	00004859 	.word	0x00004859

00001b90 <usb_d_init>:

int32_t usb_d_init(void)
{
    1b90:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1b92:	4b11      	ldr	r3, [pc, #68]	; (1bd8 <usb_d_init+0x48>)
    1b94:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1b96:	2800      	cmp	r0, #0
    1b98:	db1d      	blt.n	1bd6 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1b9a:	4c10      	ldr	r4, [pc, #64]	; (1bdc <usb_d_init+0x4c>)
    1b9c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1ba0:	2100      	movs	r1, #0
    1ba2:	4620      	mov	r0, r4
    1ba4:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <usb_d_init+0x50>)
    1ba6:	4798      	blx	r3
    1ba8:	4623      	mov	r3, r4
    1baa:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1bae:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1bb0:	4a0c      	ldr	r2, [pc, #48]	; (1be4 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1bb2:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1bb4:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1bb6:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1bb8:	61da      	str	r2, [r3, #28]
    1bba:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1bbc:	4283      	cmp	r3, r0
    1bbe:	d1f8      	bne.n	1bb2 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1bc0:	4909      	ldr	r1, [pc, #36]	; (1be8 <usb_d_init+0x58>)
    1bc2:	2000      	movs	r0, #0
    1bc4:	4c09      	ldr	r4, [pc, #36]	; (1bec <usb_d_init+0x5c>)
    1bc6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1bc8:	4909      	ldr	r1, [pc, #36]	; (1bf0 <usb_d_init+0x60>)
    1bca:	2001      	movs	r0, #1
    1bcc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1bce:	4909      	ldr	r1, [pc, #36]	; (1bf4 <usb_d_init+0x64>)
    1bd0:	2002      	movs	r0, #2
    1bd2:	47a0      	blx	r4
	return ERR_NONE;
    1bd4:	2000      	movs	r0, #0
}
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	0000423d 	.word	0x0000423d
    1bdc:	20000478 	.word	0x20000478
    1be0:	00006acb 	.word	0x00006acb
    1be4:	00001981 	.word	0x00001981
    1be8:	00001b09 	.word	0x00001b09
    1bec:	00004c05 	.word	0x00004c05
    1bf0:	00001985 	.word	0x00001985
    1bf4:	000019b9 	.word	0x000019b9

00001bf8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1bf8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1bfa:	4b01      	ldr	r3, [pc, #4]	; (1c00 <usb_d_register_callback+0x8>)
    1bfc:	4798      	blx	r3
    1bfe:	bd08      	pop	{r3, pc}
    1c00:	00004be1 	.word	0x00004be1

00001c04 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1c04:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1c06:	4b01      	ldr	r3, [pc, #4]	; (1c0c <usb_d_enable+0x8>)
    1c08:	4798      	blx	r3
}
    1c0a:	bd08      	pop	{r3, pc}
    1c0c:	00004339 	.word	0x00004339

00001c10 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1c10:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    1c12:	4b01      	ldr	r3, [pc, #4]	; (1c18 <usb_d_attach+0x8>)
    1c14:	4798      	blx	r3
    1c16:	bd08      	pop	{r3, pc}
    1c18:	000043a5 	.word	0x000043a5

00001c1c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1c1c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1c1e:	4b01      	ldr	r3, [pc, #4]	; (1c24 <usb_d_set_address+0x8>)
    1c20:	4798      	blx	r3
    1c22:	bd08      	pop	{r3, pc}
    1c24:	000043b7 	.word	0x000043b7

00001c28 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c2a:	4606      	mov	r6, r0
    1c2c:	460c      	mov	r4, r1
    1c2e:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c30:	4b0f      	ldr	r3, [pc, #60]	; (1c70 <usb_d_ep_init+0x48>)
    1c32:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1c34:	2800      	cmp	r0, #0
    1c36:	da14      	bge.n	1c62 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1c38:	20ff      	movs	r0, #255	; 0xff
    1c3a:	4b0d      	ldr	r3, [pc, #52]	; (1c70 <usb_d_ep_init+0x48>)
    1c3c:	4798      	blx	r3
		if (ep_index < 0) {
    1c3e:	1e05      	subs	r5, r0, #0
    1c40:	db12      	blt.n	1c68 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1c42:	463a      	mov	r2, r7
    1c44:	4621      	mov	r1, r4
    1c46:	4630      	mov	r0, r6
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <usb_d_ep_init+0x4c>)
    1c4a:	4798      	blx	r3
	if (rc < 0) {
    1c4c:	2800      	cmp	r0, #0
    1c4e:	db0d      	blt.n	1c6c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1c50:	4b09      	ldr	r3, [pc, #36]	; (1c78 <usb_d_ep_init+0x50>)
    1c52:	0168      	lsls	r0, r5, #5
    1c54:	181a      	adds	r2, r3, r0
    1c56:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1c58:	f004 0403 	and.w	r4, r4, #3
    1c5c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1c5e:	2000      	movs	r0, #0
    1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1c62:	f06f 0013 	mvn.w	r0, #19
    1c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1c68:	f06f 0014 	mvn.w	r0, #20
}
    1c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c6e:	bf00      	nop
    1c70:	0000193d 	.word	0x0000193d
    1c74:	000043c5 	.word	0x000043c5
    1c78:	20000478 	.word	0x20000478

00001c7c <usb_d_ep0_init>:
{
    1c7c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1c7e:	4602      	mov	r2, r0
    1c80:	2100      	movs	r1, #0
    1c82:	4608      	mov	r0, r1
    1c84:	4b01      	ldr	r3, [pc, #4]	; (1c8c <usb_d_ep0_init+0x10>)
    1c86:	4798      	blx	r3
}
    1c88:	bd08      	pop	{r3, pc}
    1c8a:	bf00      	nop
    1c8c:	00001c29 	.word	0x00001c29

00001c90 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1c90:	b538      	push	{r3, r4, r5, lr}
    1c92:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c94:	4b06      	ldr	r3, [pc, #24]	; (1cb0 <usb_d_ep_deinit+0x20>)
    1c96:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1c98:	1e04      	subs	r4, r0, #0
    1c9a:	db07      	blt.n	1cac <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1c9c:	4628      	mov	r0, r5
    1c9e:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <usb_d_ep_deinit+0x24>)
    1ca0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1ca2:	4805      	ldr	r0, [pc, #20]	; (1cb8 <usb_d_ep_deinit+0x28>)
    1ca4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1ca8:	23ff      	movs	r3, #255	; 0xff
    1caa:	7043      	strb	r3, [r0, #1]
    1cac:	bd38      	pop	{r3, r4, r5, pc}
    1cae:	bf00      	nop
    1cb0:	0000193d 	.word	0x0000193d
    1cb4:	000044dd 	.word	0x000044dd
    1cb8:	20000478 	.word	0x20000478

00001cbc <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1cbc:	b538      	push	{r3, r4, r5, lr}
    1cbe:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cc0:	4b0e      	ldr	r3, [pc, #56]	; (1cfc <usb_d_ep_enable+0x40>)
    1cc2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1cc4:	1e04      	subs	r4, r0, #0
    1cc6:	db16      	blt.n	1cf6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1cc8:	0163      	lsls	r3, r4, #5
    1cca:	4a0d      	ldr	r2, [pc, #52]	; (1d00 <usb_d_ep_enable+0x44>)
    1ccc:	5cd3      	ldrb	r3, [r2, r3]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	bf0c      	ite	eq
    1cd2:	2202      	moveq	r2, #2
    1cd4:	2201      	movne	r2, #1
    1cd6:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <usb_d_ep_enable+0x44>)
    1cd8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1cdc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1cde:	4628      	mov	r0, r5
    1ce0:	4b08      	ldr	r3, [pc, #32]	; (1d04 <usb_d_ep_enable+0x48>)
    1ce2:	4798      	blx	r3
	if (rc < 0) {
    1ce4:	2800      	cmp	r0, #0
    1ce6:	db00      	blt.n	1cea <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1ce8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1cea:	4b05      	ldr	r3, [pc, #20]	; (1d00 <usb_d_ep_enable+0x44>)
    1cec:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1cf0:	2300      	movs	r3, #0
    1cf2:	70a3      	strb	r3, [r4, #2]
    1cf4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1cf6:	f06f 0011 	mvn.w	r0, #17
    1cfa:	e7f5      	b.n	1ce8 <usb_d_ep_enable+0x2c>
    1cfc:	0000193d 	.word	0x0000193d
    1d00:	20000478 	.word	0x20000478
    1d04:	000045a1 	.word	0x000045a1

00001d08 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d0c:	b086      	sub	sp, #24
    1d0e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1d10:	7a07      	ldrb	r7, [r0, #8]
    1d12:	4638      	mov	r0, r7
    1d14:	4b3f      	ldr	r3, [pc, #252]	; (1e14 <usb_d_ep_transfer+0x10c>)
    1d16:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1d18:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1d1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1d1e:	1e06      	subs	r6, r0, #0
    1d20:	db72      	blt.n	1e08 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1d22:	a804      	add	r0, sp, #16
    1d24:	4b3c      	ldr	r3, [pc, #240]	; (1e18 <usb_d_ep_transfer+0x110>)
    1d26:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1d28:	4b3c      	ldr	r3, [pc, #240]	; (1e1c <usb_d_ep_transfer+0x114>)
    1d2a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1d2e:	789b      	ldrb	r3, [r3, #2]
    1d30:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1d34:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b01      	cmp	r3, #1
    1d3c:	d011      	beq.n	1d62 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1d3e:	a804      	add	r0, sp, #16
    1d40:	4b37      	ldr	r3, [pc, #220]	; (1e20 <usb_d_ep_transfer+0x118>)
    1d42:	4798      	blx	r3
		switch (state) {
    1d44:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	2b05      	cmp	r3, #5
    1d4c:	d05f      	beq.n	1e0e <usb_d_ep_transfer+0x106>
    1d4e:	2b06      	cmp	r3, #6
    1d50:	d023      	beq.n	1d9a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1d52:	2b00      	cmp	r3, #0
    1d54:	bf0c      	ite	eq
    1d56:	f06f 0012 	mvneq.w	r0, #18
    1d5a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1d5c:	b006      	add	sp, #24
    1d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1d62:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1e1c <usb_d_ep_transfer+0x114>
    1d66:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1d6a:	eb0a 0309 	add.w	r3, sl, r9
    1d6e:	2203      	movs	r2, #3
    1d70:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1d72:	a804      	add	r0, sp, #16
    1d74:	4b2a      	ldr	r3, [pc, #168]	; (1e20 <usb_d_ep_transfer+0x118>)
    1d76:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1d78:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1d7c:	b183      	cbz	r3, 1da0 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1d7e:	7a22      	ldrb	r2, [r4, #8]
    1d80:	3500      	adds	r5, #0
    1d82:	bf18      	it	ne
    1d84:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1d86:	6823      	ldr	r3, [r4, #0]
    1d88:	9301      	str	r3, [sp, #4]
    1d8a:	f8cd 8008 	str.w	r8, [sp, #8]
    1d8e:	f017 0f80 	tst.w	r7, #128	; 0x80
    1d92:	d119      	bne.n	1dc8 <usb_d_ep_transfer+0xc0>
    1d94:	f002 030f 	and.w	r3, r2, #15
    1d98:	e018      	b.n	1dcc <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1d9a:	f06f 000f 	mvn.w	r0, #15
    1d9e:	e7dd      	b.n	1d5c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1da0:	4b1e      	ldr	r3, [pc, #120]	; (1e1c <usb_d_ep_transfer+0x114>)
    1da2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1da6:	7cda      	ldrb	r2, [r3, #19]
    1da8:	7c9d      	ldrb	r5, [r3, #18]
    1daa:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1dae:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1db0:	b9a5      	cbnz	r5, 1ddc <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1db2:	4b1a      	ldr	r3, [pc, #104]	; (1e1c <usb_d_ep_transfer+0x114>)
    1db4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1db8:	2304      	movs	r3, #4
    1dba:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1dbc:	2300      	movs	r3, #0
			zlp                 = true;
    1dbe:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1dc0:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1dc2:	6821      	ldr	r1, [r4, #0]
    1dc4:	9101      	str	r1, [sp, #4]
    1dc6:	9302      	str	r3, [sp, #8]
    1dc8:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1dcc:	f88d 300c 	strb.w	r3, [sp, #12]
    1dd0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1dd4:	a801      	add	r0, sp, #4
    1dd6:	4b13      	ldr	r3, [pc, #76]	; (1e24 <usb_d_ep_transfer+0x11c>)
    1dd8:	4798      	blx	r3
	return rc;
    1dda:	e7bf      	b.n	1d5c <usb_d_ep_transfer+0x54>
    1ddc:	4643      	mov	r3, r8
    1dde:	45a8      	cmp	r8, r5
    1de0:	bf28      	it	cs
    1de2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1de4:	4a0d      	ldr	r2, [pc, #52]	; (1e1c <usb_d_ep_transfer+0x114>)
    1de6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1dea:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1dee:	2a00      	cmp	r2, #0
    1df0:	db05      	blt.n	1dfe <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1df2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1df4:	6821      	ldr	r1, [r4, #0]
    1df6:	9101      	str	r1, [sp, #4]
    1df8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1dfa:	2500      	movs	r5, #0
    1dfc:	e7ca      	b.n	1d94 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1dfe:	429d      	cmp	r5, r3
    1e00:	bf94      	ite	ls
    1e02:	2500      	movls	r5, #0
    1e04:	2501      	movhi	r5, #1
    1e06:	e7db      	b.n	1dc0 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1e08:	f06f 0011 	mvn.w	r0, #17
    1e0c:	e7a6      	b.n	1d5c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1e0e:	2002      	movs	r0, #2
    1e10:	e7a4      	b.n	1d5c <usb_d_ep_transfer+0x54>
    1e12:	bf00      	nop
    1e14:	0000193d 	.word	0x0000193d
    1e18:	00001075 	.word	0x00001075
    1e1c:	20000478 	.word	0x20000478
    1e20:	00001083 	.word	0x00001083
    1e24:	00004a01 	.word	0x00004a01

00001e28 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1e28:	b538      	push	{r3, r4, r5, lr}
    1e2a:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1e2c:	b141      	cbz	r1, 1e40 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1e2e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e30:	bf0c      	ite	eq
    1e32:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1e34:	2102      	movne	r1, #2
    1e36:	4b13      	ldr	r3, [pc, #76]	; (1e84 <usb_d_ep_halt+0x5c>)
    1e38:	4798      	blx	r3
    1e3a:	4603      	mov	r3, r0
	}
}
    1e3c:	4618      	mov	r0, r3
    1e3e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e40:	4b11      	ldr	r3, [pc, #68]	; (1e88 <usb_d_ep_halt+0x60>)
    1e42:	4798      	blx	r3
	if (ep_index < 0) {
    1e44:	1e05      	subs	r5, r0, #0
    1e46:	db19      	blt.n	1e7c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1e48:	2102      	movs	r1, #2
    1e4a:	4620      	mov	r0, r4
    1e4c:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <usb_d_ep_halt+0x5c>)
    1e4e:	4798      	blx	r3
    1e50:	4603      	mov	r3, r0
    1e52:	2800      	cmp	r0, #0
    1e54:	d0f2      	beq.n	1e3c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1e56:	2100      	movs	r1, #0
    1e58:	4620      	mov	r0, r4
    1e5a:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <usb_d_ep_halt+0x5c>)
    1e5c:	4798      	blx	r3
		if (rc < 0) {
    1e5e:	1e03      	subs	r3, r0, #0
    1e60:	dbec      	blt.n	1e3c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1e62:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <usb_d_ep_halt+0x64>)
    1e64:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1e68:	2201      	movs	r2, #1
    1e6a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1e6c:	2103      	movs	r1, #3
    1e6e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1e70:	69db      	ldr	r3, [r3, #28]
    1e72:	2200      	movs	r2, #0
    1e74:	4620      	mov	r0, r4
    1e76:	4798      	blx	r3
	return ERR_NONE;
    1e78:	2300      	movs	r3, #0
    1e7a:	e7df      	b.n	1e3c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1e7c:	f06f 0311 	mvn.w	r3, #17
    1e80:	e7dc      	b.n	1e3c <usb_d_ep_halt+0x14>
    1e82:	bf00      	nop
    1e84:	00004859 	.word	0x00004859
    1e88:	0000193d 	.word	0x0000193d
    1e8c:	20000478 	.word	0x20000478

00001e90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1e90:	b538      	push	{r3, r4, r5, lr}
    1e92:	460d      	mov	r5, r1
    1e94:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e96:	4b0e      	ldr	r3, [pc, #56]	; (1ed0 <usb_d_ep_register_callback+0x40>)
    1e98:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1e9a:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <usb_d_ep_register_callback+0x44>)
    1e9c:	2c00      	cmp	r4, #0
    1e9e:	bf08      	it	eq
    1ea0:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1ea2:	2800      	cmp	r0, #0
    1ea4:	db13      	blt.n	1ece <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1ea6:	2d01      	cmp	r5, #1
    1ea8:	d008      	beq.n	1ebc <usb_d_ep_register_callback+0x2c>
    1eaa:	b115      	cbz	r5, 1eb2 <usb_d_ep_register_callback+0x22>
    1eac:	2d02      	cmp	r5, #2
    1eae:	d00a      	beq.n	1ec6 <usb_d_ep_register_callback+0x36>
    1eb0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1eb2:	4b09      	ldr	r3, [pc, #36]	; (1ed8 <usb_d_ep_register_callback+0x48>)
    1eb4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1eb8:	6144      	str	r4, [r0, #20]
		break;
    1eba:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <usb_d_ep_register_callback+0x48>)
    1ebe:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1ec2:	6184      	str	r4, [r0, #24]
		break;
    1ec4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1ec6:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <usb_d_ep_register_callback+0x48>)
    1ec8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1ecc:	61c4      	str	r4, [r0, #28]
    1ece:	bd38      	pop	{r3, r4, r5, pc}
    1ed0:	0000193d 	.word	0x0000193d
    1ed4:	00001981 	.word	0x00001981
    1ed8:	20000478 	.word	0x20000478

00001edc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1edc:	b900      	cbnz	r0, 1ee0 <assert+0x4>
		__asm("BKPT #0");
    1ede:	be00      	bkpt	0x0000
    1ee0:	4770      	bx	lr

00001ee2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1ee2:	6803      	ldr	r3, [r0, #0]
    1ee4:	b14b      	cbz	r3, 1efa <is_list_element+0x18>
		if (it == element) {
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d009      	beq.n	1efe <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	b11b      	cbz	r3, 1ef6 <is_list_element+0x14>
		if (it == element) {
    1eee:	4299      	cmp	r1, r3
    1ef0:	d1fb      	bne.n	1eea <is_list_element+0x8>
			return true;
    1ef2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1ef4:	4770      	bx	lr
	return false;
    1ef6:	2000      	movs	r0, #0
    1ef8:	4770      	bx	lr
    1efa:	2000      	movs	r0, #0
    1efc:	4770      	bx	lr
			return true;
    1efe:	2001      	movs	r0, #1
    1f00:	4770      	bx	lr
	...

00001f04 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1f04:	b538      	push	{r3, r4, r5, lr}
    1f06:	4604      	mov	r4, r0
    1f08:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1f0a:	4b06      	ldr	r3, [pc, #24]	; (1f24 <list_insert_as_head+0x20>)
    1f0c:	4798      	blx	r3
    1f0e:	f080 0001 	eor.w	r0, r0, #1
    1f12:	2239      	movs	r2, #57	; 0x39
    1f14:	4904      	ldr	r1, [pc, #16]	; (1f28 <list_insert_as_head+0x24>)
    1f16:	b2c0      	uxtb	r0, r0
    1f18:	4b04      	ldr	r3, [pc, #16]	; (1f2c <list_insert_as_head+0x28>)
    1f1a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1f1c:	6823      	ldr	r3, [r4, #0]
    1f1e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1f20:	6025      	str	r5, [r4, #0]
    1f22:	bd38      	pop	{r3, r4, r5, pc}
    1f24:	00001ee3 	.word	0x00001ee3
    1f28:	0000748c 	.word	0x0000748c
    1f2c:	00001edd 	.word	0x00001edd

00001f30 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1f30:	6803      	ldr	r3, [r0, #0]
    1f32:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1f34:	6001      	str	r1, [r0, #0]
    1f36:	4770      	bx	lr

00001f38 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1f38:	b570      	push	{r4, r5, r6, lr}
    1f3a:	4605      	mov	r5, r0
    1f3c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1f3e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1f40:	4b0a      	ldr	r3, [pc, #40]	; (1f6c <list_insert_at_end+0x34>)
    1f42:	4798      	blx	r3
    1f44:	f080 0001 	eor.w	r0, r0, #1
    1f48:	224f      	movs	r2, #79	; 0x4f
    1f4a:	4909      	ldr	r1, [pc, #36]	; (1f70 <list_insert_at_end+0x38>)
    1f4c:	b2c0      	uxtb	r0, r0
    1f4e:	4b09      	ldr	r3, [pc, #36]	; (1f74 <list_insert_at_end+0x3c>)
    1f50:	4798      	blx	r3

	if (!list->head) {
    1f52:	682b      	ldr	r3, [r5, #0]
    1f54:	b91b      	cbnz	r3, 1f5e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1f56:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1f58:	6033      	str	r3, [r6, #0]
		return;
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1f5c:	461c      	mov	r4, r3
	while (it->next) {
    1f5e:	6823      	ldr	r3, [r4, #0]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d1fb      	bne.n	1f5c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1f64:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1f66:	6033      	str	r3, [r6, #0]
    1f68:	bd70      	pop	{r4, r5, r6, pc}
    1f6a:	bf00      	nop
    1f6c:	00001ee3 	.word	0x00001ee3
    1f70:	0000748c 	.word	0x0000748c
    1f74:	00001edd 	.word	0x00001edd

00001f78 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1f78:	6803      	ldr	r3, [r0, #0]
    1f7a:	b10b      	cbz	r3, 1f80 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1f7c:	681a      	ldr	r2, [r3, #0]
    1f7e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1f80:	4618      	mov	r0, r3
    1f82:	4770      	bx	lr

00001f84 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1f84:	b570      	push	{r4, r5, r6, lr}
    1f86:	460e      	mov	r6, r1
    1f88:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1f8a:	4604      	mov	r4, r0
    1f8c:	b178      	cbz	r0, 1fae <ringbuffer_init+0x2a>
    1f8e:	b181      	cbz	r1, 1fb2 <ringbuffer_init+0x2e>
    1f90:	b1a2      	cbz	r2, 1fbc <ringbuffer_init+0x38>
    1f92:	2001      	movs	r0, #1
    1f94:	2228      	movs	r2, #40	; 0x28
    1f96:	490d      	ldr	r1, [pc, #52]	; (1fcc <ringbuffer_init+0x48>)
    1f98:	4b0d      	ldr	r3, [pc, #52]	; (1fd0 <ringbuffer_init+0x4c>)
    1f9a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1f9c:	1e6b      	subs	r3, r5, #1
    1f9e:	421d      	tst	r5, r3
    1fa0:	d109      	bne.n	1fb6 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1fa2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1fa4:	2000      	movs	r0, #0
    1fa6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1fa8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1faa:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1fac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1fae:	2000      	movs	r0, #0
    1fb0:	e7f0      	b.n	1f94 <ringbuffer_init+0x10>
    1fb2:	2000      	movs	r0, #0
    1fb4:	e7ee      	b.n	1f94 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1fb6:	f06f 000c 	mvn.w	r0, #12
    1fba:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1fbc:	2228      	movs	r2, #40	; 0x28
    1fbe:	4903      	ldr	r1, [pc, #12]	; (1fcc <ringbuffer_init+0x48>)
    1fc0:	2000      	movs	r0, #0
    1fc2:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <ringbuffer_init+0x4c>)
    1fc4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1fc6:	1e6b      	subs	r3, r5, #1
    1fc8:	e7eb      	b.n	1fa2 <ringbuffer_init+0x1e>
    1fca:	bf00      	nop
    1fcc:	000074ac 	.word	0x000074ac
    1fd0:	00001edd 	.word	0x00001edd

00001fd4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1fd4:	b538      	push	{r3, r4, r5, lr}
    1fd6:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1fd8:	4604      	mov	r4, r0
    1fda:	b1a0      	cbz	r0, 2006 <ringbuffer_get+0x32>
    1fdc:	1c08      	adds	r0, r1, #0
    1fde:	bf18      	it	ne
    1fe0:	2001      	movne	r0, #1
    1fe2:	2240      	movs	r2, #64	; 0x40
    1fe4:	490a      	ldr	r1, [pc, #40]	; (2010 <ringbuffer_get+0x3c>)
    1fe6:	4b0b      	ldr	r3, [pc, #44]	; (2014 <ringbuffer_get+0x40>)
    1fe8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1fea:	68a3      	ldr	r3, [r4, #8]
    1fec:	68e2      	ldr	r2, [r4, #12]
    1fee:	429a      	cmp	r2, r3
    1ff0:	d00b      	beq.n	200a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1ff2:	6862      	ldr	r2, [r4, #4]
    1ff4:	4013      	ands	r3, r2
    1ff6:	6822      	ldr	r2, [r4, #0]
    1ff8:	5cd3      	ldrb	r3, [r2, r3]
    1ffa:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1ffc:	68a3      	ldr	r3, [r4, #8]
    1ffe:	3301      	adds	r3, #1
    2000:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2002:	2000      	movs	r0, #0
    2004:	bd38      	pop	{r3, r4, r5, pc}
    2006:	2000      	movs	r0, #0
    2008:	e7eb      	b.n	1fe2 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    200a:	f06f 0009 	mvn.w	r0, #9
}
    200e:	bd38      	pop	{r3, r4, r5, pc}
    2010:	000074ac 	.word	0x000074ac
    2014:	00001edd 	.word	0x00001edd

00002018 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2018:	b538      	push	{r3, r4, r5, lr}
    201a:	460d      	mov	r5, r1
	ASSERT(rb);
    201c:	4604      	mov	r4, r0
    201e:	2251      	movs	r2, #81	; 0x51
    2020:	490b      	ldr	r1, [pc, #44]	; (2050 <ringbuffer_put+0x38>)
    2022:	3000      	adds	r0, #0
    2024:	bf18      	it	ne
    2026:	2001      	movne	r0, #1
    2028:	4b0a      	ldr	r3, [pc, #40]	; (2054 <ringbuffer_put+0x3c>)
    202a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    202c:	68e3      	ldr	r3, [r4, #12]
    202e:	6862      	ldr	r2, [r4, #4]
    2030:	4013      	ands	r3, r2
    2032:	6822      	ldr	r2, [r4, #0]
    2034:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2036:	68e3      	ldr	r3, [r4, #12]
    2038:	6861      	ldr	r1, [r4, #4]
    203a:	68a2      	ldr	r2, [r4, #8]
    203c:	1a9a      	subs	r2, r3, r2
    203e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2040:	bf84      	itt	hi
    2042:	1a59      	subhi	r1, r3, r1
    2044:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2046:	3301      	adds	r3, #1
    2048:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    204a:	2000      	movs	r0, #0
    204c:	bd38      	pop	{r3, r4, r5, pc}
    204e:	bf00      	nop
    2050:	000074ac 	.word	0x000074ac
    2054:	00001edd 	.word	0x00001edd

00002058 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2058:	b510      	push	{r4, lr}
	ASSERT(rb);
    205a:	4604      	mov	r4, r0
    205c:	2267      	movs	r2, #103	; 0x67
    205e:	4905      	ldr	r1, [pc, #20]	; (2074 <ringbuffer_num+0x1c>)
    2060:	3000      	adds	r0, #0
    2062:	bf18      	it	ne
    2064:	2001      	movne	r0, #1
    2066:	4b04      	ldr	r3, [pc, #16]	; (2078 <ringbuffer_num+0x20>)
    2068:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    206a:	68e0      	ldr	r0, [r4, #12]
    206c:	68a3      	ldr	r3, [r4, #8]
}
    206e:	1ac0      	subs	r0, r0, r3
    2070:	bd10      	pop	{r4, pc}
    2072:	bf00      	nop
    2074:	000074ac 	.word	0x000074ac
    2078:	00001edd 	.word	0x00001edd

0000207c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    207c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    207e:	4a06      	ldr	r2, [pc, #24]	; (2098 <_sbrk+0x1c>)
    2080:	6812      	ldr	r2, [r2, #0]
    2082:	b122      	cbz	r2, 208e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2084:	4a04      	ldr	r2, [pc, #16]	; (2098 <_sbrk+0x1c>)
    2086:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2088:	4403      	add	r3, r0
    208a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    208c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    208e:	4903      	ldr	r1, [pc, #12]	; (209c <_sbrk+0x20>)
    2090:	4a01      	ldr	r2, [pc, #4]	; (2098 <_sbrk+0x1c>)
    2092:	6011      	str	r1, [r2, #0]
    2094:	e7f6      	b.n	2084 <_sbrk+0x8>
    2096:	bf00      	nop
    2098:	20000618 	.word	0x20000618
    209c:	20011cb8 	.word	0x20011cb8

000020a0 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    20a0:	6940      	ldr	r0, [r0, #20]
    20a2:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    20a6:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    20aa:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    20ac:	0040      	lsls	r0, r0, #1
    20ae:	3076      	adds	r0, #118	; 0x76
}
    20b0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    20b4:	4770      	bx	lr
	...

000020b8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    20b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    20ba:	f013 0f01 	tst.w	r3, #1
    20be:	d11b      	bne.n	20f8 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    20c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20c2:	f013 0f03 	tst.w	r3, #3
    20c6:	d1fb      	bne.n	20c0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    20c8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    20ca:	f013 0f02 	tst.w	r3, #2
    20ce:	d00d      	beq.n	20ec <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    20d0:	8803      	ldrh	r3, [r0, #0]
    20d2:	f023 0302 	bic.w	r3, r3, #2
    20d6:	041b      	lsls	r3, r3, #16
    20d8:	0c1b      	lsrs	r3, r3, #16
    20da:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    20dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20de:	f013 0f03 	tst.w	r3, #3
    20e2:	d1fb      	bne.n	20dc <_adc_init+0x24>
    20e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20e6:	f013 0f02 	tst.w	r3, #2
    20ea:	d1fb      	bne.n	20e4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    20ec:	2301      	movs	r3, #1
    20ee:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    20f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20f2:	f013 0f03 	tst.w	r3, #3
    20f6:	d1fb      	bne.n	20f0 <_adc_init+0x38>
    20f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    20fa:	f013 0f01 	tst.w	r3, #1
    20fe:	d1fb      	bne.n	20f8 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2100:	2316      	movs	r3, #22
    2102:	4a37      	ldr	r2, [pc, #220]	; (21e0 <_adc_init+0x128>)
    2104:	fb03 2301 	mla	r3, r3, r1, r2
    2108:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    210a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    210c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2112:	2b00      	cmp	r3, #0
    2114:	d1fa      	bne.n	210c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2116:	2316      	movs	r3, #22
    2118:	4a31      	ldr	r2, [pc, #196]	; (21e0 <_adc_init+0x128>)
    211a:	fb03 2301 	mla	r3, r3, r1, r2
    211e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2120:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2122:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2124:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2128:	2b00      	cmp	r3, #0
    212a:	d1fa      	bne.n	2122 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    212c:	2316      	movs	r3, #22
    212e:	4a2c      	ldr	r2, [pc, #176]	; (21e0 <_adc_init+0x128>)
    2130:	fb03 2301 	mla	r3, r3, r1, r2
    2134:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2136:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2138:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    213a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    213c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2142:	2b00      	cmp	r3, #0
    2144:	d1fa      	bne.n	213c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2146:	2316      	movs	r3, #22
    2148:	4a25      	ldr	r2, [pc, #148]	; (21e0 <_adc_init+0x128>)
    214a:	fb03 2301 	mla	r3, r3, r1, r2
    214e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2150:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2152:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2154:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2158:	2b00      	cmp	r3, #0
    215a:	d1fa      	bne.n	2152 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    215c:	2316      	movs	r3, #22
    215e:	4a20      	ldr	r2, [pc, #128]	; (21e0 <_adc_init+0x128>)
    2160:	fb03 2301 	mla	r3, r3, r1, r2
    2164:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2166:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2168:	6b03      	ldr	r3, [r0, #48]	; 0x30
    216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    216e:	2b00      	cmp	r3, #0
    2170:	d1fa      	bne.n	2168 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2172:	2316      	movs	r3, #22
    2174:	4a1a      	ldr	r2, [pc, #104]	; (21e0 <_adc_init+0x128>)
    2176:	fb03 2301 	mla	r3, r3, r1, r2
    217a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    217c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    217e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2180:	f013 0f80 	tst.w	r3, #128	; 0x80
    2184:	d1fb      	bne.n	217e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2186:	2316      	movs	r3, #22
    2188:	4a15      	ldr	r2, [pc, #84]	; (21e0 <_adc_init+0x128>)
    218a:	fb03 2301 	mla	r3, r3, r1, r2
    218e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2190:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2192:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2194:	f413 7f80 	tst.w	r3, #256	; 0x100
    2198:	d1fb      	bne.n	2192 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    219a:	2316      	movs	r3, #22
    219c:	4a10      	ldr	r2, [pc, #64]	; (21e0 <_adc_init+0x128>)
    219e:	fb03 2301 	mla	r3, r3, r1, r2
    21a2:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    21a4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    21a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21a8:	f413 7f00 	tst.w	r3, #512	; 0x200
    21ac:	d1fb      	bne.n	21a6 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    21ae:	2316      	movs	r3, #22
    21b0:	4a0b      	ldr	r2, [pc, #44]	; (21e0 <_adc_init+0x128>)
    21b2:	fb03 2301 	mla	r3, r3, r1, r2
    21b6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    21b8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    21ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    21c0:	d1fb      	bne.n	21ba <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    21c2:	2216      	movs	r2, #22
    21c4:	4b06      	ldr	r3, [pc, #24]	; (21e0 <_adc_init+0x128>)
    21c6:	fb02 3101 	mla	r1, r2, r1, r3
    21ca:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    21cc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    21ce:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    21d0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    21d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21d4:	f013 0f03 	tst.w	r3, #3
    21d8:	d1fb      	bne.n	21d2 <_adc_init+0x11a>

	return ERR_NONE;
}
    21da:	2000      	movs	r0, #0
    21dc:	4770      	bx	lr
    21de:	bf00      	nop
    21e0:	000074d0 	.word	0x000074d0

000021e4 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    21e4:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    21e6:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    21e8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    21ec:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    21f0:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    21f2:	f013 0f01 	tst.w	r3, #1
    21f6:	d106      	bne.n	2206 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    21f8:	f013 0f02 	tst.w	r3, #2
    21fc:	d10d      	bne.n	221a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    21fe:	f013 0f04 	tst.w	r3, #4
    2202:	d111      	bne.n	2228 <_adc_interrupt_handler+0x44>
    2204:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2206:	2301      	movs	r3, #1
    2208:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    220c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    2210:	6883      	ldr	r3, [r0, #8]
    2212:	b292      	uxth	r2, r2
    2214:	2100      	movs	r1, #0
    2216:	4798      	blx	r3
    2218:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    221a:	2302      	movs	r3, #2
    221c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2220:	6843      	ldr	r3, [r0, #4]
    2222:	2100      	movs	r1, #0
    2224:	4798      	blx	r3
    2226:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2228:	2304      	movs	r3, #4
    222a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    222e:	6803      	ldr	r3, [r0, #0]
    2230:	2100      	movs	r1, #0
    2232:	4798      	blx	r3
	}
}
    2234:	e7e6      	b.n	2204 <_adc_interrupt_handler+0x20>
	...

00002238 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2238:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    223c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2240:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2244:	b148      	cbz	r0, 225a <_adc_get_regs+0x22>
    2246:	2801      	cmp	r0, #1
    2248:	d009      	beq.n	225e <_adc_get_regs+0x26>
{
    224a:	b508      	push	{r3, lr}
	ASSERT(false);
    224c:	228c      	movs	r2, #140	; 0x8c
    224e:	4905      	ldr	r1, [pc, #20]	; (2264 <_adc_get_regs+0x2c>)
    2250:	2000      	movs	r0, #0
    2252:	4b05      	ldr	r3, [pc, #20]	; (2268 <_adc_get_regs+0x30>)
    2254:	4798      	blx	r3
	return 0;
    2256:	2000      	movs	r0, #0
    2258:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    225a:	2000      	movs	r0, #0
    225c:	4770      	bx	lr
    225e:	2001      	movs	r0, #1
    2260:	4770      	bx	lr
    2262:	bf00      	nop
    2264:	000074fc 	.word	0x000074fc
    2268:	00001edd 	.word	0x00001edd

0000226c <_adc_async_init>:
{
    226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2270:	460c      	mov	r4, r1
	ASSERT(device);
    2272:	4605      	mov	r5, r0
    2274:	22e6      	movs	r2, #230	; 0xe6
    2276:	493b      	ldr	r1, [pc, #236]	; (2364 <_adc_async_init+0xf8>)
    2278:	3000      	adds	r0, #0
    227a:	bf18      	it	ne
    227c:	2001      	movne	r0, #1
    227e:	4b3a      	ldr	r3, [pc, #232]	; (2368 <_adc_async_init+0xfc>)
    2280:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2282:	4620      	mov	r0, r4
    2284:	4b39      	ldr	r3, [pc, #228]	; (236c <_adc_async_init+0x100>)
    2286:	4798      	blx	r3
    2288:	4601      	mov	r1, r0
    228a:	4620      	mov	r0, r4
    228c:	4b38      	ldr	r3, [pc, #224]	; (2370 <_adc_async_init+0x104>)
    228e:	4798      	blx	r3
	if (init_status) {
    2290:	4606      	mov	r6, r0
    2292:	b110      	cbz	r0, 229a <_adc_async_init+0x2e>
}
    2294:	4630      	mov	r0, r6
    2296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    229a:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    229c:	4b35      	ldr	r3, [pc, #212]	; (2374 <_adc_async_init+0x108>)
    229e:	429c      	cmp	r4, r3
    22a0:	d05c      	beq.n	235c <_adc_async_init+0xf0>
	if (hw == ADC1) {
    22a2:	4b35      	ldr	r3, [pc, #212]	; (2378 <_adc_async_init+0x10c>)
    22a4:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    22a6:	bf04      	itt	eq
    22a8:	4b34      	ldreq	r3, [pc, #208]	; (237c <_adc_async_init+0x110>)
    22aa:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    22ac:	4628      	mov	r0, r5
    22ae:	4f34      	ldr	r7, [pc, #208]	; (2380 <_adc_async_init+0x114>)
    22b0:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22b2:	0943      	lsrs	r3, r0, #5
    22b4:	f000 001f 	and.w	r0, r0, #31
    22b8:	2401      	movs	r4, #1
    22ba:	fa04 f000 	lsl.w	r0, r4, r0
    22be:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2384 <_adc_async_init+0x118>
    22c2:	3320      	adds	r3, #32
    22c4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    22c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22cc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    22d0:	4628      	mov	r0, r5
    22d2:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22d4:	0943      	lsrs	r3, r0, #5
    22d6:	f000 001f 	and.w	r0, r0, #31
    22da:	fa04 f000 	lsl.w	r0, r4, r0
    22de:	3360      	adds	r3, #96	; 0x60
    22e0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    22e4:	4628      	mov	r0, r5
    22e6:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22e8:	0943      	lsrs	r3, r0, #5
    22ea:	f000 001f 	and.w	r0, r0, #31
    22ee:	4084      	lsls	r4, r0
    22f0:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    22f4:	4628      	mov	r0, r5
    22f6:	47b8      	blx	r7
    22f8:	3001      	adds	r0, #1
    22fa:	b280      	uxth	r0, r0
    22fc:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    22fe:	2b00      	cmp	r3, #0
    2300:	dbc8      	blt.n	2294 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2302:	095b      	lsrs	r3, r3, #5
    2304:	f000 001f 	and.w	r0, r0, #31
    2308:	2201      	movs	r2, #1
    230a:	fa02 f000 	lsl.w	r0, r2, r0
    230e:	3320      	adds	r3, #32
    2310:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2318:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    231c:	4628      	mov	r0, r5
    231e:	47b8      	blx	r7
    2320:	3001      	adds	r0, #1
    2322:	b280      	uxth	r0, r0
    2324:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2326:	2b00      	cmp	r3, #0
    2328:	dbb4      	blt.n	2294 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    232a:	095b      	lsrs	r3, r3, #5
    232c:	f000 001f 	and.w	r0, r0, #31
    2330:	2201      	movs	r2, #1
    2332:	fa02 f000 	lsl.w	r0, r2, r0
    2336:	3360      	adds	r3, #96	; 0x60
    2338:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    233c:	4628      	mov	r0, r5
    233e:	47b8      	blx	r7
    2340:	3001      	adds	r0, #1
    2342:	b280      	uxth	r0, r0
    2344:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2346:	2b00      	cmp	r3, #0
    2348:	dba4      	blt.n	2294 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    234a:	095b      	lsrs	r3, r3, #5
    234c:	f000 001f 	and.w	r0, r0, #31
    2350:	2201      	movs	r2, #1
    2352:	fa02 f000 	lsl.w	r0, r2, r0
    2356:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    235a:	e79b      	b.n	2294 <_adc_async_init+0x28>
		_adc0_dev = dev;
    235c:	4b07      	ldr	r3, [pc, #28]	; (237c <_adc_async_init+0x110>)
    235e:	601d      	str	r5, [r3, #0]
    2360:	e7a4      	b.n	22ac <_adc_async_init+0x40>
    2362:	bf00      	nop
    2364:	000074fc 	.word	0x000074fc
    2368:	00001edd 	.word	0x00001edd
    236c:	00002239 	.word	0x00002239
    2370:	000020b9 	.word	0x000020b9
    2374:	43001c00 	.word	0x43001c00
    2378:	43002000 	.word	0x43002000
    237c:	2000061c 	.word	0x2000061c
    2380:	000020a1 	.word	0x000020a1
    2384:	e000e100 	.word	0xe000e100

00002388 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2388:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    238a:	8813      	ldrh	r3, [r2, #0]
    238c:	b29b      	uxth	r3, r3
    238e:	f043 0302 	orr.w	r3, r3, #2
    2392:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2394:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2396:	f013 0f03 	tst.w	r3, #3
    239a:	d1fb      	bne.n	2394 <_adc_async_enable_channel+0xc>
}
    239c:	4770      	bx	lr

0000239e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    239e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    23a0:	88db      	ldrh	r3, [r3, #6]
    23a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    23a6:	2b03      	cmp	r3, #3
}
    23a8:	bf0c      	ite	eq
    23aa:	2001      	moveq	r0, #1
    23ac:	2002      	movne	r0, #2
    23ae:	4770      	bx	lr

000023b0 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    23b0:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    23b2:	7d13      	ldrb	r3, [r2, #20]
    23b4:	f043 0302 	orr.w	r3, r3, #2
    23b8:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    23bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    23c0:	2b00      	cmp	r3, #0
    23c2:	d1fa      	bne.n	23ba <_adc_async_convert+0xa>
}
    23c4:	4770      	bx	lr

000023c6 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    23c6:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    23c8:	2a01      	cmp	r2, #1
    23ca:	d007      	beq.n	23dc <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    23cc:	2a02      	cmp	r2, #2
    23ce:	d00e      	beq.n	23ee <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    23d0:	b91a      	cbnz	r2, 23da <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    23d2:	b1ab      	cbz	r3, 2400 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    23d4:	2301      	movs	r3, #1
    23d6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    23da:	4770      	bx	lr
	if (value == 0x0) {
    23dc:	b91b      	cbnz	r3, 23e6 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    23de:	2304      	movs	r3, #4
    23e0:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    23e4:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    23e6:	2304      	movs	r3, #4
    23e8:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    23ec:	4770      	bx	lr
	if (value == 0x0) {
    23ee:	b91b      	cbnz	r3, 23f8 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    23f0:	2302      	movs	r3, #2
    23f2:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    23f6:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    23f8:	2302      	movs	r3, #2
    23fa:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    23fe:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    2400:	2301      	movs	r3, #1
    2402:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    2406:	4770      	bx	lr

00002408 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    2408:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    240a:	4b02      	ldr	r3, [pc, #8]	; (2414 <ADC0_0_Handler+0xc>)
    240c:	6818      	ldr	r0, [r3, #0]
    240e:	4b02      	ldr	r3, [pc, #8]	; (2418 <ADC0_0_Handler+0x10>)
    2410:	4798      	blx	r3
    2412:	bd08      	pop	{r3, pc}
    2414:	2000061c 	.word	0x2000061c
    2418:	000021e5 	.word	0x000021e5

0000241c <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    241c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    241e:	4b02      	ldr	r3, [pc, #8]	; (2428 <ADC0_1_Handler+0xc>)
    2420:	6818      	ldr	r0, [r3, #0]
    2422:	4b02      	ldr	r3, [pc, #8]	; (242c <ADC0_1_Handler+0x10>)
    2424:	4798      	blx	r3
    2426:	bd08      	pop	{r3, pc}
    2428:	2000061c 	.word	0x2000061c
    242c:	000021e5 	.word	0x000021e5

00002430 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2430:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2432:	4b02      	ldr	r3, [pc, #8]	; (243c <ADC1_0_Handler+0xc>)
    2434:	6858      	ldr	r0, [r3, #4]
    2436:	4b02      	ldr	r3, [pc, #8]	; (2440 <ADC1_0_Handler+0x10>)
    2438:	4798      	blx	r3
    243a:	bd08      	pop	{r3, pc}
    243c:	2000061c 	.word	0x2000061c
    2440:	000021e5 	.word	0x000021e5

00002444 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    2444:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2446:	4b02      	ldr	r3, [pc, #8]	; (2450 <ADC1_1_Handler+0xc>)
    2448:	6858      	ldr	r0, [r3, #4]
    244a:	4b02      	ldr	r3, [pc, #8]	; (2454 <ADC1_1_Handler+0x10>)
    244c:	4798      	blx	r3
    244e:	bd08      	pop	{r3, pc}
    2450:	2000061c 	.word	0x2000061c
    2454:	000021e5 	.word	0x000021e5

00002458 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    2458:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    245c:	00c0      	lsls	r0, r0, #3
    245e:	4770      	bx	lr

00002460 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2460:	4b01      	ldr	r3, [pc, #4]	; (2468 <_get_cycles_for_ms+0x8>)
    2462:	fb03 f000 	mul.w	r0, r3, r0
    2466:	4770      	bx	lr
    2468:	0001d4c0 	.word	0x0001d4c0

0000246c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    246c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    246e:	4a0e      	ldr	r2, [pc, #56]	; (24a8 <_init_chip+0x3c>)
    2470:	8813      	ldrh	r3, [r2, #0]
    2472:	b29b      	uxth	r3, r3
    2474:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    2478:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    247a:	4b0c      	ldr	r3, [pc, #48]	; (24ac <_init_chip+0x40>)
    247c:	4798      	blx	r3
	_oscctrl_init_sources();
    247e:	4b0c      	ldr	r3, [pc, #48]	; (24b0 <_init_chip+0x44>)
    2480:	4798      	blx	r3
	_mclk_init();
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <_init_chip+0x48>)
    2484:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2486:	2008      	movs	r0, #8
    2488:	4c0b      	ldr	r4, [pc, #44]	; (24b8 <_init_chip+0x4c>)
    248a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <_init_chip+0x50>)
    248e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2490:	f640 70f7 	movw	r0, #4087	; 0xff7
    2494:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2496:	4a0a      	ldr	r2, [pc, #40]	; (24c0 <_init_chip+0x54>)
    2498:	6913      	ldr	r3, [r2, #16]
    249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    249e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    24a0:	4b08      	ldr	r3, [pc, #32]	; (24c4 <_init_chip+0x58>)
    24a2:	4798      	blx	r3
    24a4:	bd10      	pop	{r4, pc}
    24a6:	bf00      	nop
    24a8:	41004000 	.word	0x41004000
    24ac:	000028e9 	.word	0x000028e9
    24b0:	00002909 	.word	0x00002909
    24b4:	00002811 	.word	0x00002811
    24b8:	00002799 	.word	0x00002799
    24bc:	0000290d 	.word	0x0000290d
    24c0:	40000800 	.word	0x40000800
    24c4:	0000253d 	.word	0x0000253d

000024c8 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    24c8:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    24ca:	4a1a      	ldr	r2, [pc, #104]	; (2534 <_dmac_handler+0x6c>)
    24cc:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    24ce:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    24d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    24d6:	4818      	ldr	r0, [pc, #96]	; (2538 <_dmac_handler+0x70>)
    24d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    24dc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    24e0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    24e4:	f012 0f01 	tst.w	r2, #1
    24e8:	d10a      	bne.n	2500 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    24ea:	011a      	lsls	r2, r3, #4
    24ec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    24f0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    24f4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    24f8:	f012 0f02 	tst.w	r2, #2
    24fc:	d10b      	bne.n	2516 <_dmac_handler+0x4e>
    24fe:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2500:	011a      	lsls	r2, r3, #4
    2502:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2506:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    250a:	2101      	movs	r1, #1
    250c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2510:	6843      	ldr	r3, [r0, #4]
    2512:	4798      	blx	r3
    2514:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2516:	011a      	lsls	r2, r3, #4
    2518:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    251c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2520:	2102      	movs	r1, #2
    2522:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2526:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    252a:	4a03      	ldr	r2, [pc, #12]	; (2538 <_dmac_handler+0x70>)
    252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2530:	4798      	blx	r3
	}
}
    2532:	e7e4      	b.n	24fe <_dmac_handler+0x36>
    2534:	4100a000 	.word	0x4100a000
    2538:	20000624 	.word	0x20000624

0000253c <_dma_init>:
{
    253c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    253e:	4a31      	ldr	r2, [pc, #196]	; (2604 <_dma_init+0xc8>)
    2540:	8813      	ldrh	r3, [r2, #0]
    2542:	f023 0302 	bic.w	r3, r3, #2
    2546:	041b      	lsls	r3, r3, #16
    2548:	0c1b      	lsrs	r3, r3, #16
    254a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    254c:	8853      	ldrh	r3, [r2, #2]
    254e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2552:	041b      	lsls	r3, r3, #16
    2554:	0c1b      	lsrs	r3, r3, #16
    2556:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2558:	8813      	ldrh	r3, [r2, #0]
    255a:	b29b      	uxth	r3, r3
    255c:	f043 0301 	orr.w	r3, r3, #1
    2560:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2562:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2564:	f013 0f01 	tst.w	r3, #1
    2568:	d1fb      	bne.n	2562 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    256a:	4b26      	ldr	r3, [pc, #152]	; (2604 <_dma_init+0xc8>)
    256c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2570:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2572:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2578:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    257a:	2100      	movs	r1, #0
    257c:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    257e:	4a22      	ldr	r2, [pc, #136]	; (2608 <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2580:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2582:	4a22      	ldr	r2, [pc, #136]	; (260c <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    2584:	639a      	str	r2, [r3, #56]	; 0x38
    2586:	4b22      	ldr	r3, [pc, #136]	; (2610 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2588:	4c1f      	ldr	r4, [pc, #124]	; (2608 <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    258a:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    258c:	681d      	ldr	r5, [r3, #0]
    258e:	0108      	lsls	r0, r1, #4
    2590:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    2594:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2598:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    259a:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    259c:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    25a0:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    25a2:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    25a6:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    25a8:	1822      	adds	r2, r4, r0
    25aa:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    25ac:	60d6      	str	r6, [r2, #12]
    25ae:	3101      	adds	r1, #1
    25b0:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    25b2:	2920      	cmp	r1, #32
    25b4:	d1ea      	bne.n	258c <_dma_init+0x50>
    25b6:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25b8:	2001      	movs	r0, #1
    25ba:	4916      	ldr	r1, [pc, #88]	; (2614 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    25bc:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    25be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    25c2:	d00b      	beq.n	25dc <_dma_init+0xa0>
    25c4:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    25c6:	2b24      	cmp	r3, #36	; 0x24
    25c8:	d1f8      	bne.n	25bc <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    25ca:	4a0e      	ldr	r2, [pc, #56]	; (2604 <_dma_init+0xc8>)
    25cc:	8813      	ldrh	r3, [r2, #0]
    25ce:	b29b      	uxth	r3, r3
    25d0:	f043 0302 	orr.w	r3, r3, #2
    25d4:	8013      	strh	r3, [r2, #0]
}
    25d6:	2000      	movs	r0, #0
    25d8:	bc70      	pop	{r4, r5, r6}
    25da:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25dc:	095c      	lsrs	r4, r3, #5
    25de:	f002 021f 	and.w	r2, r2, #31
    25e2:	fa00 f202 	lsl.w	r2, r0, r2
    25e6:	f104 0520 	add.w	r5, r4, #32
    25ea:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25f2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f6:	f104 0560 	add.w	r5, r4, #96	; 0x60
    25fa:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25fe:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2602:	e7df      	b.n	25c4 <_dma_init+0x88>
    2604:	4100a000 	.word	0x4100a000
    2608:	20001380 	.word	0x20001380
    260c:	20001580 	.word	0x20001580
    2610:	00007514 	.word	0x00007514
    2614:	e000e100 	.word	0xe000e100

00002618 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2618:	b991      	cbnz	r1, 2640 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    261a:	b942      	cbnz	r2, 262e <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    261c:	0100      	lsls	r0, r0, #4
    261e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2622:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2626:	2302      	movs	r3, #2
    2628:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    262c:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    262e:	0100      	lsls	r0, r0, #4
    2630:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2634:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2638:	2302      	movs	r3, #2
    263a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    263e:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2640:	2901      	cmp	r1, #1
    2642:	d000      	beq.n	2646 <_dma_set_irq_state+0x2e>
    2644:	4770      	bx	lr
	if (value == 0x0) {
    2646:	b142      	cbz	r2, 265a <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2648:	0100      	lsls	r0, r0, #4
    264a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    264e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2652:	2301      	movs	r3, #1
    2654:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2658:	e7f4      	b.n	2644 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    265a:	0100      	lsls	r0, r0, #4
    265c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2660:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2664:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2668:	4770      	bx	lr
	...

0000266c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    266c:	4b02      	ldr	r3, [pc, #8]	; (2678 <_dma_set_destination_address+0xc>)
    266e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2672:	6081      	str	r1, [r0, #8]
}
    2674:	2000      	movs	r0, #0
    2676:	4770      	bx	lr
    2678:	20001380 	.word	0x20001380

0000267c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    267c:	4b02      	ldr	r3, [pc, #8]	; (2688 <_dma_set_source_address+0xc>)
    267e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2682:	6041      	str	r1, [r0, #4]
}
    2684:	2000      	movs	r0, #0
    2686:	4770      	bx	lr
    2688:	20001380 	.word	0x20001380

0000268c <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    268c:	4a05      	ldr	r2, [pc, #20]	; (26a4 <_dma_srcinc_enable+0x18>)
    268e:	0100      	lsls	r0, r0, #4
    2690:	5a13      	ldrh	r3, [r2, r0]
    2692:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2698:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    269c:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    269e:	5211      	strh	r1, [r2, r0]
}
    26a0:	2000      	movs	r0, #0
    26a2:	4770      	bx	lr
    26a4:	20001380 	.word	0x20001380

000026a8 <_dma_set_data_amount>:
{
    26a8:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    26aa:	4c14      	ldr	r4, [pc, #80]	; (26fc <_dma_set_data_amount+0x54>)
    26ac:	0102      	lsls	r2, r0, #4
    26ae:	18a3      	adds	r3, r4, r2
    26b0:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    26b2:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    26b4:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    26b8:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    26ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
    26be:	d006      	beq.n	26ce <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    26c0:	fa01 f403 	lsl.w	r4, r1, r3
    26c4:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    26c6:	4a0d      	ldr	r2, [pc, #52]	; (26fc <_dma_set_data_amount+0x54>)
    26c8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    26cc:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    26ce:	4c0b      	ldr	r4, [pc, #44]	; (26fc <_dma_set_data_amount+0x54>)
    26d0:	0102      	lsls	r2, r0, #4
    26d2:	18a5      	adds	r5, r4, r2
    26d4:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    26d6:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    26d8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    26dc:	d005      	beq.n	26ea <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    26de:	fa01 f303 	lsl.w	r3, r1, r3
    26e2:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    26e4:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    26e8:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    26ea:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    26ec:	4b03      	ldr	r3, [pc, #12]	; (26fc <_dma_set_data_amount+0x54>)
    26ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    26f2:	8041      	strh	r1, [r0, #2]
}
    26f4:	2000      	movs	r0, #0
    26f6:	bc30      	pop	{r4, r5}
    26f8:	4770      	bx	lr
    26fa:	bf00      	nop
    26fc:	20001380 	.word	0x20001380

00002700 <_dma_enable_transaction>:
{
    2700:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2702:	4c0d      	ldr	r4, [pc, #52]	; (2738 <_dma_enable_transaction+0x38>)
    2704:	0103      	lsls	r3, r0, #4
    2706:	5ae2      	ldrh	r2, [r4, r3]
    2708:	b292      	uxth	r2, r2
    270a:	f042 0201 	orr.w	r2, r2, #1
    270e:	52e2      	strh	r2, [r4, r3]
    2710:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2714:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    271a:	f042 0202 	orr.w	r2, r2, #2
    271e:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2720:	b131      	cbz	r1, 2730 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2722:	4a06      	ldr	r2, [pc, #24]	; (273c <_dma_enable_transaction+0x3c>)
    2724:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2726:	2301      	movs	r3, #1
    2728:	fa03 f000 	lsl.w	r0, r3, r0
    272c:	4308      	orrs	r0, r1
    272e:	6110      	str	r0, [r2, #16]
}
    2730:	2000      	movs	r0, #0
    2732:	f85d 4b04 	ldr.w	r4, [sp], #4
    2736:	4770      	bx	lr
    2738:	20001380 	.word	0x20001380
    273c:	4100a000 	.word	0x4100a000

00002740 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2740:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2744:	4b02      	ldr	r3, [pc, #8]	; (2750 <_dma_get_channel_resource+0x10>)
    2746:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    274a:	6001      	str	r1, [r0, #0]
}
    274c:	2000      	movs	r0, #0
    274e:	4770      	bx	lr
    2750:	20000624 	.word	0x20000624

00002754 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2754:	b508      	push	{r3, lr}
	_dmac_handler();
    2756:	4b01      	ldr	r3, [pc, #4]	; (275c <DMAC_0_Handler+0x8>)
    2758:	4798      	blx	r3
    275a:	bd08      	pop	{r3, pc}
    275c:	000024c9 	.word	0x000024c9

00002760 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2760:	b508      	push	{r3, lr}
	_dmac_handler();
    2762:	4b01      	ldr	r3, [pc, #4]	; (2768 <DMAC_1_Handler+0x8>)
    2764:	4798      	blx	r3
    2766:	bd08      	pop	{r3, pc}
    2768:	000024c9 	.word	0x000024c9

0000276c <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    276c:	b508      	push	{r3, lr}
	_dmac_handler();
    276e:	4b01      	ldr	r3, [pc, #4]	; (2774 <DMAC_2_Handler+0x8>)
    2770:	4798      	blx	r3
    2772:	bd08      	pop	{r3, pc}
    2774:	000024c9 	.word	0x000024c9

00002778 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2778:	b508      	push	{r3, lr}
	_dmac_handler();
    277a:	4b01      	ldr	r3, [pc, #4]	; (2780 <DMAC_3_Handler+0x8>)
    277c:	4798      	blx	r3
    277e:	bd08      	pop	{r3, pc}
    2780:	000024c9 	.word	0x000024c9

00002784 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2784:	b508      	push	{r3, lr}
	_dmac_handler();
    2786:	4b01      	ldr	r3, [pc, #4]	; (278c <DMAC_4_Handler+0x8>)
    2788:	4798      	blx	r3
    278a:	bd08      	pop	{r3, pc}
    278c:	000024c9 	.word	0x000024c9

00002790 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2790:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2792:	2000      	movs	r0, #0
    2794:	4770      	bx	lr
	...

00002798 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2798:	f010 0f01 	tst.w	r0, #1
    279c:	d008      	beq.n	27b0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    279e:	4a17      	ldr	r2, [pc, #92]	; (27fc <_gclk_init_generators_by_fref+0x64>)
    27a0:	4b17      	ldr	r3, [pc, #92]	; (2800 <_gclk_init_generators_by_fref+0x68>)
    27a2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    27a4:	4619      	mov	r1, r3
    27a6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    27aa:	684b      	ldr	r3, [r1, #4]
    27ac:	4213      	tst	r3, r2
    27ae:	d1fc      	bne.n	27aa <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    27b0:	f010 0f02 	tst.w	r0, #2
    27b4:	d008      	beq.n	27c8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    27b6:	4a13      	ldr	r2, [pc, #76]	; (2804 <_gclk_init_generators_by_fref+0x6c>)
    27b8:	4b11      	ldr	r3, [pc, #68]	; (2800 <_gclk_init_generators_by_fref+0x68>)
    27ba:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    27bc:	4619      	mov	r1, r3
    27be:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    27c2:	684b      	ldr	r3, [r1, #4]
    27c4:	4213      	tst	r3, r2
    27c6:	d1fc      	bne.n	27c2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    27c8:	f010 0f04 	tst.w	r0, #4
    27cc:	d008      	beq.n	27e0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    27ce:	4a0e      	ldr	r2, [pc, #56]	; (2808 <_gclk_init_generators_by_fref+0x70>)
    27d0:	4b0b      	ldr	r3, [pc, #44]	; (2800 <_gclk_init_generators_by_fref+0x68>)
    27d2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    27d4:	4619      	mov	r1, r3
    27d6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    27da:	684b      	ldr	r3, [r1, #4]
    27dc:	4213      	tst	r3, r2
    27de:	d1fc      	bne.n	27da <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    27e0:	f010 0f08 	tst.w	r0, #8
    27e4:	d008      	beq.n	27f8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    27e6:	4a09      	ldr	r2, [pc, #36]	; (280c <_gclk_init_generators_by_fref+0x74>)
    27e8:	4b05      	ldr	r3, [pc, #20]	; (2800 <_gclk_init_generators_by_fref+0x68>)
    27ea:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    27ec:	4619      	mov	r1, r3
    27ee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    27f2:	684b      	ldr	r3, [r1, #4]
    27f4:	4213      	tst	r3, r2
    27f6:	d1fc      	bne.n	27f2 <_gclk_init_generators_by_fref+0x5a>
    27f8:	4770      	bx	lr
    27fa:	bf00      	nop
    27fc:	00010107 	.word	0x00010107
    2800:	40001c00 	.word	0x40001c00
    2804:	00010106 	.word	0x00010106
    2808:	00100106 	.word	0x00100106
    280c:	00010105 	.word	0x00010105

00002810 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2810:	2201      	movs	r2, #1
    2812:	4b01      	ldr	r3, [pc, #4]	; (2818 <_mclk_init+0x8>)
    2814:	715a      	strb	r2, [r3, #5]
    2816:	4770      	bx	lr
    2818:	40000800 	.word	0x40000800

0000281c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    281c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    281e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2820:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2822:	f012 0f01 	tst.w	r2, #1
    2826:	d005      	beq.n	2834 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2828:	2201      	movs	r2, #1
    282a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    282c:	6803      	ldr	r3, [r0, #0]
    282e:	b153      	cbz	r3, 2846 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2830:	4798      	blx	r3
    2832:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2834:	8a1a      	ldrh	r2, [r3, #16]
    2836:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2838:	b12a      	cbz	r2, 2846 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    283a:	f240 225e 	movw	r2, #606	; 0x25e
    283e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2840:	6843      	ldr	r3, [r0, #4]
    2842:	b103      	cbz	r3, 2846 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2844:	4798      	blx	r3
    2846:	bd08      	pop	{r3, pc}

00002848 <_flash_init>:
{
    2848:	b538      	push	{r3, r4, r5, lr}
    284a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    284c:	4605      	mov	r5, r0
    284e:	b350      	cbz	r0, 28a6 <_flash_init+0x5e>
    2850:	4816      	ldr	r0, [pc, #88]	; (28ac <_flash_init+0x64>)
    2852:	4281      	cmp	r1, r0
    2854:	bf14      	ite	ne
    2856:	2000      	movne	r0, #0
    2858:	2001      	moveq	r0, #1
    285a:	224b      	movs	r2, #75	; 0x4b
    285c:	4914      	ldr	r1, [pc, #80]	; (28b0 <_flash_init+0x68>)
    285e:	4b15      	ldr	r3, [pc, #84]	; (28b4 <_flash_init+0x6c>)
    2860:	4798      	blx	r3
	device->hw = hw;
    2862:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2864:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2866:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    286a:	049b      	lsls	r3, r3, #18
    286c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    286e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2870:	4b11      	ldr	r3, [pc, #68]	; (28b8 <_flash_init+0x70>)
    2872:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2874:	4b11      	ldr	r3, [pc, #68]	; (28bc <_flash_init+0x74>)
    2876:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    287a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    287e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2882:	f3bf 8f6f 	isb	sy
    2886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    288a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    288e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2892:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2896:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    289a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    289e:	6019      	str	r1, [r3, #0]
    28a0:	601a      	str	r2, [r3, #0]
}
    28a2:	2000      	movs	r0, #0
    28a4:	bd38      	pop	{r3, r4, r5, pc}
    28a6:	2000      	movs	r0, #0
    28a8:	e7d7      	b.n	285a <_flash_init+0x12>
    28aa:	bf00      	nop
    28ac:	41004000 	.word	0x41004000
    28b0:	00007614 	.word	0x00007614
    28b4:	00001edd 	.word	0x00001edd
    28b8:	200007a4 	.word	0x200007a4
    28bc:	e000e100 	.word	0xe000e100

000028c0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    28c0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    28c2:	4b02      	ldr	r3, [pc, #8]	; (28cc <NVMCTRL_0_Handler+0xc>)
    28c4:	6818      	ldr	r0, [r3, #0]
    28c6:	4b02      	ldr	r3, [pc, #8]	; (28d0 <NVMCTRL_0_Handler+0x10>)
    28c8:	4798      	blx	r3
    28ca:	bd08      	pop	{r3, pc}
    28cc:	200007a4 	.word	0x200007a4
    28d0:	0000281d 	.word	0x0000281d

000028d4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    28d4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    28d6:	4b02      	ldr	r3, [pc, #8]	; (28e0 <NVMCTRL_1_Handler+0xc>)
    28d8:	6818      	ldr	r0, [r3, #0]
    28da:	4b02      	ldr	r3, [pc, #8]	; (28e4 <NVMCTRL_1_Handler+0x10>)
    28dc:	4798      	blx	r3
    28de:	bd08      	pop	{r3, pc}
    28e0:	200007a4 	.word	0x200007a4
    28e4:	0000281d 	.word	0x0000281d

000028e8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    28e8:	4b06      	ldr	r3, [pc, #24]	; (2904 <_osc32kctrl_init_sources+0x1c>)
    28ea:	f242 328e 	movw	r2, #9102	; 0x238e
    28ee:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    28f0:	2200      	movs	r2, #0
    28f2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    28f4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    28f6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    28f8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    28fc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    28fe:	2201      	movs	r2, #1
    2900:	741a      	strb	r2, [r3, #16]
    2902:	4770      	bx	lr
    2904:	40001400 	.word	0x40001400

00002908 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2908:	4770      	bx	lr
	...

0000290c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    290c:	4a44      	ldr	r2, [pc, #272]	; (2a20 <_oscctrl_init_referenced_generators+0x114>)
    290e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2910:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2914:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2918:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    291a:	4611      	mov	r1, r2
    291c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2920:	684b      	ldr	r3, [r1, #4]
    2922:	4213      	tst	r3, r2
    2924:	d1fc      	bne.n	2920 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2926:	4a3e      	ldr	r2, [pc, #248]	; (2a20 <_oscctrl_init_referenced_generators+0x114>)
    2928:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    292a:	f013 0f04 	tst.w	r3, #4
    292e:	d1fb      	bne.n	2928 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2930:	4b3c      	ldr	r3, [pc, #240]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    2932:	2200      	movs	r2, #0
    2934:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2936:	4a3c      	ldr	r2, [pc, #240]	; (2a28 <_oscctrl_init_referenced_generators+0x11c>)
    2938:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    293a:	461a      	mov	r2, r3
    293c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2940:	f013 0f10 	tst.w	r3, #16
    2944:	d1fa      	bne.n	293c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2946:	2200      	movs	r2, #0
    2948:	4b36      	ldr	r3, [pc, #216]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    294a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    294e:	461a      	mov	r2, r3
    2950:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2954:	f013 0f04 	tst.w	r3, #4
    2958:	d1fa      	bne.n	2950 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    295a:	2202      	movs	r2, #2
    295c:	4b31      	ldr	r3, [pc, #196]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    295e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2960:	461a      	mov	r2, r3
    2962:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2966:	f013 0f02 	tst.w	r3, #2
    296a:	d1fa      	bne.n	2962 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    296c:	4b2d      	ldr	r3, [pc, #180]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    296e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2970:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2972:	461a      	mov	r2, r3
    2974:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2978:	f013 0f08 	tst.w	r3, #8
    297c:	d1fa      	bne.n	2974 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    297e:	2280      	movs	r2, #128	; 0x80
    2980:	4b28      	ldr	r3, [pc, #160]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    2982:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2986:	461a      	mov	r2, r3
    2988:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    298c:	f013 0f04 	tst.w	r3, #4
    2990:	d1fa      	bne.n	2988 <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2992:	4a26      	ldr	r2, [pc, #152]	; (2a2c <_oscctrl_init_referenced_generators+0x120>)
    2994:	4b23      	ldr	r3, [pc, #140]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    2996:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2998:	461a      	mov	r2, r3
    299a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    299c:	f013 0f06 	tst.w	r3, #6
    29a0:	d1fb      	bne.n	299a <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    29a2:	4b20      	ldr	r3, [pc, #128]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    29a4:	f44f 6202 	mov.w	r2, #2080	; 0x820
    29a8:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    29aa:	2202      	movs	r2, #2
    29ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    29b0:	461a      	mov	r2, r3
    29b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    29b4:	f013 0f02 	tst.w	r3, #2
    29b8:	d1fb      	bne.n	29b2 <_oscctrl_init_referenced_generators+0xa6>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    29ba:	4b1a      	ldr	r3, [pc, #104]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    29bc:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    29c0:	f013 0f01 	tst.w	r3, #1
    29c4:	d026      	beq.n	2a14 <_oscctrl_init_referenced_generators+0x108>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    29c6:	4a17      	ldr	r2, [pc, #92]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    29c8:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    29ca:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    29ce:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    29d2:	d1f9      	bne.n	29c8 <_oscctrl_init_referenced_generators+0xbc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    29d4:	4b13      	ldr	r3, [pc, #76]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    29d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    29d8:	f012 0f01 	tst.w	r2, #1
    29dc:	d103      	bne.n	29e6 <_oscctrl_init_referenced_generators+0xda>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    29de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    29e0:	f012 0f02 	tst.w	r2, #2
    29e4:	d0f7      	beq.n	29d6 <_oscctrl_init_referenced_generators+0xca>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    29e6:	4a0e      	ldr	r2, [pc, #56]	; (2a20 <_oscctrl_init_referenced_generators+0x114>)
    29e8:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    29ea:	2b00      	cmp	r3, #0
    29ec:	d1fc      	bne.n	29e8 <_oscctrl_init_referenced_generators+0xdc>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    29ee:	4a0c      	ldr	r2, [pc, #48]	; (2a20 <_oscctrl_init_referenced_generators+0x114>)
    29f0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    29f2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    29f6:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    29fa:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    29fc:	4611      	mov	r1, r2
    29fe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2a02:	684b      	ldr	r3, [r1, #4]
    2a04:	4213      	tst	r3, r2
    2a06:	d1fc      	bne.n	2a02 <_oscctrl_init_referenced_generators+0xf6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2a08:	4a05      	ldr	r2, [pc, #20]	; (2a20 <_oscctrl_init_referenced_generators+0x114>)
    2a0a:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2a0c:	f013 0f04 	tst.w	r3, #4
    2a10:	d1fb      	bne.n	2a0a <_oscctrl_init_referenced_generators+0xfe>
		;
#endif
	(void)hw;
}
    2a12:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2a14:	4a03      	ldr	r2, [pc, #12]	; (2a24 <_oscctrl_init_referenced_generators+0x118>)
    2a16:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2a18:	f413 7f80 	tst.w	r3, #256	; 0x100
    2a1c:	d0fb      	beq.n	2a16 <_oscctrl_init_referenced_generators+0x10a>
    2a1e:	e7d9      	b.n	29d4 <_oscctrl_init_referenced_generators+0xc8>
    2a20:	40001c00 	.word	0x40001c00
    2a24:	40001000 	.word	0x40001000
    2a28:	04010000 	.word	0x04010000
    2a2c:	000d0e4e 	.word	0x000d0e4e

00002a30 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2a30:	b500      	push	{lr}
    2a32:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2a34:	4b0d      	ldr	r3, [pc, #52]	; (2a6c <RAMECC_Handler+0x3c>)
    2a36:	789b      	ldrb	r3, [r3, #2]
    2a38:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2a3a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2a3c:	9b01      	ldr	r3, [sp, #4]
    2a3e:	f013 0f02 	tst.w	r3, #2
    2a42:	d006      	beq.n	2a52 <RAMECC_Handler+0x22>
    2a44:	4b0a      	ldr	r3, [pc, #40]	; (2a70 <RAMECC_Handler+0x40>)
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	b11b      	cbz	r3, 2a52 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2a4a:	4a08      	ldr	r2, [pc, #32]	; (2a6c <RAMECC_Handler+0x3c>)
    2a4c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2a4e:	4798      	blx	r3
    2a50:	e009      	b.n	2a66 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2a52:	9b01      	ldr	r3, [sp, #4]
    2a54:	f013 0f01 	tst.w	r3, #1
    2a58:	d005      	beq.n	2a66 <RAMECC_Handler+0x36>
    2a5a:	4b05      	ldr	r3, [pc, #20]	; (2a70 <RAMECC_Handler+0x40>)
    2a5c:	685b      	ldr	r3, [r3, #4]
    2a5e:	b113      	cbz	r3, 2a66 <RAMECC_Handler+0x36>
    2a60:	4a02      	ldr	r2, [pc, #8]	; (2a6c <RAMECC_Handler+0x3c>)
    2a62:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2a64:	4798      	blx	r3
	} else {
		return;
	}
}
    2a66:	b003      	add	sp, #12
    2a68:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6c:	41020000 	.word	0x41020000
    2a70:	20001780 	.word	0x20001780

00002a74 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    2a74:	b538      	push	{r3, r4, r5, lr}
    2a76:	460c      	mov	r4, r1
	ASSERT(dev);
    2a78:	4605      	mov	r5, r0
    2a7a:	2230      	movs	r2, #48	; 0x30
    2a7c:	4914      	ldr	r1, [pc, #80]	; (2ad0 <_timer_init+0x5c>)
    2a7e:	3000      	adds	r0, #0
    2a80:	bf18      	it	ne
    2a82:	2001      	movne	r0, #1
    2a84:	4b13      	ldr	r3, [pc, #76]	; (2ad4 <_timer_init+0x60>)
    2a86:	4798      	blx	r3

	dev->hw = hw;
    2a88:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2a8a:	2301      	movs	r3, #1
    2a8c:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2a8e:	f248 0203 	movw	r2, #32771	; 0x8003
    2a92:	6923      	ldr	r3, [r4, #16]
    2a94:	4213      	tst	r3, r2
    2a96:	d1fc      	bne.n	2a92 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2a98:	68eb      	ldr	r3, [r5, #12]
    2a9a:	691a      	ldr	r2, [r3, #16]
    2a9c:	f012 0f01 	tst.w	r2, #1
    2aa0:	d1fb      	bne.n	2a9a <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2aa2:	f248 0280 	movw	r2, #32896	; 0x8080
    2aa6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2aa8:	f248 0103 	movw	r1, #32771	; 0x8003
    2aac:	691a      	ldr	r2, [r3, #16]
    2aae:	420a      	tst	r2, r1
    2ab0:	d1fc      	bne.n	2aac <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2ab2:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2ab4:	2301      	movs	r3, #1
    2ab6:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ab8:	6913      	ldr	r3, [r2, #16]
    2aba:	f013 0f60 	tst.w	r3, #96	; 0x60
    2abe:	d1fb      	bne.n	2ab8 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2ac0:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
    2ac6:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    2ac8:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <_timer_init+0x64>)
    2aca:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    2acc:	2000      	movs	r0, #0
    2ace:	bd38      	pop	{r3, r4, r5, pc}
    2ad0:	00007634 	.word	0x00007634
    2ad4:	00001edd 	.word	0x00001edd
    2ad8:	200007a8 	.word	0x200007a8

00002adc <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    2adc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2ade:	4604      	mov	r4, r0
    2ae0:	b310      	cbz	r0, 2b28 <_timer_start+0x4c>
    2ae2:	68c0      	ldr	r0, [r0, #12]
    2ae4:	3000      	adds	r0, #0
    2ae6:	bf18      	it	ne
    2ae8:	2001      	movne	r0, #1
    2aea:	225e      	movs	r2, #94	; 0x5e
    2aec:	490f      	ldr	r1, [pc, #60]	; (2b2c <_timer_start+0x50>)
    2aee:	4b10      	ldr	r3, [pc, #64]	; (2b30 <_timer_start+0x54>)
    2af0:	4798      	blx	r3
    2af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2af6:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <_timer_start+0x58>)
    2af8:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    2afa:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    2afc:	2300      	movs	r3, #0
    2afe:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b00:	6913      	ldr	r3, [r2, #16]
    2b02:	f013 0f08 	tst.w	r3, #8
    2b06:	d1fb      	bne.n	2b00 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    2b08:	68e3      	ldr	r3, [r4, #12]
    2b0a:	691a      	ldr	r2, [r3, #16]
    2b0c:	f012 0f08 	tst.w	r2, #8
    2b10:	d1fb      	bne.n	2b0a <_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2b12:	881a      	ldrh	r2, [r3, #0]
    2b14:	b292      	uxth	r2, r2
    2b16:	f042 0202 	orr.w	r2, r2, #2
    2b1a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b1c:	f248 0103 	movw	r1, #32771	; 0x8003
    2b20:	691a      	ldr	r2, [r3, #16]
    2b22:	420a      	tst	r2, r1
    2b24:	d1fc      	bne.n	2b20 <_timer_start+0x44>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    2b26:	bd10      	pop	{r4, pc}
    2b28:	2000      	movs	r0, #0
    2b2a:	e7de      	b.n	2aea <_timer_start+0xe>
    2b2c:	00007634 	.word	0x00007634
    2b30:	00001edd 	.word	0x00001edd
    2b34:	e000e100 	.word	0xe000e100

00002b38 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    2b38:	68c2      	ldr	r2, [r0, #12]
    2b3a:	f248 0103 	movw	r1, #32771	; 0x8003
    2b3e:	6913      	ldr	r3, [r2, #16]
    2b40:	420b      	tst	r3, r1
    2b42:	d1fc      	bne.n	2b3e <_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2b44:	8810      	ldrh	r0, [r2, #0]
}
    2b46:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2b4a:	4770      	bx	lr

00002b4c <_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
    2b4c:	4770      	bx	lr

00002b4e <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    2b4e:	2000      	movs	r0, #0
    2b50:	4770      	bx	lr
	...

00002b54 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2b54:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2b56:	4b08      	ldr	r3, [pc, #32]	; (2b78 <RTC_Handler+0x24>)
    2b58:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2b5a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2b5c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2b5e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2b62:	d007      	beq.n	2b74 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2b64:	6823      	ldr	r3, [r4, #0]
    2b66:	b10b      	cbz	r3, 2b6c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2b68:	4620      	mov	r0, r4
    2b6a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2b6c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b72:	819a      	strh	r2, [r3, #12]
    2b74:	bd10      	pop	{r4, pc}
    2b76:	bf00      	nop
    2b78:	200007a8 	.word	0x200007a8

00002b7c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2b7c:	b470      	push	{r4, r5, r6}
    2b7e:	b089      	sub	sp, #36	; 0x24
    2b80:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2b82:	466c      	mov	r4, sp
    2b84:	4d0d      	ldr	r5, [pc, #52]	; (2bbc <_sercom_get_hardware_index+0x40>)
    2b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2b8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2b92:	9b00      	ldr	r3, [sp, #0]
    2b94:	42b3      	cmp	r3, r6
    2b96:	d00d      	beq.n	2bb4 <_sercom_get_hardware_index+0x38>
    2b98:	4631      	mov	r1, r6
    2b9a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b9c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2b9e:	f853 2b04 	ldr.w	r2, [r3], #4
    2ba2:	428a      	cmp	r2, r1
    2ba4:	d007      	beq.n	2bb6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2ba6:	3001      	adds	r0, #1
    2ba8:	2808      	cmp	r0, #8
    2baa:	d1f8      	bne.n	2b9e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2bac:	2000      	movs	r0, #0
}
    2bae:	b009      	add	sp, #36	; 0x24
    2bb0:	bc70      	pop	{r4, r5, r6}
    2bb2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2bb4:	2000      	movs	r0, #0
			return i;
    2bb6:	b2c0      	uxtb	r0, r0
    2bb8:	e7f9      	b.n	2bae <_sercom_get_hardware_index+0x32>
    2bba:	bf00      	nop
    2bbc:	0000764c 	.word	0x0000764c

00002bc0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2bc0:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2bc2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2bc4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2bc6:	f013 0f01 	tst.w	r3, #1
    2bca:	d003      	beq.n	2bd4 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2bcc:	7da3      	ldrb	r3, [r4, #22]
    2bce:	f013 0f01 	tst.w	r3, #1
    2bd2:	d112      	bne.n	2bfa <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2bd4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2bd6:	f013 0f02 	tst.w	r3, #2
    2bda:	d003      	beq.n	2be4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2bdc:	7da3      	ldrb	r3, [r4, #22]
    2bde:	f013 0f02 	tst.w	r3, #2
    2be2:	d10f      	bne.n	2c04 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2be4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2be6:	f013 0f04 	tst.w	r3, #4
    2bea:	d015      	beq.n	2c18 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2bec:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2bee:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2bf2:	b163      	cbz	r3, 2c0e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2bf4:	23ff      	movs	r3, #255	; 0xff
    2bf6:	8363      	strh	r3, [r4, #26]
    2bf8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2bfa:	2301      	movs	r3, #1
    2bfc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2bfe:	6803      	ldr	r3, [r0, #0]
    2c00:	4798      	blx	r3
    2c02:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2c04:	2302      	movs	r3, #2
    2c06:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2c08:	6883      	ldr	r3, [r0, #8]
    2c0a:	4798      	blx	r3
    2c0c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    2c0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2c10:	6843      	ldr	r3, [r0, #4]
    2c12:	b2c9      	uxtb	r1, r1
    2c14:	4798      	blx	r3
    2c16:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2c18:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2c1a:	09db      	lsrs	r3, r3, #7
    2c1c:	d100      	bne.n	2c20 <_sercom_usart_interrupt_handler+0x60>
    2c1e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2c20:	2380      	movs	r3, #128	; 0x80
    2c22:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    2c24:	68c3      	ldr	r3, [r0, #12]
    2c26:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2c28:	8b63      	ldrh	r3, [r4, #26]
    2c2a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2c2c:	8363      	strh	r3, [r4, #26]
    2c2e:	e7f6      	b.n	2c1e <_sercom_usart_interrupt_handler+0x5e>

00002c30 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    2c30:	4b11      	ldr	r3, [pc, #68]	; (2c78 <_sercom_init_irq_param+0x48>)
    2c32:	4298      	cmp	r0, r3
    2c34:	d011      	beq.n	2c5a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    2c36:	4b11      	ldr	r3, [pc, #68]	; (2c7c <_sercom_init_irq_param+0x4c>)
    2c38:	4298      	cmp	r0, r3
    2c3a:	d011      	beq.n	2c60 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    2c3c:	4b10      	ldr	r3, [pc, #64]	; (2c80 <_sercom_init_irq_param+0x50>)
    2c3e:	4298      	cmp	r0, r3
    2c40:	d011      	beq.n	2c66 <_sercom_init_irq_param+0x36>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    2c42:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    2c46:	d011      	beq.n	2c6c <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    2c48:	4b0e      	ldr	r3, [pc, #56]	; (2c84 <_sercom_init_irq_param+0x54>)
    2c4a:	4298      	cmp	r0, r3
    2c4c:	d011      	beq.n	2c72 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    2c4e:	4b0e      	ldr	r3, [pc, #56]	; (2c88 <_sercom_init_irq_param+0x58>)
    2c50:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    2c52:	bf04      	itt	eq
    2c54:	4b0d      	ldreq	r3, [pc, #52]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c56:	6159      	streq	r1, [r3, #20]
    2c58:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    2c5a:	4b0c      	ldr	r3, [pc, #48]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c5c:	6019      	str	r1, [r3, #0]
    2c5e:	e7f0      	b.n	2c42 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    2c60:	4b0a      	ldr	r3, [pc, #40]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c62:	6059      	str	r1, [r3, #4]
    2c64:	e7f0      	b.n	2c48 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    2c66:	4b09      	ldr	r3, [pc, #36]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c68:	6099      	str	r1, [r3, #8]
    2c6a:	e7f0      	b.n	2c4e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    2c6c:	4b07      	ldr	r3, [pc, #28]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c6e:	60d9      	str	r1, [r3, #12]
    2c70:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    2c72:	4b06      	ldr	r3, [pc, #24]	; (2c8c <_sercom_init_irq_param+0x5c>)
    2c74:	6119      	str	r1, [r3, #16]
    2c76:	4770      	bx	lr
    2c78:	40003000 	.word	0x40003000
    2c7c:	40003400 	.word	0x40003400
    2c80:	41012000 	.word	0x41012000
    2c84:	43000400 	.word	0x43000400
    2c88:	43000800 	.word	0x43000800
    2c8c:	200007ac 	.word	0x200007ac

00002c90 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2c90:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2c92:	4b03      	ldr	r3, [pc, #12]	; (2ca0 <_sercom_get_irq_num+0x10>)
    2c94:	4798      	blx	r3
    2c96:	0080      	lsls	r0, r0, #2
    2c98:	302e      	adds	r0, #46	; 0x2e
}
    2c9a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2c9e:	bd08      	pop	{r3, pc}
    2ca0:	00002b7d 	.word	0x00002b7d

00002ca4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2ca4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2ca6:	f013 0f01 	tst.w	r3, #1
    2caa:	d109      	bne.n	2cc0 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2cac:	6803      	ldr	r3, [r0, #0]
    2cae:	f043 0302 	orr.w	r3, r3, #2
    2cb2:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2cb4:	69c3      	ldr	r3, [r0, #28]
    2cb6:	f013 0f03 	tst.w	r3, #3
    2cba:	d1fb      	bne.n	2cb4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2cbc:	2000      	movs	r0, #0
    2cbe:	4770      	bx	lr
		return ERR_BUSY;
    2cc0:	f06f 0003 	mvn.w	r0, #3
}
    2cc4:	4770      	bx	lr
	...

00002cc8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    2cc8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    2cca:	4b03      	ldr	r3, [pc, #12]	; (2cd8 <_spi_get_rx_dma_channel+0x10>)
    2ccc:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    2cce:	2807      	cmp	r0, #7
    2cd0:	bf8c      	ite	hi
    2cd2:	2000      	movhi	r0, #0
    2cd4:	2001      	movls	r0, #1
    2cd6:	bd08      	pop	{r3, pc}
    2cd8:	00002b7d 	.word	0x00002b7d

00002cdc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    2cdc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    2cde:	6883      	ldr	r3, [r0, #8]
    2ce0:	689b      	ldr	r3, [r3, #8]
    2ce2:	b103      	cbz	r3, 2ce6 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    2ce4:	4798      	blx	r3
    2ce6:	bd08      	pop	{r3, pc}

00002ce8 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    2ce8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    2cea:	6883      	ldr	r3, [r0, #8]
    2cec:	685b      	ldr	r3, [r3, #4]
    2cee:	b103      	cbz	r3, 2cf2 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    2cf0:	4798      	blx	r3
    2cf2:	bd08      	pop	{r3, pc}

00002cf4 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    2cf4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    2cf6:	6883      	ldr	r3, [r0, #8]
    2cf8:	68db      	ldr	r3, [r3, #12]
    2cfa:	b103      	cbz	r3, 2cfe <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    2cfc:	4798      	blx	r3
    2cfe:	bd08      	pop	{r3, pc}

00002d00 <_usart_init>:
{
    2d00:	b510      	push	{r4, lr}
    2d02:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2d04:	4b48      	ldr	r3, [pc, #288]	; (2e28 <_usart_init+0x128>)
    2d06:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2d08:	2800      	cmp	r0, #0
    2d0a:	d06a      	beq.n	2de2 <_usart_init+0xe2>
    2d0c:	2801      	cmp	r0, #1
    2d0e:	d062      	beq.n	2dd6 <_usart_init+0xd6>
    2d10:	2802      	cmp	r0, #2
    2d12:	d062      	beq.n	2dda <_usart_init+0xda>
    2d14:	2804      	cmp	r0, #4
    2d16:	d062      	beq.n	2dde <_usart_init+0xde>
    2d18:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2d1a:	bf08      	it	eq
    2d1c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    2d1e:	d006      	beq.n	2d2e <_usart_init+0x2e>
	ASSERT(false);
    2d20:	f240 2276 	movw	r2, #630	; 0x276
    2d24:	4941      	ldr	r1, [pc, #260]	; (2e2c <_usart_init+0x12c>)
    2d26:	2000      	movs	r0, #0
    2d28:	4b41      	ldr	r3, [pc, #260]	; (2e30 <_usart_init+0x130>)
    2d2a:	4798      	blx	r3
	return 0;
    2d2c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2d2e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2d30:	f013 0f01 	tst.w	r3, #1
    2d34:	d122      	bne.n	2d7c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2d36:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    2d3a:	4a3e      	ldr	r2, [pc, #248]	; (2e34 <_usart_init+0x134>)
    2d3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2d42:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2d46:	69e3      	ldr	r3, [r4, #28]
    2d48:	f013 0f03 	tst.w	r3, #3
    2d4c:	d1fb      	bne.n	2d46 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2d4e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2d50:	f013 0f02 	tst.w	r3, #2
    2d54:	d00b      	beq.n	2d6e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2d56:	6823      	ldr	r3, [r4, #0]
    2d58:	f023 0302 	bic.w	r3, r3, #2
    2d5c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2d5e:	69e3      	ldr	r3, [r4, #28]
    2d60:	f013 0f03 	tst.w	r3, #3
    2d64:	d1fb      	bne.n	2d5e <_usart_init+0x5e>
    2d66:	69e3      	ldr	r3, [r4, #28]
    2d68:	f013 0f02 	tst.w	r3, #2
    2d6c:	d1fb      	bne.n	2d66 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2d6e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2d72:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2d74:	69e3      	ldr	r3, [r4, #28]
    2d76:	f013 0f03 	tst.w	r3, #3
    2d7a:	d1fb      	bne.n	2d74 <_usart_init+0x74>
    2d7c:	69e3      	ldr	r3, [r4, #28]
    2d7e:	f013 0f01 	tst.w	r3, #1
    2d82:	d1fb      	bne.n	2d7c <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2d84:	460a      	mov	r2, r1
    2d86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2d8a:	4b2a      	ldr	r3, [pc, #168]	; (2e34 <_usart_init+0x134>)
    2d8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2d90:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2d92:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2d94:	69e3      	ldr	r3, [r4, #28]
    2d96:	f013 0f03 	tst.w	r3, #3
    2d9a:	d1fb      	bne.n	2d94 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2d9c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2da0:	4924      	ldr	r1, [pc, #144]	; (2e34 <_usart_init+0x134>)
    2da2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2da8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2daa:	69e3      	ldr	r3, [r4, #28]
    2dac:	f013 0f1f 	tst.w	r3, #31
    2db0:	d1fb      	bne.n	2daa <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2db2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2db6:	491f      	ldr	r1, [pc, #124]	; (2e34 <_usart_init+0x134>)
    2db8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2dbe:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2dc0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    2dc4:	d10f      	bne.n	2de6 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2dc6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2dca:	491a      	ldr	r1, [pc, #104]	; (2e34 <_usart_init+0x134>)
    2dcc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2dd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    2dd2:	81a3      	strh	r3, [r4, #12]
    2dd4:	e016      	b.n	2e04 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2dd6:	2101      	movs	r1, #1
    2dd8:	e7a9      	b.n	2d2e <_usart_init+0x2e>
    2dda:	2102      	movs	r1, #2
    2ddc:	e7a7      	b.n	2d2e <_usart_init+0x2e>
    2dde:	2103      	movs	r1, #3
    2de0:	e7a5      	b.n	2d2e <_usart_init+0x2e>
    2de2:	2100      	movs	r1, #0
    2de4:	e7a3      	b.n	2d2e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2de6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2dea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2dee:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    2df0:	89a1      	ldrh	r1, [r4, #12]
    2df2:	f360 010c 	bfi	r1, r0, #0, #13
    2df6:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2df8:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    2dfc:	89a3      	ldrh	r3, [r4, #12]
    2dfe:	f361 334f 	bfi	r3, r1, #13, #3
    2e02:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2e04:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <_usart_init+0x134>)
    2e06:	0051      	lsls	r1, r2, #1
    2e08:	1888      	adds	r0, r1, r2
    2e0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2e0e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    2e12:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2e14:	440a      	add	r2, r1
    2e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2e1e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2e22:	2000      	movs	r0, #0
    2e24:	bd10      	pop	{r4, pc}
    2e26:	bf00      	nop
    2e28:	00002b7d 	.word	0x00002b7d
    2e2c:	00007710 	.word	0x00007710
    2e30:	00001edd 	.word	0x00001edd
    2e34:	0000764c 	.word	0x0000764c

00002e38 <_get_i2cm_index>:
{
    2e38:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2e3a:	4b07      	ldr	r3, [pc, #28]	; (2e58 <_get_i2cm_index+0x20>)
    2e3c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    2e3e:	2805      	cmp	r0, #5
    2e40:	d008      	beq.n	2e54 <_get_i2cm_index+0x1c>
	ASSERT(false);
    2e42:	f240 32ed 	movw	r2, #1005	; 0x3ed
    2e46:	4905      	ldr	r1, [pc, #20]	; (2e5c <_get_i2cm_index+0x24>)
    2e48:	2000      	movs	r0, #0
    2e4a:	4b05      	ldr	r3, [pc, #20]	; (2e60 <_get_i2cm_index+0x28>)
    2e4c:	4798      	blx	r3
	return -1;
    2e4e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e52:	bd08      	pop	{r3, pc}
			return i;
    2e54:	2000      	movs	r0, #0
    2e56:	bd08      	pop	{r3, pc}
    2e58:	00002b7d 	.word	0x00002b7d
    2e5c:	00007710 	.word	0x00007710
    2e60:	00001edd 	.word	0x00001edd

00002e64 <_i2c_m_sync_init_impl>:
{
    2e64:	b538      	push	{r3, r4, r5, lr}
    2e66:	4605      	mov	r5, r0
    2e68:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    2e6a:	4608      	mov	r0, r1
    2e6c:	4b34      	ldr	r3, [pc, #208]	; (2f40 <_i2c_m_sync_init_impl+0xdc>)
    2e6e:	4798      	blx	r3
    2e70:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    2e72:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    2e74:	f013 0f01 	tst.w	r3, #1
    2e78:	d123      	bne.n	2ec2 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2e7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2e7e:	4a31      	ldr	r2, [pc, #196]	; (2f44 <_i2c_m_sync_init_impl+0xe0>)
    2e80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2e84:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    2e88:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2e8c:	69e3      	ldr	r3, [r4, #28]
    2e8e:	f013 0f03 	tst.w	r3, #3
    2e92:	d1fb      	bne.n	2e8c <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2e94:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    2e96:	f013 0f02 	tst.w	r3, #2
    2e9a:	d00b      	beq.n	2eb4 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2e9c:	6823      	ldr	r3, [r4, #0]
    2e9e:	f023 0302 	bic.w	r3, r3, #2
    2ea2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2ea4:	69e3      	ldr	r3, [r4, #28]
    2ea6:	f013 0f03 	tst.w	r3, #3
    2eaa:	d1fb      	bne.n	2ea4 <_i2c_m_sync_init_impl+0x40>
    2eac:	69e3      	ldr	r3, [r4, #28]
    2eae:	f013 0f02 	tst.w	r3, #2
    2eb2:	d1fb      	bne.n	2eac <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    2eb4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2eb8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2eba:	69e3      	ldr	r3, [r4, #28]
    2ebc:	f013 0f03 	tst.w	r3, #3
    2ec0:	d1fb      	bne.n	2eba <_i2c_m_sync_init_impl+0x56>
    2ec2:	69e3      	ldr	r3, [r4, #28]
    2ec4:	f013 0f01 	tst.w	r3, #1
    2ec8:	d1fb      	bne.n	2ec2 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    2eca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2ece:	4a1d      	ldr	r2, [pc, #116]	; (2f44 <_i2c_m_sync_init_impl+0xe0>)
    2ed0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2ed4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2ed8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2eda:	69e3      	ldr	r3, [r4, #28]
    2edc:	f013 0f03 	tst.w	r3, #3
    2ee0:	d1fb      	bne.n	2eda <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2ee2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2ee6:	4917      	ldr	r1, [pc, #92]	; (2f44 <_i2c_m_sync_init_impl+0xe0>)
    2ee8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    2ef0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2ef2:	69e3      	ldr	r3, [r4, #28]
    2ef4:	f013 0f04 	tst.w	r3, #4
    2ef8:	d1fb      	bne.n	2ef2 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2efa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2efe:	4911      	ldr	r1, [pc, #68]	; (2f44 <_i2c_m_sync_init_impl+0xe0>)
    2f00:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2f08:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2f0a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    2f0e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2f16:	2b01      	cmp	r3, #1
    2f18:	bf94      	ite	ls
    2f1a:	2300      	movls	r3, #0
    2f1c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    2f1e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    2f22:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2f24:	69e3      	ldr	r3, [r4, #28]
    2f26:	f013 0f04 	tst.w	r3, #4
    2f2a:	d1fb      	bne.n	2f24 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    2f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2f30:	4b04      	ldr	r3, [pc, #16]	; (2f44 <_i2c_m_sync_init_impl+0xe0>)
    2f32:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f36:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    2f3a:	81eb      	strh	r3, [r5, #14]
}
    2f3c:	2000      	movs	r0, #0
    2f3e:	bd38      	pop	{r3, r4, r5, pc}
    2f40:	00002e39 	.word	0x00002e39
    2f44:	0000764c 	.word	0x0000764c

00002f48 <_sercom_i2c_m_irq_handler>:
{
    2f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f4c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    2f4e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2f50:	7e26      	ldrb	r6, [r4, #24]
    2f52:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    2f54:	f8df 8234 	ldr.w	r8, [pc, #564]	; 318c <_sercom_i2c_m_irq_handler+0x244>
    2f58:	f240 425f 	movw	r2, #1119	; 0x45f
    2f5c:	4641      	mov	r1, r8
    2f5e:	3000      	adds	r0, #0
    2f60:	bf18      	it	ne
    2f62:	2001      	movne	r0, #1
    2f64:	4f88      	ldr	r7, [pc, #544]	; (3188 <_sercom_i2c_m_irq_handler+0x240>)
    2f66:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    2f68:	6928      	ldr	r0, [r5, #16]
    2f6a:	f44f 628c 	mov.w	r2, #1120	; 0x460
    2f6e:	4641      	mov	r1, r8
    2f70:	3000      	adds	r0, #0
    2f72:	bf18      	it	ne
    2f74:	2001      	movne	r0, #1
    2f76:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    2f78:	f016 0f80 	tst.w	r6, #128	; 0x80
    2f7c:	f040 80f4 	bne.w	3168 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2f80:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2f82:	69e3      	ldr	r3, [r4, #28]
    2f84:	f013 0f04 	tst.w	r3, #4
    2f88:	d1fb      	bne.n	2f82 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2f8a:	8b63      	ldrh	r3, [r4, #26]
    2f8c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    2f8e:	f016 0f01 	tst.w	r6, #1
    2f92:	f000 8090 	beq.w	30b6 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2f96:	f013 0f02 	tst.w	r3, #2
    2f9a:	d022      	beq.n	2fe2 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2f9c:	2201      	movs	r2, #1
    2f9e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2fa0:	886a      	ldrh	r2, [r5, #2]
    2fa2:	b292      	uxth	r2, r2
    2fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    2fa8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2faa:	886a      	ldrh	r2, [r5, #2]
    2fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2fb0:	0412      	lsls	r2, r2, #16
    2fb2:	0c12      	lsrs	r2, r2, #16
    2fb4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2fb6:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    2fba:	2b00      	cmp	r3, #0
    2fbc:	bf14      	ite	ne
    2fbe:	f06f 0104 	mvnne.w	r1, #4
    2fc2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2fc6:	886b      	ldrh	r3, [r5, #2]
    2fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2fcc:	041b      	lsls	r3, r3, #16
    2fce:	0c1b      	lsrs	r3, r3, #16
    2fd0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2fd2:	696b      	ldr	r3, [r5, #20]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	f000 80c5 	beq.w	3164 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    2fda:	4628      	mov	r0, r5
    2fdc:	4798      	blx	r3
    2fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2fe2:	f013 0f04 	tst.w	r3, #4
    2fe6:	d124      	bne.n	3032 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    2fe8:	886b      	ldrh	r3, [r5, #2]
    2fea:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2fee:	d03e      	beq.n	306e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2ff0:	882b      	ldrh	r3, [r5, #0]
    2ff2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2ff4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2ff8:	69e3      	ldr	r3, [r4, #28]
    2ffa:	f013 0f04 	tst.w	r3, #4
    2ffe:	d1fb      	bne.n	2ff8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3000:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    3006:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    300a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    300c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    300e:	69e3      	ldr	r3, [r4, #28]
    3010:	f013 0f04 	tst.w	r3, #4
    3014:	d1fb      	bne.n	300e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    3016:	886b      	ldrh	r3, [r5, #2]
    3018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    301c:	041b      	lsls	r3, r3, #16
    301e:	0c1b      	lsrs	r3, r3, #16
    3020:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    3022:	69ab      	ldr	r3, [r5, #24]
    3024:	2b00      	cmp	r3, #0
    3026:	f000 8088 	beq.w	313a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    302a:	4628      	mov	r0, r5
    302c:	4798      	blx	r3
    302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    3032:	686b      	ldr	r3, [r5, #4]
    3034:	2b00      	cmp	r3, #0
    3036:	dd04      	ble.n	3042 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    3038:	886b      	ldrh	r3, [r5, #2]
    303a:	b29b      	uxth	r3, r3
    303c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3040:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    3042:	886b      	ldrh	r3, [r5, #2]
    3044:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3048:	d108      	bne.n	305c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    304a:	886b      	ldrh	r3, [r5, #2]
    304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3050:	041b      	lsls	r3, r3, #16
    3052:	0c1b      	lsrs	r3, r3, #16
    3054:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    3056:	f06f 0101 	mvn.w	r1, #1
    305a:	e7b4      	b.n	2fc6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    305c:	6863      	ldr	r3, [r4, #4]
    305e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3062:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3064:	69e3      	ldr	r3, [r4, #28]
    3066:	f013 0f04 	tst.w	r3, #4
    306a:	d1fb      	bne.n	3064 <_sercom_i2c_m_irq_handler+0x11c>
    306c:	e7ed      	b.n	304a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    306e:	686b      	ldr	r3, [r5, #4]
    3070:	b99b      	cbnz	r3, 309a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    3072:	886b      	ldrh	r3, [r5, #2]
    3074:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3078:	d106      	bne.n	3088 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    307a:	886b      	ldrh	r3, [r5, #2]
    307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3080:	041b      	lsls	r3, r3, #16
    3082:	0c1b      	lsrs	r3, r3, #16
    3084:	806b      	strh	r3, [r5, #2]
    3086:	e7cc      	b.n	3022 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3088:	6863      	ldr	r3, [r4, #4]
    308a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    308e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3090:	69e3      	ldr	r3, [r4, #28]
    3092:	f013 0f04 	tst.w	r3, #4
    3096:	d1fb      	bne.n	3090 <_sercom_i2c_m_irq_handler+0x148>
    3098:	e7ef      	b.n	307a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    309a:	68ab      	ldr	r3, [r5, #8]
    309c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    309e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30a0:	69e3      	ldr	r3, [r4, #28]
    30a2:	f013 0f04 	tst.w	r3, #4
    30a6:	d1fb      	bne.n	30a0 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    30a8:	68ab      	ldr	r3, [r5, #8]
    30aa:	3301      	adds	r3, #1
    30ac:	60ab      	str	r3, [r5, #8]
				msg->len--;
    30ae:	686b      	ldr	r3, [r5, #4]
    30b0:	3b01      	subs	r3, #1
    30b2:	606b      	str	r3, [r5, #4]
    30b4:	e7b5      	b.n	3022 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    30b6:	f016 0f02 	tst.w	r6, #2
    30ba:	d041      	beq.n	3140 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    30bc:	686a      	ldr	r2, [r5, #4]
    30be:	2a00      	cmp	r2, #0
    30c0:	d036      	beq.n	3130 <_sercom_i2c_m_irq_handler+0x1e8>
    30c2:	f013 0f04 	tst.w	r3, #4
    30c6:	d133      	bne.n	3130 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    30c8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    30cc:	3a01      	subs	r2, #1
    30ce:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    30d0:	2a00      	cmp	r2, #0
    30d2:	d137      	bne.n	3144 <_sercom_i2c_m_irq_handler+0x1fc>
    30d4:	2900      	cmp	r1, #0
    30d6:	d039      	beq.n	314c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    30d8:	886b      	ldrh	r3, [r5, #2]
    30da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    30de:	d116      	bne.n	310e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    30e0:	886b      	ldrh	r3, [r5, #2]
    30e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    30e6:	041b      	lsls	r3, r3, #16
    30e8:	0c1b      	lsrs	r3, r3, #16
    30ea:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    30ec:	68aa      	ldr	r2, [r5, #8]
    30ee:	1c53      	adds	r3, r2, #1
    30f0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30f2:	69e3      	ldr	r3, [r4, #28]
    30f4:	f013 0f04 	tst.w	r3, #4
    30f8:	d1fb      	bne.n	30f2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    30fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30fc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    30fe:	2302      	movs	r3, #2
    3100:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3102:	69eb      	ldr	r3, [r5, #28]
    3104:	b1e3      	cbz	r3, 3140 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    3106:	4628      	mov	r0, r5
    3108:	4798      	blx	r3
    310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    310e:	6863      	ldr	r3, [r4, #4]
    3110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3114:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3116:	69e3      	ldr	r3, [r4, #28]
    3118:	f013 0f04 	tst.w	r3, #4
    311c:	d1fb      	bne.n	3116 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    311e:	6863      	ldr	r3, [r4, #4]
    3120:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3124:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3126:	69e3      	ldr	r3, [r4, #28]
    3128:	f013 0f04 	tst.w	r3, #4
    312c:	d1fb      	bne.n	3126 <_sercom_i2c_m_irq_handler+0x1de>
    312e:	e7d7      	b.n	30e0 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3130:	2302      	movs	r3, #2
    3132:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    3134:	f06f 0101 	mvn.w	r1, #1
    3138:	e745      	b.n	2fc6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    313a:	f016 0f02 	tst.w	r6, #2
    313e:	d1e0      	bne.n	3102 <_sercom_i2c_m_irq_handler+0x1ba>
    3140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3144:	2a01      	cmp	r2, #1
    3146:	d1d1      	bne.n	30ec <_sercom_i2c_m_irq_handler+0x1a4>
    3148:	2900      	cmp	r1, #0
    314a:	d0cf      	beq.n	30ec <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    314c:	6863      	ldr	r3, [r4, #4]
    314e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3152:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3154:	69e3      	ldr	r3, [r4, #28]
    3156:	f013 0f04 	tst.w	r3, #4
    315a:	d1fb      	bne.n	3154 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    315c:	686b      	ldr	r3, [r5, #4]
    315e:	2b00      	cmp	r3, #0
    3160:	d0ba      	beq.n	30d8 <_sercom_i2c_m_irq_handler+0x190>
    3162:	e7c3      	b.n	30ec <_sercom_i2c_m_irq_handler+0x1a4>
    3164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3168:	886b      	ldrh	r3, [r5, #2]
    316a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    316e:	041b      	lsls	r3, r3, #16
    3170:	0c1b      	lsrs	r3, r3, #16
    3172:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    3174:	696b      	ldr	r3, [r5, #20]
    3176:	2b00      	cmp	r3, #0
    3178:	d0e2      	beq.n	3140 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    317a:	f06f 0104 	mvn.w	r1, #4
    317e:	4628      	mov	r0, r5
    3180:	4798      	blx	r3
    3182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3186:	bf00      	nop
    3188:	00001edd 	.word	0x00001edd
    318c:	00007710 	.word	0x00007710

00003190 <_usart_async_init>:
{
    3190:	b570      	push	{r4, r5, r6, lr}
    3192:	460d      	mov	r5, r1
	ASSERT(device);
    3194:	4606      	mov	r6, r0
    3196:	22d6      	movs	r2, #214	; 0xd6
    3198:	4917      	ldr	r1, [pc, #92]	; (31f8 <_usart_async_init+0x68>)
    319a:	3000      	adds	r0, #0
    319c:	bf18      	it	ne
    319e:	2001      	movne	r0, #1
    31a0:	4b16      	ldr	r3, [pc, #88]	; (31fc <_usart_async_init+0x6c>)
    31a2:	4798      	blx	r3
	init_status = _usart_init(hw);
    31a4:	4628      	mov	r0, r5
    31a6:	4b16      	ldr	r3, [pc, #88]	; (3200 <_usart_async_init+0x70>)
    31a8:	4798      	blx	r3
	if (init_status) {
    31aa:	4604      	mov	r4, r0
    31ac:	b108      	cbz	r0, 31b2 <_usart_async_init+0x22>
}
    31ae:	4620      	mov	r0, r4
    31b0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    31b2:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    31b4:	4631      	mov	r1, r6
    31b6:	4628      	mov	r0, r5
    31b8:	4b12      	ldr	r3, [pc, #72]	; (3204 <_usart_async_init+0x74>)
    31ba:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    31bc:	4628      	mov	r0, r5
    31be:	4b12      	ldr	r3, [pc, #72]	; (3208 <_usart_async_init+0x78>)
    31c0:	4798      	blx	r3
    31c2:	1d01      	adds	r1, r0, #4
    31c4:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31c6:	2501      	movs	r5, #1
    31c8:	f000 021f 	and.w	r2, r0, #31
    31cc:	fa05 f202 	lsl.w	r2, r5, r2
    31d0:	0943      	lsrs	r3, r0, #5
    31d2:	009b      	lsls	r3, r3, #2
    31d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    31d8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    31dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    31e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31ec:	601a      	str	r2, [r3, #0]
		irq++;
    31ee:	3001      	adds	r0, #1
    31f0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    31f2:	4281      	cmp	r1, r0
    31f4:	d1e8      	bne.n	31c8 <_usart_async_init+0x38>
    31f6:	e7da      	b.n	31ae <_usart_async_init+0x1e>
    31f8:	00007710 	.word	0x00007710
    31fc:	00001edd 	.word	0x00001edd
    3200:	00002d01 	.word	0x00002d01
    3204:	00002c31 	.word	0x00002c31
    3208:	00002c91 	.word	0x00002c91

0000320c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    320c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    320e:	6813      	ldr	r3, [r2, #0]
    3210:	f043 0302 	orr.w	r3, r3, #2
    3214:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3216:	69d3      	ldr	r3, [r2, #28]
    3218:	f013 0f03 	tst.w	r3, #3
    321c:	d1fb      	bne.n	3216 <_usart_async_enable+0xa>
}
    321e:	4770      	bx	lr

00003220 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3220:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3222:	6299      	str	r1, [r3, #40]	; 0x28
    3224:	4770      	bx	lr

00003226 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3226:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3228:	2201      	movs	r2, #1
    322a:	759a      	strb	r2, [r3, #22]
    322c:	4770      	bx	lr

0000322e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    322e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3230:	2202      	movs	r2, #2
    3232:	759a      	strb	r2, [r3, #22]
    3234:	4770      	bx	lr
	...

00003238 <_usart_async_set_irq_state>:
{
    3238:	b570      	push	{r4, r5, r6, lr}
    323a:	460c      	mov	r4, r1
    323c:	4616      	mov	r6, r2
	ASSERT(device);
    323e:	4605      	mov	r5, r0
    3240:	f240 2236 	movw	r2, #566	; 0x236
    3244:	4915      	ldr	r1, [pc, #84]	; (329c <_usart_async_set_irq_state+0x64>)
    3246:	3000      	adds	r0, #0
    3248:	bf18      	it	ne
    324a:	2001      	movne	r0, #1
    324c:	4b14      	ldr	r3, [pc, #80]	; (32a0 <_usart_async_set_irq_state+0x68>)
    324e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3250:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3254:	d10d      	bne.n	3272 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3256:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3258:	b92e      	cbnz	r6, 3266 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    325a:	2201      	movs	r2, #1
    325c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    325e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3260:	2202      	movs	r2, #2
    3262:	751a      	strb	r2, [r3, #20]
    3264:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3266:	2201      	movs	r2, #1
    3268:	759a      	strb	r2, [r3, #22]
    326a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    326c:	2202      	movs	r2, #2
    326e:	759a      	strb	r2, [r3, #22]
    3270:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3272:	2c01      	cmp	r4, #1
    3274:	d002      	beq.n	327c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    3276:	2c03      	cmp	r4, #3
    3278:	d008      	beq.n	328c <_usart_async_set_irq_state+0x54>
    327a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    327c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    327e:	b916      	cbnz	r6, 3286 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3280:	2204      	movs	r2, #4
    3282:	751a      	strb	r2, [r3, #20]
    3284:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    3286:	2204      	movs	r2, #4
    3288:	759a      	strb	r2, [r3, #22]
    328a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    328c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    328e:	b116      	cbz	r6, 3296 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3290:	2280      	movs	r2, #128	; 0x80
    3292:	759a      	strb	r2, [r3, #22]
}
    3294:	e7f1      	b.n	327a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3296:	2280      	movs	r2, #128	; 0x80
    3298:	751a      	strb	r2, [r3, #20]
    329a:	bd70      	pop	{r4, r5, r6, pc}
    329c:	00007710 	.word	0x00007710
    32a0:	00001edd 	.word	0x00001edd

000032a4 <_i2c_m_async_init>:
{
    32a4:	b570      	push	{r4, r5, r6, lr}
    32a6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    32a8:	4606      	mov	r6, r0
    32aa:	f240 42d2 	movw	r2, #1234	; 0x4d2
    32ae:	4918      	ldr	r1, [pc, #96]	; (3310 <_i2c_m_async_init+0x6c>)
    32b0:	3000      	adds	r0, #0
    32b2:	bf18      	it	ne
    32b4:	2001      	movne	r0, #1
    32b6:	4b17      	ldr	r3, [pc, #92]	; (3314 <_i2c_m_async_init+0x70>)
    32b8:	4798      	blx	r3
	i2c_dev->hw = hw;
    32ba:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    32bc:	4629      	mov	r1, r5
    32be:	4630      	mov	r0, r6
    32c0:	4b15      	ldr	r3, [pc, #84]	; (3318 <_i2c_m_async_init+0x74>)
    32c2:	4798      	blx	r3
	if (init_status) {
    32c4:	4604      	mov	r4, r0
    32c6:	b108      	cbz	r0, 32cc <_i2c_m_async_init+0x28>
}
    32c8:	4620      	mov	r0, r4
    32ca:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    32cc:	4631      	mov	r1, r6
    32ce:	4628      	mov	r0, r5
    32d0:	4b12      	ldr	r3, [pc, #72]	; (331c <_i2c_m_async_init+0x78>)
    32d2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    32d4:	4628      	mov	r0, r5
    32d6:	4b12      	ldr	r3, [pc, #72]	; (3320 <_i2c_m_async_init+0x7c>)
    32d8:	4798      	blx	r3
    32da:	1d01      	adds	r1, r0, #4
    32dc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32de:	2501      	movs	r5, #1
    32e0:	f000 021f 	and.w	r2, r0, #31
    32e4:	fa05 f202 	lsl.w	r2, r5, r2
    32e8:	0943      	lsrs	r3, r0, #5
    32ea:	009b      	lsls	r3, r3, #2
    32ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    32f0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    32f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    32f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32fc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3300:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3304:	601a      	str	r2, [r3, #0]
		irq++;
    3306:	3001      	adds	r0, #1
    3308:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    330a:	4281      	cmp	r1, r0
    330c:	d1e8      	bne.n	32e0 <_i2c_m_async_init+0x3c>
    330e:	e7db      	b.n	32c8 <_i2c_m_async_init+0x24>
    3310:	00007710 	.word	0x00007710
    3314:	00001edd 	.word	0x00001edd
    3318:	00002e65 	.word	0x00002e65
    331c:	00002c31 	.word	0x00002c31
    3320:	00002c91 	.word	0x00002c91

00003324 <_i2c_m_async_transfer>:
{
    3324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3328:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    332a:	4605      	mov	r5, r0
    332c:	f110 0800 	adds.w	r8, r0, #0
    3330:	bf18      	it	ne
    3332:	f04f 0801 	movne.w	r8, #1
    3336:	4f45      	ldr	r7, [pc, #276]	; (344c <_i2c_m_async_transfer+0x128>)
    3338:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    333c:	4639      	mov	r1, r7
    333e:	4640      	mov	r0, r8
    3340:	4e43      	ldr	r6, [pc, #268]	; (3450 <_i2c_m_async_transfer+0x12c>)
    3342:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3344:	6928      	ldr	r0, [r5, #16]
    3346:	f240 5229 	movw	r2, #1321	; 0x529
    334a:	4639      	mov	r1, r7
    334c:	3000      	adds	r0, #0
    334e:	bf18      	it	ne
    3350:	2001      	movne	r0, #1
    3352:	47b0      	blx	r6
	ASSERT(msg);
    3354:	f240 522a 	movw	r2, #1322	; 0x52a
    3358:	4639      	mov	r1, r7
    335a:	1c20      	adds	r0, r4, #0
    335c:	bf18      	it	ne
    335e:	2001      	movne	r0, #1
    3360:	47b0      	blx	r6
	if (msg->len == 0) {
    3362:	6860      	ldr	r0, [r4, #4]
    3364:	2800      	cmp	r0, #0
    3366:	d06f      	beq.n	3448 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3368:	886b      	ldrh	r3, [r5, #2]
    336a:	f413 7f80 	tst.w	r3, #256	; 0x100
    336e:	d169      	bne.n	3444 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    3370:	8863      	ldrh	r3, [r4, #2]
    3372:	b29b      	uxth	r3, r3
    3374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3378:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    337a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    337e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    3382:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3384:	6853      	ldr	r3, [r2, #4]
    3386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    338a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    338c:	69d3      	ldr	r3, [r2, #28]
    338e:	f013 0f04 	tst.w	r3, #4
    3392:	d1fb      	bne.n	338c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    3394:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3396:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    3398:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    339c:	492b      	ldr	r1, [pc, #172]	; (344c <_i2c_m_async_transfer+0x128>)
    339e:	4640      	mov	r0, r8
    33a0:	4b2b      	ldr	r3, [pc, #172]	; (3450 <_i2c_m_async_transfer+0x12c>)
    33a2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    33a4:	686b      	ldr	r3, [r5, #4]
    33a6:	2b01      	cmp	r3, #1
    33a8:	d02a      	beq.n	3400 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    33aa:	6863      	ldr	r3, [r4, #4]
    33ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    33b0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33b2:	69e3      	ldr	r3, [r4, #28]
    33b4:	f013 0f04 	tst.w	r3, #4
    33b8:	d1fb      	bne.n	33b2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    33ba:	882b      	ldrh	r3, [r5, #0]
    33bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    33c0:	d02a      	beq.n	3418 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    33c2:	886a      	ldrh	r2, [r5, #2]
    33c4:	f012 0f01 	tst.w	r2, #1
    33c8:	d004      	beq.n	33d4 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    33ca:	886a      	ldrh	r2, [r5, #2]
    33cc:	b292      	uxth	r2, r2
    33ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    33d2:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    33d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
    33d8:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    33dc:	69e3      	ldr	r3, [r4, #28]
    33de:	f013 0f04 	tst.w	r3, #4
    33e2:	d1fb      	bne.n	33dc <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    33e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    33ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    33ee:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    33f0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33f2:	69e3      	ldr	r3, [r4, #28]
    33f4:	f013 0f04 	tst.w	r3, #4
    33f8:	d1fb      	bne.n	33f2 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    33fa:	2000      	movs	r0, #0
    33fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    3400:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3404:	d0d1      	beq.n	33aa <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3406:	6863      	ldr	r3, [r4, #4]
    3408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    340c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    340e:	69e3      	ldr	r3, [r4, #28]
    3410:	f013 0f04 	tst.w	r3, #4
    3414:	d1fb      	bne.n	340e <_i2c_m_async_transfer+0xea>
    3416:	e7d0      	b.n	33ba <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3418:	8869      	ldrh	r1, [r5, #2]
    341a:	005a      	lsls	r2, r3, #1
    341c:	b2d2      	uxtb	r2, r2
    341e:	f001 0301 	and.w	r3, r1, #1
    3422:	431a      	orrs	r2, r3
    3424:	69e3      	ldr	r3, [r4, #28]
    3426:	f013 0f04 	tst.w	r3, #4
    342a:	d1fb      	bne.n	3424 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    342c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3432:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3434:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3436:	69e3      	ldr	r3, [r4, #28]
    3438:	f013 0f04 	tst.w	r3, #4
    343c:	d1fb      	bne.n	3436 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    343e:	2000      	movs	r0, #0
    3440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3444:	f06f 0003 	mvn.w	r0, #3
}
    3448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    344c:	00007710 	.word	0x00007710
    3450:	00001edd 	.word	0x00001edd

00003454 <_i2c_m_async_register_callback>:
	switch (type) {
    3454:	2901      	cmp	r1, #1
    3456:	d006      	beq.n	3466 <_i2c_m_async_register_callback+0x12>
    3458:	b119      	cbz	r1, 3462 <_i2c_m_async_register_callback+0xe>
    345a:	2902      	cmp	r1, #2
    345c:	d005      	beq.n	346a <_i2c_m_async_register_callback+0x16>
}
    345e:	2000      	movs	r0, #0
    3460:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    3462:	6142      	str	r2, [r0, #20]
		break;
    3464:	e7fb      	b.n	345e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    3466:	6182      	str	r2, [r0, #24]
		break;
    3468:	e7f9      	b.n	345e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    346a:	61c2      	str	r2, [r0, #28]
		break;
    346c:	e7f7      	b.n	345e <_i2c_m_async_register_callback+0xa>
	...

00003470 <SERCOM0_0_Handler>:
{
    3470:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3472:	4b02      	ldr	r3, [pc, #8]	; (347c <SERCOM0_0_Handler+0xc>)
    3474:	6818      	ldr	r0, [r3, #0]
    3476:	4b02      	ldr	r3, [pc, #8]	; (3480 <SERCOM0_0_Handler+0x10>)
    3478:	4798      	blx	r3
    347a:	bd08      	pop	{r3, pc}
    347c:	200007ac 	.word	0x200007ac
    3480:	00002bc1 	.word	0x00002bc1

00003484 <SERCOM0_1_Handler>:
{
    3484:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3486:	4b02      	ldr	r3, [pc, #8]	; (3490 <SERCOM0_1_Handler+0xc>)
    3488:	6818      	ldr	r0, [r3, #0]
    348a:	4b02      	ldr	r3, [pc, #8]	; (3494 <SERCOM0_1_Handler+0x10>)
    348c:	4798      	blx	r3
    348e:	bd08      	pop	{r3, pc}
    3490:	200007ac 	.word	0x200007ac
    3494:	00002bc1 	.word	0x00002bc1

00003498 <SERCOM0_2_Handler>:
{
    3498:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    349a:	4b02      	ldr	r3, [pc, #8]	; (34a4 <SERCOM0_2_Handler+0xc>)
    349c:	6818      	ldr	r0, [r3, #0]
    349e:	4b02      	ldr	r3, [pc, #8]	; (34a8 <SERCOM0_2_Handler+0x10>)
    34a0:	4798      	blx	r3
    34a2:	bd08      	pop	{r3, pc}
    34a4:	200007ac 	.word	0x200007ac
    34a8:	00002bc1 	.word	0x00002bc1

000034ac <SERCOM0_3_Handler>:
{
    34ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    34ae:	4b02      	ldr	r3, [pc, #8]	; (34b8 <SERCOM0_3_Handler+0xc>)
    34b0:	6818      	ldr	r0, [r3, #0]
    34b2:	4b02      	ldr	r3, [pc, #8]	; (34bc <SERCOM0_3_Handler+0x10>)
    34b4:	4798      	blx	r3
    34b6:	bd08      	pop	{r3, pc}
    34b8:	200007ac 	.word	0x200007ac
    34bc:	00002bc1 	.word	0x00002bc1

000034c0 <SERCOM1_0_Handler>:
{
    34c0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    34c2:	4b02      	ldr	r3, [pc, #8]	; (34cc <SERCOM1_0_Handler+0xc>)
    34c4:	6858      	ldr	r0, [r3, #4]
    34c6:	4b02      	ldr	r3, [pc, #8]	; (34d0 <SERCOM1_0_Handler+0x10>)
    34c8:	4798      	blx	r3
    34ca:	bd08      	pop	{r3, pc}
    34cc:	200007ac 	.word	0x200007ac
    34d0:	00002bc1 	.word	0x00002bc1

000034d4 <SERCOM1_1_Handler>:
{
    34d4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    34d6:	4b02      	ldr	r3, [pc, #8]	; (34e0 <SERCOM1_1_Handler+0xc>)
    34d8:	6858      	ldr	r0, [r3, #4]
    34da:	4b02      	ldr	r3, [pc, #8]	; (34e4 <SERCOM1_1_Handler+0x10>)
    34dc:	4798      	blx	r3
    34de:	bd08      	pop	{r3, pc}
    34e0:	200007ac 	.word	0x200007ac
    34e4:	00002bc1 	.word	0x00002bc1

000034e8 <SERCOM1_2_Handler>:
{
    34e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    34ea:	4b02      	ldr	r3, [pc, #8]	; (34f4 <SERCOM1_2_Handler+0xc>)
    34ec:	6858      	ldr	r0, [r3, #4]
    34ee:	4b02      	ldr	r3, [pc, #8]	; (34f8 <SERCOM1_2_Handler+0x10>)
    34f0:	4798      	blx	r3
    34f2:	bd08      	pop	{r3, pc}
    34f4:	200007ac 	.word	0x200007ac
    34f8:	00002bc1 	.word	0x00002bc1

000034fc <SERCOM1_3_Handler>:
{
    34fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    34fe:	4b02      	ldr	r3, [pc, #8]	; (3508 <SERCOM1_3_Handler+0xc>)
    3500:	6858      	ldr	r0, [r3, #4]
    3502:	4b02      	ldr	r3, [pc, #8]	; (350c <SERCOM1_3_Handler+0x10>)
    3504:	4798      	blx	r3
    3506:	bd08      	pop	{r3, pc}
    3508:	200007ac 	.word	0x200007ac
    350c:	00002bc1 	.word	0x00002bc1

00003510 <SERCOM2_0_Handler>:
{
    3510:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3512:	4b02      	ldr	r3, [pc, #8]	; (351c <SERCOM2_0_Handler+0xc>)
    3514:	6898      	ldr	r0, [r3, #8]
    3516:	4b02      	ldr	r3, [pc, #8]	; (3520 <SERCOM2_0_Handler+0x10>)
    3518:	4798      	blx	r3
    351a:	bd08      	pop	{r3, pc}
    351c:	200007ac 	.word	0x200007ac
    3520:	00002bc1 	.word	0x00002bc1

00003524 <SERCOM2_1_Handler>:
{
    3524:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3526:	4b02      	ldr	r3, [pc, #8]	; (3530 <SERCOM2_1_Handler+0xc>)
    3528:	6898      	ldr	r0, [r3, #8]
    352a:	4b02      	ldr	r3, [pc, #8]	; (3534 <SERCOM2_1_Handler+0x10>)
    352c:	4798      	blx	r3
    352e:	bd08      	pop	{r3, pc}
    3530:	200007ac 	.word	0x200007ac
    3534:	00002bc1 	.word	0x00002bc1

00003538 <SERCOM2_2_Handler>:
{
    3538:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    353a:	4b02      	ldr	r3, [pc, #8]	; (3544 <SERCOM2_2_Handler+0xc>)
    353c:	6898      	ldr	r0, [r3, #8]
    353e:	4b02      	ldr	r3, [pc, #8]	; (3548 <SERCOM2_2_Handler+0x10>)
    3540:	4798      	blx	r3
    3542:	bd08      	pop	{r3, pc}
    3544:	200007ac 	.word	0x200007ac
    3548:	00002bc1 	.word	0x00002bc1

0000354c <SERCOM2_3_Handler>:
{
    354c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    354e:	4b02      	ldr	r3, [pc, #8]	; (3558 <SERCOM2_3_Handler+0xc>)
    3550:	6898      	ldr	r0, [r3, #8]
    3552:	4b02      	ldr	r3, [pc, #8]	; (355c <SERCOM2_3_Handler+0x10>)
    3554:	4798      	blx	r3
    3556:	bd08      	pop	{r3, pc}
    3558:	200007ac 	.word	0x200007ac
    355c:	00002bc1 	.word	0x00002bc1

00003560 <SERCOM4_0_Handler>:
{
    3560:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3562:	4b02      	ldr	r3, [pc, #8]	; (356c <SERCOM4_0_Handler+0xc>)
    3564:	68d8      	ldr	r0, [r3, #12]
    3566:	4b02      	ldr	r3, [pc, #8]	; (3570 <SERCOM4_0_Handler+0x10>)
    3568:	4798      	blx	r3
    356a:	bd08      	pop	{r3, pc}
    356c:	200007ac 	.word	0x200007ac
    3570:	00002bc1 	.word	0x00002bc1

00003574 <SERCOM4_1_Handler>:
{
    3574:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3576:	4b02      	ldr	r3, [pc, #8]	; (3580 <SERCOM4_1_Handler+0xc>)
    3578:	68d8      	ldr	r0, [r3, #12]
    357a:	4b02      	ldr	r3, [pc, #8]	; (3584 <SERCOM4_1_Handler+0x10>)
    357c:	4798      	blx	r3
    357e:	bd08      	pop	{r3, pc}
    3580:	200007ac 	.word	0x200007ac
    3584:	00002bc1 	.word	0x00002bc1

00003588 <SERCOM4_2_Handler>:
{
    3588:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    358a:	4b02      	ldr	r3, [pc, #8]	; (3594 <SERCOM4_2_Handler+0xc>)
    358c:	68d8      	ldr	r0, [r3, #12]
    358e:	4b02      	ldr	r3, [pc, #8]	; (3598 <SERCOM4_2_Handler+0x10>)
    3590:	4798      	blx	r3
    3592:	bd08      	pop	{r3, pc}
    3594:	200007ac 	.word	0x200007ac
    3598:	00002bc1 	.word	0x00002bc1

0000359c <SERCOM4_3_Handler>:
{
    359c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    359e:	4b02      	ldr	r3, [pc, #8]	; (35a8 <SERCOM4_3_Handler+0xc>)
    35a0:	68d8      	ldr	r0, [r3, #12]
    35a2:	4b02      	ldr	r3, [pc, #8]	; (35ac <SERCOM4_3_Handler+0x10>)
    35a4:	4798      	blx	r3
    35a6:	bd08      	pop	{r3, pc}
    35a8:	200007ac 	.word	0x200007ac
    35ac:	00002bc1 	.word	0x00002bc1

000035b0 <SERCOM5_0_Handler>:
{
    35b0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    35b2:	4b02      	ldr	r3, [pc, #8]	; (35bc <SERCOM5_0_Handler+0xc>)
    35b4:	6918      	ldr	r0, [r3, #16]
    35b6:	4b02      	ldr	r3, [pc, #8]	; (35c0 <SERCOM5_0_Handler+0x10>)
    35b8:	4798      	blx	r3
    35ba:	bd08      	pop	{r3, pc}
    35bc:	200007ac 	.word	0x200007ac
    35c0:	00002f49 	.word	0x00002f49

000035c4 <SERCOM5_1_Handler>:
{
    35c4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    35c6:	4b02      	ldr	r3, [pc, #8]	; (35d0 <SERCOM5_1_Handler+0xc>)
    35c8:	6918      	ldr	r0, [r3, #16]
    35ca:	4b02      	ldr	r3, [pc, #8]	; (35d4 <SERCOM5_1_Handler+0x10>)
    35cc:	4798      	blx	r3
    35ce:	bd08      	pop	{r3, pc}
    35d0:	200007ac 	.word	0x200007ac
    35d4:	00002f49 	.word	0x00002f49

000035d8 <SERCOM5_2_Handler>:
{
    35d8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    35da:	4b02      	ldr	r3, [pc, #8]	; (35e4 <SERCOM5_2_Handler+0xc>)
    35dc:	6918      	ldr	r0, [r3, #16]
    35de:	4b02      	ldr	r3, [pc, #8]	; (35e8 <SERCOM5_2_Handler+0x10>)
    35e0:	4798      	blx	r3
    35e2:	bd08      	pop	{r3, pc}
    35e4:	200007ac 	.word	0x200007ac
    35e8:	00002f49 	.word	0x00002f49

000035ec <SERCOM5_3_Handler>:
{
    35ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    35ee:	4b02      	ldr	r3, [pc, #8]	; (35f8 <SERCOM5_3_Handler+0xc>)
    35f0:	6918      	ldr	r0, [r3, #16]
    35f2:	4b02      	ldr	r3, [pc, #8]	; (35fc <SERCOM5_3_Handler+0x10>)
    35f4:	4798      	blx	r3
    35f6:	bd08      	pop	{r3, pc}
    35f8:	200007ac 	.word	0x200007ac
    35fc:	00002f49 	.word	0x00002f49

00003600 <SERCOM6_0_Handler>:
{
    3600:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3602:	4b02      	ldr	r3, [pc, #8]	; (360c <SERCOM6_0_Handler+0xc>)
    3604:	6958      	ldr	r0, [r3, #20]
    3606:	4b02      	ldr	r3, [pc, #8]	; (3610 <SERCOM6_0_Handler+0x10>)
    3608:	4798      	blx	r3
    360a:	bd08      	pop	{r3, pc}
    360c:	200007ac 	.word	0x200007ac
    3610:	00002bc1 	.word	0x00002bc1

00003614 <SERCOM6_1_Handler>:
{
    3614:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3616:	4b02      	ldr	r3, [pc, #8]	; (3620 <SERCOM6_1_Handler+0xc>)
    3618:	6958      	ldr	r0, [r3, #20]
    361a:	4b02      	ldr	r3, [pc, #8]	; (3624 <SERCOM6_1_Handler+0x10>)
    361c:	4798      	blx	r3
    361e:	bd08      	pop	{r3, pc}
    3620:	200007ac 	.word	0x200007ac
    3624:	00002bc1 	.word	0x00002bc1

00003628 <SERCOM6_2_Handler>:
{
    3628:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    362a:	4b02      	ldr	r3, [pc, #8]	; (3634 <SERCOM6_2_Handler+0xc>)
    362c:	6958      	ldr	r0, [r3, #20]
    362e:	4b02      	ldr	r3, [pc, #8]	; (3638 <SERCOM6_2_Handler+0x10>)
    3630:	4798      	blx	r3
    3632:	bd08      	pop	{r3, pc}
    3634:	200007ac 	.word	0x200007ac
    3638:	00002bc1 	.word	0x00002bc1

0000363c <SERCOM6_3_Handler>:
{
    363c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    363e:	4b02      	ldr	r3, [pc, #8]	; (3648 <SERCOM6_3_Handler+0xc>)
    3640:	6958      	ldr	r0, [r3, #20]
    3642:	4b02      	ldr	r3, [pc, #8]	; (364c <SERCOM6_3_Handler+0x10>)
    3644:	4798      	blx	r3
    3646:	bd08      	pop	{r3, pc}
    3648:	200007ac 	.word	0x200007ac
    364c:	00002bc1 	.word	0x00002bc1

00003650 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3654:	4605      	mov	r5, r0
    3656:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3658:	4608      	mov	r0, r1
    365a:	4b44      	ldr	r3, [pc, #272]	; (376c <_spi_m_dma_init+0x11c>)
    365c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    365e:	2807      	cmp	r0, #7
    3660:	d00d      	beq.n	367e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3662:	2d00      	cmp	r5, #0
    3664:	d06e      	beq.n	3744 <_spi_m_dma_init+0xf4>
    3666:	f640 5286 	movw	r2, #3462	; 0xd86
    366a:	4941      	ldr	r1, [pc, #260]	; (3770 <_spi_m_dma_init+0x120>)
    366c:	1c20      	adds	r0, r4, #0
    366e:	bf18      	it	ne
    3670:	2001      	movne	r0, #1
    3672:	4b40      	ldr	r3, [pc, #256]	; (3774 <_spi_m_dma_init+0x124>)
    3674:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    3676:	f06f 000c 	mvn.w	r0, #12
    367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    367e:	2d00      	cmp	r5, #0
    3680:	d16a      	bne.n	3758 <_spi_m_dma_init+0x108>
    3682:	f640 5286 	movw	r2, #3462	; 0xd86
    3686:	493a      	ldr	r1, [pc, #232]	; (3770 <_spi_m_dma_init+0x120>)
    3688:	2000      	movs	r0, #0
    368a:	4b3a      	ldr	r3, [pc, #232]	; (3774 <_spi_m_dma_init+0x124>)
    368c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    368e:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3690:	f013 0f01 	tst.w	r3, #1
    3694:	d119      	bne.n	36ca <_spi_m_dma_init+0x7a>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3696:	69e3      	ldr	r3, [r4, #28]
    3698:	f013 0f03 	tst.w	r3, #3
    369c:	d1fb      	bne.n	3696 <_spi_m_dma_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    369e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    36a0:	f013 0f02 	tst.w	r3, #2
    36a4:	d00b      	beq.n	36be <_spi_m_dma_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    36a6:	6823      	ldr	r3, [r4, #0]
    36a8:	f023 0302 	bic.w	r3, r3, #2
    36ac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36ae:	69e3      	ldr	r3, [r4, #28]
    36b0:	f013 0f03 	tst.w	r3, #3
    36b4:	d1fb      	bne.n	36ae <_spi_m_dma_init+0x5e>
    36b6:	69e3      	ldr	r3, [r4, #28]
    36b8:	f013 0f02 	tst.w	r3, #2
    36bc:	d1fb      	bne.n	36b6 <_spi_m_dma_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    36be:	230d      	movs	r3, #13
    36c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36c2:	69e3      	ldr	r3, [r4, #28]
    36c4:	f013 0f03 	tst.w	r3, #3
    36c8:	d1fb      	bne.n	36c2 <_spi_m_dma_init+0x72>
    36ca:	69e3      	ldr	r3, [r4, #28]
    36cc:	f013 0f01 	tst.w	r3, #1
    36d0:	d1fb      	bne.n	36ca <_spi_m_dma_init+0x7a>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    36d2:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    36d4:	f44f 6217 	mov.w	r2, #2416	; 0x970
    36d8:	4925      	ldr	r1, [pc, #148]	; (3770 <_spi_m_dma_init+0x120>)
    36da:	1c20      	adds	r0, r4, #0
    36dc:	bf18      	it	ne
    36de:	2001      	movne	r0, #1
    36e0:	4b24      	ldr	r3, [pc, #144]	; (3774 <_spi_m_dma_init+0x124>)
    36e2:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    36e4:	4b24      	ldr	r3, [pc, #144]	; (3778 <_spi_m_dma_init+0x128>)
    36e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36e8:	69e3      	ldr	r3, [r4, #28]
    36ea:	f013 0f03 	tst.w	r3, #3
    36ee:	d1fb      	bne.n	36e8 <_spi_m_dma_init+0x98>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    36f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    36f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36f6:	69e3      	ldr	r3, [r4, #28]
    36f8:	f013 0f17 	tst.w	r3, #23
    36fc:	d1fb      	bne.n	36f6 <_spi_m_dma_init+0xa6>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    36fe:	2306      	movs	r3, #6
    3700:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3702:	2600      	movs	r6, #0
    3704:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    3708:	f105 0818 	add.w	r8, r5, #24
    370c:	4620      	mov	r0, r4
    370e:	4b1b      	ldr	r3, [pc, #108]	; (377c <_spi_m_dma_init+0x12c>)
    3710:	4798      	blx	r3
    3712:	4601      	mov	r1, r0
    3714:	4640      	mov	r0, r8
    3716:	4f1a      	ldr	r7, [pc, #104]	; (3780 <_spi_m_dma_init+0x130>)
    3718:	47b8      	blx	r7
	dev->resource->back                 = dev;
    371a:	69ab      	ldr	r3, [r5, #24]
    371c:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    371e:	69ab      	ldr	r3, [r5, #24]
    3720:	4a18      	ldr	r2, [pc, #96]	; (3784 <_spi_m_dma_init+0x134>)
    3722:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3724:	69ab      	ldr	r3, [r5, #24]
    3726:	4c18      	ldr	r4, [pc, #96]	; (3788 <_spi_m_dma_init+0x138>)
    3728:	605c      	str	r4, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    372a:	4631      	mov	r1, r6
    372c:	4640      	mov	r0, r8
    372e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3730:	69ab      	ldr	r3, [r5, #24]
    3732:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    3734:	69ab      	ldr	r3, [r5, #24]
    3736:	4a15      	ldr	r2, [pc, #84]	; (378c <_spi_m_dma_init+0x13c>)
    3738:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    373a:	69ab      	ldr	r3, [r5, #24]
    373c:	605c      	str	r4, [r3, #4]

	return ERR_NONE;
    373e:	4630      	mov	r0, r6
    3740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3744:	f640 5286 	movw	r2, #3462	; 0xd86
    3748:	4909      	ldr	r1, [pc, #36]	; (3770 <_spi_m_dma_init+0x120>)
    374a:	2000      	movs	r0, #0
    374c:	4b09      	ldr	r3, [pc, #36]	; (3774 <_spi_m_dma_init+0x124>)
    374e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3750:	f06f 000c 	mvn.w	r0, #12
    3754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3758:	f640 5286 	movw	r2, #3462	; 0xd86
    375c:	4904      	ldr	r1, [pc, #16]	; (3770 <_spi_m_dma_init+0x120>)
    375e:	1c20      	adds	r0, r4, #0
    3760:	bf18      	it	ne
    3762:	2001      	movne	r0, #1
    3764:	4b03      	ldr	r3, [pc, #12]	; (3774 <_spi_m_dma_init+0x124>)
    3766:	4798      	blx	r3
    3768:	e791      	b.n	368e <_spi_m_dma_init+0x3e>
    376a:	bf00      	nop
    376c:	00002b7d 	.word	0x00002b7d
    3770:	00007710 	.word	0x00007710
    3774:	00001edd 	.word	0x00001edd
    3778:	0020000c 	.word	0x0020000c
    377c:	00002cc9 	.word	0x00002cc9
    3780:	00002741 	.word	0x00002741
    3784:	00002cdd 	.word	0x00002cdd
    3788:	00002cf5 	.word	0x00002cf5
    378c:	00002ce9 	.word	0x00002ce9

00003790 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    3790:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3792:	4604      	mov	r4, r0
    3794:	b160      	cbz	r0, 37b0 <_spi_m_dma_enable+0x20>
    3796:	6800      	ldr	r0, [r0, #0]
    3798:	3000      	adds	r0, #0
    379a:	bf18      	it	ne
    379c:	2001      	movne	r0, #1
    379e:	f640 52af 	movw	r2, #3503	; 0xdaf
    37a2:	4904      	ldr	r1, [pc, #16]	; (37b4 <_spi_m_dma_enable+0x24>)
    37a4:	4b04      	ldr	r3, [pc, #16]	; (37b8 <_spi_m_dma_enable+0x28>)
    37a6:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    37a8:	6820      	ldr	r0, [r4, #0]
    37aa:	4b04      	ldr	r3, [pc, #16]	; (37bc <_spi_m_dma_enable+0x2c>)
    37ac:	4798      	blx	r3
}
    37ae:	bd10      	pop	{r4, pc}
    37b0:	2000      	movs	r0, #0
    37b2:	e7f4      	b.n	379e <_spi_m_dma_enable+0xe>
    37b4:	00007710 	.word	0x00007710
    37b8:	00001edd 	.word	0x00001edd
    37bc:	00002ca5 	.word	0x00002ca5

000037c0 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    37c0:	b538      	push	{r3, r4, r5, lr}
    37c2:	4614      	mov	r4, r2
	switch (type) {
    37c4:	2901      	cmp	r1, #1
    37c6:	d00c      	beq.n	37e2 <_spi_m_dma_register_callback+0x22>
    37c8:	b111      	cbz	r1, 37d0 <_spi_m_dma_register_callback+0x10>
    37ca:	2902      	cmp	r1, #2
    37cc:	d014      	beq.n	37f8 <_spi_m_dma_register_callback+0x38>
    37ce:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    37d0:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    37d2:	3200      	adds	r2, #0
    37d4:	bf18      	it	ne
    37d6:	2201      	movne	r2, #1
    37d8:	2100      	movs	r1, #0
    37da:	4608      	mov	r0, r1
    37dc:	4b0e      	ldr	r3, [pc, #56]	; (3818 <_spi_m_dma_register_callback+0x58>)
    37de:	4798      	blx	r3
		break;
    37e0:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    37e2:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    37e4:	6800      	ldr	r0, [r0, #0]
    37e6:	4b0d      	ldr	r3, [pc, #52]	; (381c <_spi_m_dma_register_callback+0x5c>)
    37e8:	4798      	blx	r3
    37ea:	1c22      	adds	r2, r4, #0
    37ec:	bf18      	it	ne
    37ee:	2201      	movne	r2, #1
    37f0:	2100      	movs	r1, #0
    37f2:	4b09      	ldr	r3, [pc, #36]	; (3818 <_spi_m_dma_register_callback+0x58>)
    37f4:	4798      	blx	r3
		break;
    37f6:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    37f8:	60c2      	str	r2, [r0, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    37fa:	6800      	ldr	r0, [r0, #0]
    37fc:	4b07      	ldr	r3, [pc, #28]	; (381c <_spi_m_dma_register_callback+0x5c>)
    37fe:	4798      	blx	r3
    3800:	3400      	adds	r4, #0
    3802:	bf18      	it	ne
    3804:	2401      	movne	r4, #1
    3806:	4622      	mov	r2, r4
    3808:	2101      	movs	r1, #1
    380a:	4d03      	ldr	r5, [pc, #12]	; (3818 <_spi_m_dma_register_callback+0x58>)
    380c:	47a8      	blx	r5
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    380e:	4622      	mov	r2, r4
    3810:	2101      	movs	r1, #1
    3812:	2000      	movs	r0, #0
    3814:	47a8      	blx	r5
    3816:	bd38      	pop	{r3, r4, r5, pc}
    3818:	00002619 	.word	0x00002619
    381c:	00002cc9 	.word	0x00002cc9

00003820 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    3820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3824:	4604      	mov	r4, r0
    3826:	4689      	mov	r9, r1
    3828:	4617      	mov	r7, r2
    382a:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    382c:	f8d0 a000 	ldr.w	sl, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3830:	4650      	mov	r0, sl
    3832:	4b3f      	ldr	r3, [pc, #252]	; (3930 <_spi_m_dma_transfer+0x110>)
    3834:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3836:	2807      	cmp	r0, #7
			return &sercomspi_regs[i];
    3838:	4e3e      	ldr	r6, [pc, #248]	; (3934 <_spi_m_dma_transfer+0x114>)
    383a:	bf18      	it	ne
    383c:	2600      	movne	r6, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    383e:	4650      	mov	r0, sl
    3840:	4b3d      	ldr	r3, [pc, #244]	; (3938 <_spi_m_dma_transfer+0x118>)
    3842:	4798      	blx	r3
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
    3844:	2f00      	cmp	r7, #0
    3846:	d046      	beq.n	38d6 <_spi_m_dma_transfer+0xb6>
    3848:	4605      	mov	r5, r0
	ASSERT(dev && dev->prvt);
    384a:	2c00      	cmp	r4, #0
    384c:	d041      	beq.n	38d2 <_spi_m_dma_transfer+0xb2>
    384e:	f11a 0000 	adds.w	r0, sl, #0
    3852:	bf18      	it	ne
    3854:	2001      	movne	r0, #1
    3856:	f640 42f9 	movw	r2, #3321	; 0xcf9
    385a:	4938      	ldr	r1, [pc, #224]	; (393c <_spi_m_dma_transfer+0x11c>)
    385c:	4b38      	ldr	r3, [pc, #224]	; (3940 <_spi_m_dma_transfer+0x120>)
    385e:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    3860:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3862:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3864:	f013 0f04 	tst.w	r3, #4
    3868:	d107      	bne.n	387a <_spi_m_dma_transfer+0x5a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    386a:	6853      	ldr	r3, [r2, #4]
    386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3870:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3872:	69d3      	ldr	r3, [r2, #28]
    3874:	f013 0f17 	tst.w	r3, #23
    3878:	d1fb      	bne.n	3872 <_spi_m_dma_transfer+0x52>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    387a:	6821      	ldr	r1, [r4, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    387c:	3128      	adds	r1, #40	; 0x28
    387e:	4628      	mov	r0, r5
    3880:	4b30      	ldr	r3, [pc, #192]	; (3944 <_spi_m_dma_transfer+0x124>)
    3882:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3884:	4639      	mov	r1, r7
    3886:	4628      	mov	r0, r5
    3888:	4b2f      	ldr	r3, [pc, #188]	; (3948 <_spi_m_dma_transfer+0x128>)
    388a:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    388c:	4641      	mov	r1, r8
    388e:	4628      	mov	r0, r5
    3890:	4b2e      	ldr	r3, [pc, #184]	; (394c <_spi_m_dma_transfer+0x12c>)
    3892:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3894:	2100      	movs	r1, #0
    3896:	4628      	mov	r0, r5
    3898:	4b2d      	ldr	r3, [pc, #180]	; (3950 <_spi_m_dma_transfer+0x130>)
    389a:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    389c:	f1b9 0f00 	cmp.w	r9, #0
    38a0:	d033      	beq.n	390a <_spi_m_dma_transfer+0xea>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    38a2:	4649      	mov	r1, r9
    38a4:	2000      	movs	r0, #0
    38a6:	4b27      	ldr	r3, [pc, #156]	; (3944 <_spi_m_dma_transfer+0x124>)
    38a8:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    38aa:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    38ac:	3128      	adds	r1, #40	; 0x28
    38ae:	2000      	movs	r0, #0
    38b0:	4b25      	ldr	r3, [pc, #148]	; (3948 <_spi_m_dma_transfer+0x128>)
    38b2:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    38b4:	2101      	movs	r1, #1
    38b6:	2000      	movs	r0, #0
    38b8:	4b26      	ldr	r3, [pc, #152]	; (3954 <_spi_m_dma_transfer+0x134>)
    38ba:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    38bc:	4641      	mov	r1, r8
    38be:	2000      	movs	r0, #0
    38c0:	4b22      	ldr	r3, [pc, #136]	; (394c <_spi_m_dma_transfer+0x12c>)
    38c2:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    38c4:	2100      	movs	r1, #0
    38c6:	4608      	mov	r0, r1
    38c8:	4b21      	ldr	r3, [pc, #132]	; (3950 <_spi_m_dma_transfer+0x130>)
    38ca:	4798      	blx	r3

	return ERR_NONE;
}
    38cc:	2000      	movs	r0, #0
    38ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(dev && dev->prvt);
    38d2:	2000      	movs	r0, #0
    38d4:	e7bf      	b.n	3856 <_spi_m_dma_transfer+0x36>
	ASSERT(dev && dev->prvt);
    38d6:	b1b4      	cbz	r4, 3906 <_spi_m_dma_transfer+0xe6>
    38d8:	f11a 0000 	adds.w	r0, sl, #0
    38dc:	bf18      	it	ne
    38de:	2001      	movne	r0, #1
    38e0:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    38e4:	4915      	ldr	r1, [pc, #84]	; (393c <_spi_m_dma_transfer+0x11c>)
    38e6:	4b16      	ldr	r3, [pc, #88]	; (3940 <_spi_m_dma_transfer+0x120>)
    38e8:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    38ea:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    38ec:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    38ee:	f013 0f04 	tst.w	r3, #4
    38f2:	d1d3      	bne.n	389c <_spi_m_dma_transfer+0x7c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    38f4:	6853      	ldr	r3, [r2, #4]
    38f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    38fa:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    38fc:	69d3      	ldr	r3, [r2, #28]
    38fe:	f013 0f17 	tst.w	r3, #23
    3902:	d1fb      	bne.n	38fc <_spi_m_dma_transfer+0xdc>
    3904:	e7ca      	b.n	389c <_spi_m_dma_transfer+0x7c>
	ASSERT(dev && dev->prvt);
    3906:	2000      	movs	r0, #0
    3908:	e7ea      	b.n	38e0 <_spi_m_dma_transfer+0xc0>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    390a:	f106 010e 	add.w	r1, r6, #14
    390e:	2000      	movs	r0, #0
    3910:	4b0c      	ldr	r3, [pc, #48]	; (3944 <_spi_m_dma_transfer+0x124>)
    3912:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3914:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3916:	3128      	adds	r1, #40	; 0x28
    3918:	2000      	movs	r0, #0
    391a:	4b0b      	ldr	r3, [pc, #44]	; (3948 <_spi_m_dma_transfer+0x128>)
    391c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    391e:	2100      	movs	r1, #0
    3920:	4608      	mov	r0, r1
    3922:	4b0c      	ldr	r3, [pc, #48]	; (3954 <_spi_m_dma_transfer+0x134>)
    3924:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3926:	4641      	mov	r1, r8
    3928:	2000      	movs	r0, #0
    392a:	4b08      	ldr	r3, [pc, #32]	; (394c <_spi_m_dma_transfer+0x12c>)
    392c:	4798      	blx	r3
    392e:	e7c9      	b.n	38c4 <_spi_m_dma_transfer+0xa4>
    3930:	00002b7d 	.word	0x00002b7d
    3934:	000076fc 	.word	0x000076fc
    3938:	00002cc9 	.word	0x00002cc9
    393c:	00007710 	.word	0x00007710
    3940:	00001edd 	.word	0x00001edd
    3944:	0000267d 	.word	0x0000267d
    3948:	0000266d 	.word	0x0000266d
    394c:	000026a9 	.word	0x000026a9
    3950:	00002701 	.word	0x00002701
    3954:	0000268d 	.word	0x0000268d

00003958 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3958:	4b03      	ldr	r3, [pc, #12]	; (3968 <_delay_init+0x10>)
    395a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    395e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3960:	2205      	movs	r2, #5
    3962:	601a      	str	r2, [r3, #0]
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	e000e010 	.word	0xe000e010

0000396c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    396c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    396e:	b303      	cbz	r3, 39b2 <_delay_cycles+0x46>
{
    3970:	b430      	push	{r4, r5}
    3972:	1e5d      	subs	r5, r3, #1
    3974:	b2ed      	uxtb	r5, r5
	while (n--) {
    3976:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3978:	4a12      	ldr	r2, [pc, #72]	; (39c4 <_delay_cycles+0x58>)
    397a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    397e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3980:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3982:	6813      	ldr	r3, [r2, #0]
    3984:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3988:	d0fb      	beq.n	3982 <_delay_cycles+0x16>
	while (n--) {
    398a:	3801      	subs	r0, #1
    398c:	b2c0      	uxtb	r0, r0
    398e:	28ff      	cmp	r0, #255	; 0xff
    3990:	d1f5      	bne.n	397e <_delay_cycles+0x12>
    3992:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3996:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    399a:	3101      	adds	r1, #1
    399c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    399e:	4b09      	ldr	r3, [pc, #36]	; (39c4 <_delay_cycles+0x58>)
    39a0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    39a2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    39a4:	461a      	mov	r2, r3
    39a6:	6813      	ldr	r3, [r2, #0]
    39a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    39ac:	d0fb      	beq.n	39a6 <_delay_cycles+0x3a>
		;
}
    39ae:	bc30      	pop	{r4, r5}
    39b0:	4770      	bx	lr
	SysTick->LOAD = buf;
    39b2:	4b04      	ldr	r3, [pc, #16]	; (39c4 <_delay_cycles+0x58>)
    39b4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    39b6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    39b8:	461a      	mov	r2, r3
    39ba:	6813      	ldr	r3, [r2, #0]
    39bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    39c0:	d0fb      	beq.n	39ba <_delay_cycles+0x4e>
    39c2:	4770      	bx	lr
    39c4:	e000e010 	.word	0xe000e010

000039c8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    39c8:	2000      	movs	r0, #0
    39ca:	4770      	bx	lr

000039cc <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    39cc:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    39ce:	7c83      	ldrb	r3, [r0, #18]
    39d0:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    39d4:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    39d6:	f002 0107 	and.w	r1, r2, #7
    39da:	2901      	cmp	r1, #1
    39dc:	d00b      	beq.n	39f6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    39de:	015a      	lsls	r2, r3, #5
    39e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    39e4:	2110      	movs	r1, #16
    39e6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    39ea:	015b      	lsls	r3, r3, #5
    39ec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    39f0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    39f4:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    39f6:	f012 0f40 	tst.w	r2, #64	; 0x40
    39fa:	d00c      	beq.n	3a16 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    39fc:	7cc2      	ldrb	r2, [r0, #19]
    39fe:	f36f 1286 	bfc	r2, #6, #1
    3a02:	74c2      	strb	r2, [r0, #19]
    3a04:	015a      	lsls	r2, r3, #5
    3a06:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3a0a:	2180      	movs	r1, #128	; 0x80
    3a0c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3a10:	2140      	movs	r1, #64	; 0x40
    3a12:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    3a16:	7cc2      	ldrb	r2, [r0, #19]
    3a18:	f36f 02c3 	bfc	r2, #3, #1
    3a1c:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    3a1e:	4909      	ldr	r1, [pc, #36]	; (3a44 <_usb_d_dev_handle_setup+0x78>)
    3a20:	015a      	lsls	r2, r3, #5
    3a22:	188c      	adds	r4, r1, r2
    3a24:	2500      	movs	r5, #0
    3a26:	72a5      	strb	r5, [r4, #10]
    3a28:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3a2a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    3a2e:	246f      	movs	r4, #111	; 0x6f
    3a30:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3a34:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3a38:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    3a3c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    3a3e:	7c80      	ldrb	r0, [r0, #18]
    3a40:	4798      	blx	r3
    3a42:	bd38      	pop	{r3, r4, r5, pc}
    3a44:	200007c4 	.word	0x200007c4

00003a48 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3a48:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3a4a:	2320      	movs	r3, #32
    3a4c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3a50:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3a52:	7c83      	ldrb	r3, [r0, #18]
    3a54:	f003 030f 	and.w	r3, r3, #15
    3a58:	015b      	lsls	r3, r3, #5
    3a5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3a5e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3a62:	4b03      	ldr	r3, [pc, #12]	; (3a70 <_usb_d_dev_handle_stall+0x28>)
    3a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3a66:	6882      	ldr	r2, [r0, #8]
    3a68:	2101      	movs	r1, #1
    3a6a:	7c80      	ldrb	r0, [r0, #18]
    3a6c:	4798      	blx	r3
    3a6e:	bd08      	pop	{r3, pc}
    3a70:	200007c4 	.word	0x200007c4

00003a74 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3a74:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3a76:	7c84      	ldrb	r4, [r0, #18]
    3a78:	2cff      	cmp	r4, #255	; 0xff
    3a7a:	d003      	beq.n	3a84 <_usb_d_dev_trans_done+0x10>
    3a7c:	7cc3      	ldrb	r3, [r0, #19]
    3a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3a82:	d100      	bne.n	3a86 <_usb_d_dev_trans_done+0x12>
    3a84:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    3a86:	7cc2      	ldrb	r2, [r0, #19]
    3a88:	f36f 1286 	bfc	r2, #6, #1
    3a8c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3a8e:	4a03      	ldr	r2, [pc, #12]	; (3a9c <_usb_d_dev_trans_done+0x28>)
    3a90:	6f15      	ldr	r5, [r2, #112]	; 0x70
    3a92:	6882      	ldr	r2, [r0, #8]
    3a94:	4620      	mov	r0, r4
    3a96:	47a8      	blx	r5
    3a98:	e7f4      	b.n	3a84 <_usb_d_dev_trans_done+0x10>
    3a9a:	bf00      	nop
    3a9c:	200007c4 	.word	0x200007c4

00003aa0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3aa0:	b530      	push	{r4, r5, lr}
    3aa2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3aa4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3aa6:	2425      	movs	r4, #37	; 0x25
    3aa8:	f88d 4004 	strb.w	r4, [sp, #4]
    3aac:	244a      	movs	r4, #74	; 0x4a
    3aae:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3ab2:	2bff      	cmp	r3, #255	; 0xff
    3ab4:	d01e      	beq.n	3af4 <_usb_d_dev_trans_stop+0x54>
    3ab6:	7cc4      	ldrb	r4, [r0, #19]
    3ab8:	f014 0f40 	tst.w	r4, #64	; 0x40
    3abc:	d01a      	beq.n	3af4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3abe:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    3ac2:	b1c9      	cbz	r1, 3af8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ac4:	0163      	lsls	r3, r4, #5
    3ac6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3aca:	2580      	movs	r5, #128	; 0x80
    3acc:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    3ad0:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3ad2:	a902      	add	r1, sp, #8
    3ad4:	440b      	add	r3, r1
    3ad6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3ada:	0163      	lsls	r3, r4, #5
    3adc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3ae0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3ae4:	0163      	lsls	r3, r4, #5
    3ae6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3aea:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    3aee:	4611      	mov	r1, r2
    3af0:	4b05      	ldr	r3, [pc, #20]	; (3b08 <_usb_d_dev_trans_stop+0x68>)
    3af2:	4798      	blx	r3
}
    3af4:	b003      	add	sp, #12
    3af6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3af8:	0163      	lsls	r3, r4, #5
    3afa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3afe:	2540      	movs	r5, #64	; 0x40
    3b00:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    3b04:	e7e4      	b.n	3ad0 <_usb_d_dev_trans_stop+0x30>
    3b06:	bf00      	nop
    3b08:	00003a75 	.word	0x00003a75

00003b0c <_usb_d_dev_handle_trfail>:
{
    3b0c:	b530      	push	{r4, r5, lr}
    3b0e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3b10:	7c83      	ldrb	r3, [r0, #18]
    3b12:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    3b16:	2204      	movs	r2, #4
    3b18:	f88d 2004 	strb.w	r2, [sp, #4]
    3b1c:	2208      	movs	r2, #8
    3b1e:	f88d 2005 	strb.w	r2, [sp, #5]
    3b22:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    3b24:	460c      	mov	r4, r1
    3b26:	b391      	cbz	r1, 3b8e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3b28:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    3b2c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    3b30:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    3b34:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3b38:	4a32      	ldr	r2, [pc, #200]	; (3c04 <_usb_d_dev_handle_trfail+0xf8>)
    3b3a:	440a      	add	r2, r1
    3b3c:	7a91      	ldrb	r1, [r2, #10]
    3b3e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3b40:	2d02      	cmp	r5, #2
    3b42:	d02c      	beq.n	3b9e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    3b44:	f011 0f02 	tst.w	r1, #2
    3b48:	d045      	beq.n	3bd6 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3b4a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3b4c:	7a91      	ldrb	r1, [r2, #10]
    3b4e:	f36f 0141 	bfc	r1, #1, #1
    3b52:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3b54:	aa02      	add	r2, sp, #8
    3b56:	4422      	add	r2, r4
    3b58:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3b5c:	015a      	lsls	r2, r3, #5
    3b5e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3b62:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3b66:	015b      	lsls	r3, r3, #5
    3b68:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3b6c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3b70:	f005 0307 	and.w	r3, r5, #7
    3b74:	2b01      	cmp	r3, #1
    3b76:	d143      	bne.n	3c00 <_usb_d_dev_handle_trfail+0xf4>
    3b78:	7cc3      	ldrb	r3, [r0, #19]
    3b7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b7e:	d03f      	beq.n	3c00 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3b80:	09d9      	lsrs	r1, r3, #7
    3b82:	428c      	cmp	r4, r1
    3b84:	d03c      	beq.n	3c00 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3b86:	2200      	movs	r2, #0
    3b88:	4b1f      	ldr	r3, [pc, #124]	; (3c08 <_usb_d_dev_handle_trfail+0xfc>)
    3b8a:	4798      	blx	r3
    3b8c:	e038      	b.n	3c00 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3b8e:	0159      	lsls	r1, r3, #5
    3b90:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3b94:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3b98:	f005 0507 	and.w	r5, r5, #7
    3b9c:	e7ca      	b.n	3b34 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3b9e:	f011 0f01 	tst.w	r1, #1
    3ba2:	d0cf      	beq.n	3b44 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3ba4:	7a91      	ldrb	r1, [r2, #10]
    3ba6:	f36f 0100 	bfc	r1, #0, #1
    3baa:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3bac:	aa02      	add	r2, sp, #8
    3bae:	4422      	add	r2, r4
    3bb0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3bb4:	015a      	lsls	r2, r3, #5
    3bb6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3bba:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3bbe:	015b      	lsls	r3, r3, #5
    3bc0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3bc4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3bc8:	2204      	movs	r2, #4
    3bca:	1c21      	adds	r1, r4, #0
    3bcc:	bf18      	it	ne
    3bce:	2101      	movne	r1, #1
    3bd0:	4b0d      	ldr	r3, [pc, #52]	; (3c08 <_usb_d_dev_handle_trfail+0xfc>)
    3bd2:	4798      	blx	r3
    3bd4:	e014      	b.n	3c00 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    3bd6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    3bda:	4a0a      	ldr	r2, [pc, #40]	; (3c04 <_usb_d_dev_handle_trfail+0xf8>)
    3bdc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    3be0:	2100      	movs	r1, #0
    3be2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3be4:	aa02      	add	r2, sp, #8
    3be6:	4414      	add	r4, r2
    3be8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3bec:	015a      	lsls	r2, r3, #5
    3bee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3bf2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3bf6:	015b      	lsls	r3, r3, #5
    3bf8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3bfc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    3c00:	b003      	add	sp, #12
    3c02:	bd30      	pop	{r4, r5, pc}
    3c04:	200007c4 	.word	0x200007c4
    3c08:	00003aa1 	.word	0x00003aa1

00003c0c <_usb_d_dev_reset_epts>:
{
    3c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c10:	4d0c      	ldr	r5, [pc, #48]	; (3c44 <_usb_d_dev_reset_epts+0x38>)
    3c12:	f105 0474 	add.w	r4, r5, #116	; 0x74
    3c16:	f505 7524 	add.w	r5, r5, #656	; 0x290
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3c1a:	f04f 0803 	mov.w	r8, #3
    3c1e:	4f0a      	ldr	r7, [pc, #40]	; (3c48 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    3c20:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3c22:	4641      	mov	r1, r8
    3c24:	4620      	mov	r0, r4
    3c26:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    3c28:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    3c2a:	2300      	movs	r3, #0
    3c2c:	74e3      	strb	r3, [r4, #19]
    3c2e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3c30:	42ac      	cmp	r4, r5
    3c32:	d1f6      	bne.n	3c22 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3c34:	2260      	movs	r2, #96	; 0x60
    3c36:	4619      	mov	r1, r3
    3c38:	4802      	ldr	r0, [pc, #8]	; (3c44 <_usb_d_dev_reset_epts+0x38>)
    3c3a:	4b04      	ldr	r3, [pc, #16]	; (3c4c <_usb_d_dev_reset_epts+0x40>)
    3c3c:	4798      	blx	r3
    3c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c42:	bf00      	nop
    3c44:	200007c4 	.word	0x200007c4
    3c48:	00003a75 	.word	0x00003a75
    3c4c:	00006acb 	.word	0x00006acb

00003c50 <_usb_d_dev_in_next>:
{
    3c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c54:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    3c56:	7c84      	ldrb	r4, [r0, #18]
    3c58:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3c5c:	4688      	mov	r8, r1
    3c5e:	2900      	cmp	r1, #0
    3c60:	f000 809f 	beq.w	3da2 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3c64:	4b58      	ldr	r3, [pc, #352]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3c66:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3c6a:	6958      	ldr	r0, [r3, #20]
    3c6c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3c70:	8a2b      	ldrh	r3, [r5, #16]
    3c72:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3c76:	4293      	cmp	r3, r2
    3c78:	f000 808d 	beq.w	3d96 <_usb_d_dev_in_next+0x146>
    3c7c:	3b01      	subs	r3, #1
    3c7e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3c80:	7cef      	ldrb	r7, [r5, #19]
    3c82:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    3c86:	f1b8 0f00 	cmp.w	r8, #0
    3c8a:	d005      	beq.n	3c98 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3c8c:	0162      	lsls	r2, r4, #5
    3c8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3c92:	2302      	movs	r3, #2
    3c94:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    3c98:	68a9      	ldr	r1, [r5, #8]
    3c9a:	eb0e 0301 	add.w	r3, lr, r1
    3c9e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    3ca0:	686e      	ldr	r6, [r5, #4]
    3ca2:	42b3      	cmp	r3, r6
    3ca4:	d23f      	bcs.n	3d26 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    3ca6:	1af6      	subs	r6, r6, r3
    3ca8:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    3caa:	7cea      	ldrb	r2, [r5, #19]
    3cac:	f012 0f20 	tst.w	r2, #32
    3cb0:	d02d      	beq.n	3d0e <_usb_d_dev_in_next+0xbe>
    3cb2:	8a2a      	ldrh	r2, [r5, #16]
    3cb4:	4296      	cmp	r6, r2
    3cb6:	bf28      	it	cs
    3cb8:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    3cba:	6829      	ldr	r1, [r5, #0]
    3cbc:	4632      	mov	r2, r6
    3cbe:	4419      	add	r1, r3
    3cc0:	68e8      	ldr	r0, [r5, #12]
    3cc2:	4b42      	ldr	r3, [pc, #264]	; (3dcc <_usb_d_dev_in_next+0x17c>)
    3cc4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3cc6:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    3cc8:	4b3f      	ldr	r3, [pc, #252]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3cca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3cce:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3cd0:	4b3d      	ldr	r3, [pc, #244]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3cd2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3cd6:	695a      	ldr	r2, [r3, #20]
    3cd8:	f366 020d 	bfi	r2, r6, #0, #14
    3cdc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3cde:	695a      	ldr	r2, [r3, #20]
    3ce0:	f36f 329b 	bfc	r2, #14, #14
    3ce4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    3ce6:	f1b8 0f00 	cmp.w	r8, #0
    3cea:	d108      	bne.n	3cfe <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    3cec:	2f01      	cmp	r7, #1
    3cee:	bf0c      	ite	eq
    3cf0:	224e      	moveq	r2, #78	; 0x4e
    3cf2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3cf4:	0163      	lsls	r3, r4, #5
    3cf6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3cfa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3cfe:	0164      	lsls	r4, r4, #5
    3d00:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3d04:	2380      	movs	r3, #128	; 0x80
    3d06:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    3d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d0e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    3d12:	bf28      	it	cs
    3d14:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3d18:	6829      	ldr	r1, [r5, #0]
    3d1a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    3d1c:	4a2a      	ldr	r2, [pc, #168]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3d1e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    3d22:	6113      	str	r3, [r2, #16]
    3d24:	e7d4      	b.n	3cd0 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    3d26:	7ceb      	ldrb	r3, [r5, #19]
    3d28:	f013 0f10 	tst.w	r3, #16
    3d2c:	d00f      	beq.n	3d4e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    3d2e:	7ceb      	ldrb	r3, [r5, #19]
    3d30:	f36f 1304 	bfc	r3, #4, #1
    3d34:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3d36:	4b24      	ldr	r3, [pc, #144]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3d38:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3d3c:	695a      	ldr	r2, [r3, #20]
    3d3e:	f36f 020d 	bfc	r2, #0, #14
    3d42:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3d44:	695a      	ldr	r2, [r3, #20]
    3d46:	f36f 329b 	bfc	r2, #14, #14
    3d4a:	615a      	str	r2, [r3, #20]
    3d4c:	e7cb      	b.n	3ce6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    3d4e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3d50:	ea4f 1444 	mov.w	r4, r4, lsl #5
    3d54:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3d58:	bf0c      	ite	eq
    3d5a:	234b      	moveq	r3, #75	; 0x4b
    3d5c:	234a      	movne	r3, #74	; 0x4a
    3d5e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    3d62:	8a2a      	ldrh	r2, [r5, #16]
    3d64:	ea00 030e 	and.w	r3, r0, lr
    3d68:	429a      	cmp	r2, r3
    3d6a:	d005      	beq.n	3d78 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3d6c:	2100      	movs	r1, #0
    3d6e:	4628      	mov	r0, r5
    3d70:	4b17      	ldr	r3, [pc, #92]	; (3dd0 <_usb_d_dev_in_next+0x180>)
    3d72:	4798      	blx	r3
	return;
    3d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    3d78:	7ceb      	ldrb	r3, [r5, #19]
    3d7a:	f36f 1386 	bfc	r3, #6, #1
    3d7e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    3d80:	4b11      	ldr	r3, [pc, #68]	; (3dc8 <_usb_d_dev_in_next+0x178>)
    3d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3d84:	68a9      	ldr	r1, [r5, #8]
    3d86:	7ca8      	ldrb	r0, [r5, #18]
    3d88:	4798      	blx	r3
    3d8a:	b9d0      	cbnz	r0, 3dc2 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    3d8c:	7ceb      	ldrb	r3, [r5, #19]
    3d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3d92:	74eb      	strb	r3, [r5, #19]
    3d94:	e7ea      	b.n	3d6c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3d96:	7cef      	ldrb	r7, [r5, #19]
    3d98:	f007 0707 	and.w	r7, r7, #7
    3d9c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3da0:	e774      	b.n	3c8c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3da2:	8a03      	ldrh	r3, [r0, #16]
    3da4:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3da8:	4293      	cmp	r3, r2
    3daa:	d107      	bne.n	3dbc <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3dac:	7cef      	ldrb	r7, [r5, #19]
    3dae:	f007 0707 	and.w	r7, r7, #7
    3db2:	f04f 0e00 	mov.w	lr, #0
    3db6:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3dba:	e76d      	b.n	3c98 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3dbc:	f04f 0e00 	mov.w	lr, #0
    3dc0:	e75c      	b.n	3c7c <_usb_d_dev_in_next+0x2c>
    3dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dc6:	bf00      	nop
    3dc8:	200007c4 	.word	0x200007c4
    3dcc:	00006ab5 	.word	0x00006ab5
    3dd0:	00003a75 	.word	0x00003a75

00003dd4 <_usb_d_dev_out_next>:
{
    3dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dd8:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3dda:	7c85      	ldrb	r5, [r0, #18]
    3ddc:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3de0:	4689      	mov	r9, r1
    3de2:	2900      	cmp	r1, #0
    3de4:	d056      	beq.n	3e94 <_usb_d_dev_out_next+0xc0>
    3de6:	4b74      	ldr	r3, [pc, #464]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3de8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3dec:	685a      	ldr	r2, [r3, #4]
    3dee:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3df2:	685f      	ldr	r7, [r3, #4]
    3df4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    3df8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3dfa:	8a06      	ldrh	r6, [r0, #16]
    3dfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3e00:	429e      	cmp	r6, r3
    3e02:	f000 80ba 	beq.w	3f7a <_usb_d_dev_out_next+0x1a6>
    3e06:	3e01      	subs	r6, #1
    3e08:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    3e0a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3e0e:	f894 8013 	ldrb.w	r8, [r4, #19]
    3e12:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    3e16:	f1b9 0f00 	cmp.w	r9, #0
    3e1a:	d005      	beq.n	3e28 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3e1c:	016b      	lsls	r3, r5, #5
    3e1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3e22:	2201      	movs	r2, #1
    3e24:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3e28:	7ce3      	ldrb	r3, [r4, #19]
    3e2a:	f013 0f20 	tst.w	r3, #32
    3e2e:	d00d      	beq.n	3e4c <_usb_d_dev_out_next+0x78>
    3e30:	6862      	ldr	r2, [r4, #4]
    3e32:	2a00      	cmp	r2, #0
    3e34:	d037      	beq.n	3ea6 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3e36:	68a0      	ldr	r0, [r4, #8]
    3e38:	1a12      	subs	r2, r2, r0
    3e3a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3e3c:	6823      	ldr	r3, [r4, #0]
    3e3e:	42ba      	cmp	r2, r7
    3e40:	bf28      	it	cs
    3e42:	463a      	movcs	r2, r7
    3e44:	68e1      	ldr	r1, [r4, #12]
    3e46:	4418      	add	r0, r3
    3e48:	4b5c      	ldr	r3, [pc, #368]	; (3fbc <_usb_d_dev_out_next+0x1e8>)
    3e4a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3e4c:	6863      	ldr	r3, [r4, #4]
    3e4e:	b353      	cbz	r3, 3ea6 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    3e50:	f1b9 0f00 	cmp.w	r9, #0
    3e54:	d040      	beq.n	3ed8 <_usb_d_dev_out_next+0x104>
    3e56:	8a22      	ldrh	r2, [r4, #16]
    3e58:	42ba      	cmp	r2, r7
    3e5a:	d93d      	bls.n	3ed8 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    3e5c:	7ce3      	ldrb	r3, [r4, #19]
    3e5e:	f36f 1304 	bfc	r3, #4, #1
    3e62:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3e64:	68a3      	ldr	r3, [r4, #8]
    3e66:	445b      	add	r3, fp
    3e68:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3e6a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3e6e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    3e72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3e76:	bf0c      	ite	eq
    3e78:	222d      	moveq	r2, #45	; 0x2d
    3e7a:	2225      	movne	r2, #37	; 0x25
    3e7c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    3e80:	b915      	cbnz	r5, 3e88 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3e82:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3e84:	4b4c      	ldr	r3, [pc, #304]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3e86:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3e88:	2100      	movs	r1, #0
    3e8a:	4620      	mov	r0, r4
    3e8c:	4b4c      	ldr	r3, [pc, #304]	; (3fc0 <_usb_d_dev_out_next+0x1ec>)
    3e8e:	4798      	blx	r3
	return;
    3e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3e94:	8a06      	ldrh	r6, [r0, #16]
    3e96:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3e9a:	429e      	cmp	r6, r3
    3e9c:	d07b      	beq.n	3f96 <_usb_d_dev_out_next+0x1c2>
    3e9e:	f04f 0b00 	mov.w	fp, #0
    3ea2:	46da      	mov	sl, fp
    3ea4:	e7af      	b.n	3e06 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3ea6:	7ce3      	ldrb	r3, [r4, #19]
    3ea8:	f013 0f10 	tst.w	r3, #16
    3eac:	d06c      	beq.n	3f88 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    3eae:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3eb0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3eb4:	f043 0320 	orr.w	r3, r3, #32
    3eb8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3eba:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3ebc:	493e      	ldr	r1, [pc, #248]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3ebe:	016a      	lsls	r2, r5, #5
    3ec0:	188b      	adds	r3, r1, r2
    3ec2:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3ec4:	8a21      	ldrh	r1, [r4, #16]
    3ec6:	685a      	ldr	r2, [r3, #4]
    3ec8:	f361 329b 	bfi	r2, r1, #14, #14
    3ecc:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3ece:	685a      	ldr	r2, [r3, #4]
    3ed0:	f36f 020d 	bfc	r2, #0, #14
    3ed4:	605a      	str	r2, [r3, #4]
    3ed6:	e01d      	b.n	3f14 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    3ed8:	68a2      	ldr	r2, [r4, #8]
    3eda:	4452      	add	r2, sl
    3edc:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3ede:	4293      	cmp	r3, r2
    3ee0:	d9c3      	bls.n	3e6a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    3ee2:	1a9b      	subs	r3, r3, r2
    3ee4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    3ee6:	7ce1      	ldrb	r1, [r4, #19]
    3ee8:	f011 0f20 	tst.w	r1, #32
    3eec:	d026      	beq.n	3f3c <_usb_d_dev_out_next+0x168>
    3eee:	8a22      	ldrh	r2, [r4, #16]
    3ef0:	4293      	cmp	r3, r2
    3ef2:	bf28      	it	cs
    3ef4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3ef6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3ef8:	016a      	lsls	r2, r5, #5
    3efa:	492f      	ldr	r1, [pc, #188]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3efc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3efe:	4a2e      	ldr	r2, [pc, #184]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3f00:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    3f04:	6851      	ldr	r1, [r2, #4]
    3f06:	f363 319b 	bfi	r1, r3, #14, #14
    3f0a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3f0c:	6853      	ldr	r3, [r2, #4]
    3f0e:	f36f 030d 	bfc	r3, #0, #14
    3f12:	6053      	str	r3, [r2, #4]
	if (!isr) {
    3f14:	f1b9 0f00 	cmp.w	r9, #0
    3f18:	d108      	bne.n	3f2c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    3f1a:	f1b8 0f01 	cmp.w	r8, #1
    3f1e:	d025      	beq.n	3f6c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    3f20:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f22:	016b      	lsls	r3, r5, #5
    3f24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3f28:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f2c:	016d      	lsls	r5, r5, #5
    3f2e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3f32:	2340      	movs	r3, #64	; 0x40
    3f34:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    3f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    3f3c:	8a21      	ldrh	r1, [r4, #16]
    3f3e:	428b      	cmp	r3, r1
    3f40:	d90a      	bls.n	3f58 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3f46:	d80e      	bhi.n	3f66 <_usb_d_dev_out_next+0x192>
    3f48:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3f4c:	6821      	ldr	r1, [r4, #0]
    3f4e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    3f50:	0169      	lsls	r1, r5, #5
    3f52:	4819      	ldr	r0, [pc, #100]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3f54:	5042      	str	r2, [r0, r1]
    3f56:	e7d2      	b.n	3efe <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    3f58:	428b      	cmp	r3, r1
    3f5a:	d2f7      	bcs.n	3f4c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    3f5c:	7ce1      	ldrb	r1, [r4, #19]
    3f5e:	f041 0120 	orr.w	r1, r1, #32
    3f62:	74e1      	strb	r1, [r4, #19]
    3f64:	e7f2      	b.n	3f4c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    3f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3f6a:	e7ef      	b.n	3f4c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    3f6c:	4b12      	ldr	r3, [pc, #72]	; (3fb8 <_usb_d_dev_out_next+0x1e4>)
    3f6e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3f72:	2200      	movs	r2, #0
    3f74:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3f76:	222d      	movs	r2, #45	; 0x2d
    3f78:	e7d3      	b.n	3f22 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    3f7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3f7e:	f890 8013 	ldrb.w	r8, [r0, #19]
    3f82:	f008 0807 	and.w	r8, r8, #7
    3f86:	e749      	b.n	3e1c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    3f88:	f1b9 0f00 	cmp.w	r9, #0
    3f8c:	d10b      	bne.n	3fa6 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    3f8e:	68a3      	ldr	r3, [r4, #8]
    3f90:	4453      	add	r3, sl
    3f92:	60a3      	str	r3, [r4, #8]
    3f94:	e769      	b.n	3e6a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3f96:	f890 8013 	ldrb.w	r8, [r0, #19]
    3f9a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    3f9e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3fa0:	46bb      	mov	fp, r7
    3fa2:	46ba      	mov	sl, r7
    3fa4:	e740      	b.n	3e28 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    3fa6:	8a23      	ldrh	r3, [r4, #16]
    3fa8:	42bb      	cmp	r3, r7
    3faa:	f63f af57 	bhi.w	3e5c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    3fae:	68a3      	ldr	r3, [r4, #8]
    3fb0:	4453      	add	r3, sl
    3fb2:	60a3      	str	r3, [r4, #8]
    3fb4:	e759      	b.n	3e6a <_usb_d_dev_out_next+0x96>
    3fb6:	bf00      	nop
    3fb8:	200007c4 	.word	0x200007c4
    3fbc:	00006ab5 	.word	0x00006ab5
    3fc0:	00003a75 	.word	0x00003a75

00003fc4 <_usb_d_dev_handler>:
{
    3fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3fc8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3fcc:	8c1e      	ldrh	r6, [r3, #32]
    3fce:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3fd0:	b146      	cbz	r6, 3fe4 <_usb_d_dev_handler+0x20>
    3fd2:	4d91      	ldr	r5, [pc, #580]	; (4218 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    3fd4:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3fd6:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    3fda:	f8df 9258 	ldr.w	r9, [pc, #600]	; 4234 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    3fde:	f8df 8258 	ldr.w	r8, [pc, #600]	; 4238 <_usb_d_dev_handler+0x274>
    3fe2:	e0d3      	b.n	418c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3fe4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3fe6:	8b1b      	ldrh	r3, [r3, #24]
    3fe8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3fea:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3fec:	f013 0f04 	tst.w	r3, #4
    3ff0:	d11d      	bne.n	402e <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3ff2:	f413 7f00 	tst.w	r3, #512	; 0x200
    3ff6:	d123      	bne.n	4040 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3ff8:	f013 0f80 	tst.w	r3, #128	; 0x80
    3ffc:	d147      	bne.n	408e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3ffe:	f013 0f70 	tst.w	r3, #112	; 0x70
    4002:	d14f      	bne.n	40a4 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4004:	f013 0f08 	tst.w	r3, #8
    4008:	d16e      	bne.n	40e8 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    400a:	f013 0f01 	tst.w	r3, #1
    400e:	d0e0      	beq.n	3fd2 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4010:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4014:	f240 2201 	movw	r2, #513	; 0x201
    4018:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    401a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    401c:	2270      	movs	r2, #112	; 0x70
    401e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4020:	4b7e      	ldr	r3, [pc, #504]	; (421c <_usb_d_dev_handler+0x258>)
    4022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4024:	2100      	movs	r1, #0
    4026:	2004      	movs	r0, #4
    4028:	4798      	blx	r3
    402a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    402e:	2204      	movs	r2, #4
    4030:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4034:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4036:	4b79      	ldr	r3, [pc, #484]	; (421c <_usb_d_dev_handler+0x258>)
    4038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    403a:	4798      	blx	r3
    403c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4040:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4044:	f240 2201 	movw	r2, #513	; 0x201
    4048:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    404a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    404c:	2270      	movs	r2, #112	; 0x70
    404e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4050:	4b72      	ldr	r3, [pc, #456]	; (421c <_usb_d_dev_handler+0x258>)
    4052:	891b      	ldrh	r3, [r3, #8]
    4054:	f003 030f 	and.w	r3, r3, #15
    4058:	2b03      	cmp	r3, #3
    405a:	d00e      	beq.n	407a <_usb_d_dev_handler+0xb6>
    405c:	4b6f      	ldr	r3, [pc, #444]	; (421c <_usb_d_dev_handler+0x258>)
    405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4060:	f003 030f 	and.w	r3, r3, #15
    4064:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4066:	bf08      	it	eq
    4068:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    406a:	d007      	beq.n	407c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    406c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    406e:	4b6b      	ldr	r3, [pc, #428]	; (421c <_usb_d_dev_handler+0x258>)
    4070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4072:	2003      	movs	r0, #3
    4074:	4798      	blx	r3
    4076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    407a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    407c:	4b67      	ldr	r3, [pc, #412]	; (421c <_usb_d_dev_handler+0x258>)
    407e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    4082:	8919      	ldrh	r1, [r3, #8]
    4084:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4088:	2200      	movs	r2, #0
    408a:	811a      	strh	r2, [r3, #8]
    408c:	e7ef      	b.n	406e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    408e:	2280      	movs	r2, #128	; 0x80
    4090:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4094:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4096:	4b61      	ldr	r3, [pc, #388]	; (421c <_usb_d_dev_handler+0x258>)
    4098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    409a:	2100      	movs	r1, #0
    409c:	2005      	movs	r0, #5
    409e:	4798      	blx	r3
    40a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    40a8:	2270      	movs	r2, #112	; 0x70
    40aa:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    40ac:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    40ae:	f240 2201 	movw	r2, #513	; 0x201
    40b2:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    40b4:	4b5a      	ldr	r3, [pc, #360]	; (4220 <_usb_d_dev_handler+0x25c>)
    40b6:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    40ba:	f013 0f01 	tst.w	r3, #1
    40be:	d00d      	beq.n	40dc <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    40c0:	4a57      	ldr	r2, [pc, #348]	; (4220 <_usb_d_dev_handler+0x25c>)
    40c2:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    40c4:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    40c8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    40cc:	d1f9      	bne.n	40c2 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    40ce:	4b53      	ldr	r3, [pc, #332]	; (421c <_usb_d_dev_handler+0x258>)
    40d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    40d2:	2100      	movs	r1, #0
    40d4:	2002      	movs	r0, #2
    40d6:	4798      	blx	r3
    40d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    40dc:	4a50      	ldr	r2, [pc, #320]	; (4220 <_usb_d_dev_handler+0x25c>)
    40de:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    40e0:	f413 7f80 	tst.w	r3, #256	; 0x100
    40e4:	d0fb      	beq.n	40de <_usb_d_dev_handler+0x11a>
    40e6:	e7f2      	b.n	40ce <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    40e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    40ec:	2400      	movs	r4, #0
    40ee:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    40f2:	2208      	movs	r2, #8
    40f4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    40f6:	2270      	movs	r2, #112	; 0x70
    40f8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    40fa:	f240 2201 	movw	r2, #513	; 0x201
    40fe:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4100:	4b48      	ldr	r3, [pc, #288]	; (4224 <_usb_d_dev_handler+0x260>)
    4102:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4104:	4b45      	ldr	r3, [pc, #276]	; (421c <_usb_d_dev_handler+0x258>)
    4106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4108:	4621      	mov	r1, r4
    410a:	2001      	movs	r0, #1
    410c:	4798      	blx	r3
    410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4112:	f011 0f10 	tst.w	r1, #16
    4116:	d109      	bne.n	412c <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4118:	f011 0f40 	tst.w	r1, #64	; 0x40
    411c:	d108      	bne.n	4130 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    411e:	f011 0f20 	tst.w	r1, #32
    4122:	d02f      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    4124:	2100      	movs	r1, #0
    4126:	4b40      	ldr	r3, [pc, #256]	; (4228 <_usb_d_dev_handler+0x264>)
    4128:	4798      	blx	r3
    412a:	e02b      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    412c:	47c8      	blx	r9
    412e:	e029      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    4130:	2101      	movs	r1, #1
    4132:	4b3d      	ldr	r3, [pc, #244]	; (4228 <_usb_d_dev_handler+0x264>)
    4134:	4798      	blx	r3
    4136:	e025      	b.n	4184 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4138:	f011 0f40 	tst.w	r1, #64	; 0x40
    413c:	d111      	bne.n	4162 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    413e:	f011 0f08 	tst.w	r1, #8
    4142:	d112      	bne.n	416a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4144:	f011 0f02 	tst.w	r1, #2
    4148:	d112      	bne.n	4170 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    414a:	f003 0307 	and.w	r3, r3, #7
    414e:	2b01      	cmp	r3, #1
    4150:	d118      	bne.n	4184 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4152:	f011 0f04 	tst.w	r1, #4
    4156:	d10f      	bne.n	4178 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4158:	f011 0f10 	tst.w	r1, #16
    415c:	d012      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    415e:	47c8      	blx	r9
    4160:	e010      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    4162:	2101      	movs	r1, #1
    4164:	4b30      	ldr	r3, [pc, #192]	; (4228 <_usb_d_dev_handler+0x264>)
    4166:	4798      	blx	r3
    4168:	e00c      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    416a:	2101      	movs	r1, #1
    416c:	47c0      	blx	r8
    416e:	e009      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    4170:	2101      	movs	r1, #1
    4172:	4b2e      	ldr	r3, [pc, #184]	; (422c <_usb_d_dev_handler+0x268>)
    4174:	4798      	blx	r3
    4176:	e005      	b.n	4184 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    4178:	2100      	movs	r1, #0
    417a:	47c0      	blx	r8
    417c:	e002      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    417e:	2100      	movs	r1, #0
    4180:	4b29      	ldr	r3, [pc, #164]	; (4228 <_usb_d_dev_handler+0x264>)
    4182:	4798      	blx	r3
    4184:	3401      	adds	r4, #1
    4186:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4188:	2c1b      	cmp	r4, #27
    418a:	d042      	beq.n	4212 <_usb_d_dev_handler+0x24e>
    418c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    418e:	7cab      	ldrb	r3, [r5, #18]
    4190:	2bff      	cmp	r3, #255	; 0xff
    4192:	d0f7      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    4194:	f003 030f 	and.w	r3, r3, #15
    4198:	2101      	movs	r1, #1
    419a:	4099      	lsls	r1, r3
    419c:	4231      	tst	r1, r6
    419e:	d0f1      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    41a0:	0159      	lsls	r1, r3, #5
    41a2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    41a6:	f501 7180 	add.w	r1, r1, #256	; 0x100
    41aa:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    41ac:	015b      	lsls	r3, r3, #5
    41ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41b2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    41b6:	4019      	ands	r1, r3
    41b8:	d0e4      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    41ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    41be:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    41c2:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    41c6:	f003 0247 	and.w	r2, r3, #71	; 0x47
    41ca:	2a01      	cmp	r2, #1
    41cc:	d0a1      	beq.n	4112 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    41ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    41d2:	d1b1      	bne.n	4138 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    41d4:	f011 0f20 	tst.w	r1, #32
    41d8:	d1d1      	bne.n	417e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    41da:	f011 0f04 	tst.w	r1, #4
    41de:	d10e      	bne.n	41fe <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    41e0:	f011 0f01 	tst.w	r1, #1
    41e4:	d10e      	bne.n	4204 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    41e6:	f003 0307 	and.w	r3, r3, #7
    41ea:	2b01      	cmp	r3, #1
    41ec:	d1ca      	bne.n	4184 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    41ee:	f011 0f08 	tst.w	r1, #8
    41f2:	d10b      	bne.n	420c <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    41f4:	f011 0f10 	tst.w	r1, #16
    41f8:	d0c4      	beq.n	4184 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    41fa:	47c8      	blx	r9
    41fc:	e7c2      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    41fe:	2100      	movs	r1, #0
    4200:	47c0      	blx	r8
    4202:	e7bf      	b.n	4184 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    4204:	2101      	movs	r1, #1
    4206:	4b0a      	ldr	r3, [pc, #40]	; (4230 <_usb_d_dev_handler+0x26c>)
    4208:	4798      	blx	r3
    420a:	e7bb      	b.n	4184 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    420c:	2101      	movs	r1, #1
    420e:	47c0      	blx	r8
    4210:	e7b8      	b.n	4184 <_usb_d_dev_handler+0x1c0>
    4212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4216:	bf00      	nop
    4218:	20000838 	.word	0x20000838
    421c:	200007c4 	.word	0x200007c4
    4220:	40001000 	.word	0x40001000
    4224:	00003c0d 	.word	0x00003c0d
    4228:	00003a49 	.word	0x00003a49
    422c:	00003c51 	.word	0x00003c51
    4230:	00003dd5 	.word	0x00003dd5
    4234:	000039cd 	.word	0x000039cd
    4238:	00003b0d 	.word	0x00003b0d

0000423c <_usb_d_dev_init>:
{
    423c:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    423e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4242:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4244:	f013 0f01 	tst.w	r3, #1
    4248:	d124      	bne.n	4294 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    424a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    424e:	7893      	ldrb	r3, [r2, #2]
    4250:	f013 0f03 	tst.w	r3, #3
    4254:	d1fb      	bne.n	424e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4256:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    425a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    425c:	f013 0f02 	tst.w	r3, #2
    4260:	d00f      	beq.n	4282 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4262:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4266:	7813      	ldrb	r3, [r2, #0]
    4268:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    426c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    426e:	7893      	ldrb	r3, [r2, #2]
    4270:	f013 0f03 	tst.w	r3, #3
    4274:	d1fb      	bne.n	426e <_usb_d_dev_init+0x32>
    4276:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    427a:	7893      	ldrb	r3, [r2, #2]
    427c:	f013 0f02 	tst.w	r3, #2
    4280:	d1fb      	bne.n	427a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4282:	2201      	movs	r2, #1
    4284:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4288:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    428a:	461a      	mov	r2, r3
    428c:	7893      	ldrb	r3, [r2, #2]
    428e:	f013 0f03 	tst.w	r3, #3
    4292:	d1fb      	bne.n	428c <_usb_d_dev_init+0x50>
    4294:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4298:	7893      	ldrb	r3, [r2, #2]
    429a:	f013 0f01 	tst.w	r3, #1
    429e:	d1fb      	bne.n	4298 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    42a0:	4b21      	ldr	r3, [pc, #132]	; (4328 <_usb_d_dev_init+0xec>)
    42a2:	4a22      	ldr	r2, [pc, #136]	; (432c <_usb_d_dev_init+0xf0>)
    42a4:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    42a6:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    42a8:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    42aa:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    42ac:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    42ae:	4b20      	ldr	r3, [pc, #128]	; (4330 <_usb_d_dev_init+0xf4>)
    42b0:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    42b2:	4b20      	ldr	r3, [pc, #128]	; (4334 <_usb_d_dev_init+0xf8>)
    42b4:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    42b6:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    42ba:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    42be:	f011 011f 	ands.w	r1, r1, #31
    42c2:	d02b      	beq.n	431c <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    42c4:	291f      	cmp	r1, #31
    42c6:	bf08      	it	eq
    42c8:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    42ca:	b34b      	cbz	r3, 4320 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    42cc:	2b1f      	cmp	r3, #31
    42ce:	bf08      	it	eq
    42d0:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    42d2:	b33a      	cbz	r2, 4324 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    42d4:	2a07      	cmp	r2, #7
    42d6:	bf08      	it	eq
    42d8:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    42da:	f003 031f 	and.w	r3, r3, #31
    42de:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    42e2:	0312      	lsls	r2, r2, #12
    42e4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    42e8:	4313      	orrs	r3, r2
    42ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    42ee:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    42f0:	78d3      	ldrb	r3, [r2, #3]
    42f2:	f043 0303 	orr.w	r3, r3, #3
    42f6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    42f8:	78d3      	ldrb	r3, [r2, #3]
    42fa:	f043 030c 	orr.w	r3, r3, #12
    42fe:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4300:	2304      	movs	r3, #4
    4302:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4304:	7893      	ldrb	r3, [r2, #2]
    4306:	f013 0f03 	tst.w	r3, #3
    430a:	d1fb      	bne.n	4304 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    430c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4310:	4a05      	ldr	r2, [pc, #20]	; (4328 <_usb_d_dev_init+0xec>)
    4312:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4314:	2201      	movs	r2, #1
    4316:	811a      	strh	r2, [r3, #8]
}
    4318:	2000      	movs	r0, #0
    431a:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    431c:	2109      	movs	r1, #9
    431e:	e7d4      	b.n	42ca <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    4320:	2319      	movs	r3, #25
    4322:	e7d6      	b.n	42d2 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    4324:	2206      	movs	r2, #6
    4326:	e7d8      	b.n	42da <_usb_d_dev_init+0x9e>
    4328:	200007c4 	.word	0x200007c4
    432c:	000039c9 	.word	0x000039c9
    4330:	00003c0d 	.word	0x00003c0d
    4334:	00800084 	.word	0x00800084

00004338 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4338:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    433c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    433e:	f013 0f03 	tst.w	r3, #3
    4342:	d129      	bne.n	4398 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4344:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4348:	7893      	ldrb	r3, [r2, #2]
    434a:	f013 0f03 	tst.w	r3, #3
    434e:	d1fb      	bne.n	4348 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4350:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4354:	781b      	ldrb	r3, [r3, #0]
    4356:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4358:	f013 0f02 	tst.w	r3, #2
    435c:	d108      	bne.n	4370 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    435e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4362:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4366:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4368:	7893      	ldrb	r3, [r2, #2]
    436a:	f013 0f03 	tst.w	r3, #3
    436e:	d1fb      	bne.n	4368 <_usb_d_dev_enable+0x30>
    4370:	4b0b      	ldr	r3, [pc, #44]	; (43a0 <_usb_d_dev_enable+0x68>)
    4372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4376:	609a      	str	r2, [r3, #8]
    4378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    437c:	609a      	str	r2, [r3, #8]
    437e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4382:	609a      	str	r2, [r3, #8]
    4384:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4388:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    438a:	f240 228d 	movw	r2, #653	; 0x28d
    438e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4392:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4394:	2000      	movs	r0, #0
    4396:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4398:	f06f 0010 	mvn.w	r0, #16
}
    439c:	4770      	bx	lr
    439e:	bf00      	nop
    43a0:	e000e100 	.word	0xe000e100

000043a4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    43a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    43a8:	8913      	ldrh	r3, [r2, #8]
    43aa:	f023 0301 	bic.w	r3, r3, #1
    43ae:	041b      	lsls	r3, r3, #16
    43b0:	0c1b      	lsrs	r3, r3, #16
    43b2:	8113      	strh	r3, [r2, #8]
    43b4:	4770      	bx	lr

000043b6 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    43b6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    43ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    43be:	7298      	strb	r0, [r3, #10]
    43c0:	4770      	bx	lr
	...

000043c4 <_usb_d_dev_ep_init>:
{
    43c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43c6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    43ca:	f010 050f 	ands.w	r5, r0, #15
    43ce:	d04d      	beq.n	446c <_usb_d_dev_ep_init+0xa8>
    43d0:	f1be 0f00 	cmp.w	lr, #0
    43d4:	bfb4      	ite	lt
    43d6:	1cac      	addlt	r4, r5, #2
    43d8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    43da:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    43de:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    43e0:	2d02      	cmp	r5, #2
    43e2:	d947      	bls.n	4474 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    43e4:	f06f 0011 	mvn.w	r0, #17
    43e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    43ea:	f1be 0f00 	cmp.w	lr, #0
    43ee:	db1b      	blt.n	4428 <_usb_d_dev_ep_init+0x64>
    43f0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    43f4:	4e37      	ldr	r6, [pc, #220]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    43f6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    43fa:	2d00      	cmp	r5, #0
    43fc:	d15e      	bne.n	44bc <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    43fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4402:	4d34      	ldr	r5, [pc, #208]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    4404:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4408:	4d33      	ldr	r5, [pc, #204]	; (44d8 <_usb_d_dev_ep_init+0x114>)
    440a:	00a6      	lsls	r6, r4, #2
    440c:	1933      	adds	r3, r6, r4
    440e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4412:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    4416:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    441a:	3101      	adds	r1, #1
    441c:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    4420:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    4424:	2000      	movs	r0, #0
    4426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4428:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    442c:	4e29      	ldr	r6, [pc, #164]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    442e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4432:	686d      	ldr	r5, [r5, #4]
    4434:	b935      	cbnz	r5, 4444 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    443a:	4d26      	ldr	r5, [pc, #152]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    443c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4440:	685f      	ldr	r7, [r3, #4]
    4442:	e7e1      	b.n	4408 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4444:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4448:	4e22      	ldr	r6, [pc, #136]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    444a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    444e:	896d      	ldrh	r5, [r5, #10]
    4450:	4295      	cmp	r5, r2
    4452:	daf0      	bge.n	4436 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4454:	f06f 0012 	mvn.w	r0, #18
    4458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    445a:	f06f 0013 	mvn.w	r0, #19
    445e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4460:	f06f 0013 	mvn.w	r0, #19
    4464:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4466:	f06f 0012 	mvn.w	r0, #18
    446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    446c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4470:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4472:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    4474:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    4478:	4f17      	ldr	r7, [pc, #92]	; (44d8 <_usb_d_dev_ep_init+0x114>)
    447a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    447e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    4482:	2eff      	cmp	r6, #255	; 0xff
    4484:	d1e9      	bne.n	445a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4486:	2900      	cmp	r1, #0
    4488:	d1af      	bne.n	43ea <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    448a:	b125      	cbz	r5, 4496 <_usb_d_dev_ep_init+0xd2>
    448c:	f1be 0f00 	cmp.w	lr, #0
    4490:	bfa4      	itt	ge
    4492:	3502      	addge	r5, #2
    4494:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    4496:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    449a:	4e0f      	ldr	r6, [pc, #60]	; (44d8 <_usb_d_dev_ep_init+0x114>)
    449c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    44a0:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    44a4:	2dff      	cmp	r5, #255	; 0xff
    44a6:	d1db      	bne.n	4460 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    44a8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    44ac:	4e09      	ldr	r6, [pc, #36]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    44ae:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    44b2:	2d00      	cmp	r5, #0
    44b4:	d0d7      	beq.n	4466 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    44b6:	f1be 0f00 	cmp.w	lr, #0
    44ba:	dbb5      	blt.n	4428 <_usb_d_dev_ep_init+0x64>
    44bc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    44c0:	4e04      	ldr	r6, [pc, #16]	; (44d4 <_usb_d_dev_ep_init+0x110>)
    44c2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    44c6:	892d      	ldrh	r5, [r5, #8]
    44c8:	4295      	cmp	r5, r2
    44ca:	da98      	bge.n	43fe <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    44cc:	f06f 0012 	mvn.w	r0, #18
    44d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44d2:	bf00      	nop
    44d4:	0000772c 	.word	0x0000772c
    44d8:	200007c4 	.word	0x200007c4

000044dc <_usb_d_dev_ep_deinit>:
{
    44dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44de:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    44e0:	f010 060f 	ands.w	r6, r0, #15
    44e4:	d00e      	beq.n	4504 <_usb_d_dev_ep_deinit+0x28>
    44e6:	2f00      	cmp	r7, #0
    44e8:	bfb4      	ite	lt
    44ea:	1cb3      	addlt	r3, r6, #2
    44ec:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    44ee:	2e02      	cmp	r6, #2
    44f0:	d900      	bls.n	44f4 <_usb_d_dev_ep_deinit+0x18>
    44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    44f4:	461d      	mov	r5, r3
    44f6:	3301      	adds	r3, #1
    44f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    44fc:	4a24      	ldr	r2, [pc, #144]	; (4590 <_usb_d_dev_ep_deinit+0xb4>)
    44fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    4502:	e002      	b.n	450a <_usb_d_dev_ep_deinit+0x2e>
    4504:	f8df e094 	ldr.w	lr, [pc, #148]	; 459c <_usb_d_dev_ep_deinit+0xc0>
    4508:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    450a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    450e:	4a21      	ldr	r2, [pc, #132]	; (4594 <_usb_d_dev_ep_deinit+0xb8>)
    4510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4514:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    4518:	2aff      	cmp	r2, #255	; 0xff
    451a:	d0ea      	beq.n	44f2 <_usb_d_dev_ep_deinit+0x16>
    451c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    451e:	2203      	movs	r2, #3
    4520:	0ff9      	lsrs	r1, r7, #31
    4522:	4670      	mov	r0, lr
    4524:	4b1c      	ldr	r3, [pc, #112]	; (4598 <_usb_d_dev_ep_deinit+0xbc>)
    4526:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4528:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    452c:	4a19      	ldr	r2, [pc, #100]	; (4594 <_usb_d_dev_ep_deinit+0xb8>)
    452e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4532:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4536:	f003 0307 	and.w	r3, r3, #7
    453a:	2b01      	cmp	r3, #1
    453c:	d016      	beq.n	456c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    453e:	2f00      	cmp	r7, #0
    4540:	db1b      	blt.n	457a <_usb_d_dev_ep_deinit+0x9e>
    4542:	0160      	lsls	r0, r4, #5
    4544:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4548:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    454c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4550:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <_usb_d_dev_ep_deinit+0xb8>)
    4556:	00aa      	lsls	r2, r5, #2
    4558:	1951      	adds	r1, r2, r5
    455a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    455e:	2000      	movs	r0, #0
    4560:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    4564:	22ff      	movs	r2, #255	; 0xff
    4566:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    456a:	e7c2      	b.n	44f2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    456c:	0160      	lsls	r0, r4, #5
    456e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4572:	2300      	movs	r3, #0
    4574:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    4578:	e7ec      	b.n	4554 <_usb_d_dev_ep_deinit+0x78>
    457a:	0176      	lsls	r6, r6, #5
    457c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4580:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    4584:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    4588:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    458c:	e7e2      	b.n	4554 <_usb_d_dev_ep_deinit+0x78>
    458e:	bf00      	nop
    4590:	20000824 	.word	0x20000824
    4594:	200007c4 	.word	0x200007c4
    4598:	00003aa1 	.word	0x00003aa1
    459c:	20000838 	.word	0x20000838

000045a0 <_usb_d_dev_ep_enable>:
{
    45a0:	b4f0      	push	{r4, r5, r6, r7}
    45a2:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    45a4:	f010 000f 	ands.w	r0, r0, #15
    45a8:	f000 80a7 	beq.w	46fa <_usb_d_dev_ep_enable+0x15a>
    45ac:	2e00      	cmp	r6, #0
    45ae:	bfb4      	ite	lt
    45b0:	1c83      	addlt	r3, r0, #2
    45b2:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    45b4:	4605      	mov	r5, r0
    45b6:	0142      	lsls	r2, r0, #5
    45b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    45bc:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    45c0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    45c2:	2802      	cmp	r0, #2
    45c4:	f240 80a0 	bls.w	4708 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    45c8:	f06f 0011 	mvn.w	r0, #17
    45cc:	e07d      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    45ce:	f014 0f77 	tst.w	r4, #119	; 0x77
    45d2:	f040 8089 	bne.w	46e8 <_usb_d_dev_ep_enable+0x148>
    45d6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    45da:	2111      	movs	r1, #17
    45dc:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    45e0:	4c9b      	ldr	r4, [pc, #620]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    45e2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    45e6:	f8b1 1084 	ldrh.w	r1, [r1, #132]	; 0x84
    45ea:	4c9a      	ldr	r4, [pc, #616]	; (4854 <_usb_d_dev_ep_enable+0x2b4>)
    45ec:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    45f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    45f4:	f200 80cd 	bhi.w	4792 <_usb_d_dev_ep_enable+0x1f2>
    45f8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    45fc:	f200 8112 	bhi.w	4824 <_usb_d_dev_ep_enable+0x284>
    4600:	2980      	cmp	r1, #128	; 0x80
    4602:	f200 8101 	bhi.w	4808 <_usb_d_dev_ep_enable+0x268>
    4606:	2940      	cmp	r1, #64	; 0x40
    4608:	f200 8113 	bhi.w	4832 <_usb_d_dev_ep_enable+0x292>
    460c:	2920      	cmp	r1, #32
    460e:	f200 8102 	bhi.w	4816 <_usb_d_dev_ep_enable+0x276>
    4612:	2910      	cmp	r1, #16
    4614:	f200 8114 	bhi.w	4840 <_usb_d_dev_ep_enable+0x2a0>
    4618:	2908      	cmp	r1, #8
    461a:	bf94      	ite	ls
    461c:	2600      	movls	r6, #0
    461e:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4620:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4624:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4626:	f3c1 010d 	ubfx	r1, r1, #0, #14
    462a:	e0b8      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    462c:	f014 0f70 	tst.w	r4, #112	; 0x70
    4630:	d15d      	bne.n	46ee <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4632:	4e87      	ldr	r6, [pc, #540]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    4634:	009f      	lsls	r7, r3, #2
    4636:	18f9      	adds	r1, r7, r3
    4638:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    463c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4640:	0109      	lsls	r1, r1, #4
    4642:	f001 0170 	and.w	r1, r1, #112	; 0x70
    4646:	430c      	orrs	r4, r1
    4648:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    464c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4650:	443b      	add	r3, r7
    4652:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    4656:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
    465a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4662:	d80f      	bhi.n	4684 <_usb_d_dev_ep_enable+0xe4>
    4664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4668:	d819      	bhi.n	469e <_usb_d_dev_ep_enable+0xfe>
    466a:	2b80      	cmp	r3, #128	; 0x80
    466c:	d819      	bhi.n	46a2 <_usb_d_dev_ep_enable+0x102>
    466e:	2b40      	cmp	r3, #64	; 0x40
    4670:	d819      	bhi.n	46a6 <_usb_d_dev_ep_enable+0x106>
    4672:	2b20      	cmp	r3, #32
    4674:	d819      	bhi.n	46aa <_usb_d_dev_ep_enable+0x10a>
    4676:	2b10      	cmp	r3, #16
    4678:	d819      	bhi.n	46ae <_usb_d_dev_ep_enable+0x10e>
    467a:	2b08      	cmp	r3, #8
    467c:	bf94      	ite	ls
    467e:	2300      	movls	r3, #0
    4680:	2301      	movhi	r3, #1
    4682:	e000      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    4684:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4686:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    468a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    468c:	2380      	movs	r3, #128	; 0x80
    468e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4692:	4b6f      	ldr	r3, [pc, #444]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    4694:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    4698:	2000      	movs	r0, #0
    469a:	76a8      	strb	r0, [r5, #26]
    469c:	e015      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    469e:	2306      	movs	r3, #6
    46a0:	e7f1      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    46a2:	2305      	movs	r3, #5
    46a4:	e7ef      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    46a6:	2304      	movs	r3, #4
    46a8:	e7ed      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    46aa:	2303      	movs	r3, #3
    46ac:	e7eb      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    46ae:	2302      	movs	r3, #2
    46b0:	e7e9      	b.n	4686 <_usb_d_dev_ep_enable+0xe6>
    46b2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    46b4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    46b8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    46ba:	2340      	movs	r3, #64	; 0x40
    46bc:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    46c0:	4b63      	ldr	r3, [pc, #396]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    46c2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    46c6:	2000      	movs	r0, #0
    46c8:	72a8      	strb	r0, [r5, #10]
}
    46ca:	bcf0      	pop	{r4, r5, r6, r7}
    46cc:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    46ce:	2106      	movs	r1, #6
    46d0:	e7f0      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
    46d2:	2105      	movs	r1, #5
    46d4:	e7ee      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
    46d6:	2104      	movs	r1, #4
    46d8:	e7ec      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
    46da:	2103      	movs	r1, #3
    46dc:	e7ea      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
    46de:	2102      	movs	r1, #2
    46e0:	e7e8      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    46e2:	f06f 0011 	mvn.w	r0, #17
    46e6:	e7f0      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    46e8:	f06f 0013 	mvn.w	r0, #19
    46ec:	e7ed      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    46ee:	f06f 0013 	mvn.w	r0, #19
    46f2:	e7ea      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    46f4:	f06f 0013 	mvn.w	r0, #19
    46f8:	e7e7      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    46fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    46fe:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    4702:	b2e4      	uxtb	r4, r4
    4704:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    4706:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4708:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    470c:	4950      	ldr	r1, [pc, #320]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    470e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4712:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    4716:	2aff      	cmp	r2, #255	; 0xff
    4718:	d0e3      	beq.n	46e2 <_usb_d_dev_ep_enable+0x142>
    471a:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    471c:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    471e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    4722:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    4726:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    472a:	f001 0107 	and.w	r1, r1, #7
    472e:	2901      	cmp	r1, #1
    4730:	f43f af4d 	beq.w	45ce <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    4734:	2e00      	cmp	r6, #0
    4736:	f6ff af79 	blt.w	462c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    473a:	f014 0f07 	tst.w	r4, #7
    473e:	d1d9      	bne.n	46f4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4740:	4e43      	ldr	r6, [pc, #268]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    4742:	009f      	lsls	r7, r3, #2
    4744:	18f9      	adds	r1, r7, r3
    4746:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    474a:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    474e:	f001 0107 	and.w	r1, r1, #7
    4752:	430c      	orrs	r4, r1
    4754:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4758:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    475c:	443b      	add	r3, r7
    475e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    4762:	f8b6 1084 	ldrh.w	r1, [r6, #132]	; 0x84
    4766:	4b3b      	ldr	r3, [pc, #236]	; (4854 <_usb_d_dev_ep_enable+0x2b4>)
    4768:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    476c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4770:	d89f      	bhi.n	46b2 <_usb_d_dev_ep_enable+0x112>
    4772:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4776:	d8aa      	bhi.n	46ce <_usb_d_dev_ep_enable+0x12e>
    4778:	2980      	cmp	r1, #128	; 0x80
    477a:	d8aa      	bhi.n	46d2 <_usb_d_dev_ep_enable+0x132>
    477c:	2940      	cmp	r1, #64	; 0x40
    477e:	d8aa      	bhi.n	46d6 <_usb_d_dev_ep_enable+0x136>
    4780:	2920      	cmp	r1, #32
    4782:	d8aa      	bhi.n	46da <_usb_d_dev_ep_enable+0x13a>
    4784:	2910      	cmp	r1, #16
    4786:	d8aa      	bhi.n	46de <_usb_d_dev_ep_enable+0x13e>
    4788:	2908      	cmp	r1, #8
    478a:	bf94      	ite	ls
    478c:	2100      	movls	r1, #0
    478e:	2101      	movhi	r1, #1
    4790:	e790      	b.n	46b4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4792:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4796:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4798:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    479c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    479e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    47a2:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    47a4:	2640      	movs	r6, #64	; 0x40
    47a6:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    47aa:	2180      	movs	r1, #128	; 0x80
    47ac:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    47b0:	4f27      	ldr	r7, [pc, #156]	; (4850 <_usb_d_dev_ep_enable+0x2b0>)
    47b2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    47b6:	2000      	movs	r0, #0
    47b8:	72a8      	strb	r0, [r5, #10]
    47ba:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    47bc:	009c      	lsls	r4, r3, #2
    47be:	18e1      	adds	r1, r4, r3
    47c0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    47c4:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    47c8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    47cc:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
	bank->ADDR.reg          = addr;
    47d0:	0152      	lsls	r2, r2, #5
    47d2:	18b9      	adds	r1, r7, r2
    47d4:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    47d6:	4423      	add	r3, r4
    47d8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    47dc:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
    47e0:	684b      	ldr	r3, [r1, #4]
    47e2:	f364 339b 	bfi	r3, r4, #14, #14
    47e6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    47e8:	684b      	ldr	r3, [r1, #4]
    47ea:	f360 030d 	bfi	r3, r0, #0, #14
    47ee:	604b      	str	r3, [r1, #4]
    47f0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    47f4:	21b0      	movs	r1, #176	; 0xb0
    47f6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    47fa:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    47fe:	461a      	mov	r2, r3
    4800:	2310      	movs	r3, #16
    4802:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    4806:	e760      	b.n	46ca <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4808:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    480c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    480e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4812:	2605      	movs	r6, #5
    4814:	e7c3      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4816:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    481a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    481c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4820:	2603      	movs	r6, #3
    4822:	e7bc      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4824:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4828:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    482a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    482e:	2606      	movs	r6, #6
    4830:	e7b5      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4832:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4836:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4838:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    483c:	2604      	movs	r6, #4
    483e:	e7ae      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4840:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4844:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4846:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    484a:	2602      	movs	r6, #2
    484c:	e7a7      	b.n	479e <_usb_d_dev_ep_enable+0x1fe>
    484e:	bf00      	nop
    4850:	200007c4 	.word	0x200007c4
    4854:	0fffc000 	.word	0x0fffc000

00004858 <_usb_d_dev_ep_stall>:
{
    4858:	b470      	push	{r4, r5, r6}
    485a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    485c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    485e:	f010 000f 	ands.w	r0, r0, #15
    4862:	d008      	beq.n	4876 <_usb_d_dev_ep_stall+0x1e>
    4864:	2b00      	cmp	r3, #0
    4866:	bfb4      	ite	lt
    4868:	1c83      	addlt	r3, r0, #2
    486a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    486c:	2802      	cmp	r0, #2
    486e:	d903      	bls.n	4878 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4870:	f06f 0011 	mvn.w	r0, #17
    4874:	e018      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4876:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4878:	2901      	cmp	r1, #1
    487a:	d017      	beq.n	48ac <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    487c:	2900      	cmp	r1, #0
    487e:	d03a      	beq.n	48f6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4880:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4884:	4a45      	ldr	r2, [pc, #276]	; (499c <_usb_d_dev_ep_stall+0x144>)
    4886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    488a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    488e:	f003 030f 	and.w	r3, r3, #15
    4892:	015b      	lsls	r3, r3, #5
    4894:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4898:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    489c:	2310      	movs	r3, #16
    489e:	40a3      	lsls	r3, r4
    48a0:	421a      	tst	r2, r3
    48a2:	bf14      	ite	ne
    48a4:	2001      	movne	r0, #1
    48a6:	2000      	moveq	r0, #0
}
    48a8:	bc70      	pop	{r4, r5, r6}
    48aa:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    48ac:	2510      	movs	r5, #16
    48ae:	40a5      	lsls	r5, r4
    48b0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    48b2:	493a      	ldr	r1, [pc, #232]	; (499c <_usb_d_dev_ep_stall+0x144>)
    48b4:	009e      	lsls	r6, r3, #2
    48b6:	18f2      	adds	r2, r6, r3
    48b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    48bc:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    48c0:	f002 020f 	and.w	r2, r2, #15
    48c4:	0150      	lsls	r0, r2, #5
    48c6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    48ca:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    48ce:	2020      	movs	r0, #32
    48d0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    48d4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    48d6:	0152      	lsls	r2, r2, #5
    48d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    48dc:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    48e0:	4433      	add	r3, r6
    48e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    48e6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    48ea:	f042 0208 	orr.w	r2, r2, #8
    48ee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    48f2:	2000      	movs	r0, #0
    48f4:	e7d8      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    48f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    48fa:	4928      	ldr	r1, [pc, #160]	; (499c <_usb_d_dev_ep_stall+0x144>)
    48fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4900:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    4904:	f002 020f 	and.w	r2, r2, #15
    4908:	0151      	lsls	r1, r2, #5
    490a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    490e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4912:	2010      	movs	r0, #16
    4914:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    4916:	4205      	tst	r5, r0
    4918:	d03c      	beq.n	4994 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    491a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    491c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4920:	2020      	movs	r0, #32
    4922:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4924:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4926:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    492a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    492e:	4202      	tst	r2, r0
    4930:	d007      	beq.n	4942 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4932:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4936:	2201      	movs	r2, #1
    4938:	fa02 f404 	lsl.w	r4, r2, r4
    493c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    493e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4942:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4946:	4815      	ldr	r0, [pc, #84]	; (499c <_usb_d_dev_ep_stall+0x144>)
    4948:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    494c:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    4950:	f002 0207 	and.w	r2, r2, #7
    4954:	2a01      	cmp	r2, #1
    4956:	d00c      	beq.n	4972 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    4958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    495c:	4a0f      	ldr	r2, [pc, #60]	; (499c <_usb_d_dev_ep_stall+0x144>)
    495e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4962:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4966:	f36f 02c3 	bfc	r2, #3, #1
    496a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    496e:	2000      	movs	r0, #0
    4970:	e79a      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4972:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4976:	f012 0f30 	tst.w	r2, #48	; 0x30
    497a:	d10d      	bne.n	4998 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    497c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4980:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    4984:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4988:	f36f 02c3 	bfc	r2, #3, #1
    498c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4990:	2000      	movs	r0, #0
    4992:	e789      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
    4994:	2000      	movs	r0, #0
    4996:	e787      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
    4998:	2000      	movs	r0, #0
    499a:	e785      	b.n	48a8 <_usb_d_dev_ep_stall+0x50>
    499c:	200007c4 	.word	0x200007c4

000049a0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    49a0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    49a2:	f000 040f 	and.w	r4, r0, #15
    49a6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    49a8:	4a14      	ldr	r2, [pc, #80]	; (49fc <_usb_d_dev_ep_read_req+0x5c>)
    49aa:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    49ac:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    49ae:	6840      	ldr	r0, [r0, #4]
    49b0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    49b4:	2c02      	cmp	r4, #2
    49b6:	d817      	bhi.n	49e8 <_usb_d_dev_ep_read_req+0x48>
    49b8:	b1c9      	cbz	r1, 49ee <_usb_d_dev_ep_read_req+0x4e>
    49ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    49be:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    49c2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    49c4:	2a11      	cmp	r2, #17
    49c6:	d115      	bne.n	49f4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    49c8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    49cc:	f012 0f10 	tst.w	r2, #16
    49d0:	d102      	bne.n	49d8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    49d2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    49d4:	bc30      	pop	{r4, r5}
    49d6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    49d8:	682c      	ldr	r4, [r5, #0]
    49da:	686a      	ldr	r2, [r5, #4]
    49dc:	600c      	str	r4, [r1, #0]
    49de:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    49e0:	2210      	movs	r2, #16
    49e2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    49e6:	e7f5      	b.n	49d4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    49e8:	f06f 0011 	mvn.w	r0, #17
    49ec:	e7f2      	b.n	49d4 <_usb_d_dev_ep_read_req+0x34>
    49ee:	f06f 0011 	mvn.w	r0, #17
    49f2:	e7ef      	b.n	49d4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    49f4:	f06f 0012 	mvn.w	r0, #18
    49f8:	e7ec      	b.n	49d4 <_usb_d_dev_ep_read_req+0x34>
    49fa:	bf00      	nop
    49fc:	200007c4 	.word	0x200007c4

00004a00 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a04:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4a06:	7a03      	ldrb	r3, [r0, #8]
    4a08:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4a0a:	f013 030f 	ands.w	r3, r3, #15
    4a0e:	f000 80c2 	beq.w	4b96 <_usb_d_dev_ep_trans+0x196>
    4a12:	2e00      	cmp	r6, #0
    4a14:	bfb4      	ite	lt
    4a16:	1c9a      	addlt	r2, r3, #2
    4a18:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    4a1a:	4614      	mov	r4, r2
    4a1c:	4969      	ldr	r1, [pc, #420]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4a1e:	f101 0760 	add.w	r7, r1, #96	; 0x60
    4a22:	1c55      	adds	r5, r2, #1
    4a24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4a28:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4a2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4a30:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4a34:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    4a38:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4a3c:	428a      	cmp	r2, r1
    4a3e:	d025      	beq.n	4a8c <_usb_d_dev_ep_trans+0x8c>
    4a40:	1e55      	subs	r5, r2, #1
    4a42:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    4a44:	6841      	ldr	r1, [r0, #4]
    4a46:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4a48:	2b02      	cmp	r3, #2
    4a4a:	f200 8092 	bhi.w	4b72 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    4a4e:	6803      	ldr	r3, [r0, #0]
    4a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4a54:	d31c      	bcc.n	4a90 <_usb_d_dev_ep_trans+0x90>
    4a56:	eb03 0c01 	add.w	ip, r3, r1
    4a5a:	f8df e180 	ldr.w	lr, [pc, #384]	; 4bdc <_usb_d_dev_ep_trans+0x1dc>
    4a5e:	45f4      	cmp	ip, lr
    4a60:	d816      	bhi.n	4a90 <_usb_d_dev_ep_trans+0x90>
    4a62:	f013 0f03 	tst.w	r3, #3
    4a66:	d113      	bne.n	4a90 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    4a68:	2e00      	cmp	r6, #0
    4a6a:	db2a      	blt.n	4ac2 <_usb_d_dev_ep_trans+0xc2>
    4a6c:	428a      	cmp	r2, r1
    4a6e:	f200 809c 	bhi.w	4baa <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    4a72:	b34d      	cbz	r5, 4ac8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    4a74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a78:	4a52      	ldr	r2, [pc, #328]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4a7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4a82:	2b00      	cmp	r3, #0
    4a84:	d07b      	beq.n	4b7e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    4a86:	f04f 0800 	mov.w	r8, #0
    4a8a:	e00c      	b.n	4aa6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4a8c:	4615      	mov	r5, r2
    4a8e:	e7d9      	b.n	4a44 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4a90:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a94:	4a4b      	ldr	r2, [pc, #300]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d06a      	beq.n	4b78 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    4aa2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4aa6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4aaa:	4a46      	ldr	r2, [pc, #280]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4ab0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4ab4:	f013 0f08 	tst.w	r3, #8
    4ab8:	d009      	beq.n	4ace <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    4aba:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4abc:	b003      	add	sp, #12
    4abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    4ac2:	f04f 0800 	mov.w	r8, #0
    4ac6:	e7ee      	b.n	4aa6 <_usb_d_dev_ep_trans+0xa6>
    4ac8:	f04f 0800 	mov.w	r8, #0
    4acc:	e7eb      	b.n	4aa6 <_usb_d_dev_ep_trans+0xa6>
    4ace:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    4ad0:	a801      	add	r0, sp, #4
    4ad2:	4b3d      	ldr	r3, [pc, #244]	; (4bc8 <_usb_d_dev_ep_trans+0x1c8>)
    4ad4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4ad6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4ada:	4a3a      	ldr	r2, [pc, #232]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4ae0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4ae4:	f013 0f40 	tst.w	r3, #64	; 0x40
    4ae8:	d13c      	bne.n	4b64 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    4aea:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    4aee:	4b35      	ldr	r3, [pc, #212]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4af0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    4af4:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    4af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4afc:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    4b00:	a801      	add	r0, sp, #4
    4b02:	4b32      	ldr	r3, [pc, #200]	; (4bcc <_usb_d_dev_ep_trans+0x1cc>)
    4b04:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    4b06:	f8da 3000 	ldr.w	r3, [sl]
    4b0a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    4b0e:	f8da 3004 	ldr.w	r3, [sl, #4]
    4b12:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    4b16:	2300      	movs	r3, #0
    4b18:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    4b1c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    4b1e:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    4b22:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    4b26:	f368 1345 	bfi	r3, r8, #5, #1
    4b2a:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4b2e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    4b32:	b1e3      	cbz	r3, 4b6e <_usb_d_dev_ep_trans+0x16e>
    4b34:	fab5 f585 	clz	r5, r5
    4b38:	096d      	lsrs	r5, r5, #5
    4b3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4b3e:	4b21      	ldr	r3, [pc, #132]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4b40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4b44:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    4b48:	f365 1304 	bfi	r3, r5, #4, #1
    4b4c:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    4b50:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    4b52:	f04f 0100 	mov.w	r1, #0
    4b56:	4638      	mov	r0, r7
    4b58:	bfb4      	ite	lt
    4b5a:	4b1d      	ldrlt	r3, [pc, #116]	; (4bd0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    4b5c:	4b1d      	ldrge	r3, [pc, #116]	; (4bd4 <_usb_d_dev_ep_trans+0x1d4>)
    4b5e:	4798      	blx	r3
	return ERR_NONE;
    4b60:	2000      	movs	r0, #0
    4b62:	e7ab      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    4b64:	a801      	add	r0, sp, #4
    4b66:	4b19      	ldr	r3, [pc, #100]	; (4bcc <_usb_d_dev_ep_trans+0x1cc>)
    4b68:	4798      	blx	r3
		return USB_BUSY;
    4b6a:	2001      	movs	r0, #1
    4b6c:	e7a6      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
    4b6e:	2500      	movs	r5, #0
    4b70:	e7e3      	b.n	4b3a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    4b72:	f06f 0011 	mvn.w	r0, #17
    4b76:	e7a1      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4b78:	f06f 0012 	mvn.w	r0, #18
    4b7c:	e79e      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    4b7e:	f06f 0011 	mvn.w	r0, #17
    4b82:	e79b      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4b84:	f06f 0012 	mvn.w	r0, #18
    4b88:	e798      	b.n	4abc <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    4b8a:	6841      	ldr	r1, [r0, #4]
    4b8c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    4b90:	4f11      	ldr	r7, [pc, #68]	; (4bd8 <_usb_d_dev_ep_trans+0x1d8>)
    4b92:	2400      	movs	r4, #0
    4b94:	e75b      	b.n	4a4e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4b96:	4a0b      	ldr	r2, [pc, #44]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4b98:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    4b9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4ba0:	428a      	cmp	r2, r1
    4ba2:	d0f2      	beq.n	4b8a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    4ba4:	4f0c      	ldr	r7, [pc, #48]	; (4bd8 <_usb_d_dev_ep_trans+0x1d8>)
    4ba6:	2400      	movs	r4, #0
    4ba8:	e74a      	b.n	4a40 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    4baa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4bae:	4a05      	ldr	r2, [pc, #20]	; (4bc4 <_usb_d_dev_ep_trans+0x1c4>)
    4bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d0e3      	beq.n	4b84 <_usb_d_dev_ep_trans+0x184>
    4bbc:	f04f 0801 	mov.w	r8, #1
    4bc0:	e771      	b.n	4aa6 <_usb_d_dev_ep_trans+0xa6>
    4bc2:	bf00      	nop
    4bc4:	200007c4 	.word	0x200007c4
    4bc8:	00001075 	.word	0x00001075
    4bcc:	00001083 	.word	0x00001083
    4bd0:	00003c51 	.word	0x00003c51
    4bd4:	00003dd5 	.word	0x00003dd5
    4bd8:	20000838 	.word	0x20000838
    4bdc:	20041fff 	.word	0x20041fff

00004be0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4be0:	4b06      	ldr	r3, [pc, #24]	; (4bfc <_usb_d_dev_register_callback+0x1c>)
    4be2:	2900      	cmp	r1, #0
    4be4:	bf08      	it	eq
    4be6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    4be8:	2801      	cmp	r0, #1
    4bea:	d003      	beq.n	4bf4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    4bec:	b908      	cbnz	r0, 4bf2 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4bee:	4b04      	ldr	r3, [pc, #16]	; (4c00 <_usb_d_dev_register_callback+0x20>)
    4bf0:	6619      	str	r1, [r3, #96]	; 0x60
    4bf2:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4bf4:	4b02      	ldr	r3, [pc, #8]	; (4c00 <_usb_d_dev_register_callback+0x20>)
    4bf6:	6659      	str	r1, [r3, #100]	; 0x64
    4bf8:	4770      	bx	lr
    4bfa:	bf00      	nop
    4bfc:	000039c9 	.word	0x000039c9
    4c00:	200007c4 	.word	0x200007c4

00004c04 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4c04:	4b09      	ldr	r3, [pc, #36]	; (4c2c <_usb_d_dev_register_ep_callback+0x28>)
    4c06:	2900      	cmp	r1, #0
    4c08:	bf08      	it	eq
    4c0a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4c0c:	4603      	mov	r3, r0
    4c0e:	b130      	cbz	r0, 4c1e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4c10:	2801      	cmp	r0, #1
    4c12:	d007      	beq.n	4c24 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    4c14:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4c16:	bf04      	itt	eq
    4c18:	4b05      	ldreq	r3, [pc, #20]	; (4c30 <_usb_d_dev_register_ep_callback+0x2c>)
    4c1a:	6719      	streq	r1, [r3, #112]	; 0x70
    4c1c:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    4c1e:	4b04      	ldr	r3, [pc, #16]	; (4c30 <_usb_d_dev_register_ep_callback+0x2c>)
    4c20:	6699      	str	r1, [r3, #104]	; 0x68
    4c22:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4c24:	4b02      	ldr	r3, [pc, #8]	; (4c30 <_usb_d_dev_register_ep_callback+0x2c>)
    4c26:	66d9      	str	r1, [r3, #108]	; 0x6c
    4c28:	4770      	bx	lr
    4c2a:	bf00      	nop
    4c2c:	000039c9 	.word	0x000039c9
    4c30:	200007c4 	.word	0x200007c4

00004c34 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    4c34:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4c36:	4b01      	ldr	r3, [pc, #4]	; (4c3c <USB_0_Handler+0x8>)
    4c38:	4798      	blx	r3
    4c3a:	bd08      	pop	{r3, pc}
    4c3c:	00003fc5 	.word	0x00003fc5

00004c40 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    4c40:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4c42:	4b01      	ldr	r3, [pc, #4]	; (4c48 <USB_1_Handler+0x8>)
    4c44:	4798      	blx	r3
    4c46:	bd08      	pop	{r3, pc}
    4c48:	00003fc5 	.word	0x00003fc5

00004c4c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    4c4c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4c4e:	4b01      	ldr	r3, [pc, #4]	; (4c54 <USB_2_Handler+0x8>)
    4c50:	4798      	blx	r3
    4c52:	bd08      	pop	{r3, pc}
    4c54:	00003fc5 	.word	0x00003fc5

00004c58 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    4c58:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4c5a:	4b01      	ldr	r3, [pc, #4]	; (4c60 <USB_3_Handler+0x8>)
    4c5c:	4798      	blx	r3
    4c5e:	bd08      	pop	{r3, pc}
    4c60:	00003fc5 	.word	0x00003fc5

00004c64 <tx_cb_USART_GRID>:

static void tx_cb_USART_GRID(const struct usart_async_descriptor *const descr)
{
	/* Transfer completed */
		
	if (descr == &USART_EAST){
    4c64:	4b08      	ldr	r3, [pc, #32]	; (4c88 <tx_cb_USART_GRID+0x24>)
    4c66:	4298      	cmp	r0, r3
    4c68:	d003      	beq.n	4c72 <tx_cb_USART_GRID+0xe>
		grid_sys_tx_counter[GRID_SYS_EAST]++;
	}
	if (descr == &USART_WEST){
    4c6a:	4b08      	ldr	r3, [pc, #32]	; (4c8c <tx_cb_USART_GRID+0x28>)
    4c6c:	4298      	cmp	r0, r3
    4c6e:	d005      	beq.n	4c7c <tx_cb_USART_GRID+0x18>
    4c70:	4770      	bx	lr
		grid_sys_tx_counter[GRID_SYS_EAST]++;
    4c72:	4a07      	ldr	r2, [pc, #28]	; (4c90 <tx_cb_USART_GRID+0x2c>)
    4c74:	6853      	ldr	r3, [r2, #4]
    4c76:	3301      	adds	r3, #1
    4c78:	6053      	str	r3, [r2, #4]
    4c7a:	e7f6      	b.n	4c6a <tx_cb_USART_GRID+0x6>
		grid_sys_tx_counter[GRID_SYS_WEST]++;
    4c7c:	4a04      	ldr	r2, [pc, #16]	; (4c90 <tx_cb_USART_GRID+0x2c>)
    4c7e:	68d3      	ldr	r3, [r2, #12]
    4c80:	3301      	adds	r3, #1
    4c82:	60d3      	str	r3, [r2, #12]
	}
	
}
    4c84:	e7f4      	b.n	4c70 <tx_cb_USART_GRID+0xc>
    4c86:	bf00      	nop
    4c88:	200011d0 	.word	0x200011d0
    4c8c:	200012b4 	.word	0x200012b4
    4c90:	20000b14 	.word	0x20000b14

00004c94 <rx_cb_USART_GRID>:

static void rx_cb_USART_GRID(const struct usart_async_descriptor *const descr)
{
	/* Transfer completed */
	
	if (descr == &USART_EAST){
    4c94:	4b08      	ldr	r3, [pc, #32]	; (4cb8 <rx_cb_USART_GRID+0x24>)
    4c96:	4298      	cmp	r0, r3
    4c98:	d003      	beq.n	4ca2 <rx_cb_USART_GRID+0xe>
		grid_sys_rx_counter[GRID_SYS_EAST]++;
	}
	if (descr == &USART_WEST){
    4c9a:	4b08      	ldr	r3, [pc, #32]	; (4cbc <rx_cb_USART_GRID+0x28>)
    4c9c:	4298      	cmp	r0, r3
    4c9e:	d005      	beq.n	4cac <rx_cb_USART_GRID+0x18>
    4ca0:	4770      	bx	lr
		grid_sys_rx_counter[GRID_SYS_EAST]++;
    4ca2:	4a07      	ldr	r2, [pc, #28]	; (4cc0 <rx_cb_USART_GRID+0x2c>)
    4ca4:	6953      	ldr	r3, [r2, #20]
    4ca6:	3301      	adds	r3, #1
    4ca8:	6153      	str	r3, [r2, #20]
    4caa:	e7f6      	b.n	4c9a <rx_cb_USART_GRID+0x6>
		grid_sys_rx_counter[GRID_SYS_WEST]++;
    4cac:	4a04      	ldr	r2, [pc, #16]	; (4cc0 <rx_cb_USART_GRID+0x2c>)
    4cae:	69d3      	ldr	r3, [r2, #28]
    4cb0:	3301      	adds	r3, #1
    4cb2:	61d3      	str	r3, [r2, #28]
	}
	
}
    4cb4:	e7f4      	b.n	4ca0 <rx_cb_USART_GRID+0xc>
    4cb6:	bf00      	nop
    4cb8:	200011d0 	.word	0x200011d0
    4cbc:	200012b4 	.word	0x200012b4
    4cc0:	20000b14 	.word	0x20000b14

00004cc4 <convert_cb_ADC_0>:
	volatile static uint8_t ADC_0_conversion_ready = 0;
	volatile static uint8_t ADC_1_conversion_ready = 0;

	static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
	{
		ADC_0_conversion_ready = 1;
    4cc4:	2201      	movs	r2, #1
    4cc6:	4b02      	ldr	r3, [pc, #8]	; (4cd0 <convert_cb_ADC_0+0xc>)
    4cc8:	f883 2020 	strb.w	r2, [r3, #32]
    4ccc:	4770      	bx	lr
    4cce:	bf00      	nop
    4cd0:	20000b14 	.word	0x20000b14

00004cd4 <tx_complete_cb_GRID_LED>:


	// DMA SPI CALLBACK
	static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
	{
		dma_spi_done = 1;
    4cd4:	2201      	movs	r2, #1
    4cd6:	4b01      	ldr	r3, [pc, #4]	; (4cdc <tx_complete_cb_GRID_LED+0x8>)
    4cd8:	625a      	str	r2, [r3, #36]	; 0x24
    4cda:	4770      	bx	lr
    4cdc:	20000b14 	.word	0x20000b14

00004ce0 <RTC_Scheduler_tick_cb>:

volatile uint32_t realtime = 0; 

static void RTC_Scheduler_tick_cb(const struct timer_task *const timer_task)
{
	realtime++;
    4ce0:	4b05      	ldr	r3, [pc, #20]	; (4cf8 <RTC_Scheduler_tick_cb+0x18>)
    4ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ce4:	3201      	adds	r2, #1
    4ce6:	629a      	str	r2, [r3, #40]	; 0x28
	task_counter[task_current]++;
    4ce8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    4cec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4cf2:	3201      	adds	r2, #1
    4cf4:	631a      	str	r2, [r3, #48]	; 0x30
    4cf6:	4770      	bx	lr
    4cf8:	20000b14 	.word	0x20000b14

00004cfc <RTC_Scheduler_report_cb>:
}

 static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
 {
 if (reportflag<255) reportflag++;
    4cfc:	4b06      	ldr	r3, [pc, #24]	; (4d18 <RTC_Scheduler_report_cb+0x1c>)
    4cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4d02:	b2db      	uxtb	r3, r3
    4d04:	2bff      	cmp	r3, #255	; 0xff
    4d06:	d006      	beq.n	4d16 <RTC_Scheduler_report_cb+0x1a>
    4d08:	4a03      	ldr	r2, [pc, #12]	; (4d18 <RTC_Scheduler_report_cb+0x1c>)
    4d0a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    4d0e:	3301      	adds	r3, #1
    4d10:	b2db      	uxtb	r3, r3
    4d12:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    4d16:	4770      	bx	lr
    4d18:	20000b14 	.word	0x20000b14

00004d1c <RTC_Scheduler_task2_cb>:
 }

static void RTC_Scheduler_task2_cb(const struct timer_task *const timer_task)
{
	if (task2flag<255) task2flag++;
    4d1c:	4b06      	ldr	r3, [pc, #24]	; (4d38 <RTC_Scheduler_task2_cb+0x1c>)
    4d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    4d22:	b2db      	uxtb	r3, r3
    4d24:	2bff      	cmp	r3, #255	; 0xff
    4d26:	d006      	beq.n	4d36 <RTC_Scheduler_task2_cb+0x1a>
    4d28:	4a03      	ldr	r2, [pc, #12]	; (4d38 <RTC_Scheduler_task2_cb+0x1c>)
    4d2a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
    4d2e:	3301      	adds	r3, #1
    4d30:	b2db      	uxtb	r3, r3
    4d32:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    4d36:	4770      	bx	lr
    4d38:	20000b14 	.word	0x20000b14

00004d3c <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    4d3c:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    4d3e:	4d0d      	ldr	r5, [pc, #52]	; (4d74 <grid_led_set_color+0x38>)
    4d40:	6ded      	ldr	r5, [r5, #92]	; 0x5c
    4d42:	4285      	cmp	r5, r0
    4d44:	d802      	bhi.n	4d4c <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    4d46:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    4d48:	bc30      	pop	{r4, r5}
    4d4a:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    4d4c:	4c09      	ldr	r4, [pc, #36]	; (4d74 <grid_led_set_color+0x38>)
    4d4e:	6e25      	ldr	r5, [r4, #96]	; 0x60
    4d50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4d54:	0080      	lsls	r0, r0, #2
    4d56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    4d5a:	6e52      	ldr	r2, [r2, #100]	; 0x64
    4d5c:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    4d5e:	4428      	add	r0, r5
    4d60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    4d64:	6e4a      	ldr	r2, [r1, #100]	; 0x64
    4d66:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    4d68:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    4d6e:	6083      	str	r3, [r0, #8]
		return 0;
    4d70:	2000      	movs	r0, #0
    4d72:	e7e9      	b.n	4d48 <grid_led_set_color+0xc>
    4d74:	20000b14 	.word	0x20000b14

00004d78 <grid_led_tick>:
/** ================== ANIMATION ==================  */




void grid_led_tick(void){
    4d78:	b470      	push	{r4, r5, r6}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<led_number; j++){
    4d7a:	4b10      	ldr	r3, [pc, #64]	; (4dbc <grid_led_tick+0x44>)
    4d7c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    4d7e:	b1dc      	cbz	r4, 4db8 <grid_led_tick+0x40>
					
		uint8_t num = j;
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			led_smart_buffer[num+(led_number*layer)].pha += led_smart_buffer[num+(led_number*layer)].fre; //PHASE + = FREQUENCY		
    4d80:	4b0f      	ldr	r3, [pc, #60]	; (4dc0 <grid_led_tick+0x48>)
    4d82:	681d      	ldr	r5, [r3, #0]
    4d84:	2300      	movs	r3, #0
    4d86:	4619      	mov	r1, r3
    4d88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4d8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4d90:	442a      	add	r2, r5
    4d92:	7b10      	ldrb	r0, [r2, #12]
    4d94:	7ad6      	ldrb	r6, [r2, #11]
    4d96:	4430      	add	r0, r6
    4d98:	72d0      	strb	r0, [r2, #11]
    4d9a:	4423      	add	r3, r4
    4d9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4da0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4da4:	442b      	add	r3, r5
    4da6:	7ada      	ldrb	r2, [r3, #11]
    4da8:	7b18      	ldrb	r0, [r3, #12]
    4daa:	4402      	add	r2, r0
    4dac:	72da      	strb	r2, [r3, #11]
	for (uint8_t j=0; j<led_number; j++){
    4dae:	3101      	adds	r1, #1
    4db0:	b2c9      	uxtb	r1, r1
    4db2:	460b      	mov	r3, r1
    4db4:	42a1      	cmp	r1, r4
    4db6:	d3e7      	bcc.n	4d88 <grid_led_tick+0x10>
		}	
	}
	/** END */
	
}
    4db8:	bc70      	pop	{r4, r5, r6}
    4dba:	4770      	bx	lr
    4dbc:	20000b14 	.word	0x20000b14
    4dc0:	20001790 	.word	0x20001790

00004dc4 <grid_led_set_min>:



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    4dc4:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_min.r = r;
    4dc6:	4c0b      	ldr	r4, [pc, #44]	; (4df4 <grid_led_set_min+0x30>)
    4dc8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    4dca:	fb04 0101 	mla	r1, r4, r1, r0
    4dce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4dd2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4dd6:	4808      	ldr	r0, [pc, #32]	; (4df8 <grid_led_set_min+0x34>)
    4dd8:	6804      	ldr	r4, [r0, #0]
    4dda:	5462      	strb	r2, [r4, r1]
	led_smart_buffer[num+(led_number*layer)].color_min.g = g;
    4ddc:	6802      	ldr	r2, [r0, #0]
    4dde:	440a      	add	r2, r1
    4de0:	7053      	strb	r3, [r2, #1]
	led_smart_buffer[num+(led_number*layer)].color_min.b = b;	
    4de2:	6800      	ldr	r0, [r0, #0]
    4de4:	4401      	add	r1, r0
    4de6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4dea:	708b      	strb	r3, [r1, #2]
}
    4dec:	f85d 4b04 	ldr.w	r4, [sp], #4
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	20000b14 	.word	0x20000b14
    4df8:	20001790 	.word	0x20001790

00004dfc <grid_led_set_mid>:

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    4dfc:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_mid.r = r;
    4dfe:	4c0a      	ldr	r4, [pc, #40]	; (4e28 <grid_led_set_mid+0x2c>)
    4e00:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    4e02:	fb04 0101 	mla	r1, r4, r1, r0
    4e06:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4e0a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4e0e:	4c07      	ldr	r4, [pc, #28]	; (4e2c <grid_led_set_mid+0x30>)
    4e10:	6820      	ldr	r0, [r4, #0]
    4e12:	4408      	add	r0, r1
    4e14:	70c2      	strb	r2, [r0, #3]
	led_smart_buffer[num+(led_number*layer)].color_mid.g = g;
    4e16:	6820      	ldr	r0, [r4, #0]
    4e18:	4401      	add	r1, r0
    4e1a:	710b      	strb	r3, [r1, #4]
	led_smart_buffer[num+(led_number*layer)].color_mid.b = b;	
    4e1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4e20:	714b      	strb	r3, [r1, #5]
}
    4e22:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e26:	4770      	bx	lr
    4e28:	20000b14 	.word	0x20000b14
    4e2c:	20001790 	.word	0x20001790

00004e30 <grid_led_set_max>:

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    4e30:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_max.r = r;
    4e32:	4c09      	ldr	r4, [pc, #36]	; (4e58 <grid_led_set_max+0x28>)
    4e34:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    4e36:	fb04 0101 	mla	r1, r4, r1, r0
    4e3a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4e3e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4e42:	4806      	ldr	r0, [pc, #24]	; (4e5c <grid_led_set_max+0x2c>)
    4e44:	6800      	ldr	r0, [r0, #0]
    4e46:	4401      	add	r1, r0
    4e48:	718a      	strb	r2, [r1, #6]
	led_smart_buffer[num+(led_number*layer)].color_max.g = g;
    4e4a:	71cb      	strb	r3, [r1, #7]
	led_smart_buffer[num+(led_number*layer)].color_max.b = b;	
    4e4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4e50:	720b      	strb	r3, [r1, #8]
}
    4e52:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e56:	4770      	bx	lr
    4e58:	20000b14 	.word	0x20000b14
    4e5c:	20001790 	.word	0x20001790

00004e60 <grid_led_set_phase>:

void grid_led_set_phase(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].pha = val;
    4e60:	4b06      	ldr	r3, [pc, #24]	; (4e7c <grid_led_set_phase+0x1c>)
    4e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4e64:	fb03 0101 	mla	r1, r3, r1, r0
    4e68:	4b05      	ldr	r3, [pc, #20]	; (4e80 <grid_led_set_phase+0x20>)
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4e70:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4e74:	4419      	add	r1, r3
    4e76:	72ca      	strb	r2, [r1, #11]
    4e78:	4770      	bx	lr
    4e7a:	bf00      	nop
    4e7c:	20000b14 	.word	0x20000b14
    4e80:	20001790 	.word	0x20001790

00004e84 <grid_led_set_frequency>:
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].fre = val;
    4e84:	4b06      	ldr	r3, [pc, #24]	; (4ea0 <grid_led_set_frequency+0x1c>)
    4e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4e88:	fb03 0101 	mla	r1, r3, r1, r0
    4e8c:	4b05      	ldr	r3, [pc, #20]	; (4ea4 <grid_led_set_frequency+0x20>)
    4e8e:	681b      	ldr	r3, [r3, #0]
    4e90:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4e94:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4e98:	4419      	add	r1, r3
    4e9a:	730a      	strb	r2, [r1, #12]
    4e9c:	4770      	bx	lr
    4e9e:	bf00      	nop
    4ea0:	20000b14 	.word	0x20000b14
    4ea4:	20001790 	.word	0x20001790

00004ea8 <grid_led_init>:
uint8_t grid_led_init(uint8_t num){
    4ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eac:	b083      	sub	sp, #12
    4eae:	4605      	mov	r5, r0
	led_number = num;	
    4eb0:	4c5f      	ldr	r4, [pc, #380]	; (5030 <grid_led_init+0x188>)
    4eb2:	65e0      	str	r0, [r4, #92]	; 0x5c
	led_frame_buffer_size = (GRID_LED_RESET_LENGTH + num*3*4);
    4eb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4eb8:	0080      	lsls	r0, r0, #2
    4eba:	3090      	adds	r0, #144	; 0x90
    4ebc:	65a0      	str	r0, [r4, #88]	; 0x58
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    4ebe:	4f5d      	ldr	r7, [pc, #372]	; (5034 <grid_led_init+0x18c>)
    4ec0:	47b8      	blx	r7
    4ec2:	4606      	mov	r6, r0
    4ec4:	6560      	str	r0, [r4, #84]	; 0x54
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[GRID_LED_RESET_LENGTH];
    4ec6:	f100 0390 	add.w	r3, r0, #144	; 0x90
    4eca:	f844 3f60 	str.w	r3, [r4, #96]!
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    4ece:	201a      	movs	r0, #26
    4ed0:	fb00 f005 	mul.w	r0, r0, r5
    4ed4:	47b8      	blx	r7
    4ed6:	4b58      	ldr	r3, [pc, #352]	; (5038 <grid_led_init+0x190>)
    4ed8:	6018      	str	r0, [r3, #0]
    4eda:	2100      	movs	r1, #0
    4edc:	b28b      	uxth	r3, r1
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    4ede:	f003 0201 	and.w	r2, r3, #1
    4ee2:	2a00      	cmp	r2, #0
    4ee4:	bf14      	ite	ne
    4ee6:	f04f 6260 	movne.w	r2, #234881024	; 0xe000000
    4eea:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    4eee:	f3c3 0040 	ubfx	r0, r3, #1, #1
    4ef2:	2800      	cmp	r0, #0
    4ef4:	bf14      	ite	ne
    4ef6:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    4efa:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    4efe:	4310      	orrs	r0, r2
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    4f00:	f3c3 0280 	ubfx	r2, r3, #2, #1
    4f04:	2a00      	cmp	r2, #0
    4f06:	bf14      	ite	ne
    4f08:	f44f 2260 	movne.w	r2, #917504	; 0xe0000
    4f0c:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    4f10:	4302      	orrs	r2, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    4f12:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    4f16:	2800      	cmp	r0, #0
    4f18:	bf14      	ite	ne
    4f1a:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    4f1e:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    4f22:	4302      	orrs	r2, r0
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    4f24:	f3c3 1000 	ubfx	r0, r3, #4, #1
    4f28:	2800      	cmp	r0, #0
    4f2a:	bf14      	ite	ne
    4f2c:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    4f30:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    4f34:	4310      	orrs	r0, r2
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    4f36:	f3c3 1240 	ubfx	r2, r3, #5, #1
    4f3a:	2a00      	cmp	r2, #0
    4f3c:	bf14      	ite	ne
    4f3e:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    4f42:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    4f46:	4310      	orrs	r0, r2
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    4f48:	f3c3 1280 	ubfx	r2, r3, #6, #1
    4f4c:	2a00      	cmp	r2, #0
    4f4e:	bf14      	ite	ne
    4f50:	220e      	movne	r2, #14
    4f52:	2208      	moveq	r2, #8
    4f54:	4302      	orrs	r2, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    4f56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	bf14      	ite	ne
    4f5e:	23e0      	movne	r3, #224	; 0xe0
    4f60:	2380      	moveq	r3, #128	; 0x80
    4f62:	4313      	orrs	r3, r2
		led_color_code[i] = temp;
    4f64:	f844 3f04 	str.w	r3, [r4, #4]!
    4f68:	3101      	adds	r1, #1
	for(uint16_t i=0; i<256; i++){
    4f6a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4f6e:	d1b5      	bne.n	4edc <grid_led_init+0x34>
    4f70:	1e73      	subs	r3, r6, #1
    4f72:	368f      	adds	r6, #143	; 0x8f
		led_frame_buffer[i] = LED_CODE_R;
    4f74:	2200      	movs	r2, #0
    4f76:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    4f7a:	42b3      	cmp	r3, r6
    4f7c:	d1fb      	bne.n	4f76 <grid_led_init+0xce>
	for (uint32_t i = 0; i<led_number; i++){
    4f7e:	2d00      	cmp	r5, #0
    4f80:	d051      	beq.n	5026 <grid_led_init+0x17e>
    4f82:	2600      	movs	r6, #0
		grid_led_set_color(i, 0,0,0);
    4f84:	4637      	mov	r7, r6
    4f86:	4c2d      	ldr	r4, [pc, #180]	; (503c <grid_led_init+0x194>)
    4f88:	463b      	mov	r3, r7
    4f8a:	463a      	mov	r2, r7
    4f8c:	4639      	mov	r1, r7
    4f8e:	4630      	mov	r0, r6
    4f90:	47a0      	blx	r4
	for (uint32_t i = 0; i<led_number; i++){
    4f92:	3601      	adds	r6, #1
    4f94:	42b5      	cmp	r5, r6
    4f96:	d1f7      	bne.n	4f88 <grid_led_init+0xe0>
	for(uint8_t i = 0; i<led_number; i++){
    4f98:	2e00      	cmp	r6, #0
    4f9a:	d044      	beq.n	5026 <grid_led_init+0x17e>
    4f9c:	2500      	movs	r5, #0
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    4f9e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5048 <grid_led_init+0x1a0>
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    4fa2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 504c <grid_led_init+0x1a4>
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    4fa6:	46b1      	mov	r9, r6
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    4fa8:	2400      	movs	r4, #0
    4faa:	9400      	str	r4, [sp, #0]
    4fac:	4623      	mov	r3, r4
    4fae:	4622      	mov	r2, r4
    4fb0:	4621      	mov	r1, r4
    4fb2:	4628      	mov	r0, r5
    4fb4:	47d8      	blx	fp
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    4fb6:	237f      	movs	r3, #127	; 0x7f
    4fb8:	9300      	str	r3, [sp, #0]
    4fba:	4623      	mov	r3, r4
    4fbc:	4622      	mov	r2, r4
    4fbe:	4621      	mov	r1, r4
    4fc0:	4628      	mov	r0, r5
    4fc2:	47d0      	blx	sl
		grid_led_set_max(i, 0, 0x00, 0x00, 0xFF);
    4fc4:	23ff      	movs	r3, #255	; 0xff
    4fc6:	9300      	str	r3, [sp, #0]
    4fc8:	4623      	mov	r3, r4
    4fca:	4622      	mov	r2, r4
    4fcc:	4621      	mov	r1, r4
    4fce:	4628      	mov	r0, r5
    4fd0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5050 <grid_led_init+0x1a8>
    4fd4:	47c0      	blx	r8
		grid_led_set_frequency(i, 0, 0);
    4fd6:	4622      	mov	r2, r4
    4fd8:	4621      	mov	r1, r4
    4fda:	4628      	mov	r0, r5
    4fdc:	4e18      	ldr	r6, [pc, #96]	; (5040 <grid_led_init+0x198>)
    4fde:	47b0      	blx	r6
		grid_led_set_phase(i, 0, 0);
    4fe0:	4622      	mov	r2, r4
    4fe2:	4621      	mov	r1, r4
    4fe4:	4628      	mov	r0, r5
    4fe6:	4f17      	ldr	r7, [pc, #92]	; (5044 <grid_led_init+0x19c>)
    4fe8:	47b8      	blx	r7
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    4fea:	2202      	movs	r2, #2
    4fec:	9200      	str	r2, [sp, #0]
    4fee:	4613      	mov	r3, r2
    4ff0:	2101      	movs	r1, #1
    4ff2:	4628      	mov	r0, r5
    4ff4:	47d8      	blx	fp
		grid_led_set_mid(i, 1, 0x00, 0x00, 0x00);
    4ff6:	9400      	str	r4, [sp, #0]
    4ff8:	4623      	mov	r3, r4
    4ffa:	4622      	mov	r2, r4
    4ffc:	2101      	movs	r1, #1
    4ffe:	4628      	mov	r0, r5
    5000:	47d0      	blx	sl
		grid_led_set_max(i, 1, 0x00, 0x00, 0x00);
    5002:	9400      	str	r4, [sp, #0]
    5004:	4623      	mov	r3, r4
    5006:	4622      	mov	r2, r4
    5008:	2101      	movs	r1, #1
    500a:	4628      	mov	r0, r5
    500c:	47c0      	blx	r8
		grid_led_set_frequency(i, 1, 0);
    500e:	4622      	mov	r2, r4
    5010:	2101      	movs	r1, #1
    5012:	4628      	mov	r0, r5
    5014:	47b0      	blx	r6
		grid_led_set_phase(i, 1, 0);
    5016:	4622      	mov	r2, r4
    5018:	2101      	movs	r1, #1
    501a:	4628      	mov	r0, r5
    501c:	47b8      	blx	r7
	for(uint8_t i = 0; i<led_number; i++){
    501e:	3501      	adds	r5, #1
    5020:	b2ed      	uxtb	r5, r5
    5022:	45a9      	cmp	r9, r5
    5024:	d8c0      	bhi.n	4fa8 <grid_led_init+0x100>
}
    5026:	2000      	movs	r0, #0
    5028:	b003      	add	sp, #12
    502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    502e:	bf00      	nop
    5030:	20000b14 	.word	0x20000b14
    5034:	00006aa5 	.word	0x00006aa5
    5038:	20001790 	.word	0x20001790
    503c:	00004d3d 	.word	0x00004d3d
    5040:	00004e85 	.word	0x00004e85
    5044:	00004e61 	.word	0x00004e61
    5048:	00004dc5 	.word	0x00004dc5
    504c:	00004dfd 	.word	0x00004dfd
    5050:	00004e31 	.word	0x00004e31

00005054 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    5054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = led_smart_buffer[num+(led_number*layer)].color_min.r;
    5058:	4b25      	ldr	r3, [pc, #148]	; (50f0 <grid_led_render+0x9c>)
    505a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    505c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5060:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    5064:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    5068:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    506c:	4a21      	ldr	r2, [pc, #132]	; (50f4 <grid_led_render+0xa0>)
    506e:	6814      	ldr	r4, [r2, #0]
    5070:	441c      	add	r4, r3
    5072:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    5074:	2300      	movs	r3, #0
	uint32_t mix_g = 0;
    5076:	461a      	mov	r2, r3
	uint32_t mix_r = 0;
    5078:	4619      	mov	r1, r3
		uint8_t min_g = led_smart_buffer[num+(led_number*layer)].color_min.g;
		uint8_t min_b = led_smart_buffer[num+(led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    507a:	f8df c080 	ldr.w	ip, [pc, #128]	; 50fc <grid_led_render+0xa8>
    507e:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = led_smart_buffer[num+(led_number*layer)].color_max.r;
		uint8_t max_g = led_smart_buffer[num+(led_number*layer)].color_max.g;
		uint8_t max_b = led_smart_buffer[num+(led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[led_smart_buffer[num+(led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5080:	f81c 9006 	ldrb.w	r9, [ip, r6]
		uint8_t mid_a = mid_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5084:	4466      	add	r6, ip
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5086:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    508a:	f896 8200 	ldrb.w	r8, [r6, #512]	; 0x200
    508e:	7826      	ldrb	r6, [r4, #0]
    5090:	f894 a003 	ldrb.w	sl, [r4, #3]
    5094:	fb05 fa0a 	mul.w	sl, r5, sl
    5098:	fb09 aa06 	mla	sl, r9, r6, sl
    509c:	79a6      	ldrb	r6, [r4, #6]
    509e:	fb08 a606 	mla	r6, r8, r6, sl
    50a2:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    50a4:	7866      	ldrb	r6, [r4, #1]
    50a6:	f894 a004 	ldrb.w	sl, [r4, #4]
    50aa:	fb05 fa0a 	mul.w	sl, r5, sl
    50ae:	fb09 aa06 	mla	sl, r9, r6, sl
    50b2:	79e6      	ldrb	r6, [r4, #7]
    50b4:	fb08 a606 	mla	r6, r8, r6, sl
    50b8:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    50ba:	78a6      	ldrb	r6, [r4, #2]
    50bc:	f894 a005 	ldrb.w	sl, [r4, #5]
    50c0:	fb05 f50a 	mul.w	r5, r5, sl
    50c4:	fb09 5606 	mla	r6, r9, r6, r5
    50c8:	7a25      	ldrb	r5, [r4, #8]
    50ca:	fb08 6505 	mla	r5, r8, r5, r6
    50ce:	442b      	add	r3, r5
    50d0:	3f01      	subs	r7, #1
    50d2:	4474      	add	r4, lr
	for (uint8_t i = 0; i<2; i++){
    50d4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    50d8:	d1d1      	bne.n	507e <grid_led_render+0x2a>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    50da:	f3c3 2347 	ubfx	r3, r3, #9, #8
    50de:	f3c2 2247 	ubfx	r2, r2, #9, #8
    50e2:	f3c1 2147 	ubfx	r1, r1, #9, #8
    50e6:	4c04      	ldr	r4, [pc, #16]	; (50f8 <grid_led_render+0xa4>)
    50e8:	47a0      	blx	r4
    50ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    50ee:	bf00      	nop
    50f0:	20000b14 	.word	0x20000b14
    50f4:	20001790 	.word	0x20001790
    50f8:	00004d3d 	.word	0x00004d3d
    50fc:	20000000 	.word	0x20000000

00005100 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    5100:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    5102:	4b05      	ldr	r3, [pc, #20]	; (5118 <grid_led_render_all+0x18>)
    5104:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
    5106:	b135      	cbz	r5, 5116 <grid_led_render_all+0x16>
    5108:	2400      	movs	r4, #0
		
		grid_led_render(i);
    510a:	4e04      	ldr	r6, [pc, #16]	; (511c <grid_led_render_all+0x1c>)
    510c:	4620      	mov	r0, r4
    510e:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    5110:	3401      	adds	r4, #1
    5112:	42ac      	cmp	r4, r5
    5114:	d1fa      	bne.n	510c <grid_led_render_all+0xc>
    5116:	bd70      	pop	{r4, r5, r6, pc}
    5118:	20000b14 	.word	0x20000b14
    511c:	00005055 	.word	0x00005055

00005120 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    5120:	b538      	push	{r3, r4, r5, lr}
    5122:	4604      	mov	r4, r0
    5124:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    5126:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    5128:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    512a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    512c:	2300      	movs	r3, #0
    512e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    5130:	0048      	lsls	r0, r1, #1
    5132:	4b09      	ldr	r3, [pc, #36]	; (5158 <grid_ain_channel_init+0x38>)
    5134:	4798      	blx	r3
    5136:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5138:	b14d      	cbz	r5, 514e <grid_ain_channel_init+0x2e>
    513a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    513c:	4619      	mov	r1, r3
    513e:	6822      	ldr	r2, [r4, #0]
    5140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5144:	3301      	adds	r3, #1
    5146:	b2db      	uxtb	r3, r3
    5148:	7922      	ldrb	r2, [r4, #4]
    514a:	429a      	cmp	r2, r3
    514c:	d8f7      	bhi.n	513e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    514e:	2000      	movs	r0, #0
    5150:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    5152:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    5154:	bd38      	pop	{r3, r4, r5, pc}
    5156:	bf00      	nop
    5158:	00006aa5 	.word	0x00006aa5

0000515c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5160:	4605      	mov	r5, r0
    5162:	460e      	mov	r6, r1
    5164:	4691      	mov	r9, r2
    5166:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    5168:	4c0e      	ldr	r4, [pc, #56]	; (51a4 <grid_ain_init+0x48>)
    516a:	f884 0464 	strb.w	r0, [r4, #1124]	; 0x464
	ain_channel_buffer_depth = depth;
    516e:	f884 1465 	strb.w	r1, [r4, #1125]	; 0x465
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    5172:	0100      	lsls	r0, r0, #4
    5174:	4b0c      	ldr	r3, [pc, #48]	; (51a8 <grid_ain_init+0x4c>)
    5176:	4798      	blx	r3
    5178:	f8c4 0468 	str.w	r0, [r4, #1128]	; 0x468

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    517c:	b175      	cbz	r5, 519c <grid_ain_init+0x40>
    517e:	4604      	mov	r4, r0
    5180:	3d01      	subs	r5, #1
    5182:	b2ed      	uxtb	r5, r5
    5184:	3501      	adds	r5, #1
    5186:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    518a:	4f08      	ldr	r7, [pc, #32]	; (51ac <grid_ain_init+0x50>)
    518c:	4643      	mov	r3, r8
    518e:	464a      	mov	r2, r9
    5190:	4631      	mov	r1, r6
    5192:	4620      	mov	r0, r4
    5194:	47b8      	blx	r7
    5196:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5198:	42ac      	cmp	r4, r5
    519a:	d1f7      	bne.n	518c <grid_ain_init+0x30>
	}

	return 0;
}
    519c:	2000      	movs	r0, #0
    519e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51a2:	bf00      	nop
    51a4:	20000b14 	.word	0x20000b14
    51a8:	00006aa5 	.word	0x00006aa5
    51ac:	00005121 	.word	0x00005121

000051b0 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    51b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    51b4:	0100      	lsls	r0, r0, #4
    51b6:	4b3c      	ldr	r3, [pc, #240]	; (52a8 <grid_ain_add_sample+0xf8>)
    51b8:	f8d3 a468 	ldr.w	sl, [r3, #1128]	; 0x468
    51bc:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    51c0:	f89c 6004 	ldrb.w	r6, [ip, #4]
    51c4:	2e00      	cmp	r6, #0
    51c6:	d05b      	beq.n	5280 <grid_ain_add_sample+0xd0>
    51c8:	f85a 5000 	ldr.w	r5, [sl, r0]
    51cc:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    51ce:	2200      	movs	r2, #0
    51d0:	4690      	mov	r8, r2
    51d2:	4691      	mov	r9, r2
    51d4:	4696      	mov	lr, r2
    51d6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    51da:	4614      	mov	r4, r2
    51dc:	fa5f fb82 	uxtb.w	fp, r2
    51e0:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    51e4:	441c      	add	r4, r3
		
		if (current > maximum){
    51e6:	4573      	cmp	r3, lr
    51e8:	bf84      	itt	hi
    51ea:	46d8      	movhi	r8, fp
			maximum = current;
    51ec:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    51ee:	42bb      	cmp	r3, r7
    51f0:	bf3c      	itt	cc
    51f2:	46d9      	movcc	r9, fp
			minimum = current;
    51f4:	461f      	movcc	r7, r3
    51f6:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    51f8:	b2d3      	uxtb	r3, r2
    51fa:	42b3      	cmp	r3, r6
    51fc:	d3ee      	bcc.n	51dc <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    51fe:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    5202:	b2b6      	uxth	r6, r6
    5204:	428e      	cmp	r6, r1
    5206:	d23f      	bcs.n	5288 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    5208:	f85a 3000 	ldr.w	r3, [sl, r0]
    520c:	440c      	add	r4, r1
    520e:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    5212:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    5214:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    5218:	f89c 3004 	ldrb.w	r3, [ip, #4]
    521c:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    5220:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5224:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    5228:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    522a:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    522e:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5230:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    5232:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    5234:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    5238:	b29b      	uxth	r3, r3
    523a:	408b      	lsls	r3, r1
    523c:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    523e:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    5242:	1b92      	subs	r2, r2, r6
    5244:	2a00      	cmp	r2, #0
    5246:	bfb8      	it	lt
    5248:	4252      	neglt	r2, r2
    524a:	2601      	movs	r6, #1
    524c:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5250:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    5254:	42be      	cmp	r6, r7
    5256:	d020      	beq.n	529a <grid_ain_add_sample+0xea>
    5258:	4282      	cmp	r2, r0
    525a:	dc08      	bgt.n	526e <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    525c:	2201      	movs	r2, #1
    525e:	fa02 f505 	lsl.w	r5, r2, r5
    5262:	fa02 f101 	lsl.w	r1, r2, r1
    5266:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5268:	428f      	cmp	r7, r1
    526a:	d000      	beq.n	526e <grid_ain_add_sample+0xbe>
    526c:	b9c7      	cbnz	r7, 52a0 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    526e:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    5272:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    5276:	2001      	movs	r0, #1
    5278:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    5280:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    5282:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    5284:	2400      	movs	r4, #0
    5286:	e7ba      	b.n	51fe <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    5288:	f85a 3000 	ldr.w	r3, [sl, r0]
    528c:	440c      	add	r4, r1
    528e:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    5292:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    5294:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    5298:	e7be      	b.n	5218 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    529a:	2000      	movs	r0, #0
    529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a0:	2000      	movs	r0, #0
	}
	
}
    52a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a6:	bf00      	nop
    52a8:	20000b14 	.word	0x20000b14

000052ac <convert_cb_ADC_1>:
	{
    52ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52b0:	b082      	sub	sp, #8
		ADC_1_conversion_ready = 1;
    52b2:	2201      	movs	r2, #1
    52b4:	4b4b      	ldr	r3, [pc, #300]	; (53e4 <convert_cb_ADC_1+0x138>)
    52b6:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
		while(ADC_0_conversion_ready==0){}
    52ba:	461a      	mov	r2, r3
    52bc:	f892 3020 	ldrb.w	r3, [r2, #32]
    52c0:	2b00      	cmp	r3, #0
    52c2:	d0fb      	beq.n	52bc <convert_cb_ADC_1+0x10>
		while(ADC_1_conversion_ready==0){}
    52c4:	4a47      	ldr	r2, [pc, #284]	; (53e4 <convert_cb_ADC_1+0x138>)
    52c6:	f892 346c 	ldrb.w	r3, [r2, #1132]	; 0x46c
    52ca:	2b00      	cmp	r3, #0
    52cc:	d0fb      	beq.n	52c6 <convert_cb_ADC_1+0x1a>
		uint16_t adcresult_0 = 0;
    52ce:	2700      	movs	r7, #0
    52d0:	f8ad 7006 	strh.w	r7, [sp, #6]
		uint16_t adcresult_1 = 0;
    52d4:	f8ad 7004 	strh.w	r7, [sp, #4]
		uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    52d8:	4e42      	ldr	r6, [pc, #264]	; (53e4 <convert_cb_ADC_1+0x138>)
    52da:	f896 346d 	ldrb.w	r3, [r6, #1133]	; 0x46d
    52de:	4a42      	ldr	r2, [pc, #264]	; (53e8 <convert_cb_ADC_1+0x13c>)
    52e0:	18d1      	adds	r1, r2, r3
    52e2:	7a0d      	ldrb	r5, [r1, #8]
		uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    52e4:	5cd4      	ldrb	r4, [r2, r3]
		adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    52e6:	2302      	movs	r3, #2
    52e8:	f10d 0206 	add.w	r2, sp, #6
    52ec:	4639      	mov	r1, r7
    52ee:	483f      	ldr	r0, [pc, #252]	; (53ec <convert_cb_ADC_1+0x140>)
    52f0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5400 <convert_cb_ADC_1+0x154>
    52f4:	47c0      	blx	r8
		adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    52f6:	2302      	movs	r3, #2
    52f8:	aa01      	add	r2, sp, #4
    52fa:	4639      	mov	r1, r7
    52fc:	483c      	ldr	r0, [pc, #240]	; (53f0 <convert_cb_ADC_1+0x144>)
    52fe:	47c0      	blx	r8
		return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5300:	442e      	add	r6, r5
    5302:	f996 2470 	ldrsb.w	r2, [r6, #1136]	; 0x470
		if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_REVERSED)){
    5306:	f012 0f01 	tst.w	r2, #1
    530a:	d004      	beq.n	5316 <convert_cb_ADC_1+0x6a>
			adcresult_0 = 65535 - adcresult_0;
    530c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5310:	43db      	mvns	r3, r3
    5312:	f8ad 3006 	strh.w	r3, [sp, #6]
		return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5316:	4b33      	ldr	r3, [pc, #204]	; (53e4 <convert_cb_ADC_1+0x138>)
    5318:	4423      	add	r3, r4
    531a:	f993 3470 	ldrsb.w	r3, [r3, #1136]	; 0x470
		if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_REVERSED)){
    531e:	f013 0f01 	tst.w	r3, #1
    5322:	d004      	beq.n	532e <convert_cb_ADC_1+0x82>
			adcresult_1 = 65535 - adcresult_1;
    5324:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5328:	43c9      	mvns	r1, r1
    532a:	f8ad 1004 	strh.w	r1, [sp, #4]
		return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    532e:	f002 0202 	and.w	r2, r2, #2
		if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_BINARY)){
    5332:	b252      	sxtb	r2, r2
    5334:	b152      	cbz	r2, 534c <convert_cb_ADC_1+0xa0>
			adcresult_0 = (adcresult_0>10000)*65535;
    5336:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    533a:	f242 7110 	movw	r1, #10000	; 0x2710
    533e:	428a      	cmp	r2, r1
    5340:	f04f 32ff 	mov.w	r2, #4294967295
    5344:	bf98      	it	ls
    5346:	2200      	movls	r2, #0
    5348:	f8ad 2006 	strh.w	r2, [sp, #6]
		return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    534c:	f003 0302 	and.w	r3, r3, #2
		if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_BINARY)){
    5350:	b25b      	sxtb	r3, r3
    5352:	b153      	cbz	r3, 536a <convert_cb_ADC_1+0xbe>
			adcresult_1 = (adcresult_1>10000)*65535;
    5354:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5358:	f242 7210 	movw	r2, #10000	; 0x2710
    535c:	4293      	cmp	r3, r2
    535e:	f04f 33ff 	mov.w	r3, #4294967295
    5362:	bf98      	it	ls
    5364:	2300      	movls	r3, #0
    5366:	f8ad 3004 	strh.w	r3, [sp, #4]
		grid_ain_add_sample(adc_index_0, adcresult_0);
    536a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    536e:	4628      	mov	r0, r5
    5370:	4d20      	ldr	r5, [pc, #128]	; (53f4 <convert_cb_ADC_1+0x148>)
    5372:	47a8      	blx	r5
		grid_ain_add_sample(adc_index_1, adcresult_1);
    5374:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5378:	4620      	mov	r0, r4
    537a:	47a8      	blx	r5
		grid_module_mux++;
    537c:	4919      	ldr	r1, [pc, #100]	; (53e4 <convert_cb_ADC_1+0x138>)
    537e:	f891 346d 	ldrb.w	r3, [r1, #1133]	; 0x46d
    5382:	3301      	adds	r3, #1
    5384:	b2db      	uxtb	r3, r3
		grid_module_mux%=8;
    5386:	f003 0207 	and.w	r2, r3, #7
    538a:	f881 246d 	strb.w	r2, [r1, #1133]	; 0x46d
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    538e:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5392:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    5396:	4b18      	ldr	r3, [pc, #96]	; (53f8 <convert_cb_ADC_1+0x14c>)
    5398:	bf14      	ite	ne
    539a:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    539e:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    53a2:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    53a6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    53aa:	4b13      	ldr	r3, [pc, #76]	; (53f8 <convert_cb_ADC_1+0x14c>)
    53ac:	bf14      	ite	ne
    53ae:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    53b2:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    53b6:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    53b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    53bc:	4b0e      	ldr	r3, [pc, #56]	; (53f8 <convert_cb_ADC_1+0x14c>)
    53be:	bf14      	ite	ne
    53c0:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    53c4:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
		ADC_0_conversion_ready = 0;	
    53c8:	4b06      	ldr	r3, [pc, #24]	; (53e4 <convert_cb_ADC_1+0x138>)
    53ca:	2200      	movs	r2, #0
    53cc:	f883 2020 	strb.w	r2, [r3, #32]
		ADC_1_conversion_ready = 0;
    53d0:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
		adc_async_start_conversion(&ADC_0);			
    53d4:	4805      	ldr	r0, [pc, #20]	; (53ec <convert_cb_ADC_1+0x140>)
    53d6:	4c09      	ldr	r4, [pc, #36]	; (53fc <convert_cb_ADC_1+0x150>)
    53d8:	47a0      	blx	r4
		adc_async_start_conversion(&ADC_1);
    53da:	4805      	ldr	r0, [pc, #20]	; (53f0 <convert_cb_ADC_1+0x144>)
    53dc:	47a0      	blx	r4
	}
    53de:	b002      	add	sp, #8
    53e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53e4:	20000b14 	.word	0x20000b14
    53e8:	00007750 	.word	0x00007750
    53ec:	200011a4 	.word	0x200011a4
    53f0:	20001354 	.word	0x20001354
    53f4:	000051b1 	.word	0x000051b1
    53f8:	41008000 	.word	0x41008000
    53fc:	0000104d 	.word	0x0000104d
    5400:	00000f6d 	.word	0x00000f6d

00005404 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5404:	4b03      	ldr	r3, [pc, #12]	; (5414 <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    5406:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
    540a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    540e:	7b00      	ldrb	r0, [r0, #12]
    5410:	4770      	bx	lr
    5412:	bf00      	nop
    5414:	20000b14 	.word	0x20000b14

00005418 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    5418:	4b04      	ldr	r3, [pc, #16]	; (542c <grid_ain_get_average+0x14>)
    541a:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
    541e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    5422:	2300      	movs	r3, #0
    5424:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    5426:	8900      	ldrh	r0, [r0, #8]
    5428:	4770      	bx	lr
    542a:	bf00      	nop
    542c:	20000b14 	.word	0x20000b14

00005430 <grid_tel_event_register>:
		return 0;
	}
}  


struct TEL_event_counter* grid_tel_event_register(uint32_t frequency_reference, uint32_t frequency_alert){
    5430:	b538      	push	{r3, r4, r5, lr}
    5432:	4604      	mov	r4, r0
    5434:	460d      	mov	r5, r1
	
	struct TEL_event_counter* new_item = (struct TEL_event_counter*) malloc(sizeof(struct TEL_event_counter));
    5436:	2018      	movs	r0, #24
    5438:	4b0c      	ldr	r3, [pc, #48]	; (546c <grid_tel_event_register+0x3c>)
    543a:	4798      	blx	r3
	if(new_item != NULL){	// malloc successful
    543c:	4601      	mov	r1, r0
    543e:	b190      	cbz	r0, 5466 <grid_tel_event_register+0x36>
		
		new_item->next = NULL;
    5440:	2300      	movs	r3, #0
    5442:	6143      	str	r3, [r0, #20]
		
		new_item->absolute_counter = 0;
    5444:	6003      	str	r3, [r0, #0]
		new_item->frequency = 0;
    5446:	6103      	str	r3, [r0, #16]
		new_item->frequency_alert = frequency_alert;
    5448:	60c5      	str	r5, [r0, #12]
		new_item->frequency_counter = 0;
    544a:	6043      	str	r3, [r0, #4]
		new_item->frequency_reference = frequency_reference;
    544c:	6084      	str	r4, [r0, #8]
		
		

		if(grid_tel_event_head == NULL){ //List is empty
    544e:	4b08      	ldr	r3, [pc, #32]	; (5470 <grid_tel_event_register+0x40>)
    5450:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5454:	b91a      	cbnz	r2, 545e <grid_tel_event_register+0x2e>
			grid_tel_event_head = new_item;
    5456:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
    545a:	e004      	b.n	5466 <grid_tel_event_register+0x36>
			
			struct TEL_event_counter* current = grid_tel_event_head;
			
			while (current->next != NULL)
			{
				current = current->next;
    545c:	461a      	mov	r2, r3
			while (current->next != NULL)
    545e:	6953      	ldr	r3, [r2, #20]
    5460:	2b00      	cmp	r3, #0
    5462:	d1fb      	bne.n	545c <grid_tel_event_register+0x2c>
			}
			
			current -> next = new_item;
    5464:	6151      	str	r1, [r2, #20]

	}

	return new_item;

}
    5466:	4608      	mov	r0, r1
    5468:	bd38      	pop	{r3, r4, r5, pc}
    546a:	bf00      	nop
    546c:	00006aa5 	.word	0x00006aa5
    5470:	20000b14 	.word	0x20000b14

00005474 <grid_tel_calculate_event_frequency>:


uint8_t grid_tel_calculate_event_frequency(struct TEL_event_counter* telemetry_event){

	// Save valid frequency data
	telemetry_event->frequency = telemetry_event->frequency_counter;
    5474:	6843      	ldr	r3, [r0, #4]
    5476:	6103      	str	r3, [r0, #16]
	
	
	//Update the freq counter variable
	if(telemetry_event->frequency_counter >= telemetry_event->frequency_reference){
    5478:	6882      	ldr	r2, [r0, #8]
    547a:	4293      	cmp	r3, r2
		telemetry_event->frequency_counter -= telemetry_event->frequency_reference;
    547c:	bf2c      	ite	cs
    547e:	1a9b      	subcs	r3, r3, r2
	}else{
		telemetry_event->frequency_counter = 0;
    5480:	2300      	movcc	r3, #0
    5482:	6043      	str	r3, [r0, #4]
	}
	

	// Instant alert feedback
	if (telemetry_event->frequency_counter > telemetry_event->frequency_alert){
    5484:	6842      	ldr	r2, [r0, #4]
    5486:	68c0      	ldr	r0, [r0, #12]
		return 1;
	}
	else{
		return 0;
	}	
}
    5488:	4282      	cmp	r2, r0
    548a:	bf94      	ite	ls
    548c:	2000      	movls	r0, #0
    548e:	2001      	movhi	r0, #1
    5490:	4770      	bx	lr
	...

00005494 <grid_tel_frequency_tick>:


void grid_tel_frequency_tick(){
    5494:	b538      	push	{r3, r4, r5, lr}
	
	struct TEL_event_counter* current = grid_tel_event_head;
    5496:	4b05      	ldr	r3, [pc, #20]	; (54ac <grid_tel_frequency_tick+0x18>)
    5498:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
	while(current != NULL){
    549c:	b12c      	cbz	r4, 54aa <grid_tel_frequency_tick+0x16>
		grid_tel_calculate_event_frequency(current);
    549e:	4d04      	ldr	r5, [pc, #16]	; (54b0 <grid_tel_frequency_tick+0x1c>)
    54a0:	4620      	mov	r0, r4
    54a2:	47a8      	blx	r5
		current = current->next;
    54a4:	6964      	ldr	r4, [r4, #20]
	while(current != NULL){
    54a6:	2c00      	cmp	r4, #0
    54a8:	d1fa      	bne.n	54a0 <grid_tel_frequency_tick+0xc>
    54aa:	bd38      	pop	{r3, r4, r5, pc}
    54ac:	20000b14 	.word	0x20000b14
    54b0:	00005475 	.word	0x00005475

000054b4 <grid_sys_get_hwcfg>:
	if (grid_sys_hwfcg == -1){
    54b4:	4b36      	ldr	r3, [pc, #216]	; (5590 <grid_sys_get_hwcfg+0xdc>)
    54b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    54ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    54be:	d003      	beq.n	54c8 <grid_sys_get_hwcfg+0x14>
}
    54c0:	4b33      	ldr	r3, [pc, #204]	; (5590 <grid_sys_get_hwcfg+0xdc>)
    54c2:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    54c6:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    54c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54cc:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    54ce:	4b31      	ldr	r3, [pc, #196]	; (5594 <grid_sys_get_hwcfg+0xe0>)
    54d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    54d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    54d8:	492f      	ldr	r1, [pc, #188]	; (5598 <grid_sys_get_hwcfg+0xe4>)
    54da:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    54de:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    54e2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    54e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    54ea:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    54ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    54f2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    54f6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    54fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    54fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5502:	4926      	ldr	r1, [pc, #152]	; (559c <grid_sys_get_hwcfg+0xe8>)
    5504:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5508:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    550c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    5514:	2001      	movs	r0, #1
    5516:	4b22      	ldr	r3, [pc, #136]	; (55a0 <grid_sys_get_hwcfg+0xec>)
    5518:	4798      	blx	r3
    551a:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    551c:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    551e:	4d1d      	ldr	r5, [pc, #116]	; (5594 <grid_sys_get_hwcfg+0xe0>)
    5520:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    5524:	4f1e      	ldr	r7, [pc, #120]	; (55a0 <grid_sys_get_hwcfg+0xec>)
    5526:	e00c      	b.n	5542 <grid_sys_get_hwcfg+0x8e>
			if(i!=7){
    5528:	2e07      	cmp	r6, #7
    552a:	d027      	beq.n	557c <grid_sys_get_hwcfg+0xc8>
    552c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    5530:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    5534:	2001      	movs	r0, #1
    5536:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5538:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    553c:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    553e:	2e08      	cmp	r6, #8
    5540:	d01c      	beq.n	557c <grid_sys_get_hwcfg+0xc8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5542:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    5546:	2001      	movs	r0, #1
    5548:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    554a:	a801      	add	r0, sp, #4
    554c:	4b15      	ldr	r3, [pc, #84]	; (55a4 <grid_sys_get_hwcfg+0xf0>)
    554e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5550:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5554:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5558:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    555c:	405c      	eors	r4, r3
    555e:	4014      	ands	r4, r2
    5560:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    5562:	a801      	add	r0, sp, #4
    5564:	4b10      	ldr	r3, [pc, #64]	; (55a8 <grid_sys_get_hwcfg+0xf4>)
    5566:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    5568:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    556c:	d0dc      	beq.n	5528 <grid_sys_get_hwcfg+0x74>
				hwcfg_value |= (1<<i);
    556e:	2301      	movs	r3, #1
    5570:	40b3      	lsls	r3, r6
    5572:	ea43 0808 	orr.w	r8, r3, r8
    5576:	fa5f f888 	uxtb.w	r8, r8
    557a:	e7d5      	b.n	5528 <grid_sys_get_hwcfg+0x74>
		grid_sys_hwfcg = hwcfg_value;
    557c:	4b04      	ldr	r3, [pc, #16]	; (5590 <grid_sys_get_hwcfg+0xdc>)
    557e:	f8c3 8300 	str.w	r8, [r3, #768]	; 0x300
}
    5582:	4b03      	ldr	r3, [pc, #12]	; (5590 <grid_sys_get_hwcfg+0xdc>)
    5584:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    5588:	b003      	add	sp, #12
    558a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    558e:	bf00      	nop
    5590:	20000000 	.word	0x20000000
    5594:	41008000 	.word	0x41008000
    5598:	40002000 	.word	0x40002000
    559c:	40028000 	.word	0x40028000
    55a0:	000010f5 	.word	0x000010f5
    55a4:	00001075 	.word	0x00001075
    55a8:	00001083 	.word	0x00001083

000055ac <grid_sys_uart_init>:

void grid_sys_uart_init(){
    55ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	usart_async_register_callback(&USART_EAST, USART_ASYNC_TXC_CB, tx_cb_USART_GRID);
    55b0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 5618 <grid_sys_uart_init+0x6c>
    55b4:	4c11      	ldr	r4, [pc, #68]	; (55fc <grid_sys_uart_init+0x50>)
    55b6:	464a      	mov	r2, r9
    55b8:	2101      	movs	r1, #1
    55ba:	4620      	mov	r0, r4
    55bc:	4d10      	ldr	r5, [pc, #64]	; (5600 <grid_sys_uart_init+0x54>)
    55be:	47a8      	blx	r5
	usart_async_register_callback(&USART_EAST, USART_ASYNC_RXC_CB, rx_cb_USART_GRID);	
    55c0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 561c <grid_sys_uart_init+0x70>
    55c4:	4642      	mov	r2, r8
    55c6:	2100      	movs	r1, #0
    55c8:	4620      	mov	r0, r4
    55ca:	47a8      	blx	r5
	
	usart_async_get_io_descriptor(&USART_EAST, &grid_sys_east_io);
    55cc:	490d      	ldr	r1, [pc, #52]	; (5604 <grid_sys_uart_init+0x58>)
    55ce:	4620      	mov	r0, r4
    55d0:	4f0d      	ldr	r7, [pc, #52]	; (5608 <grid_sys_uart_init+0x5c>)
    55d2:	47b8      	blx	r7
	
	usart_async_enable(&USART_EAST);
    55d4:	4620      	mov	r0, r4
    55d6:	4e0d      	ldr	r6, [pc, #52]	; (560c <grid_sys_uart_init+0x60>)
    55d8:	47b0      	blx	r6
	
	
	usart_async_register_callback(&USART_WEST, USART_ASYNC_TXC_CB, tx_cb_USART_GRID);
    55da:	4c0d      	ldr	r4, [pc, #52]	; (5610 <grid_sys_uart_init+0x64>)
    55dc:	464a      	mov	r2, r9
    55de:	2101      	movs	r1, #1
    55e0:	4620      	mov	r0, r4
    55e2:	47a8      	blx	r5
	usart_async_register_callback(&USART_WEST, USART_ASYNC_RXC_CB, rx_cb_USART_GRID);
    55e4:	4642      	mov	r2, r8
    55e6:	2100      	movs	r1, #0
    55e8:	4620      	mov	r0, r4
    55ea:	47a8      	blx	r5
	
	usart_async_get_io_descriptor(&USART_WEST, &grid_sys_west_io);
    55ec:	4909      	ldr	r1, [pc, #36]	; (5614 <grid_sys_uart_init+0x68>)
    55ee:	4620      	mov	r0, r4
    55f0:	47b8      	blx	r7
	
	usart_async_enable(&USART_WEST);
    55f2:	4620      	mov	r0, r4
    55f4:	47b0      	blx	r6
    55f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55fa:	bf00      	nop
    55fc:	200011d0 	.word	0x200011d0
    5600:	00001899 	.word	0x00001899
    5604:	20001c14 	.word	0x20001c14
    5608:	00001871 	.word	0x00001871
    560c:	00001845 	.word	0x00001845
    5610:	200012b4 	.word	0x200012b4
    5614:	20001c94 	.word	0x20001c94
    5618:	00004c65 	.word	0x00004c65
    561c:	00004c95 	.word	0x00004c95

00005620 <grid_msg_process>:
	grid_msg_process(&USART_EAST, GRID_SYS_EAST);
	grid_msg_process(&USART_WEST, GRID_SYS_WEST);
		
}	

void grid_msg_process(const struct usart_async_descriptor *const descr, uint8_t offset){
    5620:	b5f0      	push	{r4, r5, r6, r7, lr}
    5622:	b083      	sub	sp, #12
    5624:	4605      	mov	r5, r0
    5626:	460c      	mov	r4, r1
	
	uint8_t character;
	
	
	if (usart_async_is_rx_not_empty(descr)){
    5628:	4b0d      	ldr	r3, [pc, #52]	; (5660 <grid_msg_process+0x40>)
    562a:	4798      	blx	r3
    562c:	b1a8      	cbz	r0, 565a <grid_msg_process+0x3a>
		
		while(io_read(&(*descr).io, &character, 1) == 1){
    562e:	4e0d      	ldr	r6, [pc, #52]	; (5664 <grid_msg_process+0x44>)
			
			if (character == GRID_MSG_PING){
				
				grid_sys_ping_counter[offset] += 1;
    5630:	4f0d      	ldr	r7, [pc, #52]	; (5668 <grid_msg_process+0x48>)
    5632:	4427      	add	r7, r4
		while(io_read(&(*descr).io, &character, 1) == 1){
    5634:	2401      	movs	r4, #1
    5636:	4622      	mov	r2, r4
    5638:	f10d 0107 	add.w	r1, sp, #7
    563c:	4628      	mov	r0, r5
    563e:	47b0      	blx	r6
    5640:	2801      	cmp	r0, #1
    5642:	d10a      	bne.n	565a <grid_msg_process+0x3a>
			if (character == GRID_MSG_PING){
    5644:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5648:	2b50      	cmp	r3, #80	; 0x50
    564a:	d1f4      	bne.n	5636 <grid_msg_process+0x16>
				grid_sys_ping_counter[offset] += 1;
    564c:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
    5650:	3301      	adds	r3, #1
    5652:	b2db      	uxtb	r3, r3
    5654:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
    5658:	e7ec      	b.n	5634 <grid_msg_process+0x14>
	}
	

	
	
}
    565a:	b003      	add	sp, #12
    565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    565e:	bf00      	nop
    5660:	0000190d 	.word	0x0000190d
    5664:	000012a5 	.word	0x000012a5
    5668:	20000b14 	.word	0x20000b14

0000566c <grid_msg_process_all>:
void grid_msg_process_all(){
    566c:	b510      	push	{r4, lr}
	grid_msg_process(&USART_EAST, GRID_SYS_EAST);
    566e:	2101      	movs	r1, #1
    5670:	4803      	ldr	r0, [pc, #12]	; (5680 <grid_msg_process_all+0x14>)
    5672:	4c04      	ldr	r4, [pc, #16]	; (5684 <grid_msg_process_all+0x18>)
    5674:	47a0      	blx	r4
	grid_msg_process(&USART_WEST, GRID_SYS_WEST);
    5676:	2103      	movs	r1, #3
    5678:	4803      	ldr	r0, [pc, #12]	; (5688 <grid_msg_process_all+0x1c>)
    567a:	47a0      	blx	r4
    567c:	bd10      	pop	{r4, pc}
    567e:	bf00      	nop
    5680:	200011d0 	.word	0x200011d0
    5684:	00005621 	.word	0x00005621
    5688:	200012b4 	.word	0x200012b4

0000568c <grid_sys_ping>:
	grid_sys_ping(&USART_EAST);
	grid_sys_ping(&USART_WEST);

}

void grid_sys_ping(const struct usart_async_descriptor *const descr){
    568c:	b508      	push	{r3, lr}
	
		
	io_write(&(*descr).io, grid_sys_pingmessage ,1);
    568e:	2201      	movs	r2, #1
    5690:	4901      	ldr	r1, [pc, #4]	; (5698 <grid_sys_ping+0xc>)
    5692:	4b02      	ldr	r3, [pc, #8]	; (569c <grid_sys_ping+0x10>)
    5694:	4798      	blx	r3
    5696:	bd08      	pop	{r3, pc}
    5698:	20000304 	.word	0x20000304
    569c:	00001275 	.word	0x00001275

000056a0 <grid_sys_ping_all>:
void grid_sys_ping_all(){
    56a0:	b510      	push	{r4, lr}
	grid_sys_ping(&USART_EAST);
    56a2:	4803      	ldr	r0, [pc, #12]	; (56b0 <grid_sys_ping_all+0x10>)
    56a4:	4c03      	ldr	r4, [pc, #12]	; (56b4 <grid_sys_ping_all+0x14>)
    56a6:	47a0      	blx	r4
	grid_sys_ping(&USART_WEST);
    56a8:	4803      	ldr	r0, [pc, #12]	; (56b8 <grid_sys_ping_all+0x18>)
    56aa:	47a0      	blx	r4
    56ac:	bd10      	pop	{r4, pc}
    56ae:	bf00      	nop
    56b0:	200011d0 	.word	0x200011d0
    56b4:	0000568d 	.word	0x0000568d
    56b8:	200012b4 	.word	0x200012b4

000056bc <RTC_Scheduler_ping_cb>:
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
    56bc:	b508      	push	{r3, lr}
	grid_sys_ping_all();
    56be:	4b01      	ldr	r3, [pc, #4]	; (56c4 <RTC_Scheduler_ping_cb+0x8>)
    56c0:	4798      	blx	r3
    56c2:	bd08      	pop	{r3, pc}
    56c4:	000056a1 	.word	0x000056a1

000056c8 <grid_buffer_init>:
#define GRID_BUFFER_TX_SIZE	200 
#define GRID_BUFFER_RX_SIZE	200



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    56c8:	b538      	push	{r3, r4, r5, lr}
    56ca:	4604      	mov	r4, r0
    56cc:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    56ce:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    56d0:	2300      	movs	r3, #0
    56d2:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    56d4:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    56d6:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    56d8:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    56da:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    56dc:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    56de:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    56e0:	4608      	mov	r0, r1
    56e2:	4b08      	ldr	r3, [pc, #32]	; (5704 <grid_buffer_init+0x3c>)
    56e4:	4798      	blx	r3
    56e6:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    56e8:	b900      	cbnz	r0, 56ec <grid_buffer_init+0x24>
    56ea:	e7fe      	b.n	56ea <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    56ec:	b145      	cbz	r5, 5700 <grid_buffer_init+0x38>
    56ee:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    56f0:	4619      	mov	r1, r3
    56f2:	6862      	ldr	r2, [r4, #4]
    56f4:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    56f6:	3301      	adds	r3, #1
    56f8:	b29b      	uxth	r3, r3
    56fa:	8822      	ldrh	r2, [r4, #0]
    56fc:	429a      	cmp	r2, r3
    56fe:	d8f8      	bhi.n	56f2 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    5700:	2001      	movs	r0, #1
    5702:	bd38      	pop	{r3, r4, r5, pc}
    5704:	00006aa5 	.word	0x00006aa5

00005708 <grid_buffer_init_all>:


uint8_t grid_buffer_init_all(){
    5708:	b510      	push	{r4, lr}
	
	
	grid_buffer_init(&GRID_BUFFER_N_TX, GRID_BUFFER_TX_SIZE*4);
    570a:	f44f 7148 	mov.w	r1, #800	; 0x320
    570e:	4818      	ldr	r0, [pc, #96]	; (5770 <grid_buffer_init_all+0x68>)
    5710:	4c18      	ldr	r4, [pc, #96]	; (5774 <grid_buffer_init_all+0x6c>)
    5712:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_N_RX, GRID_BUFFER_RX_SIZE*4);
    5714:	f44f 7148 	mov.w	r1, #800	; 0x320
    5718:	4817      	ldr	r0, [pc, #92]	; (5778 <grid_buffer_init_all+0x70>)
    571a:	47a0      	blx	r4
	
	grid_buffer_init(&GRID_BUFFER_E_TX, GRID_BUFFER_TX_SIZE*4);
    571c:	f44f 7148 	mov.w	r1, #800	; 0x320
    5720:	4816      	ldr	r0, [pc, #88]	; (577c <grid_buffer_init_all+0x74>)
    5722:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_E_RX, GRID_BUFFER_RX_SIZE*4);
    5724:	f44f 7148 	mov.w	r1, #800	; 0x320
    5728:	4815      	ldr	r0, [pc, #84]	; (5780 <grid_buffer_init_all+0x78>)
    572a:	47a0      	blx	r4
	
	grid_buffer_init(&GRID_BUFFER_S_TX, GRID_BUFFER_TX_SIZE*4);
    572c:	f44f 7148 	mov.w	r1, #800	; 0x320
    5730:	4814      	ldr	r0, [pc, #80]	; (5784 <grid_buffer_init_all+0x7c>)
    5732:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_S_RX, GRID_BUFFER_RX_SIZE*4);
    5734:	f44f 7148 	mov.w	r1, #800	; 0x320
    5738:	4813      	ldr	r0, [pc, #76]	; (5788 <grid_buffer_init_all+0x80>)
    573a:	47a0      	blx	r4
	
	grid_buffer_init(&GRID_BUFFER_W_TX, GRID_BUFFER_TX_SIZE*4);
    573c:	f44f 7148 	mov.w	r1, #800	; 0x320
    5740:	4812      	ldr	r0, [pc, #72]	; (578c <grid_buffer_init_all+0x84>)
    5742:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_W_RX, GRID_BUFFER_RX_SIZE*4);
    5744:	f44f 7148 	mov.w	r1, #800	; 0x320
    5748:	4811      	ldr	r0, [pc, #68]	; (5790 <grid_buffer_init_all+0x88>)
    574a:	47a0      	blx	r4
	
	grid_buffer_init(&GRID_BUFFER_U_TX, GRID_BUFFER_TX_SIZE*1);
    574c:	21c8      	movs	r1, #200	; 0xc8
    574e:	4811      	ldr	r0, [pc, #68]	; (5794 <grid_buffer_init_all+0x8c>)
    5750:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_U_RX, GRID_BUFFER_RX_SIZE*4);
    5752:	f44f 7148 	mov.w	r1, #800	; 0x320
    5756:	4810      	ldr	r0, [pc, #64]	; (5798 <grid_buffer_init_all+0x90>)
    5758:	47a0      	blx	r4
	
	grid_buffer_init(&GRID_BUFFER_H_TX, GRID_BUFFER_TX_SIZE*8);
    575a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    575e:	480f      	ldr	r0, [pc, #60]	; (579c <grid_buffer_init_all+0x94>)
    5760:	47a0      	blx	r4
	grid_buffer_init(&GRID_BUFFER_H_RX, GRID_BUFFER_RX_SIZE*8);
    5762:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    5766:	480e      	ldr	r0, [pc, #56]	; (57a0 <grid_buffer_init_all+0x98>)
    5768:	47a0      	blx	r4
	
	return 1;
	
}
    576a:	2001      	movs	r0, #1
    576c:	bd10      	pop	{r4, pc}
    576e:	bf00      	nop
    5770:	20001c18 	.word	0x20001c18
    5774:	000056c9 	.word	0x000056c9
    5778:	20001814 	.word	0x20001814
    577c:	200017e0 	.word	0x200017e0
    5780:	20001c34 	.word	0x20001c34
    5784:	20001c9c 	.word	0x20001c9c
    5788:	200017fc 	.word	0x200017fc
    578c:	20001794 	.word	0x20001794
    5790:	20001c4c 	.word	0x20001c4c
    5794:	20001c7c 	.word	0x20001c7c
    5798:	200017c4 	.word	0x200017c4
    579c:	20001c64 	.word	0x20001c64
    57a0:	200017ac 	.word	0x200017ac

000057a4 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(GRID_BUFFER_t* buf, uint16_t length){
    57a4:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    57a6:	8903      	ldrh	r3, [r0, #8]
    57a8:	8a02      	ldrh	r2, [r0, #16]
    57aa:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    57ac:	bf9c      	itt	ls
    57ae:	8804      	ldrhls	r4, [r0, #0]
    57b0:	191b      	addls	r3, r3, r4
    57b2:	1a9b      	subs	r3, r3, r2
    57b4:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    57b6:	428b      	cmp	r3, r1
    57b8:	d90a      	bls.n	57d0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    57ba:	440a      	add	r2, r1
    57bc:	8804      	ldrh	r4, [r0, #0]
    57be:	fb92 f3f4 	sdiv	r3, r2, r4
    57c2:	fb04 2213 	mls	r2, r4, r3, r2
    57c6:	8242      	strh	r2, [r0, #18]
		
		return length;
    57c8:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    57ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    57ce:	4770      	bx	lr
		return 0; // failed
    57d0:	2000      	movs	r0, #0
    57d2:	e7fa      	b.n	57ca <grid_buffer_write_init+0x26>

000057d4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(GRID_BUFFER_t* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    57d4:	8a83      	ldrh	r3, [r0, #20]
    57d6:	6842      	ldr	r2, [r0, #4]
    57d8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    57da:	8a83      	ldrh	r3, [r0, #20]
    57dc:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    57de:	b29b      	uxth	r3, r3
    57e0:	8801      	ldrh	r1, [r0, #0]
    57e2:	fbb3 f2f1 	udiv	r2, r3, r1
    57e6:	fb01 3312 	mls	r3, r1, r2, r3
    57ea:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    57ec:	2001      	movs	r0, #1
    57ee:	4770      	bx	lr

000057f0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(GRID_BUFFER_t* buf){
	
	if (buf->write_active == buf->write_stop){
    57f0:	8a83      	ldrh	r3, [r0, #20]
    57f2:	8a42      	ldrh	r2, [r0, #18]
    57f4:	429a      	cmp	r2, r3
    57f6:	d000      	beq.n	57fa <grid_buffer_write_acknowledge+0xa>
    57f8:	e7fe      	b.n	57f8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    57fa:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    57fc:	2001      	movs	r0, #1
    57fe:	4770      	bx	lr

00005800 <grid_buffer_read_init>:



uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    5800:	8982      	ldrh	r2, [r0, #12]
    5802:	8943      	ldrh	r3, [r0, #10]
    5804:	4293      	cmp	r3, r2
    5806:	d000      	beq.n	580a <grid_buffer_read_init+0xa>
    5808:	e7fe      	b.n	5808 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    580a:	8903      	ldrh	r3, [r0, #8]
    580c:	4293      	cmp	r3, r2
    580e:	d000      	beq.n	5812 <grid_buffer_read_init+0x12>
    5810:	e7fe      	b.n	5810 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
    5812:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    5814:	8a05      	ldrh	r5, [r0, #16]
    5816:	42aa      	cmp	r2, r5
    5818:	d031      	beq.n	587e <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    581a:	8804      	ldrh	r4, [r0, #0]
    581c:	b35c      	cbz	r4, 5876 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    581e:	4626      	mov	r6, r4
    5820:	fb92 f3f4 	sdiv	r3, r2, r4
    5824:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    5828:	b299      	uxth	r1, r3
    582a:	428d      	cmp	r5, r1
    582c:	d029      	beq.n	5882 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    582e:	6847      	ldr	r7, [r0, #4]
    5830:	460b      	mov	r3, r1
    5832:	5c79      	ldrb	r1, [r7, r1]
    5834:	290a      	cmp	r1, #10
    5836:	d11f      	bne.n	5878 <grid_buffer_read_init+0x78>
    5838:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    583a:	3301      	adds	r3, #1
    583c:	fb93 f2f4 	sdiv	r2, r3, r4
    5840:	fb04 3312 	mls	r3, r4, r2, r3
    5844:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    5846:	1c4b      	adds	r3, r1, #1
    5848:	b29b      	uxth	r3, r3
    584a:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    584c:	4618      	mov	r0, r3
    584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    5850:	fb92 f3f6 	sdiv	r3, r2, r6
    5854:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    5858:	fa1f fe83 	uxth.w	lr, r3
    585c:	4575      	cmp	r5, lr
    585e:	d012      	beq.n	5886 <grid_buffer_read_init+0x86>
    5860:	4673      	mov	r3, lr
    5862:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    5864:	f817 e00e 	ldrb.w	lr, [r7, lr]
    5868:	f1be 0f0a 	cmp.w	lr, #10
    586c:	d0e5      	beq.n	583a <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    586e:	3101      	adds	r1, #1
    5870:	b289      	uxth	r1, r1
    5872:	42a1      	cmp	r1, r4
    5874:	d1ec      	bne.n	5850 <grid_buffer_read_init+0x50>
    5876:	e7fe      	b.n	5876 <grid_buffer_read_init+0x76>
    5878:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    587a:	2100      	movs	r1, #0
    587c:	e7f7      	b.n	586e <grid_buffer_read_init+0x6e>
		return 0;
    587e:	2300      	movs	r3, #0
    5880:	e7e4      	b.n	584c <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    5882:	2300      	movs	r3, #0
    5884:	e7e2      	b.n	584c <grid_buffer_read_init+0x4c>
    5886:	2300      	movs	r3, #0
    5888:	e7e0      	b.n	584c <grid_buffer_read_init+0x4c>

0000588a <grid_buffer_read_character>:


uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    588a:	8983      	ldrh	r3, [r0, #12]
    588c:	8941      	ldrh	r1, [r0, #10]
    588e:	4299      	cmp	r1, r3
    5890:	d00e      	beq.n	58b0 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
    5892:	b410      	push	{r4}
    5894:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    5896:	6841      	ldr	r1, [r0, #4]
    5898:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    589a:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    589c:	b29b      	uxth	r3, r3
    589e:	8814      	ldrh	r4, [r2, #0]
    58a0:	fbb3 f1f4 	udiv	r1, r3, r4
    58a4:	fb04 3311 	mls	r3, r4, r1, r3
    58a8:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    58aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    58ae:	4770      	bx	lr
    58b0:	e7fe      	b.n	58b0 <grid_buffer_read_character+0x26>

000058b2 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(GRID_BUFFER_t* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    58b2:	8983      	ldrh	r3, [r0, #12]
    58b4:	8942      	ldrh	r2, [r0, #10]
    58b6:	429a      	cmp	r2, r3
    58b8:	d000      	beq.n	58bc <grid_buffer_read_acknowledge+0xa>
    58ba:	e7fe      	b.n	58ba <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    58bc:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    58be:	2001      	movs	r0, #1
    58c0:	4770      	bx	lr
	...

000058c4 <grid_module_init>:
	}


	/* ============================== GRID_MODULE_INIT() ================================ */

	void grid_module_init(void){
    58c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58c8:	b085      	sub	sp, #20
		
						
		// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
		grid_ain_init(grid_module_ain_buffer_size, 5, 14, 8);		
    58ca:	2308      	movs	r3, #8
    58cc:	220e      	movs	r2, #14
    58ce:	2105      	movs	r1, #5
    58d0:	2010      	movs	r0, #16
    58d2:	4c70      	ldr	r4, [pc, #448]	; (5a94 <grid_module_init+0x1d0>)
    58d4:	47a0      	blx	r4
		grid_led_init(grid_module_led_buffer_size);
    58d6:	2010      	movs	r0, #16
    58d8:	4b6f      	ldr	r3, [pc, #444]	; (5a98 <grid_module_init+0x1d4>)
    58da:	4798      	blx	r3

		spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    58dc:	4c6f      	ldr	r4, [pc, #444]	; (5a9c <grid_module_init+0x1d8>)
    58de:	4970      	ldr	r1, [pc, #448]	; (5aa0 <grid_module_init+0x1dc>)
    58e0:	4620      	mov	r0, r4
    58e2:	4b70      	ldr	r3, [pc, #448]	; (5aa4 <grid_module_init+0x1e0>)
    58e4:	4798      	blx	r3
		spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    58e6:	4a70      	ldr	r2, [pc, #448]	; (5aa8 <grid_module_init+0x1e4>)
    58e8:	2100      	movs	r1, #0
    58ea:	4620      	mov	r0, r4
    58ec:	4b6f      	ldr	r3, [pc, #444]	; (5aac <grid_module_init+0x1e8>)
    58ee:	4798      	blx	r3
	
		grid_sys_uart_init();
    58f0:	4b6f      	ldr	r3, [pc, #444]	; (5ab0 <grid_module_init+0x1ec>)
    58f2:	4798      	blx	r3
		
		grid_buffer_init_all();
    58f4:	4b6f      	ldr	r3, [pc, #444]	; (5ab4 <grid_module_init+0x1f0>)
    58f6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    58f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    58fc:	4b6e      	ldr	r3, [pc, #440]	; (5ab8 <grid_module_init+0x1f4>)
    58fe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		//enable pwr!
		gpio_set_pin_level(UI_PWR_EN, true);

		// ADC SETUP	
		
		if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    5902:	4c6e      	ldr	r4, [pc, #440]	; (5abc <grid_module_init+0x1f8>)
    5904:	47a0      	blx	r4
						
		}
		
		if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){
    5906:	47a0      	blx	r4
    5908:	2880      	cmp	r0, #128	; 0x80
    590a:	d028      	beq.n	595e <grid_module_init+0x9a>
			grid_adc_set_config(14, GRID_ADC_CFG_BINARY, 1);
			grid_adc_set_config(15, GRID_ADC_CFG_BINARY, 1);
			
		}
		
		if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    590c:	4b6b      	ldr	r3, [pc, #428]	; (5abc <grid_module_init+0x1f8>)
    590e:	4798      	blx	r3
    5910:	2840      	cmp	r0, #64	; 0x40
    5912:	f000 808d 	beq.w	5a30 <grid_module_init+0x16c>
					
		}
				
		
	
		adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    5916:	4c6a      	ldr	r4, [pc, #424]	; (5ac0 <grid_module_init+0x1fc>)
    5918:	4b6a      	ldr	r3, [pc, #424]	; (5ac4 <grid_module_init+0x200>)
    591a:	2200      	movs	r2, #0
    591c:	4611      	mov	r1, r2
    591e:	4620      	mov	r0, r4
    5920:	4f69      	ldr	r7, [pc, #420]	; (5ac8 <grid_module_init+0x204>)
    5922:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_0, 0);
    5924:	2100      	movs	r1, #0
    5926:	4620      	mov	r0, r4
    5928:	4e68      	ldr	r6, [pc, #416]	; (5acc <grid_module_init+0x208>)
    592a:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_0);
    592c:	4620      	mov	r0, r4
    592e:	4d68      	ldr	r5, [pc, #416]	; (5ad0 <grid_module_init+0x20c>)
    5930:	47a8      	blx	r5
				
		adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    5932:	4c68      	ldr	r4, [pc, #416]	; (5ad4 <grid_module_init+0x210>)
    5934:	4b68      	ldr	r3, [pc, #416]	; (5ad8 <grid_module_init+0x214>)
    5936:	2200      	movs	r2, #0
    5938:	4611      	mov	r1, r2
    593a:	4620      	mov	r0, r4
    593c:	47b8      	blx	r7
		adc_async_enable_channel(&ADC_1, 0);
    593e:	2100      	movs	r1, #0
    5940:	4620      	mov	r0, r4
    5942:	47b0      	blx	r6
		adc_async_start_conversion(&ADC_1);
    5944:	4620      	mov	r0, r4
    5946:	47a8      	blx	r5
	
		//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
		/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
		usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
		usart_async_get_io_descriptor(&GRID_AUX, &io);
    5948:	4c64      	ldr	r4, [pc, #400]	; (5adc <grid_module_init+0x218>)
    594a:	4965      	ldr	r1, [pc, #404]	; (5ae0 <grid_module_init+0x21c>)
    594c:	4620      	mov	r0, r4
    594e:	4b65      	ldr	r3, [pc, #404]	; (5ae4 <grid_module_init+0x220>)
    5950:	4798      	blx	r3
		usart_async_enable(&GRID_AUX);
    5952:	4620      	mov	r0, r4
    5954:	4b64      	ldr	r3, [pc, #400]	; (5ae8 <grid_module_init+0x224>)
    5956:	4798      	blx	r3

		// GRID_LED Library NEW NEW NEW NEW
	
		
		
	}
    5958:	b005      	add	sp, #20
    595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_adc_cfg[register_offset] |= (1<<bit_offest);
    595e:	4b63      	ldr	r3, [pc, #396]	; (5aec <grid_module_init+0x228>)
    5960:	f993 a471 	ldrsb.w	sl, [r3, #1137]	; 0x471
    5964:	f993 9472 	ldrsb.w	r9, [r3, #1138]	; 0x472
    5968:	f993 8473 	ldrsb.w	r8, [r3, #1139]	; 0x473
    596c:	f993 c474 	ldrsb.w	ip, [r3, #1140]	; 0x474
    5970:	f993 e475 	ldrsb.w	lr, [r3, #1141]	; 0x475
    5974:	f993 7476 	ldrsb.w	r7, [r3, #1142]	; 0x476
    5978:	f993 6477 	ldrsb.w	r6, [r3, #1143]	; 0x477
    597c:	f993 5478 	ldrsb.w	r5, [r3, #1144]	; 0x478
    5980:	f993 4479 	ldrsb.w	r4, [r3, #1145]	; 0x479
    5984:	f993 047a 	ldrsb.w	r0, [r3, #1146]	; 0x47a
    5988:	f993 147b 	ldrsb.w	r1, [r3, #1147]	; 0x47b
    598c:	f993 247c 	ldrsb.w	r2, [r3, #1148]	; 0x47c
    5990:	9203      	str	r2, [sp, #12]
    5992:	f993 247d 	ldrsb.w	r2, [r3, #1149]	; 0x47d
    5996:	9202      	str	r2, [sp, #8]
    5998:	f993 b47e 	ldrsb.w	fp, [r3, #1150]	; 0x47e
    599c:	f8cd b004 	str.w	fp, [sp, #4]
    59a0:	f993 247f 	ldrsb.w	r2, [r3, #1151]	; 0x47f
    59a4:	f893 b470 	ldrb.w	fp, [r3, #1136]	; 0x470
    59a8:	f04b 0b03 	orr.w	fp, fp, #3
    59ac:	f883 b470 	strb.w	fp, [r3, #1136]	; 0x470
    59b0:	f04a 0a03 	orr.w	sl, sl, #3
    59b4:	f883 a471 	strb.w	sl, [r3, #1137]	; 0x471
    59b8:	f049 0903 	orr.w	r9, r9, #3
    59bc:	f883 9472 	strb.w	r9, [r3, #1138]	; 0x472
    59c0:	f048 0803 	orr.w	r8, r8, #3
    59c4:	f883 8473 	strb.w	r8, [r3, #1139]	; 0x473
    59c8:	f04c 0c03 	orr.w	ip, ip, #3
    59cc:	f883 c474 	strb.w	ip, [r3, #1140]	; 0x474
    59d0:	f04e 0e03 	orr.w	lr, lr, #3
    59d4:	f883 e475 	strb.w	lr, [r3, #1141]	; 0x475
    59d8:	f047 0703 	orr.w	r7, r7, #3
    59dc:	f883 7476 	strb.w	r7, [r3, #1142]	; 0x476
    59e0:	f046 0603 	orr.w	r6, r6, #3
    59e4:	f883 6477 	strb.w	r6, [r3, #1143]	; 0x477
    59e8:	f045 0503 	orr.w	r5, r5, #3
    59ec:	f883 5478 	strb.w	r5, [r3, #1144]	; 0x478
    59f0:	f044 0403 	orr.w	r4, r4, #3
    59f4:	f883 4479 	strb.w	r4, [r3, #1145]	; 0x479
    59f8:	f040 0003 	orr.w	r0, r0, #3
    59fc:	f883 047a 	strb.w	r0, [r3, #1146]	; 0x47a
    5a00:	f041 0103 	orr.w	r1, r1, #3
    5a04:	f883 147b 	strb.w	r1, [r3, #1147]	; 0x47b
    5a08:	9903      	ldr	r1, [sp, #12]
    5a0a:	f041 0103 	orr.w	r1, r1, #3
    5a0e:	f883 147c 	strb.w	r1, [r3, #1148]	; 0x47c
    5a12:	9902      	ldr	r1, [sp, #8]
    5a14:	f041 0103 	orr.w	r1, r1, #3
    5a18:	f883 147d 	strb.w	r1, [r3, #1149]	; 0x47d
    5a1c:	9901      	ldr	r1, [sp, #4]
    5a1e:	f041 0103 	orr.w	r1, r1, #3
    5a22:	f883 147e 	strb.w	r1, [r3, #1150]	; 0x47e
    5a26:	f042 0203 	orr.w	r2, r2, #3
    5a2a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    5a2e:	e76d      	b.n	590c <grid_module_init+0x48>
    5a30:	4b2e      	ldr	r3, [pc, #184]	; (5aec <grid_module_init+0x228>)
    5a32:	f893 2470 	ldrb.w	r2, [r3, #1136]	; 0x470
    5a36:	f042 0201 	orr.w	r2, r2, #1
    5a3a:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
    5a3e:	f893 2471 	ldrb.w	r2, [r3, #1137]	; 0x471
    5a42:	f042 0201 	orr.w	r2, r2, #1
    5a46:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
    5a4a:	f893 2472 	ldrb.w	r2, [r3, #1138]	; 0x472
    5a4e:	f042 0201 	orr.w	r2, r2, #1
    5a52:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
    5a56:	f893 2473 	ldrb.w	r2, [r3, #1139]	; 0x473
    5a5a:	f042 0201 	orr.w	r2, r2, #1
    5a5e:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
    5a62:	f993 047d 	ldrsb.w	r0, [r3, #1149]	; 0x47d
    5a66:	f993 147e 	ldrsb.w	r1, [r3, #1150]	; 0x47e
    5a6a:	f993 247f 	ldrsb.w	r2, [r3, #1151]	; 0x47f
    5a6e:	f893 447c 	ldrb.w	r4, [r3, #1148]	; 0x47c
    5a72:	f044 0403 	orr.w	r4, r4, #3
    5a76:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
    5a7a:	f040 0003 	orr.w	r0, r0, #3
    5a7e:	f883 047d 	strb.w	r0, [r3, #1149]	; 0x47d
    5a82:	f041 0103 	orr.w	r1, r1, #3
    5a86:	f883 147e 	strb.w	r1, [r3, #1150]	; 0x47e
    5a8a:	f042 0203 	orr.w	r2, r2, #3
    5a8e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    5a92:	e740      	b.n	5916 <grid_module_init+0x52>
    5a94:	0000515d 	.word	0x0000515d
    5a98:	00004ea9 	.word	0x00004ea9
    5a9c:	20001270 	.word	0x20001270
    5aa0:	20001c98 	.word	0x20001c98
    5aa4:	000013e1 	.word	0x000013e1
    5aa8:	00004cd5 	.word	0x00004cd5
    5aac:	000013b1 	.word	0x000013b1
    5ab0:	000055ad 	.word	0x000055ad
    5ab4:	00005709 	.word	0x00005709
    5ab8:	41008000 	.word	0x41008000
    5abc:	000054b5 	.word	0x000054b5
    5ac0:	200011a4 	.word	0x200011a4
    5ac4:	00004cc5 	.word	0x00004cc5
    5ac8:	00000eed 	.word	0x00000eed
    5acc:	00000ead 	.word	0x00000ead
    5ad0:	0000104d 	.word	0x0000104d
    5ad4:	20001354 	.word	0x20001354
    5ad8:	000052ad 	.word	0x000052ad
    5adc:	20001154 	.word	0x20001154
    5ae0:	200017f8 	.word	0x200017f8
    5ae4:	00001871 	.word	0x00001871
    5ae8:	00001845 	.word	0x00001845
    5aec:	20000b14 	.word	0x20000b14

00005af0 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    5af0:	b570      	push	{r4, r5, r6, lr}
	RTC_Scheduler_tick.interval = 1;
    5af2:	4c1d      	ldr	r4, [pc, #116]	; (5b68 <init_timer+0x78>)
    5af4:	2301      	movs	r3, #1
    5af6:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	RTC_Scheduler_tick.cb       = RTC_Scheduler_tick_cb;
    5afa:	4a1c      	ldr	r2, [pc, #112]	; (5b6c <init_timer+0x7c>)
    5afc:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
	RTC_Scheduler_tick.mode     = TIMER_TASK_REPEAT;
    5b00:	f884 3498 	strb.w	r3, [r4, #1176]	; 0x498
	
	
	RTC_Scheduler_report.interval = 32768/2; //1sec
    5b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5b08:	f8c4 24a4 	str.w	r2, [r4, #1188]	; 0x4a4
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    5b0c:	4a18      	ldr	r2, [pc, #96]	; (5b70 <init_timer+0x80>)
    5b0e:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    5b12:	f884 34ac 	strb.w	r3, [r4, #1196]	; 0x4ac
	
		
	RTC_Scheduler_ping.interval = 1638; //0.1sec
    5b16:	f240 6266 	movw	r2, #1638	; 0x666
    5b1a:	f8c4 24b8 	str.w	r2, [r4, #1208]	; 0x4b8
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    5b1e:	4a15      	ldr	r2, [pc, #84]	; (5b74 <init_timer+0x84>)
    5b20:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    5b24:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
	
	RTC_Scheduler_task2.interval = 32768/2*20;
    5b28:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5b2c:	f8c4 24cc 	str.w	r2, [r4, #1228]	; 0x4cc
	RTC_Scheduler_task2.cb       = RTC_Scheduler_task2_cb;
    5b30:	4a11      	ldr	r2, [pc, #68]	; (5b78 <init_timer+0x88>)
    5b32:	f8c4 24d0 	str.w	r2, [r4, #1232]	; 0x4d0
	RTC_Scheduler_task2.mode     = TIMER_TASK_REPEAT;
    5b36:	f884 34d4 	strb.w	r3, [r4, #1236]	; 0x4d4

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_tick);
    5b3a:	4d10      	ldr	r5, [pc, #64]	; (5b7c <init_timer+0x8c>)
    5b3c:	f504 6191 	add.w	r1, r4, #1160	; 0x488
    5b40:	4628      	mov	r0, r5
    5b42:	4e0f      	ldr	r6, [pc, #60]	; (5b80 <init_timer+0x90>)
    5b44:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    5b46:	f204 419c 	addw	r1, r4, #1180	; 0x49c
    5b4a:	4628      	mov	r0, r5
    5b4c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_task2);
    5b4e:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
    5b52:	4628      	mov	r0, r5
    5b54:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    5b56:	f504 6196 	add.w	r1, r4, #1200	; 0x4b0
    5b5a:	4628      	mov	r0, r5
    5b5c:	47b0      	blx	r6
	timer_start(&RTC_Scheduler);
    5b5e:	4628      	mov	r0, r5
    5b60:	4b08      	ldr	r3, [pc, #32]	; (5b84 <init_timer+0x94>)
    5b62:	4798      	blx	r3
    5b64:	bd70      	pop	{r4, r5, r6, pc}
    5b66:	bf00      	nop
    5b68:	20000b14 	.word	0x20000b14
    5b6c:	00004ce1 	.word	0x00004ce1
    5b70:	00004cfd 	.word	0x00004cfd
    5b74:	000056bd 	.word	0x000056bd
    5b78:	00004d1d 	.word	0x00004d1d
    5b7c:	200010c0 	.word	0x200010c0
    5b80:	0000155d 	.word	0x0000155d
    5b84:	00001521 	.word	0x00001521

00005b88 <main>:
}

int main(void)
{
    5b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b8c:	b0bd      	sub	sp, #244	; 0xf4
    5b8e:	af00      	add	r7, sp, #0

	
	atmel_start_init();
    5b90:	4b56      	ldr	r3, [pc, #344]	; (5cec <main+0x164>)
    5b92:	4798      	blx	r3

	
	grid_module_init();
    5b94:	4b56      	ldr	r3, [pc, #344]	; (5cf0 <main+0x168>)
    5b96:	4798      	blx	r3
	
	init_timer();
    5b98:	4b56      	ldr	r3, [pc, #344]	; (5cf4 <main+0x16c>)
    5b9a:	4798      	blx	r3
	

	// UI RX EVENT fref=5, alert=50;
	
	struct TEL_event_counter* console_tx = grid_tel_event_register(5, 50);
    5b9c:	2132      	movs	r1, #50	; 0x32
    5b9e:	2005      	movs	r0, #5
    5ba0:	4b55      	ldr	r3, [pc, #340]	; (5cf8 <main+0x170>)
    5ba2:	4798      	blx	r3
	
	while(console_tx == NULL){/*TRAP*/}	
    5ba4:	b900      	cbnz	r0, 5ba8 <main+0x20>
    5ba6:	e7fe      	b.n	5ba6 <main+0x1e>
    5ba8:	2300      	movs	r3, #0
    5baa:	60bb      	str	r3, [r7, #8]
    5bac:	2201      	movs	r2, #1
    5bae:	613a      	str	r2, [r7, #16]
    5bb0:	60fb      	str	r3, [r7, #12]
    5bb2:	603b      	str	r3, [r7, #0]
    5bb4:	617b      	str	r3, [r7, #20]


	while (1) {
		
		//checktimer flags
		if (reportflag){
    5bb6:	f8df a17c 	ldr.w	sl, [pc, #380]	; 5d34 <main+0x1ac>
		
		
		if (txindex){
			len = txindex;
			
			if (grid_buffer_write_init(&GRID_BUFFER_U_RX, len)){
    5bba:	f8df b17c 	ldr.w	fp, [pc, #380]	; 5d38 <main+0x1b0>
    5bbe:	e11d      	b.n	5dfc <main+0x274>
    5bc0:	613c      	str	r4, [r7, #16]
    5bc2:	e175      	b.n	5eb0 <main+0x328>
			grid_tel_frequency_tick();
    5bc4:	4b4d      	ldr	r3, [pc, #308]	; (5cfc <main+0x174>)
    5bc6:	4798      	blx	r3
			faketimer = 0;
    5bc8:	2300      	movs	r3, #0
    5bca:	617b      	str	r3, [r7, #20]
    5bcc:	e174      	b.n	5eb8 <main+0x330>
					grid_led_set_phase(i, 0, average*2/128); // 0...255	
    5bce:	69fb      	ldr	r3, [r7, #28]
    5bd0:	005a      	lsls	r2, r3, #1
    5bd2:	bf48      	it	mi
    5bd4:	327f      	addmi	r2, #127	; 0x7f
    5bd6:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    5bda:	2100      	movs	r1, #0
    5bdc:	4628      	mov	r0, r5
    5bde:	4b48      	ldr	r3, [pc, #288]	; (5d00 <main+0x178>)
    5be0:	4798      	blx	r3
    5be2:	3401      	adds	r4, #1
		for (uint8_t i = 0; i<16; i++)
    5be4:	2c10      	cmp	r4, #16
    5be6:	d02a      	beq.n	5c3e <main+0xb6>
    5be8:	b2e5      	uxtb	r5, r4
			if (grid_ain_get_changed(i)){
    5bea:	4628      	mov	r0, r5
    5bec:	47c0      	blx	r8
    5bee:	2800      	cmp	r0, #0
    5bf0:	d0f7      	beq.n	5be2 <main+0x5a>
				uint16_t average = grid_ain_get_average(i);
    5bf2:	4628      	mov	r0, r5
    5bf4:	4b43      	ldr	r3, [pc, #268]	; (5d04 <main+0x17c>)
    5bf6:	4798      	blx	r3
    5bf8:	4602      	mov	r2, r0
    5bfa:	61f8      	str	r0, [r7, #28]
				sprintf(&txbuffer[txindex], "AIN%d %02x\n", i, average/64);	
    5bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    5c00:	444b      	add	r3, r9
    5c02:	4618      	mov	r0, r3
    5c04:	f3c2 138f 	ubfx	r3, r2, #6, #16
    5c08:	4622      	mov	r2, r4
    5c0a:	493f      	ldr	r1, [pc, #252]	; (5d08 <main+0x180>)
    5c0c:	61b8      	str	r0, [r7, #24]
    5c0e:	4e3f      	ldr	r6, [pc, #252]	; (5d0c <main+0x184>)
    5c10:	47b0      	blx	r6
				txindex += strlen(&txbuffer[txindex]);
    5c12:	69b8      	ldr	r0, [r7, #24]
    5c14:	4b3e      	ldr	r3, [pc, #248]	; (5d10 <main+0x188>)
    5c16:	4798      	blx	r3
    5c18:	4481      	add	r9, r0
				if (grid_sys_get_hwcfg()==64 && i>11){
    5c1a:	4b3e      	ldr	r3, [pc, #248]	; (5d14 <main+0x18c>)
    5c1c:	4798      	blx	r3
    5c1e:	2840      	cmp	r0, #64	; 0x40
    5c20:	d1d5      	bne.n	5bce <main+0x46>
    5c22:	2d0b      	cmp	r5, #11
    5c24:	d9d3      	bls.n	5bce <main+0x46>
					grid_led_set_phase(i-4, 0, average*2/128); // 0...255
    5c26:	69fb      	ldr	r3, [r7, #28]
    5c28:	005a      	lsls	r2, r3, #1
    5c2a:	bf48      	it	mi
    5c2c:	327f      	addmi	r2, #127	; 0x7f
    5c2e:	1f28      	subs	r0, r5, #4
    5c30:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    5c34:	2100      	movs	r1, #0
    5c36:	b2c0      	uxtb	r0, r0
    5c38:	4b31      	ldr	r3, [pc, #196]	; (5d00 <main+0x178>)
    5c3a:	4798      	blx	r3
    5c3c:	e7d1      	b.n	5be2 <main+0x5a>
		if (txindex){
    5c3e:	f1b9 0f00 	cmp.w	r9, #0
    5c42:	d137      	bne.n	5cb4 <main+0x12c>
		
		
		
		uint16_t length = 0;
		
		while (grid_buffer_read_init(&GRID_BUFFER_U_RX)){
    5c44:	4e34      	ldr	r6, [pc, #208]	; (5d18 <main+0x190>)
				//cdcdf_acm_write(str, strlen(str));
				*/
			
				for (uint16_t i = 0; i<length; i++){
				
					uint8_t character = grid_buffer_read_character(&GRID_BUFFER_U_RX);
    5c46:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5d3c <main+0x1b4>
		while (grid_buffer_read_init(&GRID_BUFFER_U_RX)){
    5c4a:	4658      	mov	r0, fp
    5c4c:	47b0      	blx	r6
    5c4e:	2800      	cmp	r0, #0
    5c50:	d076      	beq.n	5d40 <main+0x1b8>
			length = GRID_BUFFER_U_RX.read_length;
    5c52:	f8bb 400e 	ldrh.w	r4, [fp, #14]
			if (length){
    5c56:	2c00      	cmp	r4, #0
    5c58:	d0f7      	beq.n	5c4a <main+0xc2>
    5c5a:	f8c7 d01c 	str.w	sp, [r7, #28]
				uint8_t content[length+1];
    5c5e:	f104 0308 	add.w	r3, r4, #8
    5c62:	f023 0307 	bic.w	r3, r3, #7
    5c66:	ebad 0d03 	sub.w	sp, sp, r3
    5c6a:	f8c7 d018 	str.w	sp, [r7, #24]
    5c6e:	f10d 38ff 	add.w	r8, sp, #4294967295
    5c72:	2500      	movs	r5, #0
					uint8_t character = grid_buffer_read_character(&GRID_BUFFER_U_RX);
    5c74:	4658      	mov	r0, fp
    5c76:	47c8      	blx	r9
				
					content[i] = character;			
    5c78:	f808 0f01 	strb.w	r0, [r8, #1]!
				for (uint16_t i = 0; i<length; i++){
    5c7c:	3501      	adds	r5, #1
    5c7e:	b2ad      	uxth	r5, r5
    5c80:	42ac      	cmp	r4, r5
    5c82:	d8f7      	bhi.n	5c74 <main+0xec>
				}
					
				char str2[100];
				//sprintf(str2, "After... 0:%c 1:%c 2:%c 3:%c 4:%c 5:%c \n", content[0], content[1], content[2], content[3], content[4], content[5]);
			
				content[length] = '\0';
    5c84:	69ba      	ldr	r2, [r7, #24]
    5c86:	f04f 0100 	mov.w	r1, #0
    5c8a:	5511      	strb	r1, [r2, r4]
			
				sprintf(str2, "After... %s", content);
    5c8c:	4923      	ldr	r1, [pc, #140]	; (5d1c <main+0x194>)
    5c8e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    5c92:	4b1e      	ldr	r3, [pc, #120]	; (5d0c <main+0x184>)
    5c94:	4798      	blx	r3
			
				cdcdf_acm_write(str2, strlen(str2));	
    5c96:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    5c9a:	4b1d      	ldr	r3, [pc, #116]	; (5d10 <main+0x188>)
    5c9c:	4798      	blx	r3
    5c9e:	4601      	mov	r1, r0
    5ca0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    5ca4:	4b1e      	ldr	r3, [pc, #120]	; (5d20 <main+0x198>)
    5ca6:	4798      	blx	r3
				
				grid_buffer_read_acknowledge(&GRID_BUFFER_U_RX);
    5ca8:	4658      	mov	r0, fp
    5caa:	4b1e      	ldr	r3, [pc, #120]	; (5d24 <main+0x19c>)
    5cac:	4798      	blx	r3
    5cae:	f8d7 d01c 	ldr.w	sp, [r7, #28]
    5cb2:	e7ca      	b.n	5c4a <main+0xc2>
			len = txindex;
    5cb4:	fa1f f589 	uxth.w	r5, r9
			if (grid_buffer_write_init(&GRID_BUFFER_U_RX, len)){
    5cb8:	4629      	mov	r1, r5
    5cba:	4658      	mov	r0, fp
    5cbc:	4b1a      	ldr	r3, [pc, #104]	; (5d28 <main+0x1a0>)
    5cbe:	4798      	blx	r3
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d0bf      	beq.n	5c44 <main+0xbc>
				for(uint16_t i = 0; i<len; i++){
    5cc4:	b16d      	cbz	r5, 5ce2 <main+0x15a>
    5cc6:	f107 0427 	add.w	r4, r7, #39	; 0x27
    5cca:	3d01      	subs	r5, #1
    5ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    5cd0:	fa13 f585 	uxtah	r5, r3, r5
					grid_buffer_write_character(&GRID_BUFFER_U_RX, txbuffer[i]);
    5cd4:	4e15      	ldr	r6, [pc, #84]	; (5d2c <main+0x1a4>)
    5cd6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    5cda:	4658      	mov	r0, fp
    5cdc:	47b0      	blx	r6
				for(uint16_t i = 0; i<len; i++){
    5cde:	42a5      	cmp	r5, r4
    5ce0:	d1f9      	bne.n	5cd6 <main+0x14e>
				grid_buffer_write_acknowledge(&GRID_BUFFER_U_RX);			
    5ce2:	4658      	mov	r0, fp
    5ce4:	4b12      	ldr	r3, [pc, #72]	; (5d30 <main+0x1a8>)
    5ce6:	4798      	blx	r3
    5ce8:	e7ac      	b.n	5c44 <main+0xbc>
    5cea:	bf00      	nop
    5cec:	000002d1 	.word	0x000002d1
    5cf0:	000058c5 	.word	0x000058c5
    5cf4:	00005af1 	.word	0x00005af1
    5cf8:	00005431 	.word	0x00005431
    5cfc:	00005495 	.word	0x00005495
    5d00:	00004e61 	.word	0x00004e61
    5d04:	00005419 	.word	0x00005419
    5d08:	00007764 	.word	0x00007764
    5d0c:	00006c55 	.word	0x00006c55
    5d10:	00006c9d 	.word	0x00006c9d
    5d14:	000054b5 	.word	0x000054b5
    5d18:	00005801 	.word	0x00005801
    5d1c:	00007770 	.word	0x00007770
    5d20:	000061ed 	.word	0x000061ed
    5d24:	000058b3 	.word	0x000058b3
    5d28:	000057a5 	.word	0x000057a5
    5d2c:	000057d5 	.word	0x000057d5
    5d30:	000057f1 	.word	0x000057f1
    5d34:	20000b14 	.word	0x20000b14
    5d38:	200017c4 	.word	0x200017c4
    5d3c:	0000588b 	.word	0x0000588b
		
		
		
		
		
		task_current = TASK_UNDEFINED;
    5d40:	f04f 0300 	mov.w	r3, #0
    5d44:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c

				
		if (sysmode == 1){
    5d48:	68bb      	ldr	r3, [r7, #8]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	f040 80c8 	bne.w	5ee0 <main+0x358>
			
			for (uint8_t i=0; i<16; i++){
				
				//grid_led_set_color(i, 0, 255, 0);
				
				grid_led_set_color(i, colorfade*(colorcode==0), colorfade*(colorcode==1), colorfade*(colorcode==2));
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	4613      	mov	r3, r2
    5d54:	68f8      	ldr	r0, [r7, #12]
    5d56:	2800      	cmp	r0, #0
    5d58:	bf18      	it	ne
    5d5a:	2300      	movne	r3, #0
    5d5c:	4699      	mov	r9, r3
    5d5e:	4613      	mov	r3, r2
    5d60:	2801      	cmp	r0, #1
    5d62:	bf18      	it	ne
    5d64:	2200      	movne	r2, #0
    5d66:	4690      	mov	r8, r2
    5d68:	461a      	mov	r2, r3
    5d6a:	2802      	cmp	r0, #2
    5d6c:	bf18      	it	ne
    5d6e:	2200      	movne	r2, #0
    5d70:	4616      	mov	r6, r2
    5d72:	2400      	movs	r4, #0
    5d74:	4d66      	ldr	r5, [pc, #408]	; (5f10 <main+0x388>)
    5d76:	4633      	mov	r3, r6
    5d78:	4642      	mov	r2, r8
    5d7a:	4649      	mov	r1, r9
    5d7c:	4620      	mov	r0, r4
    5d7e:	47a8      	blx	r5
    5d80:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){
    5d82:	2c10      	cmp	r4, #16
    5d84:	d1f7      	bne.n	5d76 <main+0x1ee>
				
				
			}
			
			colorfade++;
    5d86:	683b      	ldr	r3, [r7, #0]
    5d88:	3301      	adds	r3, #1
			if (colorfade == 0) colorcode++;
    5d8a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5d8e:	603b      	str	r3, [r7, #0]
    5d90:	d103      	bne.n	5d9a <main+0x212>
    5d92:	68fb      	ldr	r3, [r7, #12]
    5d94:	3301      	adds	r3, #1
    5d96:	b2db      	uxtb	r3, r3
    5d98:	60fb      	str	r3, [r7, #12]
			if (colorcode>2) colorcode=0;
    5d9a:	68fa      	ldr	r2, [r7, #12]
    5d9c:	4613      	mov	r3, r2
    5d9e:	68b9      	ldr	r1, [r7, #8]
    5da0:	2a02      	cmp	r2, #2
    5da2:	bf88      	it	hi
    5da4:	460b      	movhi	r3, r1
    5da6:	60fb      	str	r3, [r7, #12]
			
			
			delay_ms(2);
    5da8:	2002      	movs	r0, #2
    5daa:	4b5a      	ldr	r3, [pc, #360]	; (5f14 <main+0x38c>)
    5dac:	4798      	blx	r3
			
			// SEND DATA TO LEDs
			dma_spi_done = 0;
    5dae:	2300      	movs	r3, #0
    5db0:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
			spi_m_dma_enable(&GRID_LED);
    5db4:	4858      	ldr	r0, [pc, #352]	; (5f18 <main+0x390>)
    5db6:	4b59      	ldr	r3, [pc, #356]	; (5f1c <main+0x394>)
    5db8:	4798      	blx	r3
			
			io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    5dba:	f8ba 2058 	ldrh.w	r2, [sl, #88]	; 0x58
    5dbe:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
    5dc2:	4b57      	ldr	r3, [pc, #348]	; (5f20 <main+0x398>)
    5dc4:	6818      	ldr	r0, [r3, #0]
    5dc6:	4b57      	ldr	r3, [pc, #348]	; (5f24 <main+0x39c>)
    5dc8:	4798      	blx	r3
			
			while (dma_spi_done == 0)
    5dca:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d0fb      	beq.n	5dca <main+0x242>
			
			
		}
		
		// IDLETASK
		task_current = TASK_IDLE;
    5dd2:	2301      	movs	r3, #1
    5dd4:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
		while(loopstart + RTC1SEC/1000 > realtime){
    5dd8:	687c      	ldr	r4, [r7, #4]
    5dda:	3410      	adds	r4, #16
    5ddc:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    5de0:	429c      	cmp	r4, r3
    5de2:	d907      	bls.n	5df4 <main+0x26c>
			delay_us(10);
    5de4:	260a      	movs	r6, #10
    5de6:	4d50      	ldr	r5, [pc, #320]	; (5f28 <main+0x3a0>)
    5de8:	4630      	mov	r0, r6
    5dea:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    5dec:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    5df0:	429c      	cmp	r4, r3
    5df2:	d8f9      	bhi.n	5de8 <main+0x260>
		}
		
		task_current = TASK_UNDEFINED;
    5df4:	f04f 0300 	mov.w	r3, #0
    5df8:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
		if (reportflag){
    5dfc:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
    5e00:	b34b      	cbz	r3, 5e56 <main+0x2ce>
			grid_sys_rx_counter[GRID_SYS_NORTH]=0;
    5e02:	2300      	movs	r3, #0
    5e04:	f8ca 3010 	str.w	r3, [sl, #16]
			grid_sys_rx_counter[GRID_SYS_EAST]=0;
    5e08:	f8ca 3014 	str.w	r3, [sl, #20]
			grid_sys_rx_counter[GRID_SYS_SOUTH]=0;
    5e0c:	f8ca 3018 	str.w	r3, [sl, #24]
			grid_sys_rx_counter[GRID_SYS_WEST]=0;
    5e10:	f8ca 301c 	str.w	r3, [sl, #28]
			grid_sys_tx_counter[GRID_SYS_NORTH]=0;
    5e14:	f8ca 3000 	str.w	r3, [sl]
			grid_sys_tx_counter[GRID_SYS_EAST]=0;
    5e18:	f8ca 3004 	str.w	r3, [sl, #4]
			grid_sys_tx_counter[GRID_SYS_SOUTH]=0;
    5e1c:	f8ca 3008 	str.w	r3, [sl, #8]
			grid_sys_tx_counter[GRID_SYS_WEST]=0;
    5e20:	f8ca 300c 	str.w	r3, [sl, #12]
			grid_sys_ping_counter[GRID_SYS_NORTH]=0;
    5e24:	f88a 3484 	strb.w	r3, [sl, #1156]	; 0x484
			grid_sys_ping_counter[GRID_SYS_EAST]=0;
    5e28:	f88a 3485 	strb.w	r3, [sl, #1157]	; 0x485
			grid_sys_ping_counter[GRID_SYS_SOUTH]=0;
    5e2c:	f88a 3486 	strb.w	r3, [sl, #1158]	; 0x486
			grid_sys_ping_counter[GRID_SYS_WEST]=0;
    5e30:	f88a 3487 	strb.w	r3, [sl, #1159]	; 0x487
			realtime = 0;
    5e34:	2300      	movs	r3, #0
    5e36:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
			reportflag--;
    5e3a:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
    5e3e:	3b01      	subs	r3, #1
    5e40:	b2db      	uxtb	r3, r3
    5e42:	f88a 3050 	strb.w	r3, [sl, #80]	; 0x50
    5e46:	2300      	movs	r3, #0
				task_counter[i] = 0;
    5e48:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    5e4c:	2100      	movs	r1, #0
    5e4e:	6311      	str	r1, [r2, #48]	; 0x30
    5e50:	3301      	adds	r3, #1
			for (uint8_t i=0; i<8; i++)
    5e52:	2b08      	cmp	r3, #8
    5e54:	d1f8      	bne.n	5e48 <main+0x2c0>
		if (task2flag){
    5e56:	f89a 3051 	ldrb.w	r3, [sl, #81]	; 0x51
    5e5a:	b12b      	cbz	r3, 5e68 <main+0x2e0>
			task2flag--;
    5e5c:	f89a 3051 	ldrb.w	r3, [sl, #81]	; 0x51
    5e60:	3b01      	subs	r3, #1
    5e62:	b2db      	uxtb	r3, r3
    5e64:	f88a 3051 	strb.w	r3, [sl, #81]	; 0x51
		loopstart = realtime;
    5e68:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    5e6c:	607b      	str	r3, [r7, #4]
	CRITICAL_SECTION_ENTER();
    5e6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    5e72:	4b2e      	ldr	r3, [pc, #184]	; (5f2c <main+0x3a4>)
    5e74:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5e76:	4b2e      	ldr	r3, [pc, #184]	; (5f30 <main+0x3a8>)
    5e78:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5e7c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5e80:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5e84:	4054      	eors	r4, r2
    5e86:	400c      	ands	r4, r1
    5e88:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    5e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
    5e8e:	4b29      	ldr	r3, [pc, #164]	; (5f34 <main+0x3ac>)
    5e90:	4798      	blx	r3
		if (mapmode != gpio_get_pin_level(MAP_MODE)){
    5e92:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    5e96:	693a      	ldr	r2, [r7, #16]
    5e98:	42a2      	cmp	r2, r4
    5e9a:	f43f ae91 	beq.w	5bc0 <main+0x38>
			if (mapmode==0){
    5e9e:	b91a      	cbnz	r2, 5ea8 <main+0x320>
				sysmode = ! sysmode;
    5ea0:	68bb      	ldr	r3, [r7, #8]
    5ea2:	f083 0301 	eor.w	r3, r3, #1
    5ea6:	60bb      	str	r3, [r7, #8]
			mapmode = !mapmode;
    5ea8:	693b      	ldr	r3, [r7, #16]
    5eaa:	f083 0301 	eor.w	r3, r3, #1
    5eae:	613b      	str	r3, [r7, #16]
		if (faketimer > 100){
    5eb0:	697b      	ldr	r3, [r7, #20]
    5eb2:	2b64      	cmp	r3, #100	; 0x64
    5eb4:	f63f ae86 	bhi.w	5bc4 <main+0x3c>
		faketimer++;
    5eb8:	697b      	ldr	r3, [r7, #20]
    5eba:	3301      	adds	r3, #1
    5ebc:	617b      	str	r3, [r7, #20]
		task_current = TASK_GRID;
    5ebe:	2304      	movs	r3, #4
    5ec0:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
		grid_msg_process_all();
    5ec4:	4b1c      	ldr	r3, [pc, #112]	; (5f38 <main+0x3b0>)
    5ec6:	4798      	blx	r3
		task_current = TASK_UNDEFINED;
    5ec8:	f04f 0300 	mov.w	r3, #0
    5ecc:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
		task_current = TASK_UIIN;
    5ed0:	2303      	movs	r3, #3
    5ed2:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
    5ed6:	2400      	movs	r4, #0
		uint32_t txindex=0;
    5ed8:	46a1      	mov	r9, r4
			if (grid_ain_get_changed(i)){
    5eda:	f8df 8068 	ldr.w	r8, [pc, #104]	; 5f44 <main+0x3bc>
    5ede:	e683      	b.n	5be8 <main+0x60>
			task_current = TASK_LED;
    5ee0:	2302      	movs	r3, #2
    5ee2:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
			grid_led_tick();		
    5ee6:	4b15      	ldr	r3, [pc, #84]	; (5f3c <main+0x3b4>)
    5ee8:	4798      	blx	r3
			grid_led_render_all();
    5eea:	4b15      	ldr	r3, [pc, #84]	; (5f40 <main+0x3b8>)
    5eec:	4798      	blx	r3
			task_current = TASK_UNDEFINED;
    5eee:	f04f 0300 	mov.w	r3, #0
    5ef2:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
			io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    5ef6:	f8ba 2058 	ldrh.w	r2, [sl, #88]	; 0x58
    5efa:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
    5efe:	4b08      	ldr	r3, [pc, #32]	; (5f20 <main+0x398>)
    5f00:	6818      	ldr	r0, [r3, #0]
    5f02:	4b08      	ldr	r3, [pc, #32]	; (5f24 <main+0x39c>)
    5f04:	4798      	blx	r3
			while (dma_spi_done == 0)
    5f06:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d0fb      	beq.n	5f06 <main+0x37e>
    5f0e:	e760      	b.n	5dd2 <main+0x24a>
    5f10:	00004d3d 	.word	0x00004d3d
    5f14:	000010f5 	.word	0x000010f5
    5f18:	20001270 	.word	0x20001270
    5f1c:	00001389 	.word	0x00001389
    5f20:	20001c98 	.word	0x20001c98
    5f24:	00001275 	.word	0x00001275
    5f28:	000010d5 	.word	0x000010d5
    5f2c:	00001075 	.word	0x00001075
    5f30:	41008000 	.word	0x41008000
    5f34:	00001083 	.word	0x00001083
    5f38:	0000566d 	.word	0x0000566d
    5f3c:	00004d79 	.word	0x00004d79
    5f40:	00005101 	.word	0x00005101
    5f44:	00005405 	.word	0x00005405

00005f48 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f4a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5f4c:	780b      	ldrb	r3, [r1, #0]
    5f4e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    5f52:	2c01      	cmp	r4, #1
    5f54:	d15e      	bne.n	6014 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    5f56:	888c      	ldrh	r4, [r1, #4]
    5f58:	4d35      	ldr	r5, [pc, #212]	; (6030 <cdcdf_acm_req+0xe8>)
    5f5a:	782d      	ldrb	r5, [r5, #0]
    5f5c:	42a5      	cmp	r5, r4
    5f5e:	d003      	beq.n	5f68 <cdcdf_acm_req+0x20>
    5f60:	4d33      	ldr	r5, [pc, #204]	; (6030 <cdcdf_acm_req+0xe8>)
    5f62:	786d      	ldrb	r5, [r5, #1]
    5f64:	42a5      	cmp	r5, r4
    5f66:	d158      	bne.n	601a <cdcdf_acm_req+0xd2>
    5f68:	4616      	mov	r6, r2
    5f6a:	460c      	mov	r4, r1
    5f6c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
    5f72:	d10c      	bne.n	5f8e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    5f74:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    5f76:	4b2f      	ldr	r3, [pc, #188]	; (6034 <cdcdf_acm_req+0xec>)
    5f78:	4798      	blx	r3
    5f7a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    5f7c:	7863      	ldrb	r3, [r4, #1]
    5f7e:	2b20      	cmp	r3, #32
    5f80:	d013      	beq.n	5faa <cdcdf_acm_req+0x62>
    5f82:	2b22      	cmp	r3, #34	; 0x22
    5f84:	d032      	beq.n	5fec <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    5f86:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    5f8a:	b003      	add	sp, #12
    5f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    5f8e:	2a01      	cmp	r2, #1
    5f90:	d046      	beq.n	6020 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    5f92:	784b      	ldrb	r3, [r1, #1]
    5f94:	2b21      	cmp	r3, #33	; 0x21
    5f96:	d145      	bne.n	6024 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5f98:	88cb      	ldrh	r3, [r1, #6]
    5f9a:	2b07      	cmp	r3, #7
    5f9c:	d145      	bne.n	602a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    5f9e:	2300      	movs	r3, #0
    5fa0:	2207      	movs	r2, #7
    5fa2:	4925      	ldr	r1, [pc, #148]	; (6038 <cdcdf_acm_req+0xf0>)
    5fa4:	4c25      	ldr	r4, [pc, #148]	; (603c <cdcdf_acm_req+0xf4>)
    5fa6:	47a0      	blx	r4
    5fa8:	e7ef      	b.n	5f8a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5faa:	2f07      	cmp	r7, #7
    5fac:	d12b      	bne.n	6006 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    5fae:	b1be      	cbz	r6, 5fe0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    5fb0:	6800      	ldr	r0, [r0, #0]
    5fb2:	9000      	str	r0, [sp, #0]
    5fb4:	888a      	ldrh	r2, [r1, #4]
    5fb6:	798b      	ldrb	r3, [r1, #6]
    5fb8:	f8ad 2004 	strh.w	r2, [sp, #4]
    5fbc:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5fc0:	4b1b      	ldr	r3, [pc, #108]	; (6030 <cdcdf_acm_req+0xe8>)
    5fc2:	691b      	ldr	r3, [r3, #16]
    5fc4:	b113      	cbz	r3, 5fcc <cdcdf_acm_req+0x84>
    5fc6:	4668      	mov	r0, sp
    5fc8:	4798      	blx	r3
    5fca:	b1f8      	cbz	r0, 600c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    5fcc:	4b18      	ldr	r3, [pc, #96]	; (6030 <cdcdf_acm_req+0xe8>)
    5fce:	aa02      	add	r2, sp, #8
    5fd0:	e912 0003 	ldmdb	r2, {r0, r1}
    5fd4:	6098      	str	r0, [r3, #8]
    5fd6:	8199      	strh	r1, [r3, #12]
    5fd8:	0c09      	lsrs	r1, r1, #16
    5fda:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    5fdc:	2000      	movs	r0, #0
    5fde:	e7d4      	b.n	5f8a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    5fe0:	2300      	movs	r3, #0
    5fe2:	2207      	movs	r2, #7
    5fe4:	4628      	mov	r0, r5
    5fe6:	4c15      	ldr	r4, [pc, #84]	; (603c <cdcdf_acm_req+0xf4>)
    5fe8:	47a0      	blx	r4
    5fea:	e7ce      	b.n	5f8a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    5fec:	2300      	movs	r3, #0
    5fee:	461a      	mov	r2, r3
    5ff0:	4619      	mov	r1, r3
    5ff2:	4618      	mov	r0, r3
    5ff4:	4d11      	ldr	r5, [pc, #68]	; (603c <cdcdf_acm_req+0xf4>)
    5ff6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    5ff8:	4b0d      	ldr	r3, [pc, #52]	; (6030 <cdcdf_acm_req+0xe8>)
    5ffa:	695b      	ldr	r3, [r3, #20]
    5ffc:	b143      	cbz	r3, 6010 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    5ffe:	8860      	ldrh	r0, [r4, #2]
    6000:	4798      	blx	r3
		return ERR_NONE;
    6002:	2000      	movs	r0, #0
    6004:	e7c1      	b.n	5f8a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    6006:	f04f 30ff 	mov.w	r0, #4294967295
    600a:	e7be      	b.n	5f8a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    600c:	2000      	movs	r0, #0
    600e:	e7bc      	b.n	5f8a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    6010:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    6012:	e7ba      	b.n	5f8a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    6014:	f06f 0009 	mvn.w	r0, #9
    6018:	e7b7      	b.n	5f8a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    601a:	f06f 0009 	mvn.w	r0, #9
    601e:	e7b4      	b.n	5f8a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    6020:	2000      	movs	r0, #0
    6022:	e7b2      	b.n	5f8a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    6024:	f06f 000c 	mvn.w	r0, #12
    6028:	e7af      	b.n	5f8a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    602a:	f04f 30ff 	mov.w	r0, #4294967295
    602e:	e7ac      	b.n	5f8a <cdcdf_acm_req+0x42>
    6030:	20000ff4 	.word	0x20000ff4
    6034:	000068d1 	.word	0x000068d1
    6038:	20000ffc 	.word	0x20000ffc
    603c:	000063ad 	.word	0x000063ad

00006040 <cdcdf_acm_ctrl>:
{
    6040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6044:	b083      	sub	sp, #12
    6046:	4616      	mov	r6, r2
	switch (ctrl) {
    6048:	2901      	cmp	r1, #1
    604a:	d066      	beq.n	611a <cdcdf_acm_ctrl+0xda>
    604c:	b141      	cbz	r1, 6060 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    604e:	2902      	cmp	r1, #2
    6050:	bf0c      	ite	eq
    6052:	f06f 001a 	mvneq.w	r0, #26
    6056:	f06f 000c 	mvnne.w	r0, #12
}
    605a:	b003      	add	sp, #12
    605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    6060:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    6064:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    6066:	2800      	cmp	r0, #0
    6068:	f000 8085 	beq.w	6176 <cdcdf_acm_ctrl+0x136>
    606c:	f10a 3bff 	add.w	fp, sl, #4294967295
    6070:	f10a 0301 	add.w	r3, sl, #1
    6074:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6076:	4f46      	ldr	r7, [pc, #280]	; (6190 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    6078:	f8df 9124 	ldr.w	r9, [pc, #292]	; 61a0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    607c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 61a4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    6080:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    6082:	7943      	ldrb	r3, [r0, #5]
    6084:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    6088:	2b02      	cmp	r3, #2
    608a:	d002      	beq.n	6092 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    608c:	f06f 0009 	mvn.w	r0, #9
    6090:	e7e3      	b.n	605a <cdcdf_acm_ctrl+0x1a>
    6092:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    6096:	f89b 3000 	ldrb.w	r3, [fp]
    609a:	429a      	cmp	r2, r3
    609c:	d06e      	beq.n	617c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    609e:	2bff      	cmp	r3, #255	; 0xff
    60a0:	d16f      	bne.n	6182 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    60a2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    60a6:	2205      	movs	r2, #5
    60a8:	6871      	ldr	r1, [r6, #4]
    60aa:	4b3a      	ldr	r3, [pc, #232]	; (6194 <cdcdf_acm_ctrl+0x154>)
    60ac:	4798      	blx	r3
		while (NULL != ep) {
    60ae:	4604      	mov	r4, r0
    60b0:	b1f8      	cbz	r0, 60f2 <cdcdf_acm_ctrl+0xb2>
    60b2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    60b6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    60b8:	7963      	ldrb	r3, [r4, #5]
    60ba:	7922      	ldrb	r2, [r4, #4]
    60bc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    60c0:	b292      	uxth	r2, r2
    60c2:	78e1      	ldrb	r1, [r4, #3]
    60c4:	4628      	mov	r0, r5
    60c6:	47b8      	blx	r7
    60c8:	2800      	cmp	r0, #0
    60ca:	d15d      	bne.n	6188 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    60cc:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    60d0:	bf14      	ite	ne
    60d2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    60d6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    60da:	4628      	mov	r0, r5
    60dc:	47c8      	blx	r9
			desc->sod = ep;
    60de:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    60e0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    60e2:	6871      	ldr	r1, [r6, #4]
    60e4:	4420      	add	r0, r4
    60e6:	47c0      	blx	r8
		while (NULL != ep) {
    60e8:	4604      	mov	r4, r0
    60ea:	2800      	cmp	r0, #0
    60ec:	d1e3      	bne.n	60b6 <cdcdf_acm_ctrl+0x76>
    60ee:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    60f2:	6833      	ldr	r3, [r6, #0]
    60f4:	7818      	ldrb	r0, [r3, #0]
    60f6:	2204      	movs	r2, #4
    60f8:	6871      	ldr	r1, [r6, #4]
    60fa:	4418      	add	r0, r3
    60fc:	4b25      	ldr	r3, [pc, #148]	; (6194 <cdcdf_acm_ctrl+0x154>)
    60fe:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    6100:	9b00      	ldr	r3, [sp, #0]
    6102:	459b      	cmp	fp, r3
    6104:	d004      	beq.n	6110 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    6106:	2800      	cmp	r0, #0
    6108:	d1ba      	bne.n	6080 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    610a:	f06f 0009 	mvn.w	r0, #9
    610e:	e7a4      	b.n	605a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    6110:	2201      	movs	r2, #1
    6112:	4b21      	ldr	r3, [pc, #132]	; (6198 <cdcdf_acm_ctrl+0x158>)
    6114:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    6116:	2000      	movs	r0, #0
    6118:	e79f      	b.n	605a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    611a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    611c:	b142      	cbz	r2, 6130 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    611e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    6120:	795b      	ldrb	r3, [r3, #5]
    6122:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    6126:	2b02      	cmp	r3, #2
    6128:	d002      	beq.n	6130 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    612a:	f06f 0009 	mvn.w	r0, #9
    612e:	e794      	b.n	605a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    6130:	7823      	ldrb	r3, [r4, #0]
    6132:	2bff      	cmp	r3, #255	; 0xff
    6134:	d008      	beq.n	6148 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    6136:	23ff      	movs	r3, #255	; 0xff
    6138:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    613a:	78a0      	ldrb	r0, [r4, #2]
    613c:	4298      	cmp	r0, r3
    613e:	d003      	beq.n	6148 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    6140:	4b16      	ldr	r3, [pc, #88]	; (619c <cdcdf_acm_ctrl+0x15c>)
    6142:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    6144:	23ff      	movs	r3, #255	; 0xff
    6146:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    6148:	7863      	ldrb	r3, [r4, #1]
    614a:	2bff      	cmp	r3, #255	; 0xff
    614c:	d008      	beq.n	6160 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    614e:	23ff      	movs	r3, #255	; 0xff
    6150:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    6152:	78e0      	ldrb	r0, [r4, #3]
    6154:	4298      	cmp	r0, r3
    6156:	d003      	beq.n	6160 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    6158:	4b10      	ldr	r3, [pc, #64]	; (619c <cdcdf_acm_ctrl+0x15c>)
    615a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    615c:	23ff      	movs	r3, #255	; 0xff
    615e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    6160:	7920      	ldrb	r0, [r4, #4]
    6162:	28ff      	cmp	r0, #255	; 0xff
    6164:	d003      	beq.n	616e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    6166:	4b0d      	ldr	r3, [pc, #52]	; (619c <cdcdf_acm_ctrl+0x15c>)
    6168:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    616a:	23ff      	movs	r3, #255	; 0xff
    616c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    616e:	2000      	movs	r0, #0
    6170:	4b09      	ldr	r3, [pc, #36]	; (6198 <cdcdf_acm_ctrl+0x158>)
    6172:	7158      	strb	r0, [r3, #5]
    6174:	e771      	b.n	605a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    6176:	f06f 0009 	mvn.w	r0, #9
    617a:	e76e      	b.n	605a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    617c:	f06f 0011 	mvn.w	r0, #17
    6180:	e76b      	b.n	605a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    6182:	f06f 001b 	mvn.w	r0, #27
    6186:	e768      	b.n	605a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    6188:	f06f 0013 	mvn.w	r0, #19
    618c:	e765      	b.n	605a <cdcdf_acm_ctrl+0x1a>
    618e:	bf00      	nop
    6190:	00001c29 	.word	0x00001c29
    6194:	000068f1 	.word	0x000068f1
    6198:	20000ff4 	.word	0x20000ff4
    619c:	00001c91 	.word	0x00001c91
    61a0:	00001cbd 	.word	0x00001cbd
    61a4:	0000692b 	.word	0x0000692b

000061a8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    61a8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    61aa:	4b0a      	ldr	r3, [pc, #40]	; (61d4 <cdcdf_acm_init+0x2c>)
    61ac:	4798      	blx	r3
    61ae:	2801      	cmp	r0, #1
    61b0:	d80c      	bhi.n	61cc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    61b2:	4809      	ldr	r0, [pc, #36]	; (61d8 <cdcdf_acm_init+0x30>)
    61b4:	4b09      	ldr	r3, [pc, #36]	; (61dc <cdcdf_acm_init+0x34>)
    61b6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    61b8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    61ba:	3018      	adds	r0, #24
    61bc:	4b08      	ldr	r3, [pc, #32]	; (61e0 <cdcdf_acm_init+0x38>)
    61be:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    61c0:	4908      	ldr	r1, [pc, #32]	; (61e4 <cdcdf_acm_init+0x3c>)
    61c2:	2001      	movs	r0, #1
    61c4:	4b08      	ldr	r3, [pc, #32]	; (61e8 <cdcdf_acm_init+0x40>)
    61c6:	4798      	blx	r3
	return ERR_NONE;
    61c8:	2000      	movs	r0, #0
    61ca:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    61cc:	f06f 0010 	mvn.w	r0, #16
}
    61d0:	bd08      	pop	{r3, pc}
    61d2:	bf00      	nop
    61d4:	000068dd 	.word	0x000068dd
    61d8:	20000ff4 	.word	0x20000ff4
    61dc:	00006041 	.word	0x00006041
    61e0:	0000687d 	.word	0x0000687d
    61e4:	2000030c 	.word	0x2000030c
    61e8:	000067e9 	.word	0x000067e9

000061ec <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    61ec:	4b07      	ldr	r3, [pc, #28]	; (620c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    61ee:	795b      	ldrb	r3, [r3, #5]
    61f0:	b143      	cbz	r3, 6204 <cdcdf_acm_write+0x18>
{
    61f2:	b510      	push	{r4, lr}
    61f4:	460a      	mov	r2, r1
    61f6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    61f8:	2301      	movs	r3, #1
    61fa:	4804      	ldr	r0, [pc, #16]	; (620c <cdcdf_acm_write+0x20>)
    61fc:	78c0      	ldrb	r0, [r0, #3]
    61fe:	4c04      	ldr	r4, [pc, #16]	; (6210 <cdcdf_acm_write+0x24>)
    6200:	47a0      	blx	r4
    6202:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    6204:	f06f 0010 	mvn.w	r0, #16
    6208:	4770      	bx	lr
    620a:	bf00      	nop
    620c:	20000ff4 	.word	0x20000ff4
    6210:	000063ad 	.word	0x000063ad

00006214 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    6214:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    6216:	4b07      	ldr	r3, [pc, #28]	; (6234 <usbdc_unconfig+0x20>)
    6218:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    621a:	b14c      	cbz	r4, 6230 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    621c:	2600      	movs	r6, #0
    621e:	2501      	movs	r5, #1
    6220:	6863      	ldr	r3, [r4, #4]
    6222:	4632      	mov	r2, r6
    6224:	4629      	mov	r1, r5
    6226:	4620      	mov	r0, r4
    6228:	4798      	blx	r3
		func = func->next;
    622a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    622c:	2c00      	cmp	r4, #0
    622e:	d1f7      	bne.n	6220 <usbdc_unconfig+0xc>
    6230:	bd70      	pop	{r4, r5, r6, pc}
    6232:	bf00      	nop
    6234:	20001018 	.word	0x20001018

00006238 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    6238:	b570      	push	{r4, r5, r6, lr}
    623a:	4606      	mov	r6, r0
    623c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    623e:	4b07      	ldr	r3, [pc, #28]	; (625c <usbdc_change_notify+0x24>)
    6240:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    6242:	b91c      	cbnz	r4, 624c <usbdc_change_notify+0x14>
    6244:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    6246:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    6248:	2c00      	cmp	r4, #0
    624a:	d0fb      	beq.n	6244 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    624c:	6863      	ldr	r3, [r4, #4]
    624e:	2b00      	cmp	r3, #0
    6250:	d0f9      	beq.n	6246 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    6252:	4629      	mov	r1, r5
    6254:	4630      	mov	r0, r6
    6256:	4798      	blx	r3
    6258:	e7f5      	b.n	6246 <usbdc_change_notify+0xe>
    625a:	bf00      	nop
    625c:	20001018 	.word	0x20001018

00006260 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    6260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6262:	4607      	mov	r7, r0
    6264:	460e      	mov	r6, r1
    6266:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    6268:	4b0c      	ldr	r3, [pc, #48]	; (629c <usbdc_request_handler+0x3c>)
    626a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    626c:	b91c      	cbnz	r4, 6276 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    626e:	2000      	movs	r0, #0
    6270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    6272:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    6274:	b16c      	cbz	r4, 6292 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    6276:	6863      	ldr	r3, [r4, #4]
    6278:	2b00      	cmp	r3, #0
    627a:	d0fa      	beq.n	6272 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    627c:	462a      	mov	r2, r5
    627e:	4631      	mov	r1, r6
    6280:	4638      	mov	r0, r7
    6282:	4798      	blx	r3
			if (0 == rc) {
    6284:	b138      	cbz	r0, 6296 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    6286:	f110 0f0a 	cmn.w	r0, #10
    628a:	d0f2      	beq.n	6272 <usbdc_request_handler+0x12>
				return -1;
    628c:	f04f 30ff 	mov.w	r0, #4294967295
}
    6290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    6292:	2000      	movs	r0, #0
    6294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    6296:	2001      	movs	r0, #1
    6298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    629a:	bf00      	nop
    629c:	20001018 	.word	0x20001018

000062a0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    62a0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    62a2:	4b06      	ldr	r3, [pc, #24]	; (62bc <usbd_sof_cb+0x1c>)
    62a4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    62a6:	b91c      	cbnz	r4, 62b0 <usbd_sof_cb+0x10>
    62a8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    62aa:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    62ac:	2c00      	cmp	r4, #0
    62ae:	d0fb      	beq.n	62a8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    62b0:	6863      	ldr	r3, [r4, #4]
    62b2:	2b00      	cmp	r3, #0
    62b4:	d0f9      	beq.n	62aa <usbd_sof_cb+0xa>
			sof->cb();
    62b6:	4798      	blx	r3
    62b8:	e7f7      	b.n	62aa <usbd_sof_cb+0xa>
    62ba:	bf00      	nop
    62bc:	20001018 	.word	0x20001018

000062c0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    62c0:	b510      	push	{r4, lr}
    62c2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    62c4:	b119      	cbz	r1, 62ce <usbdc_cb_ctl_done+0xe>
    62c6:	2901      	cmp	r1, #1
    62c8:	d026      	beq.n	6318 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    62ca:	2000      	movs	r0, #0
    62cc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    62ce:	7813      	ldrb	r3, [r2, #0]
    62d0:	2b00      	cmp	r3, #0
    62d2:	d1fa      	bne.n	62ca <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    62d4:	7853      	ldrb	r3, [r2, #1]
    62d6:	2b05      	cmp	r3, #5
    62d8:	d00f      	beq.n	62fa <usbdc_cb_ctl_done+0x3a>
    62da:	2b09      	cmp	r3, #9
    62dc:	d1f5      	bne.n	62ca <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    62de:	8852      	ldrh	r2, [r2, #2]
    62e0:	4b10      	ldr	r3, [pc, #64]	; (6324 <usbdc_cb_ctl_done+0x64>)
    62e2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    62e4:	8863      	ldrh	r3, [r4, #2]
    62e6:	2b00      	cmp	r3, #0
    62e8:	bf14      	ite	ne
    62ea:	2104      	movne	r1, #4
    62ec:	2103      	moveq	r1, #3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usbdc_cb_ctl_done+0x64>)
    62f0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    62f2:	2001      	movs	r0, #1
    62f4:	4b0c      	ldr	r3, [pc, #48]	; (6328 <usbdc_cb_ctl_done+0x68>)
    62f6:	4798      	blx	r3
    62f8:	e7e7      	b.n	62ca <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    62fa:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    62fc:	b2c0      	uxtb	r0, r0
    62fe:	4b0b      	ldr	r3, [pc, #44]	; (632c <usbdc_cb_ctl_done+0x6c>)
    6300:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    6302:	8863      	ldrh	r3, [r4, #2]
    6304:	2b00      	cmp	r3, #0
    6306:	bf14      	ite	ne
    6308:	2103      	movne	r1, #3
    630a:	2102      	moveq	r1, #2
    630c:	4b05      	ldr	r3, [pc, #20]	; (6324 <usbdc_cb_ctl_done+0x64>)
    630e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    6310:	2001      	movs	r0, #1
    6312:	4b05      	ldr	r3, [pc, #20]	; (6328 <usbdc_cb_ctl_done+0x68>)
    6314:	4798      	blx	r3
    6316:	e7d8      	b.n	62ca <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    6318:	2201      	movs	r2, #1
    631a:	4621      	mov	r1, r4
    631c:	2000      	movs	r0, #0
    631e:	4b04      	ldr	r3, [pc, #16]	; (6330 <usbdc_cb_ctl_done+0x70>)
    6320:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    6322:	e7d2      	b.n	62ca <usbdc_cb_ctl_done+0xa>
    6324:	20001018 	.word	0x20001018
    6328:	00006239 	.word	0x00006239
    632c:	00001c1d 	.word	0x00001c1d
    6330:	00006261 	.word	0x00006261

00006334 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    6334:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    6336:	4b0d      	ldr	r3, [pc, #52]	; (636c <usbdc_reset+0x38>)
    6338:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    633a:	4d0d      	ldr	r5, [pc, #52]	; (6370 <usbdc_reset+0x3c>)
    633c:	2602      	movs	r6, #2
    633e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    6340:	2400      	movs	r4, #0
    6342:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    6344:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    6346:	4620      	mov	r0, r4
    6348:	4b0a      	ldr	r3, [pc, #40]	; (6374 <usbdc_reset+0x40>)
    634a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    634c:	7f28      	ldrb	r0, [r5, #28]
    634e:	4b0a      	ldr	r3, [pc, #40]	; (6378 <usbdc_reset+0x44>)
    6350:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    6352:	4a0a      	ldr	r2, [pc, #40]	; (637c <usbdc_reset+0x48>)
    6354:	4621      	mov	r1, r4
    6356:	4620      	mov	r0, r4
    6358:	4d09      	ldr	r5, [pc, #36]	; (6380 <usbdc_reset+0x4c>)
    635a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    635c:	4a09      	ldr	r2, [pc, #36]	; (6384 <usbdc_reset+0x50>)
    635e:	4631      	mov	r1, r6
    6360:	4620      	mov	r0, r4
    6362:	47a8      	blx	r5
	usb_d_ep_enable(0);
    6364:	4620      	mov	r0, r4
    6366:	4b08      	ldr	r3, [pc, #32]	; (6388 <usbdc_reset+0x54>)
    6368:	4798      	blx	r3
    636a:	bd70      	pop	{r4, r5, r6, pc}
    636c:	00006215 	.word	0x00006215
    6370:	20001018 	.word	0x20001018
    6374:	00001c91 	.word	0x00001c91
    6378:	00001c7d 	.word	0x00001c7d
    637c:	000063cd 	.word	0x000063cd
    6380:	00001e91 	.word	0x00001e91
    6384:	000062c1 	.word	0x000062c1
    6388:	00001cbd 	.word	0x00001cbd

0000638c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    638c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    638e:	b110      	cbz	r0, 6396 <usbd_event_cb+0xa>
    6390:	2801      	cmp	r0, #1
    6392:	d004      	beq.n	639e <usbd_event_cb+0x12>
    6394:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    6396:	2000      	movs	r0, #0
    6398:	4b02      	ldr	r3, [pc, #8]	; (63a4 <usbd_event_cb+0x18>)
    639a:	4798      	blx	r3
		break;
    639c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    639e:	4b02      	ldr	r3, [pc, #8]	; (63a8 <usbd_event_cb+0x1c>)
    63a0:	4798      	blx	r3
    63a2:	bd08      	pop	{r3, pc}
    63a4:	00006239 	.word	0x00006239
    63a8:	00006335 	.word	0x00006335

000063ac <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    63ac:	b500      	push	{lr}
    63ae:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    63b0:	9101      	str	r1, [sp, #4]
    63b2:	9202      	str	r2, [sp, #8]
    63b4:	f88d 000c 	strb.w	r0, [sp, #12]
    63b8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    63bc:	a801      	add	r0, sp, #4
    63be:	4b02      	ldr	r3, [pc, #8]	; (63c8 <usbdc_xfer+0x1c>)
    63c0:	4798      	blx	r3
}
    63c2:	b005      	add	sp, #20
    63c4:	f85d fb04 	ldr.w	pc, [sp], #4
    63c8:	00001d09 	.word	0x00001d09

000063cc <usbdc_cb_ctl_req>:
{
    63cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    63d0:	b083      	sub	sp, #12
    63d2:	4605      	mov	r5, r0
    63d4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    63d6:	2200      	movs	r2, #0
    63d8:	4b9b      	ldr	r3, [pc, #620]	; (6648 <usbdc_cb_ctl_req+0x27c>)
    63da:	4798      	blx	r3
    63dc:	f1b0 3fff 	cmp.w	r0, #4294967295
    63e0:	d00b      	beq.n	63fa <usbdc_cb_ctl_req+0x2e>
    63e2:	2801      	cmp	r0, #1
    63e4:	f000 81e3 	beq.w	67ae <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    63e8:	7823      	ldrb	r3, [r4, #0]
    63ea:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    63ee:	d008      	beq.n	6402 <usbdc_cb_ctl_req+0x36>
    63f0:	2a80      	cmp	r2, #128	; 0x80
    63f2:	f000 80f4 	beq.w	65de <usbdc_cb_ctl_req+0x212>
		return false;
    63f6:	2000      	movs	r0, #0
    63f8:	e000      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    63fa:	2000      	movs	r0, #0
}
    63fc:	b003      	add	sp, #12
    63fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    6402:	7862      	ldrb	r2, [r4, #1]
    6404:	3a01      	subs	r2, #1
    6406:	2a0a      	cmp	r2, #10
    6408:	f200 81d3 	bhi.w	67b2 <usbdc_cb_ctl_req+0x3e6>
    640c:	e8df f012 	tbh	[pc, r2, lsl #1]
    6410:	01d10060 	.word	0x01d10060
    6414:	01d10076 	.word	0x01d10076
    6418:	01d1000b 	.word	0x01d1000b
    641c:	01d101d1 	.word	0x01d101d1
    6420:	01d10015 	.word	0x01d10015
    6424:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    6426:	2301      	movs	r3, #1
    6428:	2200      	movs	r2, #0
    642a:	4611      	mov	r1, r2
    642c:	4628      	mov	r0, r5
    642e:	4c87      	ldr	r4, [pc, #540]	; (664c <usbdc_cb_ctl_req+0x280>)
    6430:	47a0      	blx	r4
    6432:	fab0 f080 	clz	r0, r0
    6436:	0940      	lsrs	r0, r0, #5
    6438:	e7e0      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    643a:	8862      	ldrh	r2, [r4, #2]
    643c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    643e:	b1ca      	cbz	r2, 6474 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    6440:	4b83      	ldr	r3, [pc, #524]	; (6650 <usbdc_cb_ctl_req+0x284>)
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	6859      	ldr	r1, [r3, #4]
    6446:	6818      	ldr	r0, [r3, #0]
    6448:	4b82      	ldr	r3, [pc, #520]	; (6654 <usbdc_cb_ctl_req+0x288>)
    644a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    644c:	2800      	cmp	r0, #0
    644e:	f000 81be 	beq.w	67ce <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    6452:	78c2      	ldrb	r2, [r0, #3]
    6454:	7881      	ldrb	r1, [r0, #2]
    6456:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    645a:	fa10 f181 	uxtah	r1, r0, r1
    645e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    6460:	2204      	movs	r2, #4
    6462:	4b7d      	ldr	r3, [pc, #500]	; (6658 <usbdc_cb_ctl_req+0x28c>)
    6464:	4798      	blx	r3
    6466:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    6468:	b130      	cbz	r0, 6478 <usbdc_cb_ctl_req+0xac>
    646a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    646c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 6650 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    6470:	4f79      	ldr	r7, [pc, #484]	; (6658 <usbdc_cb_ctl_req+0x28c>)
    6472:	e018      	b.n	64a6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    6474:	4b79      	ldr	r3, [pc, #484]	; (665c <usbdc_cb_ctl_req+0x290>)
    6476:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    6478:	2301      	movs	r3, #1
    647a:	2200      	movs	r2, #0
    647c:	4611      	mov	r1, r2
    647e:	4628      	mov	r0, r5
    6480:	4c72      	ldr	r4, [pc, #456]	; (664c <usbdc_cb_ctl_req+0x280>)
    6482:	47a0      	blx	r4
    6484:	fab0 f080 	clz	r0, r0
    6488:	0940      	lsrs	r0, r0, #5
    648a:	e7b7      	b.n	63fc <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    648c:	464c      	mov	r4, r9
    648e:	e000      	b.n	6492 <usbdc_cb_ctl_req+0xc6>
    6490:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    6492:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    6494:	7803      	ldrb	r3, [r0, #0]
    6496:	4418      	add	r0, r3
    6498:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    649a:	2204      	movs	r2, #4
    649c:	9901      	ldr	r1, [sp, #4]
    649e:	47b8      	blx	r7
    64a0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    64a2:	2800      	cmp	r0, #0
    64a4:	d0e8      	beq.n	6478 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    64a6:	f890 9002 	ldrb.w	r9, [r0, #2]
    64aa:	45a1      	cmp	r9, r4
    64ac:	d0f1      	beq.n	6492 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    64ae:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    64b2:	2c00      	cmp	r4, #0
    64b4:	d0ea      	beq.n	648c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    64b6:	2600      	movs	r6, #0
    64b8:	6863      	ldr	r3, [r4, #4]
    64ba:	466a      	mov	r2, sp
    64bc:	4631      	mov	r1, r6
    64be:	4620      	mov	r0, r4
    64c0:	4798      	blx	r3
    64c2:	2800      	cmp	r0, #0
    64c4:	d0e4      	beq.n	6490 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    64c6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    64c8:	2c00      	cmp	r4, #0
    64ca:	d1f5      	bne.n	64b8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    64cc:	464c      	mov	r4, r9
    64ce:	e7e0      	b.n	6492 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    64d0:	f003 031f 	and.w	r3, r3, #31
    64d4:	2b02      	cmp	r3, #2
    64d6:	f040 816e 	bne.w	67b6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    64da:	88e3      	ldrh	r3, [r4, #6]
    64dc:	b10b      	cbz	r3, 64e2 <usbdc_cb_ctl_req+0x116>
			return false;
    64de:	2000      	movs	r0, #0
    64e0:	e78c      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    64e2:	88a0      	ldrh	r0, [r4, #4]
    64e4:	2100      	movs	r1, #0
    64e6:	b2c0      	uxtb	r0, r0
    64e8:	4b5d      	ldr	r3, [pc, #372]	; (6660 <usbdc_cb_ctl_req+0x294>)
    64ea:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    64ec:	2301      	movs	r3, #1
    64ee:	2200      	movs	r2, #0
    64f0:	4611      	mov	r1, r2
    64f2:	4628      	mov	r0, r5
    64f4:	4c55      	ldr	r4, [pc, #340]	; (664c <usbdc_cb_ctl_req+0x280>)
    64f6:	47a0      	blx	r4
		return true;
    64f8:	2001      	movs	r0, #1
    64fa:	e77f      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    64fc:	f003 031f 	and.w	r3, r3, #31
    6500:	2b02      	cmp	r3, #2
    6502:	f040 815a 	bne.w	67ba <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    6506:	88e3      	ldrh	r3, [r4, #6]
    6508:	b10b      	cbz	r3, 650e <usbdc_cb_ctl_req+0x142>
			return false;
    650a:	2000      	movs	r0, #0
    650c:	e776      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    650e:	88a0      	ldrh	r0, [r4, #4]
    6510:	2101      	movs	r1, #1
    6512:	b2c0      	uxtb	r0, r0
    6514:	4b52      	ldr	r3, [pc, #328]	; (6660 <usbdc_cb_ctl_req+0x294>)
    6516:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    6518:	2301      	movs	r3, #1
    651a:	2200      	movs	r2, #0
    651c:	4611      	mov	r1, r2
    651e:	4628      	mov	r0, r5
    6520:	4c4a      	ldr	r4, [pc, #296]	; (664c <usbdc_cb_ctl_req+0x280>)
    6522:	47a0      	blx	r4
		return true;
    6524:	2001      	movs	r0, #1
    6526:	e769      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    6528:	8866      	ldrh	r6, [r4, #2]
    652a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    652c:	4a48      	ldr	r2, [pc, #288]	; (6650 <usbdc_cb_ctl_req+0x284>)
    652e:	6813      	ldr	r3, [r2, #0]
    6530:	7ed2      	ldrb	r2, [r2, #27]
    6532:	6859      	ldr	r1, [r3, #4]
    6534:	6818      	ldr	r0, [r3, #0]
    6536:	4b47      	ldr	r3, [pc, #284]	; (6654 <usbdc_cb_ctl_req+0x288>)
    6538:	4798      	blx	r3
	if (NULL == ifc) {
    653a:	2800      	cmp	r0, #0
    653c:	d045      	beq.n	65ca <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    653e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    6540:	78c2      	ldrb	r2, [r0, #3]
    6542:	7881      	ldrb	r1, [r0, #2]
    6544:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    6548:	fa10 f181 	uxtah	r1, r0, r1
    654c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    654e:	2204      	movs	r2, #4
    6550:	4b41      	ldr	r3, [pc, #260]	; (6658 <usbdc_cb_ctl_req+0x28c>)
    6552:	4798      	blx	r3
    6554:	4603      	mov	r3, r0
    6556:	2800      	cmp	r0, #0
    6558:	d039      	beq.n	65ce <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    655a:	2704      	movs	r7, #4
    655c:	4d3e      	ldr	r5, [pc, #248]	; (6658 <usbdc_cb_ctl_req+0x28c>)
    655e:	e008      	b.n	6572 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    6560:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    6562:	7803      	ldrb	r3, [r0, #0]
    6564:	4418      	add	r0, r3
    6566:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    6568:	463a      	mov	r2, r7
    656a:	9901      	ldr	r1, [sp, #4]
    656c:	47a8      	blx	r5
		if (NULL == ifc) {
    656e:	4603      	mov	r3, r0
    6570:	b378      	cbz	r0, 65d2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    6572:	789a      	ldrb	r2, [r3, #2]
    6574:	42a2      	cmp	r2, r4
    6576:	d1f3      	bne.n	6560 <usbdc_cb_ctl_req+0x194>
    6578:	78da      	ldrb	r2, [r3, #3]
    657a:	42b2      	cmp	r2, r6
    657c:	d1f0      	bne.n	6560 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    657e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    6580:	4b33      	ldr	r3, [pc, #204]	; (6650 <usbdc_cb_ctl_req+0x284>)
    6582:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    6584:	b33d      	cbz	r5, 65d6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    6586:	2701      	movs	r7, #1
    6588:	686b      	ldr	r3, [r5, #4]
    658a:	466a      	mov	r2, sp
    658c:	4639      	mov	r1, r7
    658e:	4628      	mov	r0, r5
    6590:	4798      	blx	r3
    6592:	b120      	cbz	r0, 659e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    6594:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    6596:	2d00      	cmp	r5, #0
    6598:	d1f6      	bne.n	6588 <usbdc_cb_ctl_req+0x1bc>
	return false;
    659a:	2000      	movs	r0, #0
    659c:	e72e      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    659e:	686b      	ldr	r3, [r5, #4]
    65a0:	466a      	mov	r2, sp
    65a2:	2100      	movs	r1, #0
    65a4:	4628      	mov	r0, r5
    65a6:	4798      	blx	r3
    65a8:	b9b8      	cbnz	r0, 65da <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    65aa:	b136      	cbz	r6, 65ba <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    65ac:	4a28      	ldr	r2, [pc, #160]	; (6650 <usbdc_cb_ctl_req+0x284>)
    65ae:	2301      	movs	r3, #1
    65b0:	fa03 f404 	lsl.w	r4, r3, r4
    65b4:	7f53      	ldrb	r3, [r2, #29]
    65b6:	4323      	orrs	r3, r4
    65b8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    65ba:	2300      	movs	r3, #0
    65bc:	461a      	mov	r2, r3
    65be:	4619      	mov	r1, r3
    65c0:	4618      	mov	r0, r3
    65c2:	4c22      	ldr	r4, [pc, #136]	; (664c <usbdc_cb_ctl_req+0x280>)
    65c4:	47a0      	blx	r4
			return true;
    65c6:	2001      	movs	r0, #1
    65c8:	e718      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    65ca:	2000      	movs	r0, #0
    65cc:	e716      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    65ce:	2000      	movs	r0, #0
    65d0:	e714      	b.n	63fc <usbdc_cb_ctl_req+0x30>
			return false;
    65d2:	2000      	movs	r0, #0
    65d4:	e712      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	return false;
    65d6:	2000      	movs	r0, #0
    65d8:	e710      	b.n	63fc <usbdc_cb_ctl_req+0x30>
			return false;
    65da:	2000      	movs	r0, #0
    65dc:	e70e      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    65de:	7862      	ldrb	r2, [r4, #1]
    65e0:	2a0a      	cmp	r2, #10
    65e2:	f200 80ec 	bhi.w	67be <usbdc_cb_ctl_req+0x3f2>
    65e6:	e8df f012 	tbh	[pc, r2, lsl #1]
    65ea:	008e      	.short	0x008e
    65ec:	00ea00ea 	.word	0x00ea00ea
    65f0:	00ea00ea 	.word	0x00ea00ea
    65f4:	000b00ea 	.word	0x000b00ea
    65f8:	008200ea 	.word	0x008200ea
    65fc:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    6600:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    6602:	0a13      	lsrs	r3, r2, #8
    6604:	2b02      	cmp	r3, #2
    6606:	d02d      	beq.n	6664 <usbdc_cb_ctl_req+0x298>
    6608:	2b03      	cmp	r3, #3
    660a:	d050      	beq.n	66ae <usbdc_cb_ctl_req+0x2e2>
    660c:	2b01      	cmp	r3, #1
    660e:	d001      	beq.n	6614 <usbdc_cb_ctl_req+0x248>
	return false;
    6610:	2000      	movs	r0, #0
    6612:	e6f3      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    6614:	88e2      	ldrh	r2, [r4, #6]
    6616:	2a12      	cmp	r2, #18
    6618:	bf28      	it	cs
    661a:	2212      	movcs	r2, #18
    661c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    661e:	4b0c      	ldr	r3, [pc, #48]	; (6650 <usbdc_cb_ctl_req+0x284>)
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	2201      	movs	r2, #1
    6624:	6859      	ldr	r1, [r3, #4]
    6626:	6818      	ldr	r0, [r3, #0]
    6628:	4b0b      	ldr	r3, [pc, #44]	; (6658 <usbdc_cb_ctl_req+0x28c>)
    662a:	4798      	blx	r3
	if (!dev_desc) {
    662c:	4601      	mov	r1, r0
    662e:	2800      	cmp	r0, #0
    6630:	f000 80c7 	beq.w	67c2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    6634:	2300      	movs	r3, #0
    6636:	4622      	mov	r2, r4
    6638:	4628      	mov	r0, r5
    663a:	4c04      	ldr	r4, [pc, #16]	; (664c <usbdc_cb_ctl_req+0x280>)
    663c:	47a0      	blx	r4
    663e:	fab0 f080 	clz	r0, r0
    6642:	0940      	lsrs	r0, r0, #5
    6644:	e6da      	b.n	63fc <usbdc_cb_ctl_req+0x30>
    6646:	bf00      	nop
    6648:	00006261 	.word	0x00006261
    664c:	000063ad 	.word	0x000063ad
    6650:	20001018 	.word	0x20001018
    6654:	00006971 	.word	0x00006971
    6658:	000068f1 	.word	0x000068f1
    665c:	00006215 	.word	0x00006215
    6660:	00001e29 	.word	0x00001e29
	uint16_t length   = req->wLength;
    6664:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    6666:	4b5b      	ldr	r3, [pc, #364]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    6668:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    666a:	681b      	ldr	r3, [r3, #0]
    666c:	3201      	adds	r2, #1
    666e:	b2d2      	uxtb	r2, r2
    6670:	6859      	ldr	r1, [r3, #4]
    6672:	6818      	ldr	r0, [r3, #0]
    6674:	4b58      	ldr	r3, [pc, #352]	; (67d8 <usbdc_cb_ctl_req+0x40c>)
    6676:	4798      	blx	r3
	if (NULL == cfg_desc) {
    6678:	4601      	mov	r1, r0
    667a:	2800      	cmp	r0, #0
    667c:	f000 80a3 	beq.w	67c6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    6680:	78c3      	ldrb	r3, [r0, #3]
    6682:	7882      	ldrb	r2, [r0, #2]
    6684:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    6688:	b292      	uxth	r2, r2
	if (length <= total_len) {
    668a:	4294      	cmp	r4, r2
    668c:	d90d      	bls.n	66aa <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    668e:	3e01      	subs	r6, #1
    6690:	4226      	tst	r6, r4
    6692:	bf0c      	ite	eq
    6694:	2301      	moveq	r3, #1
    6696:	2300      	movne	r3, #0
		length = total_len;
    6698:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    669a:	4622      	mov	r2, r4
    669c:	4628      	mov	r0, r5
    669e:	4c4f      	ldr	r4, [pc, #316]	; (67dc <usbdc_cb_ctl_req+0x410>)
    66a0:	47a0      	blx	r4
    66a2:	fab0 f080 	clz	r0, r0
    66a6:	0940      	lsrs	r0, r0, #5
    66a8:	e6a8      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    66aa:	2300      	movs	r3, #0
    66ac:	e7f5      	b.n	669a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    66ae:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    66b0:	4b48      	ldr	r3, [pc, #288]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    66b2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    66b4:	681b      	ldr	r3, [r3, #0]
    66b6:	b2d2      	uxtb	r2, r2
    66b8:	6859      	ldr	r1, [r3, #4]
    66ba:	6818      	ldr	r0, [r3, #0]
    66bc:	4b48      	ldr	r3, [pc, #288]	; (67e0 <usbdc_cb_ctl_req+0x414>)
    66be:	4798      	blx	r3
	if (NULL == str_desc) {
    66c0:	4601      	mov	r1, r0
    66c2:	2800      	cmp	r0, #0
    66c4:	f000 8081 	beq.w	67ca <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    66c8:	7802      	ldrb	r2, [r0, #0]
    66ca:	4294      	cmp	r4, r2
    66cc:	d90d      	bls.n	66ea <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    66ce:	3e01      	subs	r6, #1
    66d0:	4226      	tst	r6, r4
    66d2:	bf0c      	ite	eq
    66d4:	2301      	moveq	r3, #1
    66d6:	2300      	movne	r3, #0
		length = str_desc[0];
    66d8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    66da:	4622      	mov	r2, r4
    66dc:	4628      	mov	r0, r5
    66de:	4c3f      	ldr	r4, [pc, #252]	; (67dc <usbdc_cb_ctl_req+0x410>)
    66e0:	47a0      	blx	r4
    66e2:	fab0 f080 	clz	r0, r0
    66e6:	0940      	lsrs	r0, r0, #5
    66e8:	e688      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    66ea:	2300      	movs	r3, #0
    66ec:	e7f5      	b.n	66da <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    66ee:	4939      	ldr	r1, [pc, #228]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    66f0:	694b      	ldr	r3, [r1, #20]
    66f2:	7eca      	ldrb	r2, [r1, #27]
    66f4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    66f6:	2300      	movs	r3, #0
    66f8:	2201      	movs	r2, #1
    66fa:	6949      	ldr	r1, [r1, #20]
    66fc:	4628      	mov	r0, r5
    66fe:	4c37      	ldr	r4, [pc, #220]	; (67dc <usbdc_cb_ctl_req+0x410>)
    6700:	47a0      	blx	r4
		return true;
    6702:	2001      	movs	r0, #1
    6704:	e67a      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    6706:	f003 031f 	and.w	r3, r3, #31
    670a:	2b01      	cmp	r3, #1
    670c:	d903      	bls.n	6716 <usbdc_cb_ctl_req+0x34a>
    670e:	2b02      	cmp	r3, #2
    6710:	d010      	beq.n	6734 <usbdc_cb_ctl_req+0x368>
		return false;
    6712:	2000      	movs	r0, #0
    6714:	e672      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		st = 0;
    6716:	2300      	movs	r3, #0
    6718:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    671a:	492e      	ldr	r1, [pc, #184]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    671c:	694b      	ldr	r3, [r1, #20]
    671e:	f8bd 2000 	ldrh.w	r2, [sp]
    6722:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    6724:	2300      	movs	r3, #0
    6726:	2202      	movs	r2, #2
    6728:	6949      	ldr	r1, [r1, #20]
    672a:	4628      	mov	r0, r5
    672c:	4c2b      	ldr	r4, [pc, #172]	; (67dc <usbdc_cb_ctl_req+0x410>)
    672e:	47a0      	blx	r4
	return true;
    6730:	2001      	movs	r0, #1
    6732:	e663      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    6734:	88a0      	ldrh	r0, [r4, #4]
    6736:	2102      	movs	r1, #2
    6738:	b2c0      	uxtb	r0, r0
    673a:	4b2a      	ldr	r3, [pc, #168]	; (67e4 <usbdc_cb_ctl_req+0x418>)
    673c:	4798      	blx	r3
		if (st < 0) {
    673e:	2800      	cmp	r0, #0
    6740:	db03      	blt.n	674a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    6742:	f000 0001 	and.w	r0, r0, #1
    6746:	9000      	str	r0, [sp, #0]
    6748:	e7e7      	b.n	671a <usbdc_cb_ctl_req+0x34e>
			return false;
    674a:	2000      	movs	r0, #0
    674c:	e656      	b.n	63fc <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    674e:	4b21      	ldr	r3, [pc, #132]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    6750:	7f5b      	ldrb	r3, [r3, #29]
    6752:	88a2      	ldrh	r2, [r4, #4]
    6754:	4113      	asrs	r3, r2
    6756:	f013 0f01 	tst.w	r3, #1
    675a:	d012      	beq.n	6782 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    675c:	4b1d      	ldr	r3, [pc, #116]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    675e:	691d      	ldr	r5, [r3, #16]
	return false;
    6760:	2000      	movs	r0, #0
	while (NULL != func) {
    6762:	2d00      	cmp	r5, #0
    6764:	f43f ae4a 	beq.w	63fc <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    6768:	2602      	movs	r6, #2
    676a:	686b      	ldr	r3, [r5, #4]
    676c:	4622      	mov	r2, r4
    676e:	4631      	mov	r1, r6
    6770:	4628      	mov	r0, r5
    6772:	4798      	blx	r3
    6774:	2800      	cmp	r0, #0
    6776:	da0f      	bge.n	6798 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    6778:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    677a:	2d00      	cmp	r5, #0
    677c:	d1f5      	bne.n	676a <usbdc_cb_ctl_req+0x39e>
	return false;
    677e:	2000      	movs	r0, #0
    6780:	e63c      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    6782:	4914      	ldr	r1, [pc, #80]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    6784:	694b      	ldr	r3, [r1, #20]
    6786:	2000      	movs	r0, #0
    6788:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    678a:	4603      	mov	r3, r0
    678c:	2201      	movs	r2, #1
    678e:	6949      	ldr	r1, [r1, #20]
    6790:	4c12      	ldr	r4, [pc, #72]	; (67dc <usbdc_cb_ctl_req+0x410>)
    6792:	47a0      	blx	r4
		return true;
    6794:	2001      	movs	r0, #1
    6796:	e631      	b.n	63fc <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    6798:	490e      	ldr	r1, [pc, #56]	; (67d4 <usbdc_cb_ctl_req+0x408>)
    679a:	694b      	ldr	r3, [r1, #20]
    679c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    679e:	2300      	movs	r3, #0
    67a0:	2201      	movs	r2, #1
    67a2:	6949      	ldr	r1, [r1, #20]
    67a4:	4618      	mov	r0, r3
    67a6:	4c0d      	ldr	r4, [pc, #52]	; (67dc <usbdc_cb_ctl_req+0x410>)
    67a8:	47a0      	blx	r4
			return true;
    67aa:	2001      	movs	r0, #1
    67ac:	e626      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return true;
    67ae:	2001      	movs	r0, #1
    67b0:	e624      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67b2:	2000      	movs	r0, #0
    67b4:	e622      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67b6:	2000      	movs	r0, #0
    67b8:	e620      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67ba:	2000      	movs	r0, #0
    67bc:	e61e      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67be:	2000      	movs	r0, #0
    67c0:	e61c      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67c2:	2000      	movs	r0, #0
    67c4:	e61a      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67c6:	2000      	movs	r0, #0
    67c8:	e618      	b.n	63fc <usbdc_cb_ctl_req+0x30>
		return false;
    67ca:	2000      	movs	r0, #0
    67cc:	e616      	b.n	63fc <usbdc_cb_ctl_req+0x30>
			return false;
    67ce:	2000      	movs	r0, #0
    67d0:	e614      	b.n	63fc <usbdc_cb_ctl_req+0x30>
    67d2:	bf00      	nop
    67d4:	20001018 	.word	0x20001018
    67d8:	00006971 	.word	0x00006971
    67dc:	000063ad 	.word	0x000063ad
    67e0:	000069d9 	.word	0x000069d9
    67e4:	00001e29 	.word	0x00001e29

000067e8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    67e8:	b508      	push	{r3, lr}
	switch (type) {
    67ea:	2801      	cmp	r0, #1
    67ec:	d007      	beq.n	67fe <usbdc_register_handler+0x16>
    67ee:	b110      	cbz	r0, 67f6 <usbdc_register_handler+0xe>
    67f0:	2802      	cmp	r0, #2
    67f2:	d008      	beq.n	6806 <usbdc_register_handler+0x1e>
    67f4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    67f6:	4806      	ldr	r0, [pc, #24]	; (6810 <usbdc_register_handler+0x28>)
    67f8:	4b06      	ldr	r3, [pc, #24]	; (6814 <usbdc_register_handler+0x2c>)
    67fa:	4798      	blx	r3
		break;
    67fc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    67fe:	4806      	ldr	r0, [pc, #24]	; (6818 <usbdc_register_handler+0x30>)
    6800:	4b04      	ldr	r3, [pc, #16]	; (6814 <usbdc_register_handler+0x2c>)
    6802:	4798      	blx	r3
		break;
    6804:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    6806:	4805      	ldr	r0, [pc, #20]	; (681c <usbdc_register_handler+0x34>)
    6808:	4b02      	ldr	r3, [pc, #8]	; (6814 <usbdc_register_handler+0x2c>)
    680a:	4798      	blx	r3
    680c:	bd08      	pop	{r3, pc}
    680e:	bf00      	nop
    6810:	2000101c 	.word	0x2000101c
    6814:	00001f39 	.word	0x00001f39
    6818:	20001020 	.word	0x20001020
    681c:	20001024 	.word	0x20001024

00006820 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    6820:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    6822:	4605      	mov	r5, r0
    6824:	f240 3255 	movw	r2, #853	; 0x355
    6828:	490c      	ldr	r1, [pc, #48]	; (685c <usbdc_init+0x3c>)
    682a:	3000      	adds	r0, #0
    682c:	bf18      	it	ne
    682e:	2001      	movne	r0, #1
    6830:	4b0b      	ldr	r3, [pc, #44]	; (6860 <usbdc_init+0x40>)
    6832:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    6834:	4b0b      	ldr	r3, [pc, #44]	; (6864 <usbdc_init+0x44>)
    6836:	4798      	blx	r3
	if (rc < 0) {
    6838:	2800      	cmp	r0, #0
    683a:	db0e      	blt.n	685a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    683c:	4c0a      	ldr	r4, [pc, #40]	; (6868 <usbdc_init+0x48>)
    683e:	2220      	movs	r2, #32
    6840:	2100      	movs	r1, #0
    6842:	4620      	mov	r0, r4
    6844:	4b09      	ldr	r3, [pc, #36]	; (686c <usbdc_init+0x4c>)
    6846:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    6848:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    684a:	4909      	ldr	r1, [pc, #36]	; (6870 <usbdc_init+0x50>)
    684c:	2000      	movs	r0, #0
    684e:	4c09      	ldr	r4, [pc, #36]	; (6874 <usbdc_init+0x54>)
    6850:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    6852:	4909      	ldr	r1, [pc, #36]	; (6878 <usbdc_init+0x58>)
    6854:	2001      	movs	r0, #1
    6856:	47a0      	blx	r4

	return 0;
    6858:	2000      	movs	r0, #0
}
    685a:	bd38      	pop	{r3, r4, r5, pc}
    685c:	0000777c 	.word	0x0000777c
    6860:	00001edd 	.word	0x00001edd
    6864:	00001b91 	.word	0x00001b91
    6868:	20001018 	.word	0x20001018
    686c:	00006acb 	.word	0x00006acb
    6870:	000062a1 	.word	0x000062a1
    6874:	00001bf9 	.word	0x00001bf9
    6878:	0000638d 	.word	0x0000638d

0000687c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    687c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    687e:	4601      	mov	r1, r0
    6880:	4801      	ldr	r0, [pc, #4]	; (6888 <usbdc_register_function+0xc>)
    6882:	4b02      	ldr	r3, [pc, #8]	; (688c <usbdc_register_function+0x10>)
    6884:	4798      	blx	r3
    6886:	bd08      	pop	{r3, pc}
    6888:	20001028 	.word	0x20001028
    688c:	00001f39 	.word	0x00001f39

00006890 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    6890:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    6892:	4b0a      	ldr	r3, [pc, #40]	; (68bc <usbdc_start+0x2c>)
    6894:	7e9b      	ldrb	r3, [r3, #26]
    6896:	b95b      	cbnz	r3, 68b0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    6898:	b168      	cbz	r0, 68b6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    689a:	4b08      	ldr	r3, [pc, #32]	; (68bc <usbdc_start+0x2c>)
    689c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    689e:	6802      	ldr	r2, [r0, #0]
    68a0:	79d2      	ldrb	r2, [r2, #7]
    68a2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    68a4:	2201      	movs	r2, #1
    68a6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    68a8:	4b05      	ldr	r3, [pc, #20]	; (68c0 <usbdc_start+0x30>)
    68aa:	4798      	blx	r3
	return ERR_NONE;
    68ac:	2000      	movs	r0, #0
    68ae:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    68b0:	f06f 0003 	mvn.w	r0, #3
    68b4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    68b6:	f06f 0008 	mvn.w	r0, #8
}
    68ba:	bd08      	pop	{r3, pc}
    68bc:	20001018 	.word	0x20001018
    68c0:	00001c05 	.word	0x00001c05

000068c4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    68c4:	b508      	push	{r3, lr}
	usb_d_attach();
    68c6:	4b01      	ldr	r3, [pc, #4]	; (68cc <usbdc_attach+0x8>)
    68c8:	4798      	blx	r3
    68ca:	bd08      	pop	{r3, pc}
    68cc:	00001c11 	.word	0x00001c11

000068d0 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    68d0:	4b01      	ldr	r3, [pc, #4]	; (68d8 <usbdc_get_ctrl_buffer+0x8>)
    68d2:	6958      	ldr	r0, [r3, #20]
    68d4:	4770      	bx	lr
    68d6:	bf00      	nop
    68d8:	20001018 	.word	0x20001018

000068dc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    68dc:	4b03      	ldr	r3, [pc, #12]	; (68ec <usbdc_get_state+0x10>)
    68de:	7e98      	ldrb	r0, [r3, #26]
    68e0:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    68e4:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    68e6:	bf18      	it	ne
    68e8:	2010      	movne	r0, #16
    68ea:	4770      	bx	lr
    68ec:	20001018 	.word	0x20001018

000068f0 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    68f0:	4288      	cmp	r0, r1
    68f2:	d214      	bcs.n	691e <usb_find_desc+0x2e>
	return desc[0];
    68f4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    68f6:	2b01      	cmp	r3, #1
    68f8:	d913      	bls.n	6922 <usb_find_desc+0x32>
{
    68fa:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    68fc:	7844      	ldrb	r4, [r0, #1]
    68fe:	4294      	cmp	r4, r2
    6900:	d00a      	beq.n	6918 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    6902:	4418      	add	r0, r3
	while (desc < eof) {
    6904:	4281      	cmp	r1, r0
    6906:	d906      	bls.n	6916 <usb_find_desc+0x26>
	return desc[0];
    6908:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    690a:	2b01      	cmp	r3, #1
    690c:	d90b      	bls.n	6926 <usb_find_desc+0x36>
	return desc[1];
    690e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    6910:	4294      	cmp	r4, r2
    6912:	d1f6      	bne.n	6902 <usb_find_desc+0x12>
    6914:	e000      	b.n	6918 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    6916:	2000      	movs	r0, #0
}
    6918:	f85d 4b04 	ldr.w	r4, [sp], #4
    691c:	4770      	bx	lr
	return NULL;
    691e:	2000      	movs	r0, #0
    6920:	4770      	bx	lr
		_desc_len_check();
    6922:	2000      	movs	r0, #0
    6924:	4770      	bx	lr
    6926:	2000      	movs	r0, #0
    6928:	e7f6      	b.n	6918 <usb_find_desc+0x28>

0000692a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    692a:	4288      	cmp	r0, r1
    692c:	d216      	bcs.n	695c <usb_find_ep_desc+0x32>
	return desc[0];
    692e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6930:	2b01      	cmp	r3, #1
    6932:	d915      	bls.n	6960 <usb_find_ep_desc+0x36>
	return desc[1];
    6934:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6936:	2a04      	cmp	r2, #4
    6938:	d014      	beq.n	6964 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    693a:	2a05      	cmp	r2, #5
    693c:	d00b      	beq.n	6956 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    693e:	4418      	add	r0, r3
	while (desc < eof) {
    6940:	4281      	cmp	r1, r0
    6942:	d909      	bls.n	6958 <usb_find_ep_desc+0x2e>
	return desc[0];
    6944:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6946:	2b01      	cmp	r3, #1
    6948:	d90e      	bls.n	6968 <usb_find_ep_desc+0x3e>
	return desc[1];
    694a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    694c:	2a04      	cmp	r2, #4
    694e:	d00d      	beq.n	696c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6950:	2a05      	cmp	r2, #5
    6952:	d1f4      	bne.n	693e <usb_find_ep_desc+0x14>
    6954:	e00b      	b.n	696e <usb_find_ep_desc+0x44>
    6956:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    6958:	2000      	movs	r0, #0
    695a:	4770      	bx	lr
    695c:	2000      	movs	r0, #0
    695e:	4770      	bx	lr
		_desc_len_check();
    6960:	2000      	movs	r0, #0
    6962:	4770      	bx	lr
	return NULL;
    6964:	2000      	movs	r0, #0
    6966:	4770      	bx	lr
		_desc_len_check();
    6968:	2000      	movs	r0, #0
    696a:	4770      	bx	lr
	return NULL;
    696c:	2000      	movs	r0, #0
}
    696e:	4770      	bx	lr

00006970 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    6970:	b538      	push	{r3, r4, r5, lr}
    6972:	460c      	mov	r4, r1
    6974:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    6976:	2202      	movs	r2, #2
    6978:	4b16      	ldr	r3, [pc, #88]	; (69d4 <usb_find_cfg_desc+0x64>)
    697a:	4798      	blx	r3
	if (!desc) {
    697c:	4603      	mov	r3, r0
    697e:	b1e8      	cbz	r0, 69bc <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    6980:	4284      	cmp	r4, r0
    6982:	d91d      	bls.n	69c0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    6984:	7802      	ldrb	r2, [r0, #0]
    6986:	2a01      	cmp	r2, #1
    6988:	d91c      	bls.n	69c4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    698a:	7842      	ldrb	r2, [r0, #1]
    698c:	2a02      	cmp	r2, #2
    698e:	d11b      	bne.n	69c8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    6990:	7942      	ldrb	r2, [r0, #5]
    6992:	42aa      	cmp	r2, r5
    6994:	d012      	beq.n	69bc <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    6996:	78d9      	ldrb	r1, [r3, #3]
    6998:	789a      	ldrb	r2, [r3, #2]
    699a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    699e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    69a2:	429c      	cmp	r4, r3
    69a4:	d909      	bls.n	69ba <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    69a6:	781a      	ldrb	r2, [r3, #0]
    69a8:	2a01      	cmp	r2, #1
    69aa:	d90f      	bls.n	69cc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    69ac:	785a      	ldrb	r2, [r3, #1]
    69ae:	2a02      	cmp	r2, #2
    69b0:	d10e      	bne.n	69d0 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    69b2:	795a      	ldrb	r2, [r3, #5]
    69b4:	42aa      	cmp	r2, r5
    69b6:	d1ee      	bne.n	6996 <usb_find_cfg_desc+0x26>
    69b8:	e000      	b.n	69bc <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    69ba:	2300      	movs	r3, #0
}
    69bc:	4618      	mov	r0, r3
    69be:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    69c0:	2300      	movs	r3, #0
    69c2:	e7fb      	b.n	69bc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    69c4:	2300      	movs	r3, #0
    69c6:	e7f9      	b.n	69bc <usb_find_cfg_desc+0x4c>
	return NULL;
    69c8:	2300      	movs	r3, #0
    69ca:	e7f7      	b.n	69bc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    69cc:	2300      	movs	r3, #0
    69ce:	e7f5      	b.n	69bc <usb_find_cfg_desc+0x4c>
	return NULL;
    69d0:	2300      	movs	r3, #0
    69d2:	e7f3      	b.n	69bc <usb_find_cfg_desc+0x4c>
    69d4:	000068f1 	.word	0x000068f1

000069d8 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    69d8:	4288      	cmp	r0, r1
    69da:	d217      	bcs.n	6a0c <usb_find_str_desc+0x34>
{
    69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e0:	460d      	mov	r5, r1
    69e2:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    69e4:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    69e6:	f04f 0803 	mov.w	r8, #3
    69ea:	4f0c      	ldr	r7, [pc, #48]	; (6a1c <usb_find_str_desc+0x44>)
    69ec:	4642      	mov	r2, r8
    69ee:	4629      	mov	r1, r5
    69f0:	47b8      	blx	r7
		if (desc) {
    69f2:	4603      	mov	r3, r0
    69f4:	b170      	cbz	r0, 6a14 <usb_find_str_desc+0x3c>
	return desc[0];
    69f6:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    69f8:	2801      	cmp	r0, #1
    69fa:	d90a      	bls.n	6a12 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    69fc:	42a6      	cmp	r6, r4
    69fe:	d009      	beq.n	6a14 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    6a00:	4418      	add	r0, r3
    6a02:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    6a04:	4285      	cmp	r5, r0
    6a06:	d8f1      	bhi.n	69ec <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    6a08:	2300      	movs	r3, #0
    6a0a:	e003      	b.n	6a14 <usb_find_str_desc+0x3c>
    6a0c:	2300      	movs	r3, #0
}
    6a0e:	4618      	mov	r0, r3
    6a10:	4770      	bx	lr
			_desc_len_check();
    6a12:	2300      	movs	r3, #0
}
    6a14:	4618      	mov	r0, r3
    6a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a1a:	bf00      	nop
    6a1c:	000068f1 	.word	0x000068f1

00006a20 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    6a20:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    6a22:	4805      	ldr	r0, [pc, #20]	; (6a38 <cdc_device_acm_init+0x18>)
    6a24:	4b05      	ldr	r3, [pc, #20]	; (6a3c <cdc_device_acm_init+0x1c>)
    6a26:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    6a28:	4b05      	ldr	r3, [pc, #20]	; (6a40 <cdc_device_acm_init+0x20>)
    6a2a:	4798      	blx	r3

	usbdc_start(single_desc);
    6a2c:	4805      	ldr	r0, [pc, #20]	; (6a44 <cdc_device_acm_init+0x24>)
    6a2e:	4b06      	ldr	r3, [pc, #24]	; (6a48 <cdc_device_acm_init+0x28>)
    6a30:	4798      	blx	r3
	usbdc_attach();
    6a32:	4b06      	ldr	r3, [pc, #24]	; (6a4c <cdc_device_acm_init+0x2c>)
    6a34:	4798      	blx	r3
    6a36:	bd08      	pop	{r3, pc}
    6a38:	20001078 	.word	0x20001078
    6a3c:	00006821 	.word	0x00006821
    6a40:	000061a9 	.word	0x000061a9
    6a44:	20000314 	.word	0x20000314
    6a48:	00006891 	.word	0x00006891
    6a4c:	000068c5 	.word	0x000068c5

00006a50 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    6a50:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    6a52:	4b01      	ldr	r3, [pc, #4]	; (6a58 <usb_init+0x8>)
    6a54:	4798      	blx	r3
    6a56:	bd08      	pop	{r3, pc}
    6a58:	00006a21 	.word	0x00006a21

00006a5c <__libc_init_array>:
    6a5c:	b570      	push	{r4, r5, r6, lr}
    6a5e:	4e0d      	ldr	r6, [pc, #52]	; (6a94 <__libc_init_array+0x38>)
    6a60:	4c0d      	ldr	r4, [pc, #52]	; (6a98 <__libc_init_array+0x3c>)
    6a62:	1ba4      	subs	r4, r4, r6
    6a64:	10a4      	asrs	r4, r4, #2
    6a66:	2500      	movs	r5, #0
    6a68:	42a5      	cmp	r5, r4
    6a6a:	d109      	bne.n	6a80 <__libc_init_array+0x24>
    6a6c:	4e0b      	ldr	r6, [pc, #44]	; (6a9c <__libc_init_array+0x40>)
    6a6e:	4c0c      	ldr	r4, [pc, #48]	; (6aa0 <__libc_init_array+0x44>)
    6a70:	f000 feda 	bl	7828 <_init>
    6a74:	1ba4      	subs	r4, r4, r6
    6a76:	10a4      	asrs	r4, r4, #2
    6a78:	2500      	movs	r5, #0
    6a7a:	42a5      	cmp	r5, r4
    6a7c:	d105      	bne.n	6a8a <__libc_init_array+0x2e>
    6a7e:	bd70      	pop	{r4, r5, r6, pc}
    6a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6a84:	4798      	blx	r3
    6a86:	3501      	adds	r5, #1
    6a88:	e7ee      	b.n	6a68 <__libc_init_array+0xc>
    6a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6a8e:	4798      	blx	r3
    6a90:	3501      	adds	r5, #1
    6a92:	e7f2      	b.n	6a7a <__libc_init_array+0x1e>
    6a94:	00007834 	.word	0x00007834
    6a98:	00007834 	.word	0x00007834
    6a9c:	00007834 	.word	0x00007834
    6aa0:	00007838 	.word	0x00007838

00006aa4 <malloc>:
    6aa4:	4b02      	ldr	r3, [pc, #8]	; (6ab0 <malloc+0xc>)
    6aa6:	4601      	mov	r1, r0
    6aa8:	6818      	ldr	r0, [r3, #0]
    6aaa:	f000 b865 	b.w	6b78 <_malloc_r>
    6aae:	bf00      	nop
    6ab0:	20000374 	.word	0x20000374

00006ab4 <memcpy>:
    6ab4:	b510      	push	{r4, lr}
    6ab6:	1e43      	subs	r3, r0, #1
    6ab8:	440a      	add	r2, r1
    6aba:	4291      	cmp	r1, r2
    6abc:	d100      	bne.n	6ac0 <memcpy+0xc>
    6abe:	bd10      	pop	{r4, pc}
    6ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
    6ac8:	e7f7      	b.n	6aba <memcpy+0x6>

00006aca <memset>:
    6aca:	4402      	add	r2, r0
    6acc:	4603      	mov	r3, r0
    6ace:	4293      	cmp	r3, r2
    6ad0:	d100      	bne.n	6ad4 <memset+0xa>
    6ad2:	4770      	bx	lr
    6ad4:	f803 1b01 	strb.w	r1, [r3], #1
    6ad8:	e7f9      	b.n	6ace <memset+0x4>
	...

00006adc <_free_r>:
    6adc:	b538      	push	{r3, r4, r5, lr}
    6ade:	4605      	mov	r5, r0
    6ae0:	2900      	cmp	r1, #0
    6ae2:	d045      	beq.n	6b70 <_free_r+0x94>
    6ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6ae8:	1f0c      	subs	r4, r1, #4
    6aea:	2b00      	cmp	r3, #0
    6aec:	bfb8      	it	lt
    6aee:	18e4      	addlt	r4, r4, r3
    6af0:	f000 f8dc 	bl	6cac <__malloc_lock>
    6af4:	4a1f      	ldr	r2, [pc, #124]	; (6b74 <_free_r+0x98>)
    6af6:	6813      	ldr	r3, [r2, #0]
    6af8:	4610      	mov	r0, r2
    6afa:	b933      	cbnz	r3, 6b0a <_free_r+0x2e>
    6afc:	6063      	str	r3, [r4, #4]
    6afe:	6014      	str	r4, [r2, #0]
    6b00:	4628      	mov	r0, r5
    6b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b06:	f000 b8d2 	b.w	6cae <__malloc_unlock>
    6b0a:	42a3      	cmp	r3, r4
    6b0c:	d90c      	bls.n	6b28 <_free_r+0x4c>
    6b0e:	6821      	ldr	r1, [r4, #0]
    6b10:	1862      	adds	r2, r4, r1
    6b12:	4293      	cmp	r3, r2
    6b14:	bf04      	itt	eq
    6b16:	681a      	ldreq	r2, [r3, #0]
    6b18:	685b      	ldreq	r3, [r3, #4]
    6b1a:	6063      	str	r3, [r4, #4]
    6b1c:	bf04      	itt	eq
    6b1e:	1852      	addeq	r2, r2, r1
    6b20:	6022      	streq	r2, [r4, #0]
    6b22:	6004      	str	r4, [r0, #0]
    6b24:	e7ec      	b.n	6b00 <_free_r+0x24>
    6b26:	4613      	mov	r3, r2
    6b28:	685a      	ldr	r2, [r3, #4]
    6b2a:	b10a      	cbz	r2, 6b30 <_free_r+0x54>
    6b2c:	42a2      	cmp	r2, r4
    6b2e:	d9fa      	bls.n	6b26 <_free_r+0x4a>
    6b30:	6819      	ldr	r1, [r3, #0]
    6b32:	1858      	adds	r0, r3, r1
    6b34:	42a0      	cmp	r0, r4
    6b36:	d10b      	bne.n	6b50 <_free_r+0x74>
    6b38:	6820      	ldr	r0, [r4, #0]
    6b3a:	4401      	add	r1, r0
    6b3c:	1858      	adds	r0, r3, r1
    6b3e:	4282      	cmp	r2, r0
    6b40:	6019      	str	r1, [r3, #0]
    6b42:	d1dd      	bne.n	6b00 <_free_r+0x24>
    6b44:	6810      	ldr	r0, [r2, #0]
    6b46:	6852      	ldr	r2, [r2, #4]
    6b48:	605a      	str	r2, [r3, #4]
    6b4a:	4401      	add	r1, r0
    6b4c:	6019      	str	r1, [r3, #0]
    6b4e:	e7d7      	b.n	6b00 <_free_r+0x24>
    6b50:	d902      	bls.n	6b58 <_free_r+0x7c>
    6b52:	230c      	movs	r3, #12
    6b54:	602b      	str	r3, [r5, #0]
    6b56:	e7d3      	b.n	6b00 <_free_r+0x24>
    6b58:	6820      	ldr	r0, [r4, #0]
    6b5a:	1821      	adds	r1, r4, r0
    6b5c:	428a      	cmp	r2, r1
    6b5e:	bf04      	itt	eq
    6b60:	6811      	ldreq	r1, [r2, #0]
    6b62:	6852      	ldreq	r2, [r2, #4]
    6b64:	6062      	str	r2, [r4, #4]
    6b66:	bf04      	itt	eq
    6b68:	1809      	addeq	r1, r1, r0
    6b6a:	6021      	streq	r1, [r4, #0]
    6b6c:	605c      	str	r4, [r3, #4]
    6b6e:	e7c7      	b.n	6b00 <_free_r+0x24>
    6b70:	bd38      	pop	{r3, r4, r5, pc}
    6b72:	bf00      	nop
    6b74:	200010b8 	.word	0x200010b8

00006b78 <_malloc_r>:
    6b78:	b570      	push	{r4, r5, r6, lr}
    6b7a:	1ccd      	adds	r5, r1, #3
    6b7c:	f025 0503 	bic.w	r5, r5, #3
    6b80:	3508      	adds	r5, #8
    6b82:	2d0c      	cmp	r5, #12
    6b84:	bf38      	it	cc
    6b86:	250c      	movcc	r5, #12
    6b88:	2d00      	cmp	r5, #0
    6b8a:	4606      	mov	r6, r0
    6b8c:	db01      	blt.n	6b92 <_malloc_r+0x1a>
    6b8e:	42a9      	cmp	r1, r5
    6b90:	d903      	bls.n	6b9a <_malloc_r+0x22>
    6b92:	230c      	movs	r3, #12
    6b94:	6033      	str	r3, [r6, #0]
    6b96:	2000      	movs	r0, #0
    6b98:	bd70      	pop	{r4, r5, r6, pc}
    6b9a:	f000 f887 	bl	6cac <__malloc_lock>
    6b9e:	4a23      	ldr	r2, [pc, #140]	; (6c2c <_malloc_r+0xb4>)
    6ba0:	6814      	ldr	r4, [r2, #0]
    6ba2:	4621      	mov	r1, r4
    6ba4:	b991      	cbnz	r1, 6bcc <_malloc_r+0x54>
    6ba6:	4c22      	ldr	r4, [pc, #136]	; (6c30 <_malloc_r+0xb8>)
    6ba8:	6823      	ldr	r3, [r4, #0]
    6baa:	b91b      	cbnz	r3, 6bb4 <_malloc_r+0x3c>
    6bac:	4630      	mov	r0, r6
    6bae:	f000 f841 	bl	6c34 <_sbrk_r>
    6bb2:	6020      	str	r0, [r4, #0]
    6bb4:	4629      	mov	r1, r5
    6bb6:	4630      	mov	r0, r6
    6bb8:	f000 f83c 	bl	6c34 <_sbrk_r>
    6bbc:	1c43      	adds	r3, r0, #1
    6bbe:	d126      	bne.n	6c0e <_malloc_r+0x96>
    6bc0:	230c      	movs	r3, #12
    6bc2:	6033      	str	r3, [r6, #0]
    6bc4:	4630      	mov	r0, r6
    6bc6:	f000 f872 	bl	6cae <__malloc_unlock>
    6bca:	e7e4      	b.n	6b96 <_malloc_r+0x1e>
    6bcc:	680b      	ldr	r3, [r1, #0]
    6bce:	1b5b      	subs	r3, r3, r5
    6bd0:	d41a      	bmi.n	6c08 <_malloc_r+0x90>
    6bd2:	2b0b      	cmp	r3, #11
    6bd4:	d90f      	bls.n	6bf6 <_malloc_r+0x7e>
    6bd6:	600b      	str	r3, [r1, #0]
    6bd8:	50cd      	str	r5, [r1, r3]
    6bda:	18cc      	adds	r4, r1, r3
    6bdc:	4630      	mov	r0, r6
    6bde:	f000 f866 	bl	6cae <__malloc_unlock>
    6be2:	f104 000b 	add.w	r0, r4, #11
    6be6:	1d23      	adds	r3, r4, #4
    6be8:	f020 0007 	bic.w	r0, r0, #7
    6bec:	1ac3      	subs	r3, r0, r3
    6bee:	d01b      	beq.n	6c28 <_malloc_r+0xb0>
    6bf0:	425a      	negs	r2, r3
    6bf2:	50e2      	str	r2, [r4, r3]
    6bf4:	bd70      	pop	{r4, r5, r6, pc}
    6bf6:	428c      	cmp	r4, r1
    6bf8:	bf0d      	iteet	eq
    6bfa:	6863      	ldreq	r3, [r4, #4]
    6bfc:	684b      	ldrne	r3, [r1, #4]
    6bfe:	6063      	strne	r3, [r4, #4]
    6c00:	6013      	streq	r3, [r2, #0]
    6c02:	bf18      	it	ne
    6c04:	460c      	movne	r4, r1
    6c06:	e7e9      	b.n	6bdc <_malloc_r+0x64>
    6c08:	460c      	mov	r4, r1
    6c0a:	6849      	ldr	r1, [r1, #4]
    6c0c:	e7ca      	b.n	6ba4 <_malloc_r+0x2c>
    6c0e:	1cc4      	adds	r4, r0, #3
    6c10:	f024 0403 	bic.w	r4, r4, #3
    6c14:	42a0      	cmp	r0, r4
    6c16:	d005      	beq.n	6c24 <_malloc_r+0xac>
    6c18:	1a21      	subs	r1, r4, r0
    6c1a:	4630      	mov	r0, r6
    6c1c:	f000 f80a 	bl	6c34 <_sbrk_r>
    6c20:	3001      	adds	r0, #1
    6c22:	d0cd      	beq.n	6bc0 <_malloc_r+0x48>
    6c24:	6025      	str	r5, [r4, #0]
    6c26:	e7d9      	b.n	6bdc <_malloc_r+0x64>
    6c28:	bd70      	pop	{r4, r5, r6, pc}
    6c2a:	bf00      	nop
    6c2c:	200010b8 	.word	0x200010b8
    6c30:	200010bc 	.word	0x200010bc

00006c34 <_sbrk_r>:
    6c34:	b538      	push	{r3, r4, r5, lr}
    6c36:	4c06      	ldr	r4, [pc, #24]	; (6c50 <_sbrk_r+0x1c>)
    6c38:	2300      	movs	r3, #0
    6c3a:	4605      	mov	r5, r0
    6c3c:	4608      	mov	r0, r1
    6c3e:	6023      	str	r3, [r4, #0]
    6c40:	f7fb fa1c 	bl	207c <_sbrk>
    6c44:	1c43      	adds	r3, r0, #1
    6c46:	d102      	bne.n	6c4e <_sbrk_r+0x1a>
    6c48:	6823      	ldr	r3, [r4, #0]
    6c4a:	b103      	cbz	r3, 6c4e <_sbrk_r+0x1a>
    6c4c:	602b      	str	r3, [r5, #0]
    6c4e:	bd38      	pop	{r3, r4, r5, pc}
    6c50:	20001cb4 	.word	0x20001cb4

00006c54 <siprintf>:
    6c54:	b40e      	push	{r1, r2, r3}
    6c56:	b500      	push	{lr}
    6c58:	b09c      	sub	sp, #112	; 0x70
    6c5a:	f44f 7102 	mov.w	r1, #520	; 0x208
    6c5e:	ab1d      	add	r3, sp, #116	; 0x74
    6c60:	f8ad 1014 	strh.w	r1, [sp, #20]
    6c64:	9002      	str	r0, [sp, #8]
    6c66:	9006      	str	r0, [sp, #24]
    6c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6c6c:	480a      	ldr	r0, [pc, #40]	; (6c98 <siprintf+0x44>)
    6c6e:	9104      	str	r1, [sp, #16]
    6c70:	9107      	str	r1, [sp, #28]
    6c72:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c76:	f853 2b04 	ldr.w	r2, [r3], #4
    6c7a:	f8ad 1016 	strh.w	r1, [sp, #22]
    6c7e:	6800      	ldr	r0, [r0, #0]
    6c80:	9301      	str	r3, [sp, #4]
    6c82:	a902      	add	r1, sp, #8
    6c84:	f000 f870 	bl	6d68 <_svfiprintf_r>
    6c88:	9b02      	ldr	r3, [sp, #8]
    6c8a:	2200      	movs	r2, #0
    6c8c:	701a      	strb	r2, [r3, #0]
    6c8e:	b01c      	add	sp, #112	; 0x70
    6c90:	f85d eb04 	ldr.w	lr, [sp], #4
    6c94:	b003      	add	sp, #12
    6c96:	4770      	bx	lr
    6c98:	20000374 	.word	0x20000374

00006c9c <strlen>:
    6c9c:	4603      	mov	r3, r0
    6c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
    6ca2:	2a00      	cmp	r2, #0
    6ca4:	d1fb      	bne.n	6c9e <strlen+0x2>
    6ca6:	1a18      	subs	r0, r3, r0
    6ca8:	3801      	subs	r0, #1
    6caa:	4770      	bx	lr

00006cac <__malloc_lock>:
    6cac:	4770      	bx	lr

00006cae <__malloc_unlock>:
    6cae:	4770      	bx	lr

00006cb0 <__ssputs_r>:
    6cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cb4:	688e      	ldr	r6, [r1, #8]
    6cb6:	429e      	cmp	r6, r3
    6cb8:	4682      	mov	sl, r0
    6cba:	460c      	mov	r4, r1
    6cbc:	4691      	mov	r9, r2
    6cbe:	4698      	mov	r8, r3
    6cc0:	d835      	bhi.n	6d2e <__ssputs_r+0x7e>
    6cc2:	898a      	ldrh	r2, [r1, #12]
    6cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    6cc8:	d031      	beq.n	6d2e <__ssputs_r+0x7e>
    6cca:	6825      	ldr	r5, [r4, #0]
    6ccc:	6909      	ldr	r1, [r1, #16]
    6cce:	1a6f      	subs	r7, r5, r1
    6cd0:	6965      	ldr	r5, [r4, #20]
    6cd2:	2302      	movs	r3, #2
    6cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6cd8:	fb95 f5f3 	sdiv	r5, r5, r3
    6cdc:	f108 0301 	add.w	r3, r8, #1
    6ce0:	443b      	add	r3, r7
    6ce2:	429d      	cmp	r5, r3
    6ce4:	bf38      	it	cc
    6ce6:	461d      	movcc	r5, r3
    6ce8:	0553      	lsls	r3, r2, #21
    6cea:	d531      	bpl.n	6d50 <__ssputs_r+0xa0>
    6cec:	4629      	mov	r1, r5
    6cee:	f7ff ff43 	bl	6b78 <_malloc_r>
    6cf2:	4606      	mov	r6, r0
    6cf4:	b950      	cbnz	r0, 6d0c <__ssputs_r+0x5c>
    6cf6:	230c      	movs	r3, #12
    6cf8:	f8ca 3000 	str.w	r3, [sl]
    6cfc:	89a3      	ldrh	r3, [r4, #12]
    6cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6d02:	81a3      	strh	r3, [r4, #12]
    6d04:	f04f 30ff 	mov.w	r0, #4294967295
    6d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d0c:	463a      	mov	r2, r7
    6d0e:	6921      	ldr	r1, [r4, #16]
    6d10:	f7ff fed0 	bl	6ab4 <memcpy>
    6d14:	89a3      	ldrh	r3, [r4, #12]
    6d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    6d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6d1e:	81a3      	strh	r3, [r4, #12]
    6d20:	6126      	str	r6, [r4, #16]
    6d22:	6165      	str	r5, [r4, #20]
    6d24:	443e      	add	r6, r7
    6d26:	1bed      	subs	r5, r5, r7
    6d28:	6026      	str	r6, [r4, #0]
    6d2a:	60a5      	str	r5, [r4, #8]
    6d2c:	4646      	mov	r6, r8
    6d2e:	4546      	cmp	r6, r8
    6d30:	bf28      	it	cs
    6d32:	4646      	movcs	r6, r8
    6d34:	4632      	mov	r2, r6
    6d36:	4649      	mov	r1, r9
    6d38:	6820      	ldr	r0, [r4, #0]
    6d3a:	f000 faf1 	bl	7320 <memmove>
    6d3e:	68a3      	ldr	r3, [r4, #8]
    6d40:	1b9b      	subs	r3, r3, r6
    6d42:	60a3      	str	r3, [r4, #8]
    6d44:	6823      	ldr	r3, [r4, #0]
    6d46:	441e      	add	r6, r3
    6d48:	6026      	str	r6, [r4, #0]
    6d4a:	2000      	movs	r0, #0
    6d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d50:	462a      	mov	r2, r5
    6d52:	f000 faff 	bl	7354 <_realloc_r>
    6d56:	4606      	mov	r6, r0
    6d58:	2800      	cmp	r0, #0
    6d5a:	d1e1      	bne.n	6d20 <__ssputs_r+0x70>
    6d5c:	6921      	ldr	r1, [r4, #16]
    6d5e:	4650      	mov	r0, sl
    6d60:	f7ff febc 	bl	6adc <_free_r>
    6d64:	e7c7      	b.n	6cf6 <__ssputs_r+0x46>
	...

00006d68 <_svfiprintf_r>:
    6d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d6c:	b09d      	sub	sp, #116	; 0x74
    6d6e:	4680      	mov	r8, r0
    6d70:	9303      	str	r3, [sp, #12]
    6d72:	898b      	ldrh	r3, [r1, #12]
    6d74:	061c      	lsls	r4, r3, #24
    6d76:	460d      	mov	r5, r1
    6d78:	4616      	mov	r6, r2
    6d7a:	d50f      	bpl.n	6d9c <_svfiprintf_r+0x34>
    6d7c:	690b      	ldr	r3, [r1, #16]
    6d7e:	b96b      	cbnz	r3, 6d9c <_svfiprintf_r+0x34>
    6d80:	2140      	movs	r1, #64	; 0x40
    6d82:	f7ff fef9 	bl	6b78 <_malloc_r>
    6d86:	6028      	str	r0, [r5, #0]
    6d88:	6128      	str	r0, [r5, #16]
    6d8a:	b928      	cbnz	r0, 6d98 <_svfiprintf_r+0x30>
    6d8c:	230c      	movs	r3, #12
    6d8e:	f8c8 3000 	str.w	r3, [r8]
    6d92:	f04f 30ff 	mov.w	r0, #4294967295
    6d96:	e0c5      	b.n	6f24 <_svfiprintf_r+0x1bc>
    6d98:	2340      	movs	r3, #64	; 0x40
    6d9a:	616b      	str	r3, [r5, #20]
    6d9c:	2300      	movs	r3, #0
    6d9e:	9309      	str	r3, [sp, #36]	; 0x24
    6da0:	2320      	movs	r3, #32
    6da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6da6:	2330      	movs	r3, #48	; 0x30
    6da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6dac:	f04f 0b01 	mov.w	fp, #1
    6db0:	4637      	mov	r7, r6
    6db2:	463c      	mov	r4, r7
    6db4:	f814 3b01 	ldrb.w	r3, [r4], #1
    6db8:	2b00      	cmp	r3, #0
    6dba:	d13c      	bne.n	6e36 <_svfiprintf_r+0xce>
    6dbc:	ebb7 0a06 	subs.w	sl, r7, r6
    6dc0:	d00b      	beq.n	6dda <_svfiprintf_r+0x72>
    6dc2:	4653      	mov	r3, sl
    6dc4:	4632      	mov	r2, r6
    6dc6:	4629      	mov	r1, r5
    6dc8:	4640      	mov	r0, r8
    6dca:	f7ff ff71 	bl	6cb0 <__ssputs_r>
    6dce:	3001      	adds	r0, #1
    6dd0:	f000 80a3 	beq.w	6f1a <_svfiprintf_r+0x1b2>
    6dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6dd6:	4453      	add	r3, sl
    6dd8:	9309      	str	r3, [sp, #36]	; 0x24
    6dda:	783b      	ldrb	r3, [r7, #0]
    6ddc:	2b00      	cmp	r3, #0
    6dde:	f000 809c 	beq.w	6f1a <_svfiprintf_r+0x1b2>
    6de2:	2300      	movs	r3, #0
    6de4:	f04f 32ff 	mov.w	r2, #4294967295
    6de8:	9304      	str	r3, [sp, #16]
    6dea:	9307      	str	r3, [sp, #28]
    6dec:	9205      	str	r2, [sp, #20]
    6dee:	9306      	str	r3, [sp, #24]
    6df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6df4:	931a      	str	r3, [sp, #104]	; 0x68
    6df6:	2205      	movs	r2, #5
    6df8:	7821      	ldrb	r1, [r4, #0]
    6dfa:	4850      	ldr	r0, [pc, #320]	; (6f3c <_svfiprintf_r+0x1d4>)
    6dfc:	f000 fa40 	bl	7280 <memchr>
    6e00:	1c67      	adds	r7, r4, #1
    6e02:	9b04      	ldr	r3, [sp, #16]
    6e04:	b9d8      	cbnz	r0, 6e3e <_svfiprintf_r+0xd6>
    6e06:	06d9      	lsls	r1, r3, #27
    6e08:	bf44      	itt	mi
    6e0a:	2220      	movmi	r2, #32
    6e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6e10:	071a      	lsls	r2, r3, #28
    6e12:	bf44      	itt	mi
    6e14:	222b      	movmi	r2, #43	; 0x2b
    6e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6e1a:	7822      	ldrb	r2, [r4, #0]
    6e1c:	2a2a      	cmp	r2, #42	; 0x2a
    6e1e:	d016      	beq.n	6e4e <_svfiprintf_r+0xe6>
    6e20:	9a07      	ldr	r2, [sp, #28]
    6e22:	2100      	movs	r1, #0
    6e24:	200a      	movs	r0, #10
    6e26:	4627      	mov	r7, r4
    6e28:	3401      	adds	r4, #1
    6e2a:	783b      	ldrb	r3, [r7, #0]
    6e2c:	3b30      	subs	r3, #48	; 0x30
    6e2e:	2b09      	cmp	r3, #9
    6e30:	d951      	bls.n	6ed6 <_svfiprintf_r+0x16e>
    6e32:	b1c9      	cbz	r1, 6e68 <_svfiprintf_r+0x100>
    6e34:	e011      	b.n	6e5a <_svfiprintf_r+0xf2>
    6e36:	2b25      	cmp	r3, #37	; 0x25
    6e38:	d0c0      	beq.n	6dbc <_svfiprintf_r+0x54>
    6e3a:	4627      	mov	r7, r4
    6e3c:	e7b9      	b.n	6db2 <_svfiprintf_r+0x4a>
    6e3e:	4a3f      	ldr	r2, [pc, #252]	; (6f3c <_svfiprintf_r+0x1d4>)
    6e40:	1a80      	subs	r0, r0, r2
    6e42:	fa0b f000 	lsl.w	r0, fp, r0
    6e46:	4318      	orrs	r0, r3
    6e48:	9004      	str	r0, [sp, #16]
    6e4a:	463c      	mov	r4, r7
    6e4c:	e7d3      	b.n	6df6 <_svfiprintf_r+0x8e>
    6e4e:	9a03      	ldr	r2, [sp, #12]
    6e50:	1d11      	adds	r1, r2, #4
    6e52:	6812      	ldr	r2, [r2, #0]
    6e54:	9103      	str	r1, [sp, #12]
    6e56:	2a00      	cmp	r2, #0
    6e58:	db01      	blt.n	6e5e <_svfiprintf_r+0xf6>
    6e5a:	9207      	str	r2, [sp, #28]
    6e5c:	e004      	b.n	6e68 <_svfiprintf_r+0x100>
    6e5e:	4252      	negs	r2, r2
    6e60:	f043 0302 	orr.w	r3, r3, #2
    6e64:	9207      	str	r2, [sp, #28]
    6e66:	9304      	str	r3, [sp, #16]
    6e68:	783b      	ldrb	r3, [r7, #0]
    6e6a:	2b2e      	cmp	r3, #46	; 0x2e
    6e6c:	d10e      	bne.n	6e8c <_svfiprintf_r+0x124>
    6e6e:	787b      	ldrb	r3, [r7, #1]
    6e70:	2b2a      	cmp	r3, #42	; 0x2a
    6e72:	f107 0101 	add.w	r1, r7, #1
    6e76:	d132      	bne.n	6ede <_svfiprintf_r+0x176>
    6e78:	9b03      	ldr	r3, [sp, #12]
    6e7a:	1d1a      	adds	r2, r3, #4
    6e7c:	681b      	ldr	r3, [r3, #0]
    6e7e:	9203      	str	r2, [sp, #12]
    6e80:	2b00      	cmp	r3, #0
    6e82:	bfb8      	it	lt
    6e84:	f04f 33ff 	movlt.w	r3, #4294967295
    6e88:	3702      	adds	r7, #2
    6e8a:	9305      	str	r3, [sp, #20]
    6e8c:	4c2c      	ldr	r4, [pc, #176]	; (6f40 <_svfiprintf_r+0x1d8>)
    6e8e:	7839      	ldrb	r1, [r7, #0]
    6e90:	2203      	movs	r2, #3
    6e92:	4620      	mov	r0, r4
    6e94:	f000 f9f4 	bl	7280 <memchr>
    6e98:	b138      	cbz	r0, 6eaa <_svfiprintf_r+0x142>
    6e9a:	2340      	movs	r3, #64	; 0x40
    6e9c:	1b00      	subs	r0, r0, r4
    6e9e:	fa03 f000 	lsl.w	r0, r3, r0
    6ea2:	9b04      	ldr	r3, [sp, #16]
    6ea4:	4303      	orrs	r3, r0
    6ea6:	9304      	str	r3, [sp, #16]
    6ea8:	3701      	adds	r7, #1
    6eaa:	7839      	ldrb	r1, [r7, #0]
    6eac:	4825      	ldr	r0, [pc, #148]	; (6f44 <_svfiprintf_r+0x1dc>)
    6eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6eb2:	2206      	movs	r2, #6
    6eb4:	1c7e      	adds	r6, r7, #1
    6eb6:	f000 f9e3 	bl	7280 <memchr>
    6eba:	2800      	cmp	r0, #0
    6ebc:	d035      	beq.n	6f2a <_svfiprintf_r+0x1c2>
    6ebe:	4b22      	ldr	r3, [pc, #136]	; (6f48 <_svfiprintf_r+0x1e0>)
    6ec0:	b9fb      	cbnz	r3, 6f02 <_svfiprintf_r+0x19a>
    6ec2:	9b03      	ldr	r3, [sp, #12]
    6ec4:	3307      	adds	r3, #7
    6ec6:	f023 0307 	bic.w	r3, r3, #7
    6eca:	3308      	adds	r3, #8
    6ecc:	9303      	str	r3, [sp, #12]
    6ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ed0:	444b      	add	r3, r9
    6ed2:	9309      	str	r3, [sp, #36]	; 0x24
    6ed4:	e76c      	b.n	6db0 <_svfiprintf_r+0x48>
    6ed6:	fb00 3202 	mla	r2, r0, r2, r3
    6eda:	2101      	movs	r1, #1
    6edc:	e7a3      	b.n	6e26 <_svfiprintf_r+0xbe>
    6ede:	2300      	movs	r3, #0
    6ee0:	9305      	str	r3, [sp, #20]
    6ee2:	4618      	mov	r0, r3
    6ee4:	240a      	movs	r4, #10
    6ee6:	460f      	mov	r7, r1
    6ee8:	3101      	adds	r1, #1
    6eea:	783a      	ldrb	r2, [r7, #0]
    6eec:	3a30      	subs	r2, #48	; 0x30
    6eee:	2a09      	cmp	r2, #9
    6ef0:	d903      	bls.n	6efa <_svfiprintf_r+0x192>
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d0ca      	beq.n	6e8c <_svfiprintf_r+0x124>
    6ef6:	9005      	str	r0, [sp, #20]
    6ef8:	e7c8      	b.n	6e8c <_svfiprintf_r+0x124>
    6efa:	fb04 2000 	mla	r0, r4, r0, r2
    6efe:	2301      	movs	r3, #1
    6f00:	e7f1      	b.n	6ee6 <_svfiprintf_r+0x17e>
    6f02:	ab03      	add	r3, sp, #12
    6f04:	9300      	str	r3, [sp, #0]
    6f06:	462a      	mov	r2, r5
    6f08:	4b10      	ldr	r3, [pc, #64]	; (6f4c <_svfiprintf_r+0x1e4>)
    6f0a:	a904      	add	r1, sp, #16
    6f0c:	4640      	mov	r0, r8
    6f0e:	f3af 8000 	nop.w
    6f12:	f1b0 3fff 	cmp.w	r0, #4294967295
    6f16:	4681      	mov	r9, r0
    6f18:	d1d9      	bne.n	6ece <_svfiprintf_r+0x166>
    6f1a:	89ab      	ldrh	r3, [r5, #12]
    6f1c:	065b      	lsls	r3, r3, #25
    6f1e:	f53f af38 	bmi.w	6d92 <_svfiprintf_r+0x2a>
    6f22:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f24:	b01d      	add	sp, #116	; 0x74
    6f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f2a:	ab03      	add	r3, sp, #12
    6f2c:	9300      	str	r3, [sp, #0]
    6f2e:	462a      	mov	r2, r5
    6f30:	4b06      	ldr	r3, [pc, #24]	; (6f4c <_svfiprintf_r+0x1e4>)
    6f32:	a904      	add	r1, sp, #16
    6f34:	4640      	mov	r0, r8
    6f36:	f000 f881 	bl	703c <_printf_i>
    6f3a:	e7ea      	b.n	6f12 <_svfiprintf_r+0x1aa>
    6f3c:	000077f4 	.word	0x000077f4
    6f40:	000077fa 	.word	0x000077fa
    6f44:	000077fe 	.word	0x000077fe
    6f48:	00000000 	.word	0x00000000
    6f4c:	00006cb1 	.word	0x00006cb1

00006f50 <_printf_common>:
    6f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f54:	4691      	mov	r9, r2
    6f56:	461f      	mov	r7, r3
    6f58:	688a      	ldr	r2, [r1, #8]
    6f5a:	690b      	ldr	r3, [r1, #16]
    6f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    6f60:	4293      	cmp	r3, r2
    6f62:	bfb8      	it	lt
    6f64:	4613      	movlt	r3, r2
    6f66:	f8c9 3000 	str.w	r3, [r9]
    6f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    6f6e:	4606      	mov	r6, r0
    6f70:	460c      	mov	r4, r1
    6f72:	b112      	cbz	r2, 6f7a <_printf_common+0x2a>
    6f74:	3301      	adds	r3, #1
    6f76:	f8c9 3000 	str.w	r3, [r9]
    6f7a:	6823      	ldr	r3, [r4, #0]
    6f7c:	0699      	lsls	r1, r3, #26
    6f7e:	bf42      	ittt	mi
    6f80:	f8d9 3000 	ldrmi.w	r3, [r9]
    6f84:	3302      	addmi	r3, #2
    6f86:	f8c9 3000 	strmi.w	r3, [r9]
    6f8a:	6825      	ldr	r5, [r4, #0]
    6f8c:	f015 0506 	ands.w	r5, r5, #6
    6f90:	d107      	bne.n	6fa2 <_printf_common+0x52>
    6f92:	f104 0a19 	add.w	sl, r4, #25
    6f96:	68e3      	ldr	r3, [r4, #12]
    6f98:	f8d9 2000 	ldr.w	r2, [r9]
    6f9c:	1a9b      	subs	r3, r3, r2
    6f9e:	429d      	cmp	r5, r3
    6fa0:	db29      	blt.n	6ff6 <_printf_common+0xa6>
    6fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    6fa6:	6822      	ldr	r2, [r4, #0]
    6fa8:	3300      	adds	r3, #0
    6faa:	bf18      	it	ne
    6fac:	2301      	movne	r3, #1
    6fae:	0692      	lsls	r2, r2, #26
    6fb0:	d42e      	bmi.n	7010 <_printf_common+0xc0>
    6fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    6fb6:	4639      	mov	r1, r7
    6fb8:	4630      	mov	r0, r6
    6fba:	47c0      	blx	r8
    6fbc:	3001      	adds	r0, #1
    6fbe:	d021      	beq.n	7004 <_printf_common+0xb4>
    6fc0:	6823      	ldr	r3, [r4, #0]
    6fc2:	68e5      	ldr	r5, [r4, #12]
    6fc4:	f8d9 2000 	ldr.w	r2, [r9]
    6fc8:	f003 0306 	and.w	r3, r3, #6
    6fcc:	2b04      	cmp	r3, #4
    6fce:	bf08      	it	eq
    6fd0:	1aad      	subeq	r5, r5, r2
    6fd2:	68a3      	ldr	r3, [r4, #8]
    6fd4:	6922      	ldr	r2, [r4, #16]
    6fd6:	bf0c      	ite	eq
    6fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    6fdc:	2500      	movne	r5, #0
    6fde:	4293      	cmp	r3, r2
    6fe0:	bfc4      	itt	gt
    6fe2:	1a9b      	subgt	r3, r3, r2
    6fe4:	18ed      	addgt	r5, r5, r3
    6fe6:	f04f 0900 	mov.w	r9, #0
    6fea:	341a      	adds	r4, #26
    6fec:	454d      	cmp	r5, r9
    6fee:	d11b      	bne.n	7028 <_printf_common+0xd8>
    6ff0:	2000      	movs	r0, #0
    6ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ff6:	2301      	movs	r3, #1
    6ff8:	4652      	mov	r2, sl
    6ffa:	4639      	mov	r1, r7
    6ffc:	4630      	mov	r0, r6
    6ffe:	47c0      	blx	r8
    7000:	3001      	adds	r0, #1
    7002:	d103      	bne.n	700c <_printf_common+0xbc>
    7004:	f04f 30ff 	mov.w	r0, #4294967295
    7008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    700c:	3501      	adds	r5, #1
    700e:	e7c2      	b.n	6f96 <_printf_common+0x46>
    7010:	18e1      	adds	r1, r4, r3
    7012:	1c5a      	adds	r2, r3, #1
    7014:	2030      	movs	r0, #48	; 0x30
    7016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    701a:	4422      	add	r2, r4
    701c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7024:	3302      	adds	r3, #2
    7026:	e7c4      	b.n	6fb2 <_printf_common+0x62>
    7028:	2301      	movs	r3, #1
    702a:	4622      	mov	r2, r4
    702c:	4639      	mov	r1, r7
    702e:	4630      	mov	r0, r6
    7030:	47c0      	blx	r8
    7032:	3001      	adds	r0, #1
    7034:	d0e6      	beq.n	7004 <_printf_common+0xb4>
    7036:	f109 0901 	add.w	r9, r9, #1
    703a:	e7d7      	b.n	6fec <_printf_common+0x9c>

0000703c <_printf_i>:
    703c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7040:	4617      	mov	r7, r2
    7042:	7e0a      	ldrb	r2, [r1, #24]
    7044:	b085      	sub	sp, #20
    7046:	2a6e      	cmp	r2, #110	; 0x6e
    7048:	4698      	mov	r8, r3
    704a:	4606      	mov	r6, r0
    704c:	460c      	mov	r4, r1
    704e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7050:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7054:	f000 80bc 	beq.w	71d0 <_printf_i+0x194>
    7058:	d81a      	bhi.n	7090 <_printf_i+0x54>
    705a:	2a63      	cmp	r2, #99	; 0x63
    705c:	d02e      	beq.n	70bc <_printf_i+0x80>
    705e:	d80a      	bhi.n	7076 <_printf_i+0x3a>
    7060:	2a00      	cmp	r2, #0
    7062:	f000 80c8 	beq.w	71f6 <_printf_i+0x1ba>
    7066:	2a58      	cmp	r2, #88	; 0x58
    7068:	f000 808a 	beq.w	7180 <_printf_i+0x144>
    706c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7070:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7074:	e02a      	b.n	70cc <_printf_i+0x90>
    7076:	2a64      	cmp	r2, #100	; 0x64
    7078:	d001      	beq.n	707e <_printf_i+0x42>
    707a:	2a69      	cmp	r2, #105	; 0x69
    707c:	d1f6      	bne.n	706c <_printf_i+0x30>
    707e:	6821      	ldr	r1, [r4, #0]
    7080:	681a      	ldr	r2, [r3, #0]
    7082:	f011 0f80 	tst.w	r1, #128	; 0x80
    7086:	d023      	beq.n	70d0 <_printf_i+0x94>
    7088:	1d11      	adds	r1, r2, #4
    708a:	6019      	str	r1, [r3, #0]
    708c:	6813      	ldr	r3, [r2, #0]
    708e:	e027      	b.n	70e0 <_printf_i+0xa4>
    7090:	2a73      	cmp	r2, #115	; 0x73
    7092:	f000 80b4 	beq.w	71fe <_printf_i+0x1c2>
    7096:	d808      	bhi.n	70aa <_printf_i+0x6e>
    7098:	2a6f      	cmp	r2, #111	; 0x6f
    709a:	d02a      	beq.n	70f2 <_printf_i+0xb6>
    709c:	2a70      	cmp	r2, #112	; 0x70
    709e:	d1e5      	bne.n	706c <_printf_i+0x30>
    70a0:	680a      	ldr	r2, [r1, #0]
    70a2:	f042 0220 	orr.w	r2, r2, #32
    70a6:	600a      	str	r2, [r1, #0]
    70a8:	e003      	b.n	70b2 <_printf_i+0x76>
    70aa:	2a75      	cmp	r2, #117	; 0x75
    70ac:	d021      	beq.n	70f2 <_printf_i+0xb6>
    70ae:	2a78      	cmp	r2, #120	; 0x78
    70b0:	d1dc      	bne.n	706c <_printf_i+0x30>
    70b2:	2278      	movs	r2, #120	; 0x78
    70b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    70b8:	496e      	ldr	r1, [pc, #440]	; (7274 <_printf_i+0x238>)
    70ba:	e064      	b.n	7186 <_printf_i+0x14a>
    70bc:	681a      	ldr	r2, [r3, #0]
    70be:	f101 0542 	add.w	r5, r1, #66	; 0x42
    70c2:	1d11      	adds	r1, r2, #4
    70c4:	6019      	str	r1, [r3, #0]
    70c6:	6813      	ldr	r3, [r2, #0]
    70c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    70cc:	2301      	movs	r3, #1
    70ce:	e0a3      	b.n	7218 <_printf_i+0x1dc>
    70d0:	f011 0f40 	tst.w	r1, #64	; 0x40
    70d4:	f102 0104 	add.w	r1, r2, #4
    70d8:	6019      	str	r1, [r3, #0]
    70da:	d0d7      	beq.n	708c <_printf_i+0x50>
    70dc:	f9b2 3000 	ldrsh.w	r3, [r2]
    70e0:	2b00      	cmp	r3, #0
    70e2:	da03      	bge.n	70ec <_printf_i+0xb0>
    70e4:	222d      	movs	r2, #45	; 0x2d
    70e6:	425b      	negs	r3, r3
    70e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    70ec:	4962      	ldr	r1, [pc, #392]	; (7278 <_printf_i+0x23c>)
    70ee:	220a      	movs	r2, #10
    70f0:	e017      	b.n	7122 <_printf_i+0xe6>
    70f2:	6820      	ldr	r0, [r4, #0]
    70f4:	6819      	ldr	r1, [r3, #0]
    70f6:	f010 0f80 	tst.w	r0, #128	; 0x80
    70fa:	d003      	beq.n	7104 <_printf_i+0xc8>
    70fc:	1d08      	adds	r0, r1, #4
    70fe:	6018      	str	r0, [r3, #0]
    7100:	680b      	ldr	r3, [r1, #0]
    7102:	e006      	b.n	7112 <_printf_i+0xd6>
    7104:	f010 0f40 	tst.w	r0, #64	; 0x40
    7108:	f101 0004 	add.w	r0, r1, #4
    710c:	6018      	str	r0, [r3, #0]
    710e:	d0f7      	beq.n	7100 <_printf_i+0xc4>
    7110:	880b      	ldrh	r3, [r1, #0]
    7112:	4959      	ldr	r1, [pc, #356]	; (7278 <_printf_i+0x23c>)
    7114:	2a6f      	cmp	r2, #111	; 0x6f
    7116:	bf14      	ite	ne
    7118:	220a      	movne	r2, #10
    711a:	2208      	moveq	r2, #8
    711c:	2000      	movs	r0, #0
    711e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    7122:	6865      	ldr	r5, [r4, #4]
    7124:	60a5      	str	r5, [r4, #8]
    7126:	2d00      	cmp	r5, #0
    7128:	f2c0 809c 	blt.w	7264 <_printf_i+0x228>
    712c:	6820      	ldr	r0, [r4, #0]
    712e:	f020 0004 	bic.w	r0, r0, #4
    7132:	6020      	str	r0, [r4, #0]
    7134:	2b00      	cmp	r3, #0
    7136:	d13f      	bne.n	71b8 <_printf_i+0x17c>
    7138:	2d00      	cmp	r5, #0
    713a:	f040 8095 	bne.w	7268 <_printf_i+0x22c>
    713e:	4675      	mov	r5, lr
    7140:	2a08      	cmp	r2, #8
    7142:	d10b      	bne.n	715c <_printf_i+0x120>
    7144:	6823      	ldr	r3, [r4, #0]
    7146:	07da      	lsls	r2, r3, #31
    7148:	d508      	bpl.n	715c <_printf_i+0x120>
    714a:	6923      	ldr	r3, [r4, #16]
    714c:	6862      	ldr	r2, [r4, #4]
    714e:	429a      	cmp	r2, r3
    7150:	bfde      	ittt	le
    7152:	2330      	movle	r3, #48	; 0x30
    7154:	f805 3c01 	strble.w	r3, [r5, #-1]
    7158:	f105 35ff 	addle.w	r5, r5, #4294967295
    715c:	ebae 0305 	sub.w	r3, lr, r5
    7160:	6123      	str	r3, [r4, #16]
    7162:	f8cd 8000 	str.w	r8, [sp]
    7166:	463b      	mov	r3, r7
    7168:	aa03      	add	r2, sp, #12
    716a:	4621      	mov	r1, r4
    716c:	4630      	mov	r0, r6
    716e:	f7ff feef 	bl	6f50 <_printf_common>
    7172:	3001      	adds	r0, #1
    7174:	d155      	bne.n	7222 <_printf_i+0x1e6>
    7176:	f04f 30ff 	mov.w	r0, #4294967295
    717a:	b005      	add	sp, #20
    717c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7180:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7184:	493c      	ldr	r1, [pc, #240]	; (7278 <_printf_i+0x23c>)
    7186:	6822      	ldr	r2, [r4, #0]
    7188:	6818      	ldr	r0, [r3, #0]
    718a:	f012 0f80 	tst.w	r2, #128	; 0x80
    718e:	f100 0504 	add.w	r5, r0, #4
    7192:	601d      	str	r5, [r3, #0]
    7194:	d001      	beq.n	719a <_printf_i+0x15e>
    7196:	6803      	ldr	r3, [r0, #0]
    7198:	e002      	b.n	71a0 <_printf_i+0x164>
    719a:	0655      	lsls	r5, r2, #25
    719c:	d5fb      	bpl.n	7196 <_printf_i+0x15a>
    719e:	8803      	ldrh	r3, [r0, #0]
    71a0:	07d0      	lsls	r0, r2, #31
    71a2:	bf44      	itt	mi
    71a4:	f042 0220 	orrmi.w	r2, r2, #32
    71a8:	6022      	strmi	r2, [r4, #0]
    71aa:	b91b      	cbnz	r3, 71b4 <_printf_i+0x178>
    71ac:	6822      	ldr	r2, [r4, #0]
    71ae:	f022 0220 	bic.w	r2, r2, #32
    71b2:	6022      	str	r2, [r4, #0]
    71b4:	2210      	movs	r2, #16
    71b6:	e7b1      	b.n	711c <_printf_i+0xe0>
    71b8:	4675      	mov	r5, lr
    71ba:	fbb3 f0f2 	udiv	r0, r3, r2
    71be:	fb02 3310 	mls	r3, r2, r0, r3
    71c2:	5ccb      	ldrb	r3, [r1, r3]
    71c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    71c8:	4603      	mov	r3, r0
    71ca:	2800      	cmp	r0, #0
    71cc:	d1f5      	bne.n	71ba <_printf_i+0x17e>
    71ce:	e7b7      	b.n	7140 <_printf_i+0x104>
    71d0:	6808      	ldr	r0, [r1, #0]
    71d2:	681a      	ldr	r2, [r3, #0]
    71d4:	6949      	ldr	r1, [r1, #20]
    71d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    71da:	d004      	beq.n	71e6 <_printf_i+0x1aa>
    71dc:	1d10      	adds	r0, r2, #4
    71de:	6018      	str	r0, [r3, #0]
    71e0:	6813      	ldr	r3, [r2, #0]
    71e2:	6019      	str	r1, [r3, #0]
    71e4:	e007      	b.n	71f6 <_printf_i+0x1ba>
    71e6:	f010 0f40 	tst.w	r0, #64	; 0x40
    71ea:	f102 0004 	add.w	r0, r2, #4
    71ee:	6018      	str	r0, [r3, #0]
    71f0:	6813      	ldr	r3, [r2, #0]
    71f2:	d0f6      	beq.n	71e2 <_printf_i+0x1a6>
    71f4:	8019      	strh	r1, [r3, #0]
    71f6:	2300      	movs	r3, #0
    71f8:	6123      	str	r3, [r4, #16]
    71fa:	4675      	mov	r5, lr
    71fc:	e7b1      	b.n	7162 <_printf_i+0x126>
    71fe:	681a      	ldr	r2, [r3, #0]
    7200:	1d11      	adds	r1, r2, #4
    7202:	6019      	str	r1, [r3, #0]
    7204:	6815      	ldr	r5, [r2, #0]
    7206:	6862      	ldr	r2, [r4, #4]
    7208:	2100      	movs	r1, #0
    720a:	4628      	mov	r0, r5
    720c:	f000 f838 	bl	7280 <memchr>
    7210:	b108      	cbz	r0, 7216 <_printf_i+0x1da>
    7212:	1b40      	subs	r0, r0, r5
    7214:	6060      	str	r0, [r4, #4]
    7216:	6863      	ldr	r3, [r4, #4]
    7218:	6123      	str	r3, [r4, #16]
    721a:	2300      	movs	r3, #0
    721c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7220:	e79f      	b.n	7162 <_printf_i+0x126>
    7222:	6923      	ldr	r3, [r4, #16]
    7224:	462a      	mov	r2, r5
    7226:	4639      	mov	r1, r7
    7228:	4630      	mov	r0, r6
    722a:	47c0      	blx	r8
    722c:	3001      	adds	r0, #1
    722e:	d0a2      	beq.n	7176 <_printf_i+0x13a>
    7230:	6823      	ldr	r3, [r4, #0]
    7232:	079b      	lsls	r3, r3, #30
    7234:	d507      	bpl.n	7246 <_printf_i+0x20a>
    7236:	2500      	movs	r5, #0
    7238:	f104 0919 	add.w	r9, r4, #25
    723c:	68e3      	ldr	r3, [r4, #12]
    723e:	9a03      	ldr	r2, [sp, #12]
    7240:	1a9b      	subs	r3, r3, r2
    7242:	429d      	cmp	r5, r3
    7244:	db05      	blt.n	7252 <_printf_i+0x216>
    7246:	68e0      	ldr	r0, [r4, #12]
    7248:	9b03      	ldr	r3, [sp, #12]
    724a:	4298      	cmp	r0, r3
    724c:	bfb8      	it	lt
    724e:	4618      	movlt	r0, r3
    7250:	e793      	b.n	717a <_printf_i+0x13e>
    7252:	2301      	movs	r3, #1
    7254:	464a      	mov	r2, r9
    7256:	4639      	mov	r1, r7
    7258:	4630      	mov	r0, r6
    725a:	47c0      	blx	r8
    725c:	3001      	adds	r0, #1
    725e:	d08a      	beq.n	7176 <_printf_i+0x13a>
    7260:	3501      	adds	r5, #1
    7262:	e7eb      	b.n	723c <_printf_i+0x200>
    7264:	2b00      	cmp	r3, #0
    7266:	d1a7      	bne.n	71b8 <_printf_i+0x17c>
    7268:	780b      	ldrb	r3, [r1, #0]
    726a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    726e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7272:	e765      	b.n	7140 <_printf_i+0x104>
    7274:	00007816 	.word	0x00007816
    7278:	00007805 	.word	0x00007805
    727c:	00000000 	.word	0x00000000

00007280 <memchr>:
    7280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7284:	2a10      	cmp	r2, #16
    7286:	db2b      	blt.n	72e0 <memchr+0x60>
    7288:	f010 0f07 	tst.w	r0, #7
    728c:	d008      	beq.n	72a0 <memchr+0x20>
    728e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7292:	3a01      	subs	r2, #1
    7294:	428b      	cmp	r3, r1
    7296:	d02d      	beq.n	72f4 <memchr+0x74>
    7298:	f010 0f07 	tst.w	r0, #7
    729c:	b342      	cbz	r2, 72f0 <memchr+0x70>
    729e:	d1f6      	bne.n	728e <memchr+0xe>
    72a0:	b4f0      	push	{r4, r5, r6, r7}
    72a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    72a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    72aa:	f022 0407 	bic.w	r4, r2, #7
    72ae:	f07f 0700 	mvns.w	r7, #0
    72b2:	2300      	movs	r3, #0
    72b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    72b8:	3c08      	subs	r4, #8
    72ba:	ea85 0501 	eor.w	r5, r5, r1
    72be:	ea86 0601 	eor.w	r6, r6, r1
    72c2:	fa85 f547 	uadd8	r5, r5, r7
    72c6:	faa3 f587 	sel	r5, r3, r7
    72ca:	fa86 f647 	uadd8	r6, r6, r7
    72ce:	faa5 f687 	sel	r6, r5, r7
    72d2:	b98e      	cbnz	r6, 72f8 <memchr+0x78>
    72d4:	d1ee      	bne.n	72b4 <memchr+0x34>
    72d6:	bcf0      	pop	{r4, r5, r6, r7}
    72d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    72dc:	f002 0207 	and.w	r2, r2, #7
    72e0:	b132      	cbz	r2, 72f0 <memchr+0x70>
    72e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    72e6:	3a01      	subs	r2, #1
    72e8:	ea83 0301 	eor.w	r3, r3, r1
    72ec:	b113      	cbz	r3, 72f4 <memchr+0x74>
    72ee:	d1f8      	bne.n	72e2 <memchr+0x62>
    72f0:	2000      	movs	r0, #0
    72f2:	4770      	bx	lr
    72f4:	3801      	subs	r0, #1
    72f6:	4770      	bx	lr
    72f8:	2d00      	cmp	r5, #0
    72fa:	bf06      	itte	eq
    72fc:	4635      	moveq	r5, r6
    72fe:	3803      	subeq	r0, #3
    7300:	3807      	subne	r0, #7
    7302:	f015 0f01 	tst.w	r5, #1
    7306:	d107      	bne.n	7318 <memchr+0x98>
    7308:	3001      	adds	r0, #1
    730a:	f415 7f80 	tst.w	r5, #256	; 0x100
    730e:	bf02      	ittt	eq
    7310:	3001      	addeq	r0, #1
    7312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7316:	3001      	addeq	r0, #1
    7318:	bcf0      	pop	{r4, r5, r6, r7}
    731a:	3801      	subs	r0, #1
    731c:	4770      	bx	lr
    731e:	bf00      	nop

00007320 <memmove>:
    7320:	4288      	cmp	r0, r1
    7322:	b510      	push	{r4, lr}
    7324:	eb01 0302 	add.w	r3, r1, r2
    7328:	d803      	bhi.n	7332 <memmove+0x12>
    732a:	1e42      	subs	r2, r0, #1
    732c:	4299      	cmp	r1, r3
    732e:	d10c      	bne.n	734a <memmove+0x2a>
    7330:	bd10      	pop	{r4, pc}
    7332:	4298      	cmp	r0, r3
    7334:	d2f9      	bcs.n	732a <memmove+0xa>
    7336:	1881      	adds	r1, r0, r2
    7338:	1ad2      	subs	r2, r2, r3
    733a:	42d3      	cmn	r3, r2
    733c:	d100      	bne.n	7340 <memmove+0x20>
    733e:	bd10      	pop	{r4, pc}
    7340:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    7344:	f801 4d01 	strb.w	r4, [r1, #-1]!
    7348:	e7f7      	b.n	733a <memmove+0x1a>
    734a:	f811 4b01 	ldrb.w	r4, [r1], #1
    734e:	f802 4f01 	strb.w	r4, [r2, #1]!
    7352:	e7eb      	b.n	732c <memmove+0xc>

00007354 <_realloc_r>:
    7354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7356:	4607      	mov	r7, r0
    7358:	4614      	mov	r4, r2
    735a:	460e      	mov	r6, r1
    735c:	b921      	cbnz	r1, 7368 <_realloc_r+0x14>
    735e:	4611      	mov	r1, r2
    7360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7364:	f7ff bc08 	b.w	6b78 <_malloc_r>
    7368:	b922      	cbnz	r2, 7374 <_realloc_r+0x20>
    736a:	f7ff fbb7 	bl	6adc <_free_r>
    736e:	4625      	mov	r5, r4
    7370:	4628      	mov	r0, r5
    7372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7374:	f000 f814 	bl	73a0 <_malloc_usable_size_r>
    7378:	4284      	cmp	r4, r0
    737a:	d90f      	bls.n	739c <_realloc_r+0x48>
    737c:	4621      	mov	r1, r4
    737e:	4638      	mov	r0, r7
    7380:	f7ff fbfa 	bl	6b78 <_malloc_r>
    7384:	4605      	mov	r5, r0
    7386:	2800      	cmp	r0, #0
    7388:	d0f2      	beq.n	7370 <_realloc_r+0x1c>
    738a:	4631      	mov	r1, r6
    738c:	4622      	mov	r2, r4
    738e:	f7ff fb91 	bl	6ab4 <memcpy>
    7392:	4631      	mov	r1, r6
    7394:	4638      	mov	r0, r7
    7396:	f7ff fba1 	bl	6adc <_free_r>
    739a:	e7e9      	b.n	7370 <_realloc_r+0x1c>
    739c:	4635      	mov	r5, r6
    739e:	e7e7      	b.n	7370 <_realloc_r+0x1c>

000073a0 <_malloc_usable_size_r>:
    73a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    73a4:	2800      	cmp	r0, #0
    73a6:	f1a0 0004 	sub.w	r0, r0, #4
    73aa:	bfbc      	itt	lt
    73ac:	580b      	ldrlt	r3, [r1, r0]
    73ae:	18c0      	addlt	r0, r0, r3
    73b0:	4770      	bx	lr
    73b2:	0000      	movs	r0, r0
    73b4:	682f2e2e 	.word	0x682f2e2e
    73b8:	732f6c61 	.word	0x732f6c61
    73bc:	682f6372 	.word	0x682f6372
    73c0:	615f6c61 	.word	0x615f6c61
    73c4:	615f6364 	.word	0x615f6364
    73c8:	636e7973 	.word	0x636e7973
    73cc:	0000632e 	.word	0x0000632e
    73d0:	682f2e2e 	.word	0x682f2e2e
    73d4:	732f6c61 	.word	0x732f6c61
    73d8:	682f6372 	.word	0x682f6372
    73dc:	635f6c61 	.word	0x635f6c61
    73e0:	735f6372 	.word	0x735f6372
    73e4:	2e636e79 	.word	0x2e636e79
    73e8:	00000063 	.word	0x00000063
    73ec:	682f2e2e 	.word	0x682f2e2e
    73f0:	732f6c61 	.word	0x732f6c61
    73f4:	682f6372 	.word	0x682f6372
    73f8:	665f6c61 	.word	0x665f6c61
    73fc:	6873616c 	.word	0x6873616c
    7400:	0000632e 	.word	0x0000632e
    7404:	682f2e2e 	.word	0x682f2e2e
    7408:	732f6c61 	.word	0x732f6c61
    740c:	682f6372 	.word	0x682f6372
    7410:	695f6c61 	.word	0x695f6c61
    7414:	6d5f6332 	.word	0x6d5f6332
    7418:	7973615f 	.word	0x7973615f
    741c:	632e636e 	.word	0x632e636e
    7420:	00000000 	.word	0x00000000
    7424:	682f2e2e 	.word	0x682f2e2e
    7428:	732f6c61 	.word	0x732f6c61
    742c:	682f6372 	.word	0x682f6372
    7430:	695f6c61 	.word	0x695f6c61
    7434:	00632e6f 	.word	0x00632e6f
    7438:	682f2e2e 	.word	0x682f2e2e
    743c:	732f6c61 	.word	0x732f6c61
    7440:	682f6372 	.word	0x682f6372
    7444:	735f6c61 	.word	0x735f6c61
    7448:	6d5f6970 	.word	0x6d5f6970
    744c:	616d645f 	.word	0x616d645f
    7450:	0000632e 	.word	0x0000632e
    7454:	682f2e2e 	.word	0x682f2e2e
    7458:	732f6c61 	.word	0x732f6c61
    745c:	682f6372 	.word	0x682f6372
    7460:	745f6c61 	.word	0x745f6c61
    7464:	72656d69 	.word	0x72656d69
    7468:	0000632e 	.word	0x0000632e
    746c:	682f2e2e 	.word	0x682f2e2e
    7470:	732f6c61 	.word	0x732f6c61
    7474:	682f6372 	.word	0x682f6372
    7478:	755f6c61 	.word	0x755f6c61
    747c:	74726173 	.word	0x74726173
    7480:	7973615f 	.word	0x7973615f
    7484:	632e636e 	.word	0x632e636e
    7488:	00000000 	.word	0x00000000
    748c:	682f2e2e 	.word	0x682f2e2e
    7490:	752f6c61 	.word	0x752f6c61
    7494:	736c6974 	.word	0x736c6974
    7498:	6372732f 	.word	0x6372732f
    749c:	6974752f 	.word	0x6974752f
    74a0:	6c5f736c 	.word	0x6c5f736c
    74a4:	2e747369 	.word	0x2e747369
    74a8:	00000063 	.word	0x00000063
    74ac:	682f2e2e 	.word	0x682f2e2e
    74b0:	752f6c61 	.word	0x752f6c61
    74b4:	736c6974 	.word	0x736c6974
    74b8:	6372732f 	.word	0x6372732f
    74bc:	6974752f 	.word	0x6974752f
    74c0:	725f736c 	.word	0x725f736c
    74c4:	62676e69 	.word	0x62676e69
    74c8:	65666675 	.word	0x65666675
    74cc:	00632e72 	.word	0x00632e72

000074d0 <_adcs>:
    74d0:	01000000 0003000c 00041807 00000000     ................
    74e0:	0014080b 00010000 000c0100 18040003     ................
    74f0:	00000004 080b0000 00000014 682f2e2e     ............../h
    7500:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    7510:	00000000                                ....

00007514 <_cfgs>:
    7514:	00201300 14000000 00000000 00000000     .. .............
	...
    7614:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    7624:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    7634:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    7644:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    7654:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    7664:	43000800 43000c00                       ...C...C

0000766c <_usarts>:
    766c:	00000000 40100004 00030000 00700002     .......@......p.
    767c:	0000aaaa 00000000 00000001 40100004     ...............@
    768c:	00030000 00700002 0000aaaa 00000000     ......p.........
    769c:	00000002 40100004 00030000 00700002     .......@......p.
    76ac:	0000f62b 00000000 00000004 40100004     +..............@
    76bc:	00030000 00700002 0000aaaa 00000000     ......p.........
    76cc:	00000006 40100004 00030000 00700002     .......@......p.
    76dc:	0000aaaa 00000000                       ........

000076e4 <_i2cms>:
    76e4:	00000005 00200014 00000100 0000e6e5     ...... .........
    76f4:	00d70000 02dc6c00                       .....l..

000076fc <sercomspi_regs>:
    76fc:	0020000c 00000000 00000000 01ff0006     .. .............
    770c:	00000007 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    771c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

0000772c <_usb_ep_cfgs>:
    772c:	20000ad4 00000000 00000040 20000a94     ... ....@...... 
    773c:	00000000 00000040 20000a54 00000000     ....@...T.. ....
    774c:	00000040                                @...

00007750 <grid_module_mux_lookup>:
    7750:	05040100 0d0c0908 07060302 0f0e0b0a     ................

00007760 <grid_module_din_buffer_size>:
	...

00007761 <grid_module_ain_buffer_size>:
    7761:	41001010                                         .

00007762 <grid_module_led_buffer_size>:
    7762:	49410010 2064254e 78323025 6641000a     ..AIN%d %02x..Af
    7772:	2e726574 25202e2e 2e2e0073 6273752f     ter... %s.../usb
    7782:	7665642f 2f656369 64627375 00632e63     /device/usbdc.c.
	...

00007794 <__sf_fake_stderr>:
	...

000077b4 <__sf_fake_stdin>:
	...

000077d4 <__sf_fake_stdout>:
	...
    77f4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7804:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7814:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7824:	00006665                                ef..

00007828 <_init>:
    7828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    782a:	bf00      	nop
    782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    782e:	bc08      	pop	{r3}
    7830:	469e      	mov	lr, r3
    7832:	4770      	bx	lr

00007834 <__init_array_start>:
    7834:	00000289 	.word	0x00000289

00007838 <_fini>:
    7838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    783a:	bf00      	nop
    783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    783e:	bc08      	pop	{r3}
    7840:	469e      	mov	lr, r3
    7842:	4770      	bx	lr

00007844 <__fini_array_start>:
    7844:	00000265 	.word	0x00000265
